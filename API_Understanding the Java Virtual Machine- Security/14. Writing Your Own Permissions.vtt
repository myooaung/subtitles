WEBVTT
1
00:00:02.340 --> 00:00:05.570
So we've seen that the JRE, Java Runtime,

2
00:00:05.570 --> 00:00:07.990
comes the number number of built‑in permission classes,

3
00:00:07.990 --> 00:00:11.740
such as file permission, and we've seen how we use those,

4
00:00:11.740 --> 00:00:14.230
but suppose those built‑in permissions aren't what we need,

5
00:00:14.230 --> 00:00:15.940
suppose you want to use our own permission,

6
00:00:15.940 --> 00:00:19.540
and we can write our own permissions.

7
00:00:19.540 --> 00:00:21.880
So we're able to write custom permissions,

8
00:00:21.880 --> 00:00:25.150
and to do that, we typically extend the base class,

9
00:00:25.150 --> 00:00:26.640
BasicPermission.

10
00:00:26.640 --> 00:00:29.500
Now, obviously, we could extend one of the other built‑in classes,

11
00:00:29.500 --> 00:00:31.890
but more often than not, you'd extend BasicPermission.

12
00:00:31.890 --> 00:00:34.800
BasicPermission has a two argument constructor,

13
00:00:34.800 --> 00:00:37.750
and we're provided implementation of that,

14
00:00:37.750 --> 00:00:44.440
and then more importantly, permissions have what's known as an implies method.

15
00:00:44.440 --> 00:00:47.710
We have the permission that we've been granted through the policy file,

16
00:00:47.710 --> 00:00:50.080
and then we have the permission that somebody is asking for.

17
00:00:50.080 --> 00:00:51.600
So, for example, in the policy file,

18
00:00:51.600 --> 00:00:53.950
we might have been given read access to a file,

19
00:00:53.950 --> 00:00:57.290
and here somebody's asking for write access to that file.

20
00:00:57.290 --> 00:00:58.840
This will be the same permission, it'd be a file

21
00:00:58.840 --> 00:01:00.840
permission against the same file.

22
00:01:00.840 --> 00:01:04.260
If we've only been given read access, and somebody's asking for

23
00:01:04.260 --> 00:01:07.910
write access, then the permission call should fail. So read

24
00:01:07.910 --> 00:01:11.040
access doesn't imply write access.

25
00:01:11.040 --> 00:01:12.340
Now the opposite probably is true.

26
00:01:12.340 --> 00:01:15.710
So if I've been given write access to the file, then I almost certainly

27
00:01:15.710 --> 00:01:18.740
want to able to read the file, so write does imply read.

28
00:01:18.740 --> 00:01:24.120
So all permissions have an imply method that we have to implement. Once we've

29
00:01:24.120 --> 00:01:27.180
created the permission, and we'll see how we do that in a moment, we add an

30
00:01:27.180 --> 00:01:30.790
entry into the policy file, and custom permissions follow the same naming

31
00:01:30.790 --> 00:01:32.840
conventions that built‑in permissions.

32
00:01:32.840 --> 00:01:36.800
So we give it the name of the class that implements the permission.

33
00:01:36.800 --> 00:01:37.840
In this case,

34
00:01:37.840 --> 00:01:41.840
we're going to model a spaceship, and spaceships can fly at warp

35
00:01:41.840 --> 00:01:44.190
speed, and they have a max warp, and in this case,

36
00:01:44.190 --> 00:01:47.470
we go ahead and say the maxWarp is nine. So, by adding this

37
00:01:47.470 --> 00:01:50.790
permission to our policy file, we're giving the spaceship

38
00:01:50.790 --> 00:01:53.580
the ability to fly at warp nine.

39
00:01:53.580 --> 00:01:55.740
Our permission class would look like this.

40
00:01:55.740 --> 00:01:58.210
So, it'd be a class called WarpPermission,

41
00:01:58.210 --> 00:02:02.100
it would extend BasicPermission, and this is the two argument constructor.

42
00:02:02.100 --> 00:02:05.670
It has a name, which will be maxWarp, then the action, and

43
00:02:05.670 --> 00:02:08.520
the action in this case is the value to which we can warp

44
00:02:08.520 --> 00:02:11.590
at. So we can warp it up to nine.

45
00:02:11.590 --> 00:02:14.620
If this is a file permission, then the name would be the name

46
00:02:14.620 --> 00:02:17.090
of the file that we're applying permission for, and the action

47
00:02:17.090 --> 00:02:20.440
would be one of read or write.

48
00:02:20.440 --> 00:02:23.260
So the implies method. The implies method can be difficult to

49
00:02:23.260 --> 00:02:28.290
implement. With permissions, one permission is a subset of another

50
00:02:28.290 --> 00:02:31.820
permission, and if we have these two permissions,

51
00:02:31.820 --> 00:02:35.260
the fact that we have a implying b does not mean that be implies a.

52
00:02:35.260 --> 00:02:36.110
So again,

53
00:02:36.110 --> 00:02:42.170
if we have read and write, write implies read, but read does not imply

54
00:02:42.170 --> 00:02:46.300
write. So it's really important we get implies correct, and it can be

55
00:02:46.300 --> 00:02:50.150
difficult to correctly implement implies.

56
00:02:50.150 --> 00:02:52.970
So our implies will look something like this. We're saying

57
00:02:52.970 --> 00:02:55.240
first of all, is the permission class a WarpPermission, and

58
00:02:55.240 --> 00:02:57.440
if it's not, return false.

59
00:02:57.440 --> 00:03:01.440
We call our base class, and if that fails implies then we fail.

60
00:03:01.440 --> 00:03:05.640
Otherwise we cast the permission passed into us to be a WarpPermission.

61
00:03:05.640 --> 00:03:07.270
So now, in this case,

62
00:03:07.270 --> 00:03:13.540
this permission that we have here would have been created from the policy file.

63
00:03:13.540 --> 00:03:17.650
So our warpFactor will be whatever is being set in the policy file.

64
00:03:17.650 --> 00:03:20.220
The permission that's passed to implies is the

65
00:03:20.220 --> 00:03:22.040
permission that's being asked for.

66
00:03:22.040 --> 00:03:26.470
So we have to be sure that the warpFactor we've been granted is greater than the

67
00:03:26.470 --> 00:03:29.140
warpFactor somebody is asking for, and if that's the case,

68
00:03:29.140 --> 00:03:39.000
we can return true, and if it's not, we fail the implies call. So, let's write some code to see this in action.

