WEBVTT
1
00:00:02.540 --> 00:00:07.040
So we said there are three parts to the Java security story,

2
00:00:07.040 --> 00:00:09.240
and the first thing is permissions.

3
00:00:09.240 --> 00:00:17.120
So a permission in Java is represented by a subclass of the Permission class.

4
00:00:17.120 --> 00:00:21.390
Permissions are used both for requesting a permission,

5
00:00:21.390 --> 00:00:23.380
so I have to explicitly ask for permission,

6
00:00:23.380 --> 00:00:26.110
and for granting the permission.

7
00:00:26.110 --> 00:00:29.940
In code, a library will request a permission,

8
00:00:29.940 --> 00:00:32.990
and the policy will grant the permission.

9
00:00:32.990 --> 00:00:34.360
And there's some examples of permissions here.

10
00:00:34.360 --> 00:00:36.330
So, for example, there's a FilePermission,

11
00:00:36.330 --> 00:00:39.640
and this extends the base Permission class and the FilePermission

12
00:00:39.640 --> 00:00:42.640
gives us or disallows us access to the file system.

13
00:00:42.640 --> 00:00:47.280
So we'd use this to set up read and/or write access to the file system.

14
00:00:47.280 --> 00:00:48.630
There's a SocketPermission,

15
00:00:48.630 --> 00:00:52.810
and we can use this to allow us to access sockets on specific ports.

16
00:00:52.810 --> 00:00:55.290
And there's also things like a PropertyPermission,

17
00:00:55.290 --> 00:00:57.670
and this extends a base class called BasicPermission,

18
00:00:57.670 --> 00:00:59.190
which many other classes do.

19
00:00:59.190 --> 00:01:03.200
And the PropertyPermission allows me access to basic

20
00:01:03.200 --> 00:01:05.130
properties within the Java runtime.

21
00:01:05.130 --> 00:01:07.440
And we'll see examples of this in a moment.

22
00:01:07.440 --> 00:01:09.100
There's also policy.

23
00:01:09.100 --> 00:01:12.880
Policy is represented by a pluggable class.

24
00:01:12.880 --> 00:01:15.380
So there's a default policy that comes with the framework,

25
00:01:15.380 --> 00:01:19.740
but you can replace that with your own policy implementation.

26
00:01:19.740 --> 00:01:21.390
This works with our ClassLoader,

27
00:01:21.390 --> 00:01:26.180
so our secure ClassLoader, and something called a CodeSource, and this

28
00:01:26.180 --> 00:01:29.910
allows us to grant permissions when code is loaded.

29
00:01:29.910 --> 00:01:33.040
So this is the granting mechanism.

30
00:01:33.040 --> 00:01:36.880
The default implementation uses something called a policy file,

31
00:01:36.880 --> 00:01:40.150
which is a text file which can grant permissions to

32
00:01:40.150 --> 00:01:42.640
allow us to do specific things.

33
00:01:42.640 --> 00:01:44.860
The default policy file looks like this. This at least

34
00:01:44.860 --> 00:01:48.240
is the start of the policy file.

35
00:01:48.240 --> 00:01:49.650
This tells us, for example,

36
00:01:49.650 --> 00:01:53.480
that the extensions directory in Java, these things have all permissions.

37
00:01:53.480 --> 00:01:57.090
Any code loaded from the extensions directory can do

38
00:01:57.090 --> 00:01:59.430
anything it wants within the framework.

39
00:01:59.430 --> 00:02:02.830
And then underneath that, we see specific permissions granted,

40
00:02:02.830 --> 00:02:05.090
so code loaded from anywhere can stop a thread,

41
00:02:05.090 --> 00:02:08.990
it can listen on a socket, and there are many other things this

42
00:02:08.990 --> 00:02:10.310
can do. We're not listing everything here.

43
00:02:10.310 --> 00:02:11.740
This is quite a long file.

44
00:02:11.740 --> 00:02:16.670
And then finally there's enforcement. So enforcement is represented by

45
00:02:16.670 --> 00:02:19.850
something called the AccessController, and the AccessController and the

46
00:02:19.850 --> 00:02:24.840
SecurityManager work hand in hand to provide enforcement.

47
00:02:24.840 --> 00:02:28.640
It's the job of the developer to require permissions, so

48
00:02:28.640 --> 00:02:32.410
typically inside a framework inside the library, the development

49
00:02:32.410 --> 00:02:34.280
will call to the AccessController and say,

50
00:02:34.280 --> 00:02:38.000
is this code that's currently executing allowed to do this thing?

51
00:02:38.000 --> 00:02:40.930
Does it have the permission to access the file system? Does

52
00:02:40.930 --> 00:02:43.940
it have the permission to access a socket?

53
00:02:43.940 --> 00:02:49.180
So this is an optâ€‘in model, so every library has to opt in to security.

54
00:02:49.180 --> 00:02:53.490
So it's the job of the library writer to call into the AccessController and say,

55
00:02:53.490 --> 00:02:55.020
is this permission allowed?

56
00:02:55.020 --> 00:03:06.000
And in the next module, we'll see how each of these things plays together to allow or disallow access to specific things within Java.

