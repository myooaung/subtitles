1
00:00:02,940 --> 00:00:08,010
So what we have here is a sort of layered application with three layers.

2
00:00:08,010 --> 00:00:11,780
We have the main code, and that's this guy here,

3
00:00:11,780 --> 00:00:13,830
and that's in a project called Runner.

4
00:00:13,830 --> 00:00:16,250
I'm just going to compile that into a set of classes.

5
00:00:16,250 --> 00:00:19,680
This will be com.knowledgespike.main and then the method is

6
00:00:19,680 --> 00:00:23,240
called main and we just run this application.

7
00:00:23,240 --> 00:00:28,560
We also have a data access layer and a data service layer, and the data

8
00:00:28,560 --> 00:00:34,260
service layer uses data access layer. So my main code calls the service and

9
00:00:34,260 --> 00:00:37,420
then the service calls the data access and data access actually does the

10
00:00:37,420 --> 00:00:42,590
write. All we're doing is overcomplicating a write to a file and we specify

11
00:00:42,590 --> 00:00:46,040
the file name here, so temp/message.txt.

12
00:00:46,040 --> 00:00:48,370
So there are three separate projects.

13
00:00:48,370 --> 00:00:52,210
The service layer is this guy here and the service layer gets

14
00:00:52,210 --> 00:00:54,580
given a reference to the data access layer,

15
00:00:54,580 --> 00:01:00,240
and it's simply calls access.write message and the data access layer,

16
00:01:00,240 --> 00:01:04,800
just this one here, when the write method gets called, create a file

17
00:01:04,800 --> 00:01:07,740
writer, and writes to the file stream.

18
00:01:07,740 --> 00:01:15,440
So the data service code and the data access code are compiled into jar files.

19
00:01:15,440 --> 00:01:19,130
So when I compile my code, I have a data access.jar and a

20
00:01:19,130 --> 00:01:24,440
service.jar. So to run this from the command prompt,

21
00:01:24,440 --> 00:01:29,180
we're going to run it with a security manager and with a policy file,

22
00:01:29,180 --> 00:01:32,130
and there is the class path pointed at both the dataaccess.jar

23
00:01:32,130 --> 00:01:36,980
file on the service.jar file and also a com.knowledgespike.main.

24
00:01:36,980 --> 00:01:39,340
The policy file looks like this.

25
00:01:39,340 --> 00:01:45,140
Now notice that we now have three grant blocks in here, one for each code base.

26
00:01:45,140 --> 00:01:46,750
So starting at the bottom,

27
00:01:46,750 --> 00:01:49,670
we have a grand block for the class files in

28
00:01:49,670 --> 00:01:52,900
demos/Callstacks/out/production/runner/*, so that's my

29
00:01:52,900 --> 00:01:58,880
com.knowledgespike.main class and I give that permission to write to the temp/message.txt

30
00:01:58,880 --> 00:01:59,840
file.

31
00:01:59,840 --> 00:02:03,800
We also have a grant entry for the code base with Service.jar and we

32
00:02:03,800 --> 00:02:07,240
give that the same permission and we have a grant for our

33
00:02:07,240 --> 00:02:11,740
DataAccess.jar and we give that the same permission.

34
00:02:11,740 --> 00:02:14,210
So if I go back to the command prompt, and from here,

35
00:02:14,210 --> 00:02:18,900
run the code, the code runs as you'd expect. If I look in the temp folder,

36
00:02:18,900 --> 00:02:24,640
there is the message.txt file that we created, so let me go and delete that.

37
00:02:24,640 --> 00:02:29,200
Now if I go back to the policy file, so remember the runner code calls the

38
00:02:29,200 --> 00:02:32,640
service layer and that calls the data access code.

39
00:02:32,640 --> 00:02:37,150
So we have these three classes on the stack frame at the same time,

40
00:02:37,150 --> 00:02:39,570
which then call down to the file writer and the file

41
00:02:39,570 --> 00:02:41,990
write actually writes to the file.

42
00:02:41,990 --> 00:02:45,690
So if I remove permission from one of these classes, then the call

43
00:02:45,690 --> 00:02:47,530
should fail, so let's just pick one at random.

44
00:02:47,530 --> 00:02:50,640
Let's take my service jar file here and comment out

45
00:02:50,640 --> 00:02:53,140
this permission to write to this file.

46
00:02:53,140 --> 00:02:58,020
Make sure I save that file, go back to the command prompt, and run the

47
00:02:58,020 --> 00:03:01,880
code again, and now we get a security exception.

48
00:03:01,880 --> 00:03:05,280
So the access controller is checking everything that's in

49
00:03:05,280 --> 00:03:08,360
the stack frame and making sure we all have access, we're

50
00:03:08,360 --> 00:03:11,910
all allowed to write to this file, we all have permission.

51
00:03:11,910 --> 00:03:14,740
And if anything in the stack frame fails the check,

52
00:03:14,740 --> 00:03:17,340
then we get the security exception.

53
00:03:17,340 --> 00:03:22,690
So now that we've seen how to grant permissions based on code location,

54
00:03:22,690 --> 00:03:26,070
we can now take a look at how to grant permissions based on signing.

55
00:03:26,070 --> 00:03:32,000
So who actually created this code? And that's what we'll see in the next module.

