WEBVTT
1
00:00:02.540 --> 00:00:04.910
So, to see this in action, we are going to use the same

2
00:00:04.910 --> 00:00:07.600
application that we saw previously, except here,

3
00:00:07.600 --> 00:00:10.450
rather than allowing access based on the location of a

4
00:00:10.450 --> 00:00:12.500
file, for one of these JAR files,

5
00:00:12.500 --> 00:00:16.460
we allow access based on who signed it. And the person signing it will be me.

6
00:00:16.460 --> 00:00:18.190
So how do we do that?

7
00:00:18.190 --> 00:00:21.740
So, following the steps, we've already created a JAR file.

8
00:00:21.740 --> 00:00:24.410
So the next step, in that case, is to generate the keys. And

9
00:00:24.410 --> 00:00:27.490
we generate keys in Java by using a tool called keytool, and

10
00:00:27.490 --> 00:00:30.460
our command‑line looks like this.

11
00:00:30.460 --> 00:00:35.340
So here we're saying generate some keys, we store these keys in a keystore that,

12
00:00:35.340 --> 00:00:38.880
in this case, is going to be called signerstore, and whenever we create keys,

13
00:00:38.880 --> 00:00:39.580
we give these keys,

14
00:00:39.580 --> 00:00:42.730
if you like, a name, this is called the alias, and in this case,

15
00:00:42.730 --> 00:00:46.350
the alias we give these keys is going to be called signFiles.

16
00:00:46.350 --> 00:00:47.660
So the keystore needs a password,

17
00:00:47.660 --> 00:00:50.860
so I give it a password here, and we need to enter it again.

18
00:00:50.860 --> 00:00:55.340
And then we generate information that's going to go on the

19
00:00:55.340 --> 00:00:56.580
certificate that we create here.

20
00:00:56.580 --> 00:00:58.920
We're creating a public key, private key pair, that's

21
00:00:58.920 --> 00:01:01.840
stored as a certificate, and that certificate needs data.

22
00:01:01.840 --> 00:01:04.290
We need to enter that data here.

23
00:01:04.290 --> 00:01:09.740
Now that we've entered that data, it asks us for a password for this key.

24
00:01:09.740 --> 00:01:12.590
That's the original password for the keystore, and now within the

25
00:01:12.590 --> 00:01:15.530
keystore, we're storing keys, and we can store this with the same

26
00:01:15.530 --> 00:01:18.400
password or with a different password. If I just hit Enter here,

27
00:01:18.400 --> 00:01:20.940
they'll store them with the same password.

28
00:01:20.940 --> 00:01:24.030
So once I have that, I can now sign the JAR file.

29
00:01:24.030 --> 00:01:30.300
So if I go to the out\artifacts folder, this is where my JAR files are stored.

30
00:01:30.300 --> 00:01:32.220
There's a file here called DataAccess.jar, and

31
00:01:32.220 --> 00:01:34.440
that's the file I'm going to sign.

32
00:01:34.440 --> 00:01:37.460
So we sign the JAR file using another tool called

33
00:01:37.460 --> 00:01:41.040
jarsigner, and that command looks like this.

34
00:01:41.040 --> 00:01:45.310
So here we're saying this is the name of the keystore, I want to

35
00:01:45.310 --> 00:01:50.670
create a signed jar called sDataAccess.jar. The input to this is the

36
00:01:50.670 --> 00:01:55.580
file called DataAccess.jar, and I want to use the signFiles key that

37
00:01:55.580 --> 00:01:57.640
I stored in this keystore.

38
00:01:57.640 --> 00:01:58.860
And if I do that,

39
00:01:58.860 --> 00:02:04.340
it'll ask me for the password, and then it will create the

40
00:02:04.340 --> 00:02:07.500
signed jar file for me. And if I do a DIR here,

41
00:02:07.500 --> 00:02:11.240
we see we have a file called sDataAccess.jar.

42
00:02:11.240 --> 00:02:18.040
So here are my JAR files, and if I look inside sDataAccess.jar, and the

43
00:02:18.040 --> 00:02:22.350
easiest way to do that is to rename it to a .zip file, and look inside

44
00:02:22.350 --> 00:02:25.840
here, inside the META.INF folder, we have these three files. There's a

45
00:02:25.840 --> 00:02:28.940
manifest and information about the signing.

46
00:02:28.940 --> 00:02:31.140
If I take that manifest file,

47
00:02:31.140 --> 00:02:36.420
we can see inside here it's got information about the the signing of the files.

48
00:02:36.420 --> 00:02:39.550
In this case, it says it's got a SHA‑256 digest. This is what's

49
00:02:39.550 --> 00:02:42.490
being used to sign this code inside here.

50
00:02:42.490 --> 00:02:46.340
So the next step was to export the certificate, and we

51
00:02:46.340 --> 00:02:48.250
do this again using the keytool.

52
00:02:48.250 --> 00:02:49.090
So in this case,

53
00:02:49.090 --> 00:02:53.810
we do keytool ‑export, we specify the name of the keystore, we specify

54
00:02:53.810 --> 00:02:56.170
the name we gave to the files inside the keystore, in this case,

55
00:02:56.170 --> 00:02:59.250
signFiles, and we also give it a certificate name.

56
00:02:59.250 --> 00:03:05.490
So I'm going to call this kevin.cer. Enter the password, and then we

57
00:03:05.490 --> 00:03:09.040
have a file called kevin.cer, and there it is.

58
00:03:09.040 --> 00:03:12.540
So let's go and try and use this signed JAR file.

59
00:03:12.540 --> 00:03:16.040
So if I change into the directory where my class files are stored,

60
00:03:16.040 --> 00:03:19.580
so I do an ls here, this is where the files are.

61
00:03:19.580 --> 00:03:24.010
So, there's a com\knowledgespike\Main.class.

62
00:03:24.010 --> 00:03:27.770
That's the location of the main Runner for this application.

63
00:03:27.770 --> 00:03:30.810
So from here, I can try and run the application.

64
00:03:30.810 --> 00:03:34.640
So, to run this application, we set the class path to be the current

65
00:03:34.640 --> 00:03:40.440
directory, we add on the sDataAccess.jar on the services.jar, we apply a

66
00:03:40.440 --> 00:03:44.140
security manager, and we apply a policy file. If we take a look at that

67
00:03:44.140 --> 00:03:46.280
policy file, at the moment in here,

68
00:03:46.280 --> 00:03:50.640
we grant access to service.jar, and we grant access to

69
00:03:50.640 --> 00:03:54.140
the class files in the Runner folder.

70
00:03:54.140 --> 00:03:57.880
So if I try and execute the code here,

71
00:03:57.880 --> 00:04:00.370
then we get a security exception. We get an access control

72
00:04:00.370 --> 00:04:03.200
exception, and it's telling us we can't write to this file,

73
00:04:03.200 --> 00:04:06.380
we can't write a temp\message.txt.

74
00:04:06.380 --> 00:04:10.220
So what I now need to do is add an entry into this policy file that gives

75
00:04:10.220 --> 00:04:13.540
the signed JAR file permission to write to this file.

76
00:04:13.540 --> 00:04:15.760
So, to run this code, I have to do two things.

77
00:04:15.760 --> 00:04:18.960
I have to edit the policy file to give sDataAccess

78
00:04:18.960 --> 00:04:21.540
permission to access this file.

79
00:04:21.540 --> 00:04:22.930
Before we do that,

80
00:04:22.930 --> 00:04:27.290
I need to import the certificate into a keystore for the receiver.

81
00:04:27.290 --> 00:04:31.380
So remember, the certificate is stored in a file called kevin.cer, and

82
00:04:31.380 --> 00:04:33.980
the import command, again, is done with keytool.

83
00:04:33.980 --> 00:04:37.340
So here I'm going to create a different keystore.

84
00:04:37.340 --> 00:04:39.900
So we're imagining that the person who created this code is

85
00:04:39.900 --> 00:04:42.010
on one machine and we are on a different machine, so we

86
00:04:42.010 --> 00:04:44.240
will have different keystores.

87
00:04:44.240 --> 00:04:48.400
So in this case, we do an import. We're importing kevin.cer. We're given the

88
00:04:48.400 --> 00:04:51.460
keystore name of receiverstore. We give it a different alias.

89
00:04:51.460 --> 00:04:54.680
So we just pick whatever alias we want for this import. I'm just

90
00:04:54.680 --> 00:04:58.070
going to call this thing kevin as part of the import. We again need

91
00:04:58.070 --> 00:05:01.350
to add a password for our file here, so enter a password for this.

92
00:05:01.350 --> 00:05:05.530
This is a new keystore. It gives me some information about the certificate,

93
00:05:05.530 --> 00:05:08.700
and asks me, do I want to trust it? I say yes.

94
00:05:08.700 --> 00:05:13.280
And again, if I do ls here, we now have a keystore called receiverstore.

95
00:05:13.280 --> 00:05:14.540
Once I have that,

96
00:05:14.540 --> 00:05:17.740
I can try running the code again, which we now at least have the

97
00:05:17.740 --> 00:05:21.050
certificate in place. Again, it still fails, because, again,

98
00:05:21.050 --> 00:05:25.140
we haven't yet set up the policy file to trust this code.

99
00:05:25.140 --> 00:05:28.110
So in the policy file, we need to add two things.

100
00:05:28.110 --> 00:05:32.480
We first need to tell the security manager where the keystore lives,

101
00:05:32.480 --> 00:05:36.470
and that's added with a keystore entry in the policy file. And again,

102
00:05:36.470 --> 00:05:38.330
we just give it the name of the, the fully

103
00:05:38.330 --> 00:05:40.540
qualified name to the policy file here.

104
00:05:40.540 --> 00:05:43.160
So it's in my demos folder and it's called receiverstore.

105
00:05:43.160 --> 00:05:46.180
Jks at the end here means Java Key Store,

106
00:05:46.180 --> 00:05:48.570
so the type of the keystore is the Java Key Store. There may

107
00:05:48.570 --> 00:05:51.140
be other keystores that could be used.

108
00:05:51.140 --> 00:05:54.470
Once we have that, we need to add our grant.

109
00:05:54.470 --> 00:05:56.240
So the grant, in this case,

110
00:05:56.240 --> 00:05:59.390
is another grant block, so it'll say grant, and it'll

111
00:05:59.390 --> 00:06:01.440
give write permission to this file.

112
00:06:01.440 --> 00:06:01.810
But now,

113
00:06:01.810 --> 00:06:06.150
rather than saying code base here, we're going to say signedBy. And

114
00:06:06.150 --> 00:06:11.390
a signedBy and the value we pass here is the alias that we use to

115
00:06:11.390 --> 00:06:14.820
store the key inside this keystore.

116
00:06:14.820 --> 00:06:16.620
And then once we have that in place,

117
00:06:16.620 --> 00:06:19.790
we should now be able to run the code again, and it now works.

118
00:06:19.790 --> 00:06:24.760
So now the DataAccess.jar file, the sDataAccess.jar file is trusted through

119
00:06:24.760 --> 00:06:29.400
the fact that it's been signed. And a simple test to show that it is the

120
00:06:29.400 --> 00:06:34.340
sDataAccess.jar file will be to go back here and just make this DataAccess.jar

121
00:06:34.340 --> 00:06:38.850
and run that, and that code fails because we don't now have an entry for

122
00:06:38.850 --> 00:06:42.240
DataAccess.jar inside the policy file.

123
00:06:42.240 --> 00:06:45.980
So now that we've seen how to set up signed JAR files, in the next

124
00:06:45.980 --> 00:06:49.220
module, we'll see how to create our own permissions.

125
00:06:49.220 --> 00:06:52.470
So even though Java comes with many built‑in permissions,

126
00:06:52.470 --> 00:06:53.340
they may not be enough.

127
00:06:53.340 --> 00:06:59.000
You may need to write your own permission for specific things, and we'll see how we do that.

