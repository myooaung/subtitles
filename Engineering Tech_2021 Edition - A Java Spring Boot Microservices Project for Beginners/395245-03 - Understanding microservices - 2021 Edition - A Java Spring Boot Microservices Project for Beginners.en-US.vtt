WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.620 --> 00:00:03.330
Let's understand microservices.

00:00:03.330 --> 00:00:05.070
If we're to build an application,

00:00:05.070 --> 00:00:07.290
for example, a course catalog application,

00:00:07.290 --> 00:00:09.045
we can take two approaches.

00:00:09.045 --> 00:00:14.025
We can build a huge monolithic application with different modules and a huge database.

00:00:14.025 --> 00:00:18.750
Or we can build separate service or separate app for each of those modules.

00:00:18.750 --> 00:00:20.310
One for course catalog 1-4,

00:00:20.310 --> 00:00:22.710
course ab, and another for user App.

00:00:22.710 --> 00:00:28.740
And then we can make these applications or services interact through wrist.

00:00:28.740 --> 00:00:32.200
That is though microservices based approach.

00:00:32.450 --> 00:00:38.040
The key disadvantage of a monolithic application is if there is a problem in one area,

00:00:38.040 --> 00:00:40.049
it could take down the entire application.

00:00:40.049 --> 00:00:42.335
And also, you cannot upgrade

00:00:42.335 --> 00:00:46.530
individual models without bringing down the entire application.

00:00:46.960 --> 00:00:49.865
Any day microservices based application,

00:00:49.865 --> 00:00:53.810
you can develop each of these modules independently without impacting the other.

00:00:53.810 --> 00:00:57.845
All you need to worry about is what data is getting extends between these services.

00:00:57.845 --> 00:01:00.905
And you have to keep that in mind while building the services.

00:01:00.905 --> 00:01:03.290
That is the key idea behind microservices,

00:01:03.290 --> 00:01:07.470
you build individual models and expose them as services.

00:01:08.230 --> 00:01:12.320
Typically, we expose microservices through rest API so

00:01:12.320 --> 00:01:16.440
that they can be access over HTTP protocol by remote clients.

00:01:16.630 --> 00:01:20.000
While building a microservices bus application,

00:01:20.000 --> 00:01:22.850
you take a domain driven approach.

00:01:22.850 --> 00:01:26.810
Juristic, the scope of a micro service to a particular domain.

00:01:26.810 --> 00:01:29.540
For example, you could have separate service for our service and

00:01:29.540 --> 00:01:34.860
payment models so that the scope is restricted to one business or functionality.

00:01:35.410 --> 00:01:38.195
Microservices are loosely coupled.

00:01:38.195 --> 00:01:39.380
You can build, test,

00:01:39.380 --> 00:01:41.790
and deploy them independently.

00:01:41.860 --> 00:01:45.620
With microservices, you can recover from failure quickly.

00:01:45.620 --> 00:01:47.180
One Microsoft is going down,

00:01:47.180 --> 00:01:49.295
will not take the entire application down.

00:01:49.295 --> 00:01:54.390
There are ways to handle it and you'll see some of the examples in our course.

00:01:54.640 --> 00:01:57.770
So it microservices, you can do faster changes,

00:01:57.770 --> 00:01:58.910
you can handle failure.

00:01:58.910 --> 00:02:04.050
You can make your application more available and you can scale your application easily.
