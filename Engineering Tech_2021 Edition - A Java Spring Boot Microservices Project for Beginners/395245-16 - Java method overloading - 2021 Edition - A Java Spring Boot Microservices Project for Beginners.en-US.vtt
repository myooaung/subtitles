WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.500 --> 00:00:03.210
Let's understand method overloading,

00:00:03.210 --> 00:00:07.980
which is also known as static polymorphism, are compile-time polymorphism.

00:00:07.980 --> 00:00:14.010
In method overloading, we can have methods with the same name and different signature.

00:00:14.010 --> 00:00:16.305
Let's see some examples.

00:00:16.305 --> 00:00:19.710
We've opened up eugenics project to project.

00:00:19.710 --> 00:00:22.660
Let's go to the doc glass.

00:00:23.780 --> 00:00:27.130
We ever make sound method

00:00:31.550 --> 00:00:36.880
will add another mix on muttered but with a different signature.

00:00:41.940 --> 00:00:44.830
And as soon as recopy it gives an error.

00:00:44.830 --> 00:00:47.020
But if we change the signature, for example,

00:00:47.020 --> 00:00:48.955
let's say we pass a integer variable,

00:00:48.955 --> 00:00:51.955
then that eta root go away.

00:00:51.955 --> 00:00:58.460
So this mattered is taking an integer parameter with some value to it.

00:00:59.760 --> 00:01:03.070
And then print that.

00:01:03.070 --> 00:01:05.140
So if we invoke,

00:01:05.140 --> 00:01:08.035
make sound without any parameter distributed chord,

00:01:08.035 --> 00:01:09.910
and if we pass an integer value,

00:01:09.910 --> 00:01:15.640
then this makes our material would get called Should.

00:01:15.640 --> 00:01:17.905
This is method overloading in Java and you can have

00:01:17.905 --> 00:01:21.620
as many methods with different signature.

00:01:23.190 --> 00:01:26.210
Let's have another one.

00:01:31.090 --> 00:01:35.670
And then we'll just append that.

00:01:38.920 --> 00:01:42.830
And we'll convert it to let say uppercase.

00:01:42.830 --> 00:01:45.275
And instead of returning,

00:01:45.275 --> 00:01:49.320
wired will return. Some value.

00:01:51.790 --> 00:01:55.200
Will be dumb hello123.

00:01:55.240 --> 00:01:58.620
Now let's go to the main class.

00:01:58.960 --> 00:02:02.750
And we'll call dog one makes sound.

00:02:02.750 --> 00:02:07.160
And then we'll also call doggone make sound written integer value.

00:02:07.160 --> 00:02:14.280
And we'll call Dao Guan mix sound with a string value.

00:02:17.740 --> 00:02:29.700
Today, whether it is nice and whatever it will store it in a variable.

00:02:35.980 --> 00:02:41.340
And we'll print abc. Let's run it now.

00:02:45.820 --> 00:02:50.310
Here we can see that the three meters have getting involved.

00:02:50.680 --> 00:02:53.210
First one without any parameters,

00:02:53.210 --> 00:02:57.230
the second one with a digit and delta1 with string.

00:02:57.230 --> 00:03:01.730
This is method overloading or starting polymorphism in Java,

00:03:01.730 --> 00:03:05.849
where you can have methods with the same name but different signatures.
