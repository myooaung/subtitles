WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.460
Welcome back. Let's understand how to set up spring cloud config server.

00:00:06.920 --> 00:00:10.440
Will register it on the Eureka server so that it

00:00:10.440 --> 00:00:14.350
can be discovered by ardor payment or any other service.

00:00:14.930 --> 00:00:19.870
Let's first start the Eureka server.

00:00:23.300 --> 00:00:28.600
It looks started at port 8761.

00:00:29.300 --> 00:00:35.530
Now let's create the spring cloud config server app.

00:00:36.170 --> 00:00:40.015
We'll go to Start dot spring dot io.

00:00:40.015 --> 00:00:45.000
Let's create a new project future ex convicts server.

00:00:46.330 --> 00:00:48.890
In terms of dependencies,

00:00:48.890 --> 00:00:56.220
we need config server dependency and also Eureka claim dependency for the config server.

00:00:58.810 --> 00:01:01.940
Let's generate the project.

00:01:01.940 --> 00:01:08.250
Extract it. Now let's load the project to intelligent.

00:01:09.700 --> 00:01:14.040
Once lauded, go to the main application class.

00:01:15.280 --> 00:01:20.730
Here we need to add an annotation and a bill config server.

00:01:23.190 --> 00:01:26.830
And this class will get imported because we already

00:01:26.830 --> 00:01:30.650
have required dependency for the config server.

00:01:31.260 --> 00:01:35.290
Let's change the port to 8888.

00:01:35.290 --> 00:01:37.450
And also we'll give it a name,

00:01:37.450 --> 00:01:39.890
have fixed config server.

00:01:41.070 --> 00:01:47.785
Next, we let 2 this config server to a back-end Git repository.

00:01:47.785 --> 00:01:51.055
That's where the configuration file will be stored.

00:01:51.055 --> 00:01:53.440
And spring cloud config server pool

00:01:53.440 --> 00:01:58.100
the configuration from the Git repository and service to the clients.

00:02:00.150 --> 00:02:06.590
We have a good deposit three future ex skill and that there is a Microsoft folder.

00:02:08.520 --> 00:02:15.800
We'll use this particular repository to map to the spring cloud config server.

00:02:16.320 --> 00:02:19.030
Become Clone or download,

00:02:19.030 --> 00:02:24.340
copy the URL, paste it into application dot property spray.

00:02:24.340 --> 00:02:27.535
You can choose to use your own Git repository,

00:02:27.535 --> 00:02:33.535
where you can use our git repository per two large able to check in any file.

00:02:33.535 --> 00:02:40.525
Here. We have our application dot properties fail with two properties,

00:02:40.525 --> 00:02:44.660
organism name and service welcome message.

00:02:47.710 --> 00:02:50.390
And then we also have artists,

00:02:50.390 --> 00:02:53.820
service properties and payment service properties.

00:02:56.290 --> 00:03:00.770
These two will be for Microsoft is specific properties fail,

00:03:00.770 --> 00:03:03.350
which we'll discuss more in detail when we tried to

00:03:03.350 --> 00:03:07.050
integrate different microservices without conflicts over.

00:03:11.800 --> 00:03:22.050
Now let's run it. It started at port 8888.

00:03:22.180 --> 00:03:25.130
Nothing is mapped to the root directory.

00:03:25.130 --> 00:03:26.900
You can specify slash,

00:03:26.900 --> 00:03:31.560
handoff, property, filename, and class default.

00:03:32.980 --> 00:03:37.910
That could fit you are the keys and values of application of properties

00:03:37.910 --> 00:03:42.650
and also on the keys and values a product or service that properties you can see here.

00:03:42.650 --> 00:03:46.250
Application dot properties will have global properties and those can

00:03:46.250 --> 00:03:50.550
be overwritten by Microsoft is specific properties.

00:03:50.650 --> 00:03:56.220
Harder services, just one property service dot welcome.me.

00:03:58.210 --> 00:04:02.580
So it is also present in the application layer properties.

00:04:05.860 --> 00:04:12.270
And application dot properties has an additional organization name property.

00:04:17.410 --> 00:04:21.980
We'll see shortly when Mrs. will get displayed.

00:04:21.980 --> 00:04:25.490
Similarly, we can see the content up payment as service properties.

00:04:25.490 --> 00:04:33.050
Fake. It for type a,

00:04:33.050 --> 00:04:34.430
property values doesn't exist.

00:04:34.430 --> 00:04:35.630
You'll see by default to

00:04:35.630 --> 00:04:39.540
the global property file content that is application their properties.

00:04:42.310 --> 00:04:45.560
Now we have a conflict servers setup which is

00:04:45.560 --> 00:04:48.500
mapped to properties failed on the GitHub repository.

00:04:48.500 --> 00:04:51.185
Let's modify the content of this file.

00:04:51.185 --> 00:04:54.090
We'll save our son to.

00:04:54.340 --> 00:04:59.735
And let's save, endow upload this file to the GitHub repository,

00:04:59.735 --> 00:05:07.475
upload files, and let's drag this files and then commit.

00:05:07.475 --> 00:05:11.880
You can try the same steps in your own GitHub repository,

00:05:12.790 --> 00:05:18.060
where you can simply point to the files and see the output.

00:05:19.600 --> 00:05:26.400
Who can. Now we can see that the changes have been updated in the GitHub repository.

00:05:26.410 --> 00:05:29.120
Now if we refresh this link,

00:05:29.120 --> 00:05:31.740
you will see were sent to here.

00:05:33.970 --> 00:05:38.435
So we did not have to restart the conflicts over the conflicts server

00:05:38.435 --> 00:05:42.154
keeps looking for changes to the backend GitHub repository,

00:05:42.154 --> 00:05:47.250
and it will automatically pick the latest changes without having to restart it.

00:05:47.350 --> 00:05:51.410
So this is our spring cloud config server works.

00:05:51.410 --> 00:05:57.830
And we can just say nibble Discovery client so that it will get registered on recall.

00:05:57.830 --> 00:06:06.440
So spring cloud config server

00:06:06.440 --> 00:06:07.910
can work without the recall.

00:06:07.910 --> 00:06:13.140
So, but in that case, you look to point each micro service to the conflict server URL.

00:06:14.830 --> 00:06:20.430
We can see that a fixed config server is now registered on the RCA.

00:06:21.310 --> 00:06:26.090
We have completed sitting up a stream Cloud config server and

00:06:26.090 --> 00:06:30.900
we have mapped it to a back-end Git repository.

00:06:31.390 --> 00:06:35.240
Next, we'll try to set up the order and permanent service.

00:06:35.240 --> 00:06:41.075
And then after that, we'll integrate these services with the spring cloud config server.

00:06:41.075 --> 00:06:42.990
Thank you.
