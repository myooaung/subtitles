WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.110 --> 00:00:04.750
Let's open intelligence and click on New Project.

00:00:08.360 --> 00:00:12.105
And we'll select the project papers, Java.

00:00:12.105 --> 00:00:17.685
And intelligently pick up the FAR the JDK worsen from this machine.

00:00:17.685 --> 00:00:21.480
You can choose to many other GDK that might be available on your system.

00:00:21.480 --> 00:00:26.025
You can also download a particular JDK worsen from intelligence.

00:00:26.025 --> 00:00:32.595
Let's select Java 1.8 and then proceed. Click Next.

00:00:32.595 --> 00:00:36.610
Next. We'll give our project name,

00:00:38.450 --> 00:00:48.650
future Rx, Java one. And finish.

00:00:52.440 --> 00:00:57.920
You can also create a new project by clicking on File New Project.

00:00:59.130 --> 00:01:02.990
And follow the similar steps.

00:01:06.060 --> 00:01:08.950
Let's expand this.

00:01:08.950 --> 00:01:12.520
And now we see SRC folder under dark,

00:01:12.520 --> 00:01:15.775
cleared new Java classes and start coding.

00:01:15.775 --> 00:01:18.740
Let's create a new class.

00:01:23.220 --> 00:01:26.320
We'll call it future decks, helloworld.

00:01:26.320 --> 00:01:29.680
In Java that convinced them is you write a CamelCase

00:01:29.680 --> 00:01:34.520
where the first letter of every word should be placed.

00:01:41.700 --> 00:01:45.145
Now you've created a public class.

00:01:45.145 --> 00:01:48.490
Public means it will be accessible from outside.

00:01:48.490 --> 00:01:50.425
We'll learn more about public,

00:01:50.425 --> 00:01:53.350
private or not that access modifiers later.

00:01:53.350 --> 00:01:58.370
Let's simply tape men and hit tab.

00:01:58.740 --> 00:02:02.305
Create the public static void method,

00:02:02.305 --> 00:02:05.830
which is the starting point for any Java application.

00:02:05.830 --> 00:02:10.070
And will write a print statement here.

00:02:10.380 --> 00:02:16.730
In Java, you rate print statement by saying System.out.print dilemma,

00:02:16.950 --> 00:02:20.510
darkroom, print to a new layer.

00:02:23.730 --> 00:02:26.780
And we'll have a string.

00:02:26.820 --> 00:02:31.279
And then we need a semicolon to end the sentence.

00:02:31.500 --> 00:02:37.580
Let's write it. It is started building the project.

00:02:39.210 --> 00:02:42.520
And we sought out put into a console.

00:02:42.520 --> 00:02:47.230
Now if we write another sentence, let's do that.

00:02:47.230 --> 00:02:50.660
We'll say system out, print ellen, Hello.

00:02:51.100 --> 00:02:53.570
And let's execute this.

00:02:53.570 --> 00:02:58.955
You can execute by clicking on the arrow at domain method or at the class level,

00:02:58.955 --> 00:03:01.650
or you can execute from here also.

00:03:05.380 --> 00:03:08.840
Now it is printed Buddha lines.

00:03:08.840 --> 00:03:13.955
And there is a new line after every print statement because we said print l n,

00:03:13.955 --> 00:03:15.995
l n stands for GNU Lane.

00:03:15.995 --> 00:03:19.655
Let's see how to debug programs in intelligence.

00:03:19.655 --> 00:03:23.135
In intelligent, you can easily put a break point by

00:03:23.135 --> 00:03:27.215
clicking on a particular line on this panel.

00:03:27.215 --> 00:03:30.425
Let's say we aren't to execute up to hello one,

00:03:30.425 --> 00:03:34.980
then put a breakpoint and then debug. So click here.

00:03:35.130 --> 00:03:39.230
You can debug by clicking on this icon.

00:03:39.240 --> 00:03:42.145
Or you can be worked from here also,

00:03:42.145 --> 00:03:44.540
you can say done debug.

00:03:47.970 --> 00:03:51.820
And it asks you which class to execute.

00:03:51.820 --> 00:03:52.975
For us.

00:03:52.975 --> 00:03:56.720
There is just one plus Currently.

00:03:59.370 --> 00:04:03.610
It printed up to hello and you can click on the console tab.

00:04:03.610 --> 00:04:05.425
And then it stopped here.

00:04:05.425 --> 00:04:08.020
Now you can step over.

00:04:08.020 --> 00:04:10.045
You can go to the next layer.

00:04:10.045 --> 00:04:12.940
And then the next line will get printed.

00:04:12.940 --> 00:04:15.850
And under the debugger you can see all the variables.

00:04:15.850 --> 00:04:18.575
So right now we don't have anything, but later,

00:04:18.575 --> 00:04:19.895
when the program grows,

00:04:19.895 --> 00:04:23.910
we'll see how to debug easily using IntelliJ.

00:04:25.120 --> 00:04:29.160
And you can click here and remove the breakpoint.

00:04:29.650 --> 00:04:32.704
To increase the Fontan intelligence.

00:04:32.704 --> 00:04:34.400
You can go to files.

00:04:34.400 --> 00:04:43.745
Sitting, can expand editor, click on font.

00:04:43.745 --> 00:04:47.735
You can specify had font increase line spacing.

00:04:47.735 --> 00:04:51.150
So let's increase the foreign to 22.

00:04:52.780 --> 00:04:59.450
And you can go to project structure and see

00:04:59.450 --> 00:05:08.390
different city with GDK worsen and language level or the modules in liabilities.

00:05:10.110 --> 00:05:13.310
Okay, let's cancel this.

00:05:13.740 --> 00:05:19.370
Now let's understand this HelloWorld program and how Java works.

00:05:20.310 --> 00:05:24.175
So when we created this Java class,

00:05:24.175 --> 00:05:27.340
intelligent would have created it dark Java file,

00:05:27.340 --> 00:05:30.470
that is future ex HelloWorld.java.

00:05:30.570 --> 00:05:35.600
You can go to the Project Explorer and see that fail.

00:05:35.850 --> 00:05:40.390
So this is the project directory under SRC.

00:05:40.390 --> 00:05:44.330
You can see a file with dot Java extension.

00:05:46.380 --> 00:05:49.495
Now when we run this program,

00:05:49.495 --> 00:05:55.240
it would have compiled and created a dark glass which is stored under dog out for lunch.

00:05:55.240 --> 00:05:59.410
You can go to out under that you'll see production directly,

00:05:59.410 --> 00:06:03.500
then a project directory and dot, dot, dot plus P.

00:06:09.630 --> 00:06:10.810
Two.

00:06:10.810 --> 00:06:13.720
This is the class file that gets executed.

00:06:13.720 --> 00:06:17.455
When we run it generates the class and grants it.

00:06:17.455 --> 00:06:20.380
Internally. It's a two-step process.

00:06:20.380 --> 00:06:23.440
It fast compiles the dark JAR file to create

00:06:23.440 --> 00:06:27.920
a dark class file and then run start dot class file.

00:06:29.560 --> 00:06:32.195
And for any Java program,

00:06:32.195 --> 00:06:36.560
public static void main method is the starting 0.1.

00:06:36.560 --> 00:06:40.715
Thing to note here is the class name matches with the filename.

00:06:40.715 --> 00:06:44.270
This main method is where the axon begins.

00:06:44.270 --> 00:06:47.555
Void means it doesn't return anything.

00:06:47.555 --> 00:06:51.770
And public means it's accessible to the outside.

00:06:51.770 --> 00:06:55.220
We'll learn more about access modifiers later.

00:06:55.220 --> 00:06:58.685
Static means it's a member of the class.

00:06:58.685 --> 00:07:02.510
In Java, you can create multiple objects from a class.

00:07:02.510 --> 00:07:06.005
Methods and variables that object level,

00:07:06.005 --> 00:07:10.650
particularly to keep some variables are metadata class level.

00:07:10.650 --> 00:07:13.105
You can use the static keyword,

00:07:13.105 --> 00:07:17.170
will learn more about starting later in the course.

00:07:17.170 --> 00:07:21.414
The main method can also read command-line arguments.

00:07:21.414 --> 00:07:24.070
And Java has many liabilities.

00:07:24.070 --> 00:07:29.959
We use the system class from the code liberty to print the sentence.

00:07:30.450 --> 00:07:33.940
And in, in delegation is you type something,

00:07:33.940 --> 00:07:35.650
it will prompt you what are the methods?

00:07:35.650 --> 00:07:36.760
What are the variables available?

00:07:36.760 --> 00:07:41.060
You can see there are so many methods available under the system liability.

00:07:41.820 --> 00:07:47.030
In Java, urate comment using two farads classes.

00:07:47.640 --> 00:07:50.845
You can see that this line has been grayed out.

00:07:50.845 --> 00:07:56.105
The compiler ruled ignored it when we learned to do Run As before.

00:07:56.105 --> 00:08:01.110
And you can also write a comment in line.

00:08:04.300 --> 00:08:07.385
And to Arctic comment block.

00:08:07.385 --> 00:08:11.105
You can have Slashdot and hit enter.

00:08:11.105 --> 00:08:13.310
And then it will create a comment block.

00:08:13.310 --> 00:08:17.370
Then you can have multiple lines, has commented here.

00:08:20.650 --> 00:08:25.080
So all these lines will get ignored by the compiler.

00:08:27.130 --> 00:08:31.955
In Java, all sentences must end with a semicolon.

00:08:31.955 --> 00:08:35.555
Andres, you'll get a lot while running the program.

00:08:35.555 --> 00:08:39.485
And also core blogs are written within curly braces.

00:08:39.485 --> 00:08:43.624
The main method starts with a curly brace and then enter the colliculus.

00:08:43.624 --> 00:08:46.130
Later on we'll see different loops and

00:08:46.130 --> 00:08:49.700
other core blocks which also start with a curly brace.

00:08:49.700 --> 00:08:51.155
And then we'd colliculus.

00:08:51.155 --> 00:08:53.540
The class alter start with equilibration,

00:08:53.540 --> 00:08:55.679
ends with the colliculus.

00:08:58.000 --> 00:09:01.595
You can also run this program from the command line.

00:09:01.595 --> 00:09:04.020
Let's open the explorer.

00:09:04.750 --> 00:09:10.740
And we can go to doubt folder.

00:09:12.310 --> 00:09:15.380
And we have the compiled class here.

00:09:15.380 --> 00:09:17.700
Let's open a command prompt.

00:09:19.390 --> 00:09:23.430
And we can run it by saying Java.

00:09:24.580 --> 00:09:28.650
And the class name without the extension.

00:09:30.820 --> 00:09:34.970
And Java should be added to the classified as shown earlier.

00:09:34.970 --> 00:09:39.540
Andres, you lard, we will take Jaccard Java from all the directories.

00:09:42.670 --> 00:09:46.850
Now to compile Java from the command line,

00:09:46.850 --> 00:09:50.270
you can go to the main source code folder and open

00:09:50.270 --> 00:09:55.220
the command prompt to

00:09:55.220 --> 00:10:01.415
compile the Java future ex HelloWorld java.

00:10:01.415 --> 00:10:05.430
And it will compile and create a class failure.

00:10:09.760 --> 00:10:16.980
And then you can run it by saying Java and className without decks tension.

00:10:17.440 --> 00:10:27.450
It got executed. So this is how you can get started with Java programming language.
