WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.350 --> 00:00:05.370
We have set up a spring cloud config server with the backend Git repository.

00:00:05.370 --> 00:00:09.340
Let's now create the order and payment services.

00:00:09.830 --> 00:00:13.170
Will go to Start dot spring dot IO.

00:00:13.170 --> 00:00:15.855
Let's call it effects artist service.

00:00:15.855 --> 00:00:20.140
And we'll select rest.

00:00:20.960 --> 00:00:24.270
And we'll add convict client,

00:00:24.270 --> 00:00:26.940
because this will be client for the config server.

00:00:26.940 --> 00:00:30.580
And we'll outside you record Discovery client.

00:00:31.310 --> 00:00:37.245
And Spring Boot actuator will come back to Spring Boot actuator later.

00:00:37.245 --> 00:00:42.295
It's a project used to monitor the health of the application.

00:00:42.295 --> 00:00:45.140
Later on, we will understand how we can use at

00:00:45.140 --> 00:00:49.430
shorter tdo refresh properties file the runtime.

00:00:49.430 --> 00:00:53.120
So let's download the project with this for dependencies without

00:00:53.120 --> 00:00:57.540
server payment service with the same for dependencies.

00:00:59.020 --> 00:01:01.894
Extract water project folders,

00:01:01.894 --> 00:01:03.815
and plot to intelligence.

00:01:03.815 --> 00:01:11.790
Let's first import the effects or the service type would be M7.

00:01:12.460 --> 00:01:16.020
This is the main application class.

00:01:16.480 --> 00:01:21.185
Let's change the order service port to a digital one.

00:01:21.185 --> 00:01:24.500
Now we'll add a controller.

00:01:24.500 --> 00:01:27.349
Create a new class.

00:01:27.349 --> 00:01:33.770
The controller. Let's start.

00:01:33.770 --> 00:01:40.250
The risk controller generation will have a method which will return

00:01:40.250 --> 00:01:43.190
a simple screen and that will be mapped to

00:01:43.190 --> 00:01:48.660
the root URL with the request to mapping annotation.

00:01:49.840 --> 00:01:52.770
Let's run. It.

00:01:58.540 --> 00:02:01.380
Looks fine.

00:02:02.260 --> 00:02:05.390
Now we'll add two properties.

00:02:05.390 --> 00:02:08.000
Organization name and service. Welcome, MRS.

00:02:08.000 --> 00:02:09.140
These are the two properties will

00:02:09.140 --> 00:02:16.610
have we had the same properties in GitHub repository files,

00:02:16.610 --> 00:02:22.830
but we'll come back to that later how we'll integrate these apps, widows config server.

00:02:23.590 --> 00:02:26.870
Now to read the values from the properties file,

00:02:26.870 --> 00:02:29.579
we can use add value annotation,

00:02:30.100 --> 00:02:33.305
specified the key name.

00:02:33.305 --> 00:02:34.910
And with advent of annotation,

00:02:34.910 --> 00:02:38.150
you can read the values from the properties file,

00:02:38.150 --> 00:02:42.300
two local variables in the controller class.

00:02:43.240 --> 00:02:47.975
So we have an organism name and service messes these two fields,

00:02:47.975 --> 00:02:50.910
which is the values from the properties,

00:02:52.330 --> 00:03:00.600
will simply concatenate and print these two strings.

00:03:00.700 --> 00:03:05.090
Before we start. Let's stop the Eureka server and

00:03:05.090 --> 00:03:09.499
configure server to be sure that we are not interacting with these two components.

00:03:09.499 --> 00:03:14.610
So stop do Eureka and let's stop conflicts server also.

00:03:18.340 --> 00:03:22.770
Now we can start the effects or the service.

00:03:26.200 --> 00:03:29.390
We can see that the values are getting faced from

00:03:29.390 --> 00:03:32.670
the properties file and getting displayed.

00:03:32.980 --> 00:03:37.730
So we are able to read the data from application properties,

00:03:37.730 --> 00:03:41.550
which is a local property file for the orders service.

00:03:42.550 --> 00:03:47.460
Similarly, let's try it out for the payment service.

00:03:50.170 --> 00:03:55.080
Load, the payment service project quintile EJ.

00:03:56.830 --> 00:04:02.790
Let's copy the controller class from the artist service to payment service.

00:04:04.900 --> 00:04:08.670
We need the exact same code.

00:04:12.940 --> 00:04:15.500
We'll change the class name to

00:04:15.500 --> 00:04:20.819
payment controller and the package name will get selected automatically.

00:04:23.410 --> 00:04:25.565
So this looks fine.

00:04:25.565 --> 00:04:32.660
We'll modify the application dot properties will copy application dot properties.

00:04:32.660 --> 00:04:36.330
Content also from the ADA service.

00:04:37.660 --> 00:04:41.285
Let's change the organism name to a fixed P.

00:04:41.285 --> 00:04:44.465
And we'll say Hello from payment.

00:04:44.465 --> 00:04:48.740
And let's also modify the poor to aids reserved to.

00:04:48.740 --> 00:04:51.180
Now let's run it.

00:04:53.260 --> 00:04:57.240
Lord localhost 802.

00:05:00.280 --> 00:05:04.580
So in this lab we've setup the order service and permit service,

00:05:04.580 --> 00:05:07.070
and we're able to read content from the

00:05:07.070 --> 00:05:11.705
application.rb file and send it to the requesting client.

00:05:11.705 --> 00:05:14.495
Next, we'll understand how to integrate

00:05:14.495 --> 00:05:18.170
order service and permanent service with the spring cloud conflict server.

00:05:18.170 --> 00:05:23.315
So that instead of reading data from application that.properties file from the local lab

00:05:23.315 --> 00:05:25.280
will read the data that is stored in

00:05:25.280 --> 00:05:29.090
the Git repository through the spring cloud config server.

00:05:29.090 --> 00:05:30.960
Thank you.
