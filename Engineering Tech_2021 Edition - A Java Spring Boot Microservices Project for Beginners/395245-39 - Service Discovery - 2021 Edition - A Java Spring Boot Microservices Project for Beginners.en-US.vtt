WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.420
Welcome back. How do we find a service other than hard-coding the URL?

00:00:06.420 --> 00:00:11.340
Also, there could be multiple services running with multiple instances.

00:00:11.340 --> 00:00:12.810
So if we do add coding,

00:00:12.810 --> 00:00:16.270
it will not be very scalable and manageable.

00:00:16.640 --> 00:00:20.145
And also how do we manage failure?

00:00:20.145 --> 00:00:21.870
A service can go down.

00:00:21.870 --> 00:00:25.215
So there should be a way of knowing whether the services is running or not.

00:00:25.215 --> 00:00:30.280
Based on that, we should be able to handle failure programatically.

00:00:31.040 --> 00:00:34.785
So this is where service discovery comes into picture.

00:00:34.785 --> 00:00:36.600
Services can preregister them,

00:00:36.600 --> 00:00:41.260
synthetase central server and the resistor when not available.

00:00:45.690 --> 00:00:50.470
With service discovery can monitor into health check also.

00:00:50.470 --> 00:00:53.200
So spring cloud Netflix is

00:00:53.200 --> 00:00:59.090
a very popular project which you can use to implement service discovery.

00:00:59.460 --> 00:01:02.035
It has two main projects.

00:01:02.035 --> 00:01:06.745
One is Netflix Eureka server and the other is Netflix Eureka client.

00:01:06.745 --> 00:01:08.320
So the concept is really simple.

00:01:08.320 --> 00:01:13.130
You build a discovery server and you register services on that server.

00:01:13.650 --> 00:01:20.120
And then discovery server acts as a registry for those services.

00:01:20.640 --> 00:01:23.170
And it will manage the services.

00:01:23.170 --> 00:01:25.110
It will know when the services are up.

00:01:25.110 --> 00:01:28.640
They're not so that anybody looking for these services can be

00:01:28.640 --> 00:01:33.300
given the right response based on the service status.

00:01:34.600 --> 00:01:38.540
And also you can never hardcoding by looking

00:01:38.540 --> 00:01:42.050
up services with a certain ID or a certain name.

00:01:42.050 --> 00:01:46.050
So we'll explore more on this in the practical session. Thank you.
