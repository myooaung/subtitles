WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.580 --> 00:00:03.375
Welcome back.

00:00:03.375 --> 00:00:05.700
In this lab we are going to understand an input and

00:00:05.700 --> 00:00:10.420
Microsoft concept called client side load balancing.

00:00:10.850 --> 00:00:13.710
So why do we need load balancing?

00:00:13.710 --> 00:00:17.040
Let's imagine we have a Microsoft is, for example,

00:00:17.040 --> 00:00:19.860
we could have a currency service which might be getting access by

00:00:19.860 --> 00:00:23.890
multiple other services are external applications.

00:00:24.280 --> 00:00:28.190
So what will happen when the load increases?

00:00:28.190 --> 00:00:32.510
It might take lot of time to solve the request or some other kids might get

00:00:32.510 --> 00:00:36.470
timed out. So how do we solve this?

00:00:36.470 --> 00:00:41.930
So we can create multiple instances of the same service.

00:00:41.930 --> 00:00:43.880
For example, we can have multiple instances of

00:00:43.880 --> 00:00:47.825
currency service running at three different ports or multiple different ports.

00:00:47.825 --> 00:00:52.070
Then we could add a load balancer which will read all the incoming request,

00:00:52.070 --> 00:00:56.240
then routed to different instances of the currency service

00:00:56.240 --> 00:01:01.830
depending on which one is available or it could just work in a round robin fashion.

00:01:03.220 --> 00:01:06.395
So this is server-side load balancing,

00:01:06.395 --> 00:01:09.095
where there is an additional hardware involved,

00:01:09.095 --> 00:01:11.165
there is an additional network hop.

00:01:11.165 --> 00:01:13.100
All the outside clients,

00:01:13.100 --> 00:01:14.795
they'll first target the load balancer.

00:01:14.795 --> 00:01:21.300
The load balancer will target the application which host multiple microservices.

00:01:22.360 --> 00:01:29.040
Another way of addressing this issue is by doing load balancing at the client side.

00:01:29.740 --> 00:01:34.655
In that model, there is no intermediate load balancer.

00:01:34.655 --> 00:01:37.790
The load balancing will be done by the client.

00:01:37.790 --> 00:01:42.395
Client to know the number of instances that are available for a particular service.

00:01:42.395 --> 00:01:46.520
And then you could choose which one to go to based on certain logic.

00:01:46.520 --> 00:01:48.960
It could be on a round robin fashion.

00:01:50.560 --> 00:01:53.495
And there is no additional hardware involved,

00:01:53.495 --> 00:01:56.610
and it is handled through programming.

00:01:57.370 --> 00:02:01.175
We can easily implement client side load balancing

00:02:01.175 --> 00:02:05.250
using spring cloud, Netflix Riemann liability.

00:02:06.250 --> 00:02:11.690
Netflix 3-1 has built-in software to do the load balancing.

00:02:11.690 --> 00:02:18.049
You have already seen Risk template in the previous labs using which we have interacted

00:02:18.049 --> 00:02:21.710
with two different microservices and springs risk template

00:02:21.710 --> 00:02:25.170
has the required integration for Netflix riba.

00:02:26.530 --> 00:02:29.720
Risk template can balance request across

00:02:29.720 --> 00:02:34.280
multiple instances of a service using rebuttal load balancer client,

00:02:34.280 --> 00:02:36.185
Netflix RE1 can work.

00:02:36.185 --> 00:02:38.705
We thought without the Rayleigh server will

00:02:38.705 --> 00:02:42.360
see the implementation of reward with you record server.

00:02:42.910 --> 00:02:47.345
By default, the algorithm works on a round robin fashion.

00:02:47.345 --> 00:02:50.105
So let's look at the practical side of it.

00:02:50.105 --> 00:02:56.340
Will implement client side load balancing using Netflix ribbon with spring cloud.

00:02:57.820 --> 00:03:00.050
Let's get started.

00:03:00.050 --> 00:03:02.405
Go to Start dot string dot IO.

00:03:02.405 --> 00:03:09.455
Let's create a Microsoft is called currency service will have the eureka client.

00:03:09.455 --> 00:03:13.050
We'll have Spring Web and reciprocity.

00:03:13.630 --> 00:03:17.030
And we are going to implement load balancing,

00:03:17.030 --> 00:03:20.105
Column Width, unicast service discovery.

00:03:20.105 --> 00:03:23.795
Go to intelligent and import the project.

00:03:23.795 --> 00:03:27.545
Find the currency service folder and load it.

00:03:27.545 --> 00:03:32.960
Select membrane. Now go to the main class.

00:03:32.960 --> 00:03:37.140
Let's add a nebula Eureka client annotation.

00:03:39.220 --> 00:03:41.855
We now are at a controller.

00:03:41.855 --> 00:03:45.540
Let's limit as exchange controller.

00:03:47.290 --> 00:03:50.225
Let's add the required annotation.

00:03:50.225 --> 00:03:52.785
It will be raised controller.

00:03:52.785 --> 00:03:59.169
And we've written a simple string because we're going to try load balancing.

00:03:59.169 --> 00:04:03.250
So we need to let the client know which instance it is accessing.

00:04:03.250 --> 00:04:06.325
So the best way to do that is by sending the port back.

00:04:06.325 --> 00:04:08.530
This is just for the demonstration purpose,

00:04:08.530 --> 00:04:12.250
so that you'll be sure which in stance is returning

00:04:12.250 --> 00:04:17.660
the string will return the port of this application.

00:04:19.140 --> 00:04:23.695
We can get the port from the application dot.properties file.

00:04:23.695 --> 00:04:26.155
There is an adaptation available for that.

00:04:26.155 --> 00:04:29.110
You are the hat value orientation and you

00:04:29.110 --> 00:04:33.310
specify the application dot properties for variable,

00:04:33.310 --> 00:04:35.900
which is somewhat dot port.

00:04:36.190 --> 00:04:40.650
So let's add that also to the application layer properties.

00:04:41.170 --> 00:04:46.950
This way you can read any application dot properties configuration parameter.

00:04:48.370 --> 00:04:51.110
So port stored in port,

00:04:51.110 --> 00:04:54.530
and then we just simply returning that port when we have multiple instances,

00:04:54.530 --> 00:04:55.700
which we'll see shortly,

00:04:55.700 --> 00:04:59.020
we'll know which instances returning the pleasure.

00:04:59.020 --> 00:05:02.690
It gave a compilation error or it has to be within the class.

00:05:02.690 --> 00:05:07.444
Let's fix it. Also. We forgot to add the reckless mapping annotation.

00:05:07.444 --> 00:05:09.420
Let's do that.

00:05:11.320 --> 00:05:19.280
Again. It gives some metadata because Eureka server is not running.

00:05:19.280 --> 00:05:24.020
That's okay. So we can see that

00:05:24.020 --> 00:05:26.300
it is fitting that port number so we know that we're

00:05:26.300 --> 00:05:29.600
hitting the currencies are reset for digital one.

00:05:29.600 --> 00:05:32.870
Now let's start the Eureka server.

00:05:32.870 --> 00:05:39.570
This is the same product that we built earlier. And you just run it.

00:05:40.130 --> 00:05:44.880
It started running a date 761.

00:05:45.220 --> 00:05:50.840
All looks good. The app guard

00:05:50.840 --> 00:05:53.570
registered as an unknown now because we did not give it a name.

00:05:53.570 --> 00:05:56.975
So let's modify the application dot properties to give y.

00:05:56.975 --> 00:06:01.680
Since servicer name, we'll call it currency service.

00:06:01.810 --> 00:06:06.050
With the spring dot application dot name configuration parameter.

00:06:06.050 --> 00:06:09.719
Let's restart the currency service.

00:06:11.830 --> 00:06:15.950
You can see the currency service now the unknown is still there.

00:06:15.950 --> 00:06:19.650
We'll restart the Eureka server than that will go.

00:06:24.820 --> 00:06:28.740
So let's get started now.

00:06:30.850 --> 00:06:37.265
Once we started, give it some time for the currency service to get registered.

00:06:37.265 --> 00:06:42.690
Yeah, now we can see that currency services running at port one.

00:06:43.000 --> 00:06:45.620
And it is registered on the Eureka sorrow.

00:06:45.620 --> 00:06:46.745
But also.

00:06:46.745 --> 00:06:52.700
Now how do we launch another instance of the same service on the same machine?

00:06:52.700 --> 00:06:55.070
So for that you have to go to edit configuration,

00:06:55.070 --> 00:06:58.430
run configuration in IntelliJ J.

00:06:58.430 --> 00:07:04.230
And then there is an option to allow parallel R1 at the top to select that.

00:07:04.930 --> 00:07:09.960
Then you can run multiple instances of the same AP.

00:07:10.570 --> 00:07:13.520
Now you change the port.

00:07:13.520 --> 00:07:16.490
You can change any parameter and run it again.

00:07:16.490 --> 00:07:18.605
The old one will still cardinal to run,

00:07:18.605 --> 00:07:22.350
but a new output get lunch at a different port.

00:07:22.870 --> 00:07:27.320
So now currently services also running at port 80 through you

00:07:27.320 --> 00:07:32.975
can go to run and stop and stop.

00:07:32.975 --> 00:07:36.600
Any of these instances are both instances.

00:07:37.540 --> 00:07:41.090
Now we can see that age is row one is also returning

00:07:41.090 --> 00:07:43.310
the message and the nature reserve two

00:07:43.310 --> 00:07:46.250
is also returning the message from a different port.

00:07:46.250 --> 00:07:49.820
Two instances of the same currency up running.

00:07:49.820 --> 00:07:52.745
And then both are also registered on now Eureka.

00:07:52.745 --> 00:07:59.450
But as you can see here, now

00:07:59.450 --> 00:08:02.465
let's create a currency up which should

00:08:02.465 --> 00:08:06.680
invoke these instances and which will do the load balancing.

00:08:06.680 --> 00:08:09.530
We need to add the Netflix F31 project.

00:08:09.530 --> 00:08:12.770
Apart from that, we need the risk and the record is coded Klein.

00:08:12.770 --> 00:08:15.290
And what is the most important dependency here,

00:08:15.290 --> 00:08:20.190
which is required to add all the liabilities in classes required for load balancing.

00:08:20.770 --> 00:08:28.010
Let's download it and read Lord it to IntelliJ,

00:08:28.010 --> 00:08:32.100
select currency up, select M7.

00:08:32.140 --> 00:08:35.315
Let's open it in a new window.

00:08:35.315 --> 00:08:37.550
So now the app is loaded.

00:08:37.550 --> 00:08:40.920
Let's add a new controller class.

00:08:41.890 --> 00:08:46.080
We'll call it currency controller.

00:08:48.850 --> 00:08:52.505
Let's add the annotation risks controller.

00:08:52.505 --> 00:08:57.080
Let's have a method map to the root directory and the b lambda

00:08:57.080 --> 00:09:02.280
rich template declared as a class variable and will auto wear that.

00:09:03.100 --> 00:09:08.010
And let's add a method to get the rest template.

00:09:09.160 --> 00:09:12.380
Now let's make the rest template work with

00:09:12.380 --> 00:09:20.940
the Eureka client by number Discovery client annotation,

00:09:21.550 --> 00:09:24.680
and will declare guy client variable.

00:09:24.680 --> 00:09:26.840
The way we have done earlier to connect

00:09:26.840 --> 00:09:31.415
course catalog with the course and do that up service is the same code.

00:09:31.415 --> 00:09:36.300
Will declare a client variable at the top or towards it.

00:09:36.490 --> 00:09:39.410
So with this eureka client handle,

00:09:39.410 --> 00:09:45.630
we can get an instance of the currency service using the rest template.

00:09:47.380 --> 00:09:53.870
Same quarter Israel credibly give the currency extends service name,

00:09:53.870 --> 00:09:58.380
which is currency service, falses word, non-singular.

00:09:59.440 --> 00:10:04.110
Store the currency exchange URL in a variable.

00:10:04.360 --> 00:10:08.880
And use that to get the instancing bearish template.

00:10:11.470 --> 00:10:19.110
We'll say since value is whatever message we are receiving from the currency, sadness.

00:10:20.230 --> 00:10:22.715
Now this is the most important step,

00:10:22.715 --> 00:10:28.970
will have been annotation and load balancing annotation.

00:10:28.970 --> 00:10:31.800
So this will connect with R31 client.

00:10:34.180 --> 00:10:41.910
This is the only change that is required in the rich template to connect to the client.

00:10:42.640 --> 00:10:45.420
Let's run it.

00:10:46.330 --> 00:10:48.950
Let's load a door.

00:10:48.950 --> 00:10:51.860
And then we can see it is fetching

00:10:51.860 --> 00:10:55.160
data from two different time instances of the currency service,

00:10:55.160 --> 00:10:56.510
eight thousand, one hundred and eight thousand,

00:10:56.510 --> 00:10:58.830
two hundred round-robin fashion.

00:10:59.170 --> 00:11:02.750
So this is how you use risk template and

00:11:02.750 --> 00:11:06.815
B31 load balancer plant to implement client side load balancing.

00:11:06.815 --> 00:11:10.670
So you can have two instances are a hundreds of instances.

00:11:10.670 --> 00:11:12.020
This will still work.

00:11:12.020 --> 00:11:15.710
Hollywood producers make the changes shown in the lab,

00:11:15.710 --> 00:11:17.030
then you are all set.

00:11:17.030 --> 00:11:20.735
So this is client side load balancing for microservices.

00:11:20.735 --> 00:11:22.560
Thank you.
