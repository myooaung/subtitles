WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.215
Welcome back. Let's understand some of the other concepts of microservices.

00:00:04.215 --> 00:00:09.210
Let's see matching with two microservices running at port 80018 thousand

00:00:09.210 --> 00:00:15.180
to now anybody wants to access this microservices neutrino,

00:00:15.180 --> 00:00:17.235
the Executive Order it exact port.

00:00:17.235 --> 00:00:18.660
And in the production setup,

00:00:18.660 --> 00:00:20.700
there could be hundreds or thousands of microservices

00:00:20.700 --> 00:00:24.205
running on different machines and running at different ports.

00:00:24.205 --> 00:00:28.505
Now, do we need to tell the client the exact URL non-exempt port,

00:00:28.505 --> 00:00:30.440
or is there a better way of discovering

00:00:30.440 --> 00:00:34.910
the microservices so that the plants did not know the port and URL.

00:00:34.910 --> 00:00:39.120
And we can easily manage all the access request.

00:00:40.240 --> 00:00:45.450
The solution to this problem is APA gateway or gateway service.

00:00:45.940 --> 00:00:50.255
It can act as the single point of entry for all clients.

00:00:50.255 --> 00:00:54.710
And the gateway service can go and get the exact URL and put up

00:00:54.710 --> 00:00:59.165
the micro service from the discovery server and server to the end-user.

00:00:59.165 --> 00:01:02.990
So the end user or the client need not know the individual URL in ports.

00:01:02.990 --> 00:01:06.720
Gateway service can manage all the requests routing.

00:01:07.780 --> 00:01:10.430
Apart from doing dynamic Writing,

00:01:10.430 --> 00:01:14.360
the gateway service takes care of a lot of other functionality like authentication.

00:01:14.360 --> 00:01:19.740
It can ensure only the legitimate requests per reaching the micro service.

00:01:19.990 --> 00:01:24.410
It can log though incoming requests for auditing buffers.

00:01:24.410 --> 00:01:26.570
It can also announce the request and add

00:01:26.570 --> 00:01:30.020
additional information which can be consumed by the microservices.

00:01:30.020 --> 00:01:32.550
It can act as a load balancer.

00:01:32.950 --> 00:01:37.250
It can also invoke different APIs for different clients.

00:01:37.250 --> 00:01:39.800
For example, if the request is coming from a desktop,

00:01:39.800 --> 00:01:43.235
then we'll solve one microservices is coming to a mobile device,

00:01:43.235 --> 00:01:44.660
will serve another, Microsoft,

00:01:44.660 --> 00:01:47.880
which will return some lightweight data.

00:01:48.820 --> 00:01:50.960
Let's see an example of

00:01:50.960 --> 00:01:58.745
Gateway Service will implement getWidth service using something called Netflix June.

00:01:58.745 --> 00:02:01.205
So let's see that in action,

00:02:01.205 --> 00:02:03.440
we'll first start the Eureka server.

00:02:03.440 --> 00:02:07.410
It is already running at port 8761.

00:02:07.840 --> 00:02:13.835
Now let's go to spring website and we'll create one service,

00:02:13.835 --> 00:02:16.770
will have just restaurant Eureka client.

00:02:18.340 --> 00:02:22.010
Download it and we'll add another service.

00:02:22.010 --> 00:02:28.229
Service two will also rest and yuriga client dependencies for this service.

00:02:28.690 --> 00:02:37.225
Downloaded. I'm the both the zip files

00:02:37.225 --> 00:02:40.180
go to IntelliJ and import the project.

00:02:40.180 --> 00:02:43.069
Let's import service confessed

00:02:49.830 --> 00:02:54.049
will enable Eureka client annotation.

00:02:58.140 --> 00:03:01.030
Let's add a controller class will

00:03:01.030 --> 00:03:09.320
limited service controller will have a simple URL mapping to the homepage.

00:03:15.910 --> 00:03:18.200
Let's give it a name, a fixed order,

00:03:18.200 --> 00:03:21.840
and we'll run it at port one.

00:03:22.360 --> 00:03:25.280
That's where service one would be running.

00:03:25.280 --> 00:03:28.055
Let's add the controller method will

00:03:28.055 --> 00:03:31.980
service to another service returned from the homepage.

00:03:34.540 --> 00:03:43.115
Now let's run it. You can see that it's fetching service one order service.

00:03:43.115 --> 00:03:45.290
So microservices one is running at port 80,

00:03:45.290 --> 00:03:50.610
original one and can be accessed at local or state one.

00:03:50.860 --> 00:03:53.525
Let's import the other service,

00:03:53.525 --> 00:03:57.660
service to similar steps.

00:04:03.190 --> 00:04:06.540
We'll enable Eureka client.

00:04:08.650 --> 00:04:14.820
Let's copy the service controller from service one and we'll make changes in that.

00:04:16.210 --> 00:04:22.950
Simply copy and paste your pride all these steps earlier in our other modules.

00:04:24.280 --> 00:04:28.010
Paste it and change the text.

00:04:28.010 --> 00:04:30.095
Look, let's call it payment service.

00:04:30.095 --> 00:04:38.030
Service to payment service will run it at a different port.

00:04:38.030 --> 00:04:47.130
And qualitative experiment, H two is the port for the service. Let's run it.

00:04:48.160 --> 00:04:51.749
It's running now let's verify.

00:04:55.810 --> 00:04:59.850
You can see that it's turning at age two.

00:05:00.190 --> 00:05:04.410
Now let's see how to implement gateway service.

00:05:07.240 --> 00:05:11.720
Let's add a new project and we'll have only record Discovery client and

00:05:11.720 --> 00:05:17.280
should cuts the Netflix project that we'll be using for dynamic routing.

00:05:23.860 --> 00:05:27.060
Simply out of the project.

00:05:29.860 --> 00:05:33.620
It is like any other springboard project.

00:05:33.620 --> 00:05:37.970
Will have enabled Jude proxy and will also enable

00:05:37.970 --> 00:05:42.980
discovery claimed, destroy dependencies.

00:05:42.980 --> 00:05:46.860
And in the application that properties we can give it a name.

00:05:47.320 --> 00:05:52.170
So this will also get registered on unica server,

00:05:53.530 --> 00:05:57.320
will have a fixed gateway service name.

00:05:57.320 --> 00:06:00.540
And let's run it.

00:06:03.370 --> 00:06:07.835
Eureka, several good to service order payment history, upset resistor.

00:06:07.835 --> 00:06:11.610
There is an old apple statistically district. That's fine.

00:06:12.010 --> 00:06:14.180
Now we can go to each row,

00:06:14.180 --> 00:06:15.680
you destroy a fixed order,

00:06:15.680 --> 00:06:20.160
and we can get the output from the order of micro service.

00:06:22.420 --> 00:06:25.220
Similarly with a fixed desk permit,

00:06:25.220 --> 00:06:28.080
we can get output from the payment service,

00:06:32.470 --> 00:06:37.620
gateway service URL available to access both the microservices.

00:06:37.990 --> 00:06:44.030
This is dynamic routing which will be implemented eating Netflix June project.

00:06:44.030 --> 00:06:45.810
Thank you.
