WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.130
The lawyer created a discovery server and registered the coarser.

00:00:05.130 --> 00:00:11.550
Let us now understand how to invoke that course up from the course catalog app.

00:00:11.550 --> 00:00:18.130
Let's go to start spring dot IO and we'll create a new course catalogue up.

00:00:20.810 --> 00:00:24.640
And we don't need GPA.

00:00:25.400 --> 00:00:28.860
We need to keep data card Discovery client.

00:00:28.860 --> 00:00:32.230
So we raise ten director discovery claim.

00:00:32.230 --> 00:00:35.580
Let's generate the new app.

00:00:37.180 --> 00:00:45.060
Now will load this up using intelligent New Project from existing source.

00:00:47.590 --> 00:00:51.140
And let's find a new course catalog,

00:00:51.140 --> 00:00:52.835
future ex Course Catalog app.

00:00:52.835 --> 00:00:55.770
Select their directory and load it.

00:01:02.680 --> 00:01:06.390
Will select Open JDK 15,

00:01:11.230 --> 00:01:14.670
will open it in a new window.

00:01:15.250 --> 00:01:18.930
Let's add this as a Maven project.

00:01:21.610 --> 00:01:25.230
Let's expand the project.

00:01:27.010 --> 00:01:30.620
Now we'll copy the course class and

00:01:30.620 --> 00:01:34.640
catalog controller class from the older Course Catalog app.

00:01:34.640 --> 00:01:37.580
So this is the old course catalog.

00:01:37.580 --> 00:01:41.030
Let's copy catalog controller and course dish to

00:01:41.030 --> 00:01:48.630
classes and pasted into new feature x Course Catalog app project.

00:01:56.170 --> 00:02:00.180
Let's delete main.xml file

00:02:05.320 --> 00:02:09.420
and we'll reload my one projects.

00:02:12.280 --> 00:02:16.320
Now everything appears correctly.

00:02:17.110 --> 00:02:21.140
Let's hit to catalog controller.

00:02:21.140 --> 00:02:24.305
Earlier we hardcoded the core SAP URL.

00:02:24.305 --> 00:02:26.990
So this time we'll use service discovery to find

00:02:26.990 --> 00:02:29.930
the course up from the course catalog app.

00:02:29.930 --> 00:02:32.060
But let's make a few changes to

00:02:32.060 --> 00:02:39.210
the application layer properties will give this up in name spring dot application.rb.

00:02:42.570 --> 00:02:47.150
And let's call it the fixed catalog service.

00:02:49.680 --> 00:02:54.740
And we'll make it run at port 80 geologic CO2.

00:02:55.950 --> 00:03:00.760
And finally we'll say eureka client registered with the lowercase false.

00:03:00.760 --> 00:03:04.525
We do not need to register the Course Catalog app.

00:03:04.525 --> 00:03:08.380
We have registered the course app and we'll be discovering that from the catalog,

00:03:08.380 --> 00:03:11.690
but the Catalog app need not be registered down.

00:03:11.760 --> 00:03:15.355
Now let's go to catalog controller.

00:03:15.355 --> 00:03:20.180
So let's comment out the hard coating of the URL.

00:03:21.490 --> 00:03:25.290
And we learned a eureka client,

00:03:26.830 --> 00:03:34.790
client, heart enter and you'll get the package name.

00:03:34.790 --> 00:03:38.720
So Netflix discovery will make a claim that is the client we're going

00:03:38.720 --> 00:03:42.470
to use to interact with the discovery set well.

00:03:42.470 --> 00:03:45.605
And we'll make this variable private.

00:03:45.605 --> 00:03:50.254
We need to create an instance of class instance info.

00:03:50.254 --> 00:03:52.430
Let's include that.

00:03:52.430 --> 00:03:56.075
And by saying Eureka, claim,

00:03:56.075 --> 00:04:04.020
dark get next server from Eureka and specifying the app which you want to discover.

00:04:04.020 --> 00:04:07.030
And an instance of that particular tab.

00:04:07.030 --> 00:04:09.820
So this instance info is

00:04:09.820 --> 00:04:14.330
an instance of a fixed core service which is registered on Eureka.

00:04:14.580 --> 00:04:21.710
So this is how you can get an instance of one up in another app.

00:04:25.170 --> 00:04:27.205
Once that is done,

00:04:27.205 --> 00:04:33.580
you can get the URL up DAP by saying instancing for gate homepage URL.

00:04:33.580 --> 00:04:36.980
So that would be the Court's up URL.

00:04:40.830 --> 00:04:43.690
Should these are the changes required.

00:04:43.690 --> 00:04:47.990
Create an instance info object and then get the URL.

00:04:48.480 --> 00:04:52.850
So that way you can avoid hardcoding the URL.

00:04:53.310 --> 00:04:56.500
Course catalog will look for effects core service

00:04:56.500 --> 00:05:00.250
in Eureka server and find that you are in.

00:05:00.250 --> 00:05:04.640
Let's make that change in all the methods.

00:05:07.680 --> 00:05:10.810
Now for this particular method,

00:05:10.810 --> 00:05:15.080
we need to also append to the URL.

00:05:19.230 --> 00:05:24.745
And let's add Enable Eureka clan annotation.

00:05:24.745 --> 00:05:28.630
So this is required to interact with the records that work.

00:05:28.630 --> 00:05:33.440
Though we are not registering the course catalogue up an app on the eudicots that were.

00:05:33.440 --> 00:05:36.300
Lets now run it.

00:05:40.000 --> 00:05:45.800
We've gotten Nadar that URL might not have been initialized.

00:05:45.800 --> 00:05:47.900
Let's fix this.

00:05:47.900 --> 00:05:54.530
We need to first get the URL.

00:05:54.530 --> 00:05:59.220
And then we did we append courses.

00:06:01.390 --> 00:06:09.180
So now the Course Catalog app is started and it's running at port two.

00:06:09.550 --> 00:06:13.410
Let's refresh the Utica dashboard.

00:06:13.410 --> 00:06:15.580
Corn syrup is registered,

00:06:15.580 --> 00:06:18.099
but course catalog is not registered.

00:06:18.099 --> 00:06:21.925
But Course Catalog app can discover this future IQ scores up.

00:06:21.925 --> 00:06:26.750
Let's load the Course Catalog app 88 jealous 0-2.

00:06:29.790 --> 00:06:33.680
Regarding data, let's check it out.

00:06:41.490 --> 00:06:45.370
Regarding error that the client is null.

00:06:45.370 --> 00:06:50.360
We also need to add the auto where'd annotation for the Eureka client.

00:06:50.760 --> 00:06:54.620
And let's read on it.

00:06:55.630 --> 00:06:59.600
Now it started again a digital tool.

00:06:59.600 --> 00:07:02.270
Let's refresh the page.

00:07:02.270 --> 00:07:06.450
And we again coordinator, let's check it out.

00:07:11.380 --> 00:07:16.775
It says no matches for the virtual lost FX core service.

00:07:16.775 --> 00:07:20.255
So we need to ensure this app name is correct.

00:07:20.255 --> 00:07:23.510
Let's go to future IQ scores up and we can

00:07:23.510 --> 00:07:26.570
see that it is registered with future ex course up,

00:07:26.570 --> 00:07:27.770
not FX course up.

00:07:27.770 --> 00:07:31.940
So let's cut it, this, copy this,

00:07:31.940 --> 00:07:39.000
and go to a fixed Catalog app and put the right tab name.

00:07:50.080 --> 00:07:53.880
Now let's restart this.

00:07:54.550 --> 00:07:58.560
You'd started again a day digitally literate to.

00:07:59.560 --> 00:08:02.465
So this time it worked fine.

00:08:02.465 --> 00:08:06.270
We can see the messages coming from the course up.

00:08:07.360 --> 00:08:11.490
Now let's try to get the first course.

00:08:13.930 --> 00:08:20.580
And we can see that our first courses Hadoop that is coming from Coursera.

00:08:21.430 --> 00:08:25.380
Let's shake that catalog URL.

00:08:27.820 --> 00:08:35.495
And courses are getting fades from the Coursera course app log.

00:08:35.495 --> 00:08:41.600
You can see that guard invoke Dan messages getting printed to the log.

00:08:41.600 --> 00:08:43.760
So this is how we can create

00:08:43.760 --> 00:08:49.805
a eureka discovery server resistor and nap and discovered that app from an adder up.

00:08:49.805 --> 00:08:54.420
So this is our service discovery works in the Microsoft Word.
