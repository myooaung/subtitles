WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.950
In the previous lab,

00:00:01.950 --> 00:00:04.785
we have seen how to pull data from a Java object,

00:00:04.785 --> 00:00:11.280
convert that to JSON format and displayed on the webpage using a risk to a service.

00:00:11.280 --> 00:00:15.120
In this lab, our goal is to pull the data from

00:00:15.120 --> 00:00:18.120
the course table in the sequelae database that you've just

00:00:18.120 --> 00:00:25.815
installed and display it on the web page will be using the same spring application.

00:00:25.815 --> 00:00:29.160
Let's understand what are the changes that are required to connect to

00:00:29.160 --> 00:00:33.790
the database and display the content in the website.

00:00:35.030 --> 00:00:40.970
We need to ensure the SQLite database project folder where our Java code is,

00:00:40.970 --> 00:00:45.930
so that the spring application can easily find that database.

00:00:46.900 --> 00:00:50.555
Go to that folder type CMD,

00:00:50.555 --> 00:00:54.420
and you'll be taken to the command prompt with that directory.

00:00:54.700 --> 00:00:57.740
Here, let's create the database again.

00:00:57.740 --> 00:01:00.470
Tapes cingulate three, which are X dB,

00:01:00.470 --> 00:01:03.330
and the database will be created.

00:01:04.690 --> 00:01:10.160
Let's take the database name and Civil List of table's.

00:01:10.160 --> 00:01:14.010
Currently nothing is there. We'll create the course table again.

00:01:14.530 --> 00:01:18.690
And we'll insert a few records.

00:01:20.730 --> 00:01:26.240
And then we can verify if reconcile inserted or not using the silicone.

00:01:29.160 --> 00:01:33.410
Gather to records which are already inserted.

00:01:34.140 --> 00:01:39.649
Let's fit these two record send displayed on the webpage.

00:01:40.830 --> 00:01:44.605
Let's go back to intelligence AID and understand the changes

00:01:44.605 --> 00:01:49.129
required to integrate this application with the new database.

00:01:50.190 --> 00:01:52.375
In the previous lab,

00:01:52.375 --> 00:01:58.090
we created di instances of course object and return that to the rest API.

00:01:58.090 --> 00:02:04.280
And the contained got converted to JSON objects and God displayed on the webpage.

00:02:05.520 --> 00:02:08.560
Now we'll try to map course to

00:02:08.560 --> 00:02:11.800
the database table so that instead of creating the objects manually,

00:02:11.800 --> 00:02:14.150
we'd be able to return the data.

00:02:14.970 --> 00:02:18.380
Go to the palm print XML.

00:02:18.840 --> 00:02:24.070
And we need to add the dependencies for spring get at JPL,

00:02:24.070 --> 00:02:25.735
which we had removed earlier.

00:02:25.735 --> 00:02:27.920
Let's add that back.

00:02:29.820 --> 00:02:34.060
And we also need to add dependencies for cingulate.

00:02:34.060 --> 00:02:38.210
Go to Melbourne repository, search for Simulate.

00:02:41.430 --> 00:02:43.810
Click on that link,

00:02:43.810 --> 00:02:48.050
pick the latest versus 3.30.1.

00:02:54.900 --> 00:02:58.780
So this will add the required jar files for

00:02:58.780 --> 00:03:02.930
SQL database interaction from the spring application.

00:03:05.610 --> 00:03:10.150
We also need the another dependency or to write all the queries,

00:03:10.150 --> 00:03:13.460
select, update, delete, insert queries.

00:03:13.980 --> 00:03:18.280
There is a SQL dialect package that is available

00:03:18.280 --> 00:03:24.710
that you need to use search for that circulate dialect Maven dependency.

00:03:26.460 --> 00:03:29.980
Let's use this particular dependency.

00:03:29.980 --> 00:03:33.020
We can take the licensing terms.

00:03:42.310 --> 00:03:47.945
It's perfectly okay to use this open-source library,

00:03:47.945 --> 00:03:51.360
manage your database interaction,

00:03:53.350 --> 00:03:56.480
will take this dependency and dyadic.

00:03:56.480 --> 00:04:03.660
So now we have one for one for managing SQL queries.

00:04:10.810 --> 00:04:16.350
Now let's understand how to convert this course Class Database entity.

00:04:16.350 --> 00:04:20.510
We can do that by simply adding an entity annotation.

00:04:20.910 --> 00:04:25.850
Make sure it's of type Java X persistence.

00:04:26.670 --> 00:04:33.790
Now we need to ensure the column names and the class variables match.

00:04:33.790 --> 00:04:35.350
So we have cos ID,

00:04:35.350 --> 00:04:37.855
make sure it is course id all small.

00:04:37.855 --> 00:04:45.560
Otherwise, GPA would look for a course underscore ID column name,

00:04:47.370 --> 00:04:50.690
course name all small,

00:04:52.320 --> 00:04:55.910
and make it author all small.

00:04:58.110 --> 00:05:02.665
Now we need to make sure core site is the primary key circular arc.

00:05:02.665 --> 00:05:05.300
Idea rotation.

00:05:05.760 --> 00:05:10.460
And make sure the required classes are inputted.

00:05:11.070 --> 00:05:13.870
Let's now delete all the old methods.

00:05:13.870 --> 00:05:17.690
Sender will generate getters and setters again,

00:05:18.030 --> 00:05:21.590
and will also generate a constructor.

00:05:24.180 --> 00:05:27.920
We do not need to select any field.

00:05:27.930 --> 00:05:31.610
Will create a default constructor.

00:05:32.400 --> 00:05:36.770
And then we'll create the getter and setter methods.

00:05:44.350 --> 00:05:48.930
Select all three fields and generate getter and setter methods.

00:05:50.470 --> 00:05:54.710
Now we have an object created which is going to map to the database.

00:05:54.710 --> 00:06:00.045
Course table. Will just rearrange it a little bit,

00:06:00.045 --> 00:06:05.160
all the variables at the top and then constructor and all the methods.

00:06:06.790 --> 00:06:11.600
Let's create a new interface called core repository,

00:06:11.600 --> 00:06:15.539
using which we will manage all database interaction.

00:06:19.210 --> 00:06:22.740
Select the type is interface.

00:06:23.110 --> 00:06:28.370
And this interface would extend the GPA repository,

00:06:28.370 --> 00:06:31.470
which is a data access object or Tao.

00:06:32.770 --> 00:06:40.350
Tao has built-in methods for database interaction like select, insert and delete.

00:06:41.170 --> 00:06:44.300
We need to pass the payable limb that is course,

00:06:44.300 --> 00:06:49.320
and select a big integer which is started or type of the primary key ID.

00:06:51.340 --> 00:06:56.790
And makes sure the GPA repository packages included.

00:06:57.880 --> 00:07:04.020
So this interface will now help us in interacting with the database table.

00:07:05.380 --> 00:07:13.350
Now back in the controller will inject the new interface using Auto where denotation,

00:07:14.290 --> 00:07:16.460
create a new variable,

00:07:16.460 --> 00:07:18.440
of course repository type,

00:07:18.440 --> 00:07:21.299
and add Auto where denotation.

00:07:27.910 --> 00:07:31.980
And let's delete this hard-coded values.

00:07:32.830 --> 00:07:36.830
And we'll simply call the findall method of the course

00:07:36.830 --> 00:07:40.745
Repository class to get all the values from the table.

00:07:40.745 --> 00:07:42.845
So this will be mapped to the course class,

00:07:42.845 --> 00:07:48.930
which in turn is mapped to the database table so that CP repository tau object.

00:07:52.690 --> 00:07:58.640
This should now give us the two records that we have in the course table.

00:07:58.640 --> 00:08:02.690
We have kept the request mapping adaptation intact,

00:08:02.690 --> 00:08:08.880
ingress controller annotation intact so that this will map to the corresponding rest API.

00:08:08.920 --> 00:08:18.080
Lets run it. Okay, let's correct

00:08:18.080 --> 00:08:22.160
this terror slippery term course repository find

00:08:22.160 --> 00:08:29.280
on it will return the list of core subjects.

00:08:29.440 --> 00:08:31.985
Let's now run it again.

00:08:31.985 --> 00:08:35.545
This will fail again because though we have created

00:08:35.545 --> 00:08:39.080
a database and modified code to interact with the database,

00:08:39.080 --> 00:08:43.650
you've not really told spring how to find find the database.

00:08:54.760 --> 00:08:59.690
How database future ex course DB is presented the project folder.

00:08:59.690 --> 00:09:04.325
But spring should be aware that this is the database that we are going to interact with.

00:09:04.325 --> 00:09:06.560
And for that, we need to go to

00:09:06.560 --> 00:09:10.250
the Resources folder and find the application dot properties.

00:09:10.250 --> 00:09:12.635
Within that, we'll specify the database,

00:09:12.635 --> 00:09:16.289
a connection parameter or details.

00:09:18.550 --> 00:09:21.620
So to understand what are the properties that we interest

00:09:21.620 --> 00:09:25.409
specifies search for Spring Boot application properties.

00:09:26.560 --> 00:09:31.319
Go to their officer page for Sprint good application properties.

00:09:33.160 --> 00:09:36.439
And here you can find all the common properties.

00:09:36.439 --> 00:09:39.380
The first property here is database type,

00:09:39.380 --> 00:09:41.405
which is in our case.

00:09:41.405 --> 00:09:44.180
Next, we need to set the hybrid net DDL auto property.

00:09:44.180 --> 00:09:49.850
None otherwise, hibernate will recreate all the tables which we do not want.

00:09:49.850 --> 00:09:52.920
You already have database and tables created.

00:10:00.640 --> 00:10:05.370
Pro means all the SQL queries will get printed in the log.

00:10:07.240 --> 00:10:10.680
This will help us in debugging.

00:10:11.410 --> 00:10:15.500
Data source URL is dot database name,

00:10:15.500 --> 00:10:19.140
which is feature, feature X course DB. In our case.

00:10:27.370 --> 00:10:31.860
It is in the same folder as the project folder.

00:10:42.360 --> 00:10:46.280
Username and password. We can leave it as blank.

00:10:46.590 --> 00:10:53.240
We have not really specified username password while creating the accumulated at this.

00:11:00.300 --> 00:11:03.549
And finally, we need to keep their driver className,

00:11:03.549 --> 00:11:07.010
which is JDBC in this case.

00:11:08.910 --> 00:11:12.500
Let's run the app now.

00:11:14.850 --> 00:11:17.665
And this time it ran successfully.

00:11:17.665 --> 00:11:20.960
We can see that the app is running it.

00:11:21.130 --> 00:11:27.635
Port 8080. Refresh the page.

00:11:27.635 --> 00:11:32.540
You'll see the records getting pulled from the course table in the sequelae database.

00:11:32.540 --> 00:11:37.590
Let's insert another record to the same table.

00:11:39.910 --> 00:11:42.395
We created a third record.

00:11:42.395 --> 00:11:44.910
So there are three costs now.

00:11:46.810 --> 00:11:49.640
And when we replace the webpage,

00:11:49.640 --> 00:11:52.470
who should see three records?

00:11:55.660 --> 00:11:59.855
So this is how we can pull data from a database table,

00:11:59.855 --> 00:12:04.410
can displayed on the webpage using a spring list TPA. Thank you.
