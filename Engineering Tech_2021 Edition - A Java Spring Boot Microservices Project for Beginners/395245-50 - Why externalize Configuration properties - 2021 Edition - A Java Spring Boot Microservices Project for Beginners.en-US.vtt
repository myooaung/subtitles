WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.270
welcome back in this six and will understand how to externalize the configuration

00:00:05.270 --> 00:00:05.950
properties.

00:00:05.950 --> 00:00:10.600
We have seen how to store various configuration parameter in the application or properties

00:00:10.600 --> 00:00:10.950
fail.

00:00:10.950 --> 00:00:15.490
But the challenge with that is every time to make it change will have to modify the

00:00:15.490 --> 00:00:15.970
application,

00:00:15.970 --> 00:00:19.050
their properties and then restart application.

00:00:19.050 --> 00:00:25.020
So this will not work in a production set up where we have the entire project in a jar file

00:00:25.020 --> 00:00:25.020
.

00:00:25.020 --> 00:00:27.830
You should not be touching the jar file to modify properties.

00:00:27.830 --> 00:00:28.180
Fine.

00:00:28.180 --> 00:00:32.700
There are various techniques available to externalize the configuration parameter in the

00:00:32.700 --> 00:00:34.050
application or property spray.

00:00:34.050 --> 00:00:38.510
We'll be exploring one such technique in this particular section.

00:00:38.510 --> 00:00:40.970
Let's look at an example.

00:00:40.970 --> 00:00:42.920
Imagine we have to micro services,

00:00:42.920 --> 00:00:44.620
artist service and payment service,

00:00:44.620 --> 00:00:48.040
and each micro service has its own application their properties,

00:00:48.040 --> 00:00:51.050
which stores the Microsoft disrespect properties.

00:00:51.050 --> 00:00:56.960
Now the problem we're trying to address is how to make changes to the configuration

00:00:56.960 --> 00:01:00.390
parameter without restarting this services.

00:01:00.390 --> 00:01:05.950
One of the most popular approaches is to use the spring cloud can fix ever,

00:01:05.950 --> 00:01:10.550
which can act as the central depository and manage all the properties fail.

00:01:10.550 --> 00:01:16.720
It can manage global properties for all micro services and it can also manage my course of

00:01:16.720 --> 00:01:21.960
its Pacific property space will understand how spring cloud conflicts over what's with some

00:01:21.960 --> 00:01:22.750
examples.

00:01:22.750 --> 00:01:27.850
Spring cloud conflicts ever is like any other Springboard up.

00:01:27.850 --> 00:01:29.930
It doesn't store the actual date.

00:01:29.930 --> 00:01:30.200
Other.

00:01:30.200 --> 00:01:33.300
Today's man is in the back and deposited like it.

00:01:33.300 --> 00:01:36.070
Sprinkler can fix,

00:01:36.070 --> 00:01:36.650
however,

00:01:36.650 --> 00:01:42.280
continuously pulls the git repository or the back and repository and gives the properties

00:01:42.280 --> 00:01:43.750
file information in memory.

00:01:43.750 --> 00:01:48.210
We can have Global properties file like a Prisoner Properties file,

00:01:48.210 --> 00:01:50.760
which would be applicable to all micro services.

00:01:50.760 --> 00:01:51.420
Are we?

00:01:51.420 --> 00:01:55.850
Can my customer specific properties fight like artists of his properties are payments of

00:01:55.850 --> 00:01:59.550
its properties in the get depository and Spring Cloud can fix server.

00:01:59.550 --> 00:02:04.140
I will keep it tab of all the properties filed at every level in the gate repository and

00:02:04.140 --> 00:02:10.030
then try to map them to various micro services will understand it for some examples.

00:02:10.030 --> 00:02:11.590
So let's see it in action.

00:02:11.590 --> 00:02:12.350
Thank you

