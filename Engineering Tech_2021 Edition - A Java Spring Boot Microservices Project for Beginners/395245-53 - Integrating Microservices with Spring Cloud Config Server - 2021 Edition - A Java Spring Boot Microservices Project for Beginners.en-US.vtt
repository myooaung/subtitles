WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.020 --> 00:00:02.040
Welcome back.

00:00:02.040 --> 00:00:05.070
In this law will integrate order rent payment service with

00:00:05.070 --> 00:00:09.670
the spring cloud config server using the Eureka discovery server.

00:00:10.130 --> 00:00:13.740
So let's start the Eureka server.

00:00:13.740 --> 00:00:20.260
It is running at port 8761 and we can see config server is registered.

00:00:20.960 --> 00:00:23.460
Let's load the conflicts.

00:00:23.460 --> 00:00:27.400
Our property file URL, everything looks good.

00:00:28.100 --> 00:00:34.930
Both order and permanent service URL SAR fetching data from the properties file.

00:00:35.840 --> 00:00:39.055
Let's now go to effects artist service.

00:00:39.055 --> 00:00:48.710
We need to add Eureka Discovery client annotation here are enable discovery client,

00:00:48.710 --> 00:00:51.390
and let's run it.

00:00:57.070 --> 00:01:00.650
So all you have done is you have restated Eureka server,

00:01:00.650 --> 00:01:03.095
end spring cloud conflict server.

00:01:03.095 --> 00:01:06.845
You have not made any changes in the properties file to point to

00:01:06.845 --> 00:01:09.440
either Eureka server or to the conflicts over because

00:01:09.440 --> 00:01:13.250
it's all running on the same local environment.

00:01:13.250 --> 00:01:17.960
So now you can see that it's fitting properties file from 8888,

00:01:17.960 --> 00:01:22.280
sorter services stretching properties file from the config server.

00:01:22.280 --> 00:01:27.740
It automatically picked up the config server which is registered on eureka.

00:01:27.740 --> 00:01:32.750
We did not have to do any code change our configuration change to integrate the two.

00:01:32.750 --> 00:01:36.390
Let's now have faced a Jewish rho one.

00:01:38.380 --> 00:01:42.050
We can see that eugenics skill is getting phase now,

00:01:42.050 --> 00:01:45.260
which is the content up optically centered properties,

00:01:45.260 --> 00:01:47.329
which is there on the GitHub repository.

00:01:47.329 --> 00:01:52.680
Now we're not reading from the local application that properties.

00:01:56.110 --> 00:01:59.120
So it will automatically got integrated with

00:01:59.120 --> 00:02:04.215
the spring cloud config server and it is pulling the data from the GitHub repository.

00:02:04.215 --> 00:02:08.840
Let's try it out for the payment service.

00:02:12.840 --> 00:02:16.165
We can see that for the permanent service also,

00:02:16.165 --> 00:02:19.074
data is getting faced from the GitHub repository,

00:02:19.074 --> 00:02:21.770
from the application dot.properties file.

00:02:22.230 --> 00:02:24.460
We are not facing a tough,

00:02:24.460 --> 00:02:26.455
hot, specific micro service.

00:02:26.455 --> 00:02:29.750
It's all coming from the global property span.

00:02:30.510 --> 00:02:34.810
But we have a different message for service will come as it says,

00:02:34.810 --> 00:02:38.440
in the order of service properties file and also in the pavement surface properties.

00:02:38.440 --> 00:02:48.230
By. Next we'll try to fake this specific messages for the harder implement service.

00:02:49.260 --> 00:02:56.689
So the way it works is the microservices name has to match with the property filename.

00:02:57.360 --> 00:03:00.100
We were property fell payment service,

00:03:00.100 --> 00:03:04.790
Sewell up to name the payment services, payment dash service.

00:03:05.910 --> 00:03:09.520
Spring cloud config server would map them

00:03:09.520 --> 00:03:12.790
into service properties file with the payment microservices.

00:03:12.790 --> 00:03:18.080
Similarly, for the order service will up to name it is harder dash service.

00:03:18.330 --> 00:03:21.850
So that's the change required to point it

00:03:21.850 --> 00:03:26.240
microservices to specific properties fell on the good depository.

00:03:30.310 --> 00:03:34.830
Let's start both order and permanent taps.

00:03:37.600 --> 00:03:40.770
Refresh the page.

00:03:43.390 --> 00:03:50.490
We can see that data is getting phase from the specific microservices properties file.

00:03:53.740 --> 00:03:56.510
And from the application dot properties file,

00:03:56.510 --> 00:03:58.590
we are fetching organism name.

00:04:00.070 --> 00:04:02.330
Whatever value is there in

00:04:02.330 --> 00:04:06.320
the Microsoft specific properties file is getting overwritten and application

00:04:06.320 --> 00:04:08.480
dot.properties file in that good repository is

00:04:08.480 --> 00:04:13.350
overrating the content in the local application that property space.

00:04:17.050 --> 00:04:23.345
Let's change the content up ordering payment service again and upload to Git repository,

00:04:23.345 --> 00:04:28.620
where I changed it to version three, upload and commit.

00:04:30.280 --> 00:04:34.970
Now spring cloud config server would automatically pick these changes in

00:04:34.970 --> 00:04:37.655
Detroit display who are symmetry for the orders

00:04:37.655 --> 00:04:41.550
service inverse and three by the permanent service.

00:04:44.500 --> 00:04:48.210
So this we had seen earlier also.

00:04:54.190 --> 00:04:59.100
But let's see, the order and payment apps.

00:05:00.070 --> 00:05:04.565
It is still displaying the old value was true.

00:05:04.565 --> 00:05:07.580
So order in payment service are not picking up

00:05:07.580 --> 00:05:11.255
the changes that we are doing in that good repository.

00:05:11.255 --> 00:05:13.325
However, if we restart the app,

00:05:13.325 --> 00:05:15.840
the changes will get reflected.

00:05:16.990 --> 00:05:22.880
Let's restart both order and payment services and refresh.

00:05:22.880 --> 00:05:26.340
We can see what countries getting picked now.
