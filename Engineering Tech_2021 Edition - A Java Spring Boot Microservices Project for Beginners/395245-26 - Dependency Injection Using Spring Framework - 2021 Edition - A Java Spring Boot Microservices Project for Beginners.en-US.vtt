WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.280 --> 00:00:06.555
Let's revisit the animal speak demo that we did earlier.

00:00:06.555 --> 00:00:10.530
We are able to inject the dependency animal at

00:00:10.530 --> 00:00:12.990
the runtime cinnamon speak classes dependent on

00:00:12.990 --> 00:00:17.610
the Animal object which we are able to injected the runtime.

00:00:17.610 --> 00:00:20.550
We are able to tell it whether it's a dog or cat than animals.

00:00:20.550 --> 00:00:24.810
Pig was able to invoke the corresponding speak method.

00:00:24.810 --> 00:00:30.370
Now let's understand how to do this dependency injection using the Spring framework.

00:00:31.180 --> 00:00:37.320
We'll go to Start dot Springer Tojo and create a new project.

00:00:40.690 --> 00:00:44.360
We'll limit as Dependency Injection demo

00:00:44.360 --> 00:00:48.360
and will not select any dependencies for this lab.

00:00:49.060 --> 00:00:56.670
Just simply generate the project and extract the zip file.

00:00:57.130 --> 00:01:00.800
Now will load this project to intelligent,

00:01:00.800 --> 00:01:05.165
go to File New Project from existing source,

00:01:05.165 --> 00:01:12.570
select the folder dependency injection demo. And click OK.

00:01:13.240 --> 00:01:16.370
We'll select the build type is Maven.

00:01:16.370 --> 00:01:18.530
It's open it in a new window.

00:01:18.530 --> 00:01:22.775
Once all the jar files for Spring framework and loaded,

00:01:22.775 --> 00:01:26.780
the project folder will be visible and you go to SRC.

00:01:26.780 --> 00:01:28.160
And under that men,

00:01:28.160 --> 00:01:31.415
under that Java and under that you will see the main spring would turn

00:01:31.415 --> 00:01:35.970
demo application class send here you will see spring up Listen.com.

00:01:36.580 --> 00:01:40.880
There is an annotation springboard application

00:01:40.880 --> 00:01:44.720
that tells the compiler that this is the springboard application.

00:01:44.720 --> 00:01:47.090
We just added a system out statement.

00:01:47.090 --> 00:01:53.615
Let's run it. So this will run the spring application.

00:01:53.615 --> 00:01:56.610
So everything looks good.

00:01:56.880 --> 00:02:03.470
Let's now implement the animal world project using this Spring framework.

00:02:08.610 --> 00:02:13.435
We'll copy the classes from the older project to save some time,

00:02:13.435 --> 00:02:15.535
you can simply copy and paste.

00:02:15.535 --> 00:02:17.110
And when you pace,

00:02:17.110 --> 00:02:18.730
you paste to counteract the package.

00:02:18.730 --> 00:02:21.910
And you can see the new package name for each class,

00:02:21.910 --> 00:02:23.875
slips copy animal, animals,

00:02:23.875 --> 00:02:26.770
speak, cat and dog.

00:02:26.770 --> 00:02:31.510
These four classes we need we don't

00:02:31.510 --> 00:02:35.350
need to copy the animal waiver class because Dependency Injection demo application,

00:02:35.350 --> 00:02:38.780
this is them into point for the new project.

00:02:45.850 --> 00:02:51.380
So here let's copy the code that we earlier wrote and just run it.

00:02:51.380 --> 00:02:54.065
And let's see if everything runs fine.

00:02:54.065 --> 00:02:59.750
We have not made any changes. And it prints 2v.

00:02:59.750 --> 00:03:04.230
And then for cat, it should print amino.

00:03:05.860 --> 00:03:10.610
Next will tell spring to manage these beans for us.

00:03:10.610 --> 00:03:14.045
The way to do that is through annotations,

00:03:14.045 --> 00:03:16.595
will go to each of the classes,

00:03:16.595 --> 00:03:19.235
will add component annotation.

00:03:19.235 --> 00:03:21.065
So that will tell spring that.

00:03:21.065 --> 00:03:24.720
It's a bean, needs to be managed by spring.

00:03:25.300 --> 00:03:32.940
Will add the annotation to both cat and dog and also to the animal speak class.

00:03:34.030 --> 00:03:39.200
Now let's understand how to inject the beam using this Spring framework,

00:03:39.200 --> 00:03:43.610
we should be able to inject the Animal object to the animal speak class.

00:03:43.610 --> 00:03:48.870
So the way to do that is by using another annotation called auto.

00:03:51.520 --> 00:03:54.890
Auto add annotation till spring.

00:03:54.890 --> 00:03:58.805
What Beamer classmates to be injected at the runtime.

00:03:58.805 --> 00:04:01.550
In the older versus an offspring framework.

00:04:01.550 --> 00:04:05.165
Dependency injection was AC through XML configuration.

00:04:05.165 --> 00:04:08.555
Now Spring Boot has simplified our dependency injection.

00:04:08.555 --> 00:04:12.380
All you need to do is write an auto add annotation and

00:04:12.380 --> 00:04:17.220
then Spring Boot to detect which object needs to be injected at the runtime.

00:04:18.820 --> 00:04:24.680
Now let's comment out these two lines where we had instantiated the classes.

00:04:24.680 --> 00:04:30.080
So will be getting the classes directly from the spring application contexts.

00:04:30.080 --> 00:04:32.150
So spring applicants, some contexts,

00:04:32.150 --> 00:04:33.785
it holds all the beans.

00:04:33.785 --> 00:04:38.520
And spring application.rb returns the application context.

00:04:40.630 --> 00:04:44.015
To get the BGN from application context,

00:04:44.015 --> 00:04:48.690
simply use the getWidth method and specify the class name.

00:04:54.610 --> 00:05:00.000
Now let's say, sayin the beans to the variables,

00:05:02.860 --> 00:05:06.485
and rest of the code would remain the same.

00:05:06.485 --> 00:05:09.620
So the change that we made was within the main class,

00:05:09.620 --> 00:05:12.900
we do not have any reference group, dog or cat.

00:05:13.780 --> 00:05:17.880
Now let's run it and see what happens.

00:05:18.460 --> 00:05:22.505
It failed because we have two components.

00:05:22.505 --> 00:05:28.010
Animals pick doesn't know which component to even check whether queens,

00:05:28.010 --> 00:05:30.120
a cat or dog.

00:05:30.520 --> 00:05:33.200
Now to address this,

00:05:33.200 --> 00:05:37.679
we can simply use the another arm patient call it primary.

00:05:38.290 --> 00:05:43.070
So this will tell the spring claim of that cat Bean needs to be

00:05:43.070 --> 00:05:47.850
injected because that is the primary annotation.

00:05:49.420 --> 00:05:52.890
So you can see me all got printed.

00:05:53.320 --> 00:06:04.170
Lets now move that primary to the dog class and run it again.

00:06:05.260 --> 00:06:08.400
Oof is getting printed.

00:06:09.580 --> 00:06:13.370
So this is how we can inject dependency at

00:06:13.370 --> 00:06:17.900
the runtime by managing it through annotation using the Spring framework,

00:06:17.900 --> 00:06:20.750
we used auto aware it component and

00:06:20.750 --> 00:06:26.490
it primary annotations to a cheaper dependency injection using this Spring framework.

00:06:27.250 --> 00:06:31.400
So as we move along more microservices journey will see lot of

00:06:31.400 --> 00:06:35.975
examples of annotations or toward annotations, bean annotations.

00:06:35.975 --> 00:06:39.260
Hopefully this intimal speak example at giving

00:06:39.260 --> 00:06:42.335
you a good understanding of dependency injection,

00:06:42.335 --> 00:06:44.990
which is a core concept of the Spring framework.

00:06:44.990 --> 00:06:46.650
Thank you.
