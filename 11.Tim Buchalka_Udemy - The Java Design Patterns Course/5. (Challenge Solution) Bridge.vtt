WEBVTT

00:05.640 --> 00:05.910
Hello.

00:05.910 --> 00:06.630
Welcome.

00:06.870 --> 00:14.130
This lecture I want to provide a solution to our previous challenge which was implementing the bridge

00:14.130 --> 00:18.330
design pattern for a shape interface type thing.

00:18.330 --> 00:21.900
We wanted to separate the shape hierarchy from the color hierarchy.

00:21.900 --> 00:22.730
It was all a mess.

00:22.740 --> 00:24.210
Everything was untangled.

00:24.300 --> 00:28.500
So what we're gonna do is we're going to create a new anthology project and we're going to separate

00:28.500 --> 00:35.610
the shape of abstraction from the color implement or it's going to say create new project we're gonna

00:35.610 --> 00:39.050
name this bridge solution

00:45.350 --> 00:53.030
bread solution so the end result of this implementation is going to include an abstraction specific

00:53.060 --> 00:59.000
in an implement or specific method to represent the power and usefulness of the bridge pattern.

00:59.090 --> 01:04.040
We're gonna be able to draw a triangle in Iraq tangle with a particular color with the implement our

01:04.040 --> 01:10.400
specific method draw shape we'll be able to change the thickness of any of the border by the after abstraction

01:10.400 --> 01:15.960
specific method modify border first thing we're going to do is we're going to create the bridge implement

01:15.960 --> 01:21.140
an interface which is the color interface we're then going to follow that up by creating the concrete

01:21.140 --> 01:27.440
bridge implement or classes that implement the color interface green color red color will then create

01:27.440 --> 01:34.190
the abstraction layer the abstraction class shape using the color interface so we'll have a composition

01:34.190 --> 01:42.500
has a relationship will then create some refined bridges or refined abstractions where that will be

01:42.500 --> 01:47.340
the concrete classes implementing the shape interface to triangle and the rectangle and then the last

01:47.340 --> 01:52.550
step our client will use the shape and the color interfaces draw different colored shapes.

01:52.820 --> 01:56.680
So let's start off by creating the bridge implementer.

01:56.780 --> 02:01.990
So we're gonna say new class and this is gonna be our color interface

02:05.170 --> 02:10.510
it's gonna be an interface and all this is gonna have as one method.

02:10.820 --> 02:16.830
Void fill with color that takes a border.

02:16.830 --> 02:21.500
And again this represents the bridge implementer the implementer side of the hierarchy.

02:21.620 --> 02:24.550
We then need to implement this with a couple of colors.

02:24.920 --> 02:32.970
So we're gonna create a red class red color that implements our color interface.

02:33.980 --> 02:41.750
And all this is gonna do is it's gonna output some information saying that we just filled in a shape

02:41.750 --> 02:44.380
with red color and a certain border.

02:44.720 --> 02:56.750
So we'll say public void fill with color in order and then we'll put some information

02:59.510 --> 03:00.560
saying red color

03:03.080 --> 03:06.890
with certain border

03:11.160 --> 03:13.560
and that will be H.

03:13.680 --> 03:14.230
Border

03:17.290 --> 03:20.040
we're gonna do pretty much the same thing for our green color.

03:20.120 --> 03:22.270
So we'll do some copy and pasting.

03:22.940 --> 03:24.460
We need to have a different name for the class.

03:24.470 --> 03:30.430
So we'll say green color in two months the same interface.

03:30.430 --> 03:33.200
So the output is gonna be green color.

03:33.320 --> 03:39.890
So this will be our separation from our abstraction using our Interpol implement our color.

03:39.890 --> 03:44.540
Now we can modify this without having to worry about modifying the abstraction.

03:44.540 --> 03:52.700
We now need to create the abstraction which will name shape and this will be an abstract class so we'll

03:52.700 --> 03:53.450
name a shape.

03:56.270 --> 03:59.440
So we'll be our abstract class shape.

04:00.670 --> 04:07.790
And it needs to have composition of the implement or so we're gonna say protected color interface color

04:09.230 --> 04:15.440
and we're also going to have our constructor set that member variable so protected.

04:15.800 --> 04:18.150
Shape color interface.

04:18.220 --> 04:24.830
See we're just going to say this dark color equals C..

04:25.580 --> 04:30.730
We'll have a couple more methods that will be embedded in the subclasses the shape classes.

04:30.980 --> 04:43.360
One is abstract void draw shape with the border and the other is modify border and the draw shape will

04:43.400 --> 04:44.780
need to use the implementer classes.

04:44.780 --> 04:49.860
So modify border and border int increment.

04:52.670 --> 05:01.910
We then need to have our refined abstractions which would be our triangle and our rectangle triangle

05:01.910 --> 05:05.830
is going to extend our AB class shape.

05:05.840 --> 05:16.610
We'll just say extends Shape and we're going to need to have a constructor to set the triangle.

05:16.610 --> 05:22.860
That's passed in with a color.

05:25.070 --> 05:30.010
So we'll just call super on that and pass in the color.

05:30.260 --> 05:33.920
We then need to override our two methods.

05:33.920 --> 05:38.120
This is our implements or specific method here.

05:38.120 --> 05:44.620
Void draw shape takes a border.

05:45.680 --> 05:58.160
And this is going to help with some information saying this triangle is colored with and that will be

05:58.160 --> 06:11.810
colored with our color fill fill with color and we'll pass on the border off to do the same for our

06:11.810 --> 06:12.120
apps.

06:12.150 --> 06:21.350
Then this then we're going to implement our abstractions specific method which is our modify

06:24.770 --> 06:28.730
modify border which takes a border in an increment.

06:36.500 --> 06:38.660
And this is gonna display some information

06:44.960 --> 06:46.580
at a line feed.

06:46.590 --> 06:50.530
We'll say now we are changing the border length

06:53.380 --> 06:59.380
and we'll display the increment and the times

07:03.320 --> 07:04.220
and see that

07:09.110 --> 07:17.700
and then what we'll do is we'll make sure our parentheses are closed for the Colts I should say.

07:19.280 --> 07:22.760
And then we'll set the border equal to the border.

07:22.910 --> 07:32.150
Times the increment and then we'll call draw a shape which we'll call our fill with border and we'll

07:32.150 --> 07:35.090
make sure that we provide some comments here.

07:35.150 --> 07:41.080
This is the implementer specific method.

07:42.170 --> 07:49.550
And this is our abstraction specific method.

07:50.120 --> 07:54.580
And so that is our triangle class we're gonna have to do something very very similar for our rectangle

07:54.590 --> 08:00.770
so we'll do some copy and paste here for efficiency.

08:00.770 --> 08:04.320
So our demo doesn't run for 30 minutes.

08:04.340 --> 08:13.790
It's a rectangle the constructor will change the rectangle so still going to call super on it redraw

08:13.820 --> 08:18.620
shape is going to do the same thing except that's going to say this rectangle

08:22.660 --> 08:26.580
and the modified border is going to be the same as well.

08:31.560 --> 08:41.860
Now we need to create our client so we'll say new class client at our public static void method.

08:49.300 --> 08:54.710
And what we want to do here is first we're gonna just specify that it's the bit bridge pattern for this

08:54.770 --> 08:55.880
output.

08:55.880 --> 09:02.180
So we'll just do a simple system thought out for his pattern here again then I'm gonna color the green

09:02.600 --> 09:03.510
for the triangle.

09:04.160 --> 09:05.810
So we're gonna say coloring triangle

09:09.540 --> 09:11.340
to green.

09:12.420 --> 09:19.500
And what we're gonna do is we're gonna create a color interface the name Green and that's gonna be a

09:19.500 --> 09:22.890
new green color.

09:23.220 --> 09:28.410
We'll then create our shape for our triangle shape.

09:29.670 --> 09:34.830
And we're gonna pass on this color which is green.

09:35.310 --> 09:42.320
Then we can tell the draw so we can see triangle shape that draw shape and we can pass it into a border

09:42.360 --> 09:48.600
which will just be 20 and then we want to modify the border by calling the abstraction so we can see

09:48.600 --> 09:57.010
triangle shape that modify border we'll say incremented by three something like that.

09:58.020 --> 10:04.710
So you can see how the abstraction layer is separate from the matter layer and you can modify both without

10:04.710 --> 10:06.140
affecting the other.

10:06.180 --> 10:09.240
We'll do another similar thing or we'll call it the rectangle the red

10:12.370 --> 10:15.210
with some of the same type of code.

10:15.400 --> 10:21.080
So we have our color interface red create that first.

10:21.250 --> 10:25.900
We then pass that into our rectangle shape and we call draw shape.

10:25.900 --> 10:32.650
We don't want to modify the border again we'll say rectangle shape that modify border and we'll pass

10:32.650 --> 10:34.440
and 50 and two.

10:35.340 --> 10:41.320
And so this should demonstrate the separation between the abstraction and the implementer.

10:41.320 --> 10:42.610
Let's see if we slow build

10:45.600 --> 10:47.040
now let's see if this run

10:52.400 --> 10:59.810
so what you should see is output is that we were coloring a triangle right.

10:59.840 --> 11:00.310
We're coloring.

11:00.310 --> 11:07.360
Triangle this triangles colored with green color with a 20 inch border and then we're changing a border

11:07.830 --> 11:09.530
to three times the length.

11:09.590 --> 11:12.660
And so now we're calling it with a 60 inch.

11:12.720 --> 11:15.420
We then call the rectangle with a 50 inch border.

11:15.420 --> 11:22.380
We change it by two times and it's 100 probably can make this output a little more readable by having

11:22.380 --> 11:23.510
certain new lines.

11:23.580 --> 11:25.650
But this is the bridge pattern.

11:25.650 --> 11:28.710
If you have any questions again please ask in the Q and A thank you.
