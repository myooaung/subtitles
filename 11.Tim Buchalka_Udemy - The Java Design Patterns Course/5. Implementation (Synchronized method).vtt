WEBVTT

00:05.020 --> 00:06.540
Hello and welcome back.

00:06.590 --> 00:11.240
This lecture I want to provide a demonstration of a synchronized approach to implementing the Singleton

00:11.240 --> 00:12.010
pattern.

00:12.020 --> 00:12.570
This it is.

00:12.650 --> 00:18.300
This is an improvement upon the implementation of the Singleton pattern using a lazy approach.

00:18.320 --> 00:23.450
Let's go ahead and bring up and tell Jay and bring up our previous example which used a lazy implementation

00:23.450 --> 00:24.110
approach.

00:24.110 --> 00:31.210
We're going to modify it slightly so that it uses a thread safe approach so we're going to open up our

00:31.210 --> 00:33.690
previous project.

00:33.740 --> 00:39.100
This is our Singleton lazy initialization example and the first thing we're gonna do is we're gonna

00:39.130 --> 00:45.400
save it as the thread safe approach so let's go ahead and say file see if we can save this project has

00:45.400 --> 00:48.280
a different name OK.

00:48.290 --> 00:51.410
Now we have our copied project.

00:51.410 --> 00:55.460
It's called Singleton synchronized approach example.

00:55.460 --> 01:00.350
It's the same one as the previous project where it was doing lazy evaluation.

01:00.350 --> 01:03.770
We're now going to make this thread's thread safe.

01:03.920 --> 01:08.600
So the easiest way to create a thread save singleton class is to make the global access method Synchronized

01:09.320 --> 01:14.810
only one thread will then be able to execute the method at a time so all we're gonna do is we're going

01:14.810 --> 01:18.150
to add synchronized to our Get instance method.

01:18.150 --> 01:21.690
So we're gonna say public static synchronized

01:25.910 --> 01:31.870
I could spell correctly and it's a synchronized we're gonna put a comma here basically by adding the

01:31.870 --> 01:32.950
synchronized keyword

01:39.010 --> 01:52.220
to the get instance method we force every thread to wait its turn before it can enter the method.

01:52.570 --> 01:53.390
Probably good.

01:54.240 --> 01:55.860
Do a nice return here.

01:56.210 --> 02:01.170
Of course every thread to wait its turn before it can enter the method.

02:01.170 --> 02:03.810
We know the synchronized keyword we're all Java experts.

02:03.810 --> 02:08.310
This will ensure that there is no there's no race conditions when they get instance called.

02:08.610 --> 02:13.670
So we'll still do the if unique instance equals the no unique inconveniences equals new Singleton.

02:13.680 --> 02:14.580
That's it.

02:14.670 --> 02:20.340
That's the entire implementation to make sure that its thread safety all right we do the get instance

02:20.340 --> 02:25.450
here and we do still do that laziness ization.

02:25.560 --> 02:28.130
And here this can or cannot be null.

02:28.410 --> 02:35.200
Maybe technically it would be lazy initialization when we put it in here but I like to set it to null

02:35.620 --> 02:39.670
explicitly because that's good programming practice.

02:39.670 --> 02:40.670
And that's basically it.

02:40.810 --> 02:46.850
If you compile and run it you'll see that you get the same same output as before where the same instance

02:46.850 --> 02:52.170
is created and we'll make sure that that occurs

02:55.640 --> 02:57.660
want to run the test Singleton.

02:57.660 --> 03:00.150
And again just the same output as before.

03:00.150 --> 03:02.810
Same instance same data point.

03:02.910 --> 03:05.010
Value data member verbal.

03:05.010 --> 03:06.900
Now let's look at some of the problems with this approach.

03:06.900 --> 03:10.350
Let's go back to the slides to highlight the height those disadvantages

03:13.710 --> 03:19.440
so one big problem with the synchronization approach using lazy evaluation method ends up being.

03:19.440 --> 03:21.390
There could be a severe bottleneck.

03:21.570 --> 03:25.930
So if all the threads have to wait for the check on whether the object is already exists.

03:26.070 --> 03:30.340
This can reduce the performance because of the costs associated with the synchronized method.

03:30.600 --> 03:35.550
So just by using the synchronized keyword there is a cost because there can be a bottleneck with the

03:35.550 --> 03:37.340
weighting.

03:37.490 --> 03:42.260
The only time the synchronization is relevant is the first time through the method.

03:42.260 --> 03:47.990
Once you have the set of the unique instance variable to an instance of the singleton then you know

03:48.050 --> 03:50.600
you don't need the synchronise anymore in the method.

03:50.690 --> 03:52.440
You don't have to worry about race conditions.

03:52.610 --> 03:57.470
You only have to worry about that race condition when it needs a check for no it will never be null

03:57.470 --> 03:57.910
again.

03:58.010 --> 04:03.900
So you'll never have the race condition creating instance but after the first time through synchronization

04:03.900 --> 04:06.210
is totally on needed overhead.

04:06.480 --> 04:13.270
So not only doesn't perform a bottleneck it's unneeded overhead after that first pass so for most job

04:13.270 --> 04:18.280
applications we need to ensure that the Singleton works in the presence of multiple threads and does

04:18.280 --> 04:23.680
not have these performance issues related to the bottleneck and related to the check happening every

04:23.680 --> 04:26.370
single time even though it doesn't need to be checked.

04:26.380 --> 04:31.360
So now this brings us to our third approach which is called the double check locking principle which

04:31.360 --> 04:35.560
will improve on the synchronized approach which we'll discuss in the next lecture.

04:35.560 --> 04:35.920
Thank you.
