WEBVTT

00:05.300 --> 00:06.180
Well welcome back.

00:06.180 --> 00:07.770
We have another challenge for you.

00:07.770 --> 00:11.220
This challenge is gonna test your understanding of the observer design pattern.

00:11.550 --> 00:16.530
So we're gonna do is we're gonna build a cricket application that uses this pattern to notify viewers

00:16.530 --> 00:18.650
about the latest updates in a match.

00:18.660 --> 00:24.480
I'm not an expert on cricket so I don't know a lot of the details but basically a cricket application

00:24.810 --> 00:27.300
has things like runs wickets and overs.

00:27.330 --> 00:29.110
Don't ask me what those are.

00:29.130 --> 00:31.690
I think it's just has to do with some stats or something.

00:31.800 --> 00:36.210
And so that's what the application is going to do it's going to let viewers know about runs wickets

00:36.210 --> 00:37.260
and overs.

00:37.260 --> 00:42.300
It will use the above information which I just mentioned to determine the average score and the current

00:42.300 --> 00:43.770
score.

00:43.770 --> 00:49.350
The viewers will be the observers will need to classes that display the average score and the current

00:49.350 --> 00:51.880
score uses data from the subject.

00:51.900 --> 00:58.750
The current score runs the wickets in the overs the subject will be the cricket data in the update and

00:58.760 --> 01:06.010
update the observers whenever the runs wickets or overs changes so the steps to implement this are gonna

01:06.020 --> 01:08.410
be first you got to create the subject interface.

01:08.450 --> 01:11.390
This is going to contain methods for register on register and notify.

01:11.480 --> 01:12.970
We know all know all that.

01:13.220 --> 01:15.110
Then you got to create the concrete subjects.

01:15.110 --> 01:16.940
This will be the cricket data.

01:16.940 --> 01:20.230
This will contain state data for run wickets and overs.

01:20.270 --> 01:23.750
Those can be all be hardcoded values.

01:23.750 --> 01:25.940
We're going to also need to keep a list of all the observers.

01:25.940 --> 01:28.790
This can be stored in whatever you like an array list.

01:28.790 --> 01:36.410
For example you need to pass the state data to an update in the Observer and notify all and we'll also

01:36.410 --> 01:38.730
include a method to trigger the notifications.

01:38.840 --> 01:42.260
We have to make the data change somehow so that the notify all gets called.

01:42.260 --> 01:47.220
So we need to add that once we're done with that we can then create the observer interface.

01:47.240 --> 01:51.860
They should only include an update method with the state data as a parameter.

01:51.860 --> 01:56.180
No need for any observers to talk to the subject so we don't need to add any functionality there.

01:56.330 --> 01:57.310
No set subject.

01:57.320 --> 02:04.360
Nothing like that as we did in our example you then have to create the concrete observer's data changes

02:04.370 --> 02:06.620
pass to the update method.

02:06.620 --> 02:11.380
The average score in the current score these are the two classes.

02:11.460 --> 02:17.640
The average score observer should have data to compute the run rate and the predicted school score.

02:17.910 --> 02:25.450
The run rate is calculated by dividing the runs divided by over the predicted score is calculated by

02:25.450 --> 02:33.130
multiplying the run rate times 50 the current score observer should have data for runs wickets and overs.

02:33.200 --> 02:36.320
This will just display this data when path to the update method.

02:36.320 --> 02:38.370
No calculations.

02:38.380 --> 02:41.620
Lastly you need to create the client to simulate some cricket data.

02:41.620 --> 02:43.340
So you need to create the observers.

02:43.420 --> 02:47.990
You'll need to create the subject and then you have to register the observers with the subject.

02:48.160 --> 02:54.050
Then you have to trigger a change in the subject which will cause all the observers to be notified you

02:54.050 --> 02:59.540
then can try to remove an observer and then re trigger to see if the observer is no longer notified.

02:59.540 --> 03:06.470
That will ensure that your observer design pattern is implemented properly some example output.

03:06.490 --> 03:10.990
Here's some examples with the average score display class the run rate in the predicted score with just

03:10.990 --> 03:17.580
hardcoded values the current score display runs 90 wickets two overs ten point two and then again and

03:17.580 --> 03:24.190
we then removed something and we saw the current score display again for a different observer so this

03:24.190 --> 03:25.060
is what I want you to do.

03:25.060 --> 03:29.000
This is what I want and implement to test your understanding of the observed design pattern.

03:29.080 --> 03:34.150
Many of you may be familiar with crickets and all these terms will be self explanatory but again you're

03:34.150 --> 03:38.530
really just calling the Update method whenever state data changes.

03:38.530 --> 03:38.920
Thank you.
