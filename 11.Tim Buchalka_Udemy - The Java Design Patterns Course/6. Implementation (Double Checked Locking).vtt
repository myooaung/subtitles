WEBVTT

00:05.220 --> 00:06.300
Hello and welcome.

00:06.420 --> 00:11.720
In this lecture I want to talk about implementing the Singleton using a double checked locking principle.

00:11.730 --> 00:14.580
This will improve upon synchronized approach.

00:14.580 --> 00:18.090
It will limit increase performance.

00:18.090 --> 00:22.920
Remember that with the synchronized approach a handled two threads are handled the race condition.

00:23.070 --> 00:29.160
But it also increased performance because other threads may be waiting.

00:29.160 --> 00:34.260
And also as always checking the esteem even after the first time even though it did it to see if the

00:34.260 --> 00:35.810
Singleton was no.

00:35.850 --> 00:37.450
So this will improve upon that.

00:37.590 --> 00:42.960
This principle basically says that you will use a synchronized block inside the if condition with an

00:43.170 --> 00:47.100
additional check to ensure that only one instance of the singleton class is created.

00:47.100 --> 00:50.230
You don't ever create more than one instance which is good.

00:50.280 --> 00:53.050
The intent is to optimize away unnecessary locking.

00:53.130 --> 01:00.480
So increasing performance the synchronization check happens at most one time so it will not be a bottleneck.

01:00.600 --> 01:01.950
So eliminating that check.

01:01.950 --> 01:07.050
More than once because really the only relevancy as we mentioned in the synchronized approach is after

01:07.050 --> 01:09.210
that first check in the eye after the object's been created.

01:09.210 --> 01:12.720
You don't need to keep checking it you can just return it.

01:12.720 --> 01:20.640
So we'll solve two problems here and you want to use double check locking to reduce the use of synchronization

01:20.940 --> 01:26.120
and then get instance so you don't have the bottleneck with double check locking.

01:26.260 --> 01:32.280
We first check to see if an instance is created and if not then we synchronize.

01:32.340 --> 01:36.420
We only synchronize the first time through just exactly what we want.

01:37.380 --> 01:41.970
Let's take a look at that and intelligence to see exactly how that works.

01:42.030 --> 01:45.090
I'm an open up ontology.

01:45.090 --> 01:51.540
I've already create a project that's a copy of our Singleton example from previous lectures mainly the

01:51.630 --> 01:55.350
synchronized approach copy we're going to modify it a bit.

01:55.710 --> 02:00.850
So I'm going to say open and we're going to open up the Singleton

02:03.960 --> 02:06.020
copy.

02:06.180 --> 02:10.930
This will be the Singleton double check locking example.

02:11.250 --> 02:17.430
And again there's nothing really new in here other than the lazy initialization approach so we still

02:17.430 --> 02:20.740
have our static unique instance.

02:20.830 --> 02:25.560
The one thing we're gonna change is we're going to change this to have use the volatile keyword.

02:25.770 --> 02:26.330
So we're gonna say.

02:26.330 --> 02:30.550
Private volatile right.

02:30.590 --> 02:32.770
And we know what this keyword does right.

02:32.910 --> 02:33.910
Your job experts.

02:35.070 --> 02:39.120
It's used for a synchronization with the synchronized keyword.

02:39.120 --> 02:43.830
So when you have concurrently running threads in a Java application basically when you say remember

02:43.830 --> 02:47.900
variables volatile the data will be synchronized synchronized across all threads.

02:47.930 --> 02:49.650
So that's the first change you're going to make.

02:49.690 --> 02:51.860
I was gonna make that verbal volatile.

02:51.990 --> 02:55.530
We're still gonna have our constructor that's private.

02:55.530 --> 03:01.120
We're still going to have our unique instance we're no longer gonna have the synchronized keyword for

03:01.120 --> 03:01.630
our method.

03:01.650 --> 03:07.490
We'll take that out and what we're gonna do is we're gonna put the synchronization instead of on the

03:07.490 --> 03:11.230
method we're gonna synchronize inside the if statement.

03:11.300 --> 03:16.760
So what we're gonna do is we're gonna say after the if unique instances now we're gonna say synchronized

03:18.280 --> 03:19.460
on the singleton class

03:23.840 --> 03:27.860
and this means we're only going to synchronize

03:30.460 --> 03:31.370
the first time through

03:34.850 --> 03:38.280
and then then we're gonna basically check for any unique instance again.

03:39.880 --> 03:46.420
So here are gonna say if unique instance equals equals no.

03:48.190 --> 03:57.200
And then in that case we'll we will create a unique instance and we will close our other statements

03:57.200 --> 04:03.500
and I'm gonna use brackets here just so it's more so it's clear even though we only have one statement

04:03.500 --> 04:04.250
inside the F

04:07.050 --> 04:08.590
and then something like that.

04:09.900 --> 04:10.370
Okay.

04:10.430 --> 04:11.870
So do you see what we changed.

04:11.870 --> 04:17.240
We made the member verbal volatile we use synchronize instead of the method we used inside our statement

04:17.270 --> 04:22.790
so that we ensure it only does it the first time through and then we check for null again.

04:22.910 --> 04:29.500
All right so I just want to reiterate again just so you understand the volatile keyword ensures that

04:29.500 --> 04:34.210
multiple threads handle the unique instance variable correctly when it is being initialized to a single

04:34.210 --> 04:34.710
instance.

04:35.830 --> 04:42.160
So if performance is an issue in the get instance method then this method is implementing the Singleton

04:42.190 --> 04:43.600
can drastically reduce the over it.

04:43.630 --> 04:47.280
That's why we're adding this right because of the performance problems with the synchronized method

04:49.440 --> 04:56.370
one of the issues with the double check locking approach is it doesn't work in Java one point four earlier

04:57.550 --> 05:03.190
so unfortunately in the Java is one point for an earlier many of the JVM to achieve Java Virtual Machine

05:03.520 --> 05:08.350
contain implementations of the volatile Q Would that allow improper synchronization for double check

05:08.350 --> 05:15.360
locking so if you have to use a JVM rather than Java 5 you may want to consider other methods of implementing

05:15.360 --> 05:21.590
your Singleton other than the double double check locking approach but again this double check locking

05:21.630 --> 05:27.720
provides for unnecessary locking and is avoided by adding another task before creating the object this

05:27.720 --> 05:34.230
other if statement inside synchronized and this will support multi threaded environments and also increase

05:34.230 --> 05:40.150
performance by getting rid of the necessary if check and getting rid of the blocking.

05:40.380 --> 05:40.800
Thank you.
