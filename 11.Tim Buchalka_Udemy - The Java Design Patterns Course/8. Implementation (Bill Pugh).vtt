WEBVTT

00:05.170 --> 00:06.230
Hello and welcome.

00:06.310 --> 00:10.750
In this election I want to talk about implementing the Singleton using the bill you approach remember

00:10.750 --> 00:18.130
from the previous lecture we implemented the Singleton with a really common way using eager evaluation.

00:18.130 --> 00:22.370
And so really all we did was we created an instance class loading time.

00:22.390 --> 00:28.210
Now we notice that there were some problems with this and that it can and that all clients would automatically

00:28.210 --> 00:30.890
always have the instance even if they didn't need it.

00:31.000 --> 00:37.290
And so the bill Pugh approach is going to prove upon that and so just again just to recap most of the

00:37.290 --> 00:43.350
scenarios when you write software singleton classes are created for resources such as file systems database

00:43.350 --> 00:46.080
connections and so forth.

00:46.080 --> 00:52.650
We want to avoid instantiating the actual Singleton until a client needs it until the client calls they

00:52.650 --> 00:54.370
get instance method.

00:54.420 --> 00:58.470
And so this is the big bill pure approach to creating a singleton.

00:58.470 --> 01:02.730
What he does is he came up with the idea to use an interstate EC helper class.

01:02.790 --> 01:04.960
It's the most widely used approach.

01:05.020 --> 01:08.800
It doesn't require synchronization it's thread safe.

01:08.820 --> 01:11.140
And it only creates instance when the client needs it.

01:11.160 --> 01:13.060
It's easy to implement and understand.

01:13.170 --> 01:16.750
And again it's regarded as the standard method to implement singleton demands.

01:16.770 --> 01:19.250
So this is the approach that I recommend for the class.

01:19.320 --> 01:24.750
I showed you four other approaches because you can do those in certain situations but in most situations

01:24.870 --> 01:26.750
this is the one you want to do use.

01:26.760 --> 01:29.820
So let's bring this up and ontology and I'll show you how you can implement this

01:34.010 --> 01:38.930
so let's bring up until they are already created a project that represents the Singleton implemented

01:38.930 --> 01:41.090
with the lazy evaluation approach.

01:41.090 --> 01:44.650
I want to reuse that to demonstrate the pill.

01:44.660 --> 01:51.930
Bill Pugh approach and so let's open up that project and start from there all the Singleton approaches

01:51.930 --> 01:53.310
are so closely related.

01:53.310 --> 01:57.000
I wouldn't I want to retype every sense of the commonality

02:00.870 --> 02:04.300
until you'll notice this implementation looks somewhat familiar.

02:04.410 --> 02:06.150
A couple of things we want to change for Bill.

02:06.160 --> 02:13.030
You don't want to put the instance up here so we can delete the member variable here.

02:13.340 --> 02:18.380
We can still have the Singleton private constructor that's always needed but now we're gonna do is we're

02:18.380 --> 02:23.340
going to have a nested inter class and so the member variables is to be inside their so we're gonna

02:23.360 --> 02:27.500
create a helper inside our singleton class.

02:27.560 --> 02:29.350
This is our nested inter class.

02:29.420 --> 02:31.400
It's gonna be private.

02:31.400 --> 02:40.900
It's gonna be a static class and that's gonna be our Singleton single ton helper.

02:41.150 --> 02:45.320
And so again just to put comments in here this is nested and that's the class.

02:46.150 --> 02:48.180
It's like a private helper class.

02:48.470 --> 02:49.430
It's referenced

02:51.800 --> 02:55.230
after the get instance is called.

02:55.230 --> 03:02.850
So after they get instance method is called and all you do in here is you put in your Singleton instance.

03:02.950 --> 03:03.980
Right unique instance.

03:03.980 --> 03:12.880
So we'd say private static final and what we want to do is we want to call this our single Singleton.

03:12.880 --> 03:22.750
So we'll say private static final Singleton and we're gonna name this unique instance and we're gonna

03:22.750 --> 03:24.700
say nuanced new Singleton.

03:26.020 --> 03:32.850
So we're doing class loading but it's in a nested class where we're going to close that parentheses

03:32.880 --> 03:34.120
or the bracket there.

03:34.260 --> 03:39.920
Now in our Singleton we can reference a unique instance from the helper class.

03:39.990 --> 03:44.330
So here we would have to say and we don't have to actually do a check.

03:44.910 --> 03:58.000
We can just say return Singleton helper that unique instance.

03:59.640 --> 04:01.710
And this is the bill Pugh approach.

04:01.710 --> 04:06.470
So notice that the private interstate a class that contains the instance for the singleton class.

04:06.480 --> 04:13.330
That's where the instance is created inside the private inner static class the nested class when the

04:13.330 --> 04:15.040
singleton class is loaded.

04:15.040 --> 04:22.380
The Singleton helper class is not loaded into memory in only when someone calls the gate instance method.

04:22.400 --> 04:26.690
This class will then get loaded in create the singleton class instance.

04:26.770 --> 04:26.960
Right.

04:26.960 --> 04:33.200
So this solves the problem of the eager evaluation where you have to call get instance in order for

04:33.200 --> 04:36.740
the Singleton unique instance to be created because that's one of the axis.

04:37.280 --> 04:38.780
So this solves all the problems.

04:38.780 --> 04:40.580
This is the recommended approach.

04:40.640 --> 04:46.160
Let's summarize the other approaches that we mentioned real quickly and then we'll get into a challenge

04:46.790 --> 04:48.370
in a demonstration.

04:48.370 --> 04:50.050
So let's go back to the slides at this point

04:54.480 --> 04:59.640
so to summarize all the approaches you want to use the lazy evaluation approach for creating a singleton.

04:59.640 --> 05:03.390
If you're not worried about multiple threads so if you're doing something simple you don't have to worry

05:03.390 --> 05:09.180
about race conditions or threads then you would use this but for the most part this is not the recommended

05:09.180 --> 05:15.180
approach because most times you do have threads for most of applications you will need to ensure that

05:15.180 --> 05:17.850
the Singleton works in the presence of multiple threats.

05:17.970 --> 05:22.170
You can add the synchronous keyword to the get instance method if performance is not critical to your

05:22.170 --> 05:23.440
application.

05:23.490 --> 05:29.580
That was the synchronized approach when calling to get instance method is not causing substantial overhead

05:29.580 --> 05:34.570
for your application you could also use this because there are some efficiency problems synchronize

05:34.860 --> 05:37.650
and get instance is straightforward and effective.

05:37.710 --> 05:42.160
Just keep in mind that synchronizing a method can decrease performance by a factor of 100.

05:42.420 --> 05:47.160
So if a high traffic part of your code begins using the get instance you may want to reconsider using

05:47.160 --> 05:53.630
the synchronized approach because of the efficiency issues because of waiting for the blocking you can

05:53.630 --> 05:58.390
use to double check locking principal to increase performance in this get instance method.

05:58.400 --> 06:00.590
That's an alternative to the synchronized approach.

06:01.370 --> 06:05.990
If your application always creates and uses an instance of the singleton and is not using a lot of resources

06:06.800 --> 06:07.550
then you can use.

06:07.550 --> 06:13.460
Then you can use the eager evaluation approach you move to an eagerly created instance approach rather

06:13.460 --> 06:15.280
than a lazily created one.

06:15.320 --> 06:17.750
This will be threat say is that safe.

06:17.750 --> 06:22.310
The only drawback is that the instance created even if the client application might not be using it.

06:23.420 --> 06:25.590
And that brings us to the bill PR approach.

06:25.740 --> 06:30.930
Bill who is the recommended approach because it creates a singleton using an inner static helper class

06:31.260 --> 06:36.850
and only has the instance if you call the get instance method and so there is a rundown of multiple

06:36.850 --> 06:38.710
approaches to implement the singleton.

06:38.710 --> 06:42.940
Now let's test your knowledge by providing an assignment or a challenge and see how well you learned

06:42.940 --> 06:43.370
everything.

06:43.930 --> 06:44.320
Thank you.
