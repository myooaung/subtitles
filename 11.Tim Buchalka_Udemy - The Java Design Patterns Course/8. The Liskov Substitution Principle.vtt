WEBVTT

00:05.170 --> 00:05.520
Hello.

00:05.530 --> 00:06.190
Welcome back.

00:07.060 --> 00:14.990
Let's talk about this calf substitution principle this principle was introduced by person named Barbara

00:15.100 --> 00:18.120
Lipscomb hence the name of the principle.

00:18.170 --> 00:24.170
It defines the objects of a superclass can be replaceable with objects of its subclasses without breaking

00:24.170 --> 00:29.720
the application requires the objects of your subclasses to behave in the same way as the objects of

00:29.720 --> 00:36.110
your superclass methods which use a superclass type must be able to work with a subclass without any

00:36.110 --> 00:37.160
issues.

00:37.210 --> 00:45.970
So has to do with inheritance and basically subclasses have to work with base classes and over and method

00:46.000 --> 00:53.930
of a subclass needs to accept the same input parameter values as a method of the superclass.

00:54.300 --> 00:59.540
Do not implement any stricter validation rules on input parameters than implemented by the parent class.

00:59.550 --> 01:04.360
Sometimes we'll do that with subclasses you'll make a more strict you can't do that in this principle.

01:04.500 --> 01:09.630
Any code that calls this method on the object of the superclass might cause an exception if it gets

01:09.630 --> 01:17.040
called with the object of the subclass these two classes need to almost be the same and work together.

01:17.160 --> 01:22.090
The return value of a method of subclass needs to comply with the same rules as the return value of

01:22.090 --> 01:23.150
the method of superclass.

01:23.210 --> 01:24.570
Getting a theme here.

01:24.640 --> 01:29.950
You can only decide to apply stricter rules by returning a specific subclass of the defined return value

01:29.980 --> 01:35.900
or returning a subset of the valid return values of the superclass and we'll get into an example where

01:35.900 --> 01:37.280
this will make much more sense.

01:37.360 --> 01:43.410
But what this is basically saying is the base and the subclass have to be very very similar.

01:43.510 --> 01:49.340
You don't want to break things you're avoiding breaking things in order to follow this principle.

01:49.390 --> 01:53.490
The subclass has to enhance functionality but not reduce it.

01:53.560 --> 01:54.620
You don't want to break.

01:54.830 --> 02:01.940
So you may have asked yourself well if if the classes are almost the exact same thing why even use it.

02:02.050 --> 02:05.320
Because you can add new functionality you just want to break anything in the base class

02:08.120 --> 02:14.140
so it's in line with what Java also allows a superclass reference can hold a subclass object right.

02:14.150 --> 02:19.920
We know that in Java a superclass of you can be replaced by a subclass any superclass reference any

02:19.930 --> 02:20.980
time.

02:21.140 --> 02:22.470
We know that as well.

02:22.700 --> 02:29.110
Job on inheritance mechanism follows this principle which is exactly what this principle is saying here

02:29.110 --> 02:32.740
on those two sentences you don't break anything right.

02:32.770 --> 02:40.160
The superclass can hold a subclass object the superclass can be replaced by a subclass and nothing breaks.

02:40.220 --> 02:44.990
It's also very closely related to the Single Responsibility Principle and the interface segregation

02:44.990 --> 02:47.590
principle we haven't talked about the interface segregation principle.

02:47.780 --> 02:52.280
But when I go through an example you should see the relation to the Single Responsibility Principle

02:52.600 --> 02:55.370
of a base class has more function in the subclass.

02:55.370 --> 03:02.990
It might not support some of the functionality and that would violate this list cough substitution principle.

03:03.040 --> 03:05.560
It also extends the open closed principle.

03:05.830 --> 03:09.730
We know the open closed principle basically says that a class should be open for extension and closed

03:09.730 --> 03:11.530
for modification.

03:11.530 --> 03:16.640
We override the original class and implement the functionality be changed in the overriding class.

03:16.870 --> 03:22.650
Just like with our example of interfaces the changes happen in the classes that implement the interface.

03:24.100 --> 03:30.860
When the subclass object is used in place of the superclass the override functionality is executed polymorphism.

03:31.030 --> 03:32.970
If you have a reference the superclass.

03:32.980 --> 03:37.810
This is exactly in line with the list cough substitution principle you're not breaking anything in that

03:37.810 --> 03:40.650
base class or in that interface.

03:40.710 --> 03:45.390
Again I would like to take a look at an example in intelligence to demonstrate this principle

03:51.510 --> 03:53.000
so we're gonna bring up until J.

03:53.040 --> 03:58.230
This is going to be a basic example with a vehicle class that's our base class and then we're gonna

03:58.230 --> 04:04.830
have some subclasses car and bus and so forth and we're gonna see how we file this list called substitution

04:04.830 --> 04:06.010
principle.

04:06.360 --> 04:09.510
So we'll name this list coughs substitution

04:12.250 --> 04:14.840
example.

04:14.840 --> 04:23.140
Let's hope I correctly spell it.

04:25.170 --> 04:25.670
OK.

04:25.680 --> 04:29.070
And we're going to create our base class which is named vehicle

04:32.780 --> 04:37.680
so a public class vehicle.

04:37.690 --> 04:40.450
It's gonna have a couple methods.

04:40.540 --> 04:43.460
They're not going to have any implementation.

04:43.600 --> 04:45.010
Basically they're gonna be abstract.

04:45.010 --> 04:49.100
Let's make these abstract so they compile.

04:49.420 --> 04:57.130
I have to add any brackets we could've just put the default behavior but we'll keep it like that.

04:57.220 --> 05:06.730
All right now we're gonna create a couple subclasses we'll create a car class which will extend extend

05:07.210 --> 05:10.110
the vehicle.

05:10.240 --> 05:13.880
This is inheritance we're familiar with this.

05:14.200 --> 05:19.630
We're going to implement while we're going to override but we're not going to actually have any functionality

05:19.660 --> 05:24.570
because we're just demonstrating a principle we've got to do the cubic capacity

05:27.640 --> 05:32.920
and then we'll just add another one to show that we can have additional functionality.

05:33.070 --> 05:40.660
Otherwise it wouldn't be very useful class and we will create our boss class

05:44.670 --> 05:51.680
extends the vehicle.

05:51.940 --> 05:54.880
Notice my inconsistent use of braces here.

05:54.940 --> 06:00.360
I apologize for that but again I know some of you may put in the reviews.

06:00.370 --> 06:03.580
You know he doesn't follow consistent coding standards and all this stuff.

06:03.580 --> 06:06.080
It's not really the intent of what I'm trying to demonstrate.

06:06.220 --> 06:13.600
So I may be a little loose with my braces my coding style my naming conventions try to focus on what

06:13.600 --> 06:19.130
we're learning here which is in this example the lowest cost substitution principle so don't nitpick

06:19.150 --> 06:23.520
me on the necessarily braces.

06:23.560 --> 06:29.020
Not that it's a big deal or you can't nit pick me if you like it's really your prerogative.

06:29.170 --> 06:29.940
Really bothers you.

06:29.940 --> 06:32.500
I guess I guess that's fine.

06:33.490 --> 06:36.000
Hopefully it doesn't bother you but

06:39.150 --> 06:40.690
but definitely does bother some.

06:40.710 --> 06:42.850
I've I've I've read many comments

06:45.580 --> 06:53.230
we're gonna add a another detailed method here just for the boss class get emergency exit location really

06:53.230 --> 06:54.610
just something simple.

06:54.870 --> 06:55.180
OK.

06:55.210 --> 06:56.030
And women too.

06:56.050 --> 07:02.350
Now here is where we want to file the list called principal where we can use the base class interchangeably

07:02.350 --> 07:03.060
with a subclass.

07:03.070 --> 07:03.590
Right.

07:03.640 --> 07:07.020
So following list preferences we should be able to do the following.

07:07.270 --> 07:13.950
We should be able to create a vehicle and we should be able to say new bus right.

07:14.170 --> 07:18.040
We know we do this quite a bit to utilize polymorphism.

07:18.040 --> 07:24.420
We should be able to say vehicle that gets speed.

07:24.940 --> 07:26.440
We then should say vehicle

07:30.610 --> 07:31.540
equals new car

07:34.930 --> 07:35.920
and vehicle

07:38.680 --> 07:43.310
that get you big.

07:43.390 --> 07:49.130
The intelligence isn't working because they don't have it in a method correctly capacity.

07:49.210 --> 07:53.320
Let's also put this in a method

08:01.600 --> 08:03.360
which now we probably can't use

08:07.010 --> 08:08.690
something like that right.

08:09.360 --> 08:16.010
And this is really demonstrating this list called principal indentation is off.

08:16.720 --> 08:24.670
But what you want to notice here is we can assign an object of type Car or type bus to a reference type

08:24.670 --> 08:29.500
of vehicle and we do that quite a bit again with polymorphism but you'll notice that in lines twenty

08:29.500 --> 08:32.630
three and in line twenty five.

08:32.980 --> 08:40.150
All the function in the base class vehicle can be invoked on a reference of type vehicle right.

08:40.270 --> 08:45.920
That's what we're doing here on 24 and 26 These are the lowest cost substitution principle.

08:45.970 --> 08:51.340
It is also possible to invoke methods get speed and get cubic capacity on a vehicle reference which

08:51.340 --> 08:53.840
actually holds a bus or a car right.

08:54.130 --> 08:55.420
Which again is what we're doing here.

08:57.550 --> 09:01.230
The actual objects over an implementation of these methods will be invoked right.

09:01.240 --> 09:02.660
That's all polymorphism.

09:02.730 --> 09:05.010
We'll call these methods.

09:05.110 --> 09:11.080
This is exactly what the list cost Substitution Principle states right subtype objects can replace super

09:11.080 --> 09:17.040
type objects without affecting the functionality inherent in the Super type.

09:17.260 --> 09:19.700
And that's what this is demonstrating.

09:19.840 --> 09:27.730
You see that again let me repeat that subtype objects some type objects bus and car can replace super

09:27.730 --> 09:34.100
type objects vehicle without affecting the functionality inherent in the Super type you're not affecting

09:34.100 --> 09:36.620
this because they're abstract methods.

09:36.650 --> 09:37.490
But even if they weren't.

09:37.550 --> 09:43.780
We could change them and have empty bodies that's loose cost substitution.

09:43.930 --> 09:45.840
Now if that didn't quite sink in.

09:45.940 --> 09:49.990
Let me move back to the slides and just show you another example.

09:50.290 --> 09:58.660
That's a little higher level here let's look at an example of a circle and ellipse all circles are inherently

09:58.720 --> 10:02.100
eclipses with their major minor axes being equal right.

10:02.560 --> 10:03.730
So you see an example here.

10:03.730 --> 10:07.530
Basically you have some inheritance in terms of classes.

10:07.600 --> 10:13.990
Ellipse could be a base class and circle could be a subclass an object of type circle can be assigned

10:13.990 --> 10:22.190
to a reference of type ellipse all the methods in ellipse can be invoked on a circle object one inherent

10:22.190 --> 10:25.530
functionality of any lips is that it is structural.

10:25.580 --> 10:31.700
For example the length of two axes of an ellipse can be changed so we can add methods certain length

10:31.700 --> 10:34.640
of axis X and set length of access y to the Ellipse class

10:37.290 --> 10:43.560
calling any of these two methods on an object of type circle inside of reference of type ellipse would

10:43.560 --> 10:51.110
lead to a circle no longer being a circle right for a circle of length of the major minor axis are equal

10:52.940 --> 10:58.490
and this would be a violation of list coughs substitution principle you're essentially assigning a subtype

10:58.490 --> 11:02.930
object to a super type reference which does not work OK.

11:02.980 --> 11:07.210
So it's really it's may seem more complicated than is it's pretty straightforward.

11:07.210 --> 11:11.770
It just means you can the subclass can change you can add new functionality but we're referring to this

11:11.770 --> 11:12.660
reference type.

11:12.820 --> 11:18.040
You can you know you can only call methods in the base class obviously but you also don't break anything

11:18.040 --> 11:22.150
if you're trying to use the subtype right.

11:22.450 --> 11:27.130
You're signing a subtype object to a super type reference and in this ellipse example that just doesn't

11:27.130 --> 11:27.760
work.

11:27.880 --> 11:33.970
You have to make sure or because in this example settlement of X that the set looks of X Y or only in

11:34.450 --> 11:37.810
the ellipse class which is the base class.

11:38.110 --> 11:39.000
Okay.

11:39.090 --> 11:43.850
Again we'll go through some examples that will demonstrate this principle in design patterns.

11:43.870 --> 11:44.230
Thank you.
