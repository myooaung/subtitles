WEBVTT

00:05.180 --> 00:06.780
Hello and welcome back.

00:06.780 --> 00:11.570
We're going to start talking about implementing the Singleton and the first implementation technique

00:11.850 --> 00:16.820
that I want to show you how to implement the singleton is referred to as the lazy innocent initialization

00:17.090 --> 00:18.650
implementation.

00:18.650 --> 00:23.310
This method implements a singleton pattern by creating instance in a global access method.

00:23.450 --> 00:29.630
So let's go ahead and bring up ontology and show you how we can implement this pattern in a lazy initialization

00:29.630 --> 00:30.370
manner.

00:30.480 --> 00:34.930
We'll create a new project we're gonna name the specific to what we're trying to do.

00:34.940 --> 00:42.430
So we're gonna name it Singleton lazy initialization implementation or Singleton implementation lazy.

00:42.710 --> 00:52.690
Let's see let's say Singleton lazy initialization implementation.

00:53.310 --> 00:55.850
How about Singleton lazy in association.

00:55.850 --> 00:57.750
Yeah implementation I will just say.

00:57.760 --> 01:02.210
Example Sean bit Singleton lazy initialization example

01:05.430 --> 01:13.110
we're gonna go ahead and create a class named Singleton it's going to be a public class and what this

01:13.110 --> 01:18.140
is going to do it's going to have some of the common common implementation of all the approaches.

01:18.270 --> 01:24.270
The first being there's gonna be a private reference to the one and only instance so there's the private

01:24.270 --> 01:30.310
reference to the one and only instance.

01:30.310 --> 01:30.560
All right.

01:30.560 --> 01:37.560
This is standard for all singletons we say private static and where you're using statics as well which

01:37.560 --> 01:41.560
is quite often but we'll see how we can avoid it in other approaches.

01:41.760 --> 01:44.820
But this is an instance to the Singleton itself.

01:44.820 --> 01:46.380
We'll just call it unique instance

01:49.620 --> 01:52.440
and we're going to initialize it to No.

01:52.710 --> 01:55.120
And so that's our private reference.

01:55.260 --> 02:00.150
We're also going to just had some other data attributes the Singleton which is quite common.

02:00.270 --> 02:04.530
This is just an instance attribute remember variable.

02:04.570 --> 02:11.980
All right we'll just say this private int data equals zero.

02:12.180 --> 02:14.270
We then need to make our constructor private.

02:14.280 --> 02:17.840
This is again common for all singletons.

02:18.270 --> 02:23.460
It's a private constructor that just doesn't do anything because it's never gonna be invoked.

02:23.460 --> 02:26.000
So we just do something like this.

02:26.100 --> 02:27.440
This is the single constructor.

02:27.480 --> 02:28.290
It's private.

02:28.290 --> 02:30.580
No client can instantiate the Singleton object.

02:30.600 --> 02:31.980
Very very important.

02:32.130 --> 02:36.450
The next thing we need to do is we need to create the get instance method that's going to return our

02:36.450 --> 02:38.400
unique unique instance.

02:38.400 --> 02:41.670
If it had been created before or it's been instantiated if it hasn't.

02:42.510 --> 02:44.490
So here we can make this public.

02:44.490 --> 02:49.560
We have to make it static since we're going to refer to a static instance and we're going to return

02:49.560 --> 02:56.130
a static singleton and we're gonna call it get instance.

02:56.250 --> 03:02.490
And what this is going to do is it's going to return the unique instance if it's been created before

03:02.490 --> 03:04.470
and if it hasn't it's going to instantiate it.

03:04.500 --> 03:08.620
So what we have to do is we have to check if the unique instance is equal to now.

03:08.720 --> 03:12.140
And if it's equal the null that means it has not been previously created.

03:12.150 --> 03:22.710
So in this case we would instantiate it would say the unique instance I wish I could spell better and

03:22.710 --> 03:24.360
actually I spelled it wrong up top.

03:24.360 --> 03:27.000
So let's make sure our spelling is better unique

03:29.970 --> 03:37.500
instance so unique instance is just going to be instantiated by calling a new one Singleton.

03:37.510 --> 03:37.680
Right.

03:37.680 --> 03:40.290
And we can call that new because we're in the class.

03:40.320 --> 03:43.070
And even though it's private we're in the class we have access.

03:43.170 --> 03:44.880
Otherwise if it's not null

03:47.670 --> 03:50.820
we can then just return the unique instance

03:55.690 --> 03:56.350
right.

03:56.760 --> 04:02.610
Pretty straightforward and then below there we would probably have some setter methods for some set

04:02.610 --> 04:08.210
data you something like that.

04:08.430 --> 04:12.550
The other part now that we need to create it would be need to be the client.

04:12.630 --> 04:20.080
So we're going to create a crass class called Test Singleton that's going to create the singleton

04:23.300 --> 04:26.160
or use the singleton design pattern.

04:26.220 --> 04:29.280
This is gonna have a static void made the main method

04:36.840 --> 04:40.640
and what this is going to do is the first thing it's gonna do it's gonna get reference to the Singleton.

04:40.650 --> 04:43.450
So we have to get a singleton reference.

04:43.780 --> 04:46.590
So we're gonna say Singleton s we're not going to say new on it.

04:46.590 --> 04:48.730
We want to be able to say we want it because it's private.

04:48.780 --> 04:55.860
So what we have to do is it's a static method so we can just say Singleton that instance get instance

04:56.640 --> 04:59.130
and that's going to return our Singleton.

04:59.130 --> 05:03.570
So now s will be a singleton and now we can set some data.

05:03.580 --> 05:07.530
The good thing about setting the data is will actually be able to test whether or not this is a singleton.

05:07.590 --> 05:10.420
That's why he did that added the data attributes.

05:10.440 --> 05:16.260
So yeah we're gonna set the data value in it probably at this point would be good to actually have a

05:16.260 --> 05:17.440
set method.

05:17.520 --> 05:25.590
So let's go ahead and add that set method here we're just going to say public void set.

05:25.920 --> 05:26.240
Let's see.

05:26.250 --> 05:35.120
Let's just call it set data and we'll take an integer my data something like that and all this is gonna

05:35.160 --> 05:38.020
do is it's going to set data equal to my data.

05:38.310 --> 05:40.210
Pretty straightforward setter.

05:40.350 --> 05:45.550
Now when we go back to our client we can actually called set the data value so we'll just say ask that's

05:45.560 --> 05:46.640
that data.

05:47.010 --> 05:54.240
We'll just do some arbitrary number maybe fifty five and then we'll print out the actual reference information

05:54.270 --> 05:54.880
so we can.

05:54.880 --> 05:57.890
Again this is going to verify that our Singleton worked.

05:58.170 --> 06:07.250
So we're going to print out the reference which is an s the s instance first references s and then we're

06:07.250 --> 06:09.650
gonna print out the data value.

06:09.650 --> 06:11.510
So we need to add a getter.

06:11.570 --> 06:20.650
So now we also do our public int get data and this will just return our data member.

06:20.660 --> 06:25.110
Erm so now we can say SDR get data.

06:25.370 --> 06:30.310
Now we want to get another reference to the Singleton we want to make sure that it's the same reference.

06:30.320 --> 06:30.490
Right.

06:30.500 --> 06:37.450
So we're gonna reset the ethanol and then see if the Singleton works.

06:37.480 --> 06:38.410
Right.

06:38.510 --> 06:44.330
So we'll get another reference to the Singleton will set as back to normal to see if the get instance

06:44.330 --> 06:45.540
is going to work.

06:45.770 --> 06:52.730
And so we'll say S S equals Singleton dot get instance and then again we'll print it out and see if

06:52.730 --> 06:57.760
the second reference has the same data values as the first reference.

06:57.760 --> 07:02.610
So we'll call the math.

07:03.430 --> 07:09.260
So print out the second reference and then go ahead and we'll test it to see if our Singleton worked

07:11.350 --> 07:13.180
so build.

07:13.180 --> 07:14.230
We're good to go.

07:14.230 --> 07:22.570
We're gonna run and make sure we run our singleton class and not our main so going to say run and run

07:22.570 --> 07:31.480
our test SINGLETON I'm sorry run test Singleton and so you'll see here the output is telling us that

07:31.480 --> 07:38.380
we have a singleton the first reference is 3 4 9 8 and that's a wacky reference information it just

07:38.380 --> 07:43.480
that's how you can see the instance of a class it has value fifty five and the second reference is also

07:43.480 --> 07:51.280
3 4 9 8 with a value fifty five saw a singleton design implementation using lazy evaluation worked and

07:51.280 --> 07:57.880
what makes this the lazy evaluation implementation is we're not instantiating it until we need to use

07:57.880 --> 08:00.910
it till we need it by calling get instance.

08:00.910 --> 08:05.470
So at this point let's go back to the slides and I'll show you some problems with this approach

08:08.790 --> 08:10.410
so here we are in our slides.

08:10.410 --> 08:14.120
What are some problems with the implementation that I just demonstrated.

08:14.220 --> 08:21.590
So what's going on in the implementation in intelligence is that it's not thread safe.

08:21.630 --> 08:27.330
So imagine if two calls to the gate instance are made at virtually the same time the first threat is

08:27.330 --> 08:30.030
gonna check to see whether the instant six exists.

08:30.210 --> 08:34.560
If it does not it goes into the part of the code that will create the first instance right because there

08:34.560 --> 08:41.190
will be no harder before that has been done a second thread can come in and it looks to see whether

08:41.190 --> 08:45.630
the instance a member is null and because the first right actually hasn't created yet because there

08:45.630 --> 08:46.910
is that race condition.

08:46.980 --> 08:49.110
The instance is still equal to null.

08:49.140 --> 08:54.540
So the second threat is also going to go into the code that create the instance and that is a problem

08:54.570 --> 08:57.840
because now you have two instances as opposed to the singleton.

08:57.840 --> 09:02.160
You don't have a single instance anymore because there's that race condition during the check of whether

09:02.160 --> 09:08.610
or not it's no and so both threads now perform a new on the Singleton object thereby creating two objects

09:08.640 --> 09:11.850
that is a problem.

09:11.930 --> 09:17.210
Now it may not be a problem if the singleton is absolutely stateless so if there is no member variables

09:17.210 --> 09:23.700
inside there and you don't have any state data then the thread safety may not be an issue but if the

09:23.700 --> 09:26.210
singleton and state like it did in our example.

09:26.340 --> 09:31.470
If you expect that when one object changes the state if I change the data then all the other objects

09:31.470 --> 09:36.650
should see the same change because we only have one instance of that object and in this case with the

09:36.650 --> 09:37.220
thread safe.

09:37.220 --> 09:42.770
Problem is you wouldn't see that you would see one object change the state data and then the other object

09:42.770 --> 09:46.980
that you thought was a singleton didn't have that same data.

09:47.210 --> 09:49.700
So the two threads will be interacting with different objects.

09:49.700 --> 09:53.350
The first thread is that you're acting with a different object than all the other threads do.

09:53.360 --> 09:58.340
That is a big problem because you don't have the Singleton inconsistent state between threads using

09:58.340 --> 10:03.870
a different Singleton objects is the problem with this approach because of the thread issues.

10:03.920 --> 10:08.420
If the object creates a connection there will actually be two connections so if you use a singleton

10:08.420 --> 10:12.590
for a network approach you'd have two actual connections one for each object.

10:12.590 --> 10:16.610
Again it can get very very problematic if O'Connor is used.

10:16.610 --> 10:19.870
Then you'd have two counters you wouldn't have a single counter.

10:20.060 --> 10:26.100
It may be also very difficult to find these rates condition problems because it is just by happenstance.

10:26.230 --> 10:32.830
If you just happen to actually create those two instances in two separate threads at the same time so

10:32.830 --> 10:34.850
dual creation is very intermittent.

10:34.870 --> 10:39.820
It would be a very hard problem to recreate most of the time this is never gonna happen and when it

10:39.820 --> 10:44.410
does happen it's not going to be obvious you're not going to know why counts are off you're not going

10:44.410 --> 10:46.360
to know why you have two connections.

10:46.690 --> 10:52.530
It's just gonna be very hard to debug so only one client should ever have one.

10:52.530 --> 10:58.440
It's one instance of the singleton all the other clients may refer to another Singleton and that's gonna

10:58.440 --> 11:00.030
be really tough to approach.

11:00.210 --> 11:05.220
So in the next lecture I'm going to show you how you can at threat safety to this lazy initialization

11:05.220 --> 11:05.890
approach.

11:06.090 --> 11:10.560
Each subsequent lecture is going to improve upon the previous where eventually we get to the optimal

11:10.560 --> 11:13.750
solution which is the bill Pugh solution.

11:13.770 --> 11:14.190
Thank you.
