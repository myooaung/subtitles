WEBVTT

00:05.090 --> 00:09.630
Hello and welcome and this lecture I want to provide a solution to our previous challenge which was

00:09.630 --> 00:15.740
using the builder design pattern to construct vegetarian and non vegetarian meals spring up until today

00:16.280 --> 00:24.330
we're going to create a project named builder solution and that will just be a solution to this example

00:24.340 --> 00:26.240
as mentioned.

00:26.500 --> 00:29.800
So let's go ahead and do that.

00:30.940 --> 00:32.380
Builder solution

00:36.740 --> 00:42.200
first thing I want to do is create our hierarchy of items before you implement the builder pattern.

00:42.230 --> 00:45.230
So my create interfaces for item in packing.

00:45.650 --> 00:49.200
The first one is interface item.

00:49.610 --> 00:55.400
And this is going to implement three methods or contain three methods for implementation.

00:55.820 --> 01:04.070
Getting the name of an item and returning a string returning a packing object which is the packing interface.

01:04.370 --> 01:09.280
Because remember there's different packing for drinks versus the burgers.

01:09.280 --> 01:11.930
And then also returning a price or implementing the price

01:15.530 --> 01:22.770
classes to implement these item interface include both the burgers.

01:22.830 --> 01:25.740
So let's go on now that this is gonna be an abstract class.

01:26.460 --> 01:29.220
Let's say abstract class Burger

01:31.950 --> 01:33.440
implements item.

01:37.300 --> 01:44.020
And that should be that should be upper case class names should be upper case.

01:44.100 --> 01:45.360
So implements item

01:49.240 --> 01:58.780
this will need to have a couple overridden methods for both returning a packing object and this is just

01:58.780 --> 02:01.970
good to return a new wrapper once we create that credit class.

02:02.090 --> 02:09.580
So gonna say return new wrapper because burgers are packed and wrappers and again it'll be ready until

02:09.580 --> 02:14.880
we create these classes our next overrun method is gonna be.

02:14.890 --> 02:17.710
Actually this is gonna be an abstract.

02:17.950 --> 02:23.980
We're not going to override it because we want our actual burger classes to implement them.

02:24.130 --> 02:30.410
So this will be abstract flow Price and leave that as that.

02:31.150 --> 02:36.850
And the name method as well will need to be overridden somewhere.

02:37.220 --> 02:43.310
We won't put it in the abstract class though because we are going to force all the objects to implement

02:43.310 --> 02:43.910
it.

02:44.030 --> 02:48.620
We're not going to create the concrete classes for extending burger.

02:48.620 --> 02:53.370
So this will be our veggie burger.

02:53.480 --> 03:02.020
So we'll say veggie burger extends burger and this will override the price.

03:03.480 --> 03:13.380
We're gonna say that our price for a burger is going to just return a flow twenty five point.

03:14.150 --> 03:15.350
Again the prices are arbitrary.

03:15.350 --> 03:17.550
They don't even have to be meaningful.

03:17.810 --> 03:19.490
You can modify this as much as you want.

03:20.960 --> 03:33.410
We're demonstrating the builder the other over in method is going to be the string and this is just

03:33.410 --> 03:37.460
gonna return string literal veggie burger

03:40.740 --> 03:43.250
and that's it for our veggie burger.

03:43.250 --> 03:45.590
We then need to implement our chicken burger

03:50.780 --> 03:55.670
chicken burger.

03:59.000 --> 04:06.290
And this will have specific prices again for name and price so I'll just copy and paste that in except

04:06.290 --> 04:09.890
this one will return I don't know fifty point five

04:13.760 --> 04:18.860
specifies laterals and return

04:21.710 --> 04:27.470
chicken burger class is getting kind of big but we'll stay with it for now.

04:27.500 --> 04:32.360
We can separate in the files later we have to create our other abstract class representing a cold drink

04:33.020 --> 04:35.680
that implements the item interface.

04:35.970 --> 04:45.260
So say cold drink implements item and this is gonna be an override for our packaging we can actually

04:46.190 --> 04:49.220
go back up to here copy this

04:54.830 --> 05:00.510
and then we need a concrete class or a base class to implement holder and we'll just create two concrete

05:00.510 --> 05:12.600
classes or some classes I should say of cold drink one named Pepsi and one named Coke stands cold drink

05:14.870 --> 05:17.850
and that's will have over add methods for price a name as well

05:21.900 --> 05:26.910
for the price of the Pepsi will just say thirty five.

05:28.610 --> 05:32.000
Well maybe we should have meaningful prices I guess.

05:32.000 --> 05:39.010
All right let's say the burger veggie burger is gonna cost 350 and let's say the chicken burger is going

05:39.010 --> 05:40.000
to cost 450

05:43.220 --> 05:49.090
and then let's say the cold drink the Pepsi is gonna be a dollar fifty

05:52.160 --> 05:53.930
and the name will be Pepsi

05:58.880 --> 06:00.500
and we also need a Coke class

06:08.150 --> 06:13.450
Coke and that will be let's say that's dollars seventy five.

06:13.460 --> 06:16.800
I don't know why but it will just to make it look different.

06:17.150 --> 06:18.900
And Coke.

06:19.040 --> 06:22.960
All right so almost done with our items we stopped them from the packing interface.

06:23.030 --> 06:27.490
Well this implements all of our burgers and all of our drinks.

06:27.590 --> 06:33.480
We still have to implement packing should we keep it in the same class or is it gonna be confusing to

06:33.480 --> 06:35.710
everyone.

06:37.120 --> 06:41.130
Well this is not demonstrating the builder so I will keep it in the same class.

06:41.470 --> 06:48.900
And what we need to do now is first create our item in our interface packing.

06:48.920 --> 06:52.730
So here is a interface packing.

06:52.970 --> 06:58.770
And this is just going to be a public string pack method.

06:58.790 --> 07:01.940
Now we need implement classes that implement that interface.

07:02.250 --> 07:05.810
We need wrapper and bottle classes.

07:07.660 --> 07:09.020
So class wrapper

07:12.440 --> 07:16.970
implements packing.

07:16.970 --> 07:18.440
This will just override

07:22.100 --> 07:23.390
the pack method.

07:23.690 --> 07:25.340
Public string pack

07:28.210 --> 07:31.850
return wrapper.

07:32.150 --> 07:33.630
That's it.

07:33.710 --> 07:43.580
And when we need one more class for our bottle only in this one bottle.

07:43.580 --> 07:51.560
And when we pack that we're just gonna say at this point it'd be a good time to build and compile.

07:51.550 --> 07:54.400
You should always work in steps and constantly build and test.

07:54.650 --> 07:56.000
See if we have any mistakes here.

07:58.000 --> 08:00.850
And wrappers already defined so let's see.

08:00.850 --> 08:04.580
We can't use that wrapper to delete that.

08:04.640 --> 08:09.570
Let's see it did an automatic import the automatic import additive wrapper.

08:09.570 --> 08:10.700
So there we go.

08:10.710 --> 08:14.200
Now we can actually start implementing the builder.

08:14.280 --> 08:17.820
The first thing I want to do with implementing the builder is we want to create a middle class which

08:17.820 --> 08:20.490
represents the product right.

08:20.490 --> 08:27.440
So let's create the product first will say new Java class and we'll say just say meal.

08:27.450 --> 08:30.030
And this is going to represent the product.

08:30.030 --> 08:34.980
Remember that the product classes are gonna have a list inside of them that will be added to the list

08:34.980 --> 08:38.100
that we're gonna have to hear our actual objects their item object.

08:38.110 --> 08:44.100
So we're gonna just say private list item and that's going to represent our items

08:47.990 --> 08:51.040
we want to make sure this class is in the right package.

08:52.970 --> 08:57.140
So there we go and list should be auto imported.

08:57.250 --> 08:57.560
Okay.

08:58.460 --> 09:01.820
So our constructor is just gonna instantiate the list

09:08.960 --> 09:13.070
new array list will use and that contains

09:16.820 --> 09:22.910
we need to add item method or an add at that method to add to the list.

09:23.970 --> 09:24.860
Just takes an item

09:28.000 --> 09:34.010
and we just say items to add item we could say with the last time we use the linked list.

09:34.010 --> 09:37.730
So this is good we want to do add last.

09:37.850 --> 09:42.950
We also want to add a gate cost and a show items method.

09:43.940 --> 09:47.180
So it's a public flow get cost.

09:47.180 --> 09:54.790
This is gonna be a total cost of all the items we'll just go through the items array and then return

09:54.790 --> 09:55.650
them.

09:55.910 --> 10:05.270
Pretty basic something like this local variable go through the items array add to the local variable

10:05.420 --> 10:06.830
return the cost.

10:07.130 --> 10:11.870
We're also going to have a show items which is going to show all the items in the array and that will

10:11.870 --> 10:21.510
be good for testing purposes to make sure everything is built correctly I'm going to copy we go through

10:21.510 --> 10:27.870
the items array so items and print out each item name each packing we can say item dot packing to get

10:27.870 --> 10:32.250
our packing object called pack on it and then our price.

10:32.250 --> 10:32.880
Pretty straightforward.

10:32.880 --> 10:36.260
This is our product this is the ultimate goal of what we're trying to build.

10:36.450 --> 10:41.590
The next thing we need to do is we need to create an interface for the abstract builder.

10:41.730 --> 10:52.780
So here I want to say new class and I want to say Neil builder interface.

10:54.300 --> 10:58.520
And inside here we'll just make this an interface.

10:58.800 --> 11:06.250
Sure I can do that quicker but the interface meal builder we're going to have our build Burger in here.

11:06.870 --> 11:07.770
Our bill drink

11:12.060 --> 11:18.480
and our retrieval the meal our retrieval the product.

11:18.480 --> 11:24.240
We then need to implement our concrete builders our veggie meal builder and our non veg meal builder

11:24.460 --> 11:35.440
and we'll put that in the same class so veg meal builder is gonna implement our meal builder.

11:35.470 --> 11:39.780
And remember that the concrete classes need to have an instance of the product.

11:39.780 --> 11:45.720
So while it's a private meal veg meal we can instantiate it at lunchtime low time.

11:45.780 --> 11:54.900
A new meal and then we're going to override the build burger and the bill drink and the get meal and

11:54.900 --> 11:56.060
all this is gonna do.

11:56.250 --> 12:01.160
Each one of these I'm gonna call the product to add to the list

12:04.390 --> 12:06.040
so we're gonna do something like this

12:09.000 --> 12:14.230
build burger is going to add to the product by calling the add item method and it's gonna add a new

12:14.230 --> 12:22.510
veg Burger which is in the item list and this is going to add a new Coke because our veg vegetarian

12:22.510 --> 12:28.460
meal is gonna be a veggie burger and a coke and then the last thing we need to do is we need to return

12:28.460 --> 12:30.170
our product.

12:30.290 --> 12:40.430
So we're going to say public meal get meal and we're just going to return our vegetable and that's our

12:40.430 --> 12:42.100
first concrete builder.

12:42.150 --> 12:45.770
The second concrete builder we've got to create is for our non veg meal.

12:47.060 --> 12:57.480
So here this is gonna say non veg meal builder implements meal builder interface.

12:58.670 --> 13:11.210
Again we're gonna have an instance of our meal our product non veg meal equals new veal.

13:11.210 --> 13:14.500
We're gonna override our methods for building the bird or building a drink.

13:14.530 --> 13:18.640
It's gonna do a little bit differently though it's not gonna add a veggie burger or Coke.

13:19.580 --> 13:22.830
It's going to actually add a chicken burger and a Pepsi.

13:23.150 --> 13:25.620
So it's this is the assembly of parts.

13:25.880 --> 13:28.110
It's building a meal differently.

13:28.190 --> 13:37.430
We then need to implement our get meal method that returns the product and that will return our product

13:37.490 --> 13:39.310
pretty straightforward forward.

13:39.740 --> 13:41.490
So return on veg meal.

13:41.790 --> 13:43.970
Our member verbal.

13:43.970 --> 13:46.900
We also need to create our director.

13:46.970 --> 13:56.030
We'll put that in a separate class say new director class and I should be using this for interfaces

13:56.030 --> 13:57.290
and just lazy.

13:57.320 --> 13:59.380
The director is a class so we can keep it that way.

14:00.440 --> 14:05.300
And I like the default axis in this case we need it.

14:05.300 --> 14:10.220
The director needs to have a reference to the meal builder so we need to say meal builder interface

14:10.870 --> 14:16.190
and we'll just say my builder and then the steps that we need to implement are gonna be in a construct

14:16.190 --> 14:16.610
method.

14:16.640 --> 14:19.390
So say public void construct.

14:19.390 --> 14:24.360
And that takes a meal builder interface.

14:24.360 --> 14:25.990
And that will just be builder.

14:27.440 --> 14:31.790
And then here are steps one of the steps that we have to to do we have to build the burger we have to

14:31.790 --> 14:39.380
build the drink first we have to set the instance the member variable to what's past in remember what's

14:39.380 --> 14:42.050
going to be passed then is a concrete builder.

14:42.050 --> 14:53.300
And so we can call methods on the concrete builder by just saying build burger and build drink in our

14:53.300 --> 14:54.910
last step is creating our client.

14:54.920 --> 14:58.850
That demonstrates that so we can build the right products.

14:58.850 --> 15:01.730
So let's go out and create our new client.

15:02.480 --> 15:04.960
Call this client.

15:05.090 --> 15:07.740
This is going to demonstrate the builder pattern.

15:08.180 --> 15:11.720
We want to have a public static void method

15:14.320 --> 15:20.410
Main and we're just going to print out our meal pattern demo and then we're going to create a couple

15:20.920 --> 15:25.150
new products.

15:25.150 --> 15:28.620
The first thing we should do those we should create our director because that's what we need to you

15:28.780 --> 15:30.690
to use to construct our meal.

15:30.760 --> 15:31.360
So we'll just say.

15:31.360 --> 15:43.570
Director Director equals new director will then create concrete builders using the meal builder interface.

15:43.570 --> 15:46.590
The first one will be a veg meal builder.

15:47.180 --> 15:51.980
And that will be create a new veg meal builder.

15:52.060 --> 16:01.840
The other one will be a non-event meal non vegetarian builder which will create a non vegetarian meal.

16:02.440 --> 16:05.510
So this will be new non veg Mumbai.

16:06.550 --> 16:10.520
We then need to construct both of these the first we'll construct the vegetarian meal.

16:10.630 --> 16:12.770
So we'll say director dog construct.

16:12.790 --> 16:17.220
Paskin our concrete builder which is our veg team meal builder.

16:17.620 --> 16:20.020
We then want to get the product.

16:20.260 --> 16:27.910
So we'll create another meal that represents our vegetarian meal and we'll say veg meal builder get

16:27.910 --> 16:36.220
meal then we can actually display some output which tested and we can show the items and we can print

16:36.220 --> 16:45.690
out the total cost so we can just call those methods appropriately.

16:45.700 --> 16:45.910
All right.

16:45.910 --> 16:50.860
We can say print out the veg meal we're not all the items print out the total cost by just using the

16:50.860 --> 16:54.030
vegetable instance and column methods on it.

16:54.400 --> 17:06.420
We need to do the same for making the non veg meal so here we can just say making veg meal vegetarian

17:06.420 --> 17:13.940
meal and then below this will say making non vegetarian non veggie meal.

17:14.090 --> 17:15.790
And so we use the director again.

17:15.930 --> 17:25.560
You say director construct this time we pass in our non Vegemite builder we get our products by calling

17:25.570 --> 17:33.120
it by creating another instance of meal and just saying non veg meal equals non veggie meal builder

17:33.400 --> 17:43.490
that get meal and then we'll display information and get by using that instance to call items in price

17:46.040 --> 17:47.990
something like that.

17:48.020 --> 17:52.250
So now we should be able to build and run and see what the output is to see if our builder pattern was

17:52.250 --> 17:55.530
used correctly so we'll build.

17:55.530 --> 17:56.910
OK.

17:56.940 --> 18:06.130
And now we run run our client and you'll see that we built two meals we built a vegetarian meal which

18:06.130 --> 18:14.310
included a veggie burger a wrapper for packing it was 3 3 5 350 really and then we created it also contained

18:14.310 --> 18:17.790
a Coke which the packing was a wrapper so that's not right.

18:17.800 --> 18:19.160
We made a mistake there.

18:19.240 --> 18:20.460
The price was dollars seventy five.

18:20.460 --> 18:22.200
The packing should be a bottle.

18:22.300 --> 18:23.380
We made that mistake in both.

18:23.380 --> 18:25.660
So let's see where we were wrong here.

18:25.660 --> 18:26.980
It must be we constructed

18:29.470 --> 18:39.860
the wrappers and so that has to be in the items I believe seer said a new wrapper for cold drink.

18:39.860 --> 18:40.670
That's not right.

18:40.670 --> 18:42.500
We need to say a new bottle.

18:44.510 --> 18:46.370
And we need to do the same.

18:47.070 --> 18:53.110
For the one that would be good because that's in the after class.

18:53.330 --> 19:02.990
So that should fix that problem let's try again to build and run and we should now see the difference.

19:03.010 --> 19:03.890
Okay so that looks right.

19:03.900 --> 19:10.960
We're actually building the right packing for the drinks and that's the builder pattern in a nutshell.

19:10.960 --> 19:12.590
We covered a lot.

19:12.610 --> 19:14.600
Pay attention to the participants.

19:14.790 --> 19:21.000
Might we first create it all over items which was quite the class hierarchy burgers drinks and all that

19:21.010 --> 19:23.050
and wrappers.

19:23.120 --> 19:27.560
We then created our product which was our meal that we wanted to build.

19:27.620 --> 19:34.340
Contains a list and some nice helper methods of getting the total cost in the show items.

19:34.400 --> 19:40.770
We then create our builder interface for building the burger and the drink implemented some builders

19:40.770 --> 19:42.620
for vegetarian non vegetarian.

19:42.620 --> 19:47.840
Lastly we created our director which included the steps and then our client that demonstrated the builder

19:47.840 --> 19:49.430
pattern.

19:49.430 --> 19:50.940
Thanks I hope this helped.

19:51.260 --> 19:54.620
And please let me know if you have any questions in the Q and A.

19:54.920 --> 19:55.490
Thank you.
