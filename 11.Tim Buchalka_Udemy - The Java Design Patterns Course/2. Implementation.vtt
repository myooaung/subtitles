WEBVTT

00:05.510 --> 00:06.660
Hello and welcome.

00:06.680 --> 00:11.300
Let's talk about implementing the iterator first will provide an overview and then we'll go through

00:11.300 --> 00:13.040
an example.

00:13.080 --> 00:15.560
Here is the class diagram for the iterator.

00:15.630 --> 00:19.470
You'll notice there's the aggregate object the iterator which will be an interface and then we have

00:19.470 --> 00:21.910
concrete iterator and concrete aggregates.

00:22.170 --> 00:28.410
The cohesion here is separated between the aggregate and the iterator Klein will use both the aggregate

00:28.410 --> 00:33.990
is really going to be responsible for creating and that will that create Interior will turn the correct

00:34.020 --> 00:41.020
concrete iterator so the responsibilities of each object the iterator is going to define an interface

00:41.020 --> 00:42.550
for accessing traversing elements.

00:42.910 --> 00:47.200
So just like in collections it will have like a has Next on NEXT.

00:47.270 --> 00:50.040
Know are there any has next will be Are there any left.

00:50.050 --> 00:55.770
You know first reverse whatever it is the concrete iterator implements the iterator interface keeps

00:55.780 --> 01:01.870
track of the current position in the traversal of the aggregate the aggregate defines an interface for

01:01.870 --> 01:03.490
creating an iterator object.

01:03.520 --> 01:08.480
Remember the aggregate is a collection of objects or collection of data that really represents a collect

01:09.370 --> 01:12.460
collection or list or an array list or whatever it is.

01:12.460 --> 01:18.780
So the aggregate defines that interface for creation the concrete aggregate is going to implement the

01:18.780 --> 01:26.160
iterator creation interface to turn an instance of the proper concrete iterator a concrete iterator

01:26.160 --> 01:31.780
keeps track of the current object in the aggregate and can compute the succeeding object in the traversal.

01:31.860 --> 01:39.150
Really the next implementation consequences the implementation supports variations in the traversal

01:39.150 --> 01:47.130
of an aggregate and may traverse the parse tree in order or preorder it arrays make it easy to change

01:47.130 --> 01:51.900
the terminal algorithm you can just replace the iterator instance with a different one and you can also

01:51.900 --> 01:58.510
define iterator subclasses to support new traversal as more than one traversal can be pending on an

01:58.510 --> 02:04.330
aggregate some of the stuff we already mentioned parallel reversals going back and forth the iterator

02:04.330 --> 02:09.130
basically keeps track of its own traversal state and you can have more than one traversal in progress

02:09.550 --> 02:11.010
at any given time.

02:11.250 --> 02:15.850
Now that we have a high level overview of the different objects and the responsibilities let's take

02:15.850 --> 02:18.090
a look at an example in intelligent

02:22.300 --> 02:26.990
All right we're gonna bring up the idea the name of this project just going to going to be iterator

02:26.990 --> 02:32.990
example this example that we're gonna go through is going to utilize notifications it's gonna be like

02:32.990 --> 02:42.800
a notification type of app I'll name it iterate for example just like that.

02:43.630 --> 02:47.590
All right as I mentioned this is gonna be a notification type of avocation.

02:47.810 --> 02:52.890
We're gonna create a notification bar that displays all the notifications and it's gonna be held in

02:52.890 --> 02:58.690
a notification collection so we can provide a collection of notifications to the client and let them

02:58.690 --> 03:03.140
write the logics traverse through the notifications and decide whether to process them.

03:03.220 --> 03:08.020
This solution has lots of issues such as the client has to come up with the logic for traversal.

03:08.020 --> 03:10.800
We can not ensure that the client's logic is correct.

03:11.170 --> 03:14.880
If the number of clients grow that will become very hard to maintain.

03:15.130 --> 03:20.020
So we're going to use the iterator pattern and provide an iteration so that we don't have these issues

03:20.500 --> 03:26.420
with what I just mentioned we don't want to have the client write the traversal logic and that's why

03:26.420 --> 03:30.500
the iterator pattern is gonna be so useful it's going to provide an iteration.

03:30.670 --> 03:35.300
So the notification collection that we write is going to provide an iterator to iterate over its elements

03:35.300 --> 03:40.100
without exposing how it's implemented how it implemented the collection and for example in this case

03:40.100 --> 03:45.190
we're going to implement as an array it's not going to know how the clients not gonna know how it's

03:45.190 --> 03:45.930
implemented.

03:45.970 --> 03:47.940
They're just going to use a notification bar.

03:48.160 --> 03:52.070
The client's only going to be able to access listen locations through the iterator.

03:52.480 --> 03:58.330
So the first thing we need to do is we need to define the contract for our collection and iterator interfaces.

03:58.450 --> 04:01.890
So we're gonna create a data class to store the notifications.

04:02.170 --> 04:10.990
I'm going to say new Java class and this is gonna be called notification.

04:11.200 --> 04:16.080
This is going to have a string for notification.

04:16.870 --> 04:22.680
And this is going to store notification messages.

04:23.110 --> 04:26.230
The constructor is just going set up that member variable

04:29.450 --> 04:37.970
hopes.

04:39.580 --> 04:46.990
So we're just going to say this dot notification notification and we're also gonna have a get method.

04:46.990 --> 04:49.210
Public string get notification

04:51.790 --> 04:54.760
and this will return notification.

04:54.970 --> 04:56.770
Pretty straightforward.

04:56.830 --> 04:57.960
We want to create it here.

04:58.090 --> 04:59.370
The aggregate interface.

04:59.380 --> 05:02.230
Remember this is defining the interface for creating the iterator object.

05:02.860 --> 05:11.080
So we're new in this is gonna be called a collection and we're gonna say it's an interface.

05:11.080 --> 05:14.630
And all this is gonna have in it is the create iterator method.

05:14.650 --> 05:24.170
So we're gonna say public iterator create iterator and we're going to define that iterator class.

05:24.640 --> 05:27.260
We also have to create the iterator interface.

05:27.540 --> 05:34.390
So you're going to see new Java class iterator and this is going to be an interface.

05:34.450 --> 05:40.000
Remember this enter into this interface is going to define the interface for accessing traversing the

05:40.000 --> 05:41.470
elements.

05:41.470 --> 05:48.530
So we're going to have methods in here for has an exit so we can say boolean has next.

05:48.640 --> 06:01.430
And this is going to indicate indicates whether there are more elements to iterate over we're gonna

06:01.450 --> 06:05.930
have one that returns the next element.

06:06.040 --> 06:07.600
This is just going to return an object.

06:07.610 --> 06:09.170
We're going to say next.

06:09.520 --> 06:11.870
And that's our interface iterator.

06:12.100 --> 06:14.740
We now need to create the concrete aggregate.

06:14.740 --> 06:17.140
Remember this is going to implement the collection.

06:17.200 --> 06:20.180
This integrates implements the iterator creation interface.

06:20.290 --> 06:23.760
So it will return an instance of the proper concrete iterator.

06:23.800 --> 06:29.080
So here we're gonna say this is gonna be our class notification so we're gonna say.

06:29.080 --> 06:36.840
Class A notification collection implements collection

06:39.670 --> 06:47.960
can add some member variables for the max items to stay static final int Max items.

06:47.960 --> 06:49.730
Gonna set this to 6.

06:49.960 --> 06:51.640
We're gonna have a current number of items

06:54.220 --> 07:00.420
initialize at the 0 and then we're gonna have our array which is how the date is gonna be stored.

07:00.970 --> 07:08.110
So notification notification list our constructor

07:11.800 --> 07:19.600
is going to just initialize the array with our Max items so you can only store six notifications.

07:19.600 --> 07:28.450
This is just gonna say notification list equals new notification and we're gonna say Max items we're

07:28.450 --> 07:36.210
then going to add some items to the notification list in the in the constructor as well.

07:36.310 --> 07:44.380
I'm just some dummy dummy one's going to say add item notification 1 and we'll define the set item in

07:44.380 --> 07:50.610
a second and then we'll also do a couple more two and three

07:54.280 --> 07:57.980
will implement the add item.

07:58.150 --> 08:06.910
This is just gonna be a simple population of the array with strings.

08:06.910 --> 08:10.840
So here we're gonna say notification notification equals new notification

08:13.680 --> 08:17.070
as to your right.

08:17.070 --> 08:23.650
And remember the notification interface third class I should say pretty simple.

08:25.010 --> 08:29.350
Well we're also gonna make sure that if it's full we don't want to add anything so we're gonna say if

08:29.350 --> 08:33.580
the number of items is full just print out full pronoun an error.

08:33.580 --> 08:38.590
Otherwise we're gonna set the number of the set the right spot in the array and increment a counter

08:38.650 --> 08:43.870
which is the number of items so something like that if number of items greater than equal to Max items

08:43.900 --> 08:50.410
were full otherwise set that spot in the array and increment the current count.

08:50.500 --> 08:54.570
We also have to implement our CRE iterator.

08:54.850 --> 09:04.820
So we're gonna take public iterator create iterator and this is just going to return our notification

09:04.820 --> 09:05.300
iterator

09:10.070 --> 09:11.870
and it's going to take a notification list

09:15.700 --> 09:21.450
something like that and we still have to create that notification iterator class and so we're gonna

09:21.460 --> 09:23.080
create another concrete iterator.

09:23.110 --> 09:25.320
We created the concrete aggregate.

09:25.720 --> 09:26.060
Right.

09:26.740 --> 09:28.650
Which just implements that create iterator.

09:28.660 --> 09:33.610
Now we need to create the concrete iterator the concrete iterator implements the iterator interface

09:33.900 --> 09:39.010
keeps track of the current position in the terrorists all of the aggregate.

09:39.550 --> 09:50.380
We're gonna say new Java class and this is gonna be notification iterator and this is going to implement

09:50.740 --> 09:57.230
our iterator and hopefully clear up some of those errors in the collection class.

09:57.460 --> 10:03.870
Here we're gonna have our array notification notification list.

10:04.540 --> 10:06.880
We're going to have a current position.

10:06.910 --> 10:15.370
So this is gonna maintain maintains the current position of the iterator over the array.

10:15.370 --> 10:20.740
So we're just gonna say and position equals zero and then the constructor is gonna take an array of

10:20.740 --> 10:23.490
notification list to iterate over.

10:23.530 --> 10:30.240
So we're just gonna set up our member variable something like that.

10:30.750 --> 10:34.040
The other thing is we need to do in the concrete iterator is we need to implement those methods and

10:34.060 --> 10:36.920
interface the next and the has next.

10:36.930 --> 10:45.210
So we're gonna have a public object next and this is going to return the next item in the array at the

10:45.210 --> 10:50.870
correct position and increment the position so that's pretty straight forward.

10:50.890 --> 10:58.570
We just say notification notification equals notification list opposition the index and position increment

10:58.570 --> 11:02.950
the position and return the notification R has next.

11:03.140 --> 11:10.080
Just has to check if the position is greater than the length or if the position is null.

11:11.860 --> 11:16.210
So if the position is greater equal than the length or the notification list position is null then we

11:16.210 --> 11:17.230
won't return false.

11:17.230 --> 11:22.270
Otherwise we still have elements we can iterate over and we're going to return true.

11:22.300 --> 11:27.790
We also want to create a helper to store collections so we're gonna create a notification bar class.

11:28.090 --> 11:37.180
So we're gonna say notification bar and this is going to take collection of notifications as part of

11:37.180 --> 11:42.060
the has an object of the notification collection.

11:42.130 --> 11:48.970
So just put that in there and we're gonna have an instance of the normal case collection and we're just

11:48.970 --> 11:51.470
gonna set that up in the constructor.

11:51.470 --> 11:56.730
This seems to be a pattern right we have our notifications we have a notification bar that sets that

11:56.730 --> 11:57.540
up.

11:57.630 --> 12:04.200
We then want to just print our notifications out and this will be for testing so that we know the pattern

12:04.200 --> 12:05.000
is working.

12:05.190 --> 12:12.870
So we have print notifications we go through we use our iterator we create it right through the notification

12:12.870 --> 12:19.470
collection we create our iterator we print out a little message and then we use the iterator to traverse

12:19.950 --> 12:21.790
the collection.

12:21.790 --> 12:25.080
And again this is the helper that the client can use.

12:25.080 --> 12:31.770
Now we can create the client and the client we pretty straightforward because we have that helper class.

12:31.770 --> 12:34.500
So now we say client we had our main method

12:41.970 --> 12:47.140
and this is just going to create a notification collection.

12:47.530 --> 12:53.370
And see new notification collection doesn't take anything in the constructor.

12:53.650 --> 13:02.130
And remember the notification collection if I can find it here the notification collection will populate

13:02.130 --> 13:03.560
some items by default

13:06.770 --> 13:15.280
we then need to have our notification bar so a notification bar and b equals new notification bar.

13:15.330 --> 13:19.120
Remember this will pass in the collection or the.

13:19.220 --> 13:21.800
Yeah the notification collection.

13:21.920 --> 13:27.850
Then we can just say and beat out print notifications which will use the iterator create the iterator.

13:27.850 --> 13:28.130
All right.

13:28.130 --> 13:30.470
That was our helper.

13:30.520 --> 13:39.100
It will create the iterator in the aggregate object and then use the iterator to go through towards

13:39.110 --> 13:39.650
the collection.

13:41.090 --> 13:45.990
So looks like we have a problem and here we have an extra bracket.

13:47.150 --> 13:54.120
So let's go ahead and run this and see what it builds first and see if it runs again.

13:54.140 --> 14:02.680
No dumb mistakes and now we can run through the client and we can see our elements being traversed notification

14:02.680 --> 14:10.610
1 notification to notification 3 so we could have also you'll notice in our collection that we use an

14:10.610 --> 14:11.010
array.

14:11.030 --> 14:14.140
We could also use an array list instead of an array.

14:14.190 --> 14:18.320
There won't be any change for the client if we change this array list array to in a really an array

14:18.320 --> 14:25.730
list the notification bar code will not need to be changed either the decoupling is achieved through

14:25.730 --> 14:34.100
the user through the iterator interface so it's a nice thing or we can separate the aggregation the

14:34.100 --> 14:38.210
collection aggregate object I should say from the iterator

14:40.870 --> 14:44.410
it's a nice implementation of the iterator design pattern.

14:44.420 --> 14:44.870
Thank you.
