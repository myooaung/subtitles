WEBVTT

00:05.350 --> 00:06.730
Hello and welcome back.

00:06.730 --> 00:12.830
Let's take a look at a solution for our previous challenge which was implemented command design pattern.

00:12.910 --> 00:16.310
We're going to call this project our command solution.

00:16.330 --> 00:23.860
Remember this was a challenge for using the command panel for a stock type application buying and selling

00:23.860 --> 00:27.150
stocks taking orders and so forth.

00:29.390 --> 00:38.590
Call this this is going to be called the command solution.

00:39.410 --> 00:43.250
Our first step is going to be to create the command class.

00:43.250 --> 00:49.740
So we're gonna say new and this is the interface remember this is gonna be our order class it's gonna

00:49.760 --> 00:55.730
be an interface and it's pretty simple to create this because it always just has one method or execute

01:01.070 --> 01:07.680
the next step is to create the receiver class which will the commands will have an instance of that's

01:07.680 --> 01:11.790
why I want to create this next and then we'll use the order interface.

01:11.820 --> 01:22.500
So here we're gonna name this our stock class and this is our receiver class the receiver class is going

01:22.500 --> 01:29.430
to hard code a stock name so I'm going to have my member variables already set up just for efficiency

01:29.690 --> 01:37.560
it's almost a private String name and I'm going to say the stock is Google and I'm also gonna set up

01:37.560 --> 01:43.640
the quantity of the shares that I want to buy something to say the quantity is always equal to a thousand

01:44.670 --> 01:50.010
we could pass these in to the constructor and you could make multiple different buy and sell orders

01:50.040 --> 01:55.110
but for simplicity we're just going to hard code them we're going to implement the buy in the sell and

01:55.110 --> 02:00.630
the receiver class usually you want to implement you want implement the receiver before you implement

02:00.630 --> 02:06.000
the concrete commands because the commands are there's gonna be so many command objects for each receiver

02:06.000 --> 02:07.140
method.

02:07.140 --> 02:10.630
So here we're gonna have by.

02:11.210 --> 02:16.590
Not going to be any real plantation it's going to print out some information we're going to print out

02:16.590 --> 02:22.160
the stock name and we're gonna put out the quantity and we're just going to either say bought course

02:22.250 --> 02:25.130
or sold so something like this

02:28.870 --> 02:32.320
system that out that print line quantity

02:35.620 --> 02:46.440
and we need a plus quantity or mentioned that there but the sale is gonna be pretty much the same thing

02:46.950 --> 02:53.320
except it's gonna print out information saying you sold for the right stock.

02:54.310 --> 02:55.630
So something like this.

02:55.680 --> 02:56.530
To make sure our

03:04.940 --> 03:09.580
note that will line up good but you get the gist.

03:09.580 --> 03:13.320
And that's going to say sold versus ball.

03:13.540 --> 03:17.900
Now we can go back and we can implement our concrete command classes.

03:18.100 --> 03:21.710
This will be a by stock method or by stock class I'm sorry.

03:21.720 --> 03:30.920
And a sell stock class here will say class buy stock implements order.

03:31.270 --> 03:33.900
And remember this has to have a reference to the receiver.

03:34.030 --> 03:36.160
So we're gonna have a private stock.

03:36.160 --> 03:44.470
My stock and then in our buy stock the stock the receiver is going to be passed into the stock constructor

03:44.980 --> 03:52.720
so public buy stock will take a stock you know some stock

03:55.510 --> 04:03.280
and it will say my stock equals some stock and that our execute method is just gonna call the method

04:03.280 --> 04:07.150
on the receiver.

04:07.150 --> 04:10.540
So we're gonna say my stock that buy

04:13.780 --> 04:18.610
and the other concrete command class for selling stock is gonna be pretty much the same except you're

04:18.610 --> 04:23.000
gonna sell stock so we'll have a name.

04:23.000 --> 04:27.710
Sell stock you'll meet the order interface.

04:27.740 --> 04:32.120
We'll set up the member variable and we'll call the sell method on the receiver.

04:32.120 --> 04:36.660
Now we want to create the end vulgar and vulgar member is gonna be the broker.

04:36.800 --> 04:40.070
So we're gonna say new class broker.

04:40.430 --> 04:43.610
Remember our broker class was gonna have a list of orders.

04:43.940 --> 04:46.170
So that's gonna be a member variable.

04:46.310 --> 04:53.270
We're gonna have a private list of orders and so we'll just say this is our order list

04:57.380 --> 05:02.060
and we'll instantiate that when the class loads.

05:02.060 --> 05:10.270
So we'll say new we'll make it an array list for simplicity order.

05:10.490 --> 05:16.820
Remember we're gonna have two methods in here taken place orders take order is just going to add in

05:16.820 --> 05:17.830
order to the list.

05:17.840 --> 05:19.190
So it's gonna add a command to the list.

05:19.220 --> 05:29.960
So here we say public void take order takes an order object which is going to be a concrete command

05:30.510 --> 05:31.720
buy or sell.

05:32.000 --> 05:39.100
And all we're gonna do is say order list to add order.

05:39.440 --> 05:44.060
Then what's actually going to place the order is the place orders method that's gonna go through the

05:44.060 --> 05:49.900
list in call the execute method on the command.

05:49.910 --> 05:54.430
So here we just go through all the orders in the list that we call order not execute.

05:54.650 --> 05:58.780
And then when we're done we clear the list.

05:58.850 --> 06:06.070
Last thing we need to do is implement our client our client remember does all the ties all the associations

06:06.070 --> 06:11.230
between the between the invoker the receiver and the command.

06:11.590 --> 06:21.580
Here we can create a stock and then we can pass that stock into our commands constructors.

06:21.760 --> 06:25.210
So first we need a void Main method

06:29.830 --> 06:36.670
and we need to create our stock we'll call a Google stock even though it's hardcoded could've made it

06:36.670 --> 06:40.570
a lot more generic.

06:40.570 --> 06:48.610
And then we're gonna create our buy stock which is our buy stock order and the constructor for this

06:48.610 --> 06:57.280
command is going to take our receiver which is our Google stock and we'll also do the same for a cell

06:57.280 --> 06:59.730
stock created here.

07:00.040 --> 07:08.430
And this will be our cell stock order new cell stock and that will again take the Google stock.

07:08.680 --> 07:12.220
We then need to create our Invoker which star broker.

07:12.220 --> 07:18.550
And this is gonna be just called broker and it's not going to pass the command to the broker because

07:18.550 --> 07:21.850
we're killing them up.

07:21.850 --> 07:24.220
So here we're going to take a couple orders

07:27.010 --> 07:28.700
and I can't spell very good.

07:28.720 --> 07:30.550
Keep spelling barker on a old.

07:30.670 --> 07:37.870
Is so broker not take order in the first order is the buy stock order.

07:38.200 --> 07:40.890
And the second order will be the sell stock.

07:43.210 --> 07:46.340
So here will say sell stock order.

07:46.390 --> 07:53.820
And then when you actually want to execute their orders we're gonna say broker that place orders and

07:53.820 --> 07:56.930
we'll see if this can compile again.

07:56.940 --> 08:01.770
Notice that the client associates all the big objects for the Command pattern.

08:03.000 --> 08:11.960
And we have to make sure that we have the right stuff here and we put the order type in the type parameters

08:11.960 --> 08:12.950
not the constructor

08:17.390 --> 08:18.730
so let's run this client

08:22.030 --> 08:29.440
and you'll notice that we were able to buy and sell 1000 quantity or thousand shares of Google big thing

08:29.440 --> 08:36.250
client setting up all the associations again the receivers with the commands in the invoke is with the

08:36.250 --> 08:37.300
commands.

08:37.690 --> 08:43.090
But understand the separation here understand the decoupling and it's a very nice way of separating

08:43.570 --> 08:52.680
the request from the actual implementation of the request and the commands from the from the Invoker.

08:52.840 --> 08:53.200
Thank you.
