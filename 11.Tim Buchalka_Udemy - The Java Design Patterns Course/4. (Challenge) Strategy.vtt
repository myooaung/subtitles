WEBVTT

00:05.440 --> 00:06.740
Hello and welcome.

00:06.760 --> 00:10.300
I have another challenge for you this one is for the strategy design pattern that is going to test your

00:10.300 --> 00:12.900
understanding your knowledge of this pattern.

00:13.090 --> 00:18.370
Requirements are we're gonna create an application that performs mathematical operations using the strategy

00:18.370 --> 00:20.300
design pattern.

00:20.560 --> 00:25.900
And so we're gonna need to create a strategy interface defining an action and a concrete strategy classes

00:26.170 --> 00:33.570
implementing the strategy interface the context class is gonna use the strategy and then lastly we'll

00:33.580 --> 00:38.710
create a client that will use the context and the strategy objects to demonstrate change in context

00:38.710 --> 00:46.400
behavior based on the strategy it deploys or uses requirements to strategy interface can include just

00:46.400 --> 00:51.810
one simple method perform operation it should take two numbers as parameters.

00:51.870 --> 00:54.060
Remember these are mathematical strategies.

00:54.350 --> 00:57.800
The concrete tragedies should perform mathematical operations.

00:57.800 --> 01:01.570
One for addition one for subtraction and one for multiplication.

01:01.670 --> 01:08.480
So you gonna have three concrete strategy classes that implement this perform operation the context

01:08.480 --> 01:14.170
class will execute the correct strategy based on what the client wants the clients can either pass strategy

01:14.180 --> 01:19.060
to a method or the context can contain a rough to the strategy set in the constructor by the client

01:19.730 --> 01:24.260
you should pass it as a method because we mentioned that one of the differences between the state and

01:24.260 --> 01:30.410
strategy is usually you pass strategy by a method and this will allow the strategy to not be tied with

01:30.410 --> 01:35.030
a reference and also commit a specific task with a specific strategy object

01:37.980 --> 01:42.360
you need to create a client class that creates one or more context that depends on how you're telling

01:42.360 --> 01:49.140
the context what strategy to use if you're telling it with a reference inside of its class you'll need

01:49.140 --> 01:54.210
to create more than one because you need to set that reference to the constructor if you're not and

01:54.210 --> 01:57.840
you shouldn't be doing that you should be sending it as a parameter in a method then you only need to

01:57.840 --> 02:04.460
create one context you then want to create multiple strategies that the context will use to perform

02:04.460 --> 02:12.580
mathematical operations some sample output 10 plus five equals fifteen that's one strategy one plus

02:12.580 --> 02:19.490
one and then one minus one ten minus five equals five and ten times five pretty straightforward.

02:19.600 --> 02:26.680
So here's an example the class diagram your strategy interface the operation the different operations

02:26.680 --> 02:33.940
subtract had or multiply and then your client and your strategy or your context which should have the

02:33.940 --> 02:40.240
strategy passed in to a method let me know if you have any questions pretty straightforward I'll provide

02:40.240 --> 02:41.940
a solution in the next lecture.

02:41.950 --> 02:42.400
Thank you.
