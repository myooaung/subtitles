WEBVTT

00:05.550 --> 00:07.020
Hello and welcome back.

00:07.050 --> 00:11.790
This lecture going to provide a solution to our previous challenge which implemented the chain of responsibility

00:11.790 --> 00:16.190
pattern for like a logger in air handler.

00:16.280 --> 00:24.940
Let's create a new project we're gonna call this our chain of responsibility solution create a template.

00:24.940 --> 00:29.140
So this is gonna be a chain of responsibility

00:31.780 --> 00:32.470
solution

00:37.000 --> 00:42.120
first thing we're going to do is we're gonna create some helper classes so we're just going to create

00:42.120 --> 00:54.810
a helper class called message and this is going to have an enum for our message priority called message

00:54.810 --> 00:57.540
priority.

00:57.540 --> 01:08.280
And this is going to have normal or high and then our class for our enum class message I should say

01:08.790 --> 01:17.580
is going to have a string text that's going to have a message priority

01:22.590 --> 01:27.510
and it's going to have a default constructor that sets the message priority.

01:27.510 --> 01:28.260
And the message.

01:32.130 --> 01:46.050
So something like this is just going to say text equals message and priority equals P.

01:46.140 --> 01:52.710
Now that we ever helper classes on we're going to create the handler interface of the chain of responsibility.

01:52.740 --> 01:57.150
This is just gonna be called our receiver interface

02:01.340 --> 02:10.070
and this is gonna have our two important methods which is a boolean to process the message return a

02:10.070 --> 02:10.970
boolean.

02:11.300 --> 02:16.730
It's gonna take a message and it's gonna set the next chain

02:19.700 --> 02:23.850
and it's gonna take a receiver interface for the next chain.

02:25.520 --> 02:30.890
Then we need to also create another helper class for the first one in the chain.

02:30.890 --> 02:36.020
So we're gonna we'll come back to this interface but because the concrete classes are gonna use this

02:36.030 --> 02:38.810
let's see let's let's say new Java class.

02:38.850 --> 02:42.600
Let's name this issue Razer

02:46.000 --> 02:54.850
and this is gonna set the first one in the chain so we can just say public receiver interface set first

02:54.850 --> 02:55.360
receiver

02:58.960 --> 03:03.490
and then we're going to have our constructor for this set that member variable

03:11.310 --> 03:19.830
we're just gonna say this dot set first receival equals first receiver and then our res message is gonna

03:19.840 --> 03:21.510
do the setting of the first receiver for you.

03:22.450 --> 03:25.120
So you can say public void rays

03:27.730 --> 03:35.800
where his message taking a message and if that first receiver

03:40.240 --> 03:44.770
is not equal the null then we're gonna process the message.

03:44.770 --> 03:53.850
So we're gonna say set first receiver dot process message

04:03.220 --> 04:09.490
and we're going to pass on the message and that will be our nice little helper class.

04:09.490 --> 04:14.960
Now we can create the concrete classes and go back to our receiver interface.

04:15.250 --> 04:23.690
Here we're gonna have two classes our facts air handler and our email air handler.

04:23.830 --> 04:27.360
So this is gonna implement our receiver.

04:27.430 --> 04:29.970
Remember we have to have a reference to the next the chain.

04:30.610 --> 04:33.370
So we're going to have a private receiver interface.

04:33.490 --> 04:43.270
Next receiver and then we're gonna have a method over add method for setting the next chain set next

04:43.270 --> 04:48.820
receiver are actually set next chain.

04:49.340 --> 04:51.730
And this is going to take a receiver interface.

04:51.880 --> 05:02.800
Next receiver and all this is gonna do is it's going to set our next receiver this next receiver to

05:02.800 --> 05:10.000
our next receiver and then the process message is gonna be really doing the bulk of the work it needs

05:10.000 --> 05:12.680
to check if the message contains text for faxed.

05:12.880 --> 05:19.770
And if it does then it's going to display some output saying it handled the message otherwise if it

05:19.770 --> 05:22.950
doesn't contain facts it's gonna send it to the next one in the chain.

05:23.160 --> 05:27.700
Because remember we don't want to go to the next chain if we've already processed it.

05:28.110 --> 05:30.840
So we're gonna need to implement our boolean process message

05:34.260 --> 05:41.340
right and we're gonna say if our message not text contains facts.

05:41.460 --> 05:42.900
Print out the message priority

05:46.140 --> 05:47.580
and the actual text

05:51.360 --> 05:53.610
to make some corrections.

05:53.740 --> 05:59.560
Else if the next receiver is equal to null not equal the null I should say.

05:59.560 --> 06:07.120
Then you want to process the message to the next receiver which would be the email chain.

06:07.120 --> 06:10.650
Now we need to implement the concrete handler for the email.

06:10.830 --> 06:18.190
And again it can be very similar to the fax one that's gonna have the next reference the next receiver.

06:18.190 --> 06:24.490
It's gonna be able to set the next chain the client will do that and it's going to check whether or

06:24.490 --> 06:27.280
not the message contains text and so forth.

06:27.400 --> 06:30.230
So we're gonna say receiver interface.

06:30.340 --> 06:31.510
Couple corrections

06:35.810 --> 06:45.060
to some syntax issues from my previous implementation of this I use different names I didn't like.

06:46.060 --> 06:53.760
So text again you see it's pretty much the same implementation except it does it looks for a different

06:53.760 --> 06:55.620
message in order to handle it

06:58.410 --> 07:08.530
and it can't actually process it can call process next receiver but there is nothing next in the chain.

07:08.760 --> 07:15.570
So now we need to implement our client let's go ahead and seek new client

07:18.300 --> 07:19.950
and this will have a main method only

07:23.280 --> 07:28.260
and there's some implementation taken out of this because we don't have to do a lot of the stuff we

07:28.260 --> 07:34.020
did in the previous example where we we can just call a simple handler for raising an issue and that

07:34.020 --> 07:36.180
will worry about creating the right objects.

07:36.870 --> 07:41.850
So we're just going to print out a message first saying this is the chain of responsibility

07:44.600 --> 07:51.960
and then we're going to make sure we make the chain we're going gonna be making the chain and what we

07:51.960 --> 07:59.370
want to do here is we want to make sure that it's facts followed by email right.

07:59.370 --> 08:01.440
So fax then email

08:04.700 --> 08:09.160
so we're gonna create a receiver interface and we're gonna say that's a fax handler.

08:09.190 --> 08:16.100
We're also going to create an email handler and then we're going to set specify the end of the chain

08:16.490 --> 08:22.670
because the first one of the chain will be set through the issue Razr.

08:23.060 --> 08:28.960
So we'll say first set the end of the chain and this will just be email handler.

08:29.060 --> 08:32.570
Well we're gonna create the e-mail handler first say new email handler

08:35.440 --> 08:41.210
and then remember fax handler is before email.

08:41.360 --> 08:47.550
So we need to say fax handler equals new fax handler facts or a handler.

08:47.550 --> 08:52.760
Then we're gonna set the next one for the fax handler to email under so we have to set the next chain

08:53.570 --> 08:55.940
and that will be our email handler.

08:55.940 --> 08:56.240
We had.

08:56.300 --> 08:59.570
That's why we created above first because we needed to set it.

08:59.570 --> 09:09.740
And then we're gonna basically say our starting point is gonna be our Razr will raise issues and set

09:09.740 --> 09:13.520
the first handler.

09:13.520 --> 09:15.230
So it will say issue razor

09:18.490 --> 09:27.070
razor equals new issue razor and we're gonna say fax him that's gonna be the first one in the chain.

09:27.140 --> 09:29.780
And now we need to create just some messages.

09:30.680 --> 09:39.680
So we're gonna create a bunch of messages with different priorities something like that create for messages

09:40.010 --> 09:44.480
some that contain faxes and contain email and those will be passed appropriately.

09:44.480 --> 09:49.000
So now we need to raise a message for each one of these messages so we can just say raise or not raise

09:49.010 --> 09:51.380
message on each one of these

09:54.630 --> 10:01.950
so we'll do something like this raise or dot raise message and they all start with a lowercase

10:07.620 --> 10:08.340
OK.

10:08.380 --> 10:14.870
So now we can try to compile this and see that it won't correct one of the chain is actually processing

10:14.870 --> 10:21.640
the messages we'll say build we have a small

10:24.290 --> 10:31.470
fix in our process message needs to have a lowercase and lowercase boolean

10:36.350 --> 10:37.930
copy and paste there is always good use.

10:37.990 --> 10:46.490
Now let's try to run this in if we try to run the client we'll see that different messages are processed

10:46.490 --> 10:52.550
by different objects in the chain fax our handler is the first one in the chain and it will handle facts

10:52.550 --> 10:58.000
errors and it does next to messages or e-mail errors 300 by email error handlers in the chain.

10:58.000 --> 10:59.300
And those are handled.

10:59.300 --> 11:01.340
And then the last one is fax error handler.

11:01.340 --> 11:06.200
So this is a solution to your challenge if you have any questions the Q and A please let me know.

11:06.500 --> 11:08.210
Otherwise onto our next design pattern.

11:08.240 --> 11:08.690
Thank you.
