WEBVTT

00:05.510 --> 00:06.640
Hello and welcome.

00:06.890 --> 00:10.270
In this lecture we're going to provide a solution to our template method.

00:10.280 --> 00:14.380
Challenge mainly about processing flow of orders.

00:14.490 --> 00:23.520
So we're gonna create a new project we're gonna name this template method solution Template Method solution

00:26.900 --> 00:32.120
our first step is gonna be to create the abstract class where this is the one that contains the template

00:32.120 --> 00:45.920
method we're gonna name this order process template and this is gonna be abstract and we're going to

00:46.010 --> 00:51.350
first define some of the abstract methods that the concrete templates have to implement.

00:51.350 --> 00:54.990
We're also gonna have a member variable to determine whether or not we want gift wrapping.

00:55.040 --> 00:59.980
So we're gonna say public boolean is gift.

01:00.050 --> 01:05.750
I'll be our first one and then we'll have some abstract methods and these will be some of the steps

01:05.780 --> 01:06.570
in the algorithm.

01:06.590 --> 01:10.270
So we'll see a public abstract void.

01:10.280 --> 01:11.480
Do select.

01:11.720 --> 01:18.470
This is gonna select whether we're processing the order online or in a store and then we're also going

01:18.470 --> 01:22.710
to have one for due payment.

01:24.680 --> 01:31.350
And this will determine how we pay either through a credit card or other means.

01:31.400 --> 01:46.020
So do payment and then we'll have a final public final void for our gift wrap because this is gonna

01:46.040 --> 01:47.910
be common to both.

01:47.990 --> 01:52.550
Because you can gift wrap either if it's when processing either if it's online or not online.

01:52.550 --> 02:00.780
This is just gonna do a try catch if the gift wrap was successful or not successful so we'll just put

02:02.280 --> 02:03.800
gift wrap was successful.

02:03.870 --> 02:11.740
That's by our best bet it's just to say we chose gift wrapped and it was successful to them like.

02:11.760 --> 02:16.640
Like that again I'm putting information to know that it was invoked.

02:16.740 --> 02:26.460
We're also going to have an abstract do delivery and this will be called public abstract void to delivery

02:30.090 --> 02:34.020
and this will be implemented by the subclasses.

02:34.020 --> 02:38.160
Now we wanted to find the template method itself and remember.

02:38.160 --> 02:42.750
So this is the actual Template Method.

02:43.140 --> 02:45.660
This will be a public and we want to make sure it's fine all right.

02:45.660 --> 02:49.440
The template method should always be final because you don't want the subclasses messing around with

02:49.440 --> 02:51.120
this has a specific order.

02:51.120 --> 02:58.080
So a public final void process order and the process order can actually set whether or not we want gift

02:58.080 --> 02:58.770
wrapping.

02:58.770 --> 03:02.670
Many ways to implement this this is just one concerning the gift wrapping.

03:02.670 --> 03:08.720
So we can say is gift and then what this is gonna do is it's going to contain the steps in the algorithm.

03:08.730 --> 03:13.380
So it's first going to select that it's going to do the payment right and then it's gonna check the

03:13.380 --> 03:20.730
boolean variable and if it's gift wrapping it will then do gift wrap otherwise regardless it's always

03:20.730 --> 03:22.020
gonna do a delivery at the end.

03:22.260 --> 03:26.510
So there's four steps in this template method.

03:26.520 --> 03:28.010
OK.

03:28.240 --> 03:32.850
The next thing we need to do is we need to implement these concrete classes for ordering.

03:32.850 --> 03:34.710
So we're gonna create one for our net order.

03:34.740 --> 03:37.860
So this is gonna be called Class net order.

03:37.860 --> 03:41.490
And this is going to extend our order processing template.

03:41.820 --> 03:46.740
We're gonna need to override methods for due select do payment and do delivery.

03:46.740 --> 03:54.760
And when we select it it's just going to say the item was added to a shopping cart and that we're automatically

03:55.210 --> 04:01.210
going to get the gift wrap presence preference sorry and we're gonna get the delivery address because

04:01.210 --> 04:01.870
of its online.

04:01.870 --> 04:08.860
We know that we're gonna need to do these and we're also going to override due payment due payment is

04:08.860 --> 04:15.940
going to go through some kind of online payment not baking or paypal so we then just output hard hardcoded

04:15.940 --> 04:22.010
data saying that the last thing we need to implement for the overridden is the do delivery and this

04:22.010 --> 04:30.680
is just kind of display that we ship the item through the post office to a delivery address want to

04:30.680 --> 04:40.010
fix or double call our other concrete class for ordering is our store order stored or is going to do

04:40.040 --> 04:42.490
things differently because it's not online.

04:42.500 --> 04:50.420
This is gonna be called store order extends order process template.

04:50.420 --> 04:53.150
This is going to override the three methods.

04:53.150 --> 04:59.030
So when you select for a store or it's just going to say a customer chooses the item from the shelf

04:59.060 --> 05:01.600
they don't need to add anything to a shopping cart.

05:01.610 --> 05:08.170
They just go off the shelf and pick it to do payment is gonna say pay at the card counter through CAS

05:08.230 --> 05:13.830
cash or pay us point of sale.

05:14.090 --> 05:18.280
The delivery is you just going to deliver it through that you're just gonna take a home really.

05:18.400 --> 05:23.620
So you just item delivery delivered at the delivery counter.

05:23.710 --> 05:25.830
So those are our concrete classes.

05:25.960 --> 05:29.580
They implement the steps from the template method and they're different.

05:29.640 --> 05:29.830
Right.

05:29.830 --> 05:32.680
They're going to you're going to do things differently if you're processing or through the Internet

05:33.000 --> 05:35.440
or for processing in order through the store.

05:35.680 --> 05:36.750
And that's what's reflected here.

05:36.750 --> 05:38.120
The algorithm stays the same.

05:38.600 --> 05:41.020
And it's final so the subclasses can't mess with it.

05:41.020 --> 05:46.030
You're always going to first see what the type of ordering it is you're going to get the payment.

05:46.060 --> 05:48.230
You then always gonna do a gift wrap.

05:48.430 --> 05:52.150
Whether or not it's true or false and then you're gonna do a delivery.

05:52.180 --> 06:02.490
So now in create the client here we can say new job a class client and this is gonna have our important

06:02.490 --> 06:06.330
main method.

06:08.580 --> 06:14.530
And what this is gonna do is it's first going to either it's going to create the right template right

06:14.610 --> 06:18.140
either net order or a store order.

06:18.150 --> 06:19.830
So first we'll test in that order.

06:20.270 --> 06:25.720
And so all we want to do is we want to say order process template not order equals new net order.

06:25.770 --> 06:31.900
We then want to call the process order template method in the abstract class on this instance.

06:31.940 --> 06:36.340
And so through poly it's gonna call this abstract implementation and then through polymorphism is going

06:36.340 --> 06:39.630
to call the right one based on and we're also going to say we want this gift wrap.

06:39.630 --> 06:44.680
So we're gonna pass in through we're then just gonna print out a new line so that we can read what's

06:44.680 --> 06:45.880
going on here.

06:45.880 --> 06:55.930
This will be basically saying you know we changed the template so we can just say we changed the template

06:56.740 --> 06:59.950
to a store order.

07:00.690 --> 07:05.370
And so now we just gotta create a new instance of a order process template a new store order.

07:05.410 --> 07:09.610
And then again we call the process order.

07:09.730 --> 07:14.560
So we just say something like this.

07:14.560 --> 07:21.710
You say order process template store order equals new store order.

07:22.680 --> 07:30.550
And then we can just say store order thought process order and we can say true for gift wrapping.

07:30.570 --> 07:36.360
Know when you run this you'll see that different steps are going to be called depending on the instance

07:36.360 --> 07:39.360
type store not in the algorithm.

07:39.420 --> 07:47.850
So let's go ahead and build this and run it and we'll see these different algorithms different steps

07:47.850 --> 07:55.040
in the algorithms so if we look at the output we'll notice that we added When we first our first order

07:55.040 --> 07:56.240
was in that order.

07:56.300 --> 08:01.190
So we added it to the online shopping cart we got the gift wrap preference and we got the delivery address

08:01.430 --> 08:03.930
and then we paid through some kind of online payment.

08:04.070 --> 08:08.220
We wrap the gifts successfully and we ship the item to the post office.

08:08.270 --> 08:10.940
We then change the template to a store order.

08:11.210 --> 08:15.410
And in this case the store order the customer just chooses from the shelf pays at the counter through

08:15.410 --> 08:21.410
cash wraps the gift and the item is delivered to the customer at the delivery counter.

08:21.410 --> 08:23.070
They just take it home.

08:23.220 --> 08:26.040
And so this is a solution to our previous challenge.

08:26.130 --> 08:28.830
If you have any questions please let me know in the queue.

08:28.860 --> 08:29.220
Thank you.
