WEBVTT

00:05.430 --> 00:06.700
Hello and welcome.

00:06.750 --> 00:12.780
This lecture I want to provide another example of the decorator design pattern implementation.

00:12.840 --> 00:19.550
In this example we're going to write our own Java I O director decorator input output so let's go out

00:20.240 --> 00:21.500
and create a project.

00:21.500 --> 00:25.850
This is gonna be a little bit more relatable than our previous example which is really just demonstrating

00:25.850 --> 00:31.160
at a high level really simple example of a simple additional method implementation

00:33.830 --> 00:35.750
so we'll call this decorator example to

00:42.960 --> 00:48.630
so the decorator that we want and write that will add functionalities to Java input output is gonna

00:48.630 --> 00:53.940
be a decorator that converts all uppercase characters to lowercase in the input stream.

00:53.940 --> 01:00.690
So for example if I read in a string that contains either capital or lowercase the decorators convert

01:00.690 --> 01:09.150
that to all lowercase write the component the concrete components in the abstract decorators will have

01:09.150 --> 01:13.200
already been defined for us from the Java Io package.

01:13.350 --> 01:19.250
So the abstract component is the input stream class the concrete components include the file input stream

01:19.260 --> 01:25.240
in the byte array input stream then the abstract decorators for all input streams as the filter input

01:25.240 --> 01:26.710
stream class.

01:26.710 --> 01:30.430
So we're gonna just add additional functionality because remember I mentioned before that one of the

01:30.430 --> 01:35.270
best examples of the use of the decorator is in the job Io package and a lot of it's already creative

01:35.270 --> 01:40.950
force again the component the concrete component the abstract directory so if you remember from the

01:41.460 --> 01:48.790
slide from last time the illustration is we have the abstract director decorator is the filter and clustering

01:49.280 --> 01:55.370
and the abstract component is the input string so all we need to do is we need to first extend the filter

01:55.370 --> 01:58.420
input string class and override the read methods.

01:59.500 --> 02:08.950
OK so we're going to go ahead and create a new class and this is gonna be called our lower case input

02:08.950 --> 02:09.400
stream

02:12.390 --> 02:23.840
and this is going to extend the filter input stream so here we can say extends filter input string and

02:23.860 --> 02:30.130
so what we need to do is we need to implement to read methods that take a bite an array of bytes and

02:30.130 --> 02:36.100
convert each base each byte that represents a character to lowercase if it's an upper case character.

02:36.100 --> 02:41.380
So we're gonna have our constructor first which is going to

02:43.930 --> 02:54.650
take an input stream and we're just gonna call that in at a for readability add a slight space and then

02:54.650 --> 03:03.400
we'll just say super and we'll say super in our next method is gonna be the the read method.

03:03.410 --> 03:12.830
This is the one we're going to add new functionality to so public in 3D it's going to throw an IO exception

03:13.700 --> 03:14.660
it's a checked exception.

03:17.780 --> 03:25.400
And we're just going to say N C equals N not read it and we're going to return a lowercase for that

03:25.400 --> 03:26.270
character.

03:26.360 --> 03:31.880
So we're just gonna do a ternary operation here we're gonna say if c is equal to 1 I'm sorry negative

03:31.880 --> 03:42.500
1 we're then gonna say c is equal to we're just gonna return c otherwise we're going to convert the

03:42.500 --> 03:54.600
character to lowercase using the character class so to lowercase and we're gonna cast the C into a char.

03:55.150 --> 03:57.780
It's on like that.

03:58.110 --> 04:00.180
We're also gonna override the read that takes a bite.

04:00.180 --> 04:04.090
So we're gonna say public int read.

04:04.230 --> 04:05.130
That takes a by

04:07.950 --> 04:10.890
by be offset and offset

04:13.490 --> 04:14.710
and add Interlink.

04:15.480 --> 04:16.920
And this is also checked exception.

04:16.920 --> 04:22.090
So we're gonna throw Io exception.

04:22.200 --> 04:33.510
We're going to set the result equal to whatever read n so we're gonna call the B offset linked

04:38.780 --> 04:44.620
right and that's gonna call the input stream read method to actually do the reading.

04:45.240 --> 04:50.400
Then we're gonna have a for loop that goes through the offsets

04:57.270 --> 04:58.910
and we'll convert do the conversion.

05:01.570 --> 05:11.750
To here we're just say piece of I it's going to equal to to this casting byte and then the character

05:12.770 --> 05:14.740
to lowercase is the character class

05:19.290 --> 05:20.910
to lowercase that will take

05:23.600 --> 05:28.570
by cast the two which are something like that.

05:29.790 --> 05:35.650
And then we can return the result.

05:36.200 --> 05:37.740
So now we need to use the decorator.

05:37.740 --> 05:39.270
So we're gonna create a client

05:44.270 --> 05:48.820
we'll just call this client and this will have our static void main.

05:54.640 --> 05:58.360
And this decorator was particularly easy to implement because we didn't have to implement any of the

05:58.360 --> 06:05.000
concrete components the component or the abstract decorator we just added the decorator itself so we're

06:05.000 --> 06:14.480
gonna say in C in our main and we're going to try to just read something and I'm going to have to create

06:14.480 --> 06:21.140
a file as well so we'll say protesting but first we'll just read in some input

06:26.080 --> 06:32.170
so we're gonna say input stream in equals new lowercase input stream that's our decorator and we're

06:32.170 --> 06:35.110
just gonna create a file test out text.

06:35.110 --> 06:36.370
So here I'll create a file

06:39.100 --> 06:39.900
say new

06:42.640 --> 06:49.040
test text and this will just contain some stuff with capital letters

06:55.900 --> 07:00.450
something simple.

07:00.540 --> 07:05.310
Now we can go back to our client and again what you notice is that opens out file it then tries to read

07:05.310 --> 07:08.610
in the bytes of the lower case input stream.

07:08.640 --> 07:17.510
Class and prints out the bytes and lowercase so we then need to close the file and we also need to enclose

07:17.510 --> 07:22.040
this and try catch since it's frozen exception

07:27.670 --> 07:30.670
in dark clothes probably could've gone in my nose.

07:30.670 --> 07:40.970
You could go there and say put it until finally but we then can just say I want to make sure my brackets

07:40.970 --> 07:42.540
are correct.

07:42.570 --> 07:46.130
You just say catch I owe exception

07:49.100 --> 07:51.260
and we'll say it print factories

07:53.970 --> 08:00.090
and that is our client.

08:00.130 --> 08:04.160
So now let's see if we can run this thing and then we'll find the file correctly.

08:07.960 --> 08:09.160
So when we do a run

08:14.620 --> 08:15.550
couldn't find the file.

08:15.580 --> 08:17.010
So I have to make sure it's in the right path.

08:17.010 --> 08:23.490
I mean one sec I want to make my life a little bit easier instead of adding a whole new resource folder

08:23.490 --> 08:24.910
and adding a new text file.

08:25.050 --> 08:31.740
I'm just going to create a string buffer pass that is the input stream for testing purposes.

08:31.740 --> 08:38.280
So what I'll do is I'll create a string buffer and we can convert that to an input stream.

08:38.280 --> 08:41.180
And so I don't need to do all the path stuff for all to path stuff.

08:41.290 --> 08:41.970
Absolutely.

08:42.390 --> 08:44.530
So many create a string buffer.

08:44.530 --> 08:52.350
I'm going to convert that to bytes and I'm going to use the bytes to act as an input stream so I can

08:52.350 --> 08:54.530
then pass it into my lowercase and blistering.

08:54.660 --> 08:58.530
And again this is just this may be a Cluj but it's just some quick for testing.

08:58.530 --> 09:04.430
This isn't the point of the decorative design pattern so I'm not worried if there if this is the best

09:04.430 --> 09:05.960
way to do something.

09:06.200 --> 09:08.020
So this is what I'm gonna do.

09:08.450 --> 09:11.940
I'm going to create a string buffer contains some lowercase and uppercase.

09:12.020 --> 09:17.120
Convert the bytes and then convert it to an input stream so I can pass it into my lowercase in the string

09:17.420 --> 09:19.220
so I don't have to use a file.

09:19.220 --> 09:20.310
I deleted the file.

09:20.420 --> 09:25.040
I don't have to use a file and I have to worry about path and adding things to resources and so forth.

09:25.070 --> 09:26.540
Something quick.

09:26.540 --> 09:30.340
So now we can try to build this and we run it.

09:32.460 --> 09:40.530
We notice that all the string was converted to lowercase so this was a quick example the decorated design

09:40.530 --> 09:45.300
pattern extending the job Io functionality we didn't have to do too much.

09:45.300 --> 09:52.050
We were able to just create a concrete decorator and extend it because the filter input stream and the

09:53.010 --> 09:59.360
components and the abstract decorator they were all already created for us right.

09:59.490 --> 10:01.670
So that was a nice benefit.

10:02.220 --> 10:07.500
The abstract component was the input stream the concrete components included file input stream the binary

10:07.500 --> 10:12.690
input stream and the abstract decorator or for all the input streams of the file on stream and that's

10:12.690 --> 10:16.700
why we extended the abstract decorator thank you.
