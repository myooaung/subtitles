WEBVTT

00:05.710 --> 00:06.940
Hello and welcome.

00:06.940 --> 00:10.300
So far we've talked about implementing the adapter using composition.

00:10.300 --> 00:16.390
Now I want to talk about the class adapter implementation which includes inheritance so we define the

00:16.390 --> 00:17.680
adapter pattern.

00:17.680 --> 00:23.350
However there are actually two kinds of adapters there's the optic adapters that we talked about and

00:23.470 --> 00:25.540
this relies on object composition.

00:25.780 --> 00:32.320
One object containing another object adapting object and the adapted object class adapters is another

00:32.320 --> 00:34.000
way to implement the adapter pattern.

00:34.000 --> 00:35.800
This uses multiple inheritance.

00:35.800 --> 00:41.810
The reason I talked about the second is because java does not support multiple inheritance.

00:42.490 --> 00:47.050
So a class adapter is less of a focus in Java because you need multiple inheritance to implement it

00:47.890 --> 00:48.930
correctly.

00:48.940 --> 00:53.470
It's not possible in Java although we do know that in Java you can work around multiple inheritance

00:53.470 --> 00:56.440
by providing interfaces.

00:56.440 --> 01:00.630
However it also doesn't mean that you might not encounter a need for a class adapter down the road.

01:00.640 --> 01:05.740
So that's why I'm presenting to you even though we're focused on Java you can utilize interfaces as

01:05.740 --> 01:06.210
a workaround.

01:06.210 --> 01:08.950
As I mentioned for the lack of support multiple inheritance in Java

01:11.860 --> 01:16.110
so here is the object adapter review where it uses composition.

01:16.240 --> 01:17.230
This should be familiar.

01:17.230 --> 01:18.940
We had a couple examples.

01:18.940 --> 01:27.300
Your target your adapter your adapter contains an instance of the adapter adapter adapter and you basically

01:27.300 --> 01:33.440
just make calls in the adapter to do your to do your translation or do your conversion.

01:33.440 --> 01:39.150
The class adapter design is a bit different because it uses inheritance so instead of using a composition

01:39.150 --> 01:46.700
to adapt the DFT you the adapter now subclasses the adapter in any target classes and that's the difference

01:48.030 --> 01:53.340
a class adapter is very similar to an object adapter the class adapter will subclass the target and

01:53.340 --> 01:54.480
the adapter.

01:54.660 --> 02:00.450
The object adapter will use composition to pass request to an adapter as incompetent.

02:00.450 --> 02:05.880
So this is really all about composition versus inheritance and we talked about how we want to use composition

02:06.240 --> 02:11.670
more than we want to use inheritance because it has many different advantages such as you don't have

02:11.670 --> 02:16.980
to deal with all the subclass and the dependencies between the base and the subclass and so forth.

02:16.980 --> 02:22.650
A class adapter works by creating a new class which subclasses publicly from an after class to define

02:22.650 --> 02:29.400
its interface subclasses privately from our existing class to access its implementation.

02:29.400 --> 02:35.870
Each rap method calls its associated privately inherited method a class adapter needs.

02:35.870 --> 02:42.140
I'm sorry a class adapter adapts the adapting to the target by committing to a concrete adapt the class

02:42.980 --> 02:44.710
will not work when we want to adapt.

02:44.720 --> 02:52.910
Class in all of its subclasses class adapter lets an adapter override some of the adapters behavior

02:52.910 --> 02:57.530
since adapter is a subclass of adoptee so that's one advantage.

02:57.590 --> 03:01.990
You can override anything in the adapter adapters behavior.

03:02.000 --> 03:04.710
That's pretty neat concept.

03:05.640 --> 03:10.180
So here this is where we'd have to actually use interfaces in Java.

03:10.260 --> 03:14.960
But here's an example of the class adapter you have your client.

03:14.960 --> 03:16.770
And remember our doc and our turkey.

03:16.770 --> 03:22.980
Those two were not able to talk to each other because they had different interfaces.

03:22.980 --> 03:27.980
You could speak but they spoke differently so the client thinks he's talking to a doc.

03:27.990 --> 03:30.320
The target is the duck class.

03:30.390 --> 03:37.320
This is what the client invokes methods on the adapter lets the turkey respond to requests on a doc

03:37.590 --> 03:39.060
by extending both classes.

03:39.060 --> 03:44.950
Duck and Turkey the Turkey class does not have the same methods as a duck but the adapter can take the

03:44.950 --> 03:50.760
duck method calls and turn around and invoke methods on the turkey you do it through inheritance.

03:50.760 --> 03:55.770
So the adapter would implement the target interface and they adapt the interface.

03:55.770 --> 04:00.640
You'd have to add an interface in here to extend multiple classes.

04:00.670 --> 04:03.020
You would implement multiple interfaces.

04:03.200 --> 04:07.740
The adapter would implement the target interface and then you'd have to add an interface for the adapter

04:07.740 --> 04:16.220
as well and then you can override behavior if you need to so the object adapter remember again uses

04:16.220 --> 04:16.900
composition.

04:16.910 --> 04:18.670
We know all about this.

04:18.770 --> 04:21.490
It's different when you do the class adapter right.

04:21.650 --> 04:27.190
You don't have an instance of the adapting and the adapter which then does all its conversion.

04:27.230 --> 04:34.130
You use inheritance so to summarize an advantage of the object adapter is that can adapt and adapt.

04:34.140 --> 04:40.350
Class in the ending of its subclasses because of composition doesn't necessarily worry about the subclasses

04:40.350 --> 04:44.790
it just has a relationship with the interface or the base class.

04:44.820 --> 04:51.520
Class adapters committed to one specific adoptee class an advantage of a class adapters that it does

04:51.520 --> 04:52.620
not need to re implement.

04:52.630 --> 04:54.110
It's an entire adoptee.

04:54.550 --> 04:58.750
It can override the behavior of an adoptee if it needs to because it is just subclasses.

05:00.830 --> 05:06.140
The object adapter is more flexible composition is also preferred over interfaces inheritance.

05:06.140 --> 05:06.460
Sorry.

05:06.560 --> 05:08.180
So that's an advantage.

05:08.180 --> 05:10.670
You write very little code to delegate to the adapter.

05:11.840 --> 05:12.020
Right.

05:12.230 --> 05:15.720
Usually those conversion methods are very small.

05:15.830 --> 05:17.870
The class adapter is more efficient.

05:17.870 --> 05:24.560
There's only one there's not an adapter in into that the an object adapter can add new behavior and

05:24.560 --> 05:31.640
everything works with the adapter class in all of its subclasses so the adagio adapter has the advantage

05:31.640 --> 05:35.210
of work with subclasses easier as well.

05:35.210 --> 05:39.060
But this is the class it out there will go through an implementation example just to show it to you.

05:39.110 --> 05:45.110
You probably won't use the class adapter much in Java because lack of implementation for multiple inheritance.

05:45.110 --> 05:50.030
Again you can work around it with interfaces but it just becomes too messy and the object adapter usually

05:50.030 --> 05:50.980
meet your needs.

05:50.990 --> 05:54.180
So I would suggest using the object adapter as much as possible.

05:54.200 --> 05:56.900
I just wanted to show you the class adapter for reference.

05:56.900 --> 05:57.310
Thank you.
