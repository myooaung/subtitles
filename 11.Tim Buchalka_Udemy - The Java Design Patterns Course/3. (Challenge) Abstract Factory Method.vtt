WEBVTT

00:05.190 --> 00:06.460
Hello and welcome.

00:06.480 --> 00:08.280
Are you up for another challenge.

00:08.310 --> 00:09.540
This is our second challenge.

00:09.540 --> 00:15.090
It's going to be based on your understanding of the factory after factory method design pattern.

00:16.050 --> 00:17.920
So let's get started.

00:17.960 --> 00:22.610
I want you to write an application that utilizes different types of movies either a Hollywood movie

00:22.610 --> 00:23.390
or a Bollywood movie.

00:23.390 --> 00:25.700
Those are going to be our products.

00:25.730 --> 00:29.830
They can also have different types of genres either comedy or action.

00:29.960 --> 00:32.320
So there's many ways we can approach this problem.

00:32.360 --> 00:37.520
I'm going to suggest one way your goal for this assignment is to utilize the Abstract Factory method

00:37.520 --> 00:44.350
design pattern for the creation of each type of movie with the correct genre so our factory will create

00:44.350 --> 00:50.140
either action or comedy movies of a certain family of products the family of products or Hollywood or

00:50.140 --> 00:56.110
Bollywood you're going to either create Hollywood action movies or Hollywood comedy movies or Bollywood

00:56.110 --> 00:59.120
action movies or Bollywood comedy movies.

00:59.440 --> 01:02.010
You should implement this pattern using any technique you want.

01:02.050 --> 01:04.130
I mentioned many different techniques.

01:04.270 --> 01:08.080
You can have a static method for your factory producer.

01:08.140 --> 01:10.780
You can have a static method for your creator.

01:10.840 --> 01:16.990
Remember that the factory method design pattern is a subset of this pattern.

01:17.050 --> 01:21.040
So you're going to be implementing the factory method as well as the Abstract Factory method.

01:21.160 --> 01:25.960
The Abstract Factory method is going to determine which family of products you use.

01:25.960 --> 01:30.620
So you're going to have a factory for each family product but there's different ways you can approach

01:30.620 --> 01:31.120
it.

01:31.130 --> 01:36.830
I like the way of passing a parameter so you can limit your subclasses to determine which instance to

01:36.830 --> 01:37.580
create.

01:37.580 --> 01:45.860
I also like that way that approach when you determine which actual factory to use again you still pass

01:45.860 --> 01:50.270
a parameter and it will turn you the correct factory and that's the Abstract Factory method side of

01:50.270 --> 01:51.110
it.

01:51.140 --> 01:53.740
So in the following slides I'm going to suggest one way to implement it.

01:53.750 --> 01:55.520
You can implement it any way you want.

01:55.820 --> 02:00.950
There isn't what you'll learn as you write code is there's many different ways to implement things the

02:00.950 --> 02:07.610
suggested solution on the following slides heavily uses interfaces and subtypes in the main class my

02:07.610 --> 02:14.420
steps would be you would first create two movie interfaces Hollywood and Bollywood those both contain

02:14.420 --> 02:20.400
a common method the method could be like getting the movie name for example to interfaces these are

02:20.400 --> 02:28.040
going to represent our family of products you then want to create a concrete class for each genre of

02:28.040 --> 02:33.560
movie the product family is gonna be a Hollywood comedy movie or Hollywood action movie for the Hollywood

02:33.560 --> 02:39.590
interface a Bollywood comedy movie or a Bollywood action movie for the interface Bollywood interface

02:41.260 --> 02:47.080
each class would implement the Get Moving aim method from an AI Hollywood movie or an AI Bollywood movie

02:47.080 --> 02:50.170
interface to implement more mundane cuts.

02:50.230 --> 02:52.010
Simply put out some hard code a name.

02:52.180 --> 02:57.520
So just like the other assignments in the other examples the logic the behavior for the actual method

02:57.550 --> 03:01.030
is not important because we're demonstrating a design pattern.

03:01.030 --> 03:06.490
So just print out something like I just created a Hollywood movie with this name and so forth.

03:06.490 --> 03:08.370
No big deal on behavior.

03:09.040 --> 03:13.090
You'll need to create another interface for the Abstract Factory pattern right.

03:13.150 --> 03:18.910
These are the creators the creators of both the family of what factory and the creators of the actual

03:18.910 --> 03:20.230
products.

03:20.290 --> 03:26.020
So this class will create a family of products either Hollywood or Bollywood or Hollywood Bollywood

03:26.020 --> 03:26.960
comedy movies.

03:26.980 --> 03:29.920
So action movies versus comedy movies.

03:30.070 --> 03:36.490
So we're going to organize this based on our factory after factory based on the action or the comedy

03:36.490 --> 03:40.640
movies which return the right instance based on the product above.

03:40.720 --> 03:45.520
So I would suggest creating a movie factory for the interface name in the Hollywood movie.

03:45.580 --> 03:48.770
You'd get Bollywood movie for the factory methods.

03:48.790 --> 03:51.590
This is actually going to implement the factory.

03:51.880 --> 03:56.530
These methods will return a reference to either an AI Hollywood movie or an AI Bollywood movie.

03:56.530 --> 04:03.510
The product families the factories are going to be based on the actual product types.

04:03.600 --> 04:04.790
Again one way to implement it.

04:04.800 --> 04:10.350
You can actually group this differently where you could group but not by comedy or action movies but

04:10.350 --> 04:12.180
by Hollywood Bollywood.

04:12.210 --> 04:18.240
I keep getting confused each way but we're going to approach it with grouping by comedy or action based

04:18.240 --> 04:19.940
on type.

04:20.070 --> 04:24.510
You also need to create classes that implement the factory methods from the movie Factory interface

04:25.050 --> 04:27.300
comedy movie Factory action movie factory.

04:27.300 --> 04:29.370
This is our factory of factories.

04:29.550 --> 04:35.760
We're going to either create comedy products or action products and so in thought that a good name would

04:35.760 --> 04:41.900
be comedy movie Factory action movie factory the factory method should take a string object which determines

04:41.900 --> 04:48.680
the correct movie subtype to create this method should return in AI Hollywood movie or an AI Bollywood

04:48.680 --> 04:54.680
movie interface that references that's referenced on the previous slide.

04:54.680 --> 04:57.920
Lastly you want to create a client class that includes a main method.

04:57.920 --> 05:02.290
This class will utilize the comedy and action movie factories.

05:02.300 --> 05:08.000
You can have a static method to get that to get those factory classes back or you can create an instance.

05:08.000 --> 05:12.080
This would be the composition relationship that would create a family of products.

05:12.110 --> 05:17.450
Either the Hollywood or Bollywood action movies or comedy movies for the family products.

05:17.650 --> 05:21.880
You can invoke the Get Moving a method to verify that the correct object was created.

05:21.880 --> 05:27.160
This will be our testing to ensure that our Abstract Factory worked correctly.

05:27.160 --> 05:33.490
Here's an example output of what your application would look like and there are some differences here

05:33.490 --> 05:36.610
and some of the class names that I used but you get the idea.

05:36.670 --> 05:42.340
Basically if you create an action movie factory you're going to return the right instance either Hollywood

05:42.340 --> 05:43.930
or Bollywood action movie.

05:44.110 --> 05:48.520
And if you create a comedy movie factory you're going to create to return the right instance either

05:48.520 --> 05:51.340
a Hollywood or a Bollywood comedy movie.

05:51.340 --> 05:53.610
Again this is just an example.

05:53.650 --> 05:54.760
So good luck.

05:54.760 --> 06:01.270
I'll provide a solution that will go through all the details on how to create the factory of factories.

06:01.270 --> 06:07.570
The abstract method by providing some kind of producer with a static method that will return the actual

06:07.570 --> 06:08.770
Bollywood action.

06:08.800 --> 06:14.320
I'm sorry action movies or comedy movies and then the factory method will be implemented to return the

06:14.320 --> 06:16.820
right type of action movie or right type of comedy movie.

06:17.770 --> 06:18.160
Thank you.
