WEBVTT

00:05.790 --> 00:07.070
All right welcome back.

00:07.080 --> 00:08.180
In this lecture we're gonna go.

00:08.290 --> 00:12.930
We're gonna go through a walkthrough of the implementation of the visitor pattern.

00:12.930 --> 00:18.930
This application is going to be shopping cart type application where we can add different types of elements

00:18.930 --> 00:20.280
or items.

00:20.280 --> 00:25.850
So let's create a new project and let's call this one the visitor example.

00:27.000 --> 00:30.910
So we're gonna say visitor example.

00:33.160 --> 00:38.040
So how this is gonna work is when we click on a check up on for example it's gonna calculate the total

00:38.040 --> 00:38.730
amount to be paid.

00:38.730 --> 00:40.540
Obviously this isn't a graphic interface.

00:40.710 --> 00:42.300
So we're going to trigger that.

00:42.570 --> 00:48.030
We can have the calculation logic in the item classes or we can move them out to another class using

00:48.030 --> 00:48.840
the visitor pattern.

00:48.840 --> 00:50.570
And this is the preferred way of doing thing.

00:50.580 --> 00:52.460
It's much better less coupling.

00:53.070 --> 00:58.140
So the first thing we need to do for the shopping type application is we're gonna create different types

00:58.140 --> 01:00.750
of items elements to be used in the shopping cart.

01:00.750 --> 01:03.330
This is going to make up the object structure.

01:03.540 --> 01:07.250
So let's create an interface an element interface.

01:07.320 --> 01:16.140
So going to say new Java class we're going to say item element and this is gonna be an interface.

01:16.140 --> 01:20.510
Now remember this is gonna define accept operation that takes a visitor as an argument.

01:20.640 --> 01:25.380
It's the entry point which enables an object to be visited by the visitor object.

01:25.410 --> 01:29.910
Notice that the accept method takes the visitor argument and we can have some other methods here as

01:29.910 --> 01:32.100
well for specific items if we wanted to.

01:33.000 --> 01:43.050
So we have our public and accept which takes a shopping cart visitor and we'll just call that visitor

01:43.530 --> 01:47.160
and we'll have to create that shopping cart visitor class.

01:47.280 --> 01:54.570
But first this is making up our object structure our elements let's start creating some concrete elements

01:55.440 --> 02:00.320
for our items and the concrete elements will implement the accept operation.

02:00.510 --> 02:05.910
That takes a visitor visitor as the argument the visitor object is path to this object using the accept

02:05.910 --> 02:07.010
operation.

02:07.080 --> 02:11.780
The first one we're gonna create is we're going to create a book Class.

02:11.780 --> 02:17.810
So we're gonna say class book implements item element.

02:17.910 --> 02:20.400
We've got a couple member variables for price

02:23.820 --> 02:29.460
and a string for the ISBN number.

02:29.460 --> 02:31.830
And these will be initialized in our constructor

02:35.340 --> 02:39.440
something like this.

02:39.700 --> 02:47.530
We're also going to have a get price method and a gate ISBN number method we then need to override our

02:47.530 --> 02:49.730
accept method.

02:50.080 --> 03:02.070
And so we're gonna have to say override and we're gonna say public and accept our shopping cart visitor.

03:02.070 --> 03:10.270
And then like that and all this is gonna do as it's good and return visitor that visit and you're gonna

03:10.270 --> 03:14.890
pass in the visit object something like that.

03:14.890 --> 03:19.300
And so we have to go and we'll have to implement this shopping cart visitor in a second but we want

03:19.300 --> 03:22.700
to finish implementing our item elements.

03:22.820 --> 03:30.730
So going to create another one here this one is gonna be a fruit class we're just gonna say class fruit

03:31.630 --> 03:32.530
implements

03:35.410 --> 03:37.610
implements.

03:37.710 --> 03:46.780
If I could spell implements are item element and this is gonna have three member variables one for the

03:46.780 --> 03:53.650
price per kilogram a weight and a name so it's a little different but these elements will be stored

03:53.650 --> 04:01.420
in a list or collection in our constructor is just gonna set up these member variables.

04:01.420 --> 04:06.250
It's an overloaded constructor that takes three parameters we're going to have some get methods first

04:06.250 --> 04:07.480
for our price per kilogram

04:10.470 --> 04:16.240
and then we're also gonna have a get weight and a get name and then the accept method is gonna do pretty

04:16.240 --> 04:20.650
much do exactly what our other item element did.

04:20.660 --> 04:21.280
All right.

04:21.280 --> 04:27.240
It's gonna take a shopping cart visitor as a parameter and it's gonna call the visit method on this.

04:27.670 --> 04:30.430
But notice the implementation of this accept method.

04:30.820 --> 04:36.740
It's calling the visit method of the visitor and passing itself as an argument notice that the implementation

04:36.740 --> 04:40.910
of the accept method in all the items are the same but they can't be different.

04:40.910 --> 04:46.890
For example there can be logic to check if the item is free then don't call the visit method at all.

04:46.900 --> 04:47.210
All right.

04:47.220 --> 04:51.180
We have the visit method for different types of items in the visitor interface that will be implemented

04:51.180 --> 04:53.910
by concrete visitor classes.

04:53.910 --> 05:04.120
So now let's create the visitor we're gonna say new Java class and organize a shopping cart visitor

05:06.190 --> 05:08.580
and we're gonna make this an interface.

05:09.160 --> 05:13.960
Remember the whole purpose of this class is it's used to declare the visit operations for all the types

05:13.960 --> 05:20.350
of visible classes the operations name and the signature identifies the class that sends the visit request

05:20.350 --> 05:22.000
to the visitor.

05:22.000 --> 05:26.530
It lets the visitor determine the concrete class the element being visited so that the visitor can then

05:26.530 --> 05:29.530
access the element directly through its particular interface.

05:29.650 --> 05:32.030
So remember the visitors you have to have.

05:32.320 --> 05:37.520
You have to have a visit method for each item element concrete item.

05:38.380 --> 05:44.410
So here we're going to have to have an IT visit that takes a book and we're gonna have to have one that

05:44.410 --> 05:45.340
takes a fruit.

05:47.260 --> 05:49.540
So fruit.

05:50.430 --> 05:52.270
Fruit.

05:52.360 --> 05:59.020
Now we have to implement this interface and every item will have its own logic to calculate the cost.

05:59.020 --> 06:00.560
So now we have to create the concrete.

06:00.560 --> 06:04.720
Visitors write these implement the operations in the interface.

06:04.720 --> 06:09.820
Each operation implements a fragment of the algorithm defined by for the corresponding class of the

06:09.820 --> 06:14.920
object in the structure it provides the context for the algorithm and stores its local state and the

06:14.920 --> 06:18.730
state often accumulates as it goes through the list.

06:19.160 --> 06:20.440
And so we'll say class

06:23.050 --> 06:34.970
shopping cart visitor ample for implementation implements our shopping cart visitor.

06:35.720 --> 06:38.450
And here we're just going to override each one of these methods.

06:38.530 --> 06:44.200
First of all override the book and remember the purpose of this is to calculate the cost.

06:44.200 --> 06:50.560
So we have our visit method and what we're gonna do is we're gonna create a local variable and we're

06:50.560 --> 06:54.850
going to apply a five dollar discount of the book price is greater than 50 dollars so we're gonna have

06:54.850 --> 06:57.030
a little if statement in here.

06:57.400 --> 07:02.470
So we're gonna keep a running tally and if the book that gate price is greater than 50 then the cost

07:02.470 --> 07:08.800
of the book is gonna be five dollars less if it's not greater than 50.

07:09.410 --> 07:14.860
Then we're going to calculate the cost to be equal the book price.

07:14.890 --> 07:18.890
So cost equals book that get price.

07:19.430 --> 07:22.560
We're going to print out information and then return the cost.

07:22.560 --> 07:30.320
So we're just going to print out the books ISBN and the cost regardless of if it's over 50 or under

07:30.320 --> 07:31.030
50.

07:32.170 --> 07:34.870
And that's the implementation of the visit book.

07:34.880 --> 07:42.980
We'll need to close this class and also make sure everything looks good and we're still RAD BECAUSE

07:42.980 --> 07:46.900
WE HAVE TO IMPLEMENT THE FRUIT method so we don't want to close it completely.

07:46.910 --> 07:53.960
So now we're going to override the fruit visit method when it takes a fruit as a parameter.

07:54.260 --> 07:58.710
Something like fruit and we'll call it Fruit.

08:00.470 --> 08:03.580
Now this again is going to calculate the cost.

08:03.590 --> 08:05.030
This one's pretty easy.

08:05.030 --> 08:08.240
The cost is just going to be the the price per kilogram times the weight.

08:09.560 --> 08:18.710
So we can say it cost equals fruit to get price per kilogram times the way we're going to print out

08:18.710 --> 08:20.630
a message and then we're going to return that cost

08:23.650 --> 08:25.850
so we can just do something like that.

08:27.790 --> 08:32.110
And that's the implementation of our visitors.

08:32.110 --> 08:34.930
The last thing we need to do is we need to create the client.

08:35.050 --> 08:41.290
So up until this point we have our items right that implement the accept method and the items are going

08:41.290 --> 08:43.980
to be in some kind of object structure or some kind of list.

08:44.170 --> 08:49.300
But we have a book item and we have an implement heard a fruit item in both of those had the accept

08:49.300 --> 08:53.670
method they're going to be passed a visitor object and then we're gonna call the visit method on it.

08:53.830 --> 08:56.730
And so the visitors are implemented right here.

08:56.750 --> 08:57.310
Right.

08:57.310 --> 08:59.670
Shopping Cart visible simple.

09:00.100 --> 09:07.360
Now the last thing create the client to say new Java class we're gonna say client and remember the client

09:07.660 --> 09:12.250
has access to the data structure objects and it can instruct them to accept a visitor to perform the

09:12.250 --> 09:13.870
appropriate processing.

09:13.930 --> 09:17.620
A client creates a concrete visitor object and then traverses the object structure.

09:17.620 --> 09:23.950
The list or the collection visiting each element with the visitor when an element is visited it calls

09:23.950 --> 09:27.460
the visitor operation that corresponds to its class.

09:27.460 --> 09:33.570
The element supplies itself as an argument to this operation to let the visitor access at State.

09:34.210 --> 09:36.040
So we're gonna go ahead and create a main method

09:40.330 --> 09:44.130
that takes args.

09:44.530 --> 09:47.560
And this is just going to create some item elements.

09:47.770 --> 09:47.980
Right.

09:47.980 --> 09:54.770
So some new books some new fruit elements and we're gonna put this into an array right.

09:55.210 --> 10:00.390
Because remember we have to have an object structure so something like this created a bunch of items

10:00.400 --> 10:01.990
we initialize them with a new book.

10:02.000 --> 10:06.250
Another new book you'll see at the end and then two fruits.

10:06.280 --> 10:08.620
So two two books and two fruits.

10:08.620 --> 10:13.030
We then want to calculate the price which we'll write and a helper method.

10:13.030 --> 10:23.320
So we're just gonna say in total equals calculate price on the items and then we'll print out that total

10:23.320 --> 10:24.880
cost.

10:24.880 --> 10:31.270
Now we also write this help a method for the calculate price that uses the visitor so the calculate

10:31.270 --> 10:34.730
price method we can declare up top.

10:34.820 --> 10:42.220
You can say private static int calculate price.

10:42.220 --> 10:44.260
And it's gonna take an array of item elements

10:47.980 --> 10:48.460
items

10:52.090 --> 10:55.880
and what we're gonna do first is we're gonna create a shopping cart visitor.

10:55.960 --> 11:00.510
So we're just going to say shopping cart visitor equals new shopping cart visible.

11:00.560 --> 11:09.160
Simple concrete class we're then going to say create a local variable for the sum to keep a running

11:09.160 --> 11:09.940
tally.

11:10.210 --> 11:14.920
We're gonna go through the each items in the array and for each item in the array we're gonna call the

11:14.920 --> 11:17.620
accept method and pass in our visitor.

11:17.840 --> 11:17.970
Right.

11:17.980 --> 11:26.710
So this is the key right here we're gonna say some equals some plus item that except passing in the

11:26.710 --> 11:29.440
visitor that we just created.

11:29.970 --> 11:30.190
Right.

11:30.220 --> 11:36.720
So now we can add functionality to our object structure without affecting the object structure.

11:36.760 --> 11:43.420
We now have this except taking the visitor and then the last thing we can do is we can just return the

11:43.420 --> 11:43.810
sum

11:47.290 --> 11:48.760
like that.

11:48.760 --> 11:54.100
And that does it for our program but he had noticed a separation between the visitor and the object

11:54.100 --> 11:54.910
structure.

11:55.000 --> 12:01.630
We have our elements we create our visitor we pass a visitor in to the elements which then in turn call

12:01.630 --> 12:10.960
the concrete visitors we'll see if this will build and then we'll go ahead and run our client.

12:11.310 --> 12:13.050
And so we run our client on Main.

12:13.170 --> 12:18.210
You'll see that we're able to keep we're able to calculate the total cost for the two books and the

12:18.210 --> 12:26.210
two fruits in our array twenty plus ninety five plus twenty plus twenty five is one sixty five all right.

12:26.230 --> 12:30.960
So you can go ahead or 160 I'm sorry so that's the visitor pattern.

12:30.990 --> 12:35.430
A nice separation and added functionality to an object structure.

12:35.430 --> 12:35.910
Thank you.
