WEBVTT

00:05.180 --> 00:06.320
Hello and welcome.

00:06.350 --> 00:13.730
This lecture I want to provide a walkthrough of implementing the adapter design padding using composition.

00:13.730 --> 00:17.900
So we're going to bring up intelligence and we'll provide two examples to show you how to do this I'll

00:17.900 --> 00:19.370
do another example in the next lecture.

00:19.370 --> 00:24.920
Just so it's very clear on how this works we're going to create a new project this is gonna be our first

00:24.920 --> 00:26.890
example.

00:27.620 --> 00:41.780
And so we're just gonna name it adapter actually we'll say adapter adapter object composition example

00:42.500 --> 00:44.050
and we'll say Example 1.

00:44.150 --> 00:48.160
So we have another one.

00:48.200 --> 00:48.910
Here we are.

00:48.920 --> 00:53.210
I want to show you the current implementation and how we have two incompatible interfaces.

00:53.210 --> 01:03.650
So let's suppose we have this interface dock and this has two methods quark and fly

01:09.110 --> 01:12.400
certain types of dock docks can implement this interface.

01:12.470 --> 01:14.270
So that allows docs to quack and fly.

01:14.300 --> 01:20.390
So for example we could create a subclass of dock and we could just name it Mallard dock

01:23.250 --> 01:31.160
and this will implement a dock and it will just have a couple methods that print out you know whether

01:31.160 --> 01:34.550
or not they're quacking or flying.

01:34.820 --> 01:40.820
So we'll just do a system that out again no real behavior here just for demonstration purposes we'll

01:40.820 --> 01:45.760
just say quick and then we have another method.

01:45.800 --> 01:56.360
We have to implement fly and this one we'll just print out something such as I am flying.

01:56.360 --> 01:59.710
That's our first interface.

02:00.170 --> 02:05.330
Now let's say we have another interface in this interface implements a turkey.

02:05.960 --> 02:09.870
So we'll create another interface class.

02:10.490 --> 02:19.100
We'll call this turkey and we'll make this an interface interface Turkey.

02:19.130 --> 02:21.560
And this has two methods.

02:21.680 --> 02:23.000
Turkeys don't actually quack.

02:23.000 --> 02:25.760
They gobble so we're gonna say public void gobble

02:29.790 --> 02:37.500
and then they're also going to fly because some turkeys can't fly although they can only fly short distances.

02:37.500 --> 02:45.850
And then we have to implement something and for this interface and we'll just have a wild turkey.

02:46.170 --> 02:53.160
I like using default access modifiers for some reason and these examples for simplicity so I don't have

02:53.160 --> 02:59.800
to worry about filing me class while Turkey implements our turkey interface.

02:59.830 --> 03:01.530
And just like the previous one.

03:01.710 --> 03:03.420
It's just going to display some output.

03:03.720 --> 03:10.150
So gobble is going to say system that out that line.

03:11.190 --> 03:13.590
Gobble gobble.

03:14.130 --> 03:15.170
With quotation marks

03:21.390 --> 03:28.740
and then our other implementation will be fly.

03:30.230 --> 03:35.180
This will say I am flying a short distance.

03:35.220 --> 03:35.430
OK.

03:35.430 --> 03:38.790
Pretty straightforward we have two interfaces here.

03:38.790 --> 03:45.000
So this concrete implementation while Turkey implements the turkey like the dock it just prints out

03:45.000 --> 03:45.920
some action.

03:45.940 --> 03:49.770
Well you should notice though with these two interfaces is that they're incompatible.

03:49.870 --> 03:50.280
Right.

03:50.280 --> 03:53.430
And so Turkey's gobble and ducks quack.

03:54.090 --> 03:58.470
Well we want to do is we want to adapt the turkey to a duck.

03:58.470 --> 03:58.860
I don't know.

03:58.860 --> 04:03.130
For some strange reason maybe we want to just make sure that turkeys.

04:03.150 --> 04:09.570
We need more turkeys or whatever the case is we want to adapt the turkey to a duck so remember we're

04:09.570 --> 04:13.340
going to have to need to create a client that uses the adapter pattern.

04:13.340 --> 04:18.500
We need to have a target interface which the adapter is going to implement which the client will use

04:19.040 --> 04:22.980
and the adapter is going to have an instance of the adapter.

04:23.010 --> 04:23.670
Right.

04:23.750 --> 04:26.090
So what do we have here for our participants.

04:26.240 --> 04:30.950
While the target is gonna be the duck because that's what we want to eventually half right the client

04:31.430 --> 04:37.130
wants to have a duck because we want to have a turkey act like a duck so Duck is the interface that

04:37.130 --> 04:45.200
a wild turkey uses to act like a duck our client is thinking the wild turkey for our client when we

04:45.200 --> 04:47.780
call it wild turkeys those are incompatible with the duck.

04:47.780 --> 04:55.220
So the client is going to collaborate with the turkey adapter which will confirm conform the wild turkey

04:55.220 --> 04:58.630
to a duck that will conform to the duck interface.

04:58.640 --> 04:59.530
The adapter.

04:59.570 --> 05:05.240
Is what you're gonna say actually adapt to is the turkey right because we're we're taking an existing

05:05.240 --> 05:11.000
interface that needs adapting and the turkey needs to be modified so that it can act like a duck and

05:11.000 --> 05:13.160
the adapter is the turkey adapter.

05:13.160 --> 05:15.990
We're going to adapt the turkey to a duck.

05:16.300 --> 05:16.520
Right.

05:16.550 --> 05:23.690
So this is a perfect opportunity to use an adapter and you know one use case might be say we're short

05:23.690 --> 05:29.250
on duck objects and we want to allow it to use some turkey objects in their place.

05:29.330 --> 05:32.770
Well we can't use the turkey's out right because they have a different interface.

05:32.870 --> 05:37.460
And so this is why we're writing the adapter so we can have Turkey's look like ducks.

05:39.280 --> 05:39.560
OK.

05:39.590 --> 05:45.860
So we're first going to query our turkey adapter the interface that we're adapting to is a dock.

05:45.860 --> 05:49.820
So we don't have to create the interface of the adapter interface.

05:49.820 --> 05:51.160
It's already created.

05:51.200 --> 06:01.400
So here if we say new Java class we're gonna create our turkey adapter Turkey adapter.

06:01.640 --> 06:04.150
And remember we have to have an adapter.

06:04.430 --> 06:05.720
And there an instance.

06:05.720 --> 06:08.600
So here we're trying to adapt to a turkey.

06:08.660 --> 06:11.630
So we're just going to have a turkey instance.

06:12.260 --> 06:13.570
OK.

06:13.790 --> 06:15.680
This is the type we're going to adapt to.

06:15.680 --> 06:15.970
We're gonna.

06:16.070 --> 06:20.090
Well we're going to adapt to the duck but we're gonna take the turkey and we'll need to do our conversions

06:21.910 --> 06:30.330
our constructor inside here is gonna take a turkey object like it's spelled Turkey correctly Turkey

06:30.330 --> 06:30.840
adapter

06:34.650 --> 06:39.470
and it's just gonna sign the member variable.

06:39.920 --> 06:44.250
This that Turkey equals Turkey.

06:44.250 --> 06:44.490
All right.

06:44.490 --> 06:47.410
We have to get the reference to the object that we're adapting.

06:47.460 --> 06:52.080
So here we do that through the constructor.

06:52.080 --> 06:53.700
Now we're implementing the dog.

06:53.700 --> 06:55.840
I forgot to say we're implementing the duck interface here.

06:55.890 --> 06:59.040
Implements duck.

06:59.070 --> 07:01.080
And so now we have to implement the quack on the fly.

07:02.130 --> 07:07.190
So here's we're going to do the conversion using the composition using the turkey instance.

07:07.200 --> 07:12.000
So here we can say quack because remember there's no quack method inside the turkey interface.

07:12.030 --> 07:12.950
So we have to adapt it.

07:15.140 --> 07:17.820
The quack translation between the classes should be easy.

07:17.820 --> 07:19.750
We can just call the gobble method.

07:19.770 --> 07:22.030
So here we can just say Turkey gobble.

07:22.710 --> 07:32.480
And that's our conversion our fly is going to just basically call the turkey dot fly.

07:32.490 --> 07:37.010
So even though both interfaces have the fly method Turkey's flying short distances.

07:37.020 --> 07:37.550
Right.

07:37.590 --> 07:39.870
They can't do long distance flying like ducks.

07:39.930 --> 07:43.470
So the map between the ducks fly method and the turkeys fly method.

07:43.470 --> 07:46.000
We need to call the turkey fly method five times to make.

07:47.220 --> 07:59.790
So here we ever fly and we're just going to have a loop or it equals zero eyes less than five plus plus.

08:00.250 --> 08:07.420
And this is just going to call Turkey dot fly because they only fly in short spurts and this will end

08:07.420 --> 08:14.560
the turkey adapter and we should be good.

08:14.690 --> 08:20.300
Now we need to create a client that uses the adapter so let's go ahead and create a client

08:23.690 --> 08:33.660
its client is going to have to implement the main method.

08:33.660 --> 08:35.800
And so first we are going gonna need to create a dock right.

08:35.800 --> 08:38.360
So let's create a mallard duck.

08:39.220 --> 08:48.550
We can actually create a mallard duck and we'll say new mallard duck.

08:48.550 --> 08:50.020
We also want to create a wild turkey

08:52.860 --> 08:55.570
wild turkey.

08:55.570 --> 08:58.850
Turkey equals new Wild Turkey.

08:58.870 --> 09:00.640
Pretty straightforward.

09:00.640 --> 09:04.760
Now we want to adapt the turkey to a duck.

09:04.870 --> 09:09.070
So we're gonna wrap the Turkey and Turkey adapter which makes it look like a duck.

09:09.070 --> 09:18.940
So we're gonna say duck Turkey adapter equals new Turkey adapter and we're gonna pass in the wild turkey

09:21.130 --> 09:22.450
really trouble smelling Turkey

09:26.230 --> 09:30.760
then we're gonna actually test it to see what Turkey says when it tries to gobble and fly.

09:30.790 --> 09:37.000
So we'll say system thought out the front line the the Turkey

09:39.970 --> 09:40.810
says

09:43.970 --> 09:53.770
and this is testing a turkey to make it gobble and fly so well done just say Turkey gobble Turkey that

09:53.770 --> 09:58.090
fly and then we also want to test out what the duck says

10:01.270 --> 10:08.810
the duck.

10:08.900 --> 10:12.730
And we also want to add a new line just to make it complete

10:16.180 --> 10:22.810
and so then we'll say let's see we're actually out of help a month in here.

10:22.840 --> 10:31.410
Let's add a helper method because it makes it a little bit easier to say static void test duck.

10:32.260 --> 10:36.040
This is just gonna get a duck and it's gonna call its quack and fly methods for the duck

10:38.810 --> 10:39.990
sauce a Dog Duck.

10:40.000 --> 10:44.730
Clark this is so we can avoid duplication of code.

10:47.490 --> 10:48.570
OK.

10:48.880 --> 10:56.140
So now we go back up here and instead of duplicating code we can now say test duck which is the duck

10:56.170 --> 11:04.750
we just created and then we can also test the turkey adapter to now see if it's adapted correctly.

11:04.760 --> 11:04.910
Right.

11:04.990 --> 11:09.040
Because the initial test here we were just testing the turkey and the turkey is obviously going to act

11:09.040 --> 11:10.020
like a turkey.

11:10.030 --> 11:11.780
Now we want to have the turkey back like a duck.

11:15.180 --> 11:22.450
So here we're gonna say that Turkey adapter says

11:26.540 --> 11:32.800
and this is gonna say test duck but it's gonna pass and the turkey adapter and so that little helper

11:32.800 --> 11:37.000
method allowed us to reduce code and that's it.

11:37.030 --> 11:42.650
And this basically will demonstrate the adapter the turkey adapter and I'll act like a duck.

11:42.660 --> 11:44.410
So let's go ahead and build this

11:47.610 --> 11:51.460
and run it and we'll see some output.

11:51.840 --> 12:03.170
So we say run client and what you'll notice is Turkey which is a turkey says gobble gobble gobble.

12:03.300 --> 12:04.500
And it's flying a short distance.

12:04.500 --> 12:10.440
The duck says quack and I'm flying and I am flying the turkey adapter is not going to act like a dog

12:10.470 --> 12:11.740
even though it's a wild turkey.

12:11.850 --> 12:14.560
So it's still going to say gobble gobble.

12:14.790 --> 12:20.580
It's then going to fly a short distance five times because it fly shorter so the turkey gobbles and

12:20.580 --> 12:22.530
files as flies a short distance.

12:22.530 --> 12:26.250
The duck quacks and flies just like you'd expect.

12:26.250 --> 12:31.710
And the adapter gobbles when Quark is called and flies a few times when fly is called the test stock

12:31.710 --> 12:35.370
method never knows it has a turkey disguised as a duck.

12:35.500 --> 12:39.280
And so that's the adapter design pattern using object composition.

12:39.410 --> 12:41.470
And we'll go through one more example just to relate this.

12:41.480 --> 12:45.220
But again notice that we have our turkey adapter.

12:45.320 --> 12:55.980
It has the audacity inside of it and we call methods on that to do the conversion diplomats the interface

12:56.010 --> 12:57.710
that you actually want the output to be.

12:57.710 --> 13:01.460
So the turkey's going to act like the duck target and that's it.

13:01.660 --> 13:01.990
Thank you.
