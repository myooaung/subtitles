WEBVTT

00:05.490 --> 00:07.170
Hello and welcome back.

00:07.180 --> 00:11.940
I have another challenge for you this is gonna be a challenge test your understanding of the facade

00:11.940 --> 00:15.960
design pattern the requirements are going to be.

00:15.960 --> 00:20.790
This is the current scenario we're gonna write an application that simulates accessing different menus

00:20.820 --> 00:22.810
from multiple restaurants in a hotel.

00:23.820 --> 00:28.800
So currently the optimal application is difficult to use as the interface to eat food at a restaurant

00:28.830 --> 00:31.090
is overly complicated.

00:31.260 --> 00:33.740
For this challenge your code required to create a facade.

00:33.960 --> 00:42.720
So that is easier to order e at a restaurant or hotel the hotel has a hotel keeper and there are a lot

00:42.720 --> 00:51.180
of restaurants inside the hotel vegan restaurants non vegan restaurants or both restaurants has a client

00:51.240 --> 00:55.170
you want to access all the different menus of all the restaurants.

00:55.400 --> 01:01.390
You do not know all the different menus that are available all you have access to is this hotel keeper

01:01.810 --> 01:03.920
who knows this hotel quite well.

01:04.800 --> 01:10.170
Whenever you want a menu you can tell the hotel keeper Hillary treat the correct menu from the respective

01:10.170 --> 01:13.170
restaurants he'll hand the menu over to you.

01:13.170 --> 01:20.240
It's a very simple the hotel keeper acts as the facade he hides the complexities of the hotel system

01:20.840 --> 01:28.150
of all the different restaurants and all the different menus so I'm going to provide to you some source

01:28.150 --> 01:30.760
code that will get you started on this project.

01:30.760 --> 01:33.130
You'll just have to add the facade.

01:33.130 --> 01:37.630
Some of the source code is gonna contain a hotel interface with this interface is gonna do it's just

01:37.630 --> 01:39.350
going to return menus.

01:39.420 --> 01:39.730
All right.

01:39.820 --> 01:42.040
So I'll provide you with the menu interface.

01:42.040 --> 01:45.190
I'll provide you with the three classes that implement this interface.

01:45.280 --> 01:48.320
You can download the source code it will be right underneath the lecture.

01:48.340 --> 01:51.610
It'll be something like facade challenge does zip.

01:52.510 --> 01:54.660
The three classes aren't going to do much.

01:54.760 --> 01:59.440
They're just going to be menus that can contain default constructors and I'll put the object that's

01:59.440 --> 02:00.550
actually created.

02:00.610 --> 02:02.040
So the interface is quite simple.

02:02.040 --> 02:06.670
This remember this is the interface to get the menus from the hotel.

02:06.670 --> 02:10.280
This is the what the facade will use.

02:10.450 --> 02:15.250
The three types of reference that implement the hotel interface are not V again.

02:15.250 --> 02:21.780
Again very simple they just have a gate menus and they create a new instance for each one of these vegan

02:21.780 --> 02:24.280
restaurant hand.

02:24.280 --> 02:27.900
Both can get both of them.

02:28.100 --> 02:32.550
You need to create a simpler interface a facade a hotel keeper.

02:32.560 --> 02:35.630
It should contain three match methods to each type of menu.

02:36.770 --> 02:41.930
Otherwise you'd have to create all these different instances depending on what you wanted and you don't

02:41.930 --> 02:43.430
want to have to do that.

02:43.520 --> 02:48.940
So create a client that uses the facade as the facade for each type of menu.

02:49.020 --> 02:52.980
It should be clear that the complex implementation will be done by the hotel keeper.

02:53.040 --> 02:59.340
The client will just ask the hotel keeper and ask for either Virgin vegan or vegan or non vegan this

02:59.340 --> 03:04.410
could be vegetarian or non vegetarian doesn't have to be otherwise that Regan earlier.

03:04.410 --> 03:05.940
I guess I got that in my brain.

03:06.300 --> 03:14.180
Vegetarian non vegetarian or both restaurant menus some sample output would just the correct instance

03:14.180 --> 03:18.850
would be created either a vegan menu and on vegan menu or both menus.

03:18.950 --> 03:20.620
It's a straightforward application.

03:20.690 --> 03:22.380
Again I'll provide you some source code.

03:22.380 --> 03:28.010
You'd have to create the facade so that the facade creates the correct instances.

03:29.290 --> 03:35.020
Right now in order to get a menu you have to know what menu you have to know what restaurant it exists

03:35.020 --> 03:39.800
in the hotel and then you also have to know what different menus there are.

03:39.960 --> 03:46.030
What I would suggest is in the actual facade as you can just create methods for getting a specific menu

03:46.780 --> 03:53.350
and those methods will create the correct restaurant and get the menus from the correct restaurant and

03:53.350 --> 03:56.310
you don't have to worry about creating all these different instances.

03:56.350 --> 03:56.980
So good luck.

03:56.980 --> 03:59.140
I'll provide a solution in the next lecture.

03:59.170 --> 04:00.340
Thank you.
