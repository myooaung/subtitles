WEBVTT

00:05.150 --> 00:06.610
Hello and welcome back.

00:06.690 --> 00:09.980
In this lecture I'd like to talk about the advantages of design patterns

00:13.790 --> 00:17.310
so why do we use design patterns.

00:17.580 --> 00:23.480
Most commonly stated reasons for studying and utilizing design patterns are because they enable us to

00:23.480 --> 00:24.650
do the following

00:28.170 --> 00:32.580
they have they provide the best solutions for certain problems faced during soft development.

00:32.610 --> 00:37.520
So I mentioned this quite a lot in the last lecture but it's important point to remember common problems

00:37.520 --> 00:42.810
conference of software solutions and what this basically does is it enables software reuse software

00:42.810 --> 00:44.310
reuse is incredibly important.

00:45.270 --> 00:51.810
If we can reuse existing solutions it will save time and time is a big deal when you're writing code

00:52.470 --> 00:56.850
so it makes it easier to reuse successful designs designs and architecture software reuse is one of

00:56.850 --> 00:58.350
the biggest advantages.

00:58.350 --> 01:00.690
That's why we really want to use them.

01:00.870 --> 01:02.840
The solutions have been tried and tested.

01:02.880 --> 01:08.280
They're going to work experienced developers have come up with the solutions so they're going to work

01:08.370 --> 01:13.380
and things that you know and you have confidence in working is a tremendous advantage.

01:13.380 --> 01:19.020
Learning these patterns helps unexperienced developers learn software design in an easy and faster way

01:24.920 --> 01:28.190
now that they're documented and they're out there for studying.

01:28.400 --> 01:30.960
You get the benefit of learning from other people.

01:31.070 --> 01:36.410
You get a head start on problems that you can avoid as a new and new design new developer.

01:36.890 --> 01:42.260
If you know that people encounter these problems and they have solutions form you you don't have to

01:42.260 --> 01:44.810
waste your time trying to figure it out.

01:45.050 --> 01:47.670
So it helps you avoid reinventing the wheel.

01:47.690 --> 01:55.190
A big big advantage you also use design patterns to basically understand object oriented principles

01:55.370 --> 01:57.510
that achieve high quality design.

01:57.620 --> 02:00.710
You do not want to just write code just to get the correct output.

02:00.710 --> 02:03.300
You want to make sure that your code is easily maintainable.

02:03.380 --> 02:10.100
You can achieve that by writing high quality code high quality code is highly dependent on high quality

02:10.100 --> 02:11.380
design.

02:11.480 --> 02:17.170
So this includes keeping classes separated preventing them from having to know too much about one another.

02:17.170 --> 02:21.430
All right this concept of coupling you don't want to have a lot of dependencies between classes.

02:21.440 --> 02:26.070
It'd be really nice if the class is very highly cohesive it does since it has a single focus inside

02:26.100 --> 02:27.010
its own.

02:27.020 --> 02:30.900
You can take it out you can remove it and it doesn't cause all sorts of problems.

02:30.920 --> 02:37.040
So these three concepts that are important in high quality design are encapsulation inheritance polymorphism

02:37.520 --> 02:40.870
in design patterns heavily use these concepts.

02:40.880 --> 02:45.680
It may not be direct inheritance maybe inheritance through interfaces but these are really important

02:45.680 --> 02:46.490
things.

02:46.490 --> 02:48.840
And this is why you want to study design patterns.

02:48.860 --> 02:53.420
You don't reinvent the wheel and you don't have to and it makes you become a very very high quality

02:53.420 --> 02:55.970
programmer and a high quality designer.

02:56.150 --> 02:59.750
You're gonna be one of the best out there coming up with solutions.

02:59.810 --> 03:04.640
Your employer or subsequent employees employers are gonna want to hire you because you know what you're

03:04.640 --> 03:08.120
doing because you're focusing on high quality.

03:08.270 --> 03:10.640
So this is why we use design patterns.

03:10.700 --> 03:16.520
We also use them because it improves communication either amongst your team or just code developers

03:16.520 --> 03:18.290
you're working with on other teams.

03:18.530 --> 03:20.170
You have this common platform right.

03:20.180 --> 03:24.830
We talked about design patents and what they do and how they have a name a description a problem.

03:24.950 --> 03:29.540
You can easily talk to your co-workers and say hey what do you think of the adapter in this in this

03:30.170 --> 03:31.520
particularly situation.

03:31.520 --> 03:33.150
Yeah I think that's a good solution.

03:33.200 --> 03:34.090
So it's good provide.

03:34.100 --> 03:39.470
It provides a good com point of reference during the analysis and design phase of a project.

03:39.560 --> 03:44.570
It allows you to describe your programming approach succinctly in terms that other programs can easily

03:44.570 --> 03:45.340
understand.

03:45.380 --> 03:49.760
You just throw around these words and it really speeds up the process.

03:49.850 --> 03:52.970
So program is conferred a program that uses a single object as a singleton.

03:52.970 --> 03:55.250
Hey hey Mike I need to use a singleton.

03:55.400 --> 03:57.310
Oh he knows exactly what you mean.

03:57.340 --> 03:59.290
Oh Singleton you only need to create one instance.

03:59.330 --> 03:59.790
All right.

03:59.810 --> 04:01.310
I use that before.

04:01.310 --> 04:03.040
That's a great solution.

04:03.500 --> 04:08.930
More on inexperienced junior team members can see that the senior developers who know the design patterns

04:09.260 --> 04:12.990
have something of value it makes them want to learn from you.

04:13.100 --> 04:13.350
Right.

04:13.370 --> 04:17.610
So the junior members will respect you more they'll ask you for help but want to learn from you.

04:17.660 --> 04:25.190
So provides motivation and it really really helps more low or low level or inexperienced programmers

04:25.940 --> 04:31.130
become better programmers by learning these powerful concepts.

04:31.130 --> 04:35.080
It also gives a higher perspective on the problem at a higher level.

04:35.210 --> 04:41.300
Again concerning design and object oriented analysis and design I don't go into analysis it is really

04:41.300 --> 04:46.970
a tough thing to understand you know analyze requirements come up with a really suitable design and

04:47.030 --> 04:53.540
if you can have that high perspective by understanding design patterns it's going to again it because

04:54.020 --> 04:56.940
abstraction is such a big deal when it comes to design patterns.

04:57.050 --> 05:01.850
You don't have to worry about the details too early when you look at a design pattern you understand

05:01.850 --> 05:04.760
them and you're now trying to solve a problem.

05:04.880 --> 05:11.900
You can take a step back so helps a designer get a design that is correct and of high quality much faster

05:12.170 --> 05:19.120
than it was in the past without using design patterns it improves modify ability and maintain ability

05:19.120 --> 05:20.100
of code.

05:20.140 --> 05:25.930
What this means is you can actually change the code much easier without breaking everything you can

05:25.930 --> 05:31.060
find and fix bugs much easier because if you use a design pattern that design pattern is very loosely

05:31.060 --> 05:35.990
coupled and so it's going to it's a very high cohesive code so you're going to be able to find a fix

05:35.990 --> 05:41.090
bugs easier and get coupling and cohesion I've used those terms we'll talk about in more detail but

05:41.480 --> 05:47.030
those are really important terms to understand when you have time tested solutions that have evolved

05:47.030 --> 05:52.330
into structures that can handle change more readily than will often first comes to mind as a solution.

05:52.370 --> 05:54.620
So you have to be able to change things.

05:54.650 --> 05:56.800
Software is constantly evolving.

05:56.870 --> 06:02.960
It's constantly changing and you have all these other team members or other developers modifying that

06:02.960 --> 06:03.350
code.

06:03.380 --> 06:06.800
If it's hard to change something it's gonna be a nightmare.

06:06.800 --> 06:14.570
So making the code easily changeable is going to be a big huge deal and design patterns allow that because

06:14.570 --> 06:19.910
the improved documentation results from the common terminology people.

06:19.970 --> 06:23.330
Again I mentioned this before but it's improved communication.

06:23.610 --> 06:29.460
The code is much easier to understand much easier to maintain because of these great patterns and solutions.

06:29.570 --> 06:31.240
So that's why we use design patterns.

06:31.240 --> 06:33.170
All right.

06:33.370 --> 06:36.980
You know really really important there to understand that if you don't understand why you're using them

06:36.980 --> 06:39.870
why you're studying them shouldn't really be in this course.

06:39.890 --> 06:43.670
It provides high quality solutions improves maintenance.

06:43.670 --> 06:47.320
Much easier to find bugs fixed problems.

06:47.390 --> 06:50.350
What specific problems are addressed by design patterns.

06:50.600 --> 06:55.430
Well they solve many of the day to day problems object oriented designers face in and they solve them

06:55.430 --> 06:57.290
in many different ways.

06:57.380 --> 07:02.900
So how do a data fire the appropriate objects to utilize or create one thing when you first are writing

07:02.900 --> 07:08.090
code and you first first start coming up with some kind of solution or design is an object oriented

07:08.090 --> 07:12.340
language you ask yourself what objects should I include in the system.

07:12.440 --> 07:15.880
And a lot of times you're you're you know you dump on you don't know where to start.

07:15.950 --> 07:22.460
Some classes may tell you OK well describe the system in terms of you know a narrative paragraph and

07:22.460 --> 07:28.400
then identify the nouns the nouns are going to be your objects but really the best way to understand

07:28.400 --> 07:32.660
what objects are appropriate for a given situation is through experience and through learning design

07:32.660 --> 07:38.570
patterns they greatly help identify objects and such because basically they're documented they tell

07:38.570 --> 07:40.500
you exactly what objects you need.

07:40.980 --> 07:46.040
So object packages both data and the procedures that operate on that data it's a problem that you have

07:46.040 --> 07:51.360
to identify and can help with design patterns how to specify object interfaces.

07:51.360 --> 07:51.550
All right.

07:51.560 --> 07:58.700
We all know what an interfaces its contract basically between a client and somebody that wants to use

07:58.700 --> 08:06.740
that and the interface itself interfaces are really really advantageous because they provide this abstraction

08:07.250 --> 08:09.740
and they allow for isolation.

08:09.740 --> 08:15.430
So when you come up with and how to identify an interface that's a problem that you face in design patterns

08:15.440 --> 08:21.440
can help with this every operation declared by an object specifies the operations name the object takes

08:21.470 --> 08:24.250
as parameters and the operations return value.

08:24.320 --> 08:26.680
This makes it very easy to create the interface.

08:26.960 --> 08:30.470
So the interface characterizes the complete set of requests that can be sent to the object

08:33.770 --> 08:35.700
how to specify object implementations right.

08:35.710 --> 08:38.010
We've come up with the objects in the system.

08:38.090 --> 08:40.180
We understand what interfaces we need.

08:40.250 --> 08:42.820
Now we need to actually go and implement.

08:42.880 --> 08:46.440
Well this is a common problem obviously implementing solutions.

08:46.490 --> 08:49.120
The implementation is defined design defined by the class.

08:49.130 --> 08:54.440
You know that and it specifies the objects internal data and representation in defines the operations

08:55.160 --> 08:56.930
that the object can perform.

08:56.930 --> 09:04.430
All of these things are helped by understanding design patterns design patterns have high level implementation

09:05.480 --> 09:07.760
that are gonna are gonna be descriptive scribed.

09:07.760 --> 09:15.320
So these three problems are reduced and help a lot if you understand design patterns the multiple sets

09:15.560 --> 09:17.560
you have available for you to you.

09:17.570 --> 09:22.920
The easier it is going to be able to identify the objects specify the interfaces and do the actual implementation.

09:22.970 --> 09:28.280
It's all about making you a better program or a high quality programmer and design patterns we'll do

09:28.280 --> 09:30.880
that.

09:30.890 --> 09:35.760
Problems of dust by design parents again continued determining object granulated.

09:36.110 --> 09:41.650
So we know objects can be very large and you can have many many objects right.

09:41.660 --> 09:45.650
Usually the more objects you have the harder it is to maintain if the objects are not cohesive and they

09:45.650 --> 09:46.580
have a ton of code.

09:46.580 --> 09:51.130
Again hard to maintain design patterns will provide that granularity.

09:51.170 --> 09:55.220
They'll say how big should this object be how many objects should you have.

09:55.310 --> 10:00.410
So the granularity can include size and number it also can represent everything down to the hardware

10:00.410 --> 10:02.990
all the way up to the entire application.

10:03.110 --> 10:06.280
So design patterns address this granular issue.

10:06.500 --> 10:11.390
For example the facade pattern that we're going to learn about describes how you can represent complete

10:11.390 --> 10:12.980
subsystems as objects.

10:12.980 --> 10:17.470
So right there it's going to tell you this is how many objects you need for this subsystem the away

10:17.480 --> 10:19.580
pattern we're going to.

10:19.580 --> 10:23.710
It will describe how to support huge number of objects at the finest granularity.

10:24.890 --> 10:29.950
Abstract Factory and builder are going to yield objects whose only responsibilities are creating other

10:29.950 --> 10:31.290
objects right.

10:31.290 --> 10:33.370
That's a level of granularity.

10:33.370 --> 10:34.990
How do I create this object.

10:34.990 --> 10:40.690
They identify that they have a common solution for that the visitor in the command will yield objects

10:40.690 --> 10:46.120
was only responsibilities are to implement a request on another object or group of objects so they have

10:46.120 --> 10:53.260
a single responsibility they're highly cohesive right in and again allows it easier to maintain the

10:53.260 --> 10:54.640
design in the code.

10:54.760 --> 10:59.280
To summarise design patterns advantages right.

11:00.040 --> 11:06.970
They allow for software reuse where you reuse these high quality solutions to commonly recurring problems.

11:06.970 --> 11:10.640
They also establish common terminology to improve communications with teams.

11:10.780 --> 11:15.910
We've talked about that they shift the level of thinking to a hiring perspective you don't get bogged

11:15.910 --> 11:20.320
down in the details when you're trying to solve a problem you first look at at a high level and then

11:20.320 --> 11:23.850
you try to solve it and you get down the details when you need to get down to the details.

11:24.310 --> 11:29.480
They decide whether you have the right design not just one that works right.

11:29.520 --> 11:33.350
It's a high quality design again because it's been tried and tested.

11:33.430 --> 11:37.820
It's the right design for that problem or for that situation.

11:37.900 --> 11:42.050
Design Patterns also improve individual learning and team learning.

11:42.130 --> 11:45.910
You can learn things quicker by understanding these concepts.

11:46.300 --> 11:49.910
It improves the modifiable ability quality of code.

11:50.050 --> 11:51.920
Code is constantly changing.

11:52.000 --> 11:57.670
If the code is so tightly coupled and it's so hard to change every time you need to add something new

11:57.700 --> 11:59.290
you're gonna break everything.

11:59.290 --> 12:04.720
So if you can make your code adaptable to change it's going to be a big deal in design parents like

12:04.720 --> 12:06.060
to do that.

12:06.340 --> 12:11.170
They facilitate adoption of improved design alternatives even when patterns are not used explicitly.

12:11.170 --> 12:15.400
So because of your knowledge base and because of the different solutions you have it allows you to come

12:15.400 --> 12:19.240
up with other solutions other alternatives.

12:19.240 --> 12:24.670
They discover alternatives to large inheritance hierarchy so it allows you to avoid using these gigantic

12:24.670 --> 12:28.450
inheritance hierarchies that a lot of developers tend to overuse.

12:28.540 --> 12:34.080
You can avoid that through the use of your experience with design patterns up to this point.

12:34.090 --> 12:39.650
I've described a lot of theoretical approaches or through theoretical definitions design patterns.

12:39.700 --> 12:40.860
What is the design pattern.

12:40.870 --> 12:41.590
Why do we use it.

12:41.590 --> 12:42.940
What are the advantages.

12:42.940 --> 12:46.170
Soon we're gonna get into more practical solutions.

12:46.180 --> 12:53.230
I'm going to talk more about Java code and more about design examples or implementation examples.

12:53.230 --> 12:57.250
But again it's important early on to understand what you're studying.

12:57.280 --> 12:58.450
Why do you want to study it.

12:58.450 --> 12:59.830
Why is it important.

12:59.830 --> 13:05.110
So the advantages and the definitions the high level overview I think is necessary.

13:05.380 --> 13:10.660
If you're getting bored you can just jump right in to some coding examples and start right off with

13:10.660 --> 13:14.260
some of the upcoming lectures on specific design patterns.

13:14.260 --> 13:20.020
But if you really want to have a good while rounding rounded understanding of why you use design patterns

13:20.110 --> 13:23.090
and the principles and strategies that you employ please stick with me.

13:23.590 --> 13:23.950
Thank you.
