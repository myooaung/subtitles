WEBVTT

00:05.140 --> 00:06.130
Hello and welcome.

00:06.280 --> 00:11.230
In this lecture I want to demonstrate a solution to our previous challenge which was implementing a

00:11.230 --> 00:15.760
singleton for a cricket match regarding a single captain.

00:15.760 --> 00:20.300
So let's go ahead and bring up intelligent men to create a new project it's just been named Singleton

00:20.300 --> 00:25.780
solution and it's going to meet the requirements of the challenge.

00:25.780 --> 00:28.960
So we know most of how to do this.

00:29.210 --> 00:36.150
So let's just call it a singleton solution.

00:36.240 --> 00:43.660
All right I'm going to start off by creating my singleton class and preview examples I've always named

00:43.660 --> 00:48.370
the singleton and that's usually a good name for the class if it is a singleton.

00:48.370 --> 00:57.310
But you also want to make the name somewhat relatable so I'm going to name this class make captain and

00:57.310 --> 01:01.000
again not a great name because usually class names you want to have them as nouns.

01:01.000 --> 01:06.370
This is more of a verb but again it's demonstrating the singleton and I'm not going to worry about naming

01:06.370 --> 01:08.950
conventions too much.

01:08.950 --> 01:16.370
So what I'm going to do here is I'm going to use the bill Pugh solution to create my Singleton instead.

01:17.070 --> 01:23.020
So if you remember from the implementation we're not going to create our instance inside of our main

01:23.020 --> 01:27.880
class we're going to create in the static nested class first thing we have to do for all static or all

01:27.880 --> 01:29.430
Singleton implementations.

01:29.440 --> 01:33.390
We have to create a private constructor so we're gonna do that.

01:33.390 --> 01:39.490
This ensures that no clients can actually create an instance of this object directly using new.

01:39.790 --> 01:46.540
So we'll do that and then we're gonna offer a bill Pugh solution for implementing the singleton and

01:46.540 --> 01:49.570
this is just creating that static inter class nested class.

01:51.430 --> 01:56.800
So here I'm going to create and this usually is the same name for the static nested class singleton

01:56.800 --> 02:01.740
help private static class singleton helper.

02:01.750 --> 02:06.580
Remember this is gonna create the contain the actual instance and then instantiate it in the get instance

02:06.580 --> 02:08.080
method or whatever you want to call it.

02:08.500 --> 02:21.320
So here we're going to act we're gonna say our private static final make a captain because it has to

02:21.320 --> 02:31.190
be a singleton make a big captain and this is just gonna be our captain we're going to use an underscore

02:32.120 --> 02:40.820
since private can name again however you want and we're gonna say new make a captain.

02:41.720 --> 02:41.980
All right.

02:41.990 --> 02:46.860
But this actually won't happen in class loading because it won't happen until the Singleton helpers

02:46.880 --> 02:50.910
actually access which will be inside the get instance method.

02:50.930 --> 02:57.580
So here we're just again creating our instance variable and instantiating it automatically.

02:57.620 --> 03:04.880
We now have two and actually I should just put a comment in here saying this nested class is referenced

03:06.020 --> 03:12.590
after and we're going to call the gate instance in this case get Captain get captain is called.

03:12.660 --> 03:21.560
So now we create our public static returns a singleton and make a captain and it's gonna say get captain

03:22.940 --> 03:26.950
and all this is gonna do is return the reference to the inner class.

03:27.020 --> 03:32.540
So it's going to return Singleton helper dot underscore.

03:32.920 --> 03:33.430
Captain

03:38.360 --> 03:39.690
all right.

03:39.870 --> 03:48.110
And then we're going to end our brackets and we've got the bracket for the static method and their brackets

03:48.120 --> 03:50.170
there make sure other brackets line up.

03:50.250 --> 03:55.920
And there we go and that's implementing the Singleton using the bill Pugh solution pretty straightforward.

03:55.920 --> 03:56.320
Right.

03:56.340 --> 04:02.790
We have our private constructor we have our Singleton nested inter class we have our instance variable

04:03.420 --> 04:08.130
that's gonna get instantiated looks like it's gonna get the statue to class loading which will happen

04:08.430 --> 04:11.260
when we call the get Captain method and we access that member.

04:11.280 --> 04:16.210
Now we have to implement a test or remain class that demonstrates that this works.

04:16.270 --> 04:24.090
Somebody create the main actually in the same class as make captain and when to have a public static

04:26.280 --> 04:30.270
void main again pretty straightforward stuff.

04:33.270 --> 04:39.030
And what this is gonna do is I'll first print out a couple I'll put statements that specify what we're

04:39.030 --> 04:47.560
trying to do so I'm going to print out that this is a demo for the Singleton pattern and that also we're

04:47.560 --> 04:52.960
gonna try to make captain so a couple of statements so we know what's going on then I'm gonna to actually

04:52.960 --> 04:59.740
try to create a captain and since we haven't created one before it should work the way we create one

04:59.740 --> 05:07.390
is we just call the get captain so we say make a captain dot kit Captain

05:11.130 --> 05:12.370
something like that.

05:12.600 --> 05:14.960
I do have a problem with the red there.

05:14.970 --> 05:22.890
I want to make sure that the single the helper class ends with the instance variable and the method

05:22.980 --> 05:25.990
is actually part of the make Captain class.

05:26.010 --> 05:28.260
So there we go.

05:28.500 --> 05:38.350
And now that red goes away we also want to test by creating another instance as I mentioned we're gonna

05:38.350 --> 05:50.620
display a message first saying trying to print trying to create another object so we'll just say trying

05:52.330 --> 06:02.020
to make another captain for our team and then all we can do is we can compare references after we create

06:02.020 --> 06:08.710
this other one to make sure that they are singletons so we can may say make Captain see two equals make

06:09.790 --> 06:11.920
Captain dot get Captain

06:16.750 --> 06:18.250
which will return the same.

06:18.250 --> 06:31.270
And then we can verify that by saying if c 1 equal C 2 we can just print out a message saying c 1 and

06:31.270 --> 06:35.150
C two are the same instance right.

06:35.200 --> 06:39.640
And notice we use the equals equals here because that will they'll compare references not the contents

06:40.240 --> 06:49.030
of the object so let's go out and compile and run this and see what the output is so we compiled successfully.

06:49.040 --> 06:54.870
Let's make sure you run this.

06:55.020 --> 06:59.000
OK so we ran it and we see the output Singleton paddle pattern demo.

06:59.010 --> 07:03.830
We try to make a captain for our team we try to make another captain for our team that doesn't succeed.

07:03.990 --> 07:06.970
And in fact C1 and C two are the same instance.

07:06.990 --> 07:07.850
So there we go.

07:07.890 --> 07:11.640
This is how you can implement the Singleton using Bill P approach.

07:11.640 --> 07:17.870
Notice again no member variable inside the make a captain for the instance.

07:17.880 --> 07:18.130
Right.

07:18.150 --> 07:20.340
We have a static in her class.

07:20.490 --> 07:25.500
We close that in her class by just having the instance in there that actually doesn't get loaded until

07:25.500 --> 07:29.590
we call get help there get Captain which is the same as get instance.

07:29.640 --> 07:34.520
We then create a couple instances make sure the same and we're good to go thank you.
