WEBVTT

00:05.140 --> 00:05.540
Hello.

00:05.540 --> 00:08.920
This lecture I want to talk about another way to implement the factory method.

00:08.990 --> 00:13.490
Previous lecture I showed you the strictest way to implement it in terms of this was the way the Gang

00:13.490 --> 00:18.210
of Four designed it and it had an abstract creator had a lot of subclasses.

00:18.500 --> 00:24.500
It was really really strict to the class diagram from the getting a four book in this implementation

00:24.830 --> 00:29.120
I'm going to show you a more common way to implement it so you don't have so many subclasses.

00:29.120 --> 00:30.920
So this is the most common implementation.

00:30.920 --> 00:34.680
This is the second way I'm going to show you I want to show you a third as well.

00:34.730 --> 00:40.430
This includes creating a single concrete creator class so you don't have all these creator classes that

00:40.430 --> 00:44.270
are subclass from the greater abstract interface.

00:44.270 --> 00:50.010
In this case you just have a single creator class that's implementing the interface so the creator class

00:50.010 --> 00:54.550
is one concrete class you had implementation code to one factory method.

00:54.560 --> 00:59.570
Inside this concrete class and the implementation code will create the right product type based on a

00:59.570 --> 01:06.140
parameter you pass to the method and the parameter you pass to the method is usually a string that describes

01:06.650 --> 01:07.850
the product that you want to create.

01:09.100 --> 01:14.710
So to use the factory method to create the objects you create an instance of the Creator class and then

01:14.710 --> 01:19.360
you invoke the factory method and the argument that you pass would just be like the name of the class

01:19.390 --> 01:21.300
the name of the product that you want to create.

01:21.320 --> 01:27.770
It's pretty simple the advantage of this approach is that you don't need to create a subclass a new

01:27.770 --> 01:30.630
subclass for every single product.

01:30.860 --> 01:39.500
A new factory in our example we had a shape fact we had an a square Abstract Factory method a circle

01:39.500 --> 01:44.840
and so forth and you had to have subclass reach one this in this instance implementation you only have

01:44.840 --> 01:45.760
to have one.

01:45.770 --> 01:47.200
So it simplifies things quite a bit.

01:47.210 --> 01:53.120
And this is again the most common way you'll see things so we're going to run through the same example

01:53.120 --> 01:55.290
that we did previously in intelligence.

01:55.550 --> 01:57.010
Just to refresh your memory.

01:57.230 --> 02:00.340
This is the concept of shapes we're going to create different types of shapes so we're gonna have a

02:00.340 --> 02:05.030
shape interface that represents our product interface and then we can have a bunch of classes and implement

02:05.030 --> 02:05.810
that interface.

02:05.810 --> 02:12.980
Circle square rectangle we're then going to have a creator class the creator class is going to contain

02:12.980 --> 02:14.040
the factory method.

02:14.060 --> 02:19.370
We're only going to have one class that implements that interface or one subclass of that base class

02:19.820 --> 02:25.370
and that will take a parameter the method vector math will take a parameter depending on to determine

02:25.370 --> 02:30.320
how it will instance to create and then we'll create our client class which will use the shape factor

02:30.320 --> 02:31.340
to get a shape object.

02:31.340 --> 02:36.170
And it just passes the information across so the class diagram for that is going to look something like

02:36.170 --> 02:40.820
this shape interface for our products circle square rectangle.

02:40.820 --> 02:43.990
None of that changes from our previous implementation that's the same.

02:44.000 --> 02:49.700
The difference here is we only have one shape factory and the shape factory has a single factory method

02:50.030 --> 02:53.470
that takes a parameter and this will be clear when we bring it up in intelligence.

02:53.480 --> 02:58.850
So let's bring up an Intel g to show you how to implement this nice way of implementing the factory

02:58.850 --> 02:59.210
method

03:05.270 --> 03:11.810
going to create another product which is going to be our second example we'll call it the factory concrete

03:11.820 --> 03:12.930
creator example

03:19.330 --> 03:26.100
so factory factory concrete creator.

03:26.370 --> 03:26.940
Example

03:33.740 --> 03:37.400
The first thing we're going to do is we're going to create our shape interface which represents our

03:37.400 --> 03:41.840
product and those concrete classes we'll do this kind of quickly because we already went through this

03:41.840 --> 03:43.580
in our last lecture.

03:43.580 --> 03:47.230
So I'm going to copy and paste some code in here again it should be very familiar.

03:47.240 --> 03:53.930
We have our public interface shape and then we just have a rectangle circle and square that implements

03:53.930 --> 04:00.670
this and I'm going to make these default access so I don't have to worry about put them in separate

04:00.670 --> 04:03.160
files rectangle

04:06.600 --> 04:08.790
again square and circle

04:13.320 --> 04:19.230
these are our products again after we create our products we then need to create our abstract creator

04:19.910 --> 04:21.540
in a single subclass that implements that.

04:22.440 --> 04:23.990
So here we have this.

04:24.120 --> 04:29.880
Now we need to create our shape factoring in this case our shape factory doesn't even necessarily have

04:29.880 --> 04:33.620
to be an interface since it's just one concrete implementation.

04:33.660 --> 04:39.650
Sometimes you'll see the the creator have an interface and then a concrete one concrete creator but

04:39.660 --> 04:43.410
you can simplify it even further by just creating a single shape factory.

04:44.190 --> 04:47.760
Let's create a new job a class will call a shape factory

04:52.240 --> 04:57.460
and this class is going move a month the factory method it's basically going to have a get shape method

04:57.670 --> 05:03.070
which is our factory method and that member that's gonna take a parameter for the type of shape to create

05:03.130 --> 05:04.720
it's going to take a string.

05:04.720 --> 05:11.700
So here we're gonna use this shape method to get an object of type shape.

05:11.740 --> 05:15.250
This is our factory method so I'll name it public.

05:15.250 --> 05:19.680
It's going to return a shape reference that's going to be named get shape and it's going to take a string.

05:19.690 --> 05:23.640
This is the key here and this implementation the parameter of the sketch sheet method.

05:23.650 --> 05:29.500
This is just going to represent the shape type that you want to create and a lot of times you'll see

05:29.500 --> 05:33.060
this created with a switch statement or a bunch of other statements.

05:33.070 --> 05:38.320
Now if the shape type you're passing in is no then you just want to return null.

05:39.010 --> 05:41.450
So we could just say return.

05:41.450 --> 05:49.080
No we're just going to make sure that a little validation and shape type equals or

05:52.120 --> 06:01.930
else if the shape type that equals and we'll say equals in your case just to make it more robust if

06:01.930 --> 06:07.210
it equals a circle all caps then we want to create a circle object right.

06:07.450 --> 06:12.850
So we're just going to say return to circle house.

06:13.270 --> 06:22.290
If the shape type equals ignore case and in this case it's going to be a rectangle.

06:23.140 --> 06:25.130
Then we're gonna return a new Rectangle.

06:25.180 --> 06:27.280
You see how easy the factory method is now.

06:27.340 --> 06:29.140
It's a single factory method.

06:29.140 --> 06:33.220
We're just a bunch of statements.

06:34.210 --> 06:38.530
We don't have to have a separate subclass for every single factory method.

06:38.530 --> 06:45.410
And then lastly we say if the change type equals square we'll return a square.

06:45.430 --> 06:48.760
And I chose to do all caps are it's not always necessary

06:51.040 --> 06:53.630
parentheses.

06:53.670 --> 06:55.500
No that's good.

06:55.500 --> 06:57.150
Here we're gonna say return to square

07:01.410 --> 07:11.810
and just to do our catch all you're gonna say return no otherwise we'll have an error.

07:11.950 --> 07:15.720
And so this is our simple factory method pretty straightforward just takes a parameter.

07:15.730 --> 07:16.000
Right.

07:16.000 --> 07:17.240
Much easier.

07:17.320 --> 07:22.210
Now we create our client and we don't have to create an instance of every single subclass we can just

07:22.210 --> 07:27.210
create one instance of the same factory and pass and strengths.

07:27.220 --> 07:29.780
So let's create a new client

07:33.480 --> 07:36.180
again this will have a public static void Main

07:44.160 --> 07:47.340
and this will just use the factory to create some different shapes.

07:47.340 --> 07:52.770
The key here is we just have to create one concrete class our shape factory.

07:52.770 --> 07:55.890
And then here we can name its shape factory.

07:55.890 --> 07:57.140
We do this right at the top.

07:57.150 --> 08:05.390
It's a new shape factory and then we can just get different types of objects by calling our shape factory

08:05.390 --> 08:08.880
get shape factory method and then passing in the correct parameters.

08:08.880 --> 08:12.360
So if we want to circle we would use to do something like this.

08:12.360 --> 08:17.730
We would pass on the circle string to our give shape and it will return a circle object.

08:17.730 --> 08:24.510
Then when we call the draw method on it it will call the circle draw method and we can also do that

08:24.510 --> 08:25.860
for both of the other objects.

08:25.860 --> 08:32.690
The rectangle and the square and then also draw the

08:37.420 --> 08:45.030
so we get an object of rock table rectangle called Shape method and then square at the bottom but we

08:45.030 --> 08:51.940
don't have to create a subclass for every single product because the product correlates to the Creator.

08:51.940 --> 08:54.800
We don't have to do that.

08:54.920 --> 08:59.870
So now when we build and run this we should see the same output that we saw on the previous example.

08:59.870 --> 09:05.150
Just basically three output output data for each instance that was created.

09:05.150 --> 09:06.900
So we run this.

09:06.950 --> 09:12.110
We run the client and you'll notice the outputs the exact same as the previous example we're calling

09:12.110 --> 09:14.900
the draw method for the circle rectangle square.

09:14.900 --> 09:20.870
This is a bit similar and again simple than the previous example and also just more common these.

09:20.960 --> 09:26.720
When you look at factory method you'll typically see this with a parameter in the method itself of the

09:26.720 --> 09:34.540
factory method and then the client is passing in the type the string that they want to create a nice

09:34.630 --> 09:36.340
easy solution.

09:36.340 --> 09:36.820
Thank you.
