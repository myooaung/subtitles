WEBVTT

00:05.160 --> 00:06.890
Hello and welcome back.

00:07.020 --> 00:10.490
In this lecture I'd like to talk about composition over inheritance.

00:10.500 --> 00:13.510
This is the second design principle that we're gonna discuss.

00:13.520 --> 00:18.030
It's basically saying use a has a relationship over and is a relationship.

00:18.030 --> 00:22.790
I know of your part familiar with these two terms because you use them a lot in Java.

00:23.100 --> 00:29.580
But just to give you a little bit of a reminder let's talk about composition first.

00:29.580 --> 00:34.920
So composition as I mentioned it's a has a relationship between classes to use an object going to design

00:35.880 --> 00:39.920
one object contains or owns another object as a member variable in the class.

00:39.960 --> 00:46.810
It's really not that simple composition implies a relationship where the child can not exist independent

00:46.810 --> 00:47.660
of the parent.

00:47.680 --> 00:52.270
I briefly touched on the concept of composition versus aggregation.

00:52.270 --> 00:56.140
Those terms tend to be used interchangeably but they do have subtle differences.

00:56.140 --> 00:59.300
And so this is again is another reminder of that difference.

00:59.410 --> 01:03.490
Composition is independence something is part of another thing.

01:03.490 --> 01:06.550
So for example it is not independent.

01:06.540 --> 01:08.280
So for example wheels on an airplane right.

01:08.290 --> 01:13.700
Wheels don't necessarily exists somewhere else beside the airplane.

01:13.730 --> 01:17.620
You know we know that wheels could be somewhere else but they're kind of useless in the context of an

01:17.620 --> 01:18.240
airplane.

01:18.250 --> 01:20.500
You can't just use them by themselves.

01:20.500 --> 01:23.230
Another example would be rooms in a house.

01:23.230 --> 01:26.260
Each house has a room or has many rooms.

01:26.260 --> 01:33.200
Rooms do not exist separate outside of the house so there's no independence their cells and a body would

01:33.200 --> 01:37.850
be another example when the body object is destroyed the cells get destroyed with it they don't exist

01:37.850 --> 01:45.320
independent of the object they're contained in when you put two classes together like this you're using

01:45.320 --> 01:51.740
composition instead of inheriting their behavior the houses get their behavior by being composed with

01:51.740 --> 01:58.850
the right behavior object right this has the object you're going to use that object it's its attributes

01:58.850 --> 02:05.600
and its methods and create instances of it composition is used in many many design patterns and that's

02:05.600 --> 02:11.460
why it's important understand the difference especially between aggregation so aggregation we talked

02:11.460 --> 02:17.400
about again another has a relationship very closely related the composition the difference being is

02:17.700 --> 02:24.870
the child can exist independently of the parent composition cannot exist independently aggregation can

02:24.870 --> 02:28.800
exist independently a collection of things that are not part of it.

02:29.370 --> 02:36.170
So for example airplanes at an airport students in a class you can get rid of the class and the students

02:36.170 --> 02:42.110
will still exist tires on a car the tires can be taken off the car and installed on a different one

02:42.890 --> 02:46.280
you could ask yourself the same question with wheels in an airplane right.

02:46.340 --> 02:47.760
It depends on the context.

02:47.930 --> 02:53.150
Wheels on an airplane could be taken off one airplane put out another plane as well but in that context

02:53.570 --> 02:56.460
they don't exist separately when they're on an airplane.

02:57.960 --> 03:03.750
It's all about context aggregation and composition are almost completely identical except that the composition

03:04.230 --> 03:09.210
is used when the life of the child is completely controlled by the parent right.

03:09.280 --> 03:16.460
So that would be in competition it has a relationship the parent is the class and then the actual child

03:16.550 --> 03:18.350
is the object that's inside that class.

03:19.850 --> 03:20.050
Right.

03:20.080 --> 03:22.730
And it's not as big a deal as I mentioned previously.

03:22.900 --> 03:26.500
When you have languages that have garbage collection like Java because you have to worry about the lifetime

03:26.500 --> 03:29.050
of the object you have to worry about when things get deleted.

03:29.350 --> 03:33.270
It's much more prevalent in C++.

03:33.390 --> 03:37.050
Now this principle is all about using composition over inheritance y.

03:37.050 --> 03:38.030
That's a good thing.

03:38.690 --> 03:43.760
One of the reasons we want to favor object composition over class inheritance is because of encapsulation

03:44.600 --> 03:50.870
it keeps each class encapsulated and also cohesion it focuses on one task so your classes and your class

03:50.870 --> 03:56.480
hierarchies will remain small and we'll be less likely to grow into unmanageable monsters and we try

03:56.480 --> 04:03.050
to avoid that we know that there are many disadvantages of having these big class hierarchies they become

04:03.080 --> 04:04.250
unmanageable.

04:04.400 --> 04:09.680
So we want to avoid that and competition helps us avoid that by using more of a has a relationship

04:12.160 --> 04:17.600
inheritance breaks encapsulation because subclasses are dependent on the base class behaviour.

04:17.710 --> 04:23.300
Right we don't have that isolation inherent it's as tightly coupled whereas composition is loosely coupled.

04:23.300 --> 04:29.090
Again we hear those really popular terms coupling there's no dependencies so there's less dependencies

04:29.090 --> 04:31.630
in composition versus inheritance.

04:31.820 --> 04:38.210
And again composition also includes aggregation when behavior of Superclass changes functionality and

04:38.210 --> 04:43.830
subclass may get broken and that's really about coupling and you didn't change a subclass at all but

04:43.830 --> 04:46.210
now some it's broken because of that dependency.

04:46.210 --> 04:54.130
Again a disadvantage isolation loose coupling is a big big goal job does not support multiple inheritance

04:54.670 --> 05:00.640
composition can be a workaround to this if you really really need it most designers will say good it

05:00.640 --> 05:05.380
doesn't support multiple inheritance multiple inheritance causes a lot of issues but again there are

05:05.380 --> 05:06.920
times and I mentioned this before.

05:07.000 --> 05:10.210
Some design patterns why you to use it.

05:10.210 --> 05:16.480
Composition can work around that by having a has a relationship with many different objects.

05:16.480 --> 05:19.960
Most design paint patterns favor composition over inheritance.

05:19.960 --> 05:24.490
You'll notice us when we talk about the strategy and the decorator design patterns they're going to

05:24.490 --> 05:30.280
use a has a relationship they're not going to have a class of hierarchies if design patterns use composition

05:30.730 --> 05:34.190
then that means it has been tried and tested right.

05:34.320 --> 05:42.090
Because again we know that sine patterns have been identified by very experienced developers and designers

05:42.180 --> 05:46.170
and they have been used quite a bit for many many years so we know they work.

05:46.230 --> 05:49.690
And so if they're using composition that usually means a good thing.

05:49.860 --> 05:54.660
Composition offers better test ability of a class than when using inheritance.

05:54.660 --> 06:00.630
We don't focus a lot on testing in this class but testing is huge unit testing in particular and you'll

06:00.630 --> 06:05.300
notice one of the big things or one of the big advantages of using a TDD approach was this Tester and

06:05.310 --> 06:10.710
development is the fact that when you write your test first they tend to be more loosely coupled and

06:10.710 --> 06:15.090
they force you to write your implementation code in a more cohesive manner.

06:15.210 --> 06:22.260
So getting your code under test is a big advantage the easier that is usually means that your code is

06:22.260 --> 06:23.330
more well written.

06:23.700 --> 06:30.150
And so if a code is easier to test the code is usually you're doing a good job with code and one way

06:30.150 --> 06:32.380
of doing that is using composition.

06:32.430 --> 06:35.580
So when you test your classes you tend to use mocking.

06:35.640 --> 06:41.100
This is really just getting rid of the external dependencies and it's very easy to add this mock implementation

06:41.570 --> 06:43.980
for classes that are using composition.

06:44.040 --> 06:49.020
So again another advantage when designing using inheritance it's much harder to test because you have

06:49.020 --> 06:53.100
to mark both the base in the subclasses because you have that coupling and you have that dependency

06:53.100 --> 06:54.900
with subclasses and base classes.

06:54.900 --> 07:03.250
It's always harder to test things with tightly coupled objects just because of dependencies unit testing

07:03.250 --> 07:06.120
is one of the most important things to consider there is software development.

07:06.140 --> 07:08.860
Again I talked about test development the importance of that.

07:09.040 --> 07:14.300
But for those of you that are experienced out there you should understand the advantage of test ability.

07:14.300 --> 07:15.890
A big big deal.

07:16.440 --> 07:19.610
So composition allows for that test ability much much better.

07:19.630 --> 07:20.650
How about software use.

07:20.650 --> 07:23.460
How does composition inheritance relate to that.

07:23.530 --> 07:29.250
They both promote software reuse just using different approaches so they both are doing that.

07:29.250 --> 07:32.300
We know that software reuse is a vital vital goal.

07:32.380 --> 07:33.760
It saves time.

07:33.760 --> 07:35.930
It reduces obviously redundancy.

07:36.070 --> 07:40.210
It's just a really good goal that you want to have when you implement your code.

07:40.360 --> 07:45.670
And so one of the things though that happens is because it's so important to reuse software.

07:45.670 --> 07:49.890
Designers tend to overuse inheritance because inheritance is one of the most basic approaches to software

07:49.900 --> 07:52.660
reuse so they use inheritance a ton.

07:52.660 --> 07:58.300
They have these big big class hierarchies and they become unmanageable chunks designs are often made

07:58.300 --> 08:03.500
more reusable and simpler by depending more on object composition OK.

08:03.540 --> 08:07.530
So it's just easier when you're doing object composition reasonable so another reason why you favor

08:08.010 --> 08:11.460
composition over inheritance.

08:11.700 --> 08:16.680
You don't want to use it here and it's just for the sake of code reuse which again happens a lot because

08:16.680 --> 08:18.590
this is the only approach that most developers know.

08:18.590 --> 08:22.490
They say I'll reuse inheritance they automatically think those two things go together.

08:22.590 --> 08:27.420
Composition is more flexible it's more extensible when reusing existing code.

08:27.870 --> 08:30.030
So if you're thinking reuse don't just think inheritance.

08:30.030 --> 08:35.690
Also think composition because of the flexibility you're using an extensive military you should be able

08:35.690 --> 08:40.790
to get all the functionality you need just by assembling existing components through object composition

08:41.630 --> 08:45.860
you can get all that software reuse just by including the objects as member variables in your class

08:47.430 --> 08:52.760
composition also allows for coder use from final classes you can't do that with inheritance right.

08:52.770 --> 08:58.830
We know that the final keyword in Java eliminates subclasses says this class cannot be subclass and

08:58.830 --> 09:02.820
so you don't have the advantage of software reuse when you have final classes.

09:03.210 --> 09:08.960
That is not a limitation when you use composition you just still include those final objects.

09:08.970 --> 09:10.070
So that's another advantage.

09:12.460 --> 09:13.240
Software reuse.

09:13.240 --> 09:17.680
I wanted to include this little tidbit about software used from head first design patterns.

09:17.800 --> 09:23.320
It was just kind of a cool thing I came upon that I thought you can really really help with inheritance

09:23.320 --> 09:26.080
and reuse and how it's overused and so forth.

09:26.080 --> 09:29.080
So here's a little expert and I'll just read it through again.

09:29.260 --> 09:34.150
You can skip through this if you're if you're bored but basically there's two there's two people talking

09:34.150 --> 09:35.560
here the master and the student.

09:35.560 --> 09:39.240
The master tells the student what have you learned about object oriented ways.

09:39.250 --> 09:44.350
The student says I've learned that the promise of the object oriented way is reuse right.

09:44.560 --> 09:47.740
Object oriented software reuse is a big deal.

09:47.740 --> 09:52.480
Then the master says OK go ahead and continue and the student says well through inheritance all good

09:52.480 --> 09:53.940
things may be reused.

09:54.130 --> 09:59.050
And so we come to drastically cut development time because we don't have duplication we can swiftly

09:59.050 --> 10:04.500
cut bamboo in the winds just like we can simply come bamboo in the woods for example the master says

10:04.500 --> 10:11.460
okay is more time spent on code before or after development is complete student says after we always

10:11.460 --> 10:14.800
spend more time maintaining and changing software than initial development.

10:14.940 --> 10:19.290
And I've mentioned that many times the maintenance phase is the most expensive software lifecycle because

10:19.290 --> 10:25.500
you're constantly maintaining fixing bugs and the product tends to be out in the real world for a number

10:25.500 --> 10:27.060
of years 10 or 15 years.

10:27.060 --> 10:30.780
So after is always more more time spent.

10:30.780 --> 10:32.180
So then the master says OK.

10:32.190 --> 10:38.870
Should the effort go into reuse above maintain stability and sex to the extent ability and the student

10:38.870 --> 10:40.520
says Yeah I think it should.

10:40.580 --> 10:44.900
Well you just said that maintain ability is more important.

10:44.930 --> 10:49.580
So why now are you saying that you should more focus on reuse so the master says I can see that you

10:49.580 --> 10:50.990
still much to learn.

10:51.050 --> 10:55.400
I would like for you to go and meditate on inheritance further as you've seen adherence has its problems

10:55.430 --> 10:58.000
and there are other ways of achieving reuse.

10:58.370 --> 11:04.320
So the point in this article again is don't go crazy about reuse by by using inheritance.

11:04.400 --> 11:06.350
It's not even the most useful thing right.

11:06.360 --> 11:13.250
Maintain ability is more important and if it's easier to maintain reuse through composition do that

11:13.250 --> 11:16.990
focus on maintain ability flexibility and sensibility.

11:17.090 --> 11:18.930
Again just a little thing I wanted to share.

11:19.040 --> 11:24.950
I thought it was interesting read and really got the point across in terms of how we tend to overuse

11:24.950 --> 11:31.750
inheritance when we talk about software reuse So to summarize creating systems using composition gives

11:31.750 --> 11:33.430
you a ton of flexibility.

11:33.920 --> 11:37.930
It lets you encapsulate a family of algorithms into their own set of classes where you just include

11:37.930 --> 11:41.090
many objects with a has a relationship as member variables.

11:41.090 --> 11:45.670
It lets you change behaviour runtime as long as the object you're composing with implements the correct

11:45.670 --> 11:50.920
behaviour interface you can use polymorphism and you can pass around the reference type.

11:50.920 --> 11:57.100
We kind of saw that when we talked about programming to an interface a design based on object composition

11:57.100 --> 12:02.710
we'll have more objects might have fewer classes but you more may have more instances of objects the

12:02.710 --> 12:07.330
systems behaviour will depend on the interrelationships instead of being defined in one class.

12:07.450 --> 12:09.890
So that's good to good to understand.

12:10.090 --> 12:12.830
There are many more reasons to favour composition over inheritance.

12:12.910 --> 12:17.800
We'll see that as we study the design patterns and detail that use composition.

12:18.010 --> 12:23.140
You'll you'll learn all about that and see the benefits of has relationships over and is our relationship

12:23.260 --> 12:23.860
very important.

12:24.490 --> 12:24.880
Thank you.
