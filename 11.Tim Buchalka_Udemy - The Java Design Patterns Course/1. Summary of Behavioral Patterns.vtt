WEBVTT

00:05.640 --> 00:06.960
Hello and welcome.

00:06.960 --> 00:12.990
We're all done studying our gang of twenty three design patterns and we just finished up our behavior

00:12.990 --> 00:17.790
patterns and there were quite a bit of them roughly 11 behavior design patterns.

00:17.790 --> 00:22.290
So in this lecture I just wanted to summarize I want you guys to reflect on all those behavior design

00:22.290 --> 00:28.110
patterns and kind of understand some of their general characteristics and also the differences between

00:28.500 --> 00:29.890
some of the patterns.

00:29.910 --> 00:33.870
So let's start off by just mentioning that encapsulating variation.

00:34.110 --> 00:39.270
This is a theme of many of the behavior patterns you should have known as this encapsulating variation

00:39.270 --> 00:41.550
is a very very important concept.

00:42.090 --> 00:47.220
When an aspect of a program changes frequently these patterns define an object that encapsulates that

00:47.220 --> 00:53.820
AFC right things that change are encapsulated this makes it so other parts the program can collaborate

00:53.820 --> 00:57.550
with the object whatever they depend on that aspect right.

00:57.570 --> 01:00.340
This theme runs through other kinds of patterns.

01:00.540 --> 01:03.330
In addition to the behaviors but it's really popular.

01:03.360 --> 01:07.410
You see this in the Abstract Factory the builder and the prototype.

01:07.440 --> 01:11.660
They all encapsulate knowledge about how objects are created.

01:11.730 --> 01:16.230
The decorator in capsules capitalists responsibility that can be added to an object.

01:16.350 --> 01:19.770
The bridge separates an abstraction from its implementation.

01:19.890 --> 01:25.980
Let them the very independently also with encapsulating variation the strategy object encapsulates an

01:25.980 --> 01:33.240
algorithm the state object encapsulates a state dependent behavior a or object encapsulates the protocol

01:33.240 --> 01:35.410
between objects.

01:35.460 --> 01:37.480
This is a common common theme.

01:37.650 --> 01:42.860
The iterator encapsulates the way you axis and traverse the components of an aggregate object.

01:43.840 --> 01:44.000
Right.

01:44.160 --> 01:46.960
So encapsulating variation very important.

01:46.960 --> 01:52.390
It really promotes that loose coupling not all object behavior patterns work like this.

01:52.390 --> 01:58.180
So for example the chain of responsibility deals with an arbitrary number of objects all of which majority

01:58.180 --> 02:00.180
exists in the system.

02:00.190 --> 02:05.890
Another thing that we discussed was objects as arguments write several patterns introduce an object

02:05.890 --> 02:12.550
that is always used as an argument a visitor object which we just discussed is an argument to a polymorphic

02:12.550 --> 02:15.410
except operation on the object of visits.

02:15.430 --> 02:18.060
The visitor is never considered a part of those objects.

02:19.380 --> 02:25.360
Other patterns define objects to act as magic tokens to be passed around invoked at a later time right

02:25.560 --> 02:26.820
in the Command pattern.

02:26.820 --> 02:32.640
The Tokens represent a request and the momento represents the internal state of an object at a particular

02:32.640 --> 02:33.740
time.

02:33.810 --> 02:39.570
In both cases the token can have a complex internal representation but the client is never aware of

02:39.570 --> 02:41.470
it and again that's key.

02:41.550 --> 02:49.080
That separation polymorphism is important in the Command pattern executing the command object is a polymorphic

02:49.080 --> 02:56.790
operation right and we saw polymorphism also used in strategy and in the state the mental interface

02:56.820 --> 03:00.860
is so narrow that a momento can only be passed as a value right.

03:00.870 --> 03:08.270
We often enclose the memento pattern as an inner class the memento it's likely to present no polymorphic

03:08.270 --> 03:14.460
operations at all to its clients so it's a little different let's talk about the mediator versus the

03:14.460 --> 03:17.340
observer the mediator an observer.

03:17.340 --> 03:19.320
There are competing patterns right.

03:19.320 --> 03:25.800
The Observer distributes communication by introducing an observer and subject objects the mediator object

03:25.800 --> 03:28.980
encapsulates the communication between other objects.

03:28.980 --> 03:33.120
Also in the observer pattern there's no single object that encapsulates a constraint.

03:33.540 --> 03:37.310
The observer in the subject must cooperate to maintain the constraint.

03:37.320 --> 03:39.730
A single subject usually has many observers.

03:39.750 --> 03:46.550
We've seen that sometimes the observer once object is the subject of another observer right in the mediator

03:46.550 --> 03:47.420
pattern.

03:47.420 --> 03:49.700
This centralize is rather than distribute it right.

03:49.700 --> 03:55.430
That's one of the big benefits of the media that centralized location for all communication it places

03:55.430 --> 04:01.660
the responsibility for maintaining a constraint squarely in the mediator it's easier to make reusable

04:01.660 --> 04:08.210
observers and subjects than to make reusable mediators on the other hand it is easier to understand

04:08.210 --> 04:11.570
the flow of communication in the mediator than in the Observer.

04:11.570 --> 04:15.620
The Observer and the subjects are usually connected shortly after they have been created.

04:15.620 --> 04:19.180
It's often hard to see how they are connected later in the program.

04:19.220 --> 04:25.620
The level of interaction that the observer introduce will make a system harder to understand let's also

04:25.620 --> 04:31.040
talk about decoupling senders and receivers which is a common theme of these behavior patterns.

04:31.050 --> 04:35.560
All right we saw that when collaborating objects refer to each other directly they become dependent

04:35.560 --> 04:36.410
on each other.

04:36.430 --> 04:39.060
We know that dependencies are not a good thing.

04:39.280 --> 04:43.690
They can have an adverse impact on the layering in their usability of a system.

04:43.690 --> 04:45.420
They introduced bugs as well.

04:45.670 --> 04:49.900
The command the observer the mediator and the chain of responsibility address how you can decouple the

04:49.900 --> 04:53.420
senders and receivers but with different tradeoffs.

04:53.530 --> 04:58.840
So for example the command pattern supports decoupling by using a command object to define the binding

04:58.840 --> 05:01.680
between the sender and receiver.

05:01.700 --> 05:03.500
That's one difference.

05:03.500 --> 05:06.710
Behavior patterns also work together.

05:06.710 --> 05:11.900
They complement and reinforce each other a class and a chain of responsibility will probably include

05:11.900 --> 05:14.010
at least one application of a template method.

05:14.750 --> 05:19.670
The template method can use primitive operations to determine whether the object should handle the request

05:19.870 --> 05:21.890
and to choose the object of forward to.

05:21.980 --> 05:27.380
That would be a very good use case a class in the chain of responsibility can use the command pattern

05:27.440 --> 05:29.790
to represent request as objects.

05:30.260 --> 05:37.690
An interpreter can use the stay pattern to define passing contexts an iterator can traverse and aggregate

05:38.300 --> 05:41.760
in a visitor can apply an operation to each element in the aggregate.

05:41.800 --> 05:46.870
That's very very apparent behavior patterns working with other patterns as well.

05:46.870 --> 05:51.970
A system that uses the composite pattern might use a visitor to perform operations on components of

05:51.970 --> 05:57.910
the composition a composite could use the chain of responsibility to let components access global properties

05:58.420 --> 05:59.460
through the parent.

05:59.740 --> 06:04.490
A composite could also use a decorator to override these properties on parts of the composition.

06:04.750 --> 06:10.480
A composite should use the observer pattern to tie one object structure to another in the state pattern

06:10.480 --> 06:16.640
to let a component change its behavior as its state changes we can reduce those conditional statements.

06:16.780 --> 06:22.210
The composition itself might be created using the approach in the builder well-designed object oriented

06:22.210 --> 06:25.230
systems have multiple patterns embedded in them.

06:26.210 --> 06:32.550
And so this summarizes the behavior patterns how they work together how they're very similar and also

06:32.550 --> 06:35.070
the common themes that they employ right.

06:35.220 --> 06:36.840
Passing objects is arguments

06:39.100 --> 06:45.920
encapsulating variation very very important concept and themes related to most behavior patterns.

06:45.920 --> 06:46.510
So thank you.

06:46.510 --> 06:48.580
I hope you learned a lot about the behavior patterns.
