WEBVTT

00:05.110 --> 00:06.230
Hello and welcome.

00:06.430 --> 00:08.140
To end our section on you.

00:08.220 --> 00:13.960
I just want to show you a couple class diagrams seeing you to feel what they look like in our previous

00:13.960 --> 00:17.440
lecture we talked all about the different symbols and notation you use for class diagrams.

00:17.440 --> 00:23.410
Now we can actually see an entire class diagram with many different objects and relationships.

00:23.410 --> 00:28.750
So here's an example of a design pattern that we're gonna actually look at in a few lectures.

00:28.750 --> 00:32.140
The Abstract Factory design pattern it's a creation of design pattern.

00:32.140 --> 00:33.100
This looks pretty busy.

00:33.100 --> 00:37.470
A lot's going on here but what you should notice is some of the symbols that we just talked about right.

00:37.480 --> 00:40.120
You see the rectangles with the objects.

00:40.300 --> 00:45.430
Some of the rectangles here are actually some of the rectangles just have names to distinguish the name

00:45.430 --> 00:46.570
of the object.

00:46.570 --> 00:49.000
Some of them actually have some methods.

00:49.000 --> 00:53.740
So if you look at the bottom you see the Abstract Factory object has a create product and create product

00:53.740 --> 00:54.550
B.

00:54.970 --> 01:01.260
Other things you should notice is that the dash lines that represent the dependency uses a relationship.

01:01.270 --> 01:06.280
You notice the triangle represents a is a relationship a hierarchy.

01:06.280 --> 01:07.930
So in this example ask the abstract.

01:07.930 --> 01:14.920
Product day and after to be our base classes of product they want a product a too for abstract product

01:14.920 --> 01:22.090
day and product B one and product B two for abstract product B and you see some arrows showing other

01:22.390 --> 01:24.660
relationships these are most likely interfaces.

01:24.670 --> 01:29.440
So the client's an interface to an abstract product and so forth.

01:29.440 --> 01:34.990
But again you should get from this diagram is there's a lot of information that can be conveyed in a

01:34.990 --> 01:37.350
very short amount of time.

01:37.870 --> 01:42.850
We just have some rectangles but you can get a quick glimpse of how an Abstract Factory design pattern

01:43.390 --> 01:50.890
works by just having these objects identified with their relationships and also some methods and this

01:50.890 --> 01:54.970
will become clearer and clearer as we go through and we show a lot of these diagrams these diagrams

01:54.970 --> 01:58.630
will be explained in detail I'm not just going to show a diagram and say good luck.

01:58.630 --> 02:03.790
There will be examples all sorts of information besides this diagram diagram is going to only be one

02:03.790 --> 02:04.870
part.

02:04.870 --> 02:11.560
So here's an Abstract Factory that's a creation of design pattern here's an adapter design pattern.

02:11.560 --> 02:13.990
This is where two patterns are I'm sorry.

02:13.990 --> 02:17.370
Two objects that are incompatible can now talk to one another.

02:17.440 --> 02:22.450
And again what you'll see here is some rectangles some objects with names some relationships showing

02:23.470 --> 02:28.140
interface relationships essentially and also in this example inheritance relationship.

02:28.180 --> 02:31.330
You should notice there's a note on the left hand side right.

02:31.360 --> 02:38.140
Because it has that little folded corner and that's just telling you that the adapter calls the specific

02:38.290 --> 02:40.260
request method.

02:40.360 --> 02:40.610
Right.

02:40.660 --> 02:45.000
So this Guinea is conveying a lot of information about the adapter design pattern mainly that there's

02:45.010 --> 02:50.040
a target there's an adapter that does most of the work within compatibility and then there's an adapter.

02:50.800 --> 02:55.630
And what ends up happening here is the adapting and the target can communicate with one another through

02:55.630 --> 02:59.930
the adapter and the client will use the target and so forth.

03:00.190 --> 03:05.710
But again we'll go through that and a lot of detail Singleton design patterns one of the most popular

03:05.710 --> 03:06.410
ones.

03:06.670 --> 03:09.780
This allows you to create a single instance of an object.

03:09.790 --> 03:11.800
This one is a bit more simple right.

03:11.800 --> 03:18.490
We just see one object and in this case we see some member variables in that second rectangle component

03:18.820 --> 03:26.380
and then at the very bottom we see some methods but this is a basic pattern that doesn't have a lot

03:26.380 --> 03:32.200
of objects but it doesn't mean that it's not doing a lot or it's not somewhat more complicated.

03:32.230 --> 03:35.440
Again there's no on the left hand side returning an instance.

03:35.590 --> 03:42.190
This this pattern will have a static instance and then a method will return that static instance.

03:42.190 --> 03:47.070
So you don't end up creating more than one object decorative design pattern.

03:47.070 --> 03:48.550
See a lot going on here.

03:48.570 --> 03:54.120
This diagram actually shows some cardinality one to many many to one relationships and so forth.

03:54.120 --> 03:57.110
That's one of the new things but again a lot of the same here.

03:57.240 --> 04:01.350
Triangles for inheritance rectangles for object names.

04:01.410 --> 04:04.720
Most of these are just showing methods with no member variables.

04:04.720 --> 04:08.320
A couple notes on the right hand side component operation and so forth.

04:08.760 --> 04:13.620
But again the cardinality is displayed in the decorator the decorated design pattern can be used as

04:13.620 --> 04:15.030
an alternative to subclasses.

04:18.240 --> 04:21.480
Strategy design pattern again this is kind of a must have design pattern.

04:21.480 --> 04:23.880
This is really really important.

04:23.890 --> 04:29.510
Out of all the pattern this is one of the ones that you really want to sort of memorize but again uses

04:29.520 --> 04:31.010
a lot of abstraction.

04:31.050 --> 04:33.120
Here we see a uses a relationship with the client.

04:33.120 --> 04:35.700
There's a context a strategy object.

04:35.700 --> 04:42.750
There is some inheritance involved here with concrete steady A B and C this pattern uses polymorphism

04:43.200 --> 04:44.770
to determinant runtime.

04:44.770 --> 04:46.670
What strategy to use.

04:47.430 --> 04:50.120
The other thing that you see here is the diamond right.

04:50.160 --> 04:52.490
So the diamond remember represents.

04:52.490 --> 04:57.990
In this case aggregation because it's an open Diamond remember the closed field Diamond represents composition.

04:57.990 --> 05:02.220
So there's a has a relationship with the strategy in the context.

05:02.220 --> 05:10.110
Again quick overview of just some work some class diagrams look like and they can display a lot of information

05:10.530 --> 05:12.460
without a ton of text.

05:12.580 --> 05:17.700
So it's really really useful to understand the basics of class diagrams because it can help learn a

05:17.700 --> 05:18.900
ton about a design pattern.

05:19.440 --> 05:19.740
Thank you.
