WEBVTT

00:05.250 --> 00:05.800
Low class.

00:05.800 --> 00:10.780
We have another challenge for you this is gonna test your understanding of the command design pattern.

00:10.780 --> 00:11.700
Requirements are.

00:11.830 --> 00:17.570
I want you to write an application that simulates the buying and selling of stocks via a broker.

00:17.590 --> 00:22.490
So after reading that you kind of try to think yourself OK what's going to be the receiver.

00:22.690 --> 00:26.440
What's going to be the invoker and what's going to be the command.

00:26.440 --> 00:28.750
Well I'll tell you that and give you some hints.

00:28.870 --> 00:34.290
This command pattern is gonna be used to implement the buying and selling of stocks so you're going

00:34.290 --> 00:38.130
to need to create an interface order which acts as a command.

00:38.130 --> 00:40.340
This is only going to contain the execute method.

00:40.380 --> 00:46.230
We know that from our previous knowledge and previous lectures you're going to create concrete command

00:46.230 --> 00:48.850
classes for buying and selling stocks.

00:48.990 --> 00:52.860
They need to contain a receiver object because this is how that pattern works.

00:52.920 --> 00:58.980
You can pass to receive your object via the constructor and set it as a member variable and ex queue

00:58.980 --> 01:04.990
method is going to invoke the buy or sell method on the receiver class right.

01:05.010 --> 01:11.200
So that brings us to who's the receiver the receiver in this application should be the stock they're

01:11.220 --> 01:15.710
going to do the actual work they're going to do the actual buying and selling.

01:15.770 --> 01:18.380
You can just hard hard code these two methods.

01:18.380 --> 01:22.760
Buying and selling to just display output.

01:23.190 --> 01:28.260
This class stock should contain a name and a quantity for the stock as a member variable.

01:28.260 --> 01:30.080
Include them and include them in the output.

01:30.090 --> 01:37.090
When you do the buying and selling next is the invoker object that would be the broker the broker is

01:37.090 --> 01:43.710
going to take and place the orders and it could be a list of orders take order.

01:43.710 --> 01:46.590
Could be a method to add orders to a list.

01:46.590 --> 01:48.290
That's how you should implement it.

01:48.600 --> 01:55.520
Place orders would go through the list and invoke each execute method on the specific command because

01:55.520 --> 01:56.870
remember that's what the invoker does.

01:56.870 --> 02:03.160
The invoker figures out when to execute the command so we'll just who will call execute on the command

02:03.170 --> 02:04.860
the command is usually passed.

02:04.970 --> 02:08.700
When you create the invoker and that's done by the client.

02:08.700 --> 02:15.090
When a client creates the invoker so the broker object uses the Command pattern to identify which object

02:15.120 --> 02:19.000
will execute which command based on the type of command.

02:19.110 --> 02:23.880
Some more requirements the client should create the receiver and associate it with a command be the

02:23.880 --> 02:25.520
command constructor.

02:25.770 --> 02:31.810
The client's going to do all the associations the client will then can buy and sell orders.

02:31.860 --> 02:34.560
It also has to associate the invoker with the command.

02:34.830 --> 02:40.020
So we need to create that Invoker and then the constructor the invoker or the execute method can pass

02:40.020 --> 02:46.560
the command I'm suggesting that you can associate the invoker with the client when you call take order.

02:47.700 --> 02:53.300
That's sort of like the execute you can pass the command to this method as a parameter.

02:53.300 --> 02:54.890
Or do it in the constructor it's your prerogative.

02:56.430 --> 03:02.290
Lastly the client will execute all the orders by telling the broker to place orders here's an example

03:02.290 --> 03:03.470
class diagram.

03:03.520 --> 03:06.940
Remember the stocks the receiver has a name and a quantity.

03:06.940 --> 03:09.780
Buy and Sell methods the command.

03:09.970 --> 03:17.530
The client here would be have a main method and it would create and tie together the invoker the receiver

03:17.890 --> 03:19.890
and the commands.

03:19.960 --> 03:25.330
The broker is going to be the invoker it's going to have a list of orders it's gonna have two methods

03:25.330 --> 03:31.490
take order and place orders and the broker is going to do nothing more than just execute a command.

03:33.200 --> 03:42.730
And the command will use the receiver to execute stock sells and executes sell.

03:42.810 --> 03:43.600
Zalmai sorry.

03:45.090 --> 03:46.480
So this is an example output.

03:46.960 --> 03:47.970
Here's to Quan.

03:47.980 --> 03:49.900
Here is a stock that I bought and sold.

03:49.900 --> 03:54.700
Basically says stock the name the quantity it says bought or sell stock.

03:54.700 --> 03:57.700
Name quantity sold and you can do this for many different stocks.

03:57.700 --> 04:01.030
This is just one example.

04:01.060 --> 04:02.080
These are the requirements.

04:02.080 --> 04:06.670
This is what I want you to do to test your knowledge on the command design pattern not provide a solution

04:06.670 --> 04:09.640
in the next lecture main importance.

04:09.640 --> 04:16.400
Understanding the separation of the objects how to tie them gather into client and that's allowing for

04:16.400 --> 04:19.040
that big advantage of decoupling.

04:19.040 --> 04:19.430
Thank you.
