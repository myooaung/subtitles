WEBVTT

00:05.570 --> 00:06.810
Hello and welcome.

00:06.810 --> 00:08.220
Welcome to your last challenge.

00:08.220 --> 00:11.010
This is our challenge for testing your knowledge on the visitor.

00:11.010 --> 00:13.080
This will be our last challenge.

00:13.080 --> 00:14.030
Pretty exciting.

00:14.070 --> 00:18.800
So let's create another type of shopping cart application that demonstrates the visitor pattern.

00:18.810 --> 00:25.300
This application will calculate the cost of postage for shipping items are set of elements will be the

00:25.360 --> 00:31.370
items in our shopping cart the postage will be determined using the type and the weight of each item.

00:31.510 --> 00:36.690
And of course depending on where the item is being shipped to what region so you're going to need to

00:36.690 --> 00:40.110
create a separate visitor for each postal region.

00:40.110 --> 00:45.240
This will allow us to separate the logic of calculating the total postage cost from the items themselves.

00:45.240 --> 00:47.330
The whole point of the visitor pattern.

00:47.430 --> 00:53.160
This means that our individual elements do not need to know anything about the postal cost policy.

00:53.190 --> 00:57.390
It's nicely decoupled from the object structure and the element logic.

00:57.570 --> 01:00.300
The steps in order to complete the same are as follows.

01:00.300 --> 01:03.000
First you have to create the element interface.

01:03.000 --> 01:05.600
This should have an accepted method that takes a visitor.

01:05.610 --> 01:11.580
You then need to create three concrete element types that each can't contain a price and way as member

01:11.580 --> 01:14.190
variables and implement the accept method.

01:14.220 --> 01:17.060
A book a C.D. in a DVD.

01:17.060 --> 01:22.860
The accept method just calls the visit method passing in itself does not need to know anything about

01:22.860 --> 01:24.620
the postal cost policy.

01:24.750 --> 01:27.810
Again nicely decoupled from the visitor logic.

01:27.810 --> 01:30.600
The next step will be to create the visitor interface.

01:30.810 --> 01:34.000
We need three visit methods for each type of element.

01:34.170 --> 01:38.760
We're gonna need to create two types of visitors one for inside the United States and one for South

01:38.760 --> 01:39.730
America.

01:39.780 --> 01:45.680
We can call these classes U.S. Postage visitor in South America postage visitor.

01:45.690 --> 01:53.920
Each class should contain state data for the total postage for a card of items each visit method should

01:53.920 --> 01:58.860
contain the algorithm for calculating the postage for an item based on the way to that item.

01:58.870 --> 02:02.350
Now there are some stipulations in the calculations.

02:02.350 --> 02:09.760
For example if it's a book the algorithm should calculate the cost the postage cost has the weight multiplied

02:09.760 --> 02:10.810
by two.

02:10.950 --> 02:16.840
If it's a seedy it should calculate the posted cost as the weight multiplied by 2.5.

02:16.870 --> 02:25.000
And this is just to show you that each visitor except method can have different logic for the DVD.

02:25.000 --> 02:28.380
You should calculate the cost wait times three.

02:28.420 --> 02:32.350
Now if you're outside the US you have to double the postage cost.

02:32.350 --> 02:37.040
So that means the South American postage visitor would double that cost.

02:37.060 --> 02:42.370
Also there's another stipulation for all the items if the price is greater than 20 dollars inside the

02:42.370 --> 02:46.780
US or the price is greater than 30 dollars in South America.

02:46.780 --> 02:50.980
You should allow for free shipping so you're gonna need to add an if statement in your logic in your

02:50.980 --> 02:53.760
visit method to see what the court the prices.

02:53.760 --> 02:59.770
And if the price is larger certainly from the certain standards you don't want to apply any shipping

02:59.770 --> 03:00.430
costs.

03:00.580 --> 03:05.670
So make sure you study this slide on all these restrictions for the algorithm and this will go on.

03:05.920 --> 03:06.890
Except method.

03:07.120 --> 03:08.890
Your last step is to create a client.

03:09.010 --> 03:10.810
You need to create many visible items.

03:10.810 --> 03:15.580
A couple books C.D. DVD with different weights and prices.

03:15.580 --> 03:19.060
You should create a list and add the above items to the list.

03:19.210 --> 03:23.720
You could use an array as well if you wanted to initialize it with an array initialization.

03:23.950 --> 03:28.690
You're gonna iterate through the list to calculate the total regional postal cost for two visitors.

03:28.840 --> 03:33.100
So you need to create two visitors both the US and a South America visitor.

03:33.100 --> 03:39.610
You want to display the regional costs for shipping all items in the list to a US region and to a South

03:39.610 --> 03:40.570
American region.

03:40.570 --> 03:42.700
So you're gonna have two visitors.

03:42.720 --> 03:47.610
Here is some example of output you might display something like the total postage for shipping items

03:47.820 --> 03:49.810
to the US is 10 14.

03:50.080 --> 03:54.540
The total opposed to shipping my items to South America is 20 28 because it's double.

03:54.660 --> 03:56.140
If you're outside the US.

03:56.370 --> 04:02.040
Now if we had other types of items here once the visitor implements a method to visit that item we could

04:02.040 --> 04:07.970
easily calculate the total postage for that region while the visitor may seem a bit strange at first.

04:08.000 --> 04:10.690
You can see how much it helps to clean up your code.

04:10.730 --> 04:15.500
The whole point of this pattern cleaning up the code it allows you to separate out certain logic from

04:15.500 --> 04:16.750
the elements themselves.

04:16.820 --> 04:19.560
Keeping your data class is quite simple.

04:19.720 --> 04:21.650
So this is our last challenge.

04:21.760 --> 04:25.100
Again pretty straightforward with all the steps that I identify.

04:25.100 --> 04:26.740
This is the visitor pattern.

04:26.740 --> 04:33.220
The separation of logic from the elements in a collection or list or an object structure can even be

04:33.220 --> 04:37.710
a composite from the actual additional behavior.

04:37.870 --> 04:44.620
We're adding additional behavior to this object structure and the object structure is separated from

04:44.620 --> 04:47.100
these additional behavior.

04:47.110 --> 04:47.890
So good luck.

04:47.890 --> 04:49.450
Let me know if you have any questions in the queue.

04:49.510 --> 04:50.580
Thank you.
