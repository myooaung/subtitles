WEBVTT

00:05.550 --> 00:06.940
Hello and welcome back.

00:07.020 --> 00:12.270
In this lecture we're going to provide a solution to our previous challenge which was implementing the

00:12.270 --> 00:14.210
visitor design pattern.

00:14.230 --> 00:15.960
Let's spring up our ontology.

00:15.960 --> 00:18.750
We're gonna name this project visitor solution.

00:18.750 --> 00:26.700
The solution has to do with creating calculating the postal cost for different regions on particular

00:26.730 --> 00:28.480
items.

00:28.560 --> 00:34.230
So let's go ahead and say visitor solution

00:36.990 --> 00:37.820
there.

00:37.980 --> 00:41.310
First thing we want to do is we want to create the element interface.

00:41.310 --> 00:43.570
This is the visitor bowl interface.

00:43.570 --> 00:51.510
So we're going to say new Java class and we're going to call this visit to bowl visit to bowl not visitor

00:51.540 --> 00:53.530
but visit the bowl.

00:53.800 --> 00:55.570
Here is the interface.

00:55.710 --> 00:59.460
And this is just going to have our accept method that takes a visitor as a parameter.

00:59.520 --> 01:05.640
So public void except visit tor visitor

01:08.370 --> 01:09.160
is it.

01:09.360 --> 01:11.490
There we go.

01:11.490 --> 01:14.880
The next step will be it will be to create the concrete elements.

01:14.880 --> 01:16.710
So this would be the book.

01:16.710 --> 01:18.090
This would be the C.D..

01:18.390 --> 01:20.100
And this would be the DVD.

01:20.210 --> 01:20.610
Right.

01:20.640 --> 01:27.470
So we're gonna say class book implements visiting all.

01:28.740 --> 01:34.020
And this is going to have a price and a way for member variables in our constructor is going to go ahead

01:34.020 --> 01:37.780
and set this price and way overloaded constructor.

01:37.790 --> 01:38.040
Right.

01:39.000 --> 01:42.590
So private double priced private double way sets it up.

01:42.720 --> 01:44.950
We then need to implement our accept method.

01:45.510 --> 01:52.830
So we're going to have an over in method override or override.

01:53.910 --> 01:58.080
And this is gonna be called Public void loops.

01:58.350 --> 02:07.780
Public void except hand it takes a visitor.

02:08.190 --> 02:11.520
And what this is gonna do it's just gonna call the visitor visit method.

02:11.520 --> 02:18.240
So it's gonna just a visitor visit and it's gonna pass in itself has a parameter.

02:18.240 --> 02:25.820
So we're just gonna say this and again we're going to implement the visitors in a second.

02:25.830 --> 02:30.930
The other thing we need to do is have a couple getters for the price and the way and then that will

02:30.930 --> 02:39.480
complete the class we need to do something similar for both again our C.D. and our DVD.

02:39.540 --> 02:47.630
So for the city we're gonna say Class C implements visible.

02:48.070 --> 02:52.800
And this again is going to have at a price in a way for its member variables and a constructor to set

02:52.800 --> 02:54.420
that date up.

02:54.420 --> 03:01.650
These do look similar but remember they could be drastically different if we needed to accept method

03:02.090 --> 03:07.440
is gonna just call the visitor and we're gonna have get methods for the price and the way just like

03:07.440 --> 03:09.960
our book Class.

03:09.960 --> 03:11.800
So again pretty straightforward.

03:11.990 --> 03:15.820
The last concrete element we need to create is our DVD.

03:16.070 --> 03:24.540
And so we're going to say class DVD implements visible and again a lot of the same here.

03:24.750 --> 03:26.670
Double price and so forth.

03:26.670 --> 03:31.710
Now again you may say hey there's duplicate code but we're not demonstrate we're demonstrating the visible

03:32.130 --> 03:33.120
visitor pattern right.

03:33.120 --> 03:38.670
So we're not making the classes that are so distinct these would be quite different because they're

03:38.670 --> 03:46.510
obviously different with DVD and C.D. on the rest the class is the same as the other ones it called

03:46.540 --> 03:52.300
the visitor the accept method is here calls visit on that visitor object and passes itself in with its

03:52.300 --> 03:54.620
way and its price.

03:54.730 --> 03:59.020
So the next thing we need to do is create that visitor interface.

03:59.120 --> 04:05.210
So here we're going to say new Java class and we're gonna say visitor.

04:06.060 --> 04:06.510
Right.

04:06.520 --> 04:12.100
And remember we have to have a visit method inside here for each one of our items.

04:12.100 --> 04:19.150
So we're gonna have three methods are public void visit on a book and then we're also going to have

04:19.150 --> 04:23.100
one for our C.D. and our DVD.

04:23.220 --> 04:24.130
So C.D.

04:26.530 --> 04:37.930
and DVD just like that and we want to make sure this is an interface.

04:37.930 --> 04:40.810
Now we should have the read go away in here and it does.

04:41.140 --> 04:45.490
We have to create our concrete visitor remember there's two concrete visitors we want to create one

04:45.490 --> 04:49.810
for us postage and one for South American postage.

04:49.810 --> 04:56.390
So we're gonna call this class our U.S. Postage visitor.

04:57.090 --> 05:04.450
And this is going to implement our visitor interface.

05:04.450 --> 05:14.980
We're gonna have a running tally so we're gonna say private double total postage for card and then our

05:14.980 --> 05:22.060
constructor is gonna just use the default constructor we're gonna collect data about the book in our

05:22.060 --> 05:23.340
visit method.

05:23.440 --> 05:28.060
So we're gonna also we have a lot of restrictions in our visit method in terms of how we're gonna do

05:28.060 --> 05:29.500
our calculations.

05:29.500 --> 05:35.110
The one restriction we imagine that we're going to see if the price is over a certain amount if the

05:35.110 --> 05:42.060
price is over a certain amount we're not going to add any additional postage.

05:42.060 --> 05:42.280
All right.

05:42.280 --> 05:47.080
So for books if the book price is less than 20 then we'll calculate the total postage for the car.

05:47.080 --> 05:50.880
Otherwise we don't have any total postage it would just be zero.

05:50.920 --> 05:56.690
So it might be good to actually initialize this to zero even though it's automatically done in Java.

05:56.740 --> 06:01.720
So here we're just saying if we have a case assume we have a calculation here related to weight and

06:01.720 --> 06:11.910
price free postage for a book over 10 dollars so over 20 I should say and remember the algorithm we

06:11.910 --> 06:20.080
use to calculate the total postage was the book wait times to write and this was for our book.

06:20.280 --> 06:28.710
Now our C.D. was if the price was again over twenty dollars we would calculate the postage for wait

06:28.710 --> 06:30.380
times 2.5.

06:30.570 --> 06:33.740
So we would do something like this.

06:34.530 --> 06:37.920
And for DVD it was a little different.

06:37.920 --> 06:43.280
If the price was over 20 bucks we would do the wait times three.

06:43.650 --> 06:49.080
And then we also to round out this class we want to add a method that returns the total postage for

06:49.080 --> 06:49.380
the car.

06:49.410 --> 06:51.450
We want to return the internal state.

06:51.660 --> 06:57.470
So we're gonna add a little thing here get total postage and then we're going to end the class.

06:57.470 --> 06:59.100
All right.

06:59.100 --> 07:03.150
We also need to create a concrete visitor for our South America visitor.

07:03.900 --> 07:08.100
So here we're gonna say class South America

07:10.360 --> 07:12.250
postage visitor.

07:12.630 --> 07:17.790
And that's going to implement the visitor interface as well.

07:17.910 --> 07:24.450
Again we're going to have a running tally so we're gonna say private double total postage for a car

07:25.560 --> 07:26.980
and we'll initialize this to zero

07:29.790 --> 07:34.350
and then our visit for the book is gonna be similar except for South America.

07:34.620 --> 07:38.730
The price has to be over 30 dollars to get free postage.

07:38.730 --> 07:39.180
So right.

07:39.180 --> 07:42.480
Just another simple if statement oh less than 30 dollars.

07:42.480 --> 07:45.740
We'll calculate it and we have to double it as well.

07:45.870 --> 07:49.910
So we're gonna say book wait times to die at times to to double it.

07:50.160 --> 07:57.870
The C.D. is gonna be the same except the wait times 2.5 times to something like that.

07:57.870 --> 08:03.650
And the DVD it's is going to be similar as well.

08:05.730 --> 08:07.050
It will be like this.

08:07.080 --> 08:13.160
And we also want to have a get method for the total postage.

08:13.170 --> 08:21.000
So we'll just add public double get total postage for cart and this will take no parameters and we'll

08:21.030 --> 08:22.380
just return our member variable

08:25.290 --> 08:28.500
like that and then we'll end this class.

08:28.500 --> 08:32.860
Last thing we need to need to do is create the calculus or the client.

08:33.120 --> 08:42.640
So we're gonna say new Java class we're gonna name this client and this will need to have a couple of

08:42.640 --> 08:43.150
things in it.

08:43.150 --> 08:49.030
First we're going to actually create an array list and we can do that outside of our main.

08:49.030 --> 08:53.960
We're also going to have a helper for calculating the postage so let's go ahead and do that.

08:54.340 --> 09:00.640
We'll have normal shopping cart stuff here outside of the main where we have our array list and we're

09:00.640 --> 09:03.960
just creating a new array list with visible items.

09:03.960 --> 09:04.480
All right.

09:04.540 --> 09:12.880
All of these the books the DVD and the C.D. And then we're gonna have a helper method that will call

09:13.000 --> 09:20.130
the calculate postage the accept method on all the vegetables and it will return the total.

09:20.370 --> 09:21.260
And this will be in army.

09:21.290 --> 09:28.640
So what we have here is our public static double calculate postage and it takes a visitor object for

09:28.640 --> 09:30.150
each visitor.

09:30.360 --> 09:30.710
Right.

09:30.740 --> 09:35.990
All the items in the array list we're going to call except in passing the visitor.

09:36.050 --> 09:40.200
We're then going to try to get the total postage for each visitor.

09:40.420 --> 09:40.630
Right.

09:40.670 --> 09:45.410
So we want to make sure we're doing this right.

09:45.410 --> 09:52.070
And these methods are actually called gets total postage for card

09:55.520 --> 09:57.040
something like that.

09:57.380 --> 10:05.270
We just want to make sure you have our public static void Main and we'll correct that right here in

10:05.270 --> 10:10.010
a sec.

10:10.550 --> 10:16.370
And the thing we forgot to do is you forgot to add this method to the interface so we'll actually shorten

10:16.370 --> 10:16.450
it.

10:16.460 --> 10:19.420
We'll just say get total postage.

10:20.000 --> 10:26.770
And so this will will make it what it is our ready for card.

10:27.550 --> 10:32.230
And then we'll need to add this in our visitor interface.

10:32.230 --> 10:39.760
Public void gets total postage for card or get total postage.

10:39.760 --> 10:42.230
How about now we'll change it back to get total posted.

10:42.250 --> 10:43.960
Sorry about that.

10:43.960 --> 10:50.010
Something like that and then we'll make sure this one is correct as well.

10:50.300 --> 10:58.480
And now we can call that from our regular class and we want to make it a double.

10:58.960 --> 11:00.210
And we should have no errors.

11:00.220 --> 11:03.280
Now get total postage.

11:06.120 --> 11:06.900
OK finally.

11:06.900 --> 11:07.590
Thank you.

11:07.590 --> 11:08.790
Thank you for being patient.

11:08.940 --> 11:10.280
But you'll see what this method does.

11:10.280 --> 11:10.450
Right.

11:10.470 --> 11:16.770
It just goes through all the items in the array list for each item it calls except passes and its visitor.

11:16.860 --> 11:21.210
And you know that what's going to happen here is that is going to call the visit method passing in itself

11:21.450 --> 11:28.260
based on the visitor pass to it and then from there we're gonna call the get total post to total postage

11:28.290 --> 11:30.810
on that visitor and return it.

11:30.810 --> 11:33.360
So our client becomes a little bit simple simpler.

11:33.360 --> 11:38.750
All we have to do now is we have to create a bunch of visitors some books some seeds and DVD.

11:38.790 --> 11:43.320
We then have to add them as elements to the areola.

11:43.320 --> 11:44.700
So we're gonna create some vegetables.

11:44.700 --> 11:49.740
Remember these are the elements I just came up with some arbitrary prices and weights and then we have

11:49.740 --> 11:51.990
to add each one to the array list.

11:52.110 --> 12:00.000
Our static array list up here once we added them now we can actually call the calculate postage.

12:00.000 --> 12:02.380
First though we want to create a visitor.

12:02.430 --> 12:10.660
So we're gonna say visitor and we're gonna say this is gonna be a new U.S. Postage visitor.

12:11.010 --> 12:21.300
And then we're gonna call double my postage for this by calling our helper method passing in our visitor

12:23.460 --> 12:28.470
and now return the cost of the US postage for these three items.

12:28.470 --> 12:30.180
And this visitor.

12:30.180 --> 12:35.130
And then we're gonna just print that out and then we're also gonna do it for another visitor.

12:35.130 --> 12:43.170
So we're gonna reset the visitor and this time we're gonna say New South American postage visitor and

12:43.170 --> 12:45.450
we'll reduce my postage.

12:45.450 --> 12:52.050
And this one is just gonna calculate the postage on a new visitor which is now pointing to South America

12:54.300 --> 12:57.410
and then the last thing we need to do is just print out the total.

12:57.430 --> 13:03.850
Something like this and that will conclude our implementation.

13:03.960 --> 13:08.030
Now some of the things that you should have noticed it's a pretty simple formula.

13:08.040 --> 13:14.490
But the point of this calculation up here is for all the regional postage is done in one central place

13:14.520 --> 13:15.090
right.

13:15.120 --> 13:19.710
It's all done into the visitors right to drive this visitor.

13:19.710 --> 13:23.760
We'll need a way of iterating through our sharper shopping cart and that's what we do here.

13:23.760 --> 13:23.990
All right.

13:24.030 --> 13:30.660
So let's go ahead and build this and we'll try to run it and we'll see it calculates different postage

13:30.660 --> 13:32.690
shipping costs depending on the visitor type.

13:34.220 --> 13:42.140
So run client Maine and you'll notice that which page should truncate this but you'll notice that the

13:42.140 --> 13:46.130
totals postage from items is twenty one or forty three.

13:46.130 --> 13:50.330
And really what we should do is have better informational messages here

13:53.390 --> 14:08.020
in our client actually the total postage for my U S items or for items for items shipped to the US is

14:08.420 --> 14:14.140
in the total postage for my items shipped to South America

14:17.470 --> 14:18.280
is.

14:18.400 --> 14:21.410
And you'll notice it is pretty much double right.

14:22.070 --> 14:25.070
So again Bill this I'm just a little bit nicer output.

14:25.340 --> 14:25.970
No big deal.

14:26.000 --> 14:29.720
We're just demonstrating the pattern itself.

14:29.720 --> 14:33.050
So we say Ron Klein on me a little more informative.

14:33.050 --> 14:37.550
Now if we had other types of items here once the visitor implements a method to visit that item we could

14:37.550 --> 14:40.620
easily calculate the total postage.

14:40.640 --> 14:40.910
OK.

14:40.940 --> 14:43.630
So this helps clean up your code quite a bit.

14:43.640 --> 14:48.350
The whole point of the pattern and you can separate out certain logic from the element themselves keeping

14:48.350 --> 14:50.560
the data classes very simple.

14:50.750 --> 14:52.310
So that's the solution to the challenge.

14:52.310 --> 14:52.750
Thank you.
