WEBVTT

00:05.180 --> 00:06.650
Hello and welcome back.

00:06.650 --> 00:11.390
This lecture we want to talk about design smells kind of a funny name for a lecture but really what

00:11.390 --> 00:15.770
smells are is just indications in your design that you're doing something wrong.

00:17.590 --> 00:22.840
So that the formal definition is structures and design that indicate violation of fundamental design

00:22.840 --> 00:25.810
principles and negatively impact design quality.

00:25.810 --> 00:27.860
That's what a design smell is.

00:28.000 --> 00:32.890
You look at an existing design you often encounter this when you look at legacy designs legacy design

00:32.890 --> 00:36.990
is something that was created you know maybe many years ago that's been around quite a bit.

00:37.000 --> 00:40.140
You look at design you're like Oh my God this thing is very tight.

00:40.140 --> 00:40.590
The couple.

00:40.590 --> 00:44.020
This thing is very has very low cohesion.

00:44.020 --> 00:45.120
There's all these dependencies.

00:45.130 --> 00:48.330
I change one thing and I just broke 20 different objects.

00:48.340 --> 00:50.380
That would be a design smell.

00:50.380 --> 00:56.360
Looking at the actual code in the structure and right off the bat seeing things that are wrong.

00:56.500 --> 01:04.310
And so this is good to understand in terms of how design patterns are going to help solve these issues.

01:04.360 --> 01:08.440
So you need to understand what design smells are what are bad things in design in order to understand

01:08.440 --> 01:09.600
good things with design.

01:10.840 --> 01:17.800
So some general design smells that are really you know common characteristics rigid rigidity.

01:17.800 --> 01:20.170
This is when the software is difficult to change.

01:20.280 --> 01:27.520
It's not not good for changing or it's interest not adaptable when you make a single change it causes

01:27.520 --> 01:31.210
a cascade of all these subsequent changes in different dependent modules.

01:31.210 --> 01:33.420
And this is again just tight coupling.

01:33.490 --> 01:37.180
I don't know if you've ever made one you thought oh this is an easy fix.

01:37.340 --> 01:43.730
You went made the fix and all sudden 40 things broke and you had to make 40 different changes.

01:43.740 --> 01:46.010
That's an example of rigidity.

01:46.010 --> 01:49.150
The more modules that have to be changed the more rigid design.

01:49.320 --> 01:51.680
And that's a design smell immediately.

01:51.900 --> 01:56.790
If you go into code and you make a change in those effects 20 different things it's going to tell you

01:56.790 --> 02:00.060
this design is very rigid.

02:00.060 --> 02:04.240
Another example would be if your code is very fragile.

02:04.740 --> 02:12.840
If you make one tiny little change or make one thing and it's not an it breaks it breaks in many places

02:12.880 --> 02:14.030
when a single change is made.

02:14.070 --> 02:20.970
Kind of similar rigidity and that one change can can cause a rippling effect except rigidity has to

02:20.970 --> 02:28.590
do with multiple changes for agility has to do with a single change and then it just cause all these

02:28.590 --> 02:29.250
other breakages.

02:29.250 --> 02:32.640
They are very very similar with fragility.

02:32.640 --> 02:41.040
The problems often occur in places that have no obvious relation to the area that was changed both again

02:41.040 --> 02:43.080
are just really tight coupling.

02:43.080 --> 02:48.300
You can reduce the amount of rigidity in the amount of fragility I keep probably mispronouncing that

02:48.330 --> 02:55.590
but that's the best I can do by making your code loosely coupled as a fertility of the module increases

02:55.950 --> 03:00.080
the likelihood that a change will introduce unexpected problems rise.

03:00.090 --> 03:07.500
So these are the most common design smells very very closely related that affect whether or not when

03:07.500 --> 03:14.820
you change things in mobility This is where you have parts that could be useful in other systems but

03:14.820 --> 03:19.420
the effort and risk of separating them from the original system are just too great.

03:19.710 --> 03:21.520
It's too much risk.

03:21.540 --> 03:27.480
I've had that I've had that happen in a lot of code where I say you know this is gonna be this is a

03:27.480 --> 03:32.520
really good opportunity to refactor this code to make it better but I'm afraid because if I've refactor

03:32.520 --> 03:40.100
that code all of a sudden everything else breaks or five refactor that code I can't separate it.

03:40.620 --> 03:43.550
I want to take that code out and I want to use it somewhere else because I like it.

03:44.010 --> 03:48.850
But it's way too coupled and it's it's not movable.

03:48.870 --> 03:53.220
Another common design smell viscosity.

03:53.220 --> 03:58.200
This is one assist system would have high viscosity if for design preserving change is more difficult

03:58.200 --> 04:00.450
to use than a hack.

04:00.520 --> 04:04.390
So if you want to refactor your code to make sure that you adhere to the design.

04:04.650 --> 04:11.210
But it's such a huge pain in the butt and the other option would be to just do something real quick

04:11.210 --> 04:14.030
and dirty and called a hack.

04:14.030 --> 04:16.340
That's a system with high viscosity.

04:16.340 --> 04:21.800
If running unit test and compilation takes a lot of time it is likely for developer to bypass procedures

04:21.800 --> 04:27.350
and implement a hack without running all the automated tests so you can see how this design smell can

04:27.350 --> 04:30.980
cause a lot of problems because people always want to take the easy way out.

04:30.980 --> 04:35.180
I see it time and time again in my job where somebody didn't want to go through the problem of doing

04:35.180 --> 04:37.750
something correctly so they just added a hack.

04:37.850 --> 04:41.540
Some of the times they didn't want to go through the problem of doing correctly because it was a big

04:41.540 --> 04:44.300
pain in the butt because the design was so poor.

04:44.480 --> 04:45.340
It's not always a fault.

04:45.350 --> 04:50.540
I don't always fault these developers because it's just a lot of times you're just write because in

04:50.540 --> 04:54.140
order to adhere to the design would be just too much of an issue.

04:54.140 --> 05:00.550
So the viscosity is very high in those situations needless repetition if you look at the code you see

05:00.550 --> 05:03.610
a ton of repetition but it's not necessary.

05:03.610 --> 05:05.890
That is a design smell.

05:05.890 --> 05:11.290
This happens quite a bit with new developers in terms of copying and pasting.

05:11.530 --> 05:16.960
I encounter this quite a bit where I have to tell them hey you can't just copy paste code don't just

05:16.960 --> 05:22.240
look for examples and don't and not understand the example fully and copy and paste it.

05:22.300 --> 05:25.980
That usually means something's wrong.

05:26.450 --> 05:30.280
Needs repetition happens when necessary abstractions are not being made right.

05:30.290 --> 05:35.810
If there's not some kind of modulation or some other interface that you can use to accomplish something

05:36.350 --> 05:40.660
to make it reusable then you'll just copy and paste it.

05:41.000 --> 05:42.940
Usually not a good thing.

05:43.160 --> 05:44.240
Opacity.

05:44.240 --> 05:49.650
This is the tendency of a module to be difficult to understand a module again being here an object or

05:49.650 --> 05:54.570
a method inside of a class when code is not written in a clear and expressive manner.

05:54.650 --> 05:59.710
It is said to be opaque code that evolves over time tends to be more difficult to understand over time.

06:01.310 --> 06:08.630
Again I've see this time and time and legacy code that I look at every day I look at it and I see an

06:08.630 --> 06:13.060
object or I see a function or I see a method and I say I don't.

06:13.060 --> 06:14.080
What's going on here.

06:14.090 --> 06:18.140
They might even have good comments but usually that's a result of it's doing too much.

06:18.140 --> 06:24.980
So it's not very cohesive and thus it gets propagated over time when people just start adding more and

06:24.980 --> 06:31.510
more code to it which makes it worse and makes it more opaque needless complexity.

06:31.550 --> 06:36.680
This tends to happen with engineers that are really really smart.

06:37.790 --> 06:42.320
They just kind of overdo it right they add more complexity they don't always understand the client or

06:42.320 --> 06:44.490
the person that's going to use their software.

06:44.590 --> 06:50.620
They may be really awesome code that's fair and it may be really really overly complex.

06:50.700 --> 06:52.500
It's not going to be used.

06:52.620 --> 06:58.380
So one of the most important smells bad design is this extra complexity that many engineers that are

06:58.380 --> 07:00.510
really smart tend to use.

07:00.510 --> 07:07.200
Usually they're very passionate and they want to solve world hunger so they design for everything but

07:07.200 --> 07:08.790
then it just becomes too complex.

07:08.820 --> 07:14.040
They want to avoid any kind of other smells so they strive for perfection which makes things overly

07:14.040 --> 07:15.170
complex.

07:15.270 --> 07:19.830
They add all these different abstractions all these different interfaces upon interfaces.

07:19.830 --> 07:21.870
They try to again solve world hunger.

07:21.870 --> 07:25.810
They want to solve every single change is gonna happen in the future.

07:26.040 --> 07:26.850
That's not going to happen.

07:26.850 --> 07:29.130
It can't be perfect.

07:29.130 --> 07:34.500
Good software design is lightweight flexible easy to read and understand and above all easy to change

07:35.520 --> 07:39.150
just because you're smart and you can write really complex code doesn't mean it's gonna be used.

07:39.150 --> 07:41.140
In fact it's not going to be used.

07:41.340 --> 07:48.680
So making things less complex in addition to not worrying about it being perfect is a goal.

07:48.800 --> 07:53.970
It's nothing's ever gonna be perfect do it the best you can design it for the future as much as you

07:53.970 --> 07:57.240
can but don't design it for 30 years in advance.

07:57.270 --> 08:01.830
I've had this experience quite a bit with many architects that I work with or they just overdo it.

08:01.890 --> 08:05.580
The over engineer and I'll be like you know why you were trying to.

08:05.820 --> 08:07.080
We don't have that problem yet.

08:07.100 --> 08:12.860
And especially if you're doing Agile design you know you kind of want to wait until there's a poll.

08:12.910 --> 08:16.080
There's a need to actually design something.

08:16.080 --> 08:19.760
Having said that you also want to make sure that design is adaptable to change.

08:19.770 --> 08:25.340
You don't want to make it just so rigid or so structured that it only works in a specific case.

08:25.500 --> 08:28.950
So it's important design for the future but you also don't want to design for everything.

08:29.490 --> 08:30.750
So do not over design.

08:30.750 --> 08:32.850
That's really important.

08:32.880 --> 08:36.600
Some specific smells in your Java code.

08:36.600 --> 08:42.750
If you see several classes that duplicate 90 percent of each other you probably want to remove this

08:42.750 --> 08:49.490
duplication using some kind of inheritance duplication as easy as spot because it's the same thing right.

08:49.810 --> 08:54.520
And sometimes duplication does not just include this exact same lines of code.

08:54.520 --> 08:59.890
It could be having the same purpose or having the same output but it's done all over the place where

08:59.890 --> 09:07.110
you could actually just put it in one function or method or class and avoid that duplication or inheritance.

09:07.370 --> 09:13.520
A lot of times you'll see a ton of public classes public member variables public methods.

09:13.520 --> 09:15.470
This violates and class encapsulation.

09:15.530 --> 09:17.090
That's a Java design smell.

09:17.120 --> 09:23.930
Make things private or protected inheritance if you see classes that are huge.

09:23.920 --> 09:25.230
Another design smell.

09:25.240 --> 09:28.380
It usually means it's not very cohesive it's doing too many things.

09:28.540 --> 09:29.130
It's not.

09:29.200 --> 09:31.570
It doesn't have a specific responsibility.

09:31.570 --> 09:36.880
You try to just put everything into this massive class that's reading user input making a graphical

09:36.880 --> 09:38.650
user interface.

09:38.870 --> 09:45.610
You know how has all these algorithms and interest doing way too much design smells often end up creating

09:45.610 --> 09:51.330
code that is hard to read breaks very easily very fragile and it's hard to maintain.

09:51.370 --> 09:54.940
And as I've been mentioning throughout the course maintenance is very very important.

09:54.940 --> 09:57.220
You want to be able to find a fix your bugs very easily.

09:57.220 --> 10:01.000
You want to add new features so avoid these design smells.

10:01.000 --> 10:09.240
Avoid this essentially low cohesion and very tightly coupled systems.

10:09.340 --> 10:14.800
So to summarize or repeat everything I just said which I know sometimes you guys get annoyed with because

10:14.800 --> 10:15.930
I repeat myself a lot.

10:15.940 --> 10:19.270
I try to avoid it but I also want to emphasize important points.

10:19.270 --> 10:25.330
Bottom line follow good design principles as guidelines and beware of design smells that's going to

10:25.330 --> 10:29.190
help you identify areas that can be improved.

10:29.200 --> 10:33.240
Always strive for highly cohesive and loosely coupled solutions code and design.

10:33.250 --> 10:35.310
Again you've heard this many times.

10:35.380 --> 10:42.580
Hi cohesion loose coupling dependencies versus responsibilities.

10:42.580 --> 10:44.680
Don't try to create the perfect designer architecture.

10:44.800 --> 10:48.120
Don't over engineer you can't solve world hunger right.

10:48.130 --> 10:52.880
You just do what you can make it as flexible and adaptable as possible.

10:53.060 --> 10:56.870
If you need to make a more flexible adapt in the future do it in the future.

10:57.010 --> 11:01.660
The perfect design does not exist trying to achieve it is most likely going to lead to all sorts of

11:01.660 --> 11:09.960
complexity all this is going to lead to the conclusion that using design patterns are awesome because

11:09.960 --> 11:17.760
they avoid these design smells they solve all these problems they strive for loosely or loosely coupled

11:17.760 --> 11:20.680
solutions or high cohesive objects.

11:20.710 --> 11:25.350
All right so this is why we study design patterns because it gets rid of a lot of these design smells

11:25.890 --> 11:29.630
it makes maintenance easier it makes your life easier.

11:30.870 --> 11:38.220
So I like to provide this summary in the slides because it really really hopefully drives you to understanding

11:38.220 --> 11:41.340
why we study design patterns and why we use them.
