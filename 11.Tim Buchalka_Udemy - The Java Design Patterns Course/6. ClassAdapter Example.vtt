WEBVTT

00:05.630 --> 00:06.460
Hello and welcome.

00:06.500 --> 00:11.540
In this lecture I want to go through an example of implementing the class adapter.

00:11.570 --> 00:15.530
This is technique using inheritance Java with a single class.

00:15.530 --> 00:19.920
You can't do it without with more than one class unless you use interfaces.

00:19.970 --> 00:26.530
So let's go out and bring up intelligent and create a project for the adapter.

00:26.980 --> 00:32.180
Could a new project we're gonna call this project adapter class.

00:32.200 --> 00:43.600
Inheritance example so we'll say after class inheritance example

00:48.010 --> 00:53.200
so we can only create a class adapter with an interface as long as you're only wrapping a single adapter.

00:53.200 --> 00:58.060
All right with multiple inheritance you can take two or more adapters and wrap them into a single interface

00:58.720 --> 01:02.910
class adapters are kind of possible in Java by using Single inheritance.

01:03.130 --> 01:07.990
As I mentioned you really want to implement it using the object adapter but if you have a single single

01:07.990 --> 01:10.970
adapter you can use this option.

01:11.110 --> 01:16.240
What we're gonna do is we're gonna adopt a single interface which is our integer value interface.

01:16.330 --> 01:23.170
We're gonna adopt that to a class adapter which will extend an integer value that implements that integer

01:23.710 --> 01:25.180
value interface.

01:25.180 --> 01:34.190
So here we're just gonna say interface integer value interface.

01:34.300 --> 01:41.200
This is just going to have one method public int get Integer Get integer.

01:41.200 --> 01:41.670
There we go

01:44.760 --> 01:48.060
just as a get integer method.

01:48.410 --> 01:56.150
We're gonna have a class that implements this interface called integer value implements the integer

01:56.150 --> 01:58.950
value interface.

02:00.200 --> 02:08.300
It's gonna have an override for the public int integer.

02:08.360 --> 02:11.150
It's going to return hardcoded number of return 5.

02:12.500 --> 02:19.040
So we have this single class and we want to write an adapter for this to another class.

02:19.100 --> 02:26.450
So what we could do is we could write a class adapter and this would use inheritance and it would extend

02:27.500 --> 02:28.430
the energy value

02:31.290 --> 02:33.170
right.

02:33.380 --> 02:39.170
And you'll notice that this doesn't have to have an instance of the ADAPT.

02:39.260 --> 02:41.800
What this can do is it can just override the method.

02:41.900 --> 02:47.630
So we want to basically change this adapter so that every turn something different so we can say public

02:49.450 --> 02:56.330
we can use the override a public and to get integer.

02:56.680 --> 02:59.020
And in this case we don't want a return 5.

02:59.030 --> 03:08.480
We want to return to plus super dark get integer something like that now would be it for the class adapter.

03:08.480 --> 03:12.890
Now remember that the object adapter would look work a little bit different because you would need to

03:12.890 --> 03:13.580
have an instance.

03:13.580 --> 03:20.990
So if we were to write an object adapter we would need to have a private instance of the adapter which

03:20.990 --> 03:23.520
is our integer value interface.

03:23.570 --> 03:26.580
That's the interface that we're gonna adapt that's the target.

03:26.680 --> 03:33.230
Let's say my end and then we need a constructor to set that value up.

03:33.350 --> 03:34.340
This all looks familiar

03:37.520 --> 03:42.650
and we would use reference taking the reference as the parameter and we can use a polymorphic leading

03:42.650 --> 03:49.140
and then we're just going to assign our member variable to the one in passing in the constructor.

03:49.550 --> 03:55.130
Then we would have to do our adaption so we would implement the get integer

03:58.670 --> 04:09.690
but then we'd have to use the composition relationship save return to plus this thought my and get integer.

04:10.100 --> 04:11.510
So you see the differences there.

04:11.600 --> 04:19.520
One uses composition one uses inheritance and then if we wanted to test this we could create a client

04:21.430 --> 04:28.540
say new client and this would need to have a public static void Main

04:36.100 --> 04:41.770
and this would just print out that this is a class and adapter demo and we could see how we could use

04:41.770 --> 04:51.740
the class adapter versus the object adapter right in the class adapter we would print out some information.

04:51.940 --> 04:57.460
We would create a new class adapter instance and then all we'd have to do is call the method on the

04:57.460 --> 05:05.450
class adapter for the object adapter we could create a new object adapter and we'd call just like we

05:05.450 --> 05:11.390
do with the class adapter but they are accomplishing things differently by using either composition

05:11.390 --> 05:11.930
or inheritance.

05:13.790 --> 05:17.570
And so we do something like that and there's a big limitation on the class adapters that you can only

05:17.570 --> 05:18.370
have one adapter.

05:21.220 --> 05:26.560
So if we build and run this you'll see that the output is gonna be the same

05:29.380 --> 05:34.630
but it's gonna be two different ways of implementation either using class adapter or the object adapter

05:35.960 --> 05:41.060
so just a little information on the class adapter you don't have to emphasize this or study it too much.

05:41.180 --> 05:46.700
It's an option if you only have wanted Daddy to use inheritance and override the method but the object

05:46.970 --> 05:53.600
adapter is really the way to go using composition and doing your doing your conversion in the class

05:53.690 --> 05:54.170
itself.

05:54.170 --> 05:55.220
Using the instance.

05:55.460 --> 05:55.820
Thank you.
