WEBVTT

00:05.200 --> 00:06.730
Hello and welcome back.

00:06.730 --> 00:11.010
In this lecture I want to talk a little bit about some problems with the closed Clinton mental face.

00:11.080 --> 00:14.830
We just got Don going through an implementation or reuse this interface.

00:14.860 --> 00:20.210
There is some debate in the software community about the utility of the clone a little interface.

00:20.290 --> 00:22.830
Luckily it's really the best approach that we have.

00:22.830 --> 00:27.850
So we're gonna stick with it but I still wanted to bring up to your attention some of the issues that

00:28.120 --> 00:28.730
are with it.

00:28.750 --> 00:34.360
So you have alternatives if you don't want to use clinical so from a previous lecture we know that the

00:34.360 --> 00:39.280
implementation of the product type design pattern involves implementing the quotable interface.

00:39.490 --> 00:43.390
Java provides a mechanism for cloning of objects that is very easy to implement.

00:43.420 --> 00:47.900
You simply override clinical interface and call a clone method essentially.

00:48.220 --> 00:53.080
You first need to implement the clinical interface you then need to find a clone method it should handle

00:53.080 --> 00:59.110
clone not supported exception that will return a shallow copy the object what the shallow copy means

00:59.560 --> 01:02.160
is if the copied object contains references to other objects.

01:02.190 --> 01:06.590
So I had some kind of composition or aggregation relationship those objects are not copied.

01:06.640 --> 01:14.910
That's a shallow copy a deep copy would clone even the referenced objects that has a relationships the

01:14.910 --> 01:18.380
last thing you need to do is you call the clone method of the superclass.

01:18.390 --> 01:22.500
It's pretty straightforward implement colonial and that's why we use it and the prototype even though

01:22.500 --> 01:24.860
it has some issues.

01:24.960 --> 01:27.450
So here's an example of use the quantum interface again.

01:27.600 --> 01:33.030
This should be somewhat familiar from our previous lecture but just to just as a reminder you implement

01:33.030 --> 01:33.990
that colonial interface.

01:33.990 --> 01:35.090
That's step one.

01:35.400 --> 01:41.810
If you have an object with a has a relationship that's a D copy so you don't overwrite it when you have

01:41.810 --> 01:42.350
no right.

01:42.350 --> 01:47.450
That means you're not overwriting clone and so here we're saying public person clone throws clone not

01:47.450 --> 01:53.960
supported exception that step to where then calling Super on the clone.

01:53.960 --> 01:55.420
That's Step 3.

01:55.770 --> 02:01.840
We then if we want that only provides a shallow copy if we want to make a deal have the deep copy we

02:01.850 --> 02:08.620
make a deep copy of city and we clone that as well and then assign it to our previously cloned object.

02:08.630 --> 02:13.850
That's how we can do a deep copy but you need that extra step if you want to do both a shallow and deep

02:13.850 --> 02:15.650
copy used in colonial interface.

02:15.840 --> 02:19.130
But this is one way we would we would do it.

02:19.130 --> 02:21.440
Now the advantages of using this are pretty straightforward.

02:21.440 --> 02:24.580
It's the most popular and easiest way of copying objects.

02:24.580 --> 02:27.740
This is why we use it for our proto type design pattern.

02:27.740 --> 02:32.390
We need to define a better class implement colonial in it provide the nation of the tenth clone method

02:32.770 --> 02:37.400
and then every child that has member variables over pair will get the cloning feature and they also

02:37.400 --> 02:39.080
would have to add their own.

02:39.500 --> 02:45.690
It requires for very few lines of code an abstract class with four or five long lines in the clone method.

02:45.920 --> 02:48.930
And you also need to override it if we need cloning.

02:49.140 --> 02:52.700
We should use clone to copy arrays because that's generally the fastest way to do it.

02:52.730 --> 02:57.870
So there is no issue in using clone for arrays it's really just when we use it.

02:57.870 --> 03:00.410
In general there are some issues.

03:01.020 --> 03:03.750
So some of the problems what are those issues.

03:03.780 --> 03:10.780
First off some academics think that cloning is deeply broken in Java the interface lacks the clone method

03:12.130 --> 03:14.200
and so the carnival is a marker interface.

03:14.200 --> 03:19.060
This is an interface that doesn't actually have the clone method inside of it.

03:19.060 --> 03:20.250
For this example.

03:20.250 --> 03:22.390
So it doesn't have any methods and it's just a mark interface.

03:22.390 --> 03:28.300
There are quite a few of those serialized ovals and enter marker interface in Java believes well even

03:28.300 --> 03:32.230
though you have to implement two methods to use it.

03:32.230 --> 03:37.330
So we still need to implement it just to tell the JVM that we can perform clone on our object.

03:37.330 --> 03:41.740
But the fact that it lacks a clone method a lot of academics think is an issue.

03:41.740 --> 03:44.450
The clone method is protected as well.

03:44.450 --> 03:48.250
And so we have to provide our own clone and indirectly call object that clone from it.

03:48.370 --> 03:50.400
That's another problem.

03:50.450 --> 03:55.430
We also don't have any control over the object construction because object clone does not invoke any

03:55.430 --> 03:56.730
constructor.

03:56.870 --> 04:03.310
So there are no guarantees that it preserves the invariant established by the constructors some constructors

04:03.310 --> 04:08.230
will have actual extra logic to maybe do some validation or something and that that actually won't be

04:08.650 --> 04:13.390
used when using colonial other problems with a colonial interface.

04:13.480 --> 04:17.950
If you're writing a clone method and child class then all of its superclass classes should define the

04:17.950 --> 04:21.750
clone method otherwise the Super Dog clone chain will fail.

04:21.880 --> 04:27.990
So you have to add more code there object that Colin supports only shallow shallow copying as we mentioned

04:28.440 --> 04:34.310
it does not clone any composition aggregation relationships you'll need to implement the clone in every

04:34.310 --> 04:39.900
class whose reference our class is holding so that's more changes.

04:40.110 --> 04:44.630
And then you have to call their clones separately and a clone method right.

04:44.790 --> 04:49.020
Even though the way I just implemented it is I called clone on that object.

04:49.020 --> 04:52.550
That means that that other object had to have the clone method.

04:52.740 --> 04:58.320
We cannot manipulate final fields and object clone final fields can only be changed through constructors

04:58.740 --> 05:00.470
if we want every object to be unique.

05:00.480 --> 05:06.660
By adding an idea we'll get the duplicate object if we use object clone object that clone will not call

05:06.660 --> 05:11.490
the constructor in the final ideas field cannot be modified from invoking the clone method.

05:11.760 --> 05:17.170
So no final fields when using object clone more problems.

05:17.260 --> 05:22.420
You can't actually do a polymorphic clone operation using foldable interface if you have an array of

05:22.420 --> 05:24.990
colonial quotable objects.

05:25.000 --> 05:30.100
You would think that I could run down that array and clone every element to make a copy of the array.

05:30.100 --> 05:31.510
It doesn't work.

05:31.510 --> 05:36.400
You cannot cast something to colonial and call the clone method Cornwall does not have a public clone

05:36.400 --> 05:36.700
method.

05:36.700 --> 05:43.180
As I mentioned earlier neither does object and so that that periphery its this problem if you try to

05:43.180 --> 05:47.570
cast the Colonial and call the clone method the compiler will say you're trying to call the protect

05:47.570 --> 05:53.070
the clone method on the object so there's no way around this the clone generally share a state with

05:53.070 --> 05:54.140
the object being clone.

05:54.150 --> 05:55.130
Another issue.

05:55.350 --> 06:00.240
So if that state is mutable you do you have now have two independent objects.

06:00.390 --> 06:04.820
If you modify one the other changes as well and all of a sudden you get random behaviour.

06:04.950 --> 06:06.760
That's a big problem.

06:06.840 --> 06:11.880
Colonial is a weak spot and you should be aware of these limitations when you're using them to implement

06:11.880 --> 06:14.030
the prototype design pattern.

06:14.100 --> 06:19.320
I'm bringing them to your attention so you know so there are all some alternatives you could create

06:19.320 --> 06:25.520
your own copy constructor and this is much more common in C++ when you provide your own copy constructor.

06:25.530 --> 06:30.450
It's just like a regular constructor except it returns a new instance of the class.

06:30.450 --> 06:35.490
So as an input has an object which is supposed to be copied and then inside the body the constructor

06:35.490 --> 06:41.430
you implement your custom cloning logic the method of copying objects is one of the most popular among

06:41.430 --> 06:44.490
the developer community using this copy constructor.

06:44.700 --> 06:51.180
It overcomes every design issue of object clone and it provides better control over object construction.

06:52.340 --> 06:56.080
So this is one option.

06:56.390 --> 07:03.050
And here's an example of providing a copy constructor you have your constructor it takes and an overloaded

07:03.050 --> 07:09.690
constructor that takes the object that you want to clone and then you basically just individually copy

07:09.690 --> 07:14.550
remember verbals and if you have aggregation of composition relationships you do the same.

07:14.600 --> 07:18.150
You just go through each member variable and copy it.

07:19.390 --> 07:22.660
And in this case for string and city you create new objects here

07:25.620 --> 07:31.230
so even though you're doing that new and it could be expensive it's still the example of a basic copy

07:31.230 --> 07:35.130
constructor advantages of the copy constructor versus the clone.

07:35.140 --> 07:40.660
We mentioned a little bit of them but it doesn't force us to implement any interface or throw any exception.

07:40.660 --> 07:45.100
So a little bit less code it doesn't require any casts when you want to use it.

07:45.340 --> 07:48.970
It does not require us to depend on an unknown object creation mechanism.

07:49.980 --> 07:54.510
It does not require parent classes to follow any contract or implement anything similar.

07:54.510 --> 07:55.700
Number one.

07:56.190 --> 07:58.200
It allows us to modify final fields.

07:58.200 --> 08:04.840
That was a limitation in the colonial interface not modifying final fields it allows us to have complete

08:04.840 --> 08:07.510
control over object creation.

08:07.510 --> 08:13.420
We can write our own initialization logic in it we can also create converging constructors.

08:13.460 --> 08:15.970
This allows us to convert one object to another object.

08:17.960 --> 08:22.280
So providing your own copy constructor is an alternative and it does have some advantages over the colonial

08:22.280 --> 08:23.900
interface.

08:23.900 --> 08:29.990
Another alternative to using Colonial is to using serialization another way to copy an object is use

08:29.990 --> 08:33.110
the serialization destabilisation approach instead of cloning.

08:33.110 --> 08:37.380
You can serialize an object and then immediately serialize it.

08:37.430 --> 08:43.070
This would result in a new instance created will still not be able to modify the final fields.

08:43.190 --> 08:48.140
We still don't have any control over object instruction and we still need to implement an interface

08:48.140 --> 08:57.510
serialized but which is similar to colonial the serialization process is also slower than object clone.

08:57.510 --> 09:00.150
Here is the serialization de serialization approach.

09:00.330 --> 09:05.820
You have your overloaded constructor that takes the person object and you basically do serialization

09:06.120 --> 09:14.030
you first serialize the object and then you immediately serialize it by using our dot right object and

09:14.030 --> 09:15.120
then reading in it.

09:15.140 --> 09:20.690
This is how you implement serialization in Java by using the write in read objects and you have to catch

09:20.690 --> 09:22.360
exceptions for that as well.

09:22.760 --> 09:25.890
So you could use this as another alternative approach.

09:26.150 --> 09:31.790
If you don't want to use the colonial interface with all its limitations the advantage of cloning using

09:31.790 --> 09:35.330
serialization is it's an alternative the cloning interface.

09:35.950 --> 09:39.850
So especially when you're using specific libraries such as Apache comments.

09:40.100 --> 09:41.330
This can come into play.

09:42.560 --> 09:44.080
It provides deep cloning.

09:44.150 --> 09:49.710
Remember the cloning interface doesn't do that only shallow copies it's suitable even for complex object

09:49.710 --> 09:50.770
grafts.

09:51.090 --> 09:53.740
So you can use it for multiple use cases.

09:53.940 --> 09:59.520
It can be used on existing classes that currently provide just shallow copy which is really the previous

09:59.880 --> 10:07.780
example or advantage with deep clone so to summarize implementing the prototype design pattern using

10:07.780 --> 10:11.970
phone method provided by Java is still the preferred approach.

10:12.100 --> 10:18.970
It's really less code and it still for most use cases works because a lot of the things that are problems

10:18.970 --> 10:22.120
with it you may not encounter or you may not actually care about.

10:22.780 --> 10:27.190
So you implement the colonial interface you override the clone method you call super Doc clone of a

10:27.190 --> 10:34.040
shallow copy is sufficient otherwise you have to implement some custom cloning logic for deep copy if

10:34.040 --> 10:37.750
you don't want to use cloning because of the specific disadvantages mentioned.

10:38.000 --> 10:43.400
Then you can implement either a copy constructor your own copy constructor which is pretty simple or

10:43.400 --> 10:49.570
you can use serialization and even third party libraries will some do some of the serialization de sterilization

10:49.570 --> 10:52.430
approach for you.

10:52.510 --> 10:58.210
I wanted to provide information on some of the problems accountable because it is open for some debate

10:58.210 --> 10:59.920
out there by academics.

10:59.920 --> 11:04.720
I want you to be aware of it so when you implement this prototype pattern you know what the tradeoffs

11:04.720 --> 11:11.050
are and if you really have issues with it it's very simple to use a copy constructor or you serialization

11:11.320 --> 11:12.160
decentralization.

11:12.460 --> 11:13.050
Thank you.
