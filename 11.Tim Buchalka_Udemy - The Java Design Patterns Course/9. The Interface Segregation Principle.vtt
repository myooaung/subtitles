WEBVTT

00:05.220 --> 00:06.800
Hello and welcome back.

00:06.880 --> 00:10.110
In this lecture I'd like to talk about the interface segregation principle

00:12.870 --> 00:15.750
this principle as defined by Robert S. Martin.

00:15.750 --> 00:19.850
We talked about him in our last lecture he's a big pioneer of object going to design.

00:19.890 --> 00:28.800
He was consulting for Xerox to help them build the software for the new printer systems the formal definition

00:29.280 --> 00:35.270
of this principle as clients should not be forced to depend upon interfaces that they do not use apply

00:35.320 --> 00:39.770
should not implement an interface if it does not use a method in the interface.

00:39.880 --> 00:46.330
So previously we're talking about how interfaces are necessary for software reuse and you can use inheritance

00:46.840 --> 00:54.550
for that but we also talked about interfaces don't this I need to be cohesive but having said that you

00:54.550 --> 00:59.770
shouldn't have 50 methods interface shouldn't have 10 in 10 methods an interface because all subclass

00:59.810 --> 01:04.040
all classes and implement that interface have to implement all the methods.

01:04.340 --> 01:08.680
So this principle comes down to cohesiveness for an interface.

01:08.720 --> 01:13.620
You don't want to force clients to implement methods that they don't use.

01:13.630 --> 01:18.700
This happens mostly when one interface contains more than one functionality and the client only needs

01:18.700 --> 01:26.560
one functionality and not the other can segregate those interfaces so the goal of this principle is

01:26.560 --> 01:33.010
to reduce the side effects and frequency of required changes the way that you avoid this is you split

01:33.010 --> 01:36.890
the software into multiple independent parts multiple interfaces.

01:36.910 --> 01:43.220
This is a common theme that I've been mentioning frequently is you have to be adaptive to change you

01:43.270 --> 01:50.140
when you make a change you don't want to have to make it in 50 classes by not following this principle.

01:50.230 --> 01:54.910
You have to change quite a bit and all the clients that implement that interface

01:57.790 --> 02:03.430
and interface design is very tricky job because once you release your interface you really can't change

02:03.430 --> 02:04.770
it.

02:04.880 --> 02:09.900
You can't if you if you will but you'll end up breaking all the implementation especially in Java right.

02:09.920 --> 02:15.380
Because in Java with the keyword interface that means you have to implement all the methods in the interface

02:15.620 --> 02:17.090
before any class can use it.

02:18.360 --> 02:23.040
So if you follow this principle in Java you'll end up implementing last methods because each interface

02:23.040 --> 02:27.870
will have a single functionality will be very highly cohesive right.

02:27.930 --> 02:33.190
And then when you release your interface you won't have to change it as much if you have an interface

02:33.190 --> 02:38.260
with many methods it's not cohesive that's has all sorts of different functions or methods in it you're

02:38.260 --> 02:40.450
forcing all your clients to implement that.

02:40.450 --> 02:45.280
And when you add a new method to that interface now all the clients also have to have it.

02:45.880 --> 02:50.860
So there are many advantages to this principle.

02:50.870 --> 02:56.060
For example suppose there is a system which has multiple functionalities in various clients using those

02:56.060 --> 02:57.170
functionalities.

02:57.380 --> 03:02.650
Normally you create an API you implement it with the job interface keyword pretty straightforward if

03:02.650 --> 03:04.780
you just created one interface.

03:04.780 --> 03:09.580
All the clients will have to unnecessarily implement all the other clients methods just to make that

03:09.580 --> 03:16.200
interface compile and what this is known as it's known as a fat interface right.

03:16.210 --> 03:21.910
This is an object oriented designer's nightmare that makes the overall design very rigid due to the

03:21.910 --> 03:27.700
enormous effort required to manage changes across all the clients when making a change to a method pertaining

03:27.700 --> 03:29.420
only to one client.

03:29.470 --> 03:33.990
You can see this very clearly of an interface has 10 methods.

03:34.180 --> 03:36.670
One of the clients only needs to use a couple those methods.

03:36.700 --> 03:38.690
It's forced to implement all the methods.

03:38.770 --> 03:40.910
Basically just stub them out.

03:41.110 --> 03:46.510
And now when you make a change to the interface you have to modify all these clients and some of the

03:46.510 --> 03:49.380
clients don't even care about those changes.

03:49.390 --> 03:54.250
Now if you had the interface a segregated and you made a change to that interface you would have to

03:54.250 --> 03:57.810
make last changes to the client's just make sense.

03:57.840 --> 03:59.580
So again it's about isolation.

03:59.670 --> 04:01.540
It's about high cohesion.

04:01.750 --> 04:09.520
It's it's about not having something do more than what it's responsible for so this sounds a lot like

04:09.550 --> 04:12.220
other principles that we talked about.

04:12.340 --> 04:14.530
And I'll mention how they're a little bit different.

04:14.950 --> 04:20.660
But one of the things this principle does is it avoids design drawbacks associated with this fat interface.

04:20.740 --> 04:28.050
Basically it will refactor that fat interface into multiple segregated interfaces and then each separate

04:28.050 --> 04:32.670
interface will be a lean interface that will only contain the methods which are required for a specific

04:32.670 --> 04:34.760
client.

04:34.820 --> 04:39.650
Having said all that that does it mean that every interface should only have one method that will make

04:39.650 --> 04:46.310
sense that will not be efficient you just want to have make sure the interface is designed for particular

04:46.310 --> 04:47.200
clients.

04:47.270 --> 04:54.320
And I'll go through an example that demonstrates that a clean interface will basically Cadel cater to

04:54.320 --> 04:59.930
consumers of a specific type of functionality or a specific set of customers all of whom have the same

04:59.930 --> 05:00.910
functional leads.

05:00.980 --> 05:08.320
So you design the interface based on the customer based on the client what the client's needs are so

05:08.430 --> 05:14.490
at this point let's demonstrate the use of this principle in intelligence.

05:14.600 --> 05:15.320
As an example

05:18.990 --> 05:22.180
when I bring up until Jay again you know the drill.

05:22.400 --> 05:27.530
We're gonna do another shaped type of example because shapes are a good way to demonstrate a lot of

05:27.530 --> 05:31.890
these principles because they have many subclasses and many different types.

05:32.390 --> 05:36.270
So we're gonna create a shape interface.

05:36.270 --> 05:48.660
I will name this example integration into actually interface or interface segregation principle into

05:49.030 --> 05:51.910
face segregation.

05:52.270 --> 05:55.210
Example 1 because we're gonna have another example after this

05:59.310 --> 06:03.980
so we'll create the shape interface that's going to represent all sorts of different types of shapes.

06:04.230 --> 06:07.490
The interface is initially going to contain a couple methods.

06:07.670 --> 06:13.230
It's going to contain method for area and a method for calculating value volume.

06:13.230 --> 06:16.760
So we'll name a shape interface.

06:16.770 --> 06:27.380
We'll put these two methods in here both return doubles will say area in public double value.

06:27.840 --> 06:28.100
All right.

06:28.200 --> 06:33.480
And so we know that that because this is an interface every shape will need to implement this interface

06:34.590 --> 06:42.030
however if you look at the shape interface it's not necessarily designed for clients or for different

06:42.030 --> 06:50.440
types of shapes for example squares or flash shapes they don't have volumes this interface would force

06:50.470 --> 06:55.590
all the square classes to implement a method that it has no use for because it doesn't have a volume.

06:56.560 --> 07:02.890
So this interface by itself actually violates the interface segregation principle.

07:02.890 --> 07:11.500
So a better idea would be to create a different interface that only pertains to solid shapes and then

07:11.500 --> 07:18.710
the solid shape interface can implement the volume method so solid shapes like cubes can use this method.

07:18.750 --> 07:19.810
So let's go ahead and do that.

07:21.040 --> 07:27.240
Let's create another interface and again we'll name this solid shape interface

07:33.870 --> 07:45.240
and we'll put the will basically put the volume method in here and we'll take it out of our shape interface.

07:45.690 --> 07:45.890
All right.

07:45.900 --> 07:49.140
And then we'll have a couple classes that implement each one.

07:49.140 --> 07:55.000
So Axl does have one class will input we'll create our cube class that implements both of these interfaces.

07:55.170 --> 08:00.930
Nice feature Java a way around multiple inheritance so this supplement the shape interface.

08:00.990 --> 08:08.690
And this will implement the solid shape interface right and we'll have to implement these two methods

08:08.690 --> 08:19.870
that basically just have no really use other than being stubbed out more or less calculate surface of

08:19.870 --> 08:20.650
the area.

08:20.650 --> 08:31.770
Now Java requires us to return a double so we'll just say 1.0 and for volume return 1.0.

08:32.930 --> 08:34.600
Okay so now this is a better approach right.

08:34.630 --> 08:40.660
Because we separated the Sol tape interface from the shape interface volume and area are separated.

08:40.660 --> 08:45.890
So now if we had a square we would only implement the solid tape interface.

08:45.940 --> 08:53.280
So it's a bit better but there is still a problem because now we're coupled to the type of shape we

08:53.280 --> 08:59.000
saw a couple to the type of shape with these two interfaces so a better approach would actually create

08:59.000 --> 09:00.250
another interface.

09:00.390 --> 09:06.320
A man and shape interface where we can implement both the flat and solid shapes and then we can have

09:06.320 --> 09:09.820
a single API for all clients for managing the shapes.

09:09.840 --> 09:11.340
So let me show you what I mean by that.

09:13.520 --> 09:14.630
Add another interface

09:17.480 --> 09:18.920
manage shape interface

09:22.460 --> 09:29.150
and this will have a public double calculate method.

09:31.100 --> 09:37.700
We'll still have our cube which implements the shape interface and it actually will implement the manage

09:39.140 --> 09:41.550
interface as well.

09:42.020 --> 09:48.670
It will implement the double in the volume but it will also implement this calculate

09:51.770 --> 10:00.700
and what this will do is it will just call the area in volume method so return this dot area plus this

10:00.700 --> 10:04.240
dot volume.

10:05.390 --> 10:12.980
And then we can also create another class only in this one square and this will implement only what

10:12.980 --> 10:14.880
it needs to.

10:14.900 --> 10:18.500
It doesn't have a volume so we'll just implement shape and manage

10:21.920 --> 10:26.120
and so we'll have the area implemented.

10:26.120 --> 10:32.010
So just copy this area implement and just say it's too hard coded.

10:32.510 --> 10:39.350
Get rid of this comments it's not relevant and we'll also implement the calculate method in the calculus

10:39.350 --> 10:39.910
method.

10:40.070 --> 10:41.200
We'll just call the area method.

10:41.960 --> 10:43.270
So here.

10:43.330 --> 10:44.630
Public double calculate

10:47.770 --> 10:53.250
we'll just return the area method.

10:53.650 --> 10:54.280
All right.

10:56.670 --> 11:06.010
And so do you notice here the benefits all the client sees is the its shape interface they can see the

11:06.010 --> 11:11.440
man a cheap interface they can create different ounces of solider shape interfaces so they could create

11:11.440 --> 11:19.110
a cube or a square but all they do is they call calculate the calculate Well then call the methods necessary

11:19.150 --> 11:24.050
the volume or the area there's no coupling to the type of shape it's completely independent.

11:24.420 --> 11:30.790
And so this is a good example of SEC separating interfaces so that you don't force clients to use every

11:30.790 --> 11:33.470
single method that it doesn't need to.

11:33.520 --> 11:38.490
So that's the first example of our interface segregation principle.

11:38.620 --> 11:40.090
Let's look at one more.

11:40.220 --> 11:44.420
So let me create another project.

11:44.710 --> 11:52.760
This example is just going to demonstrate a restaurant and so we'll just do the usual.

11:52.890 --> 11:58.710
I'm gonna call this interface segregation.

11:58.910 --> 12:01.840
Example 2.

12:02.040 --> 12:07.490
In this example I'm going to simulate or demonstrate the concept of a restaurant interface.

12:07.670 --> 12:12.350
The restaurant interface is going to have all sorts of different methods for accepting orders from online

12:12.350 --> 12:17.450
customers dial in or telephone customers walk in customer orders.

12:17.540 --> 12:23.660
It's also going to handle payments either online payments or in-person payments so it's going to be

12:24.200 --> 12:27.080
named restaurant interface

12:32.670 --> 12:39.980
and I'm going to copy and paste here for efficiency but it's going to contain six methods.

12:41.290 --> 12:45.580
And you'll know that you should notice right right off the bat when you look at this interface it kind

12:45.580 --> 12:49.710
of is separated and it's not separating the grouping right.

12:49.780 --> 12:57.450
It's really has the concept of ordering telephone order an online order and then it also has the concept

12:57.450 --> 13:00.250
of poor customer order walking.

13:00.270 --> 13:08.750
It also has the concept of paying but anyways we have this nice interface that has five methods.

13:08.820 --> 13:14.630
Like I said six five methods so we can start to implement this interface.

13:14.660 --> 13:24.350
Let's say we have a client and online client so we'll create a an online client simple impulse and implementation

13:25.580 --> 13:28.990
that's a common suffix that you use on some class names.

13:29.000 --> 13:34.390
This is going to implement the restaurant interface.

13:35.240 --> 13:38.940
And so now I have to actually implement all the methods and interface.

13:39.770 --> 13:48.700
So again copy and paste here for efficiency but what you'll notice is this is an online customer yet

13:48.730 --> 13:55.510
they have to actually implement all of these methods that they're never going to use or never get invoked

13:57.430 --> 13:57.910
right.

13:57.910 --> 14:03.910
They're online so they're only going to need to place orders online in pay for orders online.

14:03.910 --> 14:05.470
So they'll use this one.

14:05.660 --> 14:08.220
This take telephone order doesn't make sense.

14:08.350 --> 14:14.740
Paying online they'll use block in custom order doesn't make sense paying person doesn't make sense.

14:14.830 --> 14:22.920
It's basically three out of the five methods are not applicable here they're wasted right.

14:22.960 --> 14:27.050
The online client improv class here is used for online orders.

14:27.100 --> 14:31.950
It's not used for these other walking orders.

14:32.160 --> 14:39.000
You could have clients for those other order types such as walk in clients or a telephone client and

14:39.000 --> 14:42.180
they would only implement the method specific to them.

14:42.200 --> 14:47.220
A walk in client would implement the walk in customer order or the pay in person.

14:48.990 --> 14:49.150
Right.

14:49.230 --> 14:53.840
So again you see a lot of waste here because all five methods are part of the restaurant interface.

14:53.850 --> 14:56.340
All the clients have to implement them.

14:56.420 --> 15:01.460
Now you could get around it or make it a little bit cleaner by the methods are not actually implemented.

15:01.460 --> 15:04.720
You could throw some kind of unsupported operation exception.

15:04.890 --> 15:11.420
Still it's code that you have to add and also any change in any of the methods of the interface.

15:11.740 --> 15:18.100
Now is gonna be propagated to all of the implementation classes all the clients the online clients the

15:18.250 --> 15:24.410
paying person clients telephone clients regardless with that method even pertains to that.

15:24.430 --> 15:31.750
So this is an example where the this restaurant interface is breaking the segregate integrated interface

15:31.750 --> 15:34.330
segregation principle it's all.

15:34.330 --> 15:37.310
It also breaks a single responsibility principle.

15:37.660 --> 15:39.470
Because what do you notice here.

15:39.640 --> 15:42.790
This restaurant interface has many responsibilities.

15:42.880 --> 15:45.430
It's basically two responsibilities.

15:45.430 --> 15:54.550
Again taking orders and paying it would be much better to separate this interface to have logics for

15:54.550 --> 15:59.360
payments as well as logics for orders and group them together that way.

15:59.500 --> 16:02.110
It doesn't make sense to put it in a single interface.

16:02.260 --> 16:09.070
So if we apply the interface segregation principle to this example what we would probably do is we would

16:09.070 --> 16:18.930
separate out the payment functions so we'd separate out pay online pay in person and we would separate

16:18.930 --> 16:26.460
those out to a payment interface who would also separate out the orders in order methods into an order

16:26.460 --> 16:28.020
interface.

16:28.020 --> 16:32.700
And then each of the clients can use one implementation of either the payment interface or the order

16:32.730 --> 16:33.640
face.

16:33.660 --> 16:43.570
So for example the online client would use the online payment email and the online order email in each

16:43.570 --> 16:48.140
client would only use what they need if we designed that way.

16:48.140 --> 16:54.020
The Single Responsibility Principle will now be adhered to because the payment interface the order interfaces

16:54.050 --> 16:56.350
would be separate and that would depend.

16:56.350 --> 17:00.620
That would be based on their client specific implementations.

17:00.720 --> 17:06.140
It would also allow us when we have any change in any order any of the order or payment or faces.

17:06.240 --> 17:07.770
They're not going to affect one another.

17:07.860 --> 17:15.060
They're completely independent so you can see the benefits here of separation.

17:15.090 --> 17:20.670
And again it is similar to some of the other principles where you want to make your interfaces cohesive

17:20.960 --> 17:25.020
so that you don't have all these clients implementing methods that they do not use.
