WEBVTT

00:05.340 --> 00:08.040
Loan welcome in this lecture.

00:08.190 --> 00:10.480
We're going to go through a challenge for the mediator.

00:10.500 --> 00:15.540
It's going to test your understanding of the mediator design pattern so the requirements we're going

00:15.540 --> 00:18.780
to create an application that simulates an auction.

00:19.140 --> 00:24.800
We're gonna use the mediator pattern for communication of all bids done by buyers so all the bids are

00:24.800 --> 00:31.680
gonna go through a mediator the auction mediator is responsible for adding the buyers determining which

00:31.680 --> 00:37.860
buyer won each auction and letting each buyer know that the auction has ended after finding the winner

00:38.870 --> 00:42.140
so your first step is to create the mediator interface.

00:42.140 --> 00:46.490
This interface is going to allow you to add buyers and it's also going to find the highest bidder.

00:47.430 --> 00:50.760
The next step is to create the concrete mediators.

00:50.760 --> 00:55.080
This all these conquer meteors should maintain a list of all the buyers.

00:55.170 --> 01:00.390
They're also going to find the highest bidder by traversing the list see you as the highest bid and

01:00.390 --> 01:03.490
then they'll send a message to buyer that the auction is over.

01:05.180 --> 01:07.430
You need to create the colleague abstract class.

01:07.430 --> 01:09.290
This could be named buyer.

01:09.290 --> 01:15.850
This will contain methods for bidding canceling a bid in notification of when an auction has ended.

01:15.890 --> 01:21.910
It will also have state for name in price so two member variables name and price.

01:21.990 --> 01:24.070
You need to create the concrete colleagues next.

01:24.090 --> 01:26.390
This will be auction buyers.

01:26.730 --> 01:31.510
All they need to do is display default messages when the auction has ended.

01:31.510 --> 01:33.330
You also need to create the clients.

01:33.460 --> 01:36.720
The clients should simulate the auction they should create some buyers.

01:36.730 --> 01:41.330
They should add some buyers to the mediator and then they should have some buyers place some bids cancel

01:41.350 --> 01:44.390
bids etc..

01:44.480 --> 01:46.190
Here are some example output.

01:46.520 --> 01:54.290
Here we created some users some auction buyers and we basically use the mediator to add them to the

01:54.290 --> 01:56.240
list so we have three buyers.

01:56.240 --> 02:01.340
We then displayed some message such as to saying Welcome to the auction tonight we're selling a vacation

02:01.340 --> 02:01.790
to Vegas.

02:01.790 --> 02:05.900
Please make some offers and then they're waiting for buyers off as the mediator.

02:06.380 --> 02:12.950
And then through all the offers that we'll make in the client will then announce the winner and then

02:12.950 --> 02:14.160
we'll also allow to cancel.

02:14.180 --> 02:16.160
So they immediately cancelled their bid.

02:16.430 --> 02:22.200
In that case the next person was the winner and they paid eighteen hundred dollars for the item and

02:22.200 --> 02:28.690
then we notify the other auctions that the auction is over and that the winning bid has been found.

02:30.120 --> 02:36.330
So the goals of the challenge are you should have a clear idea that this pattern is very useful.

02:36.330 --> 02:42.680
When we observe complex communications and a system communication among officers is much simpler with

02:42.680 --> 02:43.380
this pattern.

02:44.870 --> 02:48.980
This pattern is going to reduce the number of subclasses in the system and it's also going to enhance

02:48.980 --> 02:49.660
loose coupling.

02:50.850 --> 02:57.120
Here the Many to Many relationship is we've placed with a one to many not many to many being many auction

02:57.120 --> 02:58.820
buyers to many other auction buyers.

02:58.890 --> 03:06.420
It's one too many one auction buyer to the mediator it's much easier to read and understand we can provide

03:06.420 --> 03:13.010
a centralized control with this pattern boy downfalls sometimes the cancellation process can become

03:13.010 --> 03:18.950
tricky when we can find it difficult to maintain or implement especially if we have a lot a lot of complexity

03:18.950 --> 03:22.390
in that mediator itself but these are the goals for the assignment.

03:22.400 --> 03:25.300
Implement this mediator pattern to simulate an auction.

03:25.400 --> 03:28.170
I gave you many tips on the classes that you need to create.

03:28.220 --> 03:29.840
Let me know if you have any questions in the queue.

03:29.870 --> 03:34.670
Otherwise good luck in the next lecture I'll provide a solution to this challenge.

03:34.670 --> 03:35.060
Thank you.
