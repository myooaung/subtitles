WEBVTT

00:05.160 --> 00:06.600
Hello and welcome back.

00:06.690 --> 00:10.470
This lecture I want to show you one more way you can implement the factory method.

00:10.560 --> 00:12.510
It's very very similar to the previous method.

00:12.510 --> 00:18.780
The most common implementation of just using one concrete class except that in this case you don't need

00:18.780 --> 00:20.810
the concrete class could just have a static method.

00:20.850 --> 00:24.340
And so you don't know enough to create an instance of your factory.

00:24.420 --> 00:28.550
You can just use a static method and call the factory method directly.

00:28.560 --> 00:31.800
So again it's a kind of a simplified version.

00:32.580 --> 00:34.860
It just includes the use of a static method.

00:34.860 --> 00:37.230
You define a factory as a static method.

00:37.230 --> 00:42.080
Another common technique it's often called a static factory.

00:42.090 --> 00:47.730
This technique is sometimes use so that you do not need to instantiate a factory class to make use of

00:47.730 --> 00:50.420
the Create method.

00:50.640 --> 00:55.930
It has the disadvantage that you cannot subclass and change the behavior of the treatment create method.

00:56.000 --> 01:00.790
So if you did want to change the factory method itself you won't be able to do it.

01:00.960 --> 01:06.570
She would do this simplified ways where you don't have any change in any of the factory methods.

01:08.310 --> 01:12.840
Let's walk through this and ontology again very very similar to the previous example just gonna change

01:12.840 --> 01:13.650
one tiny thing

01:17.900 --> 01:23.990
so I'm going to call this example I'm going to call the static method creator so called Factory static

01:23.990 --> 01:25.580
method creator example

01:29.650 --> 01:32.110
factory static method creator

01:36.510 --> 01:41.300
factory static method creator.

01:41.310 --> 01:41.880
Example

01:44.730 --> 01:51.060
again We'll quickly go through creating the product interface and the concrete products shapes circle

01:51.570 --> 01:54.450
and rectangle.

01:54.450 --> 01:57.240
All this should look very very familiar.

01:57.300 --> 02:00.200
Got the stuff memorized.

02:00.420 --> 02:05.970
Shape interface interface represents the products just have that draw method.

02:06.090 --> 02:09.130
So we just have our simple rectangles.

02:09.190 --> 02:12.760
Again I'll quickly copy and paste this in.

02:12.900 --> 02:18.030
The only thing that's really going to change in this example is the fact that our concrete creator is

02:18.030 --> 02:21.140
going to have a static method.

02:22.260 --> 02:28.280
Product stuff doesn't actually change at all it just implements the draw method.

02:28.280 --> 02:31.320
Still same types of products.

02:31.340 --> 02:37.940
Just want to make sure compile so we're gonna make default implementations or default access modifiers

02:42.050 --> 02:46.820
still need to create or shape factory which is our concrete creator.

02:46.940 --> 02:49.510
It's just going to have a single method in it.

02:50.420 --> 02:51.130
Static method.

02:53.120 --> 02:58.760
So our shape factory we'll have to get shape and get shape looks just like it did in the previous example

02:59.300 --> 03:01.970
except it's static.

03:01.970 --> 03:03.990
So again not much different here.

03:04.020 --> 03:04.270
All right.

03:06.140 --> 03:12.020
If it circle or turns in your circle if it's a rectangle returns any rectangle into new square turn

03:12.080 --> 03:15.320
the New Square we're familiar with this.

03:15.320 --> 03:20.990
We now need to create our client which instead of having to create an instance of the concrete creator

03:20.990 --> 03:23.570
it can just use a static method.

03:23.570 --> 03:27.230
Again very very similar to the previous one.

03:27.410 --> 03:32.570
It just makes it a little bit cleaner because we don't have to create that instance.

03:32.570 --> 03:39.040
So now we can call the get shape directly to statically what we will do here is we will do something

03:39.040 --> 03:46.580
like this inside of our main is if we want to get a circle object we don't have to create an instance

03:46.580 --> 03:47.860
shape factory.

03:47.860 --> 03:49.960
We just use the static method get shape.

03:49.960 --> 03:56.320
We still pass on the parameter that represents the type that we want to instantiate using a string and

03:56.320 --> 03:57.440
then we call our draw method.

03:58.030 --> 04:02.950
So pretty straightforward just that static method that's the only thing that changes in this implementation

04:06.340 --> 04:13.740
so we will do the same for rectangles and squares and then you'll notice when we compile and run it

04:13.820 --> 04:16.660
it has the same output as the previous examples.

04:16.900 --> 04:19.120
So this will build and then run

04:23.720 --> 04:25.550
and we have to make sure we run the client

04:29.270 --> 04:35.790
and then again you'll see that the output is similar to previous examples the correct instance is called

04:37.080 --> 04:40.630
for the type that needs to be created to summarise.

04:40.650 --> 04:46.620
The only difference here is that that static method public static shape give shape client does not have

04:46.620 --> 04:50.800
to create an instance a shape factory just calls good shape directly.

04:50.970 --> 04:51.570
Pretty straightforward.

04:52.230 --> 04:52.560
Thank you.
