WEBVTT

00:05.250 --> 00:06.820
Hello and welcome back.

00:06.830 --> 00:14.140
This lecture I'd like to talk about the different types of design patterns so we mentioned before that

00:14.170 --> 00:20.450
design patterns will vary in their granularity level of abstraction and how they relate to one another.

00:20.500 --> 00:25.570
So there's different types of design patterns based on these characteristics.

00:25.720 --> 00:28.630
Some patterns are often used together.

00:28.630 --> 00:36.910
For example the composite pattern is often used with the iterator or the visitor Some patterns are alternatives.

00:37.100 --> 00:40.180
They may do the same thing that they're just slightly differ.

00:40.190 --> 00:44.810
So for example the prototype is often an alternative to the Abstract Factory pattern.

00:44.900 --> 00:51.500
Again just on some examples some patterns result in similar designs even though the patterns have different

00:51.500 --> 00:52.800
intents.

00:52.850 --> 00:57.470
So some of the structure diagrams of the composite the decorator look very similar.

00:57.470 --> 01:02.900
As we go through these different patterns I will provide you with different diagrams outlining the design.

01:03.050 --> 01:10.410
And you'll notice these similarities so there are many design patterns and we need to organize them

01:10.620 --> 01:13.930
based on all these differences and similarities.

01:13.940 --> 01:14.170
All right.

01:14.250 --> 01:19.770
If they're used together if there are alternatives if they have different intents but similar designs

01:19.800 --> 01:21.450
we want to have a way to organize them.

01:22.560 --> 01:27.220
So the design patterns are classified into families of related patterns.

01:27.300 --> 01:34.560
And again this allows you to learn the patterns much quicker because you can focus your efforts on specific

01:34.560 --> 01:41.490
patterns grouped together so the 23 design patterns that we're going to study in this class all have

01:41.490 --> 01:48.510
these different levels of granularity and they all have specific applications that they can be adhered

01:48.510 --> 01:49.570
to.

01:49.710 --> 01:54.450
So they're divided into three different types the gangs of four came up with this classification they're

01:54.450 --> 01:56.010
organized by purpose.

01:56.010 --> 02:00.270
Basically what the pattern does is going to be how they're organized into these three different types

02:00.850 --> 02:03.150
three types that are Oregon.

02:03.150 --> 02:10.030
They're organized into our creation all structural structural and behavior creation all patterns concerned

02:10.050 --> 02:14.010
the process of object creation so creating instances of objects in Java.

02:14.010 --> 02:20.860
We do that using the new operator the structural patterns deal with the composition of classes or objects.

02:20.870 --> 02:25.380
All right how classes are related to one another by using composition.

02:25.410 --> 02:33.480
A lot of us has had use that has a characteristic behavior patterns are all organized in how objects

02:33.480 --> 02:35.830
communicate how they interact.

02:35.970 --> 02:40.480
So message passes in passing or how objects can work together.

02:41.010 --> 02:47.730
Design Patterns are also organized by scope and what this means is whether the pattern applies primarily

02:47.970 --> 02:50.630
to classes or to objects.

02:50.670 --> 02:59.480
So this is sort of a subcategory based on those three categories creation all patterns will be sub to

02:59.490 --> 03:01.500
class patterns or object patterns.

03:01.590 --> 03:06.880
The same applies to structural and behavioral class patterns deal with relationships between classes

03:06.880 --> 03:09.580
and their subclasses pretty straightforward.

03:09.590 --> 03:14.600
These relate these relations is usually a stretch establish through inheritance or using an interface

03:14.600 --> 03:21.110
through the inheritance child relationship objects patterns deal with objects relationships.

03:21.320 --> 03:25.170
And this means they can be changed at runtime making them much more dynamic.

03:25.190 --> 03:25.370
Right.

03:25.380 --> 03:28.230
We you some kind of polymorphism or something like that.

03:28.640 --> 03:34.770
They describe how objects can be composed into larger structures using object composition.

03:34.770 --> 03:35.290
Right.

03:35.300 --> 03:39.590
Taking a number of different objects making them and then creating another object that contains all

03:39.590 --> 03:40.820
those objects.

03:41.010 --> 03:41.320
Right.

03:41.330 --> 03:46.250
So it's very very useful so we'll talk about these three different categories and then also talk about

03:46.250 --> 03:53.030
how the class and object patterns also differ under those categories First we'll start with creation

03:53.100 --> 03:59.370
patterns in basically the creation of pattern to have to deal with creating instances of objects.

03:59.580 --> 04:04.620
And the reason for that is when you write a program the program should not depend on how the objects

04:04.620 --> 04:06.050
are created or arranged.

04:06.050 --> 04:11.670
You don't should have any dependencies in this in this regard regional design patterns provide a way

04:11.670 --> 04:14.610
to create objects in Java.

04:14.610 --> 04:18.140
As I mentioned the simplest way to create an instance of an object by using the new operator.

04:18.150 --> 04:21.030
We all know this because we're we're pretty proficient in Java.

04:21.030 --> 04:25.920
So for example if you were to create an instance of an object named Fred you create an object named

04:25.920 --> 04:27.170
Fred equals new Fred.

04:27.180 --> 04:27.930
Pretty straightforward.

04:27.930 --> 04:31.830
That's an instance of the Fred class creation design patterns.

04:31.830 --> 04:36.600
The abstract the instantiation process and again this is another common theme you're going to see in

04:36.600 --> 04:37.950
many of the design patterns.

04:37.950 --> 04:45.240
This concept of abstraction in what is the concept of abstraction it is hiding details.

04:45.330 --> 04:48.660
You do not want to be bogged down with the details.

04:48.690 --> 04:52.020
As a programmer you don't need to waste your time dealing with that.

04:52.020 --> 04:58.550
So a lot of the details are hidden and in the case of creation patterns the creation of logic is hidden.

04:58.920 --> 05:05.760
So all the knowledge is encapsulated about how the Concord classes are created and what concrete classes

05:06.030 --> 05:08.430
an entire application will use.

05:08.430 --> 05:13.890
So simply the programmer is probably gonna call a method or use another object rather than instantiating

05:13.890 --> 05:16.170
those objects directly using the new operator.

05:16.170 --> 05:20.910
So when you use these design patterns that are concerning creation patterns you're not going to be using

05:20.910 --> 05:21.630
new.

05:21.630 --> 05:25.590
You're going to be calling a method or you're going to use another object.

05:25.590 --> 05:31.720
All the system at large knows about the objects is their interfaces as defined by abstract classes.

05:31.740 --> 05:36.310
Again another common theme you're going to see throughout the course are these design pattern is going

05:36.310 --> 05:41.620
to be implemented using interfaces and after our classes and a lot of times it's interchangeable.

05:41.610 --> 05:48.150
There's not much difference to the interface in abstract class in Java an abstract class both an interface

05:48.150 --> 05:50.430
and after class cannot be instantiated.

05:50.510 --> 05:56.190
The only real differences in abstract class will have maybe some default behavior but even now with

05:56.190 --> 05:59.160
Java eleven interface is going to have to fault behavior as well.

05:59.160 --> 06:05.970
After our classes may have properties interfaces don't usually have properties so this gives the programmer

06:05.970 --> 06:11.780
a lot of flexibility in what gets created who creates it how it gets created and winning gets created.

06:12.780 --> 06:13.000
Right.

06:13.050 --> 06:17.590
So this is important that this flexibility is provided by the programmer.

06:17.640 --> 06:19.100
And again another common theme.

06:19.110 --> 06:25.920
Flexibility so craziness patterns will let you can figure a system with product objects that vary widely

06:25.920 --> 06:27.690
in structure and functionality.

06:27.840 --> 06:34.110
The conflict collaboration can be static which is at compile time or dynamic which is at runtime sometimes

06:34.110 --> 06:36.450
criminal patterns are competitors.

06:36.480 --> 06:41.940
So for example there are cases with either a prototype or an abstract factory that can be used interchangeably

06:42.270 --> 06:48.800
and they both will help the programmer sometimes creating all patterns are complementary.

06:48.810 --> 06:53.520
What this means is you can use them together so the builder criminal pattern.

06:53.550 --> 06:59.040
When we discuss that it can often be used with other patterns to implement which components get built.

06:59.070 --> 07:02.490
The prototype can use a singleton design pattern in its implementation

07:05.110 --> 07:09.600
creation or class patterns defer some part object creation of subclasses.

07:09.710 --> 07:16.370
So remember I mentioned on a previous slide that each category reclassification of design pattern whether

07:16.370 --> 07:21.500
it be creation all behavior or structural still has subcategories.

07:21.500 --> 07:24.230
This class patterns versus object patterns.

07:24.230 --> 07:30.440
And again the class patterns have to deal with classes and subclasses and so for creation all patterns

07:30.710 --> 07:37.620
the class patterns will just defer the actual instantiation to the subclasses or if their interfaces

07:37.620 --> 07:43.800
to any of the interface classes and implement the interface creation will object patterns D for the

07:44.020 --> 07:50.080
stance taken to another object so they're going to the responsibility of another object instantiate.

07:50.340 --> 07:53.250
There are five criminal patterns that we're going to study and focus on.

07:53.250 --> 07:59.520
I gave you a brief glimpse of this in our course overview when we go through each pattern will identify

07:59.520 --> 08:03.690
similarities and differences between these different criminal patterns.

08:04.010 --> 08:11.850
The 5 creation patterns that we will study will be the factory the abstract factory the builder the

08:11.850 --> 08:18.240
prototype and the singleton and we'll cover those and a lot more detail.

08:18.480 --> 08:24.150
The second classification I want to talk about the structural patterns these patterns describe how classes

08:24.150 --> 08:30.370
and objects can be combined to form larger structures where we use them together usually inheritance

08:30.370 --> 08:33.230
is used with interfaces or implementations.

08:33.250 --> 08:34.960
Again that's a common theme.

08:35.100 --> 08:38.290
A structural object patterns describe ways to assemble objects.

08:38.980 --> 08:44.770
So for example complex user interfaces and accounting data user interface may have many many different

08:44.770 --> 08:47.720
objects such as buttons menus sub menus.

08:47.770 --> 08:54.490
How can you use all of them together to create a user interface these design patterns concern class

08:54.490 --> 08:55.560
and object composition.

08:55.570 --> 08:57.430
Again composition.

08:57.430 --> 09:02.190
You often see this will go through the details of composition book composition is all about a has a

09:02.200 --> 09:05.090
relationship composition.

09:05.080 --> 09:09.850
There's actually a composite pattern that's very similar to this composition is where one AMG contains

09:09.850 --> 09:13.460
another object and it's usually described with two terms.

09:13.540 --> 09:19.390
Aggregation in composition together interchangeably and it's really just whether or not the lifetime

09:19.390 --> 09:21.670
of the object is this We'll talk about that again in more detail.

09:22.640 --> 09:27.890
Specifically the composite design pattern describes how to build the class hierarchy made up of classes

09:27.890 --> 09:29.760
for two kinds of objects.

09:29.960 --> 09:37.700
And this describes really composition the proxy design pattern acts as a convenient surrogate or place

09:37.700 --> 09:39.280
holder for another object.

09:39.440 --> 09:45.140
Often using and networking just like if you think of a proxy with a web address it provides this level

09:45.140 --> 09:49.160
of indirection to specific properties of objects.

09:49.160 --> 09:53.610
There are 7 structural patterns that we will study we'll go through that again.

09:53.650 --> 10:00.980
We're gonna be highlighting similarities and differences and have a ton of examples some examples of

10:00.980 --> 10:08.240
those seven structural patterns are things like the adapter the composite.

10:08.240 --> 10:12.790
As I mentioned the bridge or the facade.

10:12.870 --> 10:18.450
The third classification of patterns that we'll discuss are the behavior patterns.

10:18.450 --> 10:23.820
These are really the ones that you might me use most often because they talk about object communication

10:25.110 --> 10:30.600
how objects relate to one another another and how they can basically talk to one another character.

10:30.630 --> 10:35.820
They characterize complex control flow that is difficult to follow runtime control flow loop statements

10:36.600 --> 10:42.930
iteration conditional statements they shift the focus away from flow of control to let you concentrate

10:42.990 --> 10:45.610
just on the way the objects are interconnected.

10:45.630 --> 10:50.730
Again a common theme of abstraction flexibility you'd want to worry about a lot of these details these

10:50.730 --> 10:52.790
patterns will do them for you.

10:53.040 --> 10:58.290
So these patterns increase flexibility in carrying out this communication they provide solutions on

10:58.290 --> 11:03.300
how to segregate objects to be both dependent and independent.

11:03.300 --> 11:08.040
They're concerned with algorithms and the assignment of responsibilities between optics.

11:08.040 --> 11:12.870
Again this will all be clear when we go through more examples and more details of each one of our patterns

11:13.990 --> 11:16.640
the behavior patterns use inheritance.

11:16.780 --> 11:22.690
Again commonality here to describe these algorithms flow control inheritance does include interfaces

11:23.290 --> 11:28.330
for example the template method is a design pattern that's behavior and it's an abstract definition

11:28.330 --> 11:34.870
of an algorithm it defines an algorithm step by step and lets you interchange some of those steps a

11:34.870 --> 11:40.030
subclass will flush out the actual algorithm by defining abstract operations so you have an abstract

11:40.030 --> 11:46.000
class and then each one of those abstract implementations it needs need to be separated out will be

11:46.000 --> 11:52.180
in their own subclasses behavior object patterns describe how a group of objects cooperate to perform

11:52.180 --> 11:55.960
a task that no single object can carry out alone.

11:56.130 --> 12:01.830
So again object composition is used rather than inheritance both and both times when you use these object

12:01.830 --> 12:02.550
patterns.

12:02.670 --> 12:06.900
Right so remember the difference here we're identifying differences between class and object patterns

12:07.320 --> 12:13.530
class patterns we know use inheritance object patterns use composition but specifically related to behavior

12:13.530 --> 12:14.480
patterns.

12:14.910 --> 12:21.810
What will happen in the object patterns is how the group evolves cooperate form a single task again

12:21.850 --> 12:26.620
composition is preferred over inheritance with the object patterns the mediator patterns example of

12:26.620 --> 12:32.040
an object pattern under the behavior classification uses a mediator objects for pure object communication

12:33.430 --> 12:37.940
mediator basically has this level of indirection that allows for loose coupling.

12:38.110 --> 12:42.160
Another important term again I'm trying to identify highlight some of these terms that you hear throughout

12:42.160 --> 12:48.130
the course coupling coupling all about dependencies tightly coupled systems harder to maintain.

12:48.130 --> 12:55.040
Because if you change one class or another class gets affected we want to avoid tightly coupled systems

12:55.040 --> 12:56.140
of tightly coupled objects.

12:56.140 --> 12:59.850
We want to strive for loose coupling related to cohesion.

12:59.860 --> 13:00.080
Right.

13:00.100 --> 13:02.880
We know cohesion talks about responsibility.

13:02.980 --> 13:04.260
Focus of an object.

13:04.270 --> 13:08.140
High cohesion means that the object is very very highly focused.

13:08.170 --> 13:10.740
It's not all over the place like cohesion would be.

13:10.900 --> 13:13.940
An object has too many responsibilities it's doing too many things.

13:13.990 --> 13:17.510
And again this relates to maintenance fixing bugs adding new code.

13:17.620 --> 13:25.460
It's much harder to do that in a system that is tightly coupled and very low low cohesion there are

13:25.730 --> 13:32.930
11 behaviour patterns that we will study things like the chain of response the command the interpreter.

13:32.930 --> 13:35.500
Many more patterns in the behavior aspect.

13:35.540 --> 13:40.010
The last slide here I wanted to show you is just really an overview I took from the getting a fourth

13:40.010 --> 13:40.610
book.

13:40.610 --> 13:45.890
That kind of identifies these three different classifications and a quick summary of what's going on.

13:46.250 --> 13:48.040
This is just for reference.

13:48.050 --> 13:52.610
Again we're gonna go through all these details when we talk about each pattern in detail but you'll

13:52.610 --> 13:54.590
notice how each one is separated.

13:54.710 --> 13:56.780
Again creation all patterns right.

13:56.900 --> 14:03.920
How you create instance of objects either using objects themselves or composition after factory builder

14:03.980 --> 14:10.980
factory method they vary a little bit and they also have some similarities and sometimes they work together

14:11.460 --> 14:17.850
structural patterns like the adapter and the decorator right have to do with the structure of an object.

14:18.030 --> 14:25.050
Behavior patterns how they can communicate mediate or momento all are categorized based on what they

14:25.050 --> 14:26.420
can accomplish.

14:26.610 --> 14:30.870
And so this is how the course is going to be designed we're going to go through each one of these patterns

14:31.080 --> 14:34.560
sequentially by focusing on each category first.
