WEBVTT

00:05.200 --> 00:06.920
Hello and welcome back.

00:06.920 --> 00:10.040
In this lecture I want to show you how you can draw a class diagram.

00:10.040 --> 00:14.920
Well what I'll be doing is showing you some of the notation some of the symbols that you'll see in a

00:14.920 --> 00:20.860
class diagram so you can understand what the class diagram is trying to represent in terms of the objects

00:20.980 --> 00:22.510
and their relationships.

00:22.510 --> 00:26.680
We can then show you design patterns you can look at the class diagram and you can understand it I a

00:26.680 --> 00:31.750
quick glance what the design pattern is demonstrating how the objects relate.

00:31.820 --> 00:35.470
So again UML is popular for its diagram a graphic and notations.

00:35.480 --> 00:41.210
You have to understand these notations visualization is the most important part of UML.

00:41.210 --> 00:47.350
So you need to understand and kind of at least get an idea of the symbols that are used in the diagram.

00:48.100 --> 00:53.270
The notations again most important elements in the modelling insufficient and appropriate use of notation

00:53.270 --> 00:56.280
is very important for making complete meaningful model.

00:56.280 --> 01:00.080
The model's useless unless its purpose is depicted properly.

01:00.080 --> 01:01.220
Kind of common sense right.

01:01.220 --> 01:06.120
We need to understand the notations you want and learn the notations at the very beginning.

01:06.260 --> 01:11.580
Different notations are available for classes and their relationships.

01:11.840 --> 01:14.690
Each rectangle in a class diagram represents class.

01:14.690 --> 01:16.620
That's the most basic of basic.

01:16.850 --> 01:23.180
You see the class diagram you see a rectangle that means hey that's a class you can represent up to

01:23.180 --> 01:25.070
three aspects of a class.

01:25.220 --> 01:30.950
The name of the class the data members of the class which are the member variables and the methods of

01:30.950 --> 01:31.920
the class.

01:32.180 --> 01:38.450
Those are inside the rectangle themselves so this is the basic notation that you'll see in any formal

01:38.460 --> 01:43.390
diagram you may see one or you may see all three on the left hand side.

01:43.410 --> 01:46.370
What you see is the square right.

01:46.410 --> 01:50.190
That just shows the class name it doesn't show any attributes or any methods.

01:50.190 --> 01:56.250
It's a rectangle the name you want to use this type of representation when more detailed information

01:56.250 --> 01:57.340
is not needed.

01:57.390 --> 02:01.710
Sometimes you just want to show the objects in the system and you don't need to show the attributes

02:01.710 --> 02:06.570
and methods you say want to say hey high level here are the objects that I have that you in that case

02:06.570 --> 02:13.320
you would just use left hand side just a rectangle the middle Iraq angle shows both a name of the object

02:13.350 --> 02:18.960
or the class and the methods in the class and the way that you know it's a method is you have the parentheses

02:18.960 --> 02:19.700
there.

02:20.010 --> 02:26.430
So the square has a method display the plus sign in front of the display means that the method is public.

02:26.470 --> 02:31.270
You don't always see the plus sign sometimes it's it's there sometimes it's not sometimes somebody some

02:31.270 --> 02:33.610
UML diagrams will see the public keyword.

02:33.610 --> 02:40.000
The one thing to understand was UML each variation of the tool used to generate the the diagram has

02:40.000 --> 02:42.260
subtle differences.

02:42.280 --> 02:47.320
Again most of my the same right or all of them have rectangles all of them have three separate components

02:47.320 --> 02:52.120
for attributes and behavior but some of may use plus for public.

02:52.120 --> 02:56.210
Some may use something else for access modifiers it all depends.

02:56.260 --> 02:58.990
It's usually very intuitive to see what's going on.

02:59.950 --> 03:03.570
But the second one is just going to display behavior in the name of class.

03:03.640 --> 03:09.370
The third one is showing the methods attributes and the name of the class the minus sign before the

03:09.370 --> 03:16.110
data member member variable length means that it's it's private right.

03:16.190 --> 03:23.000
And then the colon after the colon you specifying the data type of of the member variable again a rectangle

03:23.030 --> 03:23.930
name.

03:24.170 --> 03:28.970
Member variables in the second component and then the third component in the rectangle.

03:28.970 --> 03:29.760
You have the methods.

03:29.780 --> 03:34.760
That's typical convention with plus or minuses Republican private.

03:34.760 --> 03:40.400
And then you also have one for protected and usually have the type of the variables in the second compartment

03:40.400 --> 03:45.410
for member variables you may have a fourth section.

03:45.420 --> 03:48.360
Again it depends on the tools and the variations.

03:48.360 --> 03:51.300
It's optional to show any additional components.

03:51.390 --> 03:54.190
So sometimes you'll see something like this at the bottom.

03:54.210 --> 03:59.520
Maybe some examples like responsibilities and it'll give a purpose of the class or something like that.

03:59.520 --> 04:00.870
That's not always the case.

04:00.900 --> 04:07.800
I got this diagram from the design patterns book they showed some basic nice illustration with some

04:07.800 --> 04:10.070
basic names right.

04:10.080 --> 04:13.020
So the top is the name the second section.

04:13.080 --> 04:14.400
Public protected or private.

04:14.400 --> 04:21.420
Using plus minus or pound sign the tape type separated by the colon and then you have your methods in

04:21.420 --> 04:26.280
the third compartment here of the rectangle plus minus pound for private.

04:26.280 --> 04:28.980
Public and protected in parentheses after.

04:28.980 --> 04:33.630
And then that fourth component which is not mandatory you don't often see this in most diagrams but

04:33.630 --> 04:38.660
if you do it's usually just some kind of descriptive of the responsibility of the class.

04:41.660 --> 04:43.700
UML notation for access.

04:43.700 --> 04:50.540
As I mentioned you'll see plus minus and pound but you may see other ones as well for four member variables

04:50.570 --> 05:00.100
and methods like and we know the difference between public protected private but you'll see those little

05:00.100 --> 05:05.990
symbols in front of data members are methods to describe axis relationships.

05:06.130 --> 05:08.510
They can also serve relationships as I mentioned.

05:08.740 --> 05:13.450
This gives real proper meaning to the UML model if you don't understand or don't display the relationships

05:13.480 --> 05:14.560
between objects.

05:14.560 --> 05:15.730
It's not as useful.

05:15.760 --> 05:20.530
You would basically just know that there are objects in the system with certain attributes and behavior

05:21.140 --> 05:26.950
the different types of relationships and UML are extents ability which is inheritance you can show an

05:26.950 --> 05:32.830
inheritance relationship and is a you can show association relationships which is aggregation or composition

05:32.860 --> 05:38.350
that has a relationship you can show a dependency relationship which represents a dependency between

05:38.350 --> 05:39.670
two classes and a system.

05:39.670 --> 05:47.630
This is kind of a uses a relationship again when you pass an object to a method or something like that.

05:47.730 --> 05:51.580
Here is how the class relationships are shown in general.

05:51.580 --> 05:53.820
Again there may be slight variations of this.

05:53.830 --> 05:57.400
Don't freak out if you see a little bit of differences.

05:57.410 --> 06:05.580
Well typically aggregation is shown with the diamond symbol and it's it's empty and then composition

06:05.580 --> 06:10.250
will be shown with a diamond from one class to the next filled in right.

06:10.290 --> 06:15.760
So a is an aggregate a aggregates B or B as part of an A.

06:15.780 --> 06:20.240
The first illustration there is composed of B or A contains B type objects.

06:20.340 --> 06:24.920
As with the dark symbol that's the has a relationship.

06:24.920 --> 06:28.520
The bottom two are showing inheritance in dependency inheritance.

06:28.550 --> 06:34.460
You'll see a triangle and the triangle the one that's pointing to would be the base class and the one

06:34.460 --> 06:38.620
that's doing the pointing is the subclass so be is a subclass of a..

06:38.630 --> 06:42.010
In this example dependency uses a relationship.

06:42.020 --> 06:51.320
You have a dash line a depends upon B A uses b something like that and again there might be slight variations.

06:51.930 --> 06:53.700
There is a relationship.

06:53.730 --> 06:54.750
Here's another example.

06:54.750 --> 06:58.440
That is a relationship and a little more detail with a detailed example.

06:58.440 --> 07:03.600
So the arrowhead or the triangle under the shape class means that those classes pointing in the shape

07:03.990 --> 07:10.050
are subclasses from shape so one run and represents the parent element and the other end represents

07:10.050 --> 07:15.680
the child element subclass and because shape is italicized that means it's an abstract class.

07:15.750 --> 07:20.160
You'll see subtle differences in there a lot of the class diagrams were actually put an abstract keyword

07:20.220 --> 07:27.300
in front of that to make it even more clear but pretty simple here to look at really quickly and see

07:27.480 --> 07:27.730
Hey.

07:27.750 --> 07:31.410
Point line and Square are subclasses of base class shape.

07:31.470 --> 07:34.530
Imagine describing this in some kind of paragraph.

07:34.680 --> 07:37.950
It would take you a lot longer and it would be a lot harder to understand.

07:39.180 --> 07:44.940
Has a relationship again whether it's aggregation or composition it's going to slightly vary but in

07:44.940 --> 07:47.670
this case we have the open diamond.

07:47.700 --> 07:58.210
So we're showing aggregation and with this detailed example right we're saying that airport is having

07:58.300 --> 08:03.430
aircraft aircrafts are not part of airport but I can still say that airport has them.

08:03.430 --> 08:08.660
So the unfilled diamond on the right of the airport class indicates the aggregation relationship.

08:08.850 --> 08:13.990
Aircraft either a jet or a helicopter is a relationship is also demonstrated here.

08:14.020 --> 08:16.370
Aircraft is an abstract class because it's italicized

08:20.510 --> 08:21.970
the composition relationship.

08:21.980 --> 08:27.340
Remember it has a relationship but shows when something is part of something else.

08:27.350 --> 08:34.290
In this example we're showing that car has tires as parts so the type relation is depicted by the solid

08:34.290 --> 08:38.850
diamond and you also see a uses our relationship or car uses a gas station.

08:40.830 --> 08:49.140
So that second so the dependency relationship as I just mentioned car uses a gas station it's depicted

08:49.140 --> 08:50.860
by that dash line with an arrow.

08:51.120 --> 08:58.990
A dependency exists between car and gas station again pretty straightforward cardinality.

08:58.990 --> 09:01.310
You can also represent an e-mail diagram.

09:01.360 --> 09:05.030
We'll see it maybe here and there and some of the design patterns but not too much.

09:05.320 --> 09:10.010
It just tells you how many objects another one has still has like zero to one relationship.

09:10.150 --> 09:12.340
One to many or many to many.

09:12.340 --> 09:19.060
So in this example when you have an airport has from zero to any number of aircraft disaster Kerry represents

09:19.090 --> 09:19.600
any number.

09:19.600 --> 09:22.660
So if you're familiar with regular expressions that will that will make sense.

09:22.660 --> 09:24.970
But the asterisk is zero to many.

09:24.970 --> 09:32.290
So an airport can have many aircrafts zero to one on the airport side means that when I have an aircraft

09:32.320 --> 09:37.630
it can be contained by either 0 1 airports or you're not going to have an aircraft in the same same

09:37.630 --> 09:41.170
single airport aircraft at many different airports.

09:41.370 --> 09:44.350
It's either in the air or it's on the air at the airport.

09:44.400 --> 09:51.540
So zero to one and again open diagrams means aggregation but you'll see those little numbers right underneath

09:51.930 --> 09:56.370
on the left hand side of the right hand side depending on what object they apply to zero to many here

09:56.370 --> 09:57.720
and zero to one in this example.

10:00.470 --> 10:06.170
Also another example here is we show that when I have a car it has either four or five tires it may

10:06.170 --> 10:09.770
or may not have a spare tires are exactly on one car.

10:10.130 --> 10:16.490
So you see the one in the Ford for that 5 if there's no cardinality specified then you can't make any

10:16.490 --> 10:21.200
assumption about how many objects there actually are the cardinality tries to represent how many instances

10:22.160 --> 10:30.720
there are for a given class object you also sometimes see a note section and the UML diagram.

10:30.890 --> 10:33.810
It's a little box containing a message.

10:33.950 --> 10:38.020
So in this example it's kind of a description like open diamonds mean aggregation.

10:38.090 --> 10:39.300
It's a note.

10:39.380 --> 10:42.860
It's meant to look like pieces of paper with the right corner folded back.

10:42.860 --> 10:47.540
You often see them with a line connecting them to a particular class indicating they're relating just

10:47.540 --> 10:48.170
to that class.

10:48.220 --> 10:49.870
It's like a little documentation.

10:50.180 --> 10:54.440
No and those are the basic symbols and notation.

10:54.490 --> 10:58.300
This is what you'll need to know to understand some of the design pattern class diagrams that I'm going

10:58.300 --> 10:59.810
to show you.

10:59.890 --> 11:04.120
I'll provide many details we're going to go through many code examples the class diagram is only one

11:04.120 --> 11:09.190
part of showing you how design pattern works but it is it is an essential part and it can help quite

11:09.190 --> 11:09.700
a bit.

11:09.910 --> 11:16.660
So understand these basic notation for class diagrams the relationships the associations some of the

11:16.660 --> 11:23.380
cardinality and the fact that we have a rectangle with the name attributes methods section.

11:23.380 --> 11:23.790
Thank you.
