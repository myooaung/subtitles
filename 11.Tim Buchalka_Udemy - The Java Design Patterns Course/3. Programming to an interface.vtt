WEBVTT

00:05.160 --> 00:06.600
Hello and welcome back.

00:06.600 --> 00:14.920
Let's talk about our first design principle which is programming to an interface so the word interface

00:14.920 --> 00:19.330
here is a bit overloaded usually overloaded means there's many meanings.

00:19.330 --> 00:25.170
When we talk about interface there's the concept of the interface but then also there's the Java construct.

00:25.170 --> 00:32.620
The Java keyword interface are two separate concepts interface in general is a term used to describe

00:33.970 --> 00:35.300
what a client uses.

00:35.440 --> 00:42.070
Sort of like a contract the interface keyword in Java also represents that but it's very specific to

00:42.070 --> 00:43.090
Java.

00:43.090 --> 00:47.080
It's a keyword where you actually would need to implement that interface and so forth.

00:47.110 --> 00:48.610
So we should understand the differences.

00:48.820 --> 00:54.290
When we say interface here the concept of the interface and then also the Java construct interface.

00:54.430 --> 00:58.450
And after this point when I've been using the term interface for the most part I've been using it kind

00:58.450 --> 00:59.290
of interchangeably.

01:00.100 --> 01:05.210
But let's kind of understand that difference.

01:05.250 --> 01:10.410
So what is program through an interface mean what it really means is program to a super type.

01:10.410 --> 01:16.740
So super type can be a base class or it can be interface type the declared type of the variables should

01:16.740 --> 01:22.830
be a super type usually an abstract class or an interface it doesn't have to be the Java construct of

01:22.830 --> 01:27.390
an interface and after classes also that because you can pass around the Super type and essentially

01:27.390 --> 01:28.570
use polymorphism.

01:28.590 --> 01:30.030
That's really the goal.

01:30.060 --> 01:35.160
The objects assigned to those variables can be of any concrete implementation of this super type.

01:35.240 --> 01:38.840
It's usually again polymorphism we create a reference to a super type.

01:38.970 --> 01:44.820
We pass it around and then we can dynamically at runtime have different implementations that can be

01:44.820 --> 01:45.930
an abstract class.

01:45.930 --> 01:50.940
It can be an interface reference the class declaring them doesn't have to know about the actual object

01:50.940 --> 01:51.540
types.

01:51.540 --> 01:51.750
Right.

01:51.750 --> 01:55.440
You just pass around that reference.

01:55.500 --> 01:59.070
So really we're talking about programming to a super type.

01:59.070 --> 02:03.580
You do not declare variables to be instances a particular country concrete class.

02:03.810 --> 02:09.270
Instead when you're programming to an interface you commit only to that interface defined by that abstract

02:09.270 --> 02:14.760
class and again abstract class meaning either an interface keyword or the abstract class in Java an

02:14.760 --> 02:20.610
abstract class is a class that may have some default behavior may also have some member variables in

02:20.610 --> 02:22.990
interface and Java can have default behavior now.

02:22.990 --> 02:27.870
Now with the nice new Java versions but it doesn't usually have attributes.

02:27.870 --> 02:34.440
And so when we talk about programming to interface in this relation we basically say we can declare

02:34.440 --> 02:39.750
variables to be instances of a particular concrete class you don't want to do that you just want to

02:39.750 --> 02:44.000
commit to the interface and again this is an abstraction technique.

02:44.020 --> 02:44.730
Right.

02:44.770 --> 02:46.140
We only know about the interface.

02:46.150 --> 02:51.730
We don't know necessarily about the details of the implementation so we always program for this interface.

02:51.730 --> 02:53.800
We don't program for the implementation.

02:53.800 --> 02:57.370
This provides for a distraction leads to much more flexible code.

02:58.030 --> 03:02.350
When you change the code all the time you would just change the details of the implementation.

03:02.350 --> 03:06.180
You don't have to constantly change the interface when you don't constantly changing interface.

03:06.220 --> 03:07.210
You don't affect the client.

03:07.210 --> 03:09.090
The person using that interface.

03:09.310 --> 03:14.210
So it's much more flexible you can work with any new implementation of the interface.

03:14.220 --> 03:14.590
All right.

03:14.620 --> 03:19.750
The interface doesn't change program to an interface is a common theme of design patterns.

03:19.750 --> 03:23.320
We'll see that quite a bit where we have interfaces or abstract classes

03:26.770 --> 03:31.190
manipulating objects solely in terms of the interface is very very beneficial to clients.

03:31.210 --> 03:36.100
I've said this briefly but basically clients do not need to know the specific types of the objects they

03:36.100 --> 03:36.680
use.

03:36.730 --> 03:41.080
They just refer to the reference type in the interface as long as the objects adhere to the interface

03:41.080 --> 03:43.870
that the clients expect.

03:44.110 --> 03:47.410
Clients do not need to know about the classes that implement these objects.

03:47.500 --> 03:51.190
They only know about the abstract classes defining the interface.

03:51.190 --> 03:52.580
So very very beneficial.

03:52.600 --> 03:59.030
Again abstraction details you don't have to worry about the details so programming into an interface

03:59.030 --> 04:03.800
will greatly reduce the implementation dependencies between the subsystems.

04:04.120 --> 04:07.440
You have now provided loose coupling.

04:08.150 --> 04:13.830
We can use interface types on variables return types of methods or parameter types on a method.

04:13.910 --> 04:16.250
Again it makes the code more generic.

04:16.250 --> 04:18.590
We could just pass around that super type.

04:18.590 --> 04:25.240
The clients can keep using that super type and they don't have to know the details so the whole point

04:25.240 --> 04:27.970
of it is to exploit them off polymorphism.

04:28.080 --> 04:28.300
Right.

04:29.050 --> 04:34.090
So when you do the utilize polymorphism you program to the super type and then at runtime things can

04:34.090 --> 04:34.800
change.

04:34.810 --> 04:39.460
All right you can have different notations based on the instance type of the object not the reference

04:39.460 --> 04:40.360
type.

04:40.360 --> 04:42.850
So the object is not locked into the actual code.

04:42.850 --> 04:47.650
Things can be determined at runtime so pie more for them just at a high level.

04:47.710 --> 04:53.710
Just to remind you I'm not going to go into the details but it may be a bit redundant to you.

04:53.710 --> 04:55.870
But just to make sure we're on the same page here.

04:56.030 --> 04:58.040
Imagine you have an abstract class animal.

04:58.230 --> 05:00.230
You can't create an instance of an animal.

05:00.310 --> 05:03.590
It has two actual implementations dog and a cat.

05:03.670 --> 05:10.750
This is the classic example of when you use polymorphism when you program to the to an implementation.

05:10.750 --> 05:12.930
Well that would be as you just create a bunch of Dog objects.

05:12.940 --> 05:13.500
Right.

05:13.510 --> 05:15.770
You have no concept of this abstract class animal.

05:15.850 --> 05:21.420
You say dog day equals new dog and then you call methods on that dog did not bark.

05:21.670 --> 05:26.560
So when you declare that variable D as type dog that's a concrete implementation it's not an interface

05:26.560 --> 05:27.910
or an abstract class.

05:28.120 --> 05:33.340
It forces us to code to that concrete implementation we have to know details of the dog the methods

05:33.340 --> 05:40.930
in there and everything when you program to an interface using the super type what you would do is you

05:40.990 --> 05:43.080
create a reference type on the left hand side.

05:43.300 --> 05:49.710
You would say animal animal and then when you create your instance you would say new dog then the animal

05:49.770 --> 05:55.950
can call methods inside the abstract class make sound but you don't actually know the instance type

05:55.950 --> 05:56.800
of the animal.

05:56.850 --> 05:58.300
It could be a dog or could be a cat.

05:58.980 --> 06:00.690
So we know it's a dog when we create it.

06:01.080 --> 06:05.890
But now we can use the animal reference piling more more fiscally and that's what this animal that makes

06:05.890 --> 06:06.790
sound is.

06:06.960 --> 06:12.630
You can also now store the Animal objects in an array which are all the same type and then again it

06:12.630 --> 06:16.830
reduces code polymorphic as well because then you can iterate through the array called the same method

06:17.130 --> 06:22.120
at runtime the method will be different based on the instance type.

06:22.290 --> 06:26.830
So even better rather than hard coding the institution of the subtype instantiation of the subtype like

06:26.830 --> 06:31.610
new dog into the code you can assign the concrete implantation object at runtime.

06:31.750 --> 06:35.800
So what you can do here and this is what design patterns would do is you don't actually have to say

06:35.800 --> 06:42.830
new dog you can just say get animal and get animal will be implemented in some concrete class through

06:42.830 --> 06:46.550
some interface and then you could see Ada make sound.

06:46.740 --> 06:49.570
So now you even see the benefits even more clearly.

06:49.730 --> 06:52.970
We don't actually know what the animal subtype is pointing to.

06:53.030 --> 06:54.070
We don't know the instance type.

06:54.500 --> 06:58.010
All we care about is that it knows how to make a sound right.

06:58.030 --> 06:59.580
So there's that level of abstraction.

06:59.590 --> 07:05.650
There's no details needed to be known by the clients of the implementation of dog or in this case any

07:05.650 --> 07:10.040
animals if you use the make sound method or get animal method.

07:10.490 --> 07:17.390
So after classes versus interfaces I mentioned these terms are used interchangeably and you'll hear

07:17.390 --> 07:18.910
this throughout the course.

07:18.950 --> 07:24.160
I tend to use teams interchangeably but there are some subtle differences and I mentioned them already.

07:24.440 --> 07:30.350
They've gotten smaller and smaller those differences as Java has been released and new versions and

07:30.350 --> 07:37.990
specifically in Java a they the designers introduced the concept of default methods and interfaces.

07:38.210 --> 07:41.440
So now before that it was a little.

07:41.440 --> 07:45.980
The differences were a little clearer because basically abstract methods had some default behavior input

07:46.220 --> 07:52.400
interfaces never had the ability do that but in Java 8 now it's reduced Java you can have default behavior

07:53.750 --> 07:58.310
variables and interfaces are public static final they also have some properties but they can only be

07:58.310 --> 08:03.230
public static final abstract classes can actually use different access modifiers you know they can be

08:03.230 --> 08:03.900
private.

08:04.430 --> 08:08.540
So that's one difference why you'd want to use an abstract class so you can make your member variables

08:08.540 --> 08:18.720
private and protected methods and interfaces are always public or public static as well as the variables.

08:18.720 --> 08:23.200
So again another subtle difference where meth is an abstract classes cannot be private.

08:23.220 --> 08:29.550
So again for encapsulation it sometimes is better to use abstract classes you'll want to utilize after

08:29.550 --> 08:34.220
our classes to establish relationship between inner related objects when you want to share code amongst

08:34.220 --> 08:39.420
several closely related classes then this is a common state of behavior can be put in the abstract class

08:39.420 --> 08:44.700
just like inheritance except in the abstract class you have to implement the abstract methods in any

08:44.700 --> 08:51.240
of the classes that implement that abstract typically the way to go to is usually abstract classes although

08:51.570 --> 08:58.800
interfaces also have some advantages when you also worry about access modifiers you want to utilize

08:58.800 --> 09:03.070
interfaces to establish a relationship between unrelated classes.

09:03.190 --> 09:07.890
So the interface is comparable and colonial are implemented by many unrelated classes.

09:10.080 --> 09:14.880
So utilize interfaces if you want to specify the behavior particular data type but are not concerned

09:14.880 --> 09:16.860
about who implements its behavior.

09:16.890 --> 09:21.960
You don't have to worry about commonality even though you know this is kind of a loose statement because

09:21.960 --> 09:25.430
even with interfaces you sometimes want to group things together.

09:25.620 --> 09:30.810
You don't really want to have a generic interface that is doing is not cohesive that's all over the

09:30.810 --> 09:31.570
place.

09:31.590 --> 09:38.190
You still have some relation there but in general abstract classes have more grouping where interfaces

09:38.190 --> 09:42.930
may have less grouping and that's how you kind of think about when you say should I use an interface

09:43.050 --> 09:45.840
or should I use master class in Java.

09:45.840 --> 09:50.820
Well typically you can utilize the grouping as a starting point but again I don't really like to see

09:50.820 --> 09:56.290
interfaces that have 50 methods in them that are doing tons of unrelated things right.

09:56.310 --> 10:01.260
You still want to group and to some extent so utilize interfaces if you want to take advantage of multiple

10:01.260 --> 10:02.690
inheritance as well.

10:02.700 --> 10:08.430
Java does not support multiple inheritance but one of the work arounds is this is using interfaces right

10:08.460 --> 10:13.950
because you can implement multiple interfaces multiple interfaces a whole multiple here necessary as

10:13.950 --> 10:19.920
a whole other topic and there are other tradeoffs with using it on the designer's Java chose not to

10:20.340 --> 10:25.680
allow it because there is cyclic dependencies and other issues but some of the design patterns actually

10:25.880 --> 10:30.300
want you to use multiple inheritance because this is a Java class will stay away from that and I'll

10:30.300 --> 10:31.880
provide alternatives.

10:32.190 --> 10:38.970
But in general you can use interfaces to take advantage of multiple inheritance in Java using abstract

10:38.970 --> 10:44.640
classes or interfaces is not about one being better than the other it's really about the use case.

10:44.680 --> 10:46.800
Do you need to group things do you not need to group things.

10:46.800 --> 10:54.620
Again I tend to use abstract classes a bit more because of you know the access modifiers you might create

10:54.620 --> 10:57.990
an interface and then have an abstract class implement an interface as well.

10:58.140 --> 11:01.620
So there are many different options at this point.

11:01.620 --> 11:07.410
I'd like to bring up intelligent and go through a little demonstration a coding example of this concept

11:07.410 --> 11:09.000
of program to an interface

11:12.890 --> 11:13.780
so let's go ahead.

11:14.380 --> 11:20.650
Click on ontology and we'll create a new project that basically just demonstrates this design principle.

11:20.650 --> 11:26.620
So we create new project and I'm not going include any defaults would be using Java eleven for all our

11:26.620 --> 11:28.250
demonstrations.

11:28.330 --> 11:35.890
I am going to just create a command line application as a template and I'm going to name this programming

11:37.570 --> 11:40.720
to an interface example

11:43.450 --> 11:50.090
and let's go ahead and finish that so we're here we have our nice intelligent and you'll see our main

11:50.090 --> 11:53.870
class was created for us just for the purposes of this demonstration.

11:53.870 --> 11:59.130
The demonstration that I want to provide that demonstrates the that that explains the concept program

11:59.180 --> 12:04.410
interface is a concept of a complete computer monitor right.

12:04.460 --> 12:08.450
Typically in the real world you can have a computer monitor and it can be designed for display purposes

12:08.460 --> 12:08.740
right.

12:08.750 --> 12:12.540
You display information the actual product is a computer.

12:12.770 --> 12:18.950
The computer monitor is a part or a module of the computer which is responsible for displaying information

12:20.780 --> 12:27.280
later the client is going to need to change and they want to display on a projector.

12:27.320 --> 12:27.620
Right.

12:27.770 --> 12:32.690
So use case would be Hey currently we're gonna display on a computer monitor later in the future maybe

12:32.690 --> 12:34.430
want to display on a projector.

12:34.430 --> 12:37.140
So the change there is in the projector.

12:37.190 --> 12:41.010
So what that means is the display module object that we write.

12:41.150 --> 12:44.960
It should be flexible it needs to change.

12:45.150 --> 12:47.310
So we want to change dynamically runtime.

12:47.310 --> 12:53.940
This is a perfect opportunity to program to an interface someone to start by basically creating my interface.

12:53.970 --> 12:56.010
So let's remove this code for now.

12:56.500 --> 12:59.010
And I'm going to not make it public as I'm put everything in the same file.

12:59.020 --> 13:02.650
But let's not create an interface in Java we just use the interface keyword.

13:02.650 --> 13:08.050
And I'm going to name this interface display module.

13:08.050 --> 13:12.970
The only method that I want to implement in here is a display method.

13:13.000 --> 13:17.470
So I'm just gonna make that public void display it's not going to take any parameters.

13:17.470 --> 13:18.810
This is my interface.

13:18.910 --> 13:24.010
I'm going to program to this interface when I'm a client and the display method you see is kind of generic

13:24.010 --> 13:29.550
and again it's going to allow us to display either to a computer monitor or to a projector.

13:30.490 --> 13:34.720
So now we have two classes that implement this interface and again you may ask yourself why not use

13:34.720 --> 13:37.060
an abstract class in this case.

13:37.120 --> 13:42.580
Well because this is a simple example and there's no real grouping related or common behavior I'm going

13:42.580 --> 13:46.140
to put this in interface for for demonstration purposes.

13:46.150 --> 13:50.740
Now I want to actually create my class that implements this interface and that's going to be called

13:50.740 --> 14:02.180
monitor and it's just going to implement implement the display module so implements display module.

14:02.200 --> 14:02.410
Right.

14:02.470 --> 14:04.000
Pretty basic stuff here.

14:04.030 --> 14:07.180
This is just going to implement the display method.

14:07.180 --> 14:12.430
So I have a public void display and this is going to actually have any behavior it's not going to actually

14:12.430 --> 14:18.340
display on a module so really what I'm going to do is and you'll see this is a common theme throughout

14:18.340 --> 14:19.110
the classes.

14:19.130 --> 14:25.840
I just got a hard code some string his output so I'll just say system that out that print line and I'll

14:25.840 --> 14:27.420
just say display through a monitor.

14:27.460 --> 14:32.840
And this is basically going to tell us that the display method for the Monitor class was invoked polymorphic.

14:33.610 --> 14:35.330
So display through a monitor.

14:35.330 --> 14:35.640
Right.

14:35.650 --> 14:37.210
Pretty pretty basic.

14:37.360 --> 14:40.120
I have to create my other class if I want to display on a projector.

14:40.120 --> 14:41.530
It can be very similar.

14:41.700 --> 14:43.830
It's just going to be Dean's private projector.

14:43.930 --> 14:48.420
It's going to implement the same interface right.

14:48.420 --> 14:54.390
It's going to have the same method except it in this case the output is going to just say display on

14:54.390 --> 14:56.150
a projector.

14:56.220 --> 14:56.820
Pretty straightforward.

14:57.870 --> 15:06.910
So here we say system that out that print line display through projector.

15:06.940 --> 15:07.700
Right.

15:07.800 --> 15:13.770
So we have our interface we have our two concrete classes that implement this interface.

15:13.770 --> 15:17.470
The next step is creating utilizing the classes right.

15:17.490 --> 15:23.310
So to actually have a main method that shows you the benefits of using the interface class as opposed

15:23.310 --> 15:27.960
to knowing about the detailed implementations of the monitor and project you'll notice that the client

15:27.990 --> 15:29.700
doesn't even need to necessarily know about these.

15:29.700 --> 15:36.300
And we could actually expand this by writing our own get display module method if we wanted to to even

15:36.300 --> 15:37.310
make it more abstract.

15:37.740 --> 15:40.330
But for this purposes let's just show the benefits.

15:40.350 --> 15:46.800
So now I want to create a public class and actually I don't want to create a public as I have a different

15:46.800 --> 15:47.270
file name.

15:47.280 --> 15:53.040
So let's just say class computer likes I will need to create a public because I've got to compile some

15:53.040 --> 15:56.510
public class computer.

15:56.510 --> 16:01.280
And in this case I'm going to create an instance I'm going to use aggregation composition here.

16:01.410 --> 16:06.720
I'm going to create my display module object as a member variable and I'm going to CDM Walter Lotus

16:06.710 --> 16:11.330
here as I'm using the interface I'm not using a concrete class.

16:11.340 --> 16:16.600
This is gonna allow me to pass it around polymorphic.

16:16.650 --> 16:20.370
Now for simplicity I'm going to copy and paste a couple of methods.

16:20.580 --> 16:27.910
The first method here is gonna be a set display module and this is just going to basically setup our

16:27.910 --> 16:30.270
instance variable right.

16:30.310 --> 16:33.820
Public void set display module takes a display module object.

16:33.820 --> 16:36.040
It sets up our member variable that's pretty basic.

16:36.400 --> 16:41.830
And then I'm also gonna have a display method which is this going to call the display method polymorphic

16:41.830 --> 16:46.260
CLI depending on the instance type of the display module DRM it will call it.

16:46.260 --> 16:47.640
So just as DRM that display.

16:47.650 --> 16:49.300
That's pretty straightforward.

16:49.300 --> 16:53.190
The key here is how we use it.

16:53.330 --> 16:53.470
Right.

16:53.590 --> 16:55.970
How we call the display and how we call that to set display module.

16:55.980 --> 17:03.130
But again what you'll notice here is as mentioned in the previous lecture slides here we're using the

17:03.130 --> 17:07.630
super type display module right display module.

17:07.630 --> 17:13.720
We don't have any concrete types yet project or monitor because we're programming to an interface.

17:13.720 --> 17:21.330
All of our return mat return data are parameters to the methods or objects can refer to the super type.

17:21.820 --> 17:29.060
And that D couples the super type or the concrete classes from the client computer.

17:29.080 --> 17:29.410
All right.

17:29.860 --> 17:35.620
So now we can go we can modify project monitor we can modify it as much as we want without actually

17:35.620 --> 17:40.720
affecting the client the computer class the display we can add all sorts of new things so we can also

17:40.720 --> 17:47.170
actually add another class if a new way of displaying something came about like not a not a projector

17:48.420 --> 17:53.770
I actually call this project but you know if we wanted to display something on a tablet for example

17:53.770 --> 17:58.000
we create a new tablet class and just implement an interface and we'd have to change the client at all

17:59.520 --> 18:01.520
especially if we don't have that get method.

18:01.560 --> 18:04.320
So now we want to create our stuff our nice main method

18:07.080 --> 18:14.730
and inside here we're going to use our interface for government program to the interface itself.

18:14.730 --> 18:21.630
So we're gonna create a new space flame monitor actually we'll create a new computer first so we can

18:23.250 --> 18:28.840
access that member variable we'll say computer CRM equals new computer.

18:28.950 --> 18:29.290
Right.

18:29.400 --> 18:31.490
We have our default constructor doesn't do anything.

18:31.630 --> 18:34.610
We're going to create a couple display modules right.

18:34.710 --> 18:36.240
A new monitor and a new projector.

18:36.240 --> 18:46.170
Again we can make this even more generic by actually adding a get method to the interface itself.

18:46.170 --> 18:46.980
So we won't have to.

18:46.990 --> 18:52.590
And we could have dynamic some kind of maybe some kind of creation or design pattern like a factory.

18:52.950 --> 18:58.920
But again for these purposes let's create two instances of our display module again the reference type

18:58.920 --> 19:06.040
on the left hand side and the instance type the concrete class in the right hand side now we can pop

19:06.040 --> 19:10.970
him polymorphic we call the different methods and you'll see the different implementations being executed.

19:11.680 --> 19:17.750
So let's go ahead and set our display module for each one of our computers whether it be a projector

19:17.840 --> 19:23.780
or not whether it be a actual monitor.

19:23.780 --> 19:29.560
So here we set up our computer and we're going to set the display module as a monitor online 40 online

19:29.570 --> 19:31.150
41 or to call the display method.

19:31.160 --> 19:35.530
And what you'll notice is polymorphic CLI that's going to end up calling right through polymorphism

19:35.540 --> 19:39.110
it's going to call our display through monitor and that's gonna be printed out.

19:39.140 --> 19:43.850
We then sent change a display message display module because hey in the future change when our using

19:43.850 --> 19:49.490
a projector we simply call that set display module and we call display and now magically we're displaying

19:49.490 --> 19:51.170
through a projector.

19:51.170 --> 19:54.080
And that's really the whole goal of program your interface.

19:54.080 --> 20:00.650
You can now only refer to a computer call methods on the computer and at runtime you're going to polymorphic

20:00.650 --> 20:03.820
CLI invoke the right code based on the instance type.

20:04.010 --> 20:05.800
And so it makes your client much more flexible.

20:05.810 --> 20:06.500
Right.

20:06.500 --> 20:09.620
Your client doesn't necessarily need to know the details on the monitor in the projector.

20:09.620 --> 20:13.050
All it needs to know really is about the interface and the display method.

20:13.070 --> 20:15.860
I mean you had to know what object to create on the right hand side.

20:15.920 --> 20:21.100
But again we could get away from that if we had a get method or a factory method.

20:22.040 --> 20:30.740
So if we go and try to compile this and run it you'll see that pi more efficiently it is running a different

20:31.010 --> 20:31.220
thing.

20:31.250 --> 20:38.840
So I forgot to rename my file I need to have this as computer since the default was main.

20:38.950 --> 20:50.780
So quickly do that to fix the error I usually use to refactor and we'll just call this computer.

20:50.780 --> 20:52.210
So now we build and run.

20:52.340 --> 20:56.660
You'll see that again polymorphism and used any benefits programming into an interface

21:03.770 --> 21:05.540
we've got to run computer.

21:05.830 --> 21:11.020
And so again you see his output display through monitor for display through projector.

21:11.020 --> 21:15.310
And that really is the benefits of programming to an interface.

21:15.310 --> 21:23.480
Again the client can change the display option dynamically just by calling set display module.

21:23.680 --> 21:27.930
We created our nice interface display module.

21:27.930 --> 21:33.210
This is all the display equipment must implement this interface and provide its own implementation of

21:33.210 --> 21:36.960
a display operation whether projecting or not projecting.

21:36.960 --> 21:41.970
So you always want to code through an interface so you can change your strategy at runtime with actual

21:41.970 --> 21:47.250
implementation and provides loose coupling and has a lot of Vantage is and you will see throughout the

21:47.250 --> 21:52.530
course when we implement design patterns that this is a common concept that we follow.
