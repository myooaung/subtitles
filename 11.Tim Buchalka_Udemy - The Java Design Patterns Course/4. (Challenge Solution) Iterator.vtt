WEBVTT

00:05.300 --> 00:06.320
Hello and welcome.

00:06.440 --> 00:11.060
In this lecture I want to provide a solution to our previous challenge which was implementing the iterator

00:11.060 --> 00:18.350
design pattern for a college environment mean that we had different subjects art subjects versus science

00:18.350 --> 00:19.440
subjects.

00:19.610 --> 00:27.930
So we're gonna name this project are iterator solution and remember that our subjects actually were

00:27.930 --> 00:30.360
stored in different data structures.

00:30.510 --> 00:37.490
One was gonna use I think a linked list and another was gonna use something similar but different.

00:37.500 --> 00:41.070
So here we're gonna name this iterator solution

00:45.240 --> 00:48.740
our first step will be to create the aggregate interface.

00:48.870 --> 00:53.700
So we're gonna name this subject interface.

00:54.090 --> 01:00.030
And remember this aggregate interface all does contain one method which is our create iterator.

01:00.030 --> 01:07.830
So yeah we're gonna say public that's going to return an iterator interface object so we're gonna say

01:07.830 --> 01:13.810
create iterator we haven't created that iterator interface yet.

01:14.010 --> 01:16.990
Our next step is to create the iterator interface.

01:17.010 --> 01:25.270
So now we're gonna say new class it to rate her interface.

01:25.270 --> 01:29.950
And this is going to contain our traversal methods.

01:30.150 --> 01:36.050
So we're gonna have a first text is done and a current item.

01:36.090 --> 01:39.840
This is from the requirements.

01:39.840 --> 01:42.910
So something like this I like lowercase methods.

01:42.930 --> 01:52.220
So let's make sure they're lowercase and this is just going to allow us to traverse different objects.

01:52.320 --> 01:55.200
So first reset to the first element next.

01:55.200 --> 01:58.530
Get the next element is done the end of collection check.

01:58.530 --> 02:04.690
This would be like the has next and current item retrieve the current item.

02:04.710 --> 02:10.170
Now let's create some concrete aggregates remember these are going to just store the data.

02:10.170 --> 02:13.410
The first one is gonna be Art's concrete aggregate.

02:13.950 --> 02:24.240
So this is gonna be implementing our subject interface so it implements subject interface and we're

02:24.240 --> 02:25.760
gonna use an array to store our objects.

02:25.770 --> 02:31.010
So we're gonna have a private member variable for our string all right.

02:32.250 --> 02:38.700
And our constructor is going to populate some dummy data into the array which is going to create a new

02:38.700 --> 02:46.650
subjects array and create a couple of subjects something like this and then we need to implement the

02:46.650 --> 02:49.260
create iterator because that's what we do for this pattern.

02:49.710 --> 02:54.390
So we say public iterator interface create

02:57.480 --> 02:59.280
iterator.

02:59.280 --> 03:03.680
And this is just going to return a new arts iterator which we haven't implemented yet.

03:04.830 --> 03:13.090
And it's gonna take in our data subjects something like that.

03:13.350 --> 03:20.120
OK and then we're going to also create our science aggregate.

03:20.170 --> 03:27.250
So this is gonna be named class science implements subject interface.

03:27.250 --> 03:30.100
And this is going to store things as a linked list.

03:30.100 --> 03:33.820
And I want to populate the linked list items inside the constructor.

03:34.270 --> 03:36.800
So we're gonna have a member variable for a link list.

03:36.940 --> 03:41.320
It's going to be named subjects going to create the new linked list and in the constructor and add some

03:41.320 --> 03:47.660
dummy items we then need to implement our iterator interface right.

03:47.770 --> 03:51.420
The create iterator I should say the aggregate interface.

03:51.470 --> 03:56.240
So this is going to return a new science iterator which we're gonna have to implement now because we

03:56.240 --> 03:58.060
have to implement some concrete iterator.

03:58.070 --> 04:04.370
So this is our iterator interface and it's gonna return a new science iterator passing in the subjects

04:04.400 --> 04:05.100
which is the data.

04:05.840 --> 04:09.310
So now we're done with our concrete aggregates.

04:09.320 --> 04:12.220
Now we have to implement our concrete iterator.

04:13.310 --> 04:20.570
So in this case we want to create both the arts iterator and a subject iterator.

04:20.570 --> 04:21.170
So we're gonna say.

04:21.170 --> 04:23.870
Class.

04:23.870 --> 04:24.430
Class.

04:24.440 --> 04:29.690
Arts iterator implements R iterator interface.

04:31.580 --> 04:35.690
And this is going to have member variables for our subjects

04:38.600 --> 04:39.260
which is an array

04:42.400 --> 04:43.080
stored in array.

04:45.040 --> 04:46.780
And our current position

04:50.800 --> 04:57.610
and our constructor is going to set the subjects that were passed into it and also set our current position

04:57.610 --> 04:59.640
which would be 0 to access.

04:59.650 --> 05:01.910
That's the El index into the array.

05:02.140 --> 05:04.000
Our first method is gonna just reset.

05:04.000 --> 05:08.620
Remember it's going to reset to the first position but so that's pretty easily implemented.

05:08.620 --> 05:11.940
You can just set the current position to 0.

05:11.960 --> 05:15.140
So something like that position equals zero.

05:15.400 --> 05:19.190
Next month we have to implement is our next method.

05:19.190 --> 05:19.690
Here we go.

05:20.800 --> 05:24.400
And this is just going to return the next item and it's gonna return a String.

05:24.400 --> 05:31.410
So we're just gonna say return subjects array and then our current position is done method is going

05:31.410 --> 05:36.970
to tell us whether or not there anymore elements to iterate through so here we can just check if it's

05:36.970 --> 05:41.900
bigger than the length so is done.

05:41.900 --> 05:46.490
If the position is greater than equal to the subjects that length then we don't have any more data read

05:46.490 --> 05:54.110
through in our current item just returns the spot in the array where we're currently at which is subjects

05:54.110 --> 05:55.100
position.

05:56.790 --> 06:06.070
OK so pretty straightforward for our first iterator are science iterator is going to be named science

06:06.070 --> 06:16.970
that are your source a class science C i.e. B and C iterator implements our iterator interface.

06:17.630 --> 06:23.080
And this is going to have a linked list remember and it's also going to have a current position.

06:23.660 --> 06:30.490
We're going to instantiate or initialize our linked lists in our constructor by assigning what's passed

06:30.490 --> 06:36.850
in and we're also going to set the position to 0 and then many of the methods are gonna be the same.

06:36.860 --> 06:42.170
The first is gonna they're pretty much going to be identical right because we all also we have the same

06:42.230 --> 06:46.180
member variable so we can just copy and paste these four.

06:46.640 --> 06:52.970
And those are gonna be not the same actually because we have a linked list and not an array so we will

06:52.970 --> 06:54.040
have to change those a bit.

06:55.910 --> 07:01.390
First is gonna be the same because that just sets the position to 0 next.

07:01.490 --> 07:05.370
You're not going to be able to use an array you're going to have to use the get method and we're going

07:05.370 --> 07:14.570
to have to position plus plus also something like that using the method R is done is going to return

07:14.570 --> 07:17.780
the position greater than equal to subjects that size not the length

07:20.540 --> 07:29.300
and our current item is going to not use an index that's going to use the get method so get position.

07:29.690 --> 07:31.700
Our last hope will be to create the client.

07:32.750 --> 07:40.010
So we're going to say new Java class client and this is going to have our main method

07:46.070 --> 07:50.690
and we're first going to just display that what we're doing so it's an iterator pattern demo and then

07:50.690 --> 07:56.090
we're gonna create new science and arts subjects.

07:56.730 --> 08:04.260
So we're gonna create new aggregate objects that return subject interfaces.

08:05.130 --> 08:07.770
These are gonna be storing the data.

08:07.770 --> 08:12.200
And remember the constructors actually add some dummy data.

08:12.930 --> 08:18.130
So science subjects arts objects we then need to get our iterator.

08:18.450 --> 08:25.070
So we're going to call on the subbed aggregate objects to create iterator method and that will return

08:25.080 --> 08:31.740
the correct correct iterator either a science iterator or a arts iterator

08:36.910 --> 08:37.920
something like this

08:40.380 --> 08:46.440
and we had the method names with lower cases like that.

08:46.440 --> 08:53.880
Now we can just go through iterate through the subjects and display our data we're gonna write a little

08:53.880 --> 08:58.160
helper method that uses the iterator to display our data.

08:58.170 --> 09:03.300
We're gonna name that print I'm going to put it above the main.

09:03.300 --> 09:05.820
So it's gonna be a static void print.

09:05.820 --> 09:07.560
It's gonna take an iterator interface

09:11.310 --> 09:17.200
and it's gonna go through the elements until it's done.

09:17.880 --> 09:20.790
And just get the next and print out the next.

09:20.790 --> 09:30.060
So now down here it's very easy we can just call print so we'll call print on both operators and in

09:30.060 --> 09:31.890
print out a heading as well.

09:33.780 --> 09:36.050
So we'll do something like this.

09:36.180 --> 09:39.990
Call our print method which should be lower case.

09:40.770 --> 09:47.840
Just my coding style don't like upper case methods use Campbell case mainly.

09:47.840 --> 09:52.150
So now let's see if we can Bill if I made any mistakes build and run this and you'll see how the integrators

09:52.540 --> 09:57.670
are going through the different aggregate objects and the aggregate objects are stored differently.

09:57.820 --> 09:58.840
So we're gonna say build

10:01.530 --> 10:02.820
and we have an error.

10:02.910 --> 10:14.610
We have to make sure that our create iterator is need to be lowercase.

10:14.660 --> 10:16.850
Now we're good to go so we can run our client

10:19.900 --> 10:24.490
and we'll see that we're able to iterate through the aggregate objects or science objects and our art

10:24.490 --> 10:26.880
subjects or science subjects are stored in the right.

10:27.090 --> 10:32.120
We used an iterator to traverse time our art subjects were stored in the link list and that's how you

10:32.120 --> 10:35.930
implement the iterator design pattern solution to our previous challenge.

10:35.960 --> 10:36.320
Thank you.
