WEBVTT
1
00:00:01.998 --> 00:00:05.765
Before we dive into the metadata stored by the JobRepository,

2
00:00:05.765 --> 00:00:08.648
let's revisit a few key Spring Batch terms,

3
00:00:08.648 --> 00:00:11.530
as well as introduce a few additional ones.

4
00:00:11.530 --> 00:00:12.729
If you remember from earlier,

5
00:00:12.729 --> 00:00:16.035
a job is a template for how batch processing will be performed.

6
00:00:16.035 --> 00:00:22.861
A job has a name, defines its ability to restart, and defines one or more steps.

7
00:00:22.861 --> 00:00:26.517
A job instance refers to the logical run of a job.

8
00:00:26.517 --> 00:00:30.168
For example, if there was a daily run of a job for an entire month,

9
00:00:30.168 --> 00:00:35.173
there would be 28 to 31 job instances based on the number of days in the month.

10
00:00:35.173 --> 00:00:40.346
Job instances have state that affects the reusability of an instance.

11
00:00:40.346 --> 00:00:45.484
A job execution represents a single attempt to run a job.

12
00:00:45.484 --> 00:00:46.979
Execution may succeed or fail.

13
00:00:46.979 --> 00:00:50.504
If you need to rerun a job because of a failure,

14
00:00:50.504 --> 00:00:55.931
it simply means you have a new execution against the same job instance.

15
00:00:55.931 --> 00:00:58.714
Job executions have a status, a start time,

16
00:00:58.714 --> 00:01:02.935
an end time, an exit status, and an execution context.

17
00:01:02.935 --> 00:01:07.167
A job instance can have one or more parameters.

18
00:01:07.167 --> 00:01:12.655
Oftentimes these parameters help to identify which instance of a job was run,

19
00:01:12.655 --> 00:01:16.184
such as the May 2nd instance of a monthly job.

20
00:01:16.184 --> 00:01:21.697
A step encapsulates an independent, sequential phase of a batch job.

21
00:01:21.697 --> 00:01:24.731
It can be as simple as reading a line from a file and as

22
00:01:24.731 --> 00:01:27.361
complex as applying multiple business rules.

23
00:01:27.361 --> 00:01:31.204
Step execution is similar to job execution.

24
00:01:31.204 --> 00:01:35.620
It represents a single attempt to execute a step.

25
00:01:35.620 --> 00:01:39.280
Step executions contain an execution context that allows for

26
00:01:39.280 --> 00:01:42.387
the persistence of data across batch runs.

27
00:01:42.387 --> 00:01:46.966
Like job execution, it also contains additional metadata including the status,

28
00:01:46.966 --> 00:01:50.818
start time, end time, read count, write count,

29
00:01:50.818 --> 00:01:53.356
rollback count, and exit status.

30
00:01:53.356 --> 00:01:56.209
The reason I introduced some new concepts and revisited some

31
00:01:56.209 --> 00:01:59.488
existing concepts is that there's a strong correlation to the

32
00:01:59.488 --> 00:02:01.658
database tables used by the JobRepository.

33
00:02:01.658 --> 00:02:04.292
When you run a Spring Batch job,

34
00:02:04.292 --> 00:02:07.935
the JobRepository uses database tables to persist and retrieve

35
00:02:07.935 --> 00:02:11.178
data about the various aspects of runtime.

36
00:02:11.178 --> 00:02:13.789
The Batch_Job_Instance table stores each instance of

37
00:02:13.789 --> 00:02:16.172
the job with a unique identifier, a version,

38
00:02:16.172 --> 00:02:17.143
a job name,

39
00:02:17.143 --> 00:02:19.732
and a serialization of the job parameters that

40
00:02:19.732 --> 00:02:22.480
uniquely identify the job instance.

41
00:02:22.480 --> 00:02:26.257
The Batch_Job_Execution table stores relevant information about the

42
00:02:26.257 --> 00:02:29.126
execution of a job including a unique identifier,

43
00:02:29.126 --> 00:02:32.640
create time, start time, end time, status,

44
00:02:32.640 --> 00:02:34.146
and exit code.

45
00:02:34.146 --> 00:02:37.150
The Batch_Job_Execution_Context table stores a serialized

46
00:02:37.150 --> 00:02:39.406
version of the Job_Execution_Context object.

47
00:02:39.406 --> 00:02:46.614
This can be used to retrieve the state after a failure for restart purposes.

48
00:02:46.614 --> 00:02:50.090
The Batch_Job_Execution_Params table stores the key value pairs

49
00:02:50.090 --> 00:02:53.606
for job parameter details and a job execution.

50
00:02:53.606 --> 00:02:57.577
The Batch_Step_Execution table stores relevant information about the

51
00:02:57.577 --> 00:03:02.309
execution of a step similar to the Batch_Job_Execution table.

52
00:03:02.309 --> 00:03:07.369
Other information stored include a unique identifier of the step execution,

53
00:03:07.369 --> 00:03:11.203
start time, end time, status, commit count,

54
00:03:11.203 --> 00:03:13.304
read count, write count, and exit code.

55
00:03:13.304 --> 00:03:15.621
The last table is the Batch_Step_Execution_Context.

56
00:03:15.621 --> 00:03:19.384
Again, similar to the Batch_Job_Execution_Context,

57
00:03:19.384 --> 00:03:23.874
this table stores a serialized version of the Step_Execution_Context.

58
00:03:23.874 --> 00:03:31.594
It can be used to retrieve the state after a failure for restart purposes.

59
00:03:31.594 --> 00:03:34.111
Now that you understand the database tables available

60
00:03:34.111 --> 00:03:39.707
for Spring Batch's JobRepository, let's add the schema to the project.

61
00:03:39.707 --> 00:03:43.590
I'll be following Demo 4 found in the DEMOS.

62
00:03:43.590 --> 00:03:46.611
md file in the root project directory.

63
00:03:46.611 --> 00:03:49.973
I'll be demonstrating the addition of the Spring Batch

64
00:03:49.973 --> 00:03:52.302
JobRepository database schema for the required tables.

65
00:03:52.302 --> 00:03:59.315
Note that I've expanded the folder src, main, resources, config, liquibase.

66
00:03:59.315 --> 00:04:02.392
This directory contains the schema definitions used by

67
00:04:02.392 --> 00:04:05.043
Liquibase to manage the database schema and data.

68
00:04:05.043 --> 00:04:08.737
I'm going to start by opening up the file master.

69
00:04:08.737 --> 00:04:09.236
xml.

70
00:04:09.236 --> 00:04:10.236
The master.

71
00:04:10.236 --> 00:04:15.626
xml file is the main changelog definition for the database schema.

72
00:04:15.626 --> 00:04:18.917
Currently, I've included an initial blank schema file.

73
00:04:18.917 --> 00:04:23.299
We're going to include a new file for the Spring Batch schema.

74
00:04:23.299 --> 00:04:25.866
Let me drop that in now.

75
00:04:25.866 --> 00:04:28.959
As this is just a reference to the Spring Batch schema,

76
00:04:28.959 --> 00:04:31.072
I'll need to create the file next.

77
00:04:31.072 --> 00:04:35.831
Note that it's important to add the creation of this table as the

78
00:04:35.831 --> 00:04:39.635
second entry as Liquibased schema changes are additive.

79
00:04:39.635 --> 00:04:43.643
Let's create that Spring Batch schema file now.

80
00:04:43.643 --> 00:04:47.317
Make sure you've expanded the changelog folder under the liquibase folder,

81
00:04:47.317 --> 00:04:52.760
and then right-click on it to add a new file.

82
00:04:52.760 --> 00:04:59.083
Now simply add the file name that we used in the master changelog.

83
00:04:59.083 --> 00:05:02.835
Note that the prefix for the file name is simply a

84
00:05:02.835 --> 00:05:04.200
timestamp that ensures ordering.

85
00:05:04.200 --> 00:05:06.733
I'm going to drop in the contents for the schema.

86
00:05:06.733 --> 00:05:09.758
Once again, note that I'm using the DEMOS.

87
00:05:09.758 --> 00:05:12.026
md file to get this content,

88
00:05:12.026 --> 00:05:14.653
and I recommend that you use it as well as there's a large

89
00:05:14.653 --> 00:05:17.766
chunk of data that will be dropped in.

90
00:05:17.766 --> 00:05:21.687
Note that the schema is actually derived from one

91
00:05:21.687 --> 00:05:24.114
found in the Spring Batch project.

92
00:05:24.114 --> 00:05:27.108
Spring Batch provides you the schema for most types

93
00:05:27.108 --> 00:05:28.772
of databases that are available.

94
00:05:28.772 --> 00:05:32.257
Unfortunately, Spring Batch does not provide it in Liquibase format,

95
00:05:32.257 --> 00:05:34.681
so I needed to create the file myself.

96
00:05:34.681 --> 00:05:38.073
While Spring Batch will auto generate the database objects for you,

97
00:05:38.073 --> 00:05:42.584
I recommend this approach as it puts you or your DBA in

98
00:05:42.584 --> 00:05:45.219
control of the database creation process.

99
00:05:45.219 --> 00:05:46.320
With the database in place,

100
00:05:46.320 --> 00:05:49.814
let's try to run the project and make sure that the database is available.

101
00:05:49.814 --> 00:05:51.628
I'm going to close the file.

102
00:05:51.628 --> 00:05:54.224
And in my toolbar, I'm going to make sure that the main class,

103
00:05:54.224 --> 00:05:56.558
which is PatientBatchLoaderApp is selected,

104
00:05:56.558 --> 00:06:00.292
and I'm going to click to run it.

105
00:06:00.292 --> 00:06:02.331
If we expand the console,

106
00:06:02.331 --> 00:06:06.408
we see a line here noting that Liquibase was configured.

107
00:06:06.408 --> 00:06:07.923
I don't see any errors,

108
00:06:07.923 --> 00:06:10.953
so I'm pretty sure that everything was started up correctly.

109
00:06:10.953 --> 00:06:14.458
But let's go ahead and see if we can access the H2 console.

110
00:06:14.458 --> 00:06:17.406
Go ahead and open up a browser.

111
00:06:17.406 --> 00:06:24.841
Once you have the browser open, navigate to the URL localhost:8080/console.

112
00:06:24.841 --> 00:06:28.639
Entering the URL should bring up the console for the H2 database.

113
00:06:28.639 --> 00:06:33.442
If it doesn't, you may want to check the error logs in case of a failure.

114
00:06:33.442 --> 00:06:38.516
Make sure that you've selected or entered the items in the form as I have shown.

115
00:06:38.516 --> 00:06:42.530
First, click to test the connection.

116
00:06:42.530 --> 00:06:47.214
Now let's go ahead and click Connect.

117
00:06:47.214 --> 00:06:50.425
Here we see that the schema was successfully added.

118
00:06:50.425 --> 00:06:56.016
We have our new Batch_Job and Batch_Step tables inside the H2 database.

119
00:06:56.016 --> 00:07:02.000
That completes verification of the configuration of the Spring Batch database schema.

