1
00:00:01,704 --> 00:00:03,276
In this section of the course,

2
00:00:03,276 --> 00:00:05,924
I covered the first part of chunk-oriented processing,

3
00:00:05,924 --> 00:00:08,077
which is the ItemReader.

4
00:00:08,077 --> 00:00:08,430
First,

5
00:00:08,430 --> 00:00:11,956
I updated the step we configured earlier to now use

6
00:00:11,956 --> 00:00:14,347
chunk-oriented processing instead of the simple tasklet.

7
00:00:14,347 --> 00:00:18,619
I noted that chunking is a process where items are read,

8
00:00:18,619 --> 00:00:21,745
processed, and then chunked together for output.

9
00:00:21,745 --> 00:00:24,326
Given this, I defined a reader, a processor,

10
00:00:24,326 --> 00:00:27,576
and a writer as part of building the step.

11
00:00:27,576 --> 00:00:32,262
Next, I used the Spring Batch FlatFileItemReader builder to build a reader.

12
00:00:32,262 --> 00:00:35,461
The reader defined a name, a path for the file,

13
00:00:35,461 --> 00:00:38,036
the number of lines to skip in the file,

14
00:00:38,036 --> 00:00:41,414
and the mapping from the file record to a domain object.

15
00:00:41,414 --> 00:00:45,428
Then I stubbed out an item processor and writer to allow for

16
00:00:45,428 --> 00:00:48,251
testing the full execution of the new ItemReader.

17
00:00:48,251 --> 00:00:53,686
Finally, I showed you how to unit test the ItemReader using a test file record.

18
00:00:53,686 --> 00:00:57,148
I also showed you execution of the reader using the

19
00:00:57,148 --> 00:00:58,282
stubbed processor and writer.

20
00:00:58,282 --> 00:01:00,429
In the next section of the course,

21
00:01:00,429 --> 00:01:05,348
I'm going to replace the stub processor with a real processor.

22
00:01:05,348 --> 00:01:16,000
The processor will convert our patient records into database entity classes that can later be persisted to the database with an ItemWriter.

