WEBVTT
1
00:00:02.501 --> 00:00:06.042
In this course, I'll be covering the Spring Batch framework.

2
00:00:06.042 --> 00:00:10.897
The framework was first officially released by Spring in 2008,

3
00:00:10.897 --> 00:00:14.423
though the framework predates this release as it was a contribution

4
00:00:14.423 --> 00:00:18.018
given to the community by its original developer.

5
00:00:18.018 --> 00:00:23.171
Batch is built on top of the core Spring feature of dependency injection.

6
00:00:23.171 --> 00:00:25.045
It also is integrated with Spring Boot,

7
00:00:25.045 --> 00:00:28.277
allowing you to quickly ramp up a Spring Batch job as

8
00:00:28.277 --> 00:00:30.554
we're going to see in this course.

9
00:00:30.554 --> 00:00:32.672
The current version of Spring Batch is 4.

10
00:00:32.672 --> 00:00:36.334
0, which was released just prior to the creation of this course.

11
00:00:36.334 --> 00:00:38.005
As part of this version,

12
00:00:38.005 --> 00:00:41.639
upgrades were made to many of the Spring Batch dependencies.

13
00:00:41.639 --> 00:00:44.787
Also, Spring Batch is now fully annotation driven,

14
00:00:44.787 --> 00:00:49.952
requiring no XML configuration as was used in previous versions.

15
00:00:49.952 --> 00:00:52.442
Spring Batch has been one of the most popular choices for

16
00:00:52.442 --> 00:00:54.443
batch implementations for several reasons.

17
00:00:54.443 --> 00:00:59.030
As I noted, Batch is built on top of the Spring Framework.

18
00:00:59.030 --> 00:01:02.564
Spring is currently one of the most popular and mature

19
00:01:02.564 --> 00:01:04.999
choices for building server-side applications,

20
00:01:04.999 --> 00:01:06.535
including batch systems.

21
00:01:06.535 --> 00:01:08.071
Through dependency injection,

22
00:01:08.071 --> 00:01:14.021
you can easily manage the inevitable dependencies needed for batch processing.

23
00:01:14.021 --> 00:01:17.794
You also receive the benefits of Spring support for configuration,

24
00:01:17.794 --> 00:01:21.573
including externalized configuration of jobs.

25
00:01:21.573 --> 00:01:25.859
Spring Batch is Java-based supporting JDK 8.

26
00:01:25.859 --> 00:01:26.502
By leveraging Java,

27
00:01:26.502 --> 00:01:28.645
you can take advantage of one of the most popular

28
00:01:28.645 --> 00:01:30.427
languages for developing applications.

29
00:01:30.427 --> 00:01:35.373
You aren't required to learn a custom language for developing a batch job,

30
00:01:35.373 --> 00:01:39.229
which may not be as mature or feature rich.

31
00:01:39.229 --> 00:01:42.411
Spring Batch is open source.

32
00:01:42.411 --> 00:01:45.766
This is an obvious advantage for maintaining your batch system over

33
00:01:45.766 --> 00:01:51.199
proprietary batch systems that require expensive support contracts.

34
00:01:51.199 --> 00:01:55.039
As an open-source product, you also get the support of the technical community,

35
00:01:55.039 --> 00:01:58.485
including the original developers of Spring Batch who

36
00:01:58.485 --> 00:02:01.814
continue to actively support the framework.

37
00:02:01.814 --> 00:02:02.269
Finally,

38
00:02:02.269 --> 00:02:07.728
Spring Batch has extensive support for the common features of batch processing.

39
00:02:07.728 --> 00:02:11.260
Spring Batch supports an extensive batch job support system

40
00:02:11.260 --> 00:02:13.811
that allows you to view the status of jobs,

41
00:02:13.811 --> 00:02:17.387
as well as interact with them such as starting or stopping them.

42
00:02:17.387 --> 00:02:21.371
The framework also makes use of execution contexts to support features

43
00:02:21.371 --> 00:02:25.522
such as running a job with different parameters or rerunning a job based

44
00:02:25.522 --> 00:02:29.169
on a point in the history of a job execution.

45
00:02:29.169 --> 00:02:32.753
Spring Batch includes support for various formats of

46
00:02:32.753 --> 00:02:36.167
reading and writing data such as file readers and writers

47
00:02:36.167 --> 00:02:38.760
and database readers and writers.

48
00:02:38.760 --> 00:02:43.956
Finally, the framework supports various strategies such as chunking data,

49
00:02:43.956 --> 00:02:47.630
processing in parallel, merges, sorts, and splits.

50
00:02:47.630 --> 00:02:51.557
Now let's cover some basic terminology that's going

51
00:02:51.557 --> 00:02:53.830
to be used throughout the course.

52
00:02:53.830 --> 00:02:56.303
At the heart of Spring Batch is the job.

53
00:02:56.303 --> 00:03:01.599
A job is simply the template for how batch processing is going to be performed.

54
00:03:01.599 --> 00:03:04.859
Jobs have instances, executions, context,

55
00:03:04.859 --> 00:03:09.470
and parameters, all of which are going to be highlighted in this course.

56
00:03:09.470 --> 00:03:12.717
A job has one or more steps.

57
00:03:12.717 --> 00:03:15.965
These steps define a phase of processing.

58
00:03:15.965 --> 00:03:20.087
This could be just simply reading the input of a file or something more

59
00:03:20.087 --> 00:03:24.094
complex such at transforming data between domains.

60
00:03:24.094 --> 00:03:28.419
Similar to a job, steps have instances, executions,

61
00:03:28.419 --> 00:03:31.978
context, and parameters, each of which we are going to cover.

62
00:03:31.978 --> 00:03:36.145
Steps generally start with an input, which is represented by a reader.

63
00:03:36.145 --> 00:03:39.484
An example would be a reader that defines how each line of a

64
00:03:39.484 --> 00:03:41.792
file will be read into a batch program.

65
00:03:41.792 --> 00:03:45.530
After data is read, the step then needs to process the data.

66
00:03:45.530 --> 00:03:48.736
This usually means some type of business rules are

67
00:03:48.736 --> 00:03:51.810
applied or a transformation is performed.

68
00:03:51.810 --> 00:03:53.694
After the processing of data is complete,

69
00:03:53.694 --> 00:04:05.000
the last part of the step is to write the data to a location such as a database. Now let's just discuss what you can expect to learn from this course.

