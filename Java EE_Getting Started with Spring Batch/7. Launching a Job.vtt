WEBVTT
1
00:00:01.720 --> 00:00:06.177
At this point, I've verified that the batch job is correctly configured.

2
00:00:06.177 --> 00:00:07.861
Next, I want to execute it.

3
00:00:07.861 --> 00:00:11.449
As I chose to use a web container to build the batch job,

4
00:00:11.449 --> 00:00:14.902
there are a few options I have for how to execute the job.

5
00:00:14.902 --> 00:00:18.645
Most likely, you're going to leverage a scheduler to launch the job; however,

6
00:00:18.645 --> 00:00:20.151
for the purposes of this course,

7
00:00:20.151 --> 00:00:23.374
I'm just going to create a REST endpoint to directly execute it.

8
00:00:23.374 --> 00:00:29.039
I'm going to create a class named JobResource in the package com.

9
00:00:29.039 --> 00:00:30.017
Pluralsight.

10
00:00:30.017 --> 00:00:30.994
springbatch.

11
00:00:30.994 --> 00:00:31.971
patientbatchloader.

12
00:00:31.971 --> 00:00:32.949
web.

13
00:00:32.949 --> 00:00:33.926
rest.

14
00:00:33.926 --> 00:00:37.040
I'll be annotating the class as a Spring RestController

15
00:00:37.040 --> 00:00:40.113
and setting the mapping to be /job.

16
00:00:40.113 --> 00:00:43.841
I'll autowire the JobLauncher and job that was

17
00:00:43.841 --> 00:00:46.208
configured earlier as part of construction.

18
00:00:46.208 --> 00:00:49.726
Now let's look at the method to support job execution.

19
00:00:49.726 --> 00:00:53.723
Job execution will occur as part of the new runJob method.

20
00:00:53.723 --> 00:00:56.693
This method will accept the file name and the path.

21
00:00:56.693 --> 00:00:59.761
This file name will be used in the next section when

22
00:00:59.761 --> 00:01:04.518
I cover item reading; however, for now, it will just be needed for validation.

23
00:01:04.518 --> 00:01:08.063
The fileName is added as a job parameter into a map.

24
00:01:08.063 --> 00:01:10.164
As part of the JobLauncher's run method,

25
00:01:10.164 --> 00:01:12.728
I passed the job instance and the parameterMap.

26
00:01:12.728 --> 00:01:17.119
The last part of this method performs error checking returning a

27
00:01:17.119 --> 00:01:21.118
SERVER_ERROR or OK depending on the results of execution.

28
00:01:21.118 --> 00:01:24.769
Now let's add this code to the project.

29
00:01:24.769 --> 00:01:28.503
For job execution, I'm going to demo adding the RestController,

30
00:01:28.503 --> 00:01:32.512
starting the server, and then making a request to the rest endpoint.

31
00:01:32.512 --> 00:01:35.184
Note that I'll be following Demo 8 found in the DEMOS.

32
00:01:35.184 --> 00:01:39.269
md file in the root project directory.

33
00:01:39.269 --> 00:01:43.963
Now that the job is configured and unit tested, I want to verify job execution.

34
00:01:43.963 --> 00:01:44.712
To do this,

35
00:01:44.712 --> 00:01:48.035
I need to create a new controller class that will allow me to

36
00:01:48.035 --> 00:01:50.327
kick off the job using the JobLauncher.

37
00:01:50.327 --> 00:01:53.797
I'm going to create a class in the package named com.

38
00:01:53.797 --> 00:01:54.722
Pluralsight.

39
00:01:54.722 --> 00:01:55.647
springbatch.

40
00:01:55.647 --> 00:01:56.573
patientbatchloader.

41
00:01:56.573 --> 00:01:57.498
web.

42
00:01:57.498 --> 00:01:58.424
rest.

43
00:01:58.424 --> 00:02:00.691
Let's create that now.

44
00:02:00.691 --> 00:02:05.226
The class name is going to be JobResource.

45
00:02:05.226 --> 00:02:08.113
I'm going to start by annotating this class as a

46
00:02:08.113 --> 00:02:10.634
RestController and with a RequestMapping of /job.

47
00:02:10.634 --> 00:02:15.117
This tells Spring that the class is to be managed as a

48
00:02:15.117 --> 00:02:18.553
RestController and paths in this class will begin with /job.

49
00:02:18.553 --> 00:02:21.264
Next, I need to add the JobLauncher and job instance,

50
00:02:21.264 --> 00:02:26.270
as well as the Constructor where the instance will be Autowired.

51
00:02:26.270 --> 00:02:26.508
Next,

52
00:02:26.508 --> 00:02:29.121
I need to create the get method that will use the

53
00:02:29.121 --> 00:02:30.558
JobLauncher to execute the job.

54
00:02:30.558 --> 00:02:32.162
Let's drop that in now.

55
00:02:32.162 --> 00:02:35.776
Note that I've added a mapping for Get requests using

56
00:02:35.776 --> 00:02:38.189
the fileName as a path variable.

57
00:02:38.189 --> 00:02:42.150
In the next section on item readers, this file name will be leveraged; however,

58
00:02:42.150 --> 00:02:44.863
for now I've just included it for validation.

59
00:02:44.863 --> 00:02:47.646
The fileName will be mapped as a JobParameter.

60
00:02:47.646 --> 00:02:51.483
The JobLauncher will then run the job using the parameter passed.

61
00:02:51.483 --> 00:02:55.680
I'm also including an exception check in case the job were to fail.

62
00:02:55.680 --> 00:02:59.884
With the RestController in place, let's try to actually run the job.

63
00:02:59.884 --> 00:03:02.399
I'm going to start the server from the IDE using the

64
00:03:02.399 --> 00:03:03.823
PatientBatchLoaderApp configuration.

65
00:03:03.823 --> 00:03:09.521
We see here that the server is started.

66
00:03:09.521 --> 00:03:14.098
I'm going to open up a test REST client in the IDE.

67
00:03:14.098 --> 00:03:15.932
Here, I'm going to execute the endpoint.

68
00:03:15.932 --> 00:03:18.725
We're going to use the HTTP method of GET,

69
00:03:18.725 --> 00:03:25.713
we'll have the host as localhost:8080, and I'm going to drop in the path.

70
00:03:25.713 --> 00:03:31.546
We see here that the path is /job/test-unit-testing.

71
00:03:31.546 --> 00:03:32.275
csv.

72
00:03:32.275 --> 00:03:35.562
This file is located in the data folder of the project.

73
00:03:35.562 --> 00:03:37.442
Let's try running it.

74
00:03:37.442 --> 00:03:41.719
If the job executed successfully, you should see a Success response.

75
00:03:41.719 --> 00:03:42.361
If not,

76
00:03:42.361 --> 00:03:44.800
it's recommended that you verify the correct

77
00:03:44.800 --> 00:03:47.109
configuration of the job and properties.

78
00:03:47.109 --> 00:03:49.883
Now let's open back up the console.

79
00:03:49.883 --> 00:03:53.789
If the job executed successfully, you should see three lines of output.

80
00:03:53.789 --> 00:03:58.457
The first line should note that the job ran with the fileName argument passed.

81
00:03:58.457 --> 00:04:01.519
The second line should read the Hello World!

82
00:04:01.519 --> 00:04:01.902
output.

83
00:04:01.902 --> 00:04:04.734
The final line should show the Success response.

84
00:04:04.734 --> 00:04:14.000
That verifies the job is correctly configured. Now I can create the reader, processor, and the writer for our patient files.

