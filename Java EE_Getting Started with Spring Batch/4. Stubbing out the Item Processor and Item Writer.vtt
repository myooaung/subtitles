WEBVTT
1
00:00:02.050 --> 00:00:07.111
Chunk-oriented processing requires a reader, processor, and writer.

2
00:00:07.111 --> 00:00:08.240
While I've created the reader,

3
00:00:08.240 --> 00:00:10.761
I won't be able to create the processor and writer

4
00:00:10.761 --> 00:00:13.259
until the next sections of the course.

5
00:00:13.259 --> 00:00:15.618
But what if I want to test the reader now?

6
00:00:15.618 --> 00:00:17.969
Spring Batch provides us with support for stubbing

7
00:00:17.969 --> 00:00:20.398
out these parts of a job step.

8
00:00:20.398 --> 00:00:25.404
Here I'm displaying the implementation of a processor using the

9
00:00:25.404 --> 00:00:28.737
Spring Batch class PassThroughItemProcessor.

10
00:00:28.737 --> 00:00:31.750
This processor will simply take the input given by the reader

11
00:00:31.750 --> 00:00:34.368
and pass it to the writer without changes.

12
00:00:34.368 --> 00:00:35.404
For the ItemWriter,

13
00:00:35.404 --> 00:00:40.710
I'll create a simple implementation of the Spring Batch ItemWriter interface.

14
00:00:40.710 --> 00:00:43.637
I'll be writing each item out to the System.

15
00:00:43.637 --> 00:00:44.287
err log.

16
00:00:44.287 --> 00:00:46.515
While I've provided these for the purpose of stubbing

17
00:00:46.515 --> 00:00:48.217
out the code and testing the reader,

18
00:00:48.217 --> 00:00:51.290
they can also be very helpful in your implementation if you

19
00:00:51.290 --> 00:00:55.600
simply want to debug one of the parts of a step.

20
00:00:55.600 --> 00:00:59.691
Now let's implement these in the project.

21
00:00:59.691 --> 00:01:03.880
We're going to create two methods for stubbing out processing and writing.

22
00:01:03.880 --> 00:01:06.763
Note that I'll be following Demo 12 found in the DEMOS.

23
00:01:06.763 --> 00:01:11.467
md file in the root project directory.

24
00:01:11.467 --> 00:01:12.330
In this demo,

25
00:01:12.330 --> 00:01:15.205
I'll show you how to implement a stubbed out processor

26
00:01:15.205 --> 00:01:18.368
and writer to allow for verification of the full job

27
00:01:18.368 --> 00:01:19.941
using the new FlatFileItemReader.

28
00:01:19.941 --> 00:01:23.979
I've opened up the BatchJobConfiguration class where

29
00:01:23.979 --> 00:01:26.013
we're going to add this stubbed code.

30
00:01:26.013 --> 00:01:28.355
Let's drop it at the bottom of the class.

31
00:01:28.355 --> 00:01:32.861
Here we see in the first Bean definition that I've created a

32
00:01:32.861 --> 00:01:35.316
method that returns a PassThroughItemProcessor.

33
00:01:35.316 --> 00:01:36.215
This does nothing,

34
00:01:36.215 --> 00:01:40.108
it passes the argument on to the next part of the chunk processing.

35
00:01:40.108 --> 00:01:41.483
In the second Bean definition,

36
00:01:41.483 --> 00:01:46.686
I have a method that will take the PatientRecord and write it out to the System.

37
00:01:46.686 --> 00:01:53.000
err log. This completes the completion of the stub for processing and writing items.

