WEBVTT
1
00:00:00.000 --> 00:00:04.123
As I've started you off with a template project,

2
00:00:04.123 --> 00:00:08.252
you have everything you need to focus on the steps for using

3
00:00:08.252 --> 00:00:10.394
it to create a Spring Batch application.

4
00:00:10.394 --> 00:00:12.082
In this section of the course,

5
00:00:12.082 --> 00:00:14.780
I'll be demonstrating the configuration of Spring Batch

6
00:00:14.780 --> 00:00:17.793
dependencies and your first Spring Batch job.

7
00:00:17.793 --> 00:00:20.947
The first step for creating your Spring Batch job is to configure the

8
00:00:20.947 --> 00:00:24.117
Spring Batch libraries as project dependencies.

9
00:00:24.117 --> 00:00:25.808
I'm showing a snippet of the build.

10
00:00:25.808 --> 00:00:28.814
gradle file found in the root directory of the project.

11
00:00:28.814 --> 00:00:31.150
I'll be adding two lines here.

12
00:00:31.150 --> 00:00:35.249
The first is a spring-boot-starter for the Spring Batch project.

13
00:00:35.249 --> 00:00:39.479
As a result of adding this line, Spring Boot will bring in two libraries,

14
00:00:39.479 --> 00:00:42.654
spring-batch-core and spring-batch-infrastructure.

15
00:00:42.654 --> 00:00:45.817
The infrastructure library contains logic for interacting with various

16
00:00:45.817 --> 00:00:49.372
underlying components like a database or a file system.

17
00:00:49.372 --> 00:00:53.505
The core library logically sits above infrastructure and contains support

18
00:00:53.505 --> 00:00:57.002
for the various Spring Batch features and configurations.

19
00:00:57.002 --> 00:01:01.718
The second is a test library for Spring Batch specific test support.

20
00:01:01.718 --> 00:01:05.730
We will see some examples of testing when we create the job.

21
00:01:05.730 --> 00:01:08.295
Note that Spring Boot will take care of bringing in the

22
00:01:08.295 --> 00:01:09.961
latest version for all of these libraries,

23
00:01:09.961 --> 00:01:14.072
which as of the time of creating this course is version 4.

24
00:01:14.072 --> 00:01:14.620
0.

25
00:01:14.620 --> 00:01:19.002
Now, let's add the dependencies in the project.

26
00:01:19.002 --> 00:01:20.691
If you're following along with the demos,

27
00:01:20.691 --> 00:01:23.321
I provided a file that will help you along the way.

28
00:01:23.321 --> 00:01:26.623
In the root directory of the project is a file named DEMOS.

29
00:01:26.623 --> 00:01:27.014
md.

30
00:01:27.014 --> 00:01:31.197
It contains the text for every demo from the course

31
00:01:31.197 --> 00:01:35.161
including code samples and import lines.

32
00:01:35.161 --> 00:01:39.371
I'm now going to cover Demo 2 for adding Gradle dependencies.

33
00:01:39.371 --> 00:01:42.697
Let's add those dependencies now.

34
00:01:42.697 --> 00:01:43.357
In this demo,

35
00:01:43.357 --> 00:01:45.555
I'm going to walk you through adding the Spring Batch

36
00:01:45.555 --> 00:01:47.823
libraries to the demo application.

37
00:01:47.823 --> 00:01:51.628
I have the patient-batch-loader project loaded up in my IDE.

38
00:01:51.628 --> 00:01:53.950
We need to open up the build.

39
00:01:53.950 --> 00:01:56.755
gradle file to add the dependencies.

40
00:01:56.755 --> 00:01:58.897
Let's do that now.

41
00:01:58.897 --> 00:02:01.309
Here you see the Gradle script.

42
00:02:01.309 --> 00:02:04.927
I need to scroll down to the dependency section.

43
00:02:04.927 --> 00:02:06.980
Here we see the existing dependencies.

44
00:02:06.980 --> 00:02:09.790
Let's start by adding the spring-boot-starter-batch dependency.

45
00:02:09.790 --> 00:02:14.641
Note here that the group name is org.

46
00:02:14.641 --> 00:02:15.418
springframework.

47
00:02:15.418 --> 00:02:20.851
boot and the artifact name is spring-boot-starter-batch.

48
00:02:20.851 --> 00:02:23.249
Next, I need to add the test library.

49
00:02:23.249 --> 00:02:27.922
Here I've dropped in the dependency with the group name of org.

50
00:02:27.922 --> 00:02:28.375
springframework.

51
00:02:28.375 --> 00:02:32.118
batch and the artifact name of spring-batch-test.

52
00:02:32.118 --> 00:02:38.552
Note that the first library will be available at compile time for the project.

53
00:02:38.552 --> 00:02:42.656
This will make the Spring Batch framework available for development.

54
00:02:42.656 --> 00:02:46.102
The second library was added as part of test compilation.

55
00:02:46.102 --> 00:02:48.276
So as I'm coding up my test cases,

56
00:02:48.276 --> 00:02:51.336
I'll again have support from the Spring Batch framework.

57
00:02:51.336 --> 00:02:54.669
Now let's open up the Gradle tab.

58
00:02:54.669 --> 00:02:57.518
And just to make sure that everything is working correctly,

59
00:02:57.518 --> 00:02:59.288
I'm going to refresh the project.

60
00:02:59.288 --> 00:03:04.493
Okay, it looks like the build was successful, so I'm going to minimize that.

61
00:03:04.493 --> 00:03:06.698
And let's go back into our Project tab.

62
00:03:06.698 --> 00:03:09.640
I'll open up the External Libraries section of the project,

63
00:03:09.640 --> 00:03:15.852
and what we want to see here are the libraries available for Spring Batch.

64
00:03:15.852 --> 00:03:21.328
As I noted earlier, when we added the Spring Batch dependency,

65
00:03:21.328 --> 00:03:22.905
we get two libraries.

66
00:03:22.905 --> 00:03:25.351
The first one is the spring-batch-core library,

67
00:03:25.351 --> 00:03:28.380
and the second one is the spring-batch-infrastructure library.

68
00:03:28.380 --> 00:03:33.836
By adding the test dependency, we got a spring-batch-test library.

69
00:03:33.836 --> 00:03:43.000
So this verifies that everything has been added correctly and these Spring Batch libraries will be available at development time.

