1
00:00:01,850 --> 00:00:04,421
As I'm going to read data from a FlatFile,

2
00:00:04,421 --> 00:00:07,407
I'll need some type of construct to open the file,

3
00:00:07,407 --> 00:00:11,710
skip the header line, read each line of content using a tokenizer,

4
00:00:11,710 --> 00:00:16,237
then map each data field to a PatientRecord instance attribute.

5
00:00:16,237 --> 00:00:16,573
Luckily,

6
00:00:16,573 --> 00:00:20,649
Spring Batch provides this construct out of the box with a FlatFileItemReader.

7
00:00:20,649 --> 00:00:26,716
Similar to the job and step, I'm going to use a builder for defining this reader.

8
00:00:26,716 --> 00:00:31,311
I'll use the builder to first define the name for the ItemReader.

9
00:00:31,311 --> 00:00:34,783
Then I'll identify the resource for the ItemReader to use.

10
00:00:34,783 --> 00:00:39,646
In this case, it's the path to the file name I'll specify as a JobParameter.

11
00:00:39,646 --> 00:00:39,983
Next,

12
00:00:39,983 --> 00:00:44,532
I'll set the number of lines to skip in the file to one so

13
00:00:44,532 --> 00:00:47,663
that the header row of the file is not read.

14
00:00:47,663 --> 00:00:48,077
Finally,

15
00:00:48,077 --> 00:00:51,800
I'll construct a line mapper to tell the FlatFileItemReader

16
00:00:51,800 --> 00:00:55,016
what strategy to use for converting data from each field into

17
00:00:55,016 --> 00:00:57,052
an attribute on a PatientRecord.

18
00:00:57,052 --> 00:01:00,104
Let's look at the code for this.

19
00:01:00,104 --> 00:01:04,862
Here you see the implementation of a Spring Bean for a FlatFileItemReader.

20
00:01:04,862 --> 00:01:07,623
The reader is annotated with StepScope.

21
00:01:07,623 --> 00:01:13,345
This allows me to inject values from the step context into my code.

22
00:01:13,345 --> 00:01:16,450
Here we see the value annotation is used in front of the

23
00:01:16,450 --> 00:01:19,531
file name input parameter to do just that.

24
00:01:19,531 --> 00:01:23,748
The file name jobParameter will get injected for me at

25
00:01:23,748 --> 00:01:25,815
runtime into the input parameter.

26
00:01:25,815 --> 00:01:30,120
Next, I defined the builder for the FlatFileItemReader.

27
00:01:30,120 --> 00:01:33,654
I defined the name of the ItemReader using a Constant.

28
00:01:33,654 --> 00:01:36,387
I build the PathResource using the input path from

29
00:01:36,387 --> 00:01:38,800
properties and the file name input param.

30
00:01:38,800 --> 00:01:42,555
I set the number of lines to skip to 1.

31
00:01:42,555 --> 00:01:47,403
And finally, I define the lineMapper, which is implemented in a separate method.

32
00:01:47,403 --> 00:01:49,733
Let's look at that code now.

33
00:01:49,733 --> 00:01:52,063
The lineMapper method is another Bean,

34
00:01:52,063 --> 00:01:56,125
which simply tells Spring Batch's file ItemReader which PatientRecord

35
00:01:56,125 --> 00:01:59,719
attribute is mapped to which field in a record.

36
00:01:59,719 --> 00:02:03,496
I use a DefaultLineMapper with a type PatientRecord,

37
00:02:03,496 --> 00:02:08,077
then I use the PatientRecord constructor to read each string from

38
00:02:08,077 --> 00:02:10,787
the FieldSet into a PatientRecord attribute.

39
00:02:10,787 --> 00:02:16,053
Finally, I set the LineTokenizer to a DelimitedLineTokenizer instance.

40
00:02:16,053 --> 00:02:21,308
This uses a comma as the delimiter by default.

41
00:02:21,308 --> 00:02:25,145
Now let's implement reader in the project.

42
00:02:25,145 --> 00:02:30,330
I'm going to demonstrate creating the two methods for the FlatFileItemReader.

43
00:02:30,330 --> 00:02:33,506
Note that I'll be following Demo 11 found in the DEMOS.

44
00:02:33,506 --> 00:02:38,142
md file in the root project directory.

45
00:02:38,142 --> 00:02:41,149
I'm going to implement the FlatFileItemReader now.

46
00:02:41,149 --> 00:02:44,088
This will take each record from the input file and create a

47
00:02:44,088 --> 00:02:46,294
PatientRecord instance from its data.

48
00:02:46,294 --> 00:02:51,874
Open up the class BatchJobConfiguration if you don't already have it opened.

49
00:02:51,874 --> 00:02:55,710
I'm going to drop in the code for the reader now.

50
00:02:55,710 --> 00:02:59,331
You'll notice that there are two compilation errors.

51
00:02:59,331 --> 00:03:02,476
Let's fix the first by updating the Constants class file.

52
00:03:02,476 --> 00:03:05,142
I'm going to open up the Constants class,

53
00:03:05,142 --> 00:03:08,961
and I'm going to drop in the constant for the Item_Reader_Name.

54
00:03:08,961 --> 00:03:11,561
Similar to this step in the job,

55
00:03:11,561 --> 00:03:15,527
this just provides Spring Batch with a name to identify the reader.

56
00:03:15,527 --> 00:03:19,403
Let's open back up the BatchJobConfiguration class.

57
00:03:19,403 --> 00:03:23,920
First, note I've included a StepScope annotation.

58
00:03:23,920 --> 00:03:27,743
This allows me to inject values from the step context.

59
00:03:27,743 --> 00:03:28,026
Next,

60
00:03:28,026 --> 00:03:31,142
note that the file name parameter is the example where I

61
00:03:31,142 --> 00:03:35,475
use a value from the step context, specifically,

62
00:03:35,475 --> 00:03:36,730
the JOB_PARAM_FILE_NAME.

63
00:03:36,730 --> 00:03:41,027
I use a convenience class from Spring Batch for FlatFileItem reading.

64
00:03:41,027 --> 00:03:44,514
The Builder takes a name, the resource is the input file,

65
00:03:44,514 --> 00:03:48,955
a number of lines to skip, which in our case is 1 for the header,

66
00:03:48,955 --> 00:03:52,519
and a lineMapper that I'm going to implement next.

67
00:03:52,519 --> 00:03:54,762
Let's drop that code in.

68
00:03:54,762 --> 00:03:57,044
This is the implementation of the lineMapper to be

69
00:03:57,044 --> 00:03:58,285
used by the FlatFileItemReader.

70
00:03:58,285 --> 00:04:04,173
It just simply maps each field to a PatientRecord attribute using the

71
00:04:04,173 --> 00:04:07,308
PatientRecord constructor that I created earlier.

72
00:04:07,308 --> 00:04:07,720
Finally,

73
00:04:07,720 --> 00:04:10,602
I include a DelimitedLineTokenizer that accepts a

74
00:04:10,602 --> 00:04:19,000
comma as the delimiter by default. This completes the implementation of the FlatFileItemReader.

