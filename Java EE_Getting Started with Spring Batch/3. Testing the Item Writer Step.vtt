WEBVTT
1
00:00:02.067 --> 00:00:06.185
Now that I've implemented the JpaItemWriter, let's test it.

2
00:00:06.185 --> 00:00:10.570
We're going to again use the existing BatchJobConfigurationTest class.

3
00:00:10.570 --> 00:00:13.448
To do this, I'll start by creating a PatientEntity,

4
00:00:13.448 --> 00:00:17.897
passing test data into the constructor, then I'll create a StepExecution,

5
00:00:17.897 --> 00:00:21.487
similar to what I did in the ItemReader test case,

6
00:00:21.487 --> 00:00:24.614
I'll execute the writer in the scope of a step,

7
00:00:24.614 --> 00:00:25.461
and then finally,

8
00:00:25.461 --> 00:00:28.642
I'll assert that I could retrieve the PatientRecord from the database.

9
00:00:28.642 --> 00:00:34.197
To do this, I'm going to need to create a patientRepository class in the code.

10
00:00:34.197 --> 00:00:36.979
There will also need to be a change to the unit

11
00:00:36.979 --> 00:00:38.497
test to support the database call.

12
00:00:38.497 --> 00:00:41.994
Let's implement the unit test now.

13
00:00:41.994 --> 00:00:46.492
I'm going to demonstrate the necessary changes for testing the JPAItemWriter.

14
00:00:46.492 --> 00:00:49.506
Note that I'll be following Demo 21 found in the DEMOS.

15
00:00:49.506 --> 00:00:53.918
md file in the root project directory.

16
00:00:53.918 --> 00:00:59.062
With the ItemWriter implementation in place, I want to now unit test the code.

17
00:00:59.062 --> 00:01:00.514
To verify that the data saved,

18
00:01:00.514 --> 00:01:05.309
I'm also going to implement a Repository class for accessing patient data.

19
00:01:05.309 --> 00:01:08.620
In the package com.

20
00:01:08.620 --> 00:01:09.448
Pluralsight.

21
00:01:09.448 --> 00:01:10.275
springbatch.

22
00:01:10.275 --> 00:01:11.103
patientbatchloader.

23
00:01:11.103 --> 00:01:13.801
repository, we're going to create a new interface.

24
00:01:13.801 --> 00:01:15.862
I'm going to name it PatientRepository,

25
00:01:15.862 --> 00:01:22.396
and I'm going to select that it's an interface.

26
00:01:22.396 --> 00:01:26.615
First, I need to update the interface declaration.

27
00:01:26.615 --> 00:01:29.754
The Repository annotation signifies to Spring that this is a

28
00:01:29.754 --> 00:01:33.367
Repository component to be managed as a bean.

29
00:01:33.367 --> 00:01:38.412
The interface extends the JpaRepository class to support data access.

30
00:01:38.412 --> 00:01:41.208
I'll only be using the out of the box queries for testing,

31
00:01:41.208 --> 00:01:43.075
so no further changes are needed.

32
00:01:43.075 --> 00:01:46.115
Now let's open up the test class BatchJobConfigurationTest.

33
00:01:46.115 --> 00:01:48.697
To start with,

34
00:01:48.697 --> 00:01:56.277
I want to autowire the Writer and the Repository beans that I just created.

35
00:01:56.277 --> 00:01:58.248
Let's drop those in.

36
00:01:58.248 --> 00:02:04.080
Now that I've autowired the Writer and Repository, I can drop in the test case.

37
00:02:04.080 --> 00:02:09.608
I'm going to scroll to the bottom, then I'll drop in the test case.

38
00:02:09.608 --> 00:02:14.835
Here we see that the test case will first create a PatientEntity

39
00:02:14.835 --> 00:02:17.659
using the test data passed for construction.

40
00:02:17.659 --> 00:02:22.537
Then, within the stop of a step, the writer will be executed against the data.

41
00:02:22.537 --> 00:02:25.881
This should persist the PatientRecord to the database.

42
00:02:25.881 --> 00:02:29.508
Finally, I'll assert that through the new patientRepository interface,

43
00:02:29.508 --> 00:02:33.913
I can retrieve the PatientRecord back from the database.

44
00:02:33.913 --> 00:02:37.395
If I run the testcase now, it's going to fail.

45
00:02:37.395 --> 00:02:40.368
The reason it fails is because I'm trying to use the

46
00:02:40.368 --> 00:02:41.693
JpaItemWriter without a transaction.

47
00:02:41.693 --> 00:02:42.747
Let's fix this.

48
00:02:42.747 --> 00:02:48.169
I'm going to scroll back to the top of the class,

49
00:02:48.169 --> 00:02:53.468
and I'm going to add the Transactional annotation.

50
00:02:53.468 --> 00:02:55.163
Along with this annotation,

51
00:02:55.163 --> 00:02:58.976
I also need to update the list of TestExecutionListeners.

52
00:02:58.976 --> 00:03:01.786
I'm going to replace that annotation now.

53
00:03:01.786 --> 00:03:08.308
I've now added a listener for transactional tests, and I can execute the test.

54
00:03:08.308 --> 00:03:10.451
Let's scroll back down.

55
00:03:10.451 --> 00:03:18.764
I'm going to run the test, and we see here that the test has passed.

56
00:03:18.764 --> 00:03:21.718
Let me minimize the console.

57
00:03:21.718 --> 00:03:22.470
So once again,

58
00:03:22.470 --> 00:03:25.229
the assertion we were making was that the call to the

59
00:03:25.229 --> 00:03:28.525
patientRepository would find a record, which it did,

60
00:03:28.525 --> 00:03:35.000
so this was successful. That completes the demo for unit testing the ItemWriter.

