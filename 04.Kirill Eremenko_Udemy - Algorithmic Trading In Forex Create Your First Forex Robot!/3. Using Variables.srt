1
00:00:07,660 --> 00:00:14,540
Blow this is Carol from four explode dot com and this is the third tutorial in our series of em kill

2
00:00:14,540 --> 00:00:17,360
for tutorials for complete beginners.

3
00:00:17,360 --> 00:00:25,010
Last time we talked about variables and types of variables and today we're going to move one step forward

4
00:00:25,070 --> 00:00:34,250
and we will talk about how we can actually use these variables in operations how we can add them subtract

5
00:00:34,250 --> 00:00:38,140
them divide them and so on.

6
00:00:38,150 --> 00:00:46,610
So as you can see here I've already started a news group called the 3 which is you can also see on the

7
00:00:46,610 --> 00:00:48,730
left the navigator.

8
00:00:49,350 --> 00:00:55,660
We will start by creating a variable of type integer and it.

9
00:00:56,120 --> 00:01:00,610
And we will assign a value of 10.

10
00:01:00,830 --> 00:01:07,780
So this is how we did it last time and today I'm going to show you a new technique which will allow

11
00:01:07,780 --> 00:01:11,120
you to save a little bit of space.

12
00:01:11,900 --> 00:01:14,460
So this part of this first line is called.

13
00:01:14,480 --> 00:01:22,630
But in the declaration of a parable the second part is called the initialization of a variable and kill

14
00:01:22,640 --> 00:01:28,880
for actually allows you to combine the two into one line and to do that in order to do this we need

15
00:01:28,880 --> 00:01:32,870
to take this equals 10 part and put it into the first line.

16
00:01:33,050 --> 00:01:35,780
And that way we don't need the second line anymore.

17
00:01:36,110 --> 00:01:46,220
And what this does is it first creates a variable of type a type of int and calls it a and then it assigns

18
00:01:46,580 --> 00:01:49,760
a value of 10.

19
00:01:49,910 --> 00:01:51,880
So now let's create another one.

20
00:01:51,970 --> 00:02:00,860
There will be a value 5 and and another animal which we'll call C but we won't give it any value so

21
00:02:00,860 --> 00:02:02,760
we'll just create variables.

22
00:02:03,510 --> 00:02:14,020
Now what we want to do is we want to give one at a plus b and put the result into C and it's quite intuitive

23
00:02:14,030 --> 00:02:18,500
how to do that and we see equals A plus B.

24
00:02:18,830 --> 00:02:27,210
And at this stage this is an expression and we need to put a semicolon and turn it into a statement.

25
00:02:27,310 --> 00:02:31,190
We will be using expressions like like like this.

26
00:02:31,190 --> 00:02:32,780
We'll be using expressions like this.

27
00:02:32,780 --> 00:02:42,200
Further on in kill for and use used for various reasons but we can just leave it here right now by itself

28
00:02:42,230 --> 00:02:43,940
before a semicolon.

29
00:02:44,480 --> 00:02:46,640
Because if you try to compile I get an error.

30
00:02:47,190 --> 00:02:56,660
And we need to turn it into a statement and I will put a semicolon on and try compiling again as you

31
00:02:56,660 --> 00:02:58,900
can see no errors or warnings.

32
00:02:59,540 --> 00:03:09,140
And just like last time let's check if the program is working correctly by outputting C on our screen

33
00:03:09,260 --> 00:03:17,930
the value of c on telescreen using an alert statement that's compiled that go to the terminal.

34
00:03:18,130 --> 00:03:25,160
There's meditator for now will look into the scripts folder store all three.

35
00:03:25,170 --> 00:03:30,350
We can either drag and drop or just double click and there we go.

36
00:03:30,360 --> 00:03:34,850
So the result of IPOs be done five is 15.

37
00:03:35,010 --> 00:03:36,910
OK that's that's good.

38
00:03:36,930 --> 00:03:43,680
Now we'll go back to our code and for a change.

39
00:03:43,680 --> 00:03:46,880
Now let's look at Double variables.

40
00:03:46,890 --> 00:03:55,660
And so these are variables that can have a decimal point and say we'll call the first one bar one.

41
00:03:55,960 --> 00:04:08,130
And if you get a value of two point five and double to your value of four for example and we want to

42
00:04:08,130 --> 00:04:14,600
see the result of the division on one of these by the other.

43
00:04:15,210 --> 00:04:24,640
So we can actually write initialized the result variable right here using bar 1 and bar 2.

44
00:04:24,870 --> 00:04:34,910
And the really saved bar one divided by far too to semicolon again and then we'll add not a lurch here

45
00:04:36,580 --> 00:04:40,340
resolved so let's see what that will do us.

46
00:04:40,340 --> 00:04:46,670
We compile that and go to the terminal 3.

47
00:04:46,670 --> 00:04:47,100
There we go.

48
00:04:47,090 --> 00:04:55,600
So first alert give this teen and the second letter it gives us a point six to five which is perfect.

49
00:04:55,610 --> 00:04:58,830
Now we going back to the code.

50
00:04:59,610 --> 00:05:08,300
And the next step that we're going to look at it is working with string variables.

51
00:05:08,400 --> 00:05:17,070
And I think that this is an important aspect of kill for because we'll be working with strings quite

52
00:05:17,070 --> 00:05:24,240
a lot and mostly just to output messages for testing purposes and notification purposes.

53
00:05:24,510 --> 00:05:30,630
Let's have a look at how we can use strings in a similar fashion.

54
00:05:30,630 --> 00:05:42,270
So let's create a string called greeting and the value of this string has to be text and in order to

55
00:05:45,030 --> 00:05:54,930
specify text we need to put two quotation marks around it a pair of quotation marks around and the text

56
00:05:54,990 --> 00:06:06,000
in the sketch will be hello and a semicolon string they will call a variable or cause space.

57
00:06:06,060 --> 00:06:17,510
It will put it on text which just cans one one simple spaced symbol and the last string that we want

58
00:06:17,510 --> 00:06:22,680
to use say name will hold.

59
00:06:23,130 --> 00:06:26,420
Will give it the value of both.

60
00:06:26,480 --> 00:06:33,600
So just as we as it was with integers this is the variable and this is the value of doubles this is

61
00:06:33,600 --> 00:06:36,400
the variable and this is value here.

62
00:06:36,630 --> 00:06:38,490
With Strings This is the variable.

63
00:06:38,490 --> 00:06:45,540
This is the value and the value is text and therefore it's in quotation marks.

64
00:06:45,540 --> 00:06:52,110
Now let's see how we can add these three strings together.

65
00:06:53,520 --> 00:06:59,840
We will create a string and call it message.

66
00:07:00,000 --> 00:07:13,340
We won't give it any idea at this stage and he will say yes the polls reclean Plus faith plus the name.

67
00:07:13,480 --> 00:07:17,550
And let's see if we can put this last

68
00:07:20,070 --> 00:07:22,110
message.

69
00:07:22,440 --> 00:07:25,570
All right let's compile that no errors or warnings.

70
00:07:25,590 --> 00:07:33,660
Let's go to the terminal Tauriel three and here we can see Hello space ball.

71
00:07:33,770 --> 00:07:35,190
That's right.

72
00:07:35,210 --> 00:07:38,650
And now it's go back to the code and to finish up.

73
00:07:38,660 --> 00:07:41,760
Let's do something a bit more complicated.

74
00:07:41,870 --> 00:07:51,310
Let's try combining a string variable with our results.

75
00:07:51,350 --> 00:07:57,830
Oh double variables or integer variables to get some sort of message.

76
00:07:57,920 --> 00:07:59,220
So I'll just comment these out.

77
00:07:59,270 --> 00:08:04,610
While we don't need them and instead of message being greeting Plus space placename

78
00:08:07,220 --> 00:08:13,070
we will give the message the following values message equals

79
00:08:16,190 --> 00:08:17,140
value.

80
00:08:17,330 --> 00:08:40,140
All a is call on space and then here will say plus a semicolon and they will go with each compile.

81
00:08:40,160 --> 00:08:42,920
So here we get a warning this is not an era.

82
00:08:42,920 --> 00:08:45,230
It's got a yellow sign me.

83
00:08:45,320 --> 00:08:54,260
It's a warning meaning that a is being converted to a string it's actually an integer but it's being

84
00:08:54,260 --> 00:08:59,970
converted to a string and it's just letting us know that this is happening.

85
00:09:00,020 --> 00:09:02,250
There's no problems with that here.

86
00:09:02,380 --> 00:09:09,170
So just we've compiled that we'll go to the terminal and see what all three gives us a go value of eight

87
00:09:09,270 --> 00:09:11,120
is 10.

88
00:09:11,120 --> 00:09:12,390
All right.

89
00:09:12,860 --> 00:09:26,120
So if we want to get rid of this era we have to convert a to a string ourselves and that is done in

90
00:09:26,120 --> 00:09:31,480
the following way we have to type in a string and put brackets around.

91
00:09:32,510 --> 00:09:39,150
We compile the error disappears and we go back to the terminal.

92
00:09:39,290 --> 00:09:40,820
Same result.

93
00:09:41,660 --> 00:09:50,600
It's not really necessary to do this just for peace of mind if you don't want the message the warning

94
00:09:50,600 --> 00:09:57,300
to come up but otherwise if you find the warning us just a by itself is also good.

95
00:09:57,710 --> 00:10:05,960
So that's basically how you can perform simple operations on variables.

96
00:10:06,020 --> 00:10:10,300
And I hope you enjoyed this tutorial.

97
00:10:10,430 --> 00:10:16,750
More information and tutorials are available on for export on and until next time.

98
00:10:16,790 --> 00:10:17,300
But decoding.
