WEBVTT
1
00:00:07.780 --> 00:00:10.100
Hello this is Carol from for example dot com.

2
00:00:10.120 --> 00:00:16.780
And welcome to the 20:9 tutorial on algorithmic trading for beginners and the previous tutorial we discussed

3
00:00:17.020 --> 00:00:20.750
testing and optimizing our algorithmic trading system.

4
00:00:20.890 --> 00:00:28.210
And in this tutorial we're going to learn how to add a filter to all four X robot in front of you here

5
00:00:28.210 --> 00:00:35.070
you can see the results of our most recent test which we conducted in the previous tutorial.

6
00:00:35.200 --> 00:00:43.900
And as you can see from the chart here our algorithmic trading system did really well the balance on

7
00:00:44.260 --> 00:00:52.290
that count increased from $10000 to just over 17 and a half thousand dollars in a period of six months.

8
00:00:52.480 --> 00:00:59.910
And in that timeframe approximately 130 trades were conducted.

9
00:01:00.400 --> 00:01:08.350
So what we will be trying to do today is improve this outcome by adding a filter and moving average

10
00:01:08.350 --> 00:01:11.250
filter to our trading system.

11
00:01:11.710 --> 00:01:20.160
So let's quickly go back to the algorithmic trading system blueprint and look where we are at now.

12
00:01:20.200 --> 00:01:28.090
So we have successfully implemented the blue bit which is responsible for checking the correct time.

13
00:01:28.090 --> 00:01:32.890
We've implemented the bread bit which is responsible closing any existing orders.

14
00:01:32.890 --> 00:01:40.570
We've done most of the green bit which sends a new orders to the market and all we have to do is implement

15
00:01:40.570 --> 00:01:47.550
these two diamond shapes are here which are in fact the moving average filter.

16
00:01:48.220 --> 00:01:50.740
So what does this look like on the chart.

17
00:01:50.740 --> 00:02:00.460
Well let's quickly add a moving average here we'll use a period of 100 and so there is our moving average

18
00:02:00.550 --> 00:02:08.860
and what a filter will do once it is implemented is it will restrict our algorithmic trading system

19
00:02:09.220 --> 00:02:18.370
to only sending cell orders when the price is above the white line and only sending by orders when the

20
00:02:18.370 --> 00:02:21.300
price is below the white line.

21
00:02:22.060 --> 00:02:24.370
Have a look an example.

22
00:02:24.550 --> 00:02:28.590
So this order for instance over here.

23
00:02:29.260 --> 00:02:36.400
This is a sell order which was opened when the price was below the white line orders like that will

24
00:02:36.400 --> 00:02:44.420
be eliminated from the final algorithmic trading system by the filter in a similar way.

25
00:02:44.440 --> 00:02:49.650
This is a buy order which was opened when the price was above the white line.

26
00:02:49.660 --> 00:02:51.680
This order will also be eliminated.

27
00:02:51.970 --> 00:02:59.230
And as you can see in these two particular cases both of these orders traded a loss on their account.

28
00:02:59.380 --> 00:03:04.960
And so eliminating them is a good thing and that means the filter will improve performance.

29
00:03:04.960 --> 00:03:15.670
However every filter comes with a flip side and it will not only eliminate orders that create losses

30
00:03:15.700 --> 00:03:23.210
but also some orders that create profits like these buy orders over here which are all above which are

31
00:03:23.230 --> 00:03:27.460
all created when the price was above the white line.

32
00:03:27.490 --> 00:03:30.010
All of them will be eliminated eliminated.

33
00:03:30.010 --> 00:03:35.130
So at the end of the day for us it will be a question of balance.

34
00:03:35.140 --> 00:03:41.150
We will have to assess whether the filter eliminates more losses or profits.

35
00:03:41.170 --> 00:03:45.460
And based on that assessment will either choose to keep the filter or discard it.

36
00:03:45.760 --> 00:03:52.100
What we cannot make that call until we've actually implemented the filter and tested our system.

37
00:03:52.180 --> 00:04:01.840
So let's move on to Mitta Ed. And quickly add this filter and I say quickly because it is going to be

38
00:04:01.990 --> 00:04:07.540
very easy to add it won't require much coding at all.

39
00:04:07.540 --> 00:04:08.530
So what are we going to add.

40
00:04:08.530 --> 00:04:17.050
First is an external variable which will be responsible for the period of the moving average thus allowing

41
00:04:17.050 --> 00:04:26.220
the trader to trigger toggle the value or the period of the moving average.

42
00:04:26.590 --> 00:04:27.760
Next we're going to.

43
00:04:27.790 --> 00:04:33.150
So that's a period we're going into gold period and we're going to set it at a default value of 100.

44
00:04:33.170 --> 00:04:41.880
Next we're going to add a variable within which we can store the value of the moving average itself.

45
00:04:41.950 --> 00:04:47.620
So it's going to be a it's going to be a static variable is going to be a normal variable which we will

46
00:04:47.620 --> 00:04:50.800
recalculate on every tick and that's fine.

47
00:04:50.800 --> 00:04:56.710
So I'm just going to add an extra space here to separate this variable from the static variables.

48
00:04:56.860 --> 00:05:04.420
And so how do we calculate the value of the moving average on a given bar.

49
00:05:04.450 --> 00:05:11.890
This is something you chose We haven't discussed this previously in our course and that is because our

50
00:05:11.890 --> 00:05:15.490
course is designed for beginners.

51
00:05:15.490 --> 00:05:24.850
It is a course to get started in them kill for and working with indicators is a bit more of an extensive

52
00:05:24.850 --> 00:05:32.470
topic and it does require a bit more of an advanced level in Q4.

53
00:05:32.490 --> 00:05:40.510
However having said that I will also note that working with the moving average is very simple and I'm

54
00:05:40.510 --> 00:05:45.110
sure you will pick up this code really easily.

55
00:05:45.130 --> 00:05:51.190
So what we need to type in here is the name of the function that calls the returns the value of the

56
00:05:51.190 --> 00:05:58.540
moving beverage and the function is called lowercase and I capital am capital A which stands for indicator

57
00:05:58.840 --> 00:06:02.770
moving average and then we open the brackets.

58
00:06:02.770 --> 00:06:05.330
And here we have to pass quite a few parameters.

59
00:06:05.380 --> 00:06:11.990
So the first parameter is the symbol and we could hard code a used dollar a British Banias dollar here.

60
00:06:12.070 --> 00:06:20.740
But we want to make our trading system universal So we want this forex robot to be the users of this

61
00:06:20.740 --> 00:06:24.950
4 x robot to be able to attach it to any chart they like.

62
00:06:24.970 --> 00:06:30.310
And so that's why here we're going to use the symbol function just as we do in the order send function

63
00:06:30.310 --> 00:06:34.060
when we're creating new market orders.

64
00:06:34.060 --> 00:06:41.160
So the symbol function will return the name of the symbol to which the expert advisers attached.

65
00:06:41.170 --> 00:06:47.940
And then this name of the symbol will be passed onto the item automatically.

66
00:06:47.980 --> 00:06:54.580
So that saves us a lot of work and makes us makes the system universal.

67
00:06:54.580 --> 00:07:02.980
Same thing with the time frame function is asking for the period of the chart on which the expert advises

68
00:07:02.980 --> 00:07:08.440
working on or more specifically where we want to calculate the moving average which is going to pass

69
00:07:09.820 --> 00:07:16.740
on the result of the function called period which will be the timeframe of the current chart.

70
00:07:16.970 --> 00:07:18.960
The next parameter might be a bit confusing.

71
00:07:18.960 --> 00:07:24.290
It is also cold period just like this function which we used here.

72
00:07:24.430 --> 00:07:28.050
But this period implies the period of the moving average.

73
00:07:28.050 --> 00:07:31.950
And we have it here already so it is great to copy that.

74
00:07:32.050 --> 00:07:38.060
Next is the moving average shift which we will set a zero next as a method of the moving average.

75
00:07:38.080 --> 00:07:42.660
And we want to calculate it using the simple moving average method.

76
00:07:42.730 --> 00:07:44.350
And that's why we'll put a zero.

77
00:07:44.500 --> 00:07:48.360
If you'd like more information on which of the values you can set here.

78
00:07:48.670 --> 00:07:51.630
Just go to the reference of this function by clicking one.

79
00:07:51.850 --> 00:07:58.040
And there you will be able to find out how to use other methods of calculation.

80
00:07:58.090 --> 00:08:04.330
Same way we're going to use a 0 for Applied price which means close price and the shift to shift is

81
00:08:05.110 --> 00:08:08.750
an interesting variable and it is one of the more important ones.

82
00:08:08.890 --> 00:08:15.680
They should shift and tells us on which bar we want to calculate the moving average.

83
00:08:15.700 --> 00:08:24.190
And as I recall I can recall here within the square brackets we were specifying which bar we want to

84
00:08:24.190 --> 00:08:28.420
calculate or for for which bar we went to retrieve the open price.

85
00:08:28.780 --> 00:08:35.950
And 0 was the current bar one was the bar to the left of the current bar two was the bar to the left

86
00:08:35.950 --> 00:08:37.560
of that bar and so on.

87
00:08:37.570 --> 00:08:45.460
So the bars are numbered from zero onwards from right to left and we want to calculate the moving average

88
00:08:45.460 --> 00:08:48.780
on bar number 1.

89
00:08:48.970 --> 00:08:51.790
So there we go that's our calculation of the moving average.

90
00:08:51.790 --> 00:09:00.220
Now we just need to add the actual checks and if we go back to our presentation or here we will see

91
00:09:00.220 --> 00:09:04.930
that we need to check the value of the moving average after we've checked the price.

92
00:09:04.990 --> 00:09:07.240
But before we've sent the orders.

93
00:09:07.240 --> 00:09:09.330
So that's exactly what we'll do.

94
00:09:09.880 --> 00:09:15.320
We checked the price here and we send the order here so this is where we need to check the main.

95
00:09:15.520 --> 00:09:18.280
And same thing here.

96
00:09:18.340 --> 00:09:21.130
So we're just in implemented right away.

97
00:09:21.130 --> 00:09:26.510
So we want to see if the close price for by quarter is less than a.

98
00:09:26.680 --> 00:09:33.400
And as you can see here I am using close one because I want to compare like for like I want to compare

99
00:09:33.400 --> 00:09:38.480
the close by Rice on the first bar and the moving average on the first bar.

100
00:09:38.710 --> 00:09:48.070
So if close one is less than M-I then I will send a byte order with a sell order.

101
00:09:48.070 --> 00:09:54.800
We have to do something very similar but we will put an opposite condition close.

102
00:09:54.880 --> 00:09:57.620
Price has to be above him.

103
00:09:58.300 --> 00:10:04.240
So move this a bit close the bracket and there we go.

104
00:10:04.240 --> 00:10:06.110
We should be done.

105
00:10:06.130 --> 00:10:13.270
The only thing is before I have saved this I'm actually going to save this as Version 2.

106
00:10:13.270 --> 00:10:23.920
So what that will let us do is allow us to have two different versions of a simple system so simple

107
00:10:23.920 --> 00:10:30.360
system but just a normal one won't have the filter or simple system version 2.0.

108
00:10:30.520 --> 00:10:36.280
We'll have the moving average filter in it and therefore we will be able to further compare them and

109
00:10:36.280 --> 00:10:43.290
we will be able to use the one we want to use so we won't actually lose the original edition of the

110
00:10:44.320 --> 00:10:46.970
algorithmic trading system so I'm going to compile that now.

111
00:10:46.990 --> 00:10:49.510
No errors or warnings.

112
00:10:49.510 --> 00:10:53.690
Let's quickly go to the terminal and see how this works.

113
00:10:53.920 --> 00:11:00.620
So there you go simple system we're going to change to simple system version 2.0.

114
00:11:01.030 --> 00:11:06.900
Well we're fine with these 10 140 whatever primers are here.

115
00:11:06.910 --> 00:11:15.340
As you can see there's a new period a new period variable which has appeared and that controls the period

116
00:11:15.340 --> 00:11:16.300
of the moving average.

117
00:11:16.300 --> 00:11:21.690
So let's just quickly launch that in visual mode so we can see how the filter works.

118
00:11:21.690 --> 00:11:23.480
I will zoom out.

119
00:11:23.950 --> 00:11:31.720
Change the color of the filter and I will switch the grid off.

120
00:11:31.840 --> 00:11:38.470
So as you can see here above the white line we only have red orange meaning cell and below the white

121
00:11:38.470 --> 00:11:38.770
line.

122
00:11:38.770 --> 00:11:40.960
We only have by orders.

123
00:11:41.200 --> 00:11:45.940
And so every buy order starts below the white line which is correct.

124
00:11:46.150 --> 00:11:51.400
And so that means the filter is working well and we have achieved what we wanted to achieve.

125
00:11:51.400 --> 00:12:02.300
So that's the end of as programming expert advisor or algorithmic trading system and in the next to

126
00:12:02.300 --> 00:12:09.050
Tauriel we're actually going to compare the performance before of the system before and after we added

127
00:12:09.050 --> 00:12:16.820
the filter and we'll see how we can do some simple optimizations around that and maybe if we can make

128
00:12:16.820 --> 00:12:21.160
our own rhythmic train system work better with the filter.

129
00:12:21.530 --> 00:12:23.430
If not we'll have to discard it.

130
00:12:23.720 --> 00:12:30.060
And I hope to see you at the next session which is promising to be really fun.

131
00:12:30.110 --> 00:12:31.880
And until then happy coding.
