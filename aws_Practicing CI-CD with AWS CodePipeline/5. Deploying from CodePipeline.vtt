WEBVTT
1
00:00:00.940 --> 00:00:04.940
It's rare in the software industry to get things right on the first try,

2
00:00:04.940 --> 00:00:09.910
and if I ever do, then I immediately suspect that I just forgot something.

3
00:00:09.910 --> 00:00:13.980
So it's good to know that you can easily modify your pipeline and

4
00:00:13.980 --> 00:00:17.140
add stages and actions whenever you need to.

5
00:00:17.140 --> 00:00:17.910
In this video,

6
00:00:17.910 --> 00:00:22.740
we're going to add a new stage and a deploy action to our pipeline.

7
00:00:22.740 --> 00:00:24.160
First we'll add the new stage.

8
00:00:24.160 --> 00:00:28.080
Go to the CodePipeline dashboard and then select the

9
00:00:28.080 --> 00:00:30.950
hbfl pipeline that we created.

10
00:00:30.950 --> 00:00:32.510
Now click the Edit button.

11
00:00:32.510 --> 00:00:36.640
We'll want to add the deploy stage after our build stage,

12
00:00:36.640 --> 00:00:39.770
so click the Add stage button below it.

13
00:00:39.770 --> 00:00:45.140
Named the stage deploy, then select Add stage.

14
00:00:45.140 --> 00:00:47.350
Now our new stage has been added,

15
00:00:47.350 --> 00:00:52.310
and you can even see that you can add more if you wanted to.

16
00:00:52.310 --> 00:00:57.330
Remember the maximum number of stages you can have in a pipeline is 10,

17
00:00:57.330 --> 00:01:00.340
so you can only add up to that amount.

18
00:01:00.340 --> 00:01:03.400
The stage we just added is already in edit mode.

19
00:01:03.400 --> 00:01:07.860
You can see that it differs from the other stages because it has these Cancel,

20
00:01:07.860 --> 00:01:09.490
Delete, and Done buttons.

21
00:01:09.490 --> 00:01:12.290
We'll need to add an action group first.

22
00:01:12.290 --> 00:01:15.930
This is just a collection of actions that run in parallel.

23
00:01:15.930 --> 00:01:18.390
If you don't want your actions to run in parallel,

24
00:01:18.390 --> 00:01:21.840
you can just put them all in different action groups.

25
00:01:21.840 --> 00:01:23.800
Click the Add action group button,

26
00:01:23.800 --> 00:01:27.940
and it'll prompt you to create the first action for that group.

27
00:01:27.940 --> 00:01:29.830
First, give it the name Deploy.

28
00:01:29.830 --> 00:01:32.200
In the Action provider drop‑down,

29
00:01:32.200 --> 00:01:36.840
scroll to the Deploy section and select Elastic Beanstalk.

30
00:01:36.840 --> 00:01:41.740
The region will be automatically set to whichever region you're currently in.

31
00:01:41.740 --> 00:01:44.380
Next, we'll define the input artifact.

32
00:01:44.380 --> 00:01:48.040
This is what the deploy action will attempt to deploy.

33
00:01:48.040 --> 00:01:50.710
Click the drop‑down, and you'll have two options.

34
00:01:50.710 --> 00:01:52.910
The SourceArtifact is our source code,

35
00:01:52.910 --> 00:01:56.840
and the BuildArtifact is what our build action outputs.

36
00:01:56.840 --> 00:01:59.770
We want to deploy the artifact that has dependencies

37
00:01:59.770 --> 00:02:05.000
installed and the built web assets, so select the BuildArtifact.

38
00:02:05.000 --> 00:02:08.320
Now we need to select the EB application to deploy to.

39
00:02:08.320 --> 00:02:11.000
We already created one earlier in the course,

40
00:02:11.000 --> 00:02:14.940
so click in the input box and select hbfl.

41
00:02:14.940 --> 00:02:20.050
Next, select the prod environment in the next input box. And that's it,

42
00:02:20.050 --> 00:02:22.420
so click the Done button.

43
00:02:22.420 --> 00:02:27.140
Now you can click Done on the deploy stage and review your pipeline.

44
00:02:27.140 --> 00:02:28.800
If everything looks good,

45
00:02:28.800 --> 00:02:34.040
scroll to the top and click the Save button and then Save again.

46
00:02:34.040 --> 00:02:36.480
Whenever you make changes to your pipeline,

47
00:02:36.480 --> 00:02:40.050
it won't take effect for any running executions,

48
00:02:40.050 --> 00:02:42.940
and it doesn't automatically start again.

49
00:02:42.940 --> 00:02:45.810
We need to manually start a new execution,

50
00:02:45.810 --> 00:02:49.840
and we can do that by clicking this Release change button.

51
00:02:49.840 --> 00:02:54.050
This will start an execution and pull the most recent source

52
00:02:54.050 --> 00:02:58.030
from source control to run the pipeline, so click Release.

53
00:02:58.030 --> 00:03:02.180
The pipeline will execute again, going through the source action,

54
00:03:02.180 --> 00:03:06.660
the build action, and then finally deploying to Elastic Beanstalk.

55
00:03:06.660 --> 00:03:11.440
After a few minutes, the pipeline should finish executing successfully.

56
00:03:11.440 --> 00:03:15.160
I'm skipping ahead the video here, and if you click this link,

57
00:03:15.160 --> 00:03:18.640
it'll take you to the application in Elastic Beanstalk.

58
00:03:18.640 --> 00:03:20.400
Select the prod environment,

59
00:03:20.400 --> 00:03:26.640
and then this URL link here, and the hbfl app will open in a new tab.

60
00:03:26.640 --> 00:03:30.410
I want to pause right here because this is just so cool.

61
00:03:30.410 --> 00:03:34.660
So we built out this pipeline to build and deploy our application,

62
00:03:34.660 --> 00:03:36.580
and it's connected to source control.

63
00:03:36.580 --> 00:03:42.410
So every time you push new code to the repo, it's going to build it and then

64
00:03:42.410 --> 00:03:46.110
deploy it to production without any human intervention.

65
00:03:46.110 --> 00:03:48.440
That's pretty amazing.

66
00:03:48.440 --> 00:03:50.430
Now that we have a robust pipeline,

67
00:03:50.430 --> 00:03:53.690
let's talk a little more about pipeline executions.

68
00:03:53.690 --> 00:03:59.820
Whenever a pipeline is executed, a unique ID is generated for that execution.

69
00:03:59.820 --> 00:04:03.190
The execution will continue through each stage and action

70
00:04:03.190 --> 00:04:07.440
in your pipeline until it succeeds, fails, or is stopped.

71
00:04:07.440 --> 00:04:10.710
A pipeline can be running multiple executions at one time,

72
00:04:10.710 --> 00:04:14.570
but stages can only run one execution at a time.

73
00:04:14.570 --> 00:04:17.760
If there are two pipeline executions running back to back,

74
00:04:17.760 --> 00:04:22.640
the second one will have to wait at a stage until the first has completed it,

75
00:04:22.640 --> 00:04:26.740
since an execution will lock a stage when it enters it.

76
00:04:26.740 --> 00:04:30.630
If a pipeline execution fails, you can retry it.

77
00:04:30.630 --> 00:04:33.850
There's also a pipeline execution state called superseded,

78
00:04:33.850 --> 00:04:38.110
which means a later pipeline execution has passed it.

79
00:04:38.110 --> 00:04:41.940
This usually happens when a pipeline execution is waiting before a locked

80
00:04:41.940 --> 00:04:45.770
stage, and a subsequent execution catches up to it.

81
00:04:45.770 --> 00:04:50.790
The previous execution will be superseded and not execute any further.

82
00:04:50.790 --> 00:04:54.160
The execution that supersedes the first one will

83
00:04:54.160 --> 00:04:57.340
continue once the stage is unlocked.

84
00:04:57.340 --> 00:04:58.090
Also,

85
00:04:58.090 --> 00:05:02.620
CodePipeline recently released a feature which allows you to stop a pipeline.

86
00:05:02.620 --> 00:05:05.740
The button is at the top right of the pipeline overview and lets

87
00:05:05.740 --> 00:05:08.410
you select which execution you want to stop.

88
00:05:08.410 --> 00:05:13.540
Your options for stopping are to stop and wait or stop and abandon.

89
00:05:13.540 --> 00:05:17.760
Stop and wait means the pipeline will enter the stopping state and

90
00:05:17.760 --> 00:05:21.660
wait for any in‑progress actions to finish executing.

91
00:05:21.660 --> 00:05:26.200
Then the pipeline execution will stop. Stop and abandon changes

92
00:05:26.200 --> 00:05:30.280
the pipeline execution into stopping state and then abandons

93
00:05:30.280 --> 00:05:39.000
any in‑progress action executions. Depending on your objective, it's usually better to select Stop and wait here.

