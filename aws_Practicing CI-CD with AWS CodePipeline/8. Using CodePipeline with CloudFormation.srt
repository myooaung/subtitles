1
00:00:00,940 --> 00:00:04,750
I mentioned earlier that I'm a huge fan of infrastructure as code,

2
00:00:04,750 --> 00:00:06,590
but so far in this course,

3
00:00:06,590 --> 00:00:10,610
we've mostly been setting up CodePipeline using the AWS console.

4
00:00:10,610 --> 00:00:12,820
While this is a good skill to have,

5
00:00:12,820 --> 00:00:14,910
in this video we're going to look at setting up

6
00:00:14,910 --> 00:00:18,080
CodePipeline using a CloudFormation template.

7
00:00:18,080 --> 00:00:19,600
As a refresher,

8
00:00:19,600 --> 00:00:22,860
using CloudFormation is a best practice for a few reasons

9
00:00:22,860 --> 00:00:25,530
It's easy to reproduce your infrastructure.

10
00:00:25,530 --> 00:00:27,700
This comes in handy if you have to move regions,

11
00:00:27,700 --> 00:00:31,740
move accounts, or recover after some catastrophic failure.

12
00:00:31,740 --> 00:00:34,260
You're also able to track changes as they occur,

13
00:00:34,260 --> 00:00:37,870
as long as you're CloudFormation templates are stored in source control.

14
00:00:37,870 --> 00:00:42,000
And finally, you can easily tear down resources all at once.

15
00:00:42,000 --> 00:00:44,840
This is very handy when it's needed.

16
00:00:44,840 --> 00:00:48,130
I've already created a CloudFormation template that recreates

17
00:00:48,130 --> 00:00:51,040
the pipeline that we created in this course.

18
00:00:51,040 --> 00:00:53,590
Templates can be pretty arduous to create,

19
00:00:53,590 --> 00:00:57,330
so I just wanted to take a look at a few of the more unique

20
00:00:57,330 --> 00:01:00,850
aspects of a completed pipeline template.

21
00:01:00,850 --> 00:01:05,190
The template is in the demo code in the .aws folder with

22
00:01:05,190 --> 00:01:08,030
the file name hbfl‑pipeline.template.

23
00:01:08,030 --> 00:01:12,880
On line 12 is the actual pipeline resource declaration.

24
00:01:12,880 --> 00:01:17,300
You'll see on line 17 you have to explicitly declare the

25
00:01:17,300 --> 00:01:21,840
artifact store with CloudFormation, something the wizard did for you.

26
00:01:21,840 --> 00:01:26,230
On line 20 is when the stage and action declaration begins.

27
00:01:26,230 --> 00:01:29,240
This is the real meat of the pipeline resource.

28
00:01:29,240 --> 00:01:31,840
Each stage has one or more actions.

29
00:01:31,840 --> 00:01:35,070
Each action has parameters about the type of action,

30
00:01:35,070 --> 00:01:38,690
any artifacts, the action configuration,

31
00:01:38,690 --> 00:01:40,940
and which order it should run in.

32
00:01:40,940 --> 00:01:45,900
If you want to have two actions run in parallel, give them the same run order.

33
00:01:45,900 --> 00:01:51,340
Otherwise, to run serially, just have different run orders in ascending order.

34
00:01:51,340 --> 00:01:53,720
And there's plenty more in this template,

35
00:01:53,720 --> 00:01:57,340
but I think that's all we need to look at for now.

36
00:01:57,340 --> 00:02:01,940
You can run this template in your command line by running this command.

37
00:02:01,940 --> 00:02:05,060
This will create a brand‑new pipeline that will pull from

38
00:02:05,060 --> 00:02:09,950
your hbfl source control repository and deploy to your

39
00:02:09,950 --> 00:02:12,940
existing Elastic Beanstalk application.

40
00:02:12,940 --> 00:02:16,560
When the CloudFormation template is done creating, the pipeline will

41
00:02:16,560 --> 00:02:20,040
execute automatically for the first time on its own,

42
00:02:20,040 --> 00:02:24,030
so you can check to see that everything is working. And that's really

43
00:02:24,030 --> 00:02:27,540
about it for CloudFormation. Feel free to use this template to create

44
00:02:27,540 --> 00:02:31,540
pipelines for projects at work or just for fun.

45
00:02:31,540 --> 00:02:35,020
Now let's take a quick look at what we went over in this module.

46
00:02:35,020 --> 00:02:39,570
We started by reviewing Emma's story and the HBFL project.

47
00:02:39,570 --> 00:02:42,750
Then we took a bird's eye view of CodePipeline, touching

48
00:02:42,750 --> 00:02:46,230
on pipelines, stages, and actions.

49
00:02:46,230 --> 00:02:51,040
Next we set up our CodeCommit repository and our first pipeline to pull from it.

50
00:02:51,040 --> 00:02:54,990
Then we added some actions such as deploy and test to

51
00:02:54,990 --> 00:02:58,010
make our pipeline even more useful.

52
00:02:58,010 --> 00:03:01,270
Adding a manual approval action before deploying is

53
00:03:01,270 --> 00:03:03,470
another good idea that we implemented.

54
00:03:03,470 --> 00:03:06,700
And finally, I went through a CloudFormation template that

55
00:03:06,700 --> 00:03:10,770
recreates everything we built by hand in this module.

56
00:03:10,770 --> 00:03:11,780
In the next module,

57
00:03:11,780 --> 00:03:14,920
we're going to build on the foundation we developed and extend our

58
00:03:14,920 --> 00:03:18,260
pipeline by adding Lambda invocation actions,

59
00:03:18,260 --> 00:03:24,000
CloudWatch Events, and notifications. See you in the next module.

