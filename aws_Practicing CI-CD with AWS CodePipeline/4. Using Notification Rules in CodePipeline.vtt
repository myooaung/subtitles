WEBVTT
1
00:00:00.940 --> 00:00:06.380
Honestly, CloudWatch Events are nice, but wasn't that a lot to set up?

2
00:00:06.380 --> 00:00:09.630
Shouldn't we easily be able to set up notifications for

3
00:00:09.630 --> 00:00:14.370
something like a pipeline failure, something I mentioned in the last video,

4
00:00:14.370 --> 00:00:16.840
which is absolutely inevitable?

5
00:00:16.840 --> 00:00:17.480
Well,

6
00:00:17.480 --> 00:00:20.410
CodePipeline recently released a new feature that

7
00:00:20.410 --> 00:00:25.040
does make it significantly easier, with notification rules.

8
00:00:25.040 --> 00:00:29.790
CodePipeline notification rules are similar to the CloudWatch Event rules.

9
00:00:29.790 --> 00:00:32.870
You can create a notification rule that can tell you when an

10
00:00:32.870 --> 00:00:36.930
action, stage, or pipeline execution has succeeded,

11
00:00:36.930 --> 00:00:39.700
failed, started, or was canceled.

12
00:00:39.700 --> 00:00:43.840
You can also be notified when a stage or pipeline execution has been

13
00:00:43.840 --> 00:00:48.940
resumed, or when a pipeline execution has been superseded.

14
00:00:48.940 --> 00:00:52.990
And there's also notification rules for manual approvals if they succeed,

15
00:00:52.990 --> 00:00:56.340
fail, or that an approval is needed.

16
00:00:56.340 --> 00:00:59.610
Notification rules are a little more restrictive than CloudWatch

17
00:00:59.610 --> 00:01:03.430
Events and only allow you to be notified through SNS.

18
00:01:03.430 --> 00:01:08.120
But still, that's what we've been using anyways, and so that's perfect for us.

19
00:01:08.120 --> 00:01:09.880
Let's take a look at how this works.

20
00:01:09.880 --> 00:01:14.360
Go to the CodePipeline dashboard and select the hbfl pipeline.

21
00:01:14.360 --> 00:01:18.040
At the top of the pipeline is a notifications drop‑down.

22
00:01:18.040 --> 00:01:23.130
Click that, and you can manage any existing notification rules,

23
00:01:23.130 --> 00:01:26.870
of which we have none yet, or you can create a new one,

24
00:01:26.870 --> 00:01:31.640
which is what we want to do, so click Create notification rule.

25
00:01:31.640 --> 00:01:35.540
We'll name this one hbfl‑failure.

26
00:01:35.540 --> 00:01:39.650
Now we can't really customize what is sent to our SNS topic

27
00:01:39.650 --> 00:01:41.550
like we could with CloudWatch Events,

28
00:01:41.550 --> 00:01:44.110
but I don't want to overload your phone with

29
00:01:44.110 --> 00:01:48.530
unnecessary JSON, so select Basic here. Now,

30
00:01:48.530 --> 00:01:52.900
under Events that trigger notifications, you can select failed for

31
00:01:52.900 --> 00:01:56.640
either action, stage, or pipeline execution.

32
00:01:56.640 --> 00:02:01.250
I usually like to do action because it is the lowest level,

33
00:02:01.250 --> 00:02:06.240
and I feel like it sends the notification a little sooner than the others.

34
00:02:06.240 --> 00:02:09.200
Don't select more than one failed option here,

35
00:02:09.200 --> 00:02:15.310
or you'll get multiple texts when a failure happens. In the Targets input,

36
00:02:15.310 --> 00:02:17.190
there's a little added complexity.

37
00:02:17.190 --> 00:02:22.840
We have two options, send to an existing SNS topic or create a new one.

38
00:02:22.840 --> 00:02:25.430
If we use an existing SNS topic,

39
00:02:25.430 --> 00:02:29.770
we have to modify the access policy of the topic to allow

40
00:02:29.770 --> 00:02:32.140
the CodePipeline notification service,

41
00:02:32.140 --> 00:02:34.960
which is different from the approval service,

42
00:02:34.960 --> 00:02:38.040
to send stuff to the SNS topic.

43
00:02:38.040 --> 00:02:39.790
This is a little much for this demo,

44
00:02:39.790 --> 00:02:45.040
so let's just create a new topic, and you can add your phone number later.

45
00:02:45.040 --> 00:02:49.490
Click the Create SNS topic, and add hbfl to the end

46
00:02:49.490 --> 00:02:52.700
of the name. Then click Submit.

47
00:02:52.700 --> 00:02:56.740
Now the notification rule is configured, so click Submit again.

48
00:02:56.740 --> 00:02:59.000
Go back to your pipeline with this link.

49
00:02:59.000 --> 00:03:00.950
If you want to fully test this out,

50
00:03:00.950 --> 00:03:04.050
go to SNS and add a subscription to your phone number, and then

51
00:03:04.050 --> 00:03:06.630
kick off another execution of your pipeline.

52
00:03:06.630 --> 00:03:10.230
But now you have a notification rule all set up to let

53
00:03:10.230 --> 00:03:12.940
you know when your pipeline fails.

54
00:03:12.940 --> 00:03:16.200
Let's take a look back at what we covered in this module.

55
00:03:16.200 --> 00:03:19.800
We first looked at how we could utilize Lambda functions to do

56
00:03:19.800 --> 00:03:24.150
almost anything with CodePipeline. Next we enabled and disabled

57
00:03:24.150 --> 00:03:27.110
stage transitions in our pipeline.

58
00:03:27.110 --> 00:03:32.040
Then we configured a CloudWatch event to notify us when our pipeline fails.

59
00:03:32.040 --> 00:03:36.670
And finally, we set up a notification rule that is considerably easier to

60
00:03:36.670 --> 00:03:41.540
configure than a CloudWatch Event but with less flexibility.

61
00:03:41.540 --> 00:03:46.580
And that's the end of Practicing CI/CD with AWS CodePipeline.

62
00:03:46.580 --> 00:03:48.740
My name, again, is Ryan Lewis,

63
00:03:48.740 --> 00:03:52.320
and please let me know if you have any questions or feedback in the comments

64
00:03:52.320 --> 00:03:58.000
section, and thank you so much for watching this course. See you next time.

