1
00:00:00,940 --> 00:00:05,250
While CodePipeline is a tool that brings many other AWS services together,

2
00:00:05,250 --> 00:00:09,280
it also has some internal structures that are important to learn.

3
00:00:09,280 --> 00:00:12,890
How these structures work, the different configuration options,

4
00:00:12,890 --> 00:00:15,740
and how they interact is essential to understand to

5
00:00:15,740 --> 00:00:17,500
make the most of CodePipeline.

6
00:00:17,500 --> 00:00:21,020
Let's start by looking at CodePipeline as a whole.

7
00:00:21,020 --> 00:00:26,640
Each individual instance of CodePipeline is itself called a pipeline.

8
00:00:26,640 --> 00:00:30,410
This contains all the configuration options for that pipeline,

9
00:00:30,410 --> 00:00:36,680
as well as a minimum of 2 to a maximum of 10 stages in each pipeline,

10
00:00:36,680 --> 00:00:40,200
and inside those stages, 1 to 50 actions.

11
00:00:40,200 --> 00:00:43,740
We'll go into each of these in more detail in a bit.

12
00:00:43,740 --> 00:00:47,750
A pipeline is able to carry a type of state between each action

13
00:00:47,750 --> 00:00:51,770
and stage by using input and output artifacts.

14
00:00:51,770 --> 00:00:55,680
These artifacts are just files, whether it's your input source code,

15
00:00:55,680 --> 00:01:00,140
pipeline status, files, or a build application binary.

16
00:01:00,140 --> 00:01:03,140
They are stored in an S3 bucket.

17
00:01:03,140 --> 00:01:07,640
This is the main way your actions will interact with each other in CodePipeline.

18
00:01:07,640 --> 00:01:12,410
Any input or output artifacts are defined in the action itself and

19
00:01:12,410 --> 00:01:15,350
are distinguished by a unique identifier name.

20
00:01:15,350 --> 00:01:19,760
If you need to input an artifact that was output from a previous action,

21
00:01:19,760 --> 00:01:23,890
you only need to reference it by the name as an input artifact,

22
00:01:23,890 --> 00:01:28,040
and CodePipeline will retrieve it from the pipeline S3 bucket.

23
00:01:28,040 --> 00:01:31,820
Now let's take a deeper look at the configuration options for a pipeline.

24
00:01:31,820 --> 00:01:35,020
Pipelines need a name to identify themselves.

25
00:01:35,020 --> 00:01:39,040
These only need to be unique in the same region of your account.

26
00:01:39,040 --> 00:01:41,280
A pipeline will need a service role,

27
00:01:41,280 --> 00:01:44,250
which will give it access to things like Lambda,

28
00:01:44,250 --> 00:01:49,740
S3, CodeCommit, and the many other resources that CodePipeline interacts with.

29
00:01:49,740 --> 00:01:53,940
An S3 bucket will need to be created or designated to store the

30
00:01:53,940 --> 00:01:58,540
input/output artifacts used and created by the pipeline.

31
00:01:58,540 --> 00:01:59,120
Finally,

32
00:01:59,120 --> 00:02:01,780
you can designate your own KMS encryption key for

33
00:02:01,780 --> 00:02:04,100
the artifacts in the S3 bucket,

34
00:02:04,100 --> 00:02:08,040
or you could just use the default AWS encryption key.

35
00:02:08,040 --> 00:02:09,930
Besides these configuration options,

36
00:02:09,930 --> 00:02:14,940
the only other thing a pipeline contains is a number of stages.

37
00:02:14,940 --> 00:02:16,390
As I mentioned earlier,

38
00:02:16,390 --> 00:02:23,040
a pipeline must have at least two stages and can have no more than 10 stages.

39
00:02:23,040 --> 00:02:26,140
A stage is really just a collection of actions.

40
00:02:26,140 --> 00:02:29,240
You can use them to organize and isolate different types of

41
00:02:29,240 --> 00:02:32,950
actions according to whatever criteria you want.

42
00:02:32,950 --> 00:02:36,270
One of the most basic examples is to have a source stage,

43
00:02:36,270 --> 00:02:39,210
which contains an action that pulls code from source

44
00:02:39,210 --> 00:02:42,160
control and outputs a source code artifact,

45
00:02:42,160 --> 00:02:43,570
and a build stage,

46
00:02:43,570 --> 00:02:47,140
which contains a few actions which take that source code

47
00:02:47,140 --> 00:02:50,140
artifact and runs some build commands on it.

48
00:02:50,140 --> 00:02:54,940
Stages are yours to use to structure your pipeline as you want.

49
00:02:54,940 --> 00:02:59,320
The only real requirement is that the first stage must contain

50
00:02:59,320 --> 00:03:03,440
one or more source actions and nothing more.

51
00:03:03,440 --> 00:03:05,130
Also, in my experience,

52
00:03:05,130 --> 00:03:08,890
I've noticed that the transitions between stages does add a

53
00:03:08,890 --> 00:03:11,210
little bit of latency to your pipeline.

54
00:03:11,210 --> 00:03:12,030
Not too much,

55
00:03:12,030 --> 00:03:14,920
but I've noticed it's enough to where I've started

56
00:03:14,920 --> 00:03:18,320
using stages very conservatively.

57
00:03:18,320 --> 00:03:24,040
In each stage is at least one action, with a maximum of 50 actions allowed.

58
00:03:24,040 --> 00:03:27,500
An action is where the magic of a pipeline happens.

59
00:03:27,500 --> 00:03:29,880
There are a few different types of actions,

60
00:03:29,880 --> 00:03:32,570
and each one performs some type of function.

61
00:03:32,570 --> 00:03:36,840
Let's go through each available action type in CodePipeline.

62
00:03:36,840 --> 00:03:39,260
The first is the source action type.

63
00:03:39,260 --> 00:03:42,860
This action type can only appear in the first stage and pulls

64
00:03:42,860 --> 00:03:45,830
in source code from one of these providers.

65
00:03:45,830 --> 00:03:48,060
The next action type is the build type.

66
00:03:48,060 --> 00:03:52,090
These actions run a job on one of the available build providers.

67
00:03:52,090 --> 00:03:52,590
Typically,

68
00:03:52,590 --> 00:03:55,750
this is where you would build or compile the code for your

69
00:03:55,750 --> 00:03:59,850
application. If needed, you can also have some arbitrary

70
00:03:59,850 --> 00:04:02,850
code run on a CodeBuild job, say,

71
00:04:02,850 --> 00:04:06,460
if you wanted to run some commands using the AWS CLI,

72
00:04:06,460 --> 00:04:07,740
for example.

73
00:04:07,740 --> 00:04:11,950
An important part of automated deployment is automated testing,

74
00:04:11,950 --> 00:04:16,840
and the test action type is how you can implement that in your pipeline.

75
00:04:16,840 --> 00:04:20,070
There are many different providers for the test action type,

76
00:04:20,070 --> 00:04:25,840
including various third parties, and also just using CodeBuild to run your tests.

77
00:04:25,840 --> 00:04:28,200
Typically, towards the end of your pipeline,

78
00:04:28,200 --> 00:04:31,530
you'll probably want to deploy your code, so you can use the

79
00:04:31,530 --> 00:04:34,540
deploy action type to perform that role.

80
00:04:34,540 --> 00:04:38,040
There are many different providers for deploying your application,

81
00:04:38,040 --> 00:04:41,800
including popular AWS services like CodeDeploy,

82
00:04:41,800 --> 00:04:44,740
ECS, and Elastic Beanstalk.

83
00:04:44,740 --> 00:04:47,880
And there are two more action types you may find useful.

84
00:04:47,880 --> 00:04:50,240
The first is the approval action type,

85
00:04:50,240 --> 00:04:54,240
which allows you to insert a manual approval into your pipeline.

86
00:04:54,240 --> 00:04:57,140
This can be really helpful when you've got a pipeline that

87
00:04:57,140 --> 00:05:00,960
deploys to production, and you want someone to do a quick manual

88
00:05:00,960 --> 00:05:05,500
smoke test before the new version actually gets deployed. And the

89
00:05:05,500 --> 00:05:06,950
other action type is invoke,

90
00:05:06,950 --> 00:05:12,340
which allows you to invoke a Lambda function at some point in your pipeline.

91
00:05:12,340 --> 00:05:14,800
Finally, let's look at the creation of a pipeline.

92
00:05:14,800 --> 00:05:18,290
You can create a pipeline using the AWS console,

93
00:05:18,290 --> 00:05:22,750
moving through a wizard, or with CloudFormation by executing a template.

94
00:05:22,750 --> 00:05:26,510
I'm a big proponent of having your infrastructure in source control,

95
00:05:26,510 --> 00:05:31,240
so I highly recommend using CloudFormation for your pipeline creation.

96
00:05:31,240 --> 00:05:34,900
Another reason CloudFormation is preferable is that I've often found

97
00:05:34,900 --> 00:05:39,480
myself needing to create similar pipelines in different regions and for

98
00:05:39,480 --> 00:05:43,540
different applications. Using CloudFormation, it's pretty simple to

99
00:05:43,540 --> 00:05:47,310
change a few aspects of the template and then have a completely new

100
00:05:47,310 --> 00:05:49,940
pipeline up and running in minutes.

101
00:05:49,940 --> 00:05:50,690
In this course,

102
00:05:50,690 --> 00:05:57,000
we're going to create pipelines both ways so that you can see when you'd want to use either process.

