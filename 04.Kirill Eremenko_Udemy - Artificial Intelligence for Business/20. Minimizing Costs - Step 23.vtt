WEBVTT

00:00.510 --> 00:02.170
Good first I'm done.

00:02.190 --> 00:08.310
And now let's match the second step making a method that will build a memory and experience replay.

00:08.610 --> 00:11.030
So first of all how are we going to cut that method.

00:11.130 --> 00:17.490
Well let's call this remember because this is about remembering the transitions that happened during

00:17.490 --> 00:24.340
the training to remember and it's going to take three arguments for one's self of course for object.

00:24.450 --> 00:29.580
And then the second one is going to be the transition that you want to remember those that you want

00:29.580 --> 00:37.870
to add to the memory and then the third and last argument as we have to into here is game over.

00:37.980 --> 00:43.680
And that's because you know when a transition happens well the game might be over in which case you

00:43.680 --> 00:49.890
know we have to restart the episode and therefore we have to keep track of that game or as soon as the

00:49.890 --> 00:55.210
transition happens so that we don't have to apply to did gurning step computing to last between the

00:55.210 --> 00:57.750
predictions and the time you get over the whole batch.

00:57.750 --> 00:59.340
No we don't have to do that.

00:59.460 --> 01:05.100
If the game is over you know if the game is over we prefer we start from scratch rather than updating

01:05.100 --> 01:06.560
the weights to improve things.

01:06.780 --> 01:11.850
So we have to keep track of game over and that's our two arguments of this.

01:11.940 --> 01:13.320
Remember method.

01:13.690 --> 01:14.290
OK.

01:14.340 --> 01:22.640
So remember very simply this method will just take as input a transition and will appended to the memory.

01:22.860 --> 01:28.980
But at the same time it will make sure that the memory doesn't have more transitions than the maximum

01:28.980 --> 01:31.350
size of the memory that we set.

01:31.350 --> 01:37.350
So if that's the case if there is basically already one hundred transitions in the memory Well this

01:37.560 --> 01:44.310
method will just lead the first transition and append the new one because it will always append a transition

01:44.310 --> 01:46.340
here only if there is not room left.

01:46.350 --> 01:48.490
It will just delete the first element.

01:48.670 --> 01:49.830
So let's do this.

01:49.830 --> 01:56.850
First we're going to get our memory and to append this transition to our memory Well we're going to

01:56.850 --> 02:03.610
use the pen function which is a ready to use function of the list by instructor and therefore here what

02:03.660 --> 02:10.590
we only have to do is just added that here and then append and in parenthesis of course we're going

02:10.600 --> 02:16.710
to input what we want to append to the memory and that's of course our transitions.

02:16.710 --> 02:21.800
So I'm copying this and I'm just pasting that here in the open function.

02:21.800 --> 02:27.780
But then remember I also told you that each time a transition happens we also want to keep track of

02:27.870 --> 02:35.580
what the game is over and therefore to this memory will not only append this transition but also the

02:35.580 --> 02:37.490
result whether the game is over.

02:37.530 --> 02:44.880
And so at this we will add that into a list of two elements for us first will be this transition and

02:44.880 --> 02:52.230
the second element will be of course this game over a variable which will be true if the game is over.

02:52.580 --> 02:59.460
All right perfect so we appended the useful information for the memory of experience replay.

02:59.460 --> 03:06.090
And now remember we need to check that if indeed we went over the maximum size of the memory.

03:06.270 --> 03:13.000
Well in order to keep the size below or equal to the maximum Well we're going to delete the first element.

03:13.110 --> 03:21.180
And so now we want to check that if the length which is given by the function of our memory is going

03:21.180 --> 03:28.020
to be larger than the maximum size of the memory which is a valuable object that we called itself that

03:28.110 --> 03:30.240
max memory.

03:30.600 --> 03:31.610
Well that's the case.

03:31.620 --> 03:32.810
What are we going to do.

03:33.030 --> 03:42.120
Well we're going to delete that first element of the memory which we can get by getting its first index

03:42.390 --> 03:49.890
which is index 0 and that will deliver you know the first element of the memory if we are in this situation

03:49.890 --> 03:56.910
that indeed after appending this transition to the memory Well it turned out that the men we went over

03:57.180 --> 03:58.830
the maximum size of the memory.

03:58.980 --> 03:59.950
OK.

04:00.300 --> 04:02.950
And how perfect we are done with this method.

04:03.210 --> 04:08.720
So we can move on to the third and final step four which we'll have to follow.

04:08.790 --> 04:15.260
Really did you learn algorithm especially Step 6 here because indeed what will happen here.

04:15.330 --> 04:19.550
From step 1 to step 5 will actually be done in the training.

04:19.680 --> 04:25.150
So what we'll mostly implement in the next and final step is the step six here.

04:25.290 --> 04:25.910
OK.

04:26.040 --> 04:27.200
So we'll get predictions.

04:27.270 --> 04:30.850
We'll get the target and then we'll return the inputs and the targets.

04:31.080 --> 04:33.940
So let's implement this final method in the next tutorial.

04:33.960 --> 04:35.730
And until then enjoy AI.
