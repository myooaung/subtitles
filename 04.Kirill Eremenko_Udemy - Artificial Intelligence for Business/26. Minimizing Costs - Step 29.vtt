WEBVTT

00:00.450 --> 00:01.380
Welcome back.

00:01.400 --> 00:09.350
We are about to start the big loop over all the iterations of one epoch so not to confuse our two loops

00:09.360 --> 00:11.130
actually happening in the training.

00:11.130 --> 00:19.160
First the loop over all the epochs and we'll have 100 or 1000 epochs and then inside each book.

00:19.320 --> 00:25.680
Well we have a second loop which is this loop here which loops over all the iterations during the whole

00:25.680 --> 00:26.270
epoch.

00:26.460 --> 00:32.290
And since an epoch is a five month period and the time step is the minute.

00:32.490 --> 00:37.110
Well that means that he will loop over all the minutes that there are in five months.

00:37.140 --> 00:43.860
That is five months time 30 days times 24 hours time 60 Minutes that the total number of minutes in

00:43.860 --> 00:44.640
five months.

00:44.820 --> 00:52.140
And right now we're about to implement right here what will happen at each iteration that is at each

00:52.230 --> 00:53.400
minute.

00:53.400 --> 00:53.700
All right.

00:53.700 --> 00:57.360
So there was just a week here and now to bring even more clarity.

00:57.480 --> 01:03.070
Well let's highlight again the general framework as you can see here it is again.

01:03.090 --> 01:05.550
So first of all this starts here.

01:05.550 --> 01:11.490
What we've just done in the previous tutorial is about initialising all the variables of both the environment

01:11.760 --> 01:13.390
and the training loop.

01:13.440 --> 01:20.160
And so that's what you always have to do when starting the training loop over the books and then inside

01:20.160 --> 01:24.540
the second loop here iterating on all the minutes in our epoch five month.

01:24.780 --> 01:27.740
Well here are the steps that we're going to do.

01:27.990 --> 01:35.890
So first we're going to play the next action by exploration and this will happen 30 percent of the time.

01:36.030 --> 01:41.110
And then 70 percent of the time well we'll play the next action by inference.

01:41.110 --> 01:48.270
So here it's important to understand that at each iteration either this or this will happen this will

01:48.270 --> 01:49.890
happen 30 percent of the time.

01:49.920 --> 01:53.250
And this will happen 70 percent of the time.

01:53.250 --> 01:59.220
All right then depending on which way we play the action we will update the environment and we will

01:59.220 --> 02:00.580
reach the next date.

02:00.590 --> 02:06.990
So of course for this we will use our environment object where all the tools are already ready for us

02:06.990 --> 02:08.290
to do that easily.

02:08.490 --> 02:13.890
Then we'll store the new transition into memory indeed by updating the environment and reaching the

02:13.890 --> 02:19.650
next date that will give us new elements which will make a transition and we'll add this new transition

02:19.650 --> 02:20.670
into the memory.

02:20.850 --> 02:24.960
Then we'll gather in two separate batches the inputs and the targets.

02:24.990 --> 02:29.090
So there you of course think about what we did in D'Ken class here.

02:29.100 --> 02:32.220
We will use Of course our d'une object.

02:32.460 --> 02:39.510
And then finally last gen step of the general framework is to compute of course to last over the two

02:39.510 --> 02:43.210
whole batches of inputs and toilettes and that's it.

02:43.230 --> 02:45.670
All these will implement the training.

02:45.960 --> 02:52.590
And today we're going to start with this first step which is actually exploration step meaning that

02:52.810 --> 02:58.900
we're going to play some random actions with a 30 percent probability at each time step.

02:58.950 --> 03:02.060
And so now the question is how are we going to model that.

03:02.070 --> 03:05.540
How are we going to say that 30 percent of the time.

03:05.640 --> 03:09.380
Well we want the next action to be played randomly.

03:09.660 --> 03:15.960
Well that's actually a classic trick in programming and especially when doing this takes or all these

03:15.960 --> 03:19.290
days science and AI wrenches you have to know this trick.

03:19.340 --> 03:25.600
We will actually do it twice in the course once here and once in the next part when implementing Tompson

03:25.670 --> 03:26.580
sampling.

03:26.610 --> 03:32.620
So the trick is to return a random number between 0 and 1.

03:32.670 --> 03:38.040
So that's the beginning of the trick and then this random number we're going to say that if this random

03:38.040 --> 03:44.610
number is below 30 percent which is our Epsilon here our exploration parameter.

03:44.640 --> 03:51.150
So if our random number is below 30 percent well in that case we'll play the action randomly.

03:51.150 --> 03:57.940
And on the other hand if this random number is above 30 percent well we'll predict the action.

03:57.960 --> 03:58.860
And why does it work.

03:58.860 --> 04:05.200
Why will this make sure that we play some random action 30 percent of the time and return the prediction

04:05.200 --> 04:06.640
70 percent of the time.

04:06.840 --> 04:11.360
Well that's because you know by drawing a random number between 0 and 1.

04:11.550 --> 04:20.190
Well this random number has 30 percent chance of being lower than 0.3 and 70 percent chance of being

04:20.190 --> 04:25.250
larger than 0.3 and therefore that only means that 30 percent of the time.

04:25.390 --> 04:31.590
Well we will play the actions randomly because 30 percent of the time are drawn random number will be

04:31.590 --> 04:38.670
below 0.3 and 70 percent of the time we will predict the action because 70 percent of the time well

04:38.700 --> 04:42.550
this random number drawn will be over 0.3.

04:42.630 --> 04:43.240
Right.

04:43.260 --> 04:47.300
Pretty simple trick but very effective one and a pretty cool one as well.

04:47.520 --> 04:49.540
So let's do this let's implement this.

04:49.710 --> 04:51.240
And therefore now you know what to do.

04:51.270 --> 04:55.350
Try to actually Buzby you and do it before me and now I'm going to do it.

04:55.350 --> 05:02.930
So if a random number taken between 0 and 1 which we're gonna get thanks to non-Thai and then from then

05:03.070 --> 05:08.680
I'm going to get the random module and then from the random module I'm going to get this time that the

05:08.680 --> 05:10.230
rand int function.

05:10.240 --> 05:16.690
But the rand function because we don't want to extract an integer but a float of course.

05:16.690 --> 05:19.600
And the rand function here will return a float.

05:19.600 --> 05:25.810
And since the arguments of this run function are first the lower bound of the range and second the upper

05:25.810 --> 05:26.740
bound of the range.

05:26.800 --> 05:31.140
And since the default values for these two bounds are respectively 0 and 1.

05:31.300 --> 05:34.850
Well we don't have to input any value of the arguments here.

05:35.020 --> 05:40.450
So therefore this will directly return a random number between 0 and 1.

05:40.450 --> 05:40.720
Right.

05:40.720 --> 05:41.810
Very practical.

05:41.950 --> 05:42.490
Thank you.

05:42.490 --> 05:44.350
Bye by now so what do we have to do.

05:44.350 --> 05:53.370
We said well if this random number is lower than epsilon which is our exploration parameter or point

05:53.360 --> 05:54.090
3.

05:54.280 --> 06:00.430
Well if our random number is below 0.3 then since this will happen 30 percent of the time.

06:00.490 --> 06:07.780
Well in that case what we want to do is play a random action because we want to have 30 percent of exploration.

06:07.780 --> 06:10.630
All right so let's do this let's return this random action.

06:10.630 --> 06:13.760
So first I'm going to introduce the action variable.

06:13.780 --> 06:18.110
It's a new variable and introducing but which will of course be the action.

06:18.250 --> 06:22.060
And then now since I want to return again a random action.

06:22.180 --> 06:28.990
And since the actions are indexes between 0 included and 5 excluded you know the possible actions are

06:29.140 --> 06:31.570
0 1 2 3 or 4.

06:31.750 --> 06:37.900
Well what I'm going to get this time will be still a function by the random Munjal by an umpire first

06:37.900 --> 06:41.680
and you get none by then the random module.

06:41.860 --> 06:50.110
And then this time we're going to get of course the rund int function because we want to get a random

06:50.470 --> 06:55.200
index of the action between zero included and five excluded.

06:55.330 --> 06:57.290
Why do I say included and excluded.

06:57.380 --> 07:03.220
That's because I think like Python you know when we take a range in Python the lower bound is included

07:03.460 --> 07:05.400
and the upper bound is excluded.

07:05.530 --> 07:07.450
And therefore here to get the lower bound.

07:07.450 --> 07:10.180
Well that's 0 that's our first possible actions.

07:10.180 --> 07:12.710
But then to get the upper bound.

07:12.850 --> 07:17.260
Well I'm going to get the number of actions which is a variable here.

07:17.380 --> 07:21.340
Number actions which is 5 as opposed to four.

07:21.460 --> 07:25.020
Because indeed we want the excluded upper bound.

07:25.020 --> 07:25.840
All right perfect.

07:25.850 --> 07:31.620
This will return a random action between 0 included and five excluded.

07:31.680 --> 07:33.640
So that's exactly what we want to do.

07:33.640 --> 07:40.810
But now since we actually play the action well remember the consequence of doing that which we can already

07:40.810 --> 07:41.750
get here.

07:41.940 --> 07:44.570
Anti-HIV course about the energy spent.

07:44.680 --> 07:49.880
Because as soon as the AI AI plays an action well since the action changes the temperature of the server.

07:49.990 --> 07:56.470
Well that means that AI spends some energy and sense that energy spent is the whole point of what we're

07:56.470 --> 07:56.910
doing here.

07:56.910 --> 07:59.640
You know we're trying to minimize that energy.

07:59.770 --> 08:06.570
Well at this point right after playing the action we get that energy spent at that specific time step

08:06.650 --> 08:08.500
in that specific iteration.

08:08.500 --> 08:09.760
So let's get it.

08:09.760 --> 08:13.820
Let's compute it and then we'll add it to the total accumulated we want.

08:14.110 --> 08:16.170
So how are we going to get that energy spent.

08:16.330 --> 08:24.550
Well that depends on the index of the action because if the action is below the direction boundary you

08:24.550 --> 08:31.080
know which is to well that means that the action is either 0 or 1 which means that respectively the

08:31.080 --> 08:37.470
area is either cooling down the server by 3 degrees or cooling down to sort of by 1.5 degrees.

08:37.480 --> 08:43.490
However if the action is larger than the direction boundary Well that means that the action is either

08:43.510 --> 08:52.330
three or four which means respectively that the AI is heating up by 1.5 degrees or heating up by 3 degrees.

08:52.840 --> 08:58.990
And therefore whether we are below the direction boundary or above the direction boundary well the direction

08:58.990 --> 09:01.330
of temperature change is the opposite.

09:01.630 --> 09:06.820
But we need to figure out first the direction of temperature change because indeed then we'll have to

09:06.820 --> 09:10.240
update our environment and to update our environment.

09:10.240 --> 09:14.540
We'll use our update on function from our environment object.

09:14.590 --> 09:19.380
And this a bit of function requires the direction in its argument.

09:19.570 --> 09:21.050
So we have to get the direction.

09:21.160 --> 09:23.100
And that's exactly our next step here.

09:23.440 --> 09:27.440
So let's do this in order to figure out the direction of temperature change.

09:27.460 --> 09:35.560
I'm going to do another condition here which is going to check if the action is lower than the direction

09:35.560 --> 09:46.410
boundary so we can write it this way if the action minus the direction boundary is lower than zero meaning

09:46.440 --> 09:49.650
if the action is lower than the direction boundary.

09:49.680 --> 09:52.100
Meaning if the action is zero or one.

09:52.320 --> 09:55.760
Well in that case what will be the direction.

09:55.800 --> 10:02.210
Of course I'm talking about that direction here in the update function.

10:02.250 --> 10:07.830
You know the update on function takes three arguments and one of them is the direction of temperature

10:07.830 --> 10:08.450
change.

10:08.580 --> 10:15.940
So since right now we're dealing with the training at a specific iteration and then in the general framework.

10:15.990 --> 10:22.500
Well remember we have to update the environment Well of course we're going to update it thanks to this

10:22.620 --> 10:23.900
update of method.

10:24.090 --> 10:29.010
But in order to call this update function well of course we need to get the direction.

10:29.460 --> 10:30.230
OK.

10:30.270 --> 10:36.720
And so if the action is lower than the direction boundary that means that the action is either 0 or

10:36.720 --> 10:42.690
1 which means that AA is going down the server and therefore that means the direction is going to be

10:42.940 --> 10:43.990
minus one.

10:44.040 --> 10:44.370
Right.

10:44.370 --> 10:50.310
Remember the direction is either minus 1 or plus 1 it's a minus 1 when the 8 cools down the server and

10:50.310 --> 10:52.930
it's a plus when when the AI heats up the server.

10:53.210 --> 10:56.090
Ok so perfect we get direction.

10:56.220 --> 11:02.550
And now of course we're going to add here else which is the opposite situation happening.

11:02.550 --> 11:09.840
And so else meaning if this time the action mynahs direction boundary is larger than zero meaning if

11:09.840 --> 11:15.870
the action is larger than the direction boundary Well then the action is either three or four and therefore

11:15.960 --> 11:23.310
the seeding of the server and therefore the direction is this time plus 1 and perfect.

11:23.310 --> 11:30.960
And now you're going to see how we will very easily compute the energy spent by at the specific times

11:30.960 --> 11:38.490
that we're dealing with right now in this while loop because indeed the energy spent by the AI is going

11:38.490 --> 11:47.070
to be the absolute value of the action index that was played you know through this exploration step

11:47.580 --> 11:55.710
minus the direction boundary and of course times that can you guess what it's going to be.

11:55.860 --> 12:01.750
Well it's going to be the temperature step which is 1.5 because indeed we're going to check of course

12:01.750 --> 12:04.350
that this formula is correct.

12:04.520 --> 12:05.930
I'm basing that here.

12:06.220 --> 12:07.030
All right let's try.

12:07.150 --> 12:09.380
Let's say that for example the action is zero.

12:09.520 --> 12:14.890
Well that means that the age is cooling down server by three degrees and therefore according to assumption

12:14.890 --> 12:21.250
to the energy spent will be three joules and therefore let's check that when the action is zero here.

12:21.280 --> 12:22.580
This formula is correct.

12:22.720 --> 12:28.150
Well if the action is zero then since the direction boundaries to that means that the absolute value

12:28.150 --> 12:33.430
of this will be to multiply by the temperature step 1.5 will be three.

12:33.430 --> 12:38.020
So that's is correct then if the action is one that means that the AA is cooling down to sort of by

12:38.170 --> 12:44.800
1.5 degrees which means according to assumption to that energy spent is 1.5 joules and now let's check

12:44.800 --> 12:47.420
that this formula gives us 1.5 joules.

12:47.590 --> 12:53.140
Well if the action is one well one minus the direction boundary which is true gives us minus 1.

12:53.230 --> 12:59.760
So the absolute value is one multiplied by the temperature that is 1.5 per Feg if the action is zero

12:59.950 --> 13:02.220
that means that the aid doesn't transfer any heat.

13:02.290 --> 13:03.990
So the energy spent is zero.

13:04.030 --> 13:05.780
And of course all this is zero.

13:06.010 --> 13:11.970
And then one last test if the action is four which corresponds to the situation where the AI hits observed

13:12.000 --> 13:13.130
by three degrees.

13:13.180 --> 13:18.760
Well four minus two equals two multiplied by 1.5 the temperatures there.

13:18.880 --> 13:25.510
Which gives us three joules and therefore we get the exact formula for the energy spent by the AI at

13:25.510 --> 13:27.150
that specific iteration.

13:27.450 --> 13:28.030
All right.

13:28.060 --> 13:29.140
That was pretty fun.

13:29.140 --> 13:34.750
Not only do we get directly a formula for the energy spent but also we get that direction which we will

13:34.750 --> 13:36.670
need here in this next step.

13:36.670 --> 13:39.890
When I'm dating the environment and reaching the next date.

13:40.050 --> 13:46.510
But before that we'll tackle this next step which is of course an essential step because that's where

13:46.510 --> 13:48.510
we will play the next action.

13:48.520 --> 13:57.490
By inference meaning by predicting the outcome with our brain and this will happen 70 percent of the

13:57.490 --> 14:03.010
time because you will see what will start here and we can already start with this is we'll start with

14:03.150 --> 14:11.260
an else because indeed this as a response to this which corresponds to the other situation where our

14:11.260 --> 14:19.060
random number extracted is not below 30 percent meaning it's going to be above 30 percent which will

14:19.060 --> 14:21.160
happen 70 percent of the time.

14:21.310 --> 14:27.430
And since 70 percent of the time we want to play the next action by inference well that we'll make sure

14:27.610 --> 14:31.810
that 70 percent of the time we will do some exploitation.

14:31.810 --> 14:32.380
All right.

14:32.380 --> 14:33.670
So let's tackle this next.

14:33.700 --> 14:36.390
Doyle again try to do it yourself before me.

14:36.490 --> 14:38.030
And then we'll do it together.

14:38.110 --> 14:39.630
Until then enjoy AI.
