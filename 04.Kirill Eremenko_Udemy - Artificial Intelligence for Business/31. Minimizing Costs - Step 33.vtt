WEBVTT

00:00.240 --> 00:06.750
And here we go for the next and final step of this training implementation and this final step is actually

00:06.840 --> 00:07.770
very easy.

00:07.770 --> 00:10.410
It consists of doing just two things.

00:10.410 --> 00:16.680
First printing the training results for each book so that you know we can follow along the results of

00:16.680 --> 00:23.220
the training and saving them all and saving them all will actually be very quick and easy in just one

00:23.220 --> 00:24.110
line of code.

00:24.120 --> 00:27.220
Thanks to once again the Karris API.

00:27.480 --> 00:32.820
So let's start by printing the training results for each book and the first thing we're going to do

00:32.970 --> 00:37.050
is print a slash an inverse slash and.

00:37.240 --> 00:42.780
And that's just to jump a line after we execute the code because you know we will have all the code

00:42.810 --> 00:48.860
executed here that I want to add some space to separate the code and the training results.

00:49.110 --> 00:56.100
And then now that's when we print the training results and we're going to start by printing very simply

00:56.400 --> 01:00.070
that epoch we're at during the training.

01:00.270 --> 01:07.770
And so to do this well we're going to use the very practical format method which is a new feature of

01:07.770 --> 01:10.650
Biden 3.6 or 3.7.

01:10.680 --> 01:17.130
The format method allows us to print some values of the variables very easily going to show you how

01:17.130 --> 01:18.120
it works.

01:18.120 --> 01:22.070
So first of all we have to put in brackets just like that.

01:22.200 --> 01:29.760
Well the format of the epoch and since the book is going to be a number with three figures because actually

01:30.090 --> 01:34.570
remember that we chose our number of epoch to be 1000.

01:34.710 --> 01:37.870
But I changed my mind very recently.

01:37.890 --> 01:41.320
We're not going to train for 1000 book.

01:41.430 --> 01:48.360
We're going to train it for 100 Epoque and that's because I want to try what we will attain with 100

01:48.360 --> 01:56.190
epochs because indeed on my side I actually run that training with 1000 EPOC but I want to discover

01:56.190 --> 02:02.910
the results with you with 100 bucks that we can both have the surprise of having the final result with

02:02.910 --> 02:08.300
only one hundred epochs and therefore since we're going to have three figures you know because Epatha

02:08.300 --> 02:11.140
are going to go from 1 to 100.

02:11.280 --> 02:17.780
Well here to specify that it's going to be an integer with three figures.

02:17.810 --> 02:24.970
We're going to specify this way with a colon then 0 and then 3 and then D because it's an integer.

02:24.990 --> 02:30.090
All right so for example the epoch number 19 will be 0 19.

02:30.340 --> 02:33.890
OK so it's just for nice format purposes.

02:33.960 --> 02:40.740
And then since you know I want to say that we have reach for example above number 19 out of the total

02:40.740 --> 02:43.000
number of Epoque which is 100.

02:43.170 --> 02:47.020
Well to specify that outer I'm adding this.

02:47.020 --> 02:53.520
And then again I'm going to put in brackets the variable that corresponds to the total number of epoch

02:53.910 --> 02:55.620
which is one hundred.

02:55.800 --> 03:03.180
And so I'm going to add the same format with three figures and an integer and then that's where all

03:03.180 --> 03:04.410
the easiness comes in.

03:04.530 --> 03:11.280
Because in order to specify what is going to be here that is epoche reached and here that is the total

03:11.280 --> 03:12.280
number of epoch.

03:12.450 --> 03:18.820
Well we just need to add a dot format which is a function of byte and 3.

03:19.020 --> 03:25.650
And inside we just have to specify the two variables that correspond respectively to this one and this

03:25.650 --> 03:26.280
one.

03:26.280 --> 03:33.900
So this one is going to be well the epoch you know that our variable here at book and then here for

03:33.900 --> 03:37.620
the second variable we have to specify the one that corresponds to this.

03:37.770 --> 03:41.890
And this is well the total number of epochs.

03:42.030 --> 03:46.280
So I can just copy this and paste it here.

03:46.310 --> 03:47.760
All right so very easy.

03:47.780 --> 03:53.750
See first you put the format you want and then you make sure that this is between quotes and then you

03:53.750 --> 03:59.670
can add some text to give even more clarity and then you just add after the quote.

03:59.840 --> 04:06.710
You add the dot format and then inside some parenthesis the variables that correspond in the same order

04:06.950 --> 04:09.580
to the values you are right.

04:09.830 --> 04:17.720
And so now good exercise for you I would like you to print the total energy spent by the AI onto the

04:17.720 --> 04:20.420
server using this for metric.

04:20.580 --> 04:25.080
So please press both on video and now I'm going to provide a solution.

04:25.100 --> 04:30.810
So first of all we have to present of course in parenthesis and then in quotes double quote.

04:31.020 --> 04:38.430
Well we're going to say the total energy spent by here onto the server.

04:38.480 --> 04:47.000
But we can specify this by saying with an AI because we will also print total energy spent when we have

04:47.000 --> 04:48.020
no AI.

04:48.140 --> 04:49.050
So after this one.

04:49.110 --> 04:55.700
And another print in which we will print the total energy spent with no AI that is by this alternative

04:55.700 --> 05:02.770
system which remember is to servers integrate cooling system that act when there is no AI.

05:02.990 --> 05:06.710
But first let's of course bring that all energy spent with an AI.

05:06.830 --> 05:13.480
And so here again that's when we specify here the format in brackets.

05:13.520 --> 05:19.180
And so now we're about to enter a new format because here we enter an integer.

05:19.310 --> 05:26.920
But now the all energy spent is rather a float because the energy spent for example 1.5 in specific

05:26.920 --> 05:30.490
times that since the temperature step is 1.5.

05:30.650 --> 05:38.750
So it's a float and therefore to specify the format and float well we need to add Karlan then that then

05:38.900 --> 05:41.800
the number of decimals you want to have in that float.

05:41.840 --> 05:46.860
And actually we want some visual clarity so I'll just add zero decimal.

05:46.970 --> 05:51.650
You know the number of figures after the comma and then to specify that it's going to be a float you

05:51.650 --> 05:53.090
just add.

05:53.290 --> 05:53.760
All right.

05:53.780 --> 06:01.890
And then again very easy after the double quote you just add that then format and then in parentheses

06:02.120 --> 06:03.640
the name of your variable.

06:03.650 --> 06:04.970
And now good question.

06:04.970 --> 06:06.590
What is going to be that variable.

06:06.710 --> 06:13.700
Well well well you have to look for it not here in this implementation because indeed we haven't used

06:13.700 --> 06:14.200
it.

06:14.390 --> 06:22.300
And that's because it is hidden in the object of method because remember the update on method.

06:22.520 --> 06:32.300
Well the total energy spent when there is the AI is actually a variable of our environment object.

06:32.300 --> 06:40.740
You know it is right here self that all energy AI and that's all that energy spent when there is the

06:40.910 --> 06:43.110
regulating the temperature of the server.

06:43.280 --> 06:50.000
And that's exactly what we want to print right now but we haven't used it in the training because it

06:50.000 --> 06:55.630
is automatically computed as soon as we called a date of method.

06:55.640 --> 06:57.270
So we just had to remember that.

06:57.410 --> 07:00.150
But that means that here in order to get it.

07:00.230 --> 07:04.660
Well first we need to get of course our environment object.

07:04.670 --> 07:11.060
And then from this object we're going to get that specific very well corresponding to the total energy

07:11.060 --> 07:13.040
spent when there is the eye.

07:13.280 --> 07:15.520
And remember the name of it.

07:15.620 --> 07:16.920
Not sure I copied it.

07:16.990 --> 07:17.610
Here it is.

07:17.630 --> 07:21.320
But of course we have to take only the name without the self.

07:21.470 --> 07:23.250
So I'm copying exactly this.

07:23.480 --> 07:27.130
And then back into my training implementation.

07:27.290 --> 07:28.560
I'm basing that here.

07:28.700 --> 07:29.580
And here we go.

07:29.600 --> 07:36.010
We are ready to print the total energy spent when we have to connect connected to the server regulating

07:36.010 --> 07:42.640
its temperature for every epoch because you have to understand it actually these prints all these prints

07:42.650 --> 07:45.870
here are still in the first loop.

07:45.980 --> 07:48.600
You know they're not out of the hole for a loop.

07:48.710 --> 07:51.750
They're still in this for loop looping over the epochs.

07:51.770 --> 07:54.110
Therefore that means that for each book.

07:54.260 --> 08:00.440
Well we will print the total energy spent accumulated over the whole epoch.

08:00.440 --> 08:01.310
All right perfect.

08:01.310 --> 08:10.010
And then as I told you I also want to present of course the other energy that is spent not by the time

08:10.040 --> 08:13.600
but by the servers integrated cooling system.

08:13.700 --> 08:20.600
That is when there is no AI and which remember is computed in that separate simulation with following

08:20.600 --> 08:26.600
the same fluctuations of the core temperature of the Sahara you know with the fact that the number of

08:26.600 --> 08:30.120
users and the fluctuations of the rate of data transmission.

08:30.320 --> 08:35.950
So that's exactly what we want to compare to that energy spent when there is the eye.

08:36.140 --> 08:42.800
And so in order to be efficient now I'm going to copy this and then just below I'm going to place it

08:43.320 --> 08:49.730
in here when I'm only you in three places first the text to specify what we're printing so we can say

08:50.090 --> 08:57.290
that this time we're printing the total energy spent when there is no high and same format is going

08:57.290 --> 09:00.630
to be a float f with zero decimal.

09:00.860 --> 09:07.280
And in the format of course we have to specify the right for a roll which is this time not total energy

09:07.650 --> 09:11.450
from our environment objects but total energy.

09:11.450 --> 09:15.590
No AI because remember that in our environment.

09:15.800 --> 09:23.160
Well the variable of our environment class corresponding to all energy spent by this alternative certain

09:23.180 --> 09:27.410
degree cooling system was named total energy.

09:27.410 --> 09:28.750
No AI exactly.

09:28.810 --> 09:36.530
Is so perfect we got exactly what we needed and therefore we are ready to print all the interesting

09:36.530 --> 09:39.760
informations for each epoch of the training.

09:39.980 --> 09:47.960
And now the last final step of this whole implementation I'm so excited you can hear it by the sound

09:47.960 --> 09:53.810
of my voice that we're about to execute that training very soon because indeed the last step that we

09:53.810 --> 10:00.950
have to do here is of course to save the moral meaning that we are going to save the weight of the brain

10:01.130 --> 10:02.020
of our AI.

10:02.150 --> 10:08.060
You know after all the updates that happen to each time try to redo the last day and we'll get some

10:08.300 --> 10:15.050
weight some good weight because indeed there will be some optimal weight minimizing that loss air between

10:15.050 --> 10:19.610
the predictions of the neural network inside the brain and the target.

10:19.750 --> 10:20.390
OK.

10:20.510 --> 10:22.260
So let's have this moral.

10:22.310 --> 10:24.160
It's super quick and easy.

10:24.170 --> 10:25.420
Thanks SCARUS.

10:25.460 --> 10:33.860
We're going to take our moral and since this moral I remind is actually an object of the middle class

10:34.160 --> 10:38.350
and this moral class is a class pre-build in the Cara's API.

10:38.480 --> 10:47.090
Well it contains some method and one of them is of course the Save method which allows exactly to save

10:47.090 --> 10:51.490
the weight of our model which is of course what we want to do right now.

10:51.680 --> 11:00.200
So going back to our trend and implementation from the small We're going to call the Save method and

11:00.290 --> 11:02.780
inside the parenthesis of this method.

11:02.990 --> 11:08.690
Well we just have to add to one and put in quotes which is the name of the mole and we're going to call

11:08.690 --> 11:16.940
that simply model that age 5 and age 5 is just the type of the file that will contain the weights just

11:17.300 --> 11:23.420
a special type but which we won't even have to look inside because then what we'll do in the testing

11:23.660 --> 11:29.900
is we'll just call another method from this model object that is from the model class and which will

11:29.900 --> 11:33.240
be the load method in which will enter as input.

11:33.350 --> 11:35.570
Well that exact same model.

11:35.600 --> 11:40.180
So we don't have to even look at what's inside this type of file.

11:40.310 --> 11:45.770
And so now that's the big moment the moment where we execute the whole training.

11:45.770 --> 11:49.590
First of all congratulations for having implemented all this.

11:49.610 --> 11:54.640
I'm going to get out of everything here and now of course we're going to save.

11:54.860 --> 11:55.730
And here we go.

11:55.760 --> 11:59.160
We are all ready to execute that training.

11:59.200 --> 12:01.910
So without waiting any more seconds.

12:02.120 --> 12:12.170
Now I'm going to select everything and press command control press enter to execute that very final

12:12.320 --> 12:13.450
training.

12:13.460 --> 12:15.580
All right and here we go we start the first book.

12:15.680 --> 12:21.110
And here we can see the total energy spent with an AI and it will respond with no AI.

12:21.260 --> 12:27.840
And already at the end of each book we can see that our AI is beating the alternative cooling system.

12:27.920 --> 12:35.600
Except in that six Ekberg for example where indeed the AI was a loser with respect to that integrated

12:35.600 --> 12:41.510
cooling system right spent more energy than the servers on cooling system.

12:41.720 --> 12:49.780
But then we can see that in general over the books world AI has less energy spent than the server and

12:49.790 --> 12:53.310
so this is a very good sign to save some good energy.

12:53.510 --> 12:56.950
However let me remind the goal that we're trying to accomplish.

12:57.110 --> 13:00.380
Well remember in the promo video or in the book.

13:00.470 --> 13:08.360
Well I'm saying a few times that our goal is to obtain some similar score as what Google deep mine obtained

13:08.630 --> 13:14.610
when you know they reduced Google's data centers going electricity bill by more than 40 percent.

13:14.660 --> 13:15.910
That's what they achieved.

13:16.130 --> 13:22.510
And as far as we are concerned well since of course our server is much simpler than a google search.

13:22.640 --> 13:28.940
Well let's say that our goal will be to reach at least 50 percent but that we won't have the answer

13:28.940 --> 13:33.380
now because when I say that I want to beat at least 50 percent.

13:33.440 --> 13:37.990
It's of course for the simulation and right now we're just doing the training.

13:38.120 --> 13:40.300
We're training the brain of our AI.

13:40.310 --> 13:46.710
So we're updating constantly to wait in order to reduce as much as all the last area between the predictions

13:46.720 --> 13:53.930
and the toilet and then once our brain will be trained and we get the final weights Well we'll run that

13:53.930 --> 13:57.120
whole simulation over one full year.

13:57.240 --> 14:04.220
That last fall testing the way and that will be our final implementation in this second case study and

14:04.220 --> 14:08.920
it will be very exciting to see if indeed we managed to be 50 percent.

14:09.200 --> 14:15.170
All right so as you can see it's going to take a little while before we reach the final book so I'm

14:15.170 --> 14:18.540
going to accelerate here and I'll see you at the end of the training.

14:50.520 --> 14:52.660
All right all right we're about to finish.

14:52.710 --> 14:57.690
Let's see epoche number ninety seven and three more Epic's to go.

14:57.690 --> 14:58.590
What about energy.

14:58.590 --> 14:59.570
How are we doing.

14:59.700 --> 15:05.880
Well we can see that AI is doing much better than the service integrated cooling system and that for

15:05.880 --> 15:11.240
most of the epochs we might have a good result for that simulation.

15:11.250 --> 15:13.410
But the question is remember here we go.

15:13.410 --> 15:14.140
That's over.

15:14.190 --> 15:20.730
But the question is remember are we going to beat 50 percent 50 percent of energy saving and we'll get

15:20.730 --> 15:23.510
the answer and the final part of this case study.

15:23.790 --> 15:24.590
Well here we go.

15:24.600 --> 15:25.740
The training is over.

15:25.740 --> 15:28.180
Congratulations again for implementing it.

15:28.350 --> 15:31.000
And now it's time to move on to the simulation.

15:31.170 --> 15:38.720
In this testing that fell and according to the train result I'm pretty confident that of course some

15:38.730 --> 15:40.020
energy will be saved.

15:40.080 --> 15:42.960
But let's see if we manage to do 50 percent.
