WEBVTT

00:00.870 --> 00:02.020
All right so let's do this.

00:02.040 --> 00:08.620
I can't wait to see how many millions of dollars this huge online retail business made thanks to us.

00:08.700 --> 00:10.870
I suppose it's going to be millions of dollars.

00:10.980 --> 00:17.430
And keep in mind that what we're about to get here is only the experiment you know only the experiment

00:17.430 --> 00:18.860
to find the best strategy.

00:18.980 --> 00:25.320
But I remember that once it finds the best strategy of course going to deploy it on all its customers

00:25.560 --> 00:27.620
to try to convert all its customers.

00:27.720 --> 00:32.490
And that's where the big big big amount of money will be made by the business.

00:32.490 --> 00:37.430
And if you want we can have fun and compute that but what we're about to do here is only the experiment

00:37.440 --> 00:41.030
and you're going to see that it's already a pretty decent amount of money.

00:41.250 --> 00:41.970
All right.

00:41.970 --> 00:43.960
So let's do this.

00:43.980 --> 00:48.820
I'm going to actually reset everything here by restarting the kernel.

00:49.050 --> 00:55.410
And the reason is that I want to make sure that by executing Once we don't get lucky you know because

00:55.770 --> 00:57.770
we did a lot of random tricks here.

00:57.820 --> 01:02.970
No first of all in the Ranum strategy will we select randomly a strategy at each round.

01:02.970 --> 01:07.810
So it's possible that we could get lucky even if statistically this can not be the case because then

01:07.910 --> 01:11.840
thousand rounds is too much to get lucky with a random strategy.

01:12.030 --> 01:19.200
But then also we have you know the simulation was again some random ones but still again we have enough

01:19.200 --> 01:23.390
rounds so that even with one shot this would be statistically relevant.

01:23.580 --> 01:30.450
But still I want to have fun and make sure that we get good result by executing several times.

01:30.450 --> 01:31.510
So are you ready.

01:31.620 --> 01:32.700
Let's do this.

01:32.700 --> 01:34.130
Everything is restarted.

01:34.200 --> 01:41.700
We can say we can select everything and press command and control plus answer to execute.

01:41.700 --> 01:43.350
And I was wrong.

01:43.440 --> 01:44.530
I was actually wrong.

01:44.550 --> 01:45.360
Sorry about that.

01:45.360 --> 01:50.960
We all make millions of dollars saved for the business but still they save quite a lot of money.

01:51.030 --> 01:57.030
The millions are going to be of course for all the customers want the best strategy is deployed and

01:57.360 --> 01:58.890
we can compute that if you want.

01:59.100 --> 01:59.960
But here we go.

02:00.000 --> 02:06.060
That's the difference between the revenues generated if we apply Tums and sampling and the revenues

02:06.060 --> 02:13.110
generated if we apply the random strategy and the relative return is by which percentage and something

02:13.170 --> 02:15.610
outperformed the random strategy.

02:15.780 --> 02:17.790
And here we go 87 percent.

02:17.790 --> 02:21.550
We almost doubled the performance of the Ranum stretch.

02:21.840 --> 02:23.730
So let's do it again.

02:23.730 --> 02:30.450
I'm going to ask you this once again to see what we get on average because again we have many random

02:30.450 --> 02:31.590
factors here.

02:31.600 --> 02:39.090
So here we go again and this time while the relative returns even better 97 percent and the absolute

02:39.090 --> 02:41.810
return is even better as well.

02:41.840 --> 02:51.360
So we're again an even better now again and even better now 127 percent and 92 percent again.

02:51.540 --> 02:59.130
So we can see that every time we execute well we get great results great outperformance of the Tomsen

02:59.130 --> 03:02.620
sampling algorithm compared to the run strategy.

03:02.910 --> 03:05.810
So you see that's why I didn't want to fix a seed.

03:05.810 --> 03:08.280
No because the execution time is instant.

03:08.280 --> 03:12.050
You know it doesn't take long like the training of our moral case number two.

03:12.180 --> 03:16.670
That's why I wanted to fix this in case a number two and not in this case.

03:16.690 --> 03:23.130
Number three so that we can see the different results we get by testing several times and we always

03:23.130 --> 03:28.230
get at least something around 90 percent relative return which is really really good.

03:28.320 --> 03:30.970
And that's over 10000 rounds.

03:31.140 --> 03:37.720
Of course if we for example do one hundred thousand rounds Well this will be even greater.

03:37.920 --> 03:38.820
Let's see.

03:38.820 --> 03:40.720
Of course it's taking a little more time.

03:40.950 --> 03:41.750
But here we go.

03:41.820 --> 03:46.800
That's where the million is one million thirty five thousand nine hundred.

03:47.100 --> 03:48.450
So that's really good.

03:48.450 --> 03:54.030
We're basically doubling the performance of our benchmark our asset is doubling the performance of our

03:54.030 --> 03:54.890
benchmark.

03:55.110 --> 04:00.690
And I want to say that not only outperforms the performance of the benchmark but you can try the other

04:00.690 --> 04:03.750
algorithms for the not and then problem.

04:03.750 --> 04:06.630
Thompson sampling will outperform all of them.

04:06.810 --> 04:11.790
For example another great algorithm is called the upper confidence bound algorithm.

04:11.850 --> 04:12.810
You can test it out.

04:12.810 --> 04:19.290
We actually implemented in our machine early 80s of course and you will see that Thompson simply outperforms

04:19.500 --> 04:25.710
the upper continents around also called UCB algorithm so that's why I wanted to include then's course

04:25.740 --> 04:31.950
because it's a really really powerful algorithm that can really maximize as we just did the revenues

04:31.950 --> 04:32.930
of the business.

04:33.360 --> 04:40.950
And now just for fun let's go back on line and let's see how many customers have big online retail businesses

04:40.950 --> 04:42.780
like Amazon or eBay.

04:42.780 --> 04:48.990
So for example let's see Amazon number of customers.

04:48.990 --> 04:49.870
Here we go.

04:50.140 --> 04:56.400
Amazon number of customers is three hundred and ten million active customers.

04:56.400 --> 04:57.080
So that's very good.

04:57.080 --> 04:58.120
That's a good number.

04:58.230 --> 05:05.310
Let's let's see how much money Amazon will make thanks to us that is thanks to our Thompson sampling

05:05.370 --> 05:11.250
algorithm if we deploy this best strategy I remind that we're doing fiction of course.

05:11.280 --> 05:17.640
I'm not assuming there is an existing strategy that has a 20 percent conversion rate to convert the

05:17.640 --> 05:23.970
310 million customers to a premium plan of $100 per year that's all fiction.

05:23.970 --> 05:29.350
It has nothing to do with Amazon but just for fun that imagine that we are dealing with Amazon here.

05:29.370 --> 05:30.960
Three hundred and ten million.

05:31.020 --> 05:35.500
And now let's see how much money Amazon will make thanks to us.

05:35.830 --> 05:41.310
So here we suppose indeed that the experiment is done and that Amazon is going to deploy to Strategy

05:41.310 --> 05:45.630
number seven that has a conversion rate of 20 percent on it.

05:45.690 --> 05:51.310
Three hundred and ten million customers active customers.

05:51.620 --> 05:53.470
So the competition is direct.

05:53.510 --> 05:55.550
We just compute it here in the council.

05:55.550 --> 06:01.100
So let's first get the 310 million customers right.

06:01.130 --> 06:01.990
I got this right.

06:02.100 --> 06:11.330
310 million customers that then we have to multiply by 20 percent 0.1 and then that we have to multiply

06:11.330 --> 06:19.610
by 100 dollars because the premium plan has a price of one hundred dollars and now you're going to see

06:19.910 --> 06:26.210
how important it was for the business to identify the best strategy because indeed what Amazon would

06:26.210 --> 06:32.830
make in this scenario that is completely invented is well there.

06:33.080 --> 06:39.980
There's too many zeroes I cannot even see how many millions or even even maybe billions it will make.

06:40.170 --> 06:51.960
Well it will make actually six billion six billion two hundred million six billion two hundred million

06:52.290 --> 06:54.540
dollars thanks to us.

06:54.540 --> 06:56.550
All right so we did a pretty good job here.

06:56.640 --> 06:57.480
And you can be proud.

06:57.480 --> 07:02.160
Now I know how to implement this very powerful Thompson sampling algorithm.

07:02.160 --> 07:07.430
All right so we'll do one less thing now which is to plot the histogram of the selections.

07:07.620 --> 07:11.380
And that's just to experiment to see in how many rounds.

07:11.460 --> 07:17.820
And something was able to quickly identify this best strategy which is strategy number seven.

07:18.040 --> 07:19.800
So let's do that in the next tutorial.

07:19.830 --> 07:21.600
And until then enjoy AI.
