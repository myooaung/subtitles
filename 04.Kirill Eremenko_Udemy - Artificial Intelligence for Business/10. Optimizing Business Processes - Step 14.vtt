WEBVTT

00:00.370 --> 00:03.780
Hayes congratulations for tackling part 1 and 2.

00:03.900 --> 00:08.760
And now we're about to start part three going into production.

00:08.850 --> 00:11.350
Indeed we already have our AI.

00:11.430 --> 00:18.300
It is what we built in part to building the solution with Q learning and so now the only remaining thing

00:18.300 --> 00:24.630
but most important thing we have to do is to build that system that will take as input the starting

00:24.630 --> 00:31.770
location of our ultimate warehouse robot meaning where it is located exactly in which location in the

00:31.770 --> 00:38.880
warehouse and taking as other input of course the temporary location where it has to go.

00:39.150 --> 00:46.530
And then of course this tool will return the optimal route from the starting location to that ending

00:46.710 --> 00:48.930
top priority location.

00:48.930 --> 00:49.350
All right.

00:49.350 --> 00:53.370
And so now the question is how are we going to make such a tool.

00:53.610 --> 00:59.340
Well of course this is going to be a function function taking as inputs as we said the starting and

00:59.340 --> 01:05.330
ending locations and returning the route now under which form will this route be returned.

01:05.460 --> 01:12.270
Well it will be a list of the successive locations that we will have to go through from the starting

01:12.270 --> 01:14.250
location to the ending location.

01:14.250 --> 01:20.670
So basically it will return the path composed of letters representing the locations in the form of the

01:20.670 --> 01:21.500
list.

01:21.570 --> 01:27.780
And speaking of letters in the stool everything will be in letters both the input and the output.

01:27.960 --> 01:34.440
So for example let's say that the starting point is this location and the ending point will still be

01:34.440 --> 01:36.250
the top priority location G.

01:36.480 --> 01:43.050
Well the inputs are not going to be the indexes that is the state of these two locations.

01:43.110 --> 01:49.470
There are going to be the letters in quotes so that particular example the input will be the letter

01:49.880 --> 01:52.200
in quotes and the letter G in quotes.

01:52.440 --> 01:53.910
And same for the output.

01:53.910 --> 01:59.370
The output will be returned in the list containing the letters of the locations following the optimal

01:59.370 --> 02:01.140
path from ETG.

02:01.140 --> 02:05.860
So for example here we can easily see that the optimal pass is either.

02:05.900 --> 02:06.460
I J.

02:06.460 --> 02:10.950
F. B C G or e i j k l h g.

02:10.980 --> 02:17.520
And this is exactly what will be returned by the system you know so that we make an easy to use system

02:17.720 --> 02:23.940
where we just have to put the starting location in any location just as they are in letters and so that

02:23.940 --> 02:27.900
we get the optimal path easy to read in letters as well.

02:28.470 --> 02:32.570
All right so let's make this tool and to help us make this tool correctly.

02:32.700 --> 02:39.990
Well we will already put ourselves in a real situation that is we're going to assume that we're starting

02:39.990 --> 02:43.390
from location and that we have to go to location.

02:43.830 --> 02:50.580
And we'll see step by step what we need to implement in order to go from that location to that location

02:50.590 --> 02:56.800
G by each time using the Q values that were computed here in this part 2.

02:57.180 --> 03:03.840
All right so first of all let's specify manually at first we'll do it manually but then we'll do it

03:03.900 --> 03:04.650
automatically.

03:04.650 --> 03:09.140
But first let's specify manually that we want to go to locations.

03:09.630 --> 03:17.520
The way to specify it manually is obviously to set a high reward in the reward matrix in that specific

03:17.520 --> 03:18.450
location.

03:18.840 --> 03:22.050
And where is that specific location in the Matrix.

03:22.210 --> 03:30.150
Well that corresponds to the cell that is in the road and the ecology and remember the first row corresponds

03:30.150 --> 03:31.300
to location 8.

03:31.380 --> 03:37.950
The second row corresponds to location the third corresponds to the fourth correspond to the fifth correspond

03:37.950 --> 03:42.950
to the sixth corresponds to F and sevenths correspond to G.

03:43.200 --> 03:45.510
So here we are in the right row.

03:45.600 --> 03:47.680
Now we need to get the right column.

03:47.880 --> 03:54.460
So first gone corresponds to a second gone corresponds to be third column corresponds to see fourth

03:54.600 --> 04:00.710
corresponds to the fixed Kancha response to eat 6 Gunga response to F and the 7 is gone.

04:00.720 --> 04:09.000
Here corresponds to G and that is exactly where we have to set a high reward so that our AI system leads

04:09.000 --> 04:12.980
us in top priority to this location corresponding to location G.

04:13.170 --> 04:21.300
And therefore here instead of putting a simple one will put a high reward such as for example 1000 and

04:21.300 --> 04:21.930
that's it.

04:22.080 --> 04:23.820
That's the only thing we have to do.

04:23.850 --> 04:31.230
So that from wherever we start from whatever STARTING POINT we are in the warehouse we'll reach by the

04:31.230 --> 04:33.520
shortest route location.

04:34.140 --> 04:34.730
All right good.

04:34.740 --> 04:40.610
And I remind that to update the reward matrix in order to get to the optimal location here.

04:40.670 --> 04:46.760
We just did it manually but then to improve our system we'll do it automatically that is well implemented

04:46.770 --> 04:52.530
functions so that we don't even have to update this reward matrix manually as we just did.

04:52.740 --> 04:58.470
But first I want to do things manually here so that you can really understand the process and the logic

04:58.470 --> 05:03.560
of how we're going to get to that top priority location by the optimal route.

05:03.560 --> 05:04.190
All right.

05:04.190 --> 05:05.350
So that's the first thing to do.

05:05.350 --> 05:07.920
Now we're going to do a very exciting thing.

05:08.030 --> 05:13.100
We're going to launch the whole training that is we're going to launch our whole implementation up to

05:13.100 --> 05:18.070
here which means that in fact we're going to launch the training of the Q function.

05:18.110 --> 05:20.550
Basically we're going to launch the Q learning process.

05:20.870 --> 05:22.010
So let's do this.

05:22.220 --> 05:26.250
I'm going to select everything here up to the top.

05:26.390 --> 05:31.440
And now to execute this code you just need to well select everything as we just did.

05:31.580 --> 05:35.930
And then if you are on a Windows or Linux you can just press control plus enter.

05:36.200 --> 05:42.350
And for Mac users just like me we just need to press commands Plus enter.

05:42.410 --> 05:43.810
And here we go here.

05:43.850 --> 05:48.320
As you can see it was quite easy that's because we have a very small warehouse here but of course in

05:48.320 --> 05:54.000
reality the warehouse would be much bigger with many more locations and more complexity.

05:54.110 --> 06:00.460
So it would take a little more time but here we already got the training done in a flashlight.

06:00.470 --> 06:02.480
And so now why did I want to do that.

06:02.480 --> 06:10.430
That's because I want to show you right now what our matrix of q values looks like and to do that we

06:10.430 --> 06:16.250
have two ways we can either make a print here or print Q values directly from the console and that's

06:16.250 --> 06:17.400
what we'll do actually.

06:17.690 --> 06:26.360
So let's print all our Q values so here I'm taking the matrix of q values.

06:26.360 --> 06:33.280
Q But then since actually the q values are going to be float numbers well in order to make it more readable

06:33.280 --> 06:41.560
when we print our matrix of q values Well I'm going to convert all the q values into integers and that's

06:41.560 --> 06:49.010
how we do it by just adding that as type int and then we just need to press enter.

06:49.180 --> 06:50.230
And here we go.

06:50.410 --> 06:56.190
That's our matrix of cube values and the first thing we can see in that is important.

06:56.210 --> 07:03.730
Notice is that indeed the highest Q value we see in the matrix is this one and it corresponds to indeed

07:04.150 --> 07:10.020
the cell of location G meaning the cell that is in roadgeek and column G.

07:10.150 --> 07:13.960
You can check that if you want but that's the most important point.

07:13.960 --> 07:22.300
And then all the large Q values are high because they tell you from each location where you have to

07:22.300 --> 07:25.370
go as a next location to get closer to G.

07:25.510 --> 07:27.070
The top priority location.

07:27.210 --> 07:32.920
So that's how it works you see when making that tool that will return that optimal route from the starting

07:32.920 --> 07:34.550
location to location G.

07:34.720 --> 07:39.940
Well each time we are at a specific location for example it's location the year corresponding to that

07:39.950 --> 07:47.830
row will take the highest Q value of that row that is this one to get closer to the top priority location

07:48.100 --> 07:49.380
by the shortest route.

07:49.540 --> 07:54.940
So that means that here will have to go to that next location corresponding to that column here because

07:54.940 --> 07:56.470
it has the highest Q value.

07:56.580 --> 08:01.510
And so we can already see how we are going to build that tool returning the optimal route.

08:01.510 --> 08:07.210
You know we are going to start from our starting location which is the first input of this to the starting

08:07.210 --> 08:09.150
location corresponds to that row.

08:09.190 --> 08:13.960
Then we'll take the highest Q value in that row which is this one 714.

08:14.110 --> 08:19.000
Then we'll play the action corresponding to that column because this is the action that has the maximum

08:19.000 --> 08:20.140
Q value.

08:20.140 --> 08:25.750
Then this action will lead us to a next date this date and then again we'll take the highest Q value

08:25.870 --> 08:32.170
to this one which corresponds to another action leading us to the next stage X cetera and then progressively

08:32.170 --> 08:37.570
we'll get closer and closer to the top priority location G by taking the optimal route.

08:37.600 --> 08:40.800
Of course we'll verify that at the very end.

08:40.900 --> 08:42.490
Until then enjoy AI.
