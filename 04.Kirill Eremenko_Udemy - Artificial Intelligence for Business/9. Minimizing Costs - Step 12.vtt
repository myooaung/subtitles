WEBVTT

00:00.460 --> 00:06.420
Heyes Welcome back congratulations for smashing the previous step which was quite a big step getting

00:06.420 --> 00:11.340
the next date and now we're going to move on to the next step which will be about getting game over

00:11.340 --> 00:12.260
as I just got.

00:12.480 --> 00:18.480
So first of all what does that mean and why do we have to do this and mostly Why is it part of the general

00:18.810 --> 00:19.700
framework.

00:20.010 --> 00:24.960
Well you know when you're training in a fight you're going to do that on a certain number of what we

00:24.960 --> 00:26.410
call books.

00:26.550 --> 00:33.810
For example in our case an epoch will be a five month period and we will actually train our AI on 1000

00:34.260 --> 00:36.030
bucks a five month period.

00:36.240 --> 00:39.840
But when the training happens each of these epochs.

00:40.000 --> 00:46.210
Well it might happen that the AI is doing terribly like not at all accomplishing its goal.

00:46.320 --> 00:52.680
And so in that case well what you can do is force the episode to be over so then you can start a new

00:52.680 --> 00:54.720
episode and get a better start.

00:54.990 --> 01:00.630
So a classic example that I always like to give if for example your training in the eye to drive a car

01:00.720 --> 01:02.040
like a self-driving car.

01:02.190 --> 01:03.910
Well imagine that's on point.

01:03.930 --> 01:05.350
The car just smashed the wall.

01:05.400 --> 01:07.790
Well of course that's going to be a game over.

01:07.810 --> 01:12.420
It's going to be the end of the episode and you will want to start to drive again.

01:12.450 --> 01:20.160
And so that's why in most of the environments we have this game over component which allows us to end

01:20.160 --> 01:24.200
an episode as soon as our AI is far from its goal.

01:24.240 --> 01:26.840
And so what is going to be the game over in our case.

01:26.850 --> 01:34.160
In our specific case study well remember that we have these maximum temperature above which to sort

01:34.150 --> 01:35.430
of fails to operate.

01:35.460 --> 01:39.480
And also this minimum temperature below which the server fails to operate.

01:39.540 --> 01:47.040
Well you get it if the service temperature goes either above the maximum temperature or below the minimum

01:47.040 --> 01:47.780
temperature.

01:47.940 --> 01:51.820
Well of course we're going to have game over because of course there will be far from it.

01:51.840 --> 01:55.790
Go to regulate correctly the temperature of the server.

01:56.080 --> 01:57.790
And so that's all that we need to do right now.

01:57.810 --> 02:03.750
We only need to gather these two conditions in two separate if conditions checking if one of these two

02:03.750 --> 02:04.900
situations happen.

02:04.980 --> 02:10.110
And if either of them happens well we'll force the game to be over and we'll start again.

02:10.290 --> 02:10.890
All right.

02:10.890 --> 02:16.110
But remember that we have to force the game to be over only for the training.

02:16.110 --> 02:17.970
No I talked about training airbags.

02:18.120 --> 02:21.720
Well you know you want to restart the train again on the in the training.

02:21.720 --> 02:27.390
However for the simulation there is no such thing as the game over and you will see inside each of our

02:27.390 --> 02:32.490
two if conditions checking if we are below the minimum temperature or above the max temperature.

02:32.490 --> 02:38.440
Well we'll check also if we are in training mode because if we are not in training mode we'll just ask

02:38.490 --> 02:42.670
the AI to bring the surface temperature back into the optimal range.

02:42.690 --> 02:43.510
Very simply.

02:43.800 --> 02:49.950
So let's do this let's get whether the game is over for our specific history.

02:50.310 --> 02:57.090
So as we just said we have to check the two possible situations where the game came over and the first

02:57.090 --> 03:07.080
one is if the temperature of the air goes below the minimum temperature so I'm going to get this minimum

03:07.080 --> 03:15.510
temperature of minus 20 degrees so that we can write the following condition if self that temperature

03:16.910 --> 03:19.300
that is the surface temperature when we have the.

03:19.470 --> 03:27.120
If that temperature goes below the minimum temperature that we can have well in that case what will

03:27.120 --> 03:27.870
we do.

03:27.870 --> 03:31.390
Remember we have to check first if we are in training mode.

03:31.470 --> 03:37.150
So we'll add another condition checking if indeed we are in training mode.

03:37.150 --> 03:43.500
And remember we have this Selda trained variable which is the mode and which is equal to one if we are

03:43.500 --> 03:46.830
in training mode and 0 if we are in inference mode.

03:46.830 --> 03:52.860
So right now I'm checking that other equals 1 million checking if we are in training mode.

03:52.920 --> 03:57.290
And so if that's the case now we can force the game to be over.

03:57.480 --> 03:58.760
And how can we do that.

03:58.770 --> 04:06.150
Well remember that we also have this self that game over volleyball which is initialized to 0 meaning

04:06.300 --> 04:07.660
the game is not over.

04:07.800 --> 04:13.440
But right now since indeed we just went below the minimum temperature.

04:13.560 --> 04:17.100
Well we're going to force the game to be over by sitting.

04:17.100 --> 04:18.170
Game over.

04:18.170 --> 04:19.800
Too true.

04:19.800 --> 04:20.900
The game is over.

04:21.060 --> 04:22.090
Or one.

04:22.170 --> 04:22.680
All right.

04:22.680 --> 04:23.550
And that's it.

04:23.550 --> 04:28.500
Then you'll see in the training will implement something to say that if the game is over we'll have

04:28.500 --> 04:29.220
to start again.

04:29.280 --> 04:33.230
But that will be in the training implementation file.

04:33.240 --> 04:33.930
All right.

04:33.930 --> 04:39.180
Then we also have to take care of the situation where we are not in training.

04:39.210 --> 04:46.380
That is if we are in conference mode which we can get by the LCA else meaning if still the temperature

04:46.380 --> 04:51.630
of the flight goes below the minimum temperature but we are not in training mode.

04:51.630 --> 04:53.260
Well what will we do.

04:53.430 --> 04:59.700
Well we just said we're going to ask and force actually our AI to bring the temperature of the server

05:00.000 --> 05:02.610
back to the closest balance of the optimal range.

05:02.610 --> 05:07.980
And since right now well the temperature of the server when we have the AI is very low because it went

05:07.980 --> 05:09.770
below the minimum temperature.

05:09.930 --> 05:15.600
Well we're going to force our AI to bring the temperature of the server back to the lower bound of the

05:15.660 --> 05:18.910
optimal range of temperature and that's why I'm taking.

05:19.140 --> 05:25.860
Well Selda temperature again the temperature of the server when we have the AI and I'm going to bring

05:25.860 --> 05:32.640
it back to well the closest belt of the optimal range of temperature which is the lower bound.

05:32.640 --> 05:41.040
So I'm taking this I'm pasting that right here and I'm getting the lower bound and perfect.

05:41.040 --> 05:47.640
But then let's be careful if the AI does this to bring back the temperature of the server to this lower

05:47.640 --> 05:48.150
bound.

05:48.300 --> 05:52.270
Well of course that implies that the AI spends some energy.

05:52.320 --> 05:56.370
We must not forget that and therefore we must update as well.

05:56.490 --> 06:05.220
Well the total energy spent by the AI in the situation where we have the AI and we have to incremental

06:05.220 --> 06:12.840
it by Remember something to the difference between self that optimal temperature of zero that is the

06:12.840 --> 06:21.930
lower bound and optimal temperature range minus Well the temperature of the ice was much lower than

06:22.230 --> 06:28.530
this lower bout of optimal temperature range because indeed it was lower than the minimum temperature

06:28.530 --> 06:30.810
of the server minus 20 degrees.

06:30.810 --> 06:31.440
All right.

06:31.440 --> 06:39.420
So this is the energy spent by the AI for bringing the temperature of the server back to that lower

06:39.420 --> 06:46.050
bound up to more range and therefore that's why we update the total energy spent over the round you

06:46.050 --> 06:48.390
know over the iterations.

06:48.480 --> 06:55.470
Perfect So that's a first situation handled and then we're going to handle the other situation where

06:55.470 --> 07:02.940
you know the temperature of the server when we have the it goes beyond above the maximum temperature.

07:03.120 --> 07:09.130
All right so that's why right now below I'm adding an elf which this time will be.

07:09.240 --> 07:11.540
Well let's get the maximum temperature.

07:11.550 --> 07:16.520
It is one of our object variables self that max temperature.

07:16.670 --> 07:23.500
And so I'm going to right now that if the temperature of the server when we have the light goes this

07:23.500 --> 07:27.800
time beyond the maximum temperature the server can have.

07:28.120 --> 07:30.270
Well in that case what will happen.

07:30.370 --> 07:35.680
First we have to check that indeed we are in training mode.

07:35.890 --> 07:40.230
So if the Modica rules one that is if we are in training mode.

07:40.420 --> 07:50.510
Well again we have to force the game to be over by setting ourselves game over viable as one again.

07:50.830 --> 07:51.440
Great.

07:51.460 --> 07:59.270
And then same thing if we're actually not in training mode but in inference mode well saying we will

07:59.450 --> 08:07.070
force our AI to bring the temperature of the server when we have the AI back into the closest bound

08:07.070 --> 08:13.280
of the optimal range of temperature which this time is going to be the index.

08:13.980 --> 08:17.070
One of that optimal range of temperature.

08:17.070 --> 08:22.050
Right because we are above the maximum temperature so to close about is the upper bound.

08:22.050 --> 08:28.880
And again by bringing that temperature back to the upper bound of the optimal range that implies or

08:29.160 --> 08:30.510
spend some energy.

08:30.510 --> 08:39.960
So we have to update the total energy spent by our AI and we have to increment it by of course this

08:39.960 --> 08:45.090
time the inverse differenced that is the temperature of the server when we have our AI that just went

08:45.090 --> 08:53.720
beyond the maximum temperature minus of course that upper bound of the optimal range of temperature.

08:54.060 --> 08:54.910
And here we go.

08:54.930 --> 09:01.270
We took care of the situation where the game came over with these two conditions.

09:01.530 --> 09:02.400
Perfect.

09:02.430 --> 09:03.310
And so here we go.

09:03.330 --> 09:07.350
We are already ready to move on to the next step which is about Abdeen course.

09:07.380 --> 09:13.080
So by score's I mean of course our ultimate goal that we're trying to reach which is to spend the least

09:13.170 --> 09:19.260
energy possible compared to the total energy spent by this alternative system which is the surface cooling

09:19.260 --> 09:20.800
system when we have no AI.

09:20.940 --> 09:27.300
So the scores are nothing else than the total energy spent by the AI and it's all energy spent by the

09:27.390 --> 09:33.930
alternative system and we'll compare it to energy in the end by computing the relative difference between

09:33.930 --> 09:34.460
the two.

09:34.470 --> 09:38.450
So in the end we'll get something similar to what Google did mine obtained.

09:38.490 --> 09:46.230
You know perhaps we'll get that our AI saves 50 percent energy compared to these alternative service

09:46.230 --> 09:47.420
cooling system.

09:47.500 --> 09:51.130
We'll see that in the end that we'll be in of course unless valve testing.

09:51.130 --> 09:51.680
Why.

09:51.960 --> 09:53.540
For the simulation.

09:53.820 --> 09:56.230
So let's move on to the next step in the next toil.

09:56.350 --> 09:57.930
And until then enjoy AI.
