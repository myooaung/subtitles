WEBVTT

00:00.640 --> 00:06.180
All right here we go for the next step of dating this course which I remind is still part of the general

00:06.480 --> 00:11.850
framework because when building and they are you always have some scores that you're trying to get higher

00:11.850 --> 00:12.560
and higher.

00:12.690 --> 00:19.740
And for specific case study Well the scores are going to be the total energy spent by the AI over the

00:19.740 --> 00:20.630
iterations.

00:20.820 --> 00:26.300
And of course we'll compare that score to the other score which is actually our benchmark which is a

00:26.300 --> 00:32.910
all and we spent by the servers integrated cooling system which is an unintelligent system always bringing

00:32.910 --> 00:37.140
back the temperature of the server to the closest balance optimal range.

00:37.140 --> 00:44.430
And so of course we're hoping that our I will spend less energy than this alternative system at the

00:44.430 --> 00:51.490
end of a one year simulation which will do in the testing I fell at the end of this whole implementation.

00:51.810 --> 00:58.110
So let's do this let's They discours it's actually a very easy step for specific cases because what

00:58.110 --> 01:04.710
we just want to do here is actually to update the total energy spent by the AI in our first simulation

01:04.710 --> 01:11.430
where we have the AI and the total energy spent by the service integrated cooling system in that separate

01:11.430 --> 01:13.950
simulation where we have no AI.

01:14.130 --> 01:21.660
And since we actually already have the energy spent by the AI and also right here the energy spent by

01:21.660 --> 01:23.550
the service integrated cooling system.

01:23.640 --> 01:26.600
When we have no AI Well that's going to be direct.

01:26.630 --> 01:33.450
We will update the still energy spent in these two separate simulations by incrementing their energy

01:33.450 --> 01:36.770
spent at that specific iteration.

01:36.800 --> 01:38.090
We're dealing with right now.

01:38.460 --> 01:44.580
So let's do this and we're going to start by what we're mostly interested in the total energy spent

01:44.970 --> 01:50.410
by the AI or for a simulation when the AI is connected to the server.

01:50.670 --> 01:59.670
And so right here I'm getting it because I want to update it by incrementing it by that energy spent

02:00.060 --> 02:01.590
by the AI right.

02:01.590 --> 02:08.910
Remember the energy spent by the AI is an argument of the update on function because we are updating

02:08.910 --> 02:09.760
the environment.

02:09.780 --> 02:15.270
Right now we're still updating the environment at a specific iteration right after the eye plays an

02:15.270 --> 02:18.700
action and spend some energy which is this energy here.

02:18.830 --> 02:25.960
That's why you already have it and that's why we can pretty simply and directly they total energy spend.

02:26.080 --> 02:28.050
I just like that.

02:28.120 --> 02:32.200
All right and then Same for the other simulation.

02:32.200 --> 02:34.030
That is when we have no AI.

02:34.240 --> 02:40.240
So we're going to get this other variable which is that all energy spent by the service cooling system

02:40.240 --> 02:48.640
when we have no AI and we're going to increment that by of course the energy spent by this or is integrated

02:48.640 --> 02:53.820
cooling system when we have no AI at that specific iteration.

02:54.100 --> 02:57.520
When we have the environment with the update on function.

02:57.740 --> 02:58.990
All right and that's it.

02:58.990 --> 03:00.640
We just updated the score.

03:00.640 --> 03:06.310
There was a quick and easy step which is good sometimes when you're going something like this whole

03:06.310 --> 03:07.340
environment.

03:07.360 --> 03:08.350
All right.

03:08.350 --> 03:15.070
So that means that we are ready to move on to the next step which will be about scaling the next date.

03:15.130 --> 03:17.720
And let's remind why we have to scale the next date.

03:17.780 --> 03:24.670
That's because the next date which is date is going to be the input of our brain our artificial brain

03:24.940 --> 03:30.080
which will be a deep neural network and whenever we deal with neural networks we should always kill

03:30.090 --> 03:33.580
the states we should always normalize the inputs right.

03:33.610 --> 03:36.340
So that's what we're going to do in this next step.

03:36.340 --> 03:40.620
We're going to normalize each of the three elements of our state.

03:40.660 --> 03:46.630
Therefore our next date which I remind our first the temperature of the Saroo when we had the AI because

03:46.630 --> 03:51.950
of course that's an input of our AI which is nothing else than this artificial brain.

03:51.970 --> 03:57.610
Then the second element is the number of users at any time t.

03:57.640 --> 04:01.970
And the third element is the rate of data transmission at any time.

04:02.230 --> 04:08.840
So we're going to scale each of them and then we'll make a new vector of these three scaled elements.

04:08.890 --> 04:15.050
So that is vector is a skilled input state ready to go into our artificial brain.

04:15.280 --> 04:18.940
So let's do that in the next tutorial and then enjoy AI.
