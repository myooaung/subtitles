WEBVTT

00:00.780 --> 00:07.610
All right let's do this let's finish this root function returning the optimal location.

00:07.620 --> 00:08.950
So what is the next step here.

00:09.030 --> 00:11.280
Well we just got the next date.

00:11.400 --> 00:17.470
We just made this date to location dictionary mapping States and indexes to the locations in letters.

00:17.700 --> 00:22.860
And that's good because what we need exactly right now is that next location in there because that's

00:22.860 --> 00:24.960
what we want to turn in the root.

00:24.960 --> 00:32.100
So finally we're going to update our next location of our will which so far was just initialized as

00:32.160 --> 00:35.500
a starting location because we didn't know where we had to go yet.

00:35.520 --> 00:44.580
So now that we know where we have to go let's update next location which is going to be the letter corresponding

00:44.580 --> 00:45.330
to the next date.

00:45.330 --> 00:54.470
We just got to get that letter we're going to call our state to location dictionary to which we and

00:54.470 --> 00:57.490
put the next date that we just reached.

00:57.660 --> 00:58.370
Perfect.

00:58.510 --> 01:02.850
And that will give us the next location that is it will give us exactly.

01:03.090 --> 01:04.270
All right.

01:04.270 --> 01:08.520
And now of course what is the next natural step that we have to do.

01:08.640 --> 01:10.660
Let's not lose track of what we're doing.

01:10.860 --> 01:18.600
Well remember we're making a list the root list that will get the optimal path in letters containing

01:18.600 --> 01:24.100
the locations we have to go through in order to reach the top priority ending location.

01:24.480 --> 01:31.350
And therefore now the natural step is just to append to our route that next location which we just got.

01:31.350 --> 01:39.710
So that's why I'm calling here the append function in which will input that next location.

01:39.840 --> 01:42.580
Perfect So right now at this stage.

01:42.600 --> 01:51.530
Well our route will become that C he and I and so now the next step is to get J of course but to do

01:51.530 --> 01:54.590
this of course we're not going to repeat what we just did.

01:54.650 --> 01:57.470
That's the whole purpose of this while loop.

01:57.590 --> 02:04.110
It's going to repeat itself but we just need to be careful and end this well loop properly.

02:04.160 --> 02:07.980
There is always a little touch we have to make when ending a while loop.

02:08.210 --> 02:12.730
We initialized it well but now we have to end that well and to end it.

02:12.750 --> 02:18.740
Well well try to parse the video and figure out how we have to finish this because now I'm going to

02:18.740 --> 02:27.620
tell you Well of course in order to repeat that exact same process by not copy pasting this while the

02:27.620 --> 02:35.300
only thing that we have to do is update the starling location by setting it's equal to that next location

02:35.300 --> 02:40.650
which we just got because indeed that storing location is going to become the next location.

02:40.790 --> 02:43.310
And then this whole process will be repeated.

02:43.310 --> 02:49.220
With that storing location as that next location that is you know the starting state will become the

02:49.220 --> 02:52.100
index corresponding to this new starting location.

02:52.220 --> 02:57.350
Then we'll get the next day because we'll be on a new row and we'll get the action and therefore the

02:57.350 --> 03:01.150
next date corresponding to the highest Q value on that new row.

03:01.160 --> 03:05.900
Then we'll get the next location again by using our Inv. dictionary that we just did.

03:06.050 --> 03:08.890
And then again we'll append the new location.

03:09.020 --> 03:14.780
Therefore the trick here to finish this while loop correctly is just to update the starting location

03:15.170 --> 03:21.870
which now that we reached our next location will become the next location and that's it.

03:21.920 --> 03:24.070
The while loop is done.

03:24.170 --> 03:25.460
Perfect.

03:25.460 --> 03:26.870
Congratulations.

03:26.870 --> 03:32.300
So let's just not forget to finish this function the root function correctly.

03:32.450 --> 03:39.230
Well of course we would like this route tool to return that optimal path and to do that we just have

03:39.230 --> 03:43.290
to end up with return the route.

03:43.430 --> 03:46.010
And here we go R2 is over.

03:46.170 --> 03:50.460
So now we're ready to make our final test the ultimate test.

03:50.480 --> 03:57.140
So in the next Statoil we'll just call this route you know print from our starting location which let's

03:57.140 --> 04:06.090
say will be location to the ending location here which will be our top priority location location.

04:06.380 --> 04:12.460
And we'll see if we get the optimal path that is either this path or this path.

04:12.530 --> 04:14.450
So let's do that in the next tutorial.

04:14.480 --> 04:16.250
And until then enjoy AI.
