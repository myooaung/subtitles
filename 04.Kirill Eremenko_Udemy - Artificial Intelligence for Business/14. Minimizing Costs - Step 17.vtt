WEBVTT

00:00.510 --> 00:07.100
And here we go for one of the most exciting steps of this whole implementation in this case study.

00:07.140 --> 00:11.270
This is the step where we build the artificial brain of our AI.

00:11.460 --> 00:14.810
And speaking of artificial brain let's have a look at it again.

00:14.850 --> 00:20.740
I've prepared this slide for you and I will give it to you in the finals that folder of this case study.

00:20.790 --> 00:26.280
And so here is the artificial brain that we will build in more scientific terms.

00:26.280 --> 00:32.430
We call it a fully connected neural network simply because as you can see the layers which is this first

00:32.430 --> 00:39.630
hidden layer here and this one are fully connected all the neurons of this first layer here are connected

00:39.630 --> 00:42.380
to the neurons of this second layer here.

00:42.450 --> 00:48.660
And so of course we have on the left well our input state vector composed of these three elements the

00:48.660 --> 00:53.900
server temperature the number of users and the rate of data at any time t..

00:53.970 --> 00:59.810
Then we have the first layer which will be composed of 64 neurons.

00:59.970 --> 01:05.580
So here of course they can represent 64 neurons but this is the right scale because indeed in the second

01:05.850 --> 01:12.210
hidden layer we'll get half of the number of neurons we had in the here and there that is we'll get

01:12.380 --> 01:19.080
32 hidden neurons and then finally of course after the input our forward propagated into this new one

01:19.080 --> 01:26.070
that work well in the end we'll get not the actions directly but the q values for each of the five actions

01:26.070 --> 01:31.890
which I remind our actions 0 is the action that cools down the server by 3 degrees.

01:31.950 --> 01:36.080
Action 1 is the action that cools down the server by 1.5 degrees.

01:36.180 --> 01:41.020
Action 2 is the action that doesn't transfer any heat to the server.

01:41.190 --> 01:45.900
Then action 3 is the action that will heat up the server by 1.5 degrees.

01:45.900 --> 01:51.280
And finally the action for is the action that will heat up the server by 3 degrees.

01:51.330 --> 01:56.260
And again at a specific time and the union of time will be the minute.

01:56.460 --> 02:02.460
So this is only for the inference that is you know when the inputs are for propagate propagated to get

02:02.530 --> 02:05.120
some outputs which are the predictions.

02:05.120 --> 02:10.560
But then of course for the training we will also consider the back propagation because as soon as the

02:10.560 --> 02:15.960
AI makes a prediction here well we will compare that prediction to a target because this will incur

02:16.050 --> 02:21.930
less error and we will back propagate the last error back into the neural network and then using interrupta

02:21.970 --> 02:22.610
miser.

02:22.740 --> 02:24.950
We will update all these ways.

02:24.960 --> 02:30.440
You know all the way it's corresponding to each of these neurons here through stochastic gradient descent

02:30.870 --> 02:35.290
to get some new weights that will perform overtime some better actions.

02:35.300 --> 02:39.320
There is some better regulations of the surface temperature.

02:39.720 --> 02:40.580
All right so here we go.

02:40.580 --> 02:42.750
That's it for the brain and now.

02:42.780 --> 02:44.100
Well let's build it.

02:44.100 --> 02:45.930
So we're going to go back to Python.

02:46.170 --> 02:52.140
And first of course what we have to do is to import the libraries because indeed this implementation

02:52.140 --> 02:55.900
is huge enough to not build this new network from scratch.

02:55.980 --> 03:00.840
So of course we will build it the most efficient way and the most efficient way today to build a neural

03:00.840 --> 03:07.830
network such as our brain here is with Chris Chris is an amazing library for deep learning built by

03:07.830 --> 03:13.470
Francois surely and it allows you to build some powerful deep neural networks with only a few lines

03:13.470 --> 03:17.060
of code and that's because it is super well written.

03:17.100 --> 03:21.630
So you have to know about keras and especially when you're doing artificial intelligence you want to

03:21.630 --> 03:26.370
have some tools that will save you some time to build the neural networks and again you will see that

03:26.490 --> 03:31.530
the artificial brain and here that we're about to build will be built in a class that will call the

03:31.530 --> 03:37.470
brain class and therefore our artificial neural networks that is our artificial brains will become objects

03:37.770 --> 03:43.830
and again we will be able to create as many as we want so that we can put some other brains onto some

03:43.920 --> 03:50.730
other servers which perhaps would need some other brains with some other architectures and other parameters.

03:50.730 --> 03:56.730
All right so let's import the Cara's libraries and then we have three imports to do now which are some

03:56.730 --> 03:59.190
tools from the Karris library.

03:59.190 --> 04:04.920
By the way I highly recommend to check out the carrier's documentation because it is also super well-explained

04:05.220 --> 04:10.290
and all the tools that we use here are explained clearly in the dark conditions when Google just type

04:10.290 --> 04:12.250
Cara's than documentation.

04:12.270 --> 04:13.830
And then you'll find everything.

04:13.830 --> 04:15.150
All right let's do this.

04:15.210 --> 04:22.110
The first tool that we have to import from Paris and a specific module from carers which is the layers

04:22.180 --> 04:28.400
Mudgal well from this layer is Mudgal we are going to import two new classes.

04:28.470 --> 04:33.720
Well again you know we're building a class but inside this class we will create some objects of other

04:33.720 --> 04:40.140
classes and these two classes are first input and then dance.

04:40.170 --> 04:47.720
So the input class will basically create the input layer of the neural network that is this layer here.

04:47.970 --> 04:55.290
And the dance class will create the fully connected hidden layers which are these two ones.

04:55.320 --> 05:01.520
The first layer composed of 64 neurons and the second and they are composed of 13 neurons and we will

05:01.520 --> 05:07.330
also use the dance class to create the output layer because it is fully connected to the second hidden

05:07.340 --> 05:09.050
layer as we can see here.

05:09.230 --> 05:10.060
OK.

05:10.060 --> 05:12.750
So that's for the first two tools.

05:12.860 --> 05:20.720
And now we are going to import some other tools but from another module by Claris which is the noddles

05:20.840 --> 05:29.420
module and so from this Cara's models Mudgal Well we are going to import the normal class which will

05:29.420 --> 05:35.800
allow us to create the full model you know all assembled with the input layer the hidden layers in the

05:35.810 --> 05:41.830
output layer and also compiled with a certain lust function and an optimizer.

05:41.960 --> 05:43.740
But we'll talk about this later.

05:43.960 --> 05:49.370
So basically this is the advanced structure which will allow us to get our artificial brains as some

05:49.430 --> 05:55.700
objects and besides it will allow us to easily save the weight of the model so that we can load them

05:55.700 --> 05:56.410
later.

05:56.480 --> 06:01.060
For example on some other servers so I will show you how to do that of course.

06:01.190 --> 06:07.650
And then finally we have a last tool to import and we are going to import it still from keras.

06:07.790 --> 06:19.100
But this time from the optimizers module and so from this optimized module will import Well the optimizer

06:19.260 --> 06:21.600
with which will compile our model.

06:21.680 --> 06:22.940
What is an optimizer.

06:23.060 --> 06:29.420
Well the optimizer is basically a tool in your artificial neural network that will update the weights

06:29.510 --> 06:34.910
through to get a gradient descent to reduce the last area between the operations and the target so that

06:35.120 --> 06:37.380
the actions of the AI become better and better.

06:37.550 --> 06:42.730
And therefore the regulations of the service temperature by the AI becomes better and better.

06:43.010 --> 06:49.190
And what we want to import now is called atom with a capital A again because that's a class because

06:49.190 --> 06:56.360
indeed the way we'll get our optimizer you know when compelling Our model is by simply creating an optimizer

06:56.360 --> 06:58.600
object from this class.

06:58.610 --> 06:59.350
All right.

06:59.540 --> 07:00.380
So that's it.

07:00.410 --> 07:02.930
That's it for the libraries we have to import.

07:03.050 --> 07:10.400
And now we ready to build this brain and you will see how efficient it will be thanks to carrots.

07:10.490 --> 07:12.730
But I will let you find out next tutorial.

07:12.740 --> 07:14.450
And until then enjoy AI.
