WEBVTT

00:01.140 --> 00:03.450
Welcome back to this first case study.

00:03.480 --> 00:10.140
Optimizing warehouse rules with Q learning congratulations for tackling part 1 defining the environment.

00:10.140 --> 00:15.420
I'll confess that it was easiest part and now things are going to get a bit more challenging but not

00:15.420 --> 00:16.050
that much.

00:16.080 --> 00:22.260
Because indeed what we only have to do is just follow the cooler any algorithm that I just added in

00:22.320 --> 00:24.470
this fallers you'll get it as well.

00:24.570 --> 00:27.360
I'll provide it for their share in the course.

00:27.360 --> 00:32.840
All right so this is the whole key learning algorithm composed of two main parts.

00:32.880 --> 00:41.190
The initialization part where we initialize all the q values to zeros and the for loop part where we

00:41.190 --> 00:45.380
iterate a certain number of times which will be 1000 times no code.

00:45.540 --> 00:49.090
The following process and therefore in this new part.

00:49.090 --> 00:49.560
Part 2.

00:49.560 --> 00:56.460
Building the solution with Culin will structure this way with the first code section which is the initialization

00:56.700 --> 01:02.480
and a second code section where we do this learning process over 1000 iterations.

01:02.790 --> 01:05.330
All right so let's get the structure.

01:05.340 --> 01:12.960
Actually I already prepared it because I copied the two titles of our two code sections which are the

01:12.960 --> 01:14.180
following.

01:14.190 --> 01:20.130
First code section about the initialization initializing the queue values and a second code section

01:20.130 --> 01:24.510
about the learning process with the 1000 iterations.

01:24.510 --> 01:26.140
All right so let's do this.

01:26.310 --> 01:28.460
Let's start with the first part.

01:28.470 --> 01:35.160
The whole learning algorithm which is to initialize all the q values so what q values exactly do we

01:35.160 --> 01:36.650
have to initialize to zero.

01:36.870 --> 01:44.660
Well if we go back to the whole an algorithm slide while we see that we have to initialize the q values

01:44.850 --> 01:50.670
for all the different states and actions that is for all the couples state action respectively from

01:50.670 --> 01:53.810
0 to 11 and from 0 to 11 as well.

01:54.180 --> 02:00.150
And therefore the best way to do that is actually exactly the same as how we did it with the matrix

02:00.150 --> 02:01.280
of the word here.

02:01.320 --> 02:08.220
That's the same we have to kind of make a Q function like a function of q values taking hasn't put a

02:08.220 --> 02:13.000
couple of state in action exactly as the reward function and returning the Q value.

02:13.270 --> 02:18.390
And therefore since we still have a finite number of states and a finite number of actions and which

02:18.390 --> 02:19.600
are the same numbers.

02:19.830 --> 02:25.950
Well the best way to prepare this Q function is function of q values and initialize all its values to

02:26.010 --> 02:32.610
zeros is again to make a matrix which will be our matrix of q values and therefore will just initialize

02:32.610 --> 02:35.410
it as an N by array full of zeroes.

02:35.730 --> 02:41.490
So that's exactly what we're do in this first code section about the initialization and therefore back

02:41.490 --> 02:42.660
to our code.

02:42.660 --> 02:50.040
We're going to start by introducing a new variable which is q and which will be our matrix of q values

02:50.400 --> 02:51.830
all initialized to 0.

02:52.200 --> 02:55.720
So how are you going to do that easily and most efficiently.

02:55.980 --> 03:01.150
Well we have an umpire for this so I'm going to call non-Thai which has a shortcut and P.

03:01.350 --> 03:09.390
And again we're going to get the array function exactly as we did for the matrix of rewards but here

03:09.540 --> 03:12.720
be relieved we won't have to do it this way all over again.

03:12.720 --> 03:17.310
You know putting zeros everywhere there is a much better and quicker solution.

03:17.340 --> 03:22.880
It's another function by name by which will return exactly what we need.

03:22.890 --> 03:27.940
That is a matrix of 12 rows and 12 columns full of zeros.

03:28.200 --> 03:36.120
It is a common practice to use this function and therefore try to remember it is very simply the zeros

03:36.750 --> 03:38.600
function by and by.

03:38.760 --> 03:45.260
That's why I took non-Thai here again and P and then zero's function to which we have to add some parentheses.

03:45.390 --> 03:50.280
And in the parenthesis we simply have to input the dimensions of this array in which we want to have

03:50.460 --> 03:51.530
all these zeroes.

03:51.660 --> 03:57.570
These Amundsen's we have to add them in square brackets again and these dimensions correspond of course

03:57.570 --> 04:01.190
to 12 rows and 12 columns.

04:01.440 --> 04:02.070
All right.

04:02.160 --> 04:09.660
And that way we have our matrix of q values all initialized zeros and therefore the first bar here is

04:09.660 --> 04:10.340
done.

04:10.530 --> 04:16.630
All right so now we're going to move on to the interesting part with all these steps here.

04:16.710 --> 04:21.570
That is we're going to make a for loop because as you can see we have to repeat for a certain number

04:21.570 --> 04:25.330
of times which will be 1000 times the following steps.

04:25.500 --> 04:31.090
So we'll make a for loop inside the for loop will just simply follow the algorithm here.

04:31.200 --> 04:37.650
Exactly as it says until we get the temporal difference and then dating Q values according to the Belman

04:37.650 --> 04:38.760
equation.

04:38.850 --> 04:40.950
So let's do all this in the next tutorials.

04:40.980 --> 04:42.360
Try to do it by yourself.

04:42.360 --> 04:44.300
That would really be some good practice.

04:44.310 --> 04:47.420
You literally have to follow this process here.

04:47.430 --> 04:52.590
There won't be any difference so please try to do it myself first and then it's do it together in the

04:52.590 --> 04:53.700
next tutorials.

04:53.820 --> 04:55.290
Until then enjoy AI.
