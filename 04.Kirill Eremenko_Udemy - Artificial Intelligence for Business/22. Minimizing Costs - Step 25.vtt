WEBVTT

00:00.410 --> 00:06.120
All right let's publish these batches that batch of inputs and a batch of toys and how we're going to

00:06.120 --> 00:06.680
do that.

00:06.720 --> 00:13.440
Well we're going to extract 10 transitions from the memory and inside these 10 transitions we'll put

00:13.710 --> 00:21.180
the then current state in the batch of input and we'll take the next date to compute and target that's

00:21.180 --> 00:26.850
exactly what we have to do now and then we'll just return these two populated batches of inputs and

00:26.850 --> 00:27.820
targets.

00:27.900 --> 00:28.650
So let's do this.

00:28.650 --> 00:32.280
And since now we have to extract 10 transitions from the memory.

00:32.340 --> 00:34.900
Well we'll do that thanks to her for a loop.

00:35.060 --> 00:37.640
So here I'm starting a for loop now.

00:37.680 --> 00:43.760
So the easy way to implement this would be to write for i in range.

00:43.870 --> 00:50.970
Well then but there is another question which transitions are we going to extract from the memory.

00:50.980 --> 00:54.840
Are there going to be the 10 fast transitions the last 10 transitions.

00:54.990 --> 00:59.900
Well actually no there are going to be 10 random transitions from the memory.

00:59.910 --> 01:04.120
So let's say that our memory is full with it's 100 transitions.

01:04.350 --> 01:09.720
Well now we're going to extract 10 random transitions from the 100 so we can be the transition number

01:09.720 --> 01:17.700
six then 17 34 whatever transitions between 0 and 100 and therefore in this Fulop here I'm going to

01:17.700 --> 01:27.330
add a second looking variable which will be itx and which will correspond exactly to these 10 indexes

01:27.610 --> 01:31.200
of the 10 random transitions we're going to extract from the memory.

01:31.380 --> 01:32.150
OK.

01:32.460 --> 01:35.800
And so since we're looping over two indexes.

01:35.920 --> 01:38.780
Well we're not going to use the range function.

01:38.850 --> 01:44.970
We're going to use the numerate function which is the exact function we must use when we want to get

01:45.090 --> 01:46.970
two sets of indexes.

01:47.100 --> 01:54.590
And so now in this great function well we want to input 10 for the index because we want to get 10 transitions

01:54.590 --> 01:57.070
to create an input and the 10 targets.

01:57.270 --> 02:04.590
And then since I do X here corresponds to the 10 random indexes of the memory which will correspond

02:04.590 --> 02:07.980
to the 10 transitions we want to extract from the memory.

02:08.190 --> 02:16.830
Well X will take the values of 10 random numbers between 0 and 100 or between 0 and the number of elements

02:16.830 --> 02:19.620
of the memory at the time we were getting these batches.

02:19.750 --> 02:24.080
OK so how are you going to implement that in this enumerate function.

02:24.240 --> 02:26.540
Well the trick is to use the following.

02:26.640 --> 02:31.890
We're directly going to get our random numbers between 0 and 100.

02:31.890 --> 02:36.900
And to get them we're going to use as you can see them by then from them by we're going to get the random

02:36.900 --> 02:42.660
Mudgal and from the random module we are going to get the rand function which we've already used.

02:42.660 --> 02:51.450
Remember in the environment implementation at this specific step when we were simulating the new number

02:51.450 --> 02:55.520
of users and the new rate of data at a specific iteration.

02:55.770 --> 03:03.700
So here we are using the same trick Durans in function from the random module from the number library.

03:03.720 --> 03:11.140
And remember we have to input two arguments here which are the bounds between which we want to get 10

03:11.160 --> 03:19.710
random numbers for id x and so these are zero for the lower bound and not 100 because maybe our memory

03:19.710 --> 03:21.990
doesn't have 100 transitions yet.

03:22.020 --> 03:28.110
So instead of putting one hundred a year will simply get the actual length of the memory which we got

03:28.110 --> 03:29.750
into this led memory variables.

03:29.760 --> 03:33.940
I'm copying and pasting that here as upper bound.

03:34.170 --> 03:42.180
All right so by doing this we get 10 random integers between 0 and the length of the memory.

03:42.400 --> 03:47.010
But let's be careful that's going to give us the values that itx is going to take.

03:47.180 --> 03:54.600
And now to get also the values that is going to take which are simply the successive integers 0 1 2

03:54.600 --> 04:02.580
3 4 5 6 7 8 9 because indeed we want to get 10 inputs and 10000 good batches of inputs and target well

04:02.840 --> 04:04.620
to specify that we want this.

04:04.650 --> 04:06.200
We just need to add here.

04:06.330 --> 04:08.220
Size equals.

04:08.260 --> 04:11.170
So right now it is tempting to add 10.

04:11.350 --> 04:13.800
Remember same trap as before.

04:13.800 --> 04:17.890
There might not be already 10 transitions in the memory.

04:17.910 --> 04:20.930
So instead of putting 10 here you know the budget size.

04:21.180 --> 04:27.510
Well we have to take the minimum of the length of the memory and the batch size so I'm taking that again

04:27.870 --> 04:35.730
and I'm adding that here as the size which will correspond to the values that this first looping variable.

04:35.760 --> 04:38.200
I will take perfect.

04:38.230 --> 04:43.290
Now let's start populating our batches of inputs and targets.

04:43.370 --> 04:48.620
All right so now that we have everything that is the trend iterations of this for loop and also some

04:48.870 --> 04:51.500
random indexes between 0 and 100.

04:51.660 --> 04:54.310
Well time to get our transitions.

04:54.540 --> 04:57.480
And so that's exactly what we're going to get here first.

04:57.480 --> 05:03.560
And that's why I'm getting the four elements of each of these 10 transitions we're going to extract

05:03.950 --> 05:09.870
which are first the current state then the action plate.

05:10.130 --> 05:12.440
Then the reward received.

05:12.710 --> 05:20.510
And finally the next state then is reached by playing that action in this current state so that corresponds

05:20.510 --> 05:29.150
to a specific transition which we're going to get by extracting it from our memory cells that memory.

05:29.150 --> 05:35.330
And of course from that memory we're going to get first the right index of that transition which is

05:35.330 --> 05:38.150
of course ADX idea here.

05:38.390 --> 05:44.390
And then remember that each element of the memory is composed of two elements.

05:44.390 --> 05:47.420
First the transition itself and then game over.

05:47.420 --> 05:52.240
So to make sure we get that transition because we're not interested in getting game over yet.

05:52.520 --> 05:58.550
Well we're going to get the first element of this list of two elements and this first element has the

05:58.550 --> 05:59.950
index 0.

06:00.140 --> 06:05.650
All right so now we just got the transition which is composed of these four elements.

06:05.990 --> 06:09.460
And so that will allow us to compute the operations and the target.

06:09.470 --> 06:14.690
But before now we're going to get whether the game is over because before completing the preditions

06:14.690 --> 06:18.370
and the target we need to make sure that the game is not over.

06:18.370 --> 06:23.950
And so I'm getting the game over resolve here whether the game is over.

06:24.140 --> 06:29.700
And to get it well this time you know we're going to take that same transition from the memory.

06:29.810 --> 06:35.990
But instead of getting the transition itself well we're going to get the game over a result which hasn't

06:35.990 --> 06:41.760
decks one because it is the second element of this element of the memory perfect.

06:41.780 --> 06:48.440
Now we get game over and now we actually have everything to create and populate our batch of inputs

06:48.440 --> 06:49.780
and better diet.

06:49.790 --> 06:57.350
So let's start with the batch of inputs and since we are looping over the rows that were bubbling in

06:57.620 --> 07:03.560
the Badgeman put into our heads Well we just have to take care of a specific row because this specific

07:03.560 --> 07:05.440
row has the index.

07:05.810 --> 07:09.380
And what are we going to populate this row with.

07:09.500 --> 07:15.050
Well that's of course going to be the current state because a current state is nothing else than the

07:15.140 --> 07:18.540
input state of that specific transition.

07:18.660 --> 07:19.920
We're dealing with.

07:19.930 --> 07:20.670
All right.

07:20.780 --> 07:21.520
So good.

07:21.650 --> 07:27.820
So at the end of the for loop this will populate the whole batch of inputs coming from the turn extracted

07:27.830 --> 07:28.770
transitions.

07:28.980 --> 07:32.670
And now let's take care of the budget target.

07:32.750 --> 07:41.210
So saying we're going to take our initialized batch of targets which so far only contains 0 values and

07:41.330 --> 07:48.620
same we're dealing with a specific row of the budget targets that is a specific target and this target

07:48.620 --> 07:52.710
will be computed from the transition of index again.

07:53.090 --> 07:58.150
But here we can not directly target as we just said we have to compute it.

07:58.220 --> 08:04.280
And so now the question is what do we have to put in the 5 columns inside the specific row.

08:04.280 --> 08:12.050
I well remember we have to put the predicted values for the actions that were not selected and this

08:12.080 --> 08:19.190
specific formula here for the action that was selected in this specific transition that we just extracted

08:19.190 --> 08:20.080
from the memory.

08:20.300 --> 08:26.520
And so for us well what we're going to do is put the predictions for all the columns and then in this

08:26.520 --> 08:30.430
specific corresponding to the action that was played.

08:30.530 --> 08:32.150
We will put the right formula.

08:32.450 --> 08:38.690
So let's do this in order to get the predictions we're going to take our model because it is indeed

08:38.750 --> 08:40.330
one of our arguments here.

08:40.550 --> 08:47.720
And then from this model Well since the moral has to carry a structure you know it is an object from

08:47.720 --> 08:48.980
this model class.

08:49.100 --> 08:55.520
Well no that this class contains a method which is the predicate method and which of course will return

08:55.580 --> 08:57.160
the predicted values.

08:57.230 --> 08:59.260
And so that's exactly what we need right now.

08:59.420 --> 09:02.970
What we want to get are pretty true values.

09:03.050 --> 09:08.690
And so from this model and getting the Predict method and as an argument of this method we of course

09:08.690 --> 09:15.950
have to input the input of the model that will give us the predicted values and that input of course

09:16.010 --> 09:17.970
is the current state.

09:18.000 --> 09:23.840
And so let's actually take the current state again which corresponds of course to current state of that

09:23.840 --> 09:27.990
specific transition we're dealing with right now in this for loop.

09:28.220 --> 09:32.490
And so let's answer that here and then it's not over.

09:32.510 --> 09:38.890
This method actually returns two elements and the predicted value is actually the first of these elements

09:38.900 --> 09:45.080
and therefore here what we need to add is that index of the first element which is zero.

09:45.300 --> 09:46.790
Okay perfect.

09:46.790 --> 09:53.870
We now believe that correctly four of the five actions but now we're going to do the right replacement

09:54.110 --> 10:00.590
for the action that was played because indeed it doesn't get this value here that is the it you value

10:00.620 --> 10:04.080
but it will get exactly that formula here.

10:04.130 --> 10:06.800
So let's get it and let's get in two steps.

10:06.890 --> 10:13.370
We're first going to get the maximum of the predicted value for the next date which we have because

10:13.370 --> 10:17.530
again it is another element of our transition.

10:17.530 --> 10:20.690
The transition we're dealing with right now in the nube.

10:20.850 --> 10:22.300
And so we're going to call this.

10:22.390 --> 10:27.020
Q As a as for the states and a for the action.

10:27.110 --> 10:28.550
And so what do we want to get right now.

10:28.550 --> 10:31.970
We want to get exactly this this maximum.

10:31.970 --> 10:38.600
And so that's where I'm going to get first non-bio because number has this next function that can return

10:38.900 --> 10:43.750
the maximum of a row or column inside an array or even the maximum of an array.

10:43.850 --> 10:49.990
And that's exactly what we want to get you know we want to get the maximum predicted values of the next

10:49.990 --> 10:57.530
date and therefore here what I'm going to do is take all this copying and inside this Max function I'm

10:57.530 --> 11:04.820
going to paste that but replace of course the current state by the next date because what's exactly

11:04.820 --> 11:10.640
here inside this maximum are the cube values predicted by our model.

11:10.640 --> 11:14.690
But for the next date and that's the maximum over the actions.

11:14.750 --> 11:23.690
And since you know this is the row of dequeue values for that specific transition well this maximum

11:23.690 --> 11:30.400
will return the maximum of that row and the maximum of that Roka response to a specific action.

11:30.500 --> 11:35.930
And that's exactly the action that gives us here that maximum you know because that's the max over the

11:35.930 --> 11:36.660
actions.

11:36.830 --> 11:39.450
So that's exactly what we needed.

11:39.620 --> 11:45.810
And so now we are ready to compute the final formula of the target.

11:45.890 --> 11:53.030
That is the sum of the reward Plus the discount factor times the maximum that we just computed but be

11:53.030 --> 11:53.920
careful.

11:53.930 --> 11:57.250
Remember this game over that we have to deal with as well.

11:57.380 --> 12:01.850
Indeed when dealing with this specific transition that was just extracted.

12:02.030 --> 12:05.350
Well we need to check first if the game is not over.

12:05.600 --> 12:13.040
And so that's why before I can be the target we're going to check if the game is over.

12:13.210 --> 12:20.420
And so here we can either write equals 1 or even true because for bullion that's the same true equals

12:20.420 --> 12:20.980
one.

12:21.260 --> 12:26.240
But there is this more elegant way if you just put game over like that.

12:26.450 --> 12:34.880
This will exactly mean if game of true or equals one that then you can just as your Carlon and specify

12:34.880 --> 12:38.040
what's going to happen if indeed game of equal is true.

12:38.180 --> 12:39.940
That is if the game is over.

12:40.180 --> 12:47.090
And so if the game is over what is going to be this specific Culham corresponding to that specific transition

12:47.120 --> 12:50.500
of index that we're dealing with right now in the loop.

12:50.630 --> 12:56.410
And that specific action that was selected to be played by our AI.

12:56.600 --> 13:04.790
Well if the game is over we have to specify to our AI that it failed so that it doesn't repeat the same

13:04.790 --> 13:05.660
mistake.

13:05.660 --> 13:12.320
And the trick in reinforcement learning to specify this is to keep track of the reward at that specific

13:12.320 --> 13:14.170
stage when the game is over.

13:14.180 --> 13:20.260
And so here instead of putting this formula which is used for the training when the game is not over

13:20.600 --> 13:28.040
well we're just going to set that equal to the reward because after the game is over the AI has to know

13:28.040 --> 13:31.520
that it failed so that it doesn't repeat the same mistake.

13:31.790 --> 13:33.920
Remember that trick in reinforcement learning.

13:33.920 --> 13:39.860
And now you understand why we needed to get that game of variable in our environment.

13:39.860 --> 13:48.080
You know I specifically specified that getting game over here is a compulsory step in the general AI

13:48.080 --> 13:48.940
framework.

13:49.190 --> 13:51.260
So here we go.

13:51.440 --> 13:54.490
That's a new trick for you to know and to implement.

13:54.500 --> 14:00.050
And now on the other hand if the game is not over that is in the else condition.

14:00.290 --> 14:04.930
Well that's where we're going to compute the target with this formula.

14:05.120 --> 14:11.150
And that's this can be taken of the target that will be compared to the prediction which will incur

14:11.360 --> 14:14.690
less error between that target here as you can see here.

14:14.900 --> 14:21.080
And the prediction and then as the game is not over the slots will be back propagated into the neural

14:21.080 --> 14:23.730
network and through to get a grid in the center.

14:23.750 --> 14:29.810
We'll use our optimizer to update the weights to get some new weights which will reduce that loss error.

14:30.010 --> 14:30.680
OK.

14:30.830 --> 14:34.220
So let's go back to Python and let's compute that target.

14:34.400 --> 14:39.580
But for that specific action that was just elected.

14:39.580 --> 14:43.210
And for that specific transition we're dealing with right now in the loop.

14:43.370 --> 14:44.750
So I'm copying this.

14:44.900 --> 14:48.580
And what is that going to be equal to.

14:48.830 --> 14:56.930
Well that's going to be equal of course to the reward Plus the maximum of the Q values for the next

14:56.930 --> 15:03.530
date that is this next day here of the transition we're dealing with right now in the loop and we call

15:03.530 --> 15:05.020
this QSA.

15:05.140 --> 15:11.450
So here to finish the second edition of the target for that specific action that was played we just

15:11.450 --> 15:20.540
need to add our discount factor that we call self that does count multiplied by this maximum of the

15:20.540 --> 15:25.180
q values for the next stage that we called you essay.

15:25.190 --> 15:26.540
All right and perfect.

15:26.600 --> 15:30.200
We now have the formula of the targets.

15:30.280 --> 15:30.960
Great.

15:31.130 --> 15:32.000
And that's it.

15:32.120 --> 15:36.540
That populate our batch of inputs and batch of toilets.

15:36.620 --> 15:43.580
And so now the final step is we have to do to finish not only this get better method we're also this

15:43.930 --> 15:51.310
human class is of course to return our populated batch of inputs and batch of targets.

15:51.350 --> 15:52.360
And here we go.

15:52.360 --> 15:53.820
Congratulations.

15:53.930 --> 15:58.020
That's another big step done in this whole general AI framework.
