WEBVTT

00:00.490 --> 00:07.830
Hayrides Welcome back to the final exciting step of this Part 3 going into production and actually also

00:08.100 --> 00:10.890
the final exciting step of this implementation.

00:10.890 --> 00:17.910
Before we start actually improving the solution with two homeworks but here we are about to print the

00:17.910 --> 00:23.820
final route for our particular example you know where we start from location.

00:24.090 --> 00:28.380
And we have to go to the top priority location location.

00:28.680 --> 00:33.900
So we're going to test that out and we're going to check that our tool that we just made can actually

00:33.900 --> 00:38.080
return to roots the route going to the following locations.

00:38.440 --> 00:38.940
J.

00:38.950 --> 00:47.460
F. B C G or there is actually another optimal possible route which is either i j k l h g.

00:47.760 --> 00:50.330
And then you'll see we're going to do something fun.

00:50.340 --> 00:57.570
Remember that the second briery location is location K so in the second homework at this point one will

00:57.660 --> 01:04.710
improve our tools so that we optimize wherehouse flows even more by making sure that when again starting

01:04.710 --> 01:11.510
from location we are autonomous warehouse robot passes by the second top priority location location

01:11.540 --> 01:15.590
K before reaching the temporary location location.

01:15.900 --> 01:22.920
So that this time with this new feature it can only go through this path and never through this path

01:22.950 --> 01:27.670
because this is not a temporary location but that will be a second step.

01:27.750 --> 01:29.490
When we improve our tool.

01:29.610 --> 01:31.910
And for now we're just going to check that.

01:31.950 --> 01:38.550
Indeed we have these two optimal routes that can be returned by our system.

01:38.550 --> 01:41.580
All right so let's go back and let's bring that route.

01:41.580 --> 01:47.970
So first of all we'll just print we'll just make a nice print to say that we're printing the route.

01:48.030 --> 01:49.320
So here we go.

01:49.380 --> 01:50.460
Put that in quotes.

01:50.760 --> 01:51.990
And then just below.

01:52.150 --> 01:54.810
We're going to print indeed that's optimal.

01:54.990 --> 02:02.100
But we all have to make a print here we can just call our route function with the two inputs which are

02:02.100 --> 02:04.740
starting location and ending location.

02:04.980 --> 02:10.770
So the starting location is where we are right now that is where our ultimate warehouse robot is located

02:10.770 --> 02:13.800
right now and that is location.

02:14.220 --> 02:20.520
And then the second input is the ending location and that corresponds of course to the top priority

02:20.520 --> 02:22.550
location which is location.

02:22.920 --> 02:29.450
And therefore as a second input here we put location g in quote and that's it.

02:29.490 --> 02:32.280
This implementation is over.

02:32.280 --> 02:35.040
So I can just say now to make it fun.

02:35.190 --> 02:41.700
I'm going to reset everything here by restoring the kernel so you know you click on this little tool

02:41.700 --> 02:48.870
button here and then you'll see restart kernel and then you click yes that will restart everything you

02:48.880 --> 02:55.830
reset everything so that I'm going to execute this whole code several times and we'll see if indeed

02:55.830 --> 03:01.280
we get that to optimal path that we identified easily in our warehouse.

03:01.530 --> 03:03.570
So actually let's check them out again.

03:03.840 --> 03:07.130
The optimal path here you can check are either.

03:07.230 --> 03:07.860
I J.

03:07.860 --> 03:12.770
F. B C G or i j k l h g.

03:13.020 --> 03:22.080
And let's see if indeed by selecting this and executing this several times we get these two possible

03:22.230 --> 03:23.610
optimal path.

03:23.610 --> 03:24.920
All right let's do this.

03:24.930 --> 03:25.650
Here we go.

03:25.680 --> 03:28.840
Three two one and go.

03:28.890 --> 03:30.280
That's our first edition.

03:30.310 --> 03:35.320
And indeed we got one of the two possible optimal path.

03:35.350 --> 03:36.080
I J.

03:36.100 --> 03:39.170
B C G E I J.

03:39.180 --> 03:40.820
F. B C G.

03:40.830 --> 03:41.780
All right.

03:41.880 --> 03:43.040
Perfect good start.

03:43.050 --> 03:48.420
Now let's execute that again to see if we can indeed get the other possible optimal path.

03:48.720 --> 03:49.470
Here we go.

03:49.620 --> 03:54.310
And here we go we just got the second possible optimal path.

03:54.420 --> 04:00.070
I J K L h g it i j k l h g.

04:00.140 --> 04:01.030
Perfect.

04:01.040 --> 04:05.210
Now let's execute this once again several times.

04:05.210 --> 04:09.550
All right the first one second one second one again.

04:09.630 --> 04:10.380
First one.

04:10.490 --> 04:13.470
And here we go see an exit doing it several times.

04:13.490 --> 04:20.500
And of course we only get the two possible optimal path perfect.

04:20.510 --> 04:27.350
So we did it we made a tool that returns the optimal route from wherever we were starting.

04:27.380 --> 04:34.920
And wherever we're going you can actually check that for other examples of stoning locations and locations.

04:35.120 --> 04:38.480
And now we're going to add some bit of challenges in this too.

04:38.480 --> 04:44.390
We're going to improve it because indeed as we just said in the previous tutorial we would like to optimize

04:44.420 --> 04:46.130
even more the warehouse flows.

04:46.280 --> 04:53.900
Right now our AI is able to go to the top priority location from wherever it starts but remember we

04:53.900 --> 04:59.990
also have this other system which is connected to the warehouse and which is connected to our AI as

04:59.990 --> 05:06.360
well which gives us in real time the ranking of the priorities for each of the 12 locations.

05:06.650 --> 05:08.450
And here is this ranking.

05:08.450 --> 05:13.900
Remember that in second position we have location K which has priority number two.

05:14.120 --> 05:20.540
And so back in a warehouse now our goal will be to make sure that our other the most warehouse robot

05:20.990 --> 05:25.860
always goes by the location K and never through location.

05:26.090 --> 05:29.760
Before reaching that priorly location location.

05:30.050 --> 05:32.180
So that starting from location.

05:32.510 --> 05:41.150
Well in one path it can get the products in the second or location location K so that it gets on its

05:41.150 --> 05:43.240
way to the Priory location.

05:43.460 --> 05:45.490
The products of location.

05:45.820 --> 05:46.210
All right.

05:46.250 --> 05:49.010
That's how we have to improve our system.

05:49.010 --> 05:53.670
But first let's since now you're about to really do things by yourself.

05:53.780 --> 05:58.110
Well I'm going to provide the solution of course but you're about to really make something you could

05:58.130 --> 05:59.060
buy yourself.

05:59.300 --> 06:06.250
Well let's just warm up with a first preliminary homework and I already spoke about this.

06:06.260 --> 06:13.420
Remember here we had to manually put that high reward in this reward matrix here.

06:13.420 --> 06:22.400
You know we put 1000 word on that Selker respond in two locations you know rogue Collinge but it would

06:22.400 --> 06:30.860
actually be better that we leave this reward matrix initialized as it was with just ones and zeros.

06:31.100 --> 06:40.280
And inside this root function well we implement something that will automatically update the reward

06:40.280 --> 06:43.700
matrix or without us having to do anything.

06:43.900 --> 06:45.130
No that would be nice.

06:45.220 --> 06:48.590
That you know we can automate as much as possible the system.

06:48.770 --> 06:50.870
So do that first.

06:50.870 --> 06:57.890
The goal is just to improve the tool here so that we keep this word matrix initialized this way and

06:57.890 --> 06:59.530
it will always stay this way.

06:59.680 --> 07:05.630
But in this tool you have to implement something more so that the reward matrix is updated dramatically

07:05.630 --> 07:12.140
with the highest reward in that location where we want to go so that we don't have to manually change

07:12.230 --> 07:13.460
anything here.

07:13.460 --> 07:19.490
All right so that will already be a first improvement and then we'll do the real improvement by adding

07:19.490 --> 07:25.520
this feature which will allow the other animals warehouse robot to go by the second or priority location

07:25.880 --> 07:30.360
as an intermediary location before reaching the top priority location.

07:30.710 --> 07:36.550
All right so good luck with this verse homework and I'll provide the solution in the next tutorial.

07:36.620 --> 07:38.950
Until then have fun and enjoy AI.
