WEBVTT

00:00.210 --> 00:06.350
Are right here we go for the final step making a method that builds two batches of inputs and Target.

00:06.440 --> 00:11.340
We're going to have 10 inputs and the first batch of input and 10 targets in the second batch after

00:11.350 --> 00:17.460
I get and we'll create these two batches by extracting 10 transitions from the memory.

00:17.820 --> 00:19.100
Let's do this let's start.

00:19.110 --> 00:23.670
It's going to be a pretty long method so we'll tackle this in several steps.

00:24.000 --> 00:24.290
All right.

00:24.300 --> 00:30.120
So first of all we have to define this new method and we're going to call it get the patch all right

00:30.130 --> 00:36.100
because this will get us a badge and we'll actually return these two batches of inputs and toilets.

00:36.330 --> 00:41.060
OK so get that method taking three arguments.

00:41.080 --> 00:44.950
The first one's self of course for all the variables of the object.

00:45.090 --> 00:46.150
Then the second one.

00:46.320 --> 00:53.040
Well it's going to take our model because indeed in this get better method Well you know we'll have

00:53.040 --> 00:55.370
to get inputs in the target.

00:55.440 --> 01:02.340
But to get to target we'll have to get the predictions first and then we can see here the predictions

01:02.430 --> 01:08.470
of the next date by the model and therefore we will need the model to get these predictions.

01:08.670 --> 01:17.460
And so to get that model Well we'll put it in the arguments here to the get method and then final argument

01:17.820 --> 01:20.640
it's going to be well the batch size.

01:20.720 --> 01:27.210
So here in the code sections I am saying that we are indeed creating two batches of ten inputs and then

01:27.450 --> 01:28.150
target.

01:28.250 --> 01:30.330
But actually this 10 here is optional.

01:30.480 --> 01:36.210
You could create batches of different sizes and this size we will input it here so we can have the option

01:36.540 --> 01:44.820
of creating batches of different size but as default for this batch size we're going to give 10.

01:44.820 --> 01:46.610
All right so here we go.

01:46.710 --> 01:50.120
We are ready to implement that method.

01:50.130 --> 01:51.650
All right so what do we have to start with.

01:51.660 --> 01:56.060
Well we're going to start by getting the length of the memory.

01:56.230 --> 02:03.080
So here I'm introducing this new Voivode lend memory which will be very simply the length given by the

02:03.080 --> 02:09.050
len function of the memory which is our variable self that memory.

02:09.190 --> 02:09.970
OK.

02:10.230 --> 02:15.000
So we have the length of the memory and we introduce that portable because of course we will need that

02:15.000 --> 02:24.250
later then we are going to need the number of inputs and also the number of outputs.

02:24.270 --> 02:26.620
So of course the number of inputs is three.

02:26.640 --> 02:32.570
You know the number of elements in our input state vectors and the number of output is 5.

02:32.670 --> 02:35.290
The number of actions in the output layer.

02:35.520 --> 02:42.840
Let's get these two elements but I know it's tempting to write 3 and 5 but we want to make this implementation

02:43.140 --> 02:47.460
work for any input vector dimension and the output dimension.

02:47.460 --> 02:52.830
So we will have to get these values another way and for the number of input it's going to be quite tricky.

02:52.920 --> 03:00.570
We're going to get that by the memory because indeed since each element of the memory contains the transition

03:00.660 --> 03:01.890
and game over.

03:01.890 --> 03:07.830
And since the transition contains the current state the action played the reward and the next day.

03:08.100 --> 03:12.960
Well we're going to get either the current state or the next date and we'll take the diamond ssion of

03:13.000 --> 03:14.020
that state.

03:14.040 --> 03:19.000
That's the way we can get the number of inputs by making sure we generalize everything.

03:19.020 --> 03:21.540
So let's get a number of inputs first.

03:21.690 --> 03:29.070
As we said we're going to get that from our memory and now please focus because I'm going to do quite

03:29.070 --> 03:35.260
a tricky thing first I'm going to get any element of the memory and I'm going to get the first one.

03:35.410 --> 03:41.040
And so here where I've just got is exactly this a list of two elements.

03:41.040 --> 03:44.960
The first element being the transition and the second element being game over.

03:45.120 --> 03:49.800
And now since I want to get the transition because then I want to get the state while I'm going to get

03:49.890 --> 03:55.950
the first element of that list of two elements and to get the first element I'm going to get the first

03:56.040 --> 03:59.820
index of that list of two elements which is the index 0.

04:00.090 --> 04:06.950
So that gives me the transition but then remember that the transition is a list of four elements.

04:06.990 --> 04:08.680
The first one being the current state.

04:08.730 --> 04:11.990
The second one the action played the third one the reward received.

04:12.210 --> 04:13.870
And the fourth one the next date.

04:13.920 --> 04:19.300
And so here since I want to get the number of inputs that is the number of elements in a state.

04:19.470 --> 04:26.790
I can just take the first element of that transition which again has the index 0 and that will give

04:26.790 --> 04:27.690
me that state.

04:27.720 --> 04:36.540
And now finally to get that number of elements in the state well remember since the state is a matrix

04:36.840 --> 04:41.380
you know we created our state with this matrix function by name by.

04:41.560 --> 04:48.700
Well the trick to get that number of elements in the state is just add here.

04:48.750 --> 04:56.700
Shape of index one because this is indeed an attribute of this matrix structure that we created for

04:56.700 --> 04:57.390
the state.

04:57.510 --> 05:03.020
And the second element of this attribute is exactly this number of inputs that we need right now.

05:03.140 --> 05:03.450
OK.

05:03.460 --> 05:05.570
So now you know everything.

05:05.740 --> 05:12.670
And now let's get the number of outputs saying we need to figure out a way to get that so that we generalize

05:12.670 --> 05:15.100
everything and that directly input 5.

05:15.200 --> 05:18.630
And to get that well this time let's use the model.

05:18.640 --> 05:26.340
It's going to be more simple because indeed remember that tomorrow contains no thanks to this awesome

05:26.340 --> 05:33.660
blush that we did the output layer and the output layer contains exactly this output vector of q values.

05:33.670 --> 05:38.710
So by getting the output layer of the model Well we'll be able to get the number of actions because

05:38.710 --> 05:43.030
the number of actions is exactly the number of elements in this output vector.

05:43.030 --> 05:50.260
So I'm going back to my dequeue an implementation that I'm going to get my model which is a no argument

05:50.530 --> 05:51.730
to get better method.

05:51.790 --> 05:58.060
And from this model I'm going to get another attribute which is all defined in the Keres API and which

05:58.060 --> 06:02.030
is this time output shape just like that.

06:02.170 --> 06:09.250
And so output shape will give us some informations of the outputs of the model that is this output layer

06:09.250 --> 06:10.790
containing the q values.

06:10.870 --> 06:16.900
But to get what we want there is a number of elements in this output where we have to take the last

06:17.260 --> 06:25.240
column of this output shape structure and minus one is exactly that index of the last element.

06:25.240 --> 06:25.900
All right so good.

06:25.900 --> 06:33.680
We have a number of inputs and the number of outputs and so now we are ready to initialize our two batches.

06:33.760 --> 06:37.730
First the batch of input and second the batch of targets.

06:37.840 --> 06:41.670
So let's start with the batch of inputs which I'm going to curl here and put.

06:41.860 --> 06:46.720
So I'm just introducing this new variable input which will be this first batch of 10 inputs.

06:46.960 --> 06:49.440
And so how are you going to initialize this.

06:49.600 --> 06:55.670
Well these batches are basically going to be an array of 10 rows and three columns.

06:55.810 --> 06:59.730
So each row will respond to a specific input state.

06:59.740 --> 07:05.140
Each row will be the input state and the three columns are going to be of course the three elements

07:05.290 --> 07:06.190
of the state.

07:06.190 --> 07:09.460
So the first column is going to be remember the number of users.

07:09.640 --> 07:14.260
Then the second column is going to be the rate of data transmission and the third column is going to

07:14.260 --> 07:17.120
be the temperature of the server when we have the AI.

07:17.260 --> 07:21.090
You know that's the three elements of our input states.

07:21.220 --> 07:26.640
And so to create this array structure of 10 rows and three columns.

07:26.770 --> 07:31.660
Well we're going to do that with non-pay because with NUMP we can create some what we call non-Thai

07:31.660 --> 07:36.590
arrays which are basically some arrays of whatever number of rows and number of columns.

07:36.670 --> 07:42.670
But since now we are just initializing everything well so far we're just going to initialize everything

07:42.670 --> 07:47.220
with zeros and Dittrich to initialize a full array with zeros.

07:47.470 --> 07:50.030
It's just to use the zero's function.

07:50.200 --> 07:56.240
And that inside is a function that will specify the dimensions you want that is the 10 rows for the

07:56.250 --> 08:01.110
10 input states and the three columns for the three elements of each state.

08:01.120 --> 08:07.660
So let's start with number of rows number of rows is going to be the batch size because we want to have

08:07.660 --> 08:10.680
10 inputs that is 10 rows in this batch of inputs.

08:10.840 --> 08:12.750
But let's be careful.

08:12.760 --> 08:19.180
That's why I specified here remember that we are going to create our two batches of 10 important targets

08:19.480 --> 08:22.660
by extracting 10 transitions from the memory.

08:22.810 --> 08:26.860
But imagine the memory doesn't have yet 10 transitions.

08:27.040 --> 08:32.020
Well in that case I will just add all the transitions of the memory that is you know for example the

08:32.020 --> 08:33.740
memory has six transitions.

08:33.880 --> 08:37.770
Well we will extract six input state from the memory.

08:37.960 --> 08:47.080
And so instead of putting here batch size Well we have to take actually the minimum of the batch size

08:47.350 --> 08:55.480
and the length of the memory which we already introduced as a variable right here and memory was the

08:55.480 --> 08:57.360
length of our memory object.

08:57.590 --> 08:58.740
Okay perfect.

08:58.750 --> 09:04.020
So that be careful for the number of rows of this batch of input we're creating.

09:04.110 --> 09:09.610
But then for the second element we have to specify the number of columns of our batch of input.

09:09.760 --> 09:15.620
And as we said these Kurzban to the three elements of our input state and good news.

09:15.700 --> 09:16.990
We already got that.

09:17.080 --> 09:20.940
That's where we needed to get this number of inputs here.

09:21.100 --> 09:28.310
So I'm going to get it because that's exactly the second element that is the number of columns.

09:28.750 --> 09:36.070
But now be careful with something this element of these two informations containing the number of rows

09:36.160 --> 09:42.730
and the number of columns is actually the first element of this zero's function.

09:42.880 --> 09:45.670
And that's the only argument we need to end with here.

09:45.670 --> 09:47.620
There is this couple of two elements.

09:47.710 --> 09:51.340
The number of rows and the number of columns in our batch of inputs.

09:51.510 --> 09:52.630
All right perfect.

09:52.630 --> 09:56.860
We took care of the inputs and now let's stay here of the targets.

09:56.860 --> 10:03.300
The second batch that we have to create and so I'm going to introduce a new arrival here called targets.

10:03.490 --> 10:05.120
That's how I choose to call it.

10:05.410 --> 10:09.520
And same just as what we did here with the batch of inputs.

10:09.760 --> 10:15.970
Well we were going to create that batch of targets with the same number of rows because we want to have

10:16.420 --> 10:20.290
the same number of rows in the batch of target as in the batch of inputs.

10:20.410 --> 10:26.290
And so while we will of course keep the same because that's exactly the same number of rows as in here.

10:26.530 --> 10:32.460
But now for the number of columns that's where things change in this specific array of the time yet

10:32.770 --> 10:38.110
because now we're not going to have three columns that corresponded before to the three elements of

10:38.110 --> 10:39.110
the input states.

10:39.280 --> 10:44.860
But of course we're going to have five columns corresponding to the number of actions because I remind

10:44.860 --> 10:52.990
that we'll have a target for each of the action and if we go too deep you're an algorithm to target

10:52.990 --> 10:56.980
that you see here is for the action that will be selected.

10:57.160 --> 11:03.220
You know in each of the transitions in the bet be well we have the action because the transition is

11:03.220 --> 11:08.240
composed of the current state the action played the word received and the next date.

11:08.260 --> 11:14.870
And so this target here this formula the target will of course correspond to the action played.

11:15.100 --> 11:22.040
But still we are going to make the target array that will contain 10 rows because that's our bet size.

11:22.210 --> 11:28.240
And then five columns and then in the five columns you will see in the end we'll get this formula here.

11:28.270 --> 11:34.570
The target for the action that was played and just the predictions for the other actions you know the

11:34.570 --> 11:40.270
other actions that were not selected at that specific transition of the batch.

11:40.270 --> 11:46.780
All right so we have to create a batch of targets of 10 rows and five columns and therefore here I'm

11:46.780 --> 11:55.640
going to place a number of inputs by the number of outputs which we already got right here.

11:55.750 --> 11:56.440
Perfect.

11:56.440 --> 12:03.460
So now we initialized our batch of inputs and batch of targets and the next step is going to be to populate

12:03.670 --> 12:08.770
these batches of inputs and toilet's because that's exactly what is going to return this get better

12:08.770 --> 12:09.440
method.

12:09.730 --> 12:13.770
So we're going to do that in next tutorial because we're going to have to make it big for loop.

12:13.780 --> 12:14.680
So let's take a break.

12:14.680 --> 12:18.130
Let's get an energy and we'll smash this and the next toile.

12:18.190 --> 12:19.850
Until then enjoy AI.
