WEBVTT

00:00.270 --> 00:06.350
Hello and welcome back on this journey this second journey of the course we have made some good progress.

00:06.360 --> 00:08.760
We are actually past halfway.

00:08.880 --> 00:15.210
And now that we have the environment the brain of our AI and the U.N. elements.

00:15.360 --> 00:22.560
Well we are ready to start the training and that's why I'm here in this newfound training that why where

00:22.650 --> 00:25.140
I've already prepared everything.

00:25.140 --> 00:27.460
So what do I mean by prepare everything.

00:27.630 --> 00:34.680
Well since this is actually the file that will run you know we will only execute the code of this file.

00:34.800 --> 00:38.010
Well I here the library is to install.

00:38.070 --> 00:42.690
We want to install them now we will do that at the very end because I want to focus on the implementation

00:42.690 --> 00:43.140
now.

00:43.320 --> 00:49.530
And you will see that this will be a very quick and easy installation with absolutely no issue.

00:50.040 --> 00:55.480
And then I've also prepared the libraries that we'll need for this implementation trending that way.

00:55.620 --> 00:57.590
So let's have a look at them quickly one by one.

00:57.690 --> 01:01.150
Here we import os which means operating system.

01:01.260 --> 01:09.270
And that's only because we are setting a C here for reproducibility purposes which means that when I

01:09.330 --> 01:11.730
execute the training you know we'll see some results.

01:11.880 --> 01:16.720
And on your side when you execute the training the same training on your computer.

01:16.800 --> 01:18.160
Well thanks to this.

01:18.270 --> 01:23.850
You will get the same result not only thanks to this but also thanks to this where he will fix a seed

01:24.060 --> 01:26.830
for all the known by random conditions.

01:26.910 --> 01:33.800
And again here where we fix the seed for all the random mutations coming from the random library.

01:33.840 --> 01:39.630
All right remember we did this at some point in the environment when simulating the fluctuations of

01:39.630 --> 01:42.780
the number of users and the rate of data transmission.

01:42.810 --> 01:48.720
All right so I did that only for teaching purposes and that's why we did not code that together.

01:48.720 --> 01:54.680
But then what is very important to understand is that here we are about to implement the whole training.

01:54.750 --> 02:00.630
Well we have to import everything that we've made so far in the environment.

02:00.630 --> 02:07.320
Of course we'll have to create the server environment to be able to train an AI onto it and regulate

02:07.350 --> 02:09.180
its energy consumption.

02:09.180 --> 02:15.180
And then of course we'll import the brain you know we'll create a brain object so that our I can have

02:15.180 --> 02:19.220
a brain ready to be trained to regulate the temperature.

02:19.260 --> 02:26.250
And of course all the different elements which will be created through an object of the teacher in class

02:26.260 --> 02:28.500
we implemented in the fall.

02:28.670 --> 02:29.270
OK.

02:29.490 --> 02:35.090
So not to confuse these are built in libraries and these are our foules.

02:35.100 --> 02:36.030
OK.

02:36.030 --> 02:36.440
All right.

02:36.450 --> 02:37.140
Perfect.

02:37.140 --> 02:39.200
Then we start to see it here and now.

02:39.240 --> 02:46.050
The first step and which belongs to the general AI framework is to set all the parameters that will

02:46.050 --> 02:48.090
need for this training implementation.

02:48.090 --> 02:48.890
So here we go.

02:48.960 --> 02:50.130
Let's get started.

02:50.460 --> 02:54.220
All right so the first parameter that we'll get is Epsilon.

02:54.510 --> 03:02.100
And this is going to be the exploration parameter because you know when we train an AI it is always

03:02.100 --> 03:06.660
recommended to do some exploration versus exploitation.

03:06.690 --> 03:13.650
Exploitation is when you directly train your AI AI with its predictions and exploration is to play some

03:13.650 --> 03:18.040
random actions instead of the actions returned by your AI.

03:18.240 --> 03:24.990
And so it is recommended to have some part of exploration and the more your problem is complex the more

03:24.990 --> 03:25.920
you have to explore.

03:25.920 --> 03:33.150
So here we'll do 30 percent of exploration and this Epsilon parameter that I'm introducing now will

03:33.150 --> 03:41.430
be exactly this 30 percent no 0.3 here means that we will do 30 percent exploration then you will understand

03:41.700 --> 03:44.820
how we will use this epsilon to make that happen.

03:44.970 --> 03:53.280
Then the next parameter is going to be the number of actions which of course is five.

03:53.310 --> 03:57.650
We need that because we will need to enter the number of actions at some point.

03:57.990 --> 04:03.770
Then a new variable which we haven't introduced before and which is simply going to be you know that

04:03.780 --> 04:10.950
boundary separating the two directions of temperature change that the Aikin cause and by boundary I

04:10.950 --> 04:13.420
mean the boundary of the actions index's.

04:13.440 --> 04:22.980
So the actions are either 0 1 2 3 or 4 0 and 1 means that AI's cooling down the server and 4 and 5 means

04:22.980 --> 04:25.450
that the AI is heating up the server.

04:25.650 --> 04:32.460
And so that boundary that I want to introduce now is going to be that middle index to correspond to

04:32.460 --> 04:37.560
the situation where your AI doesn't transfer any heat to the server.

04:37.830 --> 04:44.890
But since you know you might want to train your AI with a different number of actions.

04:45.060 --> 04:53.550
Well I'm not going to say that it's going to be directly to here but the number of actions minus one

04:54.330 --> 04:56.460
then divided by two.

04:56.790 --> 04:57.420
OK.

04:57.480 --> 05:01.900
And when we have five actions that gives us exact the boundary index of two.

05:02.080 --> 05:02.860
OK.

05:02.950 --> 05:10.000
Now we can move on to the next parameter which is going to be the total number of books over which we'll

05:10.000 --> 05:11.290
train our AI.

05:11.290 --> 05:15.590
And this is going to be one thousand epochs.

05:15.650 --> 05:16.050
All right.

05:16.060 --> 05:21.520
But then no worries we will do something better than training it on 1000 airbags but that will be for

05:21.520 --> 05:25.600
the homework gets a number of books equals 1000.

05:25.600 --> 05:35.200
Then we will introduce the maximum size of the memory which will be 3000 So we'll have a big experience

05:35.220 --> 05:35.860
replay.

05:36.110 --> 05:42.790
So Max Memory here is of course the parameter max memory here in the dequeue in class which means that

05:42.790 --> 05:47.540
the maximum size of our memory and experience replay will be 3000.

05:47.890 --> 05:56.680
Then the batch size which again is the size of the both the batches of inputs and the target.

05:56.800 --> 06:03.380
So actually here I'm going to remove the tents that was just for the default value to explain this before.

06:03.430 --> 06:08.260
Of course we're not going to have batches of ten inputs and 10 targets that is too small.

06:08.260 --> 06:17.360
We all have batches of 512 inputs and target 512 is actually a choice of common practice.

06:17.500 --> 06:27.990
You know you will usually see some batch sizes of either 32 64 128 256 and sometimes 512.

06:28.000 --> 06:30.390
So we'll try with 512.

06:30.400 --> 06:36.340
But of course feel free to choose your model and by choosing your model I just mean changing the values

06:36.340 --> 06:42.100
of the parameters here or changing the parameters in the architecture of the brain you know you can

06:42.100 --> 06:46.180
try with a different number of hidden neurons here in the hidden layers.

06:46.480 --> 06:47.300
OK.

06:47.420 --> 06:58.220
Then after the batch size we have to introduce one final variable which is the temperature step and

06:58.220 --> 07:05.720
that is the difference of temperature changes caused by the onto this or between two consecutive indexes

07:05.720 --> 07:06.750
of the action.

07:06.830 --> 07:15.450
And since you know we go from minus three to minus 1.5 to 0 2 plus 1.5 and 2 3 Well that means the step

07:15.740 --> 07:20.070
of temperature change between two consecutive actions is 1.5.

07:20.330 --> 07:22.330
And that's exactly this temperature step here.

07:22.370 --> 07:28.160
So I'm introducing an initialising temperature step as 1.5 and perfect.

07:28.220 --> 07:35.990
That's all for the parameters we have to introduce and initialize for this training implementation.

07:36.010 --> 07:41.150
So now we'll move on to the next step which will be a fun step because that will consist of creating

07:41.480 --> 07:44.090
the object of everything we've built.

07:44.270 --> 07:51.860
So an object for the environment an object for the brain and an object for the U.N. algorithm.

07:51.950 --> 07:54.130
So you will see that we'll do that in a flash light.

07:54.140 --> 07:59.090
We'll just have to get for each of them the parameters of the init method.

07:59.210 --> 07:59.920
Right.

07:59.990 --> 08:03.770
These ones and these ones and that will be it.

08:03.890 --> 08:06.590
But we'll have to choose some relevant values.

08:06.590 --> 08:10.690
So think about this and let's do this together in the next tutorial.

08:10.730 --> 08:12.290
Until then enjoy AI.
