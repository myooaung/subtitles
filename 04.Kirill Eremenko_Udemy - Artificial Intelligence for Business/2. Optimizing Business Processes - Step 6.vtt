WEBVTT

00:00.480 --> 00:06.950
Hi Guys welcome back to spider I hope you had the chance to play around to get familiar with this idea

00:07.380 --> 00:13.010
as you can see I started my implementation by adding the following titles so I put that in the common

00:13.020 --> 00:15.260
because this won't be executed.

00:15.420 --> 00:19.790
And to add a comment in Python you just need to start the line of code with the hash tag.

00:19.950 --> 00:26.340
So artificial intelligence for business and we are in our first case study optimizing warehouse flows

00:26.340 --> 00:33.650
with Kulemin and we're going to start our implementation with two first very important code sections.

00:33.670 --> 00:40.320
First one where we'll import the libraries that we'll use for this case study to build our AI solution

00:40.800 --> 00:47.880
and we'll only use one library which will be done by library and then a second section 7 code section

00:47.880 --> 00:53.640
and I highly recommend to include this code section at the beginning of your implementation.

00:53.670 --> 00:59.940
That's the code section where you gather all the parameters of your implementation and you choose their

00:59.940 --> 01:00.500
value.

01:00.630 --> 01:02.850
You know that's usually how we do things.

01:02.850 --> 01:10.530
When building a deep learning model or solution we set the parameters at the beginning of our implementation.

01:10.770 --> 01:13.750
So let's do this let's start by importing the libraries.

01:13.800 --> 01:15.760
Well it's going to be very easy.

01:15.780 --> 01:21.900
We only have to import the by library which will allow us to work easily with arrays and easily with

01:22.140 --> 01:28.980
mathematical operations and to import a library and by then we simply need to start with import import

01:28.980 --> 01:29.720
command.

01:29.850 --> 01:33.000
Then we add the name of the library which is non-pay.

01:33.390 --> 01:39.930
And since we're going to call them by many times in implementation we're going to use a shortcut just

01:39.930 --> 01:47.310
for simplicity purposes and the shortcut name will be the classic N.P. shortcut and add a shortcut in

01:47.310 --> 01:47.980
Python.

01:48.060 --> 01:51.460
You just need to add here after your import as.

01:51.660 --> 01:57.670
And then the name of your shortcut so that when we called them by library we don't have to type and

01:57.690 --> 02:00.510
by we can just type and that's it.

02:00.690 --> 02:05.420
That's all we'll need with regard to libraries for children.

02:05.670 --> 02:06.740
Perfect.

02:06.750 --> 02:12.690
And now let's set the parameters of this implementation since we're dealing with learning.

02:12.810 --> 02:15.600
We only have two important parameters.

02:15.600 --> 02:21.570
Indeed if I show you again the Q learning algorithm the whole learning algorithm Well you can see that

02:21.570 --> 02:24.550
in this algorithm we only have two parameters.

02:24.660 --> 02:31.650
The first one is gamma discount factor in the temporal difference and the second one is alpha.

02:31.710 --> 02:37.440
The learning rate in the ultimate curin equation which is the bellmen equation.

02:37.440 --> 02:43.620
So these are the only parameters of the current algorithm and that's what we have to set and choose

02:43.760 --> 02:44.550
value.

02:44.760 --> 02:49.000
In this first introductory code section of this implementation.

02:49.220 --> 02:58.040
So let's do this let's first choose a value for the discount factor called gamma and the value we're

02:58.050 --> 02:58.720
going to choose.

02:58.770 --> 03:05.660
That actually turns out to work very well for our AI solution is 0.75.

03:05.850 --> 03:09.100
And now it's big developing for the other parameter.

03:09.120 --> 03:17.130
The only other parameter for kerning which is the learning rate alpha alpha and Ruchi is the value zero

03:17.190 --> 03:18.080
point nine.

03:18.120 --> 03:24.120
The learning rate here doesn't have much impact on our AI solution but feel free to choose some other

03:24.120 --> 03:24.960
values.

03:24.960 --> 03:30.500
Basically the lower value choose the slower will be q learning and the higher value choose the faster

03:30.530 --> 03:31.550
will be cooler.

03:31.720 --> 03:32.410
All right.

03:32.610 --> 03:39.510
So these are our two parameters and now we are ready to start the core of our implementation.

03:39.510 --> 03:42.520
And so I structure this implementation in three parts.

03:42.520 --> 03:49.730
Part 1 defining the environment part to building the solution with Q learning and training it with new

03:49.740 --> 03:50.380
learning.

03:50.640 --> 03:53.420
And part 3 going into production.

03:53.550 --> 03:57.720
So let's start part 1 in the next tutorial and until then enjoy AI.
