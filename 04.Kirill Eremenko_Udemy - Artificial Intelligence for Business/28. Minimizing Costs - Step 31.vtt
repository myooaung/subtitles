WEBVTT

00:00.590 --> 00:04.520
Hello and welcome back as you can see I've just improved a little bit.

00:04.520 --> 00:11.180
The general framework by highlighting more general steps here I added that indeed we're starting to

00:11.180 --> 00:15.280
loop over all the books and one book equals five month.

00:15.290 --> 00:19.580
But I wrote that in minimal letters because that's specific to our case theory.

00:19.660 --> 00:25.640
However this belongs indeed to the general AI framework and then inside this group we have a second

00:25.640 --> 00:29.930
for loop that loops over all the time steps in one book.

00:29.990 --> 00:34.350
And of course in our specific case study one time step equals one minute.

00:34.490 --> 00:35.900
All right and then what do we do.

00:35.900 --> 00:42.280
We played the next action by expiration and we made sure this would happen 30 percent of the time.

00:42.380 --> 00:44.780
And then as 70 percent of the time.

00:44.870 --> 00:50.450
Well we're going to play the next action by inference meaning that the action will be the result of

00:50.630 --> 00:52.310
our brains prediction.

00:52.550 --> 00:56.980
And besides by doing this the exploration versus exploitation.

00:57.140 --> 01:04.130
Well we made sure to get the direction and the energy spent by the AI onto the server and we did this

01:04.250 --> 01:11.750
so that we can have all the elements required to call the update on function because indeed the arguments

01:11.750 --> 01:18.260
of the update function are first to direction which we got then the energy spent by the AI which we

01:18.260 --> 01:24.680
got as well and the month we are in at that specific time step of the training when we are about to

01:24.770 --> 01:31.160
update the environment and that we've got as well because indeed we initialized it right here with the

01:31.160 --> 01:31.890
new month.

01:32.000 --> 01:38.240
And then by updating the environment well then your month will be updated if the next time step takes

01:38.240 --> 01:39.300
us to the next month.

01:39.460 --> 01:40.030
OK.

01:40.220 --> 01:46.950
So basically we are 100 percent ready to update the environment and reach the next set.

01:47.150 --> 01:53.300
So let's do this and we will actually do this in a flashlight because as you understood what we only

01:53.300 --> 02:00.400
need to do to update our environment is to call this a date method.

02:00.500 --> 02:07.650
So I computed and I even got the arguments because we will need them and replace them by their values.

02:07.670 --> 02:09.880
So now I'm going to paste it.

02:10.010 --> 02:12.220
But then there's a date of method.

02:12.320 --> 02:16.400
Remember that it returns actually some elements.

02:16.460 --> 02:22.910
Let's remind what they are as we can see it returns the next date the reward and game over.

02:23.120 --> 02:28.190
So now what I'm going to do is get all of them and I'm going to make sure to remove the self because

02:28.340 --> 02:31.080
that's only for the definition of the class.

02:31.340 --> 02:33.410
So let me go back to the training.

02:33.500 --> 02:37.220
Now I'm going to paste this and add an equal.

02:37.310 --> 02:42.830
And that's how we make sure that we call correctly the update on function.

02:42.980 --> 02:45.720
And now of course as I said we're going to remove the self.

02:45.860 --> 02:47.320
This one for the reward.

02:47.450 --> 02:49.170
This one for Game over.

02:49.310 --> 02:57.060
And of course this one here and now we are going to update the right values of the arguments.

02:57.170 --> 02:59.370
So let's start with the first one direction.

02:59.480 --> 03:02.070
Is it the right name for this argument.

03:02.150 --> 03:07.190
Well yes of course because that's how we introduced the variable for that direction.

03:07.190 --> 03:08.680
We called it by the same thing.

03:08.870 --> 03:12.310
Then the energy spent by the AI is that the right name.

03:12.380 --> 03:13.010
Yes.

03:13.010 --> 03:13.830
Again it is.

03:14.060 --> 03:21.110
Because that's what we introduce here for that exact same variable being the energy spent by the AI

03:21.230 --> 03:22.290
onto the answer.

03:22.670 --> 03:28.700
And then finally the month that's where we have to change something because indeed we did not introduce

03:28.730 --> 03:30.770
any month of very well here.

03:30.860 --> 03:38.060
And what we have to import here for this month argument is exactly the month we are in right now when

03:38.060 --> 03:40.240
updating the environment.

03:40.250 --> 03:43.650
However this is not that direct or you know quick and easy.

03:43.850 --> 03:45.860
It's not going to be the new month.

03:46.100 --> 03:55.450
It's actually going to be the integer division of the timestep divided by this 30 times 24 times 60.

03:55.460 --> 03:56.480
Why is that.

03:56.480 --> 04:03.050
That's because the timestep will be you know over the iterations the total number of minutes we have

04:03.050 --> 04:05.510
reached in this five month period.

04:05.660 --> 04:09.130
And therefore imagine we've already passed two month.

04:09.260 --> 04:15.140
Well the number of minutes that is the timestep here will be the number of minutes of these past two

04:15.140 --> 04:15.660
months.

04:15.890 --> 04:22.460
And therefore what we need to do is divide this total number of minutes over the month divided by the

04:22.460 --> 04:30.020
total number of minutes in one month right because 30 days times 24 hours time 60 Minutes is the total

04:30.020 --> 04:31.770
number of minutes in one month.

04:31.910 --> 04:39.410
And therefore by doing the integer division of the timestep divided by this well we will get exactly

04:39.770 --> 04:42.750
the index of the month we are in.

04:42.760 --> 04:47.270
All right so that was a little difficult to hear for this argument there was not that direct.

04:47.450 --> 04:48.600
So lets do this.

04:48.660 --> 04:54.940
We're going to replace Now this month argument here which is only the name of the argument we gave in

04:55.040 --> 04:56.370
the update method.

04:56.540 --> 05:06.470
But as we said now we have to take that integer division of the timestep divided by nuper and this is

05:06.470 --> 05:13.280
because I'm going to add a big multiplication to divided by 30 the number of days in one month times

05:13.460 --> 05:14.330
24.

05:14.330 --> 05:22.100
The number of hours in one day times 60 the number of minutes in one hour and that will give us exactly

05:22.370 --> 05:27.740
the index of the month we are in right now when updating our environment.

05:27.740 --> 05:30.950
And then one final thing we must not forget.

05:31.040 --> 05:36.160
And actually we can think biathlon to remind us this is undefined.

05:36.170 --> 05:37.230
Name a date.

05:38.090 --> 05:40.300
Can you guess the last thing we need to do here.

05:40.310 --> 05:41.650
It must be a reflex.

05:41.720 --> 05:48.410
That's also the danger when doing copy paste but thanks to the warnings we won't forget the last thing

05:48.500 --> 05:57.170
missing here is of course to specify that this update of method is a method of our environment object

05:57.470 --> 05:59.880
which we created here you know.

05:59.980 --> 06:08.420
And here is an object of the and Varman class we defined in this environment pattern file.

06:08.450 --> 06:12.420
So that's the only thing missing in this line of code.

06:12.560 --> 06:13.860
So I'm just going to add this.

06:14.010 --> 06:16.270
And now the warning should disappear.

06:17.460 --> 06:18.320
Perfect.

06:18.420 --> 06:19.190
All right.

06:19.220 --> 06:26.910
Now let's just not forget to update the total word because indeed we just got the reward and therefore

06:26.970 --> 06:33.150
we can update the total we word which we initialized here as 0 of course at the beginning.

06:33.150 --> 06:42.020
No word has been received and so I'm going to update it by simply incrementing it by the reward.

06:42.180 --> 06:44.190
I'll write that we just got here.

06:44.190 --> 06:48.410
Thanks to our date of method of our environment object.

06:48.480 --> 06:49.380
All right perfect.

06:49.550 --> 06:57.060
And so now that we have reached the next date and that we also received the reward and also the game

06:57.060 --> 06:58.030
over very well.

06:58.110 --> 07:05.640
Well that means we just got a new transition and therefore now we have to store it in to the memory

07:05.970 --> 07:11.140
because our D-1 model is implemented with experience replay.

07:11.250 --> 07:13.150
And remember in our human class.

07:13.170 --> 07:21.690
Well we have this method remember that builds the memory defines an experience replay and so right now

07:21.690 --> 07:29.100
what we're exactly about to do is of course remember this new transition that we just got by reaching

07:29.100 --> 07:31.240
that next date and receiving that reward.

07:31.470 --> 07:34.210
And to do this we are going to add this to the memory.

07:34.470 --> 07:40.800
So now what we're going to do is get are you an object.

07:40.830 --> 07:45.480
And from this did you an object we're going to get the remember method.

07:45.570 --> 07:46.690
Which takes.

07:46.890 --> 07:47.730
Well let's see.

07:47.790 --> 07:50.770
Let's see the arguments and let's copy paste them again.

07:50.880 --> 07:51.990
Here they are.

07:52.020 --> 07:55.500
It takes the transition and game over.

07:55.500 --> 08:00.970
However you will see that we will have to replace all the the transition.

08:01.170 --> 08:01.490
All right.

08:01.500 --> 08:04.830
That's the two arguments of the remember method.

08:04.830 --> 08:05.900
Game over is fine.

08:05.910 --> 08:10.380
We can leave it this way because that's exactly the name of the Vargo we gave to it.

08:10.380 --> 08:14.590
However the transition is only the name of the argument of the remember method.

08:14.700 --> 08:18.580
So we have to clearly specify what is this transition.

08:18.750 --> 08:19.660
But that's easy.

08:19.680 --> 08:23.050
The transition is simply the trouble of the following elements.

08:23.130 --> 08:24.570
First Karen State.

08:24.570 --> 08:31.620
Second the action played third three were received and fourth that next date reached and so that's exactly

08:31.620 --> 08:37.420
what we have to specify right here in this table of these four elements.

08:37.640 --> 08:40.040
And so let's do some copy paste.

08:40.050 --> 08:46.460
I'm going to get the current state first which is the first element of the transition.

08:46.460 --> 08:48.770
Then it's going to be the action.

08:48.990 --> 08:50.970
Then the reward.

08:50.970 --> 08:54.280
And finally of course that next date.

08:54.420 --> 08:59.180
We just reached by updating our environment.

08:59.190 --> 09:00.100
Here we go.

09:00.150 --> 09:01.980
Now we have the full transition.

09:01.980 --> 09:07.980
Not only we have the new transition but also we have everything we need to call correctly the remember

09:07.980 --> 09:10.820
method from our dequeue an object.

09:10.890 --> 09:16.830
And so this reminder method will store this new transition into the memory after which of course will

09:16.830 --> 09:22.320
be able to gather in two separate batches the inputs and the toilet.

09:22.500 --> 09:30.540
As it is the next step in the queue in process right the next step here is of course to call that batch

09:30.660 --> 09:37.040
method so copy pasting it again together into seperate batches.

09:37.200 --> 09:41.040
The inputs and the toilet and beginning of the inputs and the toilet.

09:41.040 --> 09:48.440
Well let's not forget that these are exactly what are returned by this get batch method.

09:48.480 --> 09:54.650
Therefore I'm going to copy and paste this as well and going back to my training.

09:55.050 --> 10:03.510
Well that get batch method is going to give us these 2 batches of inputs and targets so that then we'll

10:03.510 --> 10:07.970
be able to compute the last over these two whole batches of inputs and targets.

10:08.130 --> 10:15.690
All right and now is nothing of course to remove the self here and then make sure that not only we call

10:15.700 --> 10:20.180
this get batch method from or U.N. object right.

10:20.190 --> 10:21.630
The warning will disappear again.

10:21.630 --> 10:22.380
Here we go.

10:22.500 --> 10:26.630
And then let's make sure we have the right arguments here first.

10:26.670 --> 10:28.750
That's the model compiled of the brain.

10:28.830 --> 10:32.130
Which is exactly what we gave as the name of our variable here.

10:32.130 --> 10:41.760
Moral equals the moral object of the moral class defined by keras extracted from our brain.

10:41.760 --> 10:44.540
So that's all good for the morrow and then for the batch size.

10:44.640 --> 10:51.900
Well 10 was just the default value here and we're going to replace that default value by the parameter

10:52.110 --> 11:00.090
we defined in the first place and that's why here we only need to replace the 10 by the batch size and

11:00.210 --> 11:03.960
perfect we gathered correctly in two separate batches.

11:04.020 --> 11:06.000
The input and the target.

11:06.000 --> 11:07.160
Congratulations.

11:07.170 --> 11:12.510
Now we are ready to move on to the last step which is to compute the last over the two whole batches

11:12.840 --> 11:14.070
of inputs and targets.

11:14.070 --> 11:20.220
However this is an important step and you're going to learn super useful trick of carious which is a

11:20.220 --> 11:27.600
function that I highly recommend to use every time it's the train on batch method pre-built in my Cara's

11:27.810 --> 11:34.650
and it's an amazing function to train actually on botches you know to do some mini batch gradient descent

11:34.980 --> 11:39.780
if you look at the book and if you look at the artificial neural networks and next section at the end

11:39.780 --> 11:45.450
of the book you will see that I explain the different versions of gradient descent among which they

11:45.450 --> 11:50.730
are Bachche great in the sense the caster gradient descent and many background and descent and you will

11:50.730 --> 11:56.340
understand that the most powerful version of them is many batch gradient descent because indeed it combines

11:56.460 --> 12:02.400
stochastic gradient descent to Bache great gradient descent and that's exactly what this awesome train

12:02.400 --> 12:05.480
on Bachche function will do to reduce the loss.

12:05.640 --> 12:10.030
So we'll take care of this in the next tutorial because we need to be prepared for this.

12:10.200 --> 12:11.850
And until then enjoy AI.
