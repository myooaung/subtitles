WEBVTT
1

00:00:05.250  -->  00:00:10.530
Hello and welcome back to the course on Python programming and this tutorial we going to go through

2

00:00:10.530  -->  00:00:15.470
the homework exercise the solution to the homework exercise about the Law of Large Numbers.

3

00:00:15.510  -->  00:00:18.030
So here's the exercise in front of us.

4

00:00:18.030  -->  00:00:20.390
Let's quickly recap on what we need to do.

5

00:00:20.580  -->  00:00:25.940
So we need to test the Law of Large Numbers for and random normally distributed numbers with mean equals

6

00:00:25.940  -->  00:00:30.690
zero and some deviation of what we when to create a Python script that will count how many of these

7

00:00:30.690  -->  00:00:37.440
numbers fall between minus 1 and 1 and divide that by the total quantity of and you know that the expected

8

00:00:37.500  -->  00:00:40.180
value is sixty eight point two percent.

9

00:00:40.200  -->  00:00:45.770
And we need to check that the mean of our measured value is converging to the expected value.

10

00:00:45.780  -->  00:00:48.650
As you rerun your script while increasing.

11

00:00:49.080  -->  00:00:52.860
All right so here we are in a Jupitus So let's go to full screen mode.

12

00:00:53.050  -->  00:00:56.030
And now let's start typing up so what are we going to need.

13

00:00:56.040  -->  00:01:01.710
First thing we're going to need is the function that we use to generate the random variables and it's

14

00:01:01.710  -->  00:01:03.480
called around and right.

15

00:01:03.510  -->  00:01:08.370
But in order to use randomness if I just run this line now so if I press control enter you'll see that

16

00:01:08.370  -->  00:01:13.860
I get an error because I don't have the number pi a library or an umpire package imported So let's go

17

00:01:13.860  -->  00:01:14.800
ahead and do that.

18

00:01:14.850  -->  00:01:18.410
We'll go import some PI as and P.

19

00:01:18.570  -->  00:01:24.240
And once again we haven't spoken about this much yet but we will definitely covered this further down

20

00:01:24.240  -->  00:01:28.470
in the course for knowledge just copy the same lines that we had inside the section so if we run that

21

00:01:28.950  -->  00:01:35.380
then here this should be much better so of course needs and at the end so let's try it again.

22

00:01:35.390  -->  00:01:35.700
There you go.

23

00:01:35.700  -->  00:01:38.020
So once again we don't need this line.

24

00:01:38.100  -->  00:01:39.330
So there we go.

25

00:01:39.330  -->  00:01:42.200
So we've imported the AROUND AND function.

26

00:01:42.210  -->  00:01:48.650
And when we run it you can see that we're generating that value here we generating one value.

27

00:01:48.660  -->  00:01:51.600
But in our challenge we need 100 so there's sort of 100.

28

00:01:51.600  -->  00:01:53.230
How do we generate 100.

29

00:01:53.250  -->  00:01:57.140
So in order to generate 100 we need to pass around parameter of 100.

30

00:01:57.240  -->  00:01:59.580
And this was the first hint in the challenge.

31

00:01:59.580  -->  00:02:06.240
So if we run this now you'll see that we're getting an error a which contains those hundred values.

32

00:02:06.270  -->  00:02:06.630
OK.

33

00:02:06.630  -->  00:02:08.840
And once again we have uncovered errors as well.

34

00:02:08.850  -->  00:02:14.280
But basically it's very similar to what we talked about with the for loop which we're actually going

35

00:02:14.280  -->  00:02:14.940
to be using now.

36

00:02:14.940  -->  00:02:20.550
So what do we need to do we need to iterate over these values so we need to check every single value

37

00:02:20.550  -->  00:02:23.920
and we want to see if each one of them falls between minus 1 and 1.

38

00:02:24.030  -->  00:02:24.270
Right.

39

00:02:24.270  -->  00:02:26.870
So let's go ahead and start carrying a for loop.

40

00:02:26.940  -->  00:02:29.550
So for i in.

41

00:02:29.640  -->  00:02:30.840
And then we want.

42

00:02:30.840  -->  00:02:32.860
How did we create a for loop before.

43

00:02:33.030  -->  00:02:33.330
Right.

44

00:02:33.330  -->  00:02:39.270
So before we used the range function right so we would say range 5 for instance and then we would say

45

00:02:39.510  -->  00:02:41.760
for I in range 5 do something like.

46

00:02:41.760  -->  00:02:42.920
PRINT Hello.

47

00:02:43.070  -->  00:02:43.370
Right.

48

00:02:43.390  -->  00:02:44.370
Oh hello.

49

00:02:44.670  -->  00:02:50.010
And then call my so if we're on this we get hello 0 1 2 3 4 right.

50

00:02:50.010  -->  00:02:53.280
So basically we're iterating over a range here.

51

00:02:53.550  -->  00:02:58.170
But in our case what do you want to iterate over is not this range or any other kind of range.

52

00:02:58.170  -->  00:03:04.200
Remember that time we also learned how to create a my Or own type of range where we said my list equals

53

00:03:04.200  -->  00:03:05.310
1 10.

54

00:03:05.340  -->  00:03:07.370
What was it 1 10.

55

00:03:07.440  -->  00:03:10.170
Actually was 10 100 or 1000 right.

56

00:03:10.170  -->  00:03:12.680
So we used to also do this.

57

00:03:13.050  -->  00:03:16.220
So if we run this now we get ten hundred thousand.

58

00:03:16.230  -->  00:03:22.350
So as we learn before we can replace what we are iterating over here and we already happen to have a

59

00:03:22.380  -->  00:03:28.200
set of numbers so why don't we take this set and put it instead of this list and then we get rid of

60

00:03:28.200  -->  00:03:28.940
that.

61

00:03:28.950  -->  00:03:34.440
So what will happen if we run this now you'll see that we're getting exactly what we were expecting

62

00:03:34.440  -->  00:03:34.720
.

63

00:03:34.740  -->  00:03:40.230
We're iterating over that set of 100 numbers and we getting these values printed out here.

64

00:03:40.230  -->  00:03:41.250
So that's a great start.

65

00:03:41.250  -->  00:03:43.940
So now we know how to iterate over them.

66

00:03:44.400  -->  00:03:49.650
Now of course we don't need the print tell all what we actually want is we want to check if the number

67

00:03:49.770  -->  00:03:53.970
that we're iterating the current iteration falls between minus 1 and 1.

68

00:03:53.970  -->  00:04:02.370
So what we want to do is we want to check if and then we want to see I is greater than a minus 1 and

69

00:04:02.550  -->  00:04:05.210
I is less than 1 right.

70

00:04:05.270  -->  00:04:08.710
So we want to check if this condition holds then we'll do something.

71

00:04:08.820  -->  00:04:15.030
And just to make it more convenient to read this card what we can do is we can add the brackets here

72

00:04:15.030  -->  00:04:15.270
.

73

00:04:15.270  -->  00:04:20.100
Now I know we discussed that you don't need the brackets after the if statement but if you like you

74

00:04:20.100  -->  00:04:21.270
can add these brackets.

75

00:04:21.270  -->  00:04:24.270
It doesn't hurt to add them here.

76

00:04:24.270  -->  00:04:25.470
They won't make a difference.

77

00:04:25.480  -->  00:04:30.810
It just keeps this code consistent so wherever it is reading the code can see right away that there

78

00:04:30.810  -->  00:04:36.240
is a condition in here so we can keep the brackets and or we you can just remove them if you don't want

79

00:04:36.240  -->  00:04:37.150
them here.

80

00:04:37.170  -->  00:04:39.150
So here would say What do we do.

81

00:04:39.150  -->  00:04:44.760
So what are we going to do if it does fall and cyro we want to count the number of times these values

82

00:04:44.760  -->  00:04:45.540
fall inside.

83

00:04:45.540  -->  00:04:45.780
Right.

84

00:04:45.780  -->  00:04:51.690
So we want to see how many of these values that we've created actually fall into this interim interval

85

00:04:51.690  -->  00:04:52.890
so we need a counter right.

86

00:04:52.890  -->  00:04:57.870
So let's go ahead and create a counter will say counter at the start as equal to zero and then counter

87

00:04:57.960  -->  00:05:00.240
equals counter plus 1.

88

00:05:00.240  -->  00:05:06.270
So if I run this now what we'll get is nothing is printed out because we remove the print but we're

89

00:05:06.600  -->  00:05:07.940
actually counting these values.

90

00:05:07.940  -->  00:05:14.880
So if I go ahead and print counter here not inside the loop but after the loop and after the if statement

91

00:05:14.880  -->  00:05:19.370
remember indentation matters so this is the body of the if statement.

92

00:05:19.440  -->  00:05:21.900
This is the body of the loop.

93

00:05:22.080  -->  00:05:27.720
And this comes after the loop so if I print this now what's going to happen is first these impers. happened

94

00:05:27.810  -->  00:05:29.770
then Cantor is set to 0.

95

00:05:30.000  -->  00:05:31.930
Then this loop happens.

96

00:05:31.950  -->  00:05:39.090
So the random hundred variables or numbers are generated and I iterated over them as we saw in that

97

00:05:39.090  -->  00:05:41.260
example as we saw in that print statement.

98

00:05:41.400  -->  00:05:43.080
And what happens every time is.

99

00:05:43.170  -->  00:05:46.870
So this loop keeps going like that every time this check is performed.

100

00:05:46.880  -->  00:05:52.740
So if I is greater than minus 1 and I'm less than 1 then counter is increased by 1.

101

00:05:52.830  -->  00:05:58.530
If this check is not correct if this is false then counter is simply not increased by 1 and the next

102

00:05:58.530  -->  00:06:03.370
iteration of the loop happens so the loop keeps going regardless of the result of this check.

103

00:06:03.450  -->  00:06:06.910
This check only affects whether or not controul be increased.

104

00:06:07.080  -->  00:06:12.960
And then this happens 100 times for all the variables so this check and increase or not increase happens

105

00:06:12.960  -->  00:06:13.690
100 times.

106

00:06:13.890  -->  00:06:19.790
And when the variables are depleted once they're all iterated over then this is printed out.

107

00:06:19.800  -->  00:06:25.330
And as you can see sixty eight is our answer and that is exactly what we were checking.

108

00:06:25.350  -->  00:06:30.690
So we wanted to check if it's sixty eight point two percent so if we run this again you'll see that

109

00:06:30.770  -->  00:06:37.440
68 now this time is 64 so 64 out of 100 remember what we're talking about in terms of the law of large

110

00:06:37.440  -->  00:06:43.650
numbers now it's 72 so it's somewhere around 68 but it can deviate quite a bit right because the sample

111

00:06:43.650  -->  00:06:47.100
is quite small it's only 100 numbers that we're testing.

112

00:06:47.130  -->  00:06:52.230
And by the way just in terms of the brackets of course we can remove them just to prove a point so you

113

00:06:52.230  -->  00:06:53.970
can see that it's still working like that.

114

00:06:54.030  -->  00:06:55.760
Might as well leave it like that.

115

00:06:55.770  -->  00:06:59.770
All right so now what we want to do is we want to increase the number of in our sample.

116

00:06:59.790  -->  00:07:02.490
But before we do that we're just going to divide by 100.

117

00:07:02.640  -->  00:07:04.570
And that way we'll get the percentage.

118

00:07:04.650  -->  00:07:10.640
So there's our number of or percentage of observations that fall in that interval.

119

00:07:10.950  -->  00:07:16.660
And now what we're going to do is we're going to increase the number of observations in our sample to

120

00:07:16.660  -->  00:07:17.380
1000.

121

00:07:17.640  -->  00:07:22.680
As you can see now we're getting closer again to sixty eight point two.

122

00:07:22.680  -->  00:07:27.510
Now you can see that this number is not even changing it's always 60 something percent doesn't help

123

00:07:27.510  -->  00:07:28.620
to 70.

124

00:07:28.620  -->  00:07:30.240
Or there just once in a while.

125

00:07:30.240  -->  00:07:34.580
Hops there but most of the time it's sticking around a 60 something.

126

00:07:34.860  -->  00:07:37.550
So how can we introduce a parameter now.

127

00:07:37.680  -->  00:07:40.990
Well it's sort of like changing it twice all the time.

128

00:07:41.040  -->  00:07:46.770
We can just replace this with and in places with and set a parameter at the start all that and give

129

00:07:46.770  -->  00:07:51.370
it a value of 10000 for on that again will see that it's around sixty eight point one.

130

00:07:51.390  -->  00:07:57.710
So if we make it 10000 You can see that we're getting closer and closer to sixty eight point two percent

131

00:07:57.720  -->  00:08:04.380
so that is exactly what we wanted to test that the value is slowly converging you see now it's always

132

00:08:04.380  -->  00:08:05.510
sixty eight.

133

00:08:05.760  -->  00:08:07.490
And just other digits are changing.

134

00:08:07.500  -->  00:08:11.880
So it very rarely moves away from 68 percent and doesn't move far away.

135

00:08:11.880  -->  00:08:15.770
So as we increase the sample size Yes it takes longer to calculate.

136

00:08:15.870  -->  00:08:21.740
We're getting closer and closer and closer to the expected value of sixty eight point two percent.

137

00:08:22.050  -->  00:08:25.300
And that is us testing the law of large numbers.

138

00:08:25.320  -->  00:08:26.850
As you can see it works.

139

00:08:26.850  -->  00:08:33.240
So yea we've proved that the law of large numbers which we tested that it works and also we got to work

140

00:08:33.240  -->  00:08:37.770
with some random variables we combined all of the concepts that are most of the concepts that we learned

141

00:08:37.800  -->  00:08:44.610
in this section and most importantly we practice how to program in Python solving a real challenge for

142

00:08:44.640  -->  00:08:46.010
a data scientist.

143

00:08:46.020  -->  00:08:47.620
Hope you enjoyed this homework exercise.

144

00:08:47.700  -->  00:08:50.170
And I look forward to seeing you throughout the course.

145

00:08:50.250  -->  00:08:54.630
Until next time happy coding.
