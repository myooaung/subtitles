WEBVTT
1

00:00:05.140  -->  00:00:05.750
Hello.

2

00:00:05.760  -->  00:00:07.760
Welcome back to A Course in Python.

3

00:00:07.800  -->  00:00:13.770
So how did you go if the previous tutorial do enjoy creating variables and was it quite easy to create

4

00:00:13.770  -->  00:00:16.360
new variables and then print them out on the screen.

5

00:00:16.530  -->  00:00:21.070
Well if you find the editorial useful I am sure you're on the right track and that's the goal of this

6

00:00:21.120  -->  00:00:27.510
course to break down learning Python into bite sized steps and so that with every step we get closer

7

00:00:27.510  -->  00:00:33.680
and closer to the ultimate goal of being able to use Python for data analysis and doesn't.

8

00:00:33.690  -->  00:00:36.960
All right so today we're going to learn how to work with wearables.

9

00:00:36.960  -->  00:00:40.230
So first things first let's create a new chip in a notebook.

10

00:00:40.230  -->  00:00:45.290
So we're going to go file your notebook and Python and this one is already saved.

11

00:00:45.330  -->  00:00:50.030
We can just press control or comments save just to make sure and then I can close it.

12

00:00:50.100  -->  00:00:51.750
And now we're going to call this one.

13

00:00:51.750  -->  00:00:53.950
Working with variables.

14

00:00:54.030  -->  00:00:56.060
So let's dive straight into it.

15

00:00:56.100  -->  00:01:03.530
Let's create a variable an integer variable A which equals 10 and first shift enter and then create

16

00:01:03.660  -->  00:01:06.140
an integer variable B which is 5.

17

00:01:06.150  -->  00:01:11.440
Now let's look at some arithmetics and how can we perform honest medic's with these variables.

18

00:01:11.580  -->  00:01:13.770
Well let's do the simple addition.

19

00:01:13.830  -->  00:01:19.350
So we'll say see is a new variable and we want to add a plus b and put the value into C so would say

20

00:01:19.350  -->  00:01:27.120
C equals A plus B and then click shift center and that will create a variable see the value of 10 plus

21

00:01:27.160  -->  00:01:28.100
550.

22

00:01:28.200  -->  00:01:35.760
Now if we want to look at division we'll do d equals B divided by a for instance 5 divided by 10 and

23

00:01:35.880  -->  00:01:37.560
click a shift enter.

24

00:01:37.560  -->  00:01:39.700
So now we've got those two variables.

25

00:01:39.720  -->  00:01:43.920
Let's have a look at printing So we're already talking about printing in the previous tutorial Let's

26

00:01:44.010  -->  00:01:48.810
revisit that topic so we're going to change this with a quick escape.

27

00:01:48.860  -->  00:01:54.330
And I'm going to change this to markdown and two or three lines just to get the delimiter.

28

00:01:54.450  -->  00:01:58.700
And now I'm going to look at printing these variables on our screen.

29

00:01:58.710  -->  00:02:04.680
So first we'll sort of see if we Princie you'll see that here we've got 15 as expected.

30

00:02:04.680  -->  00:02:11.040
But the point I wanted to make here is that just typing in a value or a variable and then printing it

31

00:02:11.460  -->  00:02:16.320
is a quick way of printing something the correct the proper way of printing something on your screen

32

00:02:16.380  -->  00:02:22.220
is to use a print function and to say print and then brackets see.

33

00:02:22.260  -->  00:02:27.420
So if you click enter here you'll see that this actually puts output on your screen as well.

34

00:02:27.420  -->  00:02:34.980
Now the thing to note here is that printing is different in Python 3 so I'm going to say print is different

35

00:02:35.100  -->  00:02:35.920
to pi.

36

00:02:35.930  -->  00:02:37.300
And 2.7.

37

00:02:37.320  -->  00:02:40.780
So that other version of Python that is no longer supported.

38

00:02:40.890  -->  00:02:45.060
It used to have instead of brackets it would just have print as the statements are.

39

00:02:45.070  -->  00:02:46.380
Looks like this.

40

00:02:46.480  -->  00:02:47.520
It would be like that.

41

00:02:47.580  -->  00:02:52.220
But if you try on this line you'll get an error because you need to use the print function now.

42

00:02:52.350  -->  00:02:56.790
So just bear that in mind if you're using Python 2.7 then it will be different.

43

00:02:56.790  -->  00:03:02.340
Or if you encounter code that is python 2.7 that will be one of the main differences that you'll be

44

00:03:02.340  -->  00:03:07.830
able to spot and therefore you need to take care of that if you want that code to be transferable to

45

00:03:07.860  -->  00:03:09.630
Python 3 and above.

46

00:03:09.630  -->  00:03:11.880
So there is quite a few differences.

47

00:03:11.940  -->  00:03:17.640
I'll point them out as we go through but there's only several main ones and actually it just so happens

48

00:03:17.650  -->  00:03:21.350
that we're going to look at the next main one right now as well so parentless print.

49

00:03:21.540  -->  00:03:23.340
And what you'll see is 0.5.

50

00:03:23.340  -->  00:03:27.110
So we divided 5 by 10 and we got 0.5.

51

00:03:27.330  -->  00:03:33.600
Now the difference here is that is in division in Python 2.7 what would happen is when you divide an

52

00:03:33.600  -->  00:03:38.700
integer by an integer so these are both integers you get 5 by 10 you get zero point five.

53

00:03:38.700  -->  00:03:43.920
It would just chop off all of the decimal points in the answer so the answer would be an integer as

54

00:03:43.920  -->  00:03:47.730
well with just the chopped of decimal points or would be zero in this case.

55

00:03:47.730  -->  00:03:49.740
But in our case you can see it's 0.5.

56

00:03:49.740  -->  00:03:54.210
So that is different to Paice and 2.00 And so we'll just type that in here.

57

00:03:54.270  -->  00:03:57.660
As a note division may actually make some space.

58

00:03:57.670  -->  00:04:01.530
Division is different to Python 2.10.

59

00:04:01.530  -->  00:04:06.740
So that's another thing to bear in mind that was changed in the newer versions of Python.

60

00:04:07.020  -->  00:04:07.350
All right.

61

00:04:07.370  -->  00:04:12.400
So question why is it better to use print.

62

00:04:12.420  -->  00:04:15.920
Why can we just keep just typing the values out as we used to.

63

00:04:15.930  -->  00:04:20.960
Well here's an example if I tried to type in C and then in that same cell I tried typing D.

64

00:04:20.970  -->  00:04:23.260
So I just tried to run these together.

65

00:04:23.490  -->  00:04:26.710
You'll see that only one of them gets printed out.

66

00:04:26.760  -->  00:04:32.030
So if I want the correct approach then I would say print C print D.

67

00:04:32.130  -->  00:04:34.970
Press enter and then both of them are getting printed.

68

00:04:35.100  -->  00:04:41.220
So that's the behavior that we want and therefore what we get if we perform or type in the correct code

69

00:04:41.220  -->  00:04:46.320
or the desired code that is intended for the platform rather than just using this script shortcut.

70

00:04:46.470  -->  00:04:49.980
So it's always better to use this print statement if you actually want to print something if you're

71

00:04:49.980  -->  00:04:52.260
just checking things and testing stuff out there.

72

00:04:52.290  -->  00:04:54.570
This is an OK approach as well.

73

00:04:54.570  -->  00:04:56.670
All right so that's how we can work with wearables.

74

00:04:56.670  -->  00:05:00.630
It's pretty interesting how we quickly learned how to do all the arithmetic as you can see it's all

75

00:05:00.630  -->  00:05:01.530
very simple stuff.

76

00:05:01.530  -->  00:05:07.530
So to see an addition you can do subtraction multiplication division or integers and floats and also

77

00:05:07.530  -->  00:05:10.740
other earthquake operations and then you can print.

78

00:05:10.750  -->  00:05:12.500
So we talked a bit more about printing.

79

00:05:12.510  -->  00:05:16.950
So what we're going to do now is we're going to look at some you know even more involved arithmetic

80

00:05:17.030  -->  00:05:20.730
operations so we will just look at square root I'll show you how to run that one so let's change this

81

00:05:20.740  -->  00:05:23.760
to markdown to run the square root operation.

82

00:05:23.760  -->  00:05:28.310
We need to import the math module so this is what it will look like.

83

00:05:28.320  -->  00:05:29.490
Important Math.

84

00:05:29.490  -->  00:05:34.320
Now we'll talk about porting modules later on in the course this is just the first time we're encountering

85

00:05:34.320  -->  00:05:34.670
it.

86

00:05:34.770  -->  00:05:41.580
Just copy this code and it'll work as we write it out and then when the time comes we'll talk in more

87

00:05:41.580  -->  00:05:44.330
detail about what modules are and how we import them.

88

00:05:44.520  -->  00:05:48.930
So basically we imported a module that contained some functions that we want to access and one of them

89

00:05:48.990  -->  00:05:50.250
is the square root function.

90

00:05:50.250  -->  00:05:56.660
So now we can access it we can say math dot sqrt of let's say value the value that stored in a.

91

00:05:56.790  -->  00:06:02.760
So we can actually use our variable that we created a as a argument for functions already.

92

00:06:02.760  -->  00:06:08.340
Normally you would say like Matthes security or something like let's say 144 For instance right.

93

00:06:08.340  -->  00:06:09.940
You'd run that you'd get 12.

94

00:06:09.960  -->  00:06:14.850
What we're doing here is we're actually not just passing a value to the skurried we're passing the variable

95

00:06:14.850  -->  00:06:15.370
itself.

96

00:06:15.390  -->  00:06:20.940
In this case our variable which is a which has the value of 10 if we go up here we'll see that a has

97

00:06:20.940  -->  00:06:22.000
the value of 10.

98

00:06:22.110  -->  00:06:28.800
And so we can use this variable as the parameter for the security function so far on this.

99

00:06:28.920  -->  00:06:32.050
You'll see that there is the square root of 10.

100

00:06:32.190  -->  00:06:38.430
And again we can apply another function and again we haven't talked about functions yet this is running

101

00:06:38.430  -->  00:06:43.380
way ahead but still a good quick preview of what we will have further down the course.

102

00:06:43.380  -->  00:06:48.690
So basically what we're doing here is we're taking the value returned by the square root function and

103

00:06:48.690  -->  00:06:55.440
we're supplying it to the round function which will around this value to the nearest whole number so

104

00:06:55.440  -->  00:06:57.170
there we go that's just three.

105

00:06:57.460  -->  00:06:57.810
OK.

106

00:06:57.810  -->  00:07:04.980
And to finish off today's tutorial we're going to just quickly look at working with strings.

107

00:07:04.980  -->  00:07:05.240
All right.

108

00:07:05.250  -->  00:07:07.190
So let's have a look let's create two strings.

109

00:07:07.260  -->  00:07:11.580
Greeting equals hello and name equals Bob.

110

00:07:11.940  -->  00:07:16.530
As you can see I've got two lines in one cell and they can still work together as we saw previously

111

00:07:16.530  -->  00:07:16.560
.

112

00:07:16.560  -->  00:07:18.300
So that's another example of that.

113

00:07:18.300  -->  00:07:22.890
So if we run that I've created two variables and now we can work with them.

114

00:07:23.040  -->  00:07:28.250
We want to create a message which he calls greeting last name to far on that.

115

00:07:28.380  -->  00:07:31.100
And then I print the message you'll see.

116

00:07:31.110  -->  00:07:31.900
Hello Bob.

117

00:07:31.950  -->  00:07:37.210
Of course this is two words so which separate them we're going to add just a space in between.

118

00:07:37.210  -->  00:07:44.070
So as you can see where we've got a variable here then we've got a value just a space that's also a

119

00:07:44.070  -->  00:07:46.320
string value and then the name.

120

00:07:46.320  -->  00:07:49.690
So these are all three string values for n that you'll see.

121

00:07:49.710  -->  00:07:51.830
Hello Bob appears over here.

122

00:07:52.080  -->  00:07:54.630
So there we go that's how we work with variables.

123

00:07:54.630  -->  00:07:56.120
Just some quick examples.

124

00:07:56.130  -->  00:08:01.640
And as you can see it's all very trivial and most important it's all very logical stuff.

125

00:08:01.680  -->  00:08:08.070
Good points to make here is that as you saw there's no semi-colons at the end so in some programming

126

00:08:08.070  -->  00:08:12.450
languages you need to add a semi-colon after all you are operators in Python.

127

00:08:12.450  -->  00:08:14.220
There is no need to do that.

128

00:08:14.220  -->  00:08:17.740
It just simplifies the usage of this language.

129

00:08:17.820  -->  00:08:23.850
So I would encourage you to quickly go through this and try create some of your own examples like especially

130

00:08:23.850  -->  00:08:29.850
working with strings is fun and see what happens when you try to add a string and an integer or when

131

00:08:29.850  -->  00:08:35.860
you try to add a float in a logical just practice it with a bit of examples because ultimately learning

132

00:08:35.870  -->  00:08:40.650
programming language is about practice practice and practice about making mistakes about understanding

133

00:08:40.650  -->  00:08:42.620
where the mistakes come from.

134

00:08:42.660  -->  00:08:44.540
About exploring new things.

135

00:08:44.670  -->  00:08:50.970
So these are the basics and give that a shot to see what cool examples you can come up with and I'll

136

00:08:50.970  -->  00:08:52.090
see on dictatorial.

137

00:08:52.140  -->  00:08:53.680
Until then happy coding
