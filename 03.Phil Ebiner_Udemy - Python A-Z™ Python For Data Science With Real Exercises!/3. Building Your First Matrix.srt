1

00:00:05,250  -->  00:00:07,760
Hello welcome back to the course of the program.

2

00:00:08,040  -->  00:00:11,720
Today we're continuing to explore matrices.

3

00:00:12,000  -->  00:00:17,960
And here we've got the data that we loaded into our jugular notebooks last time.

4

00:00:18,180  -->  00:00:20,730
And now let's have a look at some of the matrices that we have here.

5

00:00:20,730  -->  00:00:25,080
For instance we've got field goals minutes played games.

6

00:00:25,080  -->  00:00:26,280
Let's have a look at a couple of them.

7

00:00:26,280  -->  00:00:29,330
So that's Taipan games and press shift enter.

8

00:00:29,520  -->  00:00:31,210
So there's our games majors.

9

00:00:31,230  -->  00:00:31,700
OK.

10

00:00:31,770  -->  00:00:32,680
Interesting.

11

00:00:32,940  -->  00:00:37,720
Let's have a look at let's see what else do we have points for instance.

12

00:00:37,720  -->  00:00:39,110
Those are good points.

13

00:00:39,580  -->  00:00:39,980
OK.

14

00:00:39,990  -->  00:00:42,580
So there's another matrix of points.

15

00:00:42,810  -->  00:00:45,420
Let's have a look at how these matrices are constructed.

16

00:00:45,560  -->  00:00:46,470
Where do they come from.

17

00:00:46,470  -->  00:00:47,370
What do they mean.

18

00:00:47,610  -->  00:00:52,250
So let's go to the top and we've got some Commines here and here.

19

00:00:52,260  -->  00:00:52,830
What do we have.

20

00:00:52,830  -->  00:00:55,500
So a package has been imported.

21

00:00:55,560  -->  00:01:00,260
And by then we've got a list of seasons.

22

00:01:00,610  -->  00:01:01,750
OK that's interesting.

23

00:01:01,750  -->  00:01:03,360
Then we've got some other object.

24

00:01:03,360  -->  00:01:06,300
This is actually a dictionary so we'll talk about these further down.

25

00:01:06,300  -->  00:01:06,850
OK.

26

00:01:06,990  -->  00:01:09,370
And so here is the salary matrix for instance.

27

00:01:09,540  -->  00:01:12,480
So it is created using a function NPR-A.

28

00:01:12,720  -->  00:01:16,420
And what is it using to create this matrix.

29

00:01:16,430  -->  00:01:21,300
I know this is all alien right now but we're kind of working backwards we're trying to see what's going

30

00:01:21,300  -->  00:01:25,610
on and then we'll talk about the specific ways that you can create matrices.

31

00:01:25,770  -->  00:01:28,890
So what is happening to here to let's look at the specific metric.

32

00:01:28,890  -->  00:01:34,950
So we've got some lists over here Kobe Bryant Sellwood Joe Johns S.R. and looks like it's their salaries

33

00:01:34,950  -->  00:01:42,090
starting from 2000 thousand five all the way to 2014 because you can see that is increasing quite substantially

34

00:01:42,090  -->  00:01:42,110
.

35

00:01:42,110  -->  00:01:44,700
So for the last year or here for Kobe Bryant.

36

00:01:44,700  -->  00:01:50,910
So these are salaries for each one of the players and then they're being put into a list so you can

37

00:01:50,910  -->  00:01:54,030
see the square bracket here signifies a list.

38

00:01:54,030  -->  00:01:57,920
So all of these lists are being put into another list.

39

00:01:57,930  -->  00:01:58,320
There we go.

40

00:01:58,340  -->  00:02:04,380
That's the list of lists and then that list of lists is being passed to some sort of function which

41

00:02:04,380  -->  00:02:11,940
is called NPR-A and somehow it turns out that list of lists all this information into a matrix full

42

00:02:11,940  -->  00:02:14,960
salary and then same thing happens for games.

43

00:02:15,060  -->  00:02:18,600
The same thing happens for minutes played and so on.

44

00:02:18,620  -->  00:02:19,050
OK.

45

00:02:19,080  -->  00:02:26,210
So now that we can see how it is coded let's try to understand what's going on and I'm going to jump

46

00:02:26,210  -->  00:02:31,320
to a presentation about how you can possibly build on a couple of ways you can build matrices in Python

47

00:02:31,620  -->  00:02:33,480
and then we'll come back to the code and practice a bit.

48

00:02:33,480  -->  00:02:35,930
So I think it will be an interesting approach to today's tutorial.

49

00:02:36,300  -->  00:02:36,510
All right.

50

00:02:36,510  -->  00:02:39,810
So let's go building your first matrix.

51

00:02:39,810  -->  00:02:42,100
So how can you build a matrix in Python.

52

00:02:42,360  -->  00:02:47,580
Well as we know a matrix is like a representation of a table of data.

53

00:02:47,850  -->  00:02:53,850
And here we've got an empty matrix How can you actually create a matrix in Python so one of the common

54

00:02:53,850  -->  00:03:00,390
ways one of the ways we'll explore it is using the pi function called reshape and it basically takes

55

00:03:00,480  -->  00:03:01,260
some data.

56

00:03:01,260  -->  00:03:07,500
So for instance a list of data and then it's reshapes it into certain dimensions that you specify.

57

00:03:07,500  -->  00:03:10,110
So the first start there would be the data that you're reshaping.

58

00:03:10,230  -->  00:03:15,830
Second the star is the dimension and then the third parameter which is c in this case.

59

00:03:15,840  -->  00:03:17,040
We'll talk about it just enough.

60

00:03:17,220  -->  00:03:21,110
So there this is how this function works as you can see it creates a matrix.

61

00:03:21,240  -->  00:03:27,780
If you give it letters to 0 and you say that you want a matrix of the dimensions 3 by 5 it will put

62

00:03:27,780  -->  00:03:31,140
these 15 letters into the matrix in this manner.

63

00:03:31,140  -->  00:03:36,360
Now why do we have this parameter C so did you notice that the Matrix got populated.

64

00:03:36,360  -->  00:03:37,050
Row by row.

65

00:03:37,050  -->  00:03:40,260
So I'm going to go back and I'm going to go have a look at it again.

66

00:03:40,260  -->  00:03:41,770
So let's run it.

67

00:03:41,790  -->  00:03:44,410
You can see that the rows of first being populated.

68

00:03:44,460  -->  00:03:47,010
Then it moves on to the next row and then onto the next row.

69

00:03:47,220  -->  00:03:51,480
So this behavior by the way you've taken our programming course then you'll notice that this behavior

70

00:03:51,480  -->  00:03:55,260
is the opposite of what happens in our in our by default.

71

00:03:55,260  -->  00:03:57,090
First the columns get populated.

72

00:03:57,210  -->  00:03:59,430
And this is what the parameter C stands for.

73

00:03:59,430  -->  00:04:04,830
And sometimes people can get confused thinking that the C stands for columns actually C stands for the

74

00:04:04,830  -->  00:04:07,590
programming language C which had an influence on python.

75

00:04:07,770  -->  00:04:10,980
And so this is like the C-like population of the matrix.

76

00:04:11,230  -->  00:04:15,280
We have another approach which is empiric shape with the parameter F..

77

00:04:15,450  -->  00:04:21,640
And in this case it's like the Fortran language that the population is Fortran like.

78

00:04:21,810  -->  00:04:27,960
And therefore you could see that the data got populated into the matrix column by column and the resulting

79

00:04:27,960  -->  00:04:29,970
matrix as matrices are different.

80

00:04:30,270  -->  00:04:32,580
So the default behavior is the C version.

81

00:04:32,580  -->  00:04:39,840
So if you've called the reshape function by default and we'll see this you will get your matrix populated

82

00:04:39,960  -->  00:04:40,680
row by row.

83

00:04:40,680  -->  00:04:45,000
So just be careful of that especially if you're coming from our programming into Python or if in the

84

00:04:45,000  -->  00:04:48,210
future you will be moving into our programming from Python.

85

00:04:48,390  -->  00:04:51,090
Then also keep that in mind so that behavior is different.

86

00:04:51,680  -->  00:04:54,690
And finally there's a third method which will be using quite a lot.

87

00:04:54,800  -->  00:04:56,080
It's called the NPR-A.

88

00:04:56,090  -->  00:05:03,440
So my function called area and what it does is it puts rows into your matrix so it combines data elements

89

00:05:03,530  -->  00:05:09,560
into Matrix and that's exactly what we saw there we saw that lists were combined into Matrix row by

90

00:05:09,560  -->  00:05:09,920
row.

91

00:05:09,920  -->  00:05:13,060
So each player had their own role in the resulting matrix.

92

00:05:13,160  -->  00:05:15,150
So that's how the NPR-A function works.

93

00:05:15,310  -->  00:05:18,140
And now let's have a look at all of this in practice.

94

00:05:18,140  -->  00:05:18,500
All right.

95

00:05:18,500  -->  00:05:22,740
So I'm going to jump back here and then scroll down to the bottom.

96

00:05:22,750  -->  00:05:27,260
The first thing that we want to do is we want to create some data that we going to be playing around

97

00:05:27,250  -->  00:05:27,410
with.

98

00:05:27,410  -->  00:05:34,130
So first of all let's import some PI as and P even though it has already been done for us of a here

99

00:05:34,120  -->  00:05:39,590
in the code actually because it's been used as you can see it's been used in these functions but we'll

100

00:05:39,590  -->  00:05:41,590
still do it just in case it doesn't hurt.

101

00:05:41,690  -->  00:05:44,450
So that we remember that we were using it as well.

102

00:05:44,570  -->  00:05:51,650
So we click enter here and then we'll say my daughter equals and we arrange 0 to 20 so it's a range

103

00:05:51,650  -->  00:05:52,280
function.

104

00:05:52,460  -->  00:05:57,250
And what it basically does is it's going to give us some data to play around with we just let's print

105

00:05:57,250  -->  00:06:00,260
it out so we can have a look at what we're working with my daughter.

106

00:06:00,320  -->  00:06:06,170
So if you run that you'll see that we've got 20 values remember that and arrange it starts with this

107

00:06:06,170  -->  00:06:06,670
value.

108

00:06:06,740  -->  00:06:08,580
And it goes up to the 20th.

109

00:06:08,650  -->  00:06:11,370
Love the last value specified here but not included.

110

00:06:11,370  -->  00:06:13,080
So that's where it goes up to 19.

111

00:06:13,100  -->  00:06:18,430
So in total we've got 20 values of 0 219 and therefore 20 is not included.

112

00:06:18,440  -->  00:06:23,900
All right so what can we reshape this data as well we can reshape it into matrix right.

113

00:06:23,900  -->  00:06:29,690
So let's try the reshape function let's say N.P. reshape from the non-pilot package and then I'll say

114

00:06:29,690  -->  00:06:31,120
my daughter coma.

115

00:06:31,220  -->  00:06:38,060
And the way you need to parse the parameters to reshape is here it needs to know what dimensions you

116

00:06:38,060  -->  00:06:41,470
want to specify and they need to be passed on as a tuple.

117

00:06:41,480  -->  00:06:48,560
So here we're going to say 5 4 so we want five rows and four columns so the first Tramadol stands for

118

00:06:48,560  -->  00:06:51,100
how many rows or one second one is how many columns.

119

00:06:51,110  -->  00:06:52,740
All right so let's run that.

120

00:06:53,030  -->  00:06:59,240
And so here you can see we've got a matrix of five rows and four columns and a got populated in this

121

00:06:59,240  -->  00:06:59,520
manner.

122

00:06:59,510  -->  00:07:01,810
So first the first row then the second row.

123

00:07:01,850  -->  00:07:03,770
And the third row and so on.

124

00:07:03,760  -->  00:07:09,970
So we're going to make a note here just in case because a lot of time we use different tools.

125

00:07:10,310  -->  00:07:16,730
So we remember the default is opposite to our right because in Our it would get populated downwards

126

00:07:16,820  -->  00:07:17,780
by default.

127

00:07:17,780  -->  00:07:22,120
All right you can see that we didn't specify either FC So that's a default behavior.

128

00:07:22,120  -->  00:07:22,430
Great.

129

00:07:22,430  -->  00:07:30,440
So now let's save this reshaped data of words first let's check how the behavior will look like if we

130

00:07:30,440  -->  00:07:36,020
actually say that we want special special prime minister or say order the parameters name is order.

131

00:07:36,230  -->  00:07:40,940
And then in single quotation marks or in double doesn't matter we're going to say C..

132

00:07:40,970  -->  00:07:45,580
So if we run this you will see that we've got to the same exact result.

133

00:07:45,580  -->  00:07:46,150
So that's.

134

00:07:46,190  -->  00:07:51,000
That means that the default behavior here when you don't specify a parameter it means it's like the

135

00:07:51,000  -->  00:07:52,980
C like behavior.

136

00:07:53,030  -->  00:07:59,240
And here let's just go ahead and save this matrix matrix one equals and maybe that is printed out as

137

00:07:59,240  -->  00:07:59,770
well.

138

00:08:00,050  -->  00:08:01,340
So we can work with it as well.

139

00:08:01,340  -->  00:08:02,030
There we go.

140

00:08:02,090  -->  00:08:03,290
Now why we saved it.

141

00:08:03,290  -->  00:08:08,470
I've got a little quick exercise for you just in the code exercise.

142

00:08:08,480  -->  00:08:12,000
The challenge is to get to the number 10.

143

00:08:12,250  -->  00:08:12,520
All right.

144

00:08:12,530  -->  00:08:15,920
So here we've got a matrix and here's the number 10.

145

00:08:16,040  -->  00:08:20,780
How would you get to it using what we learned about indexation of matrices just for this video very

146

00:08:20,780  -->  00:08:26,200
quickly and try type in that line of code that will get you to that number 10.

147

00:08:26,210  -->  00:08:26,990
All right.

148

00:08:26,990  -->  00:08:29,510
And now I'll show you how I would do it.

149

00:08:29,500  -->  00:08:33,980
I would say a matrix and then Herodes say so this is zero.

150

00:08:34,040  -->  00:08:40,660
This is the listicle of the rows rows 0 1 row 2 so it's in the second row and the column 0 column one

151

00:08:40,660  -->  00:08:41,500
column two.

152

00:08:41,750  -->  00:08:46,780
So it's in the second row and the second column columns for on that I get 10 beautiful.

153

00:08:46,790  -->  00:08:53,580
So now what I wanted to do is I wanted to look at the opposite behavior so let's look at this line or

154

00:08:53,620  -->  00:09:00,070
just copy this line or actually copy this whole cell and just create matrix 2 here instead of order

155

00:09:00,370  -->  00:09:03,690
is sort of the C-Leg here will look at the foreground like behavior.

156

00:09:03,980  -->  00:09:09,310
So if I run this now what do you expect to see what will the resulting matrix look like.

157

00:09:09,320  -->  00:09:11,040
Let's talk about this for a second.

158

00:09:11,060  -->  00:09:16,430
It's still going to be a 5 4 matrix so the main point here is that the matrix is specified by these

159

00:09:16,420  -->  00:09:16,900
dimensions.

160

00:09:16,900  -->  00:09:18,360
It's not going to change.

161

00:09:18,620  -->  00:09:21,460
The data is still going to be the same inside the Matrix.

162

00:09:21,470  -->  00:09:26,480
It's also not going to change the only thing I'll change is how the data is populated into the matrix

163

00:09:26,480  -->  00:09:26,830
.

164

00:09:26,870  -->  00:09:32,360
So instead of going 0 1 2 3 4 5 6 instead of being bent into the matrix like that is going to be bent

165

00:09:32,360  -->  00:09:34,390
into the matrix like that vertically.

166

00:09:34,390  -->  00:09:36,380
So even those are going to be the same matrix.

167

00:09:36,460  -->  00:09:41,120
It's just going to have the same data populate in different way and it'll look quite different.

168

00:09:41,120  -->  00:09:42,190
So let's have a look now.

169

00:09:42,390  -->  00:09:47,470
When I run that you'll see that here we've got 0 1 2 3 4 5 6 7 and so on.

170

00:09:47,500  -->  00:09:52,970
In this case you can see that the elements are in different locations and so even now if you want to

171

00:09:52,970  -->  00:09:55,200
access the number 10 let's do that again.

172

00:09:55,370  -->  00:09:58,190
There's another exercise if you want access number 10.

173

00:09:58,250  -->  00:09:59,680
You would do it differently right.

174

00:09:59,680  -->  00:10:05,970
So how would we get to number 10 would say it's in row 0 and it's in column 0 1 2.

175

00:10:06,020  -->  00:10:08,200
So remember that numeration of course starts from zero.

176

00:10:08,210  -->  00:10:12,510
So let's look at that matrix two rows.

177

00:10:13,180  -->  00:10:16,900
To go for and not get the number 10 beautiful.

178

00:10:17,170  -->  00:10:20,120
There we go that's how we use the reshape function.

179

00:10:20,320  -->  00:10:26,170
And one more thing I wanted to show you here is the object oriented programming concept.

180

00:10:26,170  -->  00:10:27,760
So we've discussed this a little bit.

181

00:10:27,760  -->  00:10:35,710
So if we look at O.P. we can see that these objects actually are conveying with this object oriented

182

00:10:35,710  -->  00:10:38,100
programming concept so let me explain what I mean.

183

00:10:38,140  -->  00:10:41,640
Let's say if I take empy reshape my daughter.

184

00:10:41,650  -->  00:10:45,640
So if I or let's just take the basic one to simplify things.

185

00:10:45,730  -->  00:10:48,540
This one this is what we looked at at the start.

186

00:10:48,550  -->  00:10:50,500
It's how we use the reshape function.

187

00:10:50,800  -->  00:10:56,170
But what we can actually do is instead of doing this because my daughter how did we get my daughter

188

00:10:56,170  -->  00:10:57,560
in the first place.

189

00:10:57,700  -->  00:11:01,180
My daughter use the NUMP PI arr. function right.

190

00:11:01,180  -->  00:11:04,650
So my daughter is actually it's an array.

191

00:11:04,690  -->  00:11:05,160
Right.

192

00:11:05,230  -->  00:11:07,230
So what are we going to do with.

193

00:11:07,270  -->  00:11:11,860
So if we could look at my daughter here we look at Type of my daughter.

194

00:11:12,220  -->  00:11:15,230
You'll see that it's an array What can we do with an array.

195

00:11:15,280  -->  00:11:20,740
Well my daughter is actually an object and therefore instead of saying and P-Dog reshape we can say

196

00:11:21,010  -->  00:11:23,660
my daughter Daughtry's shape right.

197

00:11:23,680  -->  00:11:29,260
If we just press tab you'll see that the hint gives us a few functions that exist there so I can even

198

00:11:29,260  -->  00:11:34,710
say dot and then press tab and you'll see all these functions that exist inside my daughter.

199

00:11:34,720  -->  00:11:35,140
Right.

200

00:11:35,290  -->  00:11:38,790
And one of them is reshape because it is an object.

201

00:11:39,010  -->  00:11:41,590
And this is an object oriented programming language.

202

00:11:41,770  -->  00:11:47,500
So I can call reshape from within my data so I don't have to go to the package and find the function

203

00:11:47,500  -->  00:11:52,600
in the package what I can do is I can go to the object that already have and call the function from

204

00:11:52,600  -->  00:11:53,610
within the object.

205

00:11:53,770  -->  00:11:59,800
And what that will change is that now I won't have to specify to what Dot I need to apply I don't have

206

00:11:59,800  -->  00:12:01,900
to say my daughter again here.

207

00:12:01,900  -->  00:12:02,200
Right.

208

00:12:02,200  -->  00:12:04,900
And then 5 4 because it would make no sense right.

209

00:12:04,900  -->  00:12:07,980
We were already calling this function from within that object.

210

00:12:07,980  -->  00:12:12,050
So there's no need to specify that we're applying the function to the same object.

211

00:12:12,160  -->  00:12:15,610
All we need to say is what dimensions we want so far on this.

212

00:12:15,610  -->  00:12:17,950
Now you'll see that I get the same result.

213

00:12:18,220  -->  00:12:22,330
So I know this can be a bit tough to get your head around at the start but let's just quickly recap

214

00:12:22,330  -->  00:12:28,210
so what happened here is that one way of finding this function reshape is to go to the package where

215

00:12:28,210  -->  00:12:33,970
it's definitely store because that's where it came from and then apply that function to the object or

216

00:12:33,970  -->  00:12:40,180
the data that we work in with the list and then say how many dimensions are the other ways to say actually

217

00:12:40,180  -->  00:12:41,310
this is not just a list.

218

00:12:41,320  -->  00:12:45,310
It's an area because we created with a function with the range function.

219

00:12:45,310  -->  00:12:50,860
So this is an object that already contains this function.

220

00:12:50,860  -->  00:12:54,710
So and you can check that by pressing a dot and pressing tab.

221

00:12:54,880  -->  00:12:59,560
It already contains this function so we can actually just apply that function from within the object

222

00:12:59,920  -->  00:13:05,200
and that is the beauty of object oriented programming so these objects actually carry around not only

223

00:13:05,200  -->  00:13:08,150
Dadda but also the functions within themselves.

224

00:13:08,170  -->  00:13:08,590
OK.

225

00:13:08,680  -->  00:13:10,390
That is reshape.

226

00:13:10,420  -->  00:13:14,860
And now we're going to look at the one that we're actually more interested in.

227

00:13:14,860  -->  00:13:17,470
We're going to look at the NPR-A function.

228

00:13:17,470  -->  00:13:22,560
So let's create a few lists will say I am happy.

229

00:13:22,780  -->  00:13:26,930
And then I'll say are two what what a day.

230

00:13:27,100  -->  00:13:32,140
And then three is three is going to be just a few numbers so one to three.

231

00:13:32,140  -->  00:13:37,600
All right so let's run that now let's create just look at these lists inside of lists right.

232

00:13:37,600  -->  00:13:43,720
So let's put these lists inside a list enduringly can tell when preparing this.

233

00:13:43,720  -->  00:13:48,590
So here we've got a list of three lists so the first one has words.

234

00:13:48,600  -->  00:13:51,070
I am happy second one has words what a day.

235

00:13:51,070  -->  00:13:54,390
And the third one has numbers you can see that they actually numbers 1 two 3.

236

00:13:54,430  -->  00:13:58,600
And what I'm going to do is I'm going to apply the NPR-A function the one we talked about in our presentation

237

00:13:59,260  -->  00:14:06,760
and I'm just going to apply it to this exact list of lists and what I will do is it will combine these

238

00:14:06,970  -->  00:14:09,550
lists into a matrix row by row.

239

00:14:09,550  -->  00:14:11,030
So let's have a look.

240

00:14:11,050  -->  00:14:12,730
So there we go that's the output.

241

00:14:12,730  -->  00:14:18,130
You can see here that it's got an extra bit of extra information that's just telling you what type this

242

00:14:18,130  -->  00:14:19,050
array has.

243

00:14:19,210  -->  00:14:24,740
And it's saying that it's use stands for Unicode five stands for five characters and less than sign

244

00:14:24,940  -->  00:14:28,380
just means less than five Unicode characters in the strings.

245

00:14:28,390  -->  00:14:33,840
So if you don't want to see that just take this and say print and the same thing and there we go.

246

00:14:33,840  -->  00:14:35,410
So that's our matrix.

247

00:14:35,440  -->  00:14:37,130
So it's got three by three right.

248

00:14:37,150  -->  00:14:41,590
And because each element has three or each list had three elements.

249

00:14:41,650  -->  00:14:43,640
And so we and we put them row by row.

250

00:14:43,640  -->  00:14:46,510
So that's the first list that's the second list and that's a third list.

251

00:14:46,510  -->  00:14:50,650
When you put them Roberto together we to a matrix of three by three but what you'll notice here is that

252

00:14:50,710  -->  00:14:55,230
each one of these elements has been changed into a string.

253

00:14:55,230  -->  00:14:57,660
So these are no longer just numbers these are strings.

254

00:14:57,850  -->  00:15:03,880
Well that's because in arrays unlike lists you can only have one type of element and this is very similar

255

00:15:03,880  -->  00:15:10,780
to our that in matrices and are just like vectors and there can only have one type of data in them so

256

00:15:10,990  -->  00:15:17,530
therefore you can convert a word like Watt into a number but it's much easier to convert a number into

257

00:15:17,560  -->  00:15:19,540
a string you just put quotation marks around it.

258

00:15:19,540  -->  00:15:20,530
So that's what happened here.

259

00:15:20,530  -->  00:15:24,280
That's why this matrix is a matrix of strings.

260

00:15:24,520  -->  00:15:26,980
So there we go that's how the NPR-A function works.

261

00:15:26,990  -->  00:15:30,730
And now if we quickly revert back to what we saw here.

262

00:15:30,760  -->  00:15:31,450
Exactly that.

263

00:15:31,450  -->  00:15:33,030
So we've got lists right.

264

00:15:33,040  -->  00:15:35,220
So all of these lists have numbers.

265

00:15:35,500  -->  00:15:42,880
And what is being done is then each of these lists is or these lists are added into a list of lists

266

00:15:42,900  -->  00:15:43,010
.

267

00:15:43,100  -->  00:15:47,840
Here you can see it starts here and God first list second this third list and so on.

268

00:15:47,980  -->  00:15:53,950
And then the NPR-A function is applied and as a result what we get is matrices like that so we get arrays

269

00:15:54,190  -->  00:15:59,500
which are actually matrices because they're two dimensional and all of that is done through the NPR-A

270

00:15:59,500  -->  00:16:00,180
function.

271

00:16:00,310  -->  00:16:02,010
And now we know how it works.

272

00:16:02,050  -->  00:16:09,880
All right so what we learned today was we learned how to reshape data using the reshape function using

273

00:16:10,090  -->  00:16:13,390
C like behavior and Fortran like behavior.

274

00:16:13,390  -->  00:16:16,920
So two different types of ways that matrices populate populated.

275

00:16:16,930  -->  00:16:23,740
Then we also learned about the object oriented programming concept that is contained within the objects

276

00:16:23,830  -->  00:16:28,580
array objects that we can call functions from within them not just go to the package every time.

277

00:16:28,660  -->  00:16:33,300
And also we learned that we can use the NPR-A function and we show how it works.

278

00:16:33,340  -->  00:16:39,500
And finally now we can proceed to the next Tauriel and start working with our data.

279

00:16:39,610  -->  00:16:43,270
And I hope you enjoyed today's tutorial and I look forward to seeing you next time.

280

00:16:43,270  -->  00:16:44,800
Until then happy coding
