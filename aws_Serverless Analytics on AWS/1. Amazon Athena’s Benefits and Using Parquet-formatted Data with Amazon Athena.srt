1
00:00:00,000 --> 00:00:02,947
Hi guys, it's Kim Schmidt again.

2
00:00:02,947 --> 00:00:04,791
In the last module,

3
00:00:04,791 --> 00:00:11,222
we really got our hands dirty working with AWS Glue services in the AWS Console.

4
00:00:11,222 --> 00:00:16,754
Although we've used Athena before, I haven't explained it yet.

5
00:00:16,754 --> 00:00:19,791
That's what this module will do.

6
00:00:19,791 --> 00:00:23,689
It will give you a comprehensive understanding and experience

7
00:00:23,689 --> 00:00:28,547
using Amazon Athena in the AWS Console.

8
00:00:28,547 --> 00:00:34,035
Parquet is an efficient columnar storage format that's very good

9
00:00:34,035 --> 00:00:38,003
at compressing data and is used heavily in large-scale

10
00:00:38,003 --> 00:00:41,628
distributed Spark deployments on big data.

11
00:00:41,628 --> 00:00:45,445
Columnar storage formats have the following characteristics

12
00:00:45,445 --> 00:00:49,559
that make them suitable for using with Athena.

13
00:00:49,559 --> 00:00:52,020
It has compression by column,

14
00:00:52,020 --> 00:00:55,775
with compression algorithms selected for the column data

15
00:00:55,775 --> 00:01:02,962
type to save storage space in Amazon S3 and reduce disk

16
00:01:02,962 --> 00:01:05,601
space in I/O during query processing.

17
00:01:05,601 --> 00:01:09,964
Parquet and ORC have predicate pushdown,

18
00:01:09,964 --> 00:01:15,980
which enables Athena queries to fetch only the blocks it needs,

19
00:01:15,980 --> 00:01:17,327
improving query performance.

20
00:01:17,327 --> 00:01:22,464
When an Athena query obtains specific column values from your data,

21
00:01:22,464 --> 00:01:29,518
it uses statistics from data blocked predicates such as min/max values and

22
00:01:29,518 --> 00:01:34,184
so on to determine whether to read or skip that block.

23
00:01:34,184 --> 00:01:41,520
Parquet and ORC formats allow Athena to split the reading of data to multiple

24
00:01:41,520 --> 00:01:45,522
readers and increase parallelism during its query processing.

25
00:01:45,522 --> 00:01:49,339
Let's look at some of Athena's other benefits.

26
00:01:49,339 --> 00:01:54,303
Athena is serverless, you don't need to worry about configuration,

27
00:01:54,303 --> 00:01:55,304
software updates, failures,

28
00:01:55,304 --> 00:02:01,413
or scaling your infrastructure as your datasets and number of users grow.

29
00:02:01,413 --> 00:02:05,096
Athena automatically takes care of all of this for you.

30
00:02:05,096 --> 00:02:08,963
Although Athena is ideal for quick ad hoc querying,

31
00:02:08,963 --> 00:02:13,466
it can also handle complex analyses like large joins,

32
00:02:13,466 --> 00:02:18,068
window functions, and analysis on arrays.

33
00:02:18,068 --> 00:02:20,973
Athena is optimized for fast query performance.

34
00:02:20,973 --> 00:02:21,632
With Athena,

35
00:02:21,632 --> 00:02:26,895
it allows you to control access to your data by using AWS

36
00:02:26,895 --> 00:02:29,585
Identity and Access Management policies,

37
00:02:29,585 --> 00:02:33,703
access control lists, or ACLs, and Amazon S3 bucket policies,

38
00:02:33,703 --> 00:02:40,708
and it can query encrypted data in S3 and write encrypted results to S3.

39
00:02:40,708 --> 00:02:43,877
Athena allows you to partition your data on any column.

40
00:02:43,877 --> 00:02:48,754
Partitions allow you to limit the amount of data each query scans,

41
00:02:48,754 --> 00:02:51,833
leading to cost savings and faster performance.

42
00:02:51,833 --> 00:02:56,424
You can specify your partitioning scheme using the partition

43
00:02:56,424 --> 00:03:00,229
bi-clause in the CREATE TABLE statement.

44
00:03:00,229 --> 00:03:03,297
Athena has native integration with Amazon QuickSight.

45
00:03:03,297 --> 00:03:06,646
QuickSight is the first business-intelligent service with

46
00:03:06,646 --> 00:03:12,891
pay-per-session pricing and produces machine-learning insights.

47
00:03:12,891 --> 00:03:20,397
Athena integrates with Amazon S3 inventory and Amazon EC2 Systems Manager.

48
00:03:20,397 --> 00:03:26,636
Amazon S3 inventory can provide CSV or ORC file output of

49
00:03:26,636 --> 00:03:31,266
S3 bucket objects and their metadata on a scheduled basis

50
00:03:31,266 --> 00:03:34,320
that's totally configurable.

51
00:03:34,320 --> 00:03:37,182
It can be used as a ready-made input into a big

52
00:03:37,182 --> 00:03:39,412
data job or workflow application.

53
00:03:39,412 --> 00:03:44,398
AWS Systems Manager is a collection of capabilities for

54
00:03:44,398 --> 00:03:49,939
configuring and managing EC2 instances, on-premises servers,

55
00:03:49,939 --> 00:03:53,838
virtual machines, and other AWS resources at scale.

56
00:03:53,838 --> 00:04:00,838
It provides a unified interface that allows you to easily centralize

57
00:04:00,838 --> 00:04:13,000
operational data and automate tasks across your AWS resources. In the next section, I'll cover Amazon Athena's dual data catalogs.

