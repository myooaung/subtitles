1
00:00:02,714 --> 00:00:08,961
Serverless architectures are application designs that include custom code,

2
00:00:08,961 --> 00:00:15,719
run and managed ephemeral containers on a Functions as a Service,

3
00:00:15,719 --> 00:00:17,735
or FaaS, platform.

4
00:00:17,735 --> 00:00:20,960
You can't see data when it's working in memory,

5
00:00:20,960 --> 00:00:25,323
so you need to look at write logs and other services

6
00:00:25,323 --> 00:00:28,953
that provide viewing ephemeral data.

7
00:00:28,953 --> 00:00:33,427
Ephemeral data only exists briefly and is transitory.

8
00:00:33,427 --> 00:00:39,328
The data literally only exists in such a brief time that

9
00:00:39,328 --> 00:00:41,484
it's impossible for humans to see.

10
00:00:41,484 --> 00:00:46,659
In addition, ephemeral data are deleted usually immediately.

11
00:00:46,659 --> 00:00:51,009
There are two AWS services and three ways to monitor

12
00:00:51,009 --> 00:00:53,978
and trace Athena's ephemeral data.

13
00:00:53,978 --> 00:00:58,087
You use Amazon CloudWatch for metrics and logs,

14
00:00:58,087 --> 00:01:02,788
and you use Amazon X-Ray for tracing.

15
00:01:02,788 --> 00:01:05,839
Traditionally, even for non-ephemeral data,

16
00:01:05,839 --> 00:01:09,836
getting operational answers from logs is difficult for the

17
00:01:09,836 --> 00:01:13,867
four main reasons you see on this slide.

18
00:01:13,867 --> 00:01:18,961
Amazon CloudWatch makes log analytics easy.

19
00:01:18,961 --> 00:01:23,803
It integrates natively with AWS services and

20
00:01:23,803 --> 00:01:26,332
third-party solutions for ingress and egress.

21
00:01:26,332 --> 00:01:31,543
What if CloudWatch could combine log management with analytics?

22
00:01:31,543 --> 00:01:35,964
Well, I'd say wake me up, I'm dreaming, but it's true.

23
00:01:35,964 --> 00:01:39,843
CloudWatch Logs Insights is an interactive,

24
00:01:39,843 --> 00:01:40,799
fully-integrated,

25
00:01:40,799 --> 00:01:47,710
and pay-as-you-go log analytics service through Amazon CloudWatch.

26
00:01:47,710 --> 00:01:52,120
Amazon CloudWatch Logs Insights are easy to use.

27
00:01:52,120 --> 00:01:57,801
It's a fully-managed interactive log query service.

28
00:01:57,801 --> 00:01:59,946
It's really fast.

29
00:01:59,946 --> 00:02:03,349
Most log queries return in seconds.

30
00:02:03,349 --> 00:02:07,948
It's scalable, and it can ingest petabytes of logs.

31
00:02:07,948 --> 00:02:15,473
It integrates metrics with logs, and you only pay for the log queries you run.

32
00:02:15,473 --> 00:02:17,528
In addition to that,

33
00:02:17,528 --> 00:02:23,210
Amazon CloudWatch Logs Insights is purpose built for log diving.

34
00:02:23,210 --> 00:02:25,191
I just love that term, log diving.

35
00:02:25,191 --> 00:02:30,349
And it has all the features that in the pink

36
00:02:30,349 --> 00:02:33,559
rectangle at the bottom of the slide.

37
00:02:33,559 --> 00:02:37,595
In today's distribute environments and with data that

38
00:02:37,595 --> 00:02:40,849
only exists for milliseconds or less,

39
00:02:40,849 --> 00:02:46,867
tracing all services that work together around the globe can be very difficult.

40
00:02:46,867 --> 00:02:49,936
To properly trace these kinds of environments,

41
00:02:49,936 --> 00:02:53,053
you must be able to discover multiple services,

42
00:02:53,053 --> 00:02:56,514
get insights into individual operations,

43
00:02:56,514 --> 00:03:01,514
see issues that are isolated within each service,

44
00:03:01,514 --> 00:03:09,803
and be able to perform root cause analysis for individual specific issues.

45
00:03:09,803 --> 00:03:14,285
So how does AWS X-Ray help resolve tracing in these

46
00:03:14,285 --> 00:03:16,143
modern distributed applications?

47
00:03:16,143 --> 00:03:20,751
Well there are four reasons shown on this slide,

48
00:03:20,751 --> 00:03:24,965
but AWS X-Ray helps answer three critical questions,

49
00:03:24,965 --> 00:03:30,191
how is my app doing, why is my app performing the way it is,

50
00:03:30,191 --> 00:03:34,514
and who is impacted by the issues?

51
00:03:34,514 --> 00:03:40,340
X-Ray gives you visibility into your downstream AWS services.

52
00:03:40,340 --> 00:03:41,657
With AWS X-Ray,

53
00:03:41,657 --> 00:03:45,776
you can create sub segments for your data access

54
00:03:45,776 --> 00:03:49,208
layer to capture query performance.

55
00:03:49,208 --> 00:03:53,108
You can build visibility into the performance of

56
00:03:53,108 --> 00:03:57,668
database calls using AWS X-Ray APIs.

57
00:03:57,668 --> 00:04:05,114
AWS X-Ray can uncover major flaws in implementations.

58
00:04:05,114 --> 00:04:09,699
Using Amazon CloudWatch and AWS X-Ray together,

59
00:04:09,699 --> 00:04:17,008
you have the insights that answer why unintended behaviors are taking place.

60
00:04:17,008 --> 00:04:28,000
The next module covers how to AI and ML your apps and business processes and how to future proof your data.

