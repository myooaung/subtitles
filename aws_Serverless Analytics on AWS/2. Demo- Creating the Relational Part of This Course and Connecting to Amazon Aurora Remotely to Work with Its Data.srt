1
00:00:01,429 --> 00:00:03,824
Time for our first demo.

2
00:00:03,824 --> 00:00:04,424
In this demo,

3
00:00:04,424 --> 00:00:07,490
what we're going to do will include creating the first

4
00:00:07,490 --> 00:00:12,922
CloudFormation stack by implementing AuroraStack.yml,

5
00:00:12,922 --> 00:00:17,461
that you will find in the folder you downloaded from my GitHub repository.

6
00:00:17,461 --> 00:00:22,755
If you missed the module entitled Download and Install Course Prerequisites,

7
00:00:22,755 --> 00:00:25,780
revisit that module and follow the instructions.

8
00:00:25,780 --> 00:00:31,348
What the AuroraStack.yml script will do is it will set up the

9
00:00:31,348 --> 00:00:35,475
entire infrastructure that we're going to use in this course that

10
00:00:35,475 --> 00:00:37,526
has to do with relational databases.

11
00:00:37,526 --> 00:00:39,911
Once the AuroraStack is running,

12
00:00:39,911 --> 00:00:44,110
we're going to review the CloudFormation stack's parameters,

13
00:00:44,110 --> 00:00:46,574
resources, and outputs.

14
00:00:46,574 --> 00:00:51,533
And then we're going to navigate around the AWS console to confirm all the

15
00:00:51,533 --> 00:00:55,118
resources that our AuroraStack was supposed to create,

16
00:00:55,118 --> 00:00:58,876
and confirm that yes, they are indeed created.

17
00:00:58,876 --> 00:01:04,410
Navigate to where you downloaded the code assets from my GitHub repository that

18
00:01:04,410 --> 00:01:11,389
are all in a folder entitled ETLAnalyticsUsingGlue-master.

19
00:01:11,389 --> 00:01:16,362
Double-click on it, and at the top of the list, you'll see AuroraStack.yml.

20
00:01:16,362 --> 00:01:21,332
That's the first code-related asset we're going to use in this course.

21
00:01:21,332 --> 00:01:25,556
Login to your AWS Management Console.

22
00:01:25,556 --> 00:01:29,511
Take note, in order to run this analytical workflow,

23
00:01:29,511 --> 00:01:40,660
you must be in either US West 2 Oregon or US East 2 Ohio regions only.

24
00:01:40,660 --> 00:01:46,813
Start typing in the search bar CloudFormation, and when you see it, click on it.

25
00:01:46,813 --> 00:01:49,125
This opens the CloudFormation console.

26
00:01:49,125 --> 00:01:52,507
If you don't have any CloudFormation stacks created

27
00:01:52,507 --> 00:01:59,266
yet in the region you selected, your screen will look just like mine.

28
00:01:59,266 --> 00:02:06,653
Click on the top button that reads Create Stack.

29
00:02:06,653 --> 00:02:13,632
In the Select Template window, click the button that reads Design template.

30
00:02:13,632 --> 00:02:16,785
By choosing this method over upload,

31
00:02:16,785 --> 00:02:19,673
we can visually see the CloudFormation stack being

32
00:02:19,673 --> 00:02:22,888
created and what the configurations are.

33
00:02:22,888 --> 00:02:28,030
This opens the CloudFormation Stack Designer window.

34
00:02:28,030 --> 00:02:32,593
Before we open our AuroraStack.yml script,

35
00:02:32,593 --> 00:02:35,662
there's a couple of things we need to do first.

36
00:02:35,662 --> 00:02:38,752
At the bottom of the new.template window,

37
00:02:38,752 --> 00:02:41,837
there's two tabs, Components and Template.

38
00:02:41,837 --> 00:02:43,285
Be sure Template is chosen,

39
00:02:43,285 --> 00:02:47,953
and then at the upper-right portion of the new.template

40
00:02:47,953 --> 00:02:51,077
window that reads Choose template language,

41
00:02:51,077 --> 00:02:54,350
change it from JSON to YAML.

42
00:02:54,350 --> 00:02:57,087
In the CloudFormation Designer menu bar at the top,

43
00:02:57,087 --> 00:03:03,774
look for the little file icon that when hovered over reads File,

44
00:03:03,774 --> 00:03:06,444
and click Open to open a template.

45
00:03:06,444 --> 00:03:14,604
Choose Local file, and navigate to the folder ETLAnalyticsUsingGlue-master.

46
00:03:14,604 --> 00:03:19,844
Choose AuroraStack.yml, and double-click on it to open it.

47
00:03:19,844 --> 00:03:26,250
I think what just happened here is really cool.

48
00:03:26,250 --> 00:03:28,300
Simply by importing a script file,

49
00:03:28,300 --> 00:03:35,081
CloudFormation created an architectural diagram in the Designer window,

50
00:03:35,081 --> 00:03:40,203
which essentially is your infrastructure architecture.

51
00:03:40,203 --> 00:03:41,962
The Designer window is pretty awesome.

52
00:03:41,962 --> 00:03:43,551
Let's open this up a little bit.

53
00:03:43,551 --> 00:03:46,656
If you hold down your left-mouse button,

54
00:03:46,656 --> 00:03:52,530
you can move the architectural diagram around in the Designer window.

55
00:03:52,530 --> 00:04:00,947
You can also zoom in and zoom out.

56
00:04:00,947 --> 00:04:03,491
That's really handy when you have a very large CloudFormation

57
00:04:03,491 --> 00:04:10,025
template with a lot of AWS resources being defined.

58
00:04:10,025 --> 00:04:12,467
Let me open up the template window a little bit.

59
00:04:12,467 --> 00:04:18,487
Another cool thing is if you click on any of the services in the diagram,

60
00:04:18,487 --> 00:04:22,024
for example, for the AuroraCluster,

61
00:04:22,024 --> 00:04:26,807
the script jumps to the line of code that defines

62
00:04:26,807 --> 00:04:29,801
that resource and its dependencies.

63
00:04:29,801 --> 00:04:34,115
CloudFormation is one of those services that's really

64
00:04:34,115 --> 00:04:37,382
easy to learn backwards-forwards.

65
00:04:37,382 --> 00:04:40,462
AWS has a number of pre-build CloudFormation templates,

66
00:04:40,462 --> 00:04:45,638
and if you load them into the Designer window and scroll

67
00:04:45,638 --> 00:04:49,625
around in the either JSON or YAML script,

68
00:04:49,625 --> 00:04:55,710
you can see how everything is defined and the dependencies between them.

69
00:04:55,710 --> 00:04:57,176
So now that our template is loaded,

70
00:04:57,176 --> 00:05:02,972
it's time to validate the template to ensure there's no errors.

71
00:05:02,972 --> 00:05:06,248
Go back up to the CloudFormation menu bar,

72
00:05:06,248 --> 00:05:13,073
and go to the little checkbox that when hovered over reads Validate template.

73
00:05:13,073 --> 00:05:15,737
You're going to have to watch real close because any

74
00:05:15,737 --> 00:05:19,826
notifications about the Validate template process will be shown

75
00:05:19,826 --> 00:05:23,788
right about here in the middle of this bar,

76
00:05:23,788 --> 00:05:26,796
so I'm going to click it, Validating the template,

77
00:05:26,796 --> 00:05:32,418
Template is valid, gone, that would be really easy to miss.

78
00:05:32,418 --> 00:05:34,171
Now that the template is valid,

79
00:05:34,171 --> 00:05:38,686
look for the little cloud icon in the CloudFormation Designer menu

80
00:05:38,686 --> 00:05:44,131
bar that when you hover over it reads Create stack.

81
00:05:44,131 --> 00:05:48,552
Click on it to return to the Create stack process.

82
00:05:48,552 --> 00:05:52,367
This brings you back to the Select Template page.

83
00:05:52,367 --> 00:05:55,127
But if you notice, under Choose a template,

84
00:05:55,127 --> 00:06:03,717
the radio button is selected that reads Specify an Amazon S3 template URL.

85
00:06:03,717 --> 00:06:08,515
That's because CloudFormation by default saves your template

86
00:06:08,515 --> 00:06:13,866
automatically in an S3 bucket in your account.

87
00:06:13,866 --> 00:06:17,726
Click on Next, and in the Stack Details page,

88
00:06:17,726 --> 00:06:21,388
give your stack the name AuroraStack.

89
00:06:21,388 --> 00:06:28,320
Scroll down to the Parameters, Network Configuration, MyIP address.

90
00:06:28,320 --> 00:06:32,623
This is where you paste in your IP address that I

91
00:06:32,623 --> 00:06:35,051
asked you to find in the last section.

92
00:06:35,051 --> 00:06:37,666
Paste in your IP address.

93
00:06:37,666 --> 00:06:42,815
Notice that AWS wants you to append your IP address with /32,

94
00:06:42,815 --> 00:06:45,413
so please do that now.

95
00:06:45,413 --> 00:06:49,660
If you scroll down a little bit more, under Amazon Aurora Configuration,

96
00:06:49,660 --> 00:06:57,586
notice that the AuroraDBUsername and the AuroraDBPassword are pre-populated.

97
00:06:57,586 --> 00:07:01,648
That's because those values were passed into the stack

98
00:07:01,648 --> 00:07:04,654
creation process and input parameters.

99
00:07:04,654 --> 00:07:07,790
Click on Next, and in the Options page,

100
00:07:07,790 --> 00:07:12,710
you can leave everything as is and click on next.

101
00:07:12,710 --> 00:07:14,839
This opens the Review page.

102
00:07:14,839 --> 00:07:17,989
The Review page gives you a chance to look over the

103
00:07:17,989 --> 00:07:21,572
configurations to ensure that the CloudFormation stack that

104
00:07:21,572 --> 00:07:25,060
you're creating has the right information.

105
00:07:25,060 --> 00:07:28,442
Then click on Create.

106
00:07:28,442 --> 00:07:34,403
After clicking Create, you'll be in the CloudFormation stack monitoring screen.

107
00:07:34,403 --> 00:07:38,913
You probably have to click the Refresh button to see anything being provisioned.

108
00:07:38,913 --> 00:07:42,963
And right here, our AuroraStack is being provisioned.

109
00:07:42,963 --> 00:07:46,850
It has a Status of CREATE_IN_PROGRESS.

110
00:07:46,850 --> 00:07:49,463
If you click on the Stack Name,

111
00:07:49,463 --> 00:07:54,653
that brings you into the Stack Detail page where you can

112
00:07:54,653 --> 00:07:58,971
look at the events to see what is happening as everything

113
00:07:58,971 --> 00:08:02,163
is provisioned and configured.

114
00:08:02,163 --> 00:08:03,328
Return back to the Stacks,

115
00:08:03,328 --> 00:08:08,262
and if you check the little checkbox that's to the left of the AuroraStack row,

116
00:08:08,262 --> 00:08:14,320
you can then look at quite a number of tabs that hold different information.

117
00:08:14,320 --> 00:08:18,135
This lets you expand that lower section with all the tabs.

118
00:08:18,135 --> 00:08:21,498
I encourage you to click through all of those tabs

119
00:08:21,498 --> 00:08:23,733
when you have your stack running,

120
00:08:23,733 --> 00:08:27,059
so that you become familiar with all the information

121
00:08:27,059 --> 00:08:31,083
that's given to you in those tabs.

122
00:08:31,083 --> 00:08:32,656
Click on the Resources tab.

123
00:08:32,656 --> 00:08:35,514
If you have the Resources tab open,

124
00:08:35,514 --> 00:08:40,399
you can scroll through and see some of the resources that

125
00:08:40,399 --> 00:08:43,708
the CloudFormation stack is provisioning.

126
00:08:43,708 --> 00:08:44,043
Occasionally,

127
00:08:44,043 --> 00:08:47,830
it's a good idea to click again on the Refresh button because

128
00:08:47,830 --> 00:08:51,462
you'll see more resources created from time to time.

129
00:08:51,462 --> 00:08:54,876
Just looking at all of these resources,

130
00:08:54,876 --> 00:08:59,219
aren't you glad that we didn't manually configure all of these?

131
00:08:59,219 --> 00:09:01,519
It's really worth the time to learn about CloudFormation.

132
00:09:01,519 --> 00:09:04,820
CloudFormation is infrastructure as code,

133
00:09:04,820 --> 00:09:09,547
and there's a lot of companies that have their entire global information and

134
00:09:09,547 --> 00:09:15,548
configuration in AWS defined in a CloudFormation stack because they can just

135
00:09:15,548 --> 00:09:19,825
replicate it in a new office whenever that happens.

136
00:09:19,825 --> 00:09:20,898
It's very convenient.

137
00:09:20,898 --> 00:09:24,533
Once your AuroraStack shows the Status CREATE_COMPLETE,

138
00:09:24,533 --> 00:09:29,586
everything is provisioned and up and running in your account.

139
00:09:29,586 --> 00:09:32,161
Now, we're looking at the Resource page here,

140
00:09:32,161 --> 00:09:37,939
and everything here can be mapped to the AuroraStack.yml script.

141
00:09:37,939 --> 00:09:40,290
If you click on Outputs,

142
00:09:40,290 --> 00:09:46,410
Outputs in CloudFormation can be used as inputs to other CloudFormation stacks,

143
00:09:46,410 --> 00:09:50,069
which is exactly what we'll do when we launch our

144
00:09:50,069 --> 00:09:53,072
Glue stack in an upcoming module.

145
00:09:53,072 --> 00:09:55,619
If you click on the Parameters tab,

146
00:09:55,619 --> 00:10:01,105
you'll see the values that were input into the CloudFormation

147
00:10:01,105 --> 00:10:04,153
creation process via the AuroraStack.yml script,

148
00:10:04,153 --> 00:10:12,339
or in the case of MyIP, we input that parameter in the stack creation process.

149
00:10:12,339 --> 00:10:17,307
It's a good idea to open up something like Notepad,

150
00:10:17,307 --> 00:10:21,375
a plain text editor, in the AuroraStack.yml script,

151
00:10:21,375 --> 00:10:27,157
and copy in the connection values that are in the CloudFormation stack screen.

152
00:10:27,157 --> 00:10:32,250
All of the connection information values are in the Outputs tab.

153
00:10:32,250 --> 00:10:36,852
So copy the AuroraClusterEndPoint, paste it into Notepad,

154
00:10:36,852 --> 00:10:42,551
and then copy in your AuroraDBUsername and AuroraDBPassword.

155
00:10:42,551 --> 00:10:47,445
The username is here, copy that, and paste it into this document.

156
00:10:47,445 --> 00:10:51,896
The password is the AuroraClusterPassword.

157
00:10:51,896 --> 00:10:55,147
So copy that, and paste that in, and save it.

158
00:10:55,147 --> 00:10:56,029
This way,

159
00:10:56,029 --> 00:11:00,462
we have everything convenient when we're connecting with our third-party SQL

160
00:11:00,462 --> 00:11:06,233
client to the running Amazon Aurora database in the AWS cloud.

161
00:11:06,233 --> 00:11:09,322
I'm going to minimize that, and maximize this.

162
00:11:09,322 --> 00:11:10,824
So in the Resources tab,

163
00:11:10,824 --> 00:11:14,336
there's quite a few resources in there that are really important,

164
00:11:14,336 --> 00:11:18,660
and it's a good idea to navigate to each service's

165
00:11:18,660 --> 00:11:22,137
console so that you can validate that yes,

166
00:11:22,137 --> 00:11:25,553
these resources are created, and they're up and running.

167
00:11:25,553 --> 00:11:29,618
Let's look at the AuroraDB and Cluster first.

168
00:11:29,618 --> 00:11:33,702
If you go up to the AWS dark menu bar, and you click on the drop-down,

169
00:11:33,702 --> 00:11:38,082
you can choose the Services from here, but if you just click on them,

170
00:11:38,082 --> 00:11:42,053
what's going to happen is you'll have to go back and forth in the browser,

171
00:11:42,053 --> 00:11:45,214
and it's really hard to remember where you're at,

172
00:11:45,214 --> 00:11:47,785
or I should say it's really easy to get lost.

173
00:11:47,785 --> 00:11:51,429
So the way that I like to do this is scroll down to

174
00:11:51,429 --> 00:11:54,043
the resource that I want to look at,

175
00:11:54,043 --> 00:11:57,288
and in this case it's a relational database service,

176
00:11:57,288 --> 00:12:02,517
and if you right-click on it, you have the option to open the link in a new tab.

177
00:12:02,517 --> 00:12:08,605
It's much easier to have multiple tabs open when you have a lot of AWS

178
00:12:08,605 --> 00:12:12,562
resources that you're working with at the same time,

179
00:12:12,562 --> 00:12:14,443
and then you just go from tab to tab.

180
00:12:14,443 --> 00:12:16,926
So I'm going to say Open link in new tab,

181
00:12:16,926 --> 00:12:20,859
and here it's coming up, and then click on it.

182
00:12:20,859 --> 00:12:23,567
This is the Amazon Relational Database service console.

183
00:12:23,567 --> 00:12:29,090
If we want to see if we have an Aurora database running, click on Databases.

184
00:12:29,090 --> 00:12:32,514
So we do have our AuroraCluster running.

185
00:12:32,514 --> 00:12:36,216
If we click on the name of either one of these,

186
00:12:36,216 --> 00:12:40,390
you get more detail about each one you click on.

187
00:12:40,390 --> 00:12:43,269
For example, under the tab Connectivity and security,

188
00:12:43,269 --> 00:12:49,485
you can see that there is 2 endpoints, and if you click on Monitoring,

189
00:12:49,485 --> 00:12:56,840
Amazon Aurora has some Amazon CloudWatch metrics enabled by default.

190
00:12:56,840 --> 00:12:59,107
So if we had this cluster running for a long time,

191
00:12:59,107 --> 00:13:02,163
these charts would be much more interesting.

192
00:13:02,163 --> 00:13:06,298
But I'm going to leave it to you to click around in the consoles that

193
00:13:06,298 --> 00:13:10,772
I'll be showing you now with our resources running because it's a really

194
00:13:10,772 --> 00:13:13,814
good way to find out what's connected to what.

195
00:13:13,814 --> 00:13:20,934
AWS does a great job of having links in various consoles that link together all

196
00:13:20,934 --> 00:13:25,936
the different services because AWS believes in primitives,

197
00:13:25,936 --> 00:13:27,322
not frameworks.

198
00:13:27,322 --> 00:13:30,863
What that means is that there's a lot of little LEGO

199
00:13:30,863 --> 00:13:33,773
pieces around that you have to build with,

200
00:13:33,773 --> 00:13:37,201
and it can be confusing especially if you're starting.

201
00:13:37,201 --> 00:13:37,932
In reality,

202
00:13:37,932 --> 00:13:44,478
it's the best way to build anything really because your creativity is unlimited,

203
00:13:44,478 --> 00:13:48,993
what you do with the individual LEGO pieces allows for a lot of innovation,

204
00:13:48,993 --> 00:13:52,066
rather than getting the whole kitchen sink in a framework,

205
00:13:52,066 --> 00:13:56,346
where you're forced to use what the creators of the

206
00:13:56,346 --> 00:13:57,731
framework thought you needed.

207
00:13:57,731 --> 00:13:59,920
Now that we confirmed the cluster is running,

208
00:13:59,920 --> 00:14:02,458
let's now go back up to Services,

209
00:14:02,458 --> 00:14:08,879
and then right-click on S3 and Open a link in a new tab.

210
00:14:08,879 --> 00:14:11,857
If you go to S3, and filter by Date created,

211
00:14:11,857 --> 00:14:15,557
you'll see that this bucket is where CloudFormation

212
00:14:15,557 --> 00:14:18,151
is holding our template code.

213
00:14:18,151 --> 00:14:22,424
Go back up to Services again, and right-click on EC2,

214
00:14:22,424 --> 00:14:27,881
Open link in new tab, we can see in the EC2 console,

215
00:14:27,881 --> 00:14:31,634
if you click on Security Groups under NETWORK and SECURITY,

216
00:14:31,634 --> 00:14:35,182
we have an AuroraStack security group.

217
00:14:35,182 --> 00:14:37,769
If you click the button next to the name,

218
00:14:37,769 --> 00:14:41,121
you have information that you can scroll through again on

219
00:14:41,121 --> 00:14:43,736
your own time when you're building this,

220
00:14:43,736 --> 00:14:46,021
and I suggest that you do that.

221
00:14:46,021 --> 00:14:48,708
If you click on Network Interfaces,

222
00:14:48,708 --> 00:14:52,453
you can see that we have a network interface associated

223
00:14:52,453 --> 00:14:54,921
with the Security Group AuroraStack.

224
00:14:54,921 --> 00:15:00,843
And this is a great example of where AWS gives you links

225
00:15:00,843 --> 00:15:04,059
to move around between the services,

226
00:15:04,059 --> 00:15:07,783
and it also contains a lot of other useful information.

227
00:15:07,783 --> 00:15:14,784
Now if you go up to Services and start typing in VPC for virtual private cloud,

228
00:15:14,784 --> 00:15:15,720
when it comes up, click on it.

229
00:15:15,720 --> 00:15:19,715
This is the VPC console or dashboard.

230
00:15:19,715 --> 00:15:23,600
You can see here that we have 1 VPC up and running,

231
00:15:23,600 --> 00:15:27,408
and it has a lot of information that you can scroll through,

232
00:15:27,408 --> 00:15:30,396
and you can go down to where the tabs are,

233
00:15:30,396 --> 00:15:34,890
you can click on the Route table that was configured,

234
00:15:34,890 --> 00:15:37,904
the Network ACL, or access control list,

235
00:15:37,904 --> 00:15:38,334
etc.

236
00:15:38,334 --> 00:15:40,373
You can also click on the CIDR Blocks and more,

237
00:15:40,373 --> 00:15:43,539
and I encourage you to do that on your own.

238
00:15:43,539 --> 00:15:46,860
If you click on Subnets, we have two subnets,

239
00:15:46,860 --> 00:15:51,476
and they are associated with our AuroraCluster.

240
00:15:51,476 --> 00:15:55,589
So if you click on Route Table, you will see that there's an internet gateway,

241
00:15:55,589 --> 00:15:58,799
as well as a VPC endpoint.

242
00:15:58,799 --> 00:15:59,457
And again,

243
00:15:59,457 --> 00:16:04,715
click around in here because it's really cool how everything fits together.

244
00:16:04,715 --> 00:16:07,820
You can also just click on Route Tables from the left menu,

245
00:16:07,820 --> 00:16:11,298
and the top one says it has 2 subnets.

246
00:16:11,298 --> 00:16:14,823
It has route tables that's connected to 2 subnets,

247
00:16:14,823 --> 00:16:19,138
and you can click around at the Subnet Associations,

248
00:16:19,138 --> 00:16:22,292
the Routes, and more, and I encourage you to do that.

249
00:16:22,292 --> 00:16:26,582
If you click on Internet Gateways, you get more information again.

250
00:16:26,582 --> 00:16:31,216
If you click on Endpoints, we do have an Aurora endpoint.

251
00:16:31,216 --> 00:16:36,312
Returning back to the CloudFormation stack page for our AuroraStack,

252
00:16:36,312 --> 00:16:40,266
we've now confirmed that these resources are up and running,

253
00:16:40,266 --> 00:16:46,512
so it's time to connect to our AuroraStack from our third-party SQL client.

254
00:16:46,512 --> 00:16:48,954
Open up your third-party SQL client.

255
00:16:48,954 --> 00:16:50,974
I'm using MySQL Workbench.

256
00:16:50,974 --> 00:16:53,992
If you already have a third-party SQL client,

257
00:16:53,992 --> 00:16:57,232
you're already familiar on how to connect to a database,

258
00:16:57,232 --> 00:16:59,781
but I'm going to walk through these steps.

259
00:16:59,781 --> 00:17:05,095
It's a good idea to have side by side your third-party SQL client taking up

260
00:17:05,095 --> 00:17:09,837
part of this screen and the text file that you copied the connection

261
00:17:09,837 --> 00:17:12,965
information into on the other side of the screen.

262
00:17:12,965 --> 00:17:18,978
So the first thing is we click on database, and you choose Manage Connections.

263
00:17:18,978 --> 00:17:21,903
Click on New, you can use any Connection Name that you want,

264
00:17:21,903 --> 00:17:26,322
I chose Kimmys_pluralsight_aurora_demo, okay,

265
00:17:26,322 --> 00:17:30,121
that's so Kim, like why couldn't I just call it whatever?

266
00:17:30,121 --> 00:17:34,616
I mean, call it whatever, but I have to pick this big, long, hairy name, ha-ha.

267
00:17:34,616 --> 00:17:39,592
Under the Hostname, if you get rid of the default value that's there,

268
00:17:39,592 --> 00:17:44,892
and copy your AuroraClusterEndPoint, and paste that into the Hostname field,

269
00:17:44,892 --> 00:17:51,999
and then in the Username, put in the AuroraDBUsername,

270
00:17:51,999 --> 00:17:54,673
and MySQL Workbench doesn't prompt for a password

271
00:17:54,673 --> 00:17:58,207
until you actually try to connect.

272
00:17:58,207 --> 00:18:04,377
For now, let's click on Test Connection, and it's asking me for my password.

273
00:18:04,377 --> 00:18:08,593
So copy it and paste it in the Password field, and then click on OK.

274
00:18:08,593 --> 00:18:12,480
You get a popup that sounds like an error to me,

275
00:18:12,480 --> 00:18:15,743
but what it is saying, if you look at the bottom paragraph,

276
00:18:15,743 --> 00:18:19,850
it reads a successful MySQL connection was made with the

277
00:18:19,850 --> 00:18:21,961
parameters defined for this connection.

278
00:18:21,961 --> 00:18:25,001
So click OK, and then simply close this.

279
00:18:25,001 --> 00:18:31,119
And we can get rid of the text document now, and maximize MySQL Workbench.

280
00:18:31,119 --> 00:18:34,552
Now we go back up to Database, and we say Connect to Database.

281
00:18:34,552 --> 00:18:39,793
MySQL Workbench will have the Connect to Database popup

282
00:18:39,793 --> 00:18:43,826
reconfigured with the connection that you just defined.

283
00:18:43,826 --> 00:18:44,793
So click on OK.

284
00:18:44,793 --> 00:18:47,256
It's opening the SQL editor, and when it opens,

285
00:18:47,256 --> 00:18:50,336
we don't have anything in here yet,

286
00:18:50,336 --> 00:18:54,900
we are connected to our Aurora database in the cloud because

287
00:18:54,900 --> 00:18:57,785
we successfully connected in the last step.

288
00:18:57,785 --> 00:19:03,528
So the first thing we have to do is give our Aurora database a schema.

289
00:19:03,528 --> 00:19:08,103
Go up to File, and then choose Run SQL Script,

290
00:19:08,103 --> 00:19:12,846
and in your folder, ETLAnalyticsUsingGlue-master,

291
00:19:12,846 --> 00:19:21,444
there was a sakila-db ZIP file, and if you unzip it,

292
00:19:21,444 --> 00:19:26,766
you have two SQL scripts, one for the schema and one for the data.

293
00:19:26,766 --> 00:19:31,366
So choose the schema now.

294
00:19:31,366 --> 00:19:36,302
That opens the Run SQL script popup window where you can

295
00:19:36,302 --> 00:19:39,611
scroll through to see what's being defined,

296
00:19:39,611 --> 00:19:44,404
and I encourage that you do that.

297
00:19:44,404 --> 00:19:45,993
So I'm just going to click Run,

298
00:19:45,993 --> 00:19:49,810
and the Run SQL Script window reads at the bottom,

299
00:19:49,810 --> 00:19:52,195
Operation completed successfully.

300
00:19:52,195 --> 00:19:53,273
So I'm going to close this.

301
00:19:53,273 --> 00:19:58,034
Now what you have to do in the Navigator left pane is click

302
00:19:58,034 --> 00:20:04,042
on the Refresh button next to SCHEMAS, and there's our sakila schema.

303
00:20:04,042 --> 00:20:04,880
We expand this,

304
00:20:04,880 --> 00:20:11,225
we're going to be doing things with the film table and the film_category table.

305
00:20:11,225 --> 00:20:13,817
Just to confirm that we do indeed have a schema,

306
00:20:13,817 --> 00:20:17,700
type in use sakila, highlight it, and execute it.

307
00:20:17,700 --> 00:20:20,367
And if you look at the bottom in the Output,

308
00:20:20,367 --> 00:20:26,632
it shows that it ran successfully, but 0 rows were affected,

309
00:20:26,632 --> 00:20:29,069
and that's because we just have a schema,

310
00:20:29,069 --> 00:20:30,011
we don't have data.

311
00:20:30,011 --> 00:20:30,953
So, let's confirm that.

312
00:20:30,953 --> 00:20:34,815
If we run a simple select query on the film table,

313
00:20:34,815 --> 00:20:37,516
and highlight it, and execute the query,

314
00:20:37,516 --> 00:20:41,649
we get exactly what we should if all we have is a schema.

315
00:20:41,649 --> 00:20:46,165
We have the table names, we have the column names for each table,

316
00:20:46,165 --> 00:20:48,976
but there's no data, everything is null.

317
00:20:48,976 --> 00:20:53,187
So what we need to do is go back up to File,

318
00:20:53,187 --> 00:20:58,903
and click on Run SQL Script, and this time we're going to choose sakila-data.

319
00:20:58,903 --> 00:21:01,963
The Run SQL Script dialog comes up again,

320
00:21:01,963 --> 00:21:06,691
which you can scroll through, and then click Run.

321
00:21:06,691 --> 00:21:15,907
We're watching the script running, And again,

322
00:21:15,907 --> 00:21:20,569
at the bottom it reads Operation completed successfully.

323
00:21:20,569 --> 00:21:26,201
So now we can close this, and let's run this again and see what we get.

324
00:21:26,201 --> 00:21:29,507
Voila, we have data.

325
00:21:29,507 --> 00:21:33,325
What you're looking at in this sakila database are the

326
00:21:33,325 --> 00:21:36,903
favorite films of the NBA players.

327
00:21:36,903 --> 00:21:41,500
So you can see the columns that the film table has,

328
00:21:41,500 --> 00:21:46,518
let's now look at the film_category table and see what's there.

329
00:21:46,518 --> 00:21:51,696
Execute this query, and voila, we have data again.

330
00:21:51,696 --> 00:21:55,723
The film_category table only has three columns.

331
00:21:55,723 --> 00:22:00,175
If you look, it has a last_update column,

332
00:22:00,175 --> 00:22:04,202
and so does the film table, and both tables have film_id,

333
00:22:04,202 --> 00:22:10,228
but the film_category has a category_id that the film table doesn't have.

334
00:22:10,228 --> 00:22:15,442
So we're going to do a join of the film and the film_category table.

335
00:22:15,442 --> 00:22:20,730
This SQL statement is included in your course assets folder if

336
00:22:20,730 --> 00:22:24,470
you don't want to just manually type it in.

337
00:22:24,470 --> 00:22:28,187
If you select it all and execute it, alright, we have data again.

338
00:22:28,187 --> 00:22:34,178
If you scroll to the right, you can see that the two tables were joined.

339
00:22:34,178 --> 00:22:37,981
The table has two last_update columns, one from each table,

340
00:22:37,981 --> 00:22:43,768
and we've got the category_id, which is what we wanted to get through the join.

341
00:22:43,768 --> 00:22:46,211
Through our third-party SQL client,

342
00:22:46,211 --> 00:22:53,225
we connected to the Amazon Aurora database in the AWS cloud remotely,

343
00:22:53,225 --> 00:22:58,289
and we populated the Aurora database with a schema and data.

344
00:22:58,289 --> 00:22:59,788
In another module,

345
00:22:59,788 --> 00:23:04,500
I'll show you how to do this using state-of-the-art methodologies.

346
00:23:04,500 --> 00:23:09,522
We'll use AWS Glue crawlers to crawl this Aurora database,

347
00:23:09,522 --> 00:23:14,311
and then put the schema and statistics into the Glue Data Catalog.

348
00:23:14,311 --> 00:23:17,405
Once the crawler does the work for us,

349
00:23:17,405 --> 00:23:22,242
we'll use an AWS Glue job to perform an ETL transformation,

350
00:23:22,242 --> 00:23:27,685
joining the film and film_category tables just like we did here,

351
00:23:27,685 --> 00:23:31,494
but in a much easier time-saving way.

352
00:23:31,494 --> 00:23:33,013
In the next section,

353
00:23:33,013 --> 00:23:42,000
we'll review in a little more detail our AuroraStacks resources, outputs, and parameters.

