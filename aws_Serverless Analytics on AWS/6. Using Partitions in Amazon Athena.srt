1
00:00:01,998 --> 00:00:05,880
This section is about using partitions in Amazon Athena.

2
00:00:05,880 --> 00:00:10,383
When you partition your data, what happens is the following,

3
00:00:10,383 --> 00:00:13,977
the data files are separated by any column.

4
00:00:13,977 --> 00:00:18,038
A common column to use for partitioning is by date.

5
00:00:18,038 --> 00:00:24,672
The query only reads the data that it needs, drastically reducing query time.

6
00:00:24,672 --> 00:00:28,284
In comparison to relational databases,

7
00:00:28,284 --> 00:00:32,731
where a query has to iterate over all rows to find something small,

8
00:00:32,731 --> 00:00:38,917
using partitions dramatically reduces the amount of data scanned,

9
00:00:38,917 --> 00:00:40,671
and thus reduces cost.

10
00:00:40,671 --> 00:00:45,738
Partitions are defined when you create tables.

11
00:00:45,738 --> 00:00:49,310
Partitions can be thought of as virtual columns,

12
00:00:49,310 --> 00:00:54,869
and partitioning works on both text and columnar data.

13
00:00:54,869 --> 00:00:58,250
The table on this slide compares query runtimes between a

14
00:00:58,250 --> 00:01:02,420
partitioned and a non-partitioned table.

15
00:01:02,420 --> 00:01:08,563
Both tables contain 74 GB of data in an uncompressed text format.

16
00:01:08,563 --> 00:01:12,926
The partition table is partitioned by the l_shipdate column,

17
00:01:12,926 --> 00:01:17,591
and it has 2526 partitions.

18
00:01:17,591 --> 00:01:21,021
Look at the amount of data scanned in the non-partitioned

19
00:01:21,021 --> 00:01:24,061
table versus the partitioned table.

20
00:01:24,061 --> 00:01:31,328
The runtime of partition data versus non-partitioned data resulted in

21
00:01:31,328 --> 00:01:38,926
being 73 to 77% faster with a cost savings of 98 to 99%,

22
00:01:38,926 --> 00:01:43,902
hence the importance of partitioning your data.

23
00:01:43,902 --> 00:01:46,735
There are two scenarios for Athena partitions.

24
00:01:46,735 --> 00:01:51,990
If the data is already partitioned in S3,

25
00:01:51,990 --> 00:01:55,456
like you see in the top CREATE EXTERNAL TABLE statement,

26
00:01:55,456 --> 00:02:01,194
the S3 location that is in the CREATE statement terminated with a backslash,

27
00:02:01,194 --> 00:02:08,232
then Athena finds the partitioning using equal signs like you see in the

28
00:02:08,232 --> 00:02:11,284
bottom of the top CREATE EXTERNAL TABLE statement.

29
00:02:11,284 --> 00:02:15,501
When you give a DDL statement with the location of the parent folder,

30
00:02:15,501 --> 00:02:19,381
the schema, and the name of the partitioned column,

31
00:02:19,381 --> 00:02:22,781
Athena can query data in those subfolders.

32
00:02:22,781 --> 00:02:29,314
If the data isn't partitioned in S3 like you see in the lower CREATE

33
00:02:29,314 --> 00:02:31,914
EXTERNAL TABLE statement to partition the data,

34
00:02:31,914 --> 00:02:38,450
you'd have to use ALTER_TABLE_ADD_PARTITION to add each partition manually,

35
00:02:38,450 --> 00:02:42,799
then run the MSCK REPAIR_TABLE_COMMAND To detect partitions

36
00:02:42,799 --> 00:02:46,374
and the data associated with the partitions.

37
00:02:46,374 --> 00:02:55,000
In the next section, I'll cover monitoring and tracing Amazon Athena's ephemeral data.

