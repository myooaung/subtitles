WEBVTT
1
00:00:01.289 --> 00:00:06.522
In this section, I'll cover Amazon Athena databases and tables.

2
00:00:06.522 --> 00:00:09.773
There are two features that you should know about Amazon Athena tables.

3
00:00:09.773 --> 00:00:14.154
The first one is that all operations that change

4
00:00:14.154 --> 00:00:15.782
table states are ACID compliant,

5
00:00:15.782 --> 00:00:19.763
and the second feature is that all tables are external.

6
00:00:19.763 --> 00:00:22.135
That way, when you drop a table in Athena,

7
00:00:22.135 --> 00:00:29.210
only the table metadata is removed and not the underlying data in Amazon S3.

8
00:00:29.210 --> 00:00:34.820
Athena uses Apache Hive to define tables and create databases.

9
00:00:34.820 --> 00:00:41.845
Athena databases are essentially only a logical namespace of tables.

10
00:00:41.845 --> 00:00:44.170
When you create a database and table in Athena,

11
00:00:44.170 --> 00:00:48.808
you are simply describing the schema and the location where the table

12
00:00:48.808 --> 00:00:54.466
data are located in Amazon S3 for read time querying.

13
00:00:54.466 --> 00:00:56.401
Databases and tables, therefore,

14
00:00:56.401 --> 00:01:00.139
have a slightly different meaning than they do for traditional

15
00:01:00.139 --> 00:01:05.503
relational database systems because the data isn't stored along with

16
00:01:05.503 --> 00:01:08.943
the schema definition for the database and table.

17
00:01:08.943 --> 00:01:11.409
When you create a table,

18
00:01:11.409 --> 00:01:16.001
you specify an Amazon S3 bucket location for the

19
00:01:16.001 --> 00:01:18.386
underlying data using the location clause.

20
00:01:18.386 --> 00:01:22.344
There's many ways to write DDL statements.

21
00:01:22.344 --> 00:01:28.454
You can use the Hive DDL statement directly from Athena's console.

22
00:01:28.454 --> 00:01:32.938
You can use the Athena API, the JDBC/ODBC drivers,

23
00:01:32.938 --> 00:01:37.851
Glue crawlers, and the Glue API for table creation.

24
00:01:37.851 --> 00:01:41.217
If you anticipate changes in table schemas,

25
00:01:41.217 --> 00:01:44.366
consider creating them in a data format that's

26
00:01:44.366 --> 00:01:47.230
suitable for downstream consumption.

27
00:01:47.230 --> 00:01:51.380
Your goals are to reuse existing Athena queries against

28
00:01:51.380 --> 00:01:56.049
evolving schemas and avoid schema mismatch errors when

29
00:01:56.049 --> 00:01:58.504
querying tables with partitions.

30
00:01:58.504 --> 00:02:04.795
Amazon Athena uses schema-on-read versus schema-on-write.

31
00:02:04.795 --> 00:02:10.252
As we progressed to more varied datasets and analytical requirements,

32
00:02:10.252 --> 00:02:14.570
the predefined schemas were not able to keep up.

33
00:02:14.570 --> 00:02:19.799
Moreover, by the time the models were built and put into production,

34
00:02:19.799 --> 00:02:22.228
the requirements had changed.

35
00:02:22.228 --> 00:02:27.158
Schema-on-read provides the much needed flexibility to an analytical

36
00:02:27.158 --> 00:02:31.057
project because you don't have to rely on physical schemas.

37
00:02:31.057 --> 00:02:36.203
This improves the overall performance when it comes to high-volume data loads.

38
00:02:36.203 --> 00:02:41.956
It also enables you to query the same raw dataset over and over again.

39
00:02:41.956 --> 00:02:45.761
Because there are no physical constraints for the data,

40
00:02:45.761 --> 00:02:50.992
it works well with datasets with undefined data structures.

41
00:02:50.992 --> 00:02:54.431
There are some nice shortcuts to create tables from

42
00:02:54.431 --> 00:02:56.816
the Amazon Athena Query Editor.

43
00:02:56.816 --> 00:03:01.348
The screenshot on this slide shows the options.

44
00:03:01.348 --> 00:03:07.436
This slide provides a sample of how to create a database and tables with Athena.

45
00:03:07.436 --> 00:03:11.988
Notice that all that's being declared is the metadata for the table.

46
00:03:11.988 --> 00:03:17.203
All Athena tables are referred to as external.

47
00:03:17.203 --> 00:03:22.923
In the table definition shown here, we're just defining the table name,

48
00:03:22.923 --> 00:03:25.459
the column names, the data types,

49
00:03:25.459 --> 00:03:31.701
and where the data is going to reside without physically touching the data.

50
00:03:31.701 --> 00:03:37.763
Notice the S3 path stops at data/*.

51
00:03:37.763 --> 00:03:42.074
This will scan all objects under that root versus if you

52
00:03:42.074 --> 00:03:48.129
wanted to scan one of the objects, you'd add the object name to the S3 path.

53
00:03:48.129 --> 00:03:53.259
The table name is access_logs, a string and a timestamp column are declared,

54
00:03:53.259 --> 00:03:58.518
the row format is delimited by fields terminated by

55
00:03:58.518 --> 00:04:01.743
a tab and stored as a text file,

56
00:04:01.743 --> 00:04:06.243
and the data catalog contains the SerDe information.

57
00:04:06.243 --> 00:04:13.680
Everything under that root, data/*, is surrounded by a red rectangle.

58
00:04:13.680 --> 00:04:18.093
This is a generic CREATE DATABASE statement in Amazon Athena.

59
00:04:18.093 --> 00:04:22.655
I'll be showing you how to do that in the upcoming demo.

60
00:04:22.655 --> 00:04:28.008
This is a generic Amazon Athena CREATE EXTERNAL TABLE syntax,

61
00:04:28.008 --> 00:04:31.333
which we'll be doing in the upcoming demo as well.

62
00:04:31.333 --> 00:04:36.720
This is a really good link if you want to know all about the

63
00:04:36.720 --> 00:04:41.829
properties that are necessary or optional in an Amazon Athena

64
00:04:41.829 --> 00:04:44.840
CREATE EXTERNAL TABLE statement,

65
00:04:44.840 --> 00:04:48.103
and this is a generic CREATE TABLE AS SELECT statement.

66
00:04:48.103 --> 00:04:52.725
This is a really good link to find out everything about

67
00:04:52.725 --> 00:04:56.816
how to properly create CTAS statements.

68
00:04:56.816 --> 00:05:01.164
The next section is a demo section where we'll take a

69
00:05:01.164 --> 00:05:03.684
tour around the Amazon Athena console,

70
00:05:03.684 --> 00:05:14.000
create a database and a table in Amazon Athena, and query the data with SQL in the Athena Query Editor.

