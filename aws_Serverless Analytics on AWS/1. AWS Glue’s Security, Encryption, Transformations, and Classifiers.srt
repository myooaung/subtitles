1
00:00:00,000 --> 00:00:01,115
Hi everyone.

2
00:00:01,115 --> 00:00:03,345
It's Kim Schmidt again.

3
00:00:03,345 --> 00:00:04,524
In the last module,

4
00:00:04,524 --> 00:00:07,907
we set up the relational data portion of this

5
00:00:07,907 --> 00:00:11,852
course using Amazon CloudFormation.

6
00:00:11,852 --> 00:00:15,155
We also populated an Amazon Aurora Relational Database,

7
00:00:15,155 --> 00:00:19,730
connected to this database in the cloud remotely with a

8
00:00:19,730 --> 00:00:23,904
third-party SQL client and ran some queries.

9
00:00:23,904 --> 00:00:24,506
In this short module,

10
00:00:24,506 --> 00:00:29,563
I'll cover some of the necessary and amazing details about AWS Glue,

11
00:00:29,563 --> 00:00:35,191
so you'll be familiar with these concepts as we build our next CloudFormation

12
00:00:35,191 --> 00:00:39,697
stack that creates the infrastructure for using AWS Glue,

13
00:00:39,697 --> 00:00:44,026
Glue crawlers, Glue jobs, and the Glue Data Catalog.

14
00:00:44,026 --> 00:00:47,914
Let's now look at how encryption and security are

15
00:00:47,914 --> 00:00:53,272
implemented for AWS Glue in an S3 Data Lake.

16
00:00:53,272 --> 00:00:57,763
You use AWS Identity and Access Management,

17
00:00:57,763 --> 00:00:58,867
or IAM,

18
00:00:58,867 --> 00:01:04,095
policies to assign permissions that determine who is allowed to

19
00:01:04,095 --> 00:01:08,025
manage AWS Glue resources via usernames and passwords.

20
00:01:08,025 --> 00:01:14,814
In addition to a username and password, you can also generate keys for each user.

21
00:01:14,814 --> 00:01:18,801
You can use these keys when we you access AWS services

22
00:01:18,801 --> 00:01:24,419
programmatically either through one of the several SDKs or by

23
00:01:24,419 --> 00:01:29,655
using the AWS Command Line Interface, or CLI.

24
00:01:29,655 --> 00:01:34,932
The SDK and CLI tools use the access keys to

25
00:01:34,932 --> 00:01:37,447
cryptographically sign your request.

26
00:01:37,447 --> 00:01:41,265
A service role is an IAM role that a service assumes to

27
00:01:41,265 --> 00:01:44,598
perform actions in your account on your behalf.

28
00:01:44,598 --> 00:01:47,333
When you set up some AWS service environments,

29
00:01:47,333 --> 00:01:51,346
you must define a role for this service to assume.

30
00:01:51,346 --> 00:01:55,403
This service role must include all of the permissions that are required for

31
00:01:55,403 --> 00:02:00,610
the service to access the AWS resources that it needs to.

32
00:02:00,610 --> 00:02:04,674
You use AWS Glue resource policies to control access

33
00:02:04,674 --> 00:02:07,222
to the Glue Data Catalog resources.

34
00:02:07,222 --> 00:02:11,027
Glue enables you to encrypt data, logs,

35
00:02:11,027 --> 00:02:17,603
and bookmarks using keys that you manage with AWS Key Management Service,

36
00:02:17,603 --> 00:02:19,469
or KMS.

37
00:02:19,469 --> 00:02:24,441
You can configure ETL jobs and development endpoints to use AWS

38
00:02:24,441 --> 00:02:28,187
KMS keys to write encrypted data at rest.

39
00:02:28,187 --> 00:02:28,733
Additionally,

40
00:02:28,733 --> 00:02:37,070
you can use AWS KMS keys to encrypt the logs generated by crawlers and ETL jobs,

41
00:02:37,070 --> 00:02:41,745
as well as encrypt ETL job bookmarks.

42
00:02:41,745 --> 00:02:43,227
With AWS Glue,

43
00:02:43,227 --> 00:02:47,660
you can also encrypt the metadata stored in the data catalog

44
00:02:47,660 --> 00:02:52,467
with keys that you manage with AWS KMS.

45
00:02:52,467 --> 00:02:59,532
You can only connect to a JDBC data store with trusted Secure Socket Layer,

46
00:02:59,532 --> 00:03:01,604
or SSL, connections.

47
00:03:01,604 --> 00:03:05,323
You use the security features of your database engine to control who

48
00:03:05,323 --> 00:03:11,405
can log into the databases on a database instance.

49
00:03:11,405 --> 00:03:15,478
Let's now look at Glue's built-in transformations that

50
00:03:15,478 --> 00:03:19,027
are available for ETL functionality.

51
00:03:19,027 --> 00:03:22,346
Glue provides a set of built-in PySpark transformations

52
00:03:22,346 --> 00:03:25,469
that you can use to process your data.

53
00:03:25,469 --> 00:03:29,321
You can call these transformations from your ETL script.

54
00:03:29,321 --> 00:03:35,295
Your data passes from transformation to transformation in DynamicFrames.

55
00:03:35,295 --> 00:03:37,672
The DynamicFrame contains your data,

56
00:03:37,672 --> 00:03:42,165
and you reference its schema to process your data.

57
00:03:42,165 --> 00:03:42,860
Initially,

58
00:03:42,860 --> 00:03:48,617
AWS Glue generates an ETL script that includes built-in transformations.

59
00:03:48,617 --> 00:03:54,763
But you can edit this script to add sources, targets, and transformations.

60
00:03:54,763 --> 00:03:57,928
You can customize the job processing environment by providing

61
00:03:57,928 --> 00:04:01,843
arguments for your job and the generated script.

62
00:04:01,843 --> 00:04:08,154
Use these tables for your own reference when authoring ETL scripts.

63
00:04:08,154 --> 00:04:10,931
One built-in transformation that I'd like to point out is

64
00:04:10,931 --> 00:04:15,143
in the bottom row of the top-left table,

65
00:04:15,143 --> 00:04:16,359
Relationalize.

66
00:04:16,359 --> 00:04:20,498
Let's dive deeper into what that means and when to use it.

67
00:04:20,498 --> 00:04:24,259
The Glue Relationalize transform simplifies the ETL process

68
00:04:24,259 --> 00:04:30,413
by converting nested JSON into columns that you can easily

69
00:04:30,413 --> 00:04:33,023
import into relational databases.

70
00:04:33,023 --> 00:04:39,091
Relationalize transforms the nested JSON into key value pairs at

71
00:04:39,091 --> 00:04:42,542
the outer-most level of the JSON document.

72
00:04:42,542 --> 00:04:48,597
Conceptually, you are flattening a hierarchical schema to a relational schema.

73
00:04:48,597 --> 00:04:53,683
AWS Glue can perform this conversion for you on the fly.

74
00:04:53,683 --> 00:04:57,039
Semi-structured data typically contains markup to

75
00:04:57,039 --> 00:04:58,869
identify entities within the data.

76
00:04:58,869 --> 00:05:03,674
It can have nested data structures with no fixed schema.

77
00:05:03,674 --> 00:05:04,314
For example,

78
00:05:04,314 --> 00:05:09,158
you might want to parse JSON data from an S3 source file to

79
00:05:09,158 --> 00:05:12,290
Amazon Relational Database service tables.

80
00:05:12,290 --> 00:05:16,973
Understanding how AWS Glue handles the differences between schemas

81
00:05:16,973 --> 00:05:20,756
can help you understand the transformation process.

82
00:05:20,756 --> 00:05:22,249
In a nutshell,

83
00:05:22,249 --> 00:05:27,845
the conceptual diagram on this slide illustrates single value A

84
00:05:27,845 --> 00:05:30,942
converts directly to a relational column.

85
00:05:30,942 --> 00:05:36,936
The pair of values, B1 and B2, convert to two relational columns.

86
00:05:36,936 --> 00:05:43,715
Structure C with children X and Y converts to two relational columns.

87
00:05:43,715 --> 00:05:48,857
And array D converts to a relational column with a foreign key

88
00:05:48,857 --> 00:05:50,484
that points to another relational table.

89
00:05:50,484 --> 00:05:52,782
Along with a primary key,

90
00:05:52,782 --> 00:05:57,353
the second relational table has columns that contain the

91
00:05:57,353 --> 00:06:00,863
offset and value of the items in the array.

92
00:06:00,863 --> 00:06:04,544
A classifier determines the schema of your data.

93
00:06:04,544 --> 00:06:07,978
You can write a custom classifier and point to it from AWS Glue,

94
00:06:07,978 --> 00:06:11,886
or you can use one of the many built-in classifiers.

95
00:06:11,886 --> 00:06:15,304
Let's further explore the built-in classifiers.

96
00:06:15,304 --> 00:06:19,692
Built-in classifiers are applied in a hierarchical manner.

97
00:06:19,692 --> 00:06:25,879
Glue crawlers apply classifiers to the data as it scans it and adds the

98
00:06:25,879 --> 00:06:30,046
schema metadata as tables to the Glue Data Catalog.

99
00:06:30,046 --> 00:06:36,003
Here we see 22 Glue Data Catalogs built-in classifiers in the hierarchy

100
00:06:36,003 --> 00:06:40,001
of which classifiers are tried first for every crawl.

101
00:06:40,001 --> 00:06:44,402
First, Glue looks for any custom classifiers you may have written.

102
00:06:44,402 --> 00:06:48,377
If Glue doesn't find a customer classifier that fits the

103
00:06:48,377 --> 00:06:51,570
input data format with 100% certainty,

104
00:06:51,570 --> 00:06:57,305
it invokes the built-in classifiers in the order shown in this slide.

105
00:06:57,305 --> 00:07:00,629
Each classifier has a unique way of determining the

106
00:07:00,629 --> 00:07:03,118
schema when a crawler crawls.

107
00:07:03,118 --> 00:07:07,358
The build-in classifiers return a result to indicate whether the format

108
00:07:07,358 --> 00:07:11,983
matches that gives a certainty of 1.0 or does not match,

109
00:07:11,983 --> 00:07:15,517
giving a certainty of 0.0.

110
00:07:15,517 --> 00:07:20,460
The first classifier that certainty of 1.0 provides the classification

111
00:07:20,460 --> 00:07:25,706
string and schema for a metadata table in your data catalog.

112
00:07:25,706 --> 00:07:39,000
In the next section, we'll cover Glue crawlers, Glue Data Catalogs, and Glue's databases and tables.

