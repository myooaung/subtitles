WEBVTT
1
00:00:01.040 --> 00:00:01.430
Great,

2
00:00:01.430 --> 00:00:05.660
now that our environment is set up and running and we are oriented with Cloud9,

3
00:00:05.660 --> 00:00:07.120
we can start writing code.

4
00:00:07.120 --> 00:00:08.550
For our first example,

5
00:00:08.550 --> 00:00:11.520
we are going to write a quick Hello World program

6
00:00:11.520 --> 00:00:15.140
within Cloud9 using Node JavaScript.

7
00:00:15.140 --> 00:00:17.610
If you're unfamiliar with JavaScript, don't worry,

8
00:00:17.610 --> 00:00:20.470
I'll be keeping everything very simple within this course,

9
00:00:20.470 --> 00:00:22.900
since this course is oriented to Cloud9,

10
00:00:22.900 --> 00:00:24.310
not JavaScript.

11
00:00:24.310 --> 00:00:29.400
Our steps for creating an application in Cloud9 are as follows.

12
00:00:29.400 --> 00:00:34.740
First, we will create a new file called index.js that will contain our code.

13
00:00:34.740 --> 00:00:35.400
Then,

14
00:00:35.400 --> 00:00:39.030
we will write code in JavaScript to create a variable and output

15
00:00:39.030 --> 00:00:42.940
that variable to say "Hello world!" to the console.

16
00:00:42.940 --> 00:00:43.570
Next,

17
00:00:43.570 --> 00:00:47.020
we will set a breakpoint so that we can pause our program's execution

18
00:00:47.020 --> 00:00:51.840
and debug line by line while viewing local variables.

19
00:00:51.840 --> 00:00:52.800
And lastly,

20
00:00:52.800 --> 00:00:55.990
we will create a run configuration so that we can execute and

21
00:00:55.990 --> 00:00:59.040
debug our code directly in the Cloud9 console.

22
00:00:59.040 --> 00:01:02.340
Let's get to it.

23
00:01:02.340 --> 00:01:04.370
The first thing we're going to do is create a new

24
00:01:04.370 --> 00:01:07.140
file in Cloud9 to write code in.

25
00:01:07.140 --> 00:01:11.680
We will start by selecting the File drop‑down in our menu bar. From here, we

26
00:01:11.680 --> 00:01:15.860
will select New From Template to create a new file from one of Cloud9's

27
00:01:15.860 --> 00:01:19.720
templates of its supporting programming languages.

28
00:01:19.720 --> 00:01:24.440
Let's then select JavaScript to create an empty JavaScript file.

29
00:01:24.440 --> 00:01:28.400
Now our code editor window has an empty JavaScript file for us to code

30
00:01:28.400 --> 00:01:32.740
in. I'm going to write a JavaScript variable called helloWorldString

31
00:01:32.740 --> 00:01:36.740
and assign it the value of Hello Cloud9.

32
00:01:36.740 --> 00:01:40.930
Then, I'm going to use the console.log JavaScript function to

33
00:01:40.930 --> 00:01:46.530
print the helloWorldString variable to the JavaScript console.

34
00:01:46.530 --> 00:01:52.340
Directly left of our code, we can see the line numbers for each

35
00:01:52.340 --> 00:01:54.110
line of code we write.

36
00:01:54.110 --> 00:01:57.950
This section of the development environment is called the gutter and can be

37
00:01:57.950 --> 00:02:02.340
used to set breakpoints and provide information to developers.

38
00:02:02.340 --> 00:02:07.240
We can see an information icon is present in line 3 of our gutter.

39
00:02:07.240 --> 00:02:08.640
If we hover over it,

40
00:02:08.640 --> 00:02:11.940
we can see that it's indicating to us that our statement on

41
00:02:11.940 --> 00:02:16.440
this line is missing a trailing semicolon.

42
00:02:16.440 --> 00:02:21.440
Once we add a semicolon, we can see that the message immediately goes away.

43
00:02:21.440 --> 00:02:25.550
These informative notifications are a great benefit provided by

44
00:02:25.550 --> 00:02:30.250
coding in Cloud9, as they help developers write quality code and

45
00:02:30.250 --> 00:02:32.740
prevent bugs from entering the code base.

46
00:02:32.740 --> 00:02:37.320
All right, now our code is ready to go, so let's save this file.

47
00:02:37.320 --> 00:02:42.130
Let's use our menu bar again and select File and then Save. When prompted,

48
00:02:42.130 --> 00:02:47.360
I'm going to rename our file from untitled to index.js, since that is the

49
00:02:47.360 --> 00:02:52.040
default file name executed by JavaScript programs.

50
00:02:52.040 --> 00:02:55.780
Now we can see in our environment file system on the left‑hand side that

51
00:02:55.780 --> 00:03:02.040
index.js has now been saved in the root folder of our workspace.

52
00:03:02.040 --> 00:03:04.950
We are ready to run our program, so let's press the Run

53
00:03:04.950 --> 00:03:08.840
button. In our terminal window, we can see that Hello

54
00:03:08.840 --> 00:03:15.240
Cloud9 was successfully outputted, meaning that our code executed properly.

55
00:03:15.240 --> 00:03:19.370
Notice that since we used a Javascript code template when creating this

56
00:03:19.370 --> 00:03:25.690
file and saved the file as index.js that we did not have to create any run

57
00:03:25.690 --> 00:03:30.220
configurations for our code to execute properly. Cloud9 was able to

58
00:03:30.220 --> 00:03:34.150
automatically understand the programming language and file that we wanted

59
00:03:34.150 --> 00:03:38.340
to execute and did so properly.

60
00:03:38.340 --> 00:03:41.370
Well, now that we know how to run a program in Cloud9,

61
00:03:41.370 --> 00:03:43.960
let's try debugging. In our gutter,

62
00:03:43.960 --> 00:03:48.940
we can click to the left of a line number to place a breakpoint.

63
00:03:48.940 --> 00:03:49.800
As you can see,

64
00:03:49.800 --> 00:03:52.570
breakpoints are visually represented with red

65
00:03:52.570 --> 00:03:57.550
circles. With our breakpoint set up, let's run our code by pressing Run,

66
00:03:57.550 --> 00:04:00.040
just like we did last time.

67
00:04:00.040 --> 00:04:04.660
We can see that our code has paused execution and has highlighted the second

68
00:04:04.660 --> 00:04:09.380
line to indicate it is paused on this line number within the debugging process.

69
00:04:09.380 --> 00:04:15.010
On the right‑hand side, our debugging window has expanded slightly to indicate

70
00:04:15.010 --> 00:04:19.240
we are in a debugging session. So let's drag this over a bit so we can get a

71
00:04:19.240 --> 00:04:23.380
better view of what's going on here.

72
00:04:23.380 --> 00:04:26.980
Our debugging window has a few useful options for us.

73
00:04:26.980 --> 00:04:30.540
Foremost, at the top, it has the execution commands.

74
00:04:30.540 --> 00:04:34.640
These commands can be used to continue execution of the program.

75
00:04:34.640 --> 00:04:37.960
Here we can specify to run a single line of code,

76
00:04:37.960 --> 00:04:40.840
jump over a function call,

77
00:04:40.840 --> 00:04:45.580
jump into a function call, or even continue execution indefinitely

78
00:04:45.580 --> 00:04:49.970
until the program terminates or another breakpoint is set. Towards

79
00:04:49.970 --> 00:04:53.490
the bottom of our debugging window, we have a variables area that

80
00:04:53.490 --> 00:04:57.560
displays variables within our program and their current values for

81
00:04:57.560 --> 00:04:58.940
easy reference.

82
00:04:58.940 --> 00:05:02.000
In the variable section, we can already view the

83
00:05:02.000 --> 00:05:05.040
helloWorldString variable is placed here.

84
00:05:05.040 --> 00:05:08.130
Currently, this variable has an undefined value,

85
00:05:08.130 --> 00:05:13.800
since our program is paused on the exact line of code that assigns its value. In

86
00:05:13.800 --> 00:05:17.770
our debug window, we can also view a list of all breakpoints that we have

87
00:05:17.770 --> 00:05:24.900
defined in our application and the current call stack.

88
00:05:24.900 --> 00:05:27.550
You might be wondering why it's useful to have our call

89
00:05:27.550 --> 00:05:29.320
stack and breakpoints listed here,

90
00:05:29.320 --> 00:05:32.240
since it's easily visible in our editor window.

91
00:05:32.240 --> 00:05:35.000
Well, since we're only coding with a single file,

92
00:05:35.000 --> 00:05:37.420
these sections aren't particularly helpful.

93
00:05:37.420 --> 00:05:41.370
However, when developing large applications with multiple files,

94
00:05:41.370 --> 00:05:43.610
these sections can be very helpful to have a better

95
00:05:43.610 --> 00:05:46.840
understanding of your running environment.

96
00:05:46.840 --> 00:05:50.560
Debugging is one of the most important features of Cloud9. So let

97
00:05:50.560 --> 00:05:53.150
me give a quick rundown of the options you have available in the

98
00:05:53.150 --> 00:05:58.440
debugging window just one more time.

99
00:05:58.440 --> 00:06:01.370
You can view local variables and their current values.

100
00:06:01.370 --> 00:06:04.030
You can view the call stack to see all of the functions in your

101
00:06:04.030 --> 00:06:06.940
application that have already been called.

102
00:06:06.940 --> 00:06:11.340
You can type quick expressions to execute and view their outputted values.

103
00:06:11.340 --> 00:06:14.010
You can view a list of all breakpoints you currently have set up

104
00:06:14.010 --> 00:06:17.680
in your application. And you can use the debugging commands to

105
00:06:17.680 --> 00:06:22.180
step through your code, over or into functions, and to continue

106
00:06:22.180 --> 00:06:25.740
execution indefinitely.

107
00:06:25.740 --> 00:06:29.690
Our code is still paused on line 2, so let's press the Step Over

108
00:06:29.690 --> 00:06:33.640
command to continue our code execution to the next line.

109
00:06:33.640 --> 00:06:36.490
We can see that the yellow highlighted visual indicator

110
00:06:36.490 --> 00:06:40.240
shows that our code is now paused on line 3.

111
00:06:40.240 --> 00:06:44.620
If we take a quick peek at our variable section in our debugging window,

112
00:06:44.620 --> 00:06:49.680
we can see that the helloWorldString variable now has the value Hello Cloud9

113
00:06:49.680 --> 00:06:54.490
assigned to it. Also, in Cloud9 during debugging sessions,

114
00:06:54.490 --> 00:07:00.290
you can quickly hover over variables to view their current values.

115
00:07:00.290 --> 00:07:03.380
So if we hover over our helloWorldString variable,

116
00:07:03.380 --> 00:07:07.940
we can see its current value in the Cloud9 visual pop‑up.

117
00:07:07.940 --> 00:07:12.940
Now let's select the Play button to continue our code execution indefinitely.

118
00:07:12.940 --> 00:07:16.510
You can see our program has terminated, and our debugging window is no

119
00:07:16.510 --> 00:07:21.410
longer visual, and our variable was again printed into the console.

120
00:07:21.410 --> 00:07:25.530
Although this example was quite simple, we've covered a lot of Cloud9's

121
00:07:25.530 --> 00:07:27.780
key functionalities and features,

122
00:07:27.780 --> 00:07:35.000
and you can now learn how to leverage Cloud9 to build more complex and enterprise systems in the cloud.

