WEBVTT
1
00:00:01.040 --> 00:00:04.080
Our next service is AWS CodeStar, which,

2
00:00:04.080 --> 00:00:05.890
if we remember from before,

3
00:00:05.890 --> 00:00:09.780
is a service that can create entire applications and

4
00:00:09.780 --> 00:00:13.760
continuous delivery chains automatically.

5
00:00:13.760 --> 00:00:18.260
CodeStar has an easy‑to‑use user interface where you can provision all

6
00:00:18.260 --> 00:00:21.920
the resources required for an entire application.

7
00:00:21.920 --> 00:00:25.870
CodeStar has templates for various project types and programming

8
00:00:25.870 --> 00:00:30.210
languages that can be used to quickly provision entire stacks with

9
00:00:30.210 --> 00:00:33.830
their appropriate software configurations based on the application

10
00:00:33.830 --> 00:00:35.940
type you're developing.

11
00:00:35.940 --> 00:00:39.340
When CodeStar scaffolds out entire application stacks,

12
00:00:39.340 --> 00:00:44.540
it automatically creates a continuous delivery toolchain along with it.

13
00:00:44.540 --> 00:00:47.690
CodePipeline continuous delivery systems,

14
00:00:47.690 --> 00:00:51.610
just like the one we just showed, can be automatically created for

15
00:00:51.610 --> 00:00:55.240
you when you use CodeStar to create a project.

16
00:00:55.240 --> 00:00:59.790
One primary benefit of CodeStar is that it takes away the overhead of

17
00:00:59.790 --> 00:01:03.480
actually creating your continuous delivery toolchains.

18
00:01:03.480 --> 00:01:07.180
And in just a few clicks, you could have an entire application created

19
00:01:07.180 --> 00:01:11.240
with the continuous delivery toolchain set up for you.

20
00:01:11.240 --> 00:01:14.970
Cloud9 is often used for CodeStar projects to write,

21
00:01:14.970 --> 00:01:19.740
run, and debug the code for the project you're creating. It's a wicked fast

22
00:01:19.740 --> 00:01:24.790
and easy way to provision entire applications by using CodeStar to scaffold

23
00:01:24.790 --> 00:01:29.220
out all the resources and the continuous delivery pipeline for you, and then

24
00:01:29.220 --> 00:01:31.850
using Cloud9 in your browser to read,

25
00:01:31.850 --> 00:01:35.470
write, and debug the code for the solution you're creating.

26
00:01:35.470 --> 00:01:38.370
Let's take a quick look at how CodeStar and Cloud9

27
00:01:38.370 --> 00:01:42.520
integrate together within AWS. In AWS,

28
00:01:42.520 --> 00:01:45.840
you use the AWS console to access CodeStar.

29
00:01:45.840 --> 00:01:48.210
From there, you can create a new project,

30
00:01:48.210 --> 00:01:52.260
and CodeStar will automatically provision computer resources and an

31
00:01:52.260 --> 00:01:57.240
entire CodePipeline continuous delivery chain.

32
00:01:57.240 --> 00:02:01.280
For simplicity's sake, I'm only using the CodePipeline logo here.

33
00:02:01.280 --> 00:02:02.360
However,

34
00:02:02.360 --> 00:02:06.270
everything from our CodePipeline diagram before is basically

35
00:02:06.270 --> 00:02:10.520
encapsulated inside CodePipeline here so that you can imagine there

36
00:02:10.520 --> 00:02:14.240
really is a lot of work that CodeStar is doing for you.

37
00:02:14.240 --> 00:02:17.030
Once CodeStar has created a project for you,

38
00:02:17.030 --> 00:02:20.450
you can then use the Cloud9 IDE to write and update

39
00:02:20.450 --> 00:02:24.050
code for your CodeStar application.

40
00:02:24.050 --> 00:02:27.900
It can be a little difficult at first to understand the differences between

41
00:02:27.900 --> 00:02:32.940
CodeStar and Lightsail. If I were to try to explain it in short,

42
00:02:32.940 --> 00:02:35.810
Lightsail deploys virtual private servers with

43
00:02:35.810 --> 00:02:39.740
preconfigured applications, such as WordPress,

44
00:02:39.740 --> 00:02:43.410
whereas CodeStar is a central hub that manages many

45
00:02:43.410 --> 00:02:47.510
interconnected AWS services, all the way from writing code

46
00:02:47.510 --> 00:02:50.340
to automatically deploying your code.

47
00:02:50.340 --> 00:02:55.240
In many respects, Lightsail is just a simplified version of EC2,

48
00:02:55.240 --> 00:02:58.260
whereas CodeStar is a simplified version of

49
00:02:58.260 --> 00:03:02.940
integration between many AWS services.

50
00:03:02.940 --> 00:03:07.480
A good rule of thumb I like to use when choosing between these two services is

51
00:03:07.480 --> 00:03:11.600
that if I already have my code, or want a low code solution,

52
00:03:11.600 --> 00:03:13.840
I typically choose Lightsail.

53
00:03:13.840 --> 00:03:14.680
However,

54
00:03:14.680 --> 00:03:23.000
if I want to develop something fairly advanced that leverages many AWS services, I often lean more towards using CodeStar.

