1
00:00:00,940 --> 00:00:03,200
[Autogenerated] previously we learned about how Docker stacks

2
00:00:03,200 --> 00:00:07,620
could be used with Docker desktop to take a Docker Compose file

3
00:00:07,620 --> 00:00:10,510
run a simple command and voila!

4
00:00:10,510 --> 00:00:14,740
As I like to say, we can get that up and running in kubernetes.

5
00:00:14,740 --> 00:00:18,190
So we're gonna take a look at a different application like I mentioned earlier,

6
00:00:18,190 --> 00:00:20,620
and we're gonna take a look at that Docker Compose file.

7
00:00:20,620 --> 00:00:23,140
First you get a feel for the services in it,

8
00:00:23,140 --> 00:00:25,590
and then we're gonna go ahead and get it up and running and you'll

9
00:00:25,590 --> 00:00:27,710
see that it's a very straightforward process,

10
00:00:27,710 --> 00:00:29,340
actually.

11
00:00:29,340 --> 00:00:30,990
So I have the application open.

12
00:00:30,990 --> 00:00:34,140
You'll see the is code with Dan Docker services up here,

13
00:00:34,140 --> 00:00:38,560
and I have a Docker Compose file Now the composed file.

14
00:00:38,560 --> 00:00:41,310
Let me go ahead and close the command prompt momentarily.

15
00:00:41,310 --> 00:00:44,240
We'll show you some of the services here.

16
00:00:44,240 --> 00:00:46,110
So if I come on down, I have an engine X.

17
00:00:46,110 --> 00:00:47,410
That's kind of my port 80.

18
00:00:47,410 --> 00:00:48,540
You'll see.

19
00:00:48,540 --> 00:00:53,440
And that's gonna be used to be the entry point to this web app.

20
00:00:53,440 --> 00:01:00,040
It's gonna call into a Node.js services and you'll see that right here

21
00:01:00,040 --> 00:01:03,950
it's on Port 80 80 so this will not be called directly.

22
00:01:03,950 --> 00:01:07,210
You'll always go through the engine X reverse proxy,

23
00:01:07,210 --> 00:01:10,750
and then it will forward dynamic requests to the back end.

24
00:01:10,750 --> 00:01:15,570
Services like note now note is gonna depend on two things.

25
00:01:15,570 --> 00:01:17,010
A mongo DB database.

26
00:01:17,010 --> 00:01:22,240
So if we scroll on down, we'll see mongo here, and a red is caching server.

27
00:01:22,240 --> 00:01:24,540
And so you could see that right here.

28
00:01:24,540 --> 00:01:28,320
Now, optionally you could get See adviser going If you're on Linux or Mac,

29
00:01:28,320 --> 00:01:30,120
I'm gonna run this want to windows, though,

30
00:01:30,120 --> 00:01:35,140
so this one doesn't work so well there, So I'm gonna leave it commented out here.

31
00:01:35,140 --> 00:01:37,470
Now, everything is running in this code with Dan Network,

32
00:01:37,470 --> 00:01:39,400
which is a bridge type of network.

33
00:01:39,400 --> 00:01:43,040
Pretty standard for Docker Compose.

34
00:01:43,040 --> 00:01:46,550
All right, So to get this going, you need to follow the instructions here.

35
00:01:46,550 --> 00:01:46,780
Now,

36
00:01:46,780 --> 00:01:50,940
we're gonna do a production build because I would want to get this up and

37
00:01:50,940 --> 00:01:54,040
running in kubernetes with some production containers.

38
00:01:54,040 --> 00:01:57,540
So I'm gonna go ahead and right-click and we'll open in terminal,

39
00:01:57,540 --> 00:02:01,340
and the first thing we'd have to do is apply these environment variables.

40
00:02:01,340 --> 00:02:05,240
Now, if you're on Mac or Linux, you could do the export.

41
00:02:05,240 --> 00:02:08,220
If you're running on windows and in PowerShell,

42
00:02:08,220 --> 00:02:12,940
which I'd recommend, I show you down here how you can use the dollar E N v.

43
00:02:12,940 --> 00:02:16,650
So the first thing I'd have to do is type dollar envy,

44
00:02:16,650 --> 00:02:17,400
colon,

45
00:02:17,400 --> 00:02:20,240
and then app environment equals and I'm going to do

46
00:02:20,240 --> 00:02:23,740
instead of development production.

47
00:02:23,740 --> 00:02:26,930
And then we'd set that now the next thing we have

48
00:02:26,930 --> 00:02:30,810
to do is set the Docker account, which is just kind of a made up one.

49
00:02:30,810 --> 00:02:33,940
But we need it and thats code with ____,

50
00:02:33,940 --> 00:02:39,040
so we'll do the same thing and we'll set that,

51
00:02:39,040 --> 00:02:39,440
all right?

52
00:02:39,440 --> 00:02:41,640
And that's really all we need to do.

53
00:02:41,640 --> 00:02:42,000
Now.

54
00:02:42,000 --> 00:02:45,210
If you're new to why we're doing that, let me show you real quick.

55
00:02:45,210 --> 00:02:46,240
Here.

56
00:02:46,240 --> 00:02:50,600
You'll see that I have some embedded environment variable references here.

57
00:02:50,600 --> 00:02:54,030
So Docker account, you'll see app environment.

58
00:02:54,030 --> 00:02:56,420
And if we scroll down, you'll see these in multiple places,

59
00:02:56,420 --> 00:02:59,740
and they're used to load the appropriate Docker file.

60
00:02:59,740 --> 00:03:02,840
So if I come to the top in the application,

61
00:03:02,840 --> 00:03:03,330
you're gonna notice,

62
00:03:03,330 --> 00:03:07,940
have a Docker folder and here's where you see the different Docker files.

63
00:03:07,940 --> 00:03:10,140
Let me expand this just a little,

64
00:03:10,140 --> 00:03:12,750
and you'll notice that I have a development and production

65
00:03:12,750 --> 00:03:15,340
for some of these various Docker files.

66
00:03:15,340 --> 00:03:17,600
Well, we want to run the production version,

67
00:03:17,600 --> 00:03:22,640
obviously, And that's why we set the environment to production.

68
00:03:22,640 --> 00:03:25,660
Now it will automatically load that appropriate Docker

69
00:03:25,660 --> 00:03:27,520
file based on the environment variable.

70
00:03:27,520 --> 00:03:28,800
So if you haven't seen that before,

71
00:03:28,800 --> 00:03:32,770
it's a nice way to have one Docker Compose file that

72
00:03:32,770 --> 00:03:36,040
could actually be used in different ways.

73
00:03:36,040 --> 00:03:40,020
All right, so now that we've looked at that,

74
00:03:40,020 --> 00:03:42,340
the next thing we would have to do is come down to the

75
00:03:42,340 --> 00:03:44,240
node service and remove a volume.

76
00:03:44,240 --> 00:03:47,740
Now, I've already done this, but let me show you real quick.

77
00:03:47,740 --> 00:03:50,640
So you see that if you're running the development version,

78
00:03:50,640 --> 00:03:54,940
you can actually develop against the live code that you see on the left here,

79
00:03:54,940 --> 00:03:56,630
but because we're gonna do a production build,

80
00:03:56,630 --> 00:03:57,730
I don't want that.

81
00:03:57,730 --> 00:04:02,370
And so I'm gonna comment that one out now,

82
00:04:02,370 --> 00:04:07,440
from there we would simply run Docker Compose built,

83
00:04:07,440 --> 00:04:10,450
and I've already done this, But through the magic of video,

84
00:04:10,450 --> 00:04:15,840
I'll go ahead and speed it up for you.

85
00:04:15,840 --> 00:04:16,820
And there we do.

86
00:04:16,820 --> 00:04:20,020
It looks like our services have automatically generated

87
00:04:20,020 --> 00:04:22,540
the appropriate images that we need.

88
00:04:22,540 --> 00:04:23,590
So now from here,

89
00:04:23,590 --> 00:04:27,720
if we just want to make sure it runs locally we can do a Docker Compose

90
00:04:27,720 --> 00:04:31,150
up and then we can go ahead and try it in the browser just to make sure

91
00:04:31,150 --> 00:04:35,240
that the images are working properly.

92
00:04:35,240 --> 00:04:38,040
So as this is finishing up and loading Quick reminder.

93
00:04:38,040 --> 00:04:40,430
So we're gonna have engine Exxon Port 80.

94
00:04:40,430 --> 00:04:46,140
That will forward calls to note that would be kind of RBAC end dynamic server.

95
00:04:46,140 --> 00:04:51,640
It will then call into Red is and mongo db for different types of data.

96
00:04:51,640 --> 00:04:53,030
Let's run off to the browser now.

97
00:04:53,030 --> 00:04:54,740
We'll try it out.

98
00:04:54,740 --> 00:04:58,740
All right, So I'm gonna go to local host because it's on 80 again,

99
00:04:58,740 --> 00:04:59,440
and there we do.

100
00:04:59,440 --> 00:05:00,790
It looks like everything's running.

101
00:05:00,790 --> 00:05:03,690
You pretty much only get a home page for the data side of it.

102
00:05:03,690 --> 00:05:05,490
The rest of these will just say apps.

103
00:05:05,490 --> 00:05:07,040
No page found.

104
00:05:07,040 --> 00:05:11,840
But all of this is being loaded from the database and from the red is cache.

105
00:05:11,840 --> 00:05:13,560
And so that kind of shows that Yep,

106
00:05:13,560 --> 00:05:16,140
we can get it up and running with Docker Compose.

107
00:05:16,140 --> 00:05:20,840
So now the next step is Can we get it up and running in kubernetes though?

108
00:05:20,840 --> 00:05:23,340
So let's go on back to V s code.

109
00:05:23,340 --> 00:05:24,910
So I'm gonna hit control C.

110
00:05:24,910 --> 00:05:29,540
We'll go ahead and stop that, and then we're gonna do a Docker Compose down.

111
00:05:29,540 --> 00:05:31,940
All right, so let's run that.

112
00:05:31,940 --> 00:05:36,240
That would get all our containers cleaned up, and we're ready to go.

113
00:05:36,240 --> 00:05:39,710
So the last part of this is the main part we now have proven that Yep.

114
00:05:39,710 --> 00:05:41,280
Are Docker Compose works?

115
00:05:41,280 --> 00:05:43,440
We know how to get our image is built.

116
00:05:43,440 --> 00:05:47,840
We know that it loads and all the different containers are running properly.

117
00:05:47,840 --> 00:05:51,010
But can we get it up and running in kubernetes?

118
00:05:51,010 --> 00:05:54,090
Well, the first thing I want to do is if I'm gonna use Docker stacks,

119
00:05:54,090 --> 00:05:56,840
we have to make sure that the settings are right.

120
00:05:56,840 --> 00:05:59,140
So I'm gonna come on down.

121
00:05:59,140 --> 00:06:02,240
Well, right-click on our way, like on hair,

122
00:06:02,240 --> 00:06:06,120
and we're gonna go into settings and then on settings,

123
00:06:06,120 --> 00:06:07,830
we're gonna go to Kubernetes.

124
00:06:07,830 --> 00:06:09,940
And, like we showed earlier, in the course,

125
00:06:09,940 --> 00:06:13,190
you need to enable kubernetes and deployed Docker

126
00:06:13,190 --> 00:06:15,220
stacks to kubernetes by default.

127
00:06:15,220 --> 00:06:18,170
And that way we can use this Docker stack deployed command.

128
00:06:18,170 --> 00:06:20,440
They're going to see me run now.

129
00:06:20,440 --> 00:06:23,680
So since that's good, we should be good to go here.

130
00:06:23,680 --> 00:06:25,840
Let's go ahead and close this.

131
00:06:25,840 --> 00:06:29,740
And now we're gonna come on in and run this command.

132
00:06:29,740 --> 00:06:33,240
So let me go ahead and close the sidebar to give ourselves a little more room.

133
00:06:33,240 --> 00:06:37,240
And now we can run Docker stack deploy.

134
00:06:37,240 --> 00:06:42,210
I need to put Dash C for the composed file and because it's just named normal,

135
00:06:42,210 --> 00:06:47,940
we'll just put that and then we need to give the stack of name.

136
00:06:47,940 --> 00:06:50,960
I'm gonna call this code with Dan.

137
00:06:50,960 --> 00:06:54,480
You can call it whatever you like, though, and we'll hit Enter.

138
00:06:54,480 --> 00:06:57,860
So this should kick off the process to automatically do the conversion

139
00:06:57,860 --> 00:07:02,370
behind the scenes and then get our deployments are replica sets are pods

140
00:07:02,370 --> 00:07:06,640
are services all that up and running in kubernetes?

141
00:07:06,640 --> 00:07:07,430
All right, there we go.

142
00:07:07,430 --> 00:07:08,800
Now, what's really nice about it?

143
00:07:08,800 --> 00:07:12,540
You'll see it's going to give us a status and now our pods are ready.

144
00:07:12,540 --> 00:07:19,240
Now let's prove that Let's use our kubectl command and we'll do get pods.

145
00:07:19,240 --> 00:07:20,270
Alright, It looks good.

146
00:07:20,270 --> 00:07:26,420
We have our mongo engine NICs nodemon read us so that looks good right there.

147
00:07:26,420 --> 00:07:32,000
And then let's go do kubectl get services and notice.

148
00:07:32,000 --> 00:07:36,240
We have our different services and one of these is a load balancer.

149
00:07:36,240 --> 00:07:38,800
So this allows us to get to Port 80 which is that engine

150
00:07:38,800 --> 00:07:42,110
NICs container running in the pot.

151
00:07:42,110 --> 00:07:42,860
And then finally,

152
00:07:42,860 --> 00:07:47,200
let's do kubectl get all and we'll see our replica sets that

153
00:07:47,200 --> 00:07:49,140
are deployments down here at the bottom.

154
00:07:49,140 --> 00:07:51,340
And there we have it.

155
00:07:51,340 --> 00:07:53,230
So it looks like everything's up and running now.

156
00:07:53,230 --> 00:07:54,890
And that was pretty straightforward,

157
00:07:54,890 --> 00:07:57,490
even though there's a few more containers involved,

158
00:07:57,490 --> 00:08:01,940
a little more complexity on the services and the cluster IP s and all that.

159
00:08:01,940 --> 00:08:05,210
But it handled it really nicely and notice I didn't really have

160
00:08:05,210 --> 00:08:08,340
to do much at all to my Docker Compose falsy.

161
00:08:08,340 --> 00:08:09,550
So let's try it out.

162
00:08:09,550 --> 00:08:12,480
We'll go back to the browser, and if it's working,

163
00:08:12,480 --> 00:08:15,750
I should build a hit refresh now, all right.

164
00:08:15,750 --> 00:08:18,610
And there we do and we should get a are got to going to these others?

165
00:08:18,610 --> 00:08:20,340
Perfect.

166
00:08:20,340 --> 00:08:22,320
And it looks like we are good to go.

167
00:08:22,320 --> 00:08:26,540
So all this other data is loading properly and we're

168
00:08:26,540 --> 00:08:29,170
now hitting kubernetes very nice.

169
00:08:29,170 --> 00:08:30,310
Now let's kind of prove that.

170
00:08:30,310 --> 00:08:32,040
Let's go on back.

171
00:08:32,040 --> 00:08:33,110
We'll do a clear.

172
00:08:33,110 --> 00:08:39,660
And now we're gonna do a docker ACM remove and then the name of your stack.

173
00:08:39,660 --> 00:08:42,540
I called it code with Dan.

174
00:08:42,540 --> 00:08:43,030
Perfect.

175
00:08:43,030 --> 00:08:47,140
Now let's quickly run over again and we'll do get pots.

176
00:08:47,140 --> 00:08:48,210
And there you go.

177
00:08:48,210 --> 00:08:49,670
It looks like everything is terminating,

178
00:08:49,670 --> 00:08:54,140
so we'll give that little bit more time and everything would be cleaned up.

179
00:08:54,140 --> 00:08:55,170
If we come on back,

180
00:08:55,170 --> 00:08:58,670
let's see where our pods are and looks like we're almost done.

181
00:08:58,670 --> 00:09:02,960
It's finishing up the note and the Mongo DB pots so there would be an

182
00:09:02,960 --> 00:09:08,490
example with a little more robust application of using Docker stacks to take

183
00:09:08,490 --> 00:09:11,740
that Docker Compose file and get it up and running.

184
00:09:11,740 --> 00:09:19,000
So now, for the last part, let's use the composed tool and see how we can convert the Docker Compose file.

