WEBVTT
1
00:00:01.240 --> 00:00:02.500
[Autogenerated] So what's the animal look like?

2
00:00:02.500 --> 00:00:04.400
That the composed tool generates?

3
00:00:04.400 --> 00:00:06.640
Let's dive in here.

4
00:00:06.640 --> 00:00:08.940
So we started with our Docker Compose file,

5
00:00:08.940 --> 00:00:11.440
and we've already seen the two services.

6
00:00:11.440 --> 00:00:13.470
And then we had the output folder,

7
00:00:13.470 --> 00:00:15.940
which then put our deployments and our services.

8
00:00:15.940 --> 00:00:17.830
So let's start with one of the services.

9
00:00:17.830 --> 00:00:20.140
First off,

10
00:00:20.140 --> 00:00:23.560
one of the things you're gonna notice composed us is it puts labels and

11
00:00:23.560 --> 00:00:27.790
annotations that use either Iowa composed or just composed.

12
00:00:27.790 --> 00:00:31.970
So you'll notice that in the annotations it said this was created with,

13
00:00:31.970 --> 00:00:37.350
and then it gives the command we ran and the version of composed Now for me,

14
00:00:37.350 --> 00:00:38.760
that's not something I ever need.

15
00:00:38.760 --> 00:00:42.320
So I can just pretty much delete that creation.

16
00:00:42.320 --> 00:00:47.370
Timestamp is null, so you could certainly go in and add a valid timestamp.

17
00:00:47.370 --> 00:00:52.580
But if you don't care, you can also delete that and then notice that has a label.

18
00:00:52.580 --> 00:00:55.090
I'll compose service in genetics.

19
00:00:55.090 --> 00:00:58.190
So that's one of those things you could either keep the label as is,

20
00:00:58.190 --> 00:01:02.140
Or maybe you just go ahead and name it with a name that you prefer.

21
00:01:02.140 --> 00:01:04.830
It shows the name of our service and our Docker Compose

22
00:01:04.830 --> 00:01:07.290
file as the name for this service here,

23
00:01:07.290 --> 00:01:12.540
which that works pretty well and then notice it Put in the ports.

24
00:01:12.540 --> 00:01:16.510
Now, Another thing you're gonna notice here is that this is a cluster IP service.

25
00:01:16.510 --> 00:01:18.120
It has a status of load balancer,

26
00:01:18.120 --> 00:01:22.000
but the actual type that you'll see up here well,

27
00:01:22.000 --> 00:01:24.510
there isn't one, which means it defaults to a cluster.

28
00:01:24.510 --> 00:01:26.240
IP.

29
00:01:26.240 --> 00:01:29.800
Now, if we go into the node one, it's gonna look almost identical.

30
00:01:29.800 --> 00:01:32.030
You'll notice that we have the ports down here.

31
00:01:32.030 --> 00:01:35.150
We have the annotations, which you probably don't need, and then the labels.

32
00:01:35.150 --> 00:01:37.010
You may change, but other than that,

33
00:01:37.010 --> 00:01:40.740
it's a pretty good starting point for a service.

34
00:01:40.740 --> 00:01:43.740
Let's take a look at the engine next deployment.

35
00:01:43.740 --> 00:01:44.890
Alright, So same story.

36
00:01:44.890 --> 00:01:46.740
And this is what you're gonna find with all the files that

37
00:01:46.740 --> 00:01:48.990
generates is gonna have the annotations.

38
00:01:48.990 --> 00:01:53.340
The labels always follow with what you just saw.

39
00:01:53.340 --> 00:01:57.240
We didn't say the number of replicas, so it defaulted to one.

40
00:01:57.240 --> 00:01:58.740
And then here we go.

41
00:01:58.740 --> 00:02:01.390
Here's one of the match labels were going to select.

42
00:02:01.390 --> 00:02:03.640
And if we scroll on down,

43
00:02:03.640 --> 00:02:06.410
you'll notice that we have our labels down here of

44
00:02:06.410 --> 00:02:09.340
iOS composed services engine NICs.

45
00:02:09.340 --> 00:02:10.450
Maybe that's what you like.

46
00:02:10.450 --> 00:02:12.130
Maybe it's not what you like for me.

47
00:02:12.130 --> 00:02:13.020
Personally,

48
00:02:13.020 --> 00:02:17.800
I prefer to change those to my more friendly names and more specific names.

49
00:02:17.800 --> 00:02:20.940
I'll show you an example of that in just a moment here,

50
00:02:20.940 --> 00:02:23.590
but most of this I can leave again.

51
00:02:23.590 --> 00:02:25.290
It gives you a really good starting point.

52
00:02:25.290 --> 00:02:30.440
It's not perfect, but it's definitely better than writing this all on your own.

53
00:02:30.440 --> 00:02:34.720
Now, here's what I ended up doing the with the actual running version.

54
00:02:34.720 --> 00:02:41.340
So in the K H s, which is the folder I normally create, I have similar things.

55
00:02:41.340 --> 00:02:44.040
If we go into the service, for example,

56
00:02:44.040 --> 00:02:46.630
now you'll see that I kept it pretty basic.

57
00:02:46.630 --> 00:02:52.540
My labels instead of the Iot Docker Compose are just app engine X, for example.

58
00:02:52.540 --> 00:02:53.930
I made the type.

59
00:02:53.930 --> 00:02:58.200
It's a load balancer in this particular case because this is on Port 80.

60
00:02:58.200 --> 00:03:01.940
So I wanted something that reflects a little more real world.

61
00:03:01.940 --> 00:03:06.580
If we go into the deployment for this, you'll see again up top my labels.

62
00:03:06.580 --> 00:03:11.600
My name's all that's pretty similar to what you saw, except for the labels.

63
00:03:11.600 --> 00:03:16.510
So basically it was a little cleanup on the annotations and the labels,

64
00:03:16.510 --> 00:03:17.840
which is totally optional.

65
00:03:17.840 --> 00:03:20.720
You could absolutely leave what they generate.

66
00:03:20.720 --> 00:03:22.960
If you're happy with that again,

67
00:03:22.960 --> 00:03:26.210
it really depends on how you do things at work and the

68
00:03:26.210 --> 00:03:28.980
structure of your XAML on how you like to name your

69
00:03:28.980 --> 00:03:31.830
different labels and annotations and such.

70
00:03:31.830 --> 00:03:34.130
Now, if you want to run this one,

71
00:03:34.130 --> 00:03:39.710
I would recommend using the kind of final version of the K s content.

72
00:03:39.710 --> 00:03:44.320
And if we go into the read me and scroll on down towards the bottom

73
00:03:44.320 --> 00:03:47.840
here I have a section for you running in kubernetes.

74
00:03:47.840 --> 00:03:48.970
Pretty straightforward.

75
00:03:48.970 --> 00:03:52.810
You're gonna build the images with Docker Compose build and then you're

76
00:03:52.810 --> 00:03:57.540
simply going to do kubectl apply dash F and then give it that folder

77
00:03:57.540 --> 00:03:59.250
and then you could just go to local host.

78
00:03:59.250 --> 00:04:03.140
That'll hit Port 80 and load up the app as you already saw earlier.

79
00:04:03.140 --> 00:04:06.140
So let's go ahead and do that real quick to wrap up,

80
00:04:06.140 --> 00:04:10.040
so I'll go ahead and open in terminal.

81
00:04:10.040 --> 00:04:11.900
I've already done a Docker Como's build,

82
00:04:11.900 --> 00:04:15.560
so we'll save that step and then we'll do our normal kubectl

83
00:04:15.560 --> 00:04:19.540
apply and then I'll give it the folder.

84
00:04:19.540 --> 00:04:21.620
We'll go ahead and create that resource.

85
00:04:21.620 --> 00:04:22.500
Looks pretty good.

86
00:04:22.500 --> 00:04:26.780
Now let's go check out local host in the browser and let

87
00:04:26.780 --> 00:04:32.540
me go ahead and refresh all right, and it looks like we're up and running.

88
00:04:32.540 --> 00:04:36.480
So that's the general process that occurred with this particular app to

89
00:04:36.480 --> 00:04:41.240
convert from Docker Compose services to Kubernetes XAML,

90
00:04:41.240 --> 00:04:47.000
and you can see that the composed tool makes that a lot easier and a lot more productive.

