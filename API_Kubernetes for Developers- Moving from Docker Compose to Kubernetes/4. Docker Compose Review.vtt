WEBVTT
1
00:00:00.940 --> 00:00:03.040
[Autogenerated] If you worked with Docker Compose in the past,

2
00:00:03.040 --> 00:00:06.840
then you know it's a great tool to have in your Docker tool belt.

3
00:00:06.840 --> 00:00:08.970
It provides all kinds of functionality,

4
00:00:08.970 --> 00:00:14.140
from building images to running containers to looking at logs and more.

5
00:00:14.140 --> 00:00:16.550
Now the Docker Documentation defines it this way.

6
00:00:16.550 --> 00:00:21.710
Composes a tool for defining and running multi container Docker applications.

7
00:00:21.710 --> 00:00:26.340
With composed, you can use a YAML file to configure your application services.

8
00:00:26.340 --> 00:00:28.330
Then, with a single command,

9
00:00:28.330 --> 00:00:32.640
you create and start all the services from your configuration.

10
00:00:32.640 --> 00:00:35.620
Now, if you haven't done this much before, it kind of looks like this.

11
00:00:35.620 --> 00:00:37.760
Let's say that we had a server,

12
00:00:37.760 --> 00:00:43.040
maybe a reverse proxy like H a proxy Engine X or another one.

13
00:00:43.040 --> 00:00:45.440
And that's on the left there.

14
00:00:45.440 --> 00:00:48.200
And let's say that when a call comes in,

15
00:00:48.200 --> 00:00:52.210
it serves up some type of a nap, maybe a JavaScript application,

16
00:00:52.210 --> 00:00:53.440
for example.

17
00:00:53.440 --> 00:00:58.340
Then that calls into other APIs or servers behind the scenes.

18
00:00:58.340 --> 00:01:02.370
Now let's assume that all of these servers are containerized,

19
00:01:02.370 --> 00:01:07.340
they have containers, and we need to call into those containers.

20
00:01:07.340 --> 00:01:11.440
Now those APIs might make calls into a database,

21
00:01:11.440 --> 00:01:15.800
get back data and possibly cache it and something like red is

22
00:01:15.800 --> 00:01:18.640
or another type of caching option out there.

23
00:01:18.640 --> 00:01:20.780
And when you put all this together,

24
00:01:20.780 --> 00:01:23.700
we're now looking at a lot of different containers,

25
00:01:23.700 --> 00:01:27.340
and this isn't even that complex of an application,

26
00:01:27.340 --> 00:01:29.330
so you could see that right off the bat.

27
00:01:29.330 --> 00:01:33.020
We have six containers here, and that's assuming we are contain.

28
00:01:33.020 --> 00:01:35.440
Arising are database, of course.

29
00:01:35.440 --> 00:01:38.040
And how do we get those all up and running?

30
00:01:38.040 --> 00:01:40.710
Well, we could use the Docker run command to do that,

31
00:01:40.710 --> 00:01:43.100
but that's really the role of Docker Compose,

32
00:01:43.100 --> 00:01:46.880
Of course, is we can defined these different services,

33
00:01:46.880 --> 00:01:50.940
which ultimately lead to containers being created.

34
00:01:50.940 --> 00:01:53.110
And then with one command,

35
00:01:53.110 --> 00:01:56.620
we can bring all this up on our local machine or even

36
00:01:56.620 --> 00:01:58.900
in production if we want it now.

37
00:01:58.900 --> 00:02:04.060
We could also build the images for all of these on a CCD system,

38
00:02:04.060 --> 00:02:07.580
or even manually, with one single command as well.

39
00:02:07.580 --> 00:02:10.040
So it's very, very powerful that way.

40
00:02:10.040 --> 00:02:12.850
So when it comes to the overview of what does it do?

41
00:02:12.850 --> 00:02:15.240
We can build images as mentioned.

42
00:02:15.240 --> 00:02:17.990
We can start up containers and we can, of course,

43
00:02:17.990 --> 00:02:20.880
tear down containers and even do more than that.

44
00:02:20.880 --> 00:02:23.850
We'll talk about some of that coming up now,

45
00:02:23.850 --> 00:02:27.140
the way Docker Compose works is we have a YAML file,

46
00:02:27.140 --> 00:02:30.920
and this YAML file is used to describe services.

47
00:02:30.920 --> 00:02:35.640
Each services ultimately corresponds to a running container.

48
00:02:35.640 --> 00:02:37.500
Now, when it comes to building the images,

49
00:02:37.500 --> 00:02:37.980
though,

50
00:02:37.980 --> 00:02:41.650
for our containers we can run a Docker Compose build

51
00:02:41.650 --> 00:02:44.750
command and that will take those services,

52
00:02:44.750 --> 00:02:48.220
find the Docker files we would define and then generate

53
00:02:48.220 --> 00:02:51.140
theater pro pre it Docker images.

54
00:02:51.140 --> 00:02:53.210
Now Docker Compose file looks like this.

55
00:02:53.210 --> 00:02:56.740
Then we start with the version that we're working with,

56
00:02:56.740 --> 00:02:59.440
and then we define our services.

57
00:02:59.440 --> 00:03:02.400
Here's an example of an ASP net core service,

58
00:03:02.400 --> 00:03:07.140
and it has a build with a context of the local folder.

59
00:03:07.140 --> 00:03:11.740
That's the DOT and the Docker file, which is SAP Net core Docker file,

60
00:03:11.740 --> 00:03:13.520
would be in that folder,

61
00:03:13.520 --> 00:03:17.080
which would be the same folder as our Docker Compose YAML file.

62
00:03:17.080 --> 00:03:22.390
In this particular case, you'll also see that we have a network to find.

63
00:03:22.390 --> 00:03:23.080
And that, of course,

64
00:03:23.080 --> 00:03:27.370
is used to communicate between these different containers in

65
00:03:27.370 --> 00:03:31.540
this network called ESPN Net Core app Network.

66
00:03:31.540 --> 00:03:35.240
Now let's say that we also have a service for post breast SQL,

67
00:03:35.240 --> 00:03:38.310
and we want that image to be pulled directly from Docker

68
00:03:38.310 --> 00:03:41.640
Hub or some other registry that's out there and we want it

69
00:03:41.640 --> 00:03:43.060
to be in the same network.

70
00:03:43.060 --> 00:03:43.200
What?

71
00:03:43.200 --> 00:03:45.540
We could define that in our YAML file.

72
00:03:45.540 --> 00:03:49.530
And now our ASP.NET core app could talk to our database.

73
00:03:49.530 --> 00:03:52.340
That's being containerized here.

74
00:03:52.340 --> 00:03:55.420
Now, the final step here is we would need our network.

75
00:03:55.420 --> 00:03:57.960
In this case, I have to find the most simple kind,

76
00:03:57.960 --> 00:04:01.580
which is called a bridge network and that basically allows

77
00:04:01.580 --> 00:04:04.030
these two containers to talk to each other.

78
00:04:04.030 --> 00:04:04.690
In this case,

79
00:04:04.690 --> 00:04:08.460
SAP Net core would obviously call into the database and maybe

80
00:04:08.460 --> 00:04:10.580
perform different types of code operations.

81
00:04:10.580 --> 00:04:14.440
Create, read, update Delete.

82
00:04:14.440 --> 00:04:16.320
Now, once we've created the YAML file we can,

83
00:04:16.320 --> 00:04:18.580
of course, used Docker Compose commands.

84
00:04:18.580 --> 00:04:22.040
And this is part of the Docker tool kit, if you will.

85
00:04:22.040 --> 00:04:23.320
So we could, for example,

86
00:04:23.320 --> 00:04:28.200
say Docker Compose build that would then find the Docker file that I

87
00:04:28.200 --> 00:04:31.730
showed for ESPN at core and build that image now.

88
00:04:31.730 --> 00:04:33.790
It wouldn't do anything with the post grass SQL,

89
00:04:33.790 --> 00:04:37.360
though, because that one didn't have a custom Docker file.

90
00:04:37.360 --> 00:04:40.140
It was just going to use the default damage that might be

91
00:04:40.140 --> 00:04:43.640
up in Docker Hub or another location.

92
00:04:43.640 --> 00:04:44.100
From there,

93
00:04:44.100 --> 00:04:46.980
we could bring up those different containers and we could do

94
00:04:46.980 --> 00:04:49.640
that with the Docker Compose up command.

95
00:04:49.640 --> 00:04:54.010
When we're done, we can take those down, stop them and destroy them.

96
00:04:54.010 --> 00:04:57.640
Remove them by doing Docker Compose down.

97
00:04:57.640 --> 00:05:01.530
And then we could even access all the logs for everything we have

98
00:05:01.530 --> 00:05:05.940
defined as a service with Docker Compose logs.

99
00:05:05.940 --> 00:05:06.990
So by doing this,

100
00:05:06.990 --> 00:05:10.070
we have a really easy way to not only build all the

101
00:05:10.070 --> 00:05:12.740
images for these Docker webOS services,

102
00:05:12.740 --> 00:05:17.270
but also bring up all the containers with really just a simple command.

103
00:05:17.270 --> 00:05:20.230
So it's pretty amazing if you haven't done it before.

104
00:05:20.230 --> 00:05:24.670
And if you have hopefully you've already seen these XAML and these

105
00:05:24.670 --> 00:05:27.020
different commands that I'm going through now.

106
00:05:27.020 --> 00:05:28.460
With all of that functionality,

107
00:05:28.460 --> 00:05:32.210
we could ask the question Why would I move to Kubernetes

108
00:05:32.210 --> 00:05:35.200
when Docker Compose can build my images?

109
00:05:35.200 --> 00:05:37.160
Start my containers, stop them,

110
00:05:37.160 --> 00:05:41.790
view my logs everything and really the answer there is

111
00:05:41.790 --> 00:05:44.540
your kind of comparing apples to oranges.

112
00:05:44.540 --> 00:05:47.580
Docker Compose is good for doing those things,

113
00:05:47.580 --> 00:05:50.740
but in a more robust production environment,

114
00:05:50.740 --> 00:05:55.800
where you wanna be able to scale containers and heal them when they get sick,

115
00:05:55.800 --> 00:05:58.040
replace them if they're too sick.

116
00:05:58.040 --> 00:06:01.440
View logs, monitor and on and on and on,

117
00:06:01.440 --> 00:06:02.130
then, really,

118
00:06:02.130 --> 00:06:07.340
the answer there is kubernetes is kind of for the big time production scenario.

119
00:06:07.340 --> 00:06:10.020
We can scale those containers across multiple nodes,

120
00:06:10.020 --> 00:06:14.530
multiple servers, if you will, or VM provide container monitoring,

121
00:06:14.530 --> 00:06:16.550
healing functionality,

122
00:06:16.550 --> 00:06:20.010
a really robust set of deployment options and even do

123
00:06:20.010 --> 00:06:23.530
much more so it really comes down to.

124
00:06:23.530 --> 00:06:27.670
If you're just looking to get containers up and running and don't need to scale

125
00:06:27.670 --> 00:06:32.680
those could I just use Docker Compose and the answer is yes.

126
00:06:32.680 --> 00:06:37.220
But the problem there is there's not a lot of monitoring built in at all.

127
00:06:37.220 --> 00:06:39.640
It's not really what's designed for.

128
00:06:39.640 --> 00:06:42.860
And if one of those containers crashes, well,

129
00:06:42.860 --> 00:06:43.870
that would be a problem,

130
00:06:43.870 --> 00:06:48.640
whereas with kubernetes is designed to handle those type of scenarios.

131
00:06:48.640 --> 00:06:54.440
So that's a quick look at what Docker composes and a quick comparison on why

132
00:06:54.440 --> 00:07:01.000
we would want to move from Docker Compose to Kubernetes. So now let's do a quick review for kubernetes itself.

