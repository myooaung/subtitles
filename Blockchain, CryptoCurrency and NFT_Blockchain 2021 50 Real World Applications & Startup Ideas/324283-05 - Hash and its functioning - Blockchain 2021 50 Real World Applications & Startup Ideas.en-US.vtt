WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.940
to understand roped in.

00:00:01.940 --> 00:00:07.450
It is very crucial that we have a fair idea off what hash we're hashing functions are.

00:00:07.450 --> 00:00:11.850
And how do they work to make the whole broken safe and secure?

00:00:11.850 --> 00:00:13.240
Ah,

00:00:13.240 --> 00:00:16.950
hash function is a fixed length output for any input,

00:00:16.950 --> 00:00:19.350
irrespective of its size and length.

00:00:19.350 --> 00:00:26.000
Let's understand it in the context of Bitcoin transactions in the Bitcoin network,

00:00:26.000 --> 00:00:31.950
what does it input for the hash function and therefore our past with hashing algorithm to

00:00:31.950 --> 00:00:33.550
generate a fixed length output?

00:00:33.550 --> 00:00:36.930
There are many types of hashing algorithms available,

00:00:36.930 --> 00:00:40.350
like and if I as that to do with physics,

00:00:40.350 --> 00:00:43.650
but we won't go into depth of these hashing algorithms.

00:00:43.650 --> 00:00:45.450
Nevertheless,

00:00:45.450 --> 00:00:51.990
it is important to know down that Bitcoin uses a secure hashing algorithm to 56 commonly

00:00:51.990 --> 00:00:54.150
referred to s Chateau 56.

00:00:54.150 --> 00:00:56.450
In the given example,

00:00:56.450 --> 00:00:59.650
when we pass a certain message to the hashing algorithm,

00:00:59.650 --> 00:01:02.650
it generates a hash against this input.

00:01:02.650 --> 00:01:04.960
Looking at this example,

00:01:04.960 --> 00:01:10.880
you will observe that irrespective of the size of the message you input has single Gautam

00:01:10.880 --> 00:01:11.790
always end.

00:01:11.790 --> 00:01:13.150
It's a fixed length output.

00:01:13.150 --> 00:01:15.620
Now you may be wondering,

00:01:15.620 --> 00:01:19.350
but why do we even need a hash function in the first place.

00:01:19.350 --> 00:01:21.580
If we haven't input,

00:01:21.580 --> 00:01:22.230
then what is?

00:01:22.230 --> 00:01:27.110
The use is creating a different output to represent that particular set of information or

00:01:27.110 --> 00:01:27.650
input.

00:01:27.650 --> 00:01:33.850
Hashing becomes very crucial when you are dealing with a huge amount of data or information

00:01:33.850 --> 00:01:33.850
.

00:01:33.850 --> 00:01:36.380
In such a scenario,

00:01:36.380 --> 00:01:41.460
the hash output can be used to track the data instead of dealing with huge amount of the

00:01:41.460 --> 00:01:42.150
input data.

00:01:42.150 --> 00:01:48.810
Now let's discuss the important properties of a cryptographic hash function using the block

00:01:48.810 --> 00:01:54.050
a small change in the input value or does the hash value significantly?

00:01:54.050 --> 00:02:00.590
One of the unique properties off a cryptographic hash function is that even a small change

00:02:00.590 --> 00:02:04.850
in the input value brings about a drastic tint and its output value.

00:02:04.850 --> 00:02:08.350
This is even refer to as the avalanche effect.

00:02:08.350 --> 00:02:10.850
In the given example,

00:02:10.850 --> 00:02:13.750
when the first input is passed to the hash function,

00:02:13.750 --> 00:02:16.950
a specific output or hash is injected.

00:02:16.950 --> 00:02:18.500
Now,

00:02:18.500 --> 00:02:20.960
when a small changes made in the input data,

00:02:20.960 --> 00:02:25.940
you can see that the new has generated very significantly from the earlier hash.

00:02:25.940 --> 00:02:32.040
The first input Blockchain is the future generated a specific hash.

00:02:32.040 --> 00:02:37.010
But when a small changes made to the input that is an extra exclamation mark,

00:02:37.010 --> 00:02:43.440
it's added Broken is the future exclamation mark the new has generated is completely

00:02:43.440 --> 00:02:44.940
different from the previous hash.

00:02:44.940 --> 00:02:50.350
This property of cryptographic hash functions makes them resistant to hacking,

00:02:50.350 --> 00:02:56.150
as no correlation can be right about the input data by just looking at the Hash Elem,

00:02:56.150 --> 00:03:01.860
one of the other very crucial property off a cryptographic hash function using the

00:03:01.860 --> 00:03:04.350
Blockchain is it squeak competition.

00:03:04.350 --> 00:03:10.160
The hashing function requires computers on the block to network to perform certain complex

00:03:10.160 --> 00:03:14.450
mathematical tests in order to generate cash from the input data.

00:03:14.450 --> 00:03:19.050
So when we see that the hash function should become potentially efficient,

00:03:19.050 --> 00:03:24.360
it simply means that the computers should be able to finish the required mathematical tasks

00:03:24.360 --> 00:03:25.550
in a short triangulation,

00:03:25.550 --> 00:03:32.750
a cryptographic hash function using the Blockchain must be deterministic in simple words of

00:03:32.750 --> 00:03:38.360
function is said to be deterministic if it didn't dates the same hash whenever same input

00:03:38.360 --> 00:03:39.550
is passed to it,

00:03:39.550 --> 00:03:45.900
no matter how many times a pass and input blocked in is the future through the hash

00:03:45.900 --> 00:03:46.350
function,

00:03:46.350 --> 00:03:51.540
it should always in trip the same exit output or hash every single time.

00:03:51.540 --> 00:03:57.180
If different outputs are generated by a hash function for the same input.

00:03:57.180 --> 00:03:59.250
The hash function would become useless,

00:03:59.250 --> 00:04:02.950
and it would be impossible to verify a specific input.

00:04:02.950 --> 00:04:07.950
The input for a cryptographic hash function can be any kind of data.

00:04:07.950 --> 00:04:11.880
This data can be number over a sentence,

00:04:11.880 --> 00:04:12.990
a passport,

00:04:12.990 --> 00:04:13.800
a song,

00:04:13.800 --> 00:04:19.580
a book where a complete movie but the head and made it for any kind of input data.

00:04:19.580 --> 00:04:20.950
By the hashing algorithm,

00:04:20.950 --> 00:04:24.950
we've been alphanumeric code and that two off a fixed land.

00:04:24.950 --> 00:04:28.870
It is very crucial for a cryptographic hash function.

00:04:28.870 --> 00:04:30.650
Toby Pre immediate assistant.

00:04:30.650 --> 00:04:37.630
Three Images Justice means that the opera generated back the prolific has function must

00:04:37.630 --> 00:04:42.730
know turvey Any information over the input data In the given example,

00:04:42.730 --> 00:04:46.030
When an input X is passed to the hash function,

00:04:46.030 --> 00:04:49.150
the hashed invaded is represented as ethics.

00:04:49.150 --> 00:04:53.800
The images steps simply means that even if you know ethics,

00:04:53.800 --> 00:04:57.680
it must be invisible for you Rhythm in the corresponding input.

00:04:57.680 --> 00:05:03.850
X Coalition assistance is yet another important property off a cryptographic hash function

00:05:03.850 --> 00:05:03.850
.

00:05:03.850 --> 00:05:09.860
Being collision assistant simply means that it should be highly improbable toe.

00:05:09.860 --> 00:05:15.690
Find two different inputs that generate the same output or hash as discussed earlier,

00:05:15.690 --> 00:05:19.090
that input for hash function can be off any type,

00:05:19.090 --> 00:05:20.140
size and length.

00:05:20.140 --> 00:05:26.160
This simply means that there are infinite possibilities for the data input that can be fed

00:05:26.160 --> 00:05:30.560
into a hash function and the corresponding cash We're our true generated.

00:05:30.560 --> 00:05:31.550
We have fixed land.

00:05:31.550 --> 00:05:36.920
This means that there will be a final number of outputs that can be generated using the

00:05:36.920 --> 00:05:37.740
hash and good.

00:05:37.740 --> 00:05:42.420
If inputs can be infinite and outputs that finite in number,

00:05:42.420 --> 00:05:46.430
it is quite possible that more than one input can produce the same.

00:05:46.430 --> 00:05:46.850
Oh,

00:05:46.850 --> 00:05:53.240
so the goal of being collision assistant is to make the probability of finding any to such

00:05:53.240 --> 00:05:53.930
inputs,

00:05:53.930 --> 00:05:56.350
which share the same output as negligible.

00:05:56.350 --> 00:05:59.750
If it hashing function is collision resistant,

00:05:59.750 --> 00:06:03.010
this possibility won't pose any security list with it.

00:06:03.010 --> 00:06:08.340
Hash functions are generally referred to as one way functions because they are not

00:06:08.340 --> 00:06:10.830
reversible in simple words.

00:06:10.830 --> 00:06:15.350
If you have a hash you can't decrypt picked to find the corresponding input.

00:06:15.350 --> 00:06:17.660
So Andrea left scenario.

00:06:17.660 --> 00:06:20.250
Even if a hacker get access to a hash upward,

00:06:20.250 --> 00:06:24.950
it is completely useless as he can't decrypt it to get the input.

00:06:24.950 --> 00:06:27.010
Therefore,

00:06:27.010 --> 00:06:30.070
the problem for using Blockchain requires one way hash function,

00:06:30.070 --> 00:06:31.460
which makes it secure,

00:06:31.460 --> 00:06:32.570
safe and Reliable,

00:06:32.570 --> 00:06:34.500
though,

00:06:34.500 --> 00:06:37.950
has functions can be used to check and validate the input data,

00:06:37.950 --> 00:06:41.750
but they can't be used to decrypt and reads the input data.

00:06:41.750 --> 00:06:44.450
That seemed to be a little confusing.

00:06:44.450 --> 00:06:47.060
To help you understand it in a better way,

00:06:47.060 --> 00:06:48.450
let us take an example.

00:06:48.450 --> 00:06:53.350
Suppose Mr A holds the land title meant of a piece of land,

00:06:53.350 --> 00:06:58.150
and that information is stored within 11 government authority in the wake of this.

00:06:58.150 --> 00:07:02.200
Now this land record data is doing a unique hash,

00:07:02.200 --> 00:07:08.770
using a hash function as the record the centralized record it can be tempered with until

00:07:08.770 --> 00:07:13.850
this can be made in the records by some corrupt officials because of their personal gains

00:07:13.850 --> 00:07:22.190
as you that some corrupt official samples the data until is the land area that Mr Jones in

00:07:22.190 --> 00:07:22.990
this case,

00:07:22.990 --> 00:07:28.000
when the order land record data will be passed to the hash function the hedge ended,

00:07:28.000 --> 00:07:29.750
it would be different from the previous one,

00:07:29.750 --> 00:07:35.130
thus indicating that the land data has been temporarily so.

00:07:35.130 --> 00:07:38.450
This is how a hash can be used to track and validate the data.

00:07:38.450 --> 00:07:40.170
On the other hand,

00:07:40.170 --> 00:07:45.280
it is not possible could decrypt this hash and find out that it represents a land record

00:07:45.280 --> 00:07:47.550
data for the land owned by Mr A.

00:07:47.550 --> 00:07:49.400
Therefore,

00:07:49.400 --> 00:07:53.350
we can say that hash can be used to take and really did the data,

00:07:53.350 --> 00:07:56.600
but can be used to decrypt and find the original did.

