1
00:00:05,230 --> 00:00:07,320
Hello welcome back to the course on block chain.

2
00:00:07,480 --> 00:00:10,220
And today we're talking about cryptography.

3
00:00:10,330 --> 00:00:16,970
We're going to understand what role the shutdown or 56 hash algorithm plays in watching.

4
00:00:17,320 --> 00:00:17,860
All right.

5
00:00:17,860 --> 00:00:21,370
So there's our map and we're starting with hash cryptography.

6
00:00:21,700 --> 00:00:25,430
So let's look at a person there is a person could be me or you.

7
00:00:25,510 --> 00:00:33,280
And we have a fingerprint and different people have different fingerprints so if you look at many different

8
00:00:33,280 --> 00:00:40,480
people they're all going to have different fingerprints to us it is there is a possibility that there'll

9
00:00:40,480 --> 00:00:42,000
be somebody with the same fingerprint.

10
00:00:42,010 --> 00:00:47,500
But it is very unlikely the ability of that is about one in 60 million.

11
00:00:48,010 --> 00:00:55,480
So in a way you can say that a fingerprint is an identifier of a person and that's a very powerful concept

12
00:00:56,020 --> 00:01:03,400
which is used by forensics departments in the police where they can identify criminals just by their

13
00:01:03,400 --> 00:01:07,150
fingerprints and take that as evidence to court.

14
00:01:07,150 --> 00:01:12,650
Now what if we could take the same principle and apply it to digital documents.

15
00:01:12,730 --> 00:01:21,190
But if we could come up with a sort of fingerprint that would identify these documents for us and such

16
00:01:21,190 --> 00:01:28,130
a fingerprint exists it's called Shower 256 hash and looks like this.

17
00:01:28,150 --> 00:01:33,720
So the algorithm behind Shutt 256 was developed by the NSA.

18
00:01:33,830 --> 00:01:35,550
And I know what you're going to say.

19
00:01:35,950 --> 00:01:41,770
You've probably heard the NSA in the news in the past couple of years and you might have you know some

20
00:01:42,760 --> 00:01:47,410
you know like a great opinion about them or the opposite you might not like them or it might be indifferent

21
00:01:47,410 --> 00:01:53,760
to them regardless of what is said in the news about the NSA and all those things.

22
00:01:53,760 --> 00:01:57,640
One thing they did do really well is this shot 256 algorithm.

23
00:01:57,640 --> 00:01:58,940
It works well.

24
00:01:58,960 --> 00:02:02,170
It's very secure.

25
00:02:02,230 --> 00:02:07,960
And a lot of places in the World War applications use to store passwords.

26
00:02:07,980 --> 00:02:11,560
Check digital documents too.

27
00:02:11,750 --> 00:02:18,850
And in fact in blotching it is used like one of the core things core principles building blocks of block

28
00:02:18,850 --> 00:02:27,160
chain as we will see further down in this section and the code for the algorithm for Shudra and 56 is

29
00:02:27,160 --> 00:02:27,950
not secret.

30
00:02:27,970 --> 00:02:30,160
It's open completely open.

31
00:02:30,160 --> 00:02:31,530
Anybody can learn it.

32
00:02:31,530 --> 00:02:37,300
Understand how it works out at the end of this tutorial I'll actually recommend a paper which you can

33
00:02:37,300 --> 00:02:41,160
read and understand more about how shutter physics works.

34
00:02:41,160 --> 00:02:50,170
Now this hash is called Chateau-Renaud 56 because Shas stands for secure hash algorithm and 256 is the

35
00:02:50,170 --> 00:02:53,170
number of bits it takes up in memory.

36
00:02:53,350 --> 00:03:01,630
The hash is always 64 characters long and it consists as you can see if not just from digits but actually

37
00:03:01,630 --> 00:03:03,470
from letters as well.

38
00:03:03,490 --> 00:03:11,800
That's because it's a hexadecimal hash it has numbers from 0 to 9 and the letters A B C D E F.

39
00:03:11,860 --> 00:03:14,000
So there's a total of 16 of them there.

40
00:03:14,200 --> 00:03:20,980
So that means each character in the resulting hash takes up four bits because for the power of two 16

41
00:03:21,280 --> 00:03:24,160
and 410 64 is turning 56.

42
00:03:24,160 --> 00:03:30,330
That's how these numbers are all linked up together 64 times 4 which is the size of any size of basically

43
00:03:30,420 --> 00:03:33,700
any one of these is 256.

44
00:03:33,700 --> 00:03:40,780
And the important thing to note here is that this algorithm works not just for word documents or text

45
00:03:40,780 --> 00:03:41,200
documents.

46
00:03:41,200 --> 00:03:47,230
It works for any digital document or any digital just anything digital.

47
00:03:47,230 --> 00:03:54,610
So you could put a video into the algorithm you could put like text you could put an audio you could

48
00:03:54,610 --> 00:03:59,950
put an executable file you could put a whole operating system in there whatever you put in there it

49
00:03:59,950 --> 00:04:06,110
will spit out a fingerprint which is a shot of hash.

50
00:04:06,160 --> 00:04:08,530
So let's have a look and action.

51
00:04:08,530 --> 00:04:12,190
You know it's great to describe these things and talk about them but let's have a look at action see

52
00:04:12,190 --> 00:04:13,120
how it works.

53
00:04:13,120 --> 00:04:16,510
So we set up a tools kit for you.

54
00:04:16,520 --> 00:04:20,910
It's at tools not supersized dot com slash block chain slash hash.

55
00:04:21,100 --> 00:04:24,970
And if you head on over there we just go like this.

56
00:04:25,090 --> 00:04:31,540
You will see that there's a whole toolkit over here set up so you can go to log blotching in distribution

57
00:04:31,570 --> 00:04:32,230
and so on.

58
00:04:32,320 --> 00:04:38,430
And we'll talk about these further down in this course but this is what we're going to look at today.

59
00:04:38,530 --> 00:04:40,500
But before we continue there's a copyright notice.

60
00:04:40,510 --> 00:04:46,540
We just wanted to make sure that this is not our original code this was actually created by someone

61
00:04:46,540 --> 00:04:51,060
else created by Anders in 94.

62
00:04:51,220 --> 00:04:56,290
And so Anders Braun Brown we're Thank you very much Anders for making this available.

63
00:04:56,290 --> 00:05:00,960
You can check it all out here and you can actually edit your own website if you like.

64
00:05:01,300 --> 00:05:08,420
And so here what you can do is you can input some data and you will see that you'll come up with.

65
00:05:08,430 --> 00:05:13,630
So let's go so let's say I'll put in Hello.

66
00:05:13,690 --> 00:05:22,840
This is the walk chain a zed course as you can see this data has this hash.

67
00:05:22,840 --> 00:05:23,170
Right.

68
00:05:23,200 --> 00:05:27,220
And so we're going to explore a couple of things and after that will go back to the presentation and

69
00:05:27,220 --> 00:05:29,830
we'll talk about the characteristics of a hash.

70
00:05:29,830 --> 00:05:38,240
So right now first thing I wanted to show you is that if I remove this now and then put it back it'll

71
00:05:38,260 --> 00:05:39,430
have exactly the same hash.

72
00:05:39,460 --> 00:05:45,870
9 9 9 9 4 4 and then do you want one at the end so let's remove it again and then put it back then and

73
00:05:45,900 --> 00:05:47,830
before DD 1 DD 1.

74
00:05:47,830 --> 00:05:54,510
So it always will and always will reproduce the same hash if you put in the same date.

75
00:05:54,520 --> 00:05:55,660
And that's logical right.

76
00:05:55,660 --> 00:06:00,330
So because like we humans take the same person who check their fingerprints and then you take the same

77
00:06:00,340 --> 00:06:02,530
person checked the finger is going to be the same every time.

78
00:06:02,530 --> 00:06:07,720
Otherwise it wouldn't really make sense you would be able to use it for forensics.

79
00:06:07,720 --> 00:06:16,960
Another thing is that if we change one tiny symbol like we add like a another exclamation mark here

80
00:06:17,170 --> 00:06:19,580
the hash changes completely and entirely.

81
00:06:19,720 --> 00:06:20,950
That's called the avalanche effect.

82
00:06:20,950 --> 00:06:23,160
We'll talk more about it just now.

83
00:06:23,260 --> 00:06:29,610
But the main point here is that when you make a slight change it doesn't change it slightly changes

84
00:06:29,610 --> 00:06:30,340
completely.

85
00:06:30,340 --> 00:06:36,020
You can try like remove the question mark and put a dot completely different hash.

86
00:06:36,780 --> 00:06:41,270
And because you don't put anything here you always get two or three just six.

87
00:06:41,280 --> 00:06:49,700
So for example I've got a boy here have got pasted copy the first chapter of war and peace.

88
00:06:49,770 --> 00:06:54,420
It's like the biggest book in the world and this is the first chapter as you can see and pasted so much

89
00:06:54,420 --> 00:07:02,550
text in here and the hash again is just 256 bits so 64 characters.

90
00:07:02,610 --> 00:07:03,240
So there we go.

91
00:07:03,240 --> 00:07:06,950
That's Shad's out of six in demonstration.

92
00:07:06,960 --> 00:07:09,660
Have a look here if you'd like to play around with it.

93
00:07:09,660 --> 00:07:11,420
We're going to go back to a presentation now.

94
00:07:11,730 --> 00:07:12,180
OK.

95
00:07:12,300 --> 00:07:19,660
So the five requirements for hash algorithms is shot out of which six is not the only one.

96
00:07:19,670 --> 00:07:23,880
There's other algorithms shout 512 Chah 3.

97
00:07:24,090 --> 00:07:27,600
And you could come up with a hashing algorithm.

98
00:07:27,610 --> 00:07:31,710
However there are certain requirements for it to be useful.

99
00:07:31,710 --> 00:07:34,750
Number one is it has to be one way.

100
00:07:34,920 --> 00:07:39,300
So basically what that means is that you cannot go backwards.

101
00:07:39,300 --> 00:07:48,020
You cannot go from the hash to the documents so you cannot restore or reverse engineer the document

102
00:07:48,060 --> 00:07:49,020
based on the hash.

103
00:07:49,020 --> 00:07:51,600
It has to be like a fingerprint like for a human.

104
00:07:51,740 --> 00:07:56,820
If you have the fingerprints you cannot restore what the person looks like.

105
00:07:56,820 --> 00:08:01,420
You cannot understand you know what color eyes they had or anything else about them.

106
00:08:01,500 --> 00:08:06,190
But at the same time you have if you have a person you can always get the fingerprints.

107
00:08:06,190 --> 00:08:08,330
There's only one way.

108
00:08:08,370 --> 00:08:14,130
Number two is it has to be deterministic meaning that if I take the same document exactly the same document

109
00:08:14,130 --> 00:08:20,400
later on and I run the same apply the hash algorithm again I'll get exactly the same result as we saw

110
00:08:21,090 --> 00:08:22,290
with that illustration.

111
00:08:22,290 --> 00:08:28,980
So these two or three fourths of our requirement is it has to be has to have fast computation and we'll

112
00:08:28,980 --> 00:08:31,310
see throughout the course why that's important.

113
00:08:32,100 --> 00:08:35,400
And the fourth requirement is the avalanche effect.

114
00:08:35,430 --> 00:08:42,090
And I specifically put an image here because too like ingrain this in our memory so we remember that

115
00:08:42,090 --> 00:08:44,820
we saw this avalanche on the screen.

116
00:08:44,820 --> 00:08:48,500
It is an ultra important requirement of the hash algorithm.

117
00:08:48,500 --> 00:08:51,210
So let's see what it implies.

118
00:08:51,210 --> 00:08:57,240
The average effect means that if I take exactly the same document and I change it like make a tiny oil

119
00:08:57,240 --> 00:09:04,450
change even one bit of data change in the document for instance we've got a plus one over there here.

120
00:09:04,500 --> 00:09:10,710
So if we do that you'll change any change then the hash will be absolutely different.

121
00:09:10,710 --> 00:09:15,930
So we really saw that in the demonstration where when we were adding an X or exclamation mark or making

122
00:09:15,930 --> 00:09:22,350
some other small changes though the reason is called the avalanche effect is because of how that is

123
00:09:22,350 --> 00:09:24,530
implemented inside the algorithm.

124
00:09:24,690 --> 00:09:29,790
We're not going to go into detail now but like you'll be able to check that in the paper if you like

125
00:09:30,330 --> 00:09:36,390
but it basically that one change triggers may a few changes and they in turn trigger more changes and

126
00:09:36,390 --> 00:09:37,280
they are more changes.

127
00:09:37,290 --> 00:09:43,770
So it's very smart how it's caused and it's very similar to an avalanche where like one tiny like wrong

128
00:09:43,770 --> 00:09:50,250
step can cause snow to start moving and then more snow moves and snow more snow more and you get an

129
00:09:50,250 --> 00:09:51,220
avalanche.

130
00:09:51,720 --> 00:09:59,040
So that's what the avalanche effect is and it's very very important in the application of block chain.

131
00:09:59,040 --> 00:10:04,230
And we'll see why when we're talking about mining in the mining tutorials in this section in this module

132
00:10:04,230 --> 00:10:06,620
you'll see why the avalanche expect is so important.

133
00:10:06,960 --> 00:10:10,490
And part five it must withstand collisions.

134
00:10:10,500 --> 00:10:11,490
So what does that mean.

135
00:10:11,490 --> 00:10:13,350
What is static collisions mean.

136
00:10:13,380 --> 00:10:19,590
Well it means like what as we saw with with people that sometimes one in 60 million that you're going

137
00:10:19,600 --> 00:10:25,820
to have to people who have the same thing to print and same thing for the hashing algorithm because

138
00:10:26,390 --> 00:10:30,040
the I got the pictures on the screen already.

139
00:10:30,270 --> 00:10:32,490
In a second so I'll explain what the pigeons are doing there.

140
00:10:32,490 --> 00:10:37,970
So with the hash algorithm as you can see it's 64 bits.

141
00:10:37,990 --> 00:10:39,950
Right so it's very limited.

142
00:10:40,080 --> 00:10:45,090
Even though like there's a lot of different variations as you can have it's still limited it's not infinite.

143
00:10:45,090 --> 00:10:52,740
And yet the quantity of different digital documents that we can create is unlimited is enormous.

144
00:10:52,740 --> 00:11:01,350
We can like there's tons and tons of books tons of different photos being created every single day videos

145
00:11:01,380 --> 00:11:02,100
all this stuff.

146
00:11:02,100 --> 00:11:11,040
So in essence the amount of digital data we have is much much greater than we can possibly have is much

147
00:11:11,040 --> 00:11:19,760
greater than the difference the number of variations of a 64 character representation.

148
00:11:19,860 --> 00:11:24,750
And so that means that there is a principle called the pigeon hole principle.

149
00:11:24,750 --> 00:11:30,150
That means if you have for instance in this case 10 pigeons and only nine holes you're gonna have to

150
00:11:30,360 --> 00:11:32,480
put two pigeons into one of those holes.

151
00:11:32,520 --> 00:11:33,660
There's no way around that.

152
00:11:33,660 --> 00:11:39,930
Right so if you have more of a quantity a then there is slots and quantity B.

153
00:11:40,020 --> 00:11:48,030
Then inevitably there will be what we call collisions in quanta in that representation when you try

154
00:11:48,030 --> 00:11:51,560
to move from quantity which is much greater to quantity.

155
00:11:51,810 --> 00:11:58,410
So naturally they will be collusions and you can do anything about it just pigeonhole principle and

156
00:11:58,410 --> 00:11:59,040
that's OK.

157
00:11:59,040 --> 00:12:05,490
The thing with that is that it is so unlikely it is so rare that that will happen that we can deal with

158
00:12:05,490 --> 00:12:05,630
it.

159
00:12:05,640 --> 00:12:08,800
It's OK it's not going to ruin the whole room.

160
00:12:08,850 --> 00:12:12,810
The problem just like with humans and fingerprints we can tolerate that.

161
00:12:12,810 --> 00:12:18,850
That's a very rare instance and it's pretty much a very very unlikely to happen.

162
00:12:19,510 --> 00:12:25,240
And like it's not going to affect anything if it does happen somewhere sometime.

163
00:12:25,860 --> 00:12:31,620
But we must have some collisions what that does mean is that we need the algorithm needs to be able

164
00:12:31,620 --> 00:12:37,860
to withstand artificial collisions that for instance pirates can create.

165
00:12:37,860 --> 00:12:38,760
And that's a problem.

166
00:12:38,760 --> 00:12:46,200
So if you can find a way to create these collisions to make two different documents purposefully have

167
00:12:46,200 --> 00:12:51,840
the same hash that's a problem because then you can forged documents then you might have an important

168
00:12:51,840 --> 00:12:56,710
document that for instance is who's who this house belongs to.

169
00:12:56,740 --> 00:12:58,300
Like ownership document.

170
00:12:58,470 --> 00:13:00,420
And it might have a name in there.

171
00:13:00,420 --> 00:13:06,480
And if you know if there's a way to forge collisions to create artificial collisions then you will be

172
00:13:06,480 --> 00:13:10,740
able to change the name on the documents and the hash will be the same.

173
00:13:10,740 --> 00:13:17,510
So the person checking the document by the hash will think that you are the owner of the house.

174
00:13:17,820 --> 00:13:21,550
And so that's what we mean by withstand collisions.

175
00:13:21,870 --> 00:13:23,620
So collisions should not be possible.

176
00:13:23,640 --> 00:13:28,300
So there we go those are the five requirements for secure and safe hash algorithms.

177
00:13:28,350 --> 00:13:35,010
They have to be one way deterministic a fast computation the avalanche effect and must withstand collisions.

178
00:13:35,010 --> 00:13:39,260
I know this is quite a lot to take in on cryptography too at the very start.

179
00:13:39,270 --> 00:13:44,820
But at the same time this is the foundation of what we're going to be discussing about blockades so

180
00:13:44,820 --> 00:13:48,320
these things are going to be very very useful to us.

181
00:13:48,540 --> 00:13:54,440
And to finish off here's the promised additional reading if you'd like to learn exactly about how the

182
00:13:54,490 --> 00:13:57,930
hash how the Sharjah on Route 6 algorithm works.

183
00:13:57,930 --> 00:13:59,560
Then you can check it out here.

184
00:13:59,580 --> 00:14:02,380
The paper is called on the secure hash algorithm family.

185
00:14:02,520 --> 00:14:08,550
It's actually not paper it's actually a chapter in a book it's chapter one of cryptography and context

186
00:14:09,780 --> 00:14:16,380
and that chapter one was run by Per Penarth and Cohen and the links are there the link will also be

187
00:14:16,530 --> 00:14:19,860
in the notes for the course.

188
00:14:19,860 --> 00:14:20,280
There you go.

189
00:14:20,280 --> 00:14:21,170
Hope you enjoyed this.

190
00:14:21,180 --> 00:14:28,860
Tauriel and now you're well-versed in Shudra under 56 and we'll start learning more about block chains

191
00:14:28,860 --> 00:14:31,240
and applying this knowledge from the next trial.

192
00:14:31,320 --> 00:14:33,920
And we've seen you there until then in your actions.
