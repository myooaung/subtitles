WEBVTT
1
00:00:01.402 --> 00:00:05.931
Individual methods in our repository tier are ran in a single

2
00:00:05.931 --> 00:00:09.152
transaction for the lifecycle of that JdbcTemplate call.

3
00:00:09.152 --> 00:00:12.902
But if we want to implement transactions across multiple calls,

4
00:00:12.902 --> 00:00:19.735
we need to create an instance of a transactionManager like the one listed here.

5
00:00:19.735 --> 00:00:24.139
This transactionManager wraps our dataSource and utilizes that

6
00:00:24.139 --> 00:00:29.928
transaction capability of our JDBC driver that we have chosen

7
00:00:29.928 --> 00:00:33.402
for the platform we are using.

8
00:00:33.402 --> 00:00:35.928
Let's add transactions to our application.

9
00:00:35.928 --> 00:00:41.402
We first need to add a transaction manager to our JDBC config file.

10
00:00:41.402 --> 00:00:47.402
We also need to create a sample call that spans two JDBC transactions.

11
00:00:47.402 --> 00:00:50.402
From there we can annotate that method with @Transactional,

12
00:00:50.402 --> 00:01:01.000
signifying that we want to roll back if something happens. And finally, we can verify that it did complete with a rollback.

