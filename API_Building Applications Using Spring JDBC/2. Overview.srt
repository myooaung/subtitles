1
00:00:01,334 --> 00:00:05,534
Every interaction with the database inside of Spring has

2
00:00:05,534 --> 00:00:08,334
the possibility to throw an exception.

3
00:00:08,334 --> 00:00:11,334
Spring handles exceptions differently than you're possibly used to.

4
00:00:11,334 --> 00:00:15,026
They do not use checked exceptions.

5
00:00:15,026 --> 00:00:19,334
Spring rather handles everything through runtime exceptions.

6
00:00:19,334 --> 00:00:22,001
Runtime exceptions are not a checked exception and

7
00:00:22,001 --> 00:00:27,860
thus don't require you to catch them, but they can still be thrown by your code.

8
00:00:27,860 --> 00:00:30,387
Although not specific to Spring JDBC,

9
00:00:30,387 --> 00:00:33,334
but rather Spring and Spring Web Development,

10
00:00:33,334 --> 00:00:38,001
we're going to use an exception handler inside of our controller to

11
00:00:38,001 --> 00:00:43,334
catch any exceptions thrown by our repository tier.

12
00:00:43,334 --> 00:00:47,612
An ExceptionHandler is what we use to capture exceptions that are

13
00:00:47,612 --> 00:00:51,667
thrown from other tiers in our application and still return an

14
00:00:51,667 --> 00:00:53,667
acceptable message to our front end.

15
00:00:53,667 --> 00:00:56,334
In this code snippet we catch an exception,

16
00:00:56,334 --> 00:01:07,000
but still return an HttpStatus of 200 as indicated by the OK in our response entity.

