WEBVTT
1
00:00:02.940 --> 00:00:06.690
To implement our update method, let's start with shutting

2
00:00:06.690 --> 00:00:09.850
down our server so that it doesn't continue to try to deploy

3
00:00:09.850 --> 00:00:12.740
our changes as we save files.

4
00:00:12.740 --> 00:00:18.040
I'm going to open up our RestControllerTest and just go to the bottom.

5
00:00:18.040 --> 00:00:22.510
I'm actually going to copy this testGetRide that we did and change it. Much

6
00:00:22.510 --> 00:00:32.770
of the code will be the same. I'm going to call this testUpdateRide, and

7
00:00:32.770 --> 00:00:37.500
we're going to leave the same getForObject in here that we had before and

8
00:00:37.500 --> 00:00:45.080
just turn around and call that for our save. So we'll say ride, and rather

9
00:00:45.080 --> 00:00:47.580
than hard code a value in here,

10
00:00:47.580 --> 00:00:52.150
I'm going to actually update one of the values that gets returned.

11
00:00:52.150 --> 00:01:00.110
So I'm going to say ride.setDuration and call ride.getDuration +1 in here.

12
00:01:00.110 --> 00:01:04.040
So basically taking whatever value gets returned,

13
00:01:04.040 --> 00:01:08.640
updating that by one, and setting it back in that object.

14
00:01:08.640 --> 00:01:12.670
Now we can turn around and use that same RestTemplate that we already

15
00:01:12.670 --> 00:01:22.320
have and say restTemplate.put, and I'm going to take the URL that we have

16
00:01:22.320 --> 00:01:31.640
from up above here and copy that down below.

17
00:01:31.640 --> 00:01:39.240
So we're going to call that URL with a put and then pass in our ride object.

18
00:01:39.240 --> 00:01:43.380
So that's what that entire method looks like now. You can

19
00:01:43.380 --> 00:01:45.810
leave the System.out.println at the bottom,

20
00:01:45.810 --> 00:01:50.370
but it's going to just be outoutting to the screen what

21
00:01:50.370 --> 00:01:55.240
you have already retrieved from before, not what necessarily gets updated.

22
00:01:55.240 --> 00:02:03.350
Now we can go ahead and open up our RideController and go to the bottom just

23
00:02:03.350 --> 00:02:06.580
like we did before and I'm going to do the same thing,

24
00:02:06.580 --> 00:02:12.140
copy that getRide that we have and change that to be our updateRide.

25
00:02:12.140 --> 00:02:18.140
And inside of here, I'm going to just cut that down to /ride,

26
00:02:18.140 --> 00:02:25.830
change the RequestMethod to PUT, and now change the method to

27
00:02:25.830 --> 00:02:31.940
updateRide. And we don't need a path variable anymore and rather

28
00:02:31.940 --> 00:02:33.760
just the object that we're going to pass in.

29
00:02:33.760 --> 00:02:40.900
So we'll say @RequestBody and we'll just passing

30
00:02:40.900 --> 00:02:44.440
the object Ride and name it ride.

31
00:02:44.440 --> 00:02:49.190
And now we can call our rideService.updateRide. And this method

32
00:02:49.190 --> 00:02:54.940
won't exist yet, so it will give us an error.

33
00:02:54.940 --> 00:02:58.910
So we'll say updateRide. And that's everything that

34
00:02:58.910 --> 00:03:02.640
we need inside of our controller.

35
00:03:02.640 --> 00:03:04.270
Now there's two ways you can go about this.

36
00:03:04.270 --> 00:03:08.000
I'm going to use the helper method by clicking on the red X

37
00:03:08.000 --> 00:03:12.270
that you should have over here as well and say Create method

38
00:03:12.270 --> 00:03:15.840
updateRide in type RideService.

39
00:03:15.840 --> 00:03:21.160
So when I double‑click on that, it's going to add this signature to our

40
00:03:21.160 --> 00:03:26.190
RideService interface and subsequently give us that red X inside of our

41
00:03:26.190 --> 00:03:33.100
RideServiceImpl. Going into our RideServiceImpl, I can go to the bottom

42
00:03:33.100 --> 00:03:40.390
and hit Ctrl+spacebar and it will ask me to update the ride, or add our

43
00:03:40.390 --> 00:03:45.230
updateRide method in there, and inside of here we can do the same thing.

44
00:03:45.230 --> 00:03:56.170
Very quickly say return rideRepository.updateRide and pass in the ride

45
00:03:56.170 --> 00:03:57.040
object.

46
00:03:57.040 --> 00:04:02.240
And just like before, this method signature currently doesn't exist.

47
00:04:02.240 --> 00:04:06.940
So I can click that red X again and say Create method

48
00:04:06.940 --> 00:04:12.340
updateRide in type RideRepository.

49
00:04:12.340 --> 00:04:18.540
Once I say this, it will transfer that red X to our RideRepositoryImpl.

50
00:04:18.540 --> 00:04:22.830
Don't worry, in the next module, we're going to use the service tier for

51
00:04:22.830 --> 00:04:27.020
more than just a passthrough, so you won't be wondering why we're just

52
00:04:27.020 --> 00:04:30.340
creating all of these passthrough methods.

53
00:04:30.340 --> 00:04:36.180
Now let's open up our RideRepositoryImpl and likewise go to the bottom, hit

54
00:04:36.180 --> 00:04:43.240
Ctrl+spacebar, and it will ask us if we want to add that updateRide method. So

55
00:04:43.240 --> 00:04:48.720
we can double‑click on that. Now we have all the pieces in place to issue our

56
00:04:48.720 --> 00:04:53.640
update statement using the JdbcTemplate.

57
00:04:53.640 --> 00:05:02.370
I'm going to go ahead and say jdbcTemplate.update, and this is pretty

58
00:05:02.370 --> 00:05:10.680
straightforward SQL, so we're just going to now say update ride set name

59
00:05:10.680 --> 00:05:22.140
= ?, and this is using the PreparedStatement syntax, say duration = ?

60
00:05:22.140 --> 00:05:32.070
where id = ?, and now we can close that SQL off and put in a comma, and

61
00:05:32.070 --> 00:05:34.690
I'm going to carry this down to the next line so that you can see it

62
00:05:34.690 --> 00:05:53.710
easier, say ride.getName, ride.getDuration, and ride.getId. Since this is

63
00:05:53.710 --> 00:05:54.300
an update,

64
00:05:54.300 --> 00:06:00.540
we have that ID stored in our object. And now, we'll just return ride from

65
00:06:00.540 --> 00:06:09.790
here. Now we can save that, and all of the pieces are in place to now run our

66
00:06:09.790 --> 00:06:18.770
test. So I'm going to exit full screen mode and start our server up. Everything

67
00:06:18.770 --> 00:06:25.310
looks like it started up fine there. I'm going to switch to our test. Now I'm

68
00:06:25.310 --> 00:06:32.450
going to right‑click on testUpdateRide and say Run As, Unit Test, and we can

69
00:06:32.450 --> 00:06:37.530
see that it ran, but let's verify that it did actually run against the values

70
00:06:37.530 --> 00:06:43.910
in our database. So I can switch to MySQL Workbench and just issue a select

71
00:06:43.910 --> 00:06:51.640
statement of select * from Ride where id =1, and it says the duration is 37.

72
00:06:51.640 --> 00:07:00.640
If I switch back and run that test again, say Run As, JUnit Test. It ran again.

73
00:07:00.640 --> 00:07:04.990
If I issue that select statement again, it should say 38, and it

74
00:07:04.990 --> 00:07:12.480
does. So, recapping all those pieces, we went to our test and

75
00:07:12.480 --> 00:07:16.910
created this testUpdateRide where we retrieved an object based off

76
00:07:16.910 --> 00:07:21.670
of its ID and then set a duration,

77
00:07:21.670 --> 00:07:24.470
just took the current value that it is, added 1 to it,

78
00:07:24.470 --> 00:07:29.060
set that back in that object, and then called a put with that object,

79
00:07:29.060 --> 00:07:36.070
which in turn calls our RideController, it takes in that object, does an

80
00:07:36.070 --> 00:07:39.500
update right into our service tier on it, which went through the

81
00:07:39.500 --> 00:07:43.610
interface and then to the implementation, which passed it to our

82
00:07:43.610 --> 00:07:48.790
repository tier, which again is just the signature going to our update

83
00:07:48.790 --> 00:07:54.930
statement where we used basic PreparedStatement syntax of question marks

84
00:07:54.930 --> 00:07:58.850
and passed in those values through var args to issue that update

85
00:07:58.850 --> 00:07:59.840
statement.

86
00:07:59.840 --> 00:08:09.000
Pretty straightforward, not too complex. Let's look at doing the same thing using batch updates.

