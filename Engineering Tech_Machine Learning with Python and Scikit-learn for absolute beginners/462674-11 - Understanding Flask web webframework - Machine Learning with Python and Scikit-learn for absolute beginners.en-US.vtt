WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.920 --> 00:00:05.250
Next we'll understand how to expose the machine learning model with

00:00:05.250 --> 00:00:09.435
rest API restarts per representative State Transport.

00:00:09.435 --> 00:00:13.230
Rest is a popular way of extensive data in the real world.

00:00:13.230 --> 00:00:17.580
You can build an application using Java, Scala,

00:00:17.580 --> 00:00:19.215
or any other technology,

00:00:19.215 --> 00:00:23.700
and you can expose it with a rest interface to the outside world.

00:00:23.700 --> 00:00:28.455
And indeed, client wants to use your application or access the data,

00:00:28.455 --> 00:00:31.440
they can do so using wrist data is typically

00:00:31.440 --> 00:00:35.505
extends in XML or JSON format over HTTP protocol.

00:00:35.505 --> 00:00:41.949
Flask is a popular framework to build Rest API for a Python application.

00:00:41.949 --> 00:00:46.714
Let's first look at a helloworld flask rest API application.

00:00:46.714 --> 00:00:51.680
Then we'll dive into exposing our machine learning model to the rest API.

00:00:51.680 --> 00:00:55.260
In spider created new Python file.

00:00:56.290 --> 00:00:59.750
We'll call it flask helloworld.

00:00:59.750 --> 00:01:03.470
To build a flask Christy EPA import

00:01:03.470 --> 00:01:08.660
Flask and the associated request object from the flask library.

00:01:08.660 --> 00:01:15.380
You can go to Flask documentation to learn more about how to create a Flask application.

00:01:15.380 --> 00:01:19.400
For now, just follow this syntax and with a very few lines of code,

00:01:19.400 --> 00:01:21.440
you can build it as TPA.

00:01:21.440 --> 00:01:25.100
We'll declare an Endpoint class model.

00:01:25.100 --> 00:01:30.199
And who will receive post request in this application.

00:01:30.199 --> 00:01:35.690
Using post, you can send some data to the rest API and receive a response.

00:01:35.690 --> 00:01:38.720
If you use Git, you can only receive a response.

00:01:38.720 --> 00:01:41.300
Let's have a hello world function.

00:01:41.300 --> 00:01:46.100
In this example, we will send the data in JSON format and receive it in JSON format.

00:01:46.100 --> 00:01:49.880
Here, whatever data we are receiving the request in JSON format,

00:01:49.880 --> 00:01:54.290
we're storing it in request underscore data will pass

00:01:54.290 --> 00:01:59.105
the model name in the request which will retrieve and displayed to the user.

00:01:59.105 --> 00:02:02.390
Anybody could pose the model name invoking

00:02:02.390 --> 00:02:05.900
this last modelling point displays simple string

00:02:05.900 --> 00:02:09.890
you are requesting for a with Python string interpolation.

00:02:09.890 --> 00:02:12.365
We're displaying that model Nim.

00:02:12.365 --> 00:02:15.065
Now let's add a main method.

00:02:15.065 --> 00:02:19.160
Will specify the port number so that when the app is started,

00:02:19.160 --> 00:02:21.750
it'll run it that particular port.

00:02:22.810 --> 00:02:26.165
Let's launch the application in the local environment.

00:02:26.165 --> 00:02:27.500
If anybody wants to use it,

00:02:27.500 --> 00:02:30.020
will invoke it with this class model you are.

00:02:30.020 --> 00:02:34.415
Now to run. It will go to the command prompt and start the program.

00:02:34.415 --> 00:02:37.380
Let's look at the command prompt premier.

00:02:38.050 --> 00:02:40.130
Now let's start.

00:02:40.130 --> 00:02:40.490
Though.

00:02:40.490 --> 00:02:44.435
Helloworld program, darpa is now started.

00:02:44.435 --> 00:02:48.770
We have created a simple rest API which is running at port 8 thousand.

00:02:48.770 --> 00:02:54.919
Let's now see how to push data to this app and receive a response.

00:02:54.919 --> 00:02:58.110
We'll create a new Python file.

00:02:58.570 --> 00:03:03.000
We'll call it restaurant a scope plant dot.

00:03:03.000 --> 00:03:05.615
Since you'll be sending the data in JSON format,

00:03:05.615 --> 00:03:07.490
let's import JSON First.

00:03:07.490 --> 00:03:11.765
We also need to import the request library.

00:03:11.765 --> 00:03:14.045
Request is the HTTP library.

00:03:14.045 --> 00:03:17.180
And you could just hovered over it and read more about this.

00:03:17.180 --> 00:03:18.545
Using requests.

00:03:18.545 --> 00:03:20.360
You can send HTTP request.

00:03:20.360 --> 00:03:25.130
Now let's have a variable for the URL. In the server name.

00:03:25.130 --> 00:03:26.435
We can add localhost,

00:03:26.435 --> 00:03:32.660
or we can put the IP address that was displayed in the console, 1270018 thousand,

00:03:32.660 --> 00:03:35.075
which is pointing to the local host,

00:03:35.075 --> 00:03:41.225
will have very simple request data in JSON format with one key and one value.

00:03:41.225 --> 00:03:43.655
And we're passing kNN is the modal Limb.

00:03:43.655 --> 00:03:45.605
Now we'll send a post request,

00:03:45.605 --> 00:03:48.710
possibly URN enter data in JSON format.

00:03:48.710 --> 00:03:50.705
And from the response object,

00:03:50.705 --> 00:03:53.165
we can extract the text and print it out.

00:03:53.165 --> 00:03:56.460
Now let's run it and see the output power.

00:04:00.820 --> 00:04:04.910
Now we can see the output you are requesting for a KNN model,

00:04:04.910 --> 00:04:07.860
which is coming from grace TPA.
