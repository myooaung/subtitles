WEBVTT
1
00:00:00.840 --> 00:00:04.470
Now that we have our browser loaded and we've actually loaded a page,

2
00:00:04.470 --> 00:00:07.540
we need to be able to interact with that page.

3
00:00:07.540 --> 00:00:09.980
The first thing that we need to do is to be able to find the

4
00:00:09.980 --> 00:00:12.990
elements on that page so we can reference them.

5
00:00:12.990 --> 00:00:17.260
Here, you can see all of the different finders that we can use to find elements,

6
00:00:17.260 --> 00:00:22.770
and we can use any of those to find an element within that page.

7
00:00:22.770 --> 00:00:25.720
The reason why there's so many of these is because you don't always have

8
00:00:25.720 --> 00:00:30.120
control over the HTML on that page or the elements themselves.

9
00:00:30.120 --> 00:00:33.100
So you might have to be a little bit creative in trying

10
00:00:33.100 --> 00:00:34.990
to get a hold of a specific element.

11
00:00:34.990 --> 00:00:37.430
But there's almost always a way to get a hold of an

12
00:00:37.430 --> 00:00:39.690
element on that page programmatically.

13
00:00:39.690 --> 00:00:43.940
Let's look at some of the more common ways that we can find these.

14
00:00:43.940 --> 00:00:46.640
Then we'll look at coding and how to do this.

15
00:00:46.640 --> 00:00:49.190
The first one is to find it by ClassName.

16
00:00:49.190 --> 00:00:52.140
ClassName is just a CSS class name.

17
00:00:52.140 --> 00:00:56.540
So if we have an element that has a unique class name, we can use that.

18
00:00:56.540 --> 00:00:57.980
If there's multiple matches,

19
00:00:57.980 --> 00:01:02.440
we can index that so that we can find the first one or the second one.

20
00:01:02.440 --> 00:01:07.240
Most of these methods for finding an element will allow that as well.

21
00:01:07.240 --> 00:01:09.150
The next one is ID.

22
00:01:09.150 --> 00:01:12.900
ID is probably going to be the most useful and absolute one.

23
00:01:12.900 --> 00:01:15.160
If you have an ID for an element on the page,

24
00:01:15.160 --> 00:01:17.940
you can be pretty sure that's the one that you want.

25
00:01:17.940 --> 00:01:21.540
This is definitely one of the preferred methods.

26
00:01:21.540 --> 00:01:24.540
Another one is Name.

27
00:01:24.540 --> 00:01:28.400
You can use the Name property of an HTML element and it

28
00:01:28.400 --> 00:01:32.340
might just act like it does with ID.

29
00:01:32.340 --> 00:01:35.010
TagName is a pretty general case.

30
00:01:35.010 --> 00:01:37.330
This is the actual name of that tag.

31
00:01:37.330 --> 00:01:40.420
For example, if you had a table or anchor,

32
00:01:40.420 --> 00:01:44.460
that would be an A, you could just use the actual tag name.

33
00:01:44.460 --> 00:01:45.670
Probably in this case,

34
00:01:45.670 --> 00:01:49.540
you're going to want to index this to figure out which tag you're talking

35
00:01:49.540 --> 00:01:53.640
about unless there happens to be just one tag on that page.

36
00:01:53.640 --> 00:01:58.640
We can also use a CssSelector, and this is one of the more advanced ways.

37
00:01:58.640 --> 00:02:01.720
You can basically use any CSS that you would use to

38
00:02:01.720 --> 00:02:05.240
identify an element when you created the CSS.

39
00:02:05.240 --> 00:02:05.920
For example,

40
00:02:05.920 --> 00:02:09.660
you might actually use the CSS that is used to change the appearance of an

41
00:02:09.660 --> 00:02:15.540
element to actually select that element in your test.

42
00:02:15.540 --> 00:02:18.090
The LinkText is another useful one.

43
00:02:18.090 --> 00:02:19.690
When you're trying to get a link,

44
00:02:19.690 --> 00:02:23.580
you can actually just use the real text of that link.

45
00:02:23.580 --> 00:02:27.820
And the PartialLinkText is going to just be a partial of that link

46
00:02:27.820 --> 00:02:31.440
text, and you can do just a partial match on it.

47
00:02:31.440 --> 00:02:35.970
And lastly, another really useful one is XPath. This is one of the more

48
00:02:35.970 --> 00:02:40.130
advanced ones, but it's also often the one you're going to turn to when none

49
00:02:40.130 --> 00:02:44.200
of the other ways work. You can almost always use some kind of XPath

50
00:02:44.200 --> 00:02:48.850
expression to get a particular element that you want on a page. Although it

51
00:02:48.850 --> 00:02:52.740
may not be clear if you use XPath, so definitely when you're trying to find

52
00:02:52.740 --> 00:02:53.620
that element on the page,

53
00:02:53.620 --> 00:02:59.010
you'll want to use the most clear one as possible, and ID is usually going to

54
00:02:59.010 --> 00:03:03.110
be the most absolute and clearest way to approach that.

55
00:03:03.110 --> 00:03:06.080
In many cases, you're going to have to resort to different ones,

56
00:03:06.080 --> 00:03:09.020
especially if you don't have control over the source code of

57
00:03:09.020 --> 00:03:12.300
that page or if you're testing something that is existing and

58
00:03:12.300 --> 00:03:13.980
you can't modify those pages.

59
00:03:13.980 --> 00:03:16.340
But if you're working with developers or you are a

60
00:03:16.340 --> 00:03:18.420
developer and you can modify the page,

61
00:03:18.420 --> 00:03:25.000
you really want to make sure that you put IDs on everything because it makes automation so much simpler.

