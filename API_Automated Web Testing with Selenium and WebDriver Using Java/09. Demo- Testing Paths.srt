1
00:00:00,240 --> 00:00:03,040
To continue building out our framework,

2
00:00:03,040 --> 00:00:09,440
let's go ahead and create another test inside of here to navigate down a

3
00:00:09,440 --> 00:00:13,230
path to the author's pages on the Pluralsight website.

4
00:00:13,230 --> 00:00:16,940
To do so, we're going to create another test.

5
00:00:16,940 --> 00:00:21,340
So we'll give ourselves some space and we'll say @Test.

6
00:00:21,340 --> 00:00:34,200
And the method will be public void canGoToAuthorsPage.

7
00:00:34,200 --> 00:00:41,250
And inside of here, just like we did before,

8
00:00:41,250 --> 00:00:43,000
except we haven't created this functionality yet,

9
00:00:43,000 --> 00:00:57,750
we're going to say Pages.authorPages().goTo. And you can see how

10
00:00:57,750 --> 00:01:03,240
we're starting to walk through that entire structure to test each

11
00:01:03,240 --> 00:01:09,910
piece as we go. And we're going to do the same thing. We'll add

12
00:01:09,910 --> 00:01:12,330
an assertion. Change it,

13
00:01:12,330 --> 00:01:19,390
but I'm going to grab that for now. And we'll say

14
00:01:19,390 --> 00:01:30,640
Assertions.assertTrue Pages.authorPages.isAt. We'll save this.

15
00:01:30,640 --> 00:01:35,090
Let's switch over to our test framework and start adding that functionality to

16
00:01:35,090 --> 00:01:40,440
navigate to the author pages. Inside of our Pages object in our test framework,

17
00:01:40,440 --> 00:01:47,540
let's begin by creating the navigation for us to get here. We'll say public

18
00:01:47,540 --> 00:02:02,830
static AuthorPages, and this will take no arguments. And this will return an

19
00:02:02,830 --> 00:02:17,760
AuthorPages object, we haven't created that yet, = new AuthorPages, and we'll

20
00:02:17,760 --> 00:02:21,740
return that object.

21
00:02:21,740 --> 00:02:28,070
Now we can go ahead and use the quick fix on AuthorPages for us to create

22
00:02:28,070 --> 00:02:35,240
that class, and we want that under com.pluralsight as well.

23
00:02:35,240 --> 00:02:41,440
We'll save this. This is going to look quite similar to the home page.

24
00:02:41,440 --> 00:02:46,030
Opening up that HomePage class, I'm actually going to grab all of this

25
00:02:46,030 --> 00:02:50,870
information. And I'm going to point out something that I did on purpose here

26
00:02:50,870 --> 00:02:56,310
is in that AuthorPages, I'm going to paste in exactly the same stuff that's in

27
00:02:56,310 --> 00:03:01,760
my home page. This is a good example of when you're building a framework to

28
00:03:01,760 --> 00:03:06,720
not overengineer it to start with, but also to refactor it down the road.

29
00:03:06,720 --> 00:03:09,920
If we continue to have URL and title in every page,

30
00:03:09,920 --> 00:03:15,630
we can create a parent page object that all of that information is stored

31
00:03:15,630 --> 00:03:21,130
up in there, and the goTo method is used from that parent class, and the

32
00:03:21,130 --> 00:03:23,720
isAt is used from that parent class as well.

33
00:03:23,720 --> 00:03:29,680
So we can refactor these and clean these up some. To get the correct URL to

34
00:03:29,680 --> 00:03:35,500
put in this object and the title, let's switch over to our browser and look

35
00:03:35,500 --> 00:03:40,840
at what the URL is for that, as well as the title for that page. Scrolling

36
00:03:40,840 --> 00:03:42,990
down to the bottom of our page,

37
00:03:42,990 --> 00:03:49,140
we can see that there is an Authors link down underneath the platform.

38
00:03:49,140 --> 00:03:52,430
If we click on that, that's a pretty easy URL to remember.

39
00:03:52,430 --> 00:03:55,740
It's just pluralsight.com/authors.

40
00:03:55,740 --> 00:03:57,640
But what about the title?

41
00:03:57,640 --> 00:03:57,940
Well,

42
00:03:57,940 --> 00:04:04,800
I'm going to go ahead and view the source of this page and look for the title.

43
00:04:04,800 --> 00:04:11,880
And the title for this page is Authors Pluralsight. So I'm going to grab that

44
00:04:11,880 --> 00:04:17,130
while I'm here and switch back over to our framework. Paste that in for the

45
00:04:17,130 --> 00:04:23,340
title and correct that URL to go to /authors.

46
00:04:23,340 --> 00:04:32,330
Let's fix that URL. And for the title, we'll highlight that and

47
00:04:32,330 --> 00:04:34,720
paste that in there and save that as well.

48
00:04:34,720 --> 00:04:41,150
So now we have the correct URL and the isAt to verify that we

49
00:04:41,150 --> 00:04:44,630
are, in fact, on that page and where we think we should be.

50
00:04:44,630 --> 00:04:46,890
Before we switch back over to our test,

51
00:04:46,890 --> 00:04:52,160
we want to run a maven install. Let that go ahead and build our project and

52
00:04:52,160 --> 00:04:55,880
put it up in our repository for us. And now we can switch back over to our

53
00:04:55,880 --> 00:05:05,190
tests. They'll refresh. And we can now run our tests and verify that we can

54
00:05:05,190 --> 00:05:09,390
go to the home page and go to the authors page, and it closes and cleans up

55
00:05:09,390 --> 00:05:11,440
after itself when it's done.

56
00:05:11,440 --> 00:05:21,340
So let's run this. Rightâ€‘click and say canGoToAuthorsPage.

57
00:05:21,340 --> 00:05:26,670
It'll go through and verify both those, and that test successfully ran

58
00:05:26,670 --> 00:05:28,970
and closed the browser when it was done as well.

59
00:05:28,970 --> 00:05:33,650
So you can see we're starting to go through and build out that functionality

60
00:05:33,650 --> 00:05:39,570
as we go through all of the pieces inside of our browser, and it's

61
00:05:39,570 --> 00:05:43,990
navigating and capturing that entire site map for us.

62
00:05:43,990 --> 00:05:45,330
And this is not a spider.

63
00:05:45,330 --> 00:05:48,420
We're not doing this to spider the pages. We're doing this to

64
00:05:48,420 --> 00:05:51,670
prove out that the functionality that we think should be there

65
00:05:51,670 --> 00:05:58,000
is, in fact, there, and we can start checking for other elements and resources on those pages.

