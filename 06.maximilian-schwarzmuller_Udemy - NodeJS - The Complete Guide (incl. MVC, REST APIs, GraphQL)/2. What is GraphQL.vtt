WEBVTT
1
00:00:02.180 --> 00:00:05.880
Ketahuilah apa yang Anda gambar untuk menjelaskannya.

2
00:00:05.950 --> 00:00:10.360
Mari kita bandingkan dengan API yang sudah kita pelajari tentang penangkapan.

3
00:00:10.390 --> 00:00:15.060
API adalah suatu keadaan yang tidak bergantung pada co-aligned API untuk bertukar data.

4
00:00:15.280 --> 00:00:21.250
Jadi itu adalah aplikasi express node atau node dengan aplikasi framework apa saja yang kita bangun

5
00:00:21.430 --> 00:00:22.590
untuk bertukar data.

6
00:00:22.660 --> 00:00:27.270
Kami tidak memberikan pandangan kami tidak menyimpan sesi yang tidak kami pedulikan klien.

7
00:00:27.400 --> 00:00:32.390
Kami hanya mendapatkan permintaan untuk menguraikan data dan mengembalikan respons dengan data.

8
00:00:32.410 --> 00:00:38.110
Biasanya data Jason API Grafik umumnya tidak jauh berbeda.

9
00:00:38.140 --> 00:00:42.410
Ini juga merupakan API independen klien stateless untuk bertukar data.

10
00:00:42.490 --> 00:00:50.240
Tapi dan itu bagian penting tentu saja dengan fleksibilitas Querrey yang lebih tinggi dan untuk memahami bahwa mari kita

11
00:00:50.440 --> 00:00:57.340
lihat beberapa batasan API lainnya, katakanlah dalam API sisanya, kami sudah dan menunjukkan bahwa sepertinya kami belum

12
00:00:57.850 --> 00:01:00.760
dapat mengirim permintaan GET ke slash post.

13
00:01:00.760 --> 00:01:06.550
Dan seperti yang Anda bayangkan lakukan apa yang berlawanan dengan katakanlah dari database tetapi juga bisa dari file

14
00:01:06.550 --> 00:01:08.900
atau sesuatu seperti itu tentu saja.

15
00:01:09.100 --> 00:01:11.380
Dan seperti inilah posnya.

16
00:01:11.380 --> 00:01:14.440
Sekarang kami mengembalikan Adjt. untuk menolak bahwa semua orang bahagia.

17
00:01:14.650 --> 00:01:19.310
Tetapi bagaimana jika kita sebenarnya hanya perlu judul dan ID pada klien.

18
00:01:19.480 --> 00:01:26.440
Bagaimana jika kita tidak membutuhkan konten atau kita tidak perlu membuat atau data tentu saja kita dapat memiliki banyak skenario di mana kita menggunakan

19
00:01:26.710 --> 00:01:30.550
satu pada saat yang sama dan menunjuk pada aplikasi front end kita.

20
00:01:30.610 --> 00:01:38.410
Jadi dalam aplikasi satu halaman kami atau aplikasi mobile kami dan di satu tempat di satu halaman kami

21
00:01:38.500 --> 00:01:45.520
mungkin membutuhkan konten Tideland pada halaman kami mungkin memerlukan konten dan pencipta bagaimana kami bisa menyelesaikannya.

22
00:01:45.850 --> 00:01:51.950
Nah solusi 1 tentu saja hanya membuat lebih banyak titik akhir ayah kembali ke berbagai jenis data.

23
00:01:52.150 --> 00:01:59.200
Kami dapat membuat titik akhir API sisanya baru misalnya mengirim permintaan GET untuk mengirim tanda hubung tipis untuk hanya mengembalikan

24
00:01:59.200 --> 00:02:00.530
judul dan ID.

25
00:02:00.970 --> 00:02:06.640
Sekarang jelas dengan cara Anda tentu saja juga dapat menggunakan titik akhir yang sama sepanjang waktu dan hanya mengurai atau

26
00:02:06.730 --> 00:02:09.060
menyaring data yang Anda butuhkan di ujung depan.

27
00:02:09.160 --> 00:02:14.860
Tetapi kemudian Anda mengirim banyak data yang tidak perlu melalui kabel yang merupakan masalah terutama ketika

28
00:02:14.860 --> 00:02:16.600
bekerja dengan perangkat seluler.

29
00:02:16.630 --> 00:02:23.440
Jadi solusi kami bisa dengan hanya membuat lebih banyak titik akhir yang hanya mengembalikan data yang Anda butuhkan untuk masing-masing

30
00:02:23.440 --> 00:02:24.550
titik akhir ini.

31
00:02:25.400 --> 00:02:32.530
Masalahnya adalah Anda akan memiliki banyak titik akhir dan Anda harus memperbaruinya terus-menerus dan Anda juga memiliki solusi yang

32
00:02:32.560 --> 00:02:40.280
sangat tidak fleksibel di sini jika Anda di depan dan insinyur dan dalam proyek yang lebih besar Anda biasanya bekerja di

33
00:02:40.280 --> 00:02:44.960
tim yang berbeda jika mereka membutuhkan lebih data di halaman baru.

34
00:02:44.990 --> 00:02:50.720
Mereka datang kepada Anda sebagai back dan developer dan meminta Anda untuk memberinya titik

35
00:02:51.200 --> 00:02:58.550
akhir yang mengembalikan data dan tumpukan mereka dalam pengembangan panik sampai Anda menambahkan iterasi yang begitu cepat di ujung depan

36
00:02:58.730 --> 00:02:59.960
menjadi lebih sulit.

37
00:03:00.170 --> 00:03:06.020
Dan di sisi lain Anda ingin kembali dan terus menerus harus menambahkan titik akhir baru untuk memenuhi

38
00:03:06.020 --> 00:03:08.020
kebutuhan depan dan insinyur Anda.

39
00:03:08.030 --> 00:03:15.860
Jadi ini bukan solusi ideal untuk menggunakan parameter Kuri pada titik akhir yang ada.

40
00:03:15.890 --> 00:03:19.690
Anda dapat menerima parameter kueri seperti data sama dengan ramping.

41
00:03:19.700 --> 00:03:26.930
Sekarang jelas itu adalah pilihan tetapi seperti halnya dengan solusi pertama Anda selalu harus menambahkannya sehingga bagian depan dan

42
00:03:26.930 --> 00:03:32.460
insinyur Anda dapat melanjutkan dan Anda memiliki ketergantungan antara ujung depan dan ujung belakang.

43
00:03:32.750 --> 00:03:38.720
Selain itu, API Anda mungkin menjadi sangat sulit untuk dipahami karena mungkin tidak jelas parameter kueri mana yang dapat

44
00:03:38.720 --> 00:03:42.950
saya atur nilai mana yang dapat saya atur pada parameter kueri ini.

45
00:03:42.950 --> 00:03:51.560
Jadi ini juga tidak ideal untuk aplikasi di mana Anda sering memiliki persyaratan data yang berbeda pada halaman yang

46
00:03:51.560 --> 00:03:55.420
berbeda untuk menggunakan rakit yang ada di sana.

47
00:03:55.460 --> 00:04:01.370
Anda tidak memiliki masalah yang saya jelaskan sebelumnya karena di sana Anda akan mengetahui bahwa Anda memiliki

48
00:04:01.370 --> 00:04:08.440
bahasa permintaan yang kaya yang Anda gunakan di ujung depan untuk mengirimkannya ke backend yang kemudian diuraikan di bagian belakang

49
00:04:08.690 --> 00:04:11.630
dan secara dinamis mengambil hanya data yang perlu.

50
00:04:11.660 --> 00:04:17.810
Jadi hampir seperti bahasa query database yang Anda gunakan di bagian belakang seperti sekuel atau ibu menjadi

51
00:04:18.050 --> 00:04:22.230
bahasa query hampir seperti sesuatu seperti ini untuk ujung depan.

52
00:04:22.310 --> 00:04:25.810
Jadi yang Anda masukkan ke permintaan yang Anda kirim ke backend.

53
00:04:26.300 --> 00:04:30.600
Nah, itu idenya tetapi bagaimana cara kerjanya grafik itu.

54
00:04:30.620 --> 00:04:36.200
Yah kami mendapatkan klien kami, kami punya server kami dan di server Anda umumnya memiliki logika Anda

55
00:04:36.200 --> 00:04:38.360
untuk berinteraksi dengan database dengan file.

56
00:04:38.360 --> 00:04:39.840
Yang seperti itu.

57
00:04:39.860 --> 00:04:44.920
Sekarang apa yang Anda kirim dari klien ke server dalam dunia QL grafik itu.

58
00:04:44.990 --> 00:04:51.450
Anda hanya mengirim satu jenis permintaan dan itu adalah permintaan POST untuk membuat grafik Q L slash graph Q L.

59
00:04:51.680 --> 00:04:59.660
Jadi, Anda hanya memiliki satu titik dan titik di mana Anda mengirim permintaan HTP Anda bahkan untuk mendapatkan data.

60
00:04:59.660 --> 00:05:00.770
Dan mengapa begitu.

61
00:05:01.040 --> 00:05:07.860
Baik untuk permintaan POST Anda bisa menambahkan badan permintaan dan badan permintaan itu akan berisi ekspresi permintaan itu.

62
00:05:08.000 --> 00:05:13.790
Raf Curiel mendefinisikan bahasa kueri sendiri dan saya akan menunjukkan kepada Anda di mana harus mempelajari lebih lanjut

63
00:05:13.790 --> 00:05:20.720
tentang modul ini dan tentu saja Anda menggunakan bahasa Korea yang Anda masukkan ke dalam badan permintaan dan Anda tidak bisa mengirim

64
00:05:20.720 --> 00:05:22.810
badan permintaan pada mendapatkan permintaan misalnya.

65
00:05:23.060 --> 00:05:29.630
Jadi Anda memasukkan ekspresi bahasa permintaan Anda ke dalam tubuh permintaan dan data akan diuraikan pada server untuk kemudian melakukan

66
00:05:29.810 --> 00:05:33.900
beberapa keajaiban di atasnya dan mengembalikan Anda hanya data yang Anda inginkan.

67
00:05:33.940 --> 00:05:35.770
Itulah ide di balik korupsi.

68
00:05:35.780 --> 00:05:40.870
Nah sekarang Kery bertahap seperti itu biasanya akan terlihat seperti ini.

69
00:05:40.910 --> 00:05:48.170
Ini hanya struktur seperti objek tempat Anda memiliki kueri jenis operasi sebelum mendapatkan data.

70
00:05:48.170 --> 00:05:55.070
Anda juga memiliki tipe lain seperti mutasi untuk mengedit atau menghapus atau memasukkan data atau langganan

71
00:05:55.070 --> 00:05:59.410
untuk mengatur langganan data waktu nyata menggunakan soket web.

72
00:05:59.450 --> 00:06:01.480
Anda juga memiliki d d dan poin.

73
00:06:01.520 --> 00:06:06.680
Anda bisa memanggil mereka atau perintah yang dapat Anda jalankan dan Anda menemukan mereka sebagai pengembang

74
00:06:06.680 --> 00:06:13.520
di belakang dan label titik akhir lalu dan bidang yang ingin Anda ekstrak dan itu adalah bagian yang fleksibel karena Anda

75
00:06:13.730 --> 00:06:19.790
bisa di satu tempat mendapatkan pengguna dengan hanya nama dan di tempat lain Anda bisa mendapatkan umur dan email

76
00:06:19.800 --> 00:06:20.440
nama.

77
00:06:20.480 --> 00:06:25.900
Jadi itulah tepatnya yang Anda masukkan ke dalam kueri yang Anda kirim ke belakang dan

78
00:06:25.910 --> 00:06:32.400
yang kemudian diuraikan di sana sekarang mengenai jenis operasi gratis ini seperti yang saya sebutkan kami punya kari di sana.

79
00:06:32.430 --> 00:06:36.370
Kami mengambil data dan kami menggunakan permintaan POST untuk itu.

80
00:06:36.390 --> 00:06:42.540
Tetapi jika kita ingin membandingkannya dengan dunia API lainnya maka ini akan setara dengan mengirim permintaan GET

81
00:06:42.540 --> 00:06:44.690
ke beberapa jalur di sana.

82
00:06:45.090 --> 00:06:50.240
Kami juga mendapat mutasi yang pada dasarnya digunakan untuk semua yang mengubah data.

83
00:06:50.250 --> 00:06:56.280
Jadi apa yang sebelumnya Anda tangani dengan post put patch dan hapus permintaan dan langganan seperti yang saya sebutkan

84
00:06:56.280 --> 00:06:57.720
mengatur koneksi waktu nyata.

85
00:06:57.780 --> 00:07:00.030
Mengapa soket web tidak akan fokus pada hal itu.

86
00:07:00.030 --> 00:07:05.680
Dan modul ini karena ini bukan program grafis dan memang Anda dapat membuat seluruh program grafik Anda

87
00:07:05.690 --> 00:07:06.870
semua di sini.

88
00:07:06.930 --> 00:07:10.080
Saya ingin fokus pada fitur inti.

89
00:07:10.080 --> 00:07:17.220
Jadi untuk meringkasnya dalam gambaran besar kami memiliki klien kami, kami mengirim permintaan ke grafik tunggal untuk Al dan menunjuk

90
00:07:17.220 --> 00:07:18.690
pada server kami.

91
00:07:18.930 --> 00:07:23.220
Dan kemudian di sana dan ini adalah bagian yang akan Anda lakukan dengan saya dalam modul ini.

92
00:07:23.310 --> 00:07:31.900
Di sana Anda mengatur definisi Anda untuk mutasi Curie dan mungkin juga langganan memang definisi yang Anda gunakan definisi jenis karena

93
00:07:32.230 --> 00:07:38.950
grafik yang Anda gunakan adalah bahasa Clery yang diketik yang berarti Anda menentukan jenis data yang Anda

94
00:07:38.950 --> 00:07:44.210
gunakan dengan jenis data yang Anda kembalikan dalam permintaan dan sebagainya di.

95
00:07:44.660 --> 00:07:47.710
Dan DS dan poin yang Anda tetapkan di sini.

96
00:07:47.710 --> 00:07:53.540
Jadi pertanyaan dan mutasi dan langganan yang Anda tentukan ini terhubung ke apa yang disebut pemecah risiko yang

97
00:07:54.010 --> 00:08:00.360
merupakan fungsi yang mengandung logika sisi server Anda dan jika Anda membandingkannya dengan menangkap API, definisi akan menjadi rute

98
00:08:00.370 --> 00:08:06.190
Anda dan ada solver akan menjadi pengendali dan itu adalah bagaimana Anda dapat melihat grafik dengan baik

99
00:08:06.210 --> 00:08:08.910
dan ini adalah bagaimana kami akan mengimplementasikannya.

100
00:08:08.920 --> 00:08:13.220
Jadi untuk meringkasnya adalah simpul normal dan mungkin mengekspresikan server.

101
00:08:13.240 --> 00:08:18.400
Tentu saja Anda juga tidak terbatas menggunakan Express J. S. Anda juga tidak

102
00:08:18.400 --> 00:08:25.900
terbatas menggunakan catatan dengan cara grafik QL bahasa atau brosur dapat digunakan dengan bahasa pemrograman apa pun.

103
00:08:25.990 --> 00:08:29.310
Sama seperti API sisanya baik tetapi ini tentu saja simpul.

104
00:08:29.320 --> 00:08:31.100
Jadi kita akan fokus pada hal itu.

105
00:08:31.210 --> 00:08:32.620
Anda memiliki satu titik akhir tunggal.

106
00:08:32.650 --> 00:08:36.340
Biasanya memangkas grafik ke l meskipun Anda bisa mengubah ini tentu saja.

107
00:08:36.610 --> 00:08:43.720
Anda hanya menggunakan permintaan pos karena Anda memasukkan ekspresi kueri ke dalam tubuh permintaan dan Anda memiliki resolver

108
00:08:43.720 --> 00:08:50.710
di sisi server yang menganalisis tubuh permintaan itu dan kemudian melakukan sesuatu dengan data Anda berdasarkan ekspresi kueri

109
00:08:50.710 --> 00:08:56.410
yang Anda miliki di tubuh itu dan akan menggunakan pihak ketiga paket untuk parsing

110
00:08:56.410 --> 00:08:57.720
itu dan seterusnya.

111
00:08:57.730 --> 00:09:03.060
Jadi posting untuk mendapatkan data itu adalah hal paling membingungkan yang biasanya Anda miliki ketika menyelam ke grafik

112
00:09:03.070 --> 00:09:03.540
Anda.

113
00:09:03.730 --> 00:09:05.500
Ya inilah yang kami lakukan.

114
00:09:05.500 --> 00:09:06.940
Apakah ini yang ok di sini.

115
00:09:07.000 --> 00:09:12.460
Karena kami menggambarkan data yang ingin kami dapatkan di badan permintaan.

116
00:09:12.490 --> 00:09:13.950
Nah, itu banyak teori.

117
00:09:14.050 --> 00:09:15.160
Mari kita lihat dalam aksi.
