1
00:00:02,780 --> 00:00:11,150
Quindi vogliamo verificare se quella promessa che abbiamo avuto alla fine restituisca un errore per questo test che stiamo scrivendo qui

2
00:00:11,150 --> 00:00:12,110
a destra.

3
00:00:12,110 --> 00:00:15,120
Perché stiamo testando un codice di errore di 500.

4
00:00:15,290 --> 00:00:25,350
Ora per questo facciamo un piccolo aggiustamento qui nel nostro file off controller, ma aggiungiamo una dichiarazione di ritorno qui alla

5
00:00:25,350 --> 00:00:26,010
fine.

6
00:00:26,010 --> 00:00:31,740
Ciò implicitamente restituirà la promessa che abbiamo nascosto dietro async attendo qui.

7
00:00:31,920 --> 00:00:35,680
Ora possiamo cambiare questo codice.

8
00:00:35,680 --> 00:00:41,690
Raggiungi l'accesso al controller spento e chiama non è e, naturalmente, c'è solo giustizia prima.

9
00:00:41,770 --> 00:00:45,970
Questa è una funzione middleware ed express e necessita di un oggetto risposta oggetto richiesta.

10
00:00:45,970 --> 00:00:51,900
E la prossima chiave o funzione successiva qui l'oggetto richiesta dovrebbe il campo corpo che ha una e-mail in

11
00:00:51,910 --> 00:00:55,930
un corpo riempito che ha una password e quindi dovremmo fallire comunque.

12
00:00:55,970 --> 00:01:00,940
Quindi non abbiamo bisogno di preoccuparci di cosa altro stiamo facendo nel resto di questo codice qui.

13
00:01:00,940 --> 00:01:11,120
Quindi creiamo il nostro oggetto Richiesta fittizio qui e quell'oggetto richiesta ora avrà un campo corpo e che a sua volta avrà un test di

14
00:01:11,120 --> 00:01:18,350
posta elettronica per testare quella chiamata forse e avrà un test della password o qualsiasi cosa tu voglia

15
00:01:18,350 --> 00:01:22,950
e lo avrà passato in te da metodo di registrazione qui.

16
00:01:23,000 --> 00:01:26,220
Tutte le analisi e gli oggetti vuoti vengono inoltrati alla risposta.

17
00:01:26,270 --> 00:01:30,920
E anche qui passo una funzione vuota per il prossimo metodo.

18
00:01:30,920 --> 00:01:38,630
Ora posso aggiungere qui perché quando restituisci una promessa nel log e nel metodo in modo implicito e poi dovrebbe

19
00:01:39,760 --> 00:01:48,150
essere eseguita una volta che è finita e ora vogliamo controllare il nostro codice di stato dell'errore in modo da ottenere il risultato

20
00:01:51,620 --> 00:01:58,020
qui e io prima di tutto semplicemente il blocco della console che risulta così che possiamo dare

21
00:01:58,020 --> 00:01:59,480
un'occhiata a questo.

22
00:01:59,640 --> 00:02:02,630
E ora lascia che esegua il test NPM.

23
00:02:02,760 --> 00:02:08,180
Ora quello che vediamo è prima di tutto tutto ciò che è strano ma se giriamo un po 'vediamo qui

24
00:02:08,180 --> 00:02:09,450
tutti gli occhi sull'ammenda.

25
00:02:09,500 --> 00:02:12,080
Il motivo è che torniamo al controller spento.

26
00:02:12,250 --> 00:02:17,050
Rientro qui, ma in effetti rendo indefinito giusto e questo è ciò che in genere restituisco come

27
00:02:17,060 --> 00:02:19,530
valore di quella promessa che viene restituita qui.

28
00:02:19,550 --> 00:02:22,720
Quindi quello che in realtà voglio tornare qui è il mio errore.

29
00:02:22,730 --> 00:02:25,100
Oggetto o un po 'prima.

30
00:02:25,100 --> 00:02:29,930
Qui forse è indefinito quindi nel caso di successo non restituisco nulla in quella promessa

31
00:02:29,930 --> 00:02:32,690
che alla fine viene restituita qui restituisco l'errore.

32
00:02:33,620 --> 00:02:43,100
Quindi ora se eseguo di nuovo il test NPM ora vediamo che l'oggetto errore che è stato bloccato lì non sembra migliore, non

33
00:02:43,390 --> 00:02:50,880
ci permette di cambiare un po 'il nostro codice e in realtà aspettarci che il risultato sia.

34
00:02:50,910 --> 00:02:58,700
E ora qui puoi effettivamente passare un errore o Chai è in grado di rilevare un paio di tipi di dati e un errore è uno

35
00:02:58,720 --> 00:02:59,520
di questi.

36
00:02:59,540 --> 00:03:04,970
Ovviamente i documenti ufficiali sono il posto dove andare per imparare tutto su quegli altri valori possibili

37
00:03:04,970 --> 00:03:06,520
che sarebbero oggetto String.

38
00:03:06,550 --> 00:03:07,820
Ora promettimi.

39
00:03:07,820 --> 00:03:08,480
E così via.

40
00:03:08,480 --> 00:03:18,700
Quindi mi aspetto che questo sia un errore e mi aspetto che i risultati abbiano una proprietà.

41
00:03:18,790 --> 00:03:22,420
Quindi per avere una proprietà mi aspetto di avere una proprietà del

42
00:03:25,060 --> 00:03:26,330
codice di stato.

43
00:03:26,380 --> 00:03:29,440
Giusto perché il mio oggetto errore dovrebbe avere quel codice di stato.

44
00:03:29,440 --> 00:03:37,650
Quindi mi aspetto che il codice di stato della proprietà, che dovrebbe essere 500 ora sopra il test NPM, a prima vista,

45
00:03:37,650 --> 00:03:39,310
sembra buono, tutto passa.

46
00:03:39,630 --> 00:03:44,820
Ma in realtà questo è un passo falso qui.

47
00:03:44,820 --> 00:03:52,260
Passa perché il marcatore non aspetta che questo test sia terminato perché in realtà abbiamo il codice asincrono e per

48
00:03:52,260 --> 00:03:58,410
impostazione predefinita non aspetta che il codice asincrono risolva il problema eseguendo questo codice sincronizzato passo

49
00:03:58,470 --> 00:04:03,780
dopo passo e non aspetti questa promessa risolvere non importa quanto sia veloce.

50
00:04:03,810 --> 00:04:10,740
Ora, naturalmente, possiamo dire al mercato di aspettare che lo facciamo aggiungendo un argomento in più in questa funzione che

51
00:04:10,740 --> 00:04:13,990
passiamo ad esso e questo è l'argomento done.

52
00:04:14,000 --> 00:04:19,710
Nota questo è opzionale ed è in effetti una funzione che puoi chiamare in questo modo mocha ti dà una funzione che

53
00:04:20,100 --> 00:04:25,350
puoi chiamare una volta che questo test case è fatto di default, è fatto una volta eseguito il codice dall'alto

54
00:04:25,350 --> 00:04:26,050
in basso.

55
00:04:26,130 --> 00:04:31,950
Ma se accetti questo argomento, in realtà aspetterà che tu lo chiami e quindi puoi chiamarlo

56
00:04:31,950 --> 00:04:34,340
in uno snippet di codice asincrono.

57
00:04:34,350 --> 00:04:35,750
Quindi qui ora invece di questo.

58
00:04:35,780 --> 00:04:43,890
Quindi blocco qui ho chiamato fatto e segnale che voglio che mocha attenda l'esecuzione della discoteca perché prima

59
00:04:43,890 --> 00:04:49,800
tratta questo test case come fatto e ora supera nuovamente il test NPM.

60
00:04:49,800 --> 00:04:56,300
Ora passa di nuovo ma ora questo è in realtà un test valido e possiamo confermare questo modificando questo codice

61
00:04:56,340 --> 00:04:58,340
di stato previsto a 401.

62
00:04:58,590 --> 00:05:07,120
Perché ora fallisce come puoi dire che dovrebbe lanciare un codice di freccia di 500 e se lo fai scorrere

63
00:05:07,120 --> 00:05:12,950
un po 'qui vedi che hai un codice di errore di 401.

64
00:05:13,090 --> 00:05:15,660
Di 500 ma atteso uno su quattrocentouno.

65
00:05:15,670 --> 00:05:20,050
Questo è ciò che abbiamo scritto qui e in effetti ora non ha funzionato.

66
00:05:20,050 --> 00:05:25,960
E devi modificare boom rimuovendolo come argomento perché se lo hai come argomento mocha in

67
00:05:25,960 --> 00:05:33,370
realtà controllerà di default se hai un codice che viene eseguito in modo asincrono senza quell'argomento senza chiamarlo lì

68
00:05:33,370 --> 00:05:37,960
per ora se lo fai di nuovo tutti i test passano.

69
00:05:37,960 --> 00:05:44,170
Quindi è molto importante passare il lavoro e poi chiamarlo una volta che hai finito per assicurarti che i tuoi test siano

70
00:05:44,170 --> 00:05:45,160
stati eseguiti correttamente.

71
00:05:45,160 --> 00:05:48,990
Così ora ho cambiato questo a 500 che è l'aspettativa realistica.

72
00:05:49,030 --> 00:05:51,640
Ora passano tutti e ora è veramente corretto.