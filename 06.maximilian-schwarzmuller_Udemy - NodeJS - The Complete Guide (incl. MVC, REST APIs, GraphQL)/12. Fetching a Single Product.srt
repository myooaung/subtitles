1
00:00:02,140 --> 00:00:05,110
So we're able to fetch all the products,

2
00:00:05,170 --> 00:00:09,760
let's now implement the code to fetch a single product and for that, I'm back in the shop.js

3
00:00:09,760 --> 00:00:16,510
controller file and here it is the get product function I want to work on. Here we get the product

4
00:00:16,510 --> 00:00:22,900
ID as part of the url and then we want to use our product model to somehow find the fitting product

5
00:00:23,320 --> 00:00:28,560
and therefore we of course need to work on the model again. And feel free to implement this on your own

6
00:00:28,570 --> 00:00:30,390
if you got some mongodb knowledge,

7
00:00:30,400 --> 00:00:31,860
it's a great challenge then

8
00:00:32,170 --> 00:00:36,080
otherwise of course we'll just do this together.

9
00:00:36,810 --> 00:00:40,340
So how would I fetch a single product?

10
00:00:40,680 --> 00:00:46,860
Well besides having my static fetch all method, I'll add another static method, find by ID and you can

11
00:00:46,860 --> 00:00:54,030
name this however you want of course. Here I expect to get a product ID as an argument and then just as

12
00:00:54,080 --> 00:00:59,260
before I'll call get db to get access to that database connection we have

13
00:00:59,640 --> 00:01:08,820
and I then want to return the result of an operation where I use my collection and there, I will now

14
00:01:08,820 --> 00:01:13,730
pass products again because it's still the same collection I want to interact with

15
00:01:14,220 --> 00:01:21,030
and I will find a product here but I'll find only one product.

16
00:01:21,390 --> 00:01:29,100
And to do that, I'll narrow down the result set with find and then I'll pass a javascript object to it

17
00:01:29,190 --> 00:01:36,630
which allows me to configure a filter and here, I want to look for a product where _id is equal

18
00:01:36,660 --> 00:01:40,410
to prod ID because that's the ID of the product I'm looking for.

19
00:01:42,200 --> 00:01:48,350
So with this, I'm returning theoretically all products which have this ID but I know it'll only be

20
00:01:48,350 --> 00:01:57,380
one so I can use find like this and I'll only get back one product or do I? Well actually find will still

21
00:01:57,380 --> 00:02:01,470
give me a cursor because mongodb doesn't know that I will only get one

22
00:02:01,550 --> 00:02:03,250
and here we can use

23
00:02:03,320 --> 00:02:06,130
next, the next function to get the next

24
00:02:06,140 --> 00:02:10,910
and in this case here also the last document that was returned by find here.

25
00:02:11,090 --> 00:02:14,830
So here I can then add then and catch

26
00:02:15,140 --> 00:02:20,940
and as always, log any error I might have

27
00:02:21,100 --> 00:02:31,370
and then in then where I will have my one product, there I will log it to the console for one and then I

28
00:02:31,370 --> 00:02:34,890
will return my product.

29
00:02:34,890 --> 00:02:38,950
So now this should hopefully yield my product here.

30
00:02:39,030 --> 00:02:43,610
Now with that, if we go back to the shop controller with find by ID,

31
00:02:43,650 --> 00:02:51,870
I either have an error or I get my product and I try to render the product detail page.

32
00:02:51,870 --> 00:02:59,690
Now let's go to the routes and there to the shop.js file and we need to comment in that route here for

33
00:02:59,700 --> 00:03:04,460
getting the product details. If we now save everything,

34
00:03:04,770 --> 00:03:06,370
let's click on details here

35
00:03:09,320 --> 00:03:14,150
and one thing you can see is that this doesn't seem to work right,

36
00:03:14,150 --> 00:03:18,350
we always get redirected to /products page.

37
00:03:18,410 --> 00:03:23,090
So if I go back to the starting page and we can tell the difference by the distance between the dollar

38
00:03:23,090 --> 00:03:28,910
sign and the character, on the starting page if I click details I just get forwarded to products,

39
00:03:28,910 --> 00:03:38,250
now why is that? Now this actually happens because no product ID is passed when I click details and therefore

40
00:03:38,250 --> 00:03:39,820
we end up in this route.

41
00:03:39,870 --> 00:03:42,340
Now why is no product ID passed?

42
00:03:42,420 --> 00:03:51,540
If we have a look at our view and there add our index.ejs file in the shop folder, in there

43
00:03:51,840 --> 00:03:57,490
we got our details button and I do actually add the product ID here

44
00:03:57,510 --> 00:04:03,920
but what is the error here? Well I access product.id here

45
00:04:04,070 --> 00:04:07,340
but with mongodb, it's _id,

46
00:04:07,460 --> 00:04:14,700
so I should use product_id and the same of course on the product list page, there

47
00:04:14,800 --> 00:04:18,240
I should also use product _id.

48
00:04:18,300 --> 00:04:26,580
So in all the places of the app where we used product.id, we should now use product_id. And with that

49
00:04:26,580 --> 00:04:31,260
if we reload that page here, the starting page or products page doesn't matter,

50
00:04:31,470 --> 00:04:33,200
if I now click details,

51
00:04:33,720 --> 00:04:35,030
now something else happens.

52
00:04:35,040 --> 00:04:42,480
Now we get stuck here because we have an error but that is better than before because now at least, we

53
00:04:42,630 --> 00:04:45,450
do have an ID which we try to find. 

54
00:04:45,450 --> 00:04:47,080
So what's the issue here now,

55
00:04:47,400 --> 00:04:50,620
why do I get cannot read property title of null?

56
00:04:51,210 --> 00:05:00,700
Well for one it's worth noting that null is printed here as well and that null should be stemming from

57
00:05:00,700 --> 00:05:06,490
my product model from find by ID when I console log the product.

58
00:05:06,640 --> 00:05:09,940
So it looks like we didn't find any product for that ID and

59
00:05:10,160 --> 00:05:12,170
what could be the reason for that now?

60
00:05:13,700 --> 00:05:20,390
The reason for that is that is that the ID in mongodb is actually stored a bit differently and we can

61
00:05:20,390 --> 00:05:25,160
see this in compass, the ID is actually such an object id thing.

62
00:05:25,430 --> 00:05:32,480
Now I did mention that mongodb stores data in bson format and this binary format of json

63
00:05:32,690 --> 00:05:36,210
is not just used because it's a bit faster to work with,

64
00:05:36,260 --> 00:05:42,530
it is but also because mongodb can store some special types of data in there and object id is such a

65
00:05:42,530 --> 00:05:43,060
type.

66
00:05:43,210 --> 00:05:48,970
It's a type added by mongodb, it's not a default javascript type, actually it doesn't exist in javascript

67
00:05:49,010 --> 00:05:56,980
at all and it's simply an ID object which mongodb uses because this generates and manages IDs which

68
00:05:57,000 --> 00:05:58,880
look random but actually aren't,

69
00:05:58,910 --> 00:06:05,320
so IDs for example are created in a way that if you create an ID now and an ID one second later, the

70
00:06:05,330 --> 00:06:10,740
ID one second later will alphabetically be a higher value than the previous one

71
00:06:10,850 --> 00:06:12,230
but that's just one thing.

72
00:06:12,560 --> 00:06:17,020
So object ID is an object provided by mongodb

73
00:06:17,420 --> 00:06:23,330
and if we look for equality, we can't compare _id which in the database will only hold object

74
00:06:23,330 --> 00:06:29,450
id values with a string because a string is not equal to the object id and the string in here does not

75
00:06:29,450 --> 00:06:31,520
count, mongodb will not compare this,

76
00:06:31,520 --> 00:06:34,820
it compares the entire object, the entire object ID.

77
00:06:35,270 --> 00:06:43,370
So to fix this, we simply go into our product model and in there, I'll import mongodb by requiring

78
00:06:43,380 --> 00:06:45,560
mongodb from the package

79
00:06:45,560 --> 00:06:49,340
and now I can use mongodb to get access to that object id type.

80
00:06:49,490 --> 00:07:02,030
So here when I compare, I can use mongodb.objectid and I can create a new, this is a constructor,

81
00:07:02,240 --> 00:07:06,260
a new objectid to which I pass a string which will be wrapped by that.

82
00:07:06,470 --> 00:07:11,180
So now if I save that and I try reloading the page for that ID,

83
00:07:11,420 --> 00:07:18,130
now you see this works because now I create such an objectid object and therefore here when I'm

84
00:07:18,140 --> 00:07:23,170
telling mongodb find me all documents where the ID stored in the database is equal to that,

85
00:07:23,460 --> 00:07:30,650
mongodb will now succeed because we now pass on objectid object to the comparison instead of just

86
00:07:30,650 --> 00:07:31,380
the string.

87
00:07:31,700 --> 00:07:33,870
And now this works too.

88
00:07:34,010 --> 00:07:40,160
It's very important that you keep in mind that mongodb stores IDs and _id and that it uses the

89
00:07:40,190 --> 00:07:42,740
special objectid type for that.
