1
00:00:02,160 --> 00:00:08,910
If you remember that slide from earlier, file uploads require no changes on the server side, only

2
00:00:08,910 --> 00:00:10,550
on the client side.

3
00:00:10,560 --> 00:00:15,270
So what do you learn now is not that important to you if you're not working on the client side yourself,

4
00:00:15,360 --> 00:00:16,740
on the server side

5
00:00:16,740 --> 00:00:19,390
the logic is exactly the same or pretty much the same

6
00:00:19,440 --> 00:00:22,920
we used before, let's still implement it again. Here

7
00:00:22,920 --> 00:00:25,350
I'm back in the node application

8
00:00:25,860 --> 00:00:29,880
and I want to accept uploaded files. Now in the past

9
00:00:29,880 --> 00:00:36,990
we did this with a special body parser, a special middleware and that was multer.

10
00:00:36,990 --> 00:00:43,980
So let's install that again with npm install --save multer in the node rest API project, not

11
00:00:44,040 --> 00:00:45,560
in the react project.

12
00:00:45,660 --> 00:00:51,240
So there we install multer just as we did it earlier in the course and with it installed, let's go to

13
00:00:51,240 --> 00:00:57,940
the app.js file and I will implement exactly the same logic as I did before.

14
00:00:58,020 --> 00:00:59,910
So I'll go through that really quickly,

15
00:00:59,910 --> 00:01:04,970
you should check out that file upload download module if you want to learn all the details.

16
00:01:05,030 --> 00:01:14,980
I will first of all import multer into my app.js file and with it imported, I will configure some things

17
00:01:15,100 --> 00:01:16,020
for it,

18
00:01:16,240 --> 00:01:17,300
maybe here.

19
00:01:19,000 --> 00:01:27,700
I will configure the file storage with multer disk storage to control where the files get stored and

20
00:01:27,700 --> 00:01:34,000
there, we have a destination key which is a function in the end, an arrow function where I get request

21
00:01:34,000 --> 00:01:40,010
object, information about the file multer detected and a callback I should call once I'm done

22
00:01:40,210 --> 00:01:46,540
defining the destination. I'm done immediately here, got no error and the destination is images pointing

23
00:01:46,540 --> 00:01:48,870
at that images folder here.

24
00:01:49,050 --> 00:01:51,100
So that's the first thing here,

25
00:01:51,160 --> 00:01:56,740
we add another function to the disks storage object and that's the file name function which defines

26
00:01:56,740 --> 00:02:04,550
how the file should be named, get the same arguments as in the destination function and I call that

27
00:02:04,550 --> 00:02:10,940
callback with null as an error and the filename will be a combination of the date which I convert to

28
00:02:11,030 --> 00:02:20,680
a string and then a dash and then the original filename, really simple, exactly the same logic I used

29
00:02:20,680 --> 00:02:22,040
before.

30
00:02:22,040 --> 00:02:30,670
I'll also define a file filter where I also have or which also is a function which gets request, information

31
00:02:30,710 --> 00:02:33,310
about the file and a callback and in here,

32
00:02:33,400 --> 00:02:35,480
I'll check for a couple of mime types.

33
00:02:35,500 --> 00:02:41,600
I'll see if my file mime type is equal to image/png

34
00:02:41,800 --> 00:02:52,450
or if file mime type is equal to image/jpg or if file mime type is equal to image/jpeg with an

35
00:02:52,460 --> 00:03:01,370
e, that is my if condition. If anything of that is true, then it is a valid file and therefore I return

36
00:03:01,370 --> 00:03:02,150
no error

37
00:03:02,200 --> 00:03:05,040
and true as a second argument in the callback

38
00:03:05,390 --> 00:03:11,510
otherwise it would be invalid and I still have no error but I return false here and this is again something

39
00:03:11,510 --> 00:03:14,960
you learned in the file upload module.

40
00:03:15,110 --> 00:03:19,730
Last but not least, I need to register multer and I will use it here,

41
00:03:19,760 --> 00:03:27,230
maybe after the json body parser. I will use multer as a function, pass an object to configure it,

42
00:03:27,710 --> 00:03:35,720
assign a storage to my own file storage constant we just created and add a file filter which points

43
00:03:35,780 --> 00:03:37,940
at that file filter constant

44
00:03:37,940 --> 00:03:44,560
we just created. On that multer function, I'll then also call single image to inform

45
00:03:44,580 --> 00:03:51,170
multer that I'll extract a single file stored in some field named image in the incoming requests.

46
00:03:51,200 --> 00:03:58,890
Now every incoming request is parsed for that file or for such files. With that, multer is registered

47
00:03:59,000 --> 00:04:08,000
and now we can use the file in our controller where we create a new post. For that in create post,

48
00:04:08,210 --> 00:04:17,390
I can first of all check if request file, if that is not set because if it is not set, then I'm missing

49
00:04:17,390 --> 00:04:21,050
a file so I will create a new error here,

50
00:04:22,170 --> 00:04:23,780
no image provided

51
00:04:23,790 --> 00:04:30,850
maybe, I will set my status code to 422 because it's also kind of a validation error and I will throw

52
00:04:30,850 --> 00:04:31,620
that error,

53
00:04:31,620 --> 00:04:33,460
that's the first check.

54
00:04:33,480 --> 00:04:36,360
Now if I do find a file then everything is good,

55
00:04:36,360 --> 00:04:39,450
multer was able to extract a valid file,

56
00:04:39,510 --> 00:04:41,970
so then I'll just set up an image

57
00:04:41,970 --> 00:04:48,180
url constant and access request file and there the path variable which multer generates which

58
00:04:48,180 --> 00:04:55,050
holds the path to the file as it was stored on my server. And now this image url is what I use

59
00:04:55,050 --> 00:04:56,270
here as an image

60
00:04:56,270 --> 00:04:58,760
url of course instead of my dummy data.

61
00:04:58,770 --> 00:05:03,030
Now we should be able to extract files and really store them.

62
00:05:03,150 --> 00:05:04,590
Let me now run this

63
00:05:04,650 --> 00:05:09,190
but of course now we also need to tweak our frontend to be able to make that work

64
00:05:09,410 --> 00:05:14,820
and I didn't do this in advance because there is something special which I want you to know. In the react

65
00:05:14,820 --> 00:05:15,190
code,

66
00:05:15,210 --> 00:05:24,480
so on the frontend, go to that feed.js file in pages feed and there, let's go to the finish edit

67
00:05:24,480 --> 00:05:27,000
handler. There

68
00:05:27,020 --> 00:05:33,710
we're setting up everything we need to send a request to the backend to create a new post and right

69
00:05:33,710 --> 00:05:36,480
now, we're doing this with json data.

70
00:05:36,800 --> 00:05:46,100
Now we won't use json data anymore because json data is only text, so only data that can be represented

71
00:05:46,130 --> 00:05:53,840
as a text which a file can't be or not easily, it will be very big quickly and very big files are a

72
00:05:53,840 --> 00:06:03,350
huge issue or impossible to upload like this. So we can't use json for data where we have both a file

73
00:06:03,590 --> 00:06:05,660
and normal text data,

74
00:06:05,660 --> 00:06:08,420
instead we'll again use form data.

75
00:06:08,420 --> 00:06:15,050
Now we did use form data automatically when earlier in the course where we had a traditional app with

76
00:06:15,050 --> 00:06:22,020
rendered views, when we used a form with this multipart form ank type which we added to the form html

77
00:06:22,030 --> 00:06:23,080
element

78
00:06:23,090 --> 00:06:30,140
if you remember. So this form data is what we'll also use here but we'll not use anything to any form

79
00:06:30,170 --> 00:06:33,220
element, we'll do it all in javascript instead.

80
00:06:33,230 --> 00:06:40,520
Here where I have this marker, this comment, we can create a new form data object with a built-in object

81
00:06:40,610 --> 00:06:44,950
that browser side javascript offers, the form data object.

82
00:06:44,960 --> 00:06:50,000
This now allows us to append data to that object,

83
00:06:50,060 --> 00:06:56,480
for example the title, first argument to append is the name of the field, second argument is the actual

84
00:06:56,480 --> 00:06:57,010
data.

85
00:06:57,110 --> 00:07:03,160
So here we'll have post data.title, exactly what we passed to the json data before.

86
00:07:03,230 --> 00:07:05,710
Of course we don't just append the title,

87
00:07:05,720 --> 00:07:08,630
we also append the content,

88
00:07:08,660 --> 00:07:10,470
so let's append that

89
00:07:10,820 --> 00:07:16,890
and now we also want to append an image because we can append files as well.

90
00:07:16,910 --> 00:07:21,830
Now this should be named image because we'll be looking for this field on our rest API

91
00:07:22,030 --> 00:07:28,130
and now here, I can reach out to post data image because that is where I will get my image in my frontend

92
00:07:28,130 --> 00:07:31,070
code. With these three fields,

93
00:07:31,070 --> 00:07:38,450
I got form data prepared that now has mixed content, text and a file and now I want to use that

94
00:07:38,450 --> 00:07:41,660
form data as a body for my request.

95
00:07:41,660 --> 00:07:46,940
We should not set the header to application json anymore because that would be incorrect and would

96
00:07:46,940 --> 00:07:51,770
break our app because we would try to parse it incorrectly on the server side,

97
00:07:51,840 --> 00:07:55,310
instead the form data will automatically set the headers,

98
00:07:55,310 --> 00:07:56,990
that is kind of convenient.

99
00:07:57,020 --> 00:08:04,540
All we need to do is we need to set form data as our body and the rest will be done for us.

100
00:08:04,550 --> 00:08:08,480
If we now save that and we create a new post,

101
00:08:08,480 --> 00:08:16,170
let me create a post here, a duck and choose that lovely duck image again,

102
00:08:17,640 --> 00:08:21,600
this is a duck and click accept.

103
00:08:21,840 --> 00:08:23,750
Now this was pretty quick,

104
00:08:23,880 --> 00:08:30,390
if I now click view here, I see my duck here which is looking good and on the server side,

105
00:08:30,480 --> 00:08:36,260
I also see this image which was generated, which has a time stamp and this is the uploaded image,

106
00:08:36,390 --> 00:08:44,030
I got no error here so this is all looking good. So uploading files also works, as you saw on the server

107
00:08:44,030 --> 00:08:44,490
side

108
00:08:44,550 --> 00:08:47,460
it has exactly the same logic, on the client side

109
00:08:47,460 --> 00:08:53,190
things need to change but of course this is a node course, so it depends on which client you are using, how you need

110
00:08:53,190 --> 00:08:54,050
to adjust your code

111
00:08:54,060 --> 00:08:54,350
there.
