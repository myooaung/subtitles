WEBVTT
1
00:00:02.200 --> 00:00:04.020
So we've worked in the user experience,

2
00:00:04.030 --> 00:00:08.800
now let's also work on the user experience of logging in because right now if I login,

3
00:00:08.820 --> 00:00:15.820
well I don't get any highlights here and if I do login like this and my password has to be valid, then

4
00:00:15.820 --> 00:00:17.230
my old data is lost.

5
00:00:17.230 --> 00:00:19.650
Now of course this is a great challenge for you

6
00:00:19.660 --> 00:00:25.030
so feel free to pause the video and try this on your own, you have to basically do what we did before

7
00:00:25.600 --> 00:00:28.780
though there is a little extra twist which I'll also show you of course.

8
00:00:28.780 --> 00:00:30.430
So here's your chance to pause the video,

9
00:00:30.430 --> 00:00:35.700
we'll do it together thereafter. Were you successful?

10
00:00:35.700 --> 00:00:39.930
Now let's try this together and we start in the auth controller

11
00:00:39.990 --> 00:00:48.660
but now in post login of course because that is, whoops, up there where we do gather validation results for the

12
00:00:48.660 --> 00:00:50.430
login screen.

13
00:00:50.430 --> 00:00:56.520
Now if I render this response with this error code which you don't have to set as you saw but which is a

14
00:00:56.520 --> 00:01:01.210
good practice to set to be very clear about what went wrong,

15
00:01:01.320 --> 00:01:07.140
if you do all that, then of course you can also pass some old input on this route here.

16
00:01:07.230 --> 00:01:12.940
So old input here would contain the e-mail which we extract up here, there

17
00:01:13.170 --> 00:01:19.560
and of course the password which we extract and pass that in a keys named email and password

18
00:01:19.560 --> 00:01:20.590
back to the view,

19
00:01:23.370 --> 00:01:31.810
you can also set your validation errors if you want and set that to errors array, like this

20
00:01:31.810 --> 00:01:38.230
basically as we did it for the sign up route. There's just one difference,

21
00:01:38.240 --> 00:01:43.850
we also have some errors that stem from us entering an invalid e-mail or password,

22
00:01:43.850 --> 00:01:49.730
so basically when we try to log a user in for which we don't have an entry in the database or where the password does

23
00:01:49.730 --> 00:01:50.720
not match.

24
00:01:51.070 --> 00:01:57.470
Now in such cases since I don't use my validation logic here and since I redirect, to make sure that

25
00:01:57.500 --> 00:02:06.230
we treat this in a uniform way, we should also return our rendering here because in the end we have an

26
00:02:06.230 --> 00:02:07.980
invalid input here as well,

27
00:02:09.890 --> 00:02:16.130
the error message then just is this error message and hence we don't need to flash it anymore so we

28
00:02:16.130 --> 00:02:22.480
can get rid of that flashing. The old input is definitely something we want to keep here as well

29
00:02:22.730 --> 00:02:24.580
and validation errors,

30
00:02:24.920 --> 00:02:32.540
well there we have to add some objects with param and that in this case it could be param email and

31
00:02:32.540 --> 00:02:38.150
param password if you want to make sure you don't show what exactly led to the error

32
00:02:38.330 --> 00:02:42.920
but of course you could also just leave that out and kind of only give out that message,

33
00:02:42.920 --> 00:02:48.910
keep the old values but don't mark anything as red, simply do not give away what exactly failed

34
00:02:48.950 --> 00:02:50.140
if you wanted to do that.

35
00:02:50.360 --> 00:02:52.040
So here I'll just return an error message

36
00:02:52.070 --> 00:02:53.200
and the old input

37
00:02:53.480 --> 00:03:02.750
and now I will copy that again and down there where I also redirect with my error message,

38
00:03:02.750 --> 00:03:05.440
well I basically do it in the same way as up here

39
00:03:05.540 --> 00:03:12.050
and yes you could refactor this in some way. But now with that, if we save that we just have to work

40
00:03:12.050 --> 00:03:18.170
a little bit on the login screen and on the login screen, we of course want to pre-populate these fields

41
00:03:18.170 --> 00:03:19.950
with their old values again and

42
00:03:20.190 --> 00:03:26.000
we do this as you saw with the help of ejs by using old input email here

43
00:03:29.000 --> 00:03:35.060
and then the same for the password, here old email password.

44
00:03:35.090 --> 00:03:38.660
So these two fields, setting the value attribute on these two inputs,

45
00:03:38.660 --> 00:03:43.390
that is what we need to do here to return this old or use this old data

46
00:03:43.610 --> 00:03:47.360
and in the controller we just have to make sure that we set this old data.

47
00:03:47.480 --> 00:03:52.340
We also need to make sure that for the first time we load this with get login,

48
00:03:52.340 --> 00:03:53.390
we also set

49
00:03:57.110 --> 00:03:59.830
the old input,

50
00:03:59.920 --> 00:04:09.180
in this case here to an object where the email is an empty string and the password is an empty string

51
00:04:10.740 --> 00:04:17.790
and I'll set validation errors here to an empty array, so that we don't get an error regarding this not

52
00:04:17.790 --> 00:04:22.290
being found when it's first rendered. And now if I reload this page or

53
00:04:22.500 --> 00:04:25.310
if I go to login page again, this works

54
00:04:25.380 --> 00:04:31.710
and now if I try to login like this, I get an error but the old data is kept

55
00:04:31.710 --> 00:04:39.090
and now if I enter a valid password but one which is invalid, then you see we also keep the old values.

56
00:04:39.090 --> 00:04:45.920
Now we can also add the red borders if we want to by reusing that code from signup.ejs, there

57
00:04:45.960 --> 00:04:51.780
I use that code for setting a css class and I do the same on the login.ejs page.

58
00:04:51.780 --> 00:04:58.510
So there let me split all these fields up and then add the class here,

59
00:04:58.530 --> 00:05:03.210
look for email in this case since I'm on the e-mail input here

60
00:05:04.820 --> 00:05:08.280
and of course let's do the same for the password down there.

61
00:05:08.450 --> 00:05:13.490
Let's split that, add the class and here password is actually correct already.

62
00:05:14.370 --> 00:05:20.640
So now with that, one last check. If I do enter just invalid credentials in the sense of no user is

63
00:05:20.640 --> 00:05:23.600
found for this, then nothing is marked as red

64
00:05:23.760 --> 00:05:27.060
but if I enter something invalid like this where the password is too short,

65
00:05:27.180 --> 00:05:31.480
well then I do give it that red border and this is the setup I'm using here.

66
00:05:31.560 --> 00:05:34.150
Obviously you can adjust this to your requirements.
