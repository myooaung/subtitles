WEBVTT
1
00:00:02.640 --> 00:00:04.500
Per risolvere quel problema ci siamo.

2
00:00:04.520 --> 00:00:08.660
E abbiamo una dipendenza esterna con qualche sforzo.

3
00:00:08.700 --> 00:00:17.880
Bene, per risolvere il problema possiamo usare segni o passaggi, il che significa che sostanzialmente sostituiamo questo metodo molto fine

4
00:00:18.150 --> 00:00:20.530
con un metodo più semplice.

5
00:00:20.540 --> 00:00:23.240
Ora come possiamo farlo.

6
00:00:23.240 --> 00:00:32.930
Bene prima di tutto importiamo qui il JWT richiedendo il gettone di Jason Webb e quello che possiamo fare ora

7
00:00:33.350 --> 00:00:43.620
è qui, possiamo ovviamente chiamare JWT verify e set fa uguale a una nuova funzione che restituisce semplicemente un oggetto in cui

8
00:00:44.370 --> 00:00:49.340
abbiamo quell'utente I. D. campo che è ABC per esempio.

9
00:00:49.350 --> 00:00:55.340
Quindi, quello che stiamo facendo ora è la sovrascrittura del vero metodo di verifica che questo pacchetto ha.

10
00:00:55.560 --> 00:00:57.100
Lo stiamo sovrascrivendo.

11
00:00:57.090 --> 00:01:00.840
E il modo in cui le importazioni di moduli funzionano in No.

12
00:01:00.960 --> 00:01:06.060
Se lo sovrascriviamo, questo sarà il caso nel middleware al momento dell'esecuzione perché abbiamo un unico

13
00:01:06.060 --> 00:01:06.840
pacchetto globale.

14
00:01:06.840 --> 00:01:08.520
Quindi per dire che viene usato qui.

15
00:01:08.520 --> 00:01:11.070
Quindi sostituiamo la nostra funzione.

16
00:01:11.070 --> 00:01:17.530
Ora se eseguo il test NPM, la nostra funzione viene eseguita e restituirà un utente I. D. in quell'oggetto che ci dà

17
00:01:17.530 --> 00:01:20.860
e quindi prima di tutto non si commette un errore.

18
00:01:20.910 --> 00:01:23.910
E ci dà anche un modo per tirare fuori il nostro utente I. D ..

19
00:01:24.540 --> 00:01:26.280
E così ora ho eseguito i miei test.

20
00:01:26.340 --> 00:01:27.700
Questo fallirà ancora.

21
00:01:27.720 --> 00:01:33.990
Ma ora fallisce perché ci aspettavamo di avere un utente di proprietà I. D. ma in realtà non lo facciamo.

22
00:01:33.990 --> 00:01:37.530
Abbiamo solo un oggetto con un metodo get perché abbiamo solo questo oggetto.

23
00:01:37.530 --> 00:01:41.800
Non abbiamo un utente I. D. e ora possiamo esaminare il nostro codice e vedere Oh sì.

24
00:01:41.820 --> 00:01:47.490
Forse dovremmo aggiungere nuovamente questo codice per assicurarci di farlo archiviato all'utente I. D. nell'oggetto richiesta.

25
00:01:47.580 --> 00:01:55.110
E ora, se eseguiamo il test NPM, abbiamo quattro test che passano e questo perché abbiamo effettivamente sostituito il

26
00:01:55.140 --> 00:02:01.050
metodo di verifica integrato e questo è un modo comune di gestire questi casi.

27
00:02:01.170 --> 00:02:06.840
Tuttavia, invece di eseguire manualmente l'override di Id in questo modo, c'è un modo più elegante perché

28
00:02:06.840 --> 00:02:16.250
questo ha un grosso svantaggio che il downside fa questo approccio a metà diventa evidente se io test di cactus hai appena scritto e l'ho messo di fronte

29
00:02:16.250 --> 00:02:22.130
al test che avevamo prima che questo è il test in cui dovrebbe fluire un errore se abbiamo

30
00:02:22.130 --> 00:02:27.560
un token non valido, per favore noti dead prima che tutti i test siano passati.

31
00:02:27.560 --> 00:02:31.300
Quindi abbiamo ricevuto un errore per un eroe di token non valido in assoluto.

32
00:02:31.300 --> 00:02:35.890
Stiamo quindi sovrascrivendo il punto in cui la mosca non genera mai un errore.

33
00:02:35.900 --> 00:02:42.200
Così ora, dopo aver cambiato l'ordine dei test, ho effettivamente un problema con il mio ultimo test perché

34
00:02:42.200 --> 00:02:44.390
questo non genera più un errore.

35
00:02:44.390 --> 00:02:45.350
Perché.

36
00:02:45.380 --> 00:02:54.140
Perché in questo test ho sostituito globalmente il metodo di verifica. Papà ovviamente non è l'ideale.

37
00:02:54.140 --> 00:02:59.930
È positivo che questo test abbia esito positivo, ma ovviamente significa che se ho

38
00:02:59.930 --> 00:03:06.170
altri test che richiedono il metodo di verifica originale, ora non ha alcuna possibilità di ottenerlo

39
00:03:06.170 --> 00:03:13.640
perché lo abbiamo sostituito qui e quindi invece di arrestare manualmente o sfruttare le funzionalità e sostituirle è bene

40
00:03:13.940 --> 00:03:23.330
usare pacchetti che ti permettano anche di ripristinare la configurazione originale per l'installazione di quel pacchetto extra che ho già menzionato e con il

41
00:03:23.390 --> 00:03:31.070
dash di installazione di pip salvare la morte e il suo nome è sign and sign e c'è un pacchetto

42
00:03:31.070 --> 00:03:38.030
che ci permette di creare un cosiddetto stop che sostituisce la funzione originale in cui è possibile ripristinare

43
00:03:38.030 --> 00:03:45.860
facilmente la funzione originale, anche se per utilizzarla è sufficiente importare il segno richiedendo di accedere qui nella parte superiore

44
00:03:45.980 --> 00:03:52.010
del nostro file di test dove è necessario e quindi nel posto dove voglio sostituire

45
00:03:52.010 --> 00:04:01.670
verificare invece di rimpiazzarlo manualmente in questo modo chiamo segno e stub e passo nell'oggetto dove ho il metodo che voglio sostituire che è JWT

46
00:04:01.670 --> 00:04:07.850
e ovviamente spento il simbolo e i documenti sono il posto giusto per imparare tutto su

47
00:04:07.850 --> 00:04:12.480
questo pacchetto e su tutti i diversi modi di usarlo.

48
00:04:12.500 --> 00:04:18.650
Quindi qui per fermare passo l'oggetto che ha il metodo che voglio sostituire e poi come stringa

49
00:04:18.650 --> 00:04:20.730
il nome del metodo giusto.

50
00:04:20.760 --> 00:04:20.950
OK.

51
00:04:20.970 --> 00:04:22.380
Quindi ho due argomenti qui.

52
00:04:22.380 --> 00:04:27.140
JWT è l'oggetto che ha il metodo di verifica è il metodo effettivo.

53
00:04:27.330 --> 00:04:29.210
Ora firmare e lo sostituirà.

54
00:04:29.220 --> 00:04:34.500
E per impostazione predefinita lo sostituisce con una funzione vuota che non fa nulla di speciale anche se non

55
00:04:34.500 --> 00:04:35.750
è del tutto vero.

56
00:04:35.760 --> 00:04:39.990
In realtà farà con cose come registrare le chiamate di funzione e così via.

57
00:04:39.990 --> 00:04:46.880
Quindi papà puoi anche provare per cose come ha questa funzione essere chiamata, non importa ciò che esegue.

58
00:04:47.030 --> 00:04:48.920
Quindi ora come un passo successivo.

59
00:04:48.920 --> 00:04:57.000
Con questo passo possiamo effettivamente raggiungere Che ti dice di verificare quale ora è un passo e lì possiamo

60
00:04:57.000 --> 00:05:04.520
chiamare i ritorni e questo è ora un metodo che è stato aggiunto con la firma.

61
00:05:04.550 --> 00:05:09.780
Quindi ora verifica è e vedi alla fine un oggetto che potresti dire che non può essere eseguito.

62
00:05:09.900 --> 00:05:15.260
Ma anche questo può essere configurato e il reso ci consente di configurare ciò che questa funzione dovrebbe restituire.

63
00:05:15.320 --> 00:05:23.380
E qui dovrebbe restituire un oggetto javascript con un utente I. D. chiave che potrebbe essere un

64
00:05:23.380 --> 00:05:30.250
b c ora ogni volta che chiamiamo la verifica JWT, in realtà chiameremo quel passo e

65
00:05:30.250 --> 00:05:40.720
il bello è dopo aver controllato le nostre aspettative, ora possiamo chiamare il ripristino di verifica JWT e questo ora ripristinerà la funzione originale.

66
00:05:40.770 --> 00:05:45.390
Questa è la grande differenza per il nostro stesso stub dove abbiamo sostituito come da soli.

67
00:05:45.540 --> 00:05:52.980
Perché ora se eseguo il test NPM di nuovo tutti i test passano di nuovo perché ho effettivamente ripristinato la funzione originale

68
00:05:53.220 --> 00:05:57.110
dopo questo test in cui avevo bisogno di un comportamento diverso.

69
00:05:57.150 --> 00:06:08.780
Ora, solo per completezza, ovviamente, ora possiamo anche testare se la richiesta ha un utente di proprietà I. D. con un certo valore che è un secondo argomento

70
00:06:08.780 --> 00:06:13.970
facoltativo, è possibile passare a quella mappa di proprietà a quel metodo di

71
00:06:13.970 --> 00:06:14.720
proprietà.

72
00:06:14.720 --> 00:06:16.600
Quindi vogliamo essere sicuri che i valori.

73
00:06:16.630 --> 00:06:17.430
ABC.

74
00:06:17.510 --> 00:06:21.260
Ovviamente è una specie di test ridondante perché qui abbiamo definito il valore.

75
00:06:21.290 --> 00:06:28.270
Quindi ovviamente è quel valore ma potrebbe escludere che per esempio abbiamo manipolato quest'anno e aggiunto

76
00:06:28.280 --> 00:06:32.170
l'utente I. D. qui di fronte a questo per concatenare una stringa.

77
00:06:32.210 --> 00:06:37.670
Perché ora ciò fallirebbe e rileveremmo bug come questo, e riuscirei solo se mi liberassi di questo e

78
00:06:37.670 --> 00:06:40.850
ripristinassi davvero l'utente grezzo I. D ..

79
00:06:40.850 --> 00:06:42.470
Ora tutto passa.

80
00:06:42.470 --> 00:06:43.790
Quindi questo è qualcosa.

81
00:06:43.790 --> 00:06:50.920
E come ho detto questo passaggio registra anche cose come chiamate di funzione.

82
00:06:50.960 --> 00:06:53.490
Quindi se vuoi scoprire se questo è stato chiamato.

83
00:06:53.490 --> 00:07:06.260
Quindi, se il metodo di verifica è stato chiamato You Can Call, si supponga che JWT verifichi che la coda chiamata sia vera, ad esempio.

84
00:07:06.300 --> 00:07:14.690
Ora se lo esegui, succede perché il metodo di verifica è stato chiamato nel nostro middleware off

85
00:07:14.690 --> 00:07:23.750
e se ora, ad esempio, commentiamo questo e abbiamo detto token decodificato solo a un oggetto in cui abbiamo

86
00:07:23.750 --> 00:07:28.340
un utente I. D. beh, allora i nostri test medi normalmente continuerebbero comunque.

87
00:07:28.340 --> 00:07:32.760
Ma in realtà riceviamo un errore qui perché ci aspettiamo che il falso sia vero.

88
00:07:32.780 --> 00:07:40.400
Bene, ci aspettiamo che, poiché ora questo controllo qui se la verifica è stata chiamata ci dà false, ma ci aspettiamo

89
00:07:40.400 --> 00:07:41.590
che sia vero.

90
00:07:41.690 --> 00:07:43.400
Ma in effetti non è mai stato chiamato.

91
00:07:43.400 --> 00:07:45.740
Quindi ora potremmo correggere un simile errore qui.

92
00:07:45.890 --> 00:07:50.930
Ovviamente è stato un esempio inventato ma è facile immaginare scenari in cui si ha codice in cui

93
00:07:50.930 --> 00:07:56.840
si modifica qualcosa e improvvisamente si ha un controllo extra che ha un bug minuscolo e un metodo che dovrebbe essere

94
00:07:56.840 --> 00:08:01.010
chiamato non viene più chiamato perché non farlo in quel caso se il controllo.

95
00:08:01.010 --> 00:08:03.080
Beh, questo ti permette.

96
00:08:03.080 --> 00:08:07.190
Quindi quest'anno consente di rilevare casi del genere.

97
00:08:07.250 --> 00:08:13.790
Ecco come si utilizzano i passaggi è possibile sostituire metodi incorporati con metodi vuoti nel caso in cui non si cura del

98
00:08:13.790 --> 00:08:18.010
valore restituito in ciò che fanno o si definiscono ciò che devono restituire.

99
00:08:18.080 --> 00:08:22.760
E puoi quindi scoprire se sono stati chiamati puoi usare invece il valore di ritorno che hai impostato.

100
00:08:22.760 --> 00:08:30.500
Quindi hai un modo molto potente di sostituire alcuni metodi esterni e ripristinare ancora tutto una volta che hai finito in

101
00:08:30.500 --> 00:08:36.500
modo che i nostri test che potrebbero aver bisogno della funzionalità originale funzionino ancora correttamente.
