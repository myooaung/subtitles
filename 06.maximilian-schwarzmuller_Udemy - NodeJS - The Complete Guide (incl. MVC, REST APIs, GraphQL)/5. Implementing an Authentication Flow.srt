1
00:00:02,120 --> 00:00:07,670
So here I got a very simple sign up form which is a pretty typical sign up form that though, you have

2
00:00:07,670 --> 00:00:08,660
to enter an email,

3
00:00:08,690 --> 00:00:12,680
you have to enter a password, confirm the password and click sign up.

4
00:00:12,680 --> 00:00:19,970
Now in that sign up view, I changed my button label and there I also want to point at the sign up route

5
00:00:20,080 --> 00:00:27,560
in the action now, /signup, send a post request to reach that sign up, the post sign up route here which

6
00:00:27,650 --> 00:00:31,650
ultimately triggers the post sign up action.

7
00:00:31,720 --> 00:00:37,910
Now in this action, we want to store a new user in the database,

8
00:00:37,910 --> 00:00:40,590
now which steps does this include?

9
00:00:41,060 --> 00:00:45,330
Well obviously we want to extract the information from the incoming request,

10
00:00:45,380 --> 00:00:53,440
we want to read the email from the request body email field and make sure you check your view,

11
00:00:53,510 --> 00:00:59,380
how these inputs are named because you retrieve the values on request body by these names,

12
00:00:59,420 --> 00:01:06,750
so email, password and confirm password in my case, so request body email should work, here

13
00:01:06,800 --> 00:01:13,290
I will have request body password to retrieve the password and then I will also retrieve my confirm

14
00:01:13,290 --> 00:01:16,920
password here from confirm password,

15
00:01:16,920 --> 00:01:20,040
so these are the three values that should reach this route.

16
00:01:20,500 --> 00:01:25,410
Now typically what you would do first is we would validate the user input,

17
00:01:25,410 --> 00:01:32,130
so for example we would check is this a valid email address and do password and confirm password match

18
00:01:32,130 --> 00:01:34,010
and we will do this in this course too

19
00:01:34,080 --> 00:01:39,390
but actually I will have a complete module where I dive into how to validate user input because you

20
00:01:39,390 --> 00:01:43,980
can of course do a lot of cool things when it comes to that and therefore I dedicate a whole module

21
00:01:43,980 --> 00:01:44,580
to that.

22
00:01:44,580 --> 00:01:50,130
For now we'll ignore this and that means for now you of course don't have to enter a valid email and

23
00:01:50,130 --> 00:01:51,900
you don't have to enter a valid password,

24
00:01:51,930 --> 00:01:53,320
you don't have to confirm it either

25
00:01:53,340 --> 00:01:59,450
but of course you should do all that to have a realistic testing environment, we'll add validation later.

26
00:01:59,550 --> 00:02:06,540
We still need the values here, at least the first two because the next step is that we create a new user

27
00:02:07,140 --> 00:02:11,700
or actually there is one step we want to do before we create a new user,

28
00:02:11,700 --> 00:02:18,400
do you know which step it could be? Well we want to find out if a user with that e-mail already exists

29
00:02:18,640 --> 00:02:23,640
because there should not be any duplicate e-mails in our database. For that

30
00:02:23,830 --> 00:02:27,840
we actually can do two things, when using mongodb

31
00:02:28,000 --> 00:02:36,850
you could create an index in the mongo database on your email field and give that index the unique property.

32
00:02:36,850 --> 00:02:40,710
Now this is something you can do if you know how mongodb works,

33
00:02:40,720 --> 00:02:45,270
if you get a little bit more experience with it which you can get with my mongodb course, there

34
00:02:45,280 --> 00:02:50,400
I do show this scenario for example but this is only one option of achieving this.

35
00:02:50,700 --> 00:02:55,070
An alternative is that you simply try to find a user with that e-mail,

36
00:02:55,090 --> 00:02:59,960
so for that we'll use our user model which is of course a mongoose user model

37
00:03:00,190 --> 00:03:07,060
and there we can find a user, we can find one user because we already know we don't want to create a user

38
00:03:07,060 --> 00:03:07,730
with that e-mail

39
00:03:07,750 --> 00:03:14,270
if we find only one user who already has that e-mail and we find that one user by passing a filter with these

40
00:03:14,290 --> 00:03:18,890
curly braces and we'll look for the email field in our collection,

41
00:03:18,910 --> 00:03:24,670
so in the documents in our collection and see if we find a user where the email field holds a value

42
00:03:24,910 --> 00:03:27,430
equal to the email we're extracting here.

43
00:03:27,430 --> 00:03:30,210
So right side of the colon is the email we're extracting,

44
00:03:30,210 --> 00:03:33,470
left side is the field we're looking for in the database.

45
00:03:34,830 --> 00:03:40,610
Now here we get back where we can call then to find out if this worked,

46
00:03:40,740 --> 00:03:50,610
we also might get an error which I'll simply log here then and in then, I will get my user object, so my

47
00:03:50,760 --> 00:03:54,360
user document you could say, you can name this however you want.

48
00:03:54,360 --> 00:03:58,080
Now we know that if user doc exists,

49
00:03:58,140 --> 00:04:02,220
so if this is not undefined, then we do have a user

50
00:04:02,280 --> 00:04:07,780
and if we do have a user then I certainly don't want to create a new one with the same e-mail.

51
00:04:07,830 --> 00:04:16,680
So if this exists, I will actually return a response and I will redirect back to /signup to inform

52
00:04:17,130 --> 00:04:22,950
the user that this did not work, right now not much informing is going on as you can tell, we just redirect

53
00:04:22,950 --> 00:04:25,170
without showing an error message,

54
00:04:25,170 --> 00:04:29,700
this is also something which I'll show you how to better solve this,

55
00:04:29,730 --> 00:04:31,680
how to show error messages to the user,

56
00:04:31,680 --> 00:04:36,370
for now we'll just redirect back to the sign up page and we'll not create a new user.

57
00:04:36,870 --> 00:04:42,570
If we make it past this check, we know that no user with that e-mail exists yet and therefore we can

58
00:04:42,570 --> 00:04:44,060
create a new one

59
00:04:44,370 --> 00:04:51,690
So what we can do here then is we can create a new user object with new user and we configure our new

60
00:04:51,690 --> 00:04:54,790
user and there, we store the email,

61
00:04:54,950 --> 00:05:01,410
the e-mail we're retrieving here and we'll store the password, like this for now.

62
00:05:01,410 --> 00:05:08,070
One important thing, in the user model there, right now I have a name and an e-mail and no password.

63
00:05:08,070 --> 00:05:10,280
So I will change the user model,

64
00:05:10,290 --> 00:05:11,700
I don't really want to store a name,

65
00:05:11,700 --> 00:05:13,620
you could do that but I'll not do it here

66
00:05:13,770 --> 00:05:20,220
but instead I will store a password for the user which will be of type string and which will absolutely

67
00:05:20,220 --> 00:05:23,520
be required like this,

68
00:05:23,580 --> 00:05:26,780
so my user model changed slightly here.

69
00:05:26,940 --> 00:05:33,450
Now with that change in the user model, if we go back to our post signup action, I can create a user

70
00:05:33,450 --> 00:05:34,440
like this,

71
00:05:34,440 --> 00:05:40,470
we can also add a cart here, the cart by default will be an object where items is equal to an empty array

72
00:05:40,470 --> 00:05:41,380
like this

73
00:05:41,520 --> 00:05:46,810
and this is now a valid new user which we can save in database by calling save as you learned

74
00:05:46,930 --> 00:05:52,410
and then I can return this so that we can chain another then block here which will be called once

75
00:05:52,440 --> 00:05:54,230
this save action completed,

76
00:05:54,240 --> 00:05:56,160
so this function here will be executed

77
00:05:56,190 --> 00:06:02,880
once saving is done. And here we can then redirect to let's say the starting page because here we then

78
00:06:02,880 --> 00:06:05,840
know the user did sign up or to be precise,

79
00:06:05,880 --> 00:06:09,990
let's redirect to the login page because after signing up, you need to login.

80
00:06:10,140 --> 00:06:16,080
So this should now be an authentication flow that does check for the existence of a user and then create

81
00:06:16,140 --> 00:06:17,820
a new user.

82
00:06:17,820 --> 00:06:24,870
I'll quickly also go to my app.js file and at the very bottom here where I always create a new

83
00:06:24,870 --> 00:06:30,780
user if we don't have one yet, I will get rid of that code because now we have a real user creation flow

84
00:06:30,840 --> 00:06:33,360
so we don't need that dummy user anymore

85
00:06:33,960 --> 00:06:41,120
and I will also head over to compass which I'll start to connect to my mongo database again and in the connected

86
00:06:41,120 --> 00:06:45,610
database server if we have a look at the shop database, in users

87
00:06:45,810 --> 00:06:48,880
we obviously have one user, the dummy user we used before,

88
00:06:49,080 --> 00:06:50,950
now let's delete that user now,

89
00:06:50,960 --> 00:06:52,700
we don't need it anymore.

90
00:06:52,920 --> 00:07:00,090
And with all these changes and all these files saved, let's reload the sign up page and now let's try

91
00:07:00,090 --> 00:07:03,680
creating a new user with a dummy e-mail, dummy password,

92
00:07:03,690 --> 00:07:07,420
you don't really need to enter a confirm password because we're not checking this anyways

93
00:07:07,530 --> 00:07:09,110
and click sign up.

94
00:07:09,150 --> 00:07:13,450
Now this is looking good because I'm on the login page so I was redirected,

95
00:07:13,830 --> 00:07:16,320
I also have no server error,

96
00:07:16,560 --> 00:07:24,020
if I now reload my users collection in mongodb, in compass, I also see this is a user with the credentials

97
00:07:24,060 --> 00:07:24,940
I add.

98
00:07:25,080 --> 00:07:29,900
So we did add a new user but we have a huge problem with that user,

99
00:07:29,970 --> 00:07:31,050
can you identify it?

100
00:07:31,200 --> 00:07:32,630
We'll fix it in the next lecture.
