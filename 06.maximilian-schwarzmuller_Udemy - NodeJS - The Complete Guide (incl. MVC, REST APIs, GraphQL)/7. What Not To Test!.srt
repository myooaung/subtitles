1
00:00:02,190 --> 00:00:08,520
Prima di passare effettivamente ai controller, ora abbiamo qualcosa di più complesso nel nostro

2
00:00:08,520 --> 00:00:09,240
middleware.

3
00:00:09,870 --> 00:00:15,120
Finora abbiamo verificato se abbiamo un'intestazione valida e che riceviamo un errore o se non lo facciamo.

4
00:00:15,120 --> 00:00:19,380
Quindi se non abbiamo alcun header o se non è espandibile è tutto bello.

5
00:00:19,380 --> 00:00:23,240
Ma per quanto riguarda la nostra verifica token attuale ora.

6
00:00:23,400 --> 00:00:32,600
Come possiamo testare questo come possiamo assicurarci che questo non funzioni per token errati. Bene, ci sono un paio di

7
00:00:32,600 --> 00:00:34,570
cose importanti da considerare.

8
00:00:34,610 --> 00:00:38,420
Prima di tutto ora questo è davvero qualcosa che devi memorizzare.

9
00:00:38,420 --> 00:00:43,340
Non si dovrebbe verificare se la funzione di verifica funzioni correttamente.

10
00:00:43,340 --> 00:00:51,470
Non dovresti verificare se questo veramente verifica correttamente un token, quindi se questo veramente fallisce sono stati token non corretti

11
00:00:51,830 --> 00:00:55,650
che non sono stati creati con quel segreto.

12
00:00:55,670 --> 00:00:57,820
Perché non dovresti provare per quello.

13
00:00:58,010 --> 00:01:02,470
Perché questa non è una funzione o un metodo di tua proprietà.

14
00:01:02,480 --> 00:01:08,840
Questo proviene da un pacchetto di terze parti dal pacchetto token web di Jason ed è compito delle offerte

15
00:01:08,960 --> 00:01:13,130
del pacchetto testare il proprio codice e assicurarsi che funzioni correttamente.

16
00:01:13,130 --> 00:01:20,210
Quindi non vuoi un test di dipendenze esterne che non vuoi testare per verificare che funzioni correttamente o se

17
00:01:20,210 --> 00:01:21,360
ha dei bug.

18
00:01:21,380 --> 00:01:27,680
Certo che potrebbe avere ma non è il tuo lavoro testarlo come parte della tua applicazione se vuoi

19
00:01:27,680 --> 00:01:30,130
essere coinvolto nello sviluppo di questo pacchetto.

20
00:01:30,140 --> 00:01:35,130
Puoi assolutamente farlo in quel pacchetto ma non nella tua applicazione.

21
00:01:35,300 --> 00:01:38,960
Pertanto, non stiamo testando se la verifica funzioni correttamente.

22
00:01:38,990 --> 00:01:46,510
Vogliamo solo verificare se il nostro codice si comporta correttamente quando la verifica non riesce, ad esempio o quando ha esito positivo.

23
00:01:46,520 --> 00:01:52,610
Quindi, quando non torniamo indietro un oggetto che ha un utente I. D. per esempio che in realtà torniamo a destra torniamo

24
00:01:52,910 --> 00:01:55,310
decodificati Kogan con l'utente I. D ..

25
00:01:55,580 --> 00:01:58,520
Bene, otteniamo questo solo se questo non fallisce.

26
00:01:58,760 --> 00:02:02,910
Quindi non vogliamo testarlo, la verifica funziona correttamente.

27
00:02:02,930 --> 00:02:11,210
Vogliamo verificare se il nostro codice si comporta in modo corretto in attesa o che cosa verifica questo introduce un nuovo

28
00:02:11,210 --> 00:02:17,830
problema, sebbene verosimilmente provenga da un pacchetto di terze parti e quindi faccia il suo lavoro.

29
00:02:17,870 --> 00:02:22,840
E ora se vuoi testare se il nostro codice funziona correttamente è facile testare il fallimento.

30
00:02:22,850 --> 00:02:28,580
Possiamo facilmente passare un token che non è verificato da questo pacchetto perché in realtà non sappiamo quali token

31
00:02:28,580 --> 00:02:29,910
esso crea per noi.

32
00:02:29,930 --> 00:02:33,070
Potresti ricordare che i token sono queste corde super lunghe.

33
00:02:33,170 --> 00:02:34,670
Non possiamo indovinarli.

34
00:02:34,700 --> 00:02:40,110
Quindi qualsiasi cosa passeremo alla nostra funzione qui probabilmente fallirà qui nella fase di verifica.

35
00:02:40,110 --> 00:02:42,750
E in effetti iniziamo con un test del genere.

36
00:02:42,950 --> 00:02:50,770
Dovrebbe generare un errore o se il token non può essere verificato.

37
00:02:50,890 --> 00:03:00,790
Aggiungiamo qui la nostra definizione di funzione e ora creiamo un oggetto Richiesta fittizio per questo test.

38
00:03:00,790 --> 00:03:07,810
Qui ho il portatore e poi x y impostato su x y z come token che verrà effettivamente

39
00:03:07,810 --> 00:03:14,710
utilizzato e sicuramente sarà un token non corretto certamente non un token creato dal pacchetto JWT.

40
00:03:15,040 --> 00:03:25,540
E quindi ora se mi aspetto che il mio tutto il middleware con il mio oggetto di richiesta oggetto risposta vuoto entri nella

41
00:03:25,540 --> 00:03:26,980
prossima funzione vuota.

42
00:03:26,980 --> 00:03:35,020
Se mi aspetto che ciò avvenga, allora questo test dovrebbe assolutamente avere successo, dovrebbe passare perché questo genererebbe un errore e

43
00:03:35,020 --> 00:03:37,000
in effetti lo fa.

44
00:03:37,270 --> 00:03:39,880
Certo se volessimo testare il contrario.

45
00:03:39,880 --> 00:03:46,670
Quindi se aggiungiamo un altro test dove vogliamo verificare.

46
00:03:46,670 --> 00:03:56,670
Bene, se questo è un token valido quindi un token decodificato, quindi l'oggetto che ci restituisce dovrebbe avere un utente I. D ..

47
00:03:56,720 --> 00:04:08,820
Bene, se testiamo questo dovrebbe dare un utente I. D. dopo aver decodificato il token se vogliamo ricreare tale test

48
00:04:08,820 --> 00:04:14,950
e passiamo nel nostro token e speriamo che questo sia un token valido che certamente non è.

49
00:04:14,970 --> 00:04:18,220
Bene, allora potremmo scrivere la funzione che ci aspettiamo qui.

50
00:04:18,870 --> 00:04:25,350
E ora dobbiamo solo assicurarci che l'utente I. D. viene aggiunto alla richiesta qui a destra dell'oggetto

51
00:04:25,380 --> 00:04:26,910
di richiesta che passiamo.

52
00:04:26,940 --> 00:04:29,700
Quindi ora cambieremo il nostro codice un po '.

53
00:04:29,700 --> 00:04:31,860
Qui richiameremo manualmente il middleware.

54
00:04:31,860 --> 00:04:39,480
Ora il passaggio di una richiesta e di un oggetto risposta vuoto prossima funzione, ma lo chiamiamo come questa richiesta ora è la

55
00:04:39,480 --> 00:04:40,740
nostra richiesta fittizia.

56
00:04:40,950 --> 00:04:47,520
E ora, dopo aver eseguito questo middleware, ora ci aspettiamo che il nostro oggetto request abbia una nuova proprietà perché aggiungiamo una

57
00:04:47,640 --> 00:04:56,340
nuova proprietà nell'utente middleware I. D. proprietà e ci aspettiamo che l'utente di richiesta I. D. per essere uguale a

58
00:04:56,340 --> 00:05:00,220
un certo valore o ci aspettiamo che la coda di richieste.

59
00:05:00,270 --> 00:05:06,660
E questo è anche qualcosa su cui puoi provare per avere una proprietà che si chiama utente I. D ..

60
00:05:07,020 --> 00:05:07,230
Destra.

61
00:05:07,230 --> 00:05:12,240
Questo è qualcosa che potremmo aspettarci per un token valido perché se il token è

62
00:05:12,510 --> 00:05:19,680
valido se è verificato, passiamo oltre questo blocco catch, quindi controlla nuovamente se è veramente definito e sì, ci aspettiamo che sia

63
00:05:19,710 --> 00:05:26,010
definito e quindi ottieni l'utente I. D. dal token decodificato e lo memorizziamo nella

64
00:05:26,010 --> 00:05:33,640
richiesta in modo tale che mi aspetto che l'utente I. D. la proprietà di X per esistere sulla richiesta sembra valida.

65
00:05:33,900 --> 00:05:40,860
Ovviamente, come puoi già immaginare se ora eseguiamo i nostri test, avremo un test negativo e questo sarà

66
00:05:40,860 --> 00:05:42,860
ovviamente il nostro ultimo test.

67
00:05:43,020 --> 00:05:48,660
Dovrebbe dare all'utente I. D. dopo aver decodificato il token.

68
00:05:48,660 --> 00:05:52,400
Ma in realtà quello che otteniamo qui è semplicemente un errore.

69
00:05:52,500 --> 00:05:57,260
Otteniamo quell'errore perché il nostro token è malformato perché è troppo corto.

70
00:05:57,270 --> 00:06:05,450
Fondamentalmente non soddisfa i criteri del metodo di verifica JWT e quindi sta riempiendo un errore.

71
00:06:05,520 --> 00:06:09,090
Segnala un errore che il token non è corretto.

72
00:06:09,090 --> 00:06:10,690
Cosa possiamo fare in questi casi.

73
00:06:10,710 --> 00:06:16,140
Ovviamente non possiamo testare sempre se fallisce, ma tutti noi vogliamo testare il caso di successo perché forse

74
00:06:16,140 --> 00:06:20,620
abbiamo scenari nella nostra applicazione in cui non ha esito negativo con un errore.

75
00:06:20,730 --> 00:06:25,050
E ancora l'utente I. D. non viene memorizzato nella richiesta perché semplicemente non abbiamo

76
00:06:25,050 --> 00:06:25,650
quel codice qui.

77
00:06:25,740 --> 00:06:32,040
Quindi avremmo un bug nella nostra applicazione che vogliamo rilevare con i test e questo non genererebbe un errore

78
00:06:32,040 --> 00:06:33,710
in nessun punto qui.

79
00:06:33,810 --> 00:06:39,330
Sarebbe più tardi in un controller quando abbiamo cercato di capire che era pronto ma non avrebbe commesso un

80
00:06:39,750 --> 00:06:45,690
errore qui e comunque vogliamo rilevare questo errore già qui e offrono un test come questo sarebbe super importante perché qui

81
00:06:45,690 --> 00:06:51,960
testiamo se avere un utente I. D. memorizzato nell'oggetto richiesta dopo aver eseguito

82
00:06:51,960 --> 00:06:52,920
il middleware.

83
00:06:53,220 --> 00:07:01,170
Quindi, per scoprire che abbiamo bisogno di un modo per arrestare quel metodo di verifica anche se sappiamo che questo non è un

84
00:07:01,170 --> 00:07:04,310
token valido ma per questo test non ci interessa.

85
00:07:04,320 --> 00:07:09,040
Vogliamo testare uno scenario in cui abbiamo un diritto token valido.

86
00:07:09,060 --> 00:07:11,810
Non vogliamo verificare se la verifica funzioni correttamente.

87
00:07:11,820 --> 00:07:17,200
Sappiamo che questo normalmente non sarebbe un token valido ma questo non è importante per noi qui.

88
00:07:17,220 --> 00:07:19,040
Non ci interessa sapere se questo è valido.

89
00:07:19,080 --> 00:07:21,660
Sappiamo che la verifica funzionerà nell'app reale.

90
00:07:21,690 --> 00:07:27,060
Non abbiamo bisogno di verificare se è veramente fallito per un token casuale qui.

91
00:07:27,060 --> 00:07:32,360
Vogliamo che abbia successo per un token casuale perché vogliamo testare qualcosa di completamente diverso.

92
00:07:32,370 --> 00:07:37,740
Vogliamo verificare se la nostra app funziona correttamente con token validi, non importa se questo è davvero un token

93
00:07:37,740 --> 00:07:38,970
valido qui o no.

94
00:07:39,030 --> 00:07:44,580
Spero che questo sia chiaro perché è una parte importante del testing che pensi di testare

95
00:07:44,790 --> 00:07:50,400
in questo modo che stai bene a trovare i tuoi scenari e sovrascrivere determinate funzionalità per

96
00:07:50,400 --> 00:07:51,390
testare qualcos'altro.

97
00:07:51,390 --> 00:07:57,710
Quindi, come possiamo ora arrestare la verifica e assicurarci che ci fornisca semplicemente un oggetto con un utente I. D. in modo che possiamo trascinare l'utente

98
00:07:57,720 --> 00:08:00,150
I. D. da quell'oggetto
