1
00:00:02,250 --> 00:00:08,190
In our project as I mentioned in the previous lectures, we already got some views and we'll leave that

2
00:00:08,190 --> 00:00:09,930
exactly in the state it is.

3
00:00:09,930 --> 00:00:14,430
We've got that views folder with all our templates inside of them.

4
00:00:14,430 --> 00:00:22,140
Now what's missing is a folder for the controllers and the controllers themselves and for the models.

5
00:00:22,620 --> 00:00:30,030
Right now that is all mixed into our route files or into our route functions here, the way we route won't

6
00:00:30,030 --> 00:00:30,710
change,

7
00:00:30,720 --> 00:00:36,960
we use the router and we have such a middleware function but actually, the logic that is executed here

8
00:00:37,200 --> 00:00:43,230
that is the typical controller logic, we're interacting with our data even though that's just one line

9
00:00:43,230 --> 00:00:44,330
here but still

10
00:00:44,610 --> 00:00:50,510
and we're then returning a view and that's exactly this in-between logic that makes up a controller.

11
00:00:50,760 --> 00:00:56,840
So therefore you could of course say well we already got controllers, these two files hold our controller

12
00:00:56,850 --> 00:00:58,910
logic and you would be right

13
00:00:59,070 --> 00:01:05,070
but especially as our application grows if you put everything into your route files, this can quickly

14
00:01:05,070 --> 00:01:11,580
become a very big file and therefore separating this into separate files can be a good idea because

15
00:01:11,580 --> 00:01:16,320
you can then quickly see which routes you have and if you want to see the code which executes per route,

16
00:01:16,530 --> 00:01:20,690
you simply go into the respective controller file and function.

17
00:01:21,060 --> 00:01:24,590
So therefore let's create a new folder here and let's name it

18
00:01:24,660 --> 00:01:26,820
controllers, like this.

19
00:01:27,010 --> 00:01:33,270
Now in that controllers folder, I will create controllers for the functionalities I have.

20
00:01:33,270 --> 00:01:41,430
Now you can have a one to one mapping between your route file names and route file number and your controller

21
00:01:41,430 --> 00:01:44,400
files but you can also split this differently,

22
00:01:44,610 --> 00:01:50,060
maybe you want to group your routes by prefix, like here,

23
00:01:50,070 --> 00:01:52,200
these are all our admin routes

24
00:01:52,200 --> 00:01:56,760
but the thing you execute there might fit two different controllers.

25
00:01:56,760 --> 00:02:03,120
Let's say you have admin routes which allow you to change your admin user profile and products, you might

26
00:02:03,120 --> 00:02:09,210
have all these routes in the admin.js file in the routes folder but you do have two different controllers,

27
00:02:09,510 --> 00:02:14,330
the users controller or admin controller and the product controller.

28
00:02:14,340 --> 00:02:18,050
So this is up to you and I will indeed create different files here,

29
00:02:18,120 --> 00:02:27,150
I'll have my product.js file or products.js for my product related logic and I will put all

30
00:02:27,150 --> 00:02:28,650
the product logic in there,

31
00:02:28,830 --> 00:02:36,240
so even my shop route here where I also work with products, I'll put that logic in here because all logic

32
00:02:36,270 --> 00:02:39,830
I have in my app thus far and this will change later

33
00:02:39,960 --> 00:02:46,110
but all logic thus far is related to products and therefore, I want to have it in a controller that only

34
00:02:46,110 --> 00:02:53,430
works with product logic. And if I later add some user logic, that will go into a user controller and maybe

35
00:02:53,430 --> 00:02:59,120
we even split the product controller into a user product and an admin product controller

36
00:02:59,220 --> 00:03:01,490
but for now, we'll leave it like this.

37
00:03:01,500 --> 00:03:08,890
So in that products.js file in the controllers folder, I now want to add that code here basically.

38
00:03:08,890 --> 00:03:11,310
So this middleware function we're executing here,

39
00:03:11,430 --> 00:03:16,380
this code for add product right where I just render this add product route,

40
00:03:16,380 --> 00:03:18,470
this can now go into there and

41
00:03:18,620 --> 00:03:19,980
the question just is how 

42
00:03:19,980 --> 00:03:21,680
because this would be incorrect.

43
00:03:22,110 --> 00:03:28,670
Well in the end we want to link to this function and we want to link there from inside our route,

44
00:03:28,710 --> 00:03:32,810
so here we basically want to add a link to this controller function here.

45
00:03:32,880 --> 00:03:34,950
So therefore what do we need to do?

46
00:03:35,370 --> 00:03:42,090
We need to export this function in the product controller file and we can do this and we'll have multiple

47
00:03:42,090 --> 00:03:44,570
exports by using exports

48
00:03:44,670 --> 00:03:46,800
and then any name of our choice.

49
00:03:46,800 --> 00:03:52,470
Remember with this syntax, we can have multiple exports in one file easily.

50
00:03:52,530 --> 00:04:02,210
So here I will now export my get add product function here and the name is up to you but I name it like

51
00:04:02,240 --> 00:04:04,350
this because in the end this is what we do,

52
00:04:04,350 --> 00:04:06,720
we get the add product page.

53
00:04:06,720 --> 00:04:12,300
Of course you could also name it get add product page here but I will just describe what this in the end

54
00:04:12,300 --> 00:04:16,850
helps me do and it helps me get everything I need to add a product

55
00:04:16,890 --> 00:04:19,580
but you can name this to your likings.

56
00:04:19,690 --> 00:04:25,980
So now I get this product and I still have my function which receives the request object even though

57
00:04:25,980 --> 00:04:33,350
we're not using it here but we still get that, the response object which we are using and next because

58
00:04:33,370 --> 00:04:40,660
this still is a normal middleware function expressjs understands because I will now import get add

59
00:04:40,710 --> 00:04:45,750
product into my admin.js file and still using here on my route,

60
00:04:45,750 --> 00:04:46,800
this will not change,

61
00:04:46,860 --> 00:04:51,020
I just split my code differently. So with that, let's

62
00:04:51,070 --> 00:04:52,150
add an import,

63
00:04:52,330 --> 00:04:54,290
by the way we can get rid of this root

64
00:04:54,310 --> 00:04:57,390
dir import because I'm not using that utility anymore,

65
00:04:57,400 --> 00:05:01,410
you can also therefore delete the entire file or even folder

66
00:05:01,420 --> 00:05:03,170
but that's just a side note.

67
00:05:03,370 --> 00:05:09,160
So let's now import our controller and there, I will import products

68
00:05:09,160 --> 00:05:13,370
controller by requiring

69
00:05:17,050 --> 00:05:20,080
my controllers folder and there, the products file.

70
00:05:20,110 --> 00:05:25,560
So since I'm doing this from inside my admin.js file here, I need to go up one level until I'm in

71
00:05:25,560 --> 00:05:31,390
the root project folder and then I go into the controllers folder and then I pick that products file.

72
00:05:31,690 --> 00:05:37,990
So now products controller bundles all the exported functions and right now, this is only one of course

73
00:05:38,140 --> 00:05:45,120
but it will become more. So back in admin.js here on this route where I want to use that, I can now simply

74
00:05:45,120 --> 00:05:52,550
say products controller.get add product. And we don't execute this function

75
00:05:52,630 --> 00:05:55,200
so please don't add these parentheses,

76
00:05:55,270 --> 00:05:58,170
instead we just pass a reference to this function.

77
00:05:58,240 --> 00:06:04,360
So we're just saying or we're just telling express, the express router that it should take this function

78
00:06:04,360 --> 00:06:05,310
and store it

79
00:06:05,500 --> 00:06:10,480
and whenever a request reaches this route, it should go ahead and execute it.

80
00:06:10,480 --> 00:06:13,910
Now we can repeat this for adding a new product,

81
00:06:13,910 --> 00:06:20,380
I'll cut this code and go to my product controller and simply add a brand new export and I'll name this

82
00:06:20,560 --> 00:06:23,660
post add product because this is what I do here,

83
00:06:23,680 --> 00:06:30,200
I post a new product I add the product therefore through a post route and this will be the function

84
00:06:30,220 --> 00:06:31,900
I just copied.

85
00:06:31,960 --> 00:06:37,330
Now the problem here is that we refer to products which is of course something we don't have in that

86
00:06:37,360 --> 00:06:43,040
file yet, so I should also go into admin.js and take my products array which I have

87
00:06:43,080 --> 00:06:48,620
there, cut it out of there and then in products.js in the controllers file,

88
00:06:48,640 --> 00:06:54,290
I will add this array and I'll change this later too but for now, let's simply add it here,

89
00:06:54,490 --> 00:06:57,640
products should be our empty array.

90
00:06:57,830 --> 00:07:06,110
Now back in admin.js, we can now also use our new products controller function we just added, post add

91
00:07:06,110 --> 00:07:10,340
product in exactly the same way we use get add product

92
00:07:10,520 --> 00:07:13,600
and of course we can now tweak our exports here,

93
00:07:13,640 --> 00:07:20,430
we no longer need to export products in our admin.js file because we no longer have that array in here.

94
00:07:20,480 --> 00:07:26,260
So instead I'll just export my router again as I'm doing it in the shop.js file.

95
00:07:26,330 --> 00:07:30,340
So with module exports equal to router, that is what we have here too

96
00:07:30,500 --> 00:07:37,490
and this just means that we now have to adjust the app.js file where we are importing this, there I'm importing

97
00:07:37,580 --> 00:07:39,130
admin data, now

98
00:07:39,140 --> 00:07:44,600
a more fitting name is admin routes again because now we just export routes and nothing else

99
00:07:44,600 --> 00:07:51,560
and of course that also means that here where we use that, we just use admin routes because we change

100
00:07:51,570 --> 00:07:54,010
that export. Ok good,

101
00:07:54,050 --> 00:07:56,090
so we get this set up,

102
00:07:56,090 --> 00:07:59,200
now let's also do the same for shop.js.

103
00:07:59,400 --> 00:08:02,750
There I also get a function which is related to products,

104
00:08:02,750 --> 00:08:03,930
so let's cut it

105
00:08:04,160 --> 00:08:05,850
and in products.js here,

106
00:08:06,110 --> 00:08:14,830
I will add a new export, exports get products like this.

107
00:08:14,970 --> 00:08:22,780
If I do this, I have my function here which will in the end return or render that page with my products

108
00:08:22,840 --> 00:08:29,240
and one important note, obviously products is now an array which is available in that file,

109
00:08:29,260 --> 00:08:32,700
so products here doesn't have to be extracted from anywhere

110
00:08:32,710 --> 00:08:35,530
and again we will change this.

111
00:08:35,630 --> 00:08:37,640
So this is now my finished products

112
00:08:37,640 --> 00:08:39,700
controller in shop.js,

113
00:08:39,800 --> 00:08:44,680
we can now remove these two imports because we don't need them anymore

114
00:08:44,900 --> 00:08:53,510
instead I import my products controller by requiring it from the same path as in the admin.js file

115
00:08:53,990 --> 00:09:01,470
and here for this get route, I will simply say products controller get products. With all that,

116
00:09:01,470 --> 00:09:04,170
let's save this and see if it still works.

117
00:09:04,170 --> 00:09:07,620
If I reload this page, this all seems to work

118
00:09:07,860 --> 00:09:11,420
and if I add my first book here, this also works.

119
00:09:11,490 --> 00:09:15,660
So it's still working as before but now we're using a controller.

120
00:09:15,690 --> 00:09:18,520
Now let's see what else we can do here.
