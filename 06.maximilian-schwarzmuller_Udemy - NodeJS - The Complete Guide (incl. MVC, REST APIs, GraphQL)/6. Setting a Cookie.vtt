WEBVTT
1
00:00:02.140 --> 00:00:08.170
So we found out that using a request for storing this is not ideal because the request is dead after

2
00:00:08.170 --> 00:00:11.180
sending a response, which alternatives do we have?

3
00:00:12.200 --> 00:00:19.490
Well one alternative would be some kind of global variable. You could use a global variable which you

4
00:00:19.490 --> 00:00:26.260
store in an extra file and which you export from that file and which you then change and that variable

5
00:00:26.270 --> 00:00:28.920
would actually survive your request cycles

6
00:00:28.940 --> 00:00:36.800
but since that variable would be shared across all requests, it would also be shared across all users

7
00:00:37.670 --> 00:00:43.010
and that is exactly where cookies can help us. With cookies we can store data in the browser of a single

8
00:00:43.010 --> 00:00:50.660
user and store data in that browser which is customized to that user which does not affect all the other users

9
00:00:50.840 --> 00:00:57.650
but can be sent with requests to tell us hey I already am authenticated and that is exactly what we

10
00:00:57.650 --> 00:00:58.990
will do here.

11
00:00:59.000 --> 00:01:06.350
So instead of just redirecting here, what we can do is we can set a cookie and we set such a cookie simply

12
00:01:06.620 --> 00:01:08.810
by setting a header.

13
00:01:08.810 --> 00:01:13.350
So we set a header on our response and we set a header here

14
00:01:13.380 --> 00:01:18.210
by first of all defining the name of the header and the name is set cookie indeed,

15
00:01:18.320 --> 00:01:25.850
that is a reserved name which well sets a cookie and then you have the value of that header and the value

16
00:01:25.850 --> 00:01:33.680
for set cookie in its simplest form is simply a key value pair where you define any name you want and any

17
00:01:33.680 --> 00:01:35.000
value you want.

18
00:01:35.000 --> 00:01:41.000
So you could have something like logged in or logged in, makes it easier to read

19
00:01:41.130 --> 00:01:47.460
equals true, this would set a cookie and I can show this to you. If you now save this and you go to the

20
00:01:47.460 --> 00:01:55.900
login page and you click post here or click login, open your developer tools and in the chrome developer

21
00:01:55.900 --> 00:01:59.770
tools, you can go to the application tab and there to cookies

22
00:01:59.770 --> 00:02:03.890
and if you expand this, you should see your current address here and

23
00:02:03.950 --> 00:02:07.200
if you click on that, you will see some cookies.

24
00:02:07.500 --> 00:02:13.030
Now some cookies will be set by third party plugins, chrome extensions and so on

25
00:02:13.620 --> 00:02:17.260
but you will also see logged in and the value true,

26
00:02:17.280 --> 00:02:20.640
you should see that at least and that is the cookie we just set.

27
00:02:20.710 --> 00:02:22.030
Let me zoom out a bit here,

28
00:02:23.410 --> 00:02:26.170
there you see the domain to which it belongs,

29
00:02:26.170 --> 00:02:32.670
the path, when it will expire and this state is in the past because it's a so-called session cookie,

30
00:02:32.670 --> 00:02:37.510
it will basically expire once you close the browser and come back,

31
00:02:37.620 --> 00:02:42.720
you see the size and some other information to which I will come back in a second.

32
00:02:43.140 --> 00:02:45.120
So this cookie is now set

33
00:02:45.240 --> 00:02:53.670
and now this cookie is not only set but the browser by default sends it to the server with every request

34
00:02:53.670 --> 00:02:54.360
we make,

35
00:02:54.360 --> 00:02:58.330
so if I click on products here for example, we go to the network tab,

36
00:02:58.490 --> 00:03:01.340
this is the request which was sent to the products page

37
00:03:01.590 --> 00:03:07.080
and there if we have a look at the headers and we scroll down to the request headers, you see that a cookie

38
00:03:07.080 --> 00:03:07.780
was sent.

39
00:03:07.830 --> 00:03:11.530
The first one comes from an extension but here this is our cookie,

40
00:03:11.550 --> 00:03:19.770
so it was sent to our server and now since we have that, every request will have that cookie attached

41
00:03:19.770 --> 00:03:24.160
to itself and therefore this data is sent with every request

42
00:03:24.480 --> 00:03:25.640
and now we can use that.

43
00:03:25.800 --> 00:03:33.210
Let's start simple, let's say in the get login page here. We can have a look at our headers, let me console

44
00:03:33.210 --> 00:03:40.320
log request get and then you enter the header name which is cookie because remember in the client side

45
00:03:40.380 --> 00:03:46.890
dev tools, you saw that the cookie header was sent with the request and now if you go to the login page

46
00:03:47.160 --> 00:03:51.810
or reload that page if you are on it, I reloaded it a couple of times,

47
00:03:51.840 --> 00:03:53.350
you see this output.

48
00:03:53.360 --> 00:03:56.730
Now we can ignore the first cookie but this is our logged in cookie

49
00:03:57.030 --> 00:04:06.090
and now we could extract that value for example by splitting on the semi-colon and then taking the second

50
00:04:06.090 --> 00:04:07.260
value in that array,

51
00:04:07.260 --> 00:04:11.550
the array index starts at zero so one gives us the second element

52
00:04:11.550 --> 00:04:19.360
and now if I reload this, you see I get logged in true here, you could trim that to remove any excess white

53
00:04:19.360 --> 00:04:23.080
spaces, we could split this again on the equal sign,

54
00:04:23.120 --> 00:04:25.180
this is obviously a very complex way

55
00:04:25.300 --> 00:04:30.550
but if I do this again and then I use the second value, then I should get the true or false value.

56
00:04:31.700 --> 00:04:34.730
So now if I reload this, I get

57
00:04:34.740 --> 00:04:36.440
true here,

58
00:04:36.490 --> 00:04:39.880
so obviously this is a very complex way but should be quite readable

59
00:04:40.120 --> 00:04:48.760
and then I can extract my is logged in information from the incoming request header, I'm getting the

60
00:04:48.760 --> 00:04:50.560
cookie header,

61
00:04:50.930 --> 00:04:57.790
I make sure that I get the second cookie that is sent which happens to be our is logged in cookie.

62
00:04:57.940 --> 00:05:03.890
If you only have one cookie being sent by the way, then make sure you extract the first value,

63
00:05:04.300 --> 00:05:09.340
so whatever or wherever is logged in is located for you, if you only have one cookie, use the first

64
00:05:09.340 --> 00:05:10.380
one with zero,

65
00:05:10.480 --> 00:05:13.820
if you've got multiple ones, use the third one and so on

66
00:05:14.110 --> 00:05:16.210
and then I extract the true value

67
00:05:16.290 --> 00:05:21.290
and now I have that is logged in information which I can pass to isAuthenticated.

68
00:05:21.400 --> 00:05:29.170
And with that on that page, if I now reload it, hey here are our two options in the menu because now we

69
00:05:29.170 --> 00:05:33.680
do enable that again because now we store that information across requests.

70
00:05:33.700 --> 00:05:36.970
So now even if I navigate away to another page or

71
00:05:37.000 --> 00:05:38.440
I don't extract that cookie 

72
00:05:38.620 --> 00:05:43.840
yet and I come back to login, there I do extract it and it is always sent with every request,

73
00:05:43.840 --> 00:05:47.210
so it is a cross request data storage.

74
00:05:47.260 --> 00:05:50.280
Still there is a big disadvantage

75
00:05:50.380 --> 00:05:52.860
and do you know which one that is?
