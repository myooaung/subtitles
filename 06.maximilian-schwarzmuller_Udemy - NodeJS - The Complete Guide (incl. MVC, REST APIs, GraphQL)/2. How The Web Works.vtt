WEBVTT
1
00:00:02.240 --> 00:00:07.010
So let me quickly refresh our knowledge on how the web works.

2
00:00:07.100 --> 00:00:10.780
If you are totally aware of all of this, you can of course skip this lecture.

3
00:00:11.060 --> 00:00:12.430
Now the web works like this,

4
00:00:12.440 --> 00:00:14.370
we get got a user, a client,

5
00:00:14.460 --> 00:00:21.410
maybe you sitting in front of your browser, visiting a webpage or already being on a webpage and submitting

6
00:00:21.410 --> 00:00:22.010
a form,

7
00:00:22.100 --> 00:00:24.860
so you're interacting with webpages.

8
00:00:24.860 --> 00:00:26.180
Let's say you are visiting it,

9
00:00:26.180 --> 00:00:29.830
so you're entering some url into your browser

10
00:00:30.050 --> 00:00:36.650
and what happens behind the scenes is actually that the browser reaches out to some domain name servers

11
00:00:36.650 --> 00:00:42.760
to look that domain up because this domain is not really the address of your server,

12
00:00:42.800 --> 00:00:49.730
it's basically an encoded human readable version of that address you could say, your server itself has just an

13
00:00:49.730 --> 00:00:53.630
IP address but this is just some technical thing behind the scenes,

14
00:00:53.630 --> 00:01:00.300
in the end you enter this url and it will lead to some server. You therefore or the browser therefore

15
00:01:00.380 --> 00:01:03.570
sends a request to that server

16
00:01:03.590 --> 00:01:09.200
with that given IP address I mentioned, so the IP address belonging to that domain.

17
00:01:09.210 --> 00:01:15.500
Now thus far that's all interesting but now we reach the part where nodejs comes into play, where your

18
00:01:15.520 --> 00:01:17.590
nodejs code matters.

19
00:01:17.690 --> 00:01:23.690
You write the code that runs on that computer in the Internet which has that IP address,

20
00:01:23.690 --> 00:01:30.710
you write the code that spins up that server which is able to handle the incoming request and do something

21
00:01:30.710 --> 00:01:31.380
with it.

22
00:01:31.400 --> 00:01:33.080
Now you don't need to use nodejs

23
00:01:33.090 --> 00:01:37.410
for this, you could use PHP, asp.net, Ruby on Rails,

24
00:01:37.490 --> 00:01:38.320
anything like that

25
00:01:38.390 --> 00:01:44.900
but in this course, we'll obviously use nodejs because well it's a nodejs course.

26
00:01:45.130 --> 00:01:50.050
Now in this code, you can do all kinds of things and I already mentioned this in the first course module,

27
00:01:50.230 --> 00:01:51.780
user input validation,

28
00:01:51.880 --> 00:01:57.460
communicating with the database maybe which runs on a separate database server but which you typically

29
00:01:57.460 --> 00:02:01.180
reach out to from your backend, so your server side code

30
00:02:01.390 --> 00:02:08.570
and once you're done with that, you do one important thing, you send back a response to the client.

31
00:02:08.590 --> 00:02:16.090
This response can be some html text, some html code which is then handled by the client but it could

32
00:02:16.090 --> 00:02:20.780
also be some other kind of data like a file, some json or xml

33
00:02:20.820 --> 00:02:21.700
data.

34
00:02:21.940 --> 00:02:28.960
The response is more than just the content by the way, a response and also a request also has headers,

35
00:02:29.060 --> 00:02:34.330
this is some meta information which is attached to request and response describing what's inside it

36
00:02:34.330 --> 00:02:35.190
for example

37
00:02:35.230 --> 00:02:36.750
but we'll see this too.

38
00:02:37.120 --> 00:02:43.630
So this is how the web generally works and nodejs is the part we will focus on, it is the code that makes

39
00:02:43.630 --> 00:02:45.660
up that server in the end.

40
00:02:45.660 --> 00:02:50.790
Now that request and response transmission is done through some protocol,

41
00:02:50.800 --> 00:02:57.450
so basically a standardized way of communicating you could say because obviously, to correctly handle a

42
00:02:57.460 --> 00:03:01.570
request and send back a response the browser can work with,

43
00:03:01.630 --> 00:03:08.560
we have to follow some rules and these rules are defined by the protocol we use, http or https.

44
00:03:08.560 --> 00:03:13.180
Http stands for hypertext transfer protocol

45
00:03:13.180 --> 00:03:19.480
and there we simply define or it is defined how a valid request looks like and how the data should

46
00:03:19.480 --> 00:03:21.620
be transferred from browser to server

47
00:03:21.670 --> 00:03:28.660
and the other way around and https simply is the same with SSL encryption turned on where all the

48
00:03:28.660 --> 00:03:36.490
data that is transmitted is actually encrypted so that if anyone is spoofing your connection, they can't

49
00:03:36.520 --> 00:03:38.170
read your data.

50
00:03:38.290 --> 00:03:44.200
Now towards the end of the course, I will show you how to enable https, for the majority we'll just

51
00:03:44.200 --> 00:03:49.820
use http since we'll only be developing that code, we'll only work on it locally

52
00:03:49.840 --> 00:03:56.360
but once we put it into production, I will also show you how to turn on that SSL encryption.

53
00:03:56.650 --> 00:03:58.810
This is how the web works

54
00:03:58.810 --> 00:04:04.900
in a nutshell and how nodejs is related to it and this is exactly where we will now continue working

55
00:04:04.900 --> 00:04:09.430
with nodejs and where we will now finally create a server with nodejs.
