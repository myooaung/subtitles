WEBVTT
1
00:00:02.530 --> 00:00:10.940
Con la configurazione fittizia degli utenti, ora possiamo fare la nostra logica di test effettiva, quindi se diamo un'occhiata al nostro controller spento qui sul file off controller, quindi nella cartella del

2
00:00:10.940 --> 00:00:17.020
controller abbiamo bisogno di una richiesta che abbia un utente I. D.

3
00:00:17.020 --> 00:00:25.630
campo perché stiamo trovando un utente da quell'utente I. D. e quindi modifichiamo l'oggetto risposta chiamando un metodo

4
00:00:25.630 --> 00:00:28.300
di stato su un metodo adiacente.

5
00:00:28.300 --> 00:00:33.910
Quindi dobbiamo passare un oggetto di richiesta che ha un utente I. D. e quindi risponde all'oggetto che

6
00:00:33.910 --> 00:00:39.010
ha un metodo di stato un metodo adiacente in cui possiamo quindi impostare alcuni dati di stato.

7
00:00:39.010 --> 00:00:44.990
E di nuovo possiamo ovviamente passare il nostro oggetto di risposta qui invece di usare quello reale per

8
00:00:45.010 --> 00:00:48.860
trovare unità alle nostre esigenze in modo che possiamo facilmente testarlo.

9
00:00:49.210 --> 00:00:55.390
Quindi creerò qui il mio oggetto di richiesta prima di tutto dove ho un utente I. D. e naturalmente quell'utente

10
00:00:55.390 --> 00:00:58.180
I. D. dovrebbe essere l'idea dell'utente che stiamo creando qui.

11
00:00:58.180 --> 00:01:09.140
Ora per semplificare questo possiamo dare a quest'utente un'idea che puoi esplicitamente impostare qui dentro che può essere una

12
00:01:09.140 --> 00:01:09.820
stringa.

13
00:01:09.830 --> 00:01:15.200
Ora il formato della stringa è importante, puoi usare quello che trovi allegato qui, che

14
00:01:15.290 --> 00:01:16.510
è una stringa.

15
00:01:16.550 --> 00:01:23.480
Consideri un I. valido D. di Mongo TB, quindi darò a questo utente la mia idea

16
00:01:23.480 --> 00:01:27.960
in modo da poter passare l'utente I. D. qui nella richiesta in modo che trovo davvero un utente che esiste.

17
00:01:28.010 --> 00:01:32.660
Naturalmente potremmo tutti testare il nostro codice per i casi in cui non troviamo un utente con l'I errato. D ..

18
00:01:32.780 --> 00:01:41.520
Ma qui voglio ottenere un utente reale e voglio testare se questa risposta è impostata correttamente correttamente perché è quello che

19
00:01:41.540 --> 00:01:42.800
stiamo testando.

20
00:01:42.800 --> 00:01:46.500
Dovremmo inviare una risposta con uno stato utente valido.

21
00:01:48.050 --> 00:01:53.610
Per un utente esistente, questa è la richiesta ora per la risposta.

22
00:01:53.650 --> 00:01:59.220
Non invierò più solo un oggetto vuoto, ma l'oggetto risposta avrà bisogno di un metodo di stato e metodo

23
00:01:59.380 --> 00:02:03.090
adiacente e di un posto dove archiviare lo stato di tale utente.

24
00:02:03.190 --> 00:02:13.660
E il codice di stato della risposta quindi avrò un oggetto qui con un campo di codice di stato di

25
00:02:13.720 --> 00:02:15.550
500 diciamo inizialmente

26
00:02:18.570 --> 00:02:25.220
di uno stato utente di null inizialmente quindi un metodo di stato.

27
00:02:25.230 --> 00:02:34.980
Quindi una funzione qui dove ottengo un codice di stato e quindi ho impostato questo codice di stato uguale al codice e

28
00:02:34.980 --> 00:02:36.820
quindi restituisco quest'anno.

29
00:02:36.960 --> 00:02:41.200
In questo modo lo stato restituisce nuovamente questo oggetto.

30
00:02:41.340 --> 00:02:50.750
In modo che qui posso effettivamente chiamare Jason su questo oggetto perché qui sono in grado di cambiare il suo metodo.

31
00:02:50.770 --> 00:02:55.620
Quindi, per poterlo fare, devo restituirlo qui e poi aggiungerò questo.

32
00:02:55.870 --> 00:03:02.650
Jason funziona qui dove ho alcuni dati che ottengo come argomento.

33
00:03:02.860 --> 00:03:10.250
Ora i dati ovviamente saranno qui un oggetto in cui abbiamo una chiave di stato che è lo stato dell'utente e loro

34
00:03:10.270 --> 00:03:17.230
hanno per un anno che imposterò questo stato utente uguale allo stato del punto dati perché di nuovo i dati che

35
00:03:17.230 --> 00:03:20.160
otterremo saranno oggetto con una chiave di stato.

36
00:03:20.180 --> 00:03:25.540
Quindi lo sto estraendo e archiviando questo qui e quindi ora abbiamo un oggetto di risposta con

37
00:03:25.540 --> 00:03:30.120
il quale dovremmo essere in grado di interagire proprio come facciamo nel controller off.

38
00:03:30.160 --> 00:03:38.290
Ora è il momento di eseguire effettivamente il nostro codice di test e utilizzarlo off control o ottenere l'annuncio dello stato utente qui.

39
00:03:38.290 --> 00:03:40.460
Perché questa è ancora la funzione asincrona.

40
00:03:40.470 --> 00:03:43.540
Pertanto restituisce implicitamente una promessa.

41
00:03:43.570 --> 00:03:50.950
Quindi qui dovrei quindi, ovviamente, passivo richiedere una risposta e quindi svuotare la prossima funzione.

42
00:03:50.950 --> 00:03:58.450
E poi qui in questa funzione che viene eseguita una volta che il nostro controller è stato fatto lì posso

43
00:03:58.930 --> 00:04:09.000
trovare la mia aspettativa e la mia aspettativa è che questo oggetto risposta abbia ora un codice di stato che è uguale a per essere uguale per

44
00:04:09.000 --> 00:04:14.920
esempio che è uguale a duecento e non più di cinquecento perché dovremmo impostarlo a 200

45
00:04:14.940 --> 00:04:22.640
qui se siamo riusciti a estrarre quell'utente e naturalmente che lo stato è estratto correttamente in modo che il nostro campo

46
00:04:23.240 --> 00:04:26.360
Stato utente sia popolato allo stato predefinito

47
00:04:29.140 --> 00:04:34.990
che abbiamo nel nostro modello utente che è Io sono nuovo con un punto esclamativo.

48
00:04:35.380 --> 00:04:40.780
Così come il nostro stato di default dal momento che non impostiamo uno stato diverso qui nel

49
00:04:40.780 --> 00:04:47.200
nostro oggetto utente fittizio dovremmo avere lo stato di default quindi mi aspettavo di essere impostato lì dopo che ho chiamato

50
00:04:47.680 --> 00:04:51.070
fatto perché è quando ho lasciato che MOCA ci finisse.

51
00:04:51.100 --> 00:04:54.610
Ora proviamo a fare un test

52
00:04:58.090 --> 00:05:02.710
NPM e abbiamo sei test che passano, incluso questo qui.

53
00:05:02.740 --> 00:05:03.730
Ci è voluto abbastanza tempo.

54
00:05:03.730 --> 00:05:04.570
Che va bene

55
00:05:04.600 --> 00:05:10.320
A proposito, se questa volta è finita, puoi definire un periodo di timeout più lungo.

56
00:05:10.320 --> 00:05:15.700
Andando ai tuoi script e aggiungendo il dash dash time qui dopo MOCA e impostandoci a cinque

57
00:05:15.700 --> 00:05:19.110
secondi per esempio con 5000 perché questo è in millisecondi.

58
00:05:19.180 --> 00:05:22.900
Il valore predefinito è duemila e se il tempo è scaduto, impostalo su 5000.

59
00:05:23.440 --> 00:05:25.840
Ma ora sembrava funzionare.

60
00:05:25.840 --> 00:05:30.490
Diamo ora un'occhiata al database e vediamo se il database di test esiste e

61
00:05:30.490 --> 00:05:32.080
se esiste l'utente fittizio.

62
00:05:32.080 --> 00:05:39.210
Quindi guarderemo le nostre collezioni qui ora se guardo il mio database, ho un paio di collezioni, ho

63
00:05:39.220 --> 00:05:45.460
un database di test database e lì ho una collezione di utenti, lì ho davvero

64
00:05:45.490 --> 00:05:46.690
quell'utente fittizio.

65
00:05:46.790 --> 00:05:52.330
E ora solo per essere sicuro che se controllo uno stato diverso e riesegui questo puoi uscire da quel processo

66
00:05:52.330 --> 00:05:55.280
che era ancora in esecuzione con il controllo C ..

67
00:05:55.330 --> 00:06:04.630
Ora, in effetti, abbiamo un errore di timeout perché abbiamo avuto un test fallito in cui abbiamo quel test lassù in mancanza, ma

68
00:06:04.720 --> 00:06:11.680
fallisce per una ragione diversa se guardi da vicino vedrai che fallisce perché abbiamo un problema chiave

69
00:06:11.680 --> 00:06:16.720
duplicato e questo ovviamente deriva dal nostro codice di installazione qui.

70
00:06:16.720 --> 00:06:16.970
Destra.

71
00:06:16.970 --> 00:06:23.950
Crea un nuovo utente che ora per la seconda prova di prova esiste già e sono tutti in presenza di un altro problema.

72
00:06:23.950 --> 00:06:28.790
Questo processo non si chiude come ha fatto prima di doverlo fare manualmente con il controllo C.

73
00:06:28.900 --> 00:06:31.060
Ora sistemiamo tutte queste cose nelle prossime lezioni.
