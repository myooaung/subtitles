WEBVTT
1
00:00:02.480 --> 00:00:06.180
So time to extract this ID from the url

2
00:00:06.340 --> 00:00:12.750
and for that let's go to the routes folder, there in shop.js. we want to handle a new route and I will

3
00:00:12.750 --> 00:00:16.110
add it below my all products route here.

4
00:00:16.360 --> 00:00:19.700
It will be a get route because we want to display a new page for now

5
00:00:19.870 --> 00:00:23.140
and part of the path is products but that's not everything,

6
00:00:23.140 --> 00:00:29.130
we also have this dynamic segment, the ID. The express router supports us with this,

7
00:00:29.290 --> 00:00:37.150
we can tell the express router that there will be some variable segment by adding a colon and then any

8
00:00:37.360 --> 00:00:40.090
name of our choice like Product ID,

9
00:00:40.360 --> 00:00:44.750
later we'll be able to extract that information by that name here

10
00:00:44.770 --> 00:00:46.220
so remember it.

11
00:00:46.540 --> 00:00:52.510
The important part is the colon here though, this signals to express that it should not look for a route

12
00:00:52.750 --> 00:01:03.300
like products product ID but instead that this part here can be anything and it will simply route or load

13
00:01:03.310 --> 00:01:10.670
this route for this path then and we will then be able to extract that information through that name.

14
00:01:10.700 --> 00:01:19.120
This has one important implication, if you also have another route like router get products delete

15
00:01:19.130 --> 00:01:19.870
let's say,

16
00:01:19.900 --> 00:01:21.300
so that is a normal route,

17
00:01:21.300 --> 00:01:27.410
this is not a dynamic segment, the order would matter. If you order it like this

18
00:01:27.500 --> 00:01:33.800
and keep in mind that your code is parsed from top to bottom and the request goes through that from top

19
00:01:33.800 --> 00:01:34.720
to bottom,

20
00:01:34.940 --> 00:01:40.970
if you order it like this you would never reach that route because if you had a route like products delete,

21
00:01:40.980 --> 00:01:47.390
expressjs would already fire at this route or would already handle it in this route here because

22
00:01:47.420 --> 00:01:51.110
delete would basically be treated as the dynamic segment.

23
00:01:51.110 --> 00:01:56.780
So if you had a dynamic segment and a specific route, you would have to put the more specific route

24
00:01:56.810 --> 00:01:57.450
first

25
00:01:57.500 --> 00:02:01.570
so that for products delete, this handles the request and thereafter

26
00:02:01.590 --> 00:02:05.030
it'll not continue its journey because you don't fire next

27
00:02:05.180 --> 00:02:10.250
but if you then have something else which does not match products delete, then you would go into that

28
00:02:10.250 --> 00:02:11.250
dynamic route.

29
00:02:11.540 --> 00:02:14.450
So this does matter, here however we don't have that case,

30
00:02:14.450 --> 00:02:16.100
I just want to mention it,

31
00:02:16.100 --> 00:02:21.950
so for now let's simply connect a controller where we then can handle this incoming request and where

32
00:02:21.950 --> 00:02:26.340
I then can show you how you can get this information out of the url

33
00:02:26.660 --> 00:02:32.270
and for this, let's go to controllers shop.js and there simply add a new controller,

34
00:02:32.330 --> 00:02:36.190
I will add it below get products, the position doesn't matter

35
00:02:36.200 --> 00:02:38.810
but logically here we get all products

36
00:02:38.900 --> 00:02:43.400
so now I also want to add the function where we get one product.

37
00:02:43.760 --> 00:02:50.000
So here I will have get product, whoops response next like this

38
00:02:50.780 --> 00:02:51.740
and in there

39
00:02:52.010 --> 00:02:58.730
let's now extract that dynamic path segment or the value it holds to be precise.

40
00:02:58.730 --> 00:03:03.640
So this will be our product ID, I'll store it in a constant named prod ID,

41
00:03:03.740 --> 00:03:05.030
that name is up to you

42
00:03:05.420 --> 00:03:12.500
and we can get access to it by accessing our request and then expressjs already gives us a params

43
00:03:12.920 --> 00:03:15.130
object on our request

44
00:03:15.260 --> 00:03:24.880
and on that params object, we can access our product ID and we can access product ID here because we

45
00:03:24.880 --> 00:03:31.650
use product ID in our route shop.js file as a name after the colon.

46
00:03:31.750 --> 00:03:37.730
So the name you use here after the colon is the name by which you can extract the data on this params

47
00:03:37.770 --> 00:03:38.730
object.

48
00:03:39.060 --> 00:03:48.190
And let me show you that this works by logging this, Prod ID and I will then for now simply redirect

49
00:03:48.460 --> 00:03:51.590
to the starting page, later we'll of course render a different view

50
00:03:51.610 --> 00:03:53.110
but for now this will do.

51
00:03:53.500 --> 00:03:59.830
And with that I can now go to shop.js and use my controller here,

52
00:04:00.010 --> 00:04:04.570
so connect the shop controller get product function here

53
00:04:05.080 --> 00:04:10.630
and with this connection set up, if I now go back and please note I'm still on that route with the dynamic

54
00:04:10.630 --> 00:04:11.590
segment,

55
00:04:11.590 --> 00:04:14.260
if I now reload this, I'm getting redirected

56
00:04:14.260 --> 00:04:16.220
which means we handle this,

57
00:04:16.360 --> 00:04:19.110
we don't get the 404 page anymore

58
00:04:19.270 --> 00:04:27.660
and in the console here, I see my dynamic segment logged out through this line. And that of course means

59
00:04:27.660 --> 00:04:28.950
we can not just log it,

60
00:04:28.960 --> 00:04:29.940
we can also use it.
