WEBVTT
1
00:00:02.190 --> 00:00:08.370
Sekarang terakhir tetapi tidak kalah pentingnya sebelum kita tidak benar-benar mengirimkan server aplikasi kita ke penyedia hosting saya

2
00:00:08.370 --> 00:00:09.920
ingin melihat SS l.

3
00:00:09.990 --> 00:00:14.980
T ls dan DL meminta hanya apakah Anda bagal atau lebih buruk dari itu.

4
00:00:15.080 --> 00:00:21.960
Ellis istilah lebih banyak orang tahu namun keduanya adalah tentang mengamankan data Anda yang dikirim dari klien

5
00:00:21.990 --> 00:00:27.840
ke server karena ketika kami berkomunikasi antara server klien kami biasanya bertukar data.

6
00:00:27.870 --> 00:00:35.220
Sekarang kita dapat memiliki pihak ketiga penyerang yang kemudahan menjatuhkan data itu secara teknis mungkin.

7
00:00:35.220 --> 00:00:41.120
Tentu saja bukan super sepele tetapi mungkin dan karena itu menyerang atau bisa membaca data Anda yang Anda

8
00:00:41.130 --> 00:00:44.680
kirim dari klien ke server yang tentu saja merupakan masalah.

9
00:00:44.730 --> 00:00:48.700
Jika kita berbicara tentang data kartu kredit atau semacamnya.

10
00:00:48.810 --> 00:00:54.530
Karenanya kami ingin melindungi data itu dan kami melakukannya dengan SSL Teall sebagai enkripsi.

11
00:00:54.630 --> 00:00:59.970
Sekarang satu enkripsi semacam itu sudah ada di tempat. Eavesdropping tidak mungkin lagi

12
00:01:00.250 --> 00:01:08.850
karena sementara data dapat dibaca selama masih dalam perjalanan dan akan didekripsi di server sekarang untuk mengaktifkan enkripsi itu dan

13
00:01:08.930 --> 00:01:13.810
untuk dapat mendekripsi, kami bekerja dengan publik pasangan kunci pribadi.

14
00:01:13.920 --> 00:01:16.260
Keduanya diketahui ke server.

15
00:01:16.680 --> 00:01:23.160
Sekarang kunci publik diminta nama-nama gests bukan sesuatu yang kita harus lindungi kunci privat, namun

16
00:01:23.160 --> 00:01:28.410
kunci privat hanya akan diketahui oleh server karena kunci privat nantinya akan

17
00:01:28.410 --> 00:01:30.630
menjadi penting untuk mendekripsi data.

18
00:01:30.750 --> 00:01:36.230
Kunci publik akan digunakan untuk mengenkripsi sekarang dalam sertifikat SSL.

19
00:01:36.360 --> 00:01:40.070
Kami mengikat kunci publik itu ke identitas server.

20
00:01:40.290 --> 00:01:46.920
Identitas hanyalah sesuatu seperti domain alamat email admin yang Anda atur untuk mendapatkan data ketika

21
00:01:46.920 --> 00:01:54.450
Anda membuat sertifikat dead asss sertifikat karena itu menghubungkan kunci publik dan server dan mengirim stat ke klien

22
00:01:54.480 --> 00:01:59.910
ke browser sehingga klien juga mengetahui kunci publik dan tahu bahwa itu milik

23
00:01:59.910 --> 00:02:01.220
server itu.

24
00:02:01.260 --> 00:02:07.260
Sekarang biasanya Anda akan menggunakan sertifikat Florida untuk Anda meskipun Anda dapat membuat sertifikat SSL Anda

25
00:02:07.260 --> 00:02:10.400
sendiri dan akan melakukannya dalam modul ini.

26
00:02:10.650 --> 00:02:16.800
Tetapi ketika Anda membuat kunci Anda sendiri maka browser tidak benar-benar mempercayai Anda bahwa informasi

27
00:02:16.800 --> 00:02:24.120
di sana benar dan saat itulah Anda mendapatkan informasi atau peringatan seperti hei halaman menggunakan SSL tetapi tampaknya

28
00:02:24.120 --> 00:02:25.290
tidak aman.

29
00:02:25.290 --> 00:02:26.910
Anda benar-benar ingin mengunjunginya.

30
00:02:27.180 --> 00:02:35.030
Oleh karena itu dalam produksi Anda akan menggunakan sertifikat esus yang disediakan oleh otoritas sertifikat yang dikenal perwalian peramban

31
00:02:35.040 --> 00:02:40.210
browser dan karena itu Anda memiliki perlindungan yang nyata aman dan tepercaya.

32
00:02:40.470 --> 00:02:43.240
Meskipun demikian cara kerjanya selalu sama.

33
00:02:43.320 --> 00:02:49.890
Kami memiliki bagian kunci publik dari sertifikat sertifikat yang ideal tidak dibuat oleh Anda tetapi oleh otoritas

34
00:02:49.890 --> 00:02:54.660
tepercaya kami akan memperdagangkannya di sini sendiri karena itu akan gratis.

35
00:02:54.660 --> 00:03:01.080
Kunci publik yang mati kemudian diterima oleh klien melalui sertifikat kematian dan sekarang klien dapat mengenkripsi

36
00:03:01.140 --> 00:03:07.440
data yang dikirim ke server dan server dapat mendekripsi data dengan kunci pribadi itu dan

37
00:03:07.530 --> 00:03:10.910
hanya kunci pribadi yang dapat mendekripsi data itu.

38
00:03:10.980 --> 00:03:15.540
Dan ini cara kerjanya dan bagaimana mengamankan data Anda dalam perjalanan.

39
00:03:15.540 --> 00:03:18.090
Sekarang izinkan saya menunjukkan kepada Anda bagaimana ini bekerja dalam prakteknya.

40
00:03:18.150 --> 00:03:23.680
Sekarang untuk mengatur koneksi SSL di server Anda sendiri dengan sertifikat mereka sendiri.

41
00:03:23.760 --> 00:03:29.250
Sekali lagi Anda harus mendapatkan satu dari otoritas sekali untuk menerapkannya pada produksi tetapi untuk pengujian ini kita

42
00:03:29.250 --> 00:03:31.480
pasti bisa bermain-main dengan kita sendiri.

43
00:03:31.500 --> 00:03:38.970
Kami perlu membuat sertifikat dan kami melakukannya dengan perintah bernama open SSL di Mac dan Linux yang Anda miliki

44
00:03:38.970 --> 00:03:40.490
tersedia secara default.

45
00:03:40.740 --> 00:03:41.910
Di Windows Anda tidak.

46
00:03:42.030 --> 00:03:47.140
Tetapi di sana Anda dapat menemukannya dengan googling untuk membuka jendela SSL dan kemudian mati.

47
00:03:47.150 --> 00:03:48.150
Tautan kedua di sini.

48
00:03:48.150 --> 00:03:55.560
Tautan biner ini membawa Anda ke halaman tempat Anda dapat mengambil tautan pertama ke Essel pro WEP dan di sana saat

49
00:03:55.560 --> 00:04:02.520
Anda menggulir ke bawah, Anda akan menemukan penginstal yang menginstal alat SSL terbuka ini di Windows juga sehingga Anda

50
00:04:02.520 --> 00:04:03.920
dapat mengikuti perintah.

51
00:04:03.970 --> 00:04:10.530
Saya akan menjalankan pada Windows juga untuk versi Anda di sini menginstalnya

52
00:04:10.530 --> 00:04:24.850
dan setelah Anda menginstalnya Anda dapat menjalankan membuka catatan dasbor SSL rec dash dasbor baru x 5 0 9 dasbor keluar kunci pintu server keluar dasbor server dot cert

53
00:04:24.900 --> 00:04:32.100
dan ini akan memberi Anda kunci pribadi dan kunci publik yang dikemas dalam sertifikat.

54
00:04:32.110 --> 00:04:39.730
Sekarang setelah Anda menekan enter Anda akan ditanyai beberapa pertanyaan dan pastikan untuk memilih nilai yang valid.

55
00:04:39.730 --> 00:04:45.760
Meskipun itu tidak terlalu penting tetapi idenya di sini adalah Anda menghubungkan identitas Anda

56
00:04:45.820 --> 00:04:49.300
D'Ken identitas aplikasi Anda ke kunci publik Anda.

57
00:04:49.300 --> 00:04:54.850
Padahal lagi-lagi buang air yang disensor sendiri tidak akan diterima oleh browser.

58
00:04:55.000 --> 00:04:58.330
Untuk produksi Anda tidak boleh menggunakan opsi itu lagi.

59
00:04:58.630 --> 00:05:06.200
Mari kita mengisinya dengan beberapa nilai kebenaran.

60
00:05:06.500 --> 00:05:09.080
Dan satu nilai penting hanyalah nama umum.

61
00:05:09.080 --> 00:05:15.230
Anda harus mengatur ini ke localhost jika tidak, sertifikat tidak akan berfungsi karena ini harus diatur ke

62
00:05:15.230 --> 00:05:16.370
domain Anda.

63
00:05:16.370 --> 00:05:22.860
Jadi, jika Anda menggunakan sertifikat yang ditandatangani sendiri di server tempat Anda menggunakan aplikasi dan Anda meng-host aplikasi

64
00:05:22.860 --> 00:05:28.040
ini pada contoh dot com, maka Anda harus menyetel ini ke kaleng contoh.

65
00:05:28.220 --> 00:05:34.070
Sekali lagi biasanya Anda meminta sertifikat untuk domain Anda oleh otoritas tertentu dan kemudian mereka akan melakukan ini untuk

66
00:05:34.070 --> 00:05:34.610
Anda.

67
00:05:34.700 --> 00:05:40.400
Tetapi jika Anda membuat domain Anda sendiri menggunakan domain tempat aplikasi Anda berjalan dan secara lokal itu adalah

68
00:05:40.640 --> 00:05:44.340
localhost dan sertifikat ini akan ditolak dan ia tidak akan diterima.

69
00:05:44.450 --> 00:05:51.240
Jika Anda menetapkan ini ke nilai rata-rata sekarang setelah Anda melakukan semua itu Anda akan menemukan dua file baru dan sertifikat

70
00:05:51.390 --> 00:05:57.270
layanan folder yang merupakan kunci sertifikat dan server yang merupakan kunci pribadi bukan kunci pribadi akan selalu

71
00:05:57.270 --> 00:05:58.780
berada di server Anda.

72
00:05:58.830 --> 00:06:02.060
Sertifikat adalah apa yang kami kirim ke klien pada akhirnya.

73
00:06:02.100 --> 00:06:04.950
Sekarang untuk menggunakannya di Aperture Ya.

74
00:06:04.980 --> 00:06:11.580
Pertama-tama harus mengimpor modul simpul baru dan itu adalah modul ht tp s yang memungkinkan kita

75
00:06:11.580 --> 00:06:13.740
untuk berputar dan server HTP.

76
00:06:13.860 --> 00:06:19.450
Sejauh ini kami langsung atau tidak langsung melalui aplikasi mendengarkan digunakan untuk Depay.

77
00:06:19.530 --> 00:06:27.630
Sekarang kami akan menggunakan HTP untuk Anda adalah bahwa saya perlu membaca di file saya dan saya akan melakukannya di sini.

78
00:06:27.990 --> 00:06:36.880
Saya akan membaca di kunci pribadi saya dengan menggunakan paket sistem file simpul yang Anda perlu memastikan Anda mengimpor

79
00:06:36.880 --> 00:06:38.440
dalam file ini.

80
00:06:38.470 --> 00:06:45.800
Di sini Anda perlu paket sistem deadfall dan di sana Anda dapat membaca file secara serempak.

81
00:06:45.800 --> 00:06:50.220
Sekarang ini akan memblokir eksekusi kode hingga file dibaca dan Anda akan belajar.

82
00:06:50.250 --> 00:06:52.610
Kematian biasanya tidak apa yang ingin Anda lakukan.

83
00:06:52.790 --> 00:06:58.700
Tapi di sini saya sebenarnya tidak ingin melanjutkan dengan memulai server kecuali saya sudah membaca file itu.

84
00:06:59.030 --> 00:07:05.650
Jadi di sini saya akan membaca deadfall secara sinkron dan diikuti untuk membaca sebagai kunci server dot.

85
00:07:05.690 --> 00:07:14.550
Jadi file kunci pribadi saya ada di angka konstan yang akan saya beri nama sertifikat dan itu akan menjadi f

86
00:07:14.550 --> 00:07:20.370
sebagai baca jatuh sinkronisasi dan tentu saja itu server saya pikir file cert.

87
00:07:20.570 --> 00:07:25.300
Sekarang dengan dua file ini dibaca kita dapat gulir ke bawah ke tempat kita mulai ke server dengan aplikasi ..

88
00:07:25.310 --> 00:07:32.940
Dengarkan dan saya tidak akan menggunakan daftar aplikasi lagi tetapi semua menggunakan HD sebagai paket baru ini kami hanya mengimpornya

89
00:07:32.990 --> 00:07:36.340
dan membuat server untuk membuat HTP sebagai server.

90
00:07:36.650 --> 00:07:38.430
Ini sekarang membutuhkan dua argumen.

91
00:07:38.480 --> 00:07:40.430
Yang pertama mengkonfigurasi server.

92
00:07:40.580 --> 00:07:47.240
Dan di sini kita harus mengarahkannya ke kunci pribadi dan sertifikat kita dan argumen kedua adalah penangan

93
00:07:47.240 --> 00:07:48.340
permintaan kita.

94
00:07:48.410 --> 00:07:53.850
Dalam kasus kami, aplikasi ekspres kami sehingga argumen kedua adalah aplikasi kami.

95
00:07:53.900 --> 00:08:00.560
Argumen pertama akan menjadi objek javascript di mana Anda perlu mengatur dua hal yang Anda perlu mengatur

96
00:08:00.560 --> 00:08:04.140
kunci tombol dan Anda mengaturnya ke kunci pribadi itu.

97
00:08:04.140 --> 00:08:11.540
Konstan yang kami buat sedetik yang lalu dan Anda juga perlu mengatur kunci pencarian yang Anda tetapkan ke tanggal sertifikat

98
00:08:11.720 --> 00:08:17.090
konstan yang kami buat sedetik yang lalu dan kemudian kami mendengarkan di server itu.

99
00:08:17.090 --> 00:08:21.390
Sekarang dengan itu jika Anda menjalankan NPM mulai itu akan memulai server Anda.

100
00:08:21.530 --> 00:08:30.410
Tetapi sekarang menggunakan enkripsi SSL dan jika sekarang kita kembali ke aplikasi kita dan benar-benar memuat 3000 localhost ini akan gagal

101
00:08:30.590 --> 00:08:34.030
karena secara default Anda gunakan untuk DPI.

102
00:08:34.100 --> 00:08:42.460
Jika saya menggunakan HDD sebagai localhost 3000 itu akan gagal karena browser tidak menerima kebiasaan itu atau Sertifikat yang

103
00:08:42.470 --> 00:08:45.120
ditandatangani sendiri seperti yang Anda pelajari.

104
00:08:45.190 --> 00:08:52.180
Tetapi jika Anda mengeklik lanjut, Anda dapat melanjutkan ke localhost dan sekarang lagi peramban tidak memperingatkan kami karena

105
00:08:52.180 --> 00:08:54.890
tidak menyukai sertifikat yang ditandatangani sendiri.

106
00:08:55.060 --> 00:09:01.070
Tetapi secara teknis kami sekarang menggunakan perlindungan SSL dan ini adalah bagaimana Anda mengaktifkannya.

107
00:09:01.180 --> 00:09:06.550
Tetapi seperti halnya dengan logging dan kompresi biasanya Anda akan mengaturnya secara berbeda.

108
00:09:06.550 --> 00:09:11.770
Anda akan membiarkan penyedia hosting Anda mengatur ini karena secara teknis penyedia hosting

109
00:09:11.770 --> 00:09:18.700
sering juga memiliki layanan sendiri di depan Anda dan server penyedia hosting tidak menggunakan SSL dan untuk lalu

110
00:09:18.700 --> 00:09:25.330
lintas antara aplikasi Anda dan di antara server tidak menggunakan H2-B karena diblokir atau tidak tersedia

111
00:09:25.330 --> 00:09:31.570
untuk umum dan penyedia layanan hosting, Yrs. akan menerapkan logika ini sehingga Anda tidak akan

112
00:09:31.570 --> 00:09:33.180
menulis kode itu sendiri.

113
00:09:33.280 --> 00:09:41.060
Dan memang di sini saya akan kembali ke kode lama saya di mana saya baru saja mendengarkan aplikasi karena kami akan membutuhkannya

114
00:09:41.060 --> 00:09:45.800
nanti ketika kami ditempatkan karena kami akan membiarkan penyedia hosting kami mengelola SSL.

115
00:09:45.800 --> 00:09:52.490
Tetapi jika Anda perlu melakukannya secara manual adalah bagaimana Anda memulai server node di HSDPA smote.
