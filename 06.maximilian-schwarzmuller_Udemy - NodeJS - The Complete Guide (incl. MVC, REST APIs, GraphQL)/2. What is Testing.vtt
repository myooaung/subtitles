WEBVTT
1
00:00:02.340 --> 00:00:05.160
Che cosa è esattamente il test.

2
00:00:05.160 --> 00:00:06.560
Bene, stiamo scrivendo il nostro codice.

3
00:00:06.570 --> 00:00:11.670
Ovviamente questo è ciò che abbiamo scritto questo corso e abbiamo testato questo codice manualmente.

4
00:00:11.670 --> 00:00:17.940
Con questo intendo che abbiamo semplicemente visitato la pagina che inviamo richieste alla nostra API.

5
00:00:17.970 --> 00:00:22.980
Ora il grande vantaggio di questo approccio è ovviamente che possiamo vedere la nostra pagina.

6
00:00:22.980 --> 00:00:26.270
Possiamo davvero vedere la pagina come i nostri utenti li vedranno.

7
00:00:26.370 --> 00:00:30.720
Possiamo interagire con la nostra API come qualsiasi sviluppatore potrebbe interagire con esso.

8
00:00:30.720 --> 00:00:36.110
E offrono test manuali è super importante, ma c'è anche un aspetto negativo.

9
00:00:36.180 --> 00:00:38.790
È facile dimenticare di testare qualcosa.

10
00:00:38.790 --> 00:00:45.420
È facile testare solo alcune parti e soprattutto quando apporti modifiche al tuo codice è facile rompere

11
00:00:45.430 --> 00:00:51.750
qualcosa in qualche punto della tua app che potresti non pensare di spezzare e non lo

12
00:00:51.750 --> 00:00:58.830
testerai in modo esplicito e quindi introduci un blocco che trovi solo più tardi o forse mai del tutto.

13
00:00:58.830 --> 00:01:06.540
Ovviamente questo è il lato negativo ed è piuttosto difficile testare tutte le funzionalità possibili e ogni

14
00:01:06.540 --> 00:01:09.780
possibile combinazione di passaggi nella tua applicazione.

15
00:01:09.780 --> 00:01:12.450
Dopo ogni piccolo cambiamento che fai.

16
00:01:12.450 --> 00:01:18.810
Ed è qui che entrano in gioco i test automatizzati. Il test automatico del codice significa che scriviamo il codice che

17
00:01:19.050 --> 00:01:20.890
mette alla prova il nostro codice.

18
00:01:21.000 --> 00:01:23.840
Quindi definiamo i passaggi che vengono eseguiti.

19
00:01:23.880 --> 00:01:31.200
Definiamo determinati scenari che vengono testati e eseguiamo automaticamente questi test ad ogni modifica o offriamo ogni

20
00:01:31.200 --> 00:01:33.450
importante modifica che abbiamo apportato.

21
00:01:33.510 --> 00:01:35.670
Quindi possiamo eseguirli quando vogliamo.

22
00:01:35.670 --> 00:01:42.210
Possiamo persino inserirli nel nostro processo di distribuzione ed eseguirli proprio prima che la nostra app venga distribuita

23
00:01:42.210 --> 00:01:48.660
e papà ci farà un errore ogni volta che alcuni dei nostri test falliscono e possiamo quindi

24
00:01:48.660 --> 00:01:52.520
esaminare questi test e scoprire perché hanno fallito e risolverli.

25
00:01:52.530 --> 00:01:58.770
Il grande vantaggio dei test automatizzati, quindi, è che siamo in grado di coprire tutte le funzionalità

26
00:01:58.770 --> 00:02:04.980
di base e possiamo trovare tutti gli scenari possibili da testare e quindi assicurarci di non introdurre

27
00:02:04.980 --> 00:02:06.290
modifiche di rottura.

28
00:02:06.420 --> 00:02:09.530
Ma ovviamente ci sono anche degli aspetti negativi nei test automatici.

29
00:02:09.780 --> 00:02:15.480
Se fai i test sbagliati, potresti avere un buon feeling perché tutti i tuoi test stanno passando ma

30
00:02:15.480 --> 00:02:19.110
forse stai solo testando le cose sbagliate per gli scenari sbagliati.

31
00:02:19.500 --> 00:02:26.790
Inoltre, mentre testi solo ciò che definisci, è anche difficile testare l'interfaccia utente in modo da non vedere

32
00:02:26.790 --> 00:02:29.880
realmente ciò che vedono i tuoi utenti.

33
00:02:29.910 --> 00:02:36.930
Quindi è una combinazione di entrambi i test manuali che abbiamo fatto per il corso in cui naturalmente esegui e test

34
00:02:37.050 --> 00:02:40.170
automatico di ciò che imparerai in questo modulo.
