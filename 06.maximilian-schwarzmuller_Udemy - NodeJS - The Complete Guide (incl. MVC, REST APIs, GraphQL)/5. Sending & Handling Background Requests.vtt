WEBVTT
1
00:00:02.310 --> 00:00:08.160
We have some basic code in place to extract values about the product which we want to delete,

2
00:00:08.280 --> 00:00:14.400
now to continue, we need a route on the backend to which we can send our javascript request. For that

3
00:00:14.410 --> 00:00:17.340
let's go to the routes folder and there to admin.js.

4
00:00:17.550 --> 00:00:24.750
Obviously we already have a delete route here, a delete product route and we can build up on that route,

5
00:00:24.750 --> 00:00:26.690
there is nothing wrong with that

6
00:00:26.970 --> 00:00:32.790
but now since we'll send the request directly through javascript, we can actually use a different http

7
00:00:32.790 --> 00:00:33.260
verb.

8
00:00:33.450 --> 00:00:40.680
Thus far we always use get and post because the browser natively supports these for the requests sent by

9
00:00:40.680 --> 00:00:43.820
the browser, by form submission and by clicking links,

10
00:00:43.890 --> 00:00:48.420
it only knows get and post. When we send requests through javascript,

11
00:00:48.420 --> 00:00:54.870
so through browser side javascript, we have access to other http verbs too and you'll learn more about the

12
00:00:54.870 --> 00:00:58.160
different http verbs in the rest API section.

13
00:00:58.200 --> 00:01:02.110
One of them is delete and this is a http verb,

14
00:01:02.190 --> 00:01:05.660
so http method which makes a lot of sense for deleting.

15
00:01:05.790 --> 00:01:07.450
Now it's only a semantic thing,

16
00:01:07.530 --> 00:01:14.250
we could use post, you can in general use any http verb to do anything because you define with your server

17
00:01:14.250 --> 00:01:14.910
side logic

18
00:01:14.910 --> 00:01:15.750
what will happen

19
00:01:15.990 --> 00:01:21.670
but it makes sense to try to be clear about your intention and there is a delete verb,

20
00:01:21.780 --> 00:01:22.970
we can now use it

21
00:01:23.010 --> 00:01:24.400
so why wouldn't we use it.

22
00:01:24.660 --> 00:01:28.680
So now this is a delete route to delete product,

23
00:01:28.680 --> 00:01:38.320
now I can also change this a bit and may be name this product- and then the product ID as a dynamic

24
00:01:38.320 --> 00:01:38.890
parameter

25
00:01:38.920 --> 00:01:43.010
because delete requests can have dynamic url parameters.

26
00:01:43.060 --> 00:01:49.660
So now we can extract that information from our url and I'll leave the controller action as it is

27
00:01:49.690 --> 00:01:56.170
but I will now name it delete product like this because we are not sending a post request anymore

28
00:01:56.230 --> 00:01:59.750
so I guess this name makes more sense, isAuth

29
00:01:59.770 --> 00:02:00.380
is a middleware

30
00:02:00.400 --> 00:02:01.800
I will keep in place though.

31
00:02:03.500 --> 00:02:10.460
So now with that, let's go to the admin controller and here, I'll rename that function, that handler here to

32
00:02:10.460 --> 00:02:15.920
delete product because I renamed it in the routes file too and now the product ID first of all is not

33
00:02:15.920 --> 00:02:21.590
extracted from the request body anymore because delete request as it turns out also are not allowed

34
00:02:21.590 --> 00:02:22.990
to have a request body 

35
00:02:23.270 --> 00:02:26.960
but instead, we now have that url parameter

36
00:02:26.960 --> 00:02:27.760
product ID,

37
00:02:27.830 --> 00:02:29.990
so I can extract my ID from there.

38
00:02:29.990 --> 00:02:34.080
So I simply change body for params and that's it,

39
00:02:34.340 --> 00:02:39.590
so that gives me my product ID. And then this logic here will still work,

40
00:02:39.590 --> 00:02:43.270
I only need to change the response I'll return.

41
00:02:43.490 --> 00:02:47.500
I will not redirect anymore because I'll not load a new page.

42
00:02:47.510 --> 00:02:53.480
Remember that the request triggering this action will be sent behind the scenes for the existing page,

43
00:02:53.480 --> 00:03:00.980
so I want to keep that existing page and therefore my response will be a response where I send json

44
00:03:00.980 --> 00:03:02.240
data.

45
00:03:02.240 --> 00:03:09.590
Json data is a special format and with expressjs, I can use a json helper method to conveniently

46
00:03:09.590 --> 00:03:15.190
return json data and json is simply a data format that looks like a javascript object,

47
00:03:15.230 --> 00:03:18.930
so with curly braces and then key value pairs,

48
00:03:19.130 --> 00:03:24.970
the only important thing about json is the keys have to be wrapped between double quotation marks.

49
00:03:25.060 --> 00:03:26.340
This is json data

50
00:03:26.480 --> 00:03:28.150
and this is what we can return here

51
00:03:28.370 --> 00:03:34.890
and now we can also set a status here of 200 maybe because for json data, this would be the default too

52
00:03:35.180 --> 00:03:41.720
but there since we don't redirect it and so on, where we get a status code set automatically, it would make

53
00:03:41.720 --> 00:03:49.340
sense to be very clear about the status code we have. And therefore here, I'll also not to use my default

54
00:03:49.520 --> 00:03:53.750
error handler where I would load the 500 page, instead here,

55
00:03:53.780 --> 00:03:56.850
I'll also return a response with status 500

56
00:03:56.870 --> 00:04:02.090
now, that is what I mean about setting that status on your own and there, I'll also return some json

57
00:04:02.090 --> 00:04:02.760
data,

58
00:04:02.780 --> 00:04:08.870
the question is of course which data. You simply pass a javascript object here which will then be transformed

59
00:04:08.960 --> 00:04:11.120
to json automatically for you.

60
00:04:11.180 --> 00:04:13.460
So here you can pass your normal javascript object,

61
00:04:13.460 --> 00:04:16.440
you don't need double quotation marks around your keys there

62
00:04:16.700 --> 00:04:20.610
and here we could have a message where I just say success,

63
00:04:20.720 --> 00:04:24.310
of course not that interesting but we could do that. And here

64
00:04:24.410 --> 00:04:30.590
I could have a message where I say deleting product failed.

65
00:04:30.770 --> 00:04:34.270
So now I have that in place and now we have two important changes,

66
00:04:34.280 --> 00:04:36.730
this is how we extract the params or the product ID

67
00:04:36.860 --> 00:04:41.500
and now we return json responses because we don't want to render a new page,

68
00:04:41.540 --> 00:04:43.680
we just want to return some data.

69
00:04:43.910 --> 00:04:50.090
Obviously we now have to continue in admin.js and make sure that we send the request and then work

70
00:04:50.090 --> 00:04:51.510
with the response data.

71
00:04:51.590 --> 00:04:52.880
Whoops, not this file though,

72
00:04:53.000 --> 00:05:00.580
I mean the one in the public.js folder, here. We worked on the server side and we added a new route

73
00:05:00.580 --> 00:05:06.100
or we changed the route to use the delete http verb and to look like this

74
00:05:06.190 --> 00:05:11.710
and now we need to send the request there from inside our client side admin.js file, so in the public

75
00:05:11.710 --> 00:05:19.420
folder. Here we can use the fetch method which is a method supported by the browser for sending http requests

76
00:05:19.670 --> 00:05:21.590
and it's not just for fetching data

77
00:05:21.670 --> 00:05:26.540
as the name might suggest, it's also for sending data. Here if

78
00:05:26.770 --> 00:05:28.440
you can pass a url,

79
00:05:28.540 --> 00:05:30.730
so we want to send a request to /product

80
00:05:30.730 --> 00:05:33.980
and then this of course needs to be replaced with the Product ID

81
00:05:34.240 --> 00:05:36.960
and this will send that to the same server

82
00:05:36.970 --> 00:05:41.140
if you don't specify a different host with http and then something,

83
00:05:41.200 --> 00:05:45.010
so if you have nothing like that, it will send it to the current host. Here

84
00:05:45.100 --> 00:05:53.050
I will add my prod ID of course and then the second argument is an object where you can configure this fetch

85
00:05:53.170 --> 00:05:54.880
request.

86
00:05:54.880 --> 00:06:00.430
Now here you can set a bunch of things, you could add a request body but not for a delete request as

87
00:06:00.430 --> 00:06:01.970
I just explained in the last lecture

88
00:06:01.990 --> 00:06:05.830
but for a post request which you can also send with that, you would set it

89
00:06:06.010 --> 00:06:09.120
and first of all let's define that this is a delete request.

90
00:06:09.130 --> 00:06:15.130
So I'll set method to delete here, doesn't have to be uppercase but it's a good convention.

91
00:06:15.580 --> 00:06:25.030
Now with method set, what else can we set? Well we can set headers and in the headers, we could encode

92
00:06:25.070 --> 00:06:29.440
our csrf token because we still need to attach this to our request

93
00:06:29.440 --> 00:06:31.410
and right now we are not doing that.

94
00:06:31.480 --> 00:06:35.800
We cannot send it in the request body because delete requests don't have a body

95
00:06:35.950 --> 00:06:41.710
but the good thing is the csurf package which we are using on a server does not just look into request

96
00:06:41.710 --> 00:06:42.360
bodies,

97
00:06:42.520 --> 00:06:46.470
it also looks into the query parameters and therefore we could add it there

98
00:06:46.570 --> 00:06:48.520
and it also looks into the headers.

99
00:06:48.610 --> 00:06:51.490
So there we can add a csrf token header,

100
00:06:51.490 --> 00:06:52.880
it will look for this key,

101
00:06:52.960 --> 00:06:58.990
you'll find all the keys for which it will look in the official doc. So you can add csrf token and then

102
00:06:59.020 --> 00:07:03.520
csrf as a value to attach this to your outgoing request as well.

103
00:07:03.520 --> 00:07:08.620
Now this will send the request and it will return a promise that allows to listen to the response

104
00:07:08.680 --> 00:07:17.320
and here I will console log any error I might be getting and here, I'll be console logging any result

105
00:07:17.350 --> 00:07:18.190
I might be getting,

106
00:07:18.190 --> 00:07:19.900
let's see what we have there.

107
00:07:19.900 --> 00:07:25.390
Now one important note by the way, I'm not sending any json data with my request here because it

108
00:07:25.390 --> 00:07:28.030
is a delete request without a post body.

109
00:07:28.030 --> 00:07:35.380
If it were and that is something we will see in the rest API section, then I would have to parse json

110
00:07:35.380 --> 00:07:39.520
data in my backend because there right now

111
00:07:39.550 --> 00:07:41.150
and that's just an important note,

112
00:07:41.260 --> 00:07:48.280
in app.js, there right now we only have two parsers, one for url encoded data which we

113
00:07:48.280 --> 00:07:55.050
don't have when we send json data and one for multipart data which we also don't have there. We would

114
00:07:55.050 --> 00:08:01.090
have to add a new body parser that is able to handle json data and extract that from incoming requests.

115
00:08:01.170 --> 00:08:06.220
I don't add it here because we don't need it here but we will add it later when we need it.

116
00:08:06.720 --> 00:08:11.120
So with that all in place, with our client side code adjusted,

117
00:08:11.260 --> 00:08:17.430
let's save all of that and let's simply click the delete button after reloading the page and see what we get.

118
00:08:18.140 --> 00:08:19.730
Let's click delete

119
00:08:19.870 --> 00:08:22.710
and I first of all get a 404 error that

120
00:08:22.710 --> 00:08:26.090
this route is not found, product with some ID

121
00:08:26.370 --> 00:08:33.510
and this makes sense because my route, product product ID is in the admin routes folder, of course we

122
00:08:33.510 --> 00:08:38.540
only get there if our request path starts with /admin,

123
00:08:38.550 --> 00:08:40.660
that is what we configure in the app.js file.

124
00:08:40.860 --> 00:08:47.160
So in my client side admin.js file in the public folder, I should of course point at /admin

125
00:08:47.160 --> 00:08:51.500
/product/product ID, so that's a little mistake on my side.

126
00:08:51.600 --> 00:08:54.120
Let's now reload after changing this

127
00:08:54.350 --> 00:08:56.190
and now this is looking good,

128
00:08:56.240 --> 00:09:03.380
I get a response with a status code of 200, with request body which is a readable stream,

129
00:09:03.380 --> 00:09:07.300
I'll show you how to get to that request body in a second

130
00:09:07.610 --> 00:09:11.710
and if I reload the page, the product is indeed gone.

131
00:09:11.720 --> 00:09:13.090
Now that's a step forward

132
00:09:13.160 --> 00:09:16.390
but of course I don't just want to reload the page,

133
00:09:16.400 --> 00:09:18.050
it should be gone immediately,

134
00:09:18.050 --> 00:09:21.800
that would be the main idea of doing this behind the scenes.

135
00:09:21.800 --> 00:09:23.390
So how can we make this work?
