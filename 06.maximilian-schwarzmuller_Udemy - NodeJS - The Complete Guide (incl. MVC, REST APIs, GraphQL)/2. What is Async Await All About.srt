1
00:00:02,680 --> 00:00:11,260
Jadi, apa arti sink semua tentang sink dan bobot adalah dua kata kunci yang merupakan bagian dari bahasa

2
00:00:11,350 --> 00:00:12,640
javascript inti.

3
00:00:12,670 --> 00:00:16,020
Mereka bukan bagian eksklusif dari runtime no js.

4
00:00:16,100 --> 00:00:21,160
Mereka juga tersedia di browser modern atau dalam proyek Front-End.

5
00:00:21,180 --> 00:00:25,760
Mereka bukan bagian dari Jasp tetapi Anda dapat menggunakannya dalam proyek-proyek terkenal.

6
00:00:25,780 --> 00:00:29,090
Tentu saja pertanyaannya adalah apa yang dilakukan kedua kata kunci ini.

7
00:00:29,670 --> 00:00:36,310
Satu saja memungkinkan Anda untuk menulis permintaan asinkron sehingga permintaan di mana Anda memiliki beberapa operasi yang

8
00:00:36,310 --> 00:00:43,000
memakan waktu agak lama dan datang kembali nanti dengan cara sinkron dan Anda melihat ada tanda bintang

9
00:00:43,070 --> 00:00:48,760
dari cara sinkron Duras karena async dengan cara itu memungkinkan Anda untuk menulis pernyataan

10
00:00:48,760 --> 00:00:53,590
asinkron dengan cara yang terlihat sinkron tetapi tetap bukan permintaan sinkron.

11
00:00:53,590 --> 00:00:55,960
Sekarang ini tentu saja sangat abstrak.

12
00:00:55,960 --> 00:00:59,170
Jadi mari kita selami kode terkenal kita yang sudah ada.

13
00:00:59,170 --> 00:01:04,810
Dan biarkan saya menunjukkan kepada Anda bagian mana yang bisa Anda ubah untuk menggunakan async yang akan menunggu dan kemudian

14
00:01:04,810 --> 00:01:06,830
akan menjadi sangat jelas apa fungsinya.

15
00:01:06,850 --> 00:01:08,300
Saya kembali ke catatan saya.

16
00:01:08,320 --> 00:01:10,730
J. S. tahun aplikasi akhir kembali.

17
00:01:10,840 --> 00:01:17,270
Dan izinkan saya menunjukkan bahwa seperti yang saya sebutkan, Anda semua dapat menggunakan satu berat dalam aplikasi reaksi Anda, tetapi

18
00:01:17,380 --> 00:01:19,060
ini bukan tindakan ulang saja.

19
00:01:19,060 --> 00:01:24,600
Jadi saya akan membiarkan kode ini tidak tersentuh dan kami akan kembali ke aplikasi simpul saya.

20
00:01:24,730 --> 00:01:26,780
Sekarang bagaimana kita bisa menggunakan sinkronisasi.

21
00:01:26,800 --> 00:01:27,640
Dan beratnya.

22
00:01:27,970 --> 00:01:34,640
Nah, jika Anda masuk ke pengontrol umpan Anda, Anda akan melihat bahwa di sana kami memiliki

23
00:01:34,690 --> 00:01:40,680
pos operasi asinkron, temukan bagaimana Anda bisa melihat atau bagaimana Anda mengidentifikasi operasi asinkron.

24
00:01:40,690 --> 00:01:42,570
Nah misalnya saat Anda sedang menggunakan.

25
00:01:42,570 --> 00:01:49,450
Janji-janji Janji adalah bangunan tipikal yang membantu Anda menangani kode sinkron karena janji-janji

26
00:01:49,450 --> 00:01:56,320
seperti itu menemukan posting dieksekusi dan menghitung semua dokumen yang dijalankan segera.

27
00:01:56,320 --> 00:02:03,460
Tapi kemudian benar-benar menghitung dokumen, mengembalikan janji atau janji seperti objek dan Anda tidak menggunakannya

28
00:02:03,580 --> 00:02:06,950
untuk mendefinisikan fungsi yang harus dieksekusi.

29
00:02:07,030 --> 00:02:13,500
Setelah operasi ini di sini selesai dan karena kita mengakses database di sini biasanya memakan waktu lebih lama.

30
00:02:13,510 --> 00:02:15,320
Kita berbicara tentang mili detik di sini.

31
00:02:15,370 --> 00:02:18,150
Tapi tetap saja itu tidak terjadi secara instan.

32
00:02:18,310 --> 00:02:24,340
Semua kebalikan dari garis ini dan apakah garis dieksekusi setelah satu sama lain langsung melakukan operasi

33
00:02:24,340 --> 00:02:27,800
pada dasarnya tidak mengambil waktu sama sekali begitu cepat.

34
00:02:27,850 --> 00:02:32,420
Javascript dapat menunggu sampai selesai dan langsung menuju langkah berikutnya di sini.

35
00:02:32,500 --> 00:02:34,690
Itu tidak akan menunggu sampai selesai.

36
00:02:34,690 --> 00:02:40,860
Dan itulah sebabnya setelah pernyataan ini, javascript akan benar-benar melanjutkan dengan pernyataan berikutnya sejalan.

37
00:02:40,900 --> 00:02:46,940
Jadi jika kita memiliki pernyataan di level yang sama dengan Post find kita akan melanjutkannya.

38
00:02:46,960 --> 00:02:51,630
Sekarang dalam kasus ini kita naik tetapi jika kita akan memiliki beberapa kode

39
00:02:51,630 --> 00:03:00,060
di sana seperti log konsol atau apa pun ini akan segera dilaksanakan mungkin atau sangat mungkin sebelum ini atau kode ini atau kode ini dieksekusi.

40
00:03:00,070 --> 00:03:06,730
Alasannya adalah dengan kita mendefinisikan potongan kode atau kita mendefinisikan fungsi yang harus dijalankan di

41
00:03:06,820 --> 00:03:07,930
masa depan.

42
00:03:07,980 --> 00:03:15,520
Setelah lebih lama mengambil operasi sinkron dilakukan dan itu disebut asinkron karena itu tidak terjadi secara instan

43
00:03:15,520 --> 00:03:21,880
tetapi butuh sedikit waktu panggilan balik yang kita gunakan sebelumnya dan tentu saja adalah sejumlah

44
00:03:21,880 --> 00:03:24,460
cara bekerja dengan kode asinkron.

45
00:03:24,490 --> 00:03:27,340
Jadi, inilah dua empat dokumen akun.

46
00:03:27,340 --> 00:03:32,680
Anda dapat benar-benar dan Anda akan melihat bahwa Anda dan dokumentasi yang muncul Anda dapat menentukan fungsi

47
00:03:32,680 --> 00:03:33,550
panggilan balik.

48
00:03:33,550 --> 00:03:38,600
Jadi di sini Anda bisa mendefinisikan fungsi yang dieksekusi setelah selesai alih-alih.

49
00:03:38,740 --> 00:03:41,810
Dan kami tidak menggunakan panggilan balik karena di sana.

50
00:03:41,810 --> 00:03:47,530
Kami ingin menggunakan kode itu dan kemudian kami akan membutuhkan panggilan setiap tahun di fungsi Temukan dan kami akan

51
00:03:47,530 --> 00:03:51,760
membuat sarang semua panggilan balik yang mengarah ke kode yang sangat tidak dapat dibaca.

52
00:03:51,760 --> 00:03:57,190
Itu sebabnya Anda sering lebih suka janji meskipun Anda bisa melakukannya dengan callback karena di sana Anda memiliki

53
00:03:57,220 --> 00:04:00,880
satu kemudian memblokir satu sama lain dan itu sangat mudah dibaca.

54
00:04:00,880 --> 00:04:03,920
Masih bisa lebih mudah dibaca dengan wastafel.

55
00:04:04,090 --> 00:04:06,240
Dan itulah yang ingin saya tunjukkan pada Anda pada kuliah berikutnya.
