WEBVTT
1
00:00:02.240 --> 00:00:07.100
Ora nelle ultime lezioni apprendi molte cose utili che apprendi su questi ganci che sono molto

2
00:00:07.100 --> 00:00:10.630
importanti per la creazione e per un lavoro di pulizia.

3
00:00:10.630 --> 00:00:14.030
Lo imparerai per un codice che interagisce con un database.

4
00:00:14.060 --> 00:00:17.140
Potrebbe andare bene usare davvero un database.

5
00:00:17.210 --> 00:00:20.360
Dovrebbe essere solo un database di test dedicato.

6
00:00:20.360 --> 00:00:24.490
Ora, naturalmente, va bene usare Stubbs come abbiamo fatto qui.

7
00:00:24.590 --> 00:00:30.830
Nel caso in cui non si abbia realmente bisogno o voglia l'accesso al database nel caso in cui si vogliano velocizzare i

8
00:00:30.830 --> 00:00:32.720
test, è possibile gestire le funzionalità.

9
00:00:32.720 --> 00:00:35.060
Ovviamente avremmo potuto farlo anche lì.

10
00:00:35.090 --> 00:00:40.580
Ma voglio mostrare entrambi e ora va bene, ovviamente come sempre in internet troverai persone

11
00:00:40.670 --> 00:00:43.310
che sostengono fortemente le due direzioni.

12
00:00:43.400 --> 00:00:49.130
Ma in pratica trovi buoni argomenti per entrambe le alternative e quindi dovresti andare con quello

13
00:00:49.130 --> 00:00:49.910
che preferisci.

14
00:00:49.970 --> 00:00:56.150
E puoi anche cambiarlo in base al test in base a un test che deve essere più veloce o

15
00:00:56.150 --> 00:01:03.350
che non si preoccupa veramente dell'accesso al database o se è possibile verificare che il codice del database possa essere utile per

16
00:01:03.350 --> 00:01:08.930
il nostro stato qui, dove implicitamente tutti controlla che l'assegnazione dello stato di default funzioni perché

17
00:01:08.930 --> 00:01:12.260
stiamo controllando lo stato predefinito qui definito nel modello.

18
00:01:12.260 --> 00:01:18.440
Ora con quello lascia che avvolgo questo modulo anche testando alcune funzionalità dal Ft.

19
00:01:18.450 --> 00:01:24.830
Controller e qui la parte interessante del corso è che qui in realtà abbiamo un codice che

20
00:01:24.830 --> 00:01:32.030
si basa sull'utente autenticato come per la creazione di un post qui quando creiamo un post in realtà accediamo

21
00:01:32.030 --> 00:01:35.540
all'utente I. D. che dovrebbe essere parte dell'oggetto richiesta.

22
00:01:35.540 --> 00:01:38.390
Ora, perché l'utente I. D. parte dell'oggetto richiesta.

23
00:01:38.540 --> 00:01:41.820
A causa del middleware off proprio qui lo aggiungiamo.

24
00:01:41.900 --> 00:01:47.690
Quindi, come possiamo testare questo dato che ora abbiamo un controller che richiede effettivamente il middleware off che fa il

25
00:01:47.690 --> 00:01:48.520
suo lavoro.

26
00:01:48.740 --> 00:01:57.860
Come possiamo farlo funzionare se vogliamo solo testare il controller e non il flusso completo è super

27
00:01:57.860 --> 00:02:02.370
facile farlo funzionare perché all'inizio poteva sembrare difficile.

28
00:02:02.420 --> 00:02:09.680
È importante configurare i test passati in un oggetto di risposta alla richiesta e nella funzione successiva.

29
00:02:10.070 --> 00:02:16.820
E se hai codice che cerca di ottenere qualcosa dall'oggetto request come l'utente I. D. Ovviamente nella vera app impostata dal middleware e

30
00:02:16.820 --> 00:02:21.680
stiamo testando questo middleware ma per il controller possiamo solo simularlo e possiamo passare un oggetto request

31
00:02:21.680 --> 00:02:28.520
che ha semplicemente un utente I. D. e abbiamo finito.

32
00:02:28.520 --> 00:02:29.090
È tutto.

33
00:02:29.810 --> 00:02:37.100
Quindi scriviamo ora un test per un post di creazione e interagiamo con il database

34
00:02:37.250 --> 00:02:41.760
qui, quindi assicurati di creare post correttamente qui.

35
00:02:42.050 --> 00:02:50.570
E per esempio convalidare che questo post è stato davvero aggiunto agli array di post dei nostri utenti perché è tutto aggiungere un nuovo file qui nella cartella di test

36
00:02:50.660 --> 00:02:58.340
e lo chiamerò controller di feed punto J. S. e darò un'occhiata al controller

37
00:02:58.340 --> 00:03:04.580
off e in realtà copierò l'intero contenuto da lì e aggiunto nel controller del feed.

38
00:03:04.610 --> 00:03:10.070
E, naturalmente, cambio alcune cose che ho bisogno di accedere a Mongoose e così via anche se, anche in questo

39
00:03:10.080 --> 00:03:12.500
caso, voglio collegarmi a un database di test.

40
00:03:12.620 --> 00:03:17.400
Quindi qui non avrò bisogno del modello User.

41
00:03:17.400 --> 00:03:20.200
Ma il modello di modalità Post.

42
00:03:20.330 --> 00:03:27.560
Quindi prendiamolo dai post dei modelli e ovviamente non dal controller spento ma dal controller

43
00:03:27.560 --> 00:03:31.940
di alimentazione che ricevo dai feed dei controller.

44
00:03:32.140 --> 00:03:37.410
Ora tutti quindi descrivono questo come il controller di alimentazione non fa male immagino.

45
00:03:37.810 --> 00:03:43.450
E ora il tempo per il lavoro di inizializzazione che stiamo collegando al database di test potrebbe essere diverso

46
00:03:43.450 --> 00:03:48.600
per il post se vogliamo, ma voglio usare lo stesso che effettivamente installerò il mio utente fittizio

47
00:03:48.600 --> 00:03:55.560
perché ho bisogno di un utente un utente ha creato un post e questo dovrebbe essere il mio utente fittizio e potremmo impostare alcuni

48
00:03:55.560 --> 00:04:00.450
post fittizi, specialmente quando stiamo testando diverse azioni del controller come ottenere post e così via.

49
00:04:00.570 --> 00:04:02.970
Ma per creare un post ovviamente non ne ho bisogno.

50
00:04:03.060 --> 00:04:05.010
Quindi il mio utente fittizio è tutto ciò di cui ho bisogno.

51
00:04:05.040 --> 00:04:12.910
Quindi i test impostati qui vanno bene per me, non li mangio prima di ciascuno e dopo ciascuno, ma ho solo bisogno di un test

52
00:04:12.910 --> 00:04:19.210
case qui, quindi in realtà mi sbarazzerò dell'altro che terrò qui e comunque pulito i miei utenti in modo che

53
00:04:19.210 --> 00:04:25.660
i nostri test non siano influenzati da questo i nostri file di test non sono influenzati da questo test padre

54
00:04:25.840 --> 00:04:26.650
funziona davvero.

55
00:04:26.650 --> 00:04:29.110
Stare da solo.

56
00:04:29.140 --> 00:04:33.310
Quindi ora lavoriamo a quel singolo test e lì.

57
00:04:33.490 --> 00:04:40.750
Voglio testare se gli opposti creano con successo e poi aggiungerlo all'array

58
00:04:40.750 --> 00:04:41.860
posts

59
00:04:44.700 --> 00:04:58.530
del mio utente, l'utente che lo ha creato, quindi dovrebbe aggiungere un post creato ai post di un creatore qualcosa come questo.

60
00:04:58.620 --> 00:05:01.000
Ora non mi fermerò qui.

61
00:05:01.050 --> 00:05:03.440
Invece voglio davvero interagire con il database.

62
00:05:03.540 --> 00:05:11.710
Quindi non è necessario utilizzare l'accesso qui e interrompere tutto e daremo un'occhiata a quel controller di alimentazione.

63
00:05:11.930 --> 00:05:17.930
Ora vediamo che abbiamo bisogno di un paio di cose sull'oggetto richiesta sull'oggetto richiesta, per esempio.

64
00:05:18.050 --> 00:05:24.320
Abbiamo bisogno di un oggetto file che a sua volta ha bisogno di un percorso che è il percorso per l'immagine non deve essere un vero

65
00:05:24.320 --> 00:05:31.010
percorso deve solo essere lì in modo che possiamo estrarlo può essere una stringa fittizia anche se abbiamo bisogno di un titolo che ci serve un contenuto perché

66
00:05:31.040 --> 00:05:40.610
lo stiamo impostando nel nostro post e abbiamo bisogno di quell'utente I. D. per tornare nel controller off per essere nel file del controller di

67
00:05:40.610 --> 00:05:47.630
alimentazione qui dove configuro la mia richiesta come abbiamo visto che stiamo recuperando titolo e contenuto dal corpo, quindi abbiamo un oggetto file che ha

68
00:05:47.630 --> 00:05:53.200
una chiave di percorso e abbiamo un utente I. D ..

69
00:05:53.600 --> 00:06:01.250
Quindi in un controller di alimentazione nel corpo fisico qui abbiamo il titolo che potrebbe essere il post di test con il contenuto del post di test,

70
00:06:01.710 --> 00:06:09.390
non importa, ovviamente a meno che non lo si stia testando, abbiamo bisogno di un file object che abbia bisogno di un path key che possa essere ABC

71
00:06:09.390 --> 00:06:16.410
non ha importanza e abbiamo bisogno dell'utente I. D. che può essere impostato su X Y.

72
00:06:16.410 --> 00:06:20.750
Abbiamo solo bisogno di questi campi perché li stiamo usando nel controller.

73
00:06:20.790 --> 00:06:27.630
Ciò salverà quindi un post valido nel database e quindi estrarrà l'utente con l'utente I. D ..

74
00:06:28.110 --> 00:06:30.350
E ora qui abbiamo già la prima trappola.

75
00:06:30.360 --> 00:06:36.750
Potremmo incontrare l'utente I. D. conta davvero perché il creatore

76
00:06:37.110 --> 00:06:42.560
che assegniamo qui non ha importanza, ma rielaborare in seguito e collegarsi all'oggetto utente del database.

77
00:06:42.600 --> 00:06:45.150
Abbiamo bisogno di un vero utente I. D ..

78
00:06:45.360 --> 00:06:46.880
Per fortuna ne abbiamo preso uno.

79
00:06:46.890 --> 00:06:49.740
Stiamo creando un utente con la nostra idea codificata qui.

80
00:06:49.800 --> 00:06:53.280
Quindi usiamo papà invece di X Y e lo passiamo.

81
00:06:54.360 --> 00:06:58.360
Quindi ora cosa un field controller dovrebbe essere in grado di salvare un post e quindi effettuare la connessione a un utente.

82
00:06:58.440 --> 00:07:01.210
E a quel post, quell'oggetto utente fa la coda.

83
00:07:03.950 --> 00:07:11.990
Ora per verificare se ha funzionato davvero ho bisogno di accedere al nostro oggetto utente al di

84
00:07:12.110 --> 00:07:23.650
fuori di questa funzione del controller e per questo non possiamo solo memorizzare sono il risultato del salvataggio dell'utente qui in una costante utente sicura

85
00:07:23.650 --> 00:07:30.750
e in realtà restituire che qui in quel controller non cambierà il comportamento del controller.

86
00:07:30.750 --> 00:07:36.150
Continuiamo a inviare il loro codice di stato della risposta e tutto ciò che funziona ancora

87
00:07:36.150 --> 00:07:42.520
bene, ma ora il nostro test ha l'aspetto di convalidare l'utente creato e ora nel controllore del feed qui.

88
00:07:42.780 --> 00:07:46.780
Non stiamo richiamando il controller o la registrazione o qualcosa del genere.

89
00:07:46.920 --> 00:07:53.190
Invece di richiamare il controller del feed creare un post, passiamo sul nostro oggetto request.

90
00:07:53.280 --> 00:07:56.710
Ora per l'oggetto risposta dobbiamo assicurarci di non ottenere un errore.

91
00:07:56.730 --> 00:08:00.450
Quindi dobbiamo fornire un metodo di stato e un metodo adiacente.

92
00:08:00.450 --> 00:08:04.170
Anche se non ci interessa ciò che fanno ma abbiamo bisogno di loro.

93
00:08:04.170 --> 00:08:11.520
Così passo in un oggetto di risposta fittizio che sei coda, che è un oggetto che ha bisogno di questi due metodi in modo

94
00:08:11.520 --> 00:08:14.070
che possano essere chiamati senza generare errori.

95
00:08:14.070 --> 00:08:20.690
Quindi lo stato è una funzione che non fa nulla e Jason è una funzione che non fa nulla qui.

96
00:08:20.700 --> 00:08:22.260
Perché non stanno facendo nulla.

97
00:08:22.260 --> 00:08:24.110
Perché per questo test non mi interessa.

98
00:08:24.240 --> 00:08:31.270
Così passo in questo e passo in questa prossima funzione fittizio qui.

99
00:08:31.280 --> 00:08:33.920
Ora questa è una funzione asincrona.

100
00:08:33.920 --> 00:08:39.800
Abbiamo qui la parola chiave async e quindi ricorre automaticamente una promessa e

101
00:08:39.800 --> 00:08:42.170
quindi nel blocco qui.

102
00:08:42.300 --> 00:08:46.300
Voglio che tu trovi le mie aspettative ora.

103
00:08:46.370 --> 00:08:51.890
So che otterremo qualcosa qui perché sto restituendo l'utente salvato ora, a proposito, se non ti

104
00:08:51.890 --> 00:08:56.460
piace questo schema di modifica del controller solo in modo che possiamo testarlo.

105
00:08:56.600 --> 00:09:02.360
Ovviamente l'alternativa sarebbe semplicemente testare qualche altra azione del controller che ha effettivamente bisogno di un oggetto utente

106
00:09:02.660 --> 00:09:08.990
fisso con il suo post e quindi semplicemente chiamare crea post e poi quella azione del controller medio accodare

107
00:09:09.000 --> 00:09:14.340
ed eseguire 2 azioni controller nello stesso test e testare solo qualcosa su il risultato.

108
00:09:14.340 --> 00:09:19.490
La seconda azione, ma qui mi limito ad accelerare e si fonde in un'azione di un controller.

109
00:09:19.490 --> 00:09:31.770
Così qui ottengo il mio utente salvato e mi aspetto che l'utente salvato abbia una proprietà di post

110
00:09:31.770 --> 00:09:41.870
che dovrebbero essere impostati e mi aspetto che i post degli utenti salvati siano di

111
00:09:44.900 --> 00:09:48.070
lunghezza pari a uno.

112
00:09:50.070 --> 00:09:53.060
Perché dovrebbe esserci un nuovo post aggiunto.

113
00:09:54.050 --> 00:09:57.050
E lì dopo abbiamo chiamato Dun.

114
00:09:57.140 --> 00:09:58.700
Ora proviamo.

115
00:09:58.730 --> 00:10:01.510
Eseguiamo il test NPM qui scarabocchiamo.

116
00:10:01.520 --> 00:10:09.380
Ora ci vuole un po 'perché ovviamente abbiamo un paio di test diversi.

117
00:10:09.600 --> 00:10:15.720
Ora ovviamente ho un errore qui perché ho un problema nel mio file di test e nell'importazione del modello Post.

118
00:10:15.720 --> 00:10:16.950
Ma ovviamente questo non era corretto.

119
00:10:16.950 --> 00:10:19.140
In realtà non sto usando il possibile qui.

120
00:10:19.140 --> 00:10:21.750
Ho bisogno della scheda controller di sconfitta per quanto riguarda i modelli.

121
00:10:21.750 --> 00:10:25.020
Abbiamo ancora bisogno di usare il nostro controller, ovviamente, perché sto creando un utente.

122
00:10:25.170 --> 00:10:26.760
Questo è il mio errore qui.

123
00:10:26.790 --> 00:10:30.400
Smettiamola e riproviamo il test NPM da quel momento in poi.

124
00:10:30.400 --> 00:10:33.780
Quindi ora non abbiamo un errore qui nel file di test e ora qui

125
00:10:38.190 --> 00:10:39.210
stiamo ricevendo un errore.

126
00:10:39.210 --> 00:10:46.200
Il target non può essere nullo o indefinito e ciò deriva dalla nostra convalida qui nel controller del feed.

127
00:10:46.200 --> 00:10:48.590
Come puoi vedere, abbiamo solo un caso di test.

128
00:10:48.600 --> 00:10:50.030
Quindi è questo il caso di test.

129
00:10:50.220 --> 00:10:57.990
Quindi l'utente salvato sembra essere no o sul volo anche se sto cercando di restituirlo qui dove ho salvato il mio utente salvato e che

130
00:10:58.020 --> 00:11:05.320
in realtà è ancora un problema con la mia configurazione di prova che faccio per trovare il mio oggetto di risposta con lo

131
00:11:05.320 --> 00:11:07.920
stato e le funzioni di Jason adesso.

132
00:11:08.080 --> 00:11:13.810
Il piccolo problema che ho, se guardiamo da vicino, è che chiamiamo Jason Mefford qui

133
00:11:13.810 --> 00:11:18.250
non sull'oggetto risposta ma sul risultato della chiamata del metodo status.

134
00:11:18.280 --> 00:11:24.130
Quindi, per fare in modo che funzionino in un controller di feed, dobbiamo assicurarci che funzioni

135
00:11:24.130 --> 00:11:30.040
qui per uno stato che chiamiamo prima a restituirlo in modo che torniamo al riferimento numerico sull'intero

136
00:11:30.070 --> 00:11:34.500
oggetto che poi è passato e ha questa funzione Jason Qui.

137
00:11:34.510 --> 00:11:40.990
Quindi, se questa regolazione esegue nuovamente il test NPM, vediamo se superiamo ora e questo sembra migliore ora sta

138
00:11:40.990 --> 00:11:46.390
passando sei per il controller del feed e se verificherebbe una lunghezza pari a zero, per

139
00:11:46.390 --> 00:11:48.850
esempio Dan, in realtà dovrebbe fallire.

140
00:11:48.850 --> 00:11:50.260
Quindi, se ora

141
00:11:57.980 --> 00:12:04.640
lo lascio ora lo vedrete fallito e se scorriamo vedremo che non è previsto array con lunghezza pari a

142
00:12:04.640 --> 00:12:12.990
1 alla lunghezza di 0 ma ne ha ottenuto uno così correttamente che non ha funzionato e non fallisce se Controllo per correttamente.

143
00:12:13.100 --> 00:12:17.860
Ora questo è un campione di tessuto per testare qui il controller di alimentazione chiaramente come puoi vedere.

144
00:12:18.160 --> 00:12:21.980
E ora con quello abbiamo scritto alcuni bei test qui.

145
00:12:21.980 --> 00:12:27.050
Spero di averti dato una buona introduzione su come funzionano i test e come devi pensarci in

146
00:12:27.050 --> 00:12:27.460
generale.

147
00:12:27.470 --> 00:12:33.950
Ora lasciatemi concludere, perché so che a questo punto può ancora sentirsi completamente travolgente e non

148
00:12:33.950 --> 00:12:34.970
deve essere.
