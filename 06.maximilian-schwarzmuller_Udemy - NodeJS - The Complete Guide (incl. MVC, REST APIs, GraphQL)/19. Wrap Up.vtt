WEBVTT
1
00:00:02.170 --> 00:00:08.180
That's it for this module. You learned a lot about cookies and sessions. Now about cookies,

2
00:00:08.460 --> 00:00:11.080
they're great for storing data on the client side,

3
00:00:11.080 --> 00:00:16.750
so in the browser and since they're stored there, you should not store sensitive data in cookies because

4
00:00:16.760 --> 00:00:18.480
they can be viewed by the user,

5
00:00:18.610 --> 00:00:24.280
that might not be the worst part because each user can only view his own cookies but they can also be

6
00:00:24.280 --> 00:00:25.230
manipulated

7
00:00:25.330 --> 00:00:31.120
and you don't want to let your users control whether they are authenticated or not by simply switching

8
00:00:31.120 --> 00:00:33.010
some cookie value.

9
00:00:33.070 --> 00:00:38.710
Now you can configure cookies in a broad variety and often you won't do that, at least not directly by

10
00:00:38.710 --> 00:00:40.090
setting that header

11
00:00:40.150 --> 00:00:43.390
instead you'll use something like the session package which also uses a cookie

12
00:00:43.480 --> 00:00:44.740
but more on that in a second

13
00:00:44.950 --> 00:00:47.770
but you can configure them, for example to expire.

14
00:00:48.040 --> 00:00:53.260
By default they will expire when the browser is closed and such cookies that expire when the browser

15
00:00:53.260 --> 00:00:55.600
is closed are called session cookies.

16
00:00:55.600 --> 00:00:58.050
Now this term can be confusing,

17
00:00:58.240 --> 00:01:04.270
session cookies are not cookies necessarily used to identify a session, a concept to which I'll come back in

18
00:01:04.270 --> 00:01:05.080
a second,

19
00:01:05.080 --> 00:01:10.390
they're just called session cookie because they only survive as long as you are using that page in

20
00:01:10.390 --> 00:01:12.100
the current browser.

21
00:01:12.180 --> 00:01:17.860
You can also set an expiry date or an age after which the cookie will get invalid and that is thing called

22
00:01:17.860 --> 00:01:19.090
a permanent cookie,

23
00:01:19.120 --> 00:01:26.440
it's not permanent in the sense of lives infinitely long but in a sense of it does not necessarily go

24
00:01:26.440 --> 00:01:30.390
away when you close the browser, it will still be there when you reopen the browser,

25
00:01:30.430 --> 00:01:34.500
it will be invalid deleted once it expired.

26
00:01:34.540 --> 00:01:39.070
Now cookies work well together with sessions but they're not limited to using with sessions,

27
00:01:39.070 --> 00:01:42.510
keep that tracking cookie in mind as an example.

28
00:01:42.850 --> 00:01:45.670
Sessions are another great concept,

29
00:01:45.790 --> 00:01:49.210
you use them to store data on a server not on the client

30
00:01:49.210 --> 00:01:55.150
and therefore since they're on the server and they can't be viewed or manipulated by your users, they

31
00:01:55.150 --> 00:01:59.770
are great for storing sensitive data that should survive across requests

32
00:01:59.890 --> 00:02:01.190
because that's important too.

33
00:02:01.240 --> 00:02:04.760
You could store data in requests as we did it earlier in this course

34
00:02:04.960 --> 00:02:11.170
but then the data is lost for every new request, with sessions the data survives. Now you store anything

35
00:02:11.170 --> 00:02:17.110
in sessions, you could store your shopping cart there but often you use them for authenticating users,

36
00:02:17.170 --> 00:02:21.280
for storing user data in there or the authentication status in general.

37
00:02:21.280 --> 00:02:26.890
Now a session needs a cookie to be identified and that's not the session cookie which is simply a cookie

38
00:02:26.890 --> 00:02:29.890
that dies after you close the browser,

39
00:02:30.040 --> 00:02:33.420
you can use a session or a permanent cookie for that actually

40
00:02:33.460 --> 00:02:39.910
and on express session, the package we used which sets the cookie automatically by the way there, there if you remember

41
00:02:40.000 --> 00:02:43.650
you could configure the cookie when registering the session middleware.

42
00:02:43.840 --> 00:02:45.970
So we're not talking about that here

43
00:02:45.970 --> 00:02:52.060
instead you just have a cookie that is used to identify a session and that is important because otherwise

44
00:02:52.060 --> 00:02:53.760
you have that data on your server,

45
00:02:53.770 --> 00:02:56.730
that is great but how do you know to which user it belongs?

46
00:02:56.830 --> 00:02:59.230
Well for that you need the cookie.

47
00:02:59.370 --> 00:03:02.350
This is how sessions work and how to use cookies

48
00:03:02.650 --> 00:03:08.310
and since the session is also stored on the server, you can choose from different storages,

49
00:03:08.470 --> 00:03:14.400
you could use a MySQL storage, you could use file storage or as we did it here, you could use mongodb

50
00:03:14.470 --> 00:03:16.990
to store your session data.

51
00:03:16.990 --> 00:03:23.980
So these are sessions and cookies, crucial concepts which you might not always control and use directly

52
00:03:23.980 --> 00:03:25.470
but often indirectly,

53
00:03:25.570 --> 00:03:32.380
for example with authentication, something which we will come back to the next module where we will

54
00:03:32.380 --> 00:03:38.650
implement a real authentication workflow with sign up, logging in, logging out, storing real user data,

55
00:03:38.650 --> 00:03:41.130
creating users and all that fun stuff.
