WEBVTT
1
00:00:02.310 --> 00:00:05.270
Kami telah mencapai banyak hal di bagian ini.

2
00:00:05.520 --> 00:00:12.760
Dan saya mencatat semua kode ini terlihat seperti mengintimidasi dan jangan khawatir itu akan menjadi lebih mudah tetapi saya merasa sangat

3
00:00:12.810 --> 00:00:18.840
penting untuk mempelajarinya dengan cara yang sulit terlebih dahulu sehingga Anda tidak akan pernah melupakan apa yang

4
00:00:18.840 --> 00:00:20.650
terjadi di balik layar.

5
00:00:20.790 --> 00:00:27.930
Sekarang satu hal penting yang saya perhatikan bahwa orang sering bergumul adalah bahwa urutan pelaksanaan kode

6
00:00:27.930 --> 00:00:32.430
Anda di sini belum tentu urutan di mana Anda menulisnya.

7
00:00:32.460 --> 00:00:41.490
Misalnya tahun ini akan benar-benar mengeksekusi setelah kode ini sehingga bahkan akan mengeksekusi setelah kami sudah

8
00:00:41.490 --> 00:00:43.260
mengirim respons.

9
00:00:43.260 --> 00:00:50.190
Ini memiliki dua implikasi penting untuk satu pengiriman respons tidak berarti bahwa acara kami mendengarkan

10
00:00:50.190 --> 00:00:51.190
hutang kami.

11
00:00:51.360 --> 00:00:55.010
Mereka masih akan mengeksekusi bahkan jika responsnya sudah hilang.

12
00:00:55.200 --> 00:01:00.920
Tetapi itu juga berarti bahwa jika kita melakukan sesuatu pada pendengar acara yang seharusnya memengaruhi respons, ini adalah

13
00:01:00.940 --> 00:01:02.620
cara yang salah untuk mengaturnya.

14
00:01:02.640 --> 00:01:06.200
Kami kemudian juga harus memindahkan kode respons ke pendengar acara.

15
00:01:06.210 --> 00:01:08.020
Jika kita memiliki ketergantungan seperti itu.

16
00:01:08.550 --> 00:01:16.750
Tetapi itu juga berarti bahwa sangat penting untuk memahami bahwa kami meminta atau kode seperti server membuat

17
00:01:16.750 --> 00:01:17.420
HTP.

18
00:01:17.610 --> 00:01:26.070
Ini adalah beberapa contoh di mana tidak ada pengejaran menggunakan pola di mana Anda melewati suatu fungsi ke suatu fungsi

19
00:01:26.070 --> 00:01:33.140
dan simpul akan menjalankan fungsi DS yang diteruskan pada titik waktu berikutnya yang disebut asinkron.

20
00:01:33.240 --> 00:01:38.910
Sekarang tidak selalu terjadi bahwa fungsi yang lewat harus dieksekusi pada titik waktu

21
00:01:39.120 --> 00:01:45.570
berikutnya, tetapi tidak ada J yang telah menggunakan pola ini secara berat dan tentu saja memberi tahu

22
00:01:45.570 --> 00:01:51.990
Anda kapan hal ini terjadi dan kapan node mengeksekusi sesuatu secara tidak sinkron sedemikian rupa kasus.

23
00:01:52.330 --> 00:01:56.340
Tidak ada peluang tidak akan segera menjalankan fungsi itu.

24
00:01:56.500 --> 00:02:03.230
Alih-alih apa yang dilakukannya ketika pertama kali menemukan baris ini adalah ia hanya akan

25
00:02:03.280 --> 00:02:06.670
menambah pendengar tanpa acara baru secara internal.

26
00:02:06.940 --> 00:02:12.920
Dalam hal ini untuk acara akhir atas permintaan yang akan dipicu secara otomatis setelah perubahan tidak

27
00:02:12.940 --> 00:02:13.330
dilakukan.

28
00:02:13.330 --> 00:02:17.270
Parsing permintaan jadi ini sesuatu yang tidak ada pengejaran lakukan untuk Anda.

29
00:02:18.030 --> 00:02:20.990
Dan kemudian akan memanggil fungsi itu untuk Anda.

30
00:02:21.030 --> 00:02:28.410
Setelah selesai maka pada akhirnya Anda bisa memikirkan ini seperti tidak ada kejar-kejaran memiliki pendataan internal acara dan

31
00:02:28.650 --> 00:02:34.620
pendengar untuk acara ini dan fungsi seperti ini adalah pendengar dan ketika disajikan sesuatu

32
00:02:34.620 --> 00:02:41.680
terjadi sehingga ketika tidak ada kesempatan dilakukan mengurai permintaan Anda itu akan pergi melalui registri dan lihat.

33
00:02:41.790 --> 00:02:45.430
Saya sudah selesai dengan permintaan jadi sekarang saya harus mengirim acara akhir.

34
00:02:45.440 --> 00:02:52.560
Mari kita lihat pendengar mana yang saya miliki untuk itu dan kemudian akan menemukan fungsi ini dan fungsi lain

35
00:02:52.560 --> 00:02:59.910
yang mungkin telah Anda daftarkan untuk itu dan sekarang akan memanggil mereka tetapi itu tidak akan mengeksekusi kode rata-rata dan

36
00:02:59.910 --> 00:03:02.120
itu sangat penting untuk dipahami.

37
00:03:02.430 --> 00:03:10.010
Jadi misalnya di sini sekarang karena saya memindahkan respons balik dan ke fungsi ini alirannya seperti ini.

38
00:03:10.080 --> 00:03:15.070
Sekarang akan mencapai seolah-olah pernyataan dan jika kondisi ini dipenuhi itu akan masuk ke dalamnya.

39
00:03:15.890 --> 00:03:21.430
Kemudian akan mendaftarkan DS ke penangan dan tidak segera menjalankan kedua fungsi ini.

40
00:03:21.470 --> 00:03:27.950
Sebaliknya fungsi hanya terdaftar secara internal di acara itu emitor registry dan kemudian akan langsung melompat

41
00:03:27.960 --> 00:03:35.330
ke baris berikutnya dan karena itu sekarang jika saya akan me-restart server saya dan menyimpan ke kode dan me-restart

42
00:03:35.330 --> 00:03:37.220
server saya di sini.

43
00:03:38.750 --> 00:03:44.790
Anda akan melihat bahwa jika saya memasukkan sesuatu di sini saya benar-benar diarahkan ke halaman ini atau bahkan tidak mengarahkannya seperti yang

44
00:03:44.790 --> 00:03:45.640
Anda lihat.

45
00:03:45.740 --> 00:03:53.570
Tidak ada 300 kode status alih-alih hanya Lote di halaman ini karena ia mengeksekusi baris-baris ini karena seperti yang saya

46
00:03:53.600 --> 00:03:57.240
sebutkan beberapa kali ini tidak akan langsung dieksekusi.

47
00:03:57.380 --> 00:04:02.540
Dan karenanya pernyataan pengembalian ini tidak akan keluar dari fungsi menyeluruh ini di sini.

48
00:04:02.930 --> 00:04:08.060
Alih-alih, ia hanya mencatat panggilan balik ini dan segera pindah ke baris berikutnya.

49
00:04:08.210 --> 00:04:12.260
Dan pada akhirnya akan mengeksekusi baris ini tapi itu sudah terlambat.

50
00:04:12.350 --> 00:04:17.990
Itulah sebabnya kami tidak dapat mengatur kesalahan hetero di sini karena sudah lama memindahkan dan mengeksekusi

51
00:04:18.020 --> 00:04:18.860
kode ini.

52
00:04:18.860 --> 00:04:24.800
Ketika tiba-tiba penguraian permintaan selesai dan dieksekusi kode ini dan mencoba mengirim lagi

53
00:04:24.800 --> 00:04:29.570
respons yang jelas sudah terlambat karena sudah ada di sini.

54
00:04:29.570 --> 00:04:37.850
Sekarang saya tahu bahwa ini sulit untuk membungkus kepala Anda tetapi itu adalah konsep penting bahwa Anda

55
00:04:37.850 --> 00:04:44.500
dapat mendaftarkan fungsi kode yang berjalan di masa depan tetapi belum tentu sekarang.

56
00:04:44.660 --> 00:04:52.500
Dan oleh karena itu baris kode berikutnya kode ini di sini dapat berjalan atau akan berjalan sebelum kode ini hanya

57
00:04:52.500 --> 00:04:56.900
karena itu hanya panggilan balik yang akan dipanggil suatu saat nanti.

58
00:04:57.100 --> 00:05:04.070
Dan pengaturan ini penting karena jika tidak, node harus berhenti sampai selesai, berhenti sampai

59
00:05:04.070 --> 00:05:11.180
ia menulis file dan jika itu akan memperlambat server kami dan tidak dapat menangani permintaan

60
00:05:11.270 --> 00:05:15.970
masuk kami atau melakukan hal semacam itu sampai selesai.

61
00:05:16.010 --> 00:05:17.930
Dan bukan itu yang kita inginkan.

62
00:05:17.930 --> 00:05:21.080
Kami tidak ingin memblokir eksekusi kode kami.

63
00:05:21.080 --> 00:05:27.350
Kami selalu ingin berada di acara tersebut untuk menunggu acara baru mengulangi acara tersebut dan kemudian hanya mengeksekusi

64
00:05:27.350 --> 00:05:32.500
kode setelah itu akan dieksekusi dan tidak pernah memblokir acara itu terlalu lama.

65
00:05:32.600 --> 00:05:40.020
Dan inilah mengapa kami memiliki pengaturan ini dan ini memiliki satu implikasi untuk garis ini dan untuk aplikasi garis ini

66
00:05:40.040 --> 00:05:42.710
untuk desain adalah kami mencapai terlalu dini.

67
00:05:42.800 --> 00:05:46.580
Jadi untuk yang putih ini kita harus benar-benar kembali ke sini.

68
00:05:47.390 --> 00:05:50.870
Kami hanya mengembalikan permintaan agar ini bisa dieksekusi.

69
00:05:50.930 --> 00:05:52.840
Tetapi garis sesudahnya tidak.

70
00:05:53.210 --> 00:05:57.770
Dan aplikasi penting tentang baris ini akan dibahas dalam kuliah berikutnya.
