1
00:00:02,100 --> 00:00:04,100
So what is mongodb?

2
00:00:04,130 --> 00:00:10,910
Now let me first of all tell you that I do actually have a complete course for developers on mongodb,

3
00:00:10,920 --> 00:00:15,930
so you might want to check that out if you want to learn way more about mongodb than I'll be able

4
00:00:15,930 --> 00:00:17,450
to cover in this course

5
00:00:17,460 --> 00:00:23,460
but now with that let me start with a brief introduction to mongodb at least, what is it? Mongodb

6
00:00:23,580 --> 00:00:30,420
is both the name of the company which developed mongodb but also then of their most famous product,

7
00:00:30,660 --> 00:00:38,010
a database solution, a database engine you could say, a tool you can use to run very efficient NoSQL

8
00:00:38,010 --> 00:00:39,080
databases.

9
00:00:39,180 --> 00:00:45,630
The name stems from the word humongous because mongodb was built for one major purpose, that you could

10
00:00:45,630 --> 00:00:47,350
store and work

11
00:00:47,430 --> 00:00:53,440
and that really is important, the work part, that you could store and work with lots and lots of data.

12
00:00:53,460 --> 00:01:00,720
So mongodb is built for large scale applications, mongodb is built to quickly query data, store

13
00:01:00,720 --> 00:01:02,340
data, interact with data,

14
00:01:02,380 --> 00:01:09,870
so it's really fast and it's really awesome database philosophy that is behind NoSQL databases and

15
00:01:09,870 --> 00:01:10,930
therefore also behind

16
00:01:10,930 --> 00:01:12,280
mongodb.

17
00:01:12,390 --> 00:01:13,630
Now how does it work?

18
00:01:13,920 --> 00:01:20,690
Well just like in the SQL world, we spin up a mongodb server and there we can have multiple databases,

19
00:01:20,790 --> 00:01:27,990
for example a shop database. Now in such a database in the SQL world, we would have multiple tables,

20
00:01:28,380 --> 00:01:30,620
in the NoSQL mongodb world

21
00:01:30,660 --> 00:01:35,260
we have multiple collections like the users and orders collection for example.

22
00:01:35,490 --> 00:01:41,610
Now inside of each collection, we don't have so-called records but we have a couple of documents. Now

23
00:01:41,620 --> 00:01:43,360
documents also look different

24
00:01:43,380 --> 00:01:47,220
than records did and it's not just about different names being used,

25
00:01:47,220 --> 00:01:51,070
the core philosophy behind the database really is a totally different one.

26
00:01:51,300 --> 00:01:58,500
For example mongodb is schemaless, inside of one collection, your documents which is your data, your

27
00:01:58,500 --> 00:02:04,350
entry so to say don't have to have the same structure. In SQL that was totally different,

28
00:02:04,380 --> 00:02:09,690
we had a users table there and in that users table, we had an ID, a name, an email, a password.

29
00:02:09,690 --> 00:02:11,520
Now here that is different,

30
00:02:11,580 --> 00:02:15,130
here we can have any kind of data in one and the same collection.

31
00:02:15,280 --> 00:02:21,240
Often you will still end up with an at least similar structure but you're not forced to have exactly

32
00:02:21,240 --> 00:02:22,170
the same structure

33
00:02:22,200 --> 00:02:28,680
and this gives you more flexibility, also for your application to grow and to change its data requirements

34
00:02:28,710 --> 00:02:29,490
over time

35
00:02:29,490 --> 00:02:34,010
without that being difficult to depict in your database world.

36
00:02:34,260 --> 00:02:38,420
So this is one thing, a document in mongodb looks like this

37
00:02:38,520 --> 00:02:41,990
and this looks a lot like javascript object notation

38
00:02:41,990 --> 00:02:47,850
and to be precise it kind of is. Mongodb uses json to store data in collections,

39
00:02:47,910 --> 00:02:51,420
so every document you store looks something like this,

40
00:02:51,540 --> 00:02:57,330
it follows the javascript object notation format. To be very precise mongodb uses something which

41
00:02:57,330 --> 00:03:03,840
is called bson for binary json but that only means that mongodb kind of transforms this behind

42
00:03:03,840 --> 00:03:06,930
the scenes before storing it in the files

43
00:03:06,930 --> 00:03:08,450
but you don't have to worry about that,

44
00:03:08,520 --> 00:03:15,660
you will basically use it as json. Now such a json document is basically the same as a javascript

45
00:03:15,660 --> 00:03:22,920
object you could say and there as you see, we can have nested or as mongodb calls them, embedded

46
00:03:23,040 --> 00:03:27,380
documents, for example the address here would hold an embedded document.

47
00:03:27,600 --> 00:03:31,450
And you can also have arrays inside of that document and that array can

48
00:03:31,470 --> 00:03:37,940
like in this case hold other documents, other objects or it could also just hold strings, numbers,

49
00:03:37,980 --> 00:03:39,240
anything of that kind.

50
00:03:39,360 --> 00:03:47,040
So again for the data, you have great flexibility and the existence of these nested documents also means

51
00:03:47,340 --> 00:03:52,830
that relations are managed a bit differently in the NoSQL mongodb world.

52
00:03:52,830 --> 00:03:54,890
So let me come back to that in the next lecture.
