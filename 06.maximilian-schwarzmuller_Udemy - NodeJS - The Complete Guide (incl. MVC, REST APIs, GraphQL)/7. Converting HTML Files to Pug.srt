1
00:00:02,130 --> 00:00:05,850
So let's convert all these html files to pug templates now

2
00:00:05,960 --> 00:00:12,700
and for this, I'll start with add product and create an add-product.pug file in the views folder.

3
00:00:12,720 --> 00:00:18,090
Now again I will create a html5 skeleton with the help of emmet here by typing html, selecting

4
00:00:18,090 --> 00:00:18,340
that

5
00:00:18,360 --> 00:00:21,390
html5 template here and hitting tab,

6
00:00:21,600 --> 00:00:24,050
so this already gives us a nice start.

7
00:00:24,060 --> 00:00:33,120
Now I'll set the title to add product and now I want to convert this form to pug and of course the header

8
00:00:33,300 --> 00:00:37,840
too. Now the header is something we already got in the shop so we can just copy that here,

9
00:00:38,120 --> 00:00:41,820
move it over to add product in the body like this,

10
00:00:41,820 --> 00:00:46,820
just make sure that you move the active class from the first anchor tag to the second one

11
00:00:46,830 --> 00:00:52,950
because now this is the active route and of course I also want to add my main section with the form

12
00:00:52,980 --> 00:01:02,390
now. I'll again reverse engineer it by copying the main html code, going in there and next to the header,

13
00:01:02,590 --> 00:01:03,660
I want to add it.

14
00:01:03,700 --> 00:01:10,390
Main is now just main, the form then is nested in that so let's indent it, the form has this class so

15
00:01:10,390 --> 00:01:15,570
let's chain this and the form also has attributes

16
00:01:15,620 --> 00:01:19,980
so let's add them here as a comma separated list in brackets.

17
00:01:21,040 --> 00:01:26,090
Now we can indent the div here because that is of course nested in the form,

18
00:01:26,100 --> 00:01:31,390
the div has this class and you learned that a div can also be omitted then so you can just have dot and the

19
00:01:31,390 --> 00:01:38,870
class to render a div. And then in there we have the label, the label here has an attribute,

20
00:01:38,890 --> 00:01:45,260
so let's add this and it has some text which is separated with a whitespace as you learned.

21
00:01:45,260 --> 00:01:52,200
Now we also have an input here, input of type text so let's add these brackets

22
00:01:52,280 --> 00:02:01,580
set here to render some attributes separated with commas and the id can actually be rendered separately

23
00:02:02,450 --> 00:02:04,200
with a hashtag in front of it,

24
00:02:04,280 --> 00:02:06,470
again using its css selector,

25
00:02:06,470 --> 00:02:08,190
something you already solve for the class,

26
00:02:08,210 --> 00:02:12,580
this also is the css selector for this class, pug uses these selectors,

27
00:02:12,590 --> 00:02:14,840
so now you have #title.

28
00:02:14,870 --> 00:02:19,760
Now let's remove the closing tag of the div and let's also add the button, it's indented because it's

29
00:02:19,760 --> 00:02:20,780
part of the form so

30
00:02:20,780 --> 00:02:23,380
let's make sure it's in the form,

31
00:02:23,420 --> 00:02:25,640
let's give that the button class

32
00:02:25,640 --> 00:02:34,750
don't forget this and let's add the attribute list to make this a submit button, like that and then a

33
00:02:34,770 --> 00:02:37,490
whitespace to separate the add product text.

34
00:02:39,200 --> 00:02:42,600
Let's remove the closing tags and that should be it.

35
00:02:42,600 --> 00:02:45,280
Now let's also render some dynamic content here,

36
00:02:45,420 --> 00:02:49,670
for example add product here, this title. I'll again

37
00:02:49,800 --> 00:02:54,150
output this dynamically, page title for example,

38
00:02:54,150 --> 00:02:59,300
now we have to make sure that we pass this key into this template and we do render this template in

39
00:02:59,340 --> 00:03:03,380
admin.js. So here where I do send this file,

40
00:03:03,420 --> 00:03:04,920
I don't send this file

41
00:03:04,920 --> 00:03:09,080
instead I now render, I render my admin file here,

42
00:03:09,090 --> 00:03:15,750
the admin excuse me not the admin, the add-product.pug file, this is automatically picked then and I pass in an

43
00:03:15,750 --> 00:03:18,050
object which holds the key value pairs

44
00:03:18,050 --> 00:03:23,670
I want to be able to access in the template and there, I got my page title key,

45
00:03:23,790 --> 00:03:24,510
so that key

46
00:03:24,510 --> 00:03:26,110
I'm trying to access here,

47
00:03:26,190 --> 00:03:37,150
I got that and I will assign a title of add product, just like that. With that if we reload,

48
00:03:37,210 --> 00:03:41,430
this is gone because the server restarted due to our server side changes.

49
00:03:41,690 --> 00:03:46,970
Now if I click add product, this is the html code by the looks of it,

50
00:03:47,060 --> 00:03:51,260
I forgot to add the imports,

51
00:03:51,700 --> 00:03:58,240
yeah I need to of course also import my stylesheets, so let's copy the links from shop.pug and

52
00:03:58,250 --> 00:04:00,410
add them here in the header.

53
00:04:00,530 --> 00:04:01,550
Let's also check the add

54
00:04:01,550 --> 00:04:03,270
product html file,

55
00:04:03,560 --> 00:04:05,870
I also need to import the forms.css

56
00:04:05,910 --> 00:04:07,540
file as you can see.

57
00:04:07,670 --> 00:04:08,970
So let's duplicate this here,

58
00:04:08,960 --> 00:04:16,400
this line and also add this import. Now no server restart is required because we just changed the template

59
00:04:16,520 --> 00:04:18,630
and therefore nodemon doesn't restart

60
00:04:18,750 --> 00:04:21,290
and now the reload, this looks much better

61
00:04:21,820 --> 00:04:23,230
and let's give this a try,

62
00:04:23,240 --> 00:04:25,010
it also still works.

63
00:04:25,010 --> 00:04:25,550
So that's it,

64
00:04:25,550 --> 00:04:28,580
now let's also work on the 404 page. For this

65
00:04:28,610 --> 00:04:36,360
I'll add a 404.pug file here and I will again create a normal html5 skeleton,

66
00:04:36,440 --> 00:04:43,330
I will say page not found here and I will already copy the, what do you need,

67
00:04:43,340 --> 00:04:44,660
the main css file,

68
00:04:44,660 --> 00:04:52,000
I will copy that import here from the add-product.pug file, this link, let's copy it over to the 404.pug

69
00:04:52,070 --> 00:04:58,630
file so that we got that. And then in the 404.html file, I get the header and I got Page Not Found,

70
00:04:58,820 --> 00:05:01,190
well we got the header already in add product so

71
00:05:01,190 --> 00:05:03,170
let's copy the header here,

72
00:05:03,410 --> 00:05:11,130
move that 404.pug into the body by indenting there and next to the header inside the body,

73
00:05:11,180 --> 00:05:14,150
I'll add a h1 tag where I say page not found.

74
00:05:14,480 --> 00:05:15,940
And with that we should have it,

75
00:05:15,980 --> 00:05:20,420
now let's just make sure that this gets rendered and for that, we have to go to the app.js file

76
00:05:20,570 --> 00:05:25,620
because that is where we have our catch all middleware and there instead of sending a file,

77
00:05:25,640 --> 00:05:33,130
I will now also render the 404 file and as before, it will automatically look in the views folder

78
00:05:33,170 --> 00:05:41,870
due to our setup and it will look for .pug files. So with that, if I now enter any random path which doesn't

79
00:05:41,870 --> 00:05:44,970
exist, we indeed get page not found.

80
00:05:45,110 --> 00:05:49,450
So this is now working and this is now using pug as a templating engine.

81
00:05:49,580 --> 00:05:53,630
Now there are a couple of other nice things that pug can do that I want to show you.
