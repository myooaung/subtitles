00:00:02,290 --> 00:00:09,080
Quella soluzione più pulita si presenta sotto forma di uncini del ciclo di vita forniti da MOCA.

2
00:00:09,190 --> 00:00:16,390
Abbiamo descritto e questo ed i nostri casi di test descrittivi ci permettono di raggrupparli invece di descriverli.

3
00:00:16,420 --> 00:00:23,800
Abbiamo alcune funzioni extra che possiamo chiamare che effettivamente verranno eseguite prima di tutti i test o prima di ogni

4
00:00:23,800 --> 00:00:28,360
test alla stessa per dopo e dopo ogni cosa intendo con quello.

5
00:00:28,370 --> 00:00:34,760
Diciamo che connettersi al database e creare un utente fittizio è qualcosa che vogliamo fare quando i nostri

6
00:00:34,760 --> 00:00:37,610
test non vengono eseguiti prima di ogni test.

7
00:00:37,610 --> 00:00:41,180
Quindi non vogliamo ricollegare e ricreare un utente prima di ogni test.

8
00:00:41,180 --> 00:00:44,030
Ma inizialmente quando inizia la nostra corsa di prova.

9
00:00:44,030 --> 00:00:47,670
Quindi essenzialmente voglio eseguire questo codice qui.

10
00:00:47,690 --> 00:00:52,790
Potresti dire e lo taglierò prima di ogni prova.

11
00:00:52,790 --> 00:00:57,040
Questo può essere ottenuto aggiungendo prima qui prima che prenda una funzione.

12
00:00:57,080 --> 00:01:01,880
E se si esegue il codice asincrono, si dovrebbe aggiungere anche un argomento fatto qui.

13
00:01:02,060 --> 00:01:08,960
E poi incolli il tuo codice asincrono e una volta che hai finito qui e, naturalmente, che potrebbe essere il

14
00:01:08,960 --> 00:01:13,310
codice sincrono qui, sembra essere asincrono perché interagiamo con il database.

15
00:01:13,310 --> 00:01:18,320
Una volta che hai finito, chiami fatto e Walker sa che hai terminato l'inizializzazione e

16
00:01:18,320 --> 00:01:25,970
inizierà a eseguire i test case in modo da eseguire tutti i test case prima e prima di eseguirli solo una volta prima

17
00:01:26,210 --> 00:01:27,970
di ogni caso di test.

18
00:01:28,040 --> 00:01:30,350
Ma prima di tutti i casi di test.

19
00:01:30,480 --> 00:01:38,980
Quindi ora i tuoi casi di test sono eseguiti e quindi qui non abbiamo bisogno di altro che di nidificare qui.

20
00:01:39,000 --> 00:01:39,940
Questo non è

21
00:01:44,200 --> 00:01:48,700
richiesto e ora in questo caso di test più basso definiamo solo la nostra logica di test.

22
00:01:48,700 --> 00:01:55,600
Non abbiamo quell'inizializzazione che funziona allo stesso modo per la pulizia, ovviamente cancellando i nostri utenti e disconnettendo.

23
00:01:55,780 --> 00:01:57,450
Non è qualcosa che voglio fare qui.

24
00:01:57,460 --> 00:02:00,970
Qui semplicemente non avrò le mie aspettative in più e ho chiamato fatto.

25
00:02:00,970 --> 00:02:07,330
Così invece invece di descrivere il blocco in cui avevamo prima dove impostiamo quella connessione al database

26
00:02:07,420 --> 00:02:15,340
e aggiungiamo il nostro utente fittizio all'interno di quel blocco descritto, possiamo considerare che tutto ciò che l'offerta e la deposizione non contano.

27
00:02:15,340 --> 00:02:16,880
Potresti definirci lassù.

28
00:02:16,890 --> 00:02:21,910
Q Dopo verrà semplicemente eseguito dopo tutti i casi di test.

29
00:02:22,090 --> 00:02:27,550
Ora come prima ottiene solo una funzione che è in grado di eseguire il codice asincrono con

30
00:02:27,580 --> 00:02:32,550
l'argomento done e quindi si esegue il codice sincrono o asincrono se è asincrono.

31
00:02:32,560 --> 00:02:36,370
Non devi dimenticare di chiamare una volta che hai finito qui.

32
00:02:36,370 --> 00:02:41,150
Quindi elimino i miei utenti e quindi disconnetto e ho finito.

33
00:02:41,170 --> 00:02:47,920
E ora abbiamo questo ripulire e impostare il lavoro in un luogo più centralizzato e quindi per tutti i nostri casi

34
00:02:47,920 --> 00:02:50,670
di test può trarre vantaggio da tale impostazione.

35
00:02:50,710 --> 00:02:56,980
Ovviamente, se hai casi di test che richiedono una configurazione diversa, dovresti aggiungerli in una funzione di descrizione

36
00:02:56,980 --> 00:03:02,230
diversa, in quanto qui il login non è più adatto poiché stiamo testando anche lo

37
00:03:02,530 --> 00:03:09,280
stato dell'utente, quindi avrò solo il controller ma potresti avere più blocchi descrittivi se hai bisogno di ganci diversi

38
00:03:09,280 --> 00:03:16,120
per diversi casi di test qui tutti i casi di test vanno bene usando la stessa configurazione e quindi hanno

39
00:03:16,180 --> 00:03:17,900
tutti gli stessi ganci.

40
00:03:17,980 --> 00:03:21,040
Descrivi il blocco e ora con quello.

41
00:03:21,190 --> 00:03:28,420
Se eseguo di nuovo il test NPM, dovremmo avere la stessa funzionalità di prima con il passaggio del test, ma ora

42
00:03:28,420 --> 00:03:36,220
abbiamo una configurazione più pulita in cui abbiamo anche i nostri ganci di configurazione e pulizia garantiti e non abbiamo bisogno di mescolare

43
00:03:36,220 --> 00:03:41,890
questo nei nostri casi di test e ovviamente è un modo migliore di configurare ora.

44
00:03:42,010 --> 00:03:44,390
Inoltre prima e dopo.

45
00:03:44,500 --> 00:03:52,030
Ci sono anche prima di ciascuna e dopo ogni differenza annotata che prima di ogni lavoro di inizializzazione viene eseguito

46
00:03:52,150 --> 00:03:57,360
prima di ogni caso di test prima dell'esecuzione di tutti i test case.

47
00:03:57,370 --> 00:03:58,490
Quindi non è ripetuto.

48
00:03:58,510 --> 00:04:05,260
Esegue solo una volta per ogni esecuzione di test prima di ogni ripetizione e viene eseguito più spesso per test eseguito fondamentalmente prima

49
00:04:05,260 --> 00:04:11,590
che ogni chiamata di funzione in questo giorno sia utile se è necessario ripristinare qualcosa prima di ogni caso di test

50
00:04:11,590 --> 00:04:18,720
o se si desidera avere un lavoro di inizializzazione assolutamente deve essere eseguito prima di ogni caso di test e ce ne sono tutti

51
00:04:19,160 --> 00:04:24,220
dopo ciascuno nel caso in cui vi siano alcune funzionalità che devono essere eseguite dopo ogni

52
00:04:24,220 --> 00:04:24,870
test case.

53
00:04:24,910 --> 00:04:28,380
Quindi un po 'di lavoro di pulizia che deve essere fatto dopo ogni caso di test.

54
00:04:28,420 --> 00:04:31,570
Quindi questi sono anche dei ganci molto utili per i test, ovviamente.
