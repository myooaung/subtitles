WEBVTT
1
00:00:02.150 --> 00:00:11.090
Time to edit products and for this, I'll first of all work on my admin.js file in the controllers folder.

2
00:00:11.240 --> 00:00:18.050
There we have two routes that are or two functions that are related to editing products. To get edit

3
00:00:18.050 --> 00:00:23.840
product page which is responsible for fetching the product that should be edited and for rendering it

4
00:00:24.230 --> 00:00:29.810
and the post edit product page which is responsible for saving these changes to the database,

5
00:00:29.840 --> 00:00:31.830
I'll comment both back in

6
00:00:31.910 --> 00:00:33.930
and let's start with get edit

7
00:00:33.940 --> 00:00:38.200
product. There the majority of the code can stay as it is

8
00:00:38.360 --> 00:00:43.180
but when we then fetch the fitting product, we of course do this differently,

9
00:00:43.430 --> 00:00:50.490
we use product find by id and we find the product with Prod ID like this

10
00:00:50.630 --> 00:00:53.120
and then we still get back products however,

11
00:00:53.330 --> 00:00:55.730
well actually we don't get back products anymore,

12
00:00:55.910 --> 00:01:03.250
we get back one product here so no need to store it in a constant like this and extract it from an array,

13
00:01:03.290 --> 00:01:10.100
we get back one product automatically because we wrote that method in such a way and we therefore can

14
00:01:10.130 --> 00:01:12.200
render this product,

15
00:01:12.270 --> 00:01:14.170
so this should work.

16
00:01:14.220 --> 00:01:19.030
Now let's quickly have a look at the view that belongs to this controller action,

17
00:01:19.080 --> 00:01:23.940
so to this edit product.ejs file and in there, you know what I'm looking for,

18
00:01:24.030 --> 00:01:30.120
we want to make sure we're always using product_id when using the product ID just to make

19
00:01:30.120 --> 00:01:35.050
sure that we extract the right thing from the document we get back from the server.

20
00:01:35.670 --> 00:01:42.750
So now with that, we get everything in place to hopefully make this edit button work partly, if I click on

21
00:01:42.750 --> 00:01:43.380
it,

22
00:01:43.770 --> 00:01:47.860
well almost, let's leave it on this page.

23
00:01:47.910 --> 00:01:53.310
The controller should work but in the routes in the admin.js file, I of course have a comment this get route

24
00:01:53.340 --> 00:01:54.200
back in,

25
00:01:54.210 --> 00:01:56.080
so let's make sure this is done.

26
00:01:56.130 --> 00:02:03.390
And now that if we now reload that page, we indeed see the form with the default values filled back in.

27
00:02:03.390 --> 00:02:04.980
So now this is working

28
00:02:05.010 --> 00:02:08.410
but of course it's not that useful to only see the data

29
00:02:08.460 --> 00:02:15.980
and we were able to fetch data before, the interesting part now would be to update it. Now to update it,

30
00:02:15.990 --> 00:02:19.200
let's go back to the product model.

31
00:02:19.650 --> 00:02:28.400
How could we update our product which is stored in the database? Well

32
00:02:28.900 --> 00:02:36.780
let's go to the constructor and let's add a fifth argument here, the ID and then I'll say this _id

33
00:02:36.770 --> 00:02:38.830
is equal to the ID I'm getting here,

34
00:02:38.830 --> 00:02:42.040
you could name this _id here too if you wanted to.

35
00:02:42.040 --> 00:02:46.540
So now we accept a kind of optional fifth argument,

36
00:02:46.600 --> 00:02:49.070
we're not passing it in the other places of the app

37
00:02:49.090 --> 00:02:56.980
but here I do at least create the option of passing this too. An ID will therefore be undefined and be

38
00:02:56.980 --> 00:02:58.640
auto generated by mongodb

39
00:02:58.760 --> 00:03:06.010
or we did set it and then when we called save, I don't want to insert one,

40
00:03:06.010 --> 00:03:08.670
I want to create a new product instead.

41
00:03:08.680 --> 00:03:16.240
So for this what I'll do is I'll simply check if this _id, if that is set and if it is set,

42
00:03:16.540 --> 00:03:18.840
we'll update the product

43
00:03:19.950 --> 00:03:22.220
otherwise we'll insert it,

44
00:03:22.260 --> 00:03:25.490
so I'll move my const db function up there,

45
00:03:25.500 --> 00:03:28.340
I always need access to the database in both cases

46
00:03:28.990 --> 00:03:39.770
and now I'll create a new variable, let dbOp for db operation and in the else case where we insert

47
00:03:40.130 --> 00:03:51.490
a document, dbOp is equal to my connection to the database and then connecting to collection and then

48
00:03:51.880 --> 00:03:59.820
inserting one and then down there, I can use dbOp to follow along and actually return that.

49
00:03:59.830 --> 00:04:06.940
So now I have one case where dbOp is simply my insert command and then I return my result or dbOp

50
00:04:07.000 --> 00:04:13.950
is access to my database and to the products collection still

51
00:04:14.480 --> 00:04:21.580
but then here I use update one and as the name suggests, update one will update exactly one element.

52
00:04:21.580 --> 00:04:25.860
There also is update many where you can update multiple elements at once

53
00:04:25.880 --> 00:04:29.580
but here I know I only want to update one, so I can use update one

54
00:04:29.600 --> 00:04:33.380
and now update one takes at least two arguments.

55
00:04:33.380 --> 00:04:41.030
The first one is that we add a filter that defines which element or which document we want to update,

56
00:04:41.030 --> 00:04:46.580
so here again I'll pass a javascript object and we can filter for equality also

57
00:04:46.790 --> 00:04:50.520
or run more complex queries which you again can learn about

58
00:04:50.520 --> 00:04:53.340
in my mongodb course if you want to and here

59
00:04:53.420 --> 00:04:58.610
I only want to find a document where the _id is equal to

60
00:04:58.870 --> 00:05:08.300
and now again I'll create a new mongodb objectid to which I pass this _id, so the ID which

61
00:05:08.330 --> 00:05:10.600
is part of that object here.

62
00:05:10.880 --> 00:05:18.920
So I'm looking for a document where the ID matches the ID I have here in my product I'm currently working

63
00:05:18.920 --> 00:05:25.810
with and for that document, we now as a second argument to update one,

64
00:05:25.820 --> 00:05:29.520
we now specify how to update that document.

65
00:05:29.560 --> 00:05:36.130
This again is a javascript object where we describe the update and this is now not the new object,

66
00:05:36.170 --> 00:05:42.620
so we don't say this here as you could imagine that we tell mongodb find me the existing

67
00:05:42.620 --> 00:05:45.280
document and replace it with this, update

68
00:05:45.280 --> 00:05:47.500
one does not replace.

69
00:05:47.630 --> 00:05:53.420
Instead we have to describe the operation and we do this by using a special property name which is understood

70
00:05:53.450 --> 00:05:59.150
by mongodb, kind of a reserved name you could say, $set.

71
00:05:59.180 --> 00:06:01.630
This again takes an object as a value

72
00:06:01.640 --> 00:06:08.000
and here we describe the changes we want to make to the existing document which we found with this

73
00:06:08.120 --> 00:06:09.500
filter.

74
00:06:09.500 --> 00:06:18.830
And here you could actually say this and you would instruct mongodb to simply set these key value fields

75
00:06:18.920 --> 00:06:23.610
which you have in your object here to the document it found in the database

76
00:06:23.930 --> 00:06:29.210
and therefore since these are only key value pairs which exist in the document in the database, it will

77
00:06:29.270 --> 00:06:34.060
update the values of the document in the database with your new values.

78
00:06:34.310 --> 00:06:39.800
You could also write this in a more verbose way and explicitly say title should be equal to this title

79
00:06:40.040 --> 00:06:40.870
and so on

80
00:06:40.910 --> 00:06:48.670
but since we want to replace all fields, we can just say this here. And now with that we have a database

81
00:06:48.670 --> 00:06:52.640
operation that will update an existing database object,

82
00:06:52.690 --> 00:06:59.290
by the way the ID will not be overwritten or anything like that, only the other fields are.

83
00:06:59.290 --> 00:07:05.350
So with that let's go back to our admin.js controller and and in post added product, that is the part I

84
00:07:05.350 --> 00:07:11.760
want to work on in the next lecture to make sure that we actually are able to save our product.
