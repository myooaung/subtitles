1
00:00:02,310 --> 00:00:09,360
Quindi questa è un'introduzione ai test hai imparato come usare mocha e Chai per scrivere test e aspettative che

2
00:00:10,020 --> 00:00:16,680
puoi testare il codice async che puoi lavorare con i database di test o con i passaggi

3
00:00:16,680 --> 00:00:18,450
se hai dipendenze esterne.

4
00:00:18,450 --> 00:00:25,160
Eppure questo può essere schiacciante, lo so perché stai testando l'accesso ai file.

5
00:00:25,380 --> 00:00:29,640
Come dovresti lavorare con le sessioni o con i cookie.

6
00:00:29,640 --> 00:00:31,010
C'è così tanto da testare.

7
00:00:31,050 --> 00:00:32,940
Come fai a sapere cosa testare.

8
00:00:32,940 --> 00:00:35,390
Come vieni con buone idee di prova.

9
00:00:35,400 --> 00:00:40,230
Ha senso verificare se il codice di stato è stato impostato correttamente, ad esempio.

10
00:00:40,230 --> 00:00:46,860
Bene, queste sono tutte domande difficili da rispondere o non riguardanti il codice di stato, ad esempio.

11
00:00:46,860 --> 00:00:54,720
Chiedi sempre a te stesso Stai verificando qualcosa di cui sei responsabile con il tuo codice riguardante il codice

12
00:00:54,720 --> 00:00:56,010
di stato.

13
00:00:56,010 --> 00:01:02,070
Ovviamente non è necessario testare se il codice di stato è impostato sulla risposta, ma se quel codice di stato

14
00:01:02,070 --> 00:01:05,170
esatto che stai cercando è corretto, è qualcosa che testerai.

15
00:01:05,190 --> 00:01:08,150
È il codice di stato 201 o 500.

16
00:01:08,190 --> 00:01:13,260
Sei tu e il tuo codice che la trova così è qualcosa che dovresti testare.

17
00:01:13,260 --> 00:01:20,040
Se hai delle funzioni molto grandi e ti ritrovi a dover smettere un sacco di roba per testarne

18
00:01:20,040 --> 00:01:23,610
una piccola parte, puoi dividere una funzione a parte.

19
00:01:23,670 --> 00:01:29,160
Potremmo farlo per il nostro controllo quest'anno o due, potremmo ad esempio esternalizzare la parte in cui aggiungiamo un post ai nostri post degli utenti

20
00:01:29,160 --> 00:01:36,240
in una nuova funzione che accetta semplicemente un utente I. D. e il post creato

21
00:01:36,240 --> 00:01:40,710
come input, quindi cerca quell'idea utente e aggiunge quel post.

22
00:01:40,710 --> 00:01:43,280
Quindi una funzione che essenzialmente fa solo questa parte.

23
00:01:43,350 --> 00:01:49,560
Potremmo esternalizzare questo in una nuova funzione che poi improvvisamente diventa più facile da testare perché le funzioni

24
00:01:49,560 --> 00:01:55,830
di test e la suddivisione del codice in funzioni più granulari possono rendere più facile la manutenzione e più

25
00:01:56,070 --> 00:01:57,220
facile da testare.

26
00:01:57,510 --> 00:02:04,200
Quindi, se hai problemi durante il test di grandi funzioni, prova a suddividerle in funzioni più piccole e testabili

27
00:02:05,640 --> 00:02:09,330
se ti stai chiedendo come testare sessioni o cookie.

28
00:02:09,330 --> 00:02:17,960
Beh, Google è stupido per il tuo amico, ma è una ricerca di casi per test di sessione di test di

29
00:02:18,060 --> 00:02:26,190
cookie di No j s che troverai istruzioni di idee pensieri di altre persone perché il test è molto sul

30
00:02:26,190 --> 00:02:32,070
pensiero e l'esperienza e provare cose là fuori raramente è una soluzione corretta.

31
00:02:32,070 --> 00:02:35,610
È anche il caso di scrivere i tuoi casi di test qui.

32
00:02:35,610 --> 00:02:40,390
Cosa passi come configurazione fittizia come ad esempio l'oggetto di richiesta standard.

33
00:02:40,500 --> 00:02:46,560
Come dovrebbe sembrare analizzare il codice che stai testando e poi pensare a come è

34
00:02:46,680 --> 00:02:53,040
necessario configurare i tuoi input o le tue dipendenze affinché lo scenario di test diventi reale.

35
00:02:53,040 --> 00:02:58,440
Certo, tieni sempre d'occhio se forse stai solo provando per cose che stai introducendo qui.

36
00:02:58,440 --> 00:03:04,980
Ad esempio, quando stai testando l'iscrizione dell'utente e trasferisci un oggetto fittizio Richiesta con un indirizzo email e una password che

37
00:03:04,980 --> 00:03:10,200
potrebbero assomigliare a questo e ti stai quindi aspettando che venga creato un utente con l'indirizzo

38
00:03:10,200 --> 00:03:12,850
email del test da aggiungere test dot com.

39
00:03:12,930 --> 00:03:18,630
Bene, allora il tuo test fallirà e non perché il tuo codice è cattivo, ma perché

40
00:03:18,630 --> 00:03:25,350
il tuo test è sbagliato perché definisci un input sbagliato per le tue aspettative e quindi il test è davvero

41
00:03:25,800 --> 00:03:32,320
un tentativo di raccogliere esperienze che si tuffano nelle discussioni con gli sviluppatori che si tuffano nello stack overflow.

42
00:03:32,490 --> 00:03:35,940
E ciò renderà più facile col passare del tempo.

43
00:03:35,970 --> 00:03:40,610
Spero sia chiaro che scrivere i test in generale non è troppo difficile.

44
00:03:40,620 --> 00:03:48,000
Che tu scriva codice che metta alla prova il tuo codice e i documenti ufficiali di chai e mocha ti aiutino

45
00:03:48,000 --> 00:03:55,170
davvero a definire test che raggruppano i test per testare cose diverse e troverai molti pacchetti di terze parti e

46
00:03:55,170 --> 00:04:01,500
plug-in che possono rendere ancora più semplice, ad esempio, testare le cose come sessioni o prove promesse.

47
00:04:01,500 --> 00:04:06,990
Ci sono tutti i pacchetti che rendono più facile farti scrivere codice ancora più snello di quello che

48
00:04:06,990 --> 00:04:08,000
stiamo facendo qui.

49
00:04:08,010 --> 00:04:13,590
Con ciò spero che questa presentazione sia stata utile e spero che ora non

50
00:04:13,590 --> 00:04:20,310
siate in grado solo di scrivere applicazioni espressamente note, ma siete sempre in grado di testarle manualmente e automaticamente.
