1
00:00:02,720 --> 00:00:05,550
Knouted kami dapat membuat pengguna baru.

2
00:00:05,570 --> 00:00:09,320
Bagaimana cara otentikasi bekerja di dunia grafis.

3
00:00:09,320 --> 00:00:13,370
Apakah itu bekerja dengan cara yang sama untuk mengistirahatkan mata Anda.

4
00:00:13,370 --> 00:00:15,350
Apakah kita menggunakan sesi lagi.

5
00:00:15,830 --> 00:00:23,990
Ingat juga slide ini grafik untuk Anda semua API juga stateless dan klien independen.

6
00:00:23,990 --> 00:00:30,380
Jadi secara umum kami masih menyinggung DK dengan menggunakan token yang kemudian kami lampirkan untuk setiap

7
00:00:30,380 --> 00:00:39,740
permintaan yang harus dapat mengakses sumber daya yang dilindungi dan log in pada akhirnya adalah Kery normal mereka di mana kami mengirim beberapa data

8
00:00:39,740 --> 00:00:43,550
pengguna dan ke mana kami ingin dapatkan kembali token.

9
00:00:43,550 --> 00:00:44,560
Kanan.

10
00:00:44,690 --> 00:00:52,680
Jadi pada akhirnya yang dapat kita lakukan di sini adalah sebagai berikut di belakang kita dan kode dalam skema kita.

11
00:00:52,750 --> 00:00:56,830
Sekarang saya akan menemukan permintaan nyata, bukan pengganti tempat boneka saya.

12
00:00:57,190 --> 00:01:01,640
Halo permintaan nama yang masuk di sini.

13
00:01:01,780 --> 00:01:02,920
Saya butuh beberapa data.

14
00:01:03,280 --> 00:01:06,040
Dan saya bisa lagi menemukan input sendiri seperti di sini.

15
00:01:06,070 --> 00:01:10,500
Saya lakukan untuk input data pengguna tetapi juga untuk menunjukkan cara menggunakan beberapa argumen.

16
00:01:10,630 --> 00:01:17,120
Saya akan mengharapkan email yang merupakan string dan kata sandi yang merupakan string.

17
00:01:17,340 --> 00:01:24,540
Dan kemudian saya akan mengembalikan bukan pengguna tetapi beberapa data yang berisi katakanlah id pengguna dan token karena

18
00:01:24,630 --> 00:01:26,720
ini adalah dua informasi

19
00:01:26,820 --> 00:01:30,490
Saya kebetulan membutuhkan di sini dan itu masuk akal sebagai respons.

20
00:01:30,540 --> 00:01:34,500
Tentu saja Anda dapat mengembalikan objek pengguna secara keseluruhan.

21
00:01:34,560 --> 00:01:46,880
Jadi di sini semua tipe baru saya akan menamainya dari data dan itu akan menjadi token saya yang

22
00:01:46,880 --> 00:01:53,780
merupakan string dan ID pengguna saya yang akan menjadi string.

23
00:01:53,780 --> 00:02:00,700
Ini adalah data yang akan saya kembalikan ketika seseorang mengirim kueri untuk masuk.

24
00:02:00,710 --> 00:02:08,850
Sekarang kita membutuhkan resolder untuk ini, jadi mari kita menuju ke resolver dan menawarkan pengguna perdagangan.

25
00:02:08,980 --> 00:02:11,070
Saya akan menambahkan pemecah login saya.

26
00:02:11,170 --> 00:02:18,340
Di sana lagi saya mendapatkan R X dan saya dapat menggunakan destrrukturisasi lagi untuk mengambil

27
00:02:18,670 --> 00:02:26,890
email dan argumen kata sandi yang saya dapatkan karena saya menemukan keduanya di sini di pertanyaan log saya.

28
00:02:26,940 --> 00:02:28,670
Sekali lagi saya ingin menggunakan async menunggu.

29
00:02:28,770 --> 00:02:36,870
Jadi saya akan mengubahnya menjadi fungsi async dengan sintaks ini dan kemudian ada di log saya dan resolder untuk pergi.

30
00:02:36,880 --> 00:02:42,700
Sekarang tentu saja adalah menemukan pengguna dengan alamat email yang tepat dan kemudian mengonfirmasi kata sandi.

31
00:02:42,710 --> 00:02:52,330
Jadi pertama-tama saya akan mendapatkan pengguna saya dengan menunggu pengguna menemukan di mana saya mencari alamat email dalam database yang harus cocok

32
00:02:52,330 --> 00:02:55,960
dengan email yang saya dapatkan sebagai argumen.

33
00:02:57,400 --> 00:02:59,890
Jika ini tidak dikatakan jika pengguna tidak ditentukan.

34
00:02:59,890 --> 00:03:07,180
Tidak, saya mencatat bahwa saya tidak menemukan pengguna dengan alamat email itu dan oleh karena itu saya dapat membuat kesalahan baru

35
00:03:07,180 --> 00:03:14,500
di mana saya katakan pengguna tidak ditemukan atau apa pun yang ingin Anda setel saat saya panah. Karena itu saya dapat mengatur

36
00:03:14,500 --> 00:03:18,770
kode di sini sama seperti saya melakukannya untuk pengguna buat katakanlah 404.

37
00:03:18,790 --> 00:03:24,220
Karena kami tidak menemukan pengguna atau empat ratus satu karena pengguna tidak dapat mengotentikasi

38
00:03:24,220 --> 00:03:34,160
semua pergi dengan untuk 0 1 dan semua kesalahan Froedtert jika kami telah lulus melakukan pemeriksaan maka kami tahu bahwa kami memiliki pengguna dengan alamat

39
00:03:34,160 --> 00:03:35,340
email itu.

40
00:03:35,360 --> 00:03:41,600
Sekarang kita perlu memeriksa kata sandi untuk Ayah kita dulu memukuli paket di

41
00:03:42,060 --> 00:03:50,380
sana untuk membandingkan fungsi dan kita mengirimkan kata sandi kirim dengan permintaan dan kata sandi hash yang tersimpan.

42
00:03:50,400 --> 00:03:57,790
Sekarang ini adalah operasi asinkron yang memberi kami janji sehingga kami dapat menunggu hutang dan kembali kepada Anda

43
00:03:57,790 --> 00:03:59,580
adalah respons yang sama.

44
00:04:00,910 --> 00:04:10,240
Sekarang jika tidak sama maka saya tahu pengguna memasukkan kata sandi yang salah sehingga saya dapat membuat kesalahan baru di sini di mana

45
00:04:10,240 --> 00:04:19,020
saya mengatakan kata sandi itu benar dan saya juga dapat mengatur kode panah atau 400 di salah satu dari Anda.

46
00:04:19,190 --> 00:04:26,920
Dan kemudian semua adalah kesalahan data penipuan, tentu saja Y kami baik untuk email ada dan kata sandi sudah benar.

47
00:04:27,050 --> 00:04:34,100
Dan sekarang saya dapat membuat token dan untuk itu saya akan lagi mengimpor paket token web Jason

48
00:04:34,100 --> 00:04:42,650
saya dengan meminta token Jason Webb di sini dan kemudian di sana di log in resolver saya akan menghasilkan token dengan

49
00:04:42,650 --> 00:04:50,980
menjalankan tanda JWT di sini Anda sekarang sudah melewati data Anda ingin menyandikan dalam token yang bisa menjadi ID pengguna

50
00:04:50,980 --> 00:04:57,650
Anda yang Anda dapatkan dari ID garis bawah pengguna ke string untuk dikonversi ke string.

51
00:04:57,880 --> 00:05:04,280
Mungkin Anda juga ingin menyandikan email dengan mendapatkan data dari pengguna atau Anda mengambil dari database.

52
00:05:04,440 --> 00:05:13,170
Dan argumen kedua untuk merancang metode. Dennis rahasia super rahasia Anda yang Anda gunakan untuk menetapkan token yang

53
00:05:13,170 --> 00:05:17,820
tidak Anda gunakan untuk memverifikasi sesuatu akan dilakukan nanti

54
00:05:17,820 --> 00:05:23,790
Dan saya akan mengonfigurasikannya sebagai token dengan argumen ketiga dengan menetapkan agar kedaluwarsa adalah kunci dalam objek

55
00:05:23,790 --> 00:05:29,750
yang Anda berikan ke argumen ketiga hingga satu jam sehingga token tersebut berakhir setelah satu jam.

56
00:05:29,760 --> 00:05:39,380
Itulah yang kami lakukan dan API lainnya. S. untuk sekarang saya akan mengembalikan token itu

57
00:05:39,380 --> 00:05:47,890
dalam kunci token dan pastikan untuk mencocokkan skema yang Anda tetapkan di sini sehingga token dan ID pengguna dikembalikan.

58
00:05:48,000 --> 00:05:55,680
Jadi di resolver Anda akan mengembalikan token pada kunci token dan ID pengguna yang lagi-lagi pengguna saya menggarisbawahi ID ke string

59
00:05:55,680 --> 00:05:57,210
dan sekarang dengan

60
00:06:00,900 --> 00:06:07,350
itu kami memiliki log di tempat Clarion di mana kami mengirim seperti permintaan dapatkan untuk mengunci pengguna ke

61
00:06:07,350 --> 00:06:13,710
mendapat token dan seterusnya Anda bisa mengatakan sekarang kita perlu menghubungkannya ke depan dan pada langkah berikutnya.

62
00:06:13,710 --> 00:06:15,270
Dan tentu saja mengujinya.

63
00:06:15,390 --> 00:06:18,240
Jika Anda merasa berani semua untuk mencobanya sendiri tentu saja.
