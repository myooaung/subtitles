WEBVTT
1
00:00:03.070 --> 00:00:07.070
Ora prima di tutto perché ho bisogno di uscire da questo processo con controllo C ..

2
00:00:07.330 --> 00:00:15.040
La ragione è che nonostante io abbia chiamato done, mocha rileva che c'è ancora qualche processo aperto nel ciclo

3
00:00:15.040 --> 00:00:21.550
degli eventi e infatti c'è la nostra connessione al database che apriamo ma non chiudiamo mai.

4
00:00:21.550 --> 00:00:28.060
Quindi una cosa che dovremmo fare qui è quando abbiamo finito con le nostre aspettative, potremmo voler chiamare la disconnessione

5
00:00:28.300 --> 00:00:31.290
di Mongoose e solo quando questo è fatto.

6
00:00:31.300 --> 00:00:33.040
Quindi qui e poi richiameranno.

7
00:00:33.340 --> 00:00:34.530
Chiamiamo fatto.

8
00:00:34.630 --> 00:00:39.640
Ora questo è il primo passo importante ma la notifica rossa non funzionerebbe perché in realtà abbiamo un errore complessivo

9
00:00:39.730 --> 00:00:41.200
nel nostro caso di test.

10
00:00:41.200 --> 00:00:44.270
Quindi non ce la facciamo nemmeno a questo, quindi blocciamo qui.

11
00:00:44.290 --> 00:00:50.500
Invece il nostro setup proprio qui fallisce già e blocca un errore a causa di quella chiave

12
00:00:50.500 --> 00:00:56.020
duplicata perché qui stiamo codificando un'idea e abbiamo già un utente con quell'idea nel database.

13
00:00:56.020 --> 00:01:01.270
E l'idea deve essere unica e quindi Mongo D. B. si lamenta quando lo creiamo di nuovo.

14
00:01:01.350 --> 00:01:03.910
La soluzione è ripulire una volta che abbiamo finito.

15
00:01:03.910 --> 00:01:11.260
Quindi, oltre a disconnettere prima di disconnettersi, voglio chiamare l'utente delete many e passare un oggetto vuoto, il che

16
00:01:11.260 --> 00:01:17.180
significa che tutti gli utenti vengono cancellati e che generalmente non è l'idea peggiore.

17
00:01:17.350 --> 00:01:23.380
Se hai un test per l'uso, configura i dati fittizi ripulisci tutto dopo il test della morte in modo da essere

18
00:01:23.380 --> 00:01:30.520
sicuro di avere un set pulito per il prossimo test da quel momento in poi e anche per il prossimo test che è quello di

19
00:01:30.520 --> 00:01:33.700
usarti qui qui per il nostro seconda prova di marcia.

20
00:01:33.730 --> 00:01:37.330
Non abbiamo una configurazione pulita perché abbiamo già quell'utente.

21
00:01:37.330 --> 00:01:40.960
Ora se cancelli molti lo abbiamo ripulito.

22
00:01:41.110 --> 00:01:43.260
Ora abbiamo questo blocco e lì.

23
00:01:43.270 --> 00:01:45.670
Sono poi andato a disconnettere e poi bloccato lì.

24
00:01:45.670 --> 00:01:48.070
Allora voglio usare fatto.

25
00:01:48.070 --> 00:01:54.790
Ovviamente possiamo ripulire un po 'questo convertendolo in una catena promessa e possiamo persino convertirlo in

26
00:01:54.790 --> 00:01:56.470
una catena di promesse.

27
00:01:56.620 --> 00:02:01.840
Ma comunque Dakota non è super bello e lo sistemeremo presto, ma per ora

28
00:02:01.840 --> 00:02:08.860
i risultati dovrebbero essere almeno che se lo ricapitoliamo ancora non ci riesce, perché inizialmente abbiamo ancora un problema.

29
00:02:08.970 --> 00:02:16.020
Lasciami andare effettivamente lì e cancellare manualmente questo utente e ora, se una corsa fa di nuovo ovviamente, avrà

30
00:02:16.020 --> 00:02:16.600
successo.

31
00:02:16.620 --> 00:02:19.200
Ma ora anche per le esecuzioni successive dovrebbe funzionare.

32
00:02:19.200 --> 00:02:27.370
Quindi ora non funziona perché ho un punto esclamativo in più qui.

33
00:02:27.370 --> 00:02:32.740
Quindi permettimi di riconvertire questo concetto con la validazione valida qui.

34
00:02:33.070 --> 00:02:42.620
Riprendiamo ora questo test e, ovviamente, puliamo e, naturalmente, aggiorniamo qui e ripuliamo l'utente ancora una

35
00:02:42.620 --> 00:02:43.620
volta.

36
00:02:45.370 --> 00:02:52.130
In modo che abbiamo una corsa pulita ora superato il test NPM.

37
00:02:52.240 --> 00:02:57.460
Ora il vecchio passaggio e questo processo finiscono ma ovviamente questo non è perfetto come puoi dire ogni volta

38
00:02:57.460 --> 00:02:58.650
che un test fallisce.

39
00:02:58.690 --> 00:03:03.220
Non entriamo in questa fase di cleanup perché ciò causerebbe un errore e quindi

40
00:03:03.220 --> 00:03:08.700
dovremmo aggiungere una frase catch generale in modo da non farcela in questa parte di cleanup qui.

41
00:03:08.710 --> 00:03:14.860
Se un'aspettativa fallisce e, in generale, questo è un codice piuttosto goffo e piuttosto difficile da leggere

42
00:03:14.860 --> 00:03:22.450
e se abbiamo un test che richiede che un mongo sia database o il nostro dummy impostato bene, dobbiamo ripetere tutto

43
00:03:22.450 --> 00:03:26.970
quel codice e quindi c'è un pulitore soluzione a tutto ciò.
