WEBVTT
1
00:00:02.270 --> 00:00:09.940
So how can we ensure that all our beautiful images are also served to the client, that they are downloaded?

2
00:00:09.950 --> 00:00:15.650
We got multiple options for serving files and I will walk you through all of them. Now

3
00:00:15.710 --> 00:00:20.840
option number one which you would typically use for a scenario like this where you have files that are

4
00:00:20.840 --> 00:00:22.670
publicly available to everyone,

5
00:00:22.700 --> 00:00:29.220
like our product images is that we simply serve our images folder in a static way.

6
00:00:29.270 --> 00:00:30.530
What does this mean?

7
00:00:30.530 --> 00:00:37.850
This means you go to app.js and there we already are statically serving a folder, we are serving the public

8
00:00:37.850 --> 00:00:40.820
folder with the express static middleware.

9
00:00:40.820 --> 00:00:46.550
Now we can serve more than one folder statically and remember, statically serving a folder simply means

10
00:00:46.790 --> 00:00:52.500
that requests to files in that folder will be handled automatically and the files will be returned,

11
00:00:52.640 --> 00:00:58.850
so all the heavy lifting is done behind the scenes by express then. I can duplicate this middleware and

12
00:00:58.850 --> 00:01:02.630
now also serve the images folder, just like this

13
00:01:02.780 --> 00:01:08.360
and with this little change if I save that and the server therefore restarts, if we reload this page,

14
00:01:09.420 --> 00:01:11.680
we still fail.

15
00:01:12.150 --> 00:01:18.280
Well if we inspect that failing request, we see that it tried to get the image from admin/images,

16
00:01:18.330 --> 00:01:21.570
the reason for that is that I'm on the admin route here,

17
00:01:21.690 --> 00:01:23.480
admin products to be precise,

18
00:01:24.190 --> 00:01:29.070
so it's only replacing the last part of my path with that image

19
00:01:29.080 --> 00:01:32.780
url and the solution for that is pretty straightforward.

20
00:01:33.100 --> 00:01:42.460
In our view products.ejs where I do show my image, we simply need to add a slash at the beginning

21
00:01:42.520 --> 00:01:44.610
which will turn this into an absolute path,

22
00:01:44.650 --> 00:01:51.280
so it will not append it to the current path but rather create a new path with only our domain and then

23
00:01:51.370 --> 00:01:54.770
the path which gets rendered here and I do this in products

24
00:01:54.850 --> 00:01:57.400
and of course also on my shop pages,

25
00:01:57.470 --> 00:01:58.970
so on index.ejs,

26
00:01:59.200 --> 00:02:04.180
so basically everywhere where I do render an image, I add a slash at the beginning.

27
00:02:04.210 --> 00:02:09.430
The alternative would be to store that path in a database with a slash at the beginning of course, might

28
00:02:09.430 --> 00:02:10.150
have been easier

29
00:02:10.180 --> 00:02:12.050
but I want to show you both ways

30
00:02:12.070 --> 00:02:17.080
so here I'll add it in my views, also here in the product list.ejs file,

31
00:02:19.790 --> 00:02:23.280
like this and also in the product detail file of course,

32
00:02:23.280 --> 00:02:25.050
there we also have an image.

33
00:02:25.160 --> 00:02:34.340
If we change all of that and I now reload this page, I still fail and now the reason for that is something

34
00:02:34.340 --> 00:02:35.440
different.

35
00:02:35.450 --> 00:02:41.690
The reason for that is that the path now is correct but my images here in the images folder are served

36
00:02:41.720 --> 00:02:45.720
incorrectly. In app.js where I set up this static middleware,

37
00:02:46.070 --> 00:02:53.520
keep in mind what I taught you earlier in this course, we basically point to a folder there like public and

38
00:02:53.550 --> 00:03:01.100
images and we then tell express serve the files from inside that folder as if they were on the root

39
00:03:01.220 --> 00:03:02.310
folder.

40
00:03:02.540 --> 00:03:08.050
So we would see that image if we go there and we see the path under which I try to find that,

41
00:03:08.060 --> 00:03:15.050
if we open that in a new tab, we can't find it of course but we will see it if I remove images there

42
00:03:15.050 --> 00:03:21.110
and the reason for that is that express assumes that the files in the images folder are served as if

43
00:03:21.110 --> 00:03:22.570
they were in the root folder,

44
00:03:22.580 --> 00:03:24.060
so slash nothing.

45
00:03:24.200 --> 00:03:28.240
Of course we want to keep them in the images folder and keep the path like this

46
00:03:28.400 --> 00:03:34.220
and for this, we can simply adjust our middleware here and say if we have a request that goes to

47
00:03:34.280 --> 00:03:43.310
/images, that starts with /images, then serve these files statically and now /images is the folder

48
00:03:43.400 --> 00:03:46.010
we assume for this static serving

49
00:03:46.040 --> 00:03:50.380
and now with that if we save that and we reload, we see our image here.

50
00:03:50.660 --> 00:03:56.870
So now we got that working and now we got a static way of serving our files and that is a great way

51
00:03:56.870 --> 00:03:58.660
of serving them.

52
00:03:58.730 --> 00:04:01.340
Now I want to do something different though,

53
00:04:01.640 --> 00:04:09.230
I want to add this to the cart, order it so that I have an order and I want to download an invoice

54
00:04:09.380 --> 00:04:15.590
for that order and that will now work differently because invoices will not be public files that everyone

55
00:04:15.590 --> 00:04:16.970
should be able to access,

56
00:04:17.000 --> 00:04:19.050
I want to be able to access my invoice

57
00:04:19.130 --> 00:04:20.580
but no one else should be.

58
00:04:20.730 --> 00:04:22.940
So let's focus on this in the next lectures.
