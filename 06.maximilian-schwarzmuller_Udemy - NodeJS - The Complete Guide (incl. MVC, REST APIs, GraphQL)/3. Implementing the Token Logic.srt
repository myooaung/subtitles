1
00:00:02,160 --> 00:00:07,650
So we want to be able to enter an email address here and then receive an email with a link that allows

2
00:00:07,650 --> 00:00:09,440
us to reset the password.

3
00:00:09,480 --> 00:00:18,270
Now for that, we need to first of all create a unique token that also has some expiry date which we will

4
00:00:18,270 --> 00:00:25,320
store in our database so that the link which we didn't click includes that token and we can verify that

5
00:00:25,390 --> 00:00:32,550
the user did get that link from us because if we just, well let the user now change that password, we

6
00:00:32,560 --> 00:00:38,910
got no security mechanism in place, so we need that token to put it into the email we're about to send

7
00:00:39,120 --> 00:00:44,180
to only let users change the password through the email that contains that token,

8
00:00:44,250 --> 00:00:46,650
that's an additional security mechanism.

9
00:00:46,730 --> 00:00:50,100
So let's work on that token creation then and for that

10
00:00:50,100 --> 00:00:58,960
first of all, I'll export a new action in my auth controller and that will be post reset, so that will basically

11
00:00:58,960 --> 00:01:05,110
the action that should get triggered once we clicked that reset password button here and in there,

12
00:01:05,200 --> 00:01:07,030
I need to generate that token.

13
00:01:07,030 --> 00:01:11,730
Now nodejs has a built-in crypto library which I can use for that,

14
00:01:11,950 --> 00:01:20,500
so I'll name that crypto and require crypto like that. This is a library that helps us with creating secure

15
00:01:20,560 --> 00:01:26,750
unique random values and other things but we'll need that unique secure random value here.

16
00:01:26,830 --> 00:01:31,900
So here in post, we settled and use that crypto library which I stored in a constant here

17
00:01:32,170 --> 00:01:37,540
and I will call random bytes to generate some random bytes, I want

18
00:01:37,540 --> 00:01:44,470
32 random bytes and this will call a callback function here, so this is the second argument, a function

19
00:01:44,470 --> 00:01:47,010
will be called once it's done and there I

20
00:01:47,020 --> 00:01:52,020
either get an error or a buffer, a buffer of these bytes.

21
00:01:52,090 --> 00:01:55,120
Now I have an error here

22
00:01:55,120 --> 00:02:01,330
then I want to return redirect back to let's say reset and we could flash an error message here if we

23
00:02:01,330 --> 00:02:06,040
wanted to, I'll also log the error so that we can debug it

24
00:02:06,370 --> 00:02:10,880
but if we make it past this check, we do have a valid buffer

25
00:02:11,020 --> 00:02:18,740
and then we can generate a token from that buffer, simply by using buffer toString and there we just

26
00:02:18,740 --> 00:02:22,400
need to pass hex because that buffer will store hexadecimal values

27
00:02:22,490 --> 00:02:27,980
and this is information toString needs to convert hexadecimal values to normal ASCII characters.

28
00:02:27,980 --> 00:02:29,410
So then we'll have a token.

29
00:02:29,570 --> 00:02:35,060
Now that token should get stored in the database and it should get stored on the user object because

30
00:02:35,060 --> 00:02:36,690
it belongs to that user,

31
00:02:37,070 --> 00:02:43,110
so let's first of all go to our user model and there, I'll add two new fields,

32
00:02:43,400 --> 00:02:47,750
I'll add a reset token and I'll just assign a type of string here.

33
00:02:47,780 --> 00:02:54,680
Now important, this is not required because not always this token will be there, only if we requested

34
00:02:54,680 --> 00:03:01,100
a reset and we'll have a reset token expiration or however you want to name it

35
00:03:01,190 --> 00:03:03,130
and that will be of type date

36
00:03:03,560 --> 00:03:07,620
and now I want to store that token on the user which we plan to reset.

37
00:03:07,670 --> 00:03:12,230
So first of all I need to find that user in the database and I'll use the mongoose user model for that,

38
00:03:12,920 --> 00:03:21,800
to find one user where the email matches the email we're trying to reset and that email which we're trying

39
00:03:21,800 --> 00:03:30,180
to reset can be extracted from the request body email field because on our reset view here, we

40
00:03:30,180 --> 00:03:31,830
do have that email field.

41
00:03:31,830 --> 00:03:38,510
By the way important, the action here should be /reset to reach the right route but with that, this is

42
00:03:38,550 --> 00:03:49,710
prepared and now in our controller, I'm finding a user who has this email. Now let's add then and catch, handle

43
00:03:49,770 --> 00:03:53,150
any potential error we might get by logging it for now

44
00:03:54,280 --> 00:04:00,910
and then in then, we should get a user or undefined if that user does not exist.

45
00:04:00,940 --> 00:04:05,730
So in here I want to check if we don't have a user.

46
00:04:05,830 --> 00:04:12,100
If we don't have a user, then I will flash a message as you learned it in the authentication module

47
00:04:13,410 --> 00:04:22,520
onto the error key, no account with that e-mail found or whatever message you want to show

48
00:04:22,750 --> 00:04:27,580
and then here I'll return a redirect to /reset.

49
00:04:27,580 --> 00:04:33,460
If we make it past this if check, then we are looking for an e-mail address that is stored in the database

50
00:04:33,490 --> 00:04:39,730
and now for that user which I retrieved for that e-mail address, I want to set the reset token

51
00:04:39,730 --> 00:04:47,740
equal to the token which I generated and I will set the reset token expiration equal to date now which

52
00:04:47,740 --> 00:04:51,130
gives me the current date and the time plus one hour

53
00:04:51,160 --> 00:04:53,950
and this now has to be expressed in milliseconds,

54
00:04:54,070 --> 00:04:58,050
so you should use 3,600,000milliseconds,

55
00:04:58,060 --> 00:05:04,400
this will be one hour. So now I'm assigning these two fields and we can call user save to then update

56
00:05:04,430 --> 00:05:05,950
our user in the database.

57
00:05:06,290 --> 00:05:11,290
Let's return this so that we can now chain another then call here, another

58
00:05:11,290 --> 00:05:16,130
then block which will execute this function when user save succeeds.

59
00:05:17,320 --> 00:05:22,690
So at this point of time, we know that the updated user was stored in the database and now we want to

60
00:05:22,690 --> 00:05:26,020
send that token reset email.

61
00:05:26,080 --> 00:05:30,730
Now I showed you how to send e-mails in the last lecture, in the last module I mean,

62
00:05:30,730 --> 00:05:36,000
so make sure you through that because I will now use that transporter again which I created there,

63
00:05:36,100 --> 00:05:39,560
the node mailer transporter which we use for sending email

64
00:05:39,820 --> 00:05:47,050
and I will send an e-mail to the e-mail of the user which we found, so to user e-mail, excuse me, to

65
00:05:47,680 --> 00:05:55,630
request body e-mail we can say, so to the e-mail we're requesting the reset for, the subject could be

66
00:05:56,020 --> 00:06:01,810
password reset and now in the html code,

67
00:06:02,060 --> 00:06:08,900
I'll use a next gen feature, back ticks which allows me to write multiline strings which makes it a bit easier

68
00:06:08,900 --> 00:06:09,800
to read.

69
00:06:09,800 --> 00:06:17,360
I'll add a paragraph where I say you requested a password reset, so users should be worried if they get

70
00:06:17,360 --> 00:06:17,640
that

71
00:06:17,660 --> 00:06:28,730
if they did not click this link to set a new password and you could include more information like the

72
00:06:28,730 --> 00:06:30,950
fact that this is only valid for one hour.

73
00:06:31,040 --> 00:06:41,900
Now this link here, this will be anchor tag leading at some url and that url will be in

74
00:06:41,900 --> 00:06:45,090
our case your localhost 3000

75
00:06:45,280 --> 00:06:52,510
and then let's say reset and then the token which we have. Now since I'm using this back tick syntax,

76
00:06:52,720 --> 00:06:56,000
I can dynamically embed values with a special syntax where

77
00:06:56,030 --> 00:06:58,500
I use ${}

78
00:06:58,600 --> 00:07:05,050
and now I can inject variables and their values into this string and the values of the variables will

79
00:07:05,050 --> 00:07:06,650
be placed in that string.

80
00:07:06,850 --> 00:07:11,440
So here, I can now output that token which we generated here,

81
00:07:11,440 --> 00:07:18,400
so now I am placing that in the url because that token is then what we'll later look for in the database

82
00:07:18,760 --> 00:07:24,020
to confirm that this link was sent by us because only we know the token.

83
00:07:24,310 --> 00:07:31,780
So this will send an email and at the same time, I will redirect back to the starting page let's say

84
00:07:32,320 --> 00:07:36,700
because the next instructions are received in the email of course.

85
00:07:36,730 --> 00:07:38,900
Now let's try this out in the next lecture.
