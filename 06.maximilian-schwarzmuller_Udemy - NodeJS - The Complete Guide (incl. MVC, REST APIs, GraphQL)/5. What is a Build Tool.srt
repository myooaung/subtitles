1
00:00:02,320 --> 00:00:06,470
Sekarang dan kami berjalan sebentar melalui NPM dan untuk apa kami menggunakannya.

2
00:00:06,640 --> 00:00:09,630
Mari kita bawa sesuatu ke catatan memori kita.

3
00:00:09,640 --> 00:00:16,090
J. S. kursus indice terutama digunakan untuk memutar server

4
00:00:16,090 --> 00:00:23,280
web dan menulis kode yang berjalan di sisi server dan itu memang hal utama yang Anda lakukan tanpa TS Ketika Anda menulis aplikasi terkenal Anda sendiri.

5
00:00:23,410 --> 00:00:29,320
Tetapi kita harus ingat bahwa secara teoritis Anda dapat menjalankan kode javascript apa pun tanpa kejeniusan dan secara khusus

6
00:00:29,320 --> 00:00:32,360
Anda juga dapat berinteraksi dengan sistem file lokal Anda.

7
00:00:32,380 --> 00:00:34,580
Anda dapat membaca dan menulis file.

8
00:00:34,870 --> 00:00:39,220
Dan itu membuka pintu baru peluang baru.

9
00:00:39,220 --> 00:00:46,900
Kami tidak dapat menggunakan kesempatan untuk mengeksekusi skrip utilitas yang misalnya mengurai file tertentu memanipulasi konten

10
00:00:46,900 --> 00:00:53,460
dan mengeluarkan konten yang dimanipulasi kembali ke file asli atau ke file baru.

11
00:00:53,560 --> 00:00:59,800
Dan itu adalah ide di balik apa yang disebut alat-alat buatan dan itu adalah sesuatu yang terkenal

12
00:00:59,800 --> 00:01:01,090
karena dapat digunakan.

13
00:01:01,660 --> 00:01:08,680
Dan penting untuk menunjukkan di sini bahwa ketika kita berbicara tentang perkakas yang dibangun dan membangun alur

14
00:01:08,680 --> 00:01:16,900
kerja, kita kebanyakan berbicara tentang pengembangan web front end seperti misalnya dengan aplikasi aksi ulang kita di sini aplikasi aksi ulang

15
00:01:16,900 --> 00:01:24,430
ini bukan aplikasi simpul JSA tetapi masih kita menggunakan paket jatuh berdekatan dan kami menggunakan NPM untuk menginstal paket.

16
00:01:24,430 --> 00:01:31,240
Paket-paket ini semuanya memegang kode yang berjalan di browser dan pada akhirnya kode yang kita tulis di

17
00:01:31,240 --> 00:01:34,400
folder sumber juga akan berakhir di browser.

18
00:01:34,420 --> 00:01:40,780
Tetapi izinkan saya menunjukkan bahwa cara kita menulisnya di sini tidak akan berjalan di peramban, setidaknya di semua peramban.

19
00:01:41,020 --> 00:01:47,920
Sebagai contoh, kita membagi kode javascript kita di sini di beberapa file dan kita menggunakannya sebagai

20
00:01:48,070 --> 00:01:51,760
sintaks impor modul untuk menggabungkan file-file ini bersama-sama.

21
00:01:51,760 --> 00:01:58,990
Sekarang ini tidak bekerja secara alami di semua browser hanya di browser yang sangat modern dan karena itu memang

22
00:01:58,990 --> 00:02:02,140
bukan kode yang akan berakhir di browser.

23
00:02:02,140 --> 00:02:03,810
Apakah kode ini bekerja dengan kami.

24
00:02:03,880 --> 00:02:11,440
Namun kami menggunakan alur kerja bangun alat bawaan yang stardate selama pengembangan dengan NPM start dan untuk produksi dengan

25
00:02:11,440 --> 00:02:18,280
NPM run, build alur kerja build ini kami akan mengambil kode kami dan menggabungkannya dan mengubahnya

26
00:02:18,280 --> 00:02:21,770
menjadi kode yang berjalan di browser lama juga.

27
00:02:21,940 --> 00:02:30,130
Dan itu juga pertarungan menit dan dioptimalkan karena itu yang penting kita gunakan alat membangun untuk mengoptimalkan kode

28
00:02:30,130 --> 00:02:30,970
kita.

29
00:02:31,000 --> 00:02:33,230
Kami mungkin menulis kode yang terlihat seperti ini.

30
00:02:33,250 --> 00:02:35,920
Memang begitulah cara kode kita bereaksi.

31
00:02:36,010 --> 00:02:37,000
Saya baru saja menunjukkan Anda.

32
00:02:37,300 --> 00:02:40,330
Tetapi seperti yang saya sebutkan ini tidak berjalan di semua browser.

33
00:02:40,330 --> 00:02:43,910
Dan bahkan jika itu akan sangat besar di browser.

34
00:02:43,930 --> 00:02:47,560
Karena semua kode harus diunduh oleh pengguna Anda sebelum dijalankan.

35
00:02:47,680 --> 00:02:52,140
Dan itu berbeda di server ada decode duduk di server dan hanya itu di browser.

36
00:02:52,150 --> 00:02:57,730
Kode harus diunduh dan oleh karena itu Anda ingin menyimpannya sekecil mungkin agar aplikasi

37
00:02:57,760 --> 00:03:01,810
dan kode javascript Anda di browser dimulai secepat mungkin.

38
00:03:02,080 --> 00:03:07,630
Karena itu kami ingin mengakhiri dengan kode yang dioptimalkan dan idenya di sini adalah bahwa kami juga memiliki

39
00:03:07,630 --> 00:03:14,550
kode yang tidak hanya terlalu besar tetapi ayah menggunakan fitur gen berikutnya seperti di sini untuk menyebarkan fungsi operator atau aero dan kami

40
00:03:14,550 --> 00:03:18,370
ingin bekerja ini untuk kode yang menjalankan browser yang lebih tua juga.

41
00:03:18,370 --> 00:03:24,310
Dan itu seperti contoh kode yang dioptimalkan yang lebih pendek kami menggunakan lebih sedikit karakter dan

42
00:03:24,310 --> 00:03:29,280
karena itu kode lebih pendek dan juga tidak menggunakan fitur javascript generasi berikutnya.

43
00:03:29,480 --> 00:03:35,140
Dan itulah idenya dan seperti yang saya sebutkan itu terutama penting untuk pengembangan Front-End karena

44
00:03:35,230 --> 00:03:37,960
tidak semua browser mendukung fitur selanjutnya.

45
00:03:37,960 --> 00:03:41,770
Dan kami ingin menjaga kode kami sekecil mungkin.

46
00:03:41,830 --> 00:03:45,680
Itu tidak terlalu penting di sisi server.

47
00:03:45,700 --> 00:03:47,050
Jadi itulah idenya.

48
00:03:47,080 --> 00:03:49,650
Itulah yang dapat kita gunakan untuk simpul dan rencana.

49
00:03:49,780 --> 00:03:55,560
Karena jika kita kembali ke proyek aksi ulang kita, kita ingin mengubah kode dat menjadi pekerjaan kita yang dioptimalkan.

50
00:03:55,890 --> 00:04:02,770
Dan jika Anda menjalankan NPM run yang dibangun dalam proyek Anda di sini, Anda sebenarnya memulai produksi alur kerja

51
00:04:02,770 --> 00:04:06,050
yang berarti sekarang ini menciptakan bundel produksi yang dioptimalkan.

52
00:04:06,250 --> 00:04:12,360
Dan ini semua dilakukan oleh NPM yang memulai script dan dengan node.

53
00:04:12,760 --> 00:04:19,000
Dan ini selesai dan sekarang memang jika kita melihat bangunan ini lebih lengkap, ini sekarang memegang kode aplikasi kita.

54
00:04:19,030 --> 00:04:20,740
Jadi kode yang kami tulis dan sumber.

55
00:04:20,800 --> 00:04:27,670
Tetapi dengan cara yang dioptimalkan mereka berada di folder statis kita memiliki kode javascript dan jika kita melihat bahwa ini

56
00:04:28,070 --> 00:04:30,030
pada akhirnya adalah kode kita.

57
00:04:30,070 --> 00:04:36,540
Hanya banyak berkelahi banyak dan oleh karena itu cukup sulit untuk membaca tetapi ini adalah kode kami dan kode ini

58
00:04:36,540 --> 00:04:43,330
tidak hanya sangat singkat dan hanya berisi logika javascript gen saat ini sehingga logika yang berjalan di semua browser yang harus

59
00:04:43,330 --> 00:04:46,570
dilakukan tentu saja bukan kode yang kita inginkan untuk menulis.

60
00:04:46,570 --> 00:04:53,050
Sangat sulit untuk menggali itu tetapi untuk kode ingin output dan kami menggunakan NPM dan node untuk mengubah kode

61
00:04:53,050 --> 00:04:53,640
kami.

62
00:04:53,650 --> 00:04:55,650
Itulah ide di balik alat yang dibangun.

63
00:04:55,900 --> 00:04:59,740
Dan sekarang mari kita lihat lebih dekat bagaimana NPM dan node dapat membantu kita dengan itu.
