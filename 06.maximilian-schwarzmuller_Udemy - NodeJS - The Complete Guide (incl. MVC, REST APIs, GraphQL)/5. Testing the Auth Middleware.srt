1
00:00:02,240 --> 00:00:07,840
Ovviamente ora è importante sottolineare che questi test sono totalmente ridondanti.

2
00:00:07,880 --> 00:00:12,020
Non stiamo testando il nostro codice, non il nostro codice di applicazione, almeno.

3
00:00:12,110 --> 00:00:17,730
Stiamo testando un codice fittizio e stiamo definendo tutto ciò su cui il nostro test fa affidamento direttamente nel test.

4
00:00:17,750 --> 00:00:24,890
Hanno questo test eseguito stand alone totalmente distaccato dalla nostra applicazione e se il test ha successo o

5
00:00:24,890 --> 00:00:31,280
fallisce dipende solo dal codice di test stesso che ovviamente è un test che dovresti ammettere.

6
00:00:31,280 --> 00:00:33,840
Non è un test utile.

7
00:00:33,860 --> 00:00:38,870
Questo è solo un po 'di codice javascript che stai facendo funzionare bene se hai troppo tempo da perdere

8
00:00:38,870 --> 00:00:40,420
ma certamente non ti aiuta.

9
00:00:40,640 --> 00:00:47,480
In realtà si desidera testare il codice dell'applicazione e si desidera un codice di test non del tutto definito

10
00:00:47,480 --> 00:00:53,240
qui e i test invece nei test in genere definiscono solo le condizioni di successo.

11
00:00:53,240 --> 00:00:59,540
È possibile, in ogni caso, avere più condizioni di successo e più aspettative e definire eventuali

12
00:00:59,570 --> 00:01:02,400
impostazioni aggiuntive necessarie per quel test.

13
00:01:02,420 --> 00:01:09,140
Ad esempio, l'input dell'utente presuppone che questo test simuli diversi scenari, ma non si desidera avere il codice

14
00:01:09,140 --> 00:01:13,790
effettivo o il comportamento effettivo che si stava testando nel test.

15
00:01:13,790 --> 00:01:22,430
Non è questa l'idea e quindi sbarazzarsi di questi test fittizi 0 Semplicemente li commenterò e

16
00:01:22,850 --> 00:01:27,590
scriveremo un test più realistico e più utile.

17
00:01:27,610 --> 00:01:29,020
Ora cosa potrebbe essere.

18
00:01:29,440 --> 00:01:35,470
Diamo un'occhiata al nostro middleware e il nostro è di middleware e proviamo forse qualcosa relativo a questa

19
00:01:35,710 --> 00:01:37,620
funzione che stiamo esportando qui.

20
00:01:37,630 --> 00:01:43,050
Esportiamo una funzione middleware e alla fine potremmo testare tutti i tipi di cose lì.

21
00:01:43,060 --> 00:01:46,110
Quindi aggiungiamo un nuovo file nella cartella di test.

22
00:01:46,300 --> 00:01:53,470
Il punto middleware off J è un file per esempio e puoi anche chiamarlo come vuoi.

23
00:01:53,470 --> 00:01:57,770
E qui ora voglio importare questa funzione e quindi testarla.

24
00:01:57,940 --> 00:02:06,880
Quindi tutti importano il mio middleware disattivato richiedendolo ovviamente dalla cartella middleware dal file.

25
00:02:07,090 --> 00:02:09,140
E poi di nuovo definiamo un test.

26
00:02:09,160 --> 00:02:10,970
Ora, cosa potremmo testare qui.

27
00:02:10,990 --> 00:02:14,530
Ci sono un sacco di cose che possiamo testare e testeremo cose diverse qui.

28
00:02:14,980 --> 00:02:22,760
Ma il primo semplice test potrebbe essere che vogliamo essere sicuri di ricevere un errore ogni volta che quest'anno non ha un'intestazione di autorizzazione,

29
00:02:22,760 --> 00:02:29,290
quindi torniamo al middleware off. J. S. file in cui definiamo

30
00:02:29,290 --> 00:02:39,970
un test potremmo dire che il test finale dovrebbe generare un errore o se non è presente un'intestazione di autorizzazione.

31
00:02:40,060 --> 00:02:47,230
Questa è una descrizione valida per il nostro test qui e poi aggiungerò una funzione in cui aggiungiamo effettivamente

32
00:02:47,230 --> 00:02:55,120
il nostro codice di test e ora ovviamente desideriamo richiamare il nostro manuale del middleware off perché non stiamo simulando un

33
00:02:55,420 --> 00:02:57,270
flusso di richieste completo.

34
00:02:57,270 --> 00:03:03,400
Non simuliamo un clic dell'utente che invia una richiesta che attiva il middleware.

35
00:03:03,490 --> 00:03:06,040
Vogliamo solo testare la nostra funzione middleware.

36
00:03:06,040 --> 00:03:11,890
Questo è chiamato un test unitario dal modo in cui testiamo un'unità della nostra applicazione.

37
00:03:11,950 --> 00:03:16,300
In questo caso, questa è una funzione in genere un'unità è una funzione qui.

38
00:03:16,420 --> 00:03:23,520
È questo test di integrazione della funzione middleware dove testeremo un flusso più completo.

39
00:03:23,530 --> 00:03:30,580
Quindi, dove potremmo verificare se la tua richiesta è correttamente instradata e poi tutto il middleware e

40
00:03:30,580 --> 00:03:37,930
poi anche la funzione controller, ma non la testate troppo spesso perché è molto complicato testare catene

41
00:03:37,930 --> 00:03:39,140
così lunghe.

42
00:03:39,190 --> 00:03:41,150
Ci sono più cose che potrebbero fallire.

43
00:03:41,370 --> 00:03:46,870
E scrivendo unit test è più semplice testare diversi scenari per ogni unità.

44
00:03:46,960 --> 00:03:53,170
E se tutti i tuoi test unitari hanno successo, hai una grande possibilità che l'applicazione generale funzioni correttamente.

45
00:03:53,170 --> 00:03:55,620
E i dati dal test dell'unità di scrittura sono molto utili.

46
00:03:55,690 --> 00:04:00,150
Se un test unitario fallisce è anche facile scoprire perché ha fallito.

47
00:04:00,160 --> 00:04:05,410
Se hai molti passi e Wolf, potrebbe essere più difficile scoprire quale passo ha fallito.

48
00:04:05,410 --> 00:04:10,980
Quindi stiamo testando questa necessità funzionale del middleware e questo ovviamente significa che dobbiamo creare un oggetto

49
00:04:10,990 --> 00:04:11,890
Request fittizio.

50
00:04:11,890 --> 00:04:17,470
Lo passiamo perché normalmente è passato dal middleware Express, proprio come le risposte e il prossimo.

51
00:04:17,650 --> 00:04:23,800
Ma ora, dal momento che chiamiamo direttamente la nostra funzione middleware, vogliamo definire il nostro oggetto di richiesta

52
00:04:24,010 --> 00:04:28,230
e questo è davvero grande perché ci consente di definire diversi scenari.

53
00:04:28,240 --> 00:04:36,670
Quindi qui posso creare un oggetto di richiesta e quell'oggetto qui dovrebbe avere un risultato funzionale perché nel middleware off

54
00:04:36,670 --> 00:04:40,900
sto chiamando la funzione set qui e questo diventa funky.

55
00:04:40,900 --> 00:04:46,390
Ora in realtà restituisce il valore dell'intestazione dell'autorizzazione.

56
00:04:46,390 --> 00:04:52,810
Ora, in realtà, questo metodo Get fornito da Express è molto più complesso, naturalmente non solo scansiona

57
00:04:52,810 --> 00:04:59,950
le intestazioni, ma scansiona diverse parti della richiesta in arrivo, ma il nostro obiettivo non è replicare il framework

58
00:04:59,950 --> 00:05:06,730
Express ma testare uno scenario specifico e qui questo lo scenario è che la prenotazione fuori sede non

59
00:05:06,940 --> 00:05:11,780
restituisce l'intestazione della Rice Station perché è quello che vogliamo testare qui.

60
00:05:11,860 --> 00:05:14,490
Che in questo caso abbiamo generato un errore.

61
00:05:14,710 --> 00:05:17,930
Quindi qui la funzione disfunzione dovrebbe semplicemente ritornare.

62
00:05:17,940 --> 00:05:24,660
No, questo significa che non restituisce un valore per la nostra chiamata di autorizzazione qui.

63
00:05:24,670 --> 00:05:30,350
Ora ovviamente qui passiamo una stringa di autorizzazione al metodo get qui.

64
00:05:30,400 --> 00:05:32,140
Non mi aspetto questo argomento.

65
00:05:32,140 --> 00:05:37,390
Ovviamente potresti aggiungere che potresti aspettarti il nome della tua intestazione o qualsiasi altra cosa tu voglia chiamare,

66
00:05:37,390 --> 00:05:38,940
ma non mi interessa davvero.

67
00:05:38,980 --> 00:05:45,430
So che il codice che voglio testare le chiamate per ottenere il metodo e ho notato che voglio tornare ora

68
00:05:45,610 --> 00:05:50,740
per simulare che non c'è l'intestazione di autorizzazione perché ovviamente conosco il codice e test

69
00:05:50,770 --> 00:05:56,690
e voglio testare diversi scenari e questo è come devi pensare a testare i tuoi diversi scenari di test.

70
00:05:56,740 --> 00:06:00,350
Non stai cercando di ricostruire il framework che stai utilizzando.

71
00:06:00,460 --> 00:06:04,780
Non stai provando a ricostruire alcune funzionalità complesse.

72
00:06:04,780 --> 00:06:10,750
Vuoi forzare il tuo codice in determinati scenari per testarli in determinati scenari.

73
00:06:10,750 --> 00:06:17,050
E qui lo scenario è che il metodo get sull'oggetto request ritorna non importa ciò che

74
00:06:17,050 --> 00:06:18,650
fa nella realtà.

75
00:06:18,670 --> 00:06:25,000
Quindi qui restituiamo NULL che, naturalmente, potrebbe essere il caso se nella nostra vera app che esegue realmente riceviamo una richiesta

76
00:06:25,000 --> 00:06:27,580
in cui non è impostata l'intestazione di autorizzazione.

77
00:06:27,580 --> 00:06:30,530
In questo caso restituirebbe anche null o undefined.

78
00:06:30,550 --> 00:06:32,320
Quindi qui restituiamo null.

79
00:06:32,320 --> 00:06:38,540
Ora possiamo richiamare il middleware e passare qui il nostro oggetto di richiesta che non ha nient'altro.

80
00:06:38,620 --> 00:06:39,760
Non ha nient'altro.

81
00:06:39,800 --> 00:06:44,870
L'oggetto richiesta normalmente ha ma ha tutto ciò che ci serve per questo test lì.

82
00:06:45,040 --> 00:06:52,180
Abbiamo solo bisogno di questo metodo get e ora l'oggetto response può passare su un oggetto dummy vuoto perché non

83
00:06:52,180 --> 00:06:58,420
stiamo testando nulla relativo a questo oggetto respondes e il codice che stiamo testando non si basa

84
00:06:58,450 --> 00:07:03,550
su di esso non utilizza nemmeno l'oggetto risposta in questa intera funzione e

85
00:07:03,550 --> 00:07:08,780
pertanto non è necessario dedicare alcun tempo all'aggiunta di alcuna logica a questo oggetto risposta.

86
00:07:08,920 --> 00:07:11,110
E ora la prossima funzione che viene chiamata alla fine.

87
00:07:11,410 --> 00:07:17,890
Beh, vogliamo passarlo, ma non ci interessa sapere cosa fa perché non stiamo ancora realizzando

88
00:07:17,890 --> 00:07:19,620
il prossimo passo qui.

89
00:07:19,690 --> 00:07:26,020
Quindi qui passerò semplicemente in una funzione di Erol vuota in modo che sia in grado di chiamarla senza

90
00:07:26,170 --> 00:07:31,600
lanciarla, ma morta tutto non fa nulla perché non è ancora quando voglio un test.

91
00:07:31,700 --> 00:07:34,770
Voglio solo un comportamento di prova quando ottengo i ritorni.

92
00:07:34,770 --> 00:07:35,150
No.

93
00:07:36,080 --> 00:07:39,820
Quindi ora lo chiamiamo, ma ovviamente volevamo testare qualcosa di giusto.

94
00:07:39,860 --> 00:07:43,670
Quindi ora importiamo di nuovo l'attesa.

95
00:07:43,840 --> 00:07:48,230
Ma richiede chai e poi aspettati.

96
00:07:48,230 --> 00:07:52,870
E ora aspettiamo il risultato di quella chiamata middleware qui.

97
00:07:52,880 --> 00:08:02,030
Quindi se l'intera chiamata è qualcosa in cui in questo caso gettare è tutto un altro metodo di utilità che hai qui puoi trovare

98
00:08:02,030 --> 00:08:08,420
la sua scatola ufficiale dell'India ovviamente qui se scorri verso il basso o se tu come la

99
00:08:08,420 --> 00:08:11,620
tua ricerca per fro trova una spiegazione dettagliata.

100
00:08:11,630 --> 00:08:19,100
Quindi ora mi aspetto che questa funzione invochi una richiesta che restituisce null quando proviamo a ottenere qualcosa per un dato

101
00:08:19,100 --> 00:08:20,480
nome di intestazione.

102
00:08:20,510 --> 00:08:29,160
Mi aspetto che papà lanci un errore con il messaggio e ora il messaggio, naturalmente, è trovare il nostro

103
00:08:29,160 --> 00:08:30,180
vero codice.

104
00:08:30,180 --> 00:08:32,280
Dovremmo avere un messaggio di non autenticato.

105
00:08:32,280 --> 00:08:34,590
Quindi questo messaggio esatto qui.

106
00:08:34,650 --> 00:08:40,420
Quindi mi aspetto che questo venga gettato.

107
00:08:40,580 --> 00:08:51,610
Ora eseguiamo nuovamente il test NPM e in realtà ricevo un errore e, naturalmente, è strano.

108
00:08:51,640 --> 00:08:53,460
Perché sto ricevendo l'errore.

109
00:08:53,470 --> 00:08:54,800
Sto provando a provare.

110
00:08:54,850 --> 00:08:59,320
In realtà questo dovrebbe passare senza errori perché la funzione ha bloccato un errore perché è

111
00:08:59,320 --> 00:09:00,760
quello che mi aspetto.

112
00:09:00,760 --> 00:09:02,090
Bene, la ragione è semplice.

113
00:09:02,320 --> 00:09:08,050
Sto chiamando la mia funzione middleware qui e questa funzione middleware capita semplicemente di lanciare un errore.

114
00:09:08,110 --> 00:09:10,320
Non voglio chiamarlo da solo.

115
00:09:10,330 --> 00:09:12,780
Voglio lasciare il mio quadro di prova.

116
00:09:12,880 --> 00:09:16,810
Quindi, vuoi lasciare a mocha e chai questi due strumenti che voglio e lasciali fare.

117
00:09:16,900 --> 00:09:21,160
Chiamami questa funzione in modo che possano gestire il flusso e l'errore.

118
00:09:21,160 --> 00:09:25,620
Qui avrei dovuto gestirlo da solo e questo avrebbe vanificato l'intero scopo di testarlo.

119
00:09:25,780 --> 00:09:32,470
Quindi, invece di chiamare direttamente il middleware qui, invece, passiamo qui solo un riferimento a

120
00:09:32,470 --> 00:09:33,540
questa funzione.

121
00:09:33,550 --> 00:09:42,490
Cue la nostra funzione expect e vogliamo solo associare gli argomenti che alla fine vogliamo passare quando le nostre chiamate di setup test richiedono

122
00:09:42,490 --> 00:09:49,630
che questa funzione, prima di tutto, richieda l'input per questa parola chiave che può essere questa e quindi ha

123
00:09:49,630 --> 00:09:55,210
gli argomenti gratuiti che in realtà essere passati nella funzione middleware off una volta

124
00:09:55,210 --> 00:09:56,670
che viene chiamato.

125
00:09:56,740 --> 00:09:58,760
Quindi non lo chiamiamo noi stessi qui.

126
00:09:58,840 --> 00:10:05,620
Stiamo invece passando un riferimento preparato alla nostra funzione che potresti dire preparato nel senso di dove definire

127
00:10:05,620 --> 00:10:09,130
quali funzioni vengono passate dove gli argomenti vengono passati.

128
00:10:09,130 --> 00:10:12,990
Quindi stiamo passando quel riferimento preparato per aspettarci.

129
00:10:13,270 --> 00:10:18,360
E ora se riesegui il test NPM dovresti effettivamente vedere un test che passa.

130
00:10:18,460 --> 00:10:24,730
Ora, se ti aspetti un messaggio di errore leggermente diverso e riesegui il test NPM, si verifica

131
00:10:24,730 --> 00:10:30,670
un errore perché ci aspettiamo che venga generato un errore che non lo autentica correttamente.

132
00:10:30,670 --> 00:10:33,690
Questo è quello che ci aspettiamo qui con un punto esclamativo.

133
00:10:33,910 --> 00:10:40,390
Ma non ci siamo autenticati con un punto e questa è l'idea alla base del test, dobbiamo essere chiari qui

134
00:10:40,390 --> 00:10:43,440
perché puoi testare tutti i tipi di cose diverse.

135
00:10:43,570 --> 00:10:47,410
E qui stiamo testando il lancio del messaggio di errore corretto.

136
00:10:47,520 --> 00:10:51,740
E quindi questo test ha successo solo se abbiamo un errore.

137
00:10:51,850 --> 00:10:57,730
Se non stiamo commettendo un errore in un anno, se effettivamente stiamo inviando la nostra risposta all'errore

138
00:10:57,730 --> 00:11:03,700
e non lanciamo un errore, questo test non avrà successo o se lanciamo un errore con un

139
00:11:03,760 --> 00:11:10,630
messaggio di errore diverso come hai appena visto tutto questo non eccede, ora la cosa interessante è che se cambiamo

140
00:11:10,630 --> 00:11:18,280
qualcosa su questo codice, ad esempio, decidiamo di rimuovere questo controllo qui, dove controlliamo l'intestazione 40 e ora eseguo di nuovo il

141
00:11:18,280 --> 00:11:27,350
test ricevo un errore e questo mi dice oh ho bisogno di fare qualcosa perché il mio test ha fallito questo test in cui voglio essere

142
00:11:27,470 --> 00:11:32,890
sicuro di non essere in grado di recuperare la testa o in realtà congelato l'errore.

143
00:11:32,900 --> 00:11:37,760
Questo non passa più e quindi ora dovrei dare un'occhiata al mio middleware e posso scoprirlo

144
00:11:37,820 --> 00:11:43,820
oh I commenta che questo o forse non ho mai aggiunto disfunzionalità in primo luogo o l'ho ottimizzato in qualche

145
00:11:43,820 --> 00:11:46,400
modo che questo errore non è congelato più.

146
00:11:46,460 --> 00:11:51,500
Forse dovrei semplicemente controllare e cambiare le sue condizioni accidentalmente sto controllando l'esistenza di un'intestazione per farlo

147
00:11:51,500 --> 00:11:57,110
fluttuare errore perché ho un errore di battitura o perché ne avevo bisogno in passato o qualsiasi altra cosa.

148
00:11:57,110 --> 00:12:02,840
Quindi il mio test fallisce come puoi vedere e posso esaminare il mio codice e scoprire perché ha fallito.

149
00:12:02,840 --> 00:12:08,960
E qui vedo che mi aspettavo di fare un errore, ma in realtà ho ricevuto un errore diverso e ho ricevuto

150
00:12:08,960 --> 00:12:09,860
un errore diverso.

151
00:12:10,040 --> 00:12:16,190
Beh, probabilmente c'è qualcosa di sbagliato in questo codice qui e posso esaminare quel codice e alla fine scoprire

152
00:12:16,190 --> 00:12:19,300
che qui mi manca un punto esclamativo, ad esempio.

153
00:12:19,640 --> 00:12:23,660
Quindi questa è l'idea alla base del test ogni volta che cambiamo qualcosa nel nostro codice.

154
00:12:23,690 --> 00:12:29,690
Finché abbiamo dei test per questo, riceviamo un avvertimento che avremo la possibilità di modificare il nostro codice e risolvere il problema

155
00:12:29,690 --> 00:12:30,710
che abbiamo introdotto.
