WEBVTT
1
00:00:02.230 --> 00:00:08.470
Ora ovviamente possiamo testare molto di più sui nostri controller, ma fondamentalmente non si tratta solo di cose che

2
00:00:08.470 --> 00:00:10.350
ho già spiegato a voi.

3
00:00:10.360 --> 00:00:16.630
Puoi scrivere diverse aspettative puoi impostare gli oggetti di richiesta di amicizia che si passano con diversi indirizzi e-mail

4
00:00:16.690 --> 00:00:21.520
e password e che ti permette di giocare che si aspettano cose diverse.

5
00:00:21.670 --> 00:00:26.940
Ma ho anche detto che esiste più di un modo per gestire il codice che accede a un database.

6
00:00:27.100 --> 00:00:31.690
Il modo in cui affrontiamo fino ad ora è che semplicemente lo mozziamo.

7
00:00:31.690 --> 00:00:37.390
Creiamo uno stub per trovare un metodo e poi definiamo cosa dovrebbe fare questo test case e

8
00:00:37.390 --> 00:00:38.500
poi lo ripristino.

9
00:00:38.500 --> 00:00:40.560
E questo è assolutamente soddisfacente.

10
00:00:40.750 --> 00:00:44.550
In Perù vince il vero accesso al database che si verifica qui.

11
00:00:44.680 --> 00:00:50.980
E questo, naturalmente, potrebbe essere ciò che vogliamo perché ci permette di eseguire i nostri test più velocemente e, ovviamente, di importante.

12
00:00:51.040 --> 00:00:57.520
Inoltre, non ha alcun impatto sul database perché i test potrebbero ancora scrivere dati nel database

13
00:00:57.520 --> 00:01:02.860
e sicuramente non si desidera che ciò accada almeno nel database di produzione.

14
00:01:02.930 --> 00:01:10.790
È comunque una configurazione valida utilizzare un database di test dedicato perché, mentre naturalmente lo svantaggio è che i

15
00:01:10.790 --> 00:01:13.900
test avranno un po 'più di tempo.

16
00:01:13.970 --> 00:01:18.470
Il vantaggio è che hai un ambiente di test molto realistico.

17
00:01:18.470 --> 00:01:25.250
Se colpisci davvero un database e scrivi veramente dati in quel database e lo leggi da lì

18
00:01:25.250 --> 00:01:27.350
hai un po 'di più.

19
00:01:27.380 --> 00:01:32.510
Non si dispone solo di un test unitario, si ha una specie di test di integrazione perché si

20
00:01:32.510 --> 00:01:38.390
ha un flusso completo di controllo o si esegue il modello che il suo lavoro raggiunge i dati di ritorno del database.

21
00:01:38.570 --> 00:01:44.900
Hai più di un semplice test unitario ma sei tutto loro hanno un test in circostanze molto

22
00:01:45.080 --> 00:01:51.440
realistiche e in alcuni casi questo potrebbe essere quello che vuoi e potrebbe essere più facile che

23
00:01:51.440 --> 00:01:58.820
fermare tutto e scrivere un sacco di codice lancinante e quindi lasciami mostra come è possibile configurare un ambiente di

24
00:01:58.820 --> 00:02:04.160
test per Mongo dove si utilizza un database di test dedicato, perché è importante.

25
00:02:04.160 --> 00:02:08.870
Sicuramente non vuoi usare il tuo database di produzione per i test.

26
00:02:08.870 --> 00:02:15.750
Non vuoi fare confusione con i dati degli utenti per i test e cancellati accidentalmente o qualcosa del genere.

27
00:02:15.880 --> 00:02:22.840
Creiamo quindi un nuovo test che sei ancora collegato al controller spento prima di completare questo modulo con il

28
00:02:22.840 --> 00:02:24.900
controllo del feed o successivamente.

29
00:02:25.330 --> 00:02:29.830
Quindi ancora collegato al controller spento e abbiamo dovuto esaminare il log in.

30
00:02:29.830 --> 00:02:35.860
Ovviamente c'è di più che potremmo testare, ma passiamo ora al metodo di acquisizione dello stato utente qui

31
00:02:35.990 --> 00:02:38.680
per ottenere l'azione del controllore dello stato utente.

32
00:02:38.830 --> 00:02:44.110
Lì stiamo trovando un utente da I. D. e quindi sarà necessario assicurarsi che il nostro database

33
00:02:44.140 --> 00:02:45.600
di test abbia un tale utente.

34
00:02:45.600 --> 00:02:50.590
E non volevamo solo assicurarci che diciamo che potremmo anche testare se non troviamo un utente

35
00:02:50.590 --> 00:02:53.770
per I. D. e prova per un I. D. questo non esiste

36
00:02:53.830 --> 00:03:00.580
Ma diciamo tutti che vogliamo testare per un I. D. Esiste quindi vogliamo solo

37
00:03:00.670 --> 00:03:10.410
assicurarci che in realtà non restituiamo un errore ma che invece restituiamo una risposta in cui è impostato lo stato dell'utente.

38
00:03:10.750 --> 00:03:12.180
Quello potrebbe essere a deve volere a destra.

39
00:03:12.190 --> 00:03:19.630
Quindi tornerò nel controller off aggiungerò un nuovo test case e fornirgli una

40
00:03:19.690 --> 00:03:28.680
descrizione dovrebbe inviare una risposta con uno stato utente valido per un utente esistente qualcosa del genere.

41
00:03:28.690 --> 00:03:35.550
Ora questo richiederà di nuovo la parola chiave done perché eseguiremo nuovamente codice asincrono in quel caso di test.

42
00:03:35.770 --> 00:03:41.370
E ora all'interno di quel test case voglio collegarmi al mio database di test.

43
00:03:41.440 --> 00:03:46.300
Voglio assicurarmi che ci sia un utente in quel database, ovviamente

44
00:03:46.300 --> 00:03:53.230
perché altrimenti non posso recuperare l'utente, quindi voglio recuperarlo e voglio assicurarmi che in quel momento io

45
00:03:53.230 --> 00:04:00.640
faccia effettivamente in modo che l'azione del mio controller recuperi correttamente l'utente stato e aggiunto a una risposta

46
00:04:00.640 --> 00:04:07.200
con un codice di stato di 200 diciamo ora per prima cosa dobbiamo connetterci al database.

47
00:04:07.430 --> 00:04:11.500
E questo ci impone di importare Mongoose.

48
00:04:11.870 --> 00:04:17.750
Quindi chiediamo qui a Mongoose e configuriamo una connessione laggiù in questo caso di test.

49
00:04:17.750 --> 00:04:23.060
E ti dirò un modo diverso di farlo presto per un caso di test, ma per

50
00:04:23.060 --> 00:04:27.050
ora facciamolo qui chiamando ciò che non è questo, ma connettiti.

51
00:04:27.050 --> 00:04:29.530
E ora hai bisogno della tua stringa di connessione.

52
00:04:29.660 --> 00:04:34.730
E per questo puoi generalmente usare la stessa stringa di connessione usata prima di un'app J. S..

53
00:04:34.730 --> 00:04:43.180
Quindi questa stringa di connessione qui puoi usare che in realtà è possibile copiare qui l'intero codice anche

54
00:04:43.180 --> 00:04:47.650
nel tuo controller spento aggiunto in questo modo.

55
00:04:47.650 --> 00:04:50.410
No, ho solo bisogno di aggiustare alcune cose.

56
00:04:50.680 --> 00:04:56.140
Ho cambiato la password per l'utente nel frattempo io lo incollo e quanto importante il database a cui

57
00:04:56.140 --> 00:04:58.720
stai collegando papà dovrebbe essere un database testato.

58
00:04:58.720 --> 00:04:59.450
Quindi lo chiamerò.

59
00:04:59.500 --> 00:05:01.040
Verifica i messaggi qui.

60
00:05:01.120 --> 00:05:02.310
E questo è super importante.

61
00:05:02.320 --> 00:05:05.200
Non utilizzare il database di produzione.

62
00:05:05.290 --> 00:05:08.440
Ovviamente, non chiamiamo app-app quando abbiamo successo.

63
00:05:08.500 --> 00:05:12.730
Ma invece qui ora possiamo continuare a impostare il nostro test.

64
00:05:12.880 --> 00:05:18.750
E di nuovo ti mostrerò un modo più elegante di fare tutto questo in questo modo annidato in seguito.

65
00:05:18.790 --> 00:05:26.160
Quindi qui ora voglio definire la mia logica di test e la mia logica di test qui.

66
00:05:26.200 --> 00:05:33.640
Ovviamente, prima di tutto ho bisogno di quell'utente fittizio, quindi creerò un utente con un nuovo utente utente

67
00:05:33.640 --> 00:05:41.650
già importato e quell'utente che viene creato qui, ovviamente, deve essere creato come lo facciamo nel nostro modello utente

68
00:05:41.650 --> 00:05:46.530
o come lo definiamo qui con l'email una password un nome.

69
00:05:46.780 --> 00:05:51.520
Lo stato non deve essere impostato perché c'è un default di I am new per il quale

70
00:05:51.520 --> 00:05:53.620
dovremmo controllare in seguito e pubblicarlo correttamente.

71
00:05:53.800 --> 00:05:58.650
Quindi il nome e il post della password e-mail è ciò che dovrebbe essere impostato qui.

72
00:05:58.660 --> 00:06:06.130
L'e-mail potrebbe essere testata al test dot password com può essere Tester e ovviamente conosce la password hash, ma questa

73
00:06:06.130 --> 00:06:14.340
è solo una configurazione di test il nome potrebbe essere test e l'array Post può essere vuoto e lo stato non deve

74
00:06:14.340 --> 00:06:20.520
essere impostato di nuovo perché è definito un valore predefinito che chiamiamo sicuro e lo restituisco

75
00:06:20.520 --> 00:06:27.000
perché ciò restituirà sempre una promessa, quindi ora possiamo aggiungere un altro blocco quindi in disfunzione qui

76
00:06:27.000 --> 00:06:30.980
ora l'utente fittizio viene configurato e salvato nel database.
