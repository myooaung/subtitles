1
00:00:02,440 --> 00:00:06,460
So now that we added some relational information to our orders,

2
00:00:06,460 --> 00:00:13,420
we can go back to getting all the orders in our user.js file in the models folder. There I have get

3
00:00:13,450 --> 00:00:20,590
orders and now I want to reach out to my orders and simply find them all or at least find all for that

4
00:00:20,620 --> 00:00:21,430
user.

5
00:00:21,430 --> 00:00:24,670
Now how do I find all orders for that user?

6
00:00:25,210 --> 00:00:30,650
Well remember, each order has a user object and in that user object, we have the ID of that user,

7
00:00:30,730 --> 00:00:35,170
so we need to compare that ID to the current user ID.

8
00:00:35,170 --> 00:00:37,830
Now to do this, we add a filter and now in mongodb,

9
00:00:37,840 --> 00:00:42,350
you can also check nested properties by defining the path to them,

10
00:00:42,370 --> 00:00:47,500
the only important thing to know here is that you need to use quotation marks around the path and then

11
00:00:47,500 --> 00:00:50,410
you can say check user

12
00:00:50,620 --> 00:00:52,220
and then the ID for the user.

13
00:00:52,330 --> 00:00:58,810
You do that by specifying user._id and this will look for _id in the user property

14
00:00:58,810 --> 00:01:01,230
which holds an embedded document

15
00:01:01,240 --> 00:01:08,620
and then here I can compare it is to a new objectid for this ID and this should give me all orders

16
00:01:08,830 --> 00:01:11,900
for that user and this will now be more than one,

17
00:01:12,070 --> 00:01:19,150
so again we can use the toArray shortcut and return that data to return an array of orders for that

18
00:01:19,150 --> 00:01:26,670
user and our user here for example has two orders because we got two orders for that user ID.

19
00:01:27,250 --> 00:01:29,960
So now we want to output that order information,

20
00:01:29,980 --> 00:01:33,540
so let's go to the shop controller, get orders, now

21
00:01:33,580 --> 00:01:36,620
I named my function get orders here too,

22
00:01:36,760 --> 00:01:39,520
so calling that here should work.

23
00:01:40,620 --> 00:01:44,470
We don't need that anymore, that include thing was related to sequelize.

24
00:01:44,880 --> 00:01:48,950
I then get back my orders and I passed them to the orders view,

25
00:01:49,230 --> 00:01:54,120
so let's now just inspect that orders view here and there

26
00:01:54,150 --> 00:02:00,150
I loop through all my orders and for every order, I have an _id, that's important

27
00:02:00,450 --> 00:02:06,090
and then in the orders, I don't have products, we could name it as such but I named it items here.

28
00:02:06,090 --> 00:02:08,230
So I'll loop through all the items now,

29
00:02:08,460 --> 00:02:10,690
there will be product information in there though,

30
00:02:10,800 --> 00:02:16,280
for example the title and the quantity which is now a top level field in product

31
00:02:16,320 --> 00:02:18,310
so we access it like this.

32
00:02:18,540 --> 00:02:24,600
And with that out of the way, let's save that and let's go to the routes folder and there the shop.js

33
00:02:24,600 --> 00:02:29,190
file and comment in that one orders route you removed earlier.

34
00:02:29,820 --> 00:02:34,940
And let's now click on orders up there, get db is not defined,

35
00:02:35,770 --> 00:02:39,300
that should be a typo in get orders in the user model,

36
00:02:39,530 --> 00:02:42,750
yeah this should be get db with a lower case b.

37
00:02:43,240 --> 00:02:47,270
So let's reload that page and this looks much better,

38
00:02:47,290 --> 00:02:52,950
now we got our orders with the ID and with the items we ordered.

39
00:02:52,960 --> 00:02:54,410
So this is now working,

40
00:02:54,430 --> 00:03:00,970
now we got that basic shop functionality working again which we had work earlier with sequelize,

41
00:03:01,060 --> 00:03:08,730
now we're doing it with mongodb. Now obviously just as we used sequelize for SQL

42
00:03:08,740 --> 00:03:16,300
to make certain things easier, we can do the same with mongodb and there also, we can find an alternative

43
00:03:16,330 --> 00:03:18,460
that makes our life a bit easier.
