0
1
00:00:04,560 --> 00:00:05,790
What's up, everyone?
1

2
00:00:05,790 --> 00:00:13,590
So I want to talk really quick about how we estimate
the time it's going to take to do a particular
2

3
00:00:13,590 --> 00:00:20,700
software or project, or how to figure out how long it's
going to take to have us build something so that we can
3

4
00:00:20,700 --> 00:00:24,800
say, "Okay, at this point in time, we're going to have this."
4

5
00:00:24,990 --> 00:00:27,470
This is very much related to roadmapping,
5

6
00:00:27,510 --> 00:00:30,710
so I want to bring it up before we talk about roadmapping.
6

7
00:00:30,720 --> 00:00:36,090
First, let's talk about a real world situation, and this is going to
help you understand software estimation a little bit more.
7

8
00:00:36,150 --> 00:00:37,320
First, let's talk about a real world situation, and this is going to
help you understand software estimation a little bit more.
8

9
00:00:37,370 --> 00:00:45,570
Okay, imagine that you were taking your car to a mechanic,
and you say to the mechanic "I would like you
9

10
00:00:45,570 --> 00:00:47,520
to replace my engine. I just want you
to take it out, put another one in."
10

11
00:00:47,520 --> 00:00:48,890
to replace my engine. I just want you
to take it out, put another one in."
11

12
00:00:48,900 --> 00:00:50,000
to replace my engine. I just want you
to take it out, put another one in."
12

13
00:00:50,250 --> 00:00:56,850
Well, if your car is, let's say, a particular brand, and let's say
it's a BMW, because you're awesome, and BMW is
13

14
00:00:57,340 --> 00:01:01,520
the best car out there - I think - and the mechanic, he's a BMW mechanic, so odds are that it's a BMW car, BMW mechanic,
14

15
00:01:01,530 --> 00:01:03,770
the best car out there - I think - and the mechanic, he's a BMW mechanic, so odds are that it's a BMW car, BMW mechanic,
15

16
00:01:03,930 --> 00:01:08,530
the best car out there - I think - and the mechanic, he's a BMW mechanic, so odds are that it's a BMW car, BMW mechanic,
16

17
00:01:08,700 --> 00:01:12,870
he's probably done this a hundred or
a thousand times in his career,
17

18
00:01:12,870 --> 00:01:14,420
he's going to be able to say "All right,
18

19
00:01:14,440 --> 00:01:20,070
well, that will take me six hours, or maybe one day,
and I'll have it ready by tomorrow."
19

20
00:01:20,280 --> 00:01:25,470
This is, you know, this is something that's probably very true,
it's very easy for someone who's done something
20

21
00:01:25,470 --> 00:01:28,980
a thousand times to predict how long it's going to take.
21

22
00:01:28,980 --> 00:01:37,080
Now, imagine that everyone on the entire planet has
a different car, and that all the mechanics are not
22

23
00:01:37,080 --> 00:01:45,390
specialists in any one particular car brand, because
everyone's building the cars themselves out of stuff
23

24
00:01:45,390 --> 00:01:48,480
they found at home, it's like everyone has a custom car.
24

25
00:01:48,570 --> 00:01:54,930
Now, if you bring your car into a mechanic, do you think
they're going to be able to give you an accurate
25

26
00:01:55,020 --> 00:01:57,600
estimate on how long it's going to take?
26

27
00:01:57,600 --> 00:01:57,810
All right. Well, the answer there is no, because, okay,
27

28
00:01:57,810 --> 00:02:00,850
All right. Well, the answer there is no, because, okay,
28

29
00:02:00,900 --> 00:02:01,440
All right. Well, the answer there is no, because, okay,
29

30
00:02:01,500 --> 00:02:08,070
they've never seen your car before, let alone worked
on it, and it's going to take them a while to get
30

31
00:02:08,070 --> 00:02:14,100
in there and see how you built your car. Is your engine
like a steam engine, or a gas engine, or an electric
31

32
00:02:14,100 --> 00:02:14,860
engine, or like, what is it?
32

33
00:02:14,940 --> 00:02:16,380
engine, or like, what is it?
33

34
00:02:16,410 --> 00:02:21,780
And if they try to give you an estimation like "Okay, this
is going to take six hours," they're probably going to be wrong.
34

35
00:02:21,780 --> 00:02:22,800
And if they try to give you an estimation like "Okay, this
is going to take six hours," they're probably going to be wrong.
35

36
00:02:22,920 --> 00:02:28,890
The best they could do is give a really conservative
estimate and just say like, "This is maybe going to
36

37
00:02:28,890 --> 00:02:35,070
be like a week, and then I'll look into it, and if it looks
like it's going to be easier, then maybe it's
37

38
00:02:35,070 --> 00:02:38,250
going to be a little bit before then. I'll call you and let you know."
38

39
00:02:38,260 --> 00:02:42,720
So why is this analogy appropriate for software development?
39

40
00:02:42,720 --> 00:02:46,510
It's appropriate because this is the way software actually works.
40

41
00:02:46,530 --> 00:02:50,490
You have the engineers, who are pretty much
the mechanics in this situation,
41

42
00:02:50,550 --> 00:02:56,760
and then you have the things they work on, the systems
and databases, and code bases that they work on,
42

43
00:02:57,150 --> 00:03:03,240
which are almost always completely unique.
From company to company,
43

44
00:03:03,270 --> 00:03:09,390
the engineers are building things in different ways,
in different languages and styles, depending on the
44

45
00:03:09,390 --> 00:03:16,980
needs of the company. And to make it even worse,
that stuff, those code bases, is changing all the time.
45

46
00:03:16,990 --> 00:03:17,040
needs of the company. And to make it even worse,
that stuff, those code bases, is changing all the time.
46

47
00:03:17,070 --> 00:03:24,060
So one day I could be an engineer working on a code
base, and then I come in next week and try to work
47

48
00:03:24,060 --> 00:03:25,260
on the same code, and four engineers have edited it
in between that time, working on some other feature.
48

49
00:03:25,260 --> 00:03:27,250
on the same code, and four engineers have edited it
in between that time, working on some other feature.
49

50
00:03:27,260 --> 00:03:30,630
on the same code, and four engineers have edited it
in between that time, working on some other feature.
50

51
00:03:30,720 --> 00:03:32,780
So things change and I have to get used to it.
51

52
00:03:32,880 --> 00:03:36,550
This, in a nutshell, is why software estimation is very hard.
52

53
00:03:36,600 --> 00:03:41,560
A lot of people say "Oh, engineers are terrible
at estimating software, like deadlines."
53

54
00:03:41,730 --> 00:03:44,210
This is, it couldn't be further from the truth.
54

55
00:03:44,220 --> 00:03:50,520
They're actually quite good given the complexity
of software, but the fact is here that you really
55

56
00:03:50,520 --> 00:03:59,160
can't really say that "Okay, we know for sure that from
one estimation, from one engineer, that this thing 
56

57
00:03:59,160 --> 00:04:00,480
is going to be done on this date."
57

58
00:04:00,600 --> 00:04:01,850
So how do we get around that?
58

59
00:04:01,920 --> 00:04:09,510
The way we accurately or at least semi-accurately estimate
software is by figuring out what is called velocity.
59

60
00:04:09,840 --> 00:04:11,020
The way we accurately or at least semi-accurately estimate
software is by figuring out what is called velocity.
60

61
00:04:11,070 --> 00:04:14,690
So this goes directly into what we were talking about with sprints.
61

62
00:04:14,700 --> 00:04:19,980
Now, I'm not showing you this inside a project management software, because the way that velocities and
62

63
00:04:19,980 --> 00:04:25,740
all of this stuff works in different project management
software, it differs from software to software,
63

64
00:04:25,740 --> 00:04:28,610
so instead, I'm going explain the concept to you,
64

65
00:04:28,630 --> 00:04:32,150
so that you more clearly understand the theory behind this.
65

66
00:04:32,160 --> 00:04:37,100
So, let's say we have a sprint and we are doing
five things in this sprint,
66

67
00:04:37,110 --> 00:04:40,630
we're doing five user stories that are a part of an epic.
67

68
00:04:40,710 --> 00:04:46,830
What happens is, before we start a sprint, we do something
called a sprint planning meeting or a scoping
68

69
00:04:46,830 --> 00:04:53,340
meeting, and we ask the engineers "How long is
this going to take for this thing and this thing?"
69

70
00:04:53,400 --> 00:04:58,650
We ask a few of them, not just one, we ask a couple of engineers on the team, and they come to some conclusion,
70

71
00:04:58,650 --> 00:05:01,180
they say "It's going to take this amount of time."
71

72
00:05:01,260 --> 00:05:05,550
The trouble is, if we ask them how long
it's going to take, it's still a little bit inaccurate.
72

73
00:05:05,550 --> 00:05:10,290
So the trick is we say "How hard is it to do this?"
73

74
00:05:10,380 --> 00:05:17,340
And the way we measure or way we quantify how hard something is is through numbers, and these are called story points.
74

75
00:05:17,400 --> 00:05:18,490
And the way we measure or way we quantify how hard something is is through numbers, and these are called story points.
75

76
00:05:18,570 --> 00:05:26,310
So each story has some number assigned to it by an
engineer or a couple engineers, and they represent
76

77
00:05:26,370 --> 00:05:28,780
the story points, they represent the difficulty.
77

78
00:05:28,800 --> 00:05:33,170
Now, some teams and some companies use
different scales for story points.
78

79
00:05:33,240 --> 00:05:40,080
You could have a scale like 1, 2, 3, 4, 5, where
5 is the hardest and 1 is the easiest,
79

80
00:05:40,090 --> 00:05:40,420
You could have a scale like 1, 2, 3, 4, 5, where
5 is the hardest and 1 is the easiest,
80

81
00:05:40,440 --> 00:05:45,650
or you could have like a Fibonacci sequence,
where it's like, 1, 2, and 3, all the way up to like 21,
81

82
00:05:45,660 --> 00:05:46,810
or you could have like a Fibonacci sequence,
where it's like, 1, 2, and 3, all the way up to like 21,
82

83
00:05:46,830 --> 00:05:49,160
you can even have like 1 through 100.
83

84
00:05:49,170 --> 00:05:52,460
It doesn't matter which scale you use.
84

85
00:05:52,470 --> 00:05:58,440
What matters is that you're consistent with the scales,
you're always using the same scale and all the
85

86
00:05:58,440 --> 00:06:00,310
engineers understand that, okay, a 5 means
super, super hard, and a 1 means very easy.
86

87
00:06:00,310 --> 00:06:03,900
engineers understand that, okay, a 5 means
super, super hard, and a 1 means very easy.
87

88
00:06:03,900 --> 00:06:10,680
So what you do here is you estimate, you give
all of these things in your sprint an amount of
88

89
00:06:10,680 --> 00:06:16,740
story points, basically, and then your sprint has what
is called, like, the total story points for that sprint.
89

90
00:06:16,740 --> 00:06:17,260
story points, basically, and then your sprint has what
is called, like, the total story points for that sprint.
90

91
00:06:17,340 --> 00:06:17,700
Okay.
91

92
00:06:17,700 --> 00:06:22,290
So at the end of the sprint, we see how many
things we actually did get done.
92

93
00:06:22,320 --> 00:06:27,090
How many story points were the developers
able to actually complete?
93

94
00:06:27,090 --> 00:06:31,870
So if we had five items and we only got three done,
94

95
00:06:31,950 --> 00:06:38,820
but those things had a combined story point value of, let's say, 15, because there's only 3 things we did, but they were very hard,
95

96
00:06:38,820 --> 00:06:40,290
but those things had a combined story point value of, let's say, 15, because there's only 3 things we did, but they were very hard,
96

97
00:06:40,290 --> 00:06:42,290
so it's five points each,
97

98
00:06:42,380 --> 00:06:49,560
we're using the 1 to 5 scale, then what we have at the end
of the sprint is what's called a velocity, and that velocity
98

99
00:06:49,570 --> 00:06:49,600
we're using the 1 to 5 scale, then what we have at the end
of the sprint is what's called a velocity, and that velocity
99

100
00:06:49,620 --> 00:06:57,720
now is 15, it's the number of story points we were
able to accomplish in a one period of sprint, like a one
100

101
00:06:57,900 --> 00:07:00,210
two-week sprint period of time.
101

102
00:07:00,210 --> 00:07:03,260
All right, so now you're wondering like,
"Okay, well, how does that help me?"
102

103
00:07:03,300 --> 00:07:06,780
"Does that mean that I can do 15 points in the next sprint?"
103

104
00:07:07,050 --> 00:07:14,400
Well, kind of, but I'll tell you how we do it even more accurately.
What we do is this process over many, many sprints.
104

105
00:07:14,400 --> 00:07:15,690
Well, kind of, but I'll tell you how we do it even more accurately.
What we do is this process over many, many sprints.
105

106
00:07:15,720 --> 00:07:22,470
So, back to the analogy of the mechanic, that first mechanic,
he was able to make an accurate estimation because
106

107
00:07:22,800 --> 00:07:27,760
he had worked on, like, a hundred or a thousand
of these exact types of projects before.
107

108
00:07:28,020 --> 00:07:33,900
Well, if we take our sprint velocity from one sprint
and then we go through let's say five more sprints
108

109
00:07:33,930 --> 00:07:39,930
in the future, we take those velocities, we take all
these velocities and we average them out.
109

110
00:07:39,930 --> 00:07:48,810
Then you have like a, basically a roundabout way of
seeing on average how much work can you get done
110

111
00:07:49,380 --> 00:07:51,380
over a particular period of time.
111

112
00:07:51,390 --> 00:07:55,920
So you have an average sprint velocity of,
let's say, like 12 or 16,
112

113
00:07:55,940 --> 00:08:01,290
and then when you can do is say "All right, in the future,
we want to do this thing, and we talked to the
113

114
00:08:01,290 --> 00:08:05,400
engineers, and they think it's this many story points
in order to do these things."
114

115
00:08:05,400 --> 00:08:12,330
Well, we can extrapolate out and say that according
to our past average velocity, this is going to take
115

116
00:08:12,330 --> 00:08:19,290
us one month or two months, and in the end this
ends up being pretty accurate, not 100% accurate,
116

117
00:08:19,620 --> 00:08:23,910
but it's the most accurate you can get
for software development.
117

118
00:08:23,910 --> 00:08:29,050
One more thing to mention here is about that
scoping and that estimation from the engineers.
118

119
00:08:29,100 --> 00:08:32,610
Usually, this happens earlier before you start a project,
119

120
00:08:32,640 --> 00:08:40,140
and we like to do it before we start a sprint, in either a sprint planning session, or even in the middle of the previous sprint,
120

121
00:08:40,140 --> 00:08:42,020
and we like to do it before we start a sprint, in either a sprint planning session, or even in the middle of the previous sprint,
121

122
00:08:42,030 --> 00:08:44,790
we'll talk about what's coming up in the sprint after that,
122

123
00:08:44,970 --> 00:08:50,340
and we will have the engineers and the engineering manager
talk about "Okay, how many story points are each
123

124
00:08:50,340 --> 00:08:52,560
one of these tickets and user stories?"
124

125
00:08:52,620 --> 00:08:53,440
All right, so that's it. That is really engineering
software estimation, in a nutshell.
125

126
00:08:53,460 --> 00:08:57,930
All right, so that's it. That is really engineering
software estimation, in a nutshell.
126

127
00:08:57,930 --> 00:08:58,900
All right, so that's it. That is really engineering
software estimation, in a nutshell.
127

128
00:08:59,040 --> 00:09:00,850
And now you've learned about velocity,
128

129
00:09:01,020 --> 00:09:07,470
and this, again, is why Scrum is pretty useful,
because on Kanban, it's a little bit more difficult to
129

130
00:09:07,470 --> 00:09:12,750
predict this sort of stuff, because you don't time box
your work, like we've mentioned before.
130

131
00:09:12,750 --> 00:09:18,600
That's why Scrum basically has these time boxes,
so that we can say "Okay, over a period of time, we're
131

132
00:09:18,600 --> 00:09:22,910
able to get this amount of work done,"
and it contributes to accuracy in the long term.
132

133
00:09:23,040 --> 00:09:24,670
All right, we'll see you guys in the next lecture.
