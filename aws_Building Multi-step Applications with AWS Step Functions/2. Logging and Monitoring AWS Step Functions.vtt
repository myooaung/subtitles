WEBVTT
1
00:00:01.740 --> 00:00:03.490
[Autogenerated] once we have created our work flows

2
00:00:03.490 --> 00:00:05.450
and they are being utilized now,

3
00:00:05.450 --> 00:00:07.860
we need to think about monitoring them and watching

4
00:00:07.860 --> 00:00:10.380
for performance issues or errors,

5
00:00:10.380 --> 00:00:14.830
just like any other service step functions also send looks to cloudwatch,

6
00:00:14.830 --> 00:00:17.940
which generates a huge amount of metrics around them.

7
00:00:17.940 --> 00:00:21.720
We can look at execution metrics, which include execution times,

8
00:00:21.720 --> 00:00:24.520
failed execution time out and many more.

9
00:00:24.520 --> 00:00:28.470
We also have activity and Linda Metrics for our tasks as well.

10
00:00:28.470 --> 00:00:30.640
To be able to monitor our works was properly.

11
00:00:30.640 --> 00:00:33.510
First, we need to establish a performance baseline,

12
00:00:33.510 --> 00:00:36.040
so we have something to compare against.

13
00:00:36.040 --> 00:00:38.610
We can gather these after running the workflow at

14
00:00:38.610 --> 00:00:40.670
different times with different payload,

15
00:00:40.670 --> 00:00:44.640
which will give us a good understanding on the maximum and the minimum run

16
00:00:44.640 --> 00:00:48.710
time required for work for two Ron and possible timeouts.

17
00:00:48.710 --> 00:00:49.790
Using cloudwatch,

18
00:00:49.790 --> 00:00:52.520
we can catch all different state machine events and

19
00:00:52.520 --> 00:00:54.530
respond to them In the events action.

20
00:00:54.530 --> 00:00:58.740
We can create a new rule that we look for the state machine event patterns.

21
00:00:58.740 --> 00:01:01.400
We can easily find the step function service from the list of

22
00:01:01.400 --> 00:01:04.770
service is after which we get to choose an event.

23
00:01:04.770 --> 00:01:09.180
I we get the option to respond to specific stages a specific state machinery,

24
00:01:09.180 --> 00:01:11.100
islands or specific execution.

25
00:01:11.100 --> 00:01:14.340
Ares, after which we need to select a target.

26
00:01:14.340 --> 00:01:15.580
The target could be anything.

27
00:01:15.580 --> 00:01:16.890
It can be a lambda function,

28
00:01:16.890 --> 00:01:20.380
which we can execute in response to some state off our state machine.

29
00:01:20.380 --> 00:01:24.350
We can push a message toe on sq askew or even trigger another

30
00:01:24.350 --> 00:01:26.900
state machine in order to get some good metrics.

31
00:01:26.900 --> 00:01:30.980
Are state machine needs to be executed a couple of times to simulate work?

32
00:01:30.980 --> 00:01:34.440
We can schedule our workflow to run on a schedule using cloudwatch.

33
00:01:34.440 --> 00:01:38.260
We can do that by changing the even source to schedule on dhe,

34
00:01:38.260 --> 00:01:40.460
setting around rate for our case.

35
00:01:40.460 --> 00:01:41.590
That's headed one minute,

36
00:01:41.590 --> 00:01:45.320
which is a minimum amount that we can set on the target section.

37
00:01:45.320 --> 00:01:49.840
We need to find step functions.

38
00:01:49.840 --> 00:01:50.510
Next,

39
00:01:50.510 --> 00:01:53.440
we need to find our state machine that we want to execute

40
00:01:53.440 --> 00:01:56.310
for the input we're going to pass in a constant days and

41
00:01:56.310 --> 00:01:58.610
payload and for the permissions.

42
00:01:58.610 --> 00:02:01.050
Let's leave it to Amazon to create a new role for us,

43
00:02:01.050 --> 00:02:03.340
which will give you the appropriate permissions needed

44
00:02:03.340 --> 00:02:05.730
for these two round on the next step,

45
00:02:05.730 --> 00:02:10.950
we need to give you the name and create the rule I had already created trigger,

46
00:02:10.950 --> 00:02:15.120
which has been running for a now or so to give us some metrics to look at.

47
00:02:15.120 --> 00:02:16.270
To get some good metrics.

48
00:02:16.270 --> 00:02:18.780
Leave your trigger to run for about one hour,

49
00:02:18.780 --> 00:02:21.550
or you can trigger your workflow manually.

50
00:02:21.550 --> 00:02:26.310
But on automatic trigger will give us an evenly spread out beast of events.

51
00:02:26.310 --> 00:02:30.040
Now let's see the metrics for our workflow in the metric session.

52
00:02:30.040 --> 00:02:33.440
On the old metric stab, there should be a car for states.

53
00:02:33.440 --> 00:02:37.040
That is where we will find our step function work for metrics.

54
00:02:37.040 --> 00:02:39.350
Let's look at some execution medics for a work floor,

55
00:02:39.350 --> 00:02:43.140
which will be in the execution metrics card.

56
00:02:43.140 --> 00:02:46.970
First, let's say like the magic type that we want to display on the graph.

57
00:02:46.970 --> 00:02:50.400
We can do that by clicking on the magic name and using search for these

58
00:02:50.400 --> 00:02:53.770
only which will filter out any other metric type.

59
00:02:53.770 --> 00:02:56.460
Now we can see like all the items on the greed which

60
00:02:56.460 --> 00:02:58.840
will get displayed on the graph,

61
00:02:58.840 --> 00:03:01.930
we can easily see the exception time for a workflow for the last

62
00:03:01.930 --> 00:03:05.530
hour and see if there were any anomalies and if so,

63
00:03:05.530 --> 00:03:07.110
track them and see what happens.

64
00:03:07.110 --> 00:03:08.060
For example,

65
00:03:08.060 --> 00:03:11.860
we can see that one of the executions took about 11 seconds to complete,

66
00:03:11.860 --> 00:03:14.890
while the rest took about two or three seconds,

67
00:03:14.890 --> 00:03:17.540
most likely because this was the first being up.

68
00:03:17.540 --> 00:03:20.540
Also, the resource is needed by the AWS Lambda Functions,

69
00:03:20.540 --> 00:03:23.160
which was not required for the following executions,

70
00:03:23.160 --> 00:03:25.100
hands their lower execution time.

71
00:03:25.100 --> 00:03:26.840
Monitoring like this is good,

72
00:03:26.840 --> 00:03:30.370
but sitting and checking the screen constantly isn't very productive.

73
00:03:30.370 --> 00:03:34.140
We need a way to be able to know when something is not running is expect,

74
00:03:34.140 --> 00:03:36.380
and that's where alarms coming.

75
00:03:36.380 --> 00:03:39.500
We can use alarms to get notified when something falls below

76
00:03:39.500 --> 00:03:42.460
the desired performance level that we have said based on the

77
00:03:42.460 --> 00:03:44.240
baseline that we have defined.

78
00:03:44.240 --> 00:03:48.060
Let's navigate toe the line section on creating You want first.

79
00:03:48.060 --> 00:03:52.030
We need to specify a magic that we're interested in monitoring.

80
00:03:52.030 --> 00:03:52.500
Where are they?

81
00:03:52.500 --> 00:03:52.730
More.

82
00:03:52.730 --> 00:03:54.400
We're going to choose execution time.

83
00:03:54.400 --> 00:03:55.340
Mattrick.

84
00:03:55.340 --> 00:04:01.040
Let's select that one and move to the next step.

85
00:04:01.040 --> 00:04:01.750
Next.

86
00:04:01.750 --> 00:04:04.350
We need to specify the conditions for our alarm,

87
00:04:04.350 --> 00:04:07.290
for the threshold time we're going to to static on.

88
00:04:07.290 --> 00:04:11.030
We are going to reason alarm when the execution time is greater than

89
00:04:11.030 --> 00:04:14.260
three seconds which would be 2000 milliseconds.

90
00:04:14.260 --> 00:04:16.470
In this case, once we have the condition,

91
00:04:16.470 --> 00:04:18.890
said, Let's move to the next step here.

92
00:04:18.890 --> 00:04:21.040
We need to set up our notifications.

93
00:04:21.040 --> 00:04:24.540
We can decide in which state do we want to be notified?

94
00:04:24.540 --> 00:04:28.740
We have the choice between in alarm okay and insufficient data.

95
00:04:28.740 --> 00:04:30.500
Whenever the alarm is in this state,

96
00:04:30.500 --> 00:04:33.300
it will notify us to be able to get notifications.

97
00:04:33.300 --> 00:04:35.890
We need to use an SMS topi for our case.

98
00:04:35.890 --> 00:04:39.240
Let's create a new SMS topic and on the email and point,

99
00:04:39.240 --> 00:04:41.740
we need to provide the emails that we want to be notified

100
00:04:41.740 --> 00:04:44.490
on and go ahead and create the topic.

101
00:04:44.490 --> 00:04:46.570
What's the notification configuration you set up?

102
00:04:46.570 --> 00:04:48.200
Let's move to the next step.

103
00:04:48.200 --> 00:04:49.180
And finally,

104
00:04:49.180 --> 00:04:52.810
we need to give you the name that's naming execution alarm and move to the

105
00:04:52.810 --> 00:04:55.660
next step and finally on the preview and create step.

106
00:04:55.660 --> 00:04:58.640
Let's create our alarm.

107
00:04:58.640 --> 00:05:01.040
Once alarm is created in the state,

108
00:05:01.040 --> 00:05:03.880
we can see that it's currently at insufficient data state.

109
00:05:03.880 --> 00:05:06.410
After a couple of executions off our work floor,

110
00:05:06.410 --> 00:05:09.910
it should move to the in alarm state and after a minute,

111
00:05:09.910 --> 00:05:16.740
or saw the state transitions toe in alarm and we get an email alert

112
00:05:16.740 --> 00:05:20.540
that is all for using cloudwatch to monitor our workflow so we can

113
00:05:20.540 --> 00:05:23.110
improve their performance Over time,

114
00:05:23.110 --> 00:05:25.950
you could start by creating different alarms for different

115
00:05:25.950 --> 00:05:32.000
metrics to get comfortable with reading and comprehending the different magics types.

