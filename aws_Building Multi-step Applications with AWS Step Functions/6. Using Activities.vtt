WEBVTT
1
00:00:01.580 --> 00:00:03.560
[Autogenerated] There are cases where we can't ransom

2
00:00:03.560 --> 00:00:06.690
business logic in a lambda function or we don't want to do

3
00:00:06.690 --> 00:00:11.170
depending on different scenarios, it could be security reasons performance.

4
00:00:11.170 --> 00:00:14.630
The logic needs to run longer than Linda function support or

5
00:00:14.630 --> 00:00:16.930
any other reasons with step functions,

6
00:00:16.930 --> 00:00:21.040
adding a workflow step which has called that runs on your own infrastructure,

7
00:00:21.040 --> 00:00:24.330
it's possible we can achieve these using activities.

8
00:00:24.330 --> 00:00:27.670
Activities are a step function feature that enables us to

9
00:00:27.670 --> 00:00:31.270
have a worker as a task which can basically run anywhere we

10
00:00:31.270 --> 00:00:33.200
want toe for these ____ more.

11
00:00:33.200 --> 00:00:35.920
We are going to use the report generation work floor created

12
00:00:35.920 --> 00:00:39.370
earlier and replace encryption step with an activity which will

13
00:00:39.370 --> 00:00:41.840
run on our own local environment.

14
00:00:41.840 --> 00:00:42.610
Basically,

15
00:00:42.610 --> 00:00:45.990
we are going to run the encryption step on our own local machine instead,

16
00:00:45.990 --> 00:00:49.840
off a land a function, the rest of the logic will be the same.

17
00:00:49.840 --> 00:00:52.160
Let's start by creating a new activity.

18
00:00:52.160 --> 00:00:52.920
To do so,

19
00:00:52.920 --> 00:00:56.810
we need to navigate to the activity section and create a new one from there.

20
00:00:56.810 --> 00:01:01.510
An activity on Lee needs a name and let's name it encryption activity.

21
00:01:01.510 --> 00:01:04.090
Since we're going to use this for the encryption step,

22
00:01:04.090 --> 00:01:09.340
that's sweet activity and Kobe, it's Aaron.

23
00:01:09.340 --> 00:01:10.810
Once activity is created,

24
00:01:10.810 --> 00:01:13.600
we need to copy its air and because we're going to need

25
00:01:13.600 --> 00:01:15.620
this on the steppe definition now,

26
00:01:15.620 --> 00:01:19.320
let's not get back to our workflow and change the encryption step to use

27
00:01:19.320 --> 00:01:22.960
the activity the local worker in this demo will use.

28
00:01:22.960 --> 00:01:27.230
Know Js but you can use any programming language off your choice.

29
00:01:27.230 --> 00:01:31.440
The AWS sdk makes it very easy for us to create a worker activity.

30
00:01:31.440 --> 00:01:34.180
Activities are made up of four main parts.

31
00:01:34.180 --> 00:01:34.830
First,

32
00:01:34.830 --> 00:01:38.020
we need to load activity tasks continuously and

33
00:01:38.020 --> 00:01:40.220
perform work as soon as we get a task.

34
00:01:40.220 --> 00:01:45.440
Next, we need to notify if the job was successful or if the job was a failure.

35
00:01:45.440 --> 00:01:48.910
And finally, if our task takes a long time to complete,

36
00:01:48.910 --> 00:01:50.850
we need to continuously send a heartbeat.

37
00:01:50.850 --> 00:01:53.740
So our work so does no time out.

38
00:01:53.740 --> 00:01:56.640
Let's inspect our worker called line by line.

39
00:01:56.640 --> 00:01:57.120
First,

40
00:01:57.120 --> 00:02:00.360
we need to define an instance off step functions when you to

41
00:02:00.360 --> 00:02:03.680
specify a region and credentials as its para meters.

42
00:02:03.680 --> 00:02:07.740
We are also going to need the activity Aaron that we created earlier.

43
00:02:07.740 --> 00:02:11.140
This is what we used to get asks for an activity.

44
00:02:11.140 --> 00:02:14.100
Now let's look at the get activity task function,

45
00:02:14.100 --> 00:02:18.240
which falls for available jobs to run.

46
00:02:18.240 --> 00:02:21.960
We can get the next available jobs around using the get activity test.

47
00:02:21.960 --> 00:02:26.560
On the step functions FBI, which takes in an activity Aaron as a perimeter.

48
00:02:26.560 --> 00:02:30.010
The output of the faction will be a task talk in which we need to

49
00:02:30.010 --> 00:02:32.710
use later to change the status of the job on dhe.

50
00:02:32.710 --> 00:02:37.300
The input of the step, the input off the step was a property called file,

51
00:02:37.300 --> 00:02:41.880
which is the UN included report file Once we know which file we wantto in cream,

52
00:02:41.880 --> 00:02:44.240
we loved that file from ESRI.

53
00:02:44.240 --> 00:02:46.820
We do that using the get report file function.

54
00:02:46.820 --> 00:02:50.940
We won't focus on the logic of the functions that are not activity related.

55
00:02:50.940 --> 00:02:53.470
You will find the source code in exercise fires.

56
00:02:53.470 --> 00:02:55.920
Once we have the report pile, we encrypt it.

57
00:02:55.920 --> 00:02:58.220
Next we send the heartbeat using the scent.

58
00:02:58.220 --> 00:02:59.380
Ask heartbeat.

59
00:02:59.380 --> 00:03:03.350
This is so our workflow does not terminate if the encryption takes a long time.

60
00:03:03.350 --> 00:03:06.370
Koran or we have a slow Internet connection.

61
00:03:06.370 --> 00:03:10.240
Next, we need to upload the encrypted file back to a street.

62
00:03:10.240 --> 00:03:13.160
If that process is successful, we notify our activity,

63
00:03:13.160 --> 00:03:17.630
using the scent task, success matter and passing the task toker that we got.

64
00:03:17.630 --> 00:03:22.110
When we treat the task and a notebook, the output is a string property,

65
00:03:22.110 --> 00:03:24.440
so we need to stand if I eat first.

66
00:03:24.440 --> 00:03:26.740
In our case, the output is encrypted.

67
00:03:26.740 --> 00:03:30.340
Report you are L, which will live inside the payload property,

68
00:03:30.340 --> 00:03:34.170
and if anything goes wrong, we call the San task failure matter.

69
00:03:34.170 --> 00:03:35.690
We're stealing to pass in the desk,

70
00:03:35.690 --> 00:03:38.640
talking as that is the identified for the test,

71
00:03:38.640 --> 00:03:41.380
and we can pass an optional cause for the error,

72
00:03:41.380 --> 00:03:42.690
which will help the workload.

73
00:03:42.690 --> 00:03:45.140
Designers better understand the failures.

74
00:03:45.140 --> 00:03:46.830
Thes functionality is on a loop,

75
00:03:46.830 --> 00:03:49.710
so it continues to look for available work to perform,

76
00:03:49.710 --> 00:03:51.110
and one work is available.

77
00:03:51.110 --> 00:03:52.240
It picks it up.

78
00:03:52.240 --> 00:03:55.840
That's had to with the workflow and starting your execution.

79
00:03:55.840 --> 00:04:00.160
Execution will hold on the encryption step until we run a local worker.

80
00:04:00.160 --> 00:04:02.780
Now let's head back to our local worker and started.

81
00:04:02.780 --> 00:04:05.170
If you are using the exercise files for the project,

82
00:04:05.170 --> 00:04:11.340
you can start the worker using the test Js file by running it using node,

83
00:04:11.340 --> 00:04:13.230
you can do so doing no.

84
00:04:13.230 --> 00:04:19.400
That's got GS, and as soon as we ran in,

85
00:04:19.400 --> 00:04:21.620
our workers start to look for a new job,

86
00:04:21.620 --> 00:04:24.640
and as soon as it found one, it executed it.

87
00:04:24.640 --> 00:04:27.960
This was an input file on the desk talking.

88
00:04:27.960 --> 00:04:30.570
The input file is the report file, which is unencrypted.

89
00:04:30.570 --> 00:04:31.560
Report file.

90
00:04:31.560 --> 00:04:33.500
Now we can head back to our work floor,

91
00:04:33.500 --> 00:04:38.210
which should have been completed back on the local worker.

92
00:04:38.210 --> 00:04:42.640
It will continue to pull for available jobs as we can see it in the council.

93
00:04:42.640 --> 00:04:46.440
And as soon as it finds another job, it will execute it.

94
00:04:46.440 --> 00:04:48.630
That's all for using activities with step function.

95
00:04:48.630 --> 00:04:49.540
Works lost.

96
00:04:49.540 --> 00:04:53.080
They offer us a great flexibility when our business logic can be on a server,

97
00:04:53.080 --> 00:04:55.780
less function or in the cloud altogether.

98
00:04:55.780 --> 00:04:59.130
It's important to keep in mind that if you are using express work flows,

99
00:04:59.130 --> 00:05:00.720
activities are not supported.

100
00:05:00.720 --> 00:05:02.690
Since express work flows are mental,

101
00:05:02.690 --> 00:05:06.590
run at very high rates on DDE can leave only upto five minutes.

102
00:05:06.590 --> 00:05:10.450
Using this knowledge, try changing other workflow steps to activities.

103
00:05:10.450 --> 00:05:11.090
For example,

104
00:05:11.090 --> 00:05:18.000
the report generation step so you can better understand the disconnected nature off activities

