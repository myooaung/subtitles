WEBVTT
1
00:00:00.940 --> 00:00:05.030
JUnit 4 is over 10 years old, and during this time,

2
00:00:05.030 --> 00:00:08.520
a lot of teams have used it as the foundation of

3
00:00:08.520 --> 00:00:10.400
their unit testing infrastructure.

4
00:00:10.400 --> 00:00:16.720
So I think it's safe to say that there are a lot of extensions for JUnit 4.

5
00:00:16.720 --> 00:00:21.570
These extensions come in the form of runners and rules.

6
00:00:21.570 --> 00:00:23.940
Runners are very powerful.

7
00:00:23.940 --> 00:00:28.540
Almost every aspect of test execution can be changed.

8
00:00:28.540 --> 00:00:34.190
To use a runner, you have to annotate a test class with RunWith.

9
00:00:34.190 --> 00:00:37.720
The problem is that you cannot combine runners.

10
00:00:37.720 --> 00:00:41.940
You can only have one runner per test class.

11
00:00:41.940 --> 00:00:46.890
On the other hand, rules were introduced in JUnit 4.7,

12
00:00:46.890 --> 00:00:52.540
and they wrap the execution of a test method just like an aspect‑oriented

13
00:00:52.540 --> 00:00:57.070
framework could do before and after the test execution.

14
00:00:57.070 --> 00:01:02.740
You just need to add a public, non‑static field to the test class,

15
00:01:02.740 --> 00:01:07.940
ensure that the type of the field is a subtype of test rule,

16
00:01:07.940 --> 00:01:11.170
and annotate it with the Rule annotation.

17
00:01:11.170 --> 00:01:14.880
There are also class‑level rules that affect the

18
00:01:14.880 --> 00:01:17.840
operation of the whole test class.

19
00:01:17.840 --> 00:01:19.240
But in JUnit 5,

20
00:01:19.240 --> 00:01:22.960
the extension mechanism changed to support several

21
00:01:22.960 --> 00:01:26.740
extension points represented by interfaces.

22
00:01:26.740 --> 00:01:33.040
This way, most runners are now implemented as extensions of this type.

23
00:01:33.040 --> 00:01:37.840
In the case of rules, JUnit 5 doesn't support them natively.

24
00:01:37.840 --> 00:01:41.130
I mean, you cannot create rules in JUnit 5.

25
00:01:41.130 --> 00:01:46.310
But since there are a lot of organizations still using JUnit 4 rules,

26
00:01:46.310 --> 00:01:50.910
the JUnit team decided to support some selected types of

27
00:01:50.910 --> 00:01:55.520
rules by creating extensions to make them compatible with

28
00:01:55.520 --> 00:01:58.140
the Jupiter extension model.

29
00:01:58.140 --> 00:02:04.470
The rule types that JUnit 5 supports are ExternalResource, including

30
00:02:04.470 --> 00:02:09.640
TemporaryFolder, Verifier, including ErrorCollector,

31
00:02:09.640 --> 00:02:11.940
and ExpectedException.

32
00:02:11.940 --> 00:02:16.030
The extensions that provide support for these rules are grouped in

33
00:02:16.030 --> 00:02:21.030
the annotation EnableRuleMigrationSupport. Here you can see its

34
00:02:21.030 --> 00:02:25.850
definition. You have to annotate the class that uses the JUnit 4

35
00:02:25.850 --> 00:02:28.740
rule with this annotation.

36
00:02:28.740 --> 00:02:32.920
Alternatively, you can annotate the test class with

37
00:02:32.920 --> 00:02:36.340
EnableJUnit4MigrationSupport,

38
00:02:36.340 --> 00:02:40.710
which registers migration support for rules using the

39
00:02:40.710 --> 00:02:45.280
EnableRuleMigrationSupport annotation while also adding an

40
00:02:45.280 --> 00:02:50.440
extension to support JUnit 4 Ignore annotation.

41
00:02:50.440 --> 00:02:55.140
These annotations are located in a JAR with the group ID

42
00:02:55.140 --> 00:03:06.240
org.junit.jupiter and the artifact ID junit‑jupiter‑migrationsupport.

43
00:03:06.240 --> 00:03:12.110
So let's review how rule support in JUnit 5 works with a rule of type

44
00:03:12.110 --> 00:03:18.740
ErrorCollector. I've created a project with configuration files for both

45
00:03:18.740 --> 00:03:22.650
Maven and Gradle. Let's open, for example,

46
00:03:22.650 --> 00:03:30.550
the build.gradle file. The project has a dependency to run Jupiter tests, and

47
00:03:30.550 --> 00:03:35.140
JUnit 4, because they are a collector class, is in this JAR.

48
00:03:35.140 --> 00:03:38.840
Notice that I'm not including JUnit Vintage because

49
00:03:38.840 --> 00:03:42.140
I'm not going to run a JUnit 4 test.

50
00:03:42.140 --> 00:03:47.340
Remember, we are testing the support of rules on JUnit 5.

51
00:03:47.340 --> 00:03:52.510
This is possible due to the adapted extensions that live in this JAR,

52
00:03:52.510 --> 00:04:01.600
junit‑jupiter‑migrationsupport. The pom.xml file contains the same

53
00:04:01.600 --> 00:04:07.290
dependencies. But in the test directory in the

54
00:04:07.290 --> 00:04:15.540
com.wiredbraincoffee.reward package, let's create the class

55
00:04:15.540 --> 00:04:22.980
RewardByDiscountServiceTest. I'm going to add the import statements

56
00:04:22.980 --> 00:04:28.840
I'll be using, a setUp method to create an instance of the

57
00:04:28.840 --> 00:04:34.740
RewardByDiscountService and an order with some products.

58
00:04:34.740 --> 00:04:38.750
And I'm going to test if the discount is applied when

59
00:04:38.750 --> 00:04:41.940
the customer has enough points.

60
00:04:41.940 --> 00:04:46.340
But instead of using the assertion methods of JUnit Jupiter,

61
00:04:46.340 --> 00:04:51.640
I'm going to define another collector and use the method

62
00:04:51.640 --> 00:04:56.370
checkThat to test that a discount is applied and the points

63
00:04:56.370 --> 00:05:04.240
redeemed. If I execute this class, the test passed.

64
00:05:04.240 --> 00:05:08.480
But what this ErrorCollector does is continuing the execution

65
00:05:08.480 --> 00:05:12.740
of a test after an assertion error is found.

66
00:05:12.740 --> 00:05:18.000
So let's add a print statement at the end of the method to see if it's

67
00:05:18.000 --> 00:05:23.040
executed when I modify the first condition to make it fail.

68
00:05:23.040 --> 00:05:26.650
Let's see. It passed.

69
00:05:26.650 --> 00:05:31.340
So the rule is not working. To make it work, I just have to

70
00:05:31.340 --> 00:05:37.090
annotate the class with either EnableRuleMigrationSupport or

71
00:05:37.090 --> 00:05:40.640
EnableJUnit4MigrationSupport.

72
00:05:40.640 --> 00:05:46.440
Let's use the latter and run the test one more time.

73
00:05:46.440 --> 00:05:47.740
There you have it.

74
00:05:47.740 --> 00:05:53.440
The print statement was executed even when there's an assertion error.

75
00:05:53.440 --> 00:05:58.740
Now if I modify the points redeemed to cause an error,

76
00:05:58.740 --> 00:06:04.250
let's see. The print statement is still executed, and

77
00:06:04.250 --> 00:06:16.000
there are two assertion errors. And if I fix these expressions, the test passed as expected.

