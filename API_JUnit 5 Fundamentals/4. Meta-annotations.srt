1
00:00:00,940 --> 00:00:04,540
We have used most of the annotations that come with

2
00:00:04,540 --> 00:00:08,140
JUnit to configure our test classes.

3
00:00:08,140 --> 00:00:12,740
However, JUnit also allows you to create meta‑annotations.

4
00:00:12,740 --> 00:00:13,730
In other words,

5
00:00:13,730 --> 00:00:18,910
you can define your own annotations by using one or more JUnit annotations,

6
00:00:18,910 --> 00:00:22,540
and they will inherit their semantics.

7
00:00:22,540 --> 00:00:25,750
For example, let's say we have a test method,

8
00:00:25,750 --> 00:00:31,410
and we want to use an extension to handle the exceptions this method may throw.

9
00:00:31,410 --> 00:00:36,040
So instead of adding an ExtendWith annotation to this method,

10
00:00:36,040 --> 00:00:38,310
we can create a custom annotation.

11
00:00:38,310 --> 00:00:42,340
Let's say TestWithErrorHandler.

12
00:00:42,340 --> 00:00:47,020
We can meta‑annotate this annotation with Test and ExtendWith,

13
00:00:47,020 --> 00:00:52,740
and this will be the same as if we used them in the test method directly.

14
00:00:52,740 --> 00:00:56,110
The advantage is that if we choose the name correctly,

15
00:00:56,110 --> 00:01:00,740
it can greatly improve the readability of our tests.

16
00:01:00,740 --> 00:01:07,940
All right, for this demo, let's create this TestWithErrorHandler meta‑annotation.

17
00:01:07,940 --> 00:01:12,290
If I set the amount of reward to a negative value,

18
00:01:12,290 --> 00:01:15,440
an IllegalArgumentException will be thrown.

19
00:01:15,440 --> 00:01:18,680
Let's assume that for some reason for this test,

20
00:01:18,680 --> 00:01:23,450
I don't want to assert that this exception is thrown or handled inside

21
00:01:23,450 --> 00:01:27,740
the test method or any other method for that matter.

22
00:01:27,740 --> 00:01:31,230
So what I'm going to do is create an extension to

23
00:01:31,230 --> 00:01:34,340
handle these IllegalArgumentExceptions.

24
00:01:34,340 --> 00:01:39,530
Let's name it IllegalArgumentExceptionHandlerExtension,

25
00:01:39,530 --> 00:01:42,640
you know, a big and descriptive name.

26
00:01:42,640 --> 00:01:45,820
This class is going to implement the interface

27
00:01:45,820 --> 00:01:53,900
TestExecutionExceptionHandler that has the method handleTestExecutionException,

28
00:01:53,900 --> 00:01:58,140
which takes a parameter of type ExtensionContext.

29
00:01:58,140 --> 00:02:02,640
And the exception thrown by the test method as a Throwable.

30
00:02:02,640 --> 00:02:03,330
Also,

31
00:02:03,330 --> 00:02:07,040
the method declares that it throws a Throwable just in

32
00:02:07,040 --> 00:02:09,840
case you want to rethrow the exception.

33
00:02:09,840 --> 00:02:14,480
So let's see if the exception is an instance of IllegalArgumentException,

34
00:02:14,480 --> 00:02:17,710
I'm going to print a message.

35
00:02:17,710 --> 00:02:23,350
Using the ExtensionContext parameter, I'm going to get the class and

36
00:02:23,350 --> 00:02:28,040
method name of the test that threw the exception.

37
00:02:28,040 --> 00:02:34,700
I'm using the method getRequiredTestClass and getRequiredTestMethod because, in

38
00:02:34,700 --> 00:02:38,950
this case, I know there has to be a method and its class.

39
00:02:38,950 --> 00:02:41,550
But if you want to write more robust code,

40
00:02:41,550 --> 00:02:47,290
you can use getTestMethod and getTestClass that returns an

41
00:02:47,290 --> 00:02:53,010
Optional that wraps the method and class objects. Next, I'm

42
00:02:53,010 --> 00:02:55,240
going to return from the method.

43
00:02:55,240 --> 00:02:59,220
This will swallow the exception and execute the next method

44
00:02:59,220 --> 00:03:02,540
of the class as if nothing had happened.

45
00:03:02,540 --> 00:03:05,840
If the exception is not an IllegalArgumentException,

46
00:03:05,840 --> 00:03:12,340
I'll just rethrow it. Now I'm going to create the annotation,

47
00:03:12,340 --> 00:03:22,090
TestWithErrorHandler. I'll add the import statements I'm going to need, and

48
00:03:22,090 --> 00:03:26,540
this annotation is going to apply to classes and methods.

49
00:03:26,540 --> 00:03:30,760
It will have a runtime RetentionPolicy, and I'm going

50
00:03:30,760 --> 00:03:33,940
to add an ExtendWith annotation.

51
00:03:33,940 --> 00:03:37,630
Instead of having to use two ExtendWith annotations,

52
00:03:37,630 --> 00:03:41,720
you can pass an array with all the extensions you want to use, in

53
00:03:41,720 --> 00:03:47,200
this case our exception handler and parameter resolver extensions.

54
00:03:47,200 --> 00:03:53,390
Back to our Test class, I'm going to delete this field and the

55
00:03:53,390 --> 00:03:57,740
RegisterExtension annotation, and I'm going to use the

56
00:03:57,740 --> 00:04:02,440
TestWithErrorHandler annotation.

57
00:04:02,440 --> 00:04:09,960
If I run the class, all the tests passed, and there's a message, Exception of

58
00:04:09,960 --> 00:04:12,790
type IllegalArgumentException thrown by

59
00:04:12,790 --> 00:04:20,540
RewardByConversionWithExtensionTest#changeAmount, which was printed by the extension.

60
00:04:20,540 --> 00:04:28,550
Now I can move the TestWithErrorHandler annotation to the method and add the

61
00:04:28,550 --> 00:04:41,000
Test annotation as a meta‑annotation to TestWithErrorHandler. And if I run the test class again, everything will work as before.

