1
00:00:00,940 --> 00:00:06,040
JUnit 5 was redesigned to solve the problems of the previous versions,

2
00:00:06,040 --> 00:00:09,940
like tight coupling to IDEs and build tools.

3
00:00:09,940 --> 00:00:13,840
Its new architecture is based on a couple of core principles,

4
00:00:13,840 --> 00:00:18,740
and one of them is to prefer extension points over features.

5
00:00:18,740 --> 00:00:19,560
This way,

6
00:00:19,560 --> 00:00:25,030
we could use extensions optionally packaged in additional libraries to keep the

7
00:00:25,030 --> 00:00:29,540
JUnit core as simple as possible and backward‑compatible.

8
00:00:29,540 --> 00:00:35,840
The extension API for JUnit Jupiter is based on the interface extension.

9
00:00:35,840 --> 00:00:40,440
JUnit provides many extension points during the lifecycle of a test,

10
00:00:40,440 --> 00:00:44,870
and each extension point corresponds to an interface that

11
00:00:44,870 --> 00:00:48,140
extends from the interface extension.

12
00:00:48,140 --> 00:00:52,020
If a class wants to extend the behavior of a test,

13
00:00:52,020 --> 00:00:55,940
it has to implement one of these interfaces.

14
00:00:55,940 --> 00:00:59,140
When the Jupiter engine processes a test,

15
00:00:59,140 --> 00:01:04,500
it steps through this extension points and calls each registered extension.

16
00:01:04,500 --> 00:01:10,030
We can classify all the extension interfaces into three categories.

17
00:01:10,030 --> 00:01:13,060
First, we have general‑purpose interfaces,

18
00:01:13,060 --> 00:01:18,740
such as TestInstanceFactory to create test instances.

19
00:01:18,740 --> 00:01:24,510
TestInstancePostProcessor to post process test instances so you can inject

20
00:01:24,510 --> 00:01:28,340
dependencies or invoke custom initialization methods,

21
00:01:28,340 --> 00:01:29,940
for example.

22
00:01:29,940 --> 00:01:35,520
TestInstancePreDestroyCallback to process test instances after they

23
00:01:35,520 --> 00:01:39,740
have been used in tests and before they are destroyed.

24
00:01:39,740 --> 00:01:45,140
TestWatcher to process the results of test method executions

25
00:01:45,140 --> 00:01:48,740
after a disabled test method has been skipped,

26
00:01:48,740 --> 00:01:51,790
a test method has completed successfully,

27
00:01:51,790 --> 00:01:54,440
aborted, or failed.

28
00:01:54,440 --> 00:01:58,840
InvocationInterceptor to intercept calls to tests.

29
00:01:58,840 --> 00:02:03,360
TestTemplateInvocationContextProvider for implementing

30
00:02:03,360 --> 00:02:07,970
different types of tests that rely on repetitive invocation

31
00:02:07,970 --> 00:02:13,970
of test methods in different contexts, for example with different parameters.

32
00:02:13,970 --> 00:02:18,260
ParameterResolver to dynamically resolve and inject

33
00:02:18,260 --> 00:02:21,840
parameters to test methods at runtime.

34
00:02:21,840 --> 00:02:25,550
And TestExecutionExceptionHandler to handle

35
00:02:25,550 --> 00:02:29,240
exceptions thrown during test execution.

36
00:02:29,240 --> 00:02:33,960
Then we have the interface ExecutionCondition to evaluate if a

37
00:02:33,960 --> 00:02:37,680
given class or test method should be executed.

38
00:02:37,680 --> 00:02:42,870
This is a more powerful alternative to the Disabled annotation. Next,

39
00:02:42,870 --> 00:02:47,770
in addition to lifecycle methods annotated with BeforeAll and AfterAll,

40
00:02:47,770 --> 00:02:51,180
for example, we can have lifecycle callbacks,

41
00:02:51,180 --> 00:02:54,870
like BeforeAllCallback and AfterAllCallback,

42
00:02:54,870 --> 00:02:59,310
BeforeEachCallback and AfterEachCallback, and

43
00:02:59,310 --> 00:03:04,940
BeforeTestExecutionCallback and AfterTestExecutionCallback.

44
00:03:04,940 --> 00:03:07,010
Once you have an Extension class,

45
00:03:07,010 --> 00:03:11,750
you can register declaratively with the annotation ExtendWith,

46
00:03:11,750 --> 00:03:16,810
annotating the class or the method where you want to use the extension or

47
00:03:16,810 --> 00:03:22,820
programmatically by annotating class fields with RegisterExtension or

48
00:03:22,820 --> 00:03:26,690
automatically with Java's ServiceLoader mechanism.

49
00:03:26,690 --> 00:03:32,460
Using this method in the META‑INF services folder of the extensions

50
00:03:32,460 --> 00:03:36,150
JAR file in a text file name

51
00:03:36,150 --> 00:03:44,980
org.junit.jupiter.api.extension.Extension, you put the fully

52
00:03:44,980 --> 00:03:50,180
qualified name of the Extension class so it can be discovered automatically.

53
00:03:50,180 --> 00:03:55,860
And you can enable or disable the autodetection of extensions by

54
00:03:55,860 --> 00:03:57,740
setting the system property

55
00:03:57,740 --> 00:04:07,040
junit.jupiter.extensions.autodetection.enabled to either true or false.

56
00:04:07,040 --> 00:04:07,630
All right,

57
00:04:07,630 --> 00:04:11,250
let's see how to implement a simple extension using

58
00:04:11,250 --> 00:04:14,840
the lifecycle callback interfaces.

59
00:04:14,840 --> 00:04:21,590
I have already created a test class with methods annotated with BeforeAll,

60
00:04:21,590 --> 00:04:28,240
BeforeEach, AfterEach, AfterAll, and two test methods.

61
00:04:28,240 --> 00:04:34,440
Now I'm going to create a new class, LifecycleExtension.

62
00:04:34,440 --> 00:04:39,280
This class is going to implement the interface's BeforeAllCallback,

63
00:04:39,280 --> 00:04:45,950
AfterAllCallback, BeforeEachCallback, AfterEachCallback,

64
00:04:45,950 --> 00:04:53,940
BeforeTestExecutioCallback, and AfterTestExecutionCallback.

65
00:04:53,940 --> 00:04:59,140
Now I'm going to implement the methods of all these interfaces.

66
00:04:59,140 --> 00:05:03,310
They'll just print the name of the interface they represent,

67
00:05:03,310 --> 00:05:08,070
BeforeAllCallback, AfterAllCallback, BeforeEachCallback,

68
00:05:08,070 --> 00:05:11,340
and so on.

69
00:05:11,340 --> 00:05:18,040
Now back to the Test class, I'm going to use the ExtendWith annotation,

70
00:05:18,040 --> 00:05:21,100
passing the Extension class I want to use,

71
00:05:21,100 --> 00:05:24,640
in this case LifecycleExtension.

72
00:05:24,640 --> 00:05:29,710
Let's run this class to see the order in which the messages are printed.

73
00:05:29,710 --> 00:05:33,240
Here we can see that beforeAllCallback from the

74
00:05:33,240 --> 00:05:36,640
Extension class was executed first.

75
00:05:36,640 --> 00:05:40,300
Next, the method annotated with BeforeAll,

76
00:05:40,300 --> 00:05:44,640
beforeEachCallback from the Extension class,

77
00:05:44,640 --> 00:05:48,140
the method annotated with BeforeEach,

78
00:05:48,140 --> 00:05:52,840
beforeTestExecutionCallback from the Extension class,

79
00:05:52,840 --> 00:05:59,340
the Test method, afterTestExecutionCallback from the Extension class,

80
00:05:59,340 --> 00:06:04,440
AfterEach, and afterEachCallback from the Extension class.

81
00:06:04,440 --> 00:06:05,350
After that,

82
00:06:05,350 --> 00:06:09,780
the cycle starts again for the other test method with

83
00:06:09,780 --> 00:06:12,440
beforeEachCallback and BeforeEach.

84
00:06:12,440 --> 00:06:13,930
And at the end,

85
00:06:13,930 --> 00:06:18,860
we can see the message printed from the method annotated with AfterAll.

86
00:06:18,860 --> 00:06:24,440
And finally, the afterAllCallback from the Extension class.

87
00:06:24,440 --> 00:06:29,010
So the extension points were executed before the annotations in the case

88
00:06:29,010 --> 00:06:34,390
of beforeAllCallback and beforeEachCallback and after the annotations in

89
00:06:34,390 --> 00:06:38,720
the case of afterEachCallback and afterAllCallback and

90
00:06:38,720 --> 00:06:44,860
beforeTestExecutionCallback and afterTestExecutionCallback were executed

91
00:06:44,860 --> 00:06:48,640
right before and right after the tests.

92
00:06:48,640 --> 00:06:51,830
Now, what do you think will happen if instead of

93
00:06:51,830 --> 00:06:54,340
applying the extension to the whole class,

94
00:06:54,340 --> 00:07:00,630
we only apply it to one test method? Let's move this ExtendWith

95
00:07:00,630 --> 00:07:07,840
annotation to the method changeAmount and run the class.

96
00:07:07,840 --> 00:07:10,900
You can see that there's a BeforeAll and AfterAll,

97
00:07:10,900 --> 00:07:15,390
but not BeforeAllCallback and AfterAllCallback because these

98
00:07:15,390 --> 00:07:19,240
extension points work at the class level.

99
00:07:19,240 --> 00:07:23,130
Look at the messages printed when the Test changeAmount they

100
00:07:23,130 --> 00:07:27,640
want annotated with ExtendWith was executed.

101
00:07:27,640 --> 00:07:30,570
Now look at the messages printed when the Test

102
00:07:30,570 --> 00:07:35,730
rewardNotappliedEmptyOrder was executed. For this method,

103
00:07:35,730 --> 00:07:39,140
the extension messages were not printed.

104
00:07:39,140 --> 00:07:43,520
Extensions are aware if they are applied to a class or a method.

105
00:07:43,520 --> 00:07:48,250
That's why all the methods from the extension interfaces receive an

106
00:07:48,250 --> 00:07:54,340
ExtensionContext parameter that provides information about the context in

107
00:07:54,340 --> 00:07:58,640
which the current test or class is being executed.

108
00:07:58,640 --> 00:08:02,860
We'll review this context in the next clips. But for now,

109
00:08:02,860 --> 00:08:11,000
keep in mind that an extension can behave differently depending on the context in which it is applied.

