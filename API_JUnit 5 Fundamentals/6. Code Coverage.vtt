WEBVTT
1
00:00:00.940 --> 00:00:02.290
In my experience,

2
00:00:02.290 --> 00:00:05.460
code coverage is one of the most controversial

3
00:00:05.460 --> 00:00:08.540
metrics in the world of unit tests.

4
00:00:08.540 --> 00:00:12.730
It is defined as the measure used to describe the degree to which

5
00:00:12.730 --> 00:00:17.240
the code of your program is covered by your tests.

6
00:00:17.240 --> 00:00:23.040
In other words, how many lines of your code are executed by your tests?

7
00:00:23.040 --> 00:00:27.560
This metric is collected by a tool that traces the calls made by

8
00:00:27.560 --> 00:00:31.570
the tests to the classes of the application and reports the

9
00:00:31.570 --> 00:00:34.730
percentage of the code that is executed.

10
00:00:34.730 --> 00:00:39.040
For this demo, I'll show you how to use JaCoco,

11
00:00:39.040 --> 00:00:42.640
a popular code coverage library for Java,

12
00:00:42.640 --> 00:00:47.540
first with Maven and then with Gradle.

13
00:00:47.540 --> 00:00:51.010
I have opened the project name CodeCoverage,

14
00:00:51.010 --> 00:00:56.040
which contains configuration files for Gradle and Maven,

15
00:00:56.040 --> 00:01:01.160
so you can import the project in your IDE using either tool.

16
00:01:01.160 --> 00:01:05.200
For Maven, in the pom.xml file,

17
00:01:05.200 --> 00:01:11.140
you just have to add the JaCoco plugin to the build configuration.

18
00:01:11.140 --> 00:01:11.630
Then,

19
00:01:11.630 --> 00:01:16.200
you need to ensure that the JaCoco agent will run when the

20
00:01:16.200 --> 00:01:20.210
tests are run with the goal prepareâ€‘agent.

21
00:01:20.210 --> 00:01:25.440
This agent is going to collect the coverage information.

22
00:01:25.440 --> 00:01:27.540
In addition, most of the time,

23
00:01:27.540 --> 00:01:32.820
we'll want a report with this coverage information so we can configure the

24
00:01:32.820 --> 00:01:39.140
report goal to be executed during any of the phases of the build.

25
00:01:39.140 --> 00:01:42.680
In this example, we are going to execute the test phase,

26
00:01:42.680 --> 00:01:46.340
so this is the phase I set up here.

27
00:01:46.340 --> 00:01:49.900
There's no need to import the changes because,

28
00:01:49.900 --> 00:01:56.240
in the terminal, I'm going to execute mvnw test.

29
00:01:56.240 --> 00:02:00.640
Let's wait for a few seconds.

30
00:02:00.640 --> 00:02:01.840
Great.

31
00:02:01.840 --> 00:02:07.230
In the project navigator, refresh if you don't see the target directory.

32
00:02:07.230 --> 00:02:11.740
You'll see a jacoco.exec file.

33
00:02:11.740 --> 00:02:16.580
This file contains all the information collected by the JaCoco agent,

34
00:02:16.580 --> 00:02:22.440
and it can be consumed by many tools, but I'm interested in the report.

35
00:02:22.440 --> 00:02:28.110
Here, in the site directory, you can see a JaCoco directory and,

36
00:02:28.110 --> 00:02:33.040
inside, the reports generated in HTML, CSV,

37
00:02:33.040 --> 00:02:35.940
and XML formats.

38
00:02:35.940 --> 00:02:44.290
Let's open index.html. Here you can see the coverage by package, 65% for

39
00:02:44.290 --> 00:02:49.640
the product package and 89% for the reward package.

40
00:02:49.640 --> 00:02:55.140
In total, 79% of the code was covered by the tests.

41
00:02:55.140 --> 00:02:58.740
Only 69 lines were not covered.

42
00:02:58.740 --> 00:03:03.340
There is more information here, and you can even click on the packages,

43
00:03:03.340 --> 00:03:07.730
for example the reward package, to see the same information

44
00:03:07.730 --> 00:03:10.940
for the classes contained in this package.

45
00:03:10.940 --> 00:03:12.740
And if you click on a class,

46
00:03:12.740 --> 00:03:18.240
let's say RewardService, that is completely covered by the tests, you

47
00:03:18.240 --> 00:03:22.440
can see its methods. And if we click on one of them,

48
00:03:22.440 --> 00:03:26.320
you can even see the lines of the class. In green,

49
00:03:26.320 --> 00:03:29.480
the ones that were executed; in red,

50
00:03:29.480 --> 00:03:33.410
the ones that were not executed; and in yellow,

51
00:03:33.410 --> 00:03:36.040
the branches that were not executed.

52
00:03:36.040 --> 00:03:36.890
For example,

53
00:03:36.890 --> 00:03:40.600
in this case, it seems that a test for the case in

54
00:03:40.600 --> 00:03:43.840
which the order is null is missing.

55
00:03:43.840 --> 00:03:50.440
Anyway, let's go back to the index file, 79% of coverage.

56
00:03:50.440 --> 00:03:54.420
If we need to check that a specific percentage is being met,

57
00:03:54.420 --> 00:04:01.560
we can use another goal of the JaCoco plugin. Back to the pom.xml file, I'm

58
00:04:01.560 --> 00:04:07.370
going to paste another execution element, this time to set up the check goal

59
00:04:07.370 --> 00:04:11.890
at the test phase. In its configuration section,

60
00:04:11.890 --> 00:04:15.240
I'm passing a rule. At the package level,

61
00:04:15.240 --> 00:04:19.940
I require a line coverage minimum of 70%.

62
00:04:19.940 --> 00:04:22.940
Otherwise, the build will fail.

63
00:04:22.940 --> 00:04:27.320
There are a lot of options we can specify with this plugin. I'll

64
00:04:27.320 --> 00:04:31.550
leave a link to the documentation of this goal in the README file

65
00:04:31.550 --> 00:04:34.430
for this module. But in this case,

66
00:04:34.430 --> 00:04:39.670
since the percentage of coverage for the product package was around 60%,

67
00:04:39.670 --> 00:04:48.340
the build should fail. So I'm going to run mvnw test again.

68
00:04:48.340 --> 00:04:53.790
There you have it, build failure. Rule violated for package

69
00:04:53.790 --> 00:05:00.220
com.wiredbraincoffee.product. Lines covered ratio is .62,

70
00:05:00.220 --> 00:05:05.240
but the expected minimum is .7.

71
00:05:05.240 --> 00:05:10.420
Now for Gradle, I'll open the build.gradle file. First,

72
00:05:10.420 --> 00:05:14.140
we need to add the JaCoco plugin.

73
00:05:14.140 --> 00:05:18.540
Then, there are two ways to execute the coverage report.

74
00:05:18.540 --> 00:05:24.740
One is adding to the test task finalized by jacocoTestReport.

75
00:05:24.740 --> 00:05:30.540
This way, the report will be always generated after the tests run.

76
00:05:30.540 --> 00:05:35.750
The other way is by adding a jacocoTestReport task element,

77
00:05:35.750 --> 00:05:40.040
specifying that it depends on the test task.

78
00:05:40.040 --> 00:05:42.840
This way, when executing this task,

79
00:05:42.840 --> 00:05:47.540
tests are required to run before generating the report.

80
00:05:47.540 --> 00:05:52.630
The choice depends on how you want to execute the coverage report, either

81
00:05:52.630 --> 00:05:58.440
by executing the test task or the jacocTestReport task.

82
00:05:58.440 --> 00:05:59.620
For this example,

83
00:05:59.620 --> 00:06:06.010
I'll use the test task. Now to mirror the Maven configuration, I'll add a

84
00:06:06.010 --> 00:06:12.040
jacoco section to configure the toolVersion and another one to verify the

85
00:06:12.040 --> 00:06:19.520
coverage ratio with the same parameters used by Maven. And in the terminal,

86
00:06:19.520 --> 00:06:32.230
I'm going to execute gradlew test. Great. In the build directory, in

87
00:06:32.230 --> 00:06:34.740
addition to the reports directory,

88
00:06:34.740 --> 00:06:41.360
you can see there's such a jacoco directory that contains the EXEC file with

89
00:06:41.360 --> 00:06:47.640
the coverage information. Inside the reports directory, we can find another

90
00:06:47.640 --> 00:06:52.940
jacoco directory with the report in HTML format.

91
00:06:52.940 --> 00:06:54.440
Let's open it.

92
00:06:54.440 --> 00:07:01.470
The report is the same as the one generated by Maven. Back to the terminal,

93
00:07:01.470 --> 00:07:11.910
if I execute gradlew jacocoTestCoverageVerification, the build fails. Rule

94
00:07:11.910 --> 00:07:19.730
violated for package com.wiredbraincoffee.product. Lines covered ratio is

95
00:07:19.730 --> 00:07:29.000
0.6, but expected minimum is .7. All right, let's wrap up this module.

