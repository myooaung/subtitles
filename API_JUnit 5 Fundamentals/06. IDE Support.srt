1
00:00:00,940 --> 00:00:04,090
To right tests in JUnit 5, you have to include,

2
00:00:04,090 --> 00:00:06,300
as a dependency of your project,

3
00:00:06,300 --> 00:00:13,740
the Jupiter API with org.junit.jupiter as the group ID

4
00:00:13,740 --> 00:00:18,070
and jupiter‑api as the artifact ID.

5
00:00:18,070 --> 00:00:23,270
Now here's how a simple HelloWorldTest class looks like.

6
00:00:23,270 --> 00:00:26,130
If you have worked with JUnit before,

7
00:00:26,130 --> 00:00:28,930
you'll notice there are a couple of differences.

8
00:00:28,930 --> 00:00:32,500
The name of the annotation package has changed.

9
00:00:32,500 --> 00:00:36,280
It's now org.junit.jupiter.api.

10
00:00:36,280 --> 00:00:42,740
And now classes and methods are not required to be public.

11
00:00:42,740 --> 00:00:45,110
They can have package visibility.

12
00:00:45,110 --> 00:00:51,490
However, you still have to annotate test methods with the Test annotation.

13
00:00:51,490 --> 00:00:57,630
Now regarding IDEs, the most popular ones support JUnit 5,

14
00:00:57,630 --> 00:01:07,430
IntelliJ since version 2016.2, Eclipse since Eclipse Oxygen 4.7.1a,

15
00:01:07,430 --> 00:01:11,390
NetBeans since the 10.0 release,

16
00:01:11,390 --> 00:01:16,350
and Visual Studio Code supports JUnit 5 via an extension,

17
00:01:16,350 --> 00:01:19,130
the Java Test Runner extension.

18
00:01:19,130 --> 00:01:21,630
It's easy to get started.

19
00:01:21,630 --> 00:01:26,850
For example, in IntelliJ, I'm going to create a new class,

20
00:01:26,850 --> 00:01:33,940
HelloWorldTest, and I'm going to paste our HelloWorld class.

21
00:01:33,940 --> 00:01:38,300
Now I can position the cursor on the Test annotation and,

22
00:01:38,300 --> 00:01:43,900
with this menu, choose the option to add JUnit 5 to the class path.

23
00:01:43,900 --> 00:01:48,120
This option adds the JUnit 5 version that comes with

24
00:01:48,120 --> 00:01:51,540
the release of IntelliJ you're using.

25
00:01:51,540 --> 00:01:55,210
But you can also search for another version and choose

26
00:01:55,210 --> 00:01:59,130
options like where to download the file or if the source

27
00:01:59,130 --> 00:02:02,540
files should be downloaded too.

28
00:02:02,540 --> 00:02:04,940
I'll click OK.

29
00:02:04,940 --> 00:02:07,840
And in the External Libraries section,

30
00:02:07,840 --> 00:02:12,540
you can see the JAR files that were added to the project.

31
00:02:12,540 --> 00:02:17,940
In addition to the JUnit JAR files, there's an apiguardian file.

32
00:02:17,940 --> 00:02:24,040
It contains an API annotation that is used by some JUnit classes.

33
00:02:24,040 --> 00:02:26,240
An opentest4j.

34
00:02:26,240 --> 00:02:32,270
This JAR belongs to the open test alliance for the JVM, a proposal by the JUnit

35
00:02:32,270 --> 00:02:37,730
5 team for an open‑source project to provide a minimal set of classes that

36
00:02:37,730 --> 00:02:42,540
testing libraries and tools can support consistently.

37
00:02:42,540 --> 00:02:46,020
All right, now that the compiler errors are gone,

38
00:02:46,020 --> 00:02:50,940
we can run the class, and everything should work.

39
00:02:50,940 --> 00:02:53,940
Other IDEs work similarly.

40
00:02:53,940 --> 00:02:57,900
But of course, this is great when you only work inside of one of

41
00:02:57,900 --> 00:03:01,740
these IDEs and with the tools they provide.

42
00:03:01,740 --> 00:03:05,530
But most likely, you have your project set up with a build

43
00:03:05,530 --> 00:03:13,000
tool like Gradle or Maven. So let's look at how to set up JUnit 5 with these tools.

