WEBVTT
1
00:00:00.940 --> 00:00:03.640
Let's talk about the assertion phase.

2
00:00:03.640 --> 00:00:07.140
Remember, a test is a boolean operation.

3
00:00:07.140 --> 00:00:10.640
It only has one result, true or false.

4
00:00:10.640 --> 00:00:14.030
But does that mean that the test should have a single

5
00:00:14.030 --> 00:00:17.140
assertion instead of multiple assertions?

6
00:00:17.140 --> 00:00:18.880
Well, not really.

7
00:00:18.880 --> 00:00:23.040
It means you should have one logical boolean expression.

8
00:00:23.040 --> 00:00:26.200
The number of physical assertions is not important.

9
00:00:26.200 --> 00:00:28.750
Just like a boolean expression,

10
00:00:28.750 --> 00:00:34.140
it can be composed of multiple conditions with ands and ors.

11
00:00:34.140 --> 00:00:40.690
However, a good test should only have one act and assert pair of operations.

12
00:00:40.690 --> 00:00:45.450
What is not right is to act and assert one thing and then act

13
00:00:45.450 --> 00:00:49.780
and assert another thing because we don't want the test to have

14
00:00:49.780 --> 00:00:54.080
one action that passes and another action that fails or that

15
00:00:54.080 --> 00:00:55.800
depends on the first one.

16
00:00:55.800 --> 00:01:01.520
A test should have one action followed by one or more physical assertions

17
00:01:01.520 --> 00:01:06.040
that form a single logical assertion about that action.

18
00:01:06.040 --> 00:01:08.890
We have seen how to use assertEquals,

19
00:01:08.890 --> 00:01:13.630
but JUnit comes with a lot of other methods to evaluate if an

20
00:01:13.630 --> 00:01:18.300
expected outcome has been achieved and even a failed method

21
00:01:18.300 --> 00:01:20.340
to fail the test intentionally.

22
00:01:20.340 --> 00:01:23.050
And if you need more power,

23
00:01:23.050 --> 00:01:29.280
you can use external assertion libraries like AssertJ or Hamcrest.

24
00:01:29.280 --> 00:01:31.940
It's time for a demo.

25
00:01:31.940 --> 00:01:37.120
Let's see how to use some of the assert methods included in JUnit.

26
00:01:37.120 --> 00:01:44.140
This time, we are going to test the RewardByGiftService class.

27
00:01:44.140 --> 00:01:49.390
I have already created a test class with a setUp method and a helper

28
00:01:49.390 --> 00:01:54.840
method to create a sample list with any number of products.

29
00:01:54.840 --> 00:02:00.240
We can start by testing if the correct product ID is set.

30
00:02:00.240 --> 00:02:05.460
In most assert methods, the first parameter represents the expected value,

31
00:02:05.460 --> 00:02:10.240
and the second parameter represents the actual value we got.

32
00:02:10.240 --> 00:02:11.170
In addition,

33
00:02:11.170 --> 00:02:15.640
every assertion method takes an optional string parameter that is

34
00:02:15.640 --> 00:02:19.550
included in the output if the assertion fails.

35
00:02:19.550 --> 00:02:22.190
If you have multiple assertions,

36
00:02:22.190 --> 00:02:26.500
this message can help you recognize which assertion failed or

37
00:02:26.500 --> 00:02:30.440
to better explain what should have occurred.

38
00:02:30.440 --> 00:02:34.760
And if, for some reason, the error message is expensive to create,

39
00:02:34.760 --> 00:02:37.500
you can use a lambda expression to create the

40
00:02:37.500 --> 00:02:41.440
message only if the assertion fails.

41
00:02:41.440 --> 00:02:45.530
Now let's create a test with more than one assertion,

42
00:02:45.530 --> 00:02:51.640
failing the second and third assertions intentionally.

43
00:02:51.640 --> 00:02:54.440
Let's run the class.

44
00:02:54.440 --> 00:02:58.290
One thing to notice is that if one assertion fails,

45
00:02:58.290 --> 00:03:03.540
the remaining assertions won't be executed because to indicate the failure,

46
00:03:03.540 --> 00:03:07.740
an exception is thrown.

47
00:03:07.740 --> 00:03:12.930
But we can use assertAll to wrap assertions in a lambda expression.

48
00:03:12.930 --> 00:03:17.710
And even if one fails, all remaining assertions will be executed.

49
00:03:17.710 --> 00:03:23.480
And all the errors will be aggregated and reported in a MultipleFailuresError,

50
00:03:23.480 --> 00:03:26.240
like this.

51
00:03:26.240 --> 00:03:30.440
The first parameter of assertAll is a message that will be

52
00:03:30.440 --> 00:03:34.740
included in the output of the error.

53
00:03:34.740 --> 00:03:39.040
Let's fix these assertions.

54
00:03:39.040 --> 00:03:39.380
Great.

55
00:03:39.380 --> 00:03:41.430
All tests passed.

56
00:03:41.430 --> 00:03:45.740
Now if we set an invalid product ID,

57
00:03:45.740 --> 00:03:50.830
and for this example, let's consider zero or a negative value and

58
00:03:50.830 --> 00:03:55.940
invalid one, an IllegalArgumentException will be thrown.

59
00:03:55.940 --> 00:03:59.110
So let's test that using assertThrows,

60
00:03:59.110 --> 00:04:03.600
which asserts that the execution of the supplied lambda

61
00:04:03.600 --> 00:04:08.740
expression throws an exception of the expected type.

62
00:04:08.740 --> 00:04:13.440
We can use this specific exception class or one of its parents,

63
00:04:13.440 --> 00:04:19.840
like in this case where an IllegalArgumentException is a runtime exception.

64
00:04:19.840 --> 00:04:25.440
If no exception is thrown or if an exception of a different type is thrown,

65
00:04:25.440 --> 00:04:27.600
this method will fail.

66
00:04:27.600 --> 00:04:34.290
If we want to test no exception is thrown, we can use assertDoesNotThrow.

67
00:04:34.290 --> 00:04:39.900
Either one of them also returns the exception thrown in case

68
00:04:39.900 --> 00:04:42.940
you want to perform additional checks.

69
00:04:42.940 --> 00:04:43.960
For example,

70
00:04:43.960 --> 00:04:51.540
here we can check if the exception message contains the invalid product ID.

71
00:04:51.540 --> 00:04:54.440
We can also use assertTimeout,

72
00:04:54.440 --> 00:04:59.040
which asserts that the execution of the supplied lambda expression

73
00:04:59.040 --> 00:05:03.340
completes before the given timeout is exceeded.

74
00:05:03.340 --> 00:05:06.630
The timeout is given as a duration object so we can

75
00:05:06.630 --> 00:05:09.640
create a duration of seconds, milliseconds,

76
00:05:09.640 --> 00:05:12.350
or nanoseconds, for example.

77
00:05:12.350 --> 00:05:16.540
Here, I now need to show you how the test can fail.

78
00:05:16.540 --> 00:05:22.540
I'm searching for the last product in an order of 50,000 products.

79
00:05:22.540 --> 00:05:26.040
Let's execute the test.

80
00:05:26.040 --> 00:05:27.410
So there you have it.

81
00:05:27.410 --> 00:05:35.210
Execution exceeded timeout of 4 ms by X amount of milliseconds. The

82
00:05:35.210 --> 00:05:40.340
exact time can change every time the test is executed.

83
00:05:40.340 --> 00:05:44.740
As you can see, the execution won't be aborted if the timeout is

84
00:05:44.740 --> 00:05:48.770
exceeded because the lambda expression is executed in the same

85
00:05:48.770 --> 00:05:52.240
thread as that of the calling code.

86
00:05:52.240 --> 00:05:56.840
If we want to abort the operation when the timeout is exceeded,

87
00:05:56.840 --> 00:06:00.140
we can use assertTimeout preemptively,

88
00:06:00.140 --> 00:06:03.890
which also asserts that the execution of the supplied lambda

89
00:06:03.890 --> 00:06:07.340
completes before the given timeout is exceeded.

90
00:06:07.340 --> 00:06:11.780
But with this method, the code is executed in a different thread.

91
00:06:11.780 --> 00:06:17.540
So this time, the execution will be aborted if the timeout is exceeded.

92
00:06:17.540 --> 00:06:20.160
For that reason, in the error message,

93
00:06:20.160 --> 00:06:25.130
we only see execution timed out after 4 ms and not

94
00:06:25.130 --> 00:06:29.840
the total time it took to run.

95
00:06:29.840 --> 00:06:40.000
Let's delete some zeros over here and run the test. There you have it. All tests passed.

