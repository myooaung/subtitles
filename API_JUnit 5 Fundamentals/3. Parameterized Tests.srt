1
00:00:00,940 --> 00:00:02,950
With parameterized tests,

2
00:00:02,950 --> 00:00:07,640
you can run a test multiple times with different arguments.

3
00:00:07,640 --> 00:00:10,150
Instead of using a Test annotation,

4
00:00:10,150 --> 00:00:13,940
you have to use the annotation ParameterizedTest.

5
00:00:13,940 --> 00:00:16,180
But unlike DynamicTest,

6
00:00:16,180 --> 00:00:22,040
ParameterizedTests have the same lifecycle as regular test methods.

7
00:00:22,040 --> 00:00:27,360
The only requirement is that you must declare at least one source that

8
00:00:27,360 --> 00:00:31,540
will provide the arguments for each test invocation.

9
00:00:31,540 --> 00:00:36,290
And this is because parameterized test methods come from arguments

10
00:00:36,290 --> 00:00:40,060
directly from a source following these rules.

11
00:00:40,060 --> 00:00:45,240
First, zero or more indexed arguments must be declared.

12
00:00:45,240 --> 00:00:46,020
Usually,

13
00:00:46,020 --> 00:00:49,540
there's a one‑to‑one relation between the argument source

14
00:00:49,540 --> 00:00:52,560
index and the method parameter index,

15
00:00:52,560 --> 00:00:56,540
meaning that if a method defines two arguments,

16
00:00:56,540 --> 00:01:00,540
the source must provide those two arguments.

17
00:01:00,540 --> 00:01:04,750
However, we can aggregate multiple parameters into one.

18
00:01:04,750 --> 00:01:09,240
So zero or more aggregators must be declared next.

19
00:01:09,240 --> 00:01:10,660
And finally,

20
00:01:10,660 --> 00:01:16,640
arguments that can be resolved by a ParameterResolver must be declared last.

21
00:01:16,640 --> 00:01:17,660
In particular,

22
00:01:17,660 --> 00:01:21,700
indexed arguments are provided by an implementation of

23
00:01:21,700 --> 00:01:24,240
the ArgumentsProvider interface.

24
00:01:24,240 --> 00:01:28,940
Each argument provided corresponds to a single method parameter.

25
00:01:28,940 --> 00:01:34,300
So arguments are passed at the same index in the method's parameter list.

26
00:01:34,300 --> 00:01:40,740
An arguments provider can be registered with the ArgumentsSource annotation.

27
00:01:40,740 --> 00:01:44,540
We'll review argument sources later in this module.

28
00:01:44,540 --> 00:01:48,500
On the other hand, using an argument of type ArgumentsAccessor,

29
00:01:48,500 --> 00:01:53,540
we can aggregate multiple arguments into a single one.

30
00:01:53,540 --> 00:01:58,200
An instance of ArgumentsAccessor is automatically injected

31
00:01:58,200 --> 00:02:01,460
into any parameter of type ArgumentsAccessor.

32
00:02:01,460 --> 00:02:07,420
Another way of aggregating arguments is by using a custom aggregator.

33
00:02:07,420 --> 00:02:12,420
You just have to implement the ArgumentsAggregator interface,

34
00:02:12,420 --> 00:02:13,500
for example,

35
00:02:13,500 --> 00:02:18,120
to create a class that converts multiple arguments into an object

36
00:02:18,120 --> 00:02:23,320
of type product and annotate a method argument of type product

37
00:02:23,320 --> 00:02:26,100
with the annotation AggregateWith,

38
00:02:26,100 --> 00:02:30,840
specifying the argument's aggregator implementation.

39
00:02:30,840 --> 00:02:35,440
Finally, to inject any other type of parameters into a test,

40
00:02:35,440 --> 00:02:38,530
you have to use the ParameterResolver interface,

41
00:02:38,530 --> 00:02:43,870
which defines an API to dynamically resolve parameters at runtime.

42
00:02:43,870 --> 00:02:47,490
Three built‑in resolvers are registered automatically,

43
00:02:47,490 --> 00:02:53,600
TestInfoParameterResolver to inject parameters of type TestInfo

44
00:02:53,600 --> 00:02:57,140
in all types of test and lifecycle methods,

45
00:02:57,140 --> 00:03:01,380
RepetitionInfoParameterResolver to inject parameters of

46
00:03:01,380 --> 00:03:05,380
type RepetitionInfo for methods annotated with

47
00:03:05,380 --> 00:03:09,140
RepeatedTest, BeforeEach, and AfterEach,

48
00:03:09,140 --> 00:03:14,070
and TestReporterParameterResolver to inject parameters of type

49
00:03:14,070 --> 00:03:19,230
TestReporter in all types of test methods and methods annotated

50
00:03:19,230 --> 00:03:22,240
with BeforeEach and AfterEach.

51
00:03:22,240 --> 00:03:26,390
To use parameterized tests, you need to add as a dependency of

52
00:03:26,390 --> 00:03:30,870
your project the junit‑jupiter‑params JAR.

53
00:03:30,870 --> 00:03:35,640
Parameterized tests can have custom display names.

54
00:03:35,640 --> 00:03:40,940
There's a default format, but you can change it using the following placeholders.

55
00:03:40,940 --> 00:03:44,540
DisplayName, the display name of the method.

56
00:03:44,540 --> 00:03:50,340
Index, the current invocation index of the parameter source starting from one.

57
00:03:50,340 --> 00:03:54,940
Arguments, the complete comma‑separated arguments list.

58
00:03:54,940 --> 00:03:56,690
ArgumentsWithNames,

59
00:03:56,690 --> 00:04:01,640
the complete comma‑separated arguments list with parameter names.

60
00:04:01,640 --> 00:04:08,940
Or you can use each argument with an identifier that starts from zero.

61
00:04:08,940 --> 00:04:12,690
All right, let's see how to set up parameterized tests,

62
00:04:12,690 --> 00:04:17,030
how the lifecycle is handled, how to define custom display names,

63
00:04:17,030 --> 00:04:21,640
and how to inject test information parameters.

64
00:04:21,640 --> 00:04:25,370
The first thing we need to do is to make sure the project has

65
00:04:25,370 --> 00:04:30,190
the junit‑jupiter‑params JAR as a dependency.

66
00:04:30,190 --> 00:04:34,240
I'll append the pom.xml file.

67
00:04:34,240 --> 00:04:40,040
Junit‑jupiter already includes junit‑jupiter‑params.

68
00:04:40,040 --> 00:04:42,500
But if you're not using this dependency,

69
00:04:42,500 --> 00:04:46,560
you'll have to include the params JAR as a test dependency.

70
00:04:46,560 --> 00:04:51,920
In any case, for this demo, I have created a test class,

71
00:04:51,920 --> 00:04:55,720
RewardByGiftService parameterized test.

72
00:04:55,720 --> 00:05:00,540
It has a setup method annotated with BeforeEach and a

73
00:05:00,540 --> 00:05:03,740
method to create a sample order.

74
00:05:03,740 --> 00:05:08,440
So I'm going to add the method discountShouldBeApplied.

75
00:05:08,440 --> 00:05:12,140
But instead of annotating this method with Test,

76
00:05:12,140 --> 00:05:16,340
I'm going to use the annotation ParameterizedTest.

77
00:05:16,340 --> 00:05:19,960
In the next clip, we are going to talk about argument sources.

78
00:05:19,960 --> 00:05:23,440
But for now, we'll use ValueSource.

79
00:05:23,440 --> 00:05:28,070
ValueSource allows you to specify an array of strings or

80
00:05:28,070 --> 00:05:32,440
primitive types and provides a single parameter.

81
00:05:32,440 --> 00:05:40,240
In this example, I'm injecting the numbers 1, 2, 3, and 4 as long values.

82
00:05:40,240 --> 00:05:47,440
So I'm going to add the parameter productId as long and the body of the method,

83
00:05:47,440 --> 00:05:51,640
which tests if a reward is applied.

84
00:05:51,640 --> 00:05:57,160
If I run the test, we'll see it was executed four times.

85
00:05:57,160 --> 00:06:02,700
In the same way, the BeforeEach message was printed four times.

86
00:06:02,700 --> 00:06:09,040
Parameterized tests have the same lifecycle as regular test methods.

87
00:06:09,040 --> 00:06:12,710
If we add to the argument source a value to fail the

88
00:06:12,710 --> 00:06:19,480
test at the beginning of the list, we get a failed test,

89
00:06:19,480 --> 00:06:22,280
but the rest were executed.

90
00:06:22,280 --> 00:06:29,440
So parameterized tests are executed independently from each other.

91
00:06:29,440 --> 00:06:31,290
Let me delete the value.

92
00:06:31,290 --> 00:06:32,730
By default,

93
00:06:32,730 --> 00:06:37,750
the format for the display names of parameterized tests is the

94
00:06:37,750 --> 00:06:41,940
invocation index followed by the string representation of all the

95
00:06:41,940 --> 00:06:45,440
arguments for that specific invocation.

96
00:06:45,440 --> 00:06:50,240
If we have a DisplayName annotation,

97
00:06:50,240 --> 00:06:54,060
the annotation will give a display name to the container,

98
00:06:54,060 --> 00:06:56,140
not to the tests.

99
00:06:56,140 --> 00:06:58,430
To give our tests a custom name,

100
00:06:58,430 --> 00:07:06,440
we need to use the name attribute of the ParameterizedTest annotation.

101
00:07:06,440 --> 00:07:09,910
When I run the test, you can see the new display name,

102
00:07:09,910 --> 00:07:15,240
Test #1: productid =1 and so on.

103
00:07:15,240 --> 00:07:19,140
Now I'm going to add after the productId parameter,

104
00:07:19,140 --> 00:07:27,740
not before, one parameter of type TestInfo and another one of type TestReporter.

105
00:07:27,740 --> 00:07:34,340
We can use TestInfo to print the display name of the test, for example.

106
00:07:34,340 --> 00:07:35,540
On the other hand,

107
00:07:35,540 --> 00:07:40,750
TestReporter can be used to publish data about the current test that

108
00:07:40,750 --> 00:07:44,840
will be included in reports and the standard output and can be

109
00:07:44,840 --> 00:07:50,340
consumed through an API by IDEs or build tools.

110
00:07:50,340 --> 00:07:53,440
If we run the test,

111
00:07:53,440 --> 00:07:56,570
we can see how the display name was printed, as well

112
00:07:56,570 --> 00:07:59,140
as the test reporter information,

113
00:07:59,140 --> 00:08:04,020
a timestamp, and the value of the parameter. As I mentioned

114
00:08:04,020 --> 00:08:08,480
before, you cannot inject parameters to lifecycle methods

115
00:08:08,480 --> 00:08:11,090
with annotations like ValueSource.

116
00:08:11,090 --> 00:08:17,640
You can only inject parameters of type TestInfo and TestReporter.

117
00:08:17,640 --> 00:08:21,240
Let's modify the print statement.

118
00:08:21,240 --> 00:08:25,140
Run the class, and there you have it.

119
00:08:25,140 --> 00:08:32,000
The display name of the test currently running is printed in the BeforeEach method.

