WEBVTT
1
00:00:00.940 --> 00:00:04.940
Sometimes you'll want to repeat a test over and over again,

2
00:00:04.940 --> 00:00:10.540
maybe just changing the test inputs or some other aspect of the test.

3
00:00:10.540 --> 00:00:16.000
JUnit provides the annotation RepeatedTest to repeat a test many times.

4
00:00:16.000 --> 00:00:18.940
The number of repetitions is fixed.

5
00:00:18.940 --> 00:00:21.940
You cannot change it at runtime.

6
00:00:21.940 --> 00:00:27.030
The advantage is that each invocation of a repeated test behaves like

7
00:00:27.030 --> 00:00:31.090
a regular test method with full lifecycle support.

8
00:00:31.090 --> 00:00:36.040
You can give a custom display name to each repetition.

9
00:00:36.040 --> 00:00:41.540
This name can be a combination of a static test and dynamic placeholders.

10
00:00:41.540 --> 00:00:44.440
These are the placeholders that are supported,

11
00:00:44.440 --> 00:00:47.840
the displayName of the repeated test method,

12
00:00:47.840 --> 00:00:52.940
the currentRepetition number, and the total number of repetitions.

13
00:00:52.940 --> 00:00:56.120
You can also use one of the two predefined formats,

14
00:00:56.120 --> 00:00:59.420
LONG_DISPLAY_NAME that has the format,

15
00:00:59.420 --> 00:01:07.380
for example, My Test :: repetition 1 of 10, and SHORT_DISPLAY_NAME that

16
00:01:07.380 --> 00:01:12.700
has the format, for example, repetition 1 of 10. By the way,

17
00:01:12.700 --> 00:01:18.040
SHORT_DISPLAY_NAME is that default format if none is specified. We can

18
00:01:18.040 --> 00:01:23.410
also have the repetition information available in our test, BeforeEach and

19
00:01:23.410 --> 00:01:28.670
AfterEach methods by passing an object of type RepetitionInfo as a

20
00:01:28.670 --> 00:01:33.430
parameter. RepetitionInfo is an interface with the method

21
00:01:33.430 --> 00:01:38.540
getCurrentRepetition and getTotalRepetition.

22
00:01:38.540 --> 00:01:40.390
So it's time for a demo.

23
00:01:40.390 --> 00:01:46.060
Let's see how to use the RepeatedTest annotation, how to give the test a custom

24
00:01:46.060 --> 00:01:51.340
display name, and how to use the RepetitionInfo interface.

25
00:01:51.340 --> 00:01:57.440
I have created another test class for the RewardByGiftService.

26
00:01:57.440 --> 00:02:02.020
The purpose of this test is to randomly generate product IDs

27
00:02:02.020 --> 00:02:06.210
that are not going to appear in the sample order, for example

28
00:02:06.210 --> 00:02:10.240
anything between 1000 and 2000.

29
00:02:10.240 --> 00:02:16.630
So if I want to repeat five times the method giftProductNotInOrder, I have

30
00:02:16.630 --> 00:02:22.210
to annotate it with RepeatedTest and pass the number of repetitions as an

31
00:02:22.210 --> 00:02:27.240
argument of the annotation. Let's run the class.

32
00:02:27.240 --> 00:02:32.010
You can see that JUnit executed the test Correct points, which is defined

33
00:02:32.010 --> 00:02:37.990
in the interface TestHelper and that the method giftProductNotInOrder was

34
00:02:37.990 --> 00:02:43.370
executed five times. On the right side, you can see that the message

35
00:02:43.370 --> 00:02:47.040
setUp called was printed six times.

36
00:02:47.040 --> 00:02:53.040
Now you have to be careful. RepeatedTest substitutes the Test annotation.

37
00:02:53.040 --> 00:02:57.700
If we add a Test annotation to this method and run the

38
00:02:57.700 --> 00:03:02.640
test, you can see a warning appears here.

39
00:03:02.640 --> 00:03:07.350
The test is still executed five times, but another execution

40
00:03:07.350 --> 00:03:12.940
generates a warning, multiple TestDescriptors.

41
00:03:12.940 --> 00:03:16.340
So let's delete this Test annotation.

42
00:03:16.340 --> 00:03:22.650
You can add a custom display name with the name attribute. Note

43
00:03:22.650 --> 00:03:27.130
that now the number of repetitions has to be specified with the

44
00:03:27.130 --> 00:03:33.740
value attribute. And there you have it.

45
00:03:33.740 --> 00:03:37.200
Now if you want to use the current repetition and the total

46
00:03:37.200 --> 00:03:40.820
number of repetitions inside your test method,

47
00:03:40.820 --> 00:03:44.760
JUnit can inject a parameter of type repetitionInfo.

48
00:03:44.760 --> 00:03:58.000
Here we can use it to get a productId. Let's run it. And yes, from 1001 to 1005.

