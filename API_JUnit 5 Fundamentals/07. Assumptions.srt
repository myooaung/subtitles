1
00:00:00,940 --> 00:00:04,180
Sometimes, instead of disabling the whole test,

2
00:00:04,180 --> 00:00:08,080
you'll want to stop the execution of a test at some point.

3
00:00:08,080 --> 00:00:13,220
Assumptions are an easy way to conditionally stop the execution of a test,

4
00:00:13,220 --> 00:00:17,310
for example if the test depends on something that

5
00:00:17,310 --> 00:00:20,240
doesn't exist in the current environment.

6
00:00:20,240 --> 00:00:22,380
In contrast to failed assertions,

7
00:00:22,380 --> 00:00:26,480
failed assumptions do not result in a test failure.

8
00:00:26,480 --> 00:00:30,640
A failed assumption just aborts the test.

9
00:00:30,640 --> 00:00:34,020
There are three assumption methods, assumeTrue,

10
00:00:34,020 --> 00:00:38,240
which validates if the given assumption evaluates to true

11
00:00:38,240 --> 00:00:41,040
to allow the execution of the test.

12
00:00:41,040 --> 00:00:45,560
The assumption can be a simple boolean expression or a lambda expression

13
00:00:45,560 --> 00:00:51,540
that represents the functional interface BooleanSupplier, AssumeFalse that

14
00:00:51,540 --> 00:00:56,070
validates if they give an assumption evaluates to false to allow the

15
00:00:56,070 --> 00:00:58,970
execution of the test, and assumingThat,

16
00:00:58,970 --> 00:01:03,150
which executes the supplied lambda expression that

17
00:01:03,150 --> 00:01:06,270
represents the functional interface executable,

18
00:01:06,270 --> 00:01:10,230
only if they give an assumption evaluates to true.

19
00:01:10,230 --> 00:01:14,740
Otherwise, this method does nothing.

20
00:01:14,740 --> 00:01:17,940
Let's try this with a demo.

21
00:01:17,940 --> 00:01:24,440
I have already created a test class for the RewardByConversion service.

22
00:01:24,440 --> 00:01:28,420
Let's say that for this test I want to assert that the points

23
00:01:28,420 --> 00:01:32,940
redeemed are zero only if a flag is set.

24
00:01:32,940 --> 00:01:37,810
I don't have a TEST_POINTS environment variable, so the

25
00:01:37,810 --> 00:01:44,240
last assert will not be executed.

26
00:01:44,240 --> 00:01:47,780
We can see an exception here, TestAbortedException:

27
00:01:47,780 --> 00:01:52,540
Assumption failed: assumption is not true.

28
00:01:52,540 --> 00:01:57,590
Notice that the test was ignored. But just to be sure that the first

29
00:01:57,590 --> 00:02:04,940
assertion was executed, let's change this value.

30
00:02:04,940 --> 00:02:05,600
Great.

31
00:02:05,600 --> 00:02:08,140
The first assertion is still executed.

32
00:02:08,140 --> 00:02:09,200
So as you can see,

33
00:02:09,200 --> 00:02:12,780
you can put the assumption anywhere in the body of a test

34
00:02:12,780 --> 00:02:15,280
method. And if the assumption is valid,

35
00:02:15,280 --> 00:02:19,340
the rest of the code will not be executed.

36
00:02:19,340 --> 00:02:23,640
You can even put the assumption in the beforeEach method.

37
00:02:23,640 --> 00:02:31,640
Let me change the value back. Move the assumeTrue method to the setUp method.

38
00:02:31,640 --> 00:02:38,640
And if we run the test, you can see that all the tests were ignored.

39
00:02:38,640 --> 00:02:42,640
All right, let's delete it from here.

40
00:02:42,640 --> 00:02:47,190
And back to the method emptyOrderEnoughPoints, we can also use

41
00:02:47,190 --> 00:02:52,210
assumingThat, which only executes the lambda expression if the

42
00:02:52,210 --> 00:02:57,840
assumption is valid. If we run the class,

43
00:02:57,840 --> 00:03:03,240
everything is fine because the assertion was not executed.

44
00:03:03,240 --> 00:03:17,000
But if we change the condition and run the test again, we'll get a failed test because this time, the assertion was executed.

