1
00:00:00,940 --> 00:00:04,720
The first difference between JUnit 4 and 5 is that

2
00:00:04,720 --> 00:00:09,910
JUnit 5's API uses a new package, org.junit.jupiter.

3
00:00:09,910 --> 00:00:15,970
All classes and annotations are now under this package This way,

4
00:00:15,970 --> 00:00:21,660
a project can contain tests from different JUnit persons without conflict.

5
00:00:21,660 --> 00:00:25,000
About API differences, in JUnit 4,

6
00:00:25,000 --> 00:00:29,400
you have to declare the test methods and classes as public.

7
00:00:29,400 --> 00:00:34,170
In JUnit 5, public classes and methods are not required.

8
00:00:34,170 --> 00:00:36,720
They can have packaged visibility.

9
00:00:36,720 --> 00:00:40,530
About lifecycle annotations, in JUnit 4,

10
00:00:40,530 --> 00:00:44,770
you have to annotate with BeforeClass the methods you

11
00:00:44,770 --> 00:00:47,300
wanted to run before all tests,

12
00:00:47,300 --> 00:00:53,040
with Before the method you wanted to execute before each test,

13
00:00:53,040 --> 00:00:56,240
After to execute them after each test,

14
00:00:56,240 --> 00:01:00,440
and AfterClass to execute them after all the tests.

15
00:01:00,440 --> 00:01:04,580
In JUnit 5, well, you can remove the public modifier,

16
00:01:04,580 --> 00:01:08,870
and the annotations change their name to BeforeAll,

17
00:01:08,870 --> 00:01:12,840
BeforeEach, AfterEach, and AfterAll.

18
00:01:12,840 --> 00:01:15,440
And if you're using a PER_CLASS lifecycle,

19
00:01:15,440 --> 00:01:21,330
you don't have to mark the BeforeAll and AfterAll methods as static.

20
00:01:21,330 --> 00:01:22,390
In JUnit 4,

21
00:01:22,390 --> 00:01:28,030
you use the Ignore annotation to ignore or temporarily disable a test.

22
00:01:28,030 --> 00:01:33,440
In Junit 5, this annotation changes its name to Disable,

23
00:01:33,440 --> 00:01:37,610
but you can still use Ignore with JUnit 5 tests.

24
00:01:37,610 --> 00:01:43,750
Just add junit‑jupiter‑migrationsupport as a dependency of your

25
00:01:43,750 --> 00:01:48,470
project and annotate your test class with ExtendWith

26
00:01:48,470 --> 00:01:52,690
IgnoreCondition.class or EnableJUnit4MigrationSupport,

27
00:01:52,690 --> 00:01:58,240
which automatically registers the IgnoreCondition extension

28
00:01:58,240 --> 00:02:01,610
and adds limited JUnit 4 rule support.

29
00:02:01,610 --> 00:02:08,070
IgnoreCondition is an extension of type ExecutionCondition that disables test

30
00:02:08,070 --> 00:02:13,240
classes or test methods that are annotated with Ignore.

31
00:02:13,240 --> 00:02:14,260
In JUnit 4,

32
00:02:14,260 --> 00:02:19,000
you use the Category annotation to organize your test methods

33
00:02:19,000 --> 00:02:23,130
or classes into categories so you can choose to run only those

34
00:02:23,130 --> 00:02:25,010
elements of a given category,

35
00:02:25,010 --> 00:02:29,350
and you use classes or interfaces as categories and

36
00:02:29,350 --> 00:02:33,070
subclasses as subcategories. In Junit 5,

37
00:02:33,070 --> 00:02:36,910
this functionality is done with the Tag annotation,

38
00:02:36,910 --> 00:02:42,770
passing a string as a tag identifier and without support for subtyping.

39
00:02:42,770 --> 00:02:46,070
Now about assertion methods, first of all,

40
00:02:46,070 --> 00:02:51,070
in JUnit 4, you can find them under the class org,junit.Assert.

41
00:02:51,070 --> 00:02:55,500
Because of the new architecture of JUnit 5,

42
00:02:55,500 --> 00:03:00,100
the assertion methods now belong to the JUnit Jupiter project and they

43
00:03:00,100 --> 00:03:07,840
were moved to the class org.junit.jupiter.api.Assertions.

44
00:03:07,840 --> 00:03:12,660
But the biggest change regarding assertion methods was the parameter order.

45
00:03:12,660 --> 00:03:17,240
In JUnit 4, the first parameter is the error message,

46
00:03:17,240 --> 00:03:21,270
then the expected value, and, finally, the actual value.

47
00:03:21,270 --> 00:03:25,330
In JUnit 5, the expected value comes first,

48
00:03:25,330 --> 00:03:30,740
then the actual value, and, finally, the optional error message.

49
00:03:30,740 --> 00:03:33,410
Also, with lambda expressions,

50
00:03:33,410 --> 00:03:38,200
we can have lazy error messages that are only created when needed.

51
00:03:38,200 --> 00:03:45,040
In JUnit 4, we have an assertThat method that took a Hamcrest matcher,

52
00:03:45,040 --> 00:03:50,280
which caused to always include Hamcrest as a dependency of JUnit.

53
00:03:50,280 --> 00:03:51,940
Well, not anymore.

54
00:03:51,940 --> 00:03:55,440
In JUnit 5, assertThat is gone.

55
00:03:55,440 --> 00:03:57,300
If you want to use this method,

56
00:03:57,300 --> 00:04:03,350
include Hamcrest as a dependency explicitly and use it directly from it.

57
00:04:03,350 --> 00:04:09,140
In JUnit 4, to continue the execution of a test after an assertion failure,

58
00:04:09,140 --> 00:04:11,700
you have to define another collector.

59
00:04:11,700 --> 00:04:16,930
In Junit 5, there are no rules, methods don't need to be public,

60
00:04:16,930 --> 00:04:22,150
and we can use the assertAll method that takes a variable number of

61
00:04:22,150 --> 00:04:26,840
lambda expressions that wrap each assertion method to execute the

62
00:04:26,840 --> 00:04:30,440
null and aggregate all the possible errors.

63
00:04:30,440 --> 00:04:33,990
Next, we have methods that test timeout.

64
00:04:33,990 --> 00:04:39,740
In JUnit 4, you can specify a timeout with the Test annotation,

65
00:04:39,740 --> 00:04:42,640
but this only applies to one method.

66
00:04:42,640 --> 00:04:47,130
If you want to apply a timeout to all the methods of a class,

67
00:04:47,130 --> 00:04:53,840
you have to use a rule. In JUnit 5, you can use the assertTimeout method,

68
00:04:53,840 --> 00:04:58,990
passing the timeout as a duration object and a lambda expression or

69
00:04:58,990 --> 00:05:03,410
the method assertTimeoutPreemptively, which takes the same

70
00:05:03,410 --> 00:05:08,560
parameters, but aborts the execution of the lambda expression if it

71
00:05:08,560 --> 00:05:11,840
takes more than the specified duration.

72
00:05:11,840 --> 00:05:13,800
Also, in JUnit 5,

73
00:05:13,800 --> 00:05:18,920
there's a Timeout annotation that allows you to declare that a test,

74
00:05:18,920 --> 00:05:25,880
TestFactory, TestTemplate, or Lifecycle method should fail if its execution

75
00:05:25,880 --> 00:05:30,700
time exceeds a given duration. That defaults to a second,

76
00:05:30,700 --> 00:05:36,930
but can be configured, and it can be declared at the class level too. To test

77
00:05:36,930 --> 00:05:43,100
if an exception is strong, in JUnit 4, we have three ways. First, the old

78
00:05:43,100 --> 00:05:47,340
school way with a traditional try‑catch statement.

79
00:05:47,340 --> 00:05:51,550
If the execution flow reaches the end of the try block,

80
00:05:51,550 --> 00:05:54,160
the test fails. Otherwise,

81
00:05:54,160 --> 00:05:58,840
one or more assertions are made inside the catch block.

82
00:05:58,840 --> 00:06:04,840
The second way is with the Test annotation, declaring the expected exception.

83
00:06:04,840 --> 00:06:10,670
And the third way is to use a rule, ExpectedException, to test the type of

84
00:06:10,670 --> 00:06:14,840
the exception thrown and something about its message.

85
00:06:14,840 --> 00:06:20,370
But in JUnit 5, you can use the assertThrows method to declare that the code

86
00:06:20,370 --> 00:06:25,920
of a lambda expression can throw an exception, and this method also returns

87
00:06:25,920 --> 00:06:31,390
the exception thrown in case you want to assert something about it. About

88
00:06:31,390 --> 00:06:34,880
JUnit 4 extension model, on the one hand,

89
00:06:34,880 --> 00:06:39,950
it was based on runners and, on the other hand, on rules or class

90
00:06:39,950 --> 00:06:46,470
rules. JUnit 5 pays special attention to extensibility, and now it

91
00:06:46,470 --> 00:06:51,020
is based on interfaces that you can implement to get control on

92
00:06:51,020 --> 00:06:53,240
certain extension points.

93
00:06:53,240 --> 00:06:54,230
In addition,

94
00:06:54,230 --> 00:06:58,660
Junit 5 comes with new features not available in previous

95
00:06:58,660 --> 00:07:03,280
versions or at least not in a native or easy‑to‑implement

96
00:07:03,280 --> 00:07:09,240
way, features like nested tests, custom display names,

97
00:07:09,240 --> 00:07:10,940
Java 8 support,

98
00:07:10,940 --> 00:07:17,640
parameter injection, dynamic and parameterized tests, and meta‑annotations.

99
00:07:17,640 --> 00:07:22,240
If you're thinking about migrating all your tests to JUnit 5,

100
00:07:22,240 --> 00:07:26,860
please don't migrate them all at once. Do it gradually.

101
00:07:26,860 --> 00:07:37,000
You can run your JUnit 4 tests with the JUnit Platform and JUnit Vintage engine. In the next clip, you'll see how to do it.

