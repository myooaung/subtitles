1
00:00:00,940 --> 00:00:04,950
JUnit provides a command line Java application that allows

2
00:00:04,950 --> 00:00:08,040
you to launch tests from the console.

3
00:00:08,040 --> 00:00:11,140
I'm talking about the JUnit ConsoleLauncher,

4
00:00:11,140 --> 00:00:15,840
an executable JAR that comes with all the dependencies it could

5
00:00:15,840 --> 00:00:21,950
require to run JUnit tests, like the Jupiter API or the Vintage

6
00:00:21,950 --> 00:00:27,450
Engine. It's published in the central Maven repository under the

7
00:00:27,450 --> 00:00:29,270
JUnit Platform project.

8
00:00:29,270 --> 00:00:37,470
You can download the junit‑platform‑console‑standalone JAR directly from there,

9
00:00:37,470 --> 00:00:42,840
and you can run it like any Java application with java ‑jar,

10
00:00:42,840 --> 00:00:44,180
passing some options,

11
00:00:44,180 --> 00:00:49,840
for example the path to the compiled application and test classes

12
00:00:49,840 --> 00:00:54,920
and an option like scan‑classpath so it can automatically look for

13
00:00:54,920 --> 00:00:58,240
methods with the Test annotation.

14
00:00:58,240 --> 00:01:00,830
However, when using a lot of options,

15
00:01:00,830 --> 00:01:05,540
you may run into system limitations on the length of the command.

16
00:01:05,540 --> 00:01:11,340
So the ConsoleLauncher supports argument files for long common lines.

17
00:01:11,340 --> 00:01:16,340
For example, suppose we have a file with this content.

18
00:01:16,340 --> 00:01:22,440
The arguments within a file can be separated by new lines or spaces.

19
00:01:22,440 --> 00:01:25,310
And if an argument contains whitespace,

20
00:01:25,310 --> 00:01:31,240
the whole argument should be wrapped in double or single quotes.

21
00:01:31,240 --> 00:01:36,050
This way, the command is invoked with the @‑file argument,

22
00:01:36,050 --> 00:01:40,940
which will be expanded to the contents of the file.

23
00:01:40,940 --> 00:01:44,940
So let's see how to use this ConsoleLauncher.

24
00:01:44,940 --> 00:01:49,060
I have prepared a project with test classes we reviewed

25
00:01:49,060 --> 00:01:51,420
in the other modules of this course.

26
00:01:51,420 --> 00:01:54,440
In the root directory of the project,

27
00:01:54,440 --> 00:02:01,540
I have downloaded the junit‑platform‑console‑standalone JAR.

28
00:02:01,540 --> 00:02:06,640
So I'm going to open a terminal and build the project with Maven,

29
00:02:06,640 --> 00:02:10,840
but you can also use Gradle if you want.

30
00:02:10,840 --> 00:02:16,540
We can see that Maven found 67 tests and skipped 3.

31
00:02:16,540 --> 00:02:18,730
Okay, remember these numbers.

32
00:02:18,730 --> 00:02:23,450
The ConsoleLauncher should execute the same number of tests.

33
00:02:23,450 --> 00:02:24,160
Now,

34
00:02:24,160 --> 00:02:30,640
I am going to execute the ConsoleLauncher with java ‑jar

35
00:02:30,640 --> 00:02:35,080
junit‑platform‑console‑standalone.jar.

36
00:02:35,080 --> 00:02:42,340
And with the option ‑cp,

37
00:02:42,340 --> 00:02:46,340
I'm going to provide as classpath entries the classes of

38
00:02:46,340 --> 00:02:49,440
the application and the test classes.

39
00:02:49,440 --> 00:02:51,150
I'm on a Windows machine,

40
00:02:51,150 --> 00:02:56,040
so I have to use a semicolon as the classpath separator.

41
00:02:56,040 --> 00:03:00,360
If you're on Linux or Mac, remember to use a colon instead.

42
00:03:00,360 --> 00:03:09,840
For Gradle, you'll have to specify something like build/classes/java/main,

43
00:03:09,840 --> 00:03:19,640
build/classes/java/test, and built/resources/test.

44
00:03:19,640 --> 00:03:20,640
Finally,

45
00:03:20,640 --> 00:03:26,890
I'll use the scan‑classpath option to run all the test methods of the project,

46
00:03:26,890 --> 00:03:29,040
so let's see.

47
00:03:29,040 --> 00:03:34,640
Okay, it gave us more details, but here are our 67 tests,

48
00:03:34,640 --> 00:03:36,940
3 of which were skipped.

49
00:03:36,940 --> 00:03:42,040
The ConsoleLauncher presents a summary of the tests in a tree format.

50
00:03:42,040 --> 00:03:42,730
However,

51
00:03:42,730 --> 00:03:48,560
in this case, it is not displayed nicely. Under the hood, IntelliJ's

52
00:03:48,560 --> 00:03:53,650
terminal uses the Windows command prompt. On Mac or some Linux

53
00:03:53,650 --> 00:03:58,760
shells, the summary will be displayed nicely. But here on Windows,

54
00:03:58,760 --> 00:04:01,640
we'll have to use another terminal.

55
00:04:01,640 --> 00:04:06,280
One I like is ConEmu. It's free to use. It has a lot of

56
00:04:06,280 --> 00:04:09,440
features, and it's pretty customizable.

57
00:04:09,440 --> 00:04:13,580
I'm going to execute the command to launch the tests from

58
00:04:13,580 --> 00:04:18,470
the console. There you have it. This time, the summary is

59
00:04:18,470 --> 00:04:21,740
printed in a nice format.

60
00:04:21,740 --> 00:04:25,190
However, if we don't want this level of detail,

61
00:04:25,190 --> 00:04:32,970
we can use the details option with the value summary. You can see just the final

62
00:04:32,970 --> 00:04:38,440
summary and the statements printed to the standard output.

63
00:04:38,440 --> 00:04:40,780
You can see all the options you can pass to the

64
00:04:40,780 --> 00:04:53,000
ConsoleLauncher with the option ‑h or ‑‑help. All right, now let's review the configuration options for Gradle.

