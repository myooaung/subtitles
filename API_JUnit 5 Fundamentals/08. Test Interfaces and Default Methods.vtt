WEBVTT
1
00:00:00.940 --> 00:00:04.650
Taking advantage of the fact that in Java 8 you can have

2
00:00:04.650 --> 00:00:07.510
default and static methods in interfaces,

3
00:00:07.510 --> 00:00:13.090
with JUnit 5, you can move methods annotated with Test,

4
00:00:13.090 --> 00:00:18.430
BeforeEach, and AfterEach to an interface and have your Test class

5
00:00:18.430 --> 00:00:23.040
implemented to use those methods. We haven't revealed yet

6
00:00:23.040 --> 00:00:28.820
annotations like ParameterizedTest, ExtendWith, and the others shown

7
00:00:28.820 --> 00:00:32.120
here. But just for completion sake,

8
00:00:32.120 --> 00:00:35.770
you can also have methods with these annotations in an

9
00:00:35.770 --> 00:00:40.440
interface. And as a special case, methods annotated with

10
00:00:40.440 --> 00:00:44.340
BeforeAll and AfterAll must be static.

11
00:00:44.340 --> 00:00:49.720
This is not a problem because Java 8 interfaces also allow static

12
00:00:49.720 --> 00:00:53.200
methods. But if you want to use default methods,

13
00:00:53.200 --> 00:00:57.620
remember to annotate the interface with TestInstance,

14
00:00:57.620 --> 00:01:03.310
passing Lifecycle.PER_CLASS to change to a PER_CLASS

15
00:01:03.310 --> 00:01:06.190
lifecycle mode. So in a few words,

16
00:01:06.190 --> 00:01:10.760
anything you can put in a test class can be moved to an interface.

17
00:01:10.760 --> 00:01:14.440
For this demo, let's move some methods from the

18
00:01:14.440 --> 00:01:19.840
RewardByConversionService test class to an interface.

19
00:01:19.840 --> 00:01:30.040
Let's create an interface, TestHelper, and have our Test class implement it.

20
00:01:30.040 --> 00:01:37.440
Let's pull up some methods to the interface, like correctPoints,

21
00:01:37.440 --> 00:01:45.760
getEmptyOrder, and getSampleOrder, without making them abstract. Field

22
00:01:45.760 --> 00:01:49.740
reward is private and will not be accessible.

23
00:01:49.740 --> 00:01:53.270
Okay, we'll fix this. To get a reference to the reward

24
00:01:53.270 --> 00:01:55.930
service, I'm going to define a method,

25
00:01:55.930 --> 00:02:06.540
getRewardService, and I'll replace reward with getRewardService.

26
00:02:06.540 --> 00:02:10.060
And in my Test class, I'm going to implement this

27
00:02:10.060 --> 00:02:14.240
method to return the reward instance.

28
00:02:14.240 --> 00:02:17.280
If I run the class, yes,

29
00:02:17.280 --> 00:02:23.300
everything works fine. But let's not stop here. In case you haven't tried,

30
00:02:23.300 --> 00:02:29.640
we can have more than one method annotated with BeforeEach or AfterEach.

31
00:02:29.640 --> 00:02:37.840
So I'm going to add a BeforeEach method to the interface and run it again.

32
00:02:37.840 --> 00:02:45.640
You can see how the BeforeEach method defined in the interface is also called.

33
00:02:45.640 --> 00:02:50.260
We can also have BeforeAll and AfterAll methods in the interface.

34
00:02:50.260 --> 00:02:53.140
Just remember that they must be static.

35
00:02:53.140 --> 00:02:57.540
Or we can change the lifecycle mode to PER_CLASS to use

36
00:02:57.540 --> 00:03:09.000
default methods. But this annotation will also change the lifecycle mode of the Test class, so use it only when you really need to.

