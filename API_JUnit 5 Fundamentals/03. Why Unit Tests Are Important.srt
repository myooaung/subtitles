1
00:00:00,940 --> 00:00:05,040
Let's talk about a few of the benefits of unit tests.

2
00:00:05,040 --> 00:00:07,340
They reduce debugging time.

3
00:00:07,340 --> 00:00:12,950
A good suite of tests and some good practices can reduce bugs and debug time.

4
00:00:12,950 --> 00:00:17,140
Unit tests also work as low‑level documentation.

5
00:00:17,140 --> 00:00:19,040
They are written in code.

6
00:00:19,040 --> 00:00:20,660
Instead of reading a manual,

7
00:00:20,660 --> 00:00:25,230
you can read the code of the test to see how a library works and even

8
00:00:25,230 --> 00:00:30,440
copy/paste snippets of that code and modify them to fit your needs.

9
00:00:30,440 --> 00:00:34,740
And tests can help to improve the design of your application.

10
00:00:34,740 --> 00:00:35,940
Think about this.

11
00:00:35,940 --> 00:00:38,940
Tests are another client of your application.

12
00:00:38,940 --> 00:00:44,040
A good design makes your code accessible to those clients to your test.

13
00:00:44,040 --> 00:00:47,300
So tests can have a big influence on the design of

14
00:00:47,300 --> 00:00:49,720
your application to make it testable,

15
00:00:49,720 --> 00:00:53,200
especially when you write tests first in a practice

16
00:00:53,200 --> 00:00:55,940
called test‑driven development.

17
00:00:55,940 --> 00:01:00,740
Maybe you're thinking all right, this sounds very good. But in the real world,

18
00:01:00,740 --> 00:01:03,790
it would be very hard and time‑consuming to create

19
00:01:03,790 --> 00:01:06,240
a test suite that I can trust.

20
00:01:06,240 --> 00:01:09,940
Well, yes, it's hard, but not impossible.

21
00:01:09,940 --> 00:01:10,790
And at the end,

22
00:01:10,790 --> 00:01:15,620
you'll save time by reducing debugging time. And if done

23
00:01:15,620 --> 00:01:19,480
correctly, you can also get something that is worth more

24
00:01:19,480 --> 00:01:22,140
than all these things put together.

25
00:01:22,140 --> 00:01:23,280
Think about this.

26
00:01:23,280 --> 00:01:29,440
What if we could have tests that were as easy to run as the click of a button?

27
00:01:29,440 --> 00:01:34,840
What if the test of the whole application could run in a matter of minutes?

28
00:01:34,840 --> 00:01:39,250
What if those tests were so complete that almost no bugs could

29
00:01:39,250 --> 00:01:44,380
escape from them? What if those tests were always up to date

30
00:01:44,380 --> 00:01:47,040
with the code of the application?

31
00:01:47,040 --> 00:01:50,440
Well, something like that will give you courage,

32
00:01:50,440 --> 00:01:53,840
courage to change the code to make it better.

33
00:01:53,840 --> 00:01:58,130
Sometimes, we are afraid to make changes because if something breaks,

34
00:01:58,130 --> 00:02:01,240
it will be our fault, and we'll have to fix it.

35
00:02:01,240 --> 00:02:06,340
But over time, we'll have to make changes or add new features anyway.

36
00:02:06,340 --> 00:02:10,540
And eventually, the quality of the code will degrade.

37
00:02:10,540 --> 00:02:15,970
What do you think is better? An ugly and terrible designed system, but with

38
00:02:15,970 --> 00:02:20,020
a good suite of tests or a system perfectly designed,

39
00:02:20,020 --> 00:02:25,970
but with a horrible suite of tests or no tests at all. Over time,

40
00:02:25,970 --> 00:02:29,660
you could improve the ugly system because you won't be afraid to

41
00:02:29,660 --> 00:02:33,240
change it. But the perfectly designed system,

42
00:02:33,240 --> 00:02:36,640
it will degrade and become an ugly system,

43
00:02:36,640 --> 00:02:40,080
all because you didn't cover your back with a suite of

44
00:02:40,080 --> 00:02:48,000
tests of enough quality to give you the trust and courage to eliminate the fear of change.

