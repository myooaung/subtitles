1
00:00:00,940 --> 00:00:04,630
All right, now let's learn about test hierarchies.

2
00:00:04,630 --> 00:00:07,090
In our test class,

3
00:00:07,090 --> 00:00:10,970
I have removed all lifecycle methods except for the

4
00:00:10,970 --> 00:00:14,340
one annotated with BeforeEach.

5
00:00:14,340 --> 00:00:19,770
Let's move the setNeededPoints and setPercentage methods to the setUp

6
00:00:19,770 --> 00:00:26,240
method and delete them from the zeroCustomerPoints method.

7
00:00:26,240 --> 00:00:29,240
And what about the order creation code?

8
00:00:29,240 --> 00:00:30,350
All right,

9
00:00:30,350 --> 00:00:34,290
let's convert the order variable to the instance variable

10
00:00:34,290 --> 00:00:40,740
smallOrder and move the code to the setUp method.

11
00:00:40,740 --> 00:00:45,040
Let's run the class.

12
00:00:45,040 --> 00:00:45,430
Great.

13
00:00:45,430 --> 00:00:48,040
All tests passed.

14
00:00:48,040 --> 00:00:52,550
Now let's say I want to test the case that given a bigger order,

15
00:00:52,550 --> 00:00:57,680
when the customer has enough points, a discount should be applied.

16
00:00:57,680 --> 00:01:00,940
By the way, when working with double values,

17
00:01:00,940 --> 00:01:04,940
we can pass to the assertEquals method a delta or a

18
00:01:04,940 --> 00:01:07,940
range so that within this given range,

19
00:01:07,940 --> 00:01:12,340
the expected and actual values are considered equal.

20
00:01:12,340 --> 00:01:18,240
I just have to add another instance variable for the bigOrder

21
00:01:18,240 --> 00:01:21,560
and add the products in the setUp method.

22
00:01:21,560 --> 00:01:24,640
Let's run the class.

23
00:01:24,640 --> 00:01:25,840
Great.

24
00:01:25,840 --> 00:01:29,940
But look at our setUp method, it's bigger now.

25
00:01:29,940 --> 00:01:33,340
The problem is that it has to set up the test fixture

26
00:01:33,340 --> 00:01:37,980
for all the tests of the class, and they all need different things.

27
00:01:37,980 --> 00:01:42,540
For this reason, some people don't like to use setUp methods.

28
00:01:42,540 --> 00:01:48,420
They prefer to write a small initialization methods to call them from each test.

29
00:01:48,420 --> 00:01:50,840
But there's a better way.

30
00:01:50,840 --> 00:01:55,740
We can use non‑static inner classes annotated with the Nested

31
00:01:55,740 --> 00:01:59,940
annotation to create a test hierarchy and express the

32
00:01:59,940 --> 00:02:04,240
relationship among several groups of tests.

33
00:02:04,240 --> 00:02:08,060
I have prepared a version of this class that uses nested

34
00:02:08,060 --> 00:02:11,640
tests so you can see how this works.

35
00:02:11,640 --> 00:02:15,860
There's an inner class for the SmallOrder test and

36
00:02:15,860 --> 00:02:19,940
another inner class for the BigOrder tests.

37
00:02:19,940 --> 00:02:22,410
Let's review the SmallOrder class.

38
00:02:22,410 --> 00:02:27,240
BeforeEach and AfterEach work inside nested tests.

39
00:02:27,240 --> 00:02:28,030
However,

40
00:02:28,030 --> 00:02:33,420
BeforeAll and AfterAll methods do not work by default because static

41
00:02:33,420 --> 00:02:39,010
members in inner classes are not allowed unless you set a PER_CLASS

42
00:02:39,010 --> 00:02:43,060
lifecycle mode in the nested class. Anyway,

43
00:02:43,060 --> 00:02:44,850
inside this inner class,

44
00:02:44,850 --> 00:02:49,240
we can have tests that use members of the outer class

45
00:02:49,240 --> 00:02:52,640
initialized in the outer setUp method,

46
00:02:52,640 --> 00:02:57,090
such as the RewardService, as well as members of the inner

47
00:02:57,090 --> 00:03:01,140
class. Nesting can be arbitrarily deep.

48
00:03:01,140 --> 00:03:03,640
So inside the SmallOrder class,

49
00:03:03,640 --> 00:03:07,940
we can have another inner class and put some tests there.

50
00:03:07,940 --> 00:03:12,540
For example, for the case when the customer has zero points,

51
00:03:12,540 --> 00:03:16,440
just don't forget the Nested annotation.

52
00:03:16,440 --> 00:03:18,940
When we run the test,

53
00:03:18,940 --> 00:03:24,230
we'll see that a hierarchy has been created mirroring the

54
00:03:24,230 --> 00:03:28,390
class hierarchy. But we are not done.

55
00:03:28,390 --> 00:03:29,940
We can do better.

56
00:03:29,940 --> 00:03:33,680
We can declare custom display names with the

57
00:03:33,680 --> 00:03:37,470
DisplayName annotation that includes spaces,

58
00:03:37,470 --> 00:03:43,440
special characters, and even emojis to be displayed by test runners.

59
00:03:43,440 --> 00:03:49,540
This works at the class and method levels, so we can do something like this.

60
00:03:49,540 --> 00:03:56,340
Given that 100 points are needed for $10 or whatever,

61
00:03:56,340 --> 00:04:02,640
then 100 points should be needed for a 10% discount.

62
00:04:02,640 --> 00:04:07,200
Given there's a small order and given the customer has

63
00:04:07,200 --> 00:04:14,440
zero points, when the reward is applied,

64
00:04:14,440 --> 00:04:24,300
then discount should be zero, and then points redeemed should be zero.

65
00:04:24,300 --> 00:04:32,340
And given there's a big order, when a customer has enough points,

66
00:04:32,340 --> 00:04:36,140
then a reward should be applied.

67
00:04:36,140 --> 00:04:38,440
Now let's run it.

68
00:04:38,440 --> 00:04:45,130
This increased readability a lot, don't you think? This given when/then

69
00:04:45,130 --> 00:04:49,840
naming convention is used in behavior‑driven development,

70
00:04:49,840 --> 00:04:54,690
a software development process that emerged from test‑driven

71
00:04:54,690 --> 00:04:59,530
development and where an application is specified and designed

72
00:04:59,530 --> 00:05:02,940
by describing how it should behave.

73
00:05:02,940 --> 00:05:08,540
We already talked about the four phases of a test. But in BDD, another way to

74
00:05:08,540 --> 00:05:16,880
say arrange is given, act is called when, an assert is called then. Given, when,

75
00:05:16,880 --> 00:05:21,050
then. Given a fixture, when I perform the action,

76
00:05:21,050 --> 00:05:23,740
then I expect a result.

77
00:05:23,740 --> 00:05:28,620
Using this naming convention can help to strongly associate our test

78
00:05:28,620 --> 00:05:32,340
methods with the requirements of the application.

79
00:05:32,340 --> 00:05:35,740
However, sometimes other names are better.

80
00:05:35,740 --> 00:05:38,540
So use whatever you feel is best.

81
00:05:38,540 --> 00:05:43,340
JUnit provides two ways for changing the display name of a test.

82
00:05:43,340 --> 00:05:47,100
The DisplayName annotation allows you to declare a custom

83
00:05:47,100 --> 00:05:51,720
display name for test classes or methods. And the

84
00:05:51,720 --> 00:05:56,210
DisplayNameGeneration annotation allows you to declare a custom

85
00:05:56,210 --> 00:06:00,040
DisplayName generator for the test class.

86
00:06:00,040 --> 00:06:03,670
These generators can be created by implementing the

87
00:06:03,670 --> 00:06:07,040
interface DisplayNameGenerator.

88
00:06:07,040 --> 00:06:13,010
Some built‑in implementations are Standard, the default behavior, Simple,

89
00:06:13,010 --> 00:06:18,340
which removes trailing parentheses for methods with no parameters,

90
00:06:18,340 --> 00:06:25,340
ReplaceUnderscores, which replaces underscores in method names with spaces,

91
00:06:25,340 --> 00:06:31,260
and IndicativeSentences, which generates complete sentences by concatenating

92
00:06:31,260 --> 00:06:36,340
the names of the test methods and the enclosing classes.

93
00:06:36,340 --> 00:06:40,330
You can use the junit.jupiter.displayname.generator.default

94
00:06:40,330 --> 00:06:48,690
configuration parameter for this purpose. The only thing to remember

95
00:06:48,690 --> 00:06:53,420
is that DisplayName annotations always take precedence over

96
00:06:53,420 --> 00:06:58,340
DisplayNames generated by a DisplayName generator.

97
00:06:58,340 --> 00:07:01,430
Finally, for nested test classes,

98
00:07:01,430 --> 00:07:07,680
remember to use only non‑static inner classes. BeforeAll and AfterAll don't

99
00:07:07,680 --> 00:07:19,000
work by default, only with the PER_CLASS lifecycle mode. A nested test and the DisplayName annotation are a powerful combination.

