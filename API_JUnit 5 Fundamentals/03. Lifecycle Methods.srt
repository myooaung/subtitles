1
00:00:00,940 --> 00:00:04,080
The structure arrange, act, assert,

2
00:00:04,080 --> 00:00:09,050
annihilation can help you avoid the temptation of testing as much

3
00:00:09,050 --> 00:00:13,340
functionality as possible in a single test method.

4
00:00:13,340 --> 00:00:16,920
But let's take a closer look at the arrange phase.

5
00:00:16,920 --> 00:00:21,610
Test fixture is everything we need to execute the test,

6
00:00:21,610 --> 00:00:24,560
like creating objects and setting properties.

7
00:00:24,560 --> 00:00:28,110
In his book, xUnit Test Patterns,

8
00:00:28,110 --> 00:00:31,720
Gerard Meszaros identified three different

9
00:00:31,720 --> 00:00:35,240
approaches for managing test fixtures.

10
00:00:35,240 --> 00:00:37,900
The first one, transient fresh fixture,

11
00:00:37,900 --> 00:00:43,340
is about setting up a brand new fixture every time you run a test.

12
00:00:43,340 --> 00:00:44,440
On the other hand,

13
00:00:44,440 --> 00:00:50,040
we have persistent fixtures that survive from one test to the next.

14
00:00:50,040 --> 00:00:55,220
So we have a persistent fresh fixture, a fixture that is used for all tests,

15
00:00:55,220 --> 00:01:01,640
but is initialized BeforeEach test runs and a persistent shared fixture,

16
00:01:01,640 --> 00:01:06,440
which allows some state to accumulate from test to test.

17
00:01:06,440 --> 00:01:07,940
Here's an analogy.

18
00:01:07,940 --> 00:01:11,940
Imagine you need to write some notes on a sheet of paper.

19
00:01:11,940 --> 00:01:14,440
Using a transient fresh approach,

20
00:01:14,440 --> 00:01:19,140
you'd use a new sheet of paper for every note you have to write.

21
00:01:19,140 --> 00:01:22,250
You can also use just one sheet of paper,

22
00:01:22,250 --> 00:01:26,040
erasing a previous note to write a new one.

23
00:01:26,040 --> 00:01:30,030
In this case, you'd be using the persistent fresh approach.

24
00:01:30,030 --> 00:01:35,300
Or you could put all your notes on the same sheet of paper without erasing

25
00:01:35,300 --> 00:01:39,430
them if you prefer to use the persistent shared approach.

26
00:01:39,430 --> 00:01:41,880
To implement these approaches,

27
00:01:41,880 --> 00:01:46,520
the unit comes with some annotations that allows you to execute a

28
00:01:46,520 --> 00:01:50,640
method at some point in the lifecycle of a test.

29
00:01:50,640 --> 00:01:56,540
The annotation BeforeEach executes a method before the execution of each test,

30
00:01:56,540 --> 00:02:02,640
while AfterEach executes a method after the execution of each test.

31
00:02:02,640 --> 00:02:03,270
Also,

32
00:02:03,270 --> 00:02:08,150
you can use the BeforeAll annotation to execute a method before all

33
00:02:08,150 --> 00:02:13,540
tests are executed and the AfterAll annotation to execute a method

34
00:02:13,540 --> 00:02:16,530
after all tests have been executed.

35
00:02:16,530 --> 00:02:18,070
By default,

36
00:02:18,070 --> 00:02:23,380
the unit creates a new instance of each test class before executing

37
00:02:23,380 --> 00:02:28,790
each test method to run them in isolation and to avoid unexpected

38
00:02:28,790 --> 00:02:31,880
side effects due to instance state.

39
00:02:31,880 --> 00:02:32,860
However,

40
00:02:32,860 --> 00:02:36,370
we can change this behavior to execute all the test

41
00:02:36,370 --> 00:02:39,240
methods on the same instance.

42
00:02:39,240 --> 00:02:45,840
You can control this by annotating a test class with TestInstance and set the

43
00:02:45,840 --> 00:02:52,830
instance lifecycle mode to either PER_METHOD or PER_CLASS or by starting the

44
00:02:52,830 --> 00:02:56,230
Java Virtual Machine with the system property

45
00:02:56,230 --> 00:03:05,820
junit.jupiter.testinstance.lifecycle.default or by setting this property in a

46
00:03:05,820 --> 00:03:13,040
file named junit‑platform.properties in the root of the class path.

47
00:03:13,040 --> 00:03:16,360
Now let's see how these lifecycle annotations and the

48
00:03:16,360 --> 00:03:20,440
PER_METHOD and PER_CLASS modes work.

49
00:03:20,440 --> 00:03:24,480
I have added to our test class an annotation to indicate

50
00:03:24,480 --> 00:03:27,010
that we want a PER_METHOD lifecycle,

51
00:03:27,010 --> 00:03:31,280
just to make it explicit because this is the default behavior.

52
00:03:31,280 --> 00:03:36,280
A constructor, methods annotated with BeforeAll,

53
00:03:36,280 --> 00:03:37,640
BeforeEach,

54
00:03:37,640 --> 00:03:42,660
AfterEach, and AfterAll, and some print statements in the test

55
00:03:42,660 --> 00:03:48,300
method. SetUp and tearDown is a popular naming convention for

56
00:03:48,300 --> 00:03:52,140
before and after methods, respectively.

57
00:03:52,140 --> 00:03:58,080
Also, notice that the methods annotated with BeforeAll and AfterAll are

58
00:03:58,080 --> 00:04:03,520
static because in a per‑method lifecycle, these methods are called before

59
00:04:03,520 --> 00:04:07,740
the instance of the test class is created.

60
00:04:07,740 --> 00:04:10,640
If we run the class,

61
00:04:10,640 --> 00:04:16,520
we can see that BeforeAll is the first method called. Then, for the first test,

62
00:04:16,520 --> 00:04:19,840
the Constructor, then the BeforeEach,

63
00:04:19,840 --> 00:04:26,690
then the Test, and then AfterEach, and the cycle starts again for the next

64
00:04:26,690 --> 00:04:34,370
test, Constructor, BeforeEach, Test, and AfterEach. One more time for the

65
00:04:34,370 --> 00:04:40,340
last test, and, finally, the AfterAll method.

66
00:04:40,340 --> 00:04:48,340
Now if we change the lifecycle to our PER_CLASS mode and run the test again,

67
00:04:48,340 --> 00:04:51,840
we'll see that the constructor was executed first,

68
00:04:51,840 --> 00:04:58,370
then BeforeAll, and then for each test, BeforeEach, the Test, and

69
00:04:58,370 --> 00:05:03,140
AfterEach and, finally, the AfterAll method.

70
00:05:03,140 --> 00:05:07,820
Since the same instance is used for all the test methods and the

71
00:05:07,820 --> 00:05:12,740
instance is created before calling the BeforeAll method, when using

72
00:05:12,740 --> 00:05:18,180
the PER_CLASS lifecycle, the BeforeAll and AfterAll methods are not

73
00:05:18,180 --> 00:05:20,740
required to be a static.

74
00:05:20,740 --> 00:05:27,440
Now using Meszaros' terminology, our tests are using a transient fresh fixture.

75
00:05:27,440 --> 00:05:34,080
Each test is creating a new instance of the RewardByDiscountService class. But

76
00:05:34,080 --> 00:05:39,050
maybe it would be better to have RewardByDiscountService as an instance

77
00:05:39,050 --> 00:05:44,040
variable and create the object in the setUp method.

78
00:05:44,040 --> 00:05:52,540
Let me delete these lines from all methods, one, two, and three.

79
00:05:52,540 --> 00:05:56,190
This may look like a persistent fresh fixture because

80
00:05:56,190 --> 00:05:58,440
we are using the same reference,

81
00:05:58,440 --> 00:06:02,020
but for each test, we are getting a new instance, so

82
00:06:02,020 --> 00:06:04,740
it's still a transient fresh fixture.

83
00:06:04,740 --> 00:06:09,810
If we were using a persistent fresh fixture, we'd reset the state

84
00:06:09,810 --> 00:06:13,240
on the instance without creating a new one.

85
00:06:13,240 --> 00:06:16,640
And if we were using a persistent shared fixture,

86
00:06:16,640 --> 00:06:21,230
we've used the BeforeAll method to set it up and the

87
00:06:21,230 --> 00:06:24,040
AfterAll method to clean it up.

88
00:06:24,040 --> 00:06:26,710
However, all things being equal,

89
00:06:26,710 --> 00:06:32,240
it's better to work with transient fresh fixtures.

90
00:06:32,240 --> 00:06:36,180
Now you may be wondering, in the PER_METHOD mode, isn't a

91
00:06:36,180 --> 00:06:40,880
BeforeEach method the same as a constructor? Well,

92
00:06:40,880 --> 00:06:42,440
yes, it is.

93
00:06:42,440 --> 00:06:46,940
So can we use a constructor instead of the setUp method?

94
00:06:46,940 --> 00:06:54,260
Well, yes, we can. But using a method annotated with beforeEach is a convention.

95
00:06:54,260 --> 00:07:02,000
We usually initialize the test fixture in the setUp method and not in the constructor.

