1
00:00:00,940 --> 00:00:06,640
There was one problem in particular that slowed down JUnit 4 evolution,

2
00:00:06,640 --> 00:00:12,160
a problem caused by the fact that all JUnit functionality is enclosed in a

3
00:00:12,160 --> 00:00:17,540
single JAR file which is used by everyone but that doesn't have a flexible

4
00:00:17,540 --> 00:00:21,640
API to handle everything at the same time.

5
00:00:21,640 --> 00:00:28,390
JUnit popularity caused that all IDEs and build tools included support for it,

6
00:00:28,390 --> 00:00:31,880
great support that makes easy‑to‑execute tests.

7
00:00:31,880 --> 00:00:33,630
But on the other hand,

8
00:00:33,630 --> 00:00:38,100
this coupled IDEs and build tools to JUnit internals

9
00:00:38,100 --> 00:00:41,340
because the API wasn't designed for them.

10
00:00:41,340 --> 00:00:47,100
So they used internal JUnit classes or even reflection for their purposes.

11
00:00:47,100 --> 00:00:52,550
That locked in the development of JUnit because just changing the name of a

12
00:00:52,550 --> 00:00:56,940
private variable could break support for a new version.

13
00:00:56,940 --> 00:01:00,020
Johannes Link summarizes the situation as follows.

14
00:01:00,020 --> 00:01:03,860
"The success of JUnit as a platform prevents the

15
00:01:03,860 --> 00:01:08,260
development of JUnit as a tool." So for JUnit 5,

16
00:01:08,260 --> 00:01:11,760
they wanted to decouple test execution from other

17
00:01:11,760 --> 00:01:15,580
areas like test definition and, at the same time,

18
00:01:15,580 --> 00:01:22,040
provide support for IDEs and other tools to add features in an extensible way.

19
00:01:22,040 --> 00:01:28,540
So they decided that the new JUnit version could provide an API to write tests,

20
00:01:28,540 --> 00:01:31,840
a mechanism to discover and run tests, and,

21
00:01:31,840 --> 00:01:35,140
for tools, an API to run tests.

22
00:01:35,140 --> 00:01:37,550
This facilitates the following goals.

23
00:01:37,550 --> 00:01:43,540
Decouple of tests because if you decouple test execution from test definition,

24
00:01:43,540 --> 00:01:47,410
users can mix tests from different testing libraries,

25
00:01:47,410 --> 00:01:51,830
and those other libraries could use the test execution and

26
00:01:51,830 --> 00:01:56,100
reporting features that IDEs designed for JUnit.

27
00:01:56,100 --> 00:02:00,380
Preference for extension points instead of using runners,

28
00:02:00,380 --> 00:02:00,850
rules,

29
00:02:00,850 --> 00:02:04,630
or subclassing like in previous versions to add

30
00:02:04,630 --> 00:02:08,440
features or change the behavior of JUnit.

31
00:02:08,440 --> 00:02:09,170
This way,

32
00:02:09,170 --> 00:02:14,610
we could use extensions optionally packaged in additional libraries to keep the

33
00:02:14,610 --> 00:02:19,340
JUnit core as simple as possible and backward‑compatible.

34
00:02:19,340 --> 00:02:23,080
And make use of Java 8, features like lambdas,

35
00:02:23,080 --> 00:02:27,240
streams, and default methods in interfaces.

36
00:02:27,240 --> 00:02:30,840
JUnit 5 is the sum of three subprojects.

37
00:02:30,840 --> 00:02:36,880
JUnit platform which provides an API to launch tests from either the console,

38
00:02:36,880 --> 00:02:37,340
IDEs,

39
00:02:37,340 --> 00:02:40,740
or build tools and also for developing a testing

40
00:02:40,740 --> 00:02:43,840
framework that runs on the platform.

41
00:02:43,840 --> 00:02:47,940
JUnit Jupiter for writing tests and extensions.

42
00:02:47,940 --> 00:02:51,130
This project also provides an engine for running

43
00:02:51,130 --> 00:02:54,040
Jupyter‑based tests on the platform.

44
00:02:54,040 --> 00:02:58,100
By the way, if you are wondering why the team chose the name Jupiter,

45
00:02:58,100 --> 00:03:01,140
you'll know it by answering this question.

46
00:03:01,140 --> 00:03:05,540
What is the name of the fifth planet on our solar system?

47
00:03:05,540 --> 00:03:06,900
And JUnit Vintage,

48
00:03:06,900 --> 00:03:10,290
which provides an engine for running JUnit 3 and

49
00:03:10,290 --> 00:03:13,740
JUnit 4‑based tests on the platform.

50
00:03:13,740 --> 00:03:17,190
If you look deeply under the JUnit platform project,

51
00:03:17,190 --> 00:03:21,160
you'll find JARs like junit‑platform‑commons with

52
00:03:21,160 --> 00:03:24,340
common APIs and support utilities,

53
00:03:24,340 --> 00:03:29,360
junit‑platform‑console for discovering and executing tests from the console,

54
00:03:29,360 --> 00:03:34,590
junit‑platform‑engine, an API for test engines,

55
00:03:34,590 --> 00:03:39,760
junit‑platform‑launcher, an API for configuring and launching tests,

56
00:03:39,760 --> 00:03:43,640
typically used by IDEs and build tools,

57
00:03:43,640 --> 00:03:47,910
junit‑platform‑suite‑api with annotations for

58
00:03:47,910 --> 00:03:51,940
configuring test suites on the JUnit platform,

59
00:03:51,940 --> 00:03:57,890
and junit‑platform‑runner for executing tests in a JUnit 4 environment.

60
00:03:57,890 --> 00:04:01,230
There are others, but as you can see,

61
00:04:01,230 --> 00:04:05,320
their primary function is discovering and executing tests.

62
00:04:05,320 --> 00:04:11,240
Then we have JUnit Jupiter This project only has four JARs.

63
00:04:11,240 --> 00:04:17,040
Junit‑jupiter‑api, the API for writing tests and extensions.

64
00:04:17,040 --> 00:04:20,940
Junit‑jupiter‑engine, the engine implementation.

65
00:04:20,940 --> 00:04:26,020
Junit‑jupiter‑params, which provides support for parameterized tests.

66
00:04:26,020 --> 00:04:31,610
And junit‑jupiter‑migrationsupport that provides migration support for

67
00:04:31,610 --> 00:04:37,200
selected JUnit 4 rules to the new extension model of JUnit 5.

68
00:04:37,200 --> 00:04:41,740
And JUnit Vintage, which only contains junit‑vintage‑engine,

69
00:04:41,740 --> 00:04:48,690
the engine implementation to execute tests written in JUnit 3 or JUnit 4.

70
00:04:48,690 --> 00:04:53,940
For this, of course, you'll also need the JUnit 3 or 4 JAR.

71
00:04:53,940 --> 00:04:56,040
So this is the big picture.

72
00:04:56,040 --> 00:05:00,200
We have tests that are written using the JUnit APIs and

73
00:05:00,200 --> 00:05:07,040
are executed by the JUnit platform, which is also used by IDEs and build tools.

74
00:05:07,040 --> 00:05:08,320
Let's look closer.

75
00:05:08,320 --> 00:05:13,450
Here we have a JUnit test class, which only depends on the Jupiter API.

76
00:05:13,450 --> 00:05:17,340
It doesn't know about engines or platforms.

77
00:05:17,340 --> 00:05:20,180
Junit‑jupiter also includes an engine,

78
00:05:20,180 --> 00:05:25,540
junit‑jupiter‑engine that depends on the Jupiter API to run the tests

79
00:05:25,540 --> 00:05:29,040
and is an implementation of the platform engine.

80
00:05:29,040 --> 00:05:32,240
On the other hand, we have IDEs, build tools,

81
00:05:32,240 --> 00:05:36,520
and the console that use the platform launcher to discover,

82
00:05:36,520 --> 00:05:43,140
filter, and execute tests, and it also provides an API to the platform engine.

83
00:05:43,140 --> 00:05:45,060
Following the same architecture,

84
00:05:45,060 --> 00:05:49,830
we can have a JUnit 4 test that depends on the JUnit 4 API,

85
00:05:49,830 --> 00:05:55,540
but uses another engine implementation, junit‑vintage‑engine.

86
00:05:55,540 --> 00:05:59,630
So the JUnit platform is an abstraction that doesn't care if the

87
00:05:59,630 --> 00:06:04,040
test it's going to run is from Junit 5 or 4.

88
00:06:04,040 --> 00:06:04,720
In fact,

89
00:06:04,720 --> 00:06:09,910
other test frameworks can be plugged into this architecture by integrating

90
00:06:09,910 --> 00:06:14,640
their API and implementing an engine to talk to the platform,

91
00:06:14,640 --> 00:06:22,000
and that's the breakthrough of this release. The JUnit platform is available to everybody.

