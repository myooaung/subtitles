1
00:00:00,940 --> 00:00:04,140
We have covered a lot of topics in this module,

2
00:00:04,140 --> 00:00:06,910
but the good news is that you have learned the features of

3
00:00:06,910 --> 00:00:10,080
JUnit that you'll use most of the time.

4
00:00:10,080 --> 00:00:13,790
You learned the phases of a well‑structured test,

5
00:00:13,790 --> 00:00:17,140
arrange where the test fixture is set up,

6
00:00:17,140 --> 00:00:20,940
act where the operation under test is performed,

7
00:00:20,940 --> 00:00:25,130
assert where you check the result of the operation, and the

8
00:00:25,130 --> 00:00:29,720
often‑forgotten annihilate where you do cleanup operations or

9
00:00:29,720 --> 00:00:33,940
reset the state of the system. Remember that there are different

10
00:00:33,940 --> 00:00:38,430
approaches to manage test fixtures, transient fresh,

11
00:00:38,430 --> 00:00:43,880
persistent fresh and persistent shared, and how they can be mapped to the

12
00:00:43,880 --> 00:00:49,190
lifecycle methods that JUnit provides, BeforeAll, BeforeEach,

13
00:00:49,190 --> 00:00:51,200
AfterEach, and AfterAll.

14
00:00:51,200 --> 00:00:55,280
Also, remember that there are two lifecycle modes,

15
00:00:55,280 --> 00:00:58,840
PER_METHOD, the default one, and PER_CLASS.

16
00:00:58,840 --> 00:01:04,250
You also learned about test hierarchies and nested tests, which can help you

17
00:01:04,250 --> 00:01:09,340
manage your setUp methods and structure your test classes.

18
00:01:09,340 --> 00:01:13,140
You learned that no matter how many physical assertions you have,

19
00:01:13,140 --> 00:01:17,390
as long as they form one logical assertion and your test has a

20
00:01:17,390 --> 00:01:22,040
single act/assert pair, everything will be fine.

21
00:01:22,040 --> 00:01:25,490
You learned about the annotations to enable and disable

22
00:01:25,490 --> 00:01:29,960
tests and how to use assumptions to execute a part of a

23
00:01:29,960 --> 00:01:33,140
test based on some condition.

24
00:01:33,140 --> 00:01:38,430
You learned how JUnit allows tests BeforeEach and AfterEach and

25
00:01:38,430 --> 00:01:42,530
other annotated methods to be declared on interfaces as default

26
00:01:42,530 --> 00:01:47,810
methods and how to repeat a test a fixed number of times by using

27
00:01:47,810 --> 00:01:50,340
the annotation RepeatedTest.

28
00:01:50,340 --> 00:01:54,630
Each invocation of a RepeatedTest behaves like a regular

29
00:01:54,630 --> 00:01:58,640
test method with full lifecycle support.

30
00:01:58,640 --> 00:01:59,370
However,

31
00:01:59,370 --> 00:02:03,870
sometimes Parameterized and DynamicTest provide more

32
00:02:03,870 --> 00:02:06,740
advantages than repeating tests.

33
00:02:06,740 --> 00:02:13,000
This will be the topic of the next module. Take care, and thanks for watching.

