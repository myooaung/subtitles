WEBVTT
1
00:00:05.440 --> 00:00:06.820
Welcome back everyone.

2
00:00:06.820 --> 00:00:11.080
In this lecture we're going to just briefly show you how you could do the same API requests we did in

3
00:00:11.080 --> 00:00:12.340
the previous lecture.

4
00:00:12.340 --> 00:00:15.280
But this time directly with Python to do this.

5
00:00:15.310 --> 00:00:20.170
We're going to open up two instances of our command line so that's either the anaconda prompt or your

6
00:00:20.170 --> 00:00:22.990
terminal depending on which operating system you're using.

7
00:00:23.140 --> 00:00:28.440
And then we'll start our flask server on one and we'll open Jupiter notebook on the other.

8
00:00:28.450 --> 00:00:30.280
Let's go ahead and see how to do that.

9
00:00:30.310 --> 00:00:35.530
I'm going to first bring in my first Anaconda prompt.

10
00:00:35.620 --> 00:00:36.550
So here it is.

11
00:00:36.550 --> 00:00:43.750
Here's my instance of the Anaconda prompt and what I'm going to do here is make sure you S.D. into whatever

12
00:00:43.750 --> 00:00:48.910
directory you happen to have that my example file running it and then make sure after activating your

13
00:00:48.910 --> 00:00:50.520
environment you'll say python.

14
00:00:51.130 --> 00:00:57.910
My example go ahead and TAB autocomplete that hit enter and then after a tense flow is done loading.

15
00:00:58.030 --> 00:01:00.280
We'll have our server running to eventually at the end of this.

16
00:01:00.280 --> 00:01:05.300
You should see something that says something like running on 1 2 7 0 0 1 5 thousand.

17
00:01:05.530 --> 00:01:05.740
OK.

18
00:01:05.770 --> 00:01:11.180
So we have that running next or we're going to do is open up Jupiter notebook on another and a kind

19
00:01:11.220 --> 00:01:12.190
of prompt instance.

20
00:01:12.580 --> 00:01:17.320
So here's the other secondary and a kind the prompt instance and the notice I've already activated my

21
00:01:17.320 --> 00:01:18.190
environment.

22
00:01:18.190 --> 00:01:24.640
So then what I'm going to do here is say Jupiter notebook hit enter and I'll load up an instance of

23
00:01:24.730 --> 00:01:25.260
Jupiter.

24
00:01:25.270 --> 00:01:28.690
So you should see that pretty much automatically open your browser.

25
00:01:28.780 --> 00:01:35.430
So let's go ahead and go to our browser now gonna bring it over so here's my browser.

26
00:01:35.430 --> 00:01:37.260
Notice the different files running.

27
00:01:37.260 --> 00:01:39.920
I'm going to open up this new untitled notebook.

28
00:01:39.960 --> 00:01:41.330
It's completely blank.

29
00:01:41.490 --> 00:01:46.080
And we're going to do here is show you how you could do a request through python.

30
00:01:46.080 --> 00:01:52.550
So to do this you first need to say import requests and once you're done importing requests.

31
00:01:52.570 --> 00:01:56.920
If you get any sort of error on importing request and go ahead and just do pip install requests and

32
00:01:56.920 --> 00:01:58.990
then we'll create a flower example.

33
00:01:58.990 --> 00:02:03.190
I'm was going to copy and paste the example from the notes that we've been using.

34
00:02:03.190 --> 00:02:07.540
So this is the same sort of dictionary slash Jason object that we've been working with.

35
00:02:07.540 --> 00:02:12.730
Go ahead and create that and then to show you how you can actually create a post requests we'll do the

36
00:02:12.730 --> 00:02:21.880
following we say result is equal to requests and then you call post method off of this you pass in the

37
00:02:21.880 --> 00:02:22.470
URL.

38
00:02:22.570 --> 00:02:30.190
In this case it's H TTP forward slash forward slash local host colon five thousand and then the same

39
00:02:30.190 --> 00:02:36.970
year all we did last time which is API forward slash flower and then the Jason that we need to pass

40
00:02:36.970 --> 00:02:40.180
in is just that flower example.

41
00:02:40.180 --> 00:02:48.040
So then go ahead and put that in and then once that's done running what it does is it sends this Jason

42
00:02:48.340 --> 00:02:55.900
here with flower example as a post request to our currently running API and so we can do is check the

43
00:02:55.900 --> 00:03:02.910
status code of our result so you can say status underscore code of result and you should see a 200 there.

44
00:03:02.920 --> 00:03:04.570
That means it was successful.

45
00:03:04.570 --> 00:03:09.730
If you see something like a four or four or four hundred type error that means you need to go back and

46
00:03:09.730 --> 00:03:14.560
double check to make sure your server was running and your environment was activated.

47
00:03:14.590 --> 00:03:14.820
OK.

48
00:03:14.830 --> 00:03:21.830
So once that's done you can go ahead and just say results not text and you can see here we have the

49
00:03:21.830 --> 00:03:27.080
Tosa and then a new line printed out which means if we wanted to we could just print out the resulting

50
00:03:27.080 --> 00:03:28.830
text and it looks like this.

51
00:03:28.850 --> 00:03:32.440
So Tosa and from this you have a string they can do whatever you want with.

52
00:03:32.850 --> 00:03:40.290
OK so that's it for the basics of programmatically requesting a post to our API.

53
00:03:40.400 --> 00:03:46.390
Coming up next we're going to now take our flask application and combine it with a front end.

54
00:03:46.430 --> 00:03:51.840
Each team out what form that way a non-technical user can actually interactive our site.

55
00:03:51.890 --> 00:03:52.940
I'll see you at the next lecture.
