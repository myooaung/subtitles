1
00:00:05,410 --> 00:00:06,520
Welcome back everyone.

2
00:00:06,520 --> 00:00:11,800
In this lecture we're going to focus on the deployment aspect of connecting our model to some front

3
00:00:11,830 --> 00:00:12,090
end.

4
00:00:12,100 --> 00:00:17,830
H team L that way any user whether or not they're technical can just go to this Web site and then feed

5
00:00:17,830 --> 00:00:19,750
in their data and actually get back.

6
00:00:19,750 --> 00:00:25,680
Prediction so we're gonna focus again on connecting that flask app and tents for a model to an HD e-mail

7
00:00:25,690 --> 00:00:28,530
form so any user can interact with the model.

8
00:00:28,630 --> 00:00:33,730
Please note that in order to fully understand this section you do need to have a basic understanding

9
00:00:33,730 --> 00:00:35,910
of each HTML and ginger template.

10
00:00:35,950 --> 00:00:40,420
If you don't have an understanding of that I would highly suggest you go take a web development course

11
00:00:40,420 --> 00:00:45,310
first maybe a flask course and then come back to the series of lectures.

12
00:00:45,310 --> 00:00:48,460
OK so let's talk about what this actually requires.

13
00:00:48,460 --> 00:00:53,190
We're going to need our application which we already have as my example dot pi.

14
00:00:53,350 --> 00:00:58,140
We're going to need to add a few things to it in order to connect it to underneath a template folder.

15
00:00:58,180 --> 00:01:03,040
We'll have to tame our files home each time out and prediction each HTML so we add a couple of things

16
00:01:03,040 --> 00:01:05,390
to the application to connect those templates.

17
00:01:05,410 --> 00:01:11,860
Let's talk about each of these aspects for the application where main thing we're going to add here

18
00:01:11,860 --> 00:01:17,800
is connecting it to H html files and then evolves using flasks create in each team a form and inject

19
00:01:17,860 --> 00:01:24,180
that each table form into the home that each tamale page then we'll use flask to accept submitted each

20
00:01:24,180 --> 00:01:30,190
team will form data then we feed that data to our model and then we'll use flask to return the prediction

21
00:01:30,220 --> 00:01:35,260
to a new page prediction that each team L which once a person hits submit on home.

22
00:01:35,260 --> 00:01:41,390
But each team l it takes them to prediction that each team out the home each team L is a very simple

23
00:01:41,390 --> 00:01:48,080
each team I'll file that uses a flask based form to accept user input and then it sends this input back

24
00:01:48,080 --> 00:01:54,080
to the flask app for processing of the return prediction function the prediction that each team l file

25
00:01:54,320 --> 00:01:56,780
simply returns back to prediction information.

26
00:01:56,780 --> 00:02:03,380
Once that prediction function has completed running now make sure to use our files as a reference.

27
00:02:03,450 --> 00:02:08,670
I should really make clear that it's extremely easy to make just even a simple typo such as an extra

28
00:02:08,670 --> 00:02:11,010
space that can break all the connections here.

29
00:02:11,370 --> 00:02:13,250
So we're dealing with a lot of different file types.

30
00:02:13,320 --> 00:02:18,600
So make sure to use our files as a reference in case you get an error along the way.

31
00:02:18,600 --> 00:02:19,980
All right let's get started.

32
00:02:20,100 --> 00:02:24,990
Well we're going to do is head back to that my example that profile that we've been playing around with

33
00:02:26,040 --> 00:02:26,320
okay.

34
00:02:26,320 --> 00:02:32,440
Here we are at my example dot pi recall currently my example that Pi has our return prediction function

35
00:02:33,010 --> 00:02:37,320
and it has essentially two routes a home page and an API page.

36
00:02:37,330 --> 00:02:41,110
However these are not actually full H came out pages.

37
00:02:41,110 --> 00:02:44,230
Instead what they do is the prediction page just returns.

38
00:02:44,230 --> 00:02:49,990
Jason and the home page for routing just has a single heading a flask app is running well we want to

39
00:02:49,990 --> 00:02:55,660
do is eventually connect both of these to some actual H tamale files to do that we first need to do

40
00:02:55,660 --> 00:02:56,620
a couple of things.

41
00:02:56,740 --> 00:03:03,030
We no longer need request or J satisfy in order for this to work because we're not actually accepting

42
00:03:03,030 --> 00:03:04,030
J son requests.

43
00:03:04,030 --> 00:03:10,150
Instead we're feeding in from an H Tamar form but that does require a couple of more imports from flask.

44
00:03:10,160 --> 00:03:16,000
We need to do is get render underscore a template which actually renders an h t email template.

45
00:03:16,240 --> 00:03:22,930
We'll still need session in order to grab session data and then we'll say you are A4 which connects

46
00:03:22,930 --> 00:03:25,830
to different URLs and that's it.

47
00:03:25,930 --> 00:03:33,550
The next thing you want to do is we'll be using a flask library called WTA forms which is just a very

48
00:03:33,550 --> 00:03:36,440
simple library for creating forms quickly a flask.

49
00:03:36,550 --> 00:03:43,000
So we'll be using that to essentially inject the form with ginger templating and we'll say from W T

50
00:03:43,270 --> 00:03:52,990
F O R M.S. W T forms import and we'll have two fields we'll have a text field and a submit field and

51
00:03:52,990 --> 00:03:56,170
we'll see later on how we actually use these essentially a text field.

52
00:03:56,170 --> 00:04:00,910
We're gonna have four empty boxes of texts that the user can type in their measurements to and then

53
00:04:00,910 --> 00:04:02,670
submit field is just a submit button.

54
00:04:03,500 --> 00:04:06,010
OK so we have those ready to go.

55
00:04:06,010 --> 00:04:11,100
Next we're going to do is we will scroll down here.

56
00:04:11,150 --> 00:04:17,270
We have our flask application in order to correctly actually get form information.

57
00:04:17,390 --> 00:04:19,990
What we need to do is set up a secret key.

58
00:04:20,150 --> 00:04:28,160
So after you create your application say app dot config and then in quotes and in all caps you say secret

59
00:04:28,370 --> 00:04:33,590
underscore key and then we set that to just an arbitrary string.

60
00:04:33,590 --> 00:04:36,160
So we'll say my secret key.

61
00:04:36,350 --> 00:04:41,780
This is typically an environment variable but for right now we're just setting it within the application.

62
00:04:41,780 --> 00:04:49,190
OK so this secret key basically allows the forms to work essentially make sure that it's not being hacked

63
00:04:49,250 --> 00:04:53,240
so to speak and that the person filling out the form is actually the person that should be viewing the

64
00:04:53,240 --> 00:04:54,250
next page.

65
00:04:54,290 --> 00:04:55,490
OK next.

66
00:04:55,490 --> 00:05:01,760
Well we need to do is create a class and you could if you want separate this out into multiple dot pi

67
00:05:01,760 --> 00:05:06,680
files but we're putting it all in the same pi file for simplicity of filming.

68
00:05:06,860 --> 00:05:09,110
But we want to do is create a form class.

69
00:05:09,110 --> 00:05:16,300
So we'll say flower form and then what we need to do is actually grab a flask form.

70
00:05:16,400 --> 00:05:24,730
So if we come back up here we're going to do one less import which is import flask underscore WTS.

71
00:05:25,130 --> 00:05:32,300
And in fact instead of importing flask we'll just say from flask underscored that bit to f import the

72
00:05:32,300 --> 00:05:34,340
flask form OK.

73
00:05:34,370 --> 00:05:37,220
So that allows us to then inherit that form class.

74
00:05:37,220 --> 00:05:46,320
So I'll scroll down here back to flower form inherit flask form and flask form is our basic form class

75
00:05:46,380 --> 00:05:49,890
that's built into this double TIFF forms library.

76
00:05:49,890 --> 00:05:52,900
And here we're going to do is construct a form.

77
00:05:53,100 --> 00:05:57,600
So there's four things you need to collect and that's simple length.

78
00:05:57,600 --> 00:06:03,200
So we'll create a text field and then here we'll give it the label of simple length

79
00:06:06,790 --> 00:06:14,980
the next thing is people with create another text field and that will say see Paul with last one or

80
00:06:14,980 --> 00:06:17,320
last two is pedal length again.

81
00:06:17,350 --> 00:06:25,280
Similarly it's just a text field with pedal length and then we have pedal with which is also just a

82
00:06:25,280 --> 00:06:25,850
text field.

83
00:06:26,990 --> 00:06:29,420
And this will say pedal width.

84
00:06:30,050 --> 00:06:35,120
So what we're doing here is we're using this flask form library to create a form of four text fields

85
00:06:35,450 --> 00:06:40,160
the text field is something that the user will then later on see in the H to AML page and we'll be for

86
00:06:40,160 --> 00:06:44,200
text fields that the input see blank space with pedal length and pedal with.

87
00:06:44,420 --> 00:06:47,980
Finally to finish off a form you need a submit button.

88
00:06:47,980 --> 00:06:53,390
So we say submit is equal to submit field and here you can just type and submit or whatever you want

89
00:06:53,390 --> 00:06:56,700
the submit button to say we'll go ahead and have it say analyze.

90
00:06:56,690 --> 00:07:02,090
You can also have it say predict and that's all we need for our form.

91
00:07:02,090 --> 00:07:02,680
Okay.

92
00:07:02,930 --> 00:07:06,050
Next is our actual home page right now.

93
00:07:06,050 --> 00:07:09,170
Right now our home page is just returning back the raw.

94
00:07:09,170 --> 00:07:15,110
Each team L code a flask app is running well we want to do is changes to actually be the form.

95
00:07:15,170 --> 00:07:22,500
So what I'll do here is I'll delete this return line and start building out my index.

96
00:07:22,550 --> 00:07:30,440
So the first thing you need to do inside this index is say form is equal to an instance of flower form.

97
00:07:30,440 --> 00:07:39,180
So this creates an instance of the form and then if the form and we'll say that validate underscore

98
00:07:39,210 --> 00:07:45,960
on submit it basically makes sure that you're actually submitting text in those form then we're actually

99
00:07:45,960 --> 00:07:47,090
going to grab data from it.

100
00:07:47,100 --> 00:07:51,190
So we'll say session.

101
00:07:51,900 --> 00:07:55,150
And it will start saving things to the current session.

102
00:07:55,350 --> 00:08:04,210
So it's a form that simple underscore length data and we're gonna do this for all four objects.

103
00:08:04,240 --> 00:08:05,990
So what are we actually doing here.

104
00:08:06,010 --> 00:08:10,610
We're creating an instance of the flower form class which we call we just created up here.

105
00:08:10,810 --> 00:08:16,480
And what the flower form class does it essentially has these four attributes really five but the main

106
00:08:16,480 --> 00:08:21,760
attributes are simple length simple with pedal link and pedal with which are obtained from these text

107
00:08:21,760 --> 00:08:22,640
fields.

108
00:08:22,660 --> 00:08:28,240
So after creating that flask form what we're doing is we're saying from that form grab that simple length

109
00:08:28,300 --> 00:08:35,330
attribute and grab the data which is just the text and then we're going to essentially copy and paste

110
00:08:35,330 --> 00:08:46,180
this four times because we're doing this for not just the simple length but also the simple with the

111
00:08:46,220 --> 00:08:54,680
change this to also with and then we're also doing it for pedal lengths so that alien and then we're

112
00:08:54,680 --> 00:08:56,000
also doing it for pedal with

113
00:08:58,830 --> 00:09:07,390
so we'll change this right here to underscore w I.D. in order to make sure this form can actually work.

114
00:09:07,390 --> 00:09:12,220
We need to make sure that the methods on this actual page are both get and post.

115
00:09:12,220 --> 00:09:18,740
We should be able to actually go back and forth with this form which means under here under root or

116
00:09:18,790 --> 00:09:27,600
we want to say is methods is equal to and then pass on a list of both get in post methods and that will

117
00:09:27,600 --> 00:09:33,300
allow our form to successfully get information from the user and then post new information either on

118
00:09:33,300 --> 00:09:34,920
the same page or on a different page.

119
00:09:34,960 --> 00:09:35,780
Okay.

120
00:09:35,910 --> 00:09:42,210
Once the user has submitted the form and it's valid so if form that valid the item is true we grab all

121
00:09:42,210 --> 00:09:47,580
that data save it to the session when the session is basically this dictionary like object then we'll

122
00:09:47,580 --> 00:09:57,100
say return and we will redirect to your URL underscore for and then we'll just pass in the string code.

123
00:09:57,100 --> 00:10:05,030
Prediction OK and we'll see where prediction comes from in just the second this redirect and this your

124
00:10:05,030 --> 00:10:11,030
URL for functionality that comes from all the way up here we have your URL for redirect.

125
00:10:11,030 --> 00:10:15,410
We'll also need to be imported so we'll say import redirect from flask as well.

126
00:10:15,920 --> 00:10:17,950
OK so we've done those imports.

127
00:10:17,960 --> 00:10:24,780
Let's come back down here and let's say this is only when the form is submitted we actually need to

128
00:10:24,780 --> 00:10:31,440
show something on the home page before they start submitting the form which means I should in line with

129
00:10:31,440 --> 00:10:41,640
this if statement say return render templates and here's or we'll say home that each time El make sure

130
00:10:41,640 --> 00:10:50,810
we spell it right and we say form is equal to okay and that's it for our home page view.

131
00:10:50,890 --> 00:10:52,620
So what's actually happening here.

132
00:10:52,660 --> 00:10:55,440
I created the home page on the home page.

133
00:10:55,450 --> 00:11:01,710
I create this new flower form which is its WTO form from flask with four text fields and a submit button.

134
00:11:01,990 --> 00:11:08,470
And then if the form is valid once that user hits the submit button I grab all those text data points

135
00:11:08,560 --> 00:11:10,540
and save them to my current session.

136
00:11:10,540 --> 00:11:15,790
The session essentially is the session object for the user that behaves like a dictionary and then we'll

137
00:11:15,790 --> 00:11:22,720
redirect for prediction and then I have this render template which renders home that h t email so I

138
00:11:22,720 --> 00:11:27,250
only redirect them if the form is validated upon submission.

139
00:11:27,250 --> 00:11:30,520
So notice I use this string code for prediction.

140
00:11:30,520 --> 00:11:37,810
That means for my other view here of app that routing what I need to do is change this to just be prediction

141
00:11:38,560 --> 00:11:39,050
here.

142
00:11:39,070 --> 00:11:47,020
That way I can connect to this your all and I'll also change just the actual routing to be prediction

143
00:11:47,550 --> 00:11:52,800
and I don't need any methods here since there's no form and no data is gonna be accepted here.

144
00:11:52,840 --> 00:11:58,120
So what is prediction actually looks like it's a pretty straight simple or first rate for I should say

145
00:11:58,570 --> 00:12:05,320
and delete this the content essentially now starts off as just an empty dictionary and then I'm going

146
00:12:05,320 --> 00:12:18,960
to say content of simple underscore length is equal to the session data for simple length but recall

147
00:12:18,960 --> 00:12:25,790
that these are text fields so I need to convert them to floats in order to pass this in as what is essentially

148
00:12:25,790 --> 00:12:29,840
a dictionary or Jason object to my return prediction function.

149
00:12:29,840 --> 00:12:37,770
So then let's do this three more times we'll go ahead and copy this paste that in and then we do that

150
00:12:38,010 --> 00:12:46,070
not just for simple length but also for simple with and not just for Poles but also the pedals as well.

151
00:12:46,090 --> 00:12:51,850
So I'm changing all these guys to match up the session data before and then this content these key codes

152
00:12:51,880 --> 00:12:53,230
need to match up.

153
00:12:53,230 --> 00:12:55,300
What if we scroll up here.

154
00:12:55,300 --> 00:12:59,410
This sample Jason expects from the return prediction function.

155
00:12:59,440 --> 00:13:04,660
So these are all being connected here and I encourage you to pause if needed.

156
00:13:04,660 --> 00:13:08,530
I know there's a lot going on here but a lot of this just repeated code.

157
00:13:09,420 --> 00:13:09,900
OK.

158
00:13:09,910 --> 00:13:12,400
And then we'll say pedal.

159
00:13:12,700 --> 00:13:20,880
And then this last one it should be pedal with so close this off pedal underscore with OK.

160
00:13:20,950 --> 00:13:22,950
So we have this empty content dictionary.

161
00:13:22,990 --> 00:13:29,110
And then what I do is I set up the content dictionary for my return prediction function and I grab all

162
00:13:29,110 --> 00:13:31,840
the session information and cast it as floats.

163
00:13:31,840 --> 00:13:39,730
And then finally I'll say results is equal to return prediction where my model is the flower model I

164
00:13:39,730 --> 00:13:48,630
loaded then I have my flower scalar and now my sample Jason is just the content that I created once

165
00:13:48,630 --> 00:13:56,190
that's done I'm going to return render template and I'll render a prediction that each team I'll file

166
00:13:57,120 --> 00:14:00,720
where results is equal to results.

167
00:14:00,720 --> 00:14:04,940
And that means results is something I can use within the prediction that each team.

168
00:14:05,070 --> 00:14:11,460
Now the next thing we need to do is connect prediction that each team L to the prediction function routing

169
00:14:12,000 --> 00:14:15,890
and then home that each team L to this index routing.

170
00:14:15,990 --> 00:14:17,700
So how do we actually do that.

171
00:14:17,700 --> 00:14:20,690
Well we actually have each team our files already prepared for you.

172
00:14:20,730 --> 00:14:24,780
And instead of kind of coding out because they're really repetitive we're just gonna show you what they

173
00:14:24,780 --> 00:14:28,260
are and how they connect to each of these each team else.

174
00:14:28,260 --> 00:14:35,670
So what I will do is I will say file open file and underneath deployment what I'm going to do is open

175
00:14:36,510 --> 00:14:40,080
underneath templates folder home and prediction.

176
00:14:40,080 --> 00:14:42,320
So it's like both of those and open them up.

177
00:14:42,360 --> 00:14:46,610
And here we have the home each team it looks like and what the prediction that each team out looks like.

178
00:14:46,620 --> 00:14:52,560
Something to note here is that they need to be located under a folder called templates all lowercase

179
00:14:52,710 --> 00:14:59,730
flask by default looks for a folder called templates to find the HTML email files that the routing functions

180
00:14:59,730 --> 00:15:00,420
refer to.

181
00:15:00,420 --> 00:15:03,650
So if you're not familiar with flask that's kind of really common.

182
00:15:03,660 --> 00:15:08,550
Even in Django that's common where the folder has to be called all underscore templates and H team email

183
00:15:08,550 --> 00:15:09,360
files go there.

184
00:15:10,020 --> 00:15:12,740
So what is the home H to Mal file looks like.

185
00:15:12,880 --> 00:15:17,750
It looks like it says flask app running and then says Please enter your flower measurements below.

186
00:15:17,890 --> 00:15:20,060
And then we create an H HTML form.

187
00:15:20,200 --> 00:15:25,750
However notice that we have essentially kind of two main things for each entry.

188
00:15:25,870 --> 00:15:32,800
We have the form the actual name of that element in the form and then label and then the form element

189
00:15:32,800 --> 00:15:33,820
itself.

190
00:15:33,820 --> 00:15:41,050
So this directly connects to if we go back to the index right here we say SGP underscore LPN that grabs

191
00:15:41,050 --> 00:15:48,160
the session data from form the ACP alien which was defined appear as an attribute SGP underscore alien

192
00:15:48,490 --> 00:15:55,690
which is what's being created on this home page of form that SGP underscore alien and these double braces

193
00:15:55,720 --> 00:15:57,730
is essentially Ginger templating.

194
00:15:57,760 --> 00:16:03,770
So notice we have this instance of the form the way form actually comes to be is that we pass back form

195
00:16:03,860 --> 00:16:11,990
is equal to form and then these actual attribute calls are coming directly from the flask form object

196
00:16:11,990 --> 00:16:16,400
here where we created these attributes of Sep length Sep with etc..

197
00:16:16,460 --> 00:16:22,370
The one thing to notice is there is a hidden tag and this is the CSR f security fix feature with which

198
00:16:22,370 --> 00:16:28,100
if you're familiar of Web Apps and forms most forms need that CSR f security feature in order to work

199
00:16:28,430 --> 00:16:33,800
which is partially the same reason we set up this secret key in order for the flask form not to give

200
00:16:33,800 --> 00:16:35,720
an error or security error.

201
00:16:35,900 --> 00:16:40,730
And at the end we have the form submit button so you can imagine you could just copy and paste this

202
00:16:40,730 --> 00:16:46,520
for as many entries as you needed where you have the label which is just this string code right here

203
00:16:46,520 --> 00:16:49,800
in the text field and then the actual entry itself.

204
00:16:49,850 --> 00:16:50,530
OK.

205
00:16:50,660 --> 00:16:56,580
So don't forget to put method POST that's the home page the prediction page is even simpler.

206
00:16:56,660 --> 00:17:01,570
We'll go ahead and return back all the items from the session saying here's the information you gave

207
00:17:01,580 --> 00:17:02,320
people length.

208
00:17:02,320 --> 00:17:07,370
Simple with pedal length and the pedal with and then you predicted flower casts is results.

209
00:17:07,370 --> 00:17:10,960
Notice the double braces their results is being returned directly from.

210
00:17:10,970 --> 00:17:16,640
If we score back down here prediction it returns back these results.

211
00:17:16,640 --> 00:17:22,580
OK so that's the connection between home but each team L to the index function and prediction that each

212
00:17:22,580 --> 00:17:27,770
time l to the prediction function go ahead and make sure you save all these changes and let's run this

213
00:17:27,770 --> 00:17:35,520
Web site to do this I'm going to open up my anaconda prompt I'm going to make sure to activate my environment

214
00:17:35,550 --> 00:17:41,070
we'll say Conda activates and then activate your tensor full environment whatever we happen to call

215
00:17:41,070 --> 00:17:48,060
it CTF to GP for me once you activate it just make sure you have all the libraries installed you can

216
00:17:48,060 --> 00:17:54,870
do pip install flask and we also introduced WTO forms which in case you don't have it in your environment

217
00:17:54,960 --> 00:18:03,870
you simply just need to type pip install and then capital flask dash WTO f notice it's a dash on underscore

218
00:18:04,380 --> 00:18:09,720
go ahead and run that already have it satisfied so I'm good to go OK next.

219
00:18:09,750 --> 00:18:12,910
Go ahead and c d to wherever you save that file.

220
00:18:12,930 --> 00:18:17,630
So for me it's under sensible to boot camp under 0 9.

221
00:18:17,940 --> 00:18:26,300
Let's go 0 9 deployment and then I should be able to type out Python space my example that pi.

222
00:18:26,370 --> 00:18:27,950
Go ahead and hit enter.

223
00:18:28,020 --> 00:18:31,820
It should load up tents float just as the did before and then notice.

224
00:18:31,830 --> 00:18:34,170
Now my server is running.

225
00:18:34,170 --> 00:18:41,820
Go ahead and open up an instance of your browser and then you should see something that looks like this.

226
00:18:41,820 --> 00:18:48,390
So here is a very simple HDMI form with no CSF no styling or anything but it should now be able to accept

227
00:18:48,390 --> 00:18:51,360
simple lengths people with total length and pedal with.

228
00:18:51,360 --> 00:18:56,720
So let's go ahead and give it some sort of pedal to predict from.

229
00:18:56,830 --> 00:18:59,610
So I'm just gonna make up some numbers here we'll see what it says.

230
00:18:59,730 --> 00:19:07,740
Let's say our super length is five pedal with is three point five pedal length let's say one point five

231
00:19:07,830 --> 00:19:13,260
and then pedal with let's say on this new flowers zero point to go ahead and then click the Submit button

232
00:19:13,260 --> 00:19:19,540
of analyse and if you did everything correctly it should then report back the information as a list

233
00:19:19,720 --> 00:19:23,350
and say you reported or predicted class was so Tosa.

234
00:19:23,350 --> 00:19:23,690
All right.

235
00:19:24,400 --> 00:19:29,980
All that's left for us is to take this web application and actually deploy it online using some sort

236
00:19:29,980 --> 00:19:34,660
of service in our case we'll use Heroku since it's free and that way any researcher out in the field

237
00:19:34,660 --> 00:19:39,670
just needs to have Internet access in order to access are deployed tensor flow model.

238
00:19:39,760 --> 00:19:42,040
We'll see you at the next lecture when we do all of this.
