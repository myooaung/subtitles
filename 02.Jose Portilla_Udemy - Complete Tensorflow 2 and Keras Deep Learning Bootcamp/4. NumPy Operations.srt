1
00:00:05,240 --> 00:00:06,390
Welcome back everyone.

2
00:00:06,410 --> 00:00:09,530
In this lecture we're going to be talking about nut pie operations.

3
00:00:09,650 --> 00:00:15,470
We'll discuss various arithmetic operations as well as some universal array functions and summary statistics

4
00:00:15,560 --> 00:00:17,210
you can use of nut pi.

5
00:00:17,270 --> 00:00:20,540
These sort of operations will easily extend to pandas as well.

6
00:00:20,540 --> 00:00:21,590
Let's get started.

7
00:00:21,590 --> 00:00:21,860
All right.

8
00:00:21,910 --> 00:00:24,040
Now I've already imported umpires MP.

9
00:00:24,050 --> 00:00:32,740
The next thing going to do is set array equal to NDP arrange zero to 10 and let's check out this classic

10
00:00:32,740 --> 00:00:33,740
three.

11
00:00:33,760 --> 00:00:39,210
Now let's quickly talk about arithmetic between arrays as well as Earth missing between a scalar with

12
00:00:39,210 --> 00:00:39,640
an array.

13
00:00:40,180 --> 00:00:46,000
If I were to take this array and say plus five what's going to happen is number I will perform this

14
00:00:46,000 --> 00:00:48,800
operation on an element by element basis.

15
00:00:48,970 --> 00:00:53,670
So it will take every number in that array and simply add a fight to it.

16
00:00:53,770 --> 00:00:59,720
And the same goes for any major functions so for example array minus two etc..

17
00:00:59,740 --> 00:01:02,650
It all happens on an element by element basis.

18
00:01:02,650 --> 00:01:08,120
Now the same thing happens when we take an array and do an operation against another tree.

19
00:01:08,200 --> 00:01:12,180
Keep in mind these arrays have to be the same shape in order for this to work.

20
00:01:12,190 --> 00:01:17,680
So if I were to take my original array and add it to itself I've essentially doubled every number in

21
00:01:17,680 --> 00:01:18,550
the array.

22
00:01:18,550 --> 00:01:24,640
And keep in mind what's gonna happen is I can do this for any sort of operation multiplication division

23
00:01:24,660 --> 00:01:25,940
et cetera.

24
00:01:26,050 --> 00:01:31,660
So if subtraction everything goes to zero something I want to point out is num pi is a little bit special

25
00:01:31,680 --> 00:01:38,530
in the way it deals with divisions by 0 4 with something like a division error.

26
00:01:38,530 --> 00:01:42,370
So what actually happens is you get a warning instead of a full error.

27
00:01:42,430 --> 00:01:48,520
For example if we take a look at my original array I have zero as one of the options.

28
00:01:48,580 --> 00:01:55,480
So if I were to say my array divided by itself I can end up getting at the very first indexed location

29
00:01:55,690 --> 00:01:57,190
zero divided by zero.

30
00:01:57,340 --> 00:02:02,710
Technically mathematically speaking this isn't really actually makes sense but if I run this notice

31
00:02:02,970 --> 00:02:05,170
num pint will still output a result.

32
00:02:05,530 --> 00:02:12,340
However it will give you a warning that some sort of invalid value was encountered during division.

33
00:02:12,340 --> 00:02:17,460
So what it does here is it replaces zero with or zero divided by zero.

34
00:02:17,470 --> 00:02:20,110
With this Nan or not a number.

35
00:02:20,110 --> 00:02:27,730
What's also interesting is if I were to try to do one divided by zero in normal python I would get a

36
00:02:27,790 --> 00:02:30,190
zero division error division by zero.

37
00:02:30,190 --> 00:02:32,760
However if this occurs within num pi.

38
00:02:33,130 --> 00:02:39,670
So if I do one divided by an array essentially taking the reciprocal of every number in this right at

39
00:02:39,670 --> 00:02:42,450
the very first element I would get one divided by zero.

40
00:02:42,550 --> 00:02:48,340
So normal Python won't let you do that but if you have num pt. what's going to happen is it will also

41
00:02:48,340 --> 00:02:53,950
report back again a warning divided by zero encountered in true divide that has a sort of placeholder

42
00:02:54,340 --> 00:02:55,720
with divided by zero.

43
00:02:55,720 --> 00:02:57,990
By saying this infinity.

44
00:02:58,090 --> 00:03:04,570
So keep in mind if you have zero being divided by something such as Zero will end up getting not a number.

45
00:03:04,660 --> 00:03:10,900
If you have some sort of element or scalar being divided by zero then we'll have this place holder of

46
00:03:10,900 --> 00:03:12,130
infinity there.

47
00:03:12,280 --> 00:03:16,400
The main thing to notice here is that num pi won't give you back a full error.

48
00:03:16,540 --> 00:03:20,920
It will only give you back warnings and it will still actually output a result.

49
00:03:20,920 --> 00:03:25,900
This could be dangerous because often we would expect our program to crash or have an error when not

50
00:03:25,900 --> 00:03:30,700
pi will kind of keep chugging along replacing this with either NAND or infinities.

51
00:03:30,700 --> 00:03:32,320
It's just something to keep in mind.

52
00:03:32,470 --> 00:03:35,600
Now pi also comes off many universal array functions.

53
00:03:35,650 --> 00:03:39,490
So we saw the basic ones that are built into python like arithmetic and division.

54
00:03:39,640 --> 00:03:43,540
But there's other things that we can easily call on every element in disarray.

55
00:03:43,570 --> 00:03:47,650
For example I could say MP security for the square root.

56
00:03:48,660 --> 00:03:53,140
And we can see here we've taken the square root of every number in that array and I can do things also

57
00:03:53,140 --> 00:03:54,740
like trigonometric functions.

58
00:03:54,790 --> 00:04:01,110
So take the sign of every number that array or take the log of every number in that array.

59
00:04:01,270 --> 00:04:06,100
And same thing here we start getting errors if we try to take the log of zero since mathematically it

60
00:04:06,100 --> 00:04:07,290
doesn't really make sense.

61
00:04:07,360 --> 00:04:08,650
Again we just get a warning.

62
00:04:08,650 --> 00:04:10,830
We don't actually get a full error.

63
00:04:10,830 --> 00:04:11,250
OK.

64
00:04:11,380 --> 00:04:16,270
So something to keep in mind there's a lot of universal array functions that are available to us in

65
00:04:16,270 --> 00:04:17,000
number pi.

66
00:04:17,080 --> 00:04:22,480
And if you go to the lecture notebook for this particular lecture we link you to this documentation

67
00:04:22,480 --> 00:04:28,060
page with if you start scrolling down you'll have a list at the bottom of all the different math operations

68
00:04:28,060 --> 00:04:33,430
trigonometric functions comparison functions et cetera that are available to you in num pi as universal

69
00:04:33,430 --> 00:04:34,300
functions.

70
00:04:34,300 --> 00:04:38,110
So we can essentially just do N.P. and then do some sort of call here.

71
00:04:38,170 --> 00:04:40,000
So that link is available to you.

72
00:04:40,010 --> 00:04:43,140
However we won't really be using too many extravagant nut pie.

73
00:04:43,150 --> 00:04:44,570
Universal function calls.

74
00:04:44,720 --> 00:04:47,740
We will be using a lot our summary statistics on arrays.

75
00:04:47,800 --> 00:04:52,030
We're often dealing with really large datasets and we want to perform some summary stats in order to

76
00:04:52,030 --> 00:04:57,180
get an idea of just the general intuition behind the dataset so we can do this.

77
00:04:57,190 --> 00:05:03,340
If I took up my original array I can call things such as some which we've seen before that actually

78
00:05:03,340 --> 00:05:08,710
just sums up every element in this array but there's other ones such as mean which takes the average

79
00:05:09,340 --> 00:05:12,470
or I can also call things like Max.

80
00:05:12,520 --> 00:05:19,320
Now there's other things like the variance and standard deviation which we'll discuss further especially

81
00:05:19,320 --> 00:05:20,720
when dealing with real data sets.

82
00:05:20,730 --> 00:05:23,910
But keep in mind there's already all built into nut pie.

83
00:05:23,940 --> 00:05:26,970
So we don't actually need to calculate those out ourselves.

84
00:05:26,970 --> 00:05:32,110
The main thing I want to point out here is that there's the components of axes logic.

85
00:05:32,190 --> 00:05:36,270
So right now we've been doing everything across this one dimensional array so make sense that if we

86
00:05:36,270 --> 00:05:41,430
some things up or take the mean it takes all the elements into account but let's go ahead and create

87
00:05:41,490 --> 00:05:48,780
a two dimensional array so I can do this by saying something like and p a range and then what I'm going

88
00:05:48,780 --> 00:05:57,780
to call here is let's say 0 through twenty five and if I run that I get these twenty five elements so

89
00:05:57,780 --> 00:06:03,870
I can reshape this to be five by five and then to get back this two dimensional array let's go in and

90
00:06:03,870 --> 00:06:12,000
say array to the is equal to any pure range which means the shape of this two dimensional array is five

91
00:06:12,000 --> 00:06:13,330
by five.

92
00:06:13,350 --> 00:06:19,980
Now I could call something like some on this and it will sum up all those numbers but let's imagine

93
00:06:19,980 --> 00:06:24,200
actually want to ticket the sum of maybe all the rows or all the columns.

94
00:06:24,240 --> 00:06:25,380
How do we actually do this.

95
00:06:25,380 --> 00:06:32,160
Well you'll notice that some actually takes in an axes parameter which means you can actually specify

96
00:06:32,190 --> 00:06:36,720
whether you want to perform this operation across the rows or across the columns.

97
00:06:36,720 --> 00:06:38,580
Keyword being a cross.

98
00:06:38,610 --> 00:06:51,330
So what I'm going to do here is say array to the dot some and I'll say axis is equal to zero.

99
00:06:51,580 --> 00:06:56,060
And the result here is 50 55 60 65 70.

100
00:06:56,200 --> 00:07:04,930
So recall when I say great to the shape the elements at index 0 is the rows so rows is represented by

101
00:07:04,930 --> 00:07:11,680
axis equal to zero which means if I were to say that sum and x is equal to zero it means perform this

102
00:07:11,680 --> 00:07:19,400
operation across the rows which gives us this result which is technically the sum of the columns.

103
00:07:19,510 --> 00:07:22,030
So that can be a little confusing for beginners.

104
00:07:22,210 --> 00:07:28,030
The fact that by saying axis is equal to zero it means perform the operation across the rows.

105
00:07:28,030 --> 00:07:38,990
Similarly I can say array to d that sum and see axes equal to 1 run that and they'll perform the operation

106
00:07:39,200 --> 00:07:46,880
across the index one of shape which is the columns so performs separation across the columns.

107
00:07:46,880 --> 00:07:53,180
So keep that in mind X is equal to zero says perform this operation across the rows axis equal to 1

108
00:07:53,180 --> 00:07:58,490
says perform this operation across the columns that cannot be confusing for beginners because they kind

109
00:07:58,490 --> 00:08:05,330
of expect the results here to be switched but the keyword remember is the operation across OK so that's

110
00:08:05,330 --> 00:08:11,180
it for this lecture we'll be using these sort of method calls and Earth method calls later on in the

111
00:08:11,180 --> 00:08:13,340
course I'll see you at the next lecture.
