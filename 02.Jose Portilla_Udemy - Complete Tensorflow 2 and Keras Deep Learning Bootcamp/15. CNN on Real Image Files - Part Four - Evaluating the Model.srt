1
00:00:05,490 --> 00:00:05,730
OK.

2
00:00:05,750 --> 00:00:07,550
So here we are back in the notebook.

3
00:00:07,550 --> 00:00:14,810
We have our model where we're going to do is say model DOT and we're going to do is say predict underscore

4
00:00:16,650 --> 00:00:23,970
generator and we're going to pass in our test image generator and then let's go ahead and just call

5
00:00:23,970 --> 00:00:26,880
this PR E.D. for predictions.

6
00:00:26,880 --> 00:00:28,140
Go ahead and run that.

7
00:00:28,140 --> 00:00:32,970
Keep in mind this usually takes a lot longer than a typical prediction because the generator has to

8
00:00:32,970 --> 00:00:37,910
actually go into a computer read and open these image files and then feed them back into your model.

9
00:00:37,920 --> 00:00:43,380
So if we take a look at the results here of pred we get what kind of looks a little strange but essentially

10
00:00:43,680 --> 00:00:47,340
you'll notice there are values between 0 and 1.

11
00:00:47,430 --> 00:00:50,090
So it actually doesn't return back the straight.

12
00:00:50,100 --> 00:00:56,250
Class calls instead it returns back the probabilities so you knows that this last one for instance is

13
00:00:56,310 --> 00:00:57,810
zero point nine seven.

14
00:00:57,810 --> 00:01:01,110
So it's ninety seven percent sure it belongs to Class 1.

15
00:01:01,110 --> 00:01:09,410
So we actually do is set predictions equal to pred greater than zero point five.

16
00:01:10,480 --> 00:01:14,160
And what's nice about this is if you take a look your predictions now.

17
00:01:14,640 --> 00:01:21,360
This is essentially just true and false statements so true and false statements are treated as zeros

18
00:01:21,450 --> 00:01:24,790
and ones in the case of null pi.

19
00:01:24,810 --> 00:01:30,150
So we can do this directly pass this in to our confusion matrix and classification report.

20
00:01:30,150 --> 00:01:35,780
So again keep in mind that pred even though it looks for some of them to be just class calls like zero

21
00:01:35,780 --> 00:01:39,230
on one they're actually a probability values.

22
00:01:39,240 --> 00:01:40,560
So keep that in mind.

23
00:01:40,590 --> 00:01:41,240
Okay.

24
00:01:41,340 --> 00:01:46,420
And if we take a look at the length of red notice for the entire test set.

25
00:01:46,520 --> 00:01:47,120
OK.

26
00:01:47,280 --> 00:01:55,740
So we're gonna do here is simply say from S.K. learn not metrics import a classification report as well

27
00:01:55,830 --> 00:01:58,500
as a confusion matrix run that.

28
00:01:58,620 --> 00:02:05,160
And then let's go ahead and print a classification report comparing our correct answers which if you

29
00:02:05,160 --> 00:02:11,490
want to get the actual classes you can say test image generator grab the actual classes and returns

30
00:02:11,580 --> 00:02:13,330
back in array of those classes.

31
00:02:13,350 --> 00:02:20,580
So that's our why test values pass those in and compare them to our predictions which recall was this

32
00:02:20,580 --> 00:02:23,280
filtered version of the actual predicted probabilities.

33
00:02:23,430 --> 00:02:29,720
So we'll grab our predictions here and put them in so we print our classification report and you should

34
00:02:29,720 --> 00:02:32,020
be getting something around 90 percent maybe a little less.

35
00:02:32,030 --> 00:02:37,040
But we can see our overall actually is eighty seven or pretty good precision recall across the board.

36
00:02:37,040 --> 00:02:42,980
If one scores pretty close to 90 percent keep in mind the defaults are going to be 50 percent accuracy.

37
00:02:42,980 --> 00:02:47,050
And the fact that this is saving a lot of time really helps.

38
00:02:47,060 --> 00:02:53,330
And what's nice about this model is the fact that it's returning predicted probability is let's say

39
00:02:53,330 --> 00:02:58,540
you wanted to implement this model in real life and actually have it aid doctors.

40
00:02:58,550 --> 00:03:05,600
So far we're saying that if we're more than 50 percent sure that our prediction is infected go ahead

41
00:03:05,600 --> 00:03:08,570
and label it as true it is infected.

42
00:03:08,570 --> 00:03:12,430
Actually we have to look back here and check the so uninfected is actually one.

43
00:03:12,500 --> 00:03:20,780
So the values go from 0 to 1 and unaffected is one which means if it's true that's a one we believe

44
00:03:20,780 --> 00:03:23,090
it to be uninfected.

45
00:03:23,090 --> 00:03:28,610
So what we're saying here is if we if we're saying with a probability of greater than 50 percent that

46
00:03:28,610 --> 00:03:32,460
it's uninfected go ahead and just say that it's unaffected.

47
00:03:32,780 --> 00:03:39,680
But really what this is going to do is serve as a model that assists a doctor so we can actually set

48
00:03:39,680 --> 00:03:41,640
the threshold higher if we want to.

49
00:03:41,780 --> 00:03:48,020
And this is where you can essentially make your own sort of precision recall tradeoff so you can maybe

50
00:03:48,020 --> 00:03:54,080
say OK I only want to maybe alert the doctor if we're 80 percent sure or something like that and have

51
00:03:54,080 --> 00:03:56,820
the doctor manually look at everything else.

52
00:03:56,840 --> 00:03:59,180
So this is something you can definitely play around with.

53
00:03:59,180 --> 00:04:03,920
And it's in poor aspect to consider in real life especially when we talk about things like what's more

54
00:04:03,920 --> 00:04:08,960
important a type 1 error or a type 2 error or a false negative or a false positive.

55
00:04:08,960 --> 00:04:12,560
And we discussed all that in the machine learning overview section of the course.

56
00:04:12,620 --> 00:04:13,580
So keep that in mind.

57
00:04:13,610 --> 00:04:18,110
This line right here even though kind of looks innocuous and just a very brief moment.

58
00:04:18,110 --> 00:04:23,240
This is actually probably one of the most important lines in this entire project because it directly

59
00:04:23,390 --> 00:04:27,650
determines your precision recall tradeoff rate.

60
00:04:27,850 --> 00:04:33,190
OK so we have a classification report and we can also perform a confusion matrix if we want to we can

61
00:04:33,190 --> 00:04:38,260
say confusion matrix pass in essentially this tuple right here.

62
00:04:38,260 --> 00:04:42,820
Go ahead just copy paste that and we can see how many or where misclassified.

63
00:04:42,820 --> 00:04:48,610
OK so once we actually take a look at that let's go ahead and show you how to predict on a single image

64
00:04:49,620 --> 00:04:52,290
if we take a look at parasol.

65
00:04:52,290 --> 00:04:59,640
This is a single image and I can actually show you that image by uploading from Kerry's pre processing

66
00:04:59,640 --> 00:05:08,730
we can say from tensor flow dark hair stop pre processing import an image function and what's kind of

67
00:05:08,730 --> 00:05:14,250
nice about this is there's this load image functionality that's actually built into tensor flow.

68
00:05:14,370 --> 00:05:20,940
Previously we were using my part limb but we can actually do this with this parasol so we can say image

69
00:05:21,060 --> 00:05:21,890
load image.

70
00:05:22,380 --> 00:05:24,490
And it actually displays an image.

71
00:05:24,510 --> 00:05:30,940
And if we check the type of what this returns it's returning back the special kind of pillow image file.

72
00:05:30,950 --> 00:05:31,730
So keep that in mind.

73
00:05:31,730 --> 00:05:33,050
Secondly not an array.

74
00:05:33,150 --> 00:05:34,980
It's kind of specialized image file.

75
00:05:35,090 --> 00:05:40,970
What we're gonna do here is what's nice about load image is not only can we provide the path but I can

76
00:05:40,970 --> 00:05:42,710
also say what's my target size.

77
00:05:42,800 --> 00:05:50,590
And in this case I can reshape by saying my target size is equal to that initial image shape I define

78
00:05:50,680 --> 00:05:52,950
of 130 by 130 by three.

79
00:05:53,020 --> 00:05:54,940
So we'll go ahead and say This is my image

80
00:05:58,350 --> 00:06:00,990
and if we take a look at my image the notebook actually displays it.

81
00:06:01,560 --> 00:06:05,010
So we think about this real world situation what's actually happening.

82
00:06:05,010 --> 00:06:11,130
The doctor is going to essentially e-mail us this PMG file we'll go ahead and either train our model

83
00:06:11,160 --> 00:06:13,420
or load up the model that already exists.

84
00:06:13,500 --> 00:06:18,510
And so now we've got this email of this PMG file we'll load it with this command image that load image

85
00:06:18,590 --> 00:06:25,380
will check what our target size was the image shape and we can always say if we want to model that summary

86
00:06:26,130 --> 00:06:32,520
run that and we can kind of examine the model that we're already working with here and then what we're

87
00:06:32,520 --> 00:06:36,970
going to do is we're going to read in this image and pass it to the model.

88
00:06:37,110 --> 00:06:38,310
So how do we actually do this.

89
00:06:38,310 --> 00:06:50,250
Well if we say image dot there is an I.M. g to array which actually transforms the specialized image

90
00:06:50,250 --> 00:06:51,790
object to an array.

91
00:06:51,930 --> 00:07:01,300
So I'll say my image array and now I have my original image which quite clearly looks like it's infected.

92
00:07:01,320 --> 00:07:09,290
Given the design and now let's actually grab my image array and there we have it where we're gonna go

93
00:07:09,290 --> 00:07:18,400
ahead and do is we're going to check the shape and notice it's 130 by 130 by three.

94
00:07:18,450 --> 00:07:25,470
So what I'm going to do here is simply resize this along the zero dimension and I can do that several

95
00:07:25,470 --> 00:07:32,130
ways I can do a reshape or what I can do is I can say NDP and it has this expand dimensions functionality

96
00:07:32,520 --> 00:07:41,520
that basically says taken that current imagery and expand it so that it has a new image along axis is

97
00:07:41,520 --> 00:07:42,150
equal to zero.

98
00:07:42,150 --> 00:07:48,780
That very first item because really what I want this shape to look like is one image by 130 by 130 by

99
00:07:48,780 --> 00:07:49,700
three color channels.

100
00:07:49,710 --> 00:07:53,970
Because the model expects batches of images even if it's just one image it needs to know that it's a

101
00:07:53,970 --> 00:07:55,410
batch of one image.

102
00:07:55,440 --> 00:08:02,400
So let's go ahead and redefine that we'll say my image Ray is equal to this guy.

103
00:08:02,440 --> 00:08:05,980
Now we check my image Ray check the shape of it.

104
00:08:06,020 --> 00:08:08,560
It's one by 130 about one three by three.

105
00:08:08,570 --> 00:08:13,940
Now it's ready for our model to predict we're predicting off a single image array not off a generator.

106
00:08:13,940 --> 00:08:21,910
So now I can just say my imagery run model predict and it predicts it to be zero which recall if we

107
00:08:21,910 --> 00:08:27,190
were to take a look at the class indices again we can do this off train image generator or test them

108
00:08:27,200 --> 00:08:29,600
a generator called Class indices.

109
00:08:29,800 --> 00:08:37,950
It believes this is a parasite cell and clearly it is in fact it was the first image we saw previously.

110
00:08:37,960 --> 00:08:38,160
OK.

111
00:08:38,170 --> 00:08:43,040
That's it for this project I hope you had a lot of fun and I hope now you explore your own image datasets

112
00:08:43,300 --> 00:08:46,240
and start training it for your own classification problems.

113
00:08:46,240 --> 00:08:48,340
Thanks and I'll see you at the next section of the course.
