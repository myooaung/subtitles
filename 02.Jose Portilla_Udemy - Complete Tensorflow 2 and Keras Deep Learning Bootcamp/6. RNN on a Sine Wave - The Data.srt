1
00:00:05,280 --> 00:00:09,100
Welcome everyone to this lecture where we're going to show you how to use a basic recurrent natural

2
00:00:09,100 --> 00:00:11,670
network on a sine wave.

3
00:00:11,890 --> 00:00:16,720
So I want to quickly talk about how training and evaluation works on recurrent natural network.

4
00:00:16,720 --> 00:00:19,750
Now recall our original data set is going to look something like this.

5
00:00:19,780 --> 00:00:22,360
We probably won't extend that all the way to 800 points.

6
00:00:22,480 --> 00:00:24,260
But here we can see a sine wave.

7
00:00:25,210 --> 00:00:30,070
So what we're going to do for a time series data is we split this into a training set and test set.

8
00:00:30,490 --> 00:00:33,990
However we don't do the random splits as we've done in the past.

9
00:00:34,000 --> 00:00:40,750
Instead we want to do is simulate what it would be like to forecast into future information.

10
00:00:40,780 --> 00:00:47,890
So we set a basically a cutoff point somewhere on our training data to specify a certain historical

11
00:00:47,890 --> 00:00:53,000
ranges or training set and a future range as our test set during training.

12
00:00:53,000 --> 00:01:00,000
What we can do is then evaluate performance on that test data so let's zoom in on this range and basically

13
00:01:00,000 --> 00:01:01,710
think about what that would look like.

14
00:01:01,710 --> 00:01:07,080
Essentially as we're training what we're doing is we're forecasting on that range and we could visualize

15
00:01:07,080 --> 00:01:12,860
this later on to see and evaluate how we're actually working or performing this forecasting.

16
00:01:13,740 --> 00:01:18,690
So eventually hopefully we get something that looks very similar to a sine wave and basically showing

17
00:01:18,690 --> 00:01:20,810
us that we have a good fit.

18
00:01:20,940 --> 00:01:25,710
So eventually once we're satisfied with the results on that test portion it'll be time to forecast into

19
00:01:25,710 --> 00:01:30,810
the unknown future and really what that means is retraining on all available data both that training

20
00:01:30,810 --> 00:01:36,820
set and the test set and then forecasting beyond the scope of the original entire dataset.

21
00:01:36,840 --> 00:01:39,270
So then that would look something in this case like this.

22
00:01:39,270 --> 00:01:44,280
Notice how now we're forecasting beyond they hundred point however and this is really the key thing

23
00:01:44,280 --> 00:01:45,110
to keep in mind.

24
00:01:45,120 --> 00:01:49,950
And something that confuses beginners is that when we're working with a real data set we would no longer

25
00:01:49,950 --> 00:01:52,340
have values to compare these predictions to.

26
00:01:52,470 --> 00:01:56,820
And we'll see that later on in this section of course when we actually forecast on real time serious

27
00:01:56,820 --> 00:01:57,630
data.

28
00:01:57,630 --> 00:02:01,910
OK so let's see how we can actually do this all of for full 2.0 and cares.

29
00:02:01,950 --> 00:02:03,950
Let's get back to Jupiter notebook and get started.

30
00:02:04,300 --> 00:02:04,610
OK.

31
00:02:04,620 --> 00:02:09,110
First things first they've gone ahead and already imported pandas number pi and map plot lived up pi

32
00:02:09,100 --> 00:02:09,560
plot.

33
00:02:09,570 --> 00:02:13,320
And keep in mind depending on your version of Jupiter you may need to add in this magic line of map

34
00:02:13,320 --> 00:02:14,640
plot lib in line.

35
00:02:14,640 --> 00:02:18,450
OK let's go ahead and use num pi to create a simple sine wave.

36
00:02:18,450 --> 00:02:26,370
So the sine wave is going to have some X points and I can use MP Lynn space and we'll go from zero to

37
00:02:26,390 --> 00:02:33,120
50 and we'll ask for five hundred and one million nearly spaced points between the numbers 0 and 50.

38
00:02:33,150 --> 00:02:37,530
So if I take a look at what that actually looks like it's just the values basically between zero and

39
00:02:37,530 --> 00:02:39,740
50 spaced out by zero point one.

40
00:02:39,930 --> 00:02:47,290
So you can see that's our time step essentially and what I'm going to do is set my Y equal to the sine

41
00:02:47,290 --> 00:02:49,710
value at that particular X..

42
00:02:49,810 --> 00:02:57,520
So then for each corresponding X I've taken the sine value which means I can simply say oops PDT plot

43
00:03:00,030 --> 00:03:05,400
x versus Y and I will see my sine wave from zero to 50.

44
00:03:05,430 --> 00:03:05,740
All right.

45
00:03:06,240 --> 00:03:10,560
So now that we have our sine wave what we're going to do is we're going to turn this into a data frame

46
00:03:10,830 --> 00:03:13,160
just so it's a little easier to work with.

47
00:03:13,200 --> 00:03:16,010
So it's IDF is equal to PD.

48
00:03:17,120 --> 00:03:26,180
That data frame and say our data is equal to y in our index is equal to x and we'll label the columns

49
00:03:26,210 --> 00:03:29,770
just sine since there is essentially just one column.

50
00:03:29,780 --> 00:03:31,790
Don't forget however to pass it in as a list.

51
00:03:32,330 --> 00:03:38,120
So now I have this formatted as my nice data frame sine wave where the index corresponds to the value

52
00:03:38,120 --> 00:03:44,110
of x and the column value here for sine is just sign of this index value.

53
00:03:44,120 --> 00:03:49,160
OK so we're going to do now is do that train test split that we just discussed.

54
00:03:49,160 --> 00:03:54,050
Keep in mind this is different from our usual test train split methodology with psychic learn.

55
00:03:54,200 --> 00:03:59,460
Instead we need to decide what percentage of the end of this dataset.

56
00:03:59,480 --> 00:04:02,740
Am I going to use for my testing range.

57
00:04:02,780 --> 00:04:06,590
So again the length of my actual data firm right now is five hundred one points.

58
00:04:06,590 --> 00:04:12,900
And what you should do is depending on your actual overall goals decide on some percentage of your data

59
00:04:12,900 --> 00:04:15,520
set to be the test set.

60
00:04:15,530 --> 00:04:21,320
So what I can do here say zero point one to indicate that I want 10 percent of the end of this data

61
00:04:21,350 --> 00:04:22,550
to be my test set.

62
00:04:22,730 --> 00:04:25,170
And later on we see this with real time series data.

63
00:04:25,190 --> 00:04:28,460
We'll discuss more realistic ways of choosing your percentage.

64
00:04:28,460 --> 00:04:32,810
Right now we're kind of arbitrarily choosing 10 percent since it's just a simple sine wave.

65
00:04:32,810 --> 00:04:37,310
So then I have to figure out well what's the cutoff point for that.

66
00:04:37,310 --> 00:04:38,610
There's lots of different ways you can do this.

67
00:04:38,640 --> 00:04:43,820
We could just take the length of your data frame and then calculate test percent against it.

68
00:04:43,820 --> 00:04:50,170
And now I know that about 10 percent of the data points would be 50 data points which makes sense here.

69
00:04:50,180 --> 00:04:54,590
So I want to figure out well what index point should I be cutting this off and I'm going to show you

70
00:04:54,590 --> 00:05:00,520
this by saying test point is equal to rounding off.

71
00:05:00,770 --> 00:05:04,250
So N.P. round the length of the data frame.

72
00:05:04,580 --> 00:05:07,760
Times test percent.

73
00:05:07,760 --> 00:05:11,870
And the reason I'm doing this so formulaic CLI is that we'll be able to use all these same equations

74
00:05:12,200 --> 00:05:16,370
when we deal with real time series data which makes this easy to use and easy to repeat.

75
00:05:16,760 --> 00:05:21,740
So really we want to say here are nice frameworks for you to use regardless of your data set.

76
00:05:21,740 --> 00:05:28,310
OK so once we have our test point what we can do is if we take a look at our test point right now is

77
00:05:28,370 --> 00:05:35,900
essentially an index 50 so we'll say my test index essentially that split point index value is going

78
00:05:35,900 --> 00:05:43,890
to be the length for the data frame minus the test point value and then I'm going to round it to an

79
00:05:43,890 --> 00:05:47,760
integer so I can actually use it for indexing with pandas.

80
00:05:47,790 --> 00:05:51,150
So essentially what this calculates and it's probably something you could've done in your head as well

81
00:05:51,650 --> 00:05:53,590
is four hundred fifty one.

82
00:05:53,610 --> 00:06:00,120
So that's my cutoff point which means my training set is going to be my data frame and we'll use integer

83
00:06:00,120 --> 00:06:07,060
location slicing to say colon which means from the beginning go all the way up to but not including

84
00:06:07,060 --> 00:06:13,130
the test the next point then for my test set starting at that test.

85
00:06:13,140 --> 00:06:15,720
Index point go all the way to the end.

86
00:06:15,910 --> 00:06:21,360
And now if I take a look at my data now that's my training data goes all the way to point an index point

87
00:06:21,360 --> 00:06:27,780
forty five and then my test data starts right after it at forty five point one and then goes all the

88
00:06:27,780 --> 00:06:30,230
way to the end which was 50.

89
00:06:30,240 --> 00:06:34,810
So now I've done my test train split as I would for time series data.

90
00:06:34,950 --> 00:06:40,740
Now the next step is to scalar data and this is again things are going to be a little differently than

91
00:06:40,740 --> 00:06:45,270
what we did on our artificial neural networks because of the way recurrent neural networks are actually

92
00:06:45,270 --> 00:06:48,590
going to feed output back into themselves.

93
00:06:48,600 --> 00:06:53,090
We need to actually scale this why data which is typically our label.

94
00:06:53,190 --> 00:06:59,490
Previously we saw artificial neural networks we weren't scaling the label itself but this time because

95
00:06:59,490 --> 00:07:04,180
we're feeding that input back into our own neurons it should be scaled.

96
00:07:04,410 --> 00:07:15,410
So we'll say from S K learn that pre processing import min max scalar and then we'll create an instance

97
00:07:15,410 --> 00:07:22,880
of the scalar object by saying scalar is equal to men Max scalar and then what we're going to do is

98
00:07:22,880 --> 00:07:24,680
we're going to scale with data.

99
00:07:24,680 --> 00:07:30,110
Now keep in mind we're still going to follow the rules of only fitting to our training data set which

100
00:07:30,110 --> 00:07:35,840
makes sense because in a real life situation you wouldn't have future data to scale on you wouldn't

101
00:07:35,840 --> 00:07:37,700
have next year's sales data.

102
00:07:37,840 --> 00:07:45,500
To scale on so we'll simply saying go ahead and fit to our training data and then we'll transform scaled

103
00:07:45,500 --> 00:07:46,280
versions of our data.

104
00:07:46,280 --> 00:07:54,240
So we have our scale training set which is scalar transform train and we'll do the same now for our

105
00:07:54,240 --> 00:07:55,920
scale test.

106
00:07:55,920 --> 00:08:01,420
Notice we don't fit to the test set and so we just transform on it.

107
00:08:01,470 --> 00:08:01,850
All right.

108
00:08:02,020 --> 00:08:08,500
So the next step is going to be to take these training batches and actually transform them in a way

109
00:08:08,860 --> 00:08:10,000
that makes sense.

110
00:08:10,000 --> 00:08:15,430
Essentially a sequence of historical labels and then some points into the future and we can do that

111
00:08:15,550 --> 00:08:21,190
through the time series generator object that's actually built into the caris pre processing sequence

112
00:08:21,190 --> 00:08:22,150
library.

113
00:08:22,150 --> 00:08:26,260
So we're in continue right where we left off in the next lecture to learn how to use this time series

114
00:08:26,350 --> 00:08:27,850
generator class.

115
00:08:27,850 --> 00:08:28,410
I'll see it there.
