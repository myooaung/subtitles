WEBVTT
1
00:00:05.230 --> 00:00:06.270
Welcome back everyone to.

2
00:00:06.280 --> 00:00:09.420
Part two of tech generation of Python and cares.

3
00:00:09.640 --> 00:00:15.610
In part two we're going to focus on text processing which is a vector rising the actual text data essentially

4
00:00:15.910 --> 00:00:21.340
making dictionaries that can go back and forth between the actual character and it's encoded integer.

5
00:00:21.580 --> 00:00:25.420
And then we'll go to the next part which is creating batches.

6
00:00:25.420 --> 00:00:27.670
Let's head back to the notebook where we left off last time.

7
00:00:28.160 --> 00:00:28.440
OK.

8
00:00:28.450 --> 00:00:31.690
Here we are at the notebook where we left off last time.

9
00:00:31.690 --> 00:00:38.410
Recall that previously we went ahead and created a set of the characters and then sorted it to basically

10
00:00:38.410 --> 00:00:39.370
be a sorted list.

11
00:00:39.390 --> 00:00:45.970
And I have this vocab list and I have all the characters that are used in William Shakespeare's works

12
00:00:46.150 --> 00:00:48.520
and I have this list and what I really want to do.

13
00:00:48.520 --> 00:00:53.910
Essentially assign a number for every item in this list or every character in this list.

14
00:00:54.040 --> 00:00:58.930
And I can call enumerate on vocab and then what that essentially does.

15
00:00:59.030 --> 00:01:06.340
If I say four pair and enumerate vocab let's go ahead and print out that pair and what it does is it

16
00:01:06.340 --> 00:01:11.070
returns these tuples as you probably already know where we have this number and the character.

17
00:01:11.260 --> 00:01:17.620
So let's just go ahead and use this logic to essentially generate a dictionary that goes from a character

18
00:01:18.100 --> 00:01:28.170
to some sort of index code so to do that all I need to say is character to I.A. or index is equal to

19
00:01:28.260 --> 00:01:31.050
I do dictionary comprehension for this.

20
00:01:31.140 --> 00:01:38.430
So I will say character colon i n d for i n the comma.

21
00:01:38.430 --> 00:01:44.930
Character those pairs in enumerate vocab.

22
00:01:45.250 --> 00:01:46.150
Go ahead and run that.

23
00:01:46.180 --> 00:01:49.380
And if I take a look at my character to index dictionary.

24
00:01:49.510 --> 00:01:55.080
Notice here all the characters are now the keys with some numeric indexing as the value.

25
00:01:55.180 --> 00:02:00.100
So I mean if I wanted to say what is the numeric index for capital H I could just pass it on like that

26
00:02:00.440 --> 00:02:05.860
in a return back 33 and what I want is something that essentially operates in reverse.

27
00:02:05.920 --> 00:02:15.340
So one way to do that is by doing the following I'll say index to character is equal to an umpire.

28
00:02:16.030 --> 00:02:25.640
On the vocab and now the vocab is a simple index call on this num pyrite I say index to character if

29
00:02:25.640 --> 00:02:31.970
I pass in thirty three since that was the thirty third item well after zero technically Thirty fourth

30
00:02:32.060 --> 00:02:37.380
item or thirty third indexed item in the original vocab list when it now that's an umpire.

31
00:02:37.700 --> 00:02:42.740
Or even as a list I could have easily just called it and now I get this call from index the character

32
00:02:43.250 --> 00:02:49.070
so have these two objects that easily go from character to index and index to character and now what

33
00:02:49.070 --> 00:02:57.590
I want to do is for all the texts I want to encode it to integers so let's create encoded text and set

34
00:02:57.590 --> 00:03:09.250
it equal to num pi array and then we're going to call character to index for every C or every character

35
00:03:10.060 --> 00:03:16.630
for c in the entirety of the text and recall I already read in the entire text earlier up here by saying

36
00:03:16.660 --> 00:03:20.380
text is equal to open this path to file and read it.

37
00:03:20.380 --> 00:03:25.050
So I have that entire text and this little line is going to encode it all as an umpire.

38
00:03:25.570 --> 00:03:29.680
And depending on how large of a text you're working with as well as how much RAM you have a computer.

39
00:03:29.680 --> 00:03:32.650
This may take a little bit of time but it shouldn't take too long.

40
00:03:32.730 --> 00:03:37.750
Now if I take a look at encoded text let's go ahead and look at the first.

41
00:03:37.840 --> 00:03:42.040
Well go ahead and print all of it you'll see it goes 0 1 1 1 that the thought oh wait thirty thirty

42
00:03:42.040 --> 00:03:48.030
nine twenty nine and I can check the shape of it and this will actually answer how many characters we

43
00:03:48.030 --> 00:03:50.390
had in our file.

44
00:03:50.580 --> 00:03:55.850
So we have around 5.5 million which is more enough to get useful results.

45
00:03:55.850 --> 00:03:56.450
Okay.

46
00:03:56.640 --> 00:03:59.750
So it's really cool is now we have this map and we can use.

47
00:03:59.820 --> 00:04:09.370
So for example if I had some sample text so text so I have this little sample here celery first item

48
00:04:09.380 --> 00:04:16.760
the on it what I could do is take a look at it's encoded form by saying five hundred here and I can

49
00:04:16.760 --> 00:04:18.350
see all the digits that relate to that.

50
00:04:18.890 --> 00:04:24.140
OK so I have my original text and now I have encoded it as well as created these two objects that go

51
00:04:24.140 --> 00:04:28.560
from character to this index encoding and the index encoding back to the character.

52
00:04:28.580 --> 00:04:30.830
Those are the three main things we did so far.

53
00:04:30.830 --> 00:04:33.380
Coming up next we'll focus on creating batches.

54
00:04:33.380 --> 00:04:33.890
I'll see you there.
