WEBVTT
1
00:00:05.300 --> 00:00:06.530
Welcome back everyone.

2
00:00:06.530 --> 00:00:12.770
In this lecture we're going to discuss how to work with missing data real world data sets often have

3
00:00:12.800 --> 00:00:14.020
missing data.

4
00:00:14.090 --> 00:00:18.130
Realistically speaking there are really only three ways to deal missing data.

5
00:00:18.140 --> 00:00:20.980
The first is to just leave it as missing.

6
00:00:20.990 --> 00:00:23.310
Second is to remove the missing data.

7
00:00:23.330 --> 00:00:24.990
And third is to fill in the missing data.

8
00:00:25.460 --> 00:00:28.870
Let's briefly discuss each of these strategies.

9
00:00:28.950 --> 00:00:33.570
The first strategy is to just leave in the missing data as missing and depending on the type of data

10
00:00:33.660 --> 00:00:35.460
this is often a valid choice.

11
00:00:35.460 --> 00:00:40.830
For example if you're dealing of categorical data such as the colors of houses and for some reason you

12
00:00:40.830 --> 00:00:42.710
have some missing values there.

13
00:00:42.780 --> 00:00:48.900
If there's not that many missing values you could simply just treat in the not a number or missing data

14
00:00:49.090 --> 00:00:54.360
as another category you could use your piano skills to later on replace it as a string maybe saying

15
00:00:54.360 --> 00:00:57.320
not a color or not present for categorical data.

16
00:00:57.360 --> 00:00:59.160
That's a perfectly valid choice.

17
00:00:59.160 --> 00:01:02.570
Again it really depends on the situation.

18
00:01:02.580 --> 00:01:07.470
The second option is to remove the missing data whether or not this is a valid choice really depends

19
00:01:07.530 --> 00:01:08.730
on the situation.

20
00:01:08.730 --> 00:01:13.290
The overall goal and also it strongly depends on how much data is missing.

21
00:01:13.290 --> 00:01:17.580
Let's think of it in the context of a feature column in our dataset.

22
00:01:17.580 --> 00:01:23.540
If we're missing a large percentage of this column for example let's imagine that we're missing Ninety

23
00:01:23.570 --> 00:01:28.590
five percent of all the values for this particular feature column then we're missing too much to actually

24
00:01:28.590 --> 00:01:31.620
make a reasonable guess as to what those values should be.

25
00:01:31.620 --> 00:01:35.250
So we should probably just drop that column to begin with.

26
00:01:35.250 --> 00:01:39.500
However let's imagine we're dealing with a small percentage.

27
00:01:39.650 --> 00:01:46.220
So again thinking of that feature column if we're only missing a few points off of that then it probably

28
00:01:46.220 --> 00:01:52.310
makes sense to just remove those rows that correspond to those missing points on a particular column.

29
00:01:52.310 --> 00:01:57.080
So again if you have a large percentage missing from a feature column go ahead and just remove that

30
00:01:57.080 --> 00:01:57.780
column.

31
00:01:57.840 --> 00:01:59.680
There's not enough useful information there.

32
00:01:59.870 --> 00:02:03.600
If you're only missing a few or a small percentage of values there.

33
00:02:03.770 --> 00:02:05.560
Go ahead and drop those corresponding rows.

34
00:02:05.570 --> 00:02:11.510
You're probably not gonna lose that if that much information from those extra data points finally.

35
00:02:11.570 --> 00:02:15.620
And this is usually the hardest to figure out is filling in the missing data.

36
00:02:15.620 --> 00:02:19.850
So this is where you have a non-trivial percentage is missing and also maybe the data point rows are

37
00:02:19.850 --> 00:02:24.380
really important or you'll have enough data to comfortably just drop data points.

38
00:02:24.440 --> 00:02:26.420
There's lots of strategies available here.

39
00:02:26.420 --> 00:02:32.260
Often people fill in missing data with things like the mode the mean or the median or the base it off

40
00:02:32.270 --> 00:02:35.930
in other feature column and conceive of a reason about value.

41
00:02:35.930 --> 00:02:41.150
Keep in mind there is absolutely no correct answer as to what the approach should be to fill in missing

42
00:02:41.150 --> 00:02:46.250
data because at the end of the day you're just making an educated estimate or guess as to what that

43
00:02:46.250 --> 00:02:47.760
missing data should be.

44
00:02:47.870 --> 00:02:52.820
Because by definition you are to some degree making it up maybe you're making it up based off a very

45
00:02:52.820 --> 00:02:58.280
sophisticated and smart model but you are still conceiving of something that wasn't actually there.

46
00:02:58.310 --> 00:03:03.350
So filling the filling in missing data is the hardest one to do but it's often the one that allows you

47
00:03:03.350 --> 00:03:05.830
to keep all your data which is also a nice tradeoff.

48
00:03:07.610 --> 00:03:12.260
Now a really common student question I get is what is the correct approach to actually dealing of missing

49
00:03:12.260 --> 00:03:12.610
data.

50
00:03:13.010 --> 00:03:17.840
And unfortunately the best I can say is all data sets in situations are completely different.

51
00:03:17.840 --> 00:03:20.830
So there's not a general consensus answer I can give here.

52
00:03:20.960 --> 00:03:25.550
We should do is use your common sense and more importantly think of the overall goals that you're trying

53
00:03:25.550 --> 00:03:30.260
to achieve when you're dealing with this dataset and machine learning in general to see which strategy

54
00:03:30.260 --> 00:03:31.240
makes sense.

55
00:03:31.250 --> 00:03:35.360
If you have millions of rows then it's probably not a big deal to actually just remove some of those

56
00:03:35.360 --> 00:03:37.780
rows in order to get rid of that missing data.

57
00:03:37.850 --> 00:03:41.600
If you have a really small dataset you're probably going to want to try to figure out how to fill in

58
00:03:41.600 --> 00:03:47.860
those missing values or how to be smart about it in order to leave the missing values in.

59
00:03:48.000 --> 00:03:52.270
Okay let's go ahead and see what options pan this gives us for each of these strategies.

60
00:03:52.330 --> 00:03:57.400
I'm going to head over to Jupiter notebook here I am of the Jupiter notebook.

61
00:03:57.400 --> 00:04:01.420
I've gone ahead and imported umpires and peat empanadas as Piti.

62
00:04:01.510 --> 00:04:06.430
Then I opened up our missing data notebook and I copy and paste of the contents of one of the very first

63
00:04:06.430 --> 00:04:12.370
cells here in order to create a data frame that already has some built in missing values so here.

64
00:04:12.380 --> 00:04:16.370
If I actually call the data frame and again you can copy and paste this code from the notebooks you

65
00:04:16.370 --> 00:04:17.480
provide.

66
00:04:17.480 --> 00:04:24.670
I can see I have three columns columns A B and C and the important thing to note here is that only one

67
00:04:24.670 --> 00:04:33.040
of these columns Column C still retains all its values 10 20 30 and 40 and rows 0 in rows 3 have all

68
00:04:33.040 --> 00:04:40.180
their values 1 5 and 10 and then 4 8 and 40 the rest of them we can see here have some sort of amount

69
00:04:40.330 --> 00:04:42.030
of missing data points.

70
00:04:42.040 --> 00:04:46.930
Now let's recall our three strategies again strategy number one is to simply just leave the missing

71
00:04:46.930 --> 00:04:47.400
data.

72
00:04:47.440 --> 00:04:51.970
So in that case we're pretty much already done so we'll move on to Strategy 2 which is removing the

73
00:04:51.970 --> 00:04:55.750
missing data now there's various parameters we can use for this.

74
00:04:55.750 --> 00:05:03.130
The main method call is DFT drop and a and we can see here that if we do shift tab the documentation

75
00:05:03.130 --> 00:05:07.440
docs string has axes how and threshold as the main parameters.

76
00:05:07.440 --> 00:05:12.940
It also has a subset so you can see here with the different parameters stand for axes determines whether

77
00:05:12.940 --> 00:05:15.850
you're dropping this based off the index or columns.

78
00:05:15.850 --> 00:05:17.480
How determines if you're going to do it.

79
00:05:17.500 --> 00:05:24.280
If any values are missing or if all values are missing then there's also a threshold which requires

80
00:05:24.280 --> 00:05:26.080
that many not any values.

81
00:05:26.080 --> 00:05:30.120
And then there's also a subset labels to consider along an axis.

82
00:05:30.130 --> 00:05:33.320
So if you're dropping rose these would be the list of columns to include.

83
00:05:33.610 --> 00:05:39.470
Now typically we're gonna do is drop based off columns but if we just run DFT drop N A.

84
00:05:39.580 --> 00:05:41.010
By default the axis is zero.

85
00:05:41.140 --> 00:05:46.350
So it's gonna be looking at rows so it's only to return back Lea rows where nothing is missing.

86
00:05:47.470 --> 00:05:52.800
If I say X is equal to 1 that is just going to return back the column where nothing is missing.

87
00:05:53.440 --> 00:06:04.080
I can also specify a threshold so I could do something like say Thresh is equal to two which actually

88
00:06:04.080 --> 00:06:07.380
brings back everything so we're call that threshold means.

89
00:06:07.380 --> 00:06:15.480
It requires that many non null values so must have at least two non null values and all of these columns

90
00:06:15.480 --> 00:06:20.140
actually have that column B has at least two non null values.

91
00:06:20.190 --> 00:06:23.700
But let's imagine our threshold was three.

92
00:06:23.700 --> 00:06:29.160
In that case column B no longer applies to only had two non Nono values and often what people do is

93
00:06:29.160 --> 00:06:32.030
they base this threshold off some sort of percentage.

94
00:06:32.130 --> 00:06:38.220
So maybe we can see here we want at least 25 percent of the values to be non null or something similar

95
00:06:38.220 --> 00:06:38.910
to that.

96
00:06:39.150 --> 00:06:44.100
We could just calculate that based off the length of the data frame and then maybe we say something

97
00:06:44.100 --> 00:06:52.400
like zero point to five or something of that nature OK so we can see here that we were able to drop

98
00:06:52.520 --> 00:06:57.770
based off the roads or the columns and also set off thresholds as well to say things like how like any

99
00:06:57.800 --> 00:07:03.900
or all the third strategy we discussed was actually fill in the missing data to do that.

100
00:07:03.900 --> 00:07:10.310
We can say the F dot fill and a and this is actually very flexible.

101
00:07:10.350 --> 00:07:15.530
Again it has parameters such as values methods axes in place et cetera.

102
00:07:15.660 --> 00:07:20.240
But the main way we can see it here is by saying value is equal to.

103
00:07:20.250 --> 00:07:25.200
And then just passing in full value before I run this I want to show what the original data frame looked

104
00:07:25.200 --> 00:07:26.260
like.

105
00:07:26.280 --> 00:07:32.250
So recall our original data frame here has these three missing values recall also that technically the

106
00:07:32.250 --> 00:07:36.930
data types if we were to look at them here are floats and integers.

107
00:07:37.290 --> 00:07:43.100
However I'm passing in a string as my full value so it's kind of interesting as pandas doesn't complain.

108
00:07:43.110 --> 00:07:45.890
It just says OK if that's what you want that's what you can get.

109
00:07:45.990 --> 00:07:49.020
And it went ahead and filled in those values.

110
00:07:49.020 --> 00:07:52.310
So we can do this with essentially anything we want.

111
00:07:52.310 --> 00:07:57.150
We can say the f fill value and say go ahead and make any missing points equal to zero.

112
00:07:57.300 --> 00:08:02.550
And then we have zeros and it's got to try its best to make sure that if you just set an integer zero

113
00:08:02.550 --> 00:08:03.210
here.

114
00:08:03.210 --> 00:08:06.350
But these were floating points it converts it to floating points.

115
00:08:06.420 --> 00:08:11.900
Similarly it converted five and eight here to strings in order for these fill values to actually match.

116
00:08:11.910 --> 00:08:17.340
OK so the other thing to note here is I don't have to do this across the entire data frame if I want

117
00:08:17.460 --> 00:08:24.930
I can do this based off columns themselves so I can say the F of a go ahead and fill in any missing

118
00:08:24.930 --> 00:08:29.550
values there as zero and then I get this back.

119
00:08:29.610 --> 00:08:38.580
So I could technically then do some sort of reassignment such as DCF of a is equal to DFA they fill

120
00:08:38.580 --> 00:08:43.710
in and that now has actually permanently affected my data frame so that that missing value has now been

121
00:08:43.710 --> 00:08:45.310
filled in 0 0.

122
00:08:45.330 --> 00:08:48.570
However let's imagine I want to do something maybe a little more clever.

123
00:08:48.660 --> 00:08:49.740
So I wanted to fill in.

124
00:08:49.740 --> 00:08:57.750
For example the missing values and be with the average value across be what I could do is a DSP.

125
00:08:57.820 --> 00:09:00.330
Go ahead and grab the mean there.

126
00:09:00.370 --> 00:09:01.660
No it's six point five.

127
00:09:01.720 --> 00:09:05.280
So it's essentially halfway between five and eight.

128
00:09:05.290 --> 00:09:15.650
So we're gonna to do then is say OK take DSP and then fill in a or the value to fill is equal to the

129
00:09:15.650 --> 00:09:16.010
FBI.

130
00:09:16.010 --> 00:09:19.260
That mean and this is also a really common strategy.

131
00:09:19.430 --> 00:09:27.160
And I could technically do this across an entire data frame by saying the F fill in a with D F mean.

132
00:09:27.560 --> 00:09:31.010
And notice here it fills it in with six point fives as well.

133
00:09:31.060 --> 00:09:31.390
Okay.

134
00:09:31.400 --> 00:09:34.730
And it would do that for any column that happens to be missing information.

135
00:09:34.760 --> 00:09:45.250
So if I were to essentially rerun this to get back that a missing value here and I said def filename

136
00:09:45.280 --> 00:09:53.050
with the s mean run that we can see here it fills in in the mean of 1 2 and 4 which are up to speed

137
00:09:53.050 --> 00:09:57.150
two point thirty three for that column then for column B does it with six point five.

138
00:09:57.190 --> 00:10:00.310
So does that on a per column basis which is quite nice.

139
00:10:00.340 --> 00:10:00.700
All right.

140
00:10:01.090 --> 00:10:05.110
So that's it for the three strategies of dealing of missing data with pandas.

141
00:10:05.110 --> 00:10:05.580
Thanks.

142
00:10:05.590 --> 00:10:06.700
And I'll see you at the next lecture.
