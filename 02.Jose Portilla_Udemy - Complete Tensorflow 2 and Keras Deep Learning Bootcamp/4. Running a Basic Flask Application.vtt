WEBVTT
1
00:00:05.370 --> 00:00:10.860
Welcome back everyone to this lecture where we're going to discuss a basic flask web application and

2
00:00:10.860 --> 00:00:13.790
how that relates to deployment.

3
00:00:13.810 --> 00:00:19.180
We're not going to focus on taking our model our scalar and our prediction function and deploying them

4
00:00:19.300 --> 00:00:21.300
using a flask web application.

5
00:00:21.390 --> 00:00:28.320
In case you've never heard a flask flask is essentially a python based Web application framework flask

6
00:00:28.350 --> 00:00:34.230
eases Python to handle the back end of a web application and the back end is where all our Python code

7
00:00:34.230 --> 00:00:34.800
is.

8
00:00:34.800 --> 00:00:36.070
It's where our model is running.

9
00:00:36.070 --> 00:00:41.880
That's where we load the model the scalar and our function and then later on flask allows us to do is

10
00:00:41.880 --> 00:00:44.320
then connect it to front end components.

11
00:00:44.340 --> 00:00:51.160
Those are things like h team L and CSI s and JavaScript So what is this actually going to look like.

12
00:00:51.310 --> 00:00:54.180
We're first going to construct just a basic flask app.

13
00:00:54.220 --> 00:01:00.130
So in this lecture at the end we'll actually code out a very basic class application that will just

14
00:01:00.130 --> 00:01:05.930
basically run a Web site saying the flask app is running it will have anything to do for model yet.

15
00:01:06.130 --> 00:01:11.290
Once you understand how to run the flask application we're going to integrate our tensor flow model

16
00:01:11.320 --> 00:01:17.010
the scalar and the prediction function and essentially write that into the flask application.

17
00:01:17.140 --> 00:01:23.170
Once we have that ready to go it's time to interact with the flask application and we've actually deploying

18
00:01:23.200 --> 00:01:27.730
our working model there's two ways we can do this.

19
00:01:27.730 --> 00:01:33.550
One is through an API request and we can use something like postmen which is a program we'll show you

20
00:01:33.550 --> 00:01:40.270
later on that can send Jason information to the flask application essentially interacting with it programmatically

21
00:01:40.900 --> 00:01:46.420
and it gets back a result from the model such as set Tosa and we can do this with Python as well we

22
00:01:46.420 --> 00:01:51.490
can use the request library that's built into Python send that over with Jason information and then

23
00:01:51.490 --> 00:01:57.370
get back a result once you understand how to do that we're going to connect the flask application to

24
00:01:57.370 --> 00:01:59.740
a front and each team I'll form.

25
00:01:59.890 --> 00:02:06.150
So the way this works is a user will actually visit what looks to be a Web site with an H tamale form.

26
00:02:06.610 --> 00:02:12.370
They'll provide numbers for each of the feature attributes that gets sent over to the model and then

27
00:02:12.460 --> 00:02:18.420
the model runs through its prediction and returns back on a new page what it believes the predictions

28
00:02:18.420 --> 00:02:18.940
should be.

29
00:02:18.940 --> 00:02:25.700
So the user can actually interpret that OK so let's get started with just a basic class application

30
00:02:26.150 --> 00:02:26.690
to begin.

31
00:02:26.690 --> 00:02:29.420
We first need to download a text editor.

32
00:02:29.450 --> 00:02:34.520
Now if you're familiar with any sort of web application programming you probably already have a text

33
00:02:34.580 --> 00:02:35.250
editor.

34
00:02:35.360 --> 00:02:39.470
But for our use case what we're going to be using is the sublime text editor.

35
00:02:39.500 --> 00:02:40.550
So let's show you how to get it.

36
00:02:41.200 --> 00:02:41.470
OK.

37
00:02:41.480 --> 00:02:43.260
Here I am at Google dot com.

38
00:02:43.310 --> 00:02:47.090
What you need to do in order to download the same text editor that we're going to be using to actually

39
00:02:47.090 --> 00:02:49.430
build out our that py file.

40
00:02:49.430 --> 00:02:56.060
Go ahead and just type in Sublime Text hit enter and the very first result should be deleted without

41
00:02:56.120 --> 00:02:57.690
Sublime Text dot com.

42
00:02:57.710 --> 00:02:59.210
Go ahead and click on this.

43
00:02:59.290 --> 00:03:01.440
It's essentially a text editor.

44
00:03:01.490 --> 00:03:06.280
Now previously we've been working with Python notebooks or if you've been writing stuff online.

45
00:03:06.290 --> 00:03:13.340
Google collab online notebooks to actually run our flask web application though we need to run a dot

46
00:03:13.340 --> 00:03:15.730
pie script just a Python script.

47
00:03:16.040 --> 00:03:17.890
And that's because we can't run these things.

48
00:03:17.890 --> 00:03:23.870
The Jupiter notebook because the Jupiter notebook itself runs in a browser and they'll begin to interfere

49
00:03:23.870 --> 00:03:27.620
with flask because capability to run a web application.

50
00:03:27.650 --> 00:03:34.080
So go ahead and go to sublime tech stock com and then click on download and then download the appropriate

51
00:03:34.080 --> 00:03:40.650
version of this text editor for your operating system for Mac OS Windows when the 64 bit and then Linux

52
00:03:41.160 --> 00:03:45.490
if you actually go to the Web site it should automatically detect what operating system you have.

53
00:03:45.570 --> 00:03:47.440
You should see a little download button.

54
00:03:47.590 --> 00:03:50.360
OK go ahead and download and install that.

55
00:03:50.370 --> 00:03:55.190
Keep in mind you can use any text editor you prefer for writing that pie scripts.

56
00:03:55.230 --> 00:04:00.720
So if you like visual studio if you like pie chart if you like Adam text editor those are all totally

57
00:04:00.750 --> 00:04:04.850
ok you'll just write the exact same code we write It's a sublime text.

58
00:04:04.890 --> 00:04:11.130
Now I've already downloaded Sublime Text so what I'm going to do is I'm going to open it up on my computer.

59
00:04:11.130 --> 00:04:11.390
All right.

60
00:04:11.400 --> 00:04:17.730
So here I have a sublime text opened up and what we're going to do is we're going to write a Python

61
00:04:17.790 --> 00:04:23.610
script so instead of writing stuff as a notebook instead of we'll just write it as a dot pi script so

62
00:04:23.610 --> 00:04:32.010
we can call it at the command line first thing want to do is write from flask import and then a capital

63
00:04:32.010 --> 00:04:34.170
F Type out flask.

64
00:04:34.230 --> 00:04:42.450
Now the first thing you'll notice here is that the actual syntax here isn't having any color it basically

65
00:04:42.450 --> 00:04:44.130
showing you that it's a Python script.

66
00:04:44.310 --> 00:04:46.370
And that's because we haven't saved this file.

67
00:04:46.380 --> 00:04:54.680
So after typing out that line go ahead and say file save as and then what's absolutely critical here

68
00:04:55.040 --> 00:04:58.400
is you need to save this in a location that you know.

69
00:04:58.400 --> 00:05:04.520
So I'm going to say this in the same location as all our files for the section under 0 9 deployment.

70
00:05:04.520 --> 00:05:15.690
So what I'll do here is I'm going to say this as my underscore example dot pi and then go ahead and

71
00:05:15.780 --> 00:05:17.250
save that.

72
00:05:17.250 --> 00:05:23.370
And once you save it with the DOT pie extension you should suddenly see Sublime Text code editor recognize

73
00:05:23.670 --> 00:05:25.530
that you actually have python.

74
00:05:25.590 --> 00:05:28.140
So you'll notice the highlighting occur.

75
00:05:28.240 --> 00:05:29.020
All right.

76
00:05:29.040 --> 00:05:35.250
So we're going to save from flask import flask and that's basically the first import we need to run.

77
00:05:35.250 --> 00:05:41.550
Next we create the flask application by saying app is equal to flask.

78
00:05:41.550 --> 00:05:48.330
Notice that the capital F and say underscore underscore name underscore underscore that essentially

79
00:05:48.330 --> 00:05:55.920
creates your flask application and then flask uses a routing system to display information on a page.

80
00:05:55.920 --> 00:05:58.660
And it uses this by using decorators.

81
00:05:58.710 --> 00:06:07.380
So you say at app that route and then inside of this routing function you provide the actual web domain

82
00:06:07.380 --> 00:06:08.040
path.

83
00:06:08.160 --> 00:06:11.580
If you want this to occur on just the home page the index page.

84
00:06:11.610 --> 00:06:14.690
Go ahead and just write a single flowers forward slash.

85
00:06:14.940 --> 00:06:18.960
And then write a function below this called Def index.

86
00:06:19.290 --> 00:06:25.110
And then we're going to return with this function just a header one or heading one.

87
00:06:25.140 --> 00:06:32.850
We'll say H One flask app is running and then we'll close this off.

88
00:06:32.850 --> 00:06:34.680
Notice it does all contain a Finnish string

89
00:06:38.040 --> 00:06:40.490
if this is completely unfamiliar to you.

90
00:06:40.620 --> 00:06:46.080
What this is doing as a heading one then I would highly suggest you check out a web development course

91
00:06:46.380 --> 00:06:51.230
because you should learn about web development first before trying to deploy a model.

92
00:06:51.270 --> 00:06:56.610
Again this is not a web development course here we're just discussing how to deploy a model given the

93
00:06:56.610 --> 00:06:59.370
context the already know something about web development.

94
00:06:59.520 --> 00:07:07.790
And then finally to run this file we'll say if underscore underscore name underscore underscore is equal

95
00:07:07.790 --> 00:07:15.200
to and then in quotes here you'll say underscore underscore main underscore underscore colon and then

96
00:07:15.200 --> 00:07:21.020
say app that run open and close parentheses go ahead and save that.

97
00:07:21.260 --> 00:07:26.780
Absolutely crucial that you remember to say that and then open up your command prompt.

98
00:07:26.780 --> 00:07:32.060
So again you need to make sure that you know exactly where this file is located on your computer.

99
00:07:32.060 --> 00:07:37.190
I will be able to know where it's located on your computer but again notice here I just saved that to

100
00:07:37.190 --> 00:07:39.090
my deployment location.

101
00:07:39.170 --> 00:07:44.410
So under tensor flow to boot camp under 09 deployment I now have my example dot pi.

102
00:07:44.870 --> 00:07:49.650
So let me go ahead and now open up my command prompt and run that file.

103
00:07:49.650 --> 00:07:55.790
OK now here I am at my anaconda prompt you can use your also your normal command prompt for this but

104
00:07:55.790 --> 00:07:59.300
use the same place where you've been activating your environment.

105
00:07:59.300 --> 00:08:06.890
First thing I want to do is actually activate my environment so can go ahead and say activate or kinda

106
00:08:06.980 --> 00:08:11.260
activate actually and then whatever name of your environment that you've been using.

107
00:08:11.300 --> 00:08:18.980
So I went ahead and called mine TAF to GP you hit enter notice now it's activated and then we need to

108
00:08:18.980 --> 00:08:22.040
make sure that we already have flask installed.

109
00:08:22.220 --> 00:08:27.980
So say pip install flask and then hit enter.

110
00:08:27.980 --> 00:08:31.470
In my case I have already installed it but just in case you haven't already.

111
00:08:31.490 --> 00:08:32.720
Go ahead install it.

112
00:08:32.720 --> 00:08:35.150
Remember to activate your environment first.

113
00:08:35.150 --> 00:08:41.270
Now you need to change directory to where ever you save this my example dot pi.

114
00:08:41.270 --> 00:08:47.690
So my case I'm going to see the two where I say that to you just keeps typing change directory until

115
00:08:47.690 --> 00:08:50.000
you find where you actually saved it.

116
00:08:50.120 --> 00:08:52.280
And I'm using tab to autocomplete.

117
00:08:52.280 --> 00:08:54.480
I would highly suggest you use the same.

118
00:08:54.560 --> 00:09:00.050
And now notice where I'm located I'm now located under that deployment folder where I say that that

119
00:09:00.050 --> 00:09:06.140
pi file if you saved your dot pi file to your desktop or your downloads only to change directory toward

120
00:09:06.140 --> 00:09:07.210
that is saved.

121
00:09:07.310 --> 00:09:07.870
OK.

122
00:09:08.120 --> 00:09:14.540
So now that I'm there what I'm going to do is say Python space and should now be able to start typing

123
00:09:14.600 --> 00:09:21.170
my example or my underscore example hit tab let it autocomplete if it autocomplete it for you then you're

124
00:09:21.170 --> 00:09:26.390
in the correct location if it did not autocomplete for you then you are in the incorrect location and

125
00:09:26.390 --> 00:09:32.420
then go ahead and hit enter OK immediately upon hitting enter you should see something that looks like

126
00:09:32.420 --> 00:09:37.040
this it'll give you a little warning saying its development server don't use it in a production deployment

127
00:09:37.250 --> 00:09:39.160
that's totally OK that makes sense.

128
00:09:39.170 --> 00:09:41.780
We are just developing this we haven't deployed this yet.

129
00:09:41.780 --> 00:09:46.010
Later on when we actually deploy this live web we'll show you what changes you need to make.

130
00:09:46.010 --> 00:09:52.850
The other thing you should notice here is control plus will actually quit this then kill your flask

131
00:09:52.850 --> 00:09:54.010
application.

132
00:09:54.140 --> 00:10:00.510
The other thing I notice is it says running on essentially a local connection a port five thousand.

133
00:10:00.620 --> 00:10:04.980
So we need to do is you need to take this address and type it into your browser.

134
00:10:05.150 --> 00:10:07.790
So do not use control plus C to copy this.

135
00:10:07.790 --> 00:10:09.620
Otherwise they'll quit the server.

136
00:10:09.620 --> 00:10:12.540
So go ahead and then go to your browser and type that in.

137
00:10:12.620 --> 00:10:19.280
I'll bring in my browser now and now bringing in my actual web browser at that I see that heading one

138
00:10:19.280 --> 00:10:20.960
flask app is running.

139
00:10:20.980 --> 00:10:21.320
OK.

140
00:10:21.350 --> 00:10:26.300
That means everything's working and then you can go back to your command line and do control policy

141
00:10:26.420 --> 00:10:27.980
to kill the server.

142
00:10:27.980 --> 00:10:33.260
Coming up next we're going to see how to combine this basic flask application that's turning to then

143
00:10:33.260 --> 00:10:36.810
deploy our model with our return predictions function.

144
00:10:36.830 --> 00:10:37.400
I'll see you there.
