WEBVTT
1
00:00:05.280 --> 00:00:06.720
Welcome back everyone.

2
00:00:06.720 --> 00:00:12.810
We already saw how to use a recurrent neural network for a very predictable series like a sine wave.

3
00:00:12.810 --> 00:00:18.540
Let's go ahead and expand our understanding to work with a real time series data set one that has the

4
00:00:18.540 --> 00:00:25.320
index actually as Date Time objects and we'll see how to work with it not just with recurrent Real Networks

5
00:00:25.320 --> 00:00:32.080
of kerosene tensor flow but also how to use Panda's unique timestamp capabilities to forecast timestamp

6
00:00:32.090 --> 00:00:33.770
points into the future.

7
00:00:33.780 --> 00:00:37.680
Let's head to a notebook and get started okay.

8
00:00:37.680 --> 00:00:39.260
Here I am at the notebook of.

9
00:00:39.480 --> 00:00:42.740
I've already imported pandas and empire and map published.

10
00:00:42.810 --> 00:00:44.510
Let's read in our dataset.

11
00:00:44.520 --> 00:00:51.090
We're going to be working off a data set from Fred which is if we come here to the link it's the federal

12
00:00:51.360 --> 00:00:55.830
economic database or Federal Reserve Economic database.

13
00:00:55.830 --> 00:01:02.040
So what we have here is retail sales data for clothing and clothing accessory stores.

14
00:01:02.040 --> 00:01:07.200
You can see that there's a very clear cycle and it looks like there's peaks around December which makes

15
00:01:07.200 --> 00:01:11.420
sense because that's Christmas and holiday season here in the United States.

16
00:01:11.460 --> 00:01:15.540
So we're going to see if the recurring year on that work can actually end up predicting the sort of

17
00:01:15.540 --> 00:01:19.240
seasonality just based off the historical data points.

18
00:01:19.290 --> 00:01:21.490
So we'll come back to our notebook.

19
00:01:21.580 --> 00:01:26.830
Well let's read in that data it's saved for you already underneath this data folder.

20
00:01:27.020 --> 00:01:34.280
So we'll say read in the Data folder and then has a bit of a strange name.

21
00:01:34.290 --> 00:01:38.760
It's our SCC a SSN and just go ahead and read it.

22
00:01:38.760 --> 00:01:46.620
And as such now if we just read it like this you'll notice the data frame produces this date and then

23
00:01:46.620 --> 00:01:48.630
the actual value column.

24
00:01:48.630 --> 00:01:55.080
And if we check out the information here the date is actually just read in as a string and we want it

25
00:01:55.080 --> 00:02:02.180
to be a specific date timestamp so we can make sure that by adding two more things first I can say pass

26
00:02:02.190 --> 00:02:10.390
dates is equal to true and panels will automatically look at strings that appear to be date times and

27
00:02:10.390 --> 00:02:12.960
attempt to transform them into date time objects.

28
00:02:12.960 --> 00:02:15.740
And then I actually want this date to be an index.

29
00:02:15.750 --> 00:02:21.290
So I'll say index column is equal to and then it's called date.

30
00:02:21.300 --> 00:02:24.320
So run that and Alfie run information again.

31
00:02:24.330 --> 00:02:26.330
Notice there's only one column now.

32
00:02:26.550 --> 00:02:30.820
And if we take a look at our actual index we have a date time index now.

33
00:02:30.840 --> 00:02:34.260
So the data frame now looks something like this.

34
00:02:34.260 --> 00:02:39.690
There's still just one column here except the index is now a date time index with the name date.

35
00:02:39.690 --> 00:02:48.350
Let's go ahead and just for the sake of reference rename the columns to be sales that it's easier to

36
00:02:48.350 --> 00:02:52.040
remember and let's go ahead and plot out the data.

37
00:02:52.040 --> 00:02:57.380
So we should be able to recreate the plot that's on that Web site that we just visited and the notebook

38
00:02:57.380 --> 00:03:00.020
that we provide for you has all the links and information.

39
00:03:00.230 --> 00:03:03.640
So go out and run this and we can see the data quite clearly here.

40
00:03:03.680 --> 00:03:04.400
Okay.

41
00:03:04.490 --> 00:03:09.100
So pretty much we're going to follow the exact same steps we did last time.

42
00:03:09.140 --> 00:03:14.510
So what we have to do is we have to decide where we're going to do our train test split and for something

43
00:03:14.510 --> 00:03:19.370
like this it's a lot more obvious where you should be doing your train test split.

44
00:03:19.430 --> 00:03:25.160
We should be doing a split at least a year's worth of information because there's clearly a yearly cycle

45
00:03:25.160 --> 00:03:25.790
here.

46
00:03:25.790 --> 00:03:29.130
We should try to forecast at least one of these seasonality.

47
00:03:29.420 --> 00:03:34.490
So we're going to do is let's go ahead and choose a little more than a year will choose one point five

48
00:03:34.490 --> 00:03:38.040
years or essentially 18 months.

49
00:03:38.170 --> 00:03:41.320
So we check the length of my data frame.

50
00:03:41.320 --> 00:03:42.880
Notice it's three hundred and thirty four.

51
00:03:42.890 --> 00:03:47.630
And if you look at these timestamps from the original data frame if we just show it here it's monthly

52
00:03:47.630 --> 00:03:48.330
data.

53
00:03:48.380 --> 00:03:50.280
So we have the year the month and the day.

54
00:03:50.330 --> 00:03:52.100
So we're going from month to month.

55
00:03:52.100 --> 00:03:55.760
So that means twelve rows is one year.

56
00:03:55.820 --> 00:04:00.400
So that means 18 rows is going to be one and a half years.

57
00:04:00.820 --> 00:04:06.170
So say the length of my data frame minus 18 is three sixteen.

58
00:04:06.250 --> 00:04:13.210
So we'll go ahead and say my test index is the length of my data frame minus and we'll go ahead and

59
00:04:13.210 --> 00:04:19.270
say test size that way we can edit this in the feature case we want to play around a fit but I'll say

60
00:04:19.300 --> 00:04:21.790
18 months is my test size.

61
00:04:21.790 --> 00:04:28.630
So now I have my test index and just as before we're just going to use this integer based location and

62
00:04:28.630 --> 00:04:37.150
say starting for the beginning all the way to my test index and then test the f I LFC starting out my

63
00:04:37.150 --> 00:04:45.340
test index go all the way to the end and I can see my training data goes from 1992 to 2018 sometime

64
00:04:45.340 --> 00:04:51.550
in April and then my test data starts the very next month in May of 2018 and then goes all the way to

65
00:04:51.850 --> 00:04:53.740
October of 2019.

66
00:04:53.760 --> 00:05:01.030
OK so the next step is to scale our data just as we did with that sign you saw it all data and we can

67
00:05:01.030 --> 00:05:10.440
do this pretty easily by saying from S.K. learn the pre processing import min max scalar run that and

68
00:05:10.450 --> 00:05:14.800
then we'll say scalar is equal to an instance of minimum scalar.

69
00:05:15.100 --> 00:05:20.470
And just as before we only want to fit to our training data because we don't want to assume that we'll

70
00:05:20.470 --> 00:05:26.100
have information about the future a dataset so we'll fit to our training data.

71
00:05:26.120 --> 00:05:27.880
Keep in mind you may get a warning here.

72
00:05:27.890 --> 00:05:33.980
That's totally ok and then we're going to do is create the scaled versions of our data.

73
00:05:33.980 --> 00:05:41.020
We have the scale training data which is scalar that transform train and then we'll have our scaled

74
00:05:41.030 --> 00:05:45.660
test data which is scalar that transform test.

75
00:05:46.340 --> 00:05:47.010
OK.

76
00:05:47.240 --> 00:05:48.580
The scaling is done.

77
00:05:48.620 --> 00:05:51.770
Now it's time to actually create our time series generator.

78
00:05:51.770 --> 00:05:56.720
Hopefully everything here feels really familiar given what we went over in the previous sine wave lectures

79
00:05:58.420 --> 00:06:00.450
let's import that time series generator.

80
00:06:00.460 --> 00:06:12.910
It's from tensor flow that carries that pre processing the sequence import time series generator and

81
00:06:12.920 --> 00:06:17.270
you should be using tab autocomplete just in case you do any typos here you can only just copy and paste

82
00:06:17.270 --> 00:06:18.750
from our notebook as well.

83
00:06:19.050 --> 00:06:26.080
And so we're going to do is let's go ahead and start defining our batches now something to keep in mind

84
00:06:26.080 --> 00:06:33.070
here is I will add an early stopping and a validation generator because of that I need to make sure

85
00:06:33.100 --> 00:06:38.830
that my actual length of my batch is less than the length of my test set.

86
00:06:38.860 --> 00:06:47.260
So recall that my current test set right now is 18 months so I cannot feed a batch of 18 months and

87
00:06:47.260 --> 00:06:52.870
then expect to get a prediction of the 19th month with my test set.

88
00:06:52.960 --> 00:06:56.020
So my batches should be shorter than 18.

89
00:06:56.320 --> 00:06:59.770
Now they can be 17 16 13 whatever you want.

90
00:06:59.770 --> 00:07:04.150
However a pretty reasonable choice then for the length of my batch would be twelve months because that's

91
00:07:04.150 --> 00:07:08.570
a whole year so we have length is equal to 12.

92
00:07:08.930 --> 00:07:13.080
And again the length here this represents the length of the actual batches.

93
00:07:13.250 --> 00:07:16.600
So let's create a generator and make sure we understand all of this.

94
00:07:16.700 --> 00:07:23.980
So we say Time series generator just as we did before and the source of the X points comes from skilled

95
00:07:23.980 --> 00:07:29.200
train the source of the y points is also coming from our scale training data and then the length for

96
00:07:29.200 --> 00:07:34.010
our batch is going to be equal to the length we just described here 12 months.

97
00:07:34.030 --> 00:07:40.430
And as far as how many we're going to be passing in at a time it will just be one.

98
00:07:40.540 --> 00:07:42.170
So we'll go ahead and run that.

99
00:07:42.220 --> 00:07:46.150
Let's take a look at what the very first batch looks like just to remind ourselves what's actually happening

100
00:07:46.150 --> 00:07:51.590
here we say generator of zero is equal to x y run that.

101
00:07:51.770 --> 00:07:58.020
And then what we're going to say is given the array of X and remember the skilled version zeroes or

102
00:07:58.030 --> 00:08:00.080
point two etc. This is going up.

103
00:08:00.080 --> 00:08:04.280
And notice even has that seasonality comes back down because back up again et cetera.

104
00:08:04.310 --> 00:08:13.810
And then what we want to do is predict that next value Okay so if we take a look at our skilled training

105
00:08:13.810 --> 00:08:17.000
set you can see in the beginning here we have those same values.

106
00:08:17.020 --> 00:08:19.130
And then right after zero point four one.

107
00:08:19.180 --> 00:08:24.340
So if we scroll down to zero point for one we started you know that seasonally come down to zero point

108
00:08:24.340 --> 00:08:25.400
zero two.

109
00:08:25.510 --> 00:08:26.260
And there it is.

110
00:08:26.460 --> 00:08:27.030
Okay.

111
00:08:27.160 --> 00:08:34.870
So given this batch and if we take a look at the length of X here what's the length of.

112
00:08:34.900 --> 00:08:37.900
So it has double dimensions that the length of the X inside.

113
00:08:37.930 --> 00:08:39.320
Notice that it's 12.

114
00:08:39.580 --> 00:08:42.640
So it's basically saying given the length of 12 months.

115
00:08:42.640 --> 00:08:46.390
Going to predict that 13th month okay.

116
00:08:46.540 --> 00:08:48.260
So we understand X and Y.

117
00:08:48.260 --> 00:08:52.210
It's essentially the exact same idea that we had before the sine wave.

118
00:08:52.210 --> 00:08:58.180
So what we need to do is we'll go ahead and create our model and then we will add in the early stopping

119
00:08:58.210 --> 00:09:02.200
by creating a validation generator and then we can evaluate our model.

120
00:09:02.230 --> 00:09:07.750
So we're going to do is in the very next lecture we'll finish creating the model get that early stopping

121
00:09:07.960 --> 00:09:11.990
callback create the validation generator and then evaluate our model's performance.

122
00:09:12.340 --> 00:09:18.100
If you have any questions on this make sure to check out our notebook and also make sure to just understand

123
00:09:18.100 --> 00:09:22.810
what these variables are actually representing the length is the length of the batch here the batch

124
00:09:22.810 --> 00:09:27.730
size is the fact that we're just essentially getting one array for X and one array or one value for

125
00:09:27.730 --> 00:09:33.430
y if you're to change this to something like two then you would get two sets for X and two sets for

126
00:09:33.430 --> 00:09:39.010
YS but in my experience when it comes to time series sequences it really works best with a batch size

127
00:09:39.070 --> 00:09:44.350
of one but there's not a hundred percent correct answer here you can always experiment thanks and we'll

128
00:09:44.350 --> 00:09:48.670
see you at the next lecture recreate the model and begin to evaluate the model.
