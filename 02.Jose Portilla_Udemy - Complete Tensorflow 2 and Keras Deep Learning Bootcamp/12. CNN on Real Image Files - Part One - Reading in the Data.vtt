WEBVTT
1
00:00:05.470 --> 00:00:06.880
Welcome back everyone.

2
00:00:06.880 --> 00:00:11.510
Let's get started by learning how to use a conversational neural network on custom images.

3
00:00:11.530 --> 00:00:14.500
Essentially your own PMG or JPEG files.

4
00:00:14.500 --> 00:00:18.550
In part one of these series of lectures we're going to focus on just understanding what our data looks

5
00:00:18.550 --> 00:00:21.970
like and how to set the file paths for our data.

6
00:00:21.970 --> 00:00:23.250
Let's get started.

7
00:00:23.260 --> 00:00:23.530
All right.

8
00:00:23.530 --> 00:00:29.140
In the previous lecture we imported OS set up our data directory and upon calling the list directory

9
00:00:29.140 --> 00:00:30.320
from the data directory.

10
00:00:30.460 --> 00:00:34.780
You should have seen that there's a test folder and a train folder.

11
00:00:34.780 --> 00:00:37.570
So what we're gonna do after this is we're gonna exploit this further.

12
00:00:37.570 --> 00:00:42.850
But first I'm going to copy and paste a couple of imports from our notebook.

13
00:00:42.850 --> 00:00:50.590
The first being pandas as PD num PIs MP Seabourn as S.A. and then Matt Paul lived up pi plot as BLT.

14
00:00:50.600 --> 00:00:55.520
Now we've already seen all those imports before but there's a new one that we're going to use to actually

15
00:00:55.580 --> 00:00:59.930
read in real image files and it's called from map plot lib.

16
00:01:00.050 --> 00:01:05.540
So from Matt plot lib dot image not that pipeline.

17
00:01:05.540 --> 00:01:06.680
Go ahead an import.

18
00:01:06.680 --> 00:01:09.220
I am read.

19
00:01:09.350 --> 00:01:12.850
So this is going to allow us to read an image files directly.

20
00:01:12.980 --> 00:01:18.530
So we already know that we have a test set and a training set inside of this.

21
00:01:18.560 --> 00:01:27.060
Let's go ahead and set two variables we'll call one the test path which is my data directory and then

22
00:01:27.060 --> 00:01:33.690
I'm just going to concatenate as a string and I'm using double backslash here because I'm on windows

23
00:01:35.960 --> 00:01:43.130
and I'm going to add in that test directory and then I'll create a training path and state that my data

24
00:01:43.130 --> 00:01:51.940
directory plus and in this case again double backslash is here on test train and whips.

25
00:01:52.100 --> 00:01:56.680
It's going to be data directory not my data directory.

26
00:01:56.680 --> 00:01:57.880
Okay perfect.

27
00:01:57.880 --> 00:02:04.780
So if we take a look at test path then and redshift enter it's essentially the file path to the test

28
00:02:04.780 --> 00:02:05.590
set.

29
00:02:05.680 --> 00:02:13.370
So let's go ahead and list what files are inside by saying OS that list directory and we'll go ahead

30
00:02:13.370 --> 00:02:20.160
and pass in our test path run that you'll notice there's parasite versus uninfected.

31
00:02:20.330 --> 00:02:24.640
And basically what we're looking at here is a data set that contains two folders.

32
00:02:24.950 --> 00:02:28.660
Originally it contains an infected folder and an uninfected folder.

33
00:02:28.670 --> 00:02:30.920
This is already been split up and test train for you.

34
00:02:31.370 --> 00:02:37.910
And it contains a total of about twenty seven thousand images and the state asset is taken from a government

35
00:02:37.910 --> 00:02:40.100
repository on malaria data sets.

36
00:02:40.130 --> 00:02:44.840
So there's a National Library of Medicine and the link is in the notebook for you in the notebook that

37
00:02:44.840 --> 00:02:46.270
goes along with this lecture.

38
00:02:46.280 --> 00:02:49.190
You can check out the full publication and the datasets here.

39
00:02:49.190 --> 00:02:51.510
They have a cell's images that zip.

40
00:02:51.530 --> 00:02:55.350
It's available from NIH so you can check out the full details here.

41
00:02:55.370 --> 00:03:03.060
But essentially it's just images of whether or not a cell has been infected with malaria so we're gonna

42
00:03:03.060 --> 00:03:09.180
come back here and notice we have essentially a sub folder underneath test for images where the cell

43
00:03:09.330 --> 00:03:16.920
has been infected and one for we're not infected and we can do the same for the training path and it's

44
00:03:16.920 --> 00:03:19.230
going to have essentially the same set of categories.

45
00:03:19.260 --> 00:03:25.200
So we're going to end up doing is attempting to build a model that just based off the image of a cell

46
00:03:25.560 --> 00:03:29.330
can predict whether or not it's infected or not infected.

47
00:03:29.340 --> 00:03:35.490
In theory this could hopefully save real doctors a lot of time by just running images into our model

48
00:03:35.760 --> 00:03:39.890
instead of having to manually look at these images themselves and determinant.

49
00:03:39.900 --> 00:03:43.460
So what we're gonna do is just take a look at a single image.

50
00:03:43.650 --> 00:03:53.010
So we're going to say OS list directory and let's go ahead and do the following we'll say from our training

51
00:03:53.010 --> 00:04:06.130
path go ahead and concatenate the well we'll look at one that has the parasite so say plus that run

52
00:04:06.130 --> 00:04:09.390
it and you'll see a list of all the image files.

53
00:04:09.490 --> 00:04:14.260
So here's one at PSG file cell 162 163 and so on.

54
00:04:14.260 --> 00:04:16.750
So there's thousands of images here.

55
00:04:16.750 --> 00:04:20.710
Let's go ahead and basically this function just listed all the images.

56
00:04:20.710 --> 00:04:29.170
Let's just grab the first one of this list so if you notice here I now have this PMG file and what I

57
00:04:29.170 --> 00:04:41.760
need to do is basically tell the image read function where this file actually is so this parasite cell

58
00:04:41.760 --> 00:04:42.760
or infected cell.

59
00:04:42.790 --> 00:04:51.980
I'll say parasail is equal to and we'll say train path Plus Paris ties there.

60
00:04:52.030 --> 00:04:59.830
Plus and then to make sure everything works will add two sets of backslash as they're there should essentially

61
00:04:59.890 --> 00:05:05.430
slashes between all the file names or all the directories and then add that there.

62
00:05:05.440 --> 00:05:11.890
So if I take a look at parasol just individually after running this all I'm trying to say is that this

63
00:05:11.890 --> 00:05:19.530
parasol is essentially the entire file path to a single image which means I can then use the image read

64
00:05:19.540 --> 00:05:22.090
function that we imported.

65
00:05:22.120 --> 00:05:28.670
So go ahead Emery parasol and it automatically transforms a PSG file into an array for you.

66
00:05:28.720 --> 00:05:33.980
And if we check out the shape of this you'll notice that this particular image is one forty eight by

67
00:05:33.980 --> 00:05:37.580
one free two by three which means it's a color image.

68
00:05:37.580 --> 00:05:40.290
Let's go ahead and explore what it actually looks like.

69
00:05:40.370 --> 00:05:49.970
So we'll say PDT and now I can say image show this image read call run that and this is what a cell

70
00:05:49.970 --> 00:05:56.090
looks like when it has the infection the parasite and you can see there's this little dark infected

71
00:05:56.270 --> 00:05:57.590
essentially area.

72
00:05:57.590 --> 00:06:02.400
Let's go ahead and do the same for an uninfected cell and see what it looks like.

73
00:06:02.540 --> 00:06:11.590
So I'll say my uninfected cell is equal to and in this case will say train path plus and we also need

74
00:06:11.590 --> 00:06:18.760
to say uninfected backslash backslash and I need to grab just one single image from this.

75
00:06:18.790 --> 00:06:26.600
So I'll use the same approach as we did last time we'll say OS list directory and inside the training

76
00:06:26.600 --> 00:06:37.660
path go ahead and grab from uninfected so I can just say grab from an infected here pass that in and

77
00:06:37.690 --> 00:06:40.450
let me split this up so you can see what this returns.

78
00:06:40.450 --> 00:06:45.300
So recall wipes on infected should have an end there.

79
00:06:45.550 --> 00:06:51.010
Go ahead and run that that list all the image files inside the uninfected folder inside my training

80
00:06:51.010 --> 00:06:52.010
path.

81
00:06:52.090 --> 00:06:53.230
Just grab one of them.

82
00:06:53.560 --> 00:06:57.220
And now we have that name right there.

83
00:06:57.220 --> 00:07:05.350
So grab that or just grab this and then paste it so you can either do that or just grab the rostering

84
00:07:05.350 --> 00:07:05.980
itself.

85
00:07:06.200 --> 00:07:10.070
Either way this matter is going to be the same code essentially the same string.

86
00:07:10.120 --> 00:07:14.380
And so now we have the file path to an uninfected cell.

87
00:07:14.620 --> 00:07:17.340
So that's a complete file path to an unaffected cell.

88
00:07:17.410 --> 00:07:18.940
Let's go ahead and read it in.

89
00:07:19.180 --> 00:07:28.710
So I'll say my uninfected cell is equal to image read and then we'll say uninfected cell.

90
00:07:29.150 --> 00:07:39.540
And now my uninfected cells that array called P.L. t image show here and this is an uninfected healthy

91
00:07:39.540 --> 00:07:40.420
cell.

92
00:07:40.440 --> 00:07:42.350
The difference should be quite obvious.

93
00:07:42.420 --> 00:07:48.570
Notice there's kind of a dark indication here of the infection and the uninfected look essentially quote

94
00:07:48.570 --> 00:07:49.230
unquote normal.

95
00:07:49.230 --> 00:07:50.180
They're just kind of this pink.

96
00:07:50.190 --> 00:07:52.880
They don't have this dark stain.

97
00:07:52.890 --> 00:07:53.530
OK.

98
00:07:53.760 --> 00:07:58.770
So a big part of this is just understanding the file parts on your computer and you can always understand

99
00:07:58.770 --> 00:08:04.770
the file parts as we discussed in the panel section if you type TWD that lists the current location

100
00:08:04.890 --> 00:08:08.310
where you're at on your computer inside this notebook.

101
00:08:08.310 --> 00:08:14.000
OK so let's go ahead and check how many images there are lots of different ways we can do this.

102
00:08:14.040 --> 00:08:23.420
But one way is we can say OS that list directory get our training path and then let's go ahead and check

103
00:08:23.420 --> 00:08:30.680
out how many parasite versions do we have and then also constantly make sure to check your spelling

104
00:08:30.680 --> 00:08:34.700
here and then check the length of this.

105
00:08:35.030 --> 00:08:40.460
So it looks like inside the training folder we have twelve thousand four hundred eighty examples of

106
00:08:40.460 --> 00:08:44.180
infected cells or parasitic cells.

107
00:08:44.180 --> 00:08:49.550
And then the lengthier will say list directory again on the training path.

108
00:08:49.580 --> 00:08:54.360
Except this time let's look at uninfected we'll say uninfected.

109
00:08:55.200 --> 00:08:56.300
Check the link there.

110
00:08:56.310 --> 00:08:57.930
So it's the same amount.

111
00:08:57.930 --> 00:09:04.050
So we have the same amount of energy images as uninfected versus parasite cells inside our train paths

112
00:09:04.260 --> 00:09:07.950
and we could take the same look for our test paths.

113
00:09:08.040 --> 00:09:13.350
So there's one thousand three hundred images of parasite cells under the test set.

114
00:09:13.620 --> 00:09:20.570
And if we take a look at the test set as well there's one thousand three hundred uninfected.

115
00:09:20.870 --> 00:09:21.370
OK.

116
00:09:21.540 --> 00:09:25.770
So we have the same amount of instances per class which is nice.

117
00:09:25.770 --> 00:09:32.670
So we can go ahead and combat these out now and let's go ahead and finally figure out the average shape

118
00:09:32.760 --> 00:09:34.190
of one of these images.

119
00:09:34.290 --> 00:09:39.000
Something to note here is since these are real image files it's unlikely that they're all going to be

120
00:09:39.000 --> 00:09:40.540
the exact same shape.

121
00:09:40.590 --> 00:09:45.200
Previously we didn't have to worry about that because we were reading and datasets like the m this dataset

122
00:09:45.500 --> 00:09:50.520
the safari tent data set and every image happened to be the same dimensions real life images are not

123
00:09:50.520 --> 00:09:51.360
going to be that way.

124
00:09:51.360 --> 00:09:53.280
They're going to have different dimensions.

125
00:09:53.280 --> 00:09:56.090
So lots different ways we can do this.

126
00:09:56.280 --> 00:10:00.550
But one way is to set up two lists.

127
00:10:01.260 --> 00:10:05.790
Call one dim one for dimensions and the other one dim too.

128
00:10:06.150 --> 00:10:07.350
So that mentions one and 2.

129
00:10:07.440 --> 00:10:16.120
And what we're going to do is the following command I'll say for image file name in and I'm just going

130
00:10:16.120 --> 00:10:24.330
to look at let's say our test images will say an OS list directory underneath the test path.

131
00:10:24.370 --> 00:10:26.170
Take a look at the uninfected

132
00:10:29.910 --> 00:10:36.510
so grab those uninfected images and then go ahead and read in that file as an array say image is equal

133
00:10:36.510 --> 00:10:37.950
to image read.

134
00:10:38.010 --> 00:10:46.350
And in this case we'll say the test path plus uninfected.

135
00:10:46.370 --> 00:10:57.160
Make sure you spell that right backslash backslash plus the actual image file name so we're call OS

136
00:10:57.180 --> 00:10:59.700
thoughtless directory a test path uninfected.

137
00:10:59.700 --> 00:11:04.080
If I take a look at what that returns essentially what I'm actually iterating through I'm iterating

138
00:11:04.080 --> 00:11:06.750
through each of these files.

139
00:11:06.780 --> 00:11:09.060
So go ahead and grab that file.

140
00:11:09.540 --> 00:11:14.040
But in order to actually do the image read I need the pass in the full file name.

141
00:11:14.130 --> 00:11:14.590
OK.

142
00:11:14.760 --> 00:11:19.350
That allows this cell to run from any directory no matter where you're located on your computer.

143
00:11:19.350 --> 00:11:24.990
So I'm reading in all these files so I'm reading in all these images and then what I'm going to do is

144
00:11:24.990 --> 00:11:27.230
I will check the image shape.

145
00:11:27.380 --> 00:11:34.950
Recall that the image shape is a tuple of three dimensions its dimension one dimension to so width and

146
00:11:34.950 --> 00:11:39.120
height and then the colors dimension which is going to be three for all of them.

147
00:11:39.150 --> 00:11:41.450
There's three color channels for all of them.

148
00:11:41.490 --> 00:11:52.350
So now I'm going to do is say dimensions one append the D one value and dimensions to append D to value

149
00:11:52.590 --> 00:11:54.810
make sure get rid of the s there.

150
00:11:54.810 --> 00:12:00.690
So all I'm doing is I'm iterating through every file and by chance the test path uninfected.

151
00:12:00.690 --> 00:12:07.230
So that is going to be thirteen hundred files then I'm going to check the shape of each of them and

152
00:12:07.230 --> 00:12:10.490
then save their first I mentioned and their second dimension.

153
00:12:10.490 --> 00:12:12.220
Let's go ahead and run this.

154
00:12:12.270 --> 00:12:18.100
Keep in mind that you should triple check the file parts here and make sure everything is correct and

155
00:12:18.100 --> 00:12:20.560
after that you should be able to check one of these.

156
00:12:20.560 --> 00:12:22.410
And it has a bunch of dimensions in it.

157
00:12:22.420 --> 00:12:24.130
Notice they are all different.

158
00:12:24.130 --> 00:12:28.600
So these are real image files which means they're not all going to be the same dimensions that are all

159
00:12:28.600 --> 00:12:31.900
the same shape same four dimensions too.

160
00:12:32.050 --> 00:12:43.240
And to see basically a histogram of both we can say S.A. joint plot I mentioned one dimension too and

161
00:12:43.440 --> 00:12:45.200
we get something that looks like this.

162
00:12:45.310 --> 00:12:51.070
So I can see the various dimensions we have a really small image that's like 50 by 60 and a really large

163
00:12:51.070 --> 00:12:53.560
image over here that's around two hundred by two hundred.

164
00:12:53.720 --> 00:12:54.370
OK.

165
00:12:54.430 --> 00:12:55.990
So why is this important.

166
00:12:55.990 --> 00:13:02.470
Well the convolution neural network isn't going to be able to train on images of various sizes.

167
00:13:02.500 --> 00:13:07.570
So what I need to do is I need to make sure that I'm going to resize all these images to be the same

168
00:13:07.570 --> 00:13:08.230
size.

169
00:13:08.260 --> 00:13:13.190
So I have to choose what actual dimensions should I resize everything to.

170
00:13:13.360 --> 00:13:16.690
And what you should choose is essentially the average of both dimensions.

171
00:13:16.690 --> 00:13:22.090
And this shows you the actual distribution of the images and they all kind of center around basically

172
00:13:22.090 --> 00:13:28.840
130 by 130 and you can confirm this by checking out the mean values in your dimensions.

173
00:13:28.840 --> 00:13:35.710
So can say the mean of them one and the mean of them two.

174
00:13:35.710 --> 00:13:41.950
So what I'm going to do is I will say my final image shape that I will be feeding in my convolution

175
00:13:41.950 --> 00:13:46.370
on your own network is 130 by 130 by three.

176
00:13:46.440 --> 00:13:47.420
Go ahead and run that.

177
00:13:47.490 --> 00:13:53.460
And then later on or actually preparing the data for the model I'll resize everything to these dimensions.

178
00:13:53.550 --> 00:13:59.970
So if it's a smaller photo I basically can add padding so that it reaches these dimensions and if it's

179
00:13:59.970 --> 00:14:02.840
a larger photo I can either crop or shrink it down.

180
00:14:03.220 --> 00:14:07.850
OK so a big part of this lecture is understanding file parts.

181
00:14:07.950 --> 00:14:11.910
Please make sure to review the input and output lectures in pandas.

182
00:14:12.090 --> 00:14:16.500
If you're still confused on file parts on your computer and again please keep in mind if you're posting

183
00:14:16.500 --> 00:14:21.690
questions about your file parts is that I won't have access to your computer so I can't really see what

184
00:14:21.690 --> 00:14:23.000
you're saving your files.

185
00:14:23.160 --> 00:14:28.860
We should be able to do is once you actually set up this line of data directory you should be able to

186
00:14:28.860 --> 00:14:30.930
run our notebooks and everything should work.

187
00:14:30.930 --> 00:14:34.340
The only thing you really need to edit is this singular line right here.

188
00:14:34.470 --> 00:14:37.920
Again yours isn't going to be the same as mine because you're not on my computer.

189
00:14:37.920 --> 00:14:38.440
All right.

190
00:14:38.580 --> 00:14:39.980
So a lot of file parts here.

191
00:14:40.020 --> 00:14:44.220
And being able to read in real image data that's all we need to cover for this lecture.

192
00:14:44.280 --> 00:14:50.430
Coming up next we're going to show you how to use the image data generator to both perform image manipulation

193
00:14:50.580 --> 00:14:53.320
and then generate batches from real image files.

194
00:14:53.340 --> 00:14:53.850
We'll see you there.
