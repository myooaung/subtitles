1
00:00:05,240 --> 00:00:06,500
Welcome back everyone.

2
00:00:06,620 --> 00:00:13,290
In this lecture we're going to discuss pandas series a panda series is very similar to an umpire.

3
00:00:13,710 --> 00:00:16,250
Except for the addition of a named index.

4
00:00:16,380 --> 00:00:19,770
We can use this named index to grab data from the array.

5
00:00:19,770 --> 00:00:25,110
This works really well with real world data where every row is usually associated with some sort of

6
00:00:25,260 --> 00:00:26,750
named index object.

7
00:00:26,820 --> 00:00:32,040
So let's see how this all works with Python and head over to a Jupiter notebook now to begin.

8
00:00:32,070 --> 00:00:39,560
I'm going to import some PI as NDP and by convention we import pandas as PD.

9
00:00:40,020 --> 00:00:45,540
So first we're gonna show you how to create a variety of series using a variety of different based Python

10
00:00:45,570 --> 00:00:47,040
objects.

11
00:00:47,100 --> 00:00:50,330
So first thing to define a couple of things here.

12
00:00:50,520 --> 00:00:59,640
I will define a normal Python list just called labels ABC and then I will say my list is equal to 10

13
00:00:59,640 --> 00:01:00,990
20 30.

14
00:01:01,090 --> 00:01:03,380
In other variable I will create as an umpire.

15
00:01:03,660 --> 00:01:12,480
So say array is equal to empty array and essentially passing that list and then finally also create

16
00:01:12,480 --> 00:01:15,770
a dictionary and dictionary is going to look really similar.

17
00:01:15,840 --> 00:01:24,960
It's gonna have a as a key 10 as a value B as a key 20 has a value and then C as a key and 30 as a value.

18
00:01:24,960 --> 00:01:30,330
So we have these four essentially basic data structures and each of these we can actually convert to

19
00:01:30,330 --> 00:01:31,960
a panda series.

20
00:01:32,160 --> 00:01:38,940
So if we say PD dot series you should be able to then do shift tab after you've already imported pandas

21
00:01:38,960 --> 00:01:43,200
PD and see the general documentation string and the signature.

22
00:01:43,200 --> 00:01:48,030
And while there's a lot going on here the two main things you need to be aware of for a panda series

23
00:01:48,270 --> 00:01:52,700
is the data parameter and the index parameter.

24
00:01:52,730 --> 00:01:57,950
So first let's go ahead and provide data for the series and I can do this by saying data is equal to

25
00:01:58,480 --> 00:02:01,740
and in this case I'll just pass in that normal Python list.

26
00:02:01,880 --> 00:02:08,270
And here we can see the way pandas outputs a series inside of the Jupiter notebook by default the series

27
00:02:08,360 --> 00:02:10,780
is going to have a labeled index.

28
00:02:10,850 --> 00:02:15,290
And if you don't provide an index it will by default show you the numbers starting at 0.

29
00:02:15,290 --> 00:02:17,040
So say 0 1 2.

30
00:02:17,170 --> 00:02:21,280
This is quite similar to essentially what num Pi or even a normal Python list does.

31
00:02:21,530 --> 00:02:26,950
But what it can do and this is basically the difference between a panda series and a normal name pyrite

32
00:02:27,400 --> 00:02:29,440
is that can have a labeled index.

33
00:02:29,440 --> 00:02:36,610
So I can set my index equal to that labels list and now I can see I have a panda series where each row

34
00:02:37,360 --> 00:02:44,230
has a label to it a B and C and later on we will be able to explore that I can still actually identify

35
00:02:44,560 --> 00:02:48,750
the items in my series by their actual integer location.

36
00:02:48,760 --> 00:02:54,100
So essentially now I have two ways of grabbing items based off an index either based off the index name

37
00:02:54,490 --> 00:02:58,570
or based off the index location such as location zero.

38
00:02:58,600 --> 00:03:04,000
So keep in mind I don't actually have to say data equal to or index equal to as long as I provide this

39
00:03:04,000 --> 00:03:04,800
in the correct order.

40
00:03:04,800 --> 00:03:11,110
If I run this notice I get back the exact same results and it's gonna be the same for if you're working

41
00:03:11,110 --> 00:03:13,320
with a vampire.

42
00:03:13,520 --> 00:03:19,300
So you say PD series array you can see that's the same thing and I can also then pass on labels to label

43
00:03:19,300 --> 00:03:20,540
that data.

44
00:03:20,710 --> 00:03:26,590
Now while we usually won't be passing in dictionaries in this fashion if you do have a dictionary with

45
00:03:26,710 --> 00:03:33,280
keys and values you can quickly transform it to a series by running PD that series D later on the course

46
00:03:33,310 --> 00:03:39,460
we're gonna see that the way tensor flow actually returns back a history of losses being able to convert

47
00:03:39,550 --> 00:03:43,060
quickly to a pan the series is gonna be really useful.

48
00:03:43,060 --> 00:03:47,140
So keep this in mind that we will see this later on the course even though throughout the PAN the section

49
00:03:47,200 --> 00:03:49,560
it won't be too common to run this.

50
00:03:49,620 --> 00:03:55,890
Now you've been hearing me say a lot that the key factor of a Panther series is the fact that it has

51
00:03:55,890 --> 00:03:57,170
its labeled index.

52
00:03:57,330 --> 00:04:01,320
So let's go ahead and build out a more complex series.

53
00:04:01,320 --> 00:04:08,290
We'll going to call this sales Q one for maybe first quarter sales and this will be equal to a pan the

54
00:04:08,280 --> 00:04:11,240
series where the data is equal to.

55
00:04:11,250 --> 00:04:12,740
I'm just gonna make up some numbers here.

56
00:04:12,780 --> 00:04:17,090
Two fifty four fifty two hundred one fifty.

57
00:04:17,460 --> 00:04:24,000
And then we'll go ahead and have the index maybe based off some geographical locations so maybe we have

58
00:04:24,060 --> 00:04:30,410
quarterly sales data for different countries like USA China India.

59
00:04:30,420 --> 00:04:35,330
Make sure this is a comma here and let's pass in one more just to make sure the dimensions match up

60
00:04:35,960 --> 00:04:36,960
we'll say Brazil.

61
00:04:36,960 --> 00:04:40,110
So we need basically one index per data point.

62
00:04:40,110 --> 00:04:41,590
So go ahead and run this.

63
00:04:41,820 --> 00:04:46,990
And if I take a look at sales Q1 here we have this sales data.

64
00:04:47,040 --> 00:04:49,900
Now let's go ahead and make this for sales.

65
00:04:49,900 --> 00:04:50,810
Q2 again.

66
00:04:50,830 --> 00:04:52,750
Kind of just going to make up some data here.

67
00:04:52,750 --> 00:04:55,240
We'll change this to sales Q2.

68
00:04:55,240 --> 00:05:01,210
I'll change these numbers around a little bit maybe to sixty five hundred.

69
00:05:01,210 --> 00:05:07,960
Go ahead and just make this let's say 2 10 and 100 now for the index is probably a more important part

70
00:05:07,960 --> 00:05:09,430
that we're actually gonna change.

71
00:05:09,430 --> 00:05:18,510
I'm going to change this last one from Brazil to Japan and I'm going to see sales Q2.

72
00:05:19,240 --> 00:05:20,050
Okay.

73
00:05:20,240 --> 00:05:24,540
Now when we're working with realistic datasets This is essentially the kind of thing we're going to

74
00:05:24,540 --> 00:05:30,250
be working with or we have some sort of named index and then some value or feature corresponding to

75
00:05:30,250 --> 00:05:30,840
it.

76
00:05:30,890 --> 00:05:35,800
Now what I want to show you this I can actually grab information off of the series so because now labeled

77
00:05:35,830 --> 00:05:40,850
index what I can do is let's say I wanted to know the sales in Q2 for China.

78
00:05:41,320 --> 00:05:46,700
It's essentially almost like a dictionary call where I would say sales Q2 and then embraces passing

79
00:05:46,720 --> 00:05:50,770
the string China run that and a return back the corresponding number.

80
00:05:50,860 --> 00:05:54,780
And we can confirm that by taking a look at sales Q2.

81
00:05:54,850 --> 00:06:00,880
Now if for some reason you actually wanted to grab information based off the index location as in the

82
00:06:00,910 --> 00:06:08,740
integer base location where you could do is pass in that location such as the very first item at zero

83
00:06:09,100 --> 00:06:10,500
and it would still work.

84
00:06:10,540 --> 00:06:17,820
So you can see sales Q2 and that returns back to 60 if you call for zero.

85
00:06:17,840 --> 00:06:24,640
So note that whether you call USA or if you call sales Q2 0 it returns back the same value.

86
00:06:24,650 --> 00:06:29,300
So that gives you flexibility if the PAN series if you have a named label you can call the index based

87
00:06:29,300 --> 00:06:30,530
off that name label.

88
00:06:30,530 --> 00:06:36,170
If not or even if you do have it you can always call based off the integer location of a series.

89
00:06:36,170 --> 00:06:40,830
So you can essentially do what looks like a dictionary call or a list index call.

90
00:06:40,930 --> 00:06:45,470
Now something I want to show you is you may get an error if you try providing something that's not in

91
00:06:45,470 --> 00:06:46,050
there.

92
00:06:46,130 --> 00:06:51,350
So if I try to ask for the tenth item in the series I'll get a key error and key errors are really common

93
00:06:51,350 --> 00:06:52,490
for beginners to get.

94
00:06:52,580 --> 00:06:56,120
And basically what this indicates is either you provided the wrong number.

95
00:06:56,120 --> 00:07:01,500
So you'll notice here it says key error 10 I couldn't find it because I don't have 10 items or maybe

96
00:07:01,500 --> 00:07:08,360
you've committed a typo such as typing USA and lower case in which case that will also produce a type

97
00:07:08,360 --> 00:07:13,030
error or key error we can see here that produced an error as well.

98
00:07:13,160 --> 00:07:14,320
So just be careful of that.

99
00:07:14,420 --> 00:07:18,410
You have to spell things correctly and capitalization actually counts.

100
00:07:18,410 --> 00:07:24,480
Last thing I want to show you is we can then perform operations between series so I can take sales Q1

101
00:07:25,160 --> 00:07:28,320
and try adding it to sales Q2.

102
00:07:28,340 --> 00:07:35,180
Now keep in mind if we take a look at sales Q1 I have this item Brazil which is not present in sales

103
00:07:35,180 --> 00:07:36,260
Q2.

104
00:07:36,260 --> 00:07:41,930
So it's going to happen is the default behavior when I add these two series together is for Brazil and

105
00:07:41,930 --> 00:07:42,810
Japan.

106
00:07:42,890 --> 00:07:49,370
It'll say basically not a number since it didn't have information for both of those named labels for

107
00:07:49,370 --> 00:07:50,600
both series.

108
00:07:50,600 --> 00:07:54,980
Later on we'll go ahead and show you how to change its behavior to maybe treat one of the series as

109
00:07:54,980 --> 00:07:57,110
a zero in order to keep the original values.

110
00:07:57,140 --> 00:08:02,840
So if you wanted to see Japan as one hundred here and the Brazil's 150 in the final result we'll show

111
00:08:02,840 --> 00:08:03,500
that later on.

112
00:08:03,830 --> 00:08:09,290
But what I want to basically point out to you here is that even if you're adding to series that don't

113
00:08:09,290 --> 00:08:14,790
match up perfectly based off their index labels the operation will still go through.

114
00:08:15,050 --> 00:08:20,420
It'll just basically notify you of where you only had information on one of those series by providing

115
00:08:20,480 --> 00:08:21,240
not a number.

116
00:08:21,590 --> 00:08:26,000
So if you saw this final result this basically tells you that Brazil was only present in one of the

117
00:08:26,000 --> 00:08:26,630
series.

118
00:08:26,630 --> 00:08:27,840
Same with Japan.

119
00:08:27,860 --> 00:08:28,380
Okay.

120
00:08:28,640 --> 00:08:31,490
That's a very basics of pan the series coming up next.

121
00:08:31,490 --> 00:08:35,790
We're going to walk you through the real workhorse of PANDAS which is the data frame and that's really

122
00:08:35,790 --> 00:08:38,580
what we're going to be using throughout most of the course.

123
00:08:38,600 --> 00:08:39,590
I'll see you at the next lecture.
