WEBVTT
1
00:00:02.250 --> 00:00:08.520
So in order to get started with typescript we have to install this typescript compiler because I explained

2
00:00:08.520 --> 00:00:12.630
that typescript doesn't run like this as a language in a browser.

3
00:00:12.630 --> 00:00:19.040
Instead the browser understands javascript so we need this compiler this tool which takes our types

4
00:00:19.040 --> 00:00:22.200
of code and converts it to JavaScript code.

5
00:00:22.200 --> 00:00:27.320
Now for that you can visit typescript Lang dot Orrick and on this page you'll find a download link.

6
00:00:27.330 --> 00:00:31.230
This is the official page of the typescript project by the way.

7
00:00:31.230 --> 00:00:35.100
So they are you all to find you official docs if you want to dive into those.

8
00:00:35.100 --> 00:00:39.830
But for the moment we can click on download here to learn how to install this compiler.

9
00:00:39.900 --> 00:00:43.080
And here we actually don't have a download link.

10
00:00:43.080 --> 00:00:47.070
Instead we install this typescript tool with NPM.

11
00:00:47.070 --> 00:00:49.170
So with the node package manager.

12
00:00:49.320 --> 00:00:54.930
Now we already use this before it in the course but in case you somehow skip those sections you get

13
00:00:54.930 --> 00:00:59.300
this tool as a command you can use in your terminal or a command prompt.

14
00:00:59.730 --> 00:01:06.060
Once you install node J.S. so for Dad you can visit node J.S. dot org and there is simply download and

15
00:01:06.060 --> 00:01:09.870
install that latest version with this button you downloaded.

16
00:01:09.870 --> 00:01:15.960
You get a install or you can walk through the installer and you can install node Chase on your system.

17
00:01:15.960 --> 00:01:23.580
Now note J.S. is runtime for JavaScript and this gets used by the compiler behind the scenes.

18
00:01:23.610 --> 00:01:30.300
But most importantly if you install no trace you all installed and Node package manager a tool which

19
00:01:30.300 --> 00:01:33.120
actually allows you to well install packages.

20
00:01:33.210 --> 00:01:37.700
For example global packages global tools like this type of tool.

21
00:01:37.710 --> 00:01:45.090
So with no trace installed you can open up your system command prompt or terminal and they are simply

22
00:01:45.090 --> 00:01:51.690
run npm install dash G for global typescript this will installed this tool globally.

23
00:01:51.690 --> 00:01:58.390
Now on Mac and Linux you might need to add a pseudo in front of this to get the right permissions once

24
00:01:58.390 --> 00:02:00.040
this installation finishes.

25
00:02:00.130 --> 00:02:06.940
You got typescript dis compiler installed and you're ready to write some types good code now to do that

26
00:02:07.480 --> 00:02:14.560
let's head over to a new project and here I essentially got an empty folder opened up in Visual Studio

27
00:02:14.560 --> 00:02:17.010
code which is the idea I'm using here.

28
00:02:17.020 --> 00:02:22.090
The two files and folders you see here are only configuration files which you can ignore in which you

29
00:02:22.090 --> 00:02:28.240
don't need and in there we can now add our first types could file for example app dot t yes.

30
00:02:28.330 --> 00:02:29.900
The name is totally up to you.

31
00:02:30.040 --> 00:02:35.950
Now Dot T S is important this stands for TypeScript and this well simply is t extension we use here

32
00:02:35.950 --> 00:02:39.860
to make clear that we write some types of code in there.

33
00:02:39.880 --> 00:02:47.260
Now in this typescript file here you can write types of code and it's important to understand here that

34
00:02:47.290 --> 00:02:54.340
typescript as I mentioned builds up on javascript so generally you can write normal javascript code

35
00:02:54.340 --> 00:03:00.790
in here and indeed any javascript code works in at times could file but you can then also add certain

36
00:03:00.790 --> 00:03:02.720
features which only work in typescript.

37
00:03:02.770 --> 00:03:04.970
So it's javascript plus plus.

38
00:03:04.990 --> 00:03:07.690
So to say now what can we do in here.

39
00:03:07.810 --> 00:03:15.970
Well we can for example add a function add we get two parameters a and b and where we return a plus

40
00:03:15.970 --> 00:03:19.920
b that's D sample from the slide I showed earlier.

41
00:03:19.930 --> 00:03:27.640
Now let's create a result constant here and call add and pass and 5 and let's say free as strings.

42
00:03:27.640 --> 00:03:35.740
This was the example where we might get an unexpected result we can console log result here and now

43
00:03:35.770 --> 00:03:42.880
we can execute it to execute as one way is to simply add index H to metal file and if you are using

44
00:03:42.880 --> 00:03:48.460
visuals to do code you can then just type each email here you get these all the suggestions and if you

45
00:03:48.460 --> 00:03:54.460
had tab here you get this HMO five skeleton where l just had a title of typescript and where I will

46
00:03:54.460 --> 00:04:01.600
now add a script import now important here we don't import app dot t s but app dot J.S. because as I

47
00:04:01.600 --> 00:04:06.030
mentioned the browser won't be able to run our type group code anyways.

48
00:04:06.070 --> 00:04:11.850
Now of course we have no app dot J.S. file right now but that will soon change.

49
00:04:11.950 --> 00:04:18.280
Now we'll add defer here to make sure that the script gets downloaded early but only executes once the

50
00:04:18.280 --> 00:04:20.740
entire DRM has been rendered.

51
00:04:20.740 --> 00:04:26.050
And with that dead set for the moment I need no content in here because in the script we got some code

52
00:04:26.050 --> 00:04:32.750
which runs automatically any ways in which simply Princeton's where assault now the APT or Jay as follows.

53
00:04:32.750 --> 00:04:39.020
Missing as I mentioned right now with the help of the types of compiler we can get this all we need

54
00:04:39.020 --> 00:04:40.150
is a new terminal.

55
00:04:40.190 --> 00:04:42.110
And here I will use t built in one.

56
00:04:42.110 --> 00:04:48.740
So your normal command prompt or terminal simply navigated into this project folder and there since

57
00:04:48.740 --> 00:04:54.370
we installed types could with this command we can now run T as C.

58
00:04:54.440 --> 00:04:59.520
This is a command which is now a way lable thanks to the globally installed types with compiler app

59
00:04:59.540 --> 00:05:07.160
dot t s and what this command does is it takes as apt ot t s file and converts it into a javascript

60
00:05:07.160 --> 00:05:14.330
file converting any typescript specific code into javascript code and of course running all that type

61
00:05:14.330 --> 00:05:19.700
of logic checking for all these types and so on and right now please note that in here we have absolutely

62
00:05:19.700 --> 00:05:21.770
no typescript specific logic.

63
00:05:21.770 --> 00:05:27.200
This is all regular javascript code but as I mentioned we can write does in typing files and therefore

64
00:05:27.200 --> 00:05:28.930
this will also compile.

65
00:05:29.120 --> 00:05:34.610
So if I hit enter here you'll see this completes and now we get this app genius file and if we have

66
00:05:34.610 --> 00:05:41.210
a look at this file we see it's generally the same content whitespace was removed and you also see that

67
00:05:41.210 --> 00:05:46.450
concept was translated to var because and I did mention this.

68
00:05:46.490 --> 00:05:51.620
Types could also converts code to code that runs in older browsers as well.

69
00:05:51.620 --> 00:05:53.550
This is an extra benefit we get.

70
00:05:53.630 --> 00:05:57.170
So this is actually javascript code which also runs in older browsers.

71
00:05:57.170 --> 00:06:03.410
Later I will show you how you can tweak the configuration to make sure that it works according to your

72
00:06:03.410 --> 00:06:09.500
plans and you for example keep cons here if you want to but for the moment is is fine as long as I have

73
00:06:09.500 --> 00:06:15.110
this file open I also get some errors here in Apt yes because my I.T. thinks that all these functions

74
00:06:15.110 --> 00:06:18.460
and constants are now declared twice to get rid of this.

75
00:06:18.470 --> 00:06:21.040
We simply close aptly s and the errors are gone.

76
00:06:21.050 --> 00:06:24.580
These are not real errors so we get the app fault.

77
00:06:24.590 --> 00:06:31.040
Now let's simply open index HDL and for that we can simply open it up in the MAC finder or Windows Explorer

78
00:06:31.190 --> 00:06:33.330
and click twice on it.

79
00:06:33.410 --> 00:06:38.900
If you do that a new tab should open up in your browser and this will be an empty page of course because

80
00:06:38.900 --> 00:06:42.080
we have no content on our page no content in the dorm.

81
00:06:42.320 --> 00:06:48.670
But if we open up the developer tools we should see some output here and we should see in my case here

82
00:06:48.670 --> 00:06:49.740
50 free.

83
00:06:49.780 --> 00:06:53.860
Now that's of course not the result of five plus free.

84
00:06:53.860 --> 00:06:59.830
But please note that I passed in two strings and therefore if you add two strings javascript concatenate

85
00:06:59.830 --> 00:07:06.160
stem it does not add the mathematically it concatenate stem and that's the bog I mentioned on the slide.

86
00:07:06.160 --> 00:07:08.500
Now how can times go to help us with that.

87
00:07:08.710 --> 00:07:13.930
Well in typescript so it need t s file we shouldn't work into J as file because does this generated

88
00:07:13.960 --> 00:07:19.720
automatically when we compile so in the T S file we can now add some types of features.

89
00:07:19.720 --> 00:07:25.660
The reason why we use typescript we can add a type assignment here for example on the parameters we

90
00:07:25.660 --> 00:07:31.570
can make it clear to the types of compiler that a should be a number and B should be a number.

91
00:07:31.570 --> 00:07:36.350
We do that by adding a colon after the parameter where we want to assign a type.

92
00:07:36.370 --> 00:07:42.390
Then we write to type name and death for example number is one of the types type supports.

93
00:07:42.580 --> 00:07:45.670
We do this after both a and b.

94
00:07:45.670 --> 00:07:51.370
So now what we're telling to TypeScript and to the types of compiler is that both a and b should be

95
00:07:51.370 --> 00:07:52.270
of type No.

96
00:07:53.050 --> 00:07:58.990
And you see my I.D. I now automatically get an error here because visual studio code the idea I'm using

97
00:07:58.990 --> 00:08:05.260
here is actually an I.T. with built in type support and therefore it automatically parses my code and

98
00:08:05.260 --> 00:08:08.930
detects that I'm violating my type rules here.

99
00:08:08.980 --> 00:08:10.820
So it gives me an error here.

100
00:08:10.820 --> 00:08:14.980
Now even if you're not getting this in the idea you you'll see we now get an error.

101
00:08:14.980 --> 00:08:22.900
If I tried to compile this file again by again running TSC apt T S you see now down there we actually

102
00:08:22.900 --> 00:08:30.550
get an error that the argument of type 5 which is wrapped in quotes so which is of type String is not

103
00:08:30.550 --> 00:08:34.110
a sizable to a parameter of type number.

104
00:08:34.330 --> 00:08:37.510
And it also shows us which line violates our rule.

105
00:08:37.510 --> 00:08:39.280
This is typescript in action.

106
00:08:39.310 --> 00:08:45.340
This is one of the main reasons why we use typescript now I am very specific about the types of data

107
00:08:45.370 --> 00:08:48.070
I want to work with here and I am wide.

108
00:08:48.070 --> 00:08:53.230
Mistakes like this one here where I pass the wrong type of data into this function.

109
00:08:53.230 --> 00:08:58.840
Now of course since we call the function here on our own it might be unlikely that we pass and string

110
00:08:58.840 --> 00:09:05.650
data like this but imagine we're actually gathering input from a user input field into Dom values we

111
00:09:05.650 --> 00:09:10.790
get from there would always be a string by default and we might have forgotten to convert them.

112
00:09:10.870 --> 00:09:16.840
In that case types who can help us tremendously because it shows us such an error before we even run

113
00:09:16.840 --> 00:09:19.370
our code and we have to find the bug there.

114
00:09:19.510 --> 00:09:22.720
Now we get an error during compilation.

115
00:09:22.720 --> 00:09:28.570
Now it still compiles to code it still generates the capture his file but it warns us here it gives

116
00:09:28.570 --> 00:09:35.090
us this error and now we can go ahead and fix this error by passing in values of the correct type.

117
00:09:35.140 --> 00:09:41.620
And now I've tried to compilers again it compiles without errors and in the running application if we

118
00:09:41.620 --> 00:09:43.710
reload we got rid of this bug.

119
00:09:44.200 --> 00:09:51.730
So this is how times God can help us write cleaner code and a white unnecessary mistakes simply by adding

120
00:09:51.730 --> 00:09:53.650
some types here.

121
00:09:53.670 --> 00:09:58.370
No that's not all you can do in typescript and not the only way of working with pipes.

122
00:09:58.530 --> 00:10:00.510
But it is an important start.

123
00:10:00.510 --> 00:10:03.660
Now let's see how else we can work with types in typescript.
