1
00:00:02,340 --> 00:00:05,280
So which data types are available for you to use?

2
00:00:05,610 --> 00:00:08,030
Well there are numbers which I just used

3
00:00:08,130 --> 00:00:14,820
and of course not just positive, non-decimal numbers but also negative numbers like -3 or numbers

4
00:00:14,820 --> 00:00:18,660
with decimal places like 22.956

5
00:00:18,720 --> 00:00:22,500
and important here, numbers with decimal places,

6
00:00:22,500 --> 00:00:27,800
so like 22.956 are called floats or floating point numbers,

7
00:00:27,960 --> 00:00:34,410
numbers without decimal places like here, 2 or -3, are called integers.

8
00:00:34,410 --> 00:00:39,600
Now you of course use numbers for any code where you need to calculate something or where you just need

9
00:00:39,600 --> 00:00:41,670
to work with a number

10
00:00:41,670 --> 00:00:47,370
and of course typically that's a lot of code, whether you're having a calculator like we're writing it

11
00:00:47,370 --> 00:00:51,880
or you're working with some prices or something like that,

12
00:00:51,960 --> 00:00:55,140
you would typically work with numbers of course.

13
00:00:55,430 --> 00:00:57,850
Now you don't just have numbers in code

14
00:00:57,860 --> 00:01:00,310
however, sometimes you also need text,

15
00:01:00,350 --> 00:01:04,010
let's say you're working with the name of a user who logged in

16
00:01:04,010 --> 00:01:10,880
or you want to show a message to the user, then you're working with text or also called strings and

17
00:01:10,910 --> 00:01:15,310
it's not just called strings in Javascript but in other programming languages as well,

18
00:01:15,320 --> 00:01:19,930
so if I say a string, I mean a text type.

19
00:01:20,000 --> 00:01:27,380
Now you can actually create a string by wrapping your text between single quotes, double quotes or these

20
00:01:27,380 --> 00:01:30,360
back ticks here which you find on your keyboard,

21
00:01:30,590 --> 00:01:32,790
all three creates a valid string.

22
00:01:32,960 --> 00:01:36,090
You can use whatever you want, you just should be consistent though

23
00:01:36,130 --> 00:01:38,290
the third option here, the back ticks,

24
00:01:38,360 --> 00:01:39,840
that's kind of special,

25
00:01:39,860 --> 00:01:42,610
I'll come back to what's special here later, for the moment,

26
00:01:42,620 --> 00:01:49,230
use either single quotes or double quotes and then again, be consistent and always use that.

27
00:01:49,250 --> 00:01:54,890
So that would be important for outputting results, for gathering user input, for showing messages, things

28
00:01:54,890 --> 00:01:56,390
like that.

29
00:01:56,450 --> 00:02:00,670
Now we can see both types in action here in our program,

30
00:02:00,710 --> 00:02:03,330
got a number here, we've got a bunch of numbers here

31
00:02:03,500 --> 00:02:06,100
and this thing here, this actually is a string,

32
00:02:06,140 --> 00:02:11,330
it just happens to be an empty string. Now with empty string,

33
00:02:11,330 --> 00:02:15,830
I mean that this is just an opening and closing single quote and I could have used double quotes as I

34
00:02:15,830 --> 00:02:18,260
mentioned but there's nothing in between

35
00:02:18,440 --> 00:02:25,680
because this output result thing here actually is responsible for writing to two places in my webpage

36
00:02:25,970 --> 00:02:29,770
and for now I'm only interested in writing to this place here and output my number,

37
00:02:29,870 --> 00:02:34,730
I'm not interested in writing to the other place and therefore I tell it to write nothing to that other

38
00:02:34,730 --> 00:02:35,920
place.

39
00:02:35,930 --> 00:02:42,770
Now we could actually write our log here to the other place and that could be done by creating a new

40
00:02:42,830 --> 00:02:52,630
variable, let's say calculation description and you can use any name you want here, I just try to describe

41
00:02:52,630 --> 00:02:57,700
what I'll store it in this variable and what I will store here is a description of the calculation we

42
00:02:57,700 --> 00:02:58,950
just ran

43
00:02:59,350 --> 00:03:03,940
and that would be that we had 0 plus 10 in quotes

44
00:03:07,300 --> 00:03:08,320
times 3

45
00:03:08,320 --> 00:03:09,840
divided by 2 minus 1.

46
00:03:09,850 --> 00:03:15,940
Now the important thing here is, this is now not a mathematical equation which will be executed by Javascript,

47
00:03:15,970 --> 00:03:22,510
this is treated as text and therefore Javascript won't even try to execute it in a mathematical way,

48
00:03:22,510 --> 00:03:30,190
instead we can now pass calculation description to this output result thing, so I'm referring to this description

49
00:03:30,190 --> 00:03:31,090
here

50
00:03:31,300 --> 00:03:36,880
and what will now happen is that you see this text here once you reload this page. Again,

51
00:03:36,970 --> 00:03:39,240
this is just the text I just entered,

52
00:03:39,250 --> 00:03:45,160
it looks like some mathematical equation which should be executed but since I'm not using numbers here

53
00:03:45,190 --> 00:03:46,990
but I'm wrapping this in quotes,

54
00:03:46,990 --> 00:03:53,760
I'm telling Javascript, this is some static text don't touch it, don't try to execute it, take it as text.

55
00:03:53,920 --> 00:03:55,970
I could be saying Hi there

56
00:03:56,020 --> 00:04:01,470
in here as well and if I would do that, then we would see Hi there here.

57
00:04:01,600 --> 00:04:08,080
But of course I just want to, in this case, in this application, log my calculation which I effectively

58
00:04:08,080 --> 00:04:15,010
have up there and therefore this is what I use here. If I would use current result in here, Javascript

59
00:04:15,070 --> 00:04:20,680
also wouldn't try to look into this variable, instead it would take this as part of the string and

60
00:04:20,680 --> 00:04:26,860
hence if I now reload, it would say well this here, it would not give us the value which is inside of

61
00:04:26,860 --> 00:04:27,910
current result,

62
00:04:27,910 --> 00:04:35,140
instead it would just take this as some text which it should output. If you would want to use the value

63
00:04:35,140 --> 00:04:35,700
here,

64
00:04:35,860 --> 00:04:42,370
you would have to do something which is called string concatenation which is you build a string from

65
00:04:42,370 --> 00:04:44,540
multiple substrings.

66
00:04:44,680 --> 00:04:49,750
So here, we could say this opening bracket, the opening parentheses here,

67
00:04:49,840 --> 00:04:57,580
that's in a string, then with the plus operator, we add current result, now not between quotes but just

68
00:04:57,580 --> 00:04:58,290
like this

69
00:04:58,330 --> 00:05:06,250
and therefore Javascript will now go ahead and look into this variable and then I will concatenate this

70
00:05:06,310 --> 00:05:06,850
string.

71
00:05:06,970 --> 00:05:09,160
So now again between quotes is this string,

72
00:05:09,160 --> 00:05:15,730
the pluses here are also not between quotes because I don't want to treat the plus operators here as

73
00:05:15,760 --> 00:05:19,090
strings but instead as normal operators.

74
00:05:19,090 --> 00:05:22,000
Now we use plus before with numbers,

75
00:05:22,060 --> 00:05:27,790
Javascript actually can also work with plus if you're using it with strings, then it will not try to

76
00:05:27,790 --> 00:05:30,140
use plus in a mathematical way,

77
00:05:30,160 --> 00:05:37,130
instead it will just combine multiple strings, so multiple text pieces, to a longer text piece and

78
00:05:37,190 --> 00:05:38,460
that's what's happening here.

79
00:05:38,500 --> 00:05:44,530
We're combining this parentheses with the actual value that lives in current result and then with this

80
00:05:44,530 --> 00:05:47,110
part here, to a longer string and

81
00:05:47,120 --> 00:05:54,790
actually here, you should add some whitespace so that in the final text which is created,  you have some

82
00:05:54,880 --> 00:05:58,780
empty space between the plus and the value that's stored in current result.
