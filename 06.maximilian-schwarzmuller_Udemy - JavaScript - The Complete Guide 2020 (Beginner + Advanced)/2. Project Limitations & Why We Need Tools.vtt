WEBVTT
1
00:00:02.320 --> 00:00:04.490
To understand which tools we might need,

2
00:00:04.510 --> 00:00:11.590
let's dig into these potential limitations we might face with basic Javascript projects as we use them

3
00:00:11.590 --> 00:00:13.750
thus far throughout the course.

4
00:00:13.750 --> 00:00:20.980
For example we might need to micromanage all our imports if we're not using Javascript modules or if

5
00:00:20.980 --> 00:00:27.160
we are using them as you saw and as I just explained in the last lecture, we might have a lot of unnecessary

6
00:00:27.190 --> 00:00:28.690
HttpRequests.

7
00:00:28.840 --> 00:00:30.570
So that's one problem we have,

8
00:00:30.910 --> 00:00:31.770
not ideal,

9
00:00:31.780 --> 00:00:37.780
the bigger our project grows, the more we have to manage imports or live with all these requests or both

10
00:00:37.780 --> 00:00:39.560
at the same time.

11
00:00:39.570 --> 00:00:46.040
Another problem we might face at some point which I briefly touched on in the library's section of this

12
00:00:46.040 --> 00:00:49.330
course is that our code is not really optimized,

13
00:00:49.420 --> 00:00:52.960
it's not as small as it could be. Now

14
00:00:52.990 --> 00:00:59.560
thus far we haven't built huge applications in this course but we've certainly written some code.

15
00:00:59.740 --> 00:01:04.270
Now when we write code, we of course use function names which are pretty clear,

16
00:01:04.300 --> 00:01:08.490
we use the variable names which give a clear hint about what's stored in there,

17
00:01:08.500 --> 00:01:15.100
we use a lot of extra whitespace to structure our code or put in other words, we're using a lot of features

18
00:01:15.130 --> 00:01:20.650
that make the code more readable to us humans but which are not important to the computer.

19
00:01:20.650 --> 00:01:28.000
If we would strip out all these features and ship as small of a code bundle as possible, we could load

20
00:01:28.000 --> 00:01:33.390
our page faster because the computer, the browser has to download less bytes.

21
00:01:33.430 --> 00:01:39.180
if we would use shorter function names, then there are less bytes to be downloaded and therefore

22
00:01:39.190 --> 00:01:45.990
the site loads faster but of course to us humans, if we use very short function names like A, B, C, D,

23
00:01:46.150 --> 00:01:51.580
well that would be hard to understand our code so that's something where a tool might be able to help

24
00:01:51.580 --> 00:01:55.300
us. Another potential problem we'll face

25
00:01:55.330 --> 00:02:01.030
and I'll dig deeper into that in a separate course section actually is browser support.

26
00:02:01.030 --> 00:02:06.190
Now as I just said, I do have a browser support section in this course where we take a closer look at

27
00:02:06.190 --> 00:02:06.820
this.

28
00:02:06.850 --> 00:02:12.890
Generally, the problem is that we of course want to use all the latest and greatest Javascript features

29
00:02:12.940 --> 00:02:19.150
when we write code. Well the problem with that is that not all these latest and greatest features are

30
00:02:19.150 --> 00:02:21.280
supported by all browsers.

31
00:02:21.310 --> 00:02:28.210
So in an ideal world, we can write code that uses all these latest features and we can ship code, which

32
00:02:28.210 --> 00:02:33.580
means we can upload code to our web server that actually is a bit older,

33
00:02:33.580 --> 00:02:40.150
so that works on more browsers so that our modern code is maybe automatically translated to older code,

34
00:02:40.330 --> 00:02:43.210
would be amazing if we had a tool for that.

35
00:02:43.270 --> 00:02:49.840
We also, when we write code, when we work on our application, constantly need to reload the web page to

36
00:02:49.840 --> 00:02:52.090
see our changes in effect,

37
00:02:52.090 --> 00:02:57.880
wouldn't it be great if we did not only have a development server but actually a development server

38
00:02:57.880 --> 00:03:01.840
that automatically reloads the page whenever the code changes?

39
00:03:01.990 --> 00:03:03.580
That would be amazing, right?

40
00:03:03.580 --> 00:03:09.400
It can really speed up your development time, your development flow if that happens, if you don't have

41
00:03:09.400 --> 00:03:14.260
to manually press that reload button all the time, so that would be another improvement.

42
00:03:14.260 --> 00:03:20.800
Having a development server which we already used but one which is a bit smarter and last but not least,

43
00:03:20.800 --> 00:03:29.020
something we haven't really done thus far is checking our code quality. Now code quality is a broad term,

44
00:03:29.050 --> 00:03:35.470
there are certain conventions which you should follow but there also are a lot of loose rules or a lot

45
00:03:35.470 --> 00:03:37.780
of ideas and how you could write your code,

46
00:03:37.780 --> 00:03:41.080
there isn't a single right or wrong way of writing code.

47
00:03:41.080 --> 00:03:46.960
Still, you might want to be consistent, so it might be interesting if you could configure your code for

48
00:03:46.960 --> 00:03:54.430
yourself and then automatically check it if your code follows the rules you set up for yourself to ensure

49
00:03:54.550 --> 00:03:58.900
it is properly written and has a good quality.

50
00:03:58.930 --> 00:04:03.670
So now we know about the limitations, the problems we might want to solve,

51
00:04:03.670 --> 00:04:10.210
now it's time to solve them and for that, we can use various tools which thankfully were created and

52
00:04:10.210 --> 00:04:11.670
do exist.

53
00:04:11.720 --> 00:04:14.980
So let me walk you through the different problems we're trying to solve,

54
00:04:14.980 --> 00:04:18.950
which tools can help us with that and why exactly we use that tool.

55
00:04:19.150 --> 00:04:23.970
Important, for most of these tasks, we have more than one tool out there,

56
00:04:24.010 --> 00:04:27.930
I'm walking you through the most popular and commonly used ones here,

57
00:04:28.000 --> 00:04:32.950
of course you can always search for alternatives on your own then and find out if an alternative somehow

58
00:04:32.950 --> 00:04:35.050
suits you better than the option

59
00:04:35.050 --> 00:04:40.010
I'm giving you here. Now let's start with the development server for that.

60
00:04:40.220 --> 00:04:45.860
Now the idea here is that we can serve our application under more realistic circumstances but also as

61
00:04:45.860 --> 00:04:51.170
I just outlined, maybe that we can auto reload the page. Now for that 

62
00:04:51.170 --> 00:04:55.710
thus far we used serve and that did not auto reload the page,

63
00:04:55.730 --> 00:05:01.020
now there are multiple alternatives to serve out there but one particularly interesting one is the

64
00:05:01.020 --> 00:05:01.530
webpack

65
00:05:01.550 --> 00:05:07.460
dev server and I'll come back to why that is so interesting in a second because it's closely related

66
00:05:07.730 --> 00:05:10.400
to the second problem we want to solve,

67
00:05:10.400 --> 00:05:12.480
we need a bundling tool.

68
00:05:12.530 --> 00:05:18.530
The idea behind a bundling tool is that it analyzes all our imports and exports which we have when

69
00:05:18.530 --> 00:05:27.200
we use Javascript modules and that it then combines these different files into a single bundled file

70
00:05:27.230 --> 00:05:34.460
or into a couple of file bundles, so that you don't have these dozens of HttpRequests which need to be

71
00:05:34.460 --> 00:05:41.450
sent but that you can write your code, split up across multiple files which makes it easier to use but

72
00:05:41.450 --> 00:05:42.130
that that code

73
00:05:42.130 --> 00:05:48.560
then before you upload it somewhere is actually merged back into a single file so that you have the

74
00:05:48.560 --> 00:05:56.300
better development experience but ship code which requires less HttpRequests and here, the by far, most

75
00:05:56.300 --> 00:06:02.000
popular tool is webpack. Now webpack of course is related to the webpack

76
00:06:02.000 --> 00:06:08.270
dev server, that simply is the development server that is particularly easy to implement inside of a

77
00:06:08.270 --> 00:06:14.060
webpack setup and I'll walk you through such a basic webpack setup in this module.

78
00:06:14.120 --> 00:06:17.370
So now we can bundle our code, we can serve our code,

79
00:06:17.390 --> 00:06:23.780
we also typically want to optimize our code when we ship it or when we build it for production,

80
00:06:23.780 --> 00:06:29.690
so when we're ready to deploy it onto our real server. During development you typically don't really

81
00:06:29.690 --> 00:06:31.580
care about such optimizations,

82
00:06:31.580 --> 00:06:36.530
they might even be bad because your code might be harder to debug in the development tools

83
00:06:36.530 --> 00:06:41.840
if all the functions were renamed and so on but when you're ready for deploying it, then you want to

84
00:06:41.900 --> 00:06:43.340
optimize your code.

85
00:06:43.340 --> 00:06:48.590
That means you want to shorten function names, remove access whitespace, remove everything which doesn't

86
00:06:48.590 --> 00:06:49.400
break your code

87
00:06:49.430 --> 00:06:56.930
if you remove it and for that, again webpack fortunately already has a couple of plugins built in which

88
00:06:56.930 --> 00:07:05.300
we can utilize to automatically optimize our code once we're ready to deploy it. Now that's the optimization,

89
00:07:05.370 --> 00:07:11.250
we also might want to write modern code and ship code that also works on older browsers

90
00:07:11.250 --> 00:07:13.770
and for that, we need a code compilation tool,

91
00:07:13.830 --> 00:07:20.510
also transpilation called. That simply is a tool which takes our code and transpiles it to code

92
00:07:20.520 --> 00:07:23.310
that also works on older browsers.

93
00:07:23.310 --> 00:07:29.590
Now there, the most popular solution is Babel but we'll not dive into this right now,

94
00:07:29.760 --> 00:07:34.590
instead we'll dive into this later in the browser support module because there's a bit more you need

95
00:07:34.590 --> 00:07:40.500
to know about browser support and how to manage that before you can set up such a tool.

96
00:07:40.500 --> 00:07:46.260
Now last but not least, you might want to check your code quality, so make sure that you follow certain

97
00:07:46.260 --> 00:07:51.120
patterns and conventions, that you consistently write your code in the same way

98
00:07:51.120 --> 00:07:57.170
and for that the most popular tool for Javascript is ESLint which you can also use.

99
00:07:57.180 --> 00:08:01.380
Now I'll walk you through webpack, webpack optimization, webpack

100
00:08:01.380 --> 00:08:07.440
dev server and ESLint in this module. As I mentioned, we'll have a look at Babel and this code compilation

101
00:08:07.680 --> 00:08:09.390
in the browser support module.
