WEBVTT
1
00:00:02.470 --> 00:00:07.620
How can we now output the user entered key-value combination?

2
00:00:07.780 --> 00:00:11.160
We can dynamically store it with this syntax here

3
00:00:11.380 --> 00:00:13.390
but how can we output it?

4
00:00:13.390 --> 00:00:18.220
Well of course you learned how you can access dynamic values, you can also do that with the square bracket

5
00:00:18.220 --> 00:00:19.210
notation.

6
00:00:19.210 --> 00:00:24.900
You can set text content here to the title plus, maybe then a dash that separates it from another

7
00:00:24.900 --> 00:00:29.260
value and then movie.info and then square brackets

8
00:00:29.260 --> 00:00:32.980
and now here we got the extra name right,

9
00:00:32.980 --> 00:00:37.340
that's where we store the property name the user entered so we can use that here, right?

10
00:00:38.060 --> 00:00:44.330
No, this won't work because extra name is a constant in add movie handler, in this function,

11
00:00:44.330 --> 00:00:49.660
we're now in a different function and as you learned, variables and constants are block scoped so we can't

12
00:00:49.670 --> 00:00:53.250
use extra name from this function in this function.

13
00:00:53.360 --> 00:00:55.450
Now I want to be honest, a dirty

14
00:00:55.580 --> 00:01:03.410
way around it would be to turn this in a global variable which you set up there which you assign here

15
00:01:03.830 --> 00:01:05.600
and then use here.

16
00:01:05.690 --> 00:01:10.580
This would be dirty and it would not even work because keep in mind that add movie handler is called

17
00:01:10.580 --> 00:01:16.070
multiple times for different movies where every time, extra name could hold a new value.

18
00:01:16.070 --> 00:01:21.950
Now if we only have one global variable where we store this value, then this will always hold the latest

19
00:01:22.130 --> 00:01:24.320
value the user entered, not all values.

20
00:01:24.650 --> 00:01:29.510
So here if we can output this, we would also only output the latest value,

21
00:01:29.510 --> 00:01:32.390
so that is certainly not a solution we can use,

22
00:01:32.630 --> 00:01:35.050
instead we can do something different.

23
00:01:35.090 --> 00:01:36.750
Let me clear this line here and

24
00:01:36.770 --> 00:01:42.770
instead let's add a new variable, maybe named text, where for the moment I just hold movie.info.title

25
00:01:42.790 --> 00:01:48.350
which is the property we can certainly access because we hardcoded it, we as a developer so we

26
00:01:48.350 --> 00:01:54.800
know it will be there and then maybe add plus and then a dash with whitespace around it

27
00:01:54.890 --> 00:02:02.750
and now I want to go through all properties I have in new movie.info and I know that every property

28
00:02:02.750 --> 00:02:07.390
which is not title will be a property added by the user.

29
00:02:07.400 --> 00:02:13.270
Of course that will only be exactly one property but still, that's the user entered property.

30
00:02:13.280 --> 00:02:16.870
Now how can we go through all key-value pairs in an object?

31
00:02:16.910 --> 00:02:19.350
You learned that in the control structures module,

32
00:02:19.400 --> 00:02:27.110
we have a special for loop for that, for/in. With that we can go through all keys in an object and in this

33
00:02:27.110 --> 00:02:31.340
case, the object for which I want to go is movie.info,

34
00:02:31.340 --> 00:02:38.060
so this nested object inside of movie. This will now go through all properties I have in there and that

35
00:02:38.060 --> 00:02:42.410
will of course include the title property which I don't want to add again,

36
00:02:42.410 --> 00:02:47.380
so in there we can add an if check and check if key is not equal to title and

37
00:02:47.390 --> 00:02:52.790
now here this has to be a string because otherwise if you write it like this, Javascript would look for

38
00:02:52.970 --> 00:03:00.170
a variable named title which it won't find in this function and it would then use the value stored

39
00:03:00.170 --> 00:03:02.330
in this variable for this comparison.

40
00:03:02.330 --> 00:03:07.290
So instead since keys are strings as you learned, we compared it to a string here

41
00:03:07.430 --> 00:03:14.060
and if the key is not title, then we know we're looking at the property the user entered. Well and this

42
00:03:14.060 --> 00:03:16.270
is then what I want to add to my text.

43
00:03:16.400 --> 00:03:25.910
So then we can set text equal to text plus and then maybe a string literal here using this notation with

44
00:03:25.910 --> 00:03:33.830
the back ticks where we can inject the value of key because that will be a key name the user entered,

45
00:03:33.830 --> 00:03:38.930
so whatever the user entered in this field and then maybe a colon,

46
00:03:38.930 --> 00:03:43.230
now this is just a part of that string here, not some Javascript syntax

47
00:03:43.430 --> 00:03:49.370
and then the value and the value of course is what was entered in this field here and we can access

48
00:03:49.370 --> 00:03:56.570
this value by accessing movie info and then with square brackets, the key. This is using this dynamic

49
00:03:56.570 --> 00:04:04.360
property accessing logic, where key is derived dynamically as part of this for/in loop, movie info is 

50
00:04:04.360 --> 00:04:13.640
the object and we want to access the value for the key with that name that is stored in that key constant

51
00:04:13.640 --> 00:04:14.080
here

52
00:04:14.240 --> 00:04:15.930
and we do that with the square brackets.

53
00:04:15.950 --> 00:04:23.060
So with that, we dynamically access the value for whichever property name the user chose. Well and with

54
00:04:23.060 --> 00:04:32.250
that after the for loop, we can set movie el text content equal to text, so equal to that variable which

55
00:04:32.250 --> 00:04:38.550
we adjust inside of that for/in loop. If we do that and we save that and have a look at this and reload

56
00:04:38.550 --> 00:04:49.630
the page and I enter Javascript here, The Complete Guide, level 5 and click add movie, you see this 

57
00:04:49.640 --> 00:04:52.280
is getting output down there as well.

58
00:04:52.370 --> 00:04:59.750
So this now works and this is how we can take advantage of this dynamic property accessing logic and

59
00:04:59.750 --> 00:05:06.500
of the for/in loop to work with property names which I as a developer don't know in advance because

60
00:05:06.500 --> 00:05:11.540
the user could enter anything in here and therefore I'm not trying to guess what the user will enter

61
00:05:11.540 --> 00:05:11.840
here,

62
00:05:12.140 --> 00:05:17.750
instead we just loop through it, excludes the property we know that will be there and then just

63
00:05:17.750 --> 00:05:21.920
dynamically access the value for the property which we don't know in advance.
