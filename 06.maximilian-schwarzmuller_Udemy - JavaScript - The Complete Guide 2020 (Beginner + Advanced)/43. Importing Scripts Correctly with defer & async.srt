1
00:00:02,330 --> 00:00:09,500
Now to conclude this module, let's come back to something we actually started the module with and that's

2
00:00:09,500 --> 00:00:14,210
how we import our scripts into the HTML file.

3
00:00:14,240 --> 00:00:19,760
I'm doing this here at the end of the body tag, at the end of the body section in the document and I'm

4
00:00:19,760 --> 00:00:28,280
doing it here because our scripts rely on the HTML page being rendered. We are accessing items in

5
00:00:28,280 --> 00:00:34,250
the page so to say, in the vendor file where I establish connections to the buttons and so on, to which

6
00:00:34,250 --> 00:00:40,220
I then add event listeners here in the app.js file and in order to establish these connections, we

7
00:00:40,220 --> 00:00:47,780
need to run the scripts after the browser parsed and rendered all the HTML code, otherwise the buttons

8
00:00:47,780 --> 00:00:51,380
to which we want to establish connections simply don't exist.

9
00:00:52,040 --> 00:00:55,130
So that's why I import the scripts down there.

10
00:00:55,130 --> 00:01:00,650
Now this is still not entirely optimal and let me show you why. For this,

11
00:01:00,650 --> 00:01:07,460
open your page here in a new incognito window here in Chrome and I simply use this incognito window here

12
00:01:07,700 --> 00:01:15,050
because this allows me to rule out that what I'm about to show you gets distorted by any extensions

13
00:01:15,080 --> 00:01:17,320
or browser plugins.

14
00:01:17,390 --> 00:01:22,220
So I opened the page here in Chrome, in the incognito window and now we can again open the developer

15
00:01:22,220 --> 00:01:29,000
tools which allow us to have a look behind the scenes and there, I increased them in size a little bit

16
00:01:29,300 --> 00:01:32,010
and there you should go to this performance tab,

17
00:01:32,060 --> 00:01:35,640
you can also click these arrows here if you don't find it here.

18
00:01:35,870 --> 00:01:37,990
Now what's the performance tab?

19
00:01:38,030 --> 00:01:45,140
The performance tab allows us to get an idea of what the browser does in detail when it renders

20
00:01:45,140 --> 00:01:45,920
this page and

21
00:01:45,950 --> 00:01:50,990
there are many things you can do with it but it's a great tool for understanding how the scripts are

22
00:01:50,990 --> 00:01:55,150
loaded, parsed and executed and what might be the issue here.

23
00:01:55,160 --> 00:02:03,380
So with the page being used here, press this record button here and then reload the page by using a

24
00:02:03,380 --> 00:02:07,750
shortcut for it or using the reload button and then stop recording this.

25
00:02:07,790 --> 00:02:12,320
Now you get this profile and this might look confusing at first,

26
00:02:12,350 --> 00:02:15,780
I'm only interested in a short part of this timeline.

27
00:02:15,890 --> 00:02:20,360
Now in this topmost window, you can select the part by holding the mouse button and dragging and I'm

28
00:02:20,360 --> 00:02:25,550
interested in this part where we have these little hills down there you could say, where you have these

29
00:02:25,550 --> 00:02:27,580
vertical lines.

30
00:02:27,610 --> 00:02:33,890
Now if you select this, it gets zoomed in here in the middle and bottommost window and there, you see

31
00:02:33,890 --> 00:02:37,760
which network requests were sent and what the browser did,

32
00:02:37,760 --> 00:02:41,640
so what it parsed, what it executed and so on.

33
00:02:41,660 --> 00:02:46,960
Now what we can see relatively quickly is that we have one long going network request which downloads

34
00:02:46,960 --> 00:02:50,050
the fonts, this kind of distorts everything here

35
00:02:50,060 --> 00:02:56,630
so let me comment out this link here which does load the fonts to not have this distraction in here

36
00:02:56,660 --> 00:02:59,530
so that we can focus entirely on the scripts.

37
00:02:59,750 --> 00:03:05,690
So comment this out in the HTML file so that this is no longer getting used, save the file thereafter

38
00:03:05,840 --> 00:03:07,060
and then let's repeat it,

39
00:03:07,100 --> 00:03:10,790
let's clear this, press the record button, reload this page,

40
00:03:10,790 --> 00:03:12,060
stop recording this,

41
00:03:12,090 --> 00:03:16,970
zoom in here. Now we have a clearer picture of what happened.

42
00:03:17,060 --> 00:03:21,320
What happened is that here in that work tab, we first download the index.html file,

43
00:03:21,320 --> 00:03:25,540
that's the blue part and thereafter the CSS file and the script files.

44
00:03:25,610 --> 00:03:27,460
Now let's go to the bottommost window,

45
00:03:27,490 --> 00:03:32,990
there we see what the browser did in detail and if we zoom in here, which you can do with the mouse

46
00:03:32,990 --> 00:03:40,000
wheel, you see that in the end here we receive a data, that's the downloaded HTML file, if you see, this

47
00:03:40,010 --> 00:03:44,870
roughly lines up, here in network tab it's done downloading the file, that's when this receive, data event

48
00:03:44,870 --> 00:03:51,710
is triggered when it finished loading it and then it starts parsing the HTML code. Now it starts parsing

49
00:03:51,710 --> 00:03:57,440
the HTML code and what you can see is that pretty much at the end of that when it's done parsing

50
00:03:57,440 --> 00:04:05,300
this, it sends off requests to the Javascript files, the CSS file is sent off relatively early, if you

51
00:04:05,300 --> 00:04:10,970
would draw a vertical line down there, that happens early when that gets parsed which makes sense because

52
00:04:10,970 --> 00:04:16,400
we request the CSS files here in the head section but the Javascript files get requested a bit

53
00:04:16,400 --> 00:04:21,200
later because we request them at the bottom of our HTML file.

54
00:04:21,230 --> 00:04:26,790
Now obviously that's not a huge file, so there's not much time difference between but still we request

55
00:04:26,820 --> 00:04:32,870
the Javascript files only after the parsing is done or when it's almost done entirely because we do

56
00:04:32,870 --> 00:04:34,940
that at the bottom of the HTML file.

57
00:04:35,120 --> 00:04:41,030
So that's why we only request the files once we're almost done parsing the HTML document as you can

58
00:04:41,030 --> 00:04:44,900
see with this vertical line. Now what's the implication of that?

59
00:04:44,900 --> 00:04:50,540
Of course the benefit is that the scripts only execute after parsing is done but we also see that we

60
00:04:50,540 --> 00:04:56,750
start parsing and only when we're done, we download the scripts and only once the scripts are downloaded

61
00:04:56,870 --> 00:04:58,010
way over here,

62
00:04:58,100 --> 00:05:02,780
of course that's not that long if we have a look at the milliseconds, I'm only talking about a few milliseconds

63
00:05:02,780 --> 00:05:07,690
here but still, only after this is done, we actually execute the scripts,

64
00:05:07,700 --> 00:05:09,920
these are these yellow blocks you find down there,

65
00:05:09,920 --> 00:05:12,240
these are the two scripts which are getting executed.

66
00:05:12,320 --> 00:05:16,370
The other parts are the stylesheet being parsed and the styles being rendered,

67
00:05:16,370 --> 00:05:17,840
we can ignore that.

68
00:05:17,840 --> 00:05:20,180
So here we execute the scripts,

69
00:05:20,210 --> 00:05:28,880
now what we effectively see is that we start executing the first script at around 930ms and

70
00:05:28,880 --> 00:05:34,230
we're done passing at around 906, 907,

71
00:05:34,250 --> 00:05:40,640
so there are roughly around 20 milliseconds of pause between us being done with parsing the HTML

72
00:05:40,640 --> 00:05:42,720
file and executing the script.

73
00:05:42,830 --> 00:05:47,870
Now these are all very small numbers which we can't even feel when we load the page because we have

74
00:05:47,870 --> 00:05:52,000
small scripts and we have a small, short HTML file

75
00:05:52,160 --> 00:05:57,980
but imagine that our scripts would be longer, that they would take longer to load and execute and that

76
00:05:57,980 --> 00:06:04,220
we have way more HTML code that needs to be parsed. Then it's not that great that we wait for all

77
00:06:04,220 --> 00:06:08,090
this code to be parsed just to start loading the scripts.

78
00:06:08,120 --> 00:06:14,060
We certainly want to execute them after this was parsed because we rely on the parsed content, so that's

79
00:06:14,060 --> 00:06:14,600
fine,

80
00:06:14,660 --> 00:06:20,180
we don't want to execute the scripts earlier but loading them earlier, downloading them from the server

81
00:06:20,210 --> 00:06:20,680
earlier,

82
00:06:20,710 --> 00:06:22,850
that would be a good idea.

83
00:06:22,880 --> 00:06:28,610
Also keep in mind that all the loading is very fast here of course because we're doing this all locally,

84
00:06:28,610 --> 00:06:30,310
we're just accessing the file here,

85
00:06:30,320 --> 00:06:31,920
there is no web server involved,

86
00:06:32,000 --> 00:06:38,750
there is no latency, so this would be slower if we were really serving this webpage and hence we have the

87
00:06:38,750 --> 00:06:40,240
ideal scenario here

88
00:06:40,340 --> 00:06:46,550
and yet we have this unnecessary delay and we certainly want to shrink that delay if we think about

89
00:06:46,550 --> 00:06:48,560
really hosting this on a web server.

90
00:06:48,560 --> 00:06:52,700
We don't want to start loading the scripts once everything was parsed,

91
00:06:52,730 --> 00:06:59,480
we want to load the scripts as early as possible and then still only execute them after everything was

92
00:06:59,480 --> 00:07:00,030
parsed

93
00:07:00,140 --> 00:07:02,940
so we want to get the best of both worlds.

94
00:07:03,050 --> 00:07:09,400
Now of course we can grab the scripts and move them into head section, maybe here below the stylesheet.

95
00:07:09,470 --> 00:07:16,580
Now if we do that and I clear here, this start recording and reload and stop, we get a better picture here.

96
00:07:16,580 --> 00:07:23,020
If I zoom in, here we download the HTML file and now what we see is that we start parsing HTML.

97
00:07:23,180 --> 00:07:30,920
Now we then fetch the styles and the scripts and we pause parsing here as you can see, we pause that,

98
00:07:31,040 --> 00:07:36,660
we only pick it up back here when basically downloading the scripts finished,

99
00:07:36,740 --> 00:07:38,540
we also executed the scripts here.

100
00:07:38,540 --> 00:07:45,250
Now this looks a bit strange, looks like downloaded app.js for longer than it actually took because

101
00:07:45,250 --> 00:07:46,600
we do execute it here

102
00:07:46,600 --> 00:07:48,340
so this is a bit distorted.

103
00:07:48,340 --> 00:07:54,690
The main takeaway here is that we start parsing HTML, then we encounter the script imports, we then

104
00:07:54,700 --> 00:08:01,960
download the scripts and pause parsing therefore, this blocks parsing and then we execute the scripts and

105
00:08:01,960 --> 00:08:04,470
only thereafter we continue parsing.

106
00:08:04,600 --> 00:08:09,490
Now that's of course bad and this also causes an error because now we try to interact with the buttons

107
00:08:09,490 --> 00:08:11,980
on the webpage without those being ready,

108
00:08:11,980 --> 00:08:13,680
so that's also not ideal.

109
00:08:13,690 --> 00:08:20,350
We download the scripts earlier which is great but we now also execute them too early. The solution is

110
00:08:20,350 --> 00:08:25,000
an extra attribute which we can add to the script and that's the defer attribute.

111
00:08:25,000 --> 00:08:31,510
You add it like this, without a special value, just like this to both script tags and defer tells the

112
00:08:31,510 --> 00:08:39,100
browser that it should download these scripts right away but that it should not block parsing HTML

113
00:08:39,100 --> 00:08:45,730
so that it instead should continue with parsing HTML and only execute the scripts after everything

114
00:08:45,730 --> 00:08:46,930
has been parsed.

115
00:08:47,140 --> 00:08:53,300
So it starts downloading early but it doesn't execute the scripts right away once they've finished downloading,

116
00:08:53,350 --> 00:09:00,220
instead it guarantees us that it only executes the scripts once they were downloaded and once parsing

117
00:09:00,220 --> 00:09:02,120
HTML finished.

118
00:09:02,200 --> 00:09:09,230
So if we now save this and we go back, clear this again and create a new snapshot, reload, stop,

119
00:09:09,340 --> 00:09:13,510
if we now zoom in here, we see HTML file is downloaded,

120
00:09:13,630 --> 00:09:22,710
we start parsing it and then here what happens is that I download all the scripts and I execute the

121
00:09:22,710 --> 00:09:24,080
scripts over there,

122
00:09:24,120 --> 00:09:29,340
the two yellow blocks here but parsing HTML did finish before that.

123
00:09:29,340 --> 00:09:34,950
This is the entire HTML document being parsed, this blue block here is the stylesheet, this is not HTML

124
00:09:34,970 --> 00:09:39,500
and these are just some events in between these small blue blocks.

125
00:09:39,600 --> 00:09:46,650
So now, the script downloading and execution doesn't block the HTML code from being parsed and rendered

126
00:09:46,650 --> 00:09:52,200
and instead, that continues and the only thing that does change is that we download the scripts earlier

127
00:09:52,230 --> 00:09:53,260
which is great.

128
00:09:53,430 --> 00:09:59,550
Now again in this scenario here, that's all a bit hard to really see because it's all so super fast

129
00:09:59,550 --> 00:10:06,690
because I serve it locally and we have very small files but the general concept and the difference should

130
00:10:06,690 --> 00:10:07,340
be clear

131
00:10:07,410 --> 00:10:12,960
and of course this matters way more if you really serve this on a server and if you have bigger files

132
00:10:13,530 --> 00:10:19,770
and you can see that all this parsing and script execution is done roughly 20 milliseconds after we

133
00:10:19,770 --> 00:10:26,940
started parsing the HTML document, so that is faster than what we saw previously when we started loading

134
00:10:26,940 --> 00:10:30,430
and then executing the scripts at the bottom of the body tag.

135
00:10:30,660 --> 00:10:36,540
So therefore what you should do when working with Javascript is you should import it like this in your

136
00:10:36,540 --> 00:10:42,990
head section with the defer attribute because this ensures that it gets loaded early but executed

137
00:10:43,080 --> 00:10:51,800
only once parsing HTML finished, so you have the best of both worlds. Now sometimes, you also have scripts

138
00:10:51,860 --> 00:10:57,710
which you want to load early but which you then also want to execute early because maybe they don't

139
00:10:57,710 --> 00:11:03,140
rely on the HTML code, you don't establish a connection to it and therefore you don't care whether

140
00:11:03,140 --> 00:11:05,530
parsing HTML finished or not.

141
00:11:05,720 --> 00:11:13,310
This can also be achieved by using the async keyword instead of the defer keyword. Async works a bit like

142
00:11:13,310 --> 00:11:19,550
defer, it tells the browser to start loading the scripts as early as possible and then the browser is

143
00:11:19,550 --> 00:11:23,280
not blocked but instead continues parsing HTML

144
00:11:23,360 --> 00:11:30,770
but the difference to defer is that with async, the script then executes right away once it was downloaded.

145
00:11:31,130 --> 00:11:34,500
So it does not wait for all the HTML code to be parsed,

146
00:11:34,520 --> 00:11:41,480
instead it executes as early as possible. So then parsing of HTML will be paused until it is executed

147
00:11:41,690 --> 00:11:45,060
and only thereafter it will pick up again. Here

148
00:11:45,130 --> 00:11:51,050
therefore this is not the correct solution because that could lead to the script being executed before

149
00:11:51,350 --> 00:11:57,140
all HTML code has been parsed but in other scenarios where your scripts don't interact with the web

150
00:11:57,140 --> 00:12:03,290
page because you maybe just send some data to some background server, well in such cases, you could use

151
00:12:03,320 --> 00:12:04,380
async.

152
00:12:04,460 --> 00:12:10,610
One other important difference to be aware of is that with async, a script really executes as early as

153
00:12:10,610 --> 00:12:17,290
possible, so as soon as it was downloaded. The order of the script execution is therefore not guaranteed,

154
00:12:17,330 --> 00:12:25,160
the app.js script could execute before the vendor.js script if it is loaded earlier. With defer

155
00:12:25,160 --> 00:12:26,230
on the other side,

156
00:12:26,300 --> 00:12:28,560
the browser guarantees the order.

157
00:12:28,670 --> 00:12:34,900
So even if app.js would be downloaded faster, vendor.js would still execute before app.js,

158
00:12:35,000 --> 00:12:37,160
so the order is guaranteed with defer,

159
00:12:37,160 --> 00:12:42,680
it's not with async, so async is really just a solution if you have a standalone script that doesn't

160
00:12:42,680 --> 00:12:50,560
rely on your HTML content. Also note that defer and async are only available if you have an external

161
00:12:50,560 --> 00:12:51,370
script,

162
00:12:51,400 --> 00:12:58,480
if you have an inline script, so a script which you write right in here, in your HTML file, if you have something

163
00:12:58,480 --> 00:13:03,670
like this, defer and async is ignored because what would that do,

164
00:13:03,670 --> 00:13:05,740
there is no file to download,

165
00:13:05,740 --> 00:13:11,020
this is embedded in the HTML file so this is available once the HTML file was downloaded,

166
00:13:11,020 --> 00:13:16,470
so therefore defer and async doesn't make sense here because there is nothing that would need to be downloaded.

167
00:13:16,630 --> 00:13:22,600
Such scripts are always executed immediately and therefore if those scripts which you embed here rely

168
00:13:22,600 --> 00:13:26,820
on the HTML code, you'll always have to move them to the end of the body section

169
00:13:26,920 --> 00:13:32,790
but in general it's not a good idea to have important or longer scripts here in your HTML file,

170
00:13:32,890 --> 00:13:38,770
you should always use external files for that to keep your HTML files small and focused and don't

171
00:13:38,770 --> 00:13:40,980
bloat it with a lot of scripts.

172
00:13:41,200 --> 00:13:42,310
Also important,

173
00:13:42,310 --> 00:13:48,910
you can't combine an inline script like this and then an import with the source attribute.

174
00:13:48,970 --> 00:13:55,240
If you do that, then the inline script will be ignored and just the external file will be imported, so

175
00:13:55,240 --> 00:13:58,940
you can't combine that. Now with that,

176
00:13:58,960 --> 00:14:03,520
let me remove that and turn this back to defer because that's now our final setup

177
00:14:03,520 --> 00:14:10,300
and if I now save this and I close the developer tools and I reload here and I also comment back in

178
00:14:10,450 --> 00:14:18,550
my font because now I want to have it back, if I do that, you see this still works as before but now

179
00:14:19,590 --> 00:14:25,680
it does so with the help of scripts that are loaded in a more efficient way which does not make a big

180
00:14:25,680 --> 00:14:31,950
difference for this simple application, for this simple demo here but which does matter or could matter

181
00:14:32,070 --> 00:14:35,550
a lot for bigger applications which you really host on a web server.
