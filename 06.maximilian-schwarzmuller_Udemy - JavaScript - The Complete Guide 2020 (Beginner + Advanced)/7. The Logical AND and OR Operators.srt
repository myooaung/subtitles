1
00:00:02,250 --> 00:00:07,650
Now sometimes when writing an if statement, you want to combine conditions. There is not just one condition

2
00:00:07,650 --> 00:00:14,280
which has to be met to execute some code but maybe two or you got two alternative conditions.

3
00:00:14,280 --> 00:00:18,260
So let's say we have three conditions in our code that should be met in an if statement - 

4
00:00:18,330 --> 00:00:20,880
the first one is that name is equal to Max,

5
00:00:20,880 --> 00:00:26,670
the second is that the age is 30 and the third one is that the isAdmin flag is set,

6
00:00:26,670 --> 00:00:34,140
so this could be a boolean value which is set to true, for this user it's always set to true for example.

7
00:00:34,140 --> 00:00:40,080
Now maybe you want to combine these conditions, maybe you want to say if condition a is met and b is

8
00:00:40,080 --> 00:00:43,650
met, then I want to execute the code,

9
00:00:43,650 --> 00:00:47,940
alternatively if the user is an admin, i don't care about a and b,

10
00:00:48,060 --> 00:00:54,480
so I always want to execute some code if isAdmin is true. So then you could say A and B should be met

11
00:00:54,570 --> 00:01:02,730
together, hence the and or condition C is met and translated into code that you can write in Javascript,

12
00:01:03,210 --> 00:01:11,430
and is represented with double ampersand operator, or is represented by the double pipe operator.

13
00:01:11,430 --> 00:01:18,150
So in that case, the condition A and B would be evaluated together and only if both yield true, this combined

14
00:01:18,690 --> 00:01:27,150
condition here yields true and the alternative with the or is evaluated separately and therefore this

15
00:01:27,210 --> 00:01:33,540
overall condition where you combine these three conditions together would only yield true if part 1

16
00:01:33,750 --> 00:01:35,640
or part 2 yields true,

17
00:01:35,670 --> 00:01:41,850
so if isAdmin is true, the code would always run no matter which age or name you have, if isAdmin is

18
00:01:41,850 --> 00:01:47,050
false, then you would only run the code if the name is Max and the age is 30 for example,

19
00:01:47,100 --> 00:01:53,250
so if then both A and B are true, then you wouldn't care about C, if C is true, you don't really care about

20
00:01:53,280 --> 00:01:53,940
A and B,

21
00:01:53,940 --> 00:01:57,330
that's how this concrete example here would work.

22
00:01:57,330 --> 00:02:00,440
Now sometimes, you also want to combine conditions differently,

23
00:02:00,570 --> 00:02:07,440
you don't want to have a and b combined, instead you maybe want to say if condition A is true and either

24
00:02:07,440 --> 00:02:11,220
B or C is true, which is not how this currently would be evaluated,

25
00:02:11,370 --> 00:02:16,590
but if you would want to say this, then you can always use parentheses around your conditions to control

26
00:02:16,590 --> 00:02:17,040
it,

27
00:02:17,100 --> 00:02:24,480
so let's have a look at that. For that back in our calculator, let's say here, we do check for add, subtract,

28
00:02:24,480 --> 00:02:25,460
multiply and divide,

29
00:02:25,470 --> 00:02:31,020
right? Now the problem is if calculate results should be called with any other value which of course

30
00:02:31,020 --> 00:02:35,940
it isn't here in our code but let's say we're sharing this code with a colleague and this colleague

31
00:02:35,940 --> 00:02:44,130
tries to run this with just a value of div instead of divide because he thinks that also works,

32
00:02:44,700 --> 00:02:46,750
then our code currently would break right.

33
00:02:46,770 --> 00:02:54,210
If I call this with div here and I have let's say 5 and then I want to divide this by 2, then you see

34
00:02:54,240 --> 00:02:59,170
the end result isn't updated and here indeed, I get an invalid output.

35
00:02:59,340 --> 00:03:02,810
Now this is the case because div is not a case handled here.

36
00:03:02,880 --> 00:03:07,950
Now maybe we don't want to change the logic how we handle that here but we want to make sure that we

37
00:03:07,950 --> 00:03:11,530
don't try to create an output or write to a log

38
00:03:11,700 --> 00:03:18,330
if we meet none of these values. So then we could add another if statement here which executes totally

39
00:03:18,330 --> 00:03:23,100
standalone, detached from the other if statements so they don't work together magically or anything

40
00:03:23,100 --> 00:03:34,180
like that but here we could check if calculation type is not equal to add and, now the double ampersand

41
00:03:34,210 --> 00:03:45,620
operator, calculation type also is not equal to subtract and calculation type and now I'm running out of space,

42
00:03:45,660 --> 00:03:51,510
so what we can do is we can auto format and this automatically splits this across multiple times, you

43
00:03:51,510 --> 00:03:56,700
can absolutely do that, you can write all these conditions combined in one line or you split them in

44
00:03:56,700 --> 00:04:02,880
multiple lines. You don't have to split after the ampersand operator, that's just a recommendation, this

45
00:04:02,880 --> 00:04:07,890
code would also be valid but it's harder to read, so therefore this is what my auto formatting tool gives

46
00:04:07,890 --> 00:04:14,550
me, it auto formats like this, you can generally format in whichever way you want but this also is

47
00:04:14,550 --> 00:04:21,030
a syntax, a coding style which you will find in many other resources so it's the one I will use.

48
00:04:21,030 --> 00:04:27,200
So now here, I also add another condition, if calculation type is not equal to multiply

49
00:04:27,420 --> 00:04:34,020
and last but not least if calculation type also is not equal to divide, then we know we have none of the

50
00:04:34,020 --> 00:04:35,580
values we're checking up here,

51
00:04:36,180 --> 00:04:43,020
so then we maybe don't want to execute this code and therefore here what we can do in this block is

52
00:04:43,020 --> 00:04:44,340
we can return.

53
00:04:44,340 --> 00:04:50,730
Remember, if you call return, if you use the return keyword in a function, that means that this function

54
00:04:50,730 --> 00:04:56,220
returns a value, doesn't really matter to us here, we don't expect a value, we don't store it, we don't do

55
00:04:56,220 --> 00:05:02,340
anything with it but it also means that code after the return statement is not executed and this is

56
00:05:02,340 --> 00:05:08,490
indeed a common pattern, that you check some condition and if it's not met, you know running this function,

57
00:05:08,490 --> 00:05:13,380
running the rest of this function doesn't make sense because it won't work with the values you're giving

58
00:05:13,380 --> 00:05:15,650
me and therefore you might want to return.

59
00:05:15,750 --> 00:05:20,160
Hence we could also grab this if statement and put it right to the top of this.

60
00:05:20,190 --> 00:05:26,250
This means that if calculation type is not one of the values we support down there, there is no sense

61
00:05:26,250 --> 00:05:27,770
in continuing with this function

62
00:05:27,780 --> 00:05:31,770
so we return right away and therefore the other code won't even execute.

63
00:05:32,220 --> 00:05:38,690
If on the other hand, you have a calculation type that is add or subtract or multiply or divide, then

64
00:05:38,700 --> 00:05:43,140
you would continue because this total condition here only yields true

65
00:05:43,260 --> 00:05:47,570
if every sub condition yields true because we combine them with an and.

66
00:05:47,670 --> 00:05:54,810
So this means only if it is not add and not subtract and not multiply and not divide, only then that we

67
00:05:54,810 --> 00:06:01,620
return. If it is subtract, well then this here is returning false because we're checking for it not being

68
00:06:01,620 --> 00:06:02,000
equal,

69
00:06:02,010 --> 00:06:06,600
so this would return false if it is subtract, if calculation type is subtract and therefore this whole

70
00:06:06,600 --> 00:06:10,800
condition would return false and therefore this code wouldn't run and we would continue with the next

71
00:06:10,800 --> 00:06:11,730
lines.

72
00:06:11,820 --> 00:06:14,860
So this is how that works and how we can combine conditions,

73
00:06:14,940 --> 00:06:22,440
in this case with the and operator but of course in other cases, you might be interested in the or

74
00:06:22,440 --> 00:06:27,360
operator because you also have multiple conditions where one of them should be met.

75
00:06:27,360 --> 00:06:37,760
Actually we could rewrite this with the or operator by checking for equality. We could say if calculation

76
00:06:37,760 --> 00:06:40,160
type is equal to add,

77
00:06:40,190 --> 00:06:47,990
so now I'm not checking for inequality but for equality or calculation type is equal to subtract

78
00:06:50,430 --> 00:06:56,570
or now again I'll structure this across multiple lines here to make it a bit easier to read

79
00:06:59,940 --> 00:07:00,900
and now here

80
00:07:00,900 --> 00:07:09,830
I'll check if calculation type is equal to multiply or if calculation type is equal to divide,

81
00:07:09,840 --> 00:07:13,950
so now if any of these is true, this entire condition will return true.

82
00:07:13,950 --> 00:07:17,670
So if the calculation type is multiply, this will return true,

83
00:07:17,670 --> 00:07:22,310
the others will return false but this returns true and therefore this whole condition will return true

84
00:07:22,350 --> 00:07:28,740
because with or, the whole condition returns true if one of the sub conditions returns true. With and,

85
00:07:29,010 --> 00:07:35,970
the whole condition only returns true if all sub conditions return true, here one of them suffices.

86
00:07:35,970 --> 00:07:41,070
So here we make it into the if block if at least one of them is true and therefore now we could take

87
00:07:41,100 --> 00:07:47,340
all that code here and remove it from there and instead move it into this if block

88
00:07:47,340 --> 00:07:51,910
and therefore this code would only execute if one of these conditions is met.

89
00:07:51,930 --> 00:07:57,270
This means we can now remove this check, comment it out for example because now we're checking for the

90
00:07:57,270 --> 00:07:58,360
opposite.

91
00:07:58,500 --> 00:08:01,910
Now typically, you would want to use this approach here

92
00:08:01,920 --> 00:08:07,470
however because now we have a lot of code nested into the if block which can make it a bit harder to read

93
00:08:07,470 --> 00:08:15,190
and understand. So therefore checking this instead of having this if statement here makes more sense

94
00:08:15,300 --> 00:08:21,330
but technically, you could use both and this also shows you how you can use and or the or operator

95
00:08:21,570 --> 00:08:22,170
and it's of course

96
00:08:22,170 --> 00:08:25,470
needless to say that you can also combine them in one condition

97
00:08:25,470 --> 00:08:33,030
if you have and and or in one condition. So now with that if I show this to you, with that added, you'll

98
00:08:33,030 --> 00:08:40,930
see that now if I try to divide by two, we get nothing down there, it doesn't change because this entire

99
00:08:40,930 --> 00:08:44,230
function doesn't even execute because we return here

100
00:08:44,230 --> 00:08:49,190
if we pass in a calculation type that's not one of these four values and

101
00:08:49,200 --> 00:08:53,290
in this case I do pass in div here which is not one of the four values

102
00:08:53,290 --> 00:08:54,560
hence we don't continue.

103
00:08:54,670 --> 00:09:01,140
If I change this back to divide here, you will of course see that now if we reload here and now we divide,

104
00:09:01,140 --> 00:09:03,000
this works again.

105
00:09:03,000 --> 00:09:07,290
So this is how you can use the and and or operators to combine conditions.
