1
00:00:02,490 --> 00:00:04,080
So that's arrays,

2
00:00:04,080 --> 00:00:06,000
what about objects?

3
00:00:06,000 --> 00:00:12,780
As I mentioned, objects are great for grouping data together and you create objects with curly braces

4
00:00:12,780 --> 00:00:18,720
here and then you can have multiple key-value pairs separated by commas in them.

5
00:00:18,720 --> 00:00:24,960
So let's create an object, let's say we don't just want to add the number which we added to our log but

6
00:00:24,960 --> 00:00:30,810
a more detailed log information package if you will because the number alone of course doesn't tell

7
00:00:30,810 --> 00:00:31,410
us much,

8
00:00:31,410 --> 00:00:35,340
it would be interesting to log the result before we added the number,

9
00:00:35,340 --> 00:00:41,520
the operation itself so that we can add items to the log not just here but on all these functions and

10
00:00:41,520 --> 00:00:47,910
we can then just attach the information, whether that was an addition or a subtraction operation and therefore,

11
00:00:47,940 --> 00:00:52,530
we need a more complex piece of data that we manage in the list.

12
00:00:52,530 --> 00:00:59,490
This is a great scenario for objects because now we need to manage multiple pieces of data that are

13
00:00:59,490 --> 00:01:08,520
kind of related and these pieces of data then in turn are managed as a list of these pieces of data

14
00:01:08,550 --> 00:01:11,040
because we have multiple such actions.

15
00:01:11,040 --> 00:01:17,400
So here, we could add a new constant let's say because I never plan on editing this which I'll name log

16
00:01:17,430 --> 00:01:23,520
entry and this should hold such an object, which you as you learned create by adding opening and closing curly

17
00:01:23,520 --> 00:01:24,720
braces.

18
00:01:24,720 --> 00:01:30,660
Now of course we also use curly braces here for creating the function but that's different, here

19
00:01:30,840 --> 00:01:35,640
we use that after the function keyword, after the name of the function and the list of parameters,

20
00:01:35,640 --> 00:01:38,690
this is a pattern Javascript detects which tells it

21
00:01:38,910 --> 00:01:43,850
these curly braces should now hold the function body. On the other hand here,

22
00:01:43,860 --> 00:01:46,410
we have no function keyword and nothing like that.

23
00:01:46,410 --> 00:01:51,910
Therefore this tells Javascript, since it's on the right side of the equal sign where you always define

24
00:01:51,910 --> 00:01:56,130
the values for something, for a variable or for whatever you're working with,

25
00:01:56,160 --> 00:01:59,430
this tells Javascript OK, you want to create an object.

26
00:01:59,430 --> 00:02:05,250
Now you can create an object like this, an empty object but that's not too useful arguably.

27
00:02:05,760 --> 00:02:12,930
Now what you can do instead of course is you can add key-value pairs, so pairs of identifiers and values

28
00:02:12,990 --> 00:02:15,940
which you store in these identifiers.

29
00:02:15,960 --> 00:02:19,070
Now often you will write object across multiple lines,

30
00:02:19,110 --> 00:02:20,350
that's not required,

31
00:02:20,370 --> 00:02:23,760
you can do it all in one line just for readability sake,

32
00:02:23,750 --> 00:02:30,320
often you split it across multiple lines and then you can also of course indent to make it more readable

33
00:02:30,330 --> 00:02:37,110
and here you could for example add a let's say operation key, the key names are totally up to you,

34
00:02:37,110 --> 00:02:42,080
you could name this op or operation or whatever you want and then separated with a colon,

35
00:02:42,090 --> 00:02:49,710
you add the value. Now values can be anything, can be strings, numbers, arrays or other objects,

36
00:02:49,710 --> 00:02:52,510
you can also have objects in objects.

37
00:02:52,560 --> 00:02:56,060
So here as an operation, I'll store a string which says add.

38
00:02:56,160 --> 00:03:01,350
So this is kind of my identifier you could say that when we see that log entry later in the output, we

39
00:03:01,350 --> 00:03:02,060
see OK,

40
00:03:02,130 --> 00:03:06,190
that was the operation where we added two numbers.

41
00:03:06,370 --> 00:03:08,910
Now of course I then also want to store these two numbers,

42
00:03:09,060 --> 00:03:14,540
so I have my let's say number one or my previous results,

43
00:03:14,550 --> 00:03:19,320
so the result before the operation, you can again use any key name you want here

44
00:03:19,470 --> 00:03:21,700
and then again separated with a colon,

45
00:03:21,720 --> 00:03:27,150
the value, here the value of course should be a number and it should be my initial result to be precise

46
00:03:27,180 --> 00:03:29,700
because that is my result

47
00:03:29,700 --> 00:03:37,620
before we perform this operation and we added the number. Now we also of course need the value which

48
00:03:37,620 --> 00:03:41,930
we added, so we could name this number or operand,

49
00:03:42,060 --> 00:03:45,510
so kind of the value we added to the previous result,

50
00:03:45,540 --> 00:03:47,390
I'll name it number

51
00:03:47,610 --> 00:03:54,720
and here again separated by colon, we now set a value to this identifier and here, that would be my entered

52
00:03:54,900 --> 00:03:58,790
number because that is the number I added to the previous result

53
00:03:59,160 --> 00:04:04,890
and maybe we also want to add the result after the operation here in our log entry.

54
00:04:04,890 --> 00:04:09,990
So that could be the result or a new result or whatever you want to name it

55
00:04:09,990 --> 00:04:16,410
and here I would simply use current result because we change current result here which means two lines

56
00:04:16,410 --> 00:04:17,180
after that,

57
00:04:17,340 --> 00:04:23,100
it's still that changed current result and therefore I want to add it here to my log entry.

58
00:04:23,100 --> 00:04:28,560
Now it's the log entry which I push here on to the log entries array,

59
00:04:28,560 --> 00:04:38,510
so that log entry object and then here, I want to log the entire array to my console. If we do this and

60
00:04:38,540 --> 00:04:43,470
I reformat my code to use two blanks here, two whitespaces for indentation,

61
00:04:43,570 --> 00:04:51,120
if we do that and I now reload, let me again enter any number here, click plus

62
00:04:51,250 --> 00:04:55,780
and now you see here we have an array and this is just shortened in the developer tools, if I click

63
00:04:55,780 --> 00:05:02,950
this arrow it's expanded, an array with index one, so with the first element at this index being an object

64
00:05:02,980 --> 00:05:07,720
as you can see and if we expand this, we see the full object and we see in that object we have a number

65
00:05:07,720 --> 00:05:14,530
key with the value of 66, the operation key with a value of add which is a string, here logged with double

66
00:05:14,560 --> 00:05:21,040
quotes because that does not reflect the quotes we used necessarily, both are available interchangeably

67
00:05:21,040 --> 00:05:27,280
in the developer tools here simply use double quotes. The previous result and which was zero and the

68
00:05:27,280 --> 00:05:29,560
new result after the operation

69
00:05:29,560 --> 00:05:34,680
and if I add another element here, I get a new array, if expand this we see that new element

70
00:05:34,780 --> 00:05:40,240
and if I explained this we see our second operation where the number was 2 which is correct.

71
00:05:40,250 --> 00:05:46,000
It was still an add operation, before we had a result of 66 and now we added 68.

72
00:05:46,060 --> 00:05:51,280
So this is how we can create and use objects.

73
00:05:51,280 --> 00:05:57,350
Now before we use that everywhere, let me show you how you can extract information from such an object because

74
00:05:57,350 --> 00:05:59,410
it's also something you sometimes need to do.
