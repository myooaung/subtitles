WEBVTT
1
00:00:02.340 --> 00:00:09.090
So let's now dive into a concrete example and attached you find a basic project where I give you some

2
00:00:09.360 --> 00:00:15.210
Javascript code I wrote and a dist folder with an index.html file and some styles and also two webpack

3
00:00:15.240 --> 00:00:20.830
files and a package.json file. Download and extract this attached project and then in there,

4
00:00:20.880 --> 00:00:27.270
open it in your editor, open the terminal there and first of all run npm install of course to install

5
00:00:27.300 --> 00:00:28.380
all the dependencies

6
00:00:28.380 --> 00:00:35.850
this project needs which are simply all these build tools like webpack. Thereafter, you can run npm

7
00:00:35.850 --> 00:00:38.050
run build dev.

8
00:00:38.100 --> 00:00:42.610
Now I told you to measure production performance and we will do so later

9
00:00:42.720 --> 00:00:44.180
but just to see what we got

10
00:00:44.190 --> 00:00:50.310
let's speed up that development server for now. So this will now open that development server and once

11
00:00:50.310 --> 00:00:53.700
you visit this page, you will find this basic application here.

12
00:00:53.770 --> 00:00:54.390
Now important,

13
00:00:54.390 --> 00:01:02.760
visit this page in an incognito tab so that you have no other plugins or browser extensions interfere

14
00:01:02.760 --> 00:01:04.010
with your code.

15
00:01:04.020 --> 00:01:10.580
Now what you got here is in the end a basic site where you have a bunch of dummy products,

16
00:01:10.790 --> 00:01:17.900
you can also add a new product here and it will be added at the top here as you can tell and you can

17
00:01:17.900 --> 00:01:23.960
then also delete a product here and interact with your application like that.

18
00:01:23.990 --> 00:01:27.400
So it's a very simple project here, a very simple web site,

19
00:01:27.440 --> 00:01:33.680
of course all the interactions you saw here are driven with the help of Javascript here.

20
00:01:33.680 --> 00:01:38.700
So here we have three script files which in the end make sure that what you see on the screen

21
00:01:38.750 --> 00:01:40.640
works the way you see it.

22
00:01:41.900 --> 00:01:49.010
Now let's see how we could approach optimizing this app here and of course it's also important to realize

23
00:01:49.010 --> 00:01:51.030
that this is not a slow app,

24
00:01:51.040 --> 00:01:56.620
it has no huge performance issues as you can tell, everything works quite smoothly here.

25
00:01:56.630 --> 00:02:02.720
Now of course because I'm on a fast device here, I have a fast Internet connection but also in general

26
00:02:02.750 --> 00:02:09.680
because even though I added some problems to the code here, it's not horrible code and it's also not

27
00:02:09.680 --> 00:02:11.460
that large of an application

28
00:02:11.600 --> 00:02:17.690
but issues like the ones I added here could add up in a bigger application and therefore fixing them

29
00:02:17.840 --> 00:02:21.590
as we're going to do it throughout this module is a good idea.

30
00:02:21.650 --> 00:02:26.780
Now let's first of all have a look at how we can analyze this application with the help of the browser

31
00:02:26.780 --> 00:02:30.790
dev tools and there are a couple of things we can have a look at there.

32
00:02:30.890 --> 00:02:33.600
Now again, keep in mind this is the development mode code

33
00:02:33.620 --> 00:02:38.780
therefore it's not fast, it's not optimized but to walk you through the different tools we have it is

34
00:02:38.780 --> 00:02:47.180
of course fine to use. Now one tool we can use to find out how often we interact with DOM and what we

35
00:02:47.180 --> 00:02:50.540
affect in the DOM is the elements tab in the dev tools

36
00:02:50.540 --> 00:02:53.030
and here I'm talking about the Chrome dev tools,

37
00:02:53.030 --> 00:02:58.580
most browser dev tools have similar tabs or tools built in but Chrome has really great development

38
00:02:58.580 --> 00:02:59.100
tools and

39
00:02:59.110 --> 00:03:03.930
therefore I'll use it for this section, so the elements tab here's the first one.

40
00:03:03.950 --> 00:03:08.570
Now let's reload this page and let's have a look at one example,

41
00:03:08.570 --> 00:03:12.740
let's expand the unordered list here so that we can see all the list items here

42
00:03:12.890 --> 00:03:18.020
and now watch the list items here on the right, not on the left but on the right when I click delete

43
00:03:18.110 --> 00:03:24.710
on a carpet, watch it on the right, you see these items all were highlighted.

44
00:03:24.710 --> 00:03:31.040
Now Chrome highlights the items here which actually were touched by it,

45
00:03:31.060 --> 00:03:35.600
so which were changed or which were added or re-rendered

46
00:03:35.600 --> 00:03:41.150
and of course this already gives us one hint at something which might not be perfect at the moment. When

47
00:03:41.150 --> 00:03:44.700
I delete for example the last item here, the t shirt,

48
00:03:44.810 --> 00:03:50.450
it's a bit unexpected that all the other items are changed as well, so maybe that is something we can

49
00:03:50.480 --> 00:03:51.670
optimize.

50
00:03:51.830 --> 00:03:54.200
Now we get other tabs which are interesting as well,

51
00:03:54.200 --> 00:04:00.620
for example the network tab. Here we can find out how much code we're downloading, how long it takes and

52
00:04:00.620 --> 00:04:02.930
how many round trips we have.

53
00:04:02.930 --> 00:04:08.400
So if we reload this starting page, here we see we have a couple of requests.

54
00:04:08.410 --> 00:04:12.810
Now the last two requests are only related to our development setup,

55
00:04:12.880 --> 00:04:14.840
they will not be there in production mode,

56
00:04:14.890 --> 00:04:18.950
the first three requests are always there because we have our HTML page,

57
00:04:18.980 --> 00:04:21.820
we have some CSS code, we have some Javascript code.

58
00:04:21.820 --> 00:04:23.940
Now this code is not optimized at all,

59
00:04:23.950 --> 00:04:29.140
instead it has a bunch of development only code added to it and therefore you can tell these files are

60
00:04:29.140 --> 00:04:31.340
quite large, especially the Javascript file,

61
00:04:31.390 --> 00:04:34.510
it has the size of over 1mb which is really big,

62
00:04:34.720 --> 00:04:37.130
so that will be smaller in production of course.

63
00:04:37.210 --> 00:04:43.630
Now since I'm already using webpack here, what we don't have here is extra HTTP round trips.

64
00:04:43.840 --> 00:04:48.070
I am using multiple files here and I do import them into each other

65
00:04:48.160 --> 00:04:55.810
but since we have webpack here, they are actually bundled together, so webpack ensures here that we don't

66
00:04:55.810 --> 00:05:02.140
have too many round trips, so we already have this optimization. The size again will not be bad in production

67
00:05:02.140 --> 00:05:07.180
mode, in development mode of course it is an issue but we will also optimize this for production mode

68
00:05:07.450 --> 00:05:12.680
because in the production mode webpack config, the mode is set to production and this will lead webpack

69
00:05:12.730 --> 00:05:17.650
to shrink our code and optimize it even more as we will see in a second.

70
00:05:17.680 --> 00:05:24.130
So here we have no huge issue but I still want to show you an issue we could have if this 1mb

71
00:05:24.160 --> 00:05:26.590
code would be our final output,

72
00:05:26.710 --> 00:05:31.510
it isn't here but imagine it would be because here in the dev tools, you can do a couple of interesting

73
00:05:31.510 --> 00:05:32.310
things.

74
00:05:32.410 --> 00:05:37.840
First of all, make sure you disabled cache here in the network tab so that the browser doesn't cache as

75
00:05:37.840 --> 00:05:44.710
long as you have the dev tools open here and then here on this dropdown where you see online, you can

76
00:05:44.710 --> 00:05:52.510
throttle your internet speed. Now for example here we could choose slow for g, to simulate our slower network

77
00:05:52.510 --> 00:06:02.320
speed and if we do that, you will see this now reloads and it spins and spins here and now you see when

78
00:06:02.320 --> 00:06:05.770
I click this button here, I get errors here.

79
00:06:05.770 --> 00:06:07.560
This is not an interactive page,

80
00:06:07.570 --> 00:06:10.920
we see something but I'm not able to do something,

81
00:06:11.020 --> 00:06:16.810
I actually reloaded the page here because Javascript was missing, Javascript here prevents the default

82
00:06:17.140 --> 00:06:23.500
but because Javascript is 1mb big and we're faking a slow connection, it takes too long to download

83
00:06:23.500 --> 00:06:30.910
Javascript and therefore our application is actually even broken because this button isn't handled correctly.

84
00:06:30.910 --> 00:06:36.790
So here we already have an example of why a too-large script file could be a problem.

85
00:06:36.820 --> 00:06:40.740
Now again, here it actually isn't too big, this is just a development mode

86
00:06:40.810 --> 00:06:46.060
but if that would be your production ready output, you would want to do everything you can to shrink

87
00:06:46.060 --> 00:06:46.530
it.

88
00:06:46.690 --> 00:06:48.880
So here, I'll disable throttling,

89
00:06:48.880 --> 00:06:52.220
I just wanted to highlight what the problem can be here.

90
00:06:52.450 --> 00:06:53.140
So let's move on,

91
00:06:53.140 --> 00:06:53.980
what else do we have?

92
00:06:54.550 --> 00:06:59.800
Well we have the performance tab which sounds important if we talk about performance and there you can

93
00:06:59.800 --> 00:07:01.340
also do this throttling,

94
00:07:01.360 --> 00:07:08.170
you can also do CPU throttling here to simulate a slower CPU, for example if I set to six times

95
00:07:08.290 --> 00:07:13.420
slow down, by the way you can open this menu by clicking the gear icon here in case you don't have it

96
00:07:13.420 --> 00:07:14.100
yet,

97
00:07:14.320 --> 00:07:20.230
if I set this to six times slow down, we could check whether our app now is a bit slower.

98
00:07:20.230 --> 00:07:25.060
Now this page here actually still is pretty fast because it doesn't have that complex of a script

99
00:07:25.060 --> 00:07:31.390
on it but if you had a page with a lot of complex animations running or a lot of complex interactions,

100
00:07:31.720 --> 00:07:37.330
then you could use CPU slow down here to check whether it might have issues on slower devices.

101
00:07:38.740 --> 00:07:46.330
The memory tab allows you to do more things than just throttling though, you can record performance here

102
00:07:46.660 --> 00:07:48.730
and then analyze it in detail.

103
00:07:48.760 --> 00:07:54.880
So for example here I'll turn on throttling, now click that record button, click on the delete on any

104
00:07:54.880 --> 00:07:59.230
item and click on the record button again or click on stop down there.

105
00:07:59.230 --> 00:08:05.010
Now what you'll get is such a profile here and you'll see, there is a lot on the screen,

106
00:08:05.020 --> 00:08:06.630
so what do we have here?

107
00:08:06.700 --> 00:08:11.580
Now for one here you see screenshots of the app over time so you see how it changed,

108
00:08:11.740 --> 00:08:15.010
you see that here because I have this screenshot checkmark here,

109
00:08:15.010 --> 00:08:22.330
you could of course remove that to not take screenshots. You can also show a memory timeline so

110
00:08:22.330 --> 00:08:24.730
that you can see memory consumption,

111
00:08:24.740 --> 00:08:29.280
this can be helpful for analyzing memory leaks but for the moment we don't need it

112
00:08:29.680 --> 00:08:31.240
and then you have all this part here,

113
00:08:31.240 --> 00:08:32.770
what is this all about?

114
00:08:32.770 --> 00:08:37.180
Well this is the timeline of the snapshot you captured in the end here.

115
00:08:37.210 --> 00:08:43.510
Now here, you see the work that was done and at the bottom if you increase this here, you see a breakdown

116
00:08:43.510 --> 00:08:49.030
of the overall work and you'll see for the entire snapshot I took, most of the time it was not doing

117
00:08:49.030 --> 00:08:54.010
anything, which is good because that means it is able to capture user input.

118
00:08:54.130 --> 00:09:02.140
You see that around 100 milliseconds were taken for scripts to run and then we had some rendering on

119
00:09:02.140 --> 00:09:06.810
the page going on, some painting which is in the end related to rendering,

120
00:09:06.850 --> 00:09:13.210
so these steps together are basically which bring something onto the screen and some system work which

121
00:09:13.600 --> 00:09:14.560
also was done,

122
00:09:14.560 --> 00:09:17.280
now of course the exact numbers will be different for you.

123
00:09:18.800 --> 00:09:26.180
Now we see here in the timeline when which tasks were executed, for example back here we have nothing

124
00:09:26.180 --> 00:09:31.940
going on, nothing is going on here. You can simply press and hold to drag here and select a part of

125
00:09:31.940 --> 00:09:34.940
that screen which is then zoomed in here at the bottom,

126
00:09:35.000 --> 00:09:40.540
for now I'll not zoom in but just increasing this again. Now we see some work is going on here,

127
00:09:40.550 --> 00:09:41.320
right,

128
00:09:41.390 --> 00:09:46.580
so maybe we zoom in this part by simply holding and dragging and leave and go

129
00:09:46.670 --> 00:09:52.700
and now we zoom in here in this detail analysis at the bottom. Now what we see down there are a couple

130
00:09:52.700 --> 00:09:53.720
of things,

131
00:09:53.870 --> 00:09:55.920
we see the frames per second

132
00:09:55.940 --> 00:10:02.770
we have here, we see user interactions, for example here that we had a mouse up event because we clicked

133
00:10:02.770 --> 00:10:05.420
on a button and we have the main thread

134
00:10:05.470 --> 00:10:08.290
and you learned that Javascript runs on a single thread,

135
00:10:08.290 --> 00:10:10.490
well that is that thread on which it ran

136
00:10:10.750 --> 00:10:15.910
and there you see that Javascript ran because we had a click event to which we listened

137
00:10:15.910 --> 00:10:18.780
and we also see that here already, we have a problem.

138
00:10:18.790 --> 00:10:25.480
This is marked in red by the dev tools here for me because the handler took 92.26

139
00:10:25.480 --> 00:10:29.150
milliseconds which is quite long.

140
00:10:29.230 --> 00:10:33.470
We then see that because of the click, a function call was triggered

141
00:10:33.610 --> 00:10:38.900
and if you click on it, you even see in which file this function sits and which function it was

142
00:10:38.930 --> 00:10:42.620
so you can find out which function executed there.

143
00:10:42.650 --> 00:10:50.250
Now you can then have a look at this by scrolling down here on the y-axis to see the call stack. You

144
00:10:50.270 --> 00:10:56.200
see that the delete product function was called, you see that it took 6.4 milliseconds,

145
00:10:56.240 --> 00:11:02.780
by the way you always have total time and self time, total time simply is the amount of work this function

146
00:11:02.780 --> 00:11:09.320
took and all the other functions that were called inside of the functions took and self time is the

147
00:11:09.320 --> 00:11:14.360
time this function took without the work of the included functions, generally it's the total time that

148
00:11:14.360 --> 00:11:15.800
matters to you.

149
00:11:15.830 --> 00:11:21.710
So we have delete product, this in turn called render products which court which took 6.4

150
00:11:22.040 --> 00:11:28.070
milliseconds and then here we zoom in even more with the mouse wheel, we see that an anonymous

151
00:11:28.070 --> 00:11:32.660
function was executed there, append child was used.

152
00:11:32.720 --> 00:11:38.140
We see that we seem to reach out to HTML here, the small blue bars here,

153
00:11:38.150 --> 00:11:39.850
that's when we reached out to HTML,

154
00:11:39.860 --> 00:11:46.060
we parsed our HTML code, so we probably interacted with the DOM here in the script and so on.

155
00:11:46.060 --> 00:11:51.620
So you can really dive into that and see how long operations took and how long a problematic operation

156
00:11:51.620 --> 00:11:53.280
overall took.

157
00:11:53.330 --> 00:11:59.260
Now of course you should always keep an eye on the overall operation because here we have 100 milliseconds

158
00:11:59.270 --> 00:12:03.430
which is not great but of course which is still relatively quick.

159
00:12:03.500 --> 00:12:08.210
Nonetheless, this might be one thing we might be able to improve, though you should keep in mind that

160
00:12:08.210 --> 00:12:09.690
we're still in development mode,

161
00:12:09.770 --> 00:12:15.050
so this is not really what the users will have in the end, so I'll turn off throttling and now move on.

162
00:12:15.140 --> 00:12:16.650
This is the performance tab

163
00:12:16.820 --> 00:12:23.020
and I'll give you further resources to explore everything you can do here in the lecture after this one.

164
00:12:23.060 --> 00:12:27.890
First of all let's move on to other tabs though and there for example we have the memory tab. The memory

165
00:12:27.890 --> 00:12:34.880
tab allows you to take memory snapshots and here the heap snapshot is the most interesting one. You can

166
00:12:34.880 --> 00:12:41.840
take a snapshot by clicking on take snapshot at the bottom here or on this take snapshot button here.

167
00:12:43.060 --> 00:12:48.680
Now if you take a snapshot, you get such a memory snapshot which looks very complex,

168
00:12:48.730 --> 00:12:53.620
in the end this gives you everything, shows you everything which is stored in memory because of your

169
00:12:53.620 --> 00:12:54.610
web application

170
00:12:54.610 --> 00:12:56.330
and there are a lot of things in there

171
00:12:56.410 --> 00:13:00.730
the browser manages automatically no matter what you do in your scripts.

172
00:13:00.790 --> 00:13:05.320
Now diving into this snapshot here is really hard,

173
00:13:05.320 --> 00:13:08.260
more interesting is to see comparisons between snapshots.

174
00:13:08.260 --> 00:13:10.330
For example here I took a snapshot,

175
00:13:10.330 --> 00:13:14.000
now I will delete an item and take another snapshot

176
00:13:14.000 --> 00:13:19.990
and now if we go to the second snapshot, here on the summary dropdown, we can use comparison

177
00:13:19.990 --> 00:13:23.890
and this gives us the difference between this snapshot and this snapshot

178
00:13:23.890 --> 00:13:31.290
and if we have a look at the comparison here for the second snapshot, we now see which items were added

179
00:13:31.290 --> 00:13:37.230
to memory and which items were removed and for example here we see that what was removed was a button

180
00:13:37.230 --> 00:13:43.000
element, a heading so a h2 or a h1 element, a list item element and a paragraph element and

181
00:13:43.030 --> 00:13:45.920
these are all the elements which are part of such a render product.

182
00:13:45.960 --> 00:13:51.930
You see the delta here compared to the previous snapshot is -1 which means in the end effectively

183
00:13:52.050 --> 00:13:55.320
one element was removed and this is good.

184
00:13:55.650 --> 00:14:01.290
If this would not be the case after deleting a product here, we would probably have a memory leak because

185
00:14:01.290 --> 00:14:07.770
that would mean that we still have the item lingering around in memory somewhere and I'll come back to

186
00:14:07.770 --> 00:14:09.050
memory leaks later,

187
00:14:09.090 --> 00:14:11.030
I just want to show this tab right now,

188
00:14:11.100 --> 00:14:17.620
it will become more important later once we analyze our app for memory leaks. And last but not least,

189
00:14:17.620 --> 00:14:23.950
you have this audits tab here. There for example you can run a performance audit, you can tick different

190
00:14:23.950 --> 00:14:24.850
boxes here,

191
00:14:24.880 --> 00:14:31.150
at the moment we're just interested in performance and then the browser, Chrome, will do a couple of checks

192
00:14:31.150 --> 00:14:35.290
for you and find out how your app behaves,

193
00:14:35.290 --> 00:14:39.070
for example here we can run the performance audit, still in development mode

194
00:14:39.100 --> 00:14:44.050
so not optimal and you see in development mode, we have a pretty poor performance.

195
00:14:44.170 --> 00:14:46.300
We have a slow loading time,

196
00:14:46.300 --> 00:14:54.730
first content full paint is in the end an indicator for when our app is putting something onto the screen,

197
00:14:54.930 --> 00:14:57.700
when it is interactive and so on.

198
00:14:57.790 --> 00:15:02.440
You see the different screenshots for the timeline and you get some opportunities here, for example that

199
00:15:02.440 --> 00:15:04.100
our scripts are too big.

200
00:15:05.290 --> 00:15:11.050
So this can be nice to get a general idea of which problems your page might have and thereafter you could

201
00:15:11.050 --> 00:15:16.980
dive into the more specialized tabs to find out what exactly the problem is and what you can do here.

202
00:15:16.990 --> 00:15:19.350
So now after this general round trip here,

203
00:15:19.360 --> 00:15:25.840
let me point you at some other resources before we then test this under production circumstances and have

204
00:15:25.840 --> 00:15:27.700
a look at some potential improvements.
