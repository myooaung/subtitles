1
00:00:02,300 --> 00:00:08,240
Let me introduce you to a typescript feature that can help us simplify lines like this.

2
00:00:08,390 --> 00:00:11,990
In this line we have a very long type assignment as you can tell.

3
00:00:12,080 --> 00:00:16,300
This is all just defining the type of data stored in results.

4
00:00:16,310 --> 00:00:22,160
Now of course that's OK we can do that but maybe you want to make it a bit easier.

5
00:00:22,700 --> 00:00:27,950
Well in such a case we can use a so-called type alias.

6
00:00:27,950 --> 00:00:34,370
We do all of that by adding the type keyword which is also only known to typescript not two javascript

7
00:00:34,940 --> 00:00:39,490
and thereafter any name of our choice which typically starts with a capital character.

8
00:00:39,620 --> 00:00:46,860
For example calculation results now.

9
00:00:46,870 --> 00:00:51,510
This effectively allows us to create our own type now with an equal sign.

10
00:00:51,510 --> 00:00:55,210
We now define the type of data on the right side.

11
00:00:55,260 --> 00:00:57,810
So we'll cut it down there and add this here.

12
00:00:57,840 --> 00:01:02,640
Notice can be deceiving because now the object in the array is on the Rights of the equal sign.

13
00:01:02,640 --> 00:01:06,850
But keep in mind that with the type keyword This is a pure type feature.

14
00:01:06,870 --> 00:01:13,770
This is in the end just telling typescript Hey I got my own type named calculation results and it in

15
00:01:13,770 --> 00:01:15,580
the end is this type.

16
00:01:15,580 --> 00:01:19,800
And now we can use calculation result down there.

17
00:01:19,920 --> 00:01:24,780
And with that we simply outsource this long type assignment into this line.

18
00:01:24,780 --> 00:01:29,610
And one advantage is that if we now use this in other places of the code as well which we don't do here

19
00:01:29,640 --> 00:01:36,330
but which we could we could again use the same alias and we wouldn't have to repeat this long type everywhere.

20
00:01:36,360 --> 00:01:42,750
So type aliases can make it easier for you to manage your own complex types and write them only once

21
00:01:42,750 --> 00:01:49,140
and then use them in different places of your application and never need feature types good offers are

22
00:01:49,260 --> 00:01:52,560
literal types and union types.

23
00:01:52,560 --> 00:01:56,640
Let's start with literal types and for this I'll come back to print result.

24
00:01:56,760 --> 00:01:58,800
There we get the result.

25
00:01:58,800 --> 00:02:06,450
Now let's say we also get a second parameter print mode and that should be one of two aloud values either

26
00:02:06,540 --> 00:02:08,870
console or alert.

27
00:02:09,570 --> 00:02:18,900
So we could pass in a string here and then here we check if print mode is equal to let's say console.

28
00:02:19,020 --> 00:02:22,320
And if that's true I will console log their assault.

29
00:02:22,320 --> 00:02:28,570
Else if print mode is equal to alert let's say.

30
00:02:28,590 --> 00:02:31,180
I will show an alert with the result.

31
00:02:31,260 --> 00:02:36,010
And for any other value I will not do anything that is something we could have here.

32
00:02:36,150 --> 00:02:43,260
And now if I go down to line 39 and instead of using my print method I again use print result I could

33
00:02:43,260 --> 00:02:51,540
pass in my result from there so not the result container but just the result and then maybe pass in

34
00:02:51,780 --> 00:02:59,650
console here and repeat the same with alert and now with that of course if we compile this code here

35
00:03:01,230 --> 00:03:08,990
and we reload and I enter and I enter two values here I get 10 in the console but all a year as an alert

36
00:03:09,470 --> 00:03:14,370
because I called it with both modes that could be a typical use case.

37
00:03:14,390 --> 00:03:19,790
Maybe not with logging but in average scenarios like signing up a user where you even have to log in

38
00:03:19,790 --> 00:03:22,160
mode or to sign up mode.

39
00:03:22,160 --> 00:03:25,480
So actually we're not interested in any string here.

40
00:03:25,550 --> 00:03:29,330
We're just interested in these two concrete values.

41
00:03:29,330 --> 00:03:33,570
And for Dad you can use the literal types instead of just using string here.

42
00:03:33,650 --> 00:03:40,490
You can be more specific and you can say I want to allow the value console or alert.

43
00:03:40,490 --> 00:03:43,840
And this is now by the way a combination of multiple types of features.

44
00:03:43,850 --> 00:03:46,040
This here is a literal type.

45
00:03:46,130 --> 00:03:50,810
If you don't just have the overarching type but a concrete value for that type so you're a concrete

46
00:03:50,810 --> 00:03:51,730
string.

47
00:03:51,860 --> 00:03:58,280
And if we combine multiple types and we allow multiple types for one parameter or one variable we have

48
00:03:58,280 --> 00:04:01,860
a so-called union type indicated by this pipe symbol.

49
00:04:01,880 --> 00:04:08,300
This creates a union type which means multiple types of values are allowed in this case for this parameter

50
00:04:08,630 --> 00:04:12,140
either this literal type or dis literal type.

51
00:04:12,140 --> 00:04:19,060
Any average string will not be allowed the advantages that now for one we get better auto completion

52
00:04:19,060 --> 00:04:21,220
here in the ITC as you can see.

53
00:04:21,220 --> 00:04:29,000
And if I tried to call this with let's say any other value I get an error because this is not allowed

54
00:04:29,000 --> 00:04:31,610
here in my union type of literal types.

55
00:04:31,850 --> 00:04:37,760
So literal types and union types are ever very important features and typescript that allow us to write

56
00:04:37,760 --> 00:04:39,150
cleaner code.

57
00:04:39,470 --> 00:04:45,830
And of course we can also use them in conjunction with a type alias we could create our new custom type

58
00:04:45,860 --> 00:04:54,780
alias here and name it print mode and say it's console or alert and then we could use this here and

59
00:04:54,780 --> 00:04:58,620
anywhere else where we want to allow these two types.

60
00:04:58,680 --> 00:05:05,580
So that's also something we can use type aliases for but even without type aliases literal types combined

61
00:05:05,640 --> 00:05:11,050
with union types are extremely useful and union types of course can be used with any types.

62
00:05:11,160 --> 00:05:16,560
You could also except that say here a string or a number.

63
00:05:16,560 --> 00:05:22,770
As a result you want a print that's a number a use case of union types not just with literal types but

64
00:05:22,770 --> 00:05:26,430
also with the main types types of supports.

65
00:05:26,430 --> 00:05:31,290
So these are more type features you should be aware of when you're working with typescript since they

66
00:05:31,290 --> 00:05:35,310
can simplify your life as a typescript developer.

67
00:05:35,310 --> 00:05:40,680
Now I know we're moving fast here and you're learning a lot about the different types types good offers.

68
00:05:40,680 --> 00:05:46,230
Now you don't have to remember them all of course using them comes with experience and if you for example

69
00:05:46,230 --> 00:05:50,370
use a string instead of the more precise literal types.

70
00:05:50,370 --> 00:05:54,480
Combined with that union type feature that's always not the end of the world here.

71
00:05:54,690 --> 00:06:00,180
The official docs as well as dedicated courses like my understanding type of course can help you dive

72
00:06:00,210 --> 00:06:06,300
deeper into TypeScript and get more accustomed to it and you can also always treat typescript as an

73
00:06:06,300 --> 00:06:12,990
addition you can write your regular javascript code and enhance it in some places with typescript syntax

74
00:06:13,200 --> 00:06:18,120
where you need that extra type support and where you want that extra type safety.

75
00:06:18,120 --> 00:06:24,250
Now speaking of that let me add more features types called ads or let me show you more features typescript

76
00:06:24,290 --> 00:06:27,830
adds We learned about union types and literal types.

77
00:06:27,840 --> 00:06:34,170
Now when you have a situation like this in your code where you accept two possible values using a string

78
00:06:34,170 --> 00:06:41,760
is of course absolutely fine you can solve the problem like this but you can also use another type introduced

79
00:06:41,760 --> 00:06:44,700
by typescript which is the enum type.

80
00:06:44,700 --> 00:06:51,690
This does exist in some other programming languages in JavaScript does not exist and enum type is created

81
00:06:51,720 --> 00:06:53,370
by using the enum keyword.

82
00:06:53,370 --> 00:06:59,550
And then any type name of your choice which just like the type alias here should start with a capital

83
00:06:59,550 --> 00:07:03,630
character for example in this case output mode.

84
00:07:03,630 --> 00:07:07,850
Now then you don't use the equals sign though but instead curly braces.

85
00:07:07,900 --> 00:07:13,170
Now it looks like we're creating an object here but this is just the enum type syntax between the curly

86
00:07:13,170 --> 00:07:17,470
braces you now enter all the values you want to allow.

87
00:07:17,640 --> 00:07:25,250
And typically here you use all caps names like console and then with a comma alert.

88
00:07:25,260 --> 00:07:26,250
Now this might look strange.

89
00:07:26,250 --> 00:07:27,570
What is this doing.

90
00:07:27,600 --> 00:07:33,310
This basically creates and you could say array of choices you can use in your code.

91
00:07:33,530 --> 00:07:39,780
And here for example instead of print mode we could we could now use output mode and here check not

92
00:07:39,780 --> 00:07:44,200
for a console but for output mode dot console.

93
00:07:44,340 --> 00:07:44,910
And here

94
00:07:47,840 --> 00:07:56,270
for output mode dot alert and of course now when we call print result we also have to pass in output

95
00:07:56,270 --> 00:08:04,420
mode dot console and output mode dot alert.

96
00:08:04,440 --> 00:08:11,550
Now this simply is an alternative to using the string literal union types you can of course use either

97
00:08:11,550 --> 00:08:12,940
of the two approaches.

98
00:08:13,050 --> 00:08:19,470
This year behind the scenes will be stored as numbers which just are encoded to human readable values

99
00:08:19,470 --> 00:08:21,600
here in your types could code behind the scenes.

100
00:08:21,600 --> 00:08:22,880
This will be the number 0.

101
00:08:22,890 --> 00:08:28,500
This will be the number one and you can see this if you compile the code to javascript if we do that

102
00:08:28,500 --> 00:08:33,420
and we have a look at the javascript file we see this looks quite complex but in the end output mode

103
00:08:33,420 --> 00:08:39,920
is just an object which has properties console and alert which store numbers 0 and 1.

104
00:08:39,920 --> 00:08:43,590
So that's behind the scenes stuff in front of the scenes in our code.

105
00:08:43,680 --> 00:08:49,130
We simply use this with a dot then to access our concrete values.

106
00:08:49,140 --> 00:08:53,000
And that's an alternative to using string literal with a union type simply.

107
00:08:53,610 --> 00:08:58,740
So let's say enum something you can use if you have multiple choice says you want to using your code

108
00:08:58,740 --> 00:09:01,410
multiple modes sort or something like this.

109
00:09:01,410 --> 00:09:03,930
Then you can always use any name.

110
00:09:03,960 --> 00:09:10,470
And with that I basically want to wrap up these core types introduced and added by TypeScript and instead

111
00:09:10,500 --> 00:09:17,700
now have a look at some advanced types or other important type of features namely classes and interfaces.
