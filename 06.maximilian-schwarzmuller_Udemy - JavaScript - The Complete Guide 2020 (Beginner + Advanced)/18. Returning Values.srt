1
00:00:02,590 --> 00:00:06,010
This function here executes the code which is in there

2
00:00:06,010 --> 00:00:12,130
and in this case, this then throws this alert or shows this alert box by calling the built-in alert function.

3
00:00:12,130 --> 00:00:17,590
Now that's something you can do in other scenarios which we'll also cover later in the course of course,

4
00:00:17,950 --> 00:00:23,550
you might want to send a HTTP request to a server and store some data there for example

5
00:00:23,830 --> 00:00:29,620
but sometimes you also have functions which you just use to outsource some code, maybe code which you

6
00:00:29,620 --> 00:00:35,080
need to run multiple times and therefore normally, you would have to copy and paste it around which never

7
00:00:35,080 --> 00:00:36,410
is a great idea.

8
00:00:36,460 --> 00:00:38,520
As a programmer, you want to be lazy,

9
00:00:38,530 --> 00:00:40,360
you don't want to repeat yourself,

10
00:00:40,390 --> 00:00:45,430
you want to write code once and then rather execute it multiple times by referring to the function it's

11
00:00:45,610 --> 00:00:51,210
coded in and therefore you could have a function which is simply there to outsource some functionality,

12
00:00:51,220 --> 00:00:57,040
in this case a function that adds two pieces of information together which adds two numbers together.

13
00:00:57,070 --> 00:01:03,580
So in that case, you might not want to alert or do something inside of the function, you maybe just want

14
00:01:03,580 --> 00:01:05,600
to return the result and

15
00:01:05,740 --> 00:01:10,820
that's something you can do with the return keyword which is built into Javascript.

16
00:01:10,900 --> 00:01:14,380
So now we saw a couple of keywords - const, let, function

17
00:01:14,380 --> 00:01:19,200
and now also return and return does what the name implies.

18
00:01:19,210 --> 00:01:26,380
This function now returns the value that's stored in result as a result of this function call.

19
00:01:26,380 --> 00:01:31,540
This means that when we now execute add like this, nothing will happen,

20
00:01:31,550 --> 00:01:38,390
if I reload the page, you see nothing happens, we don't see anything because now the function itself doesn't

21
00:01:38,390 --> 00:01:40,790
do anything that has a visual impact,

22
00:01:40,790 --> 00:01:43,090
instead it returns a value.

23
00:01:43,130 --> 00:01:50,090
So that means that add now gives us a value, just like the plus operator or the multiplication operator gave

24
00:01:50,090 --> 00:01:52,790
us a value. If we add two numbers together,

25
00:01:52,790 --> 00:01:56,670
this gives us a value and we store that value in a constant.

26
00:01:56,690 --> 00:02:03,530
So now calling our function gives us a value and that means we can store this in a variable for example.

27
00:02:03,530 --> 00:02:12,830
So here we could say I want to have my addition result, and you can pick any name you want, stored in

28
00:02:12,830 --> 00:02:13,820
this constant

29
00:02:13,940 --> 00:02:20,000
and I'm using a constant here, just as I do it here in my function because I never assign a new value

30
00:02:20,060 --> 00:02:23,420
to the addition result or here to the internal result,

31
00:02:23,450 --> 00:02:26,720
I never assign a new value with the equal sign again

32
00:02:26,720 --> 00:02:31,850
and if you never assign a new value, then this effectively is a constant and then you should mark it

33
00:02:31,850 --> 00:02:34,680
as such to make it clear that this will never change,

34
00:02:34,730 --> 00:02:38,900
makes it easier to understand your code for other developers.

35
00:02:38,900 --> 00:02:43,280
So now the result of this function call is stored in addition result

36
00:02:43,280 --> 00:02:46,270
and this means that we can now use it anywhere in the code,

37
00:02:46,400 --> 00:02:54,890
for example we could now use addition result to set our current result equal to it, like this. Of

38
00:02:54,890 --> 00:02:56,810
course this is now kind of redundant,

39
00:02:56,840 --> 00:03:02,960
we store the result of this function call in a new constant just to take the constant or the value stored

40
00:03:02,960 --> 00:03:06,710
in a constant and then set it equal to current result, to our variable.

41
00:03:06,710 --> 00:03:12,170
Of course we can kind of shorten this and just set current result equal to the result of our function

42
00:03:12,170 --> 00:03:19,460
call and get rid of that other line and now current result is the result of this calculation.

43
00:03:19,460 --> 00:03:27,590
So that means of course that if I now reload this, we see three down there for the result because I have

44
00:03:27,710 --> 00:03:33,770
add with one and two, the result of this is three, the result gets stored here and then we use current

45
00:03:33,770 --> 00:03:40,010
result to pass it to this output result function which is provided in the vendor.js file which will

46
00:03:40,010 --> 00:03:45,660
in the end output the calculation result in this place of our HTML document.

47
00:03:45,770 --> 00:03:47,770
Of course this is now incorrect,

48
00:03:47,770 --> 00:03:52,130
this is now not the correct description of what we did.

49
00:03:52,160 --> 00:04:01,690
So this is how we can define our own functions with or without parameters, with or without the return

50
00:04:01,690 --> 00:04:04,450
statement and how we can call them.

51
00:04:04,510 --> 00:04:09,960
Now of course, we're still calling this immediately when this code runs,

52
00:04:10,030 --> 00:04:16,060
so ultimately the goal will be to connect this to the button which I'll do in a second but not before

53
00:04:16,270 --> 00:04:20,320
diving into the order in which you can define things here

54
00:04:20,410 --> 00:04:26,530
and also the implication it has when you define a variable or a constant inside of a function

55
00:04:26,710 --> 00:04:28,660
versus outside of a function.
