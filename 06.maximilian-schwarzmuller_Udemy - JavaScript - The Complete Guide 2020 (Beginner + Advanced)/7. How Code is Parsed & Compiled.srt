1
00:00:02,250 --> 00:00:09,030
So let's have a look behind the scenes now, at how our Javascript code is executed and how all these

2
00:00:09,030 --> 00:00:11,050
things are working together.

3
00:00:11,100 --> 00:00:17,280
So we wrote our Javascript code, something like that, probably a bit more elaborate and complex but we

4
00:00:17,280 --> 00:00:20,510
got the Javascript code as we wrote it all the time.

5
00:00:20,610 --> 00:00:26,280
Now we can split the question at how this is executed into two parts - 

6
00:00:26,280 --> 00:00:29,720
one is what does the browser do with that code,

7
00:00:29,730 --> 00:00:35,750
how does that actually result in something being shown on our screen?

8
00:00:35,790 --> 00:00:41,850
And the second part which we'll also have a look at of course in this module is what the browser does

9
00:00:41,910 --> 00:00:50,880
internally with our code, with whatever it did with that, so that it manages the execution flow of our

10
00:00:50,880 --> 00:00:57,000
code, that things are executed in the right order and that our program works the way it should.

11
00:00:57,000 --> 00:01:01,620
These are two different questions as you will see throughout this module and here we'll start with what

12
00:01:01,620 --> 00:01:08,470
the browser does with this piece of code. So we wrote this code, we import it in our HTML file and

13
00:01:08,470 --> 00:01:10,920
therefore the browser reads the HTML file,

14
00:01:10,930 --> 00:01:12,380
that's what browsers do,

15
00:01:12,610 --> 00:01:19,720
detects the script import and then and that's already something you can memorize or keep in mind, whenever

16
00:01:19,720 --> 00:01:21,430
the browser hits a script

17
00:01:21,430 --> 00:01:24,930
imported in HTML or written as an inline script in HTML,

18
00:01:24,940 --> 00:01:29,770
it will execute it. So the browser comes in and executes our script,

19
00:01:29,770 --> 00:01:33,130
now what does execute the script mean? And for that,

20
00:01:33,130 --> 00:01:38,620
please keep in mind that the exact details of course depend on the browser and the engine used.

21
00:01:38,620 --> 00:01:44,410
The Javascript code you write always is the same but what the browser does with that code in detail,

22
00:01:44,760 --> 00:01:46,100
that differs

23
00:01:46,210 --> 00:01:51,280
and if you really want to dive super deep into that, attached you find a couple of links where you can

24
00:01:51,280 --> 00:01:57,580
dive way deeper into the different engines and how they work under the hood, though you absolutely don't

25
00:01:57,670 --> 00:02:00,620
need to go through that to learn and use Javascript,

26
00:02:00,670 --> 00:02:03,150
it's just a bonus if you're interested in that.

27
00:02:03,190 --> 00:02:07,390
So we're talking about the browser executing the Javascript code,

28
00:02:07,390 --> 00:02:08,880
what does this mean?

29
00:02:08,890 --> 00:02:14,750
Well throughout this course, you heard me talk about the browser parsing and executing our code.

30
00:02:14,830 --> 00:02:21,460
Now I'll summarize this in one step, with parsing, I basically mean that the browser reads this Javascript

31
00:02:21,460 --> 00:02:29,410
code, loads it so to say and then execution is the actual process where something happens, where our code

32
00:02:29,410 --> 00:02:30,720
has an effect

33
00:02:31,060 --> 00:02:34,890
and for that part, browsers have a Javascript engine,

34
00:02:34,930 --> 00:02:37,590
every major browser has a Javascript engine,

35
00:02:37,690 --> 00:02:45,550
the engine of Google's browser Chrome for example is named v8, for Firefox it's called Spider

36
00:02:45,550 --> 00:02:46,450
Monkey

37
00:02:46,450 --> 00:02:53,680
and these engines do that parsing and execution and they typically consist of two parts - an interpreter

38
00:02:54,040 --> 00:02:59,500
and a compiler and the compiler typically is a just-in-time compiler

39
00:02:59,500 --> 00:03:05,240
and I'll come back to what that means in a second. Now again, the exact details depend on the browser

40
00:03:05,240 --> 00:03:09,220
you're using but that's generally how that works. For v8,

41
00:03:09,230 --> 00:03:13,420
so for Chrome's browser for example, this is exactly how it works.

42
00:03:13,490 --> 00:03:20,420
So we then parse our script which basically means we load it and we then start execution and that is

43
00:03:20,420 --> 00:03:21,950
done by the interpreter.

44
00:03:22,040 --> 00:03:25,750
The interpreter basically loads our script, reads it,

45
00:03:25,750 --> 00:03:31,640
it then kind of translates it to byte code which is a bit easier to execute you could say and then it

46
00:03:31,640 --> 00:03:34,400
goes ahead and starts running our script

47
00:03:34,400 --> 00:03:36,320
but what's the job of the compiler then?

48
00:03:36,380 --> 00:03:38,150
What is a compiler?

49
00:03:38,150 --> 00:03:45,200
Well the interpreter starts executing our script but it does so line-by-line in an optimized way, which

50
00:03:45,200 --> 00:03:53,270
means the script execution works but is far from being as fast as possible. To have the best possible

51
00:03:53,270 --> 00:03:54,080
performance,

52
00:03:54,080 --> 00:04:00,290
you don't just want to interpret the code and basically execute it like this but instead you want to

53
00:04:00,290 --> 00:04:05,990
compile it to machine code and hand it off to your machine, to your operating system if you will

54
00:04:06,200 --> 00:04:14,720
because that will always be faster and that translation of your interpreted Javascript code to machine

55
00:04:14,720 --> 00:04:17,350
code is exactly what the compiler does.

56
00:04:17,390 --> 00:04:25,040
So the interpreter does not just start executing your script, it also hands off the byte code to the

57
00:04:25,040 --> 00:04:29,440
compiler, so this loaded script in the end, it hands this off to the compiler.

58
00:04:29,640 --> 00:04:34,270
Now the compiler is also built into the browser, so it's part of the Javascript engine the browser

59
00:04:34,280 --> 00:04:39,360
ships with, in case of the v8 engine which works in Google Chrome browser,

60
00:04:39,470 --> 00:04:43,820
the name of the compiler is turbo fan but that's just a side note, doesn't really matter.

61
00:04:43,850 --> 00:04:50,450
So the compiler, whilst the interpreter already started execution of your script, now compiles the script

62
00:04:50,450 --> 00:04:51,540
to machine code.

63
00:04:51,530 --> 00:04:56,240
Now needless to say that for very short scripts, the interpreter might already be done but even then,

64
00:04:56,240 --> 00:04:58,200
this compilation step happens,

65
00:04:58,250 --> 00:05:03,500
so this happens side-by-side with the interpreter executing your script.

66
00:05:03,500 --> 00:05:08,710
Now once this compilation machine code is done, which typically is also relatively fast,

67
00:05:08,720 --> 00:05:14,360
this machine code is handed off to your computer which then may execute it or which then will execute it

68
00:05:14,510 --> 00:05:18,190
and that's then the fast possible way of executing the script.

69
00:05:18,230 --> 00:05:25,850
Now the Javascript engine, the browser, applies a couple of optimization techniques to speed up that execution

70
00:05:25,850 --> 00:05:27,890
and compilation time,

71
00:05:27,890 --> 00:05:34,910
so for example code that didn't change between the last execution and the current execution is not necessarily

72
00:05:34,910 --> 00:05:38,870
recompiled but instead the already compiled code is taken again.

73
00:05:38,870 --> 00:05:44,960
So if an existing script or a part of the script executes again, it's not necessarily recompiled but instead

74
00:05:44,990 --> 00:05:49,970
maybe the already compiled code can be taken which of course is way faster than if you go through that

75
00:05:50,150 --> 00:05:53,960
interpreter, then the compiler and so on process again.

76
00:05:53,990 --> 00:05:56,570
So there are a couple of optimization techniques applied

77
00:05:56,570 --> 00:06:02,520
and again the attached links allow you to dive deeper if that's what you're deeply interested in. Now

78
00:06:02,580 --> 00:06:10,620
it's also important to note that the browser also gives you a couple of features, so-called APIs

79
00:06:10,650 --> 00:06:14,770
which are built in, which you can tap into from your Javascript code.

80
00:06:14,850 --> 00:06:21,000
Things like working with the loaded HTML code or for example, what we'll also cover later in the course,

81
00:06:21,180 --> 00:06:25,770
a couple of other built-in APIs, for example for getting the user's location.

82
00:06:25,770 --> 00:06:29,400
These browser APIs are part of the browser,

83
00:06:29,400 --> 00:06:35,490
for example written in C++ but again that depends on the browser you're using and the browser gives

84
00:06:35,490 --> 00:06:37,550
you communication bridges

85
00:06:37,560 --> 00:06:42,930
if you want to call it like this which you can call from Javascript. So it gives you Javascript functions

86
00:06:42,930 --> 00:06:49,050
or objects which are just available in your Javascript code, which you can simply call in your Javascript

87
00:06:49,050 --> 00:06:49,770
code

88
00:06:49,770 --> 00:06:56,070
and when that code then gets interpreted and compiled, the browser knows where to find these functions

89
00:06:56,070 --> 00:07:01,710
or objects, it knows where to find these APIs and it basically includes that call to that native

90
00:07:02,100 --> 00:07:08,520
API or to that feature which is built in the browser into the interpreted or compiled code and therefore

91
00:07:08,580 --> 00:07:11,470
the finished compiled code which runs on a machine

92
00:07:11,490 --> 00:07:18,780
of course also has access to these browser APIs because that's access or that wish for access, whatever

93
00:07:18,780 --> 00:07:23,080
you want to call it, is basically included in that compiled machine code.

94
00:07:23,160 --> 00:07:28,450
That's the big picture of how this works and how the browser handles your Javascript code.

95
00:07:28,470 --> 00:07:34,590
I can't emphasize enough that of course the exact steps or the exact names differ based on which browser

96
00:07:34,590 --> 00:07:39,720
you use and therefore definitely check out yet the attached material if you want to dive super deeply into

97
00:07:39,720 --> 00:07:40,300
that.

98
00:07:40,320 --> 00:07:46,620
This is the big picture though which I find important to know if you're working with Javascript, it never

99
00:07:46,620 --> 00:07:49,050
hurts to have a rough idea of what's happening there

100
00:07:49,410 --> 00:07:52,550
but in my opinion it's also enough to know this.

101
00:07:52,830 --> 00:07:58,860
Now again that's just a big picture of how the browser handles your code though, it does not really answer

102
00:07:58,860 --> 00:08:03,330
the question what the browser does when your code executes,

103
00:08:03,330 --> 00:08:07,050
so for example how are your variables stored,

104
00:08:07,050 --> 00:08:09,510
how does function execution work,

105
00:08:09,510 --> 00:08:13,360
how is the order guaranteed and so on. That's therefore the next step

106
00:08:13,360 --> 00:08:14,100
we'll have a look at.
