1
00:00:02,180 --> 00:00:07,700
So by now we actually had a look at a lot of different operators which we need in different situations

2
00:00:07,700 --> 00:00:14,780
in our code - arithmetic operators for calculations with numbers or in the case of the plus operator,

3
00:00:14,780 --> 00:00:20,950
also with strings and also the assignment operator and these shorthands for incrementing or decrementing

4
00:00:20,960 --> 00:00:28,020
numbers or for quickly assigning the result of a calculation with the plus or minus and so on operator.

5
00:00:28,040 --> 00:00:30,230
So these are things we had to look at

6
00:00:30,230 --> 00:00:36,770
and in addition, we also had a look at these boolean or logical operators which we used to derive true

7
00:00:36,770 --> 00:00:37,850
or false.

8
00:00:37,850 --> 00:00:45,200
So roughly you can say where these arithmetic operators - plus, minus, the asterisks, the multiplication

9
00:00:45,200 --> 00:00:51,890
operator and so on, where those operators helped us with numbers and in the case of the plus, also with

10
00:00:51,890 --> 00:00:57,560
strings which we could concatenate, these logical operators produce true or false

11
00:00:57,560 --> 00:01:00,810
which we then in turn typically use in conditions.

12
00:01:00,890 --> 00:01:08,180
Now with that, we have a solid list of operators but then we also have these and and or operators and

13
00:01:08,180 --> 00:01:10,520
these actually also are operators.

14
00:01:10,520 --> 00:01:14,990
Now as you already see, not all operators produce the same result,

15
00:01:14,990 --> 00:01:19,230
some operators produce boolean values, true or false,

16
00:01:19,250 --> 00:01:22,700
other operators produce numbers or strings.

17
00:01:22,700 --> 00:01:24,450
Now there's more where we dive into

18
00:01:24,460 --> 00:01:32,200
but one thing that already is important to understand is the concept of operator precedence and for

19
00:01:32,200 --> 00:01:38,180
that attached you find a link to this web page on MDN which talks about operator precedence. In the end,

20
00:01:38,180 --> 00:01:42,940
this is a fancy term for saying how are operators handled,

21
00:01:42,950 --> 00:01:46,220
so in which order are they executed if you will

22
00:01:46,220 --> 00:01:53,300
and the good thing is when we talk about plus and minus and times and the division operator, the normal

23
00:01:53,300 --> 00:01:55,480
mathematical rules apply.

24
00:01:55,490 --> 00:02:02,300
So for example if you have something like 3 + 2 * 5, the 2 * 5 is evaluated

25
00:02:02,300 --> 00:02:05,930
and executed first and then 3 is added to the result of that,

26
00:02:05,930 --> 00:02:12,520
so normal math and you can override that just as you do it in math by using brackets, parentheses.

27
00:02:12,620 --> 00:02:17,960
There, you can change how that is passed and that is all built into Javascript and it works just as you

28
00:02:17,960 --> 00:02:19,790
would expect it to be.

29
00:02:19,790 --> 00:02:26,180
But of course with the and and the or operator, the question also is which operator takes precedence

30
00:02:26,180 --> 00:02:26,550
there?

31
00:02:26,720 --> 00:02:33,350
And this article has a table if you scroll down a bit which lists the precedence of operators and you

32
00:02:33,350 --> 00:02:38,900
can simply reach that table from top to bottom with the topmost operator taking the highest precedence

33
00:02:39,170 --> 00:02:44,570
and therefore unsurprisingly, that would be the parentheses. With parentheses, you could basically override

34
00:02:44,630 --> 00:02:49,700
the normal rules just as we did it with the mathematical equation I showed you a second ago.

35
00:02:49,880 --> 00:02:54,470
Now in this table, you'll find many operators which we haven't seen yet.

36
00:02:54,470 --> 00:02:59,510
Now of course, needless to say that I'll dive into all the important operators throughout the course but you

37
00:02:59,510 --> 00:03:01,310
will already recognize some of them,

38
00:03:01,310 --> 00:03:07,730
for example if you scroll down further, you find the typeof, you'll find the exponentiation operator, multiplication,

39
00:03:07,730 --> 00:03:08,570
division,

40
00:03:08,660 --> 00:03:10,480
remainder, addition, subtraction

41
00:03:10,490 --> 00:03:16,610
and there you can see that multiplication and division have a higher precedence than addition and subtraction

42
00:03:16,610 --> 00:03:22,310
which is just what we saw in that equation I showed you a second ago and if we scroll down further, we

43
00:03:22,310 --> 00:03:28,920
see that the boolean operators have a lower precedence. The impact of that is that if you for example

44
00:03:28,920 --> 00:03:37,700
check if three plus two is smaller than nine minus two, then you will actually get true because Javascript

45
00:03:37,700 --> 00:03:45,840
will first evaluate this and this and then compare the results because the addition and subtraction

46
00:03:46,170 --> 00:03:51,370
operators which I'm using here have a higher precedence then these comparison operators,

47
00:03:51,370 --> 00:03:56,210
therefore these calculations are executed first before the comparison is made. Again,

48
00:03:56,220 --> 00:03:59,850
that is basically what our common sense would tell us

49
00:03:59,850 --> 00:04:04,560
and it's good that Javascript behaves the way. It would be strange if the result of this would actually

50
00:04:04,560 --> 00:04:10,960
be is two smaller than nine and then we have three plus true minus two,

51
00:04:11,100 --> 00:04:13,120
that doesn't even make sense, right?

52
00:04:13,140 --> 00:04:18,940
So we would expect that this is evaluated and this is evaluated and then the results are compared

53
00:04:19,050 --> 00:04:22,740
and thankfully that's exactly what's happening in Javascript

54
00:04:22,740 --> 00:04:30,450
but of course the question for example is if you have five equal five and you also want to check if

55
00:04:30,510 --> 00:04:36,110
three is smaller than six or if 10 is bigger than 20,

56
00:04:36,150 --> 00:04:44,370
well in which order is that executed? Does Javascript check this and then check the result of this comparison

57
00:04:44,740 --> 00:04:45,660
or does it check

58
00:04:45,660 --> 00:04:49,460
is this true and this true or this true?

59
00:04:49,530 --> 00:04:54,630
That of course matters because if we change this a little bit and we say is 10 greater than 5, so this

60
00:04:54,630 --> 00:04:55,440
is true

61
00:04:55,500 --> 00:05:00,840
but here we check if three is greater than six, then the result of this first comparison, if this would

62
00:05:00,840 --> 00:05:05,210
be executed first would be false because yes this is true

63
00:05:05,220 --> 00:05:08,310
but this here, this comparison is false.

64
00:05:08,310 --> 00:05:15,180
So if the and operator where both has to be true to return true, this would actually return false.

65
00:05:15,180 --> 00:05:20,880
Now as you can already see here in my IDE, we will get true as a result , o this already indicates that

66
00:05:20,880 --> 00:05:23,920
this is evaluated first and then this

67
00:05:23,940 --> 00:05:29,640
and if either one of these two blocks returns true, the overall condition will return true and that's in

68
00:05:29,640 --> 00:05:31,010
case what's happening here.

69
00:05:31,020 --> 00:05:37,020
Instead if it would be the case that this is evaluated and then this would have to be true, then it would

70
00:05:37,020 --> 00:05:42,450
also work like this but not for example if we check if that is not equal.

71
00:05:42,450 --> 00:05:49,290
Then if we say this has to be true and this has to be true, we would have a problem because this first

72
00:05:49,290 --> 00:05:50,760
part wouldn't be true.

73
00:05:50,760 --> 00:05:55,920
So what I'm saying here basically is that and has a higher precedence than or and indeed that is what

74
00:05:55,920 --> 00:05:57,060
we see here in the table,

75
00:05:57,060 --> 00:06:03,120
the logical and has a higher precedence than or which means that first Javascript connects these two

76
00:06:03,120 --> 00:06:09,780
pieces and evaluates them and then this operator kicks in and considers the second condition as well,

77
00:06:09,780 --> 00:06:14,770
which means that if this is true, we overwrite the fact that this yields false.

78
00:06:15,030 --> 00:06:21,900
So you can always check this table if you're not sure about some order but actually in most cases as

79
00:06:21,900 --> 00:06:24,750
I mentioned, it's just what you would expect to happen,

80
00:06:24,780 --> 00:06:27,030
so definitely don't learn this by heart,

81
00:06:27,030 --> 00:06:32,270
there also are operators in here which are quite niche which you will never use to be honest,

82
00:06:32,310 --> 00:06:37,050
so don't learn this by heart, just take it as a reference if some behavior is unclear to you.

83
00:06:37,140 --> 00:06:42,180
In general, common sense is what's happening in Javascript or what's getting applied there

84
00:06:42,180 --> 00:06:48,210
and the one thing where you might not have an intuition is maybe that and and or thing, well there and

85
00:06:48,210 --> 00:06:53,510
takes precedence over or which means first this is evaluated and then it's compared to this and there,

86
00:06:53,520 --> 00:06:58,530
the or operator simply means if one of the two is true, the overall statement returns true, the overall

87
00:06:58,530 --> 00:06:59,860
expression returns true

88
00:06:59,970 --> 00:07:05,430
and therefore this overall returns true because this is true and therefore thanks to the or operator,

89
00:07:05,700 --> 00:07:11,610
this doesn't matter, the fact that this is false but still important to know, this was grouped together

90
00:07:11,670 --> 00:07:13,880
because and takes higher precedence.

91
00:07:14,070 --> 00:07:17,730
So instead of grouping together this, this was grouped together.
