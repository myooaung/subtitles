1
00:00:02,420 --> 00:00:09,620
So async await can be great to write shorter, more concise code but of course here, we lost error handling,

2
00:00:09,650 --> 00:00:12,140
we have no replacement for the catch block at the moment,

3
00:00:12,140 --> 00:00:14,940
how do we do that with async await?

4
00:00:15,020 --> 00:00:20,990
Well, await always moves on to the next line as long as the previous line resolved.

5
00:00:20,990 --> 00:00:23,130
Now what if we have an error?

6
00:00:23,150 --> 00:00:28,970
Well since this looks like normal synchronous code, where we execute line after line and in the end, we

7
00:00:28,970 --> 00:00:34,820
are doing that because of the invisible transformation, we can use the normal synchronous error handling

8
00:00:34,820 --> 00:00:39,470
we learned about way earlier in the course already, we can use try catch.

9
00:00:39,470 --> 00:00:41,350
So here we can try something,

10
00:00:41,360 --> 00:00:49,220
for example this line and then catch any error we might be getting and then handle that in the catch

11
00:00:49,220 --> 00:00:53,700
block, for example by printing it or by doing with it whatever you want to do

12
00:00:53,840 --> 00:00:55,490
and now everything inside of try,

13
00:00:55,700 --> 00:01:02,560
so all the steps you might have in here, for example two steps, will only execute if the first step succeeded,

14
00:01:02,570 --> 00:01:06,400
so if this step succeeded, we'll also execute this step,

15
00:01:06,500 --> 00:01:12,950
otherwise if this step failed or if this promise rejected, this step will not execute and then we'll

16
00:01:12,950 --> 00:01:21,380
just make it into the catch block here and of course, I wrote this incorrectly,

17
00:01:21,410 --> 00:01:26,420
this is the correct syntax. So we make it into this catch block if one of these two promises rejects,

18
00:01:26,450 --> 00:01:30,410
if the first promise rejects, this line here will not be executed,

19
00:01:30,500 --> 00:01:34,940
if the first promise does not reject but resolves, then this line is executed

20
00:01:34,940 --> 00:01:40,890
but then if this line would reject, which in this example is not possible because set timer never rejects

21
00:01:41,000 --> 00:01:44,240
but if it would reject, then we would make it into the catch block.

22
00:01:44,240 --> 00:01:49,220
This line thereafter will always run, this will always run after try catch,

23
00:01:49,460 --> 00:01:54,890
so this always executes no matter if you made it into try or into catch

24
00:01:54,890 --> 00:02:02,780
before this line and therefore here of course, we might want to work with two variables here instead

25
00:02:02,780 --> 00:02:06,930
of constants which we only have available inside of the try block because block scoping,

26
00:02:06,930 --> 00:02:09,920
now I have two variables available in the entire function,

27
00:02:09,920 --> 00:02:13,730
we assign new values in the try block and then we log that thereafter.

28
00:02:14,120 --> 00:02:22,220
So this is how you can handle errors correctly in an async await world, instead of catch with try catch

29
00:02:22,520 --> 00:02:25,430
and you can of course put whatever you want into try,

30
00:02:25,430 --> 00:02:30,680
you just should be aware of the fact that if one of the things failed, the other steps are skipped

31
00:02:30,680 --> 00:02:35,630
just as it was the case with catch in the end and on the other hand if both succeed, you of course

32
00:02:35,660 --> 00:02:39,620
don't make it into catch but we always execute the line thereafter. Hence

33
00:02:39,620 --> 00:02:46,130
now if I reload and we first of all see if it works in the success case by clicking allow in the prompt,

34
00:02:46,460 --> 00:02:50,980
we'll see that after a short while, we'll get the output we're used to.

35
00:02:51,110 --> 00:02:54,820
If I on the other hand reload and I click block, we got the error

36
00:02:54,850 --> 00:03:01,010
being printed here and thereafter we see undefined undefined because these two variables never

37
00:03:01,010 --> 00:03:02,350
received values.

38
00:03:02,510 --> 00:03:05,330
So this is how you can handle errors with async await.
