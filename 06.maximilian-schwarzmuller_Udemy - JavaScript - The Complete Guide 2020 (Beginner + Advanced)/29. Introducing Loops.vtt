WEBVTT
1
00:00:02.450 --> 00:00:08.350
After all these if statements which are extremely important, which is why I spend so much time on them

2
00:00:08.360 --> 00:00:13.250
because you will basically need them in any program you write, so after the if statements,

3
00:00:13.250 --> 00:00:19.550
it's now time to come to another very important construct in Javascript and in actually any programming

4
00:00:19.550 --> 00:00:25.940
language and that would be loops. In programming, you often have the scenario that you need to execute

5
00:00:25.940 --> 00:00:28.230
certain code multiple times.

6
00:00:28.250 --> 00:00:33.740
Now you might think okay we have functions for that, we can have reusable code in there, we can call a function

7
00:00:33.740 --> 00:00:34.670
multiple times.

8
00:00:34.700 --> 00:00:35.450
Sure

9
00:00:35.660 --> 00:00:40.250
but in your code, you have to write every function execution, right?

10
00:00:40.280 --> 00:00:44.900
Of course you can attach a function to an event listener and then whenever that button for example is

11
00:00:44.900 --> 00:00:46.640
clicked, the function executes

12
00:00:46.640 --> 00:00:54.770
but if you want to control that a certain snippet of code runs for every item you have in an array or

13
00:00:54.950 --> 00:01:02.570
runs ten times, then you would have to put ten function executions for example into your code and loops

14
00:01:02.660 --> 00:01:09.110
allow you to write such code repetition in a more dynamic and flexible way.

15
00:01:09.110 --> 00:01:17.360
Now in Javascript, we have four main loops and that's the for loop, the for/of loop, the for/in loop

16
00:01:17.360 --> 00:01:23.840
and the while loop and for the while loop, we also have one variation which I'll also show you.

17
00:01:23.840 --> 00:01:29.390
Now what's the idea behind each of these loops and when do you use them? The for loop together with the

18
00:01:29.390 --> 00:01:34.640
while loop is the oldest loop, it's been in Javascript forever and the for loop allows you to execute

19
00:01:34.640 --> 00:01:40.400
code a certain amount of times and you use a counter variable for that which you typically increment

20
00:01:40.430 --> 00:01:43.400
or change with every loop iteration.

21
00:01:43.400 --> 00:01:49.940
So that means that with a for loop, you can easily define that a certain part of your code should run

22
00:01:50.120 --> 00:01:55.310
10 times, 20 times, a million times. Here's an example,

23
00:01:55.310 --> 00:02:00.680
this is how for loop looks like, you have the for keyword, then between parentheses you initialize or

24
00:02:00.680 --> 00:02:09.590
you set up that loop and that consists of three parts - a begin phase where you initialize variables you

25
00:02:09.590 --> 00:02:11.540
can use inside of that loop,

26
00:02:11.540 --> 00:02:18.710
so between these curly braces and that's important, the variable set up there are really only available

27
00:02:18.710 --> 00:02:20.610
inside of the loop,

28
00:02:20.610 --> 00:02:25.030
then we also have separated by a semicolon,

29
00:02:25.040 --> 00:02:28.820
so not by a comma, not by colon but a semicolon,

30
00:02:28.820 --> 00:02:35.000
we have a condition, an exit condition which basically defines when we stop executing that code between

31
00:02:35.000 --> 00:02:40.170
the curly braces and then we have, separated by another semicolon,

32
00:02:40.370 --> 00:02:47.030
the code that should run after every loop iteration and there, you could do whatever you want but typically,

33
00:02:47.360 --> 00:02:53.260
you just change that variable which you initialized and which you also use in your exit condition.

34
00:02:53.270 --> 00:03:00.140
So this loop for example would initialize i and i is a name which is often chosen, it stands for iterator,

35
00:03:00.680 --> 00:03:03.950
so you choose i and you set it to 0 initially,

36
00:03:03.950 --> 00:03:06.250
then after every loop iteration,

37
00:03:06.260 --> 00:03:13.850
so after this console log body ran, it's incremented by 1 and then before the next loop iteration,

38
00:03:13.880 --> 00:03:20.150
before every loop iteration actually, this condition i smaller three is checked and the loop body

39
00:03:20.210 --> 00:03:26.420
is only executed if that condition yields true which of course means that in this example here, we would

40
00:03:26.420 --> 00:03:34.850
print the values 0, 1 and 2 but never 3 because after the third loop iteration, i gets incremented

41
00:03:34.880 --> 00:03:41.060
to three, before the next iteration this condition checks if i is smaller than three which of course is

42
00:03:41.060 --> 00:03:46.910
not the case if i is equal to three and therefore it would stop executing that and move to the next line

43
00:03:46.910 --> 00:03:49.160
of code after that for loop,

44
00:03:49.160 --> 00:03:55.250
that's how a for loop works and of course, needless to say, we'll see that in action right after this

45
00:03:55.250 --> 00:04:02.320
lecture. Now another loop you have which is a bit newer but now also very well supported in Javascript

46
00:04:02.650 --> 00:04:10.060
and that's the for/of loop. Now that executes for every element in an array, it allows you to execute

47
00:04:10.060 --> 00:04:12.550
code for every element in an array.

48
00:04:12.550 --> 00:04:18.700
It looks like this, kind of like the first for loop but a bit different, between the parentheses we don't

49
00:04:18.700 --> 00:04:21.720
have these three parts, instead here we have the

50
00:04:21.720 --> 00:04:28.720
of keyword and we create a constant, could also be a variable but typically you create a constant which

51
00:04:28.720 --> 00:04:34.390
gives you access to one element of the array at a time and then this body between the curly braces is

52
00:04:34.540 --> 00:04:41.610
executed for every element in the array and l in this case then refers to that element in the array

53
00:04:41.620 --> 00:04:43.800
for this current iteration

54
00:04:43.930 --> 00:04:49.960
and this is convenient for for example doing something with every element in the array or outputting

55
00:04:49.960 --> 00:04:52.530
it to the console or whatever you want to do.

56
00:04:52.810 --> 00:05:00.250
Now for/of helps you with arrays, we also have for/in and that allows you to execute code for every

57
00:05:00.250 --> 00:05:02.110
key in an object.

58
00:05:02.110 --> 00:05:03.370
This is how it looks like

59
00:05:03.610 --> 00:05:10.300
and there we basically have the same syntax as in a for/of loop but with the in keyword instead of

60
00:05:10.300 --> 00:05:17.410
the of keyword and an important difference is that for of is built to work with arrays, for/in is built

61
00:05:17.410 --> 00:05:22.920
to work with objects and there, you get access to every key in the object,

62
00:05:22.990 --> 00:05:28.800
so that's the part on the left side of the colon when you create these key-value pairs and objects

63
00:05:29.020 --> 00:05:35.530
and then this second line you see here, console log object, square brackets key, that's actually

64
00:05:35.530 --> 00:05:37.940
a syntax we haven't used before,

65
00:05:37.990 --> 00:05:45.070
this is a way of dynamically accessing key-value pairs in an object when you don't have the key name but

66
00:05:45.070 --> 00:05:48.790
instead you have a variable or a constant that holds the key name,

67
00:05:48.790 --> 00:05:54.640
then this gives you dynamic access to the values stored for that key in the object and of course, we'll

68
00:05:54.640 --> 00:05:59.760
also see that in action in this module. Now last but not least, we have the while loop.

69
00:05:59.760 --> 00:06:05.910
The idea behind the while loop is that you execute code as long as a certain condition is true and only

70
00:06:05.910 --> 00:06:09.870
if that condition is somehow set to false, you exit out of the loop.

71
00:06:10.020 --> 00:06:11.520
It looks like this,

72
00:06:11.580 --> 00:06:17.400
the idea here basically is that you don't really work with a counter, though you could also do that

73
00:06:17.400 --> 00:06:22.350
here if you check the counter in your condition but that you maybe have some boolean which you then

74
00:06:22.350 --> 00:06:28.950
change at some point of time inside of your while loop and you can continue executing code until this

75
00:06:28.950 --> 00:06:29.520
is done.

76
00:06:30.570 --> 00:06:32.070
So these are the different loops,

77
00:06:32.070 --> 00:06:37.650
let's now have a look at them and see how we can integrate them into our project or generally work with

78
00:06:37.650 --> 00:06:37.890
them.
