WEBVTT
1
00:00:02.270 --> 00:00:05.050
Now we saw the for loop and the for/of loop,

2
00:00:05.060 --> 00:00:11.870
now there also is the for/in loop for going through all the key-value pairs in an object.

3
00:00:11.870 --> 00:00:18.350
Now, I also want to do this here in the printLogHandler because there in the for/of loop, log entry

4
00:00:18.350 --> 00:00:19.780
actually is an object, right?

5
00:00:19.790 --> 00:00:26.540
It's this here and this is a Javascript object and you can have loops inside of loop, so you can have

6
00:00:26.540 --> 00:00:27.850
such nested loops.

7
00:00:27.980 --> 00:00:30.470
You can't have a normal for loop in a normal for loop,

8
00:00:30.470 --> 00:00:32.800
you can have a normal for loop in a for/of loop,

9
00:00:32.810 --> 00:00:37.260
you can have a for/of loop and a normal for loop, so you can mix and match them as you need.

10
00:00:37.280 --> 00:00:42.200
You can also have if statements inside of for loops and for loops inside of if statements and the

11
00:00:42.200 --> 00:00:48.080
same is true for while loops. So you can combine these structures and these concepts as you need to,

12
00:00:48.090 --> 00:00:55.460
that's also very important to understand. You are not limited to only using for loops or any loop on

13
00:00:55.460 --> 00:01:01.220
the top level of a function. You can use some outside of functions, inside of if statements, inside of

14
00:01:01.280 --> 00:01:07.280
else blocks of if statements, inside of other loops and if statements inside of loops and so on as I said,

15
00:01:07.460 --> 00:01:11.630
so you can nest these structures as deep as you want.

16
00:01:12.290 --> 00:01:21.730
So here for example, I want to adjust my output here and I want to console log a little string identifier where

17
00:01:21.730 --> 00:01:25.030
I use the back tics to dynamically inject a value,

18
00:01:25.030 --> 00:01:30.070
then I'll add a hash symbol, a hashtag and then this dollar sign curly brace syntax to output the

19
00:01:30.070 --> 00:01:30.850
index,

20
00:01:30.850 --> 00:01:37.690
so that's basically just giving me the number of this log entry starting at 0 and then I don't want

21
00:01:37.690 --> 00:01:43.270
to console log the entire entry like this but instead, go through all the entries in there, all the key

22
00:01:43.270 --> 00:01:44.540
value pairs in there

23
00:01:44.710 --> 00:01:51.460
by adding such a for/in loop. It looks a lot like a for/of loop, you create a constant because just like

24
00:01:51.460 --> 00:01:53.620
with the for/of loop, this variable,

25
00:01:53.620 --> 00:01:59.430
this constant is recreated for every iteration and then here, we get access to the key,

26
00:01:59.440 --> 00:02:03.670
you don't have to name that key, you can name it whatever you want, you could name it property, whatever

27
00:02:03.670 --> 00:02:04.270
you want to name it,

28
00:02:04.270 --> 00:02:11.980
I'll go with key, then you use the in keyword and then your object, either created in place just as you could

29
00:02:11.980 --> 00:02:18.610
create an array in place here if you wanted to or more often, you refer to some variable or constant

30
00:02:18.640 --> 00:02:19.800
which holds an object,

31
00:02:19.810 --> 00:02:25.080
so in this case to log entry and then you have curly braces and your loop body.

32
00:02:25.090 --> 00:02:31.330
Now of course, the implication of having a nested loop like this is that this outer loop will run and

33
00:02:31.330 --> 00:02:37.780
then for every iteration of that outer loop, that entire inner loop will run and only once this is completed,

34
00:02:37.990 --> 00:02:41.290
the next iteration of the outer loop will kick in, 

35
00:02:41.290 --> 00:02:47.560
so that's how these two loops will work together - inner loop has to complete for the next outer loop

36
00:02:47.590 --> 00:02:52.240
to continue and then a new inner loop is started and so on.

37
00:02:52.240 --> 00:02:59.270
So now here, we can console log the key-value for example and key here really is the name of the key,

38
00:02:59.270 --> 00:03:00.060
so event,

39
00:03:00.070 --> 00:03:03.790
final monster health, final player health target and value,

40
00:03:03.820 --> 00:03:08.060
these are the keys and that's what is stored inside of the key constant

41
00:03:08.170 --> 00:03:14.140
and if we now also want to get access to the value for that key, well then we have to use a different

42
00:03:14.140 --> 00:03:18.300
syntax. Then we can also console log this

43
00:03:18.360 --> 00:03:20.810
but here we need to refer to our object,

44
00:03:20.820 --> 00:03:28.440
so log entry and now the dot notation won't work because if we type .key here, Javascript will try

45
00:03:28.440 --> 00:03:35.910
to find a key, a property named key in here and there is no key property, we only got these five properties

46
00:03:35.910 --> 00:03:36.300
here,

47
00:03:36.360 --> 00:03:43.230
event and so on, so there is no key property, no property with the name key because key is the name of this

48
00:03:43.230 --> 00:03:51.780
constant, not of a property in the object but the value of that key constant then is the name of a property

49
00:03:51.810 --> 00:03:56.080
of this object. So the value here key will be event

50
00:03:56.100 --> 00:04:01.660
and for the next iteration, final monster health and thereafter, final player health and so on.

51
00:04:01.860 --> 00:04:07.740
So for our object, we want to access the property with the name event and with the name final monster health

52
00:04:07.740 --> 00:04:08.460
and so on

53
00:04:08.610 --> 00:04:14.460
and these names are stored in key, so what we want to tell Javascript is that it shouldn't use key as

54
00:04:14.460 --> 00:04:21.630
the name but the value stored in key as the name and we do that by using a different syntax for accessing

55
00:04:21.630 --> 00:04:27.370
properties which we haven't seen before for objects and that's that we use square brackets here.

56
00:04:27.420 --> 00:04:32.760
Now we don't use it as we use it on an array where we use 0 and 1 and so on

57
00:04:32.760 --> 00:04:39.120
but instead here you can enter a property name and you could hardcode it like this, to access the property

58
00:04:39.120 --> 00:04:40.380
with the name event,

59
00:04:40.380 --> 00:04:48.630
so this would be similar to .event but you can also pass in key here and Javascript will then

60
00:04:48.630 --> 00:04:54.960
extract the value stored in this constant and then access the property with that name on log entry

61
00:04:55.400 --> 00:05:01.340
and therefore now in this inner loop, we will now log the name of the property and then its value.

62
00:05:01.440 --> 00:05:03.960
So lot of talking, let's have a look at that,

63
00:05:03.990 --> 00:05:08.100
let's reload, strong attack and attack and show the log

64
00:05:08.130 --> 00:05:10.800
and now what you see here is a lot of output.

65
00:05:10.920 --> 00:05:17.480
We have this #0 which means it's the first log entry and then we have event and its value

66
00:05:17.730 --> 00:05:24.000
and then the value property and its value and the target property and its value and so on

67
00:05:24.830 --> 00:05:31.280
and then because I never change i as I just see, we would need to increment this, forgot that, accidentally

68
00:05:31.280 --> 00:05:32.090
deleted it,

69
00:05:32.210 --> 00:05:37.760
so therefore we still have #0 here, that should be #1 with the updated code here

70
00:05:37.880 --> 00:05:42.990
but then we have the next log entry with different values for the properties.

71
00:05:43.040 --> 00:05:47.900
Now of course, that's not super readable but of course we can change this, for example we could add string

72
00:05:47.900 --> 00:05:54.770
interpolation here to output a readable string where we then first output the key and then maybe such

73
00:05:54.770 --> 00:05:57.470
an arrow here with an equals sign and a greater sign,

74
00:05:57.470 --> 00:06:02.510
so this is just some text, so not something Javascript tries to pass, it will just create some text here

75
00:06:02.930 --> 00:06:10.400
and then output the log entry value for that key here and now that should be more readable. If we do

76
00:06:10.400 --> 00:06:15.720
it like this and we reload and we attack and strong attack and show the log,

77
00:06:15.770 --> 00:06:23.270
now here if we maybe expand this a bit with the first log entry here, then event with its value, value

78
00:06:23.270 --> 00:06:25.150
with its value and so on,

79
00:06:25.220 --> 00:06:28.400
second log entry with index 1 and so on.

80
00:06:28.400 --> 00:06:32.680
So this is how we could now output our log, if that's more readable or not,

81
00:06:32.720 --> 00:06:37.790
I'll leave that up to you but it shows you how you can use different loops here and how you can also

82
00:06:37.790 --> 00:06:43.700
use loops inside of loops and how you can use a for/in loop to go through all keys in an object and

83
00:06:43.700 --> 00:06:46.730
still get access to the values that are stored for these keys.
