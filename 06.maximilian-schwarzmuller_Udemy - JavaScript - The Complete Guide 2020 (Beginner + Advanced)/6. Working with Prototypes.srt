1
00:00:02,550 --> 00:00:07,320
And I can prove this to you of course. If we comment this out again here,

2
00:00:07,510 --> 00:00:17,970
all of that and we comment back in that class here and we now add another class up there, AgedPerson,

3
00:00:18,070 --> 00:00:20,900
I don't know, something like that and in there

4
00:00:20,910 --> 00:00:32,070
I add this printAge method where I just console log this age and now I here extend the AgedPerson

5
00:00:33,240 --> 00:00:35,310
and I change nothing else,

6
00:00:35,310 --> 00:00:41,100
if I now go back to my code or to my page I mean and reload this, well I get an error regarding the

7
00:00:41,100 --> 00:00:45,320
constructor, the base class constructor not being called,

8
00:00:45,390 --> 00:00:48,510
if we added our own constructor, we need to do that as you learned,

9
00:00:48,570 --> 00:00:55,470
so let's add this here in the person class and now you see I get basically the same output as before

10
00:00:55,860 --> 00:01:05,430
and when I output my person prototype here, you indeed see that is my AgedPerson,

11
00:01:05,430 --> 00:01:11,100
the only difference to the output before is that indeed I still have that constructor property.

12
00:01:11,130 --> 00:01:13,860
Now I'll show you why that is the case in a second.

13
00:01:13,890 --> 00:01:18,180
Now what can be confusing here is that here you actually see the greet method though,

14
00:01:18,180 --> 00:01:24,170
so the prototype seems to be AgedPerson but where is our printAge method then?

15
00:01:24,180 --> 00:01:30,090
Well actually if you expand the prototype of the prototype, so the fallback object of the fallback object

16
00:01:30,150 --> 00:01:33,840
of your person so to say, there you will find printAge.

17
00:01:33,840 --> 00:01:40,440
Now the reason for this double prototype structure, which class with extends creates here which clearly

18
00:01:40,440 --> 00:01:45,900
differs from what we get with our constructor function and just person prototype will be explained a

19
00:01:45,900 --> 00:01:47,960
little bit later in this module,

20
00:01:48,030 --> 00:01:52,370
it has to do with how Javascript adds methods to our objects,

21
00:01:52,380 --> 00:01:57,080
it does this a bit differently with classes than it does that with a constructor function here

22
00:01:57,110 --> 00:01:59,820
but again I'll come back to that. For the moment,

23
00:01:59,820 --> 00:02:05,730
we can still keep in mind that in the end extends, when we use classes and we use the extends keyword,

24
00:02:06,000 --> 00:02:13,500
still works with prototypes to make functionality available on all classes that extend the same base

25
00:02:13,500 --> 00:02:16,600
class but other than that,

26
00:02:16,640 --> 00:02:24,280
what happened is that the prototype of our person object was set to this object here so to say,

27
00:02:24,290 --> 00:02:30,410
to an object based on this class here and this also explains why you have to call super. In the end

28
00:02:30,440 --> 00:02:37,610
what this does is it creates an object based on this class and then sets it as a prototype to the object

29
00:02:37,610 --> 00:02:39,690
built based on this class,

30
00:02:39,710 --> 00:02:41,780
that's also what we did manually here,

31
00:02:41,780 --> 00:02:42,430
right?

32
00:02:42,440 --> 00:02:49,820
If I comment this back in and comment this here out again, then what I do here is I create a concrete

33
00:02:49,850 --> 00:02:55,790
object and set it as a prototype for person so that when I create an object based on that, I have it

34
00:02:55,790 --> 00:03:01,370
available and that's the same thing here, in the constructor of the object, of the person object

35
00:03:01,370 --> 00:03:04,920
so to say, I have to create an AgedPerson object first

36
00:03:05,000 --> 00:03:09,810
so that this can be set as a prototype for the to be created object

37
00:03:09,980 --> 00:03:11,810
that's based on person thereafter.

38
00:03:11,810 --> 00:03:17,720
So it's the same, just with of course some syntactic sugar which is easier to understand than this code

39
00:03:17,720 --> 00:03:21,250
down there but this in the end what happens behind the scenes.

40
00:03:21,350 --> 00:03:27,260
Now what's strange here or what can be strange is that if I now reload, this was my old output when I

41
00:03:27,260 --> 00:03:33,140
used the class with extends, we see that now the prototype is back to an object which has proto and print

42
00:03:33,170 --> 00:03:35,680
age but not the constructor method.

43
00:03:35,720 --> 00:03:43,070
Well that happens because what I do here when I assign a new prototype is I replace the old default

44
00:03:43,100 --> 00:03:46,610
object which is assigned as a prototype with a new object.

45
00:03:46,880 --> 00:03:53,390
A better approach therefore typically is to not replace it but instead, reach out to a prototype and dynamically

46
00:03:53,480 --> 00:03:59,030
add a new property or method by adding a dot and then the name of your property

47
00:03:59,180 --> 00:04:05,660
and then here this can of course be a function, so I can now copy that here, add the function keyword and

48
00:04:05,660 --> 00:04:14,300
then add it like this. And the result of that will be that if we now save this and now I reload, you'll

49
00:04:14,300 --> 00:04:19,130
see here I also now have an object which still has this constructor method. By the way in case you're

50
00:04:19,130 --> 00:04:24,440
wondering, this method here refers to this constructor function.

51
00:04:24,440 --> 00:04:32,900
So you could create more objects of that type by saying const p2 equal to p__proto

52
00:04:33,290 --> 00:04:38,220
constructor like that and add the new keyword.

53
00:04:38,350 --> 00:04:45,290
If you do this here, you will get a new person object as you can see if you reload

54
00:04:45,290 --> 00:04:48,410
but of course that's a very complex way of doing that, here

55
00:04:48,410 --> 00:04:53,380
it can be useful in the apps where you somehow don't have access to the constructor function anymore.

56
00:04:53,390 --> 00:04:59,840
Here we do and therefore this instead of just new person of course makes no sense but it can make sense

57
00:04:59,840 --> 00:05:03,750
if you don't have direct access to the original constructor function anymore.

58
00:05:03,890 --> 00:05:06,190
So that's what the constructor method points to,

59
00:05:06,200 --> 00:05:11,630
more importantly, this is how you typically want to edit the prototype so that you don't override the

60
00:05:11,630 --> 00:05:14,320
default one and hence you keep the constructor method

61
00:05:14,570 --> 00:05:16,700
but instead you just add what you want to add.
