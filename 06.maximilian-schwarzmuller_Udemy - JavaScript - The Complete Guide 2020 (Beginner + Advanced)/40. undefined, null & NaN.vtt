WEBVTT
1
00:00:02.290 --> 00:00:09.340
With arrays, booleans, objects, numbers and strings, we had a look at the most important or almost all

2
00:00:09.340 --> 00:00:11.380
of the most important data types

3
00:00:11.380 --> 00:00:20.410
you have in Javascript but there are two additional important data types and one strange value which

4
00:00:20.410 --> 00:00:25.670
looks like a data type and that would be null, undefined and NaN. Now what's that?

5
00:00:25.690 --> 00:00:33.100
These are kind of special values, though null and undefined are both values and data types.

6
00:00:33.130 --> 00:00:40.700
So what's the idea behind that? Undefined is the default value uninitialized variables have,

7
00:00:40.710 --> 00:00:47.400
so if you create a variable and you don't assign a value at the beginning with the equal sign, then this

8
00:00:47.400 --> 00:00:49.110
variable is undefined.

9
00:00:49.110 --> 00:00:55.500
We also saw undefined in the log when we try to access an element in the array at an index where

10
00:00:55.500 --> 00:00:57.610
no element was created yet,

11
00:00:57.690 --> 00:01:03.740
then we tried to access an element which wasn't there and therefore we got back a value of undefined.

12
00:01:03.900 --> 00:01:10.560
So that's a value, it's a value that indicates that nothing's there but at the same time, it's also a separate

13
00:01:10.560 --> 00:01:11.460
data type.

14
00:01:11.460 --> 00:01:18.300
So just like numbers and strings are a data type, undefined is also a data type actually. Now you should

15
00:01:18.300 --> 00:01:21.600
never assign undefined to a value on your own,

16
00:01:21.600 --> 00:01:28.800
so never write equals undefined because that's just a default value you have if something has never

17
00:01:28.800 --> 00:01:30.470
been assigned a value.

18
00:01:30.510 --> 00:01:36.420
Now you could have cases in your code where you indeed get something, where you're not sure if it's undefined

19
00:01:36.420 --> 00:01:41.940
or not and later you will learn how you can check whether a value is defined or undefined but it's

20
00:01:41.940 --> 00:01:44.380
already important to be aware of this type.

21
00:01:44.580 --> 00:01:48.790
Now related to this, there is the null value and type.

22
00:01:48.780 --> 00:01:56.280
Now it's very similar to undefined, it means that there is no data but undefined is the default value

23
00:01:56.280 --> 00:02:03.000
for variables and so on where you never assigned a new value. Null is never a default value on the other

24
00:02:03.000 --> 00:02:03.340
hand,

25
00:02:03.340 --> 00:02:07.250
instead you have to set something to null to use that value

26
00:02:07.680 --> 00:02:13.500
and that's often used if you want to reset or clear a variable, let's say you have some user input

27
00:02:13.500 --> 00:02:15.060
and you want to reset this,

28
00:02:15.090 --> 00:02:21.300
you could set it to an empty string but you could also set it to null for example, to make it clear in

29
00:02:21.300 --> 00:02:27.440
your program that there currently shouldn't be a value because no value has been entered or whatever.

30
00:02:27.900 --> 00:02:34.050
And again this is especially useful later if we can also run some checks, some conditional checks with

31
00:02:34.110 --> 00:02:41.660
if statements to find out if a value is set and then do something or if it's not set. So undefined and null

32
00:02:41.670 --> 00:02:48.600
are important to manage empty data, either because it never was set or because you want to set it to

33
00:02:48.870 --> 00:02:50.580
empty, to null.

34
00:02:50.750 --> 00:02:56.180
They're very similar but they're not entirely equal because of the reasons I explained.

35
00:02:56.230 --> 00:03:02.900
Now there also is one other special value and that's NaN, that stands for not a number

36
00:03:03.110 --> 00:03:07.850
and technically, unlike undefined and null which also are their own types,

37
00:03:07.850 --> 00:03:09.280
this is not a type,

38
00:03:09.290 --> 00:03:10.250
instead it's of type

39
00:03:10.250 --> 00:03:17.140
number, it's not its own type and you can therefore use it in calculations where you work with numbers.

40
00:03:17.150 --> 00:03:21.870
Now the idea behind NaN is that it's kind of like an error code

41
00:03:22.040 --> 00:03:28.340
if you run a calculation with something that doesn't include a number, so if you have let's say a multiplication

42
00:03:28.340 --> 00:03:33.020
with text or anything like that, then you would get not a number as a result

43
00:03:33.020 --> 00:03:39.660
and if you use the not a number value in that calculation, you also get not a number as a result.

44
00:03:39.830 --> 00:03:45.290
So this yields not a number if you use it in calculations and it's the result of calculations that are

45
00:03:45.290 --> 00:03:46.250
invalid.

46
00:03:46.250 --> 00:03:50.950
Now you might wonder why you would ever run an invalid calculation,

47
00:03:50.960 --> 00:03:55.190
keep in mind that Javascript allows you to write highly dynamic code.

48
00:03:55.190 --> 00:04:02.120
So like in the case of our calculator here, you could have a calculator where users can enter any value,

49
00:04:02.270 --> 00:04:09.350
where they are maybe not forced to enter a number and where therefore you could run a calculation with

50
00:04:09.350 --> 00:04:11.780
some user input which is not a number

51
00:04:11.780 --> 00:04:15.070
and then you could get such a not a number result.

52
00:04:15.080 --> 00:04:21.050
Again this is most useful if you also have the abilities of comparing it or of checking it with some

53
00:04:21.080 --> 00:04:24.700
if statement to run some code if you get such an invalid result

54
00:04:24.860 --> 00:04:30.730
but it is worth being aware of this type. Now to quickly give you an idea of these types,

55
00:04:30.730 --> 00:04:36.070
let's clear that Javascript console here because here we also can type some Javascript code which runs

56
00:04:36.130 --> 00:04:38.350
immediately, which is immediately evaluated

57
00:04:38.350 --> 00:04:44.110
and here I want to show you these three types I just talked about. Let's create a variable here,

58
00:04:44.110 --> 00:04:48.400
userName maybe and not set this equal to anything, just like this,

59
00:04:48.400 --> 00:04:51.520
so we declare it but we don't initialize it.

60
00:04:51.520 --> 00:04:58.290
If we now hit enter, you see undefined here because that's the return value of this execution here

61
00:04:58.330 --> 00:05:00.400
but if you now write console log

62
00:05:00.420 --> 00:05:01.610
userName

63
00:05:01.690 --> 00:05:06.370
or actually here in the console you can just write userName and it will automatically log into the

64
00:05:06.370 --> 00:05:11.450
console, you'll see the value that's in there and that's also undefined.

65
00:05:11.470 --> 00:05:17.320
Now of course if I now assign a value like Max and I print this, you see

66
00:05:17.350 --> 00:05:19.460
Max here, it also showed it here.

67
00:05:20.380 --> 00:05:24.840
So that's one thing, we got undefined if we haven't set this to a value yet.

68
00:05:24.850 --> 00:05:30.370
Now if we would want to reset this, as I mentioned you should never do this,

69
00:05:30.370 --> 00:05:33.640
technically this would work but this is not recommended,

70
00:05:33.640 --> 00:05:36.340
instead you should set this to null now,

71
00:05:36.340 --> 00:05:44.310
this other special value and if you do that and you have a look into userName now, you see this indeed

72
00:05:44.400 --> 00:05:48.410
is null. Now for the not a number example,

73
00:05:48.520 --> 00:05:57.740
if you run three times hi here, you see the result is not a number. If you run three times not a number

74
00:05:57.770 --> 00:05:59.980
which is also a special value written like this,

75
00:06:00.020 --> 00:06:01.850
you also get another number.

76
00:06:01.880 --> 00:06:08.840
So these are the special types which, for now, you should just keep in memory somewhere and which we'll

77
00:06:08.840 --> 00:06:14.660
come back to throughout the course when we'll be able to check for whether a variable has a value or

78
00:06:14.660 --> 00:06:15.160
not,

79
00:06:15.170 --> 00:06:17.930
for now just loosely keep these values in mind.
