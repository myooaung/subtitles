WEBVTT
1
00:00:02.250 --> 00:00:04.220
So we got our first class added,

2
00:00:04.350 --> 00:00:10.140
now our code however still is such that all the logic lives in the product list,

3
00:00:10.140 --> 00:00:17.310
time to change that too. Let's add another class because we can not just create classes which predefine

4
00:00:17.400 --> 00:00:22.920
objects which are basically data containers, we can also create classes for objects which hold more

5
00:00:22.920 --> 00:00:29.310
logic so that in the end our entire application logic is split up across multiple classes which we then

6
00:00:29.310 --> 00:00:31.550
just connect in some clever way.

7
00:00:31.680 --> 00:00:38.580
So therefore, we could create a class here which we just name product list, again starting with a capital

8
00:00:38.580 --> 00:00:39.890
P here.

9
00:00:39.990 --> 00:00:46.820
Now such a product list class could have our products array

10
00:00:46.830 --> 00:00:54.440
and now here, that could be a case where we set this as a field and set this to a value right away,

11
00:00:54.660 --> 00:00:58.720
the value of course can be our array which I otherwise would have created down there, so

12
00:00:58.770 --> 00:01:00.530
let me cut the logic from there,

13
00:01:00.570 --> 00:01:05.630
we'll remove that code at the bottom anyways later and initialize products to be an array.

14
00:01:05.640 --> 00:01:12.660
Now again, what will happen here is that when we create an object based on this class, a product's property

15
00:01:12.660 --> 00:01:17.500
will be added automatically and the default value will be that array.

16
00:01:17.520 --> 00:01:24.390
Now we could add a constructor here but we won't need to set this products to anything because

17
00:01:24.390 --> 00:01:27.830
we initialize it anyways. So we don't need to do that here,

18
00:01:27.840 --> 00:01:34.220
let's leave it empty for now, we'll see if we need it, instead what I want to add here is a method and

19
00:01:34.220 --> 00:01:38.160
that's my render method which we also have down there, right?

20
00:01:38.180 --> 00:01:44.650
So we can take that logic with which we have in the render method and in the end,

21
00:01:44.660 --> 00:01:46.400
cut it from there,

22
00:01:46.400 --> 00:01:51.890
remove this entire product list object therefore and just put everything here into the render method

23
00:01:51.920 --> 00:01:56.620
in the class. With that we haven't gained much but we're getting there.

24
00:01:57.040 --> 00:02:01.230
Now we have to fix the code down there, product list here no longer exists,

25
00:02:01.270 --> 00:02:07.300
instead now we have to instantiate our class, maybe create a product list object now with new product

26
00:02:07.480 --> 00:02:12.310
list and then there, we could call productList.render, like that.

27
00:02:12.310 --> 00:02:16.900
That's how we could do it and if we save it, with that we should see the same result

28
00:02:16.900 --> 00:02:20.170
as before if we reload but we're not there yet,

29
00:02:20.260 --> 00:02:26.330
it's not the final result I want. Instead now I want to outsource the logic for a single product,

30
00:02:26.350 --> 00:02:33.140
so what we render for a single product into another class. So add another class and the order of classes

31
00:02:33.160 --> 00:02:40.270
by the way does not matter, when your script loads, Javascript will parse it entirely before it executes

32
00:02:40.270 --> 00:02:45.850
it and all the classes are then understood and recognized by the Javascript engine,

33
00:02:45.850 --> 00:02:51.970
so if I refer to a class inside of product list, I don't have to define it in front of product list,

34
00:02:51.970 --> 00:02:56.230
I could define it thereafter, Javascript will be aware of all classes,

35
00:02:56.230 --> 00:03:02.920
same here for product, I'm using product in product list, the same code would also work if I cut product,

36
00:03:02.920 --> 00:03:07.600
if I cut the product class from there and move it here to the bottom after the product list class,

37
00:03:07.900 --> 00:03:09.390
only important thing,

38
00:03:09.520 --> 00:03:15.160
all your classes have to be defined before you execute any code where you might use them.

39
00:03:15.160 --> 00:03:20.410
So if I would move the product class after these two lines, we would get an error, moving it here will

40
00:03:20.410 --> 00:03:21.460
work though.

41
00:03:21.460 --> 00:03:26.160
So if I now save that and I reload, you will see the same output as before.

42
00:03:26.300 --> 00:03:27.390
Still, here

43
00:03:27.400 --> 00:03:30.040
I like to have my product class first,

44
00:03:30.130 --> 00:03:35.830
also because it's a pretty simple class which just defines the structure of very simple object

45
00:03:36.130 --> 00:03:42.370
but the class order does not matter as long as you define all classes before you execute any code where

46
00:03:42.370 --> 00:03:43.450
you need them

47
00:03:43.450 --> 00:03:48.300
but back to our new class and that would be the product item class let's say.

48
00:03:48.310 --> 00:03:53.560
Of course these class names are always up to you and that should be a class that is responsible for

49
00:03:53.560 --> 00:04:02.280
rendering a single product item unsurprisingly. For that, we can add a constructor and we could accept

50
00:04:02.280 --> 00:04:06.970
a couple of properties that make up a product, to be precise title, imageUrl

51
00:04:07.020 --> 00:04:07.730
and so on.

52
00:04:07.740 --> 00:04:14.370
Basically what we already have in there and therefore we can also accept the overall product object

53
00:04:14.370 --> 00:04:15.450
which we get.

54
00:04:15.480 --> 00:04:22.770
So then here we could say this product is equal to product and I just expect to get a product which

55
00:04:22.770 --> 00:04:25.230
has this structure here in product item.

56
00:04:25.230 --> 00:04:31.980
I do split this into a product in a product item object here because this product up there should just define

57
00:04:32.040 --> 00:04:35.550
how a simple product looks like, just which data is in there,

58
00:04:35.550 --> 00:04:37.950
it just is there to group data together.

59
00:04:38.190 --> 00:04:43.080
Product item down here should not group data together or not primarily,

60
00:04:43.080 --> 00:04:48.350
instead this class will now also hold the logic to render a single product item.

61
00:04:48.360 --> 00:04:53.280
So here we could add another render method and of course you can name this method however you want,

62
00:04:53.280 --> 00:04:59.910
doesn't have to be named render and then there, I want to have the logic for creating that single product

63
00:04:59.940 --> 00:05:09.690
element. So we can actually cut all that code here, cut it from the product list and move it into this

64
00:05:09.690 --> 00:05:15.690
render method of product item, so that I create my product element there with document create element

65
00:05:15.690 --> 00:05:22.540
and now here of course when I access imageUrl and so on, I have to reach out to my product property,

66
00:05:22.590 --> 00:05:28.980
so in here since render belongs to this class here, it should normally be called on an object created

67
00:05:29.160 --> 00:05:30.210
with that class,

68
00:05:30.300 --> 00:05:36.600
so therefore here we should have this available and this should refer to the object created based on

69
00:05:36.600 --> 00:05:37.650
the class

70
00:05:37.710 --> 00:05:43.860
Now on this, we should have a product property, so we should be able to do this.product and then

71
00:05:43.860 --> 00:05:53.260
.imageUrl because every product object has an imageUrl property. So same for the title,

72
00:05:53.290 --> 00:05:56.150
should be this.product.title,

73
00:05:56.320 --> 00:05:59.930
also of course down there, this.product.title,

74
00:06:00.070 --> 00:06:08.950
this.product.price and this.product.description, that should all be available here.

75
00:06:09.040 --> 00:06:14.080
Now with that, I have the logic to render a single product in my product item,

76
00:06:14.080 --> 00:06:20.380
the problem we have here is that this creates a product element but doesn't know where to append it.

77
00:06:20.410 --> 00:06:23.480
Now we get two possible solutions for that, solution

78
00:06:23.530 --> 00:06:32.290
A is that the render method accepts an element, a DOM object where we can call append and append this to

79
00:06:32.830 --> 00:06:36.960
or that in this render method, we instead return the created product

80
00:06:37.000 --> 00:06:44.620
and wherever we call render, we have the responsibility to then use that returned object and append

81
00:06:44.620 --> 00:06:52.030
it and that's the approach I'll go for, I will return prod el in here, in render and now we can just go

82
00:06:52.030 --> 00:07:02.230
to the product list and in here where I go through all products, we can now create a product with new product

83
00:07:02.380 --> 00:07:06.070
item, let's also maybe name it product item here,

84
00:07:06.070 --> 00:07:12.310
so by using the product item class we just worked on and constructing an object based on it , to that

85
00:07:12.340 --> 00:07:15.520
as you learned, you have to pass a product,

86
00:07:15.520 --> 00:07:20.440
that's what we expect in the constructor and that's what we pass between parentheses when we create

87
00:07:20.440 --> 00:07:23.970
a new object with the new keyword and prod here

88
00:07:23.980 --> 00:07:29.380
where I through all products in product list conveniently is just such a product object.

89
00:07:29.410 --> 00:07:37.570
So here we can just pass in prod and then we can create our prod el or get access to the created prod

90
00:07:37.570 --> 00:07:46.870
el here by calling productItem.render and as you learned, render will return this new object.

91
00:07:46.870 --> 00:07:53.110
So now we can append product element again because prod el is such a DOM object created by render but

92
00:07:53.110 --> 00:08:00.730
by render in product item and now we might be able to see the advantages of this object oriented approach

93
00:08:00.760 --> 00:08:06.880
become clearer. Now we already split our logic in some classes and yes of course it's still in the same

94
00:08:06.880 --> 00:08:12.430
file but if you are now coming to this code, if you're a new developer working on the project and you

95
00:08:12.430 --> 00:08:17.980
want to find out where's the logic for rendering a single product, then you don't have to scan through

96
00:08:17.980 --> 00:08:24.160
all the file, you just have to find this product item class and it will be pretty clear that yes here,

97
00:08:24.280 --> 00:08:29.500
this is what's responsible for rendering a single product element and you don't have to worry about

98
00:08:29.500 --> 00:08:35.110
the other code. So it can make your code more readable and more structured and that's the idea behind

99
00:08:35.170 --> 00:08:42.410
Object Oriented Programming. Well with that, let's save all of that and let's reload this page and again

100
00:08:42.440 --> 00:08:49.610
we get the same result as before but now with two classes that are involved in rendering content and

101
00:08:49.610 --> 00:08:54.980
now this also shows you how you can have classes with logic attached to them besides having classes

102
00:08:54.980 --> 00:09:01.700
that are just blueprints for data containers which also of course are very useful but here, this helps

103
00:09:01.700 --> 00:09:04.610
us split our logic which makes our code more readable.
