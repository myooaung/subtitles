1
00:00:02,190 --> 00:00:03,950
So which function could we write?

2
00:00:04,030 --> 00:00:09,490
Well let's say we want to make sure that at some point of time in this module, we can click the plus

3
00:00:09,490 --> 00:00:15,550
button and add whatever we entered here to our current result which initially is zero

4
00:00:15,550 --> 00:00:19,420
and then if we type five here and click plus, we want to get five.

5
00:00:19,420 --> 00:00:24,430
So the new result is then five, if I thereafter type 10 and I click plus, we would get 15,

6
00:00:24,460 --> 00:00:24,700
right?

7
00:00:24,700 --> 00:00:26,810
So that would be an idea to get started with

8
00:00:27,070 --> 00:00:33,140
and for that, we need a function or we could add a function that does just that, that adds two numbers.

9
00:00:33,790 --> 00:00:36,060
So for that we can define a function

10
00:00:36,280 --> 00:00:38,230
and it's up to you where you do that,

11
00:00:38,230 --> 00:00:41,670
you can actually do it kind of at the start of your script,

12
00:00:41,670 --> 00:00:48,040
maybe below your variable definitions or you can actually also do it at the end of your script and Javascript

13
00:00:48,040 --> 00:00:54,400
is smart enough to kind of read your entire file before it executes it and it will therefore find any

14
00:00:54,400 --> 00:00:55,590
functions you use

15
00:00:55,630 --> 00:01:01,480
so that it then automatically pulls these functions to the top so to say, so that if you define a function

16
00:01:01,480 --> 00:01:05,680
down there but you then use it somewhere above its definition,

17
00:01:05,680 --> 00:01:11,440
you can still execute that code without an error, something which by the way is not possible for variables

18
00:01:11,440 --> 00:01:17,770
and constants you defined with let and const but I'll come back to this in a second. For now, let's just add a

19
00:01:17,770 --> 00:01:22,910
function here let's say and let's name it add and you can pick any name you want here,

20
00:01:23,020 --> 00:01:27,450
the idea for the name here just should be that it describes the action

21
00:01:27,460 --> 00:01:34,210
this function will perform. So if its a function that adds two numbers, something like add or add numbers

22
00:01:34,240 --> 00:01:41,320
makes sense instead of give me two numbers which describes what it wants to get as an input but not

23
00:01:41,320 --> 00:01:50,070
what it does. You also don't want to have something like result as a name because what does this function

24
00:01:50,070 --> 00:01:50,390
do,

25
00:01:50,390 --> 00:01:51,690
it doesn't tell us anything,

26
00:01:51,720 --> 00:01:53,160
it gives us some results,

27
00:01:53,160 --> 00:01:55,740
sure but for which operation?

28
00:01:55,740 --> 00:02:00,900
So here, add sounds like a fitting name, it makes it clear that this is a function which will do some

29
00:02:00,990 --> 00:02:07,390
addition and then as I said, a function can but doesn't have to take parameters.

30
00:02:07,390 --> 00:02:12,670
Now in Javascript and you'll see that throughout the course of course, there are functions which work

31
00:02:12,760 --> 00:02:14,230
without any input,

32
00:02:14,260 --> 00:02:20,290
let's say you have a function which kind of reads something from the HTML page.

33
00:02:20,290 --> 00:02:25,540
This probably doesn't take any input because inside of the function, you have all the information you

34
00:02:25,540 --> 00:02:30,010
need to kind of reach out to the HTML page and get some data from there.

35
00:02:30,010 --> 00:02:35,530
On the other hand, a function which should add two numbers probably needs these two numbers which it

36
00:02:35,530 --> 00:02:36,200
should add,

37
00:02:36,520 --> 00:02:42,610
so we should provide two parameters here and you can give these parameters any name you want.

38
00:02:42,610 --> 00:02:48,700
So I will go with num1 and num2 but you could go with a and b or with number1 and number2

39
00:02:48,700 --> 00:02:55,630
or whatever you want. These parameters which you define here are then available in the so-called function

40
00:02:55,630 --> 00:02:58,830
body which is the last missing piece on this function.

41
00:02:59,050 --> 00:03:05,110
You add the function body by adding curly braces here, like this

42
00:03:05,110 --> 00:03:09,190
and now important, after the function you don't have a semicolon.

43
00:03:09,190 --> 00:03:12,310
Now you could add one but typically, you don't do that.

44
00:03:12,310 --> 00:03:16,860
You add a semicolon after all these one-line expressions here

45
00:03:17,170 --> 00:03:23,810
but after a statement as this is called, which includes such curly braces like this one does here,

46
00:03:23,830 --> 00:03:25,790
you don't add a semicolon.

47
00:03:25,810 --> 00:03:31,600
You can just keep this in mind, whenever you have some curly braces with some code, some executable code

48
00:03:31,600 --> 00:03:37,930
in between, you don't have a semicolon after the curly braces. Whenever you have these short expressions

49
00:03:37,930 --> 00:03:47,150
here, you have a semicolon at the end. So here, we have a function, keyword, name, parameters which are optional

50
00:03:47,240 --> 00:03:48,370
and then the function body

51
00:03:48,440 --> 00:03:51,490
and now in the function body, you can do all kinds of things,

52
00:03:51,530 --> 00:03:59,420
for example we can define a constant in here as well, maybe name this result and just add num1 and num2

53
00:03:59,420 --> 00:04:04,940
here. Now num1 and num2 are like variables, though they're never defined with the let or

54
00:04:04,940 --> 00:04:10,660
const keyword but they're automatically defined by Javascript but they're only available inside of

55
00:04:10,670 --> 00:04:12,860
this function body, not outside.

56
00:04:12,860 --> 00:04:19,190
So if I would try to do something with num1 here after the function definition, this would not work

57
00:04:19,220 --> 00:04:24,830
because num1 and num2 are variables only available inside of the function body.

58
00:04:24,860 --> 00:04:30,380
Now I used them here to add them together because I expect this function to be called such that whatever

59
00:04:30,380 --> 00:04:37,820
I get here on num1 and num2 are numbers and therefore, adding them works and I store the result in a new

60
00:04:37,820 --> 00:04:38,780
constant.

61
00:04:38,780 --> 00:04:44,810
Now the interesting thing here is that this constant is defined inside of the function, not at the top

62
00:04:44,810 --> 00:04:46,250
level of our script

63
00:04:46,370 --> 00:04:50,840
and that's something you can do in Javascript and that is actually quite normal.

64
00:04:50,870 --> 00:04:55,470
You can have variables and constants here at the top level of your script,

65
00:04:55,490 --> 00:05:02,340
this is also called in the global scope but you can also have them inside of your function

66
00:05:02,480 --> 00:05:07,910
and it's actually important where you define that and I'll come back to that. For now, I want to calculate

67
00:05:07,910 --> 00:05:13,940
a result which I only use inside of the function and therefore we can declare and define this variable

68
00:05:14,120 --> 00:05:17,690
or this constant actually inside of that function.

69
00:05:17,690 --> 00:05:23,870
Now inside of the function body, you see that my IDE automatically indents the code, which means it's

70
00:05:23,870 --> 00:05:26,750
not totally on the left here but there is some empty space.

71
00:05:26,750 --> 00:05:28,670
This is done for readability,

72
00:05:28,670 --> 00:05:30,290
technically this is not required,

73
00:05:30,290 --> 00:05:33,740
your code would run even if this would all be written in one line,

74
00:05:33,740 --> 00:05:38,810
so if you would move that right next to the curly braces and have that all defined in one line but having

75
00:05:38,810 --> 00:05:45,020
the functions split out across multiple lines and having this indentation, this empty space simply helps with

76
00:05:45,050 --> 00:05:47,330
reading or understanding your function.

77
00:05:47,330 --> 00:05:52,520
Now regarding the amount of empty space you have to the left, you can find a lot of discussions about

78
00:05:52,520 --> 00:05:53,650
that on the Internet.

79
00:05:53,690 --> 00:05:58,570
Now here, I indent it by four blanks so to say, so four whitespaces,

80
00:05:58,580 --> 00:06:02,930
now you'll find discussions on the Internet whether you want to use four or two, whether you want to use

81
00:06:02,930 --> 00:06:04,970
tabs or whitespace,

82
00:06:04,970 --> 00:06:11,210
I'm a fan of whitespace and I'll typically use two also later when I do autoformat my document,

83
00:06:11,210 --> 00:06:15,700
it's configured to use two whitespaces here instead of four as I have it right now.

84
00:06:15,710 --> 00:06:18,290
You can go with whichever approach you want,

85
00:06:18,300 --> 00:06:25,250
you then should just stick to it and be consistent and you can also configure your code styling, your code

86
00:06:25,460 --> 00:06:31,780
formatting plugin for the IDE you're using to format your code according to your preferences.

87
00:06:31,790 --> 00:06:37,210
Again my tool will later change this to two blanks here instead of four as I have it right now,

88
00:06:37,310 --> 00:06:41,580
you can go for either of that, you just should write readable code in the end.

89
00:06:41,720 --> 00:06:45,600
So this will now hold the result of num1 and num2 added together

90
00:06:45,650 --> 00:06:51,650
and now what can we do with the result? Well we can for example output it with the alert function.

91
00:06:51,680 --> 00:06:58,640
This is a function built into Javascript or built into the browser and provided to you in Javascript

92
00:06:58,730 --> 00:07:00,760
executed in the browser.

93
00:07:00,920 --> 00:07:04,760
So we don't need to define this function on our own to call it,

94
00:07:04,760 --> 00:07:05,620
it's available,

95
00:07:05,690 --> 00:07:07,880
it's one of the built-in functions

96
00:07:07,880 --> 00:07:11,300
and there are a couple of built-in functions in Javascript,

97
00:07:11,300 --> 00:07:15,970
it depends on whether you're running Javascript in the browser or outside of the browser

98
00:07:16,010 --> 00:07:21,050
but here we're in the browser and there we have something like the alert function which is built

99
00:07:21,050 --> 00:07:23,270
in, made available by the browser.

100
00:07:23,270 --> 00:07:26,040
So alert then allows us to output a message and

101
00:07:26,120 --> 00:07:32,810
We could say the result is and then this is a string of course, add result here

102
00:07:32,900 --> 00:07:38,150
and of course you could have also used the back ticks notation with this dollar sign curly brace embedding

103
00:07:38,150 --> 00:07:46,760
here. Now I do create a string here where I concatenate my result because alert actually wants

104
00:07:46,790 --> 00:07:51,710
a message as a parameter and you can see this if you hover over alert in Visual Studio Code.

105
00:07:51,710 --> 00:07:56,740
You see this is a function, again provided by Javascript or by the browser

106
00:07:56,870 --> 00:07:59,810
and this wants a message parameter, you can ignore

107
00:07:59,870 --> 00:08:00,940
the question mark for now,

108
00:08:00,950 --> 00:08:04,100
that simply means that providing this message is optional

109
00:08:04,110 --> 00:08:08,660
so you could throw an alert without a message which is kind of pointless though and message here is

110
00:08:08,660 --> 00:08:14,210
a parameter which actually should be a string because you want to output some text typically.

111
00:08:14,930 --> 00:08:18,350
So now I'm outputting this text here, this alert.

112
00:08:18,350 --> 00:08:24,260
Now if I save this and we reload, nothing happens, we see no alert

113
00:08:24,350 --> 00:08:27,680
and the reason for that is that we're not calling this function yet.

114
00:08:27,680 --> 00:08:33,320
As I mentioned, you need to call a function in order for it to be executed.

115
00:08:33,320 --> 00:08:35,550
Now how do you call a function?

116
00:08:35,570 --> 00:08:37,990
Well you can just use the function name,

117
00:08:38,000 --> 00:08:43,100
so in this case add and if you picked a different name, you have to pick a different name here and then

118
00:08:43,100 --> 00:08:44,570
add parentheses like this.

119
00:08:45,080 --> 00:08:50,180
So a bit like you defined it here but without the function keyword and without the body because this

120
00:08:50,180 --> 00:08:53,910
defines what's inside of the function, how it works,

121
00:08:53,930 --> 00:09:00,350
this now calls the function and here I add a semicolon again because here I don't have the curly braces,

122
00:09:00,380 --> 00:09:05,290
I don't define the function here, I just execute this as a so-called expression,

123
00:09:05,290 --> 00:09:07,750
so I just have this line of code which is executed.

124
00:09:07,880 --> 00:09:12,890
This line of code is also executed but it's executed such that this code is registered and stored by

125
00:09:12,890 --> 00:09:13,800
Javascript,

126
00:09:13,880 --> 00:09:16,990
so it kind of is made aware of this function,

127
00:09:17,030 --> 00:09:21,230
this line then executes and calls that function,

128
00:09:21,230 --> 00:09:23,340
it runs that function.

129
00:09:23,360 --> 00:09:29,750
Now this function to work correctly needs two parameters, also called arguments.

130
00:09:29,750 --> 00:09:31,960
It needs a number one and a number two

131
00:09:32,060 --> 00:09:37,520
and now here of course you don't provide num1 or num2, so you don't repeat these names,

132
00:09:37,520 --> 00:09:41,740
these are just internal names for these automatically created variables

133
00:09:41,750 --> 00:09:47,600
you can use inside of the function, instead here you now provide the concrete values that the function

134
00:09:47,600 --> 00:09:49,030
should use for running,

135
00:09:49,070 --> 00:09:53,210
so something like 1 and 2 if you want to add 1 and 2 together.

136
00:09:53,270 --> 00:10:00,980
So now, num1 would be set to 1 and num2 would be set to 2 for this function execution

137
00:10:00,980 --> 00:10:07,490
and as I said we can now run a function multiple times by executing it again with 5 and 5 for example.

138
00:10:07,490 --> 00:10:14,410
Now we would execute the function two times - one with a value of 1 for num1 and the value of 2 for

139
00:10:14,410 --> 00:10:15,060
num2

140
00:10:15,200 --> 00:10:22,760
and then the second time we run it, we pass in a value of 5 for num1 and the value of 5 for num2.

141
00:10:22,760 --> 00:10:30,020
And now if we save that and we reload this file, you see since this script runs right away, we get the

142
00:10:30,020 --> 00:10:36,860
alert with the result is 3 because here I am calling this function with 1 and 2 and if I click

143
00:10:36,920 --> 00:10:37,760
OK,

144
00:10:37,930 --> 00:10:43,640
I right away get another alert because we're running this function twice and script execution is kind

145
00:10:43,640 --> 00:10:49,440
of blocked by the alert which is why the second alert waits until we dismiss the first alert and then

146
00:10:49,440 --> 00:10:50,230
in that second alert,

147
00:10:50,270 --> 00:10:54,370
I see the result is 10 because I call this function with 5 and 5

148
00:10:54,920 --> 00:11:01,400
and if I dismiss, then we see that page being rendered. So this is how we define a function and how

149
00:11:01,400 --> 00:11:03,380
we call it in Javascript.

150
00:11:03,380 --> 00:11:09,530
Now I will emphasize again that a function can have as many parameters as it needs if it needs to have

151
00:11:09,530 --> 00:11:09,980
some,

152
00:11:10,070 --> 00:11:12,640
you can have one parameter, two as we have it here,

153
00:11:12,660 --> 00:11:18,990
three, five, four, as many as you want and a function can also do one other thing which we're not doing here,

154
00:11:19,040 --> 00:11:20,390
it can return something.
