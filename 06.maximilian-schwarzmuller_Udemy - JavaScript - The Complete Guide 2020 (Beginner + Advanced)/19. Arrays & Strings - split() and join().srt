1
00:00:02,290 --> 00:00:06,600
So that's basically it for all these special array methods.

2
00:00:06,610 --> 00:00:14,090
Now there are two other special methods which are related to strings and they're also quite handy.

3
00:00:14,710 --> 00:00:23,420
Let's say you have some data which you maybe read from some csv file which looks like this, New York;

4
00:00:23,540 --> 00:00:29,050
10.99; 2000,

5
00:00:29,050 --> 00:00:34,180
whatever value that might be but you have that value. You might want to transform this to an array where

6
00:00:34,180 --> 00:00:41,110
you have three separate values instead of one single value like this, actually this of course shouldn't

7
00:00:41,110 --> 00:00:42,550
be an array, it's just a string.

8
00:00:42,550 --> 00:00:48,160
So instead of having a string with this combined data which to us humans is clearly recognizable as

9
00:00:48,160 --> 00:00:53,650
three different pieces of data, you might want to split it into three real elements with which you can

10
00:00:53,650 --> 00:01:02,330
work on the computer as well. For that, the transformed data can be created by running data.split.

11
00:01:02,340 --> 00:01:08,200
Now that's a string method, not an array method because data is a string not an array.

12
00:01:08,200 --> 00:01:17,160
Now split splits a string into an array of multiple segments and as an argument, you specify the separator

13
00:01:17,170 --> 00:01:25,090
by which you split, that could be a whitespace, so blank, underscore, comma, any arbitrary character or of

14
00:01:25,090 --> 00:01:27,190
course also a semicolon

15
00:01:27,190 --> 00:01:33,700
and this will now split that string into three elements after every semicolon, it will pull out a new

16
00:01:33,700 --> 00:01:41,940
element and split therefore returns an array with these elements into which this string was split.

17
00:01:42,120 --> 00:01:48,480
You can also specify an optional second argument to limit the number of elements which is created

18
00:01:48,480 --> 00:01:49,590
but here I don't want that,

19
00:01:49,590 --> 00:01:55,380
I just want to split it like that and therefore here if we console log the transformed data like this

20
00:01:56,190 --> 00:02:02,240
and we save that and we reload, we indeed have our array with these three data pieces.

21
00:02:02,280 --> 00:02:07,230
Now of course if you would want to transform numbers to real numbers, you would have to do that as well

22
00:02:07,230 --> 00:02:10,650
with parseInt by then diving into that transform data

23
00:02:10,650 --> 00:02:18,420
and for example using the map method to transform some elements or targeting them by index and setting

24
00:02:18,420 --> 00:02:24,390
that equal to plus transform data, one for example to replace it with a real number if you wanted to.

25
00:02:24,390 --> 00:02:26,810
These are things you can do as you can tell

26
00:02:26,910 --> 00:02:32,190
but the split method is the main thing I wanted to focus here as it allows you to split a string into

27
00:02:32,190 --> 00:02:33,390
an array.

28
00:02:33,420 --> 00:02:36,200
Now you also have the opposite kind of operation,

29
00:02:36,450 --> 00:02:44,710
let's say you have the name fragments constant here and that has Max and Schwarz

30
00:02:44,820 --> 00:02:47,270
so that could be a first and a last name

31
00:02:47,460 --> 00:02:53,520
and you had this as an array because maybe you pulled this from two different inputs on the screen and

32
00:02:53,520 --> 00:02:58,590
now you want to merge this together into one string which you can use in your user interface to greet

33
00:02:58,620 --> 00:03:01,160
the user or anything like that.

34
00:03:01,230 --> 00:03:08,790
Well then merging this into a string is very easy by using another special array method now because

35
00:03:08,790 --> 00:03:11,460
name fragments now is an array, not a string

36
00:03:11,520 --> 00:03:13,640
and there you have the join method.

37
00:03:13,860 --> 00:03:19,560
Now join also takes a separator which you can use to join these things together.

38
00:03:19,560 --> 00:03:24,790
Now let's first of all join without a separator to then see the difference and console log name.

39
00:03:24,790 --> 00:03:31,050
So this should now join the elements of this array into one string and it will always generate a string,

40
00:03:31,260 --> 00:03:36,140
even if you had numbers in here, it would still work but it would convert everything to a string.

41
00:03:36,270 --> 00:03:41,880
So if we now save that and we reload, indeed we see Max Schwarz and you see by default it separates

42
00:03:41,880 --> 00:03:48,030
the values by a comma. Now that might or might not be what you want, if you want some whitespace for example,

43
00:03:48,100 --> 00:03:51,050
you simply add this as a separator here,

44
00:03:51,120 --> 00:03:57,690
so as an argument to join and if you do that, now the elements of this array will be joined together

45
00:03:57,690 --> 00:04:03,540
into a string with this as a separator between the individual words in the string in the end.

46
00:04:03,540 --> 00:04:07,290
So now if we reload, we see Max, Schwarz like that.

47
00:04:07,290 --> 00:04:14,040
So join and split also are very helpful for transforming strings to arrays and arrays to strings and

48
00:04:14,040 --> 00:04:18,440
making sure that you got machine readable data and human readable names,

49
00:04:18,450 --> 00:04:19,620
that's the idea here.
