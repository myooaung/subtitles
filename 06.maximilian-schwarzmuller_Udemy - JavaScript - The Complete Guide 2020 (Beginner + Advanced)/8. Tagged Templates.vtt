WEBVTT
1
00:00:02.670 --> 00:00:04.920
We worked with template literals already,

2
00:00:04.980 --> 00:00:10.800
the idea here is that you could have some variable or some expression that produces a result that

3
00:00:10.800 --> 00:00:17.430
can be output in the string and then you might have your template literal where you say my name is and

4
00:00:17.430 --> 00:00:22.920
instead of having to concatenate strings with a plus which can be very cumbersome for long strings, you

5
00:00:22.920 --> 00:00:29.660
can use the ${} notation here to just inject any valid Javascript expression,

6
00:00:29.700 --> 00:00:34.050
so any expression that yields a value which can be output as a string.

7
00:00:34.050 --> 00:00:36.120
Here I'm referring to the name constant

8
00:00:36.120 --> 00:00:41.250
but we could also be calling a function, if we had a getName function here that returns something we

9
00:00:41.250 --> 00:00:43.880
can output or do whatever you want,

10
00:00:43.950 --> 00:00:46.760
only important thing is it has to be an expression,

11
00:00:46.770 --> 00:00:51.360
you can't put an if statement in there for example but that's what you already knew,

12
00:00:51.390 --> 00:00:55.610
that's the template literal syntax and that can be really useful.

13
00:00:55.620 --> 00:01:00.010
Now you can do even more with it than just output simple strings like this,

14
00:01:00.060 --> 00:01:04.230
you can create so-called tagged templates. A tag

15
00:01:04.230 --> 00:01:09.400
template is in the end a function that works together with a template literal.

16
00:01:09.480 --> 00:01:12.540
It all starts by creating a function,

17
00:01:12.540 --> 00:01:15.310
for example product description

18
00:01:15.310 --> 00:01:17.810
and this will make more sense in a second,

19
00:01:17.850 --> 00:01:25.680
a regular function which expects let's say three arguments and I'll come back to why three and what each

20
00:01:25.680 --> 00:01:27.960
argument holds in a second.

21
00:01:27.960 --> 00:01:33.520
Of course you can name all these arguments or parameters however you want but let's name the first one

22
00:01:33.600 --> 00:01:34.780
strings here,

23
00:01:34.980 --> 00:01:36.540
the second one

24
00:01:36.540 --> 00:01:41.660
product name and the third one product price. Now

25
00:01:41.660 --> 00:01:45.160
in here, I'll just return

26
00:01:45.260 --> 00:01:46.810
this is a product,

27
00:01:47.060 --> 00:01:49.300
nothing fancy, just a string.

28
00:01:49.310 --> 00:01:58.660
Now we can use that and for example create a constant, product output and there, we add product description

29
00:01:58.690 --> 00:02:00.390
but we don't call it like this,

30
00:02:00.390 --> 00:02:04.090
instead we do something which looks super strange at first,

31
00:02:04.330 --> 00:02:07.930
we add a template literal right after our function name.

32
00:02:08.050 --> 00:02:10.280
So there are no parentheses anywhere,

33
00:02:10.300 --> 00:02:13.570
we don't pass that as an argument to that function,

34
00:02:13.570 --> 00:02:21.180
we have our function name and after that, two back ticks and that's a syntax we haven't seen before.

35
00:02:21.310 --> 00:02:28.570
Behind the scenes, Javascript will call this function and kind of pass in this template literal but not just

36
00:02:28.570 --> 00:02:33.040
like this as a single string but it will actually split it up into

37
00:02:33.040 --> 00:02:38.190
for example three arguments here and send these into the function.

38
00:02:38.210 --> 00:02:43.810
Now the amount of arguments it sends in actually depends on your template literal.

39
00:02:43.810 --> 00:02:52.050
So here we could have this product and then for example parentheses which are part of the string,

40
00:02:52.070 --> 00:02:59.150
no special syntax, then for example an injected expression here where we have the product name and

41
00:02:59.150 --> 00:03:09.020
for that, let's add a new constant here, prod name Javascript course and refer to that here in our template

42
00:03:09.020 --> 00:03:19.270
literal interpolation syntax here, is and then for example the price, so here let's have the prod price

43
00:03:19.630 --> 00:03:24.310
and have 29.99 here and then insert this here.

44
00:03:24.370 --> 00:03:29.560
So it's a regular template here in the end if we ignore the function name in front of it where we inject

45
00:03:29.590 --> 00:03:34.690
or interpolate two pieces of information into our otherwise normal string,

46
00:03:34.690 --> 00:03:37.480
the strange thing here is that we have that function name in front of it.

47
00:03:37.690 --> 00:03:44.530
Now I said that Javascript would call this function for us and pass this in but not as a single argument

48
00:03:44.560 --> 00:03:47.260
but actually as three arguments.

49
00:03:47.260 --> 00:03:54.660
Well, that will make more sense if we start outputting this, let's console log product output here,

50
00:03:54.790 --> 00:04:03.400
product output and see what this yields us, what this function actually does. If we save that and we reload,

51
00:04:03.400 --> 00:04:05.140
we see this is a product.

52
00:04:05.140 --> 00:04:08.510
So what we see here is actually what this function returns,

53
00:04:08.620 --> 00:04:13.930
so it looks like this function was called and the result of the function is stored in this constant.

54
00:04:13.960 --> 00:04:14.240
OK so

55
00:04:14.270 --> 00:04:20.110
let's see what happens inside of the function and what we actually receive as arguments here. For that,

56
00:04:20.110 --> 00:04:29.330
we can of course console log strings, console log the product name here, so our second argument and console

57
00:04:29.330 --> 00:04:32.470
log the product price,

58
00:04:32.480 --> 00:04:38.520
our third argument. All of that gets logged here and with that let's save it and reload

59
00:04:38.600 --> 00:04:40.600
and now we see something interesting,

60
00:04:40.640 --> 00:04:44.300
now what we see here are these three outputs,

61
00:04:44.300 --> 00:04:51.800
these are from the lines 9, 10 and 11 which are just these three lines in the function. Now for

62
00:04:51.890 --> 00:04:59.930
strings, we see we're getting an array. We're getting an array which consists of three elements where

63
00:04:59.960 --> 00:05:01.780
each element is a string

64
00:05:02.120 --> 00:05:07.850
and the interesting thing here is in the end these three elements make up all the text we have down

65
00:05:07.850 --> 00:05:11.800
there in this template literal without our dynamic parts,

66
00:05:11.870 --> 00:05:20.230
so without the interpolated or the injected segments you could say. This product, blank opening parentheses,

67
00:05:20.360 --> 00:05:28.310
this is our first element, then between the first interpolated element and the second one, we have a closing

68
00:05:28.310 --> 00:05:36.950
parentheses, whitespace is whitespace and that's exactly our second element here in this array.

69
00:05:37.180 --> 00:05:43.690
And then after our second interpolated value or segment here, we got a dot which is also a regular

70
00:05:43.690 --> 00:05:49.030
string and therefore our third element in this array is is just that dot.

71
00:05:49.090 --> 00:05:56.770
So in the end, what this function does or what Javascript does with this special syntax here is it calls

72
00:05:56.830 --> 00:06:03.520
this function here product description and the first argument of that function always is an array of

73
00:06:03.520 --> 00:06:11.140
string segments which are taken from your template literal and which represent the string parts between

74
00:06:11.140 --> 00:06:13.040
your dynamic segments.

75
00:06:13.120 --> 00:06:20.230
Now your dynamic segments and of course here I should output this correctly now that I see it, your dynamic

76
00:06:20.230 --> 00:06:27.400
segments are passed in as additional arguments into that function in the order they appear in here in

77
00:06:27.400 --> 00:06:36.570
the template literal. So that's why, if I reload again, we see Javascript course and the price here. We

78
00:06:36.570 --> 00:06:43.140
see that here because these are our arguments, 2 and 3, in this function and Javascript simply goes through your

79
00:06:43.140 --> 00:06:49.110
template literal, takes all non-dynamic parts and puts them into this first argument which is an array

80
00:06:49.590 --> 00:06:57.720
and then takes the dynamic parts and adds them in the right order as argument values to this function. Now

81
00:06:57.810 --> 00:06:59.900
that hopefully makes sense,

82
00:07:00.000 --> 00:07:08.580
the obvious question is, why would we use that? Where can this be useful? Tagged templates can be useful

83
00:07:08.880 --> 00:07:15.510
if you have a scenario where you conveniently want to create some output, could be a string but could

84
00:07:15.510 --> 00:07:22.680
be something totally different as well, based on some string input, for example you could be using that

85
00:07:22.980 --> 00:07:31.020
to take some input here, some input text and convert this to a different text where you replace some

86
00:07:31.020 --> 00:07:39.180
values, for example here we could check if product price is greater than 20 and if it is, then we

87
00:07:39.180 --> 00:07:49.060
set some variable which I introduced in this function, price category maybe, to cheap here

88
00:07:49.190 --> 00:07:55.070
and if the price is greater than 20, we set price category to fair.

89
00:07:55.160 --> 00:08:03.470
Now we could output our string down there by constructing a new template literal for example and then

90
00:08:03.470 --> 00:08:06.400
by injecting strings,

91
00:08:06.500 --> 00:08:10.970
the first segment of our strings here which is the first segment of that template

92
00:08:10.970 --> 00:08:20.830
literal string here, thereafter the unchanged product name, thereafter the second segment of our strings

93
00:08:21.550 --> 00:08:23.900
which is this segment

94
00:08:24.130 --> 00:08:34.330
but then instead of the original price, we insert the price category here and then we insert the last

95
00:08:35.340 --> 00:08:37.780
piece of our original string.

96
00:08:37.800 --> 00:08:45.330
So now we're outputting a fully dynamic string, a dynamically generated string where we swap a value

97
00:08:45.660 --> 00:08:52.170
with some included logic and especially if you for example have a more complex logic for encoding a

98
00:08:52.170 --> 00:08:58.080
numeric price into a category as we're doing it here, then you might be better off using such a tagged

99
00:08:58.110 --> 00:09:04.350
template function here instead of using a ternary expression down there for example, which would take

100
00:09:04.350 --> 00:09:08.530
up a lot of space and could quickly be unreadable or hard to read at least.

101
00:09:08.670 --> 00:09:15.690
So that would be a scenario where such a tagged template can save you time and lead to a better, more readable

102
00:09:15.690 --> 00:09:22.560
output because you can run your more complex logic in there and then just output the updated string

103
00:09:22.710 --> 00:09:24.270
down there in the end.

104
00:09:24.270 --> 00:09:29.270
So if we for example run this, we get this product is fair,

105
00:09:29.460 --> 00:09:40.670
we could of course also say fairly priced here and there, pretty cheap regarding its price, something

106
00:09:40.670 --> 00:09:41.110
like that

107
00:09:41.120 --> 00:09:48.260
and if we do that, you'll see here we got is fairly priced. So that's how you can work with that

108
00:09:48.310 --> 00:09:50.450
and of course there are many things you can do,

109
00:09:50.470 --> 00:09:56.080
you're also not forced to return a string here. Whilst that is a possibility, you could also return

110
00:09:56.080 --> 00:10:03.910
an object here with the name which is product name and the price which is product price

111
00:10:04.030 --> 00:10:11.050
and now you would have a function that simply converts a string into an object. It throws away the string

112
00:10:11.050 --> 00:10:17.600
parts you got and then just gives you the data that you dynamically injected there. If you needed that

113
00:10:17.620 --> 00:10:22.900
for whatever reason, you could do that and you would be getting an object without any errors because you're

114
00:10:22.900 --> 00:10:26.410
not forced to return a string in a tagged template.
