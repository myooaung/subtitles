WEBVTT
1
00:00:02.440 --> 00:00:06.470
So iterators and generators can be a confusing concept. In the end,

2
00:00:06.490 --> 00:00:08.990
just keep in mind that a generator function,

3
00:00:09.100 --> 00:00:13.120
the function with that star here and with the yield keyword is a function

4
00:00:13.120 --> 00:00:16.690
that returns a new object which has a next method,

5
00:00:16.690 --> 00:00:19.570
so what we wrote before manually.

6
00:00:19.570 --> 00:00:26.080
Now you can write it manually and you could also just store an object with a next method here as a value

7
00:00:26.080 --> 00:00:31.240
for the symbol iterator and you would be able to use for/of but using a generator function is simply

8
00:00:31.240 --> 00:00:31.780
easier,

9
00:00:31.780 --> 00:00:38.890
it's less code. What you yield here in the end will be the returned value of the next method later and

10
00:00:38.890 --> 00:00:44.860
the generator function will create an object with such a next method where the next method will automatically

11
00:00:44.860 --> 00:00:52.480
return an object with a value property, with whatever you yielded here or undefined if you're not yielding

12
00:00:52.480 --> 00:00:58.640
anything new anymore and a done property which is either true if it is done or false

13
00:00:58.660 --> 00:01:05.260
if there are more values that can be extracted and it's this exact concept, this iterator symbol with

14
00:01:05.260 --> 00:01:09.720
such an iterator object that is used under the hood by arrays.

15
00:01:09.820 --> 00:01:18.110
If we add a new array here, persons, where we have Max and Manu, then in the end you learned that such

16
00:01:18.110 --> 00:01:20.540
an array is just an object, right,

17
00:01:20.540 --> 00:01:23.490
an array is just a special type of object you could say

18
00:01:23.660 --> 00:01:30.680
and if we console log this persons array and we save that and reload, we see this array like this but

19
00:01:30.680 --> 00:01:36.710
we also see for example that it has a length property because it is an object which basically has properties

20
00:01:36.710 --> 00:01:41.030
with an identifier of 0 and 1 but also a length property.

21
00:01:41.030 --> 00:01:47.930
Now if we check the prototype of the array object, you will actually find this iterator symbol if you

22
00:01:47.930 --> 00:01:49.030
watch closely,

23
00:01:49.070 --> 00:01:52.610
this is something an array has on its prototype.

24
00:01:52.610 --> 00:01:59.450
It has all these array methods you learned about - filter, find and so on but it also has this special

25
00:01:59.570 --> 00:02:07.250
iterator symbol and the function here is then just a generator which yields us such an iterator object,

26
00:02:07.250 --> 00:02:10.330
an object with a next method. So an array,

27
00:02:10.340 --> 00:02:18.230
this default array we worked with all the time internally just uses the same logic we set up here and

28
00:02:18.230 --> 00:02:21.650
at least for that, even if you don't need to write this code on your own

29
00:02:21.650 --> 00:02:28.130
that often, this should be helpful for understanding how arrays work internally and how they are managed

30
00:02:28.130 --> 00:02:35.520
and how the data they return is managed because since an array also has a length property, we need some

31
00:02:35.520 --> 00:02:43.740
logic that controls that we only return these values on 0 and 1 here if we loop through this array and

32
00:02:43.740 --> 00:02:51.120
the logic for returning just that lives in this generator function and in the iterator next method which

33
00:02:51.120 --> 00:02:54.840
is generated when this generator function gets called,

34
00:02:54.930 --> 00:03:00.420
this is how arrays work internally and this is how generators and iterators work in general.

35
00:03:00.420 --> 00:03:07.350
So with that, we can also utilize symbols, the built-in iterator symbol to work with iterator and generators

36
00:03:07.410 --> 00:03:11.840
which allow us to create our own loopable values if we want to call it like this

37
00:03:12.000 --> 00:03:17.850
and which basically now help us understand what arrays and strings do internally and what we can do

38
00:03:17.850 --> 00:03:19.860
on our own objects.
