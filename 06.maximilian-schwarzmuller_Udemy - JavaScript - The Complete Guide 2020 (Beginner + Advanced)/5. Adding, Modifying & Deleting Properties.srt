1
00:00:02,260 --> 00:00:04,240
So our basic object here of course works.

2
00:00:04,270 --> 00:00:10,540
Now let's say we created an object and then for whatever reason, maybe because the user click the button

3
00:00:10,540 --> 00:00:13,600
and that triggers that we want to edit this object,

4
00:00:13,600 --> 00:00:18,070
we want to add a property after this object has been created.

5
00:00:18,070 --> 00:00:19,950
Now there are two approaches,

6
00:00:19,960 --> 00:00:24,390
the more complex approach would be to create a brand new object,

7
00:00:24,430 --> 00:00:29,590
for this we would have to turn this into a variable so that we can assign a new value to person because

8
00:00:29,590 --> 00:00:31,480
with a const, this would not be allowed,

9
00:00:31,540 --> 00:00:37,660
if you have a constant you must not ever assign a new value to it with an equal sign

10
00:00:37,660 --> 00:00:41,820
and then we could recreate this object here.

11
00:00:41,820 --> 00:00:47,880
Now we can copy over everything from there and of course then add whatever we want to add, let's say

12
00:00:47,910 --> 00:00:50,120
isAdmin true.

13
00:00:50,160 --> 00:00:53,870
Now of course that's super complex and not really what we might want to do,

14
00:00:54,000 --> 00:00:59,280
also if we changed some value here, we have to ensure that we pick up any changes that were made between

15
00:00:59,490 --> 00:01:02,060
this declaration and this reassignment,

16
00:01:02,070 --> 00:01:04,290
so in some code in between.

17
00:01:04,290 --> 00:01:10,470
So this is typically not what we might want to do in most use cases and certainly not manually by copying

18
00:01:10,470 --> 00:01:11,590
all the code,

19
00:01:11,610 --> 00:01:18,840
instead what you can always do on Javascript objects is you can use the dot notation and simply access

20
00:01:18,840 --> 00:01:20,970
a property which you haven't added before,

21
00:01:20,970 --> 00:01:26,430
for example isAdmin. At this point of time, person has no isAdmin property,

22
00:01:26,430 --> 00:01:29,420
we didn't add it here but you can do this here.

23
00:01:29,430 --> 00:01:35,340
Now if you try to log this, you will also not get an error and I'll remove that greet function call

24
00:01:35,340 --> 00:01:38,040
here so that this alert doesn't always open.

25
00:01:38,070 --> 00:01:39,960
So if we log that, we won't get an error,

26
00:01:39,960 --> 00:01:41,910
instead we just log undefined.

27
00:01:41,910 --> 00:01:43,630
That's also something to keep in mind.

28
00:01:43,800 --> 00:01:48,450
If you access a property on an object which doesn't exist, you're not getting an error,

29
00:01:48,690 --> 00:01:55,080
instead you get undefined but what you can do is you can simply assign a value to this property now,

30
00:01:55,470 --> 00:02:00,900
even if you didn't define it before. You can simply set this to true and if you therefore console

31
00:02:00,900 --> 00:02:06,190
log your entire person let's say, you will see that isAdmin is now a part of that person.

32
00:02:06,240 --> 00:02:10,460
So if we reload this and expand it here, we see isAdmin has been added.

33
00:02:10,620 --> 00:02:13,170
So adding properties on the fly is super easy,

34
00:02:13,200 --> 00:02:19,320
you just access them with the dot notation and assign a value and it doesn't matter if that property was

35
00:02:19,320 --> 00:02:23,270
part before or not, if it wasn't part of the person before it's now added,

36
00:02:23,370 --> 00:02:29,250
if it was part, so if we would set person age to 31 for example, well then we of course overwrite

37
00:02:29,280 --> 00:02:30,330
that old value.

38
00:02:30,330 --> 00:02:36,570
So we even overwrite or we add and both works, both are supported and that of course gives us a lot of flexibility

39
00:02:36,570 --> 00:02:38,160
there.

40
00:02:38,190 --> 00:02:41,120
Now sometimes you also want to get rid of a certain property,

41
00:02:41,220 --> 00:02:45,770
let's say you want to make sure that you actually delete the age here,

42
00:02:45,780 --> 00:02:51,570
so instead of reassigning it here, we want to get rid of a property. That's also possible with a special

43
00:02:51,570 --> 00:02:52,230
keyword

44
00:02:52,230 --> 00:02:57,090
Javascript provides to you, the delete keyword. You just type delete like this,

45
00:02:57,090 --> 00:03:04,650
then a whitespace so that this is a standalone keyword and then simply person. and then whatever

46
00:03:04,650 --> 00:03:07,170
property you want to delete, for example age,

47
00:03:07,170 --> 00:03:08,100
just like this

48
00:03:08,100 --> 00:03:15,680
and this will delete the age property from the person object. So if we now save that and we reload,

49
00:03:15,680 --> 00:03:19,150
you will see that in the logged person, age is missing.

50
00:03:19,160 --> 00:03:25,490
So if you ever want to remove a property, that is one way of doing it. Now always keep in mind, if we thereafter

51
00:03:25,490 --> 00:03:29,930
try to access age, we'll not get an error, we'll just get undefined,

52
00:03:29,930 --> 00:03:35,000
so deleting a property is basically as if you would set it to undefined.

53
00:03:35,030 --> 00:03:38,110
So if I reload here, we see undefined gets logged here.

54
00:03:38,160 --> 00:03:43,340
Therefore another way of getting rid of a property is to use person.age in this case here,

55
00:03:43,640 --> 00:03:47,600
so instead of using this and setting it equal to undefined.

56
00:03:47,640 --> 00:03:53,690
Now this is not super clean though, it will work, it will do the trick and you can technically use it

57
00:03:54,230 --> 00:04:00,330
but it is a good rule to keep in mind that you should actually never assign undefined to any value.

58
00:04:00,470 --> 00:04:06,140
You might remember earlier in the course I mentioned that we have undefined and null. null is the value

59
00:04:06,140 --> 00:04:12,320
we use if we want to reset something, if we want to clear something. Undefined is a value which we as

60
00:04:12,320 --> 00:04:20,420
a developer never actively assign to anything, instead undefined just is a default value Javascript assigns

61
00:04:20,600 --> 00:04:24,270
to uninitialized variables or properties in this case.

62
00:04:24,380 --> 00:04:29,540
So doing this technically works and you can do it of course, it's not a hard rule that you should never

63
00:04:29,900 --> 00:04:36,320
assign undefined to anything but you might consider if you really want to do that, this here might be

64
00:04:36,320 --> 00:04:37,250
cleaner,

65
00:04:37,280 --> 00:04:42,390
it clearly expresses what you want to do, the effect here is the same.

66
00:04:42,470 --> 00:04:47,580
Now you would by the way not have the same effect if you would set person.age to null.

67
00:04:47,580 --> 00:04:53,180
This will reset it but what you'll see is that if you now reload this, we log null here

68
00:04:53,270 --> 00:05:01,190
and if I log the entire person, you will see that age is now still an active property of person so to

69
00:05:01,190 --> 00:05:06,770
say because null is not exactly the same as undefined as you also learned. It's not exactly the same,

70
00:05:06,800 --> 00:05:11,960
they are of different types in the end and therefore it's a difference, if you set something to null

71
00:05:11,960 --> 00:05:15,470
which really just means the person has this property,

72
00:05:15,470 --> 00:05:17,550
we just don't have a value in there right now

73
00:05:17,690 --> 00:05:22,850
or if you set it to undefined which means this person doesn't even have an age property.

74
00:05:22,880 --> 00:05:27,830
So these are tiny things where you want to be careful, if you do that, you typically do that in situations

75
00:05:27,830 --> 00:05:33,760
where you say I'm going to assign some age later probably, I just don't have one right now

76
00:05:34,160 --> 00:05:39,320
whereas if you delete it, you're basically saying I don't need that age on that person anymore, I will

77
00:05:39,320 --> 00:05:42,710
never use it anywhere else in this program.

78
00:05:42,710 --> 00:05:48,350
So these are the subtle differences when it comes to deleting and resetting properties in objects.
