WEBVTT
1
00:00:02.190 --> 00:00:06.300
Now besides the symbols we can create and you can create as many as you want,

2
00:00:06.300 --> 00:00:09.510
there also are so-called well known symbols.

3
00:00:09.660 --> 00:00:15.330
These are symbols that are built into modern Javascript, basically Javascript after ES5,

4
00:00:15.360 --> 00:00:21.570
so ES6 or higher and were built in before too but now you can access them I should say

5
00:00:21.660 --> 00:00:26.160
and these are symbols that can help you do certain things.

6
00:00:26.160 --> 00:00:31.020
Now we'll see the symbol iterator thing in action a little bit later for example,

7
00:00:31.020 --> 00:00:37.770
this allows you to actually make any object iterable with the for/of loop which by default is not

8
00:00:37.770 --> 00:00:40.260
possible for a regular object for example,

9
00:00:40.260 --> 00:00:44.020
it is possible for an array though but I'll come back to that.

10
00:00:44.070 --> 00:00:47.120
Now we've got other well-known symbols there in the end,

11
00:00:47.160 --> 00:00:52.920
these are just symbols that are built into Javascript which you can access on this symbol object

12
00:00:52.920 --> 00:00:59.130
if you don't execute it like a function but instead as an object with a static property with the dot notation,

13
00:00:59.460 --> 00:01:05.220
then these are as symbols which were created by Javascript so to say and which you can therefore use

14
00:01:05.520 --> 00:01:12.570
in which Javascript then in turn also tries to find for certain actions, just as we as a library author

15
00:01:12.810 --> 00:01:20.010
can try to use the uid symbol here to for example reassign the value or extract the value, the Javascript

16
00:01:20.070 --> 00:01:25.590
engine also has certain built-in symbols which it also uses in certain circumstances,

17
00:01:25.590 --> 00:01:31.990
for example when the for/of loop gets executed, it tries to find that symbol iterator symbol here, the

18
00:01:32.010 --> 00:01:37.830
built-in iterator symbol on an object and see if the for/of loop can be used on that object because it

19
00:01:37.830 --> 00:01:43.190
requires that and some logic attached to it to use that but we'll see that when we dive into iterators

20
00:01:43.250 --> 00:01:48.120
and generators. For now just be aware that there are bunch of built-in symbols,

21
00:01:48.270 --> 00:01:50.320
most of the time you will not really need them, though

22
00:01:50.320 --> 00:01:57.390
there is one for example which I want to show you and that's the toString tag symbol. We have an object

23
00:01:57.390 --> 00:01:59.150
here, we have the user object here.

24
00:01:59.160 --> 00:02:05.550
Now when we console log user, you of course see this works quite well here and in the Chrome browser,

25
00:02:05.880 --> 00:02:14.600
we print this object. Now technically if we would call to string here on the user and we console log

26
00:02:14.610 --> 00:02:20.010
the result of that, you however get this object object thing here.

27
00:02:20.010 --> 00:02:26.370
Now that simply happens because the to string method called on any object just prints this, the to

28
00:02:26.370 --> 00:02:31.070
string method exists because it exists on the default prototype every object has

29
00:02:31.080 --> 00:02:33.280
but of course the output here is not useful.

30
00:02:33.330 --> 00:02:39.540
The fact that we can look into the object with console log is a little convenience offered by the Chrome

31
00:02:39.540 --> 00:02:40.620
browser in the end,

32
00:02:40.680 --> 00:02:43.220
it's not something we can rely on, normally

33
00:02:43.290 --> 00:02:48.120
it should actually just print the result of to string because that's what console log typically does

34
00:02:48.120 --> 00:02:53.700
but for objects the browser gives us this extra utility of actually printing the object in an analyzable

35
00:02:53.700 --> 00:02:54.290
way.

36
00:02:54.750 --> 00:03:01.560
So to string is something we can call though to convert the object to a string which we can show to

37
00:03:01.560 --> 00:03:03.210
a user for example.

38
00:03:03.210 --> 00:03:06.510
Now as I mentioned, what we then get is this here,

39
00:03:06.510 --> 00:03:10.830
now you can add a special symbol here to the user object,

40
00:03:10.830 --> 00:03:15.840
again with this dynamic property assignment syntax and here I want to use one of the built-in

41
00:03:15.840 --> 00:03:18.780
symbols. So we access symbol here,

42
00:03:18.780 --> 00:03:28.540
so this symbol object we executed as a function out there and then .toString tag. Now toString

43
00:03:28.540 --> 00:03:31.470
tag allows us to define a tag as a value,

44
00:03:31.510 --> 00:03:36.050
so a string tag here which will then be part of the output that is generated here,

45
00:03:36.190 --> 00:03:39.060
for example here we could say user object and

46
00:03:39.110 --> 00:03:43.160
now if we save that and we reload, we see now we're printing

47
00:03:43.180 --> 00:03:48.860
object user object and of course therefore we could also just print user here.

48
00:03:48.880 --> 00:03:53.910
So this allows us to for example tweak what the to string method outputs here,

49
00:03:54.010 --> 00:03:59.280
of course we could also simply override the entire to string method if we want to customize it completely

50
00:03:59.380 --> 00:04:04.900
but if we just want to change that tag which is part of the default output, we can do that with this

51
00:04:04.900 --> 00:04:06.040
built-in symbol.

52
00:04:06.050 --> 00:04:10.750
Now whilst this is not something you will use everyday because we could argue how useful and important

53
00:04:10.750 --> 00:04:16.350
that is, it shows you what the idea behind these well-known built-in symbols is,

54
00:04:16.420 --> 00:04:18.920
they are used by some Javascript code,

55
00:04:18.940 --> 00:04:20.920
some default Javascript code

56
00:04:20.920 --> 00:04:27.130
in this case here by the to string method which exists on every object and Javascript looks up these

57
00:04:27.190 --> 00:04:27.850
symbols

58
00:04:27.940 --> 00:04:34.720
and if it then finds them, which it does here when we define it in our own object, it uses them.

59
00:04:34.720 --> 00:04:36.450
So that's what we can do here

60
00:04:36.520 --> 00:04:42.010
and this would not work if we would try to create our own symbol to string tag because as I mentioned,

61
00:04:42.010 --> 00:04:45.250
this is just an identifier for you as a human,

62
00:04:45.250 --> 00:04:51.400
this is totally ignored by Javascript, this does not create a symbol of the same kind we just used.

63
00:04:51.400 --> 00:04:55.840
This creates a brand new symbol which Javascript simply doesn't look for,

64
00:04:55.870 --> 00:05:01.900
so we have to use this symbol which is built-in which Javascript is aware of and which Javascript looks

65
00:05:01.900 --> 00:05:04.790
for because it uses this all the time internally.

66
00:05:05.110 --> 00:05:06.750
So that's the idea behind symbols,

67
00:05:06.760 --> 00:05:12.990
you can create unique identifiers for your objects which you have to know in order to use them.
