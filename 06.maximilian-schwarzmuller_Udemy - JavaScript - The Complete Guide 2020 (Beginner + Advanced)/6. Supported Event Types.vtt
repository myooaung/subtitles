WEBVTT
1
00:00:02.210 --> 00:00:06.950
Of course we have more than just click events though. Back on our buttons,

2
00:00:06.950 --> 00:00:14.860
we can also register other events, for example mouse enter. Mouse enter is triggered whenever our mouse

3
00:00:15.100 --> 00:00:16.960
or a cursor enters this button,

4
00:00:16.960 --> 00:00:23.200
so if it is moved above this button. Now let me disable this disabling code so that we don't disable

5
00:00:23.200 --> 00:00:24.310
the button anymore

6
00:00:24.340 --> 00:00:25.470
and now let's have a look at that.

7
00:00:25.510 --> 00:00:31.240
If we now reload and I move my cursor above this button, you see that event triggers, if I keep the button

8
00:00:31.240 --> 00:00:36.100
on it, if I keep the cursor on the button, nothing happens, if I leave the button and re-enter it,

9
00:00:36.200 --> 00:00:37.840
we again trigger this.

10
00:00:37.840 --> 00:00:43.280
So of course you can also add a listener to listen for when the mouse leaves this button and so on.

11
00:00:43.300 --> 00:00:48.670
Now please also note that if we now inspect this, we got a lot of properties which we knew before too,

12
00:00:48.850 --> 00:00:50.350
client(x) and so on,

13
00:00:50.350 --> 00:00:55.090
so these coordinates, what we also have now however is a related target and

14
00:00:55.150 --> 00:00:56.110
that's quite interesting.

15
00:00:56.140 --> 00:00:59.740
We have this property for mouse enter, mouse leave and so on,

16
00:00:59.800 --> 00:01:07.110
this tells us which element the cursor was on before the mouse enter event trigger,

17
00:01:07.130 --> 00:01:13.160
so from which element we're coming basically and that in this case was this div which surrounds the buttons.

18
00:01:13.160 --> 00:01:15.080
So that's quite handy,

19
00:01:15.080 --> 00:01:22.230
also good to know there if you are very fast with your cursor and you move your button very fast, your

20
00:01:22.240 --> 00:01:28.990
cursor, you see in this case related target actually is the whole HTML document and not the div because

21
00:01:28.990 --> 00:01:36.670
I moved my cursor so fast over the div into the button that the browser basically didn't get that the cursor

22
00:01:36.670 --> 00:01:42.970
was on the div in between as well because the browser does not check the cursor position multiple times

23
00:01:42.970 --> 00:01:47.920
per millisecond but quite often but still only periodically

24
00:01:48.070 --> 00:01:54.820
and therefore if you move your cursor in a very fast way, this will not always be the direct neighbor

25
00:01:55.060 --> 00:01:57.940
of the button in this case that triggered the event.

26
00:01:58.000 --> 00:01:59.460
So that's just good to know,

27
00:01:59.530 --> 00:02:04.900
nonetheless it's a useful property which can help you understand where the mouse cursor is coming from.

28
00:02:06.290 --> 00:02:08.050
Now of course we have way more events

29
00:02:08.060 --> 00:02:13.940
and as I mentioned MDN is the place to go to learn more about them and in general simply throw some

30
00:02:13.940 --> 00:02:17.920
elements onto the screen, register some listeners and play around with events there,

31
00:02:17.930 --> 00:02:22.880
that's the best way of diving into them on your own and learning more about them, it's really what I

32
00:02:22.880 --> 00:02:28.190
would recommend for learning more about events, event objects and which events you have.

33
00:02:28.190 --> 00:02:32.530
Of course you're also not limited to registering events only on buttons,

34
00:02:32.540 --> 00:02:37.540
you can register events on basically any DOM elements, on any HTML element

35
00:02:37.550 --> 00:02:40.370
you want to listen to, whatever you want to listen.

36
00:02:40.370 --> 00:02:43.890
You can also register events on the overall window,

37
00:02:44.000 --> 00:02:47.060
for example you can listen to scroll events there.

38
00:02:47.280 --> 00:02:53.990
Now to demonstrate this, let's go to events.html and now below this div here,

39
00:02:53.990 --> 00:03:02.120
I'll add a section, give it an ID of long one or whatever you want to call it and in events.css, 

40
00:03:02.120 --> 00:03:13.210
 I'll just add a selector, long one, an ID selector and give this a height of 3000 pixels

41
00:03:14.370 --> 00:03:17.430
so that this simply is a big invisible section.

42
00:03:17.430 --> 00:03:20.150
If we now reload, we can scroll this page, right,

43
00:03:20.160 --> 00:03:24.840
nothing happens there, nothing is down there but we can scroll because we have that large section down

44
00:03:24.840 --> 00:03:25.530
there.

45
00:03:25.710 --> 00:03:31.440
So now that the page is scrollable, let me show you how you can listen to scroll events. For that in

46
00:03:31.440 --> 00:03:31.840
events.js,

47
00:03:31.830 --> 00:03:37.920
here at the bottom maybe, we can go to our window and there we can also add an event listener

48
00:03:37.980 --> 00:03:43.290
and here we also have the scroll event to which we can listen. Now there,

49
00:03:43.310 --> 00:03:48.290
we can also of course output the event object which we're getting and therefore let's have a look at

50
00:03:48.290 --> 00:03:49.400
what we get there,

51
00:03:49.400 --> 00:03:54.890
what's inside this event object. If I reload now and I scroll, you see

52
00:03:54.980 --> 00:03:58.190
well obviously a lot of events are fired,

53
00:03:58.220 --> 00:04:05.300
basically for every scrolling action we do. Again, there of course is some delay or some interval at which

54
00:04:05.300 --> 00:04:11.720
the browser checks for this scroll event but as you see, it fires a lot and therefore this by the

55
00:04:11.720 --> 00:04:17.060
way is also an event you should be careful with and you shouldn't listen to it too often or do

56
00:04:17.060 --> 00:04:20.450
very complex things when it occurs because indeed,

57
00:04:20.450 --> 00:04:26.210
well as you see, it fires a lot and if you do some heavy calculation whenever this event occurs, you might

58
00:04:26.210 --> 00:04:27.880
slow down your page.

59
00:04:27.950 --> 00:04:29.810
Now what's inside of that event though?

60
00:04:29.810 --> 00:04:34.390
Well we see, it's a rather short event object, has a couple of properties here,

61
00:04:34.580 --> 00:04:37.300
it does have a target which is the entire document,

62
00:04:37.370 --> 00:04:44.420
so maybe not too useful and therefore this is an event object where we might not get too much out of it.

63
00:04:44.420 --> 00:04:47.360
Still we can do very nice things with it,

64
00:04:47.360 --> 00:04:53.900
for example we could calculate how far the user is away from the bottom so that we can add more content

65
00:04:53.900 --> 00:04:59.480
to the bottom if the user is close to the bottom, this provide such an infinite scroll feeling which you

66
00:04:59.480 --> 00:05:01.930
might know from other websites.

67
00:05:01.970 --> 00:05:08.000
Now after this lecture, you'll find a text lecture with a short example snippet for such a dummy infinite

68
00:05:08.000 --> 00:05:14.260
scroll implementation you could use, it's just one idea of what you could do with the scroll event,

69
00:05:14.360 --> 00:05:20.420
just want to put it out there that it exists and that you should also be careful with it, especially

70
00:05:20.420 --> 00:05:25.800
regarding the heaviness of calculation you perform based on it.

71
00:05:25.820 --> 00:05:32.060
Now that we have a rough understanding of what events are and that we can listen to a broad variety of

72
00:05:32.060 --> 00:05:38.450
events on different elements, now you might be wondering how do you know which events exist on which

73
00:05:38.450 --> 00:05:42.840
element, for example we have the scroll event here which we can listen to on a window,

74
00:05:42.950 --> 00:05:45.990
can we also listen to that on a button though?

75
00:05:46.010 --> 00:05:50.350
Well if I enter quotes here, single quotes, I can type scroll here,

76
00:05:50.450 --> 00:05:56.020
so my IDE suggests that we can listen to that on a button as well

77
00:05:56.090 --> 00:06:02.540
and indeed we can listen to scroll events on pretty much all DOM nodes because we can always put content

78
00:06:02.570 --> 00:06:07.640
into other HTML elements and then this content might be scrollable and yes, even though it might

79
00:06:07.640 --> 00:06:08.750
not make much sense,

80
00:06:09.080 --> 00:06:15.170
we can also configure and style a button such that it holds scrollable content. So we can listen

81
00:06:15.170 --> 00:06:18.800
to scroll events on basically all DOM elements

82
00:06:18.800 --> 00:06:26.970
and that's pretty much true for pretty much all events, almost all DOM elements support all events

83
00:06:26.970 --> 00:06:33.060
but as always MDN is the place to go if you want to be really sure. You can for example search

84
00:06:33.060 --> 00:06:39.420
for MDN button to find the page for the button element and learn more about it and there, if you

85
00:06:39.420 --> 00:06:42.360
scroll down, you find the DOM interface that belongs to it,

86
00:06:42.390 --> 00:06:47.170
the HTML button element and there, you find it specific properties.

87
00:06:47.340 --> 00:06:52.580
What you don't find on this page here is any section about its specific events,

88
00:06:52.620 --> 00:06:54.780
so we seem to be on the wrong page,

89
00:06:54.780 --> 00:07:00.480
so the next step is to go to the next element or the next constructor function, next prototype if you

90
00:07:00.480 --> 00:07:06.230
want to call like this that is implemented by the button element which is the HTML element

91
00:07:06.600 --> 00:07:13.290
and there we now also find these on event listeners here and this gives you an idea of which events

92
00:07:13.290 --> 00:07:19.720
you can listen to on any element which is based on HTML element and that's a lot as you can tell

93
00:07:19.830 --> 00:07:24.600
and this is how you can find out if a specific element supports a specific event.

94
00:07:24.600 --> 00:07:31.280
Now typically, you will rarely look this up because you a) always work with the same kind of events anyways

95
00:07:31.530 --> 00:07:38.040
and b) well whatever makes sense to you logically typically is also supported by the browser, for example

96
00:07:38.040 --> 00:07:43.680
that you can click on pretty much any DOM element makes a lot of sense because the user can click anywhere

97
00:07:43.680 --> 00:07:46.380
on the page, so you can also listen to that.

98
00:07:46.380 --> 00:07:52.920
So typically, just thinking about this logically already allows you to find out which events are supported

99
00:07:52.920 --> 00:07:57.660
where, if you can scroll something, you can listen to a scroll event, if you can click something, you can

100
00:07:57.660 --> 00:07:58.680
listen to a click event.
