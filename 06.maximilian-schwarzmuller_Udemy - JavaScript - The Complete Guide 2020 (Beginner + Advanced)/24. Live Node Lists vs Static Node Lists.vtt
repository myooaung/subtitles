WEBVTT
1
00:00:02.240 --> 00:00:06.900
So now that we have a feeling for how we can insert content into the DOM,

2
00:00:06.920 --> 00:00:09.000
let me come back to that live node list

3
00:00:09.020 --> 00:00:11.940
versus non-live node list thing.

4
00:00:12.140 --> 00:00:14.230
So we have this list here,

5
00:00:14.240 --> 00:00:15.950
we worked with it many times,

6
00:00:15.950 --> 00:00:17.150
I reloaded this document so

7
00:00:17.150 --> 00:00:22.550
let me again select this like this as we did it many times in this module already

8
00:00:23.300 --> 00:00:26.720
and now here, I used query selector,

9
00:00:26.780 --> 00:00:32.060
this gives me access to this unordered list. Now I also want to get access to the list items in there and

10
00:00:32.060 --> 00:00:35.150
for that, we can use document query selector all

11
00:00:37.670 --> 00:00:42.170
li and this will select all list item elements on this entire page.

12
00:00:42.170 --> 00:00:45.130
So of course not just in this list but on the entire page,

13
00:00:45.290 --> 00:00:50.300
if we would want to restrict it to this list only, I would have to run this on the list instead of the

14
00:00:50.300 --> 00:00:53.900
entire document which of course also works for this example here.

15
00:00:53.900 --> 00:00:55.560
So now I got my list items here

16
00:00:55.670 --> 00:01:00.470
and if I output them, you see it's a node list with a couple of list item objects in there

17
00:01:00.470 --> 00:01:01.890
unsurprisingly.

18
00:01:02.030 --> 00:01:08.850
Now I will also fetch my list items in another way, list items 2 here by reaching out to list

19
00:01:09.030 --> 00:01:15.820
and then here I can use get elements by tag name for example and pass in this li tag name here.

20
00:01:15.840 --> 00:01:18.960
That's one of the older query methods which is built in

21
00:01:18.960 --> 00:01:23.020
and if I do this, list items 2 is a HTML collection actually

22
00:01:23.100 --> 00:01:26.150
as you can see. So it's still an array-like object

23
00:01:26.160 --> 00:01:31.530
as I mentioned, supports a couple of the important array methods but as you will learn later in the course

24
00:01:31.560 --> 00:01:38.400
in the array module, not everything you can do on arrays but most of the things and it looks quite similar.

25
00:01:38.400 --> 00:01:42.420
Well let's now add a new element, so I'll add a new li here with

26
00:01:42.420 --> 00:01:50.460
document create element, like this and create a list item element and so that we can see it really good,

27
00:01:50.460 --> 00:01:53.960
I'll also add a text content of item 4 again.

28
00:01:54.030 --> 00:01:58.100
Now it's up to you how you want to insert this, you learned about different ways of doing that,

29
00:01:58.200 --> 00:02:02.930
here I'll just reach out to the list and use append and append my new li,

30
00:02:02.930 --> 00:02:09.120
you could use append child or target a specific place with after and before or insert adjacent element

31
00:02:09.120 --> 00:02:17.080
and so on. Here I'll just insert it like this and once we did this, we of course see it here on the screen,

32
00:02:17.080 --> 00:02:25.210
now to the interesting part. We got our two list items constants, list items and list items 2 and on

33
00:02:25.210 --> 00:02:26.770
list items, you can already see

34
00:02:26.770 --> 00:02:30.140
this still is a node list with three items.

35
00:02:30.250 --> 00:02:33.640
So our most recent addition is not reflected here,

36
00:02:33.640 --> 00:02:38.530
that's what I mean with non-live array or non-live list.

37
00:02:38.530 --> 00:02:42.850
This is taking a snapshot of the DOM, of what we select there

38
00:02:42.910 --> 00:02:48.580
when I run query selector all and does not update that array when that part which we queried in the

39
00:02:48.580 --> 00:02:50.670
past changes.

40
00:02:50.860 --> 00:02:56.990
Now, that's not necessarily a disadvantage from a performance perspective, from a memory consumption perspective,

41
00:02:57.010 --> 00:02:58.560
this might even be better

42
00:02:58.660 --> 00:03:04.870
and I also want to highlight that of course the individual objects in there are still reference values,

43
00:03:05.080 --> 00:03:11.560
so an object in there is still of course a live reference to the DOM objects that are responsible for

44
00:03:11.560 --> 00:03:12.760
what we see on the page.

45
00:03:13.150 --> 00:03:20.650
So if I go to let's say the first item there and I change the text content to item 11 here for example,

46
00:03:20.740 --> 00:03:27.880
that gets reflected on the screen because the items are reference values, these are pointers at the objects,

47
00:03:27.880 --> 00:03:29.650
at the DOM objects in memory,

48
00:03:29.830 --> 00:03:36.630
just the overall array is just a snapshot of list items when I ran that query selector

49
00:03:36.640 --> 00:03:37.950
all command.

50
00:03:38.020 --> 00:03:43.900
Now if we have a look at list items 2 however which is this HTML collection I got with get elements

51
00:03:43.900 --> 00:03:50.780
by tag name, we can see this indeed is a live list which also includes our most recent addition.

52
00:03:50.890 --> 00:03:58.390
So all these get elements by something, not get element by ID because that only gets a single element

53
00:03:58.420 --> 00:04:03.300
which always is a live connection so to say but get elements by something,

54
00:04:03.340 --> 00:04:10.780
this always gives you array-like objects with live lists which will change when the items you queried

55
00:04:10.780 --> 00:04:12.090
in the past change,

56
00:04:12.100 --> 00:04:17.590
so when the number of these items changes I should say. That can or cannot be an advantage,

57
00:04:17.590 --> 00:04:23.230
often it will not matter to be honest. It could lead to a higher memory consumption if you're managing

58
00:04:23.230 --> 00:04:25.930
a lot of such collections which change all the time

59
00:04:25.930 --> 00:04:32.760
but again, that will also probably only matter in rare niche cases but for the most part, query selector

60
00:04:32.800 --> 00:04:39.940
all simply should be used because it is more flexible, supports richer queries and therefore often

61
00:04:39.940 --> 00:04:43.290
is a common choice if you want to query for multiple items.

62
00:04:43.300 --> 00:04:48.040
I just wanted to highlight this difference again which sometimes can be an advantage, sometimes can be

63
00:04:48.040 --> 00:04:53.050
a disadvantage, well and often to be honest, it will probably not matter that much.
