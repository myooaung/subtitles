WEBVTT
1
00:00:02.190 --> 00:00:04.700
So let's learn a bit more about regular expressions.

2
00:00:04.710 --> 00:00:07.500
For that I just reloaded this page here and now again

3
00:00:07.500 --> 00:00:11.310
let's create a new regular expression and store it in a regex constant.

4
00:00:11.340 --> 00:00:18.090
Again you can create it with new regexp and pass the expression pattern as a string to the constructor

5
00:00:18.450 --> 00:00:22.040
or use this literal notation with two forward backslash.

6
00:00:22.230 --> 00:00:28.440
Now a regular expression as learned describes a pattern which you try to find in some text in a string.

7
00:00:28.800 --> 00:00:31.530
A simple pattern could be hello,

8
00:00:31.530 --> 00:00:33.040
so just a couple of characters,

9
00:00:33.090 --> 00:00:34.770
normal characters.

10
00:00:34.770 --> 00:00:37.920
This regular expression would yield true

11
00:00:37.920 --> 00:00:41.860
if we test any string which includes hello,

12
00:00:41.880 --> 00:00:50.580
so if we test just hello, we get true, we also get true if we say hi there, hello or if we have

13
00:00:50.580 --> 00:00:52.410
hello anywhere in there.

14
00:00:52.440 --> 00:00:58.950
So if hello is part of the string, this yields true because we're just checking if this combination

15
00:00:58.950 --> 00:01:02.840
of characters is part of the string we're validating.

16
00:01:03.090 --> 00:01:05.560
Now we don't return true

17
00:01:05.790 --> 00:01:13.080
if I try to validate hello with a capital H because regular expressions are case sensitive.

18
00:01:13.290 --> 00:01:20.370
So this here does not yield true because we're checking for hello like this, not for a lowercase or

19
00:01:20.560 --> 00:01:22.150
uppercase H,

20
00:01:22.230 --> 00:01:23.730
however you could do that,

21
00:01:23.880 --> 00:01:31.300
you could also create this pattern in a more flexible way. You could say I'm looking for hello

22
00:01:31.330 --> 00:01:39.010
but I don't care where we start with an uppercase or a lowercase h. You would express this by wrapping

23
00:01:39.010 --> 00:01:45.340
this into parentheses, then adding a pipe symbol and then an uppercase H and this means we want

24
00:01:45.340 --> 00:01:53.350
to have a word which ends with ello and starts with either a lowercase or an uppercase H

25
00:01:53.350 --> 00:01:58.300
and of course we should store it in a new constant here to not reuse that name and now if I use regex2,

26
00:01:58.300 --> 00:02:00.930
I can test hello

27
00:02:01.090 --> 00:02:06.520
and you see we get true, also if it's somewhere in that string

28
00:02:06.520 --> 00:02:15.220
but I also get true if Hello starts with an uppercase h. We by the way don't get true if we just have

29
00:02:15.300 --> 00:02:15.970
ello,

30
00:02:16.090 --> 00:02:20.120
so the H really is needed, we just don't care about its casing.

31
00:02:20.200 --> 00:02:26.060
So this would be one example of how we can alter this to be a bit more complex than just a straightforward

32
00:02:26.140 --> 00:02:35.110
word. There also are other modifiers, you can also work with wild cards, so after reloading this page here

33
00:02:35.110 --> 00:02:42.040
again, I'll create a new regular expression and let's say I want to check for ello but I don't care about

34
00:02:42.040 --> 00:02:45.850
the first character. For that you can use a dot here and this signals

35
00:02:45.850 --> 00:02:50.920
well you want to end with ello but you don't really care about the starting character of the word,

36
00:02:50.940 --> 00:02:56.520
so it has to be a five character word but the starting character is not relevant to you.

37
00:02:56.530 --> 00:03:00.870
So then if I test hello here, I get true,

38
00:03:01.030 --> 00:03:07.390
if I on the other hand test just ello, I get false. On the other hand, I can use jello like this and I would

39
00:03:07.390 --> 00:03:10.180
also get true or something like this,

40
00:03:10.210 --> 00:03:15.210
this also would yield true but I have to have a starting character and this is then a wild card.

41
00:03:15.460 --> 00:03:21.340
By the way you can also escape in regular expressions, you might remember our email regular expression,

42
00:03:22.910 --> 00:03:24.220
email regex.

43
00:03:24.480 --> 00:03:25.040
There

44
00:03:25.130 --> 00:03:32.450
I used s+@s+ and then I used backslash dot in here,

45
00:03:32.510 --> 00:03:38.720
this is how we say I'm not looking for any character but really for the dot character, since the dot

46
00:03:38.720 --> 00:03:44.120
in a regular expression has a special meaning, it's that wild card you just learned about, you escape it

47
00:03:44.390 --> 00:03:50.540
with a backward slash, just as you can escape some characters in a normal string. Same by the way here

48
00:03:50.540 --> 00:03:58.280
with s+, I escape this s here so that I don't mean the regular uppercase s character but this now

49
00:03:58.280 --> 00:04:04.020
basically has a special meaning, in regular expressions, it means any word so to say. Now

50
00:04:04.040 --> 00:04:05.720
there is way more you can do there

51
00:04:05.750 --> 00:04:10.310
and as I mentioned in the last lecture, attached you find some links that allow you to dive deeper if

52
00:04:10.310 --> 00:04:11.580
you want to.

53
00:04:11.600 --> 00:04:14.680
I however also want to be very honest with you,

54
00:04:14.960 --> 00:04:21.770
learning regular expressions and writing very complex expressions on your own will take some time to

55
00:04:21.770 --> 00:04:25.060
master and you might not need it that often,

56
00:04:25.070 --> 00:04:31.940
therefore a lot of people, myself included if I'm honest, often look up certain patterns, especially if

57
00:04:31.940 --> 00:04:35.750
I'm not sure if the pattern I came up with is the best one.

58
00:04:35.750 --> 00:04:42.050
So for example if you want to validate some email address in Javascript, you can Google for email js

59
00:04:42.050 --> 00:04:42.800
regex,

60
00:04:42.860 --> 00:04:49.280
something like this or Javascript regex email, anything like that and you'll find some discussions on

61
00:04:49.280 --> 00:04:53.040
Stack Overflow typically where you find some ideas.

62
00:04:53.270 --> 00:04:59.060
So here for example, you find very complex patterns that match a lot of different email addresses or

63
00:04:59.060 --> 00:05:01.080
you find the more simple pattern

64
00:05:01.100 --> 00:05:08.120
I showed you, basically a combination of this one here and this one here and this is of course not just

65
00:05:08.120 --> 00:05:09.320
possible for emails,

66
00:05:09.350 --> 00:05:14.630
if you want to validate a URL, so if you want to find out if a string holds a URL, you can google

67
00:05:14.630 --> 00:05:20.180
for a URL js regex and you would find this discussion with some ideas on how you can validate

68
00:05:20.180 --> 00:05:21.340
a URL.

69
00:05:21.440 --> 00:05:27.610
There you see a lot of different rules and syntax features of regular expressions in action

70
00:05:27.650 --> 00:05:31.330
and again with the attached resources, you can learn more about that

71
00:05:31.460 --> 00:05:36.620
but if you just need to find a certain regular expression to validate a certain pattern,

72
00:05:36.620 --> 00:05:39.970
this is how you can find it and how you can work with it.

73
00:05:39.980 --> 00:05:47.300
It's also worth noting that you can not just call test there, you also have an exec method on a regular

74
00:05:47.300 --> 00:05:48.560
expression.

75
00:05:48.560 --> 00:05:54.170
If you pass a string to that and keep in mind stored in regex is this regular expression,

76
00:05:54.170 --> 00:05:59.870
so if you pass a string to this, let's say jello which matches my regular expression, then you get back

77
00:05:59.870 --> 00:06:06.020
an array with some information about the pattern and where it matched in the string. You get the matching

78
00:06:06.020 --> 00:06:12.380
string back but you also see where this pattern started in the string and here since the entire string

79
00:06:12.380 --> 00:06:14.970
matches my pattern, we start at index zero.

80
00:06:15.020 --> 00:06:20.400
If I would try to match this on let's say hi jello,

81
00:06:20.480 --> 00:06:26.270
then you would see we got index four because the pattern we found in there which was jello that matched

82
00:06:26.300 --> 00:06:35.840
our regular expression pattern, that started at index 4, index 0, index 1, index 2, index 3 and then index

83
00:06:35.840 --> 00:06:36.500
4,

84
00:06:36.520 --> 00:06:42.200
so the fifth character was the first character of the matching pattern. So you also got exec if you

85
00:06:42.200 --> 00:06:46.040
need to find where in a string your pattern is matched.

86
00:06:46.160 --> 00:06:47.710
You also can do it the other way around,

87
00:06:47.750 --> 00:06:55.460
if you have hi jello here, then you can also call match on this and pass a regular expression to that

88
00:06:55.760 --> 00:07:02.120
and you get basically the same output, as you see matching pattern and where it started but you call this

89
00:07:02.120 --> 00:07:05.390
on a string instead of on the regular expression,

90
00:07:05.390 --> 00:07:07.920
it's of course up to you which one you prefer.

91
00:07:08.210 --> 00:07:10.640
And that's it for now about regular expressions,

92
00:07:10.640 --> 00:07:14.060
definitely an interesting and sometimes important topic.

93
00:07:14.150 --> 00:07:19.220
You've got the basics here, searching for patterns is a good idea and something you will do in practice

94
00:07:19.220 --> 00:07:19.670
a lot

95
00:07:19.810 --> 00:07:23.000
and if you want to learn more, check out the attached resources of course.
