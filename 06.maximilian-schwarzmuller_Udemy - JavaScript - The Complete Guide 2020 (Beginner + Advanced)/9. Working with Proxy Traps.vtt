WEBVTT
1
00:00:02.220 --> 00:00:08.240
The get trap is a very useful trap but you also get other traps for other operations people might perform

2
00:00:08.330 --> 00:00:14.720
on objects and again, attached to the last lecture, you find a link to MDN where you find all available

3
00:00:14.720 --> 00:00:15.980
traps.

4
00:00:15.980 --> 00:00:22.370
Now one other trap that can often be useful is the set trap, the set trap allows to step in when users

5
00:00:22.400 --> 00:00:25.570
try to set a value for a given property.

6
00:00:25.580 --> 00:00:31.880
So here again we could register a method or we would have to write this as a method and we get the object

7
00:00:31.880 --> 00:00:33.950
for which this was tried,

8
00:00:34.010 --> 00:00:41.720
so the wrapped object in the end, the property name users try to set and the new value users try to assign

9
00:00:41.720 --> 00:00:48.380
to that property and then you could use this to validate all incoming values, to lock down access entirely

10
00:00:48.380 --> 00:00:52.170
by not doing anything in here or just simply forward that

11
00:00:52.280 --> 00:00:56.980
and you do indeed set the property name on the object to add a new value,

12
00:00:56.990 --> 00:01:01.340
this would be a set trap which basically does the same thing you would do by default.

13
00:01:01.340 --> 00:01:09.490
Now if I try to set a rating here for example to 5, this would just work, if I save and I reload,

14
00:01:09.530 --> 00:01:15.260
you see I print 5 here for my rating because I just forward the set request. On the other hand I could

15
00:01:15.260 --> 00:01:20.420
check that for example if people try to set the rating,

16
00:01:20.420 --> 00:01:27.320
so if the property that the user tries to set here is rating, I just return and I don't do anything and

17
00:01:27.320 --> 00:01:31.350
I only proceed and do set the value for other property names.

18
00:01:31.370 --> 00:01:36.470
So now for example when I tried to set rating to 5 here, you will see that when I print it down there,

19
00:01:38.400 --> 00:01:44.970
it is actually not found because it was not set because in my set trap, I actually block access and I

20
00:01:44.970 --> 00:01:47.730
return so that this line does not execute

21
00:01:47.730 --> 00:01:54.180
if the property name which users try to set was rating. So you can use this to block access, to do any

22
00:01:54.180 --> 00:01:55.170
other logic,

23
00:01:55.170 --> 00:02:04.260
you could also send data to your own analytics server, sending data to register any settings to any properties

24
00:02:04.260 --> 00:02:05.160
in your object,

25
00:02:05.190 --> 00:02:09.900
you're totally free to execute whatever you want in these traps.

26
00:02:09.950 --> 00:02:14.000
Now also be aware of the difference to getters and setters,

27
00:02:14.070 --> 00:02:18.010
you learned about getters and setters earlier. Getters and setters

28
00:02:18.060 --> 00:02:21.570
were always focused on one specific property,

29
00:02:21.570 --> 00:02:25.910
you added a getter with a certain name and a setter with a certain name.

30
00:02:25.920 --> 00:02:28.290
These traps however are flexible,

31
00:02:28.290 --> 00:02:30.790
they're not bound to a specific property name,

32
00:02:30.870 --> 00:02:38.280
they kick in whenever you set a value to any property or whenever you try to get the value of any property.

33
00:02:38.400 --> 00:02:45.600
So they're way more generic and flexible and you as a programmer therefore have full control over how

34
00:02:45.600 --> 00:02:48.990
you want to allow access to properties of the object

35
00:02:49.050 --> 00:02:54.810
you might be exposing to your colleagues, to yourself or to consumers of your library.
