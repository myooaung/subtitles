1
00:00:02,430 --> 00:00:04,710
Now that you learned about ternary expressions,

2
00:00:04,710 --> 00:00:11,670
I also want to show you some other specialties you would have in Javascript when it comes to expressions

3
00:00:11,760 --> 00:00:15,080
and to conditional code and logical operators

4
00:00:15,180 --> 00:00:21,390
and I can best show you this in the console because in our little project here, we have no real use case

5
00:00:21,600 --> 00:00:23,770
for the things I'm about to show you,

6
00:00:23,850 --> 00:00:30,330
I want to show you some nice tricks or shortcuts with logical operators.

7
00:00:30,330 --> 00:00:39,600
One important trick is how you can convert or coerce a truthy or falsy value to a real boolean,

8
00:00:39,600 --> 00:00:44,370
you do this with the double exclamation mark, also called double bang operator.

9
00:00:44,370 --> 00:00:46,050
Now we learned about the exclamation mark

10
00:00:46,050 --> 00:00:50,670
operator which is there to negate some condition or a value

11
00:00:50,910 --> 00:00:57,510
and by using two exclamation marks, you basically negate the negation which kind of reverses the negation

12
00:00:58,070 --> 00:00:59,760
but there is one important thing,

13
00:00:59,850 --> 00:01:01,290
the exclamation mark,

14
00:01:01,290 --> 00:01:08,160
so the single exclamation mark already converts a truthy value into a real false value

15
00:01:08,340 --> 00:01:14,640
and if you then convert that false value back with another exclamation mark, you could get a real true

16
00:01:14,700 --> 00:01:15,170
value,

17
00:01:15,180 --> 00:01:17,010
so a real boolean.

18
00:01:17,010 --> 00:01:22,950
So for example if you use double exclamation marks in front of an empty string, you will get a real false

19
00:01:22,980 --> 00:01:30,060
boolean instead of that falsy interpretation which Javascript normally uses. If you use double exclamation

20
00:01:30,060 --> 00:01:31,490
marks in front of a one,

21
00:01:31,560 --> 00:01:33,410
you get a real true value.

22
00:01:33,450 --> 00:01:38,850
Now often that might not matter to you but whenever you have code where you want to work with real

23
00:01:38,850 --> 00:01:42,440
booleans instead of let Javascript do this truthy

24
00:01:42,480 --> 00:01:51,440
falsy comparison or coercion, then you can use the double exclamation mark to get such a value.

25
00:01:51,630 --> 00:01:58,460
So it's basically a type conversion trick which can convert an empty string to false or any number

26
00:01:58,490 --> 00:01:59,310
to true,

27
00:01:59,310 --> 00:02:04,650
things like that and sometimes in code, in more advanced programs, typically you might need that

28
00:02:04,740 --> 00:02:11,710
and then this is a convenient and handy approach. Another nice trick if you want to call it is

29
00:02:11,710 --> 00:02:18,760
related to how Javascript works with the or operator, you can use it to assign a default value to a

30
00:02:18,760 --> 00:02:23,440
constant or variable. So you learned about that or operator of course

31
00:02:23,620 --> 00:02:28,840
and as I just said, you can use it to assign a default value with this syntax here.

32
00:02:28,840 --> 00:02:30,280
Now what does this do?

33
00:02:30,370 --> 00:02:32,260
This will check some input

34
00:02:32,290 --> 00:02:38,650
and now imagine that some input is another variable or constant that holds some user input and that might

35
00:02:38,650 --> 00:02:39,620
be empty.

36
00:02:39,640 --> 00:02:42,860
Now remember that empty is a falsy value,

37
00:02:42,870 --> 00:02:50,500
an empty string is a falsy value, is treated as false and the way Javascript works with the or operator

38
00:02:50,650 --> 00:02:55,280
is such it has a look at the thing in front of the or operator,

39
00:02:55,300 --> 00:03:03,520
so at some input and if that is false, it will also have a look at the value after the or operator because

40
00:03:03,520 --> 00:03:09,010
it will return true overall if at least one of the two things in front or after it is true

41
00:03:09,160 --> 00:03:15,460
and of course the thing after the or operator here would be true, right? Max is a string which is truthy,

42
00:03:15,490 --> 00:03:17,480
it's not an empty string therefore it's truthy.

43
00:03:18,040 --> 00:03:23,620
So this will basically yield true overall but now that's the important thing,

44
00:03:23,710 --> 00:03:30,430
unlike our logical operators like the triple equals sign or the greater or smaller operator, the or

45
00:03:30,490 --> 00:03:38,020
and the and operator don't generate a boolean. You can use them to combine conditions and then they will return

46
00:03:38,500 --> 00:03:46,870
true or false but not because they create true or false but because they return the results generated

47
00:03:46,990 --> 00:03:49,690
by the conditions they are combining.

48
00:03:49,690 --> 00:03:55,540
Now if you are working with two strings like you're doing it here with some input and Max and I'm assuming

49
00:03:55,540 --> 00:03:57,920
that some input also holds a string,

50
00:03:58,030 --> 00:04:07,330
what happens here actually is that or will return the first truthy value without converting it to a real

51
00:04:07,330 --> 00:04:08,160
boolean,

52
00:04:08,230 --> 00:04:12,330
so it will keep the original value and return that.

53
00:04:12,460 --> 00:04:18,940
And in our other comparisons like this here for example, that generates a real boolean, that generates

54
00:04:18,940 --> 00:04:25,200
a real boolean, that's why or returns a real boolean because the things to the left and right of it generate

55
00:04:25,270 --> 00:04:28,790
real booleans, not because or generated a real boolean,

56
00:04:28,870 --> 00:04:36,070
this only just returns the first truthy or true value it's looking at and it starts from left to

57
00:04:36,070 --> 00:04:36,610
right,

58
00:04:36,610 --> 00:04:43,630
so if this returns true, it will return this true value and not even look at the second one. If this returns

59
00:04:43,630 --> 00:04:49,090
false or is a falsy value, it will look at the second condition and if that then returns true or

60
00:04:49,090 --> 00:04:55,810
is a truthy value, it will return that value, either a boolean as it would be the case here because this

61
00:04:55,840 --> 00:05:04,060
operator generates a boolean or as in the case of this slide here, Max, if some input is falsy because

62
00:05:04,060 --> 00:05:10,450
Max will be truthy and it will therefore return Max. The and operator allows us to do something similar,

63
00:05:10,900 --> 00:05:22,120
instead of using it to assign a default value, we can use the and operator to get the last value in a combined

64
00:05:22,240 --> 00:05:23,440
check like here.

65
00:05:23,560 --> 00:05:30,100
Let's assume that isLoggedIn here is a truthy value or a real true boolean, doesn't matter but that

66
00:05:30,100 --> 00:05:37,960
it is true, in that case, and will return the last value it's looking at because and, unlike or, always

67
00:05:37,960 --> 00:05:39,190
looks at all,

68
00:05:39,190 --> 00:05:44,040
so at both values in front of it and after it because or need to be true or truthy

69
00:05:44,470 --> 00:05:51,520
and if both are true or truthy, it will return the last value. If the first value is true, it always

70
00:05:51,520 --> 00:05:57,850
returns the second value or the value ofter the and operator I should say. If the first value is false,

71
00:05:57,850 --> 00:06:00,140
it will always return the first value.

72
00:06:00,160 --> 00:06:07,030
So here, we would return Max if isLoggedIn is true and now or false or whichever value is stored in 

73
00:06:07,030 --> 00:06:13,220
isLoggedIn otherwise. Now as I said, let's have a look at that in the console, let's start with the double

74
00:06:13,520 --> 00:06:14,390
exclamation mark

75
00:06:14,390 --> 00:06:19,260
operator. Let's say we have some user input here and that's an empty string,

76
00:06:19,260 --> 00:06:25,230
we got that from some input field but the user pressed the OK button without entering anything, that's

77
00:06:25,230 --> 00:06:30,510
a use case you can have in web applications, you will actually have that a lot, that users enter incorrect

78
00:06:30,510 --> 00:06:31,460
information.

79
00:06:31,550 --> 00:06:36,240
Now let's say we want to use that somewhere in our code and in the end, in multiple places of the code

80
00:06:36,270 --> 00:06:40,450
maybe, I just want to know, did the user enter something valid or not?

81
00:06:40,590 --> 00:06:48,040
So of course, we could always check for user input and this will be false because it's an empty string,

82
00:06:48,060 --> 00:06:54,030
so we could do something in the else block here but maybe we want to use that is valid or not information in

83
00:06:54,030 --> 00:07:00,180
multiple places, so I create a new variable, isValidInput and that should be true or false based on

84
00:07:00,180 --> 00:07:07,800
user input. Then of course we could write user input and use this as a condition in a ternary expression

85
00:07:07,830 --> 00:07:13,260
and after the question mark, we could therefore say true because if user input is truthy,

86
00:07:13,290 --> 00:07:15,720
then we want to store true in isValidInput,

87
00:07:15,720 --> 00:07:17,790
otherwise we want to store false.

88
00:07:17,790 --> 00:07:23,940
We could do that but the shorter way is to just use the double bang operator here and say this

89
00:07:24,210 --> 00:07:28,020
because as you learned, this translates it to a real boolean.

90
00:07:28,020 --> 00:07:34,290
So in this case, since it's an empty string and therefore falsy, this converts it to a real false value,

91
00:07:34,290 --> 00:07:40,170
to a real false boolean as you see here. A single exclamation mark would also convert it to a boolean,

92
00:07:40,200 --> 00:07:45,870
but of course to the opposite boolean because a single exclamation mark negates the value,

93
00:07:45,900 --> 00:07:49,850
so if it's falsy, it's turned to true, if it's truthy, it's turned to false.

94
00:07:50,190 --> 00:07:53,570
So if we want to keep the original meaning,

95
00:07:53,610 --> 00:07:58,360
so a truthy value should become true and a falsy value should become false,

96
00:07:58,380 --> 00:08:04,650
we need two exclamation marks to not negate it but to instead just use this as a shortcut to convert

97
00:08:04,710 --> 00:08:05,310
the type.

98
00:08:08,320 --> 00:08:11,030
Let's now have a look at default values.

99
00:08:11,050 --> 00:08:16,390
Let's say we want to create a user name here and that's based on some user input, which of course is

100
00:08:16,390 --> 00:08:17,130
an empty string,

101
00:08:17,140 --> 00:08:22,480
we just set this up before and if you clear here, the old values are kept, you just don't see them

102
00:08:22,480 --> 00:08:23,290
here anymore

103
00:08:23,380 --> 00:08:27,310
but user input still is set as you see if you want to put it like this.

104
00:08:27,310 --> 00:08:30,730
So now we want to create a user name here based on user input

105
00:08:30,730 --> 00:08:34,180
and now we either want to use the user input but if that is falsy,

106
00:08:34,180 --> 00:08:35,400
so if it's empty,

107
00:08:35,530 --> 00:08:40,930
I want to use a default value of Max and we can do that with the double pipe symbols, so with the or operator

108
00:08:40,930 --> 00:08:47,720
here because now as you will see, we'll have Max stored in there because user input is falsy.

109
00:08:47,800 --> 00:08:50,870
Of course this would also work if it was a real boolean that's false

110
00:08:50,980 --> 00:08:53,860
and therefore this is used. If it would be truthy,

111
00:08:54,280 --> 00:09:08,670
so if we have let's say the real user input and that is Manu and then we set real user name

112
00:09:09,010 --> 00:09:21,860
equal to real user input or Max, then real user name will actually have Manu stored in it because that

113
00:09:21,860 --> 00:09:28,100
is a truthy value and therefore in this check, or returns that first true or truthy value which is

114
00:09:28,100 --> 00:09:31,890
the real user input and does not use this as a default value.

115
00:09:31,940 --> 00:09:36,680
So this is how you can use the or operator to assign default values to variables.

116
00:09:36,680 --> 00:09:39,510
Now of course you can also have more than one or operator here,

117
00:09:39,590 --> 00:09:47,270
if you had multiple variables that might or might not hold a true value, you can have value 1 or value

118
00:09:47,270 --> 00:09:55,060
2 and then at some point some hardcoded default value which you defined probably.

119
00:09:55,160 --> 00:09:58,370
Now let's have a look at the double and operator. For that,

120
00:09:58,380 --> 00:10:07,520
let's say we have an isLoggedIn variable which is true and based on that, we want to store some other

121
00:10:07,520 --> 00:10:08,930
value.

122
00:10:08,930 --> 00:10:14,900
Let's say we have the shopping cart and that's some data which we loaded from a server and if isLoggedIn,

123
00:10:14,900 --> 00:10:22,610
then we want to initialize this to be an array which already has some books in it, something

124
00:10:22,610 --> 00:10:29,770
like that. If we run this, you see now a shopping cart indeed is that array with the books in it because

125
00:10:29,840 --> 00:10:31,090
isLoggedIn is true

126
00:10:31,090 --> 00:10:37,560
and as I said if that's the case, then the double ampersand, so the and operator will have a look at this,

127
00:10:37,600 --> 00:10:42,640
then have a look at the second value and if both are true, it will return the second one and an array

128
00:10:42,640 --> 00:10:49,160
no matter if it's empty or not always is treated as a true value which is why it returns that. On the other

129
00:10:49,160 --> 00:10:59,870
hand, if we set isLoggedIn to false, you will see that now if you set isLoggedIn and books and of

130
00:10:59,870 --> 00:11:03,920
course we could store this in a variable or just output like this to see what would be stored in a

131
00:11:03,920 --> 00:11:04,570
variable,

132
00:11:04,670 --> 00:11:10,370
you'll see that this now returns this false value that stored in isLoggedIn or if you had something

133
00:11:10,370 --> 00:11:15,650
here which is null, it would return null, so it basically returns the first value here.

134
00:11:15,650 --> 00:11:24,900
So here for example, it would return null if we have that. So it returns the first value if that is false,

135
00:11:24,900 --> 00:11:27,090
the second value if both are true,

136
00:11:27,090 --> 00:11:29,810
now what if the first is true and the second is false?

137
00:11:29,820 --> 00:11:31,460
Let's have a look at that as well.

138
00:11:31,470 --> 00:11:33,810
So here I set isLoggedIn

139
00:11:33,840 --> 00:11:42,090
back to true let's say and then we check if isLoggedIn and then something which is false, an empty

140
00:11:42,090 --> 00:11:42,840
string maybe,

141
00:11:42,930 --> 00:11:44,660
then it also returns this.

142
00:11:44,730 --> 00:11:48,030
So if the first value is true, it always returns the second value,

143
00:11:48,030 --> 00:11:52,260
if the first value is false, it always returns the first value.

144
00:11:52,270 --> 00:11:57,520
Now these shortcuts, these tricks might be a bit confusing also because we have no real use case for

145
00:11:57,520 --> 00:11:59,150
them in this project,

146
00:11:59,230 --> 00:12:05,470
we will see them in some places throughout the course though and you will also see them in project you work

147
00:12:05,470 --> 00:12:05,800
on.

148
00:12:05,800 --> 00:12:08,420
Now be aware that these are always just shortcuts,

149
00:12:08,440 --> 00:12:15,440
what we do with them can always also be achieved with the help of full if statements or with ternary expressions

150
00:12:15,520 --> 00:12:18,460
but sometimes it's just shorter to use these shortcuts,

151
00:12:18,460 --> 00:12:19,660
that's the main idea.

152
00:12:19,990 --> 00:12:23,280
So if you forget to use them in a case where you could have used them,

153
00:12:23,290 --> 00:12:24,670
that's not bad, 

154
00:12:24,670 --> 00:12:29,800
you will not have an application that's way slower or worse or anything like that,

155
00:12:29,830 --> 00:12:35,350
these are just alternatives which can save you some code and you can always refactor your code to

156
00:12:35,350 --> 00:12:38,360
use them if you find a place where you can use them

157
00:12:38,500 --> 00:12:43,510
but it's absolutely normal that you also sometimes overlook scenarios where you could have used one

158
00:12:43,510 --> 00:12:44,580
of these shortcuts.

159
00:12:44,590 --> 00:12:49,870
I just want to make you aware of them right now so that if we do later use them in the course, you are

160
00:12:49,960 --> 00:12:52,960
aware of them and also that you recognize these patterns

161
00:12:52,960 --> 00:12:55,750
if you see them in other code or in other examples.
