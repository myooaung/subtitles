1
00:00:02,130 --> 00:00:05,320
With that let's move on to the reflect API,

2
00:00:05,320 --> 00:00:08,520
now what is the reflect API all about?

3
00:00:08,520 --> 00:00:12,540
It is totally not related to iterators and generators and symbols,

4
00:00:12,540 --> 00:00:20,250
it is related to objects though. It is an API that allows us to control objects, to do things with Javascript

5
00:00:20,370 --> 00:00:24,120
objects and in the end it's just an object itself,

6
00:00:24,120 --> 00:00:31,080
reflect is an object in Javascript which groups, with a bunch of static methods on this class

7
00:00:31,140 --> 00:00:36,760
so to say, which groups a lot of functionalities that help us work with objects.

8
00:00:36,780 --> 00:00:43,530
It has standardized and grouped together methods and the reflect API, just like all these features, can be

9
00:00:43,530 --> 00:00:49,680
used to control how our code is used, how our code behaves and so on.

10
00:00:49,680 --> 00:00:56,640
Now let's see an example and let's see what the reflect API offers us. For this here, in our dummy app.js

11
00:00:56,660 --> 00:00:59,610
file, I'll go down a bit further

12
00:00:59,760 --> 00:01:03,450
and here I want to start working with the reflect API.

13
00:01:04,200 --> 00:01:09,200
So let's say we have a new object here, to mix things up, I'll name

14
00:01:09,210 --> 00:01:12,240
this object not person and so on, I'll just name it

15
00:01:12,250 --> 00:01:22,360
course. Now a course might have a title, Javascript - The Complete Guide.

16
00:01:22,420 --> 00:01:28,830
Now it's a very simple object of course and we worked with objects so much, shouldn't need much explanation.

17
00:01:28,840 --> 00:01:35,230
Now we got this reflect API which we can access on this global reflect object by adding a dot thereafter

18
00:01:35,380 --> 00:01:38,350
because this has a bunch of static methods we can use,

19
00:01:38,560 --> 00:01:41,090
for example it has a define property method,

20
00:01:41,140 --> 00:01:43,120
it has a delete property method,

21
00:01:43,120 --> 00:01:48,730
it has a getPrototypeOf method and it has a setPrototypeOf method and

22
00:01:48,760 --> 00:01:55,570
for example we can use setPrototypeOf to set the prototype of our course object to an object where

23
00:01:55,570 --> 00:02:00,190
I have a to string method, my own to string method where I return this.title

24
00:02:00,190 --> 00:02:07,900
and the consequence of that would be that if I now console log course to string here, we no longer

25
00:02:07,900 --> 00:02:09,510
use the default to string method

26
00:02:09,520 --> 00:02:16,240
but my own one here and hence if I save that and reload, I print the course title in this case. So the

27
00:02:16,240 --> 00:02:20,610
reflect API helps us work with objects, with set prototype of

28
00:02:20,740 --> 00:02:28,100
we can set the prototype of an object, with define property we could add a new property and not just

29
00:02:28,100 --> 00:02:36,620
like this but also with such an object descriptor, this extra argument you might remember where we can

30
00:02:36,830 --> 00:02:38,600
set whether this is writable,

31
00:02:38,660 --> 00:02:43,090
so whether we can write to this property or if it's locked and so on,

32
00:02:43,100 --> 00:02:46,820
I covered this earlier in a lecture where I talk about object descriptors.

33
00:02:46,820 --> 00:02:53,480
So in the end, the takeaway is that the reflect API gives us a bunch of methods that help us change objects,

34
00:02:53,480 --> 00:03:00,350
work with objects on a meta level because what we do here is typically something we do to prepare our

35
00:03:00,350 --> 00:03:04,430
object to be consumed by some other part in our code.

36
00:03:04,430 --> 00:03:12,200
Again, consider that you are the author of a third-party library and you expose certain objects as part

37
00:03:12,200 --> 00:03:17,360
of this library and you want to make sure that certain properties can't be changed by the developers

38
00:03:17,420 --> 00:03:18,450
using your library,

39
00:03:18,470 --> 00:03:20,300
that could be one scenario.

40
00:03:20,330 --> 00:03:26,350
Well then you can use the reflect API to for example set a property and set it to be non-writable.

41
00:03:26,600 --> 00:03:33,110
The obvious question that just could arise at this point is why would we use reflect for this? If we

42
00:03:33,110 --> 00:03:36,810
used a global object, object with a capital O,

43
00:03:36,830 --> 00:03:39,710
we also have a setPrototypeOf method,

44
00:03:39,740 --> 00:03:47,660
we also have a define property method and it generally works the same way as the reflect API methods.

45
00:03:47,690 --> 00:03:49,910
So why do we have the reflect API

46
00:03:50,000 --> 00:03:58,790
if we can already do these things with the existing object API? The reflect API is newer,

47
00:03:58,790 --> 00:04:05,760
it was added recently with ES6 to Javascript, the object API is way older.

48
00:04:05,760 --> 00:04:09,380
Now that alone of course is no reason for using it,

49
00:04:09,500 --> 00:04:15,030
instead the reflect API has two advantages over the object API - 

50
00:04:15,230 --> 00:04:20,240
for one there are subtle differences regarding the behavior of some methods,

51
00:04:20,240 --> 00:04:28,130
for example if a method fails to do its job, on the object API it might return undefined or fail silently,

52
00:04:28,370 --> 00:04:29,160
on the reflect

53
00:04:29,180 --> 00:04:35,690
API you might get a better error or it just returns True or False for a given method to tell you if

54
00:04:35,690 --> 00:04:40,990
something works or not and attached you find a link with a comparison of the object API and the reflect

55
00:04:41,030 --> 00:04:44,660
API that allows you to understand these subtle differences.

56
00:04:45,290 --> 00:04:51,250
Additionally, the reflect API bundles all features that you need to work with objects,

57
00:04:51,260 --> 00:04:57,620
for example it also has a delete property method which we don't find on the object API, there

58
00:04:57,620 --> 00:04:58,840
this is not a thing,

59
00:04:58,850 --> 00:05:07,580
if I try to call delete property here on course and pass in the title with the object API, then you

60
00:05:07,580 --> 00:05:12,170
will see that if I print my course down there and I reload,

61
00:05:12,170 --> 00:05:16,440
this does not work because object delete property is not a function.

62
00:05:16,490 --> 00:05:20,000
The object API has no delete property, instead

63
00:05:20,150 --> 00:05:25,730
previously in older Javascript, if you wanted to delete a property in an object, you would have to use

64
00:05:25,730 --> 00:05:29,850
the delete keyword and then target the property you want to get rid of.

65
00:05:29,870 --> 00:05:35,340
Now you can do that but it's a bit of a strange code, having this special operator here,

66
00:05:35,360 --> 00:05:41,000
I think it's a bit cleaner to have a method you can call on an object if you want to get rid of a property

67
00:05:41,210 --> 00:05:47,240
because on the other hand we also do have a method for defining a property, so why not have one for deleting

68
00:05:47,240 --> 00:05:47,920
it?

69
00:05:47,990 --> 00:05:51,410
Well that's for example one thing the reflect API

70
00:05:51,410 --> 00:05:57,410
added, there you now have a proper delete property method and that simply is cleaner than using this

71
00:05:57,410 --> 00:05:58,670
delete operator.

72
00:05:58,850 --> 00:06:04,070
Here you can pass the object where you want to delete a property and then the property name and then

73
00:06:04,070 --> 00:06:08,740
this will return true or false depending on whether it is operation succeeded or not.

74
00:06:08,780 --> 00:06:13,400
So this is simply cleaner and more straightforward than using this delete

75
00:06:13,400 --> 00:06:19,040
operator, technically is of course doing the same but that's why we have the reflect API,

76
00:06:19,040 --> 00:06:25,880
it's there to group all the methods you need to configure your objects, to work with your objects and

77
00:06:25,880 --> 00:06:31,220
you don't have to fall back to different approaches where some things are defined on object and other

78
00:06:31,220 --> 00:06:35,650
things are not defined there and you suddenly need a special operator.

79
00:06:35,690 --> 00:06:41,960
Now the reflect API gives you everything you need to work with objects all bundled in this global reflect

80
00:06:42,020 --> 00:06:46,070
object here and that's basically the idea behind the reflect API.

81
00:06:46,160 --> 00:06:53,810
Whenever you need to do such meta work on your objects - delete a property, define a new one, change the

82
00:06:53,810 --> 00:07:00,650
prototype after the object has been created, then you should consider using the reflect API over the

83
00:07:00,740 --> 00:07:04,820
other scattered methods or operators you might be able to use for that,

84
00:07:04,850 --> 00:07:08,660
that's the primary reason for the existence of the reflect API.
