1
00:00:02,080 --> 00:00:06,430
So let's now continue and make sure that the computer also makes a choice. So for that,

2
00:00:06,430 --> 00:00:13,480
we can add a new function here, get a computer choice, an anonymous function stored in this constant

3
00:00:13,480 --> 00:00:15,670
here and there,

4
00:00:15,670 --> 00:00:23,980
I want to calculate a random number between 0 and 1 and if it's between 0 and .33, let's say

5
00:00:23,980 --> 00:00:24,740
that's rock,

6
00:00:24,760 --> 00:00:32,230
if it's between .34 and .67, it's scissors and so on, so that a third of that range

7
00:00:32,290 --> 00:00:34,520
is reserved for every choice.

8
00:00:34,780 --> 00:00:42,460
So we can get the random value here, store it in a constant of any name of your choice with math.random.

9
00:00:42,460 --> 00:00:44,170
We haven't really used that before,

10
00:00:44,200 --> 00:00:46,980
math is a globally available object

11
00:00:46,990 --> 00:00:52,660
you could say, made available by the browser in Javascript and it has a random method which generates

12
00:00:52,660 --> 00:00:55,780
a random number between 0 and 1.

13
00:00:55,780 --> 00:01:05,240
Now we can add an if check here and see if the random value is let's say smaller than .34, in that

14
00:01:05,240 --> 00:01:07,400
case let's say the choice is rock.

15
00:01:07,430 --> 00:01:15,340
So here we can return rock and since we return this function, we'll then stop at this point of course,

16
00:01:15,780 --> 00:01:24,950
else if let's say the random value is smaller than .67 which we only reach if this was false,

17
00:01:24,960 --> 00:01:30,450
so this will not kick in for a value like 0.2 because of course that would be true for that

18
00:01:30,450 --> 00:01:34,590
value but so is this and since we handle this true value here already,

19
00:01:34,620 --> 00:01:39,570
this other else if block will not kick in, no matter if we return here or not.

20
00:01:39,600 --> 00:01:47,730
So if we are greater than .34 but smaller than .67, I return paper and last but not

21
00:01:47,730 --> 00:01:49,300
least if neither is the case,

22
00:01:49,320 --> 00:01:50,600
so for all other cases,

23
00:01:50,620 --> 00:01:59,180
so for any value above .67, I return scissors. So that's how the computer chooses a value,

24
00:01:59,180 --> 00:02:05,000
it's simply a random choice, does not take into account what we chose because of course like in real

25
00:02:05,000 --> 00:02:09,830
life, we want to choose simultaneously without knowing what the other party chose

26
00:02:09,830 --> 00:02:16,720
and therefore now here, we can store the computer choice here in a constant by calling get computer

27
00:02:16,730 --> 00:02:18,540
choice.

28
00:02:18,560 --> 00:02:22,000
So now we have both choices stored,

29
00:02:22,100 --> 00:02:26,430
now it's time to find out who won and for that,

30
00:02:26,540 --> 00:02:34,420
I'll add yet another function which I'll name determine winner or get winner,

31
00:02:34,430 --> 00:02:39,380
however you want to call it and this function

32
00:02:39,430 --> 00:02:43,870
should now actually take some arguments.

33
00:02:44,120 --> 00:02:51,930
It takes the computer choice, I'll name it see choice here and the player choice as arguments

34
00:02:51,930 --> 00:02:56,300
and then we just need an if check where we go through the different combinations we have.

35
00:02:56,370 --> 00:03:01,920
Now the first combination we have is that the computer choice is equal to the player choice, in which

36
00:03:01,920 --> 00:03:02,900
case we have a draw,

37
00:03:02,910 --> 00:03:04,020
right?

38
00:03:04,020 --> 00:03:07,130
So I want to return draw here and just as before,

39
00:03:07,200 --> 00:03:14,310
if I use string identifiers, I want to use a global constant for that to rule out typos.

40
00:03:14,310 --> 00:03:21,970
So here, I'll add a result draw constant which includes that draw value,

41
00:03:22,200 --> 00:03:33,760
then here a result player wins constant where I maybe store player wins as an identifier and then result

42
00:03:33,790 --> 00:03:38,870
computer wins where we store computer wins as an identifier,

43
00:03:38,920 --> 00:03:43,060
the exact values for these identifiers of course are totally up to you.

44
00:03:43,060 --> 00:03:47,370
So now with that here, I want to return result draw

45
00:03:47,410 --> 00:03:57,330
in the end. Now else if, so if we don't have a draw, we want to find out if the player or the computer won.

46
00:03:57,330 --> 00:04:08,880
So here we want to check if, let's say the computer choice is equal to rock and the player choice is

47
00:04:08,910 --> 00:04:12,150
equal to let's say paper,

48
00:04:12,150 --> 00:04:17,370
then we know the player won right because the player chose paper, paper beats rock,

49
00:04:17,370 --> 00:04:21,790
so in this case the player would have won but of course that's not the only combination.

50
00:04:21,840 --> 00:04:27,420
So we need to add another block and we can do so by adding the or operator, thanks to precedence,

51
00:04:27,420 --> 00:04:32,610
this is combined together and then compared to whatever we have after or, this is exactly what we want

52
00:04:32,700 --> 00:04:34,540
because these two belong together.

53
00:04:34,620 --> 00:04:40,890
So that's one possible win condition, if this yields true, then the player won. Another possible win condition

54
00:04:40,890 --> 00:04:52,760
is that the computer chose let's say paper and the player chose scissors, then the player won as well,

55
00:04:52,790 --> 00:04:56,560
so here I want a group together all the conditions where the player wins.

56
00:04:56,660 --> 00:04:58,970
Let me add the if body thereafter,

57
00:04:58,990 --> 00:05:04,550
so the curly braces and use the autoformatting shortcut to autoformat this, now this also added

58
00:05:04,550 --> 00:05:07,220
some parentheses here to make this easier to read,

59
00:05:07,220 --> 00:05:08,630
technically they're not required,

60
00:05:08,660 --> 00:05:14,060
you can add them and autoformatting will re-add them but you don't need them here because of precedence,

61
00:05:14,060 --> 00:05:16,100
just want to highlight this again.

62
00:05:16,220 --> 00:05:24,560
So let's add the last combination here and that's that the computer chose scissors and the player

63
00:05:25,160 --> 00:05:27,390
chose rock,

64
00:05:27,410 --> 00:05:29,470
in this case we also won, right?

65
00:05:29,480 --> 00:05:33,590
So in all these cases, we won and therefore here we can return result

66
00:05:33,680 --> 00:05:38,130
player wins, else we know that the computer won,

67
00:05:38,180 --> 00:05:40,610
so we can return result

68
00:05:40,610 --> 00:05:42,680
computer wins.

69
00:05:42,680 --> 00:05:45,500
So that's now our get winner function

70
00:05:45,500 --> 00:05:53,440
and now we can call that down there in our anonymous function which we call when we start the game. I

71
00:05:53,440 --> 00:05:59,140
add a winner variable or constant here since we never assign a new value and we can call get winner

72
00:05:59,140 --> 00:06:03,430
here and forward the computer choice as a first argument

73
00:06:03,610 --> 00:06:10,120
and the player selection or to be in line, we can also name this here player choice of course, doesn't

74
00:06:10,120 --> 00:06:12,840
matter, as a second argument.

75
00:06:12,910 --> 00:06:17,850
So this will give us the winner and for now, I'll just log winner here, of course

76
00:06:17,860 --> 00:06:20,500
that's not the final output, to see whether that works.

77
00:06:21,330 --> 00:06:25,110
So let's save all of that and reload here, start a game

78
00:06:25,270 --> 00:06:29,200
and now let's choose paper and looks like we won.

79
00:06:29,200 --> 00:06:32,130
Now we don't really see what the computer chose but we won,

80
00:06:32,140 --> 00:06:32,770
that's good, right,

81
00:06:32,770 --> 00:06:38,860
so yes we'll probably find out what the computer chose later once we add more code. So let's reload

82
00:06:38,890 --> 00:06:41,670
because right now we can't restart the game in any other way,

83
00:06:41,860 --> 00:06:49,000
so let's reload and let's maybe go for scissors and looks like the computer also chose that.

84
00:06:49,750 --> 00:06:52,330
Well let's also see if we can lose if I choose rock,

85
00:06:52,630 --> 00:06:54,360
well computer also chose that,

86
00:06:54,400 --> 00:06:56,270
let's go for rock again,

87
00:06:56,320 --> 00:06:56,770
wow,

88
00:06:58,420 --> 00:06:59,190
computer won now

89
00:06:59,220 --> 00:07:02,170
so looks like the computer chose paper.

90
00:07:02,620 --> 00:07:05,020
So that works,

91
00:07:05,020 --> 00:07:10,500
of course we don't really have the best possible output because we don't really see what the computer chose

92
00:07:10,600 --> 00:07:13,780
but we'll get there. Before we get there though,

93
00:07:13,780 --> 00:07:18,430
let's take a step back and learn more about functions and a different way of creating functions.
