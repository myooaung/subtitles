1
00:00:02,440 --> 00:00:07,420
Now what you're already seeing in the example I showed in the last lecture is that of course this if

2
00:00:07,420 --> 00:00:10,960
else statement in the end allows us to write more reusable code.

3
00:00:11,110 --> 00:00:17,050
Now calculate result is a function that works both for addition and subtraction but you'll also see

4
00:00:17,050 --> 00:00:19,810
that two cases aren't enough here,

5
00:00:19,900 --> 00:00:22,240
I'm not happy with just two cases,

6
00:00:22,240 --> 00:00:31,260
we could also be multiplying or dividing. Well the good thing is besides if and else, you also have else

7
00:00:31,300 --> 00:00:36,910
if. You can use else if to add yet another condition you want to check and you can have more than one

8
00:00:36,920 --> 00:00:38,500
else if statement here.

9
00:00:38,560 --> 00:00:43,390
An alternative would be a nested if statement where you now have an if statement in the else statement,

10
00:00:43,660 --> 00:00:49,600
so that if this condition is not met, you can check another condition but you quickly end up with deeply

11
00:00:49,600 --> 00:00:53,110
nested if statements in if statements in if statements

12
00:00:53,110 --> 00:00:58,030
if you add more and more if statements in if statements and that can make your code harder to read.

13
00:00:58,570 --> 00:01:04,480
So you would typically use such an else if statement here where you can check for another condition

14
00:01:04,480 --> 00:01:04,890
here,

15
00:01:04,900 --> 00:01:11,340
so here I could check if calculation type is equal to subtract and then execute this code and therefore

16
00:01:11,350 --> 00:01:16,030
right now with this code, if calculation type is add, we run this code,

17
00:01:16,030 --> 00:01:18,220
if it subtract, we run this code,

18
00:01:18,280 --> 00:01:25,480
if it's any other value, that's also okay but then neither this code nor that code here runs.

19
00:01:25,480 --> 00:01:30,310
So in that case, none of that code executes and this means that right now this function wouldn't really

20
00:01:30,310 --> 00:01:35,890
work because that down here would be kind of broken but technically, you can also have if statements

21
00:01:35,890 --> 00:01:40,740
in your code where you don't necessarily meet any condition, that might be okay,

22
00:01:40,750 --> 00:01:44,950
it really depends on which kind of code and program you're writing. Throughout this course, you will also

23
00:01:44,950 --> 00:01:50,530
see examples of if statements where we also have the scenario that no condition is met.

24
00:01:50,680 --> 00:01:56,590
If you specify an else case however by the way, you are guaranteed that this code will always run if no

25
00:01:56,590 --> 00:02:01,150
condition was met in advance. So you don't need to have an else block here,

26
00:02:01,210 --> 00:02:05,380
then it might very well be the case that no condition is met and no code runs,

27
00:02:05,980 --> 00:02:11,670
if you have an else block on the other hand then the else code will always run if no condition is met

28
00:02:11,680 --> 00:02:14,850
in this if statement, this is how if statements work.

29
00:02:14,950 --> 00:02:19,570
Now however here, I'm not just interested in adding and subtracting, instead I'll add another

30
00:02:19,580 --> 00:02:25,990
else if statement and check if the calculation type is equal to let's say multiply.

31
00:02:25,990 --> 00:02:31,780
If it is, well then I want to take this multiplication code from down there,

32
00:02:31,930 --> 00:02:38,260
so set current result equal to current result times entered number and set the math operator equal

33
00:02:38,260 --> 00:02:46,850
to this asterisk here and now we can add a normal else block and just perform the division here because

34
00:02:46,850 --> 00:02:48,560
this is our last case.

35
00:02:48,710 --> 00:02:51,250
Of course we could also use another else if block,

36
00:02:51,260 --> 00:02:55,310
that really depends on how you want to do that.

37
00:02:55,580 --> 00:02:57,590
If you just add an else block here,

38
00:02:57,590 --> 00:03:02,710
this means that this code runs no matter what is passed in as calculation type,

39
00:03:02,720 --> 00:03:09,180
so even if it's not divide but Hi, I am Max as a text we would still execute this,

40
00:03:09,190 --> 00:03:11,660
this might or might not be what you want.

41
00:03:11,780 --> 00:03:18,110
If you want to make sure it really is divide here, then you would have to add calculation type equal

42
00:03:18,110 --> 00:03:19,020
to divide.

43
00:03:19,040 --> 00:03:21,400
So now you would just run this code

44
00:03:21,410 --> 00:03:23,090
if calculation type is divide,

45
00:03:23,240 --> 00:03:29,160
if the calculation type is neither add nor subtract or multiply or divide, none of the code would run,

46
00:03:29,180 --> 00:03:31,160
so that's really up to you.

47
00:03:31,160 --> 00:03:32,980
Here I'll go with the explicit check

48
00:03:32,990 --> 00:03:38,970
but you could also just use an else statement here, since we check all other options in advance.

49
00:03:38,990 --> 00:03:42,960
Well and now we just have to make sure that we call calculate result,

50
00:03:43,100 --> 00:03:44,270
so call it here

51
00:03:44,270 --> 00:03:52,280
when we multiply and pass in multiply as a value of course and here for the division, pass in divide

52
00:03:53,270 --> 00:03:59,090
and now we have way more concise and shorter code with our code reusage, we have all the logic in

53
00:03:59,090 --> 00:04:04,310
one function which is good because it means we don't have to check dozens of functions to understand

54
00:04:04,310 --> 00:04:05,120
our code,

55
00:04:05,120 --> 00:04:09,380
instead it's all in here and we have very lean code in here.

56
00:04:09,380 --> 00:04:15,350
Now let's just quickly validate this by running some calculations here

57
00:04:18,090 --> 00:04:23,820
and we seem to have a problem with the multiplication, yes

58
00:04:23,920 --> 00:04:26,590
because I have a typo here that should be multiply.

59
00:04:26,590 --> 00:04:30,250
So let's fix that and reload,

60
00:04:30,300 --> 00:04:31,760
so now multiply this, yes

61
00:04:31,800 --> 00:04:34,770
this now looks way better and with that,

62
00:04:34,830 --> 00:04:40,950
this is the basic introduction to if statements and how you write them and how you use boolean operators.

63
00:04:40,950 --> 00:04:46,140
Now of course here, I always use the equality operator because equality is the thing I'm interested in

64
00:04:46,140 --> 00:04:46,730
here,

65
00:04:46,740 --> 00:04:51,480
this is not really a use case where I would use a greater than operator or anything like that but we'll

66
00:04:51,570 --> 00:04:54,060
also see use cases for that throughout the course.

67
00:04:54,060 --> 00:04:59,280
And of course you can also play around with your own basic if conditions and try them out with some

68
00:04:59,280 --> 00:05:02,240
numbers and some greater than comparisons if you want to,

69
00:05:02,280 --> 00:05:07,350
again this also is something though we'll have a detailed look throughout this module and throughout the entire

70
00:05:07,350 --> 00:05:08,130
course again.
