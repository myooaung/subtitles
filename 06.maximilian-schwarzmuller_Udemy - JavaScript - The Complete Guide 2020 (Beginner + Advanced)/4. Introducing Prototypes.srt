1
00:00:02,220 --> 00:00:10,740
There is this term, this concept called prototypes in Javascript and it's super important to Javascript,

2
00:00:10,740 --> 00:00:18,270
it's been around forever and Javascript indeed is a prototype-based language which uses prototypical

3
00:00:18,270 --> 00:00:19,350
inheritance.

4
00:00:19,380 --> 00:00:21,180
So these are a lot of strange terms,

5
00:00:21,180 --> 00:00:22,320
what does it mean?

6
00:00:22,320 --> 00:00:28,050
Well in the end the class syntax, that's important to understand, just is syntactic sugar for constructor

7
00:00:28,050 --> 00:00:34,050
functions and also for working with the prototypes because working with them can be confusing,

8
00:00:34,110 --> 00:00:38,040
classes make that easier but it's still important to understand what they do.

9
00:00:38,520 --> 00:00:45,280
So constructor functions and these prototypes power Javascript objects, but what are prototypes then?

10
00:00:45,600 --> 00:00:51,900
Consider this constructor function as I just explained it, a function which we can call with new, the equivalent

11
00:00:51,900 --> 00:00:59,130
roughly would be such a class where we then build a person, a concrete object by calling that constructor

12
00:00:59,130 --> 00:01:01,570
function with the new keyword.

13
00:01:01,590 --> 00:01:08,400
Now this object which we build based on that blueprint, based on that class or this constructor function

14
00:01:08,670 --> 00:01:14,120
has all the properties and all the methods defined in that constructor function.

15
00:01:14,190 --> 00:01:19,860
So coming back to this example, when we create a person based on this constructor function, this p object

16
00:01:19,860 --> 00:01:26,070
here has an age property, a name property and a greet property which holds a function and therefore effectively

17
00:01:26,070 --> 00:01:29,120
that's a method because all of that is defined in here.

18
00:01:30,460 --> 00:01:37,810
Now you learned about that idea of being able to inherit from other classes and therefore this has to

19
00:01:37,810 --> 00:01:45,610
be possible for other constructor functions as well. In order to share functionality, to provide some methods

20
00:01:45,610 --> 00:01:52,210
or some properties which are available in all objects based on this class or constructor function

21
00:01:52,540 --> 00:02:00,850
or some subclass or subconstructor function in quotation marks because that's not an actual term. In

22
00:02:01,000 --> 00:02:08,030
non-class based Javascript and also in class based Javascript but there it happens behind the scenes,

23
00:02:08,080 --> 00:02:11,830
this is implemented with the concept of prototypes.

24
00:02:12,070 --> 00:02:21,310
Every constructor function you build has a special prototype property which is not added to the objects

25
00:02:21,310 --> 00:02:28,780
you create based on it because it's not part of the function body but a property of that function object,

26
00:02:28,780 --> 00:02:34,200
keep in mind that functions are objects and that prototype is there by default,

27
00:02:34,200 --> 00:02:43,390
you can also edit it, something we will do and it is then automatically assigned as a prototype to the object

28
00:02:43,420 --> 00:02:48,340
which is created when you instantiate that constructor function.

29
00:02:48,340 --> 00:02:52,150
Now a prototype is an object itself,

30
00:02:52,150 --> 00:02:56,160
there are objects and every object has such a prototype

31
00:02:56,240 --> 00:02:59,620
OK but what exactly is the idea behind a prototype,

32
00:02:59,620 --> 00:03:02,950
why does every object have a prototype?

33
00:03:02,950 --> 00:03:10,030
It's how Javascript shares code in the end and you can think of prototype objects as fallback objects,

34
00:03:10,330 --> 00:03:11,100
objects

35
00:03:11,110 --> 00:03:17,770
Javascript has a look at if it searches for a certain property or method it can't find on the object

36
00:03:17,800 --> 00:03:19,530
it started looking at.

37
00:03:19,690 --> 00:03:25,540
Let's say we have a person object which has a name property and a greet method and then you have some

38
00:03:25,540 --> 00:03:28,050
code which calls person.sayHello.

39
00:03:28,060 --> 00:03:32,640
Now clearly there is no sayHello method in this person object, right?

40
00:03:32,650 --> 00:03:36,670
So normally we would expect this to fail and it might fail

41
00:03:36,670 --> 00:03:44,020
if our prototype or the prototype of the prototype also does not have a sayHello method because

42
00:03:44,020 --> 00:03:47,030
that's what Javascript will do, it will not fail immediately,

43
00:03:47,170 --> 00:03:54,790
instead as I said, every object in Javascript has a prototype and a prototype is basically a connected

44
00:03:54,910 --> 00:03:58,970
object which is used as a fallback object.

45
00:03:58,990 --> 00:04:00,630
So here we have a prototype

46
00:04:00,640 --> 00:04:04,090
and as I said, a prototype is just another object

47
00:04:04,210 --> 00:04:10,780
and by the way in case you're wondering, yes this prototype object also will have its own prototype

48
00:04:11,080 --> 00:04:14,540
and I'll come back to this chain of prototypes a little bit later

49
00:04:14,800 --> 00:04:16,860
but back to this prototype here,

50
00:04:16,870 --> 00:04:23,800
so this is the connected prototype to the person object and this prototype object might have a sayHello

51
00:04:23,800 --> 00:04:30,610
method and if Javascript tries to access a certain method or property and doesn't find it on an object,

52
00:04:30,850 --> 00:04:36,210
it automatically looks at the prototype object and looks for the property there

53
00:04:36,430 --> 00:04:42,430
and if it doesn't find it there, it looks at the prototype of the prototype, all the way until it reaches

54
00:04:42,430 --> 00:04:49,570
the end of that chain and didn't find that property or method anywhere and in that case for a property

55
00:04:49,570 --> 00:04:53,560
it would return undefined, for a method it would throw an error.

56
00:04:53,560 --> 00:05:00,940
So prototypes are in the end just connected objects which serve as fallback objects.

57
00:05:01,000 --> 00:05:03,820
Now that might sound confusing,

58
00:05:03,820 --> 00:05:13,510
let me give you an example. If I console log p.toString, you will actually see that this does not yield

59
00:05:13,510 --> 00:05:20,830
an error but that this works, if I reload here, you see this strange output. The exact output doesn't matter,

60
00:05:20,830 --> 00:05:25,950
the important thing is that we don't get an error. Just to prove that we should expect one,

61
00:05:25,990 --> 00:05:33,790
if I call toStr which I know won't exist and I then reload, I actually get an error, toString is not

62
00:05:33,790 --> 00:05:36,670
a function or toStr is not a function.

63
00:05:36,670 --> 00:05:38,850
So why does toString work?

64
00:05:38,950 --> 00:05:47,460
Because actually, there is some kind of invisible base object you could say on which our object is based,

65
00:05:47,590 --> 00:05:52,660
of course it's based on this constructor function but this doesn't add a toString method.

66
00:05:52,660 --> 00:06:01,630
So our constructor function somehow seems to point at some other base class, some other base constructor

67
00:06:01,630 --> 00:06:10,300
function which also kind of is called or which kind of does something, which basically adds the toString

68
00:06:10,300 --> 00:06:18,850
method to our object, kind of. Well indeed toString is not added to the object though, if we log the

69
00:06:18,850 --> 00:06:25,030
entire object with everything that's in there, we see there are exactly three things in there but there

70
00:06:25,210 --> 00:06:31,660
is this thing, the underscore __proto__property.

71
00:06:31,780 --> 00:06:34,600
Now that's a special property, hence the strange name,

72
00:06:34,600 --> 00:06:41,470
it's not really a property you should use to assign a value to though it would work but not really recommended

73
00:06:41,470 --> 00:06:49,330
but it shows you what this so-called prototype of this object is and you can think of the prototype

74
00:06:49,330 --> 00:06:51,610
kind of as the base class,

75
00:06:51,820 --> 00:07:01,760
so a related, a connected object to which we can also reach out to ask it for properties or methods which

76
00:07:01,760 --> 00:07:06,760
you're trying to access which don't exist on this object itself,

77
00:07:06,760 --> 00:07:12,910
for example with toString. If we don't find the toString method in this object itself which clearly

78
00:07:12,910 --> 00:07:16,680
is the case, Javascript will go to that prototype,

79
00:07:17,020 --> 00:07:23,010
so to this object and look into that. If we expand that, here we don't see anything,

80
00:07:23,020 --> 00:07:26,840
we see another object which has a constructor method,

81
00:07:26,840 --> 00:07:27,790
that's a function right

82
00:07:27,790 --> 00:07:29,040
so it's a constructor method

83
00:07:29,130 --> 00:07:36,370
OK but then this also has a prototype and then Javascript goes to that prototype and oh, here we have

84
00:07:36,370 --> 00:07:43,040
a more complex object and there for example we see the toString method and a couple of other methods.

85
00:07:43,120 --> 00:07:45,370
Now actually that's the base prototype,

86
00:07:45,370 --> 00:07:50,840
this object here is a base object, every object you create is based on in the end

87
00:07:50,860 --> 00:07:56,830
if you go down that prototype chain. The concept of that prototype chain is indeed very important

88
00:07:56,860 --> 00:07:58,730
so I want to dive into that again.

89
00:07:58,780 --> 00:08:04,690
The idea is that when you build a blueprint with a constructor function or with a class which in the

90
00:08:04,690 --> 00:08:10,120
end just uses constructor functions and prototypes behind the scenes and you then build an object based

91
00:08:10,120 --> 00:08:13,690
on that constructor function, you can call a method on that object.

92
00:08:13,690 --> 00:08:20,080
Now let's say we're calling the brief method here on person and let's say our constructor function

93
00:08:20,110 --> 00:08:23,740
or class does not have a brief method.

94
00:08:23,740 --> 00:08:28,780
What Javascript then does is it first of all when we call brief, it checks

95
00:08:28,780 --> 00:08:32,080
is that part of the object itself,

96
00:08:32,080 --> 00:08:37,390
so was it defined in the blueprint because as you learned, when you then instantiate an object based on

97
00:08:37,390 --> 00:08:38,060
the blueprint,

98
00:08:38,080 --> 00:08:40,800
the object has everything defined in the blueprint.

99
00:08:41,020 --> 00:08:47,170
So is the brief method part of the person itself, of that object which we created based on the constructor

100
00:08:47,170 --> 00:08:47,890
function?

101
00:08:47,890 --> 00:08:50,410
If yes, then we can execute the method,

102
00:08:50,410 --> 00:08:56,260
if no, well then we look to the prototype and that's just something you can memorize, it's called

103
00:08:56,260 --> 00:08:56,900
prototype,

104
00:08:56,920 --> 00:08:58,310
it's basically a base class

105
00:08:58,320 --> 00:09:03,510
of this person object here in the end you could say. There is a connection which is automatically

106
00:09:03,520 --> 00:09:07,870
set up and every object you create by default has such a prototype

107
00:09:07,870 --> 00:09:10,890
even if you haven't set up any inheritance here.

108
00:09:11,200 --> 00:09:13,300
So then this prototype is checked,

109
00:09:13,300 --> 00:09:15,690
the object which is the prototype is checked,

110
00:09:15,880 --> 00:09:18,120
does that have a brief method

111
00:09:18,430 --> 00:09:20,530
and if the answer is yes, we're done,

112
00:09:20,530 --> 00:09:22,190
if not we continue,

113
00:09:22,330 --> 00:09:28,120
we go to the prototype of the prototype, so to the base class of the base class of our object so to say,

114
00:09:28,420 --> 00:09:30,350
check for the brief method there

115
00:09:30,370 --> 00:09:37,420
and we do that until we reached the end and the last prototype we check is the prototype of this special

116
00:09:37,660 --> 00:09:47,240
object thing which I also showed you earlier. So let's understand this prototype thing a bit better. Here

117
00:09:47,240 --> 00:09:48,730
in the code,

118
00:09:48,800 --> 00:09:52,880
there seems to be this object prototype thing which in the end is connected,

119
00:09:52,880 --> 00:09:55,140
let's ignore that for a second.

120
00:09:55,220 --> 00:10:00,640
Let's instead output p.__,

121
00:10:00,700 --> 00:10:06,910
so double underscore therefore also often called dunder for double under, proto__.

122
00:10:06,940 --> 00:10:16,430
If we do that and we reload, we get this object which has a constructor method and

123
00:10:16,460 --> 00:10:23,200
then also the __proto__ property which points at yet another object.

124
00:10:23,420 --> 00:10:29,570
This object here which we're seeing here with these two properties or with this one method and the proto

125
00:10:29,780 --> 00:10:30,770
property,

126
00:10:30,770 --> 00:10:40,100
this is the default object every custom constructor function assigns to an object based on it

127
00:10:40,100 --> 00:10:46,430
and let me now show you how you can tweak that prototype. Every constructor function here or every function

128
00:10:46,430 --> 00:10:51,720
in general in Javascript is in the end stored as an object, right.

129
00:10:51,770 --> 00:10:53,890
In the end a function is just an object,

130
00:10:53,910 --> 00:11:00,980
therefore just as on any other object, you can assign properties by using the name of that object,

131
00:11:00,980 --> 00:11:07,340
in this case the name of the function, person and just to prove this, if I console dir this to look

132
00:11:07,340 --> 00:11:11,260
into it here before we do anything, if we do that,

133
00:11:11,330 --> 00:11:17,440
you see this is the function object and in the end, it has the special way of being displayed here

134
00:11:17,470 --> 00:11:21,220
but you see it has a bunch of properties, the arguments property you learned about earlier,

135
00:11:21,370 --> 00:11:28,210
it has a name property, it has a proto, __proto property and it also has a property

136
00:11:28,420 --> 00:11:30,690
which our other object does not have,

137
00:11:30,700 --> 00:11:37,500
it has a prototype. Now that can be confusing, having __proto and prototype. In

138
00:11:37,500 --> 00:11:45,240
short, __proto is present on every object in Javascript, no matter how you created

139
00:11:45,240 --> 00:11:45,500
it,

140
00:11:45,570 --> 00:11:51,570
no matter if that is a function object, a function object which we use as a constructor function, an

141
00:11:51,630 --> 00:11:58,110
object you build with object literal notation, an object you build with the help of a constructor function,

142
00:11:58,410 --> 00:11:59,330
an array,

143
00:11:59,400 --> 00:12:05,050
you always have __proto because this shows you the connected prototype,

144
00:12:05,130 --> 00:12:08,400
so this backup object if you want to call it like this,

145
00:12:08,550 --> 00:12:16,140
this object is connected to. Now prototype sounds similar but does something totally different.

146
00:12:16,200 --> 00:12:27,450
This prototype property does not exist on every object, it exists on function objects because Javascript

147
00:12:27,450 --> 00:12:34,740
is a prototype-based language. We use constructor functions to build objects and whatever you set here

148
00:12:35,340 --> 00:12:41,790
on prototype will be assigned as a prototype to any object that's built

149
00:12:41,790 --> 00:12:48,960
based on this constructor function and therefore indeed we see that what's set to prototype here is an object

150
00:12:49,290 --> 00:12:56,090
with a constructor method and also of course the __proto property.

151
00:12:56,160 --> 00:13:01,390
So in short, the exact same object we're logging down here,

152
00:13:01,560 --> 00:13:07,980
this here is exactly the same object, constructor function and then proto down there,

153
00:13:08,040 --> 00:13:11,610
it's exactly the same and indeed that's true.

154
00:13:11,700 --> 00:13:21,030
If we compare our object, our person object, what is set up as a prototype there to person.prototype,

155
00:13:22,810 --> 00:13:27,450
then you will see that if I reload here, we log true.

156
00:13:27,460 --> 00:13:33,970
So these are exactly the same objects, not copies, exactly the same object in memory.

157
00:13:33,970 --> 00:13:41,920
Now this does not mean that our constructor function object and this person object have the same fallback

158
00:13:42,280 --> 00:13:42,790
object,

159
00:13:42,820 --> 00:13:50,860
they don't because that's stored in the __proto property. Prototype is not what person,

160
00:13:50,860 --> 00:13:57,160
what this function object would reach out to if we called something on it like toString which we

161
00:13:57,160 --> 00:13:59,760
can't find on the object itself,

162
00:13:59,770 --> 00:14:07,870
this is not what prototype is therefore. This would be handled with the prototype being used as a fallback

163
00:14:07,870 --> 00:14:10,630
value for this constructor function object.

164
00:14:10,630 --> 00:14:16,000
Instead the prototype property and I know it's confusing, it's just how these properties are named unfortunately,

165
00:14:16,360 --> 00:14:25,570
the prototype property of our function object instead can be used to assign an object which then will

166
00:14:25,570 --> 00:14:27,940
be assigned as a prototype,

167
00:14:28,030 --> 00:14:35,080
so as a fallback value to any objects you build based on this constructor function.

168
00:14:35,110 --> 00:14:44,520
So here for example, we can set prototype to a new object with let's say a method of printAge, where we

169
00:14:44,520 --> 00:14:56,450
then say console log this age. So now what I do here is I set that every object we build based on this

170
00:14:56,750 --> 00:15:04,470
constructor function should have a prototype which is exactly this object.

171
00:15:04,560 --> 00:15:09,910
The result of that is that if I now log p.__proto,

172
00:15:13,060 --> 00:15:15,550
I see this object here indeed

173
00:15:15,550 --> 00:15:23,640
and therefore we can for example also call p.printAge, not because there would be a printAge

174
00:15:23,640 --> 00:15:26,310
method set up directly in the constructor function,

175
00:15:26,310 --> 00:15:33,540
it isn't but we set it up on our fallback object and therefore this works. If I now go back and I reload,

176
00:15:33,730 --> 00:15:35,820
you see 30 being printed here.

177
00:15:35,910 --> 00:15:37,620
That's also important,

178
00:15:37,680 --> 00:15:46,460
the this keyword inside of your prototypes always refers to your object on which you call the method

179
00:15:46,550 --> 00:15:47,630
and that makes sense right,

180
00:15:47,630 --> 00:15:48,420
you learned that

181
00:15:48,420 --> 00:15:55,560
this refers to whatever called the method and that is also something you learned in the last module when

182
00:15:55,560 --> 00:15:57,320
I talked about inheritance,

183
00:15:57,360 --> 00:16:03,070
what's set up there in the base class, when you use this in some method of the base class,

184
00:16:03,300 --> 00:16:07,640
if you then called it on the object that's based on a subclass,

185
00:16:07,740 --> 00:16:14,640
this in the base class will refer to the concrete object on which you called it, not on the base class

186
00:16:14,640 --> 00:16:16,860
itself or anything like that. 

187
00:16:17,100 --> 00:16:18,960
And indeed prototypes here,

188
00:16:19,020 --> 00:16:26,220
that's in the end what class and extends do for you. When you create a class that extends something, you

189
00:16:26,220 --> 00:16:35,700
in the end in form Javascript that you want to set the prototype to a new object or add some new methods

190
00:16:35,700 --> 00:16:38,960
and properties to that prototype to be precise.

191
00:16:38,970 --> 00:16:44,600
So what I do manually here is done for you when you extend something here.
