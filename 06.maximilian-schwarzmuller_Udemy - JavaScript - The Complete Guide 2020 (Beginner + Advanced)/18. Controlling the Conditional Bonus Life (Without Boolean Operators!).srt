1
00:00:02,350 --> 00:00:06,770
So we can attack the monster normally, we can launch a strong attack,

2
00:00:06,850 --> 00:00:08,000
we can heal,

3
00:00:08,060 --> 00:00:11,890
we get various checks and they're also to see whether we won.

4
00:00:11,890 --> 00:00:17,060
One thing we're not doing is we're not resetting the game after we won,

5
00:00:17,080 --> 00:00:21,820
we're also not asking the user for an initial max health value,

6
00:00:21,820 --> 00:00:24,290
right now we're hardcoding this to be 100,

7
00:00:24,370 --> 00:00:28,150
I said that I want to let the user of the game, of this app, of this website

8
00:00:28,150 --> 00:00:34,940
choose that value and we're also not doing is, we're not utilizing this bonus life.

9
00:00:34,960 --> 00:00:40,450
Now let's maybe start with the bonus life. The idea behind the bonus life is that if we're low on health

10
00:00:41,440 --> 00:00:47,940
and we would die, like now if I click attack and the monster hits us, we would very likely die,

11
00:00:48,070 --> 00:00:49,950
then we actually don't die

12
00:00:49,960 --> 00:00:59,320
but instead we consume this bonus life and we got time or an opportunity to come back.

13
00:00:59,370 --> 00:00:59,610
OK,

14
00:00:59,620 --> 00:01:00,370
so I didn't die,

15
00:01:00,370 --> 00:01:01,390
now I should die,

16
00:01:01,390 --> 00:01:02,950
I lost

17
00:01:02,950 --> 00:01:03,520
and here

18
00:01:03,520 --> 00:01:07,750
we shouldn't lose but instead consume the bonus life, freeze our health,

19
00:01:07,810 --> 00:01:13,570
so don't reduce our health for this turn and thereafter, we have a chance to heal back up or if it was

20
00:01:13,570 --> 00:01:17,800
close, maybe now launch an attack towards the monster that kills it

21
00:01:17,800 --> 00:01:21,250
and therefore we have one chance to recover throughout the entire game

22
00:01:21,250 --> 00:01:23,420
even if we then restart it later.

23
00:01:23,590 --> 00:01:25,920
So this is the idea behind the bonus life,

24
00:01:25,930 --> 00:01:33,530
where should this bonus life come in therefore? Well the and round function makes sense because this is

25
00:01:33,530 --> 00:01:40,520
where we check whether we lost and here actually before we check this, we should check whether we have

26
00:01:40,550 --> 00:01:49,720
a bonus life. So in here, we can add another if statement and check if the currentPlayerHealth is smaller

27
00:01:49,720 --> 00:01:54,880
or equal than zero, which means we would beat that and now I also want to check if

28
00:01:54,890 --> 00:02:00,040
we still have our bonus life. Now for that since it's exactly one which we can consume,

29
00:02:00,050 --> 00:02:04,740
I'll add a new variable up there which I'll name hasBonusLife

30
00:02:05,270 --> 00:02:10,060
and I give it this strange name because this will actually hold true initially.

31
00:02:10,060 --> 00:02:13,400
So this is now a variable that just holds a boolean value,

32
00:02:13,400 --> 00:02:20,810
true or false, not a truthy or falsy value but a real boolean and boolean variables are typically named

33
00:02:20,810 --> 00:02:26,390
like this, where you kind of indicate what you're trying to control here,

34
00:02:26,390 --> 00:02:32,900
so here, hasBonusLife, in other programs you might have something like isLoggedIn, to indicate whether

35
00:02:32,900 --> 00:02:34,490
the user is logged in or not

36
00:02:34,490 --> 00:02:37,190
which also makes sense to be true or false.

37
00:02:37,190 --> 00:02:40,310
Of course we don't have that here but that would be another example.

38
00:02:40,400 --> 00:02:43,610
So here bonus life, hasBonusLife is true

39
00:02:43,610 --> 00:02:49,550
and therefore here I can check if we would be that and we have a bonus life,

40
00:02:49,550 --> 00:02:53,030
so if this is true. Now we can just check this like that,

41
00:02:53,120 --> 00:02:57,230
you could say equals true with triple or double equals sign

42
00:02:57,230 --> 00:02:58,520
and that would not be wrong,

43
00:02:58,520 --> 00:02:59,750
that would work

44
00:02:59,750 --> 00:03:07,010
but as I also showed you on the falsy truthy slide, if you just reference a variable without a comparison

45
00:03:07,010 --> 00:03:14,050
operator, Javascript will actually try to convert this to true or false and then take this in its condition

46
00:03:14,090 --> 00:03:17,770
and here of course this conversion is really easy because there is nothing to convert,

47
00:03:17,810 --> 00:03:20,660
this is a real boolean, it is true

48
00:03:20,660 --> 00:03:28,280
so Javascript will check if this is true and this is true which means we would be that but we do have

49
00:03:28,280 --> 00:03:36,290
a bonus life and in that case, I'll set the hasBonusLife variable to false because now we lost our

50
00:03:36,290 --> 00:03:42,680
bonus life and I will call remove bonus life which is a function provided in vendor.js, which will

51
00:03:42,680 --> 00:03:44,510
in the end just update the UI

52
00:03:47,230 --> 00:03:51,860
and now I also want to make sure that our health is now not below zero.

53
00:03:52,000 --> 00:03:58,630
So actually here at the beginning of the and round function, I'll log in the user's health before the monster

54
00:03:58,630 --> 00:03:59,580
hits him,

55
00:03:59,950 --> 00:04:11,790
so initial player life is here set equal to currentPlayerHealth, maybe also name this health therefore,

56
00:04:11,810 --> 00:04:15,020
so initial player health is equal to currentPlayerHealth.

57
00:04:15,060 --> 00:04:19,010
Thereafter the monster hit us and the currentPlayerHealth is reduced

58
00:04:19,100 --> 00:04:24,980
but since we stored a copy here in initial player health, initial player health is not affected by

59
00:04:24,980 --> 00:04:30,620
changes in currentPlayerHealth and therefore here, we can set back the currentPlayerHealth to the

60
00:04:30,620 --> 00:04:35,040
initial player health, so we reset it to be health before the monster hit us,

61
00:04:35,060 --> 00:04:38,610
that's what our bonus life does here.

62
00:04:38,680 --> 00:04:44,540
Now let's just also inform the player about his luck and say you would be that

63
00:04:45,010 --> 00:04:49,090
but the bonus life saved you

64
00:04:51,920 --> 00:04:58,750
and of course also make sure we update the UI appropriately by using a function you find in vendor.js

65
00:04:58,760 --> 00:05:03,950
and that's the set player health function which just updates the player health bar.

66
00:05:04,070 --> 00:05:06,830
You simply pass it the health to which it should be set,

67
00:05:06,830 --> 00:05:13,120
so here that's of course the initial player health to which we also reset our in-game health and with

68
00:05:13,120 --> 00:05:13,300
that,

69
00:05:13,300 --> 00:05:19,320
now let's save it, reload this game and now attack the monster a couple of times so that we would die

70
00:05:20,350 --> 00:05:22,360
and now we would normally be that

71
00:05:22,360 --> 00:05:24,020
but the bonus lives saved us

72
00:05:24,040 --> 00:05:26,350
and indeed here we get a little bit of health left

73
00:05:26,350 --> 00:05:30,130
so maybe let's try heal up and now we won.

74
00:05:30,130 --> 00:05:33,200
You also see the bonus life was removed here.

75
00:05:33,490 --> 00:05:37,420
So that's the bonus life, again with some if checks implemented, here

76
00:05:37,420 --> 00:05:44,290
also with a variable which we don't compare to anything which again we could do but it's simply redundant

77
00:05:44,320 --> 00:05:49,590
because if you don't add a comparison operator, Javascript will try to coerce this value to true or false

78
00:05:49,600 --> 00:05:54,940
which here is simple because it is a real boolean and therefore we can use this in the condition

79
00:05:55,330 --> 00:05:57,580
and hence, this works.
