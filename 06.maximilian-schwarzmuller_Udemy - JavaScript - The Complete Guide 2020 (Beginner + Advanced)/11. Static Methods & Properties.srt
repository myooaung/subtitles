1
00:00:02,290 --> 00:00:08,350
When you work with classes in Javascript, you have these properties and methods and fields which you

2
00:00:08,350 --> 00:00:12,670
already learned about which are all instance properties thus far,

3
00:00:12,970 --> 00:00:17,970
well turns out you also have something called static properties and methods.

4
00:00:17,980 --> 00:00:23,350
Now let's have a look at what the difference between static properties and fields and methods and instance

5
00:00:23,350 --> 00:00:29,440
field property and methods is. Now static properties and methods are defined with the static keyword

6
00:00:29,440 --> 00:00:30,690
in front of them.

7
00:00:30,920 --> 00:00:37,330
The difference to the instance properties is that the static properties and methods are only accessible

8
00:00:37,360 --> 00:00:41,580
on the class itself, so you don't need to instantiate the class,

9
00:00:41,590 --> 00:00:46,870
you don't need to use the new keyword to create an object based on that class

10
00:00:46,990 --> 00:00:54,940
and we typically use this on helper classes or for some global configuration, etc. And instance properties

11
00:00:54,940 --> 00:00:58,450
and so on are instead defined without the static keyword,

12
00:00:58,450 --> 00:01:00,780
that's what we did thus far in this module

13
00:01:00,980 --> 00:01:05,020
and they're only accessible on the instances based on that class.

14
00:01:05,230 --> 00:01:10,660
So we use that for all the core reusable logic, for example in our code

15
00:01:10,660 --> 00:01:13,860
thus far, we only work with instances,

16
00:01:13,870 --> 00:01:19,900
we always use all these classes by using new because we need different product items which have the

17
00:01:19,900 --> 00:01:26,200
same structure but hold different data, with static properties and static methods,

18
00:01:26,200 --> 00:01:32,980
we have a class which is not instantiated and which therefore always works on the same data for example

19
00:01:32,980 --> 00:01:36,300
but that's exactly what we can utilize here.

20
00:01:36,340 --> 00:01:43,240
Here we could add a new class, maybe name it app because it holds our overall app, which is created like

21
00:01:43,240 --> 00:01:44,100
a regular class,

22
00:01:44,110 --> 00:01:53,790
nothing special there but in here, I add a new method, init where I now add the static keyword in front

23
00:01:53,790 --> 00:01:54,900
of it and that's new.

24
00:01:54,900 --> 00:02:00,460
Now we can move that code here for example into init, we can execute any code in there,

25
00:02:00,480 --> 00:02:06,090
just be aware that if you would use this in here, you would always refer to the class itself not to an

26
00:02:06,180 --> 00:02:08,760
object instance based on the class

27
00:02:09,000 --> 00:02:15,020
and now you therefore also don't create a new app like that or at least you could do that

28
00:02:15,030 --> 00:02:20,880
but to call init, you don't do it, instead you can just call app referring to the class itself like this,

29
00:02:21,240 --> 00:02:23,370
.init like this

30
00:02:23,370 --> 00:02:27,690
and this will execute this init method directly on the class itself.

31
00:02:27,690 --> 00:02:30,690
Now again, we therefore have no app object we work with,

32
00:02:30,690 --> 00:02:36,320
instead we directly operate on that class and hence this will work

33
00:02:37,180 --> 00:02:38,360
but it's a different approach.

34
00:02:38,360 --> 00:02:47,570
Now the advantage can be seen if we now solve our cart problem. Remember that on this cart here,

35
00:02:47,650 --> 00:02:50,300
we got this add product method in the end,

36
00:02:50,470 --> 00:02:55,030
this accepts a product and then should update the rendered cart.

37
00:02:55,180 --> 00:03:04,610
Well what we can do now is for example on the shop which we initialize an app, we can store this reference

38
00:03:04,610 --> 00:03:06,830
to the cart object in a property,

39
00:03:06,830 --> 00:03:10,670
so this cart is equal to shopping cart.

40
00:03:10,670 --> 00:03:14,710
So now this is a property of shop, with this cart

41
00:03:14,710 --> 00:03:22,700
of course that means that here where I refer to cart, I also have to use this cart and the advantage of

42
00:03:22,700 --> 00:03:29,090
this is that we can now go to our app class here and in init, we get access to that shop right and that

43
00:03:29,090 --> 00:03:35,540
shop is in the end an object based on the shop class which holds this cart property, right?

44
00:03:35,540 --> 00:03:44,210
So here we can also add a cart property by referring to that cart property on shop, like that.

45
00:03:44,520 --> 00:03:47,360
Now if we save that and we reload,

46
00:03:47,360 --> 00:03:50,440
this should still work.

47
00:03:50,460 --> 00:03:53,070
Now why am I doing that though?

48
00:03:53,070 --> 00:04:02,690
Because now here in app, I can also add another static method, add item or add product to cart,

49
00:04:05,420 --> 00:04:15,590
expect my product here and now refer to this cart and call add product on that because this cart,

50
00:04:15,610 --> 00:04:19,620
don't forget, refers to an instance based on our shopping cart

51
00:04:19,660 --> 00:04:27,970
class and there we have that add product method and then call add product there and forward that product.

52
00:04:28,000 --> 00:04:34,840
So we kind of use this app class and the static method as a proxy because and that's the advantage and

53
00:04:34,840 --> 00:04:41,320
the whole idea of using these static methods, since we always operate on the class and not on instances,

54
00:04:41,710 --> 00:04:48,100
we don't work on different objects which we would do if we would not use static and instead create different

55
00:04:48,130 --> 00:04:49,890
apps in different places of the app

56
00:04:50,080 --> 00:04:57,510
but instead the app I'm using here to init my app, this class is the same I can now call from inside

57
00:04:57,520 --> 00:04:58,840
product item.

58
00:04:58,930 --> 00:05:08,020
So here in add to cart, we can get rid of that instead just call app add product to cart, this product,

59
00:05:08,740 --> 00:05:11,830
referring to the product stored in this product item.

60
00:05:11,830 --> 00:05:16,750
So here I am utilizing static methods and the fact that we're not working on objects based on classes

61
00:05:16,870 --> 00:05:23,980
but on the class itself to share some data, share the cart instance for example.

62
00:05:24,020 --> 00:05:26,500
Now of course that's not the only way of solving this,

63
00:05:26,510 --> 00:05:33,070
you would be able to find other approaches too but it's a nice case for static methods in this case.

64
00:05:33,260 --> 00:05:40,910
Now important here I'm calling add product to cart on app and I'm forwarding this product, referring to

65
00:05:41,540 --> 00:05:45,100
my product in product item. Now

66
00:05:45,100 --> 00:05:52,160
here however, we'll have a problem. If I save the code like this and reload and click add to cart, we'll get

67
00:05:52,160 --> 00:05:59,330
an error, cannot read property add product of undefined. So it can't find an add product method on cart

68
00:05:59,720 --> 00:06:05,710
because here, I'm trying to store cart which I get from shop cart before calling render,

69
00:06:05,810 --> 00:06:10,490
if you watch closely, you see that it's in render where I create the cart.

70
00:06:10,580 --> 00:06:12,450
So this won't work in this order,

71
00:06:12,470 --> 00:06:17,350
instead we have to swap that and first render and then we got access to the cart.

72
00:06:17,360 --> 00:06:23,690
So now if we save that and we reload, it will still not work because I made a mistake earlier as I recognized,

73
00:06:24,050 --> 00:06:26,770
here in shopping cart where I assign a new value,

74
00:06:26,780 --> 00:06:32,390
that of course shouldn't be total output equal, it should be innerHTML equal because I want to

75
00:06:32,450 --> 00:06:37,420
update the HTML content in there, not the value stored in total output.

76
00:06:37,590 --> 00:06:39,550
And with that, if we reload,

77
00:06:39,550 --> 00:06:41,960
now you see that changed to 1,

78
00:06:42,010 --> 00:06:47,170
still not the real value because we haven't added the logic for that yet but at least we see a change

79
00:06:47,410 --> 00:06:52,520
so that works and now we connect it to classes with the help of static methods.

80
00:06:52,570 --> 00:06:57,520
Now one side note, it's optional but still I would say it's a good practice,

81
00:06:57,520 --> 00:07:02,720
you can also add a static field here to the app class which is named cart

82
00:07:02,770 --> 00:07:06,600
so that we make it clear that we have these static cart property.

83
00:07:06,850 --> 00:07:13,450
We refer to it here with this cart and if you use this in a static method, it always refers to the

84
00:07:13,450 --> 00:07:22,090
class itself, doesn't try to refer to an object based on the class, so it adds a static property implicitly

85
00:07:22,210 --> 00:07:26,290
and accesses this static property and implicitly therefore

86
00:07:26,410 --> 00:07:33,460
but still this makes it clear hat we expect to have that static property, not needed technically but

87
00:07:33,460 --> 00:07:40,420
I think it improves readability and as a side effect, it also allows me to show you how a static method

88
00:07:40,420 --> 00:07:41,840
or property would look like.

89
00:07:41,890 --> 00:07:45,910
Of course you can also initialize this to some value if you need one,

90
00:07:45,940 --> 00:07:48,910
here we don't need that and therefore the code is good like this.
