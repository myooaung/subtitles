WEBVTT
1
00:00:02.800 --> 00:00:09.900
Now how can we let the player of our game choose that initialMaxLife here? For that,

2
00:00:09.910 --> 00:00:15.730
Javascript has a nice little built-in function, so the browser has a nice little built-in function I

3
00:00:15.730 --> 00:00:19.650
should say and in Javascript in the browser, you can therefore use that

4
00:00:19.870 --> 00:00:21.900
and that's the prompt function.

5
00:00:21.910 --> 00:00:25.060
It's a bit like alert which shows a message dialog,

6
00:00:25.060 --> 00:00:29.610
this also shows a dialog but it shows a dialog where the user may enter something.

7
00:00:29.650 --> 00:00:36.100
So here, first of all we have some text which is displayed to the user, for example maximum life for you

8
00:00:36.100 --> 00:00:39.150
and the monster, to tell the user what you should enter

9
00:00:40.320 --> 00:00:45.120
and then you also can define an initial value which should be a string,

10
00:00:45.150 --> 00:00:52.670
so for example 100. Now if you save that and you reload this page, you're presented with this prompt where

11
00:00:52.670 --> 00:00:55.700
you can enter a value, for example 70.

12
00:00:55.750 --> 00:01:01.520
Now if you hit okay, nothing happens right now because we're not doing anything with that entered value,

13
00:01:01.520 --> 00:01:05.600
the prompt function actually returns the value the user entered.

14
00:01:05.600 --> 00:01:15.170
So here I got my entered value constant which holds that value the user chose here. Now that will be a

15
00:01:15.170 --> 00:01:20.570
string, not a number, that's important but I want to have a number here to do my calculations correctly

16
00:01:20.870 --> 00:01:24.240
and not start concatenating strings or anything like that,

17
00:01:24.410 --> 00:01:28.220
so I want a number here and therefore we should convert this to a number.

18
00:01:28.220 --> 00:01:29.930
Of course you learned how that works,

19
00:01:29.930 --> 00:01:36.110
we can simply use parseInt, either wrap this right around this prompt function here which would work

20
00:01:36.440 --> 00:01:43.430
or for readability sake, do it right here on chosenMaxLife where I then use parseInt on my entered

21
00:01:43.580 --> 00:01:52.000
value, so the entered value here which is a string is forwarded to parseInt. Now of course, the user could

22
00:01:52.000 --> 00:01:57.140
have entered any kind of garbage here, for example a string which is not convertible to a number and

23
00:01:57.160 --> 00:02:01.900
therefore here we can add an if check and you can do that here as well, not just inside of functions

24
00:02:01.930 --> 00:02:10.950
but also directly in the script and check if the chosenMaxLife here is maybe not a valid number

25
00:02:11.050 --> 00:02:17.230
and for that, you can use another function built into Javascript and that's the isNan function

26
00:02:17.260 --> 00:02:22.390
which checks if that is not a number and parseInt will yield not a number,

27
00:02:22.390 --> 00:02:28.600
szo this special NAN type if you remember, if the value you pass to it, so entered value in this case

28
00:02:29.050 --> 00:02:35.170
is something that can't be converted to a number, then it will spit out NAN as a value which is then

29
00:02:35.170 --> 00:02:39.540
stored in chosenMaxLife and with isNan, we check if that's the case,

30
00:02:39.550 --> 00:02:42.450
so if chosenMaxLife happens to be not a number,

31
00:02:42.460 --> 00:02:49.330
so this NAN special value. If that's the case, I'll set chosenMaxLife to my default of 100

32
00:02:49.420 --> 00:02:54.670
so that we still have a working value for the game, we then don't use what the user entered because that

33
00:02:54.670 --> 00:02:55.810
was unusable,

34
00:02:55.810 --> 00:03:00.140
instead we use our default value here.

35
00:03:00.170 --> 00:03:07.520
I also want to step in if the user sets the life here to a negative value or to zero,

36
00:03:07.670 --> 00:03:14.000
so we'll add the or operator here and check if chosenMaxLife is smaller or equal than zero,

37
00:03:14.000 --> 00:03:19.790
that means that I also reset this to 100 if the user entered a too low life.

38
00:03:19.790 --> 00:03:26.330
Now one important note regarding the order of evaluation here, Javascript works such that it first checks

39
00:03:26.360 --> 00:03:33.350
this here if you have the or operator and if this yields true, since or wants one of the two values to yield

40
00:03:33.350 --> 00:03:38.960
true, to yield true overall, it doesn't even look at that second check here.

41
00:03:38.960 --> 00:03:44.600
So if we have chosenMaxLife which is not a number, it won't even try to do that comparison which is

42
00:03:44.600 --> 00:03:51.050
great because for this comparison, we need chosenMaxLife to be a number but it will not even try to

43
00:03:51.050 --> 00:03:53.870
do that if this already tells us that it is not a number

44
00:03:53.860 --> 00:03:55.040
so that's really good,

45
00:03:55.100 --> 00:04:01.520
it will stop for the or operator after the first sub condition that returned true.

46
00:04:01.880 --> 00:04:07.540
If you had and here, it would always look at both because obviously for and, both need to return true

47
00:04:07.670 --> 00:04:11.120
but for or, it stops after the first one that yielded true.

48
00:04:11.120 --> 00:04:16.790
So if we don't have a number with which we can work, it will not even try to do this check here.

49
00:04:17.090 --> 00:04:22.760
Now in either case, we set chosenMaxLife to 100 and therefore now we give the user a chance

50
00:04:22.790 --> 00:04:28.630
of initializing the values here. So if I save that and I reload,

51
00:04:28.930 --> 00:04:36.040
now we get that prompt and if I enter 80 here and I then inspect these health bars, you will see that indeed

52
00:04:36.040 --> 00:04:41.370
max and value is set to 80 here. If we now attack,

53
00:04:41.380 --> 00:04:50.680
you see this decreases to lower values and at some point, we won and then we can start another new game and

54
00:04:50.740 --> 00:04:53.370
we won again because I'm spamming the strong attack,

55
00:04:53.380 --> 00:04:58.900
obviously this game is not really balanced, by spamming strong attack you will very likely win every

56
00:04:58.900 --> 00:05:04.840
game but it's more about practicing if statements than building the next best amazing game which will

57
00:05:05.080 --> 00:05:09.450
win you tons of money, you will have to do that on your own unfortunately.

58
00:05:09.670 --> 00:05:15.830
So that works, if I reload and I set a different value like let's say 200, you see it takes 200

59
00:05:15.850 --> 00:05:19.150
as a value here and therefore of course, the game takes way longer,

60
00:05:19.150 --> 00:05:25.990
the health bars take way longer to shrink. If I reload again and I set this to 5, obviously

61
00:05:26.000 --> 00:05:27.970
then one hit is enough to win

62
00:05:28.240 --> 00:05:35.290
and if I set this to let's say -10 you set, we end up with 100 because then we overwrite the user

63
00:05:35.290 --> 00:05:39.190
choice because of the invalid values here.

64
00:05:39.190 --> 00:05:44.920
Now by the way if we press cancel here, we also go with the default values because that also doesn't

65
00:05:44.920 --> 00:05:47.220
yield us a valid number in the end.

66
00:05:47.230 --> 00:05:50.890
So with that, we got these basics down,

67
00:05:50.890 --> 00:05:55.890
now there are certainly more we can tweak and more we will do in this section, for example we're also

68
00:05:55.900 --> 00:06:00.980
not doing anything with the show log button because we're not writing a log at the moment

69
00:06:01.300 --> 00:06:07.610
but the basic game logic is implemented and we have a couple of examples for if checks,

70
00:06:07.630 --> 00:06:14.920
also with this special isNan function here and lots of combinations of conditions, lots of different

71
00:06:14.920 --> 00:06:15.490
checks.
