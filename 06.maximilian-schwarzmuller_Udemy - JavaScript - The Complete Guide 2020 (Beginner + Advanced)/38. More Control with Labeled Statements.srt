1
00:00:02,370 --> 00:00:07,260
Now there is one last feature related to break and continue which I will be honest

2
00:00:07,260 --> 00:00:14,460
you will very rarely need or use but I still want to show it to you because it's part of Javascript

3
00:00:14,490 --> 00:00:17,460
and you should learn it in this course of course

4
00:00:17,460 --> 00:00:24,550
and that's the so-called labeled statement. So let's say in this while loop but again, this works in any

5
00:00:24,550 --> 00:00:24,910
loop,

6
00:00:24,910 --> 00:00:31,590
we have a nested loop. So we are logging j here and then I have a for loop in there where I initialize

7
00:00:31,590 --> 00:00:34,610
let's say k to be zero,

8
00:00:34,860 --> 00:00:40,510
we could theoretically use i in here and it would create a new i detach from this i for this loop but

9
00:00:40,510 --> 00:00:45,720
to avoid naming confusion, I'll use k in here and k is maybe smaller than 5,

10
00:00:45,730 --> 00:00:51,550
that's our exit condition and we increment k and then I console log k here.

11
00:00:51,560 --> 00:00:55,390
So, so far that's nothing too fancy, we have a loop in a loop,

12
00:00:55,390 --> 00:01:02,650
if we now save that and we reload and we press log, maybe without doing anything before, we print 0, 1

13
00:01:02,650 --> 00:01:06,670
2, 3, 4 that's our nested loop in this outer loop.

14
00:01:06,670 --> 00:01:09,520
Now one tiny change, I'll set j to 0 here

15
00:01:09,580 --> 00:01:13,010
so that we run this outer loop more than once as well.

16
00:01:13,060 --> 00:01:17,410
So let me save that, reload, click show log and

17
00:01:17,970 --> 00:01:23,530
now we have a lot of output here and we get that zero here, maybe to make it clear what's coming from

18
00:01:23,530 --> 00:01:30,220
where, we can add outer as an identifier here and here, inner,

19
00:01:30,220 --> 00:01:36,160
so I'll console log two things, an identifier and then the actual value so that we can see which value is

20
00:01:36,160 --> 00:01:37,380
coming from where

21
00:01:37,480 --> 00:01:42,460
and now we see we have the outer zero and this inner loop completes and the outer loop moves onto the

22
00:01:42,460 --> 00:01:48,190
next iteration, its second iteration therefore we have a one there. We have a new inner loop starting at

23
00:01:48,190 --> 00:01:54,400
zero again all the way up to four, a new outer loop iteration, a new inner loop and so on.

24
00:01:54,400 --> 00:01:59,230
Now let's say you have some code and typically of course, you would not just be working with some numbers

25
00:01:59,230 --> 00:02:05,110
here but you have some application, some other logic where you have some condition in your inner loop

26
00:02:05,110 --> 00:02:08,030
that should actually finish the outer loop.

27
00:02:08,170 --> 00:02:15,580
So for example here we could say if k is equal to three, then that is a reason for us to stop the entire

28
00:02:15,580 --> 00:02:17,400
loop execution.

29
00:02:17,470 --> 00:02:18,960
Now of course, we can do that with break

30
00:02:18,970 --> 00:02:24,120
but what will actually happen here is that we just stop the inner loop because as I mentioned, break

31
00:02:24,130 --> 00:02:26,320
will stop the nearest loop

32
00:02:26,320 --> 00:02:28,980
so to say, the loop to which it belongs.

33
00:02:28,990 --> 00:02:36,880
So if I now reload here and we execute this code with show log, you see outer actually continues to

34
00:02:36,880 --> 00:02:44,290
work, we have outer 0 , outer 1 and outer 2 and just the inner loop always stops after two because

35
00:02:44,290 --> 00:02:49,440
we break after a value of three or when k reaches a value of three.

36
00:02:49,480 --> 00:02:52,280
Now what if we want to break the outer loop though?

37
00:02:52,780 --> 00:02:57,850
Well you can do that with a so-called labeled statement and that's really something as I said which

38
00:02:57,850 --> 00:03:00,790
you will rarely see and use in Javascript.

39
00:03:00,790 --> 00:03:07,450
You can assign a name to this loop and that again works on any loop, actually not just loops, you can

40
00:03:07,450 --> 00:03:11,500
assign it to any expression but it really only makes sense on loops.

41
00:03:11,500 --> 00:03:19,620
You could name this outer while, so any name of your choice and then you add a colon and then a whitespace

42
00:03:19,720 --> 00:03:23,820
and now this is a name for the loop in front of which you added this

43
00:03:24,010 --> 00:03:28,930
and you can add this as I said, in front of any expression but you typically do it in front of loops because

44
00:03:28,930 --> 00:03:34,260
there, you can use that because that is meant to be used with break and continue.

45
00:03:34,420 --> 00:03:40,610
You can also but you don't have to add this here in front of that four and maybe name it inner 4.

46
00:03:40,690 --> 00:03:47,350
And now here, you can use break like this to finish the inner loop but if you want to finish the outer

47
00:03:47,350 --> 00:03:53,620
loop, now you can say break and then pass the name of the label you assigned to your outer loop,

48
00:03:53,620 --> 00:04:00,700
so in this case outer while and now this allows you to break a different loop than you're currently

49
00:04:00,700 --> 00:04:01,900
in.

50
00:04:01,900 --> 00:04:11,350
So now if we do that here and I click show log, you see outer now actually finishes when inner reaches

51
00:04:11,350 --> 00:04:17,380
a value of three and we have no other outer logs and you can do this not just from inside loops but

52
00:04:17,380 --> 00:04:18,640
from anywhere in your code.

53
00:04:18,640 --> 00:04:23,530
So if you have an infinite loop running in one part of your code and then you have another part in your

54
00:04:23,530 --> 00:04:28,400
code where you kind of react to a button click and that should stop that infinite loop,

55
00:04:28,600 --> 00:04:33,370
well then you could also work with labeled statements and called break and one part of your code in

56
00:04:33,370 --> 00:04:39,720
your event listener to stop another loop where you assigned a label like this.

57
00:04:39,730 --> 00:04:44,600
So these are labeled statements and how you can use them and you can not just use that with break

58
00:04:44,710 --> 00:04:49,600
but if I comment this out, you can also use it with continue, works in exactly the same way, just with

59
00:04:49,600 --> 00:04:56,170
the continue functionality where we don't stop the loop but only the current execution and therefore here

60
00:04:56,620 --> 00:05:02,820
in this case, we just continue with our outer loop, though

61
00:05:02,830 --> 00:05:08,910
now I actually created an infinite loop here so you will need to close that browser window here in this

62
00:05:08,910 --> 00:05:16,230
place and I did create an infinite loop here because by continuing with the outer while, well we never

63
00:05:16,230 --> 00:05:18,660
reach this j++ code here,

64
00:05:18,780 --> 00:05:19,420
right?

65
00:05:19,500 --> 00:05:22,080
We execute this outer loop,

66
00:05:22,140 --> 00:05:27,570
then we start with this inner loop right away, there whenever we reach k which we always will at some

67
00:05:27,570 --> 00:05:29,790
point of time, we continue with the outer loop

68
00:05:30,060 --> 00:05:35,100
and therefore this j++ part which is important for our exit condition will never run,

69
00:05:35,130 --> 00:05:43,440
so this actually is dangerous because we create an infinite loop here as you just saw.

70
00:05:43,440 --> 00:05:48,870
So you should always watch out what you're doing with continue if you accidentally maybe create an infinite

71
00:05:48,870 --> 00:05:50,850
loop which you probably don't want to do.

72
00:05:52,350 --> 00:05:53,640
So that's one thing,

73
00:05:53,700 --> 00:05:58,830
the key thing here are the labeled statements, though the labels you assign here to your loops which you

74
00:05:58,830 --> 00:06:02,230
can then use with break and continue, again nice to know,

75
00:06:02,370 --> 00:06:09,030
nice to understand if you encounter it in some examples or in an interview but really a feature which

76
00:06:09,030 --> 00:06:13,800
you will rarely need as you will see as you work with Javascript.

77
00:06:13,800 --> 00:06:15,500
This is something that comes with experience

78
00:06:15,510 --> 00:06:20,790
but there you will see that you really don't have a lot of occasions where you would need this. Still,

79
00:06:20,790 --> 00:06:22,130
since it's a part of the language,

80
00:06:22,140 --> 00:06:23,670
I didn't want to hide it from you.
