WEBVTT
1
00:00:02.290 --> 00:00:09.580
Understanding the time complexities and how you can derive time complexities is super important and

2
00:00:09.580 --> 00:00:11.800
it definitely takes some practice.

3
00:00:11.830 --> 00:00:16.930
So if you're not fully on board yet and if you're not sure you can do this for every algorithm you write

4
00:00:16.930 --> 00:00:21.640
on your own that's fine we'll also see our examples in this module.

5
00:00:21.640 --> 00:00:26.680
I want to come back to one important thing here though and that is that we of course can also have a

6
00:00:26.680 --> 00:00:28.780
look at different cases.

7
00:00:28.780 --> 00:00:35.050
When we arrived execution time or the number of operations that are performed let's take this Gedmin

8
00:00:35.050 --> 00:00:40.600
function here for example I mentioned that this year Indiana has a constant execution time and so does

9
00:00:40.600 --> 00:00:46.370
the return statement and this loop here is N minus one or four large ends.

10
00:00:46.390 --> 00:00:48.940
So for large arrays we get here.

11
00:00:49.000 --> 00:00:55.840
It's actually just and we could say now of course we also have different cases we can look at though.

12
00:00:55.930 --> 00:01:01.540
For example here we could say we have a best case which is that we get an array with just one element

13
00:01:01.630 --> 00:01:03.640
or with no element at all.

14
00:01:03.640 --> 00:01:09.040
In this case we have only one operation that is executed ever does if statement if it's an empty array

15
00:01:09.070 --> 00:01:15.970
and we get this error or is simply this line and this line so two lines that are executed but they each

16
00:01:15.970 --> 00:01:22.390
run only once and hence we don't make it into this loop at all this loop would not execute at all if

17
00:01:22.390 --> 00:01:24.100
we have just one element.

18
00:01:24.160 --> 00:01:29.350
So that's the best case here we could say we actually have not 0.

19
00:01:29.560 --> 00:01:37.750
And so we don't have linear time but 0 1 something which is called constant time constant time because

20
00:01:37.780 --> 00:01:43.990
our function and the code in there will only execute once there is not a single line in that entire

21
00:01:43.990 --> 00:01:51.370
function which would execute more than once for such an array of course we have multiple lines that

22
00:01:51.370 --> 00:01:57.190
are running we have this line and this line and this if check which executes but they each run only

23
00:01:57.190 --> 00:01:59.050
once not multiple times.

24
00:01:59.110 --> 00:02:03.070
So that would be our best case our worst case.

25
00:02:03.070 --> 00:02:09.120
On the other hand would be that we have an array with at least two elements like 3 and one.

26
00:02:09.220 --> 00:02:11.890
And of course the longer it is the longer it takes.

27
00:02:11.890 --> 00:02:18.030
But this is the case already where all our code in the end executes at least once.

28
00:02:18.040 --> 00:02:26.380
So this is a case where we end up with 0 and in the end no matter if we have two elements or a million

29
00:02:26.380 --> 00:02:31.630
elements we need to touch every code and this four loop will also run at least once.

30
00:02:31.630 --> 00:02:38.700
It will basically run as often as we have elements in our array we can always have a look at the cases

31
00:02:38.700 --> 00:02:41.370
in our second function here.

32
00:02:41.430 --> 00:02:48.040
They're our best case would be that we have an ordered array so that we get something like this.

33
00:02:48.060 --> 00:02:51.030
We would still execute both loops in here.

34
00:02:51.120 --> 00:02:58.530
So we still in the end end up with quadratic time but at least this if statement in here does not execute

35
00:02:58.560 --> 00:02:59.270
a single time.

36
00:02:59.270 --> 00:03:01.610
So these lines will never execute.

37
00:03:01.710 --> 00:03:07.920
If the array we get is already ordered so we would have quadratic time nonetheless.

38
00:03:07.920 --> 00:03:14.760
But if we have a look at the entire code in detail it's a bit better than our worst case where all the

39
00:03:14.760 --> 00:03:22.080
code and the if statement is executed because here our worst case is that we have an array that is sorted

40
00:03:22.080 --> 00:03:23.580
in the other direction.

41
00:03:23.610 --> 00:03:28.570
That means we execute this code in the if statement as often as possible.

42
00:03:28.650 --> 00:03:36.150
If we have a look at a large quantity of items we still end up with quadratic time though because the

43
00:03:36.300 --> 00:03:41.570
worst part is that the for loops run all the time and that's the case no matter how it is ordered.

44
00:03:41.730 --> 00:03:47.790
But we run even a bit more code than in the best case we don't see it here in the Big O notation because

45
00:03:47.790 --> 00:03:50.270
we don't care about these constant parts.

46
00:03:50.610 --> 00:03:53.690
But still it is a bit worse than the best case.

47
00:03:53.850 --> 00:03:55.810
But what I just said is important.

48
00:03:55.920 --> 00:04:00.540
We don't care about the small details like this code in the if statement.

49
00:04:00.540 --> 00:04:05.730
We care about the big things and that mainly means about loops in our code.

50
00:04:05.760 --> 00:04:09.540
We care about the average case.

51
00:04:09.550 --> 00:04:14.160
You could say and that of course is the case where we simply don't know what we're getting where the

52
00:04:14.160 --> 00:04:19.860
input is not known in advance because that is the standard case we have to care about.

53
00:04:19.860 --> 00:04:22.780
Typically we don't know which input we get.

54
00:04:22.970 --> 00:04:29.500
And in that average case this code in here might maybe run two or three or five times or not at all.

55
00:04:29.520 --> 00:04:30.860
We don't know.

56
00:04:31.020 --> 00:04:37.230
That's why does average case matters for us where we actually have the Big O notation and where we ignore

57
00:04:37.230 --> 00:04:44.280
these constant factors but instead where we count the big chunks like the for loops here which run over

58
00:04:44.280 --> 00:04:45.690
and over again.

59
00:04:45.720 --> 00:04:51.540
So it's always the average case that matters for us not the worst case where we have basically the average

60
00:04:51.540 --> 00:04:58.260
case plus some extra executions of the if statement or the best case where we have the average case

61
00:04:58.260 --> 00:05:04.890
minus some extra executions we don't care about that because we can't anticipate it any ways we care

62
00:05:05.010 --> 00:05:10.060
about the average case here and the average case really is about the big chunks.

63
00:05:10.110 --> 00:05:16.170
So the big four lose for example and not some if statements where we simply don't know whether they

64
00:05:16.170 --> 00:05:17.450
will execute or not.

65
00:05:17.490 --> 00:05:21.030
So we don't count this in we care about the average case.
