WEBVTT
1
00:00:02.130 --> 00:00:09.690
Now I think a great place to work with the loops is at the bottom of the app.js file, our nice little

2
00:00:09.690 --> 00:00:10.930
printLogHandler.

3
00:00:10.950 --> 00:00:14.370
Right now here, I print the entire array like this

4
00:00:14.370 --> 00:00:19.200
which means that we get output like this which is not super readable. With the loops,

5
00:00:19.200 --> 00:00:25.860
we can actually improve that because now we can loop for example through all entries in the battle log

6
00:00:25.890 --> 00:00:30.570
and output something nicer there but I'll actually start with another loop and that's the normal

7
00:00:30.570 --> 00:00:31.450
for loop.

8
00:00:31.500 --> 00:00:37.050
I say normal because that's the oldest for loop and that also is a syntax you find in pretty much

9
00:00:37.170 --> 00:00:39.160
any other programming language,

10
00:00:39.240 --> 00:00:46.140
not necessarily the case for for/of and for/in but for like this and the while loop, you will find that in

11
00:00:46.410 --> 00:00:54.320
99% of all programming languages you can learn. So for loop is created with the for keyword,

12
00:00:54.350 --> 00:00:59.930
then with parentheses and then you have these three parts in there. The first part is a part where you

13
00:01:00.020 --> 00:01:03.060
initialize things for the loop.

14
00:01:03.170 --> 00:01:09.830
You could run a lot of different code here, basically any expression, so anything but an if statement or

15
00:01:09.890 --> 00:01:15.620
another loop can be executed here, you could call a function in here but typically what you do here

16
00:01:15.860 --> 00:01:21.350
is you initialize a variable, you could initialize multiple variables but in most loops, you'll need one

17
00:01:21.650 --> 00:01:27.140
and that's that helper variable which you change after every iteration to execute code.

18
00:01:27.710 --> 00:01:31.820
So here I'll go with the classic example of initializing i to be zero,

19
00:01:32.030 --> 00:01:37.400
by the way that should be a variable created with let because it will change in every loop iteration

20
00:01:37.400 --> 00:01:39.410
so therefore it's a variable, not a constant,

21
00:01:42.200 --> 00:01:47.990
then you have your exit condition which is evaluated before every loop iteration and there we could

22
00:01:47.990 --> 00:01:54.440
use that example from the slide with i smaller than three which means the loop body will only run

23
00:01:54.470 --> 00:01:56.230
if i is smaller than three

24
00:01:56.240 --> 00:02:02.390
which of course is the case initially since i is 0 and then separated by another semicolon, you have the

25
00:02:02.390 --> 00:02:08.570
code which you want to execute after every code execution, there you can do whatever you want.

26
00:02:08.570 --> 00:02:13.040
You could also omit this by just having a semicolon and nothing thereafter,

27
00:02:13.040 --> 00:02:16.440
side note you can omit every statement here,

28
00:02:16.460 --> 00:02:18.040
then you would create an infinite loop,

29
00:02:18.050 --> 00:02:20.200
you need the two semicolons here though,

30
00:02:20.330 --> 00:02:25.270
now you would have a loop that runs infinitely which is something you should be careful about because

31
00:02:25.270 --> 00:02:32.450
that can crash your browser since it clutters up memory and takes away all resources but you could do

32
00:02:32.450 --> 00:02:35.080
that, in some rare cases you might need that. Here

33
00:02:35.160 --> 00:02:41.180
I don't want that so I will stick to the old syntax and I will also provide a third part here and that's

34
00:02:41.180 --> 00:02:46.550
my code that runs after every loop iteration and there I will increment i by 1.

35
00:02:46.610 --> 00:02:52.970
Again here, you could do different things, you could also say i, i + 2 or i - 3, so you don't

36
00:02:52.970 --> 00:02:58.310
have to increment it but that's the most common use case, that you have a counter which you increment

37
00:02:58.310 --> 00:03:04.520
by 1 and you have some exit condition. You can of course also use values here which are dynamic, for example

38
00:03:04.520 --> 00:03:12.140
here you could use battleLog.length, the length property is available by default on arrays and this

39
00:03:12.140 --> 00:03:17.270
gives you the amount of items in the array and this is actually a quite common way of going through all

40
00:03:17.270 --> 00:03:18.270
items in the array

41
00:03:18.290 --> 00:03:24.410
if you don't want to use the for/of loop which is a bit shorter but if you don't want to use it because

42
00:03:24.410 --> 00:03:27.050
you have to support very old browsers for example

43
00:03:27.080 --> 00:03:32.750
but more on that in the browser support module later in the course, but then you could use this and dynamically

44
00:03:32.750 --> 00:03:38.780
derive the length here and therefore go through all elements in the array by simply having a loop that

45
00:03:38.780 --> 00:03:41.990
runs as long as you have items in the array.

46
00:03:42.140 --> 00:03:44.530
So that's just a side note, here I'll hardcode three

47
00:03:44.720 --> 00:03:54.460
and then for now just console log let's say a couple of dashes here, so that essentially we should print

48
00:03:54.460 --> 00:04:01.640
three lines of these dashes here when we run print log. So let's save that,

49
00:04:01.650 --> 00:04:03.680
go back to the browser and reload,

50
00:04:03.990 --> 00:04:09.530
maybe perform one action and then click show log and indeed you see three lines.

51
00:04:09.530 --> 00:04:16.250
You don't really see three lines here because my browser, the browser developer tools automatically combine

52
00:04:16.310 --> 00:04:18.860
similar outputs but you see the three here

53
00:04:18.860 --> 00:04:24.470
which means it would have printed that three times, it just did merge it together into one output to save

54
00:04:24.470 --> 00:04:28.110
some space here but it printed that three times.

55
00:04:28.130 --> 00:04:33.290
Now you might wonder why three times when we only execute this code as long as i is smaller than

56
00:04:33.290 --> 00:04:34.180
three.

57
00:04:34.190 --> 00:04:37.130
Well keep in mind that we initialize it to be zero,

58
00:04:37.160 --> 00:04:40.090
then we check this, then this code runs,

59
00:04:40.220 --> 00:04:41.820
then we increment it to 1.

60
00:04:41.840 --> 00:04:43.700
So we printed this once thus far,

61
00:04:43.700 --> 00:04:46.760
now i is one, still smaller than three,

62
00:04:46.760 --> 00:04:49.430
so we print this again we increment i to 2,

63
00:04:49.550 --> 00:04:51.690
so now we printed this two times.

64
00:04:51.770 --> 00:04:54.590
Now i is two, still smaller than three

65
00:04:54.590 --> 00:04:57.410
so this condition gets checked and is true

66
00:04:57.410 --> 00:04:59.390
so now we print this a third time,

67
00:04:59.390 --> 00:05:01.850
now thereafter we increment this to three.

68
00:05:01.970 --> 00:05:05.840
Now for the next iteration, this gets checked at the beginning as always,

69
00:05:05.900 --> 00:05:09.380
i now is three, is no longer smaller than three

70
00:05:09.380 --> 00:05:15.590
therefore we exit out of the loop but until this point, we printed this three times which is why we see

71
00:05:15.740 --> 00:05:17.600
the three here.

72
00:05:17.600 --> 00:05:19.880
So that's the normal for loop.

73
00:05:19.880 --> 00:05:23.980
Now as I said, you can configure this in a broad variety of different ways,

74
00:05:23.990 --> 00:05:30.200
for example you could also have a for loop where you start with i being equal to 10 and you want to

75
00:05:30.200 --> 00:05:36.050
go as long as i is greater than zero and then you decrement i for every iteration and then maybe here

76
00:05:36.050 --> 00:05:37.580
we console log i.

77
00:05:37.790 --> 00:05:41.400
You could do that too, you have a backward counting counter now.

78
00:05:41.660 --> 00:05:49.080
If you do that and you click show log, we see 10 9 8 and so on all the way up to 1,

79
00:05:49.130 --> 00:05:53.860
we don't see 0 here because our exit condition is that i should be greater than 0,

80
00:05:53.870 --> 00:05:54.590
so for i

81
00:05:54.590 --> 00:05:55.520
equal to zero,

82
00:05:55.520 --> 00:05:56.770
this will never run

83
00:05:56.990 --> 00:06:01.820
but this is also something you can do and it really depends on which app you're writing and which use

84
00:06:01.820 --> 00:06:04.970
case you're having, which kind of for loop you want.

85
00:06:04.970 --> 00:06:11.060
This by far is the most common scenario, that you start at zero, that you increment and that you then

86
00:06:11.060 --> 00:06:14.160
have a hardcoded or dynamic exit condition here,

87
00:06:14.180 --> 00:06:18.590
so either hardcoded like this or dynamic with something like battleLog.length,

88
00:06:18.980 --> 00:06:24.590
so this is also quite common, to have an array length here as an exit condition but theoretically you

89
00:06:24.590 --> 00:06:30.020
can initialize i to whatever you want, have whatever condition you want to have here, of course also

90
00:06:30.020 --> 00:06:36.200
combined conditions are possible and you can also adjust i or whatever you want to do here in whichever

91
00:06:36.200 --> 00:06:37.220
way you want.

92
00:06:37.220 --> 00:06:38.780
You also don't have to adjust

93
00:06:38.780 --> 00:06:45.470
i here, you could leave this empty as I mentioned and instead, adjust i in here, that would also be possible.

94
00:06:45.710 --> 00:06:48.280
You could do that for example if you want to adjust i

95
00:06:48.290 --> 00:06:54.310
before you do something with it because normally, this part here after the last semicolon runs after

96
00:06:54.320 --> 00:06:55.360
your code here,

97
00:06:55.370 --> 00:07:01.460
so after your loop body. If you want to do the adjustment before that runs, you can omit that last part

98
00:07:01.580 --> 00:07:08.390
and manually adjust like this and now you will see if I reload here and I cancel and click log,

99
00:07:08.420 --> 00:07:17.510
now we count down from nine to zero instead of 10 to 1 because now we increment i before we print that.

100
00:07:17.600 --> 00:07:18.950
So that's all possible,

101
00:07:18.950 --> 00:07:20.650
you have a lot of flexibility there

102
00:07:20.660 --> 00:07:24.130
and I can only encourage you to play around with that. For now

103
00:07:24.140 --> 00:07:30.010
I'll leave it at that because we could spend hours just trying out different combinations here

104
00:07:30.040 --> 00:07:32.890
but that being said, this is the most common scenario

105
00:07:33.310 --> 00:07:35.960
and instead, let's move on to the for/of loop now.
