1
00:00:02,530 --> 00:00:09,610
So now in this module you had an introduction to Data Structures and Algorithms queue time complexities

2
00:00:09,640 --> 00:00:12,940
and also saw some example algorithms in action.

3
00:00:13,000 --> 00:00:18,280
There is a great GitHub repository besides that article I mentioned earlier which I would recommend

4
00:00:18,400 --> 00:00:20,430
as a source to dive in deeper.

5
00:00:20,470 --> 00:00:24,620
You of course all defined this linked in the last lecture of this module.

6
00:00:24,670 --> 00:00:30,460
This is a repository where you see a bunch of data structures you could build on your own as well as

7
00:00:30,460 --> 00:00:37,180
a bunch of algorithms including a little hint Weber there for beginners or advanced users that you could

8
00:00:37,180 --> 00:00:39,670
implement with JavaScript.

9
00:00:39,670 --> 00:00:46,390
You see a bunch of different examples here and this is a great place for practicing algorithms and for

10
00:00:46,390 --> 00:00:54,060
all of course practicing for interviews you'll find some algorithms here which we also saw in this module.

11
00:00:54,070 --> 00:01:01,770
But of course as you can tell there are way more you can dive in now for every algorithm like the knapsack

12
00:01:01,770 --> 00:01:07,630
problem you can dive into get an explanation of the problem and what you're trying to solve then.

13
00:01:07,830 --> 00:01:10,500
Mathematical pseudocode explanation.

14
00:01:10,500 --> 00:01:15,810
And then you also find JavaScript files where the concrete algorithm is implemented.

15
00:01:15,960 --> 00:01:20,250
So where you can see what you do to solve this problem.

16
00:01:20,280 --> 00:01:24,030
Now this year by the way is a robber complex one which is why it's a lot of code.

17
00:01:24,120 --> 00:01:30,990
There of course also are easier ones in there which you also can use to practice javascript and algorithms.

18
00:01:31,020 --> 00:01:36,360
Now what you don't see in here at the moment is the Big O notation of an algorithm.

19
00:01:36,360 --> 00:01:42,330
But that is of course something you can derive on your own with the knowledge you gained here and with

20
00:01:42,330 --> 00:01:45,170
help of the extra other article I mentioned.

21
00:01:45,390 --> 00:01:52,020
And in general if you're not sure about the time complexity of something and you want to validate your

22
00:01:52,020 --> 00:01:58,710
result you can always search for something like Javascript and then the algorithm name time complexity

23
00:01:59,160 --> 00:02:05,730
and you should find discussions and articles that help you understand this algorithm and also its time

24
00:02:05,730 --> 00:02:07,020
complexity.

25
00:02:07,170 --> 00:02:09,420
So that is something you can also check out.

26
00:02:09,420 --> 00:02:11,670
For example here on Stack Overflow.

27
00:02:11,670 --> 00:02:17,530
To learn about your opinions of other people what they write about it and what the time complexity offers.

28
00:02:17,550 --> 00:02:24,960
Algorithms should be in this case for example time complexity and times logarithm of n now for interviews.

29
00:02:24,990 --> 00:02:30,630
It's important that you don't try to learn all these algorithms here by heart but that you really just

30
00:02:30,630 --> 00:02:36,720
learn how to think about algorithms and how to come up with them so that you get into this problem solving

31
00:02:36,720 --> 00:02:42,570
thinking and you simply can combine the different skills you gathered for all this course and with the

32
00:02:42,570 --> 00:02:47,250
help of other resources as well to solve problems that might be thrown at you.

33
00:02:47,250 --> 00:02:52,500
In interviews it's also rarely important to get the right result.

34
00:02:52,500 --> 00:02:58,500
Instead interviewers want to see how you approach to problem how you think about is that you know what

35
00:02:58,500 --> 00:03:01,310
Big O notation is and how to derive it.

36
00:03:01,380 --> 00:03:07,350
And even if you then make a mistake people can still see that your way of thinking is correct and data

37
00:03:07,350 --> 00:03:09,060
is what matters here and yet.

38
00:03:09,060 --> 00:03:15,480
So if these sources and what you learned in this module you should now be well prepared to dive deeper

39
00:03:15,480 --> 00:03:20,540
into algorithms and data structures and ace your next job interview Sten.
