1
00:00:02,180 --> 00:00:09,080
So that was a lot about precision and numbers but it's important to understand it. In modern versions

2
00:00:09,080 --> 00:00:10,070
of Javascript,

3
00:00:10,100 --> 00:00:14,310
there actually also is an alternative to the normal number

4
00:00:14,330 --> 00:00:18,200
we worked with all the time and that's a big integer.

5
00:00:18,200 --> 00:00:26,240
Now the big integer type is a primitive value and its goal is to allow you represent numbers that are

6
00:00:26,270 --> 00:00:29,630
above the maximum safe integer

7
00:00:29,640 --> 00:00:32,270
we learned about, so a number bigger than that.

8
00:00:32,480 --> 00:00:39,200
If you for example wanted to represent a number bigger than that by adding extra nine at the end, you

9
00:00:39,200 --> 00:00:44,720
would see what I explained before, we get a totally different number because Javascript only works with

10
00:00:44,720 --> 00:00:50,450
64 bits and we would exceed that and therefore Javascript cuts the number at a certain point and

11
00:00:50,450 --> 00:00:52,160
shows a different number.

12
00:00:52,250 --> 00:00:54,240
Now a big int can help us with that,

13
00:00:54,260 --> 00:00:58,910
you create a big int by simply adding a n after your number

14
00:00:59,180 --> 00:01:03,530
and now you see, this looks a bit different here in the console because it's a different type,

15
00:01:03,560 --> 00:01:12,830
this keeps its precision, its value and we can represent arbitrarily big numbers with that because internally,

16
00:01:12,860 --> 00:01:18,650
this is managed differently, not as a 64 bit floating point number but instead in the end as a string

17
00:01:18,680 --> 00:01:24,390
and Javascript does all the heavy lifting of converting this around when you use it in calculations

18
00:01:24,390 --> 00:01:25,250
and so on.

19
00:01:25,760 --> 00:01:32,120
So the big int can be useful if you're working with very large numbers, of course not just positive ones

20
00:01:32,300 --> 00:01:33,880
but also negative ones.

21
00:01:33,930 --> 00:01:41,690
Now be aware that there is no floating point calculation there, that there are no supported decimal places,

22
00:01:41,690 --> 00:01:44,350
you see I'm getting an error if I try to add a decimal place,

23
00:01:44,420 --> 00:01:48,520
it's called big int because it's only about integers and it's the perfect type

24
00:01:48,530 --> 00:01:54,080
if you are working with very large integers. Of course you can always represent smaller numbers with

25
00:01:54,080 --> 00:01:54,620
that,

26
00:01:54,650 --> 00:01:59,570
the question is if this makes a lot of sense and then you can also perform typical calculations with

27
00:01:59,570 --> 00:02:07,280
it, just important, you can't mix big int and other numbers, for example 10n and -4, where 10n is a big

28
00:02:07,280 --> 00:02:10,700
int but 4 is a normal number would yield an error,

29
00:02:10,700 --> 00:02:16,430
you see you cannot mix big int and other types, use explicit conversions so you would have to convert this

30
00:02:16,430 --> 00:02:23,150
to a big integer or this to a normal number before mixing it. You can convert it to a normal number with

31
00:02:23,150 --> 00:02:32,630
parseInt for example, that would work or by converting four to a big integer by wrapping it with that

32
00:02:32,640 --> 00:02:37,740
big int function call here, not new big int but just big int like this,

33
00:02:37,740 --> 00:02:42,690
this is how you can convert numbers back and forth and this is how you then can work with them and how

34
00:02:42,690 --> 00:02:48,130
you can run various calculations. Of course conversion is only needed if you want to mix types,

35
00:02:48,240 --> 00:02:52,800
if you have a big integer and you want to multiply it with another big integer, you don't have to

36
00:02:52,800 --> 00:02:56,430
convert anything, you can just run this calculation like that.

37
00:02:56,460 --> 00:03:03,350
One important note, if you divide a big int, since decimal places can't be represented there,

38
00:03:03,540 --> 00:03:09,420
Javascript will actually omit them and we don't see it here because this can be divided with a perfect

39
00:03:09,420 --> 00:03:11,300
result without decimal places

40
00:03:11,430 --> 00:03:17,730
but if we have 5n divided by 2n, then you see we're not getting 2.5n because this does not exist

41
00:03:18,030 --> 00:03:18,760
as you see,

42
00:03:18,840 --> 00:03:25,000
instead we get 2n because Javascript simply cuts off the decimal place that would otherwise be added.

43
00:03:25,230 --> 00:03:32,670
So that's a big integer, not the type you'll use every day but can be useful if you have very large numbers

44
00:03:32,730 --> 00:03:34,020
with which you need to work.
