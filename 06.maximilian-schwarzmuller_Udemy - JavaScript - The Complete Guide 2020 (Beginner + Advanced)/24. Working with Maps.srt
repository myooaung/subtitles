1
00:00:02,330 --> 00:00:03,560
So we had to look at sets,

2
00:00:03,560 --> 00:00:09,830
let's have a look at maps then. Let's say we have a person here,

3
00:00:09,830 --> 00:00:18,040
person1 which has a name of Max maybe and another person, person2 with a name of Manuel.

4
00:00:18,040 --> 00:00:20,830
Now these are not maps, these are normal objects.

5
00:00:20,830 --> 00:00:26,800
Now a use case where you could use a map is that you want to attach some extra information to each person

6
00:00:26,800 --> 00:00:31,990
here but you don't really want to merge it into this object because you use this object in multiple places

7
00:00:31,990 --> 00:00:33,240
of the application,

8
00:00:33,310 --> 00:00:38,650
maybe you even copy it and you don't want to bloat it with this extra information and you also want to

9
00:00:38,650 --> 00:00:43,780
make sure that in other parts of the app where you work with this object, you have a lean object to work

10
00:00:43,780 --> 00:00:48,190
with without too many properties where you have to guess which one you need

11
00:00:48,190 --> 00:00:53,440
in this case here and instead some extra information which you might need in another part of your application

12
00:00:53,860 --> 00:01:00,850
could be managed in such a map. So we could create a constant or a variable, person data and you now create

13
00:01:00,850 --> 00:01:03,940
a new map with the new keyword and then map,

14
00:01:03,940 --> 00:01:06,420
so just like set but with map.

15
00:01:06,610 --> 00:01:12,850
Now this map constructor here can be initialized with an array of arrays and it's an array of array because

16
00:01:12,910 --> 00:01:16,360
each array in that array is one key-value pair.

17
00:01:16,360 --> 00:01:23,500
So here you could have key and then some value and the key can be of any kind,

18
00:01:23,500 --> 00:01:28,420
doesn't have to be a string, can be a number, can be another object and values can also be of any

19
00:01:28,420 --> 00:01:29,320
kind.

20
00:01:29,320 --> 00:01:32,940
So here for example we could initialize this map with one entry,

21
00:01:32,950 --> 00:01:37,590
so with one nested array here where the key could be person1,

22
00:01:37,750 --> 00:01:43,360
so the object itself, the address of that object but therefore it is the object itself which is used

23
00:01:43,360 --> 00:01:49,060
as a key here and the value could now be the additional information which you want to store for that

24
00:01:49,060 --> 00:01:52,010
person which you don't want to merge into that person.

25
00:01:52,030 --> 00:01:58,090
So let's say another array here which holds information about purchases this person made,

26
00:01:58,090 --> 00:02:04,030
so it might be an array of objects even where you have a date, yesterday might not be the most usable

27
00:02:04,030 --> 00:02:07,840
date but it will do here and then price, 10.

28
00:02:08,080 --> 00:02:09,810
So quite a lot of nesting going on here,

29
00:02:09,820 --> 00:02:14,890
we have one array overall with a nested array in there which is one key-value pair we want to add to

30
00:02:14,890 --> 00:02:20,350
this map where we have a key and where the value is then simply another array here, doesn't have to

31
00:02:20,350 --> 00:02:21,000
be an array,

32
00:02:21,040 --> 00:02:26,440
as I mentioned, you could have anything as a value here - an array, an object, a number, whatever you want.

33
00:02:26,440 --> 00:02:33,500
Now if you create it like this and we then console log person data here to have a look at it, let's see

34
00:02:33,500 --> 00:02:34,440
what we get.

35
00:02:34,490 --> 00:02:40,290
Let's save that and let's reload and you see we get a map here which looks a bit strange but if we drill

36
00:02:40,290 --> 00:02:46,920
down, we in the end find this entry here where we see we have an object as a key and an array as a value

37
00:02:46,920 --> 00:02:53,610
and if we expand it, we see the key is this object and the value here is in the end an array with one

38
00:02:53,610 --> 00:02:56,550
object which in turn has a date, key and this price,

39
00:02:56,550 --> 00:02:58,970
so this is what I created.

40
00:02:59,010 --> 00:03:04,890
Now the idea again is that you can have any key and for example the advantage here is that we can

41
00:03:04,890 --> 00:03:08,780
use an object as a key and attach extra information to it.

42
00:03:08,790 --> 00:03:12,750
Now this extra information is not merged into the object or anything like that,

43
00:03:12,810 --> 00:03:14,340
it's stored in the map instead

44
00:03:14,430 --> 00:03:19,890
but we can use that map in the part of the application where we need that extra information and have

45
00:03:19,890 --> 00:03:27,210
that tight connection to this object and since we use that exact same address, we can also easily extract

46
00:03:27,240 --> 00:03:33,240
data from that map as I can show you here by simply using person data,

47
00:03:33,240 --> 00:03:42,620
so my map here and then here, you can call get, to get a value by key and just enter this object and

48
00:03:42,620 --> 00:03:45,110
it's the same object since I add this object,

49
00:03:45,110 --> 00:03:49,130
so the exact same address here as a key which I use here to retrieve it,

50
00:03:49,340 --> 00:03:55,520
this behind the scenes uses an equality comparison and works because it is the exact same object, not a

51
00:03:55,520 --> 00:03:59,900
copy or anything like that, the same pointer at the same object.

52
00:03:59,900 --> 00:04:05,960
So this can save you the hassle of having to for example add an ID to every object so that you can

53
00:04:05,960 --> 00:04:12,140
use the ID which might be a string in a regular object as a key and then extract a value by the

54
00:04:12,140 --> 00:04:18,740
ID of another object from that yet another object where you stored the extra information. With a map

55
00:04:18,950 --> 00:04:24,410
where you stored the extra information, the object itself can be the key and therefore you don't have

56
00:04:24,410 --> 00:04:30,890
to add any ID or extract that or create arbitrary string keys, instead you can use the object as a

57
00:04:30,890 --> 00:04:37,910
key and retrieve values by just using that object as a key and hence if you save that and you reload

58
00:04:37,910 --> 00:04:41,060
here, you indeed get this object output there,

59
00:04:41,060 --> 00:04:43,640
so this works just fine.

60
00:04:43,640 --> 00:04:48,410
So this is by the way how you get data from a map, of course you can also add data to a map after it

61
00:04:48,410 --> 00:04:55,610
has been created and you do this with the set method. There you set a key-value pair,

62
00:04:55,640 --> 00:04:59,930
so the first argument here has to be a key which again can be of any value,

63
00:04:59,930 --> 00:05:06,620
you can also have mixed key types in the same map, so you can have a map where one key is an object and

64
00:05:06,630 --> 00:05:07,820
another key is a string

65
00:05:08,240 --> 00:05:12,620
but here I'll actually use person2 as a key and then the value for that person,

66
00:05:12,650 --> 00:05:18,500
well in my case here it'll again be an array where you might have your purchase objects in there, date

67
00:05:19,040 --> 00:05:20,630
two weeks ago,

68
00:05:23,230 --> 00:05:25,150
price 100,

69
00:05:25,240 --> 00:05:25,920
just like that.

70
00:05:25,930 --> 00:05:28,280
So that's just a dummy example here of course.

71
00:05:28,330 --> 00:05:34,720
but now we also got that other person stored in that map and hence if I reload and we have a look at

72
00:05:34,720 --> 00:05:40,360
this map here, we see we got two entries in there with our two different objects as keys.

73
00:05:40,450 --> 00:05:46,980
So a map is really versatile regarding the keys and it can therefore be great for use cases like this.

74
00:05:46,990 --> 00:05:54,160
Now you can also output all information in a map in three different ways, always using a for/of loop.

75
00:05:54,160 --> 00:06:01,270
So for one, we can loop through all the entries with for const of entry or any name of your choice of

76
00:06:01,270 --> 00:06:07,480
course, where you then access person data.entries which is a method, you might remember that from the set,

77
00:06:07,870 --> 00:06:08,350
there

78
00:06:08,350 --> 00:06:14,110
we also had this entries method which returned this strange array with the same value twice.

79
00:06:14,890 --> 00:06:16,660
Well let's see what this yields us here,

80
00:06:16,660 --> 00:06:24,360
so if I console log my entry here when we go through all entries and we save that and then reload, this

81
00:06:24,360 --> 00:06:25,410
is what gets logged here,

82
00:06:25,410 --> 00:06:26,670
these two entries.

83
00:06:26,790 --> 00:06:33,330
Now what you see here makes more sense than for the set, we log an array essentially with always exactly

84
00:06:33,330 --> 00:06:38,880
two elements, where the first element is the key and the second element is the value.

85
00:06:38,880 --> 00:06:44,730
So for a map, it makes sense that this is an array of exactly two elements because we can then have key

86
00:06:44,760 --> 00:06:49,150
and value combined in one value, in one array here.

87
00:06:49,320 --> 00:06:52,260
And for the set as I mentioned, they just did the same

88
00:06:52,260 --> 00:06:59,010
so that you could easily reuse code I guess. Now therefore since you also learned about array destructuring,

89
00:06:59,040 --> 00:07:05,400
you could of course also rewrite this as key-value and pull out the key and the value, these names are

90
00:07:05,400 --> 00:07:06,540
totally up to you,

91
00:07:06,540 --> 00:07:12,440
out of this array which is guaranteed to have exactly two elements, the key and the value and store

92
00:07:12,440 --> 00:07:18,320
them in constants, which are available inside of that for loop, of that name.

93
00:07:18,360 --> 00:07:24,030
So then we can output key and value like this for example, using this array destructuring syntax you

94
00:07:24,030 --> 00:07:29,490
learned about. Since we get an array with exactly two elements, we can use the syntax to pull out these

95
00:07:29,490 --> 00:07:35,550
elements and assign them by their order to these variables or to these constants which we can use in

96
00:07:35,550 --> 00:07:35,820
here.

97
00:07:36,210 --> 00:07:44,010
So if we save that and reload, you'll see this output, key-value, key-value, so that also works.

98
00:07:44,010 --> 00:07:50,070
So that's one way of going through all entries, another way is to again use a loop here but maybe you're

99
00:07:50,070 --> 00:07:52,430
just interested in the keys let's say.

100
00:07:52,680 --> 00:07:58,840
Well then you can go through all the keys by using person data or whatever your map name is,

101
00:07:58,950 --> 00:08:06,230
keys. Keys is also a function which you execute and as the name suggest, this gives you access to all

102
00:08:06,320 --> 00:08:08,580
the keys and nothing more.

103
00:08:08,630 --> 00:08:12,950
So if you only need the keys and you're not interested in the values, of course you could also use this

104
00:08:12,950 --> 00:08:15,560
approach and just not do anything with the value

105
00:08:15,560 --> 00:08:17,690
but this is then a bit cheaper and shorter,

106
00:08:17,780 --> 00:08:22,300
it just goes through all the keys and unsurprisingly, logs them here at the bottom,

107
00:08:22,340 --> 00:08:27,930
this here from line 26. Well and you have the same for values,

108
00:08:27,990 --> 00:08:35,070
so if I duplicate this, we can also go through person data.values, may be name this value therefore,

109
00:08:35,670 --> 00:08:36,610
of course as always

110
00:08:36,620 --> 00:08:38,480
this name is totally up to you though

111
00:08:38,670 --> 00:08:42,900
and now we only go through the values. So whenever you just need the value,

112
00:08:42,900 --> 00:08:48,970
well that's also possible with this approach. Well and then you have a couple of other nice methods

113
00:08:49,060 --> 00:08:50,880
on a map here,

114
00:08:50,950 --> 00:08:55,500
they should be pretty self-explanatory. The clear method clears all data from a map,

115
00:08:55,540 --> 00:09:01,810
the delete method deletes a single entry by key from the map, ForEach allows you to go through all items

116
00:09:01,870 --> 00:09:07,120
which is an alternative to the for/of loop, has allows you to check whether a certain key is part of

117
00:09:07,120 --> 00:09:13,210
the map, set allows you to set a value and size tells you how many items are in the map at the

118
00:09:13,210 --> 00:09:13,880
moment.

119
00:09:13,900 --> 00:09:20,510
This is not a method but just a property which you access, which you can output like this. So if we do

120
00:09:20,510 --> 00:09:27,420
that here and reload, here at the bottom we see two because we have two key-value pairs in the map. So

121
00:09:27,420 --> 00:09:28,830
that is maps.
