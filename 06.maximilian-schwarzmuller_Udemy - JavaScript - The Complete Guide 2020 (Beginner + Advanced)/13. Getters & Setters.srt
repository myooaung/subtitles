1
00:00:02,660 --> 00:00:08,360
Now before we move on to more exciting features about classes and how we can improve that code here,

2
00:00:08,360 --> 00:00:13,940
let's first of all dive into another nice thing you can add to classes where you already learned about

3
00:00:14,030 --> 00:00:20,060
when we talked about objects and that would be getters and setters, you can add them to classes as well

4
00:00:20,060 --> 00:00:23,000
and the shopping cart here is a perfect scenario.

5
00:00:23,150 --> 00:00:32,780
There, I am editing my items and I then want to update my but my output here in the end, right? Now we

6
00:00:32,780 --> 00:00:37,170
could use getters and setters as an elegant solution for that,

7
00:00:37,340 --> 00:00:46,400
we could add a getter, maybe name it total amount like this and we do this with the get keyword as you

8
00:00:46,400 --> 00:00:49,370
learned in the objects module, then any name of your choice

9
00:00:49,370 --> 00:00:54,650
and then like a method, like this method shorthand and in there. you have to return a value in the end.

10
00:00:54,680 --> 00:01:00,980
Now the value I want to return here is the cart total and for that, we can use a technique we learned about

11
00:01:00,980 --> 00:01:10,270
in the arrays module where we simply reduce our list of cart items to a single number.

12
00:01:10,310 --> 00:01:15,230
Now since we in the end just store products and items here, every product has a price property so we

13
00:01:15,230 --> 00:01:17,000
want to reduce that.

14
00:01:17,030 --> 00:01:25,280
So here we can calculate a sum with this items reduce, items is an array so we can call reduce on it

15
00:01:25,340 --> 00:01:29,240
and as you learned, reduce takes two arguments - a function

16
00:01:29,240 --> 00:01:35,030
and here I use an anonymous arrow function and then an optional second argument which is our initial

17
00:01:35,030 --> 00:01:37,690
value and there I'll start with zero.

18
00:01:37,700 --> 00:01:43,850
Now that function which we pass in is a first argument itself also receives multiple arguments and

19
00:01:43,850 --> 00:01:46,860
there are two important arguments which I want to accept here,

20
00:01:46,940 --> 00:01:49,120
that's the previous value

21
00:01:49,370 --> 00:01:56,270
and the current item,  you can name the parameters here however you want. Inside of the function,

22
00:01:56,420 --> 00:02:01,450
I then want to return previous value, for the first run this will be zero,

23
00:02:01,460 --> 00:02:08,360
thereafter it will be the value returned by reduce plus current item which will refer to an element in the

24
00:02:08,360 --> 00:02:14,330
items array and therefore that's a product, .price because we'll have a price property on every

25
00:02:14,330 --> 00:02:16,940
item and items. If the array is empty initially,

26
00:02:16,940 --> 00:02:19,980
then this will automatically return the initial value which is zero.

27
00:02:20,750 --> 00:02:22,560
So that's my reduction logic,

28
00:02:22,640 --> 00:02:27,210
we can even shorten this now as you learned, remove the curly brace and the return statement,

29
00:02:27,270 --> 00:02:36,400
remove the closing curly brace and also remove the semicolon here and then reformat that, remove

30
00:02:36,400 --> 00:02:37,620
that extra comma

31
00:02:37,750 --> 00:02:42,340
and now we have the reduce function with the arrow function here and the initial value.

32
00:02:42,340 --> 00:02:48,790
Now it's the sum which I want to return here and here in my template literal, I therefore want to refer to

33
00:02:48,790 --> 00:02:52,070
this total amount when we add a product

34
00:02:52,420 --> 00:02:56,880
but actually I even want to change that logic and that's now totally optional,

35
00:02:56,950 --> 00:02:59,800
I'm doing it so that I can also show you setters.

36
00:02:59,980 --> 00:03:04,240
I'll add a setter and I'll name it cart items,

37
00:03:04,390 --> 00:03:13,400
it will get a value and we create it with the set keyword and in here, I want to set this items equal to

38
00:03:13,790 --> 00:03:17,730
value because I expect value to be an array of cart items,

39
00:03:17,780 --> 00:03:21,290
so I override the existing array with a new one.

40
00:03:21,320 --> 00:03:27,920
Now I also then want to run this logic here, so I'll move it out of add product and move it into the

41
00:03:27,920 --> 00:03:35,750
setter so that when ever we set new cart items, I actually recalculate the total amount and update the

42
00:03:35,770 --> 00:03:40,440
HTML code, so that this happens as part of the setter here.

43
00:03:40,460 --> 00:03:51,050
Now in add product, I'll then just create a new constant, updated items which is a copy of this items using

44
00:03:51,050 --> 00:03:57,200
that copy trick with the spread operator in a new array so that I have a real copy of that items array

45
00:03:57,710 --> 00:04:04,130
and I then add that new product to that copied array and then set this cart

46
00:04:04,130 --> 00:04:11,900
items, referring to the setter equal to updated items and this will trigger the setter, pass updated items

47
00:04:11,900 --> 00:04:15,460
as a value to it and then therefore update the code like this.

48
00:04:15,500 --> 00:04:20,180
Now we could have kept the old logic but this allows me to also show you as setters and getters in

49
00:04:20,180 --> 00:04:22,750
classes which you can add just like that,

50
00:04:22,790 --> 00:04:27,530
basically as you would have added them to normal objects. You can add them to the blueprints which will

51
00:04:27,530 --> 00:04:29,670
be used to create objects like this

52
00:04:29,780 --> 00:04:36,860
and then this logic will be added to the actual objects that are created when you instantiate this class

53
00:04:36,890 --> 00:04:46,050
with the new keyword. Now with that if we reload here, you see this works, if I can now click Add to Cart, 

54
00:04:46,210 --> 00:04:49,320
this indeed updates with every click on the item,

55
00:04:49,320 --> 00:04:54,330
also if I click on the carpet, then you see this makes much bigger jumps because the carpet is more

56
00:04:54,330 --> 00:04:55,490
expensive.

57
00:04:55,920 --> 00:05:01,460
Now a tiny adjustment I want to make at this point, I also want to call toFixed 2 here,

58
00:05:01,470 --> 00:05:03,630
this is something we haven't really used before,

59
00:05:03,630 --> 00:05:06,350
this will prevent this strange output

60
00:05:06,390 --> 00:05:11,700
because of this floating point imprecision to which I'll come back in a separate module, we would

61
00:05:11,700 --> 00:05:14,100
get output with a lot of decimal places,

62
00:05:14,100 --> 00:05:17,670
this basically tells Javascript to always output a string,

63
00:05:17,670 --> 00:05:21,900
convert this number to a string which only displays two decimal places,

64
00:05:21,900 --> 00:05:26,180
that's what toFixed on total amount which is a number does.

65
00:05:26,190 --> 00:05:32,310
That's just something I do add here to make sure that we always output this in the right way so to say.

66
00:05:32,970 --> 00:05:34,650
So that's now the logic

67
00:05:34,660 --> 00:05:39,510
added to the shopping cart and with that, the classes don't look that bad,

68
00:05:39,510 --> 00:05:41,310
there is more we can do with them though.
