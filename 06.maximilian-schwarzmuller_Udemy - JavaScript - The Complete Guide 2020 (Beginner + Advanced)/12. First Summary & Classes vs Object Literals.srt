1
00:00:02,280 --> 00:00:09,510
So now we had a first look at classes, we're using some classes to split our logic and we're also using

2
00:00:09,780 --> 00:00:11,190
classes in different ways.

3
00:00:11,190 --> 00:00:18,060
We have our class with the static properties and the static methods to glue together some of the other

4
00:00:18,060 --> 00:00:24,150
classes and that's just one possible use case, static methods and static properties are always a good

5
00:00:24,150 --> 00:00:29,660
idea if you want to share some functionality across different parts of your application

6
00:00:29,670 --> 00:00:36,630
or like in this case, if you want to share some data or use this as kind of a communication interface

7
00:00:36,630 --> 00:00:37,510
you could say.

8
00:00:37,860 --> 00:00:42,600
Now of course that's not all you can do with classes or that's not all

9
00:00:42,600 --> 00:00:49,560
that's to classes. Before we dive into more things we can do with classes though and before we can

10
00:00:50,370 --> 00:00:55,200
work on this app a little bit more because right now for example this cart total of course is not

11
00:00:55,200 --> 00:00:56,690
behaving correctly,

12
00:00:56,700 --> 00:01:04,080
let me take a step back and go back to the relation between classes and the objects you work with in

13
00:01:04,080 --> 00:01:04,990
Javascript.

14
00:01:05,190 --> 00:01:10,650
For one of course it's important to realize that if you're not using a class in a static way like this

15
00:01:10,650 --> 00:01:17,390
here but instead by instantiating with new, what new shop in this case here returns,

16
00:01:17,400 --> 00:01:24,900
so what's stored in the shop constants here is a regular Javascript object or a reference to that object

17
00:01:24,930 --> 00:01:26,130
to be precise.

18
00:01:26,130 --> 00:01:30,800
So it's in the end the same as what you get with that object literal notation,

19
00:01:30,840 --> 00:01:37,620
I really want to emphasize this. As a result, you can of course use all the things on these objects as

20
00:01:37,620 --> 00:01:42,160
you can do on normal objects because these are just normal objects.

21
00:01:42,270 --> 00:01:47,980
You can for example use destructuring to get the cart out of shop if you wanted to do that,

22
00:01:48,060 --> 00:01:53,480
something like that is possible, it's really important to understand this relation.

23
00:01:53,570 --> 00:02:00,740
It's also important to understand when to use classes. You might think that with classes,

24
00:02:00,740 --> 00:02:06,730
the old way of creating objects with the object literal notation is obsolete and that would be wrong,

25
00:02:06,740 --> 00:02:08,470
It's not obsolete,

26
00:02:08,660 --> 00:02:16,160
it's great to use that object literal notation if you have some data collection, a couple of variables

27
00:02:16,160 --> 00:02:21,830
which you in the end want to group together and where you only want to do this once or in one place of

28
00:02:21,830 --> 00:02:25,260
your app, of your code and you don't plan on reusing that.

29
00:02:25,310 --> 00:02:29,630
So not as we're doing it with the product where we need that in different places, where we want to

30
00:02:29,630 --> 00:02:34,970
ensure that they always have the same structure but where you quickly want to create such an object on

31
00:02:34,970 --> 00:02:35,670
the fly,

32
00:02:35,720 --> 00:02:38,800
that's a perfect use case for using object literals.

33
00:02:38,820 --> 00:02:40,340
They're quick and easy to use,

34
00:02:40,340 --> 00:02:46,520
you have no extra overhead and you also have a small performance benefit versus this class based

35
00:02:46,520 --> 00:02:49,830
instantiation which is quickly made up for though

36
00:02:49,940 --> 00:02:57,010
if you would unnecessarily create multiple objects with object literals instead of using classes and

37
00:02:57,090 --> 00:03:02,520
therefore sharing code, just to also say that. So classes in general are a good idea

38
00:03:02,660 --> 00:03:09,200
if you have some logic which you want to reuse, if you want to recreate the same type of object with

39
00:03:09,200 --> 00:03:14,900
the same structure and the same attached logic over and over again like in that demo application we worked

40
00:03:14,900 --> 00:03:21,050
on. You have a little bit more overhead initially because you need to write that class definition but

41
00:03:21,050 --> 00:03:27,220
thereafter, you have that easy object duplication, of course not really a duplication instead

42
00:03:27,230 --> 00:03:33,620
new objects are created with that same internal structure but with different data, depending on how your

43
00:03:33,620 --> 00:03:35,090
class works of course.

44
00:03:35,090 --> 00:03:40,400
So both is important and both has its place in Javascript and it's simply also something that comes

45
00:03:40,400 --> 00:03:45,860
with experience and with you working with Javascript, that you get a better feeling for when to use which.

46
00:03:46,670 --> 00:03:52,550
In this example application here, classes make a lot of sense because that allows us to cleanly split

47
00:03:52,580 --> 00:03:59,270
our code and we are actually reusing quite a lot of these classes or the logic attached to these classes

48
00:03:59,420 --> 00:04:00,950
in different places of our code.

49
00:04:01,160 --> 00:04:03,710
So here, having classes makes a lot of sense.
