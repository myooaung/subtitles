1
00:00:02,410 --> 00:00:05,210
Now that's the bonus life functionality,

2
00:00:05,230 --> 00:00:06,850
what about resetting the game

3
00:00:06,850 --> 00:00:17,720
once it's over? For that, I will add a new function here which I'll name reset, not reset game because

4
00:00:17,720 --> 00:00:22,220
that's actually a function I have here in the vendor.js file to update my health bars there,

5
00:00:22,430 --> 00:00:27,920
So I will just name it reset here in the app.js file because these names are shared globally across

6
00:00:27,980 --> 00:00:32,360
scripts as we learned and here in the end I want to basically do the same

7
00:00:32,360 --> 00:00:40,700
I did here. So I want to copy that code into reset, without let though because I don't want to reinitialize

8
00:00:40,710 --> 00:00:45,380
these variables, instead I want to use the global ones and just set them back to the chosenMaxLife

9
00:00:45,380 --> 00:00:49,060
here. I will not reset the bonus life,

10
00:00:49,060 --> 00:00:50,910
that's not the idea of this game here,

11
00:00:50,920 --> 00:00:54,130
I don't have a function in vendor.js to update the UI,

12
00:00:54,160 --> 00:00:54,500
so.

13
00:00:54,880 --> 00:00:59,590
if you would want to add such a functionality, you would have to write such a function on your own,

14
00:01:00,010 --> 00:01:01,170
not the goal here.

15
00:01:01,180 --> 00:01:04,620
Bonus life only exists once across all games,

16
00:01:04,660 --> 00:01:10,210
I will just reset the health and therefore also call reset game here which is that function in the

17
00:01:10,210 --> 00:01:14,630
vendor.js file which resets the health bars there.

18
00:01:14,660 --> 00:01:20,270
Now we can call reset whenever we want to reset and that of course should be the case whenever we lost,

19
00:01:20,300 --> 00:01:22,050
we won or we had a draw,

20
00:01:22,100 --> 00:01:32,420
so whenever the game is over. This means here in and round, in all these cases here, we can call reset,

21
00:01:33,020 --> 00:01:36,660
just like this.

22
00:01:36,770 --> 00:01:42,590
Now there is nothing wrong with doing it like this, calling reset in three places, a bit of code duplication

23
00:01:42,640 --> 00:01:44,450
which you can't really avoid.

24
00:01:44,840 --> 00:01:50,090
If you would want to rewrite it and I would argue that this is not necessarily shorter but if you would

25
00:01:50,090 --> 00:01:56,920
want to rewrite it, you could add a new if check which runs after this one, where you check basically

26
00:01:56,920 --> 00:01:58,840
all conditions combined

27
00:01:59,170 --> 00:02:00,580
and then you call reset.

28
00:02:00,580 --> 00:02:05,560
So here you would check if current monster health is smaller or equal than zero and the current player

29
00:02:05,560 --> 00:02:12,380
health is greater than zero, in which case the player won or

30
00:02:13,160 --> 00:02:13,960
and now we got

31
00:02:14,260 --> 00:02:18,880
and and or combined, due to the way operator precedence works,

32
00:02:18,890 --> 00:02:21,120
this is executed first,

33
00:02:21,150 --> 00:02:30,960
thereafter the part after or and then both combined with or, so after this, I check this condition here and

34
00:02:31,020 --> 00:02:34,110
let's now split it across multiple lines to make it easier to read.

35
00:02:34,170 --> 00:02:38,840
Here my IDE automatically added parentheses for readability,

36
00:02:38,850 --> 00:02:45,270
these are not required, due to operator precedence this code will work in exactly the same way, no matter

37
00:02:45,270 --> 00:02:51,900
if this is wrapped into parentheses or not because and has a higher precedence than or which means

38
00:02:52,140 --> 00:02:54,070
this is evaluated first,

39
00:02:54,210 --> 00:03:02,130
then this and then the result of both operations are compared with this or operator.

40
00:03:02,160 --> 00:03:10,110
So if this yields true and this yields false for example, the overall result will be true because with

41
00:03:10,200 --> 00:03:14,880
or, if one of the two conditions is true, the overall condition is true.

42
00:03:15,030 --> 00:03:16,420
Now of course we're not done here though,

43
00:03:16,500 --> 00:03:19,360
I check for the monster health and for the player health,

44
00:03:19,380 --> 00:03:27,140
now we can also add another condition and that would be this one here and with that, we have all these

45
00:03:27,140 --> 00:03:32,220
conditions up there combined and we call reset thereafter.

46
00:03:32,230 --> 00:03:37,380
Now actually, we can shorten this though and then this becomes a better alternative,

47
00:03:37,390 --> 00:03:41,920
I wanted to show this first to practice the combination of and and or. In the end,

48
00:03:41,920 --> 00:03:47,230
the only thing we care about here is whether the monster or the player health is below zero,

49
00:03:47,260 --> 00:03:47,520
right,

50
00:03:47,530 --> 00:03:53,320
because in either way one or the two lost or it's a draw but we don't care whether it's a draw or if we

51
00:03:53,320 --> 00:03:54,290
have a winner here,

52
00:03:54,310 --> 00:04:00,460
we just care whether some value, some health is below zero because that means the game is certainly over,

53
00:04:00,550 --> 00:04:06,490
no matter who won or if it's a draw and therefore we want to reset. So we can shorten this a lot

54
00:04:06,490 --> 00:04:11,230
and again then it becomes a real alternative to calling reset three times here.

55
00:04:11,230 --> 00:04:15,490
We can shorten this a lot because all we have to do is, we have to check if the current monster health

56
00:04:15,520 --> 00:04:17,530
is smaller or equal than zero

57
00:04:17,620 --> 00:04:21,950
or if the currentPlayerHealth is smaller or equal than zero.

58
00:04:22,120 --> 00:04:27,040
Now we have a very short condition here and we want to call reset if that's the case, if that yields

59
00:04:27,040 --> 00:04:30,530
true because that means we have a winner or we have a draw,

60
00:04:30,640 --> 00:04:32,980
in either case we want to reset.

61
00:04:33,220 --> 00:04:35,290
So now with that, let's save it,

62
00:04:35,290 --> 00:04:38,510
let's reload and let's try.

63
00:04:39,220 --> 00:04:42,850
Let's hit this and we won, after clicking OK

64
00:04:44,430 --> 00:04:46,560
this should normally reset but it didn't,

65
00:04:49,240 --> 00:04:55,930
yes because reset game of course takes a value here, the value to which it should reset our bars and

66
00:04:55,960 --> 00:05:01,420
that's of course the chosenMaxLife which we need to pass in here, in our reset function.

67
00:05:01,420 --> 00:05:03,430
And with that, let's give it another try,

68
00:05:03,430 --> 00:05:05,000
let's hit attack here,

69
00:05:05,020 --> 00:05:08,800
looks like the monster is going to win now. Well we have our bonus life,

70
00:05:08,800 --> 00:05:09,000
right

71
00:05:09,010 --> 00:05:15,340
but if I click attack again and again, now we really lost but thereafter we reset this and now maybe

72
00:05:15,340 --> 00:05:18,820
with a couple of strong attacks, we should win and we do

73
00:05:18,820 --> 00:05:22,030
and now let's see if I can get a draw here

74
00:05:22,030 --> 00:05:24,750
but that's actually quite hard to be honest.

75
00:05:24,760 --> 00:05:26,110
Yes it's really hard,

76
00:05:26,110 --> 00:05:32,930
you might get a draw here, you will see that even there you will reset this in the end. Now

77
00:05:32,960 --> 00:05:33,710
here is a draw,

78
00:05:33,710 --> 00:05:34,880
yes. So this all works,

79
00:05:34,880 --> 00:05:42,320
now we can reset this, really nice and with that, the one thing that's missing here is that we let

80
00:05:42,320 --> 00:05:48,140
the player, the user, the user of this website now, not you as a developer but the user of this website,

81
00:05:48,560 --> 00:05:55,550
that the user may decide what the initial health values are - 100, 50, 1000, that is something

82
00:05:55,550 --> 00:05:58,430
the player should decide and that's what we will implement next.
