WEBVTT
1
00:00:02.270 --> 00:00:05.180
So we can attack the monster,

2
00:00:05.180 --> 00:00:08.920
what about healing? The heal button doesn't do anything

3
00:00:09.230 --> 00:00:14.860
and therefore it would make sense that we also react to clicks on that, it's the heal button constant here,

4
00:00:14.870 --> 00:00:17.780
so we want to add an event listener to that

5
00:00:17.780 --> 00:00:21.950
and of course we want to trigger a function when this button is clicked.

6
00:00:22.160 --> 00:00:28.520
So for that, we can register a new function, add it here maybe, the heal player handler or whatever you

7
00:00:28.520 --> 00:00:34.640
want to name it and this heal player handler function should be triggered when the heal button is

8
00:00:34.640 --> 00:00:35.810
pressed.

9
00:00:35.810 --> 00:00:40.340
Now what happens in that heal player handler? In the end here,

10
00:00:40.580 --> 00:00:46.760
I want to heal the player by a certain amount and that amount should also be set up up there so that

11
00:00:46.760 --> 00:00:51.330
we can conveniently change it in one single place for the entire game.

12
00:00:51.380 --> 00:01:00.170
I will name it heal value and maybe set that to let's say 20 which is a lot and you can definitely play

13
00:01:00.170 --> 00:01:09.020
around with different values here if you want to. Now in vendor.js, we will also have the increase player

14
00:01:09.020 --> 00:01:12.670
health function which is in the end the heal part.

15
00:01:12.710 --> 00:01:15.210
This does not randomly calculate a value,

16
00:01:15.230 --> 00:01:20.250
so instead the heal value we have will always be the real heal value applied.

17
00:01:20.360 --> 00:01:22.130
So there is no randomness involved here,

18
00:01:22.130 --> 00:01:28.890
this will just update the player health bar in the UI. So now with the heal value setup up there, we

19
00:01:28.890 --> 00:01:35.970
can use it in the heal player handler and there, I in the end want to call increase player health which

20
00:01:35.970 --> 00:01:41.640
is that function I just showed in vendor.js and forward the heal value so that we can heal the player

21
00:01:42.570 --> 00:01:46.800
and thereafter of course, still the monster should be able to hit us.

22
00:01:47.130 --> 00:01:52.050
So in the end, we will heal but we will also take an immediate hit by the monster, so the monster hits

23
00:01:52.050 --> 00:01:53.510
us after every turn

24
00:01:53.550 --> 00:01:57.250
no matter if we attacked it or if we healed ourselves.

25
00:01:57.270 --> 00:02:00.490
So we want to let the monster attack us,

26
00:02:00.850 --> 00:02:04.630
so that means that this code here also needs to run

27
00:02:04.630 --> 00:02:11.140
and of course since the monster will hit us, we could, even though we healed ourselves, we could theoretically

28
00:02:11.140 --> 00:02:16.620
be that, not really with a heal value of 20 and the max monster attack of 14,

29
00:02:16.630 --> 00:02:19.310
so in this scenario we actually can't be that

30
00:02:19.420 --> 00:02:26.800
but if the monster would hit us for a value of bigger than 20, so a maximum damage of bigger than 20 or

31
00:02:26.800 --> 00:02:29.500
if we would heal for less, then we could be that

32
00:02:29.500 --> 00:02:35.290
and since these values can be adjusted by you as a developer, I want to handle that case as well. So we

33
00:02:35.290 --> 00:02:35.890
could be that,

34
00:02:35.890 --> 00:02:39.700
hence I also want to have my win condition be executed here.

35
00:02:39.760 --> 00:02:45.280
Certainly the player can't have one because the player dealt no damage to the monster but the monster

36
00:02:45.280 --> 00:02:48.640
might have won if values were different.

37
00:02:48.640 --> 00:02:51.520
So in the end, running this entire code again

38
00:02:51.520 --> 00:02:56.620
doesn't sound too bad. Now obviously we can copy it over but you know what you learned about copying

39
00:02:56.620 --> 00:02:57.400
code,

40
00:02:57.400 --> 00:02:59.050
not the best idea,

41
00:02:59.080 --> 00:03:09.540
so instead let's add a brand new function which we maybe name and round and in there,

42
00:03:09.730 --> 00:03:15.730
I have my code where the monster hits us and where we check whether we won or the monster won or if

43
00:03:15.730 --> 00:03:18.370
we have a draw or if nothing happened.

44
00:03:20.020 --> 00:03:26.200
Now this and round function can now be executed whenever we had this code before,

45
00:03:26.200 --> 00:03:32.710
so in the attack monster function after we dealt damage to the monster, we can call and round like this

46
00:03:32.980 --> 00:03:38.500
and now this will and round, let the monster attack us and check the win condition and we do the

47
00:03:38.500 --> 00:03:42.540
same here after healing, call and round. Again,

48
00:03:42.610 --> 00:03:44.680
code we used efficiently,

49
00:03:44.860 --> 00:03:50.150
very lean functions defined up there and a reusable and round function which we can call whenever a

50
00:03:50.160 --> 00:03:51.120
round is over,

51
00:03:51.130 --> 00:03:57.100
so even if we would add more options here. With that if we now hit the monster and we heal ourselves, we

52
00:03:57.100 --> 00:04:01.390
see the health goes up a bit, here we go

53
00:04:02.010 --> 00:04:02.400
and so on

54
00:04:02.400 --> 00:04:07.560
but we can never heal to full because we always get damaged by the monster or at least it's very hard.

55
00:04:08.910 --> 00:04:11.060
One problem we have with this heal logic

56
00:04:11.060 --> 00:04:17.160
right now though is that we can actually also heal if we already have full health. So if I click heal here,

57
00:04:17.160 --> 00:04:24.570
we actually take damage because the monsters still hits us but with enough luck, we can actually go above

58
00:04:24.600 --> 00:04:30.330
our maximum health. By the way, you will also see that if you press heal a lot, you eventually lose which

59
00:04:30.330 --> 00:04:31.830
is very strange,

60
00:04:31.860 --> 00:04:35.020
now that's also something we'll have to fix.

61
00:04:35.230 --> 00:04:42.100
Now the reason for us losing is that whilst our progress bar is updated by calling this function, our

62
00:04:42.100 --> 00:04:48.070
health which we manage here, the currentPlayerHealth which is important for our win condition actually

63
00:04:48.070 --> 00:04:49.390
isn't adjusted.

64
00:04:49.390 --> 00:04:51.610
We adjust it when the monster hits us,

65
00:04:51.790 --> 00:04:54.810
then we reduce our health, here

66
00:04:54.820 --> 00:04:56.590
currentPlayerHealth reduced,

67
00:04:56.590 --> 00:05:00.330
we also reduce the monster health when we hit it but we don't update,

68
00:05:00.340 --> 00:05:02.440
we don't increase the currentPlayerHealth

69
00:05:02.440 --> 00:05:05.580
if we heal ourselves. So that's one thing we have to do,

70
00:05:05.590 --> 00:05:09.420
we have to set the currentPlayerHealth plus equal to heal value here,

71
00:05:09.430 --> 00:05:14.930
otherwise the progress bar health does not reflect our internal game health

72
00:05:15.100 --> 00:05:20.680
and in addition, I want to make sure that we can't heal for more than our maximum health, so that we can't

73
00:05:20.680 --> 00:05:28.310
go above our maximum health. To guarantee that, we can actually add a new variable here in the heal player

74
00:05:28.310 --> 00:05:34.080
handler, maybe named heal value like this which of course is different from our constant

75
00:05:34.070 --> 00:05:38.570
here, it's written in a totally different way and Javascript is case sensitive

76
00:05:38.810 --> 00:05:43.220
and of course there also we have an underscore which we don't have here, so it's a totally different

77
00:05:43.340 --> 00:05:49.700
variable, even if it would be the same thanks to variable shadowing, we could have the same name here

78
00:05:49.700 --> 00:05:55.280
in a function as we have globally by the way but this is a brand new variable, doesn't even have a

79
00:05:55.280 --> 00:05:56.980
shared name anywhere

80
00:05:57.140 --> 00:06:02.630
and I'm adding this variable because now again we can add an if check here and check if the current

81
00:06:02.630 --> 00:06:13.810
player health is greater or equal than the chosenMaxLife, which is hardcoded to 100 here which later

82
00:06:13.850 --> 00:06:15.680
can be set by the user,

83
00:06:15.800 --> 00:06:20.330
so the chosenMaxLife minus the heal value.

84
00:06:21.310 --> 00:06:23.140
Now what does this comparison do?

85
00:06:23.150 --> 00:06:29.080
Now keep in mind that thanks to operator precedence, this is evaluated first,

86
00:06:29.090 --> 00:06:36.120
so this basically at the beginning of the game for example calculates 100 - 20,

87
00:06:36.140 --> 00:06:43.250
so 80 as a result and therefore we check if the currentPlayerHealth is greater than 80 here, which

88
00:06:43.250 --> 00:06:47.420
at the beginning is the case because at the beginning, the currentPlayerHealth is equal to the chosen

89
00:06:47.420 --> 00:06:51.260
nax life which is 100, 100 is greater than 80.

90
00:06:51.260 --> 00:07:02.390
If that's the case, then we know that the heal value is either just enough to fully heal us back up

91
00:07:02.390 --> 00:07:05.810
to our max health or to even heal us

92
00:07:05.810 --> 00:07:11.240
beyond that. Put in other words, if we just applied heal value to improve our health,

93
00:07:11.450 --> 00:07:16.590
we would at least go up to our initial health, maybe even go higher than that.

94
00:07:16.610 --> 00:07:24.900
So in that case, what I want to do, I want to maybe throw an alert where I say you can't and

95
00:07:24.910 --> 00:07:29.760
now I want to use a single quote here even though my entire string is surrounded by single quotes, to

96
00:07:29.760 --> 00:07:37.110
fix that we can use double quotes to surround the string, then I can say you can't heal to more than your

97
00:07:37.200 --> 00:07:40.860
max initial health or something like that and

98
00:07:41.080 --> 00:07:48.430
thereafter I set the healing value equal to the chosenMaxLife minus the currentPlayerHealth

99
00:07:48.480 --> 00:07:57.130
which basically means we heal the player back up to its initial health but not above that. Now

100
00:07:57.180 --> 00:08:05.320
else, which is the case if our current health is not greater than this difference, so for example if our

101
00:08:05.320 --> 00:08:11.920
current health is 60, this difference here for the current initial value always is 80,

102
00:08:11.950 --> 00:08:16.510
then if we have a current health of 60, we don't make it into this block, then we go into the else block

103
00:08:16.540 --> 00:08:23.710
because now we know if we apply the full heal value of 20, we will certainly still be below our maximum.

104
00:08:23.740 --> 00:08:26.590
So we don't need to tell the user that we healed him for less,

105
00:08:26.590 --> 00:08:32.950
instead we can apply the full heal values, so the full 20 health points in this case here to heal the

106
00:08:32.950 --> 00:08:33.610
player,

107
00:08:33.670 --> 00:08:38.750
so then I will set heal value equal to our global heal value constant here.

108
00:08:38.770 --> 00:08:41.980
So here we apply the full 20 health points in this case,

109
00:08:41.980 --> 00:08:47.650
here we might also apply the full 20 health points if the currentPlayerHealth is exactly 80 but for

110
00:08:47.650 --> 00:08:49.080
example if it's 90,

111
00:08:49.150 --> 00:08:55.120
this here will only be a value of 10 because we can't heal the player for more than up to its maximum

112
00:08:55.120 --> 00:08:56.870
initial life.

113
00:08:56.920 --> 00:08:58.410
So why did I do all of that?

114
00:08:58.420 --> 00:09:03.760
Because now heal value is a dynamic value which takes the maximum amount of life and the current amount

115
00:09:03.760 --> 00:09:07.690
of life of the player into account and therefore now we increase the player health

116
00:09:07.690 --> 00:09:13.530
by this heal value and also our in-game player health by this value.

117
00:09:13.660 --> 00:09:19.900
And now if I save that and I reload and I click heal right at the start, we get this alert and we are healed

118
00:09:19.930 --> 00:09:20.500
back up

119
00:09:20.500 --> 00:09:24.190
but since the monster immediately hits us, we actually don't see that,

120
00:09:24.310 --> 00:09:27.570
so healing at the beginning of the game just is stupid as you can see

121
00:09:27.700 --> 00:09:34.840
but if we then attack, for example here I get a warning, still a warning but here we see the effect a bit

122
00:09:34.840 --> 00:09:42.530
because the monster didn't hit us as hard and so on. So this now works and if I'm a bit lower on health,

123
00:09:42.560 --> 00:09:47.030
we don't get the warning of course, we only get this if we're high on health and we would potentially

124
00:09:47.030 --> 00:09:52.650
heal ourselves up for more than our max health before the monster then hits us again.

125
00:09:52.700 --> 00:09:54.600
So this is the healing functionality,

126
00:09:54.620 --> 00:10:01.930
now we also don't lose because of some out of sync in game health and health bar health and therefore

127
00:10:01.940 --> 00:10:05.640
now we successfully added a heal functionality with another

128
00:10:05.640 --> 00:10:12.470
if check example, in this case used to ensure that we can't heal for more than up to our maximum initial

129
00:10:12.470 --> 00:10:12.890
health.
