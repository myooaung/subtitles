WEBVTT
1
00:00:02.250 --> 00:00:07.770
So we got our first webpack built, we get the optimized code here and we see why that's happening in

2
00:00:07.770 --> 00:00:09.360
our warning down there,

3
00:00:09.360 --> 00:00:15.420
the mode option has not been set and therefore webpack will use production as a default mode. So you can

4
00:00:15.420 --> 00:00:18.510
tell webpack for which environment you're building

5
00:00:18.660 --> 00:00:21.750
and by default it assumes that this is production

6
00:00:21.750 --> 00:00:27.420
and if it is production, webpack will automatically apply a couple of optimizations for you, which of

7
00:00:27.420 --> 00:00:29.520
course is really convenient. Here

8
00:00:29.520 --> 00:00:35.400
however I want to start with a development build which does not do all these optimizations and to tell

9
00:00:35.400 --> 00:00:37.140
webpack that this is my goal,

10
00:00:37.170 --> 00:00:44.070
I just have to go to the webpack.config.js file and in there, add a mode key and set

11
00:00:44.070 --> 00:00:52.530
this to development like this. If you do that and you repeat this build command, npm run build, you see

12
00:00:52.530 --> 00:00:53.740
it again builds,

13
00:00:53.760 --> 00:01:01.770
now we get this output here and now you see here, I got these files which are now not optimized anymore,

14
00:01:01.800 --> 00:01:07.480
the 1.app.js file is, 0.app.js was produced and this is not optimized.

15
00:01:07.950 --> 00:01:13.770
Now what you also see is that of course there is a lot of extra code which we didn't write and that's

16
00:01:13.770 --> 00:01:18.810
all webpack's work which in the end is the code that ensures that everything works, everything is loaded

17
00:01:18.810 --> 00:01:21.390
at runtime and so on.

18
00:01:21.390 --> 00:01:23.460
Now does that code work?

19
00:01:23.580 --> 00:01:29.700
Well to find out, all we got to do is spin up our development server again which for now is still is

20
00:01:29.790 --> 00:01:37.470
served by running serve, that gives us our web server at localhost:5000 by default and

21
00:01:37.470 --> 00:01:39.660
visit this page and see what we got there

22
00:01:42.500 --> 00:01:44.640
and if I reload, indeed that looks good,

23
00:01:44.640 --> 00:01:46.160
got no errors here,

24
00:01:46.200 --> 00:01:51.540
got my working application where I can drag and drop stuff and we're using app.js

25
00:01:51.570 --> 00:01:58.020
So if I reload, you see we're only making one HttpRequest here instead of dozens of HttpRequests, this

26
00:01:58.020 --> 00:02:02.790
one file is a bit bigger than all the single individual files but that of course makes sense because

27
00:02:02.790 --> 00:02:05.820
it has merged all these individual files.

28
00:02:05.820 --> 00:02:12.230
If I click on the tooltip however, this does not work, you see loading 0.app.js somehow fails,

29
00:02:12.240 --> 00:02:19.440
it does not find that because it's also looking in the wrong path here, it's looking directly in the

30
00:02:19.440 --> 00:02:25.920
root folder for this file and that doesn't work because we know actually that would be found in

31
00:02:25.920 --> 00:02:28.400
assets/scripts/0.app.js,

32
00:02:28.440 --> 00:02:35.880
so this is something we'll have to fix. To work around this issue where we can't find this extra bundle,

33
00:02:35.880 --> 00:02:40.770
this extra script file which holds our tooltip code, we need to go back to our webpack.config

34
00:02:40.770 --> 00:02:46.010
file and there in output, we need to add one other key and that's the public path.

35
00:02:46.080 --> 00:02:51.750
Now the thing is webpack is taking all our input, bundling it up and then moving it into these assets

36
00:02:51.840 --> 00:03:00.240
scripts folder. Our web server then imports app.js from the assets scripts folder,

37
00:03:00.310 --> 00:03:07.580
the problem just is that webpack writes our app.js file such that it looks for this 0.app.js

38
00:03:07.660 --> 00:03:11.070
file, in the end not in the same folder as the app.js file is,

39
00:03:11.080 --> 00:03:15.610
so not in the scripts folder but on the root level of our server and that's what we can change

40
00:03:15.610 --> 00:03:22.870
with public path, we in the end can tell webpack here that our files are stored in a different path. For

41
00:03:22.870 --> 00:03:31.700
that we can set the public path here to assets/scripts/, in my example here, and then quit

42
00:03:31.700 --> 00:03:38.610
the development server here with control c, rerun npm run build and then rerun serve to bring up that

43
00:03:38.610 --> 00:03:45.570
development server again. If we now go back and we reload here, if I click on more info, this now works and

44
00:03:45.570 --> 00:03:47.440
loads this file correctly.

45
00:03:47.490 --> 00:03:54.000
So now this is working and we're able to get our tooltip to show up and we got our bundled output which

46
00:03:54.000 --> 00:03:58.200
still supports this capability of loading some code on-demand.
