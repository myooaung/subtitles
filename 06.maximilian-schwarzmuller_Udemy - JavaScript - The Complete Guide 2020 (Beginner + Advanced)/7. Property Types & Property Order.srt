1
00:00:02,360 --> 00:00:04,930
Now besides string property names,

2
00:00:04,970 --> 00:00:12,260
there are two other kinds of values you can use for your property names and that would be numbers and

3
00:00:12,290 --> 00:00:13,520
also symbols.

4
00:00:13,520 --> 00:00:15,230
Now again let's ignore that symbol thing

5
00:00:15,230 --> 00:00:17,400
but let's have a look at a number. Now

6
00:00:17,420 --> 00:00:21,240
actually it's not too surprising that we can use numbers because that's in the end

7
00:00:21,320 --> 00:00:24,980
what an array does, it assigns indexes to our values,

8
00:00:24,980 --> 00:00:27,850
well in the end as you know, an array is an object,

9
00:00:27,950 --> 00:00:34,430
so in the end it's just an object which automatically assigns number keys to the values you added.

10
00:00:34,430 --> 00:00:37,900
So here, we could also add a number key and for a person,

11
00:00:37,910 --> 00:00:39,440
it doesn't make too much sense,

12
00:00:39,500 --> 00:00:45,830
what would be a number here but we could enter 1.5 here as a key and assign a value of hello

13
00:00:45,820 --> 00:00:47,990
or any other value.

14
00:00:47,990 --> 00:00:53,780
So now we have this here as a number, again behind the scenes it will still be coerced to a string but

15
00:00:54,050 --> 00:00:58,000
you can use it as a number here and access it as a number.

16
00:00:58,010 --> 00:01:05,090
So for example here if I store hello in 1.5 or in any other number of your choice, not including

17
00:01:05,090 --> 00:01:06,220
negative numbers though,

18
00:01:06,260 --> 00:01:07,960
so negative numbers are not allowed,

19
00:01:07,970 --> 00:01:11,750
must be a positive number, zero or higher

20
00:01:11,750 --> 00:01:16,790
but if we store that here, we can access this here with console log person

21
00:01:16,790 --> 00:01:20,750
and now again not with the dot notation though because this here will not work.

22
00:01:20,750 --> 00:01:22,440
You see I'm getting an error here,

23
00:01:22,430 --> 00:01:25,110
this is simply not syntax Javascript understands.

24
00:01:25,160 --> 00:01:27,500
So therefore here, you also have to use square brackets

25
00:01:27,500 --> 00:01:32,020
but now important, you don't have to wrap this in quotes here,

26
00:01:32,030 --> 00:01:35,300
now here Javascript clearly detects that this should be a number,

27
00:01:35,300 --> 00:01:39,740
so now since it's in the same pair of square brackets, this is evaluated as one thing and therefore as

28
00:01:39,740 --> 00:01:44,250
one number and hence if I save this, we see if I reload here

29
00:01:44,300 --> 00:01:46,930
hello down there.

30
00:01:46,950 --> 00:01:50,400
Now you can also wrap this in quotes if you want,

31
00:01:50,400 --> 00:01:56,460
so you can do that and then reload and it will work as well because as I mentioned, Javascript automatically

32
00:01:56,460 --> 00:02:03,540
coerces values to strings, so it kind of translates it to a string anyways behind the scenes but you

33
00:02:03,540 --> 00:02:05,730
can also access it like this.

34
00:02:05,730 --> 00:02:12,360
Now storing numbers in normal objects is probably not something you'll do too often but it works and

35
00:02:12,360 --> 00:02:15,650
you see, this is how you can then access this.

36
00:02:15,720 --> 00:02:18,660
Now one word about the order of properties,

37
00:02:18,660 --> 00:02:25,880
a common question is, how are these properties ordered in a Javascript object?

38
00:02:25,890 --> 00:02:33,680
Now let's have a look and let's console log the entire person here and if we do so, if we reload this,

39
00:02:33,690 --> 00:02:34,950
we now see the object here and

40
00:02:35,000 --> 00:02:36,570
now here's something important.

41
00:02:36,570 --> 00:02:41,270
If you expand it here, you automatically get a sorted view of that,

42
00:02:41,280 --> 00:02:44,220
so here you always have that sorted.

43
00:02:44,250 --> 00:02:51,150
Now if we have a look at that unexpanded thing however, we see that we have the order in which we

44
00:02:51,150 --> 00:02:53,310
added our properties,

45
00:02:53,310 --> 00:02:57,310
so that's how our properties, our key-value pairs are ordered,

46
00:02:57,330 --> 00:02:59,970
they keep the order in which we add things.

47
00:03:00,150 --> 00:03:06,870
So we have first name, hobbies, greet, 1.5 and isAdmin and indeed we have first name, hobbies,

48
00:03:06,940 --> 00:03:13,200
age is deleted but then hobbies, greet, 1.5 and then isAdmin is added last and that's exactly

49
00:03:13,200 --> 00:03:14,130
what we see here.

50
00:03:14,160 --> 00:03:17,970
Now there is one important exception which I quickly want to show you here,

51
00:03:17,970 --> 00:03:24,480
if we have an object which only consists of number keys, let's say you have five with a value of hi

52
00:03:24,510 --> 00:03:31,560
and then one with a value of true, a string but can be any value, then if you output numbers, you see

53
00:03:31,590 --> 00:03:34,550
indeed here already that changed,

54
00:03:34,560 --> 00:03:41,160
so here that is sorted. If you have an object with only numbers, then the numbers will be sorted and

55
00:03:41,160 --> 00:03:47,190
that's important to keep in mind, numbers will be sorted, otherwise if you have string keys, the insertion

56
00:03:47,190 --> 00:03:48,840
order will be kept.

57
00:03:48,840 --> 00:03:52,680
That's how Javascript object properties are ordered by Javascript.
