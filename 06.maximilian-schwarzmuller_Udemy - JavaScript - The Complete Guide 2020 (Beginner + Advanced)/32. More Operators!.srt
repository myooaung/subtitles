1
00:00:02,190 --> 00:00:08,460
We got quite a nice application going here, at least for the basics into which we're diving.

2
00:00:08,460 --> 00:00:13,740
Now I want to dig deeper into some of the core Javascript features you've got to know because you will

3
00:00:13,740 --> 00:00:20,550
need them in many of the projects or the applications you're going to create with Javascript

4
00:00:20,550 --> 00:00:27,480
and one important feature if you want to call it like this is a special set of operators which you can

5
00:00:27,480 --> 00:00:29,910
also use in your Javascript code.

6
00:00:29,910 --> 00:00:36,780
Now we already saw the assign operator, the plus, the minus, the multiplication and the division operator,

7
00:00:36,780 --> 00:00:38,110
we used those,

8
00:00:38,130 --> 00:00:42,370
now there are a couple of shortcut operators if you want to call them like that.

9
00:00:42,600 --> 00:00:47,820
For example here, what we're doing and not just for adding but also for subtracting and so on, what we're

10
00:00:47,820 --> 00:00:56,040
doing is always we're assigning a new value to current result and that new value is based on the current

11
00:00:56,220 --> 00:01:03,880
or the old value of current result plus, or minus and so on, a number.

12
00:01:03,900 --> 00:01:08,270
Now if you have a calculation like this which is quite common, there is a shortcut,

13
00:01:08,310 --> 00:01:17,550
you can absolutely write it like this but if you assign the result to the same variable you're using

14
00:01:17,550 --> 00:01:19,440
on the right side of the equal sign,

15
00:01:19,680 --> 00:01:26,910
you can omit that variable there on the right side, omit the operator and instead write plus equal,

16
00:01:27,000 --> 00:01:30,010
so instead of a single equal sign, use plus equal

17
00:01:30,090 --> 00:01:35,330
and that's exactly the same as having, in this case here current result.

18
00:01:35,370 --> 00:01:37,660
equal to current result plus.

19
00:01:37,740 --> 00:01:41,340
So you can remove that from the right side and add a plus here

20
00:01:41,520 --> 00:01:47,670
and as you will see if I now save this and I reload this, if I enter a five here and I click plus, that

21
00:01:47,790 --> 00:01:49,620
still works as before.

22
00:01:49,860 --> 00:01:51,360
So that did not change,

23
00:01:51,360 --> 00:01:52,390
that still works

24
00:01:52,440 --> 00:01:55,620
but now we have a shorter code snippet here,

25
00:01:55,620 --> 00:02:01,330
we have less code which we have to write. Now the same is available for all the other operators,

26
00:02:01,350 --> 00:02:09,330
so instead of this code here with the minus, we can also write minus equal and the same for the multiplication

27
00:02:09,360 --> 00:02:10,110
and division.

28
00:02:10,110 --> 00:02:17,790
So we can take this, multiply this here and also remove that division code here and use this shortcut

29
00:02:17,940 --> 00:02:25,400
and with that if we save that, you'll see that now as I reload this, we can add, we can subtract,

30
00:02:25,590 --> 00:02:31,260
we can multiply and we can also divide. This all works,

31
00:02:31,260 --> 00:02:39,310
now with this shorter code thanks to these shortcuts. Now there also are other shortcuts or other shorthand

32
00:02:39,370 --> 00:02:48,250
operators as they're also sometimes called, if you have let's say the case that you want to set a new

33
00:02:48,250 --> 00:02:54,610
value to a variable, let's say to current result and that is the current value plus one,

34
00:02:54,610 --> 00:02:58,310
so exactly plus one, which we of course don't need here

35
00:02:58,330 --> 00:03:05,650
but imagine we had that case, then instead of writing this, you can also write current result plus

36
00:03:05,650 --> 00:03:08,740
plus. The same is available for minus,

37
00:03:08,740 --> 00:03:11,330
we can write current result minus minus.

38
00:03:11,800 --> 00:03:17,010
It's not available for multiplication or division because, what would that be,

39
00:03:17,110 --> 00:03:18,910
multiply the number with one?

40
00:03:19,150 --> 00:03:22,050
Well that's the same number and the same for division, right?

41
00:03:22,180 --> 00:03:26,650
But adding one or subtracting one, that makes sense

42
00:03:26,800 --> 00:03:34,810
and with this increment or decrement operator as it's called, that is possible in a very short way.

43
00:03:34,810 --> 00:03:40,630
So if we do that here and I comment out this line for the moment, this by the way is a common pattern, that

44
00:03:40,630 --> 00:03:47,320
you use comments to temporarily remove some code which you then can re-add later but since comments

45
00:03:47,350 --> 00:03:53,500
are ignored, you can kind of temporarily remove code by commenting it out as it's called.

46
00:03:53,500 --> 00:04:00,010
So if we do that and we therefore only reduce current result by one, if we click add, you will see that now

47
00:04:00,010 --> 00:04:05,800
if I don't enter anything here because I'm not using the value anyways right now, if I add a plus, you

48
00:04:05,800 --> 00:04:10,930
have a result of minus one, we can ignore this NaN thing for now, here the result is the thing

49
00:04:10,930 --> 00:04:11,700
that matters.

50
00:04:11,740 --> 00:04:17,500
So this gets lower and lower, always by one each time I click the plus button because we're decrementing

51
00:04:17,570 --> 00:04:25,660
this here. Little side note, you could also write minus minus or plus plus in front of the variable,

52
00:04:25,960 --> 00:04:30,710
and it will actually have a small impact or a small difference,

53
00:04:30,790 --> 00:04:36,340
not if you just use it like this to change the value but if you're interested in the return type of

54
00:04:36,370 --> 00:04:37,540
this operation,

55
00:04:37,540 --> 00:04:43,900
if you add plus plus in front of this, it will actually add it to current result by adding one, just as it

56
00:04:43,900 --> 00:04:50,380
does if you add it thereafter. If you have plus plus or minus minus in front of this variable, then this

57
00:04:50,380 --> 00:05:00,490
operation returns the edited value, if you have it after the variable, well then this returns the value

58
00:05:00,490 --> 00:05:03,250
of the variable before it was changed.

59
00:05:03,250 --> 00:05:10,390
Now here we're not using the return value but if we would alert that return value, it still changes

60
00:05:10,390 --> 00:05:13,680
current result always in the same way by adding one

61
00:05:13,720 --> 00:05:19,120
but this operation returns a new value which you can or cannot use, depending on whether you want to use

62
00:05:19,120 --> 00:05:19,750
it.

63
00:05:19,750 --> 00:05:22,850
So here for example, I'm using it by outputting it with the alert

64
00:05:22,990 --> 00:05:26,830
and if we do that and I reload here, you see I get one here,

65
00:05:26,920 --> 00:05:30,150
so I get the result after the change.

66
00:05:30,370 --> 00:05:39,070
If I add the pluses at the end here and I repeat here, save this and reload, then I get it before the

67
00:05:39,070 --> 00:05:44,830
change. So this plus plus and minus minus operator return something,

68
00:05:44,830 --> 00:05:50,900
it returns the value before or after the change depending on where you add the pluses and minuses.

69
00:05:50,980 --> 00:05:57,200
Again in many cases, that doesn't matter because the variable itself is always edited in the same way,

70
00:05:57,250 --> 00:06:00,550
it just makes a difference regarding the value which is returned.

71
00:06:00,700 --> 00:06:05,520
Now of course here, I'm not interested in incrementing this so I'll just remove that line and comment

72
00:06:05,550 --> 00:06:09,400
this back in, by the way in case you're wondering how I did this so quickly,

73
00:06:09,460 --> 00:06:18,040
I use the shortcut here in my IDE, under edit, you can use toggle line comment to add or remove

74
00:06:18,040 --> 00:06:21,820
a comment and to quickly comment code in or out.

75
00:06:21,880 --> 00:06:28,570
So these are some additional operators which I recommend that you keep in mind and that therefore completes

76
00:06:28,630 --> 00:06:35,080
our list of operators which we are aware of for now with these shorthand operators and the increment

77
00:06:35,120 --> 00:06:35,830
and decrement

78
00:06:35,860 --> 00:06:36,460
operator.
