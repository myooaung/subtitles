WEBVTT
1
00:00:02.240 --> 00:00:06.800
Now one important additional word about prototypes in Javascript.

2
00:00:06.800 --> 00:00:08.500
They're essentially everywhere

3
00:00:08.570 --> 00:00:14.750
and we have also taken advantage of them in the course already without knowing that we did so, for example

4
00:00:14.750 --> 00:00:16.250
with all the array methods

5
00:00:16.250 --> 00:00:26.030
I explained to you. If you dive into the MDN docs, you see that the array methods - concat or filter

6
00:00:26.420 --> 00:00:29.670
are actually part of array.prototype,

7
00:00:29.750 --> 00:00:36.580
so they're defined on the fallback object, on the prototype every array is connected to.

8
00:00:36.590 --> 00:00:42.530
So when you create an array with the square brackets for example, you automatically get an array object

9
00:00:42.560 --> 00:00:49.040
which itself does not know these methods but it knows its prototype which in turn is an object that

10
00:00:49.040 --> 00:00:50.790
holds these methods

11
00:00:50.810 --> 00:00:57.050
and here of course you also find all available methods on that prototype including some methods which

12
00:00:57.050 --> 00:01:00.350
I didn't have a closer look at in this arrays module.

13
00:01:00.590 --> 00:01:02.630
And it's not just arrays,

14
00:01:02.870 --> 00:01:05.590
it's also the case for strings for example.

15
00:01:05.720 --> 00:01:09.900
Now strings are kind of a special type because they're primitive values

16
00:01:10.040 --> 00:01:17.410
but as I explained, they still kind of behave like objects when you do call a method on them,

17
00:01:17.450 --> 00:01:23.810
some Javascript internal and therefore here, we also got a string prototype which is then utilized in

18
00:01:23.810 --> 00:01:31.220
the end which holds methods that help us with strings, something like slice for example which we also

19
00:01:31.220 --> 00:01:38.000
know from arrays but also string exclusive methods like replace or split which we saw in the array

20
00:01:38.030 --> 00:01:42.810
course section and that's in general a pattern you'll see throughout Javascript.

21
00:01:42.920 --> 00:01:51.410
There are a bunch of built-in objects which are used as prototypes, so as fallback objects for other built-in

22
00:01:51.410 --> 00:01:57.290
objects. I'll sporadically come back to that and dive into this when we need to know it, for now

23
00:01:57.290 --> 00:02:03.680
just be aware of that and be aware that this is a core part of Javascript and that it's important for

24
00:02:03.680 --> 00:02:10.010
how fallback methods and dependencies and shared code is managed in Javascript.
