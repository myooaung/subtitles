1
00:00:02,210 --> 00:00:05,180
Now that we know about the heap and the stack,

2
00:00:05,180 --> 00:00:11,840
it's time to dive into a super important concept which even if the rest is not interesting to you, you

3
00:00:11,960 --> 00:00:18,350
absolutely have to understand because it's super important for Javascript and it can be very confusing

4
00:00:18,350 --> 00:00:22,250
when you work with Javascript, when you don't understand this concept.

5
00:00:22,280 --> 00:00:25,640
It's about primitive versus reference values,

6
00:00:25,820 --> 00:00:27,830
now what is that? In Javascript,

7
00:00:27,830 --> 00:00:31,780
we have two categories or types or of values

8
00:00:31,790 --> 00:00:32,780
you could say.

9
00:00:32,780 --> 00:00:35,960
So with that, I don't mean strings and numbers because that would be wrong,

10
00:00:35,960 --> 00:00:39,300
we also have booleans, objects, null, undefined and so on

11
00:00:39,620 --> 00:00:42,670
but I really mean these data types which you already learned about,

12
00:00:42,740 --> 00:00:49,650
so boolean, strings, numbers and objects and so on, these can be categorized into two categories.

13
00:00:49,700 --> 00:00:55,190
We have primitive values and we have reference values and that's an important differentiation which

14
00:00:55,190 --> 00:00:56,770
you need to understand.

15
00:00:56,930 --> 00:01:05,600
Now primitive values are these six types of data - strings, numbers, boolean, null, undefined and symbol which

16
00:01:05,600 --> 00:01:09,380
we haven't learned about which we'll learn about later which is very advanced, it doesn't matter right

17
00:01:09,410 --> 00:01:10,090
now,

18
00:01:10,100 --> 00:01:13,830
these are primitive values in Javascript.

19
00:01:14,240 --> 00:01:20,480
So every number that you create and which you then store in a variable or which you use in a calculation

20
00:01:20,960 --> 00:01:27,370
is created by Javascript or by the browser behind the scenes as a primitive value.

21
00:01:27,590 --> 00:01:32,330
Thus far, that didn't really matter to us and in many cases, it won't matter to you but there will be

22
00:01:32,330 --> 00:01:35,070
one important difference to the reference values later.

23
00:01:35,270 --> 00:01:41,390
So it's stored in memory, normally on the stack because normally these are relatively short living because

24
00:01:42,050 --> 00:01:44,760
Javascript can get rid of them relatively easy,

25
00:01:44,780 --> 00:01:48,800
they're cheap to be recreated so it can easily duplicate them,

26
00:01:48,800 --> 00:01:50,240
this doesn't cost too much,

27
00:01:50,240 --> 00:01:56,780
not much memory is consumed by these values in the end and therefore, they're typically stored in its

28
00:01:56,780 --> 00:01:57,950
stack memory.

29
00:01:57,950 --> 00:02:02,860
Now if you keep that picture in mind where function calls are pushed on top of each other,

30
00:02:02,960 --> 00:02:08,420
remember that I called the stack concept for managing execution contexts,

31
00:02:08,540 --> 00:02:14,900
well you could say each function there has its own execution context, right? The overall script has some

32
00:02:14,900 --> 00:02:21,020
global variables maybe which are part of that anonymous execution context, another function which has

33
00:02:21,020 --> 00:02:27,920
an internal variable has its own execution context. So primitive values typically are stored in the stack.

34
00:02:27,920 --> 00:02:34,220
I'm saying typically because they could be stored in the heap as well if it's a long running operation

35
00:02:34,610 --> 00:02:40,310
and in the end, it's the browser which decides which data ends up where. It actually doesn't even matter

36
00:02:40,340 --> 00:02:45,770
for what I'm explaining here, I just want to briefly mention it here that these primitive values are generally

37
00:02:45,770 --> 00:02:52,230
managed in the stack. More important to us and the key difference between primitive and reference values

38
00:02:52,770 --> 00:02:59,190
is that when you copy a variable, which means you assign it to a new one which holds a primitive value,

39
00:02:59,580 --> 00:03:02,880
then the value is actually copied.

40
00:03:02,890 --> 00:03:07,450
Now we took this for granted thus far but the implication is quite important.

41
00:03:07,510 --> 00:03:12,880
If you open up your browser developer tools console on any web page you want, maybe the one we just

42
00:03:12,880 --> 00:03:16,470
worked on or a brand new one, doesn't matter. In there,

43
00:03:16,540 --> 00:03:22,820
if you create a variable with let, let's say you name it name but that does of course not matter, you

44
00:03:22,820 --> 00:03:28,460
can name it however you want it you store a value of Max or any other string in there, then this obviously

45
00:03:28,460 --> 00:03:30,680
is a primitive value as you just learned,

46
00:03:30,680 --> 00:03:36,110
strings are primitive values and therefore Max is stored in there.

47
00:03:36,110 --> 00:03:42,350
If you now create another variable, another user or whatever you want to name it and you assign name

48
00:03:42,380 --> 00:03:46,130
as a value to that variable, then you're basically telling Javascript

49
00:03:46,220 --> 00:03:49,850
take the value, store the name and store it in another user.

50
00:03:49,850 --> 00:03:52,940
Therefore another user

51
00:03:52,940 --> 00:03:55,640
of course also has Max as a value.

52
00:03:55,640 --> 00:04:04,100
Now it gets interesting, if we now change name to let's say Manuel, so we assigned a new value to that variable.

53
00:04:04,100 --> 00:04:11,360
If we now look into another user though, we see that still is Max and this kind of is what we expected

54
00:04:11,360 --> 00:04:18,440
and what we used thus far throughout the course. Whenever we took some value in a variable or maybe in a parameter

55
00:04:18,440 --> 00:04:25,070
of a function and we stored that in another variable, it was always clear to us that if we change that

56
00:04:25,130 --> 00:04:31,490
original variable, the other variable where we stored it in would not change as well and that's the case

57
00:04:31,490 --> 00:04:38,870
because primitive values are copied by value, which means when we do this assignment here, we're telling

58
00:04:38,930 --> 00:04:46,520
Javascript and the browser, hey take the value which is stored in name, in this variable, create a copy

59
00:04:46,520 --> 00:04:51,140
of it and store that copy in another user.

60
00:04:51,190 --> 00:04:58,060
Don't forget that all data, including strings and numbers needs to be stored in memory somewhere.

61
00:04:58,060 --> 00:05:02,440
Now as I said, typically that's the stack and we don't have to worry too much about where exactly it

62
00:05:02,440 --> 00:05:09,340
is but because it needs to be stored somewhere, it's not obvious or not something we could expect that

63
00:05:09,610 --> 00:05:14,070
Javascript always creates a copy when we want to store it in a new variable,

64
00:05:14,110 --> 00:05:16,470
it could also just tell the variable

65
00:05:16,600 --> 00:05:25,540
well take that exact same value in memory, store it in the same place in memory and store this address

66
00:05:25,570 --> 00:05:29,390
of that place and memory in the variable instead of the value itself

67
00:05:29,550 --> 00:05:35,350
and if that would be the case, then changing variable one should also impact the value stored in variable

68
00:05:35,360 --> 00:05:38,670
two because they're effectively pointing both at the same value

69
00:05:38,740 --> 00:05:42,000
but that's not what's happening with primitive values,

70
00:05:42,010 --> 00:05:45,220
instead there, a real copy is created.

71
00:05:45,220 --> 00:05:47,520
So that's the behavior for primitive values.

72
00:05:47,530 --> 00:05:52,870
Now you can probably already guess what behavior for reference values will be but let's still have a

73
00:05:52,870 --> 00:05:55,660
look, what are reference values to begin with?

74
00:05:55,690 --> 00:06:01,080
Well all other objects or generally, all objects in Javascript.

75
00:06:01,360 --> 00:06:10,150
Now technically if you want to be really correct, string numbers and so on are not objects but are dynamically

76
00:06:10,150 --> 00:06:18,570
transformed to pseudo objects you could say when you do something like name.length.

77
00:06:18,790 --> 00:06:24,520
We have used that before in the course but this gives you the length of the name and with the dot notation,

78
00:06:24,550 --> 00:06:30,550
it kind of implies that we're accessing a property of name which then in turn implies that name would

79
00:06:30,550 --> 00:06:33,040
be an object but it actually isn't,

80
00:06:33,190 --> 00:06:38,680
it's a bit more complex than that and we don't need to dive in all the internals here but in the end

81
00:06:38,680 --> 00:06:45,340
what happens here is Javascript dynamically transforms a string or a number, so any primitive value to

82
00:06:45,340 --> 00:06:51,940
an object temporarily if you use the dot notation on it but other than that, it's a primitive value and

83
00:06:51,940 --> 00:06:57,370
it's always behaving as you see it here in the left no matter if you're temporarily transforming it or

84
00:06:57,370 --> 00:06:58,310
not.

85
00:06:58,360 --> 00:07:06,340
Now all real objects which always stay objects are handled differently because they're more expensive

86
00:07:06,340 --> 00:07:07,000
to create

87
00:07:07,000 --> 00:07:13,480
you could say. A real object which you create on your own or which might be built into the browser and

88
00:07:13,480 --> 00:07:19,660
exposed to you, like that math object where we also called the random function earlier in the course,

89
00:07:20,620 --> 00:07:26,470
well these objects as you can imagine hold a bit more data than just a couple of characters or just

90
00:07:26,470 --> 00:07:27,760
a single number,

91
00:07:28,060 --> 00:07:34,750
they're more complex to manage and therefore creating them takes longer, occupies more memory and so

92
00:07:34,750 --> 00:07:35,840
on.

93
00:07:35,850 --> 00:07:41,650
Therefore the browser typically stores these in the heap but again, the exact allocation logic is something

94
00:07:41,650 --> 00:07:47,450
the browser is responsible for, not you or Javascript but that's what the browser does

95
00:07:47,650 --> 00:07:52,120
and important, a variable then only stores a pointer,

96
00:07:52,270 --> 00:07:58,150
so the address of that place in memory and not the value itself.

97
00:07:58,150 --> 00:08:04,620
For primitive values, a variable really stored the value itself in it, for reference values

98
00:08:04,630 --> 00:08:06,240
that's not the case

99
00:08:06,430 --> 00:08:11,890
and instead the value is stored somewhere in memory, somewhere in the heap and the variables stores

100
00:08:11,890 --> 00:08:14,040
the address of that place in memory,

101
00:08:14,050 --> 00:08:21,670
so a pointer at this place a memory you could say. Therefore if you copy a variable which holds a reference

102
00:08:21,670 --> 00:08:22,220
value,

103
00:08:22,240 --> 00:08:28,900
so if you assign it to a different variable, you only copy the pointer, the reference and not the value

104
00:08:28,900 --> 00:08:30,280
itself.

105
00:08:30,310 --> 00:08:33,100
Now what's the implication of that?

106
00:08:33,140 --> 00:08:34,900
Let's go back to the browser and reload

107
00:08:35,920 --> 00:08:41,340
and now let's create a new array let's say and arrays are just objects.

108
00:08:41,340 --> 00:08:48,250
So here, I have my hobbies array which currently only includes sports and now let's create another variable,

109
00:08:48,490 --> 00:08:54,820
new hobbies or however you want to name it and let's store hobbies in that by assigning it like this.

110
00:08:54,820 --> 00:09:01,180
Now if we output hobbies here, we see that's the sports array and new hobbies of course also is that same

111
00:09:01,180 --> 00:09:01,720
array,

112
00:09:01,750 --> 00:09:06,520
so thus far you could think that the value was copied.

113
00:09:06,530 --> 00:09:08,810
Now let's actually go to hobbies,

114
00:09:08,870 --> 00:09:13,940
so to the original array and push a new element onto it, let's say cooking,

115
00:09:13,940 --> 00:09:17,180
so this new string is pushed onto hobbies.

116
00:09:17,180 --> 00:09:21,510
So if now I output hobbies, I of course get that array with sports and cooking

117
00:09:21,590 --> 00:09:29,060
but as you now probably expect, new hobbies also includes cooking, even though we never touched new hobbies

118
00:09:29,330 --> 00:09:36,970
but it includes this value because when we assigned hobbies to new hobbies, we only copied the pointer,

119
00:09:36,970 --> 00:09:45,650
we only copied the address of that array. So the element itself, the value, the array itself was never duplicated

120
00:09:45,650 --> 00:09:47,030
or copied,

121
00:09:47,030 --> 00:09:53,340
instead we only copied the address and that means if we change one array, we automatically change the other

122
00:09:53,340 --> 00:09:59,350
array because there is nothing like one and the other array, there only is exactly one array in memory

123
00:09:59,600 --> 00:10:06,750
and then both variables hold the same pointer at that place in memory. It's the same for objects by the

124
00:10:06,750 --> 00:10:13,350
way, if we have person here and this person let's say has an age of 30

125
00:10:13,350 --> 00:10:20,610
and then I have another person and I assign person to that, if I then, to mix it up, go to another person

126
00:10:20,610 --> 00:10:27,540
and set the age here to 32, then if we have a look at person, we see there the age changed as well for the

127
00:10:27,540 --> 00:10:29,660
exact same reason.

128
00:10:29,670 --> 00:10:31,370
Now what can we do about that?

129
00:10:31,380 --> 00:10:33,960
Well in general, you don't need to do anything about that,

130
00:10:33,960 --> 00:10:40,920
that is a default behavior for a good reason, to avoid unnecessary duplication of data, to avoid cluttering

131
00:10:40,920 --> 00:10:46,380
your memory, to be more efficient, provide better performance and so on

132
00:10:46,440 --> 00:10:52,410
but of course you sometimes have cases where you need to copy data, where you need to store it somewhere

133
00:10:52,410 --> 00:10:59,190
else and where you want to make sure that if you edit the "copied" in quotes because you're not really

134
00:10:59,190 --> 00:11:00,020
copying it,

135
00:11:00,030 --> 00:11:04,200
so when you're editing the copied data, that the original data isn't.

136
00:11:04,290 --> 00:11:10,100
Now we'll have a closer look at solutions in the arrays and objects

137
00:11:10,110 --> 00:11:15,840
Deep Dive sections which will come soon after this one, where I explain a bit more about the solutions

138
00:11:15,840 --> 00:11:17,010
and how they work.

139
00:11:17,040 --> 00:11:21,480
For now, I'll just quickly show them to you and we'll dive into the details later because right now, we

140
00:11:21,480 --> 00:11:23,240
don't really need that in the course

141
00:11:23,400 --> 00:11:27,020
but I also don't want to hide that solution from you right now.

142
00:11:27,180 --> 00:11:34,420
So let's say we now want to create a real copy in yet another person in this variable and there, I want

143
00:11:34,420 --> 00:11:35,640
to copy person.

144
00:11:35,730 --> 00:11:41,130
Now as you learned, like this it wouldn't work. Now you can use a different syntax, where you create a

145
00:11:41,130 --> 00:11:43,240
new object with curly braces right,

146
00:11:43,260 --> 00:11:45,300
this creates a brand new object

147
00:11:45,690 --> 00:11:51,840
and if you do so, then you can add a brand new operator which we haven't used before and which I'll cover

148
00:11:51,840 --> 00:11:57,990
in more detail in the objects and array sections I just mentioned. It's three dots, which looks rather

149
00:11:57,990 --> 00:12:01,260
strange but this is an operator built into Javascript,

150
00:12:01,260 --> 00:12:03,040
it's called the spread operator

151
00:12:03,270 --> 00:12:05,400
and after that, you can add person.

152
00:12:05,400 --> 00:12:11,700
Now what this operator does is it pulls out all the key-value pairs in person and adds them as new key

153
00:12:11,700 --> 00:12:13,450
value pairs to this new object

154
00:12:13,470 --> 00:12:19,920
and since this is a new object, it's a real copy, it's a new place in memory, new address, the old person

155
00:12:19,920 --> 00:12:20,900
also still is there

156
00:12:20,910 --> 00:12:23,220
but this also is now a new object.

157
00:12:23,220 --> 00:12:29,430
So if we do that, then yet another person of course has the age of 32 but if we now change person.age

158
00:12:29,430 --> 00:12:35,670
back to 30, you will see yet another person still has an age of 32 because now this was a real copy.

159
00:12:37,100 --> 00:12:45,600
Now for arrays, a similar approach exists and if we have our hobbies here with sports and then we have more

160
00:12:45,600 --> 00:12:50,000
hobbies and we want to create a real copy, then we create an empty array,

161
00:12:50,160 --> 00:12:52,180
use that same spread operator,

162
00:12:52,230 --> 00:12:57,990
so the three dots and then the existing array and now just as it pulled out the key-value pairs for

163
00:12:57,990 --> 00:13:03,960
the object, here it basically pulls out all the elements of the array and adds them as elements to this

164
00:13:04,050 --> 00:13:07,500
new array which we create with the help of the square brackets.

165
00:13:07,500 --> 00:13:14,400
So therefore now if I go to hobbies and I push cooking as a new hobby onto that array,

166
00:13:14,530 --> 00:13:15,910
you'll see that more hobbies

167
00:13:15,910 --> 00:13:17,790
still only has sports. Again

168
00:13:17,860 --> 00:13:20,140
that's the quick introduction to that solution,

169
00:13:20,140 --> 00:13:28,280
a closer look at the spread operator will be taken in the arrays and objects modules. So now that we covered reference

170
00:13:28,280 --> 00:13:29,330
and primitive types,

171
00:13:29,330 --> 00:13:35,690
we can also dive in to something else which I already showed earlier but where we had no great explanation

172
00:13:35,690 --> 00:13:38,240
of why that was happening.

173
00:13:38,240 --> 00:13:44,330
I'm talking about a use case where we have maybe a person, let's name it person1, where the age is

174
00:13:44,330 --> 00:13:51,410
30 and then another person2, where I don't assign person1 but I instead create another new object

175
00:13:51,410 --> 00:13:54,680
with curly braces where the age is also 30.

176
00:13:54,800 --> 00:14:01,370
So to us these are exactly the same objects and still if I perform a boolean comparison here with either

177
00:14:01,370 --> 00:14:06,030
two or three equal signs, doesn't matter, you'll see the result is false,

178
00:14:06,050 --> 00:14:07,400
so they're not equal.

179
00:14:07,790 --> 00:14:09,530
Well now this makes a lot of sense,

180
00:14:09,530 --> 00:14:16,690
keep in mind that what we actually stored in person1 and person2 is a pointer at a place in memory

181
00:14:16,910 --> 00:14:22,970
and these are two totally different objects, even though they hold the same data but they are two different

182
00:14:22,970 --> 00:14:30,130
distinct objects stored in different places, so at different addresses, in memory and since person1

183
00:14:30,130 --> 00:14:36,080
stores the address of this object and person2 stores the address of this object and these are

184
00:14:36,080 --> 00:14:37,510
two different objects,

185
00:14:37,550 --> 00:14:43,250
we have two different addresses and therefore if we compare person1 to person2, what we effectively

186
00:14:43,250 --> 00:14:50,860
compare is whether the address of person1 is equal to the address of person2 and that is not the case.

187
00:14:50,960 --> 00:14:53,690
This is why we get this false result here and

188
00:14:53,690 --> 00:14:56,920
this is why they're not equal, because of that reference type thing

189
00:14:57,110 --> 00:15:04,160
and it's the same for comparing arrays. Another important implication which also can be confusing when

190
00:15:04,160 --> 00:15:06,230
you work with reference types

191
00:15:06,230 --> 00:15:10,620
is this one. Previously I created hobbies with let, right,

192
00:15:10,910 --> 00:15:17,600
now here's something which might confuse you. If I create it with const hobbies and I have an array there

193
00:15:17,600 --> 00:15:26,100
which includes sports and nothing else, then let me try to push something onto hobbies, let's say cooking.

194
00:15:26,100 --> 00:15:28,300
Would you expect that this works?

195
00:15:28,310 --> 00:15:29,810
Keep in mind that it's a constant

196
00:15:29,810 --> 00:15:36,990
so we can't change the value after it has been created. Well you might expect an error therefore and

197
00:15:36,990 --> 00:15:39,680
yet if I hit enter, we get no errors

198
00:15:39,810 --> 00:15:42,850
and if I have a look at hobbies, we see cooking was added.

199
00:15:42,900 --> 00:15:45,110
So how does that work?

200
00:15:45,120 --> 00:15:51,990
Well again keep in mind, this array gets created somewhere in memory and what's getting stored in hobbies

201
00:15:52,290 --> 00:15:55,740
is the address of that array or of that object,

202
00:15:55,740 --> 00:16:01,520
arrays are objects as you learned, so the address is getting stored in this constant.

203
00:16:01,530 --> 00:16:08,790
Now when we call push, we certainly do manipulate the data in memory but what do we not manipulate? The

204
00:16:08,790 --> 00:16:09,420
address,

205
00:16:09,450 --> 00:16:16,110
it's still the same address. The data in memory changed but it's still at the same address, maybe more

206
00:16:16,110 --> 00:16:17,880
memory was allocated to it,

207
00:16:18,180 --> 00:16:23,520
that's something the browser does but we don't care, we don't care if more memory was allocated, the address

208
00:16:23,520 --> 00:16:24,360
is the same.

209
00:16:24,360 --> 00:16:29,730
So in this constant, the value never changed because the value is the address and the address didn't

210
00:16:29,730 --> 00:16:32,490
change, just the data behind the address

211
00:16:32,490 --> 00:16:34,200
but that's not what's getting stored here,

212
00:16:34,230 --> 00:16:39,240
therefore here we can change this like this without getting an error.

213
00:16:39,240 --> 00:16:43,500
It's different if we try to assign a new array like this here,

214
00:16:43,590 --> 00:16:45,300
sports, running.

215
00:16:45,450 --> 00:16:48,180
If I try to do that, I will get an error,

216
00:16:48,180 --> 00:16:49,180
why?

217
00:16:49,260 --> 00:16:54,050
Because we used the equal sign here and that means we try to assign a new array.

218
00:16:54,060 --> 00:16:58,890
Now of course as you learned, the array will never really be stored in there but what matters is that

219
00:16:58,890 --> 00:17:04,500
we do indeed create a brand new array here, which means a brand new place in memory, a brand new address

220
00:17:04,830 --> 00:17:09,260
and therefore Javascript tries to store a brand new address in hobbies.

221
00:17:09,270 --> 00:17:14,980
So now the value of hobbies would get changed and that indeed is not allowed because it's a constant.

222
00:17:15,030 --> 00:17:22,530
So using constants with a single equal sign to assign a new value is never allowed but changing the

223
00:17:22,620 --> 00:17:24,930
objects which might be stored in them,

224
00:17:25,230 --> 00:17:28,390
that is allowed as long as you use something like push.

225
00:17:28,410 --> 00:17:33,570
Now of course, you can't change primitives stored in constants because these are not stored in memory

226
00:17:33,570 --> 00:17:38,250
and there is no address stored in the constant but instead the real value is stored in it

227
00:17:38,490 --> 00:17:41,220
but for objects and arrays, this works.

228
00:17:41,280 --> 00:17:47,220
So just to also give you an object example, if person would be stored in a constant and I set the age

229
00:17:47,220 --> 00:17:54,630
to 30, I can of course output it but I can also access the age and set it to 32 and if I now output

230
00:17:54,630 --> 00:17:55,350
person,

231
00:17:55,350 --> 00:17:59,070
this would work because now I only change data in memory.

232
00:17:59,070 --> 00:18:05,580
You could argue that I am using the single equality operator, so the assignment operator here but I am

233
00:18:05,610 --> 00:18:09,140
using it on age, not on person,

234
00:18:09,150 --> 00:18:09,390
right,

235
00:18:09,390 --> 00:18:15,560
I'm not saying person is equal to something, that would fail if I set person to a new object,

236
00:18:15,660 --> 00:18:21,990
this would fail but I'm setting age inside of the person to a new value, not person itself.

237
00:18:21,990 --> 00:18:27,300
So I'm only setting a part of the data stored in memory to a new value just as we did it with the array

238
00:18:27,300 --> 00:18:34,500
a second ago and therefore the data in memory certainly changes, the address does not and therefore the

239
00:18:34,500 --> 00:18:38,510
address stored in the constant person also does not change.

240
00:18:38,850 --> 00:18:45,920
I'm really emphasizing this because it is such a crucial concept and that can lead to a lot of confusion.

241
00:18:46,110 --> 00:18:52,590
Constant, arrays and objects which suddenly change are a common source of confusion and the same is true

242
00:18:52,590 --> 00:18:58,620
for data which you change in place A and it suddenly also changes in place b because people forgot or

243
00:18:58,620 --> 00:19:04,650
never were aware that there is something like reference values which really matters a lot because it

244
00:19:04,650 --> 00:19:06,490
explains all that behavior.

245
00:19:06,540 --> 00:19:12,270
So this is a must know when you work with Javascript and I hope that these lectures really made it clear

246
00:19:12,600 --> 00:19:19,560
what primitive values and reference values are, how they work, how they behave, why they are important, why

247
00:19:19,560 --> 00:19:21,840
they are useful and how you work with them.
