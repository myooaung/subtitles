WEBVTT
1
00:00:02.300 --> 00:00:05.380
For methods, as we investigated before,

2
00:00:05.380 --> 00:00:09.620
the interesting thing is that the method itself is not part of the person object,

3
00:00:09.620 --> 00:00:12.010
this object only has the two properties.

4
00:00:12.020 --> 00:00:13.790
This method is not part of it,

5
00:00:14.390 --> 00:00:16.840
instead the method is part of its prototype,

6
00:00:17.060 --> 00:00:23.660
so this prototype was added automatically so to say, it's that default prototype which then in turn also

7
00:00:23.660 --> 00:00:27.090
points at yet another prototype which holds our base class object.

8
00:00:27.140 --> 00:00:32.460
So we got two prototypes instead of one which you might have expected based on our inheritance.

9
00:00:32.510 --> 00:00:38.160
Now this setup is a setup Javascript does for us so to say for a good reason.

10
00:00:38.180 --> 00:00:45.250
The idea here is that when we create instances of person, we want to have different property values, here

11
00:00:45.260 --> 00:00:50.210
actually all persons we create have the same name and the name age because it's hardcoded in the class

12
00:00:50.690 --> 00:00:54.470
but often you want to assign different data, different values

13
00:00:54.500 --> 00:00:56.120
you store in your objects.

14
00:00:56.120 --> 00:01:00.170
Now methods on the other hand typically are the same across all objects,

15
00:01:00.170 --> 00:01:07.190
the logic you have in here might refer to your data but it does so in a way that different data

16
00:01:07.190 --> 00:01:10.700
is reflected automatically because we didn't hardcode the data in here,

17
00:01:10.700 --> 00:01:14.830
instead we refer to the properties which in turn might hold dynamic data.

18
00:01:15.050 --> 00:01:20.390
So the function logic typically does not change from object to object,

19
00:01:20.390 --> 00:01:27.710
it typically is the same and therefore Javascript adds a little optimization for us here. By adding the

20
00:01:27.710 --> 00:01:36.200
method to a prototype, it makes sure that when ever we create a new person object, we use the same prototype

21
00:01:36.200 --> 00:01:37.730
fallback object.

22
00:01:37.770 --> 00:01:43.250
It's a little optimization which leads to less objects being created, which means less memory usage and

23
00:01:43.250 --> 00:01:49.670
of course less performance because creating objects costs performance, so less performance impact

24
00:01:49.670 --> 00:01:52.100
I should say and I can prove this to you.

25
00:01:52.100 --> 00:02:01.970
If I create another object, p2, another new person and now we check if the prototype of p is the same with

26
00:02:01.970 --> 00:02:03.860
the triple equality operator,

27
00:02:03.860 --> 00:02:09.440
not that it would matter with objects but anyways, then you will see that we will get true here as a

28
00:02:09.440 --> 00:02:15.740
result if I reload this. We get true because they're using the exact same object, not an object that's

29
00:02:15.740 --> 00:02:17.410
created in the same way,

30
00:02:17.480 --> 00:02:20.640
no the exact same object in memory.

31
00:02:20.660 --> 00:02:26.390
So by adding that method to that exact same object, we can share that object and hence it only needs

32
00:02:26.390 --> 00:02:27.550
to be created once

33
00:02:27.710 --> 00:02:35.280
even if we add 100 persons, so that saves memory and performance. So that's a little optimization we get

34
00:02:35.280 --> 00:02:37.680
here when we add a method like this.

35
00:02:38.260 --> 00:02:43.980
The equivalent if we would build it on our own therefore would be that we don't create a constructor

36
00:02:43.980 --> 00:02:53.160
function like that where we set up this as a property in the constructor function but that instead, we

37
00:02:53.160 --> 00:02:57.930
add it here on the prototype of our constructor function,

38
00:02:57.930 --> 00:03:04.860
so on this blueprint for the fallback value so to say. If we do that, then we make sure that greet is

39
00:03:04.860 --> 00:03:07.200
only created once, it's created here

40
00:03:07.200 --> 00:03:12.960
when Javascript executes this code block, when it executes the script and thereafter whenever we build

41
00:03:12.960 --> 00:03:19.410
a new object, a new person based on this constructor function, only this code is re-executed over and

42
00:03:19.410 --> 00:03:20.110
over again,

43
00:03:20.190 --> 00:03:23.960
only these values are recreated over and over again,

44
00:03:23.970 --> 00:03:26.310
this function is not recreated, instead

45
00:03:26.340 --> 00:03:31.110
every new person just gets this prototype assigned and therefore has access to this function.

46
00:03:31.140 --> 00:03:35.250
So this here is basically equivalent to this setup here

47
00:03:35.250 --> 00:03:37.780
you could say, without the extends keyword.

48
00:03:37.800 --> 00:03:41.630
So now this class is equivalent to this setup down there,

49
00:03:41.640 --> 00:03:45.590
that's what Javascript does for us and it's a little optimization.

50
00:03:45.870 --> 00:03:55.370
Now the code we had before, where I added greet like this here inside of my constructor function could

51
00:03:55.370 --> 00:03:58.570
also be rebuilt here in my class.

52
00:03:58.580 --> 00:04:06.170
Option number one is to go into the constructor and here say this greet equals function something, option

53
00:04:06.170 --> 00:04:12.680
number two is to use a field where you don't use the method shorthand because that method shorthand

54
00:04:12.710 --> 00:04:20.900
is the trigger for Javascript to do that optimization but instead, you use an equal sign here and then

55
00:04:20.930 --> 00:04:26.900
assign a function and it doesn't matter if it's an arrow function or a function created like this.

56
00:04:26.900 --> 00:04:31.780
If you do that, if you create that method like this, you can call it like before,

57
00:04:31.780 --> 00:04:33.210
you'll not see a difference.

58
00:04:33.230 --> 00:04:41.210
If I comment this normal constructor function out and I go back down to my code, p.greet will work,

59
00:04:41.210 --> 00:04:47.680
this will work just fine and by the way I now also have to remove super because I'm not extending anything

60
00:04:47.680 --> 00:04:52.600
anymore but this will work just fine. If we reload,

61
00:04:52.600 --> 00:04:59.030
we see that output here but technically something different will be happening here.

62
00:04:59.120 --> 00:05:08.230
If I console log p here, you will see that now in that object, greet is part of this object itself, no

63
00:05:08.230 --> 00:05:16.690
longer part of the prototype and that means that this function here is indeed created for every instance

64
00:05:16.780 --> 00:05:17.650
of this object,

65
00:05:17.650 --> 00:05:20.040
every instance based on this class.

66
00:05:20.040 --> 00:05:26.260
Now that means that we occupy more memory and a creation of such an object of course also costs some

67
00:05:26.260 --> 00:05:27.430
performance.

68
00:05:27.430 --> 00:05:33.310
Now it of course depends on the app you're building, in many apps that might not matter a bit because whenever

69
00:05:33.310 --> 00:05:40.390
I say it costs performance and it occupies memory, of course I'm talking about milliseconds or less of

70
00:05:40.390 --> 00:05:41.730
performance impact

71
00:05:41.860 --> 00:05:47.310
and of kilobytes or less than kilobytes of memory impact.

72
00:05:47.320 --> 00:05:49.810
So we're not talking about a huge impact,

73
00:05:49.840 --> 00:05:54.190
so doing this here is not necessarily false or super bad,

74
00:05:54.760 --> 00:05:59.620
I just want you to understand that there is a difference and typically you might want to avoid doing that.

75
00:06:00.250 --> 00:06:05.890
However a common use case where this can be helpful is if you use an arrow function here because then

76
00:06:06.130 --> 00:06:11.510
this will actually guarantee you that this in there refers to your surrounding class.

77
00:06:11.560 --> 00:06:15.890
So if you then for example bind this to an event listener or something like that,

78
00:06:16.030 --> 00:06:24.940
this can be easier than using this more correct syntax where you then have to use the bind method to

79
00:06:24.940 --> 00:06:28.780
bind this correctly when assigning this to an event listener,

80
00:06:28.780 --> 00:06:36.010
that's a small scenario where this might be good to use, this plus bind will actually still be a bit

81
00:06:36.010 --> 00:06:41.860
better from a performance perspective but due to the better readability this approach has versus this

82
00:06:41.860 --> 00:06:48.580
this plus adding bind on some event listening code might lead to this being used despite it being a

83
00:06:48.580 --> 00:06:54.280
bit worse but since the performance and memory impact is so marginal, if you're not building hundreds

84
00:06:54.280 --> 00:06:57.040
or thousands of persons, it might really not matter

85
00:06:57.070 --> 00:07:00.170
and then using this might be beneficial.

86
00:07:00.180 --> 00:07:04.260
Here is the example I meant, if we have some button

87
00:07:07.660 --> 00:07:11.410
which I get by ID, btn let's say

88
00:07:11.410 --> 00:07:19.890
and then we add an event listener here, a click event listener and we bind this to p.greet and I quickly

89
00:07:19.950 --> 00:07:28.950
add this button here to the index.html file, greet me, then you will see that with this button and

90
00:07:28.950 --> 00:07:35.220
the event listener added, if I use this arrow function syntax and the syntax where I store it in a property

91
00:07:35.250 --> 00:07:38.430
instead of using the shorthand and by the way in case you're wondering,

92
00:07:38.440 --> 00:07:41.610
note the shorthand is not available for arrow functions.

93
00:07:41.610 --> 00:07:44.910
So if I use this syntax, you will see that it works,

94
00:07:44.910 --> 00:07:46.630
just one thing before I forget it,

95
00:07:46.650 --> 00:07:50.600
of course I need to add that btn ID here to the button,

96
00:07:51.060 --> 00:07:57.330
so let's add that and now if I add this and I run this code, reload here, you will see that if I click

97
00:07:57.360 --> 00:08:00.320
greet me, this works as we would expect

98
00:08:00.330 --> 00:08:02.430
or how we would want it to behave

99
00:08:02.700 --> 00:08:04.510
and now this is what I meant.

100
00:08:04.530 --> 00:08:11.500
If we instead use the more correct shorthand here, this will not work because this will now refer to

101
00:08:11.500 --> 00:08:16.780
the button and not to the class because of how event listeners work and how this works,

102
00:08:16.780 --> 00:08:18.590
so here you see Hi I am

103
00:08:18.940 --> 00:08:21.010
and I am undefined years old,

104
00:08:21.070 --> 00:08:27.550
so this is then that part where you could of course use bind here and here, not bind this but bind it

105
00:08:27.580 --> 00:08:31.770
to p so that this inside of greet refers to p,

106
00:08:31.900 --> 00:08:36.490
this would work and therefore if I save that, of course that is a perfect alternative,

107
00:08:36.520 --> 00:08:43.930
we get the desired result but this is a bit harder to read so you might prefer this here but it's personal

108
00:08:43.930 --> 00:08:45.740
preference of course.

109
00:08:46.150 --> 00:08:51.400
Bind here takes a bit less performance typically than using this approach,

110
00:08:51.400 --> 00:08:57.130
so this plus bind is preferable but that is something you can use if you're not creating thousands of

111
00:08:57.130 --> 00:08:58.470
objects.

112
00:08:58.480 --> 00:09:04.870
Here's a summary which you also find attached for creating methods in classes or in constructor functions,

113
00:09:04.870 --> 00:09:11.290
we got three different ways - we can use the method shorthand in classes like this and this will then

114
00:09:11.320 --> 00:09:16.960
automatically by Javascript be assigned to the prototype of person and be shared across all instances,

115
00:09:16.960 --> 00:09:19.530
hence it's not recreated per instance

116
00:09:19.780 --> 00:09:26.500
or we use a property function or a property arrow function which also helps us with this, a normal property

117
00:09:26.500 --> 00:09:32.680
function will not help us with this. A property function would look like this in a class, a property arrow

118
00:09:32.680 --> 00:09:33.910
function like this,

119
00:09:33.910 --> 00:09:39.490
alternatively you can always also add it in a constructor function as shown in the constructor part of

120
00:09:39.490 --> 00:09:46.390
these code snippets here and here, we of course create a new function for every object which is also

121
00:09:46.390 --> 00:09:52.230
why we get help with arrow functions and this and therefore this might be helpful

122
00:09:52.240 --> 00:09:57.940
but again it costs some performance, so it's typically not recommended but if you're not creating thousands

123
00:09:57.940 --> 00:10:01.590
of these objects, it should be fine in most applications.

124
00:10:01.780 --> 00:10:03.910
So just something to be aware of,

125
00:10:03.970 --> 00:10:09.550
more important of course is that you generally understand the idea of prototypes and what Javascript

126
00:10:09.550 --> 00:10:14.100
does there and what class is and extends and so on does for you there.
