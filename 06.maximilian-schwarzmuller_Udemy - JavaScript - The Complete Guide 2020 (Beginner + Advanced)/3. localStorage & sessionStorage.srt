1
00:00:02,410 --> 00:00:05,460
So let's dive into these different storage mechanisms. For this,

2
00:00:05,470 --> 00:00:11,760
again you find a very basic application attached or a basic starting project I should say, index.html

3
00:00:11,770 --> 00:00:16,570
file with two buttons, some styles and an empty Javascript file,

4
00:00:16,570 --> 00:00:19,570
if you load that, you should see this here.

5
00:00:19,570 --> 00:00:25,080
Now this is what we'll work with and I'll briefly walk you through all three storage systems,

6
00:00:25,120 --> 00:00:29,740
this module here should only act as an introduction, if you want to dive deeper into these different

7
00:00:29,740 --> 00:00:35,320
storage systems, especially into IndexedDB which can be quite complex depending on what you want to

8
00:00:35,320 --> 00:00:36,040
do with it,

9
00:00:36,160 --> 00:00:41,260
then of course as always you'll find further resources in the last lecture of this module.

10
00:00:42,100 --> 00:00:48,570
So I want to start with local storage and session storage and I'll also show the difference there,

11
00:00:48,580 --> 00:00:50,750
let's start with local storage.

12
00:00:50,770 --> 00:00:57,310
Local storage is a great, easy to use key-value storage where you can store basic data.

13
00:00:57,400 --> 00:01:04,780
Let's say you have some userId for the user of this web application, so the user using your site on

14
00:01:04,780 --> 00:01:10,320
this machine which you want to store in local storage so that you can attach it to every request you're

15
00:01:10,330 --> 00:01:14,080
sending to your server to identify that user.

16
00:01:14,080 --> 00:01:18,310
Now you should be aware by the way that all that data can be manipulated by the user,

17
00:01:18,310 --> 00:01:24,130
so you should never treat this as the single source of truth but instead just as a starting point which

18
00:01:24,130 --> 00:01:27,060
you then could validate with some other mechanisms.

19
00:01:27,070 --> 00:01:34,590
So here we have the userId, u123 let's say and we want to store that in local storage.

20
00:01:34,590 --> 00:01:38,200
You can access local storage by just typing local storage like this,

21
00:01:38,220 --> 00:01:39,920
starting with a lowercase L,

22
00:01:39,960 --> 00:01:43,760
of course it's part of the window object but as you learned, you can omit this

23
00:01:44,070 --> 00:01:46,950
and then here, you have a couple of options.

24
00:01:47,100 --> 00:01:50,190
You can clear it to erase all data that's in there,

25
00:01:50,190 --> 00:01:55,270
you can try to get the data for a specific key if you already stored some value there,

26
00:01:55,320 --> 00:01:59,370
you can have a look at the key at a certain index,

27
00:01:59,370 --> 00:02:05,220
so at the fourth item that is stored in there for example, you can find out how many items, how many

28
00:02:05,220 --> 00:02:08,090
key-value pairs you did store in a local storage.

29
00:02:08,190 --> 00:02:09,880
You can remove a single item,

30
00:02:09,930 --> 00:02:13,050
so if you don't want to clear all of them, you can remove a single item by key

31
00:02:13,170 --> 00:02:14,830
and of course you can set an item

32
00:02:14,850 --> 00:02:16,060
and that's what we'll do here.

33
00:02:16,140 --> 00:02:21,780
We'll call set item and that takes two parameters - first parameter is a key, name of your choice which

34
00:02:21,780 --> 00:02:23,040
has to be a string,

35
00:02:23,070 --> 00:02:29,790
second argument is a value which and that's important also has to be a string or something which Javascript

36
00:02:29,790 --> 00:02:33,110
can convert to a string easily, like a number.

37
00:02:33,120 --> 00:02:40,530
So here we can store that under let's say uid and then as I said, you could pass in a number or

38
00:02:40,530 --> 00:02:49,280
anything which can be converted to a string, here I'll pass in userId. By just doing that,

39
00:02:52,110 --> 00:02:56,890
if we reload this page, that will be in the storage.

40
00:02:56,940 --> 00:03:02,430
Now we can see that in the developer tools in Chrome if you go to the application tab and keep in mind

41
00:03:02,430 --> 00:03:08,660
that every user of your web page is able to do that, not just you the developer. There, under storage

42
00:03:08,670 --> 00:03:14,460
you see a couple of storages, web SQL by the way is deprecated which is why I didn't discuss it

43
00:03:14,460 --> 00:03:15,380
on the slide earlier,

44
00:03:15,390 --> 00:03:17,180
you shouldn't use that anymore.

45
00:03:17,220 --> 00:03:22,380
Other than that, you see the storages I talked about and there if we expand local storage and click on

46
00:03:22,380 --> 00:03:25,500
file here, we see the data I stored here,

47
00:03:25,500 --> 00:03:26,910
that's actually some test data.

48
00:03:26,940 --> 00:03:31,530
I stored earlier. This here is the data we just stored here,

49
00:03:31,590 --> 00:03:36,360
our key and the value for that key and as you saw, I just deleted the test data,

50
00:03:36,360 --> 00:03:41,160
I can also delete this here, simply by hitting the delete key or the backspace on Mac

51
00:03:41,520 --> 00:03:46,370
and that is something every user can do, also every user can add data here,

52
00:03:46,440 --> 00:03:53,760
so you should, as I said, never take this as a single source of truth because this can be manipulated

53
00:03:53,880 --> 00:03:56,610
easily by the users of your application,

54
00:03:56,670 --> 00:04:02,910
it should just be a starting point or hold data you need in your Javascript code to enhance the interface

55
00:04:03,390 --> 00:04:07,490
because of course as you see here, you can interact with that from inside Javascript.

56
00:04:07,530 --> 00:04:12,990
Let's actually wire up our two buttons - the store button and the retrieve button and make sure that

57
00:04:12,990 --> 00:04:15,410
these do the heavy lifting here.

58
00:04:15,480 --> 00:04:22,910
So we have the store button which we get with document get element by ID, store-button was the

59
00:04:22,910 --> 00:04:27,700
ID and the retrieve or retr button which we get with

60
00:04:27,710 --> 00:04:31,430
document get element by ID and then it was retrieve button.

61
00:04:31,430 --> 00:04:33,650
Now we can do something we did many times in this course,

62
00:04:33,650 --> 00:04:38,310
we can add some event listeners to these buttons here,

63
00:04:38,360 --> 00:04:45,380
here I'll just work with a couple of anonymous functions for the retr button and the store button

64
00:04:45,800 --> 00:04:47,720
and in the store button,

65
00:04:47,720 --> 00:04:51,620
we can have our set item code, in the retrieve button,

66
00:04:51,620 --> 00:04:59,620
we can now of course also reach out to local storage and get item by key and here for example get the

67
00:04:59,740 --> 00:05:05,200
uid key, so the userId we stored here and store that result,

68
00:05:05,200 --> 00:05:09,090
it's a synchronous action so it's actually not asynchronous as you could think,

69
00:05:09,130 --> 00:05:11,180
you don't need a promise or a callback here,

70
00:05:11,230 --> 00:05:15,790
this synchronously access the storage and gives you back a data immediately.

71
00:05:15,790 --> 00:05:22,680
So here we then got the extracted ID which I store and we can use it in the very next line already,

72
00:05:22,690 --> 00:05:34,360
we could check if extracted ID is a thing and then output got the ID, dash plus extracted ID,

73
00:05:35,200 --> 00:05:44,790
accidentally added this here and otherwise in the else case, we can output could not find ID,

74
00:05:44,830 --> 00:05:46,340
something like that.

75
00:05:46,360 --> 00:05:50,310
Now with that if we save that, we will see if I click store here,

76
00:05:50,310 --> 00:05:53,210
if you watch the right, that key appears here

77
00:05:53,330 --> 00:05:57,240
and if I click retrieve and we go to the console, we see got the ID.

78
00:05:57,730 --> 00:06:04,350
If I delete that ID in the store here manually from the developer tools and I try to retrieve it, I

79
00:06:04,360 --> 00:06:06,300
of course get could not find ID.

80
00:06:06,820 --> 00:06:11,570
So this is how you can work with local storage and you can see how easy it is to work with it.

81
00:06:11,620 --> 00:06:14,280
Now you can also store more complex data,

82
00:06:14,290 --> 00:06:21,580
yes it has to be a string but keep in mind what you learned about JSON in the HTTP module.

83
00:06:21,790 --> 00:06:30,040
If we had a user object here, which has let's say a name key and an age and maybe also some hobbies, where

84
00:06:30,040 --> 00:06:38,420
we have sports and cooking and we want to store that in local storage, we'll have a problem.

85
00:06:38,480 --> 00:06:44,720
If I access local storage here, call set item and store my user here like this by pointing at that

86
00:06:44,720 --> 00:06:46,130
user constant,

87
00:06:46,130 --> 00:06:53,060
let's see what happens. If I save this and I go back and click store and then I now go to the application tab,

88
00:06:53,990 --> 00:06:59,150
we see actually this object object thing was stored because what actually happens when we store some

89
00:06:59,150 --> 00:07:05,240
data here is that Javascript will call toString on whatever we pass in and for an object, it doesn't

90
00:07:05,240 --> 00:07:11,300
give us human readable or machine readable version of the object, it gives us this square bracket object

91
00:07:11,330 --> 00:07:18,320
object output but what we can do is we can convert this to JSON because JSON actually is a string,

92
00:07:18,320 --> 00:07:21,220
remember it's called JSON.stringify.

93
00:07:21,320 --> 00:07:27,590
Now JSON is this format which also uses curly braces and so on but actually, the entire JSON data and

94
00:07:27,590 --> 00:07:33,800
that's just something you have to know is wrapped into quotes you could say. JSON data is string data,

95
00:07:34,220 --> 00:07:41,420
it's a machine readable string where the content of the string is such an object with the structure and

96
00:07:41,420 --> 00:07:42,080
the rules

97
00:07:42,200 --> 00:07:49,220
I explained in the HTTP module. So therefore we can stringify that data to store our user data in here

98
00:07:49,640 --> 00:07:56,180
and if we then want to get it back, the extracted user, we can of course call JSON parse on the result

99
00:07:56,510 --> 00:08:05,600
of local storage get item for the user key and we could then console log the extracted user and maybe

100
00:08:05,600 --> 00:08:09,590
also first check if we really got it but that's something we can do.

101
00:08:09,620 --> 00:08:15,530
So with JSON.stringify and JSON parse, you can even store more complex data in local storage if you

102
00:08:15,530 --> 00:08:22,720
want. So after reloading here, you'll see now if I click store, I store that here and if we now go to the

103
00:08:22,720 --> 00:08:28,960
console and click retrieve, we correctly retrieved and parse it to the user. Be aware that any methods you added

104
00:08:28,960 --> 00:08:34,390
here will get lost because they're not encoded into JSON and also keep in mind that you don't want

105
00:08:34,390 --> 00:08:40,380
to store overly complex data in local storage because that's just not what it's built for.

106
00:08:40,420 --> 00:08:47,140
In addition you can't rely on the data to persist because users can delete it and browsers also can

107
00:08:47,140 --> 00:08:50,190
delete it if they're running out of disk space for example,

108
00:08:50,200 --> 00:08:56,920
these are things you have to keep in mind. And with that, to finish up the local storage part, let's see

109
00:08:56,920 --> 00:09:03,820
what session storage is about and for that, I'll actually store the userId with session storage and

110
00:09:03,820 --> 00:09:07,610
hence of course also extract it with the help of session storage.

111
00:09:07,630 --> 00:09:12,300
So now for the userId, I'm using session storage instead of local storage.

112
00:09:12,460 --> 00:09:13,540
Now to see what this does,

113
00:09:13,540 --> 00:09:20,120
let's first of all reload the page, go to application and clear uid here for local storage,

114
00:09:20,200 --> 00:09:26,320
we're not accessing it anyways but to be super safe that it's really gone and let's check session storage,

115
00:09:26,320 --> 00:09:33,520
it's empty. Now if I click store, you see the userId added to the session storage, not to local storage

116
00:09:33,610 --> 00:09:39,550
but to session storage because we change the code and if I now retrieve the data and we have a look

117
00:09:39,550 --> 00:09:44,760
at the console, we see we are able to get that data from session storage.

118
00:09:44,780 --> 00:09:50,530
Now if I go back to the application and I reload, you'll see after reloads, the data also still is there

119
00:09:50,530 --> 00:09:57,220
in session storage but now copy the URL, open a new tab and close the existing one and reopen the

120
00:09:57,220 --> 00:09:58,000
page,

121
00:09:58,000 --> 00:10:01,030
so we basically closed the browser and reopened it.

122
00:10:01,090 --> 00:10:03,680
Now you see session storage is empty,

123
00:10:03,730 --> 00:10:09,160
If you check local storage though, the data still is there and that's the difference. Session storage

124
00:10:09,160 --> 00:10:10,010
data lives

125
00:10:10,030 --> 00:10:12,920
as long as your page is open in the browser,

126
00:10:13,030 --> 00:10:18,880
so as long as you have it in an active tab even if you reload the page. Thereafter if you ever close

127
00:10:18,880 --> 00:10:24,550
that tab or close all tabs where your application is running or a close the entire browser,

128
00:10:24,790 --> 00:10:26,560
session storage is cleared.

129
00:10:26,560 --> 00:10:34,210
Local storage survives this, local storage is never cleared unless the user clears it manually or the

130
00:10:34,210 --> 00:10:40,120
browser clears it because it's running out of space or anything like that and that's session storage

131
00:10:40,300 --> 00:10:41,200
and local storage.
