WEBVTT
1
00:00:02.320 --> 00:00:07.510
Now with that however, let's go back to a project and I prepared a basic project which you as always

2
00:00:07.510 --> 00:00:08.800
find attached,

3
00:00:08.800 --> 00:00:13.450
it's actually my snapshot of that project's project

4
00:00:13.450 --> 00:00:18.130
we worked on where we can move projects between two boxes but it's also these events.html

5
00:00:18.130 --> 00:00:21.880
file, the events.css file and events.js file

6
00:00:22.000 --> 00:00:24.030
and these are the files we'll start working on,

7
00:00:24.040 --> 00:00:28.720
so make sure you double click on that events.html file in the Windows Explorer or the Mac finder

8
00:00:28.720 --> 00:00:34.150
to open that because that will give us such a nice button and a couple of other elements which we can

9
00:00:34.150 --> 00:00:39.440
use to start diving into event objects and into events in Javascript in general.

10
00:00:39.550 --> 00:00:44.830
So we get this nice button and if we click it, it doesn't do anything because I haven't added any event

11
00:00:44.830 --> 00:00:46.090
listeners.

12
00:00:46.090 --> 00:00:49.840
Now you learned how you can add an event listener to a button,

13
00:00:50.020 --> 00:00:56.590
you first of all select the button, for example with query selector or with get element by ID and then

14
00:00:56.590 --> 00:01:03.160
you can use the add event listener method which exists on any DOM node basically to attach an event

15
00:01:03.190 --> 00:01:04.190
to it.

16
00:01:04.200 --> 00:01:06.090
Now that is always something you can do

17
00:01:06.130 --> 00:01:07.870
but before we do it like this,

18
00:01:07.870 --> 00:01:11.100
let me also show you two other ways of adding events.

19
00:01:11.140 --> 00:01:17.350
One is a way that is pretty old and which you shouldn't use anymore, still for completeness sake,

20
00:01:17.350 --> 00:01:18.710
I want to show it to you.

21
00:01:18.760 --> 00:01:27.340
You can go right to the HTML node in your HTML code and on there, you can add an attribute, on click and

22
00:01:27.340 --> 00:01:30.150
this is not an arbitrary name chosen by me,

23
00:01:30.160 --> 00:01:34.840
there are various on attributes for different events

24
00:01:34.870 --> 00:01:36.700
this element supports.

25
00:01:36.700 --> 00:01:43.720
So for a button, we've got a lot of those - on blur, on click, on double click, on context menu which is a

26
00:01:43.720 --> 00:01:51.610
right click, on drag, various drag events which I'll dive into later and so on, so a lot of events

27
00:01:51.640 --> 00:01:52.520
we can use there.

28
00:01:52.540 --> 00:01:55.580
Now I'm interested in on click here

29
00:01:55.650 --> 00:02:03.090
and then as a value, you assign some Javascript code which should execute when this event here happens,

30
00:02:03.090 --> 00:02:09.480
so for example here we could throw an alert and say hello there and this would be valid Javascript code,

31
00:02:09.850 --> 00:02:10.240
here

32
00:02:10.260 --> 00:02:15.600
you could also execute a function which is defined in your events.js file if you wanted to or just

33
00:02:15.600 --> 00:02:18.690
write some inline Javascript code as I'm doing it here

34
00:02:18.690 --> 00:02:24.570
and with that if you then reload this page and you click here, you see this alert. Now it's strongly discouraged

35
00:02:24.630 --> 00:02:26.470
that you use this approach,

36
00:02:26.610 --> 00:02:29.560
it makes your project very hard to maintain,

37
00:02:29.850 --> 00:02:36.510
it's completely unexpected that we suddenly find Javascript code in our HTML code, especially when

38
00:02:36.510 --> 00:02:42.180
we have separate Javascript files and it just makes working on your project, especially on bigger projects

39
00:02:42.390 --> 00:02:44.310
much much harder,

40
00:02:44.310 --> 00:02:45.570
so don't mix

41
00:02:45.610 --> 00:02:51.560
HTML and HTML attributes and Javascript code, it's absolutely not a recommended practice.

42
00:02:51.780 --> 00:02:55.220
We should register events in our Javascript file instead,

43
00:02:55.800 --> 00:03:00.360
so here in the events.js file which is getting imported here in the events.html file,

44
00:03:00.870 --> 00:03:08.620
we can get started by selecting our button, for example with document query selector button like this.

45
00:03:08.620 --> 00:03:13.860
Now we have access to the first button we find, which in this case is the only button I have on the page

46
00:03:14.110 --> 00:03:19.180
and now instead of add event listener which you of course can use and which you actually should use, we

47
00:03:19.180 --> 00:03:21.250
also have another way of adding an event,

48
00:03:21.430 --> 00:03:24.630
it's pretty close to what we did here in HTML,

49
00:03:24.700 --> 00:03:26.830
just this time in Javascript,

50
00:03:26.950 --> 00:03:33.340
we can set a value to the on click property, so this on click attribute which I used a second go

51
00:03:33.370 --> 00:03:40.330
basically has a property equivalent and we can set this equal to some code that should be executed when

52
00:03:40.330 --> 00:03:41.980
this event occurs.

53
00:03:41.980 --> 00:03:47.470
Now this always should be set equal to a function, can be an anonymous function like in this case here,

54
00:03:47.710 --> 00:03:50.300
could also be pointing at a named function

55
00:03:50.530 --> 00:03:53.570
and then this function will execute when the event occurs,

56
00:03:53.590 --> 00:04:00.130
so either like this, as I said an anonymous function or we define a named function with either function

57
00:04:00.130 --> 00:04:01.270
definition any way you want,

58
00:04:01.270 --> 00:04:07.390
so either with the declaration or the expression approach, with the function keyword or as an arrow function,

59
00:04:07.660 --> 00:04:16.860
here I'll go for an arrow function and then here we could name this on button click or button click

60
00:04:16.980 --> 00:04:17.490
handler,

61
00:04:17.490 --> 00:04:24.210
both are common naming conventions for naming functions that are triggered upon events, either on

62
00:04:24.510 --> 00:04:32.570
click or something like that or with this handler naming here and then here, I define my function that should

63
00:04:32.570 --> 00:04:36.350
be executed, button was clicked is an alert text

64
00:04:36.350 --> 00:04:43.040
I want to display in that case and then here, we can go to button on click and point at

65
00:04:43.040 --> 00:04:49.190
the button click handler. Don't execute it right away, instead as with the event listener, point at it

66
00:04:49.190 --> 00:04:57.260
like this. If you do that and you now reload, we'll again see that alert. Now this is better than using an

67
00:04:57.320 --> 00:05:02.240
attribute in our HTML code because at least now, it's in a Javascript code

68
00:05:02.330 --> 00:05:08.060
and actually this is fine to use especially in smaller projects but it has one major downside,

69
00:05:08.090 --> 00:05:13.710
we can only add one handler for this kind of event to this element.

70
00:05:13.910 --> 00:05:18.820
So if you want to for example run two different functions upon a click, let's say we have another

71
00:05:18.830 --> 00:05:19.370
function,

72
00:05:22.210 --> 00:05:29.550
another button click handler and here I want to console log

73
00:05:29.760 --> 00:05:35.620
this was clicked, now if I want to add both functions on this button,

74
00:05:35.760 --> 00:05:43.620
we can't do button on click like this twice, well we can but you'll see that now the first function

75
00:05:43.620 --> 00:05:49.970
will never run. So if I now click, I only see the console output here but I don't see the alert

76
00:05:49.970 --> 00:05:54.240
and the reason for that is that I simply override the value which is stored in this property.

77
00:05:54.260 --> 00:05:57.390
So this is not added or appended as a listener,

78
00:05:57.500 --> 00:05:59.990
it's simply overriding the old listener.

79
00:05:59.990 --> 00:06:05.900
Now of course the workaround could be to create a third function which calls these two functions but

80
00:06:05.900 --> 00:06:12.380
that quickly gets cumbersome because then you have no finegrained control over when you want to use

81
00:06:12.380 --> 00:06:16.630
which handler, maybe you want to remove a handler at a later point of time,

82
00:06:16.640 --> 00:06:18.290
that's all pretty tricky.

83
00:06:18.380 --> 00:06:22.850
So you can use this approach but it's also not recommended,

84
00:06:22.850 --> 00:06:28.880
instead it is recommended that you use add event listener as we did it throughout this course because this

85
00:06:28.880 --> 00:06:36.170
allows you to add multiple event listeners to the same element and you also have a remove event listener

86
00:06:37.010 --> 00:06:42.680
function or method which you can use to remove an event listener, which also can be very powerful

87
00:06:42.680 --> 00:06:48.560
in more complex apps, where you might have certain scenarios where under certain circumstances, you want

88
00:06:48.560 --> 00:06:52.540
to remove a listener from an element and then maybe re-add it later,

89
00:06:52.610 --> 00:06:56.840
that's super easy to do with add event listener and remove event listener.
