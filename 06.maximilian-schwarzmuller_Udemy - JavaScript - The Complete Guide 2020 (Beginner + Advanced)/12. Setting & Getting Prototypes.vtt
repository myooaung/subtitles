WEBVTT
1
00:00:02.180 --> 00:00:06.530
So that's almost it for prototypes and constructor functions.

2
00:00:06.540 --> 00:00:14.790
One thing we hadn't had a look at yet is how you can actually change the prototype of an object which

3
00:00:14.790 --> 00:00:21.420
already was created or which you are not creating with your own constructor function.

4
00:00:21.420 --> 00:00:28.380
So here for person for example, we clearly can set the prototype with person.prototype or to be precise,

5
00:00:28.410 --> 00:00:33.100
we could set it to a new object or as we do it here, manipulate the default prototype

6
00:00:33.120 --> 00:00:38.730
but what if you already have an object and you somehow want to change the prototype after it has been

7
00:00:38.730 --> 00:00:45.780
created or you want to create a new object without your own constructor function for whichever reason

8
00:00:45.780 --> 00:00:48.810
and you still want to set a different prototype.

9
00:00:48.820 --> 00:00:55.530
Now let me make it clear that both cases are definitely niche use cases, very advanced use cases,

10
00:00:55.530 --> 00:01:02.010
you might not encounter them every day but you will certainly find some scenarios where it can be useful

11
00:01:02.010 --> 00:01:08.310
if you are able to change the prototype of an existing object or of an object which is not created with

12
00:01:08.310 --> 00:01:10.020
one of your own constructors.

13
00:01:10.020 --> 00:01:12.450
So let's have a look at that case here

14
00:01:12.570 --> 00:01:22.570
and for that actually, I'll comment this here out just so that the console isn't cluttered too much and let's

15
00:01:22.570 --> 00:01:27.340
create a new object here, maybe to mix things up,

16
00:01:27.340 --> 00:01:28.240
name it

17
00:01:28.510 --> 00:01:34.780
course. Now course is an object which I create here with the object literal notation, an alternative

18
00:01:34.780 --> 00:01:43.810
would be to use new object, this built-in object constructor but I'll use the literal notation here and

19
00:01:43.810 --> 00:01:52.450
now in there, let's say a course has a title, Javascript - The Complete Guide and also a rating which of

20
00:01:52.450 --> 00:01:53.380
course is five here.

21
00:01:54.070 --> 00:01:55.150
So that's my course

22
00:01:55.150 --> 00:02:00.860
and now here, I want to call print rating.

23
00:02:00.860 --> 00:02:03.870
Now that should output some information about the rating of the course,

24
00:02:03.980 --> 00:02:09.680
unsurprisingly though if we reload, we just get an error that print rating is not a function because

25
00:02:09.710 --> 00:02:12.490
it's clearly not a method defined on this object

26
00:02:12.650 --> 00:02:18.350
and the prototype of this object also won't help us. If we comment this out for a second,

27
00:02:18.350 --> 00:02:25.400
if we console log course.__proto so that we can have a look at the prototype

28
00:02:25.400 --> 00:02:28.220
that is assigned here and we reload,

29
00:02:28.220 --> 00:02:35.300
we see that is in the end prototype which has a constructor function, which has toString so it's that

30
00:02:35.300 --> 00:02:39.920
default object.prototype thing we already learned about.

31
00:02:40.040 --> 00:02:41.060
So that doesn't help us,

32
00:02:41.060 --> 00:02:47.180
we would want to adjust that prototype and we want to do that after the object has been created because

33
00:02:47.180 --> 00:02:49.550
it clearly has been created already.

34
00:02:49.730 --> 00:02:58.160
We can do this with the object constructor function here, the global object constructor function

35
00:02:58.160 --> 00:03:02.590
and there you have a get prototype and set prototype method.

36
00:03:02.600 --> 00:03:08.330
Now let's first of all have a look at get prototype of and pass in the course and then let's console

37
00:03:08.330 --> 00:03:08.690
log

38
00:03:08.690 --> 00:03:11.010
the result of that,

39
00:03:11.030 --> 00:03:12.400
just like that.

40
00:03:12.410 --> 00:03:16.100
So now I'm using get prototype of of my course object.

41
00:03:16.100 --> 00:03:21.780
If we reload, we get exactly the same output as before when we accessed __proto.

42
00:03:22.100 --> 00:03:29.000
This __proto thing in the end is just an unofficial feature which was implemented

43
00:03:29.000 --> 00:03:36.980
by all browsers actually but it's not really the way you're meant to work with prototypes in Javascript,

44
00:03:37.340 --> 00:03:44.330
it's just due to the evolution of Javascript and that certain methods of interacting with prototypes weren't

45
00:03:44.360 --> 00:03:51.020
always available, that we have this special __proto__property

46
00:03:51.170 --> 00:03:54.680
which can be useful for looking into a prototype.

47
00:03:54.680 --> 00:03:56.440
This here would be the more official way

48
00:03:56.450 --> 00:03:58.460
but of course it's also a bit longer,

49
00:03:58.460 --> 00:04:04.280
so you want to consider using that in code you write where you really need that logic as part of your

50
00:04:04.820 --> 00:04:05.960
code execution.

51
00:04:05.960 --> 00:04:10.910
If you just want to look into the prototype during development, definitely use __proto.

52
00:04:10.900 --> 00:04:18.610
So that's get prototype of, more interesting for us here is clearly set prototype of.

53
00:04:18.620 --> 00:04:23.740
This takes two parameters and the first one is the object where you want to set the prototype,

54
00:04:23.780 --> 00:04:28.090
so my course object here, the second then is a prototype

55
00:04:28.100 --> 00:04:30.830
you want to use and that's the interesting thing now.

56
00:04:30.860 --> 00:04:37.310
Here you can override the prototype that has been assigned to an object after the object was created

57
00:04:37.580 --> 00:04:43.340
and of course this works on any object, you can override the prototype of any object, including objects

58
00:04:43.340 --> 00:04:46.520
that were created based on your own constructor function

59
00:04:46.640 --> 00:04:55.350
and here for example we could then add a print rating method like this and there, output some string

60
00:04:55.350 --> 00:05:00.640
here where we say this.rating and then maybe of five,

61
00:05:00.690 --> 00:05:06.990
so /5 thereafter as a string and thereafter we'll see that this line should of course work because

62
00:05:06.990 --> 00:05:15.400
we set the prototype of course to something new. If we now reload, this output works and we switched the

63
00:05:15.400 --> 00:05:16.340
prototype.

64
00:05:16.840 --> 00:05:22.780
If you would want to keep the original prototype and only add something to it, you could of course use

65
00:05:22.780 --> 00:05:27.840
the spread operator here and access object get prototype

66
00:05:27.850 --> 00:05:31.840
of course, this is a valid use case for the get prototype of method

67
00:05:31.850 --> 00:05:37.020
now because this is not just some quick hack we're using to look into the prototype,

68
00:05:37.030 --> 00:05:40.470
it'll be part of the code we shipped to our end users.

69
00:05:40.510 --> 00:05:46.300
So here I get the current prototype, spread its properties into my new object which will be used as a

70
00:05:46.300 --> 00:05:50.650
new prototype and then add my own print rating method.

71
00:05:50.650 --> 00:05:56.800
So this would be a way of making this work whilst keeping the old prototype object functionality, though

72
00:05:56.800 --> 00:06:03.490
it's also important to keep in mind that since we set the prototype to a new object, that new object which

73
00:06:03.490 --> 00:06:09.760
we set as a prototype will have its own prototype which is also object.prototype.

74
00:06:09.820 --> 00:06:12.610
So actually through that entire prototype chain,

75
00:06:12.610 --> 00:06:18.910
we would have access to toString and so on even without that line here because this object which we

76
00:06:18.910 --> 00:06:23.880
set as a new prototype will have that default object prototype itself

77
00:06:23.890 --> 00:06:29.540
and we wouldn't be able to access anything on that prototype from our course object as well thanks to that

78
00:06:29.560 --> 00:06:33.160
prototype chain where we always go to the next prototype in line

79
00:06:33.340 --> 00:06:39.020
if we can't find a certain property or method on the given object.

80
00:06:39.120 --> 00:06:44.380
So this is how we could set a prototype after the object has been created.

81
00:06:44.400 --> 00:06:50.640
You can also set a prototype for an object which you are creating even if you're not creating it with

82
00:06:50.640 --> 00:06:56.400
your own constructor function. For your own constructor function, you can adjust the prototype like this

83
00:06:56.400 --> 00:06:59.010
here before you create your own objects.

84
00:06:59.010 --> 00:07:04.320
Now if you for some reason don't want to use your own constructor function, you can also create let's

85
00:07:04.320 --> 00:07:13.720
say a student object here, not with the object literal notation and also not with new object but instead

86
00:07:13.720 --> 00:07:19.410
with a new way which I haven't showed you before where you use object.create.

87
00:07:19.540 --> 00:07:22.300
This will actually also create a new object

88
00:07:22.300 --> 00:07:25.050
basically just like this does it,

89
00:07:25.060 --> 00:07:28.990
the object literal notation but with a twist.

90
00:07:28.990 --> 00:07:34.510
Now object create takes a parameter and as you see, it takes an object as a parameter.

91
00:07:34.510 --> 00:07:40.330
Now that's not the object with which it will initialize the object it creates, instead it will basically

92
00:07:40.330 --> 00:07:48.280
create an empty object. The object you pass here as a parameter will be set as a prototype for this initial

93
00:07:48.280 --> 00:07:48.700
object.

94
00:07:49.030 --> 00:07:55.230
So here we could add let's say a printProgress

95
00:07:55.230 --> 00:08:00.660
function where I console log this.progress,

96
00:08:00.660 --> 00:08:08.230
clearly a property which I haven't added anymore and now if we console log student, you'll see that

97
00:08:08.230 --> 00:08:10.560
if we reload this application,

98
00:08:10.720 --> 00:08:16.020
student is an empty object but it has a prototype which has a printProgress method.

99
00:08:16.210 --> 00:08:23.320
So the object you pass to create is set as a prototype for the empty object object

100
00:08:23.380 --> 00:08:24.250
create creates

101
00:08:24.250 --> 00:08:29.800
otherwise. If you then would want to add something to that object, you can do that by using the dot notation

102
00:08:29.800 --> 00:08:30.610
here of course,

103
00:08:30.610 --> 00:08:38.560
for example, a name Max or of course also with the defined property method we already learned about earlier

104
00:08:38.560 --> 00:08:42.790
in the course where you can add a property to an object,

105
00:08:43.030 --> 00:08:51.130
so to student here, let's say the progress property which you then also can configure with such a descriptor

106
00:08:51.310 --> 00:08:59.380
object, where you have configurable, maybe set this to true, enumerable maybe set this to true, a value

107
00:08:59.410 --> 00:09:06.850
of let's say 0.8 to have 80% progress kind of and then also here writable, maybe set this

108
00:09:06.850 --> 00:09:08.770
to false, whatever you want.

109
00:09:08.770 --> 00:09:11.880
So these are different ways of adding properties to an empty object,

110
00:09:11.890 --> 00:09:17.620
the important thing is that object it creates does create such an empty object but it does create it with

111
00:09:17.620 --> 00:09:23.890
a prototype of your choice. Side note, object.create also takes a second argument which would take such

112
00:09:23.890 --> 00:09:29.980
a property descriptor map where you then also could add properties like that in the creation process

113
00:09:30.010 --> 00:09:33.430
if you want to create a non-empty object,

114
00:09:33.480 --> 00:09:37.890
so let me comment that out, here in this object descriptor map

115
00:09:37.890 --> 00:09:43.890
you could also add properties like name and then have an object for every property you want to have added

116
00:09:43.890 --> 00:09:50.760
to this newly created object where here, each object has to describe a property exactly like we do

117
00:09:50.760 --> 00:09:52.110
it down there.

118
00:09:52.110 --> 00:10:03.360
So here you can also add configurable false or maybe true, enumerable true, value Max, the value for the

119
00:10:03.360 --> 00:10:07.590
name property will be Max and writable true.

120
00:10:07.590 --> 00:10:12.870
So that's an alternative to that and thereafter I'll comment that back in so that we also have a progress

121
00:10:13.310 --> 00:10:16.280
and these are simply different ways of creating objects,

122
00:10:16.320 --> 00:10:21.900
obviously not always the ways you will use all the time because they're a bit more complex but they

123
00:10:21.900 --> 00:10:27.930
also give you more features therefore, more flexibility, more power and hence you should definitely be

124
00:10:27.930 --> 00:10:34.320
aware of this object creation methods as well and of objects created in specific because it allows you

125
00:10:34.320 --> 00:10:40.150
to create an object with a different but the default prototype assigned right from the start.

126
00:10:40.200 --> 00:10:42.490
So now just to verify that everything works,

127
00:10:42.630 --> 00:10:48.540
let's reload this and we output the progress here and we see this is the object that was created.

128
00:10:48.540 --> 00:10:50.700
So that is all working

129
00:10:50.700 --> 00:10:55.590
and with that, we learned a lot about prototypes and objects and how to create objects I guess.
