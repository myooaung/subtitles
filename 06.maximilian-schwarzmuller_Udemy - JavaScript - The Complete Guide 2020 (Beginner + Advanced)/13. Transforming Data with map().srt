1
00:00:02,240 --> 00:00:08,190
Now in the end what we did here in the last lecture with ForEach is we transformed the array, right?

2
00:00:08,200 --> 00:00:15,440
We in the end transformed it from an array of prices into an array of objects, where of course also each

3
00:00:15,440 --> 00:00:16,790
price changed.

4
00:00:16,790 --> 00:00:22,100
We can do that with ForEach here but there is an easier way because what we have to do with ForEach

5
00:00:22,110 --> 00:00:29,770
or with for loops is we have to manage our new separate array onto which we push these transformed items,

6
00:00:29,810 --> 00:00:33,300
we can do that but there's a shorter alternative.

7
00:00:33,380 --> 00:00:40,390
So if I copy that and then comment it out and repeat this example, let's get rid of the tax adjusted

8
00:00:40,420 --> 00:00:41,870
prices array like this,

9
00:00:41,960 --> 00:00:45,200
let's get rid of this common here also to save some space

10
00:00:45,200 --> 00:00:52,070
and now instead of ForEach, we can use map, another special method available on arrays.

11
00:00:52,160 --> 00:01:00,740
Now map has the job of taking an array, running a function which has this form on every item in that array

12
00:01:00,860 --> 00:01:08,390
and then and that's important, that function should now return a new element for every element in that

13
00:01:08,390 --> 00:01:11,570
array, a possibly transformed element.

14
00:01:11,570 --> 00:01:16,370
So ForEach, this function which you pass to ForEach doesn't have to return anything, you can do whatever

15
00:01:16,370 --> 00:01:18,830
you want in ForEach. For map,

16
00:01:18,830 --> 00:01:24,350
this function which you pass to it has to do something, has to return something, it has to return the

17
00:01:24,350 --> 00:01:28,530
map that transformed the new element for that array.

18
00:01:29,030 --> 00:01:32,660
So here I would return price object for example

19
00:01:32,660 --> 00:01:37,690
and that means that now this will replace every element in the array on which we call map

20
00:01:37,790 --> 00:01:41,210
with this adjusted element. However that's not totally true,

21
00:01:41,210 --> 00:01:42,880
it doesn't really replace it,

22
00:01:42,980 --> 00:01:45,630
the original array stays untouched,

23
00:01:45,630 --> 00:01:51,740
instead it returns a brand new array with a brand new address in memory where every element has been

24
00:01:51,800 --> 00:01:52,770
changed.

25
00:01:52,820 --> 00:02:01,170
So now here, we can get our tax adjusted prices, store it in a constant

26
00:02:01,230 --> 00:02:05,710
and prices themselves will be untouched as I can prove by logging them here,

27
00:02:05,820 --> 00:02:09,810
tax adjusted prices however will be the transformed

28
00:02:09,820 --> 00:02:12,510
prices with the help of map.

29
00:02:12,510 --> 00:02:19,880
So if we save that and reload here, we see that is the original array, nothing changed there

30
00:02:20,010 --> 00:02:24,830
and here we have the transformed array with our object in there, so that did indeed change.

31
00:02:24,990 --> 00:02:31,260
So map is a really nice method if you want to transform an array because it makes changing elements

32
00:02:31,260 --> 00:02:34,500
and getting a brand new array based on these changed elements

33
00:02:34,500 --> 00:02:36,180
super easy.
