WEBVTT
1
00:00:02.340 --> 00:00:08.640
And with that let's conclude this module with something which is not directly related to classes but

2
00:00:08.640 --> 00:00:11.630
related to objects and to object properties

3
00:00:11.760 --> 00:00:18.560
and where a little bit of a deeper knowledge about objects which we have by now doesn't hurt and that

4
00:00:18.590 --> 00:00:27.230
are object descriptors. Let's create a new object here and that can be a normal object or we always worked

5
00:00:27.230 --> 00:00:28.270
with normal objects

6
00:00:28.280 --> 00:00:32.800
but I mean it can be an object created with the object literal notation.

7
00:00:32.900 --> 00:00:37.180
Don't forget that there, use a colon to separate key name and key value

8
00:00:37.370 --> 00:00:39.950
and then I have my name here,

9
00:00:39.950 --> 00:00:48.560
I also have a method in there using the shorthand where I say console log this name and now we have

10
00:00:48.570 --> 00:00:53.280
person here, we can call greet on person, all is good.

11
00:00:53.340 --> 00:00:58.950
Now actually every property you add and every method you add as well, it's basically a property which

12
00:00:58.950 --> 00:01:02.910
holds a function has a so-called descriptor.

13
00:01:02.960 --> 00:01:07.020
So let me clear that, it's not lost it's just clearing that output here.

14
00:01:07.020 --> 00:01:14.190
We can have a look at the descriptor with object get own property descriptor, then parse in  the object,

15
00:01:14.190 --> 00:01:17.430
person and then the property key,

16
00:01:18.140 --> 00:01:25.100
alternatively call get own property descriptors and just parse in the person or the object,

17
00:01:25.280 --> 00:01:32.050
so in this case the person and what you get back is a new object with the so-called property descriptors.

18
00:01:32.070 --> 00:01:38.000
Now that's some metadata stored behind the scenes by Javascript, it influences how the properties can

19
00:01:38.000 --> 00:01:38.740
be used,

20
00:01:38.810 --> 00:01:44.720
so that some configuration Javascript sets up for you and stores for you which you can change though.

21
00:01:44.870 --> 00:01:46.730
So let's have a look at the name property,

22
00:01:46.730 --> 00:01:47.670
here it is,

23
00:01:47.780 --> 00:01:50.790
we see it has a value of Max, that's what we assigned

24
00:01:50.870 --> 00:01:57.800
but we see three other configuration items as well - configurable, enumerable and writable.

25
00:01:57.860 --> 00:02:04.400
Now this simply means that this property, the name property on the person object holds a value of Max

26
00:02:04.820 --> 00:02:12.440
that we can assign a new value so that it's writable, that it's configurable which means we can for example

27
00:02:12.440 --> 00:02:20.650
delete it and it's enumerable which means it appears in a for/in loop and for greet, we got the same

28
00:02:20.650 --> 00:02:22.720
configuration, we see the value is a function,

29
00:02:22.720 --> 00:02:24.420
other than that it's the same.

30
00:02:24.940 --> 00:02:33.010
Now thus far I haven't talked about that because often, these defaults are OK but sometimes in advanced

31
00:02:33.010 --> 00:02:37.960
programs, you might want to lock down a property, you want to make sure that it can't be written to for

32
00:02:37.960 --> 00:02:38.990
example.

33
00:02:39.280 --> 00:02:48.310
Well to do that, you can use object and then define property, pass in the object person, then your property,

34
00:02:48.400 --> 00:02:49.810
name for example,

35
00:02:49.810 --> 00:02:54.550
so the property you want to change or you want to add, you can also add a new property with that,

36
00:02:54.580 --> 00:02:59.880
here I want to change the property with the name name and you have to pass that in as a string of course

37
00:02:59.890 --> 00:03:05.740
because like that it would be looking for a variable named name and then use the value stored in that

38
00:03:05.740 --> 00:03:09.280
value as a property key it's looking for,

39
00:03:09.280 --> 00:03:17.050
so using string here and then the third argument is an object which describes the descriptors or which

40
00:03:17.050 --> 00:03:19.240
sets the configuration for your object,

41
00:03:19.240 --> 00:03:27.880
so basically an object which can have these four values, every value which you don't set gets false now.

42
00:03:27.890 --> 00:03:35.480
So here I created a new line with shift enter and then for example we can set configurable and make

43
00:03:35.480 --> 00:03:45.010
sure you don't mistype to true and another new line, enumerable to true and in another new line,

44
00:03:45.190 --> 00:03:54.350
value maybe to Max to keep that or of course to person.name to take the current value in there which

45
00:03:54.470 --> 00:03:57.500
is Max and said writable to false

46
00:03:57.500 --> 00:04:01.330
now. If you hit enter, you get the same object as before

47
00:04:01.340 --> 00:04:10.670
but what you'll notice is that if I try to access person.name and set this to Maximilian, person still

48
00:04:10.670 --> 00:04:15.250
has Max in there, it didn't throw an error but it didn't accept the change.

49
00:04:16.390 --> 00:04:19.810
Now this is a way of locking down this property.

50
00:04:19.840 --> 00:04:26.590
Now we can still delete it though with person.name, now person no longer has a name.

51
00:04:26.680 --> 00:04:28.780
We could have prevented this,

52
00:04:28.810 --> 00:04:36.400
I am pressing the up arrow key here to cycle through my past commands by setting configurable to false

53
00:04:36.400 --> 00:04:37.440
for example,

54
00:04:37.450 --> 00:04:39.910
now I'm re-adding the name property,

55
00:04:40.120 --> 00:04:46.990
you see if I output person, name is back, it's undefined because I set it to this value here which of

56
00:04:46.990 --> 00:04:48.350
course didn't exist anymore

57
00:04:48.490 --> 00:04:51.280
but you'll see if I delete person.name,

58
00:04:54.300 --> 00:04:58.020
it's still there because I set configurable to false.

59
00:04:58.080 --> 00:05:01.470
Now enumerable also can be useful to set.

60
00:05:01.470 --> 00:05:13.500
Right now if we add a for/in loop and we go through all keys in person and I then just output my key here, you

61
00:05:13.500 --> 00:05:17.660
will see it outputs greet and name because these are the two properties I have in the end, greet

62
00:05:17.790 --> 00:05:18.410
is a method

63
00:05:18.420 --> 00:05:23.850
but in the end as I said it's just a property which holds a function as a value.

64
00:05:23.850 --> 00:05:29.410
Now often when you use for/in, you want to make sure that functions, methods are not included,

65
00:05:29.460 --> 00:05:36.630
you only want to go through your properties that hold values other than functions and here for example,

66
00:05:36.720 --> 00:05:42.180
using object defined property can be useful again. For name,

67
00:05:42.180 --> 00:05:49.310
I'll set this back to Max but other than that, keep the configuration and set enumerable to true and

68
00:05:49.310 --> 00:05:53.900
actually I'm getting an error now of course because configurable was set to false,

69
00:05:53.900 --> 00:06:02.700
so I kind of broke this object. To fix it, let's simply add name2 here, that works

70
00:06:02.700 --> 00:06:09.870
and now more importantly, I want to go to greet which is that method and there I want to keep the value,

71
00:06:09.880 --> 00:06:12.420
so the value stays person.greet,

72
00:06:12.420 --> 00:06:15.090
so whatever I had stored in there will be kept

73
00:06:15.390 --> 00:06:22.650
but enumerable can be set to false, I'll set configurable to true but enumerable to false. The result

74
00:06:22.650 --> 00:06:30.330
of that is that if I now re-execute this for/in loop, you see name and name2 is output but greet is

75
00:06:30.330 --> 00:06:36.490
no longer part of that because it's not enumerable, which means in for/in loops, it will be skipped and

76
00:06:36.480 --> 00:06:42.870
that can be useful because you might remember that in the objects module, we had this case where I went

77
00:06:42.870 --> 00:06:48.990
through all keys in info and I checked if the key is not title and not _title, by the way

78
00:06:49.020 --> 00:06:53.760
I used _title back then because we hadn't learned about private properties yet.

79
00:06:53.760 --> 00:07:00.540
Anyways I used this if check here to make sure that I didn't use these properties here for outputting

80
00:07:00.540 --> 00:07:02.630
my extra information.

81
00:07:02.640 --> 00:07:10.260
Well now with the new knowledge, we could have just set the object descriptors such that title and

82
00:07:10.260 --> 00:07:14.760
_title are not enumerable and they wouldn't occur here in that for/in loop.

83
00:07:14.820 --> 00:07:16.670
So that's where this can be useful,

84
00:07:16.710 --> 00:07:23.280
it can be useful to make properties unwritable, not deletable, not configurable in general or to

85
00:07:23.280 --> 00:07:29.790
exclude them from for/in loops which of course is advanced and rarely needed but in certain cases, like

86
00:07:29.790 --> 00:07:33.000
for example here it can be useful to be able to do that.
