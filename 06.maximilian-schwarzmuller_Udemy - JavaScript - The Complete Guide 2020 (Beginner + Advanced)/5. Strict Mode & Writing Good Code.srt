1
00:00:02,620 --> 00:00:05,520
Now with var, you can do other strange things as well as you learned,

2
00:00:05,560 --> 00:00:11,340
for example you can re-declare the same variable when you already did that in the same scope.

3
00:00:11,350 --> 00:00:17,620
So this here would fail if we use let or const but it will actually work with var and therefore now

4
00:00:17,620 --> 00:00:22,840
if I reload here, you see Manuel being printed because that's the value of the variable after I re-declared

5
00:00:22,840 --> 00:00:28,840
it. Now as I mentioned before, reassigning a value is absolutely fine and something you commonly do,

6
00:00:28,840 --> 00:00:33,130
re-declaring a variable is something you actually never need to do and therefore this is something you want

7
00:00:33,130 --> 00:00:34,250
to avoid.

8
00:00:34,300 --> 00:00:39,100
So that were some behavior of var which let doesn't support and I'd say it's a good thing that it

9
00:00:39,100 --> 00:00:40,210
doesn't support it,

10
00:00:40,220 --> 00:00:42,160
there also are other things in Javascript,

11
00:00:42,160 --> 00:00:45,940
for example you can create a variable without any keyword at all,

12
00:00:45,960 --> 00:00:47,860
so just like this.

13
00:00:47,860 --> 00:00:53,590
If you save that and you reload your file, you see Max is getting printed here and that might be strange

14
00:00:53,590 --> 00:00:56,980
because I did use neither var nor let nor const here.

15
00:00:56,980 --> 00:01:02,650
Now actually, that's a default behavior of Javascript because Javascript is quite a forgiving language.

16
00:01:02,650 --> 00:01:09,360
It sees that you missed a keyword here but in the end, this can only be a variable declaration and therefore

17
00:01:09,370 --> 00:01:15,430
it invisibly adds var. Now it is something you can rely on in your code but you absolutely shouldn't,

18
00:01:15,460 --> 00:01:20,860
you should avoid things like that because it's just bad code to write your scripts like this.

19
00:01:20,860 --> 00:01:26,670
People reading your code might think that maybe you declared this variable userName somewhere earlier

20
00:01:26,670 --> 00:01:30,210
in this file and therefore they might go looking for it and never find it

21
00:01:30,220 --> 00:01:31,810
which costs some time

22
00:01:31,930 --> 00:01:37,030
or that it's even defined in some other script which you import before this script and which would therefore

23
00:01:37,030 --> 00:01:39,220
expose userName as a global variable,

24
00:01:39,220 --> 00:01:40,850
that would be possible, right?

25
00:01:40,870 --> 00:01:45,370
So people might think that this is declared somewhere else and might be looking for it when you actually

26
00:01:45,370 --> 00:01:52,710
just forgot to add var, let or const. Now actually to disable such forgiving behavior,

27
00:01:52,720 --> 00:01:58,210
Javascript has a special mode which you can turn on and that's the strict mode. It was introduced with

28
00:01:58,240 --> 00:02:04,540
ES5 and even though modern Javascript syntax as you're learning it in this course already prohibits

29
00:02:04,600 --> 00:02:10,060
some of the things you can rule out with strict mode, it might still be worth turning it on, though I'll

30
00:02:10,060 --> 00:02:11,220
leave it up to you,

31
00:02:11,230 --> 00:02:16,180
I typically don't turn it on in this course because I avoid these strange behaviors and we don't

32
00:02:16,180 --> 00:02:21,220
write such code but if you want to be super safe, you can always turn it on in a file or actually also

33
00:02:21,230 --> 00:02:26,290
just inside of a function if you wish to by adding a string at the beginning of that file or at the

34
00:02:26,290 --> 00:02:29,630
beginning of that function where you want to enable it.

35
00:02:29,710 --> 00:02:34,840
Now that's not a string being stored in some variable but it's really just a string dumped into

36
00:02:34,840 --> 00:02:41,950
the script like this and in there you put the two words, use strict and then a semicolon after this and

37
00:02:41,950 --> 00:02:47,110
you can also use single quotes here if you want to, it doesn't matter. It might look strange but browsers understand

38
00:02:47,110 --> 00:02:47,290
this,

39
00:02:47,290 --> 00:02:53,470
they pick this up and they now know that you want to turn on strict mode for this script or for this

40
00:02:53,470 --> 00:02:55,060
function where you place this in,

41
00:02:55,150 --> 00:02:59,980
so only for this script, not for all scripts on your webpage, just for this script or for this function

42
00:02:59,980 --> 00:03:04,360
where it's placed in and strict mode disables certain behaviors,

43
00:03:04,780 --> 00:03:11,890
so for example behaviors like this and attached, you find a link with a full list of features or behaviors

44
00:03:11,920 --> 00:03:14,080
that are disabled by strict mode.

45
00:03:14,080 --> 00:03:18,310
So with strict mode enabled, for example if you now reload here, you get an error,

46
00:03:18,310 --> 00:03:22,810
userName is not defined, previously that was not the case, previously that worked,

47
00:03:22,810 --> 00:03:26,890
now you get an error which is good because you don't want to allow that behavior here.

48
00:03:26,890 --> 00:03:31,320
So let's now add var or even better, let or const again here.

49
00:03:32,520 --> 00:03:39,540
Another feature which was disabled is that you could use reserve name and assign values to it,

50
00:03:39,540 --> 00:03:44,880
for example if you used undefined, which is a reserved name because that's a special value in Javascript,

51
00:03:45,450 --> 00:03:46,580
as a variable name,

52
00:03:46,710 --> 00:03:48,080
then without strict mode,

53
00:03:48,090 --> 00:03:50,480
if I comment this out, this will actually work.

54
00:03:50,490 --> 00:03:53,420
If I now reload, this works, we get no error.

55
00:03:53,520 --> 00:03:57,560
Now that already changes if we use let or const and that's what I meant,

56
00:03:57,600 --> 00:04:03,540
the modern syntax already disables some of these behaviors but if I use let or const here and I reload,

57
00:04:04,190 --> 00:04:10,200
we get an error that it has already been declared because it's built into Javascript and we also would

58
00:04:10,200 --> 00:04:14,730
get an error if we would use var which we shouldn't but if we would and we turn on strict mode. If

59
00:04:14,730 --> 00:04:19,530
we do that, strict mode turned on and we use var and we try to assign a value to undefined,

60
00:04:19,530 --> 00:04:23,070
now if we reload here, we also get an error here, a different error message

61
00:04:23,070 --> 00:04:24,620
but still we get one.

62
00:04:24,870 --> 00:04:30,750
So that is strict mode turning it on certainly is an option, though as I mentioned in this course you

63
00:04:30,750 --> 00:04:37,290
will already learn patterns and a syntax which doesn't use these bad behaviors,

64
00:04:37,290 --> 00:04:40,330
still you can turn it on to be super safe.

65
00:04:40,560 --> 00:04:46,680
Modern Javascript with let and const also already prohibits and avoids certain of these behaviors, like

66
00:04:46,680 --> 00:04:49,170
this thing with undefined you just saw

67
00:04:49,170 --> 00:04:50,970
and if you want to use strict mode, attached

68
00:04:51,000 --> 00:04:56,840
as I mentioned, you find a full list of features which are now disabled thanks to strict mode and therefore

69
00:04:56,850 --> 00:04:58,080
with strict mode

70
00:04:58,080 --> 00:05:03,000
but most importantly with let and const and all the other modern Javascript syntax you are learning in

71
00:05:03,000 --> 00:05:08,210
this course, Javascript really is a great language where you can write good code.

72
00:05:08,370 --> 00:05:14,220
Just be aware that in the past and of course still in the present if you don't use const and let, if you

73
00:05:14,220 --> 00:05:19,100
don't follow these patterns, it is possible to write pretty messy Javascript code.

74
00:05:19,260 --> 00:05:25,470
It's a forgiving language and whilst forgiving always sounds great, in programming it typically isn't.

75
00:05:25,530 --> 00:05:31,630
Now Javascript, ECMAScript advances in a direction of where more and more features are introduced

76
00:05:31,650 --> 00:05:37,320
like let and const that allowed to write cleaner code and therefore you should use that but it is important

77
00:05:37,320 --> 00:05:42,210
to be aware of the past and these other parts of Javascript which are also part of the language

78
00:05:42,270 --> 00:05:44,340
if you really want to be a Javascript developer.
