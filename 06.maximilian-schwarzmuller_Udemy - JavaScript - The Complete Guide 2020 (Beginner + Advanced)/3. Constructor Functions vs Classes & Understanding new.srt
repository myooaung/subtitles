1
00:00:02,560 --> 00:00:05,180
Now let's understand what happens here.

2
00:00:05,260 --> 00:00:10,840
Of course we can't expect that this function returns an object right because we don't have any return

3
00:00:10,840 --> 00:00:12,340
keyword in there.

4
00:00:12,340 --> 00:00:15,820
It only returns an object because of that new keyword.

5
00:00:15,820 --> 00:00:21,880
If we wouldn't have new here, if we just call a person like this, you will see that now if I repeat this,

6
00:00:22,270 --> 00:00:23,100
I get an error,

7
00:00:23,110 --> 00:00:30,850
cannot read property greet of undefined because we would be calling greet on person and person on the

8
00:00:30,850 --> 00:00:35,380
other hand indeed is undefined because we just execute the person function,

9
00:00:35,380 --> 00:00:43,060
this function returns nothing so it returns no value so no value is stored in this constant and on no

10
00:00:43,120 --> 00:00:46,510
value, on undefined we can't call greet.

11
00:00:46,630 --> 00:00:51,450
So calling person like this won't work because we effectively call it like a regular function,

12
00:00:51,640 --> 00:00:57,520
the fact that it starts with a capital character is just a convention, not something that changes something

13
00:00:57,520 --> 00:00:59,230
magically in Javascript.

14
00:00:59,260 --> 00:01:01,710
Indeed it's the new keyword that matters

15
00:01:01,750 --> 00:01:06,420
and you could use a lowercase p here like that and it would still work

16
00:01:06,520 --> 00:01:09,300
and I would have to rename that constant here though

17
00:01:09,310 --> 00:01:14,500
otherwise we have a name clash and it would just work. If I execute this again,

18
00:01:14,500 --> 00:01:16,040
it works as before.

19
00:01:16,090 --> 00:01:21,430
So the naming here really is just a convention which you should follow but which has no technical impact,

20
00:01:21,430 --> 00:01:23,440
it's the new keyword that matters.

21
00:01:23,440 --> 00:01:26,320
What the new keyword does behind the scenes

22
00:01:26,320 --> 00:01:29,050
and that's effectively also what it does for classes

23
00:01:29,260 --> 00:01:32,610
is it executes such a function, in there

24
00:01:32,620 --> 00:01:40,630
it sets this equal to the object that's going to be created, so equal to an empty object initially if

25
00:01:40,630 --> 00:01:47,280
you will, then it adds all these properties to this empty object and then it returns this

26
00:01:47,440 --> 00:01:48,780
and this is this object.

27
00:01:48,790 --> 00:01:55,120
This is effectively what's happening here you could say, this is what the new keyword does here behind

28
00:01:55,120 --> 00:02:03,880
the scenes when you call a function with it, with new and that is a special scenario, a special feature

29
00:02:03,910 --> 00:02:07,670
provided by Javascript using such a constructor function.

30
00:02:07,690 --> 00:02:13,300
So now that we understand a bit how constructor functions work and that the new keyword matters,

31
00:02:13,360 --> 00:02:20,650
let's understand how this function relates to this class then. In the end, this class here is just something

32
00:02:20,650 --> 00:02:29,320
we call syntactical sugar for this constructor function because defining blueprints like this can be

33
00:02:29,320 --> 00:02:30,410
a bit cumbersome,

34
00:02:30,490 --> 00:02:31,780
it can be confusing

35
00:02:31,780 --> 00:02:32,550
that you write

36
00:02:32,560 --> 00:02:33,880
a normal function

37
00:02:33,880 --> 00:02:39,700
and suddenly it doesn't behave like a normal function because you use new and especially if you're coming

38
00:02:39,700 --> 00:02:43,380
from a different programming language, you might be used to having classes,

39
00:02:43,430 --> 00:02:49,840
this is why classes were introduced to give us an easier way of writing these blueprint definitions.

40
00:02:49,840 --> 00:02:55,330
Now behind the scenes, classes also do more than just set up such constructor functions,

41
00:02:55,330 --> 00:03:00,900
they also help us with a concept called prototypes into which I'll dive in this module as well

42
00:03:01,090 --> 00:03:06,250
but generally this class does just create something like that for us.

43
00:03:06,250 --> 00:03:13,090
Now, the constructor function we have inside of a class effectively allows us to define this class

44
00:03:13,090 --> 00:03:20,710
body, so all the instructions that should run when an object is created based on the blueprint inside

45
00:03:20,710 --> 00:03:21,460
of a class

46
00:03:21,490 --> 00:03:26,680
because in a constructor function like this, it's obvious that whenever we create a new object based

47
00:03:26,680 --> 00:03:29,310
on it, all the code in that function executes,

48
00:03:29,320 --> 00:03:35,560
so this is great for initializing it, for setting it up, for reaching out to some server or doing whatever

49
00:03:35,560 --> 00:03:39,340
you want. In a class you have no such place,

50
00:03:39,340 --> 00:03:46,210
well almost, you have that constructor function, this special method in there to be precise where everything

51
00:03:46,210 --> 00:03:50,620
you place in it also executes when this object gets created,

52
00:03:50,620 --> 00:03:56,200
so whatever goes into that constructor method here in your class is the same that would go into this

53
00:03:56,200 --> 00:03:58,150
person constructor function.

54
00:03:58,150 --> 00:04:03,520
Now your methods created like this actually are treated a bit differently,

55
00:04:03,610 --> 00:04:09,250
that's something you should be aware of and I'll come back to how they're treated differently in a second

56
00:04:09,250 --> 00:04:14,170
once we learn a bit more about another concept which is the concept of prototypes.

57
00:04:14,170 --> 00:04:15,190
Now what's up with that?
