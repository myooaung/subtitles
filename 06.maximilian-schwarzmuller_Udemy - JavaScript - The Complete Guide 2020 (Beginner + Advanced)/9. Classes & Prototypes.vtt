WEBVTT
1
00:00:02.340 --> 00:00:07.980
Now I know that this prototype stuff can be very confusing, also because the naming is so similar but

2
00:00:07.980 --> 00:00:12.960
it's really important to understand the difference between the prototype property on constructor functions

3
00:00:13.230 --> 00:00:19.540
where you configure what will be added to objects that are created based on that constructor function

4
00:00:19.740 --> 00:00:26.160
and the __proto property which is available on every object, not just on constructor

5
00:00:26.280 --> 00:00:32.220
functions or function objects which in the end points to the prototype that has been assigned to this

6
00:00:32.220 --> 00:00:38.430
object, so to the fallback object that has been assigned to that object, that is really important to understand

7
00:00:38.520 --> 00:00:40.890
and that's the idea behind prototypes.

8
00:00:40.890 --> 00:00:47.280
Now arguably, using classes and extending makes that a lot easier which is why we have that and why we

9
00:00:47.280 --> 00:00:48.020
use that

10
00:00:48.090 --> 00:00:53.670
but it is super important to understand this behind the scenes stuff because Javascript is based on

11
00:00:53.670 --> 00:01:00.720
it and not only will you find this in many interviews or will you be forced to use this in code because

12
00:01:00.720 --> 00:01:03.090
you can't use classes for whatever reason,

13
00:01:03.090 --> 00:01:09.390
it also helps you understand the code you write and it's such a core concept of Javascript has been

14
00:01:09.390 --> 00:01:10.220
around forever

15
00:01:10.260 --> 00:01:15.910
you got to know. Now there also are some specialties related to that concept

16
00:01:15.950 --> 00:01:22.340
and I mentioned earlier that this constructor function is actually not a perfect replacement for this

17
00:01:22.490 --> 00:01:27.560
class here and thus far, we didn't know how to write it in a better way,

18
00:01:27.560 --> 00:01:33.950
now we do because actually, everything what you have in the constructor except for that super thing which

19
00:01:33.950 --> 00:01:40.180
is especially in classes, everything you have in the constructor of a class can go in a constructor function

20
00:01:40.390 --> 00:01:47.140
and you have exactly the same behavior. Every field which you set up will also be added just as

21
00:01:47.140 --> 00:01:52.450
you would have written it in the constructor, only important thing here is it will automatically be added

22
00:01:52.510 --> 00:01:59.470
after any super call you might have in there because you have to use this and using a field effectively

23
00:01:59.860 --> 00:02:05.950
will create it as ah instance property, will set it up as an instance property using this after calling

24
00:02:05.950 --> 00:02:12.700
super. So fields effectively are translated to properties just as if you would use that in constructor

25
00:02:12.700 --> 00:02:18.250
syntax, here for example with this age, you could do the same for this name, it would have the same behavior

26
00:02:18.550 --> 00:02:23.500
as you have when you add a field. There is a difference between constructor functions and classes though

27
00:02:23.770 --> 00:02:29.950
if we have a look at how methods are added, for example this greet method. Let's see what the difference

28
00:02:29.950 --> 00:02:30.830
could be.

29
00:02:30.880 --> 00:02:35.220
I'll comment out all that code at the bottom, comment out

30
00:02:35.230 --> 00:02:43.080
this constructor function and my prototype editing and comment back in this class here.

31
00:02:43.250 --> 00:02:52.640
Now let's go down to the bottom and again, create a person with new person and console log that person.

32
00:02:55.190 --> 00:02:56.120
If we reload this,

33
00:02:56.120 --> 00:03:02.830
we see this as the object that was created with that prototype which also has the greet method. Wait a

34
00:03:02.830 --> 00:03:03.930
second,

35
00:03:03.970 --> 00:03:06.530
a prototype which has the greet method,

36
00:03:06.580 --> 00:03:08.320
where's that coming from?

37
00:03:08.320 --> 00:03:11.190
Shouldn't the greet method be part of the object itself?

38
00:03:11.200 --> 00:03:18.700
I defined it here in person, AgedPerson should only add the printAge method and nothing else. Well

39
00:03:18.700 --> 00:03:26.320
turns out this isn't a prototype of AgedPerson, not in the prototype of person.

40
00:03:27.080 --> 00:03:33.560
So we have an extra prototype that was added by Javascript when we worked with classes, well that's interesting,

41
00:03:34.040 --> 00:03:41.530
name on the other hand indeed was added as a property to my object that was built based on that class.

42
00:03:41.870 --> 00:03:49.810
So indeed if we add a field like this here, this indeed is added as a property to the object that is

43
00:03:49.810 --> 00:03:50.760
being created,

44
00:03:50.770 --> 00:03:56.410
the only difference to the constructor is that here, when you use a field like this, it's not as obvious

45
00:03:56.410 --> 00:03:59.150
that you call it after super,

46
00:03:59.230 --> 00:04:02.820
here if you would try to switch this, you'll get an error.

47
00:04:02.830 --> 00:04:09.690
Now I will get an error that I must call super first before I try to use this. Hence in the constructor,

48
00:04:09.760 --> 00:04:12.120
we're forced to write code like this.

49
00:04:12.280 --> 00:04:18.640
If in super, so if in the base class you try to do something with name, you would therefore fail, if I had

50
00:04:18.640 --> 00:04:19.750
a constructor here

51
00:04:23.380 --> 00:04:32.090
and I try to console log this.name in the constructor of the base class, you will see that

52
00:04:32.090 --> 00:04:37.040
this prints undefined and if I would try to do something with it like call a method on it, we would

53
00:04:37.040 --> 00:04:40.370
get an error that this method doesn't exist on undefined.

54
00:04:40.370 --> 00:04:45.680
The reason for this is that this here is added as a property in the same place as these properties

55
00:04:45.680 --> 00:04:49.000
are added after the super call finished

56
00:04:49.070 --> 00:04:56.180
and that's an issue we faced in the last course module where we essentially tried to use something in

57
00:04:56.180 --> 00:05:01.960
the base class which was set up as a field here in the subclass and which therefore didn't exist yet.

58
00:05:02.090 --> 00:05:07.370
So that's something to be aware of but generally, what you set up as a field here is translated in such

59
00:05:07.370 --> 00:05:11.680
a property assignment that works in the same way as it would work if you would

60
00:05:11.690 --> 00:05:14.560
add it here in the constructor like this,

61
00:05:14.600 --> 00:05:17.080
so this is basically equivalent

62
00:05:17.090 --> 00:05:21.770
you could say. Now it changes when we have a look at the method though as you can already see.
