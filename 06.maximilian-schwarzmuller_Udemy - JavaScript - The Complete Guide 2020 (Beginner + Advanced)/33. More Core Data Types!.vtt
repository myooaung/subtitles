WEBVTT
1
00:00:02.220 --> 00:00:08.730
Those extra operators which you have are good to know because sometimes you can save some extra code

2
00:00:08.760 --> 00:00:11.700
by using these shorthands, these abbreviations.

3
00:00:11.790 --> 00:00:16.380
Even more important than that however are other data types you can work with.

4
00:00:16.380 --> 00:00:23.160
We learned about numbers where you have numbers with or without decimal places, numbers without decimal

5
00:00:23.160 --> 00:00:33.040
places are also called integers, numbers with decimal places are also called floats. Besides numbers and

6
00:00:33.040 --> 00:00:35.470
text or strings as it's called,

7
00:00:35.470 --> 00:00:41.210
you also get other core data types which you have to know when working with Javascript,

8
00:00:41.260 --> 00:00:48.730
for example there are booleans. Now booleans are a bit strange and a bit hard to understand right now but

9
00:00:48.730 --> 00:00:50.260
they really shine

10
00:00:50.260 --> 00:00:57.700
once we learn about controlled structures, if statements which we'll do in a separate module soon. Booleans

11
00:00:57.790 --> 00:01:04.840
are effectively values which have one of two possible values, true or false.

12
00:01:04.840 --> 00:01:11.470
So where you can, as a number, have any number or as a string, have any combination of characters,

13
00:01:11.560 --> 00:01:15.850
booleans are exactly one of two values, true or false.

14
00:01:16.780 --> 00:01:23.470
Now you might wonder when you need such a restricted data type and the answer is quite often, because

15
00:01:23.470 --> 00:01:30.670
quite often in code, you have some condition, like is the user currently logged in, which is either true or

16
00:01:30.670 --> 00:01:35.800
false and then you want to run different code based on that condition maybe

17
00:01:35.970 --> 00:01:36.740
and that's what I meant,

18
00:01:36.730 --> 00:01:42.400
booleans shine if you have conditional code and we haven't really learned about this yet but we will

19
00:01:42.400 --> 00:01:46.600
learn about this in a whole module as it's such a core feature.

20
00:01:46.840 --> 00:01:52.480
So already keep booleans in mind, we'll dive deeper into them a bit later and then very deeply though.

21
00:01:53.380 --> 00:01:56.020
More important and something we won't see right away

22
00:01:56.080 --> 00:02:05.770
are objects. Objects are an extremely important type in Javascript, maybe the most important type if you

23
00:02:05.770 --> 00:02:11.530
would have to choose one, of course you need all of them but objects are really important. Objects allow

24
00:02:11.530 --> 00:02:14.820
you to group data you could say, something like this.

25
00:02:14.950 --> 00:02:20.950
Now you create object with curly braces and of course we already saw curly braces when we wrote a function

26
00:02:21.400 --> 00:02:27.250
and that of course was not an object, that was the function body but without the function keyword and so

27
00:02:27.250 --> 00:02:30.590
on, in the place where you could also use a number or a text,

28
00:02:30.670 --> 00:02:36.960
you can create an object by adding curly braces and then you have key-value pairs in there.

29
00:02:37.010 --> 00:02:43.630
Now as I said, you use that for grouping or relating data, let's say you have a little program where

30
00:02:43.630 --> 00:02:50.030
you work with persons, where you have user data that you kind of need in your Javascript code.

31
00:02:50.050 --> 00:02:52.670
Now each user might have a name and an age,

32
00:02:52.750 --> 00:02:58.600
of course you could have standalone separate that variables for that but having an object makes it much

33
00:02:58.630 --> 00:03:06.610
easier to understand that this data kind of belongs together, that it's related, that you use it as one

34
00:03:06.610 --> 00:03:10.720
piece of information if you will and therefore objects are really powerful,

35
00:03:10.720 --> 00:03:16.150
you can also do way more with them than just group data and we will do way more with them throughout

36
00:03:16.150 --> 00:03:16.870
the course

37
00:03:16.870 --> 00:03:22.900
but the data grouping functionality on its own is already pretty amazing and very important.

38
00:03:23.140 --> 00:03:32.290
Now and speaking of kind of organized or grouped data, another core data type are arrays. Now arrays

39
00:03:32.290 --> 00:03:35.230
are created like this with the square brackets here,

40
00:03:35.320 --> 00:03:41.350
also in the same place where you would create numbers or text or whatever you need and an array is simply

41
00:03:41.440 --> 00:03:42.910
a list of data.

42
00:03:43.420 --> 00:03:47.160
So arrays are always great if you need to store a list of data,

43
00:03:47.170 --> 00:03:54.520
let's say a list of transactions, a list of maybe calculations in our calculator and you can store any

44
00:03:54.520 --> 00:03:55.200
data in there.

45
00:03:55.210 --> 00:04:01.300
It can be an array of integers, so of numbers without decimal places like in this example but it could

46
00:04:01.300 --> 00:04:07.720
be an array of text, an array of floats, an array of objects, even an array of arrays is possible and you

47
00:04:07.720 --> 00:04:09.460
can also mix data in there,

48
00:04:09.460 --> 00:04:15.940
you can have an array that has numbers and text elements and so on. Elements in an array are separated

49
00:04:15.940 --> 00:04:20.080
by commas, as are the key-value pairs and objects

50
00:04:20.080 --> 00:04:26.710
but I'd say it makes way more sense to understand and explore these objects and arrays by simply working

51
00:04:26.710 --> 00:04:27.070
with them,

52
00:04:27.070 --> 00:04:29.140
so let's do that in the scope of our project.
