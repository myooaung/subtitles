1
00:00:02,170 --> 00:00:08,760
So we print that nice separator here three times even though in IDE, we really only see it once but theoretically

2
00:00:08,800 --> 00:00:10,470
we create it three times,

3
00:00:10,480 --> 00:00:15,300
now let's say thereafter we really want to output something for every item in our battle log.

4
00:00:15,310 --> 00:00:21,520
Now as I explained, we can do that with the normal loop here and here we can reuse i because it really

5
00:00:21,520 --> 00:00:28,070
only exists for that loop, so not even for the entire function but only for that loop here so we can reuse

6
00:00:28,070 --> 00:00:30,640
it in another loop, that is possible

7
00:00:30,820 --> 00:00:37,920
and then here we can go all the way up to the length of our battle log array, increment i

8
00:00:37,940 --> 00:00:44,950
and then here, we could console log battle log and then you learned that you can dynamically access an

9
00:00:44,960 --> 00:00:50,000
element in an array with that square bracket notation and then you provide the index of the element

10
00:00:50,000 --> 00:00:51,500
which is zero based

11
00:00:51,590 --> 00:00:57,020
but of course here we don't hardcode the index but instead we use i as an index because that allows us

12
00:00:57,020 --> 00:01:00,860
to access to i'th element for every loop iteration.

13
00:01:00,860 --> 00:01:07,520
So for the first iteration where i is 0, we access the element at index 0 which is the first element,

14
00:01:07,940 --> 00:01:13,010
then we increase this to 1, assuming that we have a length that is greater than 1,

15
00:01:13,010 --> 00:01:14,570
so more than one element,

16
00:01:14,570 --> 00:01:20,480
so then we have i equal to 1 so we access the element at index 1 which is the second element in the array

17
00:01:20,540 --> 00:01:21,200
and so on.

18
00:01:21,830 --> 00:01:25,890
So now if we remove that console log statement at the bottom and I just leave this here,

19
00:01:26,120 --> 00:01:32,420
if we now reload again and then we maybe attack, strong attack, attack again and show the log,

20
00:01:32,480 --> 00:01:37,910
now you see the log looks different because now we're printing every element on its own.

21
00:01:37,910 --> 00:01:44,270
We're doing this because of that for loop where I go all the way up to the length of my battle log and

22
00:01:44,270 --> 00:01:49,640
then I console log every element on its own instead of console logging the entire array as we did it

23
00:01:49,650 --> 00:01:56,910
before. So this is something we can do but as you learned, there is an alternative if you want to go through

24
00:01:56,910 --> 00:01:59,930
all elements in an array and that's the for/of loop.

25
00:02:00,130 --> 00:02:03,520
There you work with a constant instead of a variable with let,

26
00:02:03,540 --> 00:02:11,160
you could use let but using const is better because unlike this for loop, i will not change,

27
00:02:11,160 --> 00:02:14,680
instead you get a new constant for every loop iteration.

28
00:02:14,700 --> 00:02:21,760
So behind the scenes, Javascript will create a brand new constant for every loop iteration not alter

29
00:02:21,760 --> 00:02:27,370
the previous one but create a new one and therefore you can use const because it will never be altered,

30
00:02:27,450 --> 00:02:29,420
it will just be recreated,

31
00:02:29,430 --> 00:02:35,730
so basically it's dumped after a loop iteration and then for the next iteration, a brand new one is created

32
00:02:35,730 --> 00:02:40,920
you could say. So we're also not redeclaring an existing constant but we're really just getting a brand

33
00:02:40,950 --> 00:02:43,380
new one and the old one is dumped.

34
00:02:43,380 --> 00:02:45,570
Technically it has something to do with the scope

35
00:02:45,600 --> 00:02:46,550
where this is created

36
00:02:46,560 --> 00:02:50,850
but that's something we'll have a closer look at in the next course module.

37
00:02:51,600 --> 00:02:55,970
So for now, just keep in mind that this gets dumped after every execution and we get a new one.

38
00:02:56,100 --> 00:03:00,360
You can give this any name you want, just as you could use any name up there which you wanted,

39
00:03:00,360 --> 00:03:03,780
you don't have to use i, it's just a convention to use i,

40
00:03:03,780 --> 00:03:09,840
here we could go with element or log to describe what's in the array and we do have log entries here,

41
00:03:10,050 --> 00:03:15,870
so we could name this log or log entry and then you need the of keyword and then the name of the array

42
00:03:15,870 --> 00:03:17,110
which you want to go through

43
00:03:17,160 --> 00:03:23,010
and this really only is available for arrays and you can't use it on variables that hold numbers for

44
00:03:23,010 --> 00:03:24,060
example.

45
00:03:24,060 --> 00:03:29,490
It works for strings because the strings are kind of like arrays of characters,

46
00:03:29,490 --> 00:03:35,920
more on that later in a separate module but it doesn't work for numbers or boolean or objects.

47
00:03:35,970 --> 00:03:43,900
So here, we go through battle log through this array and log entry now as a constant which as I said gets created

48
00:03:43,900 --> 00:03:45,640
for every loop iteration,

49
00:03:45,700 --> 00:03:48,530
so between the curly braces we can now use that

50
00:03:48,790 --> 00:03:55,360
and here again, we can output log entry for example and if we do that, if we output log entry like this,

51
00:03:55,810 --> 00:04:02,230
what happens is that if we reload this app and we attack and strong attack, we get the same output as

52
00:04:02,230 --> 00:04:02,860
before

53
00:04:02,950 --> 00:04:08,800
unsurprisingly because we're going through all elements in our array, get access to it in the log entry

54
00:04:08,800 --> 00:04:13,340
constant which exists for the lifetime of this iteration and then output it.

55
00:04:13,390 --> 00:04:18,310
So it's basically the same as we had here but of course it's a bit shorter and it takes advantage of

56
00:04:18,310 --> 00:04:23,710
this special for loop that was built specifically for going through arrays and getting access to the

57
00:04:23,710 --> 00:04:25,300
elements in there.

58
00:04:25,300 --> 00:04:31,090
Now one important side note here, with this approach, by using the old for loop, you automatically have

59
00:04:31,090 --> 00:04:37,480
access to the index of every element as well because i is just the index. With this syntax, you have access

60
00:04:37,480 --> 00:04:39,520
to the element but not to the index,

61
00:04:39,550 --> 00:04:42,580
you don't know which index this is at.

62
00:04:42,610 --> 00:04:49,480
You could manually get access by defining a variable outside of the for/of loop, which starts at 0 because

63
00:04:49,480 --> 00:04:55,390
your index starts at 0 which you then increment in every iteration and then here,

64
00:04:55,780 --> 00:05:00,800
this would be your index but you have to manage this on your own with an extra variable, the for/of

65
00:05:00,820 --> 00:05:03,910
loop like this doesn't give you access to the index.

66
00:05:03,940 --> 00:05:10,480
So now here, you will see if I add some entries and I log this, now we have the index being printed after

67
00:05:10,480 --> 00:05:11,250
every entry

68
00:05:11,350 --> 00:05:14,690
but again, we have to manage this manually if we need it.
