1
00:00:02,530 --> 00:00:08,740
Now besides different ways of sending HttpRequests, we also can send different data,

2
00:00:08,740 --> 00:00:14,380
in theory at least, it always depends on the server and the URL you're sending this to, which kind

3
00:00:14,380 --> 00:00:21,190
of data the server accepts, for example our dummy server here really only works with JSON data. When we

4
00:00:21,190 --> 00:00:25,120
for example send the data to fake create a post,

5
00:00:25,120 --> 00:00:28,280
then we have to add JSON data there,

6
00:00:28,300 --> 00:00:33,730
it does not accept any other data but of course you might be working with different APIs in your

7
00:00:33,730 --> 00:00:38,170
project and there, different data might be accepted as well.

8
00:00:38,170 --> 00:00:45,310
Now you can send files, you can send binary data and add this as a body here, so you could add a pointer

9
00:00:45,310 --> 00:00:52,560
at a file which a user picked in a file picker for example or another very popular data format,

10
00:00:52,690 --> 00:00:54,550
you could add FormData

11
00:00:54,580 --> 00:00:57,180
Now let's see what FormData is

12
00:00:57,310 --> 00:00:59,760
and for that let's go to create post, here

13
00:00:59,770 --> 00:01:04,460
I create my post object, add this to send HttpRequest and in there,

14
00:01:04,540 --> 00:01:09,400
we basically convert this to JSON and add it to the request.

15
00:01:09,400 --> 00:01:12,220
Now we can also add FormData instead.

16
00:01:12,220 --> 00:01:17,110
Now again, this API does not support it but other APIs might and hence I want to show to you how that would

17
00:01:17,110 --> 00:01:19,900
work. For that, here in create post,

18
00:01:19,900 --> 00:01:25,930
let's say we can create FormData by creating a new constant, fd for FormData,

19
00:01:25,930 --> 00:01:29,190
name is up to you, by calling new FormData.

20
00:01:29,260 --> 00:01:36,280
That's a constructor function built into Javascript or built into the browser, provided in Javascript.

21
00:01:36,280 --> 00:01:40,800
Now FormData builds a new object to which you can add key-value pairs,

22
00:01:40,840 --> 00:01:47,380
so a bit like a Javascript object like this but internally or when it's sent over the wire, it will be

23
00:01:47,380 --> 00:01:49,630
sent in a different way than JSON data,

24
00:01:49,630 --> 00:01:55,900
it's not JSON format, it has a different format as you will see. Now to FormData,

25
00:01:55,900 --> 00:02:03,280
you can append new entries with the append method and there, every entry has a key and a value,

26
00:02:03,290 --> 00:02:09,190
so for example we could add a title and then pass on the title we're getting here as a value for this

27
00:02:09,190 --> 00:02:09,850
key,

28
00:02:09,850 --> 00:02:12,520
same is true for the body,

29
00:02:12,520 --> 00:02:22,420
here we could pass in our content value and also our userId, append userId, userId,

30
00:02:22,420 --> 00:02:26,070
now we would have prepared such a FormData object.

31
00:02:26,080 --> 00:02:28,540
Now let's add fd here,

32
00:02:28,660 --> 00:02:29,620
FormData

33
00:02:31,020 --> 00:02:39,960
to this request, so let's pass in this as a third argument and inside of sendHttpRequest, we now have

34
00:02:39,960 --> 00:02:41,710
to change the request a little bit,

35
00:02:41,880 --> 00:02:47,100
I'll comment out the headers because I no longer want to tell the server that I'm sending JSON data

36
00:02:47,190 --> 00:02:54,450
because I'm not and instead, set body not equal to the stringified data version but just to data

37
00:02:54,510 --> 00:03:00,900
which should already be FormData and for FormData, the fetch API will automatically see that it's form

38
00:03:00,900 --> 00:03:04,890
data and automatically send the right headers.

39
00:03:04,890 --> 00:03:13,490
So if we set this and we reload, let's try it out. Let's create a new post with FormData and click add.

40
00:03:13,710 --> 00:03:18,220
Now if we inspect the network tab, we see the API is quite forgiving,

41
00:03:18,270 --> 00:03:23,070
it still reports a success because it really doesn't care about the data we send in the end because

42
00:03:23,070 --> 00:03:24,120
it's a fake API

43
00:03:24,780 --> 00:03:28,800
but if we scroll down in the headers, we see we add a different data,

44
00:03:28,810 --> 00:03:36,180
it's indeed FormData and that's a special type of data which is added to the outgoing request. If we

45
00:03:36,180 --> 00:03:42,510
have a look at the other headers, we see that there content type was automatically set to this value which

46
00:03:42,510 --> 00:03:46,190
was automatically derived by the browser in the end.

47
00:03:46,200 --> 00:03:51,870
Now the advantage of FormData is that for one, you might find it more structured to build your data

48
00:03:51,870 --> 00:04:02,790
like this, b) a second great thing about it is that you can easily add files, if you append some file,

49
00:04:02,800 --> 00:04:04,670
you can have any identifier you want here,

50
00:04:04,690 --> 00:04:10,900
you could point at a file here, for example picked in a file input and then as a third argument, even

51
00:04:10,900 --> 00:04:15,340
provide a file name like photo.png which the server can use.

52
00:04:15,520 --> 00:04:22,480
So you can easily send a mixture of text, content text, key-value pairs and files to the server which

53
00:04:22,480 --> 00:04:27,670
can be really convenient depending on what you build and a third advantage is

54
00:04:27,700 --> 00:04:34,270
you can also use this to automatically parse a form and that's actually what I also want to show you

55
00:04:34,270 --> 00:04:35,100
here.

56
00:04:35,110 --> 00:04:40,570
Let's say we don't manually add title and body but instead we want to utilize the form fields which

57
00:04:40,570 --> 00:04:41,890
we already have here.

58
00:04:41,890 --> 00:04:46,560
Essentially what we want to do here is we want to replicate the default behavior

59
00:04:46,600 --> 00:04:52,330
the browser would have if we wouldn't call prevent default upon a submission.

60
00:04:52,330 --> 00:04:58,810
When we call that, we make sure the browser doesn't collect the FormData and send it to a server.

61
00:04:58,810 --> 00:05:02,600
Now we still want to make sure that the browser doesn't collect and send

62
00:05:02,740 --> 00:05:08,800
but we then manually want to collect it in the same way the browser would and for that, you just have

63
00:05:08,800 --> 00:05:14,120
to pass a pointer to your form element, to FormData,

64
00:05:14,200 --> 00:05:19,870
so to the constructor and form here really is just this pointer I select up there,

65
00:05:19,960 --> 00:05:26,440
it points at the form element in the document and if we pass that to FormData, Javascript will try

66
00:05:26,440 --> 00:05:29,800
to automatically collect all the data from the form.

67
00:05:29,830 --> 00:05:38,220
Now for it to succeed though, you need to make sure that your inputs have a name attribute, title

68
00:05:38,290 --> 00:05:49,260
and here, may be content or actually body because the API wants a field named body. The name attribute

69
00:05:49,260 --> 00:05:50,010
is important

70
00:05:50,340 --> 00:05:56,730
otherwise FormData is not able to identify these inputs and get the data out of there and store it

71
00:05:56,730 --> 00:05:58,940
correctly in the FormData.

72
00:05:58,990 --> 00:06:03,750
Now you can then still append extra data which might not be included in the form, like the userId

73
00:06:03,770 --> 00:06:06,630
here and with all of that, let's give it a try.

74
00:06:06,810 --> 00:06:15,810
Let's reload a new post, does this work and let's click add here and if we now inspect this outgoing request

75
00:06:15,810 --> 00:06:22,470
and we scroll down, we see this was still populated but now automatically from the form.

76
00:06:22,470 --> 00:06:27,030
Now again, it's important to realize that not all APIs support FormData,

77
00:06:27,030 --> 00:06:30,360
if an API wants JSON data, you can't use this

78
00:06:30,390 --> 00:06:37,510
no matter how convenient you find it to be but if you have an API, an API endpoint, so a specific URL

79
00:06:37,500 --> 00:06:44,250
HTTP method combination that does support FormData you can use this approach and therefore form

80
00:06:44,250 --> 00:06:48,450
data besides JSON is also an important data structure

81
00:06:48,450 --> 00:06:54,360
you should be aware of when we're talking about sending data with HttpRequests from client side

82
00:06:54,390 --> 00:06:55,950
Javascript to a server.
