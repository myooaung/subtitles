1
00:00:02,180 --> 00:00:05,450
So we potentially at least improved our startup time,

2
00:00:05,450 --> 00:00:10,270
now let's have a look at runtime performance and for that, I'll go to the performance tab here, enable

3
00:00:10,270 --> 00:00:15,160
CPU throttling, clear all previous snapshots and I'll take a new snapshot

4
00:00:15,170 --> 00:00:19,730
when I delete a product, then stop that.

5
00:00:19,800 --> 00:00:25,050
Now you see, here is the interesting part so let's zoom in there,

6
00:00:25,180 --> 00:00:30,130
you see ongoing network requests, that were the extra chunks that were downloaded,

7
00:00:30,250 --> 00:00:31,440
let's close that.

8
00:00:31,630 --> 00:00:36,280
Now let's have a look at the main thread down there because that's the more interesting part.

9
00:00:36,280 --> 00:00:42,610
Now what you see is here I got my click on a button and you see we have a little warning here that this

10
00:00:42,610 --> 00:00:46,390
took around 80 milliseconds which isn't great,

11
00:00:46,490 --> 00:00:53,150
we have the function call and then we have another function call here where other functions are getting

12
00:00:53,150 --> 00:00:57,080
executed based on the extra bundles we added.

13
00:00:57,090 --> 00:01:04,500
Now here whilst we don't see the function names unfortunately here in this tab, we see it's from

14
00:01:04,500 --> 00:01:10,230
line 10 in the shop.js and this is delete product function which makes sense because that

15
00:01:10,230 --> 00:01:16,340
is what should be triggered if we clicked the delete button and then after our extra chunks were downloaded,

16
00:01:16,640 --> 00:01:21,860
more code was getting executed here from our extra chunk files.

17
00:01:21,860 --> 00:01:25,900
Now to be honest, here this time it took for the handler,

18
00:01:26,060 --> 00:01:30,320
we probably won't be able to do much about it because the function call here which is getting executed,

19
00:01:30,350 --> 00:01:34,660
which takes some time really isn't taking that long because of any of our code,

20
00:01:34,670 --> 00:01:40,430
you see all the code which is executing here and executing here runs fairly fast.

21
00:01:40,530 --> 00:01:47,130
I mean for example this entire script here takes like 42 milliseconds which should be okay but actually

22
00:01:47,250 --> 00:01:51,730
in our script we still have an issue or a couple of things we can improve.

23
00:01:51,980 --> 00:01:58,770
For that I'll even turn off throttling because I can show it nonetheless. Again hit escape here and in

24
00:01:58,800 --> 00:02:03,750
the bottom tab here, click on rendering and turn on paint flashing,

25
00:02:03,750 --> 00:02:11,600
this will allow us to see which problem we have on this page, you can now close that. If you now reload, you

26
00:02:11,610 --> 00:02:17,030
see everything flashes green and whenever something is re-rendered, it flashes green.

27
00:02:17,040 --> 00:02:23,520
Now the interesting thing is if I delete let's say the last item, the t shirt here,

28
00:02:23,580 --> 00:02:27,500
so if I click on delete here, you see everything here flashes green,

29
00:02:27,520 --> 00:02:29,570
that's what we saw earlier already.

30
00:02:29,610 --> 00:02:33,850
If we expand the unordered list here and we watch the list items on the right,

31
00:02:33,990 --> 00:02:40,110
whenever I delete an item, everything here is updated, the entire unordered list and all the list items

32
00:02:40,650 --> 00:02:43,290
and I'll turn off the flashing because it's a bit annoying

33
00:02:43,290 --> 00:02:47,010
but you see the problem here, the whole list is being re-rendered

34
00:02:47,010 --> 00:02:53,160
whenever we delete an item even if it's the last item and there is no reason for that to happen. It makes

35
00:02:53,160 --> 00:03:00,210
more sense when we add a new item because when we do add a new item, we actually add it at the beginning

36
00:03:00,210 --> 00:03:06,210
of the list so of course Javascript has to shift all items to the back or the browser has to shift all

37
00:03:06,210 --> 00:03:12,260
items to the back here but why is it re-rendering the entire list when we delete an item, even if it's

38
00:03:12,260 --> 00:03:13,820
the last one?

39
00:03:13,820 --> 00:03:18,200
Well we could see the answer if we have a look at the rendering.js file here in the optimized folder.

40
00:03:18,860 --> 00:03:24,080
In rendering.js, we see render products which is the function responsible for displaying the products

41
00:03:24,080 --> 00:03:32,540
on the screen, when it executes it always clears all existing DOM elements in the product list element

42
00:03:32,900 --> 00:03:39,200
which is in the end that unordered list element here with the product list ID and then it creates

43
00:03:40,270 --> 00:03:44,690
all these new DOM nodes and adds them for every product we have,

44
00:03:44,830 --> 00:03:50,410
so for five products initially, if we had 100 products it does it for 100 products.

45
00:03:50,450 --> 00:03:53,010
Now this is really not a great code here,

46
00:03:53,020 --> 00:04:00,290
this is not what we want to do, re-rendering everything for every change can be horrible,

47
00:04:00,370 --> 00:04:07,000
imagine you have a list with 100 items and you delete everything on the screen and re-render it all

48
00:04:07,270 --> 00:04:09,360
for every tiny change,

49
00:04:09,370 --> 00:04:15,190
well if your users have a bit slower devices, they will probably feel that and see that and it's not

50
00:04:15,190 --> 00:04:22,480
a great user experience because accessing the DOM in general is quite performance intensive and such

51
00:04:22,570 --> 00:04:25,600
errors like this one can quickly add up.

52
00:04:25,600 --> 00:04:31,060
So we should improve the render products function here to not re-render everything

53
00:04:31,060 --> 00:04:39,210
whenever we change something and therefore to improve this, I will actually add a new function here, update

54
00:04:40,020 --> 00:04:49,290
products which should be a little bit more careful when we add or remove an item. We will still

55
00:04:49,290 --> 00:04:55,990
need render products to render the entire list when we initially render all products here in init products

56
00:04:56,220 --> 00:05:02,710
but I certainly don't want to call render products when we added or removed an item. So I'll leave render

57
00:05:02,720 --> 00:05:05,120
products as it is but in update products,

58
00:05:05,180 --> 00:05:10,150
I want to add code which we can use when we added or removed an item.

59
00:05:10,220 --> 00:05:16,160
So therefore here I expect to get the product data which was added or removed as a first argument,

60
00:05:16,570 --> 00:05:22,310
let's say we also need the product ID in case we're deleting so that we directly get that, I want to get

61
00:05:22,310 --> 00:05:29,300
that delete product function because if we add a new product, I will still need to render a button which

62
00:05:29,300 --> 00:05:37,540
points at this function and I want to get one last argument which tells me if we're calling update products

63
00:05:37,540 --> 00:05:43,120
because we're adding a new one or because we're deleting one because then I can use an if check to find

64
00:05:43,120 --> 00:05:49,510
out if we're adding and if we do, I essentially want to create a new product again and append it, otherwise

65
00:05:49,810 --> 00:05:56,980
I want to remove it. So let's start with removing maybe in the else case here, I want to get access to my

66
00:05:56,980 --> 00:06:03,040
product element here or product el to stay in line with the naming in other parts of this script

67
00:06:03,790 --> 00:06:13,260
by using document get element by ID prodId because when we render a product in the future, I want

68
00:06:13,260 --> 00:06:20,200
to add the ID attribute on the rendered DOM node and point at the ID of the product which was added.

69
00:06:20,280 --> 00:06:26,550
So here in render products, my new list element which is my new product item here

70
00:06:29,430 --> 00:06:35,890
should actually get the ID property set to product.id,

71
00:06:35,980 --> 00:06:41,560
so to the ID of the product we're-rendering, so that every DOM element has the ID attribute which

72
00:06:41,560 --> 00:06:42,630
is the ID of the product,

73
00:06:42,640 --> 00:06:47,050
we can then use this to get a hold of that element when we want to delete it.

74
00:06:47,710 --> 00:06:54,390
And then we can call product element remove or for better browser support of course as you've learned,

75
00:06:54,430 --> 00:07:04,110
reach out to the parent element and there, call remove child on product el. Both works, I'll use the

76
00:07:04,110 --> 00:07:10,070
shorter, more modern approach here which doesn't work in all browsers though.

77
00:07:10,200 --> 00:07:12,360
So this is now the deletion part,

78
00:07:12,360 --> 00:07:15,210
now I want to call update products when we do delete.

79
00:07:15,450 --> 00:07:22,620
So in product management, in delete product, I don't want to call a render products in the end but instead

80
00:07:22,680 --> 00:07:24,120
update products.

81
00:07:24,180 --> 00:07:32,690
So from rendering, I'll import update products and down there, I call update products with a pointer at

82
00:07:32,700 --> 00:07:34,410
the product

83
00:07:34,420 --> 00:07:39,970
I want to update, the ID of that product, a pointer at the delete product function,

84
00:07:39,980 --> 00:07:48,150
so this function itself and the value for is add which here would be false.

85
00:07:48,200 --> 00:07:54,380
Now the problem is the product which is affected I don't have access to it here and this code here in general

86
00:07:54,470 --> 00:08:02,550
also isn't optimal yet. Now we can optimize this code later, for now I'll add a variable, deleted product

87
00:08:02,560 --> 00:08:09,320
and here in this loop where I go over all my products, I'll check if the product I'm looking at does

88
00:08:09,320 --> 00:08:13,670
not have the ID of the deleted one which means I want to keep it which is why I add it to updated products

89
00:08:13,670 --> 00:08:16,110
which I then set as my new products array,

90
00:08:16,340 --> 00:08:20,500
so else if the IDs do match, I know this is the product which was deleted,

91
00:08:20,600 --> 00:08:29,640
so I'll set deleted product equal to prod in that case. And then down there, deleted product is what I

92
00:08:29,640 --> 00:08:31,040
want to forward here,

93
00:08:31,050 --> 00:08:37,630
prodId which is the argument I get here is the ID I want to forward, here

94
00:08:37,660 --> 00:08:45,280
I point at the function itself for this argument which the delete part of the update products function

95
00:08:45,280 --> 00:08:50,910
won't even use though and important, for is adding, we set false because we're not adding, we're deleting.

96
00:08:51,400 --> 00:08:57,190
So now when the delete product function executes, update products should actually execute and that should

97
00:08:57,190 --> 00:09:03,010
now update our list of products in a way that doesn't cost the entire list to re-render,

98
00:09:03,820 --> 00:09:05,170
well let's test this.

99
00:09:05,380 --> 00:09:08,050
Let's reload and expand unordered list here,

100
00:09:08,050 --> 00:09:10,420
now you see the IDs are being added here,

101
00:09:10,450 --> 00:09:14,430
I'm using dates as IDs here and now watch the list items on the right

102
00:09:14,440 --> 00:09:21,620
when I delete the magic broomstick. You see, the list items here didn't flash, only the unordered list

103
00:09:21,710 --> 00:09:27,170
because the unordered list of course was affected, one of its child items was removed but the other

104
00:09:27,170 --> 00:09:33,650
list items which weren't removed weren't re-rendered, they weren't touched and therefore this is far more

105
00:09:33,650 --> 00:09:36,450
efficient than what we had before.

106
00:09:36,560 --> 00:09:43,550
Now definitely, use this now as a chance to pause and try coming up with an approach of implementing adding

107
00:09:43,760 --> 00:09:49,700
in a way that doesn't affect everything or doesn't re-render everything, of course in the next lecture,

108
00:09:49,710 --> 00:09:51,200
we'll also do it together.
