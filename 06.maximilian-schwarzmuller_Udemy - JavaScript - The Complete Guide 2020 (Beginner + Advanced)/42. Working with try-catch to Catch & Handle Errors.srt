1
00:00:02,620 --> 00:00:10,120
The idea is that you wrap try catch around the code that might fail. So you might think, great

2
00:00:10,210 --> 00:00:13,450
I'm going to put my entire program into the try block, right?

3
00:00:13,450 --> 00:00:16,150
We put all that code here,

4
00:00:16,150 --> 00:00:17,320
all of that,

5
00:00:17,410 --> 00:00:22,510
we move that into try because then we catch any error that might occur

6
00:00:22,510 --> 00:00:26,260
and even though we don't know yet what we can do then, this sounds good,

7
00:00:26,260 --> 00:00:32,840
we catch any error and we'll probably be able to do something great and have our script not fail.

8
00:00:32,890 --> 00:00:35,560
This is not what you should do,

9
00:00:35,590 --> 00:00:39,160
don't wrap your entire script into try,

10
00:00:39,160 --> 00:00:43,880
it's not good for performance and it's also a very bad programming style.

11
00:00:43,930 --> 00:00:50,980
You want to write code that doesn't yield errors and you can use the debugging section to find and fix

12
00:00:50,980 --> 00:00:54,120
logical and syntax errors,

13
00:00:54,190 --> 00:01:00,640
you only want to move code into try where you can't control whether it throws an error or not,

14
00:01:00,760 --> 00:01:06,310
as it's the case here, we can't control whether the user enters something valid or not.

15
00:01:06,340 --> 00:01:09,850
So in the end, we move this line in here

16
00:01:09,850 --> 00:01:15,670
but since I want to be able to use chosen life thereafter, I will actually create and declare the variable

17
00:01:15,670 --> 00:01:22,270
before the try block, like this and then only assign a new value to it inside of the try block.

18
00:01:22,270 --> 00:01:27,900
So now we have that try block which tries that code but just like that, it's not valid,

19
00:01:27,910 --> 00:01:30,580
it's not helpful and it's also not valid syntax,

20
00:01:30,580 --> 00:01:37,030
you also need to add a catch block. So you add the catch keyword and then you add parentheses and in

21
00:01:37,030 --> 00:01:39,970
there, a parameter which you can give any name you want,

22
00:01:39,970 --> 00:01:40,900
tpically you name it

23
00:01:40,930 --> 00:01:41,870
error.

24
00:01:42,120 --> 00:01:48,790
This now is like a function, so you add curly braces thereafter and inside of these curly braces, this error

25
00:01:48,790 --> 00:01:50,550
which was caught is available.

26
00:01:50,560 --> 00:01:57,100
So this is called like a function by Javascript and error is the error which was thrown, in this case

27
00:01:57,100 --> 00:02:01,970
it's your own error object, if it's some system error, like with the network request

28
00:02:01,990 --> 00:02:08,180
I already mentioned, then it will be that error object which Javascript created for you.

29
00:02:08,200 --> 00:02:14,940
So here for example, we can now console log that error to have a look at it, to see what's inside

30
00:02:15,130 --> 00:02:16,630
and we could now say

31
00:02:16,730 --> 00:02:17,070
okay

32
00:02:17,080 --> 00:02:19,240
chosenMaxLife in this case is 100,

33
00:02:19,240 --> 00:02:25,840
that's our fallback logic. If this fails and if it succeeds by the way of course, this will not execute

34
00:02:26,260 --> 00:02:31,110
but if this fails, if we get an error here, then this will not execute successfully

35
00:02:31,120 --> 00:02:37,540
but this here will and therefore here we can now set a value with which the rest of our code works.

36
00:02:37,540 --> 00:02:43,000
This is not always possible, sometimes the best you can do is show an error message to the user,

37
00:02:43,000 --> 00:02:48,880
for example if a server is offline and you can't save data on a server, there's little else you can do,

38
00:02:48,880 --> 00:02:54,040
you can just tell the user about that and tell him to not leave the page and try again later. In other

39
00:02:54,040 --> 00:03:00,630
cases like this, you might be able to use a fallback value and fall back without the user even noticing.

40
00:03:00,730 --> 00:03:11,350
You could of course also tell the user that you entered something wrong, default value of 100

41
00:03:11,350 --> 00:03:12,460
was used

42
00:03:12,460 --> 00:03:15,720
so that you fall back but you let the user know about that,

43
00:03:15,730 --> 00:03:17,610
that's totally up to you.

44
00:03:17,620 --> 00:03:20,620
So now with that, if we save that and we reload,

45
00:03:20,620 --> 00:03:21,480
now if I enter

46
00:03:21,490 --> 00:03:24,640
hi there, I get that you entered something wrong,

47
00:03:24,640 --> 00:03:29,380
I get that console log which please note, now is not an error anymore,

48
00:03:29,380 --> 00:03:34,390
we don't have that red background so this is not a system error anymore, instead it's just the normal

49
00:03:34,390 --> 00:03:41,460
log message and our app works just as before with that value of 100 being used.

50
00:03:41,470 --> 00:03:45,840
So that now all works and we can play with this game just as before

51
00:03:45,970 --> 00:03:51,850
but now with our own error handling logic, in this case with a graceful fallback, in other cases showing

52
00:03:51,850 --> 00:03:54,090
an error message might be the best you can do.

53
00:03:55,070 --> 00:04:00,940
Now just to make this really clear again, of course the logic we had before where we had just this if check

54
00:04:00,950 --> 00:04:05,030
and then also assigned a default value of 100 wasn't bad,

55
00:04:05,030 --> 00:04:08,990
I wanted to show you try catch which here isn't bad

56
00:04:08,990 --> 00:04:13,500
and in other cases is absolutely necessary because in other cases, you get an error

57
00:04:13,580 --> 00:04:16,110
if you want it or not and you need to be able to handle it,

58
00:04:16,190 --> 00:04:22,220
that's why it's a good time to already practice with it here even though in this exact case, since parseInt

59
00:04:22,250 --> 00:04:25,590
doesn't throw an error, you could have absolutely kept the

60
00:04:25,590 --> 00:04:30,720
old logic and avoided this try catch block.

61
00:04:30,920 --> 00:04:33,480
Now I'm not entirely done with try catch,

62
00:04:33,480 --> 00:04:38,080
you can also add another element to try catch and that's finally.

63
00:04:38,310 --> 00:04:44,150
Now you add finally like this, you add the finally keyword after try or after try catch,

64
00:04:44,280 --> 00:04:47,460
you don't need to have catch, you can just have finally here,

65
00:04:47,490 --> 00:04:50,550
you need to have try though, try catch without try

66
00:04:50,550 --> 00:04:54,500
doesn't exist but you can also have try catch finally

67
00:04:54,600 --> 00:05:01,170
and the idea is that the code inside of finally will now always execute no matter if you had an error

68
00:05:01,200 --> 00:05:02,220
or not.

69
00:05:02,220 --> 00:05:08,400
Now you might wonder what the idea behind that is because the code after try catch, so all the other

70
00:05:08,400 --> 00:05:10,410
code also executes here

71
00:05:10,410 --> 00:05:12,870
no matter if we had an error or not.

72
00:05:12,870 --> 00:05:15,240
So why would this be helpful?

73
00:05:15,240 --> 00:05:22,170
Well you can use finally to do any cleanup work if you for example have a case where another error

74
00:05:22,170 --> 00:05:28,110
happens inside your try catch block and be that only because you maybe throw the error

75
00:05:28,110 --> 00:05:32,610
again, that's also something you will sometimes do the more advanced you become,

76
00:05:32,670 --> 00:05:38,050
this is called rethrowing an error and we might do some error handling here,

77
00:05:38,100 --> 00:05:41,790
typically not some fallback as we're doing it here though

78
00:05:41,790 --> 00:05:47,370
but we might just be sending that error to our own analytic server for example

79
00:05:47,370 --> 00:05:52,170
so that we are notified of that error we had in our application.

80
00:05:52,170 --> 00:05:59,040
Maybe we can't fall back as we can here but maybe we can just show the user an error message and we

81
00:05:59,040 --> 00:06:05,700
also want to log the error to our own analytic servers. So we might be sending that request to our own

82
00:06:05,700 --> 00:06:09,350
servers here and then we rethrow that error.

83
00:06:09,420 --> 00:06:10,940
We rethrow that error here

84
00:06:10,990 --> 00:06:14,840
so that in some other part of our code, we can then handle it and show that

85
00:06:14,860 --> 00:06:16,250
error message to the user.

86
00:06:16,410 --> 00:06:18,270
Again, that's a little hard to imagine here,

87
00:06:18,270 --> 00:06:23,520
I'm aware of that because this is some basic project, some basic program but you could have multiple

88
00:06:23,520 --> 00:06:26,280
try catch blocks in different places of your app

89
00:06:26,280 --> 00:06:31,260
and here, you only have the first one which sends it to your own servers and then you throw that error

90
00:06:31,260 --> 00:06:32,390
again.

91
00:06:32,430 --> 00:06:39,160
Now in that case, still maybe you want to do some cleanup work here, maybe release some data which you

92
00:06:39,160 --> 00:06:46,560
save, maybe clear some variables, do something like this and then you could do that in finally. Now I

93
00:06:46,560 --> 00:06:52,920
will be honest, in a lot of scenarios, you will not need finally, especially in this example you definitely

94
00:06:52,920 --> 00:06:55,860
don't need it because we can perfectly fall back,

95
00:06:55,950 --> 00:07:00,610
so the code after this will execute, there's no reason to rethrow the error.

96
00:07:00,690 --> 00:07:05,020
If you would rethrow, the code thereafter doesn't execute and only finally will,

97
00:07:05,040 --> 00:07:06,110
that's the difference then,

98
00:07:06,120 --> 00:07:10,550
that's the advantage of finally, it executes even if you do throw an error here,

99
00:07:10,560 --> 00:07:15,260
the other code will not because your script will crash if you then don't handle it somewhere else

100
00:07:15,360 --> 00:07:19,590
but here, we don't really need that because we have a perfect fallback.

101
00:07:19,590 --> 00:07:26,020
It's good to know that finally is there though in cases where you will have an error in catch, you rethrow

102
00:07:26,070 --> 00:07:31,510
or you get another error and therefore you know the rest of your script will not be able to continue,

103
00:07:31,530 --> 00:07:38,610
well then finally can be used for some cleanup work and that can be helpful at times. Now

104
00:07:38,630 --> 00:07:45,620
just as with the other construct shown here, we'll also see try catch in action again later in the course

105
00:07:45,830 --> 00:07:52,280
and especially when we work with network requests, it will make more sense because then we really need

106
00:07:52,280 --> 00:07:52,390
it,

107
00:07:52,400 --> 00:07:55,060
then there are things we can't do without it

108
00:07:55,250 --> 00:07:59,200
but since it is a control structure, now is the time to introduce it,

109
00:07:59,270 --> 00:08:05,610
keep it in mind, keep its general functionality in mind, that you try code and then you can react upon

110
00:08:05,620 --> 00:08:10,830
an error and fall back or show an error message and you'll get more and more practice with it throughout

111
00:08:10,880 --> 00:08:11,480
this course.
