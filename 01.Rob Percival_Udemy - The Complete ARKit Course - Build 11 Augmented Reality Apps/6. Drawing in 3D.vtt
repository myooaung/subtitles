WEBVTT
1
00:00:00.150 --> 00:00:04.740
And the last video you were able to get the current position of the camera are relative to the real

2
00:00:04.740 --> 00:00:05.410
world.

3
00:00:07.050 --> 00:00:13.530
So in summary every time the scene you're under scene which happens at 60 frames per second you're getting

4
00:00:13.530 --> 00:00:15.400
the point of view of that scene.

5
00:00:15.450 --> 00:00:21.540
The point of view gives you a transform matrix the transfer matrix is what encodes the orientation and

6
00:00:21.540 --> 00:00:24.350
location of the camera and columns and rows.

7
00:00:24.720 --> 00:00:30.810
We extract the location and orientation and combine them to get the current position of the camera and

8
00:00:30.810 --> 00:00:34.790
it's in the current position of the camera that you will be drawing.

9
00:00:34.800 --> 00:00:42.210
So first delete these print statements and go to the main storyboard in the main storyboard.

10
00:00:42.220 --> 00:00:48.720
Open up the assistant editor and link the drub on to The View Controller with an outlet called the IBL

11
00:00:48.720 --> 00:00:54.390
that draw close the assistant editor and back to the controller in the delegate function.

12
00:00:54.580 --> 00:00:58.700
You need to figure out when the drop button is being pressed.

13
00:00:59.020 --> 00:01:00.080
So in Iowa.

14
00:01:00.160 --> 00:01:03.740
Every time you press a button it highlights to a darker shade.

15
00:01:03.970 --> 00:01:10.450
We're going to use that to our advantage by writing if draw dot is highlighted.

16
00:01:10.450 --> 00:01:20.600
So if the draw is being highlighted print draw button is being pressed.

17
00:01:20.800 --> 00:01:27.110
We're going to test this behavior by running the as I hold the button.

18
00:01:27.180 --> 00:01:32.490
The print statement keeps getting triggered if I let go it stops printing.

19
00:01:32.490 --> 00:01:33.850
This is perfect.

20
00:01:33.870 --> 00:01:38.080
Now you can detect when the user is holding the gun.

21
00:01:38.100 --> 00:01:46.530
So back to X code when the button is being pressed make a sphere known by writing less fear no that

22
00:01:46.620 --> 00:01:57.700
is equal to C.A. with a geometry of n s c and sphere and make sure the sphere has a radius of zero point

23
00:01:57.700 --> 00:02:00.190
zero or two meters.

24
00:02:00.340 --> 00:02:07.210
Put the sphere in the current position of the camera view by writing sphere and know that that position

25
00:02:08.050 --> 00:02:12.520
is equal to current position of camera.

26
00:02:12.520 --> 00:02:19.930
This makes sense since the current position is where we are going to draw so that sphere to the scene

27
00:02:19.930 --> 00:02:33.220
view by writing self does scene view thus scene a root node a child node sphere node and give the sphere

28
00:02:33.220 --> 00:02:37.460
a node A color red by writing sphere node geometry.

29
00:02:37.530 --> 00:02:44.730
Duff first material thought diffuse contents is equal to you like color red.

30
00:02:44.730 --> 00:02:50.580
Remember that the fuse is the color that spread across the surface of the material and we're giving

31
00:02:50.580 --> 00:02:52.920
the surface a color of red.

32
00:02:53.430 --> 00:02:59.040
So to summarize what's going on when the renderer is about to render a scene which happens at 60 frames

33
00:02:59.040 --> 00:02:59.860
per second.

34
00:03:00.030 --> 00:03:04.050
The delegate function gets called when it gets called.

35
00:03:04.050 --> 00:03:07.200
You're getting the current position of the camera.

36
00:03:07.500 --> 00:03:14.310
And in that position if the button is being pressed the button you're putting a sphere know in that

37
00:03:14.310 --> 00:03:15.240
position.

38
00:03:15.270 --> 00:03:21.360
So if you keep doing that if you keep putting a sphere for every position and every scene that's being

39
00:03:21.360 --> 00:03:27.060
rendered eventually you'll form a line of spheres which makes it look like you're drawing something

40
00:03:27.780 --> 00:03:28.550
to test.

41
00:03:28.560 --> 00:03:38.270
We're going to run the soap press draw and move the phone around and you're finally drawing in 3-D.

42
00:03:38.280 --> 00:03:39.460
This is pretty cool.

43
00:03:40.410 --> 00:03:41.950
Now there's a slight problem.

44
00:03:42.270 --> 00:03:48.210
We need a pointer to give the user a better visual of where he is drawing.

45
00:03:48.230 --> 00:03:51.260
So back to X code if the button is not being pressed.

46
00:03:51.320 --> 00:03:58.460
So we would be in the else statement if the button is not highlighted let pointer is equal to see and

47
00:03:58.460 --> 00:04:02.650
know where they are geometry of a sphere as well.

48
00:04:02.870 --> 00:04:13.110
Geometry and sphere of radius zero point zero hundred meters placed the pointer in the current position

49
00:04:13.140 --> 00:04:15.010
of the camera by writing pointer.

50
00:04:15.030 --> 00:04:19.370
That position is equal to current position of camera.

51
00:04:19.740 --> 00:04:25.150
This makes sense since the user is going to be drawing in the current position of the camera.

52
00:04:25.410 --> 00:04:31.530
So by putting the pointer in the current position it's indicating to the user that this is where he

53
00:04:31.530 --> 00:04:34.490
will be drawn which is exactly its purpose.

54
00:04:34.500 --> 00:04:35.610
It's a pointer.

55
00:04:35.760 --> 00:04:43.830
So the pointer to the seam view by copying miss and or place sphere and node with pointer make the point

56
00:04:43.830 --> 00:04:44.970
to read as well.

57
00:04:44.970 --> 00:04:46.250
By copying this.

58
00:04:46.290 --> 00:04:50.790
And once again or a place for node with pointer and run the

59
00:04:55.410 --> 00:05:01.260
here's the pointer in the middle and if I move around and notice the pointer keeps getting longer I

60
00:05:01.260 --> 00:05:04.200
need the pointer to show up as a single dots.

61
00:05:04.200 --> 00:05:10.330
So I need to delete every single part of that pointer except the newest one.

62
00:05:10.380 --> 00:05:17.490
So to do that go back to X code and before adding the newest pointer to the scene we have to delete

63
00:05:17.580 --> 00:05:19.980
every single other pointer.

64
00:05:20.100 --> 00:05:28.280
So go through every single note that in the scene view by writing self dustings view that scene dot

65
00:05:28.650 --> 00:05:35.160
root node dot innumerate child nodes make the first argument no.

66
00:05:35.190 --> 00:05:36.310
And the second argument.

67
00:05:36.300 --> 00:05:38.160
Leave it as what.

68
00:05:38.280 --> 00:05:45.510
So this loops through every single node that's child of the scene use root node and we're going to remove

69
00:05:45.570 --> 00:05:54.900
every node from its parent node by writing node that remove from parent node removing every node from

70
00:05:54.900 --> 00:06:02.220
its parent node such thought we're only adding that new pointer to the scene after you run the app to

71
00:06:02.220 --> 00:06:03.550
see what happens.

72
00:06:03.630 --> 00:06:09.550
The app crashes because we try to remove a node on a background thread.

73
00:06:09.840 --> 00:06:13.440
Anything inside this delegate functions happens in the background.

74
00:06:13.620 --> 00:06:21.480
We need everything here to happen on the main thread so called dispatch queue up Main.

75
00:06:21.480 --> 00:06:30.590
So main thread dot a sink and put every single line of code here inside of the dispatch.

76
00:06:33.050 --> 00:06:37.400
Make this self and run the app again.

77
00:06:39.770 --> 00:06:41.600
And the pointer it works fine.

78
00:06:41.600 --> 00:06:45.360
It removes every all pointer and it keeps the newest one.

79
00:06:45.440 --> 00:06:47.470
Now you know where to draw.

80
00:06:47.510 --> 00:06:50.500
However there's a bug in fine draw.

81
00:06:50.870 --> 00:06:54.030
And then let go it gets deleted.

82
00:06:54.800 --> 00:06:58.100
So go to ex-cult.

83
00:06:58.110 --> 00:07:01.830
What's happening is that you press the button it goes through this statements.

84
00:07:01.860 --> 00:07:02.940
Everything works fine.

85
00:07:02.940 --> 00:07:03.710
You're drawing.

86
00:07:03.720 --> 00:07:10.680
But then if you let go of the draw button the else statement gets called and it removes every single

87
00:07:10.680 --> 00:07:17.120
node from the scene views root node that includes the spheres that you're drawing.

88
00:07:17.220 --> 00:07:21.490
You need to be able to distinguish between the pointer and what's being drawn.

89
00:07:21.690 --> 00:07:30.540
So make the pointer a box node instead by replacing a sphere with a CNN box and give the width height

90
00:07:30.630 --> 00:07:39.990
and length a dimension of zero point zero or 1 meters and make the chamfer radius half of 0.01.

91
00:07:40.010 --> 00:07:41.020
So here's a trick.

92
00:07:41.030 --> 00:07:46.920
Whenever the chamfer radius is one half of the measurement of all the dimensions you get a sphere.

93
00:07:47.120 --> 00:07:52.920
So you're giving the illusion that the pointer is a sphere but it's actually a box now and a numeric

94
00:07:52.920 --> 00:07:53.850
child node.

95
00:07:53.930 --> 00:08:03.530
If D.M. and geometry is a box so if node geometry is at c and box then remove that node.

96
00:08:04.100 --> 00:08:06.470
Otherwise keep it.

97
00:08:06.630 --> 00:08:15.880
So now it won't remove anything he draw since those are spheres not boxes run yet and test this the

98
00:08:15.880 --> 00:08:17.530
pointer works fine.

99
00:08:20.770 --> 00:08:27.160
And there are it does it remove what you drew.

100
00:08:27.170 --> 00:08:32.780
Now there is a much better way to differentiate between the pointer and the sphere node instead of making

101
00:08:32.780 --> 00:08:33.920
this into a box.

102
00:08:33.920 --> 00:08:35.610
Put this back as a sphere.

103
00:08:35.870 --> 00:08:43.640
So right as science fair with I believe our radius was 0.01.

104
00:08:43.810 --> 00:08:50.650
It doesn't matter and to differentiate between the point during the sphere give the pointer a name right

105
00:08:50.740 --> 00:08:57.550
pointer that name is equal to pointer.

106
00:08:57.660 --> 00:09:07.600
And now inside of here just right if node name is equal to a pointer then remove that note from the

107
00:09:07.600 --> 00:09:08.510
parent node.

108
00:09:08.530 --> 00:09:10.640
Otherwise leave the drawing.

109
00:09:11.080 --> 00:09:11.550
OK.

110
00:09:11.590 --> 00:09:13.370
Run the app.

111
00:09:13.510 --> 00:09:18.100
If I just wait till the world origin loads and the phone for it to establish its surroundings.

112
00:09:18.130 --> 00:09:23.410
And now we get to draw and everything seems to be working out fine.

113
00:09:26.440 --> 00:09:29.650
In the next section we're going to make a solar system.
