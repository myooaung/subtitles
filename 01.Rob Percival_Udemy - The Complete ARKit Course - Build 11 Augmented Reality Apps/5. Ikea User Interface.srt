1
00:00:00,160 --> 00:00:06,110
In this video we're going to set up the user interface of our idea in the app.

2
00:00:06,130 --> 00:00:12,140
You can place household objects on top of any horizontal surface like a table or a floor

3
00:00:15,210 --> 00:00:20,910
to start open up code create in your project a single view application.

4
00:00:21,240 --> 00:00:29,450
Call the project Ikea press next and create the first thing to do and that we have always done is go

5
00:00:29,450 --> 00:00:32,800
to the man that storyboard and to The View Controller.

6
00:00:32,810 --> 00:00:40,450
This time we're going to add a collection view to the bottom of the initial controller.

7
00:00:40,610 --> 00:00:47,630
We're going to expand the collection view very close to the bottom of the super view and pin it to the

8
00:00:47,630 --> 00:00:56,040
bottom leading trailing space with a height of 75 pixels press on the collection tag.

9
00:00:56,290 --> 00:01:00,430
Go to the size inspector and give the collection to you.

10
00:01:00,430 --> 00:01:06,070
So a one of a hundred and twenty and the height of 50.

11
00:01:06,460 --> 00:01:11,140
Make sure every cell is space 30 pixels from one another.

12
00:01:11,140 --> 00:01:18,730
So minimum spacing per cells will be 30 pictures and having said that the first cell is 20 pixels from

13
00:01:18,730 --> 00:01:19,960
the leading edge.

14
00:01:20,050 --> 00:01:30,240
So 20 from the left click on the cell itself go to the attributes inspector click on backgrounds and

15
00:01:30,330 --> 00:01:32,120
add a tangerine color.

16
00:01:32,150 --> 00:01:43,580
You are so add a label to the cell by writing label dragged to the middle of the song and align it horizontally

17
00:01:43,790 --> 00:01:51,600
and vertically and the two constraints the label is going to refer to the household item you're going

18
00:01:51,600 --> 00:01:54,090
to display in the camera view.

19
00:01:54,720 --> 00:01:57,150
So in the attributes inspector write item

20
00:02:00,360 --> 00:02:05,130
and make the scrolling direction of the collection due to the horizontal.

21
00:02:05,130 --> 00:02:11,490
We are going to scroll horizontally through the collection of the arcade sync view is where we are going

22
00:02:11,490 --> 00:02:13,140
to add our items.

23
00:02:13,320 --> 00:02:17,350
So add an arcade seem to you to our Wii controller.

24
00:02:18,680 --> 00:02:21,510
Expand it to the edges of the suit or you

25
00:02:24,960 --> 00:02:31,760
pin it to the top leading trailing and you're right above the collection DuSable 0 right here.

26
00:02:33,790 --> 00:02:40,950
Open up the assistant editor link the arcade sync view to the Wii controller with an IBM CVM

27
00:02:44,710 --> 00:02:51,140
make an outlet for the collection as well by linking this one called the outlet items collection.

28
00:02:54,660 --> 00:03:01,730
Import our kit to use the arcade framework close the assistant editor and back to the Wii controller.

29
00:03:01,950 --> 00:03:08,490
Declare a constant configuration equal to eight our world tracking session.

30
00:03:08,680 --> 00:03:14,700
Vigorish world tracking is used to track the position and orientation of the device at all times.

31
00:03:15,770 --> 00:03:27,220
Run a session with that configuration by writing self dust's scene view session run in figuration add

32
00:03:27,360 --> 00:03:34,560
debug options by writing self-taught scenes you debug option is equal to an array type of debug options

33
00:03:34,970 --> 00:03:41,760
are SDN debug options we're going to show the world origin and we're also going to show feature points

34
00:03:42,630 --> 00:03:48,150
and another step that we've always done before going to the input Up-Hill list and declare a property

35
00:03:48,180 --> 00:03:50,530
privacy Cameron's description.

36
00:03:50,700 --> 00:03:55,740
This property becomes the user to enable the camera with an alert give the alert a descriptive message

37
00:03:55,740 --> 00:04:00,860
by writing you need the camera to display cool stuff.

38
00:04:04,510 --> 00:04:11,890
Now run the app to see if everything works will enable the camera wait for the world origin to show

39
00:04:11,890 --> 00:04:14,220
up in their ads.

40
00:04:14,290 --> 00:04:21,160
So everything works fine but we need to get the collection you some values to give the collection some

41
00:04:21,190 --> 00:04:23,190
logic we need delegate functions.

42
00:04:23,200 --> 00:04:29,980
So back to our controller to get all the delegate functions we need have the controller inherit from

43
00:04:30,180 --> 00:04:33,880
UI collection is you data source

44
00:04:37,160 --> 00:04:43,980
lecturing you in a source now that we inherited from this data source we can access data source functions

45
00:04:43,980 --> 00:04:51,750
such as number of items in actually the return value of this function will be how many cells of the

46
00:04:51,750 --> 00:04:58,190
collections you displays the memory cells are equal how many items we are going to display.

47
00:04:58,290 --> 00:05:08,310
So make an item Zurek let items array with an array type of string inside of it we're going to display

48
00:05:08,370 --> 00:05:15,420
a cup a vase a boxing bag so just right.

49
00:05:15,420 --> 00:05:18,340
Boxing and a table

50
00:05:22,100 --> 00:05:28,070
return the count of the items Theresienstadt the number of items in the array will equal how many cells

51
00:05:28,070 --> 00:05:29,790
will be displayed in the collection.

52
00:05:29,860 --> 00:05:35,250
The return and radar camps now right.

53
00:05:35,250 --> 00:05:44,860
So for item index sell for item inducts path is a data source function that configures every single

54
00:05:44,860 --> 00:05:46,030
cell in the collection.

55
00:05:46,040 --> 00:05:54,880
You declare a cell by writing let's sell the go to collection view that dequeue reusable identifier

56
00:05:55,410 --> 00:06:03,090
where the reduced identifier we need to give our cell and identifier first before we proceed with this.

57
00:06:03,160 --> 00:06:10,810
So into the main storyboard click on your cell and right here for the identifier field just write item

58
00:06:12,730 --> 00:06:23,460
copy the identifier into cell for item and for index if you're unfamiliar with collection use.

59
00:06:23,490 --> 00:06:25,420
Here is how this works.

60
00:06:25,450 --> 00:06:33,530
The reusable cell simply returns a cell type based on the identifier item.

61
00:06:33,700 --> 00:06:42,630
Since this cell has that identifier we're going to be using this cell specifically and for the index

62
00:06:42,640 --> 00:06:48,290
path there are going to be four cells in the collection view according to the return value and number

63
00:06:48,290 --> 00:06:49,830
of items in section.

64
00:06:50,300 --> 00:06:54,710
The index path simply your first you would sell out of the.

65
00:06:54,920 --> 00:06:56,880
We're going to be configuring.

66
00:06:57,170 --> 00:06:59,870
It is a path to each step.

67
00:07:00,110 --> 00:07:07,740
So returning the cell to get rid of this error but before returning it go to the main storyboard to

68
00:07:07,830 --> 00:07:11,700
access this label in our cell for itan section.

69
00:07:11,820 --> 00:07:19,440
You need to make a new file make the file Kokoo touch class of type you eye collection cell

70
00:07:22,120 --> 00:07:33,640
call the class items sell snacks and creep's back to the main storyboard assign the cell to the class

71
00:07:33,730 --> 00:07:34,360
item so

72
00:07:38,260 --> 00:07:44,300
now open up the assistant editor navigate to your subclass by clicking on the assistant editor or symbol

73
00:07:44,650 --> 00:07:47,910
go to manual I yet again.

74
00:07:48,190 --> 00:07:58,060
And two items sell and link the item label to our islands or class by calling it item label in the outlet

75
00:07:58,550 --> 00:08:06,230
now and sell for item downcast the sell to be item so as item.

76
00:08:06,260 --> 00:08:14,930
So now we can access the item label by writing sell the item label or it isn't working right now.

77
00:08:14,940 --> 00:08:19,080
That tax is equal to self.

78
00:08:19,250 --> 00:08:25,090
The items around index Dutrow.

79
00:08:26,370 --> 00:08:28,230
So here's how this works.

80
00:08:28,230 --> 00:08:32,780
Assume the index path is pointing to the second cell in the collection.

81
00:08:33,120 --> 00:08:36,620
The second cell will have the second element in the items around.

82
00:08:36,930 --> 00:08:41,100
So the item label for that cell is going to equal this.

83
00:08:41,380 --> 00:08:47,160
The index path that I wrote for the fourth cell is going to have the fourth element in the items array.

84
00:08:47,250 --> 00:08:50,150
So the label for that cell will say table.

85
00:08:50,550 --> 00:08:56,970
Now these functions are from the data source so to activate these data source functions set the data

86
00:08:56,970 --> 00:09:04,680
source to the cells so self that collection view or items collection for that matter the data source

87
00:09:05,070 --> 00:09:12,380
is equal to run the app and our collection of view works fine.

88
00:09:13,190 --> 00:09:14,630
Now every time I press on.

89
00:09:14,630 --> 00:09:20,220
So I wanted to highlight a green color inherit from you.

90
00:09:20,220 --> 00:09:21,550
I collection's you delegate

91
00:09:25,570 --> 00:09:30,200
by inheriting from this delegate class we can access the function did select either

92
00:09:33,940 --> 00:09:40,240
select item gets triggered whenever you select a certain show declared the cell that you clicked on

93
00:09:40,240 --> 00:09:44,670
by writing so is equal to collection view.

94
00:09:44,990 --> 00:09:50,630
Sulfur item index pass the index path.

95
00:09:50,700 --> 00:09:56,030
As I mentioned before indicates which shell you clicked on whether its the first second or third so

96
00:09:57,120 --> 00:10:06,030
and give that cell that you clicked on a color green by writing SELP background color is equal to you

97
00:10:06,030 --> 00:10:10,340
like color dark green.

98
00:10:10,370 --> 00:10:12,940
Call this delegate function right.

99
00:10:12,970 --> 00:10:21,820
Self items collection you that delegate is equal the cells run me app.

100
00:10:22,320 --> 00:10:24,690
If I click on a vase it highlights the green.

101
00:10:24,840 --> 00:10:27,700
If I click on cut that highlights the green as well.

102
00:10:28,110 --> 00:10:30,510
I need it to start if I touch another shell.

103
00:10:30,540 --> 00:10:35,030
The first one should go back to orange back to X code right.

104
00:10:35,100 --> 00:10:39,880
The function did de-select item in x.

105
00:10:40,140 --> 00:10:48,220
Basically if I click on one cell and then click on another the first cell you clicked on is de-selected

106
00:10:48,870 --> 00:10:50,990
and the function gets triggered for that so.

107
00:10:51,090 --> 00:10:57,210
So the clear the cell that you de-selected by just copying and pasting the following and it shut that

108
00:10:57,210 --> 00:11:02,550
cell to orange so that background color is equal to UI color.

109
00:11:03,440 --> 00:11:04,370
Dark orange

110
00:11:06,940 --> 00:11:16,180
run the press days and then if I press boxing Vai's was de-selected and it was turned into an orange

111
00:11:16,180 --> 00:11:16,920
color.

112
00:11:17,440 --> 00:11:19,000
So everything works fine.

113
00:11:19,120 --> 00:11:24,610
And now that were done setting up the user interface we can finally get to the fun part which is placing

114
00:11:24,610 --> 00:11:27,110
items on horizontal surfaces.

115
00:11:27,370 --> 00:11:29,030
We'll do that in the next video.
