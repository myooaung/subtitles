1
00:00:01,440 --> 00:00:10,780
This video we're going to start measuring distances First off make a variable starting position of type.

2
00:00:10,780 --> 00:00:19,270
I see a node and as soon as we add our sphere know to the scene view set the starting position equal

3
00:00:19,270 --> 00:00:21,160
to the sphere node.

4
00:00:22,120 --> 00:00:30,150
Now inherit from a R-S.C. entry delegate when you inherit from SDN if you delegate you can access the

5
00:00:30,150 --> 00:00:34,490
function render a data type.

6
00:00:35,070 --> 00:00:40,260
This elegant like you delegate We used for the physics simulations and the last section also gets called

7
00:00:40,260 --> 00:00:41,550
once per frim.

8
00:00:41,550 --> 00:00:46,620
And since I received a few session runs that 60 frames per second this function will get triggered at

9
00:00:46,620 --> 00:00:49,230
60 frames per second as well.

10
00:00:49,230 --> 00:00:54,570
Now so far we've looked at three delegate functions will run your scene.

11
00:00:54,590 --> 00:01:01,460
We used in the drawing up which makes sense since Wilborn nursing is made specifically for custom drawing.

12
00:01:01,550 --> 00:01:04,370
We also looked at did simulate physics.

13
00:01:04,400 --> 00:01:12,080
So in our vehicle up did simulate physics is made specifically for physical simulations.

14
00:01:12,080 --> 00:01:15,100
In our case the car was a physics body.

15
00:01:15,200 --> 00:01:22,130
However now we're not doing any physics simulations which is why we're using this function only to perform

16
00:01:22,160 --> 00:01:27,290
updates on our labels at 60 frames per second.

17
00:01:28,610 --> 00:01:32,210
So this function like the two other delegate functions is a rendering loop.

18
00:01:32,240 --> 00:01:36,140
It's always getting triggered 60 times a second one it's getting triggered.

19
00:01:36,140 --> 00:01:42,980
We want to update the labels as distance traveled by the phone relative to the starting position.

20
00:01:42,980 --> 00:01:56,030
So guard let starting position is equal to the imagery spell the starting position is equal to self

21
00:01:56,600 --> 00:02:00,320
starting position or else return.

22
00:02:00,950 --> 00:02:07,400
So basically only if the user top on the scene view and added a starting position then proceed with

23
00:02:07,400 --> 00:02:09,830
whatever we're about to do.

24
00:02:09,830 --> 00:02:13,240
Now we need the current position of the camera's point of view.

25
00:02:13,580 --> 00:02:15,660
We already did that in the last tutorial.

26
00:02:15,830 --> 00:02:23,150
We concluded that the camera's point of view is located 0.1 metres away from the film's current position.

27
00:02:23,270 --> 00:02:29,510
This time try to get the current location of the camera's point of view by doing it the same way we

28
00:02:29,510 --> 00:02:33,530
did it in the drawing up paused the video and give it a try.

29
00:02:41,250 --> 00:02:48,360
So what you would do first is get the point of view of the scene view by writing guard let point of

30
00:02:48,360 --> 00:02:58,110
view is equal to self the scene view point of view the point of view as you remember from before has

31
00:02:58,110 --> 00:03:03,250
the current orientation and location of the phone's camera view its point of view.

32
00:03:03,390 --> 00:03:08,430
We only care about the location and I seem to have an error because I forgot to put the else return

33
00:03:08,430 --> 00:03:10,460
clause.

34
00:03:10,600 --> 00:03:14,860
Now the location and orientation are encoded in the transform matrix.

35
00:03:15,050 --> 00:03:21,520
So right transform is equal to a point of view Daut transform.

36
00:03:21,610 --> 00:03:30,390
Now to access the location make it equal to SDN vector 3 and the location for the X field is located

37
00:03:30,400 --> 00:03:40,810
in column for a 1 Sarette transform dot and for one the location for the Y field is in column 4 to Sarette

38
00:03:40,810 --> 00:03:48,820
transform that and for 2 and the location for the Zad field is in column 4 of 3.

39
00:03:48,930 --> 00:03:55,620
Now if I subtract the current location of the camera's point of view by the starting location I should

40
00:03:55,620 --> 00:03:58,540
get the distance traveled by the phone in meters.

41
00:03:58,830 --> 00:04:09,120
So let x distance the horizontal distance traveled is equal to location X minus starting position dot

42
00:04:09,120 --> 00:04:11,750
position x.

43
00:04:12,180 --> 00:04:16,800
Let me just make this a constant since this is a bit annoying.

44
00:04:16,800 --> 00:04:27,900
Now back to here let y distance the vertical distance traveled equal to location Y minus starting position

45
00:04:28,410 --> 00:04:37,130
dot position dot Y and finally is that distance how far or how close you are from the starting position.

46
00:04:37,320 --> 00:04:50,750
The depth Zad distance is equal to location Zad minus starting position dot position data.

47
00:04:50,880 --> 00:04:55,610
Now set each label equal to its respective distance traveled self-taught.

48
00:04:55,620 --> 00:05:06,870
Actually I will not text is equal to the string value of x distance self-doubt y label that taxed is

49
00:05:06,870 --> 00:05:12,980
equal to the string value of r y distance and self-doubting Zed label.

50
00:05:13,010 --> 00:05:19,670
That text is equal to the string value of the XY distance

51
00:05:23,210 --> 00:05:24,260
before we were in the OP.

52
00:05:24,260 --> 00:05:32,700
Make sure to set the scene views delegate self in order for the delegate function to get triggered.

53
00:05:32,840 --> 00:05:33,530
Run the app

54
00:05:38,650 --> 00:05:40,150
place your starting position

55
00:05:43,370 --> 00:05:50,540
move away from it and nothing happens because we are updating our labels on a background thread.

56
00:05:50,870 --> 00:05:53,440
Anything in this delegate function happens in the background.

57
00:05:53,510 --> 00:05:56,130
So make sure to update your labels on the main.

58
00:05:58,230 --> 00:06:01,670
Copy and paste all of this code right into your dispatch.

59
00:06:01,710 --> 00:06:02,700
Up main.

60
00:06:03,000 --> 00:06:04,050
Rerun the up

61
00:06:08,310 --> 00:06:11,160
top the screen for your starting position.

62
00:06:11,160 --> 00:06:14,460
Move away from it and it's measuring the distance.

63
00:06:14,460 --> 00:06:15,810
This is really cool.

64
00:06:17,190 --> 00:06:19,200
But there are way too many decimal places.

65
00:06:19,200 --> 00:06:21,060
It doesn't look that great.

66
00:06:21,160 --> 00:06:24,730
So back into your controller take all of this off

67
00:06:30,770 --> 00:06:34,850
we want a string with a format of two decimal places.

68
00:06:35,250 --> 00:06:36,260
So write string

69
00:06:39,350 --> 00:06:44,960
with a format of percent point to f..

70
00:06:45,300 --> 00:06:48,350
So what this will do is from a float value.

71
00:06:48,430 --> 00:06:53,420
So from these float values it's going to use only two decimal places.

72
00:06:53,420 --> 00:06:58,180
Point to and the float value will be the distance itself.

73
00:06:58,190 --> 00:06:59,270
So x distance

74
00:07:02,950 --> 00:07:11,920
and do the same thing for every other label except here it will be the wind distance and the distance

75
00:07:15,140 --> 00:07:19,210
to each label we're going to add the letter M to indicate ammeters

76
00:07:23,680 --> 00:07:24,670
rerun the up

77
00:07:29,210 --> 00:07:33,090
so place your starting position.

78
00:07:33,170 --> 00:07:42,820
If I move away from it way over here I just move 0.2 meters to the right of the starting position.

79
00:07:42,830 --> 00:07:50,670
0.1 meters above 10 centimeters above in 0.22 meters are 0.1 three meters or something behind the starting

80
00:07:50,670 --> 00:07:51,300
position.

81
00:07:51,300 --> 00:07:57,930
So now I need it so that when I'm done measuring If I tap on the scene view again it should stop measuring

82
00:07:57,930 --> 00:08:09,450
the distance itself thus starting position is not equal to nil they remove the starting position from

83
00:08:09,450 --> 00:08:17,720
the scene view or remove it from the parent node remove from parent node and set it to nil

84
00:08:21,750 --> 00:08:23,160
and returned.

85
00:08:24,300 --> 00:08:29,940
So if I tap on the scene view and there is already starting position remove the starting position and

86
00:08:29,940 --> 00:08:31,210
set it to nil.

87
00:08:31,320 --> 00:08:36,060
And now since the starting position is nil this guard statement is going to fail.

88
00:08:36,120 --> 00:08:40,280
It's going to return and it's not going to measure the distance anymore.

89
00:08:40,920 --> 00:08:41,880
So run the up

90
00:08:45,750 --> 00:08:47,640
place your starting position.

91
00:08:47,640 --> 00:08:52,610
If I move away from it and then stop here it stops measuring.

92
00:08:52,770 --> 00:08:58,350
And in the position that we stopped we traveled 0.3 seven metres to the right point two or three metres

93
00:08:58,350 --> 00:09:03,270
above and point one three metres in the front of the starting position.

94
00:09:03,270 --> 00:09:09,090
Now what if I were to measure this couch if I put my strt note at the bottom left of the coach and move

95
00:09:09,090 --> 00:09:14,490
to the left of our starting position and from the bottom to the top

96
00:09:24,030 --> 00:09:28,530
I can conclude that the couch is 0.9 three metres wide.

97
00:09:28,530 --> 00:09:35,120
Since we traveled 0.9 three meters to the left of our starting position according to the y value the

98
00:09:35,120 --> 00:09:39,270
couch is also 0.8 two metres high.

99
00:09:39,300 --> 00:09:43,760
I can also conclude from the Zad value the couch is 1.4 metres long.

100
00:09:43,770 --> 00:09:45,580
At one point four meters deep.

101
00:09:45,600 --> 00:09:50,850
So if I tap the screen right here in place my starting position and then I'll walk a certain distance

102
00:09:50,850 --> 00:09:52,230
diagonally.

103
00:09:52,230 --> 00:09:57,990
Then I reach top the screen to stop the measuring according to this I moved the 1.9 six meters in the

104
00:09:57,990 --> 00:10:04,380
horizontal to the left of my starting position about zero meters in the vertical which makes sense since

105
00:10:04,380 --> 00:10:11,480
I'm not flying and away from my starting position I move zero point zero three metres.

106
00:10:11,490 --> 00:10:14,440
Now how do I get the diagonal distance that I traveled.

107
00:10:14,490 --> 00:10:15,720
Well it's simple.

108
00:10:15,930 --> 00:10:22,250
This function right here is in your resources folder.

109
00:10:22,400 --> 00:10:25,070
You probably saw this function in grade 9 math.

110
00:10:25,070 --> 00:10:27,710
This is just the Pythagorean theorem.

111
00:10:27,710 --> 00:10:32,720
If you're not familiar with the Pythagorean theorem don't worry just know that by combining the square

112
00:10:32,900 --> 00:10:39,020
of all the distances which form the diagonal distance in our case the X Y and Z distance and then get

113
00:10:39,020 --> 00:10:40,200
the square root.

114
00:10:40,550 --> 00:10:44,050
We can get the diagonal distance traveled.

115
00:10:44,090 --> 00:10:48,740
So inside of a big time set the distance.

116
00:10:49,090 --> 00:10:57,000
So self-taught distance label dot text is equal to the return value of our distance function.

117
00:10:57,280 --> 00:11:00,970
And you know what these names actually coincide with each other.

118
00:11:01,150 --> 00:11:04,620
So let me just read this to distance traveled and Studd

119
00:11:07,430 --> 00:11:15,230
self-direct distance label that text is equal to self-direct distance traveled the x value is simply

120
00:11:15,260 --> 00:11:22,850
x distance your y distance near that distance.

121
00:11:23,030 --> 00:11:26,620
And we want as we get a distance to only two decimal places.

122
00:11:26,620 --> 00:11:34,640
So copy this right here please your distance traveled as your flow Velia rerun the up way till the real

123
00:11:34,640 --> 00:11:35,720
origin.

124
00:11:38,240 --> 00:11:40,730
Once it loads top on your scene view.

125
00:11:40,730 --> 00:11:47,060
And if I walk this way top on the scene you go again to stop measuring I logged 0.1 8 meters in the

126
00:11:47,060 --> 00:11:53,840
horizontal and about 2.2 9 meters behind the starting position which ultimately combined in me walking

127
00:11:53,840 --> 00:11:58,650
a total distance of 2.3 metres and that's it for the measurement up.

128
00:11:58,970 --> 00:12:03,320
You learn how to work better with matrices ultimately making the measurement up

129
00:12:06,330 --> 00:12:09,600
in the next section we're going to make a virtual portal.
