1
00:00:00,150 --> 00:00:04,270
In the section we're going to interact with our nodes using head testing.

2
00:00:04,710 --> 00:00:09,390
So to understand hit testing we're going to make a game called Whack a jellyfish.

3
00:00:09,420 --> 00:00:10,890
The game works like this.

4
00:00:10,980 --> 00:00:14,340
The user has a limited amount of time to tap a jellyfish.

5
00:00:14,640 --> 00:00:18,690
Once you tap a jellyfish it pops in another random position.

6
00:00:18,690 --> 00:00:22,690
You have to look for it and tap it before the time runs out.

7
00:00:22,890 --> 00:00:26,410
If it takes you too long to tap that jelly fish you lose the game.

8
00:00:28,960 --> 00:00:36,220
So start a new school project by opening up X code create a new project a single application called

9
00:00:36,250 --> 00:00:43,880
me Project Walk a jelly fish press next and create.

10
00:00:44,110 --> 00:00:51,340
So like always go to the main storyboard and added a Arquette scene view to the middle of the initial

11
00:00:51,340 --> 00:00:52,870
view controller.

12
00:00:52,870 --> 00:00:57,740
Now I'm going to assume that you already know what an A Our kids seem to give us by now.

13
00:00:58,000 --> 00:01:05,260
So I'm just going to expand it to the edges and pin it to the bottom top leading and trailing space

14
00:01:06,010 --> 00:01:07,300
for constraints.

15
00:01:07,300 --> 00:01:11,780
And now add a button to the bottom left of The View Controller.

16
00:01:13,730 --> 00:01:20,130
Pin it 20 pixels to the bottom and 20 pixels to the leading space.

17
00:01:22,350 --> 00:01:27,730
Give it a width and height of 100 pixels.

18
00:01:27,870 --> 00:01:29,840
Add those two constraints as well.

19
00:01:30,040 --> 00:01:33,860
And now add another button to the bottom right.

20
00:01:34,690 --> 00:01:41,560
Twenty pixels from the trailing space and 20 pixel from the bottom space and it will have the same dimensions

21
00:01:41,620 --> 00:01:43,320
as the other one.

22
00:01:43,550 --> 00:01:45,940
Add these four constraints.

23
00:01:45,940 --> 00:01:49,960
Now I place these image assets into your resources folder.

24
00:01:49,960 --> 00:01:58,960
So back to X code go to your assets folder and make a new image asset called play and make another one

25
00:01:58,960 --> 00:02:06,490
called Reesa reset and right into your resources folder.

26
00:02:06,490 --> 00:02:15,790
Drag reset to its respective assets folder and do the same thing for play.

27
00:02:15,790 --> 00:02:19,160
Now back to your main story board.

28
00:02:19,260 --> 00:02:26,620
Click on the first button and remove this button labeled make the button aspect fit.

29
00:02:26,670 --> 00:02:32,970
You almost never want you scale to fail as it rescaled the button to fit the image which is not something

30
00:02:32,970 --> 00:02:40,950
that's going to look at it and make the background image play by going up right here just right play

31
00:02:42,160 --> 00:02:50,590
and there is our play on do the same thing for the other but by removing the will make that aspect fit

32
00:02:51,640 --> 00:02:55,860
and right here put the reset button in a.

33
00:02:55,960 --> 00:02:56,990
All right.

34
00:02:57,110 --> 00:03:04,770
Now open up the assistant editor and connect the scene view with an IBM that same view.

35
00:03:07,490 --> 00:03:16,660
Connect the play with an action call the I.B. action plan and do the same thing for a reset.

36
00:03:17,060 --> 00:03:20,740
Make it an action and call it reset.

37
00:03:20,750 --> 00:03:28,010
Now close the assistant editor and back to the controller import market so that we can use the A-okay

38
00:03:28,040 --> 00:03:29,110
framework.

39
00:03:29,120 --> 00:03:30,580
This error goes away.

40
00:03:30,710 --> 00:03:36,760
And just like always you need world tracking to track the position and orientation of the device.

41
00:03:36,770 --> 00:03:46,910
So right leg configuration configuration is equal to our world tracking session configuration and run

42
00:03:46,910 --> 00:03:51,540
a session with that configuration by writing self does seem view.

43
00:03:51,650 --> 00:04:01,490
Does session run configuration and we don't need any options right now so leave that blank debug options

44
00:04:01,490 --> 00:04:03,890
to view a little by writing self does seem.

45
00:04:03,890 --> 00:04:06,700
View does debug options.

46
00:04:06,700 --> 00:04:14,090
The above options is equal to an array type of debug options such that we can show the world origin

47
00:04:15,170 --> 00:04:19,540
and we can show feature points into scene view.

48
00:04:20,810 --> 00:04:21,280
All right.

49
00:04:21,280 --> 00:04:26,840
We've done all of this before and the next step is also a step that you've done before and it has to

50
00:04:26,840 --> 00:04:31,260
go into your info up close to your input list.

51
00:04:31,330 --> 00:04:39,290
Add the property privacy camera users description and to that property display an alert saying you need

52
00:04:39,380 --> 00:04:43,610
the camera to display.

53
00:04:43,750 --> 00:04:49,760
They are quite content content.

54
00:04:50,360 --> 00:04:50,890
All right.

55
00:04:51,110 --> 00:04:52,900
So we've been through this before.

56
00:04:52,910 --> 00:04:58,820
This property displays an alert to the user prompting him to enable the camera and this displays a descriptive

57
00:04:58,820 --> 00:05:00,310
message to the user.

58
00:05:00,320 --> 00:05:00,750
All right.

59
00:05:00,770 --> 00:05:02,720
Now to the good stuff.

60
00:05:02,720 --> 00:05:05,640
We're going to have to stop when the user presses play.

61
00:05:05,660 --> 00:05:07,890
It shows a box node right in front of them.

62
00:05:07,970 --> 00:05:11,480
So when the user taps the box a prince gets triggered.

63
00:05:11,570 --> 00:05:20,690
So I a function called I had no right to the bottom of the Wii controller funk I had no with no return

64
00:05:20,720 --> 00:05:31,010
or argument type and so write let known as equal to CNN and with a geometry of an A C inbox.

65
00:05:31,070 --> 00:05:40,850
So geometry I see and box and has a way of zero point two metres zero point two metres and a chamfer

66
00:05:40,850 --> 00:05:50,750
radius of zero position the box right in front of you by writing no the opposition is equal to a C and

67
00:05:50,750 --> 00:05:59,780
vector 3 0 0 and negative 1 meters behind the center axis and the no to the scene view by making it

68
00:05:59,780 --> 00:06:01,360
a child of the scenes Drew.

69
00:06:01,360 --> 00:06:11,410
No that's all right self-deceit if you've seen the route no child no no now call the function inside

70
00:06:11,410 --> 00:06:19,490
of play self-taught node and run the app.

71
00:06:19,540 --> 00:06:21,070
And so this is nothing new.

72
00:06:21,130 --> 00:06:24,590
You press play and it shows a box in front of you.

73
00:06:24,700 --> 00:06:28,420
Now when you do a way to detect when the box is being pressed on.

74
00:06:28,750 --> 00:06:32,720
So in view did load you need a tap gesture recognizer.

75
00:06:32,800 --> 00:06:44,260
So a way to detect when the box has been tapped so right left tap gesture recognizer is equal to you

76
00:06:44,350 --> 00:06:50,370
I tap just a recognizer with the target as self.

77
00:06:50,380 --> 00:06:57,280
So Target the current Wii controller an action is basically when a tap occurs what function is going

78
00:06:57,280 --> 00:06:58,800
to get triggered.

79
00:06:58,990 --> 00:07:02,450
So make a function called Hendel to.

80
00:07:02,740 --> 00:07:03,540
So fun.

81
00:07:03,670 --> 00:07:12,130
Handled top with no arguments and no return value and call this in the action argument by writing selector.

82
00:07:12,730 --> 00:07:18,760
And so the function we're going to select to be triggered is Hendel type.

83
00:07:19,090 --> 00:07:22,520
Now selector is an objective See argument.

84
00:07:22,780 --> 00:07:28,600
So just click fix to expose handle top to objective see.

85
00:07:28,660 --> 00:07:30,970
It's that simple.

86
00:07:30,970 --> 00:07:39,030
Now we want the tap recognizer to recognize any taps that occur in the scene view to do that right.

87
00:07:39,040 --> 00:07:52,530
Self self the scene view that I gesture recognize her tap gesture recognize her now put a printed team

88
00:07:52,530 --> 00:07:56,560
in and handle top called tapped the scene view.

89
00:07:57,130 --> 00:08:01,820
So every time you type in the scene you handle taps that get triggered and print this.

90
00:08:02,170 --> 00:08:07,330
So run the app so press play to display the box.

91
00:08:07,390 --> 00:08:13,440
And if I press anywhere on the scene view or even on the box it prints top the scene view.

92
00:08:13,750 --> 00:08:20,260
Now I want it such that only when you type on the box it prints tap tap on the scene view.

93
00:08:20,320 --> 00:08:21,710
It doesn't tap anything.

94
00:08:22,000 --> 00:08:26,320
And one more thing to notice is that the box is by default a color of white.

95
00:08:26,320 --> 00:08:28,670
If you don't give it a diffuse color.

96
00:08:28,990 --> 00:08:37,600
So back in X code every time the same view is tap's the gesture recognizer actually gives us information

97
00:08:37,660 --> 00:08:39,220
on what was tapped.

98
00:08:39,700 --> 00:08:46,420
And to get that information in the function that's an action of the gesture recognizer.

99
00:08:46,660 --> 00:08:53,550
So Hendel tap make an argument sender of type you have josher recognizer.

100
00:08:53,650 --> 00:09:00,910
So every time you tap on the scene view the tap just recognize sends this information with the sender.

101
00:09:00,910 --> 00:09:04,330
So we know that the view we tapped on is the same view.

102
00:09:04,600 --> 00:09:20,020
So right let's see if you tapped on is equal to sender does view as seen via.

103
00:09:20,040 --> 00:09:26,470
OK so now you need to get the coordinates of where the user typed in the scene.

104
00:09:26,710 --> 00:09:33,950
So right let's touch coordinates so the coordinates of where the user touched is equal to sender the

105
00:09:34,240 --> 00:09:40,050
location in scene view top on.

106
00:09:40,060 --> 00:09:46,830
So this variable tells us where the user tapped on in the scene view by getting it from the sender.

107
00:09:46,860 --> 00:09:51,500
So now we can check if the user tapped on an object by writing Lochhead test

108
00:09:54,200 --> 00:10:08,620
is equal to seeing you top down hit test touch coordinates and leave the options as blank.

109
00:10:08,730 --> 00:10:09,290
All right.

110
00:10:09,340 --> 00:10:15,910
So hit us checks if the coordinates you touched correspond to the coordinates of an object that's inside

111
00:10:15,910 --> 00:10:17,660
of the scene you tapped on.

112
00:10:17,920 --> 00:10:24,340
So basically if there is a match then it will give you his test results and information about what you

113
00:10:24,340 --> 00:10:25,410
touched.

114
00:10:25,750 --> 00:10:27,130
If there is no match.

115
00:10:27,190 --> 00:10:34,900
So if the location you touched in this scene doesn't correspond to a location of an object then this

116
00:10:34,900 --> 00:10:36,970
hit us variable will be empty.

117
00:10:37,060 --> 00:10:38,640
So if his test

118
00:10:43,110 --> 00:10:51,580
is empty print didn't touch anything.

119
00:10:53,470 --> 00:10:54,040
Else.

120
00:10:54,130 --> 00:11:02,650
So if there is his test results if we did touch something that's inside of the scene view print touched

121
00:11:02,740 --> 00:11:06,280
a box.

122
00:11:06,290 --> 00:11:06,730
All right.

123
00:11:06,720 --> 00:11:12,540
Now before I run this I'm just going to give this a diffused color because I'm not a big fan of the

124
00:11:12,540 --> 00:11:13,860
default white color.

125
00:11:14,010 --> 00:11:17,580
So right that fuse up content is equal to you.

126
00:11:17,580 --> 00:11:18,210
Eye color.

127
00:11:18,210 --> 00:11:19,410
Dark blue.

128
00:11:20,040 --> 00:11:26,030
And before running the app just remove this print statement and run it.

129
00:11:26,130 --> 00:11:29,250
So press play to display the box.

130
00:11:29,430 --> 00:11:37,010
And first if I just touch the empty seat view the coordinates I touch don't match any object in the

131
00:11:37,010 --> 00:11:37,900
sim view.

132
00:11:38,100 --> 00:11:41,410
There won't be a match so the hit test result will be empty.

133
00:11:41,730 --> 00:11:45,360
And notice in the debugger it says didn't touch anything.

134
00:11:45,450 --> 00:11:47,420
So everything works accordingly.

135
00:11:47,490 --> 00:11:52,480
However now if I touch the box it prints touched a box.

136
00:11:52,500 --> 00:11:58,500
The hit test finds a match between the coordinates you touched and the coordinates of the box and puts

137
00:11:58,500 --> 00:12:03,720
results and information on what you touched into the hit test array.

138
00:12:03,720 --> 00:12:08,910
Therefore the test variable is not empty and it has results.

139
00:12:08,910 --> 00:12:10,730
Now here is a challenge.

140
00:12:10,800 --> 00:12:18,330
So in X code when you touch a box and it goes to the state because the hit does variable is not empty

141
00:12:18,330 --> 00:12:26,850
it has results to try and extract the results out of the hit us variable such that it tells us the geometry

142
00:12:26,850 --> 00:12:28,630
of the note that we touched.

143
00:12:28,740 --> 00:12:32,210
Pause the video and try to.

144
00:12:32,360 --> 00:12:35,390
So the first thing you should note is that the hit test is an array.

145
00:12:35,450 --> 00:12:37,240
So if I were to touch nothing.

146
00:12:37,370 --> 00:12:41,840
So if the coordinates you touch don't match the coordinates of an object in the scene we're giving this

147
00:12:41,840 --> 00:12:43,320
array an empty value.

148
00:12:43,700 --> 00:12:48,890
If there is a match the coordinates you touch match coordinates of an object in the scene then we're

149
00:12:48,890 --> 00:12:51,260
setting this array to a value system.

150
00:12:51,270 --> 00:12:57,040
It only has one element of results such that the element is the object that we touched.

151
00:12:57,050 --> 00:13:03,950
So since the hit test array only has one element of the results we need get the first element by writing

152
00:13:04,220 --> 00:13:04,730
let.

153
00:13:04,730 --> 00:13:07,790
Results is equal to hit.

154
00:13:07,790 --> 00:13:14,550
Test does first unwrap it since we know we touch something because we're in the else statement.

155
00:13:15,140 --> 00:13:16,280
And now right.

156
00:13:16,280 --> 00:13:30,310
Let geometry is equal to results don't no geometry and printer print the geometry.

157
00:13:31,060 --> 00:13:31,440
OK.

158
00:13:31,450 --> 00:13:40,540
Now run the app press play touch the box and right here in the debugger it tells us that we touched

159
00:13:40,630 --> 00:13:49,600
and see in box with width height and length of 0.2 meters and cheff radius of zero which matches exactly

160
00:13:49,600 --> 00:13:51,860
the box that we created.

161
00:13:51,860 --> 00:13:52,290
All right.

162
00:13:52,300 --> 00:13:58,570
So you finally learned his testing and the next video we're going to replace this box with a 3-D model.
