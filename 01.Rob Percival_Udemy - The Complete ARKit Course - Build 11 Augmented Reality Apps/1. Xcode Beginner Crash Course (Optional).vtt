WEBVTT
1
00:00:00.240 --> 00:00:05.670
Welcome to the code beginners crash course if you have no previous experience with swift or X code but

2
00:00:05.670 --> 00:00:11.570
you really want to get into augmented reality I have prepared a very basic crash course on X code.

3
00:00:11.760 --> 00:00:17.280
What you need to know in order to follow along with that course and so to get familiar with X code we're

4
00:00:17.280 --> 00:00:24.600
going to build a very basic Up Please note this crash course is for beginners only if you have prior

5
00:00:24.600 --> 00:00:26.200
knowledge with swift or X code.

6
00:00:26.220 --> 00:00:28.460
Feel free to skip this video.

7
00:00:28.800 --> 00:00:29.750
Anyway let's get to it.

8
00:00:29.790 --> 00:00:32.400
In the introduction I showed you how to install X code.

9
00:00:32.400 --> 00:00:33.940
Now we're going to use it.

10
00:00:34.320 --> 00:00:41.190
So open it up create a new project a single view application.

11
00:00:41.490 --> 00:00:44.180
We're going to call the project counter app.

12
00:00:44.190 --> 00:00:46.170
You can call it whatever you want.

13
00:00:46.290 --> 00:00:48.600
Press next and create

14
00:00:51.160 --> 00:00:53.390
This is the X code platform.

15
00:00:53.530 --> 00:00:57.580
You should first notice this main dot storyboard file.

16
00:00:58.570 --> 00:01:03.630
Inside of this main storyboard file you should also notice a few controller.

17
00:01:03.910 --> 00:01:07.510
If you controller manages your apps user interface.

18
00:01:07.510 --> 00:01:14.980
This right here is the initial controller as you can tell by going to its attributes and Specter and

19
00:01:14.980 --> 00:01:17.470
you'll see that it's listed as such.

20
00:01:17.470 --> 00:01:20.170
This is our initial view controller.

21
00:01:20.260 --> 00:01:21.090
What does that mean.

22
00:01:21.220 --> 00:01:26.880
So when we first run our up this is the first page that's going to pop up.

23
00:01:27.070 --> 00:01:29.470
This empty white page.

24
00:01:29.680 --> 00:01:37.180
Let's try to run our up make sure to press the play button right here and I'm going to start off by

25
00:01:37.180 --> 00:01:42.810
running it on an iPhone 8 plus simulator press the play button.

26
00:01:44.500 --> 00:01:48.790
And once your app runs it should take a while for your simulator to load unless you already had it up

27
00:01:48.790 --> 00:01:49.210
and running.

28
00:01:49.210 --> 00:01:50.170
But once it does.

29
00:01:50.170 --> 00:01:52.810
Here is our MTV controller.

30
00:01:52.810 --> 00:01:55.630
Nothing interesting just an empty web page.

31
00:01:55.780 --> 00:02:02.630
Before we get into modifying this page this controller we're going to run this app on a physical device.

32
00:02:02.680 --> 00:02:04.660
What do I mean by this.

33
00:02:04.660 --> 00:02:10.930
Well right now I'm going to bring my actual phone plug it into my Mac using USP.

34
00:02:11.170 --> 00:02:19.480
And once you do that X code will detect that a physical device was just plugged into our Mac and it's

35
00:02:19.480 --> 00:02:23.080
going to let me run this up on my device.

36
00:02:23.080 --> 00:02:28.520
Now you might get a message that says oh a sex version lower than deployment target.

37
00:02:29.170 --> 00:02:36.550
This simply means that your phone doesn't have the latest version of us that X code requires to run

38
00:02:36.550 --> 00:02:37.540
apps on it.

39
00:02:37.990 --> 00:02:44.050
So make sure that you update your phone to the latest Iowas version to continue on with this crash course

40
00:02:45.310 --> 00:02:46.600
once you do so.

41
00:02:46.690 --> 00:02:52.830
Make sure to select this option and go to the settings of your project to your general settings.

42
00:02:52.830 --> 00:02:58.060
And before I move any further I just want to make this claim that once we get to the air content you'll

43
00:02:58.060 --> 00:03:01.010
notice that you cannot run the app on a simulator.

44
00:03:01.150 --> 00:03:03.720
Simulators don't have an air processor.

45
00:03:03.820 --> 00:03:06.230
You must use a physical device.

46
00:03:06.430 --> 00:03:08.240
So please learn how to do it now.

47
00:03:08.290 --> 00:03:09.220
Bring your phone.

48
00:03:09.220 --> 00:03:13.310
Plug it into your Mac and choose the physical device option.

49
00:03:13.800 --> 00:03:20.380
And once you do make sure to go to your general settings first make sure this is clicked automatically

50
00:03:20.390 --> 00:03:25.560
manage society and we're going to sign our personal team.

51
00:03:26.620 --> 00:03:32.260
If you don't have a personal team you can easily make one by following the steps on the Web site that

52
00:03:32.260 --> 00:03:34.250
I'm going to pull up right now.

53
00:03:34.450 --> 00:03:42.520
So if I simply go and google chrome and in Google right managing account x code the first link that

54
00:03:42.520 --> 00:03:48.640
pops up makes sure to click it and it shows you how to link your app ID to a personal development team

55
00:03:48.760 --> 00:03:53.190
to use for code signing to run apps on a physical device.

56
00:03:53.230 --> 00:03:58.570
So once you're finished following the steps if you don't have a personal team that shows up you should

57
00:03:58.570 --> 00:03:59.920
be good to go.

58
00:03:59.920 --> 00:04:03.320
So run the app on your device.

59
00:04:03.640 --> 00:04:09.580
Once you're in the app you should get an error telling us that we need our phone to trust any apps that

60
00:04:09.580 --> 00:04:13.700
are made from this developer right here to do so.

61
00:04:13.720 --> 00:04:21.520
Make sure to go to settings inside of settings go to General inside of general scroll all the way down

62
00:04:21.520 --> 00:04:24.070
till you go to device management.

63
00:04:24.550 --> 00:04:30.420
Right there we have to trust this personal team associated to this app idea right here are slim 0 8

64
00:04:30.460 --> 00:04:33.390
7 which is also my G-mail.

65
00:04:33.670 --> 00:04:46.510
So if I click on trust we now trusted our developer team press on OK run the app try it again and we

66
00:04:46.510 --> 00:04:52.060
finally ran our empty white page blank screen up on a physical device.

67
00:04:52.060 --> 00:04:53.350
This is very important.

68
00:04:53.350 --> 00:04:59.550
For once we get to our market you need to run apps on your actual phone not on simulators.

69
00:04:59.620 --> 00:05:03.780
And so I'm just going to close my physical device from here on out.

70
00:05:03.790 --> 00:05:05.910
I'm going to run apps on a simulator.

71
00:05:05.920 --> 00:05:08.500
You should stay on your physical device.

72
00:05:08.500 --> 00:05:14.250
I'm only doing so because it consumes a lot of battery and back into our storyboard.

73
00:05:14.260 --> 00:05:19.280
Remember that I said we would make a very basic app to start.

74
00:05:19.300 --> 00:05:22.500
We're going to add a label to our view controller.

75
00:05:22.690 --> 00:05:24.970
So make sure you're in the third column right here.

76
00:05:25.030 --> 00:05:27.340
Not the first not the second but the third.

77
00:05:27.370 --> 00:05:29.750
I've gone many questions on that for some reason.

78
00:05:30.010 --> 00:05:37.550
And inside of this column in the textfield right label it should search for the label you will buy which

79
00:05:37.740 --> 00:05:40.800
which we can add to the center of our controller.

80
00:05:40.840 --> 00:05:47.790
The vertical and horizontal center what would happen if I right now were up with this label show try

81
00:05:47.810 --> 00:05:53.850
to the label shows up but it's in a very awkward position.

82
00:05:53.860 --> 00:05:55.390
How does that make any sense.

83
00:05:55.410 --> 00:06:00.870
We place it in the perfect center in the middle of our controller why isn't it there why is there an

84
00:06:00.960 --> 00:06:02.530
offset in its position.

85
00:06:02.760 --> 00:06:05.490
Well that's because we have to give it constraints.

86
00:06:05.490 --> 00:06:09.470
We have to pin we have to constrain our label to that position.

87
00:06:10.210 --> 00:06:15.550
So click on the label and we're going to make sure that it's zero pixels from the horizontal center

88
00:06:16.210 --> 00:06:19.100
and zero pixels from the vertical center.

89
00:06:19.510 --> 00:06:20.460
To do that.

90
00:06:20.740 --> 00:06:22.630
Make sure you're clicked on the label.

91
00:06:22.630 --> 00:06:25.090
Click on these two bars right here.

92
00:06:25.090 --> 00:06:28.960
Zero pixels from the horizontal to zero pixels from the vertical.

93
00:06:29.420 --> 00:06:36.460
And these two constraints and our label should be pinned to our horizontal and vertical centers at all

94
00:06:36.460 --> 00:06:37.630
times.

95
00:06:37.630 --> 00:06:41.650
Now that it's pends simply run the app and there you go.

96
00:06:41.650 --> 00:06:46.510
Our label shows up in the middle of our controller because we placed it there.

97
00:06:46.510 --> 00:06:49.930
Now we will add a button to the bottom of our Wii controller.

98
00:06:50.240 --> 00:06:57.190
So right here right button and drag it to the bottom horizontal center just like before.

99
00:06:57.190 --> 00:07:03.640
We're going to make sure it's centered horizontally not vertically just horizontally.

100
00:07:04.880 --> 00:07:10.460
And we're going to have it be 20 pixels from the bottom of the Wii controller.

101
00:07:11.390 --> 00:07:15.480
So right now our button is at the bottom horizontal center.

102
00:07:15.800 --> 00:07:20.180
Now simply run the app to see if everything is in good working order.

103
00:07:21.330 --> 00:07:26.220
And that is all you just added a button and they will to your view controller and we're able to position

104
00:07:26.220 --> 00:07:28.680
them in specific locations.

105
00:07:28.680 --> 00:07:35.570
Now the purpose of our app of our basic app is the fall'n the label at first will have a text of zero.

106
00:07:36.000 --> 00:07:42.010
And whenever we press this button we want to increment our label by one every time.

107
00:07:42.090 --> 00:07:43.190
How do we do this.

108
00:07:43.230 --> 00:07:48.210
How do we add functionality to our button so that it modifies our label.

109
00:07:48.930 --> 00:07:54.330
While this controller if you go to the identity inspector lips I should click on the view controller

110
00:07:54.360 --> 00:07:55.970
not the view.

111
00:07:55.980 --> 00:08:02.400
If you go to its identity inspector you'll see that it's linked to this view controller class.

112
00:08:02.610 --> 00:08:09.870
And so whatever code we write in this class it will modify this view controller there for the first

113
00:08:09.870 --> 00:08:16.860
thing we're going to do is link our button to the view controller class so that we can give it functionality

114
00:08:16.980 --> 00:08:19.620
with code to do so.

115
00:08:19.620 --> 00:08:24.150
Click on your Wii controller and open up the assistant editor

116
00:08:28.760 --> 00:08:32.880
and it should show you the class associated with your Wii controller.

117
00:08:33.260 --> 00:08:38.580
If it doesn't work out that way for whatever reason I know as good as its fair share of bugs simply

118
00:08:38.600 --> 00:08:41.720
go on instead of automatic go on manual.

119
00:08:41.720 --> 00:08:50.860
We're going to manually present a Wii controller to the project directory and the file that you want

120
00:08:50.860 --> 00:08:52.510
to present.

121
00:08:52.510 --> 00:08:59.770
And now to link the button to our class simply drag it by holding the control key and drag the button

122
00:08:59.890 --> 00:09:03.410
all the way to your class to make the link.

123
00:09:03.460 --> 00:09:11.860
We're going to declare it as an I B option and call this IAB action perform or whatever name you want

124
00:09:11.860 --> 00:09:12.220
to give it.

125
00:09:12.220 --> 00:09:13.950
It doesn't matter.

126
00:09:15.120 --> 00:09:19.700
We're going to close the assistant editor and back to our Controller.

127
00:09:19.830 --> 00:09:21.750
What is this IAB action.

128
00:09:22.250 --> 00:09:27.410
Well simply enough this IBM action is connected to our button.

129
00:09:27.520 --> 00:09:33.990
So every time we press this button it's going to trigger this IAB auction function whatever code inside

130
00:09:33.990 --> 00:09:39.830
of it is going to be run to test that we're going to put a print statement right here.

131
00:09:39.840 --> 00:09:44.560
Prince pressing the button.

132
00:09:47.290 --> 00:09:49.000
This Prince Salman should get sugar.

133
00:09:49.040 --> 00:09:50.180
Once we press the button.

134
00:09:50.200 --> 00:09:51.710
So let's try it out.

135
00:09:51.850 --> 00:09:58.320
Run your app and simply enough it does just that.

136
00:09:58.320 --> 00:10:04.110
Now the purpose of this video remember is to change the value of this label.

137
00:10:04.110 --> 00:10:10.980
Every time we press the button first let's give the label an initial value of zero by going to the attribute

138
00:10:11.010 --> 00:10:12.110
inspector.

139
00:10:12.420 --> 00:10:20.740
And instead of a default text of label put it as 0 and now I'm not a big fan of how the width automatically

140
00:10:20.740 --> 00:10:28.210
changed because we changed the text so we're going to give it a width constraint of about 30 pixels

141
00:10:28.750 --> 00:10:33.450
to make sure that it always has a constant width that constraint.

142
00:10:33.490 --> 00:10:40.660
And make sure to center your number to the middle of your label like so now we need to link this label

143
00:10:40.660 --> 00:10:43.780
to our view controller class in order to modify it.

144
00:10:43.870 --> 00:10:52.000
Again open up the assistant editor press on the control key and drag your label all the way to your

145
00:10:52.000 --> 00:11:00.400
class and the Claire-Anne I'd be live with name label clothes the assistant editor and back to your

146
00:11:00.400 --> 00:11:02.200
view controller class.

147
00:11:02.320 --> 00:11:03.920
Why an the outlet.

148
00:11:04.330 --> 00:11:12.010
Well and I'd be action as one you're giving a piece of UI functionality we're giving the button functionality

149
00:11:12.130 --> 00:11:19.360
such that whenever it's pressed it triggers this IAB action function and be outlet is used to modify

150
00:11:19.390 --> 00:11:20.480
a piece of UI.

151
00:11:20.530 --> 00:11:24.280
In this case we're modifying the label simply enough.

152
00:11:24.280 --> 00:11:30.100
And for now when we press the button we're going to change the value of our label to something like

153
00:11:30.100 --> 00:11:44.170
Bob to do so right self that label the text is equal to a string of Bob so self in our class itself

154
00:11:44.440 --> 00:11:54.700
get the label and our label has a property tax that we can modify to equal a string of Bob text string

155
00:11:54.700 --> 00:11:55.460
type.

156
00:11:55.660 --> 00:12:02.030
And we're going to give it the string value strings are denoted by the following quotations.

157
00:12:02.510 --> 00:12:06.060
So run the app.

158
00:12:06.250 --> 00:12:12.890
If I press the button it changes the value of our label to Bob because we changed its text attribute.

159
00:12:12.940 --> 00:12:16.340
Now this label originally as you said before it says.

160
00:12:16.510 --> 00:12:22.320
It's an integer but it's wrapped inside of a string value in the form of text.

161
00:12:22.330 --> 00:12:24.810
Let's try printing it out.

162
00:12:24.860 --> 00:12:28.840
Self-labeled out text and see what we get.

163
00:12:28.880 --> 00:12:31.170
Run the up.

164
00:12:31.490 --> 00:12:37.450
If I press the button it should print a string type and it prints our string.

165
00:12:37.460 --> 00:12:44.630
Notice that it's denoted by the quotation marks but as an optional optionals or simply a way to check

166
00:12:44.660 --> 00:12:46.590
if something has a value or not.

167
00:12:46.700 --> 00:12:49.530
How do we check if this text has a value or not.

168
00:12:49.730 --> 00:12:51.080
Well we're sure that it does.

169
00:12:51.080 --> 00:12:54.150
It has a value of 0 but let's assume that we didn't.

170
00:12:54.320 --> 00:12:57.710
Let's assume this was some random piece of data that we got from the Internet.

171
00:12:58.100 --> 00:13:03.300
The first method to check if an optional has a value or not is to use an IF statement.

172
00:13:03.530 --> 00:13:11.040
So right if that number is equal to self that label text.

173
00:13:11.930 --> 00:13:17.750
If this label text is an actual value if it's not nil print that number

174
00:13:20.390 --> 00:13:27.800
else print value is nil.

175
00:13:28.890 --> 00:13:31.110
Going to delete this for now.

176
00:13:32.060 --> 00:13:40.070
So basically if this optional type contains the value the method succeeds and it prints the number if

177
00:13:40.070 --> 00:13:44.150
the optionals no trigger the else statement.

178
00:13:44.150 --> 00:13:52.070
Run the up press the button and notice that it prints our string without the optional tag because we

179
00:13:52.070 --> 00:13:54.250
unwrapped it with an flet statement.

180
00:13:55.060 --> 00:13:59.060
You can also use a state to unwrap optionals.

181
00:13:59.380 --> 00:14:03.840
It behaves the exact same way as if let's it's just different syntax.

182
00:14:03.970 --> 00:14:12.610
So instead of if right guard left and we simply have to move our statements somewhere else get rid of

183
00:14:12.610 --> 00:14:20.830
these brackets and right after your guard statement right here right else return how this works.

184
00:14:20.830 --> 00:14:26.110
If this optional right here contains a value then run all of the code below it.

185
00:14:26.590 --> 00:14:30.580
If the optional is no simpler return and do nothing.

186
00:14:30.640 --> 00:14:32.410
Don't run any of the code below it.

187
00:14:33.930 --> 00:14:35.160
Let's try it out.

188
00:14:37.230 --> 00:14:40.580
And the statement does not get triggered because this label.

189
00:14:40.610 --> 00:14:44.080
It indeed does have a text value that has a value of zero.

190
00:14:44.090 --> 00:14:45.180
It's not nil.

191
00:14:45.260 --> 00:14:47.620
So this code right under the guard last statement.

192
00:14:47.660 --> 00:14:48.910
It all gets triggered.

193
00:14:49.070 --> 00:14:55.350
Now another way to unwrap things is to forcefully unwrap them forcefully and wrap things a lot in the

194
00:14:55.350 --> 00:14:56.090
course.

195
00:14:56.090 --> 00:14:57.210
It's a very bad habit.

196
00:14:57.290 --> 00:14:59.840
You should never do it if you're releasing it up.

197
00:14:59.870 --> 00:15:04.490
I do it in the course simply because it's all tutorials and the point of the lectures are about etiquette

198
00:15:04.670 --> 00:15:05.510
not optionals

199
00:15:08.820 --> 00:15:19.290
in any case to forcefully unwrap our text optional we're going to print it like so and simply add an

200
00:15:19.290 --> 00:15:27.510
exclamation mark to Conradt our optional run up pressed the button and notice that the optional tag

201
00:15:27.510 --> 00:15:28.080
isn't there.

202
00:15:28.080 --> 00:15:35.240
We forcefully unwrapped our variable our property and noticed how convenient this is.

203
00:15:35.400 --> 00:15:37.120
Although this can be pretty bad.

204
00:15:37.270 --> 00:15:42.820
Imagine you are getting some random data from the web processing it in your app.

205
00:15:42.900 --> 00:15:45.430
So in that time that data can be no.

206
00:15:45.870 --> 00:15:50.120
If you try to forcefully unwrap something that's Snel your app will crash.

207
00:15:50.130 --> 00:15:51.280
Let's try it out.

208
00:15:51.330 --> 00:16:01.780
I'm going to make a variable var some variable of type optional string equal to nil.

209
00:16:02.280 --> 00:16:08.280
So this variable doesn't actually have about you know what would happen if I tried to forcefully unwrap

210
00:16:08.280 --> 00:16:08.670
it.

211
00:16:11.010 --> 00:16:16.410
Does some variable add your exclamation mark pressed the button.

212
00:16:18.160 --> 00:16:20.230
And your crushes

213
00:16:23.890 --> 00:16:27.820
that is why we use optional chaining like if lets Guard.

214
00:16:27.820 --> 00:16:30.720
Let's try this with an athlete.

215
00:16:31.550 --> 00:16:38.320
A-flat value is equal to some variable if some variable has a value.

216
00:16:38.320 --> 00:16:45.970
Print has value else.

217
00:16:46.960 --> 00:16:51.490
Print no value.

218
00:16:52.190 --> 00:16:52.730
Or you know what.

219
00:16:52.770 --> 00:16:55.180
Instead of printing the string let's print the value itself.

220
00:16:55.200 --> 00:16:58.470
If it even has one match it doesn't but let's do it anyway.

221
00:16:58.830 --> 00:17:02.690
Run the up if I press the button.

222
00:17:02.690 --> 00:17:04.370
It prints no value.

223
00:17:04.370 --> 00:17:11.540
This is why this is called safely unwrapping because it lets you fail gracefully instead of crossing

224
00:17:11.540 --> 00:17:13.880
the OP right here in this statement.

225
00:17:13.880 --> 00:17:19.190
You would be able to show your user an alert oh hey this variable that you tried to access doesn't actually

226
00:17:19.190 --> 00:17:20.170
have a value.

227
00:17:20.180 --> 00:17:25.670
Try again or something depending on if you're trying to make this would work the exact same way with

228
00:17:25.670 --> 00:17:27.020
the guard statements.

229
00:17:27.080 --> 00:17:30.160
If you just follow the syntax that we had before.

230
00:17:30.160 --> 00:17:33.500
OK so that's it for optionals.

231
00:17:33.530 --> 00:17:40.980
And notice how we declared this as a VAR we can also declared as a let let simply means that we don't

232
00:17:41.070 --> 00:17:43.020
expect to modify this variable.

233
00:17:43.020 --> 00:17:45.400
It's immutable anyway.

234
00:17:45.510 --> 00:17:49.830
We don't really care about this very well let's delete it.

235
00:17:49.890 --> 00:17:52.290
We're going to delete this optional changing as well.

236
00:17:52.290 --> 00:17:53.600
We don't need it anymore.

237
00:17:54.620 --> 00:17:59.710
Going back to our label this label as you remember gives us bad text.

238
00:17:59.810 --> 00:18:06.050
We want to modify this text and make it so that it increments our label by one every time.

239
00:18:06.380 --> 00:18:14.870
So make you a variable number var number of type integer and it is equal to zero.

240
00:18:15.350 --> 00:18:22.090
Every time we press the button we're going to increment this number by one every time to do so right.

241
00:18:22.120 --> 00:18:27.050
Self don't number plus equals 1.

242
00:18:27.080 --> 00:18:35.020
This is shorthand notation for take the current value of the number and increment it by one every time.

243
00:18:36.450 --> 00:18:40.860
We're going to print our number out print self-taught number.

244
00:18:41.400 --> 00:18:50.470
Run the app press on your button and it increments our number by 1 every time like we expected.

245
00:18:50.480 --> 00:18:55.480
Now we just need to set our label text equal to this number variable.

246
00:18:55.850 --> 00:19:03.890
We can do so by writing self don't label that text is equal to number going to remove this print statement

247
00:19:03.890 --> 00:19:05.240
for now.

248
00:19:05.870 --> 00:19:11.690
And we should be expecting an error pretty soon.

249
00:19:11.690 --> 00:19:13.460
Any time now.

250
00:19:13.470 --> 00:19:13.930
All right.

251
00:19:13.940 --> 00:19:15.400
There it is.

252
00:19:15.460 --> 00:19:16.850
And so why doesn't this work.

253
00:19:17.060 --> 00:19:24.440
Well we're trying to make a string equal to an integer type which doesn't make much sense.

254
00:19:24.440 --> 00:19:27.320
These are two different types.

255
00:19:27.350 --> 00:19:28.550
This is a string.

256
00:19:28.740 --> 00:19:37.420
And so to string ify this number simply enclose it with string brackets like so.

257
00:19:38.420 --> 00:19:45.320
So take this number make it into a string and then set it to our label dot text property and you are

258
00:19:45.320 --> 00:19:46.570
finally done.

259
00:19:48.190 --> 00:19:53.310
We're on your up press the button and everything works fine.

260
00:19:54.300 --> 00:19:59.670
Now here's a challenge trying to have this label decrement by one every time.

261
00:20:00.430 --> 00:20:02.700
Paused the video and give it a try.

262
00:20:05.350 --> 00:20:12.350
Simply enough instead of self-doubting number plus equals one self-doubting number minus equals 1.

263
00:20:12.700 --> 00:20:16.480
So take its current value and minus one every time.

264
00:20:17.540 --> 00:20:23.490
Run the up press on the button and everything works as expected.

265
00:20:24.020 --> 00:20:26.270
And this is it for the crash course.

266
00:20:26.270 --> 00:20:32.630
If you had programming experience beforehand but you simply were not familiar with the X code platform

267
00:20:33.080 --> 00:20:34.760
you should be good to go now.

268
00:20:34.760 --> 00:20:35.840
I'll see you in the course.
