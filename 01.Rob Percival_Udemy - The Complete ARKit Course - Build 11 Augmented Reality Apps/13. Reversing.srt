1
00:00:00,270 --> 00:00:03,180
Last video we were able to drive our car forward.

2
00:00:03,180 --> 00:00:08,700
Now we're going to look at reversing it and applying a braking force before we get to reversing and

3
00:00:08,700 --> 00:00:10,020
braking our car.

4
00:00:10,020 --> 00:00:17,700
I want to make our steering smoother the steering angle gets smoother if this value better reflects

5
00:00:17,730 --> 00:00:20,490
the acceleration due to gravity.

6
00:00:20,490 --> 00:00:21,960
So what do I mean by this.

7
00:00:22,020 --> 00:00:27,570
The accelerometer sure is detecting the acceleration due to gravity in the y direction and from that

8
00:00:27,570 --> 00:00:34,070
acceleration due to gravity we're converting that to the steering angle by setting the acceleration

9
00:00:34,100 --> 00:00:37,870
equal to the steering angle of the wheels the wheels turn accordingly.

10
00:00:38,120 --> 00:00:44,060
But the accelerometer is also detecting other minor accelerations being applied on the phone for instance

11
00:00:44,120 --> 00:00:46,320
as I'm physically moving the phone.

12
00:00:46,580 --> 00:00:52,130
I'm giving it an applied acceleration on top of the gravitational acceleration.

13
00:00:52,190 --> 00:00:57,820
We want to filter out any applied acceleration and we only want the acceleration due to gravity.

14
00:00:58,070 --> 00:00:59,530
Nothing else.

15
00:00:59,540 --> 00:01:06,920
So in your resources folder there is a function which filters out any acceleration that's not gravitational.

16
00:01:06,920 --> 00:01:13,460
Make sure to copy it into your project and right here on top of your view controller make a variable

17
00:01:13,970 --> 00:01:21,850
var acceleration values is equal to an array type of acceleration values.

18
00:01:21,950 --> 00:01:24,700
So you get acceleration values 0

19
00:01:28,070 --> 00:01:31,090
and another you want acceleration value of 0.

20
00:01:31,400 --> 00:01:35,440
So these are just double values both of which equals zero.

21
00:01:35,750 --> 00:01:40,040
The first element of the first double value we're going to have that represent the acceleration due

22
00:01:40,040 --> 00:01:42,470
to gravity in the x direction.

23
00:01:42,470 --> 00:01:47,250
The second element we're going to have it represent the acceleration due to gravity in the wind direction

24
00:01:48,140 --> 00:01:50,560
right now let's just focus on the y value.

25
00:01:50,600 --> 00:01:52,030
The second element.

26
00:01:52,140 --> 00:01:58,890
So access the second element by writing acceleration values 1.

27
00:01:58,910 --> 00:02:03,470
So the second inducts in our array is equal to filtered

28
00:02:06,910 --> 00:02:14,290
your current acceleration value is the following acceleration values 1 and the updated acceleration

29
00:02:14,290 --> 00:02:19,310
is whatever the accelerometer updates us on what the acceleration due to gravity is.

30
00:02:19,330 --> 00:02:22,450
So acceleration why.

31
00:02:22,850 --> 00:02:24,260
So here's what I'm doing.

32
00:02:24,400 --> 00:02:27,330
Don't worry too much about this complex return value.

33
00:02:27,670 --> 00:02:33,310
Just know that this function takes into acceleration due to gravity is your current one.

34
00:02:33,310 --> 00:02:36,510
So first we're giving our current acceleration due to gravity.

35
00:02:36,520 --> 00:02:37,860
A default value.

36
00:02:37,880 --> 00:02:38,770
Zero.

37
00:02:38,860 --> 00:02:42,220
Right here you acceleration value is zero.

38
00:02:42,580 --> 00:02:46,320
And then we're putting the acceleration that the accelerometer updates a sun.

39
00:02:46,330 --> 00:02:52,030
So your vertical acceleration not why this function then returns an acceleration due to gravity that's

40
00:02:52,030 --> 00:02:58,270
filtered out using a filtering factor and we're giving the second element in the acceleration values

41
00:02:58,270 --> 00:03:01,530
array that filtered acceleration due to gravity.

42
00:03:01,540 --> 00:03:06,790
So instead of using this value to represent our acceleration due to gravity use the one that's filtered

43
00:03:06,790 --> 00:03:07,120
out.

44
00:03:07,240 --> 00:03:11,550
So just put acceleration values one.

45
00:03:11,640 --> 00:03:18,340
The second element this value better represents the acceleration due to gravity in the y direction and

46
00:03:18,340 --> 00:03:23,480
therefore better reflects how the phone is oriented which will cause for a smoother steering angle.

47
00:03:23,620 --> 00:03:28,750
If you're still confused think about this let's just say that at one point in time while I'm running

48
00:03:28,760 --> 00:03:34,590
the OP the phone is completely vertical and this equals one the current acceleration is one.

49
00:03:34,810 --> 00:03:41,620
Then I reorient my phone the accelerometer updates us on the new acceleration due to gravity acceleration

50
00:03:41,620 --> 00:03:47,110
not Y which could be something very close to one like 0.9 or something.

51
00:03:47,140 --> 00:03:53,750
However we need to filter this 0.9 value from any accelerations that aren't gravitational.

52
00:03:54,190 --> 00:04:00,460
And we do that by putting our previous acceleration value which was one hour of did it.

53
00:04:00,460 --> 00:04:07,300
Acceleration values since we moved the film which is 0.9 or something we would put both of these accelerations

54
00:04:07,330 --> 00:04:13,630
into our function and through a very complex equation it would return a filtered acceleration due to

55
00:04:13,630 --> 00:04:16,560
gravity that better reflects the orientation of the phone.

56
00:04:16,750 --> 00:04:19,340
Now as long as we're filtering the vertical acceleration.

57
00:04:19,360 --> 00:04:25,870
Make sure to also filter your horizontal acceleration by accessing the first inducts and your acceleration

58
00:04:25,870 --> 00:04:33,160
values array and making that equal to filtered your current acceleration will just be the falling acceleration

59
00:04:33,160 --> 00:04:34,870
values at zero.

60
00:04:34,870 --> 00:04:39,490
Remember we said that the first index is the horizontal acceleration and the second one is the vertical

61
00:04:39,830 --> 00:04:42,600
and put your updated horizontal acceleration.

62
00:04:43,820 --> 00:04:49,610
And instead of checking if acceleration X is zero check if acceleration values zero bigger than zero.

63
00:04:49,610 --> 00:04:55,370
This simply represents a more accurate description of what our horizontal acceleration due to gravity

64
00:04:55,370 --> 00:04:56,090
is.

65
00:04:56,390 --> 00:05:05,260
So we're on the up wait till the world orange and those once the world orange and those start detecting

66
00:05:05,260 --> 00:05:09,950
some surfaces once you detect a large enough surface

67
00:05:13,150 --> 00:05:20,420
and your car start driving and everything works pretty well.

68
00:05:20,420 --> 00:05:22,060
The steering is a lot smoother.

69
00:05:24,520 --> 00:05:30,400
Now you could have not even added this function and left everything the same as it was before everything

70
00:05:30,400 --> 00:05:31,710
would have still worked fine.

71
00:05:31,930 --> 00:05:37,090
However this function simply makes for a smoother experience when driving in a car.

72
00:05:37,090 --> 00:05:40,030
Now finally there are two more features that I want to add.

73
00:05:40,330 --> 00:05:45,680
If I tap the device with two fingers I want the car to reverse if I type it with three fingers.

74
00:05:45,700 --> 00:05:52,870
I want the car to stop to start braking so instead of a bool value make touching an integer

75
00:05:55,540 --> 00:06:03,110
equal to zero in the now inside of touches begin.

76
00:06:03,110 --> 00:06:04,360
Delete this.

77
00:06:04,460 --> 00:06:11,680
Guard let is equal to touch the first else for turn.

78
00:06:14,500 --> 00:06:21,550
So if there is at least one finger touching the screen then increment your touched variable by how many

79
00:06:21,550 --> 00:06:26,070
fingers are touching the screen touches the top count.

80
00:06:26,080 --> 00:06:31,190
So if I touch the screen with two fingers this will equal two if I touch the screen with three fingers

81
00:06:31,190 --> 00:06:32,270
that will equal three.

82
00:06:32,350 --> 00:06:41,150
And inside of touch is ended when I release my fingers says self touched is equal to zero and now in

83
00:06:41,150 --> 00:06:42,990
that simulate physics time.

84
00:06:43,090 --> 00:06:47,160
Let me just try and find this function right here.

85
00:06:47,260 --> 00:06:50,240
If self touched is equal to 1.

86
00:06:50,500 --> 00:06:53,200
So if I only have one finger on the screen.

87
00:06:53,470 --> 00:06:56,600
Dr normally now right.

88
00:06:56,610 --> 00:07:03,310
Else if self-taught touched is equal to two.

89
00:07:04,080 --> 00:07:09,380
So if I have two fingers on the screen I want the car to drive in the reverse direction.

90
00:07:09,540 --> 00:07:12,000
Pause the video and I want you to try and do that

91
00:07:14,800 --> 00:07:17,230
to drive the car in the reverse direction.

92
00:07:17,440 --> 00:07:20,050
Just set the engine for us to a negative value.

93
00:07:21,950 --> 00:07:25,230
And if touch count is equal to 3.

94
00:07:25,430 --> 00:07:31,850
If self touched is equal to three if I'm touching the screen with three fingers we need the card to

95
00:07:31,850 --> 00:07:32,960
break.

96
00:07:32,960 --> 00:07:35,810
So declare var braking force

97
00:07:38,840 --> 00:07:42,770
of type C.G. float is equal to zero.

98
00:07:43,070 --> 00:07:52,100
If the user has three fingers on the screen put a braking force of 100 Newtons so braking force is equal

99
00:07:52,100 --> 00:07:53,930
to 100.

100
00:07:54,410 --> 00:07:59,770
And apply this braking force to the back wheels of the car by riding self.

101
00:08:00,050 --> 00:08:03,340
The vehicle does apply braking force

102
00:08:06,520 --> 00:08:10,150
the braking force itself and we're going to apply it to the back wheels.

103
00:08:10,150 --> 00:08:15,030
We already concluded that the back wheels are located in zero and one of our wheels are right.

104
00:08:15,370 --> 00:08:18,470
So make sure to add that to wheel number one as well.

105
00:08:21,380 --> 00:08:26,500
So first the braking force is zero and if you touch the screen with three fingers the car will break

106
00:08:26,510 --> 00:08:29,000
out a force of 100 Newtons.

107
00:08:29,090 --> 00:08:39,040
Run the UP WAIT TILL THE WORLD origin loads as soon as the world origin loads start detecting some surfaces.

108
00:08:39,240 --> 00:08:44,370
Once you've detected a large enough surface make sure to rotate your phone horizontally so that your

109
00:08:44,370 --> 00:08:47,060
car's orientation at first is straight.

110
00:08:47,070 --> 00:08:49,680
Your car will drive in the forward direction.

111
00:08:51,260 --> 00:08:54,170
Touch the screen with one finger and the car drives normally.

112
00:08:54,200 --> 00:08:59,870
Touch it with two fingers and the car reverses and the engine for us is negative as you're driving.

113
00:08:59,870 --> 00:09:05,600
Touch the car with three fingers and the car stops at a force of 100 Newtons and that is it for the

114
00:09:05,600 --> 00:09:08,320
car up.

115
00:09:08,350 --> 00:09:15,130
We were able to convert a normal node to a vehicle and applied orientation engine forces and braking

116
00:09:15,130 --> 00:09:16,520
forces to that vehicle.

117
00:09:18,540 --> 00:09:27,390
You learn how to figure out the orientation of the phone based on the Phelan's acceleration due to gravity.

118
00:09:27,630 --> 00:09:30,530
In that section we're going to make our ruler up.
