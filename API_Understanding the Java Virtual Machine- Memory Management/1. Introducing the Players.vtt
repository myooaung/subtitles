WEBVTT
1
00:00:01.640 --> 00:00:04.340
Hi. My name is Kevin Jones,

2
00:00:04.340 --> 00:00:07.980
and this is the How Garbage Collection Works in the Oracle JVM

3
00:00:07.980 --> 00:00:11.750
chapter from the Understanding the Java Virtual Machine: Memory

4
00:00:11.750 --> 00:00:14.900
Management class from Pluralsight.

5
00:00:14.900 --> 00:00:16.270
In the previous chapter,

6
00:00:16.270 --> 00:00:19.740
we talked about generalities of using a garbage collector.

7
00:00:19.740 --> 00:00:22.320
We now have to think about exactly how we are going to do this and

8
00:00:22.320 --> 00:00:24.840
exactly what the requirements are for a garbage collector.

9
00:00:24.840 --> 00:00:26.640
So there are many things to consider here.

10
00:00:26.640 --> 00:00:28.720
So, for example, with a garbage collector,

11
00:00:28.720 --> 00:00:32.730
we have what are called stop the world events. A stop the world event is

12
00:00:32.730 --> 00:00:36.440
when the garbage collector pauses the entire application.

13
00:00:36.440 --> 00:00:38.410
And at that point, it collects garbage.

14
00:00:38.410 --> 00:00:42.340
We want to try and minimize these events.

15
00:00:42.340 --> 00:00:44.890
We also might need to think about memory fragmentation.

16
00:00:44.890 --> 00:00:46.400
So when the garbage collector runs,

17
00:00:46.400 --> 00:00:50.490
does it defragment memory all at once. does it leave it to a later stage, or

18
00:00:50.490 --> 00:00:54.520
does it just leave memory fragmented on the basis that leaving memory

19
00:00:54.520 --> 00:00:58.940
fragmented has a cheaper cost than trying to defragment it?

20
00:00:58.940 --> 00:01:01.450
We also have to think about the throughput of the garbage collector. How

21
00:01:01.450 --> 00:01:04.740
quickly can it run, how quickly can it collect garbage, and does that

22
00:01:04.740 --> 00:01:09.040
affect the behavior of your application? To achieve these things, there

23
00:01:09.040 --> 00:01:12.580
are different garbage collectors inside the virtual machines. There are a

24
00:01:12.580 --> 00:01:15.590
mixture of generational garbage collectors that do copying, that do mark

25
00:01:15.590 --> 00:01:19.360
and sweep. Some leave memory fragmentation, some don't. And you have to

26
00:01:19.360 --> 00:01:22.890
choose which one of these you'd like to use. And in this chapter, we'll

27
00:01:22.890 --> 00:01:25.720
take a look at each these different types of garbage collectors that the

28
00:01:25.720 --> 00:01:29.530
virtual machine has and how they can be used inside the VM.

29
00:01:29.530 --> 00:01:33.550
One other thing to think about is if you're running on a multiâ€‘core machine. So

30
00:01:33.550 --> 00:01:36.520
now we have multiple processes, we have multiple threads.

31
00:01:36.520 --> 00:01:40.930
Can we have a garbage collector that can run concurrently with our application?

32
00:01:40.930 --> 00:01:43.350
Are you running parallel with the application? And will that

33
00:01:43.350 --> 00:01:51.000
provide benefits to the application? And again, Java provides these types of garbage collectors as well.

