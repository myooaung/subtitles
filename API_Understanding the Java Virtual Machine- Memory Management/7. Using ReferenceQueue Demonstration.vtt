WEBVTT
1
00:00:02.840 --> 00:00:05.570
So for this demo, again, we're going to have a Person type,

2
00:00:05.570 --> 00:00:10.510
so we'll have final class Person.

3
00:00:10.510 --> 00:00:13.320
I've also got a class called PersonCleaner,

4
00:00:13.320 --> 00:00:17.500
and the PersonCleaner class is the thing that's going to clean up

5
00:00:17.500 --> 00:00:21.940
our Person type when we're finished with it.

6
00:00:21.940 --> 00:00:26.410
We said that we would use this to create a class derived from a reference type.

7
00:00:26.410 --> 00:00:30.060
So I need a new class, and let's call this PersonWeakReference,

8
00:00:30.060 --> 00:00:37.370
and PersonWeakReference will extend WeakReference. And it'll extend

9
00:00:37.370 --> 00:00:44.090
WeakReference of Person, and this thing will need a constructor.

10
00:00:44.090 --> 00:00:48.910
So for this constructor, as well as passing in a Person and a ReferenceQueue,

11
00:00:48.910 --> 00:00:52.260
we're also going to pass in a PersonCleaner,

12
00:00:52.260 --> 00:00:54.010
and we'll just call this thing cleaner.

13
00:00:54.010 --> 00:00:58.080
And then we'll bind our PersonCleaner to a field in the object.

14
00:00:58.080 --> 00:01:03.390
So we'll call super, and then we'll say this.cleaner = cleaner.

15
00:01:03.390 --> 00:01:10.850
Then on the reference type, we'll have a public void clean method.

16
00:01:10.850 --> 00:01:16.130
And then in the clean method, we'll do cleaner.clean.

17
00:01:16.130 --> 00:01:19.810
And then we'll add this clean method to our PersonCleaner.

18
00:01:19.810 --> 00:01:24.960
And in here for now, we'll just print out cleaned.

19
00:01:24.960 --> 00:01:29.000
So now to use this, we'll create a Person object.

20
00:01:29.000 --> 00:01:33.970
We'll create a ReferenceQueue object, maybe a ReferenceQueue of type Person.

21
00:01:33.970 --> 00:01:36.030
We'll create a PersonCleaner object,

22
00:01:36.030 --> 00:01:39.070
and we'll create a PersonWeakReference object,

23
00:01:39.070 --> 00:01:43.500
so PersonWeakReference weakReference = new PersonWeakReference,

24
00:01:43.500 --> 00:01:45.530
and this thing will take a reference to person p,

25
00:01:45.530 --> 00:01:49.470
the PersonCleaner that we call cleaner, and the ReferenceQueue.

26
00:01:49.470 --> 00:01:52.940
So now we have a weak reference to a person object.

27
00:01:52.940 --> 00:02:00.380
If we set p to null and call System.gc, when the garbage collector runs,

28
00:02:00.380 --> 00:02:04.560
the weak reference will now be added to the reference queue.

29
00:02:04.560 --> 00:02:12.140
So if I say PersonWeakReference wr = referenceQueue.remove,

30
00:02:12.140 --> 00:02:13.690
we'll get back our weak reference.

31
00:02:13.690 --> 00:02:15.630
I surround this with a tryâ€‘catch.

32
00:02:15.630 --> 00:02:18.120
I cast this to be the write type, and from here,

33
00:02:18.120 --> 00:02:22.080
I can call wr.clean to clean up the reference.

34
00:02:22.080 --> 00:02:23.920
And at this point, the reference should be returned,

35
00:02:23.920 --> 00:02:26.460
and we should print out cleaned.

36
00:02:26.460 --> 00:02:28.620
And there we go, we print out the message cleaned.

37
00:02:28.620 --> 00:02:29.140
However,

38
00:02:29.140 --> 00:02:31.420
this isn't particularly satisfactory as I'm just calling

39
00:02:31.420 --> 00:02:34.040
all of this code on the same thread.

40
00:02:34.040 --> 00:02:36.830
We'd like to execute this code on a background thread,

41
00:02:36.830 --> 00:02:40.600
and we can do that by using Java's executor service.

42
00:02:40.600 --> 00:02:42.260
So the code will be something like this.

43
00:02:42.260 --> 00:02:45.890
I can say ExecutorService executorService =

44
00:02:45.890 --> 00:02:51.680
Executors.newSingleThreadExecutor, so create me an executor service

45
00:02:51.680 --> 00:02:58.430
that'll execute on a single thread. I can then call executorService.execute,

46
00:02:58.430 --> 00:02:59.950
and execute takes a runnable.

47
00:02:59.950 --> 00:03:04.060
So here I can say new Runnable, which provides me with a run method.

48
00:03:04.060 --> 00:03:07.960
Then inside the Runnable, I'm simply going to place the code from here.

49
00:03:07.960 --> 00:03:12.500
So I want to take this weak reference code and place that inside the runnable.

50
00:03:12.500 --> 00:03:15.700
Now ReferenceQueue now is inside the Runnable method, so we need to make

51
00:03:15.700 --> 00:03:21.810
this a final so that the thread can see it. But apart from that, the code

52
00:03:21.810 --> 00:03:25.340
inside here should be exactly the same. So what'll happen here, we create

53
00:03:25.340 --> 00:03:26.830
all the objects that we need.

54
00:03:26.830 --> 00:03:30.490
We create the executor service, and this thing will start running immediately.

55
00:03:30.490 --> 00:03:30.790
However,

56
00:03:30.790 --> 00:03:32.610
this is running on a background thread, so at some

57
00:03:32.610 --> 00:03:34.110
point in the future, this will run.

58
00:03:34.110 --> 00:03:36.440
We're not quite sure when it will run.

59
00:03:36.440 --> 00:03:40.860
We then set a reference from object to null. We then call gc. What we'd

60
00:03:40.860 --> 00:03:45.160
now like to happen is to wait just to make sure that the executor runs

61
00:03:45.160 --> 00:03:48.040
and then shut down the executor service.

62
00:03:48.040 --> 00:03:50.530
So I'm going to paste in some code here to do that.

63
00:03:50.530 --> 00:03:53.160
So we create a new BufferedReader here and print out the message

64
00:03:53.160 --> 00:03:56.090
saying press any key to continue. At this point,

65
00:03:56.090 --> 00:03:58.050
we can wait until the executor runs.

66
00:03:58.050 --> 00:04:01.640
We then enter a key and then shut down the executor and

67
00:04:01.640 --> 00:04:03.390
shut down the rest of the application.

68
00:04:03.390 --> 00:04:06.950
The key thing here is that the code in the executor is now

69
00:04:06.950 --> 00:04:09.610
running on a background thread and doesn't interfere with the

70
00:04:09.610 --> 00:04:11.470
main running of the application.

71
00:04:11.470 --> 00:04:13.570
So we can use this to poll the reference queue and

72
00:04:13.570 --> 00:04:16.740
just clean things up when we need to.

73
00:04:16.740 --> 00:04:21.640
So if I run this code, so here we get the message, press any key to continue.

74
00:04:21.640 --> 00:04:24.800
The executor has run. That's printed out the clean message.

75
00:04:24.800 --> 00:04:26.280
We have cleaned things up.

76
00:04:26.280 --> 00:04:27.480
And the application is still running,

77
00:04:27.480 --> 00:04:34.000
waiting for input from the user. If I press Enter here, we exit the application.

