1
00:00:02,740 --> 00:00:07,380
There are also different types of garbage collection. So one type is do nothing.

2
00:00:07,380 --> 00:00:10,110
The garbage collector might just decide never to run,

3
00:00:10,110 --> 00:00:13,760
never to do anything, no memory gets freed, but we do still

4
00:00:13,760 --> 00:00:16,910
have the guarantee of not collecting live objects, and

5
00:00:16,910 --> 00:00:19,610
that's obviously a good thing.

6
00:00:19,610 --> 00:00:22,570
There's also reference counting garbage collection, and a good

7
00:00:22,570 --> 00:00:25,640
example of this is the COM programming environment.

8
00:00:25,640 --> 00:00:30,060
In COM, applications make calls to two functions, AddRef

9
00:00:30,060 --> 00:00:34,040
and Release. AddRef increments a count on an object, and

10
00:00:34,040 --> 00:00:36,240
Release decrements a count.

11
00:00:36,240 --> 00:00:38,110
When that count goes to 0,

12
00:00:38,110 --> 00:00:40,510
the object is no longer being referenced, and the object can now

13
00:00:40,510 --> 00:00:43,540
clean itself up and remove itself from memory.

14
00:00:43,540 --> 00:00:46,990
We have mark and sweep garbage collectors. With a mark and sweep

15
00:00:46,990 --> 00:00:49,630
garbage collector, when the garbage collector runs,

16
00:00:49,630 --> 00:00:51,320
it runs in two phases.

17
00:00:51,320 --> 00:00:54,070
The mark phase walks through all live memory,

18
00:00:54,070 --> 00:00:56,740
marking that memory as still being alive.

19
00:00:56,740 --> 00:01:01,250
And the sweep phase removes all unused memory.

20
00:01:01,250 --> 00:01:04,240
And this leaves us with memory that could be fragmented.

21
00:01:04,240 --> 00:01:06,730
We have a copying garbage collector, and typically

22
00:01:06,730 --> 00:01:08,260
with a copying garbage collector,

23
00:01:08,260 --> 00:01:11,780
this will work hand in hand with something like a mark and sweep collector.

24
00:01:11,780 --> 00:01:12,520
In this case,

25
00:01:12,520 --> 00:01:17,020
after the sweep phase, all the memory that's left is copied from one buffer

26
00:01:17,020 --> 00:01:21,780
to another. And at the same time, once the memory is being copied, we'll

27
00:01:21,780 --> 00:01:25,840
rearrange it so that it's no longer fragmented.

28
00:01:25,840 --> 00:01:28,270
We also have generational garbage collectors.

29
00:01:28,270 --> 00:01:31,720
The idea behind a generational garbage collector is that if

30
00:01:31,720 --> 00:01:33,970
an object survives a garbage collect,

31
00:01:33,970 --> 00:01:38,640
it's likely to be an object that's going to be around for a long time.

32
00:01:38,640 --> 00:01:39,820
In that case,

33
00:01:39,820 --> 00:01:42,500
once an object survives one garbage collect, the garbage

34
00:01:42,500 --> 00:01:44,700
collector may not look at it again for a while,

35
00:01:44,700 --> 00:01:49,120
and this improves the performance of the garbage collector. And finally,

36
00:01:49,120 --> 00:01:51,040
there's incremental garbage collectors.

37
00:01:51,040 --> 00:01:51,510
And in fact,

38
00:01:51,510 --> 00:01:55,540
the generational garbage collector is a form of incremental garbage collection.

39
00:01:55,540 --> 00:01:58,750
So an incremental garbage collector is a garbage collector that doesn't look

40
00:01:58,750 --> 00:02:02,800
at all the memory all the time during the garbage collect.

41
00:02:02,800 --> 00:02:07,820
And as we can see from this, garbage collectors tend not to be just of one type.

42
00:02:07,820 --> 00:02:15,000
So we tend to have a mixture of mark and sweep, copying, generational within a single garbage collector.

