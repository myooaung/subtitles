1
00:00:02,440 --> 00:00:06,310
We also have the idea of generational garbage collectors, and the idea here

2
00:00:06,310 --> 00:00:09,480
is that once an object survives a garbage collection,

3
00:00:09,480 --> 00:00:13,170
that object is promoted to a different generation.

4
00:00:13,170 --> 00:00:15,370
The garbage collector will sweep through the young

5
00:00:15,370 --> 00:00:18,350
generations more often than it sweeps through the older

6
00:00:18,350 --> 00:00:21,090
generations. And depending on the environment,

7
00:00:21,090 --> 00:00:23,640
there could be any number of different generations.

8
00:00:23,640 --> 00:00:24,660
So in Java, for example,

9
00:00:24,660 --> 00:00:28,260
there's two. In .NET, there are three. Again. in different environments, there

10
00:00:28,260 --> 00:00:33,050
might be two or more generations where the garbage collector manages to collect

11
00:00:33,050 --> 00:00:37,520
memory. So with the generational garbage collector, again similar to before, we

12
00:00:37,520 --> 00:00:40,960
have a block of memory into which we're allocating our objects. And again, that

13
00:00:40,960 --> 00:00:43,040
memory has become full.

14
00:00:43,040 --> 00:00:46,320
This is now our first generation or young generation.

15
00:00:46,320 --> 00:00:47,080
In that generation,

16
00:00:47,080 --> 00:00:50,180
we've allocated memory. Notice we also have an old generation where

17
00:00:50,180 --> 00:00:55,450
there may be objects that may be alive, may not be alive. Once the GC

18
00:00:55,450 --> 00:01:00,080
runs, all the objects, in this case 1, 2, 3, and 4, that survive a

19
00:01:00,080 --> 00:01:04,280
garbage collect will be moved to the old generation. We can then clear

20
00:01:04,280 --> 00:01:11,000
the young generation and then carry on allocating objects inside the young generation.

