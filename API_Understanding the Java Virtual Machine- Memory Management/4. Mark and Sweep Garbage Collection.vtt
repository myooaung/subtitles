WEBVTT
1
00:00:02.440 --> 00:00:05.900
Mark and sweep garbage collectors actually typically have three phases,

2
00:00:05.900 --> 00:00:09.100
a mark phrase that identifies the objects that is still in use,

3
00:00:09.100 --> 00:00:12.710
a sweep phase that removes unused objects,

4
00:00:12.710 --> 00:00:16.200
and then a compact phase to compact the memory after

5
00:00:16.200 --> 00:00:18.840
all unused objects have been removed.

6
00:00:18.840 --> 00:00:22.660
Here we have a simple diagram of a block of memory.

7
00:00:22.660 --> 00:00:26.270
On the left, we have a root set of references.

8
00:00:26.270 --> 00:00:28.880
So these are references that we can follow from some root mechanism,

9
00:00:28.880 --> 00:00:33.190
maybe maybe the stack, that point at live memory.

10
00:00:33.190 --> 00:00:35.550
If we follow the references from the root set,

11
00:00:35.550 --> 00:00:40.190
any object that references another object also keeps that object alive.

12
00:00:40.190 --> 00:00:42.210
And in the mark phase,

13
00:00:42.210 --> 00:00:44.580
the garbage collector will start at the root set and

14
00:00:44.580 --> 00:00:48.320
walk through each object in turn, following all of its references,

15
00:00:48.320 --> 00:00:52.140
marking each object that's still alive in memory.

16
00:00:52.140 --> 00:00:54.170
Notice that we can have cycles here,

17
00:00:54.170 --> 00:00:56.960
and those cycles don't affect the garbage collector.

18
00:00:56.960 --> 00:01:01.250
So if one object references another, but there's no root reference to them,

19
00:01:01.250 --> 00:01:03.720
that memory can be collected.

20
00:01:03.720 --> 00:01:09.070
In the sweep phase, the garbage is taken away,

21
00:01:09.070 --> 00:01:11.250
and that leaves all the objects still in memory still

22
00:01:11.250 --> 00:01:15.790
being referenced. And then finally, this memory is compacted.

23
00:01:15.790 --> 00:01:20.000
So at this point, we've changed the physical addresses of the memory,

24
00:01:20.000 --> 00:01:23.450
and this is one important point to make about garbage collectors.

25
00:01:23.450 --> 00:01:28.270
In applications such as Java, we tend not have physical references to objects.

26
00:01:28.270 --> 00:01:30.880
We'll have some reference in our application, which the Java

27
00:01:30.880 --> 00:01:34.780
virtual machine internally will be able to use to get an actual

28
00:01:34.780 --> 00:01:37.590
physical location for that piece of memory.

29
00:01:37.590 --> 00:01:42.140
But it's very hard for us to actually get at that physical location.

30
00:01:42.140 --> 00:01:47.580
With the copying garbage collector, things are slightly different. There's

31
00:01:47.580 --> 00:01:50.610
still typically a mark phase and a sweep phase maybe. So here,

32
00:01:50.610 --> 00:01:53.390
for example, we have, a block of memory.

33
00:01:53.390 --> 00:01:54.520
This is allocated on the left,

34
00:01:54.520 --> 00:01:59.770
and this is where all of our current objects are being allocated. The

35
00:01:59.770 --> 00:02:02.860
way the garbage collector will work typically is when this block of

36
00:02:02.860 --> 00:02:07.320
memory called the fromspace becomes full, the garbage collector runs.

37
00:02:07.320 --> 00:02:12.440
Again, It follows the root set, and from the root set marks all the live objects.

38
00:02:12.440 --> 00:02:17.460
But now what happens during the sweep phase is these objects are moved

39
00:02:17.460 --> 00:02:21.520
into the tospace and so compacted at the same time.

40
00:02:21.520 --> 00:02:22.200
And then finally,

41
00:02:22.200 --> 00:02:26.410
the fromspace is cleared. The tospace and the fromspace are

42
00:02:26.410 --> 00:02:29.720
now swapped. The next piece of memory that gets allocated gets

43
00:02:29.720 --> 00:02:37.000
allocated in this new fromspace. And then finally, when that becomes full, the whole process happens again.

