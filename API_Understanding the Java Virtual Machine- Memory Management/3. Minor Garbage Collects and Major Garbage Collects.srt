1
00:00:04,140 --> 00:00:07,980
So when the garbage collector collects objects in the young generation,

2
00:00:07,980 --> 00:00:10,740
this is called a minor garbage collection.

3
00:00:10,740 --> 00:00:11,990
And what happens is this.

4
00:00:11,990 --> 00:00:15,640
Objects are allocated initially into the Eden space.

5
00:00:15,640 --> 00:00:19,620
When the garbage collector runs, objects are copied into this survivor space,

6
00:00:19,620 --> 00:00:22,940
so it's copied into the empty survivor space.

7
00:00:22,940 --> 00:00:26,200
Objects from the survivor space that was used during the last garbage collect

8
00:00:26,200 --> 00:00:29,640
also get copied back across into this new survivor space,

9
00:00:29,640 --> 00:00:31,250
and the survivor spaces are now swapped.

10
00:00:31,250 --> 00:00:33,340
So the next time a garbage collection runs,

11
00:00:33,340 --> 00:00:36,930
what was the old survivor space is now the new survivor space,

12
00:00:36,930 --> 00:00:39,240
and that will be used to do the copying.

13
00:00:39,240 --> 00:00:43,370
The next allocation will then get allocated into the Eden space.

14
00:00:43,370 --> 00:00:45,940
So it looks something like this.

15
00:00:45,940 --> 00:00:48,400
Here we have some root references to objects that are both

16
00:00:48,400 --> 00:00:51,050
in Eden space and in the survivor space.

17
00:00:51,050 --> 00:00:55,180
The initial survivor space is called the from space.

18
00:00:55,180 --> 00:00:58,740
At this point, somebody has tried to allocate some memory.

19
00:00:58,740 --> 00:01:01,250
We try and allocate that object into the Eden space.

20
00:01:01,250 --> 00:01:06,240
Eden space is full, so we're we'll kick off a minor garbage collection.

21
00:01:06,240 --> 00:01:09,450
What happens now is you walk the heap, we mark the objects,

22
00:01:09,450 --> 00:01:14,340
and then we copy the objects into the new survivor space.

23
00:01:14,340 --> 00:01:16,900
The figures on these objects, 0 and 1 here,

24
00:01:16,900 --> 00:01:20,530
show how many garbage collects these objects have previously survived.

25
00:01:20,530 --> 00:01:23,700
So the object in the survivor space has previously

26
00:01:23,700 --> 00:01:25,750
survived one garbage collection; whereas,

27
00:01:25,750 --> 00:01:30,670
the newly allocated objects in the Eden space survived zero garbage collections.

28
00:01:30,670 --> 00:01:35,180
But we'll see that as we copy them to the to space, this number increases.

29
00:01:35,180 --> 00:01:37,610
We go from 0 to 1 for each of these objects.

30
00:01:37,610 --> 00:01:40,330
And then when we move the object from the survivor

31
00:01:40,330 --> 00:01:44,630
space into this new survivor space, its count gets increased to 2.

32
00:01:44,630 --> 00:01:47,080
And then finally, the Eden space is cleared,

33
00:01:47,080 --> 00:01:49,210
and the survivor spaces are swapped.

34
00:01:49,210 --> 00:01:53,670
And the next allocation happens into the Eden space within our count of 0,

35
00:01:53,670 --> 00:01:57,980
i.e. this thing hasn't yet survived a garbage collection.

36
00:01:57,980 --> 00:02:02,610
So minor collection happens when the young generation is full.

37
00:02:02,610 --> 00:02:07,740
When the old generation is full, then a major garbage collection happens.

38
00:02:07,740 --> 00:02:10,840
Now major garbage collections are going to be slower than minor

39
00:02:10,840 --> 00:02:13,870
garbage collections as a major garbage collection is going to walk

40
00:02:13,870 --> 00:02:15,940
through a large section of the heap.

41
00:02:15,940 --> 00:02:18,500
It's also possible that memory that's been allocated has been

42
00:02:18,500 --> 00:02:21,330
paged so that memory has to be paged back in.

43
00:02:21,330 --> 00:02:23,870
So we'd like these major garbage collections to run less

44
00:02:23,870 --> 00:02:27,640
frequently than the minor garbage collections.

45
00:02:27,640 --> 00:02:30,280
So a major garbage collection is triggered when the old

46
00:02:30,280 --> 00:02:32,510
generation or the tenured space is full.

47
00:02:32,510 --> 00:02:35,070
It will typically, on the Oracle Java VM,

48
00:02:35,070 --> 00:02:39,140
collect both the old and the young generations at the same time.

49
00:02:39,140 --> 00:02:44,020
Well this is really called a full GC. A major GC collects the old

50
00:02:44,020 --> 00:02:48,170
generation, a full GC collects the young and the old generations at the

51
00:02:48,170 --> 00:02:51,420
same time. But the terms tend to be used interchangeably.

52
00:02:51,420 --> 00:02:53,510
So with a major garbage collect,

53
00:02:53,510 --> 00:02:57,940
memory gets copied from the young generation to the old generation.

54
00:02:57,940 --> 00:03:00,940
So this is called promotion. So the JVM will eventually

55
00:03:00,940 --> 00:03:03,980
promote memory into the old generation.

56
00:03:03,980 --> 00:03:09,440
This happens after the memory has survived a certain number of garbage collects.

57
00:03:09,440 --> 00:03:12,380
It also happens if survivor space is full.

58
00:03:12,380 --> 00:03:14,160
If the survivor space is full,

59
00:03:14,160 --> 00:03:16,690
there's nowhere for objects that have survived a garbageâ€‘collect

60
00:03:16,690 --> 00:03:19,800
from the Eden space to go into that survivor space.

61
00:03:19,800 --> 00:03:24,440
So we'll start promoting from the survivor space into the old generation.

62
00:03:24,440 --> 00:03:27,500
There's also a flag you can pass the JVM to say always

63
00:03:27,500 --> 00:03:30,760
tenure, i.e. always create objects inside the old

64
00:03:30,760 --> 00:03:32,780
generation. So it works something like this.

65
00:03:32,780 --> 00:03:37,260
So here we have a similar picture to before. We have a number of objects in

66
00:03:37,260 --> 00:03:40,530
the Eden space that have yet to survive a garbage collect.

67
00:03:40,530 --> 00:03:44,370
We have a large object in the old generation with a collection count of 9. It

68
00:03:44,370 --> 00:03:47,800
survived nine garbage collections. And we have an object in the survivor

69
00:03:47,800 --> 00:03:51,060
space that has survived eight garbage collections.

70
00:03:51,060 --> 00:03:52,800
When we run the GC,

71
00:03:52,800 --> 00:03:56,610
we'll notice that the objects from the Eden space get copied to the to

72
00:03:56,610 --> 00:04:01,160
space, and the object that was in the survivor space has now survived many

73
00:04:01,160 --> 00:04:05,800
garbage collections and so is promoted to be part of the old generation. As

74
00:04:05,800 --> 00:04:09,500
well as objects being moved to the old generation once they've survived a

75
00:04:09,500 --> 00:04:14,630
number of garbage collects, it's also possible to allocate objects directly

76
00:04:14,630 --> 00:04:16,540
into the old space.

77
00:04:16,540 --> 00:04:17,990
Now there's no direct way of doing this.

78
00:04:17,990 --> 00:04:22,340
There's no JVM option to say always allocate objects in the old space.

79
00:04:22,340 --> 00:04:26,060
But what you can do is set this option on the VM called

80
00:04:26,060 --> 00:04:35,000
PretenureSizeThreshold, and then objects larger than n bytes will be allocated into this old space directly.

