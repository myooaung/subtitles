WEBVTT
1
00:00:00.390 --> 00:00:02.740
So what are we actually seeing here?

2
00:00:02.740 --> 00:00:04.580
We're seeing three different areas within the

3
00:00:04.580 --> 00:00:07.580
application, one showing the spaces,

4
00:00:07.580 --> 00:00:10.730
one showing the memory allocation and some other information that's going

5
00:00:10.730 --> 00:00:14.830
on, and then one showing this histogram, showing some of the thresholds to

6
00:00:14.830 --> 00:00:18.140
do with when objects move from space to space.

7
00:00:18.140 --> 00:00:22.340
If we simplify this scenario and take a look, first of all, at the spaces.

8
00:00:22.340 --> 00:00:25.960
So here, we can see the memory allocation as it's happening. And we see

9
00:00:25.960 --> 00:00:30.350
that in the Eden space, the memory is slowly rising, so the amount of

10
00:00:30.350 --> 00:00:32.540
memory allocated there is slowly rising.

11
00:00:32.540 --> 00:00:36.540
And currently, the S0 space, so the S0 survivor space is full.

12
00:00:36.540 --> 00:00:40.060
What we'll see is as the memory Eden space increases and finally

13
00:00:40.060 --> 00:00:44.240
hits its threshold, then the garbage collector will run, the GC

14
00:00:44.240 --> 00:00:48.100
will happen, SE will become empty, S1 will become full, and the

15
00:00:48.100 --> 00:00:53.540
Eden space will go back to 0.

16
00:00:53.540 --> 00:00:56.460
And that happens now. And note this is while at the same time,

17
00:00:56.460 --> 00:01:00.470
we've allocated a lot more objects into the old space. So

18
00:01:00.470 --> 00:01:03.920
the old space is nearing its threshold.

19
00:01:03.920 --> 00:01:06.460
And the next time you run a GC in the young space when the

20
00:01:06.460 --> 00:01:10.120
Eden space is full again, we should see the old space being

21
00:01:10.120 --> 00:01:11.750
garbage‑collected as well.

22
00:01:11.750 --> 00:01:14.840
So what else do we see?

23
00:01:14.840 --> 00:01:18.440
So if we take a look at the histograms,

24
00:01:18.440 --> 00:01:22.580
these are showing us the objects that have survived a garbage

25
00:01:22.580 --> 00:01:25.270
collect and the number of garbage collects they survived. So in this

26
00:01:25.270 --> 00:01:29.070
case, because the garbage collect was self‑modifying, we only have

27
00:01:29.070 --> 00:01:32.050
objects that survive a single garbage collection before they've be

28
00:01:32.050 --> 00:01:34.540
moved off into old space.

29
00:01:34.540 --> 00:01:36.770
And then, finally, the graphs themselves.

30
00:01:36.770 --> 00:01:42.240
So this shows the ongoing graph of memory allocation inside the VM.

31
00:01:42.240 --> 00:01:45.750
And we can see here where the garbage collector has run and reduced

32
00:01:45.750 --> 00:01:49.120
the memory in Eden space almost to 0, memory,

33
00:01:49.120 --> 00:01:53.870
then, being allocated further and further into Eden space,

34
00:01:53.870 --> 00:01:56.140
and eventually Eden space will fill.

35
00:01:56.140 --> 00:01:59.190
And when it does fill, we'll see the garbage collector running again,

36
00:01:59.190 --> 00:02:11.640
reducing its space to zero, and we'll see the survivor space is flipping over.

37
00:02:11.640 --> 00:02:12.730
So there we go.

38
00:02:12.730 --> 00:02:17.040
The garbage collector has run. Survivor spaces are flipped. Notice as

39
00:02:17.040 --> 00:02:20.770
well there's a kink there inside the old generation.

40
00:02:20.770 --> 00:02:23.330
This is where the memory that survived these garbage collects has

41
00:02:23.330 --> 00:02:26.900
been moved out into old generation. So the amount of memory inside

42
00:02:26.900 --> 00:02:31.260
the old generation has also increased.

43
00:02:31.260 --> 00:02:31.690
And eventually,

44
00:02:31.690 --> 00:02:34.950
one of two things will happen to the old generation. When

45
00:02:34.950 --> 00:02:38.800
another garbage collection happens, if we haven't reached the

46
00:02:38.800 --> 00:02:40.370
maximum size of the old generation,

47
00:02:40.370 --> 00:02:42.880
we'll allocate more memory in there, and we move objects into

48
00:02:42.880 --> 00:02:54.000
there. If we have reached the maximum size of the old generation, then the old GC garbage collector will run.

