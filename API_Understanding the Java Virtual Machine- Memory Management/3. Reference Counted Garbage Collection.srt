1
00:00:03,680 --> 00:00:06,840
I wanted to take a brief look at each of these forms of garbage

2
00:00:06,840 --> 00:00:09,610
collection in turn. Here we're showing the idea behind a

3
00:00:09,610 --> 00:00:11,260
reference counting garbage collector.

4
00:00:11,260 --> 00:00:13,160
So we have two objects here.

5
00:00:13,160 --> 00:00:16,750
The object on the left has a reference count of 2, and the object on the

6
00:00:16,750 --> 00:00:21,530
right has a reference count of 1. These objects are referencing each other,

7
00:00:21,530 --> 00:00:24,440
and that raises each other's reference count.

8
00:00:24,440 --> 00:00:27,220
This is called a circular reference, and this is one of the issues

9
00:00:27,220 --> 00:00:29,160
of the reference counting garbage collector.

10
00:00:29,160 --> 00:00:32,240
It's very hard to get rid of circle references.

11
00:00:32,240 --> 00:00:35,410
So, for example, once the reference on the left goes away,

12
00:00:35,410 --> 00:00:37,680
the count of both objects is now 1.

13
00:00:37,680 --> 00:00:37,950
Well,

14
00:00:37,950 --> 00:00:40,310
both these objects are actually garbage as there's

15
00:00:40,310 --> 00:00:46,180
no external reference to them, and this can be a very difficult problem to solve.

16
00:00:46,180 --> 00:00:49,590
The way reference counting works is that a given object once its been

17
00:00:49,590 --> 00:00:53,230
assigned will have its reference count incremented. And when it's being

18
00:00:53,230 --> 00:00:57,110
dereferenced in deassignment, it'll have the reference count decremented.

19
00:00:57,110 --> 00:01:01,540
When this reference count goes to 0, as in the first object here,

20
00:01:01,540 --> 00:01:03,240
the object is then freed.

21
00:01:03,240 --> 00:01:06,130
While the reference count is nonâ€‘0, then the object

22
00:01:06,130 --> 00:01:09,150
doesn't get freed. And also there are issues with this.

23
00:01:09,150 --> 00:01:11,110
People might forget to call AddRef,

24
00:01:11,110 --> 00:01:14,200
for example, i.e. to increment the reference count. They might forget to

25
00:01:14,200 --> 00:01:17,170
deref the object and decrement the reference count.

26
00:01:17,170 --> 00:01:18,920
So we can up with memory leaks.

27
00:01:18,920 --> 00:01:22,870
We can also end up with scenarios where somebody decrements the

28
00:01:22,870 --> 00:01:29,000
reference count, but the object is still in use. It's not the ideal situation.

