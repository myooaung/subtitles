WEBVTT
1
00:00:01.540 --> 00:00:05.940
So to illustrate what we saw on the previous slides,

2
00:00:05.940 --> 00:00:07.760
let's write some similar code.

3
00:00:07.760 --> 00:00:13.900
So we can say class Person, and then in our main method here,

4
00:00:13.900 --> 00:00:17.700
we can say Person person = new Person.

5
00:00:17.700 --> 00:00:23.180
And we know this is a strong reference to our person.

6
00:00:23.180 --> 00:00:24.300
And we can do a weak reference.

7
00:00:24.300 --> 00:00:27.070
We can do a WeakReference of type Person,

8
00:00:27.070 --> 00:00:31.690
and the reason for the genetic type here is that when I call WeakReference.get,

9
00:00:31.690 --> 00:00:34.710
it'll then return me something of type Person rather than something

10
00:00:34.710 --> 00:00:38.070
of type Object that I need to cast to be a person.

11
00:00:38.070 --> 00:00:45.870
So I can say wr =new WeakReference of Person and pass this my person object.

12
00:00:45.870 --> 00:00:55.040
Once I have that, I can do Person p1 = wr.get,

13
00:00:55.040 --> 00:00:57.860
and that will return me a reference to the person class.

14
00:00:57.860 --> 00:01:00.590
In this case, we have a strong reference to the person object.

15
00:01:00.590 --> 00:01:03.430
The WeakReference simply wraps up that strong reference.

16
00:01:03.430 --> 00:01:06.290
And by calling wr.get, we can return that reference.

17
00:01:06.290 --> 00:01:08.720
And if you print out person here,

18
00:01:08.720 --> 00:01:12.020
so I just do System.println p1, then we'll print the hash code

19
00:01:12.020 --> 00:01:16.890
of that person object. And if we run this,

20
00:01:16.890 --> 00:01:18.740
then indeed that's what we get.

21
00:01:18.740 --> 00:01:19.690
Okay, so let's try this.

22
00:01:19.690 --> 00:01:21.660
Let's get rid of all our references. And we'll say

23
00:01:21.660 --> 00:01:26.200
person = null and then p1 = null.

24
00:01:26.200 --> 00:01:30.230
And then I'm going to copy these two lines and then do

25
00:01:30.230 --> 00:01:36.500
Person p2 = wr.get and then print out p2.

26
00:01:36.500 --> 00:01:39.690
Now at this point, the garbage collector won't have run.

27
00:01:39.690 --> 00:01:41.090
There's not enough memory pressure.

28
00:01:41.090 --> 00:01:44.710
We haven't called System.gc. So the person object,

29
00:01:44.710 --> 00:01:46.790
even though we set the references to this object to null,

30
00:01:46.790 --> 00:01:49.440
it won't have been garbageâ€‘collected.

31
00:01:49.440 --> 00:01:54.060
So at this point, as well as printing out the p1 reference,

32
00:01:54.060 --> 00:01:56.070
we should also print out the p2 reference,

33
00:01:56.070 --> 00:01:59.260
and they should be the same. We're still referencing the same object.

34
00:01:59.260 --> 00:02:02.350
So we're setting the references to null, and then retrieving

35
00:02:02.350 --> 00:02:06.020
those references through the weak reference should retrieve us

36
00:02:06.020 --> 00:02:08.340
back that strong reference to the object.

37
00:02:08.340 --> 00:02:08.740
So again,

38
00:02:08.740 --> 00:02:15.810
if I rerun this code, and sure enough, we get the

39
00:02:15.810 --> 00:02:20.280
reference again. We print out the reference.

40
00:02:20.280 --> 00:02:21.240
So how about this?

41
00:02:21.240 --> 00:02:29.230
We set p2 to null, and we then call System.gc to run the garbage collector.

42
00:02:29.230 --> 00:02:32.480
So now person's not referencing the object, p1 isn't referencing

43
00:02:32.480 --> 00:02:34.820
the object, p2 isn't referencing the object.

44
00:02:34.820 --> 00:02:37.340
So the object has no strong references.

45
00:02:37.340 --> 00:02:40.690
We still have the WeakReference that wraps up the object. So again, let's

46
00:02:40.690 --> 00:02:47.700
go copy this code and paste it here and call this p3.

47
00:02:47.700 --> 00:02:50.640
So at this point, the garbage collector has run.

48
00:02:50.640 --> 00:02:52.350
So now when we run the code,

49
00:02:52.350 --> 00:03:02.200
the last thing printed out here should be null. And there we go.

50
00:03:02.200 --> 00:03:04.700
So we see that at this point here,

51
00:03:04.700 --> 00:03:08.490
we still have a reference to the object, and this will print that out.

52
00:03:08.490 --> 00:03:10.140
At this point here,

53
00:03:10.140 --> 00:03:11.870
we still have a reference to the object. The garbage collector

54
00:03:11.870 --> 00:03:14.670
hasn't run, and this will recover and use the object.

55
00:03:14.670 --> 00:03:17.800
But at this point here where we've run the garbage collector,

56
00:03:17.800 --> 00:03:24.000
if I now try and recover the reference to that object, the reference has gone away.

