WEBVTT
1
00:00:02.500 --> 00:00:08.080
So Java provides an MXBean for the garbage collector, and this bean lets us

2
00:00:08.080 --> 00:00:11.410
get the names of the garbage collectors that are currently active, the numbers

3
00:00:11.410 --> 00:00:13.660
of collections that those collectors have made,

4
00:00:13.660 --> 00:00:16.830
the times of collections, and also some information about

5
00:00:16.830 --> 00:00:19.840
the memory pools those collectors manage.

6
00:00:19.840 --> 00:00:22.600
Java supports various management mechanisms known as

7
00:00:22.600 --> 00:00:25.060
the management beans. And indeed,

8
00:00:25.060 --> 00:00:28.580
there's a garbage collection management bean that we can use to monitor garbage

9
00:00:28.580 --> 00:00:31.690
collection. It doesn't give us a huge amount of information,

10
00:00:31.690 --> 00:00:34.790
but it can be useful inside an application.

11
00:00:34.790 --> 00:00:40.450
To use this, we need to grab references to the memory management MXBeans that

12
00:00:40.450 --> 00:00:44.600
are available within the VM, and this one per memory manager.

13
00:00:44.600 --> 00:00:46.920
So typically, we have two memory managers, one for old,

14
00:00:46.920 --> 00:00:51.590
one from new, and we get one bean for each of those memory managers.

15
00:00:51.590 --> 00:00:55.040
The way we get references to those beans is something like this.

16
00:00:55.040 --> 00:00:59.620
We call ManagementFactory.getGarbageCollectorMXBeans,

17
00:00:59.620 --> 00:01:01.910
and this gives us back a list of beans.

18
00:01:01.910 --> 00:01:04.390
And then from this list,

19
00:01:04.390 --> 00:01:07.840
we can iterate over the list. So we can say something like for

20
00:01:07.840 --> 00:01:14.380
GarbageCollectorMXBean bean in list and then iterate for each bean inside this

21
00:01:14.380 --> 00:01:18.540
list. And then we can print out some information for each bean.

22
00:01:18.540 --> 00:01:22.940
So, for example, each bean has a name, so we can print that name.

23
00:01:22.940 --> 00:01:25.500
We can also print information about the number of

24
00:01:25.500 --> 00:01:27.090
collections this bean has done.

25
00:01:27.090 --> 00:01:30.720
So there's a CollectionCount and a CollectionTime, so we can print that

26
00:01:30.720 --> 00:01:34.980
information out. And then each bean is responsible for a number of

27
00:01:34.980 --> 00:01:37.560
memory management pools. So this will be things like the young

28
00:01:37.560 --> 00:01:40.640
generation pool and the old generation pool.

29
00:01:40.640 --> 00:01:44.840
We can get information about each of those pools from the bean itself.

30
00:01:44.840 --> 00:01:50.340
So we can print out the pool names, for String name in

31
00:01:50.340 --> 00:01:54.740
bean.getMemoryPoolNames. And then inside here,

32
00:01:54.740 --> 00:01:57.820
we can simply print out the name of the pool. And at the

33
00:01:57.820 --> 00:02:00.340
end, we'll just print a new line to allow us to format the

34
00:02:00.340 --> 00:02:02.740
screen slightly more cleanly.

35
00:02:02.740 --> 00:02:04.930
Now if we run this, we're not going to see any collections.

36
00:02:04.930 --> 00:02:06.850
We're not going see any collection time.

37
00:02:06.850 --> 00:02:09.710
This is just to give you an idea of how these beans work and

38
00:02:09.710 --> 00:02:12.090
how you can use them within the application.

39
00:02:12.090 --> 00:02:14.340
So here we're running with the default garbage collector

40
00:02:14.340 --> 00:02:16.540
and not pass any the flags to this.

41
00:02:16.540 --> 00:02:16.950
So we see,

42
00:02:16.950 --> 00:02:20.280
we have two beans, one with the name of Copy, one with the name of

43
00:02:20.280 --> 00:02:24.840
MarkSweepCompact. The first bean has information about the young

44
00:02:24.840 --> 00:02:28.490
generation collector, and the second bean has information about the

45
00:02:28.490 --> 00:02:30.140
old generation collector.

46
00:02:30.140 --> 00:02:32.620
And we can see the young generation has the Eden space and survivor

47
00:02:32.620 --> 00:02:36.200
space, and the old generation has the Eden space, survivor space, and

48
00:02:36.200 --> 00:02:40.610
also the tenure generation, so the old generation.

49
00:02:40.610 --> 00:02:44.240
So what about running this with a different garbage collector?

50
00:02:44.240 --> 00:02:48.810
So here, I provided the current mark sweep garbage collector as an option.

51
00:02:48.810 --> 00:02:52.240
And if we run this code, we'll find we end up with different garbage

52
00:02:52.240 --> 00:02:55.200
collectors for the application. We're running with a parallel

53
00:02:55.200 --> 00:02:58.920
collector for the young space here, and then we have the concurrent

54
00:02:58.920 --> 00:03:01.150
mark sweep collector for the old space.

55
00:03:01.150 --> 00:03:05.730
And you can try this application, passing in different parameters for the

56
00:03:05.730 --> 00:03:12.000
garbage collectors and see how those parameters affect the garbage collector that gets used for your application.

