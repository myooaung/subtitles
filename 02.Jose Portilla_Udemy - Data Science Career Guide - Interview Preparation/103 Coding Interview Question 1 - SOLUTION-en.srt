1
00:00:05,640 --> 00:00:06,290
Welcome everyone.

2
00:00:06,300 --> 00:00:11,990
The solution for the first coding interview question so as a reminder you're going to be given an array

3
00:00:11,990 --> 00:00:16,340
of integers that could be both positive and negative and you need to write a program that can find a

4
00:00:16,340 --> 00:00:17,880
large continuous sum.

5
00:00:18,050 --> 00:00:22,600
And then we show you some examples of what large continuous sum and.

6
00:00:22,670 --> 00:00:24,280
So how do we actually do this.

7
00:00:24,320 --> 00:00:31,550
Well the algorithm is we start summing up the numbers and store them in occurrence some variable and

8
00:00:31,610 --> 00:00:37,790
after adding each element what we do is we check whether the current sum is larger than the maximum

9
00:00:37,790 --> 00:00:39,560
sum encountered so far.

10
00:00:40,750 --> 00:00:46,930
If it is we're going to update the maximum sum so have the maximum sum variable and as long as the current

11
00:00:46,930 --> 00:00:51,890
sum is positive we keep adding the numbers when the current sum becomes negative.

12
00:00:51,910 --> 00:00:58,750
We start with a new current sum because a negative current sum will only decrease the sum of a future

13
00:00:58,750 --> 00:01:04,870
sequence and note that we don't reset the current sum to zero because the array can contain all negative

14
00:01:04,870 --> 00:01:05,710
integers.

15
00:01:05,890 --> 00:01:10,690
Then the result would end that just being the largest negative number OK.

16
00:01:10,950 --> 00:01:14,720
Let's go ahead and code this out in Python and kind of build this out step by step.

17
00:01:14,730 --> 00:01:18,150
I think it makes a little more sense in code than just written out in words.

18
00:01:18,150 --> 00:01:20,760
So let's hop to a Jupiter note book.

19
00:01:20,760 --> 00:01:28,030
Or you can use any editor you want and let's go the Python to begin with by creating a function here.

20
00:01:28,080 --> 00:01:34,560
Call it large continuous sum for large continuous sum and it takes in some array.

21
00:01:34,660 --> 00:01:37,790
A R R can be a list or anything.

22
00:01:37,840 --> 00:01:41,650
So the first thing you do is check for a little edge case and often your interviewer is going to ask

23
00:01:41,650 --> 00:01:45,520
you to check for edge cases even after you come up with a reasonable solution.

24
00:01:45,580 --> 00:01:48,640
So one edge case is the C is the array length is zero.

25
00:01:48,670 --> 00:01:50,720
So if it is we're pretty much over.

26
00:01:50,950 --> 00:01:55,680
So I'll say if the length of the array is equal to zero.

27
00:01:55,690 --> 00:01:57,760
Go ahead and return 0.

28
00:01:58,260 --> 00:02:01,050
Ok if that's not the case then we actually have to get to work here.

29
00:02:01,300 --> 00:02:02,830
So what we're going to do here.

30
00:02:03,860 --> 00:02:12,730
Is We're going to set the maximum sum so far equal to the first item in the array.

31
00:02:12,730 --> 00:02:14,170
The first number in the array.

32
00:02:14,470 --> 00:02:19,680
We're also going to set the current sum equal to the first item in the array.

33
00:02:21,130 --> 00:02:22,440
And then we're going to do the following.

34
00:02:22,430 --> 00:02:29,810
We'll say for every number in that array and we're actually going to skip the very first number so indexing

35
00:02:29,810 --> 00:02:31,460
starts at zero in Python.

36
00:02:31,490 --> 00:02:37,850
So I'll saying skipping that first number going all the way to the end so starting at index 1 colon

37
00:02:37,850 --> 00:02:39,220
that means all the way to the end.

38
00:02:39,410 --> 00:02:44,240
So for pretty much every other element in the array we're going to do is we'll do the following.

39
00:02:44,240 --> 00:02:58,750
We're going to set the current some equal to the max of the current Some plus the number we're on versus

40
00:02:58,750 --> 00:03:00,120
the number.

41
00:03:00,270 --> 00:03:02,220
So what's actually happening here is the following.

42
00:03:02,230 --> 00:03:08,050
We're basically saying the current sum and this Max function what it does is you passen two arguments

43
00:03:08,050 --> 00:03:08,610
here.

44
00:03:08,710 --> 00:03:15,130
Current some plus the number or just the number itself and it's going to return back what the max value

45
00:03:15,130 --> 00:03:16,410
of these is.

46
00:03:16,420 --> 00:03:21,730
So basically set the current sum to the higher these two values.

47
00:03:21,760 --> 00:03:28,400
So once we know that we're going to end up doing is then we're going to say that the maximum is equal

48
00:03:28,400 --> 00:03:34,710
to the max of the current sum versus the maximum.

49
00:03:34,780 --> 00:03:39,700
So we set the max as the higher between the current sum and the current max.

50
00:03:39,700 --> 00:03:44,920
So again just to explain here or doing is we start summing up the numbers and store them in the current

51
00:03:44,920 --> 00:03:45,700
Some variables.

52
00:03:45,700 --> 00:03:46,630
That's what we're doing here.

53
00:03:46,630 --> 00:03:50,180
So you start off right at the gate with that current some variable.

54
00:03:50,320 --> 00:03:54,430
And then after adding each element which is or doing here plus numb.

55
00:03:54,520 --> 00:03:58,840
So we're kind of continuously going along this current some after adding each of these elements we're

56
00:03:58,840 --> 00:04:04,450
going to check the current sum if it's larger than the maximum sum encountered so far after we do that

57
00:04:04,480 --> 00:04:06,960
which is what we did right here.

58
00:04:06,990 --> 00:04:12,690
If it is so if current Some happens to be larger than we're going to update Max some if Max maxim is

59
00:04:12,690 --> 00:04:17,340
still larger we'll go ahead and keep it the max function is going to automatically for us.

60
00:04:17,550 --> 00:04:21,930
And as long as the current sum is positive we're going to essentially just keep adding on numbers when

61
00:04:21,930 --> 00:04:27,630
the current sum becomes negative which is what may happen if you have negative numbers there in the

62
00:04:27,750 --> 00:04:29,300
starting of a new current sum.

63
00:04:29,370 --> 00:04:34,530
And because a negative current sum will only decrease the sum of a future sequence and note that we

64
00:04:34,530 --> 00:04:39,230
don't need to reset the current sum to zero because the array can contain all negative integers.

65
00:04:39,300 --> 00:04:43,980
If that ends up happening you basically find the largest negative number and what I mean by a large

66
00:04:43,980 --> 00:04:46,560
negative number is the one that's closest to zero.

67
00:04:46,560 --> 00:04:47,640
And that's basically how it works.

68
00:04:47,640 --> 00:04:50,280
Let's go ahead and run that and check this out.

69
00:04:50,280 --> 00:04:58,400
We'll see large continuous passen an array was passen 1 2 3 and see what it returns looks.

70
00:04:58,410 --> 00:05:02,460
Let's go in and say actually we forgot to return the maximum here.

71
00:05:02,460 --> 00:05:11,320
So at the very bottom of this let's go ahead and say print the max sum the run that looks like Maxim

72
00:05:11,320 --> 00:05:11,930
is 6.

73
00:05:11,940 --> 00:05:12,700
That makes sense.

74
00:05:12,720 --> 00:05:16,400
Let's go ahead and put in a really big negative number here.

75
00:05:16,770 --> 00:05:20,280
And I notice it's only five because now it's only adding two and three.

76
00:05:20,310 --> 00:05:24,300
Let's put in another negative number here and now it's only three.

77
00:05:24,390 --> 00:05:26,710
And let's start off with a really large number.

78
00:05:26,720 --> 00:05:29,380
One hundred and photostats 100.

79
00:05:29,610 --> 00:05:35,100
If we put in another larger number here we should get 110 because it's worth getting that negative 10

80
00:05:35,430 --> 00:05:36,690
to grab that 20.

81
00:05:36,690 --> 00:05:41,730
So really basic algorithm but you have to kind of think about it and what's really saving us here is

82
00:05:41,730 --> 00:05:48,090
this idea of comparing that current some kind of going along and adding it and then grabbing that maxim.

83
00:05:48,180 --> 00:05:52,860
If this is confusing for you what I would actually recommend is adding print statements here so you

84
00:05:52,860 --> 00:05:53,830
can print out the following.

85
00:05:53,830 --> 00:06:00,180
Can print out current Some as you go along and you can print out the number as you go along and maybe

86
00:06:00,180 --> 00:06:05,280
some other keywords so you can kind of get an idea what's being printed out but basically kind of allows

87
00:06:05,280 --> 00:06:07,860
you to go along and see how the algorithm is working.

88
00:06:07,860 --> 00:06:12,690
So if these two lines confuse you because basically just the two line algorithm here definitely use

89
00:06:12,690 --> 00:06:14,810
print statements to help you out there.

90
00:06:14,820 --> 00:06:15,350
OK.

91
00:06:15,630 --> 00:06:17,550
Thanks everyone and I'll see you at the next lecture.

