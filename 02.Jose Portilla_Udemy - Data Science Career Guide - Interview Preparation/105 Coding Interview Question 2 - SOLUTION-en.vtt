WEBVTT
1

00:00:05.280 --> 00:00:09.180

Welcome everyone to the solution for the second interview question the coding section of the Course



2

00:00:09.660 --> 00:00:11.330

as a reminder you have a string.



3

00:00:11.340 --> 00:00:17.460

This sort of format where a bunch of letters series in a sequence and you compress it to be letter than



4

00:00:17.460 --> 00:00:19.730

the number of how many times that occurred.



5

00:00:19.920 --> 00:00:23.570

And it should also be case sensitive which actually makes your task easier.



6

00:00:23.640 --> 00:00:29.550

And then for instance if you have something like a baby it's OK to return a longer string so you're



7

00:00:29.550 --> 00:00:31.530

not really doing true compression here.



8

00:00:32.170 --> 00:00:34.190

So a strategy is actually going to be pretty simple.



9

00:00:34.190 --> 00:00:38.270

We're going to go along the string and keep a running count of the current letter series.



10

00:00:38.450 --> 00:00:43.790

Once we detect a change in letter what we can do is we can compress that series with its count.



11

00:00:43.790 --> 00:00:46.470

Let's go ahead and explain this further by coding this out.



12

00:00:46.820 --> 00:00:50.790

OK so here you are let's start off by creating our compress function.



13

00:00:51.020 --> 00:00:56.390

It's going to take in a string s and then we're going to make a run along the string.



14

00:00:56.420 --> 00:00:59.780

So I will create a variable called Run and it's going to be an empty string.



15

00:00:59.780 --> 00:01:03.680

Eventually we're going to keep adding to this and it's going to be the compressed version we return.



16

00:01:03.980 --> 00:01:07.580

And then I create another variable called length which is just going to be the length of the string



17

00:01:07.580 --> 00:01:08.200

itself.



18

00:01:11.130 --> 00:01:12.660

Lips lower case us.



19

00:01:12.700 --> 00:01:13.450

OK.



20

00:01:13.470 --> 00:01:15.230

We're going to do two edge cases first.



21

00:01:15.240 --> 00:01:17.890

The first edge case is if the length is zero.



22

00:01:17.970 --> 00:01:22.060

So we'll say if the length of the string is 0.



23

00:01:22.290 --> 00:01:25.710

Well then I know I'm just going to return an empty string because there's nothing really to compress



24

00:01:25.710 --> 00:01:26.680

there.



25

00:01:26.700 --> 00:01:33.090

And similarly if the length is equal to one then I know it's essentially just a single string.



26

00:01:33.090 --> 00:01:35.160

This will just be something like a.



27

00:01:35.410 --> 00:01:40.320

And what I would need to return off of that is the string itself concatenated with just one and that



28

00:01:40.320 --> 00:01:41.160

can be for any letter.



29

00:01:41.160 --> 00:01:48.210

So the length is one on going to return because the string itself plus concatenated with a string of



30

00:01:48.210 --> 00:01:49.620

one there.



31

00:01:49.950 --> 00:01:52.030

All right so those are the two edge cases.



32

00:01:52.050 --> 00:01:54.080

If the length is zero or length has one.



33

00:01:54.270 --> 00:01:56.870

OK so the next step is to actually initialize some variables.



34

00:01:56.880 --> 00:02:02.220

I'm going to have a count variable is going to mean my count C.A. in our count is going to start off



35

00:02:02.250 --> 00:02:07.200

as one because we know if we reach this point we have at least one instance of that first series of



36

00:02:07.200 --> 00:02:10.300

letters and then I'm also going to create a variable called I.



37

00:02:10.340 --> 00:02:16.360

And that's going to just be my index Holder basically counting the index of the string as I go along.



38

00:02:16.370 --> 00:02:22.140

I'm going to say well I is less than the length of the string I'm going to do my logic.



39

00:02:22.160 --> 00:02:25.510

So let's actually do some of this logic is pretty straightforward.



40

00:02:25.830 --> 00:02:33.630

Fools say if s of-I is equal to s of minus one.



41

00:02:33.690 --> 00:02:34.650

So what does that actually mean.



42

00:02:34.650 --> 00:02:40.350

Well it means if the letter at the current index position is equal to the letter before it and the reason



43

00:02:40.350 --> 00:02:43.820

we start at 1 is because indexing in Python starts at zero.



44

00:02:43.830 --> 00:02:50.820

So the very first round of this is basically asking hey is the letter index 1 equal to the letter.



45

00:02:50.820 --> 00:02:51.890

Index 0.



46

00:02:51.900 --> 00:02:55.920

So it's doing that comparison and it's going to be doing that for our eyes as far as the length of the



47

00:02:55.920 --> 00:02:57.190

string which is nice.



48

00:02:57.420 --> 00:02:59.740

So if we know that's true that we have a match right.



49

00:02:59.760 --> 00:03:05.580

So we're going to say that the count is going to get plus 1 and we start to count at 1 because we know



50

00:03:05.580 --> 00:03:10.370

minimum we have at least one given that we've already gone past these if statements here.



51

00:03:10.410 --> 00:03:13.280

So if we have a or match we go ahead and add that to counts.



52

00:03:13.410 --> 00:03:15.990

Else it means there's no more letter matching.



53

00:03:15.990 --> 00:03:20.110

So we've finally reached a new sequence of letters or maybe the end of the string.



54

00:03:20.220 --> 00:03:21.560

So then we're going to store the results.



55

00:03:21.570 --> 00:03:30.420

So we'll say the following will say run is equal to the current run variable plus s of minus one.



56

00:03:30.430 --> 00:03:34.900

And the reason we choose that's a minus one is because by the time we get to this one survivor is going



57

00:03:34.900 --> 00:03:37.940

to be a different letter or maybe the end of the string.



58

00:03:38.020 --> 00:03:44.650

So we're going to say else run as if my mind is one here and then we'll just add on the current count



59

00:03:44.680 --> 00:03:46.900

which is going to be the string count.



60

00:03:46.890 --> 00:03:48.790

So we want to cast it as a string.



61

00:03:48.820 --> 00:03:52.490

Otherwise we'll get an error here because it thinks you're trying to add a number to a string.



62

00:03:52.510 --> 00:03:54.380

So pretty straightforward logic actually.



63

00:03:54.430 --> 00:03:59.590

And then once we've done that we go ahead and reset the count to be equal to 1 again.



64

00:03:59.620 --> 00:04:04.860

So then you can continue doing this and then outside of this we're going to do is add to the index count



65

00:04:04.860 --> 00:04:06.300

to terminate that while loop.



66

00:04:06.300 --> 00:04:13.430

So once we completed this we can go ahead and say something like I add 1 to it and then that should



67

00:04:13.430 --> 00:04:16.430

terminate the while loop.



68

00:04:16.670 --> 00:04:21.870

And then finally we're going to put everything together back and run basically the final run addition



69

00:04:22.010 --> 00:04:27.430

of this so we can just copy and paste this actually because when you do this one last time outside it's



70

00:04:27.440 --> 00:04:33.940

while loop and then we're just going to return our run so pretty simple logic here it's a little tricky



71

00:04:33.940 --> 00:04:38.290

to get it all working together but hopefully I understand the logic of just going along a string and



72

00:04:38.290 --> 00:04:39.820

checking to see where the matches are.



73

00:04:39.820 --> 00:04:44.560

Once you have no more matches you go ahead and just kind of concatenate that compressed version together.



74

00:04:44.560 --> 00:04:50.740

So let's check this out and see if it works we'll say compress and we'll say two ways and three B's



75

00:04:51.310 --> 00:04:52.960

and then we get to be three.



76

00:04:52.960 --> 00:04:53.550

Looking good.



77

00:04:53.590 --> 00:04:59.740

Let's make sure it works for lower case as well as upper case so if we run that looks like tonight for



78

00:05:00.100 --> 00:05:02.820

which makes our lives even easier because we don't really have to care about that.



79

00:05:02.890 --> 00:05:07.840

Although if you were to treat these the same you could've just done a method like the upper or lower



80

00:05:07.840 --> 00:05:08.440

for them.



81

00:05:09.240 --> 00:05:09.620

All right.



82

00:05:09.720 --> 00:05:10.640

That's it for this.



83

00:05:10.650 --> 00:05:15.030

Go ahead and check out the guidebook case you want the link to the code itself.



84

00:05:15.030 --> 00:05:16.840

Thanks and I'll see you at the next lecture.



