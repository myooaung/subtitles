1
00:00:05,450 --> 00:00:09,770
Welcome everyone to the solution for question number four in the coding interview section.

2
00:00:09,770 --> 00:00:12,740
So for this question you have to consider an array of non-negative integers.

3
00:00:12,740 --> 00:00:14,110
That's kind of important here.

4
00:00:14,210 --> 00:00:19,580
And the second is shuffled and you have to figure out which number is missing from the shuffle the array.

5
00:00:19,580 --> 00:00:21,140
So one two three four five.

6
00:00:21,230 --> 00:00:24,980
In this case we didn't really shuffle it to make it more obvious but here we have two is missing from

7
00:00:24,980 --> 00:00:26,150
the second array.

8
00:00:26,240 --> 00:00:28,370
So you can solve this problem multiple ways.

9
00:00:28,370 --> 00:00:32,120
And there's many possible solutions so I'm sure you two straightforward approaches.

10
00:00:32,120 --> 00:00:36,450
These are not the only two approaches but these are the two most straightforward ones since we know

11
00:00:36,450 --> 00:00:37,810
that all numbers are non-negative.

12
00:00:37,820 --> 00:00:40,610
Well we can do is we can simply sum up both of the arrays.

13
00:00:40,720 --> 00:00:43,460
Check the difference and then you have your missing element right there.

14
00:00:44,300 --> 00:00:48,860
Another approach is to sort both of the arrays and then just go through them sequentially until you

15
00:00:48,890 --> 00:00:50,090
don't have a match.

16
00:00:50,090 --> 00:00:55,810
So let's go ahead and show you how to code up the solutions finder and it takes in two arrays.

17
00:00:55,850 --> 00:00:59,660
The second one has been shuffled and it's missing an element.

18
00:00:59,660 --> 00:01:05,860
So we can do is sort D-Rays and technically speaking you don't actually need to sort the first one Bullecourt

19
00:01:05,970 --> 00:01:06,530
sort.

20
00:01:06,620 --> 00:01:11,000
And there's lots of different sort functions we'll just call the default ones and then once we sort

21
00:01:11,000 --> 00:01:16,070
the two arrays what we'll do is we'll check and compare the elements in the sorted arrays.

22
00:01:16,100 --> 00:01:20,070
Lots of ways to do this but one way is to zip them together.

23
00:01:20,080 --> 00:01:22,030
So let me show you an example here.

24
00:01:23,320 --> 00:01:26,350
Going to insert a cell below real quick.

25
00:01:26,350 --> 00:01:38,550
So if I were to say I have array one will say a 1 is 1 2 3 and B 1 is 10 20 30.

26
00:01:38,600 --> 00:01:43,640
In python we can use zip here with a 1 and b one.

27
00:01:43,930 --> 00:01:49,970
And if we pass that as a list then you can see we have now a list of tuples basically pairing them up

28
00:01:50,060 --> 00:01:51,710
based off their index position.

29
00:01:51,710 --> 00:01:53,410
So that's what we're going to do here.

30
00:01:53,480 --> 00:02:06,530
We're going to save for number one comma number two in zip and we'll say array 1 3 2 if number one is

31
00:02:06,530 --> 00:02:14,720
not equal to number 2 then we're just going to return number two because that's where or excuse me number

32
00:02:14,720 --> 00:02:18,330
one because that's the missing element in number 2.

33
00:02:18,380 --> 00:02:21,860
And then if that's not the case we never actually hit that then we're going to return the very last

34
00:02:21,860 --> 00:02:23,420
element from away.

35
00:02:23,490 --> 00:02:27,370
A great one will return one index that negative one.

36
00:02:27,380 --> 00:02:28,680
OK so let's go ahead and estus.

37
00:02:28,760 --> 00:02:35,030
We'll say finder one two one two three four five and then let's go ahead and take up the four.

38
00:02:35,260 --> 00:02:40,200
So I'll say 1 3 to 5 and we run this.

39
00:02:40,240 --> 00:02:41,620
We get back four.

40
00:02:41,680 --> 00:02:42,870
So that's one way to do it.

41
00:02:42,880 --> 00:02:48,340
Another way to do it would actually take the sum and then subtract them so we can say the finder array

42
00:02:48,340 --> 00:02:53,130
1 or 2 and then we're going to do here.

43
00:02:53,130 --> 00:02:55,880
Let me scroll down real quick is do the following.

44
00:02:55,880 --> 00:03:03,800
We can say some of array one minus some overate 2.

45
00:03:03,830 --> 00:03:06,000
And then we can actually just return that result.

46
00:03:07,240 --> 00:03:09,180
We'll say return this.

47
00:03:09,330 --> 00:03:10,940
And now we run the same thing again.

48
00:03:10,950 --> 00:03:13,070
In fact we can just run it again up here.

49
00:03:13,290 --> 00:03:16,980
So if I run that top Salin it's like is back for again.

50
00:03:16,980 --> 00:03:21,270
So both of these totally valid methods of solving this problem.

51
00:03:21,300 --> 00:03:21,730
OK.

52
00:03:21,750 --> 00:03:22,910
Hope those useful to you.

53
00:03:22,950 --> 00:03:23,890
I'll see you at the next lecture.

