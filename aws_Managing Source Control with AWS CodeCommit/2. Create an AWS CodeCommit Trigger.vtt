WEBVTT
1
00:00:02.080 --> 00:00:06.300
Now that we know how to set up notifications, let's jump onto

2
00:00:06.300 --> 00:00:11.430
another demo and learn how to set up triggers.

3
00:00:11.430 --> 00:00:12.100
In this demo,

4
00:00:12.100 --> 00:00:16.900
we are going to write a simple Lambda function that is going to log the

5
00:00:16.900 --> 00:00:22.850
URL of the repository and the master branch commit ID when they user

6
00:00:22.850 --> 00:00:26.620
merges his changes to the master branch.

7
00:00:26.620 --> 00:00:32.440
The Lambda function needs to have the right IAM privileges set up

8
00:00:32.440 --> 00:00:37.040
before it can stream the logs to CloudWatch.

9
00:00:37.040 --> 00:00:41.800
This is just one example of what can be done with the triggers.

10
00:00:41.800 --> 00:00:46.430
Your Lambda function can be modified to trigger any other AWS

11
00:00:46.430 --> 00:00:50.410
service that your project may dictate.

12
00:00:50.410 --> 00:00:56.250
I just logged into AWS CodeCommit. Under list of

13
00:00:56.250 --> 00:01:03.700
repositories, click Globomantics, click Settings, choose

14
00:01:03.700 --> 00:01:09.710
Triggers, and click on Create trigger.

15
00:01:09.710 --> 00:01:12.040
Let's give our trigger a name.

16
00:01:12.040 --> 00:01:16.630
I'm going to name it Globomantics Trigger.

17
00:01:16.630 --> 00:01:18.740
Under Events,

18
00:01:18.740 --> 00:01:24.963
you can choose any specific event for which you want trigger this, or you

19
00:01:24.963 --> 00:01:30.150
can choose all of the repository events. You can specify the branch name

20
00:01:30.150 --> 00:01:34.440
for which this action needs to be triggered.

21
00:01:34.440 --> 00:01:40.340
Under Service details, we're going to choose AWS Lambda.

22
00:01:40.340 --> 00:01:46.640
I already have a Lambda function named TestFunction, which is developed.

23
00:01:46.640 --> 00:01:55.340
I'm going to select this. Click Create trigger to finalize trigger creation.

24
00:01:55.340 --> 00:02:02.140
Let's go back to the Lambda console and see how this test function is set up.

25
00:02:02.140 --> 00:02:05.410
The dashboard shows the metrics of all of your Lambda

26
00:02:05.410 --> 00:02:09.440
functions in that specific region.

27
00:02:09.440 --> 00:02:14.720
Click Functions, choose TestFunction.

28
00:02:14.720 --> 00:02:22.540
You can see our TestFunction is connected to CodeCommit. Click on TestFunction.

29
00:02:22.540 --> 00:02:27.870
On the function code, you can see that we selected Node.js as our runtime

30
00:02:27.870 --> 00:02:34.350
environment, and the JavaScript code that prints the clone URL and the commit

31
00:02:34.350 --> 00:02:40.255
array. We will come back and revisit the code in the next video clip when we

32
00:02:40.255 --> 00:02:44.730
are talking about the CodeCommit API and understand how this function is

33
00:02:44.730 --> 00:02:53.770
written. Under Execution role, I selected AWSLambda role that lets me upload

34
00:02:53.770 --> 00:02:56.940
the logs to CloudWatch.

35
00:02:56.940 --> 00:03:03.900
I accepted the default settings under Network and Concurrency.

36
00:03:03.900 --> 00:03:10.345
I'm going to log in to Cloud9 and commit few more changes to our repository and

37
00:03:10.345 --> 00:03:15.730
test this trigger. You can see we are in the develop branch.

38
00:03:15.730 --> 00:03:21.710
Let me open file1.txt. I'm going to make some changes and save

39
00:03:21.710 --> 00:03:31.300
this file. Let me add this to the local branch, commit it, and

40
00:03:31.300 --> 00:03:35.140
push the changes to remote bench.

41
00:03:35.140 --> 00:03:44.290
Let me go back to the CodeCommit console, create a pull request, and merge these

42
00:03:44.290 --> 00:03:52.040
changes to CodeCommit. Also pay attention to the fact that we're deleting the

43
00:03:52.040 --> 00:03:59.220
source branch after merging. This process is exactly the same as what we

44
00:03:59.220 --> 00:04:05.560
followed in the last module. Now that the merge is completed, let's go back to

45
00:04:05.560 --> 00:04:13.840
the Commits section and you can see a new commit ID at the top. Under Code,

46
00:04:13.840 --> 00:04:20.730
click on file1.txt and you can see the changes that we did before are also

47
00:04:20.730 --> 00:04:28.605
successfully merged to the master branch. Under Services, let's go to the

48
00:04:28.605 --> 00:04:39.318
CloudWatch console, click Logs, select View log groups, choose the

49
00:04:39.318 --> 00:04:46.530
lambda/TestFunction log group, and select the latest log stream data. You can

50
00:04:46.530 --> 00:04:53.530
see the log statements that were pushed from our Lambda function to CloudWatch.

51
00:04:53.530 --> 00:04:56.840
Click on the zoom icon to your left.

52
00:04:56.840 --> 00:05:05.000
You can see the last commit ID that occurred in the master branch and the clone URL of the repository.

