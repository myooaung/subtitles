WEBVTT
1
1

00:00:01.353  -->  00:00:04.472
<v Voiceover>The last lecture was a conceptual overview</v>
2

2

00:00:04.472  -->  00:00:07.175
about what happens in the JavaScript engine
3

3

00:00:07.175  -->  00:00:10.024
once we run our code, how it's parsed
4

4

00:00:10.024  -->  00:00:12.583
and translated into machine code.
5

5

00:00:12.583  -->  00:00:16.292
Now let's focus on the order in which the code is run,
6

6

00:00:16.292  -->  00:00:20.459
and for that, we need to talk about execution contexts.
7

7

00:00:21.646  -->  00:00:25.391
All JavaScript code needs to run in an environment,
8

8

00:00:25.391  -->  00:00:29.678
and these environments are called execution contexts.
9

9

00:00:29.678  -->  00:00:33.109
So you can imagine an execution context like a box,
10

10

00:00:33.109  -->  00:00:36.963
or like a container, which stores variables,
11

11

00:00:36.963  -->  00:00:41.130
and in which a piece of our code is evaluated and executed.
12

12

00:00:41.986  -->  00:00:46.119
We will go more in depth about this in the next slides.
13

13

00:00:46.119  -->  00:00:48.310
Now, the default execution context
14

14

00:00:48.310  -->  00:00:51.002
is always the global context.
15

15

00:00:51.002  -->  00:00:54.595
Remember that I said that an execution context
16

16

00:00:54.595  -->  00:00:57.622
is where a piece of code is executed.
17

17

00:00:57.622  -->  00:01:00.024
Well, in a global context, all the code
18

18

00:01:00.024  -->  00:01:03.941
that is not inside of any function is executed,
19

19

00:01:04.780  -->  00:01:06.932
and this is very important.
20

20

00:01:06.932  -->  00:01:10.907
So, again, the global execution context is
21

21

00:01:10.907  -->  00:01:12.841
for variables and functions
22

22

00:01:12.841  -->  00:01:15.841
that are not inside of any function.
23

23

00:01:17.194  -->  00:01:19.129
Now, you can also think
24

24

00:01:19.129  -->  00:01:22.453
of an execution context as an object
25

25

00:01:22.453  -->  00:01:25.463
Remember objects from the introductory lectures?
26

26

00:01:25.463  -->  00:01:28.410
So the global execution context is associated
27

27

00:01:28.410  -->  00:01:32.398
with the global object, which in case of the browser
28

28

00:01:32.398  -->  00:01:34.450
is the window object.
29

29

00:01:34.450  -->  00:01:37.537
So everything that we declare in the global context
30

30

00:01:37.537  -->  00:01:39.564
automatically gets attached
31

31

00:01:39.564  -->  00:01:42.483
to the window object in the browser.
32

32

00:01:42.483  -->  00:01:45.948
And it works like this: declaring a variable called
33

33

00:01:45.948  -->  00:01:50.115
lastName or window.lastName is the exact same thing.
34

34

00:01:51.609  -->  00:01:55.948
It's like lastName is a property of the window object.
35

35

00:01:55.948  -->  00:01:58.862
And as we talked about in the intro lectures,
36

36

00:01:58.862  -->  00:02:02.718
properties are just variables attached to objects.
37

37

00:02:02.718  -->  00:02:05.355
So this makes sense, right?
38

38

00:02:05.355  -->  00:02:07.879
And I know this is a lot to absorb,
39

39

00:02:07.879  -->  00:02:10.158
so I really encourage you to take some notes
40

40

00:02:10.158  -->  00:02:13.581
about all these things, to reference them later.
41

41

00:02:13.581  -->  00:02:16.419
And of course you can also watch these lectures again,
42

42

00:02:16.419  -->  00:02:20.346
when you feel more confident with your coding.
43

43

00:02:20.346  -->  00:02:24.136
So remember the global execution context is for code
44

44

00:02:24.136  -->  00:02:26.948
that is not inside of any function.
45

45

00:02:26.948  -->  00:02:30.490
But what about code that is in functions?
46

46

00:02:30.490  -->  00:02:32.472
It's actually very simple.
47

47

00:02:32.472  -->  00:02:34.591
Each time that we call a function,
48

48

00:02:34.591  -->  00:02:38.212
it gets its own brand-new execution context.
49

49

00:02:38.212  -->  00:02:41.098
Let me show you that by an example.
50

50

00:02:41.098  -->  00:02:44.704
So this first declaration is not in any function,
51

51

00:02:44.704  -->  00:02:47.474
So we are in a global execution context here,
52

52

00:02:47.474  -->  00:02:51.676
as the red arrow down there shows on the right side.
53

53

00:02:51.676  -->  00:02:55.091
So this variable is stored in a global object.
54

54

00:02:55.091  -->  00:02:59.579
We will see how exactly that works in the next lecture.
55

55

00:02:59.579  -->  00:03:01.699
Next up, this function declaration
56

56

00:03:01.699  -->  00:03:04.417
is also in a global context.
57

57

00:03:04.417  -->  00:03:08.578
So we're still here in the same execution context.
58

58

00:03:08.578  -->  00:03:12.761
And the same about the second, and the third function.
59

59

00:03:12.761  -->  00:03:14.371
And this is where the fun begins,
60

60

00:03:14.371  -->  00:03:18.538
because here is where we call the very first function.
61

61

00:03:19.688  -->  00:03:21.284
And as I mentioned before,
62

62

00:03:21.284  -->  00:03:25.117
a new function gets its new execution context.
63

63

00:03:26.087  -->  00:03:29.851
And what happens is that this new context is put
64

64

00:03:29.851  -->  00:03:32.135
on top of the current context,
65

65

00:03:32.135  -->  00:03:35.631
forming the so-called Execution Stack.
66

66

00:03:35.631  -->  00:03:38.676
So for the duration of this first function call,
67

67

00:03:38.676  -->  00:03:41.830
the execution context for that function
68

68

00:03:41.830  -->  00:03:45.997
becomes the active context in which the code is executed.
69

69

00:03:47.447  -->  00:03:51.803
Okay, so let's get inside the first function with our arrow.
70

70

00:03:51.803  -->  00:03:54.372
So this a variable will now get stored
71

71

00:03:54.372  -->  00:03:57.835
in the execution context for this function,
72

72

00:03:57.835  -->  00:04:01.687
and not anymore in the global context.
73

73

00:04:01.687  -->  00:04:03.890
And now we call the second function,
74

74

00:04:03.890  -->  00:04:07.511
and I'm sure you can guess by now what will happen, right?
75

75

00:04:07.511  -->  00:04:10.923
So once again, a new execution context will be created
76

76

00:04:10.923  -->  00:04:14.090
and put on top of the execution stack.
77

77

00:04:15.004  -->  00:04:18.193
And here we go, this is now the active context.
78

78

00:04:18.193  -->  00:04:21.052
Okay, so now variable b is stored
79

79

00:04:21.052  -->  00:04:23.723
in this new execution context.
80

80

00:04:23.723  -->  00:04:25.775
And now we call the third function,
81

81

00:04:25.775  -->  00:04:29.114
and once more, a new execution context is created
82

82

00:04:29.114  -->  00:04:33.515
and put on top of the stack, as we already know.
83

83

00:04:33.515  -->  00:04:36.846
So now, inside of the third function we just have
84

84

00:04:36.846  -->  00:04:40.877
these two variable declarations, and nothing more.
85

85

00:04:40.877  -->  00:04:43.823
So this function has now done all its work,
86

86

00:04:43.823  -->  00:04:47.382
and so we say that the function returns.
87

87

00:04:47.382  -->  00:04:50.581
So what happens to its execution context?
88

88

00:04:50.581  -->  00:04:54.317
It just gets removed from the top of the stack.
89

89

00:04:54.317  -->  00:04:55.821
Very simple.
90

90

00:04:55.821  -->  00:04:58.885
And then, the context of the second function,
91

91

00:04:58.885  -->  00:05:00.998
which called the third function,
92

92

00:05:00.998  -->  00:05:04.415
is back to being the active context.
93

93

00:05:04.415  -->  00:05:07.192
And we go back to the second function.
94

94

00:05:07.192  -->  00:05:09.533
So this z variable gets stored
95

95

00:05:09.533  -->  00:05:11.974
in the currently-active context,
96

96

00:05:11.974  -->  00:05:14.043
and after the function returns,
97

97

00:05:14.043  -->  00:05:17.043
the context also pops off the stack.
98

98

00:05:18.301  -->  00:05:20.601
So, back to the first function now.
99

99

00:05:20.601  -->  00:05:22.324
And here the same thing.
100

100

00:05:22.324  -->  00:05:26.007
The function is done, it returns, and so we exit it,
101

101

00:05:26.007  -->  00:05:29.757
and the execution context pops off the stack.
102

102

00:05:31.497  -->  00:05:34.848
And like this, we executed all three functions,
103

103

00:05:34.848  -->  00:05:37.362
created three execution contexts,
104

104

00:05:37.362  -->  00:05:41.529
and popped them off the stack when the functions returned.
105

105

00:05:42.756  -->  00:05:46.112
I hope that all of that made sense to you.
106

106

00:05:46.112  -->  00:05:48.000
Now, you may ask,
107

107

00:05:48.000  -->  00:05:51.619
"How are all these execution contexts actually created?
108

108

00:05:51.619  -->  00:05:53.946
"And why is this so important?"
109

109

00:05:53.946  -->  00:05:56.517
And the answer is in the next lecture,
110

110

00:05:56.517  -->  00:05:59.100
so go watch that one right now.
