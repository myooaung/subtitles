WEBVTT
1
1

00:00:00.830  -->  00:00:02.510
<v Jonas>Hey there in this lecture</v>
2

2

00:00:02.510  -->  00:00:04.710
we will continue talking about operators
3

3

00:00:04.710  -->  00:00:06.423
and operator precedence.
4

4

00:00:07.270  -->  00:00:09.940
So for this example let's say that we want to calculate
5

5

00:00:09.940  -->  00:00:12.890
if John is of full age only based on the year
6

6

00:00:12.890  -->  00:00:14.780
in which he was born.
7

7

00:00:14.780  -->  00:00:17.210
So let's first declare a couple of variables,
8

8

00:00:17.210  -->  00:00:19.883
so now is 2018.
9

9

00:00:22.660  -->  00:00:26.560
The year John was born was 1989
10

10

00:00:27.620  -->  00:00:30.350
and then we also define the full age variable
11

11

00:00:31.870  -->  00:00:34.220
and that's the age at which you officially become
12

12

00:00:34.220  -->  00:00:36.840
of full age, so in most of Europe that's 18
13

13

00:00:36.840  -->  00:00:39.680
maybe in the US it's 21, I'm not sure,
14

14

00:00:39.680  -->  00:00:42.650
but let's use 18 here for this example.
15

15

00:00:42.650  -->  00:00:45.900
Okay, and so what we can do is to calculate the age
16

16

00:00:45.900  -->  00:00:48.310
and then compare it with 18 here,
17

17

00:00:48.310  -->  00:00:50.780
and we're missing the equal sign of course.
18

18

00:00:50.780  -->  00:00:53.740
So what I want to do is to do all of the calculation
19

19

00:00:53.740  -->  00:00:55.880
all in one line, okay.
20

20

00:00:55.880  -->  00:01:00.080
So var is full age
21

21

00:01:00.080  -->  00:01:02.920
and then equal now
22

22

00:01:02.920  -->  00:01:05.300
minus year John
23

23

00:01:05.300  -->  00:01:06.860
and that will calculate the age
24

24

00:01:06.860  -->  00:01:09.840
and then we want to test if it's greater or equal
25

25

00:01:09.840  -->  00:01:11.233
to the full age.
26

26

00:01:12.290  -->  00:01:14.410
Okay, so does that make sense?
27

27

00:01:14.410  -->  00:01:15.670
So let's take a look at this
28

28

00:01:15.670  -->  00:01:17.870
and try to figure out why this works.
29

29

00:01:17.870  -->  00:01:20.210
So you see that we have actually two operators,
30

30

00:01:20.210  -->  00:01:22.570
we have the minus and then this logical of greater
31

31

00:01:22.570  -->  00:01:26.480
or equal operator all in one line, so all in here.
32

32

00:01:26.480  -->  00:01:28.950
Now how does JavaScript know which operator
33

33

00:01:28.950  -->  00:01:30.610
actually to execute first?
34

34

00:01:30.610  -->  00:01:34.050
Because imagine that first this here would be executed.
35

35

00:01:34.050  -->  00:01:36.620
So we would as if year John is greater or equal
36

36

00:01:36.620  -->  00:01:39.800
of full age which would return a true of false value
37

37

00:01:39.800  -->  00:01:43.230
and then we would do now minus this true of false value
38

38

00:01:43.230  -->  00:01:45.300
and so this would be nothing significant.
39

39

00:01:45.300  -->  00:01:47.990
So this would not be what we want.
40

40

00:01:47.990  -->  00:01:51.000
Instead what we want is for this year to be executed first.
41

41

00:01:51.000  -->  00:01:52.730
So now minus the year of John
42

42

00:01:52.730  -->  00:01:54.480
and then we want to compare that age
43

43

00:01:54.480  -->  00:01:55.780
with the full age.
44

44

00:01:55.780  -->  00:01:58.810
So this year works and let's actually test that
45

45

00:02:01.030  -->  00:02:03.283
and I'm going to show you why in a second.
46

46

00:02:04.410  -->  00:02:07.620
Okay, so this actually returns true
47

47

00:02:07.620  -->  00:02:09.490
and of course John is of full age.
48

48

00:02:09.490  -->  00:02:13.320
So in 2018 born in 1989 he is 29
49

49

00:02:13.320  -->  00:02:15.250
and so of course he is of full age.
50

50

00:02:15.250  -->  00:02:17.420
Now in order to figure out why this works here
51

51

00:02:17.420  -->  00:02:20.070
we have to think about operator precedence,
52

52

00:02:20.070  -->  00:02:23.063
which means which operator is executed first.
53

53

00:02:23.920  -->  00:02:26.210
So if you come here to my resources page
54

54

00:02:26.210  -->  00:02:29.240
at codingheros.io/resources
55

55

00:02:29.240  -->  00:02:30.770
down here in the JavaScript section
56

56

00:02:30.770  -->  00:02:32.973
you will find this operator precedence.
57

57

00:02:34.310  -->  00:02:36.550
Okay, so let's open up that link
58

58

00:02:36.550  -->  00:02:40.410
and then down here we have the operator precedence table.
59

59

00:02:40.410  -->  00:02:43.130
So what we see here is that the operators that are here
60

60

00:02:43.130  -->  00:02:46.570
on the top of the list will be executed before the others.
61

61

00:02:46.570  -->  00:02:48.730
So you see that the ones with the highest precedence
62

62

00:02:48.730  -->  00:02:51.540
is using this grouping here with the parenthesis
63

63

00:02:51.540  -->  00:02:53.610
and I'm gonna show you that in a second,
64

64

00:02:53.610  -->  00:02:55.650
but what we're interested in here
65

65

00:02:55.650  -->  00:02:58.900
is or plus, or actually or minus operator
66

66

00:02:58.900  -->  00:03:02.510
which is this one and or logical operator
67

67

00:03:02.510  -->  00:03:05.230
greater or equal, so this one here.
68

68

00:03:05.230  -->  00:03:06.930
So what we can see from this table
69

69

00:03:06.930  -->  00:03:10.700
is that the minus operator has a precedence of 16.
70

70

00:03:10.700  -->  00:03:12.040
Okay, so that's what this value here
71

71

00:03:12.040  -->  00:03:14.593
is is the precedence value which is greater
72

72

00:03:14.593  -->  00:03:17.810
than the one from the greater or equal operator
73

73

00:03:17.810  -->  00:03:19.220
which is only 11.
74

74

00:03:19.220  -->  00:03:21.430
So what means is that this minus here
75

75

00:03:21.430  -->  00:03:22.880
will be executed first.
76

76

00:03:22.880  -->  00:03:24.700
So all of this is executed first
77

77

00:03:24.700  -->  00:03:27.090
and then we end up with the result here.
78

78

00:03:27.090  -->  00:03:29.290
So in this case it will be 29.
79

79

00:03:29.290  -->  00:03:32.100
Then only after that 29 will be compared
80

80

00:03:32.100  -->  00:03:34.180
with the full age with this operator
81

81

00:03:34.180  -->  00:03:38.135
which has a lower precedence with only 11, okay.
82

82

00:03:38.135  -->  00:03:40.620
So after that we end up with the result,
83

83

00:03:40.620  -->  00:03:43.130
which in this case here will be false.
84

84

00:03:43.130  -->  00:03:45.190
So let's actually write that here
85

85

00:03:45.190  -->  00:03:46.850
or actually it is true.
86

86

00:03:46.850  -->  00:03:50.734
So right now we have var is full age equals true.
87

87

00:03:50.734  -->  00:03:52.570
What I want to show you next
88

88

00:03:52.570  -->  00:03:54.810
is that the equal operator itself,
89

89

00:03:54.810  -->  00:03:56.530
and where is it, here it is.
90

90

00:03:56.530  -->  00:03:58.920
So the assignment operator as it's called
91

91

00:03:58.920  -->  00:04:01.210
is also an operator itself.
92

92

00:04:01.210  -->  00:04:03.310
I mentioned that to you in one of the last lectures
93

93

00:04:03.310  -->  00:04:04.740
and now it makes sense.
94

94

00:04:04.740  -->  00:04:06.890
Okay, so you see that this equal operator
95

95

00:04:06.890  -->  00:04:09.870
is the one with the lowest or almost one of the lowest
96

96

00:04:09.870  -->  00:04:12.090
precedence and that makes total sense,
97

97

00:04:12.090  -->  00:04:14.660
because of course we want the assignment to happen
98

98

00:04:14.660  -->  00:04:15.930
as the last step.
99

99

00:04:15.930  -->  00:04:19.130
So after all the other operators have done its work,
100

100

00:04:19.130  -->  00:04:22.900
in this case our minus and or equal or greater than operator
101

101

00:04:22.900  -->  00:04:24.500
they all have done their work now
102

102

00:04:24.500  -->  00:04:26.460
and we end up with the true result.
103

103

00:04:26.460  -->  00:04:28.550
So as a final step it is then assigned
104

104

00:04:28.550  -->  00:04:30.380
to the is full age variable.
105

105

00:04:30.380  -->  00:04:32.190
All right, does that make sense?
106

106

00:04:32.190  -->  00:04:34.900
So actually we not only have two operators,
107

107

00:04:34.900  -->  00:04:36.170
but we have three.
108

108

00:04:36.170  -->  00:04:38.680
The first one that gets executed is this one
109

109

00:04:38.680  -->  00:04:42.500
then this one and finally the assignment operator.
110

110

00:04:42.500  -->  00:04:44.860
All right, and whenever we need to know
111

111

00:04:44.860  -->  00:04:47.710
if something works, the order in which your operators work
112

112

00:04:47.710  -->  00:04:50.730
you can always just consult this table here
113

113

00:04:50.730  -->  00:04:54.000
which is why I put it here right on my resources page
114

114

00:04:54.000  -->  00:04:55.930
under the JavaScript section.
115

115

00:04:55.930  -->  00:04:58.180
All right, so let's now look at another example
116

116

00:04:58.180  -->  00:05:01.110
where we want to calculate the average age of
117

117

00:05:01.110  -->  00:05:02.270
John and his friend.
118

118

00:05:02.270  -->  00:05:05.920
So let's say age John, because we
119

119

00:05:05.920  -->  00:05:07.890
hadn't really calculated it,
120

120

00:05:07.890  -->  00:05:10.160
we only calculated it here.
121

121

00:05:10.160  -->  00:05:12.370
So let's actually grab this here,
122

122

00:05:12.370  -->  00:05:15.330
so now minus the year John
123

123

00:05:15.330  -->  00:05:16.530
and then the age of Mark
124

124

00:05:17.670  -->  00:05:21.050
and let's just say it's 35 without any calculations here.
125

125

00:05:21.050  -->  00:05:22.310
So the average will be
126

126

00:05:24.440  -->  00:05:28.410
to basically calculate the sum and then divide it by two.
127

127

00:05:28.410  -->  00:05:31.690
So age John plus age Mark
128

128

00:05:33.010  -->  00:05:36.680
divided by two, but this is not really correct, right.
129

129

00:05:36.680  -->  00:05:38.430
You know that from your math class
130

130

00:05:38.430  -->  00:05:40.320
that you had in school probably.
131

131

00:05:40.320  -->  00:05:42.710
So you know that this dividing operator here
132

132

00:05:42.710  -->  00:05:45.670
will have precedence over the plus, okay.
133

133

00:05:45.670  -->  00:05:47.470
So that's confirmed and in JavaScript it also
134

134

00:05:47.470  -->  00:05:49.750
works like that and you can see that
135

135

00:05:51.200  -->  00:05:52.650
right here.
136

136

00:05:52.650  -->  00:05:55.950
So the division here has a higher precedence of 14
137

137

00:05:55.950  -->  00:05:58.040
than the addition of 13.
138

138

00:05:58.040  -->  00:06:00.450
Actually when we talked about this example here
139

139

00:06:00.450  -->  00:06:03.080
I mistakenly used this operator here,
140

140

00:06:03.080  -->  00:06:05.630
which is the unary plus, but I meant this one here.
141

141

00:06:05.630  -->  00:06:08.070
So this addition operator, but of course it still
142

142

00:06:08.070  -->  00:06:11.180
has a higher precedence than the greater.
143

143

00:06:11.180  -->  00:06:12.800
Okay, so it doesn't really matter
144

144

00:06:12.800  -->  00:06:17.570
using this here or the unary plus operator.
145

145

00:06:17.570  -->  00:06:20.150
Okay, it's a different operator, but in terms of precedence
146

146

00:06:20.150  -->  00:06:24.050
the addition is still higher than this logical operator.
147

147

00:06:24.050  -->  00:06:26.440
Okay, anyway what we need to do here
148

148

00:06:26.440  -->  00:06:28.980
is to group this here together with parenthesis
149

149

00:06:28.980  -->  00:06:32.450
just like, again, you learned in your math class probably.
150

150

00:06:32.450  -->  00:06:35.050
So that makes sense because we see up here
151

151

00:06:35.050  -->  00:06:38.450
that with the highest precedence we have the grouping.
152

152

00:06:38.450  -->  00:06:41.090
Okay, so that's using parenthesis.
153

153

00:06:41.090  -->  00:06:43.110
So if we do this
154

154

00:06:44.620  -->  00:06:46.570
well then this operation here
155

155

00:06:46.570  -->  00:06:48.100
has the highest precedence.
156

156

00:06:48.100  -->  00:06:51.220
So first we add up the age of John and Mark
157

157

00:06:51.220  -->  00:06:53.550
and only then we can divide it by two
158

158

00:06:53.550  -->  00:06:55.823
in order to create the average age.
159

159

00:06:58.420  -->  00:07:00.720
So let's just take a look at it in the console
160

160

00:07:02.720  -->  00:07:05.310
just to make sure that everything is working correctly.
161

161

00:07:05.310  -->  00:07:08.610
So indeed it is 32 and that's because,
162

162

00:07:08.610  -->  00:07:10.930
and let's quickly do it in the console,
163

163

00:07:10.930  -->  00:07:13.310
35 plus 29 is 64
164

164

00:07:13.310  -->  00:07:18.160
and 64 divide by two is of course 32.
165

165

00:07:18.160  -->  00:07:20.140
So this calculation here is correct.
166

166

00:07:20.140  -->  00:07:21.840
Let's just add some comments here.
167

167

00:07:25.530  -->  00:07:27.270
So this is with multiple operators
168

168

00:07:28.490  -->  00:07:30.040
and here we have grouping
169

169

00:07:31.400  -->  00:07:35.060
and now let's do some more examples with grouping
170

170

00:07:35.060  -->  00:07:36.523
and multiple assignments.
171

171

00:07:40.890  -->  00:07:43.810
So let's say that you have a value that you want to assign
172

172

00:07:43.810  -->  00:07:46.040
to multiple variables at the same time
173

173

00:07:46.040  -->  00:07:48.350
and that's totally possible in JavaScript.
174

174

00:07:48.350  -->  00:07:50.963
So let's create two variables X and Y.
175

175

00:07:52.080  -->  00:07:54.190
Right now I'm not really creating variables
176

176

00:07:54.190  -->  00:07:56.440
with a meaningful name here, but that's no problem
177

177

00:07:56.440  -->  00:07:59.120
this is just twiddling some mathematical operations.
178

178

00:07:59.120  -->  00:08:00.630
Okay, and so
179

179

00:08:00.630  -->  00:08:04.090
let's just start by saying X equals
180

180

00:08:04.090  -->  00:08:05.840
and just a math operations here,
181

181

00:08:05.840  -->  00:08:07.970
let's say three plus five
182

182

00:08:08.920  -->  00:08:12.810
and then times four minus six.
183

183

00:08:12.810  -->  00:08:15.010
Okay, and so just something like this.
184

184

00:08:15.010  -->  00:08:18.600
So we already know which will have precedence here, right.
185

185

00:08:18.600  -->  00:08:21.090
So the grouping has precedence and this will then
186

186

00:08:21.090  -->  00:08:24.260
turn out to be eight, so let's actually write it down here.
187

187

00:08:24.260  -->  00:08:26.200
So after the first step we have
188

188

00:08:26.200  -->  00:08:29.920
eight times four minus six
189

189

00:08:29.920  -->  00:08:33.520
then the next step will be this multiplication here, right.
190

190

00:08:33.520  -->  00:08:37.750
So eight times four is 32 minus six
191

191

00:08:37.750  -->  00:08:40.870
and finally this will then turn out to be 26.
192

192

00:08:40.870  -->  00:08:44.980
Okay, so X will be 26 and let's log that to the console
193

193

00:08:47.110  -->  00:08:48.000
just to make sure
194

194

00:08:49.520  -->  00:08:51.090
and indeed here it is.
195

195

00:08:51.090  -->  00:08:54.500
So 26 is the result of this calculation.
196

196

00:08:54.500  -->  00:08:57.380
So as before it did all of these operations
197

197

00:08:57.380  -->  00:09:00.000
and only then it did the assignment.
198

198

00:09:00.000  -->  00:09:03.320
Now if we wanted to assign this to X and Y at the same time
199

199

00:09:03.320  -->  00:09:06.550
we could very simply do X equals Y
200

200

00:09:06.550  -->  00:09:10.380
and then equals this entire calculations here.
201

201

00:09:10.380  -->  00:09:13.200
Now the question here is why this actually works.
202

202

00:09:13.200  -->  00:09:15.070
Imagine that you're reading this line here
203

203

00:09:15.070  -->  00:09:18.110
and we see X is equal to Y.
204

204

00:09:18.110  -->  00:09:20.790
So at this point Y is still undefined, right,
205

205

00:09:20.790  -->  00:09:24.190
because we didn't define any value for it before this line.
206

206

00:09:24.190  -->  00:09:26.400
So it would be kind of logical that X
207

207

00:09:26.400  -->  00:09:29.423
would be undefined at this point, but it is not.
208

208

00:09:30.580  -->  00:09:32.530
Let's take a look at that actually.
209

209

00:09:32.530  -->  00:09:34.210
This is something that we didn't do before,
210

210

00:09:34.210  -->  00:09:36.300
which is to log two things at the same time.
211

211

00:09:36.300  -->  00:09:38.500
So we can say console log and then X
212

212

00:09:38.500  -->  00:09:40.763
and then a comma and then another variable.
213

213

00:09:41.910  -->  00:09:43.990
So we see 26 and 26,
214

214

00:09:43.990  -->  00:09:47.390
so two results at the same time with the console.log.
215

215

00:09:47.390  -->  00:09:49.660
So what we see here is that 26 is
216

216

00:09:49.660  -->  00:09:52.510
not undefined, which would be logical.
217

217

00:09:52.510  -->  00:09:55.830
So again because Y is undefined at this point
218

218

00:09:55.830  -->  00:09:59.370
and if we say X equal to something that is undefined
219

219

00:09:59.370  -->  00:10:02.840
well then X should also be undefined, but it's not.
220

220

00:10:02.840  -->  00:10:05.280
So let's take a look at why that happens
221

221

00:10:05.280  -->  00:10:08.570
and I can show it to you here in the table again.
222

222

00:10:08.570  -->  00:10:10.080
So we have the precedence here
223

223

00:10:10.080  -->  00:10:12.067
that we already taught before, but we also have
224

224

00:10:12.067  -->  00:10:15.000
the associativity and what that simply means
225

225

00:10:15.000  -->  00:10:18.330
is the direction in which the operation is executed.
226

226

00:10:18.330  -->  00:10:21.050
So if you come down here to for example
227

227

00:10:21.050  -->  00:10:23.780
the multiplication or the addition
228

228

00:10:23.780  -->  00:10:25.640
we have left to right.
229

229

00:10:25.640  -->  00:10:27.170
Okay, and so all that means
230

230

00:10:27.170  -->  00:10:29.020
is that for example if we had,
231

231

00:10:29.020  -->  00:10:30.370
let's add it as a comment,
232

232

00:10:30.370  -->  00:10:34.600
if we had two plus four plus five
233

233

00:10:34.600  -->  00:10:37.000
then it would do it from the left side to the right side.
234

234

00:10:37.000  -->  00:10:39.560
So first the two plus four, which is six,
235

235

00:10:39.560  -->  00:10:42.090
and then six plus five to 11.
236

236

00:10:42.090  -->  00:10:44.770
But there are some operators that work the other way around,
237

237

00:10:44.770  -->  00:10:46.670
so which are right from left
238

238

00:10:46.670  -->  00:10:50.070
and the assignment operator is one of them.
239

239

00:10:50.070  -->  00:10:51.340
So here we have assignment
240

240

00:10:51.340  -->  00:10:54.360
and assignment works from right to left.
241

241

00:10:54.360  -->  00:10:56.360
Okay, so that's the other way around.
242

242

00:10:56.360  -->  00:11:00.030
So that is why this piece of code here actually works,
243

243

00:11:00.030  -->  00:11:02.620
because we end up with the result here of 26
244

244

00:11:02.620  -->  00:11:05.430
and then the assignment works from right to left.
245

245

00:11:05.430  -->  00:11:08.450
So it doesn't start by doing X equal Y,
246

246

00:11:08.450  -->  00:11:12.170
but instead it starts by saying Y equals 26.
247

247

00:11:12.170  -->  00:11:15.350
Only then it does X equals 26.
248

248

00:11:15.350  -->  00:11:17.220
Okay, does that make sense?
249

249

00:11:17.220  -->  00:11:19.660
So again, the assignment operator
250

250

00:11:19.660  -->  00:11:21.720
works not from the left to the right,
251

251

00:11:21.720  -->  00:11:23.610
but from the right to the left.
252

252

00:11:23.610  -->  00:11:26.120
So here we end up with the result of 26
253

253

00:11:26.120  -->  00:11:28.160
and then that is assigned to Y
254

254

00:11:28.160  -->  00:11:31.240
and then that again in turn is assigned to X.
255

255

00:11:31.240  -->  00:11:35.360
So therefore we end up with 26 in both these variables.
256

256

00:11:35.360  -->  00:11:38.010
Okay, so that is the associativity
257

257

00:11:38.010  -->  00:11:39.360
that's the the second part of the table
258

258

00:11:39.360  -->  00:11:40.330
that I wanted to show you.
259

259

00:11:40.330  -->  00:11:42.730
So we don't just have to keep precedence in mind,
260

260

00:11:42.730  -->  00:11:44.760
but also the associativity.
261

261

00:11:44.760  -->  00:11:46.970
All right, now just to finish this lecture
262

262

00:11:46.970  -->  00:11:49.223
I just want to show you some more operators.
263

263

00:11:51.660  -->  00:11:53.870
So let's say that we wanted to double X.
264

264

00:11:53.870  -->  00:11:56.130
So something like X equals
265

265

00:11:56.130  -->  00:11:59.170
X times two, right.
266

266

00:11:59.170  -->  00:12:00.920
So that would be the double of X,
267

267

00:12:00.920  -->  00:12:04.000
but you see that we're actually repeating the X here.
268

268

00:12:04.000  -->  00:12:06.350
Okay, so in JavaScript there is a way of
269

269

00:12:06.350  -->  00:12:09.730
making this a bit more simple, which is simply saying
270

270

00:12:09.730  -->  00:12:13.040
X multiply equal two.
271

271

00:12:13.040  -->  00:12:15.900
Okay, so this is the exact same thing.
272

272

00:12:15.900  -->  00:12:17.770
So what this means is that basically
273

273

00:12:17.770  -->  00:12:19.740
it will do X times two
274

274

00:12:19.740  -->  00:12:22.350
without us having to write out that X times here
275

275

00:12:22.350  -->  00:12:23.780
like we did here, okay.
276

276

00:12:23.780  -->  00:12:26.210
So let's take a look at the result
277

277

00:12:30.730  -->  00:12:33.620
and so 52 is indeed 26 times two,
278

278

00:12:33.620  -->  00:12:35.390
which was X before.
279

279

00:12:35.390  -->  00:12:38.980
The same thing would work for plus, minus, or multiply.
280

280

00:12:38.980  -->  00:12:42.410
So we can say X plus equal 10
281

281

00:12:42.410  -->  00:12:44.910
and so what do you think this will turn out to be?
282

282

00:12:46.720  -->  00:12:50.250
I hope that you guessed 62, right.
283

283

00:12:50.250  -->  00:12:53.820
So that is 52, which is the result from before, plus 10.
284

284

00:12:53.820  -->  00:12:55.710
So it's the exact same thing as writing X
285

285

00:12:55.710  -->  00:12:59.150
equals X plus 10, all right.
286

286

00:12:59.150  -->  00:13:01.795
So that makes our lives a bit easier.
287

287

00:13:01.795  -->  00:13:04.230
These operators you have them down here
288

288

00:13:04.230  -->  00:13:05.640
in the assignment section,
289

289

00:13:05.640  -->  00:13:09.020
because they are actually assignment operators just like
290

290

00:13:09.020  -->  00:13:11.090
the normal assignment operator.
291

291

00:13:11.090  -->  00:13:14.640
Okay, now just the last one that I want to show you
292

292

00:13:14.640  -->  00:13:16.490
is the increment.
293

293

00:13:16.490  -->  00:13:19.530
So what we can do instead of writing X equals
294

294

00:13:19.530  -->  00:13:23.000
X plus one would be to write it like this
295

295

00:13:23.000  -->  00:13:27.320
so we could do X plus equals one,
296

296

00:13:27.320  -->  00:13:28.770
but there is an even simpler way
297

297

00:13:28.770  -->  00:13:30.750
if we only want to add one
298

298

00:13:30.750  -->  00:13:33.520
and that is to simply write X plus plus.
299

299

00:13:33.520  -->  00:13:35.790
So this operator simply adds one unit
300

300

00:13:35.790  -->  00:13:38.950
to the variable that we're using this operator on.
301

301

00:13:38.950  -->  00:13:41.530
Okay, so this is all the same thing here,
302

302

00:13:41.530  -->  00:13:44.180
but of course this one is the easiest to write
303

303

00:13:44.180  -->  00:13:45.443
and the most handy one.
304

304

00:13:46.350  -->  00:13:48.730
So just to prove to you that it actually works
305

305

00:13:48.730  -->  00:13:51.060
let's log this one to the console as well.
306

306

00:13:51.060  -->  00:13:53.130
So it's of course 63.
307

307

00:13:53.130  -->  00:13:55.980
The same way it works with minus minus.
308

308

00:13:55.980  -->  00:13:58.580
So right now it should be 61
309

309

00:13:58.580  -->  00:14:00.610
and yep indeed it is.
310

310

00:14:00.610  -->  00:14:03.810
So that was a lot to take in up until this point.
311

311

00:14:03.810  -->  00:14:06.270
You learned all about variables, data types,
312

312

00:14:06.270  -->  00:14:07.890
and also operators.
313

313

00:14:07.890  -->  00:14:09.600
So I hope that it's all making sense to you,
314

314

00:14:09.600  -->  00:14:11.020
that you're having some fun,
315

315

00:14:11.020  -->  00:14:14.070
and so next up there's coming a coding challenge
316

316

00:14:14.070  -->  00:14:16.680
where you can put all of these new skills to practice
317

317

00:14:16.680  -->  00:14:19.170
in a fun and small challenge that I have for you
318

318

00:14:19.170  -->  00:14:20.113
in the next video.
