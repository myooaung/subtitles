1
1

00:00:00,810  -->  00:00:02,996
<v Narrator>In this video, we will implement</v>
2

2

00:00:02,996  -->  00:00:05,098
the controller for the recipe section.
3

3

00:00:05,098  -->  00:00:07,248
And this is actually a pretty cool lecture,
4

4

00:00:07,248  -->  00:00:08,924
where you will get some new knowledge
5

5

00:00:08,924  -->  00:00:12,739
and so you will learn how to read data from the page URL
6

6

00:00:12,739  -->  00:00:15,897
by responding to the hash change event,
7

7

00:00:15,897  -->  00:00:17,914
and also how to add the same event listener
8

8

00:00:17,914  -->  00:00:19,536
to multiple events.
9

9

00:00:19,536  -->  00:00:23,024
So, probably quite a long video, so let's get started.
10

10

00:00:23,024  -->  00:00:26,502
So in order to figure out how to implement the controller,
11

11

00:00:26,502  -->  00:00:28,638
let's think again about how we implemented
12

12

00:00:28,638  -->  00:00:30,413
the search functionality.
13

13

00:00:30,413  -->  00:00:32,419
So what we have here is that whenever we click
14

14

00:00:32,419  -->  00:00:33,984
on one of these recipes,
15

15

00:00:33,984  -->  00:00:37,362
we get the ID of the recipe right here in the URL bar,
16

16

00:00:37,362  -->  00:00:38,379
right?
17

17

00:00:38,379  -->  00:00:40,248
So take a look at this here whenever
18

18

00:00:40,248  -->  00:00:42,460
I click on these different recipes.
19

19

00:00:42,460  -->  00:00:44,533
So we see that the ID there changes.
20

20

00:00:44,533  -->  00:00:47,578
Now, inside this URL, this entire part here
21

21

00:00:47,578  -->  00:00:49,449
is called the hash, okay?
22

22

00:00:49,449  -->  00:00:52,741
So it's the hash symbol and then whatever comes after it.
23

23

00:00:52,741  -->  00:00:54,403
So this here is the hash,
24

24

00:00:54,403  -->  00:00:57,190
and we can then actually make use of the fact
25

25

00:00:57,190  -->  00:00:59,317
that we change these hashes here
26

26

00:00:59,317  -->  00:01:01,578
whenever we click on one of these different recipes
27

27

00:01:01,578  -->  00:01:05,712
by using the hash change event in javascript, okay?
28

28

00:01:05,712  -->  00:01:08,076
So there's an event that's called hash change
29

29

00:01:08,076  -->  00:01:11,009
that is fired off each time that the hash that we have
30

30

00:01:11,009  -->  00:01:14,092
in the URL changes to something else,
31

31

00:01:15,337  -->  00:01:18,754
And so let's go ahead and use that event,
32

32

00:01:21,056  -->  00:01:23,053
So, this was just for testing here.
33

33

00:01:23,053  -->  00:01:25,862
And so let's now add an event listener.
34

34

00:01:25,862  -->  00:01:28,203
In this one, we will actually add to the global object
35

35

00:01:28,203  -->  00:01:30,859
in javascript so in the browser,
36

36

00:01:30,859  -->  00:01:31,983
which is Window,
37

37

00:01:31,983  -->  00:01:36,316
so window.addeventListener and then the hash change,
38

38

00:01:39,646  -->  00:01:41,372
And what we want to call here,
39

39

00:01:41,372  -->  00:01:46,372
is the control recipe function, which we didn't write yet,
40

40

00:01:46,489  -->  00:01:50,114
but that's what we're going to do next,
41

41

00:01:50,114  -->  00:01:54,432
So we have the control search function here,
42

42

00:01:54,432  -->  00:01:57,349
so now let's create control search.
43

43

00:02:04,181  -->  00:02:06,460
So first thing that we should do in here
44

44

00:02:06,460  -->  00:02:09,293
is to actually get that hash okay?
45

45

00:02:10,613  -->  00:02:13,909
So I'm calling this one the ID,
46

46

00:02:13,909  -->  00:02:18,292
and we can get it from window.location, okay.
47

47

00:02:18,292  -->  00:02:20,743
Window.location is the entire URL,
48

48

00:02:20,743  -->  00:02:23,583
and if we then use the .hash property on it,
49

49

00:02:23,583  -->  00:02:26,012
well, that's then just the hash.
50

50

00:02:26,012  -->  00:02:29,929
So let's try that one out, console.log, the ID.
51

51

00:02:32,135  -->  00:02:34,837
So remember that we have this event listener here,
52

52

00:02:34,837  -->  00:02:36,365
whenever we change the hash,
53

53

00:02:36,365  -->  00:02:38,798
which will then call the control recipe,
54

54

00:02:38,798  -->  00:02:42,381
which will log the current hash to console.
55

55

00:02:43,898  -->  00:02:47,565
Of course, we need some examples here again.
56

56

00:02:49,026  -->  00:02:50,276
So, here we go.
57

57

00:02:52,289  -->  00:02:53,588
So take a look at this,
58

58

00:02:53,588  -->  00:02:55,952
where the ID of the one of the search items,
59

59

00:02:55,952  -->  00:02:57,804
then I click here,
60

60

00:02:57,804  -->  00:02:58,955
which is this one,
61

61

00:02:58,955  -->  00:03:01,361
will be translated into the console, right?
62

62

00:03:01,361  -->  00:03:02,627
So you see that?
63

63

00:03:02,627  -->  00:03:04,129
Now if I click twice on the same,
64

64

00:03:04,129  -->  00:03:07,144
then nothing appears because we didn't change the hash,
65

65

00:03:07,144  -->  00:03:09,937
great and so the event is not fired.
66

66

00:03:09,937  -->  00:03:10,891
But each time I click on a new one,
67

67

00:03:10,891  -->  00:03:14,050
then the ID is here of course in the URL in this hash,
68

68

00:03:14,050  -->  00:03:16,011
and then also down here.
69

69

00:03:16,011  -->  00:03:17,887
So, great, that part already working.
70

70

00:03:17,887  -->  00:03:19,871
Now what were really interested in
71

71

00:03:19,871  -->  00:03:21,643
is only this part,
72

72

00:03:21,643  -->  00:03:23,605
So only the ID without the hash.
73

73

00:03:23,605  -->  00:03:25,377
So let's take care of that.
74

74

00:03:25,377  -->  00:03:27,450
And we can simple do a replace
75

75

00:03:27,450  -->  00:03:29,772
because this is a string and so we can of course
76

76

00:03:29,772  -->  00:03:31,639
call all the string methods on it.
77

77

00:03:31,639  -->  00:03:35,889
And we will then replace the hash with nothing.
78

78

00:03:35,889  -->  00:03:39,138
Okay, and with that the hash symbol will be gone.
79

79

00:03:39,138  -->  00:03:42,568
Okay, so let's now go ahead and do something with this ID.
80

80

00:03:42,568  -->  00:03:46,682
And first off, we need to change if we actually have an ID.
81

81

00:03:46,682  -->  00:03:50,209
Okay, because imagine that we would simply do this,
82

82

00:03:50,209  -->  00:03:51,493
so get rid of everything,
83

83

00:03:51,493  -->  00:03:53,213
then we don't have any ID,
84

84

00:03:53,213  -->  00:03:55,965
and so we don't want to create a recipe object.
85

85

00:03:55,965  -->  00:03:59,318
So we only do all this logic that we're writing next
86

86

00:03:59,318  -->  00:04:01,145
in case we actually have an ID.
87

87

00:04:01,145  -->  00:04:02,986
So let's add some comments here,
88

88

00:04:02,986  -->  00:04:05,319
just like we've done before.
89

89

00:04:08,042  -->  00:04:10,209
So get the ID from the URL
90

90

00:04:13,760  -->  00:04:15,927
Prepare the UI for changes
91

91

00:04:16,784  -->  00:04:20,701 line:15% 
So this is similar to what we had before again.
92

92

00:04:23,887  -->  00:04:27,505 line:15% 
Create a new recipe object of course.
93

93

00:04:27,505  -->  00:04:29,588 line:15% 
Then get the recipe data.
94

94

00:04:31,463  -->  00:04:33,148 line:15% 
Then we need to call our functions that
95

95

00:04:33,148  -->  00:04:36,148 line:15% 
we created for servings at the time.
96

96

00:04:37,008  -->  00:04:39,002 line:15% 
So calcTime and calcServings.
97

97

00:04:39,002  -->  00:04:42,085 line:15% 
So we need to call them here as well.
98

98

00:04:47,254  -->  00:04:49,544 line:15% 
And finally when we have all of this in place,
99

99

00:04:49,544  -->  00:04:52,044 line:15% 
we can then render the recipe.
100

100

00:04:54,865  -->  00:04:57,764 line:15% 
Okay so let's fill this here up with
101

101

00:04:57,764  -->  00:04:59,615 line:15% 
whatever we already have.
102

102

00:04:59,615  -->  00:05:00,723 line:15% 
So prepare UI for changes,
103

103

00:05:00,723  -->  00:05:02,574 line:15% 
we don't have any UI methods just yet,
104

104

00:05:02,574  -->  00:05:07,314
but what we can do here is to create the new recipe object.
105

105

00:05:07,314  -->  00:05:11,189
And of course again we will put this in our state.
106

106

00:05:11,189  -->  00:05:13,376
So we already have to search inside of state
107

107

00:05:13,376  -->  00:05:17,011
and next we will put then the recipe.
108

108

00:05:17,011  -->  00:05:21,761
So state.recipe will be a new object based on the recipe.
109

109

00:05:22,986  -->  00:05:27,236
And of course, what we pass in here is then our ID.
110

110

00:05:29,309  -->  00:05:32,213 line:15% 
Next up, let's get the data from the server,
111

111

00:05:32,213  -->  00:05:34,921 line:15% 
and so we need to call get recipe, right?
112

112

00:05:34,921  -->  00:05:38,004 line:15% 
So that one is state.recipe.getRecipe
113

113

00:05:41,692  -->  00:05:45,325 line:15% 
Now of course we want this to happen asynchronously,
114

114

00:05:45,325  -->  00:05:48,714 line:15% 
so in the background and in a way that the rest of the code
115

115

00:05:48,714  -->  00:05:51,716 line:15% 
is only executed after we get back with the data.
116

116

00:05:51,716  -->  00:05:54,103 line:15% 
So we are going to use, of course, "await" here.
117

117

00:05:54,103  -->  00:05:56,321 line:15% 
And don't forget to then change the function
118

118

00:05:56,321  -->  00:05:58,043
to an async function.
119

119

00:05:58,043  -->  00:06:01,724
So yet another async await function here
120

120

00:06:01,724  -->  00:06:06,224 line:15% 
so that we can load our recipe data in the background.
121

121

00:06:07,827  -->  00:06:10,744 line:15% 
Next up, state.recipe.calcServings,
122

122

00:06:15,638  -->  00:06:18,138 line:15% 
all that starts with calcTime.
123

123

00:06:24,157  -->  00:06:28,528 line:15% 
Okay and finally we can then render the recipe into the UI.
124

124

00:06:28,528  -->  00:06:30,290 line:15% 
We can not do that just yet,
125

125

00:06:30,290  -->  00:06:34,001 line:15% 
but let's simply log the object, okay?
126

126

00:06:34,001  -->  00:06:36,584 line:15% 
So state.recipe because for now
127

127

00:06:38,009  -->  00:06:40,881 line:15% 
we don't have any UI methods just yet.
128

128

00:06:40,881  -->  00:06:43,019 line:15% 
So let's quickly go over that again.
129

129

00:06:43,019  -->  00:06:45,342
So we start by getting the ID from the URL
130

130

00:06:45,342  -->  00:06:47,770
by using window.location.hash
131

131

00:06:47,770  -->  00:06:51,088
and then replace the hash symbol with nothing
132

132

00:06:51,088  -->  00:06:52,633
so that instead of the hash
133

133

00:06:52,633  -->  00:06:54,410
we just end up with the actual ID that we need
134

134

00:06:54,410  -->  00:06:55,612
for the search.
135

135

00:06:55,612  -->  00:06:58,587
Then, we create a new recipe object based on a model
136

136

00:06:58,587  -->  00:07:00,634
that we coded up in the last lecture.
137

137

00:07:00,634  -->  00:07:02,200
Save it in our state
138

138

00:07:02,200  -->  00:07:04,288
just like we did with the search.
139

139

00:07:04,288  -->  00:07:07,666
So again all of our data is stored in once central place,
140

140

00:07:07,666  -->  00:07:08,972
which is the state,
141

141

00:07:08,972  -->  00:07:10,355
that we can then get access to.
142

142

00:07:10,355  -->  00:07:12,508
Then after that we call getRecipe here,
143

143

00:07:12,508  -->  00:07:15,384
which, due to the fact that it's an async function,
144

144

00:07:15,384  -->  00:07:17,286
will return a promise.
145

145

00:07:17,286  -->  00:07:19,576
And so therefore, in here we use await
146

146

00:07:19,576  -->  00:07:23,720
to wait for the promise to get back with the resolved value.
147

147

00:07:23,720  -->  00:07:26,037
So here the code will stop executing
148

148

00:07:26,037  -->  00:07:27,960
and then after that
149

149

00:07:27,960  -->  00:07:30,605
we will simply calculate the time, the servings,
150

150

00:07:30,605  -->  00:07:33,950 line:15% 
and log everything to the console.
151

151

00:07:33,950  -->  00:07:36,200
So let's test that one out.
152

152

00:07:37,992  -->  00:07:40,523
Searching for pizza again.
153

153

00:07:40,523  -->  00:07:42,883
And let's try this one, Pizza Dip.
154

154

00:07:42,883  -->  00:07:44,316 line:15% 
So we get the ID of course
155

155

00:07:44,316  -->  00:07:45,983 line:15% 
and then our recipe.
156

156

00:07:47,148  -->  00:07:50,233 line:15% 
And all the data is actually here.
157

157

00:07:50,233  -->  00:07:51,520 line:15% 
So that's amazing right?
158

158

00:07:51,520  -->  00:07:52,873
So we can, right now,
159

159

00:07:52,873  -->  00:07:55,325
select recipes from our search list
160

160

00:07:55,325  -->  00:07:59,586 line:15% 
and it will already display the data here in the console.
161

161

00:07:59,586  -->  00:08:01,419
So here's the next one
162

162

00:08:02,586  -->  00:08:04,412
and if we click another one
163

163

00:08:04,412  -->  00:08:06,383 line:15% 
then of course it will work as well.
164

164

00:08:06,383  -->  00:08:10,207 line:15% 
And so great, that part is already working.
165

165

00:08:10,207  -->  00:08:14,227 line:15% 
No imagine that we would reload this page here,
166

166

00:08:14,227  -->  00:08:15,767
then nothing happens,
167

167

00:08:15,767  -->  00:08:17,609
because again this only happens
168

168

00:08:17,609  -->  00:08:19,880
whenever the hash actually changes.
169

169

00:08:19,880  -->  00:08:21,474
And so we need to fix that,
170

170

00:08:21,474  -->  00:08:24,193
because imagine that the user saves this URL here,
171

171

00:08:24,193  -->  00:08:25,936
as a bookmark for example,
172

172

00:08:25,936  -->  00:08:28,910
and then when he comes back nothing happens really.
173

173

00:08:28,910  -->  00:08:33,081 line:15% 
And so what we need to do also is to add an event listener
174

174

00:08:33,081  -->  00:08:34,329 line:15% 
to the load event,
175

175

00:08:34,329  -->  00:08:37,927 line:15% 
which basically fires whenever the page is loaded.
176

176

00:08:37,927  -->  00:08:40,177 line:15% 
So window.addEventListener,
177

177

00:08:42,751  -->  00:08:45,168 line:15% 
load, and then controlRecipe.
178

178

00:08:49,235  -->  00:08:51,608 line:15% 
Now I promised you in the beginning of the video
179

179

00:08:51,608  -->  00:08:53,299 line:15% 
that I would show you how to basically,
180

180

00:08:53,299  -->  00:08:56,090 line:15% 
add the same event listener to different events.
181

181

00:08:56,090  -->  00:08:57,446 line:15% 
And that's useful here
182

182

00:08:57,446  -->  00:08:59,388 line:15% 
because were calling the same function here
183

183

00:08:59,388  -->  00:09:01,529 line:15% 
for these two events.
184

184

00:09:01,529  -->  00:09:03,759 line:15% 
So let me show that to you.
185

185

00:09:03,759  -->  00:09:05,260 line:15% 
And it's actually very simple,
186

186

00:09:05,260  -->  00:09:08,663 line:15% 
we just need to think a little bit about it.
187

187

00:09:08,663  -->  00:09:10,425 line:15% 
So let's comment out these two.
188

188

00:09:10,425  -->  00:09:13,639 line:15% 
And what I'm going to do, is to do an array
189

189

00:09:13,639  -->  00:09:15,472 line:15% 
with these two events.
190

190

00:09:16,791  -->  00:09:19,232 line:15% 
So hashchange and load.
191

191

00:09:19,232  -->  00:09:22,565 line:15% 
And then I will simply add a loop to it.
192

192

00:09:23,601  -->  00:09:27,934 line:15% 
So a forEach, where each of the elements is an event
193

193

00:09:29,120  -->  00:09:32,620 line:15% 
and I will then do window.addEventListener
194

194

00:09:34,221  -->  00:09:37,941 line:15% 
and then in here we will pass the event.
195

195

00:09:37,941  -->  00:09:40,191 line:15% 
So event and then of course
196

196

00:09:42,935  -->  00:09:44,768 line:15% 
Recipe, and that's it.
197

197

00:09:47,000  -->  00:09:49,514 line:15% 
So we went from two lines here
198

198

00:09:49,514  -->  00:09:51,075 line:15% 
to just one line of code.
199

199

00:09:51,075  -->  00:09:53,867 line:15% 
Now if we had like 10 lines with these events,
200

200

00:09:53,867  -->  00:09:56,645 line:15% 
then of course it would become even more useful.
201

201

00:09:56,645  -->  00:09:59,296 line:15% 
So let's get rid of this here,
202

202

00:09:59,296  -->  00:10:01,473 line:15% 
and I hope this made sense to you.
203

203

00:10:01,473  -->  00:10:05,507 line:15% 
So again we saved the strings for these two event types
204

204

00:10:05,507  -->  00:10:06,840 line:15% 
into an array
205

205

00:10:06,840  -->  00:10:08,709 line:15% 
and then looped over them
206

206

00:10:08,709  -->  00:10:10,519 line:15% 
and called window.eventListener
207

207

00:10:10,519  -->  00:10:13,796 line:15% 
for each of them passing in the corresponding event.
208

208

00:10:13,796  -->  00:10:16,620 line:15% 
So let's check it out now.
209

209

00:10:16,620  -->  00:10:18,931
So let's reload it
210

210

00:10:18,931  -->  00:10:20,834 line:15% 
and you see that now it's happening.
211

211

00:10:20,834  -->  00:10:24,021 line:15% 
So the load even is now doing its work here
212

212

00:10:24,021  -->  00:10:25,026 line:15% 
and it doesn't only work
213

213

00:10:25,026  -->  00:10:27,024 line:15% 
in case that the hash actually changes
214

214

00:10:27,024  -->  00:10:28,983 line:15% 
but also if the page loads.
215

215

00:10:28,983  -->  00:10:32,660
And so now it's even more important
216

216

00:10:32,660  -->  00:10:34,585
that we have that if statement
217

217

00:10:34,585  -->  00:10:37,141
which checks if there is actually an ID
218

218

00:10:37,141  -->  00:10:38,821
because right now there is not an ID.
219

219

00:10:38,821  -->  00:10:40,571
And so we, of course,
220

220

00:10:41,431  -->  00:10:43,872
don't want any of this here to happen.
221

221

00:10:43,872  -->  00:10:44,705
Now finally,
222

222

00:10:44,705  -->  00:10:46,590
and this is something that we didn't do
223

223

00:10:46,590  -->  00:10:47,841
in the other controller,
224

224

00:10:47,841  -->  00:10:50,211
is that this await here can of course go wrong.
225

225

00:10:50,211  -->  00:10:53,401
So right now we're assuming that this promise here
226

226

00:10:53,401  -->  00:10:54,848
will always resolve.
227

227

00:10:54,848  -->  00:10:56,489
But of course this can get rejected.
228

228

00:10:56,489  -->  00:11:00,391
So we actually talked about that before in the last lecture
229

229

00:11:00,391  -->  00:11:02,787
where I intentionally put a wrong key here.
230

230

00:11:02,787  -->  00:11:04,073
So in that case,
231

231

00:11:04,073  -->  00:11:05,771
the promise rejects.
232

232

00:11:05,771  -->  00:11:07,755
And this will of course then also have an effect here
233

233

00:11:07,755  -->  00:11:09,371
on this async await.
234

234

00:11:09,371  -->  00:11:11,657
So in order to handle that event here as well,
235

235

00:11:11,657  -->  00:11:14,407
let's add another try catch here.
236

236

00:11:17,032  -->  00:11:18,340 line:15% 
So we actually
237

237

00:11:18,340  -->  00:11:20,635 line:15% 
all of this we only want to happen
238

238

00:11:20,635  -->  00:11:24,052 line:15% 
in case that everything goes well, right?
239

239

00:11:29,770  -->  00:11:34,353 line:15% 
And so let's just alert like "Error processing recipe!"
240

240

00:11:41,007  -->  00:11:42,748 line:15% 
because of course we only want to render,
241

241

00:11:42,748  -->  00:11:46,073 line:15% 
for example, this recipe in case everything goes well
242

242

00:11:46,073  -->  00:11:49,130 line:15% 
with getting the data from the server.
243

243

00:11:49,130  -->  00:11:52,380
So let's introduce an error here again.
244

244

00:11:53,338  -->  00:11:57,338
So a wrong key which will then trigger an error.
245

245

00:12:04,428  -->  00:12:06,054
So.
246

246

00:12:06,054  -->  00:12:06,887
It says click on one of these,
247

247

00:12:06,887  -->  00:12:10,783
and of course it says "something went wrong"
248

248

00:12:10,783  -->  00:12:13,326
which comes from the first catch.
249

249

00:12:13,326  -->  00:12:15,812
And then again "Error processing recipe!"
250

250

00:12:15,812  -->  00:12:18,366
which comes from the second catch.
251

251

00:12:18,366  -->  00:12:22,032
So basically the first one comes from this
252

252

00:12:22,032  -->  00:12:23,430
catch block here.
253

253

00:12:23,430  -->  00:12:25,869
And so then this entire promise here will reject.
254

254

00:12:25,869  -->  00:12:28,656
And so we will then also this catch block here,
255

255

00:12:28,656  -->  00:12:32,073
which will then trigger the second alert.
256

256

00:12:34,548  -->  00:12:37,217
Of course, let's go back to the way it was before.
257

257

00:12:37,217  -->  00:12:40,388
And the error handling could of course be a bit better.
258

258

00:12:40,388  -->  00:12:42,027
Instead of having these alerts,
259

259

00:12:42,027  -->  00:12:44,339
we should add some messages to the user interface
260

260

00:12:44,339  -->  00:12:47,663
but that's a bit too much for this simple example,
261

261

00:12:47,663  -->  00:12:49,857
and so I'm not going to go that way.
262

262

00:12:49,857  -->  00:12:51,574
Of course you can implement that yourself
263

263

00:12:51,574  -->  00:12:53,721
if you feel like it.
264

264

00:12:53,721  -->  00:12:55,848
So that's it for this recipe control.
265

265

00:12:55,848  -->  00:12:57,415
Now since were at it,
266

266

00:12:57,415  -->  00:12:59,200
let's implement the same thing here
267

267

00:12:59,200  -->  00:13:00,859
in this search controller,
268

268

00:13:00,859  -->  00:13:02,565
because we didn't do it up here.
269

269

00:13:02,565  -->  00:13:04,681
So again, we only want to render the results here
270

270

00:13:04,681  -->  00:13:06,100
in case everything goes right
271

271

00:13:06,100  -->  00:13:10,100
with getting the search results from the server.
272

272

00:13:12,232  -->  00:13:13,065
So try.
273

273

00:13:16,199  -->  00:13:18,532
And let's move all of these.
274

274

00:13:21,918  -->  00:13:23,585
And catch the error.
275

275

00:13:36,214  -->  00:13:38,489
And something else that we want to do here then,
276

276

00:13:38,489  -->  00:13:40,906
is to still clear the loader.
277

277

00:13:41,882  -->  00:13:44,607
So we don't want to render the results,
278

278

00:13:44,607  -->  00:13:47,128
but we still want the loader to go away
279

279

00:13:47,128  -->  00:13:49,424
in case that there is an error.
280

280

00:13:49,424  -->  00:13:51,174
So that should be it.
281

281

00:13:53,278  -->  00:13:55,037
Everything is working.
282

282

00:13:55,037  -->  00:13:56,421
And so next up,
283

283

00:13:56,421  -->  00:13:59,005
let's actually continue building our model here
284

284

00:13:59,005  -->  00:14:01,627
because now, we need to process these ingredients.
285

285

00:14:01,627  -->  00:14:03,948
Right now it comes back as an array
286

286

00:14:03,948  -->  00:14:05,539
with just 11 strings,
287

287

00:14:05,539  -->  00:14:07,278
but we want this to be a bit better.
288

288

00:14:07,278  -->  00:14:11,945
So in the next lecture we're going to take care of that.
