WEBVTT
1
1

00:00:01.100  -->  00:00:01.933
<v Instructor>So we're now ready</v>
2

2

00:00:01.933  -->  00:00:04.600
to start working on the Forkify project
3

3

00:00:04.600  -->  00:00:06.640
and the first step will be to start using
4

4

00:00:06.640  -->  00:00:10.060
the underlying recipe API and so we will use
5

5

00:00:10.060  -->  00:00:11.950
a real world API here,
6

6

00:00:11.950  -->  00:00:14.780
probably used by thousands of services out there,
7

7

00:00:14.780  -->  00:00:18.080
based on what we learned in the last section of course.
8

8

00:00:18.080  -->  00:00:20.050
Also, you will learn about the content
9

9

00:00:20.050  -->  00:00:22.513
of API keys and why we need them.
10

10

00:00:23.890  -->  00:00:25.580
So the API that we're gonna be using
11

11

00:00:25.580  -->  00:00:27.760
is called Food Two Fork dot com.
12

12

00:00:27.760  -->  00:00:30.570
So head over to this website here
13

13

00:00:30.570  -->  00:00:35.570
and then from here we can use this recipe API.
14

14

00:00:35.730  -->  00:00:37.067
Okay, and that brings us to
15

15

00:00:37.067  -->  00:00:40.570
the documentation page of this API.
16

16

00:00:40.570  -->  00:00:43.540
So this API allows us to do two types of requests.
17

17

00:00:43.540  -->  00:00:45.789
First off we can search for recipes
18

18

00:00:45.789  -->  00:00:48.770
and second we can then get data
19

19

00:00:48.770  -->  00:00:51.020
about one specific recipe.
20

20

00:00:51.020  -->  00:00:53.030
So in this first the search request
21

21

00:00:53.030  -->  00:00:56.100
it's going to return a list of 30 recipes
22

22

00:00:56.100  -->  00:00:57.440
and from there we can then select
23

23

00:00:57.440  -->  00:00:59.710
one of the IDs and then make a request
24

24

00:00:59.710  -->  00:01:04.320
for that specific recipe during the second end point.
25

25

00:01:04.320  -->  00:01:05.580
So we have the search
26

26

00:01:05.580  -->  00:01:09.460
and to get end points of this API, okay.
27

27

00:01:09.460  -->  00:01:11.053
Then down here we see the parameters
28

28

00:01:11.053  -->  00:01:14.510
that we have to include in the API request
29

29

00:01:14.510  -->  00:01:17.110
but more on that a bit later.
30

30

00:01:17.110  -->  00:01:19.050
But I also wanted to show you is that
31

31

00:01:19.050  -->  00:01:22.090
we have different plans here.
32

32

00:01:22.090  -->  00:01:23.690
So the first one is the free plan
33

33

00:01:23.690  -->  00:01:25.710
and that's the one that we're gonna be using
34

34

00:01:25.710  -->  00:01:29.060
so we can do 500 API calls per day
35

35

00:01:29.060  -->  00:01:31.440
and then you can also pay if you want
36

36

00:01:31.440  -->  00:01:33.210
and we always have to have an attribution
37

37

00:01:33.210  -->  00:01:34.913
whenever using the free plan
38

38

00:01:34.913  -->  00:01:37.600
saying powered by Food Two Fork
39

39

00:01:37.600  -->  00:01:41.970
and that's why we have it down here actually in our app.
40

40

00:01:41.970  -->  00:01:44.840
Okay, so now please go ahead
41

41

00:01:44.840  -->  00:01:48.320
and create your own account here
42

42

00:01:48.320  -->  00:01:50.730
because that's how you're gonna get the API key
43

43

00:01:50.730  -->  00:01:53.530
that you need in order to make this API work.
44

44

00:01:53.530  -->  00:01:55.330
So I already created this account
45

45

00:01:55.330  -->  00:01:56.980
and so I just need to log in here
46

46

00:01:59.465  -->  00:02:02.730
and then I can see my API key right here.
47

47

00:02:02.730  -->  00:02:04.580
So please go ahead and create your own account
48

48

00:02:04.580  -->  00:02:07.080
because you should use your own API key
49

49

00:02:07.080  -->  00:02:08.660
instead of using mine.
50

50

00:02:08.660  -->  00:02:09.790
Now you might be wondering what
51

51

00:02:09.790  -->  00:02:13.140
an API key actually is and so let me explain it to you.
52

52

00:02:13.140  -->  00:02:15.500
So an API key it's like a password
53

53

00:02:15.500  -->  00:02:16.670
that's given to each user.
54

54

00:02:16.670  -->  00:02:19.410
It's like a unique ID that each user
55

55

00:02:19.410  -->  00:02:21.540
can use in order to make requests
56

56

00:02:21.540  -->  00:02:23.790
and so that the API can track
57

57

00:02:23.790  -->  00:02:26.330
how many requests you make per day.
58

58

00:02:26.330  -->  00:02:28.377
So remember that here in the free plan
59

59

00:02:28.377  -->  00:02:30.870
you can only do 500 requests per day
60

60

00:02:30.870  -->  00:02:32.460
and so they use this API key here
61

61

00:02:32.460  -->  00:02:34.890
in order to track that, okay.
62

62

00:02:34.890  -->  00:02:36.980
So I'm gonna copy it and then paste it
63

63

00:02:36.980  -->  00:02:39.920
here actually in this file here
64

64

00:02:39.920  -->  00:02:44.170
just so we have it here in the index dot js file
65

65

00:02:44.170  -->  00:02:47.080
where we're gonna make our requests in a second.
66

66

00:02:47.080  -->  00:02:49.870
Okay, now let's go back here to the API itself,
67

67

00:02:49.870  -->  00:02:51.629
the documentation, in order to learn
68

68

00:02:51.629  -->  00:02:55.359
how we can actually do the search requests.
69

69

00:02:55.359  -->  00:02:57.643
So this is the URL that we have to use
70

70

00:02:57.643  -->  00:02:59.650
to make the request to and then down here
71

71

00:02:59.650  -->  00:03:01.450
we have to pass in the key,
72

72

00:03:01.450  -->  00:03:03.660
so the API key that we just got,
73

73

00:03:03.660  -->  00:03:05.730
and then also the search query.
74

74

00:03:05.730  -->  00:03:09.460
Then we can also pass in the store parameter
75

75

00:03:09.460  -->  00:03:10.293
and the page parameter.
76

76

00:03:10.293  -->  00:03:12.370
But we're going to talk about these later
77

77

00:03:12.370  -->  00:03:13.937
but for now we just need the key
78

78

00:03:13.937  -->  00:03:17.140
and then of course also a search query.
79

79

00:03:17.140  -->  00:03:19.710
Okay, so the URL is this one
80

80

00:03:19.710  -->  00:03:23.263
so let me also copy it over here to our code editor.
81

81

00:03:25.540  -->  00:03:27.240
Okay and now that we have all this
82

82

00:03:27.240  -->  00:03:30.170
let's actually try to experiment with this API.
83

83

00:03:30.170  -->  00:03:32.410
So I'm not really building the app just yet
84

84

00:03:32.410  -->  00:03:34.560
but just writing a simple function here
85

85

00:03:34.560  -->  00:03:38.760
to experiment and try out the API, okay.
86

86

00:03:38.760  -->  00:03:40.793
So let me write an async function.
87

87

00:03:45.550  -->  00:03:48.450
So get results for get search results
88

88

00:03:48.450  -->  00:03:53.450
and the parameter is let's pass in a query, okay.
89

89

00:03:53.580  -->  00:03:57.470
So here we have to space and then down here
90

90

00:03:57.470  -->  00:04:01.873
we can then call this async function, okay.
91

91

00:04:02.890  -->  00:04:05.630
Now about the HTTP request that we're going to make
92

92

00:04:05.630  -->  00:04:08.770
for the ajax call in the last section
93

93

00:04:08.770  -->  00:04:11.600
we used the fetch function like this, right,
94

94

00:04:11.600  -->  00:04:14.150
now there are some problems with the fetch function
95

95

00:04:14.150  -->  00:04:15.700
and I actually mentioned before
96

96

00:04:15.700  -->  00:04:17.780
which is that it doesn't really work
97

97

00:04:17.780  -->  00:04:19.710
in all browsers just yet.
98

98

00:04:19.710  -->  00:04:21.080
So in the modern browser, of course,
99

99

00:04:21.080  -->  00:04:22.440
it's going to work just fine
100

100

00:04:22.440  -->  00:04:24.640
but if you get on a very old browser,
101

101

00:04:24.640  -->  00:04:26.820
then it might not recognize fetch
102

102

00:04:26.820  -->  00:04:28.980
and that's actually a problem.
103

103

00:04:28.980  -->  00:04:30.400
And so instead what we're going to do
104

104

00:04:30.400  -->  00:04:33.060
is use a very popular HTTP request
105

105

00:04:33.060  -->  00:04:36.320
library called axios, okay,
106

106

00:04:36.320  -->  00:04:38.880
so in order to use axios we need
107

107

00:04:38.880  -->  00:04:42.500
to install it and get it from NPM, okay.
108

108

00:04:42.500  -->  00:04:44.350
So let's use our terminal again here.
109

109

00:04:46.240  -->  00:04:49.903
Let's clear this here and do NPM install axios.
110

110

00:04:53.227  -->  00:04:54.640
Okay, and then save and again
111

111

00:04:54.640  -->  00:04:55.950
it's not saved as because
112

112

00:04:55.950  -->  00:04:57.500
this is not a development tool
113

113

00:04:57.500  -->  00:05:00.990
it is really code that we want to use in our app.
114

114

00:05:00.990  -->  00:05:05.290
Okay, so let's wait for it and there you go.
115

115

00:05:05.290  -->  00:05:08.660
Let's just confirm in our package dot json file
116

116

00:05:08.660  -->  00:05:10.033
and it did, here we go.
117

117

00:05:12.500  -->  00:05:15.520
So we installed the package and now let's import it
118

118

00:05:15.520  -->  00:05:17.410
and importing packages actually
119

119

00:05:17.410  -->  00:05:19.350
works almost the exact same way
120

120

00:05:19.350  -->  00:05:21.920
as importing our own modules
121

121

00:05:21.920  -->  00:05:24.310
and so again we use the import keyword,
122

122

00:05:24.310  -->  00:05:29.310
so import axios from and now comes the name of our package.
123

123

00:05:32.110  -->  00:05:33.450
So in the last lecture I showed you
124

124

00:05:33.450  -->  00:05:34.992
that we have to specify the path
125

125

00:05:34.992  -->  00:05:37.940
to the module that we want to include, right.
126

126

00:05:37.940  -->  00:05:39.950
Now with this NPM modules that we installed
127

127

00:05:39.950  -->  00:05:42.070
from an external source we don't have to do that.
128

128

00:05:42.070  -->  00:05:43.610
We actually, all we have to do
129

129

00:05:43.610  -->  00:05:46.720
is to specify the name of the package.
130

130

00:05:46.720  -->  00:05:49.240
So all we have to do is to say axios
131

131

00:05:49.240  -->  00:05:52.000
as it appears here in the dependencies.
132

132

00:05:52.000  -->  00:05:53.910
So it's axios here and so
133

133

00:05:53.910  -->  00:05:57.360
we call it axios here in this import, okay,
134

134

00:05:57.360  -->  00:05:58.910
and then as I hover over it,
135

135

00:05:58.910  -->  00:06:00.760
you actually see the entire path
136

136

00:06:00.760  -->  00:06:04.030
which the code editor actually figures out on its own, okay,
137

137

00:06:04.030  -->  00:06:06.270
and so that's where the package lives
138

138

00:06:06.270  -->  00:06:09.110
and webpack when bundling our modules together
139

139

00:06:09.110  -->  00:06:11.970
will then automatically also figure out where it is.
140

140

00:06:11.970  -->  00:06:13.300
Then here we could give it actually
141

141

00:06:13.300  -->  00:06:16.060
any name that we wanted, we could do just A,
142

142

00:06:16.060  -->  00:06:17.380
okay, but it's like a convention,
143

143

00:06:17.380  -->  00:06:19.450
like a standard to give it
144

144

00:06:19.450  -->  00:06:21.840
the same name as the package name.
145

145

00:06:21.840  -->  00:06:26.200
Okay, so let's now use axios to do our ajax call
146

146

00:06:26.200  -->  00:06:29.123
and it actually works the exact same way as fetch.
147

147

00:06:30.000  -->  00:06:32.680
Okay, so the package just gives us access
148

148

00:06:32.680  -->  00:06:34.740
to this axios function which will
149

149

00:06:34.740  -->  00:06:37.530
then do our HTTP requests, okay,
150

150

00:06:37.530  -->  00:06:40.030
and this one here actually works on all browsers
151

151

00:06:40.030  -->  00:06:42.850
unlike the fetch API that I showed you before,
152

152

00:06:42.850  -->  00:06:44.230
there are also other things
153

153

00:06:44.230  -->  00:06:46.160
that this one here does better than fetch,
154

154

00:06:46.160  -->  00:06:48.870
for example, it automatically returns json
155

155

00:06:48.870  -->  00:06:50.580
and with fetch, remember we had to do it
156

156

00:06:50.580  -->  00:06:53.060
like in two steps, first we had to wait
157

157

00:06:53.060  -->  00:06:55.500
for the data to come back and then we had to wait
158

158

00:06:55.500  -->  00:06:57.020
for it to convert to json.
159

159

00:06:57.020  -->  00:06:58.670
So we had this two step process
160

160

00:06:58.670  -->  00:07:00.890
and with axios it happens all in one step
161

161

00:07:00.890  -->  00:07:03.056
and that's much better and also
162

162

00:07:03.056  -->  00:07:06.925
axios is a bit better at error handling than fetch
163

163

00:07:06.925  -->  00:07:10.210
and I'm gonna show you that in a second as well.
164

164

00:07:10.210  -->  00:07:14.930
So axios and then in here we have to pass the API URL.
165

165

00:07:14.930  -->  00:07:17.070
Okay, so let's copy this one
166

166

00:07:18.800  -->  00:07:20.190
to a template string here
167

167

00:07:20.190  -->  00:07:23.960
so that we can now include the query, okay.
168

168

00:07:23.960  -->  00:07:26.970
So let's see how that works here in the documentation.
169

169

00:07:26.970  -->  00:07:29.860
So for the key we have the key parameter,
170

170

00:07:29.860  -->  00:07:31.730
as you see here, and for the query
171

171

00:07:31.730  -->  00:07:34.640
we have the Q parameter, okay,
172

172

00:07:34.640  -->  00:07:36.840
and so how it works is like this.
173

173

00:07:36.840  -->  00:07:38.410
We have search and then in order
174

174

00:07:38.410  -->  00:07:40.370
to add these parameters to the URL
175

175

00:07:40.370  -->  00:07:42.480
we have a question sign and then
176

176

00:07:42.480  -->  00:07:43.630
the name of the parameters.
177

177

00:07:43.630  -->  00:07:47.690
So key is okay and let's actually save the key
178

178

00:07:47.690  -->  00:07:52.383
here to a constant, so const key
179

179

00:07:54.210  -->  00:07:57.440
and I'm going to cut it from here and paste it up here
180

180

00:07:58.760  -->  00:08:00.660
and of course it needs to be a string.
181

181

00:08:04.800  -->  00:08:07.237
So putting the key here and then
182

182

00:08:07.237  -->  00:08:09.010
for the next one is Q, remember,
183

183

00:08:09.010  -->  00:08:10.733
so for the query we use Q.
184

184

00:08:13.740  -->  00:08:15.590
Right, so again this Q here is coming
185

185

00:08:15.590  -->  00:08:19.783
from the API documentation, so this Q here, right.
186

186

00:08:20.850  -->  00:08:23.820
Okay, so this here will do the ajax call
187

187

00:08:23.820  -->  00:08:27.010
and just like fetch it's going to return a promise
188

188

00:08:27.010  -->  00:08:29.210
and since we're using async await here,
189

189

00:08:29.210  -->  00:08:32.290
let's then await this result
190

190

00:08:32.290  -->  00:08:34.903
and save it to a constant.
191

191

00:08:37.850  -->  00:08:40.795
So constant result and then await
192

192

00:08:40.795  -->  00:08:43.380
the results of this promise.
193

193

00:08:43.380  -->  00:08:45.710
Okay, so remember that's how we handle
194

194

00:08:45.710  -->  00:08:48.600
promises with async await, right.
195

195

00:08:48.600  -->  00:08:51.320
So the results value of the promise
196

196

00:08:51.320  -->  00:08:53.820
that we start here will then be saved
197

197

00:08:53.820  -->  00:08:55.853
into this res variable.
198

198

00:08:57.110  -->  00:08:59.840
Okay, and now just take a look at what we get
199

199

00:08:59.840  -->  00:09:01.940
back from this ajax call,
200

200

00:09:01.940  -->  00:09:03.640
let's simply log it to the console
201

201

00:09:05.950  -->  00:09:08.053
and that's it for now.
202

202

00:09:08.930  -->  00:09:11.160
So let's actually try it out
203

203

00:09:11.160  -->  00:09:12.670
and if we take a look at our terminal,
204

204

00:09:12.670  -->  00:09:14.730
you'll see that is has probably already
205

205

00:09:14.730  -->  00:09:16.780
built our bundle and yeah it did,
206

206

00:09:16.780  -->  00:09:19.890
so this is actually the time of recording this video here
207

207

00:09:19.890  -->  00:09:23.570
and so right now it just bundled this module here together.
208

208

00:09:23.570  -->  00:09:25.720
Okay, so let's take a look at our console
209

209

00:09:25.720  -->  00:09:29.310
and here we have this error again that we had before.
210

210

00:09:29.310  -->  00:09:31.410
So this again the error where some domains
211

211

00:09:31.410  -->  00:09:34.770
don't allow requests coming from other domains, okay.
212

212

00:09:34.770  -->  00:09:37.210
So that means that the authors
213

213

00:09:37.210  -->  00:09:39.330
of this API they have not really implemented
214

214

00:09:39.330  -->  00:09:41.750
the cors into their API
215

215

00:09:41.750  -->  00:09:43.410
and so we need to get around that again
216

216

00:09:43.410  -->  00:09:45.923
using the cross origin me proxy.
217

217

00:09:47.350  -->  00:09:49.800
Okay, so it's this one here.
218

218

00:09:49.800  -->  00:09:51.110
Let me show it to you again.
219

219

00:09:51.110  -->  00:09:53.070
So all we have to do is to really
220

220

00:09:53.070  -->  00:09:57.770
prefix our URL with this URL here, okay.
221

221

00:09:57.770  -->  00:09:59.450
So the cross origin dot me.
222

222

00:09:59.450  -->  00:10:01.860
So let's do that here and again
223

223

00:10:01.860  -->  00:10:04.220
I'm going to create a constant for that
224

224

00:10:07.980  -->  00:10:11.170
so this proxy URL and now I'm just
225

225

00:10:11.170  -->  00:10:14.520
going to plug it in here so proxy
226

226

00:10:15.540  -->  00:10:17.823
and so let's see what happens now.
227

227

00:10:19.520  -->  00:10:21.460
And we're still getting an error here.
228

228

00:10:21.460  -->  00:10:23.250
You see it's a 403 error,
229

229

00:10:23.250  -->  00:10:26.740
which means that we're not allowed to access the resource
230

230

00:10:26.740  -->  00:10:30.470
and so maybe we need to try another proxy here
231

231

00:10:30.470  -->  00:10:34.330
so let's just search for cors proxy here
232

232

00:10:35.580  -->  00:10:37.300
and the one that I'm gonna use,
233

233

00:10:37.300  -->  00:10:42.240
which I've used before also, is this cors Anywhere.
234

234

00:10:42.240  -->  00:10:43.850
Okay, so let's just copy this one
235

235

00:10:43.850  -->  00:10:46.012
and it works just in the exact same way
236

236

00:10:46.012  -->  00:10:50.490
we just need to replace this proxy name
237

237

00:10:50.490  -->  00:10:53.200
that we had and put this one.
238

238

00:10:53.200  -->  00:10:56.480
Okay, and so now our request is going through
239

239

00:10:56.480  -->  00:10:59.267
this server here so let's try that out again
240

240

00:10:59.267  -->  00:11:02.493
and we also forgot to add our search query.
241

241

00:11:03.800  -->  00:11:05.970
So let's add pizza here, again,
242

242

00:11:05.970  -->  00:11:08.253
and try it out again.
243

243

00:11:09.160  -->  00:11:13.890
And, alright, so we now finally got our response
244

244

00:11:13.890  -->  00:11:15.750
so let's try to open up this object,
245

245

00:11:15.750  -->  00:11:18.330
take a look at it, you can see
246

246

00:11:18.330  -->  00:11:20.130
there's a lot of stuff here,
247

247

00:11:20.130  -->  00:11:22.958
theses are the headers of the HTTP request
248

248

00:11:22.958  -->  00:11:27.040
then here we have the request itself
249

249

00:11:27.040  -->  00:11:29.890
but what really matters is the data really here.
250

250

00:11:29.890  -->  00:11:31.230
So we have the data here
251

251

00:11:31.230  -->  00:11:32.820
then we have the con property
252

252

00:11:32.820  -->  00:11:34.890
and then the recipes array
253

253

00:11:34.890  -->  00:11:37.420
and this is what we're really looking for, right.
254

254

00:11:37.420  -->  00:11:40.740
So you see that we already got our 30 recipes here
255

255

00:11:40.740  -->  00:11:43.770
all in this recipes array, okay.
256

256

00:11:43.770  -->  00:11:46.840
So let's actually go back and say
257

257

00:11:46.840  -->  00:11:49.970
that we only want to display these recipes.
258

258

00:11:49.970  -->  00:11:51.570
So let's create a variable here,
259

259

00:11:54.480  -->  00:11:59.480
const recipes gets result dot data dot recipes
260

260

00:12:00.560  -->  00:12:03.653
and so that's logged just the recipes, okay.
261

261

00:12:05.940  -->  00:12:07.910
And so let's wait for it.
262

262

00:12:07.910  -->  00:12:09.450
So this time that we're waiting here
263

263

00:12:09.450  -->  00:12:11.510
is the time that it takes for the ajax call
264

264

00:12:11.510  -->  00:12:13.550
to come back with the results.
265

265

00:12:13.550  -->  00:12:15.800
So here we have all of our recipes.
266

266

00:12:15.800  -->  00:12:17.620
So you see that we have a publisher,
267

267

00:12:17.620  -->  00:12:18.890
let's open it up here.
268

268

00:12:18.890  -->  00:12:22.480
So we have the URL on Food Two Fork,
269

269

00:12:22.480  -->  00:12:25.260
we have an image, we have a publisher,
270

270

00:12:25.260  -->  00:12:26.622
and this is the ID that we're gonna need
271

271

00:12:26.622  -->  00:12:29.440
to use the second end point of the API,
272

272

00:12:29.440  -->  00:12:31.490
which will be to search for recipes
273

273

00:12:31.490  -->  00:12:33.800
and then we can get even more details
274

274

00:12:33.800  -->  00:12:35.560
about the recipe like ingredients,
275

275

00:12:35.560  -->  00:12:37.380
and all that good stuff that we need
276

276

00:12:37.380  -->  00:12:38.920
to display our recipes then here
277

277

00:12:38.920  -->  00:12:41.620
in the middle of the app, right.
278

278

00:12:41.620  -->  00:12:44.520
So this already works, let's now talk a bit
279

279

00:12:44.520  -->  00:12:45.720
about the error handling.
280

280

00:12:45.720  -->  00:12:48.710
So let's say that we put an invalid key here.
281

281

00:12:48.710  -->  00:12:50.100
So let's just add something weird here
282

282

00:12:50.100  -->  00:12:52.640
to the beginning of the key, let's try it again,
283

283

00:12:52.640  -->  00:12:54.660
and we'll then probably get back with an error.
284

284

00:12:54.660  -->  00:12:58.200
So again we see the forbidden status code here, right?
285

285

00:12:58.200  -->  00:13:00.660
And so let's now handle these errors
286

286

00:13:00.660  -->  00:13:01.794
and remember we have to do it
287

287

00:13:01.794  -->  00:13:05.030
using the try catch statement.
288

288

00:13:05.030  -->  00:13:08.323
So we want the code to try if this piece here works.
289

289

00:13:11.150  -->  00:13:12.033
So try,
290

290

00:13:15.910  -->  00:13:17.563
and this one actually as well,
291

291

00:13:19.630  -->  00:13:21.843
and then catch any error that may occur
292

292

00:13:21.843  -->  00:13:26.510
and let's alert it in this example, okay.
293

293

00:13:26.510  -->  00:13:30.770
So here we need to call it error for example
294

294

00:13:33.500  -->  00:13:35.230
and then log it to the console
295

295

00:13:35.230  -->  00:13:37.890
or actually alert it into its own window.
296

296

00:13:37.890  -->  00:13:40.483
So let's try that out now and see what happens.
297

297

00:13:42.680  -->  00:13:44.740
And here we go, so the request failed
298

298

00:13:44.740  -->  00:13:46.290
with a status code of 403
299

299

00:13:47.150  -->  00:13:48.950
and if we had done the same ajax request
300

300

00:13:48.950  -->  00:13:50.830
with fetch instead of axios,
301

301

00:13:50.830  -->  00:13:53.120
it'll probably not have catched the error
302

302

00:13:53.120  -->  00:13:55.420
because again error handling works a bit different
303

303

00:13:55.420  -->  00:13:57.077
in fetch than it does in axios
304

304

00:13:57.077  -->  00:13:59.420
and axios is way more intuitive
305

305

00:13:59.420  -->  00:14:00.987
and better in my opinion, okay,
306

306

00:14:00.987  -->  00:14:03.140
and so that's why I'm always using axios
307

307

00:14:03.140  -->  00:14:06.630
instead of the native fetch method, okay,
308

308

00:14:06.630  -->  00:14:08.190
but anyway of course we want to go back
309

309

00:14:08.190  -->  00:14:11.780
to what we had before, get rid of this,
310

310

00:14:11.780  -->  00:14:14.083
we can also get rid of this piece of code,
311

311

00:14:14.083  -->  00:14:16.210
it's not really necessary,
312

312

00:14:16.210  -->  00:14:19.561
and so one last time let's try it out if it works
313

313

00:14:19.561  -->  00:14:22.290
and it did, we get back our recipes
314

314

00:14:22.290  -->  00:14:24.740
and you also see that they're all about pizza here, right,
315

315

00:14:24.740  -->  00:14:26.760
so it always says pizza.
316

316

00:14:26.760  -->  00:14:30.843
Let's try something like tomato pasta,
317

317

00:14:32.040  -->  00:14:33.680
come back here, now it takes some time
318

318

00:14:33.680  -->  00:14:34.983
to get the data from the server
319

319

00:14:34.983  -->  00:14:39.210
and now they will be all about pasta.
320

320

00:14:39.210  -->  00:14:41.550
So pasta and tomato, so you see that both
321

321

00:14:41.550  -->  00:14:45.780
are now here in the title, so pasta salad tomatoes
322

322

00:14:45.780  -->  00:14:49.060
and so, yeah, this API's actually working now
323

323

00:14:49.060  -->  00:14:51.270
and so right now we are ready to start
324

324

00:14:51.270  -->  00:14:53.370
building this beautiful app here
325

325

00:14:53.370  -->  00:14:55.060
using this underlying Food Two Fork
326

326

00:14:55.060  -->  00:14:56.573
API that we just explored.
