WEBVTT

202
1

00:10:31.209  -->  00:10:33.873
and then take the last three parts, right?
203

2

00:10:33.873  -->  00:10:35.206
So, really easy.
204

3

00:10:37.489  -->  00:10:39.489
So we can add the comma,
205

4

00:10:41.126  -->  00:10:44.478
and then take another substring.
206

5

00:10:44.478  -->  00:10:48.645
So int.substring, and now we want to start at position 1,
207

6

00:10:50.987  -->  00:10:53.487
and read three numbers, right?
208

7

00:10:55.567  -->  00:10:57.424
So let's see, in this case,
209

8

00:10:57.424  -->  00:11:00.776
we will start at position 1, and then read three numbers.
210

9

00:11:00.776  -->  00:11:02.359
One, two and three.
211

10

00:11:03.336  -->  00:11:07.003
So the result of this, if the input is 2310,
212

11

00:11:09.360  -->  00:11:11.943
then the result would be 2,310.
213

12

00:11:17.176  -->  00:11:18.936
So it makes sense?
214

13

00:11:18.936  -->  00:11:21.761
So this is exactly what we want, right?
215

14

00:11:21.761  -->  00:11:23.355
Well, not really,
216

15

00:11:23.355  -->  00:11:28.180
because imagine that the number would not be 2310,
217

16

00:11:28.180  -->  00:11:29.847
but let's say 23510.
218

17

00:11:32.232  -->  00:11:36.399
Then the output would be simply 2,3510, so a comma here.
219

18

00:11:40.124  -->  00:11:41.498
So this would be the output,
220

19

00:11:41.498  -->  00:11:42.898
and that's not what we want, right?
221

20

00:11:42.898  -->  00:11:45.898
We want the comma in here, not here.
222

21

00:11:46.951  -->  00:11:50.583
So we cannot simply say that we want to read 1 here,
223

22

00:11:50.583  -->  00:11:52.270
and then from 1 to 3.
224

23

00:11:52.270  -->  00:11:54.072
So these numbers are hard coded,
225

24

00:11:54.072  -->  00:11:57.448
but we actually want to make them more dynamic.
226

25

00:11:57.448  -->  00:11:59.735
The way we do it is to, again,
227

26

00:11:59.735  -->  00:12:02.277
use the length property of the string.
228

27

00:12:02.277  -->  00:12:06.444
If we say int.length - 3, then it's gonna work.
229

28

00:12:09.042  -->  00:12:10.730
Let me show you why.
230

29

00:12:10.730  -->  00:12:14.897
So let's go back to this first case here, with 2310.
231

30

00:12:15.956  -->  00:12:17.389
The length would be four,
232

31

00:12:17.389  -->  00:12:19.989
and then minus three would be one, right?
233

32

00:12:19.989  -->  00:12:23.208
And then we would have the one that we had before.
234

33

00:12:23.208  -->  00:12:27.000
Now, if the number would be this, so 23510,
235

34

00:12:27.000  -->  00:12:29.104
then the length would be five,
236

35

00:12:29.104  -->  00:12:31.208
and five minus three would be two,
237

36

00:12:31.208  -->  00:12:33.958
and then the comma would be here.
238

37

00:12:35.017  -->  00:12:37.976
So this is what we need, right?
239

38

00:12:37.976  -->  00:12:40.640
Then we also need to change it here.
240

39

00:12:40.640  -->  00:12:44.807
So we already know that this is int.length - 3,
241

40

00:12:48.104  -->  00:12:48.937
and then we want it
242

41

00:12:48.937  -->  00:12:51.677
all the way to the end of the string, right?
243

42

00:12:51.677  -->  00:12:53.751
At the end of the string is, of course,
244

43

00:12:53.751  -->  00:12:56.418
simply the length of the string.
245

44

00:12:57.909  -->  00:13:00.548
Now this is gonna work for all of the cases,
246

45

00:13:00.548  -->  00:13:02.308
so let's see with this one.
247

46

00:13:02.308  -->  00:13:06.172
The length is five, and if we start at five, minus three,
248

47

00:13:06.172  -->  00:13:07.428
we start at position two.
249

48

00:13:07.428  -->  00:13:11.002
So zero, one, two, which is here,
250

49

00:13:11.002  -->  00:13:14.282
and then we read one, two and three.
251

50

00:13:14.282  -->  00:13:16.402
And so actually, in here,
252

51

00:13:16.402  -->  00:13:19.491
it should not be this, it would be three.
253

52

00:13:19.491  -->  00:13:21.204
So now, it's correct.
254

53

00:13:21.204  -->  00:13:23.274
So this now works with any number
255

54

00:13:23.274  -->  00:13:25.516
that we're gonna input in here.
256

55

00:13:25.516  -->  00:13:29.373
And with this, we also followed this comma rule here.
257

56

00:13:29.373  -->  00:13:30.923
Now, all we have to do
258

57

00:13:30.923  -->  00:13:35.100
is to put the plus or minus sign in front of the number,
259

58

00:13:35.100  -->  00:13:36.850
so let's remove this,
260

59

00:13:38.429  -->  00:13:40.596
and we can now use the ternary operator,
261

60

00:13:40.596  -->  00:13:42.748
instead of using the if statement.
262

61

00:13:42.748  -->  00:13:45.498
So let's say, if the type is exp,
263

62

00:13:49.340  -->  00:13:52.423
then the sign should be minus, right?
264

63

00:13:53.260  -->  00:13:57.861
Because an expense is minus, so it's negative.
265

64

00:13:57.861  -->  00:13:59.477
So declaring the variable,
266

65

00:13:59.477  -->  00:14:03.644
and if it's not, then the sign is gonna be a plus.
267

66

00:14:05.743  -->  00:14:06.868
And that's it.
268

67

00:14:06.868  -->  00:14:10.226
And now, we're ready to return our formatted string.
269

68

00:14:10.226  -->  00:14:13.393
So return type, so at first, the sign,
270

69

00:14:16.982  -->  00:14:20.638
then after that, we want a space, right?
271

70

00:14:20.638  -->  00:14:23.455
Then we put in the integer,
272

71

00:14:23.455  -->  00:14:26.998
which is now formatted with a comma, as we did before,
273

72

00:14:26.998  -->  00:14:31.215
and then finally, we put out the decimal part.
274

73

00:14:31.215  -->  00:14:34.736
So we put together all of these strings using the plus sign,
275

74

00:14:34.736  -->  00:14:37.478
and actually we can do it even better,
276

75

00:14:37.478  -->  00:14:39.990
so I'm gonna show you something very interesting.
277

76

00:14:39.990  -->  00:14:43.573
So let me copy this, and replace this here.
278

77

00:14:46.057  -->  00:14:47.374
And put a little parentheses.
279

78

00:14:47.374  -->  00:14:49.928
So we want this to be executed first,
280

79

00:14:49.928  -->  00:14:52.870
and if I don't assign this to any variable,
281

80

00:14:52.870  -->  00:14:56.250
then this operator here is simply going to return
282

81

00:14:56.250  -->  00:14:58.187
either minus or plus,
283

82

00:14:58.187  -->  00:14:59.378
so in this place here,
284

83

00:14:59.378  -->  00:15:01.998
we will have the minus if it's an expense,
285

84

00:15:01.998  -->  00:15:04.500
or a plus if it's an income.
286

85

00:15:04.500  -->  00:15:06.029
And since it's an operator,
287

86

00:15:06.029  -->  00:15:08.860
I can simply wrap it here in a parenthesis,
288

87

00:15:08.860  -->  00:15:11.588
and then it's gonna be executed first.
289

88

00:15:11.588  -->  00:15:14.608
All right, so we're now ready to use this,
290

89

00:15:14.608  -->  00:15:19.113
and let's first do it when we add a new item.
291

90

00:15:19.113  -->  00:15:22.328
With this down here, up here, so here.
292

91

00:15:22.328  -->  00:15:25.308
So instead of simply passing the object value,
293

92

00:15:25.308  -->  00:15:29.069
let's pass the result of formatting this number.
294

93

00:15:29.069  -->  00:15:31.402
So we say this.formatNumber,
295

94

00:15:32.325  -->  00:15:36.514
because remember, this is a method on the same object,
296

95

00:15:36.514  -->  00:15:39.306
and so we're gonna use the this keyboard.
297

96

00:15:39.306  -->  00:15:42.186
And actually, let me think about this,
298

97

00:15:42.186  -->  00:15:46.067
because probably we're not going to use this function here
299

98

00:15:46.067  -->  00:15:48.385
outside of this module, right?
300

99

00:15:48.385  -->  00:15:51.841
So we could as well make it a private function.
301

100

00:15:51.841  -->  00:15:55.817
So let me take this out of this object that we returned,
302

101

00:15:55.817  -->  00:15:57.865
which contains our public methods,
303

102

00:15:57.865  -->  00:16:01.513
and make it a private method, or a private function.
304

103

00:16:01.513  -->  00:16:03.846
So I'm gonna put it in here.
305

104

00:16:04.848  -->  00:16:06.696
And now, I need to change some things,
306

105

00:16:06.696  -->  00:16:09.446
so var, and equal, and all right.
307

106

00:16:13.145  -->  00:16:16.608
So, now we can remove the this part,
308

107

00:16:16.608  -->  00:16:20.525
and simply say formatNumber, and then the type.
309

108

00:16:24.320  -->  00:16:25.617
And that's it.
310

109

00:16:25.617  -->  00:16:26.896
So now, when we hit this,
311

110

00:16:26.896  -->  00:16:30.968
the formatNumber function will be called with our value,
312

111

00:16:30.968  -->  00:16:34.081
and with the type, will be formatted and returned,
313

112

00:16:34.081  -->  00:16:37.248
and then here, replaced in our string.
314

113

00:16:38.119  -->  00:16:41.015
So, it should be working now.
315

114

00:16:41.015  -->  00:16:44.598
So let's reload this, and add project 1500,
316

115

00:16:49.046  -->  00:16:50.346
and here we go.
317

116

00:16:50.346  -->  00:16:52.739
So we have a small problem here,
318

117

00:16:52.739  -->  00:16:56.787
we actually forgot to add our dot, okay?
319

118

00:16:56.787  -->  00:17:00.737
But besides that, it looks good, right?
320

119

00:17:00.737  -->  00:17:02.654
So, yeah, it's up here.
321

120

00:17:04.448  -->  00:17:05.864
So yeah, it's here.
322

121

00:17:05.864  -->  00:17:08.697
So here, we forgot to add the dot,
323

122

00:17:09.559  -->  00:17:12.192
but now, it should be perfect.
324

123

00:17:12.192  -->  00:17:14.942
So project, 1500, and here we go.
325

124

00:17:17.633  -->  00:17:19.216
So now, it's nicely formatted,
326

125

00:17:19.216  -->  00:17:22.224
such as we have it in our original,
327

126

00:17:22.224  -->  00:17:25.824
and another one, this time, an expense.
328

127

00:17:25.824  -->  00:17:28.741
So groceries were 97.56, let's say.
329

128

00:17:33.083  -->  00:17:35.010
And it's also nicely formatted.
330

129

00:17:35.010  -->  00:17:37.583
So now I'll use the minus sign and the space,
331

130

00:17:37.583  -->  00:17:40.015
and then everything looks great.
332

131

00:17:40.015  -->  00:17:42.775
So we have it here in our add item method,
333

132

00:17:42.775  -->  00:17:47.111
now we only need to put it here, where we show the budget.
334

133

00:17:47.111  -->  00:17:51.306
And that's also easy, so where is the display budget?
335

134

00:17:51.306  -->  00:17:52.331
Okay, so here.
336

135

00:17:52.331  -->  00:17:54.563
So we do the exact same thing here.
337

136

00:17:54.563  -->  00:17:57.730
So, formatNumber, and then the number,
338

137

00:18:00.851  -->  00:18:02.355
and now we need the type.
339

138

00:18:02.355  -->  00:18:05.471
So, we don't have the type here yet, do we?
340

139

00:18:05.471  -->  00:18:06.368
Because we don't know
341

140

00:18:06.368  -->  00:18:09.615
if the budget is gonna be negative or positive.
342

141

00:18:09.615  -->  00:18:11.583
So let's add an if statement here,
343

142

00:18:11.583  -->  00:18:14.280
or let's simply use the ternary operator.
344

143

00:18:14.280  -->  00:18:17.863
So let's say, obj.budget greater than zero,
345

144

00:18:21.775  -->  00:18:23.942
then type is gonna be inc,
346

145

00:18:27.210  -->  00:18:30.627
and else, it's gonna be exp, for expense.
347

146

00:18:32.482  -->  00:18:34.315
So type equal expense.
348

147

00:18:38.824  -->  00:18:41.988
Now, we have the type that we can use here.
349

148

00:18:41.988  -->  00:18:42.821
Okay.
350

149

00:18:44.789  -->  00:18:46.622
So formatNumber again,
351

150

00:18:48.750  -->  00:18:51.836
and here, we know that it's always gonna be positive, right,
352

151

00:18:51.836  -->  00:18:56.003
because it's an income, and so we want inc in here.
353

152

00:18:57.380  -->  00:18:59.630
And now here, formatNumber,
354

153

00:19:02.560  -->  00:19:05.393
and in this case, it's an expense.
355

154

00:19:07.601  -->  00:19:09.780
So let's check this out,
356

155

00:19:09.780  -->  00:19:12.106
and actually, we can already see that it's working,
357

156

00:19:12.106  -->  00:19:15.056
because we already have this here nicely formatted,
358

157

00:19:15.056  -->  00:19:17.781
because remember, this display budget method
359

158

00:19:17.781  -->  00:19:21.198
is already called in our innate function.
360

159

00:19:22.060  -->  00:19:24.560
But let's still add something.
361

160

00:19:27.060  -->  00:19:29.380
So yeah, it's working.
362

161

00:19:29.380  -->  00:19:31.445
So let's now move on to the next thing
363

162

00:19:31.445  -->  00:19:35.362
that we have to fix here in our user interface.
--> 00:08:24.316
All right.
162

163

00:08:24.316  -->  00:08:27.325
So the decimal part has already been taken care of,
163

164

00:08:27.325  -->  00:08:30.012
and now we just need to add this comma here,
164

165

00:08:30.012  -->  00:08:31.969
if we have a thousand.
165

166

00:08:31.969  -->  00:08:35.818
So let's do that, and we do that using an if else statement,
166

167

00:08:35.818  -->  00:08:38.937
and remember this int is still a string,
167

168

00:08:38.937  -->  00:08:41.777
and on a string, such as on an array,
168

169

00:08:41.777  -->  00:08:45.274
we have access to the length property, okay?
169

170

00:08:45.274  -->  00:08:46.818
So using length on a string,
170

171

00:08:46.818  -->  00:08:50.202
it gives us, of course, the length of a string.
171

172

00:08:50.202  -->  00:08:52.574
So for example, if the string is number,
172

173

00:08:52.574  -->  00:08:54.221
then it will return six,
173

174

00:08:54.221  -->  00:08:57.990
because number is made up of six characters.
174

175

00:08:57.990  -->  00:09:00.853
In this case our string is a number, so basically,
175

176

00:09:00.853  -->  00:09:05.070
it will give us how many numbers are in our number.
176

177

00:09:05.070  -->  00:09:06.911
So if we have more than three,
177

178

00:09:06.911  -->  00:09:10.615
then it's more than a thousand, right?
178

179

00:09:10.615  -->  00:09:14.320
For example, this 2310, it has four.
179

180

00:09:14.320  -->  00:09:18.514
So in this case, we need to add the comma, right here.
180

181

00:09:18.514  -->  00:09:22.997
Now, in here, we are going to use a method called substring,
181

182

00:09:22.997  -->  00:09:27.186
and substring allows us to only take a part of a string.
182

183

00:09:27.186  -->  00:09:28.726
So this method is gonna return
183

184

00:09:28.726  -->  00:09:31.959
simply the part of the string that we want.
184

185

00:09:31.959  -->  00:09:34.292
So let's say, int.substring,
185

186

00:09:36.246  -->  00:09:39.079
so it's written like this, substr,
186

187

00:09:40.200  -->  00:09:42.824
and then in here, the first argument
187

188

00:09:42.824  -->  00:09:45.264
is the index number where we want to start,
188

189

00:09:45.264  -->  00:09:49.531
and the second number is how many characters we want.
189

190

00:09:49.531  -->  00:09:52.098
So imagine that we write 0 and 1,
190

191

00:09:52.098  -->  00:09:55.272
then this means that we're gonna start at position zero,
191

192

00:09:55.272  -->  00:09:59.825
so right in the beginning, and read one element.
192

193

00:09:59.825  -->  00:10:01.720
So imagine it would be this number,
193

194

00:10:01.720  -->  00:10:05.816
then this end substring would return only the two,
194

195

00:10:05.816  -->  00:10:10.085
because we start at position zero, and read one number,
195

196

00:10:10.085  -->  00:10:12.226
so this would return the string 2.
196

197

00:10:12.226  -->  00:10:15.639
And let me actually save it to the invariable, again,
197

198

00:10:15.639  -->  00:10:19.078
so again, we're gonna override what's in this variable,
198

199

00:10:19.078  -->  00:10:20.959
because we don't want it anymore.
199

200

00:10:20.959  -->  00:10:25.242
We're just interested in the result of this execution.
200

201

00:10:25.242  -->  00:10:29.008
Okay, so this gives us the first part of the number,
201

202

00:10:29.008  -->  00:10:31.209
and now we can simply add the comma
