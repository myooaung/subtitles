1
1

00:00:01,282  -->  00:00:03,705
<v Jonas>Before we can move on to our next big topic,</v>
2

2

00:00:03,705  -->  00:00:06,003
we need to quickly learn about something called
3

3

00:00:06,003  -->  00:00:08,553
truthy and falsy values.
4

4

00:00:08,553  -->  00:00:11,718
So in JavaScript, a falsy value is a value
5

5

00:00:11,718  -->  00:00:14,210
that is considered false when evaluated
6

6

00:00:14,210  -->  00:00:16,878
in an if/else statement condition.
7

7

00:00:16,878  -->  00:00:19,114
And the values that are falsy in JavaScript
8

8

00:00:19,114  -->  00:00:19,947
are undefined, null, zero, empty strings,
9

9

00:00:19,947  -->  00:00:20,780
and "not a number" values.
10

10

00:00:25,467  -->  00:00:28,961
Let me actually write that down for you, okay.
11

11

00:00:28,961  -->  00:00:30,519
So falsy
12

12

00:00:30,519  -->  00:00:31,852
values, they are
13

13

00:00:33,491  -->  00:00:35,324
undefined, null, zero,
14

14

00:00:37,466  -->  00:00:40,729
empty strings, and not a number.
15

15

00:00:40,729  -->  00:00:42,409
We didn't talk about this here yet,
16

16

00:00:42,409  -->  00:00:45,191
but you will see examples of this here later in the course.
17

17

00:00:45,191  -->  00:00:47,855
Okay, so all of these five different values here
18

18

00:00:47,855  -->  00:00:50,520
will be converted to false when evaluated
19

19

00:00:50,520  -->  00:00:52,758
in a true/false condition.
20

20

00:00:52,758  -->  00:00:54,940
So that's why we call them falsy.
21

21

00:00:54,940  -->  00:00:56,112
They are not exactly false,
22

22

00:00:56,112  -->  00:00:58,972
but they will turn out to be false when evaluated
23

23

00:00:58,972  -->  00:01:00,654
in a if/else condition.
24

24

00:01:00,654  -->  00:01:03,321
Now we also have truthy values.
25

25

00:01:06,413  -->  00:01:08,087
And of course the truthy values
26

26

00:01:08,087  -->  00:01:10,414
are all the values that are considered true
27

27

00:01:10,414  -->  00:01:13,592
when evaluated in an if/else statement condition.
28

28

00:01:13,592  -->  00:01:18,092
So basically, it's all the values that are not falsy.
29

29

00:01:19,661  -->  00:01:22,007
Okay, so let's now take a look at an example
30

30

00:01:22,007  -->  00:01:24,590
to demonstrate how this works.
31

31

00:01:25,461  -->  00:01:28,091
Let's define a variable of height, let's say.
32

32

00:01:28,091  -->  00:01:29,823
And we will not actually define it,
33

33

00:01:29,823  -->  00:01:31,351
so we just declare it here.
34

34

00:01:31,351  -->  00:01:34,339
And now let's write an if/else statement.
35

35

00:01:34,339  -->  00:01:36,339
So we can say if height,
36

36

00:01:39,569  -->  00:01:41,902
and then log to the console.
37

37

00:01:45,196  -->  00:01:47,860
The variable is defined.
38

38

00:01:47,860  -->  00:01:48,777
And else...
39

39

00:01:54,442  -->  00:01:57,359
The variable has not been defined.
40

40

00:02:00,191  -->  00:02:02,967
So, lets see what happens here.
41

41

00:02:02,967  -->  00:02:04,590
And what we get printed here,
42

42

00:02:04,590  -->  00:02:06,902
is that the variable has not been defined.
43

43

00:02:06,902  -->  00:02:08,712
So why is that happening?
44

44

00:02:08,712  -->  00:02:11,951
Well, we declared the variable here as height,
45

45

00:02:11,951  -->  00:02:13,577
but we didn't define it.
46

46

00:02:13,577  -->  00:02:16,054
So you already know that it's now undefined.
47

47

00:02:16,054  -->  00:02:20,013
And we also know undefined is a falsy value, right?
48

48

00:02:20,013  -->  00:02:22,493
So in here when we say if height,
49

49

00:02:22,493  -->  00:02:25,414
then this height here is converted to false.
50

50

00:02:25,414  -->  00:02:27,620
So therefore, we entered the else block,
51

51

00:02:27,620  -->  00:02:29,573
which will then print that the variable
52

52

00:02:29,573  -->  00:02:31,322
hasn't been defined yet.
53

53

00:02:31,322  -->  00:02:33,096
This is a very handy way of testing
54

54

00:02:33,096  -->  00:02:36,734
if a variable has actually been defined or not.
55

55

00:02:36,734  -->  00:02:40,240
Now let's say that we actually do define a value.
56

56

00:02:40,240  -->  00:02:41,740
So let's say 23...
57

57

00:02:42,640  -->  00:02:45,271
So watch what happens now?
58

58

00:02:45,271  -->  00:02:48,531
Of course, the variable is now defined.
59

59

00:02:48,531  -->  00:02:49,976
That's because everything
60

60

00:02:49,976  -->  00:02:53,058
that's not a falsy value is a truthy value.
61

61

00:02:53,058  -->  00:02:55,900
We already know that when a variable exists,
62

62

00:02:55,900  -->  00:02:58,602
well then this here will be converted to true,
63

63

00:02:58,602  -->  00:03:01,532
and therefore, the if block is entered.
64

64

00:03:01,532  -->  00:03:04,856
So, again a very handy way of testing
65

65

00:03:04,856  -->  00:03:06,887
if a variable actually exists.
66

66

00:03:06,887  -->  00:03:09,099
Now there's just one thing to keep in mind here,
67

67

00:03:09,099  -->  00:03:10,139
and that is that...
68

68

00:03:10,139  -->  00:03:13,671
Notice how this zero also has a falsy value,
69

69

00:03:13,671  -->  00:03:15,593
but the height can of course be zero.
70

70

00:03:15,593  -->  00:03:16,982
So let's set it to zero here.
71

71

00:03:16,982  -->  00:03:19,623
The variable is actually defined now isn't it?
72

72

00:03:19,623  -->  00:03:21,773
So we have a value here, it's not undefined.
73

73

00:03:21,773  -->  00:03:24,985
But if we now reload this, well then it still says
74

74

00:03:24,985  -->  00:03:27,835
that the variable has not been defined.
75

75

00:03:27,835  -->  00:03:31,000
That's, of course, a situation that we want to avoid.
76

76

00:03:31,000  -->  00:03:33,940
So this here cannot only be height,
77

77

00:03:33,940  -->  00:03:36,717
but we also have to say that if the variable is zero,
78

78

00:03:36,717  -->  00:03:40,024
well then the variable is also defined.
79

79

00:03:40,024  -->  00:03:42,464
Remember that we can use the or operator
80

80

00:03:42,464  -->  00:03:43,654
to do exactly that.
81

81

00:03:43,654  -->  00:03:45,980
So we already used the and operator before,
82

82

00:03:45,980  -->  00:03:48,503
but we also talked about the or operator.
83

83

00:03:48,503  -->  00:03:49,422
So we can say,
84

84

00:03:49,422  -->  00:03:50,255
or
85

85

00:03:51,198  -->  00:03:52,956
the height is
86

86

00:03:52,956  -->  00:03:54,123
equal to zero.
87

87

00:03:54,972  -->  00:03:56,738
So that will fix the problem.
88

88

00:03:56,738  -->  00:03:59,585
This is quite a common pattern in JavaScript,
89

89

00:03:59,585  -->  00:04:01,825
to check if a variable is defined.
90

90

00:04:01,825  -->  00:04:03,978
So we check if the variable exists,
91

91

00:04:03,978  -->  00:04:05,755
or if it is equal to zero.
92

92

00:04:05,755  -->  00:04:08,981
Then the if block here is in fact entered.
93

93

00:04:08,981  -->  00:04:10,773
Okay, so let's check that out again,
94

94

00:04:10,773  -->  00:04:13,770
and so now we see that the variable is defined.
95

95

00:04:13,770  -->  00:04:16,886
Remember, that only one of these here has to be true
96

96

00:04:16,886  -->  00:04:19,896
in order for the entire condition to be true.
97

97

00:04:19,896  -->  00:04:22,703
So in this case now the height is zero,
98

98

00:04:22,703  -->  00:04:25,701
and so this here will be converted to false.
99

99

00:04:25,701  -->  00:04:28,391
But we don't have height equal to zero,
100

100

00:04:28,391  -->  00:04:29,737
which is true of course,
101

101

00:04:29,737  -->  00:04:31,878
because in this situation the height is zero.
102

102

00:04:31,878  -->  00:04:33,984
So we have false and true,
103

103

00:04:33,984  -->  00:04:35,826
which will result in true.
104

104

00:04:35,826  -->  00:04:38,965
Therefore, this line of code here is then executed.
105

105

00:04:38,965  -->  00:04:41,727
Alright, now this is going to work with any number here,
106

106

00:04:41,727  -->  00:04:43,560
and also with strings.
107

107

00:04:44,968  -->  00:04:47,385
So let's say 20, for example.
108

108

00:04:49,457  -->  00:04:50,756
And you see that it's still true,
109

109

00:04:50,756  -->  00:04:52,601
because it's still entered that first block.
110

110

00:04:52,601  -->  00:04:54,171
But if we have an empty string,
111

111

00:04:54,171  -->  00:04:56,628
remember that also is a falsy value as we see here.
112

112

00:04:56,628  -->  00:05:00,014
So with an empty string it now says
113

113

00:05:00,014  -->  00:05:02,037
the variable has not been defined again.
114

114

00:05:02,037  -->  00:05:04,095
So, that kind of makes sense, right?
115

115

00:05:04,095  -->  00:05:06,238
Because in fact, there's not really something there,
116

116

00:05:06,238  -->  00:05:08,041
it's just like an empty string.
117

117

00:05:08,041  -->  00:05:11,076
So these are falsy and truthy values,
118

118

00:05:11,076  -->  00:05:12,707
and the handy way to check
119

119

00:05:12,707  -->  00:05:15,557
if a variable is actually defined.
120

120

00:05:15,557  -->  00:05:17,407
Now just to finish, let's talk about
121

121

00:05:17,407  -->  00:05:19,565
the two different equality operators.
122

122

00:05:19,565  -->  00:05:23,506
So we've always used this triple equal operator, right?
123

123

00:05:23,506  -->  00:05:26,495
This is the one for strict equality comparisons.
124

124

00:05:26,495  -->  00:05:28,945
But there is also the equal, equal,
125

125

00:05:28,945  -->  00:05:30,745
so this operator here...
126

126

00:05:30,745  -->  00:05:33,542
And the difference is that this one does type coercion,
127

127

00:05:33,542  -->  00:05:35,256
Which means that the data types
128

128

00:05:35,256  -->  00:05:39,193
of both variables do not have to match.
129

129

00:05:39,193  -->  00:05:43,026
Let me show that to you, actually in practice.
130

130

00:05:44,643  -->  00:05:47,315
So, just to comment here, and now let's say
131

131

00:05:47,315  -->  00:05:48,148
if height
132

132

00:05:51,050  -->  00:05:52,050
equals 23...
133

133

00:05:53,265  -->  00:05:55,553
So we have a string now here.
134

134

00:05:55,553  -->  00:05:58,636
Then let's simply log to the console,
135

135

00:06:00,537  -->  00:06:02,787
the equal equal operator...
136

136

00:06:05,360  -->  00:06:07,276
does type coercion.
137

137

00:06:07,276  -->  00:06:09,562
Let's check out what happened.
138

138

00:06:09,562  -->  00:06:13,047
Before we do that, let's set this here back to 23.
139

139

00:06:13,047  -->  00:06:14,511
What we're doing here,
140

140

00:06:14,511  -->  00:06:16,499
is to compare the height which is 23,
141

141

00:06:16,499  -->  00:06:19,172
a number with a string of 23,
142

142

00:06:19,172  -->  00:06:22,920
with a non-strict equality operator, which is this one.
143

143

00:06:22,920  -->  00:06:25,313
So only two equals.
144

144

00:06:25,313  -->  00:06:27,307
Let's take a look at this.
145

145

00:06:27,307  -->  00:06:30,831
And so you see that this actually turns out to be true,
146

146

00:06:30,831  -->  00:06:33,222
so we enter this first if block.
147

147

00:06:33,222  -->  00:06:36,851
So you see, the equal equal operator does type coercion.
148

148

00:06:36,851  -->  00:06:38,940
What this means is that JavaScript,
149

149

00:06:38,940  -->  00:06:40,790
when we use this operator here,
150

150

00:06:40,790  -->  00:06:43,864
converts the string of 23 to a number,
151

151

00:06:43,864  -->  00:06:47,351
and then says that it's the same as 23, the number.
152

152

00:06:47,351  -->  00:06:49,541
Let's take a look at that here again.
153

153

00:06:49,541  -->  00:06:52,463
So, 23 and then the string 23.
154

154

00:06:52,463  -->  00:06:55,594
And it will say that it is true.
155

155

00:06:55,594  -->  00:06:58,402
It's exactly what we observed in here.
156

156

00:06:58,402  -->  00:07:00,422
So again, JavaScript does type coercion,
157

157

00:07:00,422  -->  00:07:02,209
which basically means to convert
158

158

00:07:02,209  -->  00:07:04,192
this string here to a number,
159

159

00:07:04,192  -->  00:07:06,358
and then compares the numbers,
160

160

00:07:06,358  -->  00:07:08,718
and then of course they are the same, right?
161

161

00:07:08,718  -->  00:07:11,358
Now if instead we use the strict equality operator
162

162

00:07:11,358  -->  00:07:12,946
with the three equal signs,
163

163

00:07:12,946  -->  00:07:15,352
well then it will not do type coercion.
164

164

00:07:15,352  -->  00:07:18,249
So therefore, what do you think will happen now?
165

165

00:07:18,249  -->  00:07:20,532
Yes indeed, it now says that it's false,
166

166

00:07:20,532  -->  00:07:23,023
because in fact they are two different things.
167

167

00:07:23,023  -->  00:07:25,614
So we have 23 the number, and 23 the string.
168

168

00:07:25,614  -->  00:07:26,991
And they are different things,
169

169

00:07:26,991  -->  00:07:30,382
so in fact, we want them not to be the same, okay.
170

170

00:07:30,382  -->  00:07:33,749
And so if instead, we had three equals here
171

171

00:07:33,749  -->  00:07:36,970
well then of course we will not see this operative.
172

172

00:07:36,970  -->  00:07:40,494
We will not see this log to the console because it's false.
173

173

00:07:40,494  -->  00:07:44,782
Okay, so that is how the strict equality operator works,
174

174

00:07:44,782  -->  00:07:46,477
and it is absolutely a best practice
175

175

00:07:46,477  -->  00:07:48,489
to always use the triple equal,
176

176

00:07:48,489  -->  00:07:50,421
so the strict equality operator,
177

177

00:07:50,421  -->  00:07:53,953
in order to avoid unexpected situations and bugs.
178

178

00:07:53,953  -->  00:07:56,517
So that's why I've been using this operator all the time,
179

179

00:07:56,517  -->  00:08:00,850
with the three equals, and not just the two equals.
