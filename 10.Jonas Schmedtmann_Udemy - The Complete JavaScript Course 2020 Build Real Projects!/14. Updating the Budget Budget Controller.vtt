WEBVTT
1
1

00:00:01.401  -->  00:00:03.670
<v Instructor>Let's now do the actual calculations</v>
2

2

00:00:03.670  -->  00:00:07.674
of the total incomes, total expenses and the budget.
3

3

00:00:09.074  -->  00:00:12.145
And so in this lecture, you're gonna learn how and why
4

4

00:00:12.145  -->  00:00:15.148
to create simple, reusable functions with only
5

5

00:00:15.148  -->  00:00:19.052
one purpose each; and also how to sum all elements
6

6

00:00:19.052  -->  00:00:22.055
of an array using the forEach method.
7

7

00:00:22.055  -->  00:00:24.958
So let's go to work.
8

8

00:00:24.958  -->  00:00:28.194
So this is how we left the updateBudget function
9

9

00:00:28.194  -->  00:00:30.463
in a controller after the last lecture.
10

10

00:00:30.463  -->  00:00:34.401
So it's now time to calculate the budget here in step one.
11

11

00:00:34.401  -->  00:00:37.404
And for that, we're gonna create a public method
12

12

00:00:37.404  -->  00:00:39.946
in the budgetController, right?
13

13

00:00:40.907  -->  00:00:43.437
And so it's up here.
14

14

00:00:44.811  -->  00:00:47.647
And I'm gonna call it calculateBudget.
15

15

00:00:47.647  -->  00:00:50.048
So very simple.
16

16

00:00:55.488  -->  00:00:58.660
And it's a function, of course.
17

17

00:01:01.728  -->  00:01:06.011
And in here, there's a couple of things that we have to do.
18

18

00:01:06.011  -->  00:01:08.935
So I call this the calculateBudget function,
19

19

00:01:08.935  -->  00:01:12.005
but in fact, we're also going to calculate first
20

20

00:01:12.005  -->  00:01:16.509
at a sum of all incomes, as well as the sum
21

21

00:01:16.509  -->  00:01:17.877
of all the expenses.
22

22

00:01:17.877  -->  00:01:21.214
So the total income and the total expenses.
23

23

00:01:21.214  -->  00:01:24.083
And then of course the budget, which is one minus the other,
24

24

00:01:24.083  -->  00:01:26.152
and then also the percentage.
25

25

00:01:26.152  -->  00:01:29.622
So let's show that on the user interface.
26

26

00:01:29.622  -->  00:01:31.891
So this is the percentage that I'm talking about,
27

27

00:01:31.891  -->  00:01:35.562
and this is very simply the percentage of our income here
28

28

00:01:35.562  -->  00:01:37.764
that we have already spent.
29

29

00:01:37.764  -->  00:01:39.866
So it's our expenses.
30

30

00:01:39.866  -->  00:01:42.748
So let's write all we have to do here, so
31

31

00:01:45.698  -->  00:01:49.704
calculateTotal income and expenses
32

32

00:01:52.944  -->  00:01:56.290
and calculate the budget,
33

33

00:01:58.783  -->  00:02:03.497
which will of course be income minus the expenses, right?
34

34

00:02:06.374  -->  00:02:08.928
And then finally,
35

35

00:02:08.928  -->  00:02:13.069
calculate the percentage of income
36

36

00:02:15.291  -->  00:02:19.123
that we spent, basically.
37

37

00:02:19.123  -->  00:02:20.773
Okay, so let's start with the beginning right here.
38

38

00:02:20.773  -->  00:02:24.010
So calculate the total income and expenses.
39

39

00:02:24.010  -->  00:02:26.346
So this sounds like we're gonna do the same thing
40

40

00:02:26.346  -->  00:02:27.853
two times, right?
41

41

00:02:27.853  -->  00:02:30.750
Once for the income and once for the expenses.
42

42

00:02:30.750  -->  00:02:33.520
So I think this sounds like making an extra function
43

43

00:02:33.520  -->  00:02:34.587
for this, right?
44

44

00:02:34.587  -->  00:02:37.924
So a function that receives if it's either the income
45

45

00:02:37.924  -->  00:02:41.494
or the expenses that we're talking about so that we want,
46

46

00:02:41.494  -->  00:02:44.297
and then sum of the items.
47

47

00:02:44.297  -->  00:02:47.133
Okay, and since we don't want no one else to use
48

48

00:02:47.133  -->  00:02:50.670
this function, we can make it simply a private function.
49

49

00:02:50.670  -->  00:02:53.072
So it's just an internal function to help this
50

50

00:02:53.072  -->  00:02:55.608
calculateBudget method, okay?
51

51

00:02:55.608  -->  00:02:57.844
So I'm going to do it out here,
52

52

00:02:57.844  -->  00:03:01.833
and I'm simply gonna call it calculateTotal,
53

53

00:03:02.733  -->  00:03:04.881
calculateTotal.
54

54

00:03:09.459  -->  00:03:12.258
And then what we need to say here is simply if we want
55

55

00:03:12.258  -->  00:03:15.907
to calculate the total expenses or the total incomes.
56

56

00:03:16.829  -->  00:03:20.824
So again, gonna use our type keyword, okay?
57

57

00:03:23.770  -->  00:03:26.239
Okay, so how are we gonna do that?
58

58

00:03:26.239  -->  00:03:28.942
So we already know that all of the items are stored
59

59

00:03:28.942  -->  00:03:30.944
here in the allItems object, right?
60

60

00:03:30.944  -->  00:03:33.146
And all the expenses are in this array,
61

61

00:03:33.146  -->  00:03:36.983
and all the incomes are in this array, right?
62

62

00:03:36.983  -->  00:03:39.152
So at some point of our application,
63

63

00:03:39.152  -->  00:03:41.454
there are gonna be a couple of objects
64

64

00:03:41.454  -->  00:03:44.624
in both this and these arrays here.
65

65

00:03:44.624  -->  00:03:47.093
So what we need to do is to get this array
66

66

00:03:47.093  -->  00:03:50.263
then loop over it, and then sum all of the values.
67

67

00:03:50.263  -->  00:03:52.832
So add all of the values together.
68

68

00:03:52.832  -->  00:03:54.834
And so the first thing that we need to do
69

69

00:03:54.834  -->  00:03:58.137
is to simply create a sum variable
70

70

00:03:58.137  -->  00:04:01.256
which will store the sum, okay?
71

71

00:04:01.256  -->  00:04:03.643
And set it to zero, because that's of course
72

72

00:04:03.643  -->  00:04:05.364
the initial value.
73

73

00:04:05.364  -->  00:04:08.181
Okay, and then we loop over this array.
74

74

00:04:08.181  -->  00:04:11.050
And do you remember a great way that we learned
75

75

00:04:11.050  -->  00:04:14.153
in one of the last lectures about looping over an array?
76

76

00:04:15.213  -->  00:04:17.457
It was the forEach method, right?
77

77

00:04:17.457  -->  00:04:20.994
So let's get our array and use the forEach method on it.
78

78

00:04:20.994  -->  00:04:24.697
So data, which is where all of this is stored,
79

79

00:04:24.697  -->  00:04:27.734
then the allItems object, okay?
80

80

00:04:27.734  -->  00:04:32.734
And then, such as we did before, we use our type argument
81

81

00:04:32.805  -->  00:04:35.642
to select if you want to expense array
82

82

00:04:35.642  -->  00:04:38.411
or the income array, right?
83

83

00:04:38.411  -->  00:04:41.381
So this type here will, of course, be either exp
84

84

00:04:41.381  -->  00:04:45.353
or either inc, such as we've been using before.
85

85

00:04:45.353  -->  00:04:47.920
All right, so this is the array, and now we can use
86

86

00:04:47.920  -->  00:04:50.356
the forEach method.
87

87

00:04:50.356  -->  00:04:54.283
And remember, this accepts a callback function, okay?
88

88

00:04:54.283  -->  00:04:56.735
So function.
89

89

00:04:59.766  -->  00:05:01.968
And then this function here has access
90

90

00:05:01.968  -->  00:05:03.836
to a couple of parameters.
91

91

00:05:03.836  -->  00:05:04.837
Remember that?
92

92

00:05:04.837  -->  00:05:08.341
So we can access the current value, the current index
93

93

00:05:08.341  -->  00:05:10.629
and also the complete array.
94

94

00:05:10.629  -->  00:05:13.880
In this case, we only need the current element, okay?
95

95

00:05:13.880  -->  00:05:16.416
So I'm gonna call it cur simply.
96

96

00:05:16.416  -->  00:05:17.583
And remember, we can do that.
97

97

00:05:17.583  -->  00:05:19.585
We can call it whatever we want.
98

98

00:05:19.585  -->  00:05:23.280
And so now I say that the sum should be equal
99

99

00:05:25.024  -->  00:05:29.371
to the previous sum, plus the current value.
100

100

00:05:29.371  -->  00:05:32.129
And so it's cur.value.
101

101

00:05:33.266  -->  00:05:35.334
And it's cur.value, because value is the name
102

102

00:05:35.334  -->  00:05:37.103
that we gave it here, right?
103

103

00:05:37.103  -->  00:05:39.539
So in the expense and in the income,
104

104

00:05:39.539  -->  00:05:41.974
they both have this property called value,
105

105

00:05:41.974  -->  00:05:44.856
which is where we store the value.
106

106

00:05:44.856  -->  00:05:48.903
And so this cur here now refers to either the income
107

107

00:05:49.882  -->  00:05:52.251
or the expense object that is stored
108

108

00:05:52.251  -->  00:05:56.856
at the current position of the expense or the income array.
109

109

00:05:56.856  -->  00:05:58.257
Okay?
110

110

00:05:58.257  -->  00:06:00.593
Okay, just to illustrate this, let me just write
111

111

00:06:00.593  -->  00:06:03.463
a simple example here, okay,
112

112

00:06:03.463  -->  00:06:05.531
just so this makes more sense to you.
113

113

00:06:05.531  -->  00:06:09.168
So the initial sum is zero, right?
114

114

00:06:09.168  -->  00:06:12.071
And imagine we have an array, which has these sums.
115

115

00:06:12.071  -->  00:06:16.282
So 200, 400 and 100, for example, okay?
116

116

00:06:18.144  -->  00:06:20.346
So in the beginning, our sum is zero.
117

117

00:06:20.346  -->  00:06:23.535
So in the first iteration, our sum is zero,
118

118

00:06:23.535  -->  00:06:27.687
and so the sum will be zero plus 200,
119

119

00:06:27.687  -->  00:06:30.823
because it's the first element of the array.
120

120

00:06:30.823  -->  00:06:32.305
The first value, in this case.
121

121

00:06:32.305  -->  00:06:34.794
So notice that these are only values.
122

122

00:06:34.794  -->  00:06:36.796
This is just an example to see
123

123

00:06:36.796  -->  00:06:39.799
how this iteration works and how we calculate
124

124

00:06:39.799  -->  00:06:41.534
the final sum.
125

125

00:06:41.534  -->  00:06:43.336
So in the next iteration,
126

126

00:06:43.336  -->  00:06:46.672
then our sum is already 200, right?
127

127

00:06:46.672  -->  00:06:51.010
And so now sum is equal to 200 plus
128

128

00:06:51.010  -->  00:06:53.646
the 400 from the next element.
129

129

00:06:53.646  -->  00:06:54.647
So that's a 600.
130

130

00:06:54.647  -->  00:06:58.384
And so in the next loop in the next iteration,
131

131

00:06:58.384  -->  00:07:01.006
it will be 600 plus 100.
132

132

00:07:02.288  -->  00:07:04.824
So 700 in the end, all right?
133

133

00:07:04.824  -->  00:07:07.360
So this is how this loop works.
134

134

00:07:07.360  -->  00:07:09.362
Now we can do this better, right?
135

135

00:07:09.362  -->  00:07:12.691
Remember there's this operator where we can put a plus here,
136

136

00:07:12.691  -->  00:07:14.580
and then we don't need this.
137

137

00:07:14.580  -->  00:07:15.902
So this is a bit simpler.
138

138

00:07:15.902  -->  00:07:19.438
And so after this loop, we have our sum stored here
139

139

00:07:19.438  -->  00:07:21.407
in this value.
140

140

00:07:21.407  -->  00:07:24.410
And what are we gonna do with this then?
141

141

00:07:24.410  -->  00:07:27.480
We could return it, but I think it's even better
142

142

00:07:27.480  -->  00:07:31.017
to store it in our global data structure.
143

143

00:07:31.017  -->  00:07:34.353
So in our global data model, which we have here, okay,
144

144

00:07:34.353  -->  00:07:38.457
so this data object, which contains all of our information;
145

145

00:07:38.457  -->  00:07:42.995
and so in here, we, before, already put this totals object.
146

146

00:07:42.995  -->  00:07:47.995
So now we can use this and store our sums in here, right?
147

147

00:07:48.134  -->  00:07:50.255
So let's do that.
148

148

00:07:50.255  -->  00:07:53.047
Data.totals.
149

149

00:07:54.073  -->  00:07:56.876
And then again, we use our type,
150

150

00:07:56.876  -->  00:08:00.246
because once again there is expenses and income.
151

151

00:08:00.246  -->  00:08:03.916
And then we simply say that this should be equal
152

152

00:08:03.916  -->  00:08:07.175
to the sum that we just calculated.
153

153

00:08:07.175  -->  00:08:08.321
And that's it.
154

154

00:08:08.321  -->  00:08:10.323
So this function is completed now.
155

155

00:08:10.323  -->  00:08:12.625
So let's use it here and practice.
156

156

00:08:12.625  -->  00:08:16.394
So we're going to go back to our calculateBudget method.
157

157

00:08:16.394  -->  00:08:19.665
And so now I can call our private function.
158

158

00:08:19.665  -->  00:08:23.335
So I just say calculateTotal, and here it is.
159

159

00:08:23.335  -->  00:08:27.214
And I first do it with expenses, and then
160

160

00:08:28.608  -->  00:08:31.130
I do it with income.
161

161

00:08:32.245  -->  00:08:33.976
And that's it.
162

162

00:08:33.976  -->  00:08:37.582
So after running these two lines or a data structure here
163

163

00:08:37.582  -->  00:08:39.719
has these two values here filled.
164

164

00:08:39.719  -->  00:08:42.121
So they are not zero anymore.
165

165

00:08:42.121  -->  00:08:44.256
So they are now set to the total expense
166

166

00:08:44.256  -->  00:08:46.092
and the total incomes.
167

167

00:08:46.092  -->  00:08:49.061
Okay, and now we just need to calculate the budget.
168

168

00:08:49.061  -->  00:08:52.899
And where do you think I should stored this budget?
169

169

00:08:52.899  -->  00:08:53.900
Exactly.
170

170

00:08:53.900  -->  00:08:58.004
Once again, we are going to use our global data structure
171

171

00:08:58.004  -->  00:08:59.805
that we have here.
172

172

00:08:59.805  -->  00:09:02.575
So we're gonna create a variable in here
173

173

00:09:02.575  -->  00:09:06.527
called budget, and set it initially to zero, okay?
174

174

00:09:07.480  -->  00:09:11.484
And now we can go ahead and fill this value here
175

175

00:09:11.484  -->  00:09:14.053
with our budget that we're gonna calculate.
176

176

00:09:14.053  -->  00:09:17.630
So we say data.budget will be equal
177

177

00:09:18.891  -->  00:09:21.027
to the income minus the expenses.
178

178

00:09:21.027  -->  00:09:24.049
And remember where these values are stored.
179

179

00:09:24.049  -->  00:09:26.365
Exactly, they are also in the data structure.
180

180

00:09:26.365  -->  00:09:28.496
So data.
181

181

00:09:28.496  -->  00:09:31.016
And now remember, they're in the totals.
182

182

00:09:31.016  -->  00:09:33.965
Totals.income.
183

183

00:09:35.007  -->  00:09:39.284
And now minus data.totals.expenses.
184

184

00:09:42.081  -->  00:09:43.582
Okay.
185

185

00:09:43.582  -->  00:09:46.385
So this retrieves these two values here
186

186

00:09:46.385  -->  00:09:49.155
from our data instructor, then calculates one
187

187

00:09:49.155  -->  00:09:51.991
minus the other and then stores it again
188

188

00:09:51.991  -->  00:09:55.795
in the data structure in the budget property.
189

189

00:09:55.795  -->  00:09:58.864
And now the final task of this method is to calculate
190

190

00:09:58.864  -->  00:10:02.268
the percentage of income that we spend.
191

191

00:10:02.268  -->  00:10:06.084
So once again let's create a new property here
192

192

00:10:06.084  -->  00:10:09.112
and simply call this one percentage
193

193

00:10:10.409  -->  00:10:13.279
and also set it to zero in the beginning.
194

194

00:10:13.279  -->  00:10:17.550
Or actually, let's set it to minus one, because minus one
195

195

00:10:17.550  -->  00:10:20.152
is usually a value that we use to say
196

196

00:10:20.152  -->  00:10:22.722
that something is nonexistent.
197

197

00:10:22.722  -->  00:10:26.459
So if there are no budget values and no total expenses
198

198

00:10:26.459  -->  00:10:28.861
on incomes, then there cannot be a percentage.
199

199

00:10:28.861  -->  00:10:31.397
So we set it not to zero but to minus one.
200

200

00:10:31.397  -->  00:10:34.241
So it doesn't exist at this point.
201

201

00:10:36.235  -->  00:10:39.839
And so now we can store the percentage that we calculate
202

202

00:10:39.839  -->  00:10:41.774
also in a data structure.
203

203

00:10:41.774  -->  00:10:44.632
So data.percentage.
204

204

00:10:44.632  -->  00:10:47.947
So the percentage of income that we spend
205

205

00:10:47.947  -->  00:10:51.150
is the expenses divided by the incomes, okay?
206

206

00:10:52.060  -->  00:10:55.216
So data, totals, expenses
207

207

00:10:56.328  -->  00:11:00.100
divided by data totals.income, okay?
208

208

00:11:03.390  -->  00:11:07.466
So just an example, let's see.
209

209

00:11:07.466  -->  00:11:10.319
Imagine we have an expense
210

210

00:11:11.389  -->  00:11:13.591
of 100,
211

211

00:11:14.856  -->  00:11:17.789
and an income of 200.
212

212

00:11:17.789  -->  00:11:21.230
Then we spend 50% of our income, right?
213

213

00:11:23.049  -->  00:11:27.153
So this is equal to 100 divided to 200, right?
214

214

00:11:28.573  -->  00:11:33.178
And this is actually 0.5, so we have to multiply it by 100.
215

215

00:11:35.127  -->  00:11:37.129
So let's do that here as well.
216

216

00:11:37.129  -->  00:11:40.032
So I'm gonna put some parenthesis here,
217

217

00:11:40.032  -->  00:11:43.384
which are actually not necessary.
218

218

00:11:43.384  -->  00:11:47.373
But this way, it looks a bit better, a bit more structured.
219

219

00:11:47.373  -->  00:11:51.216
Now the thing is that this will have a decimal.
220

220

00:11:51.216  -->  00:11:53.758
So imagine it would be, here, instead of 100,
221

221

00:11:53.758  -->  00:11:55.361
it would be 300.
222

222

00:11:56.623  -->  00:12:00.556
Then we would've spent 33.333 and so on.
223

223

00:12:04.123  -->  00:12:07.693
So this would be 0.3333.
224

224

00:12:07.693  -->  00:12:09.929
But we don't want that, we really just want
225

225

00:12:09.929  -->  00:12:13.576
this integer part here, so let's also round this result.
226

226

00:12:15.627  -->  00:12:17.303
And we already did that before.
227

227

00:12:17.303  -->  00:12:19.939
So remember, we use the Math object.
228

228

00:12:19.939  -->  00:12:23.876
And in here, there's a nice method called round.
229

229

00:12:23.876  -->  00:12:27.792
And so this will round whatever we input here
230

230

00:12:27.792  -->  00:12:30.076
to the closest integer.
231

231

00:12:32.727  -->  00:12:33.899
Okay.
232

232

00:12:33.899  -->  00:12:36.544
And with this, we calculate our percentage.
233

233

00:12:37.456  -->  00:12:40.626
So we have now everything that we wanted this method to do.
234

234

00:12:40.626  -->  00:12:43.395
So we have our total income and expense,
235

235

00:12:43.395  -->  00:12:47.032
we have our budget and our percentage.
236

236

00:12:47.032  -->  00:12:51.118
So let's now use this method in our global app control.
237

237

00:12:52.271  -->  00:12:53.872
So this is down here.
238

238

00:12:53.872  -->  00:12:55.975
So calculate the budget.
239

239

00:12:55.975  -->  00:13:00.212
So we say budgetController, as you already know,
240

240

00:13:00.212  -->  00:13:04.982
and then our newly created method, which is calculateBudget.
241

241

00:13:06.752  -->  00:13:08.888
All right, so this calculates the budget.
242

242

00:13:08.888  -->  00:13:12.858
And now we need a method which returns the budget to us
243

243

00:13:12.858  -->  00:13:15.861
so that we can store it here in a variable
244

244

00:13:15.861  -->  00:13:18.998
and then pass it on to the user interface controller,
245

245

00:13:18.998  -->  00:13:22.791
which is then gonna display it here in this third point.
246

246

00:13:23.736  -->  00:13:25.704
So let's do that very quickly.
247

247

00:13:25.704  -->  00:13:28.190
So again, in our budgetController,
248

248

00:13:29.074  -->  00:13:31.456
we need a new method.
249

249

00:13:31.456  -->  00:13:35.442
And this is gonna be called getBudget.
250

250

00:13:41.554  -->  00:13:43.556
And again, I'm doing it like this.
251

251

00:13:43.556  -->  00:13:46.859
I'm creating a method only for returning
252

252

00:13:46.859  -->  00:13:50.296
something from our data structure or from our module
253

253

00:13:50.296  -->  00:13:52.798
so that you get used to this whole philosophy
254

254

00:13:52.798  -->  00:13:56.101
of having functions that only retrieve data,
255

255

00:13:56.101  -->  00:13:59.872
or functions that only set data.
256

256

00:13:59.872  -->  00:14:03.324
So let's write this very simple method here.
257

257

00:14:03.324  -->  00:14:07.146
And again, budget returns not only to the budget itself
258

258

00:14:07.146  -->  00:14:10.316
but also to the total incomes and expenses
259

259

00:14:10.316  -->  00:14:12.084
and the percentage as well.
260

260

00:14:12.084  -->  00:14:14.753
So we wanna return these four values.
261

261

00:14:14.753  -->  00:14:18.857
And what's the best way to return four or even more values
262

262

00:14:18.857  -->  00:14:21.060
at the same time?
263

263

00:14:21.060  -->  00:14:22.061
Exactly.
264

264

00:14:22.061  -->  00:14:24.230
We're gonna use an object.
265

265

00:14:24.230  -->  00:14:28.334
So we simply do it like this, return this object.
266

266

00:14:28.334  -->  00:14:30.836
And in here, we now create the four properties
267

267

00:14:30.836  -->  00:14:32.723
for the four values.
268

268

00:14:33.639  -->  00:14:37.843
So budget will be data.budget, right?
269

269

00:14:39.713  -->  00:14:42.915
Because remember, that is the place where we store
270

270

00:14:42.915  -->  00:14:46.813
the result of that calculation, okay?
271

271

00:14:47.933  -->  00:14:50.757
Then we want the total income.
272

272

00:14:51.890  -->  00:14:53.792
So just like this.
273

273

00:14:53.792  -->  00:14:55.794
And this is stored also in the data structure
274

274

00:14:55.794  -->  00:14:58.330
in the totals,
275

275

00:14:58.330  -->  00:15:01.634
and then in the inc property.
276

276

00:15:01.634  -->  00:15:04.681
Now the same for the expenses.
277

277

00:15:10.609  -->  00:15:14.086
And finally, we also want the percentage, of course.
278

278

00:15:18.317  -->  00:15:20.419
And that's it, that's all that this function,
279

279

00:15:20.419  -->  00:15:23.355
that this method here has to do.
280

280

00:15:23.355  -->  00:15:26.221
So let's now use it here.
281

281

00:15:28.260  -->  00:15:31.430
And this time, we return something so we have to store it
282

282

00:15:31.430  -->  00:15:33.532
in a variable, of course.
283

283

00:15:33.532  -->  00:15:36.514
So let's simply call it budget, okay?
284

284

00:15:36.514  -->  00:15:38.656
So var budget
285

285

00:15:39.672  -->  00:15:43.368
is the result of calling
286

286

00:15:43.368  -->  00:15:46.886
budgetController.getBudget.
287

287

00:15:48.213  -->  00:15:49.214
And that's it.
288

288

00:15:49.214  -->  00:15:51.216
So now we should have the budget stored here
289

289

00:15:51.216  -->  00:15:53.319
in this variable.
290

290

00:15:53.319  -->  00:15:56.021
So we are ready to display it in the user interface.
291

291

00:15:56.021  -->  00:15:58.390
But I'm gonna leave that to the next lecture.
292

292

00:15:58.390  -->  00:16:01.560
So right now, I just wanna console log this object
293

293

00:16:01.560  -->  00:16:04.663
so that we can see if everything we did before
294

294

00:16:04.663  -->  00:16:06.165
is working, okay?
295

295

00:16:06.165  -->  00:16:08.200
So budget here.
296

296

00:16:08.200  -->  00:16:11.437
And remember, this whole updateBudget function
297

297

00:16:11.437  -->  00:16:15.274
is called each time we enter a new item
298

298

00:16:15.274  -->  00:16:17.376
into the user interface, right?
299

299

00:16:17.376  -->  00:16:18.644
So let me see.
300

300

00:16:18.644  -->  00:16:22.014
So it comes from here, okay.
301

301

00:16:22.014  -->  00:16:25.317
So the ctrlAddItem function is called each time
302

302

00:16:25.317  -->  00:16:28.020
that we input a new element, okay?
303

303

00:16:28.020  -->  00:16:31.824
So this calls the updateBudget function,
304

304

00:16:31.824  -->  00:16:35.127
which is this one, which then in turn called
305

305

00:16:35.127  -->  00:16:36.862
all of these methods here.
306

306

00:16:36.862  -->  00:16:40.699
So the calculateBudget and getBudget methods.
307

307

00:16:40.699  -->  00:16:43.268
So this console.log here will appear in the console
308

308

00:16:43.268  -->  00:16:46.538
each time we input a new item.
309

309

00:16:46.538  -->  00:16:49.719
So let's now test this.
310

310

00:16:49.719  -->  00:16:52.332
So let's say Project.
311

311

00:16:59.718  -->  00:17:00.719
And okay.
312

312

00:17:00.719  -->  00:17:04.486
So down here we have our budget object, okay?
313

313

00:17:05.336  -->  00:17:07.126
And let's take a look at it.
314

314

00:17:07.126  -->  00:17:09.461
So the total expenses are zero,
315

315

00:17:09.461  -->  00:17:12.526
the total income is 2100,
316

316

00:17:12.526  -->  00:17:15.202
and the budget is, of course, 2100.
317

317

00:17:15.202  -->  00:17:16.602
And there is no percentage.
318

318

00:17:16.602  -->  00:17:18.871
So everything seems to be working, right?
319

319

00:17:18.871  -->  00:17:20.705
Let's just add another one.
320

320

00:17:20.705  -->  00:17:24.642
So I sold my car again for $1500.
321

321

00:17:26.062  -->  00:17:28.881
And so let's see the budget now.
322

322

00:17:28.881  -->  00:17:32.217
So this is the sum of 2100 plus 1500,
323

323

00:17:32.217  -->  00:17:35.554
and this makes 3,600.
324

324

00:17:35.554  -->  00:17:39.224
And the budget is also 3,600 because we don't have
325

325

00:17:39.224  -->  00:17:41.560
any expenses yet.
326

326

00:17:41.560  -->  00:17:45.914
So let's say we went on a holiday, which was $1800.
327

327

00:17:47.366  -->  00:17:49.781
And now here we are.
328

328

00:17:51.303  -->  00:17:53.029
Oh, actually I did this wrong,
329

329

00:17:53.029  -->  00:17:56.375
I put it in as another holiday, as another income,
330

330

00:17:56.375  -->  00:17:59.167
so I have to change this of course,
331

331

00:17:59.167  -->  00:18:03.195
so let's now say Holiday for 3,600.
332

332

00:18:04.716  -->  00:18:08.253
That's because I wanna show you the exact percentage.
333

333

00:18:08.253  -->  00:18:11.924
Okay, so now this seems to be working.
334

334

00:18:11.924  -->  00:18:16.828
So the budget is 1800 because it's 5,400 minus 3,600.
335

335

00:18:18.363  -->  00:18:19.598
Yeah, makes sense.
336

336

00:18:19.598  -->  00:18:22.547
And then the percentage is 67.
337

337

00:18:22.547  -->  00:18:24.636
And that's because, let's calculate it here,
338

338

00:18:24.636  -->  00:18:28.554
3,600 divided by 5,400
339

339

00:18:30.784  -->  00:18:32.604
is this number here.
340

340

00:18:32.604  -->  00:18:35.605
And if we multiply this by 100,
341

341

00:18:37.049  -->  00:18:40.457
then it gives 67% if we round this, okay?
342

342

00:18:41.386  -->  00:18:43.222
So this is actually working,
343

343

00:18:43.222  -->  00:18:45.491
though there's only one thing to correct,
344

344

00:18:45.491  -->  00:18:47.526
and let me just reload this for that.
345

345

00:18:47.526  -->  00:18:51.296
Image that we only have expenses, okay?
346

346

00:18:51.296  -->  00:18:54.466
So let's say again holiday for $900.
347

347

00:18:56.536  -->  00:18:58.837
And now we have this problem here,
348

348

00:18:58.837  -->  00:19:02.708
the percentage gives us this weird Infinity value.
349

349

00:19:02.708  -->  00:19:04.272
So Infinity.
350

350

00:19:04.272  -->  00:19:07.312
And that's because we cannot divide anything by zero,
351

351

00:19:07.312  -->  00:19:09.314
which is what we attempted to do here.
352

352

00:19:09.314  -->  00:19:12.551
So we did 900 divided by zero because we don't have
353

353

00:19:12.551  -->  00:19:16.188
any income yet, and that's not allowed in mathematics.
354

354

00:19:16.188  -->  00:19:19.230
And so we have to fix that in our code.
355

355

00:19:20.859  -->  00:19:24.062
So let's go back to the method where we calculate this.
356

356

00:19:24.062  -->  00:19:25.531
And it's right here.
357

357

00:19:25.531  -->  00:19:28.834
So what we have to say is that we only want this calculation
358

358

00:19:28.834  -->  00:19:31.103
when we already have some income.
359

359

00:19:31.103  -->  00:19:34.606
So when the total income is greater than zero.
360

360

00:19:34.606  -->  00:19:37.741
So let's use an if statement.
361

361

00:19:37.741  -->  00:19:40.019
So if the data
362

362

00:19:41.280  -->  00:19:44.946
totals income is greater than zero,
363

363

00:19:47.653  -->  00:19:50.768
then we want this to happen, okay?
364

364

00:19:53.271  -->  00:19:55.692
And if it's not,
365

365

00:19:57.396  -->  00:20:02.072
then we simply want the data percentage to be minus one,
366

366

00:20:03.235  -->  00:20:07.773
which, as I explained before, is basically the nonexistents.
367

367

00:20:07.773  -->  00:20:09.875
So when there's no percentage to calculate,
368

368

00:20:09.875  -->  00:20:11.910
we just say it's minus minus one,
369

369

00:20:11.910  -->  00:20:14.780
and we'll use that minus one later when we display
370

370

00:20:14.780  -->  00:20:18.359
this percentage on the user interface, okay?
371

371

00:20:20.019  -->  00:20:22.387
So let's now very quickly test this again.
372

372

00:20:23.765  -->  00:20:26.325
So add an expense,
373

373

00:20:26.325  -->  00:20:28.873
holiday for $900.
374

374

00:20:30.081  -->  00:20:31.536
And now, here it is.
375

375

00:20:31.536  -->  00:20:33.265
So now our percentage is minus one,
376

376

00:20:33.265  -->  00:20:35.233
and everything else is also working.
377

377

00:20:35.233  -->  00:20:37.369
So the total budget is negative, of course,
378

378

00:20:37.369  -->  00:20:41.004
because zero minus 100 is minus 900.
379

379

00:20:42.007  -->  00:20:45.377
So the next step is, of course, to add this budget here
380

380

00:20:45.377  -->  00:20:48.447
to our user interface right here in this field.
381

381

00:20:48.447  -->  00:20:52.517
So here and here and here and here.
382

382

00:20:52.517  -->  00:20:55.194
So let's do that right in the next lecture.
