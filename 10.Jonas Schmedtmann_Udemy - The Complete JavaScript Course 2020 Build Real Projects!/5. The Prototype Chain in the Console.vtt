WEBVTT
1
1

00:00:01.167  -->  00:00:03.901
<v Instructor>The JavaScript console in our browsers</v>
2

2

00:00:03.901  -->  00:00:07.517
is a very powerful tool to inspect objects
3

3

00:00:07.517  -->  00:00:09.388
and the prototype chain.
4

4

00:00:09.388  -->  00:00:13.555
So let's now quickly see how we can do that in practice.
5

5

00:00:15.744  -->  00:00:19.290
So I'm first gonna show you how we can inspect
6

6

00:00:19.290  -->  00:00:22.358
the object that we just created in the last lecture
7

7

00:00:22.358  -->  00:00:24.378
right here in the console.
8

8

00:00:24.378  -->  00:00:27.631
Because the console is not just to log some stuff
9

9

00:00:27.631  -->  00:00:30.763
here into our console, like we've been doing,
10

10

00:00:30.763  -->  00:00:32.893
but also to do more powerful stuff
11

11

00:00:32.893  -->  00:00:34.893
like inspecting objects.
12

12

00:00:36.366  -->  00:00:39.459
So let's first clear this, alright?
13

13

00:00:39.459  -->  00:00:43.049
And now we simply have to write the name of our object.
14

14

00:00:43.049  -->  00:00:45.985
So you see this is a Person object.
15

15

00:00:45.985  -->  00:00:49.253
And then our name, yearOfBirth, and job.
16

16

00:00:49.253  -->  00:00:52.194
But now if we hit this little arrow here, then
17

17

00:00:52.194  -->  00:00:56.805
we get a lot of additional information about the object.
18

18

00:00:56.805  -->  00:01:01.242
Alright, so first here we can see all the properties
19

19

00:01:01.242  -->  00:01:03.133
that we added to this object.
20

20

00:01:03.133  -->  00:01:05.597
So the job, the name and the yearOfBirth
21

21

00:01:05.597  -->  00:01:09.602
that we associated to this very particular object.
22

22

00:01:09.602  -->  00:01:12.013
So everything is correct here, right?
23

23

00:01:12.013  -->  00:01:16.096
Now down here we have something called the proto.
24

24

00:01:17.187  -->  00:01:20.885
And this is, in fact, the prototype of the john object
25

25

00:01:20.885  -->  00:01:23.828
which is, and I'm sure you remember this,
26

26

00:01:23.828  -->  00:01:28.056
the prototype property of the person constructor.
27

27

00:01:28.056  -->  00:01:30.432
So let's take a look at that.
28

28

00:01:30.432  -->  00:01:33.669
Okay, so here we have the calculateAge method
29

29

00:01:33.669  -->  00:01:37.137
that we added to our prototype here, right?
30

30

00:01:37.137  -->  00:01:40.274
So here we said Person.prototype.calculateAge.
31

31

00:01:40.274  -->  00:01:44.829
And so we can see the calculateAge method here in the proto
32

32

00:01:44.829  -->  00:01:49.305
which again is john's prototype, and therefore it's the
33

33

00:01:49.305  -->  00:01:53.470
prototype property of the person function constructor.
34

34

00:01:53.470  -->  00:01:57.718
And we also have the lastname property that we also added.
35

35

00:01:57.718  -->  00:02:01.885
So let's also quickly take a look at Person.prototype.
36

36

00:02:06.158  -->  00:02:10.325
Okay, and let's get some more space here for our console.
37

37

00:02:12.047  -->  00:02:15.866
So we see that this is in fact the exact same thing, right?
38

38

00:02:15.866  -->  00:02:20.041
This and this, here it looks the exact same way.
39

39

00:02:20.041  -->  00:02:24.640
And just to prove you that John's prototype is in fact
40

40

00:02:24.640  -->  00:02:27.168
the prototype property of the person
41

41

00:02:27.168  -->  00:02:29.751
I can actually do it like this.
42

42

00:02:31.272  -->  00:02:32.105
So proto
43

43

00:02:34.591  -->  00:02:36.241
and then let's see what this
44

44

00:02:36.241  -->  00:02:39.658
comparison operator now is gonna give us.
45

45

00:02:42.669  -->  00:02:43.586
Okay, true.
46

46

00:02:44.541  -->  00:02:48.446
So all this means is that in fact the prototype
47

47

00:02:48.446  -->  00:02:51.878
of john is the prototype property of the
48

48

00:02:51.878  -->  00:02:53.642
person function constructor.
49

49

00:02:53.642  -->  00:02:57.113
But I'm sure that you know this already by now.
50

50

00:02:57.113  -->  00:03:00.421
So let's go back to our john object here.
51

51

00:03:00.421  -->  00:03:04.120
And actually I'm going to clear this and write it again.
52

52

00:03:04.120  -->  00:03:05.695
Alright.
53

53

00:03:05.695  -->  00:03:07.384
So this is a proto.
54

54

00:03:07.384  -->  00:03:09.853
Now if we look at the prototype of john,
55

55

00:03:09.853  -->  00:03:14.208
we see that there is also a prototype here, right?
56

56

00:03:14.208  -->  00:03:16.183
So let's open that,
57

57

00:03:16.183  -->  00:03:17.322
and here we see that
58

58

00:03:17.322  -->  00:03:20.969
this is the prototype property of the object constructor.
59

59

00:03:20.969  -->  00:03:23.748
So as I said, right, in the first lecture about
60

60

00:03:23.748  -->  00:03:25.906
the prototype chain, all of the objects
61

61

00:03:25.906  -->  00:03:30.190
are actually instances of the object object.
62

62

00:03:30.190  -->  00:03:31.664
Right?
63

63

00:03:31.664  -->  00:03:33.201
So let me open this again.
64

64

00:03:33.201  -->  00:03:37.053
Okay, and so here we have a bunch of methods that are
65

65

00:03:37.053  -->  00:03:41.337
associated to the prototype property of the object
66

66

00:03:41.337  -->  00:03:42.968
function constructor.
67

67

00:03:42.968  -->  00:03:46.457
So again, this one here is the prototype property
68

68

00:03:46.457  -->  00:03:49.248
of the person function constructor.
69

69

00:03:49.248  -->  00:03:53.039
And this here is the prototype property of the
70

70

00:03:53.039  -->  00:03:54.837
object function constructor.
71

71

00:03:54.837  -->  00:03:57.695
And that's because the person function constructor
72

72

00:03:57.695  -->  00:04:02.416
is in fact an instance of the object function constructor.
73

73

00:04:02.416  -->  00:04:03.588
Right?
74

74

00:04:03.588  -->  00:04:05.481
And that's why we can see this whole
75

75

00:04:05.481  -->  00:04:08.606
prototype chain here, right?
76

76

00:04:08.606  -->  00:04:11.544
So as I said this console here is really useful
77

77

00:04:11.544  -->  00:04:13.847
to visualize this prototype chain
78

78

00:04:13.847  -->  00:04:17.638
and all of the prototypes that are in it.
79

79

00:04:17.638  -->  00:04:20.687
So as we already know we have now access
80

80

00:04:20.687  -->  00:04:22.891
to these methods here, right?
81

81

00:04:22.891  -->  00:04:25.550
And that's right to our john object.
82

82

00:04:25.550  -->  00:04:28.869
So thanks to the prototype chain on john,
83

83

00:04:28.869  -->  00:04:32.989
we can use these exact methods that are here.
84

84

00:04:32.989  -->  00:04:34.908
And now I'm going to use the hasOwn property method
85

85

00:04:34.908  -->  00:04:37.121
just to show it to you
86

86

00:04:37.121  -->  00:04:39.752
because it can be useful sometimes.
87

87

00:04:39.752  -->  00:04:43.072
So we can use this method to ask, basically,
88

88

00:04:43.072  -->  00:04:45.989
if an object has a property or not.
89

89

00:04:46.956  -->  00:04:49.789
So we can do john.hasOwn property,
90

90

00:04:53.531  -->  00:04:55.614
and then job for example.
91

91

00:04:56.880  -->  00:04:58.265
And this is true.
92

92

00:04:58.265  -->  00:05:03.017
Because this object has a property called job, right?
93

93

00:05:03.017  -->  00:05:04.517
Now if we try this
94

94

00:05:06.134  -->  00:05:06.967
with
95

95

00:05:08.591  -->  00:05:10.341
the lastname property
96

96

00:05:12.992  -->  00:05:15.384
then it's going to give us false.
97

97

00:05:15.384  -->  00:05:19.048
And that is because this is not john's own property.
98

98

00:05:19.048  -->  00:05:22.634
So this method only looks for own properties.
99

99

00:05:22.634  -->  00:05:26.228
This is a property that we inherited from the prototype.
100

100

00:05:26.228  -->  00:05:29.212
It's not really john's own property.
101

101

00:05:29.212  -->  00:05:32.190
And that's why this gives false.
102

102

00:05:32.190  -->  00:05:35.981
And this method can sometimes be quite useful.
103

103

00:05:35.981  -->  00:05:38.886
And now there's another operator that I want to show you.
104

104

00:05:38.886  -->  00:05:41.297
And this one is called instanceOf.
105

105

00:05:41.297  -->  00:05:44.880
So I'm going to say john.instanceOf.Person.
106

106

00:05:49.617  -->  00:05:51.732
And this is also like a question
107

107

00:05:51.732  -->  00:05:53.805
because it will also give us true or false
108

108

00:05:53.805  -->  00:05:56.176
and in this case, you can probably guess
109

109

00:05:56.176  -->  00:05:58.843
that it's going to give us true.
110

110

00:05:59.717  -->  00:06:02.473
So john is of course an instance of Person
111

111

00:06:02.473  -->  00:06:04.932
because we created it through the
112

112

00:06:04.932  -->  00:06:07.522
person function constructor.
113

113

00:06:07.522  -->  00:06:10.683
And this one can also be useful sometimes.
114

114

00:06:10.683  -->  00:06:14.106
Okay and with this we inspected our john object
115

115

00:06:14.106  -->  00:06:17.209
and the prototype chain that we just created.
116

116

00:06:17.209  -->  00:06:19.983
Now there's only one more thing that I want to show you
117

117

00:06:19.983  -->  00:06:22.044
and that is to prove you again that
118

118

00:06:22.044  -->  00:06:24.821
almost everything is an object.
119

119

00:06:24.821  -->  00:06:27.404
So let me create an array here.
120

120

00:06:28.896  -->  00:06:32.629
Just like this, just a very simple one.
121

121

00:06:32.629  -->  00:06:34.738
And let's now get some information about it.
122

122

00:06:34.738  -->  00:06:38.636
So if we just did X, not a lot is going to happen.
123

123

00:06:38.636  -->  00:06:41.397
We cannot inspect this object right now.
124

124

00:06:41.397  -->  00:06:43.897
So we need to use console.info
125

125

00:06:45.009  -->  00:06:49.661
and now we will be able to look inside of this object.
126

126

00:06:49.661  -->  00:06:51.250
And this is what we see.
127

127

00:06:51.250  -->  00:06:54.191
So we see the elements and then we also see
128

128

00:06:54.191  -->  00:06:57.171
this length property here, right?
129

129

00:06:57.171  -->  00:06:59.613
And do you remember this length property?
130

130

00:06:59.613  -->  00:07:01.564
We use it all the time, for example,
131

131

00:07:01.564  -->  00:07:03.745
in our loops, right?
132

132

00:07:03.745  -->  00:07:07.560
And so now you know where this actually comes from.
133

133

00:07:07.560  -->  00:07:09.786
It used to look a bit like magic, right?
134

134

00:07:09.786  -->  00:07:11.317
But of course it's not.
135

135

00:07:11.317  -->  00:07:13.315
So it's always stored right here
136

136

00:07:13.315  -->  00:07:15.095
in this array instance.
137

137

00:07:15.095  -->  00:07:19.100
And that's why we can very simply use this property.
138

138

00:07:19.100  -->  00:07:21.078
So something like this.
139

139

00:07:21.078  -->  00:07:22.411
So X.length is 3
140

140

00:07:25.944  -->  00:07:27.968
simply because this is stored
141

141

00:07:27.968  -->  00:07:30.259
right into this array object.
142

142

00:07:30.259  -->  00:07:32.731
Alright, and it gets even better, because
143

143

00:07:32.731  -->  00:07:36.599
down here we can also see the prototype of this array
144

144

00:07:36.599  -->  00:07:40.363
which of course is the array function constructor.
145

145

00:07:40.363  -->  00:07:42.343
So this is another function constructor
146

146

00:07:42.343  -->  00:07:45.440
that is built right into JavaScript,
147

147

00:07:45.440  -->  00:07:48.635
and allows us to simply build arrays.
148

148

00:07:48.635  -->  00:07:50.675
And here in its prototype property
149

149

00:07:50.675  -->  00:07:52.795
we can see all of these methods
150

150

00:07:52.795  -->  00:07:54.928
that we have already used before
151

151

00:07:54.928  -->  00:07:55.761
like pop
152

152

00:07:57.861  -->  00:07:59.825
and push here, right?
153

153

00:07:59.825  -->  00:08:02.242
Or we used and shift as well.
154

154

00:08:03.431  -->  00:08:05.994
So all these methods are right here
155

155

00:08:05.994  -->  00:08:08.549
in the prototype property of the array.
156

156

00:08:08.549  -->  00:08:10.672
And that's why we can use them.
157

157

00:08:10.672  -->  00:08:13.808
So that you never wonder why we could simply call
158

158

00:08:13.808  -->  00:08:16.179
the push method or something like this
159

159

00:08:16.179  -->  00:08:19.147
on all of our arrays, so now you know.
160

160

00:08:19.147  -->  00:08:22.544
It's because of the prototype chain.
161

161

00:08:22.544  -->  00:08:25.386
So all the arrays that we ever create will always have
162

162

00:08:25.386  -->  00:08:27.993
access to these methods because
163

163

00:08:27.993  -->  00:08:30.617
they are stored in their prototype.
164

164

00:08:30.617  -->  00:08:34.346
And that is how useful inheritance really is.
165

165

00:08:34.346  -->  00:08:36.387
So I hope things are really starting
166

166

00:08:36.387  -->  00:08:38.181
to make sense for you now.
167

167

00:08:38.181  -->  00:08:40.014
So let's now move on.
