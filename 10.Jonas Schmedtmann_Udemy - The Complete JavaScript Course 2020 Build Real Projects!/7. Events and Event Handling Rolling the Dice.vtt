WEBVTT
1
1

00:00:00.807  -->  00:00:02.200
<v Instructor>Before we move on,</v>
2

2

00:00:02.200  -->  00:00:04.859
with coding the roll the dice button,
3

3

00:00:04.859  -->  00:00:07.422
let's talk about another important topic
4

4

00:00:07.422  -->  00:00:11.770
that is closely related with the DOM and DOM manipulation,
5

5

00:00:11.770  -->  00:00:13.020
and its events.
6

6

00:00:14.951  -->  00:00:17.456
events are like notifications
7

7

00:00:17.456  -->  00:00:20.025
that are sent to notify our code
8

8

00:00:20.025  -->  00:00:23.435
that something happened on the webpage.
9

9

00:00:23.435  -->  00:00:27.319
And events are triggered by things like clicking a button,
10

10

00:00:27.319  -->  00:00:31.486
resizing a window, scrolling down, or, even pressing a key.
11

11

00:00:33.208  -->  00:00:36.392
We can use Event Listeners to code responses
12

12

00:00:36.392  -->  00:00:40.121
to all these events, like, opening up a pop-up window,
13

13

00:00:40.121  -->  00:00:44.568
showing animations, and so on, and so forth.
14

14

00:00:44.568  -->  00:00:47.749
So, an Event Listener is just a function
15

15

00:00:47.749  -->  00:00:50.019
that basically sits there and waits
16

16

00:00:50.019  -->  00:00:52.741
for a specific event to happen.
17

17

00:00:52.741  -->  00:00:55.824
And how is that event then processed?
18

18

00:00:56.880  -->  00:01:01.571
Well, first, we need to remember about the Execution Stack.
19

19

00:01:01.571  -->  00:01:04.671
And that's because, the rule is that an event
20

20

00:01:04.671  -->  00:01:07.219
can only be processed, or handled,
21

21

00:01:07.219  -->  00:01:11.140
as soon as the Execution Stack is empty.
22

22

00:01:11.140  -->  00:01:14.931
Which means, all of the functions have returned.
23

23

00:01:14.931  -->  00:01:18.582
So, in here, we currently have two Execution Contexts
24

24

00:01:18.582  -->  00:01:19.874
on the Stack.
25

25

00:01:19.874  -->  00:01:22.457
So, these have to return first.
26

26

00:01:24.112  -->  00:01:25.630
Just like this.
27

27

00:01:25.630  -->  00:01:28.297
Okay, so besides the Execution Stack,
28

28

00:01:28.297  -->  00:01:30.892
we also have something called the Message Queue
29

29

00:01:30.892  -->  00:01:32.912
in the JavaScript engine.
30

30

00:01:32.912  -->  00:01:34.308
This is where all the events
31

31

00:01:34.308  -->  00:01:36.987
that happen in the browser are put.
32

32

00:01:36.987  -->  00:01:40.000
And they sit there, waiting to be processed.
33

33

00:01:40.000  -->  00:01:44.179
Which, as I said, only happens once the Execution Stack
34

34

00:01:44.179  -->  00:01:45.680
is empty.
35

35

00:01:45.680  -->  00:01:48.768
And that is the case now, here, in our example.
36

36

00:01:48.768  -->  00:01:53.656
So, the next event in the line, will now get processed.
37

37

00:01:53.656  -->  00:01:55.975
Remember, from the last slide,
38

38

00:01:55.975  -->  00:01:59.214
that we can have something called an Event Listener,
39

39

00:01:59.214  -->  00:02:02.732
which is a function that reacts to an event.
40

40

00:02:02.732  -->  00:02:05.649
So, that Event Listener is now called.
41

41

00:02:05.649  -->  00:02:07.812
And since it's a function,
42

42

00:02:07.812  -->  00:02:11.089
it gets its own Execution Context,
43

43

00:02:11.089  -->  00:02:13.988
which is then put at the top of the stack,
44

44

00:02:13.988  -->  00:02:17.073
and becomes the active Execution Context.
45

45

00:02:17.073  -->  00:02:19.793
So, this is how event are processed,
46

46

00:02:19.793  -->  00:02:22.472
and how Event Listeners work.
47

47

00:02:22.472  -->  00:02:25.555
So, let's now use what we just learned in practice,
48

48

00:02:25.555  -->  00:02:27.805
in the rest of the lecture.
49

49

00:02:29.290  -->  00:02:30.944
In this lecture, you will learn how to
50

50

00:02:30.944  -->  00:02:34.593
set up an event handler, what a callback function is,
51

51

00:02:34.593  -->  00:02:38.146
and also, what an anonymous function is.
52

52

00:02:38.146  -->  00:02:42.226
You'll also learn another way to select elements by IDs,
53

53

00:02:42.226  -->  00:02:46.393
and, how to change the image in the HTML image element.
54

54

00:02:48.267  -->  00:02:52.098
Alright, so let's now set up our event handler.
55

55

00:02:52.098  -->  00:02:55.685
And the first step is to select the element
56

56

00:02:55.685  -->  00:02:57.795
in which the event will happen.
57

57

00:02:57.795  -->  00:03:00.521
So in this case, it will be the button,
58

58

00:03:00.521  -->  00:03:03.470
where we will roll the dice.
59

59

00:03:03.470  -->  00:03:06.070
So, this button here, right?
60

60

00:03:06.070  -->  00:03:08.122
So, let's go into our HTML file,
61

61

00:03:08.122  -->  00:03:11.611
and find out how this one is called.
62

62

00:03:11.611  -->  00:03:14.142
And it's this one here, so, roll dice,
63

63

00:03:14.142  -->  00:03:18.104
and the class for this one is the button roll.
64

64

00:03:18.104  -->  00:03:19.686
Button, right?
65

65

00:03:19.686  -->  00:03:20.936
So, B-T-N roll.
66

66

00:03:21.877  -->  00:03:23.508
Okay.
67

67

00:03:23.508  -->  00:03:26.492
Once again, we need to select this element.
68

68

00:03:26.492  -->  00:03:29.421
So, by now, you've seen that it always works like this.
69

69

00:03:29.421  -->  00:03:33.182
So, we first select something, using querySelector.
70

70

00:03:33.182  -->  00:03:34.973
So, like this.
71

71

00:03:34.973  -->  00:03:38.773
Then after that, we do something with that selection
72

72

00:03:38.773  -->  00:03:42.305
that the querySelector method returns.
73

73

00:03:42.305  -->  00:03:46.138
So, once again, we use document.querySelector.
74

74

00:03:49.924  -->  00:03:52.591
And now, we use the button roll.
75

75

00:03:55.973  -->  00:03:56.806
Alright.
76

76

00:03:56.806  -->  00:03:58.864
So we have our selection, and now,
77

77

00:03:58.864  -->  00:04:02.657
we can add the Event Listener, which is as simple as this,
78

78

00:04:02.657  -->  00:04:05.757
add, and here, we already have it.
79

79

00:04:05.757  -->  00:04:07.507
So, addEventListener.
80

80

00:04:09.809  -->  00:04:12.619
And here, we have two arguments.
81

81

00:04:12.619  -->  00:04:16.087
The first one is the event type, which in our case,
82

82

00:04:16.087  -->  00:04:17.420
is simply click.
83

83

00:04:19.335  -->  00:04:21.956
So there are a lot of events, as I told you,
84

84

00:04:21.956  -->  00:04:23.967
and this one is the click event,
85

85

00:04:23.967  -->  00:04:25.607
but there are a lot of them.
86

86

00:04:25.607  -->  00:04:28.176
And so, we have a nice, handy reference,
87

87

00:04:28.176  -->  00:04:29.996
which I already have here.
88

88

00:04:29.996  -->  00:04:33.879
So, once again, this is on the MDN webpage,
89

89

00:04:33.879  -->  00:04:37.818
where I also showed you the operator precedence table.
90

90

00:04:37.818  -->  00:04:39.986
So, let's search for the one that we used.
91

91

00:04:39.986  -->  00:04:40.819
So, click.
92

92

00:04:42.857  -->  00:04:45.565
So, this is the click event.
93

93

00:04:45.565  -->  00:04:47.762
And it's one of the Mouse Events.
94

94

00:04:47.762  -->  00:04:50.682
But there are lots of them, so, mouseenter, mousemove,
95

95

00:04:50.682  -->  00:04:55.361
mouseover, mousedown, mouseup, and all of these events.
96

96

00:04:55.361  -->  00:04:57.680
Then, we have Drag &amp; Drop Events.
97

97

00:04:57.680  -->  00:04:59.930
We have these Media Events.
98

98

00:05:00.849  -->  00:05:04.431
And, we also have Keyboard Events up here,
99

99

00:05:04.431  -->  00:05:08.598
Clipboard Events, so when we copy or cut something,
100

100

00:05:09.510  -->  00:05:13.661
and let's just see lots of events are possible.
101

101

00:05:13.661  -->  00:05:18.348
For example, when the page unloads, or when our page loads,
102

102

00:05:18.348  -->  00:05:20.328
and all these kinds of Events.
103

103

00:05:20.328  -->  00:05:22.638
So when you need something else, beside click,
104

104

00:05:22.638  -->  00:05:25.129
or beside anything that we will learn in this course,
105

105

00:05:25.129  -->  00:05:27.662
you can just come to this reference here,
106

106

00:05:27.662  -->  00:05:29.495
and use it from there.
107

107

00:05:30.608  -->  00:05:34.210
Okay, so the first argument to the addEventListener,
108

108

00:05:34.210  -->  00:05:35.960
is the type of event.
109

109

00:05:37.450  -->  00:05:41.089
Now, the second part is the function that will be called
110

110

00:05:41.089  -->  00:05:44.050
as soon as the event happens.
111

111

00:05:44.050  -->  00:05:46.070
So, for now, we'll leave this empty.
112

112

00:05:46.070  -->  00:05:48.978
So, imagine that we would have a function
113

113

00:05:48.978  -->  00:05:53.367
that we want to call, when we click on the button.
114

114

00:05:53.367  -->  00:05:57.200
So, I'm just going to call it function button,
115

115

00:06:00.278  -->  00:06:03.445
with no parameters and just like this.
116

116

00:06:05.691  -->  00:06:06.579
Do something here.
117

117

00:06:06.579  -->  00:06:08.019
Okay.
118

118

00:06:08.019  -->  00:06:10.576
So, remember, if you wanted to call this function,
119

119

00:06:10.576  -->  00:06:13.438
we would do it like this, button, and then
120

120

00:06:13.438  -->  00:06:16.642
the call function operator, which is this one, right?
121

121

00:06:16.642  -->  00:06:17.951
So, in order to call a function,
122

122

00:06:17.951  -->  00:06:20.871
we always use these parentheses.
123

123

00:06:20.871  -->  00:06:23.088
Now, if you want to use this function,
124

124

00:06:23.088  -->  00:06:25.976
as our function, that is called here,
125

125

00:06:25.976  -->  00:06:28.336
as soon as we click in on the button,
126

126

00:06:28.336  -->  00:06:30.556
then, we would simply do it like this,
127

127

00:06:30.556  -->  00:06:32.095
just the name of the function,
128

128

00:06:32.095  -->  00:06:34.875
without the parenthesis operator,
129

129

00:06:34.875  -->  00:06:37.586
because we don't want to call it right here.
130

130

00:06:37.586  -->  00:06:40.776
We want the Event Listener to call the function for us.
131

131

00:06:40.776  -->  00:06:42.535
And this button function
132

132

00:06:42.535  -->  00:06:45.557
is then called the callback function.
133

133

00:06:45.557  -->  00:06:49.196
And that's because it's a function that is not called by us,
134

134

00:06:49.196  -->  00:06:51.704
but, by another function.
135

135

00:06:51.704  -->  00:06:53.753
So, this is what a callback function is.
136

136

00:06:53.753  -->  00:06:56.693
The function that we pass into another function,
137

137

00:06:56.693  -->  00:07:00.414
as an argument, and this function, in this case,
138

138

00:07:00.414  -->  00:07:01.764
the EventListener method,
139

139

00:07:01.764  -->  00:07:04.847
will then call that function for us.
140

140

00:07:04.847  -->  00:07:05.680
Alright.
141

141

00:07:05.680  -->  00:07:09.136
But, what if we didn't want to have an external function
142

142

00:07:09.136  -->  00:07:11.740
that gets called by the Event Listener?
143

143

00:07:11.740  -->  00:07:14.230
We could simply add the function right here, so,
144

144

00:07:14.230  -->  00:07:16.680
instead of having this function name here,
145

145

00:07:16.680  -->  00:07:19.542
we could write our function right here.
146

146

00:07:19.542  -->  00:07:22.479
And that would be an anonymous function.
147

147

00:07:22.479  -->  00:07:24.102
So, another concept here.
148

148

00:07:24.102  -->  00:07:27.303
So, an anonymous function is simply a function
149

149

00:07:27.303  -->  00:07:28.882
that doesn't have a name.
150

150

00:07:28.882  -->  00:07:30.682
So, it cannot be reused.
151

151

00:07:30.682  -->  00:07:34.265
We can just write function here, like this,
152

152

00:07:35.189  -->  00:07:38.759
then the usual way with our brackets, open it,
153

153

00:07:38.759  -->  00:07:41.470
and then write our function code right here,
154

154

00:07:41.470  -->  00:07:42.910
such as we did before.
155

155

00:07:42.910  -->  00:07:46.827
So, once again, we can write Do something here.
156

156

00:07:50.131  -->  00:07:52.712
Again, if we don't want this function here,
157

157

00:07:52.712  -->  00:07:56.520
on the outside, we can very simple write our function
158

158

00:07:56.520  -->  00:08:00.708
right here, into this EventListener method.
159

159

00:08:00.708  -->  00:08:03.590
And we do that by writing an anonymous function,
160

160

00:08:03.590  -->  00:08:06.600
which is a function that doesn't have a name,
161

161

00:08:06.600  -->  00:08:09.740
and that we, therefore, cannot use outside
162

162

00:08:09.740  -->  00:08:11.360
of this context here.
163

163

00:08:11.360  -->  00:08:14.921
So we cannot call this function button
164

164

00:08:14.921  -->  00:08:17.458
to use it then later, in another place.
165

165

00:08:17.458  -->  00:08:20.082
So, this function can then only be used here.
166

166

00:08:20.082  -->  00:08:21.841
But in this case, that's what we want,
167

167

00:08:21.841  -->  00:08:24.323
because, we don't want to use the button function
168

168

00:08:24.323  -->  00:08:25.156
anywhere else.
169

169

00:08:25.156  -->  00:08:28.485
All we need this to happen, is when someone clicks
170

170

00:08:28.485  -->  00:08:29.805
on a button.
171

171

00:08:29.805  -->  00:08:33.608
So, an anonymous function is the perfect solution here,
172

172

00:08:33.608  -->  00:08:34.818
in this case.
173

173

00:08:34.818  -->  00:08:38.356
And this usually the way that we handle this.
174

174

00:08:38.356  -->  00:08:41.868
Now, what happens as soon as someone clicks the button?
175

175

00:08:41.868  -->  00:08:45.499
So, let's use comments here to define our next steps
176

176

00:08:45.499  -->  00:08:47.418
that we have to take here.
177

177

00:08:47.418  -->  00:08:50.251
So first, we need a random number.
178

178

00:08:54.416  -->  00:08:56.117
Right, and we already did that.
179

179

00:08:56.117  -->  00:09:00.354
So, let's already copy this here into our function.
180

180

00:09:00.354  -->  00:09:02.398
So, we only need this number, as soon as
181

181

00:09:02.398  -->  00:09:03.828
someone hits the button, right?
182

182

00:09:03.828  -->  00:09:08.348
We don't need this right after our application loads.
183

183

00:09:08.348  -->  00:09:11.459
We only need this as soon as someone clicks.
184

184

00:09:11.459  -->  00:09:12.292
Okay.
185

185

00:09:12.292  -->  00:09:16.459
And after that, what we need then, is to display the result.
186

186

00:09:18.277  -->  00:09:19.786
Right?
187

187

00:09:19.786  -->  00:09:23.414
And after that, what we want to do then,
188

188

00:09:23.414  -->  00:09:25.831
is to update the round score,
189

189

00:09:28.394  -->  00:09:32.061
but only if the rolled number was not a one.
190

190

00:09:38.434  -->  00:09:41.729
Because, remember, if we roll a one, then we lose,
191

191

00:09:41.729  -->  00:09:46.207
or, a current score, and it's the next player's turn.
192

192

00:09:46.207  -->  00:09:47.040
Alright.
193

193

00:09:47.040  -->  00:09:49.435
So, here, our dice variable.
194

194

00:09:49.435  -->  00:09:52.436
I will actually, only declared a variable here,
195

195

00:09:52.436  -->  00:09:55.762
in this function, because I don't need it from the outside.
196

196

00:09:55.762  -->  00:09:58.902
So, remember, due to the scoping chain,
197

197

00:09:58.902  -->  00:10:02.182
here, in the outside scope, we will only have access
198

198

00:10:02.182  -->  00:10:04.530
to the variables that are in this scope,
199

199

00:10:04.530  -->  00:10:07.430
and not access to the variables that are in the scope
200

200

00:10:07.430  -->  00:10:08.661
of another function.
201

201

00:10:08.661  -->  00:10:10.617
So, I will remove it from here.
202

202

00:10:10.617  -->  00:10:14.085
And now, this function is the only one that has access
203

203

00:10:14.085  -->  00:10:16.526
to the dice variable.
204

204

00:10:16.526  -->  00:10:19.484
But, the other way around, from this function here,
205

205

00:10:19.484  -->  00:10:22.366
we have access to the other scope, right?
206

206

00:10:22.366  -->  00:10:25.274
So, in this function, we will have access to the scores,
207

207

00:10:25.274  -->  00:10:28.035
the roundScore, and activePlayer variables.
208

208

00:10:28.035  -->  00:10:29.384
And this is very important.
209

209

00:10:29.384  -->  00:10:31.143
So, once again, the scoping chain
210

210

00:10:31.143  -->  00:10:33.082
is something very important,
211

211

00:10:33.082  -->  00:10:35.590
and really important, also, to understand.
212

212

00:10:35.590  -->  00:10:37.740
Okay, so we have our random number.
213

213

00:10:37.740  -->  00:10:39.821
Now, we also need to display
214

214

00:10:39.821  -->  00:10:42.111
the correct dice number, right?
215

215

00:10:42.111  -->  00:10:44.822
So, we first have to make it visible again,
216

216

00:10:44.822  -->  00:10:47.681
because we hid it up here.
217

217

00:10:47.681  -->  00:10:50.671
So, we set the display style to none.
218

218

00:10:50.671  -->  00:10:54.970
So, the first thing is to bring the style back to block.
219

219

00:10:54.970  -->  00:10:57.611
So, in CSS, when we want to display something as a block,
220

220

00:10:57.611  -->  00:11:01.010
we simply use the display property, instead of to block.
221

221

00:11:01.010  -->  00:11:03.427
So, document.querySelector...
222

222

00:11:07.918  -->  00:11:12.788
And we see from up there, that it's just the class dice,
223

223

00:11:12.788  -->  00:11:15.955
and then dot style, and dot display...
224

224

00:11:18.068  -->  00:11:19.735
And set it to block.
225

225

00:11:21.707  -->  00:11:25.874
Alright, but we also need to set the correct number, right?
226

226

00:11:27.300  -->  00:11:32.269
And this is why these images, so, one, two, three,
227

227

00:11:32.269  -->  00:11:36.436
four, five, six, have the number here in their name.
228

228

00:11:37.491  -->  00:11:40.280
So, this is a trick that I used,
229

229

00:11:40.280  -->  00:11:42.521
so that now, it's very simple for us
230

230

00:11:42.521  -->  00:11:44.251
to display the correct name.
231

231

00:11:44.251  -->  00:11:47.325
All we need is to write this name,
232

232

00:11:47.325  -->  00:11:50.355
and then add the number of the dice value
233

233

00:11:50.355  -->  00:11:52.265
that was wrote, right?
234

234

00:11:52.265  -->  00:11:56.427
So, if we roll a one, then we need the dice-1 image,
235

235

00:11:56.427  -->  00:11:58.717
and the same thing for the other numbers.
236

236

00:11:58.717  -->  00:12:00.078
So, how do we do that?
237

237

00:12:00.078  -->  00:12:02.989
Once again, we will select our dice.
238

238

00:12:02.989  -->  00:12:05.320
But, instead of always doing the same selection
239

239

00:12:05.320  -->  00:12:07.999
over and over again, which is a process
240

240

00:12:07.999  -->  00:12:11.418
that takes up some time, so it's not perfect if we do
241

241

00:12:11.418  -->  00:12:13.778
all the same operation all the time.
242

242

00:12:13.778  -->  00:12:16.706
So, what I can do instead, is to create a variable,
243

243

00:12:16.706  -->  00:12:19.177
where I store the selection, and then,
244

244

00:12:19.177  -->  00:12:22.260
use this variable whenever I need it.
245

245

00:12:23.704  -->  00:12:26.003
So, I will create a new variable, and once again,
246

246

00:12:26.003  -->  00:12:29.094
we only need it in this scope, and not in the outside.
247

247

00:12:29.094  -->  00:12:32.795
So, I only declare it here, in this function.
248

248

00:12:32.795  -->  00:12:36.873
Then, we'll call it diceDOM, simply because it's
249

249

00:12:36.873  -->  00:12:39.926
the DOM object for this dice.
250

250

00:12:39.926  -->  00:12:42.518
And so, now I'm going to copy this part,
251

251

00:12:42.518  -->  00:12:47.005
because this is effectively, or selection, right?
252

252

00:12:47.005  -->  00:12:51.095
So, querySelector off the dice, is what we select.
253

253

00:12:51.095  -->  00:12:55.666
And now, all we have to do, is to use the variable of that
254

254

00:12:55.666  -->  00:12:59.118
we just created, so we can make it like this.
255

255

00:12:59.118  -->  00:13:02.307
And now, down here, we can use it again.
256

256

00:13:02.307  -->  00:13:05.936
And we don't have to make the selection over and over again.
257

257

00:13:05.936  -->  00:13:09.903
Now, how do we change the image of an image element?
258

258

00:13:09.903  -->  00:13:14.164
So we see here, that the image is an img element,
259

259

00:13:14.164  -->  00:13:18.361
and a source is what defines which image is displayed.
260

260

00:13:18.361  -->  00:13:22.770
So, it's very simple to change this source attribute,
261

261

00:13:22.770  -->  00:13:25.393
because in JavaScript, all we have to do,
262

262

00:13:25.393  -->  00:13:27.454
is exactly that, source.
263

263

00:13:27.454  -->  00:13:28.287
S-R-C.
264

264

00:13:29.912  -->  00:13:34.165
And so, now we use this trick that I told you about.
265

265

00:13:34.165  -->  00:13:36.672
We just write this part of the name.
266

266

00:13:36.672  -->  00:13:41.163
So, dice, and then, the number that was wrote.
267

267

00:13:41.163  -->  00:13:43.996
So, dice, plus, so actually, dice.
268

268

00:13:44.982  -->  00:13:45.815
Right?
269

269

00:13:45.815  -->  00:13:49.243
Because, this variable here, which has the number,
270

270

00:13:49.243  -->  00:13:52.491
from one to six, which the dice rolls.
271

271

00:13:52.491  -->  00:13:55.463
And now, we just have to add the final .png.
272

272

00:13:55.463  -->  00:13:56.380
Plus, .png.
273

273

00:13:58.212  -->  00:13:59.251
And that's it.
274

274

00:13:59.251  -->  00:14:02.583
So, it's now time to test this again.
275

275

00:14:02.583  -->  00:14:06.416
So, let's reload this, and then roll the dice.
276

276

00:14:08.133  -->  00:14:10.066
And now, it's not really working.
277

277

00:14:10.066  -->  00:14:13.946
So, let's check out the console and the error that we get
278

278

00:14:13.946  -->  00:14:16.944
is that the dice is not defined in line 20.
279

279

00:14:16.944  -->  00:14:20.282
So, let's check that one out, and yes, indeed.
280

280

00:14:20.282  -->  00:14:23.011
So, here, we used the dice, but it's not defined,
281

281

00:14:23.011  -->  00:14:25.292
because it's only defined on here.
282

282

00:14:25.292  -->  00:14:28.592
But, it's not a problem, because these lines here,
283

283

00:14:28.592  -->  00:14:32.023
in the beginning, they were only to show you some things,
284

284

00:14:32.023  -->  00:14:34.563
which I don't want anymore here, anyway,
285

285

00:14:34.563  -->  00:14:36.754
because, we are just going to use these
286

286

00:14:36.754  -->  00:14:41.061
inside of a function, or even off another function.
287

287

00:14:41.061  -->  00:14:43.462
So this one, were just to test some things.
288

288

00:14:43.462  -->  00:14:47.813
So, I will just cut them here, and put them down here,
289

289

00:14:47.813  -->  00:14:49.301
in case I need them later.
290

290

00:14:49.301  -->  00:14:51.179
And I will need them, of course.
291

291

00:14:51.179  -->  00:14:52.999
So, the only thing that matters,
292

292

00:14:52.999  -->  00:14:56.410
for application here, really, is these variables,
293

293

00:14:56.410  -->  00:14:58.999
then hide the dice, and then,
294

294

00:14:58.999  -->  00:15:01.582
or, EventListner function here.
295

295

00:15:03.579  -->  00:15:04.966
So, let me close this.
296

296

00:15:04.966  -->  00:15:05.799
Reload.
297

297

00:15:05.799  -->  00:15:07.718
And now, it's going to work.
298

298

00:15:07.718  -->  00:15:08.551
Alright.
299

299

00:15:08.551  -->  00:15:11.634
So, five, six, six, three, and so on.
300

300

00:15:12.722  -->  00:15:13.761
So now, this works.
301

301

00:15:13.761  -->  00:15:15.793
Really cool, right?
302

302

00:15:15.793  -->  00:15:18.579
So, our game is starting to look nice, right?
303

303

00:15:18.579  -->  00:15:19.789
What I want to do now,
304

304

00:15:19.789  -->  00:15:23.740
is to actually set these values here to zero.
305

305

00:15:23.740  -->  00:15:26.300
And I'm not going to do that in the HTML code,
306

306

00:15:26.300  -->  00:15:28.671
but right in the JavaScript.
307

307

00:15:28.671  -->  00:15:30.920
So, let's do that.
308

308

00:15:30.920  -->  00:15:35.091
So, we come here, to our HTML, to see how these are called.
309

309

00:15:35.091  -->  00:15:38.801
And these are the score-0, current-0,
310

310

00:15:38.801  -->  00:15:41.622
and score-1 and current-1 IDs.
311

311

00:15:41.622  -->  00:15:44.672
And then, so, these are IDs.
312

312

00:15:44.672  -->  00:15:48.181
Now, we could, of course, use the document.querySelector
313

313

00:15:48.181  -->  00:15:50.361
just fine, such as we did before,
314

314

00:15:50.361  -->  00:15:52.680
but I want to show you another method now,
315

315

00:15:52.680  -->  00:15:56.160
which is to document .getElementByID,
316

316

00:15:56.160  -->  00:15:57.617
instead of querySelector.
317

317

00:15:57.617  -->  00:15:59.637
So, this only works for IDs,
318

318

00:15:59.637  -->  00:16:02.015
but is faster than querySelector.
319

319

00:16:02.015  -->  00:16:04.186
So, sometimes, when we have IDs,
320

320

00:16:04.186  -->  00:16:07.106
instead of just using querySelector all the time,
321

321

00:16:07.106  -->  00:16:10.406
that we use getElementByID, for IDs.
322

322

00:16:10.406  -->  00:16:11.706
So, let's do that.
323

323

00:16:11.706  -->  00:16:14.039
So, document.getElementByID.
324

324

00:16:19.827  -->  00:16:23.267
And now, we don't use the CSS style.
325

325

00:16:23.267  -->  00:16:26.787
So, we don't use the hash symbol, such as we did,
326

326

00:16:26.787  -->  00:16:28.538
if we would use the querySelector.
327

327

00:16:28.538  -->  00:16:30.987
But all we do, is to put the name in here.
328

328

00:16:30.987  -->  00:16:34.237
So, it's score-0, and then textContent,
329

329

00:16:38.328  -->  00:16:40.998
as you already know, right?
330

330

00:16:40.998  -->  00:16:43.748
And set it to the string of zero.
331

331

00:16:45.787  -->  00:16:48.454
And I will now duplicate this line.
332

332

00:16:48.454  -->  00:16:51.653
And we'll do the same for the score, one.
333

333

00:16:51.653  -->  00:16:54.921
And I will actually duplicate it two more times,
334

334

00:16:54.921  -->  00:16:58.171
so we do it for the current, current-0,
335

335

00:16:59.893  -->  00:17:01.560
and then, current-1.
336

336

00:17:03.904  -->  00:17:07.782
Okay, and with this, we set all the four values to zero.
337

337

00:17:07.782  -->  00:17:10.653
So, again, we could've used querySelector here,
338

338

00:17:10.653  -->  00:17:13.245
but we used the getElementByID method,
339

339

00:17:13.245  -->  00:17:15.497
which is a bit faster.
340

340

00:17:15.497  -->  00:17:18.388
And also, because, I wanna show you that querySelector
341

341

00:17:18.388  -->  00:17:21.758
is not the only way that we have to select elements.
342

342

00:17:21.758  -->  00:17:24.535
So, let's now check this out.
343

343

00:17:24.535  -->  00:17:28.848
And, indeed, everything is now set to zero.
344

344

00:17:28.848  -->  00:17:29.681
Alright.
345

345

00:17:29.681  -->  00:17:31.687
Are you excited to continue with this?
346

346

00:17:31.687  -->  00:17:35.437
Then come with me, right to the next lecture.
