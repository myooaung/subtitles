WEBVTT
1
1

00:00:01.240  -->  00:00:04.580
<v Male Voice>So Hoisting may sound a bit confusing to you,</v>
2

2

00:00:04.580  -->  00:00:07.042
but it's really not, believe me.
3

3

00:00:07.042  -->  00:00:11.000
So let me prove it to you by writing some code.
4

4

00:00:11.000  -->  00:00:13.912
So once again I have some starter code for you
5

5

00:00:13.912  -->  00:00:16.168
which I put here on my Desktop.
6

6

00:00:16.168  -->  00:00:18.861
So let's just go to our text editor
7

7

00:00:18.861  -->  00:00:20.861
and open up the project.
8

8

00:00:22.769  -->  00:00:25.591
And in my case, it's Brackets.
9

9

00:00:25.591  -->  00:00:28.749
And I have Brackets and Google Chrome here side by side,
10

10

00:00:28.749  -->  00:00:30.582
such as we had before.
11

11

00:00:31.452  -->  00:00:35.930
So incase you're using Brackets, just hit this button here
12

12

00:00:35.930  -->  00:00:38.531
and then hit Open Folder,
13

13

00:00:38.531  -->  00:00:41.590
and in my case it's here on the Desktop.
14

14

00:00:41.590  -->  00:00:46.391
So I'm just going to open this project and here we are.
15

15

00:00:46.391  -->  00:00:48.971
So in this project, I have once again
16

16

00:00:48.971  -->  00:00:53.439
our simple HTML file, which is this bare construction
17

17

00:00:53.439  -->  00:00:56.312
of the HTML file just the structure.
18

18

00:00:56.312  -->  00:00:59.778
At this time I already have included the script,
19

19

00:00:59.778  -->  00:01:01.780
which is also here already.
20

20

00:01:01.780  -->  00:01:05.947
And I have also already set the stage here for this lecture.
21

21

00:01:08.511  -->  00:01:11.837
Okay, so I'm just going to use some very simple functions
22

22

00:01:11.837  -->  00:01:14.652
here because I just want you to focus
23

23

00:01:14.652  -->  00:01:16.931
on how everything works and not exactly
24

24

00:01:16.931  -->  00:01:19.323
on what the code is doing.
25

25

00:01:19.323  -->  00:01:22.211
Alright, so let's start by writing a simple function
26

26

00:01:22.211  -->  00:01:25.562
and we can actually use the one we have been using before.
27

27

00:01:25.562  -->  00:01:28.145
So, the calculate age function.
28

28

00:01:29.210  -->  00:01:33.191
And remember, we have been writing it like this:
29

29

00:01:33.191  -->  00:01:35.441
calculateAge and then year.
30

30

00:01:37.960  -->  00:01:40.682
And this time, we don't even want to return anything.
31

31

00:01:40.682  -->  00:01:44.849
I'm just gonna console log and result to the console.
32

32

00:01:45.941  -->  00:01:48.274
So 2016 minus the year.
33

33

00:01:50.802  -->  00:01:54.534
Very simple, but it's enough for us.
34

34

00:01:54.534  -->  00:01:57.739
So this is how we've been doing it up until this point.
35

35

00:01:57.739  -->  00:02:02.513
So we first declare the function and then call the function.
36

36

00:02:02.513  -->  00:02:06.680
So I'm going to use calculateAge and let's say 1999,
37

37

00:02:07.916  -->  00:02:10.416
which is be John's birth date.
38

38

00:02:14.345  -->  00:02:17.512
And now I'm going to open up our file.
39

39

00:02:19.224  -->  00:02:21.724
Our HTML file, and here we go.
40

40

00:02:24.466  -->  00:02:26.196
And the console.
41

41

00:02:26.196  -->  00:02:27.934
So I told you in the last section,
42

42

00:02:27.934  -->  00:02:31.766
that we can do Inspect to open the console,
43

43

00:02:31.766  -->  00:02:35.523
but we can also come here to the View Menu
44

44

00:02:35.523  -->  00:02:39.690
in Google Chrome Developer and then the JavaScript Console.
45

45

00:02:40.665  -->  00:02:43.053
Which is the same as hitting this shortcut,
46

46

00:02:43.053  -->  00:02:46.145
so Alt + Command + J on a Mac
47

47

00:02:46.145  -->  00:02:50.228
and probably Alt + Control + J on a PC.
48

48

00:02:51.543  -->  00:02:54.913
Alright, and here we already have the result.
49

49

00:02:54.913  -->  00:02:57.813
Okay, so this is the way that we have been doing things,
50

50

00:02:57.813  -->  00:03:00.332
but with what we learned in the last lecture,
51

51

00:03:00.332  -->  00:03:03.242
we can also do it the other way around, right?
52

52

00:03:03.242  -->  00:03:04.184
Let me show it to you.
53

53

00:03:04.184  -->  00:03:08.267
I'm going to delete it, and use the function here
54

54

00:03:11.191  -->  00:03:13.344
before I actually declare it.
55

55

00:03:13.344  -->  00:03:15.911
Let's see how this works out.
56

56

00:03:15.911  -->  00:03:19.911
CalculateAge and let's now put 1965 for example,
57

57

00:03:24.402  -->  00:03:28.643
and if I now reload this, then it still works.
58

58

00:03:28.643  -->  00:03:32.712
Okay, and this is what I've been telling you about
59

59

00:03:32.712  -->  00:03:33.644
in the last lecture.
60

60

00:03:33.644  -->  00:03:35.223
So this is Hoisting.
61

61

00:03:35.223  -->  00:03:38.932
So in the creation phase of the execution context,
62

62

00:03:38.932  -->  00:03:41.891
which is, in this case, the global execution context.
63

63

00:03:41.891  -->  00:03:44.933
The function declaration calculateAge is stored
64

64

00:03:44.933  -->  00:03:48.600
in the variable object and even before the code is executed.
65

65

00:03:48.600  -->  00:03:50.300
Right?
66

66

00:03:50.300  -->  00:03:53.367
And this is why when we then enter the execution phase,
67

67

00:03:53.367  -->  00:03:56.546
the calculate age function is already available
68

68

00:03:56.546  -->  00:03:58.537
for us to use it.
69

69

00:03:58.537  -->  00:04:00.756
So we don't have to first declare the function
70

70

00:04:00.756  -->  00:04:04.446
and then use it, but we can also first use it like this
71

71

00:04:04.446  -->  00:04:07.613
and only later in our code declare it.
72

72

00:04:09.717  -->  00:04:13.217
Now remember another thing that I said in the last lecture,
73

73

00:04:13.217  -->  00:04:17.316
which was that this only works for function declarations
74

74

00:04:17.316  -->  00:04:20.427
but there is also something called Function Expressions.
75

75

00:04:20.427  -->  00:04:21.707
Right?
76

76

00:04:21.707  -->  00:04:25.754
So let's see how this works out with function expressions.
77

77

00:04:25.754  -->  00:04:29.693
So let's write another function as function expression.
78

78

00:04:29.693  -->  00:04:31.695
And this is how we do it.
79

79

00:04:31.695  -->  00:04:35.854
So we declare a variable and now we're going to reuse
80

80

00:04:35.854  -->  00:04:37.956
the function that calculates the years
81

81

00:04:37.956  -->  00:04:39.887
that we have left until retirement
82

82

00:04:39.887  -->  00:04:42.336
based on the year of birth.
83

83

00:04:42.336  -->  00:04:45.836
So I'm going to call it simply Retirement.
84

84

00:04:47.535  -->  00:04:50.952
And then function and the perimeter here.
85

85

00:04:54.835  -->  00:04:58.335
Okay and we just want a console log here the result
86

86

00:04:58.335  -->  00:05:01.094
and the way we have been doing this
87

87

00:05:01.094  -->  00:05:04.094
is to make sixty-five minus the age.
88

88

00:05:07.266  -->  00:05:10.215
So it would be sixty-five minus the age
89

89

00:05:10.215  -->  00:05:14.132
and the age is just 2016 minus the year, right?
90

90

00:05:16.676  -->  00:05:20.034
Okay, and we need the parenthesis here
91

91

00:05:20.034  -->  00:05:23.296
because we want this part to be calculated first,
92

92

00:05:23.296  -->  00:05:25.946
and only after that we want then sixty-five
93

93

00:05:25.946  -->  00:05:29.507
minus this part of the operation.
94

94

00:05:29.507  -->  00:05:33.134
And remember if we group something together with parenthesis
95

95

00:05:33.134  -->  00:05:35.908
it gets the maximum precedence
96

96

00:05:35.908  -->  00:05:38.938
in the operation precedence table, right?
97

97

00:05:38.938  -->  00:05:41.007
So this is absolute priority.
98

98

00:05:41.007  -->  00:05:44.876
Okay so let's now use this first, like this.
99

99

00:05:44.876  -->  00:05:47.209
So retirement 1990,
100

100

00:05:50.793  -->  00:05:53.376
and hit reload, and here we go.
101

101

00:05:54.410  -->  00:05:57.193
So for someone who was born in 1990
102

102

00:05:57.193  -->  00:06:02.061
they have thirty-nine years left for retirement, right?
103

103

00:06:02.061  -->  00:06:04.353
So now let's try and see what happens
104

104

00:06:04.353  -->  00:06:06.353
when we do it like this.
105

105

00:06:07.215  -->  00:06:10.765
So the way we have done it up here.
106

106

00:06:10.765  -->  00:06:14.143
So I'm gonna go ahead and delete this,
107

107

00:06:14.143  -->  00:06:16.834
and try to first call the function
108

108

00:06:16.834  -->  00:06:20.501
and only after that to write it in the code.
109

109

00:06:21.551  -->  00:06:24.801
So retirement and let's try again 1965,
110

110

00:06:29.114  -->  00:06:30.947
and then let's use it.
111

111

00:06:32.202  -->  00:06:35.674
Okay, and now this time it does not work.
112

112

00:06:35.674  -->  00:06:37.874
So this is what we expected right?
113

113

00:06:37.874  -->  00:06:39.772
And once again the reason for that
114

114

00:06:39.772  -->  00:06:43.429
is because this function is not a function declaration
115

115

00:06:43.429  -->  00:06:46.321
but a function expression and Hoisting with functions
116

116

00:06:46.321  -->  00:06:49.321
only works for function declarations
117

117

00:06:50.372  -->  00:06:53.904
which is what we have here, right?
118

118

00:06:53.904  -->  00:06:54.904
Okay, great.
119

119

00:06:56.072  -->  00:06:57.532
So in order to make this work again,
120

120

00:06:57.532  -->  00:07:00.153
I'm just going to come and add it here,
121

121

00:07:00.153  -->  00:07:01.442
but I will leave it in the code
122

122

00:07:01.442  -->  00:07:03.984
so that you can have it for yourself
123

123

00:07:03.984  -->  00:07:06.492
and download this code at the end.
124

124

00:07:06.492  -->  00:07:09.371
Okay so that is function Hoisting.
125

125

00:07:09.371  -->  00:07:13.255
Now remember that Hoisting also happens with variables
126

126

00:07:13.255  -->  00:07:15.113
but in a different way.
127

127

00:07:15.113  -->  00:07:17.858
So let's see some examples about that.
128

128

00:07:17.858  -->  00:07:22.025
So here we have functions, and take away this space here.
129

129

00:07:27.643  -->  00:07:29.893
So here, variables.
130

130

00:07:31.993  -->  00:07:34.952
So let's once again create a variable here.
131

131

00:07:34.952  -->  00:07:37.714
Now we'll create an age variable.
132

132

00:07:37.714  -->  00:07:41.151
So age and set it simply to twenty-three,
133

133

00:07:41.151  -->  00:07:44.274
and just to check everything works,
134

134

00:07:44.274  -->  00:07:48.441
let's console log this variable just to see what happens.
135

135

00:07:49.394  -->  00:07:52.743
Okay twenty-three, exactly as expected.
136

136

00:07:52.743  -->  00:07:55.954
Now what happens if we use this variable,
137

137

00:07:55.954  -->  00:07:59.913
before we actually declare it in our code.
138

138

00:07:59.913  -->  00:08:04.844
So let's see what happens in this case, console log age.
139

139

00:08:04.844  -->  00:08:08.414
So again we're trying here to use this variable
140

140

00:08:08.414  -->  00:08:10.863
before we declare it in our code.
141

141

00:08:10.863  -->  00:08:13.563
So I'm sure you know by now what's going to happen.
142

142

00:08:13.563  -->  00:08:15.340
So here we go.
143

143

00:08:15.340  -->  00:08:17.840
Alright, so we have undefined,
144

144

00:08:18.744  -->  00:08:21.832
and that's exactly how Hoisting works with variables.
145

145

00:08:21.832  -->  00:08:24.361
Because remember in the creation phase
146

146

00:08:24.361  -->  00:08:27.864
of the variable object what happens is that the code
147

147

00:08:27.864  -->  00:08:30.072
is scanned for variable declarations
148

148

00:08:30.072  -->  00:08:33.612
and the variables are then set to undefined.
149

149

00:08:33.612  -->  00:08:36.472
So imagine that we wouldn't even have
150

150

00:08:36.472  -->  00:08:38.194
this variable declaration here.
151

151

00:08:38.194  -->  00:08:41.621
If we then attempted to use the variable
152

152

00:08:41.621  -->  00:08:44.956
we wouldn't get undefined, but we would get....
153

153

00:08:44.956  -->  00:08:46.863
Exactly, an error.
154

154

00:08:46.863  -->  00:08:48.611
Because then we wouldn't have any definition
155

155

00:08:48.611  -->  00:08:51.362
and JavaScript would not even know this variable.
156

156

00:08:51.362  -->  00:08:55.609
But in this case, JavaScript knows that there will be
157

157

00:08:55.609  -->  00:08:59.832
an age variable, we simply don't have the value yet.
158

158

00:08:59.832  -->  00:09:01.364
And that's also the reason why
159

159

00:09:01.364  -->  00:09:04.802
it's defined exactly as undefined.
160

160

00:09:04.802  -->  00:09:07.253
Because in one of the first lectures we saw
161

161

00:09:07.253  -->  00:09:10.152
that variables that don't have a value yet,
162

162

00:09:10.152  -->  00:09:13.273
will always have the data type undefined.
163

163

00:09:13.273  -->  00:09:16.742
Okay so let's now take this one step further,
164

164

00:09:16.742  -->  00:09:19.909
and write a small function called foo.
165

165

00:09:22.391  -->  00:09:24.503
Which don't accept anything.
166

166

00:09:24.503  -->  00:09:28.633
All we're going to do here is to create our own age variable
167

167

00:09:28.633  -->  00:09:30.581
right inside this function.
168

168

00:09:30.581  -->  00:09:34.621
And let's set this one to sixty-five for example.
169

169

00:09:34.621  -->  00:09:36.371
And then console log.
170

170

00:09:38.859  -->  00:09:40.859
Console log age in here.
171

171

00:09:45.337  -->  00:09:48.879
Then call the function like this.
172

172

00:09:48.879  -->  00:09:51.796
And then console log the age again.
173

173

00:09:54.030  -->  00:09:57.679
So what do you think is going to happen in this example?
174

174

00:09:57.679  -->  00:09:58.929
Let's find out.
175

175

00:10:00.430  -->  00:10:02.887
Okay so these are the results
176

176

00:10:02.887  -->  00:10:06.237
of these two console logs here, right?
177

177

00:10:06.237  -->  00:10:08.000
So, line twenty-six and twenty-nine.
178

178

00:10:08.000  -->  00:10:10.279
So twenty-six and twenty-nine.
179

179

00:10:10.279  -->  00:10:13.147
So why does this console log here
180

180

00:10:13.147  -->  00:10:15.410
print the age of sixty-five
181

181

00:10:15.410  -->  00:10:16.850
and then this console log here
182

182

00:10:16.850  -->  00:10:19.111
prints the age of twenty-three?
183

183

00:10:19.111  -->  00:10:21.508
So it's actually pretty simple,
184

184

00:10:21.508  -->  00:10:25.028
and it's because this age variable here
185

185

00:10:25.028  -->  00:10:29.389
gets stored in the global execution context object, right?
186

186

00:10:29.389  -->  00:10:31.068
So in the variable object
187

187

00:10:31.068  -->  00:10:34.300
of the global execution context object.
188

188

00:10:34.300  -->  00:10:36.111
Sounds a bit confusing right?
189

189

00:10:36.111  -->  00:10:39.460
But if you go through the last lectures again,
190

190

00:10:39.460  -->  00:10:41.431
that will make a lot of sense.
191

191

00:10:41.431  -->  00:10:43.811
So again this age variable is declared
192

192

00:10:43.811  -->  00:10:46.949
in this global execution context object.
193

193

00:10:46.949  -->  00:10:49.921
And then this foo function here gets its own
194

194

00:10:49.921  -->  00:10:54.199
execution context object in which we can also store
195

195

00:10:54.199  -->  00:10:57.078
an age variable, and it can be the same name.
196

196

00:10:57.078  -->  00:10:59.530
It really doesn't matter because these are
197

197

00:10:59.530  -->  00:11:02.140
two completely different variables.
198

198

00:11:02.140  -->  00:11:05.951
This variable age is defined in the variable object
199

199

00:11:05.951  -->  00:11:10.090
of the execution context object of the foo function
200

200

00:11:10.090  -->  00:11:14.722
while this age variable is defined in the variable object
201

201

00:11:14.722  -->  00:11:17.732
of the global execution context object.
202

202

00:11:17.732  -->  00:11:20.321
So each one gets its own variable object.
203

203

00:11:20.321  -->  00:11:22.500
So we have two different variables,
204

204

00:11:22.500  -->  00:11:26.492
and so the results when we print them are different.
205

205

00:11:26.492  -->  00:11:28.070
And we can see that the Hoisting
206

206

00:11:28.070  -->  00:11:30.487
was indeed also the same way.
207

207

00:11:31.780  -->  00:11:33.780
Console.log
208

208

00:11:35.361  -->  00:11:39.528
So if we attempt to print the age before we declare it here
209

209

00:11:41.509  -->  00:11:44.259
then we will have also undefined.
210

210

00:11:45.842  -->  00:11:50.808
So undefined comes here for line twenty-five, which is this.
211

211

00:11:50.808  -->  00:11:54.712
Okay so I hope Hoisting is a lot more clear to you now
212

212

00:11:54.712  -->  00:11:57.210
and the most important use case for Hoisting
213

213

00:11:57.210  -->  00:12:00.241
is not even variables, but it's the fact that we
214

214

00:12:00.241  -->  00:12:02.313
can use function declarations
215

215

00:12:02.313  -->  00:12:05.303
before we actually declare them in our code.
216

216

00:12:05.303  -->  00:12:08.412
And that's the biggest takeaway from Hoisting, actually.
217

217

00:12:08.412  -->  00:12:10.063
So this is something very useful,
218

218

00:12:10.063  -->  00:12:13.059
and something that confuses new JavaScript developers.
219

219

00:12:13.059  -->  00:12:17.351
So I hope that you understand it with these lectures.
220

220

00:12:17.351  -->  00:12:20.242
So you can take another look at the code,
221

221

00:12:20.242  -->  00:12:24.503
or even re-watch some of the lectures that we've just seen
222

222

00:12:24.503  -->  00:12:26.842
and then after that, once you're ready,
223

223

00:12:26.842  -->  00:12:30.509
then let's just move on to the next lecture.
