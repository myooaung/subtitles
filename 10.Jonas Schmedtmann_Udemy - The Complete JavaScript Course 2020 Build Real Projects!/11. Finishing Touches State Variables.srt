1
1

00:00:01,188  -->  00:00:03,585
<v Instructor>Now the time has come to finally</v>
2

2

00:00:03,585  -->  00:00:06,311
finish up our application with only
3

3

00:00:06,311  -->  00:00:08,144
one small thing to do.
4

4

00:00:11,123  -->  00:00:13,977
In this lecture, you will just learn
5

5

00:00:13,977  -->  00:00:16,864
what a state variable is, how to use it
6

6

00:00:16,864  -->  00:00:18,783
and also why to use it.
7

7

00:00:18,783  -->  00:00:22,361
And this is really something about programming in general
8

8

00:00:22,361  -->  00:00:24,792
and not just JavaScript.
9

9

00:00:24,792  -->  00:00:27,572
So remember that the problem here was
10

10

00:00:27,572  -->  00:00:30,667
that we can continue to play the game
11

11

00:00:30,667  -->  00:00:33,257
even after we have a winner here.
12

12

00:00:33,257  -->  00:00:35,312
So this starts to look really weird
13

13

00:00:35,312  -->  00:00:37,991
and really not what we want.
14

14

00:00:37,991  -->  00:00:41,986
So we need something called a state variable.
15

15

00:00:41,986  -->  00:00:44,697
What is a state variable?
16

16

00:00:44,697  -->  00:00:47,738
It's actually very simple, a state variable
17

17

00:00:47,738  -->  00:00:50,995
simply tell us the condition of a system,
18

18

00:00:50,995  -->  00:00:52,534
so that's the definition.
19

19

00:00:52,534  -->  00:00:56,008
We need a state variable when we need to remember something
20

20

00:00:56,008  -->  00:00:58,039
or the state of something.
21

21

00:00:58,039  -->  00:01:01,331
In this case, this will be is our game playing
22

22

00:01:01,331  -->  00:01:03,417
or is our game not playing?
23

23

00:01:03,417  -->  00:01:07,139
So we will simply create a variable that tells us this
24

24

00:01:07,139  -->  00:01:09,299
and that we can then use in our function.
25

25

00:01:09,299  -->  00:01:12,627
Of course there are a lot of things that we only
26

26

00:01:12,627  -->  00:01:14,770
want to do when the game is active,
27

27

00:01:14,770  -->  00:01:17,871
when the game is playing, so let's do that.
28

28

00:01:17,871  -->  00:01:21,546
Keep in mind that we want to use the variable
29

29

00:01:21,546  -->  00:01:23,445
in a couple of places.
30

30

00:01:23,445  -->  00:01:26,271
So imagine if we would just declare it here,
31

31

00:01:26,271  -->  00:01:29,604
like saying var gamePlaying = true.
32

32

00:01:32,866  -->  00:01:35,503
If we declare it here in this init function,
33

33

00:01:35,503  -->  00:01:37,896
then will all the other functions have access
34

34

00:01:37,896  -->  00:01:39,478
to this variable?
35

35

00:01:39,478  -->  00:01:42,583
I know that you know that the answer is no
36

36

00:01:42,583  -->  00:01:44,930
because it's a sculpt chain.
37

37

00:01:44,930  -->  00:01:48,721
So all the functions to only have access to the global scope
38

38

00:01:48,721  -->  00:01:51,812
or of course the scope of their parents.
39

39

00:01:51,812  -->  00:01:54,904
So here, the init function is really the only function
40

40

00:01:54,904  -->  00:01:58,861
that would have access to the game playing variable.
41

41

00:01:58,861  -->  00:02:02,671
We need to define it outside, so right in the global scope,
42

42

00:02:02,671  -->  00:02:05,809
and that's also the reason why all of these are here,
43

43

00:02:05,809  -->  00:02:07,476
in the global scope.
44

44

00:02:08,844  -->  00:02:12,417
I'm just writing it here gamePlaying.
45

45

00:02:12,417  -->  00:02:14,563
Once again, I don't need to define it here,
46

46

00:02:14,563  -->  00:02:16,635
I simply need to declare it here.
47

47

00:02:16,635  -->  00:02:19,828
I need to say this is a variable that is defined here
48

48

00:02:19,828  -->  00:02:23,845
in this scope so that I can use it then in other scopes,
49

49

00:02:23,845  -->  00:02:26,089
in other functions.
50

50

00:02:26,089  -->  00:02:28,879
So when we start our application, the game playing variable
51

51

00:02:28,879  -->  00:02:31,040
will be set to true.
52

52

00:02:31,040  -->  00:02:33,189
Let's now work through our functions here,
53

53

00:02:33,189  -->  00:02:35,666
to our event listeners, one by one.
54

54

00:02:35,666  -->  00:02:38,555
This one is for the event that happens when we hit
55

55

00:02:38,555  -->  00:02:39,722
a roll button.
56

56

00:02:40,738  -->  00:02:42,979
We create a random number, for the dice,
57

57

00:02:42,979  -->  00:02:46,848
then we display and then we update the round score.
58

58

00:02:46,848  -->  00:02:49,240
Now we only want all of this to happen
59

59

00:02:49,240  -->  00:02:51,670
when the game is actually playing, right?
60

60

00:02:51,670  -->  00:02:53,865
Which means that we don't have a winner yet.
61

61

00:02:53,865  -->  00:02:56,485
That's because the game playing variable
62

62

00:02:56,485  -->  00:02:59,391
will be false only after we have a winner.
63

63

00:02:59,391  -->  00:03:03,342
So after this weird situation that we saw before, happens.
64

64

00:03:03,342  -->  00:03:05,630
By then, we want it to be false.
65

65

00:03:05,630  -->  00:03:08,768
But before, all the time during our game,
66

66

00:03:08,768  -->  00:03:11,484
we always want this game variable to be true.
67

67

00:03:11,484  -->  00:03:14,283
So, what can we do here is actually very simple.
68

68

00:03:14,283  -->  00:03:18,754
All we need to do is to add an if statement here.
69

69

00:03:18,754  -->  00:03:22,921
So if(gamePlaying) { we do something.
70

70

00:03:23,890  -->  00:03:26,013
And why does it work like this, so why do we only
71

71

00:03:26,013  -->  00:03:29,116
need the game playing variable here and nothing else.
72

72

00:03:29,116  -->  00:03:31,177
It's actually very simple, that's because
73

73

00:03:31,177  -->  00:03:33,560
the condition that the if statement,
74

74

00:03:33,560  -->  00:03:36,641
the ones here is a true or false value,
75

75

00:03:36,641  -->  00:03:39,814
and usually we use an operator here which returns
76

76

00:03:39,814  -->  00:03:43,260
the true or false value, for example down here,
77

77

00:03:43,260  -->  00:03:45,966
we check if (dice !== 1) {
78

78

00:03:45,966  -->  00:03:49,095
and this returns either true or false.
79

79

00:03:49,095  -->  00:03:51,473
But in this case, the game playing variable
80

80

00:03:51,473  -->  00:03:56,050
is all ready true or false, so we don't need anything else.
81

81

00:03:56,050  -->  00:03:59,874
Okay, so now all we want is to have this code
82

82

00:03:59,874  -->  00:04:03,836
right here, so all this code is now wrapped
83

83

00:04:03,836  -->  00:04:07,573
in this if statement, so all of this only happens
84

84

00:04:07,573  -->  00:04:09,886
if the game is actually playing.
85

85

00:04:09,886  -->  00:04:12,801
After the game is finished, we can push this button
86

86

00:04:12,801  -->  00:04:16,284
as hard as we want and nothing's going to happen anymore,
87

87

00:04:16,284  -->  00:04:18,641
because this will be set to false.
88

88

00:04:18,641  -->  00:04:22,410
So let's actually set it to false before we forget it.
89

89

00:04:22,410  -->  00:04:24,274
What do you think is the perfect place
90

90

00:04:24,274  -->  00:04:26,336
to set this variable to false?
91

91

00:04:26,336  -->  00:04:30,169
I'll give you a minute to do that by yourself.
92

92

00:04:32,334  -->  00:04:35,834
All right, so I'm sure you figured it out.
93

93

00:04:37,368  -->  00:04:40,449
The perfect place to set this variable to false,
94

94

00:04:40,449  -->  00:04:41,361
is here, right?
95

95

00:04:41,361  -->  00:04:45,110
So this is where we detect if a player wins a game.
96

96

00:04:45,110  -->  00:04:48,495
So after he won, which is this condition here,
97

97

00:04:48,495  -->  00:04:50,689
so when the score is greater then 20,
98

98

00:04:50,689  -->  00:04:53,103
which I still have to set back to 100,
99

99

00:04:53,103  -->  00:04:56,946
so right here, we will turn this variable to false.
100

100

00:04:56,946  -->  00:04:59,863
So we say gamePlaying = false;
101

101

00:05:02,446  -->  00:05:05,664
and that's it, that's all there is to this mechanism.
102

102

00:05:05,664  -->  00:05:08,668
Simply setting our state variable to false,
103

103

00:05:08,668  -->  00:05:11,465
will avoid this situation here.
104

104

00:05:11,465  -->  00:05:15,380
Of course, together with this if statement here, right?
105

105

00:05:15,380  -->  00:05:17,963
Now,
what else do we have here?
106

106

00:05:20,241  -->  00:05:23,074
Where is the other event listener?
107

107

00:05:23,948  -->  00:05:28,626
It's right here, and once more we also want all of this
108

108

00:05:28,626  -->  00:05:31,009
only to happen if the game is playing.
109

109

00:05:31,009  -->  00:05:34,124
So we can only hold our points if the game
110

110

00:05:34,124  -->  00:05:36,833
is actually active, right?
111

111

00:05:36,833  -->  00:05:39,443
So we'll do the exact same thing here,
112

112

00:05:39,443  -->  00:05:43,610
so if (gamePlaying) { do all of this stuff here
113

113

00:05:48,485  -->  00:05:50,530
and of course there's nothing else,
114

114

00:05:50,530  -->  00:05:52,418
because we don't want anything to happen
115

115

00:05:52,418  -->  00:05:55,188
if the game is not active.
116

116

00:05:55,188  -->  00:05:56,678
All right and that should be enough
117

117

00:05:56,678  -->  00:05:59,761
to make our game work perfectly fine.
118

118

00:06:04,636  -->  00:06:07,803
Eight, eleven, now this players' turn,
119

119

00:06:11,923  -->  00:06:12,756
all right.
120

120

00:06:14,263  -->  00:06:16,857
So we have a winner, we have 22 points
121

121

00:06:16,857  -->  00:06:18,045
and let's see what happens
122

122

00:06:18,045  -->  00:06:21,663
if we try to keep rolling our dice.
123

123

00:06:21,663  -->  00:06:25,233
Nothing happens, the game has effectively stopped,
124

124

00:06:25,233  -->  00:06:28,519
we can also not hold and let me check
125

125

00:06:28,519  -->  00:06:31,186
if we have any bugs in our code.
126

126

00:06:33,018  -->  00:06:37,032
Actually no, so no bugs here, so it's not working
127

127

00:06:37,032  -->  00:06:39,912
because we blocked it with our code.
128

128

00:06:39,912  -->  00:06:42,953
So our if statement is really working,
129

129

00:06:42,953  -->  00:06:45,148
meaning that our state variable, game playing,
130

130

00:06:45,148  -->  00:06:47,202
is currently false.
131

131

00:06:47,202  -->  00:06:49,637
Now if I hit this new game button here,
132

132

00:06:49,637  -->  00:06:52,087
then remember, the init function is called
133

133

00:06:52,087  -->  00:06:55,298
and the init function sets our state variable, game playing,
134

134

00:06:55,298  -->  00:06:58,322
back to true, so now it should be working again, right?
135

135

00:06:58,322  -->  00:07:02,489
So let's hope it does work, and yes it does, great.
136

136

00:07:05,971  -->  00:07:09,717
So another winner and again it doesn't work.
137

137

00:07:09,717  -->  00:07:12,608
That's it, that's the end, this is your very first
138

138

00:07:12,608  -->  00:07:15,489
JavaScript application, and it's fully functioning now
139

139

00:07:15,489  -->  00:07:18,064
and it's really working great.
140

140

00:07:18,064  -->  00:07:20,501
So now I hope that you're really proud of what
141

141

00:07:20,501  -->  00:07:24,029
we have achieved so far together here in this course.
142

142

00:07:24,029  -->  00:07:26,890
Especially in this really cool section.
143

143

00:07:26,890  -->  00:07:29,284
You can play this game with your friends
144

144

00:07:29,284  -->  00:07:33,216
and then tell them that you coded this by yourself.
145

145

00:07:33,216  -->  00:07:35,240
How cool is that right?
146

146

00:07:35,240  -->  00:07:37,643
Really, just go play this game with your friends
147

147

00:07:37,643  -->  00:07:39,533
and let me know what they thought of the game
148

148

00:07:39,533  -->  00:07:40,857
here in the comments.
149

149

00:07:40,857  -->  00:07:43,107
I'm waiting for it, really.
