WEBVTT
1
1

00:00:01.780  -->  00:00:03.794
<v Instructor>Okay, so in the last lecture,</v>
2

2

00:00:03.794  -->  00:00:08.094
we have seen when a new execution context is created,
3

3

00:00:08.094  -->  00:00:11.366
but what about how, exactly, that happens?
4

4

00:00:11.366  -->  00:00:14.653
So let's talk about that right now.
5

5

00:00:14.653  -->  00:00:18.051
Let's start by creating a representation
6

6

00:00:18.051  -->  00:00:21.135
of an execution context so that we can have
7

7

00:00:21.135  -->  00:00:25.059
a bit more detail about how it actually works.
8

8

00:00:25.059  -->  00:00:28.338
First off, as I mentioned in the previous lecture,
9

9

00:00:28.338  -->  00:00:32.623
we can associate an execution context with an object,
10

10

00:00:32.623  -->  00:00:34.941
which is what we have here,
11

11

00:00:34.941  -->  00:00:38.342
and this object has three properties:
12

12

00:00:38.342  -->  00:00:42.207
the variable object, which will contain function arguments
13

13

00:00:42.207  -->  00:00:44.732
in a variable declaration
14

14

00:00:44.732  -->  00:00:47.482
as well as function declarations;
15

15

00:00:48.333  -->  00:00:52.049
the scope chain, which contains the current variable objects
16

16

00:00:52.049  -->  00:00:56.550
as well as the variable objects of all its parents;
17

17

00:00:56.550  -->  00:00:59.877
and "this" variable that we have already seen in action
18

18

00:00:59.877  -->  00:01:03.369
in the introductory lecture about objects.
19

19

00:01:03.369  -->  00:01:07.646
All right, so how is execution context actually created?
20

20

00:01:07.646  -->  00:01:10.645
Let's start with what we already know.
21

21

00:01:10.645  -->  00:01:13.780
When a function is called, a new execution context
22

22

00:01:13.780  -->  00:01:16.863
is put on top of the execution stack,
23

23

00:01:17.746  -->  00:01:20.203
and this happens in two phases:
24

24

00:01:20.203  -->  00:01:23.677
the creation phase and the execution phase.
25

25

00:01:23.677  -->  00:01:26.964
In the creation phase, we first have the creation
26

26

00:01:26.964  -->  00:01:29.112
of the variable object,
27

27

00:01:29.112  -->  00:01:32.378
and we will talk about that in the next slide;
28

28

00:01:32.378  -->  00:01:35.127
then, the creation of the scope chain,
29

29

00:01:35.127  -->  00:01:37.534
and this is a huge topic for itself,
30

30

00:01:37.534  -->  00:01:40.373
so we'll talk about it in the next lecture;
31

31

00:01:40.373  -->  00:01:44.797
and lastly, the "this" variable is determined and set.
32

32

00:01:44.797  -->  00:01:49.044
So basically the properties of the execution context object
33

33

00:01:49.044  -->  00:01:53.162
that we have here on the left side are defined.
34

34

00:01:53.162  -->  00:01:56.835
Then, in the execution phase, the code and the function
35

35

00:01:56.835  -->  00:02:00.596
that generated the current execution context is run
36

36

00:02:00.596  -->  00:02:04.953
line by line, and all the variables are defined.
37

37

00:02:04.953  -->  00:02:08.276
If it's a global context, then it's a global code
38

38

00:02:08.276  -->  00:02:10.083
that is execute it.
39

39

00:02:10.083  -->  00:02:13.729
So let's now look at the creation of the variable object
40

40

00:02:13.729  -->  00:02:15.562
in the creation phase.
41

41

00:02:16.905  -->  00:02:18.888
So this is what happens in the creation of
42

42

00:02:18.888  -->  00:02:21.381
the variable object.
43

43

00:02:21.381  -->  00:02:24.276
The argument object is created, which contains
44

44

00:02:24.276  -->  00:02:29.268
all the arguments that were passed into the function.
45

45

00:02:29.268  -->  00:02:32.999
The code is scanned for function declarations,
46

46

00:02:32.999  -->  00:02:35.695
and for each function a property is created
47

47

00:02:35.695  -->  00:02:39.597
in a variable object pointing to that function.
48

48

00:02:39.597  -->  00:02:42.409
This means that all the functions will be stored
49

49

00:02:42.409  -->  00:02:45.036
inside the variable object,
50

50

00:02:45.036  -->  00:02:47.863
even before the code starts executing,
51

51

00:02:47.863  -->  00:02:51.521
and this is very important for you to know.
52

52

00:02:51.521  -->  00:02:56.203
And lastly, the code is scanned for variable declarations,
53

53

00:02:56.203  -->  00:02:59.486
and for each variable a property is created
54

54

00:02:59.486  -->  00:03:03.756
in a variable object and set to "undefined",
55

55

00:03:03.756  -->  00:03:05.800
and these last two points is
56

56

00:03:05.800  -->  00:03:08.652
what we commonly call "hoisting".
57

57

00:03:08.652  -->  00:03:11.992
Functions and variables are hoisted in JavaScript,
58

58

00:03:11.992  -->  00:03:14.275
which means that they are available before
59

59

00:03:14.275  -->  00:03:17.443
the execution phase actually starts.
60

60

00:03:17.443  -->  00:03:20.406
They are hoisted in a different way, though.
61

61

00:03:20.406  -->  00:03:23.189
The difference between functions and variables is that
62

62

00:03:23.189  -->  00:03:26.128
functions are already defined
63

63

00:03:26.128  -->  00:03:29.491
before the execution phase starts,
64

64

00:03:29.491  -->  00:03:33.593
while variables are set up to "undefined"
65

65

00:03:33.593  -->  00:03:38.035
and will only be defined in the execution phase.
66

66

00:03:38.035  -->  00:03:40.689
As you remember from the last slide,
67

67

00:03:40.689  -->  00:03:45.173
the execution phase comes just after the creation phase.
68

68

00:03:45.173  -->  00:03:47.530
Now, hoisting is something that confuses
69

69

00:03:47.530  -->  00:03:50.202
many new JavaScript developers,
70

70

00:03:50.202  -->  00:03:53.813
so it's really important that you understand it right now.
71

71

00:03:53.813  -->  00:03:55.662
That's why we're going to write some code
72

72

00:03:55.662  -->  00:03:59.901
in the next lecture, so that we can see this in practice.
73

73

00:03:59.901  -->  00:04:02.762
So just to recap all of this once again,
74

74

00:04:02.762  -->  00:04:05.625
each execution context has an object
75

75

00:04:05.625  -->  00:04:08.006
which stores a lot of important data
76

76

00:04:08.006  -->  00:04:10.940
that the function will use while it's running,
77

77

00:04:10.940  -->  00:04:14.938
and this happens even before the code is executed.
78

78

00:04:14.938  -->  00:04:17.387
All right, let's go to the next lecture
79

79

00:04:17.387  -->  00:04:19.720
to see hoisting in practice.
