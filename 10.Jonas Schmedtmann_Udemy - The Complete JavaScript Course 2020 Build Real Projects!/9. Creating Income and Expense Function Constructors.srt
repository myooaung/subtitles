1
1

00:00:00,660  -->  00:00:03,988
<v Instructor>In this lecture we're gonna think together</v>
2

2

00:00:03,988  -->  00:00:06,436
about how we wanna store our income
3

3

00:00:06,436  -->  00:00:09,769
and expense data in a budget controller.
4

4

00:00:11,367  -->  00:00:13,684
So in this lecture you'll learn how to choose
5

5

00:00:13,684  -->  00:00:17,525
fine tune constructors that meet our application needs
6

6

00:00:17,525  -->  00:00:20,532
and how to setup appropriate data structure
7

7

00:00:20,532  -->  00:00:22,699
for our budget controller.
8

8

00:00:23,558  -->  00:00:26,011
So lets go to our budget controller
9

9

00:00:26,011  -->  00:00:29,891
up here which is still empty at this point.
10

10

00:00:29,891  -->  00:00:34,058
Okay, so we need a data model for expenses and incomes here.
11

11

00:00:35,202  -->  00:00:36,972
So we know that each new item
12

12

00:00:36,972  -->  00:00:40,396
will have a description and a value, right?
13

13

00:00:40,396  -->  00:00:42,874
And we also know that we should probably
14

14

00:00:42,874  -->  00:00:45,026
have some way to distinguish between
15

15

00:00:45,026  -->  00:00:47,856
different incomes or expenses.
16

16

00:00:47,856  -->  00:00:50,249
And so basically we want them to have
17

17

00:00:50,249  -->  00:00:53,232
a unique ID number as well.
18

18

00:00:53,232  -->  00:00:56,697
Now how would you store this kind of data?
19

19

00:00:56,697  -->  00:00:59,242
I know that I would choose an object
20

20

00:00:59,242  -->  00:01:01,364
that sounds like the best choice
21

21

00:01:01,364  -->  00:01:04,828
so an object that simply has a description
22

22

00:01:04,828  -->  00:01:06,328
a value and an ID.
23

23

00:01:07,637  -->  00:01:11,995
Now what do we do when we wanna create lots of objects?
24

24

00:01:11,995  -->  00:01:14,439
Yes, we create function constructors
25

25

00:01:14,439  -->  00:01:17,510
which we can then use to extantiate
26

26

00:01:17,510  -->  00:01:21,770
lots of objects lots of expense and income objects
27

27

00:01:21,770  -->  00:01:25,192
and like that we basically create a custom data type
28

28

00:01:25,192  -->  00:01:28,195
for incomes and well for expenses
29

29

00:01:28,195  -->  00:01:29,755
So lets do that.
30

30

00:01:29,755  -->  00:01:32,126
So I'm gonna start with the expense
31

31

00:01:32,126  -->  00:01:34,793
so Expense, and you already know
32

32

00:01:35,903  -->  00:01:37,907
that for a function constructor
33

33

00:01:37,907  -->  00:01:41,342
we usually use the capital letter here in the beginning
34

34

00:01:41,342  -->  00:01:46,114
so we can distinguish them from the other functions.
35

35

00:01:46,114  -->  00:01:49,720
Function and now we pass the data into it
36

36

00:01:49,720  -->  00:01:51,729
that we want them to have.
37

37

00:01:51,729  -->  00:01:54,396
So again they should have an id,
38

38

00:01:55,231  -->  00:01:57,398
a description and a value.
39

39

00:01:59,475  -->  00:02:01,112
And I hope that you remember how
40

40

00:02:01,112  -->  00:02:04,250
we actually write these function constructors right?
41

41

00:02:04,250  -->  00:02:05,625
So it goes like this
42

42

00:02:05,625  -->  00:02:08,458
we say this dot id should be equal
43

43

00:02:10,155  -->  00:02:12,596
to the id that we pass it.
44

44

00:02:12,596  -->  00:02:16,096
And the same for the others so description
45

45

00:02:17,773  -->  00:02:21,190
should be the description that we pass in
46

46

00:02:22,324  -->  00:02:23,824
and then the value
47

47

00:02:26,847  -->  00:02:30,571
so this dot value should be the value
48

48

00:02:30,571  -->  00:02:33,470
that we pass into our function constructor
49

49

00:02:33,470  -->  00:02:35,264
and that's it actually.
50

50

00:02:35,264  -->  00:02:37,807
So again we choose to create objects here
51

51

00:02:37,807  -->  00:02:40,539
through the expense function constructor
52

52

00:02:40,539  -->  00:02:42,934
because there will be lots of expenses
53

53

00:02:42,934  -->  00:02:46,612
and therefore this is the best way to do this.
54

54

00:02:46,612  -->  00:02:48,724
Okay so that's the expense
55

55

00:02:48,724  -->  00:02:51,966
now I'll also need this for the income
56

56

00:02:51,966  -->  00:02:55,201
and actually it'll be exactly the same for now
57

57

00:02:55,201  -->  00:02:59,368
so I'll just copy it, and then change it here to income.
58

58

00:03:01,992  -->  00:03:03,919
It cannot be the exact same though
59

59

00:03:03,919  -->  00:03:06,238
because later in the project I'll have
60

60

00:03:06,238  -->  00:03:09,104
to add more things into the expense
61

61

00:03:09,104  -->  00:03:12,004
so the expense will be different from the income.
62

62

00:03:12,004  -->  00:03:14,194
So we have to keep them separate
63

63

00:03:14,194  -->  00:03:16,490
now in case that we need some methods for them
64

64

00:03:16,490  -->  00:03:18,416
we can of course put these methods
65

65

00:03:18,416  -->  00:03:21,256
in a prototype property of the expense
66

66

00:03:21,256  -->  00:03:24,412
or of the income for the function constructors here
67

67

00:03:24,412  -->  00:03:26,318
like we did before.
68

68

00:03:26,318  -->  00:03:28,595
So that all objects created through them
69

69

00:03:28,595  -->  00:03:30,887
will inherit these methods
70

70

00:03:30,887  -->  00:03:32,923
so instead of writing these methods
71

71

00:03:32,923  -->  00:03:35,790
right into the constructors we can put them
72

72

00:03:35,790  -->  00:03:39,246
into the prototypes and we already learnt that before right?
73

73

00:03:39,246  -->  00:03:41,276
So this is better because in this way
74

74

00:03:41,276  -->  00:03:44,050
they are not attached to each individual object
75

75

00:03:44,050  -->  00:03:47,014
but instead its object will then inherit it
76

76

00:03:47,014  -->  00:03:51,825
from the prototype, so yeah exactly like we learnt before.
77

77

00:03:51,825  -->  00:03:53,769
But for now lets leave it like this because
78

78

00:03:53,769  -->  00:03:56,936
we don't have any method here for now.
79

79

00:03:58,296  -->  00:04:01,433
Okay so these are now private functions here
80

80

00:04:01,433  -->  00:04:03,236
in the budget controller module
81

81

00:04:03,236  -->  00:04:05,208
but let me just take this one and copy it here
82

82

00:04:05,208  -->  00:04:08,496
to the outside just so that we can experiment
83

83

00:04:08,496  -->  00:04:10,996
with it and then cancel, okay?
84

84

00:04:12,213  -->  00:04:16,272
So just like this now we delete it after, okay?
85

85

00:04:16,272  -->  00:04:19,772
So lets just go here and refresh this page
86

86

00:04:20,636  -->  00:04:25,490
and then we hopefully have the expense here lets see.
87

87

00:04:25,490  -->  00:04:28,926
So yes this is our function constructor.
88

88

00:04:28,926  -->  00:04:32,509
So lets now create a new object using this.
89

89

00:04:33,625  -->  00:04:37,625
Lets say var exp and remember we now have to use
90

90

00:04:39,822  -->  00:04:43,878
the new keyword and why is that, do you remember?
91

91

00:04:43,878  -->  00:04:47,817
It's because this new keyword creates a new empty object
92

92

00:04:47,817  -->  00:04:50,535
and then calls the expense function
93

93

00:04:50,535  -->  00:04:53,858
and points to this keyword of that function
94

94

00:04:53,858  -->  00:04:55,997
to the new object that was created.
95

95

00:04:55,997  -->  00:04:58,408
So when we're done set properties on the disk keyword
96

96

00:04:58,408  -->  00:05:00,986
we automatically set them on the new object
97

97

00:05:00,986  -->  00:05:02,457
that was created here.
98

98

00:05:02,457  -->  00:05:04,818
And that's why function constructors work.
99

99

00:05:04,818  -->  00:05:06,934
Alright, so I'm sure you'll remember this
100

100

00:05:06,934  -->  00:05:08,775
from the lectures that we had before
101

101

00:05:08,775  -->  00:05:12,431
so I just wanted to remind you of that.
102

102

00:05:12,431  -->  00:05:14,749
And of course you can always go back to that
103

103

00:05:14,749  -->  00:05:17,073
if you feel like it.
104

104

00:05:17,073  -->  00:05:19,326
Alright so the id lets say it's one
105

105

00:05:19,326  -->  00:05:23,493
the description can be again Test and lets say 100.
106

106

00:05:25,405  -->  00:05:29,576
Alright, and if we now see the expense object
107

107

00:05:29,576  -->  00:05:32,866
it is indeed as we wanted it to be
108

108

00:05:32,866  -->  00:05:34,697
so description ID and value and then
109

109

00:05:34,697  -->  00:05:36,857
the prototype is of course the object.
110

110

00:05:36,857  -->  00:05:40,444
And here we see that this is an expense object now
111

111

00:05:40,444  -->  00:05:42,216
because it was created through
112

112

00:05:42,216  -->  00:05:45,129
the expense function constructor.
113

113

00:05:45,129  -->  00:05:49,621
Okay so this function constructor works as expected
114

114

00:05:49,621  -->  00:05:50,942
so I don't need this anymore here
115

115

00:05:50,942  -->  00:05:54,853
because I really just want them to be private in here.
116

116

00:05:54,853  -->  00:05:57,344
So that's it about function constructors
117

117

00:05:57,344  -->  00:05:59,142
lets now think about the data structure
118

118

00:05:59,142  -->  00:06:02,075
of this budget controller itself
119

119

00:06:02,075  -->  00:06:05,370
and remember the budget controller keeps track
120

120

00:06:05,370  -->  00:06:07,770
of all the incomes and expenses
121

121

00:06:07,770  -->  00:06:09,512
and also of the budget itself
122

122

00:06:09,512  -->  00:06:11,677
and later also the percentages.
123

123

00:06:11,677  -->  00:06:15,273
And so we need a good data structure for that
124

124

00:06:15,273  -->  00:06:18,820
so imagine that the user would input 10 incomes
125

125

00:06:18,820  -->  00:06:22,188
so we would create 10 income objects right?
126

126

00:06:22,188  -->  00:06:26,434
So where would you store all of these 10 incomes
127

127

00:06:26,434  -->  00:06:28,204
I think that the best solution
128

128

00:06:28,204  -->  00:06:31,690
is to store these into an array, very simple
129

129

00:06:31,690  -->  00:06:36,326
so we could go ahead and create something like this
130

130

00:06:36,326  -->  00:06:39,409
so var allExpenses and an empty array
131

131

00:06:41,659  -->  00:06:44,668
where we're then going to store all of these.
132

132

00:06:44,668  -->  00:06:48,835
And then we could do the same thing for the incomes
133

133

00:06:50,490  -->  00:06:54,288
so incomes and then we could also say
134

134

00:06:54,288  -->  00:06:57,621
var totalExpenses equal zero for example
135

135

00:07:00,043  -->  00:07:01,996
and do the same thing for the income
136

136

00:07:01,996  -->  00:07:04,853
and for our budget and so on and so forth.
137

137

00:07:04,853  -->  00:07:07,684
Now this is maybe not the best solution right?
138

138

00:07:07,684  -->  00:07:09,822
Because think about this, each time
139

139

00:07:09,822  -->  00:07:13,672
that we can somehow aggregate a lot of information
140

140

00:07:13,672  -->  00:07:18,083
into one nice data structure, we should definitely do that.
141

141

00:07:18,083  -->  00:07:20,186
It's always better to have one data structure
142

142

00:07:20,186  -->  00:07:22,830
where all of our data goes instead of having
143

143

00:07:22,830  -->  00:07:26,944
a lot of like random variables flowing around okay?
144

144

00:07:26,944  -->  00:07:27,899
So lets do that let's create
145

145

00:07:27,899  -->  00:07:30,297
one big structure for everything
146

146

00:07:30,297  -->  00:07:33,638
and I'm simply gonna call this one data okay?
147

147

00:07:33,638  -->  00:07:37,221
So var data will be simply an object
148

148

00:07:37,221  -->  00:07:39,932
where I'm gonna put all of this data
149

149

00:07:39,932  -->  00:07:42,951
so what do you think of doing it like this?
150

150

00:07:42,951  -->  00:07:45,201
So I'm just gonna copy this
151

151

00:07:49,367  -->  00:07:52,950
and turn it into properties of this object.
152

152

00:07:56,474  -->  00:07:58,052
So what do you think of this?
153

153

00:07:58,052  -->  00:08:00,923
We can still do a little bit better right?
154

154

00:08:00,923  -->  00:08:03,187
because both of these are arrays
155

155

00:08:03,187  -->  00:08:07,354
which store all instances of either expenses or incomes
156

156

00:08:08,567  -->  00:08:12,542
so what we can do here is to simply write
157

157

00:08:12,542  -->  00:08:16,292
allItems and then allItems is also an object.
158

158

00:08:19,608  -->  00:08:23,375
And now we say expenses is an empty array
159

159

00:08:23,375  -->  00:08:26,208
and incomes is also an empty array
160

160

00:08:27,476  -->  00:08:29,059
and this is better.
161

161

00:08:30,147  -->  00:08:34,556
Here of course it's a comma and on the same thing
162

162

00:08:34,556  -->  00:08:36,167
for the total expenses.
163

163

00:08:36,167  -->  00:08:37,840
So instead of writing total expenses
164

164

00:08:37,840  -->  00:08:40,257
and total incomes, we can say
165

165

00:08:41,452  -->  00:08:45,035
totals simply, and then let it be an object
166

166

00:08:48,024  -->  00:08:52,191
and then zero for the expenses and zero for the incomes.
167

167

00:08:53,419  -->  00:08:55,428
And we're gonna use this one later
168

168

00:08:55,428  -->  00:08:59,153
and we're later also gonna add more things in here
169

169

00:08:59,153  -->  00:09:01,467
but for now that's enough to show you
170

170

00:09:01,467  -->  00:09:05,995
how and why we should create a data structure like this.
171

171

00:09:05,995  -->  00:09:07,875
And this will make even more sense
172

172

00:09:07,875  -->  00:09:10,730
as you progress with the project, okay.
173

173

00:09:10,730  -->  00:09:12,484
So now we have everything set up
174

174

00:09:12,484  -->  00:09:14,589
here in our budget controller
175

175

00:09:14,589  -->  00:09:18,055
so that in the next lecture we can actually create
176

176

00:09:18,055  -->  00:09:20,351
a new item here when someone inputs
177

177

00:09:20,351  -->  00:09:24,877
in your income or an expense into our user interface.
178

178

00:09:24,877  -->  00:09:26,897
So we have our constructors and
179

179

00:09:26,897  -->  00:09:28,622
we have this data structure here
180

180

00:09:28,622  -->  00:09:32,289
ready to receive data so we can now move on.
