1
1

00:00:01,320  -->  00:00:03,660
<v Narrator>Arrays are a fundamental concept</v>
2

2

00:00:03,660  -->  00:00:05,370
in JavaScript that you're gonna use
3

3

00:00:05,370  -->  00:00:08,721
throughout your entire JavaScript Live.
4

4

00:00:08,721  -->  00:00:10,983
Let's now learn exactly how they work.
5

5

00:00:12,040  -->  00:00:14,860
In many previous lectures, we had different variables
6

6

00:00:14,860  -->  00:00:17,490
for different persons, but now imagine
7

7

00:00:17,490  -->  00:00:19,810
how handy it would be to bundle them all
8

8

00:00:19,810  -->  00:00:22,120
into one single variable.
9

9

00:00:22,120  -->  00:00:24,370
In JavaScript we have arrays for that.
10

10

00:00:24,370  -->  00:00:26,710
They're like collections of variables
11

11

00:00:26,710  -->  00:00:28,843
that can even have different data types.
12

12

00:00:30,218  -->  00:00:32,280
Let's declare a variable like always
13

13

00:00:33,400  -->  00:00:36,880
called names and now we can use an array.
14

14

00:00:36,880  -->  00:00:39,540
There are different ways of creating a new array,
15

15

00:00:39,540  -->  00:00:43,290
but the easiest and most used one is using brackets.
16

16

00:00:43,290  -->  00:00:45,120
We use the brackets and then in here
17

17

00:00:45,120  -->  00:00:47,093
we put our different values.
18

18

00:00:47,950  -->  00:00:50,210
Let's say we want an array of names,
19

19

00:00:50,210  -->  00:00:54,293
so John then comma and then we add a new element,
20

20

00:00:55,170  -->  00:00:59,463
so Mark and then let's say a third element called Jane.
21

21

00:01:01,290  -->  00:01:03,500
Now we have array of names,
22

22

00:01:03,500  -->  00:01:07,330
an array with three elements called John, Mark, and Jane
23

23

00:01:07,330  -->  00:01:08,983
all separated by these commas.
24

24

00:01:10,520  -->  00:01:12,763
Let's create a new one called years.
25

25

00:01:14,150  -->  00:01:15,800
As I mentioned, there are different ways
26

26

00:01:15,800  -->  00:01:18,363
of creating arrays, so let's see another one,
27

27

00:01:19,320  -->  00:01:23,980
which is new array, so you can do an array like this
28

28

00:01:23,980  -->  00:01:26,430
basically calling this array function here
29

29

00:01:26,430  -->  00:01:28,970
with a new key word and then in there
30

30

00:01:28,970  -->  00:01:33,970
you pass the data that you want to be in the array, so 1990,
31

31

00:01:34,940  -->  00:01:37,883
1969, and 1948.
32

32

00:01:40,639  -->  00:01:42,790
This will be an array the same, but, again,
33

33

00:01:42,790  -->  00:01:45,650
this here is far more used and so you will usually
34

34

00:01:45,650  -->  00:01:46,850
not use this one.
35

35

00:01:46,850  -->  00:01:49,780
I just wanted to let you know that it also exists.
36

36

00:01:49,780  -->  00:01:52,920
We say that arrays are zero based,
37

37

00:01:52,920  -->  00:01:56,600
which means that the first element is element number zero,
38

38

00:01:56,600  -->  00:01:59,400
the second one is element number one,
39

39

00:01:59,400  -->  00:02:02,870
number two, and so forth and so on.
40

40

00:02:02,870  -->  00:02:04,730
Let's now see how we can actually access
41

41

00:02:04,730  -->  00:02:05,973
elements in an array.
42

42

00:02:07,590  -->  00:02:09,140
We're gonna log to the console,
43

43

00:02:10,670  -->  00:02:13,410
names, and then we use the brackets again
44

44

00:02:13,410  -->  00:02:15,483
and then the index, so the number.
45

45

00:02:16,960  -->  00:02:20,280
Names, brackets, zero will be the element zero
46

46

00:02:20,280  -->  00:02:21,630
of the names array.
47

47

00:02:21,630  -->  00:02:23,680
Remember that arrays are zero based
48

48

00:02:23,680  -->  00:02:27,030
and so John is the element zero.
49

49

00:02:27,030  -->  00:02:30,500
Let's take a look at that and indeed we see John.
50

50

00:02:30,500  -->  00:02:33,250
Of course we could also log the entire array,
51

51

00:02:33,250  -->  00:02:35,620
so this is how it's gonna look like,
52

52

00:02:35,620  -->  00:02:37,910
so we have here, we state number three,
53

53

00:02:37,910  -->  00:02:40,320
which is the amount of elements in the array
54

54

00:02:40,320  -->  00:02:42,500
and then the entire array.
55

55

00:02:42,500  -->  00:02:44,700
Actually we can also access this number here
56

56

00:02:45,730  -->  00:02:47,380
and all we have to do in order to do that
57

57

00:02:47,380  -->  00:02:50,133
is to say names.length,
58

58

00:02:51,280  -->  00:02:54,220
so we will learn later what this dot here means,
59

59

00:02:54,220  -->  00:02:57,710
but for now just know that we can do names.length
60

60

00:02:57,710  -->  00:03:00,820
and then that will show us how many elements are in there.
61

61

00:03:00,820  -->  00:03:03,220
In this case, it just returned undefined,
62

62

00:03:03,220  -->  00:03:06,680
but that is just because I misspelled length.
63

63

00:03:06,680  -->  00:03:08,440
That's what it should look like
64

64

00:03:08,440  -->  00:03:11,090
and now we should get the number three,
65

65

00:03:11,090  -->  00:03:13,403
so we have three elements in our array.
66

66

00:03:15,160  -->  00:03:16,170
We access number zero.
67

67

00:03:16,170  -->  00:03:17,820
We can also access number two, for example,
68

68

00:03:17,820  -->  00:03:19,463
and that should then be Jane.
69

69

00:03:21,080  -->  00:03:23,310
This is how we retrieve, basically,
70

70

00:03:23,310  -->  00:03:26,530
data from the array, but we can also use the syntax
71

71

00:03:26,530  -->  00:03:29,840
to mutate the data in the array.
72

72

00:03:29,840  -->  00:03:34,210
We can say names and one, which will be Mark
73

73

00:03:34,210  -->  00:03:36,270
and then we can say that we want it to be
74

74

00:03:37,490  -->  00:03:38,913
Ben instead of Mark.
75

75

00:03:40,470  -->  00:03:42,473
If we now log the array,
76

76

00:03:48,220  -->  00:03:50,130
then we should see that it's different.
77

77

00:03:50,130  -->  00:03:52,840
Now it is actually on position number one,
78

78

00:03:52,840  -->  00:03:54,913
it is Ben and no longer Mark.
79

79

00:03:56,070  -->  00:03:58,133
We can also add data to the array,
80

80

00:03:59,190  -->  00:04:01,140
so we can actually access a position
81

81

00:04:01,140  -->  00:04:02,540
that's not even there.
82

82

00:04:02,540  -->  00:04:05,323
Let's say we want position five to be Mary.
83

83

00:04:09,110  -->  00:04:10,940
Let's see what happens then
84

84

00:04:10,940  -->  00:04:14,260
and actually let's put it here before this console.log
85

85

00:04:16,640  -->  00:04:19,630
and so you see that now we have empty here
86

86

00:04:19,630  -->  00:04:21,930
and then, only then comes Mary.
87

87

00:04:21,930  -->  00:04:25,520
Now if we wanted to add the Mary as a last element
88

88

00:04:25,520  -->  00:04:28,140
in the array, we could use this property
89

89

00:04:28,140  -->  00:04:31,480
that we used before, so names.length.
90

90

00:04:31,480  -->  00:04:34,080
Remember that this is three at this point.
91

91

00:04:34,080  -->  00:04:36,910
If we say names, names.length and this will
92

92

00:04:36,910  -->  00:04:39,763
then beat three and so names three should be Mary.
93

93

00:04:41,070  -->  00:04:45,580
Then it adds this as a last element in the array basically.
94

94

00:04:45,580  -->  00:04:47,210
Make sense?
95

95

00:04:47,210  -->  00:04:50,403
First, let me actually add it here,
96

96

00:04:52,530  -->  00:04:54,200
so Mutate array data,
97

97

00:04:54,200  -->  00:04:55,223
here we can say,
98

98

00:04:59,470  -->  00:05:00,743
Initialize new array.
99

99

00:05:02,130  -->  00:05:05,580
First here we mutated the array on position number one
100

100

00:05:05,580  -->  00:05:08,750
and added Ben, then here we mutated the array
101

101

00:05:08,750  -->  00:05:11,110
at position number names.length
102

102

00:05:11,110  -->  00:05:12,943
and that is three at this point.
103

103

00:05:13,840  -->  00:05:16,170
So at names position number three,
104

104

00:05:16,170  -->  00:05:18,900
we will add Mary and so position number three
105

105

00:05:18,900  -->  00:05:22,510
will be the last one, so zero, one, two,
106

106

00:05:22,510  -->  00:05:24,263
and then three is the new one.
107

107

00:05:25,670  -->  00:05:28,090
I hope that you start to see how useful arrays
108

108

00:05:28,090  -->  00:05:30,650
can be by holding this different data
109

109

00:05:30,650  -->  00:05:32,490
all in one variable.
110

110

00:05:32,490  -->  00:05:35,413
Of course, this can also be different data types.
111

111

00:05:40,990  -->  00:05:43,000
Let's say that we want to have all the information
112

112

00:05:43,000  -->  00:05:45,983
about John all in one variable.
113

113

00:05:47,010  -->  00:05:48,370
Let's give us some more space here
114

114

00:05:48,370  -->  00:05:51,490
and then let's say var john
115

115

00:05:54,130  -->  00:05:56,090
and now we can put the first name,
116

116

00:05:56,090  -->  00:05:58,720
we can put the last name,
117

117

00:05:58,720  -->  00:06:01,940
we can put the date of birth,
118

118

00:06:01,940  -->  00:06:06,560
we can put the job, and we can put that he is single
119

119

00:06:06,560  -->  00:06:09,913
or that he's not married, so let's say false.
120

120

00:06:11,950  -->  00:06:15,310
Now we have different data type all in one data structure,
121

121

00:06:15,310  -->  00:06:17,430
which is this array.
122

122

00:06:17,430  -->  00:06:20,360
These are the very, very basics of arrays,
123

123

00:06:20,360  -->  00:06:22,340
but let's make it a bit better even
124

124

00:06:22,340  -->  00:06:24,260
because there are a couple of functions
125

125

00:06:24,260  -->  00:06:26,740
that we can basically apply to arrays.
126

126

00:06:26,740  -->  00:06:28,800
These functions are called methods
127

127

00:06:28,800  -->  00:06:30,980
that are specific to arrays.
128

128

00:06:30,980  -->  00:06:32,800
You will learn all about methods
129

129

00:06:32,800  -->  00:06:34,620
and why they are called methods in this case
130

130

00:06:34,620  -->  00:06:36,640
in the next couple of lectures.
131

131

00:06:36,640  -->  00:06:39,180
For now, just know that we can do something like,
132

132

00:06:39,180  -->  00:06:42,210
like this, so we have our john variable
133

133

00:06:42,210  -->  00:06:46,350
and then we can say .push and then this is like
134

134

00:06:46,350  -->  00:06:47,657
a regular function.
135

135

00:06:47,657  -->  00:06:50,000
The push function or the push method
136

136

00:06:50,000  -->  00:06:52,470
what it will do is it will add an element
137

137

00:06:52,470  -->  00:06:53,950
at the end of the array.
138

138

00:06:53,950  -->  00:06:56,400
Let's say that John's favorite color is blue
139

139

00:06:57,330  -->  00:07:00,040
and so if we pass in blue now here,
140

140

00:07:00,040  -->  00:07:04,480
it will then add that element to the end of the array,
141

141

00:07:04,480  -->  00:07:09,270
so console.log john
142

142

00:07:09,270  -->  00:07:11,393
and so let's see how that worked.
143

143

00:07:12,450  -->  00:07:15,520
Indeed, we have now the array that we declared initially
144

144

00:07:15,520  -->  00:07:18,710
plus the blue element at the end of the array.
145

145

00:07:18,710  -->  00:07:22,170
That's what the push method, the push function here did
146

146

00:07:22,170  -->  00:07:23,413
to the John array.
147

147

00:07:24,370  -->  00:07:26,380
Don't worry about this dot syntax here
148

148

00:07:26,380  -->  00:07:30,110
and this function, this way we call this push function.
149

149

00:07:30,110  -->  00:07:31,970
We will learn about why it works this way
150

150

00:07:31,970  -->  00:07:33,660
in a couple of lectures.
151

151

00:07:33,660  -->  00:07:35,900
There are a couple of methods that I want to show you now
152

152

00:07:35,900  -->  00:07:37,690
because push is not the only one.
153

153

00:07:37,690  -->  00:07:40,040
There are tons a different methods for arrays.
154

154

00:07:40,040  -->  00:07:42,890
Now we'll just show you a couple of them now.
155

155

00:07:42,890  -->  00:07:45,077
We can also use john unshift
156

156

00:07:47,280  -->  00:07:50,330
and what unshift will do is very similar to push,
157

157

00:07:50,330  -->  00:07:52,410
but instead of adding to the end of the array,
158

158

00:07:52,410  -->  00:07:54,320
it'll add it to the beginning.
159

159

00:07:54,320  -->  00:07:56,500
Let's say that we want to add a title,
160

160

00:07:56,500  -->  00:08:01,500
so Mr., so that it's Mr. John Smith.
161

161

00:08:01,598  -->  00:08:04,020
Now we have the first element, the Mr.,
162

162

00:08:04,020  -->  00:08:07,970
and then the rest as we've seen in the previous steps.
163

163

00:08:07,970  -->  00:08:11,060
These two methods here, they add elements to the array.
164

164

00:08:11,060  -->  00:08:15,343
Let's now see two methods that remove them, so john.pop
165

165

00:08:18,320  -->  00:08:21,683
and what this will do, it removes the element from the end.
166

166

00:08:23,760  -->  00:08:26,860
Let's now then log into the console again
167

167

00:08:26,860  -->  00:08:30,000
and so now you see that we have the array from before,
168

168

00:08:30,000  -->  00:08:32,770
but without the blue element.
169

169

00:08:32,770  -->  00:08:36,470
If we do it again, then it will remove yet another
170

170

00:08:36,470  -->  00:08:40,850
from the end and so now we should also lose the false.
171

171

00:08:40,850  -->  00:08:42,200
Let's take a look at that
172

172

00:08:42,200  -->  00:08:44,993
and indeed it did now remove these two.
173

173

00:08:47,790  -->  00:08:49,930
Finally, we also have a method of course
174

174

00:08:49,930  -->  00:08:53,453
to remove the first element and that one is called shift.
175

175

00:08:54,930  -->  00:08:57,430
Now we should lose the Mr. here
176

176

00:08:57,430  -->  00:08:58,833
and, yeah, indeed it's gone.
177

177

00:09:00,830  -->  00:09:04,330
Push and shift, pop and shift methods.
178

178

00:09:04,330  -->  00:09:06,380
Just one last (mumbles) I want to show you,
179

179

00:09:06,380  -->  00:09:07,900
which is the indexOf.
180

180

00:09:09,610  -->  00:09:10,810
Let me show that to you,
181

181

00:09:11,860  -->  00:09:15,690
so indexOf will return the position of the argument
182

182

00:09:15,690  -->  00:09:17,933
that we pass in inside of this array.
183

183

00:09:18,920  -->  00:09:20,750
Let's say that we want to know the position
184

184

00:09:20,750  -->  00:09:24,950
of the 1990, so we pass in this value
185

185

00:09:24,950  -->  00:09:27,800
and indexOf will then return in which position
186

186

00:09:27,800  -->  00:09:30,913
this 1990 appears in the John array.
187

187

00:09:33,110  -->  00:09:36,508
Let's log that to the console, so we take a look at it.
188

188

00:09:36,508  -->  00:09:38,460
What do you think it will be?
189

189

00:09:38,460  -->  00:09:41,730
We'll take a guess and now let's see.
190

190

00:09:41,730  -->  00:09:44,090
It is number two and indeed it is,
191

191

00:09:44,090  -->  00:09:46,863
so zero, one, and two.
192

192

00:09:48,290  -->  00:09:50,530
It returns the position at which the element
193

193

00:09:50,530  -->  00:09:53,690
is in the array, if it is in the array, and if that element
194

194

00:09:53,690  -->  00:09:55,520
is actually not present in the array
195

195

00:09:55,520  -->  00:09:57,590
it will return minus one.
196

196

00:09:57,590  -->  00:09:59,880
Let's say that we pass in something else,
197

197

00:09:59,880  -->  00:10:03,340
let's say 23 and so now it should return minus one
198

198

00:10:03,340  -->  00:10:06,200
and indeed it does because we don't have any 23
199

199

00:10:06,200  -->  00:10:07,510
in that array.
200

200

00:10:07,510  -->  00:10:09,320
One of the things that this method here
201

201

00:10:09,320  -->  00:10:12,620
is most useful for is to actually test if an element
202

202

00:10:12,620  -->  00:10:14,780
is in the array or not.
203

203

00:10:14,780  -->  00:10:15,980
Let me show that to you.
204

204

00:10:16,840  -->  00:10:18,500
Let's use the (mumbles) operator
205

205

00:10:18,500  -->  00:10:20,160
that we learned about before,
206

206

00:10:20,160  -->  00:10:21,647
so john.indexOf
207

207

00:10:23,460  -->  00:10:26,493
and so now let's test if John is a designer.
208

208

00:10:28,630  -->  00:10:33,073
We ask the position of the designer element in the array,
209

209

00:10:34,030  -->  00:10:36,640
so that will return a number to us, then we say
210

210

00:10:37,930  -->  00:10:39,983
if it's equal to minus one,
211

211

00:10:42,010  -->  00:10:47,010
well, then John is NOT a designer
212

212

00:10:49,040  -->  00:10:54,040
and else John IS a designer.
213

213

00:10:57,330  -->  00:10:58,380
Let's check that out.
214

214

00:10:59,740  -->  00:11:01,800
Nothing happens of course because we didn't
215

215

00:11:01,800  -->  00:11:04,060
assign this here to any variable.
216

216

00:11:04,060  -->  00:11:06,197
Let's say var isDesigner
217

217

00:11:08,651  -->  00:11:11,734
and then we can log into the console.
218

218

00:11:17,868  -->  00:11:19,785
John is NOT a designer.
219

219

00:11:20,620  -->  00:11:22,440
Let's see why that happened.
220

220

00:11:22,440  -->  00:11:25,260
We searched for designer in the array,
221

221

00:11:25,260  -->  00:11:27,810
but that element is not actually in that array,
222

222

00:11:27,810  -->  00:11:29,940
so it will return minus one.
223

223

00:11:29,940  -->  00:11:32,310
This entire part here will be minus one
224

224

00:11:32,310  -->  00:11:35,840
and so we test is minus one equal to minus one?
225

225

00:11:35,840  -->  00:11:36,803
Yeah, indeed it is.
226

226

00:11:38,112  -->  00:11:40,250
The isDesigner variable will be assigned
227

227

00:11:40,250  -->  00:11:42,433
that John is NOT a designer string.
228

228

00:11:43,340  -->  00:11:46,450
Let's say we now change it to designer
229

229

00:11:46,450  -->  00:11:49,320
and so now we should see that John IS a designer
230

230

00:11:49,320  -->  00:11:52,363
because it will now actually return this index.
231

231

00:11:53,210  -->  00:11:54,910
Let's try that out in the console,
232

232

00:11:56,420  -->  00:11:59,650
so indexOf and you see that it is three,
233

233

00:11:59,650  -->  00:12:03,430
so zero, one, two, and three.
234

234

00:12:03,430  -->  00:12:06,600
Three is, of course, different than minus one
235

235

00:12:06,600  -->  00:12:09,730
and so we now have John IS a designer.
236

236

00:12:09,730  -->  00:12:13,450
These are just a couple of methods on arrays
237

237

00:12:13,450  -->  00:12:15,680
and I'm gonna show you many, many, many more
238

238

00:12:15,680  -->  00:12:17,460
throughout the rest of the course.
239

239

00:12:17,460  -->  00:12:20,390
For now you know how arrays work and that's amazing.
240

240

00:12:20,390  -->  00:12:22,580
It's a really powerful data structure
241

241

00:12:22,580  -->  00:12:24,890
that we can use in JavaScript.
242

242

00:12:24,890  -->  00:12:26,700
Now I think that you learned enough already
243

243

00:12:26,700  -->  00:12:29,200
to take on another coding challenge,
244

244

00:12:29,200  -->  00:12:31,250
so let's do that right in the next video.
