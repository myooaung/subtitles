WEBVTT
1
1

00:00:01.340  -->  00:00:02.280
<v Instructor>Now that you're familiar</v>
2

2

00:00:02.280  -->  00:00:04.720
with the fundamentals of the Javascript language,
3

3

00:00:04.720  -->  00:00:05.970
and before moving on,
4

4

00:00:05.970  -->  00:00:08.370
we need to quickly talk about Javascript versions.
5

5

00:00:08.370  -->  00:00:09.203
Okay?
6

6

00:00:09.203  -->  00:00:10.990
Now I could have probably talked about this
7

7

00:00:10.990  -->  00:00:12.560
right at the beginning of the course.
8

8

00:00:12.560  -->  00:00:14.530
But I just wanted to have you writing some code
9

9

00:00:14.530  -->  00:00:16.100
as fast as possible.
10

10

00:00:16.100  -->  00:00:18.200
Anyway, it's very important to talk about
11

11

00:00:18.200  -->  00:00:20.780
Javascript versions, because that's just something
12

12

00:00:20.780  -->  00:00:22.860
that every modern Javascript developer
13

13

00:00:22.860  -->  00:00:24.070
should be aware of.
14

14

00:00:24.070  -->  00:00:25.930
And also because you will see these topics
15

15

00:00:25.930  -->  00:00:28.800
coming up in the developer community all the time.
16

16

00:00:28.800  -->  00:00:31.350
So you wanna be able to understand what's going on.
17

17

00:00:32.360  -->  00:00:33.540
So in order to do that,
18

18

00:00:33.540  -->  00:00:35.540
let's just very briefly talk about
19

19

00:00:35.540  -->  00:00:37.500
the history of Javascript.
20

20

00:00:37.500  -->  00:00:39.560
So, Javascript was first released
21

21

00:00:39.560  -->  00:00:42.030
and called LiveScript in 1995.
22

22

00:00:42.030  -->  00:00:43.800
So, a long time ago.
23

23

00:00:43.800  -->  00:00:46.173
But the name was then very quickly
24

24

00:00:46.173  -->  00:00:47.210
changed to JavaScript.
25

25

00:00:47.210  -->  00:00:49.030
The reason for the change was just
26

26

00:00:49.030  -->  00:00:51.260
to attract developers of another language.
27

27

00:00:51.260  -->  00:00:53.100
It was very popular at the time,
28

28

00:00:53.100  -->  00:00:54.470
and that's Java.
29

29

00:00:54.470  -->  00:00:56.520
So the Java in Javascript was just
30

30

00:00:56.520  -->  00:00:58.140
for marking reasons, really.
31

31

00:00:58.140  -->  00:01:00.760
Because the language itself has almost nothing
32

32

00:01:00.760  -->  00:01:01.830
to do with Java.
33

33

00:01:01.830  -->  00:01:04.930
Some beginners think that this is the case, but no.
34

34

00:01:04.930  -->  00:01:06.580
Javascript and Java are actually
35

35

00:01:06.580  -->  00:01:09.100
two completely different languages.
36

36

00:01:09.100  -->  00:01:11.630
Now, one year later, the language was submitted
37

37

00:01:11.630  -->  00:01:14.090
to an organization called Ecma International
38

38

00:01:14.090  -->  00:01:15.930
in order to create a new standard.
39

39

00:01:15.930  -->  00:01:18.450
And so EcmaScript One, or ES1,
40

40

00:01:18.450  -->  00:01:21.630
became the first version of the Javascript language.
41

41

00:01:21.630  -->  00:01:24.630
In the real world, we usually use the term EcmaScript
42

42

00:01:24.630  -->  00:01:26.110
to refer to the standard
43

43

00:01:26.110  -->  00:01:27.860
while Javascript is used when we talk
44

44

00:01:27.860  -->  00:01:29.720
about the language in practice.
45

45

00:01:29.720  -->  00:01:32.220
Now, fast forward to 2009.
46

46

00:01:32.220  -->  00:01:35.240
ES5 was released with a lot of new features.
47

47

00:01:35.240  -->  00:01:37.620
However, it took many years for browsers
48

48

00:01:37.620  -->  00:01:39.740
to implement all these changes.
49

49

00:01:39.740  -->  00:01:42.940
And finally, the much-awaited new version ES6,
50

50

00:01:42.940  -->  00:01:45.260
was launched in June 2015.
51

51

00:01:45.260  -->  00:01:47.710
And it was the biggest update to the language ever,
52

52

00:01:47.710  -->  00:01:49.740
with a ton of new features.
53

53

00:01:49.740  -->  00:01:51.140
This was, or still is,
54

54

00:01:51.140  -->  00:01:53.350
a really big dea for Javascript,
55

55

00:01:53.350  -->  00:01:55.260
and for the whole developer community.
56

56

00:01:55.260  -->  00:01:58.710
Now you will also see ES6 being called ES2015,
57

57

00:01:58.710  -->  00:02:00.620
which is actually the official name.
58

58

00:02:00.620  -->  00:02:03.090
But most people just call it ES6.
59

59

00:02:03.090  -->  00:02:05.570
So that's what I'm gonna do here as well.
60

60

00:02:05.570  -->  00:02:09.170
Actually, the reason for ES6 being called ES2015
61

61

00:02:09.170  -->  00:02:13.010
is that in 2015, we changed to an annual release cycle.
62

62

00:02:13.010  -->  00:02:15.030
So, a new version of the language
63

63

00:02:15.030  -->  00:02:16.700
is now released every year,
64

64

00:02:16.700  -->  00:02:19.060
with just a few new features per year,
65

65

00:02:19.060  -->  00:02:21.320
instead of shipping a huge new version
66

66

00:02:21.320  -->  00:02:22.830
every couple of years.
67

67

00:02:22.830  -->  00:02:25.000
So this way, it's much easier for everyone
68

68

00:02:25.000  -->  00:02:25.900
to keep up to date.
69

69

00:02:25.900  -->  00:02:28.863
Okay? So it's much easier for us developers like this.
70

70

00:02:29.863  -->  00:02:33.260
So in 2016, ES2016, or ES7, was released.
71

71

00:02:33.260  -->  00:02:36.763
ES2017 in 2017, and, like this,
72

72

00:02:37.763  -->  00:02:39.960
it will continue into the future.
73

73

00:02:39.960  -->  00:02:42.030
So what does Javascript look like today,
74

74

00:02:42.030  -->  00:02:44.920
and which version should and can we use?
75

75

00:02:44.920  -->  00:02:47.060
So first off, ES5 is, of course,
76

76

00:02:47.060  -->  00:02:49.250
fully supported in all browsers today.
77

77

00:02:49.250  -->  00:02:51.820
So that's the one that is safe to be used.
78

78

00:02:51.820  -->  00:02:55.380
Now about the newer versions, ES6, ES7 and ES8,
79

79

00:02:55.380  -->  00:02:57.830
as of mid-2018, they are all actually
80

80

00:02:57.830  -->  00:03:00.760
quite well supported in all modern browsers.
81

81

00:03:00.760  -->  00:03:01.910
But the problem with this is
82

82

00:03:01.910  -->  00:03:04.190
that we can't just assume that our users
83

83

00:03:04.190  -->  00:03:05.610
use these modern browsers,
84

84

00:03:05.610  -->  00:03:07.270
at least not all of them.
85

85

00:03:07.270  -->  00:03:08.700
The old browsers will, of course,
86

86

00:03:08.700  -->  00:03:11.180
not understand the ES6 syntax at all.
87

87

00:03:11.180  -->  00:03:14.560
And neither ES7 and ES8, and so on and so forth.
88

88

00:03:14.560  -->  00:03:17.500
So these old browsers are a big problem for us.
89

89

00:03:17.500  -->  00:03:19.620
Now, the solution to this problem is to
90

90

00:03:19.620  -->  00:03:22.250
basically convert these modern Javascript versions
91

91

00:03:22.250  -->  00:03:25.550
back to ES5, using a process called transpiling
92

92

00:03:25.550  -->  00:03:27.230
and also polyfilling.
93

93

00:03:27.230  -->  00:03:28.660
I'm gonna teach you how to do that
94

94

00:03:28.660  -->  00:03:31.310
by the end of the course, okay?
95

95

00:03:31.310  -->  00:03:32.220
If you wanna stay up-to-date
96

96

00:03:32.220  -->  00:03:34.520
with what features are currently supported
97

97

00:03:34.520  -->  00:03:36.580
in which browser, you can just check out
98

98

00:03:36.580  -->  00:03:38.760
the ES6 compatibility table,
99

99

00:03:38.760  -->  00:03:41.570
and the link is on my resources page.
100

100

00:03:41.570  -->  00:03:43.690
Next up, there are the future versions
101

101

00:03:43.690  -->  00:03:47.360
of the language, like ES9, ES10, and so on.
102

102

00:03:47.360  -->  00:03:48.720
These future versions, together,
103

103

00:03:48.720  -->  00:03:51.140
are many times called ESNext.
104

104

00:03:51.140  -->  00:03:53.360
Now some features of these future versions
105

105

00:03:53.360  -->  00:03:56.300
are actually already implemented in some browsers.
106

106

00:03:56.300  -->  00:03:58.250
So you could use them by transpiling
107

107

00:03:58.250  -->  00:04:00.540
and polyfilling your code today.
108

108

00:04:00.540  -->  00:04:02.600
But to be honest, I wouldn't really advise
109

109

00:04:02.600  -->  00:04:04.070
you to do so at this point.
110

110

00:04:04.070  -->  00:04:07.660
Because I believe that ES6, ES7, and ES8 together
111

111

00:04:07.660  -->  00:04:09.960
are powerful enough to bring the Javascript
112

112

00:04:09.960  -->  00:04:12.960
development experience to a whole new level already,
113

113

00:04:12.960  -->  00:04:14.790
as you will see a bit later in the course.
114

114

00:04:14.790  -->  00:04:15.623
All right?
115

115

00:04:16.510  -->  00:04:18.490
So, in this course, we're gonna start by using
116

116

00:04:18.490  -->  00:04:20.730
ES5 in the first part of the course,
117

117

00:04:20.730  -->  00:04:22.550
and then move to ES6 Plus,
118

118

00:04:22.550  -->  00:04:25.800
so ES6, ES7, and ES8, in the second part
119

119

00:04:25.800  -->  00:04:26.633
of the course.
120

120

00:04:26.633  -->  00:04:28.243
Okay?
121

121

00:04:28.243  -->  00:04:29.300
So here's now that's gonna work.
122

122

00:04:29.300  -->  00:04:31.740
So we already talked about the Javascript fundamentals
123

123

00:04:31.740  -->  00:04:34.930
using ES5, and we will continue using ES5
124

124

00:04:34.930  -->  00:04:36.930
to look behind the scenes of Javascript,
125

125

00:04:36.930  -->  00:04:38.700
do some DOM manipulations,
126

126

00:04:38.700  -->  00:04:40.980
learn all about updates and functions,
127

127

00:04:40.980  -->  00:04:43.970
and code up a huge, real project.
128

128

00:04:43.970  -->  00:04:46.270
From there, we will then start using ES6,
129

129

00:04:46.270  -->  00:04:48.640
with an overview of what's new in the language.
130

130

00:04:48.640  -->  00:04:51.130
Then we're gonna talk about asynchronous Javascript,
131

131

00:04:51.130  -->  00:04:52.700
modern development setups,
132

132

00:04:52.700  -->  00:04:54.640
and code an even bigger and cooler
133

133

00:04:54.640  -->  00:04:55.740
real-world app,
134

134

00:04:55.740  -->  00:04:59.080
all using ES6, ES7, and ES8.
135

135

00:04:59.080  -->  00:05:00.060
All right?
136

136

00:05:00.060  -->  00:05:02.220
Now, some people don't understand why I even
137

137

00:05:02.220  -->  00:05:04.880
bother showing you ES5 in this course at all.
138

138

00:05:04.880  -->  00:05:07.360
And actually have criticized me for doing so.
139

139

00:05:07.360  -->  00:05:09.800
So here are a few reasons which I hope
140

140

00:05:09.800  -->  00:05:11.240
will make sense to you.
141

141

00:05:11.240  -->  00:05:14.730
So I truly believe that in 2018, and even 2019,
142

142

00:05:14.730  -->  00:05:16.020
it's still a good idea to learn
143

143

00:05:16.020  -->  00:05:18.770
the fundamentals of Javascript in ES5,
144

144

00:05:18.770  -->  00:05:21.380
and then move to newer Javascript versions from there.
145

145

00:05:21.380  -->  00:05:23.530
Simply due to the fact that you will always
146

146

00:05:23.530  -->  00:05:25.693
have to understand ES5 in the future.
147

147

00:05:25.693  -->  00:05:27.540
That is because many tutorials
148

148

00:05:27.540  -->  00:05:29.650
and example codes that you will find online
149

149

00:05:29.650  -->  00:05:32.150
are still written in ES5 today.
150

150

00:05:32.150  -->  00:05:35.070
Plus as a developer, sometimes you'll have to work
151

151

00:05:35.070  -->  00:05:37.660
on older codebases, which will most certainly
152

152

00:05:37.660  -->  00:05:40.350
be written in ES5 or even older.
153

153

00:05:40.350  -->  00:05:42.470
All in all, I just believe that you will be
154

154

00:05:42.470  -->  00:05:44.620
a better developer if you start understanding
155

155

00:05:44.620  -->  00:05:46.090
how ES5 works.
156

156

00:05:46.090  -->  00:05:49.140
And only then move up to ES6 or newer.
157

157

00:05:49.140  -->  00:05:51.140
Because ES6 has some abstractions,
158

158

00:05:51.140  -->  00:05:53.160
like classes, that kind of hide
159

159

00:05:53.160  -->  00:05:55.780
how the language actually works behind the scenes.
160

160

00:05:55.780  -->  00:05:56.613
All right?
161

161

00:05:56.613  -->  00:05:58.660
So I hope that this makes a lot of sense to you.
162

162

00:05:58.660  -->  00:06:01.343
And so let's now move on right to the next section.
