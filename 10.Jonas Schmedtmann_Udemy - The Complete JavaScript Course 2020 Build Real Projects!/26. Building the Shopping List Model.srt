1
1

00:00:01,213  -->  00:00:03,470
<v Narrator>Welcome back to the next part of the app,</v>
2

2

00:00:03,470  -->  00:00:04,936
which is the shopping list.
3

3

00:00:04,936  -->  00:00:07,792
And in this video, we will build our data model
4

4

00:00:07,792  -->  00:00:09,337
where you will learn how and why
5

5

00:00:09,337  -->  00:00:13,525
to create unique IDs using an external third party package.
6

6

00:00:13,525  -->  00:00:15,816
You will learn or remember the difference
7

7

00:00:15,816  -->  00:00:19,303
between the slice and the splice methods on the array.
8

8

00:00:19,303  -->  00:00:21,592
And also, we will see some more use cases
9

9

00:00:21,592  -->  00:00:25,415
for the find index and find methods also for the arrays.
10

10

00:00:25,415  -->  00:00:27,201
So, let's get to it.
11

11

00:00:27,201  -->  00:00:29,782
So, as always, the first step is to create a new file
12

12

00:00:29,782  -->  00:00:32,532
in the models folder, so List.js.
13

13

00:00:34,611  -->  00:00:36,692
Okay, and once more, we want to represent
14

14

00:00:36,692  -->  00:00:39,175
the shopping list through an object.
15

15

00:00:39,175  -->  00:00:42,017
And so, once again, we build a class here
16

16

00:00:42,017  -->  00:00:44,026
which we used as a blueprint of course
17

17

00:00:44,026  -->  00:00:47,265
to then generate the list object, later in the controller.
18

18

00:00:47,265  -->  00:00:49,015
So, let's export
19

19

00:00:50,381  -->  00:00:52,631
default, of course, a class
20

20

00:00:54,261  -->  00:00:56,190
called List.
21

21

00:00:56,190  -->  00:00:57,798
Then the constructor.
22

22

00:00:57,798  -->  00:00:59,345
And this time around, we're not going to
23

23

00:00:59,345  -->  00:01:01,951
pass anything into the constructor.
24

24

00:01:01,951  -->  00:01:04,385
So, basically, when we initialize a new list,
25

25

00:01:04,385  -->  00:01:06,122
we don't need to pass anything.
26

26

00:01:06,122  -->  00:01:07,279
All we want to do is to say
27

27

00:01:07,279  -->  00:01:11,019
that we have an items property set to an empty array, okay?
28

28

00:01:11,019  -->  00:01:12,186
So, this.items
29

29

00:01:15,321  -->  00:01:16,529
is an empty array.
30

30

00:01:16,529  -->  00:01:18,837
And so, when we start adding new elements to the list,
31

31

00:01:18,837  -->  00:01:22,763
they will all be pushed into this items array, okay?
32

32

00:01:22,763  -->  00:01:24,989
So, basically, all of the elements in our list
33

33

00:01:24,989  -->  00:01:29,093
will all be stored in this one property, this.items.
34

34

00:01:29,093  -->  00:01:31,103
Alright, so let's now create the method
35

35

00:01:31,103  -->  00:01:33,603
to add a new item to the list.
36

36

00:01:36,506  -->  00:01:39,179
So, we need to pass in the count,
37

37

00:01:39,179  -->  00:01:41,596
the unit, and the ingredient.
38

38

00:01:42,804  -->  00:01:44,014
Because our list is, of course,
39

39

00:01:44,014  -->  00:01:46,573
a list of ingredient, and it has the same structure
40

40

00:01:46,573  -->  00:01:50,197
as we have the ingredient data, okay?
41

41

00:01:50,197  -->  00:01:51,834
So, remember we always have a count,
42

42

00:01:51,834  -->  00:01:53,685
a unit, and an ingredient.
43

43

00:01:53,685  -->  00:01:55,471
And so that's exactly what we're going to add
44

44

00:01:55,471  -->  00:01:57,450
to the list as well, okay?
45

45

00:01:57,450  -->  00:01:59,739
So, basically, we will have an array
46

46

00:01:59,739  -->  00:02:02,440
in which each of the elements is an object,
47

47

00:02:02,440  -->  00:02:05,488
which will have the count, the unit, and the ingredient.
48

48

00:02:05,488  -->  00:02:09,301
Alright, so let's actually create an item here,
49

49

00:02:09,301  -->  00:02:11,572
item.
50

50

00:02:11,572  -->  00:02:14,218
And it will have the count property.
51

51

00:02:14,218  -->  00:02:15,699
Remember that we don't actually have
52

52

00:02:15,699  -->  00:02:18,758
to specify it like this, because it's just the same name.
53

53

00:02:18,758  -->  00:02:21,543
In ES6, that's not necessary.
54

54

00:02:21,543  -->  00:02:25,903
And same goes for unit, and the same goes for ingredient.
55

55

00:02:25,903  -->  00:02:27,692
Now, there's just one thing missing here,
56

56

00:02:27,692  -->  00:02:29,457
which is an unique ID.
57

57

00:02:29,457  -->  00:02:31,543
So, we need each of the items to have an ID,
58

58

00:02:31,543  -->  00:02:34,845
so that we can later identify them when we want to
59

59

00:02:34,845  -->  00:02:37,596
update their count, or when we want to delete them
60

60

00:02:37,596  -->  00:02:40,733
from the model and from the user interface.
61

61

00:02:40,733  -->  00:02:43,073
So, we gotta have a unique identifier
62

62

00:02:43,073  -->  00:02:44,633
for each of these items.
63

63

00:02:44,633  -->  00:02:47,087
And we did something very similar in the budgeting app.
64

64

00:02:47,087  -->  00:02:48,112
Remember that?
65

65

00:02:48,112  -->  00:02:50,194
And back there, we simply specified a number
66

66

00:02:50,194  -->  00:02:52,858
and said that whenever we added a new item,
67

67

00:02:52,858  -->  00:02:55,983
the next one should have the next number as an ID.
68

68

00:02:55,983  -->  00:02:58,800
So, the first one had 0, the second had ID 1, 2, 3
69

69

00:02:58,800  -->  00:03:00,046
and so on, until fourth.
70

70

00:03:00,046  -->  00:03:03,451
That thing created some problems when we deleted some items,
71

71

00:03:03,451  -->  00:03:04,953
then we had to go figure out
72

72

00:03:04,953  -->  00:03:07,223
the next ID that we should use. Remember that?
73

73

00:03:07,223  -->  00:03:08,181
And so this time around,
74

74

00:03:08,181  -->  00:03:09,509
we're gonna do it in a different way.
75

75

00:03:09,509  -->  00:03:11,431
So we're gonna include a small library,
76

76

00:03:11,431  -->  00:03:14,293
which will create unique IDs for us, okay?
77

77

00:03:14,293  -->  00:03:17,695
So let me show that package to you.
78

78

00:03:17,695  -->  00:03:18,994
I already have it opened here.
79

79

00:03:18,994  -->  00:03:21,994
It is called Uniqid, here on Github.
80

80

00:03:23,850  -->  00:03:25,605
It is very simple.
81

81

00:03:25,605  -->  00:03:26,939
Always create unique IDs based on
82

82

00:03:26,939  -->  00:03:30,337
the current time process and machine name.
83

83

00:03:30,337  -->  00:03:31,430
And all we have to do is, really,
84

84

00:03:31,430  -->  00:03:36,263
use the unique function and it will return us a unique ID.
85

85

00:03:37,188  -->  00:03:40,188
Let's now install this package here,
86

86

00:03:41,489  -->  00:03:45,025
and save it to our package adjacent file.
87

87

00:03:45,025  -->  00:03:48,010
And we can wait for it, and while it does its installation,
88

88

00:03:48,010  -->  00:03:51,176
we can already start including it here.
89

89

00:03:51,176  -->  00:03:53,176
So let's import uniqueid
90

90

00:03:57,005  -->  00:03:59,389
from uniqid.
91

91

00:03:59,389  -->  00:04:02,472
This one here is not correct, unique,
92

92

00:04:03,568  -->  00:04:06,794
It's just really like this weird way of spelling it.
93

93

00:04:06,794  -->  00:04:11,369
So, uniqid from uniqid and so, let's add the ID property.
94

94

00:04:11,369  -->  00:04:15,036
On ID we want to have uniqid. And that's it.
95

95

00:04:16,268  -->  00:04:18,848
So this will create a unique identifier
96

96

00:04:18,848  -->  00:04:22,248
for each of the items, based on the small library.
97

97

00:04:22,248  -->  00:04:24,274
Just take a look if it already installed.
98

98

00:04:24,274  -->  00:04:28,274
And indeed, here it is. Uniqid on version 4.1.1.
99

99

00:04:29,650  -->  00:04:34,233
Alright, next up we want the ability to delete an item.
100

100

00:04:37,818  -->  00:04:40,448
And so now, we need these IDs, okay?
101

101

00:04:40,448  -->  00:04:43,438
So, what we're gonna pass into delete item function,
102

102

00:04:43,438  -->  00:04:46,317
is just the ID of the item we want to delete,
103

103

00:04:46,317  -->  00:04:49,113
which we will probably get from the user interface,
104

104

00:04:49,113  -->  00:04:50,871
and then based on that ID, we are going
105

105

00:04:50,871  -->  00:04:54,674
to delete the item from our items array.
106

106

00:04:54,674  -->  00:04:56,507
So, how are we going to do this?
107

107

00:04:56,507  -->  00:05:00,080
Well, we will use the splice method.
108

108

00:05:00,080  -->  00:05:04,627
So on this.items, we will use the splice method.
109

109

00:05:04,627  -->  00:05:06,821
And now what does the splice method do?
110

110

00:05:06,821  -->  00:05:09,891
Well, basically, we pass in a start index
111

111

00:05:09,891  -->  00:05:12,245
and then how many positions we want to take.
112

112

00:05:12,245  -->  00:05:14,547
And it will then return these elements
113

113

00:05:14,547  -->  00:05:17,159
and delete them from the original array. Okay?
114

114

00:05:17,159  -->  00:05:20,368
So it mutates, actually, the original one.
115

115

00:05:20,368  -->  00:05:23,475
And this one is a bit similar to another one, which is slice
116

116

00:05:23,475  -->  00:05:26,280
So, slice is very similar to splice,
117

117

00:05:26,280  -->  00:05:27,674
with the difference that
118

118

00:05:27,674  -->  00:05:30,737
slice accepts a start and an end index
119

119

00:05:30,737  -->  00:05:32,551
of the portion that we want to take
120

120

00:05:32,551  -->  00:05:34,361
and the returns a new array.
121

121

00:05:34,361  -->  00:05:37,757
And also, it doesn't mutate the original array. Okay?
122

122

00:05:37,757  -->  00:05:40,760
So for example, imagine that we have this array,
123

123

00:05:40,760  -->  00:05:42,260
2, 4, and 8, okay?
124

124

00:05:44,039  -->  00:05:46,708
So let's add a comment here.
125

125

00:05:46,708  -->  00:05:48,458
So, if we say splice,
126

126

00:05:50,892  -->  00:05:54,892
1 and then 1, it will start at position number 1
127

127

00:05:56,700  -->  00:06:00,337
and take one element, so only this 4.
128

128

00:06:00,337  -->  00:06:05,337
And it will then return 4 and mutate the original array.
129

129

00:06:05,697  -->  00:06:09,114
So return four and the original array is:
130

130

00:06:12,702  -->  00:06:15,156
2 and 8. Okay?
131

131

00:06:15,156  -->  00:06:18,406
So that's what happens with the splice.
132

132

00:06:19,575  -->  00:06:21,927
And if we say slice, which is the same,
133

133

00:06:21,927  -->  00:06:25,401
then it will start on 1 and end on 1.
134

134

00:06:25,401  -->  00:06:29,342
So, it will still return 4 and the entire array will be
135

135

00:06:29,342  -->  00:06:30,980
the entire array from the beginning
136

136

00:06:30,980  -->  00:06:34,390
because we do not mutate the original array.
137

137

00:06:34,390  -->  00:06:35,651
But the difference here is that
138

138

00:06:35,651  -->  00:06:38,661
this one is the end-index while in splice,
139

139

00:06:38,661  -->  00:06:42,651
this number here means how many elements we want to take.
140

140

00:06:42,651  -->  00:06:45,450
So if we said 1 and 2 here, well then it would take
141

141

00:06:45,450  -->  00:06:46,692
4 and 8,
142

142

00:06:46,692  -->  00:06:48,359
returns 4 and 8,
143

143

00:06:52,257  -->  00:06:56,458
and the original array would only be with number 2,
144

144

00:06:56,458  -->  00:06:57,925
and if we add 2 here,
145

145

00:06:57,925  -->  00:07:00,421
well then it would actually return the 4
146

146

00:07:00,421  -->  00:07:01,866
like we have it here.
147

147

00:07:01,866  -->  00:07:04,346
Because remember, this second tier is the end
148

148

00:07:04,346  -->  00:07:05,859
but it's not included.
149

149

00:07:05,859  -->  00:07:09,200
So, actually, if we had 1, 1, then it would return nothing.
150

150

00:07:09,200  -->  00:07:12,794
Because it would start in 1 and end on number 1,
151

151

00:07:12,794  -->  00:07:14,035
and so it wouldn't return anything.
152

152

00:07:14,035  -->  00:07:15,846
And only when we say 1, 2,
153

153

00:07:15,846  -->  00:07:17,098
so start at position number one
154

154

00:07:17,098  -->  00:07:18,846
and end on position number two
155

155

00:07:18,846  -->  00:07:20,563
well then it would return the 4
156

156

00:07:20,563  -->  00:07:24,104
and of course, not mutate the original array.
157

157

00:07:24,104  -->  00:07:27,023
Now what we have to do here is to find the index
158

158

00:07:27,023  -->  00:07:29,401
at which we want to splice.
159

159

00:07:29,401  -->  00:07:32,883
So basically, what we want is, based on the passed in ID,
160

160

00:07:32,883  -->  00:07:34,286
we want to find the position
161

161

00:07:34,286  -->  00:07:37,036
of the item that matches this ID.
162

162

00:07:38,091  -->  00:07:40,508
So let's start by doing that.
163

163

00:07:41,488  -->  00:07:42,738
So, const index
164

164

00:07:44,243  -->  00:07:47,410
and we will use, this.items.findindex.
165

165

00:07:51,100  -->  00:07:53,142
Okay? We have already used this one here before;
166

166

00:07:53,142  -->  00:07:57,127
it's a very handy method for doing this kind of stuff.
167

167

00:07:57,127  -->  00:07:58,496
We have a a codec function
168

168

00:07:58,496  -->  00:08:00,710
which receives the current element and all we have
169

169

00:08:00,710  -->  00:08:05,501
to do now is to test if the current element.id equals
170

170

00:08:05,501  -->  00:08:07,561
the passed in ID.
171

171

00:08:07,561  -->  00:08:09,226
It will now find the index
172

172

00:08:09,226  -->  00:08:12,709
of the element which satisfies this condition.
173

173

00:08:12,709  -->  00:08:17,709
So where the element ID is equal to the ID to be passed in.
174

174

00:08:17,816  -->  00:08:19,266
With this, we got the index where
175

175

00:08:19,266  -->  00:08:21,887
that exact item is located, and so all we have
176

176

00:08:21,887  -->  00:08:24,637
to do now is to say index, and 1,
177

177

00:08:25,848  -->  00:08:29,922
because we only want to remove one element.
178

178

00:08:29,922  -->  00:08:33,274
We start at the position where the item is located,
179

179

00:08:33,274  -->  00:08:35,520
and then take out one element.
180

180

00:08:35,520  -->  00:08:36,939
Alright, and that's it already.
181

181

00:08:36,939  -->  00:08:39,237
Because this mutates the original array
182

182

00:08:39,237  -->  00:08:41,706
and so, it will really take out, it will delete,
183

183

00:08:41,706  -->  00:08:44,813
this element from our original items array.
184

184

00:08:44,813  -->  00:08:48,343
Now we also could now return the deleted item.
185

185

00:08:48,343  -->  00:08:51,426
All we have to do would really be return
186

186

00:08:51,426  -->  00:08:55,042
And so this will now return the deleted item,
187

187

00:08:55,042  -->  00:08:56,553
but we don't want to do that.
188

188

00:08:56,553  -->  00:08:59,763
All we really want to do is just delete the item.
189

189

00:08:59,763  -->  00:09:04,013
Once more, we use the very-handy find index method.
190

190

00:09:05,504  -->  00:09:10,363
The last one is that we want to update the count.
191

191

00:09:10,363  -->  00:09:13,699
So, we are not really going to update the entire element,
192

192

00:09:13,699  -->  00:09:17,809
but we will simply allow it to update the count.
193

193

00:09:17,809  -->  00:09:19,912
We will pass in the ID of the element
194

194

00:09:19,912  -->  00:09:22,561
that we want to manipulate and also the new count.
195

195

00:09:22,561  -->  00:09:24,983
And let me quickly show it to you in the user-interface.
196

196

00:09:24,983  -->  00:09:26,400
In the final app.
197

197

00:09:30,265  -->  00:09:31,098
It's this one.
198

198

00:09:31,098  -->  00:09:33,790
So we have these buttons here where we can update the amount
199

199

00:09:33,790  -->  00:09:35,743
of the ingredient, but not the unit, of course,
200

200

00:09:35,743  -->  00:09:38,410
and also, not the ingredient itself.
201

201

00:09:38,410  -->  00:09:42,091
So all we can really change here is the count.
202

202

00:09:42,091  -->  00:09:44,107
That's why we're having this update count
203

203

00:09:44,107  -->  00:09:45,401
where we are passing the ID
204

204

00:09:45,401  -->  00:09:48,478
and the new count that we want to save in the object.
205

205

00:09:48,478  -->  00:09:49,622
And this one is actually, even easier
206

206

00:09:49,622  -->  00:09:51,644
to implement the one before.
207

207

00:09:51,644  -->  00:09:53,394
Let's say this.items,
208

208

00:09:55,001  -->  00:09:57,729
And so what we want to do now is, not to find the index,
209

209

00:09:57,729  -->  00:10:00,761
but to really find the element itself.
210

210

00:10:00,761  -->  00:10:02,681
We can do that by using find.
211

211

00:10:02,681  -->  00:10:05,686
So, yet another ES6 method which is a bit similar
212

212

00:10:05,686  -->  00:10:08,974
to find index here, but instead of returning the index,
213

213

00:10:08,974  -->  00:10:11,734
it will return the element itself.
214

214

00:10:11,734  -->  00:10:15,623
The rest is really the same as up there.
215

215

00:10:15,623  -->  00:10:18,637
We want to find the element which has,
216

216

00:10:18,637  -->  00:10:22,442
as an element ID the one that we pass in, okay?
217

217

00:10:22,442  -->  00:10:24,609
This will return our item.
218

218

00:10:25,867  -->  00:10:28,063
Then we can say that we want to count of that item
219

219

00:10:28,063  -->  00:10:30,480
to be equal to the new count.
220

220

00:10:31,905  -->  00:10:33,121
And that's it.
221

221

00:10:33,121  -->  00:10:36,008
So with one line of code, we achieved this functionality,
222

222

00:10:36,008  -->  00:10:37,591
which, without ES6,
223

223

00:10:38,870  -->  00:10:42,856
would have been a bit more complicated to implement.
224

224

00:10:42,856  -->  00:10:44,074
I hope this makes sense here.
225

225

00:10:44,074  -->  00:10:47,453
This part, which is maybe the most tricky part,
226

226

00:10:47,453  -->  00:10:49,152
but I hope it still made sense to you.
227

227

00:10:49,152  -->  00:10:51,158
Again, what we do here is basically to loop
228

228

00:10:51,158  -->  00:10:53,717
through all the elements in the items
229

229

00:10:53,717  -->  00:10:57,084
and then select the one that has the ID equal
230

230

00:10:57,084  -->  00:10:59,959
to the ID that we passed into the function.
231

231

00:10:59,959  -->  00:11:01,615
Then we return that object
232

232

00:11:01,615  -->  00:11:04,922
and change the count property on it.
233

233

00:11:04,922  -->  00:11:09,492
Let's now go into our controller and include this,
234

234

00:11:09,492  -->  00:11:11,853
so, import this, basically.
235

235

00:11:11,853  -->  00:11:14,853
Recipe and change them both to list.
236

236

00:11:16,506  -->  00:11:21,423
And, just like before, let's actually create a new element.
237

237

00:11:22,832  -->  00:11:24,575
A new list element.
238

238

00:11:24,575  -->  00:11:26,425
Just to test it out in the console.
239

239

00:11:26,425  -->  00:11:30,842
Const l is a new list that will then attach this list
240

240

00:11:32,612  -->  00:11:37,105
to the global window object such as we did before.
241

241

00:11:37,105  -->  00:11:39,631
And, actually, we could simply do it like this.
242

242

00:11:39,631  -->  00:11:42,298
Window.l is simply the new list.
243

243

00:11:44,175  -->  00:11:46,605
Now, we are going to be able to use all
244

244

00:11:46,605  -->  00:11:50,522
of the these methods here that we just created.
245

245

00:11:51,765  -->  00:11:53,151
Let's try that.
246

246

00:11:53,151  -->  00:11:55,357
Now we have all these console unlocks here,
247

247

00:11:55,357  -->  00:11:57,640
so let's get rid of that actually.
248

248

00:11:57,640  -->  00:11:59,352
We don't need that.
249

249

00:11:59,352  -->  00:12:01,631
It's actually this data recipe.
250

250

00:12:01,631  -->  00:12:02,695
I guess.
251

251

00:12:02,695  -->  00:12:06,785
Probably it's not, but we also don't really need that one.
252

252

00:12:06,785  -->  00:12:11,702
What we really want here is this. State.recipe.ingredients.
253

253

00:12:13,166  -->  00:12:14,124
Let's wait for it
254

254

00:12:14,124  -->  00:12:17,004
And now, we should be able to access l,
255

255

00:12:17,004  -->  00:12:21,254
which is, of course, an empty array, at this point.
256

256

00:12:22,341  -->  00:12:24,258
Let's use addItem here,
257

257

00:12:27,661  -->  00:12:32,578
and remember what we need to pass in starts with the count.
258

258

00:12:33,635  -->  00:12:35,048
So, the count the unit and the ingredient.
259

259

00:12:35,048  -->  00:12:39,120
And, of course, the ID will be figured out automatically.
260

260

00:12:39,120  -->  00:12:42,870
Let's say, we need to pass in two tablespoons
261

261

00:12:45,856  -->  00:12:47,606
of salt, for example.
262

262

00:12:48,811  -->  00:12:50,644
Let's add another one.
263

263

00:12:54,791  -->  00:12:56,458
Two tomatoes.
264

264

00:13:00,878  -->  00:13:02,980
And you see it didnt edit to the list really.
265

265

00:13:02,980  -->  00:13:05,397
so let's take a look at that.
266

266

00:13:06,558  -->  00:13:09,495
So we simply created the item here,
267

267

00:13:09,495  -->  00:13:13,346
but we still have to push it to the array.
268

268

00:13:13,346  -->  00:13:15,642
That's a stupid mistake.
269

269

00:13:15,642  -->  00:13:16,989
But no problem of course.
270

270

00:13:16,989  -->  00:13:21,072
So all we have to do is this.items.push the item,
271

271

00:13:22,559  -->  00:13:24,748
Variable that we just created.
272

272

00:13:24,748  -->  00:13:25,995
It's also a good practice
273

273

00:13:25,995  -->  00:13:28,945
to return the newly created object here.
274

274

00:13:28,945  -->  00:13:30,528
So return the item.
275

275

00:13:32,447  -->  00:13:33,546
Alright.
276

276

00:13:33,546  -->  00:13:35,296
Let's try that again.
277

277

00:13:40,522  -->  00:13:42,162
Two tablespoon of salt.
278

278

00:13:42,162  -->  00:13:46,021
And, you see it already returns the new object.
279

279

00:13:46,021  -->  00:13:46,983
It's working now.
280

280

00:13:46,983  -->  00:13:48,476
And you see, this is the uniqid
281

281

00:13:48,476  -->  00:13:51,624
that was created by the uniq package.
282

282

00:13:51,624  -->  00:13:54,360
So, let's add the other one, the two tomatoes,
283

283

00:13:54,360  -->  00:13:56,442
and you see it has a different ID of course.
284

284

00:13:56,442  -->  00:13:57,870
So, it's really working.
285

285

00:13:57,870  -->  00:13:59,847
So let's now delete the first one here,
286

286

00:13:59,847  -->  00:14:03,424
and so we need to pass in the ID, remember?
287

287

00:14:03,424  -->  00:14:04,841
So, l.deleteItem,
288

288

00:14:08,792  -->  00:14:10,663
and we need to pass in the ID.
289

289

00:14:10,663  -->  00:14:11,991
Let's take a look at l now,
290

290

00:14:11,991  -->  00:14:13,960
and now we're only left with one array
291

291

00:14:13,960  -->  00:14:16,309
which would be the one with the two tomatoes.
292

292

00:14:16,309  -->  00:14:19,364
So let's take a look at that,
293

293

00:14:19,364  -->  00:14:21,994
and, indeed, we have the two tomatoes.
294

294

00:14:21,994  -->  00:14:23,338
So great. That's working.
295

295

00:14:23,338  -->  00:14:24,494
Now, just as a last step,
296

296

00:14:24,494  -->  00:14:27,876
let's try to use the update count method.
297

297

00:14:27,876  -->  00:14:29,376
So, l.updateCount,
298

298

00:14:31,770  -->  00:14:34,853
we need to pass in the ID once again,
299

299

00:14:38,782  -->  00:14:41,115
and now we want 10 tomatoes.
300

300

00:14:41,971  -->  00:14:43,888
Take a look again at l,
301

301

00:14:45,688  -->  00:14:49,444
and indeed, we have now 10 tomatoes.
302

302

00:14:49,444  -->  00:14:54,444
So our API is working, and notice how I said API here.
303

303

00:14:54,705  -->  00:14:57,067
Of course, I'm not talking about the API that we used
304

304

00:14:57,067  -->  00:14:58,261
to get the recipes.
305

305

00:14:58,261  -->  00:15:01,243
API is just a term that we can use
306

306

00:15:01,243  -->  00:15:02,741
also for this kind of stuff.
307

307

00:15:02,741  -->  00:15:04,841
So we just basically created an API
308

308

00:15:04,841  -->  00:15:07,508
for creating and updating lists.
309

309

00:15:08,597  -->  00:15:09,815
So we just tested this API
310

310

00:15:09,815  -->  00:15:11,747
and everything is working correctly.
311

311

00:15:11,747  -->  00:15:14,000
In the next video we're going to implement the view
312

312

00:15:14,000  -->  00:15:18,333
for the list before creating finally the controller.
