WEBVTT
1
1

00:00:01.370  -->  00:00:04.173
<v Instructor>Let's continue CodingUp or SearchView.</v>
2

2

00:00:05.210  -->  00:00:07.540
And so as I mentioned, in the last video the goal
3

3

00:00:07.540  -->  00:00:11.410
for this video is to now reduce this title size here
4

4

00:00:11.410  -->  00:00:13.570
whenever it occupies more than one line.
5

5

00:00:13.570  -->  00:00:14.403
Okay?
6

6

00:00:14.403  -->  00:00:16.475
So basically like we want is for these main titles
7

7

00:00:16.475  -->  00:00:19.470
always to occupy just one line.
8

8

00:00:19.470  -->  00:00:22.290
Now we also don't want to cut words in half.
9

9

00:00:22.290  -->  00:00:24.980
So in this case here, imagine we don't
10

10

00:00:24.980  -->  00:00:28.210
want to see our U for example, to be up here.
11

11

00:00:28.210  -->  00:00:30.290
And then having the rest of the word cut out.
12

12

00:00:30.290  -->  00:00:31.807
So the only one entire words here
13

13

00:00:31.807  -->  00:00:34.440
are then followed by three dots.
14

14

00:00:34.440  -->  00:00:35.273
Okay?
15

15

00:00:35.273  -->  00:00:37.300
So that's kind of a tricky small algorithm
16

16

00:00:37.300  -->  00:00:38.670
that we have to write here.
17

17

00:00:38.670  -->  00:00:41.419
And so let's see if we can pull it off.
18

18

00:00:41.419  -->  00:00:42.510
Okay?
19

19

00:00:42.510  -->  00:00:45.390
So I'm going to add a new function in here.
20

20

00:00:45.390  -->  00:00:48.730
And once more, it will be like a private function.
21

21

00:00:48.730  -->  00:00:51.680
So it's a function that we don't need in the outside world.
22

22

00:00:52.730  -->  00:00:53.693
So const.
23

23

00:00:54.890  -->  00:00:57.463
Limit recipe, title.
24

24

00:00:59.910  -->  00:01:02.900
And what we receive here is a recipe.
25

25

00:01:02.900  -->  00:01:05.780
And we can also receive a limit.
26

26

00:01:05.780  -->  00:01:08.550
So limit off characters that is acceptable
27

27

00:01:08.550  -->  00:01:11.440
as the maximum length of the title.
28

28

00:01:11.440  -->  00:01:12.273
Okay?
29

29

00:01:12.273  -->  00:01:13.520
And let's now actually use something
30

30

00:01:13.520  -->  00:01:17.220
that we've talked about in the ES2015 or ES6 section
31

31

00:01:17.220  -->  00:01:19.190
which has default perimeters.
32

32

00:01:19.190  -->  00:01:20.954
So let's add this one here to 17.
33

33

00:01:20.954  -->  00:01:22.730
And I found out through experimentation
34

34

00:01:22.730  -->  00:01:25.690
that 17 is really the sweet spot here.
35

35

00:01:25.690  -->  00:01:29.220
So it's the best limit for this kind of layout here.
36

36

00:01:29.220  -->  00:01:32.500
But of course we could pass other limits into here.
37

37

00:01:32.500  -->  00:01:34.651
But if we don't pass any limit into the function
38

38

00:01:34.651  -->  00:01:37.030
then 17 is the one that will be used.
39

39

00:01:37.030  -->  00:01:37.863
Okay?
40

40

00:01:37.863  -->  00:01:39.410
Now the first thing that we're gonna do
41

41

00:01:39.410  -->  00:01:42.084
is to test if the length of the title
42

42

00:01:42.084  -->  00:01:44.500
is actually longer than the limit.
43

43

00:01:44.500  -->  00:01:46.380
Because only then we need to do something.
44

44

00:01:46.380  -->  00:01:47.370
Right?
45

45

00:01:47.370  -->  00:01:50.400
In here it should actually be title and not recipe.
46

46

00:01:50.400  -->  00:01:53.919
So we're only going to pass the title into this one.
47

47

00:01:53.919  -->  00:01:58.013
So if the title dot length.
48

48

00:02:00.900  -->  00:02:04.920
Is greater than the limit than we have to do something.
49

49

00:02:04.920  -->  00:02:08.423
And else we will also be returned to title again.
50

50

00:02:11.180  -->  00:02:14.540
And I'm not going to write the L statement here actually.
51

51

00:02:14.540  -->  00:02:16.740
So I'm not going to do this one here
52

52

00:02:16.740  -->  00:02:18.310
and then put return title in here
53

53

00:02:18.310  -->  00:02:20.670
because we are going to have a return statement
54

54

00:02:20.670  -->  00:02:21.503
in here as well.
55

55

00:02:21.503  -->  00:02:25.100
But that is a good practice to just leave it like this.
56

56

00:02:25.100  -->  00:02:25.933
Okay?
57

57

00:02:25.933  -->  00:02:27.780
So we're either gonna return something from here
58

58

00:02:27.780  -->  00:02:29.580
and then the function finishes anyway.
59

59

00:02:29.580  -->  00:02:32.680
And if this test here turns out to be false
60

60

00:02:32.680  -->  00:02:34.390
then we move on to this one here
61

61

00:02:34.390  -->  00:02:37.070
and return the title as it was before.
62

62

00:02:37.070  -->  00:02:37.903
Okay?
63

63

00:02:37.903  -->  00:02:39.305
So this of course only applies if the title
64

64

00:02:39.305  -->  00:02:42.770
is longer than the limit that we defined.
65

65

00:02:42.770  -->  00:02:45.330
So how are we going to pull this off?
66

66

00:02:45.330  -->  00:02:47.470
Well, the best strategy that I came up with
67

67

00:02:47.470  -->  00:02:50.060
is to split the title into its words
68

68

00:02:50.060  -->  00:02:53.370
and then you use the reduce method on the resulting array
69

69

00:02:53.370  -->  00:02:55.510
which then allows us to have an accumulator.
70

70

00:02:55.510  -->  00:02:57.704
And that accumulator is just like a variable
71

71

00:02:57.704  -->  00:03:01.150
that we can add to in each iteration of the loop.
72

72

00:03:01.150  -->  00:03:04.220
And what we're then gonna do in each iteration of the loop
73

73

00:03:04.220  -->  00:03:06.770
is to test if the current titling plus
74

74

00:03:06.770  -->  00:03:09.850
the next word is still under the maximum length.
75

75

00:03:09.850  -->  00:03:10.683
Okay?
76

76

00:03:10.683  -->  00:03:12.070
So that sounds probably a bit complicated
77

77

00:03:12.070  -->  00:03:14.490
so let me write it out in code here
78

78

00:03:14.490  -->  00:03:15.870
and then it will make total sense.
79

79

00:03:15.870  -->  00:03:16.850
Okay?
80

80

00:03:16.850  -->  00:03:20.783
So, we take the title and then split it.
81

81

00:03:21.840  -->  00:03:25.490
So a split is a method that is available in all strings.
82

82

00:03:25.490  -->  00:03:28.110
And you split it by space.
83

83

00:03:28.110  -->  00:03:28.943
Okay?
84

84

00:03:28.943  -->  00:03:31.963
So let's simply write an example string here.
85

85

00:03:32.960  -->  00:03:33.803
As a comment.
86

86

00:03:34.840  -->  00:03:39.293
So pasta with tomato and spinach.
87

87

00:03:40.450  -->  00:03:41.500
For example.
88

88

00:03:41.500  -->  00:03:42.333
Okay?
89

89

00:03:42.333  -->  00:03:44.640
And so, by splitting it by the space
90

90

00:03:44.640  -->  00:03:47.300
this will turn into an array with five elements.
91

91

00:03:47.300  -->  00:03:51.070
Pasta, with, tomato, and, spinach.
92

92

00:03:51.070  -->  00:03:51.903
Okay?
93

93

00:03:51.903  -->  00:03:53.300
And so since we now have an array
94

94

00:03:53.300  -->  00:03:55.523
we can use the reduced method on it.
95

95

00:03:56.700  -->  00:03:58.944
So reduce and then we pass a callback function
96

96

00:03:58.944  -->  00:04:03.463
which has the accumulator and a current value as the input.
97

97

00:04:04.490  -->  00:04:08.120
So "acc" stands for accumulator and then the current.
98

98

00:04:08.120  -->  00:04:09.083
Okay?
99

99

00:04:12.270  -->  00:04:13.103
Oh, this is right.
100

100

00:04:13.103  -->  00:04:13.936
Cool.
101

101

00:04:13.936  -->  00:04:14.803
Current like this.
102

102

00:04:15.990  -->  00:04:17.020
All right.
103

103

00:04:17.020  -->  00:04:19.240
So this callback function is the first perimeter
104

104

00:04:19.240  -->  00:04:21.480
to the reduced method and then the second one
105

105

00:04:21.480  -->  00:04:24.360
is the initial value of the accumulator.
106

106

00:04:24.360  -->  00:04:25.570
Which should be zero.
107

107

00:04:25.570  -->  00:04:27.860
So we start with an accumulator of zero
108

108

00:04:27.860  -->  00:04:30.860
and then throughout these loops we will add to it.
109

109

00:04:30.860  -->  00:04:31.693
Okay?
110

110

00:04:31.693  -->  00:04:33.402
And that will explain you how and why
111

111

00:04:33.402  -->  00:04:35.220
here in the next steps.
112

112

00:04:35.220  -->  00:04:39.360
So that's actually experiment with this example string here.
113

113

00:04:39.360  -->  00:04:41.700
And go through each of these iterations here.
114

114

00:04:41.700  -->  00:04:44.313
Just to show you how this actually works.
115

115

00:04:46.480  -->  00:04:47.313
All right?
116

116

00:04:48.790  -->  00:04:51.010
So in the first iteration, the accumulator
117

117

00:04:51.010  -->  00:04:54.150
is of course zero, right?
118

118

00:04:54.150  -->  00:04:55.840
As we defined down here.
119

119

00:04:55.840  -->  00:04:58.350
Now we are gonna test now in each iteration
120

120

00:04:58.350  -->  00:05:01.253
if the accumulator.
121

121

00:05:02.930  -->  00:05:05.090
Plus the current.
122

122

00:05:05.090  -->  00:05:06.440
Dot length.
123

123

00:05:06.440  -->  00:05:09.480
So that's the length of the current word.
124

124

00:05:09.480  -->  00:05:13.420
If it's still under or equal the limit.
125

125

00:05:13.420  -->  00:05:14.253
Okay?
126

126

00:05:14.253  -->  00:05:16.330
And if it is so, then we will push
127

127

00:05:16.330  -->  00:05:18.500
this word into a new array.
128

128

00:05:18.500  -->  00:05:20.910
So it's actually create that array.
129

129

00:05:20.910  -->  00:05:22.160
Like up here.
130

130

00:05:22.160  -->  00:05:27.160
So, a constant new title and just a new array.
131

131

00:05:28.310  -->  00:05:29.143
Okay?
132

132

00:05:29.143  -->  00:05:31.480
And this is a constant which we cannot really mutate.
133

133

00:05:31.480  -->  00:05:32.313
Right?
134

134

00:05:32.313  -->  00:05:34.660
So why are we starting it as a new array
135

135

00:05:34.660  -->  00:05:36.626
and then keep adding stuff to it?
136

136

00:05:36.626  -->  00:05:39.540
Well, that's possible because adding stuff to an array
137

137

00:05:39.540  -->  00:05:42.620
is not really mutating the underlying variable itself.
138

138

00:05:42.620  -->  00:05:44.659
And so the title can perfectly be a constant
139

139

00:05:44.659  -->  00:05:47.657
and we can still keep adding stuff in to the array.
140

140

00:05:47.657  -->  00:05:49.713
And the same goes of course for objects.
141

141

00:05:50.580  -->  00:05:51.413
Okay?
142

142

00:05:51.413  -->  00:05:52.573
So new title.
143

143

00:05:54.200  -->  00:05:57.223
Dot push the current word.
144

144

00:05:58.970  -->  00:06:01.275
So, let's see why this makes sense.
145

145

00:06:01.275  -->  00:06:05.950
So again the accumulator in the first one is zero.
146

146

00:06:05.950  -->  00:06:09.370
Then the accumulator plus the current length
147

147

00:06:11.510  -->  00:06:15.430
will be zero plus five, right?
148

148

00:06:15.430  -->  00:06:17.630
And five, which is the result of this here
149

149

00:06:17.630  -->  00:06:20.060
is still under the limit of 17.
150

150

00:06:20.060  -->  00:06:23.630
And so we can push this word into the new title array.
151

151

00:06:23.630  -->  00:06:25.810
So let's write it out here.
152

152

00:06:25.810  -->  00:06:27.063
That the new title.
153

153

00:06:28.680  -->  00:06:30.620
Now has the word pasta in it.
154

154

00:06:30.620  -->  00:06:31.500
Okay.
155

155

00:06:31.500  -->  00:06:34.446
And finally we have to update the accumulator.
156

156

00:06:34.446  -->  00:06:38.670
And this works in the reduced function by returning a value.
157

157

00:06:38.670  -->  00:06:41.930
So the value that we return in each iteration off this loop
158

158

00:06:41.930  -->  00:06:44.280
and the collect function off the reduced method
159

159

00:06:44.280  -->  00:06:46.490
will be the new accumulator.
160

160

00:06:46.490  -->  00:06:49.960
So we return accumulator plus the current length.
161

161

00:06:49.960  -->  00:06:53.270
So that's exactly what we did up there in the test.
162

162

00:06:53.270  -->  00:06:54.103
Okay?
163

163

00:06:54.103  -->  00:06:55.150
And so now in the next iteration
164

164

00:06:55.150  -->  00:06:57.183
the accumulator will be five.
165

165

00:06:58.350  -->  00:06:59.183
Right?
166

166

00:06:59.183  -->  00:07:00.300
I like to actually copy this part here
167

167

00:07:00.300  -->  00:07:03.160
so that we don't have to do it over and over again.
168

168

00:07:03.160  -->  00:07:05.210
And so again, this is here just to assimilate
169

169

00:07:05.210  -->  00:07:08.880
what happens in each iteration as we go through this.
170

170

00:07:08.880  -->  00:07:09.713
Okay?
171

171

00:07:09.713  -->  00:07:11.430
So in a second iteration, we're
172

172

00:07:11.430  -->  00:07:13.460
now looking at the word "with".
173

173

00:07:13.460  -->  00:07:14.293
Right?
174

174

00:07:14.293  -->  00:07:17.310
And so five plus four is nine.
175

175

00:07:17.310  -->  00:07:18.143
Okay?
176

176

00:07:18.143  -->  00:07:21.090
And so nine is still less than the limit of 17.
177

177

00:07:21.090  -->  00:07:24.973
And so we can add the word "with" to the array.
178

178

00:07:27.130  -->  00:07:28.610
So let's do that.
179

179

00:07:28.610  -->  00:07:31.090
And then next, we return the accumulator
180

180

00:07:31.090  -->  00:07:33.500
plus current length, which will be nine.
181

181

00:07:33.500  -->  00:07:35.910
So in the next iteration, we will
182

182

00:07:35.910  -->  00:07:38.893
have nine as the accumulator.
183

183

00:07:40.040  -->  00:07:41.550
The next word is tomato.
184

184

00:07:41.550  -->  00:07:44.407
So six plus nine is 15.
185

185

00:07:44.407  -->  00:07:47.580
And 15 is still less than 17.
186

186

00:07:47.580  -->  00:07:49.317
So we can add the word "tomato".
187

187

00:07:52.100  -->  00:07:52.970
Right?
188

188

00:07:52.970  -->  00:07:56.570
Then next iteration, now the accumulator is 15.
189

189

00:07:56.570  -->  00:07:58.410
And the next word is "and".
190

190

00:07:58.410  -->  00:07:59.570
Which if three.
191

191

00:07:59.570  -->  00:08:02.150
So the current length is now 18
192

192

00:08:02.150  -->  00:08:05.390
which is, of course, more than the limit.
193

193

00:08:05.390  -->  00:08:06.547
And so this word is not pushed
194

194

00:08:06.547  -->  00:08:09.380
into the array for the new title.
195

195

00:08:09.380  -->  00:08:10.213
Okay?
196

196

00:08:10.213  -->  00:08:13.510
Now up here I'm actually missing the word "tomato" here.
197

197

00:08:13.510  -->  00:08:14.810
It's not a problem really.
198

198

00:08:14.810  -->  00:08:17.708
It's just so that it doesn't confuse you.
199

199

00:08:17.708  -->  00:08:18.720
Okay?
200

200

00:08:18.720  -->  00:08:20.668
Then in the next iteration we will look
201

201

00:08:20.668  -->  00:08:23.010
at the word "spinach" here.
202

202

00:08:23.010  -->  00:08:26.530
And so just to make it really complete
203

203

00:08:26.530  -->  00:08:28.300
we now have eight in here.
204

204

00:08:28.300  -->  00:08:33.042
And accumulator plus the length of spinach makes it 24.
205

205

00:08:33.042  -->  00:08:36.180
And so of course it still doesn't pass this test here.
206

206

00:08:36.180  -->  00:08:39.508
And so spinach is also not pushed into the new array
207

207

00:08:39.508  -->  00:08:41.628
and that's actually it.
208

208

00:08:41.628  -->  00:08:43.430
So we looked at all the five words
209

209

00:08:43.430  -->  00:08:46.730
and our final array is "pasta with tomato".
210

210

00:08:46.730  -->  00:08:47.563
Okay?
211

211

00:08:48.660  -->  00:08:51.253
So that's now actually returned the result.
212

212

00:08:56.900  -->  00:08:59.340
So, let's return.
213

213

00:08:59.340  -->  00:09:01.790
And I'm going to put us in a tablet string again.
214

214

00:09:02.840  -->  00:09:04.083
Or a new title.
215

215

00:09:05.050  -->  00:09:07.423
And then we can use the joint method.
216

216

00:09:08.290  -->  00:09:11.230
And this is basically the opposite of split.
217

217

00:09:11.230  -->  00:09:13.490
So what this will do, instead of both joining
218

218

00:09:13.490  -->  00:09:16.900
the elements of the array into a string separated by spaces.
219

219

00:09:16.900  -->  00:09:19.130
And so that puts it back into a sentence
220

220

00:09:19.130  -->  00:09:20.630
with spaces between the words.
221

221

00:09:22.920  -->  00:09:23.753
Okay?
222

222

00:09:23.753  -->  00:09:24.603
And then the three dots.
223

223

00:09:25.610  -->  00:09:27.410
And I forgot to close this one here.
224

224

00:09:28.810  -->  00:09:29.820
And okay.
225

225

00:09:29.820  -->  00:09:32.140
So we have our new title, which is
226

226

00:09:32.140  -->  00:09:33.470
just array of the words.
227

227

00:09:33.470  -->  00:09:35.560
Which will be joined by putting spaces
228

228

00:09:35.560  -->  00:09:37.196
into the words and then add the three dots
229

229

00:09:37.196  -->  00:09:38.769
to show that the title is longer
230

230

00:09:38.769  -->  00:09:41.320
than just the words that are displayed.
231

231

00:09:41.320  -->  00:09:43.260
So I hope this made sense to you.
232

232

00:09:43.260  -->  00:09:44.380
And we could have done this here
233

233

00:09:44.380  -->  00:09:46.093
with the for each method and having
234

234

00:09:46.093  -->  00:09:49.640
an external variable here for the accumulator.
235

235

00:09:49.640  -->  00:09:50.880
And we could have then, in each of
236

236

00:09:50.880  -->  00:09:54.550
these iterations, have updated that external variable.
237

237

00:09:54.550  -->  00:09:56.080
But the reduced method already has
238

238

00:09:56.080  -->  00:09:58.930
the accumulator built in and so I thought it's a good idea
239

239

00:09:58.930  -->  00:10:02.250
and a good use case to use this method here.
240

240

00:10:02.250  -->  00:10:04.120
So we had to go through all of this.
241

241

00:10:04.120  -->  00:10:06.604
A bit complex algorithm here.
242

242

00:10:06.604  -->  00:10:10.280
Just because we don't want to cut the words into halves
243

243

00:10:10.280  -->  00:10:14.170
and want full words always in our title sentence.
244

244

00:10:14.170  -->  00:10:16.030
And if you found a simpler way of doing this
245

245

00:10:16.030  -->  00:10:18.060
then please let me know in the Q and A.
246

246

00:10:18.060  -->  00:10:20.390
But I think this is here actually good solution
247

247

00:10:20.390  -->  00:10:22.190
and a good use case for some of
248

248

00:10:22.190  -->  00:10:24.610
the jobs and features like reduced.
249

249

00:10:24.610  -->  00:10:26.750
And it's also always a good thought experiment
250

250

00:10:26.750  -->  00:10:28.853
to come up with this kind of code.
251

251

00:10:29.780  -->  00:10:30.613
Right?
252

252

00:10:30.613  -->  00:10:33.403
So let's now actually use this method here.
253

253

00:10:34.350  -->  00:10:36.550
So I'm gonna copy it and where we need it
254

254

00:10:36.550  -->  00:10:39.810
is here in the render recipe function.
255

255

00:10:39.810  -->  00:10:42.083
So here is where we print the title.
256

256

00:10:43.020  -->  00:10:46.043
And so all we need to do is to insert it here.
257

257

00:10:48.249  -->  00:10:50.900
And pass in the title.
258

258

00:10:50.900  -->  00:10:51.810
And that's it.
259

259

00:10:51.810  -->  00:10:54.360
So we could now pass here the limit.
260

260

00:10:54.360  -->  00:10:57.740
But as you know, we have it preset to 17.
261

261

00:10:57.740  -->  00:10:59.170
And so there's no need to pass
262

262

00:10:59.170  -->  00:11:01.580
the additional argument into it.
263

263

00:11:01.580  -->  00:11:04.310
So you notice that here in these curly braces
264

264

00:11:04.310  -->  00:11:07.090
in the template string, we cannot
265

265

00:11:07.090  -->  00:11:09.410
only use the variables directly.
266

266

00:11:09.410  -->  00:11:11.567
But we can also include functions like I did here.
267

267

00:11:11.567  -->  00:11:13.803
And so that's pretty handy here as well.
268

268

00:11:15.700  -->  00:11:16.610
Okay.
269

269

00:11:16.610  -->  00:11:18.410
So let's now actually test this out.
270

270

00:11:20.880  -->  00:11:23.040
So I'm using pizza again.
271

271

00:11:23.040  -->  00:11:24.740
And let's see.
272

272

00:11:24.740  -->  00:11:26.290
And indeed, here we go.
273

273

00:11:26.290  -->  00:11:27.940
Well, there's something wrong here
274

274

00:11:27.940  -->  00:11:29.920
so a small bug somewhere where
275

275

00:11:29.920  -->  00:11:33.390
I'm inserting the parenthesis.
276

276

00:11:33.390  -->  00:11:35.690
And yeah, here it is.
277

277

00:11:35.690  -->  00:11:36.966
So that shouldn't be there.
278

278

00:11:36.966  -->  00:11:39.783
And so let's now check it out again.
279

279

00:11:43.450  -->  00:11:44.743
Writing pizza.
280

280

00:11:46.760  -->  00:11:48.090
So if you count the characters here now
281

281

00:11:48.090  -->  00:11:50.820
you will see that they're never more than 17.
282

282

00:11:50.820  -->  00:11:52.770
So four and nine.
283

283

00:11:52.770  -->  00:11:53.603
And 14.
284

284

00:11:53.603  -->  00:11:55.040
So that's less than 17.
285

285

00:11:55.040  -->  00:11:56.460
Here I have four, eight.
286

286

00:11:56.460  -->  00:11:57.650
13.
287

287

00:11:57.650  -->  00:12:00.880
Here we didn't even need to apply the algorithm.
288

288

00:12:00.880  -->  00:12:03.190
And so we immediately just returned the title
289

289

00:12:03.190  -->  00:12:05.830
because it's only eight characters long.
290

290

00:12:05.830  -->  00:12:07.530
This one is also less than 17.
291

291

00:12:07.530  -->  00:12:11.359
And so you see that all of them are just on one line now.
292

292

00:12:11.359  -->  00:12:15.193
If we were to increase this here let's say, to 20.
293

293

00:12:16.120  -->  00:12:19.170
Then there were probably already be some words.
294

294

00:12:19.170  -->  00:12:20.003
That are different.
295

295

00:12:20.003  -->  00:12:21.190
Let's actually do it here.
296

296

00:12:22.370  -->  00:12:25.470
So we can pass 20 now to override that 17.
297

297

00:12:25.470  -->  00:12:26.743
Let's give it a try now.
298

298

00:12:30.370  -->  00:12:33.491
Yeah, we really need that spinner here for the feedback.
299

299

00:12:33.491  -->  00:12:36.730
And so you see it here, there's these three dots.
300

300

00:12:36.730  -->  00:12:39.140
They now moved to the second line already.
301

301

00:12:39.140  -->  00:12:40.627
So that one was too long.
302

302

00:12:40.627  -->  00:12:42.280
Here's the same situation.
303

303

00:12:42.280  -->  00:12:43.840
Here is the same thing.
304

304

00:12:43.840  -->  00:12:48.090
And so, 17 is really the sweet spot.
305

305

00:12:48.090  -->  00:12:49.580
That's best here.
306

306

00:12:49.580  -->  00:12:50.413
Okay.
307

307

00:12:50.413  -->  00:12:52.010
So that's done.
308

308

00:12:52.010  -->  00:12:53.795
And now all there really is to do
309

309

00:12:53.795  -->  00:12:56.860
is to implement this small spinner here
310

310

00:12:56.860  -->  00:13:00.420
that rotates while we are fetching our data from the API.
311

311

00:13:00.420  -->  00:13:02.160
So in order to give the user the feedback
312

312

00:13:02.160  -->  00:13:04.320
that we're actually doing something here
313

313

00:13:04.320  -->  00:13:05.680
and that the app is working.
314

314

00:13:05.680  -->  00:13:08.113
So let's do that right in the next video.
