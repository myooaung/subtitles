WEBVTT
1
1

00:00:00.362  -->  00:00:02.120
<v Narrator>Welcome back.</v>
2

2

00:00:02.120  -->  00:00:04.230
And this is a very exciting lecture
3

3

00:00:04.230  -->  00:00:06.730
because now you're finally going to use all the skills
4

4

00:00:06.730  -->  00:00:09.040
you learned about asynchronous JavaScript
5

5

00:00:09.040  -->  00:00:12.370
in order to make an AJAX call to request some weather data
6

6

00:00:12.370  -->  00:00:14.103
from a real weather API.
7

7

00:00:15.190  -->  00:00:17.580
And in order to do this we're going to use a modern
8

8

00:00:17.580  -->  00:00:18.962
web API called Fetch.
9

9

00:00:18.962  -->  00:00:21.670
And by web API I mean these parts
10

10

00:00:21.670  -->  00:00:24.250
that are available to us in the browser but are not
11

11

00:00:24.250  -->  00:00:26.880
really part of the JavaScript language itself.
12

12

00:00:26.880  -->  00:00:29.510
Remember that from the event loop lecture?
13

13

00:00:29.510  -->  00:00:33.770
Anyway, with Fetch we can do AJAX in a very simple way.
14

14

00:00:33.770  -->  00:00:36.590
So we can do asynchronous network requests across the
15

15

00:00:36.590  -->  00:00:39.440
internet to fetch data from other servers,
16

16

00:00:39.440  -->  00:00:41.137
or even from our own server.
17

17

00:00:41.137  -->  00:00:42.100
Okay.
18

18

00:00:42.100  -->  00:00:43.770
So that's just what we talked about
19

19

00:00:43.770  -->  00:00:45.380
in our last lecture, right?
20

20

00:00:45.380  -->  00:00:47.790
Now we used to do this in JavaScript using
21

21

00:00:47.790  -->  00:00:51.280
the rather complex XML HttpRequest interface.
22

22

00:00:51.280  -->  00:00:52.710
And maybe you have heard of that.
23

23

00:00:52.710  -->  00:00:53.590
It has actually better
24

24

00:00:53.590  -->  00:00:56.550
browser support than Fetch because it has been around for
25

25

00:00:56.550  -->  00:00:57.383
a long time now.
26

26

00:00:57.383  -->  00:00:59.160
But I'm still going to use Fetch right now
27

27

00:00:59.160  -->  00:01:01.225
here in this lecture, which is more modern
28

28

00:01:01.225  -->  00:01:04.360
and it should work more than fine for us here.
29

29

00:01:04.360  -->  00:01:06.510
And so let's test it out now.
30

30

00:01:06.510  -->  00:01:09.930
So I'm going to get rid of this code here first,
31

31

00:01:09.930  -->  00:01:10.933
just like before.
32

32

00:01:14.580  -->  00:01:15.510
Okay.
33

33

00:01:15.510  -->  00:01:16.890
So all we have to do is really to
34

34

00:01:16.890  -->  00:01:18.823
use the fetch function.
35

35

00:01:20.550  -->  00:01:21.830
So just like this.
36

36

00:01:21.830  -->  00:01:24.060
Now in here we need to pass the URL
37

37

00:01:24.060  -->  00:01:26.750
where the API is located.
38

38

00:01:26.750  -->  00:01:30.460
So basically the URL to which we are sending the request.
39

39

00:01:30.460  -->  00:01:33.360
Now we are using a weather API called MetaWeather.
40

40

00:01:33.360  -->  00:01:35.640
So now let's talk a bit about that one.
41

41

00:01:35.640  -->  00:01:40.640
I already have it here open, so it's on metaweather.com/api
42

42

00:01:41.090  -->  00:01:44.850
and this page here is basically a simple documentation
43

43

00:01:44.850  -->  00:01:46.520
of this API.
44

44

00:01:46.520  -->  00:01:51.030
So normally APIs request a key in order to use it,
45

45

00:01:51.030  -->  00:01:53.750
but this one is a very simple one and it doesn't require
46

46

00:01:53.750  -->  00:01:57.400
an API key and so that's why I chose this very simple
47

47

00:01:57.400  -->  00:01:58.492
MetaWeather API.
48

48

00:01:58.492  -->  00:01:59.560
Okay.
49

49

00:01:59.560  -->  00:02:01.030
So down here we have the
50

50

00:02:01.030  -->  00:02:04.070
documentation and we can see here that there are three
51

51

00:02:04.070  -->  00:02:05.348
methods in this API.
52

52

00:02:05.348  -->  00:02:07.610
So the first one here is to search
53

53

00:02:07.610  -->  00:02:08.940
for locations.
54

54

00:02:08.940  -->  00:02:12.160
Basically you put in the name of a city
55

55

00:02:12.160  -->  00:02:15.575
or something and it then comes back with a result which
56

56

00:02:15.575  -->  00:02:19.010
contains these fields here in the response.
57

57

00:02:19.010  -->  00:02:22.130
So the title of the location, the type, the latitude
58

58

00:02:22.130  -->  00:02:25.762
and longitude, this ID here which means Where On Earth ID,
59

59

00:02:25.762  -->  00:02:27.337
and then this distance here.
60

60

00:02:27.337  -->  00:02:28.300
Okay.
61

61

00:02:28.300  -->  00:02:29.250
Now this is not the one
62

62

00:02:29.250  -->  00:02:31.930
that we want to use, but we want to use this location
63

63

00:02:31.930  -->  00:02:32.763
method here.
64

64

00:02:32.763  -->  00:02:35.400
This is basically to get the weather data
65

65

00:02:35.400  -->  00:02:38.140
from a certain Where On Earth ID.
66

66

00:02:38.140  -->  00:02:39.330
So this ID here
67

67

00:02:39.330  -->  00:02:41.593
corresponds to a place on Earth.
68

68

00:02:42.561  -->  00:02:46.090
So this is the API method, or the API endpoint,
69

69

00:02:46.090  -->  00:02:48.850
which we can also call it, that we are interested in.
70

70

00:02:48.850  -->  00:02:50.490
Down here we have some examples
71

71

00:02:50.490  -->  00:02:53.120
and so let's check it out this one here for San Francisco,
72

72

00:02:53.120  -->  00:02:56.020
which is actually the one we are going to use.
73

73

00:02:56.020  -->  00:03:00.580
Let's open in a new tab and then you see this response.
74

74

00:03:00.580  -->  00:03:03.360
Now maybe for you it looks like this in the browser,
75

75

00:03:03.360  -->  00:03:05.168
so probably this is what you see.
76

76

00:03:05.168  -->  00:03:06.290
But I have this very
77

77

00:03:06.290  -->  00:03:08.440
handy Chrome extension installed which is called
78

78

00:03:08.440  -->  00:03:09.273
JSON Viewer.
79

79

00:03:09.273  -->  00:03:11.880
It makes it nicely formatted and more easy
80

80

00:03:11.880  -->  00:03:13.458
to read, just like this.
81

81

00:03:13.458  -->  00:03:17.622
So you see here, this is the URL of the API call,
82

82

00:03:17.622  -->  00:03:21.970
so metaweather.com/API/location which is the endpoint,
83

83

00:03:21.970  -->  00:03:25.032
so which is the method that we are using, and then
84

84

00:03:25.032  -->  00:03:28.250
we also pass in the Where On Earth ID,
85

85

00:03:28.250  -->  00:03:30.060
which is this number here, right?
86

86

00:03:30.060  -->  00:03:33.158
So just following the format that we have here
87

87

00:03:33.158  -->  00:03:35.223
in this documentation, okay?
88

88

00:03:36.110  -->  00:03:40.130
So what we get back then is this object here, which is
89

89

00:03:40.130  -->  00:03:43.530
not really an object but it's called JSON.
90

90

00:03:43.530  -->  00:03:44.680
And so JSON
91

91

00:03:44.680  -->  00:03:47.790
is a text-based data format which is very similar to
92

92

00:03:47.790  -->  00:03:50.870
JavaScript objects, but the difference is that JSON
93

93

00:03:50.870  -->  00:03:53.760
is really just a single string and not an entire
94

94

00:03:53.760  -->  00:03:55.943
object inside the JavaScript engine.
95

95

00:03:57.319  -->  00:04:00.470
This is like a string that we can receive from the server
96

96

00:04:00.470  -->  00:04:03.440
and we can then easily convert it to a JavaScript object.
97

97

00:04:03.440  -->  00:04:06.010
I'm going to show you how that works just in a second
98

98

00:04:06.010  -->  00:04:08.130
when we start using this API.
99

99

00:04:08.130  -->  00:04:10.123
For now let's just take a look at the result here and
100

100

00:04:10.123  -->  00:04:14.240
what we have is the first field is the consolidated weather
101

101

00:04:14.240  -->  00:04:17.250
and so we get an array of the weather on different days.
102

102

00:04:17.250  -->  00:04:21.280
The first one is for March 15, and you see the minimum
103

103

00:04:21.280  -->  00:04:24.900
temperature, max, wind speed, wind direction, air pressure
104

104

00:04:24.900  -->  00:04:26.583
and all the good stuff like that.
105

105

00:04:26.583  -->  00:04:31.583
Then we have the same for March 16, 17, 18, and 19,
106

106

00:04:32.920  -->  00:04:35.000
and even 20. So I think it's a forecast
107

107

00:04:35.000  -->  00:04:36.946
for five days that we get.
108

108

00:04:36.946  -->  00:04:41.050
Then besides that array we also have the current time,
109

109

00:04:41.050  -->  00:04:45.723
the sunrise, sunset, time zone, and all of this data here.
110

110

00:04:46.800  -->  00:04:51.710
So we can get all of this just by calling the API on this
111

111

00:04:51.710  -->  00:04:54.041
location endpoint with this ID here.
112

112

00:04:54.041  -->  00:04:55.380
So basically with
113

113

00:04:55.380  -->  00:04:56.310
this parameter.
114

114

00:04:56.310  -->  00:04:58.120
This works kind of a parameter that we
115

115

00:04:58.120  -->  00:05:01.338
pass into the API, simply by using it in the URL that
116

116

00:05:01.338  -->  00:05:02.171
we called.
117

117

00:05:02.171  -->  00:05:04.618
So let's actually use this one here.
118

118

00:05:04.618  -->  00:05:05.560
All we need
119

119

00:05:05.560  -->  00:05:10.560
to do is to pass this one into the fetch as a string.
120

120

00:05:11.290  -->  00:05:12.683
And here we go.
121

121

00:05:14.120  -->  00:05:14.953
That's it.
122

122

00:05:14.953  -->  00:05:16.840
It looks a bit weird because it moved
123

123

00:05:16.840  -->  00:05:17.880
to a new line here.
124

124

00:05:19.734  -->  00:05:22.840
Ideally it would be on one line looking like this,
125

125

00:05:22.840  -->  00:05:24.470
okay but we have no space for that,
126

126

00:05:24.470  -->  00:05:25.890
so that's just how it looks.
127

127

00:05:25.890  -->  00:05:29.993
Now just to test what happens here let's take a look at it.
128

128

00:05:31.370  -->  00:05:32.203
Okay.
129

129

00:05:32.203  -->  00:05:34.760
So now we get this weird error here saying
130

130

00:05:34.760  -->  00:05:38.300
no access control allow origin header is present on
131

131

00:05:38.300  -->  00:05:39.890
the requested resource.
132

132

00:05:39.890  -->  00:05:41.580
So what is this strange error?
133

133

00:05:41.580  -->  00:05:44.750
Well, the reason for this is the so-called same origin
134

134

00:05:44.750  -->  00:05:47.560
policy in JavaScript, which basically prevents us from
135

135

00:05:47.560  -->  00:05:50.940
making AJAX requests to a domain different than our own
136

136

00:05:50.940  -->  00:05:52.000
domain.
137

137

00:05:52.000  -->  00:05:53.980
So right now we don't really have any domain here,
138

138

00:05:53.980  -->  00:05:56.310
we're just opening the JavaScript file.
139

139

00:05:56.310  -->  00:05:58.240
And the domain
140

140

00:05:58.240  -->  00:06:00.874
we are requesting this resource from is of course
141

141

00:06:00.874  -->  00:06:02.533
the MetaWeather API.
142

142

00:06:02.533  -->  00:06:05.570
And so because of this same origin
143

143

00:06:05.570  -->  00:06:10.080
policy we cannot access this resource.
144

144

00:06:10.080  -->  00:06:11.780
Now in order to actually allow developers
145

145

00:06:11.780  -->  00:06:14.060
to make requests to different domains,
146

146

00:06:14.060  -->  00:06:16.610
something called Cross Origin Resource Sharing,
147

147

00:06:16.610  -->  00:06:18.930
or CORS, was developed.
148

148

00:06:18.930  -->  00:06:21.003
I don't want to bore you with all the details here
149

149

00:06:21.003  -->  00:06:23.711
but in simple terms, the developers of the API that
150

150

00:06:23.711  -->  00:06:26.671
we are requesting from, they need to implement CORS
151

151

00:06:26.671  -->  00:06:27.649
on their server.
152

152

00:06:27.649  -->  00:06:29.900
That's actually the case for many
153

153

00:06:29.900  -->  00:06:33.694
APIs but unfortunately not for MetaWeather.
154

154

00:06:33.694  -->  00:06:37.996
So this is kind of a problem but we can actually still
155

155

00:06:37.996  -->  00:06:38.940
fortunately solve this.
156

156

00:06:38.940  -->  00:06:41.130
So what developers usually do
157

157

00:06:41.130  -->  00:06:44.730
is to proxy or to channel the request through
158

158

00:06:44.730  -->  00:06:45.870
their own server.
159

159

00:06:45.870  -->  00:06:48.595
Like doing AJAX requests on our own server
160

160

00:06:48.595  -->  00:06:51.330
where the same origin policy doesn't exist
161

161

00:06:51.330  -->  00:06:53.640
and then send the data to the browser.
162

162

00:06:53.640  -->  00:06:56.300
So this is just a work-around to that problem.
163

163

00:06:56.300  -->  00:06:58.010
But of course we're not going to do that here because
164

164

00:06:58.010  -->  00:07:00.760
we don't have our own server in this example, and of course
165

165

00:07:00.760  -->  00:07:01.950
we want to keep it simple.
166

166

00:07:01.950  -->  00:07:03.600
But we can still use a service
167

167

00:07:03.600  -->  00:07:05.355
that does exactly that for us.
168

168

00:07:05.355  -->  00:07:07.220
We're going to use a proxy
169

169

00:07:07.220  -->  00:07:08.978
called crossorigin.me.
170

170

00:07:08.978  -->  00:07:10.637
Let me actually show it to you.
171

171

00:07:16.310  -->  00:07:18.580
That's misspelled.
172

172

00:07:18.580  -->  00:07:20.103
So crossorigin.me.
173

173

00:07:20.103  -->  00:07:21.904
And so here it says what it does.
174

174

00:07:21.904  -->  00:07:25.140
A CORS proxy is a service that allows developers to access
175

175

00:07:25.140  -->  00:07:27.134
resources from other websites, without having to own
176

176

00:07:27.134  -->  00:07:28.830
that website.
177

177

00:07:28.830  -->  00:07:30.610
And it's actually very easy to use.
178

178

00:07:30.610  -->  00:07:31.443
All we have to do
179

179

00:07:31.443  -->  00:07:36.272
is to prefix our own request URL with this crossorigin.me.
180

180

00:07:38.180  -->  00:07:41.143
So let's test this and put it here,
181

181

00:07:43.550  -->  00:07:46.819
and that should actually be enough already.
182

182

00:07:46.819  -->  00:07:48.017
Let's reload it.
183

183

00:07:48.017  -->  00:07:51.730
And now we don't get any error, but we also don't get
184

184

00:07:51.730  -->  00:07:52.598
any result, right?
185

185

00:07:52.598  -->  00:07:54.440
And that's because we didn't yet
186

186

00:07:54.440  -->  00:07:58.253
handle the result of this fetch function.
187

187

00:07:59.230  -->  00:08:02.340
So we simply fired off the request but then that's really
188

188

00:08:02.340  -->  00:08:03.173
all we did.
189

189

00:08:03.173  -->  00:08:04.310
We didn't handle any responses
190

190

00:08:04.310  -->  00:08:05.490
or anything like that.
191

191

00:08:05.490  -->  00:08:08.040
So let's now take care of that.
192

192

00:08:08.040  -->  00:08:08.873
Okay.
193

193

00:08:08.873  -->  00:08:10.729
What you need to know is that the Fetch API
194

194

00:08:10.729  -->  00:08:13.399
gets our data and returns a promise.
195

195

00:08:13.399  -->  00:08:14.710
And this promise
196

196

00:08:14.710  -->  00:08:18.082
can of course return the data we want, or an error
197

197

00:08:18.082  -->  00:08:22.420
if it couldn't somehow find the data that we requested.
198

198

00:08:22.420  -->  00:08:25.811
So now we can use the then and catch methods on this promise
199

199

00:08:25.811  -->  00:08:29.160
just like I showed you in the last lectures.
200

200

00:08:29.160  -->  00:08:31.790
So remember how I mentioned that most of the time we
201

201

00:08:31.790  -->  00:08:34.520
actually just consume promises and do not really
202

202

00:08:34.520  -->  00:08:35.353
produce them?
203

203

00:08:35.353  -->  00:08:37.074
And this is a great example of that.
204

204

00:08:37.074  -->  00:08:40.900
Fetch here automatically returns a promise
205

205

00:08:40.900  -->  00:08:43.350
without us having to write a promise ourselves.
206

206

00:08:43.350  -->  00:08:45.632
So we are just consuming it here.
207

207

00:08:45.632  -->  00:08:47.653
Now let's use the then method on it,
208

208

00:08:50.420  -->  00:08:51.693
and also the catch.
209

209

00:08:55.910  -->  00:08:58.920
Our callback function here has one argument and that is
210

210

00:08:58.920  -->  00:09:00.780
the resolve value of the promise.
211

211

00:09:00.780  -->  00:09:01.780
Remember that?
212

212

00:09:01.780  -->  00:09:04.123
Let's just call it something like result.
213

213

00:09:08.846  -->  00:09:12.020
This means that the data that comes back from this
214

214

00:09:12.020  -->  00:09:16.410
fetch AJAX request will be called result here in this
215

215

00:09:16.410  -->  00:09:17.323
callback function.
216

216

00:09:18.298  -->  00:09:21.197
And so let's simply log it to the console.
217

217

00:09:21.197  -->  00:09:24.363
Console dot log the result.
218

218

00:09:26.795  -->  00:09:29.770
And let's also add the callback here for the
219

219

00:09:29.770  -->  00:09:31.293
case that there was an error.
220

220

00:09:34.420  -->  00:09:36.863
Let's just log it to the console also.
221

221

00:09:43.900  -->  00:09:45.273
Let's see how that works.
222

222

00:09:48.560  -->  00:09:49.400
And alright!
223

223

00:09:49.400  -->  00:09:53.110
So now you see this response object here.
224

224

00:09:53.110  -->  00:09:55.810
It has all of these fields here but what really matters
225

225

00:09:55.810  -->  00:09:57.533
to us is this body field.
226

226

00:09:57.533  -->  00:09:59.353
What you see now here is that
227

227

00:09:59.353  -->  00:10:01.260
that is a readable stream.
228

228

00:10:01.260  -->  00:10:03.677
That's a bit weird.
229

229

00:10:03.677  -->  00:10:07.060
What this means that we have to first process this response
230

230

00:10:07.060  -->  00:10:11.650
here with JSON so that we can then get the actual result
231

231

00:10:11.650  -->  00:10:12.938
that we are looking for.
232

232

00:10:12.938  -->  00:10:14.678
So the body here is where the
233

233

00:10:14.678  -->  00:10:18.290
actual result is stored, but it's now as the readable
234

234

00:10:18.290  -->  00:10:19.123
stream.
235

235

00:10:19.123  -->  00:10:21.290
We actually have to convert it from JSON to
236

236

00:10:21.290  -->  00:10:24.077
JavaScript just like I mentioned before.
237

237

00:10:24.077  -->  00:10:25.216
How we do that?
238

238

00:10:25.216  -->  00:10:27.400
Well, it's actually very easy.
239

239

00:10:27.400  -->  00:10:28.670
We just use the JSON
240

240

00:10:28.670  -->  00:10:30.451
method on this result.
241

241

00:10:30.451  -->  00:10:33.110
And this JSON method, it also
242

242

00:10:33.110  -->  00:10:34.464
actually returns a promise.
243

243

00:10:34.464  -->  00:10:36.100
So we have to handle the
244

244

00:10:36.100  -->  00:10:39.108
result of that and so again, we use the then method.
245

245

00:10:39.108  -->  00:10:42.870
And we also chain it like we did in the lecture before.
246

246

00:10:42.870  -->  00:10:44.230
Remember that?
247

247

00:10:44.230  -->  00:10:46.460
Just like before we can return a promise
248

248

00:10:46.460  -->  00:10:49.920
here and then add a new then method right after this.
249

249

00:10:49.920  -->  00:10:52.350
So chaining, or asynchronous operations here,
250

250

00:10:52.350  -->  00:10:54.193
one after the other.
251

251

00:10:54.193  -->  00:10:55.400
Let's return
252

252

00:10:56.920  -->  00:10:57.753
result
253

253

00:10:59.310  -->  00:11:00.143
dot JSON.
254

254

00:11:00.143  -->  00:11:02.118
So this here will return
255

255

00:11:02.118  -->  00:11:05.460
a promise because this actually happens asynchronously,
256

256

00:11:05.460  -->  00:11:08.950
this conversion to JSON, because it can take some time,
257

257

00:11:08.950  -->  00:11:12.330
so therefore it happens asynchronously in the background.
258

258

00:11:12.330  -->  00:11:16.000
As soon as it's ready it then comes back with the data.
259

259

00:11:16.000  -->  00:11:19.263
So we need to handle that and so we add a new then method.
260

260

00:11:21.889  -->  00:11:24.297
So let's call this one data now,
261

261

00:11:26.954  -->  00:11:29.420
and let's simply log it to the console once more.
262

262

00:11:34.520  -->  00:11:36.200
Let's fire it off.
263

263

00:11:36.200  -->  00:11:37.940
And here we go.
264

264

00:11:37.940  -->  00:11:41.440
There is our JavaScript object now containing
265

265

00:11:41.440  -->  00:11:43.830
the data that we were looking for.
266

266

00:11:43.830  -->  00:11:44.693
Great, right?
267

267

00:11:44.693  -->  00:11:48.060
So we just did our very first AJAX call using
268

268

00:11:48.060  -->  00:11:50.093
fetch and promises.
269

269

00:11:51.512  -->  00:11:54.590
If you now take a look at this, this would be the exact
270

270

00:11:54.590  -->  00:11:58.620
data that we had here in this example.
271

271

00:11:58.620  -->  00:12:02.370
So you have the weather data here, which is an array.
272

272

00:12:02.370  -->  00:12:05.930
So consolidated weather, then this array with all these
273

273

00:12:05.930  -->  00:12:09.520
days, and then the remaining data that we have here.
274

274

00:12:09.520  -->  00:12:11.770
And you see that this is still San Francisco.
275

275

00:12:13.154  -->  00:12:16.240
So all that we need is actually right here.
276

276

00:12:16.240  -->  00:12:18.450
Now to make this a bit more fun, let's actually log
277

277

00:12:18.450  -->  00:12:20.960
something more exciting to the console than
278

278

00:12:20.960  -->  00:12:25.390
just this entire object, okay?
279

279

00:12:25.390  -->  00:12:29.075
We don't want to log all of this to the console but instead
280

280

00:12:29.075  -->  00:12:31.000
let's just get this weather here for the first day
281

281

00:12:31.000  -->  00:12:32.370
and then log some strings to the console
282

282

00:12:32.370  -->  00:12:34.020
telling how the weather is today.
283

283

00:12:35.230  -->  00:12:36.750
So count today
284

284

00:12:38.130  -->  00:12:41.330
is data because that's this entire object here.
285

285

00:12:41.330  -->  00:12:43.570
Then we have consolidated weather.
286

286

00:12:43.570  -->  00:12:45.483
Let's just copy this one from here.
287

287

00:12:47.630  -->  00:12:50.300
Remember that this is the array, and then today is
288

288

00:12:50.300  -->  00:12:52.310
of course the first one.
289

289

00:12:52.310  -->  00:12:54.110
So, number zero.
290

290

00:12:54.110  -->  00:12:55.203
So that is today,
291

291

00:12:57.000  -->  00:12:58.410
and let's log to the console
292

292

00:12:59.630  -->  00:13:01.103
some kind of string.
293

293

00:13:02.527  -->  00:13:04.453
We are using template strings here.
294

294

00:13:07.130  -->  00:13:10.223
Temperatures in, let's add the name of the city.
295

295

00:13:11.320  -->  00:13:14.203
You see this one is stored in this title.
296

296

00:13:15.460  -->  00:13:16.840
So we have data
297

297

00:13:18.950  -->  00:13:19.783
dot title
298

298

00:13:22.500  -->  00:13:27.036
stay between, so let's just use the max temperature
299

299

00:13:27.036  -->  00:13:28.503
and the min temperature.
300

300

00:13:29.750  -->  00:13:33.113
So it is min and max.
301

301

00:13:35.573  -->  00:13:37.923
Let's just write it out, that's easier.
302

302

00:13:39.940  -->  00:13:42.680
So we have today dot min temp
303

303

00:13:53.666  -->  00:13:55.583
and today dot max temp.
304

304

00:13:58.460  -->  00:13:59.520
Alright.
305

305

00:13:59.520  -->  00:14:00.791
Let's check it out.
306

306

00:14:00.791  -->  00:14:02.240
It takes some
307

307

00:14:02.240  -->  00:14:05.080
time to get the data, and then temperatures in San
308

308

00:14:05.080  -->  00:14:09.960
Francisco stay between 7.52 and 11.36 degrees Celsius.
309

309

00:14:09.960  -->  00:14:12.140
So this probably is in the degrees Celsius here,
310

310

00:14:12.140  -->  00:14:16.130
which is what we use outside the US as you probably know.
311

311

00:14:16.130  -->  00:14:17.200
So, great.
312

312

00:14:17.200  -->  00:14:20.530
Let's just put this maybe in a function.
313

313

00:14:20.530  -->  00:14:22.180
Let's just say function
314

314

00:14:26.056  -->  00:14:27.580
getWeather and then we pass on the
315

315

00:14:27.580  -->  00:14:29.413
Where On Earth ID into it,
316

316

00:14:32.850  -->  00:14:35.473
to make this a bit more reusable.
317

317

00:14:41.705  -->  00:14:45.788
getWeather, then we use this one here, as our ID.
318

318

00:14:48.040  -->  00:14:52.023
So in here we just want this ID.
319

319

00:14:53.055  -->  00:14:55.263
So let's use a template string here.
320

320

00:14:57.992  -->  00:14:59.073
Oops, that's not, yep.
321

321

00:15:04.490  -->  00:15:05.410
Alright.
322

322

00:15:05.410  -->  00:15:06.910
So let's take a look at the example.
323

323

00:15:06.910  -->  00:15:08.713
So another one here is London.
324

324

00:15:11.140  -->  00:15:13.173
So the ID here is this one.
325

325

00:15:13.173  -->  00:15:15.160
And so let's just call
326

326

00:15:15.160  -->  00:15:16.840
it now for London as well.
327

327

00:15:16.840  -->  00:15:17.673
So getWeather.
328

328

00:15:21.760  -->  00:15:23.463
And so let's test it out now.
329

329

00:15:25.320  -->  00:15:26.180
And it's okay.
330

330

00:15:26.180  -->  00:15:27.567
So San Francisco is the first one and
331

331

00:15:27.567  -->  00:15:29.170
the second one is London.
332

332

00:15:29.170  -->  00:15:30.793
So it's working just fine.
333

333

00:15:31.750  -->  00:15:35.030
Now let's just see what happens if we put some weird
334

334

00:15:35.030  -->  00:15:39.450
number here that doesn't really return any result.
335

335

00:15:39.450  -->  00:15:42.973
So something like this, which is probably not a valid ID,
336

336

00:15:43.970  -->  00:15:45.840
so let's see.
337

337

00:15:45.840  -->  00:15:47.660
And so what we get here first
338

338

00:15:47.660  -->  00:15:52.110
is a 404 so basically this means it didn't find anything.
339

339

00:15:52.110  -->  00:15:54.080
So that's and error coming right from line 98
340

340

00:15:54.080  -->  00:15:57.400
so right from this fetch function here.
341

341

00:15:57.400  -->  00:15:59.410
But then we also get this error here,
342

342

00:15:59.410  -->  00:16:01.610
which is the type error cannot read property zero of
343

343

00:16:01.610  -->  00:16:02.460
undefined.
344

344

00:16:02.460  -->  00:16:05.290
And so that one comes from line 108 and so
345

345

00:16:05.290  -->  00:16:08.160
that means that somewhere here in this chain
346

346

00:16:08.160  -->  00:16:09.920
there was an error.
347

347

00:16:09.920  -->  00:16:12.760
And so we can now add more logic here
348

348

00:16:12.760  -->  00:16:16.630
in this catch method to actually handle that error properly.
349

349

00:16:16.630  -->  00:16:19.440
But this was just to show you an example.
350

350

00:16:19.440  -->  00:16:21.440
What we really want is of course,
351

351

00:16:21.440  -->  00:16:22.963
for this to work just fine.
352

352

00:16:23.920  -->  00:16:24.753
And that's it.
353

353

00:16:24.753  -->  00:16:28.020
That's a very simple AJAX call using fetch
354

354

00:16:28.020  -->  00:16:32.520
and promises using then and the catch methods.
355

355

00:16:32.520  -->  00:16:34.240
I hope that made sense to you.
356

356

00:16:34.240  -->  00:16:35.610
How we use fetch, how we
357

357

00:16:35.610  -->  00:16:38.910
handle the result and how we convert it to JSON which
358

358

00:16:38.910  -->  00:16:40.830
returns this new promise.
359

359

00:16:40.830  -->  00:16:42.220
Then down here we simply
360

360

00:16:42.220  -->  00:16:45.900
analyzed the response, and based on that we then simply
361

361

00:16:45.900  -->  00:16:48.330
printed the pieces of data to the console
362

362

00:16:48.330  -->  00:16:50.053
that we are interested in here.
363

363

00:16:51.010  -->  00:16:54.097
So this is how you do it with then and catch method
364

364

00:16:54.097  -->  00:16:55.402
to handle this promise.
365

365

00:16:55.402  -->  00:16:56.930
But in the next lecture
366

366

00:16:56.930  -->  00:16:58.922
I'm going to show you how we can use
367

367

00:16:58.922  -->  00:17:02.250
async / await again to handle the data that comes back
368

368

00:17:02.250  -->  00:17:03.083
from the server.
369

369

00:17:03.083  -->  00:17:04.280
So once again you will see that it is
370

370

00:17:04.280  -->  00:17:07.217
actually much easier and nicer to use also.
371

371

00:17:07.217  -->  00:17:09.523
So stay tuned for that next lecture.
