WEBVTT
1
1

00:00:01.118  -->  00:00:03.756
<v ->In this lecture we will take closer look</v>
2

2

00:00:03.756  -->  00:00:06.562
at objects in JavaScript.
3

3

00:00:06.562  -->  00:00:09.000
We will talk about object-oriented programming
4

4

00:00:09.000  -->  00:00:12.685
in general, inheritance, and how JavaScript handles
5

5

00:00:12.685  -->  00:00:16.727
objects and inheritance through prototypes.
6

6

00:00:16.727  -->  00:00:18.658
This is probably one of the most important
7

7

00:00:18.658  -->  00:00:21.240
lectures in this course if you really want
8

8

00:00:21.240  -->  00:00:23.323
to understand JavaScript.
9

9

00:00:25.098  -->  00:00:28.657
So there's a saying in JavaScript which says that,
10

10

00:00:28.657  -->  00:00:31.172
"Everything is an object."
11

11

00:00:31.172  -->  00:00:33.225
And while this is almost correct,
12

12

00:00:33.225  -->  00:00:36.313
it is not 100 percent correct though.
13

13

00:00:36.313  -->  00:00:38.712
Because in JavaScript, we have two big types
14

14

00:00:38.712  -->  00:00:41.545
of values, primitives and objects.
15

15

00:00:43.212  -->  00:00:45.892
And primitives are all the values that have one
16

16

00:00:45.892  -->  00:00:48.475
of the data types that we talked about
17

17

00:00:48.475  -->  00:00:50.074
in the intro lectures.
18

18

00:00:50.074  -->  00:00:54.918
So numbers, strings, booleans, undefined and null values,
19

19

00:00:54.918  -->  00:00:57.717
all of these are primitives,
20

20

00:00:57.717  -->  00:01:01.004
and everything else are objects.
21

21

00:01:01.004  -->  00:01:03.135
And that's why in JavaScript we say
22

22

00:01:03.135  -->  00:01:05.307
that everything is an object.
23

23

00:01:05.307  -->  00:01:07.587
And in fact, even simple things like
24

24

00:01:07.587  -->  00:01:11.754
functions, arrays, or dates are all objects in JavaScript,
25

25

00:01:12.770  -->  00:01:15.406
and that's because in JavaScript objects are not
26

26

00:01:15.406  -->  00:01:18.013
just for storing a bunch of data,
27

27

00:01:18.013  -->  00:01:19.781
like we have been doing,
28

28

00:01:19.781  -->  00:01:23.385
but for really complex things under the surface.
29

29

00:01:23.385  -->  00:01:26.103
So we have been using objects all along,
30

30

00:01:26.103  -->  00:01:28.140
just without knowing it.
31

31

00:01:28.140  -->  00:01:30.920
So always remember that almost everything
32

32

00:01:30.920  -->  00:01:33.020
is an object in JavaScript,
33

33

00:01:33.020  -->  00:01:35.624
because it's one of the fundamental things
34

34

00:01:35.624  -->  00:01:38.185
that makes JavaScript so unique and different
35

35

00:01:38.185  -->  00:01:41.602
from other popular programming languages.
36

36

00:01:42.985  -->  00:01:45.353
Alright so now that we know how important
37

37

00:01:45.353  -->  00:01:47.625
objects are in JavaScript,
38

38

00:01:47.625  -->  00:01:50.522
let's look at object-oriented programming.
39

39

00:01:50.522  -->  00:01:54.460
So, in very simple terms object-oriented programming
40

40

00:01:54.460  -->  00:01:59.204
makes heavy use of objects, properties, and methods,
41

41

00:01:59.204  -->  00:02:01.986
and these objects interact with one another
42

42

00:02:01.986  -->  00:02:05.211
to form complex applications.
43

43

00:02:05.211  -->  00:02:08.384
We use objects to store data, structure our code,
44

44

00:02:08.384  -->  00:02:10.712
and keep our code clean.
45

45

00:02:10.712  -->  00:02:12.639
So far, we have only created
46

46

00:02:12.639  -->  00:02:15.545
simple objects holding some data.
47

47

00:02:15.545  -->  00:02:19.804
I remember the John object from the intro lectures
48

48

00:02:19.804  -->  00:02:22.823
and if we had created other persons back then
49

49

00:02:22.823  -->  00:02:25.490
we would simply have written them one-by-one
50

50

00:02:25.490  -->  00:02:28.240
like Mark, Jane et cetera, right?
51

51

00:02:29.348  -->  00:02:31.491
But there is a better way,
52

52

00:02:31.491  -->  00:02:34.015
imagine something like a blueprint
53

53

00:02:34.015  -->  00:02:37.915
from which we can generate as many objects as we want,
54

54

00:02:37.915  -->  00:02:40.665
and we can do that in JavaScript.
55

55

00:02:41.678  -->  00:02:44.560
And right here is an example of that.
56

56

00:02:44.560  -->  00:02:46.726
This is a special Person object
57

57

00:02:46.726  -->  00:02:49.354
that we can basically use as a blueprint
58

58

00:02:49.354  -->  00:02:52.279
to create a lot of Person objects.
59

59

00:02:52.279  -->  00:02:54.005
In other programming languages,
60

60

00:02:54.005  -->  00:02:56.741
this is many times called a class,
61

61

00:02:56.741  -->  00:02:58.642
but in JavaScript we like to call it
62

62

00:02:58.642  -->  00:03:00.892
a constructor or prototype.
63

63

00:03:02.087  -->  00:03:04.047
So based on this constructor,
64

64

00:03:04.047  -->  00:03:07.630
we can create as many instances as we want.
65

65

00:03:08.476  -->  00:03:12.477
So here are our Jane, Mark, and John objects once again,
66

66

00:03:12.477  -->  00:03:16.174
but these were created from the Person constructor.
67

67

00:03:16.174  -->  00:03:19.997
So they are effectively Person instances,
68

68

00:03:19.997  -->  00:03:22.139
and now their name, year of birth,
69

69

00:03:22.139  -->  00:03:24.498
and job variables are defined,
70

70

00:03:24.498  -->  00:03:28.227
and they all have access to the calculateAge method.
71

71

00:03:28.227  -->  00:03:32.348
So again, the constructor acts like a blueprint
72

72

00:03:32.348  -->  00:03:34.798
and is used to create instances,
73

73

00:03:34.798  -->  00:03:37.759
which of course are also objects.
74

74

00:03:37.759  -->  00:03:40.115
We will, of course, do all of this with code
75

75

00:03:40.115  -->  00:03:41.705
over the next lectures,
76

76

00:03:41.705  -->  00:03:45.865
this is just to give you a very brief overview.
77

77

00:03:45.865  -->  00:03:46.970
And now let's take this even
78

78

00:03:46.970  -->  00:03:50.416
one step further, with inheritance.
79

79

00:03:50.416  -->  00:03:53.934
In simple terms, inheritance is when one object
80

80

00:03:53.934  -->  00:03:56.595
is based on another object.
81

81

00:03:56.595  -->  00:03:58.769
It's when one object gets access
82

82

00:03:58.769  -->  00:04:01.909
to another object's properties and methods.
83

83

00:04:01.909  -->  00:04:03.865
So, very simple.
84

84

00:04:03.865  -->  00:04:06.935
Back to our persons example, imagine that you also
85

85

00:04:06.935  -->  00:04:09.535
wanted to have an athlete constructor,
86

86

00:04:09.535  -->  00:04:11.916
besides the person constructor,
87

87

00:04:11.916  -->  00:04:15.085
with a couple of different properties and methods.
88

88

00:04:15.085  -->  00:04:19.022
Now, an athlete is also a person, right?
89

89

00:04:19.022  -->  00:04:21.351
There are just some particular properties
90

90

00:04:21.351  -->  00:04:24.555
and methods for an athlete, like for example
91

91

00:04:24.555  -->  00:04:27.794
how many participations in Olympics they have
92

92

00:04:27.794  -->  00:04:30.836
or how many medals they have won.
93

93

00:04:30.836  -->  00:04:34.627
So when we define the blueprint, so the constructor,
94

94

00:04:34.627  -->  00:04:38.177
for an athlete, then why repeat the same stuff
95

95

00:04:38.177  -->  00:04:40.829
that we have in our Person constructor?
96

96

00:04:40.829  -->  00:04:45.773
An athlete also has a name, year of birth, and job, right?
97

97

00:04:45.773  -->  00:04:49.718
So what we can do is to use inheritance.
98

98

00:04:49.718  -->  00:04:52.650
We make the Athlete object inherit the properties
99

99

00:04:52.650  -->  00:04:55.567
and methods from the Person object,
100

100

00:04:56.438  -->  00:04:59.145
so then the Athlete not only has access
101

101

00:04:59.145  -->  00:05:01.557
to its own properties and methods
102

102

00:05:01.557  -->  00:05:04.388
but also the ones from the Person object.
103

103

00:05:04.388  -->  00:05:06.211
Really cool, right?
104

104

00:05:06.211  -->  00:05:07.961
This allows us to write less code
105

105

00:05:07.961  -->  00:05:10.785
and make more logical programs.
106

106

00:05:10.785  -->  00:05:13.050
So this is a broad overview
107

107

00:05:13.050  -->  00:05:16.008
of how inheritance works in theory,
108

108

00:05:16.008  -->  00:05:17.766
and in all programming languages
109

109

00:05:17.766  -->  00:05:20.473
that have object-oriented futures.
110

110

00:05:20.473  -->  00:05:23.133
So let's now see how JavaScript in particular
111

111

00:05:23.133  -->  00:05:27.300
handles inheritance with our Person and John examples.
112

112

00:05:28.724  -->  00:05:31.665
JavaScript is a prototype-based language,
113

113

00:05:31.665  -->  00:05:34.302
which means that inheritance works by using
114

114

00:05:34.302  -->  00:05:37.344
something called prototypes.
115

115

00:05:37.344  -->  00:05:40.681
In practice, it means that each and every JavaScript
116

116

00:05:40.681  -->  00:05:43.840
object has a prototype property
117

117

00:05:43.840  -->  00:05:47.542
which makes inheritance possible in JavaScript.
118

118

00:05:47.542  -->  00:05:51.405
So again, inheritance is made possible
119

119

00:05:51.405  -->  00:05:55.804
through the prototype property that every object has.
120

120

00:05:55.804  -->  00:05:57.563
Now all of this may look a bit confusing
121

121

00:05:57.563  -->  00:05:59.865
at first sight, but don't worry,
122

122

00:05:59.865  -->  00:06:03.502
because we will do everything in code later as well.
123

123

00:06:03.502  -->  00:06:06.803
But before doing that, it's super important the we get
124

124

00:06:06.803  -->  00:06:09.520
at least a visual overview of what happens
125

125

00:06:09.520  -->  00:06:11.685
behind the scenes.
126

126

00:06:11.685  -->  00:06:15.715
Alright, now, how does inheritance actually work?
127

127

00:06:15.715  -->  00:06:18.019
To better understand this, let's go back
128

128

00:06:18.019  -->  00:06:21.415
to our Person example, where the Person object
129

129

00:06:21.415  -->  00:06:26.397
is the constructor and John is one of the instances.
130

130

00:06:26.397  -->  00:06:29.421
Now, if we want John to inherit a method
131

131

00:06:29.421  -->  00:06:32.409
or a property from the Person object
132

132

00:06:32.409  -->  00:06:35.393
we have to add that method or property
133

133

00:06:35.393  -->  00:06:38.716
to the Person's prototype property,
134

134

00:06:38.716  -->  00:06:41.059
just like we see it here.
135

135

00:06:41.059  -->  00:06:43.840
So in this example, we have the calculateAge
136

136

00:06:43.840  -->  00:06:47.029
method in the Person's prototype property
137

137

00:06:47.029  -->  00:06:49.704
and therefore john inherits the method,
138

138

00:06:49.704  -->  00:06:51.661
and can then call it.
139

139

00:06:51.661  -->  00:06:55.446
And any other object created by the Person constructor
140

140

00:06:55.446  -->  00:06:58.081
would inherit this method as well.
141

141

00:06:58.081  -->  00:07:02.315
So, again, the prototype property of an object
142

142

00:07:02.315  -->  00:07:05.039
is where we put methods and properties
143

143

00:07:05.039  -->  00:07:08.483
that we want other objects to inherit.
144

144

00:07:08.483  -->  00:07:10.653
What is really important to note here
145

145

00:07:10.653  -->  00:07:13.145
is that the Person prototype is not
146

146

00:07:13.145  -->  00:07:15.724
the prototype of the person itself,
147

147

00:07:15.724  -->  00:07:18.522
but of all instances that I created
148

148

00:07:18.522  -->  00:07:20.493
through the Person blueprint,
149

149

00:07:20.493  -->  00:07:22.873
like, for example, john.
150

150

00:07:22.873  -->  00:07:26.482
So in other words, the Person's prototype property
151

151

00:07:26.482  -->  00:07:28.565
is the prototype of John.
152

152

00:07:29.570  -->  00:07:31.317
And that's not even all,
153

153

00:07:31.317  -->  00:07:33.780
because the Person object itself
154

154

00:07:33.780  -->  00:07:37.028
is an instance of an even bigger constructor,
155

155

00:07:37.028  -->  00:07:39.187
which is the Object object.
156

156

00:07:39.187  -->  00:07:41.023
Yeah, that sounds a bit crazy,
157

157

00:07:41.023  -->  00:07:43.172
but this is actually how it works.
158

158

00:07:43.172  -->  00:07:46.495
Each and every object that we ever create
159

159

00:07:46.495  -->  00:07:49.454
is an instance of the Object constructor
160

160

00:07:49.454  -->  00:07:53.828
which has a bunch of methods in its prototype property.
161

161

00:07:53.828  -->  00:07:56.861
And, as you can guess, the Person object inherits
162

162

00:07:56.861  -->  00:07:59.509
these methods and can call them.
163

163

00:07:59.509  -->  00:08:03.321
Plus, the john object also inherits these methods
164

164

00:08:03.321  -->  00:08:05.564
and can also use them.
165

165

00:08:05.564  -->  00:08:07.840
And, with that, we have actually
166

166

00:08:07.840  -->  00:08:10.831
explained the prototype chain.
167

167

00:08:10.831  -->  00:08:13.759
So, the prototype chain is what makes
168

168

00:08:13.759  -->  00:08:16.097
all this inheritance possible,
169

169

00:08:16.097  -->  00:08:18.367
and here is how it works.
170

170

00:08:18.367  -->  00:08:21.224
When we try to access a certain method,
171

171

00:08:21.224  -->  00:08:24.341
or property on an object, JavaScript will
172

172

00:08:24.341  -->  00:08:28.481
first try to find that method on that exact object.
173

173

00:08:28.481  -->  00:08:30.761
But if it cannot find it, it will look
174

174

00:08:30.761  -->  00:08:33.762
in the object's prototype, which is the prototype
175

175

00:08:33.762  -->  00:08:36.243
property of its parent.
176

176

00:08:36.243  -->  00:08:39.526
So it moves up in the prototype chain.
177

177

00:08:39.526  -->  00:08:41.718
If the method is still not there,
178

178

00:08:41.718  -->  00:08:43.602
this continues until there is no more
179

179

00:08:43.602  -->  00:08:47.022
prototype to look at, which is null.
180

180

00:08:47.022  -->  00:08:50.276
Null is the only one that has no prototype,
181

181

00:08:50.276  -->  00:08:54.289
and is therefore the final link in the prototype chain.
182

182

00:08:54.289  -->  00:08:57.673
And in this case, undefined is returned.
183

183

00:08:57.673  -->  00:09:00.268
This is the reason why, for example,
184

184

00:09:00.268  -->  00:09:03.977
the john object could call the hasOwnProperty method
185

185

00:09:03.977  -->  00:09:07.977
that is stored in the Object Prototype property.
186

186

00:09:09.302  -->  00:09:11.957
And since this is all so crazy important
187

187

00:09:11.957  -->  00:09:14.885
I even took the time to write down a summary for you
188

188

00:09:14.885  -->  00:09:17.963
about the most important things about prototypes,
189

189

00:09:17.963  -->  00:09:20.233
so that you can copy it if you want.
190

190

00:09:20.233  -->  00:09:22.182
So here it goes:
191

191

00:09:22.182  -->  00:09:26.044
Every JavaScript object has a prototype property,
192

192

00:09:26.044  -->  00:09:30.667
which makes inheritance possible in JavaScript.
193

193

00:09:30.667  -->  00:09:33.053
The prototype property of an object
194

194

00:09:33.053  -->  00:09:35.836
is where we put methods and properties
195

195

00:09:35.836  -->  00:09:39.003
that we want other objects to inherit.
196

196

00:09:40.141  -->  00:09:42.814
The Constructor's prototype property
197

197

00:09:42.814  -->  00:09:46.234
is not the prototype of the Constructor itself,
198

198

00:09:46.234  -->  00:09:49.385
but it's the prototype of all instances
199

199

00:09:49.385  -->  00:09:51.814
that are created through it.
200

200

00:09:51.814  -->  00:09:54.912
When a certain method, or property, is called,
201

201

00:09:54.912  -->  00:09:58.169
the search starts in the object itself,
202

202

00:09:58.169  -->  00:10:00.087
and if it cannot be found there,
203

203

00:10:00.087  -->  00:10:04.581
the search moves up on to the object's prototype.
204

204

00:10:04.581  -->  00:10:07.697
This continues until the method is found.
205

205

00:10:07.697  -->  00:10:10.648
And this is the prototype chain.
206

206

00:10:10.648  -->  00:10:13.399
Alright, so this is it about objects, inheritance
207

207

00:10:13.399  -->  00:10:16.313
and prototypes in JavaScript.
208

208

00:10:16.313  -->  00:10:20.480
I promise that we'll now finally go back to our code.
