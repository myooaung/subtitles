WEBVTT
1
1

00:00:01.171  -->  00:00:02.455
<v Instructor>In this video, you will learn</v>
2

2

00:00:02.455  -->  00:00:06.245
about the fundamental concept of variables.
3

3

00:00:06.245  -->  00:00:08.689
Variables are a fundamental concept of
4

4

00:00:08.689  -->  00:00:11.265
every programming language in the world,
5

5

00:00:11.265  -->  00:00:13.801
but what actually is a variable?
6

6

00:00:13.801  -->  00:00:16.968
Well, we can say that a variable is like a container
7

7

00:00:16.968  -->  00:00:19.637
in which we can store a value in order to use it
8

8

00:00:19.637  -->  00:00:22.894
over and over again in our code, instead of having
9

9

00:00:22.894  -->  00:00:26.817
to write the value each time that want to use it.
10

10

00:00:26.817  -->  00:00:29.124
So let's actually get rid of this code here,
11

11

00:00:29.124  -->  00:00:30.644
and let me show you how to declare
12

12

00:00:30.644  -->  00:00:33.577
a variable for the very first time.
13

13

00:00:33.577  -->  00:00:36.040
We have to use the var keyword
14

14

00:00:36.040  -->  00:00:38.851
and then the name of the variable
15

15

00:00:38.851  -->  00:00:42.078
and I'm going to call this one firstName,
16

16

00:00:42.078  -->  00:00:44.269
then equal, and then the value that you want
17

17

00:00:44.269  -->  00:00:46.112
to assign to the variable.
18

18

00:00:46.112  -->  00:00:48.248
In this case, what I want to assign is a
19

19

00:00:48.248  -->  00:00:50.248
text string called John,
20

20

00:00:51.500  -->  00:00:54.402
and then again, our semicolon at the end.
21

21

00:00:54.402  -->  00:00:58.261
And so with this, we just declared our very first variable.
22

22

00:00:58.261  -->  00:01:01.348
The variable name here is firstName, and the value that
23

23

00:01:01.348  -->  00:01:04.667
we assigned to that variable is John.
24

24

00:01:04.667  -->  00:01:07.274
So you can basically think of this variable,
25

25

00:01:07.274  -->  00:01:09.867
this firstName variable here, as a piece of memory
26

26

00:01:09.867  -->  00:01:14.502
in your computer in which this John string here is stored.
27

27

00:01:14.502  -->  00:01:16.798
I use these quotes here to declare
28

28

00:01:16.798  -->  00:01:19.798
this text here, so this string.
29

29

00:01:19.798  -->  00:01:22.269
I could also have used the double quotes, like this,
30

30

00:01:22.269  -->  00:01:23.946
but I think it's a bit more modern to
31

31

00:01:23.946  -->  00:01:26.925
simply use these single quotes.
32

32

00:01:26.925  -->  00:01:28.913
When we declare some text, we usually just use
33

33

00:01:28.913  -->  00:01:32.155
the single quotes just like this here.
34

34

00:01:32.155  -->  00:01:34.635
Throughout the section here, I will be using variables
35

35

00:01:34.635  -->  00:01:37.576
about persons for all the examples, so stuff like
36

36

00:01:37.576  -->  00:01:41.564
names or jobs or age or something like this.
37

37

00:01:41.564  -->  00:01:44.156
So, something we find: persons.
38

38

00:01:44.156  -->  00:01:46.823
Let's now do again a console.log
39

39

00:01:47.968  -->  00:01:49.310
and what we're gonna log now is
40

40

00:01:49.310  -->  00:01:51.810
simply the firstName variable.
41

41

00:01:53.103  -->  00:01:54.490
And so what do you think will happen
42

42

00:01:54.490  -->  00:01:57.395
when we reload our page now?
43

43

00:01:57.395  -->  00:01:59.016
Let's take a look at that.
44

44

00:01:59.016  -->  00:02:02.028
And indeed, you see John now logged to our console
45

45

00:02:02.028  -->  00:02:05.433
and that's because we assigned John to this variable
46

46

00:02:05.433  -->  00:02:07.585
and then JavaScript can retrieve the value
47

47

00:02:07.585  -->  00:02:11.024
of this variable here, which we declared as John.
48

48

00:02:11.024  -->  00:02:15.528
And so firstName here is effectively the same as John, okay?
49

49

00:02:15.528  -->  00:02:17.149
Did that make sense?
50

50

00:02:17.149  -->  00:02:19.933
Let's all declare another one, and again, we have
51

51

00:02:19.933  -->  00:02:22.984
to use var and now let's say
52

52

00:02:22.984  -->  00:02:26.268
lastName, equal, then again I use these quotes,
53

53

00:02:26.268  -->  00:02:29.185
and then let's say that it's Smith.
54

54

00:02:30.082  -->  00:02:31.577
So John Smith.
55

55

00:02:31.577  -->  00:02:34.481
That's the lastName, amd let's declare another one
56

56

00:02:34.481  -->  00:02:39.244
called age and let's say that John is 28 years old.
57

57

00:02:39.244  -->  00:02:42.374
So you see that now it's no longer a string
58

58

00:02:42.374  -->  00:02:45.247
like we had here, but it's now a number.
59

59

00:02:45.247  -->  00:02:48.322
And so that means that it's a different data type.
60

60

00:02:48.322  -->  00:02:51.353
Here we have text, but here we have numbers.
61

61

00:02:51.353  -->  00:02:54.250
This is a good time to actually talk about
62

62

00:02:54.250  -->  00:02:57.286
different data types in JavaScript.
63

63

00:02:57.286  -->  00:03:00.269
In JavaScript, there are five different data types:
64

64

00:03:00.269  -->  00:03:04.039
Number, String, Boolean, Undefined and Null.
65

65

00:03:04.039  -->  00:03:07.880
So far, we have already seen the Number and the String.
66

66

00:03:07.880  -->  00:03:10.516
Now primitive data type just means that it's not for
67

67

00:03:10.516  -->  00:03:13.252
objects, unlike most things in JavaScript.
68

68

00:03:13.252  -->  00:03:17.663
So they are just simple, primitive, non-object data types.
69

69

00:03:17.663  -->  00:03:21.435
First off, we have Numbers, and JavaScript numbers
70

70

00:03:21.435  -->  00:03:24.698
are always floating point numbers, which simply means
71

71

00:03:24.698  -->  00:03:26.780
that they always have decimals, even if we
72

72

00:03:26.780  -->  00:03:30.210
sometimes don't see or even don't define them.
73

73

00:03:30.210  -->  00:03:34.040
For example, five, it's like having five point zero.
74

74

00:03:34.040  -->  00:03:36.386
In other programming languages, many times it
75

75

00:03:36.386  -->  00:03:38.713
doesn't work like this and you have different
76

76

00:03:38.713  -->  00:03:42.453
data types for integers and decimals, but not in JavaScript.
77

77

00:03:42.453  -->  00:03:44.952
So here, all numbers are simply float numbers
78

78

00:03:44.952  -->  00:03:47.038
even if they look like integers.
79

79

00:03:47.038  -->  00:03:49.774
Next up, we have Strings which are simply
80

80

00:03:49.774  -->  00:03:52.038
a sequence of characters and so they are
81

81

00:03:52.038  -->  00:03:55.724
just used for text like, with the example before,
82

82

00:03:55.724  -->  00:03:57.778
with the last name and the first name.
83

83

00:03:57.778  -->  00:04:01.391
Next up, the Boolean data type is a logical data type
84

84

00:04:01.391  -->  00:04:05.489
that can only take one of the logical values true or false.
85

85

00:04:05.489  -->  00:04:10.316
To make it simple, a Boolean is always either true or false.
86

86

00:04:10.316  -->  00:04:12.513
And we will see why this is very important
87

87

00:04:12.513  -->  00:04:15.242
over the next lectures.
88

88

00:04:15.242  -->  00:04:17.909
The next one is a bit more difficult to understand.
89

89

00:04:17.909  -->  00:04:20.747
Basically, Undefined is the data type that is
90

90

00:04:20.747  -->  00:04:22.851
automatically assigned to a variable
91

91

00:04:22.851  -->  00:04:24.939
that doesn't have a value yet.
92

92

00:04:24.939  -->  00:04:27.335
Sounds a bit more complicated than it actually is,
93

93

00:04:27.335  -->  00:04:31.190
and don't worry, I'm gonna show it to you a bit later.
94

94

00:04:31.190  -->  00:04:33.657
What matters here for now is that, basically,
95

95

00:04:33.657  -->  00:04:36.074
Undefined means non-existent.
96

96

00:04:37.333  -->  00:04:40.217
And finally, there is another data type which is
97

97

00:04:40.217  -->  00:04:43.393
quite similar to Undefined and that is Null.
98

98

00:04:43.393  -->  00:04:45.539
Null also means non-existent,
99

99

00:04:45.539  -->  00:04:47.684
but it's slightly more specific.
100

100

00:04:47.684  -->  00:04:50.992
Again, we will talk more about this later on.
101

101

00:04:50.992  -->  00:04:53.430
Before we move on, there's something very important
102

102

00:04:53.430  -->  00:04:55.188
to note here which is that
103

103

00:04:55.188  -->  00:04:58.288 line:15% 
JavaScript has a feature called dynamic typing,
104

104

00:04:58.288  -->  00:05:00.860 line:15% 
and this means that we do not have to manually define
105

105

00:05:00.860  -->  00:05:03.285 line:15% 
the data type off a variable like in
106

106

00:05:03.285  -->  00:05:05.461 line:15% 
many other programming languages.
107

107

00:05:05.461  -->  00:05:07.861 line:15% 
Basically, JavaScript automatically figures out if a
108

108

00:05:07.861  -->  00:05:11.011 line:15% 
variable is a string or a number or if it's undefined
109

109

00:05:11.011  -->  00:05:13.996 line:15% 
or Boolean, and then assigns the data type to the variable
110

110

00:05:13.996  -->  00:05:16.832 line:15% 
without us having to do anything.
111

111

00:05:16.832  -->  00:05:18.659 line:15% 
And if we then later assign another value
112

112

00:05:18.659  -->  00:05:21.445 line:15% 
to the same variable but with another data type,
113

113

00:05:21.445  -->  00:05:23.466 line:15% 
then JavaScript will automatically change
114

114

00:05:23.466  -->  00:05:25.526 line:15% 
the data type of the variable as well.
115

115

00:05:25.526  -->  00:05:27.528 line:15% 
This can, of course, be very useful and save us
116

116

00:05:27.528  -->  00:05:30.547 line:15% 
some coding time, but it can also be the source of
117

117

00:05:30.547  -->  00:05:34.795 line:15% 
some difficult-to-find bugs, which means errors in our code.
118

118

00:05:34.795  -->  00:05:36.400 line:15% 
So we almost have to be careful
119

119

00:05:36.400  -->  00:05:38.865 line:15% 
with what we do with our variables.
120

120

00:05:38.865  -->  00:05:41.283 line:15% 
All right, and that's it, now let's actually see these
121

121

00:05:41.283  -->  00:05:44.907 line:15% 
things in action again, and move back to our code.
122

122

00:05:44.907  -->  00:05:47.543
To show you the Boolean data type, let's create a variable
123

123

00:05:47.543  -->  00:05:50.288
here called fullAge,
124

124

00:05:50.288  -->  00:05:53.405
so var, fullAge,
125

125

00:05:53.405  -->  00:05:55.155
and then say true.
126

126

00:05:56.031  -->  00:05:59.166
Remember that Booleans can only be true or false,
127

127

00:05:59.166  -->  00:06:02.798
so in here we can simply say true or false.
128

128

00:06:02.798  -->  00:06:05.103
I could of course also have written false,
129

129

00:06:05.103  -->  00:06:07.395
but in this case, well John is of course
130

130

00:06:07.395  -->  00:06:10.412
of full age which is 28 age.
131

131

00:06:10.412  -->  00:06:13.412
Now let's take a look at the console
132

132

00:06:14.712  -->  00:06:16.801
when we log this variable here.
133

133

00:06:16.801  -->  00:06:20.967
So fullAge, semicolon, and then reload it.
134

134

00:06:20.967  -->  00:06:23.681
Now you see here that it's true.
135

135

00:06:23.681  -->  00:06:25.973
It also appears in this lively different color here,
136

136

00:06:25.973  -->  00:06:30.800
this one is blue, and the John string here is black.
137

137

00:06:30.800  -->  00:06:33.429
Here it also looks a bit different, so this of course
138

138

00:06:33.429  -->  00:06:36.538
is not in quotes, we simply write out true like this
139

139

00:06:36.538  -->  00:06:39.578
because it's a reserved JavaScript keyword.
140

140

00:06:39.578  -->  00:06:41.632
Now before we move on in this lecture, I wanna
141

141

00:06:41.632  -->  00:06:45.176
quickly talk about these variable names here.
142

142

00:06:45.176  -->  00:06:48.459
It's a best practice in always giving our variables
143

143

00:06:48.459  -->  00:06:50.697
meaningful names, instead of simply writing
144

144

00:06:50.697  -->  00:06:55.127
something like x or abc or something like that.
145

145

00:06:55.127  -->  00:06:57.097
We should never do that, we should always say in our
146

146

00:06:57.097  -->  00:06:59.849
variables what we actually want, or what this
147

147

00:06:59.849  -->  00:07:03.762
variable actually means, so in this case here we have
148

148

00:07:03.762  -->  00:07:06.679
John and that's a first name so we called this variable
149

149

00:07:06.679  -->  00:07:10.421
firstName, and not just some random sequence of characters.
150

150

00:07:10.421  -->  00:07:14.563
And the same, of course, for lastName, age, and fullAge.
151

151

00:07:14.563  -->  00:07:17.022
So again, that's a best practice.
152

152

00:07:17.022  -->  00:07:20.064
Of course it would work the same if we say a,
153

153

00:07:20.064  -->  00:07:22.853
for example, and a here.
154

154

00:07:22.853  -->  00:07:24.503
If we now log it through console, then of course
155

155

00:07:24.503  -->  00:07:27.649
John is still here, but again, we want our
156

156

00:07:27.649  -->  00:07:30.638
variable names here to really have some meaning.
157

157

00:07:30.638  -->  00:07:33.528
Then this way of writing the variable name with this
158

158

00:07:33.528  -->  00:07:36.773
first word here, and then the name, where I separated
159

159

00:07:36.773  -->  00:07:39.370
them with a capital letter, that's the
160

160

00:07:39.370  -->  00:07:41.954
so-called camelcase notation.
161

161

00:07:41.954  -->  00:07:44.508
So we could have done it like this, so firstname
162

162

00:07:44.508  -->  00:07:46.609
all together, but then it would be kind of difficult
163

163

00:07:46.609  -->  00:07:49.866
to find where the second word starts.
164

164

00:07:49.866  -->  00:07:52.852
We could also have done it like, with an underscore,
165

165

00:07:52.852  -->  00:07:55.102
but in JavaScript it's kind of a convention
166

166

00:07:55.102  -->  00:07:58.125
to use the camelcase notation, like this.
167

167

00:07:58.125  -->  00:08:01.015
So we start with a small letter in the beginning,
168

168

00:08:01.015  -->  00:08:02.527
and then when we have a second word,
169

169

00:08:02.527  -->  00:08:04.858
then that one starts with a capital letter.
170

170

00:08:04.858  -->  00:08:07.243
In the case of age here, for example, that's not the case
171

171

00:08:07.243  -->  00:08:09.361
because we only have one word, but then here again
172

172

00:08:09.361  -->  00:08:13.945
in fullAge, we have the second word with this capital A.
173

173

00:08:13.945  -->  00:08:17.033
That's not about the JavaScript functionality itself,
174

174

00:08:17.033  -->  00:08:20.708
that's more of a programming convention and a best practice.
175

175

00:08:20.708  -->  00:08:23.541
Moving on, let's define yet another one,
176

176

00:08:23.541  -->  00:08:25.765
and this one I'm going to call job.
177

177

00:08:25.765  -->  00:08:27.020
Now the difference here is that I'm
178

178

00:08:27.020  -->  00:08:30.216
not going to assign anything to this variable.
179

179

00:08:30.216  -->  00:08:34.314
So I can declare a variable but not assign a value to it.
180

180

00:08:34.314  -->  00:08:36.846
So let's see what happens when we
181

181

00:08:36.846  -->  00:08:39.731
now take a look at this variable.
182

182

00:08:39.731  -->  00:08:41.898
Can you guess what's going to happen here?
183

183

00:08:41.898  -->  00:08:43.522
I hope you can.
184

184

00:08:43.522  -->  00:08:46.157
Indeed what we see here is now undefined
185

185

00:08:46.157  -->  00:08:49.117
coming from script dot js at line 11.
186

186

00:08:49.117  -->  00:08:52.120
So this line here prints undefined to the console,
187

187

00:08:52.120  -->  00:08:54.101
and remember that when I showed you that slide,
188

188

00:08:54.101  -->  00:08:56.883
I mentioned that undefined means non-existent,
189

189

00:08:56.883  -->  00:08:58.392
and so that's the case.
190

190

00:08:58.392  -->  00:09:00.769
So, we declared the variable but we didn't assign
191

191

00:09:00.769  -->  00:09:04.229
any value to it, and so therefore, job is simply
192

192

00:09:04.229  -->  00:09:07.129 line:15% 
undefined, and so that's what we see in the console.
193

193

00:09:07.129  -->  00:09:10.683
We can then later go ahead and assign something to it.
194

194

00:09:10.683  -->  00:09:12.933
So let's say job is teacher
195

195

00:09:16.258  -->  00:09:18.007
and if you do the console log then again,
196

196

00:09:18.007  -->  00:09:19.882
and let's just copy it here,
197

197

00:09:19.882  -->  00:09:22.757 line:15% 
well, then we should see the Teacher.
198

198

00:09:22.757  -->  00:09:24.148 line:15% 
And here we go.
199

199

00:09:24.148  -->  00:09:26.999 line:15% 
So, from line 14 comes the teacher after
200

200

00:09:26.999  -->  00:09:30.923 line:15% 
we have declared it here in this line above.
201

201

00:09:30.923  -->  00:09:35.156
So we have strings here, we have numbers, we have a Boolean,
202

202

00:09:35.156  -->  00:09:38.592
and we have also the undefined right here.
203

203

00:09:38.592  -->  00:09:40.769
These four are the most important data types
204

204

00:09:40.769  -->  00:09:42.175
that I wanted to show you.
205

205

00:09:42.175  -->  00:09:44.575
Just to finish off this lecture very quickly,
206

206

00:09:44.575  -->  00:09:46.724
I want to show you some rules that we have to
207

207

00:09:46.724  -->  00:09:49.163
keep in mind when we name our variables.
208

208

00:09:49.163  -->  00:09:51.617
I already talked about the best practices when
209

209

00:09:51.617  -->  00:09:54.307
naming them with this camelcase notation that
210

210

00:09:54.307  -->  00:09:56.761
I explained before, but that was not really a rule,
211

211

00:09:56.761  -->  00:09:58.354
that was more of a best practice.
212

212

00:09:58.354  -->  00:10:00.205
Actually there are also some rules
213

213

00:10:00.205  -->  00:10:02.406
that we have to keep in mind.
214

214

00:10:02.406  -->  00:10:04.594
Don't worry, they're actually very simple.
215

215

00:10:04.594  -->  00:10:06.734
All you have to know is that variables cannot
216

216

00:10:06.734  -->  00:10:09.202
start with numbers or symbols, except for
217

217

00:10:09.202  -->  00:10:12.756
the dollar sign or an underscore.
218

218

00:10:12.756  -->  00:10:17.189
Let's try to break some of these rules to see what happens.
219

219

00:10:17.189  -->  00:10:20.616
So, var, and I'm going to start a variable with a three,
220

220

00:10:20.616  -->  00:10:22.116
so, with a number,
221

221

00:10:24.085  -->  00:10:27.215
so let's try to say 3years equals 3
222

222

00:10:27.215  -->  00:10:29.819
and then we load the console and now you see that
223

223

00:10:29.819  -->  00:10:32.816
we get an error here in line 16.
224

224

00:10:32.816  -->  00:10:35.435
So this is here, not valid, and again, because
225

225

00:10:35.435  -->  00:10:38.707
we cannot start a variable name with a number.
226

226

00:10:38.707  -->  00:10:40.961
So I'm showing you this in case you start naming
227

227

00:10:40.961  -->  00:10:43.537
your own variables, you don't run into these errors
228

228

00:10:43.537  -->  00:10:46.354
and then cannot figure out what this here means.
229

229

00:10:46.354  -->  00:10:49.032
So always take care and use these rules
230

230

00:10:49.032  -->  00:10:50.476
that I'm showing you here.
231

231

00:10:50.476  -->  00:10:52.512
Now if you wanted to fix this here, we would either have to
232

232

00:10:52.512  -->  00:10:57.330
start with a number or with a dollar sign or an underscore.
233

233

00:10:57.330  -->  00:10:59.273
These are the only symbols that can appear
234

234

00:10:59.273  -->  00:11:01.792
in a variable name here in JavaScript.
235

235

00:11:01.792  -->  00:11:05.921
For example, with the underscore, it would work just fine.
236

236

00:11:05.921  -->  00:11:09.411
With the dollar sign as well, but as soon as I start
237

237

00:11:09.411  -->  00:11:11.966
putting something else like this,
238

238

00:11:11.966  -->  00:11:15.686
well, then again we get the error here.
239

239

00:11:15.686  -->  00:11:17.660
And the same actually happens if I use a symbol
240

240

00:11:17.660  -->  00:11:19.885
in the middle of a variable name.
241

241

00:11:19.885  -->  00:11:24.302
So, something like john/mark, for example,
242

242

00:11:27.056  -->  00:11:29.795
John and MArk, and you will see that
243

243

00:11:29.795  -->  00:11:32.752
this here is not going to work again.
244

244

00:11:32.752  -->  00:11:35.980
Okay, so we have an error here at line 17 now.
245

245

00:11:35.980  -->  00:11:39.311
Now, of course, but I want the error now on line 18
246

246

00:11:39.311  -->  00:11:40.464
so let's take a look at that.
247

247

00:11:40.464  -->  00:11:44.535
And of course, it says unexpected token which is this one,
248

248

00:11:44.535  -->  00:11:46.308
so in this case, we would of course, use the
249

249

00:11:46.308  -->  00:11:49.661
camelcase notation here to make it a lot better,
250

250

00:11:49.661  -->  00:11:52.569
and so now we don't have any error here anymore.
251

251

00:11:52.569  -->  00:11:56.143
That was the first rule that, again, all variable names
252

252

00:11:56.143  -->  00:11:58.610
must start with either an underscore,
253

253

00:11:58.610  -->  00:12:01.694
a dollar sign, or a letter here.
254

254

00:12:01.694  -->  00:12:04.175
And in the second, and last rule, is that we cannot use
255

255

00:12:04.175  -->  00:12:08.075
reserved JavaScript keywords as variable names.
256

256

00:12:08.075  -->  00:12:11.724
Something like function, for example, is not going to work.
257

257

00:12:11.724  -->  00:12:14.589
So function equals 23, for example,
258

258

00:12:14.589  -->  00:12:17.692
and this will not really work.
259

259

00:12:17.692  -->  00:12:21.004
So you see, unexpected token function.
260

260

00:12:21.004  -->  00:12:23.406
We can also not use something like delete
261

261

00:12:23.406  -->  00:12:25.156
which is also reserved keyword.
262

262

00:12:25.156  -->  00:12:26.897
And you will meet many of these keywords here
263

263

00:12:26.897  -->  00:12:29.181
throughout the course, of course, but right now
264

264

00:12:29.181  -->  00:12:30.947
just know that any of these keywords that we're
265

265

00:12:30.947  -->  00:12:34.856
gonna use later, something like if, for example,
266

266

00:12:34.856  -->  00:12:38.266
you'll not be able to use these as variable names.
267

267

00:12:38.266  -->  00:12:41.607
So variable names really need to be our own made-up words,
268

268

00:12:41.607  -->  00:12:42.846
and not the words that JavaScript
269

269

00:12:42.846  -->  00:12:44.938
already uses in its language.
270

270

00:12:44.938  -->  00:12:47.238
And, all right, that's actually all there is to know
271

271

00:12:47.238  -->  00:12:50.712
about the fundamentals of variables and data types.
272

272

00:12:50.712  -->  00:12:53.230
That's already a huge step forward and a very important
273

273

00:12:53.230  -->  00:12:55.959
concept in any programming language of the world.
274

274

00:12:55.959  -->  00:12:58.142
In the next video, we're gonna dive a bit deeper
275

275

00:12:58.142  -->  00:13:00.993
into variables and do some more stuff with them,
276

276

00:13:00.993  -->  00:13:03.826
so stay tuned for that next video.
