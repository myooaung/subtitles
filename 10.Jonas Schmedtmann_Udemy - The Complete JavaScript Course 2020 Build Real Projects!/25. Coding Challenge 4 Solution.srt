1
1

00:00:00,925  -->  00:00:03,521
<v Jonas>So, did you manage to successfully complete</v>
2

2

00:00:03,521  -->  00:00:07,448
the challenge? Well here is the way that I did it.
3

3

00:00:07,448  -->  00:00:11,249
So, I'm going to start by creating the 'john' object
4

4

00:00:11,249  -->  00:00:14,640
with the object literal syntax,
5

5

00:00:14,640  -->  00:00:17,941
let's give it some more space down here.
6

6

00:00:17,941  -->  00:00:18,774
Alright,
7

7

00:00:19,765  -->  00:00:22,298
so then the full name property
8

8

00:00:22,298  -->  00:00:24,631
will be: 'John Smith'.
9

9

00:00:27,625  -->  00:00:32,458
Then the 'mass' is 92kg
10

10

00:00:33,924  -->  00:00:35,707
and the 'height' is
11

11

00:00:35,707  -->  00:00:39,798
1m and 95cm, so one ninety five
12

12

00:00:39,798  -->  00:00:41,568
and then we need to calculate
13

13

00:00:41,568  -->  00:00:45,427
BMI method, so this is the trickier part, right, but its
14

14

00:00:45,427  -->  00:00:49,305
still not really difficult, okay. So we use a 'function'
15

15

00:00:49,305  -->  00:00:51,923
without any argument and that's because we are gonna read
16

16

00:00:51,923  -->  00:00:56,554
the 'mass' and the 'height' both from the current 'object'.
17

17

00:00:56,554  -->  00:00:58,820
So, how are we going to do this?
18

18

00:00:58,820  -->  00:01:00,992
Well, the formula is
19

19

00:01:00,992  -->  00:01:03,825
'this' dot 'mass' okay,
20

20

00:01:04,784  -->  00:01:07,176
divided by
21

21

00:01:07,176  -->  00:01:11,062
'this' dot 'height' times 'this'
22

22

00:01:11,062  -->  00:01:15,451
dot 'height' so the 'height' squared, okay, so remember the
23

23

00:01:15,451  -->  00:01:19,523
'this' here means the current 'object' so it will read the
24

24

00:01:19,523  -->  00:01:21,748
'mass' from the current 'john' 'object'
25

25

00:01:21,748  -->  00:01:24,081
and so the 'mass' here will be 92
26

26

00:01:24,081  -->  00:01:27,882
and then the same here for 'this' dot 'height' and of
27

27

00:01:27,882  -->  00:01:32,686
course 'this' here as well. So, here it will be 1.95 times
28

28

00:01:32,686  -->  00:01:35,402
1.95 and where do we want to store this result?
29

29

00:01:35,402  -->  00:01:38,952
Well, it would be in this dot BMI.
30

30

00:01:38,952  -->  00:01:40,889
So, remember, we can not only
31

31

00:01:40,889  -->  00:01:45,172
read properties from the object using 'this' we can also set
32

32

00:01:45,172  -->  00:01:49,542
them. And so here set 'this' dot BMI shall be a result of
33

33

00:01:49,542  -->  00:01:54,071
this formula, okay. And that's actually it, so we calculate
34

34

00:01:54,071  -->  00:01:58,224
the BMI then remember here from the text that we should
35

35

00:01:58,224  -->  00:02:02,351
also return it. So, save the BMI to the object and also
36

36

00:02:02,351  -->  00:02:05,184
return it from the method. And so,
37

37

00:02:06,751  -->  00:02:10,270
return 'this' dot BMI,
38

38

00:02:10,270  -->  00:02:13,710
okay, so that's 'john' and now I'm just going to go ahead
39

39

00:02:13,710  -->  00:02:16,460
and copy it for 'mark'
40

40

00:02:18,291  -->  00:02:20,100
because the method is actually going
41

41

00:02:20,100  -->  00:02:24,112
to be exactly the same, obviously, okay so its going to have
42

42

00:02:24,112  -->  00:02:27,194
no difference. The formula and everything works just the
43

43

00:02:27,194  -->  00:02:30,219
exact same way and so we have the exact same method on
44

44

00:02:30,219  -->  00:02:34,069
the 'mark' object. Here its Mark Miller
45

45

00:02:34,069  -->  00:02:37,157
then the mass is just 78
46

46

00:02:37,157  -->  00:02:39,690
and the height is
47

47

00:02:39,690  -->  00:02:42,233
1.69, okay, and as I mentioned
48

48

00:02:42,233  -->  00:02:46,168
the rest stays the same, so we are now ready to calculate
49

49

00:02:46,168  -->  00:02:51,168
the BMI for both of them, so 'john' dot 'calc' BMI, remember
50

50

00:02:51,231  -->  00:02:55,898
that's how we call methods and then the same for 'mark'.
51

51

00:02:58,005  -->  00:02:59,307
Okay.
52

52

00:02:59,307  -->  00:03:04,202
And so, yeah lets take a look at these two objects actually.
53

53

00:03:04,202  -->  00:03:07,419
So, 'console' dot 'log'
54

54

00:03:07,419  -->  00:03:09,278
both 'john' and 'mark',
55

55

00:03:09,278  -->  00:03:11,911
So, we want to get both of these 'objects' here
56

56

00:03:11,911  -->  00:03:14,784
into our 'console'. So, here they are.
57

57

00:03:14,784  -->  00:03:18,250
And we see that both of them now have their BMI
58

58

00:03:18,250  -->  00:03:19,571
so John has a 24
59

59

00:03:19,571  -->  00:03:23,981
and Mark has a 27, so great. So, you see that its
60

60

00:03:23,981  -->  00:03:27,986
actually very nice to have a method directly attached to the
61

61

00:03:27,986  -->  00:03:31,230
'object' because this function is really related to this
62

62

00:03:31,230  -->  00:03:33,196
'object', to this person in this case.
63

63

00:03:33,196  -->  00:03:34,905
So, it makes sense that
64

64

00:03:34,905  -->  00:03:38,478
we can have the method really together with the data instead
65

65

00:03:38,478  -->  00:03:41,217
of having an external function which could do these
66

66

00:03:41,217  -->  00:03:45,330
calculations as well, okay. So that's why we make use of
67

67

00:03:45,330  -->  00:03:48,869
this pattern, lets say, this 'best practice' to have the
68

68

00:03:48,869  -->  00:03:53,318
methods inside of the 'object'. Now your probably thinking
69

69

00:03:53,318  -->  00:03:54,151
that having the exact same method on these two 'objects'
70

70

00:03:54,151  -->  00:03:59,151
kinda violates the drive principal that I showed you before
71

71

00:03:59,267  -->  00:04:02,096
so the don't 'repeat yourself principal'
72

72

00:04:02,096  -->  00:04:03,818
and that's actually correct
73

73

00:04:03,818  -->  00:04:06,936
so this is not the perfect way of doing it. But, for now,
74

74

00:04:06,936  -->  00:04:09,817
with the knowledge that we have at this point, this is the
75

75

00:04:09,817  -->  00:04:12,613
best that we can do. Later, in a more advanced section of
76

76

00:04:12,613  -->  00:04:15,361
the course, I am then going to teach you how we can have the
77

77

00:04:15,361  -->  00:04:18,307
exact same method on multiple objects without having to
78

78

00:04:18,307  -->  00:04:21,946
repeat the code. But for now this is more than okay like
79

79

00:04:21,946  -->  00:04:26,413
this, okay. So, finally we have to 'log' to the 'console',
80

80

00:04:26,413  -->  00:04:30,171
so what do we want to say? Who has the highest BMI together
81

81

00:04:30,171  -->  00:04:32,935
with the full name and the respective. Don't forget they
82

82

00:04:32,935  -->  00:04:36,177
might be like a draw, so the same BMI.
83

83

00:04:36,177  -->  00:04:39,702
We have done this many times before,
84

84

00:04:39,702  -->  00:04:42,072
so, 'john' dot BMI lets now read it here
85

85

00:04:42,072  -->  00:04:46,905
from the object if it's greater than 'mark' dot BMI,
86

86

00:04:49,072  -->  00:04:49,989
well,
87

87

00:04:52,877  -->  00:04:56,360
then lets 'log' to the 'console' that 'john' dot
88

88

00:04:56,360  -->  00:04:57,943
'first name', or
89

89

00:04:57,943  -->  00:05:00,610
actually it's 'full name'
90

90

00:05:03,767  -->  00:05:05,350
has a higher BMI of
91

91

00:05:08,183  -->  00:05:09,585
'add' and 'john'
92

92

00:05:09,585  -->  00:05:11,668
dot BMI to read it again.
93

93

00:05:13,768  -->  00:05:15,572
Alright now in 'else if' here
94

94

00:05:15,572  -->  00:05:18,420
because there can be the case where they both have the
95

95

00:05:18,420  -->  00:05:21,712
same and so we have to account for that as well. So,
96

96

00:05:21,712  -->  00:05:26,712
now its 'mark' dot BMI is larger than 'john' dot BMI
97

97

00:05:29,778  -->  00:05:33,161
and then lets just grab this piece here of code,
98

98

00:05:33,161  -->  00:05:34,328
paste it here.
99

99

00:05:36,993  -->  00:05:40,634
This should be 'mark', and this one as well.
100

100

00:05:40,634  -->  00:05:44,967
And then just the 'else' in case it is the same.
101

101

00:05:46,705  -->  00:05:49,538
'They have the same BMI'.
102

102

00:05:50,843  -->  00:05:54,736
Okay so, according to our data, Mark Miller has the
103

103

00:05:54,736  -->  00:05:58,089
highest BMI and in the 'it' that's exactly what we log to
104

104

00:05:58,089  -->  00:06:02,239
the 'console'. So 'mark' has 27 as you can see here
105

105

00:06:02,239  -->  00:06:03,805
and 'john' has 24.
106

106

00:06:03,805  -->  00:06:06,972
So lets now increase 'john's mass here
107

107

00:06:08,180  -->  00:06:10,993
to, lets say, 110
108

108

00:06:10,993  -->  00:06:13,100
and so now in the 'it'
109

109

00:06:13,100  -->  00:06:15,867
he has the larger BMI of both.
110

110

00:06:15,867  -->  00:06:20,032
So, it is already almost perfect but we can do
111

111

00:06:20,032  -->  00:06:23,781
even better, okay, so lets get first rid of this and what
112

112

00:06:23,781  -->  00:06:28,781
we can do is actually calculate the BMIs right here.
113

113

00:06:28,856  -->  00:06:32,850
So we calculate the BMIs using the 'calc' BMI function,
114

114

00:06:32,850  -->  00:06:34,516
of course, or the method,
115

115

00:06:34,516  -->  00:06:36,506
I should say. And then we use
116

116

00:06:36,506  -->  00:06:40,769
that data to take these decisions here but keep in mind
117

117

00:06:40,769  -->  00:06:44,410
that these methods they actually also return the BMI,
118

118

00:06:44,410  -->  00:06:48,910
so, we could replace 'john' dot BMI here by the method call
119

119

00:06:48,910  -->  00:06:52,636
so lets actually do that. So I'm going to actually cut it
120

120

00:06:52,636  -->  00:06:57,394
here and paste it down here and same for 'mark'.
121

121

00:06:57,394  -->  00:07:00,527
Alright, so does that make sense to you?
122

122

00:07:00,527  -->  00:07:03,769
So again, we know that this 'calc' BMI method here
123

123

00:07:03,769  -->  00:07:05,851
will 'return' the BMI themselves,
124

124

00:07:05,851  -->  00:07:09,596
we have it here, so 'return' 'this' dot BMI. So, down
125

125

00:07:09,596  -->  00:07:13,119
here we will calculate the BMI and then immediately 'return'
126

126

00:07:13,119  -->  00:07:18,040
it and it will then be put here in this logical comparison.
127

127

00:07:18,040  -->  00:07:21,240
The same of course for 'mark', in this case,
128

128

00:07:21,240  -->  00:07:25,170
'this' here will then be replaced with 27.3,
129

129

00:07:25,170  -->  00:07:27,427
which is what we see here and
130

130

00:07:27,427  -->  00:07:31,369
this 'john' dot 'calc' BMI will be 28.9,
131

131

00:07:31,369  -->  00:07:32,690
right, so this 'value' here.
132

132

00:07:32,690  -->  00:07:35,690
Then the comparison can happen and everything can just
133

133

00:07:35,690  -->  00:07:39,213
work the same. So we don't need these additional lines
134

134

00:07:39,213  -->  00:07:42,842
where we first calculate the BMI and only then we read it.
135

135

00:07:42,842  -->  00:07:47,270
So we can basically calculate it and read at the same time.
136

136

00:07:47,270  -->  00:07:50,509
Here then we can read it already because at this point it is
137

137

00:07:50,509  -->  00:07:53,803
already calculated and so of course we are not going to
138

138

00:07:53,803  -->  00:07:56,928
call BMI method again. We only want to call it once and
139

139

00:07:56,928  -->  00:07:59,961
then from there on we can just directly read the 'value'
140

140

00:07:59,961  -->  00:08:01,211
from the 'object'
141

141

00:08:01,211  -->  00:08:04,253
so we are not going to put 'calc' BMI here or here
142

142

00:08:04,253  -->  00:08:07,577
because at this point, again, it is already calculated.
143

143

00:08:07,577  -->  00:08:10,004
Does that make sense to you? Of course, again, you
144

144

00:08:10,004  -->  00:08:12,538
wouldn't have to do it this way so its not really
145

145

00:08:12,538  -->  00:08:15,034
important but that's actually the reason why I asked
146

146

00:08:15,034  -->  00:08:18,300
you to also 'return' the 'values' here from the methods so
147

147

00:08:18,300  -->  00:08:21,436
that we can then use this little trick where we can
148

148

00:08:21,436  -->  00:08:25,899
calculate and compare the 'values' here all in one take.
149

149

00:08:25,899  -->  00:08:29,342
Just to confirm that it works the same of course,
150

150

00:08:29,342  -->  00:08:32,140
here we go, with the correct solution, great.
151

151

00:08:32,140  -->  00:08:34,680
So, we are almost at the end of the section,
152

152

00:08:34,680  -->  00:08:36,738
there is just one more thing to learn,
153

153

00:08:36,738  -->  00:08:40,384
which is the 'Loops' and 'Iteration' which is exactly what
154

154

00:08:40,384  -->  00:08:43,167
we are going to do in the next video.
155

155

00:08:43,167  -->  00:08:47,084
I hope you enjoyed this one, see you next time.
