1
1

00:00:01,250  -->  00:00:02,803
<v Instructor>So, we learned how to construct,</v>
2

2

00:00:02,803  -->  00:00:05,130
and how to consume promises.
3

3

00:00:05,130  -->  00:00:06,957
But, this syntax to consume promises
4

4

00:00:06,957  -->  00:00:10,560
can still be quite confusing and difficult to manage.
5

5

00:00:10,560  -->  00:00:15,560
And, so in ES8, or ES2017, something called Async/Await
6

6

00:00:15,634  -->  00:00:18,300
was introduced to the JavaScript language,
7

7

00:00:18,300  -->  00:00:20,611
in order to make it a lot easier for us developers
8

8

00:00:20,611  -->  00:00:22,670
to consume promises.
9

9

00:00:22,670  -->  00:00:25,163
So, now let's take a look at Async/Await.
10

10

00:00:26,240  -->  00:00:29,000
So, again, Async/Await was designed
11

11

00:00:29,000  -->  00:00:30,740
for us to consume promises,
12

12

00:00:30,740  -->  00:00:32,300
and not to produce them.
13

13

00:00:32,300  -->  00:00:34,230
So, if you want to produce promises,
14

14

00:00:34,230  -->  00:00:37,160
we just do it the way that we learned in the last lecture.
15

15

00:00:37,160  -->  00:00:38,430
But, most of the time, we're going
16

16

00:00:38,430  -->  00:00:40,240
to consume promises, anyway.
17

17

00:00:40,240  -->  00:00:43,690
And, Async/Await makes that a lot easier to do.
18

18

00:00:43,690  -->  00:00:44,920
So, without further ado,
19

19

00:00:44,920  -->  00:00:46,710
let's see how to use it in practice.
20

20

00:00:46,710  -->  00:00:48,450
And, what we're gonna do is basically
21

21

00:00:48,450  -->  00:00:51,260
to change the way we consume them, in the last lecture.
22

22

00:00:51,260  -->  00:00:54,920
So, this piece of code, and instead use Async/Await.
23

23

00:00:54,920  -->  00:00:57,404
So, these promises that we have here, these three,
24

24

00:00:57,404  -->  00:00:59,580
we will continue using them.
25

25

00:00:59,580  -->  00:01:02,260
We will simply get rid of the code, here, for now,
26

26

00:01:02,260  -->  00:01:04,999
and do the same thing with Async/Await.
27

27

00:01:04,999  -->  00:01:06,333
Okay?
28

28

00:01:08,180  -->  00:01:11,433
And so, we start by creating an Async function,
29

29

00:01:12,980  -->  00:01:14,683
so use the Async keyword,
30

30

00:01:16,250  -->  00:01:17,250
then function.
31

31

00:01:17,250  -->  00:01:21,200
And, let's say, get recipes,
32

32

00:01:21,200  -->  00:01:24,013
and then I'm gonna call AW for Async/Await.
33

33

00:01:26,970  -->  00:01:27,820
Okay?
34

34

00:01:27,820  -->  00:01:30,693
Then we can also just call it down here.
35

35

00:01:35,640  -->  00:01:36,880
Alright.
36

36

00:01:36,880  -->  00:01:39,610
So, this is a new special kind of function,
37

37

00:01:39,610  -->  00:01:41,540
which simply means that this function
38

38

00:01:41,540  -->  00:01:43,340
is an Asynchronous function.
39

39

00:01:43,340  -->  00:01:45,587
So, one that basically keeps running in the background,
40

40

00:01:45,587  -->  00:01:48,050
just the way that we learned before.
41

41

00:01:48,050  -->  00:01:50,430
This Async function then returns a promise,
42

42

00:01:50,430  -->  00:01:52,180
but more on that a bit later.
43

43

00:01:52,180  -->  00:01:55,400
For now, what's important is that inside an Async function
44

44

00:01:55,400  -->  00:01:58,250
we can have on or more Await expressions.
45

45

00:01:58,250  -->  00:02:00,430
So, in order to consume our first promise,
46

46

00:02:00,430  -->  00:02:02,360
we can do it like this.
47

47

00:02:02,360  -->  00:02:05,293
We simply say const, IDs,
48

48

00:02:06,970  -->  00:02:07,803
Await,
49

49

00:02:08,970  -->  00:02:10,720
get IDs.
50

50

00:02:10,720  -->  00:02:14,100
So, this get IDs, here, is our first promise, right?
51

51

00:02:14,100  -->  00:02:16,577
So, get IDs, is this promise here,
52

52

00:02:16,577  -->  00:02:20,200
and then to consume it, we simply say Await IDs,
53

53

00:02:20,200  -->  00:02:23,500
and assign result to this IDs variable.
54

54

00:02:23,500  -->  00:02:26,230
And, what happens here is that this Await expression, here,
55

55

00:02:26,230  -->  00:02:29,380
will really stop the code from executing, at this point,
56

56

00:02:29,380  -->  00:02:31,320
until the promise is fulfilled.
57

57

00:02:31,320  -->  00:02:33,980
So, in this case, this get IDs, promise.
58

58

00:02:33,980  -->  00:02:35,850
And, if the promise is resolved,
59

59

00:02:35,850  -->  00:02:38,490
which remember, means that it was successful,
60

60

00:02:38,490  -->  00:02:40,304
then the value of the Await expression
61

61

00:02:40,304  -->  00:02:42,810
is the resolved value of the promise,
62

62

00:02:42,810  -->  00:02:46,140
which is then assigned to this IDs variable, okay?
63

63

00:02:46,140  -->  00:02:48,615
So, again, in this case our promise will resolve
64

64

00:02:48,615  -->  00:02:50,770
to this value, here.
65

65

00:02:50,770  -->  00:02:54,080
So, this array and so this IDs here
66

66

00:02:54,080  -->  00:02:57,120
will then become the value of that resolved value.
67

67

00:02:57,120  -->  00:02:58,910
So, that array that I just showed you.
68

68

00:02:58,910  -->  00:02:59,780
Okay?
69

69

00:02:59,780  -->  00:03:01,190
And, to demonstrate this to you,
70

70

00:03:01,190  -->  00:03:04,433
let me then just simply log this to the console.
71

71

00:03:06,580  -->  00:03:07,443
So, IDs.
72

72

00:03:09,900  -->  00:03:12,980
Run it, and let's see it, and here we go.
73

73

00:03:12,980  -->  00:03:16,000
So after one and a half seconds, we locked the result value
74

74

00:03:16,000  -->  00:03:18,350
of the get IDs promise.
75

75

00:03:18,350  -->  00:03:19,183
Okay?
76

76

00:03:19,183  -->  00:03:20,510
And so again, what happens here,
77

77

00:03:20,510  -->  00:03:22,440
is that we fire off the functions,
78

78

00:03:22,440  -->  00:03:23,800
so we start the function.
79

79

00:03:23,800  -->  00:03:26,940
And, it then keeps running asynchronously in the background.
80

80

00:03:26,940  -->  00:03:30,340
And then, here, we wait for this promise, here, to resolve,
81

81

00:03:30,340  -->  00:03:33,200
assign a value to this IDs variable,
82

82

00:03:33,200  -->  00:03:35,750
and simply log it to the console.
83

83

00:03:35,750  -->  00:03:37,570
Now, if the promise is rejected,
84

84

00:03:37,570  -->  00:03:39,230
then an error will be thrown.
85

85

00:03:39,230  -->  00:03:41,010
And, if you want to handle that error,
86

86

00:03:41,010  -->  00:03:42,850
we have to include some more code here,
87

87

00:03:42,850  -->  00:03:45,600
but that's not really important for now, at this point.
88

88

00:03:45,600  -->  00:03:48,380
And so, I'm leaving that for the next lecture.
89

89

00:03:48,380  -->  00:03:49,213
Okay?
90

90

00:03:49,213  -->  00:03:51,823
So, let's now consume our other two promises.
91

91

00:03:53,250  -->  00:03:55,963
So, this one I'm gonna call recipe.
92

92

00:03:57,720  -->  00:04:01,550
And, we will Await the result of our next promise.
93

93

00:04:01,550  -->  00:04:05,680
And, that one we get simply by calling get recipe,
94

94

00:04:05,680  -->  00:04:06,970
just like this here.
95

95

00:04:06,970  -->  00:04:07,803
Right?
96

96

00:04:08,820  -->  00:04:11,489
So, we have our get recipe function, right?
97

97

00:04:11,489  -->  00:04:13,300
Which is this one here.
98

98

00:04:13,300  -->  00:04:15,500
Which will then return a promise.
99

99

00:04:15,500  -->  00:04:18,110
And, so we Await that that promise finishes.
100

100

00:04:18,110  -->  00:04:20,080
And, after it finishes we can then
101

101

00:04:20,080  -->  00:04:22,597
log the recipe to the console.
102

102

00:04:22,597  -->  00:04:25,180
(typing sound)
103

103

00:04:28,270  -->  00:04:29,370
And, now the next one.
104

104

00:04:31,806  -->  00:04:33,223
(mumbles) call it a related,
105

105

00:04:35,930  -->  00:04:38,040
and Await the next one.
106

106

00:04:38,040  -->  00:04:39,710
So, we can actually, use,
107

107

00:04:39,710  -->  00:04:40,810
again, this code here.
108

108

00:04:42,788  -->  00:04:45,371
(typing sound)
109

109

00:04:53,030  -->  00:04:54,220
And, that's it.
110

110

00:04:54,220  -->  00:04:55,883
So, let's check out it, here.
111

111

00:04:58,269  -->  00:04:59,891
This would work the exact same way as before.
112

112

00:04:59,891  -->  00:05:01,710
And, yeah, here we go.
113

113

00:05:01,710  -->  00:05:04,790
So, here we have our result just like we had
114

114

00:05:04,790  -->  00:05:09,030
when we consumed a promise in this way, here.
115

115

00:05:09,030  -->  00:05:09,863
Okay?
116

116

00:05:09,863  -->  00:05:12,680
And, I think that this way, here, is really a lot easier.
117

117

00:05:12,680  -->  00:05:15,180
So, all we do is to simply Await
118

118

00:05:15,180  -->  00:05:18,540
until each of the promises, here, gets a result.
119

119

00:05:18,540  -->  00:05:21,400
And, in each of these lines, where we use the Await keyword,
120

120

00:05:21,400  -->  00:05:25,410
the execution stops and we wait until the promise returns.
121

121

00:05:25,410  -->  00:05:28,030
So, that's how Async/Await works.
122

122

00:05:28,030  -->  00:05:30,090
It allows us to consume promises,
123

123

00:05:30,090  -->  00:05:31,590
but without all the callbacks
124

124

00:05:31,590  -->  00:05:33,660
that we have with the call back (mumbles),
125

125

00:05:33,660  -->  00:05:36,380
and to some degree, also in promises,
126

126

00:05:36,380  -->  00:05:38,810
with the den and catch methods.
127

127

00:05:38,810  -->  00:05:40,750
Now, I just want to make it very clear, again,
128

128

00:05:40,750  -->  00:05:43,050
that the Await expression can only be used
129

129

00:05:43,050  -->  00:05:45,647
inside an Async function, okay?
130

130

00:05:45,647  -->  00:05:48,950
And, this Async function, remember it runs
131

131

00:05:48,950  -->  00:05:49,900
in the background.
132

132

00:05:49,900  -->  00:05:52,980
And, that's very important because we can never have
133

133

00:05:52,980  -->  00:05:54,400
the main code stopping.
134

134

00:05:54,400  -->  00:05:56,940
And, so all we do here, is to block the code
135

135

00:05:56,940  -->  00:06:00,350
in the Async function, which runs in the background, anyway.
136

136

00:06:00,350  -->  00:06:01,183
Okay?
137

137

00:06:01,183  -->  00:06:03,200
And so again, stopping the function here
138

138

00:06:03,200  -->  00:06:05,570
is not a problem because it just runs
139

139

00:06:05,570  -->  00:06:07,296
in the background anyway.
140

140

00:06:07,296  -->  00:06:10,050
So, in here, in this line of code,
141

141

00:06:10,050  -->  00:06:13,475
we synchronously call this get recipes function,
142

142

00:06:13,475  -->  00:06:15,924
which then does all this stuff, here,
143

143

00:06:15,924  -->  00:06:18,328
just in the background.
144

144

00:06:18,328  -->  00:06:21,432
Now, this is all really great, already.
145

145

00:06:21,432  -->  00:06:24,247
Now, just imagine that we actually wanted to return
146

146

00:06:24,247  -->  00:06:27,120
the value here for this Async function.
147

147

00:06:27,120  -->  00:06:30,100
So, let's try something, which is not going to work,
148

148

00:06:30,100  -->  00:06:31,928
but I'm going to show you anyway.
149

149

00:06:31,928  -->  00:06:36,173
So, let's say that we want to return the recipe.
150

150

00:06:38,450  -->  00:06:41,390
So, we can assign, then, this return value,
151

151

00:06:41,390  -->  00:06:43,453
here to this result, right?
152

152

00:06:46,070  -->  00:06:48,193
And, then we can log it to the console.
153

153

00:06:49,070  -->  00:06:51,880
Now, this is not really going to work, right?
154

154

00:06:51,880  -->  00:06:53,180
So, let me show it to you.
155

155

00:06:55,510  -->  00:06:58,570
So, all this logs here is this promise,
156

156

00:06:58,570  -->  00:07:00,130
and it says pending, here,
157

157

00:07:00,130  -->  00:07:03,090
and so that's not really the result you were looking for.
158

158

00:07:03,090  -->  00:07:05,357
We were hoping that it would log to the console,
159

159

00:07:05,357  -->  00:07:07,380
and result of the recipe.
160

160

00:07:07,380  -->  00:07:09,940
So, basically, this here, right?
161

161

00:07:09,940  -->  00:07:12,280
And so, why didn't his work?
162

162

00:07:12,280  -->  00:07:15,390
Well, it doesn't work because this function here,
163

163

00:07:15,390  -->  00:07:17,950
runs Asynchronously in the background.
164

164

00:07:17,950  -->  00:07:21,950
So, by the time that we try to run this console.log, here,
165

165

00:07:21,950  -->  00:07:25,020
this get recipe function is still running in the background.
166

166

00:07:25,020  -->  00:07:28,220
And, so all that is logged is this promise, here,
167

167

00:07:28,220  -->  00:07:29,290
which simply says,
168

168

00:07:29,290  -->  00:07:31,040
well, there's a rec here.
169

169

00:07:31,040  -->  00:07:33,570
It is a promise but we don't have any result yet,
170

170

00:07:33,570  -->  00:07:36,720
and so we cannot log anything to the console.
171

171

00:07:36,720  -->  00:07:37,553
Right?
172

172

00:07:37,553  -->  00:07:39,190
Because remember that this code, here,
173

173

00:07:39,190  -->  00:07:41,630
is of course run synchronously, right?
174

174

00:07:41,630  -->  00:07:43,230
And, so it runs this here,
175

175

00:07:43,230  -->  00:07:44,900
then it puts it off to the background,
176

176

00:07:44,900  -->  00:07:48,000
and then immediately it will run this next line,
177

177

00:07:48,000  -->  00:07:51,430
but by the time we run, this get recipes function, here,
178

178

00:07:51,430  -->  00:07:52,890
will still be doing it's job,
179

179

00:07:52,890  -->  00:07:55,580
and will unlock this data here,
180

180

00:07:55,580  -->  00:07:58,309
long after this line, here, has already run.
181

181

00:07:58,309  -->  00:07:59,436
Okay?
182

182

00:07:59,436  -->  00:08:02,220
So, how could we actually solve this problem?
183

183

00:08:02,220  -->  00:08:05,150
Well, remember how I told you that earlier,
184

184

00:08:05,150  -->  00:08:06,350
that an Async function
185

185

00:08:06,350  -->  00:08:09,010
always automatically returns a promise?
186

186

00:08:09,010  -->  00:08:11,761
And, so if we return a value from the Async function,
187

187

00:08:11,761  -->  00:08:13,680
using the return keyword,
188

188

00:08:13,680  -->  00:08:16,330
so just like I did here, then the promise
189

189

00:08:16,330  -->  00:08:17,847
will automatically be resolved
190

190

00:08:17,847  -->  00:08:20,388
with this returned value, okay?
191

191

00:08:20,388  -->  00:08:22,470
Now, this may sound a bit confusing,
192

192

00:08:22,470  -->  00:08:23,816
but it's very straightforward.
193

193

00:08:23,816  -->  00:08:26,120
So, let me just show it to you.
194

194

00:08:26,120  -->  00:08:28,211
So, this one, here, doesn't really work,
195

195

00:08:28,211  -->  00:08:31,480
but what we can do here, is to then simply
196

196

00:08:31,480  -->  00:08:32,853
use the den method.
197

197

00:08:34,460  -->  00:08:35,800
Just like we did before.
198

198

00:08:35,800  -->  00:08:37,890
Because, again, this function, here,
199

199

00:08:37,890  -->  00:08:39,880
automatically returns a promise
200

200

00:08:39,880  -->  00:08:42,200
with the resolved value of recipe.
201

201

00:08:42,200  -->  00:08:43,978
And, so we can now use this den,
202

202

00:08:43,978  -->  00:08:46,967
in to which we pass a call back function,
203

203

00:08:46,967  -->  00:08:50,140
where the argument is the resolved value
204

204

00:08:50,140  -->  00:08:51,050
of the promise.
205

205

00:08:51,050  -->  00:08:53,410
So, let's just say a recipe, here,
206

206

00:08:53,410  -->  00:08:54,550
or resolved, it doesn't really matter.
207

207

00:08:54,550  -->  00:08:56,903
Let's call this resolved, okay, why not?
208

208

00:08:58,980  -->  00:09:02,890
And, then we can simply console that log,
209

209

00:09:02,890  -->  00:09:04,850
this result to the console.
210

210

00:09:04,850  -->  00:09:06,130
And, we can maybe add some text,
211

211

00:09:06,130  -->  00:09:08,140
so that it's different from this one, here,
212

212

00:09:08,140  -->  00:09:10,343
so let's use the brackets here,
213

213

00:09:12,470  -->  00:09:15,653
then we of course, we need these curly bracelets,
214

214

00:09:19,683  -->  00:09:21,210
is the best ever.
215

215

00:09:21,210  -->  00:09:22,430
So, something like this.
216

216

00:09:22,430  -->  00:09:24,030
And so now, let's test it again.
217

217

00:09:27,510  -->  00:09:31,050
And, wait for it, and here we go.
218

218

00:09:31,050  -->  00:09:34,539
So, fresh tomato pasta is the best ever.
219

219

00:09:34,539  -->  00:09:36,313
And, so now it works just the way
220

220

00:09:36,313  -->  00:09:38,300
that we wanted it to work, right?
221

221

00:09:38,300  -->  00:09:40,730
And so, what we did here is to use den,
222

222

00:09:40,730  -->  00:09:43,200
which is basically to consume this promise,
223

223

00:09:43,200  -->  00:09:46,362
just like I showed you before, up here,
224

224

00:09:46,362  -->  00:09:49,550
which is possible simply because of the fact
225

225

00:09:49,550  -->  00:09:51,750
that this Async function, here,
226

226

00:09:51,750  -->  00:09:54,860
always returns a promise, that we can then consume.
227

227

00:09:54,860  -->  00:09:57,630
Okay, you will actually need to use this trick, here,
228

228

00:09:57,630  -->  00:10:00,877
later in the big project that we're going to code.
229

229

00:10:00,877  -->  00:10:03,923
And so, it's important that you familiarize yourself
230

230

00:10:03,923  -->  00:10:05,850
with this piece of code,
231

231

00:10:05,850  -->  00:10:07,387
and that you really understand,
232

232

00:10:07,387  -->  00:10:09,370
and that it makes sense to you at this point.
233

233

00:10:09,370  -->  00:10:10,203
Okay?
234

234

00:10:10,203  -->  00:10:12,690
So, I hope you saw that Async/Await
235

235

00:10:12,690  -->  00:10:15,354
makes it so much easier to work with promises.
236

236

00:10:15,354  -->  00:10:18,320
And, that's just because of the fact that it looks like
237

237

00:10:18,320  -->  00:10:19,840
the normal synchronous code,
238

238

00:10:19,840  -->  00:10:21,330
that we're already used to.
239

239

00:10:21,330  -->  00:10:24,457
It just works in an Asynchronous way, behind the scenes.
240

240

00:10:24,457  -->  00:10:25,450
Okay?
241

241

00:10:25,450  -->  00:10:27,880
So, again, this really looks like
242

242

00:10:27,880  -->  00:10:29,750
Asynchronous JavaScript code,
243

243

00:10:29,750  -->  00:10:32,160
that we've be written all the time.
244

244

00:10:32,160  -->  00:10:34,120
We just need to understand that behind the scenes
245

245

00:10:34,120  -->  00:10:36,460
because of this Async and Await,
246

246

00:10:36,460  -->  00:10:38,320
this is Asynchronous code.
247

247

00:10:38,320  -->  00:10:40,910
But, as long as we understand how and why all of this works,
248

248

00:10:40,910  -->  00:10:44,413
we can now use this fantastic new tool, to our advantage.
