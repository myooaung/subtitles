1
1

00:00:01,605  -->  00:00:02,724
<v Instructor>In this final step</v>
2

2

00:00:02,724  -->  00:00:05,780
of updating the expense percentages,
3

3

00:00:05,780  -->  00:00:09,113
we're just gonna display them to the UI.
4

4

00:00:10,076  -->  00:00:12,143
In this lecture, you're gonna learn
5

5

00:00:12,143  -->  00:00:14,900
how to create your own forEach function,
6

6

00:00:14,900  -->  00:00:17,900
but for nodeLists instead of arrays.
7

7

00:00:19,730  -->  00:00:21,625
So, by now, you already know
8

8

00:00:21,625  -->  00:00:24,487
where we're gonna add our new method, right?
9

9

00:00:24,487  -->  00:00:28,070
And that's right here in the UI controller.
10

10

00:00:28,931  -->  00:00:30,681
And let's do it here.
11

11

00:00:31,686  -->  00:00:35,186
And we'll just call it displayPercentages.
12

12

00:00:41,641  -->  00:00:43,430
And of course, this method is going
13

13

00:00:43,430  -->  00:00:47,278
to receive the percentage array that we have stored
14

14

00:00:47,278  -->  00:00:49,707
in our app controller, right?
15

15

00:00:49,707  -->  00:00:53,874
So that's what we did in the last lecture, if you remember.
16

16

00:00:55,621  -->  00:00:58,078
So, an argument called percentages,
17

17

00:00:58,078  -->  00:01:01,279
and this is gonna be an array.
18

18

00:01:01,279  -->  00:01:05,363
Okay, so these are the percentages that we will display,
19

19

00:01:05,363  -->  00:01:08,487
but where are we going to actually display them?
20

20

00:01:08,487  -->  00:01:11,320
So, let's take a look at the HTML,
21

21

00:01:12,818  -->  00:01:15,038
and they are, of course, not in the incomes,
22

22

00:01:15,038  -->  00:01:17,296
but in the expenses
23

23

00:01:17,296  -->  00:01:21,231
and this is called item__percentage, so we need to start
24

24

00:01:21,231  -->  00:01:23,565
by selecting all of the elements
25

25

00:01:23,565  -->  00:01:26,940
which have the item__percentage class.
26

26

00:01:26,940  -->  00:01:29,690
So let's go back and, once again,
27

27

00:01:30,632  -->  00:01:33,382
I'm going to edit in here, right?
28

28

00:01:34,589  -->  00:01:35,589
So, expenses
29

29

00:01:38,995  -->  00:01:41,328
percentage label, let's say.
30

30

00:01:44,893  -->  00:01:47,617
And I'm not sure if I copied it.
31

31

00:01:47,617  -->  00:01:48,711
No, I did not.
32

32

00:01:48,711  -->  00:01:52,768
Alright, so let's go back, so it's item__percentage.
33

33

00:01:52,768  -->  00:01:53,601
Alright.
34

34

00:01:56,251  -->  00:02:00,001
And here we go, so expenses percentage label.
35

35

00:02:04,340  -->  00:02:06,452
Alright, and now this time we don't know
36

36

00:02:06,452  -->  00:02:08,594
how many expense item will be
37

37

00:02:08,594  -->  00:02:12,174
on the list, so we cannot use querySelector,
38

38

00:02:12,174  -->  00:02:14,514
because that only selects the first one,
39

39

00:02:14,514  -->  00:02:17,578
so we need to, again, use querySelectorAll.
40

40

00:02:17,578  -->  00:02:21,525
So let's create a variable called fields
41

41

00:02:21,525  -->  00:02:22,608
and then say,
42

42

00:02:23,468  -->  00:02:24,301
document
43

43

00:02:25,464  -->  00:02:26,797
querySelectorAll
44

44

00:02:28,789  -->  00:02:31,647
and for my DOMstrings, we want to
45

45

00:02:31,647  -->  00:02:33,814
expenses percentage label.
46

46

00:02:35,093  -->  00:02:38,280
Alright, and this, again, returns a list.
47

47

00:02:38,280  -->  00:02:40,827
And actually, it's called a node list.
48

48

00:02:40,827  -->  00:02:44,301
Not just list, but nodeList and that is because
49

49

00:02:44,301  -->  00:02:47,460
in a DOMtree, where all of the html elements
50

50

00:02:47,460  -->  00:02:51,529
of our page are stored, each element is called a node
51

51

00:02:51,529  -->  00:02:54,619
and that's also why the property that we used before
52

52

00:02:54,619  -->  00:02:58,397
for moving up in the DOM was called parentNode.
53

53

00:02:58,397  -->  00:03:01,419
So we need to now loop over all of these elements
54

54

00:03:01,419  -->  00:03:03,496
in our selection, so all of these nodes
55

55

00:03:03,496  -->  00:03:05,920
and then change the text content property
56

56

00:03:05,920  -->  00:03:08,733
for all of them, such as we did before.
57

57

00:03:08,733  -->  00:03:09,826
Now, we already know
58

58

00:03:09,826  -->  00:03:14,316
that the nodeList does not have the forEach method, right?
59

59

00:03:14,316  -->  00:03:17,882
So we could again use the hack that we used before.
60

60

00:03:17,882  -->  00:03:21,274
So, where we used the slice method of the array prototype
61

61

00:03:21,274  -->  00:03:24,492
to convert the node list into an array,
62

62

00:03:24,492  -->  00:03:28,521
but as I said that's more of a hack, so like a work around
63

63

00:03:28,521  -->  00:03:31,298
and we can actually do better.
64

64

00:03:31,298  -->  00:03:35,022
So instead, let's create our own forEach function,
65

65

00:03:35,022  -->  00:03:37,620
but for node lists, instead of arrays
66

66

00:03:37,620  -->  00:03:40,965
and with this, actually, we can use some of the knowledge
67

67

00:03:40,965  -->  00:03:43,669
that we gained before about callback functions
68

68

00:03:43,669  -->  00:03:47,955
and passing functions around like variables.
69

69

00:03:47,955  -->  00:03:49,885
So imagine that we already have this function.
70

70

00:03:49,885  -->  00:03:51,757
How would we want to use it?
71

71

00:03:51,757  -->  00:03:53,507
So we want to call
72

72

00:03:53,507  -->  00:03:55,140
nodeList
73

73

00:03:55,140  -->  00:03:56,289
ForEach.
74

74

00:03:56,289  -->  00:03:58,616
Okay, so this is how we gonna call the function
75

75

00:03:58,616  -->  00:04:00,389
that we're gonna code in a second
76

76

00:04:00,389  -->  00:04:04,781
and then we want to pass into it our fields, of course
77

77

00:04:04,781  -->  00:04:07,504
and a callback function, right?
78

78

00:04:07,504  -->  00:04:10,297
So this is similar to the forEach for arrays,
79

79

00:04:10,297  -->  00:04:13,373
but it's gonna be for nodeList.
80

80

00:04:13,373  -->  00:04:15,573
And then, in here, we want our callback function,
81

81

00:04:15,573  -->  00:04:16,906
with the current
82

82

00:04:18,145  -->  00:04:21,401
and the index, so exactly as we are used
83

83

00:04:21,401  -->  00:04:23,318
from the forEach method
84

84

00:04:24,156  -->  00:04:26,739
and then here we do some stuff.
85

85

00:04:30,825  -->  00:04:33,075
So let's now write actually
86

86

00:04:34,569  -->  00:04:37,200
this function and I'm gonna copy it.
87

87

00:04:37,200  -->  00:04:39,117
So, var nodeListForEach
88

88

00:04:40,741  -->  00:04:41,824
is a function
89

89

00:04:42,919  -->  00:04:46,213
and as we saw here, this function is gonna accept
90

90

00:04:46,213  -->  00:04:50,549
a list, a nodeList, but instead I'm just gonna write list,
91

91

00:04:50,549  -->  00:04:53,821
so that our parameter name is not too big
92

92

00:04:53,821  -->  00:04:56,988
and then the callback function, right?
93

93

00:04:59,116  -->  00:05:00,493
So this here is what we pass
94

94

00:05:00,493  -->  00:05:03,303
into the nodeListForEach function.
95

95

00:05:03,303  -->  00:05:07,053
So, a list and then our callback here, right?
96

96

00:05:07,950  -->  00:05:10,180
So what is this function going to do?
97

97

00:05:10,180  -->  00:05:12,483
It will simply be a for loop
98

98

00:05:12,483  -->  00:05:16,043
that in each iteration is gonna call our callback function.
99

99

00:05:16,043  -->  00:05:19,267
So, something very simple, actually, but by putting it
100

100

00:05:19,267  -->  00:05:22,305
into a separate function, we have here a piece
101

101

00:05:22,305  -->  00:05:24,807
of reusable code that we could then use
102

102

00:05:24,807  -->  00:05:27,631
for all of the nodeLists throughout our app,
103

103

00:05:27,631  -->  00:05:30,574
or even in other apps that you're gonna code in the future.
104

104

00:05:30,574  -->  00:05:32,422
So, each time that you have nodeList,
105

105

00:05:32,422  -->  00:05:34,459
you can then go ahead and simply use
106

106

00:05:34,459  -->  00:05:36,592
this nodeListForEach function here,
107

107

00:05:36,592  -->  00:05:40,029
instead of writing your own for loop each time
108

108

00:05:40,029  -->  00:05:43,196
and then put something inside of that.
109

109

00:05:44,108  -->  00:05:44,941
So, for,
110

110

00:05:46,308  -->  00:05:48,475
var "i" is zero, of course
111

111

00:05:50,038  -->  00:05:52,871
and "i" should be smaller
112

112

00:05:52,871  -->  00:05:54,538
than the list.length
113

113

00:05:56,036  -->  00:05:57,299
and so, please note
114

114

00:05:57,299  -->  00:06:00,474
that the nodeList actually has the length property.
115

115

00:06:00,474  -->  00:06:02,873
So, it doesn't have all of these fancy methods
116

116

00:06:02,873  -->  00:06:04,707
that we would like to use on it,
117

117

00:06:04,707  -->  00:06:08,232
but it has the length property, so we can use that here.
118

118

00:06:08,232  -->  00:06:11,399
And now, we just increment our counter
119

119

00:06:12,239  -->  00:06:14,654
and what are we gonna do in here?
120

120

00:06:14,654  -->  00:06:18,821
So, very simple, we simply call our callback function.
121

121

00:06:20,564  -->  00:06:22,005
And now, here's the thing.
122

122

00:06:22,005  -->  00:06:25,231
What are the parameters of our callback function?
123

123

00:06:25,231  -->  00:06:27,882
They are the current and the index
124

124

00:06:27,882  -->  00:06:30,258
and so we can now simply pass them
125

125

00:06:30,258  -->  00:06:34,651
into our callback function by writing them here, right?
126

126

00:06:34,651  -->  00:06:36,818
So the current is the list
127

127

00:06:37,809  -->  00:06:39,471
at position "i"
128

128

00:06:39,471  -->  00:06:43,765
and the index is simply "i", so it's as simple as that.
129

129

00:06:43,765  -->  00:06:46,054
So, does that make sense to you?
130

130

00:06:46,054  -->  00:06:49,528
This is really the power of first class functions
131

131

00:06:49,528  -->  00:06:53,251
and of being able to pass functions around like this.
132

132

00:06:53,251  -->  00:06:56,500
So what we just did here is something really powerful.
133

133

00:06:56,500  -->  00:06:58,183
So let me explain it again.
134

134

00:06:58,183  -->  00:07:01,145
So when we call our nodeListForEach function,
135

135

00:07:01,145  -->  00:07:04,692
we pass a callback function into it, right?
136

136

00:07:04,692  -->  00:07:07,319
Which is this one and it doesn't have any code yet,
137

137

00:07:07,319  -->  00:07:10,078
but we're gonna put that there in a second.
138

138

00:07:10,078  -->  00:07:13,728
So this function is assigned to this callback parameter.
139

139

00:07:13,728  -->  00:07:17,028
And so, in here, we then loop over our list,
140

140

00:07:17,028  -->  00:07:20,535
let's say, five times, if there are five elements in it
141

141

00:07:20,535  -->  00:07:22,307
and then in each iteration,
142

142

00:07:22,307  -->  00:07:26,378
the callback function gets called with these arguments here,
143

143

00:07:26,378  -->  00:07:30,545
which are exactly the ones that we specified here, right?
144

144

00:07:31,785  -->  00:07:34,266
And, so then, five times, our code
145

145

00:07:34,266  -->  00:07:37,505
that we have here, is going to be executed
146

146

00:07:37,505  -->  00:07:40,414
and we have then access to the current element
147

147

00:07:40,414  -->  00:07:43,308
and to the current index, because we passed them
148

148

00:07:43,308  -->  00:07:45,961
into the callback in here.
149

149

00:07:45,961  -->  00:07:49,697
So, let's now use this to display these percentages
150

150

00:07:49,697  -->  00:07:50,947
on our webpage.
151

151

00:07:51,917  -->  00:07:56,033
So we can simply say that we want the current element
152

152

00:07:56,033  -->  00:08:00,828
and now we can use the textContent property, right?
153

153

00:08:00,828  -->  00:08:03,966
Which we have used a hundred times by now
154

154

00:08:03,966  -->  00:08:07,780
and so, what we want is the percentages
155

155

00:08:07,780  -->  00:08:09,030
at the position
156

156

00:08:10,238  -->  00:08:11,071
index.
157

157

00:08:12,147  -->  00:08:13,885
So imagine at the first element,
158

158

00:08:13,885  -->  00:08:15,895
we want the first percentage, right?
159

159

00:08:15,895  -->  00:08:17,995
At the second element, we want the second percentage
160

160

00:08:17,995  -->  00:08:18,988
in the array.
161

161

00:08:18,988  -->  00:08:21,464
So it's going to be percentages index
162

162

00:08:21,464  -->  00:08:24,779
zero, one, two, three and four, so in the case
163

163

00:08:24,779  -->  00:08:27,671
that we have five percentage values.
164

164

00:08:27,671  -->  00:08:31,046
So that's the percentage and then we simply want to add
165

165

00:08:31,046  -->  00:08:34,248
this percentage sign, such as we did before
166

166

00:08:34,248  -->  00:08:36,729
and that's actually it.
167

167

00:08:36,729  -->  00:08:39,173
Well, not really, because imagine
168

168

00:08:39,173  -->  00:08:41,212
that the percentage is zero, right?
169

169

00:08:41,212  -->  00:08:44,789
And we did that before and we can actually see it up here.
170

170

00:08:44,789  -->  00:08:48,153
So, what we said here is that, if the percentage is zero,
171

171

00:08:48,153  -->  00:08:50,729
we display the percentage like this,
172

172

00:08:50,729  -->  00:08:53,910
so with the percentage sign, but if it's zero,
173

173

00:08:53,910  -->  00:08:58,153
we simply want to display this string here, okay?
174

174

00:08:58,153  -->  00:09:02,058
So, instead of minus one, because that would look weird.
175

175

00:09:02,058  -->  00:09:03,225
So we can say,
176

176

00:09:04,824  -->  00:09:06,074
if percentages,
177

177

00:09:07,103  -->  00:09:09,120
at the position index,
178

178

00:09:09,120  -->  00:09:13,287
so the current percentage, if it's greater than zero
179

179

00:09:14,277  -->  00:09:15,527
then make this.
180

180

00:09:21,434  -->  00:09:22,267
And else,
181

181

00:09:24,646  -->  00:09:25,813
simply display
182

182

00:09:27,478  -->  00:09:29,061
these three dashes.
183

183

00:09:31,984  -->  00:09:33,869
Alright, and with this,
184

184

00:09:33,869  -->  00:09:37,452
we concluded our display percentage method.
185

185

00:09:38,703  -->  00:09:41,907
So again, we used a really powerful methodology here,
186

186

00:09:41,907  -->  00:09:44,016
by writing this nodeList function here,
187

187

00:09:44,016  -->  00:09:46,250
this nodeListForEach function
188

188

00:09:46,250  -->  00:09:48,693
and if you didn't fully understand how this works,
189

189

00:09:48,693  -->  00:09:51,983
then just pause the video and take a look at exactly
190

190

00:09:51,983  -->  00:09:54,041
what happens here.
191

191

00:09:54,041  -->  00:09:55,324
Alright, so now it's time
192

192

00:09:55,324  -->  00:09:59,157
to actually use our displayPercentages method.
193

193

00:10:01,929  -->  00:10:03,839
So, where is it?
194

194

00:10:03,839  -->  00:10:05,978
So this file is really getting big
195

195

00:10:05,978  -->  00:10:09,972
and sometimes it's a big hard to find a place,
196

196

00:10:09,972  -->  00:10:11,149
but it's here.
197

197

00:10:11,149  -->  00:10:12,566
So, UI controller
198

198

00:10:13,457  -->  00:10:14,457
that display
199

199

00:10:16,449  -->  00:10:17,952
Percentages
200

200

00:10:17,952  -->  00:10:21,644
and, again, what we want to pass here is this variable,
201

201

00:10:21,644  -->  00:10:24,454
called percentages, right?
202

202

00:10:24,454  -->  00:10:26,031
Which is this one here, which comes
203

203

00:10:26,031  -->  00:10:28,583
from calling the getPercentages method
204

204

00:10:28,583  -->  00:10:32,541
on the budget controller and that's it.
205

205

00:10:32,541  -->  00:10:34,458
Let's test this out now
206

206

00:10:37,386  -->  00:10:40,969
and let's put our income of 200 here again.
207

207

00:10:43,121  -->  00:10:44,788
And then "a", of 10.
208

208

00:10:46,260  -->  00:10:49,767
Oh, sorry, this should have been an expense, of course.
209

209

00:10:49,767  -->  00:10:51,000
So, again,
210

210

00:10:51,000  -->  00:10:51,833
"a" of 10.
211

211

00:10:53,682  -->  00:10:55,682
And, yes, it's 10%.
212

212

00:10:56,716  -->  00:10:58,730
Let me actually delete this one.
213

213

00:10:58,730  -->  00:11:00,515
So, this is working, right?
214

214

00:11:00,515  -->  00:11:02,780
So, you have five percent and it's correct,
215

215

00:11:02,780  -->  00:11:06,344
because 10 is, in fact, five percent of 200.
216

216

00:11:06,344  -->  00:11:09,756
So let's add another one and let's say 50
217

217

00:11:09,756  -->  00:11:13,290
and now it should be 25 and here it is.
218

218

00:11:13,290  -->  00:11:17,448
So 25 is displayed correctly and since this is so fun,
219

219

00:11:17,448  -->  00:11:21,657
let me just add another one of 120, let's say
220

220

00:11:21,657  -->  00:11:25,009
and this one is 60% and notice that in here,
221

221

00:11:25,009  -->  00:11:28,601
of course, it also updated, but we did that before,
222

222

00:11:28,601  -->  00:11:30,467
a couple of lectures ago, right?
223

223

00:11:30,467  -->  00:11:33,567
So all of these together, are 90%
224

224

00:11:33,567  -->  00:11:35,392
and actually, if you sum these together,
225

225

00:11:35,392  -->  00:11:36,225
so five,
226

226

00:11:36,225  -->  00:11:37,641
plus 25
227

227

00:11:37,641  -->  00:11:38,808
plus 60 is 90.
228

228

00:11:40,099  -->  00:11:43,205
So these percentages are correct.
229

229

00:11:43,205  -->  00:11:46,195
So with this, we concluded the percentage part
230

230

00:11:46,195  -->  00:11:48,894
of this application and actually our app is
231

231

00:11:48,894  -->  00:11:51,942
already fully functioning, so all of the important features
232

232

00:11:51,942  -->  00:11:54,306
that we wanted are implemented by now.
233

233

00:11:54,306  -->  00:11:57,537
There're just some minor things that are left to do here
234

234

00:11:57,537  -->  00:11:59,956
and we're gonna look at them, right in the next lecture.
235

235

00:11:59,956  -->  00:12:02,706
So come with me there, right now.
