WEBVTT
1
1

00:00:01.300  -->  00:00:03.300
<v Instructor>In this lecture, we will take a look</v>
2

2

00:00:03.300  -->  00:00:06.660
at a very simple example of asynchronous JavaScript.
3

3

00:00:06.660  -->  00:00:09.140
So, this is a completely new concept
4

4

00:00:09.140  -->  00:00:11.820
that we've never touched in the course up until this point.
5

5

00:00:11.820  -->  00:00:13.780
And so I'm very excited to show you
6

6

00:00:13.780  -->  00:00:16.353
what asynchronous JavaScript is all about.
7

7

00:00:17.570  -->  00:00:19.010
Now, before we actually start,
8

8

00:00:19.010  -->  00:00:20.610
you are maybe noticing that I'm using
9

9

00:00:20.610  -->  00:00:22.090
a different code editor here.
10

10

00:00:22.090  -->  00:00:24.260
And that's because this part of the course
11

11

00:00:24.260  -->  00:00:27.400
was recorded shortly after the rest of the course.
12

12

00:00:27.400  -->  00:00:30.830
And so now I've switched to a new editor called VS Code.
13

13

00:00:30.830  -->  00:00:32.470
And if you're interested in that one,
14

14

00:00:32.470  -->  00:00:35.660
you can simply go download it here from this website,
15

15

00:00:35.660  -->  00:00:38.060
but of course, you can also simply follow along
16

16

00:00:38.060  -->  00:00:40.080
using the code editor that you already have.
17

17

00:00:40.080  -->  00:00:41.630
So let's close this one here,
18

18

00:00:41.630  -->  00:00:45.420
and I already opened the file for this section here,
19

19

00:00:45.420  -->  00:00:47.740
and also the browser here on the right side.
20

20

00:00:47.740  -->  00:00:49.550
Now what's also different here is that before,
21

21

00:00:49.550  -->  00:00:52.140
I used to have an external JavaScript file
22

22

00:00:52.140  -->  00:00:55.610
called Script.JS, but right now I choose to
23

23

00:00:55.610  -->  00:00:57.710
simply write the code here in a script tag
24

24

00:00:57.710  -->  00:00:59.430
right into the HTML.
25

25

00:00:59.430  -->  00:01:01.590
I find it easier to just do everything in one file
26

26

00:01:01.590  -->  00:01:03.940
instead of having multiple files here.
27

27

00:01:03.940  -->  00:01:05.870
Okay, so let's just write some code here
28

28

00:01:05.870  -->  00:01:08.690
right into this script tag.
29

29

00:01:08.690  -->  00:01:11.230
And we're gonna start with just some old-school
30

30

00:01:11.230  -->  00:01:12.740
synchronous JavaScript code,
31

31

00:01:12.740  -->  00:01:15.160
just the way we've been doing up until this point.
32

32

00:01:15.160  -->  00:01:17.833
Okay, so let's write a function code first.
33

33

00:01:19.430  -->  00:01:21.390
And you're noticing here, probably, already
34

34

00:01:21.390  -->  00:01:25.180
that I'm using the new ES6 syntax, right?
35

35

00:01:25.180  -->  00:01:27.330
So I'm using the const keyword here
36

36

00:01:27.330  -->  00:01:29.680
to declare a function expression using
37

37

00:01:29.680  -->  00:01:32.750
then here the arrow syntax, right?
38

38

00:01:32.750  -->  00:01:35.390
So that's the new stuff that we learned in the last section,
39

39

00:01:35.390  -->  00:01:38.370
where we talked about ES2015, or ES6.
40

40

00:01:38.370  -->  00:01:39.610
And so from now on,
41

41

00:01:39.610  -->  00:01:41.910
I'm going to start using this new syntax here,
42

42

00:01:41.910  -->  00:01:44.200
in this section and also in the next one.
43

43

00:01:44.200  -->  00:01:46.900
Okay, so let's just log something to the console here.
44

44

00:01:53.210  -->  00:01:54.113
Hey there.
45

45

00:01:55.200  -->  00:01:58.050
And then, we're going to call this function here as well.
46

46

00:02:00.680  -->  00:02:03.420
Give it a save, reload it here,
47

47

00:02:03.420  -->  00:02:05.003
and then open up our console.
48

48

00:02:08.780  -->  00:02:11.750
And so now we know that everything's working here, right?
49

49

00:02:11.750  -->  00:02:14.410
So our hey there text is actually being printed.
50

50

00:02:14.410  -->  00:02:16.403
Let's now add a new function.
51

51

00:02:20.240  -->  00:02:21.690
This one just call it second.
52

52

00:02:27.470  -->  00:02:29.510
In this one, for now, I'm going to log
53

53

00:02:30.780  -->  00:02:34.373
some other text, and I'm going to log second.
54

54

00:02:36.470  -->  00:02:39.473
Then, in the first function, we call the second one,
55

55

00:02:41.220  -->  00:02:46.143
so just second, and then a new console.log down here,
56

56

00:02:48.750  -->  00:02:49.930
simply saying the end.
57

57

00:02:49.930  -->  00:02:52.660
Okay, this will make more sense to you in a second,
58

58

00:02:52.660  -->  00:02:54.730
when we start adding something different here
59

59

00:02:54.730  -->  00:02:56.160
into the second function.
60

60

00:02:56.160  -->  00:02:59.650
For now, we simply have hey there here as the result
61

61

00:02:59.650  -->  00:03:02.210
which comes from here, then the second function is called
62

62

00:03:02.210  -->  00:03:03.920
which logged second, as you'll see here,
63

63

00:03:03.920  -->  00:03:05.690
and then, finally, the end.
64

64

00:03:05.690  -->  00:03:08.430
Okay, so all of this is synchronous JavaScript
65

65

00:03:08.430  -->  00:03:10.800
just the way we've been doing up until this point.
66

66

00:03:10.800  -->  00:03:13.170
And with synchronous, I mean that all the instructions
67

67

00:03:13.170  -->  00:03:16.530
are executed one after the other, line by line
68

68

00:03:16.530  -->  00:03:18.810
just in the order that they appear in the code.
69

69

00:03:18.810  -->  00:03:21.280
And so that's exactly what we have here.
70

70

00:03:21.280  -->  00:03:23.970
But now let's actually add some asynchronous code here.
71

71

00:03:23.970  -->  00:03:25.120
And in order to do that,
72

72

00:03:25.120  -->  00:03:27.420
we're going to use the setTimeout function,
73

73

00:03:27.420  -->  00:03:30.430
which is basically to set a timer in JavaScript.
74

74

00:03:30.430  -->  00:03:32.520
And that will then allow us to write code
75

75

00:03:32.520  -->  00:03:34.710
that should be executed later, okay?
76

76

00:03:34.710  -->  00:03:36.853
So that is asynchronous JavaScript.
77

77

00:03:37.910  -->  00:03:39.610
So let's get rid of this one here.
78

78

00:03:40.770  -->  00:03:43.173
And now I can call the setTimeout function.
79

79

00:03:44.490  -->  00:03:47.243
So, setTimeout function is a function
80

80

00:03:47.243  -->  00:03:51.010
that we can pass a callback and also the time.
81

81

00:03:51.010  -->  00:03:52.720
So, first is the callback,
82

82

00:03:52.720  -->  00:03:54.963
and again I'm going to use the arrow syntax.
83

83

00:03:57.320  -->  00:03:58.960
So no arguments here.
84

84

00:03:58.960  -->  00:04:01.220
And then the content of the function in here.
85

85

00:04:01.220  -->  00:04:02.830
And then the second argument we pass
86

86

00:04:02.830  -->  00:04:05.470
into the setTimeout function is for how long
87

87

00:04:05.470  -->  00:04:08.490
we want the timer to run in milliseconds.
88

88

00:04:08.490  -->  00:04:11.180
Okay, so I'm going to put here 2,000 milliseconds
89

89

00:04:11.180  -->  00:04:12.750
which means two seconds.
90

90

00:04:12.750  -->  00:04:14.860
And after this two seconds have passed,
91

91

00:04:14.860  -->  00:04:18.633
then this callback function that we passed in here will run.
92

92

00:04:20.110  -->  00:04:22.090
And this callback function here will be very simple.
93

93

00:04:22.090  -->  00:04:26.580
All I want to do is to actually log something to the console
94

94

00:04:26.580  -->  00:04:30.120
let's say async hey there.
95

95

00:04:30.120  -->  00:04:33.040
And let's get rid here of this side panel.
96

96

00:04:33.040  -->  00:04:35.450
Okay, so let's review what we have here.
97

97

00:04:35.450  -->  00:04:37.820
First off, we call the console log,
98

98

00:04:37.820  -->  00:04:39.600
then we call the second function,
99

99

00:04:39.600  -->  00:04:42.790
and then in the second function we call this timer here.
100

100

00:04:42.790  -->  00:04:47.050
Which after two seconds, will then run this function here.
101

101

00:04:47.050  -->  00:04:49.860
Okay, and then after that we run this console.log,
102

102

00:04:49.860  -->  00:04:52.160
which will log the end to the console.
103

103

00:04:52.160  -->  00:04:55.640
So what do you think the result of this code will be?
104

104

00:04:55.640  -->  00:04:57.400
Can you guess that?
105

105

00:04:57.400  -->  00:04:58.793
So let's take a look,
106

106

00:05:00.040  -->  00:05:04.060
and you saw that appearing here after two seconds.
107

107

00:05:04.060  -->  00:05:07.430
So first we had hey there, then the end,
108

108

00:05:07.430  -->  00:05:09.600
and only after two seconds then appeared
109

109

00:05:09.600  -->  00:05:11.640
the async hey there.
110

110

00:05:11.640  -->  00:05:13.600
Let's try that again.
111

111

00:05:13.600  -->  00:05:16.200
Let's wait for it, and here we go.
112

112

00:05:16.200  -->  00:05:18.450
Now maybe you expected that first
113

113

00:05:18.450  -->  00:05:19.920
only the hey there appeared,
114

114

00:05:19.920  -->  00:05:21.493
then we called the second function
115

115

00:05:21.493  -->  00:05:23.210
then this timer is run,
116

116

00:05:23.210  -->  00:05:24.550
and then after two seconds
117

117

00:05:24.550  -->  00:05:26.680
it would then print the async hey there
118

118

00:05:26.680  -->  00:05:29.550
and only after that it would print the end.
119

119

00:05:29.550  -->  00:05:31.290
Maybe that was what you expected,
120

120

00:05:31.290  -->  00:05:33.630
but that's simply not how JavaScript works
121

121

00:05:33.630  -->  00:05:35.340
with asynchronous code.
122

122

00:05:35.340  -->  00:05:38.170
Okay, and I'm not going to go into a deep explanation here
123

123

00:05:38.170  -->  00:05:40.610
with this point, because that's what I'm going to do
124

124

00:05:40.610  -->  00:05:41.850
in the next lecture.
125

125

00:05:41.850  -->  00:05:43.410
So the next lecture you will learn
126

126

00:05:43.410  -->  00:05:46.351
exactly how asynchronous JavaScript works behind the scenes
127

127

00:05:46.351  -->  00:05:50.670
with the event loop and the web APIs and some other parts
128

128

00:05:50.670  -->  00:05:52.270
of the JavaScript engine.
129

129

00:05:52.270  -->  00:05:55.350
For now I just want you to notice that all of this code here
130

130

00:05:55.350  -->  00:05:59.010
run and that basically the timer run in the background
131

131

00:05:59.010  -->  00:06:02.970
and then after it finishes, only then it printed
132

132

00:06:02.970  -->  00:06:04.450
here the text to the console.
133

133

00:06:04.450  -->  00:06:06.640
But that didn't stop this code here from running,
134

134

00:06:06.640  -->  00:06:08.320
even before the timer had finished.
135

135

00:06:08.320  -->  00:06:10.840
Okay, so this was just a very simple example
136

136

00:06:10.840  -->  00:06:13.190
to show you what asynchronous JavaScript is,
137

137

00:06:13.190  -->  00:06:14.910
and in the next lecture you will then,
138

138

00:06:14.910  -->  00:06:17.360
as I mentioned before, learn all you need to know
139

139

00:06:17.360  -->  00:06:19.580
in order to deeply understand how
140

140

00:06:19.580  -->  00:06:21.980
asynchronous JavaScript works behind the scenes.
