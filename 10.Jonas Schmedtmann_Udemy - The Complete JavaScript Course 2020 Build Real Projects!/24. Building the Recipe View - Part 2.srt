1
1

00:00:01,232  -->  00:00:06,232
<v ->Hey there! So let's now continue building our recipe view.</v>
2

2

00:00:06,754  -->  00:00:08,246
So in case you don't remember,
3

3

00:00:08,246  -->  00:00:10,255
where we left off is that we now want
4

4

00:00:10,255  -->  00:00:13,994
to create a small function which basically converts
5

5

00:00:13,994  -->  00:00:16,003
these decimal numbers here into fractions.
6

6

00:00:16,003  -->  00:00:19,241
So here, for example, we would have four and a half,
7

7

00:00:19,241  -->  00:00:21,241
here we would have one quarter,
8

8

00:00:21,241  -->  00:00:23,269
here we would have one and three quarters,
9

9

00:00:23,269  -->  00:00:25,740
and so on and so forth. Okay.
10

10

00:00:25,740  -->  00:00:26,596
Now in order to do that,
11

11

00:00:26,596  -->  00:00:30,507
we will actually use a small external third-party package,
12

12

00:00:30,507  -->  00:00:32,517
because coming up with all this code
13

13

00:00:32,517  -->  00:00:35,262
would be a bit too much for this lecture.
14

14

00:00:35,262  -->  00:00:38,497
And so it's a great opportunity to show you how
15

15

00:00:38,497  -->  00:00:41,506
to include, once more, external packages
16

16

00:00:41,506  -->  00:00:44,218
through the npm package manager.
17

17

00:00:44,218  -->  00:00:47,262
So the one that we're gonna use is called fraction.js
18

18

00:00:47,262  -->  00:00:50,750
and it's just a very small, very simple library
19

19

00:00:50,750  -->  00:00:53,261
which will allow us to basically put in a number
20

20

00:00:53,261  -->  00:00:56,273
and then get a numerator and a denominator
21

21

00:00:56,273  -->  00:00:57,495
out of that number, okay?
22

22

00:00:57,495  -->  00:01:00,504
So for example, if you were input 0.75,
23

23

00:01:00,504  -->  00:01:02,586
it would give us a numerator of three
24

24

00:01:02,586  -->  00:01:06,475
and a denominator of four, so three quarters.
25

25

00:01:06,475  -->  00:01:08,015
So all we need to do is to go ahead
26

26

00:01:08,015  -->  00:01:10,515
and use npm install fractional
27

27

00:01:11,744  -->  00:01:13,739
in our terminal,
28

28

00:01:13,739  -->  00:01:15,011
and not the process that it's running,
29

29

00:01:15,011  -->  00:01:17,344
but of course this one here.
30

30

00:01:18,248  -->  00:01:22,764
And we also want to save it in our package-adjacent pile.
31

31

00:01:22,764  -->  00:01:26,597
And here we go. So, let's take a look at that.
32

32

00:01:27,741  -->  00:01:31,989
Indeed! Here you go. So fractional is now available to us.
33

33

00:01:31,989  -->  00:01:35,239
And so we can go ahead and import that.
34

34

00:01:36,743  -->  00:01:38,160
So we will import
35

35

00:01:40,260  -->  00:01:42,343
and it is a named export,
36

36

00:01:44,007  -->  00:01:46,020
and I'm going to show it to you in a second--
37

37

00:01:46,020  -->  00:01:49,520
from, and now we just need the fractional.
38

38

00:01:52,976  -->  00:01:56,268
So again, for an external package installed through npm,
39

39

00:01:56,268  -->  00:01:58,252
we don't need to include the path.
40

40

00:01:58,252  -->  00:02:01,622
And actually this one is called fraction,
41

41

00:02:01,622  -->  00:02:03,497
and not fractional, okay?
42

42

00:02:03,497  -->  00:02:07,247
So this package doesn't have a really good documentation,
43

43

00:02:07,247  -->  00:02:09,759
but I know that it's exporting a named export
44

44

00:02:09,759  -->  00:02:12,254
called fraction because that's what we see here.
45

45

00:02:12,254  -->  00:02:15,741
So this here is another way of importing modules
46

46

00:02:15,741  -->  00:02:17,168
with an older syntax, okay?
47

47

00:02:17,168  -->  00:02:19,009
So this is like the node.js syntax,
48

48

00:02:19,009  -->  00:02:21,503
and not the ES6 syntax that we've been using.
49

49

00:02:21,503  -->  00:02:26,465
But it requires here this package and then the .Fraction.
50

50

00:02:26,465  -->  00:02:28,758
And so this here is the one that we're looking for
51

51

00:02:28,758  -->  00:02:31,505
and the one that we imported over here,
52

52

00:02:31,505  -->  00:02:32,999
so that's a named export.
53

53

00:02:32,999  -->  00:02:33,832
You can also see that,
54

54

00:02:33,832  -->  00:02:37,745
in the index.js file-- this is not really important,
55

55

00:02:37,745  -->  00:02:40,504
but just in case that you need to know this kind of stuff.
56

56

00:02:40,504  -->  00:02:44,245
So you see here module.export.fraction
57

57

00:02:44,245  -->  00:02:48,230
and so you see that it has a named export called fraction.
58

58

00:02:48,230  -->  00:02:49,496
And so that's the one that we're importing
59

59

00:02:49,496  -->  00:02:52,163
here now at the top of our file.
60

60

00:02:53,510  -->  00:02:55,762
Okay, so let's create a function here called
61

61

00:02:55,762  -->  00:02:57,429
form-at-the-count...
62

62

00:03:00,989  -->  00:03:04,754
where you put in a count, so basically a number,
63

63

00:03:04,754  -->  00:03:09,100
and then we're gonna return a formatted string.
64

64

00:03:09,100  -->  00:03:10,109
And we're then going to go ahead
65

65

00:03:10,109  -->  00:03:13,351
and use that here in the render recipe.
66

66

00:03:13,351  -->  00:03:16,976
Or actually, it's in the create ingredient.
67

67

00:03:16,976  -->  00:03:19,472
Okay, so it's right here.
68

68

00:03:19,472  -->  00:03:23,139
So we pass that in into format in the count.
69

69

00:03:26,990  -->  00:03:30,854
And this will then return a better formatted number here
70

70

00:03:30,854  -->  00:03:33,999
instead of the raw number that we have
71

71

00:03:33,999  -->  00:03:35,506
in our data in our object.
72

72

00:03:35,506  -->  00:03:40,506
So let's start out by asking if we actually have a count.
73

73

00:03:40,621  -->  00:03:45,240
Because it is possible that, from our data processing,
74

74

00:03:45,240  -->  00:03:47,494
the count is actually undefined.
75

75

00:03:47,494  -->  00:03:50,766
So imagine before that there might be some unsolved cases
76

76

00:03:50,766  -->  00:03:53,266
here in the parse ingredients,
77

77

00:03:54,239  -->  00:03:58,764
and so it might sometimes return undefined for the count.
78

78

00:03:58,764  -->  00:04:00,975
So usually that's not the case, but it might happen,
79

79

00:04:00,975  -->  00:04:03,243
and so in that case all this code
80

80

00:04:03,243  -->  00:04:05,247
that we're gonna put here is not going to run.
81

81

00:04:05,247  -->  00:04:09,497
And instead we can simply return something like this,
82

82

00:04:09,497  -->  00:04:10,989
so instead a question mark, okay?
83

83

00:04:10,989  -->  00:04:13,985
So instead of saying "undefined" in either interface,
84

84

00:04:13,985  -->  00:04:15,256
it will have this question mark
85

85

00:04:15,256  -->  00:04:17,996
which is gonna look much nicer.
86

86

00:04:17,996  -->  00:04:22,996
So let's pretend that our example here is 2.5 as the count,
87

87

00:04:23,506  -->  00:04:25,748
so just that we have an example here
88

88

00:04:25,748  -->  00:04:29,007
in order to know how to build up this code.
89

89

00:04:29,007  -->  00:04:32,759
Now this is then later going to translate into two
90

90

00:04:32,759  -->  00:04:36,001
and one-half, right, so just as a reference.
91

91

00:04:36,001  -->  00:04:37,444
Now the fourth thing that I want to do is
92

92

00:04:37,444  -->  00:04:41,990
to separate the integer part from the decimal part.
93

93

00:04:41,990  -->  00:04:45,758
Cause imagine if it were 0.5, then it would look different,
94

94

00:04:45,758  -->  00:04:49,268
and let's actually take that as an example as well.
95

95

00:04:49,268  -->  00:04:52,768
So if it was 0.5, then we would just have a half,
96

96

00:04:52,768  -->  00:04:54,760
and that's of course a different situation here.
97

97

00:04:54,760  -->  00:04:58,001
So let's start by doing that.
98

98

00:04:58,001  -->  00:05:00,497
And now we are going to use something called destructuring,
99

99

00:05:00,497  -->  00:05:05,497
and I hope you remember that from ES2015 or ES6 section.
100

100

00:05:05,989  -->  00:05:08,511
So basically we can define two variables
101

101

00:05:08,511  -->  00:05:13,256
here at the same time. And you're gonna see why in a second.
102

102

00:05:13,256  -->  00:05:14,089
So we have our count. We will convert it to a string,
103

103

00:05:14,089  -->  00:05:15,422
so use tostring.
104

104

00:05:20,744  -->  00:05:22,661
So now we can split it,
105

105

00:05:24,984  -->  00:05:27,752
and of course split it by deduct,
106

106

00:05:27,752  -->  00:05:29,483
and so this will now be an array
107

107

00:05:29,483  -->  00:05:33,503
of a two and a five both as strings in this example here.
108

108

00:05:33,503  -->  00:05:35,759
In 2.5 we will now have the integer
109

109

00:05:35,759  -->  00:05:37,987
as two and the decimal as five.
110

110

00:05:37,987  -->  00:05:39,753
Now the only problem with that is
111

111

00:05:39,753  -->  00:05:42,001
that they are now both strings
112

112

00:05:42,001  -->  00:05:43,521
and you want them to be as numbers.
113

113

00:05:43,521  -->  00:05:46,239
So we need a new array with them as numbers,
114

114

00:05:46,239  -->  00:05:48,656
and so we can use map, right?
115

115

00:05:50,745  -->  00:05:54,495
And we're gonna do in here is to simply parse
116

116

00:05:55,997  -->  00:05:59,260
the element with a base of ten.
117

117

00:05:59,260  -->  00:06:01,997
And so now we're gonna have two and five both
118

118

00:06:01,997  -->  00:06:05,508
relay as numbers in these two variables, right?
119

119

00:06:05,508  -->  00:06:08,258
Now, in case there is no decimal,
120

120

00:06:09,254  -->  00:06:11,246
which is perfectly acceptable,
121

121

00:06:11,246  -->  00:06:14,329
then we must simply return the count.
122

122

00:06:15,607  -->  00:06:18,013
Imagine that we have just two.
123

123

00:06:18,013  -->  00:06:21,009
So if we have two, then we will have no decimal at all,
124

124

00:06:21,009  -->  00:06:23,014
and so we can simply return the original count,
125

125

00:06:23,014  -->  00:06:25,014
which was two, and call it a day
126

126

00:06:25,014  -->  00:06:29,738
because then no work is really done here at this point.
127

127

00:06:29,738  -->  00:06:33,483
So that's the first case actually, but now let's say
128

128

00:06:33,483  -->  00:06:34,733
"if the integer
129

129

00:06:36,729  -->  00:06:37,750
is zero".
130

130

00:06:37,750  -->  00:06:40,284
And so that would be this case here.
131

131

00:06:40,284  -->  00:06:44,744
So integer is zero, and five is the decimal, so 0.5.
132

132

00:06:44,744  -->  00:06:47,494
And so now comes the case where we actually want to convert
133

133

00:06:47,494  -->  00:06:51,661
0.5 to a string looking like this, so to one half.
134

134

00:06:52,518  -->  00:06:53,529
So how do we do that?
135

135

00:06:53,529  -->  00:06:57,474
Well, we're gonna use the fraction library now.
136

136

00:06:57,474  -->  00:06:59,250
So we create a new variable, and I'm simply gonna call
137

137

00:06:59,250  -->  00:07:01,976
it fr, which stands for fractional,
138

138

00:07:01,976  -->  00:07:04,643
and then we say "new fraction...
139

139

00:07:05,725  -->  00:07:07,058
based on count".
140

140

00:07:08,479  -->  00:07:12,018
Okay. So based on count it will now create a fraction,
141

141

00:07:12,018  -->  00:07:16,510
and from there we can read the numerator and the denominator
142

142

00:07:16,510  -->  00:07:20,004
And so, what we're gonna return here is a string,
143

143

00:07:20,004  -->  00:07:21,671
so a template string
144

144

00:07:23,221  -->  00:07:24,054
with fr
145

145

00:07:27,245  -->  00:07:28,078
numerator,
146

146

00:07:29,247  -->  00:07:33,247
then a slash-- and actually without the space,
147

147

00:07:33,247  -->  00:07:35,247
and then fr.denominator.
148

148

00:07:39,226  -->  00:07:41,995
And so in case we have 0.5, well,
149

149

00:07:41,995  -->  00:07:45,517
this will automatically calculate that the numerator is one
150

150

00:07:45,517  -->  00:07:48,395
and the denominator is two, okay?
151

151

00:07:48,395  -->  00:07:51,040
And so then we're gonna return one half, just like this,
152

152

00:07:51,040  -->  00:07:53,499
and with that we're done with the formatting
153

153

00:07:53,499  -->  00:07:56,249
in case that the integer is zero.
154

154

00:07:57,723  -->  00:08:00,499
Now if it's not so, for example 2.5,
155

155

00:08:00,499  -->  00:08:03,082
well then it's a bit different.
156

156

00:08:04,752  -->  00:08:08,252
So we still need to create a new fraction,
157

157

00:08:09,738  -->  00:08:11,679
but really we don't want to create
158

158

00:08:11,679  -->  00:08:14,020
a new fraction of all of this.
159

159

00:08:14,020  -->  00:08:17,758
We just want to create the new fraction of the 0.5 still,
160

160

00:08:17,758  -->  00:08:21,771
cause otherwise we would simply end up with five halves,
161

161

00:08:21,771  -->  00:08:23,406
so we could have this intermediate
162

162

00:08:23,406  -->  00:08:27,742
step here like five halves, so that's the same.
163

163

00:08:27,742  -->  00:08:31,526
But we don't wanna display it like this, which is still 2.5,
164

164

00:08:31,526  -->  00:08:34,264
but it looks better like this, so two and a half.
165

165

00:08:34,264  -->  00:08:37,010
That's a bit more logical, right? It makes more sense.
166

166

00:08:37,010  -->  00:08:38,506
And so what we really want is to
167

167

00:08:38,506  -->  00:08:42,004
create a fraction just of the 0.5 part,
168

168

00:08:42,004  -->  00:08:47,004
and what that means is that we simply have to do count minus
169

169

00:08:47,715  -->  00:08:49,472
the integer.
170

170

00:08:49,472  -->  00:08:52,764
Right? And then from there it's actually pretty similar.
171

171

00:08:52,764  -->  00:08:54,264
So this part here,
172

172

00:08:56,505  -->  00:08:58,991
now all that's missing is of course--
173

173

00:08:58,991  -->  00:09:02,986
and I hope you can guess it-- the integer part.
174

174

00:09:02,986  -->  00:09:07,979
So we do this fraction here only with 2.5 minus two, right?
175

175

00:09:07,979  -->  00:09:10,770
So count is 2.5 and integer is two.
176

176

00:09:10,770  -->  00:09:13,521
So 2.5 minus two will be point five,
177

177

00:09:13,521  -->  00:09:14,994
which will be then one half.
178

178

00:09:14,994  -->  00:09:17,755
And then here in this return statement
179

179

00:09:17,755  -->  00:09:20,520
in this template string we put it back together, basically.
180

180

00:09:20,520  -->  00:09:24,507
So we put our two and then our one half, which is this.
181

181

00:09:24,507  -->  00:09:27,262
Okay, so once more this is really not for you
182

182

00:09:27,262  -->  00:09:29,997
to memorize how this specific case works,
183

183

00:09:29,997  -->  00:09:33,517
I just want you to be able to think logically, basically,
184

184

00:09:33,517  -->  00:09:37,241
about how we can achieve the goals we need to achieve, okay?
185

185

00:09:37,241  -->  00:09:39,502
And in this case there are some particularities,
186

186

00:09:39,502  -->  00:09:43,971
like having to do it this way here, for example.
187

187

00:09:43,971  -->  00:09:48,596
But that should now work, so let's test it out.
188

188

00:09:48,596  -->  00:09:50,004
And we're still ordering the same recipe
189

189

00:09:50,004  -->  00:09:52,001
and indeed, here we go!
190

190

00:09:52,001  -->  00:09:55,263
So we have four and a half, one and three quarters,
191

191

00:09:55,263  -->  00:09:57,513
one quarter, and one and three quarters.
192

192

00:09:57,513  -->  00:10:00,740
So that's perfect; it works just fine.
193

193

00:10:00,740  -->  00:10:02,915
And now one last thing that I want to implement here
194

194

00:10:02,915  -->  00:10:06,130
is the functionality that basically the recipe
195

195

00:10:06,130  -->  00:10:08,760
that we select here from our search list
196

196

00:10:08,760  -->  00:10:12,492
will then get selected with this gray background here.
197

197

00:10:12,492  -->  00:10:15,270
So right now it's this pizza here, so this one is gray,
198

198

00:10:15,270  -->  00:10:17,119
and if I select this one here, well,
199

199

00:10:17,119  -->  00:10:20,229
then this one here stays gray. Okay.
200

200

00:10:20,229  -->  00:10:22,278
So that shouldn't be all too hard,
201

201

00:10:22,278  -->  00:10:25,780
so let's go back to our code and quickly implement that.
202

202

00:10:25,780  -->  00:10:30,780
And we actually want this to happen when a recipe loads,
203

203

00:10:30,983  -->  00:10:32,626
but the time and implementation itself
204

204

00:10:32,626  -->  00:10:34,748
happens in a search view, okay?
205

205

00:10:34,748  -->  00:10:36,511
So let's actually add a method
206

206

00:10:36,511  -->  00:10:41,486
or function here in the search view, and I'm gonna call it,
207

207

00:10:41,486  -->  00:10:44,486
let's say, the "highlight selected".
208

208

00:10:49,233  -->  00:10:52,483
And so for that I need an ID of course,
209

209

00:10:54,249  -->  00:10:56,990
and so let's see how we can do that.
210

210

00:10:56,990  -->  00:11:01,990
So what I'm gonna do is document a query selector of course,
211

211

00:11:03,499  -->  00:11:04,757
because it's an element that's not
212

212

00:11:04,757  -->  00:11:06,503
yet there when we load the page.
213

213

00:11:06,503  -->  00:11:09,247
And so I can do it in my base.js,
214

214

00:11:09,247  -->  00:11:12,501
so in my elements object that we've been using so far.
215

215

00:11:12,501  -->  00:11:14,733
So query selector, and so now we can use the power
216

216

00:11:14,733  -->  00:11:17,500
of the CSS selectors because actually
217

217

00:11:17,500  -->  00:11:19,502
that's what we can input here.
218

218

00:11:19,502  -->  00:11:23,489
So this is like a CSS selector, as you know already,
219

219

00:11:23,489  -->  00:11:26,750
and so we can select all links based on attributes
220

220

00:11:26,750  -->  00:11:30,504
and the attribute that we're looking for is the href.
221

221

00:11:30,504  -->  00:11:33,671
And we want to say that it has the ID.
222

222

00:11:35,229  -->  00:11:38,997
Simple as this. So we have a link always with the
223

223

00:11:38,997  -->  00:11:41,968
hash symbol and then the ID, right?
224

224

00:11:41,968  -->  00:11:45,755
So let's take a look at the search list just to make sure
225

225

00:11:45,755  -->  00:11:47,740
that we're on the same page here.
226

226

00:11:47,740  -->  00:11:49,473
So the links they are, as you can see,
227

227

00:11:49,473  -->  00:11:51,520
down there and also up here.
228

228

00:11:51,520  -->  00:11:54,230
It's always the hash and then the ID, right?
229

229

00:11:54,230  -->  00:11:56,110
And so we want to select the element that,
230

230

00:11:56,110  -->  00:12:00,009
as an href attribute, has exactly this ID here,
231

231

00:12:00,009  -->  00:12:01,981
so this hash, okay?
232

232

00:12:01,981  -->  00:12:05,760
So you want to select it and then, on the class list,
233

233

00:12:05,760  -->  00:12:07,093
add the class of
234

234

00:12:09,498  -->  00:12:11,081
result link active.
235

235

00:12:15,476  -->  00:12:19,233
And again, I could put this here into the--
236

236

00:12:19,233  -->  00:12:21,480
Where is it? It's not this one.
237

237

00:12:21,480  -->  00:12:24,255
So I could put it here into the element strings,
238

238

00:12:24,255  -->  00:12:26,498
but I'm not going to keep this one here,
239

239

00:12:26,498  -->  00:12:27,853
because then if something changes
240

240

00:12:27,853  -->  00:12:30,762
I will have to actually change it here in element strings
241

241

00:12:30,762  -->  00:12:34,751
and also in the code that I put in here.
242

242

00:12:34,751  -->  00:12:37,385
So, like in here. I would have to go ahead
243

243

00:12:37,385  -->  00:12:39,753
and add these element strings,
244

244

00:12:39,753  -->  00:12:42,250
also here inside of all this markup that I input here.
245

245

00:12:42,250  -->  00:12:43,483
And that's way too much work,
246

246

00:12:43,483  -->  00:12:45,523
and so I'm not going to go that way.
247

247

00:12:45,523  -->  00:12:47,500
I'm just gonna leave it as it is.
248

248

00:12:47,500  -->  00:12:50,997
Okay, so I'm just going to hard-code these class names here,
249

249

00:12:50,997  -->  00:12:54,004
just as I do it also down here.
250

250

00:12:54,004  -->  00:12:57,766
Okay so here we also have all of these hard-coded basically.
251

251

00:12:57,766  -->  00:13:00,246
So, results links-- and that's actually the one
252

252

00:13:00,246  -->  00:13:02,240
where this new class will be attached--
253

253

00:13:02,240  -->  00:13:04,254
so result links and, if it's active,
254

254

00:13:04,254  -->  00:13:07,260
then we have result__link--active.
255

255

00:13:07,260  -->  00:13:11,255
And actually, yeah, it is results and not just result.
256

256

00:13:11,255  -->  00:13:13,318
And so now you see it's the same result link active
257

257

00:13:13,318  -->  00:13:16,753
and then result link if it is not active.
258

258

00:13:16,753  -->  00:13:19,999
Okay, so now it's selected, and now let's go ahead
259

259

00:13:19,999  -->  00:13:21,582
into our controller
260

260

00:13:24,503  -->  00:13:25,920
and say highlight
261

261

00:13:29,733  -->  00:13:30,990
the selected search item.
262

262

00:13:30,990  -->  00:13:32,984
And of course we have to do it again
263

263

00:13:32,984  -->  00:13:35,485
in the recipe controller because this only happens
264

264

00:13:35,485  -->  00:13:38,247
as soon as we load a recipe, alright?
265

265

00:13:38,247  -->  00:13:40,997
So, searchview.highlightSelected,
266

266

00:13:42,729  -->  00:13:44,062
and then the ID.
267

267

00:13:46,511  -->  00:13:51,258
Okay let's take a look at it and it will not be perfect yet,
268

268

00:13:51,258  -->  00:13:54,008
and you will see why in a second.
269

269

00:13:54,985  -->  00:13:57,491
So if I hit it now here--
270

270

00:13:57,491  -->  00:14:00,253
Well, then it's actually not really working at all.
271

271

00:14:00,253  -->  00:14:01,737
So let's check out the console here.
272

272

00:14:01,737  -->  00:14:03,249
So what do we have here?
273

273

00:14:03,249  -->  00:14:05,746
It says here that it's not a valid selector,
274

274

00:14:05,746  -->  00:14:08,163
and so let's see why that is.
275

275

00:14:10,490  -->  00:14:12,247
Yeah, we can close this one, I guess,
276

276

00:14:12,247  -->  00:14:14,979
for now and the recipe as well.
277

277

00:14:14,979  -->  00:14:17,499
And so the problem here is that we are
278

278

00:14:17,499  -->  00:14:20,005
lacking some quotes here, okay?
279

279

00:14:20,005  -->  00:14:21,749
So in CSS in the selector here,
280

280

00:14:21,749  -->  00:14:24,749
you have to put it into quotes.
281

281

00:14:24,749  -->  00:14:27,023
So let's check it out again,
282

282

00:14:27,023  -->  00:14:29,999
and now it says it cannot read class list of null.
283

283

00:14:29,999  -->  00:14:33,082
And so that's actually another error,
284

284

00:14:34,243  -->  00:14:37,769
which is that in this case there was not really a search,
285

285

00:14:37,769  -->  00:14:39,268
and so how can we highlight a search
286

286

00:14:39,268  -->  00:14:42,239
result that's not really there?
287

287

00:14:42,239  -->  00:14:46,406
So let's add an if-clause before that, so if state
288

288

00:14:48,472  -->  00:14:50,494
dot search-- so if this exists,
289

289

00:14:50,494  -->  00:14:52,007
then it means that there was a search,
290

290

00:14:52,007  -->  00:14:56,233
and only then one of the search items can be selected.
291

291

00:14:56,233  -->  00:14:58,483
Okay, so let's wait for it.
292

292

00:15:03,988  -->  00:15:06,734
And it still says it can't read class list of null,
293

293

00:15:06,734  -->  00:15:11,567
and I'm not sure why that is, so let's check it out again.
294

294

00:15:13,478  -->  00:15:16,238
I guess it must be somewhere here.
295

295

00:15:16,238  -->  00:15:19,267
So indeed, this quote is not in the right place.
296

296

00:15:19,267  -->  00:15:21,494
It should be here.
297

297

00:15:21,494  -->  00:15:24,260
So this is here what goes inside the quotes,
298

298

00:15:24,260  -->  00:15:26,732
so just the ID with the hash.
299

299

00:15:26,732  -->  00:15:31,642
And of course, this quote cannot be outside of this bracket.
300

300

00:15:31,642  -->  00:15:33,392
Try it one more time.
301

301

00:15:36,254  -->  00:15:37,504
Ah, here it is.
302

302

00:15:39,993  -->  00:15:44,759
No, it's still not working. What's going on here?
303

303

00:15:44,759  -->  00:15:48,259
Well, it doesn't give me an error anymore.
304

304

00:15:49,499  -->  00:15:51,021
Let's try another one here.
305

305

00:15:51,021  -->  00:15:54,004
And it's still not working, as you can see here.
306

306

00:15:54,004  -->  00:15:56,921
And so, let's try it one more time.
307

307

00:15:58,496  -->  00:15:59,734
Now, what's wrong is this.
308

308

00:15:59,734  -->  00:16:02,760
So when we add a class to the class list,
309

309

00:16:02,760  -->  00:16:04,253
we cannot put the dot selector
310

310

00:16:04,253  -->  00:16:07,020
because the dot is just a selector.
311

311

00:16:07,020  -->  00:16:08,740
And so here we really just need to pass
312

312

00:16:08,740  -->  00:16:11,754
in the class name and not the selector.
313

313

00:16:11,754  -->  00:16:16,223
Okay, and so that should now finally fix it.
314

314

00:16:16,223  -->  00:16:18,806
So let's try it out again here.
315

315

00:16:19,737  -->  00:16:24,269
We're adding pizza, and let's just click the first one here.
316

316

00:16:24,269  -->  00:16:27,352
And now it stays active! Okay, great.
317

317

00:16:29,008  -->  00:16:31,738
Now the only problem is that when I click this one here
318

318

00:16:31,738  -->  00:16:33,999
then the other is still active.
319

319

00:16:33,999  -->  00:16:36,011
And when I click this and this and this,
320

320

00:16:36,011  -->  00:16:39,016
and so all of them now they stay active.
321

321

00:16:39,016  -->  00:16:42,011
And so a very simple solution to that is to--
322

322

00:16:42,011  -->  00:16:43,749
Whoa, what's happening here now?
323

323

00:16:43,749  -->  00:16:47,242
I guess I clicked on too many of them at the same time.
324

324

00:16:47,242  -->  00:16:48,758
So what I have to do here is,
325

325

00:16:48,758  -->  00:16:51,013
before adding the class to one of them,
326

326

00:16:51,013  -->  00:16:55,252
I have to remove it from all of them first,
327

327

00:16:55,252  -->  00:16:58,989
So let's just select them all first
328

328

00:16:58,989  -->  00:17:00,521
and put them into a variable,
329

329

00:17:00,521  -->  00:17:03,521
and I'm gonna call it results array.
330

330

00:17:05,204  -->  00:17:07,488
And so I'm making Array.from,
331

331

00:17:07,488  -->  00:17:10,746
which I already explained in the ES6 section.
332

332

00:17:10,746  -->  00:17:12,163
So document.query
333

333

00:17:13,485  -->  00:17:14,485
Selectorall,
334

334

00:17:16,990  -->  00:17:20,756
and the ones that I'm looking for is this results link.
335

335

00:17:20,756  -->  00:17:25,018
And again I'm not using it from the element strings.
336

336

00:17:25,018  -->  00:17:27,493
But instead I'm simply hard-coding it right here,
337

337

00:17:27,493  -->  00:17:29,751
so I'm not boring you here in this video
338

338

00:17:29,751  -->  00:17:33,511
and make them longer and longer than they really have to be.
339

339

00:17:33,511  -->  00:17:38,428
So this is an array now, and now finally results dot array.
340

340

00:17:39,482  -->  00:17:41,649
And then for each of them,
341

341

00:17:42,487  -->  00:17:44,070
let's simply remove
342

342

00:17:44,994  -->  00:17:45,992
the class.
343

343

00:17:45,992  -->  00:17:49,159
So elements dot class list dot remove,
344

344

00:17:50,472  -->  00:17:53,555
and then let's just get it from here.
345

345

00:17:56,987  -->  00:17:58,987
And what was that? Okay.
346

346

00:18:00,479  -->  00:18:01,729
Alright, great!
347

347

00:18:03,518  -->  00:18:05,518
Just the final test now.
348

348

00:18:09,712  -->  00:18:12,256
Now let's select this one and let's hope it works.
349

349

00:18:12,256  -->  00:18:15,423
And, indeed, it removes it from there.
350

350

00:18:17,224  -->  00:18:18,510
So it really works.
351

351

00:18:18,510  -->  00:18:21,243
So, I guess we're done with this part.
352

352

00:18:21,243  -->  00:18:24,235
Now, there's just one thing that there's left to implement,
353

353

00:18:24,235  -->  00:18:26,786
so they can look at it here again.
354

354

00:18:26,786  -->  00:18:29,490
And that is of course the functionality where we can
355

355

00:18:29,490  -->  00:18:32,988
decrease and increase the servings.
356

356

00:18:32,988  -->  00:18:35,245
So you see, whenever I hit this button here
357

357

00:18:35,245  -->  00:18:38,503
or decrease button, then all of these numbers here--
358

358

00:18:38,503  -->  00:18:40,247
so the count numbers of the ingredients,
359

359

00:18:40,247  -->  00:18:43,212
they all get automatically updated.
360

360

00:18:43,212  -->  00:18:44,763
And so that's what we're still missing,
361

361

00:18:44,763  -->  00:18:46,749
and so we're gonna take care of that
362

362

00:18:46,749  -->  00:18:50,499
right in the next lecture. So, see you there.
