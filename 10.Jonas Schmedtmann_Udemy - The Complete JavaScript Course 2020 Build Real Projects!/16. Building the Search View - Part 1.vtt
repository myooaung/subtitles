WEBVTT
1
1

00:00:01.080  -->  00:00:02.650
<v Instructor>This will be a longer video,</v>
2

2

00:00:02.650  -->  00:00:04.850
where we're gonna write a couple of functions
3

3

00:00:04.850  -->  00:00:06.550
for the search view.
4

4

00:00:06.550  -->  00:00:08.320
And so in this video, you're gonna learn
5

5

00:00:08.320  -->  00:00:11.210
a couple of advanced DOM manipulation techniques.
6

6

00:00:11.210  -->  00:00:13.340
We're gonna use ES6 template strings
7

7

00:00:13.340  -->  00:00:16.090
to render entire HTML components.
8

8

00:00:16.090  -->  00:00:18.320
You will learn how to create a loading spinner,
9

9

00:00:18.320  -->  00:00:19.857
which is really cool, I think,
10

10

00:00:19.857  -->  00:00:23.330
and a lot of other smaller things and techniques.
11

11

00:00:23.330  -->  00:00:25.170
So let's get straight to it.
12

12

00:00:25.170  -->  00:00:28.970
So we already have the file here, searchView.js.
13

13

00:00:28.970  -->  00:00:31.653
Let's close up this one, this one here as well.
14

14

00:00:33.070  -->  00:00:35.920
And so yeah, so this module will have a bunch
15

15

00:00:35.920  -->  00:00:38.710
of functions regarding the search view.
16

16

00:00:38.710  -->  00:00:42.420
And so we will export all of them using named exports.
17

17

00:00:42.420  -->  00:00:43.741
Okay?
18

18

00:00:43.741  -->  00:00:45.820
And so let's start by the one to read the input
19

19

00:00:45.820  -->  00:00:49.590
from our input form, okay?
20

20

00:00:49.590  -->  00:00:51.130
So remember the syntax.
21

21

00:00:51.130  -->  00:00:53.520
We write export, and then when we're using
22

22

00:00:53.520  -->  00:00:56.560
named export, we just use the name of the variable,
23

23

00:00:56.560  -->  00:00:59.470
the function in this case, that we want to export.
24

24

00:00:59.470  -->  00:01:02.163
So getInput, in this case.
25

25

00:01:05.750  -->  00:01:08.360
So what do we want to do in this function?
26

26

00:01:08.360  -->  00:01:10.920
Well, all we want to do is really to return
27

27

00:01:10.920  -->  00:01:13.460
the input value of the field.
28

28

00:01:13.460  -->  00:01:15.170
So we will select the DOM element,
29

29

00:01:15.170  -->  00:01:17.890
get the value, and then simply return it.
30

30

00:01:17.890  -->  00:01:20.703
Now, we could do documents.querySelector
31

31

00:01:20.703  -->  00:01:21.850
and all that stuff here again,
32

32

00:01:21.850  -->  00:01:24.610
but I think it's better to have one central variable
33

33

00:01:24.610  -->  00:01:27.150
where we have all of these DOM elements
34

34

00:01:27.150  -->  00:01:28.560
that we need in our app.
35

35

00:01:28.560  -->  00:01:30.640
That's a bit similar, again, to the Budgety app,
36

36

00:01:30.640  -->  00:01:32.640
where we also did something similar.
37

37

00:01:32.640  -->  00:01:34.670
Because it's a lot easier to have everything
38

38

00:01:34.670  -->  00:01:36.540
in one central place instead of having
39

39

00:01:36.540  -->  00:01:39.090
these documents query selectors all over the place,
40

40

00:01:39.090  -->  00:01:41.240
which can turn into a maintenance nightmare
41

41

00:01:41.240  -->  00:01:44.150
if we ever were to change, like this entire
42

42

00:01:44.150  -->  00:01:45.560
underlying markup here.
43

43

00:01:45.560  -->  00:01:48.860
And with this, our views will get a little bit
44

44

00:01:48.860  -->  00:01:52.500
more decoupled from our markup, okay?
45

45

00:01:52.500  -->  00:01:54.920
So let's now create a new module for that
46

46

00:01:54.920  -->  00:01:56.800
right here in the views folder, as well.
47

47

00:01:56.800  -->  00:02:01.800
And I'm going to call this one base.js.
48

48

00:02:01.880  -->  00:02:02.713
Okay?
49

49

00:02:04.020  -->  00:02:06.400
And we can also go ahead, before we forget,
50

50

00:02:06.400  -->  00:02:08.880
we can go ahead and import it here.
51

51

00:02:08.880  -->  00:02:10.330
Or maybe not yet, okay?
52

52

00:02:10.330  -->  00:02:12.460
Let's first export some stuff here.
53

53

00:02:12.460  -->  00:02:14.960
So what we want to do here is to create
54

54

00:02:14.960  -->  00:02:17.513
an object which will contain all of the elements
55

55

00:02:17.513  -->  00:02:19.020
that we select from our DOM,
56

56

00:02:19.020  -->  00:02:21.190
so all the elements that we need from our app.
57

57

00:02:21.190  -->  00:02:23.170
We will then export that.
58

58

00:02:23.170  -->  00:02:26.713
So export variable called element.
59

59

00:02:30.103  -->  00:02:31.560
And so this will be an object again.
60

60

00:02:31.560  -->  00:02:33.280
And I'm doing it as a named export,
61

61

00:02:33.280  -->  00:02:35.190
because later on we will have some more stuff
62

62

00:02:35.190  -->  00:02:36.840
here in this module.
63

63

00:02:36.840  -->  00:02:40.950
And so let's go with the named exports here, okay?
64

64

00:02:40.950  -->  00:02:44.483
So let's call this one searchInput.
65

65

00:02:49.350  -->  00:02:50.460
And so what we want to do here
66

66

00:02:50.460  -->  00:02:52.210
is document.querySelector.
67

67

00:02:52.210  -->  00:02:55.100
And let's take a look in the markup again.
68

68

00:02:55.100  -->  00:02:56.730
And so the input field that we're looking for
69

69

00:02:56.730  -->  00:02:59.084
is called search_field.
70

70

00:02:59.084  -->  00:03:01.347
So let's copy it, and here we go.
71

71

00:03:03.290  -->  00:03:05.660
So now we have an element with a property
72

72

00:03:05.660  -->  00:03:08.260
called search_input, which contains
73

73

00:03:08.260  -->  00:03:11.370
this DOM element here, right?
74

74

00:03:11.370  -->  00:03:15.110
Now, we also did some document.querySelector in here.
75

75

00:03:15.110  -->  00:03:18.000
And so let's actually get rid of that here, as well.
76

76

00:03:18.000  -->  00:03:18.913
Let me copy it,
77

77

00:03:19.960  -->  00:03:22.163
and insert it here.
78

78

00:03:24.920  -->  00:03:27.620
And of course, we're needing the name here.
79

79

00:03:27.620  -->  00:03:30.940
So searchForm for this one.
80

80

00:03:30.940  -->  00:03:32.340
And now lets give it a save.
81

81

00:03:33.860  -->  00:03:35.430
So you see that there's an error here.
82

82

00:03:35.430  -->  00:03:36.990
And so VS Code, this editor here,
83

83

00:03:36.990  -->  00:03:38.780
marks, then, this file here as red
84

84

00:03:38.780  -->  00:03:41.930
in the entire compile tree, okay?
85

85

00:03:41.930  -->  00:03:46.930
Now, we need to of course import this element.
86

86

00:03:47.270  -->  00:03:49.740
And so we use the curly braces, remember,
87

87

00:03:49.740  -->  00:03:54.740
elements from, and this one is in views,
88

88

00:03:56.060  -->  00:03:58.380
and it's called base, okay?
89

89

00:03:58.380  -->  00:04:00.180
And actually, we can also already start
90

90

00:04:00.180  -->  00:04:03.833
by importing this search view file, okay?
91

91

00:04:05.370  -->  00:04:08.920
So let's do, and in this case,
92

92

00:04:08.920  -->  00:04:11.060
we are simply going to import all of the functions,
93

93

00:04:11.060  -->  00:04:12.770
because we already know that we're gonna need
94

94

00:04:12.770  -->  00:04:14.690
all of the functions that are in view
95

95

00:04:14.690  -->  00:04:16.470
in the controller, okay?
96

96

00:04:16.470  -->  00:04:19.900
So we want everything as searchView, okay?
97

97

00:04:22.110  -->  00:04:24.810
And remember that this will then be an object
98

98

00:04:24.810  -->  00:04:26.640
in which all of the exported variables
99

99

00:04:26.640  -->  00:04:31.090
from the search view module will be stored, right?
100

100

00:04:31.090  -->  00:04:33.820
So I explained you that in one of your previous lectures.
101

101

00:04:33.820  -->  00:04:35.490
I hope you remember that.
102

102

00:04:35.490  -->  00:04:40.010
So views, and searchView.
103

103

00:04:40.010  -->  00:04:41.810
All right, and so now we can say
104

104

00:04:42.910  -->  00:04:46.560
elements, and let's take a look at what we called it.
105

105

00:04:46.560  -->  00:04:48.700
So we called it searchForm.
106

106

00:04:48.700  -->  00:04:49.623
Let's get that.
107

107

00:04:51.460  -->  00:04:52.880
And so now we should be good to go.
108

108

00:04:52.880  -->  00:04:54.480
And from now on, we're simply gonna put
109

109

00:04:54.480  -->  00:04:58.260
all of our DOM elements right here into this object.
110

110

00:04:58.260  -->  00:05:01.763
Okay, so let's do the same here again, actually.
111

111

00:05:06.040  -->  00:05:07.083
So let's get
112

112

00:05:11.290  -->  00:05:14.590
this one and import it here, also into the searchView.
113

113

00:05:16.870  -->  00:05:19.377
So element.searchInput, right?
114

114

00:05:24.480  -->  00:05:26.130
Let's double check, and yeah.
115

115

00:05:26.130  -->  00:05:27.610
So it's called searchInput.
116

116

00:05:27.610  -->  00:05:29.440
That is our search field.
117

117

00:05:29.440  -->  00:05:31.740
And all we need to do now, really, is
118

118

00:05:32.900  -->  00:05:34.870
to say that we want the value.
119

119

00:05:34.870  -->  00:05:37.770
So remember that this is an arrow function here, of course.
120

120

00:05:37.770  -->  00:05:39.908
And if you only have one line,
121

121

00:05:39.908  -->  00:05:40.900
then this is an implicit return.
122

122

00:05:40.900  -->  00:05:43.690
So we don't even need to write return.
123

123

00:05:43.690  -->  00:05:46.076
So this will automatically return
124

124

00:05:46.076  -->  00:05:48.300
this value that we specified here,
125

125

00:05:48.300  -->  00:05:50.530
so elements.searchInput.value,
126

126

00:05:50.530  -->  00:05:54.350
which will be whatever we input into the search field.
127

127

00:05:54.350  -->  00:05:57.250
Okay, now let's give it a try here
128

128

00:05:57.250  -->  00:05:59.420
and replace this pizza we had here
129

129

00:06:00.954  -->  00:06:02.452
with what we really want.
130

130

00:06:02.452  -->  00:06:04.750
So how do we specify this function?
131

131

00:06:04.750  -->  00:06:07.070
Well, we simply use searchView,
132

132

00:06:07.070  -->  00:06:09.110
which is, remember, what we imported
133

133

00:06:09.110  -->  00:06:10.670
from the searchView module.
134

134

00:06:10.670  -->  00:06:13.370
And then dot getInput.
135

135

00:06:13.370  -->  00:06:15.890
And my text editor, VS Code, actually
136

136

00:06:15.890  -->  00:06:18.050
already knows that getInput is one
137

137

00:06:18.050  -->  00:06:19.590
of the functions in there.
138

138

00:06:19.590  -->  00:06:21.470
So it's very smart, it's very handy.
139

139

00:06:21.470  -->  00:06:24.330
And so again, it's really a great text editor.
140

140

00:06:24.330  -->  00:06:27.000
Okay, just to make sure that everything works here,
141

141

00:06:27.000  -->  00:06:28.573
let's log it to the console.
142

142

00:06:32.830  -->  00:06:34.410
It should reload now.
143

143

00:06:34.410  -->  00:06:36.170
And we have an error here.
144

144

00:06:36.170  -->  00:06:39.593
So let's go back to searchView.js.
145

145

00:06:41.210  -->  00:06:42.540
And yeah, of course.
146

146

00:06:42.540  -->  00:06:45.400
So I tried to import the base element from the views,
147

147

00:06:45.400  -->  00:06:48.180
but we are already inside of the views folder.
148

148

00:06:48.180  -->  00:06:50.920
And so I don't need any of this.
149

149

00:06:50.920  -->  00:06:52.020
So we're in the current folder,
150

150

00:06:52.020  -->  00:06:54.080
and then just base, okay?
151

151

00:06:54.080  -->  00:06:56.020
And so that should work now.
152

152

00:06:56.020  -->  00:06:57.220
And yeah, it does.
153

153

00:06:57.220  -->  00:06:58.670
So instead of writing pizza now,
154

154

00:06:58.670  -->  00:06:59.823
let's write pasta.
155

155

00:07:00.930  -->  00:07:03.680
And indeed, it writes pasta to the console,
156

156

00:07:03.680  -->  00:07:06.000
gives me the recipes, which are now, hopefully,
157

157

00:07:06.000  -->  00:07:06.890
about pasta.
158

158

00:07:06.890  -->  00:07:09.980
Yeah, so pasta with pesto, then the best lasagna,
159

159

00:07:09.980  -->  00:07:12.890
and you see that they're all about pasta now.
160

160

00:07:12.890  -->  00:07:15.670
So great, that part is already working.
161

161

00:07:15.670  -->  00:07:17.370
And so let's now do the most exciting part,
162

162

00:07:17.370  -->  00:07:19.380
actually, which is printing these results
163

163

00:07:19.380  -->  00:07:21.030
here to use the interface here,
164

164

00:07:21.030  -->  00:07:24.720
into this left column of the app, right?
165

165

00:07:24.720  -->  00:07:28.400
So let's think about how we are going to do that.
166

166

00:07:28.400  -->  00:07:32.010
Well, here in the state.search.result,
167

167

00:07:32.010  -->  00:07:33.980
so this one here, this is our array
168

168

00:07:33.980  -->  00:07:35.930
with all 30 results, right?
169

169

00:07:35.930  -->  00:07:38.320
So let's now write a function in the view
170

170

00:07:38.320  -->  00:07:40.850
which can receive all of this result
171

171

00:07:40.850  -->  00:07:42.890
and then print each of the elements,
172

172

00:07:42.890  -->  00:07:45.040
so each of the recipes in that array,
173

173

00:07:45.040  -->  00:07:46.363
to the user interface.
174

174

00:07:47.240  -->  00:07:50.020
So let's come back to our searchViews here
175

175

00:07:50.020  -->  00:07:52.303
and write another function.
176

176

00:07:56.370  -->  00:07:58.660
And I'm going to call this one renderResults.
177

177

00:08:04.409  -->  00:08:05.570
And what this is going to receive
178

178

00:08:05.570  -->  00:08:07.473
is of course all of the recipes.
179

179

00:08:11.230  -->  00:08:15.900
Okay, so we receive an array of 30 recipes here, remember.
180

180

00:08:15.900  -->  00:08:17.770
And so now we need to loop through these
181

181

00:08:17.770  -->  00:08:20.030
in order to then print each of these
182

182

00:08:20.030  -->  00:08:21.470
to the user interface.
183

183

00:08:21.470  -->  00:08:25.373
So let's say recipes.for each,
184

184

00:08:27.230  -->  00:08:29.150
because remember that is the best way
185

185

00:08:29.150  -->  00:08:30.880
to loop through an array.
186

186

00:08:30.880  -->  00:08:33.060
So instead of having all the logic
187

187

00:08:33.060  -->  00:08:34.650
of printing here in this function,
188

188

00:08:34.650  -->  00:08:37.770
let's do a separate function that has only one purpose,
189

189

00:08:37.770  -->  00:08:40.670
which is to print one single recipe, okay?
190

190

00:08:40.670  -->  00:08:42.010
And I'm doing that because later,
191

191

00:08:42.010  -->  00:08:43.340
we will add some more stuff here
192

192

00:08:43.340  -->  00:08:45.240
when we implement the pagination.
193

193

00:08:45.240  -->  00:08:47.010
And so it's better to have one function
194

194

00:08:47.010  -->  00:08:49.140
for each separate task, okay?
195

195

00:08:49.140  -->  00:08:51.860
So I'm actually separating different functionalities
196

196

00:08:51.860  -->  00:08:53.300
into different functions.
197

197

00:08:53.300  -->  00:08:55.693
So I'm going to have another function here,
198

198

00:08:56.960  -->  00:08:59.367
which is gonna be called renderRecipe.
199

199

00:09:01.773  -->  00:09:04.197
And this one will receive just one recipe.
200

200

00:09:07.640  -->  00:09:10.500
Okay, and note that I didn't prefix it
201

201

00:09:10.500  -->  00:09:12.650
with the export command because we don't need
202

202

00:09:12.650  -->  00:09:14.220
to export this function to the outside.
203

203

00:09:14.220  -->  00:09:17.380
We just don't need it outside of this module here.
204

204

00:09:17.380  -->  00:09:20.400
And so it's just like a private function here, okay?
205

205

00:09:20.400  -->  00:09:22.300
So we can now call this function here,
206

206

00:09:23.750  -->  00:09:25.890
and we can do it in a more complicated way,
207

207

00:09:25.890  -->  00:09:27.150
something like this.
208

208

00:09:27.150  -->  00:09:28.360
So we had a callback function
209

209

00:09:28.360  -->  00:09:30.210
where we specified the input,
210

210

00:09:30.210  -->  00:09:31.750
and then we say renderRecipe
211

211

00:09:35.059  -->  00:09:36.050
with the current recipe.
212

212

00:09:36.050  -->  00:09:37.460
But that's actually not necessary,
213

213

00:09:37.460  -->  00:09:39.520
cause all we need to do is really to write
214

214

00:09:39.520  -->  00:09:41.420
renderRecipe like this, and it will then
215

215

00:09:41.420  -->  00:09:44.000
automatically pass the current element
216

216

00:09:44.000  -->  00:09:46.920
into this function, into this renderRecipe.
217

217

00:09:46.920  -->  00:09:49.060
And so for now, all that the renderResults function
218

218

00:09:49.060  -->  00:09:50.970
is going to do is to loop through
219

219

00:09:50.970  -->  00:09:53.206
all of the 30 results and then call
220

220

00:09:53.206  -->  00:09:56.230
the renderRecipe function for each of them.
221

221

00:09:56.230  -->  00:09:58.240
And so this is where really the rendering
222

222

00:09:58.240  -->  00:10:00.450
will actually happen, in this function here.
223

223

00:10:00.450  -->  00:10:05.450
So let's now get the HTML for each of the results,
224

224

00:10:05.830  -->  00:10:08.120
which is stored right here.
225

225

00:10:08.120  -->  00:10:11.220
So I have it here in comments into my HTML file.
226

226

00:10:11.220  -->  00:10:14.570
So what I have here is, let's do a quick overview
227

227

00:10:14.570  -->  00:10:15.470
of the HTML.
228

228

00:10:15.470  -->  00:10:17.840
So we have the header in the top.
229

229

00:10:17.840  -->  00:10:20.350
So you see the header, which is this
230

230

00:10:20.350  -->  00:10:21.350
entire element here.
231

231

00:10:23.120  -->  00:10:24.500
So all of this here is the header.
232

232

00:10:24.500  -->  00:10:28.640
Then on the left side here, we have the results element.
233

233

00:10:28.640  -->  00:10:31.310
And then in there, we already have an ordered list
234

234

00:10:31.310  -->  00:10:33.320
which is called results list.
235

235

00:10:33.320  -->  00:10:35.630
So I decided to already put it in the HTML
236

236

00:10:35.630  -->  00:10:38.380
and not have it dynamically generated by JavaScript.
237

237

00:10:38.380  -->  00:10:40.040
So it's easier to already have this
238

238

00:10:40.040  -->  00:10:44.210
and then just fill it up with each of these li elements
239

239

00:10:44.210  -->  00:10:45.750
in JavaScript, which is exactly
240

240

00:10:45.750  -->  00:10:47.360
what we're gonna do next.
241

241

00:10:47.360  -->  00:10:49.520
So we have all of these results here.
242

242

00:10:49.520  -->  00:10:52.280
Then down here, well, we have the buttons
243

243

00:10:52.280  -->  00:10:55.220
for the pagination, but we're gonna take care of that later.
244

244

00:10:55.220  -->  00:10:57.790
Then in the middle we have the recipe element,
245

245

00:10:57.790  -->  00:11:00.134
so this big part here.
246

246

00:11:00.134  -->  00:11:03.200
Then we have the shopping list on the right side,
247

247

00:11:03.200  -->  00:11:07.250
as you see, and then, I guess,
248

248

00:11:07.250  -->  00:11:09.130
oh, that's more in the top.
249

249

00:11:09.130  -->  00:11:12.100
So here we have, then, this likes panel here.
250

250

00:11:12.100  -->  00:11:13.570
So this here.
251

251

00:11:13.570  -->  00:11:14.920
We're gonna hide that here later,
252

252

00:11:14.920  -->  00:11:16.470
when there's no liked pages.
253

253

00:11:16.470  -->  00:11:18.943
But for now, again, let's leave it as it is.
254

254

00:11:24.030  -->  00:11:26.590
Okay, anyway, what we really want to grab now
255

255

00:11:26.590  -->  00:11:30.433
is this code for one li element, okay?
256

256

00:11:31.752  -->  00:11:36.752
So let's create a variable called markup.
257

257

00:11:37.890  -->  00:11:39.760
And now remember back in the Budgety project,
258

258

00:11:39.760  -->  00:11:41.630
which we still did with ES5,
259

259

00:11:41.630  -->  00:11:43.510
and when we wanted to insert some HTML,
260

260

00:11:43.510  -->  00:11:45.840
we really had to put it all in one line.
261

261

00:11:45.840  -->  00:11:49.630
And it was just really bad looking and confusing syntax.
262

262

00:11:49.630  -->  00:11:52.220
But right now, in ES6 with template strings,
263

263

00:11:52.220  -->  00:11:54.360
we can do it in a very easy way.
264

264

00:11:54.360  -->  00:11:57.270
So just make a new template string,
265

265

00:11:57.270  -->  00:11:59.020
and then give it some space here.
266

266

00:11:59.020  -->  00:12:02.430
And now we can simply write it like this,
267

267

00:12:02.430  -->  00:12:05.180
as if we would be writing real HTML.
268

268

00:12:05.180  -->  00:12:06.780
So this is really cool, I think,
269

269

00:12:08.560  -->  00:12:10.110
and looks much better.
270

270

00:12:10.110  -->  00:12:12.370
So this looks really like as if we're writing
271

271

00:12:12.370  -->  00:12:13.320
in an HTML file.
272

272

00:12:13.320  -->  00:12:16.460
It actually looks a bit like React here, also.
273

273

00:12:16.460  -->  00:12:18.380
Okay, and let's now look at the data
274

274

00:12:18.380  -->  00:12:20.700
and actually also at the final result
275

275

00:12:20.700  -->  00:12:23.410
in order to see how this is supposed to look
276

276

00:12:23.410  -->  00:12:25.000
once it's done.
277

277

00:12:25.000  -->  00:12:28.920
So I have this here also open in another port.
278

278

00:12:28.920  -->  00:12:31.793
So this here is the final working project, okay?
279

279

00:12:32.740  -->  00:12:34.430
So let's write pizza.
280

280

00:12:34.430  -->  00:12:36.780
It has this nice spinner that we're gonna implement next.
281

281

00:12:36.780  -->  00:12:38.700
And then we have all the results.
282

282

00:12:38.700  -->  00:12:40.860
So what we have here is this image,
283

283

00:12:40.860  -->  00:12:44.130
then this title, and then down here the publisher.
284

284

00:12:44.130  -->  00:12:47.613
Okay, let's see if we can find that data in our results.
285

285

00:12:48.940  -->  00:12:50.560
So let's put pizza here as well.
286

286

00:12:50.560  -->  00:12:52.390
And it still should, now, log it to the console
287

287

00:12:52.390  -->  00:12:53.730
at some point.
288

288

00:12:53.730  -->  00:12:55.230
And indeed, here we go.
289

289

00:12:55.230  -->  00:12:56.510
So let's take a look at the data
290

290

00:12:56.510  -->  00:12:58.680
for each of the recipes.
291

291

00:12:58.680  -->  00:13:00.550
And so we have an image URL.
292

292

00:13:00.550  -->  00:13:03.720
We have the publisher, and we have the title
293

293

00:13:03.720  -->  00:13:05.370
and also the ID.
294

294

00:13:05.370  -->  00:13:07.140
So this is all that we need in order
295

295

00:13:07.140  -->  00:13:10.650
to print the results to the user interface.
296

296

00:13:10.650  -->  00:13:13.590
Okay, let's go through the markup one by one
297

297

00:13:13.590  -->  00:13:15.240
and replace the static data here
298

298

00:13:15.240  -->  00:13:18.040
with our dynamic data coming from the API.
299

299

00:13:18.040  -->  00:13:20.330
So we start here with this part here,
300

300

00:13:20.330  -->  00:13:23.480
and this is actually the ID of the recipe.
301

301

00:13:23.480  -->  00:13:24.790
And you're gonna find out a bit later
302

302

00:13:24.790  -->  00:13:27.420
why this is important when we start loading recipes.
303

303

00:13:27.420  -->  00:13:31.350
But for now, let's simply insert the ID in here.
304

304

00:13:31.350  -->  00:13:33.820
So since we're into a template string,
305

305

00:13:33.820  -->  00:13:37.230
we can now use this template string syntax.
306

306

00:13:37.230  -->  00:13:39.200
So what we want here is, let's go back
307

307

00:13:39.200  -->  00:13:41.960
to grab the name, the property,
308

308

00:13:41.960  -->  00:13:44.210
and it is called recipe_id.
309

309

00:13:44.210  -->  00:13:45.990
Let's actually copy it.
310

310

00:13:45.990  -->  00:13:50.607
And so it's recipe.recipe_id, right?
311

311

00:13:50.607  -->  00:13:53.850
So recipe is the variable that we put into the function,
312

312

00:13:53.850  -->  00:13:58.280
coming, of course, from this function call down here.
313

313

00:13:58.280  -->  00:14:02.070
And so then from the recipe, we read the recipe ID.
314

314

00:14:02.070  -->  00:14:05.040
Okay, so going back here, and now we changed it.
315

315

00:14:05.040  -->  00:14:08.833
And so yeah, let's get it back here.
316

316

00:14:09.860  -->  00:14:11.623
And wait for it, and here we go.
317

317

00:14:13.670  -->  00:14:16.540
So this object here is now our recipe.
318

318

00:14:16.540  -->  00:14:18.751
And then we need to read recipe_id,
319

319

00:14:18.751  -->  00:14:21.333
image_url, publisher, and title.
320

320

00:14:23.330  -->  00:14:25.973
Okay, so next one is the image URL, I guess.
321

321

00:14:27.040  -->  00:14:31.453
And so now it is here, so let's replace this as well.
322

322

00:14:37.220  -->  00:14:40.120
Okay, now here we have the title
323

323

00:14:47.317  -->  00:14:49.330
and finally the publisher.
324

324

00:14:49.330  -->  00:14:50.663
Let's just copy this part.
325

325

00:14:57.487  -->  00:15:00.223
And here it's not, it's title.
326

326

00:15:01.550  -->  00:15:03.670
Okay, and let's actually put it here
327

327

00:15:03.670  -->  00:15:06.070
in the alternative text for the image.
328

328

00:15:06.070  -->  00:15:08.490
Let's put the title here, as well.
329

329

00:15:08.490  -->  00:15:10.220
Okay, and I think that's it.
330

330

00:15:10.220  -->  00:15:12.220
We just have to remove this class from here,
331

331

00:15:12.220  -->  00:15:14.123
which is for the active class.
332

332

00:15:15.250  -->  00:15:16.830
So that one doesn't really matter.
333

333

00:15:16.830  -->  00:15:19.370
We just need the results link class.
334

334

00:15:19.370  -->  00:15:21.950
Okay, and so this here generates a variable
335

335

00:15:21.950  -->  00:15:23.970
containing the markup that we want to print.
336

336

00:15:23.970  -->  00:15:25.810
But now we need to actually, of course,
337

337

00:15:25.810  -->  00:15:28.530
render it to the DOM, okay?
338

338

00:15:28.530  -->  00:15:31.360
So where do we want to render it?
339

339

00:15:31.360  -->  00:15:34.960
Well, we want to put it here, into the results list.
340

340

00:15:34.960  -->  00:15:39.063
So let's add it here to this elements object.
341

341

00:15:41.551  -->  00:15:46.551
So search results list, let's call it like that,
342

342

00:15:47.102  -->  00:15:49.019
document.querySelector,
343

343

00:15:54.646  -->  00:15:57.396
and let's copy this one here now.
344

344

00:15:58.971  -->  00:16:01.660
And so elements.searchResList,
345

345

00:16:01.660  -->  00:16:05.300
now remember the insert adjacent HTML method
346

346

00:16:05.300  -->  00:16:06.993
that we used before.
347

347

00:16:06.993  -->  00:16:08.220
Remember that one?
348

348

00:16:08.220  -->  00:16:11.570
Let's take a look at it, just to remember how it works.
349

349

00:16:11.570  -->  00:16:13.260
Maybe it's been a long time since you've taken
350

350

00:16:13.260  -->  00:16:15.210
the rest of the course.
351

351

00:16:15.210  -->  00:16:18.470
So I always like to use the MDN library
352

352

00:16:18.470  -->  00:16:21.793
in order to get help about the different methods.
353

353

00:16:22.770  -->  00:16:24.620
So let's take a look at how it works.
354

354

00:16:25.470  -->  00:16:28.030
And so basically we have to specify the position
355

355

00:16:28.030  -->  00:16:30.600
and then the text, so the markup that we just defined.
356

356

00:16:30.600  -->  00:16:33.020
And in here, we can do different keywords,
357

357

00:16:33.020  -->  00:16:34.930
so we can put before begin, after begin,
358

358

00:16:34.930  -->  00:16:36.950
before end, or after end.
359

359

00:16:36.950  -->  00:16:38.940
And here is basically the position
360

360

00:16:38.940  -->  00:16:41.330
of each of these four keywords.
361

361

00:16:41.330  -->  00:16:43.730
So imagine that this here is our list element
362

362

00:16:43.730  -->  00:16:44.810
that we just selected.
363

363

00:16:44.810  -->  00:16:48.533
And so we want our elements to be put before end.
364

364

00:16:49.450  -->  00:16:50.940
So here, okay?
365

365

00:16:50.940  -->  00:16:53.040
So we always want a new element to be put
366

366

00:16:53.040  -->  00:16:55.140
on the end of the list.
367

367

00:16:55.140  -->  00:16:57.040
So first the first one, then the second,
368

368

00:16:57.040  -->  00:16:59.270
then the third, all the way until 30.
369

369

00:16:59.270  -->  00:17:01.750
If we did after begin, then we would put
370

370

00:17:01.750  -->  00:17:03.073
the second one before the first,
371

371

00:17:03.073  -->  00:17:04.800
then the third before the second,
372

372

00:17:04.800  -->  00:17:07.170
and we would end up with the inverse order.
373

373

00:17:07.170  -->  00:17:09.264
Okay, and so we're gonna use before end
374

374

00:17:09.264  -->  00:17:10.903
and then the markup.
375

375

00:17:12.380  -->  00:17:14.693
Okay, I hope that made sense.
376

376

00:17:16.350  -->  00:17:20.210
So before end, and then of course the markup.
377

377

00:17:20.210  -->  00:17:21.043
And that's it.
378

378

00:17:21.043  -->  00:17:23.260
So all of this will be executed 30 times,
379

379

00:17:23.260  -->  00:17:26.380
each time for each of the recipes.
380

380

00:17:26.380  -->  00:17:28.920
So let's hope that this actually works.
381

381

00:17:28.920  -->  00:17:30.210
And in order to see it, of course,
382

382

00:17:30.210  -->  00:17:32.253
we need to import it here.
383

383

00:17:33.330  -->  00:17:35.403
So searchView.renderResults,
384

384

00:17:37.180  -->  00:17:39.210
and we need to pass in the recipes.
385

385

00:17:39.210  -->  00:17:44.203
So that is state.search.results.
386

386

00:17:47.010  -->  00:17:48.402
I guess.
387

387

00:17:48.402  -->  00:17:50.860
Let's take a look again at the model, just to make sure.
388

388

00:17:50.860  -->  00:17:53.213
And it is called, okay, so it's called result.
389

389

00:17:57.650  -->  00:17:59.330
Okay, does it make sense?
390

390

00:17:59.330  -->  00:18:02.100
Just to make sure that it actually does make sense,
391

391

00:18:02.100  -->  00:18:05.320
we have this result stored inside
392

392

00:18:05.320  -->  00:18:07.840
of our state element, right?
393

393

00:18:07.840  -->  00:18:11.340
We also have our imported function from the searchView,
394

394

00:18:11.340  -->  00:18:13.150
which we did up here.
395

395

00:18:13.150  -->  00:18:15.070
And so now we're bringing everything together
396

396

00:18:15.070  -->  00:18:16.820
here inside of this function.
397

397

00:18:16.820  -->  00:18:19.150
So we read the input from the input field.
398

398

00:18:19.150  -->  00:18:20.760
This one we don't need anymore.
399

399

00:18:20.760  -->  00:18:22.200
And we create a new search object
400

400

00:18:22.200  -->  00:18:24.090
which contains that query.
401

401

00:18:24.090  -->  00:18:27.070
And we actually get our results from our API call,
402

402

00:18:27.070  -->  00:18:30.070
wait until that is done, and finally
403

403

00:18:30.070  -->  00:18:33.380
we render it to the user interface, so to the DOM,
404

404

00:18:33.380  -->  00:18:34.970
by using this method that we did
405

405

00:18:34.970  -->  00:18:37.210
in the searchView just before.
406

406

00:18:37.210  -->  00:18:40.103
So let's now hope that it actually works.
407

407

00:18:42.000  -->  00:18:45.120
Writing pizza, and we don't have the spinner yet,
408

408

00:18:45.120  -->  00:18:48.720
of course, but let's wait, if it actually happens.
409

409

00:18:48.720  -->  00:18:50.120
And now we have an error here.
410

410

00:18:50.120  -->  00:18:51.490
But that's not a problem at all.
411

411

00:18:51.490  -->  00:18:52.700
So let's try to debug it.
412

412

00:18:52.700  -->  00:18:55.060
So what it says is that recipes.for each
413

413

00:18:55.060  -->  00:18:57.010
is not a function.
414

414

00:18:57.010  -->  00:19:01.090
So let's find out why by logging to the console
415

415

00:19:01.090  -->  00:19:02.593
what recipes actually is.
416

416

00:19:03.880  -->  00:19:08.440
So console.log recipes.
417

417

00:19:08.440  -->  00:19:09.690
Okay, because it's an array,
418

418

00:19:09.690  -->  00:19:12.230
and so it actually should have the for each method
419

419

00:19:12.230  -->  00:19:13.093
attached to it.
420

420

00:19:15.020  -->  00:19:18.513
Let's wait for it, pizza.
421

421

00:19:21.500  -->  00:19:23.480
And we still get the same error.
422

422

00:19:23.480  -->  00:19:25.240
And, oh, cool, yeah.
423

423

00:19:25.240  -->  00:19:27.563
This is, of course, just a stupid mistake.
424

424

00:19:29.010  -->  00:19:30.290
Okay, I'm sorry for that.
425

425

00:19:30.290  -->  00:19:32.750
So this is a capital E, forEach.
426

426

00:19:32.750  -->  00:19:33.853
This is how it works.
427

427

00:19:34.900  -->  00:19:36.603
Okay, so let's reload it.
428

428

00:19:38.010  -->  00:19:42.930
Write pizza again, and let's wait for the result here.
429

429

00:19:42.930  -->  00:19:44.713
And whoa, here we go.
430

430

00:19:45.770  -->  00:19:49.990
So it actually printed our results here
431

431

00:19:49.990  -->  00:19:52.650
to the user interface, just like we wanted it to work.
432

432

00:19:52.650  -->  00:19:54.563
So that is actually perfect.
433

433

00:19:55.960  -->  00:19:58.090
Okay, it's not quite perfect, actually.
434

434

00:19:58.090  -->  00:20:00.110
There are some things that we have to change here.
435

435

00:20:00.110  -->  00:20:03.160
But at least it's now really putting our results
436

436

00:20:03.160  -->  00:20:04.450
here to this page.
437

437

00:20:04.450  -->  00:20:06.620
So that's already a huge step forward.
438

438

00:20:06.620  -->  00:20:08.590
So that's really cool.
439

439

00:20:08.590  -->  00:20:10.310
Next up, there's just some small corrections
440

440

00:20:10.310  -->  00:20:13.330
that we need to do, like clearing this text here
441

441

00:20:13.330  -->  00:20:14.680
from the field.
442

442

00:20:14.680  -->  00:20:16.230
So let's take care of that now.
443

443

00:20:18.970  -->  00:20:21.550
And write a function export clearInput,
444

444

00:20:25.950  -->  00:20:28.050
and we're missing a const here, of course.
445

445

00:20:29.490  -->  00:20:30.660
And so this is actually pretty similar
446

446

00:20:30.660  -->  00:20:31.960
to the one before.
447

447

00:20:31.960  -->  00:20:36.960
Elements.searchInput.value, and set it to nothing.
448

448

00:20:39.180  -->  00:20:42.270
Okay, and now we're actually not returning anything here,
449

449

00:20:42.270  -->  00:20:44.890
so it's cleaner to wrap this here
450

450

00:20:44.890  -->  00:20:46.970
into these curly braces, because otherwise,
451

451

00:20:46.970  -->  00:20:49.908
it has an implicit return after result of doing this,
452

452

00:20:49.908  -->  00:20:50.863
and we don't want that.
453

453

00:20:52.750  -->  00:20:55.920
Okay, also missing semicolons down here.
454

454

00:20:55.920  -->  00:20:59.851
It's not a big deal, but let's keep our code clean here.
455

455

00:20:59.851  -->  00:21:02.631
So clearInput is the name of this function.
456

456

00:21:02.631  -->  00:21:04.020
And let's now use it here.
457

457

00:21:04.020  -->  00:21:07.023
So we're gonna put it here in prepare UI for results.
458

458

00:21:09.160  -->  00:21:13.603
So searchView.clearInput, and that's it.
459

459

00:21:14.730  -->  00:21:17.070
Now, another thing that we want is,
460

460

00:21:17.070  -->  00:21:18.220
well, let me actually show it to you,
461

461

00:21:18.220  -->  00:21:19.513
why we need to do this.
462

462

00:21:21.320  -->  00:21:23.200
So let's again search for pizza here
463

463

00:21:23.200  -->  00:21:24.513
and wait for our results.
464

464

00:21:26.650  -->  00:21:29.000
So we have our results here, of course.
465

465

00:21:29.000  -->  00:21:31.080
And you see that actually it cleared our input.
466

466

00:21:31.080  -->  00:21:32.630
And let's now search for pasta.
467

467

00:21:34.250  -->  00:21:36.444
And what you will see happening now
468

468

00:21:36.444  -->  00:21:38.180
is that it will add these new results
469

469

00:21:38.180  -->  00:21:41.950
here on the end of these, okay?
470

470

00:21:41.950  -->  00:21:44.090
And so what we need to do is to actually
471

471

00:21:44.090  -->  00:21:47.380
clear the results before we can display them.
472

472

00:21:47.380  -->  00:21:49.010
And so that's another thing that we can put here
473

473

00:21:49.010  -->  00:21:51.110
in prepare UI for results.
474

474

00:21:51.110  -->  00:21:53.079
So we can clear the input and then also
475

475

00:21:53.079  -->  00:21:56.820
clear the results from the previous search.
476

476

00:21:56.820  -->  00:21:58.520
So let's quickly do that, as well.
477

477

00:22:04.861  -->  00:22:05.944
clearResults.
478

478

00:22:12.890  -->  00:22:15.560
And we already have this list selected,
479

479

00:22:15.560  -->  00:22:18.113
so it's just a searchResList here.
480

480

00:22:20.660  -->  00:22:22.900
And how do we remove the entire HTML
481

481

00:22:22.900  -->  00:22:24.910
inside of this element?
482

482

00:22:24.910  -->  00:22:26.770
Well, it's actually very easy.
483

483

00:22:26.770  -->  00:22:29.900
We can simply set the inner HTML of the element
484

484

00:22:29.900  -->  00:22:31.610
to nothing.
485

485

00:22:31.610  -->  00:22:34.070
And so the HTML inside it will be empty,
486

486

00:22:34.070  -->  00:22:36.110
which means that it will simply delete
487

487

00:22:36.110  -->  00:22:39.440
all of the HTMLs, all of these li elements,
488

488

00:22:39.440  -->  00:22:42.180
that are currently in it, right?
489

489

00:22:42.180  -->  00:22:44.453
So let's test that one out, as well.
490

490

00:22:47.840  -->  00:22:51.390
So again, our first search is for pizza,
491

491

00:22:51.390  -->  00:22:53.293
which should display in a second here.
492

492

00:22:55.500  -->  00:22:56.333
Here we go.
493

493

00:22:56.333  -->  00:22:58.160
So again, our 30 results.
494

494

00:22:58.160  -->  00:22:59.700
And now pasta.
495

495

00:22:59.700  -->  00:23:01.290
And before showing the new results,
496

496

00:23:01.290  -->  00:23:05.073
it will actually immediately delete these results, right?
497

497

00:23:06.470  -->  00:23:08.000
Well, not really.
498

498

00:23:08.000  -->  00:23:11.430
And so probably our method is not really working.
499

499

00:23:11.430  -->  00:23:16.430
So yeah, it did add these here to the end.
500

500

00:23:16.550  -->  00:23:18.320
And of course it did, because we didn't
501

501

00:23:18.320  -->  00:23:20.040
even call this method
502

502

00:23:20.040  -->  00:23:22.913
here in the controller.
503

503

00:23:25.170  -->  00:23:27.243
So clearResults here.
504

504

00:23:29.600  -->  00:23:31.133
And now it has to work.
505

505

00:23:32.943  -->  00:23:34.260
There's just no way around it.
506

506

00:23:34.260  -->  00:23:36.083
So this time, pasta first.
507

507

00:23:37.260  -->  00:23:39.140
Here we go, with all our 30 recipes.
508

508

00:23:39.140  -->  00:23:44.140
And now pizza, and you see now it cleared the search list
509

509

00:23:44.220  -->  00:23:47.330
and displayed the new recipes.
510

510

00:23:47.330  -->  00:23:48.650
Now, the next thing that we're gonna do
511

511

00:23:48.650  -->  00:23:50.250
is to shorten these titles.
512

512

00:23:50.250  -->  00:23:53.230
So we want all of these titles to be just in one line.
513

513

00:23:53.230  -->  00:23:54.930
And if they are too long, well,
514

514

00:23:54.930  -->  00:23:59.520
we just want the first words and then three dots here,
515

515

00:23:59.520  -->  00:24:01.810
indicating that the text can continue.
516

516

00:24:01.810  -->  00:24:03.500
So we have some of these here,
517

517

00:24:03.500  -->  00:24:05.340
longer than just one line.
518

518

00:24:05.340  -->  00:24:07.810
And so we're gonna fix that in the next video,
519

519

00:24:07.810  -->  00:24:10.610
cause this one, I think, is already getting long enough.
