WEBVTT
1
1

00:00:01.370  -->  00:00:03.660
<v Instructor>Okay, so let's now start building</v>
2

2

00:00:03.660  -->  00:00:06.743
the laptop store using Node.js.
3

3

00:00:07.880  -->  00:00:09.580
And the first thing that you need to do
4

4

00:00:09.580  -->  00:00:13.100
is actually go ahead and download Node.js for your computer.
5

5

00:00:13.100  -->  00:00:16.880
So just head over to nodejs.org and then download
6

6

00:00:17.750  -->  00:00:19.500
probably version 10 here.
7

7

00:00:19.500  -->  00:00:22.480
Okay, so that's the most stable version right now.
8

8

00:00:22.480  -->  00:00:24.540
And if you don't find the download
9

9

00:00:24.540  -->  00:00:27.760
for your operating system, you can just go here to downloads
10

10

00:00:27.760  -->  00:00:29.960
and it's gonna be there for sure.
11

11

00:00:29.960  -->  00:00:32.340
And if you already have Node installed on your computer,
12

12

00:00:32.340  -->  00:00:35.100
please just make sure that it's at least version eight,
13

13

00:00:35.100  -->  00:00:37.220
or better, 10, okay?
14

14

00:00:37.220  -->  00:00:39.140
And to quickly determine the version you're on,
15

15

00:00:39.140  -->  00:00:40.980
you just need to head over to the terminal
16

16

00:00:40.980  -->  00:00:43.810
and type node -v, okay?
17

17

00:00:43.810  -->  00:00:45.920
And so it gives me 10.11.
18

18

00:00:45.920  -->  00:00:49.350
And so I'm at least on version number 10.
19

19

00:00:49.350  -->  00:00:50.370
Then after doing that,
20

20

00:00:50.370  -->  00:00:53.110
just download the starter files for this project,
21

21

00:00:53.110  -->  00:00:55.643
as usual from the course GitHub repo.
22

22

00:00:56.490  -->  00:00:59.540
And I'm gonna leave a link to that here in this video,
23

23

00:00:59.540  -->  00:01:00.580
but you can also find it
24

24

00:01:00.580  -->  00:01:02.670
right at the beginning of the course.
25

25

00:01:02.670  -->  00:01:04.990
As you see, I already have it opened here,
26

26

00:01:04.990  -->  00:01:08.430
and so all we really have here is this data.json,
27

27

00:01:08.430  -->  00:01:11.840
which is all the data that will be in our laptop store.
28

28

00:01:11.840  -->  00:01:12.870
I have the images.
29

29

00:01:12.870  -->  00:01:14.580
So one image for each of the laptops,
30

30

00:01:14.580  -->  00:01:18.890
and then also the HTML webpages for both the overview
31

31

00:01:18.890  -->  00:01:20.763
and the detail view of each laptop.
32

32

00:01:22.250  -->  00:01:24.290
All right, and now that you have Node installed
33

33

00:01:24.290  -->  00:01:26.810
on your computer, you can actually run JavaScript
34

34

00:01:26.810  -->  00:01:29.173
outside of the browser for the very first time.
35

35

00:01:30.100  -->  00:01:32.880
So increase this here, clear the console.
36

36

00:01:32.880  -->  00:01:35.933
And so all we have to do is to write in the terminal, node.
37

37

00:01:36.830  -->  00:01:39.940
And so now we're running JavaScript outside of the browser.
38

38

00:01:39.940  -->  00:01:42.380
And this is now basically like a JavaScript console,
39

39

00:01:42.380  -->  00:01:43.900
just like you have in the browser.
40

40

00:01:43.900  -->  00:01:46.820
So we can do JavaScript like one plus one
41

41

00:01:46.820  -->  00:01:48.710
and it will of course give us the result.
42

42

00:01:48.710  -->  00:01:51.380
We can do console logs, for example.
43

43

00:01:51.380  -->  00:01:54.200
And now you noticed that I have like this shortcut
44

44

00:01:54.200  -->  00:01:56.630
here on my computer, so I'm gonna type ,col
45

45

00:01:58.110  -->  00:02:00.390
then it will write console log automatically.
46

46

00:02:00.390  -->  00:02:03.670
So I'm gonna use that for now.
47

47

00:02:03.670  -->  00:02:08.670
Anyway, you see that this is just JavaScript
48

48

00:02:09.700  -->  00:02:11.090
like you already know.
49

49

00:02:11.090  -->  00:02:15.510
So good old console log works here in the Node console,
50

50

00:02:15.510  -->  00:02:17.740
just as it works in the browser.
51

51

00:02:17.740  -->  00:02:20.380
Now of course we don't want to write all of our Node code
52

52

00:02:20.380  -->  00:02:23.010
here in this command line, and so we can create
53

53

00:02:23.010  -->  00:02:26.083
a new JavaScript file to do just that, like we usually do.
54

54

00:02:27.190  -->  00:02:28.563
So creating new file.
55

55

00:02:29.930  -->  00:02:32.043
I'm calling this one index.js.
56

56

00:02:33.190  -->  00:02:34.023
Now what's that?
57

57

00:02:35.030  -->  00:02:36.300
Doesn't really matter.
58

58

00:02:36.300  -->  00:02:39.610
And anyway, if I wanna exit this command line here,
59

59

00:02:39.610  -->  00:02:41.680
I just have to type Control + C
60

60

00:02:41.680  -->  00:02:43.890
and then Control + C again.
61

61

00:02:43.890  -->  00:02:45.140
And that's it.
62

62

00:02:45.140  -->  00:02:47.460
Now let's do the same thing that we did here before
63

63

00:02:47.460  -->  00:02:50.000
in the console, but in this file.
64

64

00:02:50.000  -->  00:02:54.803
So console log Hello World!
65

65

00:02:57.270  -->  00:02:59.670
And now to run this file, I'll write node again
66

66

00:02:59.670  -->  00:03:02.090
and then index.js.
67

67

00:03:02.090  -->  00:03:04.780
And this worked because I'm already in this folder.
68

68

00:03:04.780  -->  00:03:09.110
So this long path here and so this index.js file
69

69

00:03:09.110  -->  00:03:10.550
is right in that home folder.
70

70

00:03:10.550  -->  00:03:14.520
And so we hit return and then it runs the file.
71

71

00:03:14.520  -->  00:03:15.353
Simple as that.
72

72

00:03:15.353  -->  00:03:16.720
So what happened here?
73

73

00:03:16.720  -->  00:03:19.820
Well, node run or file and all we have here
74

74

00:03:19.820  -->  00:03:22.570
is the console log, so it does that here to the console,
75

75

00:03:22.570  -->  00:03:24.360
and then it actually exits the process
76

76

00:03:24.360  -->  00:03:26.300
because it has nothing else to do.
77

77

00:03:26.300  -->  00:03:28.220
And so we're back to our normal command line
78

78

00:03:28.220  -->  00:03:29.870
here in the terminal.
79

79

00:03:29.870  -->  00:03:33.123
So imagine we wanted to add a second console log here,
80

80

00:03:36.360  -->  00:03:39.113
and then we would have to run this all over again.
81

81

00:03:40.220  -->  00:03:41.410
And this is kind of annoying.
82

82

00:03:41.410  -->  00:03:42.780
So the first thing that you wanna do
83

83

00:03:42.780  -->  00:03:44.610
when you start working with Node.js
84

84

00:03:44.610  -->  00:03:46.310
is to install a little tool
85

85

00:03:46.310  -->  00:03:49.140
like a little helper called nodemon.
86

86

00:03:49.140  -->  00:03:52.150
And for that we use npm just as I showed you before
87

87

00:03:52.150  -->  00:03:53.460
in the last part of the course,
88

88

00:03:53.460  -->  00:03:55.920
where I showed you how to use npm and install packages
89

89

00:03:55.920  -->  00:03:57.520
and all of that good stuff.
90

90

00:03:57.520  -->  00:03:59.630
So npm install nodemon,
91

91

00:04:01.960  -->  00:04:03.960
and we can actually install it globally.
92

92

00:04:04.890  -->  00:04:06.240
So -g.
93

93

00:04:06.240  -->  00:04:08.510
And if you're on a Mac, you're probably gonna need
94

94

00:04:08.510  -->  00:04:12.800
sudo here in front to give it the admin rights.
95

95

00:04:12.800  -->  00:04:15.160
Now I'm not gonna install this because I already have it,
96

96

00:04:15.160  -->  00:04:17.233
but you should go ahead and do that.
97

97

00:04:19.270  -->  00:04:20.683
So let me get rid of this.
98

98

00:04:21.820  -->  00:04:24.280
And now instead of typing node in next.js,
99

99

00:04:24.280  -->  00:04:26.540
all I have to do is to type nodemon.
100

100

00:04:27.820  -->  00:04:29.210
And it will automatically figure out
101

101

00:04:29.210  -->  00:04:32.750
which file I want to run, and then it actually runs it.
102

102

00:04:32.750  -->  00:04:33.940
So you see I'm in the log,
103

103

00:04:33.940  -->  00:04:36.610
starting node index.js, which is exactly
104

104

00:04:36.610  -->  00:04:39.320
what we did here before when we did it manually.
105

105

00:04:39.320  -->  00:04:40.770
Now it happens automatically.
106

106

00:04:41.670  -->  00:04:43.623
And if you know add a third log here,
107

107

00:04:45.810  -->  00:04:48.500
give it a save, and you see it runs
108

108

00:04:48.500  -->  00:04:52.230
automatically here without us having to go ahead
109

109

00:04:52.230  -->  00:04:54.140
and run this again and again each time
110

110

00:04:54.140  -->  00:04:55.490
that we save something,
111

111

00:04:55.490  -->  00:04:57.190
which is gonna save us a ton of time.
112

112

00:04:57.190  -->  00:04:59.230
All right, so this was more at the setup
113

113

00:04:59.230  -->  00:05:01.100
of Node.js on our system.
114

114

00:05:01.100  -->  00:05:03.380
Now let's actually start doing something cool.
115

115

00:05:03.380  -->  00:05:05.040
And the first thing that we will do
116

116

00:05:05.040  -->  00:05:08.450
is to read the content of this JSON file here, all right?
117

117

00:05:08.450  -->  00:05:11.260
And then parse it into a JavaScript object.
118

118

00:05:11.260  -->  00:05:13.330
And again, this is something that you really cannot do
119

119

00:05:13.330  -->  00:05:16.350
with a normal, let's say a JavaScript in a browser
120

120

00:05:16.350  -->  00:05:19.060
because it doesn't give us access to the file system.
121

121

00:05:19.060  -->  00:05:20.660
But with Node.js, we can.
122

122

00:05:20.660  -->  00:05:22.940
So let me show you how to do it.
123

123

00:05:22.940  -->  00:05:25.360
So get rid of all of this.
124

124

00:05:25.360  -->  00:05:26.840
And the first thing that you need to do
125

125

00:05:26.840  -->  00:05:30.510
is that Node comes with a very powerful module system.
126

126

00:05:30.510  -->  00:05:33.090
And most of the functionality that we have in Node
127

127

00:05:33.090  -->  00:05:36.020
is always in one of the Node packages.
128

128

00:05:36.020  -->  00:05:37.810
So now that we want to read a file,
129

129

00:05:37.810  -->  00:05:40.723
we need to require the file system module.
130

130

00:05:42.375  -->  00:05:44.480
So define a variable.
131

131

00:05:44.480  -->  00:05:46.330
In this case, it's gonna be fs,
132

132

00:05:46.330  -->  00:05:48.720
which stands for file system,
133

133

00:05:48.720  -->  00:05:53.720
and = require and then the name of the module, which is fs.
134

134

00:05:54.600  -->  00:05:58.160
And so usually we give the variable name here fs
135

135

00:05:58.160  -->  00:06:00.643
the same as the package name.
136

136

00:06:01.970  -->  00:06:03.380
So the module name.
137

137

00:06:03.380  -->  00:06:06.240
And this is a so-called core Node modules
138

138

00:06:06.240  -->  00:06:08.750
because we can actually also use other modules
139

139

00:06:08.750  -->  00:06:11.130
like the ones that we get from npm,
140

140

00:06:11.130  -->  00:06:12.840
but the file system module is something
141

141

00:06:12.840  -->  00:06:14.970
that already comes with Node.js.
142

142

00:06:14.970  -->  00:06:17.830
And so now we're ready to actually load a file.
143

143

00:06:17.830  -->  00:06:21.003
And we do that by saying fs.readfile,
144

144

00:06:23.820  -->  00:06:26.230
and we use the synchronous version here.
145

145

00:06:26.230  -->  00:06:30.080
Okay, and so readfile here is a method of fs.
146

146

00:06:30.080  -->  00:06:33.010
And that's why we had to actually save the result
147

147

00:06:33.010  -->  00:06:35.160
of requiring the module in this variable
148

148

00:06:35.160  -->  00:06:37.303
so that we can now use this method here
149

149

00:06:37.303  -->  00:06:38.713
that is on that variable.
150

150

00:06:39.780  -->  00:06:42.480
And so where is that file located?
151

151

00:06:42.480  -->  00:06:46.443
Well, it is here in the data folder and then data.json.
152

152

00:06:47.460  -->  00:06:48.810
But it's actually not that simple
153

153

00:06:48.810  -->  00:06:53.070
because we have to pass like the absolute path to that file.
154

154

00:06:53.070  -->  00:06:56.660
And in Node.js, we have a variable name called dirname.
155

155

00:06:56.660  -->  00:07:01.150
So it's simply called dirname like this.
156

156

00:07:01.150  -->  00:07:03.250
And since we're using a template string here
157

157

00:07:03.250  -->  00:07:04.540
because of these back ticks here,
158

158

00:07:04.540  -->  00:07:07.030
remember that's something that comes from ES6,
159

159

00:07:07.030  -->  00:07:08.630
we just have to do it like this.
160

160

00:07:09.570  -->  00:07:12.110
And so this will then get the dirname variable
161

161

00:07:12.110  -->  00:07:15.280
that is defined in Node.js for us.
162

162

00:07:15.280  -->  00:07:19.653
And so this dirname is basically the home folder so to say.
163

163

00:07:21.010  -->  00:07:25.483
So we have dirname/data/data.json.
164

164

00:07:27.331  -->  00:07:30.840
And then we also need to specify the character encoding.
165

165

00:07:30.840  -->  00:07:33.223
And so that's gonna be utf-8.
166

166

00:07:34.980  -->  00:07:36.420
And if you don't specify this,
167

167

00:07:36.420  -->  00:07:38.110
then instead of returning a file,
168

168

00:07:38.110  -->  00:07:40.920
it will return something called a buffer.
169

169

00:07:40.920  -->  00:07:43.970
All right, and so finally what we have to do
170

170

00:07:43.970  -->  00:07:47.503
is to then save the result of this into a variable.
171

171

00:07:49.020  -->  00:07:52.610
So let's simply say json.
172

172

00:07:52.610  -->  00:07:56.330
And now let's take a look at this json variable
173

173

00:07:56.330  -->  00:07:58.080
with a simple console.log.
174

174

00:07:58.080  -->  00:08:00.830
And since we're doing console logs,
175

175

00:08:00.830  -->  00:08:03.070
let me also show you the dirname variable
176

176

00:08:03.070  -->  00:08:06.263
just so you know what I was actually talking about.
177

177

00:08:07.450  -->  00:08:10.710
Give it a save now and here we go.
178

178

00:08:10.710  -->  00:08:13.210
So here is the json data that we had just
179

179

00:08:13.210  -->  00:08:14.660
read from the file.
180

180

00:08:14.660  -->  00:08:16.360
And you will see that what we have here
181

181

00:08:16.360  -->  00:08:18.830
is exactly what we had here.
182

182

00:08:18.830  -->  00:08:19.663
Amazing, right?
183

183

00:08:19.663  -->  00:08:23.760
So now we can use JavaScript to read files from the disk.
184

184

00:08:23.760  -->  00:08:28.500
And up here we also see the path to this file basically.
185

185

00:08:28.500  -->  00:08:31.743
So index.js is in this huge folder.
186

186

00:08:33.020  -->  00:08:34.170
So let's get rid of this.
187

187

00:08:34.170  -->  00:08:38.090
And what we actually need is not just like this JSON text,
188

188

00:08:38.090  -->  00:08:40.883
we're going to parse it into an object
189

189

00:08:40.883  -->  00:08:43.620
that we can use in JavaScript.
190

190

00:08:43.620  -->  00:08:47.867
And so we actually want, what I'm gonna call, the laptopData
191

191

00:08:50.740  -->  00:08:52.723
which we will parse with JSON.
192

192

00:08:54.540  -->  00:08:58.540
So in JavaScript, there is this JSON.parse method
193

193

00:08:58.540  -->  00:09:03.520
that we can pass any JSON string, let's say,
194

194

00:09:03.520  -->  00:09:06.517
and then it will return an object for us, all right?
195

195

00:09:06.517  -->  00:09:07.610
And I think we actually used it before
196

196

00:09:07.610  -->  00:09:09.930
in another project in this course
197

197

00:09:09.930  -->  00:09:11.390
where we worked with an API.
198

198

00:09:11.390  -->  00:09:14.300
Because APIs usually always work with JSON these days,
199

199

00:09:14.300  -->  00:09:18.010
at least the traditional Rest APIS, am I right?
200

200

00:09:18.010  -->  00:09:20.350
Now instead of logging JSON,
201

201

00:09:20.350  -->  00:09:23.530
let's actually log our laptopData.
202

202

00:09:23.530  -->  00:09:25.160
And so down here it is,
203

203

00:09:25.160  -->  00:09:26.580
and you see that now it's no longer
204

204

00:09:26.580  -->  00:09:28.750
this string that we had, but it really is
205

205

00:09:28.750  -->  00:09:30.400
a JavaScript object.
206

206

00:09:30.400  -->  00:09:32.830
And so with that, we are ready to start working
207

207

00:09:32.830  -->  00:09:35.670
on implementing this laptop store.
208

208

00:09:35.670  -->  00:09:38.270
Awesome, so we learned how to read files.
209

209

00:09:38.270  -->  00:09:40.400
Now let's actually do what Node.js
210

210

00:09:40.400  -->  00:09:44.170
was really intended to do, which is to create web servers.
211

211

00:09:44.170  -->  00:09:47.780
All right, so for that we're gonna need another package.
212

212

00:09:47.780  -->  00:09:50.530
So another core module.
213

213

00:09:50.530  -->  00:09:52.123
And this one is called http.
214

214

00:09:53.460  -->  00:09:56.260
So again, we're using the variable name
215

215

00:09:56.260  -->  00:09:58.010
as the same one as the module name.
216

216

00:09:58.850  -->  00:10:02.213
Require and http.
217

217

00:10:04.200  -->  00:10:05.810
Get rid of this console.log,
218

218

00:10:05.810  -->  00:10:07.570
and now let's create our server.
219

219

00:10:07.570  -->  00:10:11.200
And so all we have to do is to create a variable
220

220

00:10:11.200  -->  00:10:14.270
called server, and then on the http object
221

221

00:10:14.270  -->  00:10:16.283
use the createServer method.
222

222

00:10:19.860  -->  00:10:22.450
Okay, and there are different ways of doing this,
223

223

00:10:22.450  -->  00:10:24.630
different kinds of writing this,
224

224

00:10:24.630  -->  00:10:27.040
but I think that this one for now and for learning
225

225

00:10:27.040  -->  00:10:28.900
is the easiest one, all right?
226

226

00:10:28.900  -->  00:10:31.180
And in this createServer, we have to pass in
227

227

00:10:31.180  -->  00:10:32.540
a callback function.
228

228

00:10:32.540  -->  00:10:34.820
This callback function is the one that's gonna be fired
229

229

00:10:34.820  -->  00:10:37.610
each time that someone accesses our web server.
230

230

00:10:37.610  -->  00:10:40.820
So each time someone like opens a page
231

231

00:10:40.820  -->  00:10:42.630
that's on our server, all right?
232

232

00:10:42.630  -->  00:10:44.360
And this callback function gets access
233

233

00:10:44.360  -->  00:10:47.690
to the request and to the response objects.
234

234

00:10:47.690  -->  00:10:49.943
And more about that later, all right?
235

235

00:10:51.270  -->  00:10:53.610
So we're using an arrow function of course
236

236

00:10:53.610  -->  00:10:56.640
because the note, just like most browsers these days,
237

237

00:10:56.640  -->  00:10:59.120
also understands ES6, of course.
238

238

00:10:59.120  -->  00:11:03.370
ES6, ES7, ES8 and all of these versions.
239

239

00:11:03.370  -->  00:11:07.360
They're all kind of well-supported in Node.js at this point.
240

240

00:11:07.360  -->  00:11:09.470
Okay, so this creates our server.
241

241

00:11:09.470  -->  00:11:11.270
And remember, this callback function,
242

242

00:11:11.270  -->  00:11:13.790
it is what is run each time that someone
243

243

00:11:13.790  -->  00:11:15.580
accesses our web server.
244

244

00:11:15.580  -->  00:11:17.653
So for now let's just log to the console,
245

245

00:11:19.550  -->  00:11:24.377
someone did access the server.
246

246

00:11:25.620  -->  00:11:28.070
Okay, and that is the first part of creating a server.
247

247

00:11:28.070  -->  00:11:31.260
Now the second part is that we actually have to listen
248

248

00:11:31.260  -->  00:11:34.403
on a specific port and a specific IP address.
249

249

00:11:35.420  -->  00:11:38.490
And again, I'm not going to go into deep explanations here
250

250

00:11:38.490  -->  00:11:40.940
in this quick crash course.
251

251

00:11:40.940  -->  00:11:43.580
So all we're gonna do here is to really
252

252

00:11:43.580  -->  00:11:45.873
try to implement this small project.
253

253

00:11:47.999  -->  00:11:51.163
And so how this works is that we take the server
254

254

00:11:51.163  -->  00:11:53.400
that we just created here,
255

255

00:11:53.400  -->  00:11:55.900
so this variable here, and then we use
256

256

00:11:55.900  -->  00:11:58.020
the list method on it.
257

257

00:11:58.020  -->  00:11:59.860
So this will basically tell Node.js
258

258

00:11:59.860  -->  00:12:02.880
to always keep listening on a certain port
259

259

00:12:02.880  -->  00:12:05.140
on a certain IP address.
260

260

00:12:05.140  -->  00:12:08.810
And so I'm gonna use port 1337,
261

261

00:12:08.810  -->  00:12:11.180
and this is kind of standard in Node.
262

262

00:12:11.180  -->  00:12:15.190
You will also see 3,000, 8,000, maybe 80.
263

263

00:12:15.190  -->  00:12:16.860
They're some kind of standards,
264

264

00:12:16.860  -->  00:12:18.400
but I'm just gonna go with this one here.
265

265

00:12:18.400  -->  00:12:22.600
So that is the port, and now we need the IP address as well.
266

266

00:12:22.600  -->  00:12:26.000
And what they usually do is to use localhost.
267

267

00:12:26.000  -->  00:12:28.750
So localhost means like the current computer.
268

268

00:12:28.750  -->  00:12:30.390
So the computer that the program
269

269

00:12:30.390  -->  00:12:33.370
is right now running on.
270

270

00:12:33.370  -->  00:12:36.300
And so localhost gets this standard IP address
271

271

00:12:36.300  -->  00:12:37.520
that I'm sure you have seen before.
272

272

00:12:37.520  -->  00:12:41.273
So 127.0.0.1.
273

273

00:12:42.700  -->  00:12:44.640
And then as soon as we start listening,
274

274

00:12:44.640  -->  00:12:47.193
also this callback function here gets fired;
275

275

00:12:48.650  -->  00:12:49.900
and this is not mandatory,
276

276

00:12:49.900  -->  00:12:52.600
this is just so we know that the server
277

277

00:12:52.600  -->  00:12:53.943
has started listening.
278

278

00:12:58.260  -->  00:13:02.510
So let's just say that we're listening for requests now.
279

279

00:13:02.510  -->  00:13:05.330
And what we did here, and which is the most important part,
280

280

00:13:05.330  -->  00:13:07.570
is to pass in this callback function
281

281

00:13:07.570  -->  00:13:08.990
which will get fired each time
282

282

00:13:08.990  -->  00:13:11.960
that someone accesses the server.
283

283

00:13:11.960  -->  00:13:13.950
And now in order for this to actually start running,
284

284

00:13:13.950  -->  00:13:15.300
we need to actually listen.
285

285

00:13:15.300  -->  00:13:20.300
So basically, to look for incoming requests at port 1337
286

286

00:13:20.490  -->  00:13:22.153
of this IP address.
287

287

00:13:24.293  -->  00:13:25.840
And so let's save this,
288

288

00:13:25.840  -->  00:13:28.570
and now we get listening for requests now.
289

289

00:13:28.570  -->  00:13:30.950
And so let's actually do a request
290

290

00:13:30.950  -->  00:13:33.370
so that we can see if this actually works.
291

291

00:13:33.370  -->  00:13:34.610
And the simplest way of doing that
292

292

00:13:34.610  -->  00:13:37.130
is to actually just use a browser.
293

293

00:13:37.130  -->  00:13:39.750
So we're gonna go to this IP and this port
294

294

00:13:40.630  -->  00:13:42.943
and see if it works.
295

295

00:13:44.420  -->  00:13:47.100
0., and it's exactly already here,
296

296

00:13:47.100  -->  00:13:50.323
so just now put this part.
297

297

00:13:52.480  -->  00:13:54.060
And so we see that it's loading,
298

298

00:13:54.060  -->  00:13:56.510
and it doesn't do actually anything right now
299

299

00:13:56.510  -->  00:13:59.410
because we don't have any code here, okay, in here.
300

300

00:13:59.410  -->  00:14:02.410
We don't have any code except the console log,
301

301

00:14:02.410  -->  00:14:03.800
and that actually worked.
302

302

00:14:03.800  -->  00:14:06.450
So someone did access the server.
303

303

00:14:06.450  -->  00:14:07.900
Now this here keeps loading
304

304

00:14:07.900  -->  00:14:09.910
because we're not sending back any result
305

305

00:14:09.910  -->  00:14:12.040
from the server to the browser right now.
306

306

00:14:12.040  -->  00:14:14.470
And so this will keep spinning here
307

307

00:14:14.470  -->  00:14:16.253
until it eventually times out.
308

308

00:14:18.220  -->  00:14:21.350
But what we know is that it actually now works
309

309

00:14:21.350  -->  00:14:25.120
because we got this message here, logged to our console.
310

310

00:14:25.120  -->  00:14:28.030
So we can now get rid of this console.log here
311

311

00:14:28.030  -->  00:14:31.860
and actually send a response back from the server.
312

312

00:14:31.860  -->  00:14:35.160
So just that the page can actually then load something
313

313

00:14:35.160  -->  00:14:37.223
instead of spinning until infinity.
314

314

00:14:38.255  -->  00:14:42.680
And that is where this response object here comes into play,
315

315

00:14:42.680  -->  00:14:45.840
because both the request and the response object
316

316

00:14:45.840  -->  00:14:48.500
have certain methods and properties on them
317

317

00:14:48.500  -->  00:14:51.960
that we can now use in order to, in this case,
318

318

00:14:51.960  -->  00:14:54.583
to send a response back to the browser.
319

319

00:14:55.620  -->  00:14:58.896
So we can use res and then end.
320

320

00:14:58.896  -->  00:15:01.210
And this is not send, it really is end.
321

321

00:15:01.210  -->  00:15:03.500
And it's end because we can do a couple of things
322

322

00:15:03.500  -->  00:15:07.060
before this, but for now let's keep it at this.
323

323

00:15:07.060  -->  00:15:11.060
So let's just say res end and then just some text in here.
324

324

00:15:11.060  -->  00:15:14.943
So this is the response.
325

325

00:15:17.080  -->  00:15:18.910
So one of the things that we can do before,
326

326

00:15:18.910  -->  00:15:21.730
like I mentioned, is to set a header.
327

327

00:15:21.730  -->  00:15:23.600
So an HTTP header.
328

328

00:15:23.600  -->  00:15:25.840
And I'm not sure if you are familiar with headers,
329

329

00:15:25.840  -->  00:15:28.040
but they are just like a small message
330

330

00:15:28.040  -->  00:15:30.410
that we send with a request to let the browser know
331

331

00:15:30.410  -->  00:15:31.960
what kind of data is coming in.
332

332

00:15:33.210  -->  00:15:35.063
So we can say writeHead
333

333

00:15:36.840  -->  00:15:38.910
and then an HTTP status code,
334

334

00:15:38.910  -->  00:15:43.070
and I write 200 for okay, and then the content type.
335

335

00:15:43.070  -->  00:15:44.400
And it works like this.
336

336

00:15:44.400  -->  00:15:48.023
So we basically pass an object here with some options.
337

337

00:15:50.870  -->  00:15:52.343
So content type.
338

338

00:15:54.560  -->  00:15:57.150
And so let's say that what we're gonna send back here
339

339

00:15:57.150  -->  00:15:59.820
will be HTML, okay?
340

340

00:15:59.820  -->  00:16:01.690
And so this HTTP status code
341

341

00:16:01.690  -->  00:16:03.290
is something that you probably see.
342

342

00:16:03.290  -->  00:16:06.430
For example, if we have an error, we usually have a 404.
343

343

00:16:06.430  -->  00:16:07.710
You know that one, right?
344

344

00:16:07.710  -->  00:16:09.640
And if everything works just fine,
345

345

00:16:09.640  -->  00:16:12.590
then 200 is like a standard for that.
346

346

00:16:13.490  -->  00:16:16.030
So just a small recap of what's happening here.
347

347

00:16:16.030  -->  00:16:18.730
So each time someone is accessing our server,
348

348

00:16:18.730  -->  00:16:20.130
we will have a response.
349

349

00:16:20.130  -->  00:16:23.270
And to that response, we write a header,
350

350

00:16:23.270  -->  00:16:25.600
in this case, saying that we have a response
351

351

00:16:25.600  -->  00:16:27.400
so that everything is okay,
352

352

00:16:27.400  -->  00:16:28.780
and that's the 200.
353

353

00:16:28.780  -->  00:16:30.470
And then the content type,
354

354

00:16:30.470  -->  00:16:32.530
saying that it's gonna be text html.
355

355

00:16:32.530  -->  00:16:35.200
And then we also send the response itself.
356

356

00:16:35.200  -->  00:16:36.540
And that always has to happen
357

357

00:16:36.540  -->  00:16:38.163
after setting the header.
358

358

00:16:39.110  -->  00:16:42.423
All right, and so let's see what happens now in this case.
359

359

00:16:46.320  -->  00:16:48.110
So this is what we want.
360

360

00:16:48.110  -->  00:16:51.023
And here we go, so this is the response.
361

361

00:16:52.260  -->  00:16:57.260
What I wanted to do is to show you the Network tab.
362

362

00:16:57.530  -->  00:16:59.740
We have to reload this actually to work.
363

363

00:16:59.740  -->  00:17:02.540
And so here you see the status code
364

364

00:17:02.540  -->  00:17:03.373
that we sent back.
365

365

00:17:03.373  -->  00:17:05.200
So the 200 OK.
366

366

00:17:05.200  -->  00:17:06.893
If I were to say 404,
367

367

00:17:09.290  -->  00:17:13.070
and now do it again, then you will see status 404
368

368

00:17:13.070  -->  00:17:14.960
and it's actually also in red here
369

369

00:17:14.960  -->  00:17:16.410
saying that we have an error.
370

370

00:17:17.700  -->  00:17:19.960
The response is still the same,
371

371

00:17:19.960  -->  00:17:23.420
but this just changed the status code of this response
372

372

00:17:23.420  -->  00:17:26.020
simply because we sent a different header.
373

373

00:17:26.020  -->  00:17:29.410
So just to show you the difference here.
374

374

00:17:29.410  -->  00:17:32.250
So this is the very, very basic functionality
375

375

00:17:32.250  -->  00:17:36.150
of handing requests and sending back responses.
376

376

00:17:36.150  -->  00:17:37.630
Now before finishing this video,
377

377

00:17:37.630  -->  00:17:40.770
I wanna implement something called routing.
378

378

00:17:40.770  -->  00:17:43.510
And what routing means is that we basically respond
379

379

00:17:43.510  -->  00:17:45.893
in different ways for different URLs.
380

380

00:17:46.970  -->  00:17:49.910
Because right now, no matter what URL we actually have
381

381

00:17:49.910  -->  00:17:54.070
on our server, like this, so we can write
382

382

00:17:54.070  -->  00:17:58.140
something like this; and it doesn't really matter,
383

383

00:17:58.140  -->  00:18:01.468
it will always send back the same response.
384

384

00:18:01.468  -->  00:18:04.910
It doesn't matter what URL we have here, all right,
385

385

00:18:04.910  -->  00:18:06.720
because we're not responding to that here.
386

386

00:18:06.720  -->  00:18:08.650
We don't have any routing in place.
387

387

00:18:08.650  -->  00:18:11.050
So whatever URL we have, we always send back
388

388

00:18:11.050  -->  00:18:12.580
the same response.
389

389

00:18:12.580  -->  00:18:16.040
But what we really want, and that is what routing really is,
390

390

00:18:16.040  -->  00:18:19.190
is to respond differently to these different URLs.
391

391

00:18:19.190  -->  00:18:21.930
So for example here, we have /product,
392

392

00:18:21.930  -->  00:18:23.560
and so then we have this overview
393

393

00:18:23.560  -->  00:18:24.960
of all the different product.
394

394

00:18:24.960  -->  00:18:28.120
But if we then click here, we have laptop.
395

395

00:18:28.120  -->  00:18:31.170
So we have /laptop, and so we see the detail page
396

396

00:18:31.170  -->  00:18:32.970
for this specific laptop.
397

397

00:18:32.970  -->  00:18:35.770
And then we also have the ID parameter here,
398

398

00:18:35.770  -->  00:18:37.530
which in this case is zero.
399

399

00:18:37.530  -->  00:18:40.130
But if it was one, then it would also respond
400

400

00:18:40.130  -->  00:18:42.240
in a different way because we will now have
401

401

00:18:42.240  -->  00:18:45.310
laptop number one, laptop number two,
402

402

00:18:45.310  -->  00:18:46.690
and so on and so forth.
403

403

00:18:46.690  -->  00:18:48.620
And so that exactly is routing.
404

404

00:18:48.620  -->  00:18:51.620
It's responding in different ways to different URLs.
405

405

00:18:53.100  -->  00:18:56.310
All right, and so we go back and we are back to products.
406

406

00:18:56.310  -->  00:18:58.560
And even if we don't have anything here,
407

407

00:18:58.560  -->  00:19:02.180
I also routed that one, so to this same overview.
408

408

00:19:02.180  -->  00:19:03.610
Okay, makes sense?
409

409

00:19:03.610  -->  00:19:06.060
So let's now quickly implement that.
410

410

00:19:06.060  -->  00:19:08.167
And for that, we will have to look at the URL,
411

411

00:19:08.167  -->  00:19:10.390
and so we're gonna use a tool for that.
412

412

00:19:10.390  -->  00:19:12.670
So just another Node module.
413

413

00:19:12.670  -->  00:19:15.750
So again, Node comes built in with this functionality
414

414

00:19:15.750  -->  00:19:18.773
that we're going to use, and it's in the URL module.
415

415

00:19:22.880  -->  00:19:23.993
So require.
416

416

00:19:27.450  -->  00:19:28.800
But then, url.
417

417

00:19:28.800  -->  00:19:30.520
And so let's now use this.
418

418

00:19:30.520  -->  00:19:32.940
And where do you think we should use it?
419

419

00:19:32.940  -->  00:19:35.030
Well, it should be right here in this
420

420

00:19:35.030  -->  00:19:36.730
server callback function here.
421

421

00:19:36.730  -->  00:19:38.090
So right in this function.
422

422

00:19:38.090  -->  00:19:39.910
And that is because that's the function
423

423

00:19:39.910  -->  00:19:42.210
that's gonna be fired each time that someone
424

424

00:19:42.210  -->  00:19:44.640
accesses the server.
425

425

00:19:44.640  -->  00:19:47.630
And so that will always be a different URL.
426

426

00:19:47.630  -->  00:19:50.963
And so this is of course where we want to analyze that URL.
427

427

00:19:52.880  -->  00:19:57.880
And so what we can do is to say url.parse,
428

428

00:19:58.270  -->  00:20:01.160
and then where is the URL actually stored?
429

429

00:20:01.160  -->  00:20:03.330
Well, now we're gonna use the request object
430

430

00:20:03.330  -->  00:20:06.510
for the first time because that is where the URL
431

431

00:20:06.510  -->  00:20:08.360
is actually stored.
432

432

00:20:08.360  -->  00:20:10.360
And actually, let's comment out this part here
433

433

00:20:10.360  -->  00:20:14.850
and start by having a console log of the request object
434

434

00:20:14.850  -->  00:20:18.080
just so you get an overview of all the information
435

435

00:20:18.080  -->  00:20:20.653
that we get each time that someone makes a request.
436

436

00:20:23.190  -->  00:20:25.023
So let's reload here.
437

437

00:20:26.350  -->  00:20:29.230
And so this here, all this data that you see,
438

438

00:20:29.230  -->  00:20:32.240
all of this is the request data.
439

439

00:20:32.240  -->  00:20:34.250
So there's a ton of stuff in here,
440

440

00:20:34.250  -->  00:20:36.993
and somewhere in here is also our URL.
441

441

00:20:38.020  -->  00:20:43.020
So let's actually say URL, do it again,
442

442

00:20:43.070  -->  00:20:47.080
and then here it is.
443

443

00:20:47.080  -->  00:20:50.370
So this is the URL that we typed in here, right?
444

444

00:20:50.370  -->  00:20:53.743
If we just do like products now,
445

445

00:20:55.230  -->  00:20:59.713
just like this, well then it should say /products.
446

446

00:21:00.720  -->  00:21:03.610
If we could now actually go ahead and use this one here,
447

447

00:21:03.610  -->  00:21:06.230
but this doesn't quite give us enough functionality
448

448

00:21:06.230  -->  00:21:09.920
and that is why we use the url module.
449

449

00:21:09.920  -->  00:21:12.550
So this here, what we did here doesn't even require
450

450

00:21:12.550  -->  00:21:15.720
the url module that we required up here.
451

451

00:21:15.720  -->  00:21:19.530
But now, it is actually time to use that one.
452

452

00:21:19.530  -->  00:21:21.960
And so I'm gonna show you why here in a second.
453

453

00:21:21.960  -->  00:21:25.247
So we will do url parse of the req,
454

454

00:21:26.095  -->  00:21:28.147
so of the request URL, okay?
455

455

00:21:28.147  -->  00:21:31.522
And then we also have to specify a second argument,
456

456

00:21:31.522  -->  00:21:34.700
which will simply make it so that the query
457

457

00:21:34.700  -->  00:21:36.593
is parsed into an object.
458

458

00:21:37.890  -->  00:21:42.070
So const, and I'm gonna call this one here query.
459

459

00:21:42.070  -->  00:21:45.433
And so let's now log what that actually will do.
460

460

00:21:47.240  -->  00:21:48.173
Do it again.
461

461

00:21:49.670  -->  00:21:54.000
And so now instead of just getting this product string here,
462

462

00:21:54.000  -->  00:21:56.310
we get all of this different stuff here,
463

463

00:21:56.310  -->  00:21:58.360
which for now is probably not so useful,
464

464

00:21:58.360  -->  00:22:00.950
but you will see later why we really need
465

465

00:22:00.950  -->  00:22:01.800
all of this here.
466

466

00:22:03.420  -->  00:22:06.472
So right now we're actually just interested
467

467

00:22:06.472  -->  00:22:08.360
in the pathName here.
468

468

00:22:08.360  -->  00:22:10.560
So basically what we had here.
469

469

00:22:10.560  -->  00:22:13.910
So we could use in this stage just req.url
470

470

00:22:13.910  -->  00:22:17.020
without using the url module here.
471

471

00:22:17.020  -->  00:22:18.350
But again, you're gonna see in a second
472

472

00:22:18.350  -->  00:22:21.740
why we actually need this url.parse.
473

473

00:22:21.740  -->  00:22:23.390
So this is actually not called query,
474

474

00:22:23.390  -->  00:22:25.293
but I'm gonna call it pathName.
475

475

00:22:26.560  -->  00:22:30.673
And so what we want here is just the pathName, all right?
476

476

00:22:31.760  -->  00:22:33.147
So .pathName.
477

477

00:22:36.330  -->  00:22:39.303
And so let's now just quickly take a look at that.
478

478

00:22:40.240  -->  00:22:43.620
Reload, and it should give us products.
479

479

00:22:43.620  -->  00:22:45.240
All right, here we go.
480

480

00:22:45.240  -->  00:22:47.260
And with this, we can actually already start
481

481

00:22:47.260  -->  00:22:49.810
implementing some very simple routing
482

482

00:22:49.810  -->  00:22:51.860
because all we have to do is to now do
483

483

00:22:51.860  -->  00:22:53.980
an if/else statement.
484

484

00:22:53.980  -->  00:22:58.980
So we can say if the pathName is equal to product,
485

485

00:23:04.192  -->  00:23:08.710
then we can do a certain response for that.
486

486

00:23:08.710  -->  00:23:10.390
And later, it will of course be
487

487

00:23:10.390  -->  00:23:11.610
all of these different computers,
488

488

00:23:11.610  -->  00:23:16.040
all of this data that we get from this JSON file
489

489

00:23:16.040  -->  00:23:17.870
that we imported right here in the beginning.
490

490

00:23:17.870  -->  00:23:19.400
But for now, just for testing,
491

491

00:23:19.400  -->  00:23:22.700
let's simply right here what we have.
492

492

00:23:22.700  -->  00:23:27.290
So, this is the PRODUCTS page.
493

493

00:23:32.650  -->  00:23:37.100
Else if, and let's give us some more space here.
494

494

00:23:37.100  -->  00:23:38.500
We can actually do it like this.
495

495

00:23:38.500  -->  00:23:41.970
It doesn't have to be right here after the first if.
496

496

00:23:41.970  -->  00:23:46.970
And so we can say pathname if it is equal to laptop.
497

497

00:23:51.390  -->  00:23:53.000
Here I forgot the slash.
498

498

00:23:53.000  -->  00:23:57.030
It always has the slash in the pathName.
499

499

00:23:57.030  -->  00:23:59.886
So this one is for product, and this one is for laptop.
500

500

00:23:59.886  -->  00:24:03.770
So we have laptop,
501

501

00:24:03.770  -->  00:24:06.600
and we're gonna take care of that part here in a second,
502

502

00:24:06.600  -->  00:24:08.450
and we have products.
503

503

00:24:08.450  -->  00:24:11.770
And then we also have the products when there's nothing.
504

504

00:24:11.770  -->  00:24:14.370
So let's also quickly implement that.
505

505

00:24:14.370  -->  00:24:17.170
So if the pathName is product or
506

506

00:24:19.000  -->  00:24:22.870
if the pathName is just empty.
507

507

00:24:22.870  -->  00:24:24.740
So in either of these two cases,
508

508

00:24:24.740  -->  00:24:26.453
we will have the product page.
509

509

00:24:28.310  -->  00:24:32.793
And if it says laptop, well then we have the laptop page.
510

510

00:24:34.470  -->  00:24:36.030
And if we get something entirely different,
511

511

00:24:36.030  -->  00:24:39.130
which is not products or nothing or laptop,
512

512

00:24:39.130  -->  00:24:42.993
well in that case, we just say that we didn't found the URL.
513

513

00:24:44.160  -->  00:24:47.130
So basically, it's like an error.
514

514

00:24:47.130  -->  00:24:48.663
So we're gonna say,
515

515

00:24:54.490  -->  00:24:59.020
was not found on the server.
516

516

00:24:59.020  -->  00:25:02.400
And this is the correct case of using the 404, right?
517

517

00:25:02.400  -->  00:25:04.823
So an error like I showed you in the beginning.
518

518

00:25:05.860  -->  00:25:08.963
All right, and so let's now actually test this out.
519

519

00:25:10.560  -->  00:25:13.090
So we have products here in the URL as you see.
520

520

00:25:13.090  -->  00:25:14.290
So reload.
521

521

00:25:14.290  -->  00:25:16.973
And yeah, this is the products page.
522

522

00:25:17.820  -->  00:25:20.063
If we say laptop,
523

523

00:25:21.520  -->  00:25:23.860
woah, what happened here?
524

524

00:25:23.860  -->  00:25:27.370
Ah, so it has to be the capital N.
525

525

00:25:27.370  -->  00:25:30.160
Okay, let's try that again.
526

526

00:25:30.160  -->  00:25:32.890
And this is the laptop page, awesome.
527

527

00:25:32.890  -->  00:25:35.240
And on the third case, which is nothing,
528

528

00:25:35.240  -->  00:25:38.895
and now we get the URL was not found on the server.
529

529

00:25:38.895  -->  00:25:40.789
So that's not what we want.
530

530

00:25:40.789  -->  00:25:41.956
This is found.
531

531

00:25:42.813  -->  00:25:45.315
And that's actually because here it's not nothing,
532

532

00:25:45.315  -->  00:25:46.898
it is just a slash.
533

533

00:25:50.503  -->  00:25:53.670
So yeah, now this is the product page.
534

534

00:25:54.550  -->  00:25:59.031
With the products again, we get the product page.
535

535

00:25:59.031  -->  00:26:02.968
With the laptop, we get the laptop page.
536

536

00:26:02.968  -->  00:26:05.366
And if we have something else,
537

537

00:26:05.366  -->  00:26:07.931
then we get URL was not found on the server,
538

538

00:26:07.931  -->  00:26:11.014
and we have the 404 status down here.
539

539

00:26:13.000  -->  00:26:17.290
Now finally about this ID parameter that we have here.
540

540

00:26:17.290  -->  00:26:20.560
So basically, this ID here is a parameter in the URL.
541

541

00:26:20.560  -->  00:26:22.753
We are also now not responding to that.
542

542

00:26:23.650  -->  00:26:25.970
So we still get the laptop page,
543

543

00:26:25.970  -->  00:26:29.190
but nothing really happens according to this number.
544

544

00:26:29.190  -->  00:26:30.297
And so let's fix that.
545

545

00:26:30.297  -->  00:26:33.210
And the first step to do that is to actually
546

546

00:26:33.210  -->  00:26:36.080
retrieve this ID from this URL.
547

547

00:26:36.080  -->  00:26:38.160
And so that is where the url module
548

548

00:26:38.160  -->  00:26:40.063
actually gets really handy.
549

549

00:26:41.360  -->  00:26:43.380
So let me show that to you.
550

550

00:26:43.380  -->  00:26:45.293
So we get the pathName already,
551

551

00:26:48.360  -->  00:26:49.930
and now the query.
552

552

00:26:49.930  -->  00:26:53.840
So that part with the ID equals one, two, three, et cetera,
553

553

00:26:53.840  -->  00:26:55.263
that is called the query.
554

554

00:26:56.390  -->  00:27:01.390
And so all we have to do is to now use the query.
555

555

00:27:03.570  -->  00:27:06.570
All right, that's just to make sure
556

556

00:27:07.466  -->  00:27:08.630
that it makes sense to you.
557

557

00:27:08.630  -->  00:27:10.750
Let's again log it to the console here
558

558

00:27:10.750  -->  00:27:13.250
so that you see what we're actually talking about.
559

559

00:27:15.350  -->  00:27:17.490
So let's reload this.
560

560

00:27:17.490  -->  00:27:19.830
And so now you see here that we have query,
561

561

00:27:19.830  -->  00:27:21.650
and then in there we get an object
562

562

00:27:21.650  -->  00:27:23.520
saying id is four.
563

563

00:27:23.520  -->  00:27:26.130
So it basically parses, which is exactly
564

564

00:27:26.130  -->  00:27:27.517
the name of the function;
565

565

00:27:27.517  -->  00:27:30.760
and so it parses our URL and the query string
566

566

00:27:30.760  -->  00:27:34.280
that we have, and it creates this object saying id four.
567

567

00:27:34.280  -->  00:27:36.000
We can now continue this.
568

568

00:27:36.000  -->  00:27:40.350
So with this format, so &amp;, and I could say
569

569

00:27:40.350  -->  00:27:45.350
name=apple let's say, and let's also say date=today.
570

570

00:27:49.750  -->  00:27:52.910
Just for fun so that you see what happens here.
571

571

00:27:52.910  -->  00:27:55.610
And so now we have an object with three elements.
572

572

00:27:55.610  -->  00:27:59.400
So id, name and date, all nicely parsed
573

573

00:27:59.400  -->  00:28:01.063
into an object that we can use.
574

574

00:28:02.040  -->  00:28:06.303
Now in this case, we will only actually use the id.
575

575

00:28:08.724  -->  00:28:10.420
And so it's gonna look like this.
576

576

00:28:10.420  -->  00:28:13.050
So in the query object, there will be this object
577

577

00:28:13.050  -->  00:28:14.470
with the id key.
578

578

00:28:14.470  -->  00:28:16.790
And so actually, instead of having this query,
579

579

00:28:16.790  -->  00:28:19.410
we can simply add that id here,
580

580

00:28:19.410  -->  00:28:22.610
and then that will immediately give us the id
581

581

00:28:22.610  -->  00:28:25.100
that comes from the query string.
582

582

00:28:25.100  -->  00:28:26.300
Okay, makes sense?
583

583

00:28:26.300  -->  00:28:30.570
So that is how we read the id from our URL.
584

584

00:28:30.570  -->  00:28:34.230
And so with that, we can actually response to this.
585

585

00:28:34.230  -->  00:28:38.787
So this is the laptop page for laptop, and now the number.
586

586

00:28:40.720  -->  00:28:42.470
So let's do a template string here.
587

587

00:28:43.370  -->  00:28:44.877
So we'll place this here, id.
588

588

00:28:50.900  -->  00:28:53.490
And so this should now give us the exact number
589

589

00:28:53.490  -->  00:28:55.383
that we have in the URL, right?
590

590

00:28:56.320  -->  00:28:58.713
So id four, let's wait for it.
591

591

00:28:59.620  -->  00:29:01.683
For laptop four, great.
592

592

00:29:02.890  -->  00:29:07.060
For three, two, and so on and so forth.
593

593

00:29:07.060  -->  00:29:08.003
So awesome.
594

594

00:29:09.280  -->  00:29:10.900
Now in this data JSON,
595

595

00:29:10.900  -->  00:29:15.900
we start with zero and then we have four laptops.
596

596

00:29:15.970  -->  00:29:19.130
So what would happen if we type in the five or the 10
597

597

00:29:19.130  -->  00:29:21.090
or something else?
598

598

00:29:21.090  -->  00:29:23.500
Well, of course everything works the same.
599

599

00:29:23.500  -->  00:29:26.000
So here we get exactly the number that we typed in here.
600

600

00:29:26.000  -->  00:29:27.660
But in the case of the store here,
601

601

00:29:27.660  -->  00:29:30.720
it doesn't make much sense because the last one that we have
602

602

00:29:30.720  -->  00:29:32.000
is with the four.
603

603

00:29:32.000  -->  00:29:35.210
But with the five, there is not really a laptop.
604

604

00:29:35.210  -->  00:29:37.550
And so the response that we want in this case
605

605

00:29:37.550  -->  00:29:39.493
is something like this.
606

606

00:29:40.580  -->  00:29:42.570
Again, because number five is not actually
607

607

00:29:42.570  -->  00:29:44.473
the id of one of our product.
608

608

00:29:46.315  -->  00:29:48.040
And so how are we gonna do that?
609

609

00:29:48.040  -->  00:29:48.930
Well, very simple.
610

610

00:29:48.930  -->  00:29:51.680
We actually just do it here in this routing,
611

611

00:29:51.680  -->  00:29:54.220
in this routing path, okay?
612

612

00:29:54.220  -->  00:29:57.750
So we say that the pathName has to be laptop.
613

613

00:29:57.750  -->  00:30:02.410
And at the same time, the id must be smaller
614

614

00:30:02.410  -->  00:30:04.963
than laptopData.length.
615

615

00:30:10.027  -->  00:30:10.860
.length, okay?
616

616

00:30:10.860  -->  00:30:13.523
And that is because laptopData is an array.
617

617

00:30:14.866  -->  00:30:17.330
So this data here is basically an array
618

618

00:30:17.330  -->  00:30:18.800
of these five objects.
619

619

00:30:18.800  -->  00:30:20.911
And so if we have five objects in here,
620

620

00:30:20.911  -->  00:30:23.011
then the length of the array will be five.
621

621

00:30:25.013  -->  00:30:27.650
And so by having this test,
622

622

00:30:27.650  -->  00:30:29.510
we'll then ensure that this id here
623

623

00:30:29.510  -->  00:30:31.223
is always smaller than five.
624

624

00:30:32.850  -->  00:30:35.060
And so right now if we have 10,
625

625

00:30:35.060  -->  00:30:38.260
well then we get URL was not found on the server.
626

626

00:30:38.260  -->  00:30:40.880
With five, we also get the same error,
627

627

00:30:40.880  -->  00:30:44.470
but then with four, which remember is the last laptop,
628

628

00:30:44.470  -->  00:30:47.010
we get a page for laptop number four.
629

629

00:30:47.010  -->  00:30:48.010
So awesome.
630

630

00:30:48.010  -->  00:30:50.150
So that is our routing.
631

631

00:30:50.150  -->  00:30:53.523
And that should be actually enough for just one video.
632

632

00:30:54.400  -->  00:30:56.370
So this is actually very simple,
633

633

00:30:56.370  -->  00:30:58.390
a very simple routing situation.
634

634

00:30:58.390  -->  00:31:01.000
In a real world app, it will get very big
635

635

00:31:01.000  -->  00:31:03.270
with 10s, hundreds of routes.
636

636

00:31:03.270  -->  00:31:06.100
And so this code can be quite difficult,
637

637

00:31:06.100  -->  00:31:09.490
and it can be quite complicated to do this.
638

638

00:31:09.490  -->  00:31:11.810
And so usually when working with Node,
639

639

00:31:11.810  -->  00:31:14.520
almost everyone I would say uses a Node framework
640

640

00:31:14.520  -->  00:31:16.670
called Express to handle routing
641

641

00:31:16.670  -->  00:31:19.670
and to handle lots of other stuff, all right?
642

642

00:31:19.670  -->  00:31:22.170
But I think it's very important to actually understand
643

643

00:31:22.170  -->  00:31:25.250
the basics of the technology in this case, Node.js,
644

644

00:31:25.250  -->  00:31:29.310
before using a framework like Express, all right?
645

645

00:31:29.310  -->  00:31:31.520
And so exactly what you're doing here.
646

646

00:31:31.520  -->  00:31:33.070
You're learning the very basics
647

647

00:31:33.070  -->  00:31:36.130
of how we can do this basic stuff with Node.js.
648

648

00:31:36.130  -->  00:31:39.350
It's very exciting to be able to really run JavaScript
649

649

00:31:39.350  -->  00:31:40.420
on the server.
650

650

00:31:40.420  -->  00:31:41.890
So let's wrap up this video here.
651

651

00:31:41.890  -->  00:31:44.850
In the next one, we will then implement basically
652

652

00:31:44.850  -->  00:31:47.420
the visual part and getting all the data
653

653

00:31:47.420  -->  00:31:50.793
from the JSON data that we already imported.
654

654

00:31:51.840  -->  00:31:53.823
So see you back here in a second.
