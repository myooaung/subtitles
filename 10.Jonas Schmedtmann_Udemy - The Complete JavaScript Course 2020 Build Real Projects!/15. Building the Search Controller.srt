1
1

00:00:01,260  -->  00:00:02,760
<v Speaker>Welcome back.</v>
2

2

00:00:02,760  -->  00:00:06,360
In this lecture, we are going to build the search controller
3

3

00:00:06,360  -->  00:00:07,430
and in order to do that,
4

4

00:00:07,430  -->  00:00:10,860
you will learn about the concept of application state.
5

5

00:00:10,860  -->  00:00:12,550
And then you will learn a simple way
6

6

00:00:12,550  -->  00:00:15,403
of implementing state in our app.
7

7

00:00:16,270  -->  00:00:19,310
So let's open up index.js which is
8

8

00:00:19,310  -->  00:00:21,140
where we're gonna put our controller.
9

9

00:00:21,140  -->  00:00:25,480
So again, each model and each view will get it's own file
10

10

00:00:25,480  -->  00:00:26,830
for each of the functionality.
11

11

00:00:26,830  -->  00:00:29,300
But for controllers, I'm going to put all of them
12

12

00:00:29,300  -->  00:00:32,210
into the same file because that's make it a lot easier
13

13

00:00:32,210  -->  00:00:35,350
as you will see when the file gets bigger and bigger
14

14

00:00:35,350  -->  00:00:36,437
as we adding more controllers.
15

15

00:00:36,437  -->  00:00:40,100
And it will be easier to have them all in one file, okay?
16

16

00:00:40,100  -->  00:00:43,020
So let's now talk a little bit about something called state.
17

17

00:00:43,020  -->  00:00:45,620
So imagine our final app running with all the
18

18

00:00:45,620  -->  00:00:49,720
search queries, the recipes, the likes, the shopping list.
19

19

00:00:49,720  -->  00:00:53,530
So what is the state of our app in any given moment?
20

20

00:00:53,530  -->  00:00:57,160
So think about what is the like the current search query?
21

21

00:00:57,160  -->  00:00:58,800
Or what's the current recipe?
22

22

00:00:58,800  -->  00:01:02,030
Or how many servings are currently being calculated?
23

23

00:01:02,030  -->  00:01:03,990
And what's currently in the shopping list?
24

24

00:01:03,990  -->  00:01:07,460
So all few things in one given moment are the state.
25

25

00:01:07,460  -->  00:01:09,890
So all these data in the current state
26

26

00:01:09,890  -->  00:01:11,810
in a current moment of our app,
27

27

00:01:11,810  -->  00:01:14,230
all of this data is the state and we want
28

28

00:01:14,230  -->  00:01:15,930
that to be in one central place
29

29

00:01:15,930  -->  00:01:18,560
like one central variable like an object
30

30

00:01:18,560  -->  00:01:19,550
in which we have then,
31

31

00:01:19,550  -->  00:01:22,230
basically all the data that defines our app
32

32

00:01:22,230  -->  00:01:25,850
in a given moment in one place in one object, okay?
33

33

00:01:25,850  -->  00:01:27,290
So that's what we're going to implement now
34

34

00:01:27,290  -->  00:01:29,140
and it's actually very easy at least
35

35

00:01:29,140  -->  00:01:32,660
in our very simple app like this, okay?
36

36

00:01:32,660  -->  00:01:34,770
Now their entire library is for state,
37

37

00:01:34,770  -->  00:01:36,780
maybe you've heard of Rudex
38

38

00:01:36,780  -->  00:01:39,930
which is used together with the React
39

39

00:01:39,930  -->  00:01:43,360
so that's a very popular state management library.
40

40

00:01:43,360  -->  00:01:45,480
But in this case, we will just do something very simple,
41

41

00:01:45,480  -->  00:01:49,020
just one object which is the state of our app.
42

42

00:01:49,020  -->  00:01:52,470
And Redux this is like the store, it's called store
43

43

00:01:52,470  -->  00:01:55,310
but let's just call it state here, okay?
44

44

00:01:55,310  -->  00:01:57,163
So const state,
45

45

00:01:58,520  -->  00:01:59,720
and for now it's empty.
46

46

00:01:59,720  -->  00:02:01,620
And let's actually add a comment here.
47

47

00:02:04,030  -->  00:02:07,410
So saying the global state of the app.
48

48

00:02:07,410  -->  00:02:09,143
And in here we will have ...
49

49

00:02:11,020  -->  00:02:13,950
The search object so all the data about the search
50

50

00:02:13,950  -->  00:02:17,370
which we actually already coded up in the last lecture.
51

51

00:02:17,370  -->  00:02:19,330
So remember in the search object is
52

52

00:02:19,330  -->  00:02:21,900
where we have the search query and the search results
53

53

00:02:21,900  -->  00:02:25,360
and so that will be part of our state.
54

54

00:02:25,360  -->  00:02:27,573
Then we want the current recipe object.
55

55

00:02:29,070  -->  00:02:31,873
So that will be later when we're talking about recipes.
56

56

00:02:32,712  -->  00:02:35,050
Then we also want to go shopping list object
57

57

00:02:38,720  -->  00:02:42,720
and we want the liked recipes, okay?
58

58

00:02:42,720  -->  00:02:46,210
And so again, all of these data will be stored at all time
59

59

00:02:46,210  -->  00:02:49,100
in one central variable which we can an access
60

60

00:02:49,100  -->  00:02:51,610
throughout our controller, okay?
61

61

00:02:51,610  -->  00:02:54,040
So instead of having many variables like
62

62

00:02:54,040  -->  00:02:55,900
having the objects store in some place,
63

63

00:02:55,900  -->  00:02:58,550
in some variable or having the recipes like hidden
64

64

00:02:58,550  -->  00:03:01,100
from other functions, from other scopes,
65

65

00:03:01,100  -->  00:03:03,730
we have everything in one place accessible
66

66

00:03:03,730  -->  00:03:07,090
to everything inside of this module, okay?
67

67

00:03:07,090  -->  00:03:09,840
So that's a pattern that I really like to use,
68

68

00:03:09,840  -->  00:03:11,700
and it's really helpful in this case.
69

69

00:03:11,700  -->  00:03:14,030
So again we start with an empty object here.
70

70

00:03:14,030  -->  00:03:15,507
So each time that we reload the app,
71

71

00:03:15,507  -->  00:03:17,200
the state will be empty.
72

72

00:03:17,200  -->  00:03:18,250
And we will actually make some
73

73

00:03:18,250  -->  00:03:20,740
of the state persistent a bit later which means
74

74

00:03:20,740  -->  00:03:23,060
that when we reload the page then the state
75

75

00:03:23,060  -->  00:03:26,810
or some part of the state can actually persist,
76

76

00:03:26,810  -->  00:03:29,470
so it can be saved but let's save that for later.
77

77

00:03:29,470  -->  00:03:31,350
For now let's start implementing here part
78

78

00:03:31,350  -->  00:03:33,170
of the controller for the search.
79

79

00:03:33,170  -->  00:03:35,140
And the first thing that we're gonna do is to actually
80

80

00:03:35,140  -->  00:03:38,950
add an event listener for the search forum, okay?
81

81

00:03:38,950  -->  00:03:42,830
So basically for this button and for this entire form.
82

82

00:03:42,830  -->  00:03:44,653
So let's take a look at their html,
83

83

00:03:48,000  -->  00:03:50,420
and it is up here so the form
84

84

00:03:50,420  -->  00:03:53,420
that we're looking for is this one here called search.
85

85

00:03:53,420  -->  00:03:55,140
So let's now add an event listener
86

86

00:03:55,140  -->  00:03:57,520
for whenever we submit this form, okay?
87

87

00:03:57,520  -->  00:03:59,800
And event listeners are something that go
88

88

00:03:59,800  -->  00:04:01,830
into the controller because that's where
89

89

00:04:01,830  -->  00:04:04,520
we're then gonna delegate what people want to happen
90

90

00:04:05,960  -->  00:04:08,103
when these are submits to form, right?
91

91

00:04:09,270  -->  00:04:10,290
So document
92

92

00:04:11,937  -->  00:04:13,187
.querySelector.
93

93

00:04:18,033  -->  00:04:19,390
addEventListener.
94

94

00:04:19,390  -->  00:04:21,790
And event we're looking for is the submit event.
95

95

00:04:25,260  -->  00:04:27,330
And then of course, our callback function
96

96

00:04:27,330  -->  00:04:32,330
in which we pass the event object into, okay?
97

97

00:04:32,670  -->  00:04:35,770
And let's see what actually happens right now.
98

98

00:04:35,770  -->  00:04:36,930
So when we click this here,
99

99

00:04:36,930  -->  00:04:39,270
you see that the page reloads, right?
100

100

00:04:39,270  -->  00:04:41,870
So let's take a look again and we don't want that to happen.
101

101

00:04:41,870  -->  00:04:45,490
And so we say e.preventDefault, right?
102

102

00:04:45,490  -->  00:04:47,800
So we did that before of course.
103

103

00:04:47,800  -->  00:04:51,320
And then we can now also create a new function that you want
104

104

00:04:51,320  -->  00:04:54,000
to be called whatever the form is submitted, okay?
105

105

00:04:54,000  -->  00:04:55,560
So instead of putting all the logic here
106

106

00:04:55,560  -->  00:04:57,000
inside of this callback function,
107

107

00:04:57,000  -->  00:05:02,000
let's make a clean new separate function from this, okay?
108

108

00:05:02,370  -->  00:05:03,383
So controlSearch.
109

109

00:05:10,000  -->  00:05:11,820
Okay, so no arguments here.
110

110

00:05:11,820  -->  00:05:15,100
All we want to do is to put this code basically
111

111

00:05:15,100  -->  00:05:16,810
outside of this callback function here,
112

112

00:05:16,810  -->  00:05:20,960
make a nice separate function just for this, okay?
113

113

00:05:20,960  -->  00:05:22,990
So whenever we submit the form,
114

114

00:05:22,990  -->  00:05:24,880
we prevent the default from happening
115

115

00:05:24,880  -->  00:05:27,210
and then the controlSearch function is called.
116

116

00:05:27,210  -->  00:05:30,730
And now let's think what we want to happen, okay?
117

117

00:05:30,730  -->  00:05:34,150
So I will actually make now a bunch of comments,
118

118

00:05:34,150  -->  00:05:37,050
listing each of the stuffs that must happen here
119

119

00:05:37,050  -->  00:05:39,420
in this search controller, okay?
120

120

00:05:39,420  -->  00:05:41,640
So the first one is that we should
121

121

00:05:41,640  -->  00:05:43,893
get the query from the view.
122

122

00:05:49,760  -->  00:05:51,490
So let's call this simply query
123

123

00:05:51,490  -->  00:05:53,363
and I will simply add a place folder.
124

124

00:05:55,738  -->  00:05:58,100
And say that we shouldn't do this later, okay?
125

125

00:05:58,100  -->  00:06:01,090
Because in our view module, we will have a function
126

126

00:06:01,090  -->  00:06:03,030
that will get the search query
127

127

00:06:03,030  -->  00:06:04,600
from the other interface, okay?
128

128

00:06:04,600  -->  00:06:06,270
Of course we could put this right here,
129

129

00:06:06,270  -->  00:06:08,880
we could now do a document query selector
130

130

00:06:08,880  -->  00:06:11,680
and then read that data right from the user interface
131

131

00:06:11,680  -->  00:06:14,120
but that's something that has to do more with the viewer.
132

132

00:06:14,120  -->  00:06:16,530
And so we're going to put a method for that
133

133

00:06:16,530  -->  00:06:19,350
or a function into the search view module, okay?
134

134

00:06:19,350  -->  00:06:20,990
But we're gonna do that in the next lecture
135

135

00:06:20,990  -->  00:06:22,840
so that we have one lecture for each
136

136

00:06:22,840  -->  00:06:26,190
of these different parts of the architecture, okay?
137

137

00:06:26,190  -->  00:06:28,090
Right now we're talking about the controller
138

138

00:06:28,090  -->  00:06:29,620
so let's leave it like this for now
139

139

00:06:29,620  -->  00:06:32,060
and then come back in the next lecture.
140

140

00:06:32,060  -->  00:06:35,730
And curl all of these functions for the view, okay?
141

141

00:06:35,730  -->  00:06:36,980
Now if there is a query,
142

142

00:06:36,980  -->  00:06:40,370
we then want to create a new search object, right?
143

143

00:06:40,370  -->  00:06:42,273
So let's say if ...
144

144

00:06:43,860  -->  00:06:46,900
Query so if there is a query.
145

145

00:06:46,900  -->  00:06:49,800
Then what we want to do next is
146

146

00:06:51,470  -->  00:06:55,433
New search object and add it to state.
147

147

00:06:58,170  -->  00:06:59,303
So let's do that.
148

148

00:07:00,330  -->  00:07:05,330
So state.search will be a new Search object
149

149

00:07:06,690  -->  00:07:09,150
with the query, right?
150

150

00:07:09,150  -->  00:07:12,150
So similar to what we did here but now this time around,
151

151

00:07:12,150  -->  00:07:13,990
we are actually going to store it here
152

152

00:07:13,990  -->  00:07:15,670
into our global state object.
153

153

00:07:15,670  -->  00:07:17,300
So this one that we just talked about
154

154

00:07:17,300  -->  00:07:19,630
in the beginning of the video, right?
155

155

00:07:19,630  -->  00:07:21,130
So let's get rid of this here.
156

156

00:07:24,770  -->  00:07:27,420
And next, what should we do next?
157

157

00:07:27,420  -->  00:07:29,820
Well, we can now prepare the user interface
158

158

00:07:29,820  -->  00:07:32,090
for what's going to happen, okay?
159

159

00:07:32,090  -->  00:07:37,070
So like clearing previous results or show a loading spinner,
160

160

00:07:37,070  -->  00:07:39,330
and so that's what we're going to do here as a next.
161

161

00:07:39,330  -->  00:07:41,610
And again, I'm leaving that for the next lecture but
162

162

00:07:41,610  -->  00:07:44,460
that's one of the steps so I'm putting it here right now.
163

163

00:07:50,450  -->  00:07:55,450
Next up, let's actually do the search so search for recipes.
164

164

00:07:56,730  -->  00:07:59,823
And so that's where this method here comes in.
165

165

00:08:01,930  -->  00:08:04,010
So on our state
166

166

00:08:05,787  -->  00:08:06,960
.search object,
167

167

00:08:06,960  -->  00:08:10,550
we now can perform the getResults methods, right?
168

168

00:08:10,550  -->  00:08:14,810
So again state.search is where this all list
169

169

00:08:14,810  -->  00:08:18,230
so this new instance based on the search class.
170

170

00:08:18,230  -->  00:08:19,780
And on that, we of course have
171

171

00:08:19,780  -->  00:08:21,540
to getResults methods available,
172

172

00:08:21,540  -->  00:08:23,790
so that we can then later display these results
173

173

00:08:23,790  -->  00:08:24,973
in the user interface.
174

174

00:08:29,480  -->  00:08:31,130
And actually that's exactly the next step,
175

175

00:08:31,130  -->  00:08:31,963
so render
176

176

00:08:34,390  -->  00:08:35,823
results on UI.
177

177

00:08:38,129  -->  00:08:40,740
Okay, now of course we only wan this here to happen
178

178

00:08:40,740  -->  00:08:43,350
so we want the rendering of the results only to happen
179

179

00:08:43,350  -->  00:08:47,080
after we actually receive the results from the API, alright?
180

180

00:08:47,080  -->  00:08:48,810
And so what we do have to do here is
181

181

00:08:48,810  -->  00:08:53,360
to actually await this promise, right?
182

182

00:08:53,360  -->  00:08:54,930
So simply use await here.
183

183

00:08:54,930  -->  00:08:57,903
Now we need to say that it is an async function,
184

184

00:08:59,430  -->  00:09:01,540
and we do that right here, right?
185

185

00:09:01,540  -->  00:09:03,690
Because this here is where we define the function.
186

186

00:09:03,690  -->  00:09:05,620
And so we say async function
187

187

00:09:05,620  -->  00:09:07,590
so that we can enuse await in here.
188

188

00:09:07,590  -->  00:09:09,150
Okay, Make sense?
189

189

00:09:09,150  -->  00:09:12,940
So again, this here returns a promise, right?
190

190

00:09:12,940  -->  00:09:14,610
And why is that?
191

191

00:09:14,610  -->  00:09:16,633
Well let's open up the map out here.
192

192

00:09:17,810  -->  00:09:19,860
So this is an async method.
193

193

00:09:19,860  -->  00:09:21,800
And remember that every asynchronous function,
194

194

00:09:21,800  -->  00:09:25,110
it automatically returns a promise, okay?
195

195

00:09:25,110  -->  00:09:27,430
And so here, we then have to await.
196

196

00:09:27,430  -->  00:09:29,140
So until the promise results,
197

197

00:09:29,140  -->  00:09:32,690
n comes back with our data, okay?
198

198

00:09:32,690  -->  00:09:35,450
Now we're not really going to render results on the UI,
199

199

00:09:35,450  -->  00:09:36,790
but what we can do here is then
200

200

00:09:36,790  -->  00:09:38,943
to lock these results to the console.
201

201

00:09:40,070  -->  00:09:45,070
So console.log and where are these results actually stored.
202

202

00:09:45,800  -->  00:09:49,823
So they are in state.search.recipes, right?
203

203

00:09:51,660  -->  00:09:52,850
Or is it result?
204

204

00:09:52,850  -->  00:09:54,170
I'm not really sure.
205

205

00:09:54,170  -->  00:09:56,520
Oh yeah, it is result, you see.
206

206

00:09:56,520  -->  00:09:59,360
So it stores it into this .result,
207

207

00:09:59,360  -->  00:10:02,733
and so here is then state.search.result.
208

208

00:10:03,940  -->  00:10:06,040
And let's actually get rid of the console.log,
209

209

00:10:06,040  -->  00:10:07,933
oh we already did that so the only console.log
210

210

00:10:07,933  -->  00:10:11,690
that we have is going to be this one here, okay?
211

211

00:10:11,690  -->  00:10:15,480
And so what this means is that the getResults method runs
212

212

00:10:15,480  -->  00:10:17,550
and we wait for it to finish basically.
213

213

00:10:17,550  -->  00:10:21,330
And only after that is done we can then log to the console,
214

214

00:10:21,330  -->  00:10:23,540
the result here, okay?
215

215

00:10:23,540  -->  00:10:25,820
And so with this, we can test if this async await
216

216

00:10:25,820  -->  00:10:27,810
here is actually working as intended.
217

217

00:10:27,810  -->  00:10:29,930
So let's test it out.
218

218

00:10:29,930  -->  00:10:32,050
And we don't actually have to input anything here
219

219

00:10:32,050  -->  00:10:34,540
because again it's not really being read right now.
220

220

00:10:34,540  -->  00:10:37,330
Right now we're just using the input pizza here
221

221

00:10:37,330  -->  00:10:40,160
as a temporary query, right?
222

222

00:10:40,160  -->  00:10:43,323
So let's just hit search here and let's wait for it.
223

223

00:10:45,010  -->  00:10:48,743
And indeed, it did cam back with our data here.
224

224

00:10:49,650  -->  00:10:52,250
And it's all on pizza, right?
225

225

00:10:52,250  -->  00:10:56,580
And you can see that this console.log from index.js line 27
226

226

00:10:56,580  -->  00:10:59,800
which is exactly, well it's not this one here
227

227

00:10:59,800  -->  00:11:02,370
but I guess the line numbers must correct
228

228

00:11:02,370  -->  00:11:05,040
because of all the web pipe blending
229

229

00:11:05,040  -->  00:11:06,690
that stone behind the scenes
230

230

00:11:06,690  -->  00:11:09,520
but it's pretty much the same 25, okay?
231

231

00:11:09,520  -->  00:11:12,640
So that is really all there is to control right now.
232

232

00:11:12,640  -->  00:11:16,130
So all we have to do now is to actually implement or view
233

233

00:11:16,130  -->  00:11:19,520
so that we can get first the query from their view
234

234

00:11:19,520  -->  00:11:21,290
that we can then prepare the user interface
235

235

00:11:21,290  -->  00:11:24,280
for the results like having that spinner.
236

236

00:11:24,280  -->  00:11:25,780
Clearing the input maybe.
237

237

00:11:25,780  -->  00:11:28,450
And then finally we want to also render these results
238

238

00:11:28,450  -->  00:11:29,660
on the user interface of course
239

239

00:11:29,660  -->  00:11:31,760
instead of just logging it to the console, right?
240

240

00:11:31,760  -->  00:11:32,643
So if you're ready to do that,
241

241

00:11:32,643  -->  00:11:34,993
then just come with me right to the next video.
