WEBVTT
1

00:00:00.960  -->  00:00:07.290
Last time we looked at the zip code nonconforming era where the zip code was longer than supposed to

2

00:00:07.290  -->  00:00:10.040
be and we fished out another two rows.

3

00:00:10.230  -->  00:00:17.280
And today we're faced different era which is telling us that there is a problem converting date and

4

00:00:17.280  -->  00:00:20.550
or time from a character string.

5

00:00:20.850  -->  00:00:26.730
And I feel that you already know this is going and what function we're going to use you can guess the

6

00:00:26.730  -->  00:00:28.830
name of the function.

7

00:00:29.460  -->  00:00:35.550
And you'll see in the second so we only have one date in our data it's the birthday and obviously the

8

00:00:35.550  -->  00:00:37.230
issues in that column.

9

00:00:37.260  -->  00:00:42.180
So how about we try and figure out which column exactly that is in.

10

00:00:42.350  -->  00:00:51.480
And as we agreed we're going to keep building on these queries because that way we can know exactly

11

00:00:51.480  -->  00:00:58.260
how many rows are affected specifically just by that filter after these filters are applied.

12

00:00:58.290  -->  00:01:01.910
So we will not double count our affected rows.

13

00:01:02.160  -->  00:01:06.740
So here what we need to do we want select from where is the metric.

14

00:01:06.750  -->  00:01:07.970
So we need to exactly this.

15

00:01:07.970  -->  00:01:14.110
We need to copy these these conditions.

16

00:01:14.280  -->  00:01:19.060
So I'll just copy this one here and then I'll explain again.

17

00:01:19.080  -->  00:01:19.800
So and then.

18

00:01:19.800  -->  00:01:28.080
And so let me let's just get this clear just in case there's some some confusion here.

19

00:01:28.200  -->  00:01:37.380
So Salek star from this table where is Gnumeric balance is not equal to 1 when you run this it returns

20

00:01:37.380  -->  00:01:39.660
you the bad rows.

21

00:01:39.660  -->  00:01:47.850
The rows that are not what you want then when you go back into your actual script you want the opposite

22

00:01:47.850  -->  00:01:52.560
you want the good rows so you change not equal to equal.

23

00:01:52.560  -->  00:01:56.030
And then we say 10 rows here we should say excluded.

24

00:01:56.400  -->  00:01:58.460
OK so that means we won.

25

00:01:58.490  -->  00:02:01.820
Do you want the good ones then here when we move on to the next era.

26

00:02:02.040  -->  00:02:09.720
We're saying select from table where is the metric is equal to one meaning we only want to Goodrich's

27

00:02:09.750  -->  00:02:10.990
just like here.

28

00:02:11.220  -->  00:02:16.950
And then after that we want to see out of the remaining good rows the ones that we selected here.

29

00:02:17.460  -->  00:02:20.560
How many are bad rows in terms of zipcode.

30

00:02:20.700  -->  00:02:24.170
So we're zipcode the length of the card is greater than 7.

31

00:02:24.570  -->  00:02:27.160
And once we do that we get two rows.

32

00:02:27.250  -->  00:02:29.090
We write two rows over here.

33

00:02:29.190  -->  00:02:35.520
But in the actual filter in the proc we do the opposite because we don't want the bedrolls we want the

34

00:02:35.520  -->  00:02:36.350
good rows.

35

00:02:36.410  -->  00:02:44.460
So instead sort of greater we do less than or equal to 7 and then that way we've taken the good roles

36

00:02:44.460  -->  00:02:50.570
in terms of balance a good roles in terms of zipcode and now we're moving on to the date the birth date

37

00:02:50.570  -->  00:02:50.650
.

38

00:02:50.640  -->  00:02:58.290
So here select star from fake names where isn't Mary balances equal to one meaning it's a good call

39

00:02:58.290  -->  00:02:58.310
.

40

00:02:58.330  -->  00:03:04.380
Roe in terms of balance and length of zip code is less or equal to seven it's a good Roe in terms of

41

00:03:04.380  -->  00:03:04.860
zipcode.

42

00:03:04.860  -->  00:03:06.650
So only keep leaving the zip code.

43

00:03:06.660  -->  00:03:14.070
The good rose just like we did here and now we go going to check for the bad rolls in terms of birthday

44

00:03:14.070  -->  00:03:14.600
.

45

00:03:14.640  -->  00:03:16.260
So here's a birthday.

46

00:03:17.130  -->  00:03:23.820
And we want to apply a function that will allow us to find out whether it is in the right format or

47

00:03:23.820  -->  00:03:24.130
not.

48

00:03:24.150  -->  00:03:29.430
And lucky in ask you all to see how easy these things are in Asgill It's just amazing.

49

00:03:29.590  -->  00:03:35.260
In Ezekiel there's a function for that which is called is birthday.

50

00:03:35.310  -->  00:03:41.340
No it's called is date is date and works the same way it is numeric.

51

00:03:41.340  -->  00:03:46.610
So we want to check when it is not a date so not equal to 1.

52

00:03:46.980  -->  00:03:55.110
And let's run that execute and then we go we have one person whose birthday is actually just a letter

53

00:03:55.120  -->  00:03:55.140
.

54

00:03:55.170  -->  00:03:59.980
And and obviously that is not a correct date.

55

00:04:00.000  -->  00:04:09.060
So what we want to do is we want to exclude this record from our insert and actually by the way see

56

00:04:09.090  -->  00:04:14.220
you can see here that there is one after we've applied the rest of the filter's Let's have a look and

57

00:04:14.220  -->  00:04:19.140
see what would have happened if we applied the filters we didn't apply the rest of filters so let's

58

00:04:19.140  -->  00:04:24.550
say select star from here where it's not a birth right.

59

00:04:24.570  -->  00:04:32.010
So out of all the records good and bad where it's not a proper date execute still one.

60

00:04:32.010  -->  00:04:32.710
OK good.

61

00:04:32.760  -->  00:04:34.760
So no overlap there.

62

00:04:34.830  -->  00:04:36.090
Just checking.

63

00:04:36.090  -->  00:04:37.160
Just for fun.

64

00:04:37.290  -->  00:04:47.870
So here we're going to say and we're going to copy this filter is date.

65

00:04:48.370  -->  00:04:54.750
We're going to say equal to one because we want the good rose and now we know that is one row was affected

66

00:04:54.750  -->  00:04:55.800
.

67

00:04:55.800  -->  00:04:56.350
All right.

68

00:04:56.380  -->  00:05:03.400
And now we can run this whole thing with kids.

69

00:05:04.460  -->  00:05:05.330
Oh OK.

70

00:05:05.340  -->  00:05:06.050
Wow.

71

00:05:06.210  -->  00:05:08.970
We've imported our Rose.

72

00:05:08.970  -->  00:05:09.450
Great.

73

00:05:09.450  -->  00:05:19.650
So copy there their number of rows here and there we go so now we have done the import the data is in

74

00:05:19.650  -->  00:05:20.320
the table.

75

00:05:20.370  -->  00:05:22.850
You can have a look at it.

76

00:05:22.860  -->  00:05:25.570
It's here.

77

00:05:25.590  -->  00:05:28.710
There it is.

78

00:05:28.860  -->  00:05:33.210
And also we know exactly how many rows were excluded 13 rows and you have to check.

79

00:05:33.210  -->  00:05:40.980
This is your main quality assurance check this important you have to add up 10 plus to 12 plus 113 plus

80

00:05:40.980  -->  00:05:46.950
one hundred ninety nine thousand nine hundred eighty seven is 200000 and you can even put a note here

81

00:05:46.950  -->  00:05:47.720
.

82

00:05:47.760  -->  00:05:49.280
I do this as well.

83

00:05:49.320  -->  00:05:59.240
So this plus 10 plus two plus one equals.

84

00:05:59.280  -->  00:06:01.780
And then what you do is here you add.

85

00:06:01.940  -->  00:06:05.510
You take this you copy it.

86

00:06:06.300  -->  00:06:12.780
Actually I like to put at the top and you say count.

87

00:06:14.400  -->  00:06:16.020
Right.

88

00:06:16.110  -->  00:06:19.630
So that's your 200000 equals 200000.

89

00:06:19.630  -->  00:06:29.010
And so you just say verified which is good which means it adds up and you haven't lost anything on the

90

00:06:29.010  -->  00:06:34.680
way you know you have a double cut of anything if filters or whatever that is as important check for

91

00:06:34.680  -->  00:06:36.490
keyway and also keeps you alert.

92

00:06:36.720  -->  00:06:42.560
Make sure that you remember what you're doing and you don't basically lose track of things.

93

00:06:42.570  -->  00:06:45.300
So we've done that.

94

00:06:45.330  -->  00:06:48.530
The other thing that we normally do is either check.

95

00:06:48.540  -->  00:06:52.810
We've already talked about this select count from your work table.

96

00:06:53.820  -->  00:06:59.820
So just make sure that you haven't by accident double inserted You know you if you want to insert again

97

00:07:00.240  -->  00:07:01.600
and you highlight everything.

98

00:07:01.710  -->  00:07:08.100
And if we get the truncated bit it will end up of duplicate records just to make sure that this number

99

00:07:08.910  -->  00:07:11.480
is the same as this number we're here.

100

00:07:11.490  -->  00:07:16.530
All right so that was us fixing up these errors.

101

00:07:16.620  -->  00:07:24.330
This as you can see we learned how to deal with numeric errors than nonconforming formats and data errors

102

00:07:24.340  -->  00:07:24.530
.

103

00:07:24.870  -->  00:07:31.500
And further in this section I will show you a few more additional quality assurance checks that will

104

00:07:31.500  -->  00:07:35.630
be very handy to pick out some more anomalies that might be present or not.

105

00:07:36.090  -->  00:07:39.030
And until next time happy analyzing
