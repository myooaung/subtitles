0
1
00:00:00,780 --> 00:00:07,860
Now, in the last lesson, we saw how we were able to get hold of documents by calling this getDocuments
1

2
00:00:07,860 --> 00:00:14,970
method which has a closure, which will get triggered once we've actually managed to get hold of all the
2

3
00:00:14,970 --> 00:00:19,500
documents from a particular collection from the Firebase database.
3

4
00:00:20,160 --> 00:00:24,090
But at the moment though, this getDocuments is very manual.
4

5
00:00:24,120 --> 00:00:26,070
You have to call it every single time
5

6
00:00:26,220 --> 00:00:32,300
if you want to get a hold of the latest documents that have been added to the collection. If we take a
6

7
00:00:32,300 --> 00:00:39,470
look back at the Firebase Guides and we take a look at Cloud Firestore, you can see that under the Read
7

8
00:00:39,530 --> 00:00:44,900
data section, there's something called "Listen for realtime updates."
8

9
00:00:44,900 --> 00:00:52,100
And what this allows us to do is to add a SnapshotListener, so that whenever new documents are added
9

10
00:00:52,100 --> 00:00:56,940
to a particular collection, we get our code to be triggered again.
10

11
00:00:56,960 --> 00:01:02,680
So if you wanted to get data just once, then you would use the getDocument method.
11

12
00:01:02,750 --> 00:01:09,680
But as we have a messaging app, it would be great if every time a new message gets added to our database,
12

13
00:01:09,980 --> 00:01:18,290
then we simply just trigger this block all over again, so that we can add the messages to our messages array.
13

14
00:01:18,470 --> 00:01:23,270
To do this, instead of calling get documents,
14

15
00:01:23,270 --> 00:01:26,960
We're going to change it to addSnapshotListener.
15

16
00:01:27,950 --> 00:01:35,870
So we're going to write addSnapshotListener. And the rest of the code,
16

17
00:01:35,890 --> 00:01:38,710
we're going to keep exactly the same.
17

18
00:01:38,710 --> 00:01:51,920
So, now if we run our app again and we log in, and I write a new message and hit send, then you'll see
18

19
00:01:51,920 --> 00:01:57,920
that it reloads our table view and adds that new message into our table view.
19

20
00:01:58,370 --> 00:02:05,330
But it does a little bit more than that. It actually doesn't clear out the previous items inside the
20

21
00:02:05,330 --> 00:02:06,530
messages array.
21

22
00:02:07,250 --> 00:02:10,030
So how can we fix this behavior?
22

23
00:02:10,160 --> 00:02:12,950
And I want to pose this as a challenge to you.
23

24
00:02:12,950 --> 00:02:18,830
Can you modify the code inside the loadMessages function, so that when a newMessage is added, there
24

25
00:02:18,830 --> 00:02:22,960
are no duplicate messages being displayed inside the table view.
25

26
00:02:23,030 --> 00:02:28,790
I'll give you a few seconds to pause the video before I show you the solution.
26

27
00:02:28,900 --> 00:02:29,440
Ready?
27

28
00:02:29,440 --> 00:02:30,800
Here's the solution.
28

29
00:02:30,850 --> 00:02:38,170
We know that the addSnapshotListener is going to listen for changes in this collection. Whenever a new
29

30
00:02:38,170 --> 00:02:40,120
item is added,
30

31
00:02:40,120 --> 00:02:44,020
it's gonna trigger all of the code inside this closure.
31

32
00:02:44,020 --> 00:02:50,950
So instead of having our messages array being emptied right at the top, we're going to empty it inside
32

33
00:02:51,040 --> 00:02:53,460
our closure like this.
33

34
00:02:53,470 --> 00:03:01,210
So this way, whenever a new item is added to our collection, we empty out our messages array, and add the
34

35
00:03:01,210 --> 00:03:04,590
fresh messages into it from scratch.
35

36
00:03:04,690 --> 00:03:11,350
And, of course, in order to tap into our messages property inside the closure, we have to insert the "self"
36

37
00:03:11,350 --> 00:03:13,920
keyword and a dot in front.
37

38
00:03:13,930 --> 00:03:22,790
Now, let's run our app and see what happens. Let's go ahead and add a new message which I'll just put
38

39
00:03:22,790 --> 00:03:24,590
as "123456,"
39

40
00:03:24,590 --> 00:03:33,260
tell the world my password, and hit send. And you can see that it now gets added in without having all
40

41
00:03:33,260 --> 00:03:37,370
of the previous messages being added alongside.
41

42
00:03:37,370 --> 00:03:39,450
And that's the solution to the challenge.
42

43
00:03:39,590 --> 00:03:46,580
Adding a new message now no longer results in duplicates being added to our table view. But you'll notice
43

44
00:03:46,580 --> 00:03:49,310
that the order is a bit weird, right?
44

45
00:03:49,310 --> 00:03:54,860
Why did it go in in the middle instead of what we would expect which is at the very bottom?
45

46
00:03:55,910 --> 00:04:02,870
Well, the reason is because if we take a look at our database, you can see we've got all of these messages
46

47
00:04:02,870 --> 00:04:12,770
in here, and you can see that they're ordered in this collection by their IDs. But the IDs are generated
47

48
00:04:13,040 --> 00:04:16,010
pretty much automatically by Firebase.
48

49
00:04:16,130 --> 00:04:23,360
So we have really no control over this ID. But it's through the use of these IDs that our messages
49

50
00:04:23,450 --> 00:04:25,760
are getting sorted in our database.
50

51
00:04:26,060 --> 00:04:27,870
So, for example, signing with numbers.
51

52
00:04:27,890 --> 00:04:29,590
So, 2 is less than 8.
52

53
00:04:29,600 --> 00:04:32,880
And then we go to the alphabet, and "b" is before "n."
53

54
00:04:32,900 --> 00:04:41,960
What we would like, though, is for this to be ordered in terms of the timestamp that it was sent.
54

55
00:04:41,960 --> 00:04:44,380
So how can we do that?
55

56
00:04:44,390 --> 00:04:48,950
I'll give you a moment to have a think about it, and I'll see you on the next lesson where we'll walk
56

57
00:04:48,950 --> 00:04:49,730
through it together.
