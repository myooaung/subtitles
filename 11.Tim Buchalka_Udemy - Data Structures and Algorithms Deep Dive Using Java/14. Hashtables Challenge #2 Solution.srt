1
1

00:00:00,215  -->  00:00:02,534
(upbeat electronic music)
2

2

00:00:02,534  -->  00:00:05,410
(keys clicking)
3

3

00:00:05,410  -->  00:00:07,450
<v Instructor>Alright, so, let's get cracking</v>
4

4

00:00:07,450  -->  00:00:08,820
on this solution.
5

5

00:00:08,820  -->  00:00:11,200
Here's the code that populates the link list,
6

6

00:00:11,200  -->  00:00:12,770
and we have a couple of duplicates,
7

7

00:00:12,770  -->  00:00:14,510
Jane Jones has been added twice
8

8

00:00:14,510  -->  00:00:17,490
and John Doe has been added twice.
9

9

00:00:17,490  -->  00:00:19,193
So, if we run right now.
10

10

00:00:21,870  -->  00:00:25,220
We'll see that we have Jane Jones twice
11

11

00:00:25,220  -->  00:00:26,940
and John Doe twice.
12

12

00:00:26,940  -->  00:00:30,200
And so, we want to remove those two instances.
13

13

00:00:30,200  -->  00:00:32,140
And so, the approach that I'm going to take
14

14

00:00:32,140  -->  00:00:34,320
because I said that we had to use a hash map
15

15

00:00:34,320  -->  00:00:37,040
is I'm going to traverse the list,
16

16

00:00:37,040  -->  00:00:40,850
and for each employee I'm going to
17

17

00:00:40,850  -->  00:00:43,620
check to see whether it's in a hash map
18

18

00:00:43,620  -->  00:00:46,330
that consists of key value pairs.
19

19

00:00:46,330  -->  00:00:49,550
The key is the ID, and the value is the employee,
20

20

00:00:49,550  -->  00:00:51,530
and so I'm gonna check whether the employee
21

21

00:00:51,530  -->  00:00:53,863
is in the hash map, and I'm going to do that
22

22

00:00:53,863  -->  00:00:56,390
by checking whether it contains the key.
23

23

00:00:56,390  -->  00:00:59,130
Because, remember in the last video,
24

24

00:00:59,130  -->  00:01:02,250
I said that we can assume that if two employees
25

25

00:01:02,250  -->  00:01:04,400
have the same key, they're the same employee.
26

26

00:01:04,400  -->  00:01:06,107
There's no need to actually compare
27

27

00:01:06,107  -->  00:01:07,980
the instances against each other
28

28

00:01:07,980  -->  00:01:10,570
and look at all three fields for equality.
29

29

00:01:10,570  -->  00:01:13,680
And so, all I have to do is check whether the key
30

30

00:01:13,680  -->  00:01:16,143
is in the hash map, and if it is,
31

31

00:01:16,143  -->  00:01:18,310
then I can assume that the employee
32

32

00:01:18,310  -->  00:01:21,150
has been added already, and that means it's a duplicate.
33

33

00:01:21,150  -->  00:01:23,290
And so, I'm gonna want to remove it.
34

34

00:01:23,290  -->  00:01:25,653
And so, let's start writing the code for that.
35

35

00:01:26,650  -->  00:01:27,730
And so, the first thing I'll do
36

36

00:01:27,730  -->  00:01:28,830
is create the hash maps.
37

37

00:01:28,830  -->  00:01:32,480
So, I'll say HashMap, and I want a hash map of integers
38

38

00:01:32,480  -->  00:01:34,640
and employees.
39

39

00:01:34,640  -->  00:01:38,913
And I'll just call it employeeTable equals new HashMap.
40

40

00:01:43,530  -->  00:01:46,410
And then I'm going to need to traverse the list.
41

41

00:01:46,410  -->  00:01:48,470
And I'm gonna use a list iterator to do that.
42

42

00:01:48,470  -->  00:01:49,680
So, I'm gonna create that now.
43

43

00:01:49,680  -->  00:01:54,140
So, I'll say ListIterator Employee Iterator
44

44

00:01:56,067  -->  00:02:01,067
equals employees.listIterator,
45

45

00:02:02,720  -->  00:02:04,890
and then finally, I need another list.
46

46

00:02:04,890  -->  00:02:06,990
And the reason I need another list is
47

47

00:02:06,990  -->  00:02:10,440
as I'm using the list iterator to traverse the list,
48

48

00:02:10,440  -->  00:02:13,730
I can't remove a duplicate when I find one
49

49

00:02:13,730  -->  00:02:17,550
because the runtime will throw an exception.
50

50

00:02:17,550  -->  00:02:20,010
Because, as I'm using the iterator
51

51

00:02:20,010  -->  00:02:21,920
to traverse the list.
52

52

00:02:21,920  -->  00:02:24,270
The list cannot change otherwise
53

53

00:02:24,270  -->  00:02:26,740
the iterator will throw an exception and say,
54

54

00:02:26,740  -->  00:02:28,720
hey I'm iterating over this list
55

55

00:02:28,720  -->  00:02:30,510
and now you've gone ahead and changed it.
56

56

00:02:30,510  -->  00:02:31,900
Thanks you just screwed me up
57

57

00:02:31,900  -->  00:02:33,430
so I'm gonna throw an exception.
58

58

00:02:33,430  -->  00:02:36,260
And so, if I hit a duplicate instead
59

59

00:02:36,260  -->  00:02:38,180
of removing it right there and then,
60

60

00:02:38,180  -->  00:02:40,550
I'm just gonna add it to a list,
61

61

00:02:40,550  -->  00:02:43,850
and then once I've finished traversing the list,
62

62

00:02:43,850  -->  00:02:46,510
the link list, I'll traverse the list of
63

63

00:02:46,510  -->  00:02:48,832
employees I wanna remove and actually remove
64

64

00:02:48,832  -->  00:02:50,740
them from the list.
65

65

00:02:50,740  -->  00:02:55,300
And so, I'm gonna say List Employee and I'll just bring
66

66

00:02:55,300  -->  00:02:57,610
in the Java dot util import here.
67

67

00:02:57,610  -->  00:03:02,610
And I'm gonna call this Remove equals new ArrayList.
68

68

00:03:06,830  -->  00:03:09,100
And so, now that I have all my fields I need,
69

69

00:03:09,100  -->  00:03:12,900
I'll say while iterator.hasNext.
70

70

00:03:14,510  -->  00:03:18,713
I'm gonna get the employee from the iterator equals.
71

71

00:03:22,080  -->  00:03:24,090
And then I'm gonna check to see whether
72

72

00:03:24,090  -->  00:03:28,520
the ID for this employee is already in the hash table.
73

73

00:03:28,520  -->  00:03:31,967
So, I'm gonna say if employeeTable.containsKey
74

74

00:03:35,037  -->  00:03:36,287
employee.getId.
75

75

00:03:38,750  -->  00:03:40,210
If that's the case then I know
76

76

00:03:40,210  -->  00:03:42,010
this employee is a duplicate.
77

77

00:03:42,010  -->  00:03:45,579
Because, I've already seen an employee with this key,
78

78

00:03:45,579  -->  00:03:48,080
and I've added it to the hash table.
79

79

00:03:48,080  -->  00:03:49,630
As we were iterating over the list,
80

80

00:03:49,630  -->  00:03:53,020
an earlier entry in the list has this ID.
81

81

00:03:53,020  -->  00:03:54,950
And at that point I added it to the table.
82

82

00:03:54,950  -->  00:03:58,240
So, this is the second time I'm seeing this ID
83

83

00:03:58,240  -->  00:04:00,400
because it's already in the table.
84

84

00:04:00,400  -->  00:04:03,120
And so, what I wanna do here is add this employee
85

85

00:04:03,120  -->  00:04:04,740
to my remove collection.
86

86

00:04:04,740  -->  00:04:08,530
So, I'm gonna say remove.add employee.
87

87

00:04:08,530  -->  00:04:12,130
Otherwise I wanna add this employee to the hash map.
88

88

00:04:12,130  -->  00:04:16,050
So, else I'm going to say employeeTable.put
89

89

00:04:17,630  -->  00:04:18,580
and I need the key.
90

90

00:04:18,580  -->  00:04:22,420
So, that will be employee.getId and then the instance
91

91

00:04:22,420  -->  00:04:25,360
that I wanna associate with that key in the table.
92

92

00:04:25,360  -->  00:04:27,730
And so, that's it for figuring out
93

93

00:04:27,730  -->  00:04:29,440
whether an employee's a duplicate or not.
94

94

00:04:29,440  -->  00:04:31,450
And the final step of course is to actually
95

95

00:04:31,450  -->  00:04:33,100
remove the duplicates from the list.
96

96

00:04:33,100  -->  00:04:35,300
So, the final thing I'm gonna do
97

97

00:04:35,300  -->  00:04:38,060
is iterate over my remove collection
98

98

00:04:38,060  -->  00:04:40,310
and actually remove them from the list.
99

99

00:04:40,310  -->  00:04:43,930
So, I'm gonna say for Employee,
100

100

00:04:43,930  -->  00:04:45,480
I'll just move this up a bit.
101

101

00:04:45,480  -->  00:04:49,530
Employee in my remove collection
102

102

00:04:49,530  -->  00:04:54,530
I'm going to say employees.remove Employee.
103

103

00:04:56,630  -->  00:04:58,210
And this is the code that's actually
104

104

00:04:58,210  -->  00:04:59,480
removing them from the list.
105

105

00:04:59,480  -->  00:05:02,640
Now, I can't do that here because if I do,
106

106

00:05:02,640  -->  00:05:04,530
the iterator will throw an exception.
107

107

00:05:04,530  -->  00:05:05,810
And then for our final step,
108

108

00:05:05,810  -->  00:05:07,410
let's just print out our list again
109

109

00:05:07,410  -->  00:05:09,390
after we removed the employee.
110

110

00:05:09,390  -->  00:05:12,660
So, I'll say System.out.printline.
111

111

00:05:12,660  -->  00:05:14,900
And I'm gonna just print out this
112

112

00:05:14,900  -->  00:05:18,400
so that we can distinguish this list
113

113

00:05:18,400  -->  00:05:20,980
when we printed out up here from that.
114

114

00:05:20,980  -->  00:05:22,763
And then I'm just gonna copy this.
115

115

00:05:25,050  -->  00:05:26,453
And move it down here.
116

116

00:05:29,010  -->  00:05:30,300
Okay, so that should do it.
117

117

00:05:30,300  -->  00:05:31,343
So, let's run.
118

118

00:05:33,550  -->  00:05:35,260
Alright let me lift this up.
119

119

00:05:35,260  -->  00:05:37,640
So, before I delete duplicates
120

120

00:05:37,640  -->  00:05:41,710
we've got one, two, three, four, five, six, seven items
121

121

00:05:41,710  -->  00:05:43,160
and two of them are duplicates.
122

122

00:05:43,160  -->  00:05:45,910
And afterwards, we have five items
123

123

00:05:45,910  -->  00:05:49,502
and we can see that Mike, Mary, John, Bill, and Jane
124

124

00:05:49,502  -->  00:05:50,940
are on the list.
125

125

00:05:50,940  -->  00:05:53,280
And these two guys are gone.
126

126

00:05:53,280  -->  00:05:56,210
And so, we've removed duplicates from the list.
127

127

00:05:56,210  -->  00:05:58,380
Let me just pull this down.
128

128

00:05:58,380  -->  00:05:59,840
So, I'm gonna show you what happens
129

129

00:05:59,840  -->  00:06:04,590
if we actually try to remove the items here
130

130

00:06:04,590  -->  00:06:06,490
rather than adding them to a collection.
131

131

00:06:06,490  -->  00:06:11,340
So, I'll say employees.remove employee.
132

132

00:06:11,340  -->  00:06:12,563
And if we run now,
133

133

00:06:13,700  -->  00:06:15,580
you're gonna see that we get a
134

134

00:06:15,580  -->  00:06:17,880
concurrent modification exception.
135

135

00:06:17,880  -->  00:06:20,020
And we're getting that because
136

136

00:06:20,020  -->  00:06:22,880
when we're iterating over the list using an iterator,
137

137

00:06:22,880  -->  00:06:25,230
we're not allowed to change the underlying list
138

138

00:06:25,230  -->  00:06:27,590
until we're finished with the iterator.
139

139

00:06:27,590  -->  00:06:29,170
And so, I'll just put that back
140

140

00:06:29,170  -->  00:06:30,003
the way it is.
141

141

00:06:30,003  -->  00:06:33,050
Just wanted to explain why I'm doing this step.
142

142

00:06:33,050  -->  00:06:35,190
Now, your solution doesn't have to match mine.
143

143

00:06:35,190  -->  00:06:37,250
You might be traversing the list
144

144

00:06:37,250  -->  00:06:40,190
using a different method and so you can just go ahead
145

145

00:06:40,190  -->  00:06:43,190
and remove the employees on the spot.
146

146

00:06:43,190  -->  00:06:45,770
You might have a little optimization here
147

147

00:06:45,770  -->  00:06:49,360
that instead of adding the employees to the list,
148

148

00:06:49,360  -->  00:06:51,480
you may be tracking their position in the list.
149

149

00:06:51,480  -->  00:06:53,200
Remember we talked about that,
150

150

00:06:53,200  -->  00:06:55,960
that if you provide the index that you wanna delete
151

151

00:06:55,960  -->  00:06:59,270
so, remove, down here remove and give an index
152

152

00:06:59,270  -->  00:07:00,340
rather than an object.
153

153

00:07:00,340  -->  00:07:01,760
It would be a little bit faster.
154

154

00:07:01,760  -->  00:07:03,630
You'd still have to traverse the list
155

155

00:07:03,630  -->  00:07:06,640
to that position but then you wouldn't have
156

156

00:07:06,640  -->  00:07:09,530
to do any comparisons because you provided the index.
157

157

00:07:09,530  -->  00:07:13,090
So, just a very small improvement there.
158

158

00:07:13,090  -->  00:07:15,180
You may have found a completely different way to do it.
159

159

00:07:15,180  -->  00:07:16,924
As long as you're using a hash map,
160

160

00:07:16,924  -->  00:07:20,420
and as long as when you print out your list
161

161

00:07:20,420  -->  00:07:22,330
after the deletions, it looks good
162

162

00:07:22,330  -->  00:07:24,200
and the duplicates have been removed,
163

163

00:07:24,200  -->  00:07:25,690
your solution is good.
164

164

00:07:25,690  -->  00:07:27,560
Now, we used a hash map here.
165

165

00:07:27,560  -->  00:07:29,330
We don't really have to.
166

166

00:07:29,330  -->  00:07:32,010
We could use something called a hash set,
167

167

00:07:32,010  -->  00:07:33,840
but we haven't looked at sets yet.
168

168

00:07:33,840  -->  00:07:37,520
Here because we really just care about the ID's
169

169

00:07:37,520  -->  00:07:39,210
we could write a different solution
170

170

00:07:39,210  -->  00:07:40,740
using a hash set.
171

171

00:07:40,740  -->  00:07:42,550
We don't really need key value pairs
172

172

00:07:42,550  -->  00:07:44,450
but this is a hash table section,
173

173

00:07:44,450  -->  00:07:46,540
so I wanted you to use a hash map
174

174

00:07:46,540  -->  00:07:48,580
and as I said we haven't covered sets yet.
175

175

00:07:48,580  -->  00:07:51,210
So, that's it for hash tables.
176

176

00:07:51,210  -->  00:07:52,860
I'll see you in the next section.
