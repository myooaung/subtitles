1
1

00:00:05,320  -->  00:00:06,610
<v Sarah>Alright so now we're going to handle</v>
2

2

00:00:06,610  -->  00:00:08,790
the case of deleting 2 children
3

3

00:00:08,790  -->  00:00:10,670
and because we have a recursive method
4

4

00:00:10,670  -->  00:00:11,700
it's easy to do.
5

5

00:00:11,700  -->  00:00:14,130
It's actually longer to explain what we're doing
6

6

00:00:14,130  -->  00:00:15,970
than it is to implement it.
7

7

00:00:15,970  -->  00:00:18,740
So let's add case three.
8

8

00:00:18,740  -->  00:00:20,750
The left child is null, we've handled it here.
9

9

00:00:20,750  -->  00:00:23,020
If the right child is null, we've handled it here.
10

10

00:00:23,020  -->  00:00:24,970
If both of these conditions fail,
11

11

00:00:24,970  -->  00:00:27,700
that means that we have a node with two children
12

12

00:00:27,700  -->  00:00:30,510
and so down here we're gonna handle that case.
13

13

00:00:30,510  -->  00:00:35,510
So case three node to delete has two children
14

14

00:00:37,160  -->  00:00:40,760
and of course because we return in both of these blocks,
15

15

00:00:40,760  -->  00:00:42,250
we won't make it down here
16

16

00:00:42,250  -->  00:00:44,400
unless we haven't returned from the method yet.
17

17

00:00:44,400  -->  00:00:45,960
And so what do we want to do?
18

18

00:00:45,960  -->  00:00:47,880
We want to do what we discussed in the slides.
19

19

00:00:47,880  -->  00:00:52,880
So we want to find the minimum value in the right subtree
20

20

00:00:53,200  -->  00:00:55,700
and we can do that just by calling the min method,
21

21

00:00:55,700  -->  00:00:57,290
that's why I wanted the min method,
22

22

00:00:57,290  -->  00:00:58,510
to just return an int.
23

23

00:00:58,510  -->  00:01:01,130
Here's the min method down here.
24

24

00:01:01,130  -->  00:01:02,320
And so what we're going to do is
25

25

00:01:02,320  -->  00:01:04,900
we're going to say subtree route.
26

26

00:01:04,900  -->  00:01:06,947
Remember at this point subtree route
27

27

00:01:06,947  -->  00:01:09,150
is the route that we want to delete
28

28

00:01:09,150  -->  00:01:12,580
and so what we want to do is we want to replace the value
29

29

00:01:12,580  -->  00:01:15,810
in the subtree root node with the
30

30

00:01:15,810  -->  00:01:19,160
smallest value from the right subtree.
31

31

00:01:19,160  -->  00:01:20,980
Because if we replace it with
32

32

00:01:20,980  -->  00:01:23,160
the smallest value from the right subtree
33

33

00:01:23,160  -->  00:01:25,680
we know that everything remaining in the right subtree
34

34

00:01:25,680  -->  00:01:28,040
will be greater than the subtree root
35

35

00:01:28,040  -->  00:01:29,870
and so the characteristic of the
36

36

00:01:29,870  -->  00:01:32,060
binary search tree is preserved.
37

37

00:01:32,060  -->  00:01:35,190
And so we're not actually going to rewire any nodes,
38

38

00:01:35,190  -->  00:01:36,850
were not gonna physically take
39

39

00:01:36,850  -->  00:01:39,520
the replacement node and move it in the tree.
40

40

00:01:39,520  -->  00:01:42,490
Instead we're just going to set the data
41

41

00:01:42,490  -->  00:01:47,070
of the existing node to the value of the replacement node
42

42

00:01:47,070  -->  00:01:49,560
and then we're going to delete the replacement node.
43

43

00:01:49,560  -->  00:01:51,810
And so we're going to say subtreeRoot.setdata
44

44

00:01:53,940  -->  00:01:55,730
and we want to set it to the minimum
45

45

00:01:55,730  -->  00:01:57,580
value in the right subtree
46

46

00:01:57,580  -->  00:02:02,203
so we're going to say subtreeRoot.getRightChild.min.
47

47

00:02:04,050  -->  00:02:07,570
And so this finds us the minimum value in the right subtree
48

48

00:02:07,570  -->  00:02:10,170
and we're going to replace the value
49

49

00:02:10,170  -->  00:02:13,230
of the node were deleting with that value
50

50

00:02:13,230  -->  00:02:16,460
and then we have to delete the replacement node.
51

51

00:02:16,460  -->  00:02:17,770
So how are we going to do that?
52

52

00:02:17,770  -->  00:02:20,140
Well we're going to use our delete method.
53

53

00:02:20,140  -->  00:02:23,560
I mean we know the root of the subtree
54

54

00:02:23,560  -->  00:02:25,100
that we want to search for the value,
55

55

00:02:25,100  -->  00:02:26,400
we have it right here.
56

56

00:02:26,400  -->  00:02:29,740
It's actually the subtreeRoot.getRightChild
57

57

00:02:29,740  -->  00:02:32,040
and we know the value we want to delete.
58

58

00:02:32,040  -->  00:02:35,430
It's now the subtreeRoot.getData.
59

59

00:02:35,430  -->  00:02:39,637
And so all we have to do is say subtreeRoot.setRightChild
60

60

00:02:43,300  -->  00:02:46,230
and we're gonna call our delete method,
61

61

00:02:46,230  -->  00:02:47,580
that should be subtreeRoot,
62

62

00:02:50,590  -->  00:02:51,423
and we're gonna call
63

63

00:02:51,423  -->  00:02:55,180
our delete method and we're gonna pass it
64

64

00:02:55,180  -->  00:02:57,227
our subtreeRoot.getRightChild
65

65

00:02:59,920  -->  00:03:04,803
and the value we want to delete is subtreeRoot.getData.
66

66

00:03:08,040  -->  00:03:12,820
Replace the value in the subtreeRoot node
67

67

00:03:12,820  -->  00:03:17,680
with the smallest value from the right subtree
68

68

00:03:17,680  -->  00:03:22,210
and then delete the node that has
69

69

00:03:22,210  -->  00:03:24,810
the smallest value in the right subtree
70

70

00:03:24,810  -->  00:03:28,190
because obviously, conceptually what we're doing is
71

71

00:03:28,190  -->  00:03:30,350
we're moving the node with the smallest
72

72

00:03:30,350  -->  00:03:32,850
value in the right subtree, we're moving it
73

73

00:03:32,850  -->  00:03:34,640
to the root of this subtree
74

74

00:03:34,640  -->  00:03:37,680
and so we need to delete it from its old position.
75

75

00:03:37,680  -->  00:03:39,350
And so what we're doing here is
76

76

00:03:39,350  -->  00:03:41,440
we're not actually physically moving the node,
77

77

00:03:41,440  -->  00:03:44,280
we're just replacing the value with the minimum value
78

78

00:03:44,280  -->  00:03:46,250
and then we need to delete the node
79

79

00:03:46,250  -->  00:03:47,970
that contains that minimum value
80

80

00:03:47,970  -->  00:03:50,490
and we're just gonna do that by calling our delete method.
81

81

00:03:50,490  -->  00:03:52,630
And so we're going to replace the right child
82

82

00:03:52,630  -->  00:03:56,810
of the node that was the deleted node,
83

83

00:03:56,810  -->  00:03:58,580
we didn't physically delete it of course,
84

84

00:03:58,580  -->  00:04:00,700
but we're gonna replace it's right child.
85

85

00:04:00,700  -->  00:04:04,770
Now if this subtree has a lot of levels to it,
86

86

00:04:04,770  -->  00:04:08,690
then this will end up being a redundant replacement
87

87

00:04:08,690  -->  00:04:11,820
but if we have a situation where the node
88

88

00:04:11,820  -->  00:04:15,660
that is the smallest value is the immediate child
89

89

00:04:15,660  -->  00:04:19,290
then this will actually result in the
90

90

00:04:19,290  -->  00:04:22,350
right child being set to something new, and that's it.
91

91

00:04:22,350  -->  00:04:25,430
That's all we need to do to handle the case of 2 children.
92

92

00:04:25,430  -->  00:04:27,500
And so now that we have a delete method
93

93

00:04:27,500  -->  00:04:28,700
that's handling all the cases,
94

94

00:04:28,700  -->  00:04:31,000
let's go to the main method and try this out.
95

95

00:04:31,000  -->  00:04:32,880
I'm going to comment these out and
96

96

00:04:32,880  -->  00:04:35,150
I'm actually going to bring back these two lines
97

97

00:04:35,150  -->  00:04:36,730
so that we can see what the tree looks like
98

98

00:04:36,730  -->  00:04:38,620
before we do any deletions
99

99

00:04:38,620  -->  00:04:43,620
and let's say intTree.delete and let's do
100

100

00:04:45,320  -->  00:04:46,790
the cases we went through in the slide.
101

101

00:04:46,790  -->  00:04:51,790
So I think we deleted 15 and then intTree.delete
102

102

00:04:52,120  -->  00:04:56,160
and I think we did 20.
103

103

00:04:56,160  -->  00:04:58,260
Did we do 20 or 27?
104

104

00:04:58,260  -->  00:05:00,863
Let's do 27.
105

105

00:05:01,860  -->  00:05:03,230
I can't remember if that's what we did
106

106

00:05:03,230  -->  00:05:05,930
but let's do it anyway and then let's delete the root.
107

107

00:05:07,780  -->  00:05:10,990
So we'll delete 25 and in fact let's do these separately
108

108

00:05:10,990  -->  00:05:13,860
so that we can see the results of each delete.
109

109

00:05:13,860  -->  00:05:16,083
So I'm going to copy these two lines.
110

110

00:05:20,160  -->  00:05:22,530
And so the first node we're going to try deleting is 15
111

111

00:05:22,530  -->  00:05:23,810
and we know from the slides that
112

112

00:05:23,810  -->  00:05:27,190
15 has one child, 17 so let's run.
113

113

00:05:27,190  -->  00:05:29,180
So that'll be case one.
114

114

00:05:29,180  -->  00:05:33,360
So let's run this and we'll see that before the deletion,
115

115

00:05:33,360  -->  00:05:36,820
we have 15, 17, 20 et cetera and after the deletion,
116

116

00:05:36,820  -->  00:05:41,010
15 is gone and our in order traversal is
117

117

00:05:41,010  -->  00:05:43,970
still working properly, still printing out
118

118

00:05:43,970  -->  00:05:45,810
the numbers in ascending order.
119

119

00:05:45,810  -->  00:05:48,160
So that's the case one.
120

120

00:05:48,160  -->  00:05:50,130
Let's delete 17.
121

121

00:05:50,130  -->  00:05:53,210
So let's change this to 17 because that would be case zero.
122

122

00:05:53,210  -->  00:05:56,150
We know 17 is a leaf so let's run that
123

123

00:05:57,840  -->  00:05:59,820
and 17 is gone.
124

124

00:05:59,820  -->  00:06:02,880
So we have 15, 17, 20 before the deletion
125

125

00:06:02,880  -->  00:06:05,950
and now we have 15, 20, 22 et cetera
126

126

00:06:05,950  -->  00:06:07,130
and everything looks OK.
127

127

00:06:07,130  -->  00:06:09,370
So for the case of 2 children,
128

128

00:06:09,370  -->  00:06:13,370
well we know the route has 2 children so bye bye root.
129

129

00:06:13,370  -->  00:06:16,163
So root is 25, let's run.
130

130

00:06:18,290  -->  00:06:19,730
And 25 is gone.
131

131

00:06:19,730  -->  00:06:24,370
So we've got 15, 17, 20, 22 25 before the deletion,
132

132

00:06:24,370  -->  00:06:28,290
15, 17, 20, 22, 26 after the deletion
133

133

00:06:28,290  -->  00:06:29,410
and everything looks good.
134

134

00:06:29,410  -->  00:06:31,840
So it looks like our 3 cases are working.
135

135

00:06:31,840  -->  00:06:36,840
Let's try 8888 just to make sure that that one's working
136

136

00:06:37,210  -->  00:06:39,393
and hopefully our tree won't fall apart.
137

137

00:06:41,390  -->  00:06:43,360
And you can see that there's no deletions
138

138

00:06:43,360  -->  00:06:45,530
and we're not getting any nasty exceptions.
139

139

00:06:45,530  -->  00:06:47,750
So if we try to delete something that's not in the tree
140

140

00:06:47,750  -->  00:06:50,860
it's essentially a no-op and so that's delete.
141

141

00:06:50,860  -->  00:06:55,340
It turns out that it's longer to explain case to
142

142

00:06:55,340  -->  00:06:56,600
than it is to implement it
143

143

00:06:56,600  -->  00:06:59,100
when we're using recursion.
144

144

00:06:59,100  -->  00:07:02,110
If we were to use an iterative implementation,
145

145

00:07:02,110  -->  00:07:04,380
the code for deleting a node with 2 children
146

146

00:07:04,380  -->  00:07:09,160
is actually goes from 2 lines of code
147

147

00:07:09,160  -->  00:07:10,980
to 30 lines of code.
148

148

00:07:10,980  -->  00:07:13,310
So that's it for delete.
149

149

00:07:13,310  -->  00:07:14,860
I'll see you in the next video.
