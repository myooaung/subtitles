WEBVTT
1
1

00:00:05.600  -->  00:00:08.320
<v Instructor>Alright so lets solve this challenge.</v>
2

2

00:00:08.320  -->  00:00:10.520
The key to this one is realising
3

3

00:00:10.520  -->  00:00:15.170
that because stacks are LIFO, meaning last in first out
4

4

00:00:15.170  -->  00:00:18.930
and queues are FIFO, meaning first in first out,
5

5

00:00:18.930  -->  00:00:22.530
if we add everything to our queue
6

6

00:00:22.530  -->  00:00:26.900
then the queue will contain the original string
7

7

00:00:26.900  -->  00:00:30.090
and if we push everything onto our stack
8

8

00:00:30.090  -->  00:00:32.800
then our stack will contain the original string.
9

9

00:00:32.800  -->  00:00:36.820
Of course we'll remove punctuation and spaces as we do this
10

10

00:00:36.820  -->  00:00:38.900
and so once we've filled our queue
11

11

00:00:38.900  -->  00:00:41.700
and we've filled our stack then all we have to do
12

12

00:00:41.700  -->  00:00:44.710
is loop through the stack lets say,
13

13

00:00:44.710  -->  00:00:48.230
and we'll pop each character of the stack
14

14

00:00:48.230  -->  00:00:52.230
and compare it against the top element in the queue
15

15

00:00:52.230  -->  00:00:54.780
and because the queue will return
16

16

00:00:54.780  -->  00:00:57.880
the characters reading from left to right
17

17

00:00:57.880  -->  00:00:59.880
and the stack will pop the characters
18

18

00:00:59.880  -->  00:01:03.070
in the order of right to left,
19

19

00:01:03.070  -->  00:01:06.140
we just have to, on each iteration,
20

20

00:01:06.140  -->  00:01:08.810
pull the first item of the queue,
21

21

00:01:08.810  -->  00:01:10.880
the item that's at the head of the queue
22

22

00:01:10.880  -->  00:01:15.300
and pop the top character on the stack and compare them,
23

23

00:01:15.300  -->  00:01:18.000
and if they're equal then we're good.
24

24

00:01:18.000  -->  00:01:21.240
If on one of the iterations we pull
25

25

00:01:21.240  -->  00:01:24.560
the head element of the queue and we pop the top character
26

26

00:01:24.560  -->  00:01:26.640
off the stack and they're not equal,
27

27

00:01:26.640  -->  00:01:28.840
that means we don't have a palindrome.
28

28

00:01:28.840  -->  00:01:33.260
And so for example if we just look at the word dad
29

29

00:01:33.260  -->  00:01:36.363
and so lets say we have a stack,
30

30

00:01:37.730  -->  00:01:41.380
and we push D
31

31

00:01:41.380  -->  00:01:44.230
and then we push A
32

32

00:01:44.230  -->  00:01:45.900
and then we push D
33

33

00:01:45.900  -->  00:01:50.900
and so our stack is gonna end up having D.A.D on it
34

34

00:01:52.590  -->  00:01:56.130
and then, this is driving IntelliJ nuts
35

35

00:01:56.130  -->  00:01:57.840
'cause it doesn't know what I'm doing here
36

36

00:01:57.840  -->  00:02:00.990
'cause of all the syntax errors.
37

37

00:02:00.990  -->  00:02:05.100
So with the queue we've add D
38

38

00:02:05.100  -->  00:02:07.620
and then add A
39

39

00:02:07.620  -->  00:02:09.500
and then add D
40

40

00:02:09.500  -->  00:02:12.780
and so our queues gonna contain D.A.D
41

41

00:02:12.780  -->  00:02:17.710
but the key here is when we pop these items from the stack
42

42

00:02:17.710  -->  00:02:19.820
we're actually popping them in reverse order.
43

43

00:02:19.820  -->  00:02:23.810
So in the queue this D is the first D,
44

44

00:02:23.810  -->  00:02:27.560
so when we pull the first item of the queue
45

45

00:02:27.560  -->  00:02:30.840
we're gonna get this D but when we pop from the stack
46

46

00:02:30.840  -->  00:02:32.370
we're gonna get this D
47

47

00:02:32.370  -->  00:02:35.210
and so because of LIFO behaviour the characters will be
48

48

00:02:35.210  -->  00:02:37.890
popped from the stack in reverse order
49

49

00:02:37.890  -->  00:02:41.240
and because of FIFO behaviour the characters will be pulled
50

50

00:02:41.240  -->  00:02:43.740
from the queue in forward order
51

51

00:02:43.740  -->  00:02:45.840
and so what we're gonna do is do a loop
52

52

00:02:45.840  -->  00:02:47.910
and each time, each iteration is a loop,
53

53

00:02:47.910  -->  00:02:51.030
we'll pull one character off the queue
54

54

00:02:51.030  -->  00:02:53.160
and pop one character off the stack
55

55

00:02:53.160  -->  00:02:56.230
and so for the queue we're basically reading left to right
56

56

00:02:56.230  -->  00:02:58.240
and from the stack we're reading right to left
57

57

00:02:58.240  -->  00:03:00.130
and so if we pull off the first character
58

58

00:03:00.130  -->  00:03:01.920
from the queue we'll get this D
59

59

00:03:01.920  -->  00:03:04.100
and then pop the top character
60

60

00:03:04.100  -->  00:03:06.660
from the stack and we'll get the last D.
61

61

00:03:06.660  -->  00:03:08.230
This would be our first iteration
62

62

00:03:08.230  -->  00:03:11.210
and we compare them and they equal each other
63

63

00:03:11.210  -->  00:03:15.840
and so that means so far our string is reading in the same
64

64

00:03:15.840  -->  00:03:19.070
order from left to right as it is from right to left
65

65

00:03:19.070  -->  00:03:21.150
and so so far we have a palindrome.
66

66

00:03:21.150  -->  00:03:23.610
And then when we pop the next item off the stack
67

67

00:03:23.610  -->  00:03:27.880
we'll get A and we'll pull of the queue and we'll get A,
68

68

00:03:27.880  -->  00:03:30.300
we'll compare them, so far so good
69

69

00:03:30.300  -->  00:03:34.360
and then finally we'll pull the last D off the queue
70

70

00:03:34.360  -->  00:03:36.770
and we'll pop the top item on the stack
71

71

00:03:36.770  -->  00:03:38.690
which at this point would be the first D
72

72

00:03:38.690  -->  00:03:41.510
and they compare equal and we're done.
73

73

00:03:41.510  -->  00:03:43.460
And so because all the characters
74

74

00:03:43.460  -->  00:03:46.100
compared equal we have a palindrome.
75

75

00:03:46.100  -->  00:03:50.380
On the other hand if we had, I don't know lets put D.A.D.E,
76

76

00:03:50.380  -->  00:03:53.460
basically we have this situation
77

77

00:03:53.460  -->  00:03:54.970
but we're gonna be when we pop,
78

78

00:03:54.970  -->  00:03:57.150
we're pulling items from the end
79

79

00:03:57.150  -->  00:03:59.460
and so on the very first iteration
80

80

00:03:59.460  -->  00:04:01.580
we're gonna realise this isn't a palindrome
81

81

00:04:01.580  -->  00:04:04.360
because we're gonna pull D off the queue
82

82

00:04:04.360  -->  00:04:06.630
'cause we're reading from left to right
83

83

00:04:06.630  -->  00:04:08.370
and then reading right to left
84

84

00:04:08.370  -->  00:04:10.860
the first item we pop will be E
85

85

00:04:10.860  -->  00:04:12.700
because that was the last one that we pushed
86

86

00:04:12.700  -->  00:04:14.660
and we're gonna compare D against E
87

87

00:04:14.660  -->  00:04:18.100
and opps they're not equal so this is not a palindrome.
88

88

00:04:18.100  -->  00:04:20.400
So the key is just to realise that,
89

89

00:04:20.400  -->  00:04:23.200
if we loop through the original string
90

90

00:04:23.200  -->  00:04:25.980
and as we go we push items onto the stack
91

91

00:04:25.980  -->  00:04:27.990
and we add items to the queue,
92

92

00:04:27.990  -->  00:04:31.540
because one is LIFO and the other one FIFO,
93

93

00:04:31.540  -->  00:04:33.440
if we then loop through again
94

94

00:04:33.440  -->  00:04:36.890
and on each iteration we pop one item from the stack
95

95

00:04:36.890  -->  00:04:39.220
and remove one item from the queue,
96

96

00:04:39.220  -->  00:04:42.880
the queue is basically reading the string from left to right
97

97

00:04:42.880  -->  00:04:45.580
and the stack is reading the string from right to left
98

98

00:04:45.580  -->  00:04:48.460
and so if the string reads the same,
99

99

00:04:48.460  -->  00:04:50.650
from left to right as it does from right to left
100

100

00:04:50.650  -->  00:04:54.377
then on each iteration the character we pop from the stack
101

101

00:04:54.377  -->  00:04:56.360
and the character we pull off the queue
102

102

00:04:56.360  -->  00:04:57.830
should equal each other
103

103

00:04:57.830  -->  00:05:00.300
and if they don't then we don't have a palindrome.
104

104

00:05:00.300  -->  00:05:02.240
And so with that it mind lets go ahead
105

105

00:05:02.240  -->  00:05:03.580
and implement the solution.
106

106

00:05:03.580  -->  00:05:05.680
So once again I'm gonna use a LinkedList
107

107

00:05:05.680  -->  00:05:06.870
and I'm gonna use a LinkedList
108

108

00:05:06.870  -->  00:05:09.500
for both the stack and the queue.
109

109

00:05:09.500  -->  00:05:13.710
So I'm gonna say character stack equals new LinkedList
110

110

00:05:15.720  -->  00:05:17.100
and so that's our stack
111

111

00:05:17.100  -->  00:05:19.960
and I'm gonna say LinkedList character,
112

112

00:05:19.960  -->  00:05:24.953
and this will be my queue, equals new LinkedList character
113

113

00:05:26.390  -->  00:05:28.520
and I'm gonna lowercase the string
114

114

00:05:28.520  -->  00:05:30.190
so I don't have to worry about doing that
115

115

00:05:30.190  -->  00:05:33.130
when I'm pushing and adding to the queues.
116

116

00:05:33.130  -->  00:05:38.130
So I'll say string lowercase equals string.toLowerCase.
117

117

00:05:40.570  -->  00:05:42.610
Okay so now I'm going to loop around
118

118

00:05:42.610  -->  00:05:44.870
and on each iteration I'm gonna do the same thing
119

119

00:05:44.870  -->  00:05:46.130
I did in the stacks challenge.
120

120

00:05:46.130  -->  00:05:48.610
I'm gonna check whether the character is
121

121

00:05:48.610  -->  00:05:52.200
between lowercase A and lowercase Z inclusive
122

122

00:05:52.200  -->  00:05:55.120
and if it is I'm going to push it onto the stack
123

123

00:05:55.120  -->  00:05:56.420
and add it to the queue.
124

124

00:05:56.420  -->  00:05:59.980
So I'm gonna say for int i equals 0,
125

125

00:05:59.980  -->  00:06:04.980
i less than lowercase.length i++.
126

126

00:06:06.500  -->  00:06:11.500
I'm gonna get char c equals lowercase.charAt i.
127

127

00:06:14.720  -->  00:06:17.937
If c greater than or equal to a
128

128

00:06:20.860  -->  00:06:23.890
and c is less than or equal to z
129

129

00:06:25.112  -->  00:06:27.050
then I'm interested in this character.
130

130

00:06:27.050  -->  00:06:28.810
So I'm going to add it to the queue
131

131

00:06:28.810  -->  00:06:30.560
and I'm going to add it as the last.
132

132

00:06:30.560  -->  00:06:32.840
I could just say add but because
133

133

00:06:32.840  -->  00:06:35.130
this is a queue I'll use add last
134

134

00:06:36.790  -->  00:06:39.120
and I'm going to push it onto the stack.
135

135

00:06:39.120  -->  00:06:42.000
So stack.push c.
136

136

00:06:42.000  -->  00:06:43.930
And so when we drop out of this loop,
137

137

00:06:43.930  -->  00:06:48.930
I removed punctuation I removed any spaces, any white space.
138

138

00:06:49.130  -->  00:06:50.930
I've pushed all the characters
139

139

00:06:50.930  -->  00:06:52.770
between a and z onto the stack
140

140

00:06:52.770  -->  00:06:54.180
and I've added all the characters
141

141

00:06:54.180  -->  00:06:55.710
between a and z onto the queue
142

142

00:06:55.710  -->  00:06:58.300
and so now we another loop
143

143

00:06:58.300  -->  00:06:59.810
and what we're gonna do in this loop
144

144

00:06:59.810  -->  00:07:03.840
is just iterate through the stack until it's empty
145

145

00:07:03.840  -->  00:07:05.990
and on each iteration we're gonna pop
146

146

00:07:05.990  -->  00:07:07.360
one character from the stack
147

147

00:07:07.360  -->  00:07:10.090
and we're going to remove one character from the queue
148

148

00:07:10.090  -->  00:07:11.400
and we're gonna compare them
149

149

00:07:11.400  -->  00:07:14.360
and the stack will be effectively reading
150

150

00:07:14.360  -->  00:07:15.910
the string from right to left
151

151

00:07:15.910  -->  00:07:17.900
and the queue will effectively be reading
152

152

00:07:17.900  -->  00:07:19.250
the string from left to right
153

153

00:07:19.250  -->  00:07:22.970
and so if on each iteration the character that we pop
154

154

00:07:22.970  -->  00:07:26.070
and the character that we remove from the queue are equal
155

155

00:07:26.070  -->  00:07:28.280
then we still might have a palindrome.
156

156

00:07:28.280  -->  00:07:31.050
If we hit an instance where the character we pop from the
157

157

00:07:31.050  -->  00:07:33.940
stack is not equal to the character we pull from the queue
158

158

00:07:33.940  -->  00:07:35.810
then we do not have a palindrome
159

159

00:07:35.810  -->  00:07:40.810
and so I'm gonna say while not stack.isEmpty,
160

160

00:07:41.330  -->  00:07:45.847
if not stack.pop.equals,
161

161

00:07:49.350  -->  00:07:50.200
queue.removeFirst
162

162

00:07:54.110  -->  00:07:56.480
then we don't have a palindrome.
163

163

00:07:56.480  -->  00:08:00.020
Otherwise if we make it out of the loop without returning,
164

164

00:08:00.020  -->  00:08:02.220
then every character we pop from the stack
165

165

00:08:02.220  -->  00:08:04.700
equaled the character we remove from the queue
166

166

00:08:04.700  -->  00:08:07.890
and so in that case we have a palindrome
167

167

00:08:07.890  -->  00:08:09.810
and so will return true.
168

168

00:08:09.810  -->  00:08:12.200
It's a shorter and more elegant solution
169

169

00:08:12.200  -->  00:08:14.120
than the one we did in the stacks challenge
170

170

00:08:14.120  -->  00:08:17.580
but we hadn't learnt queues yet in the stacks challenge
171

171

00:08:17.580  -->  00:08:20.050
and so that solution involved a little
172

172

00:08:20.050  -->  00:08:22.750
more manual work I would say.
173

173

00:08:22.750  -->  00:08:26.070
Now that we know queues, we have the more elegant solution
174

174

00:08:26.070  -->  00:08:28.370
and if you were asked to check for a palindrome
175

175

00:08:28.370  -->  00:08:30.290
and they didn't tell you how to do it
176

176

00:08:30.290  -->  00:08:32.400
or they just said use a stack or something,
177

177

00:08:32.400  -->  00:08:34.640
this is a more elegant solution.
178

178

00:08:34.640  -->  00:08:38.330
So once again we should get true true true false and true,
179

179

00:08:38.330  -->  00:08:39.530
so lets give this a try.
180

180

00:08:43.690  -->  00:08:46.740
And we do, we get true true true false and true.
181

181

00:08:46.740  -->  00:08:48.150
So that's it for queues.
182

182

00:08:48.150  -->  00:08:49.800
I'll see you in the next section.
