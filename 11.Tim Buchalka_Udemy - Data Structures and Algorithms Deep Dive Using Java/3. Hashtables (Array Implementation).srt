1
1

00:00:00,021  -->  00:00:03,104
(upbeat, airy music)
2

2

00:00:05,340  -->  00:00:07,740
<v Sarah>Alright, so hashtables exist</v>
3

3

00:00:07,740  -->  00:00:10,640
to provide speedy retrieval of data,
4

4

00:00:10,640  -->  00:00:13,900
and we accomplish that by taking a key.
5

5

00:00:13,900  -->  00:00:15,380
We take that key-value,
6

6

00:00:15,380  -->  00:00:17,080
and we use a hash function
7

7

00:00:17,080  -->  00:00:18,800
to map it to an integer,
8

8

00:00:18,800  -->  00:00:22,240
and then we use that integer to retrieve the item.
9

9

00:00:22,240  -->  00:00:24,920
Now, obviously, one data structure
10

10

00:00:24,920  -->  00:00:26,420
that would land itself really well
11

11

00:00:26,420  -->  00:00:28,190
to this is the array.
12

12

00:00:28,190  -->  00:00:30,750
Because when we hash the key to an integer,
13

13

00:00:30,750  -->  00:00:34,570
we can use that integer as the index into the array,
14

14

00:00:34,570  -->  00:00:36,710
and so that's what we're going to do
15

15

00:00:36,710  -->  00:00:39,850
for our simple hashtable implementation.
16

16

00:00:39,850  -->  00:00:44,230
So we're going to store employees in our hashtable.
17

17

00:00:44,230  -->  00:00:45,580
So I've created a project.
18

18

00:00:45,580  -->  00:00:46,720
I've put the code into
19

19

00:00:46,720  -->  00:00:49,370
academy.learnprograming.hashtable,
20

20

00:00:49,370  -->  00:00:52,570
and I've copied the usual employee class over.
21

21

00:00:52,570  -->  00:00:56,210
So I'm now going to add a class for our hashtable.
22

22

00:00:56,210  -->  00:00:57,680
So new Java Class,
23

23

00:00:57,680  -->  00:00:59,833
and I'm gonna call it SimpleHashtable
24

24

00:01:02,603  -->  00:01:04,883
and we're going to need the array
25

25

00:01:04,883  -->  00:01:07,810
that we're going to use to back the hashtable.
26

26

00:01:07,810  -->  00:01:10,907
So I'll say private Employee, hashtable
27

27

00:01:13,820  -->  00:01:15,450
and we'll need a constructor
28

28

00:01:15,450  -->  00:01:18,200
that's going to create our array.
29

29

00:01:18,200  -->  00:01:21,110
So we'll say public, SimpleHashtable.
30

30

00:01:22,610  -->  00:01:26,740
I'm going to set the capacity inside the constructor,
31

31

00:01:26,740  -->  00:01:28,800
so the caller doesn't have to do that,
32

32

00:01:28,800  -->  00:01:30,470
and I'm gonna say
33

33

00:01:30,470  -->  00:01:33,060
hashtable = new Employee,
34

34

00:01:33,060  -->  00:01:38,060
and we'll just give it a capacity of 10.
35

35

00:01:38,340  -->  00:01:40,030
We're gonna need a hashing function.
36

36

00:01:40,030  -->  00:01:42,460
So I'm going to say private
37

37

00:01:42,460  -->  00:01:44,950
because you don't need to expose
38

38

00:01:44,950  -->  00:01:47,220
the hashing function to the world.
39

39

00:01:47,220  -->  00:01:50,400
So private int and I'm going to call it hashKey,
40

40

00:01:50,400  -->  00:01:51,830
and we're gonna accept a String
41

41

00:01:51,830  -->  00:01:56,050
because, as I discussed in the previous video,
42

42

00:01:56,050  -->  00:01:57,670
we're going to use the employee
43

43

00:01:57,670  -->  00:01:59,827
last name as the key.
44

44

00:01:59,827  -->  00:02:02,840
Now we're going to return key.length
45

45

00:02:04,720  -->  00:02:08,807
modded by the length of the hashtable,
46

46

00:02:10,170  -->  00:02:11,900
and so this is taking a String
47

47

00:02:11,900  -->  00:02:13,760
and it's hashing to it an int.
48

48

00:02:13,760  -->  00:02:17,490
That's exactly what a hash functions does.
49

49

00:02:17,490  -->  00:02:20,540
So let's say we wanna do Jane Jones.
50

50

00:02:20,540  -->  00:02:23,730
We're gonna, the key.length will be five
51

51

00:02:23,730  -->  00:02:25,390
and the hashtable length
52

52

00:02:25,390  -->  00:02:28,250
is 10, and so we're gonna return five
53

53

00:02:28,250  -->  00:02:30,730
because five divided by 10 is zero
54

54

00:02:30,730  -->  00:02:32,160
with a remainder of five.
55

55

00:02:32,160  -->  00:02:35,940
And so we would expect the key Jones
56

56

00:02:35,940  -->  00:02:38,960
to return a hashed value of five,
57

57

00:02:38,960  -->  00:02:41,740
and five is what we will use to index
58

58

00:02:41,740  -->  00:02:43,060
into the backing array.
59

59

00:02:43,060  -->  00:02:44,960
It's important to use understand
60

60

00:02:44,960  -->  00:02:47,310
that the key and the hashed value
61

61

00:02:47,310  -->  00:02:48,810
are not the same thing.
62

62

00:02:48,810  -->  00:02:51,350
We take the key, and we hash it
63

63

00:02:51,350  -->  00:02:52,840
to a hashed value.
64

64

00:02:52,840  -->  00:02:54,390
The key can be anything.
65

65

00:02:54,390  -->  00:02:55,320
It can be a String.
66

66

00:02:55,320  -->  00:02:56,460
It could be a character.
67

67

00:02:56,460  -->  00:02:58,430
It could be whatever you want.
68

68

00:02:58,430  -->  00:03:00,090
It could be an employee.
69

69

00:03:00,090  -->  00:03:03,470
The hashed value is always an integer.
70

70

00:03:03,470  -->  00:03:05,140
Now I'm not claiming that this is
71

71

00:03:05,140  -->  00:03:07,300
a wonderful hash function.
72

72

00:03:07,300  -->  00:03:09,080
It's just something that I've made up,
73

73

00:03:09,080  -->  00:03:11,930
so that we're going to get indices
74

74

00:03:11,930  -->  00:03:14,200
in the range zero to nine, right?
75

75

00:03:14,200  -->  00:03:15,580
Because we're modding by the length
76

76

00:03:15,580  -->  00:03:16,620
of the hashtable.
77

77

00:03:16,620  -->  00:03:19,580
As I said previously, the hashing function
78

78

00:03:19,580  -->  00:03:21,310
is gonna play a huge role
79

79

00:03:21,310  -->  00:03:23,810
in how quick your retrievals are.
80

80

00:03:23,810  -->  00:03:25,760
I mean if you have a hashing function
81

81

00:03:25,760  -->  00:03:27,820
that ends up hashing every single key
82

82

00:03:27,820  -->  00:03:30,030
to the same value, your retrievals are gonna be
83

83

00:03:30,030  -->  00:03:31,267
pretty slow because all of your values
84

84

00:03:31,267  -->  00:03:33,720
are gonna go into the same index
85

85

00:03:33,720  -->  00:03:34,770
in the array, and you're gonna have
86

86

00:03:34,770  -->  00:03:36,370
to search through all your values
87

87

00:03:36,370  -->  00:03:37,950
to find the one you're looking for.
88

88

00:03:37,950  -->  00:03:39,500
If you have a hashing function
89

89

00:03:39,500  -->  00:03:42,590
that evenly distributes the values
90

90

00:03:42,590  -->  00:03:45,040
in the array, then your retrievals
91

91

00:03:45,040  -->  00:03:45,873
are gonna be better.
92

92

00:03:45,873  -->  00:03:47,520
So, obviously, the ideal case
93

93

00:03:47,520  -->  00:03:50,400
is you only ever have one value per key.
94

94

00:03:50,400  -->  00:03:52,440
Now, in the real world, we probably use
95

95

00:03:52,440  -->  00:03:54,950
the ID as a the key
96

96

00:03:54,950  -->  00:03:57,410
because they're probably going to be unique,
97

97

00:03:57,410  -->  00:03:59,140
but we still have to hash them, right?
98

98

00:03:59,140  -->  00:04:02,050
Because we may be a small company,
99

99

00:04:02,050  -->  00:04:04,603
and we may only have 20 employees,
100

100

00:04:04,603  -->  00:04:08,040
but our IDs are five digits long.
101

101

00:04:08,040  -->  00:04:09,880
Maybe the keycards that we have
102

102

00:04:09,880  -->  00:04:12,640
require IDs that are five digits long.
103

103

00:04:12,640  -->  00:04:15,130
So we may only have an employee array
104

104

00:04:15,130  -->  00:04:18,430
of length 20, but the IDs are in the form
105

105

00:04:18,430  -->  00:04:19,680
one, two, three, four, five.
106

106

00:04:19,680  -->  00:04:21,720
So, in that case, we'd still have to hash
107

107

00:04:21,720  -->  00:04:23,840
the integer because we'd have to map
108

108

00:04:23,840  -->  00:04:26,680
the IDs to valid array indices.
109

109

00:04:26,680  -->  00:04:29,390
Okay, so now that we have a hash function
110

110

00:04:29,390  -->  00:04:32,440
let's add the method that lets callers
111

111

00:04:32,440  -->  00:04:34,190
put stuff into the hashtable,
112

112

00:04:34,190  -->  00:04:37,160
and we're gonna call that method put.
113

113

00:04:37,160  -->  00:04:40,050
So we're gonna say public void put,
114

114

00:04:40,050  -->  00:04:41,530
and we're gonna need the key
115

115

00:04:41,530  -->  00:04:42,900
which is gonna be a String
116

116

00:04:42,900  -->  00:04:44,983
and the value that we wanna add.
117

117

00:04:46,860  -->  00:04:48,930
Remember that when it comes to hashtables,
118

118

00:04:48,930  -->  00:04:51,200
we're always dealing with key-value pairs,
119

119

00:04:51,200  -->  00:04:52,090
and, when you add to a hashtable,
120

120

00:04:52,090  -->  00:04:55,120
you have to provide the key and the value.
121

121

00:04:55,120  -->  00:04:57,300
And, as we'll see, when you wanna retrieve
122

122

00:04:57,300  -->  00:04:58,277
something from the hashtable,
123

123

00:04:58,277  -->  00:04:59,890
you have to provide the key.
124

124

00:04:59,890  -->  00:05:02,340
The same key you used to add the value.
125

125

00:05:02,340  -->  00:05:04,790
So the first thing we're gonna is hash the keys,
126

126

00:05:04,790  -->  00:05:07,893
so we'll say int hashedKey = hashKey, key.
127

127

00:05:13,630  -->  00:05:16,580
So the hashedKey will give us the index
128

128

00:05:16,580  -->  00:05:18,890
into the array, and then we're going
129

129

00:05:18,890  -->  00:05:22,330
to have a really simple hashtable as I said,
130

130

00:05:22,330  -->  00:05:25,830
and so this hashtable doesn't handle collisions.
131

131

00:05:25,830  -->  00:05:29,320
And so, if we try to put an employee
132

132

00:05:29,320  -->  00:05:32,320
into the hashtable and when we hash the key
133

133

00:05:32,320  -->  00:05:35,290
the hashed value is the same value
134

134

00:05:35,290  -->  00:05:37,540
for an employee that we've already added,
135

135

00:05:37,540  -->  00:05:39,480
we're not gonna add the employee.
136

136

00:05:39,480  -->  00:05:41,410
We're just gonna print something out saying
137

137

00:05:41,410  -->  00:05:44,360
sorry that array position is already taken
138

138

00:05:44,360  -->  00:05:47,197
'cause this hashtable doesn't handle collisions,
139

139

00:05:47,197  -->  00:05:49,553
and we're gonna say if hashtable
140

140

00:05:52,840  -->  00:05:56,030
hashedKey is not = to null
141

141

00:05:56,030  -->  00:05:58,590
meaning that there's already an employee
142

142

00:05:58,590  -->  00:06:00,040
at that position in the array,
143

143

00:06:00,040  -->  00:06:02,773
we're just gonna say System.out.print line,
144

144

00:06:03,730  -->  00:06:07,540
Sorry, there's already an employee
145

145

00:06:08,470  -->  00:06:09,853
at position,
146

146

00:06:12,830  -->  00:06:17,610
and we'll include the hashedKey,
147

147

00:06:17,610  -->  00:06:20,550
so we can see which position it's at.
148

148

00:06:20,550  -->  00:06:22,420
If that's not the case, we just have
149

149

00:06:22,420  -->  00:06:24,540
to go ahead and assign the employee
150

150

00:06:24,540  -->  00:06:28,110
into hashtable indexed hashedKey.
151

151

00:06:28,110  -->  00:06:29,563
So we'll say hashtable,
152

152

00:06:31,278  -->  00:06:34,343
hashedKey = employee,
153

153

00:06:36,670  -->  00:06:37,790
and that's it.
154

154

00:06:37,790  -->  00:06:42,020
That's our very, very simple put method,
155

155

00:06:42,020  -->  00:06:44,030
and so we come in, we hash the key,
156

156

00:06:44,030  -->  00:06:46,670
meaning we map the key they provided
157

157

00:06:46,670  -->  00:06:48,620
to an integer and then we check
158

158

00:06:48,620  -->  00:06:50,070
that position in the array.
159

159

00:06:50,070  -->  00:06:53,160
And, if it's empty, we assign the employee
160

160

00:06:53,160  -->  00:06:54,170
into that position.
161

161

00:06:54,170  -->  00:06:56,740
If it's not empty, this first initial
162

162

00:06:56,740  -->  00:06:58,760
implementation doesn't handle collisions,
163

163

00:06:58,760  -->  00:07:00,440
so we're just like oops, sorry,
164

164

00:07:00,440  -->  00:07:01,273
can't add it there.
165

165

00:07:01,273  -->  00:07:02,580
There's already somebody there,
166

166

00:07:02,580  -->  00:07:04,080
and that's not gonna be difficult
167

167

00:07:04,080  -->  00:07:06,670
because all we need is two employees
168

168

00:07:06,670  -->  00:07:09,450
with last names that have the same length
169

169

00:07:09,450  -->  00:07:11,050
and we're gonna get a collision.
170

170

00:07:11,050  -->  00:07:13,330
Now, there's other things we could have done.
171

171

00:07:13,330  -->  00:07:15,350
For example, we could have had an employee array
172

172

00:07:15,350  -->  00:07:17,650
of 26, and then we could have looked
173

173

00:07:17,650  -->  00:07:19,460
at the first letter of the last name.
174

174

00:07:19,460  -->  00:07:21,620
That would also lead to collisions
175

175

00:07:21,620  -->  00:07:22,790
because all we would have needed
176

176

00:07:22,790  -->  00:07:24,900
was two employees with last names
177

177

00:07:24,900  -->  00:07:26,240
that begin with the same letter,
178

178

00:07:26,240  -->  00:07:27,470
and we'd have a collision.
179

179

00:07:27,470  -->  00:07:29,240
So, as I said, in practise
180

180

00:07:29,240  -->  00:07:31,190
it can be difficult to come up
181

181

00:07:31,190  -->  00:07:32,910
with a hashing function that's never gonna
182

182

00:07:32,910  -->  00:07:35,020
give you collisions, so, fortunately,
183

183

00:07:35,020  -->  00:07:37,160
we have strategies for dealing with them.
184

184

00:07:37,160  -->  00:07:39,830
Okay, so now that we can put an employee
185

185

00:07:39,830  -->  00:07:42,150
into the hashtable, let's write the method
186

186

00:07:42,150  -->  00:07:43,330
for retrieving one.
187

187

00:07:43,330  -->  00:07:45,220
So we'll say public Employee,
188

188

00:07:45,220  -->  00:07:47,340
'cause we're gonna return the employee.
189

189

00:07:47,340  -->  00:07:50,023
Get and, in this case, we need the key,
190

190

00:07:52,270  -->  00:07:54,330
and the key obviously has to be
191

191

00:07:54,330  -->  00:07:56,780
the same key you used here.
192

192

00:07:56,780  -->  00:07:58,880
So, we'll once again, the first thing
193

193

00:07:58,880  -->  00:08:00,910
we have to do is hash the key
194

194

00:08:00,910  -->  00:08:02,670
because we need to get the integer value.
195

195

00:08:02,670  -->  00:08:04,290
We need to get the index into the array,
196

196

00:08:04,290  -->  00:08:06,847
so we'll say int hashedKey =
197

197

00:08:07,785  -->  00:08:11,630
hashKey, and we'll pass the key they've given us
198

198

00:08:11,630  -->  00:08:13,460
and then all we have to do is return
199

199

00:08:13,460  -->  00:08:17,403
hashtable hashedKey.
200

200

00:08:18,320  -->  00:08:19,930
Talking about time complexity,
201

201

00:08:19,930  -->  00:08:22,720
you can see that the retrieval is constant time.
202

202

00:08:22,720  -->  00:08:26,520
We're just doing good old array direct access,
203

203

00:08:26,520  -->  00:08:28,280
and we can do that in constant time.
204

204

00:08:28,280  -->  00:08:30,690
This does not depend on the number
205

205

00:08:30,690  -->  00:08:31,970
of items that are in the array,
206

206

00:08:31,970  -->  00:08:33,610
and that's why hashtables are
207

207

00:08:33,610  -->  00:08:35,500
so good at retrieval.
208

208

00:08:35,500  -->  00:08:37,180
If you back them an array,
209

209

00:08:37,180  -->  00:08:38,880
then you can use something like
210

210

00:08:38,880  -->  00:08:42,610
a String key to get a value that you've
211

211

00:08:42,610  -->  00:08:45,130
previously added in constant time,
212

212

00:08:45,130  -->  00:08:46,180
and that's what we want.
213

213

00:08:46,180  -->  00:08:48,210
That's what hashtables do for us.
214

214

00:08:48,210  -->  00:08:49,769
All right, so I'm gonna add a print
215

215

00:08:49,769  -->  00:08:54,769
hashtable method, so I'll say public void
216

216

00:08:56,739  -->  00:09:00,320
printHashtable, and, since it's an array,
217

217

00:09:00,320  -->  00:09:02,520
this'll be really straightforward.
218

218

00:09:02,520  -->  00:09:05,400
We'll just say for int i = 0,
219

219

00:09:05,400  -->  00:09:09,136
i less than hashtable.length,
220

220

00:09:09,136  -->  00:09:12,240
i++ and we'll just
221

221

00:09:12,240  -->  00:09:16,253
say System.out.print line hashtable i,
222

222

00:09:19,470  -->  00:09:20,760
and that's it.
223

223

00:09:20,760  -->  00:09:22,520
So let's go to our main method.
224

224

00:09:22,520  -->  00:09:25,560
I've already added the usual employees
225

225

00:09:25,560  -->  00:09:28,380
that we work with, and we'll create
226

226

00:09:28,380  -->  00:09:29,213
a simple hashtable.
227

227

00:09:29,213  -->  00:09:31,270
So SimpleHashtable.
228

228

00:09:31,270  -->  00:09:35,790
I'll just call it ht = new SimpleHashtable,
229

229

00:09:35,790  -->  00:09:37,810
and we don't have to pass a capacity.
230

230

00:09:37,810  -->  00:09:39,990
And we'll say ht.put.
231

231

00:09:39,990  -->  00:09:42,010
Now we need a key and a value,
232

232

00:09:42,010  -->  00:09:43,830
and we're gonna use a last name as the key,
233

233

00:09:43,830  -->  00:09:46,250
so I'm gonna say Jones,
234

234

00:09:46,250  -->  00:09:47,880
and we're gonna put janeJones
235

235

00:09:47,880  -->  00:09:51,790
under Jones and then ht.put.
236

236

00:09:51,790  -->  00:09:53,270
And we'll put John Doe.
237

237

00:09:53,270  -->  00:09:58,270
Let's say Doe, johnDoe,
238

238

00:09:58,780  -->  00:10:01,123
and let's put Mike,
239

239

00:10:02,360  -->  00:10:03,620
so Wilson
240

240

00:10:07,920  -->  00:10:08,940
and mike
241

241

00:10:11,350  -->  00:10:13,010
and then let's put somebody that we know
242

242

00:10:13,010  -->  00:10:14,280
is gonna cause a collision.
243

243

00:10:14,280  -->  00:10:17,040
Remember that our very simple hashing function
244

244

00:10:17,040  -->  00:10:18,830
just looks at the length of the last name.
245

245

00:10:18,830  -->  00:10:20,590
So we just need to use somebody
246

246

00:10:20,590  -->  00:10:23,040
that's got a last name as the same length
247

247

00:10:23,040  -->  00:10:25,980
as janeJones, Doe or Wilson,
248

248

00:10:25,980  -->  00:10:29,380
so marySmith has five characters
249

249

00:10:29,380  -->  00:10:31,020
and that's the same as Jane.
250

250

00:10:31,020  -->  00:10:32,000
So let's add her.
251

251

00:10:32,000  -->  00:10:36,303
So we'll say Smith, marySmith,
252

252

00:10:37,490  -->  00:10:39,180
and this should result in the
253

253

00:10:39,180  -->  00:10:42,330
sorry we can't do it printout.
254

254

00:10:42,330  -->  00:10:44,390
And, finally, I'll print the hashtable,
255

255

00:10:44,390  -->  00:10:47,250
so ht.printHashtable.
256

256

00:10:47,250  -->  00:10:48,663
All right, so let's run.
257

257

00:10:53,830  -->  00:10:57,910
Okay so this here, sorry, there's already
258

258

00:10:57,910  -->  00:10:59,750
an employee at position five,
259

259

00:10:59,750  -->  00:11:02,280
is for when we go to add Mary
260

260

00:11:02,280  -->  00:11:04,740
because, when we hash Smith,
261

261

00:11:04,740  -->  00:11:05,850
we're gonna get five,
262

262

00:11:05,850  -->  00:11:07,870
and Jones also gives us five.
263

263

00:11:07,870  -->  00:11:10,610
So we already have position five
264

264

00:11:10,610  -->  00:11:13,060
in our hashtable occupied by Jane,
265

265

00:11:13,060  -->  00:11:15,300
and then this is the printout of our hashtable.
266

266

00:11:15,300  -->  00:11:16,750
Let me just pull this up.
267

267

00:11:16,750  -->  00:11:18,270
So this here is the printout.
268

268

00:11:18,270  -->  00:11:21,580
So we have John Doe at position three,
269

269

00:11:21,580  -->  00:11:23,500
so zero, one, two, three,
270

270

00:11:23,500  -->  00:11:24,940
and that makes sense 'cause he's got
271

271

00:11:24,940  -->  00:11:27,080
three characters in his last name.
272

272

00:11:27,080  -->  00:11:29,620
And then Jane is at position five,
273

273

00:11:29,620  -->  00:11:31,850
and Wilson is at position six,
274

274

00:11:31,850  -->  00:11:35,090
and so our hashtable's working as we expect.
275

275

00:11:35,090  -->  00:11:37,880
Of course, it's not a great hashing function
276

276

00:11:37,880  -->  00:11:40,710
because collisions will be plentiful
277

277

00:11:40,710  -->  00:11:42,370
if you're adding a lot of people
278

278

00:11:42,370  -->  00:11:44,210
and we're not handling them at all.
279

279

00:11:44,210  -->  00:11:47,320
So this is sort of a bare bones implementation
280

280

00:11:47,320  -->  00:11:49,040
of a hashtable to give you an idea
281

281

00:11:49,040  -->  00:11:51,440
of how we do the hashing under the covers
282

282

00:11:51,440  -->  00:11:54,260
when we put and get employees.
283

283

00:11:54,260  -->  00:11:56,560
So let's go ahead and get an employee.
284

284

00:11:56,560  -->  00:11:59,683
So I'm gonna say System.out.print line,
285

285

00:12:02,843  -->  00:12:05,680
and we're gonna Retrieve key, let's say,
286

286

00:12:05,680  -->  00:12:10,680
Wilson, and we'll say ht.get
287

287

00:12:11,280  -->  00:12:12,893
and our key is Wilson.
288

288

00:12:14,260  -->  00:12:16,600
And I'm gonna comment out this here,
289

289

00:12:16,600  -->  00:12:17,660
so that we're not gonna see all
290

290

00:12:17,660  -->  00:12:18,810
that printout again.
291

291

00:12:18,810  -->  00:12:20,023
And let's run,
292

292

00:12:23,460  -->  00:12:25,450
and there we get Mike Wilson back.
293

293

00:12:25,450  -->  00:12:28,210
So here's our sorry from when we add Mary,
294

294

00:12:28,210  -->  00:12:29,530
tried to add Mary here,
295

295

00:12:29,530  -->  00:12:32,290
and this is our retrieving key Wilson
296

296

00:12:32,290  -->  00:12:34,070
and we got Mike Wilson back.
297

297

00:12:34,070  -->  00:12:36,940
And so under the covers here,
298

298

00:12:36,940  -->  00:12:39,730
on the get, we hashed the key again, Wilson.
299

299

00:12:39,730  -->  00:12:43,140
We got six and Mike Wilson was
300

300

00:12:43,140  -->  00:12:45,970
at hashtable six because that's where we put him
301

301

00:12:45,970  -->  00:12:48,220
when we added him to hashtable,
302

302

00:12:48,220  -->  00:12:50,720
and so these are the essentials
303

303

00:12:50,720  -->  00:12:53,710
of a hashtable when you put the employee
304

304

00:12:53,710  -->  00:12:55,200
you hash the key.
305

305

00:12:55,200  -->  00:12:57,860
and then, using the key, you put the employee
306

306

00:12:57,860  -->  00:12:59,140
at the appropriate place.
307

307

00:12:59,140  -->  00:13:01,300
And then, when you get the employee,
308

308

00:13:01,300  -->  00:13:03,300
you have to provide the same key.
309

309

00:13:03,300  -->  00:13:05,950
You have to use the same hash function
310

310

00:13:05,950  -->  00:13:08,900
to hash that key, and then you use the result
311

311

00:13:08,900  -->  00:13:10,890
to retrieve the item.
312

312

00:13:10,890  -->  00:13:13,410
So the beauty of hashtables is
313

313

00:13:13,410  -->  00:13:16,880
you can use non-integer keys to retrieve items
314

314

00:13:16,880  -->  00:13:18,770
in constant time.
315

315

00:13:18,770  -->  00:13:20,440
As I've mentioned, the load factor
316

316

00:13:20,440  -->  00:13:22,190
in the hashing function that you use
317

317

00:13:22,190  -->  00:13:24,060
are going to influence that.
318

318

00:13:24,060  -->  00:13:27,080
So, if you're using a crappy hashing function
319

319

00:13:27,080  -->  00:13:29,480
or your load factor is really, really high,
320

320

00:13:29,480  -->  00:13:30,690
so when you're adding you're getting
321

321

00:13:30,690  -->  00:13:33,900
a lot of collisions, obviously your retrieval
322

322

00:13:33,900  -->  00:13:36,090
time complexity is gonna start to degrade.
323

323

00:13:36,090  -->  00:13:38,200
So you might not achieve constant time.
324

324

00:13:38,200  -->  00:13:39,710
All right, so now that we've looked
325

325

00:13:39,710  -->  00:13:41,840
at this really simple implementation
326

326

00:13:41,840  -->  00:13:45,342
that is going to result in a lot of collisions,
327

327

00:13:45,342  -->  00:13:49,120
we're going to take a look at strategies
328

328

00:13:49,120  -->  00:13:50,650
that are used to handle collisions,
329

329

00:13:50,650  -->  00:13:52,240
and we'll do that in the next video.
330

330

00:13:52,240  -->  00:13:53,223
I'll see you there.
