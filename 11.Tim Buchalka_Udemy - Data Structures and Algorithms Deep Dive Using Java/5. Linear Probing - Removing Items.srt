1
1

00:00:00,372  -->  00:00:02,644
(light music)
2

2

00:00:02,644  -->  00:00:05,480
(typing)
3

3

00:00:05,480  -->  00:00:08,220
<v Instructor>Okay, so let's implement a remove method now,</v>
4

4

00:00:08,220  -->  00:00:10,700
we haven't done that, so let's do remove.
5

5

00:00:10,700  -->  00:00:13,070
So I think I'll put it after the get method,
6

6

00:00:13,070  -->  00:00:16,910
so we'll say public, and we'll return the employee
7

7

00:00:16,910  -->  00:00:21,910
or null, if there's no such employee in the table, remove,
8

8

00:00:21,960  -->  00:00:24,003
and as usual, we need the key.
9

9

00:00:25,430  -->  00:00:27,220
Now remove, just like get,
10

10

00:00:27,220  -->  00:00:29,170
is gonna have to use linear probing,
11

11

00:00:29,170  -->  00:00:32,140
because we have to find the employee that we want to remove
12

12

00:00:32,140  -->  00:00:33,170
and so, we're gonna say,
13

13

00:00:33,170  -->  00:00:37,203
int hashedKey = findKey(key)
14

14

00:00:40,420  -->  00:00:42,607
and then we're gonna say, if (hashedKey = -1),
15

15

00:00:45,060  -->  00:00:47,330
then we're gonna return null,
16

16

00:00:47,330  -->  00:00:49,110
because there's no employee in the table
17

17

00:00:49,110  -->  00:00:52,180
with the key of strings, so there's nothing to remove
18

18

00:00:52,180  -->  00:00:55,200
and if that's not the case, we'll say, Employee
19

19

00:00:55,200  -->  00:00:59,277
employee = hashtable[hashedKey].employee.
20

20

00:01:04,550  -->  00:01:07,670
We're gonna null out the position, so we're gonna say,
21

21

00:01:07,670  -->  00:01:10,160
hashtable[hashedKey] = null,
22

22

00:01:13,460  -->  00:01:15,960
so that we know there's an empty spot there now
23

23

00:01:15,960  -->  00:01:18,170
and then, we're just gonna return the employee.
24

24

00:01:18,170  -->  00:01:20,530
So let's try removing a couple of employees,
25

25

00:01:20,530  -->  00:01:25,280
so let's come back here and we'll say, ht.remove,
26

26

00:01:25,280  -->  00:01:27,920
let's remove, I don't know, Mike Wilson
27

27

00:01:29,090  -->  00:01:31,020
and let's remove Jane Jones,
28

28

00:01:31,020  -->  00:01:33,970
so that we can try out the linear probing on remove
29

29

00:01:33,970  -->  00:01:35,730
and then we'll print our hashtable.
30

30

00:01:35,730  -->  00:01:36,783
So let's run.
31

31

00:01:39,940  -->  00:01:43,290
Okay, let me pull this up, so we can see what's going on,
32

32

00:01:43,290  -->  00:01:48,210
so the first printout here is after our adds
33

33

00:01:48,210  -->  00:01:50,820
and you'll see we have John, Jane, Mike and Mary
34

34

00:01:50,820  -->  00:01:52,750
and then we do our two retrievals
35

35

00:01:52,750  -->  00:01:56,250
and then we removed Mike and Jane
36

36

00:01:56,250  -->  00:01:58,770
and so, here's the second printout
37

37

00:01:58,770  -->  00:02:00,890
and only John and Mary are left
38

38

00:02:00,890  -->  00:02:04,260
and so, John is at position three, Mary's at position seven.
39

39

00:02:04,260  -->  00:02:07,570
You can see that Jane is gone from position five
40

40

00:02:07,570  -->  00:02:11,293
and Mike Wilson has gone from position six.
41

41

00:02:13,130  -->  00:02:16,950
Okay so, this is our implementation,
42

42

00:02:16,950  -->  00:02:20,810
there is one change I wanna make to the find key,
43

43

00:02:20,810  -->  00:02:22,340
you might have caught this.
44

44

00:02:22,340  -->  00:02:24,180
So we need to make a change here,
45

45

00:02:24,180  -->  00:02:26,620
because if we're dropping out of this loop,
46

46

00:02:26,620  -->  00:02:28,470
because hashtable[hashedKey] is null,
47

47

00:02:30,168  -->  00:02:31,001
then if stopIndex is not hashedKey,
48

48

00:02:32,980  -->  00:02:35,860
we're gonna drop here, return hashedKey
49

49

00:02:35,860  -->  00:02:38,990
and the remove or the get
50

50

00:02:38,990  -->  00:02:42,320
will then try to use that key,
51

51

00:02:42,320  -->  00:02:45,880
'cause we're not returning -1 to index into the array
52

52

00:02:45,880  -->  00:02:47,670
and that's gonna cause a null point or exception.
53

53

00:02:47,670  -->  00:02:50,740
So I actually wanna change this whole condition here
54

54

00:02:50,740  -->  00:02:55,740
and we're gonna say, if (hashtable[hashedKey])
55

55

00:02:56,980  -->  00:02:58,520
is not equal to null
56

56

00:03:00,400  -->  00:03:04,270
and we have found the key we're looking for,
57

57

00:03:04,270  -->  00:03:08,460
so hashtable[hashedKey].key.equals
58

58

00:03:08,460  -->  00:03:11,600
the key we're looking for, then we wanna return hashedKey
59

59

00:03:13,960  -->  00:03:15,450
and if that's not the case,
60

60

00:03:15,450  -->  00:03:18,140
if the position at hashedKey is null
61

61

00:03:18,140  -->  00:03:20,570
or whatever's there doesn't contain what we're looking for,
62

62

00:03:20,570  -->  00:03:21,880
and that would be the case
63

63

00:03:21,880  -->  00:03:24,523
when we have looped around and hit the stopIndex,
64

64

00:03:29,557  -->  00:03:31,240
then we wanna return -1.
65

65

00:03:31,240  -->  00:03:33,350
Now I discovered that when I was playing around
66

66

00:03:33,350  -->  00:03:36,010
with trying different adds and removes and things
67

67

00:03:36,010  -->  00:03:38,530
and we were getting null point or exceptions,
68

68

00:03:38,530  -->  00:03:41,200
I realised it was because we were assuming
69

69

00:03:41,200  -->  00:03:44,300
that if we hadn't found the key, that we were dropping out,
70

70

00:03:44,300  -->  00:03:47,230
because hashedKey had hit the stopIndex,
71

71

00:03:47,230  -->  00:03:48,370
but of course, that's not true,
72

72

00:03:48,370  -->  00:03:51,580
we might have dropped out because we've hit a null position.
73

73

00:03:51,580  -->  00:03:53,370
And so, let's run our main method again,
74

74

00:03:53,370  -->  00:03:56,173
just to make sure this change hasn't busted anything.
75

75

00:03:58,400  -->  00:04:01,790
And so, let me just pull this up.
76

76

00:04:01,790  -->  00:04:06,480
We have the hashtable after we've done our four adds,
77

77

00:04:06,480  -->  00:04:08,410
we retrieve our two employees
78

78

00:04:08,410  -->  00:04:10,810
and then we do our two deletes, and there we go.
79

79

00:04:11,940  -->  00:04:13,780
Now the reason I was playing around
80

80

00:04:13,780  -->  00:04:15,150
with different adds and deletes,
81

81

00:04:15,150  -->  00:04:17,870
is because we are dropping out here
82

82

00:04:18,930  -->  00:04:20,700
as soon as we hit a null position,
83

83

00:04:20,700  -->  00:04:22,420
this implementation actually does
84

84

00:04:22,420  -->  00:04:23,730
have a little bit of a bug in it,
85

85

00:04:23,730  -->  00:04:28,130
if we come to the main method and we try to find Mary again
86

86

00:04:28,130  -->  00:04:30,900
after we've deleted Jane Jones
87

87

00:04:32,120  -->  00:04:34,513
and Mike Wilson, let's run.
88

88

00:04:37,160  -->  00:04:39,630
We're gonna see that we don't find her anymore
89

89

00:04:41,010  -->  00:04:44,180
and the reason for that is that in
90

90

00:04:47,929  -->  00:04:51,670
the remove method, we're nulling out removed employees
91

91

00:04:51,670  -->  00:04:53,490
and so, when we're doing our probing,
92

92

00:04:53,490  -->  00:04:55,800
we're stopping the first time we hit a null
93

93

00:04:55,800  -->  00:04:58,100
and because Mike's no longer there,
94

94

00:04:58,100  -->  00:05:01,290
when we're looking for Mary, we check position five,
95

95

00:05:01,290  -->  00:05:02,490
actually, in this case,
96

96

00:05:02,490  -->  00:05:04,720
it would be because Jane isn't there.
97

97

00:05:04,720  -->  00:05:08,720
We check position five, position five isn't occupied,
98

98

00:05:08,720  -->  00:05:12,270
so when we're finding the key, position five isn't occupied
99

99

00:05:12,270  -->  00:05:14,750
and so, we're gonna loop around looking for Mary
100

100

00:05:14,750  -->  00:05:17,460
and the first time we hit a null, we're gonna stop,
101

101

00:05:17,460  -->  00:05:20,010
and because positions five and six are null,
102

102

00:05:20,010  -->  00:05:22,080
we don't get to Mary.
103

103

00:05:22,080  -->  00:05:25,720
And so, that's the bug, and we're going to take a look
104

104

00:05:25,720  -->  00:05:28,883
at how to deal with that in another video.
105

105

00:05:31,210  -->  00:05:34,020
I thought I'd record a quick addition to this video,
106

106

00:05:34,020  -->  00:05:35,690
because when I reviewed the video,
107

107

00:05:35,690  -->  00:05:37,780
I realised that I didn't really explain
108

108

00:05:37,780  -->  00:05:39,970
why we drop out of the loop
109

109

00:05:39,970  -->  00:05:42,330
as soon as we hit a null position,
110

110

00:05:42,330  -->  00:05:43,790
because you might be wondering,
111

111

00:05:43,790  -->  00:05:46,020
well, if we can't find Mary,
112

112

00:05:46,020  -->  00:05:48,830
why aren't we searching the entire array?
113

113

00:05:48,830  -->  00:05:51,630
Why are we dropping out when we hit null?
114

114

00:05:51,630  -->  00:05:53,690
And the reason that we're doing that is,
115

115

00:05:53,690  -->  00:05:56,160
when we use linear probing, which means
116

116

00:05:56,160  -->  00:05:59,600
that we're incrementing the index we're checking by one,
117

117

00:05:59,600  -->  00:06:02,670
we always end up putting the item
118

118

00:06:02,670  -->  00:06:07,670
in the first available position after the hashedKey value.
119

119

00:06:07,790  -->  00:06:10,680
So let's say our hashedKey value is five
120

120

00:06:10,680  -->  00:06:12,710
and we find out that five is full,
121

121

00:06:12,710  -->  00:06:15,450
so we increment five to one and we get six
122

122

00:06:15,450  -->  00:06:17,350
and if we find out six is full,
123

123

00:06:17,350  -->  00:06:19,520
we increment to one and get seven,
124

124

00:06:19,520  -->  00:06:22,020
we find out seven is full, we increment to one,
125

125

00:06:22,020  -->  00:06:24,160
we get eight and oh, it's empty.
126

126

00:06:24,160  -->  00:06:28,920
If any of those previous positions, five, six, seven
127

127

00:06:28,920  -->  00:06:31,470
had been empty, then we would have put the employee
128

128

00:06:31,470  -->  00:06:33,260
into one of those positions,
129

129

00:06:33,260  -->  00:06:35,350
we wouldn't have made it to position eight.
130

130

00:06:35,350  -->  00:06:36,940
So when we use linear probing,
131

131

00:06:36,940  -->  00:06:39,270
we always end up putting the item
132

132

00:06:39,270  -->  00:06:41,700
in the first available position and that's even true
133

133

00:06:41,700  -->  00:06:43,990
if we have to wrap around to the front.
134

134

00:06:43,990  -->  00:06:47,090
If all of the positions from the hashed value of the key
135

135

00:06:47,090  -->  00:06:48,640
to the end of the array are full
136

136

00:06:48,640  -->  00:06:50,430
and we wrap around to the front,
137

137

00:06:50,430  -->  00:06:52,410
we're still gonna be putting the item
138

138

00:06:52,410  -->  00:06:55,230
in the first available position.
139

139

00:06:55,230  -->  00:06:58,560
And so, when it comes to getting the item back,
140

140

00:06:58,560  -->  00:07:03,430
so providing the key and we always use linear probing again,
141

141

00:07:03,430  -->  00:07:05,790
if we hit a null value
142

142

00:07:05,790  -->  00:07:10,020
before we have found the item we're looking for,
143

143

00:07:10,020  -->  00:07:13,340
we can be certain that the item is not in the table,
144

144

00:07:13,340  -->  00:07:14,280
and when I say the item,
145

145

00:07:14,280  -->  00:07:17,550
I mean that was put in with the key that we were provided.
146

146

00:07:17,550  -->  00:07:20,760
Now right now, our implementation, as I said,
147

147

00:07:20,760  -->  00:07:23,630
it doesn't really have a bug in it, but it's not complete,
148

148

00:07:23,630  -->  00:07:26,030
we're not fully handling removes,
149

149

00:07:26,030  -->  00:07:28,070
and so, that's why we have the situation
150

150

00:07:28,070  -->  00:07:29,580
where we can't get Mary,
151

151

00:07:29,580  -->  00:07:31,430
but as you'll see in the next video,
152

152

00:07:31,430  -->  00:07:33,500
we're gonna discuss two ways
153

153

00:07:33,500  -->  00:07:37,160
that we can deal with the problem that I described
154

154

00:07:37,160  -->  00:07:39,540
and once we've dealt with the problem
155

155

00:07:39,540  -->  00:07:41,420
using one of those ways,
156

156

00:07:41,420  -->  00:07:43,490
we're never going to be in a position
157

157

00:07:43,490  -->  00:07:45,880
when we're searching for a key
158

158

00:07:45,880  -->  00:07:48,350
that was previously added to the table,
159

159

00:07:48,350  -->  00:07:49,950
we're never gonna be in the position
160

160

00:07:49,950  -->  00:07:53,290
where it's possible that there's an empty spot
161

161

00:07:53,290  -->  00:07:55,550
between the hashed value of the key
162

162

00:07:55,550  -->  00:07:57,530
and where we ended up putting the item,
163

163

00:07:57,530  -->  00:07:59,090
due to linear probing.
164

164

00:07:59,090  -->  00:08:02,280
So once we've fixed this implementation,
165

165

00:08:02,280  -->  00:08:05,890
or rather, completed this implementation,
166

166

00:08:05,890  -->  00:08:09,230
we'll never be in a situation where we can have a null value
167

167

00:08:09,230  -->  00:08:12,370
in between the hashed value of the key
168

168

00:08:12,370  -->  00:08:16,340
and the index that we located by using linear probing
169

169

00:08:16,340  -->  00:08:18,610
and you'll learn why in the next video.
170

170

00:08:18,610  -->  00:08:22,080
And so, that's why it's okay in this loop,
171

171

00:08:22,080  -->  00:08:24,630
to drop out as soon as we hit null,
172

172

00:08:24,630  -->  00:08:28,110
because we start at the hashedKey up here
173

173

00:08:28,110  -->  00:08:31,230
and then our first probe value will either be zero
174

174

00:08:31,230  -->  00:08:32,810
if we're wrapping around right away
175

175

00:08:32,810  -->  00:08:35,530
or one greater than the hashedKey
176

176

00:08:35,530  -->  00:08:37,430
and if that position is null,
177

177

00:08:37,430  -->  00:08:40,700
then we know that there isn't an employee in the table
178

178

00:08:40,700  -->  00:08:42,770
with the key that we're looking for,
179

179

00:08:42,770  -->  00:08:46,270
because if there was, there would be no null values
180

180

00:08:46,270  -->  00:08:50,490
between the original hashed position
181

181

00:08:50,490  -->  00:08:53,070
and the position where we inserted the employee.
182

182

00:08:53,070  -->  00:08:55,950
Now I know that's not true right now with our implementation
183

183

00:08:55,950  -->  00:08:57,570
and that's why we can't find Mary,
184

184

00:08:57,570  -->  00:09:00,600
it's because we have to do more in our remove method
185

185

00:09:00,600  -->  00:09:01,790
and so, in the next video,
186

186

00:09:01,790  -->  00:09:03,710
hopefully this will become clearer.
187

187

00:09:03,710  -->  00:09:05,800
And so, the moment we hit a null value,
188

188

00:09:05,800  -->  00:09:08,210
we don't have to keep searching the entire array,
189

189

00:09:08,210  -->  00:09:11,040
we don't have to say, okay, well Mary's not in position six,
190

190

00:09:11,040  -->  00:09:13,010
but maybe she's in position seven,
191

191

00:09:13,010  -->  00:09:16,070
because once we fix the remove method,
192

192

00:09:16,070  -->  00:09:19,170
so it's doing more work, that'll never happen,
193

193

00:09:19,170  -->  00:09:21,340
we'll never have a null value
194

194

00:09:21,340  -->  00:09:24,570
between the original value of the hashedKey
195

195

00:09:24,570  -->  00:09:27,640
and the position where we ultimately placed Mary.
196

196

00:09:27,640  -->  00:09:29,720
Okay, so that's just a quick addendum.
197

197

00:09:29,720  -->  00:09:31,570
Let's move on to the next video
198

198

00:09:31,570  -->  00:09:35,670
where we're going to do more work in the remove method,
199

199

00:09:35,670  -->  00:09:39,803
so that this part of the loop is actually valid.
