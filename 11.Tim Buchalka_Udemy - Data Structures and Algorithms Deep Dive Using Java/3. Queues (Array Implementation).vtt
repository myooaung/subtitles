WEBVTT
1
1

00:00:00.341  -->  00:00:02.924
(bright music)
2

2

00:00:05.300  -->  00:00:07.080
<v Narrator>Alright, so let's go ahead and implement</v>
3

3

00:00:07.080  -->  00:00:10.000
a queue and we're going to use an array.
4

4

00:00:10.000  -->  00:00:11.560
So I've created a project.
5

5

00:00:11.560  -->  00:00:12.600
I'm putting the code
6

6

00:00:12.600  -->  00:00:16.050
into package academy.learningprogramming.queues
7

7

00:00:16.050  -->  00:00:18.740
and I've copied over the usual employee class.
8

8

00:00:18.740  -->  00:00:20.200
No changes there.
9

9

00:00:20.200  -->  00:00:21.680
So the first thing I'll do is create
10

10

00:00:21.680  -->  00:00:22.880
a class for the queue.
11

11

00:00:22.880  -->  00:00:25.720
So I'll say new java class
12

12

00:00:25.720  -->  00:00:27.953
and I'm gonna call it Array Queue.
13

13

00:00:29.690  -->  00:00:32.240
And then we need three fields in this queue.
14

14

00:00:32.240  -->  00:00:34.040
We need one for the Array.
15

15

00:00:34.040  -->  00:00:36.530
We need one that's going to track
16

16

00:00:36.530  -->  00:00:37.620
the front of the queue.
17

17

00:00:37.620  -->  00:00:39.400
And we need one that's going to track
18

18

00:00:39.400  -->  00:00:40.690
the back of the queue.
19

19

00:00:40.690  -->  00:00:42.910
So I'll say private employee
20

20

00:00:45.600  -->  00:00:47.160
queue,
21

21

00:00:47.160  -->  00:00:51.920
private int front, and private int back.
22

22

00:00:51.920  -->  00:00:54.070
Now as usual I'm not using generics.
23

23

00:00:54.070  -->  00:00:57.820
I could've created a queue and used generics
24

24

00:00:57.820  -->  00:00:59.010
and then the queue can be used
25

25

00:00:59.010  -->  00:01:00.140
with any type of object,
26

26

00:01:00.140  -->  00:01:01.410
but I want us to just focus
27

27

00:01:01.410  -->  00:01:02.970
on the queue implementation.
28

28

00:01:02.970  -->  00:01:04.670
So the front and back fields
29

29

00:01:04.670  -->  00:01:06.320
will initially be zero,
30

30

00:01:06.320  -->  00:01:08.470
just as top was initially zero
31

31

00:01:08.470  -->  00:01:09.590
for the top of the stack.
32

32

00:01:09.590  -->  00:01:10.810
So when we first start out,
33

33

00:01:10.810  -->  00:01:12.800
front and back will both point to zero
34

34

00:01:12.800  -->  00:01:14.880
and so we don't need to initialise those
35

35

00:01:14.880  -->  00:01:15.890
in the constructor.
36

36

00:01:15.890  -->  00:01:19.040
We just need to create our array.
37

37

00:01:19.040  -->  00:01:21.623
So I'll say public array queue.
38

38

00:01:23.060  -->  00:01:24.970
And we'll let the caller tell us
39

39

00:01:24.970  -->  00:01:26.740
the maximum number of elements
40

40

00:01:26.740  -->  00:01:28.490
they want in the queue.
41

41

00:01:28.490  -->  00:01:31.800
And we'll say queue equals new employee
42

42

00:01:32.890  -->  00:01:33.783
capacity.
43

43

00:01:36.320  -->  00:01:37.610
Alright, so now let's talk
44

44

00:01:37.610  -->  00:01:39.410
about adding an element.
45

45

00:01:39.410  -->  00:01:41.210
We're going to want to add elements
46

46

00:01:41.210  -->  00:01:43.030
to the back of the queue.
47

47

00:01:43.030  -->  00:01:45.810
And we'll have to worry about resizing the array
48

48

00:01:45.810  -->  00:01:47.140
when the queue is full.
49

49

00:01:47.140  -->  00:01:48.690
So for this implementation,
50

50

00:01:48.690  -->  00:01:51.870
the front element is always at index front
51

51

00:01:51.870  -->  00:01:53.790
and the back element is always
52

52

00:01:53.790  -->  00:01:56.160
at index back minus one.
53

53

00:01:56.160  -->  00:01:58.510
So if you remember when we implemented stacks
54

54

00:01:58.510  -->  00:02:00.630
the top field was always pointing
55

55

00:02:00.630  -->  00:02:03.500
to the next available position in the stack.
56

56

00:02:03.500  -->  00:02:05.820
Well, it's the same with the back field.
57

57

00:02:05.820  -->  00:02:07.730
The back field will always be pointing
58

58

00:02:07.730  -->  00:02:10.140
to the next available position in the queue.
59

59

00:02:10.140  -->  00:02:12.080
And so, if the back is, let's say,
60

60

00:02:12.080  -->  00:02:15.080
pointing to position three then that means
61

61

00:02:15.080  -->  00:02:17.180
that the end of the queue is actually
62

62

00:02:17.180  -->  00:02:18.450
at position two.
63

63

00:02:18.450  -->  00:02:19.760
And so the end of the queue
64

64

00:02:19.760  -->  00:02:22.810
is actually located at position back minus one.
65

65

00:02:22.810  -->  00:02:24.310
And back is where we would add
66

66

00:02:24.310  -->  00:02:26.510
the next element that's coming into the queue.
67

67

00:02:26.510  -->  00:02:28.940
So when there's no elements on the queue
68

68

00:02:28.940  -->  00:02:30.310
and we add an item,
69

69

00:02:30.310  -->  00:02:32.570
we're gonna add it at position zero
70

70

00:02:32.570  -->  00:02:34.150
because when we first create
71

71

00:02:34.150  -->  00:02:36.710
this instance front and back are both zero
72

72

00:02:36.710  -->  00:02:38.350
and then we'll increment back to one
73

73

00:02:38.350  -->  00:02:40.820
because one will be the next available position.
74

74

00:02:40.820  -->  00:02:42.990
And so after adding the first item
75

75

00:02:42.990  -->  00:02:45.110
front will be zero and back will be one.
76

76

00:02:45.110  -->  00:02:48.530
If we add another item, front will still be zero.
77

77

00:02:48.530  -->  00:02:50.390
We'll add the item into position one
78

78

00:02:50.390  -->  00:02:52.030
and then we'll increment back to two.
79

79

00:02:52.030  -->  00:02:53.890
And so, when we add an item
80

80

00:02:53.890  -->  00:02:55.900
the front field never changes
81

81

00:02:55.900  -->  00:02:58.240
because we always add items to the back.
82

82

00:02:58.240  -->  00:03:00.070
Alright, so let's implement the method
83

83

00:03:00.070  -->  00:03:01.650
for adding an item to the queue.
84

84

00:03:01.650  -->  00:03:04.220
So we'll say public void add
85

85

00:03:04.220  -->  00:03:05.870
and we're gonna accept the employee
86

86

00:03:05.870  -->  00:03:07.063
that we wanna add.
87

87

00:03:10.670  -->  00:03:11.820
And the first thing we're gonna do
88

88

00:03:11.820  -->  00:03:13.360
is check whether the queue is full.
89

89

00:03:13.360  -->  00:03:16.180
Now the queue will be full if back equals
90

90

00:03:16.180  -->  00:03:17.300
the length of the queue.
91

91

00:03:17.300  -->  00:03:19.600
Let's say we create a queue of ten.
92

92

00:03:19.600  -->  00:03:21.420
Well when back equals nine,
93

93

00:03:21.420  -->  00:03:23.060
the next available position in the queue
94

94

00:03:23.060  -->  00:03:24.380
is nine and that's fine.
95

95

00:03:24.380  -->  00:03:25.490
We can put an item in there,
96

96

00:03:25.490  -->  00:03:27.420
but then we'd increment back to ten
97

97

00:03:27.420  -->  00:03:29.800
and the next available position would be ten.
98

98

00:03:29.800  -->  00:03:32.060
That would be an index out of bounds exception.
99

99

00:03:32.060  -->  00:03:35.030
So once the back equals the length of the queue
100

100

00:03:35.030  -->  00:03:37.310
we need to resize the array.
101

101

00:03:37.310  -->  00:03:39.940
So we'll say if back equals
102

102

00:03:41.200  -->  00:03:42.343
queue.length.
103

103

00:03:44.070  -->  00:03:46.270
And we're gonna resize the array exactly
104

104

00:03:46.270  -->  00:03:47.820
the same way we did it for stacks.
105

105

00:03:47.820  -->  00:03:49.290
So we'll say employee
106

106

00:03:50.670  -->  00:03:52.000
new array
107

107

00:03:52.000  -->  00:03:54.800
equals new employee.
108

108

00:03:54.800  -->  00:03:57.200
And we're gonna double the current size,
109

109

00:03:57.200  -->  00:03:58.450
so two times
110

110

00:04:00.780  -->  00:04:01.713
queue.length.
111

111

00:04:03.450  -->  00:04:06.240
And then we need to copy the existing items
112

112

00:04:06.240  -->  00:04:07.890
on the queue over to the new array.
113

113

00:04:07.890  -->  00:04:10.760
So we'll say system.arraycopy.
114

114

00:04:10.760  -->  00:04:12.360
We're gonna copy from the queue.
115

115

00:04:12.360  -->  00:04:14.290
We're gonna start from the beginning.
116

116

00:04:14.290  -->  00:04:16.600
We're gonna copy into the new array,
117

117

00:04:16.600  -->  00:04:17.890
starting at the beginning.
118

118

00:04:17.890  -->  00:04:22.153
And we want to copy queue.length elements.
119

119

00:04:24.110  -->  00:04:25.410
Then finally, we're going
120

120

00:04:25.410  -->  00:04:28.683
to say queue equals new array.
121

121

00:04:30.530  -->  00:04:32.490
And so, so far this is looking exactly
122

122

00:04:32.490  -->  00:04:35.060
like the push method.
123

123

00:04:35.060  -->  00:04:38.810
And then once we're sure that the back field
124

124

00:04:38.810  -->  00:04:41.450
isn't gonna point to an invalid index,
125

125

00:04:41.450  -->  00:04:42.440
we just go ahead
126

126

00:04:42.440  -->  00:04:44.640
and assign the new employee to back.
127

127

00:04:44.640  -->  00:04:47.760
So queue back
128

128

00:04:47.760  -->  00:04:49.313
equals employee.
129

129

00:04:51.120  -->  00:04:53.643
And then finally, we want to increment back.
130

130

00:04:54.670  -->  00:04:55.503
And that's it.
131

131

00:04:55.503  -->  00:04:56.650
That's our add method.
132

132

00:04:56.650  -->  00:04:58.130
We check whether the queue is full.
133

133

00:04:58.130  -->  00:05:00.600
If it is, we resize the array.
134

134

00:05:00.600  -->  00:05:02.730
We assign the employee into what back
135

135

00:05:02.730  -->  00:05:04.810
is pointing to because back always points
136

136

00:05:04.810  -->  00:05:06.240
to the next available position
137

137

00:05:06.240  -->  00:05:08.670
in the queue, and then we increment back.
138

138

00:05:08.670  -->  00:05:10.800
Okay, so now let's remove
139

139

00:05:10.800  -->  00:05:13.170
an element from the queue.
140

140

00:05:13.170  -->  00:05:15.820
So we'll say public employee
141

141

00:05:18.170  -->  00:05:19.330
remove.
142

142

00:05:19.330  -->  00:05:21.420
We always remove the first item on the queue
143

143

00:05:21.420  -->  00:05:23.580
so we don't need to pass anything.
144

144

00:05:23.580  -->  00:05:26.020
Now, the first thing we need to check is whether
145

145

00:05:26.020  -->  00:05:27.260
the queue is empty.
146

146

00:05:27.260  -->  00:05:28.850
And how will we do that?
147

147

00:05:28.850  -->  00:05:30.470
How will we check whether the queue is empty?
148

148

00:05:30.470  -->  00:05:32.850
Because as we add and remove employees
149

149

00:05:32.850  -->  00:05:35.630
the front and back positions will be changing.
150

150

00:05:35.630  -->  00:05:37.070
Well, we should be able
151

151

00:05:37.070  -->  00:05:39.200
to subtract front from back
152

152

00:05:39.200  -->  00:05:40.920
and that will give us the number
153

153

00:05:40.920  -->  00:05:42.060
of items in the queue.
154

154

00:05:42.060  -->  00:05:44.600
Remember that back is always one position greater
155

155

00:05:44.600  -->  00:05:45.570
than the end of the queue.
156

156

00:05:45.570  -->  00:05:47.870
So let's say, when we first create the queue
157

157

00:05:47.870  -->  00:05:49.650
we come in and we add our first item.
158

158

00:05:49.650  -->  00:05:53.170
So, we just saw that when we add our first item
159

159

00:05:53.170  -->  00:05:55.030
at the end we'll increment back to one
160

160

00:05:55.030  -->  00:05:56.510
and front is zero.
161

161

00:05:56.510  -->  00:05:58.960
So, we have one item on the queue.
162

162

00:05:58.960  -->  00:06:01.080
Back is one, front is zero.
163

163

00:06:01.080  -->  00:06:03.380
Back minus front would be one minus zero,
164

164

00:06:03.380  -->  00:06:04.213
which is one.
165

165

00:06:04.213  -->  00:06:05.680
So we have one item on the queue.
166

166

00:06:05.680  -->  00:06:07.670
If we came in and added another item,
167

167

00:06:07.670  -->  00:06:09.550
back would be incremented to two.
168

168

00:06:09.550  -->  00:06:11.360
We don't touch the front pointer
169

169

00:06:11.360  -->  00:06:12.960
when we add an employee
170

170

00:06:12.960  -->  00:06:14.200
because we're always working
171

171

00:06:14.200  -->  00:06:15.340
at the back of the queue.
172

172

00:06:15.340  -->  00:06:17.950
So if we came in and added a second employee,
173

173

00:06:17.950  -->  00:06:19.860
back would be incremented to two,
174

174

00:06:19.860  -->  00:06:21.600
front would still be zero.
175

175

00:06:21.600  -->  00:06:23.120
Two minus zero is two.
176

176

00:06:23.120  -->  00:06:24.600
We have two items on the queue.
177

177

00:06:24.600  -->  00:06:26.750
If we then removed an item from the queue,
178

178

00:06:26.750  -->  00:06:28.640
we're not gonna touch the back pointer
179

179

00:06:28.640  -->  00:06:30.140
because we always take items off
180

180

00:06:30.140  -->  00:06:30.973
the front of the queue.
181

181

00:06:30.973  -->  00:06:33.030
So what we'll do is increment,
182

182

00:06:33.030  -->  00:06:33.990
as you'll see in a minute,
183

183

00:06:33.990  -->  00:06:35.720
we'll increment the front of the queue.
184

184

00:06:35.720  -->  00:06:37.440
So we'll increment front to one.
185

185

00:06:37.440  -->  00:06:38.410
And so at that point
186

186

00:06:38.410  -->  00:06:40.330
we'd have two minus one is one.
187

187

00:06:40.330  -->  00:06:41.250
And so we started out
188

188

00:06:41.250  -->  00:06:42.670
with two employees on the queue,
189

189

00:06:42.670  -->  00:06:44.860
we pulled one off and we have one left.
190

190

00:06:44.860  -->  00:06:47.380
So basically, we can get the size
191

191

00:06:47.380  -->  00:06:49.680
by subtracting front from back.
192

192

00:06:49.680  -->  00:06:52.143
So I'm gonna put that into it's own method.
193

193

00:06:53.220  -->  00:06:54.870
So I'm gonna say public
194

194

00:06:56.350  -->  00:06:57.570
int size
195

195

00:06:59.240  -->  00:07:02.610
and we're gonna return back minus front.
196

196

00:07:02.610  -->  00:07:04.340
Now if your really astute,
197

197

00:07:04.340  -->  00:07:05.840
you may have noticed something
198

198

00:07:05.840  -->  00:07:08.130
a little bit weird about the add method.
199

199

00:07:08.130  -->  00:07:09.740
Don't worry, we're gonna come back to that.
200

200

00:07:09.740  -->  00:07:11.700
So, in the remove method
201

201

00:07:11.700  -->  00:07:14.393
we're gonna say if the size is zero,
202

202

00:07:16.200  -->  00:07:18.510
meaning there's nothing on the queue,
203

203

00:07:18.510  -->  00:07:20.520
then we're going to throw a new
204

204

00:07:20.520  -->  00:07:23.270
no such element exception,
205

205

00:07:23.270  -->  00:07:26.430
and that's in the java.util package.
206

206

00:07:26.430  -->  00:07:28.090
So if you try to remove something
207

207

00:07:28.090  -->  00:07:28.960
from the empty queue
208

208

00:07:28.960  -->  00:07:31.090
we're gonna throw an exception.
209

209

00:07:31.090  -->  00:07:32.460
If that's not the case
210

210

00:07:32.460  -->  00:07:33.760
and there is something on the queue,
211

211

00:07:33.760  -->  00:07:35.350
well we always take elements
212

212

00:07:35.350  -->  00:07:36.450
from the front of the queue,
213

213

00:07:36.450  -->  00:07:39.200
so we're gonna say employee, employee
214

214

00:07:40.500  -->  00:07:42.230
equals queue front
215

215

00:07:43.280  -->  00:07:46.193
because that's the employee we're going to remove.
216

216

00:07:47.130  -->  00:07:49.730
Then we're gonna null out queue front.
217

217

00:07:49.730  -->  00:07:52.200
This is just doing a bit of clean up.
218

218

00:07:52.200  -->  00:07:54.940
We're then going to increment front
219

219

00:07:54.940  -->  00:07:56.730
because if we started out,
220

220

00:07:56.730  -->  00:07:59.000
let's say, front is one,
221

221

00:07:59.000  -->  00:08:01.610
we want to remove the employee at position one.
222

222

00:08:01.610  -->  00:08:04.300
Well after we've done that the new front of the queue will
223

223

00:08:04.300  -->  00:08:06.270
be two because the new front will be
224

224

00:08:06.270  -->  00:08:08.120
the next employee in the queue.
225

225

00:08:08.120  -->  00:08:10.410
Now there's a bit of an optimization
226

226

00:08:10.410  -->  00:08:12.140
we can do here at this point.
227

227

00:08:12.140  -->  00:08:13.820
At this point we can check whether
228

228

00:08:13.820  -->  00:08:14.900
the size is zero.
229

229

00:08:14.900  -->  00:08:18.110
If we've removed the only item on the queue,
230

230

00:08:18.110  -->  00:08:19.200
so if
231

231

00:08:20.140  -->  00:08:21.150
size
232

232

00:08:23.130  -->  00:08:25.080
equals zero,
233

233

00:08:25.080  -->  00:08:27.090
then we can reset the front
234

234

00:08:27.090  -->  00:08:28.540
and back positions back
235

235

00:08:28.540  -->  00:08:29.680
to the beginning of the array.
236

236

00:08:29.680  -->  00:08:31.670
So we can say front equals zero
237

237

00:08:31.670  -->  00:08:33.373
and back equals zero.
238

238

00:08:34.430  -->  00:08:37.130
So, if after pulling off the employee
239

239

00:08:37.130  -->  00:08:38.380
there's nothing left on the queue,
240

240

00:08:38.380  -->  00:08:40.230
we'll just reset the front and back.
241

241

00:08:40.230  -->  00:08:41.550
So it's like resetting the queue
242

242

00:08:41.550  -->  00:08:43.000
to an empty queue.
243

243

00:08:43.000  -->  00:08:44.290
And then finally, of course,
244

244

00:08:44.290  -->  00:08:45.930
we wanna return the employee
245

245

00:08:45.930  -->  00:08:47.570
that we pulled off the queue.
246

246

00:08:47.570  -->  00:08:49.440
And so, to remove something from the queue
247

247

00:08:49.440  -->  00:08:51.380
we first check to see if the queue is empty,
248

248

00:08:51.380  -->  00:08:52.920
and if it is we throw an exception
249

249

00:08:52.920  -->  00:08:53.780
and we're done.
250

250

00:08:53.780  -->  00:08:56.890
Otherwise, we save the employee at the front
251

251

00:08:56.890  -->  00:08:58.660
of the queue into employee.
252

252

00:08:58.660  -->  00:09:00.540
We null out that position in the queue.
253

253

00:09:00.540  -->  00:09:01.740
Just a little bit of clean up.
254

254

00:09:01.740  -->  00:09:03.870
And then we increment the front field
255

255

00:09:03.870  -->  00:09:06.230
because the new front of the queue is going
256

256

00:09:06.230  -->  00:09:07.810
to be at the front plus plus.
257

257

00:09:07.810  -->  00:09:09.440
And then we check the size
258

258

00:09:09.440  -->  00:09:11.540
and if there's nothing left on the queue,
259

259

00:09:11.540  -->  00:09:14.050
so basically we remove the only employee,
260

260

00:09:14.050  -->  00:09:16.210
then we set the front and back to zero.
261

261

00:09:16.210  -->  00:09:19.200
So we're basically resetting the queue.
262

262

00:09:19.200  -->  00:09:21.770
And finally, of course, we return the employee.
263

263

00:09:21.770  -->  00:09:24.313
And so we still have our peek method.
264

264

00:09:25.150  -->  00:09:28.030
So I'm going to say public employee
265

265

00:09:29.680  -->  00:09:30.513
peek.
266

266

00:09:31.870  -->  00:09:34.270
And just like with
267

267

00:09:34.270  -->  00:09:35.150
the remove,
268

268

00:09:35.150  -->  00:09:36.530
we're gonna check if the queue is empty
269

269

00:09:36.530  -->  00:09:38.250
and if it is we're gonna throw an exception
270

270

00:09:38.250  -->  00:09:40.373
so I just copy the code from there.
271

271

00:09:42.150  -->  00:09:43.710
Now if the queue isn't empty
272

272

00:09:43.710  -->  00:09:45.280
we just wanna return the employee
273

273

00:09:45.280  -->  00:09:46.330
at the front of the queue,
274

274

00:09:46.330  -->  00:09:48.010
but we do not want to remove
275

275

00:09:48.010  -->  00:09:49.190
the employee from the queue.
276

276

00:09:49.190  -->  00:09:51.240
Remember, when we peek at a stack
277

277

00:09:51.240  -->  00:09:52.740
we return the top of the stack,
278

278

00:09:52.740  -->  00:09:54.580
but we don't change the stack in any way.
279

279

00:09:54.580  -->  00:09:56.020
It's the same thing with the queue.
280

280

00:09:56.020  -->  00:09:58.710
We return the employee at the front of the queue,
281

281

00:09:58.710  -->  00:10:01.020
but we don't change the queue in any way.
282

282

00:10:01.020  -->  00:10:04.550
So all we have to do is say return queue front
283

283

00:10:04.550  -->  00:10:05.750
and we're done.
284

284

00:10:05.750  -->  00:10:07.940
We don't wanna change the front field.
285

285

00:10:07.940  -->  00:10:10.410
I'll just delete that blank line there.
286

286

00:10:10.410  -->  00:10:11.243
And that's it.
287

287

00:10:11.243  -->  00:10:13.720
That's our queue implementation.
288

288

00:10:13.720  -->  00:10:15.530
Now one final method I'll add
289

289

00:10:15.530  -->  00:10:16.860
is a method to print the queue.
290

290

00:10:16.860  -->  00:10:18.290
So that when we start playing around
291

291

00:10:18.290  -->  00:10:19.430
with our implementation,
292

292

00:10:19.430  -->  00:10:21.290
we can print out what's on the queue.
293

293

00:10:21.290  -->  00:10:24.513
So I'll say public void print queue.
294

294

00:10:26.556  -->  00:10:27.670
And their queue is in array
295

295

00:10:27.670  -->  00:10:29.010
so this should be fairly simple.
296

296

00:10:29.010  -->  00:10:30.570
We just have to keep in mind that
297

297

00:10:30.570  -->  00:10:31.720
if we're gonna print the queue
298

298

00:10:31.720  -->  00:10:35.050
from front to back, front might not be zero.
299

299

00:10:35.050  -->  00:10:37.030
So, we'll say
300

300

00:10:37.030  -->  00:10:39.873
for int i equals front,
301

301

00:10:40.890  -->  00:10:42.550
i less than back,
302

302

00:10:42.550  -->  00:10:44.023
i plus plus.
303

303

00:10:46.530  -->  00:10:50.080
And I'll just say system dot out dot print line
304

304

00:10:50.080  -->  00:10:51.363
queue i.
305

305

00:10:53.520  -->  00:10:55.740
Now remember that the back points
306

306

00:10:55.740  -->  00:10:57.450
to the next available position
307

307

00:10:57.450  -->  00:10:58.970
so the end of the queue is actually
308

308

00:10:58.970  -->  00:11:00.000
a back minus one,
309

309

00:11:00.000  -->  00:11:03.030
so we only want to increment i until i
310

310

00:11:03.030  -->  00:11:04.320
is less than back.
311

311

00:11:04.320  -->  00:11:05.630
When i equals back,
312

312

00:11:05.630  -->  00:11:08.670
we're actually one beyond the back of the queue.
313

313

00:11:08.670  -->  00:11:10.170
Okay, so now that we finished
314

314

00:11:10.170  -->  00:11:12.820
our implementation let's go to the main method.
315

315

00:11:12.820  -->  00:11:14.970
I've already added the code to create
316

316

00:11:14.970  -->  00:11:17.183
our usual five employees.
317

317

00:11:18.270  -->  00:11:19.500
So let's create our queue.
318

318

00:11:19.500  -->  00:11:21.840
I'll say array queue.
319

319

00:11:21.840  -->  00:11:24.280
Queue equals new array queue.
320

320

00:11:24.280  -->  00:11:25.910
And I'll make it ten just like I did
321

321

00:11:25.910  -->  00:11:27.540
with the stack.
322

322

00:11:27.540  -->  00:11:29.600
And let's add employees to the queue.
323

323

00:11:29.600  -->  00:11:32.143
So I'll say queue.add Jane Jones.
324

324

00:11:33.280  -->  00:11:35.533
Queue dot add John Doe.
325

325

00:11:37.340  -->  00:11:39.793
Queue.add Mary Smith.
326

326

00:11:41.120  -->  00:11:43.410
Queue.add Mike Wilson.
327

327

00:11:43.410  -->  00:11:47.373
And finally, queue.add Bill End.
328

328

00:11:48.920  -->  00:11:50.640
And let's print our queue.
329

329

00:11:50.640  -->  00:11:52.020
Queue.print queue.
330

330

00:11:52.020  -->  00:11:53.463
So let's go ahead and run.
331

331

00:11:57.740  -->  00:11:59.540
And we'll see our five employees.
332

332

00:11:59.540  -->  00:12:02.520
Now this time they're printed out in the order
333

333

00:12:02.520  -->  00:12:06.030
that we added them because this isn't a stack
334

334

00:12:06.030  -->  00:12:09.450
so we don't see the items in reverse order.
335

335

00:12:09.450  -->  00:12:11.320
We added Jane to the queue first
336

336

00:12:11.320  -->  00:12:12.970
so she is at the front of the queue
337

337

00:12:12.970  -->  00:12:14.090
and then we added John
338

338

00:12:14.090  -->  00:12:15.820
so he's second in the queue,
339

339

00:12:15.820  -->  00:12:18.160
then Mary, then Mike, then Bill.
340

340

00:12:18.160  -->  00:12:20.960
So let's remove two employees.
341

341

00:12:20.960  -->  00:12:23.540
And we expect to remove Jane and John
342

342

00:12:23.540  -->  00:12:25.180
because Jane is first in the queue
343

343

00:12:25.180  -->  00:12:26.020
and John is second.
344

344

00:12:26.020  -->  00:12:27.820
So we'll say queue.remove
345

345

00:12:29.030  -->  00:12:30.570
and we'll do it again.
346

346

00:12:30.570  -->  00:12:32.750
And then let's print our queue.
347

347

00:12:32.750  -->  00:12:35.460
I'm going to comment out that print queue.
348

348

00:12:35.460  -->  00:12:36.423
So let's run.
349

349

00:12:39.000  -->  00:12:39.970
And we'll see that we only
350

350

00:12:39.970  -->  00:12:41.770
have three employees left on the queue.
351

351

00:12:41.770  -->  00:12:42.870
Mary, Mike and Bill.
352

352

00:12:42.870  -->  00:12:44.750
So Jane and John have been removed
353

353

00:12:44.750  -->  00:12:46.560
because it's first in first out.
354

354

00:12:46.560  -->  00:12:49.250
So Jane was first in so she's first out.
355

355

00:12:49.250  -->  00:12:51.970
And then John was second in so he's the next one
356

356

00:12:51.970  -->  00:12:53.310
to be taken off the queue.
357

357

00:12:53.310  -->  00:12:55.410
Okay, so lets peek at our queue
358

358

00:12:55.410  -->  00:12:57.003
and we should see Mary.
359

359

00:12:58.150  -->  00:13:02.460
So I'll say system.out.print line
360

360

00:13:02.460  -->  00:13:03.803
queue.peek.
361

361

00:13:05.490  -->  00:13:07.370
And lets print our queue after that
362

362

00:13:07.370  -->  00:13:09.330
to show that the queue wasn't changed.
363

363

00:13:09.330  -->  00:13:13.260
So I'm going to comment out that print queue.
364

364

00:13:13.260  -->  00:13:15.120
So we're gonna peek at Mary
365

365

00:13:15.120  -->  00:13:17.700
and then we should see the exact same print out
366

366

00:13:17.700  -->  00:13:19.260
for the queue because when you peek
367

367

00:13:19.260  -->  00:13:20.560
you don't change the queue.
368

368

00:13:20.560  -->  00:13:21.483
So let's run.
369

369

00:13:23.030  -->  00:13:24.880
And we'll see Mary printed twice.
370

370

00:13:24.880  -->  00:13:26.210
This is from the peek
371

371

00:13:26.210  -->  00:13:28.830
and then this part is the print queue.
372

372

00:13:28.830  -->  00:13:30.060
So we peeked at Mary.
373

373

00:13:30.060  -->  00:13:32.480
We were able to see what the first employee
374

374

00:13:32.480  -->  00:13:33.390
on the queue is,
375

375

00:13:33.390  -->  00:13:35.100
but we did not change the queue.
376

376

00:13:35.100  -->  00:13:37.240
Alright, so just for fun lets remove
377

377

00:13:37.240  -->  00:13:39.370
the remaining three employees
378

378

00:13:39.370  -->  00:13:40.570
and then print our queue.
379

379

00:13:40.570  -->  00:13:43.880
So I'll comment out that there
380

380

00:13:43.880  -->  00:13:47.470
and I'm gonna add three more queue.removes.
381

381

00:13:47.470  -->  00:13:50.760
So let me copy this here,
382

382

00:13:50.760  -->  00:13:51.593
paste this here,
383

383

00:13:51.593  -->  00:13:52.943
and I'll add one more.
384

384

00:13:54.050  -->  00:13:55.770
And we should see nothing printed
385

385

00:13:55.770  -->  00:13:57.080
because our queue should be empty.
386

386

00:13:57.080  -->  00:13:57.913
We're just testing
387

387

00:13:57.913  -->  00:13:59.550
to make sure nothing bad happens
388

388

00:13:59.550  -->  00:14:02.083
when we pull the last employee off.
389

389

00:14:03.710  -->  00:14:05.100
And indeed we don't.
390

390

00:14:05.100  -->  00:14:08.960
Now, if we were to do a sixth remove,
391

391

00:14:08.960  -->  00:14:10.610
at this point the queue is empty.
392

392

00:14:10.610  -->  00:14:12.850
So this sixth remove should result
393

393

00:14:12.850  -->  00:14:14.910
in a no such element exception.
394

394

00:14:14.910  -->  00:14:15.903
Let's try it out.
395

395

00:14:17.340  -->  00:14:18.960
And indeed that's what we get.
396

396

00:14:18.960  -->  00:14:21.190
On line twenty-nine,
397

397

00:14:21.190  -->  00:14:24.600
right here, we get the no such element exception.
398

398

00:14:24.600  -->  00:14:27.880
I'm gonna comment out that last queue.remove
399

399

00:14:27.880  -->  00:14:29.910
And let's trying adding an employee now
400

400

00:14:29.910  -->  00:14:31.070
just to make sure that,
401

401

00:14:31.070  -->  00:14:33.330
when we removed the last employee,
402

402

00:14:33.330  -->  00:14:35.280
we properly reset the front and back
403

403

00:14:35.280  -->  00:14:36.960
so there's still room in the queue.
404

404

00:14:36.960  -->  00:14:38.743
Let's add Mike Wilson.
405

405

00:14:40.010  -->  00:14:42.080
And here's a print queue here.
406

406

00:14:42.080  -->  00:14:43.163
So let's run.
407

407

00:14:45.670  -->  00:14:47.560
And only Mike is on the queue.
408

408

00:14:47.560  -->  00:14:49.520
So that's it for implementation.
409

409

00:14:49.520  -->  00:14:52.210
Now, if we go back to array queue
410

410

00:14:52.210  -->  00:14:54.700
and let me just close this down.
411

411

00:14:54.700  -->  00:14:57.470
I said there's something weird about this add
412

412

00:14:57.470  -->  00:15:00.360
and it's actually here when we're checking
413

413

00:15:00.360  -->  00:15:02.320
whether the back equals the queue dot length.
414

414

00:15:02.320  -->  00:15:05.470
That's the check we're using to see whether
415

415

00:15:05.470  -->  00:15:06.620
the queue is full.
416

416

00:15:06.620  -->  00:15:08.520
Now, I want you to think about
417

417

00:15:08.520  -->  00:15:10.450
what would happen in this situation.
418

418

00:15:10.450  -->  00:15:13.200
Let's suppose we add two employees
419

419

00:15:13.200  -->  00:15:14.910
and then we remove an employee
420

420

00:15:14.910  -->  00:15:16.690
and we add another employee
421

421

00:15:16.690  -->  00:15:18.330
and we remove another employee
422

422

00:15:18.330  -->  00:15:19.890
and we add another employee
423

423

00:15:19.890  -->  00:15:21.310
and we keep doing that.
424

424

00:15:21.310  -->  00:15:23.980
So we never have more than two employees
425

425

00:15:23.980  -->  00:15:25.680
on the queue at a time.
426

426

00:15:25.680  -->  00:15:28.880
Do you think that the array should be resized?
427

427

00:15:28.880  -->  00:15:30.450
The answer should be no, right?
428

428

00:15:30.450  -->  00:15:32.880
I mean, if we have a queue of size ten
429

429

00:15:32.880  -->  00:15:36.070
and we only ever have two employees on the queue,
430

430

00:15:36.070  -->  00:15:37.920
the array should never have to be resized.
431

431

00:15:37.920  -->  00:15:39.470
But with our implementation
432

432

00:15:39.470  -->  00:15:40.630
will that be the case?
433

433

00:15:40.630  -->  00:15:41.950
Give this some thought
434

434

00:15:41.950  -->  00:15:43.830
and in the next video we'll take a look
435

435

00:15:43.830  -->  00:15:46.310
at how we can improve this implementation.
436

436

00:15:46.310  -->  00:15:47.263
I'll see you there.
