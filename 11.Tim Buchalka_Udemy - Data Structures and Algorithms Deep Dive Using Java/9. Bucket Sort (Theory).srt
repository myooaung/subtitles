1
1

00:00:00,000  -->  00:00:02,000
(music)
2

2

00:00:05,362  -->  00:00:08,022
<v ->Alright, now that we know about Hash tables</v>
3

3

00:00:08,022  -->  00:00:10,036
and more importantly we understand
4

4

00:00:10,036  -->  00:00:12,139
what hashing is, we can look at another
5

5

00:00:12,139  -->  00:00:14,833
sort algorithm called Bucket sort.
6

6

00:00:14,833  -->  00:00:16,910
Bucket sort uses hashing
7

7

00:00:16,910  -->  00:00:19,940
and it makes assumptions about the data,
8

8

00:00:19,940  -->  00:00:21,703
like radix and counting sort do
9

9

00:00:21,703  -->  00:00:25,301
and because of that it can achieve linear time.
10

10

00:00:25,301  -->  00:00:27,940
It performs best when the hashed values of the items
11

11

00:00:27,940  -->  00:00:30,558
being sorted are evenly distributed,
12

12

00:00:30,558  -->  00:00:31,876
so there aren't many collisions.
13

13

00:00:31,876  -->  00:00:33,471
So when it comes to bucket sort,
14

14

00:00:33,471  -->  00:00:36,334
we are hashing the values that we are sorting.
15

15

00:00:36,334  -->  00:00:39,894
So there is no concept of keys and values.
16

16

00:00:39,894  -->  00:00:42,316
The important thing when it comes to Bucket Sort
17

17

00:00:42,316  -->  00:00:45,974
is the values that we are sorting are hashed.
18

18

00:00:45,974  -->  00:00:47,805
And so how does it work,
19

19

00:00:47,805  -->  00:00:50,753
it starts out by distributing the items
20

20

00:00:50,753  -->  00:00:52,678
that you wanna sort into buckets
21

21

00:00:52,678  -->  00:00:54,492
based on their hashed values
22

22

00:00:54,492  -->  00:00:56,578
and this is called scattering.
23

23

00:00:56,578  -->  00:00:58,463
After the scattering is done,
24

24

00:00:58,463  -->  00:01:00,750
it sorts the items in each bucket
25

25

00:01:00,750  -->  00:01:03,598
and then after every bucket has been sorted
26

26

00:01:03,598  -->  00:01:05,020
it merges the buckets,
27

27

00:01:05,020  -->  00:01:07,159
this is called the gathering phase.
28

28

00:01:07,159  -->  00:01:10,444
And because all of the items in every bucket
29

29

00:01:10,444  -->  00:01:13,025
have been sorted, you can just basically
30

30

00:01:13,025  -->  00:01:16,372
concatenate all the buckets one after the other.
31

31

00:01:16,372  -->  00:01:18,504
And so in the third phase you're gonna be
32

32

00:01:18,504  -->  00:01:20,940
copying the items in the buckets back into
33

33

00:01:20,940  -->  00:01:22,746
the original array.
34

34

00:01:22,746  -->  00:01:25,990
And, this is actually a generalisation of counting sort.
35

35

00:01:25,990  -->  00:01:27,717
Because if you remember counting sort,
36

36

00:01:27,717  -->  00:01:29,534
we went through the values
37

37

00:01:29,534  -->  00:01:31,056
and then we distributed the values
38

38

00:01:31,056  -->  00:01:32,142
into the counting array
39

39

00:01:32,142  -->  00:01:34,049
and then in the final phase we just
40

40

00:01:34,049  -->  00:01:35,580
traversed the counting array
41

41

00:01:35,580  -->  00:01:38,761
and for each value we copied how many we had back
42

42

00:01:38,761  -->  00:01:40,682
into the original array.
43

43

00:01:40,682  -->  00:01:43,061
And so, bucket sort is doing something similar
44

44

00:01:43,061  -->  00:01:45,290
except its distributing the items based on
45

45

00:01:45,290  -->  00:01:48,277
their hashed values and then it has to sort
46

46

00:01:48,277  -->  00:01:50,235
the items in each bucket.
47

47

00:01:50,235  -->  00:01:52,531
But, then it goes over the buckets
48

48

00:01:52,531  -->  00:01:55,874
and copies them back into the original array.
49

49

00:01:55,874  -->  00:01:58,083
Now, there is one important thing here.
50

50

00:01:58,083  -->  00:02:00,643
In order for this third step to work,
51

51

00:02:00,643  -->  00:02:04,538
the gathering step, the values in bucket X
52

52

00:02:04,538  -->  00:02:08,217
must all be greater than the values in bucket X-1
53

53

00:02:08,217  -->  00:02:11,378
and less than the values in bucket X+1.
54

54

00:02:11,378  -->  00:02:13,028
And so what does this mean,
55

55

00:02:13,028  -->  00:02:14,846
well in the merging phase we are
56

56

00:02:14,846  -->  00:02:17,655
going to write the values in bucket 0
57

57

00:02:17,655  -->  00:02:19,874
back to the array and then we are gonna follow
58

58

00:02:19,874  -->  00:02:22,116
those by the values in bucket 1
59

59

00:02:22,116  -->  00:02:23,859
and values in bucket 2 etc...
60

60

00:02:23,859  -->  00:02:26,626
That means that the values in bucket 0
61

61

00:02:26,626  -->  00:02:29,241
all have to be less than the values in bucket 1.
62

62

00:02:29,241  -->  00:02:32,285
Otherwise only write the values in bucket 0
63

63

00:02:32,285  -->  00:02:34,841
back to the array and follow them by bucket 1
64

64

00:02:34,841  -->  00:02:36,684
and they are not gonna be sorted.
65

65

00:02:36,684  -->  00:02:39,122
If values in bucket 1 can be less than the values
66

66

00:02:39,122  -->  00:02:41,693
in bucket 0 we are not gonna have a sorted array.
67

67

00:02:41,693  -->  00:02:43,766
And we will see this in a minute.
68

68

00:02:43,766  -->  00:02:46,820
So what this means is whatever hashing function you use,
69

69

00:02:46,820  -->  00:02:49,867
it has to make sure that the hashed values
70

70

00:02:49,867  -->  00:02:52,736
it produces meet that requirement.
71

71

00:02:52,736  -->  00:02:54,599
And so, if you have a hashing function,
72

72

00:02:54,599  -->  00:02:57,865
if you are sorting the values one, two and three,
73

73

00:02:57,865  -->  00:03:00,489
you can't have a hashing function that would put three
74

74

00:03:00,489  -->  00:03:02,555
into a lower bucket than one.
75

75

00:03:02,555  -->  00:03:04,637
That wouldn't work, because when you copy
76

76

00:03:04,637  -->  00:03:06,139
the values back into the array,
77

77

00:03:06,139  -->  00:03:08,280
three would be copied back before one is.
78

78

00:03:08,280  -->  00:03:11,266
And so your hashing function has to hash
79

79

00:03:11,266  -->  00:03:14,545
the values so that this requirement is met.
80

80

00:03:14,545  -->  00:03:17,934
So that if it puts a value into bucket 5
81

81

00:03:17,934  -->  00:03:19,723
then that value has to be lower
82

82

00:03:19,723  -->  00:03:22,091
and when I say the value in this case
83

83

00:03:22,091  -->  00:03:24,650
I mean the actual value not the hashed value.
84

84

00:03:24,650  -->  00:03:28,124
That value has to be lower than the values that
85

85

00:03:28,124  -->  00:03:29,929
would put into bucket 7.
86

86

00:03:29,929  -->  00:03:32,023
And so let's take a look into an example here.
87

87

00:03:32,023  -->  00:03:34,252
Let's say we are gonna sort the array at the top.
88

88

00:03:34,252  -->  00:03:37,815
So, we are gonna sort 54, 46 etc...
89

89

00:03:37,815  -->  00:03:39,798
What we are gonna do is you will see
90

90

00:03:39,798  -->  00:03:41,952
in the implementation video is, we are gonna sort
91

91

00:03:41,952  -->  00:03:45,791
them into buckets based on their ten's position.
92

92

00:03:45,791  -->  00:03:48,094
And so, the hash function the way it's gonna hash
93

93

00:03:48,094  -->  00:03:51,853
these values is it's going to hash 54 to five.
94

94

00:03:51,853  -->  00:03:54,210
It's gonna hash 46 to four,
95

95

00:03:54,210  -->  00:03:57,202
its gonna hash 83 to eight.
96

96

00:03:57,202  -->  00:04:01,039
And so, in the buckets and this would be our bucket array.
97

97

00:04:01,039  -->  00:04:04,416
46 and 43 are gonna end up in same bucket.
98

98

00:04:04,416  -->  00:04:08,594
54 will end up in the bucket for the 50's.
99

99

00:04:08,594  -->  00:04:11,965
66 will end up in the bucket for the 60's etc...
100

100

00:04:11,965  -->  00:04:14,003
And so this meets the requirement
101

101

00:04:14,003  -->  00:04:17,195
that all of the values in the lower bucket
102

102

00:04:17,195  -->  00:04:19,051
have to be less than all of the values
103

103

00:04:19,051  -->  00:04:20,412
in the higher bucket.
104

104

00:04:20,412  -->  00:04:22,740
So, this is the scattering phase.
105

105

00:04:22,740  -->  00:04:24,302
Then we do the sorting phase
106

106

00:04:24,302  -->  00:04:26,505
and so we are gonna sort all of our buckets.
107

107

00:04:26,505  -->  00:04:29,994
And so, here we can 46 is coming before 43.
108

108

00:04:29,994  -->  00:04:33,635
But, we sort that and the same thing with 95.
109

109

00:04:33,635  -->  00:04:35,996
Here, 95 is coming before 92.
110

110

00:04:35,996  -->  00:04:39,763
After we have sorted, 92 comes before 95.
111

111

00:04:39,763  -->  00:04:43,055
And then the final phase, the gathering phase,
112

112

00:04:43,055  -->  00:04:45,462
is to traverse over all our buckets and copy
113

113

00:04:45,462  -->  00:04:47,244
them back into the original array.
114

114

00:04:47,244  -->  00:04:49,739
And so we are gonna copy 43 and 46,
115

115

00:04:49,739  -->  00:04:51,572
54, 66, 83, 92 and 95.
116

116

00:04:54,292  -->  00:04:57,003
Now, if we did not have that requirement
117

117

00:04:57,003  -->  00:05:00,119
that values in lower buckets be less than the values
118

118

00:05:00,119  -->  00:05:02,518
in higher buckets this wouldn't work.
119

119

00:05:02,518  -->  00:05:05,674
I mean if 92 and 95 could be in this bucket
120

120

00:05:05,674  -->  00:05:08,802
when we copy the values back to the array
121

121

00:05:08,802  -->  00:05:10,442
and we do that just by traversing
122

122

00:05:10,442  -->  00:05:13,166
the array in order, the bucket array in order.
123

123

00:05:13,166  -->  00:05:15,043
If we didn't have that requirement
124

124

00:05:15,043  -->  00:05:19,119
and had values greater than 43 in front here
125

125

00:05:19,119  -->  00:05:21,488
when we copied back we would have values
126

126

00:05:21,488  -->  00:05:24,349
greater than 43 appearing before 43.
127

127

00:05:24,349  -->  00:05:26,962
And so obviously, our array wouldn't be sorted.
128

128

00:05:26,962  -->  00:05:30,067
And so bucket sort is not an in-place algorithm.
129

129

00:05:30,067  -->  00:05:33,738
It uses extra memory that depends on the number
130

130

00:05:33,738  -->  00:05:35,639
of items in the array that you are sorting.
131

131

00:05:35,639  -->  00:05:38,682
And the stability will depend on what sort
132

132

00:05:38,682  -->  00:05:40,710
algorithm you used to sort the buckets.
133

133

00:05:40,710  -->  00:05:43,801
So back here, we are gonna obviously sort
134

134

00:05:43,801  -->  00:05:45,373
each bucket and you can use
135

135

00:05:45,373  -->  00:05:47,768
any algorithm you want to do that.
136

136

00:05:47,768  -->  00:05:51,013
And so if the algorithm you use is unstable
137

137

00:05:51,013  -->  00:05:54,373
then bucket sort will end up being unstable.
138

138

00:05:54,373  -->  00:05:57,229
If it's stable then bucket sort will be stable.
139

139

00:05:57,229  -->  00:05:59,892
Now, to achieve linear time, you would have one
140

140

00:05:59,892  -->  00:06:01,309
value per bucket.
141

141

00:06:02,375  -->  00:06:04,378
Now, insertion sort is often used
142

142

00:06:04,378  -->  00:06:06,410
to sort the buckets, because insertion sort
143

143

00:06:06,410  -->  00:06:08,427
is a really fast algorithm when the number
144

144

00:06:08,427  -->  00:06:09,576
of items is small.
145

145

00:06:09,576  -->  00:06:11,607
Like, we are not gonna use insertion sort
146

146

00:06:11,607  -->  00:06:14,440
we are going to use the sort method
147

147

00:06:14,440  -->  00:06:17,880
and the Collections class in the JDK
148

148

00:06:17,880  -->  00:06:21,838
and it uses a an adaptive merge sort algorithm.
149

149

00:06:21,838  -->  00:06:23,952
But I wanted to make you aware
150

150

00:06:23,952  -->  00:06:25,976
that insertion sort is a popular
151

151

00:06:25,976  -->  00:06:28,641
algorithm to use for bucket sort.
152

152

00:06:28,641  -->  00:06:31,103
Alright, so now that we know how bucket sort works,
153

153

00:06:31,103  -->  00:06:32,393
let's implement it.
154

154

00:06:32,393  -->  00:06:35,143
I will see you in the next video.
