1
1

00:00:00,179  -->  00:00:05,179
(lively music)
(keyboard clacking)
2

2

00:00:05,900  -->  00:00:09,540
<v Sarah>So, I've started off the solution a little bit.</v>
3

3

00:00:09,540  -->  00:00:13,140
This is what was available in the project
4

4

00:00:13,140  -->  00:00:15,680
in the Resources section for the last video
5

5

00:00:15,680  -->  00:00:18,604
and then I've copied over the radixSort
6

6

00:00:18,604  -->  00:00:20,110
and the radixSingleSort methods
7

7

00:00:20,110  -->  00:00:22,080
from the implementation we worked on
8

8

00:00:22,080  -->  00:00:23,710
when we covered radixSort.
9

9

00:00:23,710  -->  00:00:26,210
I did not copy over the getDigit method
10

10

00:00:26,210  -->  00:00:27,910
because we're sorting strings,
11

11

00:00:27,910  -->  00:00:29,750
so we're not gonna need it.
12

12

00:00:29,750  -->  00:00:31,740
So, let's think about the method
13

13

00:00:31,740  -->  00:00:35,050
that we're gonna have to replace the getDigit method with.
14

14

00:00:35,050  -->  00:00:37,290
What do we actually want to do?
15

15

00:00:37,290  -->  00:00:39,840
Well, we're gonna want to get the letter
16

16

00:00:39,840  -->  00:00:41,870
in the position that we're looking at.
17

17

00:00:41,870  -->  00:00:44,470
So, when we sort these strings,
18

18

00:00:44,470  -->  00:00:46,310
we're gonna wanna start at the right
19

19

00:00:46,310  -->  00:00:49,250
just like we did with the integer values
20

20

00:00:49,250  -->  00:00:52,060
because the least significant position
21

21

00:00:52,060  -->  00:00:53,260
is at the right
22

22

00:00:53,260  -->  00:00:55,490
and so, just like with decimal numbers,
23

23

00:00:55,490  -->  00:00:56,930
we wanna go from right to left,
24

24

00:00:56,930  -->  00:01:00,050
so when we're sorting based on the last position
25

25

00:01:00,050  -->  00:01:02,760
in a string, we're gonna want f,
26

26

00:01:02,760  -->  00:01:06,020
c, e, d and b,
27

27

00:01:06,020  -->  00:01:10,020
so we need a method that's going to accept a position
28

28

00:01:10,020  -->  00:01:12,400
and figure out the letter that we're looking at
29

29

00:01:12,400  -->  00:01:14,060
and this is actually easier to do
30

30

00:01:14,060  -->  00:01:16,800
than it was for decimal numbers.
31

31

00:01:16,800  -->  00:01:19,680
So, let's add that first.
32

32

00:01:19,680  -->  00:01:21,680
And I'm gonna call it getIndex
33

33

00:01:21,680  -->  00:01:24,210
because what we're basically looking for
34

34

00:01:24,210  -->  00:01:26,920
is we want the index into the counting array,
35

35

00:01:26,920  -->  00:01:28,820
that's what we want the method to return,
36

36

00:01:28,820  -->  00:01:32,610
so I'm gonna say public static int getIndex
37

37

00:01:33,840  -->  00:01:37,280
and this is going to accept the position
38

38

00:01:37,280  -->  00:01:39,633
that we're looking at and the string.
39

39

00:01:41,720  -->  00:01:46,720
So, if we want to get f, c, e et cetera,
40

40

00:01:46,950  -->  00:01:49,250
we're gonna pass for as the index
41

41

00:01:49,250  -->  00:01:51,669
'cause this time we want the zero-based index
42

42

00:01:51,669  -->  00:01:54,000
and we would pass the string value
43

43

00:01:54,000  -->  00:01:55,830
and inside here, all we have to do
44

44

00:01:55,830  -->  00:01:57,810
is call the charAt method.
45

45

00:01:57,810  -->  00:02:00,683
So, we can return value.charAt position,
46

46

00:02:03,700  -->  00:02:06,960
so this would give us, for example, f
47

47

00:02:06,960  -->  00:02:08,570
but that's not what we want
48

48

00:02:08,570  -->  00:02:13,170
because we want to return where f is being counted
49

49

00:02:13,170  -->  00:02:14,780
in the counting array.
50

50

00:02:14,780  -->  00:02:18,130
Now, a will be at position zero in the counting array,
51

51

00:02:18,130  -->  00:02:19,810
b will be at position one,
52

52

00:02:19,810  -->  00:02:21,820
c will be at position two,
53

53

00:02:21,820  -->  00:02:24,210
d will be at position three et cetera.
54

54

00:02:24,210  -->  00:02:26,070
So, a is at position zero,
55

55

00:02:26,070  -->  00:02:28,770
so if we wanna figure out where f is,
56

56

00:02:28,770  -->  00:02:33,720
we'll get f and then we're gonna subtract a.
57

57

00:02:33,720  -->  00:02:36,500
And that will give us the position in the counting array.
58

58

00:02:36,500  -->  00:02:40,880
Remember, characters are actually numeric values
59

59

00:02:40,880  -->  00:02:42,170
under the covers,
60

60

00:02:42,170  -->  00:02:47,170
so if a has a numeric value of I think it's 65
61

61

00:02:47,220  -->  00:02:49,910
in ASCII but I'm not absolutely sure about that
62

62

00:02:49,910  -->  00:02:54,470
but if it's 65, in ASCII the letters a to z,
63

63

00:02:54,470  -->  00:02:57,740
lowercase all have contiguous values,
64

64

00:02:57,740  -->  00:03:02,373
so a is let's value 65, b is 66,
65

65

00:03:02,373  -->  00:03:05,870
c is 67, d is 68 et cetera.
66

66

00:03:05,870  -->  00:03:10,290
So, if we want to get the position in the count array,
67

67

00:03:10,290  -->  00:03:14,120
we need to translate these letters into the indices zero
68

68

00:03:14,120  -->  00:03:18,230
to 25 and so, a would be 65
69

69

00:03:18,230  -->  00:03:21,600
minus 65 is zero, so it's at position zero
70

70

00:03:21,600  -->  00:03:22,990
in the counting array,
71

71

00:03:22,990  -->  00:03:26,710
b would be 66 minus 65 which is one,
72

72

00:03:26,710  -->  00:03:28,980
so it's at position one in the counting array,
73

73

00:03:28,980  -->  00:03:32,420
c would be 67 minus 65
74

74

00:03:32,420  -->  00:03:36,030
which would be position two in the counting array et cetera.
75

75

00:03:36,030  -->  00:03:37,640
And so, what we're doing with this
76

76

00:03:37,640  -->  00:03:42,240
is we're translating the numeric value for the character
77

77

00:03:42,240  -->  00:03:45,680
into an index in the counting array
78

78

00:03:45,680  -->  00:03:48,060
and because the letters a to z
79

79

00:03:49,048  -->  00:03:52,860
in the ASCII system have value 65, 66, 67,
80

80

00:03:55,160  -->  00:03:56,940
and we keep increasing by one,
81

81

00:03:56,940  -->  00:04:00,410
all the way to z, we can translate a character
82

82

00:04:00,410  -->  00:04:02,040
to its position in the counting array
83

83

00:04:02,040  -->  00:04:07,040
just by subtracting a from the value for that character.
84

84

00:04:07,090  -->  00:04:08,380
And so, that's what we're doing here
85

85

00:04:08,380  -->  00:04:10,370
and so, this is gonna return us the index
86

86

00:04:10,370  -->  00:04:11,703
in the counting array.
87

87

00:04:14,250  -->  00:04:15,850
A brief timeout here.
88

88

00:04:15,850  -->  00:04:17,850
After I finished recording this video,
89

89

00:04:17,850  -->  00:04:21,180
I looked up lowercase a in the ASCII table
90

90

00:04:21,180  -->  00:04:23,660
and it turns out that lowercase a
91

91

00:04:23,660  -->  00:04:26,210
has a value of 97.
92

92

00:04:26,210  -->  00:04:29,310
It's uppercase A that has a value of 65,
93

93

00:04:29,310  -->  00:04:31,290
so I suppose I was half right
94

94

00:04:31,290  -->  00:04:33,285
but the discussion still stands
95

95

00:04:33,285  -->  00:04:37,440
because the lowercase a is at 97,
96

96

00:04:37,440  -->  00:04:39,160
the lowercase b is at 98,
97

97

00:04:39,160  -->  00:04:41,890
the lowercase c is at 99 et cetera,
98

98

00:04:41,890  -->  00:04:43,510
all the way up to z.
99

99

00:04:43,510  -->  00:04:47,760
We can translate the numeric value for a lowercase character
100

100

00:04:47,760  -->  00:04:50,170
to its index in the counting array
101

101

00:04:50,170  -->  00:04:52,900
by subtracting out the character a
102

102

00:04:52,900  -->  00:04:55,500
but I thought I'd record this brief timeout
103

103

00:04:55,500  -->  00:04:57,330
in case anybody noticed
104

104

00:04:57,330  -->  00:05:00,130
that I was actually using the ASCII code
105

105

00:05:00,130  -->  00:05:02,580
for an uppercase A when I was discussing
106

106

00:05:02,580  -->  00:05:05,110
how we were doing the translation, so that's it,
107

107

00:05:05,110  -->  00:05:08,563
now we'll return to our regularly scheduled video.
108

108

00:05:12,910  -->  00:05:15,310
And so, because of that, we can come in here
109

109

00:05:15,310  -->  00:05:19,910
and we can change the getDigit to getIndex
110

110

00:05:22,880  -->  00:05:25,240
and we want to pass the position
111

111

00:05:25,240  -->  00:05:26,970
and the value and that's all we need.
112

112

00:05:26,970  -->  00:05:28,170
We don't need the radix
113

113

00:05:29,550  -->  00:05:31,360
and we'll fix this error later.
114

114

00:05:31,360  -->  00:05:34,250
Right now we were thinking that the value was an integer.
115

115

00:05:34,250  -->  00:05:37,350
So, that's all we need here for this getIndex.
116

116

00:05:37,350  -->  00:05:38,620
And the same for this one.
117

117

00:05:38,620  -->  00:05:41,300
So, we'll change this to getIndex
118

118

00:05:41,300  -->  00:05:44,970
and we can just remove once again the radix
119

119

00:05:45,971  -->  00:05:48,010
and we'll fix the other errors later.
120

120

00:05:48,010  -->  00:05:50,030
So, now that we have our getIndex
121

121

00:05:50,030  -->  00:05:52,270
and that was probably the most difficult part
122

122

00:05:52,270  -->  00:05:54,660
of modifying the radixSort
123

123

00:05:54,660  -->  00:05:56,110
so that we can sort strings,
124

124

00:05:56,110  -->  00:05:57,730
let's fix the rest of the code.
125

125

00:05:57,730  -->  00:06:00,320
So, first, let's call our radixSort,
126

126

00:06:00,320  -->  00:06:02,060
so when we do that,
127

127

00:06:02,060  -->  00:06:03,820
we're gonna be passing a string array,
128

128

00:06:03,820  -->  00:06:06,793
so we'll modify that, so we'll say string.
129

129

00:06:10,140  -->  00:06:13,040
We're still gonna wanna take the radix and the width.
130

130

00:06:13,040  -->  00:06:16,450
Now, in here we actually want to modify the loop
131

131

00:06:16,450  -->  00:06:18,890
because the position we pass,
132

132

00:06:18,890  -->  00:06:22,160
we wanna start at the rightmost position.
133

133

00:06:22,160  -->  00:06:25,330
It was okay for us to start i at zero
134

134

00:06:25,330  -->  00:06:28,810
and increment when we were dealing with decimal numbers
135

135

00:06:28,810  -->  00:06:31,450
because the getDigit method was coded
136

136

00:06:31,450  -->  00:06:33,610
in such a way that when i was zero,
137

137

00:06:33,610  -->  00:06:36,580
we were actually raising 10 to the power of zero
138

138

00:06:36,580  -->  00:06:37,887
and so, we were getting the,
139

139

00:06:37,887  -->  00:06:39,580
and the calculation we were doing
140

140

00:06:39,580  -->  00:06:42,140
was giving us the rightmost digit.
141

141

00:06:42,140  -->  00:06:45,290
But now that we're just using value.charAt position,
142

142

00:06:45,290  -->  00:06:48,690
we actually want to count i down from the length
143

143

00:06:48,690  -->  00:06:50,740
of the string down to zero
144

144

00:06:50,740  -->  00:06:53,390
and so, we wanna count i, we're gonna start i
145

145

00:06:53,390  -->  00:06:54,793
at width minus one,
146

146

00:06:57,280  -->  00:07:00,550
we're gonna keep going as long as i is greater than
147

147

00:07:00,550  -->  00:07:02,580
or equal to zero
148

148

00:07:02,580  -->  00:07:04,303
and we're gonna decrement I.
149

149

00:07:05,460  -->  00:07:07,570
And so, this time you really do want i
150

150

00:07:07,570  -->  00:07:11,300
because of the way the getIndex method is coded,
151

151

00:07:11,300  -->  00:07:14,600
we really want i to start at four
152

152

00:07:14,600  -->  00:07:17,490
and then go down to zero,
153

153

00:07:17,490  -->  00:07:19,600
so that's all we have to change here
154

154

00:07:19,600  -->  00:07:20,850
for the radixSingleSort.
155

155

00:07:20,850  -->  00:07:24,180
We're now gonna be accepting a string array,
156

156

00:07:24,180  -->  00:07:26,090
so we'll change that to string
157

157

00:07:26,090  -->  00:07:29,300
and because of that, we have some fixes we need to do here
158

158

00:07:29,300  -->  00:07:31,223
where we're gonna have a string value.
159

159

00:07:33,050  -->  00:07:36,920
And down here, our temp, we're gonna have a string value
160

160

00:07:36,920  -->  00:07:39,000
for the loop and then down here our temp array
161

161

00:07:39,000  -->  00:07:44,000
is actually going to be a string array.
162

162

00:07:45,440  -->  00:07:46,900
And that's it.
163

163

00:07:46,900  -->  00:07:48,270
That's all we have to change,
164

164

00:07:48,270  -->  00:07:50,430
so as I said, probably the most difficult part
165

165

00:07:50,430  -->  00:07:51,693
was figuring this out.
166

166

00:07:53,010  -->  00:07:54,070
So, let's run
167

167

00:07:55,460  -->  00:07:56,293
and
168

168

00:07:59,110  -->  00:08:00,950
we're not gonna see anything sorted
169

169

00:08:00,950  -->  00:08:03,560
because we need to actually call radixSort,
170

170

00:08:03,560  -->  00:08:04,623
so let's do that.
171

171

00:08:06,100  -->  00:08:07,493
So, radixSort.
172

172

00:08:09,010  -->  00:08:11,343
We're gonna pass our strings array.
173

173

00:08:12,540  -->  00:08:15,797
This time we have a radix of 26
174

174

00:08:15,797  -->  00:08:17,550
'cause there were 26 letters in the alphabet
175

175

00:08:17,550  -->  00:08:19,160
and our width is five
176

176

00:08:19,160  -->  00:08:23,510
because each of our strings has five letters in it.
177

177

00:08:23,510  -->  00:08:24,610
So, now let's run
178

178

00:08:27,760  -->  00:08:30,626
and we have sorted our strings, abcde
179

179

00:08:30,626  -->  00:08:35,209
bbbbb, bcdef, dbaqc and omadd.
180

180

00:08:38,780  -->  00:08:39,710
And so, as I said,
181

181

00:08:39,710  -->  00:08:41,680
probably the most challenging part of this
182

182

00:08:41,680  -->  00:08:43,620
was figuring out how to get that index
183

183

00:08:43,620  -->  00:08:46,330
and maybe you didn't find it too challenging.
184

184

00:08:46,330  -->  00:08:49,780
And then of course we needed to modify this loop
185

185

00:08:49,780  -->  00:08:54,240
because we now want to start i
186

186

00:08:54,240  -->  00:08:56,410
at the rightmost position
187

187

00:08:56,410  -->  00:08:59,600
because of the way we coded this method.
188

188

00:08:59,600  -->  00:09:02,070
And the rest was basically just a matter
189

189

00:09:02,070  -->  00:09:05,800
of fixing up the call to getDigit,
190

190

00:09:05,800  -->  00:09:07,520
changing it to a call to getIndex
191

191

00:09:07,520  -->  00:09:11,010
and fixing up areas where we used int
192

192

00:09:11,010  -->  00:09:12,870
when we actually needed a string now.
193

193

00:09:12,870  -->  00:09:14,840
So, as you can see from these challenges,
194

194

00:09:14,840  -->  00:09:17,860
once you know an implementation of a sort algorithm,
195

195

00:09:17,860  -->  00:09:19,720
it's not really all that difficult
196

196

00:09:19,720  -->  00:09:23,010
to modify it to sort different types of data,
197

197

00:09:23,010  -->  00:09:25,120
or to sort in descending order
198

198

00:09:25,120  -->  00:09:27,160
rather than ascending order.
199

199

00:09:27,160  -->  00:09:28,550
So, the most important thing
200

200

00:09:28,550  -->  00:09:31,010
is that you understand the steps
201

201

00:09:31,010  -->  00:09:33,840
that an algorithm takes to sort a set of values
202

202

00:09:33,840  -->  00:09:36,110
because once you know these stops involved
203

203

00:09:36,110  -->  00:09:37,640
with the sort algorithm,
204

204

00:09:37,640  -->  00:09:41,010
you can then code the implementation that you need
205

205

00:09:41,010  -->  00:09:43,740
to do what you wanna accomplish.
206

206

00:09:43,740  -->  00:09:45,980
So, that's it for sort algorithms for now.
207

207

00:09:45,980  -->  00:09:48,730
In the next section, we're gonna start looking at lists.
208

208

00:09:48,730  -->  00:09:49,753
I'll see ya there.
