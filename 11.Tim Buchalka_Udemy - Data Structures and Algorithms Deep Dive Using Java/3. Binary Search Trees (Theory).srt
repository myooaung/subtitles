1
1

00:00:00,176  -->  00:00:02,559
(inspiring music)
2

2

00:00:02,559  -->  00:00:05,160
(clicking)
3

3

00:00:05,160  -->  00:00:06,150
<v Sarah>In the last video</v>
4

4

00:00:06,150  -->  00:00:09,610
we went through the characteristics of general trees.
5

5

00:00:09,610  -->  00:00:12,020
In this video, we're going to go through
6

6

00:00:12,020  -->  00:00:15,230
the characteristics of a binary tree
7

7

00:00:15,230  -->  00:00:17,590
and then we're gonna move onto binary search trees,
8

8

00:00:17,590  -->  00:00:19,190
which is what we're going to look at
9

9

00:00:19,190  -->  00:00:21,310
for the remainder of this section.
10

10

00:00:21,310  -->  00:00:24,770
So a binary tree is a tree
11

11

00:00:24,770  -->  00:00:29,220
in which every node has zero, one, or two children
12

12

00:00:29,220  -->  00:00:31,680
and that's why it's called a binary tree
13

13

00:00:31,680  -->  00:00:33,580
because the maximum number of children
14

14

00:00:33,580  -->  00:00:35,670
a node can have is two.
15

15

00:00:35,670  -->  00:00:37,637
Now remember when we looked at general trees,
16

16

00:00:37,637  -->  00:00:39,830
a node could have as many children as it wanted.
17

17

00:00:39,830  -->  00:00:43,020
It could have three, five, 10, 50, whatever.
18

18

00:00:43,020  -->  00:00:46,030
But in a binary tree, every node can have zero
19

19

00:00:46,030  -->  00:00:47,720
which means it would be a leaf,
20

20

00:00:47,720  -->  00:00:49,710
one or two children.
21

21

00:00:49,710  -->  00:00:52,580
Now because each node can have at most two children,
22

22

00:00:52,580  -->  00:00:54,520
when we're working with a binary tree
23

23

00:00:54,520  -->  00:00:57,000
we refer to the possible two children
24

24

00:00:57,000  -->  00:00:59,570
as the left child and the right child
25

25

00:00:59,570  -->  00:01:00,580
and in practise,
26

26

00:01:00,580  -->  00:01:03,090
we don't just use a regular old binary tree,
27

27

00:01:03,090  -->  00:01:04,680
we use a binary search tree
28

28

00:01:04,680  -->  00:01:06,430
and we'll look at those later.
29

29

00:01:06,430  -->  00:01:08,970
And so here's a binary tree, and this tree,
30

30

00:01:08,970  -->  00:01:12,470
every node only has zero, one, or two children
31

31

00:01:12,470  -->  00:01:16,470
and the left child of 15 would be 22
32

32

00:01:16,470  -->  00:01:19,190
and the right child of 15 would be four
33

33

00:01:19,190  -->  00:01:20,850
and this is how they're usually depicted
34

34

00:01:20,850  -->  00:01:23,500
with going to the left and going to the right.
35

35

00:01:23,500  -->  00:01:26,230
The left child for four would be 18
36

36

00:01:26,230  -->  00:01:28,240
and the right child would be three.
37

37

00:01:28,240  -->  00:01:31,170
22 has a left child, 19,
38

38

00:01:31,170  -->  00:01:33,690
but it does not have a right child
39

39

00:01:33,690  -->  00:01:36,870
and 18 has a right child, 14,
40

40

00:01:36,870  -->  00:01:39,020
but it does not have a left child.
41

41

00:01:39,020  -->  00:01:43,040
Now a binary tree is complete
42

42

00:01:43,040  -->  00:01:47,810
if every level except the last level, has two children
43

43

00:01:47,810  -->  00:01:49,270
and on the last level,
44

44

00:01:49,270  -->  00:01:51,660
all of the nodes are as left as possible
45

45

00:01:51,660  -->  00:01:53,820
and so this is a complete binary tree,
46

46

00:01:53,820  -->  00:01:56,830
all of the nodes have two children except leaf nodes,
47

47

00:01:56,830  -->  00:01:59,200
that's a last level, and four.
48

48

00:01:59,200  -->  00:02:01,230
But you'll notice that the children
49

49

00:02:01,230  -->  00:02:03,920
are all to the left as much as possible.
50

50

00:02:03,920  -->  00:02:05,610
If three was a right child
51

51

00:02:05,610  -->  00:02:07,970
and we had an empty spot here,
52

52

00:02:07,970  -->  00:02:10,050
this would not be a complete tree.
53

53

00:02:10,050  -->  00:02:11,730
So with a complete tree,
54

54

00:02:11,730  -->  00:02:14,430
every level except the last level
55

55

00:02:14,430  -->  00:02:16,230
and this is the last level,
56

56

00:02:16,230  -->  00:02:18,000
is completely filled
57

57

00:02:18,000  -->  00:02:21,120
and so all of the interior nodes
58

58

00:02:21,120  -->  00:02:22,780
have to have two children
59

59

00:02:22,780  -->  00:02:24,620
and then on the last level
60

60

00:02:24,620  -->  00:02:26,750
all of the nodes have to be to the left
61

61

00:02:26,750  -->  00:02:28,080
as much as possible.
62

62

00:02:28,080  -->  00:02:30,280
Now a full binary tree
63

63

00:02:30,280  -->  00:02:32,350
is complete tree as well,
64

64

00:02:32,350  -->  00:02:34,390
but with a full binary tree,
65

65

00:02:34,390  -->  00:02:36,280
every node other than the leaves
66

66

00:02:36,280  -->  00:02:38,020
has to have two children,
67

67

00:02:38,020  -->  00:02:40,260
and so this is not a full binary tree
68

68

00:02:40,260  -->  00:02:42,600
because four doesn't have two children,
69

69

00:02:42,600  -->  00:02:44,030
it only has one,
70

70

00:02:44,030  -->  00:02:46,780
but it is a complete tree.
71

71

00:02:46,780  -->  00:02:50,240
This tree if full and by definition it's also complete
72

72

00:02:50,240  -->  00:02:53,390
because every node in the tree
73

73

00:02:53,390  -->  00:02:55,980
except for leaves, has two children
74

74

00:02:55,980  -->  00:02:56,813
and as I said,
75

75

00:02:56,813  -->  00:02:59,140
full binary trees are also considered
76

76

00:02:59,140  -->  00:03:00,990
to be complete binary trees, right?
77

77

00:03:00,990  -->  00:03:04,300
Because is we go back up to the complete binary tree,
78

78

00:03:04,300  -->  00:03:06,140
the definition of a complete tree is,
79

79

00:03:06,140  -->  00:03:10,280
every level except potentially the last is filled.
80

80

00:03:10,280  -->  00:03:12,120
And with a full binary tree,
81

81

00:03:12,120  -->  00:03:14,660
every level is filled including the last.
82

82

00:03:14,660  -->  00:03:17,940
So full binary trees are also complete trees.
83

83

00:03:17,940  -->  00:03:21,160
Now it's fine to have incomplete binary trees
84

84

00:03:21,160  -->  00:03:23,270
if we go up to the tree we looked at, at first,
85

85

00:03:23,270  -->  00:03:27,850
this is incomplete because we're missing a node here
86

86

00:03:27,850  -->  00:03:29,990
and the nodes at the bottom level
87

87

00:03:29,990  -->  00:03:31,750
aren't to the left the most.
88

88

00:03:31,750  -->  00:03:34,993
So it's completely fine to have incomplete binary trees.
89

89

00:03:37,940  -->  00:03:40,270
Now this is not a binary tree
90

90

00:03:40,270  -->  00:03:42,410
because four has three children
91

91

00:03:42,410  -->  00:03:45,570
and so this tree is not a binary tree.
92

92

00:03:45,570  -->  00:03:48,250
A binary tree, every node has
93

93

00:03:48,250  -->  00:03:50,060
zero, one, or two children
94

94

00:03:50,060  -->  00:03:52,440
and the root also has three children in this one.
95

95

00:03:52,440  -->  00:03:54,820
So this is a binary tree.
96

96

00:03:54,820  -->  00:03:56,830
This is not a binary tree.
97

97

00:03:56,830  -->  00:03:59,430
In practise, we generally don't use
98

98

00:03:59,430  -->  00:04:01,010
just any old binary tree.
99

99

00:04:01,010  -->  00:04:04,080
We use what's called a binary search tree
100

100

00:04:04,080  -->  00:04:08,350
and the reason that binary search trees are popular
101

101

00:04:08,350  -->  00:04:10,520
is that we can perform insertions,
102

102

00:04:10,520  -->  00:04:14,380
deletions and retrievals in O(logn) time.
103

103

00:04:14,380  -->  00:04:18,580
They also have faster searching than unsorted arrays do,
104

104

00:04:18,580  -->  00:04:22,060
but equivalent time complexity to sort it arrays.
105

105

00:04:22,060  -->  00:04:24,770
Remember when we search a sorted array
106

106

00:04:24,770  -->  00:04:26,400
using the binary search algorith
107

107

00:04:26,400  -->  00:04:27,910
we can do it in O(logn) time,
108

108

00:04:28,980  -->  00:04:31,400
so it has the equivalent search time.
109

109

00:04:31,400  -->  00:04:33,530
When we're dealing with a binary search tree,
110

110

00:04:33,530  -->  00:04:37,870
the left child always has a smaller value than its parent
111

111

00:04:37,870  -->  00:04:39,470
and the right child always
112

112

00:04:39,470  -->  00:04:42,070
has a larger value than its parent.
113

113

00:04:42,070  -->  00:04:45,900
And this means that everything to left of the root
114

114

00:04:45,900  -->  00:04:47,460
or to the left of a parent
115

115

00:04:47,460  -->  00:04:51,390
is less than the value of the root or the parent
116

116

00:04:51,390  -->  00:04:54,190
and everything to the right of the root or the parent
117

117

00:04:54,190  -->  00:04:56,900
is greater than the value of the root or the parent
118

118

00:04:56,900  -->  00:04:58,310
and because of that,
119

119

00:04:58,310  -->  00:05:00,690
it's really easy to do a binary search
120

120

00:05:00,690  -->  00:05:02,430
on a binary search tree
121

121

00:05:02,430  -->  00:05:04,870
because we look at the value of the root.
122

122

00:05:04,870  -->  00:05:07,340
If it's equal to the value we want, we're done.
123

123

00:05:07,340  -->  00:05:10,930
If it's not, and it's less than the value at the root,
124

124

00:05:10,930  -->  00:05:14,450
then we know to go look at the left subtree
125

125

00:05:14,450  -->  00:05:16,280
because everything to the left of the root
126

126

00:05:16,280  -->  00:05:18,070
is less than the value of the root.
127

127

00:05:18,070  -->  00:05:20,560
If the value we're looking for is greater than the root
128

128

00:05:20,560  -->  00:05:22,770
then we know to go to the right subtree
129

129

00:05:22,770  -->  00:05:24,930
because everything to the right of the root
130

130

00:05:24,930  -->  00:05:26,550
is greater than the value of the root
131

131

00:05:26,550  -->  00:05:29,900
and so right away, just by checking the root,
132

132

00:05:29,900  -->  00:05:33,100
we cut the number of values we have to search in half
133

133

00:05:33,100  -->  00:05:34,360
and then we rinse and repeat,
134

134

00:05:34,360  -->  00:05:36,860
so we'd, if we were gonna search the left subtree
135

135

00:05:36,860  -->  00:05:39,310
we'd move down to the left child of the root
136

136

00:05:39,310  -->  00:05:41,530
and we compare the value against that.
137

137

00:05:41,530  -->  00:05:43,890
If it's less than the value, we go to the left subtree
138

138

00:05:43,890  -->  00:05:46,270
if it's greater, to the right subtree.
139

139

00:05:46,270  -->  00:05:47,103
So essentially,
140

140

00:05:47,103  -->  00:05:50,650
binary search trees are ideal for doing binary searches
141

141

00:05:50,650  -->  00:05:53,830
and that's why they're called binary search trees.
142

142

00:05:53,830  -->  00:05:56,140
And because of that characteristic as well,
143

143

00:05:56,140  -->  00:05:59,550
we can do insertions, deletions and retrievals.
144

144

00:05:59,550  -->  00:06:03,210
That's searching for a value, so that's obviously O(logn).
145

145

00:06:03,210  -->  00:06:05,570
We can do those in O(logn) time
146

146

00:06:05,570  -->  00:06:09,310
because it only ever takes us O(logn) steps
147

147

00:06:09,310  -->  00:06:11,260
to find the insertion point
148

148

00:06:11,260  -->  00:06:14,930
or to find the value we want to delete or retrieve.
149

149

00:06:14,930  -->  00:06:17,580
And so this is a binary search tree,
150

150

00:06:17,580  -->  00:06:20,220
so the root is 15.
151

151

00:06:20,220  -->  00:06:23,600
Everything to the left of the root is smaller than 15
152

152

00:06:23,600  -->  00:06:26,327
and everything to the right of the root is larger than 15
153

153

00:06:26,327  -->  00:06:29,580
and this has to hold true for every node in the tree.
154

154

00:06:29,580  -->  00:06:31,220
So if look at three,
155

155

00:06:31,220  -->  00:06:33,220
three has one child, two,
156

156

00:06:33,220  -->  00:06:34,710
and two is less than three,
157

157

00:06:34,710  -->  00:06:36,810
and so two has to go to the left.
158

158

00:06:36,810  -->  00:06:40,200
If we put two here, this would not be a binary search tree
159

159

00:06:40,200  -->  00:06:41,980
because it would violate the rule
160

160

00:06:41,980  -->  00:06:44,930
that everything to the left has to be less than,
161

161

00:06:44,930  -->  00:06:47,420
and everything to the right has to be greater than.
162

162

00:06:47,420  -->  00:06:51,080
22 is greater than 15, so it goes to the right.
163

163

00:06:51,080  -->  00:06:54,540
18 is less than 22, so it goes to the left.
164

164

00:06:54,540  -->  00:06:58,010
19 is greater than 18, so it goes to the right
165

165

00:06:58,010  -->  00:07:02,120
and 25 is greater than 22, and so it goes to the right,
166

166

00:07:02,120  -->  00:07:05,190
and so this meets the requirements of a binary search tree.
167

167

00:07:05,190  -->  00:07:08,850
Now let's say we came in and we wanna find the value of 18.
168

168

00:07:08,850  -->  00:07:11,470
So we'd come in, we compare 18 to 15,
169

169

00:07:11,470  -->  00:07:13,360
while 18 is larger than 15
170

170

00:07:13,360  -->  00:07:15,680
so we know it has to be to the right of the root,
171

171

00:07:15,680  -->  00:07:17,820
so we go down to the right child.
172

172

00:07:17,820  -->  00:07:19,670
18 is less than 22,
173

173

00:07:19,670  -->  00:07:22,910
so we know it has to be to the left of this node
174

174

00:07:22,910  -->  00:07:26,460
because everything on the left is less than 22.
175

175

00:07:26,460  -->  00:07:29,610
So we come down to the left child, 18 equals 18.
176

176

00:07:29,610  -->  00:07:30,443
Boom, we're done,
177

177

00:07:30,443  -->  00:07:33,650
we found 18 in just three steps,
178

178

00:07:33,650  -->  00:07:35,920
and so it's called a binary search tree
179

179

00:07:35,920  -->  00:07:38,810
because it's naturally organised
180

180

00:07:38,810  -->  00:07:40,710
so that you can do a binary search
181

181

00:07:40,710  -->  00:07:44,240
just by comparing values against a node
182

182

00:07:44,240  -->  00:07:46,340
and then depending on the result,
183

183

00:07:46,340  -->  00:07:48,140
going to the left or going to the right
184

184

00:07:48,140  -->  00:07:51,660
and so each time, you're cutting the values in half,
185

185

00:07:51,660  -->  00:07:53,320
the values you have to search.
186

186

00:07:53,320  -->  00:07:55,470
Now what about duplicate values?
187

187

00:07:55,470  -->  00:07:57,690
How do those work in binary search trees?
188

188

00:07:57,690  -->  00:08:00,110
Well there are a couple of approaches to this.
189

189

00:08:00,110  -->  00:08:02,580
Some implementations just say they're not allowed
190

190

00:08:02,580  -->  00:08:05,240
and so if you try to insert a duplicate value,
191

191

00:08:05,240  -->  00:08:08,150
it's not allowed and that takes care of the problem.
192

192

00:08:08,150  -->  00:08:09,490
If you want to allow them,
193

193

00:08:09,490  -->  00:08:13,170
one way to handle them is to always store duplicates
194

194

00:08:13,170  -->  00:08:16,040
either in the left subtree or the right subtree.
195

195

00:08:16,040  -->  00:08:18,500
You have to choose one and stick with it.
196

196

00:08:18,500  -->  00:08:22,000
A third approach is to have a counter with each node
197

197

00:08:22,000  -->  00:08:23,600
and so rather than adding
198

198

00:08:23,600  -->  00:08:25,510
a separate node for a duplicate value,
199

199

00:08:25,510  -->  00:08:27,000
you would just increment a counter,
200

200

00:08:27,000  -->  00:08:28,700
so if we were doing it that way
201

201

00:08:28,700  -->  00:08:31,920
and we came in and wanted to insert the value 22,
202

202

00:08:31,920  -->  00:08:36,920
rather than going, is 22 less than or greater than 15?
203

203

00:08:37,610  -->  00:08:39,710
It's greater than, so we go to the right
204

204

00:08:39,710  -->  00:08:43,270
and then we hit 22 and rather than saying, is 22?
205

205

00:08:43,270  -->  00:08:44,140
Oh, it's equal,
206

206

00:08:44,140  -->  00:08:46,240
well, we're gonna insert it to the left or the right.
207

207

00:08:46,240  -->  00:08:48,870
Instead, you just increment a counter in here to two.
208

208

00:08:48,870  -->  00:08:50,050
So that's another way.
209

209

00:08:50,050  -->  00:08:53,450
Okay, and here's another binary search tree example.
210

210

00:08:53,450  -->  00:08:55,750
So this time 25 is the root.
211

211

00:08:55,750  -->  00:08:59,210
Everything to the left of 25 is smaller than 25
212

212

00:08:59,210  -->  00:09:02,410
and everything to the right of 25 is larger than 25
213

213

00:09:02,410  -->  00:09:04,670
and that will hold true of every node.
214

214

00:09:04,670  -->  00:09:08,090
So for 20, 15 is to the left cos it's smaller.
215

215

00:09:08,090  -->  00:09:10,430
22 is to the right cos it's larger.
216

216

00:09:10,430  -->  00:09:13,100
For 27, 26 is to the left.
217

217

00:09:13,100  -->  00:09:15,480
30 is larger than 27
218

218

00:09:15,480  -->  00:09:17,660
and 29 is less than 30
219

219

00:09:17,660  -->  00:09:19,940
and 32 is greater than 30.
220

220

00:09:19,940  -->  00:09:22,290
Okay so how would we build this tree?
221

221

00:09:22,290  -->  00:09:25,130
What insertions did we do to get this tree?
222

222

00:09:25,130  -->  00:09:27,630
Now the order in which you insert the nodes
223

223

00:09:27,630  -->  00:09:30,130
is gonna influence how the tree ultimately looks
224

224

00:09:30,130  -->  00:09:31,910
and you'll understand this a little better
225

225

00:09:31,910  -->  00:09:33,590
as we go through this insertion.
226

226

00:09:33,590  -->  00:09:35,790
So the first node we're gonna insert is 25
227

227

00:09:35,790  -->  00:09:37,170
cos that ended up at the root
228

228

00:09:37,170  -->  00:09:41,490
and when you insert a value into an empty binary search tree
229

229

00:09:41,490  -->  00:09:43,020
you always put it at the root.
230

230

00:09:43,020  -->  00:09:46,170
So as I said, the order in which you insert items
231

231

00:09:46,170  -->  00:09:47,840
can influence what the tree looks like
232

232

00:09:47,840  -->  00:09:50,120
because if we started with another value
233

233

00:09:50,120  -->  00:09:51,700
the root would be a different value
234

234

00:09:51,700  -->  00:09:54,927
and then the comparisons would be different obviously
235

235

00:09:54,927  -->  00:09:57,290
and we wouldn't be comparing against 25.
236

236

00:09:57,290  -->  00:09:59,500
Okay, so next we're gonna want to insert 20.
237

237

00:09:59,500  -->  00:10:02,290
20 is less than 25 so we put it to the left,
238

238

00:10:02,290  -->  00:10:03,820
then we insert 15.
239

239

00:10:03,820  -->  00:10:06,690
15 is less than 25, so we go to the left.
240

240

00:10:06,690  -->  00:10:09,700
15 is less than 20, so we go to the left
241

241

00:10:09,700  -->  00:10:12,560
and we hit an empty spot and so that's where it goes.
242

242

00:10:12,560  -->  00:10:16,830
For 27, 27 is greater than 25, so we put it to the right.
243

243

00:10:16,830  -->  00:10:18,810
Now if you haven't realised this already
244

244

00:10:18,810  -->  00:10:19,900
when we're doing insertions,
245

245

00:10:19,900  -->  00:10:23,310
we always insert the node into the first empty spot we find.
246

246

00:10:23,310  -->  00:10:25,210
So where do you think 30's gonna go?
247

247

00:10:25,210  -->  00:10:28,970
Well 30 is greater than 25, so we're gonna go to the right.
248

248

00:10:28,970  -->  00:10:32,340
30 is greater than 27, so we're gonna go to the right
249

249

00:10:32,340  -->  00:10:36,980
and so 30 ends up getting stored as the right child of 27.
250

250

00:10:36,980  -->  00:10:39,920
For 29, 29 is greater than 25,
251

251

00:10:39,920  -->  00:10:41,720
so we're gonna go to the right.
252

252

00:10:41,720  -->  00:10:45,200
29 is greater than 27, so we're gonna go to the right.
253

253

00:10:45,200  -->  00:10:49,180
29 is less than 30, and so we're gonna go to the left.
254

254

00:10:49,180  -->  00:10:52,290
For 26, that's gonna end up here
255

255

00:10:52,290  -->  00:10:54,070
as the left child of 27
256

256

00:10:54,070  -->  00:10:57,600
because 26 is greater than 25, so we go to the right.
257

257

00:10:57,600  -->  00:11:00,730
26 is less than 27, so we go to the left.
258

258

00:11:00,730  -->  00:11:03,450
Can you figure out where 22 is gonna end up?
259

259

00:11:03,450  -->  00:11:06,980
Well, 22 is less than 25, so we go to the left.
260

260

00:11:06,980  -->  00:11:10,020
22 is greater than 20, so we go to the right
261

261

00:11:10,020  -->  00:11:13,550
and finally for 32, can you figure this one out?
262

262

00:11:13,550  -->  00:11:16,780
32 is greater than 25, so we go to the right.
263

263

00:11:16,780  -->  00:11:20,060
32 is greater than 27, so we go to the right.
264

264

00:11:20,060  -->  00:11:23,170
32 is greater than 30, so we go to the right
265

265

00:11:23,170  -->  00:11:24,630
and that's how we built our tree.
266

266

00:11:24,630  -->  00:11:28,130
Now if we mixed up the insertion order of these values,
267

267

00:11:28,130  -->  00:11:29,190
we shuffled these,
268

268

00:11:29,190  -->  00:11:31,320
then we'd end up building a different tree
269

269

00:11:31,320  -->  00:11:33,530
because a different value's gonna go into the root
270

270

00:11:33,530  -->  00:11:36,970
and our comparisons may end up putting 20 over here.
271

271

00:11:36,970  -->  00:11:40,300
If we ended up with 15 as the root,
272

272

00:11:40,300  -->  00:11:42,800
then 20 would end up in the right subtree
273

273

00:11:42,800  -->  00:11:45,150
and so the order in which you do insertions
274

274

00:11:45,150  -->  00:11:47,740
will influence what your tree looks like
275

275

00:11:47,740  -->  00:11:48,870
when you've finished building it.
276

276

00:11:48,870  -->  00:11:50,930
Now one really important characteristic
277

277

00:11:50,930  -->  00:11:52,420
to note for binary tree,
278

278

00:11:52,420  -->  00:11:54,620
is you can get the minimum value in the tree
279

279

00:11:54,620  -->  00:11:57,230
just by following the left edges
280

280

00:11:57,230  -->  00:11:59,020
all the way down to the leaf
281

281

00:11:59,020  -->  00:12:02,658
and so the minimum value in this tree is 15.
282

282

00:12:02,658  -->  00:12:05,580
Cos if we follow the left edges until we hit a leaf,
283

283

00:12:05,580  -->  00:12:06,810
we hit 15
284

284

00:12:06,810  -->  00:12:08,880
and if you want the maximum value in the tree
285

285

00:12:08,880  -->  00:12:11,660
you do the same thing with the edges on the right.
286

286

00:12:11,660  -->  00:12:15,121
So you follow the edges down and we hit 32
287

287

00:12:15,121  -->  00:12:18,230
and 32 is the maximum value in the tree
288

288

00:12:18,230  -->  00:12:20,390
and so when you have a binary search tree
289

289

00:12:20,390  -->  00:12:23,650
you can get the minimum and maximum values very quickly.
290

290

00:12:23,650  -->  00:12:25,550
You just travel all the way down the left
291

291

00:12:25,550  -->  00:12:27,320
for the minimum value
292

292

00:12:27,320  -->  00:12:30,210
and all the way down the right for the maximum value.
293

293

00:12:30,210  -->  00:12:32,440
Now this may sound counter intuitive
294

294

00:12:32,440  -->  00:12:37,440
but if you insert sorted data into a binary search tree,
295

295

00:12:37,510  -->  00:12:39,910
you're gonna end up with this situation.
296

296

00:12:39,910  -->  00:12:43,620
Now in this case, the data is sorted in descending order
297

297

00:12:43,620  -->  00:12:46,200
and so we insert 25.
298

298

00:12:46,200  -->  00:12:49,880
20 is less than 25 so we're gonna put 20 here.
299

299

00:12:49,880  -->  00:12:52,660
15 is less than 20, so it's gonna go to the left
300

300

00:12:52,660  -->  00:12:56,090
and 10 is less than 15, so it goes to the left.
301

301

00:12:56,090  -->  00:12:58,030
If we had them in ascending order,
302

302

00:12:58,030  -->  00:13:00,480
we'd get the same situation but to the right.
303

303

00:13:00,480  -->  00:13:03,040
So if we put 10 first and then we put 15,
304

304

00:13:03,040  -->  00:13:06,110
15 would go to the right and then we put 20,
305

305

00:13:06,110  -->  00:13:07,150
20 would go to the right
306

306

00:13:07,150  -->  00:13:08,750
and 25 would go to the right.
307

307

00:13:08,750  -->  00:13:10,340
We end up with this situation
308

308

00:13:10,340  -->  00:13:12,610
when we insert data that's already been sorted
309

309

00:13:12,610  -->  00:13:14,470
and this is not a good situation.
310

310

00:13:14,470  -->  00:13:16,540
This is essentially a linked list
311

311

00:13:16,540  -->  00:13:19,270
and so rather than having a binary search tree
312

312

00:13:19,270  -->  00:13:22,150
and we can search it in O(logn) time,
313

313

00:13:22,150  -->  00:13:24,360
we end up with a linked list.
314

314

00:13:24,360  -->  00:13:26,220
This is essentially a linked list
315

315

00:13:26,220  -->  00:13:30,200
and if you search this you're not gonna get O(logn) time,
316

316

00:13:30,200  -->  00:13:32,590
you're gonna get linear time, O(n).
317

317

00:13:32,590  -->  00:13:35,420
Ideally when you're building a binary search tree,
318

318

00:13:35,420  -->  00:13:38,170
you try to keep the tree as balanced as possible
319

319

00:13:38,170  -->  00:13:40,537
and that means that the heights of the left subtree
320

320

00:13:40,537  -->  00:13:43,780
and the right subtree, don't differ by much.
321

321

00:13:43,780  -->  00:13:46,560
And so there are binary search trees
322

322

00:13:46,560  -->  00:13:49,580
that are self balancing binary search trees.
323

323

00:13:49,580  -->  00:13:51,903
After every insertion or deletion,
324

324

00:13:51,903  -->  00:13:53,220
they look at the tree
325

325

00:13:53,220  -->  00:13:56,170
and if the tree is starting to get out of whack,
326

326

00:13:56,170  -->  00:13:59,370
they rebalance the tree by shifting nodes around.
327

327

00:13:59,370  -->  00:14:01,090
We're not gonna look at them in this course
328

328

00:14:01,090  -->  00:14:02,480
because they're more advanced
329

329

00:14:02,480  -->  00:14:04,750
but I just wanted to mention that they exist.
330

330

00:14:04,750  -->  00:14:06,600
Two common ones that you'll here about
331

331

00:14:06,600  -->  00:14:10,030
are AVL trees and red-black trees.
332

332

00:14:10,030  -->  00:14:11,550
So with that out of the way,
333

333

00:14:11,550  -->  00:14:14,960
let's implement a binary search tree.
334

334

00:14:14,960  -->  00:14:16,510
I'll see you in the next video.
