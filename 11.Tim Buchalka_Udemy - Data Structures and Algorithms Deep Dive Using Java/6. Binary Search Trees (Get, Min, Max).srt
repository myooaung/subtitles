1
1

00:00:00,135  -->  00:00:01,484
(lively music)
2

2

00:00:01,484  -->  00:00:02,762
(logo whooshing)
3

3

00:00:02,762  -->  00:00:05,380
(keyboard clicking)
4

4

00:00:05,380  -->  00:00:09,180
<v Sarah>All right, so in the last video we wrote a method</v>
5

5

00:00:09,180  -->  00:00:13,550
for adding values to the tree.
6

6

00:00:13,550  -->  00:00:15,740
Now let's write a get method
7

7

00:00:15,740  -->  00:00:17,710
so that we can get values from the tree.
8

8

00:00:17,710  -->  00:00:19,420
This won't be very complicated.
9

9

00:00:19,420  -->  00:00:22,430
It'll be similar to what we did for insert.
10

10

00:00:22,430  -->  00:00:25,090
We're gonna start in the TreeNode class.
11

11

00:00:25,090  -->  00:00:26,570
I noticed that in the last video,
12

12

00:00:26,570  -->  00:00:30,520
I actually put the insert method and the traverse method
13

13

00:00:30,520  -->  00:00:32,420
above the constructor.
14

14

00:00:32,420  -->  00:00:33,550
Nothing wrong with that,
15

15

00:00:33,550  -->  00:00:36,130
but I like to have the constructor at the top,
16

16

00:00:36,130  -->  00:00:39,860
so I've moved the constructor up above the methods.
17

17

00:00:39,860  -->  00:00:42,840
I'm gonna insert he get method right here.
18

18

00:00:42,840  -->  00:00:47,180
We're gonna say public TreeNode
19

19

00:00:47,180  -->  00:00:51,370
will return the TreeNode for the value get,
20

20

00:00:51,370  -->  00:00:54,430
and of course we need the value we're searching for.
21

21

00:00:54,430  -->  00:00:55,940
We're gonna do something very similar
22

22

00:00:55,940  -->  00:00:57,220
to what we did in insert.
23

23

00:00:57,220  -->  00:01:01,500
We're gonna check the value against the value of the node,
24

24

00:01:01,500  -->  00:01:02,760
and if they're equal,
25

25

00:01:02,760  -->  00:01:05,260
then we found the node that we're looking for.
26

26

00:01:05,260  -->  00:01:06,380
If they're not equal,
27

27

00:01:06,380  -->  00:01:10,220
we're going to search the left subtree or the right subtree,
28

28

00:01:10,220  -->  00:01:12,470
depending on whether the value we're looking for
29

29

00:01:12,470  -->  00:01:16,110
is less than or greater than the value of this tree node.
30

30

00:01:16,110  -->  00:01:20,330
I'm gonna say if value equals data, we're done,
31

31

00:01:20,330  -->  00:01:21,960
so we're gonna return this.
32

32

00:01:21,960  -->  00:01:24,930
We're gonna return this tree node.
33

33

00:01:24,930  -->  00:01:26,400
If that's not the case,
34

34

00:01:26,400  -->  00:01:28,060
we're gonna say if
35

35

00:01:29,250  -->  00:01:32,360
value is less than data,
36

36

00:01:32,360  -->  00:01:34,940
then we wanna search the left subtree,
37

37

00:01:34,940  -->  00:01:38,400
as long as the node has a left subtree,
38

38

00:01:38,400  -->  00:01:41,800
and so we're gonna do the similar checks that we did here.
39

39

00:01:41,800  -->  00:01:43,913
We're gonna say if leftChild
40

40

00:01:45,950  -->  00:01:48,123
is not equal to null,
41

41

00:01:49,300  -->  00:01:54,183
then we're gonna say return leftChild.get value,
42

42

00:01:55,160  -->  00:01:57,140
and so we're gonna down the rabbit hole.
43

43

00:01:57,140  -->  00:02:00,440
We're going to call this method recursively,
44

44

00:02:00,440  -->  00:02:04,400
and we're going to look for the value
45

45

00:02:04,400  -->  00:02:05,787
in the left subtree.
46

46

00:02:05,787  -->  00:02:08,040
If the value isn't equal to the data,
47

47

00:02:08,040  -->  00:02:09,550
and it's not less than the data,
48

48

00:02:09,550  -->  00:02:13,083
then it has to be greater than the data, so we'll say else,
49

49

00:02:14,220  -->  00:02:16,550
and we could go else if rightChild,
50

50

00:02:16,550  -->  00:02:19,800
but to keep it kind of symmetrical I'll put the if in here.
51

51

00:02:19,800  -->  00:02:21,357
If rightChild
52

52

00:02:24,530  -->  00:02:26,123
is not equal to null,
53

53

00:02:27,600  -->  00:02:31,540
then we wanna return rightChild.get value,
54

54

00:02:31,540  -->  00:02:34,360
and so in this case we're gonna go down the rabbit hole
55

55

00:02:34,360  -->  00:02:36,140
and look at the right subtree.
56

56

00:02:36,140  -->  00:02:38,360
If the value is not equal to the data,
57

57

00:02:38,360  -->  00:02:40,090
it never equals any of the data,
58

58

00:02:40,090  -->  00:02:43,790
we'll actually come down to this line of code,
59

59

00:02:43,790  -->  00:02:46,040
and we're gonna return null.
60

60

00:02:46,040  -->  00:02:47,260
If we make it down here,
61

61

00:02:47,260  -->  00:02:49,930
it means we couldn't find the value we were looking for
62

62

00:02:49,930  -->  00:02:50,800
in the tree,
63

63

00:02:50,800  -->  00:02:53,660
and so we're gonna return a null TreeNode.
64

64

00:02:53,660  -->  00:02:56,910
Now that we have a get method in the TreeNode class,
65

65

00:02:56,910  -->  00:02:58,783
let's add one to the Tree class.
66

66

00:02:59,920  -->  00:03:03,620
We'll say public TreeNode get,
67

67

00:03:03,620  -->  00:03:04,823
and we need the value.
68

68

00:03:06,680  -->  00:03:09,493
We'll say if root is not equal to null,
69

69

00:03:10,400  -->  00:03:13,030
then we'll just call the get method on root.
70

70

00:03:13,030  -->  00:03:15,743
We'll say return root.get value.
71

71

00:03:16,730  -->  00:03:19,490
Now, if the root is null, we'll return null,
72

72

00:03:19,490  -->  00:03:22,700
because that obviously means that the tree is empty,
73

73

00:03:22,700  -->  00:03:25,240
and so the value that the caller is looking for
74

74

00:03:25,240  -->  00:03:27,020
is not in the tree.
75

75

00:03:27,020  -->  00:03:28,970
Okay, so let's go back to our main method,
76

76

00:03:28,970  -->  00:03:31,190
and let's look for a couple of nodes here,
77

77

00:03:31,190  -->  00:03:34,520
so we'll say intTree.get,
78

78

00:03:34,520  -->  00:03:36,973
and let's look for 27.
79

79

00:03:38,690  -->  00:03:40,310
Actually, I'll print these out
80

80

00:03:40,310  -->  00:03:42,370
so we know that we actually found something,
81

81

00:03:42,370  -->  00:03:47,330
so System.out.println, intTree.get 27,
82

82

00:03:47,330  -->  00:03:50,167
and System.out.println, intTree.get,
83

83

00:03:51,715  -->  00:03:52,548
let's get 17,
84

84

00:03:55,840  -->  00:03:58,923
and let's get a value that doesn't exist in the tree.
85

85

00:03:59,770  -->  00:04:01,063
Let's get 8888.
86

86

00:04:03,250  -->  00:04:04,683
Okay, so let's run.
87

87

00:04:08,520  -->  00:04:10,630
This is the result of our traversal.
88

88

00:04:10,630  -->  00:04:13,653
I'm gonna put a System.out.println right after here.
89

89

00:04:16,410  -->  00:04:19,100
In our traversal, if you remember, we're just using print,
90

90

00:04:19,100  -->  00:04:20,670
and so it's not starting a new line,
91

91

00:04:20,670  -->  00:04:24,290
so let's run this again just to clean up the output a bit.
92

92

00:04:24,290  -->  00:04:26,760
Okay, so when we look for 27,
93

93

00:04:26,760  -->  00:04:29,620
we're getting a node with the value being 27,
94

94

00:04:29,620  -->  00:04:32,020
when we look for 17, we're finding 17,
95

95

00:04:32,020  -->  00:04:35,420
and of course when we look for 8888, we get null.
96

96

00:04:35,420  -->  00:04:37,340
That's the get method.
97

97

00:04:37,340  -->  00:04:38,610
Most of the work is done
98

98

00:04:38,610  -->  00:04:42,430
in the TreeNode version of the method,
99

99

00:04:42,430  -->  00:04:46,650
and as usual we call it on the root from the Tree class.
100

100

00:04:46,650  -->  00:04:48,280
Once again, if we make it down here
101

101

00:04:48,280  -->  00:04:50,000
it means the value isn't in the tree.
102

102

00:04:50,000  -->  00:04:52,790
We're gonna make it down here when we hit a leaf node
103

103

00:04:52,790  -->  00:04:54,980
and the value is not equal to the data,
104

104

00:04:54,980  -->  00:04:57,980
because in that case, if the value is less than the data,
105

105

00:04:57,980  -->  00:05:01,530
well, the left child's gonna be null, so we just drop out,
106

106

00:05:01,530  -->  00:05:03,020
or if it's greater than the data,
107

107

00:05:03,020  -->  00:05:04,500
then the right child will be null,
108

108

00:05:04,500  -->  00:05:06,620
'cause we're dealing with a leaf and we'll drop out,
109

109

00:05:06,620  -->  00:05:08,930
or it's possible we're not dealing with a leaf,
110

110

00:05:08,930  -->  00:05:12,270
and the value is less than the node,
111

111

00:05:12,270  -->  00:05:15,290
but there's no left child, there's only a right child,
112

112

00:05:15,290  -->  00:05:16,340
or vice versa,
113

113

00:05:16,340  -->  00:05:18,950
when the value is greater than the value in the node,
114

114

00:05:18,950  -->  00:05:21,310
there could be a left child but no right child.
115

115

00:05:21,310  -->  00:05:23,310
Basically, once we hit a node
116

116

00:05:23,310  -->  00:05:25,270
and the direction we wanna go in
117

117

00:05:25,270  -->  00:05:27,710
doesn't have a child in that position,
118

118

00:05:27,710  -->  00:05:29,970
we don't do anything in here, we just return null,
119

119

00:05:29,970  -->  00:05:32,970
and that basically says that the value isn't in the tree.
120

120

00:05:32,970  -->  00:05:35,810
Okay, so we talked about the fact that's it's really easy
121

121

00:05:35,810  -->  00:05:37,520
to get the minimum and maximum values
122

122

00:05:37,520  -->  00:05:39,190
from a binary search tree.
123

123

00:05:39,190  -->  00:05:43,030
Let's code min and max methods to do this.
124

124

00:05:43,030  -->  00:05:44,730
We'll start in the TreeNode class,
125

125

00:05:44,730  -->  00:05:46,810
and I'll put them under the get method.
126

126

00:05:46,810  -->  00:05:48,420
Let's code the min method first,
127

127

00:05:48,420  -->  00:05:49,320
and then the max method
128

128

00:05:49,320  -->  00:05:51,980
will basically be a mirror image of that.
129

129

00:05:51,980  -->  00:05:53,640
We'll say public int min.
130

130

00:05:53,640  -->  00:05:57,720
Now, I could return a TreeNode here,
131

131

00:05:57,720  -->  00:06:02,190
but when we implement delete, we're actually gonna call the,
132

132

00:06:02,190  -->  00:06:04,370
I can't remember if it's the min or max method.
133

133

00:06:04,370  -->  00:06:06,140
I think it might be this min method,
134

134

00:06:06,140  -->  00:06:09,520
and we're gonna want an Integer returned, not a TreeNode.
135

135

00:06:09,520  -->  00:06:10,770
We could return the TreeNode,
136

136

00:06:10,770  -->  00:06:13,010
but then we have to call getData on it,
137

137

00:06:13,010  -->  00:06:15,840
and to avoid that I'm just gonna return an int.
138

138

00:06:15,840  -->  00:06:18,730
Okay, so to get the min, once again we start at the root
139

139

00:06:18,730  -->  00:06:21,930
and we travel all the way down the left edges.
140

140

00:06:21,930  -->  00:06:25,140
If this node doesn't have a left child,
141

141

00:06:25,140  -->  00:06:27,290
then we have found the minimum value,
142

142

00:06:27,290  -->  00:06:30,410
because that means we've been travelling down left edges,
143

143

00:06:30,410  -->  00:06:32,560
and we've hit a node that doesn't have a left child.
144

144

00:06:32,560  -->  00:06:35,480
That means this node is the minimum value.
145

145

00:06:35,480  -->  00:06:39,133
We're gonna say if leftChild equals null,
146

146

00:06:40,090  -->  00:06:42,400
then we're gonna return data.
147

147

00:06:42,400  -->  00:06:45,823
Remember, we're just returning the int, not the TreeNode,
148

148

00:06:45,823  -->  00:06:47,890
and so if the left child is null,
149

149

00:06:47,890  -->  00:06:51,293
this is the node that contains the minimum value.
150

150

00:06:52,160  -->  00:06:55,170
Otherwise, we wanna continue travelling down the left edges,
151

151

00:06:55,170  -->  00:06:57,833
so we're gonna return leftChild.min.
152

152

00:06:59,060  -->  00:07:01,100
That's pretty straightforward.
153

153

00:07:01,100  -->  00:07:02,580
We travel down the left edges
154

154

00:07:02,580  -->  00:07:04,910
until we hit a node that doesn't have a leftChild,
155

155

00:07:04,910  -->  00:07:07,310
and once we hit that node, that's the minimum,
156

156

00:07:07,310  -->  00:07:10,460
and so if this guy here doesn't have a leftChild,
157

157

00:07:10,460  -->  00:07:11,720
that's the minimum value.
158

158

00:07:11,720  -->  00:07:13,810
If it does have a leftChild,
159

159

00:07:13,810  -->  00:07:16,260
we need to keep travelling down the left edges.
160

160

00:07:16,260  -->  00:07:17,760
Now we're gonna add the max,
161

161

00:07:17,760  -->  00:07:20,530
and I'm sure you could probably write this one yourself now.
162

162

00:07:20,530  -->  00:07:21,980
With the max we start at the root
163

163

00:07:21,980  -->  00:07:26,793
and travel down the right edges, so I'll say public int max,
164

164

00:07:27,750  -->  00:07:30,660
and we're gonna say if rightChild equals null,
165

165

00:07:30,660  -->  00:07:32,853
then we have found the maximum value.
166

166

00:07:34,030  -->  00:07:37,643
Otherwise, we wanna just go down to the right,
167

167

00:07:39,120  -->  00:07:41,480
except we wanna call max, not min.
168

168

00:07:41,480  -->  00:07:42,570
If you copy and paste,
169

169

00:07:42,570  -->  00:07:45,220
make sure you change this one here as well.
170

170

00:07:45,220  -->  00:07:46,400
That's it for TreeNode.
171

171

00:07:46,400  -->  00:07:49,250
Let's go to our Tree class and add the min and max methods
172

172

00:07:49,250  -->  00:07:50,120
that are gonna call this,
173

173

00:07:50,120  -->  00:07:52,440
and of course by now you've probably caught on
174

174

00:07:52,440  -->  00:07:54,250
that we'll just be calling min or max
175

175

00:07:54,250  -->  00:07:56,663
on the root if the root isn't null.
176

176

00:07:57,820  -->  00:08:00,053
We'll say public int min.
177

177

00:08:01,980  -->  00:08:06,610
If the root equals null, what do we wanna return here?
178

178

00:08:06,610  -->  00:08:09,193
I'm gonna return Integer.MIN_VALUE.
179

179

00:08:10,280  -->  00:08:13,600
That's the smallest value you can put into an Integer.
180

180

00:08:13,600  -->  00:08:15,400
Now, of course, this makes the assumption
181

181

00:08:15,400  -->  00:08:19,490
that the tree doesn't contain, or can't contain that value,
182

182

00:08:19,490  -->  00:08:21,260
but this is just an implementation
183

183

00:08:21,260  -->  00:08:24,380
to show you how trees are implemented under the covers,
184

184

00:08:24,380  -->  00:08:25,700
or to give you a taste of that.
185

185

00:08:25,700  -->  00:08:29,413
So, for this we'll just return Integer.MIN_VALUE.
186

186

00:08:30,970  -->  00:08:32,530
If this is an empty tree,
187

187

00:08:32,530  -->  00:08:34,070
we're gonna signal that to the caller
188

188

00:08:34,070  -->  00:08:36,370
by returning the absolute smallest value
189

189

00:08:36,370  -->  00:08:38,390
you can store in an Integer.
190

190

00:08:38,390  -->  00:08:42,643
Otherwise, we're gonna return root.min.
191

191

00:08:44,510  -->  00:08:46,200
The same thing, of course, for max,
192

192

00:08:46,200  -->  00:08:48,470
except the only thing we'll change is
193

193

00:08:48,470  -->  00:08:50,133
we'll return Integer.MAX_VALUE,
194

194

00:08:51,020  -->  00:08:53,760
the largest integer you can store in an Integer
195

195

00:08:53,760  -->  00:08:56,110
if the tree is empty.
196

196

00:08:56,110  -->  00:08:58,493
Otherwise, we'll return root.max.
197

197

00:08:59,500  -->  00:09:01,503
Public int max,
198

198

00:09:02,660  -->  00:09:04,450
if the root equals null,
199

199

00:09:04,450  -->  00:09:07,923
then we're gonna return Integer.MAX_VALUE.
200

200

00:09:10,310  -->  00:09:13,893
Otherwise, we'll return root.max.
201

201

00:09:15,210  -->  00:09:16,043
That's it.
202

202

00:09:16,043  -->  00:09:18,290
That's it for finding the minimum and maximum values.
203

203

00:09:18,290  -->  00:09:20,270
Nothing complicated here.
204

204

00:09:20,270  -->  00:09:22,470
Let's go to our main method,
205

205

00:09:22,470  -->  00:09:25,660
and let's print out our minimum and maximum values.
206

206

00:09:25,660  -->  00:09:26,493
I'll say
207

207

00:09:26,493  -->  00:09:31,250
System.out.println intTree.min,
208

208

00:09:33,490  -->  00:09:38,213
and System.out.println intTree.max.
209

209

00:09:40,560  -->  00:09:43,240
I'll comment out all these guys
210

210

00:09:43,240  -->  00:09:45,440
so we're just seeing the mins and the maxes.
211

211

00:09:46,290  -->  00:09:50,280
For the max value, I believe that's 32,
212

212

00:09:50,280  -->  00:09:53,730
and the minimum value is 15.
213

213

00:09:53,730  -->  00:09:57,640
So, we're expecting 15 for min and 32 for max,
214

214

00:09:57,640  -->  00:09:59,083
so let's give it a whirl.
215

215

00:10:01,220  -->  00:10:04,090
There you go: we got 15 for our minimum value
216

216

00:10:04,090  -->  00:10:06,860
and 32 for our maximum value.
217

217

00:10:06,860  -->  00:10:09,100
That's all there is to finding nodes
218

218

00:10:09,100  -->  00:10:12,050
and finding the minimum and maximum value
219

219

00:10:12,050  -->  00:10:13,733
in a binary search tree.
220

220

00:10:15,620  -->  00:10:17,560
We need a way to delete nodes now,
221

221

00:10:17,560  -->  00:10:19,910
and delete can be a little more complicated
222

222

00:10:19,910  -->  00:10:22,520
because we have children to worry about.
223

223

00:10:22,520  -->  00:10:25,490
We'll start looking at delete in the next video.
224

224

00:10:25,490  -->  00:10:26,440
I'll see you there.
