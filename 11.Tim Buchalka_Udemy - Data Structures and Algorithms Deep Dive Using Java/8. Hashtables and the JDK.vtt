WEBVTT
1
1

00:00:05.203  -->  00:00:06.187
<v Instructor>Okay, so now that we've seen</v>
2

2

00:00:06.187  -->  00:00:07.615
how hashtables work,
3

3

00:00:07.615  -->  00:00:09.966
let's look at what's available in the JDK.
4

4

00:00:09.966  -->  00:00:14.251
Now, the primary interface for hashtables is Map.
5

5

00:00:14.251  -->  00:00:17.487
And as we can see K is the type of keys
6

6

00:00:17.487  -->  00:00:20.925
maintained by this map, and V is the type of map value,
7

7

00:00:20.925  -->  00:00:24.965
so it's a key value pair. And the Map interface
8

8

00:00:24.965  -->  00:00:27.781
is an object that maps keys to values.
9

9

00:00:27.781  -->  00:00:31.445
Now it says here a map cannot contain duplicate keys,
10

10

00:00:31.445  -->  00:00:34.375
each key can map, at most, to one value.
11

11

00:00:34.375  -->  00:00:38.099
Now, what this means is, it doesn't mean that there cannot
12

12

00:00:38.099  -->  00:00:41.523
be collisions. It's not talking about the hashed values.
13

13

00:00:41.523  -->  00:00:43.248
In our case, if we were to add
14

14

00:00:43.248  -->  00:00:46.741
an employee with the key 'Smith', and then
15

15

00:00:46.741  -->  00:00:50.511
we added another employee and we also used the key 'Smith',
16

16

00:00:50.511  -->  00:00:54.343
the first employee that we added would be replaced
17

17

00:00:54.343  -->  00:00:57.375
by the second employee. And so there's only ever
18

18

00:00:57.375  -->  00:01:00.633
one employee in the table that can be associated
19

19

00:01:00.633  -->  00:01:03.443
with the key 'Smith'. And that makes sense, right?
20

20

00:01:03.443  -->  00:01:06.557
Because otherwise, if we come in and we provide
21

21

00:01:06.557  -->  00:01:08.736
the key 'Smith', there would be no way of knowing
22

22

00:01:08.736  -->  00:01:12.427
which employee we want. Now, we didn't handle that
23

23

00:01:12.427  -->  00:01:15.046
in our implementations of Hashtable.
24

24

00:01:15.046  -->  00:01:17.960
But our implementations, the two that we did for
25

25

00:01:17.960  -->  00:01:20.809
linear probing and chaining in the simple one,
26

26

00:01:20.809  -->  00:01:23.666
they're not robust implementations. I mean, if you
27

27

00:01:23.666  -->  00:01:25.971
were going to use those hashtables in
28

28

00:01:25.971  -->  00:01:28.234
a real-world application, then we would have a lot more
29

29

00:01:28.234  -->  00:01:30.371
work to do. I mean, we're not handling resizing
30

30

00:01:30.371  -->  00:01:33.311
or anything like that. That's what this means here,
31

31

00:01:33.311  -->  00:01:35.490
it just means that we can't use the same key
32

32

00:01:35.490  -->  00:01:38.167
to add more than one value, because otherwise
33

33

00:01:38.167  -->  00:01:42.095
on retrieval there's no way to know which value we want.
34

34

00:01:42.095  -->  00:01:44.975
Okay, so let's go to the HashMap class,
35

35

00:01:44.975  -->  00:01:49.045
that implements Map. And this a concrete class,
36

36

00:01:49.045  -->  00:01:51.369
so this is what you'd actually use.
37

37

00:01:51.369  -->  00:01:53.485
And it says, of course, it's based on an implementation
38

38

00:01:53.485  -->  00:01:57.167
of the Map interface. This implementation permits
39

39

00:01:57.167  -->  00:02:00.672
null values in the null key. It says that it provides
40

40

00:02:00.672  -->  00:02:04.136
constant time performance for the basic operations.
41

41

00:02:04.136  -->  00:02:07.174
Now, as you read on you'll see, of course,
42

42

00:02:07.174  -->  00:02:11.313
that if it has to resize the array, and do re-hashing,
43

43

00:02:11.313  -->  00:02:13.338
then you're not gonna get constant time.
44

44

00:02:13.338  -->  00:02:15.589
But there's a good discussion in here about
45

45

00:02:15.589  -->  00:02:17.803
the initial capacity and the load factor.
46

46

00:02:17.803  -->  00:02:20.537
You can set the load factor that you want,
47

47

00:02:20.537  -->  00:02:24.779
and that means that when that load factor is exceeded,
48

48

00:02:24.779  -->  00:02:26.862
the hashtable is resized,
49

49

00:02:27.712  -->  00:02:29.728
the default is '.75'.
50

50

00:02:29.728  -->  00:02:31.691
The implementation is not synchronised,
51

51

00:02:31.691  -->  00:02:33.745
so if you wanna use it for multiple threads,
52

52

00:02:33.745  -->  00:02:35.999
they suggest that you wrap it,
53

53

00:02:35.999  -->  00:02:40.059
using the Collections.sycronizedMap method.
54

54

00:02:40.059  -->  00:02:43.976
So let's go back to Intellij and use a HashMap.
55

55

00:02:47.890  -->  00:02:50.103
Okay, so here we are back in Intellij.
56

56

00:02:50.103  -->  00:02:53.233
I've added the usual four employees, and our employee class.
57

57

00:02:53.233  -->  00:02:55.883
And let's go ahead and create a HashMap.
58

58

00:02:55.883  -->  00:02:57.958
So we'll say 'Map',
59

59

00:02:57.958  -->  00:03:00.625
and our key is a string and our value
60

60

00:03:00.625  -->  00:03:03.979
will be an employee. No need for us to worry about
61

61

00:03:03.979  -->  00:03:06.970
stored employee and everything, we're not the ones
62

62

00:03:06.970  -->  00:03:10.349
writing the HashMap now. Because, of course, you most likely
63

63

00:03:10.349  -->  00:03:13.240
would not implement your own hashtable in Java,
64

64

00:03:13.240  -->  00:03:15.377
you would use one of the classes in the JDK.
65

65

00:03:15.377  -->  00:03:18.414
So, somebody else has already written the hashtable
66

66

00:03:18.414  -->  00:03:20.945
for us, and has taken care of collisions.
67

67

00:03:20.945  -->  00:03:24.852
So I'll say 'hashMap', and let me just bring in
68

68

00:03:24.852  -->  00:03:26.778
the import here,
69

69

00:03:26.778  -->  00:03:27.985
equals...
70

70

00:03:27.985  -->  00:03:29.392
'new'...
71

71

00:03:29.392  -->  00:03:30.725
'HashMap' and...
72

72

00:03:32.468  -->  00:03:35.301
you want a string and an employee.
73

73

00:03:36.980  -->  00:03:38.844
So I'll say 'hashMap.put'
74

74

00:03:38.844  -->  00:03:42.844
and we'll use 'Jones' as the key and Jane Jones.
75

75

00:03:44.097  -->  00:03:45.430
'hashMap.put'...
76

76

00:03:46.276  -->  00:03:47.109
'Doe'...
77

77

00:03:48.734  -->  00:03:49.984
'john Doe'. And
78

78

00:03:50.937  -->  00:03:52.270
'hashMap.put'...
79

79

00:03:53.318  -->  00:03:54.151
'Smith'...
80

80

00:03:55.884  -->  00:03:56.967
'mary Smith'.
81

81

00:03:58.019  -->  00:04:02.443
And let's print out our hashtable now, or our HashMap
82

82

00:04:02.443  -->  00:04:04.297
which is essentially a hashtable.
83

83

00:04:04.297  -->  00:04:07.448
We can do it one of two ways, actually there's probably
84

84

00:04:07.448  -->  00:04:09.719
several ways we can do it, but I'll show you two.
85

85

00:04:09.719  -->  00:04:11.543
So the first one is to use an Iterator.
86

86

00:04:11.543  -->  00:04:15.657
So we'll say 'Iterator', and we're gonna just print out
87

87

00:04:15.657  -->  00:04:20.324
the employees. So we'll say 'Iterator' 'Employee' 'iterator'
88

88

00:04:20.324  -->  00:04:21.157
equals...
89

89

00:04:22.799  -->  00:04:23.632
'hashMap.'
90

90

00:04:23.632  -->  00:04:24.465
And...
91

91

00:04:24.465  -->  00:04:27.663
I just wanna print out the employees and so
92

92

00:04:27.663  -->  00:04:30.330
I'm gonna call the values method here,
93

93

00:04:30.330  -->  00:04:33.546
this gives us the values in the HashMap
94

94

00:04:33.546  -->  00:04:38.188
and I want the Iterator for the values. And then we'll say
95

95

00:04:38.188  -->  00:04:40.605
'while' 'iterator.hasNext'...
96

96

00:04:43.500  -->  00:04:45.417
'System.out.println'...
97

97

00:04:46.898  -->  00:04:48.148
'iterator.next'
98

98

00:04:49.656  -->  00:04:52.239
So let's go ahead and run this.
99

99

00:04:53.983  -->  00:04:56.182
And we'll see that we have our three employees
100

100

00:04:56.182  -->  00:04:59.244
and it's important to note that they're not in the order
101

101

00:04:59.244  -->  00:05:01.966
we added them, right? We added Jane, John and Mary
102

102

00:05:01.966  -->  00:05:04.577
and we're getting Jane, Mary and John
103

103

00:05:04.577  -->  00:05:07.446
because where they're placed in the hashtable
104

104

00:05:07.446  -->  00:05:10.267
is gonna depend on the hashed value of the keys.
105

105

00:05:10.267  -->  00:05:12.798
Okay, so now let's take a look at the other way
106

106

00:05:12.798  -->  00:05:16.288
we could do this. I'm gonna comment this out.
107

107

00:05:16.288  -->  00:05:20.335
And this will only be available in Java 8 and beyond.
108

108

00:05:20.335  -->  00:05:23.586
We can use the 'for each' method, and a lamda expression.
109

109

00:05:23.586  -->  00:05:26.253
So I'll say 'hashMap.forEach'...
110

110

00:05:27.536  -->  00:05:30.286
then I'm gonna say 'K V'...
111

111

00:05:30.286  -->  00:05:33.245
and we're gonna say 'System.out.println'
112

112

00:05:33.245  -->  00:05:36.010
and in this case I'm printing the key and the value.
113

113

00:05:36.010  -->  00:05:38.877
So 'K' will be the key, and 'V' will be the value.
114

114

00:05:38.877  -->  00:05:40.446
And so, I'll say
115

115

00:05:40.446  -->  00:05:41.696
'Key' equals...
116

116

00:05:42.887  -->  00:05:43.804
plus 'K'...
117

117

00:05:45.553  -->  00:05:47.020
plus
118

118

00:05:47.020  -->  00:05:48.520
'Employee'
119

119

00:05:48.520  -->  00:05:49.353
equals
120

120

00:05:50.270  -->  00:05:51.103
plus 'V'.
121

121

00:05:52.220  -->  00:05:55.137
And so let's go ahead and run that.
122

122

00:05:57.215  -->  00:05:59.867
And we get for key 'Jones' we we have Jane Jones,
123

123

00:05:59.867  -->  00:06:01.655
for key 'Smith' we have Mary Smith
124

124

00:06:01.655  -->  00:06:05.006
and for key 'Doe' we have John Doe.
125

125

00:06:05.006  -->  00:06:08.448
There's a contains key and a containsValue method
126

126

00:06:08.448  -->  00:06:11.727
to see if a Map contains a key or a value.
127

127

00:06:11.727  -->  00:06:13.227
So we could say...
128

128

00:06:14.958  -->  00:06:16.875
'System.out.println'...
129

129

00:06:19.430  -->  00:06:21.759
'hashMap.containsKey'...
130

130

00:06:21.759  -->  00:06:26.126
and we can say do you contain the key 'Doe' and
131

131

00:06:26.126  -->  00:06:28.862
'System.out.println'...
132

132

00:06:28.862  -->  00:06:31.008
'hashMap.containsValue'
133

133

00:06:31.008  -->  00:06:34.986
and we could say do you contain the value 'Jane Jones'.
134

134

00:06:34.986  -->  00:06:38.590
Now we expect that this method will be faster
135

135

00:06:38.590  -->  00:06:40.585
than this method, because in this one
136

136

00:06:40.585  -->  00:06:42.530
we're passing the key. And so under the covers,
137

137

00:06:42.530  -->  00:06:46.379
the key will be hashed and the method will be able to jump
138

138

00:06:46.379  -->  00:06:49.501
right to that place in the underlying implementation
139

139

00:06:49.501  -->  00:06:52.416
and check for 'Doe'. For this method,
140

140

00:06:52.416  -->  00:06:53.784
when we're just passing the object,
141

141

00:06:53.784  -->  00:06:55.901
it can't do that, there's no value to have
142

142

00:06:55.901  -->  00:06:57.870
so it's gonna have to start at the front of the hashtable
143

143

00:06:57.870  -->  00:07:01.561
and search for Jane Jones. And so it's always better
144

144

00:07:01.561  -->  00:07:04.061
to have the key. So let's run.
145

145

00:07:05.992  -->  00:07:08.569
And we get true for both, which is what we expect.
146

146

00:07:08.569  -->  00:07:11.931
Now as I said earlier in the video, if we tried to put
147

147

00:07:11.931  -->  00:07:13.714
an employee into the map,
148

148

00:07:13.714  -->  00:07:16.895
using a key that we've already used,
149

149

00:07:16.895  -->  00:07:19.234
then the employee we're adding
150

150

00:07:19.234  -->  00:07:21.363
will replace the existing employee
151

151

00:07:21.363  -->  00:07:24.579
that we added with that key. So for example, if we now try
152

152

00:07:24.579  -->  00:07:27.122
to put another employee with the key 'Doe',
153

153

00:07:27.122  -->  00:07:31.709
whatever employee we add will replace John Doe.
154

154

00:07:31.709  -->  00:07:35.475
So let's do that. Let's say 'hashMap.put' 'Doe'
155

155

00:07:35.475  -->  00:07:37.725
and let's put 'mike Wilson'
156

156

00:07:39.124  -->  00:07:40.344
using the key 'Doe'
157

157

00:07:40.344  -->  00:07:43.259
and what we expect to happen is Mike Wilson will replace
158

158

00:07:43.259  -->  00:07:46.840
John Doe. And in fact, the put method returns the employee
159

159

00:07:46.840  -->  00:07:49.067
that used to be there. So let's say
160

160

00:07:49.067  -->  00:07:53.273
'employee employee' equals and this will return John Doe.
161

161

00:07:53.273  -->  00:07:56.198
Because it's gonna replace John Doe with Mike Wilson,
162

162

00:07:56.198  -->  00:07:59.292
because you can only have one employee per key,
163

163

00:07:59.292  -->  00:08:02.443
and it will return John Doe. I'm gonna comment
164

164

00:08:02.443  -->  00:08:06.357
these two lines out and let's print out the employee
165

165

00:08:06.357  -->  00:08:10.440
we get back. So we'll say 'System.out.println'...
166

166

00:08:11.678  -->  00:08:13.217
'employee'.
167

167

00:08:13.217  -->  00:08:15.827
And let's run again, and we'll see what we get back
168

168

00:08:15.827  -->  00:08:20.529
from here, and we'll see what's in our hashtable.
169

169

00:08:20.529  -->  00:08:22.791
So we got John Doe back, as we expected.
170

170

00:08:22.791  -->  00:08:24.602
Because he's gonna be replaced by Mike,
171

171

00:08:24.602  -->  00:08:28.788
and now Mike is in the hashtable rather than John Doe.
172

172

00:08:28.788  -->  00:08:32.456
Now you might not want that to happen. If you use a key
173

173

00:08:32.456  -->  00:08:34.581
that's already been used, you don't want
174

174

00:08:34.581  -->  00:08:37.181
the put to go ahead. And if that's the case,
175

175

00:08:37.181  -->  00:08:40.857
you can use the putIfAbsent method.
176

176

00:08:40.857  -->  00:08:44.535
The putIfAbsent method will only insert
177

177

00:08:44.535  -->  00:08:47.627
Mike if the key 'Doe' has not been used.
178

178

00:08:47.627  -->  00:08:50.653
So I'm going to comment that out, so you'll see it
179

179

00:08:50.653  -->  00:08:52.747
and then we'll say
180

180

00:08:52.747  -->  00:08:54.747
'hashMap.putIfAbsent'...
181

181

00:08:55.731  -->  00:08:58.116
and we'll say 'Doe'
182

182

00:08:58.116  -->  00:09:00.322
and 'mikeWilson'.
183

183

00:09:00.322  -->  00:09:03.333
And I'll comment that out as well.
184

184

00:09:03.333  -->  00:09:08.333
And let's run now and see what our hashtable looks like.
185

185

00:09:08.793  -->  00:09:11.272
And you'll see this time, John is still in the hashtable
186

186

00:09:11.272  -->  00:09:14.477
because this is only going to go ahead with the put
187

187

00:09:14.477  -->  00:09:17.303
if the key 'Doe' has not already been used.
188

188

00:09:17.303  -->  00:09:20.509
Now if we call putIfAbsent and it turns out that
189

189

00:09:20.509  -->  00:09:23.614
Doe was used before, we'll get back the employee
190

190

00:09:23.614  -->  00:09:26.122
that's currently stored here. So if we say
191

191

00:09:26.122  -->  00:09:27.205
'Employee'...
192

192

00:09:29.144  -->  00:09:31.857
'employee' equals putIfAbsent,
193

193

00:09:31.857  -->  00:09:33.751
and let me un-comment this again.
194

194

00:09:33.751  -->  00:09:35.922
We expect John Doe to be returned.
195

195

00:09:35.922  -->  00:09:38.801
So this will tell the caller, hey you tried to put in
196

196

00:09:38.801  -->  00:09:41.785
an employee for a key that's already been used
197

197

00:09:41.785  -->  00:09:45.047
and this is the employee that's used that key.
198

198

00:09:45.047  -->  00:09:49.413
And so let's run, and we'll see that we get John Doe back
199

199

00:09:49.413  -->  00:09:54.080
for the putIfAbsent call. Now, let's take a look at get.
200

200

00:09:55.514  -->  00:09:57.948
We've looked at put, let's look at get.
201

201

00:09:57.948  -->  00:09:59.924
So, let's do a simple get. We'll just say
202

202

00:09:59.924  -->  00:10:01.841
'System.out.println'...
203

203

00:10:03.256  -->  00:10:05.060
'hashMap.get'...
204

204

00:10:05.060  -->  00:10:05.977
'Smith'....
205

205

00:10:07.413  -->  00:10:09.580
And we expect Mary back...
206

206

00:10:12.338  -->  00:10:15.758
And there she is, so we got Mary back for Smith.
207

207

00:10:15.758  -->  00:10:18.332
Now let's say you do a get, and there's
208

208

00:10:18.332  -->  00:10:20.764
nothing in the table. So let's see what we get back.
209

209

00:10:20.764  -->  00:10:22.889
So we'll just say 'get' 'someone'.
210

210

00:10:22.889  -->  00:10:26.637
We know there's nobody in there. And you'll see
211

211

00:10:26.637  -->  00:10:29.729
that we get back null. Now you might not want that,
212

212

00:10:29.729  -->  00:10:34.641
and so there's a getOrDefault method that lets you
213

213

00:10:34.641  -->  00:10:36.544
specify a default value.
214

214

00:10:36.544  -->  00:10:38.550
And if there isn't an employee in the table,
215

215

00:10:38.550  -->  00:10:40.890
for the key that we've used, instead the method will
216

216

00:10:40.890  -->  00:10:43.951
return the default value. And so in that case,
217

217

00:10:43.951  -->  00:10:48.272
you just say 'getOrDefault' and we give the key
218

218

00:10:48.272  -->  00:10:51.181
and then we can say "well you know what, if that's null,
219

219

00:10:51.181  -->  00:10:53.539
return Mike. We want Mike back."
220

220

00:10:53.539  -->  00:10:57.277
And now if we run, we should see Mike Wilson. And we do.
221

221

00:10:57.277  -->  00:11:00.045
So that will just stop the method from returning null.
222

222

00:11:00.045  -->  00:11:03.315
Now of course we can remove employee.
223

223

00:11:03.315  -->  00:11:04.906
So we can say
224

224

00:11:04.906  -->  00:11:06.573
'System.out.println'
225

225

00:11:07.608  -->  00:11:08.608
'hashMap'...
226

226

00:11:10.016  -->  00:11:13.183
'.remove' and let's remove Jane Jones.
227

227

00:11:14.571  -->  00:11:19.571
And so this should return the employee that we removed.
228

228

00:11:19.969  -->  00:11:22.448
And it does and we'll see now that when we print out
229

229

00:11:22.448  -->  00:11:24.926
the HashMap, we only have Mary and John.
230

230

00:11:24.926  -->  00:11:27.882
So there are more methods in the HashMap class,
231

231

00:11:27.882  -->  00:11:30.291
but I just wanted to give you a taste of what you can do.
232

232

00:11:30.291  -->  00:11:32.171
As you can see, there's a lot more
233

233

00:11:32.171  -->  00:11:34.845
in terms of puts and gets. Let's go back to
234

234

00:11:34.845  -->  00:11:36.512
the HashMap Javadoc.
235

235

00:11:41.055  -->  00:11:44.489
And so if we look down at the methods that are available,
236

236

00:11:44.489  -->  00:11:48.772
we'll see that you have get, getOrDefault, put, putALL,
237

237

00:11:48.772  -->  00:11:51.395
putIfAbsent, so you can put more than one thing
238

238

00:11:51.395  -->  00:11:53.903
into the map at a time. Here's the removes.
239

239

00:11:53.903  -->  00:11:56.672
You can give the key, there's a remove version where
240

240

00:11:56.672  -->  00:12:00.022
you pass a key and a value and you'll only actually
241

241

00:12:00.022  -->  00:12:02.825
remove the value from the hashtable if it used that key.
242

242

00:12:02.825  -->  00:12:05.815
You've got replace, so you can actually replace
243

243

00:12:05.815  -->  00:12:08.799
the value for a key. And so I'll let you
244

244

00:12:08.799  -->  00:12:10.966
explore these on your own.
245

245

00:12:13.212  -->  00:12:16.278
As you can see, one of the Subclasses of HashMap
246

246

00:12:16.278  -->  00:12:20.286
is LinkedHashMap. And so if you take a look at that.
247

247

00:12:20.286  -->  00:12:23.268
So it says that this is a hashtable
248

248

00:12:23.268  -->  00:12:27.123
and linked list implementation of the Map Interface.
249

249

00:12:27.123  -->  00:12:30.287
Now this does not mean that this implementation
250

250

00:12:30.287  -->  00:12:32.683
is backed by a linked list, because it says
251

251

00:12:32.683  -->  00:12:34.954
it's a hashtable and a linked list
252

252

00:12:34.954  -->  00:12:38.048
and also we know that it's a Subclass of HashMap.
253

253

00:12:38.048  -->  00:12:40.533
And HashMap is a array implementation.
254

254

00:12:40.533  -->  00:12:43.662
If we go back to HashMap, there's a big discussion
255

255

00:12:43.662  -->  00:12:46.553
in here about load factor and resizing and stuff.
256

256

00:12:46.553  -->  00:12:48.444
And I haven't looked at the code, but I can tell
257

257

00:12:48.444  -->  00:12:50.312
that it's an array implementation.
258

258

00:12:50.312  -->  00:12:52.427
So if we go back to LinkedHashMap,
259

259

00:12:52.427  -->  00:12:55.543
it's a hashtable and it's a linked list implementation.
260

260

00:12:55.543  -->  00:12:57.692
Now, later on here, they give more details.
261

261

00:12:57.692  -->  00:13:00.257
This implementation differs from HashMap
262

262

00:13:00.257  -->  00:13:02.845
in that it maintains a doubly-linked list
263

263

00:13:02.845  -->  00:13:04.757
running through all of its entries.
264

264

00:13:04.757  -->  00:13:08.031
And it says this linked list defines the iteration ordering,
265

265

00:13:08.031  -->  00:13:10.427
which is normally the order in which keys
266

266

00:13:10.427  -->  00:13:13.635
were inserted into the map. So what this means is,
267

267

00:13:13.635  -->  00:13:15.510
it's still being backed by an array,
268

268

00:13:15.510  -->  00:13:18.761
but they also have put all of the entries
269

269

00:13:18.761  -->  00:13:22.180
into a linked list. Once again, the implementation is
270

270

00:13:22.180  -->  00:13:23.800
not synchronised, and you can use
271

271

00:13:23.800  -->  00:13:26.569
the same Collections.sychronizedmap method
272

272

00:13:26.569  -->  00:13:30.800
to wrap this implementation to get a synchronised map.
273

273

00:13:30.800  -->  00:13:33.070
Now, most of the methods will be the same,
274

274

00:13:33.070  -->  00:13:36.653
because, this implements the Map interface.
275

275

00:13:39.731  -->  00:13:43.823
But there is a removeEldestEntry method,
276

276

00:13:43.823  -->  00:13:46.131
and using this method you can specify
277

277

00:13:46.131  -->  00:13:49.249
that you want the map to delete its oldest entry
278

278

00:13:49.249  -->  00:13:52.351
every time you add a new one. And you might be asking:
279

279

00:13:52.351  -->  00:13:54.266
"Well why the heck would you wanna do this?".
280

280

00:13:54.266  -->  00:13:55.919
Well it's possible that you're using
281

281

00:13:55.919  -->  00:13:59.699
the Map instance as a cache. And so if that was the case,
282

282

00:13:59.699  -->  00:14:01.471
you wouldn't want the map to just keep
283

283

00:14:01.471  -->  00:14:03.528
growing and growing and growing, right?
284

284

00:14:03.528  -->  00:14:06.872
Because for a cache, basically it's for faster access
285

285

00:14:06.872  -->  00:14:09.931
of things that have been used recently,
286

286

00:14:09.931  -->  00:14:12.711
and so that's why you'd want to remove
287

287

00:14:12.711  -->  00:14:15.016
the eldest, or the oldest entry.
288

288

00:14:15.016  -->  00:14:17.053
The one that's been in the list the longest.
289

289

00:14:17.053  -->  00:14:19.860
So if you decide that you're gonna use this class
290

290

00:14:19.860  -->  00:14:23.202
to implement a cache and you only ever wanna keep,
291

291

00:14:23.202  -->  00:14:26.082
let's say a hundred items, then if it's full,
292

292

00:14:26.082  -->  00:14:29.096
and you come along and wanna add another item,
293

293

00:14:29.096  -->  00:14:32.416
you're gonna take out the oldest item and add the new item.
294

294

00:14:32.416  -->  00:14:35.352
Because a cache is there to provide quick access
295

295

00:14:35.352  -->  00:14:38.198
to recently used items, the oldest item
296

296

00:14:38.198  -->  00:14:40.291
is gonna be the most stale item.
297

297

00:14:40.291  -->  00:14:42.204
And so that's the one that you're gonna kick out.
298

298

00:14:42.204  -->  00:14:44.856
And so that's the LinkedHashMap class.
299

299

00:14:44.856  -->  00:14:47.817
Now, we also have the hashtable class,
300

300

00:14:47.817  -->  00:14:52.567
I'm gonna change this to Hashtable and see if that works.
301

301

00:14:53.613  -->  00:14:55.815
And it does. So we have the hashtable class.
302

302

00:14:55.815  -->  00:14:58.742
And this differs from HashMap in a couple of ways.
303

303

00:14:58.742  -->  00:15:00.842
First of all, you can't add
304

304

00:15:00.842  -->  00:15:03.425
null key or values. We saw that
305

305

00:15:04.268  -->  00:15:07.146
the HashMap allows the null key
306

306

00:15:07.146  -->  00:15:10.057
and null values, well this one doesn't.
307

307

00:15:10.057  -->  00:15:11.543
So if you're using a hashtable,
308

308

00:15:11.543  -->  00:15:13.859
everything's got to be non-null.
309

309

00:15:13.859  -->  00:15:15.931
The second difference is this is synchronised.
310

310

00:15:15.931  -->  00:15:18.462
If you don't need synchronisation,
311

311

00:15:18.462  -->  00:15:20.892
you don't want to be using Hashtable.
312

312

00:15:20.892  -->  00:15:23.292
This is the same situation as it was
313

313

00:15:23.292  -->  00:15:25.790
with every list and vector, where array list
314

314

00:15:25.790  -->  00:15:27.489
is not synchronised and vector is.
315

315

00:15:27.489  -->  00:15:30.997
As we discussed then, synchronisation comes with
316

316

00:15:30.997  -->  00:15:34.451
an overhead, and so if you don't need synchronisation,
317

317

00:15:34.451  -->  00:15:37.625
then don't use Hashtable. If you don't want
318

318

00:15:37.625  -->  00:15:41.335
to use Hashtable, let's say this is an older implementation
319

319

00:15:41.335  -->  00:15:43.790
as well. So let's say you wanna use HashMap
320

320

00:15:43.790  -->  00:15:45.793
but you want it synchronised, you can wrap it
321

321

00:15:45.793  -->  00:15:50.793
in the way that we saw. But also if we come back to HashMap
322

322

00:15:51.414  -->  00:15:53.788
or Map, go all the way up, we'll see
323

323

00:15:53.788  -->  00:15:55.813
that there's a ConcurrentHashMap here.
324

324

00:15:55.813  -->  00:15:57.760
And that's in the Concurrent Package,
325

325

00:15:57.760  -->  00:16:01.876
and this is a synchronised implementation.
326

326

00:16:01.876  -->  00:16:04.744
It says it supports full concurrency of retrievals
327

327

00:16:04.744  -->  00:16:07.434
and high expected concurrency for updates.
328

328

00:16:07.434  -->  00:16:09.786
And so if you really wanted concurrency,
329

329

00:16:09.786  -->  00:16:12.035
and you were gonna deal with a lot of items,
330

330

00:16:12.035  -->  00:16:13.915
this would be a good class to use.
331

331

00:16:13.915  -->  00:16:15.883
Okay, so if we go back to Map, we can see
332

332

00:16:15.883  -->  00:16:17.593
that there's a lot of classes that implement
333

333

00:16:17.593  -->  00:16:19.742
the interface. They're usually used under
334

334

00:16:19.742  -->  00:16:23.005
specific circumstances, the ones that we haven't looked at.
335

335

00:16:23.005  -->  00:16:25.558
So I'll leave it up to you to explore them.
336

336

00:16:25.558  -->  00:16:29.415
But there's a lot of support for hashtables in the JDK,
337

337

00:16:29.415  -->  00:16:31.915
so if you're working on an application
338

338

00:16:31.915  -->  00:16:34.929
and you're thinking that "Oh, you know what, I need
339

339

00:16:34.929  -->  00:16:38.050
a hashtable, a hashtable would work really well here."
340

340

00:16:38.050  -->  00:16:40.630
Then, take a look at what your requirements are
341

341

00:16:40.630  -->  00:16:43.039
and take a look at the classes that implement
342

342

00:16:43.039  -->  00:16:44.849
the Map interface to see which one
343

343

00:16:44.849  -->  00:16:46.514
is gonna best suit your needs.
344

344

00:16:46.514  -->  00:16:51.514
Alright, that's it for now. I'll see you in the next video.
