WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.645
In this video, we're going to move on from transformations,

00:00:03.645 --> 00:00:06.520
I'm going to take a look at working with pixels.

00:00:06.520 --> 00:00:08.790
I've gone ahead and created a New Pen,

00:00:08.790 --> 00:00:12.375
within CodePen called working with pixels.

00:00:12.375 --> 00:00:17.985
We changed the height of the canvas back to 300 because that's all the space we need,

00:00:17.985 --> 00:00:22.810
and also removed any of the transformations from the last video.

00:00:23.180 --> 00:00:28.830
Digital photos or rust images are made up of pixels,

00:00:28.830 --> 00:00:32.745
and the colors are made up of a combination of red,

00:00:32.745 --> 00:00:36.555
green, and blue to create any color imaginable.

00:00:36.555 --> 00:00:39.915
Photos can often also have a falloff channel,

00:00:39.915 --> 00:00:44.935
which is called the Alpha channel and this represents the transparency value.

00:00:44.935 --> 00:00:48.290
For this video, we're going to be manipulating the values of

00:00:48.290 --> 00:00:53.455
these four channels to create effects such as making a color image to grayscale.

00:00:53.455 --> 00:00:56.825
For this video, we're going to be manipulating the values

00:00:56.825 --> 00:01:00.530
of these four channels to create different colors and effects.

00:01:00.530 --> 00:01:05.515
These effects can be used to do things such as making the image grayscale,

00:01:05.515 --> 00:01:08.930
or black and white, and these are similar techniques used

00:01:08.930 --> 00:01:12.485
in image editing software, such as Photoshop.

00:01:12.485 --> 00:01:16.505
First we're going to take a look at createImageData,

00:01:16.505 --> 00:01:22.500
we want to stall this inside a variable called imageData.

00:01:22.600 --> 00:01:27.930
Set that to be ctx.createImageData,

00:01:31.670 --> 00:01:37.970
and for this we're simply going to pass in a size of the image which you want to create.

00:01:37.970 --> 00:01:43.870
I'm going to make mine 400 pixels wide by 200 pixels high,

00:01:43.870 --> 00:01:49.665
and this creates a blank ImageData objects.

00:01:49.665 --> 00:01:54.935
New ImageData object takes in parameters such as a width,

00:01:54.935 --> 00:01:58.750
a height, and also the ImageData.

00:01:58.750 --> 00:02:02.085
Next we're going to create a JavaScript for loop,

00:02:02.085 --> 00:02:07.395
and this is so we can loop through all the values within the ImageData objects.

00:02:07.395 --> 00:02:11.375
The values that we're interested in is the pixel data,

00:02:11.375 --> 00:02:19.050
because we've created a area of 400 by 200 but a lower pixels to work with,

00:02:19.050 --> 00:02:21.975
and each pixel has four different colors,

00:02:21.975 --> 00:02:24.450
or for different channels which is the red,

00:02:24.450 --> 00:02:27.060
green, blue, and Alpha.

00:02:27.060 --> 00:02:32.675
When using CodePen it could be quite easy to crush the browser.

00:02:32.675 --> 00:02:34.385
I'm just going to comment out the loop,

00:02:34.385 --> 00:02:36.410
or we actually type out,

00:02:36.410 --> 00:02:38.870
so it don't cause any problems.

00:02:38.870 --> 00:02:41.490
So i is equal to 0;

00:02:42.300 --> 00:02:46.880
an i is less than imageData.data.length;

00:02:51.080 --> 00:02:58.265
i plus equals 4.

00:02:58.265 --> 00:03:01.605
Let's take a look what we've got,

00:03:01.605 --> 00:03:04.125
we've created a for loop,

00:03:04.125 --> 00:03:09.985
and a for loop will keep looping through all of the data for a certain amount of times.

00:03:09.985 --> 00:03:12.585
The data that we want to loop through,

00:03:12.585 --> 00:03:17.055
is the ImageData that we just created,

00:03:17.055 --> 00:03:23.340
and data.length is the array's length or the number of pixels,

00:03:23.340 --> 00:03:29.295
which is contained within a section of 400 by 200 pixels.

00:03:29.295 --> 00:03:35.105
Because each pixel has the four values or the four channels that we talked about,

00:03:35.105 --> 00:03:36.395
which was the red,

00:03:36.395 --> 00:03:38.095
green, blue, and Alpha.

00:03:38.095 --> 00:03:41.760
We'll then increment the loop by four each time,

00:03:41.760 --> 00:03:47.855
and then these four individual values could be manipulated inside of the loop one-by-one.

00:03:47.855 --> 00:03:52.535
Let's do that now, select the

00:03:52.535 --> 00:03:58.490
imageData.data and then within square brackets,

00:03:58.490 --> 00:04:00.585
we can select the individual pixel.

00:04:00.585 --> 00:04:02.970
We've created the variable of i,

00:04:02.970 --> 00:04:06.400
i plus 0 is going to be the first channel,

00:04:06.400 --> 00:04:13.980
and this is the red value and the value is between 0 and 255.

00:04:15.410 --> 00:04:22.180
Let's copy this three more times to create the four different channels.

00:04:24.620 --> 00:04:27.905
This one is going to be the green channel,

00:04:27.905 --> 00:04:30.600
that's i plus 1,

00:04:32.890 --> 00:04:37.960
and then i plus 2 is for the blue channel,

00:04:37.960 --> 00:04:44.405
and then i plus 3, and this is the Alpha or the transparency.

00:04:44.405 --> 00:04:50.630
0 is fully transparent and 255 is a solid color.

00:04:50.630 --> 00:04:54.890
If this looks a little bit confusing till maturity just yet,

00:04:54.890 --> 00:04:56.675
we're going to take a look at all the data

00:04:56.675 --> 00:04:59.725
within the console and should all become clear.

00:04:59.725 --> 00:05:04.875
The new objects pixel values are transparent block by default,

00:05:04.875 --> 00:05:09.400
and this is a RGBA value of zero.

00:05:10.400 --> 00:05:14.220
I'm just going to change out to be a green color.

00:05:14.220 --> 00:05:17.170
I'll set the reds to be 0,

00:05:17.350 --> 00:05:22.655
and the green to be the maximum value of 255,

00:05:22.655 --> 00:05:28.015
the blue to be 0 and the transparency.

00:05:28.015 --> 00:05:30.675
To make it a solid color,

00:05:30.675 --> 00:05:33.240
we'll make that 255.

00:05:33.240 --> 00:05:40.150
Then finally to put the ImageData onto the canvas, use ctx.putImageData.

00:05:41.420 --> 00:05:46.860
The ImageData that we want to add is the variable of imageData,

00:05:46.860 --> 00:05:50.595
and the position is 0, 0.

00:05:50.595 --> 00:05:58.350
Now we can uncomment out the for loop to run this, so save that.

00:05:58.350 --> 00:06:04.015
There's our image which is 400 pixels by 200 pixels,

00:06:04.015 --> 00:06:07.490
with a loop through all the individual colors and change

00:06:07.490 --> 00:06:12.730
the default black color to be this green color, which we set here.

00:06:12.730 --> 00:06:16.235
To get a better understanding of what's going on there,

00:06:16.235 --> 00:06:26.910
I'm just going to do a console.log and the information we want to look is the imageData.

00:06:28.280 --> 00:06:30.555
We've got a console log,

00:06:30.555 --> 00:06:34.330
let's right-click and go to Inspects,

00:06:34.610 --> 00:06:38.745
and then if we select the Console tab,

00:06:38.745 --> 00:06:44.985
there's is our ImageData object that we've created.

00:06:44.985 --> 00:06:47.055
Then let's open this up,

00:06:47.055 --> 00:06:50.100
I click on the little arrow there.

00:06:50.100 --> 00:06:57.215
We've got the data and this is the data which will be in accessing within the loop.

00:06:57.215 --> 00:07:02.635
I've also got a width and height which we set to 400 by 200.

00:07:02.635 --> 00:07:05.570
If we then open up the data,

00:07:05.570 --> 00:07:09.530
we then find lots of data held in there,

00:07:09.530 --> 00:07:15.830
and this is all the pixel data that is contained within this area of 400 by 200,

00:07:15.830 --> 00:07:20.300
and they are all sectioned off into groups of 10,000.

00:07:20.300 --> 00:07:23.059
I've just open up a dropdown,

00:07:23.059 --> 00:07:27.085
there's pixel data 0-99.

00:07:27.085 --> 00:07:32.730
We've been looping over four pixels at a time, 0, 1,

00:07:32.730 --> 00:07:37.955
2, 3, 4, this is the four color values for one pixel.

00:07:37.955 --> 00:07:40.070
Then number 4, 5, 6,

00:07:40.070 --> 00:07:43.285
and 7 is the second pixel.

00:07:43.285 --> 00:07:46.290
This is why we jump the loop by four each

00:07:46.290 --> 00:07:49.530
time so that we move to the second set of pixels,

00:07:49.530 --> 00:07:52.150
the first set pixels and so on.

00:07:52.150 --> 00:07:55.530
It's 0, 255, 0,

00:07:55.530 --> 00:07:57.735
255 for each pixel,

00:07:57.735 --> 00:08:01.665
and this is the data which we set it would in the loop.

00:08:01.665 --> 00:08:03.600
We can quickly change this,

00:08:03.600 --> 00:08:07.065
and just check the values as being reflected.

00:08:07.065 --> 00:08:11.790
For example, we could change red to be 10,

00:08:11.790 --> 00:08:16.450
and let's save that and then refresh the page,

00:08:16.580 --> 00:08:24.240
open up the ImageData and then back into the first section.

00:08:24.240 --> 00:08:25.890
Again, there's our first pixel,

00:08:25.890 --> 00:08:28.500
it's 10, 255, 0,

00:08:28.500 --> 00:08:33.520
255, and then we'll loop back through the second pixel, and so on.

00:08:33.520 --> 00:08:40.730
That's how we can manipulate the four pixel values of RGBA, let's just close up.

00:08:42.750 --> 00:08:46.875
That's how we can use createImageData.

00:08:46.875 --> 00:08:51.275
The last method I want to show you in this video is getImageData,

00:08:51.275 --> 00:08:54.590
and we can use the getImageData method to find out

00:08:54.590 --> 00:08:58.120
the pixel data for the area of the canvas.

00:08:58.120 --> 00:09:01.340
For example, if we just wanted to know the pixel data

00:09:01.340 --> 00:09:06.875
400 pixels by 100 pixels square we can find this out.

00:09:06.875 --> 00:09:09.785
Let's add this to the very bottom,

00:09:09.785 --> 00:09:13.775
I will just comment this console log out first.

00:09:13.775 --> 00:09:22.910
Let's do ctx.getImageData and

00:09:22.910 --> 00:09:26.480
then we specify the start position that want to grab.

00:09:26.480 --> 00:09:29.615
If we want to grab an area in the top left-hand corner,

00:09:29.615 --> 00:09:33.160
we set the stop position of 0, 0.

00:09:33.160 --> 00:09:39.070
Let's set the area that we want to grab to be 100 by 100.

00:09:39.070 --> 00:09:42.720
We can log this to the console

00:09:43.450 --> 00:09:49.295
and then surround this section with brackets and then refresh.

00:09:49.295 --> 00:09:54.210
If we go into the developer tools now by clicking Inspect,

00:09:54.210 --> 00:09:59.320
and then go into the Console and check out the ImageData.

00:09:59.540 --> 00:10:02.105
We can see straight away that there's

00:10:02.105 --> 00:10:05.330
a lot less pixel data down the walls

00:10:05.330 --> 00:10:09.020
for the last console log when we looked at the full section.

00:10:09.020 --> 00:10:12.995
Because we're only checking out a small area in the top corner,

00:10:12.995 --> 00:10:17.010
we've got a lot less ImageData within the console,

00:10:18.590 --> 00:10:24.425
and of course we can still open up each one of these and see the individual data.

00:10:24.425 --> 00:10:27.875
That's how we can work with pixels on the canvas,

00:10:27.875 --> 00:10:30.390
and I'll see you in the next video.
