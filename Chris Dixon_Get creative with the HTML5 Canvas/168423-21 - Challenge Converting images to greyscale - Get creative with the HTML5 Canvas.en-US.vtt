WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.670
Hi guys. I hope you managed to complete

00:00:02.670 --> 00:00:05.670
the challenge or I hope at least you gave it a goal.

00:00:05.670 --> 00:00:08.205
If you did run into any troubles,

00:00:08.205 --> 00:00:12.375
don't worry, I'm going to go ahead and show you a working solution.

00:00:12.375 --> 00:00:15.970
Let's go ahead and create a new pen.

00:00:18.800 --> 00:00:25.510
I'm going to call this the challenge: image greyscaling.

00:00:35.500 --> 00:00:39.780
I'm going to create a larger canvas than before,

00:00:39.780 --> 00:00:42.680
just because you're going to be adding an image onto there,

00:00:42.680 --> 00:00:46.660
which will probably be larger than 600 by 300.

00:00:46.660 --> 00:00:49.725
Then let's empty out the scripts.

00:00:49.725 --> 00:00:53.650
We'll start with a clean script tag.

00:00:56.180 --> 00:00:59.945
From the top I'm going to create our two variables.

00:00:59.945 --> 00:01:02.660
First of all is a canvas variable,

00:01:02.660 --> 00:01:08.070
which as usual is document.getElementById.

00:01:09.430 --> 00:01:14.250
Of course the ID is myCanvas,

00:01:16.040 --> 00:01:19.785
and next the context variable,

00:01:19.785 --> 00:01:22.245
which we view as ctx.

00:01:22.245 --> 00:01:24.300
Let's keep it consistent.

00:01:24.300 --> 00:01:31.180
The context is equivalent to canvas.getContext.

00:01:32.120 --> 00:01:36.040
Now I'm using the 2D context.

00:01:42.710 --> 00:01:47.630
The first thing I'm going to do is to create a image.

00:01:47.630 --> 00:01:50.435
This is going to be a color image which we can later

00:01:50.435 --> 00:01:54.175
work with the pixels and turn it to greyscale.

00:01:54.175 --> 00:01:59.625
Hopefully you got this far at least and you've managed to add an image to the screen.

00:01:59.625 --> 00:02:04.890
Variable image is equal to a new image.

00:02:05.570 --> 00:02:11.025
Once this image has loaded with image.onload,

00:02:11.025 --> 00:02:14.910
we are going to trigger a function.

00:02:14.910 --> 00:02:18.555
This function is going to first of all,

00:02:18.555 --> 00:02:20.160
draw the image to the screen,and

00:02:20.160 --> 00:02:23.770
then a second thing we want to do is trigger a second function,

00:02:23.770 --> 00:02:26.145
which I'm going to call greyscale.

00:02:26.145 --> 00:02:32.230
First of all let's draw the image to the canvas, with ctx.drawImage.

00:02:33.980 --> 00:02:37.750
We haven't created the image source yet but

00:02:37.750 --> 00:02:41.140
we'll just put the image variable inside there.

00:02:41.140 --> 00:02:43.660
We'll start the position at 0,

00:02:43.660 --> 00:02:46.715
0, which is the top left-hand corner.

00:02:46.715 --> 00:02:54.170
Then the image.src, which is the file path.

00:02:55.040 --> 00:02:58.660
Let's go over to Wikipedia.

00:03:00.710 --> 00:03:04.450
I'll grab an image from there to use.

00:03:05.960 --> 00:03:09.410
This one is going to no good, it's black and white to start with.

00:03:09.410 --> 00:03:12.510
Let's find a suitable image.

00:03:14.110 --> 00:03:17.820
Let's try featured content.

00:03:19.520 --> 00:03:22.350
This one is fine.

00:03:22.350 --> 00:03:30.250
Then right-click and copy image address and paste this inside the image source.

00:03:30.740 --> 00:03:33.540
There's image appearing on the screen,

00:03:33.540 --> 00:03:35.865
that's all working fine.

00:03:35.865 --> 00:03:40.055
Then what I did next was to create a greyscale function.

00:03:40.055 --> 00:03:42.995
We'll create that in just a moment but first of all

00:03:42.995 --> 00:03:46.615
I'm going to call it within this function.

00:03:46.615 --> 00:03:53.250
You simply type greyscale and then the brackets.

00:03:53.250 --> 00:03:57.490
This will call the greyscale function once the image is loaded.

00:03:57.490 --> 00:04:00.940
Now let's create this greyscale function.

00:04:05.960 --> 00:04:08.520
What like this function to do,

00:04:08.520 --> 00:04:12.425
is first of all we'd like to grab the image data,

00:04:12.425 --> 00:04:15.800
which is basically the full size of the canvas.

00:04:15.800 --> 00:04:17.945
We want to grab the whole area.

00:04:17.945 --> 00:04:19.775
Then we want to run the for loop,

00:04:19.775 --> 00:04:24.110
in a similar way to the last video where we loop through all the pixel data.

00:04:24.110 --> 00:04:26.615
Just as mentioned in the intro,

00:04:26.615 --> 00:04:28.940
we're going to average out the red, green,

00:04:28.940 --> 00:04:32.185
and blue channels to give us a greyscale effect.

00:04:32.185 --> 00:04:35.385
The last thing I want the greyscale function to do,

00:04:35.385 --> 00:04:38.930
is put the modified pixel array or

00:04:38.930 --> 00:04:41.000
the black and white pixels back onto

00:04:41.000 --> 00:04:45.200
the canvas by taking advantage of the put image data method.

00:04:45.200 --> 00:04:48.300
Let's begin by creating a image data

00:04:48.300 --> 00:04:57.910
variable.This is equivalent to ctx.getImageData.

00:04:58.670 --> 00:05:02.250
We'll begin in the top left-hand corner of the canvas,

00:05:02.250 --> 00:05:07.020
and then we'll grab the whole of the canvas width,

00:05:07.360 --> 00:05:10.890
and also the canvas height.

00:05:12.610 --> 00:05:17.285
This is going to store the data for the image.

00:05:17.285 --> 00:05:21.695
I'm going to create one more variable, simply called data.

00:05:21.695 --> 00:05:26.980
I want to set this to be ImageData.data.

00:05:26.980 --> 00:05:29.565
We don't have to create this variable,

00:05:29.565 --> 00:05:31.500
the only reason I have did it is because we

00:05:31.500 --> 00:05:35.955
use ImageData.data quite a lot when using the for loop.

00:05:35.955 --> 00:05:40.870
It's just a little bit shorter by storing inside a data variable.

00:05:41.060 --> 00:05:44.830
Then we're ready to create our for loop.

00:05:46.910 --> 00:05:51.230
The for loop can be pretty the same as the one from the last video,

00:05:51.230 --> 00:05:53.585
where we looked at modifying pixels.

00:05:53.585 --> 00:05:58.165
We'll set the variable i to be 0 to start with,

00:05:58.165 --> 00:06:03.480
and we'll keep the loop going while i is less than data,

00:06:03.480 --> 00:06:07.710
which is this variable here,.length.

00:06:07.710 --> 00:06:14.025
This data variable is a just a short version of writing ImageData.data.length.

00:06:14.025 --> 00:06:19.000
Then i plus or equals 4.

00:06:19.130 --> 00:06:24.280
If you remember this is because each pixel has four channels.

00:06:24.280 --> 00:06:28.340
Before we start modifying the individual red, green,

00:06:28.340 --> 00:06:32.855
and blue channels, I'm going to create a variable called average.

00:06:32.855 --> 00:06:35.750
This is going to be the average value of the red,

00:06:35.750 --> 00:06:37.615
green, and blue channel.

00:06:37.615 --> 00:06:43.950
Let's set this equal to data and square brackets i.

00:06:43.950 --> 00:06:47.190
This is the first channel which is red,

00:06:47.190 --> 00:06:50.205
the add this to the green, and blue.

00:06:50.205 --> 00:06:55.330
Data i plus 1,

00:06:55.670 --> 00:07:00.100
and then data i plus 2.

00:07:00.770 --> 00:07:03.960
This is the red, green, and blue.

00:07:03.960 --> 00:07:10.265
Add all three values together and then divide it by 3 to get the average.

00:07:10.265 --> 00:07:13.710
Let's start with the red value.

00:07:13.710 --> 00:07:17.970
Data on the first one is i,

00:07:17.970 --> 00:07:25.220
if you remember from the last video we set this value to be between 0-255.

00:07:25.220 --> 00:07:29.475
But this time we're just going to set it to the average variable.

00:07:29.475 --> 00:07:33.100
Then let's do this two more times,

00:07:33.290 --> 00:07:37.330
for the green, and the blue.

00:07:39.170 --> 00:07:45.825
I plus 1 and i plus 2, and then moving down.

00:07:45.825 --> 00:07:48.510
Make sure this is outside of the loop now.

00:07:48.510 --> 00:07:56.110
We need to put this image data back onto the canvas, with ctx.putImageData.

00:07:56.780 --> 00:08:03.360
The data which we want to pull back onto the canvas is this image data variable.

00:08:04.000 --> 00:08:07.910
On the position, is the top left-hand corner,

00:08:07.910 --> 00:08:13.440
which is 0, 0, and then save that.

00:08:13.440 --> 00:08:18.610
You notice after doing that we still don't have any change to the canvas.

00:08:18.610 --> 00:08:20.565
If you remember before,

00:08:20.565 --> 00:08:23.390
we mentioned that we need to add a line of code,

00:08:23.390 --> 00:08:26.045
which was the cross-origin attributes.

00:08:26.045 --> 00:08:28.580
Let's add this just at the top now.

00:08:28.580 --> 00:08:31.380
Image.crossOrigin.

00:08:33.410 --> 00:08:40.080
I'm going to set this to anonymous and then save that.

00:08:40.080 --> 00:08:43.725
You can see instantly the effect has taken place.

00:08:43.725 --> 00:08:47.225
This line of code has allowed us to use an image

00:08:47.225 --> 00:08:51.380
from a different source without throwing any errors.

00:08:51.380 --> 00:08:54.720
Let's just expand this over so you can see.

00:08:58.220 --> 00:09:02.365
If we comment out the put image data,

00:09:02.365 --> 00:09:06.255
we should get the original color image back which we do.

00:09:06.255 --> 00:09:09.680
If you wanted to work with any different effects,

00:09:09.680 --> 00:09:13.145
rather than having all three channels set to average,

00:09:13.145 --> 00:09:17.540
you can change this to be anything between 0-255,

00:09:17.540 --> 00:09:20.040
and you can see the effect there.

00:09:23.740 --> 00:09:26.750
That's one way of completing this challenge

00:09:26.750 --> 00:09:30.035
and of course there's many different ways of doing this.

00:09:30.035 --> 00:09:34.850
But the main thing is to give it a goal and try and learn from any mistakes.

00:09:34.850 --> 00:09:36.890
With challenge all complete now,

00:09:36.890 --> 00:09:41.780
let's now move on to the next video and we'll take a better look at looping.
