WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.250 --> 00:00:05.370
Moving on from the corners and miters from the last video,

00:00:05.370 --> 00:00:09.240
we're now going to take a look at arcs and circles.

00:00:09.240 --> 00:00:12.765
Let's create a new CodePen for this.

00:00:12.765 --> 00:00:15.550
So fork the last video,

00:00:15.860 --> 00:00:22.600
then let's create a title of arcs and circles.

00:00:33.320 --> 00:00:39.360
I'm going to read all the script except the canvas and the context variables,

00:00:39.360 --> 00:00:42.850
so we'll start fresh inside of that.

00:00:44.120 --> 00:00:46.975
Before we start writing any code,

00:00:46.975 --> 00:00:52.670
let's take a look at some slides to get a better understanding of how to use arc.

00:00:53.180 --> 00:00:58.895
This is the arc method and it takes in various parameters.

00:00:58.895 --> 00:01:06.505
To begin with, we've got the X and the Y properties and these are center of the arc.

00:01:06.505 --> 00:01:11.795
So right in the middle of the arc or the circle that we want to create.

00:01:11.795 --> 00:01:16.510
The third property is the radius so the radius is

00:01:16.510 --> 00:01:21.740
the distance from the center to the outside of the circle.

00:01:21.740 --> 00:01:26.680
Then we have the start angle and the end angle.

00:01:27.350 --> 00:01:32.980
We need to understand that arc uses radians rather than degrees.

00:01:32.980 --> 00:01:36.545
So only horizontal or the X axis,

00:01:36.545 --> 00:01:40.275
this is the start position or zero.

00:01:40.275 --> 00:01:43.195
This is effectively at three o'clock.

00:01:43.195 --> 00:01:45.070
Then a quarter the way round,

00:01:45.070 --> 00:01:48.200
this will be 0.5 times pi.

00:01:48.200 --> 00:01:51.180
Halfway round would be one times pi,

00:01:51.180 --> 00:01:58.535
1.5 and then two times pi would be a full rotation or a full circle.

00:01:58.535 --> 00:02:04.780
The last parameter is where we want the arc to be drawn clockwise or anticlockwise.

00:02:04.780 --> 00:02:09.805
This is a Boolean value which is set to either true or false.

00:02:09.805 --> 00:02:13.740
So by default, it's set to clockwise.

00:02:13.740 --> 00:02:15.770
If we set that to be true,

00:02:15.770 --> 00:02:18.875
we could then change this to be anticlockwise.

00:02:18.875 --> 00:02:22.870
For this example, the start angle would be zero.

00:02:22.870 --> 00:02:31.685
We'd want it to go anticlockwise all the way round to 0.5. times pi for the end angle.

00:02:31.685 --> 00:02:37.085
If you do want to work out what radians are in relation to degrees,

00:02:37.085 --> 00:02:38.720
there's some calculators online,

00:02:38.720 --> 00:02:42.620
so just give that a quick google and you'll be able to find what you need.

00:02:42.620 --> 00:02:47.190
Let's now head back to CodePen and take a look at some examples.

00:02:48.380 --> 00:02:52.365
Let's begin by creating our first arc.

00:02:52.365 --> 00:02:57.670
I'm going to begin a path to start with.

00:03:00.530 --> 00:03:05.320
Then let's create the arc, so ctx.arc.

00:03:06.290 --> 00:03:10.105
We add the parameters inside the brackets,

00:03:10.105 --> 00:03:12.740
just like we looked at in the slides before.

00:03:12.740 --> 00:03:16.435
The first two values is the center of the arc.

00:03:16.435 --> 00:03:19.660
I'm going to make my inner center of the canvas.

00:03:19.660 --> 00:03:27.750
So 150,150 then the radius I'm going to make mine 80.

00:03:27.750 --> 00:03:32.535
The starting position, mine is going to be set to zero.

00:03:32.535 --> 00:03:34.545
Then the end angle,

00:03:34.545 --> 00:03:40.960
I'm going to make mine one times math.pi.

00:03:42.470 --> 00:03:47.355
The starting position of zero is over in the three o'clock position.

00:03:47.355 --> 00:03:51.530
We've got the finish position to be one times math.pi,

00:03:51.530 --> 00:03:55.045
which is over at the nine o'clock position.

00:03:55.045 --> 00:03:59.295
To draw this, we just need to add the stroke or the fill.

00:03:59.295 --> 00:04:01.200
So ctx.

00:04:01.200 --> 00:04:05.325
stroke just to give us the outline,

00:04:05.325 --> 00:04:10.085
so there we are because this is default to clockwise.

00:04:10.085 --> 00:04:13.055
It's going round in the clockwise position.

00:04:13.055 --> 00:04:15.275
If we want this to be the other way,

00:04:15.275 --> 00:04:17.455
we can change it to be true.

00:04:17.455 --> 00:04:21.800
Then we'll get the arc which goes round in the anticlockwise direction.

00:04:21.800 --> 00:04:28.020
We can also fill the section of the arc by using ctx.fill.

00:04:29.720 --> 00:04:33.555
There's a default black which we've seen in previous videos.

00:04:33.555 --> 00:04:35.825
Of course we can change the fill style,

00:04:35.825 --> 00:04:38.020
if that's something which you want to do.

00:04:38.020 --> 00:04:40.190
If we want to create the full circle,

00:04:40.190 --> 00:04:41.810
as we looked at previously,

00:04:41.810 --> 00:04:47.970
we just need to change the end angle to be two times pi and that creates a full circle.

00:04:48.010 --> 00:04:51.240
I'm trying to change it back for now.

00:04:51.260 --> 00:04:54.740
Next I'm going to take a look at arcTo

00:04:54.740 --> 00:04:58.760
and arcTo can be a little bit more difficult to understand.

00:04:58.760 --> 00:05:03.245
Let's take a look at a good example which I found online.

00:05:03.245 --> 00:05:07.590
This is available at rgraph.net.

00:05:08.050 --> 00:05:12.250
If you do a search for rgraph and also the arcTo function,

00:05:12.250 --> 00:05:16.385
you should be able to find this interactive example.

00:05:16.385 --> 00:05:20.570
To understand arcTo, we need to be aware that there's

00:05:20.570 --> 00:05:24.475
more than just a start and end angle.

00:05:24.475 --> 00:05:27.295
We begin with the P0,

00:05:27.295 --> 00:05:30.350
which is just down in the bottom left-hand corner.

00:05:30.350 --> 00:05:33.090
We can move this if we want.

00:05:33.140 --> 00:05:36.105
We'll begin by setting P0,

00:05:36.105 --> 00:05:40.410
which is the start position, by using moveTo.

00:05:40.410 --> 00:05:43.525
We then set the value of P1,

00:05:43.525 --> 00:05:47.650
which is a point where these two lines meet.

00:05:47.650 --> 00:05:50.985
P2 is then the end position.

00:05:50.985 --> 00:05:56.650
Then we use lineTo to continue with the line vertically to the endpoint.

00:05:57.200 --> 00:06:00.290
This is a great example because we can move any of

00:06:00.290 --> 00:06:05.340
these points and we get a better understanding of how it all works.

00:06:05.470 --> 00:06:10.890
Let's go back over to CodePen and create an example for ourself.

00:06:11.000 --> 00:06:13.325
Still within the script tags,

00:06:13.325 --> 00:06:16.620
we're going to create a new Path.

00:06:16.960 --> 00:06:21.050
Let's begin the Path. Just below the last example.

00:06:21.050 --> 00:06:25.380
In fact, we'll create a little bit more space to play with so let's make

00:06:25.380 --> 00:06:31.030
the width to be 600 just so we can squeeze both those on.

00:06:32.810 --> 00:06:37.390
We are going to puff. Then the first thing we need to do is create

00:06:37.390 --> 00:06:42.950
a starting point so ctx.moveTo.

00:06:44.180 --> 00:06:47.625
The position we're going to start at is X,

00:06:47.625 --> 00:06:50.475
300 and then Y,

00:06:50.475 --> 00:06:55.590
150 so create a starting point,

00:06:55.590 --> 00:06:58.540
which is effectively P0.

00:06:58.610 --> 00:07:03.490
Then I'm going to continue the line with a lineTo.

00:07:03.590 --> 00:07:10.260
The point I would like to set the lineTo is 400,150.

00:07:10.260 --> 00:07:18.000
Let's add the stroke so we can see the lines as we're drawing them.

00:07:18.000 --> 00:07:22.845
There's our starting position.Now we move the line across 100 pixels.

00:07:22.845 --> 00:07:28.180
We have lineTo. Then let's create the arcTo method.

00:07:30.140 --> 00:07:33.394
Let's create the coordinates,

00:07:33.394 --> 00:07:38.390
which is for P1, which is just up here.

00:07:38.390 --> 00:07:47.915
I'm going to set mine to be 500,150 so this then creates the imaginary P1 position.

00:07:47.915 --> 00:07:52.745
Then because we want the line to curve round and move down on the Y-axis,

00:07:52.745 --> 00:08:00.270
we're going to make it 500, then drop down to 300 and then a radius of 75.

00:08:00.270 --> 00:08:04.785
Then to extend the line right down to the finish position,

00:08:04.785 --> 00:08:09.420
which is 500,300 then you just extend the line with

00:08:09.420 --> 00:08:19.470
a lineTo of 500,300 and there is our arcTo complete.

00:08:19.470 --> 00:08:26.185
Just to recap, we've moved to position 300,150, which is here.

00:08:26.185 --> 00:08:28.650
We've then created a line,

00:08:28.650 --> 00:08:33.909
100 pixels [inaudible] across which takes a line across horizontally.

00:08:33.909 --> 00:08:38.940
We've then created the arcTo so the first value of

00:08:38.940 --> 00:08:45.010
500,150 is the imaginary P1 position, which is here.

00:08:45.010 --> 00:08:49.085
So because we want the arc to then curve round,

00:08:49.085 --> 00:08:53.315
we'll then drop the Y value to be 300

00:08:53.315 --> 00:08:58.555
and 500,300 is the finish position, which is down here.

00:08:58.555 --> 00:09:01.670
We then extended the line to be straight

00:09:01.670 --> 00:09:05.600
down to the finish position creating the full arc.

00:09:05.600 --> 00:09:07.350
I hope that makes sense.

00:09:07.350 --> 00:09:11.180
Probably play around with the values and see what you can create.

00:09:11.180 --> 00:09:15.370
Also do a little play around with the interactive example.

00:09:15.370 --> 00:09:18.650
That's how we can add arcs and circles to the canvas.

00:09:18.650 --> 00:09:20.480
If you come back in the next video,

00:09:20.480 --> 00:09:23.550
we'll take a look at drawing text.
