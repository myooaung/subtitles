1
00:00:01,641 --> 00:00:03,290
<v ->Now as we learned about the two pieces,</v>

2
00:00:03,290 --> 00:00:06,705
Node.js on the server and Angular 2 on the client,

3
00:00:06,705 --> 00:00:09,022
it's time to understand how they work together,

4
00:00:09,022 --> 00:00:10,267
how to connect them because this

5
00:00:10,267 --> 00:00:11,623
is the key of this course.

6
00:00:11,623 --> 00:00:14,865
This is the main concept of this course in the end, right?

7
00:00:14,865 --> 00:00:17,566
So this is our typical server-side only approach.

8
00:00:17,566 --> 00:00:20,283
We have our client, the browser, and we have the server,

9
00:00:20,283 --> 00:00:22,526
and we exchange a request from

10
00:00:22,526 --> 00:00:25,269
the client typically for some HTML code

11
00:00:25,269 --> 00:00:27,091
from the server which then is rendered

12
00:00:27,091 --> 00:00:28,694
in the browser again.

13
00:00:28,694 --> 00:00:30,222
That is how a lot of web pages work,

14
00:00:30,222 --> 00:00:32,304
and there's nothing wrong with that,

15
00:00:32,304 --> 00:00:34,775
but of course, one problem is that

16
00:00:34,775 --> 00:00:36,899
here we need to send a request

17
00:00:36,899 --> 00:00:39,096
for every single change because

18
00:00:39,096 --> 00:00:42,360
our page constantly needs to be rerendered and whole.

19
00:00:42,360 --> 00:00:43,867
So, we constantly need to fetch

20
00:00:43,867 --> 00:00:46,729
new HTML code from the server.

21
00:00:46,729 --> 00:00:49,407
That changes in a single page application.

22
00:00:49,407 --> 00:00:52,017
Here we all of a sudden now control

23
00:00:52,017 --> 00:00:54,421
the complete app via JavaScript.

24
00:00:54,421 --> 00:00:56,841
As I explained before, through Angular 2.

25
00:00:56,841 --> 00:00:58,449
It will rerender the page.

26
00:00:58,449 --> 00:00:59,944
It will update the dom.

27
00:00:59,944 --> 00:01:01,567
We don't need to reach out to the server

28
00:01:01,567 --> 00:01:03,341
for every single change.

29
00:01:03,341 --> 00:01:04,831
We will, of course, need to reach out

30
00:01:04,831 --> 00:01:06,172
if we need to send some data

31
00:01:06,172 --> 00:01:07,789
to store it in a database, let's say,

32
00:01:07,789 --> 00:01:10,013
or to fetch some data, but Angular 2

33
00:01:10,013 --> 00:01:11,786
will do this in the background

34
00:01:11,786 --> 00:01:13,224
behind the scenes.

35
00:01:13,224 --> 00:01:15,382
So everything happens instantly

36
00:01:15,382 --> 00:01:17,031
which is a feeling you know from apps

37
00:01:17,031 --> 00:01:19,716
on your mobile phones and which is why

38
00:01:19,716 --> 00:01:21,685
single page applications and frameworks

39
00:01:21,685 --> 00:01:24,585
to create them aren't so popular these days.

40
00:01:24,585 --> 00:01:27,192
They bring this very reactive feeling

41
00:01:27,192 --> 00:01:29,452
to our web applications.

42
00:01:29,452 --> 00:01:32,222
So here we might not need a server in the end

43
00:01:32,222 --> 00:01:33,925
or at least we will not connect

44
00:01:33,925 --> 00:01:36,437
to it as often because generally,

45
00:01:36,437 --> 00:01:38,927
we handle everything in the browser.

46
00:01:38,927 --> 00:01:41,811
From time to time we do need to connect though.

47
00:01:41,811 --> 00:01:43,684
We start with our user who's on the webpage

48
00:01:43,684 --> 00:01:46,306
which initially, of course, was sent by the server

49
00:01:46,306 --> 00:01:47,938
because that is where it lies,

50
00:01:47,938 --> 00:01:49,509
but the ones who are on the webpage,

51
00:01:49,509 --> 00:01:51,354
we use the Angular 2 application

52
00:01:51,354 --> 00:01:52,728
with its own router and so on

53
00:01:52,728 --> 00:01:56,335
to handle all the user input and rerender the dom,

54
00:01:56,335 --> 00:01:58,385
but from time to time, we got operation

55
00:01:58,385 --> 00:01:59,954
where we need to reach out to the server.

56
00:01:59,954 --> 00:02:02,459
For example if we log in or if we create

57
00:02:02,459 --> 00:02:04,887
a new message and want to store this in a database.

58
00:02:04,887 --> 00:02:06,202
Angular 2 doesn't have direct

59
00:02:06,202 --> 00:02:07,411
access to the database.

60
00:02:07,411 --> 00:02:08,753
It's fronted only.

61
00:02:08,753 --> 00:02:10,502
It runs in the browser, so we need

62
00:02:10,502 --> 00:02:12,356
to reach out to the server to tell it,

63
00:02:12,356 --> 00:02:13,363
hey do something.

64
00:02:13,363 --> 00:02:15,871
For example, store something in the database.

65
00:02:15,871 --> 00:02:19,103
We do that behind the scenes with a HX request

66
00:02:19,103 --> 00:02:20,502
where we then request data or

67
00:02:20,502 --> 00:02:23,208
want to request a storage of some data.

68
00:02:23,208 --> 00:02:25,232
On Node.js, on the server,

69
00:02:25,232 --> 00:02:28,251
we then also have a router, the Node.js router

70
00:02:28,251 --> 00:02:30,411
which exposes several end points,

71
00:02:30,411 --> 00:02:32,779
several routes are in a two app can

72
00:02:32,779 --> 00:02:34,457
connect to via HX.

73
00:02:34,457 --> 00:02:37,093
So why request behind the scenes

74
00:02:37,093 --> 00:02:39,020
without reloading the page.

75
00:02:39,020 --> 00:02:41,528
These URLs, these end points,

76
00:02:41,528 --> 00:02:44,906
then tell Node.js what to do when ever a request

77
00:02:44,906 --> 00:02:48,062
to reach such an endpoint, reaches such a URL.

78
00:02:48,062 --> 00:02:51,037
There, we then forward this request

79
00:02:51,037 --> 00:02:53,891
or handle this request in our route controllers,

80
00:02:53,891 --> 00:02:55,509
so we execute some code.

81
00:02:55,509 --> 00:02:58,048
We might access the database and in the end,

82
00:02:58,048 --> 00:03:00,787
we sent back a response to the Angular 2 application,

83
00:03:00,787 --> 00:03:02,876
and that also behind the scenes.

84
00:03:02,876 --> 00:03:05,133
So, this happens asynchronously.

85
00:03:05,133 --> 00:03:07,088
Our browser application will keep running.

86
00:03:07,088 --> 00:03:09,550
We don't see that there is this request

87
00:03:09,550 --> 00:03:11,404
response happening in the background,

88
00:03:11,404 --> 00:03:13,351
and eventually when the response returns,

89
00:03:13,351 --> 00:03:15,331
Angular 2 will handle it parse it

90
00:03:15,331 --> 00:03:16,854
to whatever it needs to do,

91
00:03:16,854 --> 00:03:19,558
and if it needs to, update the dom

92
00:03:19,558 --> 00:03:22,193
or the part of the dom which now needs to be updated.

93
00:03:22,193 --> 00:03:23,148
In the meantime, it might have

94
00:03:23,148 --> 00:03:24,819
showed a progress bar or something

95
00:03:24,819 --> 00:03:26,784
like that if necessary.

96
00:03:26,784 --> 00:03:30,209
This is how we connect Angular 2 and Node.js.

97
00:03:30,209 --> 00:03:32,969
The key take away here is Node.js

98
00:03:32,969 --> 00:03:36,524
exposes some end point, some API end points,

99
00:03:36,524 --> 00:03:39,205
some routes to which Angular 2 can

100
00:03:39,205 --> 00:03:42,158
connect behind the scenes to exchange data

101
00:03:42,158 --> 00:03:44,227
and to well speak to the server.

102
00:03:44,227 --> 00:03:46,378
Generally, everything the user sees

103
00:03:46,378 --> 00:03:48,330
is handled by Angular 2,

104
00:03:48,330 --> 00:03:51,190
and the page is not reloaded at any point

105
00:03:51,190 --> 00:03:52,886
because we only have one single page

106
00:03:52,886 --> 00:03:56,803
which is handled by Angular 2 on the front end.

