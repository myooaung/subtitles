WEBVTT
1

00:00:01.464 --> 00:00:03.988

<v ->Now we can not only handle get routes,</v>



2

00:00:03.988 --> 00:00:07.240

we can also handle post routes so let's do this here.



3

00:00:07.240 --> 00:00:09.079

I'll set up a new route with router



4

00:00:09.079 --> 00:00:11.299

and then post instead of get.



5

00:00:11.299 --> 00:00:13.251

Now here we set up the URL we want



6

00:00:13.251 --> 00:00:15.011

to use for this post route.



7

00:00:15.011 --> 00:00:18.669

I'll name it message here and then we have this function,



8

00:00:18.669 --> 00:00:20.760

which has this request, this response,



9

00:00:20.760 --> 00:00:23.429

and this next function we could call.



10

00:00:23.429 --> 00:00:26.544

Now in here what I want to do is I want



11

00:00:26.544 --> 00:00:30.480

to redirect the user to this normal message route



12

00:00:30.480 --> 00:00:32.958

and output the message, which is now



13

00:00:32.958 --> 00:00:34.450

submittable by the user.



14

00:00:34.450 --> 00:00:36.339

Well, it isn't right now, but I'll add a form



15

00:00:36.339 --> 00:00:39.491

for the user to submit a message in a second.



16

00:00:39.491 --> 00:00:44.149

So here in this /message URL, what I do



17

00:00:44.149 --> 00:00:46.880

is I first extract the message.



18

00:00:46.880 --> 00:00:49.457

I'll store it in a variable and I can extract it



19

00:00:49.457 --> 00:00:53.302

from my request and there from the request body.



20

00:00:53.302 --> 00:00:56.611

Remember in the app.js file in the root folder,



21

00:00:56.611 --> 00:00:59.299

we ran bodyParser on each request,



22

00:00:59.299 --> 00:01:01.869

which means it is parsing the body



23

00:01:01.869 --> 00:01:05.046

and giving us access to the data sent with a request



24

00:01:05.046 --> 00:01:08.979

in this convenient body variable here.



25

00:01:08.979 --> 00:01:12.874

So here request body and then I can simply access



26

00:01:12.874 --> 00:01:16.323

the property under which I will send the data



27

00:01:16.323 --> 00:01:18.018

which I want to extract.



28

00:01:18.018 --> 00:01:20.709

So this is something I can then set up on the front-end



29

00:01:20.709 --> 00:01:23.578

in my view, for example when creating a form,



30

00:01:23.578 --> 00:01:26.800

which name I gave the input I want to extract here.



31

00:01:26.800 --> 00:01:29.976

So I will assume that it is stored in a variable



32

00:01:29.976 --> 00:01:32.400

where the property stored message too



33

00:01:32.400 --> 00:01:35.160

and we will set up the right view for that



34

00:01:35.160 --> 00:01:36.811

in just a second.



35

00:01:36.811 --> 00:01:40.491

Thereafter I can redirect my request



36

00:01:40.491 --> 00:01:43.704

because I don't want to render a response here



37

00:01:43.704 --> 00:01:44.931

on this get request.



38

00:01:44.931 --> 00:01:47.531

Instead I want to redirect to a get route



39

00:01:47.531 --> 00:01:49.880

to only render get routes.



40

00:01:49.880 --> 00:01:53.709

I want to redirect to /message, so to this route here



41

00:01:53.709 --> 00:01:56.199

and I also want to append the message



42

00:01:56.199 --> 00:01:58.341

which was sent by the user.



43

00:01:58.341 --> 00:02:01.998

So I will add another slash and then message



44

00:02:01.998 --> 00:02:05.269

so I will encode this message in the URL.



45

00:02:05.269 --> 00:02:08.051

In order to be able to handle this message now



46

00:02:08.051 --> 00:02:10.371

in my get route, I need to set it up



47

00:02:10.371 --> 00:02:12.800

to be able to receive a request.



48

00:02:12.800 --> 00:02:15.331

I do that here by adding a colon



49

00:02:15.331 --> 00:02:17.280

and then any name of my choice.



50

00:02:17.280 --> 00:02:19.640

I'll name it msg to mix it up and have



51

00:02:19.640 --> 00:02:22.250

a different name here than always message.



52

00:02:22.250 --> 00:02:24.466

So this is up to me, but with the colon



53

00:02:24.466 --> 00:02:27.357

I indicate this part of the URL,



54

00:02:27.357 --> 00:02:30.566

so the slash something after slash message,



55

00:02:30.566 --> 00:02:33.387

will actually be some variable data.



56

00:02:33.387 --> 00:02:37.283

I can then extract the data here in my function



57

00:02:37.283 --> 00:02:41.169

to pass it to the view on my request object as well



58

00:02:41.169 --> 00:02:44.558

because it's part of the request and then params.



59

00:02:44.558 --> 00:02:48.249

Params refers to parameters encoded in the URL



60

00:02:48.249 --> 00:02:53.049

and here I simply use the same name I said up there so .msg.



61

00:02:53.049 --> 00:02:56.747

With that, we set up the routes handling both a post request



62

00:02:56.747 --> 00:02:59.038

and now a get request with some data.



63

00:02:59.038 --> 00:03:01.587

I can already show this get request



64

00:03:01.587 --> 00:03:05.049

if I restart the server again since we've changed something



65

00:03:05.049 --> 00:03:08.497

and then I go to /message/something.



66

00:03:08.497 --> 00:03:10.838

You now see something here because we encoded



67

00:03:10.838 --> 00:03:12.718

this part to be variable.



68

00:03:12.718 --> 00:03:16.885

Now I also want to add a form to this node.hbs file here



69

00:03:18.127 --> 00:03:22.238

so that we are able to actually submit our own data.



70

00:03:22.238 --> 00:03:25.107

So I'll add a form action is /message



71

00:03:25.107 --> 00:03:28.721

because this is the route of this post route



72

00:03:28.721 --> 00:03:31.897

and then here in this form I'll make it very simple.



73

00:03:31.897 --> 00:03:36.449

I'll add a input, which I'll give a name of message.



74

00:03:36.449 --> 00:03:37.987

The name here is important.



75

00:03:37.987 --> 00:03:41.467

I have to use message here since I tried to extract



76

00:03:41.467 --> 00:03:44.227

the data from a property named message here



77

00:03:44.227 --> 00:03:47.849

on my request body and this will be the same name.



78

00:03:47.849 --> 00:03:50.456

So if I use message here on the back-end,



79

00:03:50.456 --> 00:03:53.497

I have to name this input message on the front-end.



80

00:03:53.497 --> 00:03:57.211

Here I'll simply set up a button of type submit



81

00:03:57.211 --> 00:03:59.270

to submit this message.



82

00:03:59.270 --> 00:04:01.463

With that, we're almost done, missing pieces.



83

00:04:01.463 --> 00:04:05.725

I need to set up a method of post here on the form



84

00:04:05.725 --> 00:04:07.875

and with that, no need to restart the server.



85

00:04:07.875 --> 00:04:09.955

We didn't change anything on the server side code,



86

00:04:09.955 --> 00:04:12.995

only the view where we don't need to restart the server.



87

00:04:12.995 --> 00:04:16.412

If I now reload here and enter my message



88

00:04:17.955 --> 00:04:21.086

and hit submit, we now see my message being output here.



89

00:04:21.086 --> 00:04:24.206

It's encoded in the URL and what happened behind the scenes



90

00:04:24.206 --> 00:04:26.505

if we have a look at the network tab.



91

00:04:26.505 --> 00:04:29.755

Let me reload and send another message.



92

00:04:31.763 --> 00:04:35.995

You'll see that I reach out to message here



93

00:04:35.995 --> 00:04:37.765

with a post request.



94

00:04:37.765 --> 00:04:41.825

Then we get status of 302, which means it's redirected



95

00:04:41.825 --> 00:04:45.617

to this route here, message/anothermessage,



96

00:04:45.617 --> 00:04:47.795

which is a get request which handles



97

00:04:47.795 --> 00:04:50.225

what we see here in the end.



98

00:04:50.225 --> 00:04:52.577

And this is how we can work with different types



99

00:04:52.577 --> 00:04:56.446

of requests in the route folder here or in the route file



100

00:04:56.446 --> 00:04:58.696

and on our views like this.



101

00:04:59.577 --> 00:05:02.206

Now that being said, we will use this routing



102

00:05:02.206 --> 00:05:04.097

a lot throughout the course because we need



103

00:05:04.097 --> 00:05:06.285

to create such routes for Angular 2.0,



104

00:05:06.285 --> 00:05:09.201

but as mentioned before we won't render any views



105

00:05:09.201 --> 00:05:12.590

but the index.hbs view where we won't output data.



106

00:05:12.590 --> 00:05:14.086

All the data output of something,



107

00:05:14.086 --> 00:05:15.744

Angular 2.0 will handle it for us.



108

00:05:15.744 --> 00:05:17.994

This is only to showcase you how



109

00:05:17.994 --> 00:05:20.446

a server side only application would work



110

00:05:20.446 --> 00:05:24.363

and to demonstrate how this routing works here.



