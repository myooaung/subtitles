WEBVTT
1

00:00:01.909 --> 00:00:04.509

<v ->I'm back in the seed project we created in the last module</v>



2

00:00:04.509 --> 00:00:07.819

and I stopped this build process we ran with npm run build,



3

00:00:07.819 --> 00:00:10.380

since I won't work with the Angular 2 front-end anymore



4

00:00:10.380 --> 00:00:11.291

for now.



5

00:00:11.291 --> 00:00:13.551

Instead, I wanna focus on the back end,



6

00:00:13.551 --> 00:00:18.091

and explain how this works, how we use node.js there.



7

00:00:18.091 --> 00:00:21.280

So the assets folder is a folder I won't catch for now,



8

00:00:21.280 --> 00:00:23.160

let's start by understanding



9

00:00:23.160 --> 00:00:26.512

how a request travels through our application,



10

00:00:26.512 --> 00:00:30.679

or what actually happens once we visit localhost:3000 there.



11

00:00:32.461 --> 00:00:34.609

The first thing we've gotta understand



12

00:00:34.609 --> 00:00:39.341

is that with npm start, we start with this bin/www folder,



13

00:00:39.341 --> 00:00:41.800

with the node command here, which basically means,



14

00:00:41.800 --> 00:00:44.851

use node.js, which we installed on our computer,



15

00:00:44.851 --> 00:00:45.693

remember that,



16

00:00:45.693 --> 00:00:48.591

use node.js to execute this file.



17

00:00:48.591 --> 00:00:51.262

Now this file holds normal Javascript code,



18

00:00:51.262 --> 00:00:55.731

and it uses a couple of tools we can use in node.js,



19

00:00:55.731 --> 00:00:57.591

these extra packages I was mentioning



20

00:00:57.591 --> 00:00:59.511

in one of the earlier lectures.



21

00:00:59.511 --> 00:01:03.431

So I'm not going to walk you step-by-step through this file.



22

00:01:03.431 --> 00:01:05.613

What generally happens here is,



23

00:01:05.613 --> 00:01:08.311

that we set up a port for our application,



24

00:01:08.311 --> 00:01:10.823

so the port you wanna listen to, 3000 here,



25

00:01:10.823 --> 00:01:13.333

since we're on localhost and wanna make sure



26

00:01:13.333 --> 00:01:16.109

that we're, well, able to visit it there,



27

00:01:16.109 --> 00:01:18.103

on a respective port,



28

00:01:18.103 --> 00:01:21.831

and then with createServer, we create our server,



29

00:01:21.831 --> 00:01:24.733

and as an argument, we pass the app.



30

00:01:24.733 --> 00:01:28.211

The app, again, is imported from the app.js file here,



31

00:01:28.211 --> 00:01:30.451

as you can see in the import up here,



32

00:01:30.451 --> 00:01:33.491

so we should have a look at this app.js file next.



33

00:01:33.491 --> 00:01:37.571

Before doing so, let's then see that we created the server,



34

00:01:37.571 --> 00:01:40.782

and with server.listen and then passing in the port,



35

00:01:40.782 --> 00:01:43.331

which is either 3000 or, if we deployed it,



36

00:01:43.331 --> 00:01:47.020

a port specified in the environment variables.



37

00:01:47.020 --> 00:01:50.091

Then with server.listen, we actually,



38

00:01:50.091 --> 00:01:52.750

so tell our node.js server to, well, listen



39

00:01:52.750 --> 00:01:56.917

to any requests reaching our domain and this port here.



40

00:01:58.041 --> 00:02:01.161

Now, what we can see is that if we go



41

00:02:01.161 --> 00:02:02.870

to the terminal window,



42

00:02:02.870 --> 00:02:06.401

and this is in my IDE, it's a normal terminal window though,



43

00:02:06.401 --> 00:02:09.990

where we ran npm start, this process keeps running,



44

00:02:09.990 --> 00:02:12.169

it's not exiting, and this is good,



45

00:02:12.169 --> 00:02:14.491

because of course our server should keep running,



46

00:02:14.491 --> 00:02:17.259

which is exactly what happens here.



47

00:02:17.259 --> 00:02:19.259

So this is our www file,



48

00:02:20.480 --> 00:02:22.750

all the other methods here can be ignored for now,



49

00:02:22.750 --> 00:02:25.491

that's basically just some code doing some optimizations



50

00:02:25.491 --> 00:02:27.120

and some error handling.



51

00:02:27.120 --> 00:02:30.240

The interesting part for us is the app.js file,



52

00:02:30.240 --> 00:02:32.749

because, remember, this holds this app,



53

00:02:32.749 --> 00:02:35.348

which is passed to the createServer method,



54

00:02:35.348 --> 00:02:38.280

so it seems to be important, and it is.



55

00:02:38.280 --> 00:02:41.691

App.js holds the code which is executed



56

00:02:41.691 --> 00:02:45.131

on each request reaching our server.



57

00:02:45.131 --> 00:02:49.830

No matter which URL it is, if it is /user, /message,



58

00:02:49.830 --> 00:02:53.997

/whatever, this file here is reached at any point



59

00:02:54.971 --> 00:02:56.859

or with every request.



60

00:02:56.859 --> 00:03:00.000

In this file, we set up our Express app.



61

00:03:00.000 --> 00:03:02.376

Remember, Express is this framework we're using.



62

00:03:02.376 --> 00:03:05.059

It's built on top of node.js.



63

00:03:05.059 --> 00:03:07.720

So it is node.js, it is Javascript,



64

00:03:07.720 --> 00:03:09.760

but it gives us some extra features.



65

00:03:09.760 --> 00:03:10.880

We started here.



66

00:03:10.880 --> 00:03:12.651

We create this app variable,



67

00:03:12.651 --> 00:03:16.371

and that was actually just the Express app getting started.



68

00:03:16.371 --> 00:03:19.760

On this Express app, we then run a couple of commands here,



69

00:03:19.760 --> 00:03:22.337

which basically first initialises our views,



70

00:03:22.337 --> 00:03:25.120

telling the Express app where our views,



71

00:03:25.120 --> 00:03:27.830

so the files we want to send back to the client, live.



72

00:03:27.830 --> 00:03:30.960

It's in this views folder as we configure it here,



73

00:03:30.960 --> 00:03:33.568

and which view engine we wanna use,



74

00:03:33.568 --> 00:03:34.902

which means, how do we want



75

00:03:34.902 --> 00:03:37.792

to parse these files on the server.



76

00:03:37.792 --> 00:03:40.093

You could send raw HTML files,



77

00:03:40.093 --> 00:03:43.013

but typically in the server side-only application,



78

00:03:43.013 --> 00:03:46.483

you use a templating engine to dynamically inject content



79

00:03:46.483 --> 00:03:49.792

into your templates, like a username if a user logged in,



80

00:03:49.792 --> 00:03:51.613

and something like that.



81

00:03:51.613 --> 00:03:54.464

The next step here is to apply some middleware.



82

00:03:54.464 --> 00:03:56.973

The middleware that we're applying here is basically



83

00:03:56.973 --> 00:04:00.293

to extract the body of our request if it was sent,



84

00:04:00.293 --> 00:04:02.432

so we extract the data which might be attached



85

00:04:02.432 --> 00:04:03.659

to our request,



86

00:04:03.659 --> 00:04:06.600

to parse any cookies, and so on.



87

00:04:06.600 --> 00:04:08.432

We also, this is important,



88

00:04:08.432 --> 00:04:12.733

set up the static directory of our project here.



89

00:04:12.733 --> 00:04:14.661

It's set up to be the public folder,



90

00:04:14.661 --> 00:04:16.773

and why is this important?



91

00:04:16.773 --> 00:04:20.749

Because this configures that only this public folder



92

00:04:20.749 --> 00:04:25.279

will be accessible from outside, so from anywhere.



93

00:04:25.279 --> 00:04:28.671

All the other folders, routes, views, and bin,



94

00:04:28.671 --> 00:04:31.329

are only accessible by the server,



95

00:04:31.329 --> 00:04:33.888

so on the server, not from the Internet.



96

00:04:33.888 --> 00:04:36.959

You can't read the routes file from the Internet.



97

00:04:36.959 --> 00:04:38.631

It's not accessible.



98

00:04:38.631 --> 00:04:41.489

With the static command, we indicate



99

00:04:41.489 --> 00:04:44.439

that this public folder holds our static files



100

00:04:44.439 --> 00:04:47.129

which you want to make accessible, and it does.



101

00:04:47.129 --> 00:04:50.039

It holds our Javascript code, and our styles.



102

00:04:50.039 --> 00:04:53.140

So this folder definitely needs to be accessible,



103

00:04:53.140 --> 00:04:55.500

and once we actually load the application,



104

00:04:55.500 --> 00:04:58.598

at localhost:3000/ for example,



105

00:04:58.598 --> 00:05:00.989

it will give us back some view,



106

00:05:00.989 --> 00:05:04.951

which then runs as if it were placed in this public folder.



107

00:05:04.951 --> 00:05:09.118

So this public folder is the folder serving our application,



108

00:05:10.380 --> 00:05:13.300

our server application in the end.



109

00:05:13.300 --> 00:05:15.237

Thereafter we get this middleware.



110

00:05:15.237 --> 00:05:18.298

That's a middleware I added to prevent any CORS errors.



111

00:05:18.298 --> 00:05:20.899

CORS refers to Cross Origin RequestS,



112

00:05:20.899 --> 00:05:22.820

which basically means requests coming



113

00:05:22.820 --> 00:05:25.639

from a different origin than the server.



114

00:05:25.639 --> 00:05:28.929

In Angular 2 app, this might be a setup you have.



115

00:05:28.929 --> 00:05:31.463

In this project, we will serve the Angular 2 app



116

00:05:31.463 --> 00:05:35.274

from the same server as our server-side code runs on,



117

00:05:35.274 --> 00:05:38.794

but in your setup, you might have two different servers,



118

00:05:38.794 --> 00:05:41.554

one serving your Angular 2 app and doing nothing else,



119

00:05:41.554 --> 00:05:44.130

and the other one hosting your server-side code.



120

00:05:44.130 --> 00:05:45.314

That will lead to problems



121

00:05:45.314 --> 00:05:48.114

if you don't have these headers set up on your server,



122

00:05:48.114 --> 00:05:50.491

because these headers allow such a setup.



123

00:05:50.491 --> 00:05:51.933

Otherwise, it's not allowed,



124

00:05:51.933 --> 00:05:54.562

because it poses a potential security issue



125

00:05:54.562 --> 00:05:57.103

if some other code tries to access your code



126

00:05:57.103 --> 00:05:59.189

on another server.



127

00:05:59.189 --> 00:06:01.778

Then finally, this line here is very important,



128

00:06:01.778 --> 00:06:03.898

because it forwards, in this case,



129

00:06:03.898 --> 00:06:07.187

since the path is just '/', any requests



130

00:06:07.187 --> 00:06:09.314

to the appRoutes variable,



131

00:06:09.314 --> 00:06:13.007

and the appRoutes variable happens to simply import



132

00:06:13.007 --> 00:06:17.347

the app.js file or the module exported in this file,



133

00:06:17.347 --> 00:06:19.188

in this routes folder.



134

00:06:19.188 --> 00:06:23.109

So this forwards the request to this app.js file



135

00:06:23.109 --> 00:06:25.069

in the routes folder, so we should have a look



136

00:06:25.069 --> 00:06:26.789

at this file, too.



137

00:06:26.789 --> 00:06:27.967

I'll do so in a second,



138

00:06:27.967 --> 00:06:31.247

but let me first continue in the app.js file here.



139

00:06:31.247 --> 00:06:33.797

So after forwarding it to the routes,



140

00:06:33.797 --> 00:06:35.978

the request shouldn't come back,



141

00:06:35.978 --> 00:06:38.989

because normally, our routes should handle any request



142

00:06:38.989 --> 00:06:40.674

reaching this website.



143

00:06:40.674 --> 00:06:44.187

But if we try to access a route which isn't defined



144

00:06:44.187 --> 00:06:47.378

in this routes folder, in the files there,



145

00:06:47.378 --> 00:06:50.847

then we will come back to this app.js file here,



146

00:06:50.847 --> 00:06:53.687

because then we didn't find a fitting route,



147

00:06:53.687 --> 00:06:55.058

this is why we load this,



148

00:06:55.058 --> 00:06:58.287

app.use statement here,



149

00:06:58.287 --> 00:07:01.269

I catch any requests which are still there,



150

00:07:01.269 --> 00:07:05.469

which did return, because these are 404 errors.



151

00:07:05.469 --> 00:07:08.137

The important part here is, normally,



152

00:07:08.137 --> 00:07:10.686

you would show some kind of error page.



153

00:07:10.686 --> 00:07:12.087

I don't do that here.



154

00:07:12.087 --> 00:07:16.287

Instead, I always render the index.hbs file



155

00:07:16.287 --> 00:07:19.589

from my views folder, which also is the same file



156

00:07:19.589 --> 00:07:22.046

holding my Angular 2 application.



157

00:07:22.046 --> 00:07:23.138

The reason for this,



158

00:07:23.138 --> 00:07:25.698

and I'll come back to this in the Angular 2 module,



159

00:07:25.698 --> 00:07:28.898

is that we will set up our main routing



160

00:07:28.898 --> 00:07:30.589

in the Angular 2 app.



161

00:07:30.589 --> 00:07:33.778

So by default, most of our routes won't be found



162

00:07:33.778 --> 00:07:35.076

on the server.



163

00:07:35.076 --> 00:07:37.995

We only have the back end routes for Angular 2



164

00:07:37.995 --> 00:07:40.435

to connect behind the scenes on the server.



165

00:07:40.435 --> 00:07:44.869

All the user-related routes are stored in the Angular 2 app.



166

00:07:44.869 --> 00:07:48.687

By default, though, each request sent to the server



167

00:07:48.687 --> 00:07:50.669

or whenever we reload the page,



168

00:07:50.669 --> 00:07:53.687

it will reach the server first, and not Angular 2.



169

00:07:53.687 --> 00:07:57.117

So having the routes in the Angular 2 application is nice,



170

00:07:57.117 --> 00:08:00.835

but won't do the trick, except for this setup,



171

00:08:00.835 --> 00:08:03.188

where I always send back to the Angular 2 app,



172

00:08:03.188 --> 00:08:05.317

in which we basically have a setup



173

00:08:05.317 --> 00:08:08.397

where we can't get 404 errors on the server,



174

00:08:08.397 --> 00:08:11.235

we would have to handle that on the front end.



175

00:08:11.235 --> 00:08:13.086

So this setup here makes sure



176

00:08:13.086 --> 00:08:15.365

that we always render the Angular 2 application,



177

00:08:15.365 --> 00:08:18.675

which we need to do since our routes are set up there.



178

00:08:18.675 --> 00:08:21.943

This is this app.js file in the root folder.



179

00:08:21.943 --> 00:08:24.995

Now let's go to the app.js file in the routes folder,



180

00:08:24.995 --> 00:08:27.375

which is this file where all requests,



181

00:08:27.375 --> 00:08:29.605

or currently all requests here,



182

00:08:29.605 --> 00:08:32.605

fitting this pattern, having a slash at the beginning,



183

00:08:32.605 --> 00:08:34.875

will get forwarded to.



184

00:08:34.875 --> 00:08:36.501

This file is very lean.



185

00:08:36.501 --> 00:08:38.685

It exports our router,



186

00:08:38.685 --> 00:08:41.856

and this router only has one route registered right now.



187

00:08:41.856 --> 00:08:44.675

It's a get route, as you can tell by this method,



188

00:08:44.675 --> 00:08:48.045

and this get route handles the slash case,



189

00:08:48.045 --> 00:08:51.325

so localhost/, nothing else.



190

00:08:51.325 --> 00:08:54.984

And there we only execute one method, res.render ,



191

00:08:54.984 --> 00:08:58.663

which uses the response object express.js gives us.



192

00:08:58.663 --> 00:09:01.575

It automatically passes it here in this callback function,



193

00:09:01.575 --> 00:09:03.784

which we need to set up on any middleware,



194

00:09:03.784 --> 00:09:06.464

and this is just a middleware we set up.



195

00:09:06.464 --> 00:09:10.864

And on this response object, which is created by express.js,



196

00:09:10.864 --> 00:09:14.144

we can call the render method to tell express.js,



197

00:09:14.144 --> 00:09:17.664

"Okay, create a new response and render a view.



198

00:09:17.664 --> 00:09:19.336

"The view we want to render is the same



199

00:09:19.336 --> 00:09:22.446

"as in the 404 error case, in the views folder,



200

00:09:22.446 --> 00:09:26.907

"index.hbs, which holds our Angular 2 application."



201

00:09:26.907 --> 00:09:29.965

This is the request flow we have right now, leading



202

00:09:29.965 --> 00:09:34.132

to this page on each request reaching localhost:3000.



