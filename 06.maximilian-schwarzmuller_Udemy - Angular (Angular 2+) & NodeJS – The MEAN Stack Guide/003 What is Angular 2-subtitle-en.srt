1
00:00:01,256 --> 00:00:03,672
<v Instructor>Great, so, we understood what NodeJS is.</v>

2
00:00:03,672 --> 00:00:06,088
It's the language running on the server.

3
00:00:06,088 --> 00:00:08,373
Now, Angular 2, as you probably are aware,

4
00:00:08,373 --> 00:00:11,187
is its counterpart running in the browser.

5
00:00:11,187 --> 00:00:12,742
The job of Angular 2, therefore,

6
00:00:12,742 --> 00:00:15,282
is to create a great user experience

7
00:00:15,282 --> 00:00:17,759
because as it runs in the browser, it's able

8
00:00:17,759 --> 00:00:20,686
to provide very reactive user experience.

9
00:00:20,686 --> 00:00:23,071
We don't need to send a request and wait for a response.

10
00:00:23,071 --> 00:00:25,528
Everything happens instantly.

11
00:00:25,528 --> 00:00:27,921
So, when we have our client-server setup,

12
00:00:27,921 --> 00:00:30,865
then Angular 2 is responsible for the client part.

13
00:00:30,865 --> 00:00:33,556
Here it is also written in JavaScript in the end.

14
00:00:33,556 --> 00:00:35,698
Though, we will use TypeScript, which kind

15
00:00:35,698 --> 00:00:40,192
of is the official language used for Angular 2 applications.

16
00:00:40,192 --> 00:00:42,940
TypeScript is just a superset to JavaScript,

17
00:00:42,940 --> 00:00:46,245
which means it adds some additional syntax.

18
00:00:46,245 --> 00:00:49,210
It makes the JavaScript syntax a bit nicer.

19
00:00:49,210 --> 00:00:52,054
It adds some extra checks and some extra features,

20
00:00:52,054 --> 00:00:54,562
but in the end we will have a bold process

21
00:00:54,562 --> 00:00:57,226
which compiles our Angular 2 TypeScript code

22
00:00:57,226 --> 00:00:59,425
to plain, to vanilla JavaScript code

23
00:00:59,425 --> 00:01:02,291
because that is what runs in the browser in the end.

24
00:01:02,291 --> 00:01:05,501
So, our Angular 2 app, therefore, allows us

25
00:01:05,501 --> 00:01:08,185
to run on a single page and it updates parts

26
00:01:08,185 --> 00:01:09,923
of the page which need updating.

27
00:01:09,923 --> 00:01:11,883
We're creating a single-page application,

28
00:01:11,883 --> 00:01:15,542
therefore, it updates the DOMs, so to re-render parts

29
00:01:15,542 --> 00:01:17,847
of the page that need to be updated as a chess set.

30
00:01:17,847 --> 00:01:19,946
It also handles our routing.

31
00:01:19,946 --> 00:01:22,211
We won't use NodeJS.

32
00:01:22,211 --> 00:01:24,154
We won't use our server for the routing.

33
00:01:24,154 --> 00:01:26,832
Instead, we want to route in our front-end application,

34
00:01:26,832 --> 00:01:28,927
again, to load things faster.

35
00:01:28,927 --> 00:01:32,246
So, we will set up some server-side routes too,

36
00:01:32,246 --> 00:01:34,519
as you will see, but only for Angular 2

37
00:01:34,519 --> 00:01:36,164
to reach out to them in the back end.

38
00:01:36,164 --> 00:01:37,676
But we'll come back to this.

39
00:01:37,676 --> 00:01:39,134
And, in the end, it provides

40
00:01:39,134 --> 00:01:41,819
with all of that a very reactive user experience,

41
00:01:41,819 --> 00:01:44,069
which is why it's so great.

