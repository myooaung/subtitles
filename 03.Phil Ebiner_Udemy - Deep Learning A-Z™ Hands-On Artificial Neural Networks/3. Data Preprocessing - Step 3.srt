1
1

00:00:00,150  -->  00:00:02,340
<v Instructor>Hello and welcome to this tutorial.</v>
2

2

00:00:02,340  -->  00:00:03,770
In the previous tutorials we learned
3

3

00:00:03,770  -->  00:00:06,860
how to import the libraries and to import a dataset
4

4

00:00:06,860  -->  00:00:10,360
and now we are finally going to start preparing the data
5

5

00:00:10,360  -->  00:00:13,320
so that our machine learning models run correctly.
6

6

00:00:13,320  -->  00:00:16,160
And the first problem that we have to deal with
7

7

00:00:16,160  -->  00:00:18,890
is the case where you have some missing data
8

8

00:00:18,890  -->  00:00:20,320
in your dataset.
9

9

00:00:20,320  -->  00:00:22,620
And that happens quite a lot actually in real life,
10

10

00:00:22,620  -->  00:00:26,330
so you have to get the trick to handle this problem
11

11

00:00:26,330  -->  00:00:28,930
and make it all good for your machine learning model
12

12

00:00:28,930  -->  00:00:30,210
to run correctly.
13

13

00:00:30,210  -->  00:00:32,370
So, let's have a look at the dataset.
14

14

00:00:32,370  -->  00:00:34,650
So, here is the dataset
15

15

00:00:34,650  -->  00:00:37,670
and as you can see, there is two missing data.
16

16

00:00:37,670  -->  00:00:40,110
There is one missing data in the Age column here
17

17

00:00:40,110  -->  00:00:42,460
for Spain and one missing data
18

18

00:00:42,460  -->  00:00:45,190
in the Salary column for Germany.
19

19

00:00:45,190  -->  00:00:47,440
So, how can we handle this problem?
20

20

00:00:47,440  -->  00:00:51,310
Well, a first idea is to remove the lines,
21

21

00:00:51,310  -->  00:00:54,070
the observations where there is some missing data,
22

22

00:00:54,070  -->  00:00:57,220
so what we could do is to remove this line
23

23

00:00:57,220  -->  00:00:59,230
and remove this line
24

24

00:00:59,230  -->  00:01:01,290
but that can be quite dangerous
25

25

00:01:01,290  -->  00:01:05,440
because imagine this dataset contains crucial information,
26

26

00:01:05,440  -->  00:01:08,560
it would be quite dangerous to remove an observation,
27

27

00:01:08,560  -->  00:01:10,990
so we need to figure out a better idea
28

28

00:01:10,990  -->  00:01:13,050
to handle this problem
29

29

00:01:13,050  -->  00:01:15,740
and another idea and that's actually the most common idea
30

30

00:01:15,740  -->  00:01:17,850
to handle missing data
31

31

00:01:17,850  -->  00:01:21,030
is to take the mean of the columns.
32

32

00:01:21,030  -->  00:01:24,690
So, here we are going to replace this missing data here
33

33

00:01:24,690  -->  00:01:28,040
by the mean of all the values in the column Age
34

34

00:01:28,040  -->  00:01:29,660
and that's the same for every feature
35

35

00:01:29,660  -->  00:01:31,470
that contains missing data.
36

36

00:01:31,470  -->  00:01:34,550
We replace this missing data by the mean of the values
37

37

00:01:34,550  -->  00:01:36,873
in the column that contains this missing data.
38

38

00:01:37,750  -->  00:01:40,580
So, as usual, we are gonna take a library
39

39

00:01:40,580  -->  00:01:41,790
to do this job for us.
40

40

00:01:41,790  -->  00:01:45,410
We're not going to implement a function mean ourself.
41

41

00:01:45,410  -->  00:01:48,140
We will make it as simplest as possible,
42

42

00:01:48,140  -->  00:01:51,210
so the library that we're going to use for this one
43

43

00:01:51,210  -->  00:01:54,470
is called scikit-learn preprocessing
44

44

00:01:54,470  -->  00:01:56,660
and from this slide we're going to import
45

45

00:01:56,660  -->  00:01:59,220
the Imputer class.
46

46

00:01:59,220  -->  00:02:00,550
So, let's do this.
47

47

00:02:00,550  -->  00:02:02,100
So, to import this library in Python,
48

48

00:02:02,100  -->  00:02:06,623
we need to type from sklearn dot
49

49

00:02:08,940  -->  00:02:10,793
and then preprocessing,
50

50

00:02:13,700  -->  00:02:14,563
here it is,
51

51

00:02:16,010  -->  00:02:17,470
import Imputer.
52

52

00:02:21,160  -->  00:02:23,040
So, I'll just explain what this is.
53

53

00:02:23,040  -->  00:02:25,780
So, sklearn is scikit-learn actually
54

54

00:02:25,780  -->  00:02:27,910
and it contains amazing libraries
55

55

00:02:27,910  -->  00:02:29,970
to make machine learning models
56

56

00:02:29,970  -->  00:02:34,330
and from scikit-learn we import this preprocessing library
57

57

00:02:34,330  -->  00:02:37,070
that contains a lot of classes, methods
58

58

00:02:37,070  -->  00:02:39,490
to preprocess any datasets,
59

59

00:02:39,490  -->  00:02:41,450
that is exactly what we're doing right now
60

60

00:02:41,450  -->  00:02:45,170
and from this library we're importing the Imputer class
61

61

00:02:45,170  -->  00:02:48,513
which will allow us to take care of those missing data.
62

62

00:02:49,470  -->  00:02:51,690
And now, now that we imported the class,
63

63

00:02:51,690  -->  00:02:54,850
we now need to create an object of the class.
64

64

00:02:54,850  -->  00:02:56,600
So, to create this object,
65

65

00:02:56,600  -->  00:02:58,980
we are going to start giving a name to this object
66

66

00:02:58,980  -->  00:03:03,980
and we're gonna call it imputer, let's make things simple.
67

67

00:03:04,060  -->  00:03:08,130
Imputer equals and now we're gonna call the class
68

68

00:03:08,130  -->  00:03:12,110
that we just imported which is Imputer with capital I
69

69

00:03:12,110  -->  00:03:14,420
and then now a good thing to do
70

70

00:03:14,420  -->  00:03:19,420
is to press Command + I to see the Object Inspector here.
71

71

00:03:19,870  -->  00:03:22,070
Command + I is like Command + Inspect,
72

72

00:03:22,070  -->  00:03:24,530
so we're inspecting the Imputer here
73

73

00:03:24,530  -->  00:03:26,390
to get some info about this class
74

74

00:03:26,390  -->  00:03:29,670
and see what parameters we have to input.
75

75

00:03:29,670  -->  00:03:32,160
So, here we have the parameters
76

76

00:03:32,160  -->  00:03:34,920
and the first parameter is missing_values.
77

77

00:03:34,920  -->  00:03:38,180
So, in parenthesis we're gonna input missing_values
78

78

00:03:40,450  -->  00:03:41,970
and so, for missing_values,
79

79

00:03:41,970  -->  00:03:45,630
we are going to choose NaN and why is that?
80

80

00:03:47,870  -->  00:03:50,340
It's because when we go to our dataset
81

81

00:03:50,340  -->  00:03:53,570
in Variable Explorer here and go to Dataset,
82

82

00:03:53,570  -->  00:03:57,760
we can see that the missing values are called NaN,
83

83

00:03:57,760  -->  00:04:01,400
so by putting NaN here with capital Ns actually,
84

84

00:04:01,400  -->  00:04:05,574
it will recognize the missing values to take care of.
85

85

00:04:05,574  -->  00:04:07,060
So, let's press OK.
86

86

00:04:07,060  -->  00:04:08,810
Now, what is the next parameter?
87

87

00:04:08,810  -->  00:04:11,095
The next parameter is strategy,
88

88

00:04:11,095  -->  00:04:16,095
so that's good, let's add strategy here
89

89

00:04:16,620  -->  00:04:19,830
equals and what strategy are we going to use?
90

90

00:04:19,830  -->  00:04:22,400
Of course we are gonna use the mean strategy
91

91

00:04:22,400  -->  00:04:24,100
because we're gonna replace missing values
92

92

00:04:24,100  -->  00:04:25,980
by the mean of the column,
93

93

00:04:25,980  -->  00:04:30,640
so let's choose here mean.
94

94

00:04:30,640  -->  00:04:34,370
Mean and actually mean is the default value
95

95

00:04:34,370  -->  00:04:36,210
for the strategy parameter,
96

96

00:04:36,210  -->  00:04:39,130
so we wouldn't need to input strategy equals mean
97

97

00:04:39,130  -->  00:04:41,130
but let's put it anyway to understand
98

98

00:04:41,130  -->  00:04:42,620
what we are doing.
99

99

00:04:42,620  -->  00:04:45,140
And then what is the next parameter?
100

100

00:04:45,140  -->  00:04:47,220
The next parameter is axis,
101

101

00:04:47,220  -->  00:04:49,340
so if axis equals zero,
102

102

00:04:49,340  -->  00:04:51,730
that means that we're taking the mean of the columns
103

103

00:04:51,730  -->  00:04:53,110
and if axis equals one,
104

104

00:04:53,110  -->  00:04:55,780
that means that we are taking the means of the rows.
105

105

00:04:55,780  -->  00:04:57,870
So, if course it makes much more sense
106

106

00:04:57,870  -->  00:04:59,970
to take the means of the columns
107

107

00:04:59,970  -->  00:05:01,780
because it's the mean of the feature,
108

108

00:05:01,780  -->  00:05:05,903
so course we're gonna choose axis equals zero.
109

109

00:05:09,200  -->  00:05:11,050
Good and we're not going to take care
110

110

00:05:11,050  -->  00:05:13,280
of the rest of the parameters, they're not important.
111

111

00:05:13,280  -->  00:05:15,060
We have the essential parameters here
112

112

00:05:15,060  -->  00:05:17,460
and we're ready to go to the next step
113

113

00:05:17,460  -->  00:05:20,460
which is to fit this Imputer object
114

114

00:05:20,460  -->  00:05:24,030
to our data x, to our matrix of features x.
115

115

00:05:24,030  -->  00:05:26,550
So, that's what we are going to do right now.
116

116

00:05:26,550  -->  00:05:29,390
So, to fit this Imputer object to our matrix
117

117

00:05:29,390  -->  00:05:31,450
of feature x, we need to do this,
118

118

00:05:31,450  -->  00:05:33,403
we are gonna type imputer.fit,
119

119

00:05:37,120  -->  00:05:39,380
you see it's quite intuitive,
120

120

00:05:39,380  -->  00:05:42,500
and then in fit of course we are gonna input
121

121

00:05:42,500  -->  00:05:45,010
what we want to fit the imputer to
122

122

00:05:45,010  -->  00:05:47,520
which is x of course.
123

123

00:05:47,520  -->  00:05:50,490
However, we are not going to fit the imputer
124

124

00:05:50,490  -->  00:05:53,640
on the total matrix,
125

125

00:05:53,640  -->  00:05:55,290
let's have a look at the matrix again.
126

126

00:05:55,290  -->  00:05:57,380
The matrix is here as you can see
127

127

00:05:57,380  -->  00:06:00,130
and we're not going to fit the imputer to all the matrix,
128

128

00:06:00,130  -->  00:06:02,700
we are only going to fit it to the columns
129

129

00:06:02,700  -->  00:06:04,260
where there is some missing data.
130

130

00:06:04,260  -->  00:06:08,130
So, here we're going to add some brackets,
131

131

00:06:08,130  -->  00:06:09,480
brackets here and as usual,
132

132

00:06:09,480  -->  00:06:11,010
we want to take the whole columns,
133

133

00:06:11,010  -->  00:06:12,380
so we will take all the lines
134

134

00:06:12,380  -->  00:06:15,500
by putting column here, then comma
135

135

00:06:15,500  -->  00:06:17,790
and then here that's where we're going to choose
136

136

00:06:17,790  -->  00:06:19,190
the right column, that means the column
137

137

00:06:19,190  -->  00:06:21,172
that contains missing data.
138

138

00:06:21,172  -->  00:06:24,800
So, this column here is the second column
139

139

00:06:24,800  -->  00:06:26,080
and the third column,
140

140

00:06:26,080  -->  00:06:29,310
that is the age column and the salary column.
141

141

00:06:29,310  -->  00:06:31,560
So, we need to put the indexes of this second
142

142

00:06:31,560  -->  00:06:33,620
and third column and do you remember
143

143

00:06:33,620  -->  00:06:35,310
what indexes we have to use?
144

144

00:06:35,310  -->  00:06:37,320
Indexes in Python start at zero,
145

145

00:06:37,320  -->  00:06:40,720
so this column here has index one
146

146

00:06:40,720  -->  00:06:45,220
and not two and this column here has index two.
147

147

00:06:45,220  -->  00:06:48,310
So, here to input those two indexes,
148

148

00:06:48,310  -->  00:06:52,760
we're gonna type one column
149

149

00:06:52,760  -->  00:06:54,250
and sorry about that guys,
150

150

00:06:54,250  -->  00:06:56,750
it's not gonna be two here, it's gonna be three
151

151

00:06:56,750  -->  00:07:01,010
and the reason for that is that the upper bound is excluded.
152

152

00:07:01,010  -->  00:07:03,650
By putting one column three here,
153

153

00:07:03,650  -->  00:07:06,980
that means that we're taking indexes one and two
154

154

00:07:06,980  -->  00:07:09,520
but the lower bound one is included,
155

155

00:07:09,520  -->  00:07:12,240
so you just have to get used to this syntax in Python
156

156

00:07:12,240  -->  00:07:14,360
and you will soon be much more comfortable
157

157

00:07:14,360  -->  00:07:17,960
but for now, I agree that it's sometimes quite confusing
158

158

00:07:17,960  -->  00:07:18,810
but that's how it is.
159

159

00:07:18,810  -->  00:07:22,660
X taking all the lines and columns one and two,
160

160

00:07:22,660  -->  00:07:23,650
indexes one and two
161

161

00:07:24,580  -->  00:07:27,160
and so, you can use imputer.fit this way
162

162

00:07:27,160  -->  00:07:30,380
or you can also use imputer equals imputer.fit.
163

163

00:07:30,380  -->  00:07:31,220
That will work the same.
164

164

00:07:31,220  -->  00:07:33,150
You will get the same thing.
165

165

00:07:33,150  -->  00:07:37,820
That's all to fit the imputer object to our matrix x
166

166

00:07:37,820  -->  00:07:40,280
and now we just need to do one last thing
167

167

00:07:40,280  -->  00:07:41,990
which is to replace the missing data
168

168

00:07:41,990  -->  00:07:45,210
of the matrix x by the mean of the column.
169

169

00:07:45,210  -->  00:07:49,280
So, to do this, we need to do X bracket,
170

170

00:07:49,280  -->  00:07:50,970
then we need to select the columns
171

171

00:07:50,970  -->  00:07:52,670
where there is some missing data,
172

172

00:07:52,670  -->  00:07:55,400
so as usual, colon to take all the line,
173

173

00:07:55,400  -->  00:07:59,500
then comma and then the same we need to take the two indexes
174

174

00:07:59,500  -->  00:08:01,720
of the columns that contain missing data
175

175

00:08:01,720  -->  00:08:03,770
which are indexes one and two,
176

176

00:08:03,770  -->  00:08:05,300
so here, it's the same as here,
177

177

00:08:05,300  -->  00:08:08,160
we type 1:3
178

178

00:08:09,330  -->  00:08:13,839
equals and then we're gonna use our object imputer
179

179

00:08:13,839  -->  00:08:15,580
and we are going to apply the method
180

180

00:08:15,580  -->  00:08:19,500
of the imputer object which is transform,
181

181

00:08:19,500  -->  00:08:22,320
so here the transform method is here
182

182

00:08:22,320  -->  00:08:25,210
and this is the method that is going to replace
183

183

00:08:25,210  -->  00:08:27,950
the missing data by the mean of the column
184

184

00:08:27,950  -->  00:08:29,430
and here what we only have to do
185

185

00:08:29,430  -->  00:08:34,430
is to take the two columns of the data X
186

186

00:08:34,470  -->  00:08:38,090
and put it in the parenthesis here and that's it.
187

187

00:08:38,090  -->  00:08:41,700
That's how you take care of missing data with Python.
188

188

00:08:41,700  -->  00:08:44,673
So, now we are going to select this block of code,
189

189

00:08:46,670  -->  00:08:48,810
execute, all good,
190

190

00:08:48,810  -->  00:08:51,790
you can see that the code ran properly
191

191

00:08:51,790  -->  00:08:54,950
and now let's look at X
192

192

00:08:54,950  -->  00:08:57,090
and let's see what happens.
193

193

00:08:57,090  -->  00:09:01,750
X, enter, great the missing data
194

194

00:09:01,750  -->  00:09:03,390
were replaced by the mean,
195

195

00:09:03,390  -->  00:09:05,720
the salary that was missing was replaced
196

196

00:09:05,720  -->  00:09:10,720
by $63,777 and the age that was missing
197

197

00:09:11,750  -->  00:09:14,980
was replaced by 38.7 years old.
198

198

00:09:14,980  -->  00:09:15,870
And let's check that.
199

199

00:09:15,870  -->  00:09:18,120
Let's check if it's the right values.
200

200

00:09:18,120  -->  00:09:19,940
So, the first missing value
201

201

00:09:19,940  -->  00:09:22,760
was the salary here, so let's compute the average,
202

202

00:09:22,760  -->  00:09:27,500
so we have to type equals average, here it is,
203

203

00:09:27,500  -->  00:09:31,740
we take all the observations of the Salary column,
204

204

00:09:31,740  -->  00:09:34,730
parenthesis, Enter and here's the average,
205

205

00:09:34,730  -->  00:09:37,390
so it's 63,777.
206

206

00:09:37,390  -->  00:09:38,763
Let's check in Python.
207

207

00:09:39,610  -->  00:09:41,520
Yep, here it is, it's the right value.
208

208

00:09:41,520  -->  00:09:43,770
It's the mean, so it was replaced correctly
209

209

00:09:43,770  -->  00:09:45,580
and now let's check it for the age.
210

210

00:09:45,580  -->  00:09:47,743
Let's remember 38 years old .7.
211

211

00:09:49,390  -->  00:09:51,983
Let's compute the average here, equals average.
212

212

00:09:53,370  -->  00:09:55,630
Here we take all the values,
213

213

00:09:55,630  -->  00:09:59,320
parenthesis and 38.7, all good.
214

214

00:09:59,320  -->  00:10:00,153
That's perfect.
215

215

00:10:00,153  -->  00:10:02,680
So, congratulations, now you know
216

216

00:10:02,680  -->  00:10:05,140
how to take care of missing data in Python.
217

217

00:10:05,140  -->  00:10:07,530
You can have fun and try to use another strategy,
218

218

00:10:07,530  -->  00:10:08,950
for example, you can take,
219

219

00:10:08,950  -->  00:10:10,980
let's go back to the Object Inspector,
220

220

00:10:10,980  -->  00:10:13,010
you can take the median strategy
221

221

00:10:13,010  -->  00:10:15,940
which will replace your missing value by the median
222

222

00:10:15,940  -->  00:10:19,780
of the column or you can take the most_frequent value
223

223

00:10:19,780  -->  00:10:22,150
of the column which could also be a good idea
224

224

00:10:22,150  -->  00:10:23,700
depending on the context.
225

225

00:10:23,700  -->  00:10:25,160
That's the end of this tutorial.
226

226

00:10:25,160  -->  00:10:27,160
And I look forward to seeing you in the next tutorial.
227

227

00:10:27,160  -->  00:10:30,000
The next tutorial will be about categorical data,
228

228

00:10:30,000  -->  00:10:33,600
so we will learn how to encode categorical data.
229

229

00:10:33,600  -->  00:10:35,210
You will understand why we have to do this,
230

230

00:10:35,210  -->  00:10:37,420
so I look forward to seeing you in the next tutorial
231

231

00:10:37,420  -->  00:10:39,873
and until then, enjoy machine learning.
