1
1

00:00:00,400  -->  00:00:02,080
<v Instructor>Hello and welcome</v>
2

2

00:00:02,080  -->  00:00:05,740
to this new, very important tutorial.
3

3

00:00:05,740  -->  00:00:08,330
Please make sure to have some energy for this one,
4

4

00:00:08,330  -->  00:00:10,280
and please make sure to focus,
5

5

00:00:10,280  -->  00:00:12,570
because there are some important tricks
6

6

00:00:12,570  -->  00:00:15,310
that we will make sure to understand and apply,
7

7

00:00:15,310  -->  00:00:18,680
and some mistakes to absolutely avoid.
8

8

00:00:18,680  -->  00:00:22,760
So, if you have the good energy, let's get started.
9

9

00:00:22,760  -->  00:00:26,370
Alright, so, in this second step of part three,
10

10

00:00:26,370  -->  00:00:28,660
making the predictions and visualizing the results,
11

11

00:00:28,660  -->  00:00:33,660
we're gonna get the predicted stock price of January, 2017.
12

12

00:00:33,830  -->  00:00:36,350
So, that is we're gonna use our regressor,
13

13

00:00:36,350  -->  00:00:39,240
and we're gonna predict the Google stock prices
14

14

00:00:39,240  -->  00:00:41,800
of January, 2017.
15

15

00:00:41,800  -->  00:00:43,250
Now, the first thing to understand
16

16

00:00:43,250  -->  00:00:47,380
is that we trained our model to be able to predict
17

17

00:00:47,380  -->  00:00:49,470
the stock price at time T plus one,
18

18

00:00:49,470  -->  00:00:52,860
based on the 60 previous stock prices,
19

19

00:00:52,860  -->  00:00:55,960
and, therefore, to predict each stock price
20

20

00:00:55,960  -->  00:00:59,240
of each financial day of January, 2017,
21

21

00:00:59,240  -->  00:01:02,560
we will need the 60 previous stock prices
22

22

00:01:02,560  -->  00:01:06,550
of the 60 previous financial days, before the actual day.
23

23

00:01:06,550  -->  00:01:09,080
That's the first key point to understand.
24

24

00:01:09,080  -->  00:01:12,300
Now, second key point is that in order
25

25

00:01:12,300  -->  00:01:15,500
to get at each day of January, 2017,
26

26

00:01:15,500  -->  00:01:19,950
the 60 previous stock prices of the 60 previous days,
27

27

00:01:19,950  -->  00:01:24,080
well, we will need both the training set and the test set,
28

28

00:01:24,080  -->  00:01:25,950
because we will have some of the 60 days
29

29

00:01:25,950  -->  00:01:27,860
that will be from the training set,
30

30

00:01:27,860  -->  00:01:30,750
because they will be from December 2016,
31

31

00:01:30,750  -->  00:01:33,940
and we will also have some stock prices of the test set,
32

32

00:01:33,940  -->  00:01:38,130
because some of them will come from January 2017,
33

33

00:01:38,130  -->  00:01:41,050
and, therefore, the first thing we need to do now,
34

34

00:01:41,050  -->  00:01:45,820
is some concatenation of the training set and the test set,
35

35

00:01:45,820  -->  00:01:48,750
to be able to get these 60 produced inputs,
36

36

00:01:48,750  -->  00:01:53,370
for each day of January, 2017, alright?
37

37

00:01:53,370  -->  00:01:57,320
But then that leads to a third key point to understand,
38

38

00:01:57,320  -->  00:02:00,740
it's the way we're gonna make that concatenation.
39

39

00:02:00,740  -->  00:02:03,600
If you think of making this concatenation
40

40

00:02:03,600  -->  00:02:08,040
by concatenating the training set and the test set,
41

41

00:02:08,040  -->  00:02:12,090
that is by concatenating this training set here,
42

42

00:02:12,090  -->  00:02:15,440
which contains the real Google stock prices from 2012
43

43

00:02:15,440  -->  00:02:17,060
to the end of 2016,
44

44

00:02:17,060  -->  00:02:19,000
well, if you can concatenate the training set
45

45

00:02:19,000  -->  00:02:23,120
with the test set that is the real stock price
46

46

00:02:23,120  -->  00:02:27,130
that we got here, well, that will lead us to a problem,
47

47

00:02:27,130  -->  00:02:29,530
because then what we will have to do
48

48

00:02:29,530  -->  00:02:31,510
is scale this concatenation
49

49

00:02:31,510  -->  00:02:33,780
of the training set and the test set.
50

50

00:02:33,780  -->  00:02:38,300
That is we will have to apply the fit_transform method
51

51

00:02:38,300  -->  00:02:41,090
from our sc object that we created
52

52

00:02:41,090  -->  00:02:42,740
in the feature scaling section
53

53

00:02:42,740  -->  00:02:46,780
to scale this concatenation of the training set
54

54

00:02:46,780  -->  00:02:47,840
and the test set,
55

55

00:02:47,840  -->  00:02:51,460
so that we can get the scaled real stock price.
56

56

00:02:51,460  -->  00:02:54,070
But the problem if we do that is that
57

57

00:02:54,070  -->  00:02:57,240
we will change the actual test values
58

58

00:02:57,240  -->  00:02:59,150
and we should never do this.
59

59

00:02:59,150  -->  00:03:02,340
We have to keep the actual test values as they are,
60

60

00:03:02,340  -->  00:03:05,020
and, therefore, we will handle this problem
61

61

00:03:05,020  -->  00:03:07,300
by making another concatenation,
62

62

00:03:07,300  -->  00:03:11,860
which will be to concatenate the original DataFrames
63

63

00:03:11,860  -->  00:03:15,170
that we still have because these are dataset_train,
64

64

00:03:15,170  -->  00:03:17,980
and we also have dataset_test.
65

65

00:03:17,980  -->  00:03:21,240
These are the two original DataFrames and we will get,
66

66

00:03:21,240  -->  00:03:23,180
of course, the open Google stock price,
67

67

00:03:23,180  -->  00:03:25,470
so we will make this concatenation
68

68

00:03:25,470  -->  00:03:28,050
and then what we'll do is, from this concatenation,
69

69

00:03:28,050  -->  00:03:31,100
we will get the input of each prediction,
70

70

00:03:31,100  -->  00:03:35,550
that is the 60 produced stock prices at each time T,
71

71

00:03:35,550  -->  00:03:38,290
and this is then what we will scale.
72

72

00:03:38,290  -->  00:03:40,264
These are on these inputs.
73

73

00:03:40,264  -->  00:03:42,710
That's where we'll apply our sc object.
74

74

00:03:42,710  -->  00:03:46,530
These inputs that we will scale to get the predictions,
75

75

00:03:46,530  -->  00:03:49,640
and that way we are only scaling the input,
76

76

00:03:49,640  -->  00:03:52,590
and we are not changing the actual test values,
77

77

00:03:52,590  -->  00:03:54,690
and this is the right approach to take.
78

78

00:03:54,690  -->  00:03:58,120
This is what will lead us to the most relevant results,
79

79

00:03:58,120  -->  00:04:01,160
and that was the third and final key point to understand,
80

80

00:04:01,160  -->  00:04:04,050
so if you understood these three key points,
81

81

00:04:04,050  -->  00:04:08,710
you are now ready to understand 100% this tutorial.
82

82

00:04:08,710  -->  00:04:10,700
And just, for those of you who are wondering
83

83

00:04:10,700  -->  00:04:13,100
why we have to scale the input,
84

84

00:04:13,100  -->  00:04:16,040
well that's simply because our recurrent neural network
85

85

00:04:16,040  -->  00:04:19,400
was trained on the scaled values of the train set.
86

86

00:04:19,400  -->  00:04:21,850
Therefore, for consistency of the model, well,
87

87

00:04:21,850  -->  00:04:26,600
we will have to use the scaled input to get our predictions,
88

88

00:04:26,600  -->  00:04:29,370
and the scaled input should be based on the same scaling
89

89

00:04:29,370  -->  00:04:33,270
that's replied that is normalization with our sc object.
90

90

00:04:33,270  -->  00:04:35,160
So, if all this is clear,
91

91

00:04:35,160  -->  00:04:37,870
now it's time to get these predictions.
92

92

00:04:37,870  -->  00:04:39,120
So, let's do this.
93

93

00:04:39,120  -->  00:04:42,810
As we said, we need to start by concatenating
94

94

00:04:42,810  -->  00:04:45,050
the original DataFrames containing
95

95

00:04:45,050  -->  00:04:46,763
the open Google stock prices,
96

96

00:04:47,870  -->  00:04:50,750
and to do this we're gonna introduce a new variable
97

97

00:04:50,750  -->  00:04:53,150
that we're gonna call dataset_total.
98

98

00:04:55,500  -->  00:04:58,740
Total, because it will contain the whole dataset;
99

99

00:04:58,740  -->  00:05:01,500
the training set, plus the test set,
100

100

00:05:01,500  -->  00:05:04,400
and so to make this concatenation happen,
101

101

00:05:04,400  -->  00:05:07,440
we're gonna use our super useful library that we have,
102

102

00:05:07,440  -->  00:05:11,370
which is of course Pandas, and then has a shortcut pd,
103

103

00:05:11,370  -->  00:05:15,080
and we're gonna use a function from this Panda's library,
104

104

00:05:15,080  -->  00:05:19,330
which is, you might know it, the concat function.
105

105

00:05:19,330  -->  00:05:21,880
Alright, and inside this concat function
106

106

00:05:21,880  -->  00:05:24,190
we need to input two arguments.
107

107

00:05:24,190  -->  00:05:27,090
The first one is the grepl of the two DataFrames
108

108

00:05:27,090  -->  00:05:28,900
we want to concatenate,
109

109

00:05:28,900  -->  00:05:33,340
and the second argument is the axis along which
110

110

00:05:33,340  -->  00:05:35,520
we want to make that concatenation.
111

111

00:05:35,520  -->  00:05:38,620
So that is, do we want to concatenate the lines?
112

112

00:05:38,620  -->  00:05:41,170
Or do we want to concatenate the colors?
113

113

00:05:41,170  -->  00:05:42,750
So, we'll see that very quickly,
114

114

00:05:42,750  -->  00:05:46,380
and so let's take care of the first arguments, first;
115

115

00:05:46,380  -->  00:05:49,010
which is this couple of what we want to concatenate,
116

116

00:05:49,010  -->  00:05:52,716
and these are the two DataFrames, first.
117

117

00:05:52,716  -->  00:05:56,300
Dataset_train, which contains the Google stock prices
118

118

00:05:56,300  -->  00:06:01,300
from 2012-2016, and of course dataset_test,
119

119

00:06:01,440  -->  00:06:05,750
which contains the Google stock prices of January, 2017.
120

120

00:06:05,750  -->  00:06:07,630
Alright, so, let's take them,
121

121

00:06:07,630  -->  00:06:11,610
dataset_train, first.
122

122

00:06:11,610  -->  00:06:14,347
Which will be concatenated to dataset_test.
123

123

00:06:17,130  -->  00:06:17,963
Alright, good?
124

124

00:06:17,963  -->  00:06:20,750
But then remember that these DataFrames, dataset_train
125

125

00:06:20,750  -->  00:06:24,410
and dataset_test, contain the whole dataset.
126

126

00:06:24,410  -->  00:06:26,960
It contains, not only the open Google stock prices,
127

127

00:06:26,960  -->  00:06:28,350
but also the closed one,
128

128

00:06:28,350  -->  00:06:30,490
and some more data like the volumes,
129

129

00:06:30,490  -->  00:06:32,870
and we just want the open Google stock price
130

130

00:06:32,870  -->  00:06:37,490
so the trick to get it is to add some square brackets here,
131

131

00:06:37,490  -->  00:06:39,690
and inside of which, add some quotes,
132

132

00:06:39,690  -->  00:06:42,530
inside of which you add the name of the column
133

133

00:06:42,530  -->  00:06:45,800
you want to get and this is, if you remember,
134

134

00:06:45,800  -->  00:06:47,600
the name is Open.
135

135

00:06:47,600  -->  00:06:51,890
So, you just need to put in quotes here, Open,
136

136

00:06:51,890  -->  00:06:55,770
and same for our other DataFrame,
137

137

00:06:55,770  -->  00:06:58,720
which is dataset_test['Open'].
138

138

00:06:58,720  -->  00:06:59,553
Like that.
139

139

00:06:59,553  -->  00:07:00,386
Alright?
140

140

00:07:00,386  -->  00:07:02,647
So, and this dataset_train['Open'] and dataset_test['Open']
141

141

00:07:04,410  -->  00:07:07,430
in the parenthesis, is the first argument
142

142

00:07:07,430  -->  00:07:09,750
of the concat function, and so now,
143

143

00:07:09,750  -->  00:07:12,160
let's add the second argument,
144

144

00:07:12,160  -->  00:07:14,120
which is the axis along which
145

145

00:07:14,120  -->  00:07:16,090
you want to make that concatenation.
146

146

00:07:16,090  -->  00:07:19,690
So, of course, we want to concatenate the lines.
147

147

00:07:19,690  -->  00:07:22,800
We want to add the stock prices of the test set
148

148

00:07:22,800  -->  00:07:25,820
to the stock prices of the training set,
149

149

00:07:25,820  -->  00:07:28,720
and, therefore, we need to make a concatenation
150

150

00:07:28,720  -->  00:07:31,840
along the vertical axis and so to specify this,
151

151

00:07:31,840  -->  00:07:34,340
we need to add this second argument here,
152

152

00:07:34,340  -->  00:07:39,340
which is axis and the vertical axis is labeled by zero.
153

153

00:07:39,750  -->  00:07:40,583
Alright?
154

154

00:07:40,583  -->  00:07:43,010
So, basically, for a horizontal concatenation,
155

155

00:07:43,010  -->  00:07:45,090
you would use axis equals 1,
156

156

00:07:45,090  -->  00:07:46,730
and for vertical concatenation
157

157

00:07:46,730  -->  00:07:50,090
like what we have to do now, it's axis equals zero.
158

158

00:07:50,090  -->  00:07:50,923
Okay?
159

159

00:07:50,923  -->  00:07:55,390
So, this will concatenate and it will get a whole DataFrame
160

160

00:07:55,390  -->  00:07:59,120
containing the open Google stock price of both
161

161

00:07:59,120  -->  00:08:02,440
the training set, that is from 2012 to 2016,
162

162

00:08:02,440  -->  00:08:06,090
and the test set, that is of January, 2017.
163

163

00:08:06,090  -->  00:08:06,923
Perfect.
164

164

00:08:06,923  -->  00:08:08,430
First step; done.
165

165

00:08:08,430  -->  00:08:13,060
Second step, now the second step is to get the inputs,
166

166

00:08:13,060  -->  00:08:16,480
that I told you about, that is at each time T,
167

167

00:08:16,480  -->  00:08:21,480
or if you want at each financial day of January 2017,
168

168

00:08:21,500  -->  00:08:25,480
we need to get the 60 previous stock prices
169

169

00:08:25,480  -->  00:08:27,750
of the 60 previous financial days.
170

170

00:08:27,750  -->  00:08:29,780
Or if you want the stock prices
171

171

00:08:29,780  -->  00:08:32,010
of the three previous months,
172

172

00:08:32,010  -->  00:08:35,000
because there are 20 financial days in one month,
173

173

00:08:35,000  -->  00:08:38,500
and, therefore, 60 financial days would make three months.
174

174

00:08:38,500  -->  00:08:39,333
Right?
175

175

00:08:39,333  -->  00:08:41,320
We are training our regressor to predict the stock price
176

176

00:08:41,320  -->  00:08:44,500
at time T plus one, based on what it observed,
177

177

00:08:44,500  -->  00:08:47,760
what it remembered during the three previous months.
178

178

00:08:47,760  -->  00:08:51,210
So, now, to get these inputs, we're gonna start this way.
179

179

00:08:51,210  -->  00:08:53,760
We're gonna start by introducing a new variable
180

180

00:08:53,760  -->  00:08:55,930
that we're gonna call inputs.
181

181

00:08:55,930  -->  00:08:56,770
Alright.
182

182

00:08:56,770  -->  00:09:00,250
Inputs equals, and we're still gonna keep
183

183

00:09:00,250  -->  00:09:02,050
the DataFrame for now,
184

184

00:09:02,050  -->  00:09:03,210
then of course that will change,
185

185

00:09:03,210  -->  00:09:05,750
but we're gonna get what we're interested in
186

186

00:09:05,750  -->  00:09:09,240
still from our dataset total DataFrame.
187

187

00:09:09,240  -->  00:09:11,000
Alright, so let's think about this.
188

188

00:09:11,000  -->  00:09:15,410
We want to predict the stock prices of January 2017.
189

189

00:09:15,410  -->  00:09:17,870
So, what are gonna be exactly the inputs
190

190

00:09:17,870  -->  00:09:19,510
we are going to need?
191

191

00:09:19,510  -->  00:09:20,580
Well, let's see.
192

192

00:09:20,580  -->  00:09:23,650
For the first financial day of 2017,
193

193

00:09:23,650  -->  00:09:28,060
we will need the 60 previous financial days
194

194

00:09:28,060  -->  00:09:30,230
before this first financial day of 2017,
195

195

00:09:30,230  -->  00:09:32,530
which I remind is January 3rd,
196

196

00:09:32,530  -->  00:09:34,750
and so that means that the lower bounds
197

197

00:09:34,750  -->  00:09:36,661
of the range of input needs,
198

198

00:09:36,661  -->  00:09:41,650
will be the first financial day of January, 2017 minus 60,
199

199

00:09:41,650  -->  00:09:43,630
and then what is going to be the upper bound?
200

200

00:09:43,630  -->  00:09:45,970
Well, to get the upper bound, we need to think
201

201

00:09:45,970  -->  00:09:48,600
what input we'll need to predict
202

202

00:09:48,600  -->  00:09:52,340
the last financial day of January, 2017,
203

203

00:09:52,340  -->  00:09:55,770
and that will be the 60 previous financial days
204

204

00:09:55,770  -->  00:09:58,910
before this last day of January 2017,
205

205

00:09:58,910  -->  00:10:01,923
and therefore the last stock price we'll need in the input,
206

206

00:10:01,923  -->  00:10:04,530
will be the previous stock price just before
207

207

00:10:04,530  -->  00:10:07,830
the last stock price that we predict, and therefore,
208

208

00:10:07,830  -->  00:10:12,830
this will be the last stock price of our dataset total
209

209

00:10:13,070  -->  00:10:15,330
and therefore, now what we're gonna get
210

210

00:10:15,330  -->  00:10:17,153
is first our dataset_total,
211

211

00:10:19,130  -->  00:10:23,500
because were getting these stock prices from our DataFrame,
212

212

00:10:23,500  -->  00:10:27,150
dataset total so far, and therefore, as we said,
213

213

00:10:27,150  -->  00:10:29,460
we're gonna need the stock prices
214

214

00:10:29,460  -->  00:10:33,740
from the first financial day of 2017 minus 60,
215

215

00:10:33,740  -->  00:10:38,100
up to the last stock price of our whole dataset.
216

216

00:10:38,100  -->  00:10:41,040
Alright, so let's first get the lower bound
217

217

00:10:41,040  -->  00:10:43,090
of these range of inputs we need.
218

218

00:10:43,090  -->  00:10:48,090
This lower bound is the stock price at January 3rd minus 60.
219

219

00:10:48,270  -->  00:10:50,420
So, let's first get January 3rd.
220

220

00:10:50,420  -->  00:10:52,720
To get January 3rd we can take it this way.
221

221

00:10:52,720  -->  00:10:55,690
We need to find the index of January 3rd,
222

222

00:10:55,690  -->  00:10:56,760
which we can get this way.
223

223

00:10:56,760  -->  00:11:01,760
We take the len of the total dataset, dataset_total,
224

224

00:11:04,080  -->  00:11:08,987
and then we subtract to it the len of our dataset_test.
225

225

00:11:10,430  -->  00:11:13,480
Alright this gives us exactly January 3rd,
226

226

00:11:13,480  -->  00:11:17,010
because len(dataset_total) is the final index
227

227

00:11:17,010  -->  00:11:18,530
of the whole dataset containing
228

228

00:11:18,530  -->  00:11:20,220
both the training and the test set,
229

229

00:11:20,220  -->  00:11:23,840
and len(dataset_test) is exactly 20.
230

230

00:11:23,840  -->  00:11:27,030
So, since len(dataset_total) will be the index
231

231

00:11:27,030  -->  00:11:30,090
of the last day of January, 2017,
232

232

00:11:30,090  -->  00:11:32,570
well if we subtract this by 20,
233

233

00:11:32,570  -->  00:11:35,480
we will get to January 3, 2017;
234

234

00:11:35,480  -->  00:11:39,690
the first day, the first financial day of January, 2017
235

235

00:11:39,690  -->  00:11:42,480
and now, remember we wanna get the stock price
236

236

00:11:42,480  -->  00:11:44,430
at this day minus 60
237

237

00:11:44,430  -->  00:11:47,330
because that's the lower bound of the inputs we need,
238

238

00:11:47,330  -->  00:11:51,080
and therefore I'm adding here minus 60.
239

239

00:11:51,080  -->  00:11:51,913
Perfect.
240

240

00:11:51,913  -->  00:11:53,040
We get the lower bounds,
241

241

00:11:53,040  -->  00:11:56,340
and now much easier to get the upper bound,
242

242

00:11:56,340  -->  00:11:58,190
we simply need to add this column,
243

243

00:11:58,190  -->  00:12:00,430
because basically the upper bound, as we said,
244

244

00:12:00,430  -->  00:12:03,400
is the last index of the whole dataset,
245

245

00:12:03,400  -->  00:12:05,700
because to predict the last stock price
246

246

00:12:05,700  -->  00:12:07,060
of the last financial day,
247

247

00:12:07,060  -->  00:12:09,090
we will need the 60 previous stock prices,
248

248

00:12:09,090  -->  00:12:11,910
and, therefore, the last of the last stock prices we'll need
249

249

00:12:11,910  -->  00:12:15,150
is the stock price just before the last financial day.
250

250

00:12:15,150  -->  00:12:15,983
So, there we go.
251

251

00:12:15,983  -->  00:12:18,000
That's the range of inputs we need
252

252

00:12:18,000  -->  00:12:20,740
and now with this we get the DataFrame,
253

253

00:12:20,740  -->  00:12:22,310
but of course we're gonna have to move on
254

254

00:12:22,310  -->  00:12:24,590
to NumPy Arrays now and, therefore,
255

255

00:12:24,590  -->  00:12:28,940
I'm adding dot values to make this a NumPy Array,
256

256

00:12:28,940  -->  00:12:32,260
and these will contain all the inputs we'll need
257

257

00:12:32,260  -->  00:12:36,600
to predict all the stock prices of January, 2017.
258

258

00:12:36,600  -->  00:12:38,820
So, that's already a huge step done
259

259

00:12:38,820  -->  00:12:40,750
and the rest should be easier now.
260

260

00:12:40,750  -->  00:12:41,583
Perfect.
261

261

00:12:41,583  -->  00:12:42,416
Now.
262

262

00:12:42,416  -->  00:12:43,380
Next Step.
263

263

00:12:43,380  -->  00:12:44,960
The next step is related to the fact
264

264

00:12:44,960  -->  00:12:48,720
that we haven't used the iloc method from Pandas
265

265

00:12:48,720  -->  00:12:51,320
to get these inputs, and therefore,
266

266

00:12:51,320  -->  00:12:52,890
it is not still shaped the right way.
267

267

00:12:52,890  -->  00:12:55,260
It is not shaped like a NumPy Array.
268

268

00:12:55,260  -->  00:12:58,070
Of all the inputs and lines and one column
269

269

00:12:58,070  -->  00:13:00,290
and you will often get this format problem,
270

270

00:13:00,290  -->  00:13:02,960
this shape problem when working with NumPy,
271

271

00:13:02,960  -->  00:13:04,410
and the solution to this,
272

272

00:13:04,410  -->  00:13:07,260
if you don't get this NumPy Array of the format you want,
273

273

00:13:07,260  -->  00:13:09,410
that is with your observations and lines
274

274

00:13:09,410  -->  00:13:11,820
and one or several columns,
275

275

00:13:11,820  -->  00:13:14,250
well, the trick to reshape the inputs
276

276

00:13:14,250  -->  00:13:17,410
is to use the reshape function, Python Py,
277

277

00:13:17,410  -->  00:13:20,800
to which you will input as arguments, minus one and one.
278

278

00:13:20,800  -->  00:13:23,510
You will often get this warning format
279

279

00:13:23,510  -->  00:13:26,040
when you execute your code sometimes in the console,
280

280

00:13:26,040  -->  00:13:27,700
and don't worry it will remind you
281

281

00:13:27,700  -->  00:13:29,660
that you need to use this reshape function
282

282

00:13:29,660  -->  00:13:32,580
with minus one and plus one as arguments.
283

283

00:13:32,580  -->  00:13:34,180
So, that's exactly what we're gonna do now
284

284

00:13:34,180  -->  00:13:38,050
and then we'll be ready to move on to the next
285

285

00:13:38,050  -->  00:13:39,810
and most important reshape,
286

286

00:13:39,810  -->  00:13:43,750
which will be about creating this 3D structure of our inputs
287

287

00:13:43,750  -->  00:13:46,970
with, remember, the observations, the time steps,
288

288

00:13:46,970  -->  00:13:50,810
and the indicators, and this will be very direct to do.
289

289

00:13:50,810  -->  00:13:52,770
We'll just copy what we've done before
290

290

00:13:52,770  -->  00:13:54,640
and make the proper changes.
291

291

00:13:54,640  -->  00:13:57,390
Alright, so first let's make this simple reshape
292

292

00:13:57,390  -->  00:14:02,390
to get the right NumPy shape so, I'm gonna update my inputs,
293

293

00:14:02,580  -->  00:14:06,750
so I'm taking my inputs again and taking my old inputs,
294

294

00:14:06,750  -->  00:14:09,720
that is the ones right here,
295

295

00:14:09,720  -->  00:14:14,440
to which I'm gonna add dot and then the reshape function,
296

296

00:14:14,440  -->  00:14:15,930
and in the parenthesis, as we saw,
297

297

00:14:15,930  -->  00:14:18,130
we need to input minus one
298

298

00:14:18,130  -->  00:14:20,050
and plus one.
299

299

00:14:20,050  -->  00:14:22,870
Alright, so now with this we'll get the inputs
300

300

00:14:22,870  -->  00:14:25,860
with the different stock prices of January 3rd
301

301

00:14:25,860  -->  00:14:29,270
minus three months, up to the final stock prices,
302

302

00:14:29,270  -->  00:14:31,150
in lines and in one color.
303

303

00:14:31,150  -->  00:14:32,170
Alright?
304

304

00:14:32,170  -->  00:14:36,520
And now time to repeat the process of what we did before
305

305

00:14:36,520  -->  00:14:38,920
to obtain the right 3D format
306

306

00:14:38,920  -->  00:14:41,060
that is expected by the neural network.
307

307

00:14:41,060  -->  00:14:42,240
It is not only expected
308

308

00:14:42,240  -->  00:14:44,337
by the neural network for the training,
309

309

00:14:44,337  -->  00:14:46,630
it is also expected by the neural network
310

310

00:14:46,630  -->  00:14:47,770
for the predictions.
311

311

00:14:47,770  -->  00:14:50,160
So, whether you apply the fit method
312

312

00:14:50,160  -->  00:14:53,420
to train your regressor or to predict methods
313

313

00:14:53,420  -->  00:14:55,360
to make your regressor predict something,
314

314

00:14:55,360  -->  00:14:58,270
well, you need to have the right format of your inputs
315

315

00:14:58,270  -->  00:15:02,080
and this format is the 3D format that we made previously.
316

316

00:15:02,080  -->  00:15:05,070
So, we're gonna make this 3D special structure right now,
317

317

00:15:05,070  -->  00:15:09,640
but before we do that we must not forget to scale our inputs
318

318

00:15:09,640  -->  00:15:11,280
because I remind our inputs
319

319

00:15:11,280  -->  00:15:14,930
are directly coming from the original DataFrames,
320

320

00:15:14,930  -->  00:15:16,820
contained in dataset_total,
321

321

00:15:16,820  -->  00:15:19,740
so we have the original values of the stock prices
322

322

00:15:19,740  -->  00:15:21,620
and since a recurrent neural network
323

323

00:15:21,620  -->  00:15:23,850
was trained on the scaled values.
324

324

00:15:23,850  -->  00:15:26,200
Well, of course, we need to scale the inputs,
325

325

00:15:26,200  -->  00:15:30,070
and that satisfies the third key point
326

326

00:15:30,070  -->  00:15:32,380
we mentioned at the beginning of this tutorial,
327

327

00:15:32,380  -->  00:15:35,180
which is to only scale the inputs
328

328

00:15:35,180  -->  00:15:37,230
and not the actual test values,
329

329

00:15:37,230  -->  00:15:40,060
because we need to keep the test values as they are
330

330

00:15:40,060  -->  00:15:43,440
and with the way we got our inputs here, well, this is fine.
331

331

00:15:43,440  -->  00:15:45,090
We can scale our inputs.
332

332

00:15:45,090  -->  00:15:48,730
So, I'm gonna update my inputs again and therefore,
333

333

00:15:48,730  -->  00:15:50,440
I add here inputs equal,
334

334

00:15:50,440  -->  00:15:54,800
now I'm gonna take my scaling object, which is sc,
335

335

00:15:54,800  -->  00:15:56,570
and now, dot of course,
336

336

00:15:56,570  -->  00:15:59,290
but now I'm not gonna use the fit_transform
337

337

00:15:59,290  -->  00:16:01,870
because our sc object was already fitted
338

338

00:16:01,870  -->  00:16:03,520
to the training set.
339

339

00:16:03,520  -->  00:16:06,430
I'm directly gonna use the transform method
340

340

00:16:06,430  -->  00:16:09,070
because the scaling we need to apply to our input
341

341

00:16:09,070  -->  00:16:12,290
must be the same scaling that was applied
342

342

00:16:12,290  -->  00:16:13,410
to the training set,
343

343

00:16:13,410  -->  00:16:17,210
and therefore we must not fit our scaling object sc again.
344

344

00:16:17,210  -->  00:16:19,730
We must directly apply the transform method
345

345

00:16:19,730  -->  00:16:21,410
to get the previous scaling
346

346

00:16:21,410  -->  00:16:23,720
on which our regressor was trained.
347

347

00:16:23,720  -->  00:16:28,070
So, that's why I'm adding here, transform parenthesis,
348

348

00:16:28,070  -->  00:16:32,010
and of course in the parenthesis we need to input our inputs
349

349

00:16:32,010  -->  00:16:34,070
because that's what we want to scale.
350

350

00:16:34,070  -->  00:16:35,920
Alright, so now I guess it would be nice
351

351

00:16:35,920  -->  00:16:36,880
to have a little break,
352

352

00:16:36,880  -->  00:16:39,110
so were gonna stop here for this tutorial
353

353

00:16:39,110  -->  00:16:40,170
and in the next one,
354

354

00:16:40,170  -->  00:16:43,800
we'll take care of creating this special 3D structure
355

355

00:16:43,800  -->  00:16:47,370
that is expected by the predict method of our r&amp;n.
356

356

00:16:47,370  -->  00:16:49,800
So I'll see you in this next tutorial and until then,
357

357

00:16:49,800  -->  00:16:50,800
enjoy deep learning.
