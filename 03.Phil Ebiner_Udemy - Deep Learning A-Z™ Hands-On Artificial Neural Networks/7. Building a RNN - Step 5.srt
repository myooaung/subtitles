1
1

00:00:00,260  -->  00:00:02,450
<v Male>Hello and welcome to this new tutorial.</v>
2

2

00:00:02,450  -->  00:00:04,700
All right, so in this one, we're gonna tackle
3

3

00:00:04,700  -->  00:00:08,490
the last step of the first part Data Preprocessing.
4

4

00:00:08,490  -->  00:00:11,640
So this last step is about reshaping the data
5

5

00:00:11,640  -->  00:00:14,490
that is adding some even more dimensionality
6

6

00:00:14,490  -->  00:00:16,950
to this previous data structure we made
7

7

00:00:16,950  -->  00:00:18,130
in the previous tutorial.
8

8

00:00:18,130  -->  00:00:23,010
And this dimension we're gonna add is exactly the unit,
9

9

00:00:23,010  -->  00:00:27,780
that is, the number of predictors we can use to predict
10

10

00:00:27,780  -->  00:00:28,700
what we want.
11

11

00:00:28,700  -->  00:00:31,060
Which is the Google Stock Price at time T plus one.
12

12

00:00:31,060  -->  00:00:34,480
So in the scope of this financial engineering problem
13

13

00:00:34,480  -->  00:00:38,290
where we try to predict the trend of the Google Stock Price,
14

14

00:00:38,290  -->  00:00:40,920
these predictors are indicators.
15

15

00:00:40,920  -->  00:00:43,240
And right now we have one indicator,
16

16

00:00:43,240  -->  00:00:46,070
which is the open Google Stock Price.
17

17

00:00:46,070  -->  00:00:48,240
And we take the 60 previous Google Stock Prices
18

18

00:00:48,240  -->  00:00:49,870
to predict the next one.
19

19

00:00:49,870  -->  00:00:54,340
So that's our only indicator, but thanks to this new
20

20

00:00:54,340  -->  00:00:57,570
dimension that we're gonna add to our data structure.
21

21

00:00:57,570  -->  00:01:01,150
We will be able to add some more indicators,
22

22

00:01:01,150  -->  00:01:03,870
if you think could help predict even better
23

23

00:01:03,870  -->  00:01:06,591
the upward and downward trends of the Google Stock Price.
24

24

00:01:06,591  -->  00:01:09,160
We're not gonna do it in this implementation.
25

25

00:01:09,160  -->  00:01:11,560
We will just use the open Google Stock Price.
26

26

00:01:11,560  -->  00:01:13,640
But thanks to this new data structure,
27

27

00:01:13,640  -->  00:01:16,319
this new dimensionality, you will be able to add
28

28

00:01:16,319  -->  00:01:18,792
if you want, some more indicators.
29

29

00:01:18,792  -->  00:01:22,200
All right, so let's make this happen.
30

30

00:01:22,200  -->  00:01:25,560
It's actually really simple, it just takes one line of code.
31

31

00:01:25,560  -->  00:01:28,846
And to add this new dimension, we're gonna use the
32

32

00:01:28,846  -->  00:01:31,090
reshape function.
33

33

00:01:31,090  -->  00:01:34,700
Anytime you want to add a dimension in a non pi array
34

34

00:01:34,700  -->  00:01:37,040
you always need to use the reshape function,
35

35

00:01:37,040  -->  00:01:39,090
that's your best tool for that, all right?
36

36

00:01:39,090  -->  00:01:42,650
So first of all let's understand that we just need to
37

37

00:01:42,650  -->  00:01:45,950
do this for X train, because X train actually contains
38

38

00:01:45,950  -->  00:01:47,670
the inputs of the neural network.
39

39

00:01:47,670  -->  00:01:51,180
And now we need to create this new dimensionality
40

40

00:01:51,180  -->  00:01:53,650
of this new data structure, because simply,
41

41

00:01:53,650  -->  00:01:56,440
that is exactly what is expected by the
42

42

00:01:56,440  -->  00:01:58,880
future recurrent neural network that we're gonna build
43

43

00:01:58,880  -->  00:02:00,090
in the second part.
44

44

00:02:00,090  -->  00:02:02,540
So that's not only for you to be able to use
45

45

00:02:02,540  -->  00:02:07,090
some more indicators, that's also to be compatible with
46

46

00:02:07,090  -->  00:02:10,790
the input format, the input shape, as we call it of the
47

47

00:02:10,790  -->  00:02:12,320
recurrent neural network.
48

48

00:02:12,320  -->  00:02:16,300
All right, so let's update X train, then.
49

49

00:02:16,300  -->  00:02:19,620
X train and as we said, to update it,
50

50

00:02:19,620  -->  00:02:22,550
we're gonna use the reshape function.
51

51

00:02:22,550  -->  00:02:25,030
And this reshape function is taken of course from,
52

52

00:02:25,030  -->  00:02:28,250
the non pi library, which has a shortcut NP
53

53

00:02:28,250  -->  00:02:31,100
because, basically, we're reshaping a non pi array.
54

54

00:02:31,100  -->  00:02:34,450
So NP.reshape, perfect.
55

55

00:02:34,450  -->  00:02:37,810
And now, in this reshape function, we need to input
56

56

00:02:37,810  -->  00:02:38,890
two arguments.
57

57

00:02:38,890  -->  00:02:41,770
The first argument is what we want to reshape,
58

58

00:02:41,770  -->  00:02:44,450
that is the non pi array we want to reshape.
59

59

00:02:44,450  -->  00:02:47,650
And that is, of course, X underscore train,
60

60

00:02:47,650  -->  00:02:49,690
that's our non pi array we want to reshape,
61

61

00:02:49,690  -->  00:02:52,600
that is, add this new dimension corresponding
62

62

00:02:52,600  -->  00:02:54,110
to the predictor.
63

63

00:02:54,110  -->  00:02:56,600
Or in our problem, the indicator.
64

64

00:02:56,600  -->  00:02:59,490
And now in the second argument of this reshape function
65

65

00:02:59,490  -->  00:03:02,390
we need to specify this new structure,
66

66

00:03:02,390  -->  00:03:05,200
that is this new shape we want our
67

67

00:03:05,200  -->  00:03:07,070
non pi array or X train to have.
68

68

00:03:07,070  -->  00:03:09,610
All right, so we have to input this structure
69

69

00:03:09,610  -->  00:03:13,520
in some parenthesis, because we're gonna include
70

70

00:03:13,520  -->  00:03:17,040
three elements in these parentheses, and why is that?
71

71

00:03:17,040  -->  00:03:19,770
That's because right now, our data structure
72

72

00:03:19,770  -->  00:03:22,280
has two dimensions as you can see.
73

73

00:03:22,280  -->  00:03:23,930
X train right now has two dimensions.
74

74

00:03:23,930  -->  00:03:28,930
It is a non pi array of 1198 lines and 60 columns,
75

75

00:03:29,900  -->  00:03:31,400
so two dimensions.
76

76

00:03:31,400  -->  00:03:33,890
And now we're gonna add this new dimension,
77

77

00:03:33,890  -->  00:03:38,480
and therefore, there will be like a 3D shape here
78

78

00:03:38,480  -->  00:03:41,720
with a new dimension corresponding to the indicator.
79

79

00:03:41,720  -->  00:03:43,960
So you have to visualize it in 3D.
80

80

00:03:43,960  -->  00:03:47,030
It will be like we will have these non pi arrays
81

81

00:03:47,030  -->  00:03:51,680
of two dimensions here, stacking in a new dimension
82

82

00:03:51,680  -->  00:03:55,130
that we're gonna create, corresponding to the indicators.
83

83

00:03:55,130  -->  00:03:58,210
All right, so make sure to visualize this well.
84

84

00:03:58,210  -->  00:04:00,600
And therefore, in this parenthesis, we simply need
85

85

00:04:00,600  -->  00:04:02,810
to add these three dimensions.
86

86

00:04:02,810  -->  00:04:06,470
And now, to know exactly the order of the dimensions
87

87

00:04:06,470  -->  00:04:09,950
we need to include, well I would recommend to go to
88

88

00:04:09,950  -->  00:04:12,950
the Keras documentation, because it tells exactly
89

89

00:04:12,950  -->  00:04:15,710
the dimensions we need to include here.
90

90

00:04:15,710  -->  00:04:20,130
So I'm gonna go to Google and, so these are my
91

91

00:04:20,130  -->  00:04:22,890
train and test data sets that I imported with
92

92

00:04:22,890  -->  00:04:24,070
Google spreadsheet.
93

93

00:04:24,070  -->  00:04:27,730
But now I'm gonna open a new tab in which I'm going to
94

94

00:04:27,730  -->  00:04:31,410
search for Keras documentation.
95

95

00:04:31,410  -->  00:04:34,510
First, perfect, now let's click on the first link,
96

96

00:04:34,510  -->  00:04:38,900
Keras documentation, and now let's go to recurrent layers
97

97

00:04:38,900  -->  00:04:41,600
in this layers section here.
98

98

00:04:41,600  -->  00:04:46,570
So recurrent layers and actually we already found what we
99

99

00:04:46,570  -->  00:04:51,010
want which is this paragraph here about input shapes.
100

100

00:04:51,010  -->  00:04:55,190
Input shapes is exactly the input shape expected
101

101

00:04:55,190  -->  00:04:58,020
by the recurrent neural network in Keras.
102

102

00:04:58,020  -->  00:05:00,860
And as you can see, it's a 3D tensor.
103

103

00:05:00,860  -->  00:05:02,760
Tensor is like an array.
104

104

00:05:02,760  -->  00:05:05,410
The input should be a 3D array, containing the
105

105

00:05:05,410  -->  00:05:06,950
following three dimensions.
106

106

00:05:06,950  -->  00:05:10,730
First, the batch size, which will correspond to the
107

107

00:05:10,730  -->  00:05:12,480
total number of observations we have.
108

108

00:05:12,480  -->  00:05:16,240
That is the total number of stock prices we have from
109

109

00:05:16,240  -->  00:05:19,260
2012 to the end of 2016.
110

110

00:05:19,260  -->  00:05:21,800
Then the second dimension is the time steps,
111

111

00:05:21,800  -->  00:05:22,950
the number of time steps.
112

112

00:05:22,950  -->  00:05:25,800
And that is, as you understood, 60.
113

113

00:05:25,800  -->  00:05:30,170
And now the third dimension, this new one that we're adding
114

114

00:05:30,170  -->  00:05:34,070
is the one corresponding to the indicators, the predictors.
115

115

00:05:34,070  -->  00:05:38,290
So I remind, these can be some new financial indicators
116

116

00:05:38,290  -->  00:05:42,420
that could help predict the Google stock price trends.
117

117

00:05:42,420  -->  00:05:45,870
So, for example, that can be the closed Google stock price
118

118

00:05:45,870  -->  00:05:49,380
or even some other stock prices from other companies.
119

119

00:05:49,380  -->  00:05:52,550
I'll give you another example that explains this well.
120

120

00:05:52,550  -->  00:05:55,830
Take Apple and Samsung, you know that in an iPhone
121

121

00:05:55,830  -->  00:05:58,090
most of the material is coming from Samsung.
122

122

00:05:58,090  -->  00:06:00,490
And therefore Apple is highly dependent on Samsung,
123

123

00:06:00,490  -->  00:06:02,810
but at the same time, Samsung is highly dependent
124

124

00:06:02,810  -->  00:06:06,280
on Apple, because simply, Apple is their best customer.
125

125

00:06:06,280  -->  00:06:09,470
And therefore the stock prices of Apple and Samsung
126

126

00:06:09,470  -->  00:06:11,320
might be highly correlated.
127

127

00:06:11,320  -->  00:06:14,810
And that's exactly what you could add as a new dimension
128

128

00:06:14,810  -->  00:06:16,720
if you want to predict the Apple stock price.
129

129

00:06:16,720  -->  00:06:19,810
Because simply the Apple stock price is very likely
130

130

00:06:19,810  -->  00:06:22,730
correlated to the Samsung stock price.
131

131

00:06:22,730  -->  00:06:24,580
Then for Google I wouldn't know exactly
132

132

00:06:24,580  -->  00:06:26,240
but you see the idea.
133

133

00:06:26,240  -->  00:06:29,410
So there we go, we have our three dimensions.
134

134

00:06:29,410  -->  00:06:31,400
First the number of observations,
135

135

00:06:31,400  -->  00:06:34,540
or the batch size if you do some batch training.
136

136

00:06:34,540  -->  00:06:37,110
Then the number of time steps, 60.
137

137

00:06:37,110  -->  00:06:39,179
And then the number of indicators we have,
138

138

00:06:39,179  -->  00:06:41,660
which in our case, will be one.
139

139

00:06:41,660  -->  00:06:45,290
All right, so let's go back to Python.
140

140

00:06:45,290  -->  00:06:50,100
There we go, and now let's input these three dimensions.
141

141

00:06:50,100  -->  00:06:52,183
So the first one, as you remember, corresponds to
142

142

00:06:52,183  -->  00:06:56,800
the batch size or in our case, the number of observations.
143

143

00:06:56,800  -->  00:07:01,213
And we have in total, well, 1198 observations
144

144

00:07:02,980  -->  00:07:04,720
because indexes start at zero.
145

145

00:07:04,720  -->  00:07:05,900
Be careful with that.
146

146

00:07:05,900  -->  00:07:09,080
But in case you want to apply this code to any data set,
147

147

00:07:09,080  -->  00:07:11,360
any stock prices that you want to predict,
148

148

00:07:11,360  -->  00:07:15,450
I'm going to get this number here by taking
149

149

00:07:15,450  -->  00:07:19,210
X train dot shape of index zero.
150

150

00:07:19,210  -->  00:07:22,520
That will get me exactly the number of lines of X train.
151

151

00:07:22,520  -->  00:07:24,634
And then to get the number of time steps,
152

152

00:07:24,634  -->  00:07:26,860
which is exactly the number of columns,
153

153

00:07:26,860  -->  00:07:31,044
well, I will get X train dot shape, as you can guess, one.
154

154

00:07:31,044  -->  00:07:32,910
Because X train dot shape one gives me
155

155

00:07:32,910  -->  00:07:35,040
the number of columns and the number of columns
156

156

00:07:35,040  -->  00:07:38,316
corresponds exactly to the number of time steps, 60.
157

157

00:07:38,316  -->  00:07:40,870
All right, so let's do this for the first one
158

158

00:07:40,870  -->  00:07:42,720
and then the last one will be very easy.
159

159

00:07:42,720  -->  00:07:45,070
It is actually one, we have one indicator.
160

160

00:07:45,070  -->  00:07:47,930
I will just input one, but don't forget to change it
161

161

00:07:47,930  -->  00:07:50,210
if you have several indicators.
162

162

00:07:50,210  -->  00:07:53,440
All right, so okay here, the first one,
163

163

00:07:53,440  -->  00:07:55,620
as we said is the number of lines of X train
164

164

00:07:55,620  -->  00:08:00,620
that is X train dot shape, square brackets zero.
165

165

00:08:02,160  -->  00:08:05,470
Then the second one is the number of time steps,
166

166

00:08:05,470  -->  00:08:07,710
that is the number of columns of X train,
167

167

00:08:07,710  -->  00:08:12,364
which we can get with X underscore train dot shape
168

168

00:08:12,364  -->  00:08:17,210
of index one, and then last argument,
169

169

00:08:17,210  -->  00:08:19,760
the number of indicators, the number of predictors,
170

170

00:08:19,760  -->  00:08:22,763
which is one, the open Google Stock Price.
171

171

00:08:23,600  -->  00:08:27,090
Wonderful, so now we have our final structure,
172

172

00:08:27,090  -->  00:08:29,730
the right structure that is expected by
173

173

00:08:29,730  -->  00:08:31,470
the neural network, our future
174

174

00:08:31,470  -->  00:08:33,560
recurrent neural network that we're gonna build.
175

175

00:08:33,560  -->  00:08:36,320
It is a structure in three dimensions.
176

176

00:08:36,320  -->  00:08:39,500
One dimension corresponding to the number of stock prices.
177

177

00:08:39,500  -->  00:08:40,990
The second dimension corresponding to
178

178

00:08:40,990  -->  00:08:42,310
the number of time steps.
179

179

00:08:42,310  -->  00:08:44,387
And the third dimension corresponding to
180

180

00:08:44,387  -->  00:08:47,040
the number of indicators.
181

181

00:08:47,040  -->  00:08:50,390
All right, so let's have a look at this new structure.
182

182

00:08:50,390  -->  00:08:53,180
I'm going to execute now, there we go.
183

183

00:08:53,180  -->  00:08:56,850
We have our new X train, and if we have a look at it
184

184

00:08:56,850  -->  00:08:59,500
as you can see, we can already see that it now
185

185

00:08:59,500  -->  00:09:02,600
has three dimensions, the exact same ones
186

186

00:09:02,600  -->  00:09:03,890
as I just mentioned.
187

187

00:09:03,890  -->  00:09:05,510
And so if we have a look at it now,
188

188

00:09:05,510  -->  00:09:06,720
if we click on it.
189

189

00:09:06,720  -->  00:09:09,310
Well, you can visualize it this way, of course.
190

190

00:09:09,310  -->  00:09:13,360
You cannot see it in a 3D box, but the way you
191

191

00:09:13,360  -->  00:09:16,480
can see it is by changing the axis here.
192

192

00:09:16,480  -->  00:09:18,450
So this is the first dimension, axis U and you
193

193

00:09:18,450  -->  00:09:23,120
will see three axis, zero, one, or two
194

194

00:09:23,120  -->  00:09:25,330
corresponding to the three dimensions
195

195

00:09:25,330  -->  00:09:26,320
of this structure.
196

196

00:09:26,320  -->  00:09:28,760
And for example in this one we see, well,
197

197

00:09:28,760  -->  00:09:30,661
our previous X train with the 60 time steps
198

198

00:09:30,661  -->  00:09:33,070
at each time, T.
199

199

00:09:33,070  -->  00:09:35,120
At each time T, starting from 60.
200

200

00:09:35,120  -->  00:09:36,842
The 60th financial date.
201

201

00:09:36,842  -->  00:09:40,100
All right, so I hope everything is clear for you.
202

202

00:09:40,100  -->  00:09:42,750
This is very important if you want to,
203

203

00:09:42,750  -->  00:09:44,540
I don't know, add some other indicators
204

204

00:09:44,540  -->  00:09:47,876
or do some more, more robust financial
205

205

00:09:47,876  -->  00:09:49,750
engineering prediction here.
206

206

00:09:49,750  -->  00:09:52,410
And so if this is clear, I have some excellent
207

207

00:09:52,410  -->  00:09:53,430
news right now.
208

208

00:09:53,430  -->  00:09:56,420
We are done with Part One, Data Preprocessing,
209

209

00:09:56,420  -->  00:09:59,410
and we are ready to move on to Part Two,
210

210

00:09:59,410  -->  00:10:02,100
Building the RNN, where we will build the
211

211

00:10:02,100  -->  00:10:05,770
whole architecture of our LSTM.
212

212

00:10:05,770  -->  00:10:07,850
And the double good news is that it's not
213

213

00:10:07,850  -->  00:10:12,350
only gonna be an LSTM, it's gonna be a stacked LSTM
214

214

00:10:12,350  -->  00:10:15,740
with several LSTM layers and we're gonna make it perfect.
215

215

00:10:15,740  -->  00:10:18,150
We're gonna make it robust because we're gonna add
216

216

00:10:18,150  -->  00:10:21,700
some dropout regularization to avoid overfitting
217

217

00:10:21,700  -->  00:10:24,157
to make sure we have the most relevant,
218

218

00:10:24,157  -->  00:10:27,420
the most useful recurrent neural network model.
219

219

00:10:27,420  -->  00:10:29,270
Keep in mind this general truth.
220

220

00:10:29,270  -->  00:10:32,050
All models are wrong, but some are useful.
221

221

00:10:32,050  -->  00:10:34,820
I'm not saying that the one we'll make will be 100% right,
222

222

00:10:34,820  -->  00:10:38,520
but we'll make it as useful as possible.
223

223

00:10:38,520  -->  00:10:40,603
Until then, enjoy deep learning!
