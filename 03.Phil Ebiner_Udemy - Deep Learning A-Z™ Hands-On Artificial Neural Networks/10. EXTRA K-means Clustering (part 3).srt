1
1

00:00:00,380  -->  00:00:01,250
<v Instructor>Hello and welcome back</v>
2

2

00:00:01,250  -->  00:00:03,230
to the course on Machine Learning.
3

3

00:00:03,230  -->  00:00:04,180
In the previous tutorials,
4

4

00:00:04,180  -->  00:00:06,630
we learned quite a lot about the K-Means algorithm.
5

5

00:00:06,630  -->  00:00:08,970
We talked about how it works in the background.
6

6

00:00:08,970  -->  00:00:11,580
We actually performed a manual K-Means algorithm
7

7

00:00:11,580  -->  00:00:13,350
which was lots of fun.
8

8

00:00:13,350  -->  00:00:16,830
Then we talked about the random initialization trap
9

9

00:00:16,830  -->  00:00:19,170
and what the K-Means plus plus is.
10

10

00:00:19,170  -->  00:00:22,110
And in all the scenarios we kind of work with
11

11

00:00:22,110  -->  00:00:24,130
a predetermined number of clusters,
12

12

00:00:24,130  -->  00:00:26,520
whether it was two clusters or three clusters.
13

13

00:00:26,520  -->  00:00:29,388
And we talked about somehow finding out
14

14

00:00:29,388  -->  00:00:33,270
the not correct number of clusters for a given
15

15

00:00:33,270  -->  00:00:34,830
data science problem.
16

16

00:00:34,830  -->  00:00:37,630
In today's tutorial, we're actually going to talk about
17

17

00:00:37,630  -->  00:00:40,050
the algorithm behind finding out
18

18

00:00:40,050  -->  00:00:41,940
the right number of clusters.
19

19

00:00:41,940  -->  00:00:45,970
So we'll learn how to decide what number of clusters
20

20

00:00:45,970  -->  00:00:48,660
to input into your K-Means algorithm.
21

21

00:00:48,660  -->  00:00:50,790
So let's get straight into it.
22

22

00:00:50,790  -->  00:00:54,540
Here we've got a challenge, or data size problem.
23

23

00:00:54,540  -->  00:00:56,680
Again, we've got only two variables,
24

24

00:00:56,680  -->  00:00:59,790
the x and y coordinates just for simplicity sake.
25

25

00:00:59,790  -->  00:01:03,470
In reality it can be any number of columns or variables.
26

26

00:01:03,470  -->  00:01:05,350
And here we've got the scatter plot
27

27

00:01:05,350  -->  00:01:07,120
representing our data set.
28

28

00:01:07,120  -->  00:01:10,870
Now if we run the K-Means clustering algorithm
29

29

00:01:10,870  -->  00:01:13,570
on this data set with three clusters
30

30

00:01:13,570  -->  00:01:16,460
or with K predetermined to be three,
31

31

00:01:16,460  -->  00:01:19,530
then the result will look something like this.
32

32

00:01:19,530  -->  00:01:22,180
And not just something like this, but exactly like this.
33

33

00:01:22,180  -->  00:01:24,770
We've got the three clusters that have been identified
34

34

00:01:24,770  -->  00:01:26,208
and we already know that
35

35

00:01:26,208  -->  00:01:29,010
we would need to run the K-Means plus plus algorithm
36

36

00:01:29,010  -->  00:01:31,490
just to avoid the random initialization trap.
37

37

00:01:31,490  -->  00:01:32,790
But again, for simplicity sake,
38

38

00:01:32,790  -->  00:01:35,370
we're just going to call it the K-Means algorithm.
39

39

00:01:35,370  -->  00:01:38,340
So we've got the three clusters.
40

40

00:01:38,340  -->  00:01:41,700
Now in order to understand, if for instance,
41

41

00:01:41,700  -->  00:01:43,910
two clusters would have been better in this scenario
42

42

00:01:43,910  -->  00:01:46,210
or maybe 10 clusters would have been better,
43

43

00:01:46,210  -->  00:01:47,650
we need a certain metric.
44

44

00:01:47,650  -->  00:01:50,950
We need a way to understand or evaluate
45

45

00:01:50,950  -->  00:01:54,440
how a certain number of clusters performs
46

46

00:01:54,440  -->  00:01:56,580
compared to a different number of clusters
47

47

00:01:56,580  -->  00:02:00,190
and preferably that metric should be quantifiable.
48

48

00:02:00,190  -->  00:02:02,200
So what kind of metric can we impose
49

49

00:02:02,200  -->  00:02:04,640
upon our clustering algorithm
50

50

00:02:04,640  -->  00:02:07,940
that will tell us something about the final result?
51

51

00:02:07,940  -->  00:02:08,970
And there is such a metric.
52

52

00:02:08,970  -->  00:02:12,350
It is called the within cluster sum of squares,
53

53

00:02:12,350  -->  00:02:14,900
that hence the WCSS on the left.
54

54

00:02:14,900  -->  00:02:17,630
And that is the formula how it's calculated.
55

55

00:02:17,630  -->  00:02:19,900
This is an example for three clusters.
56

56

00:02:19,900  -->  00:02:23,501
Now at first glance, this formula might look
57

57

00:02:23,501  -->  00:02:25,530
a bit overwhelming or complex,
58

58

00:02:25,530  -->  00:02:27,250
but in reality it's super simple.
59

59

00:02:27,250  -->  00:02:30,690
So in line with our mission of making the complex simple,
60

60

00:02:30,690  -->  00:02:32,720
let's break it all down.
61

61

00:02:32,720  -->  00:02:33,920
What is going on here?
62

62

00:02:33,920  -->  00:02:36,070
Well, we've got the three elements
63

63

00:02:36,070  -->  00:02:39,120
and each sum, so this symbol stands for sum,
64

64

00:02:39,120  -->  00:02:41,650
each sum is calculated for each cluster.
65

65

00:02:41,650  -->  00:02:43,700
In fact it's calculated within that cluster.
66

66

00:02:43,700  -->  00:02:45,880
Hence the W at the start.
67

67

00:02:45,880  -->  00:02:47,800
So let's look at one of them.
68

68

00:02:47,800  -->  00:02:49,590
Let's look at the central one for instance.
69

69

00:02:49,590  -->  00:02:52,910
Here we're taking every point inside cluster two,
70

70

00:02:52,910  -->  00:02:56,565
and that is exactly what is written out here.
71

71

00:02:56,565  -->  00:02:57,950
And this is, believe it or not,
72

72

00:02:57,950  -->  00:03:00,540
a valid way to write this sum.
73

73

00:03:00,540  -->  00:03:05,420
So you just write P with the index I is inside cluster two
74

74

00:03:05,420  -->  00:03:07,890
and we're gonna take a sum across those points.
75

75

00:03:07,890  -->  00:03:11,330
And what we're summing is the distance between each point
76

76

00:03:11,330  -->  00:03:15,210
inside cluster two and the centroid of cluster two.
77

77

00:03:15,210  -->  00:03:17,580
And then we're squaring that distance.
78

78

00:03:17,580  -->  00:03:21,040
So we're taking the sum of those squared distances.
79

79

00:03:21,040  -->  00:03:23,460
So now if we have a look at our chart,
80

80

00:03:23,460  -->  00:03:25,810
I'm gonna keep the WCSS on the left.
81

81

00:03:25,810  -->  00:03:28,316
So for instance for cluster two there it is.
82

82

00:03:28,316  -->  00:03:29,814
We're taking the centroid
83

83

00:03:29,814  -->  00:03:31,600
and we're calculating the distance to every single point.
84

84

00:03:31,600  -->  00:03:33,790
So to that point, then we're squaring it.
85

85

00:03:33,790  -->  00:03:35,670
To that point, then we're squaring it.
86

86

00:03:35,670  -->  00:03:37,280
To that point, then we're squaring it.
87

87

00:03:37,280  -->  00:03:40,150
To that point, we're squaring it and so on.
88

88

00:03:40,150  -->  00:03:41,992
So we're taking the square,
89

89

00:03:41,992  -->  00:03:45,568
the sum of all the squares of all these distances
90

90

00:03:45,568  -->  00:03:47,590
and we're summing it.
91

91

00:03:47,590  -->  00:03:48,730
And then we're doing that.
92

92

00:03:48,730  -->  00:03:50,460
So we're doing that for the first cluster,
93

93

00:03:50,460  -->  00:03:52,210
we're doing that for the second cluster,
94

94

00:03:52,210  -->  00:03:55,760
and we're doing that for the third cluster as well.
95

95

00:03:55,760  -->  00:03:59,480
And so as a result we get this total sum,
96

96

00:03:59,480  -->  00:04:01,210
so the full sum.
97

97

00:04:01,210  -->  00:04:04,200
And that is going to be our metric.
98

98

00:04:04,200  -->  00:04:07,191
And actually it's quite a good metric in terms of
99

99

00:04:07,191  -->  00:04:10,488
understanding or comparing the goodness of fit
100

100

00:04:10,488  -->  00:04:13,730
between two different K-Means clusterings.
101

101

00:04:13,730  -->  00:04:14,920
And how do we know that?
102

102

00:04:14,920  -->  00:04:15,900
Well let's have a look.
103

103

00:04:15,900  -->  00:04:19,340
Let's rewind back to when we had one cluster.
104

104

00:04:19,340  -->  00:04:22,380
Let's see how that metric, WCSS is going to change
105

105

00:04:22,380  -->  00:04:25,171
as we increase the number of clusters.
106

106

00:04:25,171  -->  00:04:29,620
All right, so there is our chart with just the one cluster.
107

107

00:04:29,620  -->  00:04:31,670
As you can see, that is our centroid.
108

108

00:04:31,670  -->  00:04:34,100
And for every single point we have to measure the distance
109

109

00:04:34,100  -->  00:04:36,094
between that point and the centroid.
110

110

00:04:36,094  -->  00:04:38,160
Then we have to square that distance
111

111

00:04:38,160  -->  00:04:41,330
and then we'll have add all those distances up.
112

112

00:04:41,330  -->  00:04:43,650
As you can see, we'll get quite a large value,
113

113

00:04:43,650  -->  00:04:47,110
because this centroid is quite moved away from
114

114

00:04:47,110  -->  00:04:48,150
all of the points.
115

115

00:04:48,150  -->  00:04:50,550
They all of to reach towards it.
116

116

00:04:50,550  -->  00:04:53,220
So let's just visually remember what this looks like
117

117

00:04:53,220  -->  00:04:56,130
and that will help us kind of remember
118

118

00:04:56,130  -->  00:04:58,260
what that distance is,
119

119

00:04:58,260  -->  00:04:59,700
not in terms of the absolute value,
120

120

00:04:59,700  -->  00:05:01,320
but just what it feels like.
121

121

00:05:01,320  -->  00:05:02,800
It's quite a large distance right now.
122

122

00:05:02,800  -->  00:05:05,060
So I'm going to increase the number of clusters to two
123

123

00:05:05,060  -->  00:05:07,100
and let's see how everything changes.
124

124

00:05:07,100  -->  00:05:08,650
So there we go, that's two clusters.
125

125

00:05:08,650  -->  00:05:10,760
And as you can see, now instead of having one centroid
126

126

00:05:10,760  -->  00:05:12,350
in the middle, we have two centroids.
127

127

00:05:12,350  -->  00:05:15,290
So each one of these points no longer has to reach
128

128

00:05:15,290  -->  00:05:16,810
all the way to the middle
129

129

00:05:16,810  -->  00:05:19,020
or the distance isn't that great.
130

130

00:05:19,020  -->  00:05:20,380
All you have to do is just calculate
131

131

00:05:20,380  -->  00:05:21,610
the distance to this centroid.
132

132

00:05:21,610  -->  00:05:23,370
As you can see it's less.
133

133

00:05:23,370  -->  00:05:24,640
And then for these centroids,
134

134

00:05:24,640  -->  00:05:26,190
for all of them here as well,
135

135

00:05:26,190  -->  00:05:28,029
the distance to this centroid is less.
136

136

00:05:28,029  -->  00:05:31,460
They don't have to reach all the way to the middle
137

137

00:05:31,460  -->  00:05:33,160
when you're calculating that distance.
138

138

00:05:33,160  -->  00:05:34,030
So there we go.
139

139

00:05:34,030  -->  00:05:37,200
That means that the total distance
140

140

00:05:37,200  -->  00:05:39,350
or the total WCSS that we see here
141

141

00:05:39,350  -->  00:05:42,960
is going to less than when we had one centroid.
142

142

00:05:42,960  -->  00:05:45,310
Now one again, we're going increase the number clusters
143

143

00:05:45,310  -->  00:05:46,210
so this time to three.
144

144

00:05:46,210  -->  00:05:50,076
So just remember visually what two clusters looks like
145

145

00:05:50,076  -->  00:05:53,230
and then we'll compare it to the next image.
146

146

00:05:53,230  -->  00:05:54,063
So there we go.
147

147

00:05:54,063  -->  00:05:56,364
Now we have three clusters
148

148

00:05:56,364  -->  00:05:59,320
and as you can see, nothing changed in cluster one,
149

149

00:05:59,320  -->  00:06:02,120
so this sum is gonna be the same.
150

150

00:06:02,120  -->  00:06:04,300
These two sums have changed.
151

151

00:06:04,300  -->  00:06:06,340
So now instead of one cluster,
152

152

00:06:06,340  -->  00:06:08,410
these two groups of points are
153

153

00:06:08,410  -->  00:06:10,160
recognized as separate clusters
154

154

00:06:10,160  -->  00:06:11,600
and therefore they have their own centroids.
155

155

00:06:11,600  -->  00:06:14,160
And the distance has again decreased,
156

156

00:06:14,160  -->  00:06:15,440
because you can see now,
157

157

00:06:15,440  -->  00:06:17,760
all of these points are closer to their own centroid
158

158

00:06:17,760  -->  00:06:19,890
than they were to the centroid which was in the middle.
159

159

00:06:19,890  -->  00:06:23,500
And again these point are closer this centroid overall
160

160

00:06:23,500  -->  00:06:26,130
than they were to the centroid here in the middle.
161

161

00:06:26,130  -->  00:06:30,320
So therefore as you can see the WCSS distance is decreasing.
162

162

00:06:30,320  -->  00:06:32,020
And what is the limit of that?
163

163

00:06:32,020  -->  00:06:34,990
How far will it keep decreasing?
164

164

00:06:34,990  -->  00:06:35,823
Well let's think about.
165

165

00:06:35,823  -->  00:06:37,660
Let' say we increase the number of clusters
166

166

00:06:37,660  -->  00:06:39,940
to four, five, six and so on.
167

167

00:06:39,940  -->  00:06:43,470
How many clusters maximum can we have?
168

168

00:06:43,470  -->  00:06:46,558
Well we can have as many clusters as there are points
169

169

00:06:46,558  -->  00:06:48,810
or elements in our data sets,
170

170

00:06:48,810  -->  00:06:51,090
so as many points we see on our chart.
171

171

00:06:51,090  -->  00:06:52,570
That's how many clusters we can have.
172

172

00:06:52,570  -->  00:06:55,532
So if we have 50 points, we can have up to 50 clusters.
173

173

00:06:55,532  -->  00:06:57,880
Because after you go over 50
174

174

00:06:57,880  -->  00:06:59,840
or after you go over the number of points,
175

175

00:06:59,840  -->  00:07:02,360
there's no more points to actually cluster.
176

176

00:07:02,360  -->  00:07:04,770
Every single point has its own cluster.
177

177

00:07:04,770  -->  00:07:09,140
So, and in that case, what will the WCSS equate to?
178

178

00:07:09,140  -->  00:07:10,180
I'll give you a second.
179

179

00:07:10,180  -->  00:07:11,790
If you want to you can pause this video
180

180

00:07:11,790  -->  00:07:14,040
just to think about that for a second.
181

181

00:07:14,040  -->  00:07:16,760
If we've reached the number of clusters
182

182

00:07:16,760  -->  00:07:20,352
equivalent to the number of points in our chart
183

183

00:07:20,352  -->  00:07:23,040
which is the same thing as the number of elements
184

184

00:07:23,040  -->  00:07:23,960
in our data set,
185

185

00:07:23,960  -->  00:07:27,100
then what does WCSS equate to?
186

186

00:07:27,100  -->  00:07:31,030
And exactly right, the WCSS will equate to zero,
187

187

00:07:31,030  -->  00:07:34,270
because every single point has its own cluster
188

188

00:07:34,270  -->  00:07:36,000
and therefore has its own centroid.
189

189

00:07:36,000  -->  00:07:39,300
And that centroid is going to be exactly where that point is
190

190

00:07:39,300  -->  00:07:41,226
and therefore the distance between the point
191

191

00:07:41,226  -->  00:07:42,420
and the centroid is gonna zero.
192

192

00:07:42,420  -->  00:07:44,007
If you square that, it's going to zero.
193

193

00:07:44,007  -->  00:07:45,710
And if you add up all those squares
194

194

00:07:45,710  -->  00:07:46,920
it's still gonna be zero.
195

195

00:07:46,920  -->  00:07:50,880
So as we can see, the WCSS will decrease
196

196

00:07:50,880  -->  00:07:53,890
from a substantial value when we have one cluster
197

197

00:07:53,890  -->  00:07:55,450
all the way down to zero
198

198

00:07:55,450  -->  00:07:57,220
as we increase the number of clusters.
199

199

00:07:57,220  -->  00:07:59,060
So it is good metric,
200

200

00:07:59,060  -->  00:08:01,700
but at the same time, it's constantly decreasing, right?
201

201

00:08:01,700  -->  00:08:04,780
So it's constantly getting better and better and better
202

202

00:08:04,780  -->  00:08:07,000
and that's because as you can see,
203

203

00:08:07,000  -->  00:08:09,920
the less the WCSS or the higher the number of clusters
204

204

00:08:09,920  -->  00:08:12,216
the better the goodness of fit.
205

205

00:08:12,216  -->  00:08:13,990
We're fitting our data better and better and better
206

206

00:08:13,990  -->  00:08:17,150
and therefore the lesser the WCSS
207

207

00:08:17,150  -->  00:08:20,610
the better the goodness of fit is deemed to be.
208

208

00:08:20,610  -->  00:08:22,910
But how do we find the optimal goodness of fit?
209

209

00:08:22,910  -->  00:08:24,770
Yes it keeps getting better,
210

210

00:08:24,770  -->  00:08:28,800
but is there a sacrifice that comes with that improvement?
211

211

00:08:28,800  -->  00:08:29,900
And that is exactly the case.
212

212

00:08:29,900  -->  00:08:32,120
Let's have a look at this visual chart.
213

213

00:08:32,120  -->  00:08:34,720
This chart represents how the WCSS changes
214

214

00:08:34,720  -->  00:08:36,060
as we increase the number of clusters.
215

215

00:08:36,060  -->  00:08:37,490
And as you can see at the start,
216

216

00:08:37,490  -->  00:08:40,510
the WCSS starts at quite a large number.
217

217

00:08:40,510  -->  00:08:43,400
It doesn't really matter what this number is measured in,
218

218

00:08:43,400  -->  00:08:46,850
what the absolute value is and things like.
219

219

00:08:46,850  -->  00:08:48,960
What matters is how it changes,
220

220

00:08:48,960  -->  00:08:51,174
so the relative comparison between different
221

221

00:08:51,174  -->  00:08:52,900
K-Means clustering methods
222

222

00:08:52,900  -->  00:08:55,030
with the different number of clusters.
223

223

00:08:55,030  -->  00:08:59,070
So you can see here that it jumped from 8,000 down to 3,000.
224

224

00:08:59,070  -->  00:09:01,070
That's a massive change of 5,000,
225

225

00:09:01,070  -->  00:09:03,450
let's just call them units, 5,000 units.
226

226

00:09:03,450  -->  00:09:05,840
And then from 3,000, as we increased the number of clusters
227

227

00:09:05,840  -->  00:09:08,880
from two to three, it jumped from 3,000 to 1,000.
228

228

00:09:08,880  -->  00:09:11,220
Again, quite a large drop.
229

229

00:09:11,220  -->  00:09:13,890
And then from three to four, what's going to happen
230

230

00:09:13,890  -->  00:09:16,067
is going to jump from 1,000 to maybe 800
231

231

00:09:16,067  -->  00:09:19,770
and then from 800 to 600, 600 to 500 and so on.
232

232

00:09:19,770  -->  00:09:23,140
So as you can see the first two improvements,
233

233

00:09:23,140  -->  00:09:25,760
or first two changes from one cluster to two,
234

234

00:09:25,760  -->  00:09:28,870
from two to three, created some huge jumps,
235

235

00:09:28,870  -->  00:09:31,480
or huge drops in the WCSS.
236

236

00:09:31,480  -->  00:09:35,580
Going forward the WCSS drops not as substantially.
237

237

00:09:35,580  -->  00:09:38,070
And this is our hint at selecting
238

238

00:09:38,070  -->  00:09:40,050
the optimal number of clusters.
239

239

00:09:40,050  -->  00:09:42,640
And the method we're going to use is the Elbow Method.
240

240

00:09:42,640  -->  00:09:44,720
And it is actually very visual.
241

241

00:09:44,720  -->  00:09:46,100
All you have to do is look at your chart
242

242

00:09:46,100  -->  00:09:49,730
and look for that change or that kind of like,
243

243

00:09:49,730  -->  00:09:50,577
it does look like an elbow,
244

244

00:09:50,577  -->  00:09:54,050
and look for that elbow in your chart where the drop
245

245

00:09:54,050  -->  00:09:55,860
goes from being quite substantial
246

246

00:09:55,860  -->  00:09:58,593
to being not as substantial.
247

247

00:09:59,674  -->  00:10:01,630
The improvement is not as great.
248

248

00:10:01,630  -->  00:10:03,040
And therefore, that point in your chart
249

249

00:10:03,040  -->  00:10:06,230
is going to be the optimal number of clusters.
250

250

00:10:06,230  -->  00:10:09,300
In this case it is indeed three clusters
251

251

00:10:09,300  -->  00:10:11,410
that is the optimal number.
252

252

00:10:11,410  -->  00:10:14,050
And as you can imagine, this method is quite arbitrary.
253

253

00:10:14,050  -->  00:10:16,830
So sometimes the situations are not as obvious.
254

254

00:10:16,830  -->  00:10:21,260
Sometimes elbow might not be as evident
255

255

00:10:21,260  -->  00:10:23,540
as in this case and therefore somebody might
256

256

00:10:23,540  -->  00:10:25,590
pick one number of clusters.
257

257

00:10:25,590  -->  00:10:26,980
Someone else might come along
258

258

00:10:26,980  -->  00:10:28,970
and pick another number of clusters.
259

259

00:10:28,970  -->  00:10:32,370
But that is a judgment call that you need to make
260

260

00:10:32,370  -->  00:10:33,760
as a data scientist.
261

261

00:10:33,760  -->  00:10:35,920
Sometimes you need to decide
262

262

00:10:35,920  -->  00:10:37,630
on how your analysis is going to be structured.
263

263

00:10:37,630  -->  00:10:39,150
And this is one of those cases,
264

264

00:10:39,150  -->  00:10:41,480
because you are deciding what type of
265

265

00:10:41,480  -->  00:10:44,180
K-Means clustering algorithm to run.
266

266

00:10:44,180  -->  00:10:47,060
You're inputting that value of K.
267

267

00:10:47,060  -->  00:10:49,510
And yes it can be arbitrary,
268

268

00:10:49,510  -->  00:10:51,330
but if you're not really sure,
269

269

00:10:51,330  -->  00:10:54,290
then you just need kind of run the K-Means
270

270

00:10:54,290  -->  00:10:55,590
for instance with three.
271

271

00:10:55,590  -->  00:10:57,250
Look at it with four, look at it with two,
272

272

00:10:57,250  -->  00:10:59,434
and like see what the difference is
273

273

00:10:59,434  -->  00:11:01,738
and make that judgment call on which K
274

274

00:11:01,738  -->  00:11:04,970
you think is optimal for your analysis,
275

275

00:11:04,970  -->  00:11:07,832
because ultimately you are the person creating this analysis
276

276

00:11:07,832  -->  00:11:12,410
and you need to decide which number of clusters is optimal.
277

277

00:11:12,410  -->  00:11:15,490
So the Elbow Method is just an approach
278

278

00:11:15,490  -->  00:11:17,540
that can help you make that decision.
279

279

00:11:17,540  -->  00:11:20,340
But at the end of the day, it is your decision.
280

280

00:11:20,340  -->  00:11:21,250
So there we go.
281

281

00:11:21,250  -->  00:11:23,850
Hopefully you enjoyed this tutorial
282

282

00:11:23,850  -->  00:11:28,530
and now your arsenal of K-Means clustering
283

283

00:11:28,530  -->  00:11:30,180
is quite broad.
284

284

00:11:30,180  -->  00:11:31,890
You have quite a few tools in there
285

285

00:11:31,890  -->  00:11:33,815
and I can't wait for you to jump into
286

286

00:11:33,815  -->  00:11:36,484
the practical application of this method.
287

287

00:11:36,484  -->  00:11:39,214
Adaline has prepared some very interesting
288

288

00:11:39,214  -->  00:11:41,730
code challenges for you
289

289

00:11:41,730  -->  00:11:44,580
and you'll be working with this method
290

290

00:11:44,580  -->  00:11:45,550
both in R and Python.
291

291

00:11:45,550  -->  00:11:47,260
It's gonna be very exciting.
292

292

00:11:47,260  -->  00:11:48,220
So good luck with that.
293

293

00:11:48,220  -->  00:11:49,280
I'll see you next time
294

294

00:11:49,280  -->  00:11:51,383
and until then, enjoy machine learning.
