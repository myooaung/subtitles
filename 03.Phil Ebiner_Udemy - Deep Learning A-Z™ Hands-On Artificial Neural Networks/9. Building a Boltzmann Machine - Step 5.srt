1
1

00:00:00,260  -->  00:00:02,590
<v ->Hello and welcome to this Python tutorial.</v>
2

2

00:00:02,590  -->  00:00:04,110
So in the previous tutorial we converted
3

3

00:00:04,110  -->  00:00:07,530
our training set and our test set into these arrays
4

4

00:00:07,530  -->  00:00:10,700
composed of the users in lines and the movies in columns
5

5

00:00:10,700  -->  00:00:13,570
and we did this because in this special structure,
6

6

00:00:13,570  -->  00:00:16,080
that is the usual structure for any deep learning model
7

7

00:00:16,080  -->  00:00:18,040
or even machine learning model,
8

8

00:00:18,040  -->  00:00:19,410
well, the lines are going to be
9

9

00:00:19,410  -->  00:00:21,890
the observations going into the network
10

10

00:00:21,890  -->  00:00:24,710
and the columns are the features that are going to be
11

11

00:00:24,710  -->  00:00:27,040
the input nodes in the network.
12

12

00:00:27,040  -->  00:00:30,730
So for each user we will have its ratings of all the movies,
13

13

00:00:30,730  -->  00:00:32,070
zeros included,
14

14

00:00:32,070  -->  00:00:33,480
and these ratings are going to be
15

15

00:00:33,480  -->  00:00:37,650
the input nodes for this observation going into the network.
16

16

00:00:37,650  -->  00:00:40,740
And now that's when PyTorch comes into play.
17

17

00:00:40,740  -->  00:00:43,140
Because very soon we will start creating
18

18

00:00:43,140  -->  00:00:45,470
the architecture of our neural network.
19

19

00:00:45,470  -->  00:00:48,980
But we will build this architecture with tensors,
20

20

00:00:48,980  -->  00:00:50,193
PyTorch tensors.
21

21

00:00:51,170  -->  00:00:52,421
So what are tensors?
22

22

00:00:52,421  -->  00:00:54,440
Tensors are simply arrays
23

23

00:00:54,440  -->  00:00:57,840
that contain elements of a single data type.
24

24

00:00:57,840  -->  00:01:00,770
So a tensor is a multi-dimensional matrix
25

25

00:01:00,770  -->  00:01:05,550
but instead of being a NumPy array, this is a PyTorch array.
26

26

00:01:05,550  -->  00:01:08,820
In fact, we could build a neural network with NumPy arrays,
27

27

00:01:08,820  -->  00:01:11,130
but that would be much less efficient
28

28

00:01:11,130  -->  00:01:13,390
and that's why we're using tensors
29

29

00:01:13,390  -->  00:01:16,270
as what we are about to do with the torch.Tensors.
30

30

00:01:16,270  -->  00:01:18,660
By the way, with TensorFlow we have exactly the same.
31

31

00:01:18,660  -->  00:01:20,750
With TensorFlow we work with tensors
32

32

00:01:20,750  -->  00:01:23,870
that are TensorFlow tensors, so another kind of tensor,
33

33

00:01:23,870  -->  00:01:26,560
another kind of multi-dimensional matrix,
34

34

00:01:26,560  -->  00:01:30,530
and so we could also implement our autoencoders from scratch
35

35

00:01:30,530  -->  00:01:31,940
with TensorFlow.
36

36

00:01:31,940  -->  00:01:34,540
But I actually did that and it turned out that,
37

37

00:01:34,540  -->  00:01:37,580
for autoencoders, I preferred PyTorch much more,
38

38

00:01:37,580  -->  00:01:39,460
because not only I got better results,
39

39

00:01:39,460  -->  00:01:41,593
and also this was much more simple.
40

40

00:01:41,593  -->  00:01:43,179
So let's go for PyTorch.
41

41

00:01:43,179  -->  00:01:46,689
Alright, now all we have to do in this very quick tutorial
42

42

00:01:46,689  -->  00:01:50,900
is to convert our training set and our test set
43

43

00:01:50,900  -->  00:01:55,890
that are so far a list of lists, into some torch.Tensors.
44

44

00:01:55,890  -->  00:01:59,000
So the training set is going to be one torch.Tensor
45

45

00:01:59,000  -->  00:02:01,950
and the test set is going to be another torch.Tensor.
46

46

00:02:01,950  -->  00:02:02,783
There are going to be
47

47

00:02:02,783  -->  00:02:06,860
two, separate multi-dimensional matrices based on PyTorch.
48

48

00:02:06,860  -->  00:02:08,710
So this is going to be a very quick tutorial
49

49

00:02:08,710  -->  00:02:11,370
because the conversion is going to be very easy.
50

50

00:02:11,370  -->  00:02:13,860
We will just use a class from the torch library,
51

51

00:02:13,860  -->  00:02:15,910
which will do the conversion itself.
52

52

00:02:15,910  -->  00:02:18,490
So let's do this. We're going to take our training set.
53

53

00:02:18,490  -->  00:02:21,950
So training underscore set
54

54

00:02:21,950  -->  00:02:23,790
and we'll give it a new value
55

55

00:02:23,790  -->  00:02:25,780
which will be this converted training set
56

56

00:02:25,780  -->  00:02:27,230
into a torch.Tensor
57

57

00:02:27,230  -->  00:02:29,470
and so first we need to take torch,
58

58

00:02:29,470  -->  00:02:30,650
so that's the library
59

59

00:02:30,650  -->  00:02:32,110
and then dot
60

60

00:02:32,110  -->  00:02:34,800
and now we're going to use the class FloatTensor,
61

61

00:02:34,800  -->  00:02:37,200
which will create an object of this class.
62

62

00:02:37,200  -->  00:02:39,770
The subject will be the torch.Tensor itself.
63

63

00:02:39,770  -->  00:02:40,690
Remember, I told you
64

64

00:02:40,690  -->  00:02:44,149
that a torch.Tensor is a multi-dimensional matrix
65

65

00:02:44,149  -->  00:02:45,640
with a single type
66

66

00:02:45,640  -->  00:02:47,513
and since we're taking the FloatTensor class,
67

67

00:02:47,513  -->  00:02:51,070
the single type is going to be float.
68

68

00:02:51,070  -->  00:02:53,233
So let's take the class FloatTensor,
69

69

00:02:54,170  -->  00:02:56,090
with capitals F and T,
70

70

00:02:56,090  -->  00:02:59,320
and inside this class we need to take one argument
71

71

00:02:59,320  -->  00:03:01,300
which has to be a list of lists
72

72

00:03:01,300  -->  00:03:04,920
and, of course, this is our old version of the training set.
73

73

00:03:04,920  -->  00:03:07,780
That's why we had to make this conversion here
74

74

00:03:07,780  -->  00:03:10,190
into a list of lists. That's because
75

75

00:03:10,190  -->  00:03:13,720
the FloatTensor class expects a list of lists.
76

76

00:03:13,720  -->  00:03:16,444
So let's input our old training set
77

77

00:03:16,444  -->  00:03:19,250
and that's basically all.
78

78

00:03:19,250  -->  00:03:21,250
This will give the exact, same matrix
79

79

00:03:21,250  -->  00:03:24,180
with the users in lines and the movies in columns,
80

80

00:03:24,180  -->  00:03:26,190
but instead of being a NumPy array,
81

81

00:03:26,190  -->  00:03:28,650
this will be a torch.Tensor.
82

82

00:03:28,650  -->  00:03:31,220
And now we're going to do the same for the test set
83

83

00:03:31,220  -->  00:03:33,210
so I'm copying this line
84

84

00:03:33,210  -->  00:03:34,430
pasting it below
85

85

00:03:34,430  -->  00:03:37,200
and now we're just going to replace training set
86

86

00:03:37,200  -->  00:03:38,593
by test set.
87

87

00:03:39,620  -->  00:03:41,120
Test set, here we go,
88

88

00:03:41,120  -->  00:03:44,460
we are ready to convert our training set and our test set
89

89

00:03:44,460  -->  00:03:46,180
into torch.Tensors.
90

90

00:03:46,180  -->  00:03:47,900
Now, I have to warn you,
91

91

00:03:47,900  -->  00:03:50,590
the training set and the test set in variable explorer
92

92

00:03:50,590  -->  00:03:51,660
will disappear
93

93

00:03:51,660  -->  00:03:54,540
and that's because the variable explorer pane in Spyder
94

94

00:03:54,540  -->  00:03:56,740
doesn't recognize torch.Tensors yet.
95

95

00:03:56,740  -->  00:03:58,930
Remember that PyTorch is very recent.
96

96

00:03:58,930  -->  00:04:01,050
It was basically released a few weeks ago
97

97

00:04:01,050  -->  00:04:03,100
so it won't be recognized yet
98

98

00:04:03,100  -->  00:04:05,050
in variable explorer in Spyder.
99

99

00:04:05,050  -->  00:04:07,770
But don't worry. The variable will still exist,
100

100

00:04:07,770  -->  00:04:10,820
only they will not be displayed in variable explorer.
101

101

00:04:10,820  -->  00:04:12,290
So let's check it out.
102

102

00:04:12,290  -->  00:04:14,380
I'm going to select this line
103

103

00:04:14,380  -->  00:04:18,750
and execute to convert our training set into a torch.Tensor
104

104

00:04:18,750  -->  00:04:21,070
and as you can see the training set disappeared.
105

105

00:04:21,070  -->  00:04:23,120
But I guarantee you that it is still here.
106

106

00:04:23,120  -->  00:04:25,730
And now we're gonna do the same for the test set.
107

107

00:04:25,730  -->  00:04:28,940
So I'm selecting this line and execute.
108

108

00:04:28,940  -->  00:04:31,640
And now the test set also disappeared
109

109

00:04:31,640  -->  00:04:34,200
but it's now converted into a torch.Tensor
110

110

00:04:34,200  -->  00:04:35,720
and that's what we want.
111

111

00:04:35,720  -->  00:04:36,730
So, perfect!
112

112

00:04:36,730  -->  00:04:38,470
Now the common data pre-processing
113

113

00:04:38,470  -->  00:04:40,290
for recommended system is done
114

114

00:04:40,290  -->  00:04:42,770
and now it's time to take care of what is specific
115

115

00:04:42,770  -->  00:04:44,740
to restricted Boltzmann machines.
116

116

00:04:44,740  -->  00:04:47,030
Remember, with restricted Boltzmann machines,
117

117

00:04:47,030  -->  00:04:50,458
we're gonna predict if a user likes yes or no a movie.
118

118

00:04:50,458  -->  00:04:53,190
So now what we have to do as a next step is
119

119

00:04:53,190  -->  00:04:57,680
to convert all the ratings into binary ratings, zero or one.
120

120

00:04:57,680  -->  00:04:59,470
Because these are gonna be the inputs
121

121

00:04:59,470  -->  00:05:01,640
of our restricted Boltzmann machines.
122

122

00:05:01,640  -->  00:05:03,340
So we'll do that in the next tutorial
123

123

00:05:03,340  -->  00:05:05,140
and until then, enjoy deep learning.
