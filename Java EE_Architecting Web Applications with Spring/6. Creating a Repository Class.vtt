WEBVTT
1
00:00:02.440 --> 00:00:05.410
[Autogenerated] So before I can use this repository in my application,

2
00:00:05.410 --> 00:00:07.740
I need to do several things.

3
00:00:07.740 --> 00:00:10.890
Anita lets Spring note that I'm using this repository so

4
00:00:10.890 --> 00:00:13.240
you have to configure spring to do that.

5
00:00:13.240 --> 00:00:14.550
Once you've done that,

6
00:00:14.550 --> 00:00:18.340
I have to be able to inject this repository into the place where it's needed,

7
00:00:18.340 --> 00:00:21.420
which in this case will be the web application now to

8
00:00:21.420 --> 00:00:23.150
make something injectable in spring.

9
00:00:23.150 --> 00:00:27.970
I could use the named attribute on that tell spring that this thing is named,

10
00:00:27.970 --> 00:00:30.160
and then when it looks for something to inject,

11
00:00:30.160 --> 00:00:34.740
it looks for all the named objects, finds this one and injected.

12
00:00:34.740 --> 00:00:38.340
However, a better annotation to use would be repository.

13
00:00:38.340 --> 00:00:41.540
So Repository is what's known as a meta annotation.

14
00:00:41.540 --> 00:00:44.740
It's an annotation that is itself annotated.

15
00:00:44.740 --> 00:00:49.340
It's essentially a named object, but it's a named object with a better name.

16
00:00:49.340 --> 00:00:51.680
I'm telling spring that this is a repository.

17
00:00:51.680 --> 00:00:55.170
I'm telling people that use my code later that this is a repository,

18
00:00:55.170 --> 00:00:58.240
so it carries more information along with it.

19
00:00:58.240 --> 00:01:02.140
Once I have that, I now need to configure my application.

20
00:01:02.140 --> 00:01:04.630
So I think of the web as being the main application.

21
00:01:04.630 --> 00:01:08.310
I want to apply configuration to this application to tell

22
00:01:08.310 --> 00:01:10.800
spring how to run the application on.

23
00:01:10.800 --> 00:01:13.740
We do that by adding a configuration file.

24
00:01:13.740 --> 00:01:16.940
So if we open the web config file here we see it implements

25
00:01:16.940 --> 00:01:21.650
interface called web MVC Configure Now what?

26
00:01:21.650 --> 00:01:24.160
We could use nXML configuration.

27
00:01:24.160 --> 00:01:26.930
Most people now use Java configuration.

28
00:01:26.930 --> 00:01:30.560
XML is just so last century We've really stopped using XML

29
00:01:30.560 --> 00:01:34.400
configuration these days also with java configuration,

30
00:01:34.400 --> 00:01:37.260
everything is in one place and it's all in the code.

31
00:01:37.260 --> 00:01:41.810
So with the Java configuration, we give the pas a chance to pass the java.

32
00:01:41.810 --> 00:01:45.290
So if I make a spelling mistakes at least on the annotations

33
00:01:45.290 --> 00:01:48.340
in the Java Pozzo will pick that up for me.

34
00:01:48.340 --> 00:01:51.940
For me, the spelling mistakes on my XML we might miss that.

35
00:01:51.940 --> 00:01:57.040
So here notice them specifying enable JPA repositories.

36
00:01:57.040 --> 00:02:01.440
So I'm telling spring where to scan to find these repositories and

37
00:02:01.440 --> 00:02:05.250
in this case I'm giving it the name of a base package which is calm

38
00:02:05.250 --> 00:02:09.160
Docker Pluralsight dark jacket and that corresponds to the package

39
00:02:09.160 --> 00:02:10.750
name for my repository.

40
00:02:10.750 --> 00:02:13.940
So calmed a Pluralsight dark jacket.

41
00:02:13.940 --> 00:02:18.710
Also in this configuration we're configuring our entity manager factory So

42
00:02:18.710 --> 00:02:22.590
this is the configuration for hibernate hibernate in this case is our

43
00:02:22.590 --> 00:02:25.420
entity manager Know that is specifying hibernate.

44
00:02:25.420 --> 00:02:27.030
JPA vendor adapted here.

45
00:02:27.030 --> 00:02:29.140
So we're using hibernate.

46
00:02:29.140 --> 00:02:30.080
We have some additional.

47
00:02:30.080 --> 00:02:31.630
Hey, Bernie Properties that we set us.

48
00:02:31.630 --> 00:02:34.000
Well, the important thing to notice here,

49
00:02:34.000 --> 00:02:34.710
though,

50
00:02:34.710 --> 00:02:38.290
is that we call set packages to scan on the entity manager

51
00:02:38.290 --> 00:02:42.060
factory being now the package we set the scan were passing

52
00:02:42.060 --> 00:02:43.910
a base package name to this.

53
00:02:43.910 --> 00:02:44.730
That's calm.

54
00:02:44.730 --> 00:02:48.490
Docker Pluralsight dark jacket on That corresponds to the base package.

55
00:02:48.490 --> 00:02:51.140
And if my entities so article is calmed,

56
00:02:51.140 --> 00:02:54.430
a Pluralsight are jacket or data models article and then

57
00:02:54.430 --> 00:02:56.840
base model is in the same package.

58
00:02:56.840 --> 00:03:00.640
So base model is also in calmed a Pluralsight dark jacket.

59
00:03:00.640 --> 00:03:04.360
So by setting up the entity manager on by enabling these repositories,

60
00:03:04.360 --> 00:03:06.730
we should not be ready to use the repository in our

61
00:03:06.730 --> 00:03:09.040
code on go and get some data.

62
00:03:09.040 --> 00:03:12.110
So you may remember that I have a control it in my web

63
00:03:12.110 --> 00:03:15.140
application called article Controller.

64
00:03:15.140 --> 00:03:16.440
If I open that up,

65
00:03:16.440 --> 00:03:20.550
this is where we'll make use of our repository on to use this repository.

66
00:03:20.550 --> 00:03:22.940
I need to inject it into the controller.

67
00:03:22.940 --> 00:03:26.510
So in the controller and a at a private variable of type articles.

68
00:03:26.510 --> 00:03:28.680
Repository bringing the references.

69
00:03:28.680 --> 00:03:29.690
Lots of bringing the package.

70
00:03:29.690 --> 00:03:33.100
Name and a ID.

71
00:03:33.100 --> 00:03:34.790
Another promise to make instructor.

72
00:03:34.790 --> 00:03:37.040
That's going to to have type articles Repository.

73
00:03:37.040 --> 00:03:43.040
I'll name that repository here.

74
00:03:43.040 --> 00:03:47.560
We then just said this stop repository equals two repository Notice My

75
00:03:47.560 --> 00:03:51.980
articles Controller is marked with the inject annotation and that tells spring

76
00:03:51.980 --> 00:03:55.460
in this case to inject these things that it confined.

77
00:03:55.460 --> 00:03:56.850
So articles repository,

78
00:03:56.850 --> 00:04:00.240
remember is marked as a repository And that's a named object.

79
00:04:00.240 --> 00:04:02.840
I will inject that into the controller here.

80
00:04:02.840 --> 00:04:07.130
So one has been injected we can use it so in my code hear I can say

81
00:04:07.130 --> 00:04:11.940
repository dot On this will have a fine all method on it.

82
00:04:11.940 --> 00:04:16.430
And a find all methods comes from the crowd Repository interface and a find

83
00:04:16.430 --> 00:04:20.590
all method returns a collection off article objects In fact,

84
00:04:20.590 --> 00:04:23.300
it returns something of type irritable but we can usv a

85
00:04:23.300 --> 00:04:27.220
here is this is Java 11 so I can save our articles on

86
00:04:27.220 --> 00:04:28.990
That's the data I've got back on.

87
00:04:28.990 --> 00:04:32.490
Now that I have that back I can generate a few model from this on.

88
00:04:32.490 --> 00:04:35.640
Send the view model off to the web page and have it

89
00:04:35.640 --> 00:04:38.130
have that data displayed on the page.

90
00:04:38.130 --> 00:04:40.340
So the code ends up looking like this.

91
00:04:40.340 --> 00:04:42.640
We grab the articles from the repository.

92
00:04:42.640 --> 00:04:45.920
We generate a list of view models called articles on.

93
00:04:45.920 --> 00:04:50.010
We trade over the entities and for each entity we transform

94
00:04:50.010 --> 00:04:53.100
it into a view model and then pass that view model off to

95
00:04:53.100 --> 00:04:56.040
the view to display the data.

96
00:04:56.040 --> 00:04:59.940
Notice that the key thing here is that we're just calling find all and a.

97
00:04:59.940 --> 00:05:03.450
Remember the find all was a method on the crowd repository in the face.

98
00:05:03.450 --> 00:05:05.160
We've never implemented that.

99
00:05:05.160 --> 00:05:07.260
We'll see the moment that find all returns.

100
00:05:07.260 --> 00:05:12.760
All the data that we need the view model we create is then passed

101
00:05:12.760 --> 00:05:15.980
on to the view that's used by indexed on HTML.

102
00:05:15.980 --> 00:05:20.000
So if I go and find out in my jacket web code so we

103
00:05:20.000 --> 00:05:21.480
see here we're using Time Leaf,

104
00:05:21.480 --> 00:05:25.980
and part of the time leave construct is to it right over each of these articles

105
00:05:25.980 --> 00:05:30.340
and then display information about the article on the page.

106
00:05:30.340 --> 00:05:31.690
So if you look in my SQL,

107
00:05:31.690 --> 00:05:34.940
you'll see that I've inserted some data into the database.

108
00:05:34.940 --> 00:05:39.540
And if we do a select star from jagged db to articles and execute this,

109
00:05:39.540 --> 00:05:40.980
we'll see that we have four rows in.

110
00:05:40.980 --> 00:05:44.370
Here we have BBC news, Pluralsight, Stack,

111
00:05:44.370 --> 00:05:46.440
overflow and Java,

112
00:05:46.440 --> 00:05:50.740
and each one of these has an image associated with it on a title.

113
00:05:50.740 --> 00:05:52.680
So we're now in a position to run the code.

114
00:05:52.680 --> 00:05:54.580
If I go and run this spring application,

115
00:05:54.580 --> 00:05:58.740
we'll see it fire up in the console and should be ready to browse.

116
00:05:58.740 --> 00:06:02.480
If I got to Chrome on, go to local host 80 81 on.

117
00:06:02.480 --> 00:06:03.800
Sure enough, we see something.

118
00:06:03.800 --> 00:06:07.240
We are getting back these four entries from the database.

119
00:06:07.240 --> 00:06:09.790
However, we don't have the code in place yet to display.

120
00:06:09.790 --> 00:06:12.740
The images were just getting placeholders here.

121
00:06:12.740 --> 00:06:17.140
This could be anything, so let's just proves that we are getting some data back.

122
00:06:17.140 --> 00:06:21.000
So I go back into the web page and each article display its title.

123
00:06:21.000 --> 00:06:26.310
Let's say Save that, Go back to Chrome and refresh on we can.

124
00:06:26.310 --> 00:06:29.420
See that we are getting each of these titles from the database.

125
00:06:29.420 --> 00:06:32.380
We are reaching into the database and are pulling out the

126
00:06:32.380 --> 00:06:35.620
data that's being done from the controller,

127
00:06:35.620 --> 00:06:38.740
with controllers calling fine all on the repository.

128
00:06:38.740 --> 00:06:42.240
And a final is justifying on this credit repository interface,

129
00:06:42.240 --> 00:06:50.000
so we haven't implemented this. It's done by the generally repository proxy for us by spring

