WEBVTT
1
00:00:02.640 --> 00:00:05.940
[Autogenerated] So the first thing we'll do is take a look at unit testing.

2
00:00:05.940 --> 00:00:07.740
So we know for the unit testing,

3
00:00:07.740 --> 00:00:12.530
we need to isolate the units we go to test our test will have dependencies.

4
00:00:12.530 --> 00:00:15.120
So our articles project will depend on a repository.

5
00:00:15.120 --> 00:00:16.540
For example,

6
00:00:16.540 --> 00:00:20.160
we need to make sure we don't use any real repository as part of the testing.

7
00:00:20.160 --> 00:00:23.640
So the way we deal with this is by making sure our dependencies are injected

8
00:00:23.640 --> 00:00:26.590
into our code and may have come across terms like dependency,

9
00:00:26.590 --> 00:00:28.430
injection or inversion of control.

10
00:00:28.430 --> 00:00:32.500
So spring is an inversion of control container on that uses dependency

11
00:00:32.500 --> 00:00:36.840
injection to inject dependencies into components.

12
00:00:36.840 --> 00:00:39.610
So we're going to make sure that we pass any dependencies

13
00:00:39.610 --> 00:00:42.990
we need into the code that we're testing because we're

14
00:00:42.990 --> 00:00:44.780
passing those dependencies in.

15
00:00:44.780 --> 00:00:48.200
That means we can step out those dependencies stabbing.

16
00:00:48.200 --> 00:00:50.630
Here's a general sort of phrase so we can create,

17
00:00:50.630 --> 00:00:54.240
mocks or fake or stubs that we can test against.

18
00:00:54.240 --> 00:00:57.170
The best way to do this is to use a mocking framework.

19
00:00:57.170 --> 00:00:58.760
And a framework that we're going to use here for

20
00:00:58.760 --> 00:01:01.840
mocking is something called McKee to.

21
00:01:01.840 --> 00:01:08.580
So let's go and write some code that shows this so to create the tests.

22
00:01:08.580 --> 00:01:12.370
The first thing I do is to add a test class into the project,

23
00:01:12.370 --> 00:01:15.460
and I'm going to ad attest to the article service.

24
00:01:15.460 --> 00:01:20.610
So I got my article services go to the source test JavaScript new class on.

25
00:01:20.610 --> 00:01:24.970
We'll call this thing jacket, article service on repository test as well.

26
00:01:24.970 --> 00:01:29.330
I can name my classes not to give them some meaningful names on.

27
00:01:29.330 --> 00:01:32.040
This is the article service that uses a repository.

28
00:01:32.040 --> 00:01:34.240
So that's what we're testing here.

29
00:01:34.240 --> 00:01:35.940
So just finish that off.

30
00:01:35.940 --> 00:01:37.810
So this test is going to use my article,

31
00:01:37.810 --> 00:01:40.930
details service on article repository class.

32
00:01:40.930 --> 00:01:44.540
So I know I need to have a data member off that type.

33
00:01:44.540 --> 00:01:49.340
We call this thing services and just add the crepe packages into my code.

34
00:01:49.340 --> 00:01:54.120
So the way I'm going to set this up so I'm going to use JUnit and using JUnit,

35
00:01:54.120 --> 00:01:56.840
I'm going to set up methods tear down methods on.

36
00:01:56.840 --> 00:01:58.630
I'm going to add test methods.

37
00:01:58.630 --> 00:02:01.840
So let's just want a rough outline of that now.

38
00:02:01.840 --> 00:02:04.250
So in my test code, we'll have something like this.

39
00:02:04.250 --> 00:02:07.340
We'll have a before method and a test method.

40
00:02:07.340 --> 00:02:09.610
We like to correct references the correct packages

41
00:02:09.610 --> 00:02:12.540
to this inside the before method.

42
00:02:12.540 --> 00:02:13.740
As we'll see in a moment,

43
00:02:13.740 --> 00:02:18.440
we'll create our service and then for the test method will run the test code.

44
00:02:18.440 --> 00:02:23.440
Now, at the moment, the test name is terrible, but that's just a placeholder.

45
00:02:23.440 --> 00:02:26.340
We'll come back and cracked the test name in a moment.

46
00:02:26.340 --> 00:02:28.840
So what about the before method?

47
00:02:28.840 --> 00:02:32.840
So inside the before method, I know I have to create the services.

48
00:02:32.840 --> 00:02:37.180
The service constructor has to injected parameters were injecting a

49
00:02:37.180 --> 00:02:40.750
repository and a injecting a log to log against.

50
00:02:40.750 --> 00:02:43.110
So the service constructor looks like this.

51
00:02:43.110 --> 00:02:45.400
It's marked with the inject annotation.

52
00:02:45.400 --> 00:02:48.180
So when this is run within a spring container,

53
00:02:48.180 --> 00:02:50.740
these things are injected automatically.

54
00:02:50.740 --> 00:02:53.920
In our case, we're calling the construct ourselves.

55
00:02:53.920 --> 00:02:56.790
So we have to pass these parameters into the constructor

56
00:02:56.790 --> 00:02:59.240
so that the service could use them.

57
00:02:59.240 --> 00:03:03.940
So to do that, we need to introduce to more member variables.

58
00:03:03.940 --> 00:03:08.740
So I'll have a articles repository member variable and a log member variable.

59
00:03:08.740 --> 00:03:11.340
Now, at the moment, we haven't initialized these.

60
00:03:11.340 --> 00:03:15.740
So inside the before method, these need to be initialized.

61
00:03:15.740 --> 00:03:17.160
Now, this is unit testing,

62
00:03:17.160 --> 00:03:19.520
so we're not going to create a real log and we're not

63
00:03:19.520 --> 00:03:21.540
going to create a real repository.

64
00:03:21.540 --> 00:03:24.440
We're going to create fake versions of these or stabbed versions of

65
00:03:24.440 --> 00:03:28.240
these on for that we don't use a mocking framework.

66
00:03:28.240 --> 00:03:32.210
And a mocking frame that we're going to use is Marquis to Now again,

67
00:03:32.210 --> 00:03:34.320
this class is not about testing.

68
00:03:34.320 --> 00:03:36.720
So I'm not going to go into details of mosquito here.

69
00:03:36.720 --> 00:03:39.340
We're just going to see how this thing is used.

70
00:03:39.340 --> 00:03:44.140
So to use Mickey to I need to reference mickey to dot mock.

71
00:03:44.140 --> 00:03:48.180
So I'm doing a static import to bring the mock method in here

72
00:03:48.180 --> 00:03:51.040
and then in my code I can call that method.

73
00:03:51.040 --> 00:03:52.520
So to the mock method,

74
00:03:52.520 --> 00:03:57.440
we pass it the type i e the class off the thing we want to create a mock for.

75
00:03:57.440 --> 00:04:00.760
What Makita will do for me is essentially create a proxy so

76
00:04:00.760 --> 00:04:03.500
proxy that will look like the log object or will look like

77
00:04:03.500 --> 00:04:06.240
the article repository interface.

78
00:04:06.240 --> 00:04:10.660
What I can now do is I can use my article repository on I can use log

79
00:04:10.660 --> 00:04:15.240
is if they really exist as if they are real things.

80
00:04:15.240 --> 00:04:18.150
So we do that here initially by just passing a reference to

81
00:04:18.150 --> 00:04:21.240
article repository and log into my constructor.

82
00:04:21.240 --> 00:04:26.740
So at this point, we have a faint object mocked object that we can use.

83
00:04:26.740 --> 00:04:28.460
So how are we going to use this?

84
00:04:28.460 --> 00:04:31.940
Well, first of all, what are we going to test?

85
00:04:31.940 --> 00:04:36.540
So let's test that when I call get all articles on my service,

86
00:04:36.540 --> 00:04:38.640
that call actually works.

87
00:04:38.640 --> 00:04:40.060
Now, how do we test that?

88
00:04:40.060 --> 00:04:41.400
Well, if I call,

89
00:04:41.400 --> 00:04:45.440
get all articles on my service that's gonna call get all

90
00:04:45.440 --> 00:04:47.750
on the repository through positive,

91
00:04:47.750 --> 00:04:49.900
is going to return a certain number of articles.

92
00:04:49.900 --> 00:04:51.240
Let's say three.

93
00:04:51.240 --> 00:04:56.240
And in that case, I need to make sure my service also returns three articles.

94
00:04:56.240 --> 00:04:58.940
So first of all, let's give the test the name.

95
00:04:58.940 --> 00:05:03.440
So get all articles should return all articles.

96
00:05:03.440 --> 00:05:06.040
Then let's set up the test.

97
00:05:06.040 --> 00:05:08.800
So I'm going to test that where my repository returns.

98
00:05:08.800 --> 00:05:12.940
A single article in the service also returns a single article.

99
00:05:12.940 --> 00:05:16.280
So one article comes back from the repository on one article,

100
00:05:16.280 --> 00:05:18.840
gets returned from the service.

101
00:05:18.840 --> 00:05:23.460
So to do that, I create a single article on I set the value of the image on it.

102
00:05:23.460 --> 00:05:26.540
So I'm just initializer my article with some data here.

103
00:05:26.540 --> 00:05:31.740
I then need to configure my repository mock so that it does the right thing.

104
00:05:31.740 --> 00:05:36.140
The way we do that in mosquito is to use mosquitoes when method.

105
00:05:36.140 --> 00:05:38.770
So I statically import the when method on.

106
00:05:38.770 --> 00:05:42.540
Then in my code, I set up a mock on the repository.

107
00:05:42.540 --> 00:05:45.990
So here I'm saying when somebody calls the repositories find all

108
00:05:45.990 --> 00:05:49.140
method that I should return some stuff on,

109
00:05:49.140 --> 00:05:51.740
What I'm returning is a single entry.

110
00:05:51.740 --> 00:05:53.610
So I'm saying take this one entry.

111
00:05:53.610 --> 00:05:58.040
I have turned it into an array and then return that array.

112
00:05:58.040 --> 00:06:01.810
If I look in my article detail service in here when somebody calls,

113
00:06:01.810 --> 00:06:04.810
get all articles, get all articles, calls,

114
00:06:04.810 --> 00:06:09.050
find all on the repository on back in my test,

115
00:06:09.050 --> 00:06:11.930
find all on the repository will now return this collection of

116
00:06:11.930 --> 00:06:16.240
entries This collection of articles I can now call my service

117
00:06:16.240 --> 00:06:17.900
on when I call the service,

118
00:06:17.900 --> 00:06:22.180
I call the services get all articles method that will call the repositories,

119
00:06:22.180 --> 00:06:23.610
find all method on.

120
00:06:23.610 --> 00:06:28.010
I should get back this collection of articles and I can Now check

121
00:06:28.010 --> 00:06:31.140
that What I get back is what I expect to get back.

122
00:06:31.140 --> 00:06:33.940
We do that check by using an assert.

123
00:06:33.940 --> 00:06:38.230
So here I'm using another library called assert for J and that

124
00:06:38.230 --> 00:06:42.040
provides something called fluent assertions for my code.

125
00:06:42.040 --> 00:06:46.220
So I can say, assert that articles dot size is equal to one.

126
00:06:46.220 --> 00:06:47.590
So I'm asking for one article.

127
00:06:47.590 --> 00:06:50.640
I should get back one article.

128
00:06:50.640 --> 00:06:53.450
So let's run this test we can run this from inside

129
00:06:53.450 --> 00:06:56.140
cradle we can see the the output.

130
00:06:56.140 --> 00:06:56.800
So that's good.

131
00:06:56.800 --> 00:07:00.010
The test works, but there's two things here.

132
00:07:00.010 --> 00:07:03.380
One is I'm writing the test after the code on.

133
00:07:03.380 --> 00:07:06.190
We should really write the test before the code and

134
00:07:06.190 --> 00:07:08.840
should see the task or red first.

135
00:07:08.840 --> 00:07:12.440
Now we know that doesn't always happen, as indeed it hasn't here.

136
00:07:12.440 --> 00:07:14.660
So we've written the test after we've written the code.

137
00:07:14.660 --> 00:07:18.940
However, I still like to prove that I'm testing the right thing.

138
00:07:18.940 --> 00:07:20.300
So the test is green.

139
00:07:20.300 --> 00:07:23.730
What I'd like to do is to go into my service coming out the

140
00:07:23.730 --> 00:07:26.740
call to the repository and a related code.

141
00:07:26.740 --> 00:07:29.110
So now what will happen is that when I run the test,

142
00:07:29.110 --> 00:07:31.590
the service doesn't call the repository and we don't get

143
00:07:31.590 --> 00:07:33.330
back the collection of articles and a.

144
00:07:33.330 --> 00:07:35.740
Therefore the test should fail.

145
00:07:35.740 --> 00:07:40.020
So if I go back and run the test again indeed the test goes red.

146
00:07:40.020 --> 00:07:42.940
So it does look like we're testing the right thing.

147
00:07:42.940 --> 00:07:46.540
So let's just put that code Bacca's it was.

148
00:07:46.540 --> 00:07:48.600
So we're not going to go into much more detail about

149
00:07:48.600 --> 00:07:50.210
what we should do The test here.

150
00:07:50.210 --> 00:07:52.540
I'm just giving you an idea of how to set up mocking

151
00:07:52.540 --> 00:07:55.340
and a out he was mocking within our code.

152
00:07:55.340 --> 00:07:57.180
But maybe we should think a little more about the

153
00:07:57.180 --> 00:07:59.390
sort of things we'd like to test.

154
00:07:59.390 --> 00:08:01.440
So here are some examples.

155
00:08:01.440 --> 00:08:04.630
We should probably check that if I asked for a single entry,

156
00:08:04.630 --> 00:08:09.140
I call find one just returned a single entry from the repository.

157
00:08:09.140 --> 00:08:10.530
We should probably check that through.

158
00:08:10.530 --> 00:08:11.750
Positive is empty.

159
00:08:11.750 --> 00:08:12.600
We don't return.

160
00:08:12.600 --> 00:08:15.590
Any entries on the application doesn't blow up.

161
00:08:15.590 --> 00:08:17.240
There's no exception.

162
00:08:17.240 --> 00:08:18.370
We should probably check that.

163
00:08:18.370 --> 00:08:22.830
We do get exceptions in certain cases, so I pass an invalid IDE maybe.

164
00:08:22.830 --> 00:08:26.110
Or if the object is no title or URL or no image,

165
00:08:26.110 --> 00:08:29.440
then we should probably throw an exception in that case.

166
00:08:29.440 --> 00:08:33.340
So certain things we should always think about testing when we run these tests.

167
00:08:33.340 --> 00:08:37.540
The general concept is don't just test what's known as the Happy Path,

168
00:08:37.540 --> 00:08:39.820
so don't just test the code that's going to be

169
00:08:39.820 --> 00:08:43.440
successful but test the failure code as well.

170
00:08:43.440 --> 00:08:44.520
So that's unit testing.

171
00:08:44.520 --> 00:08:48.590
Briefly, what we'll do now is take a look at integration testing.

172
00:08:48.590 --> 00:08:49.870
We'll take a look at how,

173
00:08:49.870 --> 00:08:58.000
inside a spring environment we set up the environment to allow us to do integration tests.

