WEBVTT
1
00:00:03.440 --> 00:00:06.140
[Autogenerated] We're nowhere near getting security ready yet.

2
00:00:06.140 --> 00:00:08.340
We have to configure the web application.

3
00:00:08.340 --> 00:00:11.040
It's the web application that will use security.

4
00:00:11.040 --> 00:00:12.970
So here in the web application,

5
00:00:12.970 --> 00:00:16.950
we had a new class to configure the security for this application.

6
00:00:16.950 --> 00:00:21.790
When we call this web security config this class generation of

7
00:00:21.790 --> 00:00:25.250
base class called web Security Configure adapter,

8
00:00:25.250 --> 00:00:28.920
which comes from spring security only over a method called

9
00:00:28.920 --> 00:00:33.390
configure just past the instance of HTTP security on which we used

10
00:00:33.390 --> 00:00:36.940
to configure security for this application.

11
00:00:36.940 --> 00:00:40.290
So we use HTTP security to tell the web application

12
00:00:40.290 --> 00:00:42.700
which you are us we need to secure on.

13
00:00:42.700 --> 00:00:46.430
We also use HTTP security to configure how security

14
00:00:46.430 --> 00:00:49.640
will work within this application.

15
00:00:49.640 --> 00:00:52.620
So in here, we want to do four things around.

16
00:00:52.620 --> 00:00:57.730
Authentication first is that we want to allow access to anything in

17
00:00:57.730 --> 00:01:01.280
the resource is folder to any request that comes in,

18
00:01:01.280 --> 00:01:06.600
and we also want to allow access to the account slash register endpoint.

19
00:01:06.600 --> 00:01:09.470
This permit all is set so anybody can access.

20
00:01:09.470 --> 00:01:13.940
Our resource is that anybody is allowed to be able to register.

21
00:01:13.940 --> 00:01:17.170
The resource is folder contains HTML and CSS.

22
00:01:17.170 --> 00:01:20.640
So probably we want to allow full access to that.

23
00:01:20.640 --> 00:01:23.850
It might be that in certain circumstances we want to block

24
00:01:23.850 --> 00:01:26.600
certain resource is maybe just as JavaScript.

25
00:01:26.600 --> 00:01:31.540
But generally anybody is able to access these things.

26
00:01:31.540 --> 00:01:34.310
We then say that any request that is authenticated,

27
00:01:34.310 --> 00:01:37.340
we allow access to all resources.

28
00:01:37.340 --> 00:01:39.450
So once the user has been authenticated,

29
00:01:39.450 --> 00:01:42.240
they could access any part of the system.

30
00:01:42.240 --> 00:01:44.460
We need to apply authorization to this,

31
00:01:44.460 --> 00:01:49.740
but we'll do that in a more finer grained way inside the application itself.

32
00:01:49.740 --> 00:01:52.300
You then go on to say we want to apply form.

33
00:01:52.300 --> 00:01:53.400
Log in on that.

34
00:01:53.400 --> 00:01:55.700
The log in page is that this endpoint?

35
00:01:55.700 --> 00:01:58.370
So account slash log in And here again,

36
00:01:58.370 --> 00:02:02.640
we're seeing permit all so anybody can access this page.

37
00:02:02.640 --> 00:02:06.040
So if you're not logged in yet, we don't know who you are.

38
00:02:06.040 --> 00:02:09.250
You still must be able to log in via this log in page.

39
00:02:09.250 --> 00:02:13.940
Otherwise, nobody would be able to log into the application and finally,

40
00:02:13.940 --> 00:02:17.090
we've got allow access to log out on the log out.

41
00:02:17.090 --> 00:02:24.240
URL is slash account slash log out and again, anybody can access that URL.

42
00:02:24.240 --> 00:02:26.840
So what we're saying here is that any user can access the

43
00:02:26.840 --> 00:02:30.370
resource is any user can access the register page.

44
00:02:30.370 --> 00:02:32.910
Any user can access the log in page on.

45
00:02:32.910 --> 00:02:35.240
Any user can access the log out page,

46
00:02:35.240 --> 00:02:39.640
but you must be authenticated to touch anything else within the application.

47
00:02:39.640 --> 00:02:40.980
And as a first step,

48
00:02:40.980 --> 00:02:42.870
this seems like a reasonable approach to applying

49
00:02:42.870 --> 00:02:45.540
security to the Web application.

50
00:02:45.540 --> 00:02:50.040
So we need to do one more thing before we add the details of security.

51
00:02:50.040 --> 00:02:53.540
Nice to add the authentication controller.

52
00:02:53.540 --> 00:02:55.610
This controller looks like this.

53
00:02:55.610 --> 00:02:57.370
It is to endpoints on account.

54
00:02:57.370 --> 00:03:00.040
Log in on account register.

55
00:03:00.040 --> 00:03:03.840
So this is the controller that any log in call on any user registration

56
00:03:03.840 --> 00:03:07.820
call will come to the log in endpoint just returned.

57
00:03:07.820 --> 00:03:11.510
Serve HTML That let me do a log in the actual log in

58
00:03:11.510 --> 00:03:13.940
itself is handled by spring security.

59
00:03:13.940 --> 00:03:18.210
The log in endpoint returns from HTML that let me do a log in the

60
00:03:18.210 --> 00:03:21.530
register endpoint returns summation him out on a get,

61
00:03:21.530 --> 00:03:24.450
which is the form will use to do the log in and then

62
00:03:24.450 --> 00:03:30.010
on a post will take that data on, apply it to register the user what you've done,

63
00:03:30.010 --> 00:03:38.000
that we just redirect back to the root of the application. But the user is now registered

