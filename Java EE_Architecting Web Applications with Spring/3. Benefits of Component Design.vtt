WEBVTT
1
00:00:02.940 --> 00:00:04.990
[Autogenerated] So if we try and build our code

2
00:00:04.990 --> 00:00:07.940
with the vertical code separation, I e e.

3
00:00:07.940 --> 00:00:10.840
We build it to support the physical design.

4
00:00:10.840 --> 00:00:14.240
In that case, our code layout much is the physical layout.

5
00:00:14.240 --> 00:00:15.790
So we have a web project.

6
00:00:15.790 --> 00:00:17.270
We have a services project.

7
00:00:17.270 --> 00:00:19.800
We have a database project, and because of that,

8
00:00:19.800 --> 00:00:21.620
it's obvious which code goes away.

9
00:00:21.620 --> 00:00:23.080
So we have a services project.

10
00:00:23.080 --> 00:00:25.320
We know all the services code and a all the code that we

11
00:00:25.320 --> 00:00:28.920
deployed to a service TLS into that project on the same

12
00:00:28.920 --> 00:00:31.340
for the other tears as well.

13
00:00:31.340 --> 00:00:35.940
What this means for our code is that we end up with maybe three projects.

14
00:00:35.940 --> 00:00:39.550
We end up with a repository project to handle the database access.

15
00:00:39.550 --> 00:00:43.280
We end up with the services project to handle the service layer on.

16
00:00:43.280 --> 00:00:48.090
We end up with a web project that deals with just the web to itself.

17
00:00:48.090 --> 00:00:49.900
There are benefits of this.

18
00:00:49.900 --> 00:00:52.850
There's some separation of concerns that the concerns were

19
00:00:52.850 --> 00:00:56.740
separating are the physical concerns off the deployment.

20
00:00:56.740 --> 00:00:59.210
So we're breaking this down into tears on we know

21
00:00:59.210 --> 00:01:02.240
which project maps onto which tier.

22
00:01:02.240 --> 00:01:05.340
So there's an easy mapping off layers to services,

23
00:01:05.340 --> 00:01:07.800
so if your DevOps team comes along and says,

24
00:01:07.800 --> 00:01:11.830
I want to move all my services to run on some remote machine

25
00:01:11.830 --> 00:01:14.790
somewhere that you know exactly where the projects live.

26
00:01:14.790 --> 00:01:17.340
You know exactly what that project is called on.

27
00:01:17.340 --> 00:01:20.680
It's relatively straightforward to deploy that single project

28
00:01:20.680 --> 00:01:24.430
with all the services onto a single to onto a single physical

29
00:01:24.430 --> 00:01:28.050
location structure is easy to understand.

30
00:01:28.050 --> 00:01:29.230
We have three projects.

31
00:01:29.230 --> 00:01:31.540
I mean, how hard can it be?

32
00:01:31.540 --> 00:01:32.590
Your web project?

33
00:01:32.590 --> 00:01:35.540
The services Project and a database project.

34
00:01:35.540 --> 00:01:39.110
It's a very easy to understand project structure on everybody.

35
00:01:39.110 --> 00:01:41.810
Does it and a putting this in quotes?

36
00:01:41.810 --> 00:01:46.040
So the fact that everybody does it doesn't necessarily mean it's good practice.

37
00:01:46.040 --> 00:01:49.140
But typically, when you walk up to a project customer,

38
00:01:49.140 --> 00:01:52.840
practice says to create the projects that map the physical tears,

39
00:01:52.840 --> 00:01:54.820
she could walk up to any project.

40
00:01:54.820 --> 00:01:59.040
I know exactly where anything is within that project.

41
00:01:59.040 --> 00:02:02.040
So what about when we separate the code horizontally?

42
00:02:02.040 --> 00:02:02.810
In this case,

43
00:02:02.810 --> 00:02:07.210
our code layout matches our logical layout and not our physical layout.

44
00:02:07.210 --> 00:02:12.240
So we have one project per feature per component that we want to build,

45
00:02:12.240 --> 00:02:14.000
So here we have a web project.

46
00:02:14.000 --> 00:02:16.910
We have our database access projects that would be a repository.

47
00:02:16.910 --> 00:02:19.620
Project on Entities Project on We have this project

48
00:02:19.620 --> 00:02:23.460
inside here called jacket articles, so that's one of our components.

49
00:02:23.460 --> 00:02:25.640
That's one of our features.

50
00:02:25.640 --> 00:02:28.020
So as well as having the physical layout for our code,

51
00:02:28.020 --> 00:02:30.940
we have this logical structure to our application.

52
00:02:30.940 --> 00:02:36.150
So we have one project per feature that we'd like to build on.

53
00:02:36.150 --> 00:02:37.490
This is benefits.

54
00:02:37.490 --> 00:02:39.840
Now we do have a separation of concerns.

55
00:02:39.840 --> 00:02:42.580
And a concerns in this case are the features on the

56
00:02:42.580 --> 00:02:45.040
components that we're trying to build to.

57
00:02:45.040 --> 00:02:47.940
Each project becomes its own concern.

58
00:02:47.940 --> 00:02:48.780
Now, of course,

59
00:02:48.780 --> 00:02:52.390
we are clashing with the concern of putting projects across their own tears.

60
00:02:52.390 --> 00:02:55.040
But there are other ways of dealing with that.

61
00:02:55.040 --> 00:02:56.260
If we do this, I would.

62
00:02:56.260 --> 00:02:58.840
Developers are only working on one thing,

63
00:02:58.840 --> 00:03:01.080
so developers are working on a feature.

64
00:03:01.080 --> 00:03:03.980
They don't have to check out the web project on the Repository

65
00:03:03.980 --> 00:03:08.040
Project and a services project to do one single thing.

66
00:03:08.040 --> 00:03:11.030
They can check out the future project on work inside

67
00:03:11.030 --> 00:03:13.440
our project to build that feature.

68
00:03:13.440 --> 00:03:13.800
Hopefully,

69
00:03:13.800 --> 00:03:16.140
there are fewer issues and source controlled just because

70
00:03:16.140 --> 00:03:18.710
it's easier to manage when we're checking things in when

71
00:03:18.710 --> 00:03:19.890
we're trying to do commits.

72
00:03:19.890 --> 00:03:23.140
We should have fewer issues When we do that.

73
00:03:23.140 --> 00:03:26.240
It's also much easier to see the whole functionality.

74
00:03:26.240 --> 00:03:29.040
I could walk up to a project from its structure.

75
00:03:29.040 --> 00:03:33.540
I can see the list of features the list of components of the project has.

76
00:03:33.540 --> 00:03:36.270
I don't have to delve into the services project on Try to

77
00:03:36.270 --> 00:03:38.840
find all the Things Inside services.

78
00:03:38.840 --> 00:03:41.790
I don't have to delve inside the database project on Find

79
00:03:41.790 --> 00:03:43.630
all the things that touch the database.

80
00:03:43.630 --> 00:03:48.540
I can see a single feature in place.

81
00:03:48.540 --> 00:03:50.380
So there are some drawbacks to this.

82
00:03:50.380 --> 00:03:51.480
It's not pure.

83
00:03:51.480 --> 00:03:53.740
It's hard to separate some things out.

84
00:03:53.740 --> 00:03:54.650
So, for example,

85
00:03:54.650 --> 00:03:59.140
the web here we have to build the web here is a single piece of code.

86
00:03:59.140 --> 00:04:03.440
It's much harder to put the controller code, for example, into its own project.

87
00:04:03.440 --> 00:04:06.930
It's much harder to put the view code into its own project,

88
00:04:06.930 --> 00:04:11.840
so generally we put the web code into his own single web project.

89
00:04:11.840 --> 00:04:13.570
Same is true with the database code.

90
00:04:13.570 --> 00:04:16.100
These entities need to be in their own project as

91
00:04:16.100 --> 00:04:17.920
those entities are interrelated.

92
00:04:17.920 --> 00:04:21.340
It's much harder to have the entities scattered across project as

93
00:04:21.340 --> 00:04:24.940
you end up with too many Inter project references,

94
00:04:24.940 --> 00:04:28.010
or you might end up with circle references across project,

95
00:04:28.010 --> 00:04:31.240
so we tend to put the entities in the their own project as well.

96
00:04:31.240 --> 00:04:36.140
But apart from that we can separate things into their own projects,

97
00:04:36.140 --> 00:04:39.840
it's also much harder separate these into physical layers.

98
00:04:39.840 --> 00:04:43.550
If I want to deploy, for example, all of the services onto a new machine,

99
00:04:43.550 --> 00:04:48.040
I have to be able to deploy all the project jar files onto that machine.

100
00:04:48.040 --> 00:04:51.630
We have multiple jar files deployed rather than a single jar

101
00:04:51.630 --> 00:04:54.860
file deployed that may or may not be an issue,

102
00:04:54.860 --> 00:04:58.540
depending on exactly how your organization works.

103
00:04:58.540 --> 00:05:01.590
This isn't standard practice, so, as we said previously,

104
00:05:01.590 --> 00:05:03.220
typically in an application,

105
00:05:03.220 --> 00:05:07.640
we break the application down into projects that map the physical tears.

106
00:05:07.640 --> 00:05:10.790
You don't often see projects mapped out into components.

107
00:05:10.790 --> 00:05:14.940
It is happening more, but it's still not quite custom practice yet,

108
00:05:14.940 --> 00:05:17.550
so you might get some pushback from other members of the team.

109
00:05:17.550 --> 00:05:21.340
Other members of your organization when you try and do this.

110
00:05:21.340 --> 00:05:22.960
So let's take a look at some code.

111
00:05:22.960 --> 00:05:31.000
Let's take a look at what the project we're going to build is on. Let's take a look at how we're going to build our project app

