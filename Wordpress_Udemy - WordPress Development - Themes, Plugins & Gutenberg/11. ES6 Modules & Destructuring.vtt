WEBVTT
1
00:00:07.530 --> 00:00:13.340
Yes six modules and de structuring are two new features introduced in JavaScript and this lecture will

2
00:00:13.380 --> 00:00:14.830
be learning both of these.

3
00:00:14.880 --> 00:00:19.450
It's important to know that these two features are completely independent of each other.

4
00:00:19.470 --> 00:00:25.470
You can use either feature without the other without being said it's actually common practice to use

5
00:00:25.470 --> 00:00:27.030
these two features together.

6
00:00:27.150 --> 00:00:30.510
We will be exploring how that's done to start things off.

7
00:00:30.510 --> 00:00:39.530
I want you to create a file named functions dot J.S. in previous lectures with load modules using the

8
00:00:39.530 --> 00:00:41.630
required function for node.

9
00:00:41.630 --> 00:00:42.920
This was perfectly fine.

10
00:00:43.250 --> 00:00:49.850
However we want to use this code on the browser using the required function is the common J.S. method

11
00:00:49.850 --> 00:00:51.260
of loading modules.

12
00:00:51.260 --> 00:00:56.960
This is perfectly acceptable for node modules but I want these files to load on the front where common

13
00:00:56.960 --> 00:01:03.770
GSM modules are not supported natively iOS 6 modules are the official way to load modules in JavaScript

14
00:01:04.130 --> 00:01:07.070
creating and using modules is fairly easy.

15
00:01:07.070 --> 00:01:09.670
We'll just have to do things differently.

16
00:01:09.680 --> 00:01:11.960
Let's start with the functions file.

17
00:01:11.960 --> 00:01:15.260
This file will be a module for the indexed file.

18
00:01:15.260 --> 00:01:20.730
I'm going to create a constant named Hello that will be set to an arrow function.

19
00:01:20.900 --> 00:01:23.780
The arrow function will just console dot log.

20
00:01:23.780 --> 00:01:29.790
Simple message to export a module and the style of iOS 6.

21
00:01:29.800 --> 00:01:36.130
We will have to use the export default keywords right after this.

22
00:01:36.140 --> 00:01:38.780
We have to specify what we want to export.

23
00:01:38.870 --> 00:01:46.280
I want to export the hello constant with iOS 6 modules you can export multiple values to export a value.

24
00:01:46.340 --> 00:01:49.120
You just need to use the export keyword.

25
00:01:49.220 --> 00:01:52.690
You can actually just use the export keyword by itself.

26
00:01:52.730 --> 00:01:57.350
But if we were to remove the default keyword then we would get an error.

27
00:01:57.380 --> 00:02:02.720
I want to explain why but it's kind of hard to explain without learning about what D structuring is

28
00:02:02.720 --> 00:02:03.500
first.

29
00:02:03.500 --> 00:02:08.650
For now let's pretend you can only export one value and to export that value.

30
00:02:08.690 --> 00:02:15.020
You need both the export and default keywords and this example we're going to pretend that we can only

31
00:02:15.020 --> 00:02:17.100
export this Hello Function.

32
00:02:17.150 --> 00:02:20.630
This is all you need to do in order to export a module.

33
00:02:20.630 --> 00:02:23.060
Let's learn how to import this module.

34
00:02:23.120 --> 00:02:25.370
Go back to the index file.

35
00:02:25.370 --> 00:02:30.110
I'm going to input the following import functions from dot slash.

36
00:02:30.110 --> 00:02:36.940
Function dot J S let me break down what's going on here to import a module.

37
00:02:36.970 --> 00:02:43.780
You need to use the import keyword this keyword actually does two things it will import a module and

38
00:02:43.780 --> 00:02:47.480
give you the opportunity to assign the module a variable name.

39
00:02:47.590 --> 00:02:50.080
I'll expand more on this in just a moment.

40
00:02:50.080 --> 00:02:54.610
The next thing that you need to do is specify where that module can be found.

41
00:02:54.610 --> 00:03:01.270
Use the keyword from to let javascript know you want to specify the path to the module to specify a

42
00:03:01.270 --> 00:03:03.280
path relative to this module.

43
00:03:03.310 --> 00:03:07.750
You have to use the dot forward slash followed by the name of the module.

44
00:03:07.780 --> 00:03:13.750
In this case it would be the functions file this one line of code will import the module.

45
00:03:13.750 --> 00:03:15.610
Then you can just use it normally

46
00:03:19.660 --> 00:03:21.230
if we did everything correctly.

47
00:03:21.280 --> 00:03:29.960
Then we should be able to run the NPM run start command without any errors let's test this by opening

48
00:03:29.960 --> 00:03:33.480
the index dot h file and checking the console.

49
00:03:33.680 --> 00:03:36.330
You should see the message being output it.

50
00:03:36.350 --> 00:03:40.300
This is a very basic example on how to export and import modules.

51
00:03:40.430 --> 00:03:45.250
When it comes to exporting modules you will most likely be writing this kind of syntax.

52
00:03:45.260 --> 00:03:50.990
90 percent of the time however for importing modules the syntax will vary.

53
00:03:51.020 --> 00:03:57.520
I want to go more in-depth into that but we first need to learn what D structuring is d structuring

54
00:03:57.770 --> 00:04:04.640
is a very simple concept to understand and use d structuring allows you to extract properties from objects

55
00:04:04.640 --> 00:04:07.670
and arrays into their own standalone variables.

56
00:04:07.670 --> 00:04:09.370
Let's look at an example.

57
00:04:09.410 --> 00:04:12.480
I'm going to insert this code right below here.

58
00:04:12.560 --> 00:04:18.830
I'm going to create a variable named Obi J and this will be an object with two properties called Prop

59
00:04:18.830 --> 00:04:20.430
1 and Prop 2.

60
00:04:20.540 --> 00:04:26.600
I'm going to set Prop 1 to 5 and Prop 2 to 10.

61
00:04:26.620 --> 00:04:32.380
Now I'm going to log Prop 2 to access a prop..

62
00:04:32.420 --> 00:04:36.020
You have to specify the object and then follow it up with the property name.

63
00:04:36.440 --> 00:04:41.240
However doing it like this can get rather annoying in a regular application.

64
00:04:41.240 --> 00:04:47.280
You may end up having dozens of objects and it would be annoying to have to constantly type each object

65
00:04:47.300 --> 00:04:48.800
and its property.

66
00:04:48.800 --> 00:04:54.470
This also makes your code less readable and gives it a nested feeling before we had the structuring

67
00:04:54.480 --> 00:04:57.060
you would usually do something like this.

68
00:04:57.140 --> 00:05:04.820
You would create a variable and assign its value to the property that's fine and all but it can become

69
00:05:04.880 --> 00:05:08.280
increasingly annoying each time you had to do this.

70
00:05:08.300 --> 00:05:13.400
This is where d structuring comes into play to D structure a variable.

71
00:05:13.460 --> 00:05:15.150
You need to do the following.

72
00:05:15.170 --> 00:05:20.240
You can use any of the variable keywords and then follow it up with a pair of curly brackets.

73
00:05:20.390 --> 00:05:25.640
By adding these curly brackets you're telling javascript you want to grab properties and put them into

74
00:05:25.640 --> 00:05:27.020
their own variable.

75
00:05:27.170 --> 00:05:32.160
You simply pass in the name of the properties which are Prop 1 and Prop 2.

76
00:05:32.330 --> 00:05:37.650
You have the option of D structuring all the properties or just a select few.

77
00:05:37.700 --> 00:05:43.040
The next thing you need to specify is which object where these properties can be found which is Obi

78
00:05:43.060 --> 00:05:44.090
J.

79
00:05:44.150 --> 00:05:47.680
This line of code just the same thing as the line above it does.

80
00:05:47.720 --> 00:05:51.190
I'm going to comment out the traditional way of doing this.

81
00:05:53.020 --> 00:06:00.820
Then I'm going to update my long function to use the Prop 2 variable rather than accessing the LBJ variable

82
00:06:01.390 --> 00:06:04.370
run the NPM run start command.

83
00:06:04.420 --> 00:06:06.220
You shouldn't receive any errors.

84
00:06:06.220 --> 00:06:10.360
Check out the index template to see if a number 10 is being output.

85
00:06:12.820 --> 00:06:15.390
By itself this really is an impressive.

86
00:06:15.430 --> 00:06:17.690
This is a super simple feature.

87
00:06:17.740 --> 00:06:23.200
It was introduced because it makes you write less code and I would say it's more or less readable than

88
00:06:23.200 --> 00:06:24.820
the previous method.

89
00:06:24.820 --> 00:06:29.410
I'm going to comment this out while restructuring can be used by itself.

90
00:06:29.440 --> 00:06:32.860
You will usually see it used with importing modules.

91
00:06:32.890 --> 00:06:38.380
I'm going to go back to my functions file and I'm going to export a variable named num with a value

92
00:06:38.380 --> 00:06:38.950
of 5

93
00:06:42.780 --> 00:06:49.150
we will no longer pretend that we can only export one thing to export multiple pieces of data.

94
00:06:49.170 --> 00:06:53.340
You can just use the export keyword followed by the name and the value.

95
00:06:53.400 --> 00:06:55.070
I'm going to stop right there.

96
00:06:55.080 --> 00:06:59.760
Javascript requires that you export a name and value.

97
00:06:59.760 --> 00:07:04.830
If we were to just export the number five by itself then we would get an error.

98
00:07:04.890 --> 00:07:08.090
You are expected to export a name and value pair.

99
00:07:08.130 --> 00:07:12.820
You cannot just export a value and you can not just export a name.

100
00:07:12.840 --> 00:07:18.490
If I were to restore this and remove the number 5 this time then I would get an error from web pack.

101
00:07:18.570 --> 00:07:21.170
This is super important to understand.

102
00:07:21.300 --> 00:07:24.080
I have to pass in a name and a value.

103
00:07:24.150 --> 00:07:29.490
This is why you would get an error if you were to just export the hello function without the default

104
00:07:29.520 --> 00:07:30.460
keyword.

105
00:07:30.510 --> 00:07:34.020
You are only giving value but you're not giving it a name.

106
00:07:34.020 --> 00:07:37.220
Javascript doesn't care that you define the variable above.

107
00:07:37.350 --> 00:07:41.220
You have to give it a name and value on the same line.

108
00:07:41.250 --> 00:07:47.800
So what does the default keyword do that the default keyword allows you to give a default.

109
00:07:47.820 --> 00:07:54.330
Export and value you are allowed to export multiple values since you can export multiple values then

110
00:07:54.330 --> 00:07:59.400
you also have the option of importing all those values or some of those values or just one of those

111
00:07:59.400 --> 00:08:02.580
values inside the import statement.

112
00:08:02.580 --> 00:08:06.040
You can specify what value you'd like to import.

113
00:08:06.120 --> 00:08:13.050
In this example we're actually not specifying any particular data even though we have a hello function

114
00:08:13.110 --> 00:08:14.760
inside the functions file.

115
00:08:14.850 --> 00:08:17.690
This line will not grab the Hello Function.

116
00:08:17.700 --> 00:08:20.490
Instead it'll grab the default value.

117
00:08:20.490 --> 00:08:25.950
With that being said I don't have to name this how low inside my import statement.

118
00:08:25.950 --> 00:08:31.830
This is just a reference since it's a reference I can change this to whatever name I want I could change

119
00:08:31.830 --> 00:08:35.660
this to foo and then I can update my code to reflect that change.

120
00:08:35.700 --> 00:08:37.350
And this would still work.

121
00:08:37.380 --> 00:08:42.210
This line is saying hey I want to import some code from the function's files.

122
00:08:42.300 --> 00:08:48.720
I'm not specifying any particular data so give me whatever the default export value is I want you to

123
00:08:48.720 --> 00:08:49.770
assign the value.

124
00:08:49.770 --> 00:08:54.290
Return it to a variable named foo to prove this further.

125
00:08:54.330 --> 00:08:59.640
I'm going to run the NPM run start commands.

126
00:08:59.770 --> 00:09:06.050
I didn't receive any errors then I'm going to view the page again.

127
00:09:06.240 --> 00:09:09.720
You should see the message still being output it like before.

128
00:09:10.020 --> 00:09:13.290
Even though you can name the important value whatever you want.

129
00:09:13.380 --> 00:09:19.360
It's common practice to name an after the value that's being exported so it can be easier to understand.

130
00:09:19.380 --> 00:09:22.800
I'm going to change my values back to Hello.

131
00:09:22.800 --> 00:09:27.360
The question is how do we import specific values from a module.

132
00:09:27.390 --> 00:09:30.110
This is where d structuring comes into play.

133
00:09:30.180 --> 00:09:34.080
I'm going to change my hello to a pair of curly brackets.

134
00:09:34.110 --> 00:09:40.290
What will happen is that JavaScript will return an object each property in that object will be each

135
00:09:40.290 --> 00:09:42.280
value you export it.

136
00:09:42.360 --> 00:09:45.380
You can use these structuring to grab a certain value.

137
00:09:45.450 --> 00:09:47.820
I want to grab my num value.

138
00:09:47.820 --> 00:09:53.820
What this will do is extract that known value and make it into its own variable we can then log this

139
00:09:53.820 --> 00:10:00.870
variable like so I'm going to run the NPM run start command.

140
00:10:00.880 --> 00:10:03.020
There should be no errors thus far.

141
00:10:03.220 --> 00:10:11.640
The number 5 should be output it onto the page let's say I wanted to give my imported value a custom

142
00:10:11.640 --> 00:10:14.370
name that's relatively easy.

143
00:10:14.370 --> 00:10:17.200
All you have to do is use the as keyword.

144
00:10:17.220 --> 00:10:19.680
And then follow it up with a custom name.

145
00:10:19.680 --> 00:10:26.010
Then you can use this custom name throughout your code like so I'm not a fan of custom names so I'm

146
00:10:26.010 --> 00:10:27.360
going to remove this.

147
00:10:27.390 --> 00:10:31.920
Let's say I wanted to import both the default value and another value.

148
00:10:31.920 --> 00:10:34.410
There are two ways you can go about this.

149
00:10:34.500 --> 00:10:40.170
The first way is by using the asterisk character and then assigning this to a custom name using the

150
00:10:40.260 --> 00:10:41.640
as keyword.

151
00:10:41.640 --> 00:10:49.700
I'm going to set this to functions what this will do is grab all the exported values and assign them

152
00:10:49.700 --> 00:10:52.390
as properties to the functions variable.

153
00:10:52.640 --> 00:10:58.730
You can then access the values by their names like so if you want to grab the default value then that

154
00:10:58.730 --> 00:11:01.300
is stored under the default property.

155
00:11:01.490 --> 00:11:06.460
Of course this does mean you will end up writing more code which isn't what we want.

156
00:11:06.470 --> 00:11:12.200
The second method of getting the value is to just comma separated right before the DY structuring.

157
00:11:12.200 --> 00:11:16.450
I'm going to just add Hello.

158
00:11:16.490 --> 00:11:22.700
Keep in mind that by not using these structuring you won't have the ability to specify what value you

159
00:11:22.700 --> 00:11:23.790
want to use.

160
00:11:23.810 --> 00:11:27.950
So javascript will just assign this to the default value.

161
00:11:27.950 --> 00:11:34.220
Now you can use both the Hello Function and num variable by themselves without having to access it from

162
00:11:34.220 --> 00:11:35.200
an object.

163
00:11:35.210 --> 00:11:40.650
There are a couple more things I want to cover you do not have to export a default value.

164
00:11:40.760 --> 00:11:45.420
You can just export the hello function without assigning it to the default.

165
00:11:45.500 --> 00:11:48.160
I'm going to get rid of the default keyword.

166
00:11:48.320 --> 00:11:50.630
I cannot simply leave it like this.

167
00:11:50.630 --> 00:11:56.210
I have to set a name and a value so I have to move this function into the export statement for this

168
00:11:56.210 --> 00:11:56.630
to work

169
00:12:01.120 --> 00:12:04.060
I'll now have to update my import statement.

170
00:12:04.060 --> 00:12:07.060
I have to use restructuring since there is no default value.

171
00:12:07.600 --> 00:12:13.170
Let's see what happens if I were to not use these structuring and try to call the Hello Function.

172
00:12:13.300 --> 00:12:21.780
I'm going to run my NPM run start command web pack will throw an error or stating that there is no default

173
00:12:21.810 --> 00:12:24.050
value in order for this to work.

174
00:12:24.060 --> 00:12:26.190
We have to use these structuring.

175
00:12:26.190 --> 00:12:29.760
I'm going to add my curly brackets back in and run the command again

176
00:12:34.080 --> 00:12:39.570
then I'm going to view my page as expected this will output the message.

177
00:12:39.570 --> 00:12:43.840
There are a couple more things we can go over but this is just the basics.

178
00:12:43.860 --> 00:12:48.490
I know it can seem overwhelming because you can use this in a number of combinations.

179
00:12:48.510 --> 00:12:55.020
I promise you we will get a lot of practice using this as it's extremely common to use iOS 6 modules.

180
00:12:55.020 --> 00:13:01.050
Andy structuring for the most part you won't have to worry about using a lot of the trickier parts of

181
00:13:01.050 --> 00:13:07.530
modules or restructuring we're going to keep it really simple and just export some default values.

182
00:13:07.530 --> 00:13:12.960
The examples I show you are super simple but I assure you that these features are extremely helpful

183
00:13:12.960 --> 00:13:14.720
in more advanced apps.

184
00:13:14.760 --> 00:13:20.160
For now let's move onto the next lecture and learn about react.
