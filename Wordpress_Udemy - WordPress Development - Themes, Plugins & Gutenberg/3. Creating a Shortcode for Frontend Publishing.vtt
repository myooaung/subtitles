WEBVTT
1
00:00:07.430 --> 00:00:10.190
It's time to create our very first short code.

2
00:00:10.190 --> 00:00:12.820
What exactly is a short code a short code.

3
00:00:12.830 --> 00:00:17.850
It's just a piece of text that a user can paste into their content that will transform itself into a

4
00:00:17.850 --> 00:00:20.630
catchy email to render your content differently.

5
00:00:20.630 --> 00:00:26.690
That sounds similar to how a block works prior to Version 5.0 short codes were how you would create

6
00:00:26.690 --> 00:00:33.080
dynamic content slideshows video players call outs and just about anything else was built with short

7
00:00:33.080 --> 00:00:39.700
codes instead of short codes WordPress highly recommends using blocks with the introduction of Gutenberg.

8
00:00:39.740 --> 00:00:46.100
As time goes on blocks will be the de facto standard for creating dynamic content for now short codes

9
00:00:46.160 --> 00:00:50.810
are still prevalent and so taking the time to understand how they work will help you with projects that

10
00:00:50.810 --> 00:00:53.950
require you to convert short codes into blocks.

11
00:00:53.960 --> 00:00:57.500
Luckily short codes aren't complicated unlike blocks.

12
00:00:57.560 --> 00:01:01.910
You don't need to know any new features of P or JavaScript.

13
00:01:01.910 --> 00:01:05.240
The short code we're going to create will be very powerful.

14
00:01:05.240 --> 00:01:09.940
What we want to do is provide a form that a user can use to submit a recipe.

15
00:01:10.070 --> 00:01:13.830
In this part of the course we'll be looking at how to create short codes.

16
00:01:13.910 --> 00:01:19.400
Make ajax requests sanitizing each team email and creating a post dynamically.

17
00:01:19.400 --> 00:01:23.840
It's definitely a lot to do but I assure you I'll show you every step of the way.

18
00:01:25.940 --> 00:01:29.190
Let's take a look at the short codes API Codex page.

19
00:01:29.300 --> 00:01:33.150
I provide a link to this page in the resource section of this lecture.

20
00:01:33.290 --> 00:01:38.630
Skimming through this page you can see that the short code's API provides a lot of power for customizing

21
00:01:38.630 --> 00:01:42.480
our site short codes can be used almost like tags.

22
00:01:42.620 --> 00:01:48.860
They can have attributes and even content in between creating a short code is almost similar to using

23
00:01:48.860 --> 00:01:53.150
hooks inside the main plugin file under the short code section.

24
00:01:53.150 --> 00:02:00.680
We're going to call a function called add short code this function has two parameters which is the name

25
00:02:00.710 --> 00:02:04.820
of the short code and the function to call when the short code is used.

26
00:02:04.820 --> 00:02:07.940
We're going to call this short code recipe creator.

27
00:02:07.940 --> 00:02:10.520
The function we want to call is our recipe.

28
00:02:10.520 --> 00:02:15.180
Create or short code let's define this function.

29
00:02:15.180 --> 00:02:23.620
Now create a folder called short codes inside the includes folder now create a file called create or

30
00:02:23.620 --> 00:02:26.890
dot BHP and define the function inside here.

31
00:02:26.890 --> 00:02:29.260
Make sure to include it from the main plugin file.

32
00:02:34.220 --> 00:02:41.140
We're going to simply return a Hello World string we can now use our short code.

33
00:02:41.470 --> 00:02:49.470
Let's create a page called submit recipe and insert the short code inserting a short code into the Gutenberg

34
00:02:49.480 --> 00:02:51.410
editor requires a certain block.

35
00:02:51.460 --> 00:02:55.940
If you were to scroll down the list of blocks you should find a category called widgets.

36
00:02:56.080 --> 00:03:00.370
One of the blocks should be called short code and this block to the page.

37
00:03:00.370 --> 00:03:06.730
Basically it's written just like an HMO element but with square brackets instead of angle brackets input

38
00:03:06.730 --> 00:03:12.350
the name recipe creator we won't be adding anything else.

39
00:03:12.360 --> 00:03:14.400
Go ahead and publish the page.

40
00:03:14.400 --> 00:03:16.580
Let's add the page to the main menu as well

41
00:03:22.360 --> 00:03:24.250
if we navigate to our page.

42
00:03:24.250 --> 00:03:24.930
We'll find.

43
00:03:24.940 --> 00:03:26.640
Hello world output.

44
00:03:26.740 --> 00:03:32.830
Now that we've confirmed a short code is working we can begin creating the form back inside the editor

45
00:03:32.990 --> 00:03:42.370
create another file called creator dash template dot P. HP open the file inside the assets slash extras

46
00:03:42.400 --> 00:03:45.400
slash create or dash template dot to exceed.

47
00:03:45.580 --> 00:03:50.570
Copy and paste the code from the text file into the template.

48
00:03:50.700 --> 00:03:56.170
There's nothing super special going on here it's just a regular form using Bootstrap markup.

49
00:03:56.170 --> 00:04:01.810
Each input field has an I.D. attribute which we'll be using to grab the inputs value later on.

50
00:04:01.990 --> 00:04:06.520
I'll provide this template for you in the resources section of this lecture.

51
00:04:06.520 --> 00:04:09.180
You'll notice that I haven't included bootstrap.

52
00:04:09.310 --> 00:04:12.550
This is because our theme already uses Bootstrap.

53
00:04:12.550 --> 00:04:19.290
It's important to in Q bootstrap regardless of whether the theme has it or not it is overkill but necessary.

54
00:04:19.300 --> 00:04:24.420
The only reason I'm not doing this is because this is just an example plugin for this course.

55
00:04:24.550 --> 00:04:29.860
I'm not too worried about adding bootstrap since I already know my theme uses Bootstrap.

56
00:04:29.860 --> 00:04:36.680
Let's output this form now like before we're going to create a variable called creator h t email instead

57
00:04:36.700 --> 00:04:42.540
its value to the value returned by the file get contents function.

58
00:04:42.600 --> 00:04:48.940
I'm going to pass in creator dash template dot P HP and set its second parameter to true.

59
00:04:49.050 --> 00:04:56.860
Then we're going to simply return this variable refresh your page and you should see the form this form

60
00:04:56.860 --> 00:04:58.000
is pretty simple.

61
00:04:58.000 --> 00:05:01.580
We don't have any tags or categories or featured images.

62
00:05:01.660 --> 00:05:05.010
We're going to keep it to just the title and content.

63
00:05:05.590 --> 00:05:10.420
I want users to be able to use the tiny MCP editor for editing the content.

64
00:05:10.420 --> 00:05:15.710
It may be tempting to use the Gutenberg editor but currently it's very difficult to load in the Gutenberg

65
00:05:15.720 --> 00:05:16.500
editor.

66
00:05:16.600 --> 00:05:21.370
You don't have to worry about using a different editor as WordPress will still be able to convert the

67
00:05:21.370 --> 00:05:26.980
content into something Gutenberg compatible to load in the tiny MCP editor.

68
00:05:26.980 --> 00:05:31.120
WordPress provides a handy function for us called WP editor.

69
00:05:31.120 --> 00:05:34.030
Let's use this now right after grabbing our template.

70
00:05:34.030 --> 00:05:42.570
Call the function WP underscore editor in the resource section I provide a link to learn more about

71
00:05:42.570 --> 00:05:43.940
this function.

72
00:05:43.950 --> 00:05:49.710
This function has three parameters which is the default content the I.D. and then some additional settings

73
00:05:50.070 --> 00:05:54.070
we want the content to be empty so we'll pass in an empty string.

74
00:05:54.150 --> 00:05:57.810
The I.D. name is very important on the Codex page.

75
00:05:57.810 --> 00:06:04.980
WordPress tells us to use only lowercase letters or underscores otherwise the editor won't work properly.

76
00:06:04.980 --> 00:06:14.100
In that case I'm going to set the I.D. to recipe content editor let's refresh our page and see the result

77
00:06:14.100 --> 00:06:15.560
of this function.

78
00:06:15.600 --> 00:06:18.320
Well this isn't exactly what we wanted.

79
00:06:18.330 --> 00:06:21.270
We got the editor but there are two problems.

80
00:06:21.270 --> 00:06:26.580
If you look at the HDMI all its output it right outside the form and it didn't replace the text area

81
00:06:26.610 --> 00:06:28.410
filled with the same idea name.

82
00:06:28.500 --> 00:06:33.690
This is because the WP editor function echoes out the editor right away.

83
00:06:33.720 --> 00:06:34.910
We don't want that.

84
00:06:34.950 --> 00:06:39.440
We want to add the editor and replace the text field with that editor to do this.

85
00:06:39.440 --> 00:06:41.700
We will need to do some hacking.

86
00:06:41.760 --> 00:06:48.750
The solution is very simple and that's by using p ps output buffers p p provides a set of function that

87
00:06:48.750 --> 00:06:54.100
allows us to control the output which is what we'll need to make this Ed work the way we want it to.

88
00:06:54.120 --> 00:06:57.120
You'll see how this works in just a moment.

89
00:06:57.120 --> 00:07:02.550
First things first let's go back to the template and replace this form group with a place holder called

90
00:07:02.550 --> 00:07:10.550
content editor back inside the short code function we're going to create another function called our

91
00:07:10.610 --> 00:07:15.620
generate content editor inside this function.

92
00:07:15.620 --> 00:07:18.260
We're going to call the function Obi start.

93
00:07:18.320 --> 00:07:22.580
This is a page for a function that will grab any content that is output it.

94
00:07:22.640 --> 00:07:27.590
This function will prevent the content from being output it until you tell it to or until the page is

95
00:07:27.590 --> 00:07:29.000
finished executing.

96
00:07:29.000 --> 00:07:32.210
So if we were to echo out hello world.

97
00:07:32.210 --> 00:07:36.770
This won't be output it until the script is finished running because of this.

98
00:07:36.770 --> 00:07:44.600
We can ground the WP editor function and put it right after the output buffer it's safe to assume that

99
00:07:44.600 --> 00:07:47.780
the content editor won't be output it right away.

100
00:07:47.780 --> 00:07:53.580
Create a variable named Ed contents and set its value to the value returned by the OMB.

101
00:07:53.600 --> 00:08:01.440
Get clean function this function will grab any content that was output it before this function was called

102
00:08:01.470 --> 00:08:02.640
and return it.

103
00:08:02.640 --> 00:08:08.510
The last step is just to return the edit or contents variable.

104
00:08:08.660 --> 00:08:10.930
To summarize what's going on in this function.

105
00:08:10.970 --> 00:08:18.050
It goes something like this by calling the OBE start function P HP will create a buffer that will grab

106
00:08:18.080 --> 00:08:21.080
any content that has output it into a buffer.

107
00:08:21.080 --> 00:08:25.850
There are various reasons you would want to do this but we do it because you want to grab the editor

108
00:08:25.910 --> 00:08:29.450
and not allow it to be output it when we call the editor.

109
00:08:29.450 --> 00:08:31.240
This is exactly what happens.

110
00:08:31.340 --> 00:08:35.360
It gets stored in that buffer to grab everything inside the buffer.

111
00:08:35.360 --> 00:08:40.260
We use the OBI get clean function since the editor was stored in a buffer.

112
00:08:40.280 --> 00:08:46.330
We don't have to worry about it being output at the OBI get clean function will also take care of clearing

113
00:08:46.350 --> 00:08:49.200
the output so we don't get to editors.

114
00:08:49.220 --> 00:08:55.490
We can now use this function create a variable named editor age to UML and set its value to the value

115
00:08:55.490 --> 00:09:04.120
returned by the R generate content editor function using the string replace function will replace the

116
00:09:04.150 --> 00:09:07.060
place holder with the generated editor HMO

117
00:09:12.060 --> 00:09:16.910
let's refresh the page and you should now see the editor placed correctly inside the form.

118
00:09:16.920 --> 00:09:20.040
This is exactly what we wanted in the next lecture.

119
00:09:20.040 --> 00:09:22.620
We'll take a look at how to make this form work.
