WEBVTT
1
00:00:07.530 --> 00:00:11.130
You can have multiple functions attached to the same hook.

2
00:00:11.130 --> 00:00:14.360
It's perfectly normal for several plugins to use the same hook.

3
00:00:14.730 --> 00:00:19.020
Let's look at how you would prioritize hooks open the hooks.

4
00:00:19.020 --> 00:00:21.660
Example plug we created previously.

5
00:00:21.660 --> 00:00:25.580
I'm going to copy and paste the WP footer hook and its function

6
00:00:30.270 --> 00:00:32.650
then I'm going to change the function name.

7
00:00:32.760 --> 00:00:35.110
I'm going to add underscore V2.

8
00:00:35.280 --> 00:00:40.130
I'm also going to change the text and add Version 2 for formatting reasons.

9
00:00:40.170 --> 00:00:43.170
I'm going to add Brake Tags to both these functions

10
00:00:47.340 --> 00:00:49.080
before you refresh the page.

11
00:00:49.080 --> 00:00:51.380
Which text do you think will appear first.

12
00:00:51.450 --> 00:00:52.680
Let's find out.

13
00:00:52.680 --> 00:00:59.840
Refresh the page and you'll notice that the first version displays first and version 2 display seconds.

14
00:01:00.000 --> 00:01:07.350
If I were to move the second function above the first then the text positions will switch.

15
00:01:07.520 --> 00:01:09.550
I'm going to refresh the page again.

16
00:01:09.710 --> 00:01:14.990
As you can see here the version to text is appearing first by default.

17
00:01:14.990 --> 00:01:18.560
WordPress will run functions as first come first serve.

18
00:01:18.680 --> 00:01:25.200
You can completely override this by using the third parameter which determines the priority of the function.

19
00:01:25.250 --> 00:01:31.340
I'm going to switch back these functions and I will use the third parameter of the add action function.

20
00:01:31.340 --> 00:01:35.860
This parameters value must be an integer which determines the priority.

21
00:01:36.020 --> 00:01:39.720
The lower the number the higher their priority and vice versa.

22
00:01:39.860 --> 00:01:43.870
By default all functions could be priority of 10.

23
00:01:43.910 --> 00:01:46.100
I want this function to run first.

24
00:01:46.160 --> 00:01:48.080
I'll set it to something like 5.

25
00:01:48.320 --> 00:01:53.870
Let's refresh the page and you will now see the version to text appearing first.

26
00:01:53.870 --> 00:01:58.790
Just like that you can determine the order of your functions by setting the priority.

27
00:01:58.790 --> 00:02:04.640
Even if you're not repeating the same hook setting a priority can be helpful if other plugins are also

28
00:02:04.640 --> 00:02:05.630
using the same hook.

29
00:02:06.140 --> 00:02:12.520
If you feel that your plugin deserves to run first then you should set a priority to a low number.

30
00:02:12.560 --> 00:02:19.340
Now that we understand how the priority works let's see how plugins initiate these hooks in the resource

31
00:02:19.340 --> 00:02:19.970
section.

32
00:02:19.970 --> 00:02:26.630
I provide a link to the function WP footer If you scroll down to the source section you'll see that

33
00:02:26.720 --> 00:02:30.650
all this function does is call a function called do action.

34
00:02:30.650 --> 00:02:34.660
This function will trigger all hooks related to the string past.

35
00:02:34.730 --> 00:02:38.940
In this case the WP footer action hook is started.

36
00:02:38.990 --> 00:02:41.670
This is how all action hooks are started.

37
00:02:41.720 --> 00:02:43.100
It really is this simple.

38
00:02:43.370 --> 00:02:48.020
To reiterate first all hooks need to be registered to register a hook.

39
00:02:48.020 --> 00:02:54.370
You need to use the function add action the hook you want to register is defined in the first parameter.

40
00:02:54.380 --> 00:02:58.070
Keep in mind that WordPress will accept in any name.

41
00:02:58.070 --> 00:03:02.600
If I were to pass in foo then WordPress will perfectly accept this.

42
00:03:02.600 --> 00:03:09.080
It's very important to register hooks when you plug in and theme is initiated after all hooks are registered

43
00:03:09.260 --> 00:03:14.060
WordPress will run its course and when it's time to run all hooks it will use the function.

44
00:03:14.060 --> 00:03:17.050
Do action followed by the name of the hook.

45
00:03:17.060 --> 00:03:23.060
It would like to run WordPress uses this function throughout its core and calls multiple hooks.

46
00:03:23.060 --> 00:03:27.870
This is why we never have to worry about running them to view a list of hooks.

47
00:03:27.920 --> 00:03:31.200
You can find those in the resource section of this lecture.

48
00:03:31.220 --> 00:03:35.480
There are two kinds of hooks which are action hooks and filter hooks.

49
00:03:35.480 --> 00:03:39.970
I also provide a link to what WordPress calls the plugins API.

50
00:03:40.040 --> 00:03:43.670
Here you can find a list of functions that makes hooks all possible.

51
00:03:43.820 --> 00:03:46.620
Of course you're not limited to the WordPress hooks.

52
00:03:46.700 --> 00:03:48.810
You can even create your own hooks.

53
00:03:48.830 --> 00:03:52.490
Let's explore how that works inside the plugin file.

54
00:03:52.490 --> 00:03:57.940
Create a new action hook for the WP footer and call the function J you footer.

55
00:03:58.060 --> 00:04:06.510
I will define the function right afterwards.

56
00:04:06.730 --> 00:04:07.950
I'm going to come on out.

57
00:04:07.990 --> 00:04:09.460
All previous code.

58
00:04:09.460 --> 00:04:13.840
Next create a second function called J you kill WP

59
00:04:18.520 --> 00:04:24.820
this function will never run unless we call it however I want to call it with a custom hook inside the

60
00:04:24.820 --> 00:04:25.810
footer function.

61
00:04:25.810 --> 00:04:34.750
I'm going to call the do action function the hook I want to run will be called J U custom footer This

62
00:04:34.810 --> 00:04:37.700
is a completely custom hook but I just create it.

63
00:04:37.720 --> 00:04:43.090
There isn't anything else that I need to do now any plugins and things can hook into this event and

64
00:04:43.090 --> 00:04:44.810
run their own functions.

65
00:04:44.860 --> 00:04:49.180
I want to run my function J You killed WP to do this.

66
00:04:49.180 --> 00:04:54.730
I'm going to use the function add action and for the first parameter I'm going to pass in our custom

67
00:04:54.730 --> 00:04:58.860
hook called J U custom footer.

68
00:04:58.950 --> 00:05:06.010
The second parameter is the J You killed WP function inside the J you kill WP function.

69
00:05:06.030 --> 00:05:11.610
I'm going to echo out some text just like that.

70
00:05:11.670 --> 00:05:14.900
We created a custom hook and can now run it.

71
00:05:15.000 --> 00:05:21.100
Let's refresh the page and we should now see our message being output it.

72
00:05:21.220 --> 00:05:24.860
Let me write down what's going on when WordPress is initialized.

73
00:05:24.880 --> 00:05:27.430
It will load all the plugins at this point.

74
00:05:27.430 --> 00:05:34.000
The template nor the content is loaded our hooks example plugin and we'll register its hooks eventually

75
00:05:34.150 --> 00:05:40.540
WordPress will begin loading the template the template we'll call it the WP footer function as we saw

76
00:05:40.570 --> 00:05:46.990
earlier the WP footer function will call the do action function which will trigger at the WP footer

77
00:05:46.990 --> 00:05:53.830
event in the code we call the do action function we can then trigger our own custom event.

78
00:05:53.830 --> 00:05:59.080
In this case the custom event would be J U custom footer from here.

79
00:05:59.080 --> 00:06:03.610
Any functions that are registered to this event will start to run in our code.

80
00:06:03.610 --> 00:06:07.480
We hook into this event and the function that will end up running is the J.

81
00:06:07.480 --> 00:06:09.540
You killed WP function.

82
00:06:09.670 --> 00:06:12.300
This function runs and outputs the text.

83
00:06:12.370 --> 00:06:13.600
That's it.

84
00:06:13.600 --> 00:06:15.510
This also works for filters.

85
00:06:15.520 --> 00:06:19.630
However the function for running a filter is called apply filters.

86
00:06:19.630 --> 00:06:24.880
There are a couple of other functions but we won't be going over them as they aren't used as much.

87
00:06:24.940 --> 00:06:30.460
Now that you understand how the plugins API works it's time to get started with plugin development.

88
00:06:30.460 --> 00:06:32.960
If you feel a little lost that's OK.

89
00:06:33.130 --> 00:06:40.930
We'll be using the plugins API plenty once again despite its name the plugins API can also be used in

90
00:06:40.930 --> 00:06:41.740
themes.

91
00:06:41.740 --> 00:06:43.690
It's not exclusive to plugins.
