1
00:00:07,470 --> 00:00:12,750
IOS 6 comes with a new way of creating functions which are called Arrow functions.

2
00:00:12,750 --> 00:00:13,860
I'm going to call my now.

3
00:00:13,920 --> 00:00:16,140
Any code inside the index file.

4
00:00:18,520 --> 00:00:24,910
I'm now going to create a function called Hello and all it will do is output a simple message.

5
00:00:24,910 --> 00:00:29,320
Lastly I'm going to call this function.

6
00:00:29,390 --> 00:00:31,010
This is a regular function.

7
00:00:31,130 --> 00:00:37,730
I'm going to run the node app slash index command as expected.

8
00:00:37,770 --> 00:00:40,050
This will just output the message.

9
00:00:40,080 --> 00:00:41,530
Nothing really new so far.

10
00:00:41,700 --> 00:00:44,800
Arrow functions are a new way to create functions.

11
00:00:44,880 --> 00:00:50,310
The syntax can be a bit confusing at first but it's definitely more readable once you understand what's

12
00:00:50,310 --> 00:00:53,510
going on to create an arrow function.

13
00:00:53,520 --> 00:00:55,140
You need to do the following.

14
00:00:55,170 --> 00:01:00,390
First you don't need to use the function keywords so you can safely remove that.

15
00:01:00,390 --> 00:01:03,600
Next you'll have to remove the name of the function.

16
00:01:03,660 --> 00:01:12,510
Then you need to add the following symbols after the parenthesis equals sign greater than assign.

17
00:01:12,520 --> 00:01:15,460
This is what javascript calls a fat arrow.

18
00:01:15,460 --> 00:01:19,690
Lastly you can remove these curly braces and move the message on the same line.

19
00:01:22,170 --> 00:01:25,450
This is a very basic example of an arrow function.

20
00:01:25,440 --> 00:01:31,550
It's a shorter way of writing a function right off the bat arrow functions are completely anonymous.

21
00:01:31,560 --> 00:01:34,620
You can not just write an arrow function by itself.

22
00:01:34,620 --> 00:01:39,540
You either have to assign it to a variable or pass it into another function that will use it.

23
00:01:40,050 --> 00:01:45,400
If you were to add the name of the function before the parenthesis then you will receive an error.

24
00:01:45,420 --> 00:01:48,570
Let's first learn how to assign it to a variable.

25
00:01:48,570 --> 00:01:54,920
I'm going to create a variable called Hello the value of this variable will be assigned to the Arrow

26
00:01:54,930 --> 00:02:01,110
function like so just like that the arrow function is now usable.

27
00:02:01,140 --> 00:02:04,350
I can run the node command again and you'll see the message.

28
00:02:04,350 --> 00:02:12,940
Just like before let's do a side by side comparison I'm going to add a comment above indicating that

29
00:02:12,940 --> 00:02:14,430
this is an arrow function.

30
00:02:14,560 --> 00:02:18,610
Then I'm going to create a normal function like the one we had before.

31
00:02:25,860 --> 00:02:31,960
These two functions do the exact same thing and are completely identical as far as functionality goes.

32
00:02:31,980 --> 00:02:34,960
The only noticeable difference is the way they're written.

33
00:02:35,160 --> 00:02:41,750
Unlike arrow functions regular functions are usually multi line even if you only have one line of code.

34
00:02:41,850 --> 00:02:45,510
Of course you can always move everything to be one line of code.

35
00:02:45,810 --> 00:02:48,620
However the code becomes less readable.

36
00:02:48,660 --> 00:02:52,130
The arrow function is much more readable and shorter show right.

37
00:02:52,170 --> 00:02:59,690
I'm going to come on out the regular function let's keep working with the aero function aero functions

38
00:02:59,690 --> 00:03:03,620
can also be multiplied to make a multi line function.

39
00:03:03,620 --> 00:03:08,180
You can just add in the curly brackets the curly brackets are completely optional.

40
00:03:08,180 --> 00:03:14,000
If you have one line of code required if you want to have multiple lines just like any other function

41
00:03:14,090 --> 00:03:16,520
we can also have parameters.

42
00:03:16,550 --> 00:03:21,830
I'm going to create a parameter called param one to have multiple parameters.

43
00:03:21,830 --> 00:03:25,070
You can just add a comma to separate each parameter.

44
00:03:25,130 --> 00:03:27,890
For now I only want one parameter.

45
00:03:28,100 --> 00:03:33,410
I'm going to update the code where I called the hello function and pass in a message.

46
00:03:33,410 --> 00:03:41,250
I want to use this parameter so over place this static message with the message we're passed in.

47
00:03:41,310 --> 00:03:43,500
Lastly I'm going to run my command

48
00:03:49,370 --> 00:03:54,010
the script should work as expected where the message is being output it onto the console.

49
00:03:54,020 --> 00:03:55,450
This is pretty simple so far.

50
00:03:55,790 --> 00:03:59,540
There are two things you should be aware of when using arrow functions.

51
00:03:59,540 --> 00:04:02,570
The first thing is that the parentheses are optional.

52
00:04:02,570 --> 00:04:08,840
If you only have one parameter in this example we only have one parameter and so we can just remove

53
00:04:08,840 --> 00:04:11,300
the parentheses from this line of code.

54
00:04:11,300 --> 00:04:14,300
This is completely valid and allowed.

55
00:04:14,300 --> 00:04:18,230
However this option is only available if you have one parameter.

56
00:04:18,230 --> 00:04:24,290
For example if an arrow function has zero parameters then you're required to have parentheses.

57
00:04:24,290 --> 00:04:28,580
If you have one parameter then you have the option of using parentheses.

58
00:04:28,670 --> 00:04:34,070
If you have two or more parameters then you're required to have parentheses.

59
00:04:34,070 --> 00:04:38,670
I'm going to add my parentheses back in even though we only have one parameter.

60
00:04:38,810 --> 00:04:41,960
This right here is preference throughout this course.

61
00:04:41,960 --> 00:04:47,630
I will continue using parentheses even if my arrow functions only have one parameter.

62
00:04:47,690 --> 00:04:53,450
The second thing you need to be aware of is that arrow functions do not have a scope right below this

63
00:04:53,450 --> 00:04:54,140
bit of code.

64
00:04:54,140 --> 00:05:02,980
I'm going to create an object called foo this object will have two properties prompt one will be set

65
00:05:02,980 --> 00:05:04,020
to 10.

66
00:05:04,030 --> 00:05:14,780
Prop 2 won't be a regular function that logs Prop 1.

67
00:05:14,850 --> 00:05:17,720
There are two ways to reference Prop 1.

68
00:05:17,820 --> 00:05:24,010
I can use the foo variable and then access its property or I can use the this keyword.

69
00:05:24,070 --> 00:05:27,300
The this keyword is the most commonly used method.

70
00:05:27,360 --> 00:05:35,490
I'm going to run my node command and I should see the number 10 output it lets try using arrow functions.

71
00:05:35,490 --> 00:05:42,720
Now I'm going to remove the function keyword and add in the fat arrow.

72
00:05:42,730 --> 00:05:46,360
Lastly I'm going to run the command again and see what we get.

73
00:05:48,630 --> 00:05:53,920
Node will not throw an error but instead output undefined ARROW functions.

74
00:05:53,940 --> 00:05:55,600
Don't really have a scope.

75
00:05:55,620 --> 00:05:59,430
This means that the this keyword doesn't really exist.

76
00:05:59,430 --> 00:06:04,170
What javascript will do is look up one level and see if that property exists.

77
00:06:04,350 --> 00:06:09,300
If we want to output Prop 1 we would have to change the this keyword to food.

78
00:06:09,810 --> 00:06:14,070
Then we can run the command and we should see the number of being output it again.

79
00:06:14,100 --> 00:06:15,460
That's all there is to it.

80
00:06:15,480 --> 00:06:18,300
Arrow functions are popular for two reasons.

81
00:06:18,360 --> 00:06:22,560
The first reason is that it's easier to read and write than regular functions.

82
00:06:22,560 --> 00:06:26,020
The second reason is that the scope becomes less of a problem.

83
00:06:26,040 --> 00:06:28,110
This is because you know what to expect.

84
00:06:28,140 --> 00:06:34,350
Even if you have nested functions since arrow functions have no scope it becomes easier to understand

85
00:06:34,350 --> 00:06:36,190
where variables are coming from.

86
00:06:36,240 --> 00:06:41,820
I know it may not seem like a big deal but it really does matter when we begin writing bigger applications

87
00:06:42,210 --> 00:06:45,090
throughout this course we will use arrow functions a lot.
