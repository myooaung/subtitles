1
00:00:07,130 --> 00:00:10,610
It's time to get started with Gutenberg at this point.

2
00:00:10,610 --> 00:00:14,090
You should be comfortable with node react and web pack.

3
00:00:14,150 --> 00:00:18,110
We'll be using these technologies to help us with Gutenberg development.

4
00:00:18,170 --> 00:00:23,300
If you're not comfortable with these concepts then I recommend you check out the previous section.

5
00:00:23,300 --> 00:00:28,010
Right now I'm looking at the Gutenberg editor everything here is extendable.

6
00:00:28,010 --> 00:00:34,210
There are two main areas you'll usually want to extend the first area is the content itself.

7
00:00:34,250 --> 00:00:37,910
The content is made up of something WordPress calls blocks.

8
00:00:38,000 --> 00:00:44,160
It may not look like it but every section here is a block each block comes with its own settings.

9
00:00:44,180 --> 00:00:47,390
I can even freely move them around if I wish.

10
00:00:47,390 --> 00:00:50,770
WordPress provides a way to create your own blocks.

11
00:00:50,780 --> 00:00:52,330
We'll take a look at how to do that.

12
00:00:52,340 --> 00:00:59,330
In this section the other area you can extend is the sidebar the sidebar contains information such as

13
00:00:59,330 --> 00:01:05,470
the category tags status etc. we'll be looking at how to extend this as well.

14
00:01:05,480 --> 00:01:12,740
Every area is extendable but these are the two main areas you'll find yourself wanting to extend often.

15
00:01:12,750 --> 00:01:14,450
Here is what we're going to do.

16
00:01:14,490 --> 00:01:17,720
Earlier we created a recipe custom post type.

17
00:01:17,910 --> 00:01:22,950
We're going to create a block that allows users to input information about a recipe.

18
00:01:22,950 --> 00:01:29,340
This will include information such as ingredients cooking time utensils cooking experience and a meal

19
00:01:29,340 --> 00:01:30,120
type.

20
00:01:30,390 --> 00:01:34,560
The overall process for creating a block will look like the following.

21
00:01:34,560 --> 00:01:37,470
First you have to prepare your environment.

22
00:01:37,470 --> 00:01:42,990
This step is optional but this is how I prefer to do things and so I will teach you how to prepare your

23
00:01:42,990 --> 00:01:43,980
environment.

24
00:01:43,980 --> 00:01:47,900
This is basically setting up web packed react and Babel.

25
00:01:47,910 --> 00:01:54,270
Next you have to load in those files Gutenberg comes with a few hooks for making sure your CFS files

26
00:01:54,270 --> 00:02:00,710
are loaded then you have to register your block once again WordPress makes this process easy.

27
00:02:00,870 --> 00:02:04,480
All you have to do is call a few functions and your set.

28
00:02:04,560 --> 00:02:08,990
Once you've taken care of that you will need to create the settings for your block.

29
00:02:09,000 --> 00:02:12,630
This includes stuff like the title icon and form fields.

30
00:02:12,900 --> 00:02:19,730
Lastly you will need to tell Gutenberg how it should display your block now that we have an overview

31
00:02:19,730 --> 00:02:20,240
of things.

32
00:02:20,240 --> 00:02:27,020
Let's start with the first step that would be preparing the environment inside the recipe plugin directory.

33
00:02:27,020 --> 00:02:35,320
Create a folder called blocks we will be placing all our code related to blogs and the Gutenberg editor

34
00:02:35,320 --> 00:02:36,190
here.

35
00:02:36,190 --> 00:02:41,760
You don't have to name your files or folders anything special you can name this whatever you want.

36
00:02:41,800 --> 00:02:48,060
I also want to highlight that we're not placing this folder inside the includes or assets folder.

37
00:02:48,100 --> 00:02:55,750
This directory will contain a mixture of JavaScript CSX and HP code Gutenberg is mostly written with

38
00:02:55,750 --> 00:02:56,820
JavaScript.

39
00:02:56,830 --> 00:03:02,330
This is why we're not placing an inside the includes directory as the code will be vastly different.

40
00:03:02,350 --> 00:03:08,170
However a lot of the logic inside these files do affect how WordPress functions rather than the user

41
00:03:08,170 --> 00:03:09,310
experience.

42
00:03:09,310 --> 00:03:13,630
That is also why we're not placing this inside the assets folder.

43
00:03:13,630 --> 00:03:19,060
This is how I prefer to structure my plugin if you prefer to do something else than that's completely

44
00:03:19,060 --> 00:03:21,900
fine in the resource section of this lecture.

45
00:03:21,910 --> 00:03:28,450
I provide a zip file that contains some starter files download it and unzip the contents into the blocks

46
00:03:28,450 --> 00:03:32,040
folder we just created.

47
00:03:32,110 --> 00:03:37,260
This is basically the same setup we had in the previous section with some additional features.

48
00:03:37,330 --> 00:03:39,420
Let's go through this one by one.

49
00:03:39,460 --> 00:03:41,320
Open the package file.

50
00:03:41,320 --> 00:03:43,690
We're going to start with the dependencies.

51
00:03:43,900 --> 00:03:49,880
The first module is the Babel core module which will allow us to write the latest features of JavaScript.

52
00:03:50,020 --> 00:03:55,420
Right after this we're loading the Babel plugins transform react J.S. X module.

53
00:03:55,510 --> 00:04:01,030
That's quite a long name which can make it seem intimidating but he performs one simple task.

54
00:04:01,030 --> 00:04:08,020
It allows you to rename a function the function it'll change is the react dot create element function.

55
00:04:08,260 --> 00:04:14,070
Previously you learned that this function will create an HMO element as you can imagine.

56
00:04:14,170 --> 00:04:17,650
It's a pretty common function to use no matter what you're building.

57
00:04:17,650 --> 00:04:23,000
The problem with this is that react can change how this function works in the future.

58
00:04:23,050 --> 00:04:26,350
WordPress prides itself in being backwards compatible.

59
00:04:26,440 --> 00:04:30,700
If this function changes then all plugins will have to update as well.

60
00:04:30,760 --> 00:04:36,140
While the most popular plugins will keep up the lesser use plugins will quickly become outdated.

61
00:04:36,310 --> 00:04:42,850
To resolve this WordPress wraps the react dot create element function with its own function even if

62
00:04:42,850 --> 00:04:44,830
the we act version changes.

63
00:04:44,830 --> 00:04:50,500
WordPress will make the adjustments required internally for you since that's the case we want to be

64
00:04:50,500 --> 00:04:54,330
able to tell people to use the WordPress version of this function.

65
00:04:54,340 --> 00:04:56,150
This is what that plugin does.

66
00:04:56,170 --> 00:04:59,390
You'll see how bad is configured in just a moment.

67
00:04:59,410 --> 00:05:07,450
Then we have the Babel loader module for web pack right after this is the at WordPress slash Babel preset

68
00:05:07,450 --> 00:05:08,710
default module.

69
00:05:08,710 --> 00:05:13,380
This is a new module I'm introducing in the resource section of this lecture.

70
00:05:13,390 --> 00:05:19,510
I provide a link to this module as we discussed before Babel can be used with various presets.

71
00:05:19,630 --> 00:05:23,570
These presets determine what features of JavaScript you can write.

72
00:05:23,620 --> 00:05:28,640
It helps people convert your code into code that most browsers can understand.

73
00:05:28,750 --> 00:05:32,700
Previously we used the Babel preset e and V module.

74
00:05:32,830 --> 00:05:38,040
However we're going to need some additional features that aren't available under this module.

75
00:05:38,050 --> 00:05:41,560
This will force us to install additional modules and go over them.

76
00:05:41,950 --> 00:05:47,090
Luckily the WordPress development team created their own preset that has us covered.

77
00:05:47,140 --> 00:05:50,040
Now we don't have to configure Babel as much.

78
00:05:50,110 --> 00:05:55,880
Let's keep moving forward afterwords for loading in a module called Cross environment.

79
00:05:55,960 --> 00:06:00,700
As you may know there are various operating systems with their own set of commands.

80
00:06:00,700 --> 00:06:04,900
Windows is particularly known to be quite troublesome in this area.

81
00:06:05,050 --> 00:06:10,510
The cross environment module will make sure that certain settings and commands will work across all

82
00:06:10,540 --> 00:06:12,400
operating systems.

83
00:06:12,400 --> 00:06:15,160
It's a great module for keeping things consistent.

84
00:06:15,160 --> 00:06:22,610
Lastly we're loading in the web pack and web pack CLIA modules which we went over in the previous section.

85
00:06:22,630 --> 00:06:25,040
These dependencies will start us off.

86
00:06:25,090 --> 00:06:30,640
There's quite a few more modules I want to introduce but we'll look at those as the course progresses.

87
00:06:30,640 --> 00:06:35,060
Something I want to highlight is that you don't have to be an expert on these modules.

88
00:06:35,170 --> 00:06:40,390
All of these modules are configurable but a lot of the defaults work just fine.

89
00:06:40,390 --> 00:06:46,150
If we were building a server then we might want to configure this further but we're just building blocks.

90
00:06:46,150 --> 00:06:49,230
All that's important is that you have an overview of things.

91
00:06:49,330 --> 00:06:49,800
All right.

92
00:06:49,930 --> 00:06:51,860
Let's keep moving forward.

93
00:06:51,940 --> 00:06:57,070
If you look inside the scripts property you'll find that the commands are slightly different.

94
00:06:57,070 --> 00:07:00,460
First up is the cross dash e and V command.

95
00:07:00,460 --> 00:07:06,520
This will ensure that the commands we execute are cross compatible with multiple operating systems.

96
00:07:06,520 --> 00:07:10,980
This is related to the cross environment module we talked about earlier.

97
00:07:11,050 --> 00:07:16,660
It's important that the cross dash in V command is entered first so that all the other commands and

98
00:07:16,690 --> 00:07:19,400
options that follow after it will work.

99
00:07:19,570 --> 00:07:23,920
Next we're setting the Babel environment variable to default.

100
00:07:23,920 --> 00:07:27,820
This will just make sure the default settings are used in Babel afterwords.

101
00:07:28,060 --> 00:07:33,950
We're calling the web part command and setting B watch option in the previous section.

102
00:07:34,000 --> 00:07:36,460
We had to continuously run the commands.

103
00:07:36,460 --> 00:07:43,400
Any time we updated a file that watch option will force web pack to continuously watch for changes.

104
00:07:43,420 --> 00:07:45,190
This should save us some time.

105
00:07:45,340 --> 00:07:47,510
That should do it for this file.

106
00:07:47,560 --> 00:07:49,410
Let's move on to the Webb pack.

107
00:07:49,420 --> 00:07:52,860
Dot config dot J.S. file at the very top.

108
00:07:52,870 --> 00:07:59,830
We're loading the path and Webb pack modules then we immediately export an object that contains our

109
00:07:59,830 --> 00:08:01,420
settings for Webb pack.

110
00:08:01,540 --> 00:08:06,490
A lot of this is the same as before from the entry to the output properties.

111
00:08:06,550 --> 00:08:08,590
There are three things different here.

112
00:08:08,590 --> 00:08:10,830
First is the watch property.

113
00:08:10,840 --> 00:08:15,180
This will force Webb pack to continuously watch the file for changes.

114
00:08:15,190 --> 00:08:17,080
We're already doing this in our command.

115
00:08:17,080 --> 00:08:18,950
So this is a bit redundant.

116
00:08:18,970 --> 00:08:22,080
I just wanted to show you the two ways of going about this.

117
00:08:22,090 --> 00:08:23,830
Its all preference.

118
00:08:23,830 --> 00:08:27,430
Next we have the dev tool property Webb pack.

119
00:08:27,430 --> 00:08:31,540
We'll take the time to generate source maps for our JavaScript files.

120
00:08:31,540 --> 00:08:37,390
The purpose of a source map is to convert compressed and modified code back into its original state.

121
00:08:37,390 --> 00:08:41,650
There's very little impact on performance but build times do increase.

122
00:08:41,680 --> 00:08:47,390
There are various values you can use but I prefer to use the cheap eval Valve Source map.

123
00:08:47,410 --> 00:08:52,300
This results in a very fast build time but the source map isn't that great.

124
00:08:52,300 --> 00:08:55,430
That's perfectly fine since we won't be using a source map.

125
00:08:55,450 --> 00:08:58,060
We want something fast and cheap.

126
00:08:58,180 --> 00:09:01,840
The last change is in the rules for the Babel loader.

127
00:09:01,840 --> 00:09:04,540
I'm adding a new property called exclude.

128
00:09:04,690 --> 00:09:09,100
This will make sure Babel doesn't run any files in a particular directory.

129
00:09:09,250 --> 00:09:16,620
In this case we don't want Babel to process any files inside the node underscore modules directory.

130
00:09:16,720 --> 00:09:20,320
We didn't do this before because the previous examples were simple.

131
00:09:20,350 --> 00:09:24,180
However things are going to get a little more complicated from here now.

132
00:09:24,220 --> 00:09:28,500
And so I want to make sure of this directory doesn't get affected.

133
00:09:28,500 --> 00:09:30,180
That'll do it for this file.

134
00:09:30,190 --> 00:09:34,720
The last file I want to go over is the DOT Babel r c file.

135
00:09:34,720 --> 00:09:36,310
Not much going on here.

136
00:09:36,310 --> 00:09:40,660
I'm just using the WordPress default preset we installed earlier.

137
00:09:40,840 --> 00:09:46,750
We don't have to worry about adding the react preset as the WordPress default preset already covers

138
00:09:46,750 --> 00:09:48,090
that for us.

139
00:09:48,190 --> 00:09:54,730
The second property we're using here is called plugins plugins work exactly as you think they allow

140
00:09:54,730 --> 00:09:58,060
third party modules to extend Babel directly.

141
00:09:58,060 --> 00:10:03,740
All we're doing here is telling Babel to use the transform react J.S. exe plugin.

142
00:10:03,820 --> 00:10:07,930
We're also configuring the plugin by passing in an additional object.

143
00:10:07,930 --> 00:10:15,250
We're setting the pragmatic property to WP elements dot create element that is word Press's version

144
00:10:15,310 --> 00:10:18,180
of the react dot create element of function.

145
00:10:18,310 --> 00:10:24,950
We're essentially telling Babel to use the WP version when transforming elements to JavaScript.

146
00:10:25,000 --> 00:10:26,440
That's basically it.

147
00:10:26,470 --> 00:10:32,200
Once again you don't have to be an expert on every module but it's good to have a general overview of

148
00:10:32,200 --> 00:10:32,970
things.

149
00:10:32,980 --> 00:10:35,770
The great thing about this is that it's reusable.

150
00:10:35,770 --> 00:10:40,150
You can copy this from project to project and things will just work.

151
00:10:40,150 --> 00:10:46,040
Now that we have things set up let's install and check if everything works inside your command line.

152
00:10:46,090 --> 00:10:50,590
You may need to see these into this directory to run the installation.

153
00:10:50,620 --> 00:10:52,450
I'm going to input C D.

154
00:10:52,480 --> 00:11:03,240
WP dash content slash plugins slash recipe slash blocks then I'm going to run the commands npm install

155
00:11:03,240 --> 00:11:06,930
to install the modules inside the dependencies object.

156
00:11:06,960 --> 00:11:08,540
This may take a while for some of you.

157
00:11:08,550 --> 00:11:14,500
So be patient.

158
00:11:14,510 --> 00:11:23,060
Lastly let's run the commands NPM run Dev.

159
00:11:23,090 --> 00:11:25,760
This should have Webb pack process to code.

160
00:11:25,850 --> 00:11:31,430
You shouldn't be able to run any additional commands since web pack is continuously watching our files

161
00:11:31,430 --> 00:11:34,970
for any changes inside the blocks directory.

162
00:11:34,970 --> 00:11:38,510
There should be a new directory created called dist.

163
00:11:38,720 --> 00:11:44,820
This will contain the bundle Dodge's file that should confirm everything is working as expected.

164
00:11:44,900 --> 00:11:46,530
That does it for this lecture.

165
00:11:46,550 --> 00:11:48,650
We've prepared our environment.

166
00:11:48,650 --> 00:11:52,190
The next step is to begin in queuing and registering everything.

167
00:11:52,260 --> 00:11:54,200
We'll do that in the next lecture.

168
00:11:54,200 --> 00:11:55,300
I'll see you there.
