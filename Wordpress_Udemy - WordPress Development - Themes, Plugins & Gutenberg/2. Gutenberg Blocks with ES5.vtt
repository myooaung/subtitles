WEBVTT
1
00:00:07.450 --> 00:00:13.240
In this lecture I'm going to briefly go over how you would go about using Gutenberg without any tools

2
00:00:13.240 --> 00:00:14.470
or libraries.

3
00:00:14.470 --> 00:00:19.130
It's just going to be pure Javascript in the resource section of this lecture.

4
00:00:19.150 --> 00:00:23.290
I provide a link to the repository called Gutenberg examples.

5
00:00:23.320 --> 00:00:25.980
This is the official repository for Gutenberg.

6
00:00:25.990 --> 00:00:27.340
Demo examples.

7
00:00:27.340 --> 00:00:33.070
It shows you how to build your own blocks where Gutenberg the demos use some components that we haven't

8
00:00:33.070 --> 00:00:33.980
gone over yet.

9
00:00:34.090 --> 00:00:37.360
But a lot of it should make sense to you regardless.

10
00:00:37.360 --> 00:00:41.590
What I like about this repo is that there are two versions for each demo.

11
00:00:41.590 --> 00:00:45.980
There's the regular iOS 5 VERSION AND THEN THERE'S THE E next version.

12
00:00:46.180 --> 00:00:51.370
Throughout this course we've been using the iOS next version meaning we've been using the command line

13
00:00:51.400 --> 00:00:54.390
tools and libraries to build our blocks.

14
00:00:54.400 --> 00:00:57.610
However it's not necessary to use those tools.

15
00:00:57.610 --> 00:01:01.900
It's completely possible to create blocks using plain javascript.

16
00:01:01.990 --> 00:01:07.900
If you scroll down you'll see that WordPress says the following for each of the examples and include

17
00:01:07.930 --> 00:01:09.490
an iOS next example.

18
00:01:09.490 --> 00:01:13.090
The following commands are required to build the plugins.

19
00:01:13.090 --> 00:01:18.670
If you were to look into any of the E X next folders then you'll find some familiar files like the Babel

20
00:01:18.670 --> 00:01:25.630
RC web page config and package dot Jason files you'll more or less see some of the same code we've been

21
00:01:25.630 --> 00:01:27.790
using for our own blocks.

22
00:01:27.790 --> 00:01:31.240
Let's go back and check out the basic block right away.

23
00:01:31.240 --> 00:01:34.570
You'll notice that there is way less files than before.

24
00:01:34.600 --> 00:01:40.150
There should only be two which are the index stop BHP and block dot J.S. files.

25
00:01:40.150 --> 00:01:42.520
Let's start with the BHP file.

26
00:01:42.580 --> 00:01:44.920
Nothing significant going on here.

27
00:01:44.920 --> 00:01:46.710
All they're doing here is using the.

28
00:01:46.710 --> 00:01:47.090
In it.

29
00:01:47.090 --> 00:01:51.320
Hook to load the javascript file just like the E next version.

30
00:01:51.340 --> 00:01:56.360
A lot of the code is handled on the javascript side rather than the p p side.

31
00:01:56.380 --> 00:01:59.350
Let's go back and check out the j s file now.

32
00:01:59.350 --> 00:02:02.170
Things are quite different here in this version.

33
00:02:02.170 --> 00:02:06.320
The developers use a self invoked function to contain everything.

34
00:02:06.430 --> 00:02:12.160
This step is optional but it's recommended because it keeps things encapsulated and it allows you to

35
00:02:12.160 --> 00:02:14.750
grab certain properties from an object.

36
00:02:14.830 --> 00:02:22.390
If you look at the bottom you'll see that the WP blocks WP dot ie 18 n and WP dot element.

37
00:02:22.390 --> 00:02:29.620
Objects are passed in then at the top you'll see them referred to as blocks ie 18 in an element.

38
00:02:29.620 --> 00:02:34.760
This is how you would have properties as their own variables as you can see it's not perfect.

39
00:02:34.760 --> 00:02:40.270
Like restructuring it requires us to have nested code and you still have to break things down if you

40
00:02:40.270 --> 00:02:43.220
want to have values as standalone variables.

41
00:02:43.420 --> 00:02:47.710
Scrolling down you'll see the register block type function being called.

42
00:02:47.710 --> 00:02:53.950
It works just like before you pass in a name and an object with the settings the properties are all

43
00:02:53.950 --> 00:02:54.870
the same.

44
00:02:54.880 --> 00:03:00.460
And this example the title icon and category settings are pretty straightforward.

45
00:03:00.550 --> 00:03:05.150
The edit and save functions required that you return the code to render.

46
00:03:05.200 --> 00:03:08.810
However this time J.S. X isn't being used.

47
00:03:08.830 --> 00:03:12.980
Remember J.S. X is javascript not HCM l.

48
00:03:13.000 --> 00:03:19.510
The code that you see here is what web pack turns GSL since you two create elements you need to use

49
00:03:19.540 --> 00:03:23.670
the WP dot element dot create element function.

50
00:03:23.770 --> 00:03:30.910
The example here shortens it to E L the create element functions works the exact same way the react

51
00:03:30.910 --> 00:03:36.730
create element function does the first parameter is the element name followed by an object with the

52
00:03:36.730 --> 00:03:41.470
attributes to add the last parameter is the content inside.

53
00:03:41.470 --> 00:03:47.410
Right now things are simple it's just a paragraph element with some text and stylings applied.

54
00:03:47.410 --> 00:03:49.760
Let's look at a more complex example.

55
00:03:49.840 --> 00:03:57.990
Go back to the examples and select the recipe card block everything is basically the same as before.

56
00:03:58.320 --> 00:04:00.440
Let's skip to the edit function.

57
00:04:00.450 --> 00:04:03.430
There is a crazy amount of nesting going on here.

58
00:04:03.480 --> 00:04:08.790
If you want to have an element inside of another element then you'll need to call the create element

59
00:04:08.790 --> 00:04:12.930
function inside of a third parameter of the parent element.

60
00:04:12.930 --> 00:04:16.770
Basically you're trying to write H.G. email with JavaScript.

61
00:04:16.770 --> 00:04:19.640
It isn't too fun which is why I don't recommend it.

62
00:04:19.740 --> 00:04:23.010
Especially if you're trying to create something complex.

63
00:04:23.010 --> 00:04:26.990
If you're just creating a static block then this approach is fine.

64
00:04:27.000 --> 00:04:30.170
This is why I taught you the iOS next approach.

65
00:04:30.210 --> 00:04:35.400
While it does take some time to set up once you have a set up then you can forget about it and work

66
00:04:35.400 --> 00:04:36.620
on your project.

67
00:04:36.630 --> 00:04:40.650
That's basically it when it comes to working with iOS five blocks.

68
00:04:40.740 --> 00:04:45.360
The only real difference is how you load in variables and create elements.

69
00:04:45.360 --> 00:04:49.000
The rest of the settings and attributes work the same as before.

70
00:04:49.050 --> 00:04:54.060
If it's all right with you we'll continue using iOS next for the rest of our blocks.
