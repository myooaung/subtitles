1
00:00:08,080 --> 00:00:14,650
Right now the recipe posts type we have is pretty standard just like any other post I can create content

2
00:00:14,820 --> 00:00:17,620
add tags and even add a featured image.

3
00:00:17,680 --> 00:00:22,640
I want to give the user the ability to rate a recipe on a scale of 1 to 5.

4
00:00:22,780 --> 00:00:27,460
To do this we'll have to use something called the meta data api.

5
00:00:27,460 --> 00:00:32,040
Usually you would try to create a database table and have it store the data.

6
00:00:32,350 --> 00:00:37,300
However WordPress allows us to use something called the metadata API.

7
00:00:37,330 --> 00:00:38,550
What is metadata.

8
00:00:38,560 --> 00:00:45,790
Well metadata is basically just pieces of information related to a post page or user on its own.

9
00:00:45,790 --> 00:00:47,380
It's not very useful.

10
00:00:47,380 --> 00:00:50,670
Metadata has to be connected to something.

11
00:00:50,740 --> 00:00:57,220
We'll use metadata to add and store all the additional information we'll need for recipes by using the

12
00:00:57,220 --> 00:00:58,710
metadata API.

13
00:00:58,750 --> 00:01:03,340
We free ourselves of having to create a table and managing it in the database.

14
00:01:05,250 --> 00:01:11,940
In the resource section I provide a link to the metadata API Codex page as you can see there are only

15
00:01:11,940 --> 00:01:15,840
four functions that you can use but they're very powerful.

16
00:01:15,840 --> 00:01:17,780
We won't be using these functions.

17
00:01:17,790 --> 00:01:18,760
And here's why.

18
00:01:18,810 --> 00:01:21,480
Click on the ad metadata function.

19
00:01:21,540 --> 00:01:28,320
WordPress provides a note that says this is a generic low level function and should not be used directly

20
00:01:28,320 --> 00:01:29,790
by plugins or themes.

21
00:01:29,820 --> 00:01:33,690
Instead use the corresponding meta functions for the object type.

22
00:01:33,690 --> 00:01:38,340
You're working with as WordPress recommends we shouldn't use these functions.

23
00:01:38,340 --> 00:01:43,950
Instead we're going to use meta functions specifically made for custom post types.

24
00:01:43,950 --> 00:01:46,980
Now that we have an overview of things let's get started.

25
00:01:47,370 --> 00:01:51,750
I'm going to go to my wordpress admin dashboard and create a new recipe.

26
00:01:51,810 --> 00:01:54,410
I'm going to fill in some of these fields really quick.

27
00:01:54,450 --> 00:01:58,480
Feel free to follow along and fill in these fields with whatever values you like.

28
00:01:58,500 --> 00:02:01,410
We're not really worried about the values right now.

29
00:02:01,410 --> 00:02:05,150
I'm going to make a recipe for a cake for the content area.

30
00:02:05,160 --> 00:02:11,340
I'm going to use something called Lorem Ipsa lawn Epsom is a really handy tool that will help you generate

31
00:02:11,340 --> 00:02:12,320
content.

32
00:02:12,330 --> 00:02:16,770
I'm going to set this to two paragraphs and generate some content.

33
00:02:16,860 --> 00:02:24,030
Copy and paste this into the text editor this tool is really great because you won't have to type in

34
00:02:24,030 --> 00:02:29,160
gibberish or write actual content it'll generate dummy content for you.

35
00:02:29,190 --> 00:02:33,150
I'll provide a link to it in the resource section of this lecture.

36
00:02:33,150 --> 00:02:36,300
Next I'm going to add some tags and categories.

37
00:02:36,300 --> 00:02:38,700
These can be completely random as well.

38
00:02:41,180 --> 00:02:43,190
Don't submit this post just yet.

39
00:02:43,250 --> 00:02:45,510
The next step is to save the metadata.

40
00:02:45,530 --> 00:02:52,780
Along with this post once we have that code written out we'll submit those posts inside the index file.

41
00:02:52,790 --> 00:02:55,160
Let's add the action hook save post

42
00:02:58,190 --> 00:03:00,920
this hook is triggered when a post is saved.

43
00:03:00,920 --> 00:03:07,370
Of course we only want to use this hook if the post is a recipe post and the resource section of this

44
00:03:07,370 --> 00:03:11,040
lecture I provide a link to the Save post hook.

45
00:03:11,240 --> 00:03:17,370
WordPress talks more about this hook but we want to concern ourselves with this custom post type example.

46
00:03:17,510 --> 00:03:22,820
WordPress provides an example for how we should go about making sure we only save data for a specific

47
00:03:22,820 --> 00:03:26,210
post type rather than a generic post or random post type.

48
00:03:26,780 --> 00:03:33,590
However if you scroll down even further you'll find this note that says as of WP three point seven an

49
00:03:33,590 --> 00:03:40,160
alternative action has been introduced which is called for specific post types save underscore post

50
00:03:40,250 --> 00:03:42,980
underscore post type looking to this action.

51
00:03:42,980 --> 00:03:48,830
You wouldn't have to check on the post type in the sample above to make sure we only process recipe

52
00:03:48,830 --> 00:03:52,420
posts will add underscore recipe to the hook name.

53
00:03:52,430 --> 00:03:54,860
This is what's called a dynamic cook.

54
00:03:54,860 --> 00:03:59,510
Some hooks can be triggered for specific post types WordPress handles this for you.

55
00:03:59,870 --> 00:04:04,850
All you have to do is call the hook and then replace the dynamic part with your post type.

56
00:04:04,850 --> 00:04:09,450
Be sure to check the documentation to determine whether or not a hook is dynamic.

57
00:04:09,740 --> 00:04:13,590
Just like that this hook will only be triggered for recipe posts.

58
00:04:13,610 --> 00:04:21,150
The function we want to call is are save post admin for this part of the lecture.

59
00:04:21,150 --> 00:04:26,580
We're going to use the two extra parameters that are optional for the add action function.

60
00:04:26,610 --> 00:04:29,170
The third parameter is priority.

61
00:04:29,190 --> 00:04:34,650
There is a possibility that other plugins might use this hook and the order of execution is determined

62
00:04:34,650 --> 00:04:36,240
by this third parameter.

63
00:04:36,240 --> 00:04:42,200
If this is set to 1 then this function will fire first before all others if set to a high number.

64
00:04:42,240 --> 00:04:44,350
Then our function will fire last.

65
00:04:44,400 --> 00:04:46,270
The default priority is 10.

66
00:04:46,440 --> 00:04:48,630
We're going to leave this at 10.

67
00:04:48,630 --> 00:04:54,690
The fourth parameter is what we really want to set this parameter allows us to define how many arguments

68
00:04:54,690 --> 00:04:56,370
are set to the function.

69
00:04:56,370 --> 00:04:58,010
What does this actually mean.

70
00:04:58,020 --> 00:05:03,330
Well action hooks can provide our functions with extra information about the action currently happening.

71
00:05:03,330 --> 00:05:08,780
Not every action provides this but the save post hook does by default.

72
00:05:08,820 --> 00:05:10,780
This value is always 1.

73
00:05:10,890 --> 00:05:14,610
However the safe post provides 3 arguments.

74
00:05:14,610 --> 00:05:16,350
So set this to 3.

75
00:05:16,500 --> 00:05:22,500
The only way to find out if an action hook provides extra arguments is by checking the WordPress documentation.

76
00:05:22,860 --> 00:05:27,060
At this point I want you to create a folder called process.

77
00:05:27,150 --> 00:05:31,530
I like to create a folder for functions and classes that process data.

78
00:05:31,530 --> 00:05:36,950
This folder will contain all files related to updating deleting and creating data.

79
00:05:37,020 --> 00:05:40,000
Once again this is not required by WordPress.

80
00:05:40,020 --> 00:05:43,290
This is just the way I prefer to keep things organized.

81
00:05:43,290 --> 00:05:52,050
Create a file called Save dash post dot p p and define the function here make sure to include it from

82
00:05:52,050 --> 00:05:53,100
the index file

83
00:05:56,940 --> 00:05:59,540
this function will be provided three arguments.

84
00:05:59,550 --> 00:06:01,850
The first is the post I.D..

85
00:06:01,920 --> 00:06:05,970
The second is the post which contains info about the post itself.

86
00:06:05,970 --> 00:06:10,090
The third is update this variable is a boolean value.

87
00:06:10,110 --> 00:06:15,810
It will let you know whether this is a new post or an old one being updated inside the function.

88
00:06:15,810 --> 00:06:19,070
I'm going to create an array called recipe data.

89
00:06:19,080 --> 00:06:20,750
This will be set to the function.

90
00:06:20,760 --> 00:06:28,730
Get postmaster when it comes to metadata you will perform four types of operations.

91
00:06:28,760 --> 00:06:32,810
You can either add get update or delete data.

92
00:06:32,810 --> 00:06:38,450
The reason we're grabbing data is because this function will be called whether a new post is being created

93
00:06:38,510 --> 00:06:41,090
or a current one is being updated.

94
00:06:41,090 --> 00:06:44,960
In this case we're trying to grab metadata for a new post.

95
00:06:44,960 --> 00:06:50,170
However since the post doesn't exist then there shouldn't be any metadata for it.

96
00:06:50,210 --> 00:06:51,220
That's perfectly fine.

97
00:06:51,620 --> 00:06:56,270
If no metadata is found then this function will return an empty value.

98
00:06:56,270 --> 00:07:00,190
We'll use that to determine whether we should create it or updated.

99
00:07:00,200 --> 00:07:02,570
This function has three parameters.

100
00:07:02,570 --> 00:07:05,200
The first parameter is the idea for the post.

101
00:07:05,300 --> 00:07:11,270
I'm going to pass in the post ideas variable then we have to set the key.

102
00:07:11,270 --> 00:07:18,320
As you can imagine a post can have multiple pieces of metadata attached to it from various plugins because

103
00:07:18,320 --> 00:07:19,300
this is the case.

104
00:07:19,340 --> 00:07:25,680
WordPress allows you to give your metadata a unique key or name to identify it easily.

105
00:07:25,850 --> 00:07:30,770
You can name your key whatever you want but you usually want to keep it relative.

106
00:07:30,800 --> 00:07:35,210
We'll be calling our metadata recipe underscored data.

107
00:07:35,210 --> 00:07:40,400
Lastly we have to determine if we want an array returned or a single value.

108
00:07:40,400 --> 00:07:43,340
This third parameter can be true or false.

109
00:07:43,400 --> 00:07:48,740
If you set this to true then WordPress will return a single value by default.

110
00:07:48,740 --> 00:07:55,610
Metadata is stored in an array because multiple pieces of metadata can be attached to a post if you

111
00:07:55,610 --> 00:07:58,000
just want the value without the array.

112
00:07:58,040 --> 00:07:59,810
Then you should pass in an array.

113
00:08:00,170 --> 00:08:04,610
However keep in mind that you're not limited to just storing single values.

114
00:08:04,670 --> 00:08:10,440
If you don't want to create multiple metadata for a post then you can store the data in an array.

115
00:08:10,490 --> 00:08:14,570
If you set this to true WordPress will return that array.

116
00:08:14,750 --> 00:08:20,130
If you set this to false then WordPress will return an array within an array.

117
00:08:20,240 --> 00:08:24,230
It can be confusing I know but just go with me on this one.

118
00:08:24,260 --> 00:08:28,380
Ninety nine percent of the time you'll want this value to be true.

119
00:08:28,610 --> 00:08:31,220
Just like that we now have the metadata.

120
00:08:31,310 --> 00:08:37,460
I'm going to make one simple check by reassigning this variable using a ternary operator.

121
00:08:37,460 --> 00:08:44,920
I'm going to check if the variable is empty if it is then we know that this is a new post.

122
00:08:45,430 --> 00:08:49,510
If that's the case I'm going to set this variable to be an empty array.

123
00:08:49,660 --> 00:08:54,390
Otherwise I'll just let it be all right.

124
00:08:54,390 --> 00:08:57,340
The recipe data variable is ready.

125
00:08:57,360 --> 00:09:00,270
After this I'm going to start setting some keys.

126
00:09:00,270 --> 00:09:04,010
The goal is to store data related to rating the recipe.

127
00:09:04,020 --> 00:09:06,170
There are two things we'll need to store.

128
00:09:06,270 --> 00:09:10,520
We'll need the rating and how many times a recipe has been rated.

129
00:09:10,530 --> 00:09:15,680
I'm going to create a key called rating and set its value to a ternary operator.

130
00:09:19,720 --> 00:09:27,870
The condition will be checking if the rating key is already set if it is then I'm going to set it to

131
00:09:27,870 --> 00:09:31,840
itself while wrapping the function with the ABS into function.

132
00:09:31,950 --> 00:09:40,000
Otherwise the default will be zero I'm introducing the function abs and which is used for sanitizing

133
00:09:40,000 --> 00:09:46,540
the value in the resource section I provide a link to the WordPress data sanitation and escaping user

134
00:09:46,540 --> 00:09:47,680
data page.

135
00:09:47,680 --> 00:09:49,320
This is a very important page.

136
00:09:49,330 --> 00:09:56,140
You should read up on this page goes over the various functions for sanitizing user input a lot of great

137
00:09:56,140 --> 00:09:58,590
examples and explanations are detailed here.

138
00:09:58,660 --> 00:10:03,040
We will be using these functions throughout the course to stand as high as user input.

139
00:10:03,040 --> 00:10:06,920
For now we're only going to use the ABS in function.

140
00:10:06,970 --> 00:10:13,600
There's something I want to show you go back to your editor and navigate to the directory slash WP dash

141
00:10:13,660 --> 00:10:16,300
includes slash formatting Guppy HP

142
00:10:20,040 --> 00:10:25,860
this file contains a list of the sensitization functions for wordpress I highly recommend you look into

143
00:10:25,860 --> 00:10:28,900
this file to understand how most of these functions work.

144
00:10:29,040 --> 00:10:33,000
You can even borrow some of these functions for your own non WordPress projects.

145
00:10:33,030 --> 00:10:38,920
If you ever had trouble with sanitizing data let's go back to the Save post function.

146
00:10:38,910 --> 00:10:42,490
I'm going to create another key called rating count.

147
00:10:42,540 --> 00:10:46,050
This will have the same values as the rating key like so

148
00:10:53,730 --> 00:10:56,620
you should have something similar to what I have at this point.

149
00:10:56,670 --> 00:11:00,600
The last and final step is to attach the data to the post.

150
00:11:00,600 --> 00:11:04,200
WordPress provides a function called update post meta.

151
00:11:04,270 --> 00:11:09,130
There is another function called add post meta but we're not going to use it.

152
00:11:09,270 --> 00:11:13,670
The update version will actually check if this data already exists.

153
00:11:13,770 --> 00:11:16,350
If it doesn't then it'll create it for us.

154
00:11:16,410 --> 00:11:20,360
It's a kill two birds with one stone kind of scenario.

155
00:11:20,430 --> 00:11:24,410
I'll provide a link to this function in the resource section of this lecture.

156
00:11:24,450 --> 00:11:26,610
We're going to pass him three things.

157
00:11:26,610 --> 00:11:32,730
First is the post I.D. even though this is a new post WordPress we'll be smart enough to provide us

158
00:11:32,730 --> 00:11:34,750
with the post I.D. that will be use.

159
00:11:34,770 --> 00:11:38,340
So let's pass him the post I.D. variable.

160
00:11:38,460 --> 00:11:40,920
Next is the name for the metadata.

161
00:11:41,010 --> 00:11:43,820
There can be multiple metadata is for one post.

162
00:11:43,920 --> 00:11:46,620
It's important that we pass in a unique key.

163
00:11:46,710 --> 00:11:47,730
I'm going to name it.

164
00:11:47,730 --> 00:11:50,910
Recipe data.

165
00:11:51,020 --> 00:11:57,380
Lastly we pass in the value for our metadata it's that simple.

166
00:11:57,390 --> 00:12:05,650
Let's resubmit the data and the Post will now be sage the post should save successfully without any

167
00:12:05,650 --> 00:12:06,140
error.

168
00:12:06,340 --> 00:12:13,540
However how do we know if the metadata was St. will have to check the database to make sure open Heidi

169
00:12:13,630 --> 00:12:19,890
and connect to your database metadata is stored in a few tables for our particular case.

170
00:12:19,900 --> 00:12:25,030
This would be WP underscore Postmedia before we verify the data.

171
00:12:25,090 --> 00:12:28,910
I want you to notice that this pattern is repeated for a lot of tables.

172
00:12:29,080 --> 00:12:35,760
The actual content for the post is stored inside the WP posts table to find the metadata.

173
00:12:35,830 --> 00:12:39,060
You need to add the word admitted to the table name.

174
00:12:39,070 --> 00:12:43,930
This is true for the comments and comments Metta terms and terms meta.

175
00:12:43,930 --> 00:12:50,920
And lastly the users and users medal tables metadata can be applied to almost anything including your

176
00:12:50,920 --> 00:12:52,240
own custom tables.

177
00:12:52,240 --> 00:12:58,050
If you ever do decide to go that far then I recommend you follow WordPress his database design.

178
00:12:58,330 --> 00:13:02,280
Anyway let's move forward inside the posts table.

179
00:13:02,320 --> 00:13:05,220
I'm going to look for my newly created post.

180
00:13:05,260 --> 00:13:07,950
It should be the very last row in the database.

181
00:13:07,960 --> 00:13:13,720
The reason I'm looking for the post first is because we need the I.D. Now that we have the I.D..

182
00:13:13,870 --> 00:13:20,920
Let's look for the metadata in the posts met a table the post I.D. column will determine which metadata

183
00:13:20,950 --> 00:13:27,010
is connected to which post searching through this you should eventually find the metadata related to

184
00:13:27,010 --> 00:13:29,170
our newly created post.

185
00:13:29,260 --> 00:13:34,180
WordPress takes the time to add in its own metadata and that's perfectly fine.

186
00:13:34,180 --> 00:13:40,370
If you look long enough you'll eventually find the metadata with our key the key name is under the metal

187
00:13:40,390 --> 00:13:41,400
key column.

188
00:13:41,410 --> 00:13:45,750
The men of value column contains the actual key itself.

189
00:13:45,910 --> 00:13:48,230
The value here is a bit strange.

190
00:13:48,250 --> 00:13:54,850
WordPress does something called serialization for our values serialization is the process of converting

191
00:13:54,850 --> 00:13:59,500
a PDP object or array into a string that can be stored in a database.

192
00:13:59,680 --> 00:14:02,980
Objects and arrays can't be stored in a database.

193
00:14:03,010 --> 00:14:05,530
They have to be turned into strings.

194
00:14:05,530 --> 00:14:07,040
That's what's going on here.

195
00:14:07,060 --> 00:14:12,070
If you look around you'll see that some values aren't serialized and others are.

196
00:14:12,070 --> 00:14:17,620
If you're storing single values then they won't be serialized only objects and arrays are.

197
00:14:17,620 --> 00:14:22,420
We don't have to worry about this process as WordPress handles it for us.

198
00:14:22,420 --> 00:14:25,570
If you're using the meta functions then you should be fine.

199
00:14:25,570 --> 00:14:31,340
However if you make raw sequel queries then you will need to take care of this process yourself.

200
00:14:31,420 --> 00:14:32,080
All right.

201
00:14:32,080 --> 00:14:33,420
That should wrap things up.

202
00:14:33,430 --> 00:14:38,950
We have confirmed that the metadata has been saved and we can finally move on to displaying the rating.
