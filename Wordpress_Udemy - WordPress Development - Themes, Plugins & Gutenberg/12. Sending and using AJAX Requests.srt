1
00:00:07,770 --> 00:00:10,770
We'll be using a plug in called Jake Query rate it.

2
00:00:10,950 --> 00:00:14,950
I provide a link to this plug in in the resources section of this lecture.

3
00:00:15,000 --> 00:00:19,060
It'll create a simple rating UI that we can use in our plugin.

4
00:00:19,080 --> 00:00:24,340
I already included this plugin for you when you downloaded the assets for our project.

5
00:00:24,360 --> 00:00:30,030
All we have to do now is include you already know how to do this so why don't you pause this video and

6
00:00:30,030 --> 00:00:30,750
give it a try.

7
00:00:31,230 --> 00:00:34,680
This plugin can be found inside the assets folder.

8
00:00:34,860 --> 00:00:42,600
All you need to do is include the J query dot rate it dot men dot J.S. and write it top C Ss files

9
00:00:45,310 --> 00:00:46,950
if you haven't figured it out yet.

10
00:00:46,990 --> 00:00:48,290
Then let me show you.

11
00:00:48,400 --> 00:00:59,180
I'm going to use the WP and Qs scripts action hook and I'm going to call the function r and Q scripts.

12
00:00:59,380 --> 00:01:07,150
The next step is to create the file that will NQ R files create a file named NQ dot p p that will contain

13
00:01:07,150 --> 00:01:09,810
our function and include it from within the plugin file.

14
00:01:16,120 --> 00:01:21,050
Keep in mind that I created a folder named front and put the file in here.

15
00:01:21,160 --> 00:01:26,200
One last thing I want to do is set the priority to a high number such as 100.

16
00:01:26,200 --> 00:01:28,390
This here is a personal preference.

17
00:01:28,450 --> 00:01:33,840
Whenever I'm in queuing file from within a plugin file I like to load my assets last.

18
00:01:33,850 --> 00:01:38,570
This is because I believe theme should have a higher priority when it comes to loading JavaScript in

19
00:01:38,570 --> 00:01:40,040
C Ss files.

20
00:01:40,060 --> 00:01:44,920
I've had many problems in the past where my assets had conflicting issues with the theme because the

21
00:01:44,920 --> 00:01:47,240
theme files were being loaded too late.

22
00:01:47,290 --> 00:01:57,100
I've saved myself many headaches by having my plugins asset files loaded last.

23
00:01:57,210 --> 00:01:59,340
Now let's take a look at this function.

24
00:01:59,340 --> 00:02:03,720
I'm simply going to register and in queue my files.

25
00:02:03,740 --> 00:02:09,950
One thing I forgot to mention is that I'm also including a script named Main Doc J.S. This file can

26
00:02:09,950 --> 00:02:13,380
be found inside the assets slash J.S. folder.

27
00:02:13,700 --> 00:02:15,810
Open this file.

28
00:02:15,980 --> 00:02:19,630
It's just basic J query code which we will be editing soon.

29
00:02:19,730 --> 00:02:21,230
Back to the NQ function.

30
00:02:21,260 --> 00:02:23,960
I'm doing one last thing which is making sure that J.

31
00:02:23,960 --> 00:02:27,050
Query is being loaded before our files are loaded.

32
00:02:27,050 --> 00:02:32,750
This should set everything up and we can now begin using the plug it in the resource section I provide

33
00:02:32,750 --> 00:02:36,260
a link to the Ajax in plugins Codex page.

34
00:02:36,260 --> 00:02:42,900
This page goes over how to use ajax and plugins using Ajax on the front end requires a little work.

35
00:02:42,920 --> 00:02:49,280
The first thing we need to do is prepare the data open the recipe template file as you can see the rating

36
00:02:49,310 --> 00:02:51,880
is placed right after the rating text.

37
00:02:51,920 --> 00:02:55,590
We created this div with the class ratings.

38
00:02:55,610 --> 00:02:59,660
I also gave it an idea called recipe underscore rating.

39
00:02:59,780 --> 00:03:01,540
We'll need this as a reference.

40
00:03:01,550 --> 00:03:08,340
I also added this attribute called Data dash rate it Dash reset of all and set its value to false.

41
00:03:08,480 --> 00:03:13,040
This plugin will generate a button that will allow the user to reset the rating.

42
00:03:13,100 --> 00:03:15,890
We don't want this by setting it to false.

43
00:03:15,890 --> 00:03:19,400
This will prevent the user from resetting the rating.

44
00:03:19,430 --> 00:03:25,340
All this information can be found on the documentation page of the plugin the last attribute I created

45
00:03:25,370 --> 00:03:27,740
is called data dash or I.D..

46
00:03:28,100 --> 00:03:32,360
This will contain the idea of the current post taking a close look.

47
00:03:32,390 --> 00:03:36,650
You'll notice I made this into a place holder inside the filter function.

48
00:03:36,650 --> 00:03:39,140
Let's add another modification.

49
00:03:39,140 --> 00:03:43,940
All you need to do is search for this place holder and replace it with the idea of this post

50
00:03:51,710 --> 00:03:53,390
let's test this really quick.

51
00:03:53,420 --> 00:03:57,080
You should see 5 stars and be able to write this recipe.

52
00:03:57,080 --> 00:04:02,000
This works almost perfect as you can see you're able to change your rating.

53
00:04:02,060 --> 00:04:03,480
We don't want this.

54
00:04:03,500 --> 00:04:07,060
We want the rating to be set after the user has done so.

55
00:04:07,190 --> 00:04:10,360
We'll do this inside the javascript main file.

56
00:04:10,400 --> 00:04:21,480
I'm going to select the div by its I.D. and then I'm going to bind an event called rated.

57
00:04:21,730 --> 00:04:25,930
This has been just called when the user writes a recipe inside the function.

58
00:04:25,930 --> 00:04:29,450
We can use the this object to reference the div.

59
00:04:29,650 --> 00:04:38,690
I'm going to select the div again and call the rate at method this method allows us to change the properties.

60
00:04:38,730 --> 00:04:42,660
I'm going to change the read only property to True.

61
00:04:42,660 --> 00:04:46,950
This will prevent the user from changing their rating after reading a recipe.

62
00:04:46,950 --> 00:04:50,670
The next step is to create an object called form.

63
00:04:50,670 --> 00:04:54,320
We're going to send this object when we make an ajax request.

64
00:04:54,330 --> 00:04:58,770
There's only one property we must define which is the action property.

65
00:04:58,770 --> 00:05:04,400
WordPress will use this to determine what function to execute when it receives an ajax request.

66
00:05:04,500 --> 00:05:07,860
You'll see exactly how this works in just a moment.

67
00:05:07,920 --> 00:05:10,230
I'm going to set this to r rate.

68
00:05:10,230 --> 00:05:13,580
Recipe next.

69
00:05:13,620 --> 00:05:18,900
I'm going to create a r ideas property and set its value to the R ideas attribute

70
00:05:22,810 --> 00:05:27,500
the last property you want to define is the rating itself to grab the rating.

71
00:05:27,550 --> 00:05:30,770
We can use the rate it method and pass in value.

72
00:05:30,820 --> 00:05:32,140
This will return the rating

73
00:05:35,510 --> 00:05:39,860
I want to test this out now refresh the page and try rating the recipe.

74
00:05:39,860 --> 00:05:43,700
You should not be able to rate this recipe after rating at once.

75
00:05:43,700 --> 00:05:49,150
The next step is to send an ajax request with all our info so the rating can be saved.

76
00:05:49,190 --> 00:05:53,970
The WordPress admin provides a variable for the Ajax you are out on the front end.

77
00:05:53,990 --> 00:05:55,190
We're not so lucky.

78
00:05:55,280 --> 00:05:57,600
We have to generate the euro ourselves.

79
00:05:57,770 --> 00:06:01,190
It's pretty easy though inside the NQ function.

80
00:06:01,220 --> 00:06:04,720
We're going to use a function called WP localize scripts.

81
00:06:08,940 --> 00:06:13,780
This function is used for providing translated strings to your javascript files.

82
00:06:13,800 --> 00:06:20,160
Despite this WordPress recommends you use this function for also providing a you URL to its Ajax page

83
00:06:20,160 --> 00:06:21,050
handler.

84
00:06:21,330 --> 00:06:28,270
The first parameter is which file will be receiving the translations slash you or else set this to our

85
00:06:28,290 --> 00:06:28,770
main.

86
00:06:28,770 --> 00:06:32,500
Since this is the file that we're using to send Ajax requests.

87
00:06:32,550 --> 00:06:36,770
Next up is the name of the object we can use for referencing the values.

88
00:06:36,930 --> 00:06:39,900
I'm going to set this to recipe LBJ.

89
00:06:40,020 --> 00:06:42,570
The last parameter is an array of values.

90
00:06:42,570 --> 00:06:49,900
We only need to create one value and that is the Ajax you are out you can name this whatever you want.

91
00:06:49,900 --> 00:06:55,720
By the way the value of this key will be the euro returned by the ad menu URL function

92
00:06:59,090 --> 00:07:05,130
this function has one optional parameter which is the path relative to the WordPress admin you are.

93
00:07:05,330 --> 00:07:11,300
I'm going to pass an admin dash Ajax stop BHP.

94
00:07:11,440 --> 00:07:15,960
This is the path that should always handle your Ajax requests.

95
00:07:16,060 --> 00:07:22,340
If we take a look at our folder structure you can find this file inside the WP dash admin folder.

96
00:07:22,390 --> 00:07:30,430
Now we can send in Ajax request using J queries post method we'll send an ajax request to the URL we

97
00:07:30,430 --> 00:07:31,080
generated.

98
00:07:34,840 --> 00:07:41,350
Remember the recipe Obi J is the name we used in the second parameter of the localize function.

99
00:07:41,350 --> 00:07:49,370
This object will contain all our res value the property we want to access is the Ajax you are all property.

100
00:07:49,510 --> 00:07:55,220
Next we want to send the form object and then we'll create the function that will handle the response.

101
00:07:55,360 --> 00:07:59,730
The data argument is a variable that will contain the response body.

102
00:07:59,800 --> 00:08:05,560
The last thing we need to do is to tell WordPress about this Ajax request so we can handle it properly

103
00:08:06,190 --> 00:08:07,550
from the plugin file.

104
00:08:07,570 --> 00:08:10,900
We're going to use an action hook called WP Ajax

105
00:08:16,930 --> 00:08:19,930
let's take a look at this hook by viewing its Codex page.

106
00:08:19,930 --> 00:08:23,940
I provide a link to this in the resource section of this lecture.

107
00:08:23,980 --> 00:08:28,250
This book starts with WP Ajax followed by the name of the action.

108
00:08:28,330 --> 00:08:36,130
This was set in the form object the action hook should be called WP underscore Ajax underscore our underscore

109
00:08:36,130 --> 00:08:43,310
rate underscore recipe the name of the function we want to execute is our rate.

110
00:08:43,310 --> 00:08:48,010
Recipe you can name this whatever you want.

111
00:08:48,080 --> 00:08:50,500
You don't have to name it after the action.

112
00:08:50,570 --> 00:08:54,010
I just do it like this because it makes things easier to manage.

113
00:08:54,230 --> 00:08:54,890
All right.

114
00:08:55,010 --> 00:09:01,760
Now create a file inside the process folder called rape dash recipe dot P. HB and define the function

115
00:09:01,760 --> 00:09:02,540
here.

116
00:09:02,570 --> 00:09:04,690
Make sure to include it from the plugin file.

117
00:09:12,090 --> 00:09:19,810
Inside the function I'm going to output the post data let's try using our rating system now.

118
00:09:20,010 --> 00:09:26,700
There's one problem which is how do we know if our data is being sent and how do we check the data.

119
00:09:26,700 --> 00:09:32,520
This can be done by using Chrome developer tools press F 12 on your keyboard and you should see this

120
00:09:32,520 --> 00:09:35,040
pop up in previous lectures.

121
00:09:35,040 --> 00:09:39,450
We briefly went over how the elements and console taps work.

122
00:09:39,450 --> 00:09:46,680
Now we'll be discussing how the network tab works the network tab tracks of what files are loaded and

123
00:09:46,680 --> 00:09:49,070
how long it takes to load those files.

124
00:09:49,080 --> 00:09:54,060
It also provides information about the request and responses for the most part.

125
00:09:54,090 --> 00:09:57,240
I don't usually concern myself with all this information.

126
00:09:57,240 --> 00:10:02,070
The best part about this section of the developer tools is that you can filter those requests since

127
00:10:02,070 --> 00:10:04,810
a web page can make dozens of requests.

128
00:10:04,830 --> 00:10:10,830
I'm going to filter it by x H R which stands for X amount H GDP requests.

129
00:10:10,830 --> 00:10:14,250
This is where Ajax requests are being displayed.

130
00:10:14,250 --> 00:10:19,320
With this being displayed I'm going to rate the recipe after reading the recipe you should see a new

131
00:10:19,320 --> 00:10:23,480
request being sent to add Min dash Ajax dot P HP.

132
00:10:23,550 --> 00:10:27,610
Click on this request and you will see some data being output it to the right.

133
00:10:27,960 --> 00:10:34,830
It's categorized into five sections the headers tab tells us about the header information inside this

134
00:10:34,830 --> 00:10:35,260
tab.

135
00:10:35,310 --> 00:10:37,320
It's split into more sections.

136
00:10:37,320 --> 00:10:43,410
The general section provides information about the request in general the response headers provides

137
00:10:43,440 --> 00:10:45,200
information about the server itself.

138
00:10:45,210 --> 00:10:52,560
When it replied to our request the request headers provides information about our own request the form

139
00:10:52,590 --> 00:10:55,410
data is what we want to see specifically.

140
00:10:55,410 --> 00:11:00,690
You'll notice our data being sent so we can now confirm that our request is indeed being sent.

141
00:11:00,690 --> 00:11:03,470
With the data we provided next.

142
00:11:03,510 --> 00:11:09,780
I want to check if the server is receiving this data properly under the preview or response tab.

143
00:11:09,780 --> 00:11:12,660
We'll be able to check out the server's response.

144
00:11:12,660 --> 00:11:15,600
We see our data being output it with p p.

145
00:11:15,690 --> 00:11:21,450
Not only have we confirmed that our data is being sent but the correct function is being executed when

146
00:11:21,450 --> 00:11:24,460
our data is received before I move on.

147
00:11:24,480 --> 00:11:30,150
There's one thing I want to highlight the difference between the preview and response tab is that the

148
00:11:30,150 --> 00:11:35,280
preview tab will display the response as if the response was rendered by a browser.

149
00:11:35,490 --> 00:11:40,640
So any stylings applied to the responses page will be applied to this little preview.

150
00:11:40,800 --> 00:11:46,130
The response tab will show the response completely raw and or plain text.

151
00:11:46,130 --> 00:11:51,720
There is one last thing I want to do before we move on to processing the rating back inside the main

152
00:11:51,720 --> 00:11:52,680
plugin file.

153
00:11:52,830 --> 00:11:58,500
I'm going to copy the Ajax hook again and paste it below.

154
00:11:58,670 --> 00:12:02,690
I'm going to change WP Ajax to WP Ajax.

155
00:12:02,690 --> 00:12:11,410
No prev the difference between these two is that they know print version will also process Ajax requests

156
00:12:11,410 --> 00:12:13,510
from users who are not logged in.

157
00:12:13,600 --> 00:12:16,400
No crib stands for no privileges.

158
00:12:16,450 --> 00:12:20,380
We want our guests to be able to read our recipes as well.

159
00:12:20,380 --> 00:12:26,260
This step is optional and is up to you whether you believe guests should be able to make Ajax requests.

160
00:12:26,260 --> 00:12:31,180
You don't have to worry about both of these being triggered as WordPress is smart enough to tell which

161
00:12:31,180 --> 00:12:37,090
one to use depending on the user and the next lecture will begin processing the data and save it.
