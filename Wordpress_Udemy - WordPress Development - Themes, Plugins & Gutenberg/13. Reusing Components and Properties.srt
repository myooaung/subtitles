1
00:00:07,500 --> 00:00:11,830
In this lecture I want to explore how you would go about reusing components.

2
00:00:11,910 --> 00:00:14,900
Right now we're only displaying one person.

3
00:00:14,910 --> 00:00:16,680
The process is quite simple.

4
00:00:16,680 --> 00:00:21,950
First we're going to create some JSC sex that will contain the overall application.

5
00:00:21,990 --> 00:00:27,330
Then we'll simply call the person element multiple times inside that element.

6
00:00:27,330 --> 00:00:30,420
Let me show you what I mean right below the function.

7
00:00:30,450 --> 00:00:38,310
I'm going to create a constant named app the value for this will be ASX.

8
00:00:38,320 --> 00:00:39,350
It will be multi line.

9
00:00:39,350 --> 00:00:45,530
So I'm going to add in my parentheses inside this I'm going to call it the person component twice

10
00:00:50,570 --> 00:00:51,160
once again.

11
00:00:51,170 --> 00:00:53,240
You can't call this as a function.

12
00:00:53,240 --> 00:00:55,430
It must be called as an element.

13
00:00:55,430 --> 00:01:04,010
Then I'm going to replace the person component inside the render function with the app variable at this

14
00:01:04,010 --> 00:01:04,450
point.

15
00:01:04,460 --> 00:01:10,680
You may be thinking What is the difference between storing JSA X inside the variable and inside a function.

16
00:01:10,730 --> 00:01:16,250
Well I'll show you in just a moment but just keep going with me here inside the command line run the

17
00:01:16,250 --> 00:01:24,360
commands NPM start right after running this command you'll receive an error the error is telling us

18
00:01:24,390 --> 00:01:27,160
we can't have two elements on the same level.

19
00:01:27,360 --> 00:01:33,720
This is another rule with ASX you can have as many elements as you'd like but you can only have one

20
00:01:33,720 --> 00:01:36,040
route element to fix this.

21
00:01:36,060 --> 00:01:39,570
We'll have to wrap our person components with some div tags

22
00:01:44,810 --> 00:01:46,390
let's try running the command again

23
00:01:50,800 --> 00:01:52,970
everything should run smoothly this time.

24
00:01:52,990 --> 00:01:56,240
This is a common pitfall beginner developers fall into.

25
00:01:56,380 --> 00:01:59,500
Always make sure you only have one root element.

26
00:01:59,500 --> 00:02:04,220
There are ways to get around this rule but we'll explore that later in this course.

27
00:02:04,240 --> 00:02:06,250
Go to your browser and view the page.

28
00:02:06,370 --> 00:02:09,600
You should see two people being displayed on the page.

29
00:02:09,610 --> 00:02:10,600
This is great.

30
00:02:10,630 --> 00:02:13,270
We now have a reusable component.

31
00:02:13,420 --> 00:02:17,130
The next step is to make the data dynamic back inside our script.

32
00:02:17,170 --> 00:02:21,010
You'll see that we're using the person to function as an element.

33
00:02:21,010 --> 00:02:26,440
We just can't pass it in data since we're not calling this function in the traditional manner.

34
00:02:26,500 --> 00:02:31,470
So how do we pass in data react has something called properties.

35
00:02:31,510 --> 00:02:38,150
Properties are exactly what they sound like they're the data or attributes attached to an element with

36
00:02:38,190 --> 00:02:45,430
J.S. X. We're allowed to create custom attributes that will hold our data inside the person elements.

37
00:02:45,430 --> 00:02:54,200
I'm going to create two attributes called name and age.

38
00:02:54,220 --> 00:03:00,190
This is how you can pass a values onto the component function above the ground these values will have

39
00:03:00,190 --> 00:03:02,320
to update the person function.

40
00:03:02,440 --> 00:03:07,090
All attributes and values are stored inside an object called properties.

41
00:03:07,090 --> 00:03:11,290
It's common practice to call this prompts but you can name it whatever you want.

42
00:03:11,320 --> 00:03:14,380
For now we'll stick with this naming convention.

43
00:03:14,380 --> 00:03:18,830
This object will contain all the values we passed in as attributes.

44
00:03:18,850 --> 00:03:22,450
I'm going to replace the name with a pair of curly brackets.

45
00:03:22,450 --> 00:03:24,460
This is important to note down.

46
00:03:24,640 --> 00:03:30,460
If you want to have dynamic JavaScript in your JSA X then you need to surround it with curly brackets

47
00:03:31,210 --> 00:03:32,800
inside these curly brackets.

48
00:03:32,800 --> 00:03:40,880
I'm going to use the props object and access the attribute name the name of the attribute will be the

49
00:03:40,880 --> 00:03:42,220
name of the property.

50
00:03:42,260 --> 00:03:50,060
I will now do this for the age just like that we're now accessing the data dynamically.

51
00:03:50,060 --> 00:03:52,730
Let's see if this works inside the command line.

52
00:03:52,730 --> 00:03:56,960
Run the command NPM start.

53
00:03:57,190 --> 00:03:59,590
You shouldn't receive any errors at this point.

54
00:03:59,650 --> 00:04:01,750
Go ahead and refresh the page.

55
00:04:01,750 --> 00:04:04,840
The list of people should be displaying just like that.

56
00:04:04,870 --> 00:04:07,960
We've created our first complete application.

57
00:04:08,410 --> 00:04:11,470
Admittedly it isn't anything spectacular.

58
00:04:11,470 --> 00:04:15,360
However this should be enough to get you comfortable with Gutenberg.

59
00:04:15,460 --> 00:04:20,700
The Gutenberg development team have already taken care of the more difficult parts of the editor.

60
00:04:20,800 --> 00:04:24,700
All you have to do is load in the right files and use the right functions.

61
00:04:24,700 --> 00:04:29,480
I also want to remind you that you don't have to be a master of react.

62
00:04:29,500 --> 00:04:34,370
The only things you really need to know are JSA x components and properties.

63
00:04:34,510 --> 00:04:38,530
If you have a basic understanding of those things then you should be fine.

64
00:04:38,570 --> 00:04:43,710
I'll be sure to point out any other react features I may have missed if they arise in the next section.
