WEBVTT
1
00:00:07.690 --> 00:00:11.980
Let's take a look at how to add styles and scripts through our hook.

2
00:00:11.980 --> 00:00:13.320
It's pretty straightforward.

3
00:00:13.330 --> 00:00:17.350
There are only two steps required to add styles to our pages.

4
00:00:17.350 --> 00:00:22.750
The first step is to register the style registering style simply means that you're telling WordPress

5
00:00:22.750 --> 00:00:27.640
that you have a style sheet and you would like WordPress to know its location along with other details

6
00:00:28.060 --> 00:00:30.220
in the resource section on this lecture.

7
00:00:30.220 --> 00:00:35.920
I'll provide a link to learn all about registering styles in order to register a style.

8
00:00:36.010 --> 00:00:42.910
We need to use the WP register style function under the notes section you'll see we're using this function

9
00:00:42.910 --> 00:00:47.190
correctly because it says use the WP and scripts.

10
00:00:47.200 --> 00:00:48.980
Action to call this function.

11
00:00:49.030 --> 00:00:54.040
Calling it outside of an action can lead to problems since we're already doing that.

12
00:00:54.040 --> 00:00:56.680
It's safe to assume we can use this function.

13
00:00:56.710 --> 00:00:59.770
This function has two required parameters.

14
00:00:59.770 --> 00:01:05.710
The first parameter is the handle name the handle name can be thought of as a unique name or I.D. for

15
00:01:05.710 --> 00:01:06.640
reference.

16
00:01:06.700 --> 00:01:10.160
The second parameter is the source to the style sheet.

17
00:01:10.210 --> 00:01:17.080
Let's go back to the NQ function and call the WP register style function.

18
00:01:17.090 --> 00:01:20.320
Now we have to pass in a handle for the first parameter.

19
00:01:20.660 --> 00:01:26.450
If we go back to the index template you'll see we have quite a few style sheets being loaded.

20
00:01:26.450 --> 00:01:30.730
The first style sheet is a Google font so let's call this handle.

21
00:01:30.730 --> 00:01:35.790
J You google fonts just like functions.

22
00:01:35.800 --> 00:01:41.110
It's also common practice to prefix our handles with some initials for the second parameter.

23
00:01:41.110 --> 00:01:42.580
Let's pass in the you URL

24
00:01:49.990 --> 00:01:56.480
we're loading this font from a CDO n so we can just paste the URL like so as a string.

25
00:01:56.490 --> 00:01:59.280
Next up is the bootstrap that CFS file.

26
00:01:59.790 --> 00:02:04.870
You'll need to call the WP register style function again just like before.

27
00:02:04.890 --> 00:02:07.400
I'm going to use the same naming convention.

28
00:02:07.440 --> 00:02:09.780
The name will be j you bootstrap

29
00:02:12.510 --> 00:02:13.650
unlike the fonts.

30
00:02:13.680 --> 00:02:16.860
This file is located within our theme directory.

31
00:02:16.860 --> 00:02:20.760
We'll use WordPress to help us generate a user Rel to this file.

32
00:02:20.760 --> 00:02:25.200
There's actually a function that will always point to the current theme directory.

33
00:02:25.200 --> 00:02:30.990
This makes it easier on us as we don't have to perform checks if the owner of the site changed the name

34
00:02:31.080 --> 00:02:34.620
of the theme directory right at the top of this function.

35
00:02:34.620 --> 00:02:39.420
I'm going to create a variable named you are I and set its value to the function.

36
00:02:39.420 --> 00:02:47.270
Get the file you are right you do not have to pass in anything and you don't have to include any files

37
00:02:47.270 --> 00:02:49.000
to get this function to work.

38
00:02:49.010 --> 00:02:52.910
This function is loaded and defined for you by WordPress.

39
00:02:52.910 --> 00:02:57.920
You may notice this function has a similar name to the get the file path function.

40
00:02:57.920 --> 00:03:02.290
The difference between these two functions is the you arrive version will actually get the Web.

41
00:03:02.290 --> 00:03:08.290
You are out the non you arrive version gets the system path with this variable set.

42
00:03:08.300 --> 00:03:11.570
I'm going to pass it into the function right after this.

43
00:03:11.570 --> 00:03:18.860
I'm going to append the path relative to our theme folder which is slash assets slash C Ss slash bootstrap

44
00:03:18.860 --> 00:03:24.740
dot CSX the first two parameters are required.

45
00:03:24.840 --> 00:03:29.060
These next three are optional but the last two aren't used as often.

46
00:03:29.250 --> 00:03:31.820
The third parameter is what's most important.

47
00:03:31.860 --> 00:03:38.340
The third parameter is an array of dependencies sometimes your styles may depend on another style sheet

48
00:03:38.340 --> 00:03:39.180
to load.

49
00:03:39.300 --> 00:03:44.400
You simply pass in an array of panel names and WordPress will take care of loading those style sheets

50
00:03:44.400 --> 00:03:45.430
before this one.

51
00:03:45.660 --> 00:03:50.560
If WordPress doesn't find a style sheet then this style sheet will not be loaded.

52
00:03:50.580 --> 00:03:56.220
For example if I wanted the Google font to load before the style sheet then I could pass in the handle

53
00:03:56.220 --> 00:04:02.950
name like so I'm not too worried about dependencies so we can leave this out now that we have that finished.

54
00:04:02.970 --> 00:04:05.560
I'm going to register the rest of the styles.

55
00:04:05.640 --> 00:04:06.840
It's the same as before

56
00:04:09.700 --> 00:04:10.620
positive video.

57
00:04:10.630 --> 00:04:16.660
If you need to have what I have if we refresh the page you'll notice that this won't work just yet.

58
00:04:16.660 --> 00:04:19.230
We've only registered our styles.

59
00:04:19.300 --> 00:04:23.540
Now we must tell WordPress we would like to add it to our page.

60
00:04:23.560 --> 00:04:27.970
We now have to use a function called WP and Qs style.

61
00:04:27.970 --> 00:04:32.650
I've also included a link to this function in the resource section of this lecture.

62
00:04:32.650 --> 00:04:38.520
This function only has one required parameter which is the handle name of the style we registered earlier.

63
00:04:38.980 --> 00:04:44.420
You'll notice the other parameters are similar to the WP register style function.

64
00:04:44.500 --> 00:04:49.660
However these are only available just in case you forget to register a style.

65
00:04:49.750 --> 00:04:55.540
You should always register a style though the difference between registering and queuing a file is that

66
00:04:55.540 --> 00:05:01.150
registering will tell WordPress about a style sheet and make it available to be called later on while

67
00:05:01.210 --> 00:05:07.150
in queuing will instruct WordPress to load our style sheet onto the page right away.

68
00:05:07.150 --> 00:05:12.030
You will not always want to in queue a style on every page as it is inefficient.

69
00:05:12.040 --> 00:05:17.680
There's also plugins out there that will sometimes scan registered sales and perform actions such as

70
00:05:17.680 --> 00:05:25.630
modifying and concatenated style sheets together so it's best to register first then NQ lets NQ the

71
00:05:25.630 --> 00:05:32.850
font style sheet right after the register functions call the function WP NQ style and pass in the handle

72
00:05:32.860 --> 00:05:34.940
name J you Google fonts.

73
00:05:35.140 --> 00:05:37.210
Let's do this for all the style sheets.

74
00:05:48.010 --> 00:05:49.620
All right we're almost done.

75
00:05:49.620 --> 00:05:50.610
I promise.

76
00:05:50.710 --> 00:05:54.660
There's only one last thing we need to do in order for all this to work.

77
00:05:54.660 --> 00:06:00.180
If we go back to the index template you'll notice we haven't told WordPress where to load our style

78
00:06:00.180 --> 00:06:01.020
sheets.

79
00:06:01.290 --> 00:06:03.770
Our template is pure HCM out.

80
00:06:03.780 --> 00:06:09.270
WordPress doesn't magically scan our files and insert everything in the appropriate place.

81
00:06:09.300 --> 00:06:12.240
We have to tell WordPress where to load our files.

82
00:06:12.240 --> 00:06:13.700
So let's do that.

83
00:06:13.770 --> 00:06:16.410
Go to the head section of the template.

84
00:06:16.530 --> 00:06:25.260
We are going to replace the style sheets and call the function WP head the WP head function is a function

85
00:06:25.260 --> 00:06:26.850
defined by WordPress.

86
00:06:26.850 --> 00:06:31.670
This function simply tells WordPress that this is the spot where themes and plugins can.

87
00:06:31.670 --> 00:06:34.740
In queue their style sheet and script files.

88
00:06:34.740 --> 00:06:37.440
Let's refresh the page and we should see it working.

89
00:06:37.560 --> 00:06:40.860
If you see something similar to what I see then you're good to go.

90
00:06:41.670 --> 00:06:44.550
Let's double check some things and open the console.

91
00:06:44.550 --> 00:06:48.210
You'll notice we get a lot of errors but we'll fix these soon.

92
00:06:48.240 --> 00:06:52.830
What I want you to look for is any forum for errors related to style sheets.

93
00:06:52.830 --> 00:06:56.750
If you don't see any then that means you loaded everything correctly.

94
00:06:56.880 --> 00:07:02.660
We can now begin adding scripts adding a script file is almost the same as adding a style sheet.

95
00:07:03.180 --> 00:07:09.360
However unlike style sheets we can load scripts files in the footer If we take a look at the template

96
00:07:09.540 --> 00:07:12.820
we have all our scripts being loaded into the footer.

97
00:07:13.170 --> 00:07:16.110
Just like adding files inside the head tag.

98
00:07:16.200 --> 00:07:22.140
We also have to call a function from the footer to instruct WordPress where to load files in the footer.

99
00:07:22.140 --> 00:07:28.320
At the very bottom of the template right before the closing body tag call the WP footer function

100
00:07:33.500 --> 00:07:38.810
this function allows our theme and other plugins to load their files into the footer.

101
00:07:38.810 --> 00:07:45.560
All right now that we have that setup let's go to the NQ function and start adding our scripts just

102
00:07:45.560 --> 00:07:46.700
like style sheets.

103
00:07:46.700 --> 00:07:51.180
We have to register our scripts in the resource section of this lecture.

104
00:07:51.260 --> 00:07:54.860
I provide a link to the WP registry script function.

105
00:07:54.950 --> 00:07:58.700
Let's take a look at what WordPress has to say about this function.

106
00:07:58.850 --> 00:08:05.090
As you can see only the first two parameters are required and they're basically similar to the WP register

107
00:08:05.090 --> 00:08:08.620
style function back inside the index template.

108
00:08:08.660 --> 00:08:10.780
We include a script called plugins.

109
00:08:10.940 --> 00:08:14.670
Let's add this script to the footer through the NQ function.

110
00:08:14.810 --> 00:08:21.230
Let's call the WP register script function and pass a handle handling the handler name will be j you

111
00:08:21.240 --> 00:08:24.240
plugins.

112
00:08:24.390 --> 00:08:30.140
I don't have to worry about name conflicts here because style sheets and scripts are stored separately.

113
00:08:30.210 --> 00:08:32.430
The second parameter is the source.

114
00:08:32.460 --> 00:08:33.860
It's the same as last time.

115
00:08:34.080 --> 00:08:41.550
You just use the you arrive variable and append the path the path would be slash assets slash J.S. slash

116
00:08:41.550 --> 00:08:42.790
plugins Doc J.S.

117
00:08:45.580 --> 00:08:51.850
now in most cases you always want to load your scripts in the footer to allow our content to be loaded

118
00:08:51.850 --> 00:08:53.410
before our scripts.

119
00:08:53.410 --> 00:08:56.440
So how do we make our scripts load in the footer.

120
00:08:56.440 --> 00:08:59.740
Let's go back to the documentation and look at the WP.

121
00:08:59.740 --> 00:09:01.700
Read your script function again.

122
00:09:01.870 --> 00:09:06.950
You'll notice that the fifth parameter determines whether or not a script is loaded in the footer.

123
00:09:07.060 --> 00:09:08.650
By default it doesn't.

124
00:09:08.650 --> 00:09:14.970
We have to pass in a true boolean value so that we can load the script inside the footer.

125
00:09:14.990 --> 00:09:17.720
Let's go back to the function and start using this.

126
00:09:17.870 --> 00:09:21.500
The third parameter is this scripts dependencies.

127
00:09:21.500 --> 00:09:26.290
In some cases your scripts will depend on the functionality of another script.

128
00:09:26.330 --> 00:09:31.310
You have to pass in an array of handle needs for wordpress to make sure those scripts are loaded first

129
00:09:31.310 --> 00:09:32.550
before this one.

130
00:09:32.720 --> 00:09:38.580
In our case we don't have to worry about dependencies so we'll just passing an empty array.

131
00:09:38.630 --> 00:09:41.650
The fourth parameter is the version of the script.

132
00:09:41.660 --> 00:09:46.520
If you update your script frequently this can be a useful parameter to set.

133
00:09:46.520 --> 00:09:52.850
This is because a lot of WordPress sites have cache enabled by updating the version you'll force WordPress

134
00:09:52.850 --> 00:09:55.700
to load the latest version of this script.

135
00:09:55.700 --> 00:10:00.950
I'm going to set this to false as I don't really need to worry about versioning for this script.

136
00:10:00.950 --> 00:10:05.690
The whole point of this part of the lecture is to load the script into the footer which is the fifth

137
00:10:05.720 --> 00:10:07.330
and final parameter.

138
00:10:07.340 --> 00:10:10.130
All you have to do is pass in true.

139
00:10:10.130 --> 00:10:10.930
That's it.

140
00:10:10.950 --> 00:10:16.940
Let's include the plugins file using the WP and Qs script function and see if it loads on the page

141
00:10:24.130 --> 00:10:27.000
you'll notice that WordPress also loads its top.

142
00:10:27.010 --> 00:10:31.180
Now bar for users who are logged in after confirming them it loads.

143
00:10:31.210 --> 00:10:34.560
Why don't you pause the video and load the rest of the scripts.

144
00:10:34.570 --> 00:10:38.050
Be sure to remove these script tags after you include them.

145
00:10:41.120 --> 00:10:41.740
All right.

146
00:10:41.860 --> 00:10:44.610
So I basically just registered and in queue.

147
00:10:44.620 --> 00:10:50.140
The rest of our scripts you'll notice that I also remove their inclusions from the footer.

148
00:10:50.140 --> 00:10:54.960
If I refresh the page you'll see that everything is loaded correctly except for one thing.

149
00:10:55.120 --> 00:10:56.280
J query.

150
00:10:56.500 --> 00:11:02.770
We also get a couple of errors inside the console saying that J query isn't loaded or defined in the

151
00:11:02.770 --> 00:11:03.700
NQ file.

152
00:11:03.760 --> 00:11:07.490
I didn't bother registering or even queuing it but why.

153
00:11:07.600 --> 00:11:11.800
Let's go back to the WordPress documentation and take a look at the WP.

154
00:11:11.800 --> 00:11:15.450
Register a script function on the contents sidebar.

155
00:11:15.490 --> 00:11:18.820
I want you to click core registered scripts.

156
00:11:18.820 --> 00:11:23.890
You'll be taken to a part of the page that tells you that WordPress registers a number of scripts that

157
00:11:23.890 --> 00:11:30.940
are commonly used by developers WordPress automatically registers a large number of scripts libraries

158
00:11:31.060 --> 00:11:33.280
like J query UI and underscore.

159
00:11:33.970 --> 00:11:40.570
If we scroll down long enough you'll find J query so all we have to do is in queue this script before

160
00:11:40.600 --> 00:11:42.190
and cueing anything else.

161
00:11:42.220 --> 00:11:43.110
Let's do this now.

162
00:11:50.430 --> 00:11:55.860
Refresh the page and if you did everything right then you should see that any errors related to J.

163
00:11:55.860 --> 00:11:57.510
Query are now gone.

164
00:11:57.510 --> 00:12:02.000
Now before I end this lecture I want to say one very important thing.

165
00:12:02.100 --> 00:12:06.870
Never ever override WordPress as default scripts including J query.

166
00:12:06.870 --> 00:12:12.120
There are some developers out there that liked to include their own version of J query which makes it

167
00:12:12.120 --> 00:12:15.210
great and all but it's really not a good idea.

168
00:12:15.210 --> 00:12:17.220
You aren't the only developer using J.

169
00:12:17.220 --> 00:12:23.520
Query If developers constantly use their own versions of scripts then this could break a client's site

170
00:12:23.580 --> 00:12:25.700
and can cause hours of debugging.

171
00:12:25.710 --> 00:12:32.160
It's so much better to just use a J query version that's consistent throughout the site inside the HP

172
00:12:32.210 --> 00:12:33.000
email template.

173
00:12:33.000 --> 00:12:38.820
We use a different version of J query but that's only for the H email template and not meant to be used

174
00:12:38.820 --> 00:12:40.560
for the wordpress theme at all.

175
00:12:40.560 --> 00:12:43.790
So please don't try and override WordPress as J.

176
00:12:43.800 --> 00:12:44.220
Query.
