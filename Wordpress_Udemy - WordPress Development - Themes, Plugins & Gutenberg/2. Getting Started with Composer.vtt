WEBVTT
1
00:00:07.510 --> 00:00:13.640
And this lecture will be learning about composer composer is a dependency management program for PJ

2
00:00:13.650 --> 00:00:14.310
Pete.

3
00:00:14.350 --> 00:00:16.650
But what exactly does that mean.

4
00:00:16.660 --> 00:00:21.940
As you can imagine if you're working on a large plugin or theme then there's a high possibility that

5
00:00:21.940 --> 00:00:24.590
you're including third party libraries.

6
00:00:24.670 --> 00:00:28.780
This can be anything from P2P libraries to see us as frameworks.

7
00:00:28.780 --> 00:00:33.460
Previously you would have to download each library and include it yourself.

8
00:00:33.460 --> 00:00:35.180
However with composer.

9
00:00:35.230 --> 00:00:37.710
Everything is semi automated for you.

10
00:00:37.720 --> 00:00:42.160
Another benefit to using composer is that it makes things standardized.

11
00:00:42.190 --> 00:00:47.380
If you've ever downloaded a library then you probably had to mess around with the folder structure a

12
00:00:47.380 --> 00:00:49.510
bit to make it fit with your project.

13
00:00:49.630 --> 00:00:55.120
Composer automatically takes care of structuring and loading all your files so that you don't have to

14
00:00:55.120 --> 00:00:58.870
type dozens of include and require functions.

15
00:00:58.870 --> 00:01:04.930
Composer has gained a lot of popularity over the past few years because of how simple it is to use most

16
00:01:04.930 --> 00:01:10.230
beginner developers tend to be intimidated by this program because you have to use the command line.

17
00:01:10.510 --> 00:01:14.390
Hopefully you feel a little comfortable using the command line at this point.

18
00:01:14.620 --> 00:01:20.140
Using composer isn't all that hard and once you understand the basics then you should be good to go

19
00:01:21.010 --> 00:01:23.160
in the resource section of this lecture.

20
00:01:23.170 --> 00:01:25.990
I provide a link to the official composer site.

21
00:01:25.990 --> 00:01:29.170
Here you'll find information about composer and even download it.

22
00:01:29.530 --> 00:01:31.050
Let's do that now.

23
00:01:31.150 --> 00:01:33.800
If you're on a Windows machine then you're in luck.

24
00:01:33.810 --> 00:01:38.510
There is an installer that you can download and we'll take care of setting up composer for you.

25
00:01:38.680 --> 00:01:44.110
If you're on a Linux or Mac then you'll have to follow these instructions for setting up composer.

26
00:01:44.110 --> 00:01:49.540
If you were to click on the Getting Started link then you'll find a more detailed guide.

27
00:01:49.690 --> 00:01:53.810
I've already installed a composer using the installer file for Windows.

28
00:01:53.860 --> 00:01:55.680
It's just a regular install.

29
00:01:55.780 --> 00:02:01.390
There's nothing special you need to do if you run windows after installing composer.

30
00:02:01.410 --> 00:02:04.260
You can then open the terminal something important.

31
00:02:04.260 --> 00:02:07.670
I want to highlight is that you need to open a new terminal.

32
00:02:07.710 --> 00:02:11.510
You can't have one open before or during the installation.

33
00:02:11.520 --> 00:02:16.630
This is because the settings will only be applied to new instances of the terminal.

34
00:02:16.650 --> 00:02:18.780
Right now I'm inside my editor.

35
00:02:18.840 --> 00:02:22.020
I'm in a brand new folder called Web dash app.

36
00:02:22.080 --> 00:02:25.300
Make sure your command line is pointed to this directory.

37
00:02:25.320 --> 00:02:28.070
My editor automatically points to this directory.

38
00:02:28.440 --> 00:02:31.690
If you don't have visual studio code then that's fine.

39
00:02:31.800 --> 00:02:35.030
You can use the command line your operating system comes with.

40
00:02:35.190 --> 00:02:42.010
Use the C D and unless commands to help you navigate to this folder when you install the composer you

41
00:02:42.010 --> 00:02:45.290
were given a new command called composer input.

42
00:02:45.300 --> 00:02:53.320
This command and press enter as you can see we get a list of some commands you can use with this command

43
00:02:53.380 --> 00:02:56.290
and some additional information about this command.

44
00:02:56.350 --> 00:03:00.140
The first sub command you'll usually use is in it.

45
00:03:00.220 --> 00:03:06.180
Let's use that now run the command composer in it.

46
00:03:06.240 --> 00:03:12.660
This will tell composer to create a composer Jason File this file will contain all your settings for

47
00:03:12.660 --> 00:03:14.670
your project with composer.

48
00:03:14.670 --> 00:03:20.210
This command helps you by creating this file and inputting all your settings without any error.

49
00:03:20.340 --> 00:03:22.750
The first setting is the package name.

50
00:03:22.770 --> 00:03:27.290
You'll notice that composer it tells you the format should be vendor's last name.

51
00:03:27.330 --> 00:03:29.640
The vendor can be considered a user name.

52
00:03:29.640 --> 00:03:34.210
When we start including third party packages you'll see it being formatted like this.

53
00:03:34.290 --> 00:03:37.680
As you can see composer gives us a default value.

54
00:03:37.680 --> 00:03:42.710
I'm not going to input anything which will tell composer to use its default name.

55
00:03:42.720 --> 00:03:47.830
Next up is the description I'm going to leave this empty as well and continue on.

56
00:03:47.910 --> 00:03:50.470
Then you'll be asked to input the author.

57
00:03:50.520 --> 00:03:57.010
It says to input n to skip it so I'll do that the next setting is minimum stability.

58
00:03:57.030 --> 00:04:03.000
This is asking us if the packages we plan on using are stable a package that is stable is considered

59
00:04:03.000 --> 00:04:10.140
to be usable and error free non stable packages tend to have errors aren't maintained and outdated.

60
00:04:10.140 --> 00:04:14.140
If you don't understand that's fine we'll leave this at the default.

61
00:04:14.160 --> 00:04:17.480
We'll talk more about packages in just a moment.

62
00:04:17.520 --> 00:04:22.620
I'm also going to skip the package type and license as I don't care to set them.

63
00:04:23.100 --> 00:04:26.760
You'll then be asked if you would like to set up some package dependencies.

64
00:04:26.790 --> 00:04:31.760
We'll do this in a moment but for now I'm going to input no for both.

65
00:04:31.770 --> 00:04:34.880
You'll then be shown an example of what the file will look like.

66
00:04:34.920 --> 00:04:36.900
It's pretty minimal which is good for now.

67
00:04:36.990 --> 00:04:40.650
I'm going to say yes composer will now generate this file

68
00:04:43.420 --> 00:04:49.620
open this file as you can see it's just a javascript object with properties that contain your settings.

69
00:04:49.630 --> 00:04:52.780
You'll notice this one property called require.

70
00:04:52.780 --> 00:04:56.600
This will contain a list of all packages that your project requires.

71
00:04:56.710 --> 00:05:03.250
A package is the word composer uses to describe the files that you use like J query or bootstrap.

72
00:05:03.250 --> 00:05:05.480
Right now we have no packages.

73
00:05:05.530 --> 00:05:09.990
I'm going to input the following monologue slash monologue colon.

74
00:05:10.130 --> 00:05:12.160
1 2 3 0

75
00:05:15.050 --> 00:05:19.160
as you can see the package names are formatted as I told you earlier.

76
00:05:19.250 --> 00:05:24.560
It starts with the name of the vendor a.k.a. the company or person who owns this package.

77
00:05:24.710 --> 00:05:27.850
Then it's followed up with the name of the package itself.

78
00:05:27.860 --> 00:05:30.640
After this you can specify the version.

79
00:05:30.680 --> 00:05:33.290
This is one of the benefits of using composer.

80
00:05:33.320 --> 00:05:37.900
You can specify a version with very little worry about downloading the wrong version.

81
00:05:37.910 --> 00:05:42.630
There are a lot of formats for the version in the resource section of this lecture.

82
00:05:42.650 --> 00:05:46.650
I provide a link to more information about the various formats for versions.

83
00:05:46.670 --> 00:05:53.450
It gets complicated but if you're like me then you can just use the wildcard symbol the wild card tells

84
00:05:53.450 --> 00:05:56.580
composer to just download the latest stable version.

85
00:05:56.840 --> 00:06:00.590
Let's test this out to install the packages inside this file.

86
00:06:00.590 --> 00:06:03.170
You need to run the command composer install

87
00:06:07.820 --> 00:06:09.200
before I run this command.

88
00:06:09.320 --> 00:06:15.410
I want to highlight that you must be in the same directory as this file if you inside a different directory

89
00:06:15.480 --> 00:06:17.330
than your receive an error.

90
00:06:17.330 --> 00:06:20.350
It may take a while for you as it's downloading files.

91
00:06:20.360 --> 00:06:22.040
Just be patient.

92
00:06:22.250 --> 00:06:22.630
All right.

93
00:06:22.760 --> 00:06:25.550
So the package is finally finished downloading.

94
00:06:25.560 --> 00:06:30.080
Composer will store all your packages inside a folder called vendor.

95
00:06:30.080 --> 00:06:32.240
Let's look at what's inside this folder.

96
00:06:32.540 --> 00:06:35.300
You'll see the package we wanted which was monologue.

97
00:06:35.570 --> 00:06:37.660
You'll also see a couple more folders.

98
00:06:37.670 --> 00:06:42.850
This may seem strange at first but it makes sense once you understand how packages work.

99
00:06:42.860 --> 00:06:47.250
There's a folder named composer which is just composer's own settings.

100
00:06:47.360 --> 00:06:49.160
You can safely ignore this folder.

101
00:06:49.760 --> 00:06:51.920
Let's open the monologue folder.

102
00:06:51.920 --> 00:06:57.410
There are a lot of files here but the one we care about is the composer Jason File.

103
00:06:57.500 --> 00:07:03.290
Just like our project packages we install will have their own composer Dom Jason File.

104
00:07:03.290 --> 00:07:05.410
A lot of this is unimportant to us.

105
00:07:05.420 --> 00:07:10.740
Scroll down to where it defines its own dependencies which is this require property.

106
00:07:10.940 --> 00:07:14.170
Some packages can specify their own dependencies.

107
00:07:14.180 --> 00:07:19.610
This is the beauty of composer composer we'll take care of downloading and installing these packages

108
00:07:19.610 --> 00:07:20.510
for you.

109
00:07:20.540 --> 00:07:22.340
One of these is HP.

110
00:07:22.400 --> 00:07:26.060
You can specify the minimum p p version for a package.

111
00:07:26.060 --> 00:07:28.970
This is to help with compatibility issues.

112
00:07:29.060 --> 00:07:29.500
All right.

113
00:07:29.600 --> 00:07:34.600
So the other package it specifies is the PSR slash long package.

114
00:07:34.640 --> 00:07:41.030
If you look inside the vendor folder again you'll see it downloaded here so you may be wondering where

115
00:07:41.030 --> 00:07:45.550
do you even get these package names in the resource section of this lecture.

116
00:07:45.560 --> 00:07:51.710
I provide a link to the site package ist package list is a site where users can submit their packages

117
00:07:51.710 --> 00:07:58.360
to be downloaded and installed with composer any and all packages you want to install can be found here.

118
00:07:58.370 --> 00:08:00.840
Let's search for the package monologue.

119
00:08:00.980 --> 00:08:02.750
Click on the first result you find

120
00:08:05.590 --> 00:08:09.020
on this page you'll find more information about this package.

121
00:08:09.070 --> 00:08:13.350
You'll even see a list of required packages beforehand which is quite nice.

122
00:08:13.510 --> 00:08:18.180
If you take a closer look you'll find a command you can use to download this package.

123
00:08:18.190 --> 00:08:19.990
Let's try this out.

124
00:08:19.990 --> 00:08:22.510
I'm going to delete my vendor folder.

125
00:08:22.510 --> 00:08:27.460
Delete the composer dot LOC file and empty out the require object like so

126
00:08:32.460 --> 00:08:38.340
then I'm going to run the command given which was composer require monologue slash monologue

127
00:08:41.050 --> 00:08:42.430
after running this command.

128
00:08:42.430 --> 00:08:44.650
We have monologue installed again.

129
00:08:44.650 --> 00:08:50.770
Composer also took the time to update the composer Jason file with the require property set.

130
00:08:51.100 --> 00:08:54.240
I mentioned the composer DOP LOC file earlier.

131
00:08:54.280 --> 00:08:59.920
What this does is lock down the versions of the installed packages the lock file can make sure that

132
00:08:59.980 --> 00:09:05.350
everyone works with the same package versions just because the application shouldn't break due to a

133
00:09:05.350 --> 00:09:06.180
package update.

134
00:09:06.190 --> 00:09:11.200
Doesn't mean that all your teammates and your production servers should all be running separate versions

135
00:09:12.040 --> 00:09:17.950
when you first use composer to grab a dependency it writes the exact version to the lock file.

136
00:09:17.950 --> 00:09:23.770
If you specified two dot three dot asterisk and two dot three dot five is the latest version than the

137
00:09:23.770 --> 00:09:29.290
install version will be to dot 3.0 5 and it will be entered into the lock file.

138
00:09:29.290 --> 00:09:32.370
You can of course decide to update your dependencies.

139
00:09:32.470 --> 00:09:35.980
In this case you should run the command composer update.

140
00:09:36.070 --> 00:09:40.060
This will grab the latest versions aloud and write them to the log file.

141
00:09:40.060 --> 00:09:43.270
This will then be distributed to all sources.

142
00:09:43.270 --> 00:09:45.710
All right so that doesn't for a composer.

143
00:09:45.710 --> 00:09:49.990
There's a lot more features but we've learned everything we need to learn so far.

144
00:09:49.990 --> 00:09:54.000
I highly encourage you to start using composer for your projects.

145
00:09:54.020 --> 00:10:01.240
It'll help you manage files such as bootstrap J query and other p HP libraries.
