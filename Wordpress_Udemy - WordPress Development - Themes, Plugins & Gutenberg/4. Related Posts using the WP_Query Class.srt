1
00:00:08,210 --> 00:00:11,450
I'm currently on the WP query Codex page.

2
00:00:11,450 --> 00:00:15,080
I'll provide a link to this in the resource section of this lecture.

3
00:00:15,080 --> 00:00:22,700
Here's what WordPress has to say about this class WP query is a class defined in WP dash includes slash

4
00:00:22,700 --> 00:00:30,680
queried P. HP that deals with the intricacies of a post request to a WordPress blog the WP dash blog

5
00:00:30,680 --> 00:00:38,150
dash headed up HP gives the WP query object information defining the current request and then WP query

6
00:00:38,150 --> 00:00:44,210
determines what type of query it's dealing with and fetches the requested posts it retains a lot of

7
00:00:44,210 --> 00:00:50,450
information on the request which can be pulled at a later date this class which we will go over soon

8
00:00:50,660 --> 00:00:55,660
is probably one of the most famous and most used classes by WordPress developers.

9
00:00:55,700 --> 00:00:59,020
It's used because it's so simple to get started with.

10
00:00:59,120 --> 00:01:02,870
It provides a lot of options and is documented quite heavily.

11
00:01:02,870 --> 00:01:09,080
This class lets you interact with the database by grabbing posts it seems simple but posts are very

12
00:01:09,080 --> 00:01:10,890
complex in their design.

13
00:01:10,910 --> 00:01:14,900
This class is meant to help you get past that complexity.

14
00:01:14,900 --> 00:01:20,500
You may have noticed that WordPress provides a plethora of functions for interacting with the database.

15
00:01:20,600 --> 00:01:26,180
We are allowed to write custom sequel queries but that's only when we need complete control.

16
00:01:26,480 --> 00:01:31,850
At this point we don't need to use custom queries but I promise you we will go over how to do that in

17
00:01:31,850 --> 00:01:33,090
a future lecture.

18
00:01:33,110 --> 00:01:39,640
For now the functions and classes provided are tailored solutions to the most common problems we have.

19
00:01:39,770 --> 00:01:47,130
The WP query class is the exact solution WordPress uses to query for posts that are loaded in our templates.

20
00:01:47,180 --> 00:01:52,400
You'll notice soon enough that the methods are similar to the functions we've used so far before we

21
00:01:52,400 --> 00:01:58,590
begin I want to point out that there's a documentation page for the WP query class on the developer

22
00:01:58,590 --> 00:01:59,630
site.

23
00:01:59,630 --> 00:02:02,900
I'll provide a link to it in the resource section of this lecture.

24
00:02:02,900 --> 00:02:07,860
This page is the more updated version and we'll soon take over the Codex version.

25
00:02:07,940 --> 00:02:12,890
I showed you the Codex one because it had a better description of the class itself.

26
00:02:12,890 --> 00:02:19,370
From now on will be referring to the developer page for any information on the WP query class.

27
00:02:19,370 --> 00:02:20,490
Back to our project.

28
00:02:20,510 --> 00:02:22,180
Let me show you how this works.

29
00:02:22,220 --> 00:02:28,790
I'm going to insert this code inside the div tag with the class related dash posts to get started with

30
00:02:28,790 --> 00:02:30,410
the WP query class.

31
00:02:30,440 --> 00:02:33,110
You need to make a new instance of this class.

32
00:02:33,200 --> 00:02:41,420
I'm going to create a variable named P query where r p is short for related posts.

33
00:02:41,500 --> 00:02:47,800
I'm going to create a new instance of the WP query class and this class has one argument which is completely

34
00:02:47,800 --> 00:02:50,420
optional.

35
00:02:50,480 --> 00:02:56,060
The argument is an array of keys and values that specify what kind of posts we want.

36
00:02:56,180 --> 00:03:02,180
If you look at the documentation you'll notice there are literally dozens of keys we can set each key

37
00:03:02,270 --> 00:03:04,230
already has a default value.

38
00:03:04,310 --> 00:03:09,040
You do not need to feel pressured to define every single one by default.

39
00:03:09,050 --> 00:03:13,940
WordPress will set its parameters to look for posts that have been published recently.

40
00:03:13,940 --> 00:03:18,760
For the most part that's fine but we would like to make a few adjustments to that.

41
00:03:18,770 --> 00:03:23,330
First I want to shorten how many results are returned by default.

42
00:03:23,330 --> 00:03:27,590
WordPress will use the setting in reading settings in an earlier lecture.

43
00:03:27,590 --> 00:03:28,990
We set this to 4.

44
00:03:29,090 --> 00:03:36,430
However I only want 2 results return so we have to set a key called posts underscore per underscore.

45
00:03:36,430 --> 00:03:45,690
Page this value controls how many posts a query can return per page by setting this value to 2.

46
00:03:45,730 --> 00:03:49,690
We assure ourselves only 2 posts will show up from this.

47
00:03:49,780 --> 00:03:55,830
Next we want to make sure that the posts we're currently viewing does not show up on this list of posts.

48
00:03:55,930 --> 00:04:03,150
In this case we can set the post underscore underscore not underscore in key.

49
00:04:03,420 --> 00:04:08,500
I'm not sure if you can see this clearly but there are two underscores after the word posts.

50
00:04:08,580 --> 00:04:11,600
It's very important your key matches mine.

51
00:04:11,850 --> 00:04:19,640
This key accepts an array of post ideas so the question is how do we get the ideas for the current post.

52
00:04:19,680 --> 00:04:26,370
WordPress provides a global variable named post which we can access directly in the loop and the resource

53
00:04:26,370 --> 00:04:27,570
section of this lecture.

54
00:04:27,630 --> 00:04:30,480
I provide a link to learn more about this variable.

55
00:04:30,480 --> 00:04:35,850
Here's what WordPress has to say contains data from the current post in the loop.

56
00:04:35,850 --> 00:04:39,990
This variable is an object that contains properties about the current post.

57
00:04:40,200 --> 00:04:42,370
One of these values is the I.D..

58
00:04:42,480 --> 00:04:44,040
It's pretty simple to use.

59
00:04:44,070 --> 00:04:53,300
You just pass him the post variable and grab the property I.D. like so the Post variable is always available

60
00:04:53,300 --> 00:04:55,170
to us in the loop.

61
00:04:55,220 --> 00:05:00,410
The very last thing we need to do is make sure that the posts displayed are similar to the one the user

62
00:05:00,410 --> 00:05:01,370
is reading.

63
00:05:01,370 --> 00:05:03,560
There are dozens of ways to go about this.

64
00:05:03,590 --> 00:05:05,580
But let's keep it really simple.

65
00:05:05,600 --> 00:05:09,770
I'm going to assume that posts in the same category should be similar.

66
00:05:09,770 --> 00:05:15,200
So let's make it so that the posts that appear here are in the same category as the one the user is

67
00:05:15,200 --> 00:05:16,700
currently reading.

68
00:05:16,760 --> 00:05:20,460
First we need to grab the categories assigned to this post.

69
00:05:20,630 --> 00:05:25,300
Create a variable name two categories and set its value returned by the function.

70
00:05:25,310 --> 00:05:26,530
Get the category.

71
00:05:28,760 --> 00:05:33,680
Despite its name the function more turn multiple categories in an array form.

72
00:05:33,740 --> 00:05:39,200
If you're unsure about what values a function returns then it's always good practice to actually just

73
00:05:39,200 --> 00:05:42,080
print out the data so you can view what's in it.

74
00:05:42,080 --> 00:05:47,760
I'm going to use the print R function which is a P B function that will output array and object data.

75
00:05:51,360 --> 00:05:57,870
Refresh the page and you will see the object being output it like so now we have a good idea about what

76
00:05:57,870 --> 00:05:59,690
kind of data is returned.

77
00:05:59,730 --> 00:06:08,520
I'm going to remove this print statement and move onto the query object to choose a specific category.

78
00:06:08,530 --> 00:06:10,710
We must define the cat key.

79
00:06:10,750 --> 00:06:16,120
This Key's value will only be an integer which represents the idea of the category.

80
00:06:16,120 --> 00:06:21,910
Even though we may have multiple categories I'm just going to concern myself with the very first category

81
00:06:21,940 --> 00:06:23,260
in the array.

82
00:06:23,350 --> 00:06:31,720
I'm going to use a ternary operator to check if the categories array is empty if this returns false.

83
00:06:31,720 --> 00:06:34,790
Then I'm going to grab the first category in the array.

84
00:06:35,020 --> 00:06:45,070
We next need to grab the idea of that category that is assigned under the property term I.D. however

85
00:06:45,160 --> 00:06:49,870
if the array is empty then I'm going to set the value to no that's it.

86
00:06:50,200 --> 00:06:52,320
Let me quickly go over what's going on.

87
00:06:52,450 --> 00:07:00,280
To query the database for posts we create a new instance of the WP query object by passing in this array

88
00:07:00,400 --> 00:07:05,740
we can specify what kind of posts we'd like to grab the posts per page.

89
00:07:05,740 --> 00:07:09,980
Key allows us to define how many posts we'd like per page.

90
00:07:10,210 --> 00:07:15,630
The post not in key allows us to define what posts should not be returned.

91
00:07:15,820 --> 00:07:20,070
In our case the current post being viewed should not be returned.

92
00:07:20,170 --> 00:07:28,000
The cat key allows us to define if the posts should be in a specific category by doing all this WordPress

93
00:07:28,000 --> 00:07:34,350
will then generate a custom sequel query and then execute that query and return an array of posts.

94
00:07:34,390 --> 00:07:37,160
All we have to do now is display the results.

95
00:07:37,210 --> 00:07:41,760
We actually already know how to do this inside a conditional statement.

96
00:07:41,770 --> 00:07:49,930
We can call a method from the RPE query object which is half posts you'll notice that this method is

97
00:07:49,930 --> 00:07:52,750
the exact same method used in our main loop.

98
00:07:52,870 --> 00:07:55,820
What we have here is called a secondary loop.

99
00:07:55,930 --> 00:07:59,270
I promise you that I will explain what this is in just a moment.

100
00:07:59,320 --> 00:08:01,550
For now just keep following along.

101
00:08:01,750 --> 00:08:11,100
If this custom query does have posts then we can use a while loop like so then we can grab the current

102
00:08:11,100 --> 00:08:19,950
post using the post method just like last time I'm going to grab these static HD mail and just replace

103
00:08:19,950 --> 00:08:22,230
it with its template tag equivalence.

104
00:08:22,230 --> 00:08:29,030
You don't have to use the R P query variable anymore as WordPress assumes all post data comes from it.

105
00:08:29,040 --> 00:08:35,310
For example if I use the title function WordPress will grab the title from whatever the current loop

106
00:08:35,310 --> 00:08:41,640
it sent since it's in our custom loop it'll grab the title from the custom loop it will not grab the

107
00:08:41,640 --> 00:08:44,670
title from the main loop that encompasses everything.

108
00:08:44,700 --> 00:08:46,070
I hope that makes sense.

109
00:08:46,080 --> 00:08:49,280
If not I'll go more into detail in just a moment.

110
00:08:49,290 --> 00:08:52,880
For now I encourage you to pause the video and try it yourself.

111
00:08:54,740 --> 00:08:55,370
All right.

112
00:08:55,370 --> 00:08:57,110
If you couldn't get it that's fine.

113
00:08:57,140 --> 00:08:58,790
Let's go over it together.

114
00:08:58,910 --> 00:09:05,840
First I'm going to move the static post into this loop the static post is this div tag with the class

115
00:09:05,920 --> 00:09:06,980
M post.

116
00:09:06,980 --> 00:09:09,260
Make sure to delete any other static copy

117
00:09:19,550 --> 00:09:24,490
then we have to grab the featured image of this post inside a conditional statement.

118
00:09:24,560 --> 00:09:35,690
We can use the has post thumbnail function.

119
00:09:35,820 --> 00:09:43,820
I'm going to place the image and its link inside this conditional statement then we can replace these

120
00:09:43,820 --> 00:09:47,450
values with the appropriate template tags for the thumbnail.

121
00:09:47,450 --> 00:09:51,090
I'm going to set the size to thumbnail unlike last time.

122
00:09:51,110 --> 00:09:54,220
We don't need the full size image by default.

123
00:09:54,230 --> 00:10:00,500
The thumbnail size is 150 by 150 which is good enough.

124
00:10:00,560 --> 00:10:02,530
This isn't anything new so far.

125
00:10:02,630 --> 00:10:09,620
Continuing on we use the functions the perma link the title get the date comments number and the excerpt

126
00:10:22,670 --> 00:10:24,140
really simple stuff here.

127
00:10:24,200 --> 00:10:27,460
The very last thing you need to do is reset everything.

128
00:10:27,500 --> 00:10:32,430
Earlier I talked about main and secondary loops in the resource section.

129
00:10:32,480 --> 00:10:36,190
I provide a link to the function WP reset post data.

130
00:10:36,350 --> 00:10:40,010
It's very important what WordPress has to say here.

131
00:10:40,010 --> 00:10:46,310
Use this function to restore the global post variable of the main query loop after a secondary query

132
00:10:46,310 --> 00:10:48,710
loop using new WP query.

133
00:10:48,860 --> 00:10:54,950
It restores the post variable to the current post in the main query differences between the main query

134
00:10:54,950 --> 00:11:01,580
loop and secondary query loops are the main loop is based on the euro request and it's processed before

135
00:11:01,580 --> 00:11:03,120
templates are loaded.

136
00:11:03,230 --> 00:11:07,670
Secondary loops are queries in theme template or plugin files.

137
00:11:09,970 --> 00:11:15,820
As I stated in an earlier lecture WordPress will scan the euro well and determine how many and what

138
00:11:15,820 --> 00:11:17,860
posts to display for the page.

139
00:11:18,040 --> 00:11:23,220
WordPress will automatically generate a query using the WP query class.

140
00:11:23,260 --> 00:11:25,420
This is what's called the main loop.

141
00:11:25,420 --> 00:11:27,160
Every page you visit has one.

142
00:11:27,580 --> 00:11:32,830
The WordPress team understands that sometimes you'll want to make your own loop and queries.

143
00:11:32,830 --> 00:11:36,770
Therefore you can also use this class to generate your own queries.

144
00:11:36,790 --> 00:11:42,910
These custom loops are called secondary query loops to prove this further.

145
00:11:42,910 --> 00:11:45,700
Let's take a look at the post function.

146
00:11:45,700 --> 00:11:49,120
I provide a link to this in the resource section of this lecture.

147
00:11:49,240 --> 00:11:54,670
If you look at the source code you'll see that it's just two lines of code all that it's doing is grabbing

148
00:11:54,670 --> 00:11:59,680
the global WP query variable and then calling the method the post.

149
00:11:59,680 --> 00:12:02,460
This is similar to what we did in our own code.

150
00:12:02,470 --> 00:12:09,610
Wordpress is using the exact same class we are using which is WP query the query that WordPress generates

151
00:12:09,640 --> 00:12:11,640
is called the main query.

152
00:12:11,680 --> 00:12:17,650
This query gets stored in the WP query variable which is accessible to both you and WordPress.

153
00:12:18,010 --> 00:12:23,130
If you wanted to you could just use this code rather than calling the post function.

154
00:12:23,140 --> 00:12:29,380
However I think calling this function makes our code cleaner and much more readable inside the single

155
00:12:29,380 --> 00:12:30,040
template.

156
00:12:30,040 --> 00:12:33,070
We essentially have two loops with this in mind.

157
00:12:33,100 --> 00:12:38,470
We run into one huge problem and that is how does WordPress know when you're finished running your secondary

158
00:12:38,470 --> 00:12:39,210
loop.

159
00:12:39,310 --> 00:12:48,230
You do that by calling the WP reset post data function right after the secondary loop if anything.

160
00:12:48,290 --> 00:12:54,400
This is the most important part when creating secondary loops by not calling this function.

161
00:12:54,470 --> 00:13:00,290
You will confuse WordPress what will end up happening is that the data inside the loop will become unpredictable

162
00:13:00,650 --> 00:13:02,910
so make sure you call this function.

163
00:13:03,020 --> 00:13:04,550
That is the last step.

164
00:13:04,550 --> 00:13:08,880
Refresh the page and you should now see our related posts being displayed.

165
00:13:09,440 --> 00:13:15,350
So far this has been the most complex task we've done but it's very important that you understand what's

166
00:13:15,350 --> 00:13:16,240
going on.

167
00:13:16,250 --> 00:13:23,210
This will not be the last time we'll use the WP query class the WP query class is one of the most used

168
00:13:23,210 --> 00:13:25,000
classes provided by WordPress.

169
00:13:26,310 --> 00:13:32,940
Before I end this lecture let's take a look at some of the cases where using the WP query class is beneficial

170
00:13:33,000 --> 00:13:38,670
over other available functions to add a list of related posts under the current post.

171
00:13:38,790 --> 00:13:42,420
For example a list of all posts in the same category.

172
00:13:42,690 --> 00:13:49,380
To create two loops on the same page for example an F AQ page with the question titles at the top and

173
00:13:49,380 --> 00:13:51,180
the content beneath.

174
00:13:51,180 --> 00:13:57,510
To create a custom list of recent posts in the sidebar or footer of your site when the recent posts

175
00:13:57,540 --> 00:14:04,140
which it doesn't do what you need or you'd rather code it yourself to create custom queries for taxonomy

176
00:14:04,200 --> 00:14:10,750
using more than one taxonomy to define what's displayed to query post types which aren't outputting

177
00:14:10,800 --> 00:14:13,480
by the default query such as attachments.

178
00:14:13,530 --> 00:14:18,950
These are just some of the common scenarios where the WP query class can be used.

179
00:14:18,960 --> 00:14:25,380
Now let's take a look at some situations where it wouldn't be appropriate to use the WP underscore query

180
00:14:25,380 --> 00:14:31,650
class if all you want to do is change the way posts are being displayed for a particular content type

181
00:14:31,650 --> 00:14:32,640
or archive.

182
00:14:32,640 --> 00:14:39,780
Don't use WP underscore query instead simply create a template file for that archive or content type

183
00:14:40,020 --> 00:14:46,230
and modify the loop in that template file if you want to display a few more or less posts than would

184
00:14:46,230 --> 00:14:48,310
normally be shown on an archive.

185
00:14:48,330 --> 00:14:52,550
Don't use WP underscore a query to create a whole new query.

186
00:14:52,680 --> 00:14:59,690
Instead use pre underscore get underscore posts to modify the main query along with a conditional tag

187
00:14:59,700 --> 00:15:02,490
to single out where exactly you want to do it.

188
00:15:02,520 --> 00:15:05,520
Beware of running too many queries on the page.

189
00:15:05,550 --> 00:15:10,710
You could theoretically create a page with hundreds of custom queries but just think of the server load

190
00:15:11,270 --> 00:15:14,190
and you need more than four or five queries on a page.

191
00:15:14,190 --> 00:15:16,950
You might want to consider creating extra pages.
