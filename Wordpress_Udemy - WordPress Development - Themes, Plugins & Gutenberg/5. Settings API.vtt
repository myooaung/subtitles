WEBVTT
1
00:00:07.750 --> 00:00:09.640
The settings API is an API.

2
00:00:09.640 --> 00:00:11.430
I'm not particularly fond of.

3
00:00:11.530 --> 00:00:17.680
But that doesn't mean it's not used what the settings API allows you to do is create a form that will

4
00:00:17.680 --> 00:00:19.530
be handled by WordPress.

5
00:00:19.540 --> 00:00:23.390
This means that you don't have to do what we did in the previous lectures.

6
00:00:23.440 --> 00:00:29.650
You don't have to process the form yourself manage the options or create your own UI in the settings

7
00:00:29.650 --> 00:00:32.000
API is meant to solve all of that.

8
00:00:32.020 --> 00:00:38.530
Now keep in mind that it's completely optional to use the settings API creating your own UI is completely

9
00:00:38.530 --> 00:00:39.540
acceptable.

10
00:00:39.550 --> 00:00:42.100
It's a common root for developers to use.

11
00:00:42.100 --> 00:00:46.810
I highly prefer creating my own UI and processing the data myself.

12
00:00:46.810 --> 00:00:50.680
With that being said you may prefer to use the settings API.

13
00:00:50.680 --> 00:00:57.270
This lecture is meant to introduce you to the API and how it works in the resource section of this lecture.

14
00:00:57.280 --> 00:01:01.520
I provide a link to the settings API plugin handbook chapter.

15
00:01:01.600 --> 00:01:04.900
This page describes the settings API in detail.

16
00:01:04.900 --> 00:01:09.710
If you scroll down they even talk about why you should use the settings API.

17
00:01:09.730 --> 00:01:13.120
The benefits are that it provides visual consistency.

18
00:01:13.120 --> 00:01:15.680
It's future proof and it means less work.

19
00:01:15.700 --> 00:01:20.980
It takes care of handling form submission security measures and data sanitization.

20
00:01:20.980 --> 00:01:23.160
Feel free to read over this chapter.

21
00:01:23.200 --> 00:01:26.310
Let's get started with the settings API.

22
00:01:26.380 --> 00:01:30.270
The very first thing I'm going to do is open the Options page.

23
00:01:30.310 --> 00:01:36.310
I'm going to place the settings API form right below our custom ones so that we can compare the item.

24
00:01:36.310 --> 00:01:40.210
Add a horizontal line separator and then create another form

25
00:01:46.430 --> 00:01:50.510
this form will have two attributes which are action and method.

26
00:01:50.510 --> 00:01:52.220
The method will be post.

27
00:01:52.280 --> 00:01:57.310
The action will be options not P HP.

28
00:01:57.330 --> 00:01:59.550
This is the first difference right here.

29
00:01:59.610 --> 00:02:07.080
The custom UI form has an action of ad men dash post dot P HP request that will be handled and processed

30
00:02:07.080 --> 00:02:11.660
by you shouldn't be sent to the admin dash post stop HP file.

31
00:02:11.670 --> 00:02:16.380
The option stop GHB is exclusively for the settings API.

32
00:02:16.380 --> 00:02:22.380
Keep in mind that WordPress will handle all the forms submissions and data sanitization for you so you'll

33
00:02:22.380 --> 00:02:28.990
have to send the data to the options stop BHP file if you plan on using the settings API.

34
00:02:29.010 --> 00:02:29.580
All right.

35
00:02:29.580 --> 00:02:33.920
Moving on inside this form we're going to call three functions.

36
00:02:34.020 --> 00:02:37.000
The first function is these settings fields.

37
00:02:37.020 --> 00:02:42.270
This function will output some hidden fields that will help with security and help WordPress identify

38
00:02:42.300 --> 00:02:45.200
what group of options are being submitted.

39
00:02:45.210 --> 00:02:48.240
Option groups are an important concept to remember.

40
00:02:48.270 --> 00:02:52.030
It's really confusing to beginners but I'll try my best to explain it.

41
00:02:52.110 --> 00:02:58.550
If you look inside the activation file we create a single option and assign its value to an array.

42
00:02:58.800 --> 00:03:05.400
This array has multiple settings but two WordPress It's all considered one single row in a database.

43
00:03:05.490 --> 00:03:11.880
If we wanted to we could have created two options by calling the add option function twice and storing

44
00:03:11.880 --> 00:03:18.890
these values separately rather than inside of an array that's an acceptable situation to WordPress.

45
00:03:18.890 --> 00:03:21.730
It's what WordPress does with its own settings.

46
00:03:21.740 --> 00:03:27.620
It's why when you open the options database table you saw many individual values rather than arrays

47
00:03:28.190 --> 00:03:32.810
go to the admin dashboard and under the settings menu select any page.

48
00:03:32.960 --> 00:03:38.810
I'm going to select general each field in this form has its own option or database row in the options

49
00:03:38.810 --> 00:03:39.460
table.

50
00:03:39.590 --> 00:03:45.950
For example the site title has its own row the tag line also has its own row.

51
00:03:45.950 --> 00:03:47.420
So on and so forth.

52
00:03:47.510 --> 00:03:52.940
It's a lot of settings but it just means that WordPress considers each value important enough to have

53
00:03:52.940 --> 00:03:56.150
its own row in the options database table.

54
00:03:56.150 --> 00:04:02.160
In our case I don't consider each plugin setting important enough to have its own row in the database.

55
00:04:02.180 --> 00:04:04.060
I just group them all together.

56
00:04:04.190 --> 00:04:06.380
It's easier to manage and remember.

57
00:04:06.470 --> 00:04:10.730
Here comes the problem with creating individual rows for each setting.

58
00:04:10.760 --> 00:04:15.560
Wordpress is completely unaware of certain options are related to one another.

59
00:04:15.650 --> 00:04:20.330
Back to the settings page you'll notice that even though these are separate options they're all grouped

60
00:04:20.390 --> 00:04:22.910
and managed together in this single form.

61
00:04:22.940 --> 00:04:27.500
In order for this to work WordPress requires that they be grouped together.

62
00:04:27.500 --> 00:04:32.640
This is where option groups come in to play even though each value exists in its own row.

63
00:04:32.690 --> 00:04:36.650
They can be grouped together so that WordPress can keep track of everything.

64
00:04:36.710 --> 00:04:41.900
When you create an option group you make it easier for wordpress to know which field belongs to which

65
00:04:41.900 --> 00:04:48.170
section and which section belongs to which page you'll see how we generate sections and fields in just

66
00:04:48.170 --> 00:04:49.450
a second.

67
00:04:49.520 --> 00:04:51.240
Back to the options page.

68
00:04:51.320 --> 00:04:59.650
I'm going to pass in a custom option group called our ops group any options assigned to this group.

69
00:04:59.680 --> 00:05:00.220
We manage.

70
00:05:00.220 --> 00:05:06.080
Here is what I'm telling WordPress now that WordPress knows what group of options are going to be managed.

71
00:05:06.130 --> 00:05:09.190
I can begin creating the fields themselves.

72
00:05:09.190 --> 00:05:14.980
The next function I want to call is do setting sections.

73
00:05:15.030 --> 00:05:18.170
This will output the actual input fields themselves.

74
00:05:18.210 --> 00:05:21.990
We have to tell WordPress what sections we'd like to output.

75
00:05:21.990 --> 00:05:24.090
This function accepts the page name.

76
00:05:24.240 --> 00:05:28.180
Since this is a custom page we can input a custom page name.

77
00:05:28.380 --> 00:05:31.590
The page name will be are arts sections.

78
00:05:31.620 --> 00:05:37.530
We haven't talked about sections but sections are a way to group individual input fields together.

79
00:05:37.620 --> 00:05:43.200
You can have multiple sections so this function will get all sections that are grouped together.

80
00:05:43.200 --> 00:05:47.850
If that seems confusing don't worry you'll see how it works in just a moment.

81
00:05:47.850 --> 00:05:53.000
The last function I want to call is submit button.

82
00:05:53.140 --> 00:05:56.960
This will generate a submit button that is style to work with the form.

83
00:05:57.010 --> 00:05:58.120
It's very simple.

84
00:05:58.150 --> 00:06:01.060
Keep in mind that you don't have to call these functions.

85
00:06:01.120 --> 00:06:07.960
We could if we wanted to create the fields and buttons ourselves however that would defeat the purpose

86
00:06:07.990 --> 00:06:13.760
of using the settings API in the first place since its job is to handle everything for us.

87
00:06:13.810 --> 00:06:15.010
That's it for the forum.

88
00:06:15.250 --> 00:06:17.320
Let's begin registering everything.

89
00:06:17.320 --> 00:06:23.500
The settings API instructs us that we have to register everything from the admin and it hook open this

90
00:06:23.500 --> 00:06:26.430
function now just to keep things organized.

91
00:06:26.440 --> 00:06:29.920
I'm going to separate the registration from the rest of the code.

92
00:06:30.070 --> 00:06:37.120
Create a new file named settings stash API dot P. HP and define the function r settings API

93
00:06:46.440 --> 00:06:51.900
include this file from the ad men it function and then just call this function at the very end of the

94
00:06:51.900 --> 00:06:52.380
function

95
00:06:58.180 --> 00:07:01.950
we can now put all our code inside the newly defined function.

96
00:07:02.080 --> 00:07:04.790
The first step is to register the new settings.

97
00:07:04.810 --> 00:07:11.110
Call the function register setting pass in the option group name which is our ops group and the actual

98
00:07:11.110 --> 00:07:19.080
option which is our ops this function will tell we're pressed at the R ops option is assigned to the

99
00:07:19.080 --> 00:07:21.430
group our ops group.

100
00:07:21.450 --> 00:07:24.960
This function needs to be called for as many options we have.

101
00:07:24.960 --> 00:07:30.930
For example if we have three options we'd call this function three times where the second argument is

102
00:07:30.930 --> 00:07:32.400
for each option.

103
00:07:32.400 --> 00:07:34.140
The group should always be the same.

104
00:07:34.140 --> 00:07:40.410
If all the options are going to be displayed on the same page for instance if I had something like option

105
00:07:40.410 --> 00:07:49.910
2 and option 3 then I would pass that in like so however since we saved our option as an array we only

106
00:07:49.910 --> 00:07:52.640
have one row in the database as a result.

107
00:07:52.760 --> 00:07:55.820
We only have to call this function once.

108
00:07:55.820 --> 00:08:01.160
Now that we've called this function WordPress will know that the r opts options will be handled by the

109
00:08:01.160 --> 00:08:02.670
settings API.

110
00:08:02.690 --> 00:08:09.320
The next step is to create a section a section is a way to group individual fields a single page can

111
00:08:09.320 --> 00:08:13.370
have multiple sections and each section may have multiple fields.

112
00:08:13.370 --> 00:08:15.790
It's just a way to keep things organized.

113
00:08:16.070 --> 00:08:22.520
Since we only have two fields in the array we only really need one section called the function add setting

114
00:08:22.520 --> 00:08:27.760
section this function has four parameters.

115
00:08:27.820 --> 00:08:30.090
The first parameter is a custom Aidid.

116
00:08:30.460 --> 00:08:33.860
I'm going to keep it simple and name it recipe settings.

117
00:08:33.880 --> 00:08:38.410
The second parameter is a readable name which will be output it onto the screen.

118
00:08:38.410 --> 00:08:42.730
Set this to recipe settings.

119
00:08:42.930 --> 00:08:47.340
The third parameter is a function that will be called before the fields are displayed.

120
00:08:47.340 --> 00:08:49.530
Set this to are Settings section

121
00:08:52.320 --> 00:08:53.910
defined this function right below.

122
00:08:53.910 --> 00:08:55.290
An echo out the text.

123
00:08:55.320 --> 00:09:03.780
You can change the recipe settings here.

124
00:09:03.940 --> 00:09:05.980
You can output whatever you want.

125
00:09:05.980 --> 00:09:11.590
Most developers will just output some text that will help users out when filling out the form.

126
00:09:11.620 --> 00:09:14.110
The last parameter is the name of the page.

127
00:09:14.110 --> 00:09:22.780
This will appear on in our case we named it our op section any fields assigned under this section will

128
00:09:22.780 --> 00:09:23.830
appear on the page.

129
00:09:23.830 --> 00:09:26.920
This section is assigned to in the Options page.

130
00:09:26.920 --> 00:09:32.860
We called the due setting section function which will output any sections that are assigned to the page

131
00:09:32.940 --> 00:09:34.510
r op section.

132
00:09:34.510 --> 00:09:36.530
This is how you connect the two.

133
00:09:36.790 --> 00:09:43.170
Now that we have our sections we can begin creating the input fields creating Fields is a pretty straightforward

134
00:09:43.180 --> 00:09:46.600
process right after the section call the function.

135
00:09:46.600 --> 00:09:48.060
Add settings field.

136
00:09:48.220 --> 00:09:50.710
This function has quite a few parameters.

137
00:09:50.770 --> 00:09:53.770
The first parameter is the idea for this field.

138
00:09:53.770 --> 00:09:59.040
Technically you can give this field any idea you'd like but I'd like to assign it to the option that

139
00:09:59.050 --> 00:10:03.790
is relevant to this field will be related to the rating log in required.

140
00:10:03.790 --> 00:10:11.240
Option the second parameter is the label text that will be displayed for this field.

141
00:10:11.240 --> 00:10:21.930
I'm going to use the same text I used in the custom UI form.

142
00:10:22.110 --> 00:10:26.750
The third parameter is the function that will be called for the actual input itself.

143
00:10:26.760 --> 00:10:33.230
I like to use the same name as the I.D. with the addition of underscore input underscore CV where CV

144
00:10:33.240 --> 00:10:39.200
stands for callback you'll see what this function does in a moment.

145
00:10:39.290 --> 00:10:42.880
The fourth parameter is the page that this field belongs to.

146
00:10:42.890 --> 00:10:51.140
This is the same as the name we passed in the do setting section's function the fifth parameter is the

147
00:10:51.140 --> 00:10:51.440
name.

148
00:10:51.440 --> 00:10:59.760
This section belongs to which is the value we pass into the first parameter of the ad setting section.

149
00:10:59.800 --> 00:11:03.790
The next step is to define the function that we called in the third parameter.

150
00:11:03.790 --> 00:11:06.320
This function will output the input field.

151
00:11:06.490 --> 00:11:09.460
I'm going to ground the R ops option like before

152
00:11:14.810 --> 00:11:21.160
then I'm going to borrow this bit of code from the custom form we created.

153
00:11:21.380 --> 00:11:23.430
I want to change two things.

154
00:11:23.450 --> 00:11:29.720
First I want to create an I.D. the I.D. should match the I.D. you assign in the first parameter of the

155
00:11:29.720 --> 00:11:32.000
relative add settings field function

156
00:11:38.230 --> 00:11:38.730
next.

157
00:11:38.740 --> 00:11:41.200
I want to change the name attribute.

158
00:11:41.200 --> 00:11:44.560
It's very important that you name this attribute correctly.

159
00:11:44.560 --> 00:11:48.300
The name will determine what option is updated in the database.

160
00:11:48.340 --> 00:11:51.530
In our case it would be the R ops option.

161
00:11:51.550 --> 00:11:54.360
However this option is not a single value.

162
00:11:54.460 --> 00:12:00.370
If it was then this would be perfectly acceptable to tell WordPress that we want to update a certain

163
00:12:00.370 --> 00:12:01.440
key in the array.

164
00:12:01.450 --> 00:12:05.050
We need to use Square brackets and pass in the name of the key.

165
00:12:05.230 --> 00:12:08.920
In this case it would be rating logging required.

166
00:12:08.920 --> 00:12:13.960
It's very important that you name it correctly or the options will not be updated accordingly.

167
00:12:13.960 --> 00:12:15.910
That's it for the first field.

168
00:12:15.910 --> 00:12:21.310
I'm going to just copy everything from the first field and just update its values accordingly for the

169
00:12:21.310 --> 00:12:22.530
second option.

170
00:12:22.570 --> 00:12:25.200
I'm going to do the same with the function as well.

171
00:12:27.870 --> 00:12:30.300
Your code should look similar to mine.

172
00:12:30.300 --> 00:12:35.640
Once you're finished adding the second field for the second key in the r ops array we can now test the

173
00:12:35.640 --> 00:12:38.170
form refresh the options page.

174
00:12:38.280 --> 00:12:42.320
You should now see the form appearing right below without changing a value.

175
00:12:42.360 --> 00:12:48.330
Try submitting the settings API form you should receive no errors and you should still have the same

176
00:12:48.330 --> 00:12:50.130
values in both forms.

177
00:12:50.130 --> 00:12:53.250
Now try updating one field and save the changes.

178
00:12:53.250 --> 00:12:56.370
You should see the change reflected in both forms.

179
00:12:56.550 --> 00:13:02.310
These two forms do the exact same thing but one is custom and the other is created using the settings

180
00:13:02.310 --> 00:13:03.310
API.

181
00:13:03.330 --> 00:13:05.060
There is no wrong answer here.

182
00:13:05.100 --> 00:13:08.820
You'll find that plugins and themes will use either solution.

183
00:13:08.820 --> 00:13:12.040
Personally I like to create my own you want.

184
00:13:12.090 --> 00:13:15.570
I find it easier to manage but you may not feel that way.

185
00:13:15.600 --> 00:13:21.480
You may like to handle everything through p p without having to worry about the C Ss and JavaScript.

186
00:13:21.540 --> 00:13:22.860
That's perfectly fine.

187
00:13:22.860 --> 00:13:26.910
Use the solution that suits you before I am this lecture.

188
00:13:26.910 --> 00:13:33.150
I want to do one more thing I want to sanitize these values myself using the settings API.

189
00:13:33.180 --> 00:13:34.880
Doing that is very simple.

190
00:13:34.890 --> 00:13:37.410
Go back to the settings API file.

191
00:13:37.410 --> 00:13:41.420
I'm going to minimize everything for a moment so that you can read the code better.

192
00:13:44.050 --> 00:13:50.110
The Register setting function has a third parameter which is optional that can be taken advantage of.

193
00:13:50.110 --> 00:13:55.930
The third parameter accepts a function that will sanitize the input when it submitted the name of this

194
00:13:55.930 --> 00:14:03.500
function will be are ops sanitize to find this function at the very bottom.

195
00:14:03.500 --> 00:14:10.300
This function will be passed in the input this input should have two values.

196
00:14:10.300 --> 00:14:15.640
All I'm going to do is sanitize both these values by running them through the ABS in function.

197
00:14:15.640 --> 00:14:24.000
This will make sure the values are numbers and our absolute lastly you just return the input so that

198
00:14:24.000 --> 00:14:25.920
WordPress can update the option.

199
00:14:26.100 --> 00:14:28.990
That pretty much wraps it up for the settings API.

200
00:14:29.010 --> 00:14:33.690
We will keep working on this plugin but I won't be using the settings API form anymore.

201
00:14:33.690 --> 00:14:36.840
I'm just going to comment it out with HCM l comments.
