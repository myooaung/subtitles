1
00:00:07,280 --> 00:00:12,530
Welcome to the first aside and aside it's a lecture that isn't necessary to watch.

2
00:00:12,530 --> 00:00:16,500
It's more of a bonus lecture for more information about a particular topic.

3
00:00:16,730 --> 00:00:21,180
You're free to skip these lectures and come back to them after you finish this course.

4
00:00:21,320 --> 00:00:27,530
In this first assigned lecture I'm going to show you how to create a walker class in the previous lecture.

5
00:00:27,530 --> 00:00:32,720
I talked about how to create a menu using the WP now menu function.

6
00:00:32,720 --> 00:00:39,380
This function has one extra setting you can set which is the walker key before we get into how the walker

7
00:00:39,380 --> 00:00:40,130
key works.

8
00:00:40,130 --> 00:00:45,240
Let's talk about Walker's in general Walker's aren't specific to just WordPress.

9
00:00:45,290 --> 00:00:47,880
Walker's are a general programming technique.

10
00:00:47,960 --> 00:00:53,070
Basically they are a class or function that takes care of looping through an array.

11
00:00:53,090 --> 00:00:57,930
What's so special about Walker's it that they will loop through nested arrays as well.

12
00:00:57,980 --> 00:01:03,310
It doesn't matter how deep an array it's a walker will loop through every value.

13
00:01:03,320 --> 00:01:08,700
It's simple as that now that we understand how Walker's work.

14
00:01:08,700 --> 00:01:10,500
Let's create one ourselves.

15
00:01:10,620 --> 00:01:16,980
Just like everything else we're going to put this code in a separate file inside the includes directory.

16
00:01:16,980 --> 00:01:24,990
Create a file named custom dash nav dash Walker dot P HB inside this file.

17
00:01:25,090 --> 00:01:33,670
I'm going to create a class named J you underscore custom underscore nav underscore a walker that extends

18
00:01:33,670 --> 00:01:35,410
the walker nav menu class

19
00:01:40,150 --> 00:01:40,760
all right.

20
00:01:40,760 --> 00:01:44,410
At this point you may be wondering why are we using classes.

21
00:01:44,460 --> 00:01:48,910
Well walkers can only be created using object oriented programming.

22
00:01:48,950 --> 00:01:55,310
So using regular functions won't work and you need to parse this video and brush up on your object oriented

23
00:01:55,310 --> 00:01:58,960
programming before proceeding the walker nav menu.

24
00:01:58,960 --> 00:02:04,580
Class we just extended takes care of the heavy lifting for us all talk more about this class and what

25
00:02:04,580 --> 00:02:08,870
it does soon but for now let's use this class even though it's empty.

26
00:02:08,870 --> 00:02:16,280
It'll work as it's back inside the index template search for the menu we created this array we pass

27
00:02:16,340 --> 00:02:21,290
into the WP now many function has an extra option called Walker.

28
00:02:21,290 --> 00:02:30,150
Add that in now the value for this must be set to a new instance of the Walker class we created.

29
00:02:30,150 --> 00:02:36,060
In this case it would be j you underscore custom underscore NAB underscore Walker.

30
00:02:36,090 --> 00:02:37,690
This won't work just yet.

31
00:02:37,710 --> 00:02:44,400
This is because WordPress doesn't know where to find this class inside the functions file include the

32
00:02:44,400 --> 00:02:45,630
walker class file

33
00:02:50,380 --> 00:02:51,820
now that we have that set.

34
00:02:51,850 --> 00:02:55,000
Let's refresh the home page and see the final result.

35
00:02:55,060 --> 00:03:00,460
If everything worked then you should receive no errors and see the menu working normally.

36
00:03:00,460 --> 00:03:01,950
While it may not seem like it.

37
00:03:01,990 --> 00:03:07,930
Wordpress is using our Walker class to generate this menu even though our class is empty.

38
00:03:07,930 --> 00:03:13,650
The class we're extending comes with some default stylings and formatting which is similar to word Press's

39
00:03:13,660 --> 00:03:14,860
default menu.

40
00:03:14,920 --> 00:03:18,340
With that being said leaving it like this isn't practical.

41
00:03:18,370 --> 00:03:22,150
The point of creating a walker class is to customize the menu.

42
00:03:22,150 --> 00:03:24,190
So let's do that now.

43
00:03:24,190 --> 00:03:29,740
Back inside the class I'm going to create a public function called start level.

44
00:03:29,750 --> 00:03:32,100
I'm also going to add in some parameters.

45
00:03:36,410 --> 00:03:41,750
WordPress allows you to override the four functions inside the walker class.

46
00:03:41,750 --> 00:03:47,390
Each of these functions determine when certain h t email is output it will go through each of them one

47
00:03:47,390 --> 00:03:48,280
at a time.

48
00:03:48,320 --> 00:03:50,860
The first function is these start level.

49
00:03:50,870 --> 00:03:55,310
This function is called When WordPress begins looping through a nested array.

50
00:03:55,310 --> 00:03:58,150
This function is passed in three arguments.

51
00:03:58,220 --> 00:04:00,550
The first argument is the output.

52
00:04:00,590 --> 00:04:04,320
You'll notice I'm pre fixing this with an ampersand symbol.

53
00:04:04,340 --> 00:04:07,370
This value is being passed in as a reference.

54
00:04:07,370 --> 00:04:13,040
Usually you would be provided a unique value but since this is passed in as our reference then we're

55
00:04:13,040 --> 00:04:14,620
not provided a unique value.

56
00:04:15,320 --> 00:04:21,710
Instead any changes we make to the output variable will change any instances of the output variable

57
00:04:22,160 --> 00:04:24,780
you'll see that affects us soon enough.

58
00:04:24,830 --> 00:04:25,570
Moving on.

59
00:04:25,610 --> 00:04:28,070
The second argument is the depth.

60
00:04:28,100 --> 00:04:32,090
This is the depth of the menu being generated right now.

61
00:04:32,120 --> 00:04:36,740
Our menu has a depth of zero as there are no sub menu items.

62
00:04:36,740 --> 00:04:40,100
Lastly the third argument is the arguments.

63
00:04:40,100 --> 00:04:44,790
This will be the values you pass into the WP now menu function.

64
00:04:44,810 --> 00:04:47,960
This gives you complete control over your menu.

65
00:04:47,990 --> 00:04:52,110
You can choose to use or ignore the values you pass in.

66
00:04:52,280 --> 00:04:55,590
Now that we understand the basics let's use this function.

67
00:04:55,790 --> 00:05:01,400
In most cases you would just echo out the elements you want to be output ID but that's not the case

68
00:05:01,400 --> 00:05:02,030
here.

69
00:05:02,030 --> 00:05:08,640
Instead you have to make changes directly to the output variable to properly output each GM.

70
00:05:08,780 --> 00:05:14,610
I'm going to keep things simple and set the output variable to Hello.

71
00:05:14,720 --> 00:05:18,250
This is the incorrect way of doing things but that's fine for now.

72
00:05:18,590 --> 00:05:20,350
This is just an example.

73
00:05:20,450 --> 00:05:24,670
I'm going to save my changes and refresh the page after some time.

74
00:05:24,740 --> 00:05:29,880
You'll notice that nothing really changes our menu is still displaying as normal.

75
00:05:29,900 --> 00:05:34,850
This is because the walker class only gets applied to nested menu items.

76
00:05:34,850 --> 00:05:38,500
First level menu items don't use the walker class at all.

77
00:05:38,600 --> 00:05:43,420
It's only when you have some menu items is when the walker class will be used.

78
00:05:43,460 --> 00:05:48,430
Right now I don't have any such menu items so the class will not be used.

79
00:05:48,440 --> 00:05:49,340
Let's change that.

80
00:05:50,000 --> 00:05:55,770
I'm going to open the WordPress admin dashboard and navigate to the menus page on this page.

81
00:05:55,790 --> 00:06:02,860
I'm going to quickly add a sub menu item to any of these main level menu items.

82
00:06:02,890 --> 00:06:05,670
Make sure to save your changes before proceeding.

83
00:06:05,680 --> 00:06:08,830
Once that's done refresh the page one more time.

84
00:06:08,830 --> 00:06:13,650
If you look at the menu now you'll see the hello message being output.

85
00:06:13,660 --> 00:06:17,170
This will also break the menu in page but that's fine.

86
00:06:17,170 --> 00:06:19,300
Let's go back to our editors.

87
00:06:19,330 --> 00:06:22,440
Obviously this isn't the proper way of doing things.

88
00:06:22,450 --> 00:06:27,820
Something I want to note is that whenever you make changes to the output variable you should always

89
00:06:27,880 --> 00:06:31,980
append the value rather than assigning a new one like we're doing here.

90
00:06:31,990 --> 00:06:38,620
I'm going to change this into an unordered list tag and append the value.

91
00:06:38,650 --> 00:06:44,470
The reason I'm creating an unordered list tag is because this function is called When the menu is about

92
00:06:44,470 --> 00:06:45,220
to be generated.

93
00:06:45,760 --> 00:06:50,810
This function gives you the opportunity to set things up before the actual menu was created.

94
00:06:50,830 --> 00:06:56,770
You'll notice I'm not closing this tag either since we're setting things up we don't want to immediately

95
00:06:56,770 --> 00:06:59,670
close the tank before we see this in action.

96
00:06:59,680 --> 00:07:06,640
I want to make sure WordPress is using this Walker so I'm going to add a class named special dash class

97
00:07:08,970 --> 00:07:15,180
this class isn't specific to WordPress or my theme it's just a class I made up on the spot with that

98
00:07:15,180 --> 00:07:15,680
set.

99
00:07:15,690 --> 00:07:18,390
Refresh the page and see the final result.

100
00:07:18,450 --> 00:07:24,840
The page should now be displaying normally even though we didn't close the unordered list tag WordPress

101
00:07:24,840 --> 00:07:29,020
defaults to an unordered list anyway so it closes for us.

102
00:07:29,250 --> 00:07:33,320
If I hover my mouse over the sub menu you'll see it appearing normally.

103
00:07:33,450 --> 00:07:36,720
I'm going to right click and select Inspect.

104
00:07:36,840 --> 00:07:38,710
I want to see the HDMI all.

105
00:07:38,850 --> 00:07:44,760
As you can see the walker class is being used for the sub menu because we have this unordered list tag

106
00:07:44,790 --> 00:07:47,590
being generated with the class we specify.

107
00:07:47,640 --> 00:07:48,570
That's great.

108
00:07:48,600 --> 00:07:55,330
We now have more control over the menu and can assign classes I.D. attributes etc..

109
00:07:55,740 --> 00:08:01,180
Let's learn how to control the rest of the HDMI all generated back inside the editor.

110
00:08:01,200 --> 00:08:04,950
I'm going to create a public function called and level

111
00:08:12,470 --> 00:08:17,170
just like last time we're passed in the same arguments with the same values.

112
00:08:17,210 --> 00:08:23,000
However the output variable contains all the HDMI all from the previous functions.

113
00:08:23,090 --> 00:08:29,260
If we were to override this value than any H2 e-mail generated before this function will cease to exist

114
00:08:29,690 --> 00:08:33,920
we'll keep it simple and just append a closing unordered list tag

115
00:08:38,990 --> 00:08:45,140
so that takes care of the before and after the next step is to work on each individual link.

116
00:08:45,140 --> 00:08:47,530
This will require a little more work.

117
00:08:47,660 --> 00:08:48,380
Right above.

118
00:08:48,500 --> 00:08:56,940
I'm going to create a public function called Start element this function has the same parameters as

119
00:08:56,940 --> 00:08:59,930
the previous functions with two additional add ons.

120
00:09:00,000 --> 00:09:03,350
The second parameter contains the item object.

121
00:09:03,480 --> 00:09:10,430
This object contains information related to the link itself such as the URL title etc..

122
00:09:10,440 --> 00:09:17,340
Lastly we have the I.D. this variable contains the I.D. from a menu item itself.

123
00:09:17,340 --> 00:09:23,910
This may seem strange but WordPress keeps track of all menu items by assigning them an I.D. you can

124
00:09:23,910 --> 00:09:27,560
use this to add special features by using their I.D..

125
00:09:27,900 --> 00:09:31,650
We won't be going that far but you are free to use it if you like.

126
00:09:31,650 --> 00:09:38,910
I'm going to start things off by appending a list tag to the output variable with a class of special

127
00:09:38,970 --> 00:09:41,190
dash class dash item

128
00:09:46,230 --> 00:09:50,370
then I'll append the variable arguments and access the value before

129
00:09:54,010 --> 00:09:59,620
you may be wondering where I'm getting this value the arguments variable contains the values you set

130
00:09:59,710 --> 00:10:06,040
inside the WP NAF made you function in the resource section of this lecture I provide a link to this

131
00:10:06,040 --> 00:10:06,820
function.

132
00:10:06,970 --> 00:10:14,050
If you scroll down to the parameters you'll find two keys called before and after according to the description

133
00:10:14,260 --> 00:10:18,660
you pass in text that will be placed before and after the link.

134
00:10:18,760 --> 00:10:24,040
Since we're creating the walker class we're responsible for outputting these values.

135
00:10:24,220 --> 00:10:29,890
Technically we didn't set these values but it's always good practice to set them in your walker class

136
00:10:29,890 --> 00:10:31,240
regardless.

137
00:10:31,240 --> 00:10:36,940
WordPress does provide a way for plugin developers to override these values but we'll get to that soon

138
00:10:36,940 --> 00:10:37,910
enough.

139
00:10:38,020 --> 00:10:40,180
Back inside the walker class.

140
00:10:40,180 --> 00:10:43,840
I'm going to append both the before and after values.

141
00:10:48,870 --> 00:10:57,990
In between these two values I'm going to set up an anchor link.

142
00:10:58,130 --> 00:11:03,110
First let's start with setting up the H ref attribute inside this attribute.

143
00:11:03,170 --> 00:11:05,810
I'm going to set the value to item you are about

144
00:11:11,000 --> 00:11:16,380
the item variable contains information about the specific menu item in the loop.

145
00:11:16,430 --> 00:11:19,820
It's an object where one of the properties is you are out.

146
00:11:19,850 --> 00:11:25,280
If you're curious on how I know these values then you can just use the prints are a function to output

147
00:11:25,280 --> 00:11:26,180
the data.

148
00:11:26,180 --> 00:11:31,900
If you never know what values a certain object contains then I always recommend you just output it.

149
00:11:32,060 --> 00:11:33,110
Moving right along.

150
00:11:33,110 --> 00:11:36,110
Let's add the text between these two tanks.

151
00:11:36,140 --> 00:11:40,940
I'm going to output the link before link after and the title itself.

152
00:11:48,200 --> 00:11:54,460
Like before the link before and link after are values that can be set inside the DWP.

153
00:11:54,470 --> 00:11:59,160
Now many function the title commas for the item object.

154
00:11:59,210 --> 00:12:01,880
That's all we need to do for the opening element.

155
00:12:01,910 --> 00:12:06,150
You'll notice I'm not closing the list tag that shouldn't be done here.

156
00:12:06,260 --> 00:12:11,030
Instead will need to create a public function called End element

157
00:12:18,320 --> 00:12:28,440
this functions purpose is to close the element which will do by closing the list tag.

158
00:12:28,650 --> 00:12:29,490
That's it.

159
00:12:29,520 --> 00:12:31,120
We're finished with this class.

160
00:12:31,140 --> 00:12:34,380
There's a whole more we should do but I'll cover that soon.

161
00:12:34,380 --> 00:12:38,080
This is usually the minimum set up you'll find yourself doing.

162
00:12:38,100 --> 00:12:41,640
Let's go to the home page and refresh After refreshing.

163
00:12:41,670 --> 00:12:44,190
You should see the menu working as usual.

164
00:12:44,580 --> 00:12:51,180
If you inspect the element then you should see that the special class item class is being applied not

165
00:12:51,210 --> 00:12:57,060
only is it applied to sub menu items but it's also being applied to main level items.

166
00:12:57,060 --> 00:13:04,590
To be clear these start level and end level functions get applied to sub menu items the start elements

167
00:13:04,710 --> 00:13:10,010
and end element functions get applied to all menu items including main level ones.

168
00:13:10,020 --> 00:13:14,940
This is why we see being applied here now that we're finished with the walker class.

169
00:13:15,030 --> 00:13:19,550
Let's explore what else we can do in the resource section of this lecture.

170
00:13:19,560 --> 00:13:22,980
I provide a link to the Walker documentation page.

171
00:13:22,980 --> 00:13:26,530
This page goes into detail about what walkers can do.

172
00:13:26,610 --> 00:13:29,300
Walkers don't apply to just menus.

173
00:13:29,370 --> 00:13:33,350
They can also be used for creating other types of content.

174
00:13:33,420 --> 00:13:35,450
More on that in just a moment.

175
00:13:35,550 --> 00:13:38,110
Let's read what WordPress has to say.

176
00:13:38,130 --> 00:13:44,430
The Walker class was implemented in WordPress two point one to provide developers with a means to traverse

177
00:13:44,430 --> 00:13:48,440
tree like data structures for the purpose of rendering HDMI out.

178
00:13:48,450 --> 00:13:54,960
This is just another way of saying of being able to loop through a nested array so you can output HDMI

179
00:13:54,960 --> 00:13:55,230
out.

180
00:13:55,620 --> 00:14:00,410
Let's scroll down to the very bottom to the section called related classes.

181
00:14:00,420 --> 00:14:05,200
Here is a list of WordPress classes that take advantage of the Walker class.

182
00:14:05,250 --> 00:14:10,740
The difference between these classes and the Walker class is that the Walker class simply loops through

183
00:14:10,740 --> 00:14:11,790
your data.

184
00:14:11,790 --> 00:14:13,520
It doesn't do anything with it.

185
00:14:13,650 --> 00:14:18,090
These classes here take care of using that data and outputting each GM out.

186
00:14:18,360 --> 00:14:24,120
Let's click on the walker nav menu class which we extended in our custom Walker class.

187
00:14:24,150 --> 00:14:27,340
You won't find much written information in this case.

188
00:14:27,390 --> 00:14:29,460
We'll have to study the code ourselves.

189
00:14:29,460 --> 00:14:31,460
Click on the link to the file.

190
00:14:31,740 --> 00:14:35,910
Here you'll find the walker that WordPress uses to generate the many.

191
00:14:36,150 --> 00:14:40,880
As you may notice there's a whole lot more going on than what we had in our own class.

192
00:14:40,890 --> 00:14:45,450
I won't be able to go over every little thing but here's a few things you should know.

193
00:14:46,380 --> 00:14:53,820
First you'll find a lot of backslash T and backslash N Strings appearing in the HMO out the backslash

194
00:14:53,820 --> 00:15:01,290
t tells the browser to tab the H GM out the backslash n tells the browser to put the H GM L on a new

195
00:15:01,290 --> 00:15:02,170
line.

196
00:15:02,190 --> 00:15:07,830
These are used for formatting reasons you don't have to do this as the developer tools are ready.

197
00:15:07,830 --> 00:15:10,420
Take care of formatting your out.

198
00:15:10,500 --> 00:15:17,520
With that being said if you don't use these then it's actually beneficial to you by removing whitespace.

199
00:15:17,580 --> 00:15:22,800
You're essentially making the file size smaller which can allow for faster loading times.

200
00:15:22,800 --> 00:15:25,140
It's up to you whether you want to use them.

201
00:15:25,230 --> 00:15:29,790
The first function here is these start level just like in our own function.

202
00:15:29,790 --> 00:15:33,390
This will output and unordered list tag.

203
00:15:33,380 --> 00:15:38,730
It will also take the time to check if there should be whitespace and it'll take the time to apply certain

204
00:15:38,730 --> 00:15:39,930
attributes.

205
00:15:39,960 --> 00:15:43,500
There are some functions being used here that are WordPress specific.

206
00:15:44,280 --> 00:15:49,200
If you're coming to this lecture after finishing this course then you're most likely familiar with what

207
00:15:49,200 --> 00:15:50,220
these do.

208
00:15:50,250 --> 00:15:52,290
If not that's perfectly fine.

209
00:15:52,290 --> 00:15:56,830
I won't be explaining these functions in this lecture but I will in a future one.

210
00:15:56,850 --> 00:15:59,340
Keep in mind that this is an aside.

211
00:15:59,400 --> 00:16:02,020
You don't have to take this lecture right away.

212
00:16:02,040 --> 00:16:04,760
You can always come back to it anytime.

213
00:16:04,890 --> 00:16:11,310
Moving on the end level function takes care of closing the unordered list tag and checking for whitespace

214
00:16:11,790 --> 00:16:12,630
afterwords.

215
00:16:12,780 --> 00:16:16,570
We have these start element function just like last time.

216
00:16:16,590 --> 00:16:20,150
This will output a list tag with the link inside.

217
00:16:20,290 --> 00:16:25,990
There's a whole lot more going on here but it's mostly checking if certain attributes should be applied.

218
00:16:26,000 --> 00:16:29,760
It will also take care of generating classes once again.

219
00:16:29,760 --> 00:16:33,810
If you don't understand the functions being used here then that's fine.

220
00:16:33,810 --> 00:16:36,930
You'll learn about them as the course progresses.

221
00:16:36,930 --> 00:16:41,670
Lastly we have the NS element function which closes Everything.

222
00:16:41,670 --> 00:16:47,550
This is the default WordPress menu and will work in most situations if you ever need to override the

223
00:16:47,550 --> 00:16:49,260
default HDMI markup.

224
00:16:49,350 --> 00:16:53,150
Then you need to use a walker class for the rest of this course.

225
00:16:53,190 --> 00:16:59,490
We're going to continue using the default Walker class so I'm going to comment out the walker key inside

226
00:16:59,520 --> 00:17:04,610
the WP NAF menu function once you've done that.

227
00:17:04,680 --> 00:17:06,910
Let's move onto the next lecture.

228
00:17:06,920 --> 00:17:08,120
Also you there.
