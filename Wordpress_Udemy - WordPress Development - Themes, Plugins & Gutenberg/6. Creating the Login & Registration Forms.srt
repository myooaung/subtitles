1
00:00:07,460 --> 00:00:12,770
Depending on the complexity of your site you may want to pop in a way for users to register and log

2
00:00:12,770 --> 00:00:14,220
in by default.

3
00:00:14,240 --> 00:00:19,490
WordPress comes with its own log in and registration forms but they're very simple and not appealing

4
00:00:19,490 --> 00:00:20,290
at all.

5
00:00:20,300 --> 00:00:21,210
That's all right.

6
00:00:21,230 --> 00:00:25,010
WordPress can't account for every user situation out there.

7
00:00:25,010 --> 00:00:28,880
Luckily this problem is solved by using third party plugins.

8
00:00:28,910 --> 00:00:33,830
There are dozens and dozens of membership plugins out there originally for this lecture.

9
00:00:33,830 --> 00:00:39,770
I was planning on recommending one and then installing it then I would walk you through on how to set

10
00:00:39,770 --> 00:00:42,890
it up but there were two problems I encountered.

11
00:00:43,040 --> 00:00:46,400
The first problem was that the plugins were extremely bloated.

12
00:00:46,550 --> 00:00:52,430
Now don't get me wrong the plugins were already using have some bloat but they're not so bloated that

13
00:00:52,430 --> 00:00:56,290
they drastically slowed down the site because of features we're not using.

14
00:00:56,300 --> 00:01:01,240
However the membership plugins that were usable have thousands of lines of code that we weren't going

15
00:01:01,240 --> 00:01:05,820
to use such as payment processing custom fields and so much more.

16
00:01:05,870 --> 00:01:11,860
The second problem was finding plugins that were super simple but they weren't exactly developer friendly.

17
00:01:11,960 --> 00:01:17,180
These plugins had their own you guys and it was too much trouble to make the UI match the theme on our

18
00:01:17,180 --> 00:01:17,960
site.

19
00:01:17,960 --> 00:01:20,250
A lot of them were outdated as well.

20
00:01:20,390 --> 00:01:25,760
So rather than using a third party plugin I thought this would be a great opportunity to show you how

21
00:01:25,760 --> 00:01:27,170
to do it yourself.

22
00:01:27,170 --> 00:01:32,360
Before we get started I want to take the time to let you know that membership plugins are extremely

23
00:01:32,360 --> 00:01:34,140
beneficial for any theme.

24
00:01:34,250 --> 00:01:39,590
If you plan on selling your theme then including a feature to packed membership plugin wouldn't be so

25
00:01:39,590 --> 00:01:40,240
bad.

26
00:01:40,370 --> 00:01:41,150
I recommend it.

27
00:01:41,550 --> 00:01:43,790
However for the theme we're creating.

28
00:01:43,790 --> 00:01:48,400
We only need something super simple.

29
00:01:48,440 --> 00:01:50,150
All right let's get started.

30
00:01:50,150 --> 00:01:54,070
Some of the steps we'll be taking won't be anything we haven't done before.

31
00:01:54,080 --> 00:02:00,080
We'll be using a short code to display the form and an ajax request to process the information we'll

32
00:02:00,080 --> 00:02:06,320
be working inside the recipe plugin rather than a custom one just to save some time inside the main

33
00:02:06,320 --> 00:02:07,160
plugin file.

34
00:02:07,160 --> 00:02:16,100
Call the ad short code function the name of the short code will be recipe off form the function to call

35
00:02:16,190 --> 00:02:25,360
is our recipe off form short code create a file inside the includes slash short code directories called

36
00:02:25,450 --> 00:02:28,000
off dash formed up HP.

37
00:02:28,020 --> 00:02:31,150
Define the function here and include it from the main plugin file

38
00:02:37,970 --> 00:02:38,510
next.

39
00:02:38,510 --> 00:02:43,070
Create a file named off dash form dash template dot P HP

40
00:02:45,790 --> 00:02:52,450
this file will contain all the H2 UML for the form inside the Udemy theme folder we have a template

41
00:02:52,480 --> 00:03:01,240
called off dot h t email I'm going to open this up inside my browser here's what that page looks like

42
00:03:01,600 --> 00:03:05,020
we're basically going to try and recreate this page.

43
00:03:05,170 --> 00:03:10,650
If I were to open this template inside the editor and scroll down you'll eventually find the H2 UML

44
00:03:10,660 --> 00:03:11,410
for the form.

45
00:03:18,350 --> 00:03:24,810
To be specific the HP email should be inside the Section tag with the idea of content.

46
00:03:24,950 --> 00:03:32,510
You'll find div tags with the classes call 1 3rd and call to 3rd copy both these elements and their

47
00:03:32,510 --> 00:03:40,580
contents and paste them into the auth form template like so after doing so let's go back to the short

48
00:03:40,580 --> 00:03:41,540
code function.

49
00:03:41,660 --> 00:03:44,500
Just like before we'll be creating a variable.

50
00:03:44,660 --> 00:03:49,850
I'm going to call it form H GM L and its value will be the value returned by the file.

51
00:03:49,850 --> 00:03:54,330
Get contents function with the template in the first parameter and true as the second.

52
00:03:54,890 --> 00:04:01,050
Then I'll just return the HCM out let's test this out now.

53
00:04:01,280 --> 00:04:04,450
I'm going to create a brand new page with a title.

54
00:04:04,460 --> 00:04:13,200
My account the content will be the short code recipe auth form the template will also need to be set

55
00:04:13,200 --> 00:04:14,630
to full width.

56
00:04:14,670 --> 00:04:17,790
Once you've made those changes save the page and then view it

57
00:04:23,210 --> 00:04:26,210
you should more or less have what I have on my screen.

58
00:04:26,210 --> 00:04:31,820
We can now begin authenticating the user the very first thing we should do is make sure the form is

59
00:04:31,820 --> 00:04:33,670
secure for submission.

60
00:04:33,680 --> 00:04:39,620
There are various ways you can go about this but WordPress provides a solution called nonsense in the

61
00:04:39,620 --> 00:04:41,530
resource section of this lecture.

62
00:04:41,560 --> 00:04:44,550
I provide a link for more information about this topic.

63
00:04:44,630 --> 00:04:52,430
Let's take a look at what WordPress has to say about ns a nonce is a number used once to help protect

64
00:04:52,460 --> 00:04:57,010
you or else in forms from certain types of misuse malicious or otherwise.

65
00:04:57,140 --> 00:05:03,740
WordPress NS aren't numbers but are a hash made up of numbers and letters nor are they used only once

66
00:05:03,890 --> 00:05:07,270
but have a limited lifetime after which they expire.

67
00:05:07,370 --> 00:05:13,160
During that time period the same nonce will be generated for a given user in a given context.

68
00:05:13,160 --> 00:05:18,770
The nonce for that action will remain the same for that user until that nonce lifecycle has completed

69
00:05:19,430 --> 00:05:25,910
WordPress is security tokens are called non says despite the above noted differences from two Ns because

70
00:05:25,910 --> 00:05:32,240
they serve much the same purpose as nonsense do they help protect against several types of attacks including

71
00:05:32,240 --> 00:05:39,320
CSR F but do not protect against replay attacks because they aren't checked for one time use nonsense

72
00:05:39,350 --> 00:05:45,500
should never be relied on for authentication or authorization access control protect your functions

73
00:05:45,530 --> 00:05:53,270
using current user can always assume Nazis can be compromised so as WordPress states this helps you

74
00:05:53,270 --> 00:05:59,150
create a layer of security by using a token for verifying the form submission but it's not completely

75
00:05:59,150 --> 00:06:00,200
foolproof.

76
00:06:00,320 --> 00:06:04,290
The rest of this documentation goes over how to use Nazis.

77
00:06:04,310 --> 00:06:06,940
I suggest reading it fully after this lecture.

78
00:06:07,610 --> 00:06:09,780
So here's what we'll want to do.

79
00:06:09,860 --> 00:06:12,770
I want to load a nonce inside the template.

80
00:06:12,770 --> 00:06:18,500
The process will be simple we'll just generate the nonce and then load it in the template using placeholders

81
00:06:18,860 --> 00:06:21,340
inside the template file at the very top.

82
00:06:21,350 --> 00:06:30,840
I'm going to add a place holder called nonce underscore field underscore P H then inside the short code

83
00:06:30,840 --> 00:06:31,590
function.

84
00:06:31,590 --> 00:06:35,990
I'm going to perform a simple string replace call like we've always have

85
00:06:42,090 --> 00:06:43,200
for the replacement.

86
00:06:43,260 --> 00:06:48,560
We'll be calling a function called WP nonce field.

87
00:06:48,600 --> 00:06:54,600
This will take care of generating a nonce value while also creating an input field containing this value

88
00:06:55,360 --> 00:06:56,820
in the resource section.

89
00:06:56,820 --> 00:06:59,080
I provide a link to this function.

90
00:06:59,100 --> 00:07:02,070
There are four parameters which are all optional.

91
00:07:02,070 --> 00:07:08,040
The first one is always recommended though the action name is a way to reference this field.

92
00:07:08,040 --> 00:07:13,800
You should set one as you'll need to verify it later on you'll see how this works in just a moment.

93
00:07:13,800 --> 00:07:22,190
For now I'm going to set it to recipe off the next parameter is name for the input field.

94
00:07:22,320 --> 00:07:25,660
By default it's underscored w peanuts.

95
00:07:25,710 --> 00:07:27,930
I'm going to set this to the default.

96
00:07:27,930 --> 00:07:34,490
The third parameter is whether to include a refer a refer is the euro but the request was submitted

97
00:07:34,490 --> 00:07:34,900
on.

98
00:07:35,070 --> 00:07:39,480
It's always good practice to make sure the form was submitted on this page and not through some other

99
00:07:39,480 --> 00:07:40,330
site.

100
00:07:40,350 --> 00:07:46,150
I'm going to set this as true the fourth parameter determines whether this field should be output ID

101
00:07:46,170 --> 00:07:47,390
or returned.

102
00:07:47,400 --> 00:07:53,430
Set this to false which will return the field rather than output it lets verify that the fields are

103
00:07:53,430 --> 00:07:57,810
being generated and output it by refreshing the page and checking the HDMI out

104
00:08:03,080 --> 00:08:08,820
using the developer tools you'll find two hidden input fields appear right before our forms.

105
00:08:08,900 --> 00:08:14,480
Traditionally you'll want these fields to appear inside the forum but we won't concern ourselves with

106
00:08:14,480 --> 00:08:21,710
that since we'll be using J query and Ajax to submit the form open the main dot J.S. file this is the

107
00:08:21,710 --> 00:08:24,190
same file that contains the rating code.

108
00:08:24,410 --> 00:08:28,100
We'll be working inside this file for all our javascript needs.

109
00:08:28,100 --> 00:08:33,530
Once again I'll be using the on method for listening to a form submission and preventing the default

110
00:08:33,530 --> 00:08:40,710
behavior.

111
00:08:40,760 --> 00:08:45,110
We have this div tag with an I.D. of registered dash status.

112
00:08:45,110 --> 00:08:50,800
I'm going to modify its age team all contents and let the user know their account is being created.

113
00:08:50,840 --> 00:08:53,990
Then I'll just hide the form to prevent resubmission

114
00:09:00,520 --> 00:09:01,030
next.

115
00:09:01,120 --> 00:09:08,200
I'm going to create the form object like before the action will be recipe create accounts the other

116
00:09:08,200 --> 00:09:16,590
5 values will just be the forms input fields the last property I want to create will be called underscored

117
00:09:16,600 --> 00:09:18,240
WP knots.

118
00:09:18,320 --> 00:09:19,570
It's important you name it.

119
00:09:19,570 --> 00:09:23,850
This as WordPress will be expecting this field when verifying the knots.

120
00:09:23,870 --> 00:09:26,930
The value will be grabbed from the hidden input field.

121
00:09:27,110 --> 00:09:33,630
The idea of the input field should be underscored WP notes.

122
00:09:33,700 --> 00:09:43,940
The last thing I want to do is make a J query post request.

123
00:09:44,100 --> 00:09:46,440
It's the exact same way as we did it before.

124
00:09:46,440 --> 00:09:52,860
Except I'm going to be using promises the always method behaves similar to the previous way we did it.

125
00:09:52,860 --> 00:09:55,960
It will accept a function where the response is passed into it.

126
00:09:56,190 --> 00:10:02,230
Just like last time we'll check the status property and display an appropriate message to the end user.

127
00:10:02,310 --> 00:10:07,260
If the registration was a success we'll just let the user know they can register.

128
00:10:07,260 --> 00:10:11,000
Otherwise we'll tell them it was a failure and display the form again.

129
00:10:13,490 --> 00:10:14,420
Nothing new here.

130
00:10:14,420 --> 00:10:15,790
Pretty simple stuff.

131
00:10:15,860 --> 00:10:20,210
All right so that basically sets up the front end in the next lecture.

132
00:10:20,210 --> 00:10:22,970
We'll process the data and create a new user.
