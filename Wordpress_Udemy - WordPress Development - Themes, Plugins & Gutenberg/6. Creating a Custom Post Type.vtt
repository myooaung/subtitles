WEBVTT
1
00:00:07.530 --> 00:00:10.340
WordPress sites are great at holding content.

2
00:00:10.380 --> 00:00:12.950
Got some words and pictures you want to show to the world.

3
00:00:12.960 --> 00:00:15.560
Wordpress is a great tool for that job.

4
00:00:15.570 --> 00:00:18.080
I'd even argue that at least some capacities.

5
00:00:18.090 --> 00:00:21.360
It's clearly the best for it in some situations.

6
00:00:21.360 --> 00:00:26.520
You'll find yourself wanting to just play different types of content WordPress only provides you with

7
00:00:26.520 --> 00:00:30.760
two types of content you can create which are posts and pages.

8
00:00:30.990 --> 00:00:36.080
It is possible to work with these two default content types but it can be a hassle.

9
00:00:36.400 --> 00:00:42.010
For example let's say you wanted to create a post for a recipe for recipe posts.

10
00:00:42.060 --> 00:00:49.530
You may want to display a rating ingredients time required etc. with just the default content types

11
00:00:49.620 --> 00:00:56.250
you would have to constantly format each post and even keep track which posts or recipes even if you

12
00:00:56.250 --> 00:00:59.110
mangled a default post type to serve the purpose.

13
00:00:59.160 --> 00:01:01.680
The concept just doesn't fit well.

14
00:01:01.740 --> 00:01:06.620
Wouldn't it be great if we could separate regular posts and recipe posts.

15
00:01:06.660 --> 00:01:10.310
That's completely possible with custom post types.

16
00:01:10.350 --> 00:01:16.650
Wordpress is all about creating content and making it easy to do so with that said there are various

17
00:01:16.650 --> 00:01:20.450
kinds of content and WordPress can't account for all of it.

18
00:01:20.460 --> 00:01:23.400
We want the recipe plugin to have its own pages.

19
00:01:23.400 --> 00:01:29.370
We want to take advantage of the categories and tags and all the editors that come with posts but on

20
00:01:29.370 --> 00:01:35.760
its own page it would be quite cumbersome to have to set this all up but WordPress provides an easy

21
00:01:35.760 --> 00:01:37.070
way to do this.

22
00:01:38.840 --> 00:01:44.030
In the resource section I provide a link to the post types Codex page by default.

23
00:01:44.030 --> 00:01:52.370
WordPress provides 5 post types which are post page attachment revision and menu we are allowed to create

24
00:01:52.370 --> 00:01:58.850
our own or extend these let's create a custom post type inside the main plugin file.

25
00:01:58.850 --> 00:02:06.660
We're going to add an action hook called init this hook a sugared WordPress begins to initialize the

26
00:02:06.660 --> 00:02:08.820
data required for the current page.

27
00:02:08.880 --> 00:02:11.670
This hook should be used to help set up your plugin.

28
00:02:12.030 --> 00:02:15.370
The function we want to call is recipe in it.

29
00:02:15.390 --> 00:02:18.100
This is where we should set up our custom post type.

30
00:02:18.180 --> 00:02:24.980
Let's create a file called init dot P HP inside the includes folder and define the function here.

31
00:02:24.990 --> 00:02:27.060
Make sure to include it from your plugin file

32
00:02:30.540 --> 00:02:31.980
in the resource section.

33
00:02:31.980 --> 00:02:35.490
You'll find a link to the register post type function.

34
00:02:35.490 --> 00:02:40.450
This function is extensively documented so I suggest you take some time to read it.

35
00:02:40.470 --> 00:02:42.100
After this lecture is over.

36
00:02:42.240 --> 00:02:48.570
Go down to the user contributed notes section we're going to copy and paste this bit of code into the

37
00:02:48.570 --> 00:02:49.380
init function

38
00:02:53.480 --> 00:02:55.280
let's go over what this does.

39
00:02:55.280 --> 00:03:01.910
First up we have this labels array all these values are actually just pieces of text that will appear

40
00:03:01.910 --> 00:03:03.660
throughout the custom post type.

41
00:03:03.680 --> 00:03:05.920
Most of them are self-explanatory.

42
00:03:06.080 --> 00:03:10.960
You can refer to the documentation to learn more about where these labels will appear.

43
00:03:10.970 --> 00:03:14.360
You'll also notice that each label is translated.

44
00:03:14.510 --> 00:03:18.240
There's a new translation function called underscore X..

45
00:03:18.290 --> 00:03:23.360
This function is the same as the double underscore function except the second parameter allows you to

46
00:03:23.360 --> 00:03:24.740
add a context.

47
00:03:24.740 --> 00:03:29.150
This is useful for when you have two words that are the same but they have different meanings in the

48
00:03:29.150 --> 00:03:30.960
current translation.

49
00:03:31.010 --> 00:03:36.160
For example the word Bass is spelled the same but there are two meanings.

50
00:03:36.200 --> 00:03:39.710
It can either mean the fish bass or the instrument base.

51
00:03:39.740 --> 00:03:45.260
Therefore the underscore X function can be useful to let the translator know about the various meanings

52
00:03:45.500 --> 00:03:48.710
and what the word currently being translated means.

53
00:03:48.800 --> 00:03:51.710
It doesn't really do anything for the plugin itself.

54
00:03:51.710 --> 00:03:57.290
It's just helpful for the translator let's change the text domain for each of these functions to our

55
00:03:57.290 --> 00:03:59.090
text domain which is recipe

56
00:04:08.130 --> 00:04:08.680
next.

57
00:04:08.700 --> 00:04:13.800
I want you to change each text value to recipe instead of books like so

58
00:04:18.640 --> 00:04:24.700
WordPress will take care of placing these labels in the appropriate spot even though it's not necessary.

59
00:04:24.700 --> 00:04:28.050
I'm going to leave the underscore X function alone.

60
00:04:28.180 --> 00:04:33.120
We are allowed to change these to the double underscore function but that's not necessary.

61
00:04:33.340 --> 00:04:39.240
And there's not much difference between these two besides the context parameter I mentioned earlier.

62
00:04:39.250 --> 00:04:41.730
Next up is the arguments array.

63
00:04:41.860 --> 00:04:45.520
This will contain a list of settings for the custom post type.

64
00:04:45.550 --> 00:04:47.950
The first one is the label's key.

65
00:04:47.950 --> 00:04:51.880
This will be set to the labels array we created previously.

66
00:04:51.880 --> 00:04:53.950
Next up is the description.

67
00:04:53.950 --> 00:04:58.710
This wasn't provided with the example so I'm going to add it in right app on the labels.

68
00:04:58.720 --> 00:05:01.680
This is just a symbol description about the custom post type.

69
00:05:02.200 --> 00:05:11.120
I'm going to set this to a custom post type for recipes the public value is whether or not the content

70
00:05:11.150 --> 00:05:15.020
generated from this post type is available globally throughout the site.

71
00:05:15.020 --> 00:05:22.100
Set this to true since we want it to be public publicly query able asks if this post type can be used

72
00:05:22.100 --> 00:05:23.940
in your URL to query it.

73
00:05:23.960 --> 00:05:30.710
This should also be true show UI asks if WordPress should generate a UI for you.

74
00:05:30.870 --> 00:05:35.130
Set this to true as we do want WordPress to generate the UI for us.

75
00:05:35.250 --> 00:05:38.410
We will later extend this UI to suit our needs.

76
00:05:38.700 --> 00:05:44.520
Show in menu asks us if this post type should appear in the menu of the item and dashboard.

77
00:05:44.520 --> 00:05:51.720
Set this to true query var works hand-in-hand with publicly query able to help with adding the post

78
00:05:51.720 --> 00:05:53.770
type to query var array.

79
00:05:53.790 --> 00:05:56.120
This value should be true.

80
00:05:56.190 --> 00:06:00.680
Rewrite allows us to customize the URL for our custom post type.

81
00:06:00.840 --> 00:06:05.030
This accepts in an array but we only want to change the slug.

82
00:06:05.310 --> 00:06:13.870
Let's set this to recipe you'll see what this looks like when we create a recipe the capability type.

83
00:06:13.870 --> 00:06:19.130
It's a special setting it allows you to define how this post type is handled by users.

84
00:06:19.240 --> 00:06:24.880
For example who gets the published recipes and who gets to review other recipes etc..

85
00:06:24.880 --> 00:06:27.820
There are two ways we can go about setting this value.

86
00:06:27.820 --> 00:06:34.390
We can create an array with all the permissions or we can just put in post by setting it to post you're

87
00:06:34.390 --> 00:06:37.090
telling WordPress to set up the permissions for you.

88
00:06:37.420 --> 00:06:41.760
WordPress will use the same permissions it uses for its other post types.

89
00:06:41.770 --> 00:06:46.160
This means that contributors can create recipes but can't publish.

90
00:06:46.240 --> 00:06:50.340
Editors can modify recipes and unpublished them as well.

91
00:06:50.350 --> 00:06:53.780
Basically this takes care of permissions and such.

92
00:06:53.830 --> 00:06:58.700
Moving on the has archive asks if our post type will have an archive.

93
00:06:59.110 --> 00:07:06.070
Let's leave this as true hierarchical asks if our plugin allows for recipes to have parent recipes and

94
00:07:06.070 --> 00:07:07.560
so on and so forth.

95
00:07:07.630 --> 00:07:13.060
In our case it doesn't make much sense for our recipe to be built on top of another so we're going to

96
00:07:13.060 --> 00:07:18.240
leave this as false menu position is the location of the menu item.

97
00:07:18.400 --> 00:07:20.420
I'm going to change this to 20.

98
00:07:20.470 --> 00:07:22.900
This value should be experimental for you.

99
00:07:23.050 --> 00:07:28.390
If you believe that your custom post type should be placed at the top then you should set this to 1

100
00:07:28.900 --> 00:07:35.170
the lower the number the higher it's placed on top of the menu supports is a very important value to

101
00:07:35.170 --> 00:07:35.980
set.

102
00:07:35.980 --> 00:07:43.270
Let's take a look at the documentation for a second.

103
00:07:43.300 --> 00:07:46.760
This is an array of components we can add to our post type.

104
00:07:46.870 --> 00:07:48.340
What are they exactly.

105
00:07:48.340 --> 00:07:55.570
Well if we take a look at a regular post you can see we have this title field a content editor categories

106
00:07:55.660 --> 00:08:02.830
tags etc. We can actually use those in our post type without having to actually recreate them ourselves.

107
00:08:02.860 --> 00:08:07.420
Here's what we want to add support for Title editor author.

108
00:08:07.520 --> 00:08:13.210
Dumb now we don't want excerpts or comments.

109
00:08:13.240 --> 00:08:21.550
There is one more value we want to add and that's taxonomy is taxonomy is may seem like a complex term

110
00:08:21.580 --> 00:08:27.390
but it isn't taxonomy is are basically just words or phrases related to our posts.

111
00:08:27.430 --> 00:08:33.460
For example when you create tags the WordPress search engine will search for those tags and find what

112
00:08:33.460 --> 00:08:35.500
posts have those tanks.

113
00:08:35.500 --> 00:08:41.470
You can create your own taxonomy is what we want to take advantage of WordPress is built in taxonomy.

114
00:08:41.740 --> 00:08:45.460
In our case we want to take advantage of categories and tags.

115
00:08:45.730 --> 00:08:50.830
So this keys value should be iterate with category and post tag

116
00:08:55.510 --> 00:08:57.060
before we declare this finished.

117
00:08:57.070 --> 00:09:03.100
There are two things we want to check for this course we'll be using the Gutenberg editor for maximum

118
00:09:03.100 --> 00:09:08.960
compatibility Gutenberg requires two settings for it to appear in the supports array.

119
00:09:09.010 --> 00:09:12.080
We have to make sure the editor value is there.

120
00:09:12.130 --> 00:09:13.440
We already set that earlier.

121
00:09:13.480 --> 00:09:18.460
So that takes care of the first setting and the second setting is the show in rest.

122
00:09:18.460 --> 00:09:23.080
Keep I'm going to set this to true.

123
00:09:23.270 --> 00:09:26.480
WordPress has something called the rest api.

124
00:09:26.480 --> 00:09:31.670
We haven't talked about that yet but all you need to know is that the Gutenberg editor requires the

125
00:09:31.670 --> 00:09:34.450
setting to be true in a future lecture.

126
00:09:34.460 --> 00:09:37.370
I will go over the rest api in depth.

127
00:09:37.370 --> 00:09:43.820
Don't worry if you don't fully understand now all we have to do is call the function register post.

128
00:09:43.820 --> 00:09:50.490
Type the first parameter is the name of our post type which is recipe.

129
00:09:50.530 --> 00:09:53.940
The second parameter is all the settings for the post type.

130
00:09:54.190 --> 00:10:01.820
Refresh the item in dashboard and you should now see the recipe post type being displayed just like

131
00:10:01.820 --> 00:10:02.210
that.

132
00:10:02.240 --> 00:10:05.210
WordPress will generate all these pages for us.

133
00:10:05.210 --> 00:10:07.710
You can even see our labels being output.

134
00:10:07.970 --> 00:10:12.410
You can create recipes and manage them easily using the word press you want.

135
00:10:12.530 --> 00:10:14.620
All it took was a few lines of code.

136
00:10:14.720 --> 00:10:17.230
We can now begin extending this post type.
