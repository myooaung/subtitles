1
00:00:07,950 --> 00:00:10,330
We have a fully functional plugin.

2
00:00:10,380 --> 00:00:14,270
The code is clean organized and secure for wordpress.

3
00:00:14,280 --> 00:00:20,010
However there may be people out there who disagree for one reason or another they may have found another

4
00:00:20,050 --> 00:00:22,670
plugin that's even better in such cases.

5
00:00:22,710 --> 00:00:29,130
They will uninstall our plug in our plug and does a pretty good job of cleaning itself up when deactivated.

6
00:00:29,130 --> 00:00:31,450
But what about for on installation.

7
00:00:31,470 --> 00:00:35,540
This is a common problem among thousands of plugins available to you.

8
00:00:35,580 --> 00:00:41,350
They spend so much time adding to your database and system during activation but rarely do any clean

9
00:00:41,350 --> 00:00:43,590
up during an installation.

10
00:00:43,590 --> 00:00:45,970
We don't want to be one of those developers.

11
00:00:46,080 --> 00:00:49,440
We want to clean up after ourselves once we get the boot.

12
00:00:49,440 --> 00:00:51,600
WordPress makes it easy for us.

13
00:00:51,630 --> 00:00:55,320
There are two ways to clean up but one is better than the other.

14
00:00:55,350 --> 00:00:57,370
The first way is to use a hook.

15
00:00:57,440 --> 00:01:01,670
There is a special hook called when WordPress on installs a plugin.

16
00:01:01,710 --> 00:01:07,040
However despite its availability WordPress highly recommends we don't use it.

17
00:01:07,050 --> 00:01:13,410
Instead they recommend the second way which is to create a file named uninstalled P HP that handles

18
00:01:13,410 --> 00:01:14,590
the cleanup.

19
00:01:14,700 --> 00:01:22,980
Let's create that file now inside the recipe plugin folder any code placed here will run when a user

20
00:01:22,980 --> 00:01:25,440
clicks uninstall for our plugin.

21
00:01:25,460 --> 00:01:31,350
There is one precaution we must take before running any code and that is to check if this file was executed

22
00:01:31,350 --> 00:01:32,690
by WordPress.

23
00:01:32,730 --> 00:01:38,810
You can do this by simply checking if a constant named WP uninstall plugin is defined.

24
00:01:38,880 --> 00:01:44,640
If it isn't then it will simply exit out of this script.

25
00:01:44,720 --> 00:01:50,070
The only thing we want to do is delete any tables we created during activation.

26
00:01:50,090 --> 00:01:53,390
We're going to use the w PDB object again.

27
00:01:53,510 --> 00:01:59,020
We're going to call the query method and use the following query drop table if exists.

28
00:01:59,110 --> 00:02:02,630
W PDB prefix recipe underscore ratings

29
00:02:08,530 --> 00:02:10,050
before we test this plugin.

30
00:02:10,120 --> 00:02:16,090
I want to back up the plugin open the plugins folder in your file explorer and let's zip up this folder

31
00:02:16,090 --> 00:02:23,610
before doing anything else let's try testing this out now open Heidi Eskew will and check your database

32
00:02:23,610 --> 00:02:25,200
for the recipe ratings table.

33
00:02:27,550 --> 00:02:31,180
Then let's go to the plugins page and deactivate the plugin.

34
00:02:31,330 --> 00:02:36,240
Click Delete and you will be asked if you're sure you want to delete this plugin and its data.

35
00:02:36,310 --> 00:02:39,820
Select Yes and our plugin will disappear from WordPress

36
00:02:42,990 --> 00:02:47,080
if I look at my folders then you'll see that the recipe folder is gone.

37
00:02:47,130 --> 00:02:52,520
If I refresh the database then you'll find a recipe ratings table is also gone.

38
00:02:52,560 --> 00:02:56,760
We've successfully cleaned up after ourselves before we end this lecture.

39
00:02:56,760 --> 00:03:00,990
Let's add our plugin back by using the zip file we created earlier.

40
00:03:01,020 --> 00:03:03,570
Make sure to activate it as well.

41
00:03:03,630 --> 00:03:09,540
A question I get asked a lot is if we should also delete the content for the post type metadata and

42
00:03:09,540 --> 00:03:12,950
taxonomy is the answer is it depends.

43
00:03:12,960 --> 00:03:16,020
There are plugins out there that will delete unused data.

44
00:03:16,080 --> 00:03:19,120
So I prefer to let those plugins handle it.

45
00:03:19,140 --> 00:03:24,000
The reason we're not doing it ourselves is because there's a possibility that the data may still be

46
00:03:24,000 --> 00:03:24,960
in use.

47
00:03:24,960 --> 00:03:31,200
Keep in mind that our plugin makes certain content accessible and manageable through our own interface.

48
00:03:31,200 --> 00:03:37,050
However there are other plugins that can also access our data using the WordPress API.

49
00:03:37,050 --> 00:03:42,990
The recipe table we deleted was a custom table so it's highly unlikely a plugin will know how to work

50
00:03:42,990 --> 00:03:45,350
with it let alone know its existence.

51
00:03:45,360 --> 00:03:48,850
That table was outside the scope of WordPress as API.

52
00:03:48,900 --> 00:03:51,010
Therefore we should clean it up.

53
00:03:51,240 --> 00:03:55,520
Custom post type data and metadata are things within WordPress as scope.

54
00:03:55,560 --> 00:03:58,570
So it's perfectly fine to leave that data there.

55
00:03:58,650 --> 00:04:04,150
We can leave it to other plugins to clean that up if the user needs that at the end of the day.

56
00:04:04,170 --> 00:04:09,300
It's up to you if you want to delete the custom post type data then that's perfectly fine.
