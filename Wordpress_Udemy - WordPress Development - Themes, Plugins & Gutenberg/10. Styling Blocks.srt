1
00:00:07,640 --> 00:00:10,340
We're going to load in some styles for our block.

2
00:00:10,340 --> 00:00:13,160
I'm going to go over two approaches for this.

3
00:00:13,190 --> 00:00:15,410
The first approach is the simplest one.

4
00:00:15,410 --> 00:00:21,410
All you have to do is open the blocks in queue file and then in cue the styles file it would just be

5
00:00:21,410 --> 00:00:23,520
a regular CSX file.

6
00:00:23,570 --> 00:00:28,560
You don't have to use any special tools or libraries to create the CSX file.

7
00:00:28,640 --> 00:00:31,730
With that being said I prefer another solution.

8
00:00:31,760 --> 00:00:37,460
I tend to tackle a lot of large projects so I usually have a setup that's a bit more complex than a

9
00:00:37,460 --> 00:00:41,060
simple CSX file.

10
00:00:41,130 --> 00:00:44,880
I like to use something called SAS or SPSS.

11
00:00:44,880 --> 00:00:47,790
SAS is a CSX pretty processor.

12
00:00:47,790 --> 00:00:49,310
What does a pretty processor.

13
00:00:49,380 --> 00:00:54,780
Basically you write SAS code that will then be converted into CSX code.

14
00:00:54,780 --> 00:00:59,860
SAS is not supported by browsers so the code needs to be processed beforehand.

15
00:01:00,030 --> 00:01:02,560
SAS code is written just like CSX.

16
00:01:02,640 --> 00:01:05,910
You input a selector and then modify its properties.

17
00:01:05,910 --> 00:01:13,950
SAS adds features like variables conditional statements loops vendor prefixes etc. CSX files can grow

18
00:01:13,950 --> 00:01:19,670
to be thousands of lines of code with SAS managing your CSF becomes easier.

19
00:01:19,740 --> 00:01:22,530
You can split your code in two separate files.

20
00:01:22,530 --> 00:01:25,710
Let's say you had a variable that contained the color blue.

21
00:01:25,710 --> 00:01:30,990
If you had multiple files that use that variable and you wanted to update the color then you only need

22
00:01:30,990 --> 00:01:35,700
to modify the variables value and everything else will update accordingly.

23
00:01:35,700 --> 00:01:42,600
If you look around you'll find that some people refer to it as SPSS SPSS is the newer version and the

24
00:01:42,600 --> 00:01:46,940
one will be using the SAS version is the older one but it's still used.

25
00:01:46,950 --> 00:01:49,700
So you may come across this version as well.

26
00:01:49,800 --> 00:01:56,000
These terms can be interchangeable but know the difference for our purposes it's a bit excessive.

27
00:01:56,040 --> 00:02:03,540
However if you're working on an ambitious or large project then it would be beneficial to use it.

28
00:02:03,590 --> 00:02:08,000
I won't be able to go every feature of SAS but that's perfectly fine.

29
00:02:08,000 --> 00:02:10,640
SAS is written just like CSX.

30
00:02:10,640 --> 00:02:15,800
If you know CSX then you'll be able to pick up on it quickly if you already know SAS.

31
00:02:15,800 --> 00:02:18,440
Then you'll learn how to add it to your workflow.

32
00:02:18,440 --> 00:02:19,930
Let's begin.

33
00:02:19,930 --> 00:02:25,970
First we need to install and configure a couple of modules all provide links in the resource section

34
00:02:25,970 --> 00:02:27,040
of this lecture.

35
00:02:27,050 --> 00:02:28,880
Be sure to check them out.

36
00:02:28,940 --> 00:02:32,330
The first module we'll need is the wall loader module.

37
00:02:32,330 --> 00:02:36,440
As you may know the import statement allows us to import modules.

38
00:02:36,500 --> 00:02:40,530
However we're limited to importing just JavaScript files.

39
00:02:40,550 --> 00:02:47,510
Let's say I wanted to import a CSX file like so this would give us an error by adding this module we'll

40
00:02:47,510 --> 00:02:49,790
be able to load in any file.

41
00:02:49,850 --> 00:02:54,170
This includes text HCM L and even C Ss files.

42
00:02:54,170 --> 00:02:58,410
Once this module is loaded a line like this will work just fine.

43
00:02:58,460 --> 00:03:01,880
The next module we'll need is the node SAS module.

44
00:03:01,880 --> 00:03:08,450
SAS is written with the programming language C however we want to be able to use it with JavaScript.

45
00:03:08,450 --> 00:03:15,590
This module will take care of allowing us to do so afterwards we'll need these SAS loader module Westpac

46
00:03:15,590 --> 00:03:20,330
pack and SAS are two different things the SAS loader module will take care of.

47
00:03:20,330 --> 00:03:27,110
Bridging these two together so that Webb pack can process the Files up next we'll need the mini C CSX

48
00:03:27,140 --> 00:03:30,240
extract plug in module when we load CSX.

49
00:03:30,260 --> 00:03:32,990
It will be a part of the javascript code base.

50
00:03:32,990 --> 00:03:34,790
However we don't want that.

51
00:03:34,820 --> 00:03:37,900
We want to put the CSX into its own file.

52
00:03:37,910 --> 00:03:41,490
This module allows you to extract text from your files.

53
00:03:41,660 --> 00:03:48,110
For example if your file had the text hello then you could extract that and put it into its own file.

54
00:03:48,110 --> 00:03:53,780
The way we'll use it is to extract CSX and placed the CSX into its own file.

55
00:03:53,780 --> 00:03:56,640
Lastly we have these CSX loader module.

56
00:03:56,780 --> 00:04:02,720
This module will take care of properly loading CSX files just in case the raw loader module can't.

57
00:04:02,930 --> 00:04:06,240
Quite a few modules but they aren't hard to configure.

58
00:04:06,290 --> 00:04:11,750
Once you've configured them then you can forget about them and work on your project to get started.

59
00:04:11,750 --> 00:04:17,990
We'll need to install these modules switch to your command line and C D into the blocks directory

60
00:04:20,710 --> 00:04:30,310
run the following command NPM ie raw dash loader no dash SAS SAS dash loader C Ss dash loader mini dash

61
00:04:30,310 --> 00:04:35,410
C S extract dash plugin dash dash save dash Dev

62
00:04:41,150 --> 00:04:46,390
you're more than free to install multiple modules you just chain them one after the other.

63
00:04:46,490 --> 00:04:48,920
This may take a while for some of you so be patient

64
00:04:54,160 --> 00:04:55,910
after the modules have been installed.

65
00:04:55,930 --> 00:05:00,920
Check the package file it should contain the dependencies and their versions.

66
00:05:00,940 --> 00:05:07,630
The next step is to configure these modules open the web page config file we created earlier right at

67
00:05:07,630 --> 00:05:11,350
the top load the mini CSX extract plug in module

68
00:05:17,370 --> 00:05:23,820
next we need to create new instances of a plugin I'm going to add a comment below that says extract

69
00:05:23,820 --> 00:05:25,560
CSX for Gutenberg Ed

70
00:05:30,040 --> 00:05:33,750
create a constant named Ed CSX plugin.

71
00:05:33,880 --> 00:05:37,690
This will be set to a new instance of B.C. assess extract module

72
00:05:42,830 --> 00:05:47,690
the plugin requires that we pass in a path to a file that will contain the final result.

73
00:05:47,690 --> 00:05:52,310
This will be relative to the path specified inside the output property.

74
00:05:52,310 --> 00:05:59,150
First passing an object inside this object defined a property called file name set to the value of blocks

75
00:05:59,210 --> 00:05:59,820
Dash.

76
00:05:59,840 --> 00:06:01,550
Name dot CSX

77
00:06:04,260 --> 00:06:04,760
next.

78
00:06:04,770 --> 00:06:10,530
We need to tell the plug in to use the loaders loaders are responsible for connecting third party modules

79
00:06:10,530 --> 00:06:11,670
to web pack.

80
00:06:11,670 --> 00:06:12,510
We have to.

81
00:06:12,540 --> 00:06:17,670
Which are these CSX loader and SAS loader modules just to save some time.

82
00:06:17,670 --> 00:06:24,970
I'm going to paste in the code the code I added was an object to the rules array.

83
00:06:24,990 --> 00:06:31,470
Basically I'm saying that if a file ends with the extension SPSS then it should be processed by SAS

84
00:06:31,500 --> 00:06:36,360
and put into its own file the use property is set to an array.

85
00:06:36,360 --> 00:06:40,440
This is how you specify multiple loaders for one rule.

86
00:06:40,440 --> 00:06:46,130
I'm telling it to process SAS code through the SAS loader followed by the CSX loader.

87
00:06:46,140 --> 00:06:49,350
And lastly the mini CSX extract loader.

88
00:06:49,380 --> 00:06:55,590
It's important that the CSX extract loader is last because we only want to extract the CSX after it's

89
00:06:55,590 --> 00:06:57,170
been processed.

90
00:06:57,180 --> 00:07:00,130
This will simply tell Webb pack how to use the plugin.

91
00:07:00,390 --> 00:07:03,870
We next need to tell Webb pack to use the plugin itself.

92
00:07:03,870 --> 00:07:05,980
Right under the module property.

93
00:07:06,090 --> 00:07:09,420
Add another property called plugins that will be set to an array

94
00:07:12,170 --> 00:07:18,050
pass him the editor CSX plugin instance.

95
00:07:18,100 --> 00:07:18,780
All right.

96
00:07:18,800 --> 00:07:20,080
That should cover things.

97
00:07:20,120 --> 00:07:22,610
Run the command NPM run Dev

98
00:07:26,420 --> 00:07:28,540
hopefully you won't receive any errors.

99
00:07:28,550 --> 00:07:30,150
If you did everything right.

100
00:07:30,170 --> 00:07:35,180
If you look inside the dist folder then you may or may not see the CFS files.

101
00:07:35,180 --> 00:07:38,360
This is because there's no CSF being loaded.

102
00:07:38,360 --> 00:07:40,930
Let's add some C Ss to our blocks.

103
00:07:41,090 --> 00:07:43,560
Open the recipe block directory.

104
00:07:43,610 --> 00:07:47,360
Create a C Ss file called Ed dot SPSS

105
00:07:49,750 --> 00:07:55,600
just as a side note web pack won't give you any errors if you don't create these files so don't feel

106
00:07:55,600 --> 00:07:56,650
pressured to do so.

107
00:07:57,190 --> 00:08:00,850
Let's focus on the Ed file just to save some time.

108
00:08:00,880 --> 00:08:08,110
I'm going to paste in this C Ss for this pause the video if you need to have what I have.

109
00:08:08,110 --> 00:08:13,960
I've provided two methods here for the blocks to assess these to do the exact same thing but they're

110
00:08:13,960 --> 00:08:15,220
written differently.

111
00:08:15,220 --> 00:08:19,750
The first approach is plain C Ss The second approach is SAS.

112
00:08:20,050 --> 00:08:22,750
It's written similarly to plain CSX.

113
00:08:22,810 --> 00:08:25,060
However there's one huge difference here.

114
00:08:25,240 --> 00:08:29,680
Rather than constantly typing out WP block you Timmy recipe.

115
00:08:29,740 --> 00:08:31,670
We only write it once and then next.

116
00:08:31,700 --> 00:08:36,660
Any related styles this SAS code will be converted into the code above.

117
00:08:37,060 --> 00:08:40,680
The second approach is much more organized and less redundant.

118
00:08:40,750 --> 00:08:43,070
You could nest as far as you want to.

119
00:08:43,210 --> 00:08:45,530
Let's test to see if this works.

120
00:08:45,580 --> 00:08:49,180
Open the index file for our block right at the top.

121
00:08:49,180 --> 00:08:56,460
Import these SAS file we're not going to store the values we just want to import it.

122
00:08:56,490 --> 00:09:00,570
So that web pack will pick up on the file to process and extract it.

123
00:09:00,600 --> 00:09:07,110
If you save the file then Web patch you'd begin scanning these files go to your distribution folder

124
00:09:07,170 --> 00:09:09,470
and look for any C Ss files.

125
00:09:09,540 --> 00:09:12,470
There should be one C Ss file open.

126
00:09:12,600 --> 00:09:15,420
You should see something similar to what I see.

127
00:09:15,420 --> 00:09:21,870
If we were to compare the plane CSX and SPSS code then you'll notice that they are completely identical

128
00:09:22,350 --> 00:09:28,200
SPSS took the time to correctly create the selections for our code even though it was nested.

129
00:09:28,350 --> 00:09:34,230
It's a bit redundant to have both versions in our code so I'm going to comment out the plain C Ss version

130
00:09:36,800 --> 00:09:38,360
after making those changes.

131
00:09:38,390 --> 00:09:44,210
If you look at the C Ss file again then you'll see that the code was removed from the file completely.

132
00:09:44,210 --> 00:09:45,620
That's fantastic.

133
00:09:45,620 --> 00:09:51,350
The last step to all of this is to just include the files were going to be using a different hook to

134
00:09:51,350 --> 00:09:59,000
include the files Gutenberg introduces two new hooks 2 and Q files were already using one of them inside

135
00:09:59,030 --> 00:10:05,730
the main plugin and file or using the Q block editor assets hook this hook is triggered when the user

136
00:10:05,730 --> 00:10:08,060
reviews the editor on the admin side.

137
00:10:08,060 --> 00:10:11,320
The second hook is called a cube block assets.

138
00:10:11,330 --> 00:10:12,190
I'll add this in

139
00:10:17,690 --> 00:10:21,660
the name of the function will be are in queue block assets.

140
00:10:21,770 --> 00:10:26,420
This hook is triggered when the editor is loaded or page on the front it is viewed.

141
00:10:26,420 --> 00:10:30,290
We essentially want our style to be loaded in both scenarios.

142
00:10:30,290 --> 00:10:37,360
This is the perfect hook to use for loading style sheets inside the NQ file from the blocks directory.

143
00:10:37,370 --> 00:10:38,660
I'll define the function here

144
00:10:42,910 --> 00:10:48,870
next call the WP register style function pass in a name and a path to the file.

145
00:10:56,140 --> 00:11:03,070
Next call the WP in Q style function and pass in the name.

146
00:11:03,160 --> 00:11:04,030
That's it.

147
00:11:04,030 --> 00:11:08,290
It's as simple as that save your changes and refresh the editor.

148
00:11:08,290 --> 00:11:14,110
The file should load without a problem the block no longer has the dots next to each list item and the

149
00:11:14,110 --> 00:11:15,930
spacing is more condensed.

150
00:11:15,940 --> 00:11:20,110
This is now closer to the front end version that pretty much does it for now.

151
00:11:20,410 --> 00:11:25,840
This example is a bit excessive for our needs but if you're working on larger projects than SAS can

152
00:11:25,840 --> 00:11:28,260
be a lifesaver in terms of management.

153
00:11:28,270 --> 00:11:32,690
This is how I tackle projects and how I recommend you go about this.

154
00:11:32,710 --> 00:11:38,920
We've barely scratched the surface of SAS this course really isn't about SAS but I highly recommend

155
00:11:38,920 --> 00:11:44,620
you check out the SAS courses on you to me it's super simple to learn but very powerful and effective

156
00:11:44,620 --> 00:11:46,270
for any project.

157
00:11:46,270 --> 00:11:47,920
I've got a challenge for you.

158
00:11:47,920 --> 00:11:51,770
The font that's used for the editor is different than the one used on the theme.

159
00:11:51,970 --> 00:11:54,480
The font that's being used is called Leto.

160
00:11:54,520 --> 00:12:00,530
I want you to try and load this font for Gutenberg then update the CSF to use this font.

161
00:12:00,550 --> 00:12:01,870
It shouldn't be too hard.

162
00:12:01,930 --> 00:12:07,720
I'll provide a link to the font in the resource section of this lecture once you tackled the challenge.

163
00:12:07,720 --> 00:12:09,550
I'll see you in the next lecture.

164
00:12:09,550 --> 00:12:10,120
Good luck.
