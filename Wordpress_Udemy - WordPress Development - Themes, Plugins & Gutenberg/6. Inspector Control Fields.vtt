WEBVTT
1
00:00:07.570 --> 00:00:12.860
WordPress provides a couple of components for creating the most common types of input fields.

2
00:00:12.850 --> 00:00:18.850
We've already gone over how to use the text control select control and form toggle components.

3
00:00:18.850 --> 00:00:23.500
You may already have found out that most components contain similar attributes.

4
00:00:23.500 --> 00:00:28.970
In this lecture we'll be going over the other inspector control fields WordPress has to offer.

5
00:00:29.050 --> 00:00:33.880
We'll be skipping the ones we've already gone over in the resource section of this lecture.

6
00:00:33.940 --> 00:00:36.180
I provide a zip file with the code.

7
00:00:36.310 --> 00:00:41.410
Download the file and unzip the contents into the block slash after rectory.

8
00:00:41.410 --> 00:00:45.710
Once you have that setup open the index not just file inside.

9
00:00:45.850 --> 00:00:48.290
Just to keep things from getting too repetitive.

10
00:00:48.310 --> 00:00:50.340
I've provided the complete code.

11
00:00:50.650 --> 00:00:58.270
The very first thing I'm doing here is d structuring the WP objects from the WP dot components object

12
00:00:58.450 --> 00:01:00.260
we're grabbing a lot of things.

13
00:01:00.280 --> 00:01:04.750
Most of these will just create different input fields moving right along.

14
00:01:04.750 --> 00:01:09.150
I'm using the register block type function and passing in the usual settings.

15
00:01:09.220 --> 00:01:12.460
A lot of this should be familiar to you inside.

16
00:01:12.490 --> 00:01:19.090
The attributes object I'm introducing a new type here called number which is for storing numeric values

17
00:01:21.390 --> 00:01:22.230
afterwards.

18
00:01:22.260 --> 00:01:26.800
I'm using the inspector controls component and loading the different components.

19
00:01:26.970 --> 00:01:31.800
At this point you should be able to understand what most of these attributes do.

20
00:01:31.830 --> 00:01:37.530
The last thing that's going on here is I'm displaying an unordered list with all the input fields and

21
00:01:37.530 --> 00:01:39.240
their respective values.

22
00:01:39.270 --> 00:01:43.080
The block is the same in both the edit and save functions.

23
00:01:43.080 --> 00:01:45.150
All right let's test things out.

24
00:01:45.330 --> 00:01:47.610
You will need to import this block.

25
00:01:47.640 --> 00:01:57.550
So open the app slash index stop just file and import the inspector controls block C D into the blocks

26
00:01:57.550 --> 00:02:05.250
directory and run the NPM run Dev command there shouldn't be any errors so far.

27
00:02:05.250 --> 00:02:13.390
Once that's finished compiling go ahead and create a new recipe post with this blog with the bloc's

28
00:02:13.390 --> 00:02:19.980
elected you should see the unordered list and the sidebar should contain all the inspector control components.

29
00:02:19.990 --> 00:02:25.370
There are more components than this but I'm skipping over those since we've gone over how to use them.

30
00:02:25.540 --> 00:02:31.270
The first component is the text area control component all loaded in here so that you can see it side

31
00:02:31.270 --> 00:02:38.210
by side the label and help attributes will display text in different areas for different purposes.

32
00:02:38.320 --> 00:02:42.880
They work similar to the other input components we've dealt with so far.

33
00:02:42.880 --> 00:02:49.060
The value attribute will be the value to use from the attributes object and the on change attribute

34
00:02:49.060 --> 00:02:51.460
is an event that gets triggered on input.

35
00:02:51.460 --> 00:02:53.680
Very straightforward stuff so far.

36
00:02:53.680 --> 00:02:57.700
If I were to input some gibberish then you should see the block on the left.

37
00:02:57.700 --> 00:02:58.920
Update as well.

38
00:02:59.260 --> 00:03:04.930
The next component is the checkbox control component which will generate a checkbox element.

39
00:03:04.930 --> 00:03:10.930
We have one new attribute here called heading the heading will be the text above the checkbox.

40
00:03:10.990 --> 00:03:17.560
The label will appear to the right of the checkbox and the help attribute will appear below the checkbox.

41
00:03:17.560 --> 00:03:20.390
These are optional so use them as you see fit.

42
00:03:20.470 --> 00:03:26.140
Then we have the checked attribute which needs to be a true or false boolean value.

43
00:03:26.230 --> 00:03:28.900
If true then the box will be ticked.

44
00:03:28.900 --> 00:03:34.840
Lastly we have the on change attribute which will be triggered whenever the user ticks or undertakes

45
00:03:34.840 --> 00:03:36.180
the checkbox.

46
00:03:36.250 --> 00:03:42.740
Just like before we were updating the attribute with the new value which will either be true or false.

47
00:03:42.790 --> 00:03:48.760
If I were to check the box then you'll see true or false appear in the block something I want to know

48
00:03:48.790 --> 00:03:53.970
is that I'm using the two string function to convert a boolean value to a string.

49
00:03:54.070 --> 00:03:58.280
If I didn't use this function then you wouldn't see anything appear in the block.

50
00:03:58.300 --> 00:04:00.630
It's not common to do something like this.

51
00:04:00.640 --> 00:04:05.320
I only did it to provide another visual cue when the checkbox is ticked.

52
00:04:05.490 --> 00:04:12.400
Afterwards we have the radial control component which will render a radio input field the label attribute

53
00:04:12.400 --> 00:04:18.370
will display text above the radio input fields the selected attribute will allow you to set a value

54
00:04:18.400 --> 00:04:21.240
and determine what radio button is preselected.

55
00:04:21.520 --> 00:04:26.260
Then we have the options attribute which is used to render all the options available.

56
00:04:26.260 --> 00:04:31.180
Keep in mind that radio input fields can only have one value per group.

57
00:04:31.210 --> 00:04:37.630
This attribute expects you to pass in an array of objects each object should contain two properties

58
00:04:37.660 --> 00:04:40.380
which are the label and value.

59
00:04:40.420 --> 00:04:46.750
In this example I have two options which are Foo and Bar respectively inside my attributes object.

60
00:04:46.750 --> 00:04:52.210
I set the default value to foo so the foo radio button should be checked by default.

61
00:04:52.960 --> 00:04:57.170
Lastly we have the on change attribute for handling the change.

62
00:04:57.250 --> 00:04:58.870
Same as before.

63
00:04:58.870 --> 00:05:02.020
Up next we have the range control component.

64
00:05:02.020 --> 00:05:05.600
This component is a little more complex than the other components.

65
00:05:05.620 --> 00:05:10.120
It will create this slider that will allow users to adjust a numeric value.

66
00:05:10.660 --> 00:05:14.710
Alternatively they can just input their preferred value.

67
00:05:14.710 --> 00:05:21.670
The first two attributes are the before icon and after icon attributes these icons will appear before

68
00:05:21.700 --> 00:05:23.840
and after the slider you see here.

69
00:05:23.990 --> 00:05:29.570
I'm using the dash icon set but you can provide your own custom icon like before.

70
00:05:29.680 --> 00:05:34.870
If you were to go down that path then I recommend placing the SPG in a separate file like we've been

71
00:05:34.870 --> 00:05:36.770
doing this entire course.

72
00:05:36.790 --> 00:05:40.960
We can also set the men and Max attributes which will let you limit the value.

73
00:05:41.410 --> 00:05:47.350
Lastly we have the value and on change attributes which will do the same as the rest.

74
00:05:47.440 --> 00:05:48.630
That should about cover it.

75
00:05:48.820 --> 00:05:50.530
Let's try and testing this out.

76
00:05:50.590 --> 00:05:52.750
Publish the post and view it on the front end.

77
00:05:55.190 --> 00:05:59.000
You should see the unordered list with their respective values.

78
00:05:59.060 --> 00:06:04.970
Now before I end this lecture I do want to note that you aren't limited to using the controllers inside

79
00:06:04.970 --> 00:06:06.020
the sidebar.

80
00:06:06.020 --> 00:06:07.710
You can place them in your block.

81
00:06:07.790 --> 00:06:09.990
In fact let's try that out.

82
00:06:10.220 --> 00:06:15.950
Go back to the script and begin the process of copying all the input controllers into the block.

83
00:06:15.950 --> 00:06:20.890
Only replace them inside the edit function and overwrite the unordered list.

84
00:06:20.930 --> 00:06:25.970
Something worth noting is that you don't have to add the panel component since blocks don't support

85
00:06:25.970 --> 00:06:29.570
panels only move the input controllers themselves

86
00:06:34.040 --> 00:06:38.210
what you should have is the input controllers surrounded by the div tag.

87
00:06:38.210 --> 00:06:44.310
Basically everything is the same except for the panels save your changes and try refreshing the editor.

88
00:06:44.390 --> 00:06:50.920
You may have to add the block in again since we've made changes as you can see everything works just

89
00:06:50.920 --> 00:06:51.590
fine.

90
00:06:51.610 --> 00:06:55.230
You can modify the values inside the block and it should reciprocate.

91
00:06:55.240 --> 00:07:01.060
On the sidebar you can even update the post and the block should work on the front end whether you want

92
00:07:01.060 --> 00:07:04.610
to use the controllers on the sidebar or block is up to you.

93
00:07:04.660 --> 00:07:10.400
Once again this is a user experience design decision which is beyond the scope of this course.

94
00:07:10.420 --> 00:07:16.210
I just wanted to show you that it is possible to use these components outside of the sidebar and directly

95
00:07:16.210 --> 00:07:17.240
in your block.

96
00:07:17.380 --> 00:07:21.040
Gutenberg is very flexible and consistent across the board.

97
00:07:21.040 --> 00:07:26.920
Now obviously the block we have isn't practical but you may end up having a use case for this sort of

98
00:07:26.920 --> 00:07:28.060
behavior.

99
00:07:28.090 --> 00:07:30.170
That about does it for these components.

100
00:07:30.190 --> 00:07:35.530
You can find all of these inside the components directory of Gutenberg except for the color palette

101
00:07:35.560 --> 00:07:38.660
component which is inside the editor directory.

102
00:07:38.710 --> 00:07:44.020
I encourage you to play around with these components change their values see what works even better

103
00:07:44.080 --> 00:07:46.890
try breaking a component it's how you'll learn.
