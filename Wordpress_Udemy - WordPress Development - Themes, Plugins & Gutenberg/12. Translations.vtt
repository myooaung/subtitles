WEBVTT
1
00:00:07.400 --> 00:00:11.350
Translations has been a topic I've avoided for quite a bit of time.

2
00:00:11.360 --> 00:00:15.410
This is because translations can be a bit intimidating to newcomers.

3
00:00:15.410 --> 00:00:19.070
It's not at all but it is kind of boring and time consuming.

4
00:00:19.190 --> 00:00:24.650
Throughout the years developers have come up with solutions for translating scripts from creating arrays

5
00:00:24.800 --> 00:00:27.940
classes or even PCL extensions.

6
00:00:27.980 --> 00:00:30.560
Each solution has its pros and cons.

7
00:00:30.560 --> 00:00:39.020
WordPress has decided to opt into the get text extension gets text isn't specific to HP or WordPress.

8
00:00:39.020 --> 00:00:45.680
It's a standard created to help with translating programs BJP implements get text into its programming

9
00:00:45.680 --> 00:00:52.880
language and WordPress leverages this by providing an API the Get text extension is a pretty hard concept

10
00:00:52.880 --> 00:00:54.490
to understand and use.

11
00:00:54.500 --> 00:00:57.260
So we won't be going over how it works.

12
00:00:57.350 --> 00:00:58.960
It's not really the end of the world.

13
00:00:58.970 --> 00:01:04.070
If you don't know the whole logic behind it for the most part you never have to worry about checking

14
00:01:04.070 --> 00:01:06.160
to see if this extension is enabled.

15
00:01:06.320 --> 00:01:10.560
Most PHC servers come with it installed and enabled by default.

16
00:01:10.760 --> 00:01:14.950
As a result WordPress uses this translation system itself.

17
00:01:15.050 --> 00:01:18.920
If the get test extension doesn't work then WordPress won't work.

18
00:01:19.070 --> 00:01:24.860
So it's safe to assume if a user installs our plugin then they won't have any trouble with translations

19
00:01:25.550 --> 00:01:27.750
in the resource section of this lecture.

20
00:01:27.830 --> 00:01:32.050
I provide a link to WordPress is internationalization Codex page.

21
00:01:32.090 --> 00:01:34.760
Here's what WordPress has to say about it.

22
00:01:34.760 --> 00:01:40.880
Internationalization is the process of developing your theme so it can easily be translated into other

23
00:01:40.880 --> 00:01:41.880
languages.

24
00:01:42.050 --> 00:01:48.830
Internationalization is often abbreviated as I 1810 because there are 18 letters between the letters

25
00:01:48.890 --> 00:01:50.010
I and N.

26
00:01:50.510 --> 00:01:57.320
Seems like a complicated process but I promise it's not the first step to translating a plugin or theme

27
00:01:57.350 --> 00:02:01.610
is to make all strings inside the plugin or theme translatable.

28
00:02:01.610 --> 00:02:05.030
Fortunately for us we've been doing that from the start.

29
00:02:05.030 --> 00:02:09.020
Let's go over some of these functions.

30
00:02:09.170 --> 00:02:09.600
All right.

31
00:02:09.720 --> 00:02:16.500
So now I'm inside my function's file and I've added in some examples of the translation functions available.

32
00:02:16.560 --> 00:02:18.360
You do not have to add these in.

33
00:02:18.450 --> 00:02:20.410
This is just an example.

34
00:02:20.520 --> 00:02:24.030
The first thing you need to understand is a text domain.

35
00:02:24.060 --> 00:02:27.450
I've gone over it before but it's been quite some time since then.

36
00:02:27.540 --> 00:02:29.200
So I'm going to review it.

37
00:02:29.400 --> 00:02:36.300
A text domain is a unique ideas for your translations wordpress themes and plugins will all come with

38
00:02:36.300 --> 00:02:37.890
their own translations.

39
00:02:37.890 --> 00:02:42.780
There is a possibility that there might be conflicting translations to prevent conflicts.

40
00:02:42.780 --> 00:02:48.900
You can use a text domain text domains give you the ability to specify where a translation should come

41
00:02:48.900 --> 00:02:49.620
from.

42
00:02:49.670 --> 00:02:54.540
Ninety nine percent of the time you want to set the text domain to the name of your plugin or theme

43
00:02:54.540 --> 00:02:55.270
folder.

44
00:02:55.380 --> 00:02:57.730
In our case it would be you to me.

45
00:02:57.900 --> 00:03:03.930
WordPress will provide a set of functions for translating strings for the most part WordPress covers

46
00:03:03.960 --> 00:03:09.070
a lot of situations so generally translating your theme or plugin isn't hard.

47
00:03:09.090 --> 00:03:12.330
We've been using some of these functions throughout the course.

48
00:03:12.420 --> 00:03:15.430
The first function is the double underscore function.

49
00:03:15.570 --> 00:03:20.760
The double underscore function is the most commonly used translation function out of all of them.

50
00:03:20.820 --> 00:03:25.430
It only has two parameters which is the text to translate and the text domain.

51
00:03:25.530 --> 00:03:31.070
If there is no translation to be found then WordPress will return the original string.

52
00:03:31.080 --> 00:03:33.660
This applies to most translation functions.

53
00:03:33.660 --> 00:03:38.400
If a translation can be found then the original string is used instead.

54
00:03:38.400 --> 00:03:43.640
The other function is the underscore e function which does the same thing as the devil underscore a

55
00:03:43.640 --> 00:03:48.240
function except it will echo out the value rather than returning it.

56
00:03:48.240 --> 00:03:54.930
The third function is the underscore X function which allows you to provide context for a translation.

57
00:03:54.930 --> 00:04:00.390
There are words out there that are spelled the same but have different meanings by using the underscore

58
00:04:00.480 --> 00:04:01.440
X function.

59
00:04:01.440 --> 00:04:05.230
You can provide a comment to the translator for more information.

60
00:04:05.370 --> 00:04:11.550
And this example I'm using the word bass without context then the translator might have a hard time

61
00:04:11.550 --> 00:04:14.700
figuring out which bass I'm talking about.

62
00:04:14.700 --> 00:04:20.500
This function allows you to use the second parameter as a way to describe the translated text.

63
00:04:20.520 --> 00:04:24.840
It doesn't do anything for wordpress or affect the outcome of the string.

64
00:04:24.840 --> 00:04:28.290
Its purpose is just for the translators eyes only.

65
00:04:28.380 --> 00:04:33.570
In this example I'm telling the translator I'm talking about the instrument base.

66
00:04:33.570 --> 00:04:37.890
The fourth function is the underscore end function which is for plurals.

67
00:04:37.890 --> 00:04:40.070
This function has four parameters.

68
00:04:40.170 --> 00:04:43.600
The first parameter is for the singular version of the text.

69
00:04:43.620 --> 00:04:47.070
The second parameter is the plural version of the text.

70
00:04:47.070 --> 00:04:51.600
The third parameter is the most important one you pass in a number.

71
00:04:51.600 --> 00:04:57.640
This can be hardcoded or you can pass in a variable in most cases you want to pass in a variable.

72
00:04:57.660 --> 00:05:00.660
However in this example I'm keeping it simple.

73
00:05:00.660 --> 00:05:06.340
If the value for this parameter is 1 then the singular version of the translation is used.

74
00:05:06.390 --> 00:05:09.840
If the number is not 1 then the plural version is used.

75
00:05:09.870 --> 00:05:13.890
I'm showing how to use both the singular or plural versions.

76
00:05:13.890 --> 00:05:17.220
The next function is the underscore e x function.

77
00:05:17.220 --> 00:05:22.600
This function is a combination of the underscore X and underscore e functions.

78
00:05:22.710 --> 00:05:27.010
It will echo out a translated string that has a context.

79
00:05:27.090 --> 00:05:33.960
Likewise we have the underscore and X which will return a singular or plural translation that has context

80
00:05:34.470 --> 00:05:37.080
that basically sums it up for these set of functions.

81
00:05:37.140 --> 00:05:39.320
But there is one problem with them.

82
00:05:39.420 --> 00:05:44.030
These functions should be use caution because they don't provide escape data.

83
00:05:44.100 --> 00:05:49.050
You should always want to make sure anything you output is secured and safe for the user.

84
00:05:49.050 --> 00:05:55.500
With that said WordPress does provide a set of functions for escaping translated strings right below.

85
00:05:55.530 --> 00:05:58.380
I have some example of those functions.

86
00:05:58.380 --> 00:06:04.190
They are the same as the functions above except they start with EFC underscore HDMI out.

87
00:06:04.350 --> 00:06:09.560
These functions will not only translate strings but will also remove HDMI out.

88
00:06:09.630 --> 00:06:16.260
In this last example I'm using a combination of functions in some cases you may want to allow HCM L

89
00:06:16.260 --> 00:06:19.050
and your translated strings for these cases.

90
00:06:19.050 --> 00:06:21.880
You'll have to use the double underscore function.

91
00:06:21.960 --> 00:06:25.670
However you shouldn't allow all HDD email to be passed.

92
00:06:25.800 --> 00:06:33.570
You can use the WP underscore KSC yes underscore post function to remove any harmful h t email or attributes

93
00:06:33.600 --> 00:06:35.970
like I do in this example.

94
00:06:36.030 --> 00:06:39.890
All right that pretty much sums up most of the translation functions.

95
00:06:39.990 --> 00:06:45.390
I highly recommend you give this page a good read for more techniques on how to perform translations

96
00:06:45.960 --> 00:06:46.960
for the most part.

97
00:06:47.010 --> 00:06:56.160
I find myself using the E S C underscore H2 e-mail underscore underscore and e SC underscore HCM l underscore

98
00:06:56.220 --> 00:06:58.920
e functions from my translations.

99
00:06:58.920 --> 00:07:04.400
Now that we have an overview of our functions let's start with translating our plugin since our plugin

100
00:07:04.410 --> 00:07:05.730
is translation ready.

101
00:07:05.730 --> 00:07:11.580
We have to inform WordPress where it can find the translation files in the main plugin file and the

102
00:07:11.580 --> 00:07:13.320
action hook plugins loaded

103
00:07:22.960 --> 00:07:25.630
this hook will run when all plugins are loaded.

104
00:07:25.630 --> 00:07:28.850
This is the recommended hook for loading translations.

105
00:07:29.020 --> 00:07:38.050
The function to call is are load text domain create a file and the includes folder named Tex still mean

106
00:07:38.050 --> 00:07:40.890
dot P. HP and define the function here.

107
00:07:40.900 --> 00:07:43.830
Lastly include this file from the main plugin file

108
00:07:53.100 --> 00:08:01.270
inside the function we have to call the WordPress function load plugin text domain this function has

109
00:08:01.270 --> 00:08:02.540
three parameters.

110
00:08:02.590 --> 00:08:08.710
The first parameter is the name of the text domain which is recipe the text domain name should always

111
00:08:08.710 --> 00:08:10.670
be the name of the plugin folder.

112
00:08:10.690 --> 00:08:12.970
The second parameter is deprecated.

113
00:08:13.060 --> 00:08:16.600
WordPress keeps this parameter for backwards compatibility.

114
00:08:16.660 --> 00:08:18.830
We're going to set this to false.

115
00:08:19.030 --> 00:08:22.540
The third parameter is the location to our translations.

116
00:08:22.540 --> 00:08:25.240
The path will be relative to the plugins folder.

117
00:08:25.450 --> 00:08:34.350
I'm going to create a variable named plug in Dir and set its value to recipe slash Lane we're going

118
00:08:34.350 --> 00:08:37.810
to store all our translations in a folder called Lane.

119
00:08:38.370 --> 00:08:42.150
It's important to note that you don't have to name your folder Lane.

120
00:08:42.270 --> 00:08:44.010
It can we name whatever name you want.

121
00:08:44.280 --> 00:08:49.260
However a lot of plugins and themes use the name Lang as a convention.

122
00:08:49.260 --> 00:08:55.570
Lastly let's create the folder Lang inside the recipe plugin.

123
00:08:55.680 --> 00:08:56.510
That's it.

124
00:08:56.520 --> 00:08:59.890
WordPress will now load translations from this folder.

125
00:08:59.910 --> 00:09:03.480
However we don't have any translations despite this.

126
00:09:03.510 --> 00:09:07.710
WordPress won't throw any errors if it can't find a translation.

127
00:09:07.710 --> 00:09:13.970
Now it's time to start generating some translations for our plugin.

128
00:09:13.990 --> 00:09:18.600
There are three important files when it comes to translating WordPress plugins and themes.

129
00:09:18.670 --> 00:09:22.470
That's the M.O. P O and P O T files.

130
00:09:22.540 --> 00:09:24.280
Each of these have a purpose.

131
00:09:24.490 --> 00:09:30.670
The P O T file is a template that contains all the original translations WordPress does not load this

132
00:09:30.670 --> 00:09:31.350
file.

133
00:09:31.390 --> 00:09:36.430
The purpose of this file is for translators to make a copy of this file and then change the text to

134
00:09:36.430 --> 00:09:37.980
their desired language.

135
00:09:37.990 --> 00:09:42.410
However this is a file that should only be modified by a developer.

136
00:09:42.490 --> 00:09:48.400
The P O file is like the P O T file except it's meant for translators to update.

137
00:09:48.400 --> 00:09:54.130
Just like the P O T file these kinds of files are human readable just like the P O T file.

138
00:09:54.130 --> 00:09:57.660
This file is not processed or read by WordPress.

139
00:09:58.000 --> 00:10:04.540
The M O file is a machine readable file you should never open or edit these files as they contain text

140
00:10:04.540 --> 00:10:10.300
that only servers are able to read and use M O files are generated from paedophiles

141
00:10:13.140 --> 00:10:16.660
creating these files can be a bit challenging and time consuming.

142
00:10:16.680 --> 00:10:22.080
Luckily get Tex has been around for quite some time and there are a lot of tools available for handling

143
00:10:22.080 --> 00:10:23.770
most of the work for us.

144
00:10:23.790 --> 00:10:30.420
I want you to go to plugins add new and search for a plugin and called loco translate install and activate

145
00:10:30.420 --> 00:10:37.100
this plugin.

146
00:10:37.120 --> 00:10:41.650
This is a free plugin for generating all the files you'll need for translations.

147
00:10:41.650 --> 00:10:44.440
It's constantly updated and user friendly.

148
00:10:44.440 --> 00:10:46.140
Let's get started with using it.

149
00:10:46.210 --> 00:10:46.890
The first step.

150
00:10:46.900 --> 00:10:50.560
We must always take it to generate the P.O. t file.

151
00:10:50.560 --> 00:10:53.860
I want you to go to loco translate plugins

152
00:10:56.430 --> 00:10:58.890
here you'll find a list of plugins available.

153
00:10:58.890 --> 00:11:06.860
Click on the plugin recipe you'll be told that there are no translations available for this plugin.

154
00:11:06.860 --> 00:11:11.990
If we were to click on the new language button you'll be told that there is no template for logo to

155
00:11:11.990 --> 00:11:12.920
work with.

156
00:11:13.190 --> 00:11:17.370
You'll be given the option of generating a template so let's do that now.

157
00:11:17.600 --> 00:11:22.530
You'll be told how many files are going to be scanned and where the file will be created.

158
00:11:22.550 --> 00:11:25.910
Everything seems good for now so let's click Create template

159
00:11:30.670 --> 00:11:34.450
you should see a success message telling you that the template was created.

160
00:11:34.450 --> 00:11:37.720
Let's go back to the editor and check to see if the file was created

161
00:11:40.400 --> 00:11:42.680
inside the recipe plugin folder.

162
00:11:42.680 --> 00:11:46.050
You should find a file called recipe dot peyote.

163
00:11:46.070 --> 00:11:48.660
Let's open the file and check out the contents.

164
00:11:48.710 --> 00:11:52.240
As you can see the file contains all our translations.

165
00:11:52.310 --> 00:11:56.930
You'll first see this section where it contains information about the file itself.

166
00:11:56.930 --> 00:11:59.970
For the most part you don't have to worry about this.

167
00:11:59.990 --> 00:12:05.840
It's mostly for the server to read and understand local has taken the time to optimize this for you

168
00:12:05.840 --> 00:12:07.070
already.

169
00:12:07.070 --> 00:12:11.130
If you scroll down a little further you'll see a list of translations.

170
00:12:11.210 --> 00:12:14.360
Each translation is broken down in 2 three parts.

171
00:12:15.220 --> 00:12:22.390
The first part is this comment a hash is considered a common inside this file loco has taken the time

172
00:12:22.390 --> 00:12:27.820
to specify where you can find the translation by the file name and line number right after this.

173
00:12:27.850 --> 00:12:30.660
You'll see a key called M. SGI.

174
00:12:30.730 --> 00:12:37.600
This will contain the original translation after this is the image GSC Aki which contains the text that

175
00:12:37.600 --> 00:12:40.150
the original text will be translated to.

176
00:12:40.360 --> 00:12:43.150
All you have to do is edit the text inside here.

177
00:12:43.540 --> 00:12:49.840
However this file should be modified by developers only if you are a translator then you need to make

178
00:12:49.840 --> 00:12:53.040
a copy of this file and use the P.O. extension.

179
00:12:53.080 --> 00:12:57.600
We can do this manually but local translate can help us with this.

180
00:12:57.640 --> 00:13:00.890
Let's go back to the plugin page and see how to do this.

181
00:13:00.910 --> 00:13:03.190
I want you to click on new language.

182
00:13:03.190 --> 00:13:05.640
You will be allowed to select your language.

183
00:13:05.650 --> 00:13:08.100
Feel free to pick any language you want.

184
00:13:08.140 --> 00:13:10.050
I'm going to select French.

185
00:13:10.090 --> 00:13:12.760
You'll be then asked where you want to save this file.

186
00:13:12.760 --> 00:13:15.470
Be sure to select the author path.

187
00:13:15.670 --> 00:13:21.670
You may want to select the other paths as files can be overwritten local will provide a directory for

188
00:13:21.670 --> 00:13:23.570
your translations if needed.

189
00:13:23.680 --> 00:13:29.380
Since we're the developer of this plugin then it's perfectly fine to save it inside our plugin directory.

190
00:13:29.380 --> 00:13:30.820
Next click Create

191
00:13:34.350 --> 00:13:38.730
local will then give you the opportunity to start translating or streams.

192
00:13:38.760 --> 00:13:44.880
First you must select the string you want to translate then you'll see the translation below.

193
00:13:44.880 --> 00:13:50.460
You'll also see an input field where you can input the translation on the right you'll see the comments

194
00:13:50.460 --> 00:13:51.180
box.

195
00:13:51.240 --> 00:13:55.690
If you can recall we can give the translators some context just in case.

196
00:13:55.740 --> 00:13:58.570
This is where that context will appear.

197
00:13:58.590 --> 00:14:01.480
I'm going to select the text and translate it.

198
00:14:01.590 --> 00:14:06.330
The translation for recipe is reset just to save some time.

199
00:14:06.360 --> 00:14:08.880
I'm not going to translate all the strings.

200
00:14:08.910 --> 00:14:11.750
The last step is to just click save when you're done.

201
00:14:14.560 --> 00:14:16.810
This will generate two files for you.

202
00:14:16.810 --> 00:14:23.020
A P.O. and Elmo file if you open up your editor you'll see these two files appear here.

203
00:14:23.020 --> 00:14:29.380
This is great and all but I want these to appear inside my Lang folder so I'll move all my translations

204
00:14:29.470 --> 00:14:35.310
into the Lang folder.

205
00:14:35.320 --> 00:14:37.980
This is one of the problems with logo translate.

206
00:14:38.040 --> 00:14:43.900
It will only load the translations inside the root plugin folder even though you specify otherwise.

207
00:14:43.960 --> 00:14:47.750
Let's open the P.O. file and check out what we got.

208
00:14:47.770 --> 00:14:50.260
The first thing you'll notice is the file name.

209
00:14:50.260 --> 00:14:53.280
This is very important when creating translations.

210
00:14:53.350 --> 00:14:59.100
When you translate to a specific language you need to add the locale to the file name.

211
00:14:59.200 --> 00:15:05.740
The format for the file name is the text domain followed by the low count loco will take care of setting

212
00:15:05.740 --> 00:15:07.970
up the correct locale for you.

213
00:15:08.110 --> 00:15:14.110
This file is exactly like the P.O. t file except it will contain all your translations.

214
00:15:14.110 --> 00:15:16.920
You're free to edit this file anytime you'd like.

215
00:15:16.960 --> 00:15:23.310
The next file that's generated is the M O file under no circumstance should you open this file.

216
00:15:23.320 --> 00:15:28.080
This is because text editors tend to destroy the contents of this file.

217
00:15:28.150 --> 00:15:32.050
This file contains code that only machines can understand.

218
00:15:32.290 --> 00:15:38.230
Despite my warnings I'm going to open this file as you can see there's all this gibberish that doesn't

219
00:15:38.230 --> 00:15:39.540
really make sense.

220
00:15:39.580 --> 00:15:46.000
The file is now corrupted so I'll have to delete and generate it again to generate a demo file.

221
00:15:46.000 --> 00:15:52.810
You can just go to Loco and select the translation file and click this button that says out you'll be

222
00:15:52.810 --> 00:15:56.390
provided a download that you can then just add back to your plugin.

223
00:15:56.410 --> 00:15:58.780
I'm going to do this now.

224
00:15:58.970 --> 00:15:59.430
All right.

225
00:15:59.510 --> 00:16:03.830
So that's basically it for translations before and this lecture.

226
00:16:03.830 --> 00:16:08.300
I do want to introduce another tool for translating plugins and themes.

227
00:16:08.300 --> 00:16:11.020
There is a program called Po edit Po.

228
00:16:11.030 --> 00:16:15.850
Edit is a premium tool for generating P O M0 NPR t files.

229
00:16:16.000 --> 00:16:20.010
It provides an interface that will take care of doing all the coding for you.

230
00:16:20.030 --> 00:16:25.830
It also helps with translations into various languages even if you don't know the language yourself.

231
00:16:25.850 --> 00:16:30.050
One of the benefits of using Poe edit is that it has support for wordpress.

232
00:16:30.190 --> 00:16:34.870
It will scan your plugins and themes and look for translations so that you don't have to.

233
00:16:34.940 --> 00:16:39.300
However to access those features you will have to pay for the pro version.

234
00:16:39.320 --> 00:16:41.260
I highly recommend you do so.

235
00:16:41.390 --> 00:16:44.970
It's definitely worth the money and it will save you a lot of time.

236
00:16:44.990 --> 00:16:50.320
It's especially useful if you have a large plugin with tons of translatable text.

237
00:16:50.330 --> 00:16:55.790
I prefer Poe edit because the translations tend to be more accurate and it will save files in the correct

238
00:16:55.790 --> 00:16:57.080
spot.

239
00:16:57.080 --> 00:17:01.550
I'll provide a link to this program in the resource section of this lecture.

240
00:17:01.550 --> 00:17:07.730
Install it and if you can purchase the pro version before I finish this lecture I want to test this

241
00:17:07.730 --> 00:17:08.870
translation.

242
00:17:08.870 --> 00:17:14.750
I'm going to go to Settings general in the WordPress admin dashboard scroll to the bottom and change

243
00:17:14.750 --> 00:17:18.680
the site language to French or as WordPress calls it France Soir

244
00:17:22.100 --> 00:17:30.820
let's view one of the recipes as you can see our plugin has translated this text to French I believe

245
00:17:30.820 --> 00:17:35.500
I've missed a few translations in the process but overall it's good to go.

246
00:17:35.500 --> 00:17:41.740
That concludes translating a plugin translating the theme is the same process so go give it a try.
