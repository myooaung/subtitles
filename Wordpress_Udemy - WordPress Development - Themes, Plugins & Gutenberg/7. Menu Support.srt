1
00:00:08,000 --> 00:00:12,800
Right now I'm on the documentation page for the registered now menu function.

2
00:00:12,800 --> 00:00:16,160
The first step to getting menus to work is to register them.

3
00:00:16,280 --> 00:00:22,030
Just like styles and scripts WordPress requires you to register your menus before you can display them.

4
00:00:22,040 --> 00:00:23,870
This function will help you with that.

5
00:00:24,200 --> 00:00:30,590
As you can see there is only two required parameters which is the location and a short description the

6
00:00:30,590 --> 00:00:33,370
location can be thought of as a special I.D..

7
00:00:33,560 --> 00:00:37,750
If we scroll down further you'll find that WordPress provides an example.

8
00:00:38,000 --> 00:00:42,980
In this example WordPress uses an action hook called after setup theme.

9
00:00:42,980 --> 00:00:43,760
This is the hook.

10
00:00:43,760 --> 00:00:47,390
WordPress recommends for this function as instructed.

11
00:00:47,390 --> 00:00:50,670
Let's open the functions file just like last time.

12
00:00:50,690 --> 00:00:54,580
We're going to organize our code under the hooks section.

13
00:00:54,620 --> 00:00:59,080
I'm going to call the ad action function according to the documentation.

14
00:00:59,090 --> 00:01:06,970
The most appropriate hook we should use is called after setup theme this hook is called when our theme

15
00:01:07,000 --> 00:01:08,550
is loaded internally.

16
00:01:08,620 --> 00:01:15,010
I don't mean that the page itself is loaded but all the functions you defined inside the functions file

17
00:01:15,010 --> 00:01:16,150
is loaded.

18
00:01:16,150 --> 00:01:19,530
The function that will be called is J you set setup theme.

19
00:01:19,600 --> 00:01:22,740
This function isn't defined so we'll have to do that now.

20
00:01:22,900 --> 00:01:31,920
Create a file inside the includes folder called Setup Dot p p and then I want you to define the function.

21
00:01:31,990 --> 00:01:33,190
Lastly including

22
00:01:38,550 --> 00:01:43,680
the reason we aren't creating this file inside the front folder is because some of the functions we'll

23
00:01:43,680 --> 00:01:48,470
be using here will be applied to both the front end and the back end.

24
00:01:48,510 --> 00:01:54,790
Now that the function is ready let's call the register now menu function.

25
00:01:54,900 --> 00:01:58,680
We need to provide this function a location and description.

26
00:01:58,680 --> 00:02:07,350
I'm going to call this menu primary and give it a simple description of primary menu before I continue.

27
00:02:07,380 --> 00:02:13,200
I'm going to wrap my description inside a function that doesn't really have a proper name but it's called

28
00:02:13,230 --> 00:02:15,660
by typing to underscores.

29
00:02:15,660 --> 00:02:18,840
This function is a special function created by WordPress.

30
00:02:18,930 --> 00:02:22,990
It allows for text to be translated into various languages.

31
00:02:23,040 --> 00:02:27,570
We haven't gone over translations yet but I'll give you a quick rundown.

32
00:02:27,720 --> 00:02:33,450
WordPress comes with various functions for translating strings but double underscore function is just

33
00:02:33,450 --> 00:02:35,790
one of the most commonly used ones.

34
00:02:35,880 --> 00:02:41,730
When we start talking about translations I'll show you the various functions available for now let's

35
00:02:41,730 --> 00:02:43,680
focus on this one function.

36
00:02:43,680 --> 00:02:45,930
This function has two parameters.

37
00:02:45,930 --> 00:02:49,280
The first parameter is the string you would like to translate.

38
00:02:49,440 --> 00:02:52,110
The second parameter is the text domain.

39
00:02:52,110 --> 00:02:59,700
This translation is using earlier we talked about text domains when we created the file header the text

40
00:02:59,730 --> 00:03:02,880
domain is basically the name of your theme folder.

41
00:03:02,880 --> 00:03:05,270
In our case this would be Udemy.

42
00:03:05,340 --> 00:03:08,610
So what does the text domain actually do.

43
00:03:08,610 --> 00:03:13,500
Well first of all your theme won't be the only file that has translations.

44
00:03:13,500 --> 00:03:20,050
Users might have various plugins activating those plugins will most likely have their own translations.

45
00:03:20,160 --> 00:03:25,930
You can think of a text domain as an I.D. If we pass in our text domain.

46
00:03:25,980 --> 00:03:31,310
WordPress will know you want to use a translation from our theme and not some other plugin loaded.

47
00:03:31,770 --> 00:03:32,440
Anyway.

48
00:03:32,550 --> 00:03:37,720
We actually haven't created a translation file and we won't be doing so right now.

49
00:03:37,950 --> 00:03:43,650
If WordPress doesn't find a translation then WordPress just won't translate the string and return the

50
00:03:43,650 --> 00:03:45,300
original string.

51
00:03:45,300 --> 00:03:49,200
You don't have to translate every string but I highly recommend it.

52
00:03:49,230 --> 00:03:53,490
So your plugin or theme can be used by the widens audience possible.

53
00:03:53,490 --> 00:03:55,190
All right that's it for now.

54
00:03:55,230 --> 00:04:00,750
If you didn't understand that's fine I'll be going more in-depth in a future lecture.

55
00:04:00,750 --> 00:04:07,080
Now that we've registered our menu let's display it in the resources section of this lecture.

56
00:04:07,070 --> 00:04:09,890
I've included a link to a function called WP.

57
00:04:09,900 --> 00:04:11,000
Now many.

58
00:04:11,010 --> 00:04:17,100
Let's take a look at it as you can see WordPress has thoroughly documented this function.

59
00:04:17,100 --> 00:04:19,200
It's very powerful and flexible.

60
00:04:19,260 --> 00:04:24,750
We won't be going over every bit here since we don't need to use all the options available to us for

61
00:04:24,750 --> 00:04:25,290
our theme.

62
00:04:26,010 --> 00:04:32,660
Basically what this function does is generate a menu for us and outputs it onto wherever we call it.

63
00:04:32,730 --> 00:04:36,800
Let's get started with using it open the index template.

64
00:04:36,840 --> 00:04:43,500
I want you to search for the navigation tag with the ideas primary menu right above it should be a comment

65
00:04:43,530 --> 00:04:47,200
that says primary navigation inside this element.

66
00:04:47,220 --> 00:04:51,430
You'll find an unordered list with a comment above it that says main menu.

67
00:04:51,450 --> 00:04:53,730
I want you to delete this menu like so

68
00:05:00,680 --> 00:05:08,260
next open some peach be tags and create a conditional statement we're going to check if the current

69
00:05:08,260 --> 00:05:10,570
theme has a particular menu.

70
00:05:10,660 --> 00:05:18,800
You can do this by calling the has now menu function we can then pass in the name of location which

71
00:05:18,800 --> 00:05:19,920
is primary.

72
00:05:20,100 --> 00:05:25,310
If this menu exists then we can continue on inside this conditional statement.

73
00:05:25,310 --> 00:05:33,970
We're going to call the WP NAF menu function this function can be called as is and WordPress will just

74
00:05:33,970 --> 00:05:36,960
use its default settings but we don't want that.

75
00:05:36,970 --> 00:05:39,100
We have some things we would like to specify.

76
00:05:39,580 --> 00:05:42,790
This function only has one parameter which is an array.

77
00:05:42,790 --> 00:05:44,840
So let's create an array.

78
00:05:44,860 --> 00:05:52,910
And in this array the first item will be theme location this keys value should be the location name

79
00:05:52,910 --> 00:05:59,140
we used in the register nav menu function the name of the menu we registered was called primary.

80
00:05:59,270 --> 00:06:08,590
So this keys value should be primary next let's define the container the container is simply a tag that

81
00:06:08,590 --> 00:06:11,410
is wrapped around the navigation H GMO.

82
00:06:11,540 --> 00:06:14,740
WordPress will generate the HCM l for our menu.

83
00:06:14,810 --> 00:06:21,800
The H team l generated is simply you l and l I tags or simply known as an unordered list.

84
00:06:21,980 --> 00:06:29,570
The container key simply asks if we want to wrap this unordered list with a div or NAV tag depending

85
00:06:29,570 --> 00:06:30,230
on your needs.

86
00:06:30,260 --> 00:06:36,170
You can use either however our theme is using Bootstrap and we already have our navigation wrapped with

87
00:06:36,170 --> 00:06:38,750
a div tag so we don't want either.

88
00:06:38,820 --> 00:06:48,300
Let's passing false therefore WordPress won't wrap our unordered list with a div or NAV tag there is

89
00:06:48,360 --> 00:06:57,220
another key we can set which is the menu class key this key allows you to add ADC SS classes to the

90
00:06:57,220 --> 00:06:57,900
UL tag.

91
00:06:58,350 --> 00:07:03,780
I'm assuming you may want to do this if you're using your own template to add multiple classes.

92
00:07:03,810 --> 00:07:09,260
You just space the class names like so class one class two for this thing.

93
00:07:09,270 --> 00:07:12,150
We don't need to use this key so I'm going to get rid of it.

94
00:07:12,840 --> 00:07:13,910
We're almost done.

95
00:07:13,920 --> 00:07:23,280
The next key I want to set is the fallback CBT in some cases your users will not have any menu setup.

96
00:07:23,290 --> 00:07:27,100
This is usually true on a fresh installation of WordPress.

97
00:07:27,100 --> 00:07:31,240
This key allows you to call a function to display a default menu.

98
00:07:31,300 --> 00:07:37,110
You can set this to false if you don't want to display a default menu or HCM El.

99
00:07:37,180 --> 00:07:45,370
Lastly we can define the depth the depth is how many sub menus the user can have.

100
00:07:45,550 --> 00:07:51,240
Currently my C assess only allows for a depth of 4 if you want to have more depth.

101
00:07:51,280 --> 00:07:57,610
You can do so by adding additional C assets if you want to allow an unlimited number of sub menu items.

102
00:07:57,670 --> 00:07:59,940
Then you can set this to 0.

103
00:08:00,040 --> 00:08:01,090
That's it.

104
00:08:01,090 --> 00:08:04,840
Now if we refresh the page it won't work as expected.

105
00:08:04,840 --> 00:08:07,930
This is because we haven't created a menu yet.

106
00:08:07,930 --> 00:08:11,140
Let's do that now inside the WordPress dashboard.

107
00:08:11,140 --> 00:08:14,230
Go to a parent's menus and then create a menu

108
00:08:22,870 --> 00:08:29,080
take quick notice of the menu settings section you'll see that there's a some section called display

109
00:08:29,080 --> 00:08:30,170
location.

110
00:08:30,250 --> 00:08:34,840
This lists all the display locations we registered in our setup file.

111
00:08:34,840 --> 00:08:37,780
Let's assign this menu to the primary menu.

112
00:08:37,810 --> 00:08:43,210
I'm only going to have the about page assigned to this menu after saving the menu.

113
00:08:43,210 --> 00:08:45,600
Go back to the front end and refresh.

114
00:08:45,730 --> 00:08:49,980
You'll notice the about menu item being generated properly.

115
00:08:50,140 --> 00:08:54,830
You can click this if you like and it will work but it won't display the content.

116
00:08:55,090 --> 00:08:56,770
Will fix that very soon.

117
00:08:56,770 --> 00:09:03,340
If you haven't already removed the static HDL for the menu let's recap what's going on.

118
00:09:03,350 --> 00:09:08,650
First we tell WordPress that our theme has a location for menus by using the register now.

119
00:09:08,650 --> 00:09:09,950
Menu function.

120
00:09:09,970 --> 00:09:17,680
Lastly we tell WordPress where to load the menu in our template by using the WP NAF menu function something

121
00:09:17,710 --> 00:09:22,010
I want you to note is that you don't have to call these functions from within the hook.

122
00:09:22,030 --> 00:09:26,320
These functions can be called directly inside the functions file.

123
00:09:26,350 --> 00:09:30,320
However I highly advise that you use hooks whenever possible.

124
00:09:30,340 --> 00:09:35,280
This is so only code that should be called is called in appropriate locations.

125
00:09:35,320 --> 00:09:40,450
If you were to stuff your functions file with loads of code then you make it hard to debug it.

126
00:09:40,450 --> 00:09:42,710
Since so much is going on.

127
00:09:42,850 --> 00:09:48,520
Another thing I want to note is that in the WordPress menu page you'll see WordPress output in the phrase

128
00:09:48,520 --> 00:09:51,810
primary menu for the display location.

129
00:09:51,830 --> 00:09:58,000
Earlier I told you about translations and how they performed WordPress acknowledged that this phrase

130
00:09:58,000 --> 00:10:04,430
can be translated and tried to translate it since we don't have any translations set WordPress than

131
00:10:04,510 --> 00:10:06,510
output in the string assets.

132
00:10:06,520 --> 00:10:12,310
I just wanted you to notice that before I end this lecture I want you to be aware of how the markup

133
00:10:12,370 --> 00:10:14,740
and c assesses for my menu.

134
00:10:14,740 --> 00:10:17,110
This is not a bootstrap menu.

135
00:10:17,110 --> 00:10:23,140
This is a custom made C Ss menu despite bootstrap coming with it some classes for menus.

136
00:10:23,140 --> 00:10:24,920
I decided not to use it.

137
00:10:25,000 --> 00:10:29,610
Now this is just a C Ss preference and not related to WordPress.

138
00:10:29,650 --> 00:10:35,040
With that being said bootstrap requires that you set up a menu with certain classes.

139
00:10:35,050 --> 00:10:41,320
Unfortunately the WP nav menu function is pretty limited when it comes to adding classes to certain

140
00:10:41,320 --> 00:10:42,150
menus.

141
00:10:42,340 --> 00:10:46,090
In these cases you have to use something called a Walker.

142
00:10:46,090 --> 00:10:51,020
Walker's are a programming concept and not specific to WordPress only.

143
00:10:51,100 --> 00:10:57,070
Walker's are a way to go through an array and if those arrays have arrays inside of them it'll go through

144
00:10:57,070 --> 00:10:58,100
that too.

145
00:10:58,150 --> 00:11:04,390
It just keeps going and going until every value has been looped through creating a Walker can be fairly

146
00:11:04,390 --> 00:11:05,490
complex.

147
00:11:05,500 --> 00:11:11,940
Luckily there is a developer who has solved the problem of creating a walker with bootstrap markup in

148
00:11:11,950 --> 00:11:14,120
the resources section of this lecture.

149
00:11:14,140 --> 00:11:19,050
I provide a link to the WP bootstrap nav Walker class.

150
00:11:19,210 --> 00:11:22,930
I won't be going through this as it's not necessary for our theme.

151
00:11:22,930 --> 00:11:25,750
However it's fairly easy to implement.

152
00:11:25,840 --> 00:11:32,950
All you have to do is include the file and then modify the WP now menu function in the examples below.

153
00:11:32,980 --> 00:11:38,830
All right in the next lecture we'll focus on the header and footer next.
