1
00:00:07,510 --> 00:00:07,980
All right.

2
00:00:08,040 --> 00:00:12,820
So right now I'm looking at a function called register sidebar as usual.

3
00:00:12,840 --> 00:00:16,560
Check out the resource section of this lecture for the link.

4
00:00:16,560 --> 00:00:22,650
This function will tell WordPress that we have sidebars we'd like WordPress to be aware of by doing

5
00:00:22,650 --> 00:00:23,130
this.

6
00:00:23,130 --> 00:00:27,510
We allow users to customize the sidebar by adding various widgets.

7
00:00:27,570 --> 00:00:33,180
If you look at the very short description WordPress recommends that we use this function in the widgets

8
00:00:33,240 --> 00:00:34,730
in net action hook.

9
00:00:34,800 --> 00:00:38,550
So let's do that inside the function's file.

10
00:00:38,550 --> 00:00:43,740
Let's add this hook under the hooks section and let's call the function J you widgets

11
00:00:46,270 --> 00:00:56,890
next let's create a file inside the includes folder called widgets stop BHP and define the function.

12
00:00:56,910 --> 00:01:02,880
Lastly include it from the functions file.

13
00:01:02,940 --> 00:01:06,540
Now we can create widget areas for our theme.

14
00:01:06,630 --> 00:01:11,390
Let's take a look at the documentation for the register a sidebar function.

15
00:01:11,390 --> 00:01:14,010
There is only one parameter and it's optional.

16
00:01:14,010 --> 00:01:15,950
This function accepts an array.

17
00:01:16,140 --> 00:01:19,570
Let's go through this one by one inside the widgets file.

18
00:01:19,740 --> 00:01:27,800
So let's call this function and pass it in array.

19
00:01:27,840 --> 00:01:30,450
The first key is the name of the sidebar.

20
00:01:30,450 --> 00:01:33,670
The name should be readable short and concise.

21
00:01:33,690 --> 00:01:39,510
I'll be using the double underscore function just like last time since I want to allow users to translate

22
00:01:39,510 --> 00:01:41,040
this name if needed.

23
00:01:41,130 --> 00:01:46,040
I'm going to call it my first theme sidebar.

24
00:01:46,140 --> 00:01:53,550
The second key we can set is the I.D. We must set an I.D. or WordPress will throw an error before we

25
00:01:53,550 --> 00:01:54,630
set the I.D..

26
00:01:54,630 --> 00:01:56,890
Let's go to the codex for a second.

27
00:01:56,940 --> 00:02:03,630
Scroll down to the notes and I want you to look at the very first note WordPress warns us of I.D. we

28
00:02:03,630 --> 00:02:06,870
should avoid and provide a link of ideas not to use.

29
00:02:07,260 --> 00:02:08,990
So let's take a quick look.

30
00:02:09,030 --> 00:02:11,420
As you can see the list is pretty exhaustive.

31
00:02:11,880 --> 00:02:18,060
Let's go back to our widget file and let's give our widget a unique I.D. one way of making sure we have

32
00:02:18,060 --> 00:02:23,610
a unique I.D. is to prefix our I.D. with initials like we do with our functions.

33
00:02:23,640 --> 00:02:26,840
I'm going to give my sidebar the idea J U sidebar.

34
00:02:29,270 --> 00:02:31,460
Next it's a simple description.

35
00:02:31,460 --> 00:02:36,400
I'm going to make this translatable and set it to sidebar for the theme Udemy

36
00:02:41,650 --> 00:02:46,480
I'm going to skip the class key as I don't want to apply any classes.

37
00:02:46,510 --> 00:02:51,790
There are a couple more things we should be doing but I just want to make sure our widgets are working.

38
00:02:51,790 --> 00:02:55,830
Go ahead and refresh the page.

39
00:02:55,920 --> 00:02:58,120
We should see no errors so far.

40
00:02:58,530 --> 00:03:04,200
Let's go to the WordPress dashboard and you should now see a new menu item appear under appearance called

41
00:03:04,200 --> 00:03:05,200
widgets.

42
00:03:05,220 --> 00:03:07,040
Let's check this out quickly.

43
00:03:07,260 --> 00:03:12,960
As you can see WordPress now has created a nice little UI for our sidebar.

44
00:03:12,960 --> 00:03:16,860
It takes care of saving and updating the sidebar right now.

45
00:03:16,860 --> 00:03:21,150
Our Sidebar Is empty so let's drag and drop some widgets onto the sidebar

46
00:03:25,840 --> 00:03:26,830
after doing so.

47
00:03:26,830 --> 00:03:28,630
Let's take a look at our site.

48
00:03:28,630 --> 00:03:31,210
You'll notice that our widgets aren't loading.

49
00:03:31,210 --> 00:03:34,300
This is because we've only registered the sidebar.

50
00:03:34,330 --> 00:03:38,020
The next step is to display the sidebar before we do that.

51
00:03:38,050 --> 00:03:41,260
Let's separate our sidebar from our template.

52
00:03:41,260 --> 00:03:47,410
Just like the header and footer sidebar can be put into their own files and can be called with the function

53
00:03:47,410 --> 00:03:48,880
get sidebar.

54
00:03:48,880 --> 00:03:52,230
The rules for names apply to this function as well.

55
00:03:52,360 --> 00:03:58,100
Create a file called sidebar dot HP next.

56
00:03:58,140 --> 00:04:03,870
Let's completely cut the HDL for the sidebar from our template into the sidebar file.

57
00:04:03,870 --> 00:04:08,310
You can find this by looking for the div tag with the class sidebar.

58
00:04:08,300 --> 00:04:16,860
It will also be surrounded by these H.G. comments that say sidebar once you've pasted that go back to

59
00:04:16,860 --> 00:04:19,970
the index template and call the get sidebar function.

60
00:04:22,240 --> 00:04:24,610
Let's go back to the sidebar template.

61
00:04:24,610 --> 00:04:30,550
I'm going to actually delete a lot of the HMO inside the div tag and leave it empty like so.

62
00:04:30,550 --> 00:04:39,040
Since the sidebar is going to be dynamic inside the sidebar file we have to check if the sidebar is

63
00:04:39,040 --> 00:04:41,620
active inside an if statement.

64
00:04:41,740 --> 00:04:44,080
Let's call the is active sidebar.

65
00:04:44,080 --> 00:04:44,530
Function

66
00:04:49,750 --> 00:04:53,020
this function does exactly what we need it to do.

67
00:04:53,020 --> 00:04:55,380
It will check if the sidebar is active.

68
00:04:55,420 --> 00:04:57,830
You simply pass in the name of the sidebar.

69
00:04:58,030 --> 00:05:02,780
In our case this would be the I.D. of the sidebar we created which was J.

70
00:05:02,780 --> 00:05:05,870
U sidebar inside this conditional statement.

71
00:05:05,920 --> 00:05:11,920
If it returns true that will call a function called dynamic sidebar which will take care of displaying

72
00:05:11,920 --> 00:05:12,570
our sidebar.

73
00:05:14,860 --> 00:05:21,110
The only thing we have to pass it is the I.D. of the sidebar which is J you underscore sidebar.

74
00:05:21,460 --> 00:05:25,200
Any widgets that are attached to the sidebar will now be displayed.

75
00:05:25,270 --> 00:05:30,360
If we did everything right we should now see our new sidebar appear on the page.

76
00:05:30,370 --> 00:05:30,820
Great.

77
00:05:31,240 --> 00:05:36,300
Well not so great because the h t email output it doesn't really go well with our theme.

78
00:05:36,460 --> 00:05:37,940
Let's fix this.

79
00:05:38,110 --> 00:05:42,940
Let's take a look at the Codex and learn more about the register sidebar function.

80
00:05:42,940 --> 00:05:45,160
There are four more keys we can set.

81
00:05:45,160 --> 00:05:50,530
They are the before widget after widget before title and after title keys.

82
00:05:50,680 --> 00:05:56,340
These keys allow us to inject H2 UML into the sidebars as each name states.

83
00:05:56,340 --> 00:06:00,670
It will insert H shemale at some point of each widget created.

84
00:06:00,670 --> 00:06:03,790
I'm going to pause the video for a bit and fill out these keys.

85
00:06:05,370 --> 00:06:09,760
All right now I want you to copy what I have for the most part.

86
00:06:09,770 --> 00:06:11,720
Nothing in here is really special.

87
00:06:11,750 --> 00:06:16,480
This is just regular H GMO with some classes to make our widgets look pretty.

88
00:06:16,730 --> 00:06:22,730
It can look a bit confusing because there are so many Opening and Closing Tax widgets areas are a bit

89
00:06:22,730 --> 00:06:23,860
tricky to create.

90
00:06:23,870 --> 00:06:30,440
If you create widget areas with so many classes and tax so when you're designing your site try and keep

91
00:06:30,440 --> 00:06:33,140
the H team L for widgets fairly minimal.

92
00:06:33,140 --> 00:06:36,640
I was able to create this through trial and error.

93
00:06:36,830 --> 00:06:40,850
The only thing I want you to focus on is the before widget key.

94
00:06:40,850 --> 00:06:47,900
You'll notice that I have these random set of characters in the class and idea attributes these attributes

95
00:06:47,930 --> 00:06:52,670
are a bit special because this tag is the container tag for the whole widget.

96
00:06:52,760 --> 00:06:56,210
You can think of these random characters as place holders.

97
00:06:56,240 --> 00:07:01,880
There are some widgets out there that might want to add their own classes and set their own I.D. by

98
00:07:01,880 --> 00:07:06,120
providing these characters we allow for a third party widgets to do so.

99
00:07:06,290 --> 00:07:08,690
We don't have to do anything else.

100
00:07:08,860 --> 00:07:12,900
Now let's refresh the home page and see what our widgets look like now.

101
00:07:13,250 --> 00:07:17,090
If yours looks anything like mine then you're on the right track.

102
00:07:17,240 --> 00:07:22,640
It's definitely looking closer to the original template but we still need to make changes.

103
00:07:22,700 --> 00:07:28,130
We've run across a problem you'll find yourself running into when creating widget areas and sidebars

104
00:07:28,790 --> 00:07:29,750
from the beginning.

105
00:07:29,750 --> 00:07:34,930
WordPress really tries its best to not dictate exactly what you have to include.

106
00:07:35,180 --> 00:07:39,270
You can use a lot of your own C assess javascript and each GM l.

107
00:07:39,350 --> 00:07:45,720
However widgets are special case because the H GM L for widgets are generated by WordPress.

108
00:07:45,920 --> 00:07:53,090
Anything generated by WordPress tends to be difficult to edit the HDL and class is loaded don't match

109
00:07:53,090 --> 00:07:54,710
the ones with our template.

110
00:07:54,770 --> 00:07:59,510
I want you to remember that the template we're using was not built for wordpress.

111
00:07:59,570 --> 00:08:05,560
I want to show you it's completely possible to convert an HD email template into a wordpress theme.

112
00:08:05,660 --> 00:08:11,900
What we have here is a conflicting HMO and assessed situation.

113
00:08:12,040 --> 00:08:13,690
So how do we fix this.

114
00:08:13,690 --> 00:08:15,730
We have about three options.

115
00:08:15,730 --> 00:08:21,790
The first option is to override the H GM L for these widgets and make WordPress load these widgets formatted

116
00:08:21,790 --> 00:08:24,900
the same way our HD email template does.

117
00:08:25,000 --> 00:08:30,940
The second option is to just create our own version of these widgets and have complete control over

118
00:08:30,940 --> 00:08:33,690
the GMO and information loaded.

119
00:08:33,880 --> 00:08:40,350
The final option is to edit the template CFS file so that they look similar to the H2 email template.

120
00:08:40,510 --> 00:08:46,690
We will be going with option 3 because that's the simplest of the three trying to override the default

121
00:08:46,720 --> 00:08:47,650
WordPress widgets.

122
00:08:47,650 --> 00:08:49,850
It's more difficult than you can imagine.

123
00:08:50,080 --> 00:08:55,040
Actually WordPress doesn't even provide you with a way to override these widgets.

124
00:08:55,060 --> 00:09:01,360
This forces you to try and hack the word press corps if you have any experience with trying to hack

125
00:09:01,360 --> 00:09:08,560
a framework or CNS then you know it can lead to massive headaches so we'll just be editing the CFS file

126
00:09:08,590 --> 00:09:11,320
so that the widgets look similar to our theme.

127
00:09:11,440 --> 00:09:13,900
It's faster and way easier.

128
00:09:13,900 --> 00:09:18,130
A lot of developers tend to opt into this route because it's so simple.

129
00:09:18,130 --> 00:09:20,900
The second option is also commonly taken.

130
00:09:21,010 --> 00:09:27,220
It may seem redundant but you also give yourself the opportunity to add more options that originally

131
00:09:27,280 --> 00:09:30,070
weren't available in the default widgets.

132
00:09:30,100 --> 00:09:37,410
It's completely allowed and even recommended we'll definitely be exploring how to create our own widgets

133
00:09:37,410 --> 00:09:38,730
in a future election.

134
00:09:38,730 --> 00:09:41,290
For now we'll just go with option 3.

135
00:09:41,400 --> 00:09:48,410
As I stated earlier we won't focus so much on the HCM Ellen C Ss since we have the freedom to use whatever

136
00:09:48,420 --> 00:09:49,800
frameworks we want.

137
00:09:49,800 --> 00:09:57,390
I'm going to actually give you all the C Ss all at once inside the assets slash extra folder.

138
00:09:57,390 --> 00:10:03,460
You'll find a number of files that contain some HDL NC SS already created for you.

139
00:10:03,540 --> 00:10:11,430
I want you to open the widgets dash CSX that t file and paste the contents of this file into the custom

140
00:10:11,430 --> 00:10:18,200
dot CFS file inside the assets slash C Ss folder just paste it into the very bottom of the file.

141
00:10:18,960 --> 00:10:25,590
If you're wondering how I did this all I did was look at the GM L and classes WordPress generated then

142
00:10:25,710 --> 00:10:27,610
I just added my own stylings.

143
00:10:27,660 --> 00:10:29,860
It was all trial and error.

144
00:10:29,880 --> 00:10:35,640
It is time consuming but definitely the shortest and easiest route out of the three.

145
00:10:35,640 --> 00:10:41,640
If you plan on specializing in wordpress theme development then this kind of error can be easily avoided

146
00:10:41,640 --> 00:10:45,930
by preparing your HD email templates to be WordPress ready.

147
00:10:45,930 --> 00:10:47,730
I'm going to refresh the page now.

148
00:10:48,120 --> 00:10:51,660
You'll notice that these don't look anything like our template.

149
00:10:51,660 --> 00:10:57,000
This is because we're very limited to what we can style and what we can add with Wordpress widgets.

150
00:10:57,090 --> 00:11:03,390
I promise when we start creating widgets we'll definitely recreate our own versions of these widgets

151
00:11:03,480 --> 00:11:09,630
with the original template styles and format it just so you know a lot of commercial shops require that

152
00:11:09,630 --> 00:11:11,030
you format these widgets.

153
00:11:11,070 --> 00:11:16,980
Even if you provide better versions of these widgets in the end you never know which the user prefers.

154
00:11:16,980 --> 00:11:19,830
So it's best to accommodate all scenarios.
