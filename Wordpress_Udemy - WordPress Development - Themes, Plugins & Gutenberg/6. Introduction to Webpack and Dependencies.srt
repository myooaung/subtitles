1
00:00:07,700 --> 00:00:12,980
We've explored how to load modules in the previous lectures but now it's time to learn how to use an

2
00:00:12,980 --> 00:00:14,480
actual module.

3
00:00:14,480 --> 00:00:20,060
Throughout this course we'll be using something called Web pack in the resource section of this lecture.

4
00:00:20,060 --> 00:00:25,280
I provide a link to the Web site Web PAC describes itself as a module bungler.

5
00:00:25,400 --> 00:00:31,610
That's not very descriptive so allow me to explain further Gutenberg requires a lot of files in order

6
00:00:31,610 --> 00:00:33,280
for it to function correctly.

7
00:00:33,560 --> 00:00:35,350
As you progressed through this course.

8
00:00:35,390 --> 00:00:41,300
You'll find that we'll have dozens of files created just for the front end loading all these files is

9
00:00:41,300 --> 00:00:46,130
bad practice as it can use up resources and hurt the performance of our site.

10
00:00:46,400 --> 00:00:53,630
When Pax solves most of this by combining all your files together let's say you had dozens of J.S. files

11
00:00:53,630 --> 00:00:59,610
for your plugin web pack will grab all those scripts and try to combine them into one or two files.

12
00:00:59,600 --> 00:01:05,960
It'll also take care of minute filing and optimizing your code for you when PAC can do so much more.

13
00:01:05,960 --> 00:01:12,080
By also combining your styles and compressing your images it can also create a web server for testing

14
00:01:12,080 --> 00:01:14,030
your site on the site.

15
00:01:14,030 --> 00:01:20,270
You'll see that web pack provides a simple diagram on how it works on the left you'll see various files

16
00:01:20,300 --> 00:01:22,100
needed for your code to work.

17
00:01:22,100 --> 00:01:25,660
This includes files from third party frameworks and libraries.

18
00:01:25,670 --> 00:01:31,370
These files will be processed through web pack and as a result you'll have fewer files that are ready

19
00:01:31,370 --> 00:01:33,400
to be used in production.

20
00:01:33,410 --> 00:01:39,560
You'll notice that it also processes different file types so it's not just JavaScript see assessing

21
00:01:39,560 --> 00:01:40,670
each GM out.

22
00:01:40,750 --> 00:01:46,370
Westpac takes a little bit of work to set up initially but I promise you that it's very easy once you

23
00:01:46,370 --> 00:01:47,690
understand what's going on.

24
00:01:48,470 --> 00:01:54,500
I want to highlight that we won't be using all of web packs features we don't need it server because

25
00:01:54,500 --> 00:01:55,720
we already have one.

26
00:01:55,850 --> 00:02:02,960
We don't need to compress images or process the SS files we will solely focus on the javascript that

27
00:02:02,960 --> 00:02:06,470
web pack can help us with this is perfectly fine.

28
00:02:06,470 --> 00:02:09,390
You don't have to use web pack to its full extent.

29
00:02:09,410 --> 00:02:14,320
A lot of the additional features are for developers who want to use web pack with known as the back

30
00:02:14,320 --> 00:02:14,970
end.

31
00:02:15,020 --> 00:02:19,220
Since we're using P HP and WordPress we don't need those extra features.

32
00:02:19,280 --> 00:02:24,050
We just want help with the javascript code using web pact is completely optional.

33
00:02:24,230 --> 00:02:30,500
However as you may have noticed I like to keep my code clean and organized web PAC will really help

34
00:02:30,500 --> 00:02:32,960
us with organizing and scanning our code.

35
00:02:32,960 --> 00:02:38,000
I also want to use the latest javascript features which aren't available in modern browsers.

36
00:02:38,000 --> 00:02:41,740
This is something we'll explore more as the course progresses.

37
00:02:41,780 --> 00:02:43,320
Let's look at some examples.

38
00:02:43,340 --> 00:02:46,020
You don't have to follow along just watch.

39
00:02:46,130 --> 00:02:50,060
Right now I'm on a site called strand bird guitars.

40
00:02:50,060 --> 00:02:54,110
I'm going to open my developer tools and select the network tab.

41
00:02:54,110 --> 00:03:00,140
We've talked about the network tab before it allows you to view the files loaded and how long it takes

42
00:03:00,140 --> 00:03:02,110
for those files to load.

43
00:03:02,120 --> 00:03:05,690
I'm going to filter the results to only display javascript.

44
00:03:05,690 --> 00:03:13,720
Then I'm going to completely refresh the page and see what we get as you can see there are dozens of

45
00:03:13,720 --> 00:03:17,280
files being loaded and the site takes some time to load.

46
00:03:17,290 --> 00:03:19,420
Let's take a look at another example.

47
00:03:19,420 --> 00:03:21,650
I'm on the Udemy site now.

48
00:03:21,700 --> 00:03:27,940
I'm going to do the same thing as before open the developer tools and refresh the page right away.

49
00:03:27,940 --> 00:03:30,150
You'll notice one huge difference.

50
00:03:30,220 --> 00:03:34,240
There are weightless files being loaded and the site is loading faster.

51
00:03:34,240 --> 00:03:39,830
You may or may not have noticed but Udemy is a single page app since it's a single page app.

52
00:03:39,850 --> 00:03:43,450
You don't have hundreds and hundreds of files that should be loaded.

53
00:03:43,450 --> 00:03:46,730
However the Udemy development team is very smart.

54
00:03:46,750 --> 00:03:52,900
If the developers use Web pack to combine all their files together which reduces the amount of time

55
00:03:52,900 --> 00:03:56,420
to load their site I can actually prove this further.

56
00:03:56,500 --> 00:04:00,810
If I click on one of these scripts you'll see the preview appear on the right.

57
00:04:00,910 --> 00:04:07,300
You'll notice the code has the key word web pack when PAC will load its own code to help you organize

58
00:04:07,300 --> 00:04:08,220
your code.

59
00:04:08,260 --> 00:04:13,840
If you take a closer look you'll notice that this file contains libraries such as angular and angular

60
00:04:13,840 --> 00:04:15,050
carousel.

61
00:04:15,100 --> 00:04:21,710
Usually you would expect these to be in separate files but with Westpac we now have one individual file.

62
00:04:21,790 --> 00:04:24,040
This is the power of Westpac.

63
00:04:24,100 --> 00:04:24,540
All right.

64
00:04:24,640 --> 00:04:26,750
Let's get started with using Westpac.

65
00:04:26,830 --> 00:04:30,790
Right now I'm inside a folder called Web pack dash example.

66
00:04:30,940 --> 00:04:34,300
I want you to create a folder and name it whatever you want.

67
00:04:34,690 --> 00:04:38,790
I also want you to open your terminal and navigate to this directory.

68
00:04:38,890 --> 00:04:44,430
I'm using Visual Studio code so my terminal will automatically point to this directory.

69
00:04:44,530 --> 00:04:49,930
I'm going to run the commands and PM in it.

70
00:04:49,960 --> 00:04:54,120
This is a sub command that will help us generate a basic package file.

71
00:04:54,370 --> 00:04:56,460
You'll see what this looks like in a moment.

72
00:04:56,680 --> 00:05:01,300
After running this command go we take him through a walkthrough to help you customize your package file

73
00:05:01,750 --> 00:05:07,410
the first field is the name property node will usually recommend some default settings.

74
00:05:07,420 --> 00:05:09,710
If you decide to leave these fields empty.

75
00:05:09,970 --> 00:05:15,520
I'm fine with the name so I'm just going to press enter it'll then ask for a version.

76
00:05:15,550 --> 00:05:17,460
I'm also fine with the default.

77
00:05:17,590 --> 00:05:19,990
Then you'll be asked to enter a description.

78
00:05:20,200 --> 00:05:23,860
Even though there is no default this value is also optional.

79
00:05:23,860 --> 00:05:26,800
So I'm just going to keep moving forward.

80
00:05:26,880 --> 00:05:30,780
It'll then ask for the name of the entry point to file by default.

81
00:05:30,790 --> 00:05:33,350
This is set to index dot J Yes.

82
00:05:33,550 --> 00:05:37,470
Keep in mind that you can name your entry point or file whatever you want.

83
00:05:37,510 --> 00:05:41,630
You can set this to apt on JSA or even server dodgy.

84
00:05:41,950 --> 00:05:48,130
I'm going to keep it simple and just leave it at the default which is index dot J.S. the next property

85
00:05:48,220 --> 00:05:49,890
is the test commands.

86
00:05:49,990 --> 00:05:55,760
Tests do exactly what they sound like they will test your code for any bugs or errors.

87
00:05:55,780 --> 00:06:01,870
However we won't be doing that so we'll leave this empty get repository will also be empty.

88
00:06:01,900 --> 00:06:07,050
Since we won't be using get keywords author and license will also be empty.

89
00:06:07,750 --> 00:06:10,300
You'll be asked if the settings you set are fine.

90
00:06:10,780 --> 00:06:17,020
I'm going to say yes and then press enter node will then generate a file called package Di Jason.

91
00:06:17,500 --> 00:06:22,660
Open this file and view the contents as you can see all our settings are now St.

92
00:06:22,780 --> 00:06:28,500
For the most part a lot of these properties are unimportant to us as we won't be using Node heavily.

93
00:06:28,540 --> 00:06:32,500
We'll only be using it to help process and combine files.

94
00:06:32,500 --> 00:06:37,660
You'll notice we have this property called scripts where we can define our own commands.

95
00:06:37,720 --> 00:06:42,940
We'll take a look at this later but you should be aware that it contains the test command we were asked

96
00:06:42,940 --> 00:06:45,830
to input earlier since we input nothing.

97
00:06:45,830 --> 00:06:50,290
It'll just have this default text saying there was no test command give it.

98
00:06:50,560 --> 00:06:56,950
That's fine we won't be using this anyway so the default value is just fine as it's you are allowed

99
00:06:56,950 --> 00:07:02,320
to create this file manually but I always prefer using the command as it makes sure if there are no

100
00:07:02,320 --> 00:07:03,430
errors.

101
00:07:03,460 --> 00:07:08,490
The reason we need this package file is because we'll be installing and using various modules.

102
00:07:08,590 --> 00:07:13,920
The package file will save the modules we use and even keep track of the versions used.

103
00:07:14,020 --> 00:07:19,330
You won't be able to see the benefits in this lecture but I assure you that it will help us in the future.

104
00:07:19,450 --> 00:07:20,050
For now.

105
00:07:20,050 --> 00:07:22,480
Just make sure you have it all right.

106
00:07:22,480 --> 00:07:25,750
Now we can install Webb pack to install Webb pack.

107
00:07:25,780 --> 00:07:35,190
You'll need to run the commands npm install Webb pack dash dash save dash Dev let's stop right here

108
00:07:35,520 --> 00:07:36,400
for the most part.

109
00:07:36,420 --> 00:07:40,730
This isn't anything we haven't done so far to install Webb pack.

110
00:07:40,740 --> 00:07:44,370
We have to use the NPM install Webb pack commands.

111
00:07:44,390 --> 00:07:50,580
However we also have this dash dash save dash Dev text right after it.

112
00:07:50,880 --> 00:07:54,540
And this example we're using the save Dev flag.

113
00:07:54,540 --> 00:07:58,750
This flag tells no that it should save this module inside the package.

114
00:07:58,830 --> 00:08:01,620
Jason File as it's a required module.

115
00:08:01,620 --> 00:08:04,230
You'll see what this looks like in just a moment.

116
00:08:04,230 --> 00:08:10,460
All right let's execute this command node will do its usual thing and install Westpac for us.

117
00:08:16,390 --> 00:08:22,450
Once Webb Park is installed you'll see the node underscore modules up here along with all the modules

118
00:08:22,450 --> 00:08:24,560
required to make Webb pack work.

119
00:08:24,580 --> 00:08:30,160
I want you to open up the package dock Jason File and you'll notice that there has been one change to

120
00:08:30,160 --> 00:08:33,730
the file by using the save Dev flag.

121
00:08:33,850 --> 00:08:39,630
Node will update the contents of this file by setting this property called Dev dependencies.

122
00:08:39,640 --> 00:08:43,630
This property contains a list of all modules we have installed.

123
00:08:43,870 --> 00:08:49,450
The benefit of this is that we no longer have to worry about remembering the name of the module.

124
00:08:49,450 --> 00:08:50,980
I want to show you something.

125
00:08:51,100 --> 00:08:59,320
I'm going to delete the node underscore modules folder let's imagine that I'm moving my files from one

126
00:08:59,320 --> 00:09:04,620
system to another transferring modules can take a bit of time to save some time.

127
00:09:04,660 --> 00:09:06,430
You may want to ignore those files.

128
00:09:06,910 --> 00:09:11,320
Luckily you don't have to memorize all the names for each package.

129
00:09:11,320 --> 00:09:17,560
Instead if you have the package Doc Jason File then you can reinstall all the modules by just running

130
00:09:17,650 --> 00:09:19,090
NPM install.

131
00:09:19,150 --> 00:09:24,970
If you don't specify a module to install then node will assume you want to install the dependencies

132
00:09:24,970 --> 00:09:28,330
specified inside the package dot Jason File.

133
00:09:28,330 --> 00:09:33,060
I'm going to run this command just like that.

134
00:09:33,070 --> 00:09:35,530
I'll have web pack installed again.

135
00:09:35,530 --> 00:09:36,070
All right.

136
00:09:36,160 --> 00:09:40,450
There's one last thing I want to show you before we move onto configuring web pack.

137
00:09:40,450 --> 00:09:45,910
There are two kinds of dependencies production dependencies and developer dependency.

138
00:09:45,910 --> 00:09:51,670
Right now we're using a developer dependency developer dependencies are modules that are only meant

139
00:09:51,670 --> 00:09:52,660
for development.

140
00:09:52,810 --> 00:09:57,910
Developer dependency should not be used on a life site production dependencies.

141
00:09:57,910 --> 00:10:02,110
On the other hand are meant to be used for live sites or projects.

142
00:10:02,170 --> 00:10:10,720
I'm going to delete my node underscore modules folder and remove the property Dev dependencies this

143
00:10:10,720 --> 00:10:18,200
time I'm going to run the command NPM install Web pack dash dash save.

144
00:10:18,370 --> 00:10:21,110
There are two flags for saving dependencies.

145
00:10:21,130 --> 00:10:29,090
I'm going to run this command and then go over the differences once again all have web pack installed.

146
00:10:29,110 --> 00:10:30,650
Let's view the package.

147
00:10:30,650 --> 00:10:36,490
Dot Jason File again this time a new property called dependencies is created.

148
00:10:36,520 --> 00:10:39,220
This property will contain modules for production.

149
00:10:39,220 --> 00:10:43,460
Only the dev dependencies will contain modules for development.

150
00:10:43,480 --> 00:10:49,930
Only you can specify what modules should be for production or development by using either the save or

151
00:10:49,930 --> 00:10:52,770
save dash Dev flags respectively.

152
00:10:53,080 --> 00:10:58,360
For the most part it actually doesn't matter in our project because we won't be using note at all for

153
00:10:58,360 --> 00:11:00,160
the production part of the site.

154
00:11:00,220 --> 00:11:05,740
We're only using Node for development purposes so I just use the save Dev flag.

155
00:11:05,830 --> 00:11:14,450
I'm going to delete the node underscore modules folder again and remove the dependencies property then

156
00:11:14,540 --> 00:11:23,250
I'm going to run the NPM install web pack dash dash save dash Dev command again.

157
00:11:23,340 --> 00:11:23,990
All right.

158
00:11:24,010 --> 00:11:28,870
That was a long introduction and I knew it was a lot to go through but that's the basics of getting

159
00:11:28,870 --> 00:11:31,390
started with web pack and the next lecture.

160
00:11:31,390 --> 00:11:33,910
We're going to begin configuring web PAC.
