WEBVTT
1
00:00:07.640 --> 00:00:08.320
Welcome.

2
00:00:08.480 --> 00:00:14.090
In this section we're going to be exploring other blogs provided by WordPress at this point.

3
00:00:14.090 --> 00:00:19.070
He should be comfortable with the basic concepts of Gutenberg development in this lecture.

4
00:00:19.070 --> 00:00:22.770
I'm going to give you a high level overview of Gutenberg.

5
00:00:22.820 --> 00:00:30.170
Right now I'm on the Gutenberg get Hub Repository Gutenberg splits itself up into multiple modules all

6
00:00:30.170 --> 00:00:33.610
these modules can be found inside the packages directory.

7
00:00:33.770 --> 00:00:38.000
It splits itself up to make things easier to manage and categorize.

8
00:00:38.000 --> 00:00:43.500
There are a couple of directories here we've skipped over or haven't gone over yet to start things off.

9
00:00:43.520 --> 00:00:50.420
I'll briefly go over the blocks in components folder again the blocks folder it contains components

10
00:00:50.420 --> 00:00:53.040
related to the Gutenberg editor itself.

11
00:00:53.120 --> 00:00:58.580
A lot of the components here are only meant for the Gutenberg editor but there isn't anything stopping

12
00:00:58.580 --> 00:01:00.920
you from using them in other areas.

13
00:01:00.920 --> 00:01:06.830
The components folder contains another set of components but these are very generic components.

14
00:01:06.890 --> 00:01:11.330
Currently they're used for the Gutenberg Ed but they can be used outside of it.

15
00:01:11.690 --> 00:01:17.300
There's a possibility that the whole WordPress admin dashboard will be turned into a single page app

16
00:01:17.600 --> 00:01:23.120
to prepare for that certain components have been made into generic ones so that they can be reused.

17
00:01:23.330 --> 00:01:24.680
You'll find most of them here.

18
00:01:27.030 --> 00:01:32.770
The data folder contains the functionality for creating managing and storing data.

19
00:01:32.820 --> 00:01:38.670
If you're familiar with react then you should feel right at home as WordPress uses a redux like management

20
00:01:38.670 --> 00:01:39.490
system.

21
00:01:39.540 --> 00:01:48.230
If you were to read through this a word that'll come up often is state a state is simply an object that

22
00:01:48.230 --> 00:01:50.850
contains the current settings of the application.

23
00:01:50.990 --> 00:01:54.860
The state will determine how an application behaves and renders.

24
00:01:54.860 --> 00:01:56.930
Let me explain with an analogy.

25
00:01:57.170 --> 00:01:59.750
Take a moment to think about water and nice.

26
00:01:59.750 --> 00:02:01.610
What's the difference between the two.

27
00:02:01.610 --> 00:02:03.500
The difference would be their temperature.

28
00:02:03.650 --> 00:02:07.950
Just by changing the temperature you can change how these two appear and behave.

29
00:02:08.180 --> 00:02:12.350
If you were to place water inside a freezer then it would turn into ice.

30
00:02:12.440 --> 00:02:17.220
If you were to place it on a hot stove then it would evaporate and turn into gas.

31
00:02:17.240 --> 00:02:21.470
The state changes just by changing one value the temperature.

32
00:02:21.470 --> 00:02:28.700
This idea of changing state applies to programs let's say you had a traditional sign.

33
00:02:28.760 --> 00:02:33.000
If the user is viewing the home page then they're on the home state.

34
00:02:33.170 --> 00:02:37.070
If they're viewing the about page then they're on the about state.

35
00:02:37.250 --> 00:02:41.730
If they're viewing the My Account page then the state would be my account.

36
00:02:41.810 --> 00:02:43.090
You get the idea.

37
00:02:43.370 --> 00:02:46.190
The state can trickle down to other components.

38
00:02:46.190 --> 00:02:50.800
For example you may have a menu component if the user is logged in.

39
00:02:50.840 --> 00:02:53.310
Then the state would contain that information.

40
00:02:53.480 --> 00:02:57.620
If they are then you can have the menu display links to their account.

41
00:02:57.620 --> 00:03:01.790
If they weren't then you would display log in and register links.

42
00:03:01.790 --> 00:03:08.510
The code inside the data directory contains how the state is managed and controlled if attributes aren't

43
00:03:08.510 --> 00:03:13.250
cutting it for you and you need more control over the state than you should read up on the information

44
00:03:13.260 --> 00:03:22.240
here to understand how the state works the next directory is the date directory one of the most frustrating

45
00:03:22.240 --> 00:03:24.730
things about programming is using dates.

46
00:03:24.760 --> 00:03:30.220
If you've been programming for a while then you may know how hard it can be to use dates in any programming

47
00:03:30.220 --> 00:03:31.190
language.

48
00:03:31.270 --> 00:03:36.920
You have to account for things like formatting time zones Daylight Savings Time etc..

49
00:03:37.060 --> 00:03:43.330
Gutenberg has you covered the date code is built on top of the most popular javascript time library

50
00:03:43.470 --> 00:03:43.920
moments.

51
00:03:43.930 --> 00:03:50.350
J.S. for the most part you probably won't have to worry about this but knowing it's around can be helpful

52
00:03:50.350 --> 00:03:51.660
in future projects.

53
00:03:53.840 --> 00:03:56.280
Up next is the editor directory.

54
00:03:56.420 --> 00:04:00.940
This directory will contain code specifically to the editor itself.

55
00:04:00.950 --> 00:04:04.790
This will take care of setting up the editor and putting everything together.

56
00:04:04.820 --> 00:04:10.300
If you scroll down then you'll find this diagram here that explains how Gutenberg works.

57
00:04:10.340 --> 00:04:11.960
Let's review it together.

58
00:04:12.020 --> 00:04:17.980
Things usually start at these saved post point which is the post content saved in the database.

59
00:04:18.110 --> 00:04:24.650
When the editor is initialized Gutenberg will grab the data and process the block attributes it's passing

60
00:04:24.650 --> 00:04:28.250
the comments attributes and elements for the data.

61
00:04:28.280 --> 00:04:31.100
This gets fed into the post state.

62
00:04:31.100 --> 00:04:37.070
We just discussed state earlier the way state is used here is to determine what data gets displayed

63
00:04:37.070 --> 00:04:41.020
on the ED and also determines what settings get displayed.

64
00:04:41.090 --> 00:04:46.570
If a user clicks on a paragraph block then the settings for that block will be displayed.

65
00:04:46.610 --> 00:04:51.240
All this data gets turned into blocks and is then rendered on the visual editor.

66
00:04:51.260 --> 00:04:55.520
Whenever you make changes the changes get fed into the state again.

67
00:04:55.520 --> 00:04:59.670
The state is constantly changing with every keystroke and mouse click.

68
00:04:59.750 --> 00:05:06.380
The cycle is always running whenever you edit your post the minute you press update or publish the state

69
00:05:06.380 --> 00:05:09.890
data get serialized and saved into the database.

70
00:05:09.890 --> 00:05:13.700
This flow of data is common for most javascript applications.

71
00:05:13.700 --> 00:05:17.330
If you're a javascript developer then this isn't anything new.

72
00:05:19.680 --> 00:05:21.840
All right let's keep moving forward.

73
00:05:21.910 --> 00:05:28.510
The last directory we'll explore is the element directory the element directory contains code for creating

74
00:05:28.540 --> 00:05:30.130
a shemale elements.

75
00:05:30.220 --> 00:05:34.200
That's really strange to here because react already handles that.

76
00:05:34.480 --> 00:05:40.570
If you can recall a few sections ago I showed you how to create elements with plain javascript using

77
00:05:40.600 --> 00:05:42.540
the create element function.

78
00:05:42.610 --> 00:05:48.880
There's no need for wordpress to implement this itself however WordPress isn't trying to write this

79
00:05:48.880 --> 00:05:49.910
from scratch.

80
00:05:49.960 --> 00:05:52.430
Instead it's building on top of it.

81
00:05:52.510 --> 00:05:58.810
The reason it does this is so that if react was ever to change its API then WordPress can make sure

82
00:05:58.810 --> 00:06:01.750
that the code you write is backwards compatible.

83
00:06:01.750 --> 00:06:08.500
Let's check out the code open the react dot J.S. file immediately you'll see WordPress is importing

84
00:06:08.500 --> 00:06:13.870
a lot of the functions from react like create element clone element render etc..

85
00:06:14.110 --> 00:06:19.480
Then if you scroll down you'll see that it's exporting those functions by doing that.

86
00:06:19.480 --> 00:06:27.100
You can call these functions by typing WP dot element dot create element instead of react create element.

87
00:06:27.100 --> 00:06:31.780
This allows for the code to be backwards compatible if we act ever changes.

88
00:06:31.780 --> 00:06:37.540
This is the case for most functions being exported for the most part you won't have to worry much if

89
00:06:37.540 --> 00:06:40.340
react ever changes by having this code.

90
00:06:40.420 --> 00:06:44.040
You can continue to use the same functions for years to come.

91
00:06:44.050 --> 00:06:50.980
Being a master of react isn't necessary in the next lecture I'll be showing you how to use these functions.

92
00:06:50.980 --> 00:06:52.180
I'll see you there.
