WEBVTT
1
00:00:07.240 --> 00:00:10.920
Right now all we have is empty white space as our theme.

2
00:00:10.990 --> 00:00:14.020
It's not very flexible nor does it look appealing.

3
00:00:14.020 --> 00:00:15.480
Let's change that.

4
00:00:15.490 --> 00:00:19.420
Earlier I asked you to download the static version of our theme.

5
00:00:19.600 --> 00:00:24.110
Open up that zip file inside the unity theme folder we created.

6
00:00:24.130 --> 00:00:32.610
Let's query a sub folder called assets unzip the contents of the static template into this folder.

7
00:00:32.650 --> 00:00:37.960
I'm also going to add the h t email in there as well so we can use it for reference throughout this

8
00:00:37.960 --> 00:00:39.260
course.

9
00:00:39.430 --> 00:00:44.400
It's important to note that WordPress doesn't require you to have this folder structure.

10
00:00:44.410 --> 00:00:50.550
The only files WordPress requires are the indexed p p and style that C Ss files.

11
00:00:50.620 --> 00:00:53.710
The folder structure is completely up to you.

12
00:00:53.740 --> 00:00:56.740
I want my theme to look like the static version.

13
00:00:56.740 --> 00:01:00.070
The first step is to have WordPress lo the team out.

14
00:01:00.280 --> 00:01:04.670
Open the index the HDMI file inside the assets folder.

15
00:01:04.720 --> 00:01:11.360
Copy and paste the contents into the index P2P template obviously.

16
00:01:11.370 --> 00:01:13.990
This won't work but it's a good starting point.

17
00:01:14.070 --> 00:01:17.700
If you refresh the home page you'll notice that the site is pretty broken.

18
00:01:18.180 --> 00:01:23.730
If you press F twelve on your keyboard then you'll open up the developer tools for either Google Chrome

19
00:01:23.790 --> 00:01:29.370
or Firefox you can then click on the console tab and you'll see that we're getting all these for all

20
00:01:29.370 --> 00:01:30.780
for errors.

21
00:01:30.780 --> 00:01:34.370
If you're unfamiliar with the developer tools then don't worry.

22
00:01:34.410 --> 00:01:39.970
Throughout this course I'll be going over how the developer tools can help us develop better things.

23
00:01:39.990 --> 00:01:41.940
Let me give you a brief overview.

24
00:01:42.210 --> 00:01:46.580
The developer tools are a way for you to analyze and modify your site.

25
00:01:46.620 --> 00:01:52.530
It can be intimidating to beginners but it's actually quite simple to use once you know how to navigate

26
00:01:52.530 --> 00:01:53.790
your way around.

27
00:01:53.820 --> 00:01:55.140
Let's take it slow.

28
00:01:55.140 --> 00:02:01.530
The only thing you should know about the developer tools is the console tap the console will output

29
00:02:01.530 --> 00:02:03.240
messages about your site.

30
00:02:03.240 --> 00:02:07.770
It's mostly used for errors but you can use it for other things if you wish.

31
00:02:07.770 --> 00:02:11.730
Earlier I stated that this course doesn't really focus on Javascript.

32
00:02:12.120 --> 00:02:14.920
I assume you already know javascript henceforth.

33
00:02:14.940 --> 00:02:20.010
I assume you already know about the console tab taking another look at the console.

34
00:02:20.010 --> 00:02:26.180
We have all these for all for errors meaning that a lot of the files we want to load can't be found.

35
00:02:26.190 --> 00:02:29.940
This is because the paths that are inputted are incorrect.

36
00:02:29.940 --> 00:02:32.190
Technically these parts are correct.

37
00:02:32.190 --> 00:02:39.120
If you were to try to open the H team file by itself we could edit the index template and fix the links

38
00:02:39.120 --> 00:02:41.200
to point to the new path for our theme.

39
00:02:41.250 --> 00:02:49.750
But that is inefficient and not recommended we run into a couple of problems such as users being able

40
00:02:49.750 --> 00:02:55.390
to actually change the default WordPress folder structure to suit their needs rendering our fixed links

41
00:02:55.420 --> 00:02:56.700
useless.

42
00:02:56.770 --> 00:03:05.140
We would also have to check if SSL is enabled forcing us to check if the protocol is a CPS or a GDP.

43
00:03:05.140 --> 00:03:11.540
Lastly you'll end up loading all style sheets and scripts on every page even if we don't need them.

44
00:03:11.680 --> 00:03:16.360
There are just too many disadvantages to hard coding the Urals into the template.

45
00:03:18.530 --> 00:03:24.590
If you wanted to you can create the logic for this but you don't have to because WordPress actually

46
00:03:24.590 --> 00:03:26.370
handles this logic for us.

47
00:03:26.780 --> 00:03:29.740
It's something WordPress calls action hooks.

48
00:03:29.750 --> 00:03:30.940
I'll explain what those are.

49
00:03:30.950 --> 00:03:32.330
In just a moment.

50
00:03:32.420 --> 00:03:34.410
Back inside the theme folder.

51
00:03:34.430 --> 00:03:43.260
Create a new file called functions stop BHP this file is completely optional but if you have it then

52
00:03:43.260 --> 00:03:48.500
WordPress will automatically load this file and execute any code within this file.

53
00:03:48.510 --> 00:03:51.290
You don't have to do anything to set it up.

54
00:03:51.330 --> 00:03:57.210
Be sure that you named this functions not P HP and not function not P HP.

55
00:03:57.210 --> 00:04:03.390
I've had students in the past forget the EZ causing their code not to work the functions file can be

56
00:04:03.390 --> 00:04:08.660
thought of as your themes logic if you would like to query the database at style sheets.

57
00:04:08.670 --> 00:04:14.690
Process forms check if the user is logged in then this is the file you'll want to edit.

58
00:04:14.820 --> 00:04:19.070
I personally don't like to stuff my functions file with all my logic.

59
00:04:19.140 --> 00:04:26.130
I like to have structure and separate everything into its own file so let's add some comments will first

60
00:04:26.130 --> 00:04:31.090
create a section for variables or functions that must be available throughout our theme.

61
00:04:31.110 --> 00:04:34.170
The second section will be for including any files.

62
00:04:34.290 --> 00:04:39.300
The third section will be for any filters and action hooks will discuss hooks very soon.

63
00:04:39.660 --> 00:04:43.540
Lastly we'll create a section for shortcuts.

64
00:04:43.560 --> 00:04:47.250
Keep in mind you don't have to structure your file like this.

65
00:04:47.250 --> 00:04:50.650
This is just how I do it and how I recommend you do it.

66
00:04:50.940 --> 00:04:52.880
Just to make sure everything is working.

67
00:04:52.920 --> 00:05:01.080
Let's echo out a hello world message if you refresh the page then you should see the message output

68
00:05:01.080 --> 00:05:07.320
it onto the home page something I want you to notice is that the hello world message is output it before

69
00:05:07.320 --> 00:05:08.430
the template.

70
00:05:08.430 --> 00:05:12.500
We can now confirm that the functions file is loaded before the template.

71
00:05:12.990 --> 00:05:18.660
Let's remove this because it's not good practice to echo out anything inside the function's file.

72
00:05:18.720 --> 00:05:21.140
We can now begin using action hooks.

73
00:05:21.140 --> 00:05:22.560
What our action hooks.

74
00:05:22.560 --> 00:05:25.140
So a lot can happen throughout WordPress.

75
00:05:25.170 --> 00:05:30.780
Typically you may want to use conditional statements to check when a certain action or event happens.

76
00:05:31.110 --> 00:05:33.200
However this isn't very efficient.

77
00:05:33.330 --> 00:05:37.410
What will happen is that you will have a lot of nested code instead.

78
00:05:37.410 --> 00:05:43.920
WordPress introduces something called hooks a hook is a way for you to listen to an event and execute

79
00:05:43.920 --> 00:05:45.990
code when that event happens.

80
00:05:45.990 --> 00:05:51.150
This is what WordPress calls the plugins API and events can be anything.

81
00:05:51.150 --> 00:05:54.090
There are literally over 100 different hooks.

82
00:05:54.090 --> 00:06:00.010
There is a hook for the footer when an admin form is submitted Ajax submissions and so much more.

83
00:06:00.150 --> 00:06:04.190
We won't be going over all of them because it would just be too overwhelming.

84
00:06:04.320 --> 00:06:09.300
If you don't understand then don't worry you'll see how it works in just a moment.

85
00:06:09.300 --> 00:06:14.820
We will definitely be going over some of the most commonly used ones though in the resource section

86
00:06:14.820 --> 00:06:17.590
of this lecture you'll find a link to the hooks API.

87
00:06:17.970 --> 00:06:19.620
Let's check this out.

88
00:06:19.620 --> 00:06:25.120
You'll notice there's a list for two kinds of hooks action hooks and filter hooks.

89
00:06:25.140 --> 00:06:27.810
We'll be going over both throughout this course.

90
00:06:27.810 --> 00:06:31.340
Let's take a look at the list of action hooks available.

91
00:06:31.410 --> 00:06:35.590
Scroll around this page you'll see all the hooks available to us.

92
00:06:35.610 --> 00:06:41.220
I know we haven't gone over how to use hooks yet but just from looking at this list do you think you

93
00:06:41.220 --> 00:06:45.860
can spot the hook we need in order to add scripts and styles to our theme.

94
00:06:45.870 --> 00:06:49.650
Most people would say WP head but this is incorrect.

95
00:06:49.680 --> 00:06:55.800
The correct hook is the one above it which is WP and Q scripts click on it and let's take a look at

96
00:06:55.800 --> 00:06:56.700
this hook.

97
00:06:56.700 --> 00:06:59.510
This is what WordPress has to say about it.

98
00:06:59.700 --> 00:07:05.700
WP And Q scripts is the proper hook to use when in queuing items that are meant to appear on the front

99
00:07:05.700 --> 00:07:05.900
end.

100
00:07:06.390 --> 00:07:10.850
Despite the name it is used for in queuing both scripts and styles.

101
00:07:11.010 --> 00:07:16.510
Just by reading that you know it is indeed the correct hook to use when adding scripts and styles.

102
00:07:16.590 --> 00:07:22.620
So let's get started with using action hooks open the functions file and under the hooks section.

103
00:07:22.620 --> 00:07:23.720
Add the following code.

104
00:07:24.540 --> 00:07:27.150
Add action WP and queue script.

105
00:07:27.180 --> 00:07:29.190
J you underscore and queue

106
00:07:35.110 --> 00:07:40.930
the add action function is a function that WordPress automatically defines and loads for you.

107
00:07:40.930 --> 00:07:44.460
You don't need to do anything to make sure it's available to you.

108
00:07:44.470 --> 00:07:49.210
This function has 4 parameters but only the first 2 are required.

109
00:07:49.210 --> 00:07:52.940
The first parameter is the name of the hook you want to access.

110
00:07:53.020 --> 00:07:57.880
In our case we want to access the WP and queue scripts hook.

111
00:07:57.880 --> 00:08:00.450
Make sure you input this as a string.

112
00:08:00.520 --> 00:08:05.320
The second parameter is the name of the function you want to call when this hook is triggered.

113
00:08:05.320 --> 00:08:08.890
The other two parameters will be discussing in another lecture.

114
00:08:08.920 --> 00:08:11.600
For now we only need the first two.

115
00:08:11.620 --> 00:08:15.740
Currently we don't have this function defined so we'll get an error.

116
00:08:15.820 --> 00:08:17.470
Let's fix that quickly.

117
00:08:17.530 --> 00:08:23.080
As I stated before I don't like to add all my logic and code in one file.

118
00:08:23.080 --> 00:08:32.610
So let's create a folder called includes within this folder create another folder called front the front

119
00:08:32.610 --> 00:08:38.970
folder will contain any code in logic pertaining to the front end of our site within this folder create

120
00:08:38.970 --> 00:08:41.700
a file called and cued up HP.

121
00:08:42.030 --> 00:08:44.700
Let's define the function we called from the action hub.

122
00:08:47.170 --> 00:08:47.750
Great.

123
00:08:47.770 --> 00:08:48.950
We're almost done now.

124
00:08:49.360 --> 00:08:56.290
We need to include this file so let's go back to the functions file and under the include section include

125
00:08:56.290 --> 00:08:57.960
the Q file.

126
00:08:58.060 --> 00:09:04.030
I'm going to use the get theme file path function to make sure we always get the correct path to this

127
00:09:04.030 --> 00:09:04.360
file

128
00:09:11.320 --> 00:09:14.940
the get theme file path function does a couple of things.

129
00:09:15.040 --> 00:09:20.380
First you don't provide the absolute path to the current activated theme on the site.

130
00:09:20.380 --> 00:09:26.770
Usually you can just pass in path without any functions but I have come across situations where p HP

131
00:09:26.800 --> 00:09:29.690
and WordPress were unable to find the file.

132
00:09:29.860 --> 00:09:33.200
I always recommend providing the full system path.

133
00:09:33.220 --> 00:09:35.490
This function will take care of that for you.

134
00:09:35.500 --> 00:09:42.310
The function has one parameter which is optional you can provide a file relative to your themes path.

135
00:09:42.310 --> 00:09:44.240
That's what we're doing here.

136
00:09:44.260 --> 00:09:50.260
Just like the add action function you do not need to do anything to make sure this function is available

137
00:09:50.260 --> 00:09:54.460
to you it is already loaded and created for you beforehand.

138
00:09:54.460 --> 00:09:56.690
WordPress takes care of that for you.

139
00:09:56.710 --> 00:10:00.790
I'll be using this function wherever we include files.

140
00:10:00.790 --> 00:10:05.950
If we did everything correctly then we should be able to refresh the page without any errors.

141
00:10:05.950 --> 00:10:10.300
Since we have no errors then that means we did everything correctly.

142
00:10:10.300 --> 00:10:14.550
Let's go over how this works internally when a user makes a request.

143
00:10:14.560 --> 00:10:20.380
WordPress will begin loading its files then it'll connect to the database and start deciding what needs

144
00:10:20.380 --> 00:10:21.360
to be loaded.

145
00:10:21.400 --> 00:10:24.130
Your theme and plugins are loaded afterwards.

146
00:10:24.220 --> 00:10:31.360
Once your theme is loaded WordPress will look for a file named function stop BHP inside your theme folder.

147
00:10:31.360 --> 00:10:36.360
Once this file is loaded all code inside will begin execution line by line.

148
00:10:36.400 --> 00:10:42.550
We use a function called an action that is supplied by WordPress which tells WordPress Hey I'd like

149
00:10:42.550 --> 00:10:49.210
to execute some code if a certain event happens in our case we want to call the function J you underscore

150
00:10:49.270 --> 00:10:54.640
and Q If the WP and Q scripts event is fired that's about it.

151
00:10:54.730 --> 00:10:59.640
There's a lot more going on but I won't be going over the smaller details in this lecture.

152
00:10:59.650 --> 00:11:03.580
The reason being is that it would be too overwhelming at the moment.

153
00:11:03.600 --> 00:11:09.070
I have had students in the past asking me to explain hooks more in detail but that's not necessary at

154
00:11:09.070 --> 00:11:10.210
this point.

155
00:11:10.210 --> 00:11:15.280
I promise I will go over how the hooks API works more in-depth in a future lecture.

156
00:11:15.280 --> 00:11:15.970
For now.

157
00:11:15.970 --> 00:11:21.160
Just understand that the add action function will tell WordPress that you want to run a function when

158
00:11:21.160 --> 00:11:22.720
an event happens.

159
00:11:22.720 --> 00:11:28.870
If you don't fully understand don't worry this is a function that we use often and I assure you that

160
00:11:28.870 --> 00:11:32.130
the more you use it the better you'll get used to it.

161
00:11:32.140 --> 00:11:37.540
This won't technically work yet because we haven't told WordPress where to load these files we'll get

162
00:11:37.540 --> 00:11:39.510
to that in the next election.

163
00:11:39.520 --> 00:11:41.770
One last thing before I wrap up this lecture.

164
00:11:41.890 --> 00:11:49.550
You'll notice that I named my NQ function J you underscore and Q I prefixed the function with some initials.

165
00:11:49.570 --> 00:11:55.210
It's common practice to prefix your classes and functions with the initials of your theme or name throughout

166
00:11:55.210 --> 00:11:56.020
this course.

167
00:11:56.020 --> 00:12:02.820
I'll be prefix ing J you underscore for every function we define the initials are for the name Udemy.

168
00:12:03.010 --> 00:12:07.690
We do this because we don't want to run into any naming conflicts with other plugins.

169
00:12:07.900 --> 00:12:12.400
In the next lecture we'll take a look at adding styles to our pages through this hook.
