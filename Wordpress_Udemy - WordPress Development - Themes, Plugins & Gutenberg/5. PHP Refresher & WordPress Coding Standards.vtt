WEBVTT
1
00:00:07.420 --> 00:00:12.070
Before we get started I want to go over some key piece concepts that you should be aware of.

2
00:00:12.580 --> 00:00:16.500
I want to make it clear that this isn't AP HP basics course.

3
00:00:16.600 --> 00:00:22.580
I expect you to know BJP and some of the fundamental concepts such as variables and functions.

4
00:00:22.630 --> 00:00:27.190
With that being said there are some techniques and concepts that you will see me use throughout this

5
00:00:27.190 --> 00:00:28.010
course.

6
00:00:28.030 --> 00:00:31.030
I just want to make sure we're all on the same page.

7
00:00:31.330 --> 00:00:35.050
Right now I'm on a site called right P HP online.

8
00:00:35.050 --> 00:00:38.500
I'll provide a link to this in the resource section of this lecture.

9
00:00:38.500 --> 00:00:42.450
I promised that we'll only be using this tool for this lecture only.

10
00:00:43.180 --> 00:00:46.820
So the first thing I want to go over is the file constant.

11
00:00:46.960 --> 00:00:55.300
I'm going to echo out this constant and run the code this constant will always contain the full system

12
00:00:55.300 --> 00:01:00.970
path to the file it's being used in it's very important that you understand what the value returns when

13
00:01:00.970 --> 00:01:01.950
you use it.

14
00:01:01.960 --> 00:01:06.680
Each page we file you create will automatically define this content for you.

15
00:01:06.700 --> 00:01:10.430
You also don't have to worry about conflicts between each file.

16
00:01:10.690 --> 00:01:14.710
Throughout this course we'll be working inside multiple directories.

17
00:01:14.710 --> 00:01:19.690
When you're working inside multiple directories it can be rather difficult to determine where you are

18
00:01:20.080 --> 00:01:23.070
the final constant will help us greatly.

19
00:01:23.080 --> 00:01:25.980
The next concept I want to go over is arrays.

20
00:01:26.050 --> 00:01:28.900
I'm going to create an array named R..

21
00:01:28.960 --> 00:01:31.330
And it will contain the values 1 through 5

22
00:01:37.480 --> 00:01:42.940
arrays aren't anything special and aren't hard to understand what I want to highlight is the way I'm

23
00:01:42.940 --> 00:01:44.170
writing arrays.

24
00:01:44.170 --> 00:01:46.000
I don't use the keyword array.

25
00:01:46.030 --> 00:01:48.450
Instead I just use square brackets.

26
00:01:48.490 --> 00:01:51.030
This is the shorthand way of writing arrays.

27
00:01:51.040 --> 00:01:57.130
I know some people like to use the array keyword but I won't be doing so just to speed things up.

28
00:01:57.130 --> 00:02:00.650
If you prefer to use the array keyword then that's perfectly fine.

29
00:02:01.090 --> 00:02:08.020
I do want to give a warning not all hosts support the shorthand version of writing p p arrays so use

30
00:02:08.020 --> 00:02:12.190
these with caution if you plan on supporting older versions of P P.

31
00:02:12.430 --> 00:02:15.380
The next thing I want to go over are anonymous functions.

32
00:02:15.430 --> 00:02:22.430
I'm going to type one up quickly an anonymous function is exactly what it sounds like.

33
00:02:22.490 --> 00:02:24.490
It's a function that does not have a name.

34
00:02:24.680 --> 00:02:28.660
Since it does not have a name you have no way to reference it.

35
00:02:28.700 --> 00:02:32.420
The reason you would use anonymous functions is to write less code.

36
00:02:32.420 --> 00:02:36.080
If you write less code than your code becomes more readable.

37
00:02:36.080 --> 00:02:43.690
I'm going to delete my example and paste in a more practical one there is quite a bit going on here

38
00:02:43.690 --> 00:02:46.060
so let me break down what's going on.

39
00:02:46.120 --> 00:02:49.110
I'm creating a new array called array double.

40
00:02:49.150 --> 00:02:55.770
This will be assigned to the value returned by the function array map the array map function will take

41
00:02:55.770 --> 00:03:01.350
in an array and call a function that will be passed in the value to manipulate the function passed and

42
00:03:01.350 --> 00:03:08.160
must return either the value a modified version of the value or a completely different value.

43
00:03:08.260 --> 00:03:14.230
And this example I'm showing two ways of passing in a function in the first example and passing in an

44
00:03:14.230 --> 00:03:20.650
anonymous function in the second example I'm creating a named function and passing in the name to the

45
00:03:20.650 --> 00:03:21.100
array.

46
00:03:21.100 --> 00:03:27.150
Matt function both solutions are completely valid and acceptable after both of these.

47
00:03:27.220 --> 00:03:29.290
All I'm doing is printing the array.

48
00:03:29.410 --> 00:03:32.010
Let's run the code and see what we get.

49
00:03:32.140 --> 00:03:35.550
As expected we get two arrays that are identical.

50
00:03:35.740 --> 00:03:36.870
Both methods work.

51
00:03:36.910 --> 00:03:39.180
And one isn't better than the other.

52
00:03:39.250 --> 00:03:41.260
You're more than free to use either one.

53
00:03:41.440 --> 00:03:44.560
Throughout this course we'll be using a combination of both.

54
00:03:44.890 --> 00:03:52.450
The last concept you should be aware of is object oriented programming also known as O P O P is a pretty

55
00:03:52.450 --> 00:03:56.260
complex topic and I couldn't possibly cover it in this single lecture.

56
00:03:56.890 --> 00:04:02.700
Instead I'm going to refer you to a tutorial series which is completely free in this series.

57
00:04:02.710 --> 00:04:06.350
A lot of things related to object oriented programming is covered.

58
00:04:06.550 --> 00:04:10.570
We actually won't be writing a lot of O P throughout this course.

59
00:04:10.570 --> 00:04:13.290
So you're okay with just knowing the bare minimum.

60
00:04:13.480 --> 00:04:17.950
If you're already comfortable with P then you can just skip on ahead.

61
00:04:17.980 --> 00:04:19.170
That's pretty much it.

62
00:04:19.180 --> 00:04:22.090
I just wanted to highlight those concepts to you.

63
00:04:22.150 --> 00:04:26.620
There's one last thing I want to show you in the resource section of this lecture.

64
00:04:26.620 --> 00:04:30.430
I provide a link to the WordPress best practices page.

65
00:04:30.670 --> 00:04:36.490
WordPress provides a guideline for writing code if you plan on contributing to the world press corps.

66
00:04:36.490 --> 00:04:38.650
Then these guidelines are important.

67
00:04:38.710 --> 00:04:44.710
However if you just plan on making your own plugins and themes then you can follow any coding style

68
00:04:44.710 --> 00:04:45.790
you like.

69
00:04:45.790 --> 00:04:49.600
I'm going to click on the P HP coding standards link.

70
00:04:49.690 --> 00:04:55.420
Basically this page goes over how you should write your code from indentation to formatting blocks of

71
00:04:55.420 --> 00:04:56.170
code.

72
00:04:56.260 --> 00:05:00.310
You are absolutely not required to follow these standards.

73
00:05:00.340 --> 00:05:05.480
With that being said let's give this page a read and go over these standards together.

74
00:05:05.530 --> 00:05:11.680
The first thing that goes over is when to use single quotes or double quotes from word Press's perspective.

75
00:05:11.680 --> 00:05:13.330
It generally doesn't matter.

76
00:05:13.360 --> 00:05:20.360
The most important thing is that you escape your data when combining HD UML and dynamic data together.

77
00:05:20.410 --> 00:05:22.260
Up next is indentation.

78
00:05:22.360 --> 00:05:28.210
There's a whole debate whether you should use tabs or spaces but WordPress recommends you use real tabs

79
00:05:28.270 --> 00:05:29.550
and not spaces.

80
00:05:29.680 --> 00:05:35.800
Something that's also worth noting down is that WordPress prefers you align your code for readability.

81
00:05:36.100 --> 00:05:42.040
And this example you can see that the equal sign is perfectly aligned no matter how long the variable

82
00:05:42.040 --> 00:05:43.380
name gets.

83
00:05:43.400 --> 00:05:49.450
Afterwards you're told You should always use braces when writing blocks of code even if you're a block

84
00:05:49.450 --> 00:05:51.440
of code is only one line inside.

85
00:05:51.460 --> 00:05:53.250
You should still use braces.

86
00:05:53.260 --> 00:05:59.260
This applies to loops conditional statements functions classes and anything else you can think of that

87
00:05:59.260 --> 00:06:03.120
uses braces when it comes to using conditional statements.

88
00:06:03.130 --> 00:06:05.890
You may end up using an L if statement.

89
00:06:05.890 --> 00:06:07.860
You can write this one of two ways.

90
00:06:07.960 --> 00:06:08.860
You can write the.

91
00:06:08.860 --> 00:06:14.650
Else if with a space or without a space WordPress recommends no spaces.

92
00:06:14.650 --> 00:06:20.180
I'm going to skip regular expressions as we won't be using the map much throughout this course.

93
00:06:20.320 --> 00:06:26.400
Down a little further you'll see that you should use the long hand version of opening and closing HP

94
00:06:26.410 --> 00:06:27.360
Tex.

95
00:06:27.370 --> 00:06:32.230
You should never use the shorthand version because it's not supported on most hosts.

96
00:06:32.230 --> 00:06:37.480
On top of that you'll see that you should take the time to format your code as opposed to having an

97
00:06:37.570 --> 00:06:38.650
unreadable mess.

98
00:06:38.650 --> 00:06:45.130
In this example after this you'll see that WordPress recommends you space everything inside functions

99
00:06:45.160 --> 00:06:50.560
and loops neatly omitting the spaces can really make it hard to read your code especially if you're

100
00:06:50.560 --> 00:06:52.710
dealing with variables versus hard coding.

101
00:06:52.710 --> 00:06:54.870
Things aren't moving right along.

102
00:06:54.880 --> 00:06:59.380
You'll then be told that you should take the time to format your Eskew l queries.

103
00:06:59.380 --> 00:07:05.090
They don't provide a good example here but you'll see soon enough how to format your queries for readability.

104
00:07:05.350 --> 00:07:10.060
Right after this you'll be told about making queries directly to the database.

105
00:07:10.210 --> 00:07:14.920
Throughout most of this course we'll be using functions that will take care of querying the database

106
00:07:14.950 --> 00:07:16.670
and sanitizing the data.

107
00:07:16.690 --> 00:07:23.200
However these functions will not cover all scenarios in these cases I'll show you how to properly query

108
00:07:23.200 --> 00:07:26.790
the database and make sure it's safe for execution.

109
00:07:26.800 --> 00:07:33.430
Up next it's telling us about naming conventions whenever you create variables classes or functions.

110
00:07:33.430 --> 00:07:38.000
It's recommended you use underscores if your code contains multiple words.

111
00:07:38.080 --> 00:07:44.060
If you're someone who uses camel case then you may want to switching there's also rules for how you

112
00:07:44.060 --> 00:07:47.090
should name your files if there are multiple words.

113
00:07:47.160 --> 00:07:50.460
Then you should use hyphens to separate those words.

114
00:07:50.600 --> 00:07:56.430
I'm going to skip these next two as they're more WordPress specific topics which will cover soon enough.

115
00:07:56.450 --> 00:08:02.630
Now we're at ternary operators ternary operators or a shorthand way of writing conditional statements

116
00:08:02.630 --> 00:08:03.880
for setting values.

117
00:08:03.890 --> 00:08:07.180
They're really handy and can even be readable if used right.

118
00:08:07.190 --> 00:08:09.290
Just make sure you space everything right.

119
00:08:09.290 --> 00:08:14.510
And then it makes sense when you read it you'll see plenty of examples of ternary operators throughout

120
00:08:14.510 --> 00:08:15.650
this course.

121
00:08:15.710 --> 00:08:18.380
Then we run into Yoda conditions.

122
00:08:18.380 --> 00:08:23.990
It's a strange name but this simply states that when writing conditional statements with variables you

123
00:08:23.990 --> 00:08:26.740
should place the variables on the right side.

124
00:08:26.780 --> 00:08:29.060
In this example it's read like this.

125
00:08:29.150 --> 00:08:32.580
If true the force then victorious you will be.

126
00:08:32.660 --> 00:08:37.070
I am not really a fan of this but you can use it if it makes sense to you.

127
00:08:37.070 --> 00:08:41.940
Lastly it's telling us that you should choose readability over clever code.

128
00:08:41.960 --> 00:08:47.330
What this means is that you shouldn't write your code just for the sake of writing less code while being

129
00:08:47.330 --> 00:08:49.850
clever with your code does mean writing less.

130
00:08:49.850 --> 00:08:54.020
It can also be harder to read for anyone else that'll want to get into your code.

131
00:08:54.440 --> 00:08:57.430
There's more here but we can safely ignore this.

132
00:08:57.470 --> 00:08:59.090
You can read them if you want.

133
00:08:59.090 --> 00:09:05.690
Now I do want to say that these standards are only recommendations you won't receive errors or warnings

134
00:09:05.690 --> 00:09:07.490
from writing your code differently.

135
00:09:07.490 --> 00:09:13.070
The point of these standards is so that there is consistency across the board at the end of the day

136
00:09:13.160 --> 00:09:14.430
it's up to you.

137
00:09:14.450 --> 00:09:16.820
I myself follow some of these.

138
00:09:16.940 --> 00:09:21.620
You'll notice that throughout this course I like to organize and format my code.

139
00:09:21.620 --> 00:09:27.020
You're more than free to follow along with my coding style even though it does take some time to get

140
00:09:27.020 --> 00:09:27.660
used to.

141
00:09:27.680 --> 00:09:28.700
I believe it is worth it.

142
00:09:29.120 --> 00:09:32.370
It makes my code more readable and approachable.

143
00:09:32.390 --> 00:09:33.910
All right that's it.

144
00:09:33.920 --> 00:09:36.110
Let's move on to developing a theme.
