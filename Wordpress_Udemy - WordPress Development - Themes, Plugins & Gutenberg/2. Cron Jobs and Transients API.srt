1
00:00:07,310 --> 00:00:12,350
Cron jobs can be a confusing concept to begin and developers out there but it's quite simple.

2
00:00:12,350 --> 00:00:16,460
A cron job is a task or script that is performed at a certain time.

3
00:00:16,490 --> 00:00:20,730
This can be performed once daily monthly or even every hour.

4
00:00:20,750 --> 00:00:21,750
It's up to you.

5
00:00:21,770 --> 00:00:24,220
Basically it's an automated task.

6
00:00:24,320 --> 00:00:27,040
A lot of servers come with cron jobs built in.

7
00:00:27,050 --> 00:00:32,450
All you have to do is tell the server what script to execute and when to execute it.

8
00:00:32,450 --> 00:00:35,800
WordPress has a cron job task manager builds him.

9
00:00:35,870 --> 00:00:39,010
We want to set up a cron job that will run once a day.

10
00:00:39,050 --> 00:00:45,380
This cron job will pick a random recipe and use it as the recipe of the day.

11
00:00:45,420 --> 00:00:51,060
We're going to schedule our cron job in the activation file open that file and at the bottom of the

12
00:00:51,060 --> 00:00:59,510
function call WP schedule event function I'll provide a link in the resource section of this lecture

13
00:00:59,510 --> 00:01:00,740
for this function.

14
00:01:00,740 --> 00:01:02,810
This function has three parameters.

15
00:01:02,870 --> 00:01:05,970
The first parameter is the first time this event will occur.

16
00:01:06,050 --> 00:01:11,470
We want to run this right away so we'll pass in the current time.

17
00:01:11,610 --> 00:01:14,310
The second parameter is the recurrence.

18
00:01:14,310 --> 00:01:16,380
When will this function run again.

19
00:01:16,380 --> 00:01:22,680
We are given 3 recurrence options hourly twice daily and daily we want daily.

20
00:01:22,680 --> 00:01:27,530
You can set up your own custom recurrence but we won't be covering that in this lecture.

21
00:01:27,540 --> 00:01:30,240
The last parameter is the hook that will be triggered.

22
00:01:30,240 --> 00:01:32,910
Notice that I say hook and not function.

23
00:01:32,910 --> 00:01:37,750
WordPress will create a custom action hook for you that you can then hook into yourself.

24
00:01:37,950 --> 00:01:40,900
Other plugins can also who can do this event as well.

25
00:01:40,920 --> 00:01:48,930
I'm going to call this hook our daily recipe hook WordPress will schedule this cron job upon activating

26
00:01:48,930 --> 00:01:49,720
the plugin.

27
00:01:49,800 --> 00:01:54,960
However I do not want you to deactivate and reactivate the plugin just yet.

28
00:01:54,960 --> 00:01:59,520
We can now use this hook like any other action hook inside the plugin file.

29
00:01:59,550 --> 00:02:04,230
Add our new custom hook and the function will call is our generate daily recipe

30
00:02:09,070 --> 00:02:14,410
this hook is triggered once daily WordPress will take care of checking the time and calling this hook

31
00:02:14,410 --> 00:02:16,020
for you next.

32
00:02:16,060 --> 00:02:20,890
Let's create a file inside the includes folder and call it cron dot P. HP.

33
00:02:20,950 --> 00:02:27,020
Define the function here include this file from the main plugin file

34
00:02:31,510 --> 00:02:34,690
this function will run once a day at the beginning of the day.

35
00:02:34,690 --> 00:02:38,760
WordPress cron jobs aren't perfect unlike regular cron jobs.

36
00:02:38,800 --> 00:02:42,820
WordPress cron jobs won't run exactly at the same time everyday.

37
00:02:43,030 --> 00:02:47,380
WordPress depends on a user visiting the site to check for schedule events.

38
00:02:47,530 --> 00:02:51,930
For example our cron job will run once a day at the beginning of the day.

39
00:02:51,970 --> 00:02:55,140
Let's say we don't get any traffic at the beginning of the day.

40
00:02:55,210 --> 00:03:00,970
If the first visit is 4 hours after the beginning of the day then our cron job will run at that time.

41
00:03:00,970 --> 00:03:06,760
This is very important to know WordPress cron jobs are not actual Unix cron jobs.

42
00:03:06,760 --> 00:03:13,090
We're almost done cron jobs are managed by you the developer so it's important to know how to manage

43
00:03:13,090 --> 00:03:14,530
all your cron jobs.

44
00:03:14,530 --> 00:03:17,430
Too many cron jobs can lead to slow performance.

45
00:03:17,890 --> 00:03:22,910
If we were to uninstall or deactivate the plugin our cron job would still be active.

46
00:03:22,930 --> 00:03:27,540
WordPress does not deactivate cron jobs even if your plugin is inactive.

47
00:03:27,550 --> 00:03:31,630
We have two unscheduled this cron job upon deactivation.

48
00:03:31,700 --> 00:03:39,780
There's a special hook called registered the activation hook.

49
00:03:39,890 --> 00:03:43,060
It works just like its opposite activation hook.

50
00:03:43,100 --> 00:03:49,100
We have to pass in the main plugin file followed by the name of the function to call upon deactivation.

51
00:03:49,190 --> 00:03:58,060
The function will be called r deactivate plugin let's create a file called deactivate dot P. HB inside

52
00:03:58,060 --> 00:04:01,250
the includes folder.

53
00:04:01,430 --> 00:04:03,960
This will contain the deactivation plugin.

54
00:04:03,980 --> 00:04:06,200
Include this file from the main plugin file.

55
00:04:10,990 --> 00:04:20,020
Two unscheduled an event we need to use the WP clear scheduled hook function this function has one parameter

56
00:04:20,020 --> 00:04:21,540
which is the name of the hook.

57
00:04:21,670 --> 00:04:24,760
In our case this would be our daily recipe hook

58
00:04:28,700 --> 00:04:29,530
that's it.

59
00:04:29,540 --> 00:04:35,480
We can now safely deactivate and reactivate our plug in knowing that will only have one cron job running

60
00:04:35,480 --> 00:04:36,410
at a time.

61
00:04:36,500 --> 00:04:40,000
We can now begin generating a random recipe of the day.

62
00:04:40,220 --> 00:04:44,470
To accomplish this task we'll begin by using the transience API.

63
00:04:46,330 --> 00:04:51,970
The transience API is an API that allows us to store data for a certain amount of time.

64
00:04:52,120 --> 00:04:58,660
You can think of this as a cookie or session except that data is meant for the server and not the client.

65
00:04:58,690 --> 00:05:05,770
It's exactly like the options API but with an expiration date by default the transience API will saw

66
00:05:05,770 --> 00:05:12,070
the data in the database to be specific it'll store the data inside the WP options table.

67
00:05:12,190 --> 00:05:16,680
The purpose of the transience API is to have your data readily available.

68
00:05:16,690 --> 00:05:18,560
This can increase performance.

69
00:05:18,730 --> 00:05:24,220
However here's the problem since the data is stored in the database then the response times will be

70
00:05:24,220 --> 00:05:27,470
similar if you didn't use the transience API.

71
00:05:27,490 --> 00:05:32,650
The great thing about the transience API is that a lot of its functionality can be overwritten.

72
00:05:32,650 --> 00:05:37,660
We won't be exploring how to do that because that kind of stuff is handled by other plugins.

73
00:05:37,680 --> 00:05:43,120
Ninety nine percent of the time you'll be working on a site that has a cache plugin installed or you'll

74
00:05:43,120 --> 00:05:45,070
end up installing one anyway.

75
00:05:45,070 --> 00:05:51,040
Most cache plugins or at least the better ones will overwrite its functionality rather than saving your

76
00:05:51,040 --> 00:05:52,250
data in the database.

77
00:05:52,270 --> 00:05:58,740
It'll save the data in memory data stored in memory can be retrieved faster therefore increase performance.

78
00:05:58,750 --> 00:06:02,800
The problem with storing data in memory is that the data is not persistent.

79
00:06:02,860 --> 00:06:08,040
That means that if the server was too unexpectedly shut down then any data would be lost.

80
00:06:08,080 --> 00:06:14,110
You shouldn't store any important or sensitive data in memory for our case storing the recipe of the

81
00:06:14,110 --> 00:06:15,760
day will work just fine.

82
00:06:15,760 --> 00:06:22,530
Even if the data gets lost the cron job will end up storing another recipe of the day.

83
00:06:22,530 --> 00:06:28,530
This is why we're using the transience API currently that data will get saved in the database.

84
00:06:28,530 --> 00:06:34,320
We won't be able to see the benefits of using the transience API but on a production server we will

85
00:06:34,770 --> 00:06:40,260
assuming you also install a third party cache plugin inside the cron function.

86
00:06:40,260 --> 00:06:46,140
We're going to query the database for a random recipe we'll be using this query in multiple locations

87
00:06:46,200 --> 00:06:52,320
so it would be ideal to place this code into its own function that we can call later on INSIDE THE includes

88
00:06:52,320 --> 00:07:01,460
folder create a file named utility DSP HP we'll be placing any custom reusable functions here.

89
00:07:01,460 --> 00:07:06,440
Sometimes you'll have stuff like that so it's always good practice to place those functions in a file

90
00:07:06,440 --> 00:07:07,510
like this.

91
00:07:07,520 --> 00:07:09,830
Include this file from the main plugin file

92
00:07:14,060 --> 00:07:15,830
inside the utility file.

93
00:07:15,830 --> 00:07:24,230
We're going to define a function called R get random recipe inside this we're going to need the global

94
00:07:24,230 --> 00:07:33,160
w PDB object then we're going to make a query for a recipe i.e. let me break down this query.

95
00:07:33,280 --> 00:07:40,840
We only want the post ideas from the post stable the W PDB object provides a post property that contains

96
00:07:40,840 --> 00:07:43,020
the name of the posts table name.

97
00:07:43,270 --> 00:07:49,780
Next we want to make sure we only grab published posts and posts with the post type of recipe.

98
00:07:49,780 --> 00:07:55,960
Lastly we want to order the results randomly using the random my sequel function and limit the result

99
00:07:55,990 --> 00:07:57,270
to 1.

100
00:07:57,340 --> 00:07:59,770
This query actually performs slow.

101
00:07:59,770 --> 00:08:03,490
There are a lot of examples out there that will generate a random row faster.

102
00:08:03,520 --> 00:08:09,220
However this query only runs once a day so it won't release dress the server because of that.

103
00:08:09,220 --> 00:08:12,100
This query will work just fine for our purposes.

104
00:08:12,100 --> 00:08:14,900
We are returning the results of this query.

105
00:08:14,950 --> 00:08:19,290
The last step is to set the transient switch back to the cron function.

106
00:08:19,380 --> 00:08:26,330
We will use a function called set transient in the resource section of this lecture.

107
00:08:26,350 --> 00:08:29,860
You'll find a link to the transience API Codex page.

108
00:08:29,860 --> 00:08:32,200
This function has three parameters.

109
00:08:32,200 --> 00:08:39,140
The first is the name of our transient I'm going to call this are daily recipe.

110
00:08:39,170 --> 00:08:41,280
The second parameter is the value.

111
00:08:41,300 --> 00:08:43,050
This can be anything we want.

112
00:08:43,070 --> 00:08:47,070
You don't have to worry about sanitizing this value as WordPress will sign it.

113
00:08:47,120 --> 00:08:48,520
Is it for us.

114
00:08:48,530 --> 00:08:51,410
I'm going to call the R get random recipe.

115
00:08:51,410 --> 00:08:54,010
Function.

116
00:08:54,160 --> 00:08:57,130
Lastly we have to set an expiration time.

117
00:08:57,160 --> 00:09:01,510
The recipe should only last for a day but time must be in seconds.

118
00:09:01,510 --> 00:09:06,430
We could do the math and figure out how many seconds are in a day but WordPress provides a constant

119
00:09:06,430 --> 00:09:13,870
for this on the transience API documentation page you'll find this section called using time constants

120
00:09:14,170 --> 00:09:19,210
here you'll find a couple of constants that WordPress creates for you that contain how many seconds

121
00:09:19,210 --> 00:09:27,160
are in an hour day week month etc. The constant day in seconds contains how many seconds are in a day

122
00:09:27,530 --> 00:09:34,390
pass this constant in as the third parameter to the set transition function.

123
00:09:34,530 --> 00:09:35,270
That's it.

124
00:09:35,280 --> 00:09:37,700
We now have a random recipe of the day.

125
00:09:37,800 --> 00:09:42,400
We'll get the same recipe every day since we only have published one recipe.

126
00:09:42,420 --> 00:09:45,630
You'll have to reactivate the plugin again for this to take effect

127
00:09:53,770 --> 00:09:59,120
we can now display the recipe of the day inside the widget back inside the widget method.

128
00:09:59,140 --> 00:10:05,650
We are past two variables named arguments an instance let's use the extract function to convert these

129
00:10:05,650 --> 00:10:12,380
two variables from arrays to single variables.

130
00:10:12,390 --> 00:10:19,880
This isn't required but it makes it easier to read our code when using widgets one of the variables

131
00:10:19,910 --> 00:10:21,880
extracted is called Tidal.

132
00:10:21,920 --> 00:10:30,000
We will want to filter the title by using the apply filters function this function will trigger a filter

133
00:10:30,000 --> 00:10:33,480
hook the hook we want to trigger is called widget title.

134
00:10:33,570 --> 00:10:38,040
The second parameter for this function is the data we want to pass onto this hook.

135
00:10:38,040 --> 00:10:41,760
Keep in mind that filters will return a filtered value.

136
00:10:41,760 --> 00:10:47,640
Therefore we'll want to store the value any plugin that wants to filter the title of our widgets can

137
00:10:47,640 --> 00:10:49,550
now do so including us.

138
00:10:49,680 --> 00:10:56,400
We're going to echo out some variables provided by the arguments array the before widget is the T email

139
00:10:56,400 --> 00:11:04,450
before every widget the before title is The CML email before the title you'll notice that the names

140
00:11:04,450 --> 00:11:08,740
used here correspond to the Keys for registers sidebar function.

141
00:11:08,740 --> 00:11:16,850
I'm going to open the widgets file inside the theme we created earlier these four keys are the actual

142
00:11:16,850 --> 00:11:19,510
values for the variables we just used.

143
00:11:19,580 --> 00:11:25,400
Every theme will have different HCM L but since we're using our own custom theme we'll know the values

144
00:11:25,400 --> 00:11:26,590
of these variables.

145
00:11:26,630 --> 00:11:33,830
Continuing on will want to append the title and then echo out the after title.

146
00:11:33,920 --> 00:11:38,000
We don't have to worry about the HCM l styling is up to the theme.

147
00:11:38,120 --> 00:11:47,430
Next we echo out the after widget to close up everything before the after widget we want to echo out

148
00:11:47,430 --> 00:11:50,020
the recipe of the day along with a link to it.

149
00:11:50,100 --> 00:11:56,190
Let's grab the transient that contains the I.D. we can grab the transient we created earlier by using

150
00:11:56,190 --> 00:12:01,390
the get transient function we pass in the name of the transient we want to grab.

151
00:12:01,410 --> 00:12:03,450
This would be our daily recipe

152
00:12:05,840 --> 00:12:08,160
sometimes the transient may not work.

153
00:12:08,210 --> 00:12:11,580
This could be due to a field cron job or failed query.

154
00:12:11,690 --> 00:12:14,490
If that happens we'll want to create a backup.

155
00:12:14,540 --> 00:12:22,480
I'm going to create a conditional statement checking if the recipe I.D. is empty if it is I'm going

156
00:12:22,480 --> 00:12:27,760
to create a new recipe I.D. using the Oregon get random recipe function.

157
00:12:27,850 --> 00:12:30,650
I'll also update the transient using the set.

158
00:12:30,660 --> 00:12:39,710
Transient function with the new value.

159
00:12:39,780 --> 00:12:42,210
The next step is to render the HDL.

160
00:12:42,270 --> 00:12:47,470
I'm going to grab the team L from the static template and paste it in here.

161
00:12:47,530 --> 00:12:52,110
Now all we have to do is take the time to convert it into a dynamic template.

162
00:12:52,120 --> 00:12:54,340
This is nothing you haven't done before.

163
00:12:54,370 --> 00:12:59,580
I'm going to replace the links with the Get pummelling function and pass in the recipe.

164
00:13:05,030 --> 00:13:07,810
Then I'm going to echo out the title.

165
00:13:07,820 --> 00:13:10,130
Lastly I'm going to use the post thumbnail

166
00:13:21,040 --> 00:13:21,950
that's about it.

167
00:13:21,970 --> 00:13:23,630
Let's check if everything works.

168
00:13:23,680 --> 00:13:28,710
Go to the home page of our site and refresh it seems like everything is working perfectly.

169
00:13:28,720 --> 00:13:34,310
We can click on this recipe and view the recipe of the day after you've confirmed everything works.

170
00:13:34,330 --> 00:13:36,700
You can finally move on to the next lecture.

171
00:13:36,700 --> 00:13:39,700
That was a lot to do but it was well worth the effort.

172
00:13:39,700 --> 00:13:44,440
Hopefully you understand how to create widgets transience and cron jobs.
