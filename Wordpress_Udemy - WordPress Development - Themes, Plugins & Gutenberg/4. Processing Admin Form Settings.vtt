WEBVTT
1
00:00:07.200 --> 00:00:09.400
It's time to update the settings.

2
00:00:09.420 --> 00:00:15.420
We'll be taking a look at a special kind of action hook and the resource section I provide a link to

3
00:00:15.420 --> 00:00:19.580
the ad men underscore post underscore hook Codex page.

4
00:00:19.740 --> 00:00:23.840
As you can see this hook is a bit more dynamic than other hooks.

5
00:00:23.970 --> 00:00:26.720
WordPress provides a format for this hook.

6
00:00:26.760 --> 00:00:33.120
It's AD admin underscore posts underscore followed by the action name the action name is defined in

7
00:00:33.120 --> 00:00:35.460
our form in the previous lecture.

8
00:00:35.460 --> 00:00:42.930
We created a hidden input field with the name of action and a value of our save options.

9
00:00:42.930 --> 00:00:50.240
So here's what will happen when we submit this form if a request is sent to ad men dash post stop BHP.

10
00:00:50.340 --> 00:00:53.780
The ad men underscore post underscore hook will run.

11
00:00:54.060 --> 00:01:01.020
WordPress will check for a post or get variable named action and dependents value to the admin underscore

12
00:01:01.020 --> 00:01:07.380
post underscore hook to determine which function to run inside the admin init function.

13
00:01:07.390 --> 00:01:12.660
I'm going to add the action hook here since we named the hook our save options.

14
00:01:12.700 --> 00:01:18.880
The name of this hook will be admin underscore post underscore our underscore save underscore options

15
00:01:21.450 --> 00:01:25.260
the function I'm going to run will be called our save options.

16
00:01:25.260 --> 00:01:28.470
As you can see it's the same name as the action.

17
00:01:28.470 --> 00:01:30.130
You don't have to do this.

18
00:01:30.210 --> 00:01:32.600
You can name this function whenever you want.

19
00:01:32.610 --> 00:01:39.030
I do this because it's much simpler to know which function belongs to which action with the hook ready.

20
00:01:39.030 --> 00:01:43.200
We have to create the file next inside the process folder.

21
00:01:43.290 --> 00:01:54.860
I'm going to create a file called Save dash option stop BHP and define the function inside this file.

22
00:01:54.870 --> 00:01:58.190
Now I'm going to include this file from the main plugin file

23
00:02:05.620 --> 00:02:06.850
inside the function.

24
00:02:06.850 --> 00:02:09.580
I want you to output the post array.

25
00:02:09.640 --> 00:02:15.310
I'm going to echo out some pretext to format it and then I'm just going to kill the script

26
00:02:23.290 --> 00:02:25.310
let's refresh the options page.

27
00:02:25.390 --> 00:02:27.830
We should see everything working just fine.

28
00:02:28.060 --> 00:02:30.310
Go ahead and select some options.

29
00:02:30.370 --> 00:02:36.100
If we submit this form you'll see our data being neatly outputting and formatted for us.

30
00:02:36.160 --> 00:02:41.530
Now that we've confirmed our form is being properly submitted we should check if it's being submitted

31
00:02:41.530 --> 00:02:43.390
by a trusted user.

32
00:02:43.390 --> 00:02:47.370
There are two steps we're going to take to prevent malicious behavior.

33
00:02:47.380 --> 00:02:52.540
First we're going to check the user's current capabilities in an earlier lecture.

34
00:02:52.540 --> 00:02:55.550
We talked about capabilities and roles briefly.

35
00:02:55.690 --> 00:03:00.580
We'll be using the same capability we used the last time to display this page.

36
00:03:00.760 --> 00:03:04.270
Let's empty out our function and then inside the conditional statement.

37
00:03:04.270 --> 00:03:07.090
I want you to call the function current user can

38
00:03:09.750 --> 00:03:12.620
this function is provided to you by WordPress.

39
00:03:12.750 --> 00:03:18.270
What it will do is check the current logged in users capabilities and see if that user can perform a

40
00:03:18.270 --> 00:03:20.910
certain capability pass in my view.

41
00:03:21.180 --> 00:03:27.150
Since we want to use the same capability we used to display the page I'm going to grab that capability

42
00:03:27.180 --> 00:03:32.650
from the menus function and just paste it in here.

43
00:03:32.790 --> 00:03:38.580
I'm going to check if this function returns false and if it does I'm going to kill the script using

44
00:03:38.580 --> 00:03:42.120
WP died inside the dye function.

45
00:03:42.120 --> 00:03:51.300
I'm going to pass in a simple message and make it translatable.

46
00:03:51.350 --> 00:03:53.640
This is one way to prevent attacks.

47
00:03:53.660 --> 00:03:57.880
Next we're going to check the nonce WordPress generated for us.

48
00:03:57.920 --> 00:04:06.870
This is pretty simple WordPress provides a function called check admin refer this function must be passed

49
00:04:06.870 --> 00:04:09.960
in the nonce we created inside the form.

50
00:04:09.960 --> 00:04:12.710
We call this nonce our options verify.

51
00:04:13.170 --> 00:04:15.840
So let's pass that into the function.

52
00:04:15.840 --> 00:04:20.850
This function will check not only the nonce but the page that was referred.

53
00:04:20.850 --> 00:04:25.710
We're not going to put this function inside a conditional statement because this function will simply

54
00:04:25.710 --> 00:04:28.510
kill the script if it turns out to be false.

55
00:04:28.530 --> 00:04:32.290
We can now start processing the form data and save it.

56
00:04:32.340 --> 00:04:37.350
We're going to grab the R ops option so that we can overwrite its options.

57
00:04:37.380 --> 00:04:40.020
The variable should be called recipe ops

58
00:04:43.440 --> 00:04:47.420
all I'm going to do is update the options with the Post values.

59
00:04:47.550 --> 00:04:50.690
I'm going to be using a function called ABS int.

60
00:04:50.700 --> 00:04:52.580
This function does two things.

61
00:04:52.680 --> 00:04:57.090
It returns a value that is an integer and is an absolute value.

62
00:04:57.090 --> 00:05:02.190
This function is also provided to you by Wordpress and I highly recommended that you use it.

63
00:05:02.610 --> 00:05:07.820
However you should know that the options API will sanitize all values for you anyway

64
00:05:16.590 --> 00:05:24.750
next we're going to use a function called update option this function has two parameters which is the

65
00:05:24.750 --> 00:05:30.090
name of the option to update and the updated value after updating the option.

66
00:05:30.090 --> 00:05:33.440
It's time to redirect the user back to the settings page.

67
00:05:33.660 --> 00:05:40.860
WordPress provides a handy function called WP redirect for this purpose the function accepts one parameter

68
00:05:40.890 --> 00:05:43.460
which is the your role to redirect to.

69
00:05:43.470 --> 00:05:48.390
I'm going to use the ad menu URL function so that we always get the avenue URL.

70
00:05:48.420 --> 00:05:54.450
Even if the user changed in the wordpress installation this function has one parameter as well which

71
00:05:54.450 --> 00:05:57.770
is the path relative to the ad menu URL.

72
00:05:57.810 --> 00:06:02.630
I'm going to copy and paste the URL from the URL bar and paste it in here like so.

73
00:06:08.130 --> 00:06:14.620
I'm also going to pass in an extra get variable called status and set its value to 1.

74
00:06:14.670 --> 00:06:20.700
By doing this I can shake up this value is set and if it is I can display a message about the status

75
00:06:20.700 --> 00:06:21.620
of the update.

76
00:06:21.780 --> 00:06:23.310
I'll show you what I mean soon.

77
00:06:23.880 --> 00:06:29.370
Let's try submitting the form and if everything worked out we should see no errors and be redirected

78
00:06:29.370 --> 00:06:31.100
back to the Options page.

79
00:06:31.110 --> 00:06:31.950
Perfect.

80
00:06:31.980 --> 00:06:34.170
Now we face two more problems.

81
00:06:34.170 --> 00:06:39.810
Our fields aren't showing the updated values and there's no message to let the user know that the update

82
00:06:39.810 --> 00:06:41.490
was a success.

83
00:06:41.490 --> 00:06:47.010
You might have already guessed what you would have to do in order to display our options and its values.

84
00:06:47.040 --> 00:06:52.410
I want you to pause the video and try to figure out a way for the input fields to have the current values

85
00:06:52.410 --> 00:06:53.330
input.

86
00:06:53.550 --> 00:06:56.220
You already have the knowledge to figure this out.

87
00:06:56.220 --> 00:06:58.350
Go ahead and try to solve this issue.

88
00:07:00.330 --> 00:07:01.290
Welcome back.

89
00:07:01.320 --> 00:07:03.420
If you figured it out then that's great.

90
00:07:03.450 --> 00:07:05.350
If you didn't that's fine as well.

91
00:07:05.400 --> 00:07:10.500
We'll go over how to do it together first inside the options page function.

92
00:07:10.500 --> 00:07:16.380
We're going to grab the option using the Get option function and store the return value in the recipe

93
00:07:16.410 --> 00:07:20.260
ops variable.

94
00:07:20.280 --> 00:07:26.100
Now all we have to do is reflect the values onto the input fields for these select menu.

95
00:07:26.100 --> 00:07:33.430
We're going to use a ternary operator.

96
00:07:33.550 --> 00:07:36.640
This is special to HP and not WordPress.

97
00:07:36.700 --> 00:07:43.480
We're going to check if the values are equal to 2 if it is then we'll echo our selected for the second

98
00:07:43.480 --> 00:07:50.090
option.

99
00:07:50.110 --> 00:07:55.140
We won't do this for the first option since browsers will set the default value to the first option.

100
00:07:55.690 --> 00:07:58.510
Let's refresh the page and see if everything works.

101
00:07:58.540 --> 00:08:00.670
Everything seems perfect.

102
00:08:00.670 --> 00:08:08.000
The last thing we need to do is display the message after a successful submission right above the forum

103
00:08:08.000 --> 00:08:08.600
tags.

104
00:08:08.630 --> 00:08:15.290
Insert some HP tags we're going to use a conditional statement and check if the status key is set in

105
00:08:15.290 --> 00:08:19.730
the get variable and we're going to check if its value is equal to 1.

106
00:08:19.790 --> 00:08:24.590
If this conditional statement is true then we're going to display a success message

107
00:08:33.360 --> 00:08:37.050
refresh the page and we should now see the success message.

108
00:08:37.050 --> 00:08:40.050
This was very simple to do in the next lecture.

109
00:08:40.050 --> 00:08:43.940
We're going to recreate this using these settings API.

110
00:08:43.980 --> 00:08:47.300
I know that seems strange but just go with me on this one.

111
00:08:47.370 --> 00:08:50.740
I'll see you in the next lecture.
