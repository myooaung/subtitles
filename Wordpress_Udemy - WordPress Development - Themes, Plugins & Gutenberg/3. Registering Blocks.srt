1
00:00:08,020 --> 00:00:11,500
We are now going to register our block to get started.

2
00:00:11,500 --> 00:00:22,440
Open your command line and see these into the blocks directory then run the commands NPM run Dev.

3
00:00:22,530 --> 00:00:25,310
This shouldn't make web pack look out for any changes.

4
00:00:25,440 --> 00:00:30,870
Once you have that ready opened the index dot J.S. file inside the app directory.

5
00:00:30,870 --> 00:00:36,870
I'm going to empty this file out to register a block will need to include a few things and then call

6
00:00:36,870 --> 00:00:38,750
a function if we want to.

7
00:00:38,760 --> 00:00:41,180
We could write the code inside this file.

8
00:00:41,370 --> 00:00:46,380
However as you may know by now I like to keep things organized and structured.

9
00:00:46,380 --> 00:00:49,970
We're going to place every block we create into its own file.

10
00:00:50,100 --> 00:00:53,930
We'll be using the index file as a way to import everything.

11
00:00:53,940 --> 00:00:58,050
This file will look similar to the main plug in P HP file.

12
00:00:58,050 --> 00:01:02,820
It'll just be a lot of import statements inside the app directory.

13
00:01:02,820 --> 00:01:12,170
Create a folder named recipe dash block and inside that directory create a file named index dot J.S..

14
00:01:12,290 --> 00:01:14,350
You don't have to name them like this.

15
00:01:14,390 --> 00:01:16,880
This is just how I prefer to name things.

16
00:01:16,940 --> 00:01:22,250
Now we'll have to import the index file back inside the main index file.

17
00:01:22,280 --> 00:01:27,010
I'm going to add a comment that says main file.

18
00:01:27,200 --> 00:01:30,310
We're going to have a lot of files named index dot J.

19
00:01:30,350 --> 00:01:35,450
So this will help us differentiate between this file and the other files below this.

20
00:01:35,480 --> 00:01:42,410
I'm going to use the import statement and pass in the path to the file all right.

21
00:01:42,490 --> 00:01:44,110
Things are a bit different here.

22
00:01:44,110 --> 00:01:49,750
Previously when we went over modules I told you there are various ways to import files.

23
00:01:49,750 --> 00:01:53,440
We're using the E6 method of importing modules.

24
00:01:53,470 --> 00:01:59,110
However I'm not using the from key word nor am I storing the data in a variable.

25
00:01:59,140 --> 00:02:04,900
If you were to just call the import statement by itself then javascript will still process the contents

26
00:02:04,900 --> 00:02:07,810
of that file but it will not return the data.

27
00:02:07,810 --> 00:02:13,330
This means that if you were to export any data from that file then we won't be able to use it here.

28
00:02:13,330 --> 00:02:15,070
That's perfectly fine.

29
00:02:15,070 --> 00:02:18,160
We don't need to import any data from that file.

30
00:02:18,160 --> 00:02:23,260
The great thing about this is that we'll still have access to all other modules even though we're not

31
00:02:23,260 --> 00:02:26,950
passing any data from this module to the one being imported.

32
00:02:26,950 --> 00:02:33,730
Another thing I want to note is the file name I'm not including the indexed dot J.S. file name by default.

33
00:02:33,730 --> 00:02:39,880
Javascript will assume that you want to load a file named index dot J S if you don't specify one by

34
00:02:39,910 --> 00:02:41,760
organizing our code like this.

35
00:02:41,770 --> 00:02:46,960
We can just provide the directory name and JavaScript will take care of the rest if you want.

36
00:02:46,960 --> 00:02:50,480
You can include the file name if it makes things more readable.

37
00:02:50,530 --> 00:02:55,150
All right let's shift our focus to the recipe block index file.

38
00:02:55,180 --> 00:03:00,880
WordPress puts everything into a single variable called WP let's log that variable

39
00:03:04,800 --> 00:03:07,830
even though we're using web pack in a lot of other modules.

40
00:03:07,830 --> 00:03:13,620
Keep in mind that we're loading this file with Wordpress just like any other javascript file will have

41
00:03:13,620 --> 00:03:17,560
access to any functions or variables that are defined globally.

42
00:03:17,570 --> 00:03:23,470
Save your changes and refresh the editor open your developer tools and view the console tab.

43
00:03:23,610 --> 00:03:29,490
If everything worked then you should see an object being logged this object contains a whole lot of

44
00:03:29,520 --> 00:03:33,410
other objects that will help us build blocks the main object.

45
00:03:33,450 --> 00:03:36,350
I want you to focus on is the blocks object.

46
00:03:36,570 --> 00:03:41,310
This object contains a list of functions were helping you build your own block that will work with the

47
00:03:41,310 --> 00:03:42,600
Gutenberg editor.

48
00:03:42,720 --> 00:03:47,160
Let's go ahead and use this object inside the recipe block.

49
00:03:47,160 --> 00:03:49,190
I'm going to comment out the log.

50
00:03:49,200 --> 00:03:54,360
Then I'm going to call the WP dot blocks dot register block type function

51
00:04:00,870 --> 00:04:03,540
this function will register a block for us.

52
00:04:03,540 --> 00:04:08,220
We just need to passion if you settings and we'll be set before we move on to that.

53
00:04:08,220 --> 00:04:13,320
Let's check out the documentation for this Gutenberg is still relatively new.

54
00:04:13,410 --> 00:04:17,700
However it's probably one of the best documented parts of WordPress.

55
00:04:17,700 --> 00:04:23,430
There are two locations you'll find yourself going through to find more information in the resource

56
00:04:23,430 --> 00:04:24,770
section of this lecture.

57
00:04:24,780 --> 00:04:26,950
I provide links to these resources.

58
00:04:27,090 --> 00:04:33,010
The first resource is the handbook the handbook is the developer friendly resource for Gutenberg.

59
00:04:33,030 --> 00:04:36,060
Lots of examples and overviews on the basics.

60
00:04:36,060 --> 00:04:40,010
This is probably where you'll find yourself going as a beginner.

61
00:04:40,080 --> 00:04:44,430
The second resource is the get hub repository for Gutenberg itself.

62
00:04:44,430 --> 00:04:50,610
Before we dive into this project I do want to note one thing the code you find here and the code inside

63
00:04:50,610 --> 00:04:53,820
your wordpress installation are completely different.

64
00:04:53,820 --> 00:04:56,910
The code here is raw without any compilation.

65
00:04:56,910 --> 00:05:01,330
You will find that the file size here is bigger than the one that's loaded with Wordpress.

66
00:05:01,470 --> 00:05:08,100
The code inside WordPress is compressed in a unified I do not recommend looking at the code inside WordPress.

67
00:05:08,160 --> 00:05:12,900
Instead I recommend you check out the get hub repository throughout this course.

68
00:05:12,900 --> 00:05:18,140
I'll be referring both resources so be sure to bookmark them both earlier.

69
00:05:18,210 --> 00:05:22,230
If you recall we logged the WP global variable.

70
00:05:22,230 --> 00:05:28,080
A lot of the various objects you found inside that object can be found inside the packages directory

71
00:05:28,170 --> 00:05:30,020
of the Gutenberg plugin.

72
00:05:30,090 --> 00:05:35,850
I'm going to click on the blocks directory the blocks your rectory contains all the functions you saw

73
00:05:35,850 --> 00:05:37,710
inside the blocks object.

74
00:05:37,800 --> 00:05:43,210
Most packages come with their own documentation that you may not be able to find inside the handbook.

75
00:05:43,260 --> 00:05:49,110
Now that we know where the code is for creating blocks let's examine a block in the editor switching

76
00:05:49,110 --> 00:05:55,080
back to the editor you'll find a plus icon at the top left corner clicking on this will display a list

77
00:05:55,080 --> 00:05:57,680
of blocks that come by default with Gutenberg.

78
00:05:57,810 --> 00:06:04,260
Something I want you to notice is that blogs are categorized into things like common formatting embeds

79
00:06:04,350 --> 00:06:05,330
etc..

80
00:06:05,580 --> 00:06:10,770
This is important to note as when we are creating blogs we'll be asked where we'll want to place our

81
00:06:10,770 --> 00:06:11,540
blog.

82
00:06:11,580 --> 00:06:15,850
It's always good practice to place your blog in an appropriate category.

83
00:06:16,020 --> 00:06:23,100
Back on the Github page you can find the code for these blogs inside the packages slash block dash library

84
00:06:23,220 --> 00:06:31,060
slash source directory after you finish this course I recommend you check up the code here to see how

85
00:06:31,060 --> 00:06:34,270
WordPress goes about creating their own blocks.

86
00:06:34,270 --> 00:06:36,080
Let's check one out really quickly.

87
00:06:36,100 --> 00:06:38,540
I'm going to select the audio block.

88
00:06:38,650 --> 00:06:45,140
The general architecture WordPress goes for here is an index file and then some SPSS files.

89
00:06:45,160 --> 00:06:48,030
I don't expect you to know what SPSS is.

90
00:06:48,070 --> 00:06:51,060
It's just another file type for CSX.

91
00:06:51,070 --> 00:06:56,220
I'll be briefly going over it later on in this course but for now you can ignore it.

92
00:06:56,260 --> 00:06:59,560
Let's check out the index file inside this file.

93
00:06:59,590 --> 00:07:05,050
You'll find that WordPress import some variables which will also be using in our own blocks.

94
00:07:05,110 --> 00:07:08,050
Then it proceeds to create some settings.

95
00:07:08,140 --> 00:07:10,390
We'll be exploring this more in depth later.

96
00:07:10,450 --> 00:07:15,370
But for now I just want to give you a general idea of what we'll be writing.

97
00:07:15,370 --> 00:07:23,840
Let's go back to the blocks directory most directories here come with a file named read me dot M.D..

98
00:07:23,980 --> 00:07:27,250
These files provide more information about a project.

99
00:07:27,340 --> 00:07:32,930
The great thing about get hub is that it will automatically render any read me files below.

100
00:07:33,100 --> 00:07:39,440
Let's scroll down to the API section here you'll find a list of functions you can use in your own code.

101
00:07:39,520 --> 00:07:43,030
Right away you'll see the register block type function.

102
00:07:43,030 --> 00:07:45,850
There are two parameters which are both required.

103
00:07:45,850 --> 00:07:51,700
The first is the name and the second is an object filled with the settings before we fill in the settings.

104
00:07:51,700 --> 00:07:54,630
There's one more thing I want you to be aware of.

105
00:07:54,700 --> 00:07:59,800
I know I'm rambling here but knowing how to navigate your way around will help you later on if you want

106
00:07:59,800 --> 00:08:02,610
to build advanced blocks scrolling back up.

107
00:08:02,650 --> 00:08:09,640
Click on the API directory the API directory contains code related to how you can interact with the

108
00:08:09,640 --> 00:08:11,550
blocks of WordPress.

109
00:08:11,620 --> 00:08:17,830
There should be a file here called registration dot J.S. This is the file that contains the register

110
00:08:17,830 --> 00:08:19,240
block type function.

111
00:08:19,240 --> 00:08:24,220
If you take a close look at this function you'll find that it performs a lot of conditional checks on

112
00:08:24,220 --> 00:08:25,150
your statements.

113
00:08:25,270 --> 00:08:29,320
If it finds something wrong then it'll throw an error 1 error.

114
00:08:29,320 --> 00:08:33,610
I want to highlight in particular is this one that checks for the block name.

115
00:08:33,610 --> 00:08:40,660
It says the following block names must contain a namespace prefix include only lowercase alphanumeric

116
00:08:40,660 --> 00:08:43,660
characters or dashes and start with a letter.

117
00:08:43,660 --> 00:08:48,410
Example my dash plug in slash my dash custom dash block.

118
00:08:48,550 --> 00:08:52,390
I wanted to highlight this as we'll be using this function very soon.

119
00:08:52,390 --> 00:08:54,940
Let's go back to the blocks directory.

120
00:08:54,940 --> 00:09:00,850
To recap the API directory contains the functions for interacting with this part of Gutenberg which

121
00:09:00,850 --> 00:09:07,150
are blocks the block Nash library directory contains all the default blocks for Gutenberg.

122
00:09:07,150 --> 00:09:11,780
The rest of the packages are components that we can use to help build our own blocks.

123
00:09:11,830 --> 00:09:15,650
You'll soon understand what that means as the course progresses.

124
00:09:15,730 --> 00:09:19,470
Now that we have an overview of things let's start using this function.

125
00:09:19,510 --> 00:09:25,300
The first parameter is the name the name needs to be formatted as the namespace followed by the name

126
00:09:25,300 --> 00:09:31,430
of the block for the rest of this course we'll be using the namespace Udemy the name of this block will

127
00:09:31,450 --> 00:09:35,660
be Udemy slash recipe.

128
00:09:35,690 --> 00:09:41,870
The second parameter for this function is the settings you must pass this in as an object.

129
00:09:41,870 --> 00:09:43,590
We're going to stop here for now.

130
00:09:43,610 --> 00:09:45,760
This is how you register a block.

131
00:09:45,770 --> 00:09:51,350
Unfortunately this will not work as Gutenberg will throw an error because we need to set a few settings

132
00:09:54,750 --> 00:09:55,370
so far.

133
00:09:55,470 --> 00:10:00,720
We've gone over how to prepare the environment in Q the files and British server block.

134
00:10:00,720 --> 00:10:03,020
The next step is to add some settings.

135
00:10:03,120 --> 00:10:05,370
We'll be going over that in the next lecture.
