1
00:00:07,410 --> 00:00:13,650
IF YOU'VE ACTIVATED THE RECIPE plugin then that's fine but you'll need to deactivate it for an app.

2
00:00:13,830 --> 00:00:20,430
And this lecture will be doing some plugin activation settings and add some plugin security as developers

3
00:00:20,580 --> 00:00:24,210
we have to do everything in our power to secure our plugins.

4
00:00:24,210 --> 00:00:28,650
Of course we can't account for every hack there is throughout this course.

5
00:00:28,650 --> 00:00:32,860
I'll be sure to advise you what you can do to secure your plugin.

6
00:00:32,880 --> 00:00:37,490
One course of action we can take to secure this plugin is preventing users from calling this plugin

7
00:00:37,500 --> 00:00:38,550
directly.

8
00:00:38,550 --> 00:00:43,200
It's common for hackers to try to visit the file directly instead of letting WordPress load it.

9
00:00:43,860 --> 00:00:45,720
So how do we prevent this.

10
00:00:45,720 --> 00:00:47,890
Well it's actually quite simple.

11
00:00:47,970 --> 00:00:51,460
Open up the recipe plugin file at the very top.

12
00:00:51,480 --> 00:00:58,780
Add a conditional statement this conditional statement we'll check to see if a function exists.

13
00:00:58,890 --> 00:01:04,370
WordPress loads its own files and constants before loading plugins so that they're available to us.

14
00:01:04,500 --> 00:01:12,910
The function we want to check exists is called add action if this function doesn't exist then we know

15
00:01:12,910 --> 00:01:19,110
for sure that WordPress isn't loaded and therefore we don't want to run the rest of this scripts inside

16
00:01:19,120 --> 00:01:20,400
this conditional statement.

17
00:01:20,410 --> 00:01:23,110
We're simply going to echo out a message.

18
00:01:23,110 --> 00:01:23,860
Hi there.

19
00:01:23,860 --> 00:01:24,970
I'm just a plugin.

20
00:01:25,030 --> 00:01:28,680
Not much I can do when called directly and then exit out of here.

21
00:01:34,780 --> 00:01:37,510
This way of doing it is common amongst plugins.

22
00:01:37,540 --> 00:01:40,630
Actually I took this from the plugin a kismet.

23
00:01:40,630 --> 00:01:44,610
This is a plugin prepackaged with most WordPress installations.

24
00:01:44,650 --> 00:01:45,780
Let's take a look.

25
00:01:45,820 --> 00:01:52,420
If we open the Kismet folder and view the Kismet dot Peach Tree file you'll find that this is implemented

26
00:01:52,420 --> 00:01:55,850
in the same style and fashion as the recipe plugin.

27
00:01:55,870 --> 00:02:01,380
This isn't completely foolproof but this should stop some of the most basic attacks out there.

28
00:02:01,390 --> 00:02:06,130
Let's begin working on the plugin activation now inside the main plugin file.

29
00:02:06,130 --> 00:02:07,940
Let's add some sections first.

30
00:02:07,960 --> 00:02:13,690
Here are the four sections that will make setup includes hooks and short codes

31
00:02:20,100 --> 00:02:21,670
under the hooks section.

32
00:02:21,690 --> 00:02:29,050
We're going to call a function called register activation hook this function is a special kind of hook

33
00:02:29,080 --> 00:02:31,330
made specifically for plugins.

34
00:02:31,330 --> 00:02:34,600
This function will be called when our plugin is activated.

35
00:02:34,600 --> 00:02:36,780
This function has two parameters.

36
00:02:36,850 --> 00:02:39,620
The first parameter is the path to our plugin.

37
00:02:39,640 --> 00:02:45,430
We could use some built in functions to get the path but there's actually a simpler way of doing this.

38
00:02:45,460 --> 00:02:48,840
The HP provides a constant named file.

39
00:02:48,940 --> 00:02:54,940
This constant will always point to the file it's used in the second parameter is the name of the function

40
00:02:54,940 --> 00:02:56,160
that will execute.

41
00:02:56,260 --> 00:03:01,960
We'll call this r activate plugin just like last time.

42
00:03:02,030 --> 00:03:08,240
I'll be pre fixing the variables functions and anything else with R underscore to prevent collisions

43
00:03:08,240 --> 00:03:10,340
with other plugins and themes.

44
00:03:10,400 --> 00:03:12,140
Let's define this function now.

45
00:03:12,320 --> 00:03:18,580
Create a folder called includes and within this folder create a file called Activate up HP

46
00:03:25,100 --> 00:03:30,100
within this file determine the function and make sure to include it from the main plugin file

47
00:03:36,330 --> 00:03:38,130
before we execute any code.

48
00:03:38,130 --> 00:03:42,390
I want to check if the current version of WordPress is compatible with this plugin.

49
00:03:42,510 --> 00:03:47,640
You can set this to any version you'd like but I'm going to keep things simple and say that the minimum

50
00:03:47,640 --> 00:03:52,720
version required is 5.0 inside the activation function.

51
00:03:52,740 --> 00:03:58,560
We're going to use a conditional statement inside this conditional statement.

52
00:03:58,670 --> 00:04:01,400
Let's call the version compare function.

53
00:04:01,430 --> 00:04:05,330
This is a P2P function that will help you with comparing versions.

54
00:04:05,330 --> 00:04:10,820
The reason we use this function rather than a traditional comparison operator is because versions will

55
00:04:10,820 --> 00:04:13,070
usually have multiple decimals.

56
00:04:13,130 --> 00:04:18,350
For example WordPress currently released version 5 point 0 point 1.

57
00:04:18,350 --> 00:04:21,720
This is a number that can't be compared traditionally.

58
00:04:21,950 --> 00:04:28,250
So this function will help you with that no matter the schematic versioning you use for the first parameter.

59
00:04:28,250 --> 00:04:32,700
I'm going to use the get blog info function and pass in the value version.

60
00:04:34,780 --> 00:04:38,380
This will return the current wordpress installation version.

61
00:04:38,440 --> 00:04:43,330
The second parameter is 5.0 which will be the minimum version required.

62
00:04:43,330 --> 00:04:46,690
Lastly we'll use the less than operator.

63
00:04:46,690 --> 00:04:51,700
This will basically check if the current version is less than the minimum required version.

64
00:04:51,730 --> 00:04:57,690
For example if the current version is five point eight then it will be processed as five point eight.

65
00:04:57,730 --> 00:04:59,730
Less than five point zero.

66
00:04:59,890 --> 00:05:01,440
This will return false.

67
00:05:01,450 --> 00:05:06,910
Which is great because that means our plugin is compatible with the wordpress installation.

68
00:05:06,910 --> 00:05:12,550
However if this returns true then that means the WordPress version is really low.

69
00:05:12,550 --> 00:05:19,870
If it is then we don't want to activate this plugin so we'll use the WP die function and output the

70
00:05:19,870 --> 00:05:21,140
following message.

71
00:05:21,190 --> 00:05:23,740
You must update WordPress to use this plugin

72
00:05:29,120 --> 00:05:32,510
make this string translatable the text domain.

73
00:05:32,540 --> 00:05:34,600
This time will be recipe.

74
00:05:34,740 --> 00:05:39,610
All right so activate your plugin and you should be able to do so without any errors.

75
00:05:39,620 --> 00:05:45,500
Now we can start developing the plugin we'll be revising this function later to create some settings

76
00:05:45,560 --> 00:05:47,540
but for now we'll leave it as is.
