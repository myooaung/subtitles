1
00:00:07,420 --> 00:00:13,630
The loop is ready and all we have to do now is make each part of the post dynamic in the resource section

2
00:00:13,630 --> 00:00:14,560
of this lecture.

3
00:00:14,560 --> 00:00:21,520
I provide a link to a page in the handbook called template tags template tags RPG functions that display

4
00:00:21,520 --> 00:00:23,480
information onto the page.

5
00:00:23,500 --> 00:00:26,920
There are hundreds of them and each are simple to use.

6
00:00:26,950 --> 00:00:31,270
The purpose of a template tag is to make your code readable and simpler.

7
00:00:31,270 --> 00:00:36,170
Usually you would have to query the database and grab this information manually.

8
00:00:36,280 --> 00:00:40,320
Template tags save you time by doing all the work behind the scenes.

9
00:00:40,420 --> 00:00:46,320
All you have to do is call the function associated with the data you'd like to grab on this page is

10
00:00:46,330 --> 00:00:49,970
a long list of functions that return information about the blog.

11
00:00:50,140 --> 00:00:53,910
A majority of these function can be used anywhere in your template.

12
00:00:53,980 --> 00:00:56,930
You are not required to use them inside the loop.

13
00:00:56,930 --> 00:01:01,210
However there are benefits to running some of these functions inside a loop.

14
00:01:01,210 --> 00:01:03,960
You'll see how that works in just a moment.

15
00:01:04,000 --> 00:01:10,060
Let's scroll down to the post tagged section of this page you'll see we have quite a few functions that

16
00:01:10,060 --> 00:01:12,370
we can use inside the loop.

17
00:01:12,370 --> 00:01:14,230
Let's use one of these template tags.

18
00:01:14,230 --> 00:01:18,610
Now the first one we'll be using is the post thumbnail function.

19
00:01:18,610 --> 00:01:24,490
Open the content excerpt template and look for the image tag that contains the featured image.

20
00:01:25,090 --> 00:01:33,450
Let's remove this and instead call this function.

21
00:01:33,490 --> 00:01:37,480
Keep in mind that this template is being loaded inside the loop.

22
00:01:37,480 --> 00:01:41,370
The function will generate the HDL for our image and output.

23
00:01:41,620 --> 00:01:47,200
The benefit of using a template tag inside the loop is that template tag functions will automatically

24
00:01:47,200 --> 00:01:49,420
detect that it's inside a loop.

25
00:01:49,420 --> 00:01:55,240
This function and any other function we use inside the loop will automatically know which post to grab

26
00:01:55,240 --> 00:01:56,890
the information from.

27
00:01:57,160 --> 00:02:03,160
This function has a couple of parameters we can set the first parameter is the size of the image you

28
00:02:03,160 --> 00:02:08,740
can pass in a number if you believe you know a good size or you can take advantage of WordPress as post

29
00:02:08,740 --> 00:02:15,580
thumbnail size feature and the resource section I provide a link to the post thumbnail page WordPress

30
00:02:15,580 --> 00:02:21,460
describes in detail about post thumbnails but we won't concern ourselves with the whole thing.

31
00:02:21,550 --> 00:02:26,530
Scroll down to where it talks about the sizes available from what WordPress says.

32
00:02:26,620 --> 00:02:34,990
There are 4 size aliases we can use thumbnail medium large and full full can be thought of as the original

33
00:02:34,990 --> 00:02:35,610
size.

34
00:02:35,860 --> 00:02:40,300
Let's pass in full to the function.

35
00:02:40,360 --> 00:02:46,400
The second parameter is an array of attributes that WordPress will add to the HP email generated.

36
00:02:46,540 --> 00:02:48,940
You can set any attribute you'd like.

37
00:02:48,940 --> 00:02:50,760
There are no restrictions.

38
00:02:50,860 --> 00:02:57,190
The only attribute I want to override is the class attribute one class I'd like to use is the image

39
00:02:57,220 --> 00:03:01,130
underscore fade class which will give the image a nice effect.

40
00:03:01,240 --> 00:03:09,350
Let's use the key called Class and set its value to image underscore fate that's all we need to do.

41
00:03:09,510 --> 00:03:14,170
Refresh the page and check out the post thumbnail.

42
00:03:14,210 --> 00:03:16,500
This is exactly what we wanted.

43
00:03:16,520 --> 00:03:19,090
You should see something similar to what I see.

44
00:03:19,130 --> 00:03:25,430
You may have different images as fake or press generated most of these posts and grabs random images

45
00:03:25,430 --> 00:03:26,460
from the Internet.

46
00:03:26,540 --> 00:03:30,570
Some posts will not have images and that's perfectly fine.

47
00:03:30,590 --> 00:03:34,880
We need to do one more thing before we move onto the other parts of the template.

48
00:03:34,910 --> 00:03:39,980
Not every post that is displayed will automatically have an image associated with it.

49
00:03:40,010 --> 00:03:42,940
We can't assume every post will have a post image.

50
00:03:43,130 --> 00:03:49,940
So what we're going to do is wrap the div tag with the class entry dash image with a conditional statement

51
00:03:59,880 --> 00:04:01,530
inside this conditional statement.

52
00:04:01,530 --> 00:04:09,700
We'll use the has post thumbnail function as the name suggests this will simply check to see if the

53
00:04:09,700 --> 00:04:12,250
current post in the loop has a thumbnail.

54
00:04:12,250 --> 00:04:14,920
If it's true then it will display the image.

55
00:04:14,920 --> 00:04:19,750
What I love about these functions is that they can automatically detect that we're in a loop and we'll

56
00:04:19,750 --> 00:04:23,600
check each post individually before we continue on.

57
00:04:23,650 --> 00:04:26,370
I want to briefly talk about thumbnail sizes.

58
00:04:26,530 --> 00:04:32,440
If you were to go to the admin dashboard and navigate to settings media you'll find settings to change

59
00:04:32,440 --> 00:04:37,120
the sizes of certain thumbnails feel free to adjust these as you like.

60
00:04:37,120 --> 00:04:40,360
We also have the power to abdominal sizes.

61
00:04:40,360 --> 00:04:43,120
This is something we'll explore in a future lecture.

62
00:04:43,120 --> 00:04:46,880
Let's finish up the loop here by making the rest of the post dynamic.

63
00:04:46,990 --> 00:04:52,630
Most of the functions I'm going to introduce here can be found on the template tags handbook page.

64
00:04:52,750 --> 00:04:55,640
We're going to start from the top and work our way down.

65
00:04:55,660 --> 00:05:00,490
First up is the title Inside the div tag with the class entry title.

66
00:05:00,490 --> 00:05:01,640
You'll find the title.

67
00:05:01,810 --> 00:05:08,920
We're going to replace this static text by calling the function the title you'll notice that there's

68
00:05:08,980 --> 00:05:11,590
also a function called get the title.

69
00:05:11,620 --> 00:05:14,860
This is a common naming convention for template tags.

70
00:05:14,860 --> 00:05:20,140
The main difference between these two types of functions is that the get version will return the value

71
00:05:20,200 --> 00:05:26,120
while the non get version will echo out the value the value itself is always the same.

72
00:05:26,290 --> 00:05:31,870
Some template tags also come with the option of passing an H2 UML to form out the content.

73
00:05:31,870 --> 00:05:37,820
This function has two parameters which is the HDMI all that will be placed before and after the title.

74
00:05:37,870 --> 00:05:45,630
For example I can pass an opening and closing H2 tags like so as a result.

75
00:05:45,700 --> 00:05:47,790
There are two ways to go about this.

76
00:05:47,800 --> 00:05:52,870
You can just output the h t mail attach yourself or pass it into the function.

77
00:05:52,870 --> 00:05:59,440
The benefit of passing in your h GM is that you give developers the opportunity to modify the h t amount.

78
00:05:59,530 --> 00:06:02,320
This right here depends on the design of your theme.

79
00:06:02,800 --> 00:06:08,260
I'm going to remove these because I prefer not to have developers form out this title.

80
00:06:08,260 --> 00:06:13,750
Not all template tags have these options but it's definitely something you should consider if the option

81
00:06:13,750 --> 00:06:14,960
is available.

82
00:06:14,980 --> 00:06:16,900
All right let's move on.

83
00:06:16,900 --> 00:06:19,730
Next up is the perma link function.

84
00:06:19,750 --> 00:06:27,880
I'm going to replace the link for the title with this function this function will simply echo out the

85
00:06:27,880 --> 00:06:29,880
you are well to the post itself.

86
00:06:29,890 --> 00:06:35,920
Keep in mind that I'm getting all these from the template tags Codex page all these functions are available

87
00:06:35,920 --> 00:06:38,110
to us and you can use them freely.

88
00:06:38,170 --> 00:06:43,840
We will actually have to use this function multiple times as there are multiple locations a link is

89
00:06:43,840 --> 00:06:45,030
being used.

90
00:06:45,070 --> 00:06:56,560
Make sure you update all links as I have.

91
00:06:56,590 --> 00:07:04,580
Next up is the date we'll be using the function get the date and we'll be echoing out the value.

92
00:07:04,730 --> 00:07:09,550
There is a the date function but this function actually comes with a problem.

93
00:07:10,010 --> 00:07:15,140
If there are posts with the same date then this function will end up acting funny and displayed the

94
00:07:15,140 --> 00:07:21,340
same date even after the date between posts has changed in the resource section of this lecture.

95
00:07:21,440 --> 00:07:23,850
I provide a link to the date function.

96
00:07:23,850 --> 00:07:25,820
Here is what WordPress sets.

97
00:07:26,000 --> 00:07:33,290
Special note when there are multiple posts on a page published under the same day that date only displays

98
00:07:33,290 --> 00:07:38,720
the date for the first post to repeat the date for posts published under the same day.

99
00:07:38,750 --> 00:07:45,890
You should use the template tag the time or get the date WordPress itself recommends that you use the

100
00:07:45,920 --> 00:07:49,400
get the date function rather than the date function.

101
00:07:49,400 --> 00:07:55,520
The format for the date is determined by the administrator in the admin dashboard navigate to settings

102
00:07:55,550 --> 00:07:59,600
general here we can modify the output of the date.

103
00:07:59,690 --> 00:08:03,200
We can also modify the format through the function itself.

104
00:08:03,200 --> 00:08:09,170
This function can optionally accept one parameter which is a format and the resource section of this

105
00:08:09,170 --> 00:08:14,020
lecture I provide a link to formatting the date and time in WordPress.

106
00:08:14,240 --> 00:08:18,590
You can pass in any of the following and WordPress will change the output.

107
00:08:18,590 --> 00:08:24,320
I'm not going to change the format as I like to let my users determine their own preferred format.

108
00:08:24,320 --> 00:08:29,620
If you don't specify a format then WordPress will use the format in the settings.

109
00:08:29,660 --> 00:08:30,740
Let's keep going.

110
00:08:30,740 --> 00:08:33,890
Use the author function to output the name of the author.

111
00:08:36,290 --> 00:08:37,520
So far so good.

112
00:08:37,520 --> 00:08:40,580
Up next is setting up the URL to the author.

113
00:08:40,610 --> 00:08:47,360
This one's going to be a bit tricky as we have to use two functions to obtain this value will be echoing

114
00:08:47,450 --> 00:08:49,610
out the value returned by the function.

115
00:08:49,610 --> 00:08:57,430
Get author posts you are about this function or return the U.R.L. to the author's profile.

116
00:08:57,430 --> 00:09:04,240
However unlike the other functions this function isn't aware of being in a loop all the other functions

117
00:09:04,240 --> 00:09:07,330
will automatically use the I.D. in the loop.

118
00:09:07,330 --> 00:09:13,660
This function requires that we pass in the idea of the author so to do this we have to use the function

119
00:09:13,750 --> 00:09:21,610
get the author meta which will retrieve information about the author this function is aware that it's

120
00:09:21,700 --> 00:09:23,440
inside the loop.

121
00:09:23,440 --> 00:09:28,840
This function can return a number of values but we're interested in the idea of the author.

122
00:09:28,900 --> 00:09:33,110
So I'll just pass an I.D. in the resource section of this lecture.

123
00:09:33,160 --> 00:09:39,610
I provide a link to the author meta function the page displays all the possible values you can retrieve

124
00:09:39,640 --> 00:09:40,990
using this function.

125
00:09:40,990 --> 00:09:45,190
This bit of code here will grab the perma link to the author's posts.

126
00:09:45,190 --> 00:09:51,580
The very last thing we want to do is call the category function which will return an unordered list

127
00:09:51,580 --> 00:09:53,870
of links of categories for each post.

128
00:09:56,010 --> 00:09:58,100
However we do not want that.

129
00:09:58,170 --> 00:10:01,680
We want the categories to be separated by spaces.

130
00:10:01,710 --> 00:10:05,510
Luckily we can pass in a string that will act as a separator.

131
00:10:05,730 --> 00:10:09,510
So I will pass in a string of an empty space.

132
00:10:09,510 --> 00:10:11,080
Next up is the comments.

133
00:10:11,080 --> 00:10:12,310
No function.

134
00:10:12,370 --> 00:10:20,120
Replace this static text with the function this function will output the number of comments opposed

135
00:10:20,120 --> 00:10:24,040
hence there are three parameters which are all optional.

136
00:10:24,110 --> 00:10:26,740
The first parameter is the text to display.

137
00:10:26,780 --> 00:10:30,880
If there are no comments I'm going to pass in the string zero.

138
00:10:30,890 --> 00:10:36,050
If I were to admit this value then WordPress will automatically display no comments.

139
00:10:36,050 --> 00:10:42,890
If there are zero comments in the post by passing in the string 0 WordPress will just output the string

140
00:10:42,890 --> 00:10:43,890
itself.

141
00:10:43,970 --> 00:10:46,630
The second parameter is the text to display.

142
00:10:46,640 --> 00:10:52,370
If there is one comment and the third parameter is the text to display if there was more than one comment

143
00:10:52,880 --> 00:10:56,090
I won't be sending these since I like the default values anyway.

144
00:10:56,090 --> 00:10:59,240
The last thing we have to do is update the excerpt.

145
00:10:59,270 --> 00:11:03,230
I'm going to replace the paragraph tags and call the function.

146
00:11:03,230 --> 00:11:06,880
The excerpt which is a shortened version of the original post.

147
00:11:09,180 --> 00:11:13,410
It's a really great way to give readers a preview of what's in the post itself.

148
00:11:13,410 --> 00:11:18,750
As you can already tell we're just calling a bunch of functions that WordPress will take care of replacing

149
00:11:19,320 --> 00:11:25,440
WordPress takes care of everything from page nation to querying the database to looping through everything.

150
00:11:25,620 --> 00:11:29,490
All we have to do is instruct it where we want to place the data.

151
00:11:29,730 --> 00:11:33,860
Let's refresh the page and see our dynamic posts as expected.

152
00:11:33,930 --> 00:11:34,830
Everything works

153
00:11:39,230 --> 00:11:40,700
before I end this lecture.

154
00:11:40,780 --> 00:11:43,570
I want to talk a little more about template tags.

155
00:11:43,570 --> 00:11:46,810
Let's go back to the page with the list of template texts.

156
00:11:46,870 --> 00:11:54,010
People often get confused what a template tag is template tags is just a fancy phrase for a plain regular

157
00:11:54,010 --> 00:11:55,740
P HP function.

158
00:11:55,780 --> 00:12:01,210
The point of a template tag is to remove a lot of the logic from your template your template should

159
00:12:01,210 --> 00:12:08,110
mostly be H.G. email with some p p code outputting the data template tags or functions that handle all

160
00:12:08,110 --> 00:12:11,350
the logic for retrieving or processing data.

161
00:12:11,350 --> 00:12:16,900
If we take a look at this list of functions you'll see that the first few items are the get header get

162
00:12:16,900 --> 00:12:19,570
footer and get sidebar functions.

163
00:12:19,570 --> 00:12:25,120
You should be familiar with these functions so far even though these functions don't query the database.

164
00:12:25,120 --> 00:12:29,420
They do take care of loading certain templates and performing checks.

165
00:12:29,500 --> 00:12:33,900
There are so many template tags here that it's a bit difficult to explore them all.

166
00:12:34,000 --> 00:12:39,450
The best way to learn about a template tag is through practical use and understanding how to use them.

167
00:12:39,640 --> 00:12:43,900
Throughout this course we'll be exploring how to use a lot of these template texts.

168
00:12:43,900 --> 00:12:45,950
Anyway that wraps it up for now.

169
00:12:46,000 --> 00:12:49,000
I'll see you in the next lecture.
