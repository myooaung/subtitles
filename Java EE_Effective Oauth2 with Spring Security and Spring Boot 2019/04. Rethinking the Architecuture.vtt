WEBVTT
1
00:00:02.138 --> 00:00:04.329
Looking at our architecture,

2
00:00:04.329 --> 00:00:07.658
the client credential grant is appropriate for the requests

3
00:00:07.658 --> 00:00:11.896
between the portfolio and pricing service as there is no user

4
00:00:11.896 --> 00:00:14.549
resource on the pricing service.

5
00:00:14.549 --> 00:00:19.848
We could also use the client credentials for communication between all services.

6
00:00:19.848 --> 00:00:21.749
I've seen this approach used.

7
00:00:21.749 --> 00:00:24.657
It can work in an environment where every service trusts each

8
00:00:24.657 --> 00:00:28.467
other as there are pros and cons to consider.

9
00:00:28.467 --> 00:00:29.735
If the token gets leaked,

10
00:00:29.735 --> 00:00:33.359
it can only be used against the service it was intended for,

11
00:00:33.359 --> 00:00:35.606
which is great.

12
00:00:35.606 --> 00:00:39.304
However, since the resource owner is the other service and not a user,

13
00:00:39.304 --> 00:00:43.130
it won't have any user state on it.

14
00:00:43.130 --> 00:00:47.482
Hence, the user details need to be passed in the request body.

15
00:00:47.482 --> 00:00:50.986
So in case of the portfolio service or support service,

16
00:00:50.986 --> 00:00:53.986
the bearer can access any user resources.

17
00:00:53.986 --> 00:00:59.602
So they have to be very trustworthy as there is no way to verify

18
00:00:59.602 --> 00:01:02.845
that the user actually approved that request.

19
00:01:02.845 --> 00:01:05.559
Hence, you have to weigh up the pros and cons.

20
00:01:05.559 --> 00:01:06.480
For the demo,

21
00:01:06.480 --> 00:01:11.526
we will do token relay between the BFFs and the product and support service.

22
00:01:11.526 --> 00:01:12.040
Ideally,

23
00:01:12.040 --> 00:01:17.341
we should only include the username in the token or a GUID identifying them,

24
00:01:17.341 --> 00:01:21.237
which we can then use for authorization checks.

25
00:01:21.237 --> 00:01:24.210
All other details would be passed in the request body.

26
00:01:24.210 --> 00:01:29.250
And then those services will choose what they should and shouldn't pass down.

27
00:01:29.250 --> 00:01:33.974
Now there are some alternatives in the pipeline from the OAuth2 working group.

28
00:01:33.974 --> 00:01:37.496
One is Token Exchange and the other is JWT Bearer Token Grant.

29
00:01:37.496 --> 00:01:41.886
These will allow you to do things like impersonate a user.

30
00:01:41.886 --> 00:01:42.930
So for example,

31
00:01:42.930 --> 00:01:48.572
the web MVC app or the React BFF could exchange the access token received

32
00:01:48.572 --> 00:01:52.996
from the authentication server and approved by the user for another token

33
00:01:52.996 --> 00:01:55.725
that is a subset of the original token.

34
00:01:55.725 --> 00:01:59.882
Hence, if one of them was making a call to the portfolio service,

35
00:01:59.882 --> 00:02:03.150
it could use the current token and ask the authorization server

36
00:02:03.150 --> 00:02:08.218
for a new token with limited scopes and claims for what is

37
00:02:08.218 --> 00:02:11.488
required by the portfolio service.

38
00:02:11.488 --> 00:02:16.727
Hence, the bearer of that token cannot do anything on a support service.

39
00:02:16.727 --> 00:02:20.407
The bearer grant is not yet supported by Spring Security 5.1,

40
00:02:20.407 --> 00:02:27.508
but might be in Spring 5.2, and token exchange will probably follow.

41
00:02:27.508 --> 00:02:28.951
So look out for these.

42
00:02:28.951 --> 00:02:31.484
I will update the course once they are released.

43
00:02:31.484 --> 00:02:34.331
So if you're watching the course and they are made available,

44
00:02:34.331 --> 00:02:43.000
feel free to message me in the comments to remind me to get it added. Keycloak actually already has some support for token exchange.

