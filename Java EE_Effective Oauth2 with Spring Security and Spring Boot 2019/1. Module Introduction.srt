1
00:00:00,000 --> 00:00:07,644
We have an application secured with OAuth2 and OpenID Connect.

2
00:00:07,644 --> 00:00:11,448
Our users' personal data and credentials are now safely

3
00:00:11,448 --> 00:00:13,695
stored away from our application's code,

4
00:00:13,695 --> 00:00:19,757
and none of our application services handle any passwords.

5
00:00:19,757 --> 00:00:26,155
So at best, if a hacker was able to extract any portfolio data from our services,

6
00:00:26,155 --> 00:00:28,920
it would most likely be useless.

7
00:00:28,920 --> 00:00:33,523
The only identifying property they would have is the username.

8
00:00:33,523 --> 00:00:38,687
Now we could use a GUID identifier to make it even more anonymous.

9
00:00:38,687 --> 00:00:44,116
Now in any modern application, there are multiple layers of security.

10
00:00:44,116 --> 00:00:49,876
There's authentication, identifying and validating the subject and their claims.

11
00:00:49,876 --> 00:00:52,079
And then there's authorization,

12
00:00:52,079 --> 00:00:58,278
once authenticated what the subject can and can't do.

13
00:00:58,278 --> 00:01:00,522
If we go back to our train station analogy,

14
00:01:00,522 --> 00:01:03,835
if you have a valid train ticket,

15
00:01:03,835 --> 00:01:07,739
then you're authorized to ride the train as a passenger.

16
00:01:07,739 --> 00:01:10,367
But you're not authorized to drive the train.

17
00:01:10,367 --> 00:01:13,198
That's for a qualified train driver.

18
00:01:13,198 --> 00:01:13,484
Next,

19
00:01:13,484 --> 00:01:15,921
we will focus on providing more finer-grained

20
00:01:15,921 --> 00:01:27,000
authorization using scopes and authorities. But first, let's have some fun and poke some holes in our application's security.

