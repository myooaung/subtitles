1
00:00:02,069 --> 00:00:06,994
Currently, OAuth2 support is scattered between a number of projects in Spring.

2
00:00:06,994 --> 00:00:09,601
If you look at the Spring OAuth2 feature matrix,

3
00:00:09,601 --> 00:00:13,569
there are four Spring projects with OAuth2 support,

4
00:00:13,569 --> 00:00:17,433
Spring Boot OAuth2, Spring Cloud Security,

5
00:00:17,433 --> 00:00:22,461
Spring 1, Spring Security OAuth 2, and Spring Security 5.

6
00:00:22,461 --> 00:00:24,815
You've probably also heard of Spring Social.

7
00:00:24,815 --> 00:00:28,471
This made things very confusing as to which one to use,

8
00:00:28,471 --> 00:00:30,710
and it depended on your requirements.

9
00:00:30,710 --> 00:00:35,642
Hence, the Spring team have decided to unify JWT Jose,

10
00:00:35,642 --> 00:00:42,247
OAuth2, OpenID Connect support under Spring Security proper as of Spring 5,

11
00:00:42,247 --> 00:00:44,654
which actually makes a lot of sense.

12
00:00:44,654 --> 00:00:46,585
Effectively, it's rewrite.

13
00:00:46,585 --> 00:00:49,029
Now currently, there still isn't full- feature parity.

14
00:00:49,029 --> 00:00:52,794
If you go through the matrix, you can see the gaps.

15
00:00:52,794 --> 00:00:55,958
But the plan is to unify all the projects under one.

16
00:00:55,958 --> 00:01:00,787
So if your feature is supported by Spring Security 5 and above,

17
00:01:00,787 --> 00:01:04,644
then use it as the other projects are in maintenance mode until

18
00:01:04,644 --> 00:01:07,537
the features are migrated to Spring Security.

19
00:01:07,537 --> 00:01:08,805
Okay, great.

20
00:01:08,805 --> 00:01:10,796
Now that's the theory out of the way.

21
00:01:10,796 --> 00:01:14,116
Let's get started into implementing OAuth2 and OpenID Connect

22
00:01:14,116 --> 00:01:17,230
in our demo application in the next section.

23
00:01:17,230 --> 00:01:20,422
If you have used Spring before to add a login page to your

24
00:01:20,422 --> 00:01:22,281
application and thought it was easy,

25
00:01:22,281 --> 00:01:26,276
you will be very pleased to know it's even easier to implement

26
00:01:26,276 --> 00:01:34,000
OAuth and OpenID Connect with Spring Security. The Spring team have done a great job.

