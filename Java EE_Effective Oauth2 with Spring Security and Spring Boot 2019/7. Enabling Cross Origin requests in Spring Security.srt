1
00:00:01,919 --> 00:00:04,583
If we look at the error in the console,

2
00:00:04,583 --> 00:00:07,833
it says the response from the pre-flight OPTIONS request was

3
00:00:07,833 --> 00:00:12,215
missing the Access- Control-Allow-Origins header.

4
00:00:12,215 --> 00:00:17,501
In the Network tab, we can see it received a 401 Access Denied.

5
00:00:17,501 --> 00:00:19,967
Basically, because we enabled Spring Security,

6
00:00:19,967 --> 00:00:25,328
all our endpoints are now secure and blocked for non-authenticated users.

7
00:00:25,328 --> 00:00:30,352
So when the OPTIONS request hit the server, Spring Security simply blocked it.

8
00:00:30,352 --> 00:00:32,618
To allow pre-flight requests through,

9
00:00:32,618 --> 00:00:34,910
we need to configure a SecurityConfig class,

10
00:00:34,910 --> 00:00:37,117
simply a class that extends the

11
00:00:37,117 --> 00:00:42,231
WebSecurityConfigurationAdapter and override the configure method.

12
00:00:42,231 --> 00:00:43,484
Then with the builder,

13
00:00:43,484 --> 00:00:48,168
we add the CORS filter and configure all other requests must be

14
00:00:48,168 --> 00:00:53,613
authenticated and that we want a resource server with JWT enabled.

15
00:00:53,613 --> 00:00:53,928
Okay,

16
00:00:53,928 --> 00:00:56,843
Spring Security will now know how to handle

17
00:00:56,843 --> 00:00:59,697
cross-origin and pre-flight requests.

18
00:00:59,697 --> 00:01:00,008
However,

19
00:01:00,008 --> 00:01:04,995
we still have to instruct Spring what requests we want to enable for CORS.

20
00:01:04,995 --> 00:01:05,881
In our controller,

21
00:01:05,881 --> 00:01:11,469
we can do this at the method level using the CrossOrigin annotation.

22
00:01:11,469 --> 00:01:17,700
If we restart and try again, you can see the portfolio positions are displayed.

23
00:01:17,700 --> 00:01:20,339
If we look at the response from our resource server,

24
00:01:20,339 --> 00:01:26,588
Spring now included the Access-Control-Allow-Origin *.

25
00:01:26,588 --> 00:01:32,537
Basically, the * means it allows cross- domain requests from any origin.

26
00:01:32,537 --> 00:01:36,936
Now a lot of the time developers think great, that solved the error.

27
00:01:36,936 --> 00:01:39,534
But that's a bad way of thinking about CORS.

28
00:01:39,534 --> 00:01:40,656
It's not an error.

29
00:01:40,656 --> 00:01:44,709
It's another layer of defense to protect your users from malicious scripts.

30
00:01:44,709 --> 00:01:48,198
Hence, it's better to add our exact domain.

31
00:01:48,198 --> 00:01:51,110
Now the header also includes our domain,

32
00:01:51,110 --> 00:01:53,867
and the browser will ensure the origin matches.

33
00:01:53,867 --> 00:01:56,106
Otherwise, it will reject it.

34
00:01:56,106 --> 00:02:00,085
Additionally, you can configure it to specify what headers we support,

35
00:02:00,085 --> 00:02:04,186
what content type we support, and add multiple domains.

36
00:02:04,186 --> 00:02:07,298
So this gives you a lot of flexibility.

37
00:02:07,298 --> 00:02:09,297
Now all the other requests in the controller,

38
00:02:09,297 --> 00:02:12,338
like the POST, DELETE, are still blocked.

39
00:02:12,338 --> 00:02:16,667
We could add the annotation to each of the methods,

40
00:02:16,667 --> 00:02:18,689
or we could add it to the controller.

41
00:02:18,689 --> 00:02:23,158
Spring will then set the headers for all the below method types.

42
00:02:23,158 --> 00:02:28,308
You can also customize this annotation and specify what method you want,

43
00:02:28,308 --> 00:02:32,926
whether it's GET or PUT, but not DELETE,

44
00:02:32,926 --> 00:02:33,503
etc.

45
00:02:33,503 --> 00:02:36,234
Let's now check out the headers.

46
00:02:36,234 --> 00:02:38,327
This time let's add a position.

47
00:02:38,327 --> 00:02:40,415
You can see the browser sent a pre-flight OPTIONS

48
00:02:40,415 --> 00:02:43,013
request to the resource server,

49
00:02:43,013 --> 00:02:47,249
and Spring returned that POST is allowed and additionally that

50
00:02:47,249 --> 00:02:51,731
the authorization header is also allowed as our React app will

51
00:02:51,731 --> 00:02:59,000
be sending the token that way. The browser then made the actual POST request and received the response.

