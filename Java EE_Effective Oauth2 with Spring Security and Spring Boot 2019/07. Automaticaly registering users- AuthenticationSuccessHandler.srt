1
00:00:02,233 --> 00:00:06,174
After a user successfully logs in via OAuth for the first time,

2
00:00:06,174 --> 00:00:10,265
we need to register them with the site and create a portfolio.

3
00:00:10,265 --> 00:00:14,349
To do this, we can use an AuthenticationSuccess handler.

4
00:00:14,349 --> 00:00:16,521
Simply create a class the implements the

5
00:00:16,521 --> 00:00:21,009
AuthenticationSuccessHandler and overrides the onSuccess method,

6
00:00:21,009 --> 00:00:24,943
giving us access to the request, response,

7
00:00:24,943 --> 00:00:26,971
and authentication objects.

8
00:00:26,971 --> 00:00:29,253
Next, in our configuration adapter,

9
00:00:29,253 --> 00:00:32,676
we plug in the handler via the oauth2Login method.

10
00:00:32,676 --> 00:00:39,179
Now our class will be called each time the user successfully logs in via OAuth.

11
00:00:39,179 --> 00:00:42,356
We need to check if the user already has a portfolio.

12
00:00:42,356 --> 00:00:44,104
Now in the current version of the application,

13
00:00:44,104 --> 00:00:48,177
users are uniquely identified by the username they

14
00:00:48,177 --> 00:00:50,831
provided when registering with the site.

15
00:00:50,831 --> 00:00:54,569
Hence, we need a unique identifier to use as the username.

16
00:00:54,569 --> 00:00:55,177
For this,

17
00:00:55,177 --> 00:00:59,728
we can use the value returned by the getName method on the authentication

18
00:00:59,728 --> 00:01:04,607
object and look up if there is a portfolio for that user.

19
00:01:04,607 --> 00:01:09,090
What is returned by this method depends on how the user was authenticated.

20
00:01:09,090 --> 00:01:14,455
If they were authenticated via the form login, then it will be the username.

21
00:01:14,455 --> 00:01:18,750
If by OpenID Connect, it will be the claim subject.

22
00:01:18,750 --> 00:01:24,435
And for non-OpenID providers, it can vary depending on the custom implementation.

23
00:01:24,435 --> 00:01:27,794
In the case of Facebook and GitHub, it's the claim ID.

24
00:01:27,794 --> 00:01:31,320
This can be a bit confusing at first.

25
00:01:31,320 --> 00:01:31,982
Basically,

26
00:01:31,982 --> 00:01:34,862
the authentication class implements the Java

27
00:01:34,862 --> 00:01:37,876
authentication and authorization service,

28
00:01:37,876 --> 00:01:42,142
Principal interface, and overrides the getName method.

29
00:01:42,142 --> 00:01:45,080
In the AbstractAuthenticationToken class,

30
00:01:45,080 --> 00:01:48,387
you can see this class returns a value depending on

31
00:01:48,387 --> 00:01:55,000
what type the principle object is. To better understand this, let's take a step back.

