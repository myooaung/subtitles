WEBVTT
1
00:00:02.106 --> 00:00:05.769
Keycloak is great, but you still have to install it,

2
00:00:05.769 --> 00:00:09.247
maintain it, support it, keep it updated,

3
00:00:09.247 --> 00:00:11.067
and keep it secure.

4
00:00:11.067 --> 00:00:14.469
There is a third option where you can outsource your identity

5
00:00:14.469 --> 00:00:17.532
management completely to a third party.

6
00:00:17.532 --> 00:00:19.455
There are many out there to choose from.

7
00:00:19.455 --> 00:00:23.036
Two popular ones are Okta and Autho0.

8
00:00:23.036 --> 00:00:26.419
Their expert security teams look after everything for you.

9
00:00:26.419 --> 00:00:28.177
They support OpenID Connect, OAuth2,

10
00:00:28.177 --> 00:00:32.039
and they have a lot of guides to help you set up.

11
00:00:32.039 --> 00:00:34.040
So it's definitely worth considering.

12
00:00:34.040 --> 00:00:36.470
There is a course in the Pluralsight library,

13
00:00:36.470 --> 00:00:39.232
Build Your First Web App with Spring Boot and Angular,

14
00:00:39.232 --> 00:00:44.160
that has a module where it sets up and uses it as an identity provider.

15
00:00:44.160 --> 00:00:46.687
So check it out if you're interested.

16
00:00:46.687 --> 00:00:49.740
Let's recap what we have achieved so far.

17
00:00:49.740 --> 00:00:52.413
Our application is in a much better state.

18
00:00:52.413 --> 00:00:56.442
All the authentication functionality and code have been

19
00:00:56.442 --> 00:00:59.637
moved into the authorization server.

20
00:00:59.637 --> 00:01:06.094
Our application is now only an OpenID Connect client with one provider,

21
00:01:06.094 --> 00:01:06.861
Keycloak.

22
00:01:06.861 --> 00:01:09.984
Keycloak will now handle all the user registration,

23
00:01:09.984 --> 00:01:14.265
social sign-in, and the account management.

24
00:01:14.265 --> 00:01:18.983
And we can easily switch between any authentication provider.

25
00:01:18.983 --> 00:01:19.938
Now in the next module,

26
00:01:19.938 --> 00:01:28.000
we're going to take a look at how Spring Security OAuth2 supports public clients.

