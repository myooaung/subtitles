1
00:00:00,579 --> 00:00:05,288
The OAuth2UserService calls the userinfo endpoint to retrieve the

2
00:00:05,288 --> 00:00:09,286
user attributes and return the OAuth2User object.

3
00:00:09,286 --> 00:00:14,737
We want the OidcUserService to return a custom OAuth2User object that

4
00:00:14,737 --> 00:00:18,900
implements our crypto-authenticated principal interface.

5
00:00:18,900 --> 00:00:19,839
To do this,

6
00:00:19,839 --> 00:00:25,447
we can create a decorator to wrap the OAuth2 user and implement our interface.

7
00:00:25,447 --> 00:00:25,791
Next,

8
00:00:25,791 --> 00:00:28,382
we need a custom implementation of the

9
00:00:28,382 --> 00:00:31,945
OAuth2UserService to return our new OAuth2 user.

10
00:00:31,945 --> 00:00:36,368
We could implement the OAuth2UserService interface.

11
00:00:36,368 --> 00:00:42,897
But in this case, we will extend the OidcUserService and return our custom user.

12
00:00:42,897 --> 00:00:47,503
All we have to do now is to plug it into the userinfo endpoint in our

13
00:00:47,503 --> 00:00:53,000
configuration class using the OidcUserService builder method.

14
00:00:53,000 --> 00:00:53,634
That's it.

15
00:00:53,634 --> 00:00:59,319
Spring will now plug it into the OpenID Connect authentication provider.

16
00:00:59,319 --> 00:01:09,000
You could also do the same for a non- openIDConnect user service. We can now clean up our authentication success handler.

