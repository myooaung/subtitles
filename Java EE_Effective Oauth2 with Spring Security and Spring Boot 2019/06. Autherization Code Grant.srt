1
00:00:01,518 --> 00:00:07,334
Victoria wanted to encrypt her holdings with our demo app, Crypto Portfolio.

2
00:00:07,334 --> 00:00:11,186
Facebook and Crypto Portfolio have a trust relationship, i.e.

3
00:00:11,186 --> 00:00:16,163
Crypto Portfolio is a registered client with Facebook and

4
00:00:16,163 --> 00:00:20,502
has a unique client ID and client key.

5
00:00:20,502 --> 00:00:21,011
Hence,

6
00:00:21,011 --> 00:00:24,469
Victoria can authorize Crypto Portfolio to perform actions

7
00:00:24,469 --> 00:00:30,315
on her Facebook account on her behalf, such as access her profile data,

8
00:00:30,315 --> 00:00:33,997
post to her wall, or access her friends list.

9
00:00:33,997 --> 00:00:37,857
Crypto Portfolio will display the option you have probably seen before,

10
00:00:37,857 --> 00:00:39,925
like log in with Facebook.

11
00:00:39,925 --> 00:00:42,651
If Victoria clicks on it,

12
00:00:42,651 --> 00:00:46,573
Crypto Portfolio will send a redirect request to Facebook's

13
00:00:46,573 --> 00:00:49,267
authorization server via her browser.

14
00:00:49,267 --> 00:00:53,073
This begins the OAuth process with Facebook.

15
00:00:53,073 --> 00:00:56,285
First, Facebook will need to authenticate Victoria.

16
00:00:56,285 --> 00:01:00,113
If she is not already logged in with Facebook, she will need to do so.

17
00:01:00,113 --> 00:01:03,516
Once authenticated, Facebook's authorization server,

18
00:01:03,516 --> 00:01:07,206
using the client_id and scope, sees that the client,

19
00:01:07,206 --> 00:01:11,034
Crypto Portfolio, wants to access her profile and email.

20
00:01:11,034 --> 00:01:14,372
At this point, it will ask Victoria for her consent.

21
00:01:14,372 --> 00:01:17,520
You have probably seen these before clearly stating that Crypto

22
00:01:17,520 --> 00:01:21,047
Portfolio wants access to her profile and email.

23
00:01:21,047 --> 00:01:21,729
In this case,

24
00:01:21,729 --> 00:01:27,056
Facebook even gives the option for her to edit and remove certain scopes.

25
00:01:27,056 --> 00:01:28,166
If Victoria agrees,

26
00:01:28,166 --> 00:01:31,896
Facebook will then send a redirect response to the client

27
00:01:31,896 --> 00:01:37,610
via her browser with the URI specified by Crypto Portfolio

28
00:01:37,610 --> 00:01:41,328
and an authorization code.

29
00:01:41,328 --> 00:01:45,330
The authorization code can now be used by the client

30
00:01:45,330 --> 00:01:48,237
to exchange for the access token.

31
00:01:48,237 --> 00:01:50,914
The authorization code is a random number and

32
00:01:50,914 --> 00:01:52,703
effectively is a sender constraint token,

33
00:01:52,703 --> 00:01:57,723
meaning only the client can use it to get the access token as the

34
00:01:57,723 --> 00:02:01,915
resource server will also expect the client_id and secret be included

35
00:02:01,915 --> 00:02:05,573
with the request to retrieve the access token.

36
00:02:05,573 --> 00:02:09,587
Access tokens also have a very short expiry time.

37
00:02:09,587 --> 00:02:14,302
The reason for using an authorization code and not passing the

38
00:02:14,302 --> 00:02:18,429
access token directly is that transmission via the front channel

39
00:02:18,429 --> 00:02:21,121
between the authorization server, browser,

40
00:02:21,121 --> 00:02:25,089
and client cannot be completely relied upon as secure,

41
00:02:25,089 --> 00:02:26,969
especially the browser.

42
00:02:26,969 --> 00:02:28,415
It could have some malicious plugin.

43
00:02:28,415 --> 00:02:31,643
So sending the bearer access token would be risky.

44
00:02:31,643 --> 00:02:33,766
An authorization code, on the other hand,

45
00:02:33,766 --> 00:02:36,172
is useless without the client's secret,

46
00:02:36,172 --> 00:02:39,398
and that exchange happens via the back channel where the client

47
00:02:39,398 --> 00:02:42,580
goes directly to the authorization server.

48
00:02:42,580 --> 00:02:46,314
There is one other token that can be returned along with the access token,

49
00:02:46,314 --> 00:02:48,591
and that is the refresh token.

50
00:02:48,591 --> 00:02:51,306
Because access tokens are bearer tokens,

51
00:02:51,306 --> 00:02:54,219
they should have a very short expiry time.

52
00:02:54,219 --> 00:02:58,122
This is to limit the damage of an access token being leaked.

53
00:02:58,122 --> 00:02:58,797
However,

54
00:02:58,797 --> 00:03:02,599
often clients need the access token for longer and don't want to keep

55
00:03:02,599 --> 00:03:07,034
bothering the user to reconsent each time the token expires.

56
00:03:07,034 --> 00:03:10,021
This is where the refresh token comes in.

57
00:03:10,021 --> 00:03:13,172
It can be used by the client to get a new access token.

58
00:03:13,172 --> 00:03:17,846
Refresh tokens need to be stored securely on the client.

59
00:03:17,846 --> 00:03:18,664
If they are leaked,

60
00:03:18,664 --> 00:03:23,881
they can be used by a malicious party to keep re-requesting access tokens.

61
00:03:23,881 --> 00:03:28,938
Hence, ideally they should also have an expiry date and be single use,

62
00:03:28,938 --> 00:03:31,409
meaning each time a new access token is retrieved,

63
00:03:31,409 --> 00:03:34,940
a new refresh token is also issued.

64
00:03:34,940 --> 00:03:38,672
There are other grant types like client credentials for machine-to-machine

65
00:03:38,672 --> 00:03:42,205
authorization where the client is also a resource owner,

66
00:03:42,205 --> 00:03:43,773
is not a user,

67
00:03:43,773 --> 00:03:47,726
but an application or a service or implicit where you have

68
00:03:47,726 --> 00:03:50,701
a public client like a single-page application that cannot

69
00:03:50,701 --> 00:03:53,115
store the secret securely.

70
00:03:53,115 --> 00:03:56,243
We will also go over these in more detail in later modules.

71
00:03:56,243 --> 00:04:00,987
Now there is a lot of confusion around what OAuth actually is.

72
00:04:00,987 --> 00:04:03,535
The name adds to this ambiguity.

73
00:04:03,535 --> 00:04:07,169
Does it mean authentication or authorization?

74
00:04:07,169 --> 00:04:13,000
It's actually neither. We will discuss why in the next section.

