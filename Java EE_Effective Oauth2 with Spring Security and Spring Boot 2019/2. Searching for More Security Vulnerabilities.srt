1
00:00:01,590 --> 00:00:08,422
Okay, let's put on our hacker hoodie and head over to a dark, dingy basement.

2
00:00:08,422 --> 00:00:10,487
If you look at the application's architecture,

3
00:00:10,487 --> 00:00:16,835
the portfolio service uses the client credentials grant to request a new token

4
00:00:16,835 --> 00:00:22,568
from the authorization server to access the pricing service.

5
00:00:22,568 --> 00:00:24,414
Now we don't have access to the client's secret,

6
00:00:24,414 --> 00:00:29,330
so we can't get the token using the client credentials grant.

7
00:00:29,330 --> 00:00:35,386
And if we access the service without a token, as expected, we get a 401.

8
00:00:35,386 --> 00:00:37,214
But in our React application,

9
00:00:37,214 --> 00:00:39,995
it gets an access token directly from the

10
00:00:39,995 --> 00:00:44,114
authorization server using the implicit flow.

11
00:00:44,114 --> 00:00:47,547
So a hacker can register a portfolio,

12
00:00:47,547 --> 00:00:49,182
and if they inspect the network communication,

13
00:00:49,182 --> 00:00:55,120
you can see the access token received back from the authorization server.

14
00:00:55,120 --> 00:00:58,736
If they include this token in their request to the pricing service,

15
00:00:58,736 --> 00:01:01,212
they now get a response.

16
00:01:01,212 --> 00:01:06,503
Effectively, all the pricing service is doing is checking if the token is valid,

17
00:01:06,503 --> 00:01:09,301
if it's signed by the authorization server.

18
00:01:09,301 --> 00:01:13,428
So any token issued by our own Keycloak is valid.

19
00:01:13,428 --> 00:01:17,693
Next, our support service uses a username parameter.

20
00:01:17,693 --> 00:01:17,973
Hence,

21
00:01:17,973 --> 00:01:21,050
I can use the same token and just substitute anyone's

22
00:01:21,050 --> 00:01:26,139
username to get their support queries or even brute force

23
00:01:26,139 --> 00:01:29,876
the values with a valid query ID.

24
00:01:29,876 --> 00:01:33,520
Often users can include sensitive information about

25
00:01:33,520 --> 00:01:36,361
their account in support queries.

26
00:01:36,361 --> 00:01:39,298
So a hacker would definitely be interested in browsing these.

27
00:01:39,298 --> 00:01:45,876
If the hacker gets a valid ID, they can even post a support query.

28
00:01:45,876 --> 00:01:48,267
Now with this security vulnerability,

29
00:01:48,267 --> 00:01:50,923
you could even post back impersonating an admin,

30
00:01:50,923 --> 00:02:00,000
asking the user what their password is. Now in the remainder of this section, let's plug the security holes in.

