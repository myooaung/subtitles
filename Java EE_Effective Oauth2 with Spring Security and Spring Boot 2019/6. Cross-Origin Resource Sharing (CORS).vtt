WEBVTT
1
00:00:02.162 --> 00:00:06.182
Cross-origin resource sharing is how browsers and resource

2
00:00:06.182 --> 00:00:10.025
servers protect users from malicious JavaScript.

3
00:00:10.025 --> 00:00:12.267
Say you're browsing a website.

4
00:00:12.267 --> 00:00:16.481
That website uses a third party ad company and loads ads that

5
00:00:16.481 --> 00:00:20.728
originate from different domains on the same page.

6
00:00:20.728 --> 00:00:25.093
The origin of the app's JavaScript is different from the main page.

7
00:00:25.093 --> 00:00:27.061
And if it was some malicious piece of JavaScript,

8
00:00:27.061 --> 00:00:31.349
you wouldn't want it to start making cross-domain requests.

9
00:00:31.349 --> 00:00:33.481
It could be trying to send your personal data out,

10
00:00:33.481 --> 00:00:36.338
such as items stored on your local storage,

11
00:00:36.338 --> 00:00:39.234
which could include cookies, tokens, session IDs,

12
00:00:39.234 --> 00:00:43.138
or try to make POST requests to your site.

13
00:00:43.138 --> 00:00:48.226
And these days sites get resources from all over the place, like CDNs, etc.

14
00:00:48.226 --> 00:00:53.974
In the past, browsers simply blocked all agent requests that were cross-domain,

15
00:00:53.974 --> 00:00:58.855
meaning only same-as-origin requests were allowed to address this issue.

16
00:00:58.855 --> 00:01:02.968
However, since then, JavaScript applications are more popular now,

17
00:01:02.968 --> 00:01:07.098
and the CORSs standard was introduced to provide a way to

18
00:01:07.098 --> 00:01:08.831
perform cross-domain requests safely.

19
00:01:08.831 --> 00:01:14.568
CORS is triggered any time a script makes a request to a different domain,

20
00:01:14.568 --> 00:01:18.140
a different subdomain, a different port,

21
00:01:18.140 --> 00:01:19.834
or a different protocol.

22
00:01:19.834 --> 00:01:22.343
For simple cross-domain requests like a GET,

23
00:01:22.343 --> 00:01:26.295
the server will still make the request to the resource server.

24
00:01:26.295 --> 00:01:28.135
The response will be returned,

25
00:01:28.135 --> 00:01:30.976
but the browser can block it from reaching the JavaScript

26
00:01:30.976 --> 00:01:34.905
unless the resource server returned a specific header

27
00:01:34.905 --> 00:01:38.974
approving the cross-domain request.

28
00:01:38.974 --> 00:01:42.615
For non-simple requests like PUT, DELETE,

29
00:01:42.615 --> 00:01:45.055
the browser can't just simply let them hit the server

30
00:01:45.055 --> 00:01:50.162
as they could perform an action, like remove crypto from your portfolio.

31
00:01:50.162 --> 00:01:54.918
So in order to check with the resource server if the request is allowed,

32
00:01:54.918 --> 00:01:58.535
the browser will do a pre-flight request to ask the server if

33
00:01:58.535 --> 00:02:01.264
the request is supported for that domain.

34
00:02:01.264 --> 00:02:07.673
If the response from the server contains the headers and support the request,

35
00:02:07.673 --> 00:02:10.922
only then would the browser make the actual request.

36
00:02:10.922 --> 00:02:15.435
This is why we saw the OPTIONS request in the Network tab.

37
00:02:15.435 --> 00:02:16.399
Okay, so next,

38
00:02:16.399 --> 00:02:27.000
let's see how Spring Security deals with these requests by informing the browser that requests from our React app origin are approved.

