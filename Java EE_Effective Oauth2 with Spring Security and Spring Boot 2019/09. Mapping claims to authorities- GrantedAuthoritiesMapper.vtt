WEBVTT
1
00:00:02.184 --> 00:00:05.050
In Spring, there are roles and authorities.

2
00:00:05.050 --> 00:00:06.802
There is actually not much difference between them,

3
00:00:06.802 --> 00:00:10.912
and they are stored in the same granted authorities collection.

4
00:00:10.912 --> 00:00:15.027
What differentiates them is that roles are prefixed with ROLE_,

5
00:00:15.027 --> 00:00:18.014
and authorities are not prefixed.

6
00:00:18.014 --> 00:00:21.114
Granted authorities are used for authorization,

7
00:00:21.114 --> 00:00:24.385
like here where we specified that these two roles

8
00:00:24.385 --> 00:00:27.103
are required to access this URI.

9
00:00:27.103 --> 00:00:31.317
The hasRole would simply look up an authority that has

10
00:00:31.317 --> 00:00:34.931
the value role_user or role_admin.

11
00:00:34.931 --> 00:00:39.200
Whereas hasAuthority would look up the exact match.

12
00:00:39.200 --> 00:00:43.184
Conceptually, roles are used for coarse-grain authorization.

13
00:00:43.184 --> 00:00:45.597
You might have a user role so if an authenticated

14
00:00:45.597 --> 00:00:47.755
principal is assigned this role,

15
00:00:47.755 --> 00:00:51.142
they have comment permissions to access the site that,

16
00:00:51.142 --> 00:00:53.218
for example, a user would.

17
00:00:53.218 --> 00:00:56.052
Whereas authorities can be more finer-grained.

18
00:00:56.052 --> 00:00:58.911
So you might have some users with additional authorities to

19
00:00:58.911 --> 00:01:02.152
access premium content or special areas.

20
00:01:02.152 --> 00:01:09.340
Now by default, Spring will set one role of user for authenticated principals.

21
00:01:09.340 --> 00:01:12.756
But you may need to map some additional claims returned by

22
00:01:12.756 --> 00:01:15.948
the userinfo endpoint into authorities.

23
00:01:15.948 --> 00:01:16.746
And to do this,

24
00:01:16.746 --> 00:01:21.808
we can use the GrantedAuthoritiesMapper by creating a class that implements

25
00:01:21.808 --> 00:01:26.093
this interface and overriding the MapAuthorities method.

26
00:01:26.093 --> 00:01:28.473
Now at first it can be a little confusing.

27
00:01:28.473 --> 00:01:30.879
Why would the method have an authorities collection

28
00:01:30.879 --> 00:01:33.428
object to map to authorities?

29
00:01:33.428 --> 00:01:35.873
Aren't we mapping claims to authorities?

30
00:01:35.873 --> 00:01:36.370
Yes.

31
00:01:36.370 --> 00:01:40.441
The GrantedAuthorities mapper is called after the OAuth2 user

32
00:01:40.441 --> 00:01:43.529
object is retrieved by the user service.

33
00:01:43.529 --> 00:01:44.076
By default,

34
00:01:44.076 --> 00:01:47.674
the user service will add the role user and also

35
00:01:47.674 --> 00:01:50.121
scopes to the granted authorities.

36
00:01:50.121 --> 00:01:53.645
The mapper allows you to adjust the authorities after the fact.

37
00:01:53.645 --> 00:01:56.416
Now because the authentication process is not yet complete,

38
00:01:56.416 --> 00:02:00.407
there won't be an authentication object in the security context.

39
00:02:00.407 --> 00:02:02.686
And to give you access to the token and claims,

40
00:02:02.686 --> 00:02:08.650
the user service adds either an OidcUserAuthority or an

41
00:02:08.650 --> 00:02:17.000
OAuth2UserAuthority to the granted authorities, which you can then retrieve and use to map claims to authorities.

