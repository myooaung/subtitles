WEBVTT
1
00:00:00.000 --> 00:00:05.695
If we recall back to the authorization code grants we

2
00:00:05.695 --> 00:00:10.505
used in our server-side web app, in the first part of the flow,

3
00:00:10.505 --> 00:00:14.674
the access code was retrieved by going through the user's browser,

4
00:00:14.674 --> 00:00:16.210
the front channel.

5
00:00:16.210 --> 00:00:18.981
Once the client received the access code,

6
00:00:18.981 --> 00:00:22.887
it exchanged it for the access token by going via the back channel,

7
00:00:22.887 --> 00:00:26.025
directly to the authorization server.

8
00:00:26.025 --> 00:00:31.241
The reason that worked is that the client can provide a secret to

9
00:00:31.241 --> 00:00:34.568
authenticate itself with the authorization server.

10
00:00:34.568 --> 00:00:37.018
And the reason for going via the back channel is that

11
00:00:37.018 --> 00:00:39.399
it is more simpler and more secure.

12
00:00:39.399 --> 00:00:43.777
It's just a direct call to the server via HTTP over

13
00:00:43.777 --> 00:00:46.345
TLS so it can't be tampered with.

14
00:00:46.345 --> 00:00:51.272
We can trust it because it came directly from the authorization server.

15
00:00:51.272 --> 00:00:52.936
Whereas via the front channel,

16
00:00:52.936 --> 00:00:56.542
we are actually using the user's address bar to transmit data

17
00:00:56.542 --> 00:01:00.283
between the client and the authorization server,

18
00:01:00.283 --> 00:01:03.240
which makes things more complicated and is not as

19
00:01:03.240 --> 00:01:05.703
secure as the back channel request.

20
00:01:05.703 --> 00:01:08.867
It's a little bit like the game of Chinese Whispers.

21
00:01:08.867 --> 00:01:12.629
Some malicious software on the user's browser or machine could tamper

22
00:01:12.629 --> 00:01:16.911
with the URL so you cannot completely trust it.

23
00:01:16.911 --> 00:01:20.421
The redirect is also more susceptible to man-in-the-middle attacks,

24
00:01:20.421 --> 00:01:24.381
and URLs are written to the browser history.

25
00:01:24.381 --> 00:01:27.531
However, there are some benefits to the front channel.

26
00:01:27.531 --> 00:01:32.115
And the reason OAuth uses the front channel for retrieving the code

27
00:01:32.115 --> 00:01:34.544
is that it is useless without the client secret,

28
00:01:34.544 --> 00:01:40.213
and it allows the user to be involved, to give consent.

29
00:01:40.213 --> 00:01:45.120
Functional requests also don't require the recipient to have an IP address,

30
00:01:45.120 --> 00:01:49.558
which works well with browsers and native web applications.

31
00:01:49.558 --> 00:01:51.486
Unfortunately, for public clients,

32
00:01:51.486 --> 00:01:55.176
making a back channel request is extremely challenging.

33
00:01:55.176 --> 00:01:58.252
Firstly, it is a cross-origin request.

34
00:01:58.252 --> 00:02:01.280
And until recently, browsers blocked these for JavaScript.

35
00:02:01.280 --> 00:02:04.985
But the main issue is storing the secret.

36
00:02:04.985 --> 00:02:09.829
Anyone can download the code for a JavaScript application and just view it.

37
00:02:09.829 --> 00:02:14.518
some malicious JavaScript could try to steal the token or the secret.

38
00:02:14.518 --> 00:02:17.747
And in the native app, it's the same issues.

39
00:02:17.747 --> 00:02:22.391
To work around these limitations, the implicit flow was created.

40
00:02:22.391 --> 00:02:26.000
It essentially is the same as the authorization code grant,

41
00:02:26.000 --> 00:02:28.460
but without the back channel request.

42
00:02:28.460 --> 00:02:31.791
Rather than returning the code back after the user consents,

43
00:02:31.791 --> 00:02:36.651
the access token is returned via the front channel to the public app.

44
00:02:36.651 --> 00:02:39.326
It's still a viable option,

45
00:02:39.326 --> 00:02:42.668
just not as secure as the authorization code grant due

46
00:02:42.668 --> 00:02:45.017
to going over the front channel.

47
00:02:45.017 --> 00:02:45.838
But to date,

48
00:02:45.838 --> 00:02:50.766
a lot of organizations still use it by ensuring they use correct content

49
00:02:50.766 --> 00:02:54.371
security policies and don't use questionable CDNs.

50
00:02:54.371 --> 00:02:58.444
Having said that, as of April this year,

51
00:02:58.444 --> 00:03:01.495
the OAuth working group no longer recommends the

52
00:03:01.495 --> 00:03:03.833
implicit flow for public clients,

53
00:03:03.833 --> 00:03:07.593
mainly because cross-site origin resource sharing is now

54
00:03:07.593 --> 00:03:10.627
universally adopted by most browsers.

55
00:03:10.627 --> 00:03:14.731
So the authorization code flow with proof of key exchange is

56
00:03:14.731 --> 00:03:17.284
now a viable method and is recommended.

57
00:03:17.284 --> 00:03:21.875
I won't go into the details of this as it could be a course in

58
00:03:21.875 --> 00:03:24.787
itself and is a little out of scope for the course.

59
00:03:24.787 --> 00:03:28.553
Either way, once you get the access token in your public client,

60
00:03:28.553 --> 00:03:30.064
you need to store it somewhere,

61
00:03:30.064 --> 00:03:34.445
which is another challenge for single page applications.

62
00:03:34.445 --> 00:03:37.154
Your options are either in the session,

63
00:03:37.154 --> 00:03:41.527
in the cookie where you will have to deal with cross-site request forgery,

64
00:03:41.527 --> 00:03:44.664
local storage where it will live forever unless your

65
00:03:44.664 --> 00:03:46.700
application specifically removes it,

66
00:03:46.700 --> 00:03:51.174
hence short expiration times is advisable in that case,

67
00:03:51.174 --> 00:03:52.763
and also session storage,

68
00:03:52.763 --> 00:03:56.009
which lives as long as your browser session as long as

69
00:03:56.009 --> 00:03:58.883
the tab in your browser is open.

70
00:03:58.883 --> 00:04:01.816
Additionally, it's not shareable between tabs,

71
00:04:01.816 --> 00:04:04.940
so it's slightly more secure than local storage.

72
00:04:04.940 --> 00:04:06.808
From the perspective of Spring Security however,

73
00:04:06.808 --> 00:04:11.248
your main concern is dealing with a request hitting your controller

74
00:04:11.248 --> 00:04:14.561
where the authentication took place externally.

75
00:04:14.561 --> 00:04:14.968
However,

76
00:04:14.968 --> 00:04:19.025
it's still worth understanding the challenges we just described so that

77
00:04:19.025 --> 00:04:23.000
you can add additional checks and scrutiny server-side.

78
00:04:23.000 --> 00:04:25.896
Now, for the remainder of this module,

79
00:04:25.896 --> 00:04:28.784
we will be working with a React version of the portfolio.

80
00:04:28.784 --> 00:04:37.000
And for the record, my specialty is not front-end development, so apologies beforehand for my JavaScript coding.

