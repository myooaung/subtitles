WEBVTT
1
00:00:02.644 --> 00:00:07.282
In the context of security, you have a subject, which is an entity.

2
00:00:07.282 --> 00:00:13.580
It can be a user like Victoria, a machine, another service, or a piece of code.

3
00:00:13.580 --> 00:00:15.958
In OAuth, the subject is the resource owner,

4
00:00:15.958 --> 00:00:18.610
hence why in OpenID Connect,

5
00:00:18.610 --> 00:00:22.048
the identity token has the subject property that

6
00:00:22.048 --> 00:00:24.696
uniquely identifies the resource owner.

7
00:00:24.696 --> 00:00:27.341
A resource owner might have the following attributes,

8
00:00:27.341 --> 00:00:31.010
username, email, social security number,

9
00:00:31.010 --> 00:00:32.279
name, address.

10
00:00:32.279 --> 00:00:35.162
Each of these or a combination could uniquely

11
00:00:35.162 --> 00:00:38.996
identify the user and our principals.

12
00:00:38.996 --> 00:00:41.243
Principals are subsets of a subject's attributes,

13
00:00:41.243 --> 00:00:45.772
and a subject can have many different types of principals.

14
00:00:45.772 --> 00:00:48.494
So for our subject, which is the resource owner,

15
00:00:48.494 --> 00:00:52.527
we can now access their principal via the getPrincipal method,

16
00:00:52.527 --> 00:00:56.346
which is the identity claim they approved for the client

17
00:00:56.346 --> 00:00:59.264
to retrieve from the identity server.

18
00:00:59.264 --> 00:01:02.365
If we now put a breakpoint and sign in with Google,

19
00:01:02.365 --> 00:01:08.652
you can see the authentication object is of type OAuth2AuthenticationToken.

20
00:01:08.652 --> 00:01:09.871
It's authenticated.

21
00:01:09.871 --> 00:01:11.700
It's for Google.

22
00:01:11.700 --> 00:01:15.212
The principal is the default OpenID Connect user as

23
00:01:15.212 --> 00:01:18.170
Google is an OpenID Connect provider.

24
00:01:18.170 --> 00:01:20.767
And you have access to the attributes you would

25
00:01:20.767 --> 00:01:23.873
expect returned via OpenID Connect.

26
00:01:23.873 --> 00:01:25.503
There is one authority.

27
00:01:25.503 --> 00:01:29.956
By default, Spring will add the user role for authenticated principals.

28
00:01:29.956 --> 00:01:33.529
We will discuss how to customize authorities later.

29
00:01:33.529 --> 00:01:34.577
NameAttributeKey,

30
00:01:34.577 --> 00:01:37.045
which gives the name of the claim used for the

31
00:01:37.045 --> 00:01:40.247
username as expected for OpenID Connect,

32
00:01:40.247 --> 00:01:41.753
it's the subject.

33
00:01:41.753 --> 00:01:44.403
And you can also access the ID token.

34
00:01:44.403 --> 00:01:46.202
If we do the same for Facebook,

35
00:01:46.202 --> 00:01:50.602
the principal is of type DefaultOauth2User as Facebook

36
00:01:50.602 --> 00:01:53.350
is not an OpenID Connect provider.

37
00:01:53.350 --> 00:01:59.344
NameAttributeKey is id, which is Facebook's unique identifier for a user.

38
00:01:59.344 --> 00:02:02.645
And we have a few attributes, email and name.

39
00:02:02.645 --> 00:02:08.029
As expected, there is no ID token as Facebook is not an OpenID Connect provider.

40
00:02:08.029 --> 00:02:10.751
Now the attributes you get back will vary between each

41
00:02:10.751 --> 00:02:14.136
provider and will depend on a number of factors.

42
00:02:14.136 --> 00:02:17.886
For Facebook, the user's public profile is configurable.

43
00:02:17.886 --> 00:02:20.441
They can decide what they want to expose.

44
00:02:20.441 --> 00:02:23.148
Hence, you get a subset of the following back.

45
00:02:23.148 --> 00:02:27.054
In my case, I only allow my name to be viewed.

46
00:02:27.054 --> 00:02:30.561
By default, Spring also requests the email scope.

47
00:02:30.561 --> 00:02:35.751
Facebook Connect also offers other scopes, say you wanted the user's location.

48
00:02:35.751 --> 00:02:40.696
Now in our configuration file, we can override the scope property for Facebook,

49
00:02:40.696 --> 00:02:44.881
add public_profile, email user_location.

50
00:02:44.881 --> 00:02:48.425
Facebook will now automatically detect the new scope and

51
00:02:48.425 --> 00:02:50.785
ask the resource owner for consent.

52
00:02:50.785 --> 00:02:53.421
You can see a warning here that some of the permissions below

53
00:02:53.421 --> 00:02:56.886
have not been approved for use by Facebook.

54
00:02:56.886 --> 00:02:59.632
So even if the user was to consent,

55
00:02:59.632 --> 00:03:02.808
Facebook will still not return their location as the client

56
00:03:02.808 --> 00:03:06.284
application is not approved by Facebook to handle anything

57
00:03:06.284 --> 00:03:09.173
other than public profile and email.

58
00:03:09.173 --> 00:03:12.392
We would need to request permission from Facebook to handle this type

59
00:03:12.392 --> 00:03:15.921
of user info and go through an approval process.

60
00:03:15.921 --> 00:03:17.126
That's understandable.

61
00:03:17.126 --> 00:03:18.498
Due to the recent scrutiny,

62
00:03:18.498 --> 00:03:22.333
social media providers are being a lot more restrictive now as you

63
00:03:22.333 --> 00:03:25.648
can imagine with all the recent public spotlight.

64
00:03:25.648 --> 00:03:29.324
The token would be of type OAuth2AuthenticationToken.

65
00:03:29.324 --> 00:03:31.974
To register a new user, we need the firstname,

66
00:03:31.974 --> 00:03:35.942
lastname, and email and a unique identifier.

67
00:03:35.942 --> 00:03:39.356
We can use the getAuthorizedClientRegistrationId to determine

68
00:03:39.356 --> 00:03:42.319
which provider the user is signing in with.

69
00:03:42.319 --> 00:03:46.019
If it is Facebook, we retrieve the email and name,

70
00:03:46.019 --> 00:03:49.272
which can be split to get a first and last name.

71
00:03:49.272 --> 00:03:51.695
For Google, since it's an OpenID Connect provider,

72
00:03:51.695 --> 00:03:55.914
the standards in OpenID Connect make this a lot simpler.

73
00:03:55.914 --> 00:03:58.872
We can check if it is an OpenID Connect provider by checking

74
00:03:58.872 --> 00:04:03.359
the type of the principal is DefaultOidcUser.

75
00:04:03.359 --> 00:04:07.791
Then we can use the standard OpenID Connect names for email,

76
00:04:07.791 --> 00:04:09.762
given_name, and family_name.

77
00:04:09.762 --> 00:04:14.203
We can then register the new user and create them a portfolio.

78
00:04:14.203 --> 00:04:17.535
Now the cool thing about the default OpenID Connect user object is

79
00:04:17.535 --> 00:04:20.525
that it provides the standard claims as accesses,

80
00:04:20.525 --> 00:04:22.202
which is quite neat.

81
00:04:22.202 --> 00:04:25.081
You can now log in with Facebook and Google.

82
00:04:25.081 --> 00:04:28.144
You can see the application displays the logged in the

83
00:04:28.144 --> 00:04:29.958
username in the top-right corner.

84
00:04:29.958 --> 00:04:32.872
With OAuth providers, this can generally be anything.

85
00:04:32.872 --> 00:04:36.736
For Facebook and Google, it's a long, unique identification number.

86
00:04:36.736 --> 00:04:39.114
So you might want to change that to display something more meaningful,

87
00:04:39.114 --> 00:04:40.926
like the name of the user.

88
00:04:40.926 --> 00:04:43.544
I'll show you how to do that later.

89
00:04:43.544 --> 00:04:44.533
As mentioned previously,

90
00:04:44.533 --> 00:04:54.000
Spring will add the default user role into the granted authorities. Next, we'll look at how to customize that and add some additional roles.

