1
00:00:02,105 --> 00:00:05,431
In addition to being a resource service,

2
00:00:05,431 --> 00:00:10,376
the portfolio service will now also be a client as it will

3
00:00:10,376 --> 00:00:14,486
source a new token using the client credentials grant to

4
00:00:14,486 --> 00:00:16,433
access the pricing service.

5
00:00:16,433 --> 00:00:21,182
Hence, in the POM file of the portfolio service,

6
00:00:21,182 --> 00:00:25,540
we add the OAuth2ClientStarter dependency.

7
00:00:25,540 --> 00:00:30,328
Then in the configuration file, we add our client details.

8
00:00:30,328 --> 00:00:34,768
Add portfolio-service as the registration ID,

9
00:00:34,768 --> 00:00:36,805
client-id and secret,

10
00:00:36,805 --> 00:00:40,602
which we can get from the Credentials tab from the

11
00:00:40,602 --> 00:00:46,065
Keycloak admin console for that client.

12
00:00:46,065 --> 00:00:49,503
The grant type will be client_credentials.

13
00:00:49,503 --> 00:00:50,759
And for the provider,

14
00:00:50,759 --> 00:01:03,811
we will provide the token URI and add the provider to our client.

15
00:01:03,811 --> 00:01:06,092
When we configure our web client,

16
00:01:06,092 --> 00:01:11,489
we use the ServletOAuth2AuthorizedClientExchangeFilter Function again,

17
00:01:11,489 --> 00:01:16,562
passing in the ClientRegistrationRepository and the

18
00:01:16,562 --> 00:01:21,771
OAuth2AuthorizedClientRepository and adding it to the WebClient builder

19
00:01:21,771 --> 00:01:27,133
before building an instance of the WebClient that is exposed as a bean.

20
00:01:27,133 --> 00:01:27,689
Additionally,

21
00:01:27,689 --> 00:01:31,080
because this is the only client registered with the portfolio service,

22
00:01:31,080 --> 00:01:36,016
we can set it as the default by adding the registration ID.

23
00:01:36,016 --> 00:01:38,835
Basically, any time this web client is now used,

24
00:01:38,835 --> 00:01:43,369
the ExchangeFilterFunction will look up the

25
00:01:43,369 --> 00:01:48,057
OAuth2AuthorizedClientRepository for an authorized client with that ID.

26
00:01:48,057 --> 00:01:49,071
If one doesn't exist,

27
00:01:49,071 --> 00:01:53,045
it will look up the ClientRegistrationRepository to retrieve

28
00:01:53,045 --> 00:01:56,504
that client's information that we added via the properties

29
00:01:56,504 --> 00:02:01,143
file and contact the provider, which in this case is Keycloak,

30
00:02:01,143 --> 00:02:05,895
to retrieve an access token using the client credentials grant flow.

31
00:02:05,895 --> 00:02:07,457
Once the token is retrieved,

32
00:02:07,457 --> 00:02:12,291
it will be added to the authorized client repository for future access,

33
00:02:12,291 --> 00:02:18,344
and the token will be added to all outgoing requests via the WebClient.

34
00:02:18,344 --> 00:02:23,355
We can now use the WebClient to make the request to the pricing service.

35
00:02:23,355 --> 00:02:26,962
It just looks like any ordinary request with no requirement

36
00:02:26,962 --> 00:02:29,945
to add to header or attribute property.

37
00:02:29,945 --> 00:02:32,939
The ExchangeFilterFunction will now take care of the

38
00:02:32,939 --> 00:02:35,272
OAuth authorization side of things.

39
00:02:35,272 --> 00:02:39,001
One thing to note is that as of the current version of

40
00:02:39,001 --> 00:02:43,114
Spring Security 5.1 .6 that I'm using,

41
00:02:43,114 --> 00:02:47,062
once the OAuth2ExchangeFilterFunction authorizes the client,

42
00:02:47,062 --> 00:02:51,167
it will not refresh the token if it expires.

43
00:02:51,167 --> 00:02:53,945
The client credentials grant doesn't support the refresh

44
00:02:53,945 --> 00:02:57,055
token as that would not make sense.

45
00:02:57,055 --> 00:02:58,410
However, ideally,

46
00:02:58,410 --> 00:03:03,018
the ExchangeFilterFunction should check the expiry of the token before using it.

47
00:03:03,018 --> 00:03:03,968
And if it's expired,

48
00:03:03,968 --> 00:03:09,051
it should simply rerequest a new token using the client credentials grants.

49
00:03:09,051 --> 00:03:14,548
However, in Spring Security 5.1 versions, that doesn't happen.

50
00:03:14,548 --> 00:03:17,866
So when the token expires, it will keep using it in the requests,

51
00:03:17,866 --> 00:03:21,421
and you will eventually experience 401 exceptions as the

52
00:03:21,421 --> 00:03:24,699
pricing service will just reject the token.

53
00:03:24,699 --> 00:03:27,608
The Spring team have said that they will fix this in 5.2.

54
00:03:27,608 --> 00:03:33,083
So, if you're in the future and you're using 5.2 and higher,

55
00:03:33,083 --> 00:03:38,057
the ExchangeFilterFunction will check the expiry and get a new one for you.

56
00:03:38,057 --> 00:03:39,908
If you're using 5.1 like me,

57
00:03:39,908 --> 00:03:44,422
then you can either request Keycloak to have a longer expiry time.

58
00:03:44,422 --> 00:03:47,324
You can do that in the advanced settings.

59
00:03:47,324 --> 00:03:51,224
But that breaks the OAuth2 best practices.

60
00:03:51,224 --> 00:03:54,719
Tokens should have a short expiry time in case they

61
00:03:54,719 --> 00:04:02,000
are leaked to minimize any damage. Next, we will look at a workaround for this.

