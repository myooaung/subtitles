WEBVTT
1
00:00:02.101 --> 00:00:07.385
As you can see, it's important to use a defense in depth security strategy.

2
00:00:07.385 --> 00:00:11.441
It's like airport security check-in points.

3
00:00:11.441 --> 00:00:14.058
First, it's at the desk.

4
00:00:14.058 --> 00:00:17.756
They check your passport, issue you a ticket.

5
00:00:17.756 --> 00:00:21.927
Then you use the ticket to get through the first gate followed by

6
00:00:21.927 --> 00:00:26.189
customs security checks and passport checks.

7
00:00:26.189 --> 00:00:27.802
Once in the airport,

8
00:00:27.802 --> 00:00:31.016
other checks before you get on the plane to make sure you're

9
00:00:31.016 --> 00:00:35.175
boarding the correct flight and then inside the plane to make sure

10
00:00:35.175 --> 00:00:37.969
you're sitting at your designated sea.

11
00:00:37.969 --> 00:00:41.007
And even once you exit the flight,

12
00:00:41.007 --> 00:00:44.249
there are checks at the other end before you leave the airport,

13
00:00:44.249 --> 00:00:46.512
the same thing in our application.

14
00:00:46.512 --> 00:00:52.399
We use an authorization server with OAuth2 and OpenID Connect to

15
00:00:52.399 --> 00:00:57.543
authenticate the users and clients and then issue them a token.

16
00:00:57.543 --> 00:00:59.275
When the token is used,

17
00:00:59.275 --> 00:01:04.631
we validate the token is not fraudulent by checking the signature,

18
00:01:04.631 --> 00:01:07.824
expiry to ensure it's still valid,

19
00:01:07.824 --> 00:01:13.460
the issuer to ensure it was issued by the correct authorization server entity,

20
00:01:13.460 --> 00:01:17.919
the audience to ensure it is intended for the resource server.

21
00:01:17.919 --> 00:01:19.741
Once in the resource server,

22
00:01:19.741 --> 00:01:25.196
the scopes to ensure the client has received consent from the resource server,

23
00:01:25.196 --> 00:01:30.292
the roles to ensure that the resource owner is entitled to give the consent.

24
00:01:30.292 --> 00:01:36.573
And Spring provides the tools for us to perform these checks at multiple layers,

25
00:01:36.573 --> 00:01:39.274
at the URI, method,

26
00:01:39.274 --> 00:01:43.961
and event entity level on the way in and on the way

27
00:01:43.961 --> 00:01:46.795
out just like airport security.

28
00:01:46.795 --> 00:01:51.517
OAuth2 support in Spring Security is really building momentum.

29
00:01:51.517 --> 00:01:55.797
In version 5.2, they are rolling out opaque tokens,

30
00:01:55.797 --> 00:02:00.695
support for the JWT bearer grants followed by the token exchange.

31
00:02:00.695 --> 00:02:02.800
So I will be providing updates.

32
00:02:02.800 --> 00:02:06.583
Hence, subscribe if you're interested and want to keep up to date.

33
00:02:06.583 --> 00:02:12.015
And feel free to message me in the discussion if you have any questions.

34
00:02:12.015 --> 00:02:16.106
Now that concludes the module and the course.

35
00:02:16.106 --> 00:02:20.186
If you have stuck with the course from the beginning, well done.

36
00:02:20.186 --> 00:02:23.334
You will now have OAuth2, OpenID Connect,

37
00:02:23.334 --> 00:02:27.277
and JWT in your security skills toolbox.

38
00:02:27.277 --> 00:02:28.630
And from my experience,

39
00:02:28.630 --> 00:02:32.719
you're way ahead of most developers who for some reason

40
00:02:32.719 --> 00:02:37.078
find security a chore and avoid learning about it to the

41
00:02:37.078 --> 00:02:38.941
application and user's peril.

42
00:02:38.941 --> 00:02:42.271
Introduce a bug in the new feature,

43
00:02:42.271 --> 00:02:46.994
most likely you'll have to explain it to your tech lead or your manager.

44
00:02:46.994 --> 00:02:49.765
But introduce a security vulnerability,

45
00:02:49.765 --> 00:02:56.000
and you could be explaining it to very senior management, compliance, or even legal.

