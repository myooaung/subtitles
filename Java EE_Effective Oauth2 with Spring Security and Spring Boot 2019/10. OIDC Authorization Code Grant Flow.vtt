WEBVTT
1
00:00:02.185 --> 00:00:05.679
OpenID Connect is built on top of OAuth2.

2
00:00:05.679 --> 00:00:10.105
So we have the same actors, the client, the resource server,

3
00:00:10.105 --> 00:00:13.901
the authorization server, and the resource owner.

4
00:00:13.901 --> 00:00:15.579
Let's go through a quick example.

5
00:00:15.579 --> 00:00:20.437
Now we're going to switch to Google as they are an OpenID Connect provider.

6
00:00:20.437 --> 00:00:25.153
Facebook uses their own implementation of OAuth2 called Facebook Connect.

7
00:00:25.153 --> 00:00:28.050
It's very similar to OpenID Connect.

8
00:00:28.050 --> 00:00:28.576
Fortunately,

9
00:00:28.576 --> 00:00:31.266
Spring Security actually support's Facebook's

10
00:00:31.266 --> 00:00:33.438
implementation right out of the box.

11
00:00:33.438 --> 00:00:35.945
Now if we quickly go through the flow,

12
00:00:35.945 --> 00:00:38.601
after Victoria selects Sign in with Google,

13
00:00:38.601 --> 00:00:43.817
the main difference is the redirect from the clients will now contain the

14
00:00:43.817 --> 00:00:48.913
OpenID scope followed by all the optional or custom scopes.

15
00:00:48.913 --> 00:00:53.880
The authorization server will now know to use the OpenID Connect flow.

16
00:00:53.880 --> 00:00:57.032
If the user consents, the client gets an authorization code,

17
00:00:57.032 --> 00:01:01.449
which he then uses to exchange for the access token and

18
00:01:01.449 --> 00:01:05.716
additionally now the ID token and optionally,

19
00:01:05.716 --> 00:01:08.163
of course, the refresh token.

20
00:01:08.163 --> 00:01:12.496
The ID token is for the client to use to verify the authentication while the

21
00:01:12.496 --> 00:01:16.878
access token can be used against the UserInfo endpoint to retrieve any

22
00:01:16.878 --> 00:01:20.532
additional information or claims about the resource owner.

23
00:01:20.532 --> 00:01:26.143
And the refresh token can be used to request a new access token once it expires.

24
00:01:26.143 --> 00:01:29.612
Now the above flow we described is the authorization code grant.

25
00:01:29.612 --> 00:01:34.433
In addition to this, there is the implicit flow and hybrid flow.

26
00:01:34.433 --> 00:01:37.453
We will go into more details around these flows in the

27
00:01:37.453 --> 00:01:41.012
upcoming modules when we discuss public clients.

28
00:01:41.012 --> 00:01:41.310
Next,

29
00:01:41.310 --> 00:01:50.000
we will talk about the radical change the Spring team have taken to support JWT, OAuth2, and OpenID Connect in Spring.

