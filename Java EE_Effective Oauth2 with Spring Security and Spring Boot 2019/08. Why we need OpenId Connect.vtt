WEBVTT
1
00:00:02.027 --> 00:00:04.642
Why do we need OpenID Connect?

2
00:00:04.642 --> 00:00:07.436
Well, because OAuth is not a federation,

3
00:00:07.436 --> 00:00:10.555
authentication, or identity protocol,

4
00:00:10.555 --> 00:00:14.272
yet it seems to be one of its most popular use cases.

5
00:00:14.272 --> 00:00:16.958
Firstly, let's define identity.

6
00:00:16.958 --> 00:00:20.663
Digital identity is a set of attributes related to an entity.

7
00:00:20.663 --> 00:00:27.018
An entity can be a human, organization, device, a service.

8
00:00:27.018 --> 00:00:30.578
An entity can have multiple digital identities,

9
00:00:30.578 --> 00:00:35.483
which are differentiated by the attributes associated with each.

10
00:00:35.483 --> 00:00:37.242
Take, for example, Victoria.

11
00:00:37.242 --> 00:00:40.783
Her identity at work as an employee is different to

12
00:00:40.783 --> 00:00:44.894
her identity at her fitness center, as a customer,

13
00:00:44.894 --> 00:00:47.139
or to her friends.

14
00:00:47.139 --> 00:00:49.901
Hence, depending on the application she is using,

15
00:00:49.901 --> 00:00:53.524
she will have different identities and restrict what

16
00:00:53.524 --> 00:00:55.686
attributes are available to them.

17
00:00:55.686 --> 00:01:00.827
Now in OAuth, the access token is intended for the resource server,

18
00:01:00.827 --> 00:01:02.749
not the client.

19
00:01:02.749 --> 00:01:05.562
However, because often the tokens are by value,

20
00:01:05.562 --> 00:01:10.024
they can be read by anyone and often contain identity

21
00:01:10.024 --> 00:01:12.754
information intended for the resource server,

22
00:01:12.754 --> 00:01:16.761
like a username to identify the resource owner.

23
00:01:16.761 --> 00:01:21.457
And developers on the client side often notice these details on the access

24
00:01:21.457 --> 00:01:26.365
token and use them to identify the user for authentication.

25
00:01:26.365 --> 00:01:28.595
The issue with this approach is that firstly,

26
00:01:28.595 --> 00:01:31.492
the resource owner might not have consented these

27
00:01:31.492 --> 00:01:34.741
details to be used by the clients.

28
00:01:34.741 --> 00:01:38.228
If the provider made a change to the access token format,

29
00:01:38.228 --> 00:01:40.808
it would break the client.

30
00:01:40.808 --> 00:01:45.290
I've seen this happen, and often the client's dev team would complain when,

31
00:01:45.290 --> 00:01:46.927
in fact, it's their fault.

32
00:01:46.927 --> 00:01:51.234
OAuth clearly states that the access token is intended for the resource server,

33
00:01:51.234 --> 00:01:52.247
not the client.

34
00:01:52.247 --> 00:01:55.281
They should simply pass the token on to the resource

35
00:01:55.281 --> 00:01:58.235
server to access the resource.

36
00:01:58.235 --> 00:02:03.129
Or the client will use the access token to retrieve the user's profile info

37
00:02:03.129 --> 00:02:07.424
and authenticate the bearer of the token as the user.

38
00:02:07.424 --> 00:02:10.466
However, OAuth is a delegation protocol.

39
00:02:10.466 --> 00:02:14.969
If Victoria gives her car keys to valet supervision to park her car

40
00:02:14.969 --> 00:02:18.442
who then delegates the task to another valet,

41
00:02:18.442 --> 00:02:22.991
having the keys in their possession doesn't make the valet Victoria.

42
00:02:22.991 --> 00:02:25.518
An access token can be passed around.

43
00:02:25.518 --> 00:02:28.426
So you can't assume that the bearer is the user.

44
00:02:28.426 --> 00:02:31.433
A malicious client could persuade a user to sign in to

45
00:02:31.433 --> 00:02:33.395
their application with a provider,

46
00:02:33.395 --> 00:02:39.815
then use the token against another client who also uses the same provider,

47
00:02:39.815 --> 00:02:42.745
effectively impersonating the user.

48
00:02:42.745 --> 00:02:46.012
Since the token was valid, the client would authenticate them.

49
00:02:46.012 --> 00:02:50.972
This exploit impacted a popular social media platform.

50
00:02:50.972 --> 00:02:54.891
Many providers solve these problems by building on top of OAuth.

51
00:02:54.891 --> 00:02:55.123
However,

52
00:02:55.123 --> 00:02:57.733
this means that you have to know each provider's

53
00:02:57.733 --> 00:03:01.466
implementation to integrate them with your application.

54
00:03:01.466 --> 00:03:02.818
To resolve this,

55
00:03:02.818 --> 00:03:06.775
OpenID Connect was created to consolidate all these lessons

56
00:03:06.775 --> 00:03:16.000
learned and best practices into a single standard to add authentication and identity to OAuth2.

