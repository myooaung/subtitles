WEBVTT
1
00:00:03.313 --> 00:00:06.575
RestTemplate is also quite straightforward.

2
00:00:06.575 --> 00:00:12.383
When you configure your RestTemplate, you can add a ClientHttpRequestInterceptor.

3
00:00:12.383 --> 00:00:15.801
What this does is it intercepts all the requests before being

4
00:00:15.801 --> 00:00:19.919
sent out by the RestTemplate and gives you the chance to modify

5
00:00:19.919 --> 00:00:23.509
them before and after they're sent out.

6
00:00:23.509 --> 00:00:27.664
If we implement this interceptor, we get access to the request,

7
00:00:27.664 --> 00:00:29.915
body, and execution objects.

8
00:00:29.915 --> 00:00:33.306
Hence, we can get the access token from the authentication object,

9
00:00:33.306 --> 00:00:39.014
which is of type JwtAuthenticationToken and add it to the request header,

10
00:00:39.014 --> 00:00:41.520
then call the execute method,

11
00:00:41.520 --> 00:00:45.900
which will result in every request being sent out by this instance of the

12
00:00:45.900 --> 00:00:50.219
RestTemplate having the access token in the header.

13
00:00:50.219 --> 00:00:53.239
We just have to plug this interceptor into the RestTemplate.

14
00:00:53.239 --> 00:00:56.205
There is nothing more to do.

15
00:00:56.205 --> 00:00:56.534
However,

16
00:00:56.534 --> 00:01:02.735
there is no check to see if the token is about to expire and to refresh it.

17
00:01:02.735 --> 00:01:03.731
So bear that in mind.

18
00:01:03.731 --> 00:01:07.490
You might need to put that logic in there.

19
00:01:07.490 --> 00:01:09.584
We will discuss another version of the RestTemplate,

20
00:01:09.584 --> 00:01:19.000
the OAuth2 RestTemplate in the Client Credentials via RestTemplate section coming up, which can handle this for you.

