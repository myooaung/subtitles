1
00:00:01,918 --> 00:00:06,148
The key takeaways from this module is that for authorization,

2
00:00:06,148 --> 00:00:11,042
it is not adequate to solely rely on the validity of the access token

3
00:00:11,042 --> 00:00:16,659
and whether it is expired or from the correct issuer.

4
00:00:16,659 --> 00:00:20,187
Distributed applications are as strong as their weakest link.

5
00:00:20,187 --> 00:00:25,150
Any service could become a backdoor into the application, so be vigilant.

6
00:00:25,150 --> 00:00:27,953
Now in addition to the authorization endpoint,

7
00:00:27,953 --> 00:00:32,977
there is also a token endpoint where you can add a custom access

8
00:00:32,977 --> 00:00:37,998
token response client to customize the outbound request to retrieve

9
00:00:37,998 --> 00:00:42,441
the access token from the token endpoint.

10
00:00:42,441 --> 00:00:47,782
Use the audience attribute to ensure the token is used in the proper context.

11
00:00:47,782 --> 00:00:51,428
Although the RFC doesn't provide much restrictions on what

12
00:00:51,428 --> 00:00:54,474
the audience field should be used for,

13
00:00:54,474 --> 00:00:59,006
it's important not to get too granular with your audience validation.

14
00:00:59,006 --> 00:01:02,469
It should be for who can receive and process the token,

15
00:01:02,469 --> 00:01:06,523
not what resource or actions the bearer of the token can

16
00:01:06,523 --> 00:01:09,055
perform on behalf of the resource owner.

17
00:01:09,055 --> 00:01:11,156
That's what scopes are for.

18
00:01:11,156 --> 00:01:16,741
As you have seen, you need to rely on multiple layers of defense.

19
00:01:16,741 --> 00:01:17,690
In the next module,

20
00:01:17,690 --> 00:01:25,000
we will look at more finer-grained authorization using scopes, roles, and authorities.

