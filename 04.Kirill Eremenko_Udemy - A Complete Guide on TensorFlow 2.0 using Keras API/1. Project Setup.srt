1
00:00:00,610 --> 00:00:03,760
Hello everyone and welcome to this python tutorial.

2
00:00:03,790 --> 00:00:10,300
In this video we are going to prepare everything for the fast API project by the end of this section.

3
00:00:10,300 --> 00:00:17,220
We are going to have a fully functional plastic API that receives an image from a user and gives back

4
00:00:17,220 --> 00:00:26,130
a prediction to them and all of that over the Internet and not only that while building this API we

5
00:00:26,150 --> 00:00:33,210
are going to learn how to put a train model into production using the tensor flow to point 0 and flask

6
00:00:33,250 --> 00:00:35,160
Python framework.

7
00:00:35,250 --> 00:00:42,180
If you haven't work with the plots before don't worry we are going to cover just enough to get you up

8
00:00:42,180 --> 00:00:46,510
and running so you can build your own custom flask API.

9
00:00:46,650 --> 00:00:53,710
With or without machine learning Okay let's discuss a few prerequisites for this project.

10
00:00:53,880 --> 00:01:02,040
As you can see this is the route for the flask API project and I already have three files prepared for

11
00:01:02,040 --> 00:01:09,810
you in section three of the course your work with artificial neural networks and train your own for

12
00:01:09,810 --> 00:01:16,730
fashion and energy data set at the end of the section you've saved your own model and got two different

13
00:01:16,730 --> 00:01:17,840
files.

14
00:01:17,840 --> 00:01:24,980
I renamed them to fashion model flask daughter Jason and fashion model flask about age 5.

15
00:01:25,190 --> 00:01:32,210
Both of these files are used to load the pre train model and use it to make predictions in production

16
00:01:33,310 --> 00:01:41,340
the first file is project helpers which is just an empty python file that file will be used in this

17
00:01:41,340 --> 00:01:50,590
lesson in this course we want create a front end for the API we will focus on creating a backend that

18
00:01:50,590 --> 00:01:58,000
uses deep learning to help users in some way and to demonstrate the fully functional API we need to

19
00:01:58,000 --> 00:02:02,380
create a new folder and save a few images to it.

20
00:02:02,710 --> 00:02:06,620
Well that's created and call it uploads.

21
00:02:06,700 --> 00:02:14,640
The next step for us is to save a few images from the test set to our newly created uploads folder.

22
00:02:14,650 --> 00:02:22,210
This will demonstrate a case where a user has already uploaded a few images to our server at the end

23
00:02:22,210 --> 00:02:22,930
of this section.

24
00:02:22,930 --> 00:02:27,560
We are going to use those images to test the whole API.

25
00:02:27,650 --> 00:02:30,000
Let's get them more excited right now.

26
00:02:30,350 --> 00:02:35,840
At the end of this section we want to use Python at all to make those predictions.

27
00:02:35,840 --> 00:02:42,890
Instead we will demonstrate the whole API use case by using bossman software to demonstrate sending

28
00:02:42,890 --> 00:02:48,030
data over the Internet and getting a prediction back to us.

29
00:02:48,130 --> 00:02:55,770
Let's start with a code for this with you in this section we will use spider IDC as we discussed.

30
00:02:55,920 --> 00:03:00,180
This is the project helpers python file which is just empty for now.

31
00:03:01,710 --> 00:03:07,800
But before we start with the code make sure that you selected the root folder of the project in your

32
00:03:07,980 --> 00:03:10,360
idea of choice.

33
00:03:10,390 --> 00:03:17,140
The first step is to import all dependencies for this lesson the data set of choice for this section

34
00:03:17,230 --> 00:03:18,970
is fashion and the data set.

35
00:03:19,840 --> 00:03:26,290
So the first thing to do is to import the data set itself from tens of low dot carriers.

36
00:03:26,420 --> 00:03:33,340
Though the data sets import fashion analyzed this is the only tens of flow related thing that we have

37
00:03:33,340 --> 00:03:35,420
to import for this video.

38
00:03:35,710 --> 00:03:40,160
The next import is from library called side by import.

39
00:03:40,300 --> 00:03:44,700
I am safe and as you may already assumed this I am safe.

40
00:03:44,710 --> 00:03:50,010
Function is here to save an image to a local uploads folder.

41
00:03:50,080 --> 00:03:54,030
Lets select these two lines and execute them by using control.

42
00:03:54,040 --> 00:03:59,920
Plus enter before we try to save an image to our local disk.

43
00:03:59,930 --> 00:04:08,240
Specifically to our uploads folder we need to import the data set itself the data set load function

44
00:04:08,300 --> 00:04:15,920
returns to outputs 1 for training and other one for testing each of these parts can be split up into

45
00:04:15,920 --> 00:04:22,570
two different parts features and targets so let's write X train.

46
00:04:22,570 --> 00:04:23,070
Come on.

47
00:04:23,070 --> 00:04:32,510
Why train in brackets comma x test come out y test in other brackets and that is all equal to fashion

48
00:04:32,510 --> 00:04:34,810
then is that low the data.

49
00:04:34,810 --> 00:04:42,250
This function will try to find data set for us downloads it and store it into these four variables.

50
00:04:42,250 --> 00:04:45,700
Select this line of code and executed.

51
00:04:45,700 --> 00:04:54,100
As you can see it created four new variables in memory X train y train x test and Y test.

52
00:04:54,130 --> 00:05:01,390
Now it's time to use this IMC function to save a few images from the test set to our uploads folder

53
00:05:02,130 --> 00:05:03,550
to completed this task.

54
00:05:03,550 --> 00:05:09,960
We are going to use a simple for loop and iterate through the test set right.

55
00:05:10,010 --> 00:05:18,160
For I in range of 5 this 5 represents how many images we want to save.

56
00:05:18,350 --> 00:05:25,180
I chosen 5 but you can select whatever number you want and inside of these for loop.

57
00:05:25,280 --> 00:05:26,810
Let's call the aim save.

58
00:05:26,810 --> 00:05:35,750
Function let's inspect arguments of these function by using control plus I the first one is the name

59
00:05:35,750 --> 00:05:44,440
of newly created image and the second argument is the array or the image itself let's provide a path

60
00:05:44,530 --> 00:05:46,150
for our images.

61
00:05:46,420 --> 00:05:47,020
Right.

62
00:05:47,050 --> 00:05:57,390
Names equal to then specify the folder uploads slash and curly brackets dot TMG with a simple byte string

63
00:05:57,390 --> 00:06:05,600
format we can change these curly brackets into the index if we didn't perform this step each time we

64
00:06:05,600 --> 00:06:13,100
save an image to our local file it will override the previous image with the same name and we wouldn't

65
00:06:13,100 --> 00:06:23,460
end up having five different images but only one so write the format and provide eye to it the next

66
00:06:23,460 --> 00:06:27,340
argument is the right and that is the image itself.

67
00:06:28,210 --> 00:06:36,060
In our case it is X test of I and this is all what we have to do to save images locally.

68
00:06:37,020 --> 00:06:44,450
Select these two lines of code and executed if we want to take a look at our uploads folder it will

69
00:06:44,450 --> 00:06:48,870
have five different images and that's it for now.

70
00:06:49,020 --> 00:06:52,860
If you have any questions or comments please post them in the comments section.

71
00:06:53,700 --> 00:06:55,650
Otherwise assume the next tutorial.
