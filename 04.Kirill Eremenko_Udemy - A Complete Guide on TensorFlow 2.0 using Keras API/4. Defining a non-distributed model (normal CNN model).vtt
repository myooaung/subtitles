WEBVTT
1
00:00:00.760 --> 00:00:04.110
Hello everyone and welcome to this python tutorial.

2
00:00:04.150 --> 00:00:10.480
In this video we are going to start building our models will make the same model twice.

3
00:00:10.480 --> 00:00:17.380
And to save our time we'll build it now and later on we'll just copied the first model we will create

4
00:00:17.410 --> 00:00:19.540
is going to be the normal model.

5
00:00:19.780 --> 00:00:23.760
The same will be created in the previous sections as well.

6
00:00:23.820 --> 00:00:26.970
It is only here for comparison reasons.

7
00:00:26.970 --> 00:00:29.000
Let's call it model normal.

8
00:00:29.070 --> 00:00:36.360
And as always we are going to use these dot carers those models and then we are going to use sequential

9
00:00:36.360 --> 00:00:45.230
to define the model itself execute the cell and now we can add our first layer to it since this is going

10
00:00:45.230 --> 00:00:47.560
to be our fully connected network.

11
00:00:47.630 --> 00:00:56.570
The first layer is going to be the dense one or fully connected one so use to have DOT cameras dot layers

12
00:00:57.120 --> 00:01:03.800
and we are going to use dance because we want fully connected layer the first layer is going to have

13
00:01:04.130 --> 00:01:13.480
128 units and the activation function here is going to be really then we are going to define input shape

14
00:01:13.840 --> 00:01:21.450
considering this is our first layer and it is going to have seven hundred and eighty four inputs because

15
00:01:21.450 --> 00:01:27.130
that is the size of our image and the first layer is defined.

16
00:01:27.210 --> 00:01:31.110
Now it's time to add the second layer to our model.

17
00:01:31.110 --> 00:01:36.620
It is going to be the drop out one to prevent over fitting as much as possible.

18
00:01:36.680 --> 00:01:39.650
We are going to set the rate to zero point two.

19
00:01:39.660 --> 00:01:46.350
So that means that each time we are going to drop 20 percent of neurons in the first layer executed.

20
00:01:46.470 --> 00:01:52.170
Now we are ready to define our output layer which is going to be the dance layer as well.

21
00:01:52.170 --> 00:02:01.800
So we will say these dot carers dot layers dot dance because it is our output layer the number of neurons

22
00:02:01.830 --> 00:02:08.490
is going to be the same as the number of classes and in our data set we have 10 different classes and

23
00:02:08.520 --> 00:02:13.490
activation function here is going to be solved Max execute a cell.

24
00:02:13.720 --> 00:02:17.260
And our model is successfully created.

25
00:02:17.390 --> 00:02:20.140
The only thing left to do is to compile it.

26
00:02:20.450 --> 00:02:27.770
So type model normal dot compile will have to provide a few arguments to the function.

27
00:02:27.930 --> 00:02:36.240
So first one is our optimizer and just right optimizer equals two and say Adam the next argument is

28
00:02:36.240 --> 00:02:42.660
our loss which is going to be as always when we have multiple classes sparse categorical cross entropy

29
00:02:43.690 --> 00:02:50.380
and the last thing to add is our metrics the metrics are going to contain sparse categorical accuracy

30
00:02:50.920 --> 00:02:59.280
to make it easier just copy the loss and instead of cross entropy type accuracy execute a cell in our

31
00:02:59.280 --> 00:03:03.880
model is successfully created and that's our normal model.

32
00:03:04.170 --> 00:03:09.690
If you have any questions or comments please buzz them in the comments section otherwise I'll assume

33
00:03:09.690 --> 00:03:10.530
the next tutorial.
