WEBVTT

00:01.620 --> 00:06.680
So I'll already set up my template here to have the confirm button, it didn't add any logic though

00:06.720 --> 00:12.620
but I want to start with the is the user allowed to visit a certain route task first.

00:12.690 --> 00:17.600
Now we have three different places where we can set up is a user are allowed to enter a route check

00:17.640 --> 00:21.210
and one place where we may set up the is he allowed to leave check.

00:21.210 --> 00:26.310
Now I want to start with is he allowed to enter check and the first place to set this up is here in

00:26.320 --> 00:30.130
the main.js file, here where we set up the router,

00:30.390 --> 00:36.570
we can use our router which we configured here before we assigned it to our instance to access it and set

00:36.570 --> 00:39.320
up the beforeEach method here.

00:39.570 --> 00:46.290
Now beforeEach means execute this before each routing action or before every routing action which may

00:46.290 --> 00:52.800
occur, here this expects to get the function as an argument where we have the route we want to navigate to. the

00:52.800 --> 00:58.500
route where we are coming from and next which is a callback we can execute to let the request continue

00:58.500 --> 00:59.870
its journey.

00:59.880 --> 01:05.640
So basically this beforeEach function, this argument we're passing here gets executed on each routing

01:05.640 --> 01:06.290
action,

01:06.450 --> 01:13.770
so you may use this for only very generic checks and you should be aware that it gets executed all the

01:13.770 --> 01:14.530
time,

01:14.820 --> 01:24.010
so I can simply log global beforeEach so that we can see that here or that we reached this point. Important,

01:24.150 --> 01:28.520
you have to execute next to allow the routing action to continue,

01:28.560 --> 01:34.110
if you don't do that, it's assumed that it's not allowed to continue and it will exit and will not go

01:34.110 --> 01:36.920
to the route or to the page you want it to go to.

01:37.230 --> 01:43.920
Alternatively you could pass next false to abort the current operation and stay on the page you were

01:43.920 --> 01:53.310
at or you can also pass either a path or the same object you already know from router links and from

01:53.310 --> 01:55.630
this router push method, 

01:55.680 --> 01:59.910
so an object where you define the path you want to navigate to,

02:00.090 --> 02:03.120
so you can also issue a redirection here with that.

02:03.120 --> 02:05.670
So these are the three options, pass nothing

02:05.700 --> 02:08.610
it continues its journey and will finally load

02:08.610 --> 02:16.380
the page at some point of time, pass false it will abort, pass either a path or an object defining

02:16.380 --> 02:19.380
that path including params and so on to redirect,
 
02:19.380 --> 02:20.580
these are the three options.

02:20.610 --> 02:24.070
So here I will just let the request continue its journey

02:24.300 --> 02:31.660
but what we can already see, if I open the console and I load this, we see global beforeEach was executed

02:31.670 --> 02:32.170
there,

02:32.160 --> 02:34.950
if I click go to home, we see here it was executed,

02:34.950 --> 02:37.200
if I click user, here it was executed,

02:37.230 --> 02:40.530
if I click on a single user, it was executed and so on.

02:40.530 --> 02:46.860
So this really gets executed on each routing action, global beforeEach set up here directly on the

02:46.860 --> 02:51.080
global router which we passed to a root vue instance.

02:51.500 --> 02:56.750
Now this is something you might use all the time, sometimes you only want to protect certain routes,

02:56.760 --> 02:59.120
that is the more common use case I'd say.

02:59.370 --> 03:08.610
So let's say we want to protect our user detail route here, this one, then we can also add the before enter

03:08.730 --> 03:14.640
property here which now also is a function which you could also store in another file and simply import but I'll

03:14.640 --> 03:16.000
write it here

03:16.020 --> 03:22.460
and this has the same arguments as the other function had in this global function, to, from and next.

03:22.590 --> 03:24.860
And then it works exactly in the same way, 

03:24.930 --> 03:27.610
here I say inside route

03:27.630 --> 03:31.120
set up to see where this was executed,

03:31.260 --> 03:37.440
and then again we can call next like this to let it continue with false to abort or with a different

03:37.440 --> 03:41.580
path to navigate to that path, just like on the global function

03:41.580 --> 03:45.190
but now directly limited to this route.

03:45.190 --> 03:51.810
And we can see this, if I clear my console, load here we see global beforeEach and inside route set up

03:51.820 --> 03:53.990
because I am on the user detail route

03:54.210 --> 03:57.850
but if I click on go to home, we only see global beforeEach.

03:58.080 --> 03:59.820
The same is true for the user page,

03:59.850 --> 04:04.580
only if I select the individual user and hence go to the user detail page

04:04.740 --> 04:06.980
so I see inside route set up.

04:07.020 --> 04:10.360
So this is the next step of granularity, here

04:10.380 --> 04:12.660
we check it on the route level.

04:12.720 --> 04:18.630
Now the last place where you can implement it is directly in the component you're navigating to, so

04:18.630 --> 04:25.650
user detail in this case. You would for this go to your route instance and there, you get

04:25.670 --> 04:27.240
or your component I should say

04:27.270 --> 04:29.970
and there you get two new methods available,

04:29.970 --> 04:32.070
one is for the other navigation guard

04:32.070 --> 04:33.470
we're going to have a look at next

04:33.510 --> 04:39.840
and the other one is for this we used before in two different places, beforeRouteEnter would be the

04:39.840 --> 04:42.670
name of the method you want to execute here,

04:42.690 --> 04:46.690
this is like a lifecycle Hook and now implemented by the vue router

04:46.830 --> 04:48.640
and here again with to, from,

04:48.720 --> 04:49.840
and next.

04:50.220 --> 04:55.650
And if we call next, we finally load this component and if we don't call it, we can still abort, we

04:55.650 --> 04:56.540
can still navigate away,

04:56.550 --> 04:58.070
that component doesn't get loaded

04:58.110 --> 05:04.910
and this is key to understand and I want to really highlight this. As long as you don't call next here,

05:05.200 --> 05:07.570
this component is not loaded,

05:07.570 --> 05:12.880
this also means that in this lifecycle hook, you can't access your vue instance, you can't access your

05:12.880 --> 05:13.490
data

05:13.600 --> 05:17.700
so this link to access this property here

05:17.810 --> 05:24.350
will not to work because this component hasn't been created yet. This is kind of a special case here,

05:24.410 --> 05:31.110
we're in this file but this object hasn't been fully initialized so we may not access it here

05:31.250 --> 05:38.630
and that's key to keep in mind. If you absolutely need to access it, you can pass a callback to the next

05:38.630 --> 05:39.340
function here,

05:39.350 --> 05:46.310
this is a special case where you pass your vue model, so this component instance to a function and

05:46.310 --> 05:49.060
in there, you may now access link like this.

05:49.190 --> 05:56.000
So this is now a place where you do have access to your component because since it's inside the next

05:56.000 --> 05:58.340
function, it's simply a callback,

05:58.340 --> 05:59.660
we pass it as an argument here

05:59.660 --> 06:03.400
keep that in mind, which is executed once this component has been loaded

06:03.500 --> 06:08.010
but this also means that at this point of time, the component has been created.

06:08.150 --> 06:14.000
So if you really want to check if this component should be created before creating it, well then you have to do

06:14.000 --> 06:16.020
it outside of the next callback

06:16.100 --> 06:20.480
and there, you don't have access to the component data which I think makes sense because it isn't there

06:20.570 --> 06:21.440
yet.

06:21.440 --> 06:25.340
So here we could simply check if the user is authenticated,

06:25.340 --> 06:32.380
so for example access some other files, some global service where you store this or whatever you like,

06:32.450 --> 06:34.340
check if the user is authenticated,

06:34.340 --> 06:39.900
so here if true to always allow navigation and if that is the case, I execute next

06:40.100 --> 06:46.400
and if this is not the case, well then we may simply call next false to abort, now which will not get

06:46.400 --> 06:48.380
executed here because it's always true

06:48.380 --> 06:54.620
but you could check whatever you wanted to check here. Actually, let's show this, if it's false and I

06:54.640 --> 06:57.950
reload this page, you see it doesn't get loaded,

06:58.100 --> 06:59.460
I'm getting stuck.

06:59.630 --> 07:06.950
So if I'm on my user page and click on user one, I'm not getting there because I failed to pass this

07:06.950 --> 07:09.170
test here which is always false,

07:09.170 --> 07:17.390
so let me switch to true and if we now reload this page, now it works again because now we are allowed

07:17.390 --> 07:18.400
to continue.

07:18.590 --> 07:22.500
So this is how we can check if a user is allowed to visit a certain page,

07:22.520 --> 07:27.710
we can check it in three different places depending on which access we need and how granular it should

07:27.710 --> 07:28.580
be.

07:28.580 --> 07:34.280
Important to know or to keep in mind, in all three places you don't have access to the component you're

07:34.280 --> 07:35.390
passing it to,

07:35.510 --> 07:38.630
you only have access to the route you are coming from to

07:38.750 --> 07:44.150
and the route you are going to and then you have this callback function which you need to execute to either

07:44.150 --> 07:48.710
abort or redirect or let the request continue its journey.
