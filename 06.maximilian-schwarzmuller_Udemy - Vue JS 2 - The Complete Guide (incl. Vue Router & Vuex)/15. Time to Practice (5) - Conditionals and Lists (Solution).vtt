WEBVTT

00:01.720 --> 00:05.240
Let's start with exercise number one and hook up a button,

00:05.240 --> 00:11.520
this button here to toggle the displaying of the two paragraphs. This should be rather to be straightforward,

00:11.570 --> 00:17.130
I'm going to set up my data property here and I will create a new property, choose any name you want,

00:17.150 --> 00:24.100
I'll name it isShown and I'll initially set it to true. Next

00:24.140 --> 00:32.810
I will add v-if to this first paragraph and set it equal to isShown, on the second paragraph,

00:32.810 --> 00:36.800
I'll set up v-else and that is only one way of doing it,

00:36.800 --> 00:42.420
you could also say v-if not isShown, that would be the same

00:42.580 --> 00:45.820
but let's go with v-else here and on the button,

00:45.820 --> 00:54.680
well I will set up a click listener with the at syntax here and I will simply switch isShown to what it

00:54.730 --> 00:55.930
currently not is,

00:55.930 --> 00:59.690
so I will reverse it from true to false and vice versa.

01:00.130 --> 01:02.710
If I now hit control enter and hit this button,

01:02.770 --> 01:06.900
you see I can toggle between the two paragraphs, exactly what I wanted.

01:06.970 --> 01:11.210
The exercise also says to solve this with v-show

01:11.500 --> 01:17.620
and if you want to do it with v-show, I will basically copy the two paragraphs to show both,

01:17.980 --> 01:24.990
I can simply say v-show but as I mentioned in the exercise video, v-else does not work for isShown

01:25.090 --> 01:28.730
which is why we don't see or me now a second time. Instead

01:28.900 --> 01:35.500
here, we will have to fall back to the other solution of simply reversing the condition and saying ok only

01:35.500 --> 01:38.290
show this if isShown as false.

01:38.290 --> 01:40.880
Now you can see toggling works for both

01:41.050 --> 01:49.680
but of course if we inspect this, you see or if we shrink this down a bit, you see that here, we still

01:49.680 --> 01:57.330
see the you either see me paragraph but the display is set to none whereas directly below the button, where

01:57.330 --> 01:59.780
we would theoretically have such a paragraph,

01:59.790 --> 02:05.220
we don't see it because this first paragraph uses v-if and therefore is completely removed from the

02:05.220 --> 02:05.770
dom.

02:05.820 --> 02:11.050
That is the key difference to takeaway here as was also explained in the lectures throughout this module.

02:14.080 --> 02:18.330
In exercise number two, we want to loop through any array of our choice,

02:18.340 --> 02:25.720
so I will create a new array and name it array here in the data property and I will simply store some

02:26.230 --> 02:30.010
names here, so I'll store my name because I like it,

02:30.190 --> 02:38.320
so you should like your name, I guess and some other names which are totally up to you. Then here

02:38.350 --> 02:39.780
in this unordered list,

02:39.820 --> 02:41.270
we want to output them all

02:41.290 --> 02:46.560
and of course the best way, the stupidest way to be honest would be to simply

02:46.610 --> 02:48.160
well write Max

02:48.190 --> 02:49.730
and then a new list,

02:49.740 --> 02:55.270
we don't want to hardcode it of course, we want to use v-for here to loop through this array,

02:55.630 --> 03:01.870
then the syntax as you learned it is element, this name is totally up to you, choose whatever name you like,

03:02.200 --> 03:09.850
in array with array referring to this array property of our vue instance and we can then output element

03:09.850 --> 03:10.750
here.

03:11.350 --> 03:17.740
Now we not only shall print the element which would work if you hit control enter but also the index,

03:17.950 --> 03:18.700
to do this,

03:18.700 --> 03:26.380
I enclose the element in parentheses and add a second kind of argument here which I'll call index, again

03:26.390 --> 03:29.450
also this name is up to you, only the order here matters,

03:29.470 --> 03:32.540
first one is the element, second one is the index

03:32.620 --> 03:37.780
and I can then output, let's say separated by a dash index here as well

03:37.780 --> 03:41.620
and after hitting control enter, we see the index next to the name,

03:41.800 --> 03:45.690
so this was exercise number two. In exercise number three,

03:45.700 --> 03:49.680
we want to loop through this object and print all the key value pairs here,

03:49.690 --> 03:51.890
we also want to print the index.

03:52.210 --> 03:54.960
Well first let's create the object, I'll name it

03:55.000 --> 04:01.470
my object here, it obviously is an object and I can simply copy and paste this,

04:01.480 --> 04:03.410
so let's do it like this

04:03.520 --> 04:07.770
and now split this up over multiple lines to make it a bit easier to read, I guess.

04:07.840 --> 04:10.910
So this is the object through which I want to loop,

04:10.960 --> 04:14.220
I can also use v-for for this,

04:14.230 --> 04:16.830
so let's set it up on this list item

04:17.170 --> 04:23.260
but now I can output the value of each key by saying value in my object,

04:23.410 --> 04:28.710
vuejs automatically detects that this is an object and I could output value.

04:28.840 --> 04:29.980
If I hit control enter

04:29.990 --> 04:35.410
now, we see this list down there but we are not only interested in the value, we also want to get the

04:35.410 --> 04:37.690
key name and the index.

04:37.750 --> 04:45.120
So time to enclose the value in parentheses and then here, we would have value still as the first argument,

04:45.160 --> 04:51.560
the key name as the second one, again all these names are totally up to you, only the order matters

04:51.640 --> 04:52.560
and then the index,

04:52.570 --> 04:53.010
I'll name it 

04:53.030 --> 04:58.940
I here to mix things up as the third argument. I can then output value,

05:01.720 --> 05:07.890
key name and the index in the end here, like this.

05:08.160 --> 05:13.890
If I now hit control enter, we see Lord of the Rings which has is the title has the index of 0, the name which

05:13.890 --> 05:16.750
is the author, has an index of 1 and so on.

05:16.800 --> 05:21.940
This is how we can loop through an object, again vuejs is automatically detecting whether it's an array or

05:21.940 --> 05:28.590
object which influences which values or which data we can extract from it, all the elements in the index

05:28.590 --> 05:34.650
in the case of an array and value, key name and index in the case of an object and then how we can use

05:34.650 --> 05:37.690
this information to output it like we do here.

05:37.920 --> 05:39.560
Time for the last exercise,

05:39.630 --> 05:49.890
printing this object here and then also printing this data array in this object. That will be a bit more

05:49.890 --> 05:56.460
complex since we get this nested array but not every field in this object is a nested array so we can't

05:56.490 --> 06:00.770
blindly loop through all the properties of this object

06:00.780 --> 06:07.590
but let's create the object first. I'll name it test data, like that and also split that up over multiple

06:07.590 --> 06:08.260
lines

06:09.830 --> 06:12.190
and now we want to create a loop.

06:12.320 --> 06:22.250
Well first I can create my list item here with v-for and I can output the values of this object, so value

06:22.250 --> 06:24.090
in test data

06:24.770 --> 06:31.940
and that would then be like that, if I hit control enter, we see test object and this array being printed

06:31.970 --> 06:33.300
as a string here.

06:33.680 --> 06:37.300
That's nice but I want to loop through that array,

06:37.490 --> 06:45.170
so I will actually split this up over multiple lines because here, I want to conditionally output the

06:45.170 --> 06:45.680
values

06:45.710 --> 06:53.900
if there is a need for it, I'll add some divs here and on these divs, I want to loop through the elements

06:54.170 --> 06:55.430
in value.

06:55.620 --> 07:01.290
Value now of course refers to the individual value of each key value pair in my object,

07:01.310 --> 07:03.140
so this is this reference

07:03.410 --> 07:10.640
and this can be an array, like in the case of data but it could also not be one in the case of name.

07:10.640 --> 07:16.570
Turns out the name is a string which actually can be treated as an array as it is a chain of characters

07:16.850 --> 07:21.360
but to make it really clear that this will not always work,

07:21.410 --> 07:27.370
I'll also add an ID which is a number which clearly is not an array, no matter how you look at it

07:27.440 --> 07:31.610
but I also don't want to treat name as an array,

07:31.640 --> 07:33.690
how do we do that?

07:33.830 --> 07:39.440
We kind of need to conditionally output this div, here

07:39.470 --> 07:49.510
I will do it with template tags and I will say that inside these template tags, I want to output this

07:49.510 --> 08:00.400
loop and I can check this with the array object and the isArray helper method where I pass value as an argument.

08:00.440 --> 08:05.590
This checks if value is an array and only if it is, I will reach this for loop.

08:05.630 --> 08:09.130
I'll add another template below where I add v-else,

08:09.170 --> 08:12.310
this has to be the same element type as a side note,

08:12.310 --> 08:15.150
so if you use template up here, this also has to be a template

08:15.190 --> 08:23.000
and here I want to output the value like that. With that, if I then also print my element here in this

08:23.000 --> 08:23.400
div

08:23.430 --> 08:31.440
and now hit control enter, we see that this now works, we check if it is an array and only if it is an

08:31.440 --> 08:32.100
array

08:32.190 --> 08:36.160
do we print the values in this inner for loop,

08:36.200 --> 08:44.110
otherwise we simply output it here with v-else block with this value string interpolation here.

08:44.130 --> 08:49.000
So this is how we mix v-if and v-for to conditionally show

08:49.070 --> 08:51.080
or attach this v-for loop or

08:51.150 --> 08:57.480
these elements created with the v-for loop so that this v-for a loop also only gets executed if it can

08:57.480 --> 08:58.190
be executed,

08:58.230 --> 09:06.660
if we actually do have an array, like we do here for this value when it is this data property here of

09:06.690 --> 09:13.210
our object. That concludes the conditionals and list module,

09:13.230 --> 09:18.210
I hope you feel confident using v-if and v-for, in the end it's really straightforward syntax.

09:18.250 --> 09:26.140
You also see a more complicated use case here with nested loops and conditional checking, the easier set

09:26.140 --> 09:26.780
ups

09:26.790 --> 09:27.460
as seen above

09:27.470 --> 09:32.370
here are probably the more common ones but it's good to know them all and feel confident using them

09:32.460 --> 09:34.270
which I sure hope you do right now.

09:34.380 --> 09:36.240
Let's continue with the next videos.
