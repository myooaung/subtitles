WEBVTT

00:01.870 --> 00:07.040
Before I explain how we can quickly setup such a vuejs workflow and what the features of such a workflow

00:07.060 --> 00:07.990
are,

00:07.990 --> 00:16.450
I want to dive into the question, what should such a workflow have and what could be the improvements such

00:16.450 --> 00:18.620
a workflow offers us?

00:18.640 --> 00:25.210
I would argue it should have a build process which kind of optimizes our code which means for example

00:25.210 --> 00:32.080
that we are able to write ES6 code so next javascript versions code and that it gets compile to ES5 so

00:32.080 --> 00:37.650
that we can use all the cool new features of ES6 and still have code which runs in the browser.

00:37.930 --> 00:44.230
I would also say that we need a development server and now this is something which causes some confusion

00:44.530 --> 00:48.310
because you would say well vuejs runs in the browser,

00:48.310 --> 00:51.250
why would I need development server.

00:51.250 --> 00:53.180
You have to think of it like this,

00:53.320 --> 00:54.720
it runs on the client

00:54.760 --> 01:00.790
but in the end if you visit a page which uses vuejs, it gets served by a server anyway,

01:00.790 --> 01:02.220
that is how the Internet works, 

01:02.230 --> 01:05.730
it's not lying on your machine, you have to fetch it from some server

01:05.800 --> 01:09.760
eventually and therefore, we want to test other such circumstances.

01:09.760 --> 01:16.300
The file protocol which we use when we double click on a html file does not have the same specifications

01:16.300 --> 01:18.840
and features the http protocol has,

01:18.880 --> 01:24.640
so we want to access our vuejs through http and for that we'll need a server even if it's running

01:24.640 --> 01:25.440
on our machine

01:25.510 --> 01:28.800
but we will need a server which is able to understand http,

01:28.930 --> 01:32.920
so we are able to test on a more realistic circumstances.

01:32.920 --> 01:38.920
Additionally, we might have a project where we're not loading all the files at startup because yes, we

01:38.920 --> 01:40.760
might have a bundle with our code

01:40.930 --> 01:47.150
but later in the course, we will get to projects where we lazily load certain parts.

01:47.170 --> 01:53.680
So where we say only if we visit a certain section or part of our application, only then we want to load

01:53.680 --> 02:00.460
the associated script files or whatever, in such a case you also need a server otherwise there is no well

02:00.810 --> 02:03.690
fetching after the initial loading possible.

02:03.880 --> 02:06.280
So these are all cases why we need such a server,

02:06.310 --> 02:09.130
we're not going to write any server side code,

02:09.220 --> 02:15.010
we will use a development server which is provided to us so we're not going to write our own server

02:15.040 --> 02:15.340
code,

02:15.340 --> 02:18.600
we're not going to write our own node express server or something like that,

02:18.760 --> 02:22.020
we will use a finished lightweight development server,

02:22.020 --> 02:24.270
I will come back to this in the next videos

02:24.460 --> 02:28.750
but this server is then able to host and offer our application.

02:28.750 --> 02:34.120
It will also give us some additional benefits like auto-reloading and so on if it's configured properly

02:34.180 --> 02:37.000
and it will be configured properly in the setup I'm showing you.

02:37.090 --> 02:43.420
So that are all some benefits why we might want to use a development server and why I will use one throughout the

02:43.420 --> 02:44.770
rest of this course.
