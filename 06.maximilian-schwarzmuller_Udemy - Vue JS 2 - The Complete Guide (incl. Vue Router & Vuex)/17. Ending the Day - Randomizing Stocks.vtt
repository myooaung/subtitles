WEBVTT

00:01.480 --> 00:04.180
Time to recalculate all stock prices here

00:04.510 --> 00:06.370
and for that, we want to hook up our

00:06.400 --> 00:11.260
end day button. The end day button can be found in the header

00:11.380 --> 00:14.290
and therefore, I'll add some methods

00:14.320 --> 00:18.630
to this header here, so that I'm able to actually use this. I'll name it

00:18.640 --> 00:21.540
end day, the method this button should trigger

00:21.880 --> 00:24.610
and here I basically want to call an action

00:24.640 --> 00:38.030
I do have in my store, in my stocks.js file to be precise in the stocks module. For that I will map

00:38.030 --> 00:41.810
the actions because I'll later on also add actions for saving and loading,

00:41.810 --> 00:44.990
so here it really makes sense to map all actions,

00:45.110 --> 00:55.600
so import map actions from vuex here and then in methods, I'll distribute it out with the spread operator

00:55.600 --> 01:03.840
again, map actions and map actions here takes an array because I want to keep the original names and the

01:03.850 --> 01:04.360
action

01:04.370 --> 01:08.500
I'm now interested in is named randomize stocks,

01:08.510 --> 01:14.090
this one here. So I can simply copy that name here as a string as always

01:14.210 --> 01:20.540
and this allows me in end day to simply call this randomize stocks, this action

01:20.540 --> 01:23.590
I know which will be available because we're mapping it here.

01:24.050 --> 01:29.660
So this will now execute this action in the stocks.js file in our store folder,

01:29.840 --> 01:34.810
however there, we do commit random stocks but there, we don't do anything.

01:34.820 --> 01:39.070
So let's now implement the logic to actually recalculate stock prices,

01:39.200 --> 01:41.290
how can we recalculate them?

01:41.540 --> 01:46.460
Well first, we want to access our stocks and then we want to do something for each stock.

01:46.460 --> 01:52.220
Now here stocks of course refers to all our stocks, not just the ones in our portfolio, there

01:52.330 --> 01:58.400
I then want to pass this callback function for each expects, so this function here will be executed

01:58.400 --> 02:00.620
for each stock in this array,

02:00.620 --> 02:06.530
stock will then be automatically passed as an argument and then we can basically transform it here or

02:06.530 --> 02:09.430
do whatever we like with it here.

02:09.440 --> 02:17.990
So here I want to set stock price to a new price, this new price is generally random but this would be

02:17.990 --> 02:21.690
a random number between 0 and 0.9999,

02:21.710 --> 02:23.590
not really the kind of price I want,

02:23.810 --> 02:30.670
instead I only want to use the old price and then increase or decrease it a little bit.

02:31.010 --> 02:35.750
So I will say stock price times this but that of course doesn't make sense,

02:35.750 --> 02:38.940
it makes more sense if I say one plus random,

02:38.960 --> 02:46.720
so now I have my old stock price times 1.0 - 1.999,

02:46.760 --> 02:51.210
so everything between keeping the current price and doubling it is possible.

02:51.350 --> 02:55.010
Now that of course only gives us upside potential,

02:55.010 --> 02:59.120
so I will deduct 0.5 from that,

02:59.120 --> 03:05.900
so now we're multiplying the old price with something between 0.5 and 1.5.

03:06.230 --> 03:09.760
Arguably that's a pretty huge swing for one day

03:09.800 --> 03:16.160
but I think it's fine for this application and you may of course fine tune this to your needs but I

03:16.170 --> 03:20.800
don't really want to write the next best finance algorithm here,

03:20.870 --> 03:22.280
so that's fine for me,

03:22.280 --> 03:29.090
the one thing I want to do though is I want to round the new stock price so that I simply have an integer again.

03:29.810 --> 03:33.860
With that, I got a new stock price automatically applied

03:33.980 --> 03:40.610
and now what do we need to do to also reflect this change in our portfolio in all the stocks we have

03:40.610 --> 03:41.960
in there?

03:41.960 --> 03:42.620
Nothing,

03:42.890 --> 03:45.430
that's the awesome thing about vuex,

03:45.440 --> 03:47.600
it's a lot of work to set it up

03:47.600 --> 03:53.480
but in moments like these, you really see why it's so awesome to use in bigger applications.

03:53.480 --> 03:57.010
We have one state and this is only one place where we alter it

03:57.020 --> 04:02.180
but with all these getters and everything, this make sure it gets updated everywhere where it needs to

04:02.180 --> 04:03.220
get updated.

04:03.230 --> 04:08.810
So with this in place, we can go to the header and hook up our button here to end day,

04:08.840 --> 04:15.010
so this end day button gets a click listener and calls end day, that's the name of the function we chose

04:15.010 --> 04:19.340
down there and execute the method as I just see that.

04:19.490 --> 04:24.330
And with that, we should have everything in place to now reload the application, hit end day

04:24.470 --> 04:28.620
and as you can see, recalculate all our stock prices here.

04:28.910 --> 04:30.740
So that looks pretty good,

04:30.890 --> 04:32.310
let's reload again,

04:34.980 --> 04:36.530
now looks good to me.

04:36.600 --> 04:38.700
Of course we got pretty huge swings here

04:38.760 --> 04:40.710
but generally it works as intended.

04:40.710 --> 04:47.610
Now let's see if I buy 100 of BMW stocks here and hit end day here, we see the price update

04:47.610 --> 04:48.520
here too

04:49.080 --> 04:52.030
but swings are too big for me,

04:52.050 --> 04:53.410
I made a comeback.

04:53.640 --> 04:57.320
Let's sell them 100 here

04:57.660 --> 05:05.280
and I made a decent profit here and this is how this works, how it is managed in this global store and

05:05.280 --> 05:11.010
therefore everywhere it updates and we don't need to manually take care that if we want to change it in

05:11.010 --> 05:16.860
one place, we always update it in another place, that's done automatically with this construct of getters

05:16.860 --> 05:18.800
and mutations and so on.

05:19.110 --> 05:26.190
Well with that, the missing things really only are animations between our routes here and of course making

05:26.190 --> 05:28.040
the save and load button work.
