WEBVTT

00:01.860 --> 00:08.510
Let's start with the first exercise here, of course we want to execute a function here so I will add

00:08.510 --> 00:15.270
the v-on directive to listen to a user event first, I then pass the argument after the colon which is

00:15.270 --> 00:17.100
the name of the event I want to listen to

00:17.220 --> 00:19.450
and that's the click event here. Now

00:19.450 --> 00:20.660
between the quotation marks,

00:20.670 --> 00:26.560
I specify the code I want to execute on each click and here, as I just said, I want to execute a function,

00:26.580 --> 00:32.930
so down there I'll add it my methods and I will name it alert me, just like that.

00:32.970 --> 00:40.080
Now in this function, all I'll do is I will throw an alert where I say Alert, really straightforward

00:40.170 --> 00:46.640
and now I can use this alert me function from down there to pass a settable reference here in the

00:46.650 --> 00:50.660
quotation marks as the value for this directive binding.

00:51.000 --> 00:56.880
If I now hit control enter and click on show alert, we see this alert over here,

00:57.150 --> 01:03.180
so this is now working, this is the first task. In the second one, I now want to listen to a different

01:03.180 --> 01:08.910
event on a different element on this input here, the user is of course able to type something here

01:09.090 --> 01:12.010
and I want to listen to each keystroke the user does,

01:12.300 --> 01:17.790
so again with v-on, I can set up such a listener, I can bind an event to some code I want to execute

01:17.790 --> 01:23.670
when the event occurs and the event I want to listen to is keydown, I could also use keyup. Keydown is

01:23.790 --> 01:29.130
as the name implies fired whenever the key is pressed before it is released, keyup would be pressed after

01:29.130 --> 01:30.060
it is released,

01:30.060 --> 01:36.870
choose whatever suits your needs. Here I'll choose keydown and in there, I want to change the value,

01:36.910 --> 01:40.250
note this, initially it's set to an empty string.

01:40.350 --> 01:49.860
I can update it by simply saying value equals and then event, $event to be precise because

01:49.860 --> 01:51.410
this is this reserved 

01:52.050 --> 01:58.410
name vuejs creates for us, this reserved variable which stores the default event object automatically

01:58.410 --> 02:04.290
created for us by javascript which holds valuable information like the target of the event.

02:04.290 --> 02:09.510
Now the target clearly is this input field and since an input field has a value property,

02:09.510 --> 02:12.480
this is where I can get the input value from.

02:12.480 --> 02:19.680
So on my event object, I can access the target of the event, again the input element here and then the

02:19.680 --> 02:20.380
value

02:20.430 --> 02:26.280
and with that, I'm assigning the value of the target of this event to this value property down there.

02:26.460 --> 02:31.260
I could have of course also called a function where I pass $event as an argument

02:31.440 --> 02:34.450
and use it in the function body to do the same.

02:34.540 --> 02:37.860
If I now hit control enter, let's output something here,

02:37.980 --> 02:44.370
as you can see, the value gets updated below both inputs because this is where I output it with string interpolation

02:44.520 --> 02:49.310
and this is the behavior I was looking for here. In the third exercise,

02:49.320 --> 02:55.240
I want to take the second one and adjust it to only fire if the key we press is entered.

02:55.410 --> 03:00.750
So I still want to be able to enter something here, I'm not restricting this to enter but I only want to

03:00.780 --> 03:08.110
update the value which will then be output via string interpolation whenever we hit the enter key, so

03:08.110 --> 03:10.610
that we don't update it upon every keystroke.

03:10.720 --> 03:16.500
We listen for every keystroke but we then decide should we do something or shouldn't we do something.

03:16.510 --> 03:23.390
So in order to do this, I will generally copy the same code as up here, as we want the same functionality

03:23.680 --> 03:26.470
but of course that won't restrict it to the enter key.

03:26.650 --> 03:30.600
I can restrict it by adding a key modifier here, with the dot

03:30.640 --> 03:36.010
I add such a modifier and then the name for the enter key simply is enter,

03:36.100 --> 03:42.250
this tells vuejs only fire the code or execute the code between the quotation marks

03:42.310 --> 03:48.990
if we have a have a keydown event and b very important, the key which is down is the enter key.

03:49.150 --> 03:55.630
With that if I hit control enter, you can see on the upper input where I don't have this check, I can still

03:55.630 --> 04:01.690
type and see the value is reflected but down there, we don't see an updating but as soon as I do hit enter,

04:01.780 --> 04:05.930
it changes to Max and Maximilien and so on.

04:05.950 --> 04:11.500
This is of course is a very useful behavior because oftentimes, you want to listen to every keystroke but

04:11.500 --> 04:13.950
not update a value up on every keystroke,

04:13.960 --> 04:19.090
you only want to update it once the user kind of hits enter to tell you well I'm done editing it, take

04:19.090 --> 04:19.760
the value

04:19.780 --> 04:24.680
for example. These were the three exercises on events.

04:24.790 --> 04:31.540
Again, very concise but should get you really started with it showing you how to listen to events with

04:31.540 --> 04:36.550
the v-on directive, how to call functions, how to use the event object,

04:36.550 --> 04:43.510
again you would have been able to pass this to a function as an argument and then how to also use modifiers

04:43.540 --> 04:50.440
like the key modifier here to control when specifically your event occurs. With that,

04:50.500 --> 04:52.180
let's move on to the next lectures.
