WEBVTT

00:01.970 --> 00:05.490
These mutations do face one big issue

00:05.540 --> 00:07.800
or maybe it's a big issue, maybe it's not,

00:07.910 --> 00:10.120
they always have to be synchronous.

00:10.160 --> 00:16.610
So you may not run or you must not run any asynchronous task in such a mutation,

00:16.640 --> 00:23.780
so if in here you want to set a timeout and do something for a couple of seconds or more realistically,

00:23.960 --> 00:25.190
reach out to a server,

00:25.220 --> 00:26.700
this will not work.

00:26.760 --> 00:36.800
A mutation always has to be synchronous otherwise the main benefit of it having an easy to track adjustment

00:36.860 --> 00:43.610
of your state, so knowing when your state gets changed gets lost because if that happens asynchronously,

00:43.880 --> 00:51.020
you can't track which mutation was responsible for which change because the state might change and then

00:51.020 --> 00:56.360
change again from another mutation which actually was started first but happened to be asynchronous

00:56.570 --> 01:01.530
and just took longer than an in-between mutation which was synchronous.

01:01.550 --> 01:08.600
So your state gets changed from different sources and you can't tell if the order of changes matches the order

01:08.600 --> 01:13.000
of mutations because some mutations might take longer than others.

01:13.040 --> 01:14.660
So that is a problem,

01:14.660 --> 01:21.690
we want to have this reliability in that we know when we run a mutation, this changes the state immediately.

01:22.070 --> 01:27.320
But on the other hand, we also need the functionality to be able to run async tasks,

01:27.320 --> 01:32.480
so how do we combine both asynchronous tasks with mutations?