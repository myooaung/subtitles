WEBVTT

00:01.620 --> 00:07.630
Back in JSFiddle, time to understand what happens behind the scenes when we create a new vue instance

00:07.930 --> 00:13.750
like we do here with the new vue keyword. Of course I already explained that it takes a template and

00:13.750 --> 00:16.220
updates the dom based on that template

00:16.270 --> 00:23.260
but behind the scenes, it follows through a complex lifecycle update into which we may tap in to execute

00:23.260 --> 00:24.250
certain code,

00:24.340 --> 00:25.890
let's have a look at this lifecycle.

00:25.960 --> 00:31.290
The vuejs instance lifecycle starts with the new vue constructor, there

00:31.330 --> 00:36.770
we then execute the first lifecycle method to which we can listen, I will show this in a second,

00:36.810 --> 00:37.500
beforeCreate,

00:37.520 --> 00:43.690
this is as the name implies before the vue instance is created. Thereafter it initializes the data and

00:43.690 --> 00:50.170
events we pass to the object or with the object to the vue instance and it then creates the instance and

00:50.230 --> 00:57.370
calls the created lifecycle hook method to which we can also listen or to which we can also tap in. Thereafter,

00:57.460 --> 01:05.550
it compiles the template or it derives the template from our html code if we use el or mount,

01:05.920 --> 01:10.600
so it either uses the template provided in the template property or the one it derives,

01:10.600 --> 01:15.280
we saw that before in action. Then beforeMount is reached,

01:15.310 --> 01:22.600
this is as the name implies called right before this template which is rendered is mounted to the

01:22.600 --> 01:24.970
real dom, is written to the real dom,

01:24.970 --> 01:26.780
so it's not there yet.

01:27.870 --> 01:34.490
Now we replace the element, so this element in the vue instance with the compiled template,

01:34.500 --> 01:40.890
it's still not mounted but now vuejs compiled the template, inserted all the values for the string

01:40.890 --> 01:43.650
interpolations, set up all the bindings,

01:43.650 --> 01:47.150
so converted it to real html code so to say

01:47.310 --> 01:49.070
but still behind the scenes

01:49.350 --> 01:51.280
but now we mount it to the dom.

01:51.300 --> 01:57.270
So we take this compiled template which is exactly the html code we will see in the dom and writes

01:57.270 --> 01:58.470
it to the dom,

01:58.470 --> 02:04.190
now our vue instance is hooked up to the dom and is or can be seen there.

02:04.650 --> 02:06.120
It's not done though,

02:06.480 --> 02:13.920
we get an ongoing lifecycle which we can tap into multiple times, which is if some data changes and the

02:13.920 --> 02:20.310
dom is re-rendered, here we get the beforeUpdate lifecycle hook right before we re-rendered the dom,

02:20.390 --> 02:26.010
so after we saw that data changed but before that dom is re-rendered or a part of the dom I should

02:26.010 --> 02:33.310
say and the updated lifecycle which is obviously called after this part in the dom was updated.

02:33.390 --> 02:39.200
We also got the beforeDestroy lifecycle right before an instance is destroyed,

02:39.240 --> 02:43.140
I will show you how an instance may get destroyed in a second.

02:43.350 --> 02:49.170
This is the vuejs lifecycle and it then ends with the destroyed lifecycle hook into which we can

02:49.170 --> 02:52.790
tap in right after the instance was destroyed.

02:53.310 --> 02:59.370
All these methods here can be used to execute some code in the different phases of the lifecycle, for

02:59.370 --> 03:01.990
example whenever we want to execute the code

03:02.100 --> 03:08.040
once the dom were a part of the dom has been updated, we could do an updated lifecycle hook. Well let's

03:08.040 --> 03:10.070
see it in action in the next lecture.
