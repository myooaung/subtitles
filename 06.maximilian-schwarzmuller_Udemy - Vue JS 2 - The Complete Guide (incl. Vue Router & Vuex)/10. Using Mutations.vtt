WEBVTT

00:01.610 --> 00:06.170
So we want to use mutations to change our state.

00:06.200 --> 00:12.620
So let's go to the store.js file and add some mutations, like getters and state, this of course

00:12.650 --> 00:20.450
is a reserved property name which vuex will detect and recognize and now mutations is again a list or

00:20.510 --> 00:23.540
just a couple of methods we can execute.

00:23.540 --> 00:30.740
For example let's add the increment mutation, the increment mutation takes the state as input like a

00:30.740 --> 00:31.500
getter

00:31.520 --> 00:33.010
but here of course we don't return it,

00:33.020 --> 00:34.370
instead we change it,

00:34.520 --> 00:41.030
so here we say state++, state.counter, excuse me, counter++ for example.

00:41.030 --> 00:49.360
Now we also want to have a decrement mutation so I'll add this decrement where I then decrement the counter.

00:49.460 --> 00:52.300
Now we centralize this functionality too,

00:52.310 --> 00:56.780
now we only have one place where we do call this, here in ncounter

00:57.080 --> 01:02.840
but if we would call that from multiple components again, then we would have the advantage of having

01:02.840 --> 01:04.040
a central place.

01:04.220 --> 01:09.100
So let's actually simulate this by creating a new file which I'll name

01:09.140 --> 01:12.000
AnotherCounter.vue now, and another counter

01:12.020 --> 01:19.050
basically just, whoops, copies the code from counter in here and in app.vue file,

01:19.070 --> 01:28.310
I of course now also want to import another counter and add it as a component here, so let's add

01:28.440 --> 01:37.400
app another counter and also add it up here, so that we too get these two counters in place so app

01:37.400 --> 01:39.000
another counter.

01:39.020 --> 01:40.630
Now we get the two counters,

01:40.640 --> 01:42.470
now let's use our mutations.

01:42.710 --> 01:45.200
We could use a mutation like this,

01:45.200 --> 01:50.200
we access our store like before and then we simply can commit

01:50.210 --> 01:57.170
as you learned it, a mutation running commit and then the name of the mutation as a string, that's important,

01:57.200 --> 01:58.610
as a string.

01:58.610 --> 02:03.730
So here we have increment and vuex will then search for a method named increment in our

02:03.750 --> 02:09.710
store.js mutations object and will then execute this method and pass the state automatically

02:09.710 --> 02:11.140
so we don't have to do that.

02:11.150 --> 02:12.010
That's always true,

02:12.010 --> 02:14.180
the state is passed automatically by vuex,

02:14.180 --> 02:17.890
this is why we imported this third party package in the first place.

02:18.140 --> 02:21.480
So I use this setup then for decrementing,

02:21.500 --> 02:23.230
I use decrement,

02:23.240 --> 02:24.500
I see your face,

02:24.500 --> 02:26.360
that's not really getting shorter, does it

02:26.360 --> 02:32.660
but we'll soon find a way to decrease the number of characters we are writing here. And with all that

02:32.660 --> 02:33.200
in place,

02:33.200 --> 02:38.840
if I now reload this, you now see I got a couple of buttons and I can all click them and they all work

02:38.840 --> 02:39.360
here,

02:39.380 --> 02:48.020
they all adjust our central store, now through mutations which we commit. Though as of getters, we do

02:48.020 --> 02:52.660
have the problem that we're repeating this code here over and over again,

02:52.760 --> 02:58.410
so it would be nice as with mapGetters if we could somehow map our mutations.

02:58.700 --> 03:04.350
So turns out we can do this and actually it works exactly as mapGetters worked.

03:04.370 --> 03:06.970
We have to import this helper method,

03:07.010 --> 03:08.540
import map

03:08.540 --> 03:09.650
mutations

03:12.850 --> 03:14.820
from vuex,

03:14.860 --> 03:16.720
so import this

03:16.720 --> 03:21.520
and then you can either replace all your methods with map mutations

03:21.520 --> 03:27.880
but since you probably also want to have your own methods mixed with the mapped mutations here, the better

03:27.880 --> 03:29.930
way is to use the three dots again,

03:29.930 --> 03:31.470
map mutations

03:31.570 --> 03:32.950
and then as an argument,

03:33.070 --> 03:39.850
whoops, you again pass an array where you have the names of the mutations you want to map, like increment

03:40.270 --> 03:45.090
and decrement, so you can write this all like this.

03:45.490 --> 03:50.990
And if you write it like this, then calling these methods up here will automatically work

03:51.010 --> 03:57.250
since these are the same names, so I will quickly copy the code from here into another counter and replace

03:57.250 --> 03:58.330
it here too.

03:58.690 --> 04:02.300
And now let's see if this reloads, it still works

04:02.300 --> 04:05.020
as before but now I think you agree,

04:05.020 --> 04:10.990
it's much shorter since we map our mutations automatically and it has the big advantage that if

04:10.990 --> 04:17.540
you want to change the way we adjust our state, let's say we want to automatically increase this

04:17.680 --> 04:18.590
by 2

04:18.700 --> 04:24.400
or that would not be valid syntax but let's say you want to run some calculation here and do more than

04:24.400 --> 04:25.410
just increment it,

04:25.450 --> 04:30.070
then you only have to change it in one place here and not all over your application again.

04:30.070 --> 04:37.360
So like with getters, we're now making sure that our changing the state code is in one central place

04:37.570 --> 04:44.590
and that we get easy access to these change functions or to these mutations by having the map mutations

04:44.590 --> 04:48.670
helper method which basically gives us easy access to these functions.
