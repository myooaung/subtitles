WEBVTT

00:02.030 --> 00:07.300
Time to make the buy buttons work for that, we'll need a portfolio and some state for that portfolio,

00:07.340 --> 00:10.460
so let's work on this next. In this modules folder,

00:10.460 --> 00:17.240
I'll add a portfolio.js file because I want to set up its own module in our vuex store

00:17.360 --> 00:19.350
and there, we will have a state of course

00:19.350 --> 00:22.790
and now what is the state of our portfolio?

00:23.150 --> 00:25.880
Well we certainly want to have some funds to work with,

00:25.880 --> 00:27.100
I'll set this to 10000,

00:27.100 --> 00:31.840
you may choose of course a different amount and we'll have some stocks in our portfolio.

00:31.850 --> 00:34.910
So stocks here refers to the stocks in our portfolio,

00:34.940 --> 00:37.190
not to all the stocks available.

00:37.520 --> 00:43.960
We then need some mutations of course, mutations again are what allows us to change our state

00:44.150 --> 00:46.850
and here, I want to be able to buy a stock

00:46.880 --> 00:56.000
so this is one action I set up. And this action therefore has the state, all mutations get that and then

00:56.060 --> 01:03.260
I know I'll get an object as the second argument and I'll use destructuring to pull out the stock ID,

01:03.620 --> 01:06.920
the quantity and the stock price.

01:06.920 --> 01:10.690
Now where do these three names in this object come from,

01:10.700 --> 01:13.780
how do I know that I will have these three properties?

01:14.030 --> 01:15.580
Well that's basically my order,

01:15.620 --> 01:20.600
if we have a look at the stock.vue file in the stocks folder, this is how we set up our order with

01:20.600 --> 01:23.560
a stock ID, a stock price and quantity

01:23.720 --> 01:29.720
and now that is what I'm pulling out of my object here because I know I will get an order if I need

01:29.720 --> 01:32.200
to commit a buy stock mutation,

01:32.450 --> 01:34.620
so therefore, I can use that.

01:34.730 --> 01:42.080
Now in this method, I first want to check if I already do have this stock in my stocks array because

01:42.080 --> 01:42.280
if I

01:42.290 --> 01:43.270
do have it,

01:43.280 --> 01:44.410
I want to add it

01:44.420 --> 01:50.360
and I don't want to create a new item in the new array. So I'll first check if I do have a new record by accessing my state

01:50.390 --> 01:51.300
and then my stock

01:51.300 --> 01:57.140
so this array up here and then executing find, a method which allows you to find something in the array.

01:57.440 --> 02:02.690
Find takes a function as an argument where the element will be passed in automatically, so this will

02:02.690 --> 02:07.470
automatically loop through all my elements and then execute a function for each of the elements

02:07.760 --> 02:12.590
and there, I want to check if element ID equals stock ID.

02:12.590 --> 02:17.360
Keep in mind if you write this in one line, this always the implicit return statement in front of

02:17.360 --> 02:17.650
it,

02:17.750 --> 02:24.620
so this will return true if the ID of the element I'm currently at in my loop matches the ID of the

02:24.620 --> 02:25.000
stock

02:25.000 --> 02:25.920
I want to buy.

02:26.120 --> 02:28.710
So if my array is empty, this will never match

02:28.790 --> 02:34.940
but if my array does have this stock already, it will match at some point and therefore it will then return

02:34.940 --> 02:41.630
this will return true or false which again will lead for the find method to return this stock in my

02:41.630 --> 02:48.150
array. And I know if record is set, that I already do have my

02:48.200 --> 02:55.030
or do have this stock in my array and therefore, I don't want to push a new item on this array, instead

02:55.040 --> 03:01.670
I want to take this record which is the stock which was found in my array and update the quantity to

03:01.670 --> 03:06.260
be the old quantity plus the new quantity

03:06.260 --> 03:08.350
I'm getting in the order.

03:08.420 --> 03:12.200
However if this is not the case, then I know it's a new record,

03:12.200 --> 03:18.320
in this case I want to take my state, my stocks there and push a new object on it,

03:18.320 --> 03:24.700
this new object will have an ID of stock ID and a quantity of quantity,

03:24.740 --> 03:28.930
so that's the data I want to store in this stocks array in my portfolio,

03:29.060 --> 03:34.190
the ID and the quantity. With that, I got all the data I will need later on to also find out what's

03:34.190 --> 03:37.530
the price and what's the total value and so on.

03:37.910 --> 03:41.840
So that's the buy stock action or mutation I should say,

03:42.050 --> 03:46.030
we also need a method to sell stocks, here

03:46.140 --> 03:49.470
I will also get a state and I will also get an order,

03:49.490 --> 03:51.950
of course the order will have the same fields

03:51.980 --> 03:53.860
as for buying a stock,

03:54.050 --> 03:58.670
so all the relevant data which allows me to update my state. Now

03:58.700 --> 04:05.930
there, I will first find the stock by ID in my array because I only get stock ID and so on, I need to

04:05.930 --> 04:15.650
find it in my array and then I want to check if my record quantity is greater than the quantity of what

04:15.650 --> 04:16.670
I want to sell,

04:16.700 --> 04:23.390
then this is of course possible and I therefore want to update my record quantity to be the old quantity

04:23.390 --> 04:25.530
minus the quantity of the order

04:25.820 --> 04:32.930
but if I try to sell more than I do have or exactly the amount of what I have to be precise, I want

04:32.930 --> 04:34.440
to remove it from the array.

04:34.580 --> 04:41.320
So there I want to splice and find the position of my record, index of record here

04:42.990 --> 04:44.250
and that's what I want,

04:44.250 --> 04:51.090
so this will now give me back a new array, we'll update the array without that item inside of it

04:51.090 --> 04:56.490
and of course, I only want to splice this item, so only remove this item which now actually is

04:56.490 --> 04:58.480
completely sold.

04:58.830 --> 05:06.570
Of course I'll also need to update my funds so I'll check my funds here and I will add something equal

05:06.570 --> 05:12.740
to the stock price times the quantity and I need to do the same here when I buy a stock actually,

05:12.750 --> 05:14.840
so here I also want to update the funds

05:14.850 --> 05:22.470
but of course here, I want to update them to be well the funds minus stock price times quantity. With

05:22.470 --> 05:25.460
that, we got buy and sell in place,

05:25.470 --> 05:30.250
now let's quickly finish this by adding the action we need,

05:30.270 --> 05:31.410
that is only one,

05:31.410 --> 05:38.480
the sell stock action because buy stock is located in my stocks module.

05:38.640 --> 05:46.350
So here I will have my sell stock action which actually also I can use the method syntax for that too

05:46.350 --> 05:50.610
of course which gets me my commit method, has an order

05:51.120 --> 05:57.510
and then here, I simply want to commit sell stock order.

05:57.510 --> 06:03.410
Now you could of course also add the buy stock action here if you think that makes more sense or whatever,

06:03.410 --> 06:04.790
I think you can argue for both,

06:04.820 --> 06:07.880
I'll leave it in my stocks module for now

06:08.360 --> 06:14.870
and we want to set up the getters here of course. Now getters, that is simply an object and therefore getting

06:14.870 --> 06:16.750
my data or what,

06:16.760 --> 06:17.990
which getters do I need,

06:17.990 --> 06:19.300
let's start with that.

06:19.580 --> 06:22.830
Well I want to be able to get my current portfolio of stocks,

06:22.850 --> 06:28.450
so I definitely want to get my stock portfolio and I want to get my funds, now

06:28.670 --> 06:30.700
let's start with the stock portfolio.

06:30.770 --> 06:40.050
There we get the state and we can also inject the other getters into this and there, I want to then return

06:40.060 --> 06:42.440
state stocks

06:42.700 --> 06:50.350
and now I somehow need to, since I only have the IDs in my stocks array, I need to access the stocks

06:50.440 --> 06:56.750
on the stocks module, that is why I injected the getters here, to find out

06:56.770 --> 06:59.580
the ID of my or the name and so on

06:59.590 --> 07:07.120
of the stocks I have in my portfolio. I can use the map method for that, map allows me to transform

07:07.180 --> 07:09.190
each element in my array,

07:09.510 --> 07:12.900
so this will automatically input the current element

07:12.910 --> 07:20.050
I am looping through kind of implicitly into this callback function and in there, I can now set up into

07:20.050 --> 07:22.180
what I want to transform this element

07:22.170 --> 07:25.820
we're currently at and this will be run for all elements in my array again.

07:26.170 --> 07:33.400
So here I again want to fetch the record, for that I will use my getters, that refers to my store getters,

07:33.410 --> 07:39.440
so of my overall store and there I can find or can use the stock getter which of course is the getter

07:39.440 --> 07:42.230
I set up here in the stocks module.

07:42.460 --> 07:50.440
So I can access this like this and here, find allows me to again find an element where I check if the

07:50.440 --> 07:57.940
element ID matches my stock ID, now important, stock refers to the stock we're currently at in this

07:57.940 --> 08:02.590
map method whereas element ID refers to the element of these stocks

08:02.590 --> 08:08.210
array in my stocks modules, so of all the stocks not just the ones in my portfolio.

08:08.380 --> 08:15.220
So here, I'm basically finding the relevant records and then for each record, I want to return a new object,

08:15.410 --> 08:18.660
that is what the elements in my array will get transformed to

08:18.910 --> 08:28.700
and here, I return ID which is stock ID, I want to set the quantity which is stock quantity and I want

08:28.700 --> 08:34.820
to set the name which is the name of this record because I am not storing this in my local stocks array

08:34.820 --> 08:42.410
here and price which is the price on the record because again, in this local stocks array, I only have ID in quantity

08:42.470 --> 08:44.000
which is why I keep them here

08:44.120 --> 08:48.670
but then I'm reaching out to my overall stocks array to also get name and price

08:48.830 --> 08:57.170
and here I'm basically creating a new array where I mapped all these values, so where I expanded my object

08:57.410 --> 09:02.650
in this array to not only have ID and quantity but now also name and price and I'm returning it here,

09:02.870 --> 09:05.170
so therefore I'm returning it

09:05.180 --> 09:12.960
overall in this getter here. And regarding funds, well funds only needs the state, like this and here, I simply

09:12.960 --> 09:18.730
want to return state funds, of course referring to the funds in my state here.

09:18.740 --> 09:21.010
So with that in place, let's export it

09:21.020 --> 09:23.460
and then in the next video, let's hook it all up,

09:23.540 --> 09:31.100
so we want to export the state, the mutations, the actions and of course the getters. With that,

09:31.100 --> 09:32.530
that was quite a lot of work,

09:32.540 --> 09:34.910
of course there are different ways to set this up,

09:34.910 --> 09:39.560
this is always a question of where we want to store things, how we want to handle things.

09:39.560 --> 09:45.530
I try to show one set up where we also needed to reach out to another module so that we also can see

09:45.530 --> 09:46.590
how that would work

09:46.610 --> 09:49.060
and of course this is not absolutely necessary,

09:49.070 --> 09:53.240
you could simply store your stocks differently. Enough of the talking,

09:53.240 --> 09:58.790
let's move onto the next video where we use all these things to hook everything up and enable buying and

09:58.790 --> 09:59.970
selling stocks.
