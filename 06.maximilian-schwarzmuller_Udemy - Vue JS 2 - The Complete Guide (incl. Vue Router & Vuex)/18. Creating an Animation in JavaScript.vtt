WEBVTT

00:02.350 --> 00:07.450
Now that we are taking over javascript, time to execute some code so that we can actually see an

00:07.460 --> 00:13.960
animation. Now the place to animate is the enter and the leave function because these are the functions which

00:13.960 --> 00:18.480
get executed after the initial states have been set in beforeEnter and beforeLeave

00:18.790 --> 00:20.380
and well before we're done.

00:20.680 --> 00:28.100
So here in enter, besides logging this, I want to grow the width of this div,

00:28.180 --> 00:31.780
so I want to grow it to the right, make it a bit broader

00:31.780 --> 00:36.590
and upon leaving, I want to make it smaller, let's say these are the two animations I want to play here.

00:37.360 --> 00:45.850
Now what I will do to play this is I will set up a variable round here with the let keyword, ES6 syntax

00:46.360 --> 00:47.380
and then I'll set up interval,

00:47.380 --> 00:55.270
setInterval because I want to grow it in steps of course and not instantly make it pop from

00:55.360 --> 00:57.690
normal size to broader,

00:57.760 --> 01:04.600
so here we do we need setInterval to play or to change something over some time and I want to set it

01:04.630 --> 01:11.380
in an interval of let's say 20 milliseconds, so every 20 milliseconds, I want to change this div. Now in

01:11.380 --> 01:16.780
this function here in the first argument of setInterval, I execute the code I want to change every 20

01:16.780 --> 01:18.740
seconds, milliseconds.

01:18.760 --> 01:25.690
So here I want to access my element, there the style and then let's say the width and I want to

01:25.690 --> 01:27.140
set the width to,

01:27.160 --> 01:37.740
now to what? To the width it right now has plus something which depends on the round we are currently

01:37.740 --> 01:38.350
in.

01:38.730 --> 01:48.260
So I want to bind it to element style width, so the current width plus round times 10, let's say,

01:48.270 --> 01:54.200
so in round one, we add 10 pixels, in round two, we add 20 pixels and so on.

01:54.210 --> 01:59.730
Now this will make it grow exponentially though because we would take the old width and then add ever

01:59.730 --> 02:00.930
higher numbers to it,

02:01.020 --> 02:03.140
so that's not really, that's not what I want,

02:03.480 --> 02:11.100
instead I will save a new property which I'll name elementWidth and I'll set this to 100 because I want

02:11.100 --> 02:13.930
to have 100 pixels being the default.

02:13.950 --> 02:17.400
This means I can now use this here, this element width

02:17.790 --> 02:25.740
and now I will make it grow from 100 to 110, from 100 to 120 because this will always stay constant, it

02:25.740 --> 02:26.720
never changes,

02:26.730 --> 02:29.860
it's only the width to which is attached, attached here,

02:29.880 --> 02:31.770
adjusted here, excuse me.

02:31.800 --> 02:37.380
So let's put this into parentheses to execute this calculation first before we then convert it into

02:37.380 --> 02:38.780
a string and add pixels

02:38.780 --> 02:45.490
in the end because we need to set it in pixels in the end and not as a number. This shall change the styling,

02:45.510 --> 02:52.860
then of course we also need to increase the round by one so that this round variable increases and we

02:52.860 --> 02:54.570
want to set up an exit condition,

02:54.570 --> 03:01.020
so if round is greater than 20 if we executed this 20 times let's say, then I want to clear the interval

03:01.020 --> 03:05.650
with the clearInterval method and passing the interval which we stored in a constant

03:05.940 --> 03:10.860
and I want to call done here and don't want to call it outside of that because that was what, that is

03:10.860 --> 03:16.500
what I was talking before about. I don't want to execute or don't want to mark this as finished once

03:16.500 --> 03:20.760
this code has been executed because we do have an asynchronous operation there,

03:20.790 --> 03:23.920
therefore done shall be executed once we really are done,

03:23.970 --> 03:28.310
once we reach this exit condition here. Now with this, looks good

03:28.320 --> 03:31.650
but we should also set the initial width here in beforeEnter,

03:31.860 --> 03:37.620
so here we should set element width to 100,

03:37.640 --> 03:45.300
we don't really change it but just to make sure that it really is 100 and then we want to set the element

03:45.300 --> 03:48.320
style, the width to this element

03:48.360 --> 03:55.230
width plus pixels, so that we reset it to 100 before adding it to the dom

03:55.250 --> 04:01.130
because if we added it before and we removed it, this might have been in a different state especially if

04:01.130 --> 04:03.090
we cancel some animation in between,

04:03.170 --> 04:07.870
so therefore we want to make sure that we reset everything here in beforeEnter.

04:08.300 --> 04:15.170
Well and with that set up, we can of course also go to beforeLeave down there where we also want

04:15.170 --> 04:17.450
to configure it, though here

04:17.540 --> 04:27.870
we definitely want to set the element style width to let's say 300 pixels, like this. This is where it'll be at

04:27.930 --> 04:36.430
in the end after our enter animation here because we animated up all the way to 20 pixels, to 20

04:36.450 --> 04:39.580
times 10 plus 100, so to 300 pixels.

04:39.720 --> 04:46.320
Well and for animating it out, I can simply copy the code from the enter function here, override the done

04:46.320 --> 04:49.930
function because we want to call this in our exit condition here too

04:50.130 --> 04:56.850
and the only thing I need to change here is that I want to of course decrease the width. Though this

04:56.910 --> 04:59.550
element width will always be 100,

04:59.820 --> 05:05.910
so for this to work, we should also add something here in beforeLeave and set this element width to

05:05.970 --> 05:14.290
300 and then we can also override this here to use this element width plus pixels here again,

05:14.310 --> 05:18.520
so now it also makes sense to reset this to 100 in beforeEnter.

05:18.660 --> 05:21.350
Let's see if this works as it should,

05:21.390 --> 05:22.350
if we have a look at this

05:22.350 --> 05:31.630
application, we can load it to grow it and then shrink it, load it, shrink it, load it and shrink it.

05:31.690 --> 05:36.560
Now you see if we load it for the first time, we get this ugly jump because then our initial width doesn't

05:36.560 --> 05:38.210
fit the initial width it should have

05:38.210 --> 05:43.670
once it is attached to the dom and we can easily fix this by going to our code and set the width to 300

05:43.670 --> 05:47.800
here. And now you see, that looks pretty good,

05:47.810 --> 05:53.000
now we get the animations we wanted. Now all done through Javascript

05:53.030 --> 05:59.270
and just to highlight this once more, you can mix javascript animations and css animations,

05:59.390 --> 06:05.510
here I just wanted to show the well the extreme opposite by just using javascript.

06:05.630 --> 06:08.850
Mixing it is fine, if you do use only javascript,

06:08.870 --> 06:15.840
consider using these css attributes here though to tell vuejs that it may skip the css detection.
