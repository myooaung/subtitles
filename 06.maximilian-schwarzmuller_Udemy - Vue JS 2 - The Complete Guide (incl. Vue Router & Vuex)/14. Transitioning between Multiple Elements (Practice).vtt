WEBVTT

00:01.680 --> 00:10.770
Back in the application here, let's say I add a new transition down here and to fix this problem we had

00:10.770 --> 00:15.250
before, where we do have different durations here in our slide class,

00:15.270 --> 00:17.790
I will switch this to one second

00:18.000 --> 00:22.880
in both cases so that it is fixed even without us setting the type explicitly.

00:22.890 --> 00:27.750
So now I do have my new div, my new transition and now I want a toggler, I want to switch between

00:27.750 --> 00:28.650
two divs,

00:28.680 --> 00:31.780
I have my info alert and I have my warning alert let's say,

00:31.860 --> 00:33.590
so this is some warning.

00:33.690 --> 00:39.820
Now of course like this it wouldn't work, if they both have the same condition like here,

00:39.930 --> 00:46.050
so here we definitely want to reverse these conditions so that only one of two elements is shown. Now

00:46.060 --> 00:46.820
important,

00:46.830 --> 00:48.890
this will not work with v-show,

00:48.900 --> 00:51.520
here we have to use v-if, of course

00:51.550 --> 00:55.200
we could also use v-if and v-else and then remove this one,

00:55.200 --> 00:57.300
so this second condition. So both will work,

00:57.300 --> 01:01.710
v-if with reverse conditions or v-if and v-else, v-show will not work,

01:01.710 --> 01:02.960
important.

01:03.030 --> 01:08.000
So now with this set up, if I reload my application and we show alert,

01:08.370 --> 01:11.310
well we don't really see a fade animation here,

01:11.520 --> 01:14.700
we just see this instant popping between both

01:15.000 --> 01:20.080
and the reason for this is that when using the same element twice as we do here with div

01:20.100 --> 01:26.050
but it would be the case for any element, vuejs is not able to differentiate the two. For vuejs

01:26.110 --> 01:32.130
it's the same, so it only swaps the content, it's not able to really swap the elements themselves which

01:32.130 --> 01:35.410
would be needed to attach the classes correctly,

01:35.490 --> 01:37.400
therefore we have to key them.

01:37.440 --> 01:44.400
We have to add this key property attribute here which is an attribute not available by default but recognized

01:44.400 --> 01:49.920
by vuejs to give each div or each element here in general a unique key,

01:49.920 --> 01:56.920
now that unique key here could simply be info for the first div and then warning for the second.

01:56.940 --> 01:57.740
That's enough,

01:57.750 --> 02:04.670
the important thing is just that they are well different, that they differ and that they are unique.

02:04.680 --> 02:11.890
Now with this in place, if we save this, here now you see at least we get some fading going on

02:11.900 --> 02:16.800
but what's really ugly is that they jump like this, so

02:16.820 --> 02:21.600
the new one gets animated in before the old one was removed from the dom,

02:21.620 --> 02:27.580
this is why we have these extra line and then have it snap up once the space is there.

02:27.800 --> 02:30.650
Well that is really not beautiful,

02:30.710 --> 02:32.630
really not what we want here, 

02:32.720 --> 02:35.470
Now how can we fix that?

02:35.480 --> 02:39.630
This issue stems from the default behavior transition has,

02:39.650 --> 02:41.240
it is not really an issue,

02:41.420 --> 02:45.820
if you were to have these positions, excuse me, these elements placed with position

02:45.860 --> 02:52.120
absolute for example, they would lie on top of each other and you would maybe get the desired result.

02:52.310 --> 02:58.460
But like here when you have the documents or the elements, excuse me, really positioned beneath each other,

02:58.620 --> 03:03.230
that's not looking great. We can override this default mode

03:03.240 --> 03:09.230
vuejs uses here and again as everything, you can dynamically bind this with a colon, here I will hardcode it

03:09.320 --> 03:12.680
though. You have two modes to choose from,

03:12.680 --> 03:15.470
you can use out in and in out.

03:15.510 --> 03:18.200
Now out in means let the old element

03:18.230 --> 03:23.670
animate out first and then animate in the new one and in out does the opposite.

03:23.930 --> 03:25.900
So with mode out inset

03:25.900 --> 03:32.240
now, if I reload this, we should see that this bottom div now first fades out before the new one fades

03:32.270 --> 03:33.400
in

03:33.590 --> 03:38.340
and that's in case that's actually what we see. Now the jumping still occurs because we got three other divs

03:38.430 --> 03:44.210
which get removed but we see that this div really does animate out before then animating in

03:44.430 --> 03:48.130
and that looks much much nicer than the other case.

03:48.150 --> 03:53.200
Again ignore the jumping which stems from the other divs on this page, this div here animates fine,

03:53.220 --> 03:57.330
it waits for the old one to be removed before it animates in a new one.

03:57.390 --> 04:04.090
So with key and mode, we make sure that we get the transition between two elements we want to get.

04:04.110 --> 04:09.450
Now of course all the other things you learned applies just as well here for these transitions between two

04:09.450 --> 04:10.030
elements,

04:10.200 --> 04:12.400
just make sure to use v-if and v-else 

04:12.420 --> 04:19.350
or v-if multiple times with different conditions so that in the end, only one element is visible on

04:19.350 --> 04:19.840
the page,

04:19.890 --> 04:22.940
this is important and v-show won't work.

04:22.950 --> 04:30.090
And with that, we really learned a lot about the transitioning of one element or of two elements,

04:30.090 --> 04:36.570
now I want to wrap up these basics about this transition component here by having a look at how we can

04:36.570 --> 04:40.220
use javascript to animate everything instead of css.
