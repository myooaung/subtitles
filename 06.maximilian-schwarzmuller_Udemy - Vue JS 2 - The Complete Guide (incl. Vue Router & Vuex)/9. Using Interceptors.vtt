WEBVTT

00:02.850 --> 00:09.260
In the last lecture we had a look at global default, global request configuration, in this lecture I want

00:09.260 --> 00:11.050
to dive into interceptors,

00:11.150 --> 00:17.960
that's another useful feature axios supports. Interceptors are functions you can define which should get

00:17.960 --> 00:24.700
executed on every request that leaves the app or every response that reaches it,

00:24.740 --> 00:30.960
you also do this on the axios instance itself by accessing the interceptors object there.

00:31.220 --> 00:35.900
Then you can choose between request or response depending on which kind of interceptor you want

00:35.900 --> 00:38.480
to create, I'll choose requests here

00:38.810 --> 00:44.440
and then you add a new interceptor by using the use method. The use method

00:44.450 --> 00:51.560
now takes a function, a normal function or an arrow function which I will use here,

00:51.560 --> 00:56.210
this function receives the request configuration as an argument

00:56.410 --> 01:02.150
and inside this function, you at least have to return this configuration otherwise you will block the

01:02.150 --> 01:03.250
request.

01:03.260 --> 01:06.100
Now I will simply log the config here

01:06.110 --> 01:09.340
but of course and that's the cool thing about an interceptor,

01:09.350 --> 01:11.100
you could also manipulate it,

01:11.150 --> 01:18.350
you could set config headers and there simply set some global authorization header or something

01:18.350 --> 01:19.410
like that.

01:19.790 --> 01:26.630
You can do whatever you want here, you can manipulate the request configuration to for example step in,

01:26.660 --> 01:33.200
check if something is the case and then on the fly adjust the config, for cases where some generic set

01:33.200 --> 01:38.990
up like here where every request is targeted might be too generic.

01:40.310 --> 01:46.340
So for now again, I'll would just log it and I will also add another interceptor, again by using the

01:46.340 --> 01:50.510
interceptors object and then targeting the response,

01:50.560 --> 01:57.080
there we can also register a new interceptor by using to use keyword and there, I will actually

01:57.080 --> 01:58.960
get the response and input,

01:58.970 --> 02:04.900
we could use a normal function here too and there I will also need to return a response

02:04.970 --> 02:09.970
otherwise other code in my application which waits for it will never receive it.

02:09.980 --> 02:12.930
Keep in mind interceptors are always just like middleware,

02:12.950 --> 02:14.360
they run in between,

02:14.360 --> 02:18.200
they should rarely block the response or the request.

02:18.670 --> 02:24.750
So here I return the response and now I simply want to console log the response here too.

02:25.080 --> 02:32.150
If we now save this and we go back to the application and reload and go back to the console,

02:32.210 --> 02:37.350
you actually see we got more logs here, now to identify what's coming from where,

02:37.460 --> 02:39.310
let me adjust the console logs,

02:39.440 --> 02:46.600
let's say request interceptor here for the first one and still also print the config

02:46.880 --> 02:52.800
and here we got the response interceptor and still print the response.

02:52.820 --> 03:00.520
So now with that, let me clear the console and simply reload

03:00.670 --> 03:07.100
and now we see response interceptor here and request interceptor earlier.

03:07.390 --> 03:09.930
Now the request interceptor logs the config

03:09.970 --> 03:15.280
and as I said, there you could have stepped in and added or adjusted the headers, 

03:15.280 --> 03:23.080
here we see our custom accepts header which of course deliberately is not the valid normal accept header

03:23.140 --> 03:28.860
so that we can see that it was added otherwise this default header would have been added by axios anyways

03:28.930 --> 03:31.590
so we wouldn't have seen if our header works or not.

03:31.750 --> 03:34.090
We see our custom aauthorization header

03:34.300 --> 03:40.990
and as I said, we could have stepped in and we could have set config headers and then for example

03:40.990 --> 03:48.960
added something to add our own header, there we don't have to access comment or get or post because

03:48.960 --> 03:51.500
we already are on a request level.

03:51.960 --> 03:55.380
So this is the request config which we could have edited,

03:55.710 --> 04:02.430
we can now also see the response interceptor which of course holds the exact same response as we later use

04:03.000 --> 04:07.770
and we could have stepped in and transformed the response here too though of course you should always

04:07.770 --> 04:13.620
use all these features with caution to not accidentally break your app.

04:13.640 --> 04:22.370
Now these are interceptors, how we can add them, sometimes you also want to remove them and to demonstrate

04:22.370 --> 04:23.060
this,

04:23.180 --> 04:26.540
I will simply instantly remove both,

04:26.630 --> 04:32.240
so we actually shouldn't see something logged to the console. So we can remove interceptors by still

04:32.240 --> 04:36.120
accessing interceptors request or response,

04:36.320 --> 04:38.710
here I'll start with request again

04:39.050 --> 04:40.100
and then you can call

04:40.140 --> 04:48.100
eject. Eject now needs to get the ID of the interceptor and that ID is actually returned from the use

04:48.110 --> 04:48.860
method,

04:48.860 --> 04:50.420
you just have to store it,

04:50.630 --> 04:59.310
so I'll create a new constant, request interceptor where I store the result of that use call where I

04:59.520 --> 05:05.940
set my request interceptor and then I'll do the same for the response interceptor here,

05:06.030 --> 05:14.520
now I can eject the request interceptor and then duplicate it to do the same for the response interceptor.

05:14.520 --> 05:17.460
Now with that we instantly eject our interceptors

05:17.460 --> 05:19.640
so we actually shouldn't see any effect,

05:19.650 --> 05:22.940
we shouldn't see any console logs in our application anymore.

05:23.250 --> 05:30.660
If I reload this page, we indeed only see our old console logs and no longer see the console logs from

05:30.660 --> 05:35.940
within the interceptor because it's basically ejected right before it ever has a chance to intercept

05:35.970 --> 05:36.760
anything.

05:36.960 --> 05:42.480
This of course is not that most useful example but you might have cases where you want to eject them

05:42.480 --> 05:43.960
depending on some condition,

05:44.040 --> 05:47.260
well the eject function is how you can do that.
