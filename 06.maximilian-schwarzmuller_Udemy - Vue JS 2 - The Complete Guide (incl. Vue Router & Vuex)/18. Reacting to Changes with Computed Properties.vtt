WEBVTT

00:02.070 --> 00:05.970
Let's come back to the reactivity I was talking about earlier.

00:06.070 --> 00:13.180
Until now, we had rather simple examples, we clicked a button, we changed one property, we kind of touched

00:13.180 --> 00:20.000
on that if we wanted to output some text depending on another property. Remember that counter where I said

00:20.010 --> 00:25.730
greater than 10 and smaller than 10? Well I kind of rebuilt the example here,

00:25.780 --> 00:31.930
this time I'm not outputting the text or I'm not outputting this code here, where I check if it is

00:31.930 --> 00:36.550
greater than 5 here in my template in the string interpolation

00:36.560 --> 00:39.800
though I could do that but I outsourced it here.

00:40.030 --> 00:41.710
This leads to the following behavior,

00:41.800 --> 00:48.430
if I click here, we see smaller than 5 at the beginning but once we go over 5, it changes to greater than

00:48.430 --> 00:55.540
5 or greater 5. That is nice and that's easy to maintain for this simple application.

00:55.540 --> 01:00.080
Now imagine this counter variable would be used in a lot of different places,

01:00.100 --> 01:04.060
a lot of other properties would depend on the counter here,

01:04.060 --> 01:09.400
it could quickly get problematic to manage them all in this increased function or think you would have

01:09.400 --> 01:15.700
another place where you set this counter, then you would need to keep both in sync and well, that

01:15.730 --> 01:18.380
is really hard to maintain,

01:18.400 --> 01:21.450
it would already get harder to maintain

01:21.580 --> 01:30.220
if I were to add the decrease button here, execute the decrease method and simply duplicate the increase

01:30.230 --> 01:35.160
method here to now also have the decrease method.

01:35.410 --> 01:37.860
And I do the same check as before again,

01:38.050 --> 01:42.650
so here I can go over 5 and then back to smaller.

01:42.820 --> 01:48.620
This works but you notice that I have this code in two places and if I would have other source of setting the

01:48.640 --> 01:57.700
counter, it would quickly get unmaintainable. Thankfully, vuejs makes it much easier than that to model

01:57.700 --> 02:00.740
such cross property dependencies.

02:01.390 --> 02:04.140
I'll get rid of both the functions here,

02:04.150 --> 02:11.380
I'll get rid of the whole methods object and I'll rewrite the code to simply increase the counter here and

02:11.380 --> 02:12.970
decrease it here.

02:12.970 --> 02:15.340
Now how do I update my result

02:15.340 --> 02:19.240
now? I can't set the logic here,

02:19.240 --> 02:21.800
data is not reactive

02:21.850 --> 02:28.320
so I can't say this counter greater five and then execute my code here,

02:28.330 --> 02:29.590
this will not work,

02:29.800 --> 02:37.120
that is not how the data property works but turns out we do have a way to still do that.

02:37.210 --> 02:40.450
The first one would be one we already saw in action,

02:40.480 --> 02:46.130
if I reintroduce my methods I could add a result method here

02:46.330 --> 02:54.670
and all I could do here would be I can simply return this statement from before where I simply check

02:54.730 --> 03:03.760
if this counter is greater than 5 in which case I could say greater 5 and otherwise say smaller than

03:03.830 --> 03:06.030
5, whatever text you want output.

03:06.160 --> 03:13.330
I could then call result here, get rid of this result property and upon re-rendering this, you would

03:13.330 --> 03:15.120
see it now works again.

03:15.150 --> 03:17.070
This is one way of doing it,

03:17.080 --> 03:23.350
now we already improved this a lot because now we don't have to worry about the different sources influencing

03:23.350 --> 03:24.360
our counter.

03:24.970 --> 03:35.290
It still has a disadvantage though, if I add a third button here where I do something totally different,

03:35.690 --> 03:47.190
let's say I have my second counter which I increment here, so increment would increase second and then

03:47.190 --> 03:57.150
I'll add it here, if I have such a set up, this result method here will still get executed on upon each

03:57.240 --> 04:03.540
updating of the page, vuejs will update the page whenever it finds the need to do so which will be

04:03.540 --> 04:06.000
whenever one of its data properties changes,

04:06.000 --> 04:13.210
we obviously since we output them here need to update the page and it doesn't know if the result function

04:13.210 --> 04:18.040
we execute here does use one of the properties we changed.

04:18.150 --> 04:24.090
So it doesn't know if the change of second counter influences the result method and therefore it re-executes

04:24.090 --> 04:26.520
this method as well.

04:26.520 --> 04:32.520
This might not be a problem for this rather lightweight function here but imagine you have a function

04:32.520 --> 04:36.360
which takes longer to run, which runs more complicated code

04:36.510 --> 04:44.750
and which you don't want to re-execute even though it is not needed to be re-executed. For this case,

04:44.760 --> 04:48.960
we got a new property on our global, and our view

04:48.960 --> 04:51.670
instance here, it's called computed

04:51.810 --> 05:01.140
and it also takes a javascript object, just like data and methods. The computed property or object here also

05:01.140 --> 05:03.390
allows us to store properties

05:03.570 --> 05:07.460
for example output do not reuse result

05:08.040 --> 05:11.890
but here, it is not directly the data

05:11.940 --> 05:19.710
instead this also is a function where we return the value this property here should eventually have

05:19.710 --> 05:22.360
so I can copy the code from down there.

05:24.280 --> 05:25.510
It looks the same

05:25.510 --> 05:32.340
as this result method here which as a side note I just realized I wrote as an ES6 function,

05:32.350 --> 05:37.090
this would be the ES5 syntax, both works as you see, just a little spoiler, I wanted to show this

05:37.090 --> 05:37.560
later

05:37.600 --> 05:41.710
but anyways, this is the code which will run in every browser, the other will not,

05:41.710 --> 05:43.300
sorry about that.

05:43.330 --> 05:44.720
Back to the output though,

05:44.740 --> 05:46.200
that's the interesting part.

05:46.210 --> 05:48.410
It looks like the result method here,

05:48.430 --> 05:50.290
it just has a different name

05:50.560 --> 05:53.350
but actually we use it differently.

05:53.410 --> 05:55.330
I can output both

05:55.340 --> 05:56.540
here, let's say

05:56.860 --> 06:01.570
so I'll use string interpolation again and I'll use output like this,

06:01.570 --> 06:02.550
notice the difference,

06:02.620 --> 06:03.790
no parentheses.

06:03.790 --> 06:05.820
I don't call that as a function,

06:05.860 --> 06:11.800
I use it like a property, like property stored in my data object, it isn't stored there

06:11.820 --> 06:13.960
but I can use it in just the same way.

06:13.960 --> 06:20.860
And that's important to keep in mind, everything stored in computed can be used just like you use

06:20.860 --> 06:23.800
a property in the data object.

06:23.800 --> 06:31.380
The interesting thing about it is, for this if I save that, we see smaller than 5 twice

06:31.390 --> 06:34.300
and we see that both updates just fine,

06:34.470 --> 06:40.750
the difference behind the scenes is the result function gets called every time because vuejs doesn't

06:40.810 --> 06:49.060
know if it needs to rerun this, it doesn't know if we use any property in this function which was changed.

06:49.540 --> 06:51.800
For computed properties,

06:51.820 --> 06:55.420
it does analyze the code and it is aware of this,

06:55.570 --> 07:03.160
so for a computed property it is aware that output is not interested in the second counter at all and

07:03.160 --> 07:04.610
thus will not be run

07:04.660 --> 07:08.880
if I hit to increase second button and I can prove this to you.

07:09.250 --> 07:17.800
Let's simply add a console log where I would say computed here in the case of my computed function and

07:17.800 --> 07:24.380
for the normal method here, I will say method. With that set up

07:24.460 --> 07:29.800
and I just realized this should be second counter here of course, with that corrected, I can go to

07:29.800 --> 07:36.440
my counter and simply output my second counter here as well

07:36.640 --> 07:41.440
and if I now hit control enter and open up my console,

07:41.440 --> 07:42.640
watch what happens.

07:42.640 --> 07:46.350
I'm going to hit increase first, we see method and computed,

07:46.540 --> 07:53.320
so both get executed here which makes sense because I changed my counter and my output, my computed property

07:53.320 --> 07:55.000
here depends on this counter,

07:55.030 --> 07:59.690
so it makes sense that it gets recalculated because again, it depends on it.

07:59.890 --> 08:02.000
The result method gets executed anyways

08:02.020 --> 08:04.540
as I explained and I can prove this.

08:04.540 --> 08:06.940
Watch what happens if I hit increase second,

08:07.030 --> 08:12.700
keep in mind this only increases the second counter, something which is not used in my computed output

08:12.700 --> 08:13.830
property here,

08:14.200 --> 08:20.180
thus if I hit it, we only see method being added, computed is not getting executed,

08:20.350 --> 08:24.460
so this function here is not getting executed at all,

08:24.460 --> 08:30.640
only this function because again, it gets executed all the time because vuejs is not aware of what's

08:30.640 --> 08:31.910
inside of it.

08:31.990 --> 08:37.940
It is of my computed property here though which is why we don't see computed when clicking increase

08:37.960 --> 08:44.240
second. This is how we can use and how we should use computed properties

08:44.410 --> 08:51.160
if we get dependencies like this, it is the best way to do it because we're caching the result,

08:51.250 --> 08:54.370
we're not unnecessarily recalculating it

08:54.430 --> 08:57.030
if there is no need to recalculate.

08:57.220 --> 09:05.200
So only use this function way here if you know that you don't want to cache the result, that you want

09:05.200 --> 09:11.980
to recalculate every time the dom gets updated because for some reason, you know that this is required

09:12.250 --> 09:18.700
even though you might update a property which is not used in this function you're calling here at all.

09:18.700 --> 09:23.130
There might be such cases but most of the time it probably isn't the case

09:23.200 --> 09:29.380
so make sure to really take advantage of this great concept of computed properties here.
