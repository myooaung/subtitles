WEBVTT

00:01.930 --> 00:04.180
So that's the finished vuex pattern.

00:04.180 --> 00:10.580
I could imagine you kind of understood how it works but don't feel 100% comfortable using it,

00:10.600 --> 00:11.390
that's normal,

00:11.410 --> 00:16.930
it's something you have to practice and you have to use and use it in the final course project so that

00:16.960 --> 00:22.390
hopefully gives some additional confidence in this pattern or in using it.

00:22.390 --> 00:28.450
Also be aware, you don't have to use it, if you have a tiny or medium sized application, setting up all

00:28.450 --> 00:33.640
these mutations, actions and getters may be too much boilerplate, maybe you don't want to use it in such

00:33.640 --> 00:34.690
a case,

00:34.900 --> 00:41.320
anyways I want to reiterate how this all works to really make this 100% clear.

00:41.380 --> 00:46.870
We do have our central store and this store gets adjusted or changed by our mutations,

00:46.870 --> 00:49.100
mutations have to be synchronous,

00:49.180 --> 00:57.240
therefore we oftentimes use actions to commit our mutations, actions are dispatched by our components

00:57.760 --> 01:04.730
and it is a good practice to always use actions even for non-asynchronous mutations or tasks

01:04.900 --> 01:11.200
but you don't have to, if you don't want to use async code, you are fine to just commit your mutations

01:11.200 --> 01:15.390
directly from your components without using actions in between.

01:15.430 --> 01:17.220
However you do it, in the end,

01:17.230 --> 01:23.140
of course you not only want to change the state, you also want to use it and for that, we got getters. Getters

01:23.140 --> 01:30.370
allow you to access your state in different components and getters have the nice benefit of these components

01:30.730 --> 01:34.500
automatically getting updated whenever your state changes,

01:34.660 --> 01:37.960
let's see this in our application. In our application,

01:37.960 --> 01:40.040
everything starts here in the store,

01:40.060 --> 01:44.620
we set up our initial state which holds this counter which is 0 initially.

01:44.690 --> 01:50.140
Now this state is nice but it doesn't help us if we can't use it in our application,

01:50.230 --> 01:54.480
therefore we want to see it in some components. To see it,

01:54.490 --> 01:59.260
we set up some getters to have reusable code for accessing our state,

01:59.320 --> 02:05.770
we do use these getters in the result and in the AnotherResult component. In AnotherResult, we use map

02:05.770 --> 02:06.340
getters,

02:06.370 --> 02:12.790
this little helper to create a couple of computed properties automatically which we then can use to

02:12.880 --> 02:17.660
access our state or our properties in the state

02:17.680 --> 02:18.370
and in result,

02:18.370 --> 02:24.220
we do it directly by accessing this.$store.getters since we only use one getter here, we could

02:24.220 --> 02:31.510
use map if we had getters here too of course. Getting is nice but in order to adjust and change our state, we

02:31.510 --> 02:32.870
use mutations,

02:33.010 --> 02:37.910
mutations take the state as input and optionally they also get a payload,

02:37.960 --> 02:42.910
the payload is basically data we pass to mutate the state. Here

02:42.910 --> 02:48.150
we then directly manipulate the state and therefore override the old state.

02:48.400 --> 02:55.660
We can commit mutations directly from our components but oftentimes, we will use actions in between and

02:55.660 --> 02:59.270
we do have to use actions if we want to run asynchronous tasks,

02:59.500 --> 03:05.170
these actions are set up in such a way that the first argument is the context which is almost the same

03:05.170 --> 03:11.770
as the store but does have some minor differences and there, we mainly need the commit method which we

03:11.770 --> 03:13.820
use to commit the mutations,

03:13.900 --> 03:20.560
we can use async code in our actions as long as the committing is always done synchronously,

03:20.590 --> 03:26.560
so as long as we don't have async code in our mutations. We also can of course get a payload for our

03:26.560 --> 03:33.230
actions and we do fire the actions in our counter and AnotherCounter method, or components excuse me,

03:33.510 --> 03:40.640
where we set up our methods and use map actions with the spread operator here to quickly create or let

03:40.860 --> 03:44.920
vuex create the actions we need to have to access our actions.

03:45.220 --> 03:51.280
And that's really all, this is how a vuex application set up and how we can manage the state there.

03:51.660 --> 03:52.960
In the next videos,

03:52.960 --> 04:01.120
I want to have a look at how we could split out the store.js file into multiple files for bigger applications

04:01.840 --> 04:08.970
because this file will get crowded pretty quickly and some additional things on how to optimize

04:08.990 --> 04:11.650
this for using it with bigger applications.
