WEBVTT

00:01.840 --> 00:04.290
So we want to make these action buttons here work,

00:04.300 --> 00:07.630
we want to be able to deal damage and to heal ourselves.

00:08.020 --> 00:12.910
That will involve a bit more code since this really is our core logic of this game

00:12.910 --> 00:18.940
but let's start simple by hooking up these buttons to events or to event listeners. In my html

00:18.940 --> 00:20.060
code,

00:20.080 --> 00:21.140
here are the buttons

00:21.160 --> 00:26.710
and of course I want to add listeners with the add or v-on syntax, whatever you prefer.

00:26.980 --> 00:33.850
So I want to listen to a click event here and here, I want to execute the attack method, for special

00:33.850 --> 00:34.410
attack, I

00:34.440 --> 00:38.240
also want to listen to click and execute special attack,

00:38.260 --> 00:44.010
I will have to create all these methods here of course. For heal, I want to execute heal

00:44.260 --> 00:45.540
unsurprisingly

00:45.940 --> 00:48.660
and you guessed it, what I want to execute here for

00:48.650 --> 00:53.200
give up, give up even though we never give up, do we?

00:53.200 --> 00:56.440
So this is the click listener part,

00:56.440 --> 01:00.450
next I want to create these functions in my app.js file.

01:00.730 --> 01:07.830
So here I in the methods object, I add the attack function like this,

01:08.910 --> 01:14.760
then I add the special attack function, like this,

01:14.770 --> 01:18.800
I also want to add the heal function here

01:20.640 --> 01:25.360
and let's add the give up function,

01:25.380 --> 01:29.870
these are the four functions we can execute through these buttons

01:29.940 --> 01:34.370
Now let's think about which logic belongs into these functions, in attack

01:34.380 --> 01:36.890
we want to deal damage to the monster, the monster

01:36.890 --> 01:41.740
also in each of these cases except for give up also deals damage to us.

01:41.970 --> 01:47.140
So we want to deal damage to the monster in attack, get damage and then kind of yes,

01:47.280 --> 01:53.970
end the turn or simply be finished with that. In special attack it's the same but we want to do more damage

01:54.360 --> 01:54.980
and in heal,

01:54.990 --> 02:00.510
we want to heal ourselves instead of deal damage and in give up, we want to reset and restart the game or

02:00.570 --> 02:02.320
start a new game.

02:02.370 --> 02:03.700
How do we do that?

02:03.750 --> 02:06.870
Let's start at the top with attack here,

02:06.930 --> 02:11.770
the first thing is that we need to calculate the damage we deal,

02:12.000 --> 02:19.880
so I create a new variable called damage here and damage shall be a random number.

02:19.890 --> 02:24.680
Now we also want to control the highest and lowest possible damage,

02:24.810 --> 02:31.230
so how could we do this? We could create or we can generate a random number with math.random but

02:31.230 --> 02:34.740
this will be between 0 and 1, 1 excluded,

02:34.770 --> 02:37.350
so this is not what we want,

02:37.350 --> 02:47.340
we want to have a maximum damage. So let's create Max here and let's set it to 10 for example,

02:47.580 --> 02:52.280
we also will set up a minimum damage, damage min which is 3.

02:52.350 --> 03:01.600
Now since math.random is between 0 and 1, we shall multiply it with max to now be between 0 and well 10,

03:01.650 --> 03:02.690
but 10 excluded,

03:02.700 --> 03:04.770
so 9..999,

03:04.800 --> 03:06.580
it's a floating point number.

03:06.780 --> 03:14.530
So this is still not what we want, we want to have an integer, 10 included not excluded. To get there,

03:14.550 --> 03:20.880
I will wrap this in parentheses and I will get the floor of that

03:20.940 --> 03:28.110
with the math.floor function where I pass this random number between 0 and 9,99999.

03:28.230 --> 03:33.970
Now we have a random number, an integer number between 0 and 9,

03:34.350 --> 03:38.330
well if I add 1 here, we get 1 between 1 and 10 so

03:38.350 --> 03:39.750
we're almost there

03:39.990 --> 03:44.950
but I said I want to have a minimum damage of 3 and not 1.

03:45.240 --> 03:52.350
So in order to do this, I will use the math.max function to get the maximum number and that either is

03:52.350 --> 03:55.000
my random number here or the minimum.

03:55.020 --> 04:00.130
So if my random number is 1 or 2, then we'll take the minimum 3

04:00.240 --> 04:02.060
otherwise we'll take the random number,

04:02.250 --> 04:06.240
so with that we get a random number between 3 and 10.

04:06.480 --> 04:08.320
That's some general arithmetic,

04:08.340 --> 04:10.320
nice to know anyway I guess.

04:10.500 --> 04:12.330
So this is the random damage

04:12.330 --> 04:14.640
I want a deal here

04:14.700 --> 04:19.420
and also I will use a similar calculation for the monster damage.

04:19.860 --> 04:27.570
So here for this random damage, I then want to take the monster health and reduce it by this damage we

04:27.570 --> 04:28.530
dealt,

04:28.890 --> 04:36.360
now of course the monster also shall damage to us here and therefore, we basically need to run the same

04:36.360 --> 04:39.510
logic for the monster.

04:39.510 --> 04:44.210
Now let's say the monster should have a little edge on us and should deal more damage,

04:44.250 --> 04:49.020
so for that we might set max back to or change it to 12

04:49.200 --> 04:56.650
and min to 5 and then here, I'll recalculate the damage based on that

04:56.790 --> 05:02.460
and then I can say this player health is reduced by damage.

05:02.490 --> 05:04.980
Now clearly we're repeating ourselves here,

05:05.010 --> 05:12.620
we have a lot of duplicate code so we should refactor this and outsource it in different functions

05:12.690 --> 05:16.890
but before doing so, let's see if this generally works.

05:16.890 --> 05:25.050
If I save this and I reload my application and start a new game, now let's click attack. It should change

05:25.050 --> 05:27.440
so let's see in here in the index.html,

05:27.480 --> 05:30.690
well yeah that should be attacked not attach, let's see the other

05:30.700 --> 05:38.650
other command, should be right, so with that, reloading should now correctly reduce the health.

05:38.740 --> 05:44.040
Now let's reduce the health, it seems like we're losing which is not too surprising with because we would

05:44.040 --> 05:49.730
require a lot of luck since the monster has a higher minimum and maximum damage.

05:49.950 --> 05:55.080
So let's continue and lose our battle and we're dead and nothing happens,

05:55.080 --> 05:57.970
we're getting a negative health here now.

05:58.350 --> 06:00.470
So the app is not working how it

06:00.470 --> 06:05.280
should, we also need to check if we're winning or not.

06:05.280 --> 06:12.660
So the next tasks are refactoring this code and checking if we're losing or not, let's implement

06:12.660 --> 06:18.380
this check first so that we can correctly recognize if we're dead or not.

06:18.570 --> 06:24.830
How do we check for that? Well after we dealt damage to the monster, we want to check if we won

06:25.150 --> 06:29.430
and after the monster dealt damage to us, we want to check if the monster won.

06:29.530 --> 06:31.000
So let's start here,

06:31.330 --> 06:38.770
if the monster health here is smaller or equal to zero, then we won.

06:39.040 --> 06:43.230
So here we wanna output alert for now,

06:43.240 --> 06:47.050
you won, like this.

06:47.050 --> 06:47.730
We also want

06:47.740 --> 06:52.900
let's say want to set game is running to false again. I'll change this later on but for now, this is all

06:52.900 --> 06:53.850
I want,

06:54.010 --> 06:57.370
also I don't want to execute the code down there,

06:57.370 --> 07:01.860
the monster shouldn't deal damage to us because we won, the game is over.

07:02.200 --> 07:05.230
So I'll return here to finish this function,

07:05.230 --> 07:06.510
exit out of it.

07:06.850 --> 07:13.240
The same is true after the monster dealt damage to us, here we want to check if the player health is smaller

07:13.240 --> 07:14.440
or equal to zero

07:14.470 --> 07:19.520
in which case we would have lost and now the game is also over and we don't need a return here,

07:19.570 --> 07:21.470
there is no code after that.

07:21.850 --> 07:27.130
So with that, if my reload this, start a new game and we lose again,

07:27.370 --> 07:35.710
you see now we got you lost and correctly, the game is reset and we can start a new one here. So that

07:35.770 --> 07:37.670
already works.

07:37.680 --> 07:43.870
Now we get even more to refactor now because we are also kind of repeating this code here and we will

07:43.870 --> 07:50.020
have to copy this checking here if we lost or won into each of the following functions here where we

07:50.020 --> 07:51.870
have a special attack and heal.

07:51.970 --> 07:58.750
So it's definitely time to refactor our code and create some new functions for checking the win condition

07:59.020 --> 08:00.570
and calculating the damage.
