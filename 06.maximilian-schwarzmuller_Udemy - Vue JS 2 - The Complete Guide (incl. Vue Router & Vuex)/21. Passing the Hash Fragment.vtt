WEBVTT

00:02.290 --> 00:04.680
So now that we're able to animate this,

00:04.690 --> 00:09.060
let me also have a look at something else which we haven't covered yet.

00:09.250 --> 00:16.660
Sometimes you want to navigate to a specific part on the page you're navigating to marked with a hash

00:16.660 --> 00:22.480
tag at the end and then the anchor name of some element in your html code which has this anchor

00:22.480 --> 00:23.940
as an ID.

00:23.950 --> 00:30.710
Let me simulate this, for example on the user edit page here,

00:30.730 --> 00:41.080
let's say we do have a div in there and this div does have a height of 700 pixels, so that it needs or so that

00:41.100 --> 00:43.940
it makes sure that we need to scroll.

00:43.990 --> 00:51.130
So we do have this height of this div and below this div, we get some extra data in a paragraph and

00:51.130 --> 00:55.690
this paragraph has an ID of data, let's say.

00:55.690 --> 01:01.690
Now if I go to the edit page, I'm on it right now, you see here's data at the bottom,

01:01.690 --> 01:08.230
if I now enter #data, the browser will automatically jump down there, that's default browser behavior.

01:08.230 --> 01:15.400
Now if we navigate in our application, we first also might want to be able to pass this extra data hash

01:15.400 --> 01:16.520
fragment here

01:16.720 --> 01:20.590
and second, we want to simulate this behavior of jumping down there

01:20.740 --> 01:26.330
or maybe generally, we want to control where the page scrolls to once we navigate.

01:26.830 --> 01:33.130
So we can do this by first having a look at how we can pass this hash segment,

01:33.460 --> 01:39.050
so let's say when we click on user detail here where we already passed the query params,

01:39.190 --> 01:41.620
we're now passing a third parameter here

01:41.920 --> 01:47.780
and this third parameter is now the fragment we want to use.

01:47.800 --> 01:55.060
Now since this is getting rather long here, I will quickly set up a script here and export my javascript

01:55.060 --> 02:01.090
object and store this in a separate property here in my data object,

02:01.300 --> 02:04.900
so here this shall be my link,

02:04.900 --> 02:05.680
let's say

02:05.890 --> 02:12.130
and now here this simply is this javascript object from up here, so I can simply grab the whole object

02:12.640 --> 02:14.450
and enter it here

02:14.560 --> 02:22.450
but now I'll simply restructure this to make it look nicer here so that it's easier to see or to understand

02:22.450 --> 02:26.200
what we're all passing with this object.

02:26.240 --> 02:30.120
So I'd say that looks much better and then I can simply pass the link here,

02:30.130 --> 02:35.130
it is a dynamic binding in the end so I can pass my property which represents this object,

02:35.440 --> 02:40.160
and for this to work, I need to make sure that here I use this route because I'm now inside this vue

02:40.210 --> 02:41.350
instance.

02:41.620 --> 02:45.160
And now with that, I can also pass my hash fragment,

02:45.160 --> 02:46.450
now this simply is a string,

02:46.450 --> 02:48.460
for example hash tag data.

02:48.460 --> 02:53.620
What this will do is that once I go back to my application, to the user page here and I select the user

02:53.620 --> 02:56.790
and click edit user we see hash tag data appended to the end

02:56.920 --> 03:00.890
but what you also noticed is it doesn't scroll down there

03:01.150 --> 03:07.390
but if I were to load this in a browser and come from another page I should say, so if I first go

03:07.390 --> 03:11.590
to home and now enter this, you see it does jump to the end.

03:11.590 --> 03:16.450
Now I want the same behavior with vuejs because right now it doesn't,

03:16.450 --> 03:18.850
so you see how we can pass a hash fragment

03:18.910 --> 03:24.190
but now in the next video, we want to have a look at how we can control the scrolling behavior when we

03:24.190 --> 03:26.010
do navigate to another page.
