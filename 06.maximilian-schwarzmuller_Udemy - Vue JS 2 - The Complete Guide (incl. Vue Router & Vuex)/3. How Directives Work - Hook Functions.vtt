WEBVTT

00:01.770 --> 00:07.890
Important for configuring a directive are the five hooks such a directive has, kind of like lifecycle hooks

00:07.890 --> 00:08.750
on a component,

00:08.810 --> 00:15.150
a directive has also five methods we can hook in to perform things with the element the directive sits

00:15.150 --> 00:21.810
on. The first hook is the bind hook, this is fired as soon as our directive is bound to the element,

00:21.810 --> 00:27.210
so as soon as we get access to the element therefore. Here we get three arguments passed into this method,

00:27.330 --> 00:34.950
the el argument refers to the element the directive sits on, the binding argument refers to the way this

00:34.950 --> 00:39.930
directive is set up so which arguments we may pass in, which modify as you may pass to it, we will see

00:39.930 --> 00:44.070
all of that and vnode refers to the node in the virtual dom,

00:44.130 --> 00:45.940
that's something you will rarely use.

00:46.110 --> 00:52.310
Especially important, the latter two arguments, binding and vnode should be treated as read only, don't

00:52.320 --> 00:58.070
change anything there inside of your directive because that really are things controlled by the vuejs

00:58.070 --> 01:01.500
and not something you should change at runtime.

01:01.590 --> 01:07.140
So this bind hook here occurs once the directive is attached to the element, thereafter we get the

01:07.140 --> 01:08.320
inserted hook,

01:08.400 --> 01:11.610
this of course as soon as it is inserted in the dom,

01:11.610 --> 01:14.840
so as soon as this element alters part of the dom

01:14.850 --> 01:18.320
but we can access it in the first hook already, that's important to understand,

01:18.420 --> 01:23.160
we don't need it to be inserted in the dom to be able to style it or do anything with it,

01:23.160 --> 01:26.590
it will reflect these changes once that is inserted anyways

01:26.790 --> 01:33.420
and there we get the same arguments. Then we get update, update is called whenever the component updates, though

01:33.420 --> 01:36.530
important, the children of that component haven't been updated yet

01:36.600 --> 01:39.870
and here we also get an extra argument, oldVnode.

01:40.110 --> 01:45.610
Well since it updated, we got the new node in the virtual dom and the old node, again

01:45.630 --> 01:49.190
both should be treated as read only as should be binding.

01:49.230 --> 01:53.290
We also got component updated, that is called once the component has been updated

01:53.310 --> 01:57.990
and the children in the component, so once everything has been updated, the arguments are the same as in the

01:57.990 --> 02:00.380
update method. And we got unbind,

02:00.420 --> 02:05.850
that is whenever the directive would be removed and there, we also got the element, the binding and the

02:05.850 --> 02:07.010
current virtual node.

02:07.110 --> 02:13.170
These are the five hooks, I'm going to say right away, you're going to use bind and update the most often

02:13.260 --> 02:18.600
and actually, I will show the whole example with just the bind node which is the important one because

02:18.600 --> 02:24.840
that is the one, well triggering whatever your directive should trigger when applied to an element, right.

02:24.930 --> 02:26.070
So let's see this in action.
