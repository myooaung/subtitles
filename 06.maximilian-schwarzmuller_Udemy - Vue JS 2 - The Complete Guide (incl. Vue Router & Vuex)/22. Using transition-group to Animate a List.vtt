WEBVTT

00:01.570 --> 00:10.230
The cool thing is you don't need to add any new css classes to be able to use transition group,

00:10.460 --> 00:12.400
it works just like transition

00:12.410 --> 00:18.140
so you can use the same css classes your name enter, your name enter active and so on.

00:18.140 --> 00:20.070
The same is true for javascript hooks,

00:20.120 --> 00:21.730
that's exactly the same,

00:21.830 --> 00:29.050
the only difference is the name of the component you are using here but that is only relevant for

00:29.060 --> 00:35.970
vuejs, you use it just like transition, wrapping the code you want to have in your transition group,

00:36.050 --> 00:41.180
by the way that should not include the unordered lists since we don't want to animate that so

00:41.210 --> 00:42.870
let me remove this.

00:43.280 --> 00:44.820
So just like this,

00:45.320 --> 00:49.980
and now this of course is more than one element because list item will be replicated.

00:50.030 --> 00:52.570
So therefore we'll need such a transition group,

00:52.820 --> 00:55.790
and now again usage is the same as for transition

00:55.790 --> 00:59.450
but behind the scenes, it now also works for multiply items.

00:59.570 --> 01:04.100
So here let's say we want to use our slide animation, so name is slide,

01:04.100 --> 01:10.850
we already set up all the class we need here and with that being set up, let's see if it now works out

01:10.850 --> 01:12.130
of the box,

01:12.510 --> 01:14.480
nope the whole list is gone,

01:14.480 --> 01:15.970
what happened here?

01:16.520 --> 01:23.180
It's kind of similar to the problem we had before with transitioning between two elements which used

01:23.270 --> 01:27.290
the same html tag like div here,

01:27.380 --> 01:33.650
we had to key them to let vuejs know which element is which, and for transition group, we always have to

01:33.650 --> 01:34.660
key the elements here

01:34.670 --> 01:42.410
even if they were using a separate tag name. So here we need to add a key because otherwise

01:42.490 --> 01:46.920
vuejs is not able to identify the individual items in the list,

01:46.980 --> 01:51.760
however it needs to be able to identify them because when it animates them,

01:51.770 --> 01:54.210
it also needs to move the existing elements

01:54.260 --> 01:59.540
and for that it needs to be sure that it moves the right element and for that, it needs a key because

01:59.540 --> 02:00.950
it can't identify them

02:00.950 --> 02:03.640
otherwise, each element needs a unique ID.

02:04.010 --> 02:07.480
So you can choose anything which is unique, here

02:07.520 --> 02:12.280
I will bind key with the colon because it's a dynamic binding

02:12.280 --> 02:18.290
I want to set up here to my number because each number is only part of this array once it's a perfectly

02:18.290 --> 02:20.260
valid unique key.

02:20.270 --> 02:26.810
Now with this in place, if we reload this, we see that the list is back and if I add it, we see it now

02:26.810 --> 02:34.430
smoothly animates in, though the one ugly thing is, also the case for removing it that everything jumps,

02:34.490 --> 02:39.060
so it snaps the list together after the element is removed

02:39.170 --> 02:44.050
and if I add one, it instantly jumps down to make room for the new element.

02:44.240 --> 02:50.390
It would be nice if that moving of elements would also be animated so that we really have a smooth animation

02:50.390 --> 02:52.620
going on here in our list, 

02:52.670 --> 02:54.690
turns out we can animate it,

02:54.980 --> 02:58.170
that's a big difference between transition group and transition.

02:58.220 --> 03:02.610
Yes we can use it the same way but it also has an extra here,

03:02.900 --> 03:05.920
it gives us access to a new css class.

03:06.200 --> 03:11.540
Besides slide-enter, slide-enter-active and so on because we're using slide animation here, the same would

03:11.540 --> 03:13.910
be true for fade of course if we use that,

03:13.910 --> 03:21.680
besides these classes, we also got slide move and this class is attached to any element which needs to

03:21.740 --> 03:27.110
change its place, for example because a new element was added, another element therefore needs to change

03:27.110 --> 03:32.210
the place because it means move down or when deleting element, it needs to move up

03:32.390 --> 03:38.030
and for this movement process, this slide move class here is attached to allow us to animate this as

03:38.030 --> 03:38.900
well.

03:38.900 --> 03:40.920
How shall we animate this then?

03:41.270 --> 03:48.110
Well we could simply say transition and then transition the change of the transformed property over

03:48.110 --> 03:56.180
one second, transform is this property we use here in the animation for example which vuejs will use behind

03:56.180 --> 03:58.560
the scenes for moving elements,

03:58.580 --> 04:01.260
so this is not related to our keyframes here,

04:01.420 --> 04:08.150
vuejs will always move elements behind the scenes by using transform, translate Y or X, whatever

04:08.150 --> 04:12.110
is appropriate to make them move their position.

04:12.110 --> 04:19.910
Now since vuejs will do that behind the scenes to change the position of an element, we can transition

04:19.910 --> 04:26.500
this property, this transform property to take advantage of this being used by vuejs to animate it.

04:26.630 --> 04:33.860
So what I'm telling css here is whenever the transform property is somehow changed and it is changed

04:33.860 --> 04:39.390
when vuejs uses translateX or translateY, whenever that happens,

04:39.780 --> 04:41.570
animate it over one second

04:41.720 --> 04:43.930
and this is why we will see such animation.

04:44.170 --> 04:51.170
However if I use it like this, what you will notice is that if I reload this and add an item, it moves

04:51.170 --> 04:56.200
down perfectly, looks great, looks exactly how we want it to behave

04:56.330 --> 05:01.510
but if I remove an item, we still have this snapping going on, now why is that,

05:01.520 --> 05:05.880
why is it working for adding items but not for removing items?

05:06.620 --> 05:15.260
The answer is because when we remove an item, the old items which are sitting below the new items still

05:15.260 --> 05:22.810
have their position in the document flow and that position will only change if the old item is removed.

05:23.120 --> 05:27.850
And the fact that we want to animate it doesn't change this because it can't be animated with translateY,

05:27.850 --> 05:32.600
if we would hurt the document flow with that, kind of.

05:32.870 --> 05:38.360
So we have to go to slide-leave-active which is the class attached to the element which is removed during

05:38.360 --> 05:40.110
the removal process

05:40.160 --> 05:47.630
and here we have to switch its position to absolute, this make sure that other elements may move above

05:47.630 --> 05:54.980
this element whilst this element is still being animated. And therefore if I now reload this, we can see

05:54.980 --> 06:04.400
I can add items but if we remove one, this now looks fine and it moves the other items correctly, just

06:04.400 --> 06:05.630
like that.

06:05.630 --> 06:10.560
So this looks much better now with the whole list being animated now.
