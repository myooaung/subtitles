WEBVTT

00:01.930 --> 00:07.480
So I will add a new horizontal line because we're now leaving the css world though of course we could

00:07.490 --> 00:07.920
mix it,

00:07.930 --> 00:11.950
I'm just emphasizing this because that is perfectly fine,

00:11.950 --> 00:17.760
maybe you want to play the animation through css and only listen to the end of it in the afterEnter

00:17.800 --> 00:18.060
hook

00:18.070 --> 00:21.740
we just saw and execute some javascript code once the animation finishes.

00:21.850 --> 00:27.100
That's perfectly fine and not that uncommon but here, I want to use all these hooks to really play the

00:27.100 --> 00:28.200
whole animation.

00:28.480 --> 00:33.970
So I get my horizontal line here and I will add a new button with button classes, button and button primary

00:33.970 --> 00:35.670
to give it some nice styling,

00:35.740 --> 00:42.760
and here I will load or remove an element, just so that I don't trigger everything with this show thing

00:42.760 --> 00:44.000
up there.

00:44.110 --> 00:52.360
Now here, I want to add a click listener and toggle a new property called load, like before show and I

00:52.360 --> 00:55.580
will simply add this new load property.

00:55.660 --> 01:01.060
I will set show to false initially so that we don't see all the divs from before but that we can now

01:01.060 --> 01:06.190
focus on this one here, load which is the new one we will use for all the javascript related things

01:06.190 --> 01:11.340
here. Then I'll add two line breaks to just have some space here

01:11.410 --> 01:16.900
and then of course the transition component again which I just explained does have these specific events

01:16.980 --> 01:17.940
it emits.

01:18.280 --> 01:24.610
Now in there, I still want to have a div but now let's set it up a bit differently, let's give it our

01:24.610 --> 01:35.290
own style here, let's say with a width of 100 pixels and a height of 100 pixels and a background color

01:35.560 --> 01:37.740
of light green.

01:38.000 --> 01:43.240
And if we save this and go to the application, we should see this and right now this doesn't work

01:43.540 --> 01:50.480
because now I will also need to attach v-if to it and point this to load to conditionally

01:50.680 --> 01:54.170
well attach or detach it after reloading here,

01:54.190 --> 01:56.320
now this works but now we want to animate it

01:56.350 --> 01:57.860
through javascript.

01:57.990 --> 02:00.700
So we get our div here which we can attach and detach,

02:00.700 --> 02:07.460
nothing spectacular here, we did that before but nowI want to use javascript to do that. Now for that, let's

02:07.510 --> 02:09.910
see which hooks get executed,

02:09.910 --> 02:11.440
we saw it on the slide,

02:11.680 --> 02:18.370
we got a couple of events we can listen to. The first one is with @, as we do listen to all the events

02:18.520 --> 02:25.960
before-enter, now this is a custom event emitted by this transition component vuejs ships with. In the

02:25.960 --> 02:29.970
quotation marks, we specify which function or method we want to execute

02:30.100 --> 02:34.870
and I will execute a beforeEnter method which of course I will have yet to create,

02:35.140 --> 02:41.230
then we get the enter method or the enter event being emitted here,

02:41.230 --> 02:47.390
then we also got the after-enter event which is executed once the animation finishes,

02:47.390 --> 02:52.950
after-enter and we get enter-canceled.

02:53.110 --> 03:00.740
Now I know I already said this but you can use all these hooks on the css animations up here,

03:00.850 --> 03:08.620
for example if you add it to let's say the first one here at the enter, the after-enter event listener, you

03:08.620 --> 03:12.350
could execute some code whenever the css animation finishes,

03:12.370 --> 03:16.660
so that is perfectly valid and something you will probably also use from time to time because you want

03:16.660 --> 03:22.430
to execute some javascript code upon finishing some animation. Back to this here

03:22.810 --> 03:27.850
though, now we get these enter hooks and we get the same for leaving,

03:27.880 --> 03:35.020
so we get before-leave here and I want to execute before-leave, this method which I of course also

03:35.020 --> 03:39.240
have to add, then we get just the leave event being executed or emitted

03:39.240 --> 03:44.470
I should say, then we get after-leave, where I want to execute after-leave

03:44.520 --> 03:51.550
and finally, we get leave-canceled where I want to execute leave-cancelled, like this.

03:51.750 --> 03:55.710
So these are now all the event listeners being set up listening to all the events

03:55.710 --> 04:00.450
this transition component does emit from time to time during the animations

04:00.780 --> 04:02.220
and now let's add them.

04:02.220 --> 04:09.780
So in my vue instance, I'll add my methods here and here I got beforeEnter and in beforeEnter, we

04:09.870 --> 04:15.120
actually do receive a certain argument,

04:15.120 --> 04:20.080
the argument we get here is the element on which this animation is performed,

04:20.190 --> 04:22.260
so we can use this element here.

04:22.350 --> 04:24.940
I simply want to log beforeEnter here,

04:24.960 --> 04:30.220
so that we can see that we reach this hook and then we get the enter method.

04:30.370 --> 04:33.320
Now the enter method which is where the animation really plays

04:33.360 --> 04:38.400
also gets the element, we need this element of course to be able to really change it, to work with it

04:38.640 --> 04:45.270
but this also gets another method, the done or argument I should say, the done argument here which

04:45.360 --> 04:48.570
actually is a function we can execute like this.

04:48.570 --> 04:50.420
Now why would we execute it?

04:50.550 --> 04:58.080
Well first I will log enter here but now why would we execute done here? Done is needed to tell vuejs

04:58.080 --> 04:58.590
.

04:58.590 --> 05:06.570
once this animation finishes. When using css animations, well it can determine this from the timing

05:06.580 --> 05:09.850
we set up here on the transition or the animation property

05:10.170 --> 05:13.150
but when using javascript, we have no such timing.

05:13.260 --> 05:19.110
You could say well it should be finished whenever all the code in enter is executed but maybe you have

05:19.110 --> 05:23.910
some asynchronous code there, then this wouldn't work anymore because then it would be executed before

05:23.910 --> 05:25.660
the asynchronous code finished.

05:25.860 --> 05:30.380
So you need to call done to really tell vuejs when you are done,

05:30.480 --> 05:35.260
you don't need to call done if you do use css animations,

05:35.400 --> 05:40.770
so if we were to use the add enter listener here and execute enter here where we do have some

05:40.770 --> 05:46.680
css animations being used, well then vuejs is still able to determine when this animation ends

05:46.710 --> 05:52.380
from your css code but if you don't have any css code set up as we do here,

05:52.590 --> 05:58.040
well then it's not able to do so, therefore you need to tell it with the done function being executed.

05:59.450 --> 06:06.110
Well once we are done, we got the afteEnter method we execute up there and afterEnter also receives

06:06.110 --> 06:06.820
the element,

06:06.950 --> 06:08.480
all these hooks do that,

06:08.510 --> 06:16.820
so here I will then console log afterEnter to see that we reach that and then we get enterCancelled of course,

06:16.820 --> 06:23.170
here we also get the element on which we cancel this animation and I will also execute enterCancelled

06:23.180 --> 06:23.820
here.

06:24.140 --> 06:27.790
Now these are all the as the element hooks,

06:27.800 --> 06:32.730
now let's add the other ones, so we get beforeLeave, of course also with the element

06:32.810 --> 06:41.550
and here I want to console log beforeLeave like this, thereafter we also got the leave hook

06:41.600 --> 06:46.610
and here again get the done function because as with adding it, we want to know what once

06:46.610 --> 06:49.570
we're done leaving it or removing it I should say.

06:49.850 --> 06:52.720
So here I will console log leave

06:52.880 --> 06:56.690
and then of course we get also afterLeave being executed, here

06:56.690 --> 07:02.170
I want to console log afterLeave therefore

07:02.930 --> 07:13.400
and then I also get leaveCancelLed where we also get the element and then we log leave cancelled, like

07:13.400 --> 07:14.540
this.

07:14.540 --> 07:17.040
Now these are all the hooks which get executed

07:17.240 --> 07:23.540
and we should already be able to see all of that by simply saving this, going to the application, opening

07:23.540 --> 07:25.250
up our console here,

07:25.250 --> 07:26.630
reloading this

07:26.780 --> 07:28.250
and now let's remove it,

07:28.340 --> 07:35.460
we see beforeLeave and leave and we don't see afterLeave, before I forget to call 

07:35.570 --> 07:39.340
done here in this leave hook, just was explaining it and then forgot it

07:39.410 --> 07:42.140
but the great thing is you now see that it is important.

07:42.230 --> 07:44.480
So let's try this again,

07:45.450 --> 07:48.380
remove it, now you see beforeLeave, leave and afterLeave

07:48.400 --> 07:49.860
and if I add it again, 

07:49.910 --> 07:56.140
well then we see beforeEnter, enter and afterEnter. You can't see the canceled hooks being called right now because

07:56.140 --> 07:59.280
since all everything happens instantly, I can't cancel it.

07:59.320 --> 08:01.060
We'll come to this in a second though.
