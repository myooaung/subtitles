WEBVTT

00:02.080 --> 00:09.060
So as we see here what we want to build is a quiz where we get addition and subtraction tasks here and

00:09.120 --> 00:10.940
what which we don't have to answer

00:11.020 --> 00:13.600
and if we're right, we want to flip this page and show

00:13.610 --> 00:18.610
that's correct and give us the possibility to go to the next question and if we're wrong, then I

00:18.610 --> 00:20.590
simply want to show an alert here.

00:20.770 --> 00:24.920
So we need two components at least, a question and the answer

00:24.970 --> 00:33.190
and we need the animation, we maybe want to switch between the components with our animation, our

00:33.190 --> 00:34.810
transition here I should say

00:35.140 --> 00:37.840
and I think these are all things we learned how to do both,

00:37.840 --> 00:39.110
so let's start with it.

00:39.310 --> 00:41.340
So I'm starting a brand new project here,

00:41.350 --> 00:42.730
it's pretty empty,

00:42.740 --> 00:48.340
only thing I got is my default bootstrap container again, therefore in the index.html file, the import

00:48.340 --> 00:49.290
of bootstrap

00:49.450 --> 00:54.640
and that really is all. The instance here is totally empty, no data has been entered yet.

00:54.670 --> 00:59.630
Now I want to start by building up my main interface on this root page here,

00:59.710 --> 01:07.060
so in the first row, I may want to have a title which I give the class text center to well center the

01:07.080 --> 01:07.740
text,

01:07.780 --> 01:12.830
this is a bootstrap helper class where I say the super quiz, choose any name you want of course.

01:13.150 --> 01:19.390
And then I want to have a different or another row below there, maybe add a horizontal line in between

01:19.390 --> 01:22.870
and in this row, I then want to have the question and the answer,

01:22.930 --> 01:26.250
so here I want to use my dynamic component.

01:26.290 --> 01:31.330
I can already insert component here but of course I need to create these components as well, then

01:31.330 --> 01:33.410
I can set them dynamically.

01:34.090 --> 01:35.380
Well I will do that,

01:35.410 --> 01:43.710
so let me add a components subfolder here and in this folder, I want to have my answer.vue file

01:43.810 --> 01:48.130
and my question.vue file for

01:48.190 --> 01:56.800
well the question of course. Now these two files here shall be switched dynamically, now to be able to

01:56.800 --> 01:59.530
switch them, I will already import these components,

01:59.530 --> 02:03.740
I know the files are empty we're going to add this but I can already add the imports here because I know

02:03.740 --> 02:04.550
I will fill,

02:04.600 --> 02:10.800
I will fill these files. So I'll import the questions from components,

02:10.810 --> 02:17.120
question.vue and I do also import the answer from the answer.vue file.

02:17.290 --> 02:23.930
This allows me to add my components here, register then locally with appQuestion which points to question and

02:23.970 --> 02:27.810
appAnswer which points to answer, like this.

02:28.120 --> 02:33.400
And then in my data, I want to set up a proper key which holds the currently loaded component because we

02:33.400 --> 02:39.010
want to use the dynamic components here with this component placeholder we could say, therefore here

02:39.130 --> 02:42.260
let's say I want to set the mode which initially is

02:42.260 --> 02:47.770
question so that we see a question at first, at the beginning and then I can simply bind it here with

02:47.840 --> 02:54.240
colon is to bind this dynamically to mode and this will be now question or answer.

02:54.400 --> 03:00.340
Now that won't do it though because mode is question or answer though the component has a selector

03:00.350 --> 03:12.210
of appQuestion or appAnswer, so I can simply change this here in my mode property to appQuestion let's

03:12.210 --> 03:17.100
say and now I'm loading the appQuestion component here at the beginning.

03:17.100 --> 03:22.880
Now as I said, this is empty at the beginning because well I haven't added any code to question.vue

03:22.910 --> 03:25.500
but we'll do this next.

03:25.500 --> 03:27.020
Now in the question.vue file,

03:27.030 --> 03:32.700
I'm going to copy in some prepared code, now this might look like a lot but I don't want to focus on

03:32.700 --> 03:35.010
writing this javascript logic for digging here,

03:35.010 --> 03:37.740
feel free to dig into the code to learn more about it

03:37.950 --> 03:40.690
but I want to focus on adding this animation,

03:40.770 --> 03:43.640
therefore I will walk you through what I'll do here.

03:43.800 --> 03:50.580
I do have this title which outputs some questions stored in some property and then I do have some buttons

03:50.580 --> 03:58.290
here which are basically just executing on answer where we pass this strange argument to which I'll

03:58.290 --> 03:58.770
come back

03:58.770 --> 04:00.370
and which then show the answer,

04:00.390 --> 04:02.070
so one of the four answers.

04:02.210 --> 04:07.500
Of course I need to generate the answers and I don't want to have the same button which holds the correct

04:07.500 --> 04:10.170
answer at the same position all the time,

04:10.170 --> 04:15.950
this is why I pass the second argument where I do have something else and just answer on my answers

04:15.960 --> 04:18.480
which seem to be stored in array, correct,

04:18.480 --> 04:20.850
so this determines if this answer is correct or not

04:20.880 --> 04:24.210
so that any button here may hold the correct or false answer

04:24.330 --> 04:30.710
and we determined it upon clicking because it gets passed here to the array, to the method on answer.

04:31.200 --> 04:34.550
So let's have a look in the answer array there, for it's the button

04:34.590 --> 04:36.330
data array to be precise

04:36.750 --> 04:42.750
and there we do have a couple of objects which each have the answer set to initially to zero,

04:42.810 --> 04:46.640
that will change of course and then whether it's correct or true,

04:46.680 --> 04:48.730
this will also change.

04:48.870 --> 04:56.340
Now these are my button data fields or the button data objects and then in methods, I get the generate

04:56.340 --> 04:57.990
question method here.

04:58.020 --> 05:03.530
Now generateQuestion is called here in the created lifecycle hook so whenever this component is loaded

05:04.170 --> 05:11.070
and in this method here which is quite long, what I do is I generate a first and a second number because

05:11.070 --> 05:14.170
we want to add or subtract subtract them,

05:14.310 --> 05:17.260
then I generate which mode we want to use,

05:17.280 --> 05:19.370
that is a random number between 1 and 2,

05:19.410 --> 05:24.750
generate random numbers as a side note is a helper method here which I wrote to give me a random number

05:24.750 --> 05:33.000
between a minimum and maximum border and then maybe also exclude some numbers from getting generated,

05:33.090 --> 05:36.210
that will become important when generating the answers.

05:36.600 --> 05:41.970
So here I do generate these three random numbers, the first and the second number for the addition or

05:41.970 --> 05:48.430
subtraction and then the mode, subtract or add and then the correct answer set to 0 initially.

05:48.500 --> 05:51.350
I then switch between the mode and mode

05:51.390 --> 06:01.180
addition is just one whereas mode subtraction is just two, so just a global constant I use here. And if mode

06:01.200 --> 06:07.610
number, a random number between 1 and 2 is one, that is what's stored in mode addition in the end,

06:07.860 --> 06:15.000
then we well set the correct answer to first number plus second number and we set the question to what's

06:15.360 --> 06:19.710
first number plus second number using literal here, string literal,

06:19.720 --> 06:26.570
that's an ES6 feature which allows me to output our property or variable like this inside of a string,

06:26.570 --> 06:28.390
so it's an ES6 feature,

06:28.830 --> 06:33.360
and then I break of course, and in subtraction I do the same but with a minus sign in between because

06:33.360 --> 06:38.690
now we're subtracting. And the default is that we get an error because well if we do get anything else

06:38.700 --> 06:44.290
than one or two, something failed horribly because this generate method should only give us one or two.

06:44.730 --> 06:49.740
Well that's the determining of the mode and of the correct answer

06:49.770 --> 06:57.450
and then we need to generate some fake answers. So I make sure that for all the four buttons, I do

06:57.450 --> 07:07.440
set some values, the value on the first button is the correct answer minus 10 and then the correct answer

07:07.440 --> 07:08.100
plus 10,

07:08.100 --> 07:12.470
so these are the minimum or maximum borders for the generate number function

07:12.540 --> 07:15.340
but I never want to set the correct answer itself,

07:15.420 --> 07:21.240
so I populate all four buttons with wrong answers which is why I set the correct property to false

07:21.270 --> 07:30.330
for all four buttons here initially. I need to accept or I need to exclude I should say this correct

07:30.330 --> 07:32.800
answer here from the random number generation

07:32.910 --> 07:35.820
because otherwise I might have two buttons with the same answer

07:35.850 --> 07:41.470
but one of them gives me that is wrong which would not be the desired behavior.

07:41.760 --> 07:49.470
So all buttons are initially set to to wrong answers and then here on the correct button,

07:49.470 --> 07:56.170
I generate the correct button, so I generate a random number between 0 and 3 because I have four elements

07:56.170 --> 08:01.980
in the button data array which holds my buttons or a data for these buttons and then I generate a random

08:01.980 --> 08:07.530
number to determine which button should now get the correct answer, 0 to 3 because the first button

08:07.530 --> 08:12.310
has the index of zero and the last button has the index of three because we have four buttons again,

08:12.540 --> 08:16.150
and then I simply generate which button should hold the correct data,

08:16.200 --> 08:18.810
and then I set to correct data on that button,

08:18.810 --> 08:21.340
so on this data button to be precise.

08:21.480 --> 08:27.200
This is how I populate my buttons with wrong and right answers or data

08:27.450 --> 08:35.400
and then finally, I do have this on onAnswer method which gets executed, in the onAnswer method, I get is

08:35.400 --> 08:38.790
correct passed which is stored in the button data object,

08:38.790 --> 08:39.540
keep that in mind,

08:39.540 --> 08:41.490
correct is passed, stored here

08:41.520 --> 08:49.050
and I do pass it when calling onAnswer and I simply emit an event here, answered where I also

08:49.070 --> 08:51.760
emit whether this is correct or not.

08:51.780 --> 08:54.310
Now this is all I do here, it's a lot of code,

08:54.330 --> 08:58.770
most of the code is for the number generation which is why I didn't want to show it in detail here.

08:58.830 --> 09:00.850
I hope it was still understandable

09:00.870 --> 09:04.980
otherwise feel free to answer any question in a section of course,

09:05.280 --> 09:10.530
and with that, let's move on to the answer.vue file and also populate that. Here,

09:10.530 --> 09:12.740
I'm also going to copy in some prepared code

09:12.870 --> 09:16.080
and of course you will find all the code attached to this lecture

09:16.470 --> 09:21.920
and here, I basically say that's correct because I only show this if it's correct otherwise I show

09:21.920 --> 09:23.010
this alert

09:23.400 --> 09:28.560
and if we then click on next question, I emit an event called confirmed.

09:28.860 --> 09:31.870
So I emit this confirmed event here,

09:32.100 --> 09:37.020
and in the question.vue, I emit the answered event.

09:37.020 --> 09:41.320
So now the job in our app.vue file is to listen to both events,

09:41.340 --> 09:48.630
whether an answer was picked or was given or if we after giving a correct answer, clicked on next question.

09:49.260 --> 09:53.000
Hence here, I will add two event listeners, @answered,

09:53.000 --> 09:56.970
this is my answer custom event emitted from the question.vue file

09:57.050 --> 10:06.260
and here I want to execute answered and pass on the event data stored in these specific

10:06.260 --> 10:09.920
$event property or variable I should say created by vuejs.

10:10.010 --> 10:14.140
And keep in mind, this comes from the question property here,

10:14.150 --> 10:17.420
the question component excuse me and here I pass

10:17.420 --> 10:22.650
this is correct or not and this is specifically what I want to store here in $event.

10:22.700 --> 10:28.340
Now if the other component is loaded, then I need to, the answer component,

10:28.430 --> 10:33.640
I need to listen to confirmed so that the answer was confirmed and we want to see the next question

10:33.920 --> 10:38.330
and then I simply switch the mode to appQuestion again.

10:38.330 --> 10:43.680
Right now we don't have a place to switch it to appAnswer, I'll come to this but here, we definitely switch

10:43.680 --> 10:44.780
it back.

10:45.230 --> 10:51.340
Now the place to switch it to appAnswer of course is in the methods object here,

10:51.350 --> 10:53.320
we'll write this together, here

10:53.330 --> 11:00.110
I do have my answered method I want to execute up here and I pass isCorrect here as an argument which

11:00.110 --> 11:07.390
gets passed from this loaded component, from the question.vue file and here I check if isCorrect,

11:07.400 --> 11:08.700
if this is true,

11:09.110 --> 11:13.590
well then I want to set this mode to appAnswer,

11:13.910 --> 11:17.600
so I want to load my answer component

11:17.970 --> 11:20.400
but if this is not correct

11:20.430 --> 11:22.500
so in the else case here,

11:22.820 --> 11:27.180
well then I want to set this mode definitely to appQuestion, it should be in that mode already

11:27.180 --> 11:29.880
but just to make sure or to ensure it

11:29.970 --> 11:31.970
and I want to show wrong,

11:31.980 --> 11:35.260
try again as the alert here,

11:35.280 --> 11:36.680
really simple.

11:37.260 --> 11:40.560
Well and this is all the initial set up it should need,

11:40.560 --> 11:47.960
if I save this, my server is already running and I load this, we see it here and now let's see,

11:47.970 --> 11:50.250
that should be this result, we see

11:50.250 --> 11:51.420
that's correct

11:51.540 --> 11:59.550
and we can now switch between that. The missing piece of course is that we animate this and this is what

11:59.550 --> 12:01.830
we'll do together in the next lectures.
