WEBVTT

00:01.840 --> 00:08.140
I'm back in JSFiddle and even though I said we would use the zline from now on, we will but this simple

00:08.140 --> 00:12.130
introduction to components is best done here or it's very easy done here

00:12.130 --> 00:17.320
as this is the environment you saw before it and as it will also be very little code

00:17.320 --> 00:20.410
I want to show you but the code I do show is very important.

00:20.410 --> 00:22.120
Consider this application,

00:22.120 --> 00:27.700
we get a normal vue instance where we select a certain place in the dom with the app selector but then

00:27.700 --> 00:32.090
we override it with our own template down there, where I basically say server status

00:32.140 --> 00:34.850
and then I use the status data property here.

00:35.050 --> 00:39.260
That's a normal vue instance, nothing component-ish about that,

00:39.320 --> 00:45.160
now let's say we wanted to place this server status in various places here in the app. As I showed you

00:45.160 --> 00:46.150
in the last module,

00:46.160 --> 00:47.780
that's not that easy to do,

00:47.980 --> 00:53.050
if I repeat my app here besides that that it's not valid html to have multiple IDs,

00:53.200 --> 00:57.670
you will also see it's only printed once and that is not because I'm using ID here,

00:57.880 --> 01:05.320
if I were to use class here and change this to .app to select that by class, you still see it's only getting

01:05.320 --> 01:09.610
used once, the second usage down there is getting omitted.

01:09.600 --> 01:11.520
That is because we're creating a vue

01:11.560 --> 01:15.970
instance here and with that instance, we will only select the first element,

01:16.040 --> 01:19.610
so this div here, this div up here.

01:19.610 --> 01:24.640
Now we want to repeat this in our application because we've got multiple places where we do want to use

01:24.640 --> 01:25.380
it,

01:25.450 --> 01:27.370
that's actually easy to do,

01:27.640 --> 01:35.050
I'll restructure this, rename this back to ID and then I'll get rid of the second instance but now I want

01:35.050 --> 01:41.170
to indeed use a component which means I want to create a re-usable piece of not only template but of

01:41.170 --> 01:41.800
our vue

01:41.800 --> 01:49.990
instance, a component basically extends the vue instance and we can create a new component by using the

01:49.990 --> 01:55.750
vue object and then running the component method on that. Behind the scenes,

01:55.750 --> 02:01.940
this will give us a new instance kind of but with some extra features.

02:02.020 --> 02:08.200
Now the first argument in vue component is the tag name which you want to use to enter our component,

02:08.440 --> 02:12.660
you can think of a component as our own html element we're creating,

02:12.820 --> 02:18.460
so here I will set up component to use let's say my component, like this.

02:18.460 --> 02:23.740
This will allow me to enter my component in the code like this,

02:23.740 --> 02:29.170
so creating or using my own html element which I'm creating with that, therefore make sure to not use

02:29.170 --> 02:30.520
an existing one,

02:30.520 --> 02:36.040
also make sure to add a prefix to make your component unique so that you don't interfere with any third

02:36.040 --> 02:42.430
party packages you might use or existing or possibly future html elements because you certainly

02:42.430 --> 02:44.190
don't want to overwrite them.

02:44.230 --> 02:50.750
So maybe use your company name as a prefix or at least something like app or my,

02:51.040 --> 02:54.610
so this is the selector by which we're able to use this.

02:54.640 --> 02:58.330
The second argument is the actual object which represents our component

02:58.480 --> 03:03.730
and this is generally the same object as the object we're passing here to our vue instance,

03:03.730 --> 03:11.590
therefore I can copy data in template to this object here to use that and I will change this to a hash

03:11.590 --> 03:15.240
tag so that we will again select this part in the dom

03:15.460 --> 03:20.010
but this will not work as intended.

03:20.020 --> 03:25.840
The reason for this is the data object in the component, a component basically extends the vue instance

03:26.110 --> 03:32.440
and therefore if we set up data like this, we kind of interfere with the other data properties, the other

03:32.440 --> 03:34.080
data objects,

03:34.270 --> 03:41.650
hence vuejs will actually give us an error if data is an object. It's fine or it's normal to use

03:41.650 --> 03:45.290
it as an object in our root vue instance

03:45.460 --> 03:53.090
but in any component, this shall actually be a function where we then return a new object holding the

03:53.090 --> 03:53.640
data,

03:53.680 --> 03:59.710
so this data object we used before is now basically returned in a function,

03:59.740 --> 04:06.050
so by wrapping it in a function, we make sure we're not interfering with our data.

04:06.400 --> 04:13.720
So with this set up, if I now hit control enter, we see the server status critical here and we see that

04:13.750 --> 04:16.480
our component is now used successfully,

04:16.480 --> 04:23.440
so we're now able to output it because we can now also repeat it if we would have it in multiple places

04:24.130 --> 04:28.060
like this and that is what makes components so cool.

04:28.060 --> 04:31.330
You have your contained vue instance, your contained code,

04:31.330 --> 04:36.540
of course there you could also have methods, computed, all the things you already learned about

04:36.580 --> 04:43.450
which is why I taught them first but now, you have it contained in this component which you can enter

04:43.540 --> 04:49.670
as often as you want into your template here, into your code to reuse it.

04:49.720 --> 04:53.740
And that gives you a very powerful tool to build your web pages.
