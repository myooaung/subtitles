WEBVTT

00:01.900 --> 00:05.320
In the last video, we implemented such a getter here.

00:05.380 --> 00:11.060
Now what if we actually wanted to have another getter, let's say?

00:11.080 --> 00:20.440
So in our getters property in the store, we now also have the stringCounter for example where we

00:20.440 --> 00:30.070
take our state and we return our state counter plus clicks to turn it into a string which says five

00:30.070 --> 00:32.290
clicks, two clicks and so on.

00:32.290 --> 00:37.440
So now we get this brand new getter and in AnotherResult, I want to use this,

00:37.450 --> 00:44.020
so here I will quickly wrap my paragraph into a div because again, we may only have one root element

00:44.050 --> 00:53.320
in a component and then we have this number of clicks text here where I want to output my let's say

00:53.350 --> 01:04.440
clicks computed property which I'll create here, clicks and where I then return this.store.getters.stringCounter

01:04.460 --> 01:05.610
.

01:05.640 --> 01:08.190
also don't execute it, just run it like this

01:08.290 --> 01:10.220
and now you see I got my clicks here,

01:10.240 --> 01:11.390
that works.

01:11.470 --> 01:18.040
The problem though is that I now have two computed properties to fetch my state here or to fetch my

01:18.040 --> 01:24.580
getters and if I would add more and more and more getters, I would have to repeat that for every getter,

01:24.970 --> 01:31.600
that is possible but it would be more convenient if vuex would kind of do that automatically and give

01:31.600 --> 01:37.150
me access to all my getters, so that I can conveniently say clicks here or something like that

01:37.180 --> 01:42.910
or stringCounter, whatever and that would automatically execute the right getter without me having

01:42.910 --> 01:45.100
to set up a computed property for that.

01:45.310 --> 01:49.690
Well turns out vuex has a helper method for that we can use.

01:49.960 --> 01:54.800
It has a method which will create all the computed properties we need on its own, for that,

01:54.820 --> 02:04.800
I need to import the helper function from vuex and this helper function is called mapGetters.

02:04.810 --> 02:11.920
Now with this function imported, I now can override my computed properties here and say mapGetters

02:11.980 --> 02:17.530
execute this function of course and this takes an array as an argument and in this array, we simply

02:17.650 --> 02:22.020
specify as strings all the getters we want to use in this component,

02:22.210 --> 02:27.490
so for example if I want to use both getters we have right now, the doubleCounter and the stringCounter,

02:27.640 --> 02:33.240
I would say doubleCounter and also stringCounter, like this.

02:33.250 --> 02:39.840
Now this will in the background automatically create computed properties which also have the names double

02:39.850 --> 02:46.040
counter and stringCounter and map them to the getters, to these functions, to these functions here

02:46.060 --> 02:54.030
in my store. With that, I can now change my template here to use the doubleCounter here and to use the

02:54.040 --> 02:55.570
stringCounter here

02:55.720 --> 03:00.570
and if I save this and reload, we see it still works

03:00.760 --> 03:04.420
but now I'm using mapGetters here.

03:04.420 --> 03:10.720
That really is a better way or a nicer way to save a lot of code and easily get access to our getters

03:10.980 --> 03:12.950
though it also has one downside,

03:12.950 --> 03:14.060
do you see it?

03:14.380 --> 03:19.750
Well what if we wanted to create our own computed functions and mix them with the getters? Right now, map

03:19.750 --> 03:23.470
getters is the whole content of this computed property

03:23.470 --> 03:26.880
so right now we can't add our own computed properties,

03:26.890 --> 03:29.040
that is not really optimal because if

03:29.080 --> 03:33.970
I want to create my own computed property for something totally unrelated to my state maybe,

03:34.270 --> 03:35.970
well then I can do it right now,

03:36.340 --> 03:42.580
thankfully with ES6 which we're able to use in our set up here, we get an easy solution. Let's create

03:42.580 --> 03:46.240
a javascript object again and put mapGetters inside of it,

03:46.240 --> 03:51.790
now this will not work because mapGetters on its own creates an object with all these computed methods

03:51.790 --> 03:54.600
or computed properties which are methods.

03:54.750 --> 04:00.820
Therefore right now what we would do here is have an object which then immediately has an object in

04:00.820 --> 04:10.900
itself, that is not valid code. With ES6 we get this spread operator, the three dots here, the three dots basically

04:10.900 --> 04:14.260
allow us to tell javascript

04:14.410 --> 04:19.110
please pull out all the properties and methods in the object you have here,

04:19.120 --> 04:25.100
remember mapGetters is an object holding all the methods, these mapped methods, these computed properties,

04:25.330 --> 04:31.350
so pull them all out of there and create separate key value pairs for each of them.

04:31.450 --> 04:38.440
So this will now allow us to add all the computed properties which get createed automatically into this

04:38.920 --> 04:39.700
object here,

04:39.730 --> 04:48.390
of computed properties and we could still write our own computed property here and have no issue at all.

04:48.390 --> 04:50.880
So this is a way how we can mix this,

04:50.930 --> 04:56.310
however if we save this and go back to the application, we now see it's broken, at least at the point of time

04:56.310 --> 04:57.900
I do record this.

04:57.900 --> 05:04.800
The problem is if we have a look a look at the console, that these three dots here are unexpected,

05:04.910 --> 05:12.840
so the ES6 compiler we're using here doesn't recognize that. If we have a look at the package.json

05:12.840 --> 05:20.760
file, we see that we're using be babel to compile our ES6 to ES5 code and the presets we loaded here

05:21.090 --> 05:28.770
don't cover this rest and spread operator syntax, so these three dots. Well we can simply add a new package

05:28.800 --> 05:34.620
to get this functionality to work and keep in mind, it's all compiled to valid ES5 code in the end,

05:34.650 --> 05:37.830
so you're not adding something which then wouldn't run in the browser,

05:37.830 --> 05:40.590
it's only that we got more features during development.

05:40.920 --> 05:51.890
So I can install a new development only dependency which is called babel-preset-stage-2

05:52.370 --> 05:56.010
and this will add support for the rest and spread

05:56.010 --> 05:58.950
operator in these three dots we're using.

05:59.030 --> 06:05.870
So with that added, we now have to go to the babelrc file here and there we have to add a new entry

06:05.980 --> 06:13.450
to this array of presets and this entry is simply called stage-2, this new preset we just download.

06:13.980 --> 06:18.410
With that, if we save this and restart our development server here,

06:21.610 --> 06:23.860
we now see that it works again

06:23.860 --> 06:25.020
if I click here

06:25.150 --> 06:34.600
but now with mapGetters to have well, one easy way of getting all these getters and with the three dots

06:35.290 --> 06:39.450
while still being able to create our own computed properties.

06:39.490 --> 06:41.260
So that is a huge improvement,

06:41.320 --> 06:48.580
getting the data from our store through these getters makes sure that there we don't have to rewrite the same

06:48.580 --> 06:51.410
code over and over again and with mapGetters,

06:51.490 --> 06:54.730
it's extremely easy to get easy access to our getters.
