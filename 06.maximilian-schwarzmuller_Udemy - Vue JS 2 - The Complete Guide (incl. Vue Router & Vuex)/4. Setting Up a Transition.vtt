WEBVTT

00:01.660 --> 00:08.680
Well one of the typical cases you would use transition, this transition component with would be to attach

00:08.680 --> 00:09.850
css classes,

00:09.900 --> 00:15.580
vuejs does this for you, I will show you how to tell it but what it will then basically do is

00:15.880 --> 00:23.400
it will determine when you for example use v-if when it should attach element and that will at least

00:23.480 --> 00:30.340
two classes, css classes for animating it in and animating it out and by styling these classes, you can

00:30.340 --> 00:32.500
therefore set up an animation.

00:32.560 --> 00:36.160
How does this look in the actual application?

00:36.400 --> 00:38.540
Well we animate an element

00:38.860 --> 00:45.710
and once vuejs determines that this should be attached, so the condition of v-if or v-show becomes true,

00:45.730 --> 00:52.390
and that is important to realize, I guess, you use v-if and v-show to animate in such element. We will learn

00:52.390 --> 00:56.500
about other ways, dynamic components for example later

00:56.620 --> 01:02.200
but typically v-if and v-show would be the tools we have to decide that an element should only conditionally be

01:02.200 --> 01:03.290
attached to the dom.

01:03.430 --> 01:06.230
This is where transition will work fine with it,

01:06.280 --> 01:13.480
you can't use transition if you add an element let's say through your javascript code by appending a newly

01:13.480 --> 01:15.090
created element or something like that,

01:15.130 --> 01:17.720
you have to have this in your template already with

01:17.740 --> 01:21.670
again v-if, v-show and some other tools you learn later.

01:21.950 --> 01:24.810
So back to this, vuejs detects

01:24.840 --> 01:25.150
okay

01:25.150 --> 01:30.250
I have v-if on n element which is wrapped in a transition I should animate it in, what does

01:30.250 --> 01:34.690
vuejs do? It first attaches a css class which has a name

01:34.690 --> 01:38.080
you can set up, indicated by the star here and then enter,

01:38.080 --> 01:41.870
so for example you could say I want to name my animation fade,

01:41.920 --> 01:49.030
then vuejs would add a fade-enter animation, class, excuse me, css class to this element, only for

01:49.030 --> 01:52.850
one frame at the beginning of this animation duration.

01:52.900 --> 01:54.250
This is important,

01:54.250 --> 01:55.960
this is the initial state

01:55.960 --> 02:01.050
so if you want to for example fade an element, this would be the place where you set the opacity to zero

02:01.150 --> 02:09.130
so that it is not visible, that it is fully transparent. After this one frame, the enter active class appended

02:09.190 --> 02:13.060
to your class name, so fade-enter-active for example will be attached

02:13.150 --> 02:16.020
and this will be attached until the animation finishes.

02:16.150 --> 02:21.730
The length of the animation will be determined by vuejs automatically by the length of the transitions

02:21.730 --> 02:24.090
or animations you set up in your css code,

02:24.130 --> 02:29.890
so vuejs does sniff your css code and have a look at it to determine how long these classes

02:29.890 --> 02:32.010
should be attached, pretty clever.

02:32.020 --> 02:33.780
Now once the elements in, this

02:33.850 --> 02:35.440
class is also removed,

02:35.440 --> 02:40.350
you will have a chance to set up any transitions and the final state in this enter-active class.

02:40.990 --> 02:43.060
And if you remove it, it's pretty much the same,

02:43.060 --> 02:48.770
here we at first attached the your name-leave class and then for the whole duration,

02:48.780 --> 02:55.590
the your name-leave-active class and the default if you don't enter a name is v-enter,

02:55.600 --> 02:57.590
so you can always use that.

02:57.640 --> 03:02.280
Now that's the theory to make it really clear and to make it easier to understand.

03:02.320 --> 03:06.680
Let's now use it in our application and set up a nice  animation.
