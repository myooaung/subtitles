WEBVTT

00:02.360 --> 00:09.500
Vue serve was nice but now let me also show you something regarding the build process. Thus far,

00:09.500 --> 00:14.850
we used the package.json file and there I said that the build command would build it for production.

00:15.200 --> 00:19.640
And that is true, the question just is what does it build for production?

00:19.760 --> 00:26.390
And as it turns out, we have three different build targets or three different ways of building that application

00:26.510 --> 00:28.840
and with that, I'm not talking about the modes.

00:29.180 --> 00:35.870
Instead when building a vue project or when building a vue component even, we can build it for

00:35.890 --> 00:37.670
or as a vue app,

00:37.670 --> 00:42.740
we can also build it as a vue library though which we could use in other apps if we're building our own

00:42.740 --> 00:45.240
component library for example or

00:45.260 --> 00:46.520
and that's really awesome,

00:46.550 --> 00:51.330
we could build a web component. And a web component is now not a vue app

00:51.350 --> 00:57.260
but it's a normal web component and in case you don't know what it is, it's like a custom html element

00:57.560 --> 01:00.220
and that is just what vue components are, right?

01:00.530 --> 01:06.290
But a custom html element which you can use outside of vue applications too

01:06.620 --> 01:07.880
and that's the awesome thing,

01:07.940 --> 01:13.770
you don't need to embed it into a root vue instance, you can dump it into a html file,

01:13.880 --> 01:19.430
then you need to add two javascript imports because it still is driven by javascript behind the scenes

01:19.610 --> 01:22.940
but it's registered as a standalone element to the browser.

01:22.940 --> 01:29.730
This is an official browser API web components, so we can then build our vue components as reusable web

01:29.730 --> 01:36.470
components which we can use in a react project, in an angular project or in a vanilla js project.

01:36.500 --> 01:38.400
Let's have a look at this step by step,

01:38.540 --> 01:40.800
the vue app is what we built thus far,

01:40.880 --> 01:45.180
we run it with vue build --target app or just vue build,

01:45.230 --> 01:47.760
it's the default, the default target is app.

01:48.020 --> 01:54.310
This gives us a normal vue app bundle which is optimized, minified, where code splitting is automatically used

01:54.320 --> 01:57.470
to lazy load routes where you configure them to be lazy loaded,

01:57.470 --> 02:00.540
have a look at the routing section to learn how that worked

02:00.710 --> 02:06.290
and it includes your code and the vue framework because it gives you an entire bundle which runs standalone

02:06.290 --> 02:09.210
where you don't need to add any other imports.

02:09.320 --> 02:15.800
Now for the library, you build that with vue build target lib, what this does is it gives you a project

02:16.250 --> 02:22.220
which holds your code and that's of course typically use case would be a bunch of components to build

02:22.220 --> 02:23.990
a vue component library,

02:24.050 --> 02:26.750
it does not include the vue framework though,

02:26.870 --> 02:33.260
so if you use that library, you need to ensure that you use it in a new vue application which then includes

02:33.260 --> 02:37.130
your code which then includes that library and the vue framework,

02:37.130 --> 02:38.810
so this is how that would work.

02:38.990 --> 02:44.090
And for the web component we run it with vue build --target wc,

02:44.420 --> 02:49.430
there also is an alternative command for code split web components which is a bit more advanced,

02:49.440 --> 02:52.420
it's basically web components which are loaded lazily,

02:52.490 --> 02:57.300
you find more details in the official docs but the functionality is similar.

02:57.560 --> 03:03.260
And then you get a distributable web component and this is just a file, a javascript file which you

03:03.260 --> 03:10.300
dump into any project, you will still need to import vue there but you won't need to create a route

03:10.340 --> 03:11.120
vue instance,

03:11.150 --> 03:15.050
you just can use your html tag thereafter.

03:15.110 --> 03:20.810
So this also includes just your code, not vue and therefore you will need to import vue still but don't

03:20.840 --> 03:23.000
create a full vue project.

03:23.060 --> 03:28.560
Let me show you how that works and how we can utilize these features to build different things.

03:29.460 --> 03:36.930
So back in the project, I want to show this at the example of this hello.vue file here, let's run vue

03:36.990 --> 03:44.960
build and target hello.vue and then add --target app which is the default.

03:45.080 --> 03:48.230
If I do that, it builds for production by default as you can see

03:48.230 --> 03:53.990
and by the way, the more common way of using this command of course would be to use it on the entire

03:53.990 --> 04:00.080
project with just the build command in package.json which takes your source folder and there, the main.js

04:00.090 --> 04:01.910
file and vuex and so on,

04:01.940 --> 04:07.820
I just want to show this command on this simple example of one file but typically, if you build an app,

04:07.850 --> 04:11.070
you would take the whole project folder and not a single component.

04:11.360 --> 04:13.980
But now I build an app based on that hello.vue file

04:14.230 --> 04:21.790
and in the dist folder, I therefore get my javascript folder which holds all the code which includes

04:21.790 --> 04:29.180
the vue framework as I said and also my component code which would be stored in here

04:29.330 --> 04:30.660
and now we can serve that

04:30.680 --> 04:36.680
and for that, we just need a http server because double clicking on the index.html file won't load

04:36.710 --> 04:39.060
due to the javascript features being used.

04:39.560 --> 04:46.270
You can install such a server with npm install -g to install it globally, http-server for example,

04:46.310 --> 04:54.960
that's a simple node server which allows you to statically serve your web projects and on Mac

04:54.960 --> 04:58.350
and Linux, you need to add sudo in front of that.

04:58.560 --> 05:03.630
And with that installed, you can navigate into the dist folder with cd dist in your project folder and

05:03.630 --> 05:09.540
then run http server in there and it will automatically pick up the index.html file and start

05:09.570 --> 05:13.770
serving this on that URL, that is the URL I used before

05:13.770 --> 05:19.680
so if I simply reload now, I see hello again but this is now not my development mode,

05:19.800 --> 05:21.330
I did quit that server,

05:21.330 --> 05:28.260
instead it really is my build project, it's my build and minified project and as you see, you can even build

05:28.380 --> 05:32.010
a simple single vue component as a vue app.

05:32.340 --> 05:37.410
Typically as I said though, you would of course build an entire project folder and therefore you would

05:37.410 --> 05:43.860
just run npm run build to use that local cli service and the build command which automatically targets

05:43.860 --> 05:46.760
the source folder and then the main.js file there.

05:47.010 --> 05:48.660
Still nice to have,

05:48.660 --> 05:53.820
now let's go out of the dist folder back to the root folder and let's try vue build

05:54.180 --> 05:55.590
hello.vue

05:55.650 --> 05:59.050
with target set to lib.

05:59.250 --> 06:05.580
If I do that, it now builds a library, a library which we can use in other vue projects.

06:05.580 --> 06:11.850
So in the dist folder, we therefore simply get a bunch of outputs which we could now distribute as a

06:11.850 --> 06:16.680
npm package and for that, you should of course look how that works and how you really create a production

06:16.680 --> 06:17.710
ready package

06:18.000 --> 06:22.140
but in the end, this now can use your code.

06:22.260 --> 06:28.910
It pulls in the vue framework itself here from a CDN because that is not included in the library.

06:28.920 --> 06:33.930
Why is it not included by the way? Well to not include it twice and therefore bloat your final app code,

06:34.110 --> 06:41.930
so here we then export vue separately and then here, it pulls in our library code and simply uses it.

06:41.940 --> 06:42.960
So this is a nice demo,

06:42.960 --> 06:48.940
it gives you a sense of a very simple app where it basically showcases what you had there.

06:48.960 --> 06:54.600
In the end you would have a library which you could pull into other project, into other vue projects

06:54.630 --> 06:56.650
and then import from that library,

06:56.670 --> 07:02.580
well as you configure it basically, so as you also import from the vue library and so, you can

07:02.580 --> 07:05.750
create libraries in an easier way with that.

07:05.820 --> 07:09.840
And now let's have a look at the last build command, vue build

07:09.840 --> 07:12.280
hello.vue with target wc.

07:12.780 --> 07:15.710
If I hit enter here, I get an error

07:15.750 --> 07:22.490
that we also must define a name here and that name is actually the tag which we will later be able to use.

07:22.500 --> 07:28.960
So here, I will give this the --name configuration and name this my-greetings

07:28.950 --> 07:37.310
and you should use a name which has a hyphen in there to not clash with default html tags.

07:37.350 --> 07:43.110
So with that, it will build that web component for protection as it says and in the dist folder, you now

07:43.110 --> 07:48.490
find these files and you also find a demo here and that demo is very simple,

07:48.510 --> 07:53.670
it imports vue because you still need that dependency and then my-greeting.js,

07:53.700 --> 07:57.670
you also have a minified version available for production or for distribution then

07:57.860 --> 08:04.260
and my-greeting.js is really just in the end a normal web component which still relies on vue a bit

08:04.350 --> 08:09.110
but it's not a complete vue app here. You don't create a vue instance anywhere,

08:09.150 --> 08:16.620
you just used this in a normal html file as a normal html element and this could be a file which

08:16.780 --> 08:19.220
also uses Angular for example.

08:19.250 --> 08:20.610
So that's really awesome,

08:20.640 --> 08:27.450
you can now use your vue components in any web project, browser support is something to consider for

08:27.450 --> 08:27.840
that

08:27.930 --> 08:30.510
and the official docs tell you more about that

08:30.630 --> 08:35.520
but in the end, this is something which is extremely interesting already and will probably become more

08:35.520 --> 08:37.510
interesting even in the future.
