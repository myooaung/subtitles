WEBVTT

00:01.840 --> 00:08.050
One important part of understanding vuejs is to understand how it handles changes, so how it detects

00:08.050 --> 00:12.490
that change has occurred and how it then updates the page because in the end, that is what it's doing, it's

00:12.490 --> 00:16.500
not really loading it, it's updating parts of it through javascript.

00:16.660 --> 00:19.860
We have the vue instance on one side and the dom on the other side,

00:19.900 --> 00:26.290
I already explained that the vue instance creates and holds a template either derived from the html code

00:26.320 --> 00:32.490
or passed with this template property. In this template, we might have a message where we say hello

00:32.650 --> 00:35.130
and this of course also is represented in the dom

00:35.130 --> 00:40.600
after this has been rendered and we might have other properties used in the dom or used in our template,

00:40.690 --> 00:45.670
like this but then finally being printed or painted to dom.

00:45.670 --> 00:52.420
Now what if we change the message? We could think that vuejs constantly watches the message and

00:52.450 --> 00:54.580
updates the dom if required.

00:54.580 --> 00:56.010
The first part is right,

00:56.020 --> 01:02.650
each property we set up has its own watcher and I explained this earlier, that vuejs when we pass

01:02.650 --> 01:08.350
an object to the constructor creates these watchers for all the properties in our data property, thus

01:08.410 --> 01:15.070
allowing us or thus allowing itself to watch for changes to these properties which announce or which

01:15.070 --> 01:19.870
means that it probably needs to update something. But it's not updating like that,

01:19.930 --> 01:24.970
it's not constantly updating everything in the real dom just because it changed,

01:24.970 --> 01:33.220
think of this, if we changed message and set it to hello again, then technically we touched this property,

01:33.220 --> 01:39.400
we changed it but we changed it to the same value as before. It would re-render the part of the dom or worst

01:39.400 --> 01:45.070
of all, it may be the complete dom and that would be a real performance hit because accessing the real

01:45.070 --> 01:48.400
dom is the part which takes the most performance,

01:48.400 --> 01:52.400
javascript is super fast but accessing the dom is super slow

01:52.480 --> 01:56.210
so we want to do this as seldom as possible.

01:56.560 --> 02:01.020
Hence this is not what it does neither for message nor for any other property,

02:01.240 --> 02:07.480
instead it has an extra layer, the virtual dom and on the virtual dom,

02:07.480 --> 02:14.110
this is a representation of the real dom, kind of a copy but a copy parsed in javascript and therefore

02:14.140 --> 02:23.260
very very quick to be accessed. Vuejs then simply checks these or watches these changes, writes them to this

02:23.260 --> 02:24.360
virtual dom

02:24.430 --> 02:29.530
if we update message for example to hello everyone, even though it might have been set to hello everyone

02:29.530 --> 02:32.810
before it, it recreates this virtual dom

02:32.950 --> 02:39.250
and then it takes the difference between the template and the virtual dom and only updates this part

02:39.250 --> 02:44.540
in the real dom, so it knows which property did change,

02:44.680 --> 02:49.420
which part of the template is affected, what is the current state of the dom represented by the virtual

02:49.440 --> 02:50.080
dom,

02:50.300 --> 02:56.320
okay I got this heading here or this paragraph or whatever which actually needs to be updated

02:56.410 --> 03:02.270
and now it goes out to the actual dom, to the real dom and changes this paragraph,

03:02.350 --> 03:08.620
and since it also updated the virtual dom, it now automatically got an up to date representation of

03:08.620 --> 03:14.560
the real dom without having to take a full copy of that again, because again it constantly updates this.

03:14.640 --> 03:20.110
This is how this change detection with the watchers and updating with the virtual dom works which

03:20.110 --> 03:22.750
makes vuejs very performant and very fast.
