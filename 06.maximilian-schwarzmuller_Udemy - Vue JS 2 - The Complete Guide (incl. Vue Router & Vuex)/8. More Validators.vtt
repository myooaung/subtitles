WEBVTT

00:02.170 --> 00:05.780
So over the last lectures, we learned a lot about the basics of validation

00:05.780 --> 00:07.590
with this email validation

00:07.640 --> 00:08.630
and that's great.

00:08.630 --> 00:13.340
Let's now move on to the other controls and let's find out how we can validate these

00:13.370 --> 00:17.800
and let's dive into some other built-in validators vuelidate offers.

00:17.960 --> 00:19.540
Let's work on the age,

00:19.700 --> 00:23.990
let's say we only want to accept people which are at least 18 years old

00:24.110 --> 00:26.490
and of course age should be a number,  

00:26.750 --> 00:29.090
so what can we do here?

00:29.450 --> 00:29.780
We can

00:29.780 --> 00:38.570
first of all set up a control, a ruleset for the age so I'll name this age and we have to name it age

00:38.600 --> 00:45.800
because our property in the data method here also is named age, we're binding to age with v-model and

00:45.800 --> 00:53.030
for vuelidate to successfully synchronize this, it has to be named age. This then is a javascript object

00:53.030 --> 00:56.300
where you register all the validators you want to use.

00:56.410 --> 00:58.170
Now here I want to use required,

00:58.220 --> 00:59.920
it should not be empty

01:00.200 --> 01:07.320
but I actually also want to ensure that people enter a number and that this number is at least 18.

01:07.700 --> 01:12.750
So what we can do is we can import two additional built-in validators,

01:12.770 --> 01:18.590
the first is numeric and it simply checks whether the value is a number,

01:18.590 --> 01:24.580
the second is min and now you have minLength and minValue.

01:24.640 --> 01:30.100
Now minLength is interesting if you validate a string which should be at least six characters long,

01:30.200 --> 01:34.000
maybe for the password, minValue is what I want to use here,

01:34.010 --> 01:41.600
it allows us to check if a numeric or date value is higher than a specific value you enter.

01:41.600 --> 01:45.070
Now let's assign both validators to the age here,

01:45.110 --> 01:46.050
numeric is easy,

01:46.070 --> 01:48.020
we assign it just as required,

01:48.020 --> 01:54.380
taking advantage of this key value expansion shortcut, minLength is different though.

01:54.500 --> 01:58.100
Here you can assign min or whatever you want,

01:58.100 --> 02:01.070
again this name of the key is up to you

02:01.550 --> 02:06.520
but then here, I'll name it minVal, the value now is minValue,

02:06.530 --> 02:12.390
so what I am importing, this built-in validator. minValue now is special

02:12.410 --> 02:19.520
and that's also why I'm assigning it like this, unlike required in numeric, minValue is a function which

02:19.520 --> 02:26.720
requires an argument to be configured because we of course need to pass our minimum value, our criteria.

02:26.720 --> 02:32.080
So here I could pass 18, so that the minimum value is 18

02:32.090 --> 02:35.120
otherwise it's treated as invalid.

02:35.150 --> 02:41.600
Now with that we got this age control, let's now connect it to our input here.

02:41.780 --> 02:44.220
So I'll go back to the input field here,

02:44.390 --> 02:51.770
I'll also listen to the blur event here and reach out to $v.age and call $touch,

02:51.800 --> 02:53.990
as before.

02:53.990 --> 02:56.280
With that we connected this,

02:56.300 --> 03:00.520
let's now also mark this as invalid if it is invalid

03:00.740 --> 03:01.830
and this is super simple,

03:01.850 --> 03:03.690
we already defined the styles,

03:03.710 --> 03:11.140
let's now just set class and bind it to a javascript object where we set an invalid class if 

03:11.160 --> 03:16.860
$v.age, that's the name of the control we created, has an error,

03:16.880 --> 03:18.660
it's as simple as that

03:19.040 --> 03:21.120
and with that we should have all we need.

03:21.270 --> 03:23.560
Let's now save this and find out if it works,

03:23.630 --> 03:28.680
if I go back to my application, I'll reload just to make sure it really is reset,

03:28.700 --> 03:30.780
now here this is of type numeric,

03:30.950 --> 03:38.840
if I enter an E and I click out of there, it's invalid. If I enter a one, it's still invalid because it's not

03:38.840 --> 03:41.530
higher than 18. If I enter 18,

03:41.630 --> 03:45.850
now it becomes valid because it's a number and it's higher than 18,

03:45.970 --> 03:50.210
if I enter nothing, it's invalid again because well, there is no value

03:50.210 --> 03:52.580
and we did have the required validator.

03:52.580 --> 03:54.180
So this seems to work,

03:54.230 --> 04:00.560
now of course we can also output an error message and we can also take advantage of this validator

04:00.770 --> 04:06.500
which takes a value to also output that value in our error message.

04:06.560 --> 04:12.080
So below the age input, I'll add a paragraph where I output

04:12.350 --> 04:15.070
you have to be at least

04:15.200 --> 04:22.210
and then I want to output the value I defined in my validation rule, years old, something like that.

04:22.250 --> 04:28.840
Now that should be output if $v.age.minVal,

04:28.870 --> 04:31.510
if that's not true.

04:31.760 --> 04:35.940
minVal now refers to my property I defined here,

04:35.990 --> 04:41.590
as I said, you can pick this name, totally free, you don't have any limitations.

04:41.670 --> 04:47.120
Now I want to access this parameter I passed and I can do this because vuelidate exposes it to me,

04:47.690 --> 04:54.320
here in my sentence between double curly braces, I can reach out to $v.age

04:54.380 --> 04:57.710
and now there's the special params,

04:57.710 --> 05:00.100
$params object.

05:00.100 --> 05:08.640
This now hold params for all our different validators including minVal which I can now access there

05:08.970 --> 05:19.040
and on minVal, there now will be a min property and you can always output this as I did earlier in this

05:19.140 --> 05:24.880
module where it just logged $v, you can of course log $v.age, $params to see what's

05:24.880 --> 05:25.770
inside there,

05:25.780 --> 05:32.920
there will be a minVal property with this min property which is the value we passed to the minValue

05:32.920 --> 05:34.400
function down there.

05:34.510 --> 05:41.980
So now it should output you have to be at least 18 years old if we don't enter a value that is higher

05:42.220 --> 05:44.350
then this minimum value here.

05:44.410 --> 05:47.790
So if we go back, right at the start we don't see anything

05:47.800 --> 05:54.920
but if I enter a one, you see you, ok there's a typo but you see you have to be at least 18 years old.

05:54.970 --> 06:03.760
Now if I go back and quickly fix this typo and now we only output this correctly, only if I'm lower than

06:03.760 --> 06:07.690
18, if I enter 18 or higher we don't get this error.

06:07.720 --> 06:13.990
So now we have these two, we can get access to the data we used to configure our validators which of course

06:13.990 --> 06:19.300
makes them really reusable and gives us a lot of power. I can only encourage you to dive into the

06:19.300 --> 06:22.900
official docs to learn about all the built-in validators.

06:22.900 --> 06:28.390
That being said though, let's move on to the password because here, we got another interesting feature,

06:28.630 --> 06:31.270
we want to ensure that they both are equal.
