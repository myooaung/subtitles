WEBVTT

00:01.780 --> 00:06.970
So after learning how we can structure our application over a multiple files and folders and you can

00:06.970 --> 00:08.740
be as granular as you want,

00:09.010 --> 00:13.810
I want to bring another problem, potential problem to your attention.

00:13.810 --> 00:20.230
If you use multiple modules like we do here, you have to make sure that you're not using the same

00:20.230 --> 00:21.640
name twice,

00:21.640 --> 00:27.340
for example here doubleCounters in the getters in my counter.js file and then in my shared

00:27.340 --> 00:36.790
getters, if I were to rename this to doubleCounter, if I save this you see that I get an error that

00:36.790 --> 00:39.430
key doubleCounter is duplicate.

00:39.850 --> 00:41.520
So I shall not do that,

00:41.530 --> 00:48.290
I must not do this actually because all the things here are in the end merged into one central store

00:48.340 --> 00:50.520
hence they share the same namespace

00:50.560 --> 00:57.970
so you absolutely need to make sure that all your getters, your actions, your mutations have a unique

00:57.970 --> 01:04.540
name and not only in the file they sit in but in all the files which in the end get merged together in

01:04.550 --> 01:05.660
the store.

01:05.800 --> 01:10.230
Now for small to medium sized applications, that is something you might be able to handle,

01:10.240 --> 01:13.480
you can just kind of make sure that you're not repeating your names,

01:13.660 --> 01:20.770
also maybe you choose to give your getters, actions and on some prefix like shared values, something like

01:20.770 --> 01:21.030
that,

01:21.040 --> 01:22.500
whatever works for you

01:22.990 --> 01:28.330
but for large applications, here's another pattern you may consider using.

01:28.330 --> 01:32.710
You can create a new file in the store file, folder and I will name it

01:32.710 --> 01:33.520
types.js

01:33.650 --> 01:41.230
and here, I will set up some constants which will get unique names which are all stored in this file

01:41.260 --> 01:47.520
which I will then assign as names for my methods and properties and so on in all the other files thereafter.

01:47.710 --> 01:48.880
How should this work?

01:49.180 --> 01:51.620
Well let's create the doubleCounter here,

01:51.910 --> 01:58.040
it's all capital case because that kind of is the convention for global constants, doubleCounter

01:58.100 --> 02:02.750
shall be a string which I'll now name counter/DOUBLE_COUNTER,

02:02.950 --> 02:06.380
so generally the same name as the constant has

02:06.550 --> 02:12.020
but with this counter/ prefix to indicate to which part it belongs.

02:12.040 --> 02:18.260
I can do the same with the click counter here to also exchange this.

02:18.580 --> 02:24.700
And now I can go to my counter.js file and here I want to import from this types file and I want

02:24.700 --> 02:27.550
to import all the types in one object,

02:27.550 --> 02:30.000
so from the types.js

02:30.010 --> 02:36.700
file and then due to ES6, we can use the send text where we set up a dynamic property name.

02:36.700 --> 02:42.630
So we're using square brackets, we can tell javascript assign this name on runtime,

02:42.790 --> 02:46.730
so it then fetches the name from types and then here, doubleCounter,

02:46.810 --> 02:52.870
so this will in the end be a string name here, we just use the square brackets to do that dynamically

02:52.870 --> 02:56.150
so that we can use a constant which stores the name

02:56.380 --> 02:58.890
and here I do the same for the click counter

02:58.890 --> 03:01.860
now. Now have these names replaced,

03:02.020 --> 03:06.970
of course I also need to go to my results where I use that

03:06.970 --> 03:12.160
and here if I map it like this, this won't work anymore because doubleCounter and stringCounter don't

03:12.160 --> 03:13.340
exist.

03:13.360 --> 03:17.720
So instead here now I also have to import my types

03:17.830 --> 03:28.180
so from the store types file and then in mapGetters, here I also now want to pass an object instead of

03:28.180 --> 03:36.040
an array so that I can still use my names here, so that I can say doubleCounter shall be types double

03:36.040 --> 03:41.620
counter and stringCounter should be types

03:41.650 --> 03:48.130
string click counter I name it there. So with that, I can still use the names I use in my template but I

03:48.130 --> 03:52.710
assign now the names which are actually used in my getters,

03:52.720 --> 03:58.450
so this allows me to use different names in template and in my getter.

03:58.450 --> 04:04.020
Now that is one thing, I will now also copy that to my other result here

04:04.060 --> 04:07.090
and replace this, here of course

04:07.090 --> 04:11.880
I don't need the stringCounter and that should be just renamed to counter.

04:12.030 --> 04:13.750
And with that if we reload,

04:13.930 --> 04:14.910
it still works

04:14.920 --> 04:22.410
as before which is great but now we're using the types file to manage all our global names for, well

04:22.420 --> 04:28.000
right now only the getters but you would do the same for all the actions and mutations because as you store

04:28.000 --> 04:35.290
everything in this file and you choose a prefix here, you ensure that a it's unique because since everything

04:35.290 --> 04:39.520
is stored in one file, you can't use the same name twice

04:39.520 --> 04:45.370
and you also ensure that the strings are unique because the strings are what is the or what are the method

04:45.370 --> 04:48.940
names in the end because we assign them dynamically here,

04:49.090 --> 04:55.830
we ensure that these strings are unique because we prefix them with well the module name kind of.

04:56.230 --> 05:02.860
And this is how you could also set it up for all the actions, all the getters, all the mutations and

05:02.890 --> 05:04.650
that is a lot of work,

05:04.660 --> 05:05.800
I do agree

05:06.040 --> 05:12.640
but it might be worth it since in large applications, this really ensures that you're not using the same

05:12.640 --> 05:13.440
name twice,

05:13.510 --> 05:19.360
if you want to use a different approach or if your application just is not that large, that this extra

05:19.360 --> 05:20.680
effort is worth it,

05:20.770 --> 05:22.710
you of course don't have to do it.

05:22.980 --> 05:30.790
So I'll quickly finish this and I'll be back once I exchanged everything with global types, like this.

05:32.670 --> 05:34.560
So I finished it,

05:34.560 --> 05:40.500
you can find it attached to the last lecture of this module of course, were quite a lot of changes.

05:40.620 --> 05:47.670
I changed all the files, actions, getters and mutations.js here to now export a default object instead

05:47.670 --> 05:49.160
of a named constant

05:49.350 --> 05:56.550
and therefore I also change the imports in the store to no longer have star as actions but only actions,

05:56.730 --> 06:02.520
I did these changes or I implemented them because I need to export an object here so that I can use

06:02.760 --> 06:07.620
this dynamic setting of the name here for the property which I couldn't use in a constant.

06:07.800 --> 06:09.600
Therefore this change was taken

06:09.600 --> 06:14.430
and besides that, I simply replaced all the names here with this,

06:14.610 --> 06:21.540
well with the names stored in these types file where I then created these constants for all the operations

06:21.540 --> 06:25.260
we do have. Now again, honestly that is quite a lot of work,

06:25.260 --> 06:26.540
it might be worth it,

06:26.580 --> 06:28.760
I at least wanted to show it to you,

06:28.770 --> 06:35.010
it's up to you if you choose this path or if you just want to be careful when assigning your names.

06:35.160 --> 06:41.880
And with that, I'd say we really went through a lot in this module and had a detailed look at

06:42.000 --> 06:42.480
vuex.
