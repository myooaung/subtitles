WEBVTT

00:02.630 --> 00:09.340
How does authentication work in single page applications, that's an important question. For non-single

00:09.370 --> 00:10.650
page applications,

00:10.690 --> 00:15.490
it works just as you learned it in all these traditional web development courses,

00:15.520 --> 00:18.340
you have a session which you manage with the server,

00:18.340 --> 00:19.540
nothing special here,

00:19.630 --> 00:21.590
not really related to vue then.

00:21.920 --> 00:27.760
However if we have a single page application powered entirely by vue, it becomes important to understand

00:27.760 --> 00:29.640
how authentication works.

00:29.800 --> 00:35.890
We still have a server and a client where our single application runs, the browser,

00:35.890 --> 00:42.780
now let's say a user logs in or signs up, we send that information let's say for a login to the server

00:43.210 --> 00:44.960
and there, we check if it's correct,

00:44.980 --> 00:52.480
if we do find a user with that password in our database. If that's the case, we send back some information

00:52.480 --> 00:55.430
and traditionally, this would have been a session.

00:55.720 --> 01:03.120
Now in single page application, we work with restful APIs that are stateless, that don't care about connected

01:03.120 --> 01:07.480
clients and that therefore don't manage sessions,

01:07.510 --> 01:15.460
so instead of a session, we receive a token now. The token then is stored on the server and the token

01:15.460 --> 01:23.350
essentially is a very long string which can be decoded to a javascript object with some information about

01:23.350 --> 01:24.280
the user

01:24.460 --> 01:31.780
and well the validity of the token, when it expires and so on. The token also is generated in a way

01:32.080 --> 01:36.700
that the server can always verify if it was created by him,

01:36.700 --> 01:41.150
so if the token was created on the server or if you're trying to fake a token,

01:41.410 --> 01:43.870
so that is not possible.

01:43.900 --> 01:47.460
So we then store this token on the browser, on the frontend

01:47.470 --> 01:52.330
for example in the browsers local storage through the local storage API,

01:52.510 --> 01:58.940
this has nothing to do with vuejs, local storage is something we can simply access in the browser.

01:59.290 --> 02:07.270
And if we ever then request some data on the server from an API endpoint that actually requires us to

02:07.510 --> 02:08.950
be logged in,

02:08.950 --> 02:16.690
we simply send our request and we attach the token to it, so that we always have this token which we

02:16.690 --> 02:22.570
can't fake, which can be validated on the server as an identification criteria

02:22.570 --> 02:26.620
we can pass on with our requests.

02:26.620 --> 02:34.080
Now this token which we store on the frontend is always only valid for a short amount of time

02:34.230 --> 02:40.990
for security issues, though be aware that stealing it also isn't that trivial since local storage can

02:40.990 --> 02:47.180
only be accessed from javascript and vuejs prevents cross-site scripting attacks by default

02:47.410 --> 02:54.350
but again token is only valid for a limited amount of time and this token then is what allows us to authenticate

02:54.470 --> 02:55.530
the user.

02:55.540 --> 02:59.620
Now we're going to see all these things in action of course in this module,

02:59.620 --> 03:01.850
this is how it works in theory.

03:01.990 --> 03:08.230
Now with that, let's dive in and let's make sure that we can actually authenticate a user.
