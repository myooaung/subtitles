WEBVTT

00:01.770 --> 00:07.680
I created this simple starting application which you of course can find attached to this lecture.

00:07.710 --> 00:12.640
It has two buttons which allow me to increment and decrement a counter here which is then output up here

00:12.750 --> 00:15.580
and actually, I do use two different components for this.

00:15.630 --> 00:22.380
The counter component which holds two buttons and each button basically just triggers a method called

00:22.380 --> 00:29.100
where I emit the updated event and either add 1 or subtract 1 and then I have result where I simply

00:29.100 --> 00:30.030
output the counter,

00:30.030 --> 00:37.290
I do get the counter as a prop here and right now, all the state is stored in app.vue where I do have

00:37.290 --> 00:38.990
counter as a property

00:39.210 --> 00:41.600
and I update the counter here

00:41.610 --> 00:46.810
when I received the updated event from the counter component. There is nothing wrong with that setup

00:46.830 --> 00:53.970
and for such a simple app, you probably want to use that setup and not vuex, but vuex is easier

00:53.970 --> 00:58.980
to understand if we start applying it to a simple app before we then in the last module of this course

00:59.250 --> 01:01.720
will use it on a bigger application.

01:01.710 --> 01:05.720
So now let's work on this app and step by step

01:05.720 --> 01:11.880
introduce the different ideas of vuex, starting with a central state. So

01:11.880 --> 01:20.190
the goal here is to get this counter out of this app.vue file into a new file, let's say into a new module

01:20.190 --> 01:24.180
of our application which holds this central state.

01:24.180 --> 01:32.130
Now typically you store all the vuex related parts or files in a separate folder which you name store,

01:32.250 --> 01:38.270
it's on the same level as components, though I will say right away at the end of this module, you'll find

01:38.370 --> 01:43.290
an article with a further resources and b different setups,

01:43.380 --> 01:47.300
so how else you could structure your files if you wanted to do that

01:47.310 --> 01:51.930
but this is a common set up so let's use that. In this store folder,

01:51.930 --> 01:53.680
I'll create a new file, the store.js

01:53.680 --> 01:55.180
file,

01:55.230 --> 02:02.870
this is simple javascript file which should hold my store. In order to be able to create such a store,

02:02.880 --> 02:06.330
we need some helpers from the vuex package,

02:06.330 --> 02:13.080
so let's install it with npm install --save and then vuex, this will pull down vuex which

02:13.080 --> 02:17.450
is an extra package which gives us some additional tools to use here.

02:17.670 --> 02:23.930
Once it is finished, in the store.js file we want to import vue from vue

02:24.270 --> 02:28.860
and we also want to import vuex from vuex,

02:29.010 --> 02:31.560
so these are the two tools we'll need here.

02:32.130 --> 02:40.380
And then we can simply tell vue to use vuex, to register this plugin basically right,

02:40.390 --> 02:42.750
like with the router where we also did this,

02:42.780 --> 02:48.960
now we enable this vuex functionality in our vue application, vuex basically is a package which

02:48.960 --> 02:53.740
gives us some additional tools to use here for this state management and so on.

02:54.120 --> 03:04.050
So now that we enabled vuex, we can create a new store by typing new vuex store like this,

03:04.050 --> 03:08.180
now store is a method where we pass an object where we configure that store.

03:08.520 --> 03:13.780
Now in that store, what do we need there, what do we want to have in the store?

03:14.010 --> 03:18.070
Well as the main task is to have the state of the application,

03:18.210 --> 03:22.610
we want to have a property named state here and this name is not arbitrary,

03:22.680 --> 03:25.820
it has to be named state for vuex to detect it.

03:27.190 --> 03:33.780
That now is an object where we may store all the properties our application has,

03:33.820 --> 03:39.040
like for example the counter and set it to zero initially, that's the same value I do have here in

03:39.040 --> 03:40.690
the app.vue file.

03:41.080 --> 03:44.720
So with that, the counter is now in our central store,

03:45.070 --> 03:47.530
later on we will add more things to that store, for now

03:47.540 --> 03:49.070
that's all I want, though

03:49.090 --> 03:52.330
I of course want to use that store outside of this file too,

03:52.330 --> 03:59.600
so I need to export it and I will export a constant named store where I save this new store in. Now with the

03:59.630 --> 04:05.800
store exported, I want to go to my main.js file and here register it in my root vue instance, so that

04:05.800 --> 04:10.570
I can really use it in my application because right now having it sitting in that extra file doesn't

04:10.570 --> 04:11.140
do anything,

04:11.140 --> 04:12.490
I won't be able to use it.

04:13.280 --> 04:23.630
Therefore here, I'll first import the store from my just created file in the store folder, so from the

04:23.630 --> 04:27.940
store.js file there, like this

04:28.360 --> 04:34.180
and now with store imported, all I have to do is like with the router, register it here as a property

04:34.180 --> 04:35.370
on my vue instance,

04:35.410 --> 04:42.900
so I could say store store or since it's the same name, just the shortcut again where ES6 will automatically

04:43.090 --> 04:46.600
well set up the right key value pairs here since they have the same name.

04:46.630 --> 04:53.290
So with that, the store is now added to my root vue instance and therefore I have access to the store,

04:53.290 --> 04:55.580
now how do I access it though?

04:56.170 --> 04:57.570
Well it's very simple,

04:57.850 --> 05:04.860
let's first go to the counter app where we have these buttons, instead of emitting our event here,

05:04.870 --> 05:11.800
I can now access the store with $store, dollar sign again signals that this is not a property

05:11.800 --> 05:12.490
we created,

05:12.490 --> 05:18.790
instead it comes from vuejs on its own or in this case, from a third party package, so store gives us

05:18.850 --> 05:20.810
access to the central store.

05:21.160 --> 05:27.310
Well and there, we can access our state and we know what we have a counter there which I basically want

05:27.310 --> 05:30.600
to increment in this case and decrement

05:30.610 --> 05:31.820
in the second case,

05:31.840 --> 05:35.310
so let's quickly do that. With this,

05:35.310 --> 05:39.150
I'm changing the state in my store, in the result.vue file,

05:39.180 --> 05:43.020
I can get rid of my props and settle at a computed property here

05:44.110 --> 05:53.320
which I'll name counter to fit the name I output in my template and this shall then return this store state

05:53.410 --> 05:58.220
counter and whenever the counter there changes, this shall change too

05:58.270 --> 06:00.390
therefore this template is updated.

06:00.640 --> 06:06.670
Now this allows me to now in my app.vue file remove both the part where I pass the props as well

06:06.670 --> 06:09.510
as listening to the event and remove the data down there,

06:09.500 --> 06:11.430
it didn't need that

06:11.440 --> 06:16.500
and in store, I recognize this should have a capital S at the beginning,

06:16.520 --> 06:18.700
so vuex Store, like this.

06:18.700 --> 06:25.660
With that if we save this and go back to the application, you now see it still works as before but it's

06:25.660 --> 06:26.600
improved,

06:26.650 --> 06:34.660
we now store the state in this central store and hence don't need to take the route over our app.vue

06:34.750 --> 06:35.330
file,

06:35.380 --> 06:41.440
instead we can directly communicate with it with this.$store. Already is a lot better

06:41.650 --> 06:45.050
but still has some issues as I will highlight in the next video,

06:45.160 --> 06:47.360
so we can still improve this solution.
