WEBVTT

00:01.890 --> 00:05.320
We learned about all these lifecycle hooks in the last lecture,

00:05.320 --> 00:07.070
now let's see them in action.

00:07.330 --> 00:14.280
We can easily execute some code at the different points of the lifecycle by adding them here as functions to the

00:14.290 --> 00:16.300
object we're passing to the vue instance,

00:16.300 --> 00:23.440
so to our vue instance basically. The first one is beforeCreate, so we can add the beforeCreate

00:23.440 --> 00:25.070
function like this

00:25.180 --> 00:30.280
and here I will simply console log beforeCreate so we can see reached this hook,

00:30.280 --> 00:33.640
you might of course execute any other code you need to execute there.

00:34.330 --> 00:37.080
Thereafter, we have created,

00:37.150 --> 00:39.770
so let's also add this function here

00:40.090 --> 00:43.100
and of course I shall also rename this here to created.

00:44.220 --> 00:51.930
Then we have beforeMount, we now created this vuejs instance but it hasn't been mounted to the dom

00:51.930 --> 00:52.390
yet,

00:52.440 --> 00:57.430
so it is yet to be reflected on what we see in the browser.

00:58.740 --> 01:04.980
Thereafter of course, we have mounted, now mounted as the name implies means now it is attached to our

01:05.070 --> 01:05.790
real dom,

01:05.790 --> 01:07.020
we can see it in the browser

01:07.020 --> 01:16.050
now. If some data changes, we have beforeUpdate which is executed right before the dom or the part which

01:16.050 --> 01:23.130
needs to be updated in the dom is re-rendered and then we get updated which as you might guess is called

01:23.130 --> 01:26.610
right after this part of the dom has been updated.

01:27.240 --> 01:35.010
And then when it comes to it and for our instance, we get beforeDestroy which is called right before

01:35.010 --> 01:36.220
the instance,

01:36.330 --> 01:42.600
well yeah like you guess is removed, so is destroyed not only removed, it is destroyed.

01:42.900 --> 01:46.370
And finally at the very end we got destroyed,

01:46.410 --> 01:50.810
this would be a hook where it's good to do some cleanup work or beforeDestroy hook

01:50.820 --> 01:56.450
to be precise, to do some cleanup work if you need to release some resources or anything like that.

01:56.840 --> 01:58.750
This is the whole cycle,

01:58.800 --> 02:04.390
now we could already see some of these functions but not all, to be able to see beforeUpdate and updated,

02:04.410 --> 02:10.460
we need to implement something which changes something and to see beforeDestroy and destroy,

02:10.450 --> 02:14.940
we need to implement some code to actually destroy this instance.

02:15.120 --> 02:18.450
I'll do both with buttons here,

02:18.900 --> 02:26.140
the first button should say update title and all I want to do here is on a click listener,

02:26.250 --> 02:35.750
I simply want to set the title equal to changed and then I will add a button where I say destroy 

02:37.040 --> 02:45.670
and here I want to call the destroy method let's say which I'll add down here in the methods property,

02:45.690 --> 02:50.890
that's important to realize, all these lifecycle hooks are not inside the methods property,

02:50.910 --> 02:56.930
these are all functions registered directly on the root object we passed to this constructor.

02:56.940 --> 03:05.430
So in the methods property here, I will set up destroy which is of course a function where I will call

03:05.460 --> 03:10.430
this referring to this vue instance and then destroy with a dollar sign at the beginning,

03:10.470 --> 03:13.050
this will destroy this instance.

03:13.620 --> 03:19.130
Well let's see it in action by opening up the console, hitting control enter to re-render this

03:19.230 --> 03:24.530
and we already see beforeCreate it created, beforeMount it mounted which makes sense,

03:24.540 --> 03:29.190
these are the first hooks get which get executed in this order.

03:29.190 --> 03:35.520
Now let me hit update title and you'll see that beforeUpdate and updated was executed, of course because

03:35.580 --> 03:36.840
this is what we did,

03:36.840 --> 03:43.010
we updated something, we updated a property, we updated a property which required the dom to be changed

03:43.230 --> 03:46.050
and hence we saw beforeUpdate and updated,

03:46.290 --> 03:47.110
interesting.

03:47.130 --> 03:53.750
If I hit update title again, it will set title to changed again which is the value the title already has,

03:54.680 --> 04:03.160
see that? No method gets executed now because as I explained in the how does vuejs update the dom lecture,

04:03.230 --> 04:11.220
it doesn't do this if there is no real change to be taken care of. It recognizes that even though we

04:11.240 --> 04:14.570
yes touched this title property,

04:14.570 --> 04:18.020
we didn't change the value, it's the same value as before,

04:18.170 --> 04:20.450
hence no need to re-render anything,

04:20.450 --> 04:25.200
hence no need to call either beforeUpdate nor updated.

04:25.550 --> 04:31.490
And finally let's destroy it by hitting the destroy button and you see beforeDestroy and destroy

04:31.490 --> 04:39.440
got called and now the changed text is still here but it's not longer controlled by vuejs, the vuejs

04:39.660 --> 04:42.560
instance is gone and no longer available,

04:42.650 --> 04:48.650
so every other code we would have here, all these buttons will no longer work and I can prove this

04:49.040 --> 04:50.690
by resetting it,

04:50.720 --> 04:56.660
clll control again and hit update title, you see even though we now theoretically should see an update

04:56.660 --> 04:59.590
because the text isn't different one than changed,

04:59.750 --> 05:03.250
it doesn't work because the vuejs instance is dead.

05:03.440 --> 05:08.390
This does not mean that it removes all the code from the dom as you can clearly see, it only means

05:08.480 --> 05:10.900
it removes all the javascript logic,

05:10.970 --> 05:19.120
so all our connections are now dead. And this is the vuejs life cycle and a tiny bit of how vuejs

05:19.130 --> 05:26.170
updates a dom with the beforeUpdate and updated methods here in action.

05:26.180 --> 05:30.160
With that let's move on to more practice driven modules

05:30.230 --> 05:37.110
but that was a core module to understand how vuejs works behind the scenes and how you may utilize it.
