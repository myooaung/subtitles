WEBVTT

00:02.160 --> 00:07.710
So we learned a lot about synchronous validating which means every keystroke immediately gives us back

00:07.710 --> 00:15.030
a result or if we use @blur every time we leave this input, we immediately get back a result, we don't

00:15.030 --> 00:20.820
need to run some async code, we don't need to reach out to a server or do some operation which takes

00:20.820 --> 00:21.630
a bit longer.

00:21.630 --> 00:28.020
Now you do have these operations though and a good example is reaching out to a server to check whether

00:28.020 --> 00:35.640
an e-mail address is taken, now to create this validator we'll actually walk through two different lectures.

00:36.000 --> 00:43.020
In the first lecture, we'll create our own validator which is super simple as you will learn, thereafter

00:43.230 --> 00:48.030
we will learn how we can adjust this validator to run asynchronously,

00:48.030 --> 00:51.090
so let's start with the custom validator in this lecture.

00:51.360 --> 00:55.460
Let's say for the e-mail address, we want to check whether it's taken or not

00:55.650 --> 01:01.110
and for that I'll create my own validator and you can of course add this validator for every control

01:01.140 --> 01:02.210
you want.

01:02.640 --> 01:05.530
For that I'll go to my e-mail validations rule here,

01:05.550 --> 01:11.680
this group of rules and now you can give this any name you want, I'll name it unique.

01:12.030 --> 01:18.180
Now such a validator in its simplest form is just a function with the function keyword or an arrow function

01:18.570 --> 01:24.510
which automatically receives the input value passed in by vuelidate

01:24.780 --> 01:30.510
and then you have to return true or false depending on whether you want to consider this validation as

01:30.510 --> 01:32.490
successful or not.

01:32.490 --> 01:40.470
So for example if I return false here, let's see what happens to the e-mail,

01:40.560 --> 01:43.280
if I go up to my e-mail field,

01:43.680 --> 01:46.040
I can enter whatever I want,

01:46.080 --> 01:51.000
it's never becoming valid because my custom validator always returns false.

01:51.060 --> 01:51.450
So this

01:51.450 --> 01:54.550
always fails even if the other one succeed,

01:54.570 --> 01:56.150
this one always fails,

01:56.160 --> 01:58.290
that's of course not too useful.

01:58.590 --> 02:06.780
Let's say we want to treat any email address as valid as long as it isn't test@test.com and we'll

02:06.780 --> 02:09.930
in the next lecture expand this to actually have a look at the server,

02:09.960 --> 02:12.220
which e-mail addresses we may use.

02:12.300 --> 02:19.680
So here I will check if val is not equal to test@test.com,

02:19.740 --> 02:24.300
so if it's not equal, this will return true and therefore validation passes,

02:24.300 --> 02:28.490
if it is equal, this returns false and validation fails.

02:28.500 --> 02:36.390
So if I go back, test2@test.com is good, makes it through the validation, if I remove the 2 though, it

02:36.390 --> 02:37.240
fails.

02:37.440 --> 02:40.950
With that we get our own custom validator, in the next lecture,

02:40.980 --> 02:44.010
we'll now turn this into an asynchronous one.
