WEBVTT

00:01.780 --> 00:04.860
Now that we understood why we might need such a development server,

00:04.860 --> 00:09.960
the question is how should I develop a workflow look like or what is a development workflow in the

00:10.050 --> 00:17.460
beginning? Until now, our workflow was basically paced in the script import at the top, the script import

00:17.490 --> 00:24.090
to the vuejs package and then write our vuejs code which is possible because we imported the script

00:24.540 --> 00:25.590
and that works,

00:25.600 --> 00:32.520
that is fine for simple applications. In more complex one, you might probably have multiple script imports

00:32.880 --> 00:36.120
and you might have multiple packages you use,

00:36.120 --> 00:39.240
you want to bundle them together, you want to build them,

00:39.240 --> 00:41.180
you might want to use ES6

00:41.190 --> 00:42.300
as I explained earlier,

00:42.300 --> 00:47.720
so you might not want to use the ES5 limitations, instead you want to use ES6 and have your build process

00:47.730 --> 00:49.350
compile it.

00:49.350 --> 00:55.740
So we have our code here and when we ship it on the production server where the user is able to see

00:55.740 --> 01:02.170
it, we want to transform it before doing so, we want to apply some special features, use some special features

01:02.170 --> 01:08.070
a development workflow can offer us, those special features would be that we can compile single file

01:08.070 --> 01:15.330
templates in a vuejs application. Now we haven't talked about single file templates yet, single file

01:15.330 --> 01:23.490
templates are a powerful alternative to using the el property and inferring a template from the dom or

01:23.490 --> 01:24.930
the template property

01:24.930 --> 01:31.230
and actually, I will only use single file templates throughout the rest of the course but no worries, I will

01:31.230 --> 01:34.200
dive deeper into them and explain how they work.

01:34.230 --> 01:37.260
So we have these single file templates, as the name implies

01:37.260 --> 01:45.990
it's basically the template outsourced into a separate file and the workflow we'll be using has a certain

01:46.080 --> 01:53.590
let's say tool in it which understands such single file templates and then is able to compile them.

01:53.670 --> 02:00.090
And I mean with that compile them during the development workflow so that the app we ship already has

02:00.090 --> 02:06.060
the compiled templates, so the template transformed into javascript code which is then executable in the

02:06.060 --> 02:08.650
browser. That is different to the current approach,

02:08.790 --> 02:10.880
I touched on this in the last module,

02:10.890 --> 02:15.920
right now we're using a setup where everything gets compiled in the browser,

02:15.990 --> 02:22.200
we're shipping strings or this element selector and we're leaving it to vuejs to select these parts

02:22.260 --> 02:27.040
in the dom at runtime and compile it from the native dom there.

02:27.060 --> 02:33.450
Now with that approach, we're able to compile it on our machine which makes it much faster and smaller

02:33.690 --> 02:38.810
because we're able to get rid of this compiler and we are shipping the finished code

02:38.820 --> 02:40.770
but for that we need such a workflow,

02:40.770 --> 02:42.430
there is no way around that.

02:42.600 --> 02:48.420
That will also allow us to use case insensitive component selectors and I'll come back to this in the component

02:48.420 --> 02:55.410
sections and we could apply some preprocessors, like babel to use ES6 code or to compile sass to

02:55.410 --> 02:57.220
css if you want to compile that.

02:57.420 --> 03:03.780
As I mentioned earlier, having these features not only makes our code more fun to write and gives us

03:03.780 --> 03:10.320
some additional help or well allows us to use next-gen javascript features for example but since we

03:10.320 --> 03:17.400
use these single file templates, it will also allow us to significantly shrink the size of the vuejs code

03:17.400 --> 03:18.490
we shipped to the server

03:18.510 --> 03:22.830
since you can get rid of this compiler since no compilation happens in a browser.

03:22.900 --> 03:27.690
Yes of course, the re-rendering will always happen there but it already has the compile templates and

03:27.690 --> 03:31.160
compiled just means transformed to javascript.

03:31.230 --> 03:38.090
So we have this side effect and all of that are good reasons why we might want to use such a workflow,

03:38.100 --> 03:40.290
it allows us to write better code,

03:40.350 --> 03:44.540
it allows us to use other features to shrink the size to bundle it all together,

03:44.640 --> 03:49.050
really all the things we need for medium sized and bigger applications.
