WEBVTT

00:01.470 --> 00:08.460
So let's start exercise one, let's build a local filter where I want to basically have some text like

00:08.670 --> 00:11.770
some text which should be reversed.

00:11.880 --> 00:13.670
Now since it is a local filter,

00:13.710 --> 00:16.530
it's as easy as adding filters here

00:16.830 --> 00:18.040
and let's give it a name,

00:18.120 --> 00:21.360
for example reverse which makes sense I guess.

00:21.360 --> 00:27.030
Now reverse of course is a method like all filters are and we get the value we want to work with and

00:27.030 --> 00:29.200
then we return value,

00:29.220 --> 00:35.040
now to reverse a string, we first have to split it into individual characters so that we have an array

00:35.040 --> 00:37.060
of characters instead of a string,

00:37.260 --> 00:40.350
then we can call the reverse function on that array

00:40.710 --> 00:47.630
and then we can again join it, join it with an empty string to join characters next to each other and

00:47.640 --> 00:49.820
have no character in between.

00:49.820 --> 00:52.250
That is really all, that is the reverse filter

00:52.410 --> 00:58.400
and I can show you how it works by now outputting this in string interpolation here,

00:58.620 --> 01:00.120
so outputting it like this,

01:00.120 --> 01:02.060
of course some text now would not work,

01:02.060 --> 01:08.540
so we have to turn this into a string and then apply our reverse filter here.

01:08.560 --> 01:10.100
I had to turn it into a string

01:10.120 --> 01:15.550
otherwise vuejs would look for a property named some text which wouldn't make sense because it's an

01:15.580 --> 01:17.130
invalid property name to begin with,

01:17.380 --> 01:20.370
so let's see if that worked. Looks great to me,

01:20.410 --> 01:26.290
we see some text was indeed completely reversed not just individual words but the whole string which

01:26.290 --> 01:28.430
is exactly what our filter here does.

01:28.630 --> 01:32.720
So that was really quick and easy, this first local filter,

01:32.830 --> 01:38.150
the next task is to build a global filter which also uses a word,

01:38.200 --> 01:44.440
let's stick to the example here, test and then outputs this new string here which also gives us the

01:44.440 --> 01:46.560
length. For a global filter,

01:46.630 --> 01:54.560
I will go into the main.js file and here, I want to register a new filter with vue filter,

01:54.730 --> 02:04.940
let's give it a name of let's say calculate length because that is what it does

02:05.190 --> 02:10.570
and this shall be a function, I'll use ES6 syntax here which takes a value of course

02:11.460 --> 02:19.140
and it shall then return a new string based on that. This new string shall basically be our value because

02:19.140 --> 02:24.420
we don't want to change the word but we do want to append something, we want to append a whitespace

02:24.960 --> 02:27.060
and an opening parentheses

02:27.210 --> 02:31.170
and in the end we will have a closing parentheses, like this

02:31.290 --> 02:38.310
but in between those parentheses, we now want to have the length being calculated and we can do this

02:38.340 --> 02:45.200
by simply applying or using value length, value is a string and strings have the length property.

02:45.210 --> 02:46.110
Now let's try this out,

02:46.110 --> 02:53.470
we created this calculate length filter here and therefore, I can quickly turn this into string interpolation

02:53.520 --> 02:58.170
here, for that of course I need to use a string again because otherwise you would look for a property

02:58.170 --> 02:59.610
named test here

02:59.760 --> 03:00.740
and then I can use,

03:00.770 --> 03:06.340
whoops, then I can use calculate length like this.

03:06.360 --> 03:10.460
Let's see this in action, looks exactly how I wanted it to look like,

03:10.470 --> 03:15.460
let's try it with something else like for example my name here, choose your name of course.

03:15.690 --> 03:17.210
Well that looks about right,

03:17.430 --> 03:21.630
so these were the first two exercises solved by using filters,

03:21.630 --> 03:26.050
now let's do the same by using computed properties.

03:26.340 --> 03:32.730
So I will quickly copy the two paragraphs I used before because I want to use the same text so that

03:32.730 --> 03:34.420
we have exactly the same results

03:34.470 --> 03:37.690
but now of course with computed properties.

03:37.860 --> 03:39.580
Now how do we do that?

03:39.750 --> 03:46.590
Now the issue of course is that here, we're hard coding some text, therefore using a computed property

03:46.590 --> 03:49.460
on some text like this is a bit hard.

03:49.500 --> 03:55.920
Now let me quickly adjust this, to be able to use a computed property correctly and to have a more realistic

03:55.920 --> 04:02.940
use case, I'll create my data method here to then return my data object in the end

04:02.940 --> 04:14.610
and here I will have my first text which shall be some text here and I'll have my second text which

04:14.610 --> 04:21.880
is my name in this case as I used it and of course here, that shouldn't be an equal sign but a colon.

04:22.110 --> 04:26.160
So now I have this stored in properties I can use here

04:26.280 --> 04:32.730
so first text and second text and you could of course also use this in the above two examples where

04:32.730 --> 04:34.280
we use filters,

04:34.350 --> 04:38.400
actually let's do this so that we really have the same things

04:38.410 --> 04:43.100
there, so second text here and now I can set up my computed properties.

04:43.200 --> 04:49.130
So I'll set up the computed object here and I want to create my reverse computed property, 

04:49.130 --> 04:51.580
let's say, reverse, like this

04:52.020 --> 05:00.060
and in the reverse computed property,, I simply want to return this first text and then again split with

05:00.060 --> 05:08.280
an empty string to split by character, reverse and then join again with an empty string.

05:08.730 --> 05:10.940
So that's the same logic as in the filter

05:10.980 --> 05:15.450
and the same is of course true for the calculate length

05:18.010 --> 05:19.320
property here.

05:19.330 --> 05:29.730
Here, I want to return this second text plus and then whitespace, parentheses, closing parentheses and in

05:29.730 --> 05:30.350
between

05:30.360 --> 05:39.820
just like before, I want to have my second text length. And with that, I can now go up there and here of course

05:39.820 --> 05:45.860
I no longer use the filter since that here I want to output the reversed property, the computed property

05:46.090 --> 05:47.550
and here I want to

05:47.620 --> 05:55.480
well let's let's name it lengthAware, because it knows its name, so it's length,

05:55.480 --> 05:57.310
so let's use this here.

05:57.310 --> 05:59.860
Now let's head over and see if that works,

05:59.890 --> 06:06.550
looks perfect to me, we get the same results twice, in the first block here using a filter or filters

06:06.610 --> 06:09.670
and the second block using computed properties.

06:10.390 --> 06:18.730
Now since we outsourced the calculate length function here into a computed property, we can no longer

06:18.730 --> 06:24.400
share it as a filter which is too bad because now, if you would have another place in the app where

06:24.400 --> 06:29.980
we wanted to use that, of course we would have to have the same property name second text there but if

06:29.980 --> 06:34.690
that would be the case, well then we can't use like this.

06:34.690 --> 06:42.700
So in order to make it available in other components too, let me create a mixin here, I'll name it length

06:42.780 --> 06:50.370
aware mixin and that is a javascript file and here I will simply export a constant, lengthAwareMixin

06:51.040 --> 06:54.620
like this which is an object

06:54.730 --> 07:02.290
and all I want to have in this object here is my computed property object here.

07:02.290 --> 07:10.570
I don't need it reversed but I want to have lengthAware in here and then I can now go back to the app.vue

07:10.570 --> 07:11.250
file,

07:11.250 --> 07:21.070
remove lengthAware here, therefore add the mixins array to now also add this newly treated mixin, I

07:21.070 --> 07:23.440
have to import it first of course.

07:23.440 --> 07:29.230
So I will import it from this lengthAwareMixin javascript file,

07:29.370 --> 07:33.280
therefore here, it's the lengthAwareMixin which I now add here.

07:33.580 --> 07:39.290
And with that, if I save it and let's reload, check the console if we get any errors,

07:39.310 --> 07:40.670
looks great to me.

07:40.930 --> 07:48.730
So with that, we first used some filters then used some computed properties and finally outsourced one computed

07:48.730 --> 07:52.540
property into a mixin which we could now use in multiple components.

07:52.660 --> 07:58.630
One restriction of course, all components where we want to use that have to use this second text property

07:58.630 --> 08:01.200
to store the text we want to transform there.

08:01.510 --> 08:06.450
And with that, I'd say nice little practicing on filters and mixins,

08:06.460 --> 08:08.600
I hope you feel comfortable using them now.

08:08.620 --> 08:10.320
And with that, let's move on.
