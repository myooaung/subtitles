WEBVTT

00:01.740 --> 00:06.080
Well we achieved a lot, before sending you off to the next module,

00:06.120 --> 00:15.430
here's one more important thing you got to know about the for loop in vuejs. The for loop as we use

00:15.430 --> 00:15.850
it here

00:15.880 --> 00:18.420
works fine as you can clearly see,

00:19.090 --> 00:26.680
it's important to understand what happens behind the scenes though. If vuejs needs to update one of these

00:26.680 --> 00:31.020
values because somewhere in your code, you change one of the elements here,

00:31.120 --> 00:36.140
and let's show this by below the ingredients array adding a button here,

00:36.550 --> 00:42.900
I'll add a button which says add new where I will simply push a new item on the array.

00:42.910 --> 00:46.390
So I will say ingredients which is this array down there,

00:46.510 --> 00:54.680
push and then let's simply push some spices. If I now hit control enter,

00:54.970 --> 01:00.580
you see I can add spices to my array, just like that, works fine.

01:00.580 --> 01:02.710
Two important things are to be noted here,

01:02.830 --> 01:10.240
first vuejs conveniently proxies this push method here because generally, the push method does

01:10.240 --> 01:17.010
not create a new array, it simply adds items to the existing one and that is a bit hard to track since

01:17.080 --> 01:23.650
the object itself, the array doesn't change here because it's a reference type and the pointer to the

01:23.650 --> 01:27.240
type hasn't changed, only the value in memory

01:27.250 --> 01:33.340
but for that to realize, you have to watch this value in memory which vuejs does for us automatically,

01:33.550 --> 01:39.970
which is why we get this expected behavior here which if you really think about it is not necessarily

01:40.180 --> 01:41.530
expected but it works,

01:41.560 --> 01:42.310
that's fine,

01:42.310 --> 01:44.320
nothing to do from our side.

01:44.320 --> 01:51.130
The other important thing is how does vuejs update this list if some item needs to be changed or

01:51.130 --> 01:52.060
something like that?

01:52.090 --> 01:58.390
It updates the list by simply updating the position in the array where something changed,

01:58.390 --> 02:05.410
so if you were to override the second element through two-way binding for example, it would update the second

02:05.440 --> 02:07.470
element in this list.

02:07.510 --> 02:11.920
It does not keep track of the specific element it created,

02:12.070 --> 02:15.240
it will only patch it in the second position.

02:15.610 --> 02:22.660
Oftentimes, this is the behavior you want but if you want to be super safe and want to make sure that

02:22.660 --> 02:31.870
vuejs is not only aware of the position but of the actual list item on which the value you're working

02:31.870 --> 02:36.430
with sits, you need to assign a unique key to that list item,

02:36.430 --> 02:43.950
so here for example. You view this by using the v-bind syntax or shorthand, colon key

02:44.320 --> 02:46.780
and then you pass a unique key.

02:46.780 --> 02:54.880
Now you might pass the index, though that is kind of tricky as this index is derived from the list itself

02:54.940 --> 03:02.210
and set well dynamically while rendering the list. A better key would be a real unique value,

03:02.260 --> 03:07.390
so for example here you know that each ingredient will only be on this list once,

03:07.570 --> 03:10.360
you might very well use that ingredient here.

03:10.960 --> 03:18.380
With that if I re-render this, it works as before but behind the scenes, you are now safe and 

03:18.380 --> 03:24.940
vuejs not only stores the position of that element but the element itself which means should it ever

03:24.940 --> 03:28.170
need to reorder them or do something like that,

03:28.300 --> 03:34.930
it will take the actual element and reorder it and not just override the values in some of the positions

03:35.170 --> 03:37.820
it well finds in the array.

03:38.050 --> 03:41.430
This is just some background knowledge to be aware of,

03:41.440 --> 03:48.880
oftentimes you won't recognize the difference but if you run into any strange bugs with your for loop,

03:49.180 --> 03:55.870
that some items are updated in a different place than you expect them to be, well check if you are assigning

03:55.870 --> 03:56.670
a key,

03:56.740 --> 04:03.630
if not you might add one and this might resolve this issue. With that, we really had a detailed look at

04:03.670 --> 04:05.230
v-for and v-if.

04:05.350 --> 04:06.430
Let's continue.
