WEBVTT

00:01.670 --> 00:10.990
Time to unlock the next features of our app by adding vuex to it. In the terminal here, I'll open a new

00:11.010 --> 00:19.430
tab and then I need to install as a development, as a production dependency vuex, npm install save

00:19.550 --> 00:27.470
vuex, it will pull it down as we learned it, and this now gives me access to vuex, of course. With that set

00:27.470 --> 00:32.610
up, I'll add a new folder to my source folder, I'll name it store

00:32.930 --> 00:36.080
and in this folder, I'll create my store.js file,

00:36.110 --> 00:40.760
that's what each vuex set up basically starts with. There

00:40.820 --> 00:49.580
I need to import vue from vue and I also of course need to import vuex from vuex so that we get access

00:49.580 --> 00:51.250
to these two packages.

00:51.260 --> 00:58.880
Thereafter it's time to use vuex in our vue application and then we can start setting up our new store,

00:58.910 --> 01:00.880
we want to export this,

01:01.100 --> 01:08.690
so this new vuex store with a capital S here and this gets an argument where we configure the store.

01:08.720 --> 01:15.970
Now as you learned, what does a store have? It has a state, actions, getters, mutations and so on.

01:15.980 --> 01:23.150
Now regarding the state, I will create two modules in this vuex set up, one for the portfolio and one for

01:23.150 --> 01:24.470
my stocks,

01:24.470 --> 01:27.130
each of these modules will have its own state,

01:27.200 --> 01:33.440
I actually don't have anything in my global state here because I want to map the stocks which are available

01:33.500 --> 01:39.160
to the stocks module I'm going to create and the funds for example will belong to my portfolio,

01:39.350 --> 01:40.940
so this is what I'll work with,

01:40.940 --> 01:43.850
of course you may choose a different setup but for that, I'll

01:43.910 --> 01:52.520
create a new folder named modules. Now in modules, I'll have a stocks.js file, I'll later also add a portfolio.js

01:52.520 --> 01:55.790
file but let's start with the stocks.

01:55.790 --> 02:01.970
So in there, I want to create my new state which is an object where I basically have an array of stocks,

02:02.060 --> 02:04.550
just like this.

02:04.670 --> 02:07.810
Now how do we want to manage this state,

02:07.880 --> 02:08.860
what do we need?

02:08.960 --> 02:14.980
Let's start with the mutations to understand how we possibly could change our stocks.

02:15.110 --> 02:21.770
The first mutation which comes to my mind is that we want to set our stocks because let's think about

02:21.770 --> 02:22.090
it,

02:22.400 --> 02:24.180
our stocks here,

02:24.290 --> 02:26.270
how do they ever change?

02:26.330 --> 02:33.940
Well they need to be set either because we loaded them from our server or because we loaded the app and they

02:34.040 --> 02:35.240
need to be randomized

02:35.270 --> 02:41.650
when we click and there and want to recalculate prices. So there are cute mutations which come to my mind

02:41.990 --> 02:48.020
and now regarding the naming of these mutations, I'll give them a name which deviates from the one I

02:48.020 --> 02:49.930
chose in the last module,

02:50.030 --> 02:56.330
I'll take kind of this middle way between using the namespaces and the constants which is this very complicated

02:56.330 --> 02:59.800
set up and giving them normal names,

02:59.930 --> 03:07.490
I'll use a string as a name where I say set stocks mainly also because of this, if you use the

03:07.550 --> 03:14.060
developer tools allows you to easier identify your mutations.

03:14.090 --> 03:21.020
So this set stocks here is a method of course where we get the state and we know we'll all get the

03:21.020 --> 03:26.160
stocks because we want to make sure that we pass the stocks as a payload to this mutation.

03:26.210 --> 03:31.700
Therefore here, we can say state stocks equals stocks because we know we get new stocks passed as an

03:31.700 --> 03:37.010
argument and we want to edit our existing state by overwriting the stocks there.

03:37.010 --> 03:41.000
Now we also have a random stocks mutation

03:41.000 --> 03:43.540
let's say where we get the existing state,

03:43.550 --> 03:48.990
no payload but there, we want to randomize our stock data when we end the day,

03:49.010 --> 03:51.720
I'll work on this later, for now

03:51.740 --> 03:54.680
let's start by setting up some actions here.

03:54.680 --> 03:58.300
Now regarding the actions, which actions do we need?

03:58.550 --> 04:03.780
Well I want to be able to buy a stock and here I'll use a normal function,

04:03.860 --> 04:07.960
you may of course again name these things as you want to name them,

04:07.970 --> 04:12.340
I'm going to use a normal name here and buy stock is

04:12.600 --> 04:19.520
now of course also a method where we get this context object where we only need the commit function so

04:19.520 --> 04:25.170
I'm going to use destructuring to pull out this commit function of this context object

04:25.490 --> 04:27.080
and then the order.

04:27.320 --> 04:34.880
So this is this set up here and that of course needs a colon in between, like this,

04:35.210 --> 04:42.590
so now this allows me to buy a stock and in buy stock, I now want to commit a certain mutation but

04:42.590 --> 04:44.900
none of the mutations we have in this file,

04:44.900 --> 04:49.040
instead one of the portfolio file which I'll set up in one of the next videos,

04:49.100 --> 04:50.740
so I'll leave this empty for now, we'll

04:50.930 --> 04:52.740
continue working on this.

04:52.910 --> 05:01.550
We'll also have set stocks here which only takes the commit pulled out of this context object and there,

05:01.640 --> 05:10.270
I then want to run commit on set stocks and then we also need to pass some data here.

05:10.460 --> 05:13.540
Now which data is that and where do we get it from?

05:13.820 --> 05:18.750
Well right now, we have our stocks in this stocks.vue file here,

05:19.100 --> 05:21.650
well that's not really the ideal place,

05:21.650 --> 05:25.530
now you could get them from a server in the internet,

05:25.610 --> 05:31.430
I'm going to set up some dummy data source here in my project. So I'll create a new folder named data

05:32.060 --> 05:38.750
and in there, I'll create a new file named stocks.js where I simply want to export a default object

05:38.810 --> 05:44.510
or a default array I should say and this array of course is or holds these items

05:44.510 --> 05:48.300
I set up here, so I'm going to copy them in there.

05:48.410 --> 05:49.730
So these are my stocks,

05:49.730 --> 05:54.900
now it is stocks.js file and that could of course be an external data source,

05:54.920 --> 06:00.790
it just happens to be not an external source in this project here.

06:00.920 --> 06:07.610
And then with that set up, I can add import in my stocks.js module here, import

06:09.810 --> 06:11.370
stocks from

06:11.370 --> 06:19.230
and now we have to go up a level and then to the and then one level more and then to the data folder

06:19.350 --> 06:25.050
and then here, the stocks file. And these are the stocks from this data stocks file

06:25.050 --> 06:30.360
I want to pass here because these are the stocks with which I want to initialize my application or

06:30.360 --> 06:31.830
initialize my stocks,

06:31.830 --> 06:37.140
therefore we could also name this init stocks, maybe it makes much more sense because we only

06:37.140 --> 06:44.400
call it once we initialize our stocks. We'll also need an action to randomize our stocks so I can already set

06:44.400 --> 06:46.850
this up, randomise stocks

06:47.040 --> 06:56.320
and here again, I will only need my commit function here and then with that commit function,

06:56.630 --> 07:04.280
outside of the parentheses though, with that function here I want to commit random stocks with no data

07:04.310 --> 07:05.810
because it doesn't need data

07:05.810 --> 07:11.130
and again, I'll come back to writing the logic for randomizing the stocks in one of the next videos.

07:11.510 --> 07:15.730
Well finally it's time to set up some getters because we also want to see our data right,

07:15.800 --> 07:18.800
so the getters we need, you may choose any names you want,

07:18.800 --> 07:19.790
I'm going to name it

07:19.790 --> 07:24.170
stocks here and the state is the argument

07:24.170 --> 07:30.620
we do get in such a getter as you learned it and with the state, I can simply return state stocks, of course

07:30.620 --> 07:34.390
referring to this stocks array I set up up here in my state.

07:34.730 --> 07:42.770
Well and with that, it's time to export it all in one object so export it in a javascript object and

07:42.770 --> 07:44.410
in this object, we do have our state,

07:44.420 --> 07:46.580
we do have our mutations,

07:46.580 --> 07:55.400
we do have our actions and our getters of course, not like this, getters and with that set up, I can again

07:55.400 --> 07:57.960
now back to my main store file

07:58.020 --> 08:00.670
and here, I want to import this module.

08:00.670 --> 08:08.740
So let me add an import stocks from and now from the modules folder and then the stocks.js file

08:09.040 --> 08:16.190
and then in this store we set up here, I simply add modules and add my stocks modules, it's the only module

08:16.190 --> 08:19.920
right now but it has everything to get this store started

08:19.940 --> 08:25.970
and with that, the final step of course is to add this store to our main.js file.

08:26.000 --> 08:27.630
So here we want to import it,

08:27.650 --> 08:37.250
we want to import store from this store folder and then the store.js file and after importing it,

08:37.250 --> 08:40.050
we can simply add it with the shortcut to our vue

08:40.070 --> 08:41.480
instance here.

08:41.810 --> 08:48.420
Now with this in place, we see our app is broken because we never call init stocks,

08:48.440 --> 08:50.810
we never initialize our app,

08:50.810 --> 08:54.700
so let's make sure we do that and a good place is in the app.vue file

08:54.710 --> 09:04.310
and here in its created method because that is when our root instance here is finished initialising.

09:04.430 --> 09:08.240
So here I want to call this.$store,

09:08.240 --> 09:13.310
I do have access to the store since I've set it up in the main.js file here,

09:13.550 --> 09:15.560
$store dispatch

09:15.740 --> 09:20.060
and then let's see we named our action here in this module

09:20.210 --> 09:22.850
init stocks, this name here.

09:22.850 --> 09:25.710
So this is what I'll dispatch as a string

09:26.000 --> 09:30.230
and after doing so, we can now go to the stocks.vue file and here of course,

09:30.230 --> 09:33.480
we now need a stocks array to loop through

09:33.770 --> 09:35.700
and we can use our getter for that,

09:35.720 --> 09:45.220
so we can add the computed method here to now get our getter here and I could set up map getters

09:45.380 --> 09:48.520
but since I only have one getter I'm interested in,

09:48.620 --> 09:59.080
I can also simply name it stocks and here, I will return this store getters stocks, like this. And with that

09:59.090 --> 10:02.060
in place, if I save this and go back,

10:02.060 --> 10:09.410
we see our stocks again but now managed through our central vuex store which isn't finished but we achieved

10:09.410 --> 10:10.750
quite a lot there

10:11.000 --> 10:17.090
and in the next video, it's all about setting up the portfolio state, managing the portfolio and making

10:17.090 --> 10:18.400
these buy buttons work.
