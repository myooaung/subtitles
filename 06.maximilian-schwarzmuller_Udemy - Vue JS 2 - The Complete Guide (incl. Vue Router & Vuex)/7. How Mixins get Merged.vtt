WEBVTT

00:01.610 --> 00:06.280
In the last lecture, we saw how we can create a mixin, outsource it in a new file and then use it in

00:06.280 --> 00:07.460
two different places,

00:07.480 --> 00:12.610
that of course is a huge thing because it allows us to create reusable code snippets or data pieces

00:12.640 --> 00:16.740
or whatever which we then can use across our application,

00:16.780 --> 00:20.700
we see it here with the lists which I can now filter and so on.

00:20.710 --> 00:27.550
Now the interesting thing is we also see in the app.vue file that was our mixin, the fruit mixin

00:27.550 --> 00:32.790
has the data property itself that adds something to our data property,

00:32.890 --> 00:39.130
we still seem to have that text which is exclusively in the app.vue file work correctly as we can tell

00:39.130 --> 00:39.860
here.

00:40.150 --> 00:48.310
So vuejs cleverly merge our mixin into our existing vue instance, the merging process generally

00:48.640 --> 00:52.580
is such that it doesn't destroy the data in our vue instance,

00:52.600 --> 00:58.990
so the vue instance, the vue component is the part who's always right but it tries to add new things added

00:59.080 --> 01:05.230
by the mixin to the existing instance, that is an important takeaway that it doesn't destroy anything there.

01:05.440 --> 01:12.700
Now it also has for some things like lifecycle hooks, the behavior that we are able to provide a lifecycle

01:12.700 --> 01:18.580
hook in a mixin and in our component or instance and both will get executed even if it's the same name

01:18.880 --> 01:23.470
then the order is mixin first, thereafter the component,

01:23.650 --> 01:25.270
let me show you what I mean.

01:25.570 --> 01:30.780
I will add a new method here to my mixin here

01:31.470 --> 01:36.120
and it's the created method, so this created lifecycle hook. I want to print

01:36.150 --> 01:45.030
created here and that means that now already, if I open the console and I reload, we see created twice

01:45.090 --> 01:48.600
because we use the mixin twice, it adds the created method here,

01:48.630 --> 01:54.090
therefore both the app.vue file and the component and the list.vue file both execute this created

01:54.090 --> 01:56.680
lifecycle look because the mixin adds it.

01:56.940 --> 02:00.920
Now let's say our root root component here also

02:00.960 --> 02:01.730
or this list component,

02:01.860 --> 02:04.420
excuse me, also has its own lifecycle hook.

02:04.620 --> 02:11.820
So here, the same name created, we print inside list created hook.

02:11.850 --> 02:19.700
Now with that if I save this, if I reload the app, we see created created then inside list created hook,

02:19.920 --> 02:24.620
this was the order I was talking about, mixin first then the component,

02:24.660 --> 02:26.990
so the component always has to last word,

02:27.040 --> 02:29.730
it's able to override changes introduced by the mixin

02:29.750 --> 02:35.430
because that generally as we said before follows the behavior that the mixin is not able to destroy

02:35.460 --> 02:38.880
anything, the component always acts last.

02:38.880 --> 02:45.000
This is how we can add mixins to components, how we can add functionality, how it cleverly gets merged

02:45.240 --> 02:48.560
and how our component always still has the control.

02:48.570 --> 02:55.530
Let me next dive into global mixins, what they are and when and how you might use those.
