WEBVTT

00:01.730 --> 00:07.550
So far we had a look at the general setup but we got one major new thing here, this .vue file

00:07.550 --> 00:14.960
which seems to be important. In one of the earlier videos, I was talking about so called single file templates

00:14.960 --> 00:22.640
which basically means we have a special kind of file which gets compiled during the build process so

00:22.640 --> 00:31.530
that we can ship compiled code to the browser, so that we don't have to use the el ref or the el property

00:31.820 --> 00:38.120
to have our html code converted to a template, so that we don't have to use the template property

00:38.120 --> 00:39.850
to create a string template

00:40.070 --> 00:46.370
but that we have a third option, which you will learn about now, which allows us to outsource our template

00:46.370 --> 00:52.400
in our vuejs code in separate files which will get compiled to normal javascript, therefore are able

00:52.400 --> 00:53.950
to run natively in the browser.

00:53.960 --> 00:58.610
You can compile any template, any html code to javascript in the end because there are

00:58.850 --> 01:05.120
javascript object representations of your html elements. And that is how we want to build our applications,

01:05.340 --> 01:11.740
to first don't have to ship the compiler when deploying our app, that reduces the file size of the vuejs

01:11.750 --> 01:14.630
package by 30% as we learned earlier

01:14.900 --> 01:21.590
and second, to unlock some features which are not possible to be used in the native dom, if we were to

01:21.590 --> 01:27.410
use the native dom as our template because there, some limitations apply which don't apply when having

01:27.410 --> 01:30.270
our javascript compiled template.

01:30.350 --> 01:32.560
So enough of the talking, what do we have here?

01:33.110 --> 01:33.930
We have the main.js

01:33.960 --> 01:40.370
file and that will be the first file which gets executed when the bundle here gets loaded in the

01:40.370 --> 01:41.840
index.html file.

01:41.870 --> 01:50.720
Now all what's happening here is that we create a new vue instance here and we import vue from the vue folder,

01:50.980 --> 01:55.560
so that is how we have access to vuejs and can create our new instance here.

01:55.750 --> 02:04.240
Then we select the el, the element with the app here, with the app selector, so this element and I was just saying

02:04.240 --> 02:06.580
that we don't need the el property anymore,

02:06.580 --> 02:12.700
well we needed to select a place where we want to load our vue app but we don't use it to then infer

02:12.700 --> 02:13.600
a template,

02:13.770 --> 02:19.780
instead by using this new property here, this new function to be precise, the surrender function, we haven't

02:19.780 --> 02:21.190
seen that before,

02:21.260 --> 02:27.760
we're telling vuejs well take this place in the dom specified with the el property but don't infer

02:27.760 --> 02:35.440
the template, instead as with template where we also would provide another template to override

02:35.530 --> 02:40.570
this place in the dom, instead here override it with this code we render here.

02:40.660 --> 02:46.690
Now that is an ES6 function, an arrow function where h is the argument which actually seems to be a function

02:46.690 --> 02:47.980
we then execute,

02:47.980 --> 02:49.410
this is provided by vuejs

02:49.410 --> 02:49.920
.

02:49.930 --> 02:55.210
so vuejs executes the surrender function and automatically passes us another function in there,

02:55.210 --> 03:02.170
the one we capture here with h which we then execute and this function takes a template, a vuejs

03:02.170 --> 03:04.180
template to be rendered.

03:04.270 --> 03:10.870
So all we need to know here is that this function will automatically render a certain template in the

03:10.870 --> 03:19.890
place of this selector, so where we select our vue instance to be run at, like template

03:20.120 --> 03:25.710
but here we're not specifying a template as a string but as a compiled template, so to say.

03:25.970 --> 03:32.330
Now what we load here when running this h function which seems to be responsible for rendering it

03:32.870 --> 03:37.060
is our app from the app.vue file.

03:37.070 --> 03:40.120
Now what's inside this app.vue file?

03:40.130 --> 03:45.590
Here is our actual vue application and vue files, .vue files

03:45.590 --> 03:47.420
always follow this structure.

03:47.420 --> 03:55.460
We get a template at the top enclosed by template tags, then we got a script holding our vuejs

03:55.460 --> 03:57.480
code for this template,

03:57.500 --> 03:59.940
so like a new vue instance kind of

04:00.110 --> 04:05.250
and indeed we do have a data field here too, though it looks a bit different I'll come back to this and

04:05.250 --> 04:07.820
then we get some possible styling we want to use.

04:07.910 --> 04:10.210
Now you don't have to specify styles,

04:10.220 --> 04:15.860
you definitely do have to specify a template though because we need something to be displayed and actually,

04:15.860 --> 04:17.480
we can replace all of that

04:17.500 --> 04:26.360
here inside this app and instead say h1 hello world, like this.

04:26.360 --> 04:30.850
Now regarding this name here, you can simply get rid of that,

04:30.850 --> 04:33.280
it's not related to this div ID

04:33.280 --> 04:34.790
up here, you can also get rid of that,

04:34.790 --> 04:36.220
it will work like this.

04:37.060 --> 04:43.100
And what's now happening here is that we now have our template which only says hello world

04:43.280 --> 04:49.150
with some data which we can remove for now, I will come back to the data thing here when talking about

04:49.150 --> 04:50.950
components in the next section

04:51.130 --> 04:57.620
and even though we now only export an empty object, what we do behind the scenes is this will compile it

04:57.660 --> 05:03.310
to javascript code where we have a connection between template and our vue instance even though we don't

05:03.310 --> 05:07.650
specify any options there and then we can import it here and render it

05:07.780 --> 05:12.390
and if we don't have any options here in the object, we still have a template to get rendered, right?

05:12.400 --> 05:16.440
So now I'm also removing here my styles and with this in place,

05:16.480 --> 05:18.070
all I need to do is save it

05:18.160 --> 05:23.980
and then if we run npm run dev again or if you still had it running, it will automatically recompile

05:23.980 --> 05:26.300
actually so you don't need to rerun it,

05:26.590 --> 05:30.630
then if we head over to our local host, we see hello world.

05:30.670 --> 05:32.270
So this still works,

05:32.290 --> 05:40.030
now I'm going to dive deeper into these vue files and how we can use them as actually components

05:40.030 --> 05:44.520
in our application in the next module when we dive into components,

05:44.530 --> 05:50.980
for now I want to know you a vue file has a template, has a script and it might have a style.

05:50.980 --> 05:55.120
Now with these three parts here, template, script and style,

05:55.180 --> 06:02.080
we got a valid vue file, a so-called single file template where we outsource template and script logic

06:02.110 --> 06:03.660
in a separate file

06:03.670 --> 06:10.150
and the important thing is in our build process with webpack, this will get compiled to javascript

06:10.150 --> 06:16.330
code which is why we can then render it here, render basically just means override the content selected

06:16.330 --> 06:17.690
here with the element,

06:17.860 --> 06:19.470
so it will render it here,

06:19.480 --> 06:23.290
it would replace everything which is inside of this app here

06:23.620 --> 06:30.760
and with that, we are able to now use this and have our compiled template stripping out the compiler of

06:30.760 --> 06:33.850
the package we're shipping to the deployment server.

06:33.850 --> 06:35.310
That was a lot of talking about that

06:35.320 --> 06:38.840
but it's key to understand how these single file here work,

06:38.890 --> 06:43.860
we will see them in action in the next module when we dive deeper into components.
