WEBVTT

00:01.760 --> 00:06.550
So we face the problem that all our mutations here have to run synchronously,

00:06.560 --> 00:15.970
now let's say whenever I click the buttons here on my counter components, I want to wait for let's say

00:16.060 --> 00:19.300
a second before I actually update the counter.

00:19.300 --> 00:25.600
Now I couldn't do that with just mutations but I can add actions, actions of course is another reserved

00:25.630 --> 00:27.310
property here in our store

00:27.310 --> 00:34.150
and actually one of the last ones and here we now set up again functions or methods which are our

00:34.150 --> 00:40.510
actions, for example increment like the mutation but there is no conflict because it's a different object

00:40.960 --> 00:44.080
and increment takes the context as an argument,

00:44.080 --> 00:47.640
context will be passed by vuex automatically

00:47.890 --> 00:55.870
and context basically just gives us access to the commit method where we then can commit for example

00:56.200 --> 00:56.920
increment.

00:56.920 --> 01:02.410
Now that wouldn't make much sense here because we're not doing any async task or anything like that,

01:02.560 --> 01:08.950
so we're really just having an extra step where we commit our mutation instead of doing it directly

01:09.130 --> 01:11.160
inside of the component.

01:11.170 --> 01:18.310
Now this context object we're actually passing to our action here has the commit method because it has

01:18.310 --> 01:21.180
a lot of method and properties of our store,

01:21.340 --> 01:29.310
it's not exactly the same as our store, we'll see that when we come to modules in one of the later videos,

01:29.500 --> 01:34.360
so it's not exactly the same but it does have the commit method to commit a change,

01:34.390 --> 01:37.380
it does give us access to our getters and so on

01:37.390 --> 01:44.320
so we do have access to our store in general, just not to all features but to all we tactically need

01:44.320 --> 01:44.950
here.

01:45.100 --> 01:51.450
So we can commit therefore, also you could use another syntax and if you only want to use the commit method

01:51.520 --> 02:00.160
in this context object, you can use the ES6 feature of destructuring by passing this as an argument

02:00.280 --> 02:01.100
and this will now

02:01.120 --> 02:07.480
destructure, should be in parentheses though, and this will now destructure the object we get

02:07.510 --> 02:14.050
automatically and will only pull out the commit method in there, all others are lost but since we don't

02:14.050 --> 02:15.440
need them, that's fine.

02:15.460 --> 02:19.980
So that's just a quicker way of only getting one property of an object you get as an argument

02:20.050 --> 02:22.220
if you only need that one property,

02:22.420 --> 02:25.280
so here we can then call it increment.

02:25.540 --> 02:31.780
Now whilst we do not really save anything by having an action which does this synchronously, it still

02:31.810 --> 02:39.490
is a good practice to have actions to commit your mutations and rarely mutate or commit them directly

02:39.490 --> 02:42.270
from within your components, though that is possible

02:42.280 --> 02:48.010
and if you never have any asynchronous tasks, you might directly want to use your mutations, as we do

02:48.010 --> 02:51.600
right now in our counter components here.

02:52.030 --> 02:58.270
But if you have at least a couple of or at least one async task, you might want to consider creating only

02:58.270 --> 03:04.860
actions for all the mutations even if they are not using any async code anywhere, just to have this

03:04.870 --> 03:10.450
clear pattern that you always dispatch actions and not sometimes directly commit a mutation in a component

03:10.630 --> 03:12.500
and sometimes dispatch an action

03:12.580 --> 03:15.340
but that's just some additional thought.

03:15.430 --> 03:20.390
Now before diving too deep into any best practices, let's understand what we're doing here.

03:20.530 --> 03:22.130
So I'll add a decrement

03:23.490 --> 03:31.960
mutation or action, excuse me, and then I want to add async increment action and async increment of

03:31.960 --> 03:32.470
course

03:32.500 --> 03:34.990
shall also get the commit method

03:34.990 --> 03:37.190
So it's exactly the same as before

03:37.360 --> 03:44.580
but now here, I want to set a timeout and wait for one second and then in the callback of this timeout,

03:44.590 --> 03:50.260
so in this function in here, there I want to call commit increment.

03:50.290 --> 03:56.470
So it does the same as the normal increment action but now it does this asynchronously, after one second

03:56.770 --> 04:00.970
which is the again great advantage of using actions,

04:00.970 --> 04:03.080
they may run asynchronous code.

04:03.460 --> 04:05.930
So here I'll do the same for decrement

04:06.100 --> 04:13.210
and now in another counter, I want to use these new actions instead of the other ones and generally, 

04:13.300 --> 04:19.210
I will have to replace map mutations with some way of getting access to my actions because as I just

04:19.210 --> 04:23.550
said before, I no longer want to use mutations directly in the components,

04:23.590 --> 04:26.430
instead I always want to use actions, though

04:26.470 --> 04:32.470
again just to highlight it, you only need to do it for asynchronous tasks, for other tasks you may still

04:32.470 --> 04:36.500
use mutations and directly commit them from in here.

04:36.700 --> 04:38.640
So what can we do here?

04:38.650 --> 04:42.740
We right now map mutations but now we want to get our actions,

04:43.060 --> 04:50.990
well turns out vuex also has map actions in its bag of useful tools and map actions

04:50.990 --> 04:55.210
works like that, so really just like map mutations

04:55.330 --> 04:57.550
but of course now with the actions.
