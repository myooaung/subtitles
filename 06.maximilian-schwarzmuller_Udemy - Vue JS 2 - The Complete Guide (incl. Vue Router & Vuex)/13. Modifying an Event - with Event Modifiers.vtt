WEBVTT

00:01.750 --> 00:08.140
When working with events, there are a couple of things you oftentimes encounter in real applications

00:08.430 --> 00:13.480
which you need to solve and as you learned, vuejs makes solving these things easier.

00:13.540 --> 00:19.390
But what do you what are these things? Let's enhance our application here by taking this paragraph where

00:19.390 --> 00:24.560
we output the coordinates and I want to create kind of a dead spot,

00:24.730 --> 00:27.040
so here I'll enter a span

00:27.340 --> 00:33.520
and once I hover over this, I don't want to update the coordinates.

00:33.520 --> 00:39.580
Now of course right now, if I save this it is still updated because this span is part of this paragraph

00:39.840 --> 00:48.790
on which I'm listening to any mouse moves. I can now set up my own event here and I will call it mouse

00:48.850 --> 00:50.540
move as well

00:50.770 --> 00:55.010
and here I simply want to execute nothing,

00:55.270 --> 01:02.320
well one solution would be to still execute a function here, so I'll name it dummy and add it down here

01:02.350 --> 01:04.330
in the methods object.

01:06.980 --> 01:09.720
Dummy of course would be a function

01:10.190 --> 01:11.640
and in this function,

01:11.690 --> 01:17.330
all I want to do is I want to fetch the event which gets passed automatically and here I could call stop

01:18.650 --> 01:28.740
propagation to make sure that it does not propagate up to elements holding this element, this span here.

01:29.150 --> 01:36.410
If I now hit control, you'll see that once I hover over to that spot, the coordinates no longer get well

01:36.500 --> 01:42.460
updated because now we're stopping the propagation which means only handle the element here

01:42.500 --> 01:48.850
in this handler, don't let it propagate up to any elements which might hold this element.

01:49.220 --> 01:53.800
Yeah we could do it like this but we can even get a bit easier than that,

01:53.990 --> 02:03.170
I can remove this dummy here and I can simply execute nothing here but use a so-called modifier, an event

02:03.230 --> 02:04.080
modifier,

02:04.100 --> 02:07.360
it allows me to modify the behavior of this event,

02:07.370 --> 02:09.710
that's where the name comes from, clever huh.

02:10.040 --> 02:16.520
Here I add such a modifier by adding a dot after the name of the event which I pass as an argument to

02:16.520 --> 02:19.310
be on and the modifier I want to use

02:19.310 --> 02:23.200
here is stop for stop propagation.

02:23.270 --> 02:29.960
If I now hit control enter, we see the same behavior as before even though I don't even execute a function

02:29.960 --> 02:33.150
here because vuejs now does this for me,

02:33.200 --> 02:40.190
it kind of has this internediate function which is between my function, no function in this case and

02:40.250 --> 02:46.190
this time when the event is emitted or when we get the event. It then runs this little function which simply

02:46.190 --> 02:50.120
does one thing, it stops the propagation of the event.

02:50.390 --> 02:52.280
We also get other modifiers,

02:52.280 --> 02:59.450
the probably most important second one being prevent for running prevent default, so running stop propagation

02:59.450 --> 03:02.380
with the stop modifier and prevent default,

03:02.480 --> 03:07.290
the two common methods you have when working with the default event object,

03:07.430 --> 03:11.800
these are available with these modifiers like .stop here.

03:11.810 --> 03:17.780
You can also chain them just as a side note by adding .prevent here as well which won't do anything

03:17.780 --> 03:21.420
here but you could add them or chain them, just like that.
