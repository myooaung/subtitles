WEBVTT

00:01.890 --> 00:07.570
Now when loading stocks, I will of course trigger it here in the header but I don't want to execute all

00:07.580 --> 00:14.140
the logic here because when loading stocks, we actually do change our state because we basically set

00:14.230 --> 00:18.210
our old state to the new state we just fetched from the database.

00:18.550 --> 00:24.160
So first of all, I'll add a click listener here to load data and I'll name it load data,

00:24.340 --> 00:31.690
of course I also need to have a method here, load data maybe and in load data,

00:31.690 --> 00:37.220
I now want to execute a load data action in my store.

00:37.360 --> 00:41.100
Now that action doesn't exist yet,

00:41.140 --> 00:45.220
neither in stocks here nor in portfolio,

00:45.310 --> 00:53.560
so let's add one. The thing why it doesn't exist yet is or the reason is that this really influences

00:53.560 --> 00:55.590
both, portfolio and stocks,

00:55.600 --> 00:58.660
we changed the state in both pieces.

00:58.660 --> 01:03.220
Therefore I will create a new file in the store itself, actions.js

01:03.220 --> 01:08.820
here where I want to trigger the respective commits I need,

01:09.010 --> 01:12.460
I need an action because it will run asynchronously.

01:12.460 --> 01:19.120
So in here, I will export a constant and name it load data

01:19.120 --> 01:25.640
for example, this will be the name of the action and this shall be a function where of course I do get

01:25.640 --> 01:27.200
my commit function,

01:27.200 --> 01:32.370
I'm not getting any payload because I'm not passing one, instead here I want to reach out to the server

01:33.290 --> 01:37.250
so I will use vue. Now to be able to use vue, I of course

01:37.250 --> 01:39.260
also need to import it

01:39.570 --> 01:42.230
otherwise we don't have access to it in this file,

01:42.260 --> 01:43.430
vue http,

01:43.430 --> 01:44.680
now without a dollar sign

01:44.690 --> 01:48.600
because we're accessing it directly on the vue object itself

01:49.670 --> 01:55.980
get and of course we also need to reach out to data.json.

01:56.060 --> 01:58.340
Now once we get it, I want to execute

01:58.400 --> 02:00.350
then because we do have a promise here,

02:00.350 --> 02:07.190
keep this in mind and there, I simply want to extract the data and transform it into a javascript object

02:07.550 --> 02:10.210
which also gives us back a promise, so we need to call

02:10.220 --> 02:15.780
then again, this is what we learned in the vue resource module in this course.

02:15.800 --> 02:19.560
And then I got my extracted data here

02:19.790 --> 02:22.930
or let's just name it data, that short I guess.

02:23.450 --> 02:30.250
And with that data, I first want to check if we actually do have any data, so if data

02:30.260 --> 02:34.780
otherwise there's nothing we can do with it because if we click load and there is no data on the server,

02:34.880 --> 02:38.870
well then I don't want to try to set my state to it.

02:38.870 --> 02:46.640
So in this case, I will get my stocks from data and then the stocks field because this, if you have a

02:46.640 --> 02:48.650
look at it, is how it's set up in data,

02:48.650 --> 02:49.820
we get these stocks

02:49.820 --> 02:56.600
node, we also got stock portfolio and funds so that will be what I also extract, funds from data.funds

02:57.110 --> 03:07.600
and also my stock portfolio from data stock portfolio, like this. With that I extracted all the data from

03:07.600 --> 03:12.400
the body I got back with the request or with the response,

03:12.730 --> 03:20.130
I will create a new portfolio with this, a new object where I simply store stock portfolio and funds

03:20.290 --> 03:28.480
and this of course is the state I set up in the portfolio.js file with funds and my stocks. So the

03:28.480 --> 03:38.510
last step and then is to commit to mutations, the first mutation is set stocks, I do have that here

03:38.600 --> 03:45.550
where I simply well, exchange my stocks and I will need the same for portfolio, so here

03:45.560 --> 03:50.750
I also want to add set portfolio to be able to override that

03:50.750 --> 03:54.420
whenever we do actually hit that load button.

03:54.740 --> 04:01.580
So set portfolio also takes the state and this new portfolio I'll pass with the commit function and

04:01.580 --> 04:06.380
then I want to set state funds equal to portfolio funds and

04:06.380 --> 04:17.690
I want to set state stocks, this array of stocks in my portfolio to portfolio, stock portfolio or for

04:17.730 --> 04:19.670
us to want to check if that exists,

04:19.760 --> 04:28.040
if this is empty in this case, I want to set it to an empty array, otherwise I'm checking if it exists,

04:28.040 --> 04:29.450
if yes, I will set it to it

04:29.450 --> 04:30.720
otherwise to an empty array,

04:30.740 --> 04:32.120
that is how I should say it.

04:32.450 --> 04:34.340
So I get set portfolio now too,

04:34.360 --> 04:39.850
with that I can not only commit set stocks and pass along my stocks

04:39.980 --> 04:52.550
but I can also execute set or commit set portfolio and pass along my portfolio, like this.

04:52.550 --> 04:55.020
So this is my load data action,

04:55.190 --> 04:58.380
now of course in the header, we're not using that

04:58.430 --> 05:01.350
so let's wire this all up and test it in the next video.
