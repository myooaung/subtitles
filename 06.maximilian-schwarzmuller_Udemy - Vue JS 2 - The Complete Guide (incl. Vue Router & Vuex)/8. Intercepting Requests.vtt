WEBVTT

00:02.250 --> 00:08.530
Now in the last video, we already saw a way how we can store some data on our general http object, how

00:08.550 --> 00:14.980
we could for example configure the root route or the route URL of all our requests.

00:14.980 --> 00:15.930
That's nice,

00:15.930 --> 00:21.330
sometimes you want to do a bit more than that though, sometimes you really want to step in on a request

00:21.420 --> 00:25.370
and or on a response and intercept it.

00:25.380 --> 00:31.530
Now vue resource allows you to set up such interceptors which are executed upon each request or each

00:31.540 --> 00:33.660
response very easily.

00:33.990 --> 00:40.200
The place to create such an interceptor is here where we configure our vue instance or where

00:40.200 --> 00:47.880
we start our root vue instance and where we added the vue resource package, there on the http object again, I can

00:47.880 --> 00:54.490
access interceptors which is an array of functions we want to execute on each request

00:54.500 --> 01:01.350
basically. Here we can push a new interceptor on this array, all interceptors in this array will be executed

01:01.800 --> 01:04.800
and there, the function has the following structure,

01:04.830 --> 01:11.370
it gets the request and it gets a second argument which I will call next because this is a function

01:11.380 --> 01:17.190
we then can execute to allow the request to continue on because most of the time, you don't want to let

01:17.220 --> 01:18.370
your request

01:18.390 --> 01:19.960
end in this function,

01:20.220 --> 01:24.780
but in order to allow it to travel on, you need some callback function to execute

01:24.780 --> 01:30.330
once you're done doing things with the request. Now in this function, you may do whatever you like,

01:30.330 --> 01:36.260
for example you can print the request right into our log or of course also modify it.

01:36.270 --> 01:42.660
You could change the request, you could change the request method to put for example here and let's see

01:42.690 --> 01:43.870
what this will do,

01:44.130 --> 01:46.280
let's enhance this a bit, let's see

01:46.350 --> 01:53.020
we want to check the request method whether it's post and if it is post, we want to change it to put.

01:53.070 --> 01:58.800
So get requests will still be able to make it through but post requests will be converted into a put

01:58.800 --> 02:04.740
request and we will also see what this will do on our backend on firebase and thereafter again, we have

02:04.740 --> 02:06.360
to execute next.

02:06.720 --> 02:09.780
Well okay, let's see how this will work out, if

02:09.820 --> 02:18.960
I now go to the application and reload this and I create a new user here and I will open up my console

02:18.960 --> 02:20.730
and, whoops, like this,

02:20.730 --> 02:22.840
clear it and hit submit,

02:22.860 --> 02:29.490
we see the request was printed here, the request here is of type put because it's an object,

02:29.490 --> 02:34.560
so even though we print it before changing it, it is changed here because objects are reference types

02:34.750 --> 02:38.500
and if we have a look at the firebase console, we see that our data node

02:38.520 --> 02:42.110
now changed. It no longer has these cryptic IDs,

02:42.120 --> 02:45.230
instead we immediately see the email and username here

02:45.630 --> 02:52.010
and if I submit a new user, we now see this got overridden.

02:52.220 --> 02:58.370
So this is the difference between put and post on firebase, post creates new resources and appends it to the

02:58.370 --> 02:59.170
existing ones

02:59.180 --> 03:02.670
hence the need for a unique identifier, this cryptic string.

03:02.840 --> 03:03.440
Well put

03:03.440 --> 03:05.290
always overrides the old data,

03:05.300 --> 03:07.940
that's just a side note on how to use that on firebase.

03:07.940 --> 03:13.730
The cool thing we see here is though that we were able to use our own interceptor here, check the request,

03:13.820 --> 03:19.310
you will see get requests still work though the data is not output correctly of course because well

03:19.310 --> 03:27.050
we still have a method set up which extracts it differently but we see that now we're successfully intercepting

03:27.110 --> 03:31.630
all requests we're sending and exchanging the method in case it is a put request.
