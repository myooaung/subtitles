WEBVTT

00:02.550 --> 00:08.820
In the last lecture we sent a get request and now I just want to show you how we could get the data

00:08.820 --> 00:11.160
we get here to the screen. For that, I'll

00:11.220 --> 00:17.780
first of all add a data method in our vue component, this special data method

00:17.940 --> 00:25.750
where we return the data object we want to use. In this data object, I will store my e-mail address and it's

00:25.800 --> 00:27.280
an empty string initially,

00:27.330 --> 00:32.670
of course you could output all the data we get back but I'll just want to demonstrate how we access

00:32.670 --> 00:35.420
the data at the example of the email address,

00:35.420 --> 00:39.520
you can of course always apply this to the other fields you get back to.

00:39.930 --> 00:50.130
So let's say here in paragraph, we want to say your mail address, email address of course and then here

00:50.190 --> 00:55.140
I want to output e-mail, referring to that data field.

00:55.140 --> 01:01.440
Now the goal is to set this email field to the data we get back from the server here in the then block

01:01.530 --> 01:03.920
because that is where we have access to the data

01:04.050 --> 01:07.020
and that's important because it's sometimes messed up,

01:07.230 --> 01:16.370
you can't set this email equal to response e-mail or something like that because you only have access to

01:16.380 --> 01:22.520
response inside this function in the then block because this is async code, this function here in the

01:22.520 --> 01:25.150
then block runs sometime in the future,

01:25.290 --> 01:31.560
the code right after axios get is executed immediately after this is done, without waiting for this

01:31.590 --> 01:33.000
future response,

01:33.000 --> 01:37.100
so only access data inside of this function.

01:37.110 --> 01:42.810
So with that, I'll create a function here and I won't just console log the response even though I

01:42.810 --> 01:48.620
will still also do that but instead I want to set this email equal to something from the response.

01:48.630 --> 01:57.270
Now as you learned, our response actually holds a javascript object in that data field where we have a lot

01:57.270 --> 02:00.820
of information about the users we stored,

02:00.960 --> 02:06.840
actually we get a lot of these cryptic keys where then the user data is the value of these keys.

02:06.900 --> 02:13.060
So what we probably have to do is we have to loop through all these keys to get the e-mail addresses

02:13.230 --> 02:14.880
and that's right, addresses,

02:14.910 --> 02:19.590
we have more than one user at least theoretically because we were posting data,

02:19.590 --> 02:25.920
so we're storing more than one user. Still, if we want to get only one e-mail address, let's say the first

02:25.920 --> 02:31.030
one, let's simply convert this object into an array,

02:31.030 --> 02:32.970
this object we get back. For this

02:32.970 --> 02:36.630
first of all, I'll extract the data from res data,

02:36.630 --> 02:43.840
just a little line to make the following lines a bit shorter, thereafter I'll loop through my keys,

02:43.860 --> 02:51.160
so for key in data, I now want to store that in an array,

02:51.440 --> 02:57.080
so there I'll create a new users array, an empty array at the beginning and then I will simply call users

02:57.260 --> 03:01.350
push in here and access data for a given key,

03:01.490 --> 03:06.180
that will be the value for these cryptic keys, to push that into the array.

03:06.380 --> 03:09.980
However I will fine tune this a little bit,

03:10.280 --> 03:13.790
I will create a new constant user in here

03:15.220 --> 03:20.940
and this will be data key because that is the user data

03:21.310 --> 03:28.460
but then I'll also add a new property to the user, user ID, that's a property which didn't exist before

03:28.640 --> 03:34.820
which should be that cryptic string so that we don't lose that let's say and then I can say users push

03:35.030 --> 03:36.500
user.

03:36.590 --> 03:44.480
Now let me console log users after this for loop and then I'll also set this email equal to users,

03:44.480 --> 03:50.870
the first element let's say email, like this. With all these changes in place, if we now save this and

03:50.870 --> 03:59.200
go back to our application and I reload this page, simply go back there, you see we reload the e-mail

03:59.200 --> 04:00.460
address here

04:00.760 --> 04:06.820
and now if we reload this page one more time, you'll see that here I got two console logs,

04:06.910 --> 04:12.810
the original data we get back from axios, this object where we have this data object,

04:12.940 --> 04:16.540
this is the data object we access here in our code,

04:16.720 --> 04:18.180
res data

04:18.580 --> 04:20.650
and then this is an object right,

04:20.650 --> 04:24.040
it's not an array, it's an object where we have keys,

04:24.070 --> 04:29.920
these cryptic strings and values which is our actual user data for that given ID.

04:30.160 --> 04:35.190
I do now loop through these keys with the for/in loop here

04:36.560 --> 04:42.950
and then I create a new array where I extract that user data and also add an ID to each user in that

04:42.980 --> 04:43.830
array.

04:43.880 --> 04:47.510
So that is what we can see in the array we output here at the bottom,

04:47.510 --> 04:49.030
it's an array of objects,

04:49.070 --> 04:50.270
the object is the

04:50.300 --> 04:55.150
well let's say right side of this data object.

04:55.150 --> 05:01.730
And here we got our ID too so that this doesn't get lost because this could be information we need

05:01.940 --> 05:07.480
to for example, map a post created by that user in the future or something like that.

05:07.940 --> 05:12.340
So this is how we can extract data when using axios 

05:12.470 --> 05:16.570
and I just wanted to show this little demo so that this is crystal clear

05:16.640 --> 05:22.360
and you know how to not only store data on a server but that you really also know how to extract

05:22.360 --> 05:22.940
it.

05:22.940 --> 05:29.870
Of course the exact steps differ by the format of the data your backend returns to you, firebase happens

05:29.870 --> 05:37.220
to return this object with these cryptic keys and then the value, your backend might return a different

05:37.220 --> 05:38.000
format.

05:38.030 --> 05:45.110
So the general idea of accessing res data and then transforming it to your needs still is always the

05:45.110 --> 05:45.900
same though.
