WEBVTT
1

00:00:00.000  -->  00:00:07.109
Hello and welcome back to the course in

2

00:00:07.109  -->  00:00:08.849
R programming in a previous tutorial

3

00:00:08.849  -->  00:00:12.300
we talked about pictures operations and

4

00:00:12.300  -->  00:00:15.240
I hope that you had a chance to practice

5

00:00:15.240  -->  00:00:17.580
some of those basic addition subtraction

6

00:00:17.580  -->  00:00:20.760
multiplication divisions and maybe some

7

00:00:20.760  -->  00:00:23.490
logical expressions with vectors in

8

00:00:23.490  -->  00:00:25.769
there vectorized form and that is

9

00:00:25.769  -->  00:00:27.990
because I will leave that part for you

10

00:00:27.990  -->  00:00:30.510
to explore in this tutorial we won't be

11

00:00:30.510  -->  00:00:31.949
going through those basics in this

12

00:00:31.949  -->  00:00:34.260
tutorial we will straightaway jump into

13

00:00:34.260  -->  00:00:37.020
a very interesting experiment. We will

14

00:00:37.020  -->  00:00:39.809
find out exactly why you should use

15

00:00:39.809  -->  00:00:42.719
vectorized operations and R over be

16

00:00:42.719  -->  00:00:45.420
vectorized operations. So let's get

17

00:00:45.420  -->  00:00:47.160
straight into it and this tutorial will

18

00:00:47.160  -->  00:00:49.140
consist of two parts in the first

19

00:00:49.140  -->  00:00:50.640
tutorial I would like to explain

20

00:00:50.640  -->  00:00:53.610
something to you about loops that might

21

00:00:53.610  -->  00:00:56.010
cause confusion if we jump straight into

22

00:00:56.010  -->  00:00:58.739
it in the second part and as soon as we

23

00:00:58.739  -->  00:00:59.820
get that out of the way in the first

24

00:00:59.820  -->  00:01:01.530
part we will proceed to our

25

00:01:01.530  -->  00:01:02.609
investigation.

26

00:01:02.609  -->  00:01:04.409
Alright so let's get started first thing

27

00:01:04.409  -->  00:01:05.909
we're going to do is we're going to

28

00:01:05.909  -->  00:01:09.090
create a vector X and we're going to put

29

00:01:09.090  -->  00:01:13.830
five random numbers into the section. So

30

00:01:13.830  -->  00:01:16.110
we do it like that where you know and

31

00:01:16.110  -->  00:01:20.430
there are our five numbers now what we

32

00:01:20.430  -->  00:01:23.130
want to do is we want to print out each

33

00:01:23.130  -->  00:01:25.170
of these numbers or each of these

34

00:01:25.170  -->  00:01:26.820
elements on its own.

35

00:01:26.820  -->  00:01:28.710
How would we go about it from what we

36

00:01:28.710  -->  00:01:30.900
already know well obviously would create

37

00:01:30.900  -->  00:01:34.950
a for loop and we would say while I is

38

00:01:34.950  -->  00:01:38.490
in X remember how in the challenge we

39

00:01:38.490  -->  00:01:41.460
said while I isn't rnorm a hundred

40

00:01:41.460  -->  00:01:43.770
well this is the same thing just the

41

00:01:43.770  -->  00:01:45.299
differences that we've already created

42

00:01:45.299  -->  00:01:48.570
this vector and we already storing these

43

00:01:48.570  -->  00:01:52.170
five random numbers inside X so we can

44

00:01:52.170  -->  00:01:55.049
say I in X so while is iterating over

45

00:01:55.049  -->  00:01:57.360
the vector and then in the curly

46

00:01:57.360  -->  00:02:00.509
brackets would say simply print I so now

47

00:02:00.509  -->  00:02:03.570
if we're on this you'll see that these

48

00:02:03.570  -->  00:02:05.009
numbers have been printed.

49

00:02:05.009  -->  00:02:07.200
So what exactly happened here let's just

50

00:02:07.200  -->  00:02:09.030
pause on this for a second what happened

51

00:02:09.030  -->  00:02:09.649
here.

52

00:02:09.649  -->  00:02:12.170
What happened is variable I was created

53

00:02:12.170  -->  00:02:13.879
which you can see over here still still

54

00:02:13.879  -->  00:02:16.730
live and what happened is this variable

55

00:02:16.730  -->  00:02:20.689
in this loop or step-by-step went to the

56

00:02:20.689  -->  00:02:23.780
inspector so first it assumed this value

57

00:02:23.780  -->  00:02:25.970
and then this happened.

58

00:02:25.970  -->  00:02:29.150
The value of the several is printed and

59

00:02:29.150  -->  00:02:31.609
that's why we see this here then the

60

00:02:31.609  -->  00:02:34.310
variable assumed this value and then

61

00:02:34.310  -->  00:02:35.989
again this happened and that's why we

62

00:02:35.989  -->  00:02:38.629
see this year then the variable assume

63

00:02:38.629  -->  00:02:41.420
the next value and then this happened

64

00:02:41.420  -->  00:02:43.609
again and that's why we see this and so

65

00:02:43.609  -->  00:02:45.739
on and that happened five times so that

66

00:02:45.739  -->  00:02:48.739
is how we are used to creating for loops

67

00:02:48.739  -->  00:02:52.489
and are now let's say I wanted to print

68

00:02:52.489  -->  00:02:56.989
out these values of x using the square

69

00:02:56.989  -->  00:02:58.609
bracket so let's say I wanted to print

70

00:02:58.609  -->  00:03:00.079
out the first value how would I do that

71

00:03:00.079  -->  00:03:02.629
I would say print and then in the normal

72

00:03:02.629  -->  00:03:05.900
brackets I would say x and then as we know from the

73

00:03:05.900  -->  00:03:08.540
square brackets tutorial I would say X

74

00:03:08.540  -->  00:03:10.909
square brackets 1 right so if I print

75

00:03:10.909  -->  00:03:13.250
that you'll see that I've printed just

76

00:03:13.250  -->  00:03:14.780
the first value now if I want to print

77

00:03:14.780  -->  00:03:18.379
the second value same thing x to right and

78

00:03:18.379  -->  00:03:21.620
I can just copy paste this like a monkey

79

00:03:21.620  -->  00:03:25.849
three four five and so if I run this now

80

00:03:25.849  -->  00:03:28.190
this is the second value third value fourth

81

00:03:28.190  -->  00:03:30.409
value 5th value right so you can see that

82

00:03:30.409  -->  00:03:32.209
I've printed all five of them

83

00:03:32.209  -->  00:03:34.370
successfully by themselves.

84

00:03:34.370  -->  00:03:37.250
Now what can you notice here ok you can

85

00:03:37.250  -->  00:03:41.000
notice that every line here is identical

86

00:03:41.000  -->  00:03:43.370
out of these five lines every line is

87

00:03:43.370  -->  00:03:45.620
identical only thing that changes is

88

00:03:45.620  -->  00:03:48.319
this number in the brackets right so it

89

00:03:48.319  -->  00:03:50.510
was a 1 then it became a to then become

90

00:03:50.510  -->  00:03:56.060
a 3, 4, 5 so this looks like actually an

91

00:03:56.060  -->  00:03:57.859
iterative process right so you're doing

92

00:03:57.859  -->  00:04:00.440
the same thing you just changing one of

93

00:04:00.440  -->  00:04:01.250
the values

94

00:04:01.250  -->  00:04:02.449
well whenever you see an iterative

95

00:04:02.449  -->  00:04:05.540
process and whenever you can kind of

96

00:04:05.540  -->  00:04:07.699
think that you're doing a monkey's job

97

00:04:07.699  -->  00:04:10.909
you're just changing one number right

98

00:04:10.909  -->  00:04:13.849
well then a loop can come in handy as

99

00:04:13.849  -->  00:04:17.810
well right. A loop can take over and do

100

00:04:17.810  -->  00:04:20.029
this changing for you so what would it

101

00:04:20.029  -->  00:04:22.790
look like? It would look like print

102

00:04:22.790  -->  00:04:25.550
x and then in the brackets instead of a

103

00:04:25.550  -->  00:04:29.450
number would have an index so I not this

104

00:04:29.450  -->  00:04:31.370
I you know what let's change it that's

105

00:04:31.370  -->  00:04:34.760
not say I let's say J would have a number J

106

00:04:34.760  -->  00:04:37.130
or a variable J that would change from

107

00:04:37.130  -->  00:04:40.670
one to five and we would just use it

108

00:04:40.670  -->  00:04:43.250
here to iterate over this process so

109

00:04:43.250  -->  00:04:44.750
what the eye is doing here is a bit

110

00:04:44.750  -->  00:04:46.670
different the I is actually iterating

111

00:04:46.670  -->  00:04:49.070
over the actual element itself so that's

112

00:04:49.070  -->  00:04:52.220
the I then that's the next I, that's the

113

00:04:52.220  -->  00:04:54.920
next I, that's the next Iand that's

114

00:04:54.920  -->  00:04:57.020
the next time and this is like an are

115

00:04:57.020  -->  00:04:58.940
specific thing what we're talking about

116

00:04:58.940  -->  00:05:04.880
here is for the j to iterate over 1 2 3

117

00:05:04.880  -->  00:05:09.710
4 and 5 so this is a more conventional

118

00:05:09.710  -->  00:05:11.960
approach that you would see in other

119

00:05:11.960  -->  00:05:13.610
programming languages. So let's turn this

120

00:05:13.610  -->  00:05:15.590
into a loop note how would we do it very

121

00:05:15.590  -->  00:05:19.430
simple we just say 4 j in now we don't

122

00:05:19.430  -->  00:05:20.840
want to trade over the vectors and

123

00:05:20.840  -->  00:05:22.490
resources now we want to iterate over the

124

00:05:22.490  -->  00:05:24.500
numbers from one to five so we'll say

125

00:05:24.500  -->  00:05:29.450
from j 4 j in 1, 2, 5 and then we'll put our

126

00:05:29.450  -->  00:05:33.860
current brackets a tab close the

127

00:05:33.860  -->  00:05:35.960
brackets so what I want you to pay

128

00:05:35.960  -->  00:05:38.210
attention to here is that this loop

129

00:05:38.210  -->  00:05:40.640
already achieved the same result is a

130

00:05:40.640  -->  00:05:42.440
bit different to this loop once again

131

00:05:42.440  -->  00:05:44.510
this is let's add a comment

132

00:05:44.510  -->  00:05:48.920
this is kind of conventional programming

133

00:05:48.920  -->  00:05:53.900
loop right and this one is called are

134

00:05:53.900  -->  00:05:59.720
specific programming loop right so here

135

00:05:59.720  -->  00:06:03.380
we are just telling j to it's right over

136

00:06:03.380  -->  00:06:05.240
the numbers 1, 2, 5 and then we're accessing

137

00:06:05.240  -->  00:06:07.910
the vector that we're interested in X

138

00:06:07.910  -->  00:06:09.620
through the square brackets and we're

139

00:06:09.620  -->  00:06:13.700
by passing the the value of J to the

140

00:06:13.700  -->  00:06:16.280
square bracket what we're doing here is

141

00:06:16.280  -->  00:06:19.220
we're iterating over the vector itself.

142

00:06:19.220  -->  00:06:22.100
So I is actually assuming the values of

143

00:06:22.100  -->  00:06:24.440
the vector and we can only do that

144

00:06:24.440  -->  00:06:29.060
because X is a vector and that is how r

145

00:06:29.060  -->  00:06:30.350
operate so this is kind of like a

146

00:06:30.350  -->  00:06:32.270
shortcut in our one showing you this

147

00:06:32.270  -->  00:06:34.010
method now is because for what we're

148

00:06:34.010  -->  00:06:36.080
about to do for the comparison of

149

00:06:36.080  -->  00:06:38.659
vectorized 2 d vector operations are

150

00:06:38.659  -->  00:06:40.370
going to know I need to know how to do

151

00:06:40.370  -->  00:06:42.650
this loop right you won't be using this

152

00:06:42.650  -->  00:06:45.379
kind of loops much in a in R

153

00:06:45.379  -->  00:06:47.180
programming or the kind of loops for

154

00:06:47.180  -->  00:06:49.250
that matter but anyway it's good to know

155

00:06:49.250  -->  00:06:51.560
and plus we will need it today so I hope

156

00:06:51.560  -->  00:06:53.300
that all makes sense because you really

157

00:06:53.300  -->  00:06:55.009
need to get your hear all this for

158

00:06:55.009  -->  00:06:57.259
the next part of this tutorial and now

159

00:06:57.259  -->  00:06:59.479
let's proceed to that second part. I'm

160

00:06:59.479  -->  00:07:02.389
going to put a line here so that we know

161

00:07:02.389  -->  00:07:05.689
this is going to be the second part for

162

00:07:05.689  -->  00:07:06.439
today.

163

00:07:06.439  -->  00:07:08.300
Alright so what we're going to do here

164

00:07:08.300  -->  00:07:10.819
in our second type apart

165

00:07:10.819  -->  00:07:13.310
well we're going to actually compare so

166

00:07:13.310  -->  00:07:15.710
we're going to compare vectorized

167

00:07:15.710  -->  00:07:18.379
operations vs be vectorized right so

168

00:07:18.379  -->  00:07:20.569
we've discussed that r is a vectorized

169

00:07:20.569  -->  00:07:22.520
programming language and you can

170

00:07:22.520  -->  00:07:24.590
actually just add two vectors together

171

00:07:24.590  -->  00:07:27.319
we fought going through every single

172

00:07:27.319  -->  00:07:29.870
element now what we want to see is what

173

00:07:29.870  -->  00:07:32.360
is the difference between doing it that

174

00:07:32.360  -->  00:07:34.250
way and doing it the conventional

175

00:07:34.250  -->  00:07:36.770
standard programming language way.

176

00:07:36.770  -->  00:07:39.500
Alright so let's skip started we're

177

00:07:39.500  -->  00:07:41.240
going to create we're going to have

178

00:07:41.240  -->  00:07:43.250
parameter we're gonna have a parameter

179

00:07:43.250  -->  00:07:44.539
and and let's say it's going to be a

180

00:07:44.539  -->  00:07:46.759
hundred just a hundred variables are

181

00:07:46.759  -->  00:07:48.770
going to populate our vectors of hundred

182

00:07:48.770  -->  00:07:51.020
variables will have a vector a and we'll

183

00:07:51.020  -->  00:07:54.469
put into it a hundred normally

184

00:07:54.469  -->  00:07:57.259
distributed of numbers then we'll have a

185

00:07:57.259  -->  00:08:00.349
vector B and will also put a hundred

186

00:08:00.349  -->  00:08:02.150
normally distributed numbers into that

187

00:08:02.150  -->  00:08:04.279
vector right so let's run this is and

188

00:08:04.279  -->  00:08:07.400
there's a and there's b perfect.

189

00:08:07.400  -->  00:08:09.529
Now what we want to do is we want to

190

00:08:09.529  -->  00:08:13.250
compare the difference between running a

191

00:08:13.250  -->  00:08:15.259
vectorized operation and a de-vectorized right.

192

00:08:15.259  -->  00:08:17.330
So let's put a comment in

193

00:08:17.330  -->  00:08:19.310
so this is going to be vectorized

194

00:08:19.310  -->  00:08:23.240
approach and then we'll have a comment

195

00:08:23.240  -->  00:08:27.110
as well de-vectorized approach I think

196

00:08:27.110  -->  00:08:29.300
I should put a dashing here.

197

00:08:29.300  -->  00:08:32.029
Alright so let's do the vectors approach

198

00:08:32.029  -->  00:08:34.310
first right. We want to create a vector C

199

00:08:34.310  -->  00:08:37.399
and into that Victor we want to put

200

00:08:37.399  -->  00:08:39.560
we're going to multiply A times B. A

201

00:08:39.560  -->  00:08:42.560
times B done that's it that's one line

202

00:08:42.560  -->  00:08:45.649
of code have finished now for de-

203

00:08:45.649  -->  00:08:47.360
vectorized approach what we're going to

204

00:08:47.360  -->  00:08:49.040
do is we're going to go through all

205

00:08:49.040  -->  00:08:51.620
the elements and multiply them one by

206

00:08:51.620  -->  00:08:53.300
one, so let's look over here this is A

207

00:08:53.300  -->  00:08:56.089
this is B we're going to take a creator

208

00:08:56.089  -->  00:08:58.490
loop and we'll take the first element x

209

00:08:58.490  -->  00:09:00.199
the first element and stored in a

210

00:09:00.199  -->  00:09:02.660
separate vector then we will multiply

211

00:09:02.660  -->  00:09:04.940
this element by this element and put it

212

00:09:04.940  -->  00:09:06.470
into that vector as well and we'll

213

00:09:06.470  -->  00:09:08.029
multiply this element by this element

214

00:09:08.029  -->  00:09:10.069
and put into that vector as well. So

215

00:09:10.069  -->  00:09:12.230
let's see how we can arrange that

216

00:09:12.230  -->  00:09:14.959
first we'll create a vector D and into

217

00:09:14.959  -->  00:09:16.430
that vector what we're going to do is

218

00:09:16.430  -->  00:09:18.380
we're going to create an empty vector so

219

00:09:18.380  -->  00:09:20.480
we're going to use the replicate

220

00:09:20.480  -->  00:09:23.209
function and we're going to replicate a

221

00:09:23.209  -->  00:09:26.149
simple na so n/a stands for

222

00:09:26.149  -->  00:09:27.920
not applicable or something like no

223

00:09:27.920  -->  00:09:30.350
values not it's not existence so just

224

00:09:30.350  -->  00:09:32.240
basically will create an empty vector

225

00:09:32.240  -->  00:09:34.370
but what we're doing is we're allocating

226

00:09:34.370  -->  00:09:36.180
memory.

227

00:09:36.180  -->  00:09:36.800
We want to allocate enough memory

228

00:09:36.800  -->  00:09:39.139
for this vector right so now we have

229

00:09:39.139  -->  00:09:43.430
vector D which is a logical vector well

230

00:09:43.430  -->  00:09:45.079
doesn't really matter what kind of type

231

00:09:45.079  -->  00:09:46.970
it is and it has a hundred elements all

232

00:09:46.970  -->  00:09:49.759
of which are n/a n/a n/a n/a so but

233

00:09:49.759  -->  00:09:51.800
basically what that means is that now we

234

00:09:51.800  -->  00:09:53.569
have a hundred spaces that we need to

235

00:09:53.569  -->  00:09:55.639
feel while we're going to be multiplying

236

00:09:55.639  -->  00:09:57.620
the two vectors and now we're just going

237

00:09:57.620  -->  00:10:00.260
to add a simple for loop as we discussed

238

00:10:00.260  -->  00:10:03.170
previously for I in one to end right

239

00:10:03.170  -->  00:10:05.240
because we have n elements we're going

240

00:10:05.240  -->  00:10:07.069
to learn what we're going to do is going

241

00:10:07.069  -->  00:10:10.100
to say d with the index I what we want

242

00:10:10.100  -->  00:10:12.380
to put in there is we want to put in a

243

00:10:12.380  -->  00:10:17.389
with index I multiplied by b with the index I'm so

244

00:10:17.389  -->  00:10:18.949
a bit and very similar to what we're

245

00:10:18.949  -->  00:10:21.290
doing here. We are accessing to the

246

00:10:21.290  -->  00:10:23.779
vectors element by element we're

247

00:10:23.779  -->  00:10:25.250
multiplying them and putting the result

248

00:10:25.250  -->  00:10:27.680
in to do, so let's go ahead and run these

249

00:10:27.680  -->  00:10:29.990
two approaches so first of all let's run

250

00:10:29.990  -->  00:10:32.990
approach for ecstasy and now let's run

251

00:10:32.990  -->  00:10:35.029
this second approach the d vectors

252

00:10:35.029  -->  00:10:38.120
approach and calculate vector D. Ok so

253

00:10:38.120  -->  00:10:40.100
here we have extra see and vector D as

254

00:10:40.100  -->  00:10:42.949
you can see from these two lines they're

255

00:10:42.949  -->  00:10:45.350
identical so we've got the same result.

256

00:10:45.350  -->  00:10:46.970
Now what are the differences here the

257

00:10:46.970  -->  00:10:49.220
differences are obvious first of all

258

00:10:49.220  -->  00:10:52.220
this is way shorter this is quite

259

00:10:52.220  -->  00:10:55.040
cumbersome it takes some space takes

260

00:10:55.040  -->  00:10:56.720
actually full lines and you've got a

261

00:10:56.720  -->  00:10:59.510
loop your code more so it's visually not

262

00:10:59.510  -->  00:11:02.540
as aesthetic and also it takes

263

00:11:02.540  -->  00:11:05.030
more time to create this code but what

264

00:11:05.030  -->  00:11:07.220
is an obvious right away is that this

265

00:11:07.220  -->  00:11:10.460
approach is actually foster yes in R

266

00:11:10.460  -->  00:11:13.220
vectorized operations are faster than to

267

00:11:13.220  -->  00:11:15.230
vectorize depression and I can actually

268

00:11:15.230  -->  00:11:17.900
prove it too so let's change and from

269

00:11:17.900  -->  00:11:20.780
100 to 1 million so it's three zeros

270

00:11:20.780  -->  00:11:22.910
there's six zeros so if I change and

271

00:11:22.910  -->  00:11:26.480
like that now I rerun a and B and I run

272

00:11:26.480  -->  00:11:27.800
this watch how long it will take around

273

00:11:27.800  -->  00:11:31.100
pretty much instant right so now if I

274

00:11:31.100  -->  00:11:33.740
run this first create the vector and

275

00:11:33.740  -->  00:11:35.510
let's see how long this loop by self

276

00:11:35.510  -->  00:11:37.370
will take around you can see it's taking

277

00:11:37.370  -->  00:11:40.130
some time right now let's say I make a

278

00:11:40.130  -->  00:11:43.340
10 million on that which how long it

279

00:11:43.340  -->  00:11:44.840
will take this point for this to rent

280

00:11:44.840  -->  00:11:47.660
that was like maybe half a second maybe

281

00:11:47.660  -->  00:11:48.200
less

282

00:11:48.200  -->  00:11:51.110
now let's allocate some space for d and

283

00:11:51.110  -->  00:11:54.380
now let's run this part you can see it's

284

00:11:54.380  -->  00:11:57.020
still thinking and it's still thinking

285

00:11:57.020  -->  00:12:00.410
and again the computer is still thinking

286

00:12:00.410  -->  00:12:01.970
even though we're chipping the same

287

00:12:01.970  -->  00:12:04.280
result exact same result but just in a

288

00:12:04.280  -->  00:12:06.500
different way it is taking longer there

289

00:12:06.500  -->  00:12:07.010
we go.

290

00:12:07.010  -->  00:12:10.640
So here you can compare that while both

291

00:12:10.640  -->  00:12:11.900
vector are here you can actually see

292

00:12:11.900  -->  00:12:15.290
them but the point is that this one took

293

00:12:15.290  -->  00:12:16.670
way longer

294

00:12:16.670  -->  00:12:18.650
so why is that and in fact this can come

295

00:12:18.650  -->  00:12:20.270
as a surprise for those of you who have

296

00:12:20.270  -->  00:12:21.440
experience in other programming

297

00:12:21.440  -->  00:12:24.020
languages because a lot of programming

298

00:12:24.020  -->  00:12:25.550
languages especially low-level

299

00:12:25.550  -->  00:12:27.590
programming languages like C they will

300

00:12:27.590  -->  00:12:30.620
work better if you break down operations

301

00:12:30.620  -->  00:12:34.040
into small blocks like this, so if you

302

00:12:34.040  -->  00:12:36.530
create a loop and see like this it will

303

00:12:36.530  -->  00:12:39.020
work much faster than something that is

304

00:12:39.020  -->  00:12:41.690
similar to a vectorized operation in

305

00:12:41.690  -->  00:12:44.510
fact the programming language Julia it also

306

00:12:44.510  -->  00:12:46.790
has vectorized and de-vecectors approaches

307

00:12:46.790  -->  00:12:49.970
well in Julia if you create a vectorized

308

00:12:49.970  -->  00:12:52.580
approach it will be longer than D

309

00:12:52.580  -->  00:12:55.160
vectorized approach. So the opposite the

310

00:12:55.160  -->  00:12:56.480
flip happens there

311

00:12:56.480  -->  00:12:58.490
so why is that why is that the case and

312

00:12:58.490  -->  00:13:00.530
here we'll get into a bit of like

313

00:13:00.530  -->  00:13:03.590
technical details around R which you

314

00:13:03.590  -->  00:13:05.360
might not come across in other tutorials

315

00:13:05.360  -->  00:13:08.180
or in other books that you read on R

316

00:13:08.180  -->  00:13:10.190
but I think it's important because it

317

00:13:10.190  -->  00:13:11.660
helps you better understand what's going

318

00:13:11.660  -->  00:13:13.930
on in the programming language in the background and

319

00:13:13.930  -->  00:13:15.580
also helps you optimize your code and

320

00:13:15.580  -->  00:13:18.280
ultimately produce better script. So

321

00:13:18.280  -->  00:13:21.820
what's happening is our is a high-level

322

00:13:21.820  -->  00:13:24.730
programming language and things like

323

00:13:24.730  -->  00:13:28.120
this vectorized operations and function

324

00:13:28.120  -->  00:13:29.170
called and so on.

325

00:13:29.170  -->  00:13:31.150
Even we fought you realizing it what it's

326

00:13:31.150  -->  00:13:34.780
doing is its delegating those things

327

00:13:34.780  -->  00:13:36.850
those calculations to programming

328

00:13:36.850  -->  00:13:39.490
languages like C and fortran in the

329

00:13:39.490  -->  00:13:40.870
background so you can't see this

330

00:13:40.870  -->  00:13:42.760
happening and you think that R is

331

00:13:42.760  -->  00:13:45.070
doing this calculation or are a

332

00:13:45.070  -->  00:13:47.290
performing a function that you've called

333

00:13:47.290  -->  00:13:49.510
executing that function but what is

334

00:13:49.510  -->  00:13:52.060
actually happening is R is basically

335

00:13:52.060  -->  00:13:55.180
acting as a rapper for C code or for

336

00:13:55.180  -->  00:13:56.920
fortran code or for some other

337

00:13:56.920  -->  00:13:58.900
programming language code and it's

338

00:13:58.900  -->  00:14:01.900
basically calling that language to

339

00:14:01.900  -->  00:14:05.680
perform its hard labor for R and what

340

00:14:05.680  -->  00:14:07.930
it needs to do is when it's calling that

341

00:14:07.930  -->  00:14:10.120
language for instance see it has to tell

342

00:14:10.120  -->  00:14:13.120
that language what its passing what kind

343

00:14:13.120  -->  00:14:14.590
of variables its passing and what needs

344

00:14:14.590  -->  00:14:17.380
to be done and for instance here it has

345

00:14:17.380  -->  00:14:20.170
to tell that delegating a programming

346

00:14:20.170  -->  00:14:22.000
language it has to tell it that this is

347

00:14:22.000  -->  00:14:24.430
going to be a double variable and this

348

00:14:24.430  -->  00:14:25.750
is a double variable and this is a

349

00:14:25.750  -->  00:14:27.340
double variable and you need to multiply

350

00:14:27.340  -->  00:14:29.560
them and then assign them here and then

351

00:14:29.560  -->  00:14:30.910
it has to do that.

352

00:14:30.910  -->  00:14:32.710
What what do we have here it has to do

353

00:14:32.710  -->  00:14:35.050
that 10 million times, so 10 million

354

00:14:35.050  -->  00:14:38.110
times it has to tell see what kind of

355

00:14:38.110  -->  00:14:39.730
variables is passing on and what they

356

00:14:39.730  -->  00:14:40.990
need what needs to be done with them.

357

00:14:40.990  -->  00:14:43.660
When you perform this approach what

358

00:14:43.660  -->  00:14:45.400
happens is our relies on that

359

00:14:45.400  -->  00:14:47.140
fundamental concept that we talked about

360

00:14:47.140  -->  00:14:50.380
earlier that a vector can only contain

361

00:14:50.380  -->  00:14:53.950
elements of the same type so 
R will

362

00:14:53.950  -->  00:14:57.310
know already that this vector can only

363

00:14:57.310  -->  00:14:59.950
contain doubles right and this vector

364

00:14:59.950  -->  00:15:01.960
can also only contain doubles because it

365

00:15:01.960  -->  00:15:03.490
just has to look at one of them and it

366

00:15:03.490  -->  00:15:05.530
will know because it knows that you

367

00:15:05.530  -->  00:15:07.540
cannot mix different elements inside

368

00:15:07.540  -->  00:15:10.420
vector so it will only have to tell the

369

00:15:10.420  -->  00:15:12.790
other programming language one time

370

00:15:12.790  -->  00:15:14.770
what kind of variables are being passed

371

00:15:14.770  -->  00:15:16.960
and will only have to tell that

372

00:15:16.960  -->  00:15:18.820
programming language exactly what to do

373

00:15:18.820  -->  00:15:20.470
the multiplication and then the

374

00:15:20.470  -->  00:15:22.570
assignment operation that are it will

375

00:15:22.570  -->  00:15:24.610
only have to pass that information on

376

00:15:24.610  -->  00:15:25.630
one time

377

00:15:25.630  -->  00:15:28.900
and that is where the time is saved in

378

00:15:28.900  -->  00:15:31.960
that delegation of tasks and then the

379

00:15:31.960  -->  00:15:33.670
low-level programming language which is

380

00:15:33.670  -->  00:15:37.330
C or Fortran it takes this operation and

381

00:15:37.330  -->  00:15:39.460
breaks it down and then the loop happens

382

00:15:39.460  -->  00:15:41.740
in there automatically and so that is

383

00:15:41.740  -->  00:15:43.660
the second reason why you should use

384

00:15:43.660  -->  00:15:46.750
vector Iser operations in R as opposed

385

00:15:46.750  -->  00:15:48.640
to de-vectorize operation because

386

00:15:48.640  -->  00:15:50.590
even though you might think it's faster

387

00:15:50.590  -->  00:15:52.720
to do this in reality it's not it's much

388

00:15:52.720  -->  00:15:56.140
faster in R to work with vectorize

389

00:15:56.140  -->  00:15:56.920
operation.

390

00:15:56.920  -->  00:15:59.740
Ok so I hope I didn't bore you to death

391

00:15:59.740  -->  00:16:02.200
with that explanation I personally

392

00:16:02.200  -->  00:16:04.360
believe that knowing the nitty-gritty of

393

00:16:04.360  -->  00:16:06.520
the tool that you're working with can be

394

00:16:06.520  -->  00:16:09.670
very beneficial for you in the long run.

395

00:16:09.670  -->  00:16:11.260
Ok so that brings us to the end of

396

00:16:11.260  -->  00:16:13.240
today's tutorial hope you enjoyed it and

397

00:16:13.240  -->  00:16:14.920
I look forward to seeing you in the next

398

00:16:14.920  -->  00:16:20.559
one until then, happy coding.
