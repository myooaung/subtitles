1

00:00:00,000  -->  00:00:07,080
Hello and welcome back to the course on

2

00:00:07,080  -->  00:00:09,510
R programming. In today's tutorial, we

3

00:00:09,510  -->  00:00:12,599
will be exploring the four loop. Now the

4

00:00:12,599  -->  00:00:14,730
four loop is somewhat similar to the

5

00:00:14,730  -->  00:00:17,039
while loop but in my opinion it can be

6

00:00:17,039  -->  00:00:19,980
more convenient at times. So what we're

7

00:00:19,980  -->  00:00:21,660
going to do is we're going to copy the

8

00:00:21,660  -->  00:00:23,939
code from our tutorial on the while loop

9

00:00:23,939  -->  00:00:26,760
and we'll paste it into a new file over

10

00:00:26,760  -->  00:00:28,320
here and this is where we're going to be

11

00:00:28,320  -->  00:00:30,599
talking about the four loop and having

12

00:00:30,599  -->  00:00:32,430
this while loop code will allow us to

13

00:00:32,430  -->  00:00:35,340
compare the two side-by-side. Alright, so

14

00:00:35,340  -->  00:00:37,469
let's create a four loop. The four loop

15

00:00:37,469  -->  00:00:40,079
starts with the keyword four and then

16

00:00:40,079  -->  00:00:42,030
just like the while loop, it has simple

17

00:00:42,030  -->  00:00:44,579
braces and then curly braces now the

18

00:00:44,579  -->  00:00:46,800
curly braces are indeed for the body of

19

00:00:46,800  -->  00:00:49,559
the loop but the simple braces, they

20

00:00:49,559  -->  00:00:52,980
don't specify a logical expression

21

00:00:52,980  -->  00:00:56,160
instead they specify the iterations of

22

00:00:56,160  -->  00:00:59,129
the loop. So in this case, let's say we

23

00:00:59,129  -->  00:01:01,140
want to print out the words

24

00:01:01,140  -->  00:01:04,890
hello so here I'll add print hello,

25

00:01:04,890  -->  00:01:06,900
let's say hello R, there for a bit of

26

00:01:06,900  -->  00:01:09,150
fun. So we want to print out the world

27

00:01:09,150  -->  00:01:12,630
the phrase hello R, and in the simple

28

00:01:12,630  -->  00:01:15,210
braces we want to specify the iterations,

29

00:01:15,210  -->  00:01:17,130
what are we going to iterate over? So

30

00:01:17,130  -->  00:01:18,810
we're going to have a variable I, which

31

00:01:18,810  -->  00:01:22,560
will be iterated over five values. So it

32

00:01:22,560  -->  00:01:24,869
will print out the phrase five times so

33

00:01:24,869  -->  00:01:27,840
we need I to run across five values and

34

00:01:27,840  -->  00:01:30,240
to specify that we need to type in I in

35

00:01:30,240  -->  00:01:34,860
1 to 5, so this is an interesting construct

36

00:01:34,860  -->  00:01:37,590
which we will discuss just now, but for

37

00:01:37,590  -->  00:01:40,530
now let's just run this code. So for I in

38

00:01:40,530  -->  00:01:44,880
1 to 5 print this phrase - Hello R. Let's select

39

00:01:44,880  -->  00:01:47,880
all of that and hit control enter or

40

00:01:47,880  -->  00:01:51,509
command return, so there we go the phrase

41

00:01:51,509  -->  00:01:53,640
has been printed out four times, so what

42

00:01:53,640  -->  00:01:55,110
exactly happened here?

43

00:01:55,110  -->  00:01:56,610
I know it might be a bit confusing at

44

00:01:56,610  -->  00:01:58,829
the start and also you have experience

45

00:01:58,829  -->  00:02:00,509
with other programming languages in the

46

00:02:00,509  -->  00:02:03,030
four loop in R is a bit different so

47

00:02:03,030  -->  00:02:04,860
you don't have those semicolons, you don't

48

00:02:04,860  -->  00:02:07,079
have those three elements inside the four

49

00:02:07,079  -->  00:02:09,360
loop. It is a bit different and why is

50

00:02:09,360  -->  00:02:12,030
that? Well this is where we are starting

51

00:02:12,030  -->  00:02:13,510
to touch for the

52

00:02:13,510  -->  00:02:16,299
first time ever the concept of vectors.

53

00:02:16,299  -->  00:02:17,950
Now don't get afraid, don't get worried

54

00:02:17,950  -->  00:02:20,650
we won't be digging too much into

55

00:02:20,650  -->  00:02:22,540
vectors in this specific tutorial but

56

00:02:22,540  -->  00:02:25,450
this is our first encounter of a vector

57

00:02:25,450  -->  00:02:28,689
and it's natural because R is all

58

00:02:28,689  -->  00:02:31,209
about vectors and vector as operations and

59

00:02:31,209  -->  00:02:33,610
we'll drill into vectors in a lot of

60

00:02:33,610  -->  00:02:35,170
detail in the next section of the course,

61

00:02:35,170  -->  00:02:37,269
but for now let me show you a quick

62

00:02:37,269  -->  00:02:39,280
intro or show you how we're using a

63

00:02:39,280  -->  00:02:41,829
victory here. So so what this construct

64

00:02:41,829  -->  00:02:46,000
actually is, is it is a vector. So if I

65

00:02:46,000  -->  00:02:49,750
select this 1 to 5 just by itself and now I

66

00:02:49,750  -->  00:02:53,109
run this code so I press command return.

67

00:02:53,109  -->  00:02:56,739
What you'll see is this line of code has

68

00:02:56,739  -->  00:02:58,659
been copied into the console and then

69

00:02:58,659  -->  00:03:01,870
these values appear 1,2,3,4,5,

70

00:03:01,870  -->  00:03:04,690
so basically this expression 1:5

71

00:03:04,690  -->  00:03:08,859
represents a vector of numbers or just

72

00:03:08,859  -->  00:03:10,840
basically if you are used to other

73

00:03:10,840  -->  00:03:12,459
programming languages and it's kind of

74

00:03:12,459  -->  00:03:14,920
like an array of numbers, if you're not

75

00:03:14,920  -->  00:03:16,510
used to programming languages and it's

76

00:03:16,510  -->  00:03:19,989
just a sequence of numbers 1,2,3,4,5 and

77

00:03:19,989  -->  00:03:22,000
this in R is called the vector. Once

78

00:03:22,000  -->  00:03:23,500
again we'll talk about doctors further

79

00:03:23,500  -->  00:03:25,419
down the course but basically what we're

80

00:03:25,419  -->  00:03:27,010
saying in this concert and this is what

81

00:03:27,010  -->  00:03:28,959
we're interested interested in now is

82

00:03:28,959  -->  00:03:31,569
we're saying that I has to iterate

83

00:03:31,569  -->  00:03:34,930
within this construct which is the

84

00:03:34,930  -->  00:03:37,840
vector 1,2,3,4,5 so I has to iterate

85

00:03:37,840  -->  00:03:41,019
through all of these values 1,2,3,4 and

86

00:03:41,019  -->  00:03:44,590
5 so I could create a similar four loop

87

00:03:44,590  -->  00:03:48,730
and I could say for I in let's say from

88

00:03:48,730  -->  00:03:52,209
five to ten right and then I run this

89

00:03:52,209  -->  00:03:55,389
what you'll see is a Hello R has been

90

00:03:55,389  -->  00:03:56,769
printed six times.

91

00:03:56,769  -->  00:03:58,599
Why is that? Because if I select 5 to

92

00:03:58,599  -->  00:04:01,299
10 now and press come in return you'll

93

00:04:01,299  -->  00:04:02,919
see that there are six values here, five,

94

00:04:02,919  -->  00:04:04,449
six, seven, eight, nine, ten,

95

00:04:04,449  -->  00:04:06,370
so I has been iterated. So it doesn't

96

00:04:06,370  -->  00:04:08,739
really matter where you start or what

97

00:04:08,739  -->  00:04:10,659
this vector actually is it could be

98

00:04:10,659  -->  00:04:12,579
characters it could be any type of

99

00:04:12,579  -->  00:04:14,260
numbers basically I is iterating through

100

00:04:14,260  -->  00:04:17,949
them and every time I changes this cycle

101

00:04:17,949  -->  00:04:20,949
or this loop is executed and whatever is

102

00:04:20,949  -->  00:04:22,599
inside the body of the loop is executed

103

00:04:22,599  -->  00:04:25,550
and that's how four loops

104

00:04:25,550  -->  00:04:29,389
work in R and as you can see the four

105

00:04:29,389  -->  00:04:32,000
loop is actually quite short compared to

106

00:04:32,000  -->  00:04:34,520
the while loop, so it takes a bit of space and

107

00:04:34,520  -->  00:04:37,280
because it does use of vectors in that

108

00:04:37,280  -->  00:04:39,590
way it can be a bit more convenient to

109

00:04:39,590  -->  00:04:41,840
use than the while loop. But once again

110

00:04:41,840  -->  00:04:43,490
we'll talk more about vectors throw it down

111

00:04:43,490  -->  00:04:45,229
the course. Just get your head around

112

00:04:45,229  -->  00:04:48,530
this on how the four loop works and try

113

00:04:48,530  -->  00:04:50,330
some experimenting, try putting in

114

00:04:50,330  -->  00:04:53,479
different values in the colons on the

115

00:04:53,479  -->  00:04:55,250
left and the right see what happens and

116

00:04:55,250  -->  00:04:57,590
see how that affects your four loop and

117

00:04:57,590  -->  00:05:01,430
maybe try using the I inside the body so

118

00:05:01,430  -->  00:05:03,169
just like we did with counter over here

119

00:05:03,169  -->  00:05:05,479
we use counter inside the body of the

120

00:05:05,479  -->  00:05:07,969
while loop, try using I inside of the

121

00:05:07,969  -->  00:05:09,949
body of the while loop and see what

122

00:05:09,949  -->  00:05:12,289
happens because ultimately learning a

123

00:05:12,289  -->  00:05:14,449
programming language is about trying

124

00:05:14,449  -->  00:05:16,400
trying trying and practicing practicing

125

00:05:16,400  -->  00:05:18,469
practicing.

126

00:05:18,469  -->  00:05:20,360
Ok so this brings us to the end of this

127

00:05:20,360  -->  00:05:22,550
tutorial and I look forward to seeing you next time.

128

00:05:22,550  -->  00:05:34,679
Until then, happy coding.
