WEBVTT
1

00:00:00.000  -->  00:00:07.020
Hello and welcome back to the course on

2

00:00:07.020  -->  00:00:09.480
R programming. Another section behind

3

00:00:09.480  -->  00:00:11.519
your belt and this time it was a very

4

00:00:11.519  -->  00:00:13.590
important section fundamentals of R

5

00:00:13.590  -->  00:00:15.210
programming. So very important because

6

00:00:15.210  -->  00:00:16.770
everything you learn to this section

7

00:00:16.770  -->  00:00:19.439
will be crucial to you not only

8

00:00:19.439  -->  00:00:20.580
completing this course, but also

9

00:00:20.580  -->  00:00:22.650
performing all of your work in the

10

00:00:22.650  -->  00:00:24.750
future in R because understanding the

11

00:00:24.750  -->  00:00:26.189
tool that you're working with is very

12

00:00:26.189  -->  00:00:27.150
very important.

13

00:00:27.150  -->  00:00:29.189
Alright so in this section we learned:

14

00:00:29.189  -->  00:00:30.929
first of all, what is a vector? So we

15

00:00:30.929  -->  00:00:32.669
talked about vectors and we saw that

16

00:00:32.669  -->  00:00:34.890
vectors are basically sequence of

17

00:00:34.890  -->  00:00:37.559
elements and that sequence can have a

18

00:00:37.559  -->  00:00:39.149
little a few number of elements or it can

19

00:00:39.149  -->  00:00:41.190
have a lot of elements but the important

20

00:00:41.190  -->  00:00:42.989
thing is that all those elements have to

21

00:00:42.989  -->  00:00:44.879
be of the same type, so they can either

22

00:00:44.879  -->  00:00:46.649
be all integers or they can all be

23

00:00:46.649  -->  00:00:49.110
doubles or they can be boolean elements

24

00:00:49.110  -->  00:00:50.910
or they can be character elements but

25

00:00:50.910  -->  00:00:53.340
the main point is that within 1 vector

26

00:00:53.340  -->  00:00:55.110
you cannot mix different types of

27

00:00:55.110  -->  00:00:56.850
elements and that's a very important

28

00:00:56.850  -->  00:00:59.969
fundamental underlying principle of R.

29

00:00:59.969  -->  00:01:03.120
Ok next we created some vectors, we

30

00:01:03.120  -->  00:01:05.129
looked at three functions. We talked

31

00:01:05.129  -->  00:01:07.080
about the C-function which stands for

32

00:01:07.080  -->  00:01:09.659
combined. We talk about the Seq-function,

33

00:01:09.659  -->  00:01:12.090
which stands for sequence and the Rep-

34

00:01:12.090  -->  00:01:14.760
function which stands for replicate. So

35

00:01:14.760  -->  00:01:17.400
we used all those functions to create

36

00:01:17.400  -->  00:01:19.170
different types of vectors and of course

37

00:01:19.170  -->  00:01:21.270
the most popular one is probably the C

38

00:01:21.270  -->  00:01:23.340
function. You'll be using that one a lot

39

00:01:23.340  -->  00:01:25.320
in your work with R and we'll be using it all

40

00:01:25.320  -->  00:01:28.680
the time in this course as well. Then we

41

00:01:28.680  -->  00:01:30.090
learned a few other functions that we

42

00:01:30.090  -->  00:01:32.490
talked about that is numeric function, is

43

00:01:32.490  -->  00:01:36.000
integer, is double, is characters. So all of

44

00:01:36.000  -->  00:01:38.009
those function basically allows to check

45

00:01:38.009  -->  00:01:39.960
what kind of vector we have in front of

46

00:01:39.960  -->  00:01:41.400
us because remember a vector can only

47

00:01:41.400  -->  00:01:43.619
have one type of elements inside so

48

00:01:43.619  -->  00:01:46.079
therefore it's very easy to check what

49

00:01:46.079  -->  00:01:48.360
the vector is that cannot be a mix of

50

00:01:48.360  -->  00:01:50.189
different elements so if it's a

51

00:01:50.189  -->  00:01:51.899
numeric element, vector that means all

52

00:01:51.899  -->  00:01:54.390
of the elements inside that vector are

53

00:01:54.390  -->  00:01:57.000
numeric and notice here that we already

54

00:01:57.000  -->  00:01:59.189
working very actively with functions

55

00:01:59.189  -->  00:02:01.770
even though we haven't covered the topic

56

00:02:01.770  -->  00:02:03.840
or by then we hadn't covered the topic

57

00:02:03.840  -->  00:02:05.070
of functions

58

00:02:05.070  -->  00:02:07.380
yet and that's because it's very easy to

59

00:02:07.380  -->  00:02:09.479
work with functions as we saw throughout

60

00:02:09.479  -->  00:02:12.450
this section. Then we learned about using

61

00:02:12.450  -->  00:02:13.620
the square brackets

62

00:02:13.620  -->  00:02:16.470
and how to access every individual

63

00:02:16.470  -->  00:02:19.080
element of a vector was pretty simple.

64

00:02:19.080  -->  00:02:21.840
You just have to type in the sequential

65

00:02:21.840  -->  00:02:23.700
number of that element and you'll get

66

00:02:23.700  -->  00:02:24.750
that element back.

67

00:02:24.750  -->  00:02:26.489
Moreover, inside the square brackets you can

68

00:02:26.489  -->  00:02:29.099
pass on other vectors which will give

69

00:02:29.099  -->  00:02:30.930
you several elements of that vector. You

70

00:02:30.930  -->  00:02:33.090
can pass negative numbers to exclude

71

00:02:33.090  -->  00:02:34.319
certain elements and so on. So we

72

00:02:34.319  -->  00:02:36.150
experimented with that and another thing

73

00:02:36.150  -->  00:02:38.370
that we learned in this section was that

74

00:02:38.370  -->  00:02:42.090
in R everything is a vector so even a

75

00:02:42.090  -->  00:02:44.129
single variable something that we called

76

00:02:44.129  -->  00:02:45.900
variables in the previous section

77

00:02:45.900  -->  00:02:48.750
actually those variables are also vector

78

00:02:48.750  -->  00:02:50.910
so if you have a variable of one element

79

00:02:50.910  -->  00:02:53.849
that is just a vector of one element and

80

00:02:53.849  -->  00:02:55.319
that is just how this programming

81

00:02:55.319  -->  00:02:57.450
language is constructed so that is that

82

00:02:57.450  -->  00:03:01.290
one little secret of R. Next we talked

83

00:03:01.290  -->  00:03:03.840
about vectorized operations, here we

84

00:03:03.840  -->  00:03:04.859
learned the difference between

85

00:03:04.859  -->  00:03:07.620
vectorized and devectorized operations

86

00:03:07.620  -->  00:03:10.349
and also we talked about recycling of

87

00:03:10.349  -->  00:03:13.319
vectors, so once again a very

88

00:03:13.319  -->  00:03:15.299
important tutorial that was kind of a

89

00:03:15.299  -->  00:03:17.489
theoretical tutorial and then we moved on

90

00:03:17.489  -->  00:03:20.220
to the power of vectorized operations where we

91

00:03:20.220  -->  00:03:22.680
actually conducted an experiment so

92

00:03:22.680  -->  00:03:25.680
there first we as you recall we learned to

93

00:03:25.680  -->  00:03:27.690
the two different types of for loop, so

94

00:03:27.690  -->  00:03:31.590
one for loop, the R specific for loop

95

00:03:31.590  -->  00:03:34.650
where the index variable is cycling

96

00:03:34.650  -->  00:03:37.349
through the vector itself and the other

97

00:03:37.349  -->  00:03:39.239
one, the conventional for loop where

98

00:03:39.239  -->  00:03:41.790
the index variable is cycling through

99

00:03:41.790  -->  00:03:44.669
just the numbers 1,2,3,4,5 and so on. So

100

00:03:44.669  -->  00:03:46.650
we needed that information to conduct

101

00:03:46.650  -->  00:03:48.329
our experiments where we had one

102

00:03:48.329  -->  00:03:50.250
vectorized operation where we were just

103

00:03:50.250  -->  00:03:53.730
multiplying two vectors of 10 million

104

00:03:53.730  -->  00:03:57.810
random numbers and the other one the

105

00:03:57.810  -->  00:03:59.340
devectorized operation where we're

106

00:03:59.340  -->  00:04:00.750
doing the same multiplication but

107

00:04:00.750  -->  00:04:04.079
through a loop and as we could tell, there

108

00:04:04.079  -->  00:04:06.030
were three main advantages of the

109

00:04:06.030  -->  00:04:08.040
vectorized operation first of all, it it was

110

00:04:08.040  -->  00:04:10.680
shorter so therefore it took less to

111

00:04:10.680  -->  00:04:13.470
code, less time so that's time-saving. It

112

00:04:13.470  -->  00:04:15.480
was shorter so therefore it looked better

113

00:04:15.480  -->  00:04:17.910
so that's uhmm aesthetics of your code

114

00:04:17.910  -->  00:04:21.329
and finally it actually took less time

115

00:04:21.329  -->  00:04:23.760
to execute and then we went into a bit

116

00:04:23.760  -->  00:04:26.039
of detail why that is in R and that is

117

00:04:26.039  -->  00:04:27.190
because R is

118

00:04:27.190  -->  00:04:29.620
a high-level programming language and it

119

00:04:29.620  -->  00:04:32.140
outsources or delegates a lot of its

120

00:04:32.140  -->  00:04:34.180
operations to lower level programming

121

00:04:34.180  -->  00:04:36.520
languages like C and fortran in the

122

00:04:36.520  -->  00:04:39.820
background so therefore it's much more

123

00:04:39.820  -->  00:04:42.070
preferred to create vectorized

124

00:04:42.070  -->  00:04:43.720
operations in R because they have all

125

00:04:43.720  -->  00:04:46.180
those advantages over devectorized

126

00:04:46.180  -->  00:04:48.460
operations. Very important tutorial, very

127

00:04:48.460  -->  00:04:50.380
important information to remember when

128

00:04:50.380  -->  00:04:53.680
working with R and then we talked

129

00:04:53.680  -->  00:04:55.630
about functions in R. Finally, we got

130

00:04:55.630  -->  00:04:57.100
to the tutorial where we actually

131

00:04:57.100  -->  00:04:59.530
discussed how functions work and we use

132

00:04:59.530  -->  00:05:01.600
the example of a blender so in a blender

133

00:05:01.600  -->  00:05:03.400
you put in fruit and you get a smoothie.

134

00:05:03.400  -->  00:05:06.070
In functions, you also put in something

135

00:05:06.070  -->  00:05:07.840
into the function and you get some

136

00:05:07.840  -->  00:05:09.580
output from the function. That's what

137

00:05:09.580  -->  00:05:11.590
basically they're there for.

138

00:05:11.590  -->  00:05:13.750
They're there to help you achieve a

139

00:05:13.750  -->  00:05:16.660
certain task and then we talked about

140

00:05:16.660  -->  00:05:19.660
packages in R. So packages in R

141

00:05:19.660  -->  00:05:22.510
allow you to expand the functions that

142

00:05:22.510  -->  00:05:24.610
are available to use. So the functions

143

00:05:24.610  -->  00:05:26.860
and sometimes even data, also in those

144

00:05:26.860  -->  00:05:29.350
tutorials we talked about the question mark operator

145

00:05:29.350  -->  00:05:31.510
which allows you to bring up the help

146

00:05:31.510  -->  00:05:33.460
about a certain function or a certain

147

00:05:33.460  -->  00:05:36.490
object in R which then gives you more

148

00:05:36.490  -->  00:05:38.260
information so you can comfortably

149

00:05:38.260  -->  00:05:40.360
use it without any issues and also we

150

00:05:40.360  -->  00:05:42.220
talked about the cran repository and

151

00:05:42.220  -->  00:05:44.800
what it is and why all the packages are

152

00:05:44.800  -->  00:05:46.090
most of the packages you're downloading

153

00:05:46.090  -->  00:05:48.160
coming from a cran.

154

00:05:48.160  -->  00:05:50.800
There we go, that's our recap for this

155

00:05:50.800  -->  00:05:52.840
section. I hope you enjoyed the tutorials

156

00:05:52.840  -->  00:05:55.630
here. As always remember to do the quiz

157

00:05:55.630  -->  00:05:56.919
at the end of the section, it will help

158

00:05:56.919  -->  00:05:59.560
you perform a quick self-assessment and

159

00:05:59.560  -->  00:06:01.930
once again I have prepared a very

160

00:06:01.930  -->  00:06:04.720
exciting challenge for you to have a

161

00:06:04.720  -->  00:06:07.120
look at and practice some additional

162

00:06:07.120  -->  00:06:09.880
skills get some more hands-on time with

163

00:06:09.880  -->  00:06:11.650
R and I look forward to seeing you

164

00:06:11.650  -->  00:06:12.340
next time.

165

00:06:12.340  -->  00:06:24.249
Until then, happy coding.
