1

00:00:00,000  -->  00:00:06,960
Hello and welcome back to the course in

2

00:00:06,960  -->  00:00:09,570
R programming. Slowly but surely we're

3

00:00:09,570  -->  00:00:11,550
making our way through this first

4

00:00:11,550  -->  00:00:13,469
section of the course.

5

00:00:13,469  -->  00:00:15,089
Previously we spoke about logical

6

00:00:15,089  -->  00:00:18,090
expressions and variables and today that

7

00:00:18,090  -->  00:00:19,890
information will come in handy because

8

00:00:19,890  -->  00:00:22,140
we will be talking about the while loop.

9

00:00:22,140  -->  00:00:24,660
Now the while loop isn't something that

10

00:00:24,660  -->  00:00:27,090
is very commonly used in a programming

11

00:00:27,090  -->  00:00:28,920
language like R and that is because

12

00:00:28,920  -->  00:00:31,260
R has other means of achieving the

13

00:00:31,260  -->  00:00:33,390
same results through functions like S

14

00:00:33,390  -->  00:00:35,880
apply, L apply and so on.

15

00:00:35,880  -->  00:00:38,250
However it is imperative to understand

16

00:00:38,250  -->  00:00:41,309
how the while loop and other loops work

17

00:00:41,309  -->  00:00:43,559
in the background because unless you

18

00:00:43,559  -->  00:00:45,840
know these fundamentals, there's no point

19

00:00:45,840  -->  00:00:47,579
in learning them more sophisticated

20

00:00:47,579  -->  00:00:49,739
tools. So that is why we will spend some

21

00:00:49,739  -->  00:00:52,530
time on understanding the while loop and

22

00:00:52,530  -->  00:00:54,930
further down the other types of loops. So

23

00:00:54,930  -->  00:00:57,239
let's jump straight into it. Here I've

24

00:00:57,239  -->  00:00:59,699
got a new worksheet and we're going to

25

00:00:59,699  -->  00:01:02,699
right away see how the wild loop is structured.

26

00:01:02,699  -->  00:01:04,500
The while loop starts with the keyword

27

00:01:04,500  -->  00:01:06,210
while and you can see that it has been

28

00:01:06,210  -->  00:01:07,920
highlighted in orange or in different

29

00:01:07,920  -->  00:01:09,960
colors that basically means that it's a

30

00:01:09,960  -->  00:01:13,260
keyword. Then it's followed by a standard

31

00:01:13,260  -->  00:01:15,479
normal bracket and then you have curly

32

00:01:15,479  -->  00:01:17,610
brackets that come afterwards. Notice

33

00:01:17,610  -->  00:01:19,860
that everytime I open brackets R

34

00:01:19,860  -->  00:01:21,570
automatically closes them for me and

35

00:01:21,570  -->  00:01:23,850
that's so that we don't forget to close

36

00:01:23,850  -->  00:01:26,700
the bracket. Now the first part over here

37

00:01:26,700  -->  00:01:28,770
is of course the first part is the word

38

00:01:28,770  -->  00:01:31,229
while, the second part is what goes

39

00:01:31,229  -->  00:01:34,259
inside the normal brackets and it is the

40

00:01:34,259  -->  00:01:36,150
logical expression you have to put a

41

00:01:36,150  -->  00:01:38,369
logical and expression in here so let's

42

00:01:38,369  -->  00:01:41,610
say our logical expression is ABC and

43

00:01:41,610  -->  00:01:44,850
then in the curly braces what you have

44

00:01:44,850  -->  00:01:47,340
to put is the body of the loop. So let's

45

00:01:47,340  -->  00:01:49,170
say, the body of the loop is going to be

46

00:01:49,170  -->  00:01:52,049
XYZ, just for argument's sake. So what

47

00:01:52,049  -->  00:01:54,210
will happen here is once you run the

48

00:01:54,210  -->  00:01:57,869
loop, the studio or R will get to this

49

00:01:57,869  -->  00:01:59,520
part. It will check the logical

50

00:01:59,520  -->  00:02:01,320
expression which is inside the bracket

51

00:02:01,320  -->  00:02:04,890
so check ABC and if ABC is true, so if

52

00:02:04,890  -->  00:02:06,899
that logical expression returns true

53

00:02:06,899  -->  00:02:09,599
then R will execute whatever is inside

54

00:02:09,599  -->  00:02:11,640
the body of the loop in this case XYZ.

55

00:02:11,640  -->  00:02:13,590
Then it will go

56

00:02:13,590  -->  00:02:16,590
and instead of continuing on, it will go

57

00:02:16,590  -->  00:02:19,739
back and check this expression again. It

58

00:02:19,739  -->  00:02:21,989
will check it as ABC is true and if it

59

00:02:21,989  -->  00:02:24,150
is still true it will execute XYZ

60

00:02:24,150  -->  00:02:26,519
again and that will continue on and

61

00:02:26,519  -->  00:02:29,099
on and on until ABC becomes false. As

62

00:02:29,099  -->  00:02:31,410
soon as ABC becomes false, the execution

63

00:02:31,410  -->  00:02:34,620
of the loop ceases and that the end of

64

00:02:34,620  -->  00:02:37,769
that loop. So let's give this loop some

65

00:02:37,769  -->  00:02:39,629
substance to see how it works. Let's say

66

00:02:39,629  -->  00:02:42,540
we want to a print out a message. Let's

67

00:02:42,540  -->  00:02:43,830
say we want to print hello

68

00:02:43,830  -->  00:02:45,209
and now here we are using a new function

69

00:02:45,209  -->  00:02:47,400
which is print previously I did mention

70

00:02:47,400  -->  00:02:50,160
that in R you just have to type in the

71

00:02:50,160  -->  00:02:52,620
name of a variable or an expression for

72

00:02:52,620  -->  00:02:54,510
it and then execute it for it to appear in

73

00:02:54,510  -->  00:02:56,819
the console. That is true in all the

74

00:02:56,819  -->  00:02:58,860
cases except for when you're working

75

00:02:58,860  -->  00:03:00,959
inside the loop to print something out

76

00:03:00,959  -->  00:03:03,329
from within a loop you need to use the

77

00:03:03,329  -->  00:03:06,329
word print. So here, we are printing the

78

00:03:06,329  -->  00:03:09,750
word hello and inside this expression

79

00:03:09,750  -->  00:03:12,660
let's for a simplicity type in the word

80

00:03:12,660  -->  00:03:15,090
false. So we know that this expression is

81

00:03:15,090  -->  00:03:17,730
not true, it's just the word false so

82

00:03:17,730  -->  00:03:19,500
therefore it's always false. It's never

83

00:03:19,500  -->  00:03:21,690
true and if we're on this loop

84

00:03:21,690  -->  00:03:23,519
basically we shouldn't see anything up

85

00:03:23,519  -->  00:03:25,410
here in the console. Let's try that,

86

00:03:25,410  -->  00:03:26,880
let's give that a go. Let's highlight

87

00:03:26,880  -->  00:03:29,069
this loop. We need to highlight all of it

88

00:03:29,069  -->  00:03:31,859
because it starts with the keyword and

89

00:03:31,859  -->  00:03:34,410
ends with that lost bracket and let's

90

00:03:34,410  -->  00:03:36,720
execute this now. As you can see, what

91

00:03:36,720  -->  00:03:38,730
happened here is this code was copied in

92

00:03:38,730  -->  00:03:41,340
so this plus means that the line

93

00:03:41,340  -->  00:03:43,980
continues that are is waiting for the

94

00:03:43,980  -->  00:03:46,470
end of this expression or the end of this

95

00:03:46,470  -->  00:03:48,720
loop to before it executes it

96

00:03:48,720  -->  00:03:51,120
completely and basically so that means

97

00:03:51,120  -->  00:03:53,819
that the loop continues over several

98

00:03:53,819  -->  00:03:54,959
lines and as you can see nothing

99

00:03:54,959  -->  00:03:56,549
happened afterwards.

100

00:03:56,549  -->  00:03:58,919
Now let's change this word false to the

101

00:03:58,919  -->  00:04:01,349
word true, so now we know that this

102

00:04:01,349  -->  00:04:03,690
logical expression which is simply the

103

00:04:03,690  -->  00:04:07,019
word true is always true and that means

104

00:04:07,019  -->  00:04:09,930
that this loop will keep going on

105

00:04:09,930  -->  00:04:11,669
forever. So this logical expression

106

00:04:11,669  -->  00:04:13,859
will never be false and the loop will

107

00:04:13,859  -->  00:04:16,829
just become what is called an infinite

108

00:04:16,829  -->  00:04:19,229
loop and it will make our computer to

109

00:04:19,229  -->  00:04:21,209
print this word out on and on and on

110

00:04:21,209  -->  00:04:23,280
just basically forever, so let's go ahead

111

00:04:23,280  -->  00:04:24,470
and run that.

112

00:04:24,470  -->  00:04:28,130
Highlight it and hit run so that we can

113

00:04:28,130  -->  00:04:31,280
see here is our infinite loop in action

114

00:04:31,280  -->  00:04:33,050
basically the computer is constantly

115

00:04:33,050  -->  00:04:35,630
printing this word hello as fast as it

116

00:04:35,630  -->  00:04:38,540
possibly can and we're getting a lots

117

00:04:38,540  -->  00:04:40,460
and lots and lots of them here.

118

00:04:40,460  -->  00:04:42,080
Of course that's not what we want this

119

00:04:42,080  -->  00:04:46,070
was just for illustrational purposes.

120

00:04:46,070  -->  00:04:49,370
Now in order to cancel an infinite loop,

121

00:04:49,370  -->  00:04:51,110
all you have to do is click escape on

122

00:04:51,110  -->  00:04:53,810
your keyboard and that will force a stop

123

00:04:53,810  -->  00:04:54,890
that loop.

124

00:04:54,890  -->  00:04:58,640
Ok so now let's create a loop that has a

125

00:04:58,640  -->  00:05:00,500
bit more sense to it.

126

00:05:00,500  -->  00:05:02,870
Let's say we want to create a counter

127

00:05:02,870  -->  00:05:05,420
loop, counter loop basically just counts

128

00:05:05,420  -->  00:05:07,670
some numbers and then prints them out so

129

00:05:07,670  -->  00:05:09,650
we're going to start with a variable

130

00:05:09,650  -->  00:05:12,050
which we'll call counter, that will be our

131

00:05:12,050  -->  00:05:14,240
key variable that will be triggering the

132

00:05:14,240  -->  00:05:16,100
execution or that will be governing the

133

00:05:16,100  -->  00:05:18,680
execution of the loop. So we'll understand

134

00:05:18,680  -->  00:05:20,990
what that means just in a second and we'll

135

00:05:20,990  -->  00:05:22,460
assign it the value of one. So we'll

136

00:05:22,460  -->  00:05:25,190
start at one, and then we'll say while in

137

00:05:25,190  -->  00:05:26,600
the normal brackets we'll say while

138

00:05:26,600  -->  00:05:30,020
counter is less than 12. We want to count

139

00:05:30,020  -->  00:05:32,660
from one to 11, so that's why we're

140

00:05:32,660  -->  00:05:35,300
saying less than 12. Then we'll put in

141

00:05:35,300  -->  00:05:37,669
the normal bracket and here we'll say

142

00:05:37,669  -->  00:05:41,240
print we want to display the value of

143

00:05:41,240  -->  00:05:43,790
counter and as you can see if we leave

144

00:05:43,790  -->  00:05:45,560
it like this then counter is not

145

00:05:45,560  -->  00:05:47,630
changing so country is equal to 1 and

146

00:05:47,630  -->  00:05:50,240
basically this loop will also be an

147

00:05:50,240  -->  00:05:52,010
infinite loop because this condition

148

00:05:52,010  -->  00:05:54,500
here will always be true. One is always

149

00:05:54,500  -->  00:05:57,200
less than 12, but what we can do is within the

150

00:05:57,200  -->  00:05:58,880
body of the loop within these brackets,

151

00:05:58,880  -->  00:06:01,700
we can increase counter so instead of

152

00:06:01,700  -->  00:06:03,860
counter we can assign the value of

153

00:06:03,860  -->  00:06:06,919
counter +1. So basically we're taking

154

00:06:06,919  -->  00:06:08,750
counter, we're adding one and then we're

155

00:06:08,750  -->  00:06:11,360
reassigning that counter at the end of

156

00:06:11,360  -->  00:06:13,160
the loop and then we go back into the

157

00:06:13,160  -->  00:06:15,950
loop and then the new values checked and

158

00:06:15,950  -->  00:06:18,229
this will continue until counter becomes

159

00:06:18,229  -->  00:06:20,450
12. So let's go ahead and execute that,

160

00:06:20,450  -->  00:06:22,430
first we'll execute the first line and

161

00:06:22,430  -->  00:06:24,410
then we'll highlight the loop and we'll

162

00:06:24,410  -->  00:06:27,680
execute the full loop. As you can see the

163

00:06:27,680  -->  00:06:30,440
computer has counted up to 11 for us

164

00:06:30,440  -->  00:06:32,720
just as we expected. So we're here at the

165

00:06:32,720  -->  00:06:36,350
top and we make some more space for this.

166

00:06:36,350  -->  00:06:39,710
At the top you can see the copied code

167

00:06:39,710  -->  00:06:41,990
over here and then you can see the

168

00:06:41,990  -->  00:06:46,970
printed values 1,2,3,4,5,6,7,8,9,10,11 and that

169

00:06:46,970  -->  00:06:50,000
is how loops work. Basically it allows

170

00:06:50,000  -->  00:06:52,220
you to perform certain actions on and on

171

00:06:52,220  -->  00:06:54,470
and on and said your time instead of

172

00:06:54,470  -->  00:06:57,530
printing out 11 times the word print

173

00:06:57,530  -->  00:07:00,200
with the correct values we did it in

174

00:07:00,200  -->  00:07:03,200
basically just four lines by using a

175

00:07:03,200  -->  00:07:05,000
loop. That is what loops are for, they're

176

00:07:05,000  -->  00:07:08,120
for iterating certain operations and

177

00:07:08,120  -->  00:07:09,260
that brings us to the end of this

178

00:07:09,260  -->  00:07:10,790
tutorial. Have a play around with that,

179

00:07:10,790  -->  00:07:13,760
see what other applications of the while

180

00:07:13,760  -->  00:07:16,310
loop you can come up with and I look forward

181

00:07:16,310  -->  00:07:29,109
to seeing you next time. Until then, happy coding.
