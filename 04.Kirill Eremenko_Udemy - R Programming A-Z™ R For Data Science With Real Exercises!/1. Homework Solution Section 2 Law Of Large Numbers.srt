1

00:00:00,000  -->  00:00:07,799
Hello and welcome back. Today we're going

2

00:00:07,799  -->  00:00:10,019
to solve the homework exercise for the

3

00:00:10,019  -->  00:00:13,950
law of large numbers. Let's get straight

4

00:00:13,950  -->  00:00:16,289
into it so this is our exercise. Let's

5

00:00:16,289  -->  00:00:17,039
just quickly

6

00:00:17,039  -->  00:00:19,680
refresh what it was about. Test the

7

00:00:19,680  -->  00:00:21,300
law of large numbers for N random

8

00:00:21,300  -->  00:00:23,490
normally distributed numbers with mean

9

00:00:23,490  -->  00:00:25,590
of the zero as a division of one

10

00:00:25,590  -->  00:00:28,289
and that means create an R script that

11

00:00:28,289  -->  00:00:29,880
will count how many of these numbers

12

00:00:29,880  -->  00:00:32,550
fall between minus 1 and 1 and divide

13

00:00:32,550  -->  00:00:35,010
by the total quantity of N. You know

14

00:00:35,010  -->  00:00:37,110
that the expected value of many of your

15

00:00:37,110  -->  00:00:39,750
measurement is 68.2 percent, check

16

00:00:39,750  -->  00:00:41,820
that the mean of the actually measured

17

00:00:41,820  -->  00:00:44,760
value is converging to the expected

18

00:00:44,760  -->  00:00:47,250
value as you rerun your script while

19

00:00:47,250  -->  00:00:50,039
increasing N. So that was exercise and

20

00:00:50,039  -->  00:00:53,129
let's get straight into it, stick into

21

00:00:53,129  -->  00:00:54,390
the code.

22

00:00:54,390  -->  00:00:57,660
Ok, so here I've got R studio and I've

23

00:00:57,660  -->  00:00:59,280
got a blank new script and we're going

24

00:00:59,280  -->  00:01:02,039
to create this solution together first

25

00:01:02,039  -->  00:01:04,619
thing we need is R norm function as

26

00:01:04,619  -->  00:01:07,530
you remember we used Rnorm with the

27

00:01:07,530  -->  00:01:10,500
value of one right.  So we ran Rnorm

28

00:01:10,500  -->  00:01:12,869
like that and it would generate us a new

29

00:01:12,869  -->  00:01:16,290
random variable from a normally

30

00:01:16,290  -->  00:01:18,420
distributed sample every single time

31

00:01:18,420  -->  00:01:21,750
right. So now what we want is we want a

32

00:01:21,750  -->  00:01:23,340
hundred of those variables so to do that

33

00:01:23,340  -->  00:01:24,900
we need to replace the one with a

34

00:01:24,900  -->  00:01:27,570
hundred and what we'll get is a vector or a

35

00:01:27,570  -->  00:01:29,790
hundred of those numbers. So you can see

36

00:01:29,790  -->  00:01:32,159
all them here, so first on second and

37

00:01:32,159  -->  00:01:34,500
third fourth fifth and then sixth and one and

38

00:01:34,500  -->  00:01:36,509
that's what this actually six represents

39

00:01:36,509  -->  00:01:39,960
here, 6,7,8,9,10 and 11 and so on. So

40

00:01:39,960  -->  00:01:42,420
here we have our 100 normally

41

00:01:42,420  -->  00:01:45,960
distributed variables, great! So now we need

42

00:01:45,960  -->  00:01:49,470
to create a cycle through or a loop

43

00:01:49,470  -->  00:01:51,840
through all of these numbers for in

44

00:01:51,840  -->  00:01:53,729
order to do that we need a for loop

45

00:01:53,729  -->  00:01:57,240
right? So let's create a for loop and as

46

00:01:57,240  -->  00:01:59,490
you remember we need a for then we go

47

00:01:59,490  -->  00:02:02,189
we say I, in  and what did we say we used

48

00:02:02,189  -->  00:02:04,409
to say 1 to 10 or something like that

49

00:02:04,409  -->  00:02:07,439
right? So then we've got to the curly

50

00:02:07,439  -->  00:02:09,149
brackets right. So we used to create

51

00:02:09,149  -->  00:02:11,039
loops like that and what was this?

52

00:02:11,039  -->  00:02:13,160
Well we knew that this was a vector of

53

00:02:13,160  -->  00:02:16,520
ten numbers, so in this case we were

54

00:02:16,520  -->  00:02:20,030
cycling this index through these 10

55

00:02:20,030  -->  00:02:21,800
numbers. What we want to do now is we want

56

00:02:21,800  -->  00:02:24,080
to replace that vector with the

57

00:02:24,080  -->  00:02:25,850
vector that we actually want to cycle

58

00:02:25,850  -->  00:02:28,550
through with the R norm vector, so we

59

00:02:28,550  -->  00:02:31,250
want I to go through all of these

60

00:02:31,250  -->  00:02:33,530
numbers that we've created here and bear

61

00:02:33,530  -->  00:02:35,840
in mind that every time we re-run this

62

00:02:35,840  -->  00:02:38,300
script it will be a different hundred

63

00:02:38,300  -->  00:02:40,490
numbers, so when I to go through all of

64

00:02:40,490  -->  00:02:42,440
these numbers and then we'll do

65

00:02:42,440  -->  00:02:44,300
something we find that, so hopefully that

66

00:02:44,300  -->  00:02:45,680
makes sense so far.

67

00:02:45,680  -->  00:02:48,830
Let's start typing up in the body of

68

00:02:48,830  -->  00:02:51,260
this for loop so here we're going to say

69

00:02:51,260  -->  00:02:54,770
if right we want to check does I fall

70

00:02:54,770  -->  00:02:57,200
between minus 1 and 1 so we're going to

71

00:02:57,200  -->  00:02:59,300
type this up and I'll explain it, so I is

72

00:02:59,300  -->  00:03:03,470
greater than minus 1 and I is less than

73

00:03:03,470  -->  00:03:06,830
one right and then we'll have the body

74

00:03:06,830  -->  00:03:10,640
of our if statement. Now the very

75

00:03:10,640  -->  00:03:12,020
interesting thing here is that

76

00:03:12,020  -->  00:03:14,600
especially for those of you who come

77

00:03:14,600  -->  00:03:16,610
from a programming background who

78

00:03:16,610  -->  00:03:19,070
programmed even at least once in any

79

00:03:19,070  -->  00:03:20,870
other programming language what you'll

80

00:03:20,870  -->  00:03:23,630
notice is that here we're actually using

81

00:03:23,630  -->  00:03:27,050
the I letter itself or rather you've been

82

00:03:27,050  -->  00:03:29,240
using the I letters and index. So in

83

00:03:29,240  -->  00:03:31,459
another programming language you would

84

00:03:31,459  -->  00:03:32,990
hypothetically write something like this

85

00:03:32,990  -->  00:03:38,690
A, I is greater than one and A, I is a

86

00:03:38,690  -->  00:03:40,520
less than greater than minus 1 is less

87

00:03:40,520  -->  00:03:42,770
than one and that's if you're cycling is

88

00:03:42,770  -->  00:03:45,230
you using I as an index to go through an

89

00:03:45,230  -->  00:03:48,140
area and let's say a was this like all

90

00:03:48,140  -->  00:03:49,790
this of course is completely incorrect

91

00:03:49,790  -->  00:03:51,709
but hypothetically if this was your array

92

00:03:51,709  -->  00:03:53,900
you would be running through it but what

93

00:03:53,900  -->  00:03:56,480
we're doing here is very different.

94

00:03:56,480  -->  00:03:58,520
We even though we're creating a loop I

95

00:03:58,520  -->  00:04:01,550
is not our index. Even though it has it's

96

00:04:01,550  -->  00:04:03,380
the letter I what what it's doing this

97

00:04:03,380  -->  00:04:06,080
variable I is it's actually taking the

98

00:04:06,080  -->  00:04:09,320
values of these normal variables and one

99

00:04:09,320  -->  00:04:10,850
normally distributed random variable

100

00:04:10,850  -->  00:04:13,010
that we generating. I is taking them one by

101

00:04:13,010  -->  00:04:15,140
one so in the first iteration I will be

102

00:04:15,140  -->  00:04:16,250
equal to this.

103

00:04:16,250  -->  00:04:17,959
I won't be equal to 1. It won't be equal

104

00:04:17,959  -->  00:04:20,419
to 2 3 4 5 it's not an index. It will be

105

00:04:20,419  -->  00:04:22,910
actually taking the actual value so I

106

00:04:22,910  -->  00:04:25,560
will be equal to 0.75 in the first iteration,

107

00:04:25,560  -->  00:04:27,360
in the second iteration I will be

108

00:04:27,360  -->  00:04:30,570
equal to minus 1.26. It won't be equal to 1.877

109

00:04:30,570  -->  00:04:33,419
and so on. So every single

110

00:04:33,419  -->  00:04:36,540
iteration I will be assuming one of

111

00:04:36,540  -->  00:04:39,090
these values that we have generate. So

112

00:04:39,090  -->  00:04:41,310
the next consecutive value and so that's

113

00:04:41,310  -->  00:04:43,620
why we're actually operating with y. We want

114

00:04:43,620  -->  00:04:45,660
to check if the value itself is greater

115

00:04:45,660  -->  00:04:47,880
than minus one or less than one. If it makes

116

00:04:47,880  -->  00:04:49,710
things easier for you you might want

117

00:04:49,710  -->  00:04:51,240
while you're learning this and getting

118

00:04:51,240  -->  00:04:52,770
used to the second because it took me

119

00:04:52,770  -->  00:04:55,530
personally took me quite a while to get

120

00:04:55,530  -->  00:04:57,210
used to this like first I wrap my

121

00:04:57,210  -->  00:04:59,580
head around this was going on was I not

122

00:04:59,580  -->  00:05:01,410
an index but then to get used to it. So

123

00:05:01,410  -->  00:05:03,780
you might want to change the letter I to

124

00:05:03,780  -->  00:05:07,800
say X or something that so that way you

125

00:05:07,800  -->  00:05:10,710
won't be tempted to think of I as an

126

00:05:10,710  -->  00:05:12,479
index but we'll just keep it as I for

127

00:05:12,479  -->  00:05:14,400
now just for consistency consistency

128

00:05:14,400  -->  00:05:17,340
purposes and what do we want to do now?

129

00:05:17,340  -->  00:05:18,900
Now we found out

130

00:05:18,900  -->  00:05:21,810
yes if this condition is true I is

131

00:05:21,810  -->  00:05:24,389
indeed between minus 1 and 1.

132

00:05:24,389  -->  00:05:27,060
What do we want to do inside this if

133

00:05:27,060  -->  00:05:30,240
statement? What do we want to tell R to

134

00:05:30,240  -->  00:05:32,220
do well? We're what are we doing we're

135

00:05:32,220  -->  00:05:34,979
counting the number of these, the

136

00:05:34,979  -->  00:05:37,860
quantity help these numbers that full

137

00:05:37,860  -->  00:05:40,260
between minus 1 and 1 right? Went to know

138

00:05:40,260  -->  00:05:42,720
how many of them are there so this one

139

00:05:42,720  -->  00:05:44,310
would fall in there this one wouldn't

140

00:05:44,310  -->  00:05:46,200
this one wouldn't. This one wouldn't fall in

141

00:05:46,200  -->  00:05:46,590
there.

142

00:05:46,590  -->  00:05:48,090
This order for this so we want to count

143

00:05:48,090  -->  00:05:49,590
them. How do we count them? Well we already

144

00:05:49,590  -->  00:05:51,660
done an exercise like this before, we

145

00:05:51,660  -->  00:05:53,160
need a counter variable so we need a

146

00:05:53,160  -->  00:05:54,960
counter variable that starts with zero

147

00:05:54,960  -->  00:05:58,830
before we even launched this loop but

148

00:05:58,830  -->  00:06:00,720
then every time we find one of these

149

00:06:00,720  -->  00:06:02,430
variables that we are interested in we

150

00:06:02,430  -->  00:06:04,169
got increase the counter variable by 1

151

00:06:04,169  -->  00:06:06,570
right. So we're going to say counter is

152

00:06:06,570  -->  00:06:08,700
whatever counter was before in the

153

00:06:08,700  -->  00:06:11,490
previous iteration plus 1, so in the

154

00:06:11,490  -->  00:06:13,169
first iteration as soon as we find

155

00:06:13,169  -->  00:06:14,729
they're not in iteration as soon as we

156

00:06:14,729  -->  00:06:17,039
find one of these variables counter will

157

00:06:17,039  -->  00:06:19,200
be increased from 0, it will be 0 plus 1,

158

00:06:19,200  -->  00:06:21,660
will become 1 then the next iteration or

159

00:06:21,660  -->  00:06:23,610
the next time we find another one of

160

00:06:23,610  -->  00:06:25,560
these variables, so here counter will be

161

00:06:25,560  -->  00:06:28,200
immediately increased from 0 to 1. Here

162

00:06:28,200  -->  00:06:30,419
counter nothing will happen. This this

163

00:06:30,419  -->  00:06:33,240
part of the for loop or the condition

164

00:06:33,240  -->  00:06:35,640
won't be true. So the body of the if

165

00:06:35,640  -->  00:06:37,950
statement will be executed. So the

166

00:06:37,950  -->  00:06:38,920
counter won't

167

00:06:38,920  -->  00:06:40,420
change on this iteration, on this

168

00:06:40,420  -->  00:06:42,100
iteration. The counter won't change again

169

00:06:42,100  -->  00:06:45,280
but on this iteration the condition will

170

00:06:45,280  -->  00:06:47,440
be correct, will be true so the body

171

00:06:47,440  -->  00:06:49,060
will be executed and the counter will

172

00:06:49,060  -->  00:06:51,730
change from counter was one and now it

173

00:06:51,730  -->  00:06:54,820
will become 1 plus 1 will become 2 and

174

00:06:54,820  -->  00:06:57,370
it will be stored here in the memory and

175

00:06:57,370  -->  00:07:00,430
then we'll move the studio 
R will move

176

00:07:00,430  -->  00:07:02,140
on to the next variable and this time

177

00:07:02,140  -->  00:07:04,540
the condition is true against. So counter will

178

00:07:04,540  -->  00:07:06,880
become 2 plus 1 equals 3, will be

179

00:07:06,880  -->  00:07:08,950
stored in memory and then R will move

180

00:07:08,950  -->  00:07:10,630
on to the next iteration. This time

181

00:07:10,630  -->  00:07:12,490
conditions not true so counter will

182

00:07:12,490  -->  00:07:14,770
increase and so on. So every time with on

183

00:07:14,770  -->  00:07:16,390
it find a variable the counter will

184

00:07:16,390  -->  00:07:19,030
increase by 1, so every time we find a

185

00:07:19,030  -->  00:07:21,520
number that we are interested in every

186

00:07:21,520  -->  00:07:24,040
every time this condition is met

187

00:07:24,040  -->  00:07:26,920
ok so that's the main part of our loop.

188

00:07:26,920  -->  00:07:28,480
So what do we want

189

00:07:28,480  -->  00:07:30,310
next? We want to print out counter right.

190

00:07:30,310  -->  00:07:32,710
We want to find out on many of them were

191

00:07:32,710  -->  00:07:36,040
there. So this is like the start we've

192

00:07:36,040  -->  00:07:39,190
created the bulk of our program now

193

00:07:39,190  -->  00:07:41,680
already so how about we just run it and

194

00:07:41,680  -->  00:07:42,490
see how it works.

195

00:07:42,490  -->  00:07:45,040
Ok so let's select all that and come and

196

00:07:45,040  -->  00:07:48,190
run right so here we have 68. Let's run

197

00:07:48,190  -->  00:07:54,130
it again 68, 70, 63, 71, 65 so it's telling us

198

00:07:54,130  -->  00:07:56,200
how many of the numbers that we've

199

00:07:56,200  -->  00:07:57,520
generated out of the hundred numbers

200

00:07:57,520  -->  00:07:59,710
actually fall between minus 1 and 1

201

00:07:59,710  -->  00:08:01,750
right. So we can keep running that then

202

00:08:01,750  -->  00:08:04,360
we every time we're going to see and a

203

00:08:04,360  -->  00:08:07,090
new set of random normally distributed

204

00:08:07,090  -->  00:08:09,700
variables and this number will change.

205

00:08:09,700  -->  00:08:14,440
Ok so what does the exercise ask us for?

206

00:08:14,440  -->  00:08:16,870
Well the exercise asks us to compare

207

00:08:16,870  -->  00:08:19,300
that percentage the percentage of these

208

00:08:19,300  -->  00:08:24,040
numbers to 60 wasn't 68.2 percent right. So

209

00:08:24,040  -->  00:08:25,960
let's just put a comment here so we

210

00:08:25,960  -->  00:08:31,750
remember compare to 68.2 percent right?

211

00:08:31,750  -->  00:08:34,960
So here we've got a number, we want a

212

00:08:34,960  -->  00:08:36,910
percentage so in order to get a percentage we need to

213

00:08:36,910  -->  00:08:39,760
divide by a hundred right. So that will be the

214

00:08:39,760  -->  00:08:41,620
ratio right, so in that case we'll be

215

00:08:41,620  -->  00:08:43,990
comparing to 68.2 points or we'll just leave

216

00:08:43,990  -->  00:08:48,880
that or 0.682 right. So we need to

217

00:08:48,880  -->  00:08:51,250
compare set so let's run it again and

218

00:08:51,250  -->  00:08:52,540
now we have a ratio

219

00:08:52,540  -->  00:08:54,759
alright so as you can see it's kind of

220

00:08:54,759  -->  00:08:57,910
there we go there's a 66, 0.68 but

221

00:08:57,910  -->  00:08:59,440
because the sample is quite small

222

00:08:59,440  -->  00:09:02,019
sometimes you'll be off to the left,

223

00:09:02,019  -->  00:09:03,370
sometimes you'll be off to the right

224

00:09:03,370  -->  00:09:05,170
from what you're expecting and that's

225

00:09:05,170  -->  00:09:07,149
exactly what the law of large numbers

226

00:09:07,149  -->  00:09:09,009
tell the samples quite small and so

227

00:09:09,009  -->  00:09:12,190
there's a higher likelihood that this

228

00:09:12,190  -->  00:09:14,230
number will be different but as we

229

00:09:14,230  -->  00:09:15,490
increase the sample size

230

00:09:15,490  -->  00:09:17,920
this should change. So how about now we

231

00:09:17,920  -->  00:09:20,680
instead of a hundred, we put in a thousand so

232

00:09:20,680  -->  00:09:22,690
it's changed both of these and

233

00:09:22,690  -->  00:09:24,519
important to remember to change both of

234

00:09:24,519  -->  00:09:25,899
them because there's a total of a

235

00:09:25,899  -->  00:09:28,930
thousand number so we divide by thousand right. So now

236

00:09:28,930  -->  00:09:31,569
let's rerun that, so as you can see now

237

00:09:31,569  -->  00:09:35,470
we are getting closer again to the 6.0682

238

00:09:35,470  -->  00:09:37,240
there we go

239

00:09:37,240  -->  00:09:41,019
and finally what we want is we want a

240

00:09:41,019  -->  00:09:44,110
variable to control this script right. So

241

00:09:44,110  -->  00:09:45,759
that we don't have to change it twice

242

00:09:45,759  -->  00:09:48,100
every time we want a variable N at the

243

00:09:48,100  -->  00:09:50,259
top to control this whole script.

244

00:09:50,259  -->  00:09:52,089
So in order to do that we need just a

245

00:09:52,089  -->  00:09:54,550
variable N and then we'll give it a

246

00:09:54,550  -->  00:09:56,649
value so let's start with a thousand and

247

00:09:56,649  -->  00:09:58,870
then we'll replace N here, replace N

248

00:09:58,870  -->  00:10:00,819
here right. So now we don't have to

249

00:10:00,819  -->  00:10:02,740
change it every time twice, we only have

250

00:10:02,740  -->  00:10:04,449
to change it up at the top and it's

251

00:10:04,449  -->  00:10:07,060
easier like that so people somebody was

252

00:10:07,060  -->  00:10:08,709
using a script will know that this is

253

00:10:08,709  -->  00:10:10,630
the input you can even say here

254

00:10:10,630  -->  00:10:12,550
hashtag input and you can see how

255

00:10:12,550  -->  00:10:15,550
comments can be useful for people who

256

00:10:15,550  -->  00:10:17,800
are running your script who are not you

257

00:10:17,800  -->  00:10:19,569
and we didn't create the script but who

258

00:10:19,569  -->  00:10:20,649
are running your script. So they don't

259

00:10:20,649  -->  00:10:22,089
have to worry about all of this right,

260

00:10:22,089  -->  00:10:23,889
they just have to worry about this bit.

261

00:10:23,889  -->  00:10:26,949
Ok so there's our script for thousand

262

00:10:26,949  -->  00:10:29,889
variables or numbers now let's change it

263

00:10:29,889  -->  00:10:32,350
to 10,000 and see that if that improves

264

00:10:32,350  -->  00:10:35,680
the how close we get to the expected

265

00:10:35,680  -->  00:10:38,769
value. As you can see now is 0.68 pretty

266

00:10:38,769  -->  00:10:40,750
much all the time right?

267

00:10:40,750  -->  00:10:44,680
If there's no more 0.71, no more 0.7 or

268

00:10:44,680  -->  00:10:47,709
a 64 and so-and-so and now if I add a

269

00:10:47,709  -->  00:10:49,930
couple more zeros. So what does that give

270

00:10:49,930  -->  00:10:51,759
us? A hundred thousand, no it's a

271

00:10:51,759  -->  00:10:53,560
million already so we're generating a

272

00:10:53,560  -->  00:10:55,480
million random normally distributed

273

00:10:55,480  -->  00:10:57,550
variables right so you can see the

274

00:10:57,550  -->  00:10:58,930
computer was thinking there for a second

275

00:10:58,930  -->  00:11:02,230
and you can see now we are very close right.

276

00:11:02,230  -->  00:11:06,400
It's always 0.68, 68 to

277

00:11:06,400  -->  00:11:09,670
something 683 so we're getting closer

278

00:11:09,670  -->  00:11:11,560
and closer so if I add another zero the

279

00:11:11,560  -->  00:11:14,020
computer will think for a bit longer.

280

00:11:14,020  -->  00:11:17,740
My poor little handbook. Ok so you can

281

00:11:17,740  -->  00:11:19,060
see it's taking some time because it

282

00:11:19,060  -->  00:11:21,670
needs time to generate these numbers but

283

00:11:21,670  -->  00:11:23,290
more importantly needs time to run

284

00:11:23,290  -->  00:11:25,450
through all of them and there we go so

285

00:11:25,450  -->  00:11:28,150
6.82. So as you can see we're getting

286

00:11:28,150  -->  00:11:30,400
closer and closer, the more we have in

287

00:11:30,400  -->  00:11:31,720
our sample the closer we get

288

00:11:31,720  -->  00:11:33,310
that's exactly what the law of large

289

00:11:33,310  -->  00:11:35,920
numbers tells. So there we go we have

290

00:11:35,920  -->  00:11:38,800
confirmed that the law of large numbers

291

00:11:38,800  -->  00:11:41,950
hold in this exercise we have actually

292

00:11:41,950  -->  00:11:45,280
tested it and demonstrated that it works.

293

00:11:45,280  -->  00:11:48,130
Hope you found this exercise useful hope

294

00:11:48,130  -->  00:11:50,500
you enjoyed creating this code

295

00:11:50,500  -->  00:11:52,660
together with me and I look forward to

296

00:11:52,660  -->  00:11:54,370
seeing you throughout this course, until

297

00:11:54,370  -->  00:12:03,610
next time, happy coding.
