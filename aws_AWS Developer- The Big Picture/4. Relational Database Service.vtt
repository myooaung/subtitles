WEBVTT
1
00:00:00.940 --> 00:00:04.100
Relational Database Service, which we'll call RDS,

2
00:00:04.100 --> 00:00:08.960
is a collection of AWS services for managed relational databases.

3
00:00:08.960 --> 00:00:14.540
We call the databases managed because AWS takes care of all the backups,

4
00:00:14.540 --> 00:00:18.340
software updates, and infrastructure for the database.

5
00:00:18.340 --> 00:00:22.840
If you compare this to installing your own database on an EC2 instance,

6
00:00:22.840 --> 00:00:26.990
you would then be responsible for figuring out backups and redundancy,

7
00:00:26.990 --> 00:00:30.510
as well as updating the software with security patches.

8
00:00:30.510 --> 00:00:32.350
With a managed database,

9
00:00:32.350 --> 00:00:36.500
there are even more conveniences like configuration options in the web

10
00:00:36.500 --> 00:00:41.340
console and the ability to simply create and read replicas.

11
00:00:41.340 --> 00:00:45.660
Currently, Amazon offers MySQL, PostgreSQL,

12
00:00:45.660 --> 00:00:52.360
SQL Server, MariaDB, Oracle, and Amazon's own Aurora Database through RDS.

13
00:00:52.360 --> 00:00:55.140
Each carries a different price and different

14
00:00:55.140 --> 00:00:57.820
configuration and connection options.

15
00:00:57.820 --> 00:00:59.380
When picking a database type,

16
00:00:59.380 --> 00:01:03.610
you'll also pick the type of EC2 instance that it will be running on.

17
00:01:03.610 --> 00:01:04.410
With this,

18
00:01:04.410 --> 00:01:07.650
you can decide what type of performance your database will need

19
00:01:07.650 --> 00:01:10.050
in response to the load it will be under.

20
00:01:10.050 --> 00:01:14.020
Honestly, if you want to use a relational database in AWS,

21
00:01:14.020 --> 00:01:17.670
I highly recommend finding an option in RDS.

22
00:01:17.670 --> 00:01:22.540
You may already be using a relational database that isn't available through RDS,

23
00:01:22.540 --> 00:01:24.430
but if you're moving to the cloud,

24
00:01:24.430 --> 00:01:27.390
then you should really consider switching if possible.

25
00:01:27.390 --> 00:01:31.670
Having Amazon not only manage, but guarantee the stability of your database,

26
00:01:31.670 --> 00:01:34.400
often crucial parts of any infrastructure,

27
00:01:34.400 --> 00:01:36.460
is such a huge benefit.

28
00:01:36.460 --> 00:01:38.680
Because AWS is managing the database,

29
00:01:38.680 --> 00:01:43.130
you can quickly do things like take snapshots of your data or increase the

30
00:01:43.130 --> 00:01:46.730
size of the EC2 instance being used to back the database.

31
00:01:46.730 --> 00:01:49.640
Doing either one of these actions with your own database

32
00:01:49.640 --> 00:01:53.640
would be much more difficult and dangerous.

33
00:01:53.640 --> 00:01:57.180
Security is often one of the most important aspects of any database.

34
00:01:57.180 --> 00:02:00.440
We've all heard stories about enterprise companies with

35
00:02:00.440 --> 00:02:03.940
databases completely open to the outside world.

36
00:02:03.940 --> 00:02:05.090
Don't do that.

37
00:02:05.090 --> 00:02:09.710
With RDS, access is controlled via those trusty security groups.

38
00:02:09.710 --> 00:02:14.080
By configuring the security group for your instantiated RDS database,

39
00:02:14.080 --> 00:02:17.370
you can allow your applications access to the database,

40
00:02:17.370 --> 00:02:20.020
but block any other connections.

41
00:02:20.020 --> 00:02:23.970
You can even configure ways for BI tools to connect so

42
00:02:23.970 --> 00:02:26.540
that users can query those databases.

43
00:02:26.540 --> 00:02:30.120
RDS pricing depends on the type of database you're using,

44
00:02:30.120 --> 00:02:32.640
as well as the region it's created in.

45
00:02:32.640 --> 00:02:35.260
Since the base resource that these databases are

46
00:02:35.260 --> 00:02:38.570
being installed on are EC2 instances,

47
00:02:38.570 --> 00:02:41.700
the price is higher if you're using a larger instance type.

48
00:02:41.700 --> 00:02:46.620
Let's look at an example of a MySQL database running on a standard extra

49
00:02:46.620 --> 00:02:52.050
large instance. With 4 CPUs, 16 GB of memory, and high network

50
00:02:52.050 --> 00:02:55.710
performance, you'll be looking at 35 cents per hour.

51
00:02:55.710 --> 00:02:58.540
That's around $8.50 a day.

52
00:02:58.540 --> 00:02:59.820
That's a little steep.

53
00:02:59.820 --> 00:03:03.130
Now this extra large instance is going to be pretty awesome.

54
00:03:03.130 --> 00:03:06.520
You might not need something that production‑ready, and there are

55
00:03:06.520 --> 00:03:10.060
definitely instances that can get down to a cent an hour.

56
00:03:10.060 --> 00:03:14.640
Also, since MySQL is open source and there's no license needed,

57
00:03:14.640 --> 00:03:18.740
you can expect that other database types like SQL Server or Oracle

58
00:03:18.740 --> 00:03:23.150
cost a lot more per hour. If you're interested in using something in

59
00:03:23.150 --> 00:03:33.000
AWS that isn't a relational database, like a NoSQL or document‑based database, you'll be happy to know that AWS also provides other options.

