WEBVTT
1
00:00:00.940 --> 00:00:05.030
Lambda is one of AWS's most game‑changing offerings, and

2
00:00:05.030 --> 00:00:07.940
it's taken the cloud industry by storm.

3
00:00:07.940 --> 00:00:11.170
Nearly every cloud provider has introduced their own

4
00:00:11.170 --> 00:00:14.380
similar offering after the release of Lambda.

5
00:00:14.380 --> 00:00:16.410
So what exactly is Lambda?

6
00:00:16.410 --> 00:00:20.490
Lambda provides function code execution as a service.

7
00:00:20.490 --> 00:00:25.340
Sometimes this is called Function as a Service or serverless.

8
00:00:25.340 --> 00:00:28.580
What it really boils down to is that you can give some code to

9
00:00:28.580 --> 00:00:32.280
Lambda, and it will execute it with almost no configuration

10
00:00:32.280 --> 00:00:36.540
required. Although you can provide configuration for any memory

11
00:00:36.540 --> 00:00:38.380
requirements when running your code,

12
00:00:38.380 --> 00:00:42.640
you don't have to manage or configure the servers running that code.

13
00:00:42.640 --> 00:00:47.520
Lambda will automatically run your code on as many servers as required,

14
00:00:47.520 --> 00:00:49.740
scaling up and down as needed.

15
00:00:49.740 --> 00:00:54.370
But the best part about all of this is that you only pay for what you use.

16
00:00:54.370 --> 00:00:58.520
Specifically, you're only paying when your code is running.

17
00:00:58.520 --> 00:01:03.420
Lambda bills you by the number of requests and per 100

18
00:01:03.420 --> 00:01:06.240
ms that your code was executing.

19
00:01:06.240 --> 00:01:09.370
This means you no longer pay for idling servers,

20
00:01:09.370 --> 00:01:14.340
idling load balancers, or any other infrastructure that isn't being used.

21
00:01:14.340 --> 00:01:17.980
Lambda could provide your application or company with significant

22
00:01:17.980 --> 00:01:22.240
cost savings if you have infrequent activity.

23
00:01:22.240 --> 00:01:25.150
The fundamental structure in Lambda is the function.

24
00:01:25.150 --> 00:01:30.140
A function is a bundle of code with a specified execution entry point.

25
00:01:30.140 --> 00:01:34.310
Each Lambda function is configured with a platform, such as Node,

26
00:01:34.310 --> 00:01:41.140
Python, Go, or other languages and invocation targets, such as API Gateway,

27
00:01:41.140 --> 00:01:44.300
CloudWatch, or CloudFront. There are some additional

28
00:01:44.300 --> 00:01:47.820
configuration options, such as the execution timeout,

29
00:01:47.820 --> 00:01:52.320
the memory requirements, and the IAM role that Lambda should execute

30
00:01:52.320 --> 00:01:57.630
with. So let's take a look at a quick pricing example for Lambda. The

31
00:01:57.630 --> 00:02:03.440
AWS free tier for Lambda gives you 1 million requests per month for free

32
00:02:03.440 --> 00:02:09.840
and 400,000 GB seconds per month for free. Gigabyte seconds just means

33
00:02:09.840 --> 00:02:14.240
seconds per gigabyte and refers to the memory requirements for your

34
00:02:14.240 --> 00:02:15.470
Lambda function.

35
00:02:15.470 --> 00:02:18.660
More memory required means less seconds for free

36
00:02:18.660 --> 00:02:20.990
each month. After the free tier,

37
00:02:20.990 --> 00:02:26.060
here's the pricing, 20 cents per million requests and around

38
00:02:26.060 --> 00:02:32.540
18 cents per 24 hours of 128MB execution.

39
00:02:32.540 --> 00:02:34.260
So with those numbers,

40
00:02:34.260 --> 00:02:39.330
let's say you have a function that you run about 4 million times a day, and it

41
00:02:39.330 --> 00:02:45.830
takes 2 seconds on average to execute. Your bill per day would be 80 cents for

42
00:02:45.830 --> 00:02:52.240
the requests and $16.64 for the execution time.

43
00:02:52.240 --> 00:02:55.700
This pricing includes all the load balancing, scaling, and

44
00:02:55.700 --> 00:02:58.820
high availability you expect from AWS.

45
00:02:58.820 --> 00:03:00.100
Honestly,

46
00:03:00.100 --> 00:03:03.450
I don't think this is all that expensive compared to what you'd have to

47
00:03:03.450 --> 00:03:07.840
pay to stand up in AWS to support that kind of load.

48
00:03:07.840 --> 00:03:11.840
Although Lambda is great for high‑availability tasks,

49
00:03:11.840 --> 00:03:16.770
I've also found it really useful for very simple, irregular tasks like

50
00:03:16.770 --> 00:03:21.020
nightly ETL kickoffs and notification‑type functions.

51
00:03:21.020 --> 00:03:30.000
It's so much easier to create a Lambda function than it is to stand up an EC2 instance and all the stuff that entails.

