1
00:00:00,940 --> 00:00:05,210
DynamoDB is a managed NoSQL database service from AWS that

2
00:00:05,210 --> 00:00:09,640
supports both document and key value store models.

3
00:00:09,640 --> 00:00:13,440
Amazon touts both its scalability, as well as its flexibility.

4
00:00:13,440 --> 00:00:17,310
And the way they developed DynamoDB makes it obvious that these

5
00:00:17,310 --> 00:00:20,340
are major benefits to choosing this service.

6
00:00:20,340 --> 00:00:23,830
Dynamo's managed service is quite different from RDS,

7
00:00:23,830 --> 00:00:25,580
which we covered in the last module.

8
00:00:25,580 --> 00:00:28,230
When storing data in DynamoDB,

9
00:00:28,230 --> 00:00:31,450
you don't have to worry about how large your Elastic Block

10
00:00:31,450 --> 00:00:35,750
Storage volume is or which EC2 instance type your database is

11
00:00:35,750 --> 00:00:38,070
running on like you would with RDS.

12
00:00:38,070 --> 00:00:43,270
With DynamoDB, you just pay for how much you store and how often it's queried,

13
00:00:43,270 --> 00:00:48,270
and everything else is taken care of by Amazon. The core structure in

14
00:00:48,270 --> 00:00:51,680
DynamoDB is a table. Since the concept of a database,

15
00:00:51,680 --> 00:00:55,620
which is typical in most other database types, has been abstracted

16
00:00:55,620 --> 00:00:59,340
away, the table is your root point of data storage.

17
00:00:59,340 --> 00:01:03,940
Each table needs a primary key for partitioning and indexing the data

18
00:01:03,940 --> 00:01:07,840
and can optionally have secondary indexes as well.

19
00:01:07,840 --> 00:01:10,930
Probably the most important aspect of a table is its

20
00:01:10,930 --> 00:01:13,240
provisioned throughput capacity.

21
00:01:13,240 --> 00:01:16,130
This is the amount of reads or writes per second to

22
00:01:16,130 --> 00:01:20,370
provision your table with. Each read unit is limited to 4

23
00:01:20,370 --> 00:01:23,940
KB and write unit limited to 1 KB.

24
00:01:23,940 --> 00:01:29,740
Any requests above those sizes would consume extra read/write units.

25
00:01:29,740 --> 00:01:34,250
Since DynamoDB takes care of provisioning resources for you, this is how you

26
00:01:34,250 --> 00:01:40,030
rightâ€‘size your database for your expected usage. Pricing for DynamoDB tables

27
00:01:40,030 --> 00:01:44,560
depends on the provisioned throughput capacity and the amount of data stored.

28
00:01:44,560 --> 00:01:47,640
As usual, pricing is different per region.

29
00:01:47,640 --> 00:01:52,210
So we'll look at just the Oregon region for an example. For data stored,

30
00:01:52,210 --> 00:01:57,200
the first 25 GB are free, and it's entirely likely that you may not

31
00:01:57,200 --> 00:02:00,120
use more than that. If you do use more, however,

32
00:02:00,120 --> 00:02:04,040
it's only 25 cents per gigabyte per month.

33
00:02:04,040 --> 00:02:09,010
Provisioned throughput capacity is where most of the cost for DynamoDB lies.

34
00:02:09,010 --> 00:02:14,940
Every 10 write capacity units will cost .65 cents per hour.

35
00:02:14,940 --> 00:02:21,720
Read capacity is cheaper at .65 cents per hour for every 50 read capacity units.

36
00:02:21,720 --> 00:02:25,780
This means if you provision a DynamoDB table with 10 write

37
00:02:25,780 --> 00:02:29,260
capacity units and 50 read capacity units,

38
00:02:29,260 --> 00:02:32,540
the cost will be 1.3 cents per hour.

39
00:02:32,540 --> 00:02:35,340
This turns out to be around $10 per month,

40
00:02:35,340 --> 00:02:39,270
which is fairly in line with what a smaller EC2 instance will run you

41
00:02:39,270 --> 00:02:42,980
for the same time period. With DynamoDB, however,

42
00:02:42,980 --> 00:02:50,000
you're guaranteed extremely high performance with your queries, no matter the read/write units that have been provisioned.

