1
00:00:00,840 --> 00:00:06,870
Hi within this lecture we're going to learn a new concept called tuples.

2
00:00:06,870 --> 00:00:11,790
So tuples provides us tools to store collection of data.

3
00:00:11,910 --> 00:00:20,090
So it's kind of airy but it has a different structure and so far we haven't been using tuples.

4
00:00:20,400 --> 00:00:22,790
But this is an advance with section.

5
00:00:22,800 --> 00:00:25,980
So you have to know how tuples work.

6
00:00:25,980 --> 00:00:32,970
So if you work with them in the future or if you encounter one of the tuple returning functions then

7
00:00:32,970 --> 00:00:34,970
you will know what to do.

8
00:00:34,980 --> 00:00:43,860
Let me comment out this prince so that we can continue within the same mean that swift and we will have

9
00:00:43,860 --> 00:00:46,510
our own tuple lecture.

10
00:00:46,620 --> 00:00:52,350
So let me show you how to create a tuple and how to store data in it.

11
00:00:52,350 --> 00:00:54,180
So it's very simple actually.

12
00:00:54,330 --> 00:01:00,960
You can just say my tuple and you open one parentheses and it's a regular parentheses it's not an array

13
00:01:00,960 --> 00:01:08,400
parentheses or it's not an dictionary parentheses it's a regular parentheses and you can just write

14
00:01:08,430 --> 00:01:16,700
whatever value you want inside of it like an integer or a string or a boolean or even an array.

15
00:01:17,160 --> 00:01:25,290
So it goes like this open the parentheses and say 1 3 for example you put comma to differentiate between

16
00:01:25,410 --> 00:01:26,450
these values.

17
00:01:26,550 --> 00:01:27,180
OK.

18
00:01:27,270 --> 00:01:31,590
So this is the first element and this is the second element.

19
00:01:31,950 --> 00:01:34,620
And how does it differ from the array.

20
00:01:35,280 --> 00:01:44,610
So when you create a tuple you may want to get one of these elements by just going to another line and

21
00:01:44,610 --> 00:01:50,900
say My tuple and as you can see it's an Integer Integer tuple right now because we defined it.

22
00:01:50,900 --> 00:01:58,880
So if you say dot you can just choose the zero in order to get the first element.

23
00:01:58,890 --> 00:01:59,280
OK.

24
00:01:59,280 --> 00:02:06,540
So let me print this out and you will see we will get the one integer right like this.

25
00:02:06,660 --> 00:02:11,450
If you say my tuple that form of course you will get treat.

26
00:02:11,490 --> 00:02:18,540
So this is how tuples work if you want to save a couple of cardinals for example or if you want to save

27
00:02:18,870 --> 00:02:22,740
another couple then tuples might be for you.

28
00:02:22,800 --> 00:02:27,470
Of course we can do it like this if you want to have a triple number.

29
00:02:27,690 --> 00:02:33,960
You can just define it and you can just call 0 1 or 2.

30
00:02:33,960 --> 00:02:38,390
So for example if I call too it will just give me five.

31
00:02:38,400 --> 00:02:42,630
So this has the same index logic of the array.

32
00:02:42,720 --> 00:02:44,480
So can I do that.

33
00:02:44,490 --> 00:02:47,090
Can I change the to pull value.

34
00:02:47,220 --> 00:02:57,630
So let me try to print out my two pull dots too and you will see we cannot do that in order to do this.

35
00:02:57,720 --> 00:03:03,870
We have to define my tuple as a variable rather than constant.

36
00:03:03,900 --> 00:03:07,170
So this is one of the difference between tuples and arrays.

37
00:03:07,470 --> 00:03:13,500
So you can just create a variable tuple but if you don't want to change the elements later own you can

38
00:03:13,500 --> 00:03:16,150
create it as a constant.

39
00:03:16,200 --> 00:03:20,670
So let's see some other examples of tuples to understand them better.

40
00:03:20,670 --> 00:03:23,160
For example let me created to poultry.

41
00:03:23,340 --> 00:03:24,240
OK.

42
00:03:24,480 --> 00:03:34,560
So it will have a string and then no inside of it like let my tuple tree will be my name like a tail

43
00:03:35,040 --> 00:03:40,610
and we can have a number in inside of my tuple as well.

44
00:03:40,620 --> 00:03:46,800
And if you write my tuple tree you will see that this is a string to integer tuple.

45
00:03:46,830 --> 00:03:47,540
OK.

46
00:03:47,700 --> 00:03:50,400
Can I just have strings or integers.

47
00:03:50,430 --> 00:03:51,310
Of course not.

48
00:03:51,600 --> 00:03:54,610
I can create a tuple with an array.

49
00:03:54,630 --> 00:04:01,530
For example let me try to create it like I can come over here I say turn.

50
00:04:01,710 --> 00:04:11,670
But then I can open an array and I can send 10 20 30 for example in my tuple for how can I reach the

51
00:04:11,670 --> 00:04:12,750
number 20.

52
00:04:13,110 --> 00:04:17,880
So try to post the video and try to print it on your own.

53
00:04:17,880 --> 00:04:22,430
So it goes like this my tuple for OK.

54
00:04:22,620 --> 00:04:28,160
If you say dot and if you say one it will give you the array of integers.

55
00:04:28,180 --> 00:04:29,070
Yep this one.

56
00:04:29,850 --> 00:04:35,570
And if you open a parentheses and you an index here like zero it will give you 10.

57
00:04:35,940 --> 00:04:39,900
If you go to the index one it will give you to any.

58
00:04:39,910 --> 00:04:40,650
Right.

59
00:04:40,650 --> 00:04:44,330
So that's how you reached the number 20.

60
00:04:44,370 --> 00:04:49,980
So can I predefined the values that a tuple is going to get.

61
00:04:50,040 --> 00:04:51,240
Of course I can.

62
00:04:51,450 --> 00:04:56,940
Like I can't predefined a variable to be a string like this.

63
00:04:56,940 --> 00:04:57,230
Right.

64
00:04:57,240 --> 00:05:05,060
So we can say let my string is going to an optional strike and this will take only the value of a string

65
00:05:05,090 --> 00:05:06,860
not an integer.

66
00:05:06,860 --> 00:05:15,350
So I can do that for tuples so I can say let predefined tuple is going to be as drink two string tuple.

67
00:05:15,830 --> 00:05:24,710
OK so that I can just come over here and say predefined tuple that 0 is a 2 and predefined tuple that

68
00:05:24,710 --> 00:05:33,430
one is some for example and if I run this nothing will happen because I didn't even print it out.

69
00:05:33,440 --> 00:05:41,930
So let me say print predefined tuple and it will print out this string to string tuple as you can see.

70
00:05:41,960 --> 00:05:46,670
Now we have the LTL stamp in a tuple.

71
00:05:46,670 --> 00:05:51,400
So can I predefined the keys of the values.

72
00:05:51,410 --> 00:05:53,180
Yep I can do that as well.

73
00:05:53,180 --> 00:05:58,790
For example let me create a new tuple and in here I'm going to say a name.

74
00:05:58,820 --> 00:06:04,790
And this will be a James and the Metallica member boolean.

75
00:06:04,790 --> 00:06:05,140
Yep.

76
00:06:05,150 --> 00:06:08,480
This will be true for example.

77
00:06:08,480 --> 00:06:16,300
And now we stead of saying to pulled out one or two people that zero I can just say print nil tuple

78
00:06:16,550 --> 00:06:22,040
dot Metallica or print need to pull that name.

79
00:06:22,700 --> 00:06:30,170
So this is another difference between arrays and tuples I can just predefined these keys of the values

80
00:06:30,170 --> 00:06:32,510
inside of a tuple as well.

81
00:06:32,600 --> 00:06:34,370
So this is cool right.

82
00:06:34,370 --> 00:06:37,150
I can just come over here and say new tuple dots.

83
00:06:37,160 --> 00:06:39,800
Name new to pulled up Metallica.

84
00:06:39,800 --> 00:06:47,570
So this is how you work with tuples and in swift you won't come across tuples such often but in another

85
00:06:47,570 --> 00:06:52,590
programming languages like in python you will just see them a lot.

86
00:06:52,850 --> 00:07:00,290
And if you come across a library or a module that returns tuple then you know how to do it.

87
00:07:00,350 --> 00:07:02,800
You know how to work with them right now.

88
00:07:03,050 --> 00:07:10,540
And of course you can create your own tuples and you can effectively store a couple of data or a cheap

89
00:07:10,540 --> 00:07:16,420
Bill of data inside of a tuple so that you can reach them later on.

90
00:07:16,460 --> 00:07:22,760
So let's stop here and within the next lecture we're going to see a new concept called guards let's.
