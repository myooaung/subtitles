WEBVTT
1
00:00:00.320 --> 00:00:00.840
Hi.

2
00:00:01.210 --> 00:00:02.510
We didn't this lecture.

3
00:00:02.570 --> 00:00:06.930
We're beginning to see how we can pre-defined the very will types.

4
00:00:06.930 --> 00:00:16.200
OK so far we have been trying to create variables and Swift was trying to understand what kind of a

5
00:00:16.200 --> 00:00:18.420
variable was that.

6
00:00:18.530 --> 00:00:18.950
Right.

7
00:00:18.960 --> 00:00:21.460
Because we have said that.

8
00:00:21.620 --> 00:00:23.260
Let my number is.

9
00:00:23.400 --> 00:00:26.270
Now we're going for part two.

10
00:00:26.280 --> 00:00:33.570
OK so this was part 1 and now I'm going to go for part 2.

11
00:00:33.630 --> 00:00:41.130
I'm not trying to create another playground over here because we basically tried to continue the same

12
00:00:41.130 --> 00:00:42.360
subject.

13
00:00:42.630 --> 00:00:48.180
After that I'm going to create another playground for another topics.

14
00:00:48.180 --> 00:00:53.140
For example if I want to create a string like var my string.

15
00:00:53.370 --> 00:01:00.870
If I do something like this with a column I can say this is going to be a string with a capitalized

16
00:01:01.040 --> 00:01:01.820
s.

17
00:01:02.310 --> 00:01:03.420
So maybe.

18
00:01:03.480 --> 00:01:09.750
Right now you're thinking that you have talked about camel case and the snake case and they all start

19
00:01:09.750 --> 00:01:12.270
with lower case letters.

20
00:01:12.270 --> 00:01:16.740
Why are we going for upper case later in this case.

21
00:01:16.740 --> 00:01:19.190
So this is a class name.

22
00:01:19.440 --> 00:01:23.200
And right now we don't even know what the class is.

23
00:01:23.280 --> 00:01:32.610
But classes are very important aspects of object oriented programming languages like Swift like Java

24
00:01:32.700 --> 00:01:33.920
like Python.

25
00:01:34.050 --> 00:01:38.240
And we can call Swift an object oriented programming language.

26
00:01:38.280 --> 00:01:46.350
So this is a class name and we're referring to this string class and we are starting with a capitalized

27
00:01:46.470 --> 00:01:50.000
s rather than a lower case that's okay.

28
00:01:50.190 --> 00:01:59.300
So classes are the only way that we go for capitalized letters in the Swift.

29
00:01:59.310 --> 00:02:02.880
So you have to write this like this string.

30
00:02:03.750 --> 00:02:10.350
And you can just choose the strings and then later on you can do something like this.

31
00:02:10.380 --> 00:02:17.700
You can put the equals sign over here and you can just give the value of this variable over here.

32
00:02:17.700 --> 00:02:20.410
Can I do something like this like 50.

33
00:02:20.430 --> 00:02:26.220
No I cannot because it will give me an area and it will say that this is a string you cannot just a

34
00:02:26.220 --> 00:02:29.110
sine an integer type over here.

35
00:02:29.220 --> 00:02:29.840
Right.

36
00:02:29.880 --> 00:02:32.140
Because this is going to be a string.

37
00:02:32.370 --> 00:02:33.420
Can I do that.

38
00:02:33.420 --> 00:02:34.530
Of course I can.

39
00:02:34.530 --> 00:02:36.390
This is not a number.

40
00:02:36.390 --> 00:02:42.400
If I put quotation marks around this it it means that this is just a text.

41
00:02:42.480 --> 00:02:49.680
It's not an integer it's not a double it's not a number it's just a tax right now and Swift will not

42
00:02:49.680 --> 00:02:51.570
recognize this as a number.

43
00:02:51.570 --> 00:03:00.840
If I tried to multiply this by 80 no this won't even work for me it will say that you cannot apply this

44
00:03:01.080 --> 00:03:07.110
with different types you cannot multiply a string by an integer.

45
00:03:07.110 --> 00:03:09.630
So this is not going to work right.

46
00:03:09.660 --> 00:03:15.150
So this is a string and this won't work obviously.

47
00:03:15.180 --> 00:03:20.100
So you can just say something like quotation marks inside of it.

48
00:03:20.100 --> 00:03:26.780
You can write whatever you want and it doesn't matter if I do this var or lat as long as I predefined

49
00:03:26.790 --> 00:03:28.070
the value over here.

50
00:03:28.110 --> 00:03:30.630
It won't make any difference.

51
00:03:30.630 --> 00:03:33.080
So let me do a number here.

52
00:03:33.090 --> 00:03:38.440
So I'm going to call this another number and this will be an integer this time.

53
00:03:38.580 --> 00:03:47.400
And as you can see when you type ends you will see in 8 16 32 and 64 and these values are referring

54
00:03:47.400 --> 00:03:48.530
to the bits.

55
00:03:48.630 --> 00:03:57.430
So how your debit 64 bit for instance the higher the capacity to store the value of a number.

56
00:03:57.540 --> 00:04:05.280
So you cannot assign something like a billion or a trillion in the integer eight but you can store this

57
00:04:05.490 --> 00:04:08.180
in integer 64.

58
00:04:08.280 --> 00:04:10.370
Don't get confused about this.

59
00:04:10.370 --> 00:04:13.590
We're just going to go for it right now.

60
00:04:13.950 --> 00:04:23.890
But if you see something like it's eight in 16 it refers to the bits capacity to star of the number.

61
00:04:24.240 --> 00:04:25.980
So I can say that's right.

62
00:04:25.980 --> 00:04:27.500
It's 10.

63
00:04:27.510 --> 00:04:29.840
But can I say ten point five.

64
00:04:29.850 --> 00:04:36.240
No I cannot say that because ten point five is not even an integer it's a double.

65
00:04:36.460 --> 00:04:36.870
Okay.

66
00:04:37.980 --> 00:04:42.780
And then as you can see it gives us and suggestion you can.

67
00:04:42.840 --> 00:04:47.340
It says that you have to repped is Iran 10 ends.

68
00:04:47.700 --> 00:04:50.680
So if I do it what will I get.

69
00:04:50.700 --> 00:04:57.650
I will get 10 so when you cover right now you wrap this around something.

70
00:04:57.650 --> 00:05:02.300
It will try to a signed is value to be an integer.

71
00:05:02.540 --> 00:05:07.410
OK and let me show you another example of this.

72
00:05:07.610 --> 00:05:13.840
Let me create another very variable called string number for example.

73
00:05:13.850 --> 00:05:14.790
OK.

74
00:05:14.900 --> 00:05:21.060
And I will try to convert another number or 10 into a string.

75
00:05:21.230 --> 00:05:22.760
Can I do something like this.

76
00:05:22.760 --> 00:05:27.090
Can I wrap this number with string class.

77
00:05:27.110 --> 00:05:33.680
Can I do something like string open parentheses and say 20 for example.

78
00:05:33.680 --> 00:05:35.000
I can do that right.

79
00:05:35.090 --> 00:05:39.170
And it will convert this to any to be a text.

80
00:05:39.170 --> 00:05:45.590
So this is not different from putting quotation marks around this to any.

81
00:05:45.680 --> 00:05:47.930
As you can see puts it for us.

82
00:05:47.930 --> 00:05:49.680
So this is a text.

83
00:05:49.700 --> 00:05:52.190
This is not a number anymore.

84
00:05:52.550 --> 00:06:00.020
So I cannot just go over here to string number and multiply it by another number because string number

85
00:06:00.320 --> 00:06:04.140
is now a string rather than an integer.

86
00:06:04.430 --> 00:06:10.970
So I can convert this to yes string if I want then as you can see I can do this and it won't give me

87
00:06:10.970 --> 00:06:17.940
an error because I'm getting I may signing this value to be a string not an integer.

88
00:06:18.170 --> 00:06:25.250
So can I go and say that wrap this my string with integer.

89
00:06:25.340 --> 00:06:32.680
Yeah I can do that right because I can convert the number 50 to be an integer it makes sense.

90
00:06:32.810 --> 00:06:40.000
But what if Phi was assigning these value to be James rather than 50.

91
00:06:40.010 --> 00:06:44.810
Can I convert James to be an integer like this.

92
00:06:44.810 --> 00:06:53.090
No I cannot do that because it doesn't make sense to convert James into any integer and this will crash

93
00:06:53.360 --> 00:06:56.020
my app actually.

94
00:06:56.060 --> 00:07:02.960
And we're going to see a lot of these examples in the options and in the upcoming apps that we're going

95
00:07:02.960 --> 00:07:03.860
to build.

96
00:07:03.860 --> 00:07:07.270
So I'm not going to go in-depth for that.

97
00:07:07.380 --> 00:07:16.070
Right now I'm not trying to convert strings into integers so I'm not going to do anything that may fail

98
00:07:16.280 --> 00:07:26.780
at this time but for example let me show you what defining and a signing means.

99
00:07:26.780 --> 00:07:29.760
So defining is different than assigning.

100
00:07:30.800 --> 00:07:37.820
In the 40 first line I create my strings and I assign a value.

101
00:07:38.340 --> 00:07:48.500
OK but maybe for some reason I want to maybe I can I may want to create a string but not assign a value

102
00:07:48.860 --> 00:07:50.420
at that moment.

103
00:07:50.420 --> 00:07:55.230
Maybe I'm going to download this value from the Internet.

104
00:07:55.400 --> 00:07:57.970
OK so I can do something like this.

105
00:07:58.040 --> 00:08:05.570
Let my variable is going to be a string type but I'm not going to assign anything to it right now.

106
00:08:05.570 --> 00:08:07.890
So this is perfectly OK.

107
00:08:07.970 --> 00:08:09.920
I can't just leave it like that.

108
00:08:10.100 --> 00:08:10.820
OK.

109
00:08:10.880 --> 00:08:13.460
If you play this there won't be any problem.

110
00:08:14.270 --> 00:08:21.960
But the problem starts if you try to do something with this because we haven't initialized it yet.

111
00:08:22.070 --> 00:08:28.080
So initialization is different than defining the variable.

112
00:08:28.100 --> 00:08:29.560
So this is defining.

113
00:08:29.650 --> 00:08:30.330
OK.

114
00:08:30.470 --> 00:08:38.030
I created my variable but it doesn't have anything right now it doesn't have any value it isn't even

115
00:08:38.030 --> 00:08:40.080
initialized yet.

116
00:08:40.190 --> 00:08:47.970
So if I want to initialize this I can't come over here and I can change the value or I can assign anyway

117
00:08:48.000 --> 00:08:55.380
Lou to my variable but I cannot do something like this I cannot just say go and make this uppercase.

118
00:08:55.400 --> 00:08:57.110
It will give me an error.

119
00:08:57.140 --> 00:08:57.980
OK.

120
00:08:57.980 --> 00:09:04.510
I did that in here because it had a value but right now it doesn't have a value.

121
00:09:04.580 --> 00:09:09.950
And as you can see it says that constant my variable used before initialized.

122
00:09:10.580 --> 00:09:18.280
So I didn't initialize this but I tried to make it uppercase so it doesn't make sense as well.

123
00:09:18.290 --> 00:09:19.060
Right.

124
00:09:19.130 --> 00:09:21.800
So it gives me an error.

125
00:09:22.010 --> 00:09:29.510
So you have to be careful when you initialize the variable when you define the variable and then you

126
00:09:29.510 --> 00:09:34.490
accessed the methods or at the resort options like this.

127
00:09:34.490 --> 00:09:39.590
You have to do this after you initialize your variable.

128
00:09:40.100 --> 00:09:45.680
And in fact we're going to have a lot of examples like this when we tried to build an up.

129
00:09:45.740 --> 00:09:49.530
So if I do something like this my real is now test.

130
00:09:49.580 --> 00:09:56.780
Now after that I can do whatever I want to do with my variable I can just go for uppercase I can just

131
00:09:56.780 --> 00:10:00.550
go for lower case while there were I want to do.

132
00:10:01.250 --> 00:10:10.580
And as you run this you will see that test is now test and Elian if I did create this with let I'm not

133
00:10:10.580 --> 00:10:18.790
changing the value over here I'm just initializing it I'm just assigning good value for the first time.

134
00:10:18.860 --> 00:10:26.690
Now later on I cannot do this I cannot change this value again because this is created with lat this

135
00:10:26.690 --> 00:10:34.700
is a constant as you can see it says that it's immutable OK immutable means it cannot be changed mutable

136
00:10:34.700 --> 00:10:44.780
means it can be changed so I believe now you have understood how you can predefined the values well

137
00:10:44.840 --> 00:10:54.680
you types actually and how you can define something and then initialize it later on and how you must

138
00:10:55.190 --> 00:11:02.480
initialize it then use some methods and use some variables or any other options that you might want

139
00:11:02.480 --> 00:11:03.010
to do.

140
00:11:04.580 --> 00:11:09.510
So if you do print my variable over here you will only see test.

141
00:11:09.810 --> 00:11:19.250
OK because this my variable dot upper cased doesn't change the original my variable okay.

142
00:11:19.460 --> 00:11:23.160
It just produces another constant.

143
00:11:23.160 --> 00:11:25.470
Another variable maybe.

144
00:11:25.760 --> 00:11:34.640
So in fact I can just create another variable and I can have it assigned to these value like that so

145
00:11:34.640 --> 00:11:41.500
I can just say let my upper case or upper variable is now this.

146
00:11:41.850 --> 00:11:51.170
OK so my variable dot uppercase will be stored in my upper variable left.

147
00:11:51.350 --> 00:12:01.940
So if I just print my upper variable over here I will see the upper case tests but if I print my variable

148
00:12:02.330 --> 00:12:05.440
I will see the lower case tests.

149
00:12:05.570 --> 00:12:13.430
So I'm not changing the original value of my variable I'm just creating another variable over here.

150
00:12:13.520 --> 00:12:20.610
And if I want to I can just reassign this to another really or another constant.

151
00:12:20.690 --> 00:12:28.520
So right now I I cannot just do this again because I have initialized this I have created this as a

152
00:12:28.520 --> 00:12:31.520
left eye is a constant.

153
00:12:31.520 --> 00:12:38.030
So now you know the difference between constants and variables you know the difference between defining

154
00:12:38.030 --> 00:12:46.760
and initializing you know how you can assign object types when you create variables are constants actual

155
00:12:46.770 --> 00:12:51.500
you have learned a lot during this two lectures.

156
00:12:51.500 --> 00:12:53.200
It is time to stop.

157
00:12:53.330 --> 00:13:00.380
In fact because within the next lecture we going to learn about data structure called a race in which

158
00:13:00.380 --> 00:13:02.990
we can store some values.
