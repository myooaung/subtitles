WEBVTT
1
00:00:00.540 --> 00:00:07.690
Hi within this lecture we're going to go into a new subject called options.

2
00:00:07.710 --> 00:00:14.670
In order to that I'm going to close this down and I'm going to create a new playground.

3
00:00:14.670 --> 00:00:19.540
So I'm going to named is optional and just save it on my desktop.

4
00:00:19.620 --> 00:00:20.150
OK.

5
00:00:20.580 --> 00:00:31.590
So option those are great to to work and make our code safer so by safer I mean immune to crashes.

6
00:00:31.590 --> 00:00:34.000
So last thing that we want.

7
00:00:34.020 --> 00:00:38.540
Then someone uses our app is app to crash.

8
00:00:38.580 --> 00:00:39.250
OK.

9
00:00:39.330 --> 00:00:44.910
So options are actually here to make that preventable.

10
00:00:45.840 --> 00:00:47.860
So let me show you what I mean.

11
00:00:47.880 --> 00:00:54.060
I'm going to create a new string called my name and this will be James.

12
00:00:54.060 --> 00:00:54.850
OK.

13
00:00:54.900 --> 00:00:56.790
This is perfectly clear.

14
00:00:56.790 --> 00:01:05.870
So if I do my name dots uppercase for example I will see James being upper case on the right hand side.

15
00:01:06.390 --> 00:01:08.730
So we we have seen this right.

16
00:01:08.730 --> 00:01:18.510
We know what this does to what happens if I don't want to go to the James value in the first place.

17
00:01:19.140 --> 00:01:24.740
So as you might remember defining and assigning are two different things.

18
00:01:24.740 --> 00:01:27.200
So I don't want to assign anything.

19
00:01:27.540 --> 00:01:28.730
OK.

20
00:01:28.770 --> 00:01:36.880
And if I call my name that uppercase as you can see it says that variable must be initialized.

21
00:01:37.680 --> 00:01:43.250
So I haven't initialized it yet but I want to call this.

22
00:01:43.320 --> 00:01:45.770
So how do I do that.

23
00:01:45.810 --> 00:01:54.390
It's kind of different thing because in most cases we're going to get this string from the user or from

24
00:01:54.390 --> 00:02:01.440
the Internet and we don't know if the string is going to be actually there or not.

25
00:02:01.440 --> 00:02:11.010
So maybe user won't give any string give any name and they will click the uppercase button anyway so

26
00:02:11.040 --> 00:02:17.910
they won't even write their names but they will click the button that will make their names uppercase.

27
00:02:18.090 --> 00:02:18.930
OK.

28
00:02:19.020 --> 00:02:27.260
So if we say string optional so this question mark actually stands for optional.

29
00:02:27.400 --> 00:02:28.280
Okay.

30
00:02:28.500 --> 00:02:30.480
This means that yeah.

31
00:02:30.510 --> 00:02:33.410
This name is going to be there.

32
00:02:33.420 --> 00:02:36.030
Probably what we're not even sure.

33
00:02:37.320 --> 00:02:41.840
So if I do that this will give me two options.

34
00:02:41.940 --> 00:02:48.390
So if I come over to my name says My name is an optional string right now rather than their regular

35
00:02:48.390 --> 00:02:52.190
string I have to choose between two things.

36
00:02:52.320 --> 00:02:57.850
If I want to make this optional again I can just say my name.

37
00:02:57.900 --> 00:03:03.540
Optional that uppercase and if if I run this I won't get any error.

38
00:03:03.570 --> 00:03:10.150
OK but I will get the value of nil as you can see Neal means nada nothing.

39
00:03:10.540 --> 00:03:10.940
OK.

40
00:03:10.950 --> 00:03:12.090
Emptiness.

41
00:03:12.150 --> 00:03:15.120
So it's not an empty string.

42
00:03:15.120 --> 00:03:15.960
It's nil.

43
00:03:16.050 --> 00:03:18.490
It's not even initialized yet.

44
00:03:19.730 --> 00:03:28.310
So let me create another string over here gave are my string and this is an empty string.

45
00:03:28.340 --> 00:03:35.360
This is not nailed but my name is nil so nil versus empty string.

46
00:03:35.360 --> 00:03:44.090
Two different things because you remember the difference between defining and initializing this my string

47
00:03:44.090 --> 00:03:45.220
is initialized.

48
00:03:45.260 --> 00:03:48.380
My name is not even initialized.

49
00:03:49.490 --> 00:03:59.400
So if I don't want to initialize something and if I don't know whether it's coming or not I use options.

50
00:03:59.690 --> 00:04:06.440
And this way this will produce nil but it won't crash the app for me.

51
00:04:06.440 --> 00:04:12.770
And the other option is to come here and put an exclamation point.

52
00:04:12.770 --> 00:04:13.940
OK.

53
00:04:14.120 --> 00:04:19.850
So you remember the other option if you do it like this it will show you two options and the other option

54
00:04:19.880 --> 00:04:23.570
is to say exclamation point.

55
00:04:24.050 --> 00:04:30.290
And this means that I am perfectly sure that there is going to be a name initialized.

56
00:04:30.350 --> 00:04:30.820
OK.

57
00:04:30.830 --> 00:04:37.940
The user will give the name but if they don't and if they click on that button anyway as you can see

58
00:04:37.940 --> 00:04:45.260
we got the error executing bad instructions so this means that your app has just crashed.

59
00:04:45.260 --> 00:04:50.320
And this is the last thing that we want to happen in our app.

60
00:04:50.420 --> 00:04:57.090
So there will be a lot of times when you will have to choose whether to make this optional or false

61
00:04:57.130 --> 00:05:00.750
or wrap this or keep putting an exclamation point.

62
00:05:00.760 --> 00:05:01.060
Yeah.

63
00:05:01.070 --> 00:05:07.510
To be very careful because if you choose the wrong thing it will break your code.

64
00:05:07.760 --> 00:05:12.410
So you cannot go with options every time.

65
00:05:12.410 --> 00:05:20.210
By the way if that's what you were thinking and you cannot go with foresight wrap game with time as

66
00:05:20.210 --> 00:05:26.510
well because this is very much obvious you can actually crash your app.

67
00:05:27.500 --> 00:05:31.370
So we have some techniques to make this right.

68
00:05:31.400 --> 00:05:33.050
I'm going to show you all of this.

69
00:05:33.050 --> 00:05:35.150
Don't worry about it.

70
00:05:35.180 --> 00:05:39.130
So right now I'm going to make this optional and I will run this again.

71
00:05:39.230 --> 00:05:44.920
And as you can see my app will not crash but it will produce some nil.

72
00:05:44.990 --> 00:05:47.810
So let me go to other examples.

73
00:05:47.810 --> 00:05:52.080
So I'm going to create the name string and I'm going to call this Lars.

74
00:05:52.310 --> 00:05:54.240
If I go to my string.

75
00:05:54.800 --> 00:05:55.630
OK.

76
00:05:55.700 --> 00:06:02.110
If I say my string exclamation point dot lowercase for example.

77
00:06:02.570 --> 00:06:12.140
And if I do like does it will give me an error because we cannot force unwrap a value of non optional.

78
00:06:12.140 --> 00:06:14.470
So this is not optional types.

79
00:06:14.520 --> 00:06:16.400
Does a regular string.

80
00:06:16.400 --> 00:06:18.780
We cannot do that over here.

81
00:06:18.830 --> 00:06:19.660
OK.

82
00:06:19.730 --> 00:06:27.680
We can only put exclamation points or put an optional then it's an optional type.

83
00:06:28.370 --> 00:06:32.290
So in this my name case this is optional string.

84
00:06:32.450 --> 00:06:33.210
OK.

85
00:06:33.350 --> 00:06:38.780
So we have to be careful with this question mark and exclamation points.

86
00:06:38.780 --> 00:06:46.180
So I'm going to give you a very concrete example where you will understand why you cannot use optional

87
00:06:46.260 --> 00:06:51.380
every time and why you cannot use force wrapping every time as well.

88
00:06:51.380 --> 00:06:57.620
And what is the optimal choice when it comes to a decision like this.

89
00:06:57.650 --> 00:07:02.320
For example let me create a string over here OK.

90
00:07:02.450 --> 00:07:05.200
This is my age but it's not an integer.

91
00:07:05.210 --> 00:07:10.400
It says string as you can see it's all wrapped around a quotation mark.

92
00:07:11.390 --> 00:07:21.080
And before we didn't try to convert as trick into an integer because we have to know about options in

93
00:07:21.080 --> 00:07:29.810
order to do that and you can to see why right now I'm just trying to convert this string into an integer.

94
00:07:29.810 --> 00:07:32.360
Can I do that with my age.

95
00:07:32.360 --> 00:07:33.220
Of course I can.

96
00:07:33.220 --> 00:07:33.820
Right.

97
00:07:33.950 --> 00:07:36.780
So I can just say my integer.

98
00:07:36.800 --> 00:07:37.570
OK.

99
00:07:37.700 --> 00:07:41.720
And this will be entrapped my age.

100
00:07:42.140 --> 00:07:47.450
So this will convert into my age into an integer.

101
00:07:47.570 --> 00:07:52.510
But let me just multiply it by five for an example.

102
00:07:52.850 --> 00:07:54.590
But it will give me an error.

103
00:07:54.590 --> 00:07:58.730
So it will just say this is an optional.

104
00:07:59.300 --> 00:08:06.560
And because we don't know if we can do this operation we don't know if we can convert this string into

105
00:08:06.560 --> 00:08:07.550
an integer.

106
00:08:07.940 --> 00:08:15.240
So we have to use a double question mark or an exclamation point in this stage.

107
00:08:15.920 --> 00:08:17.420
So how do we do that.

108
00:08:17.420 --> 00:08:19.000
What's a double question mark.

109
00:08:19.970 --> 00:08:27.950
How about just inserting an exclamation point here because we can actually homework this into a integer.

110
00:08:27.950 --> 00:08:28.550
Right.

111
00:08:28.580 --> 00:08:29.870
So let me try that.

112
00:08:29.900 --> 00:08:37.340
Let me try this vids and exclamation point and as you can see I managed to convert this to an integer

113
00:08:37.400 --> 00:08:39.290
and multiplied by five.

114
00:08:39.710 --> 00:08:43.520
But what happens if I change it to an apple.

115
00:08:43.520 --> 00:08:53.640
So in this case our user decided to give an apple string rather than an integer so it just crashed.

116
00:08:53.680 --> 00:09:03.020
Okay so it crashed our code as you can see we got this bad instruction error over here so it doesn't

117
00:09:03.020 --> 00:09:11.000
work if we are sure that the user is going to give us a number anyway then maybe it makes sense to put

118
00:09:11.010 --> 00:09:17.920
this the exclamation mark but if that's not the case then we shouldn't do it.

119
00:09:17.990 --> 00:09:21.690
For example let's do the double question marketing.

120
00:09:21.710 --> 00:09:28.570
So a double question mark is to provide a default Van optional value is actually nil.

121
00:09:29.060 --> 00:09:33.640
So in this case this will attempt to convert this into an integer.

122
00:09:34.040 --> 00:09:41.920
And if it doesn't if it cannot do that if it fails then we will provide the default value.

123
00:09:42.010 --> 00:09:42.800
Okay.

124
00:09:42.990 --> 00:09:47.170
And for default value we can just say something like zero.

125
00:09:47.630 --> 00:09:56.360
And if we do that if we run this we will still get to 85 because the attempt is going to succeed.

126
00:09:56.630 --> 00:10:04.820
But if we do it something like this if we do an F over here it won't convert this into an integer but

127
00:10:05.030 --> 00:10:13.580
rather it will just take the zero over here the default value and multiply it by five and the result

128
00:10:13.580 --> 00:10:14.940
will be zero.

129
00:10:15.440 --> 00:10:18.440
But there will be times that I don't want that.

130
00:10:18.980 --> 00:10:22.780
What if I don't want to get a zero as an output.

131
00:10:22.790 --> 00:10:30.050
What if I just tried to display a message tax or something saying that you have to give me and number

132
00:10:30.080 --> 00:10:33.890
two user because that's not good.

133
00:10:33.890 --> 00:10:38.630
Zero is not what I'm looking for here I'm looking for a number.

134
00:10:38.720 --> 00:10:40.250
Is there a way to do that.

135
00:10:40.250 --> 00:10:42.130
Of course there is a way.

136
00:10:42.140 --> 00:10:44.070
We use something like this.

137
00:10:44.150 --> 00:10:53.720
If left means that we're trying to create a variable and if it succeeds we're going to do the following.

138
00:10:53.840 --> 00:10:57.840
If it doesn't we can do what we want.

139
00:10:57.860 --> 00:10:58.480
Okay.

140
00:10:58.520 --> 00:11:01.740
And this won't crash the app.

141
00:11:01.760 --> 00:11:03.220
This is the main difference.

142
00:11:03.230 --> 00:11:05.540
So we do it like this.

143
00:11:05.540 --> 00:11:08.740
Let me comment this out okay.

144
00:11:08.990 --> 00:11:17.530
Or we can just leave it as it is doesn't mean and think so I can just do it like this leaflet my number.

145
00:11:17.540 --> 00:11:21.670
It's my age and open parentheses.

146
00:11:22.160 --> 00:11:26.900
So we means that V will attempt to convert this into an integer.

147
00:11:26.900 --> 00:11:32.120
And if this succeeds then we can go to the coding block.

148
00:11:32.140 --> 00:11:36.830
So whatever we write over here will be happening.

149
00:11:37.010 --> 00:11:46.400
If this succeeds if it doesn't it won't crash the app so we can create a new variable for example and

150
00:11:46.400 --> 00:11:47.870
multiply it by five.

151
00:11:47.900 --> 00:11:55.280
So actually we can use my number as well because we have already create this and we can just print this

152
00:11:55.280 --> 00:12:03.110
out or we can assign it to we we can assign D to be a new integer and we can print that out as well.

153
00:12:03.110 --> 00:12:10.490
So if let my number is actually integer my number my H print my number multiplied by five.

154
00:12:10.520 --> 00:12:18.140
So this gets zero in this case and I can add an L statement here as well.

155
00:12:18.200 --> 00:12:18.560
Right.

156
00:12:18.590 --> 00:12:23.900
So I can just say wrong input or give me a number.

157
00:12:24.080 --> 00:12:29.060
So if I run this then I will see wrong input.

158
00:12:30.230 --> 00:12:31.990
So that's perfect.

159
00:12:32.000 --> 00:12:34.220
That's what I was looking for.

160
00:12:34.400 --> 00:12:40.720
In this case my user will also know that he or she is doing something wrong.

161
00:12:40.730 --> 00:12:42.780
I have to give a number.

162
00:12:42.890 --> 00:12:43.790
I don't.

163
00:12:44.280 --> 00:12:47.770
I'll make this work with strings or tax.

164
00:12:47.900 --> 00:12:52.820
I have to give something like five or 10 or 20.

165
00:12:52.850 --> 00:13:02.810
So if we come across it in a situation like this it means that we have to use this if let's control

166
00:13:02.810 --> 00:13:07.100
leaflet statement in order to make our code save.

167
00:13:07.310 --> 00:13:09.700
And also you know to keep things going.

168
00:13:09.710 --> 00:13:15.970
So we have to display some message to the user or we have to do something else.

169
00:13:15.980 --> 00:13:21.200
If this fails then this is the perfect choice for us.

170
00:13:21.420 --> 00:13:27.600
So we're going to stop here and following the next section we're going to build an exemplary very simple

171
00:13:27.870 --> 00:13:33.000
calculator in order to practice all these information that we have learned.
