WEBVTT
1
00:00:00.060 --> 00:00:04.520
Hi we this lecture where are you going to learn about sets.

2
00:00:04.890 --> 00:00:12.120
So sets are very similar to erase over here but they will be a little bit different.

3
00:00:12.120 --> 00:00:15.380
They will have their advantages and disadvantages.

4
00:00:15.540 --> 00:00:17.240
So I'm going to take notes again.

5
00:00:17.250 --> 00:00:22.630
I'm going to label a phrase over there and right now I'm going to go for sets.

6
00:00:22.780 --> 00:00:30.240
OK so we're going to learn about sets and we're going to continue learning about a race in this lecture

7
00:00:30.240 --> 00:00:31.200
as well.

8
00:00:31.200 --> 00:00:33.140
So what is a set.

9
00:00:33.330 --> 00:00:42.290
So this is kind of an array again but they have unique values inside of them so you cannot have to James

10
00:00:42.450 --> 00:00:43.500
inside of a set.

11
00:00:43.500 --> 00:00:47.040
You cannot have two ones inside of a set.

12
00:00:47.070 --> 00:00:49.740
So let me show you how this works out.

13
00:00:49.770 --> 00:00:56.280
So if you do something like this var my set and open parentheses again and do want to achieve for 5

14
00:00:57.140 --> 00:01:04.860
n again Swift will think that this is an array rather than a set right because as you can see if I do

15
00:01:04.860 --> 00:01:12.110
my set it will think that this is an integer array but I don't want this to be an array I want wanted

16
00:01:12.110 --> 00:01:15.500
to be a set so I can predefined this right.

17
00:01:15.510 --> 00:01:20.740
I can just go for here and say this is a set.

18
00:01:21.150 --> 00:01:28.650
So right now wi fi do my set as you can see this is a sad having integers inside of it.

19
00:01:28.650 --> 00:01:32.000
So what's the difference between sets and the race.

20
00:01:32.190 --> 00:01:41.550
So first as I said before you cannot have the same value more than one E side of a set and sets are

21
00:01:41.670 --> 00:01:43.700
unordered collections.

22
00:01:43.710 --> 00:01:46.360
So let me show you what I can.

23
00:01:46.530 --> 00:01:53.520
Can I come over here to my number array and can I add paint something or can I change something like

24
00:01:53.520 --> 00:01:57.470
this if I do my number array 0.

25
00:01:57.630 --> 00:02:04.500
I will get one obviously right because this is the first element and I cannot do that in set.

26
00:02:04.500 --> 00:02:14.160
I cannot go over here and just bring me the first elements because SATs do not have indexes they have

27
00:02:14.160 --> 00:02:21.570
something called lust are first they used to have lust but I believe they have got rid of them.

28
00:02:21.570 --> 00:02:30.750
So yeah they have the first for example if I run this I won't even get one I will get three and every

29
00:02:30.750 --> 00:02:38.610
time I run does this will change because the sets are unordered collections they do not have indexes

30
00:02:38.910 --> 00:02:41.800
like we do in erase.

31
00:02:41.840 --> 00:02:51.060
OK so you cannot have you cannot have certain sets you can't have soared to their is you can create

32
00:02:51.060 --> 00:02:59.250
some structural values you can have some sorts of values in their race you can go over here and you

33
00:02:59.250 --> 00:03:06.600
can try to append something like you can just say append and you can add a new element like eight over

34
00:03:06.600 --> 00:03:12.390
here and it will be ordered like One two three four five six seven eight.

35
00:03:12.750 --> 00:03:20.640
So if I call this and hit play button on the right hand side I will see that this will be like one two

36
00:03:20.640 --> 00:03:23.560
three four five six seven eight.

37
00:03:23.730 --> 00:03:30.280
So yeah I can just make this a little bit bigger and as you can see eight appended at the end of this

38
00:03:30.280 --> 00:03:34.200
misery it got the lust index.

39
00:03:34.200 --> 00:03:41.490
So if I say my pent up lust it will give me a reasonable result over here like eight.

40
00:03:41.720 --> 00:03:43.430
OK.

41
00:03:43.440 --> 00:03:45.690
And as you can see we got the eight.

42
00:03:45.720 --> 00:03:51.910
So let me click over this and just close this down and this one to end in here.

43
00:03:51.930 --> 00:03:57.920
I cannot do that and my said that first doesn't even make sense.

44
00:03:58.050 --> 00:04:03.390
So right now you may think that why are we even using the SATs.

45
00:04:03.390 --> 00:04:05.100
Why do we house SATs.

46
00:04:05.100 --> 00:04:07.930
They are not even ordered.

47
00:04:07.980 --> 00:04:10.110
So let me do it in this way.

48
00:04:10.110 --> 00:04:13.240
So one two three four five One two.

49
00:04:13.320 --> 00:04:23.790
If I run my set I won't get one and two twice I only get them once but I can add as many as I want in

50
00:04:23.790 --> 00:04:25.800
a race.

51
00:04:25.800 --> 00:04:35.380
So as you called us you will see that we will see one two three four five six seven and one two three.

52
00:04:35.490 --> 00:04:37.410
One more time.

53
00:04:37.410 --> 00:04:40.700
As you can see now this is my area.

54
00:04:40.710 --> 00:04:46.620
I can see the duplicate values as well but in sets I cannot do that.

55
00:04:46.740 --> 00:04:54.930
And this is a beneficial sometimes if I don't want any duplicates inside of often collection then I

56
00:04:54.930 --> 00:04:56.060
can use sets.

57
00:04:56.060 --> 00:05:04.580
So sets are unordered collections of unordered collections and they have unique values.

58
00:05:04.940 --> 00:05:13.340
So if you're looking for unordered collections with unique elements then you have to use sets for example

59
00:05:13.740 --> 00:05:23.540
I think that you have a string set in which you will how a B and then C and then a again.

60
00:05:24.350 --> 00:05:27.000
So this is the same principle right.

61
00:05:27.020 --> 00:05:29.710
If you run this you won't see a twice.

62
00:05:29.720 --> 00:05:34.210
You will only get it once but it will be on or dates.

63
00:05:34.220 --> 00:05:42.120
So for example let's suppose that you have an array but inside of this area you have duplicated values.

64
00:05:42.140 --> 00:05:45.390
How do you get rid of those values.

65
00:05:45.410 --> 00:05:51.250
Of course you can try to convert your array into asset right.

66
00:05:51.270 --> 00:05:52.940
And the problem will be solved.

67
00:05:52.940 --> 00:05:54.760
So let me try this.

68
00:05:54.830 --> 00:05:57.790
So I'm going to say this is my internet array.

69
00:05:57.800 --> 00:06:05.150
Let's suppose that I'm downloading this data from the Internet and I have something like this set of

70
00:06:05.150 --> 00:06:14.080
integers 1 2 3 1 2 3 and I have one more than three times maybe two more than two times.

71
00:06:14.180 --> 00:06:23.690
So if I try to convert this into a set I can wrap this around sat like I did with strings and integers.

72
00:06:23.870 --> 00:06:27.560
I can just convert disarray into a set.

73
00:06:27.560 --> 00:06:30.800
Right now we fight the war on this.

74
00:06:30.800 --> 00:06:33.820
I will see that in my array.

75
00:06:33.830 --> 00:06:35.530
I have all the values.

76
00:06:35.810 --> 00:06:36.950
So let me print this.

77
00:06:36.950 --> 00:06:38.300
So we can't see it better.

78
00:06:38.330 --> 00:06:45.700
OK so let me print my internet array and let me print my internet sets.

79
00:06:46.340 --> 00:06:48.050
So let me run those values.

80
00:06:48.080 --> 00:06:56.480
And as you can see I have everything in my internet array but I don't have the duplicated values inside

81
00:06:56.750 --> 00:06:58.240
my set.

82
00:06:58.250 --> 00:07:06.800
So if you come across a situation in which you have to get rid of the placated values and then you can

83
00:07:06.860 --> 00:07:15.630
just do whatever you want to do with those left then you can convert this structure into a set.

84
00:07:15.680 --> 00:07:23.480
So for example let me have something called my set the one and in this side I have one two three.

85
00:07:23.630 --> 00:07:25.900
And again I have my set too.

86
00:07:26.330 --> 00:07:30.800
And in the SAT I have three four five.

87
00:07:30.890 --> 00:07:40.400
Now I want to combine these two sets together to have one two three four five rather than having two

88
00:07:40.400 --> 00:07:42.130
three two times.

89
00:07:42.200 --> 00:07:44.020
How do I do this.

90
00:07:44.150 --> 00:07:54.270
I can create my set three and I can just say my sat my SAT one or two dots union.

91
00:07:54.290 --> 00:07:58.050
And as you can see it asks for an other sequence.

92
00:07:58.100 --> 00:08:01.130
And in this case the other sequence is my set too.

93
00:08:01.820 --> 00:08:06.650
So it means that just union make a union out of this.

94
00:08:06.680 --> 00:08:09.160
My set one and my set too.

95
00:08:09.230 --> 00:08:14.540
And if you do print my set three you will get what you will get.

96
00:08:14.540 --> 00:08:16.280
One two three four five.

97
00:08:16.280 --> 00:08:28.190
Of course in an unordered hash so we don't have indexes in sets but we have unique elements.

98
00:08:28.320 --> 00:08:33.950
So whenever you need this you are more than welcome to use sets.

99
00:08:33.990 --> 00:08:40.950
So we're going to stop here and within the next lecture you re going to see another array or set like

100
00:08:40.950 --> 00:08:44.160
structure called dictionaries.
