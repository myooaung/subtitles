1
00:00:00,930 --> 00:00:06,690
Hi within this lecture we're going to see the difference between a reference type and value type.

2
00:00:07,380 --> 00:00:12,960
But before we go on and do that we have to understand the immutability part as well.

3
00:00:13,590 --> 00:00:21,450
As I've said before obstructs actually provide us to opportunity to work with to immutability.

4
00:00:21,450 --> 00:00:23,480
So what do I mean.

5
00:00:23,490 --> 00:00:28,920
So I created this class with left and I created the struct with the left.

6
00:00:29,160 --> 00:00:32,500
So I created both of them with constants.

7
00:00:32,610 --> 00:00:33,530
Right.

8
00:00:33,540 --> 00:00:36,720
Can I come over here and say class that James.

9
00:00:36,740 --> 00:00:40,260
Our Class James that age is 51.

10
00:00:40,920 --> 00:00:43,010
And can I print it.

11
00:00:43,020 --> 00:00:44,140
Let's try that.

12
00:00:44,340 --> 00:00:45,060
OK.

13
00:00:45,330 --> 00:00:47,620
So first I get this.

14
00:00:47,710 --> 00:00:50,360
Okay so let me comment this out.

15
00:00:50,370 --> 00:00:53,780
I know the initial value of this 50.

16
00:00:53,820 --> 00:00:55,830
Can I get 51 one in here.

17
00:00:55,830 --> 00:00:56,230
Yep.

18
00:00:56,250 --> 00:01:06,570
I kept so we can do that and we have seen we can do that before but can I do that with struct James.

19
00:01:06,600 --> 00:01:12,060
Let's try to give fifty one here and let's try to prevent this strike.

20
00:01:12,060 --> 00:01:14,130
JAMES That's H.

21
00:01:14,130 --> 00:01:15,800
Let's run this.

22
00:01:15,840 --> 00:01:22,080
I couldn't even run it because as you can see it says that's Chuck James is a.

23
00:01:22,080 --> 00:01:23,530
Constance.

24
00:01:23,910 --> 00:01:25,700
So why does it happen.

25
00:01:25,710 --> 00:01:29,300
How could I change the age of this class James.

26
00:01:29,320 --> 00:01:32,130
But how couldn't I change the strike.

27
00:01:32,130 --> 00:01:33,350
James H.

28
00:01:34,050 --> 00:01:38,460
So if I come over to class I will see that this age is variable.

29
00:01:38,460 --> 00:01:44,310
That's why I could have changed it but it's variable inside of struct as well.

30
00:01:45,390 --> 00:01:53,820
So as you can see we don't expect this to be happening but in order to change the attributes of a struct

31
00:01:54,120 --> 00:01:58,970
you have to declare it as a variable in the first place.

32
00:01:58,980 --> 00:02:04,360
So if I do this if I change it to work then this error will go away.

33
00:02:04,560 --> 00:02:08,180
And if I run it I will see 51 51.

34
00:02:08,970 --> 00:02:17,730
So this gives us both options if we want to have a true immutability which means that if I just defined

35
00:02:17,730 --> 00:02:26,340
it as a constant and I don't get to change the attributes as well but if I want to change the attributes

36
00:02:26,340 --> 00:02:30,870
later on I have to define it as a variable.

37
00:02:30,930 --> 00:02:37,860
So we have both options in the struct in class even do I do it with left.

38
00:02:37,920 --> 00:02:40,780
It lets me change the attribute.

39
00:02:40,890 --> 00:02:44,720
So this is for mutability and immutability part.

40
00:02:44,920 --> 00:02:45,270
OK.

41
00:02:45,300 --> 00:02:47,540
Immutable struct.

42
00:02:48,000 --> 00:02:54,060
And now we're going to focus on reference and value types.

43
00:02:54,060 --> 00:03:01,470
So remember classes are reference types where as districts are value types and best way to understand

44
00:03:01,530 --> 00:03:06,060
the behavior difference between them is to copy an object.

45
00:03:06,600 --> 00:03:13,450
So we're going to copy this truck James and we're going to also copy the Class James as well.

46
00:03:13,500 --> 00:03:18,790
So let me create another variable called copy of Class James.

47
00:03:18,790 --> 00:03:19,530
Okay.

48
00:03:19,610 --> 00:03:28,350
And I'm gonna make this equal to Class James and I'm going to do the same thing for struct as well because

49
00:03:28,470 --> 00:03:32,530
I'm going to compare the behavior differences between them.

50
00:03:32,580 --> 00:03:35,260
So this is going to be struck James.

51
00:03:35,430 --> 00:03:44,070
So I'm basically copying this and I have to define this as var in order to overcome this immutability

52
00:03:44,070 --> 00:03:44,750
problem.

53
00:03:44,990 --> 00:03:45,900
Okay.

54
00:03:45,990 --> 00:03:50,300
And I can define the copy of class as var as well.

55
00:03:50,460 --> 00:03:55,440
But I'm not going to deal with those because it's already immutable.

56
00:03:55,560 --> 00:04:04,380
So if I print the copy of Class James that's H and if I print copy of struct James that's h what will

57
00:04:04,380 --> 00:04:05,620
happen.

58
00:04:05,700 --> 00:04:09,140
Of course we're going to get fifty one again.

59
00:04:09,240 --> 00:04:10,690
Right.

60
00:04:10,860 --> 00:04:18,110
As you can see we we are getting 51 because we have changed them to be 51.

61
00:04:18,390 --> 00:04:26,190
Now can I just change the age of our copy struct or copy class.

62
00:04:26,190 --> 00:04:26,700
Yep.

63
00:04:26,700 --> 00:04:27,780
Of course.

64
00:04:27,900 --> 00:04:33,960
Can I come over here and say copy of Class James that age is now 52.

65
00:04:34,650 --> 00:04:37,110
And can I do that with stroke as well.

66
00:04:37,180 --> 00:04:40,800
Yep because I declared it as a variable right.

67
00:04:40,800 --> 00:04:42,480
So I can do that.

68
00:04:42,510 --> 00:04:51,990
So let me print those ages one more time and see if we have a different behavior than we expect.

69
00:04:51,990 --> 00:04:53,250
Now let's run this.

70
00:04:53,250 --> 00:04:57,090
And here you go we have 51 51 52 52.

71
00:04:57,570 --> 00:05:01,630
So there is no unexpected thing going on here.

72
00:05:01,650 --> 00:05:11,090
So where is this surprise the surprise will come if you print the Class James that age and class struck

73
00:05:11,100 --> 00:05:13,250
James that age.

74
00:05:13,560 --> 00:05:20,020
So did we change the age of the class James and did we change the age of the strike.

75
00:05:20,020 --> 00:05:21,970
JAMES No we didn't.

76
00:05:22,050 --> 00:05:27,380
So we expect to see 51 51 when we print this.

77
00:05:27,450 --> 00:05:27,990
Right.

78
00:05:27,990 --> 00:05:33,570
So we are going to be seeing 51 51 52 52 and then 51 51.

79
00:05:34,230 --> 00:05:38,230
So that's what my mind tells me.

80
00:05:38,520 --> 00:05:44,110
But if I run this I'm going to get a very weird results.

81
00:05:44,130 --> 00:05:55,740
So I'm getting 50 one one Yep that's good 52 52 but I'm getting 52 as the Class James that age I didn't

82
00:05:55,770 --> 00:05:59,720
even change it why does this happen.

83
00:06:00,200 --> 00:06:05,690
So this is happening because classes are actually referenced types.

84
00:06:05,690 --> 00:06:14,750
So when I create a new class of new objects out of the same object it doesn't create a new object for

85
00:06:14,750 --> 00:06:15,060
me.

86
00:06:15,110 --> 00:06:23,960
It just creates a new reference to the heap to find that object where as in this trucks we don't work

87
00:06:23,960 --> 00:06:24,530
with heap.

88
00:06:24,530 --> 00:06:26,660
We work with stack.

89
00:06:26,660 --> 00:06:31,760
So in the stack we create a new value new object.

90
00:06:31,760 --> 00:06:37,380
So when I change the class James copy of Class James H.

91
00:06:37,400 --> 00:06:39,170
It actually changes the class.

92
00:06:39,170 --> 00:06:47,750
James age as well so reference types are associated with classes and this is what happens when i copy

93
00:06:47,750 --> 00:06:48,860
an object.

94
00:06:48,860 --> 00:06:56,320
I copy the object and it just creates a new reference rather than creating a new object.

95
00:06:56,350 --> 00:07:03,130
So same object with never reference pointing to the heap to find that object.

96
00:07:03,170 --> 00:07:11,480
So we have multiple references with a one object in this case well we can't do that for multiple occasions

97
00:07:11,480 --> 00:07:17,120
so we will end up with a lot of references trying to work on the same object.

98
00:07:17,120 --> 00:07:25,790
It's kind of dangerous because we might lose track from some point on but however in struggles we don't

99
00:07:25,790 --> 00:07:27,490
have that right.

100
00:07:27,530 --> 00:07:37,480
So in here we have one objects okay and we have two references on the other hand then we work with the

101
00:07:37,480 --> 00:07:46,610
value types and it's associated with the struct when we say copy it goes and creates a new object so

102
00:07:46,610 --> 00:07:54,740
new objects rather than creating a new reference so we end up with two objects so that when we change

103
00:07:54,740 --> 00:08:02,570
the age of the needle copy cat we won't change the age of the previous struct objects.

104
00:08:03,680 --> 00:08:12,620
So this is very important in struct we deal with value types in in classes we deal with reference types

105
00:08:13,580 --> 00:08:22,400
and the logical way of thinking is to work with struct because we create a new value and Apple actually

106
00:08:22,400 --> 00:08:29,270
suggests that as I said before they say that you have to work with struct as much as possible.

107
00:08:29,360 --> 00:08:35,060
And if you're really looking forward to work with a reference type or if you're have to work with an

108
00:08:35,060 --> 00:08:43,130
inheritance type then you're going to go to classes but again then you will have to be careful because

109
00:08:43,700 --> 00:08:50,660
if you create more than one reference you can mess up with some values add at some certain point without

110
00:08:50,690 --> 00:08:52,220
even noticing it.

111
00:08:52,880 --> 00:08:58,470
So that's it for the major difference between district and the class.

112
00:08:58,580 --> 00:09:05,780
We're going to have to see something called mutating function in order to understand this completely.

113
00:09:05,780 --> 00:09:08,960
That's what we're going to do within the next lecture.
