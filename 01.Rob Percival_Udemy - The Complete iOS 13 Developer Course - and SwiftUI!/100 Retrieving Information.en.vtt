WEBVTT
1
00:00:00.140 --> 00:00:00.830
Hi.

2
00:00:00.960 --> 00:00:06.840
We didn't this lecture we're going to see how to retrieve information from core data so that we can

3
00:00:06.840 --> 00:00:10.350
display those in our table view.

4
00:00:10.410 --> 00:00:12.710
So let's go to our real controller right.

5
00:00:12.720 --> 00:00:14.610
Because that's what we're going to.

6
00:00:14.610 --> 00:00:20.700
That's where we're going to get this information because we want to display those information in our

7
00:00:20.700 --> 00:00:29.490
table view and I see we didn't ever even do the table view set up in here but we can do that very easily

8
00:00:29.520 --> 00:00:32.260
because we have done that so many times.

9
00:00:32.310 --> 00:00:33.900
So I'm going to do this very quick.

10
00:00:33.900 --> 00:00:39.030
I'm going to say this is my table we've delegate and you I table we use data source.

11
00:00:39.570 --> 00:00:46.320
So remember we have to do this table to delegate and data source so that we can come over here to we

12
00:00:46.320 --> 00:00:54.520
did load and just say table we you delegate itself and table we you data source again itself.

13
00:00:54.660 --> 00:01:00.990
I'm not explaining you the steps right now because we have already seen this many times.

14
00:01:01.080 --> 00:01:04.310
So I said that you get to practice it many times right.

15
00:01:04.350 --> 00:01:11.460
So let's go for a number of frozen section which will define how many rows that that is going to be

16
00:01:11.460 --> 00:01:13.490
displayed in our table view.

17
00:01:13.510 --> 00:01:19.340
Well right now I'm just going to say 10 and south for a row at index pad.

18
00:01:19.350 --> 00:01:24.950
It will define the individual cells inside of each row.

19
00:01:25.080 --> 00:01:29.060
So it expects us to create a UI table we use cell.

20
00:01:29.100 --> 00:01:31.800
So I'm going to say a UI table view cell.

21
00:01:32.220 --> 00:01:33.270
OK.

22
00:01:33.270 --> 00:01:40.830
And then in the cell I'm going to have a tax label which displays the text of tests and I'm going to

23
00:01:40.830 --> 00:01:42.520
return the cell.

24
00:01:42.660 --> 00:01:44.070
And here we go.

25
00:01:44.070 --> 00:01:49.400
How quick we did that in the first time we have learnt this.

26
00:01:49.410 --> 00:01:53.970
We spend like 15 minutes now we can do this under a minute.

27
00:01:53.970 --> 00:01:55.110
So far so good.

28
00:01:55.110 --> 00:01:57.780
We have our table we ready for us.

29
00:01:57.780 --> 00:02:04.650
Now it's time to actually get the information from the core data so that we can display those information

30
00:02:05.130 --> 00:02:07.030
in this table will.

31
00:02:07.080 --> 00:02:15.510
So what we are going to get we can get all those information like Image Name year I.D. but of course

32
00:02:15.510 --> 00:02:20.740
it doesn't make sense to get all of those information and store it in this view controller.

33
00:02:20.780 --> 00:02:21.410
Why.

34
00:02:21.450 --> 00:02:27.540
Because we're going to display those details in the next we have controller in the details we have controller

35
00:02:27.540 --> 00:02:28.580
right.

36
00:02:28.800 --> 00:02:34.050
And we don't have to get like that thousand images in here.

37
00:02:34.050 --> 00:02:37.970
We don't have to download everything from the database.

38
00:02:37.980 --> 00:02:42.400
We're not actually downloading but we're reaching with inside of database.

39
00:02:42.420 --> 00:02:48.450
But again it would be very inefficient because you're going to need only one image.

40
00:02:48.450 --> 00:02:49.210
Right.

41
00:02:49.230 --> 00:02:58.020
So if I do that on the details view controller I can just say Ok Bring me the selected our selected

42
00:02:58.020 --> 00:03:04.920
paintings image so that it will take only one image out of the database and show it to me if I do it

43
00:03:04.910 --> 00:03:13.380
that over here I will just get like a thousand images and show them stardom in variables and it will

44
00:03:13.380 --> 00:03:15.460
be much more inefficient.

45
00:03:15.510 --> 00:03:20.070
So I'm going to create a name array and I'm going to create an idea.

46
00:03:20.100 --> 00:03:28.720
Because that's the only two values that I will be needing in this lecture in this part of the app.

47
00:03:28.830 --> 00:03:36.630
And again name array will be strengths but ideally we'll be you you I.D. remember we have created this

48
00:03:36.990 --> 00:03:40.140
as a type of you you idea rather than string.

49
00:03:40.200 --> 00:03:46.500
So we're going to get this as a you idea and we're going to save all this information as a you you idea

50
00:03:46.500 --> 00:03:46.980
as well.

51
00:03:48.330 --> 00:03:54.360
So rather than doing this under we did loads I'm just going to create a new function because this will

52
00:03:54.360 --> 00:03:55.680
be a little bit long.

53
00:03:56.100 --> 00:04:01.230
So we're going to write everything under does get data function.

54
00:04:01.470 --> 00:04:05.840
So how to get data from Core Data database.

55
00:04:06.000 --> 00:04:12.270
It's actually very similar to the process overwriting data we need to get the app delegates one more

56
00:04:12.270 --> 00:04:14.240
time so I'm going to write it.

57
00:04:14.340 --> 00:04:20.290
Of course you can copy and paste is if you want but I believe the practice will make you better show

58
00:04:20.320 --> 00:04:28.550
I'm going to write everything from scratch so I'm going to say UI application that shared and light

59
00:04:28.550 --> 00:04:30.550
your own dots delegate.

60
00:04:30.780 --> 00:04:38.830
OK I'm going to first cast is as an app delegate and then later I'm going to create my contacts variable.

61
00:04:38.880 --> 00:04:41.520
So this will drive from the app delegates.

62
00:04:41.520 --> 00:04:41.990
OK.

63
00:04:42.000 --> 00:04:45.240
So let contacts be app delegate.

64
00:04:45.380 --> 00:04:47.560
That's persistence.

65
00:04:47.610 --> 00:04:56.010
Commentator like this container tenure or persistence container dot com text OK we have context.

66
00:04:56.160 --> 00:05:05.250
So this is going to give us context and we're going to use this but our patch methods so fetching means

67
00:05:05.250 --> 00:05:07.680
getting information from the database.

68
00:05:07.690 --> 00:05:09.940
Somebody's going to do that.

69
00:05:10.200 --> 00:05:15.390
Here to do that we're going to Neves need something called an S fetch request.

70
00:05:15.420 --> 00:05:16.830
Why do we need those.

71
00:05:17.250 --> 00:05:20.820
Let me say contact dot patch.

72
00:05:20.880 --> 00:05:28.470
It will ask me for it to create an object called and as FHA request with and as FHA request results.

73
00:05:28.470 --> 00:05:32.020
OK so first I have to create this.

74
00:05:32.100 --> 00:05:39.640
And as FHA requests so that I can give it to my contacts so that it will create a result back to me.

75
00:05:39.780 --> 00:05:40.860
And we are going to do that.

76
00:05:40.860 --> 00:05:45.180
We do try catch one more time because it throws as you can see.

77
00:05:45.210 --> 00:05:49.220
So let me show you how to create the FHA quest.

78
00:05:49.380 --> 00:05:51.810
And in order to do that I'm going to use.

79
00:05:51.810 --> 00:05:53.350
And as FHA request.

80
00:05:53.490 --> 00:05:59.150
And of course B if I can not import these core data I cannot use anything.

81
00:05:59.160 --> 00:06:07.240
So I'm going to go ahead and do that and I can just say in as fetch requests and inside of design as

82
00:06:07.260 --> 00:06:11.840
facial cast I have to have and it's FHA request results.

83
00:06:12.300 --> 00:06:18.750
And I believe there should be something wrong with this because he should have asked me for an entity

84
00:06:18.750 --> 00:06:21.300
name and it didn't.

85
00:06:21.330 --> 00:06:27.540
So let me delete this or if I open parentheses Yeah it doesn't still ask.

86
00:06:28.140 --> 00:06:32.480
So let me delete this then as I just write it from the beginning.

87
00:06:32.790 --> 00:06:39.720
So as you can see it asks me for an entity name because we haven't provided our paintings entered the

88
00:06:39.720 --> 00:06:41.470
name in anywhere.

89
00:06:41.730 --> 00:06:44.330
So we have to do that first.

90
00:06:44.460 --> 00:06:47.320
If I live it like this it will still give me there.

91
00:06:47.340 --> 00:06:52.330
I have to say and as feature request results as you can see.

92
00:06:52.500 --> 00:06:54.460
So it's kind of a bug.

93
00:06:54.480 --> 00:06:57.900
It should just ask me everything at once.

94
00:06:57.900 --> 00:07:02.850
So this is and this fetching Chris result an entity name is paintings.

95
00:07:02.850 --> 00:07:09.400
So that's how you create FH requests as you can see ex code actually guides us through this process.

96
00:07:09.420 --> 00:07:16.140
So if you know you have to call fetch that you can just go over here as a context badge and it will

97
00:07:16.140 --> 00:07:23.250
say yeah I'm needing Yeah I need something called an FHA request and if you try to create that variable

98
00:07:23.250 --> 00:07:30.780
it will just asks you for an entity name and a request a result of course it guides you but you have

99
00:07:30.780 --> 00:07:32.640
to know what you're going to do.

100
00:07:32.700 --> 00:07:40.350
So that's what this course is about or you can just read the documentation but you have to be very efficient

101
00:07:40.620 --> 00:07:45.880
in swift maybe like an advance in order to understand everything.

102
00:07:46.380 --> 00:07:49.500
Later on I'm going to use something called returns.

103
00:07:49.500 --> 00:07:51.950
Objects as false.

104
00:07:52.110 --> 00:07:56.090
And the reason that I'm doing that I'm just going to say that's false.

105
00:07:56.100 --> 00:08:03.420
The reason I'm doing that if this is false it means that I'm not going to get the objects as false and

106
00:08:03.420 --> 00:08:11.250
it would be more efficient because it would just set up the cash and use this in the background of Core

107
00:08:11.250 --> 00:08:13.670
Data retrieving a writing.

108
00:08:13.710 --> 00:08:17.820
And it would speed up the process if you're dealing with a lot of data.

109
00:08:18.840 --> 00:08:24.680
So we're going to have to save face requests that returns objects as fold false.

110
00:08:24.750 --> 00:08:32.620
And then later on I can just come over here and I can just call the context that fetch as I did before.

111
00:08:32.730 --> 00:08:40.890
And again it will ask me for and do try catch structure which is what we're going to do anyway because

112
00:08:41.190 --> 00:08:47.160
once you go with card data once you work with correlate you have to get used to the fact that you have

113
00:08:47.160 --> 00:08:52.960
to use a lot of do try catch because it throws an error as you can see.

114
00:08:52.980 --> 00:09:00.140
So the important part here is that it returns us and end as fate Eurocrats request a result as expected

115
00:09:00.180 --> 00:09:09.630
but it returns with an array of these results even if I have one object in the core data it will still

116
00:09:09.630 --> 00:09:11.920
return an array for me.

117
00:09:12.210 --> 00:09:19.470
So I have to cast is as a variable I have to assign this to a variable and I have to use that variable

118
00:09:19.470 --> 00:09:28.200
to go inside of a for loop so that I can actually reach the individual and that's managed objects.

119
00:09:28.200 --> 00:09:31.470
So this is good but we have to do this in.

120
00:09:31.470 --> 00:09:34.250
I do try catch as it suggests.

121
00:09:34.270 --> 00:09:42.990
OK and off to did you try to think we can just go in the for loop under do right before we catch if

122
00:09:42.990 --> 00:09:46.640
there is any error so it's fairly easy to do that.

123
00:09:46.640 --> 00:09:49.350
We have learned how to do it.

124
00:09:49.440 --> 00:09:56.130
So come over here and say try we're going to try this under a do code block.

125
00:09:56.190 --> 00:10:03.190
OK let me cuts everything in here I'm pasted and then later all I'm going to catch if there is there

126
00:10:03.220 --> 00:10:14.240
is any error and I will print error for right now and in here do try catch block I'm going to assign

127
00:10:14.240 --> 00:10:17.380
this to a variable as I said before because why.

128
00:10:17.390 --> 00:10:20.120
Because the results will give me an error rate.

129
00:10:20.810 --> 00:10:24.470
So if I say array I will see that this is any type.

130
00:10:25.220 --> 00:10:32.940
So rather than giving me an S manage object it gives me an any type so I have to cast this as an N S

131
00:10:32.930 --> 00:10:35.900
managed object array.

132
00:10:35.900 --> 00:10:41.920
So it's kind of boring to cast everything in it's kind of boring to do everything safe.

133
00:10:41.930 --> 00:10:46.120
I know but this is how it works with core data unfortunately.

134
00:10:46.340 --> 00:10:49.750
So I'm going to say hub for result in results.

135
00:10:49.850 --> 00:10:54.070
And in order to cast result as an end this managed object.

136
00:10:54.080 --> 00:11:02.600
And I have to do that because I want to reach DNS managed object type methods and functionalities in

137
00:11:02.600 --> 00:11:05.930
order to retrieve the data out of that object.

138
00:11:06.020 --> 00:11:10.610
I'm going to first cast is as an appendage object.

139
00:11:10.640 --> 00:11:10.940
Okay.

140
00:11:11.840 --> 00:11:19.700
So this is a core data module object and we can reach the functions of that core data model object so

141
00:11:19.700 --> 00:11:21.670
that we can say something like Okay.

142
00:11:21.680 --> 00:11:23.780
Bring me the value for key name.

143
00:11:23.780 --> 00:11:27.380
Bring me the value for key year.

144
00:11:27.380 --> 00:11:31.550
So in order to do that I have to cast as as an S managed object.

145
00:11:32.810 --> 00:11:38.630
So if I say result the individual a result will be N and S managed object as you can see.

146
00:11:38.690 --> 00:11:46.700
And now I can just say result that value and it will give me a value for key name for example.

147
00:11:46.700 --> 00:11:55.150
And this will be I again add any value I have to cast is as a strange K optional string.

148
00:11:55.400 --> 00:11:59.600
And the best way to do this actually use on a flat one more time.

149
00:11:59.600 --> 00:12:04.780
So I'm going to say a flat name result that value for key name as string.

150
00:12:04.910 --> 00:12:12.350
Then if this only this works out then I'm going to punt this Oh my name Mary.

151
00:12:13.050 --> 00:12:17.160
And if if this doesn't work out I'm just going to do nothing.

152
00:12:18.660 --> 00:12:25.750
So if this works out only thing that is left to do for me is to append this to my name Mary.

153
00:12:25.880 --> 00:12:26.450
Right.

154
00:12:26.520 --> 00:12:34.590
And we have created those arrays here so I can come over here and say s dog named Mary dot appends and

155
00:12:34.590 --> 00:12:37.190
I will add the name value in here.

156
00:12:38.730 --> 00:12:44.730
So next what I'm going to do I'm going to do the same thing for I.D. as well so I'm going to say he

157
00:12:44.740 --> 00:12:45.060
fled.

158
00:12:45.070 --> 00:12:54.600
I did that result value for I.D. as not string but you I.D. this time because you're going to punt this

159
00:12:54.690 --> 00:12:56.790
as a you you idea anyway.

160
00:12:56.810 --> 00:12:58.090
OK.

161
00:12:58.320 --> 00:12:59.280
And then we're done.

162
00:12:59.880 --> 00:13:04.790
So that's the two values that we have been looking for.

163
00:13:04.800 --> 00:13:12.450
So the name and the I.D. And in here after we are done I have to come over here and refresh the table

164
00:13:12.450 --> 00:13:13.130
view.

165
00:13:13.310 --> 00:13:20.520
And before we do that let me just say Name three dots count here and name array index Panther 0 in here

166
00:13:20.520 --> 00:13:26.370
so that we will display the values for name Mary and that's OK.

167
00:13:26.370 --> 00:13:32.070
But I have to also refresh the data because I'm adding something new to those arrays.

168
00:13:32.610 --> 00:13:39.460
So I have to go to the table with and say please refresh yourself for me so you can just go and say

169
00:13:39.470 --> 00:13:47.100
so I've got table we've got three load data and it doesn't work because I misspelled the table view.

170
00:13:47.100 --> 00:13:52.460
So table we use that to reload data so it reloads the data off the table.

171
00:13:53.310 --> 00:13:54.080
Okay.

172
00:13:54.120 --> 00:13:55.020
That's great.

173
00:13:55.050 --> 00:13:57.810
That's how we get information from core data.

174
00:13:58.170 --> 00:14:05.370
So before we forget let's call this function we did load so we get the data once we open the application

175
00:14:06.030 --> 00:14:07.170
so let's try this.

176
00:14:07.170 --> 00:14:10.940
We only have one value inside of our core data.

177
00:14:11.130 --> 00:14:13.830
And here we go we see the waterfall.

178
00:14:13.830 --> 00:14:17.330
So if I click on this I cannot see the details yet.

179
00:14:17.430 --> 00:14:25.520
So I'm not sure if my image is saved if my year is saved but I can easily see the name is saved.

180
00:14:25.590 --> 00:14:28.140
So I'm pretty certain that it works.

181
00:14:28.140 --> 00:14:30.510
And let me try to add another one.

182
00:14:30.510 --> 00:14:30.830
OK.

183
00:14:30.840 --> 00:14:36.110
Let me choose this flower and for the name I'm going to go for a flower.

184
00:14:36.120 --> 00:14:40.140
I'm gonna just come up with an artist like Bongo.

185
00:14:40.370 --> 00:14:41.420
OK.

186
00:14:41.700 --> 00:14:49.170
And the year will be nineteen hundred and I'm just going to call save and it's so show success.

187
00:14:49.170 --> 00:14:54.850
But it should have taken me back but it doesn't seem to be happening.

188
00:14:54.870 --> 00:14:57.390
We're going to have to manually do this.

189
00:14:57.450 --> 00:15:01.740
So if I run this one more time as you can see I see the flower.

190
00:15:02.100 --> 00:15:09.840
So we have to fix those areas like it has to take me back automatically any task to show me the new

191
00:15:09.840 --> 00:15:13.360
value that I have saved in order to do that.

192
00:15:13.480 --> 00:15:17.040
We're going to have to implement some new codes.

193
00:15:17.070 --> 00:15:20.220
Let's stop here and do that within the next lecture.
