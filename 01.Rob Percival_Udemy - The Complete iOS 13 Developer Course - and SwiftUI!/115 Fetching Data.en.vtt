WEBVTT
1
00:00:00.360 --> 00:00:07.320
Hi within this picture we're going to get the Zetas from the car data database in order to show them

2
00:00:07.320 --> 00:00:13.890
to the table view that we have just created and in order to do that I'm going to go ahead and import

3
00:00:13.890 --> 00:00:20.970
the core data in our list we view controller and under here I'm going to create a new function called

4
00:00:20.970 --> 00:00:26.920
get data because we're going to be writing a lot of codes in here.

5
00:00:27.000 --> 00:00:31.470
So it would be nice to have a separate function for that.

6
00:00:31.860 --> 00:00:38.520
As usual I'm going to start by creating my app delegates variables so this will be app the.

7
00:00:38.580 --> 00:00:39.490
OK.

8
00:00:39.570 --> 00:00:46.500
This will drive from UI application that's shared that delegate and I'm going to first cast is as app

9
00:00:46.500 --> 00:00:54.630
delegate and then I'm going to say let's context will be app delegate that persistence contain your

10
00:00:54.630 --> 00:00:55.980
dad we have context.

11
00:00:56.310 --> 00:00:57.220
OK.

12
00:00:57.390 --> 00:01:04.740
And remember in order to get the data from the core data we have to create a request which will become

13
00:01:04.770 --> 00:01:06.630
an S fetch request.

14
00:01:06.630 --> 00:01:13.520
Okay field open parentheses it will ask us and entity name in which we will the right places.

15
00:01:13.620 --> 00:01:18.870
And remember we have to do it as fact requests results in here as well.

16
00:01:19.560 --> 00:01:24.040
So if I say request dot returns as false.

17
00:01:24.060 --> 00:01:27.050
I have to make this false remember.

18
00:01:27.510 --> 00:01:36.630
And then we can come over here and just patch the request by saying contexts that fetch and I had to

19
00:01:36.630 --> 00:01:45.480
do it with a do try catch structure of course because remember why if we say context that fetch it throws

20
00:01:45.480 --> 00:01:46.770
an error.

21
00:01:46.770 --> 00:01:54.060
So if you say fetch as you can see this gives us an end as feature request result array and it throws

22
00:01:54.060 --> 00:01:55.050
an error.

23
00:01:55.050 --> 00:02:01.890
So we have to do two things we have to say led to results and assign this to be a variable so that we

24
00:02:01.890 --> 00:02:05.630
can go into for loop with that results array.

25
00:02:05.850 --> 00:02:16.200
And in here we have to say try with do try catch structure so do try catch if there is any error I'm

26
00:02:16.200 --> 00:02:17.480
just going to print error.

27
00:02:17.940 --> 00:02:19.120
Okay.

28
00:02:19.200 --> 00:02:26.510
After that what are we going to do we're going to check to see if actually we have anything in that

29
00:02:26.530 --> 00:02:27.990
results error.

30
00:02:28.440 --> 00:02:36.210
So I'm going to say results that count is actually bigger than zero it means that we have something

31
00:02:36.210 --> 00:02:42.800
in our array and if that's the case I'm going to go into the for loop not right now.

32
00:02:42.810 --> 00:02:45.160
Results is an any area.

33
00:02:45.180 --> 00:02:49.990
So I'm going to cast this as an end managed object Array.

34
00:02:50.040 --> 00:02:51.700
Remember we have to do that.

35
00:02:51.720 --> 00:02:58.680
We have to cast as as an illness managed object because that's how we get values out of the individual

36
00:02:58.680 --> 00:03:07.380
results using Core Data features like we can just say result that value and it will ask us for a key

37
00:03:07.620 --> 00:03:13.110
and if I say title for example it will give me the title value.

38
00:03:13.110 --> 00:03:16.690
So remember we have stored this as a string.

39
00:03:17.010 --> 00:03:25.500
Now we are getting this as any and we can just say cast is as a string and if that's the case we have

40
00:03:25.590 --> 00:03:28.520
our variable back from the core data.

41
00:03:29.070 --> 00:03:33.330
And the best way to do that is actually with a flat.

42
00:03:33.330 --> 00:03:40.590
So if that title is a result that value as optional string then it means I have the title.

43
00:03:40.620 --> 00:03:43.220
So let's do that for IDA as well.

44
00:03:43.290 --> 00:03:49.900
So you floods ideas result that value for key ideas as you you idea rather than ideas.

45
00:03:50.070 --> 00:03:59.400
Then I have my ideas as well and we don't have our idea array and name array so let's create those.

46
00:03:59.430 --> 00:04:01.690
So I'm going to call this title array.

47
00:04:01.710 --> 00:04:07.290
This will be a string of an array of strings actually and an idea array.

48
00:04:07.290 --> 00:04:10.850
This will be an array of you you I.D. objects.

49
00:04:10.920 --> 00:04:11.630
Right.

50
00:04:11.640 --> 00:04:13.540
This will be initially empty.

51
00:04:13.650 --> 00:04:17.970
And in here we're going to say self-taught title array that's append.

52
00:04:18.570 --> 00:04:25.830
And I'm just going to say title and in here s DOD idea array that they're bent and I'm just going to

53
00:04:25.830 --> 00:04:33.560
add I.D. once I refresh my title or a data and idea array data.

54
00:04:33.660 --> 00:04:37.430
It means that I have to refresh my table view as well.

55
00:04:37.950 --> 00:04:45.150
But remember we have to remove everything from these arrays before we go into the for loop in order

56
00:04:45.150 --> 00:04:50.150
to prevent duplication of data just like we did in the previous section.

57
00:04:51.330 --> 00:04:58.950
And after we're done we can just call table view dot reload data in order to make sure that does refresh

58
00:04:58.950 --> 00:05:01.890
data gets reflected in the table view as well.

59
00:05:02.280 --> 00:05:07.710
So a table view that reload data and here we're not going to return 10.

60
00:05:07.710 --> 00:05:09.760
We're just going to return ty to Larry.

61
00:05:09.780 --> 00:05:11.340
That's count.

62
00:05:11.340 --> 00:05:17.850
And in here we're just not going to show test about tidal array index Pat that's row.

63
00:05:18.570 --> 00:05:25.980
So this will display the title array content in the table view and we getting that content in the get

64
00:05:25.980 --> 00:05:26.490
data.

65
00:05:26.520 --> 00:05:33.450
So we have to call get data function in the we did load because we haven't called it yet.

66
00:05:33.450 --> 00:05:37.840
So if we want it to be executed that we have to call this.

67
00:05:37.920 --> 00:05:38.900
And here you go.

68
00:05:38.900 --> 00:05:43.050
We have our Eiffel Tower data in the table view.

69
00:05:43.080 --> 00:05:45.030
Let's try to add another one.

70
00:05:45.420 --> 00:05:48.910
Let's go for Arch the Triumph right now.

71
00:05:49.110 --> 00:05:53.460
Let me just zoom in a little bit so we can see it better.

72
00:05:53.460 --> 00:05:54.370
OK.

73
00:05:54.480 --> 00:06:02.030
If you have been to Paris this is kind of an arch representing the triumph of the French army.

74
00:06:02.040 --> 00:06:10.920
So I'm going to go for Arch the Triumph OK and for the comments I will just say arch.

75
00:06:11.110 --> 00:06:14.570
OK and I believe that's good.

76
00:06:14.600 --> 00:06:17.770
So let me press here for three seconds.

77
00:06:17.870 --> 00:06:21.850
And as you can see now we can see the notation.

78
00:06:21.890 --> 00:06:25.160
And if I hit save then it shows success.

79
00:06:25.160 --> 00:06:31.460
If I go back I won't see the record because we haven't implemented that feature yet.

80
00:06:31.460 --> 00:06:34.610
So let me run this from the beginning and here you go.

81
00:06:34.610 --> 00:06:37.070
We now see the records here.

82
00:06:37.070 --> 00:06:43.220
So it means that we get to display what is on the card data database.

83
00:06:43.400 --> 00:06:49.430
So let's stop here and within the next lecture let's overcome these problems that we already have in

84
00:06:49.430 --> 00:06:50.150
our app.
