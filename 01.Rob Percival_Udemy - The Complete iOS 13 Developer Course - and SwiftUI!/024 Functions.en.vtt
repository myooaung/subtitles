WEBVTT
1
00:00:00.060 --> 00:00:00.820
Hi.

2
00:00:01.110 --> 00:00:06.120
We didn't this lecture we going to start learning about functions.

3
00:00:06.120 --> 00:00:10.110
So in order to do that I'm going to create another playground.

4
00:00:10.140 --> 00:00:15.490
Because these functions deserve is actually their own playground.

5
00:00:15.510 --> 00:00:15.840
OK.

6
00:00:15.840 --> 00:00:17.780
This is an important subject.

7
00:00:17.880 --> 00:00:23.510
I'm going to go for the desktop and my playground and I'm going to create this.

8
00:00:23.580 --> 00:00:31.230
So what is a function and why do we use them so function is actually a piece of code.

9
00:00:31.260 --> 00:00:31.810
Okay.

10
00:00:31.830 --> 00:00:40.770
It's a coding block and in fact it's very easy to create one if you use words func K you can name your

11
00:00:40.770 --> 00:00:42.480
function whatever you want.

12
00:00:42.480 --> 00:00:44.280
Like that's my function.

13
00:00:44.280 --> 00:00:50.100
And if you open and close parentheses then you can open a curly braces.

14
00:00:50.100 --> 00:00:57.620
So but they were V right inside of this function will get executed.

15
00:00:57.690 --> 00:01:00.250
Then we call or something.

16
00:01:00.260 --> 00:01:02.760
Cole's dysfunction.

17
00:01:02.760 --> 00:01:06.380
So what does even this mean.

18
00:01:06.510 --> 00:01:13.320
It means that if I write something in here like printing out something whenever I call my function in

19
00:01:13.320 --> 00:01:18.120
my code this will execute what I write inside of this piece of code.

20
00:01:18.870 --> 00:01:21.750
So why do we use functions.

21
00:01:21.750 --> 00:01:25.830
If I write something in a function I can call it anytime I want.

22
00:01:25.830 --> 00:01:28.650
So it will be much more efficient for me.

23
00:01:28.890 --> 00:01:35.850
Like if I say print my function OK I can call this whenever I want.

24
00:01:35.850 --> 00:01:42.270
And with prints of course it doesn't make sense but I'm gonna show you much more useful ways of functions.

25
00:01:42.270 --> 00:01:42.970
Don't worry.

26
00:01:43.440 --> 00:01:46.170
Right now I just want to show you something.

27
00:01:46.170 --> 00:01:49.770
If I run this what will happen.

28
00:01:49.770 --> 00:01:56.480
Do I see any log inside my LO cat or inside of my logs.

29
00:01:56.550 --> 00:02:02.730
Of course I won't because this function will not get executed by itself.

30
00:02:02.730 --> 00:02:10.500
It has to be cold or it has to be assigned to some view or some button or something so that when a user

31
00:02:10.500 --> 00:02:13.020
clicks on a button it will get cold.

32
00:02:13.800 --> 00:02:19.600
But right now I'm just creating the function I'm not doing anything else with it.

33
00:02:19.650 --> 00:02:22.970
I'm not calling the function itself.

34
00:02:23.460 --> 00:02:25.040
So let's see.

35
00:02:25.590 --> 00:02:35.340
As you can see I don't have anything in my luck but if I print something over here like some tasks or

36
00:02:35.340 --> 00:02:44.400
print OK I can see it's right as you can see I see the print but I don't see my function because again

37
00:02:44.640 --> 00:02:49.320
defining your function and calling the function is two different things.

38
00:02:49.320 --> 00:02:55.410
So if I say my function over here then this will be called in the line nine.

39
00:02:56.010 --> 00:03:00.000
So let me run this as you can see first I see the print.

40
00:03:00.120 --> 00:03:06.370
Then I see my function whenever I call this whatever I write in here.

41
00:03:06.390 --> 00:03:08.610
This will get executed.

42
00:03:09.330 --> 00:03:18.330
So first of all it's a great way to make yourself make your codes more readable but more in a structured

43
00:03:18.330 --> 00:03:26.760
way because for example you have to do some 1000 line operation and you have to do it to twice or three

44
00:03:26.760 --> 00:03:27.380
times.

45
00:03:27.450 --> 00:03:34.200
You can write it in a function and you can just call this function later on in three ways so that it

46
00:03:34.200 --> 00:03:41.850
will get executed three times so rather than copying and pasting or just writing whole 1000 lines in

47
00:03:41.850 --> 00:03:45.990
your code and this is not the only way.

48
00:03:46.020 --> 00:03:52.770
This is not the only purpose that we are using functions at all we can do so much more with functions

49
00:03:53.100 --> 00:04:02.190
we can't take inputs and we can return outputs with the function and that is basically why we use function

50
00:04:02.220 --> 00:04:04.560
in most cases.

51
00:04:04.560 --> 00:04:13.650
But again if you understand the logic here I create my function and I call my function then it's OK

52
00:04:13.680 --> 00:04:21.180
because this is the basis of the functions we create a function we write whatever we wanted to happen

53
00:04:21.900 --> 00:04:26.470
inside of that function and then we call it it gets executed.

54
00:04:27.180 --> 00:04:31.050
So let me tell you about does input output and returning things.

55
00:04:31.260 --> 00:04:41.310
So you would understand the functions purpose a little bit more so in here in function I can get an

56
00:04:41.310 --> 00:04:47.570
input from the user or from decoding from the developer or something.

57
00:04:47.580 --> 00:04:48.830
What do I mean.

58
00:04:48.870 --> 00:04:52.300
Let me create the sum function in which I will.

59
00:04:52.830 --> 00:04:56.520
Some I will add two numbers together.

60
00:04:56.570 --> 00:04:57.790
Okay.

61
00:04:58.050 --> 00:05:01.060
So how can I do that.

62
00:05:01.180 --> 00:05:09.740
I can ask for two integers when some function is get called in order to do that.

63
00:05:09.760 --> 00:05:11.280
I will write them here.

64
00:05:11.290 --> 00:05:15.530
I will call 1 acts and I'm going to say X is an integer.

65
00:05:15.640 --> 00:05:21.610
I'm going to call the other one Y and the y will be an integer as well.

66
00:05:21.880 --> 00:05:30.730
Right now when I call some function it will ask me to you two integers and I can do anything I want

67
00:05:30.730 --> 00:05:34.990
with them I can just some them and I can just print the results.

68
00:05:35.010 --> 00:05:35.820
Okay.

69
00:05:35.920 --> 00:05:36.900
Like this.

70
00:05:36.940 --> 00:05:47.300
If I if I can write print x plus y so litmus test is actually let me call some function and as you can

71
00:05:47.300 --> 00:05:56.340
see this code this actually asks for an X and the Y So X is integer Y's integer.

72
00:05:56.390 --> 00:06:02.990
So if I do something like this it will give me an error because it will ask me for an integer not a

73
00:06:02.990 --> 00:06:04.250
string.

74
00:06:04.250 --> 00:06:11.540
I have to give you some integer over here like 10 20 and if I run does it will add them together and

75
00:06:11.540 --> 00:06:15.050
display the result to me.

76
00:06:15.050 --> 00:06:19.940
So what if I want to return some results rather than displaying it.

77
00:06:20.030 --> 00:06:22.580
What do I mean by return.

78
00:06:22.580 --> 00:06:25.620
So I can return anything I want.

79
00:06:25.640 --> 00:06:27.330
I give an output.

80
00:06:27.450 --> 00:06:31.580
And in order to do that I have to do it like this.

81
00:06:31.580 --> 00:06:39.650
This will return an integer you literally draw one arrow here saying that this will return something.

82
00:06:40.070 --> 00:06:45.110
Okay so with Dash and greater sign of course.

83
00:06:45.410 --> 00:06:52.550
And if I don't do it it can just print out it can just return nothing.

84
00:06:52.580 --> 00:06:55.910
And as you can see it shows a void or here.

85
00:06:55.910 --> 00:06:57.130
Void means nothing.

86
00:06:57.170 --> 00:06:58.880
It means emptiness.

87
00:06:58.880 --> 00:07:00.650
So it returns nothing.

88
00:07:00.710 --> 00:07:07.320
But if I say ends then this some function will give me an output of an integer.

89
00:07:07.680 --> 00:07:08.320
Okay.

90
00:07:08.510 --> 00:07:13.840
Then I can use the result of the sum function in an integer way.

91
00:07:13.910 --> 00:07:23.640
So if I have to give an integer to some place in my code I can call this some function and I can make

92
00:07:23.640 --> 00:07:26.360
it the return x plus y.

93
00:07:27.020 --> 00:07:29.760
So a return means return the output.

94
00:07:29.760 --> 00:07:39.050
So if I call some function as you can see now it's an integer it's returning an integer to me.

95
00:07:39.320 --> 00:07:47.740
Now I won't see the result in the logs when I call this because this won't be a print statement or something.

96
00:07:47.740 --> 00:07:50.340
This will be an integer itself.

97
00:07:50.600 --> 00:07:53.390
I will see the result on the right hand side.

98
00:07:53.570 --> 00:07:56.490
Okay but I won't see it in logs.

99
00:07:56.660 --> 00:07:59.650
So this is the integer turkey.

100
00:07:59.660 --> 00:08:08.150
I can make it even a new variable and I can make it actually be equal to some function like my function

101
00:08:08.450 --> 00:08:09.380
variable.

102
00:08:09.530 --> 00:08:12.830
Okay some function x 10 20.

103
00:08:12.830 --> 00:08:18.030
Because my function variable is actually an integer at this point.

104
00:08:18.080 --> 00:08:19.210
Right.

105
00:08:19.370 --> 00:08:21.170
So I can do that.

106
00:08:21.500 --> 00:08:29.090
So I if I want to I can return something with functions and I can use them as variables and if I don't

107
00:08:29.090 --> 00:08:32.700
want to I don't have to return anything yet.

108
00:08:32.750 --> 00:08:37.490
Oh and I can do whatever I want to do with functions.

109
00:08:37.490 --> 00:08:41.110
So can I just return integers.

110
00:08:41.120 --> 00:08:45.590
No of course I can't return boolean XX or strings if I want.

111
00:08:45.890 --> 00:08:49.510
Let me create a logic function for example.

112
00:08:49.520 --> 00:08:52.020
This will take again an integer.

113
00:08:52.220 --> 00:08:53.090
OK.

114
00:08:53.120 --> 00:08:54.800
Or maybe we can call this a.

115
00:08:54.800 --> 00:08:56.710
In order to avoid any confusion.

116
00:08:56.720 --> 00:09:01.600
And B and this will return a boolean instead of integer.

117
00:09:01.800 --> 00:09:04.900
OK so how can I use this.

118
00:09:05.300 --> 00:09:12.860
I can't check to see if a is bigger than B and the return true if that happens like this.

119
00:09:12.860 --> 00:09:17.470
If a is greater than B then return true.

120
00:09:17.540 --> 00:09:18.790
Right.

121
00:09:18.890 --> 00:09:21.420
So else return false.

122
00:09:22.250 --> 00:09:31.430
So I can't compare this SMB and I can return a boolean instead of returning an integer if I want I can

123
00:09:31.760 --> 00:09:32.960
return this string.

124
00:09:32.990 --> 00:09:34.770
It really doesn't matter.

125
00:09:34.880 --> 00:09:38.730
I can just have it in a way that I want.

126
00:09:38.750 --> 00:09:47.510
So let me call this logic function and let me give 10 as 0 2 here and let me run this and we can see

127
00:09:47.510 --> 00:09:49.900
the result is true.

128
00:09:50.150 --> 00:09:57.170
So I if I do this minus 10 that I will see the result will be false.

129
00:09:57.170 --> 00:09:58.760
So this is kind of cool right.

130
00:09:58.760 --> 00:10:09.190
We can create our own functions we can create our own pieces of code that does anything that we want.

131
00:10:09.350 --> 00:10:12.710
So we get to use those functions a lot.

132
00:10:12.710 --> 00:10:15.460
So let me do a little bit more example.

133
00:10:15.470 --> 00:10:17.810
Rather than returning boolean.

134
00:10:17.930 --> 00:10:24.310
Let me see greater let me say greater over here and let me say less.

135
00:10:24.610 --> 00:10:27.950
So we are returning a string right now as you can see.

136
00:10:28.100 --> 00:10:32.960
So we have adapted this function in less than a second.

137
00:10:32.960 --> 00:10:38.140
So this is like the returning less right now rather than false.

138
00:10:38.270 --> 00:10:42.580
So you can create functions you can adapt them in a way you want.

139
00:10:42.660 --> 00:10:47.870
You can return boolean as you can return integers you can return nothing.

140
00:10:47.910 --> 00:10:49.150
Void if you want.

141
00:10:49.170 --> 00:10:53.980
You just don't have to draw these arrow things.

142
00:10:54.030 --> 00:10:57.460
So far we have been only working with Ray Ables.

143
00:10:57.510 --> 00:11:04.090
So right now we're working with functions and the next step actually would be to work with classes.

144
00:11:04.130 --> 00:11:11.900
OK so classes will consist of lots of functions or something but we're not going to learn about classes

145
00:11:11.910 --> 00:11:15.360
right now we're going to do that in a separate section.

146
00:11:15.370 --> 00:11:21.980
The intermediate swift section so far right now we've got to stop here and within the next lecture we

147
00:11:21.990 --> 00:11:24.030
going to discuss options.
