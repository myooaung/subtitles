WEBVTT
1
00:00:00.460 --> 00:00:01.160
Hi.

2
00:00:01.280 --> 00:00:02.460
We did this lecture.

3
00:00:02.490 --> 00:00:10.230
Where are you going to start learning about loops so loops are great tools to implement some operation

4
00:00:10.410 --> 00:00:14.860
repetitively as long as our condition halts.

5
00:00:15.030 --> 00:00:20.370
So we're gonna see what that means in real examples in a minute.

6
00:00:20.400 --> 00:00:25.990
So let me create a new playground over here and name it loops.

7
00:00:26.130 --> 00:00:32.700
So I'm gonna go over to my desktop and save its savings into my AOS complete folder.

8
00:00:32.700 --> 00:00:34.470
And now we're ready.

9
00:00:35.790 --> 00:00:38.270
So we're going to learn about this loop.

10
00:00:38.280 --> 00:00:45.580
So we're going to perform an operation in every bit that's a vey as long as a condition holds.

11
00:00:45.620 --> 00:00:46.200
OK.

12
00:00:46.290 --> 00:00:54.660
And the first loop that we gonna learn is called Why you loop so we're going to say vital this condition

13
00:00:54.660 --> 00:00:55.560
holds.

14
00:00:55.620 --> 00:00:57.840
Do the following.

15
00:00:58.110 --> 00:01:07.620
And in order to do that we have to learn about some mathematical notations in X code in Swift actually.

16
00:01:07.710 --> 00:01:13.700
So let me say that I have a number and this number is of 1.

17
00:01:13.950 --> 00:01:22.410
So I can add some new thing to this number by saying that my number is now my number plus 1.

18
00:01:22.410 --> 00:01:27.900
So if I call my number right now what will happen to my number.

19
00:01:27.930 --> 00:01:34.430
It will be to write because it will add 1 to 1 and it will find 2.

20
00:01:34.560 --> 00:01:36.600
So this is easy.

21
00:01:36.600 --> 00:01:40.080
And we have another way of doing this.

22
00:01:40.470 --> 00:01:42.830
And it is even easier.

23
00:01:42.860 --> 00:01:46.980
So you can do it like this plus equals 2 1.

24
00:01:47.820 --> 00:01:50.970
And these two lines are exactly the same.

25
00:01:50.970 --> 00:01:55.830
So it means that my number equals my number plus 1.

26
00:01:55.830 --> 00:02:02.270
So if I do this one more time and if I call my number what will happen to my number.

27
00:02:02.340 --> 00:02:04.340
So it will be three.

28
00:02:04.410 --> 00:02:05.450
Right.

29
00:02:05.450 --> 00:02:06.410
It goes.

30
00:02:06.510 --> 00:02:09.010
It started as a 1 and we added 1.

31
00:02:09.030 --> 00:02:16.970
So we came up with two and now we added 1 and we came up the tree so why are we using this.

32
00:02:16.970 --> 00:02:20.900
Because I'm going to use this technique in the loops as well.

33
00:02:20.930 --> 00:02:26.400
So right now you know how to add one or how to do this.

34
00:02:26.450 --> 00:02:30.130
Plus equals think and it works for minus as well.

35
00:02:30.140 --> 00:02:39.130
So you can't say minus equals to 1 and it will subtract one from my number and at the end of this lecture

36
00:02:39.130 --> 00:02:47.450
re going to learn how to compare some numbers for example how to compare my number with one hub to see

37
00:02:47.720 --> 00:02:50.960
if my number is less than 1 greater than 1.

38
00:02:51.170 --> 00:02:54.890
And we will use this a lot during when we building apps.

39
00:02:54.940 --> 00:02:55.710
OK.

40
00:02:56.060 --> 00:02:59.890
So let's suppose that I have a number zero.

41
00:02:59.960 --> 00:03:04.730
So this is another variable and its value is zero.

42
00:03:04.880 --> 00:03:09.330
And we're going to use this number inside of our via a loop.

43
00:03:09.380 --> 00:03:13.230
So basically we're going to use the key verbs wild.

44
00:03:13.340 --> 00:03:14.080
OK.

45
00:03:14.130 --> 00:03:22.280
Call while n after the vile statement you have to give your condition.

46
00:03:22.850 --> 00:03:27.970
So we literally gonna say while this condition holds.

47
00:03:28.130 --> 00:03:29.360
Do the following.

48
00:03:29.480 --> 00:03:30.350
OK.

49
00:03:30.470 --> 00:03:39.110
And maybe you realize that while is shown in pink and so Wah and so import so we are he importing your

50
00:03:39.110 --> 00:03:40.730
library here.

51
00:03:40.730 --> 00:03:44.000
So these keywords are shown in a different color.

52
00:03:44.000 --> 00:03:51.410
So these are these are predefined keywords so that we can understand something will happen when we use

53
00:03:51.770 --> 00:03:53.140
those keywords.

54
00:03:53.270 --> 00:03:57.470
And again while is one of them OK.

55
00:03:57.620 --> 00:04:04.580
And we didn't really talk about library so what did what does it mean to impart some you like it.

56
00:04:04.640 --> 00:04:11.720
So you like it basically provides the basic functionality so that we can use SWIFT code we can see the

57
00:04:11.720 --> 00:04:18.230
inputs and outputs we can reach the String class we can reach the integers and everything.

58
00:04:18.280 --> 00:04:25.090
OK we're going to import another library is later on during our course.

59
00:04:25.130 --> 00:04:27.730
Don't worry about this right now.

60
00:04:27.770 --> 00:04:33.500
So for example I can do this while my number is less than 10.

61
00:04:33.650 --> 00:04:36.140
So that's what I was talking about.

62
00:04:36.500 --> 00:04:38.900
We're going to compare this number.

63
00:04:38.900 --> 00:04:40.620
So what does this mean.

64
00:04:41.090 --> 00:04:44.980
I say while number is less than 10.

65
00:04:45.140 --> 00:04:50.240
I open that curly brace and it closes it automatically.

66
00:04:50.240 --> 00:04:54.080
So remember this creates a coding block for me.

67
00:04:54.080 --> 00:05:02.540
And what they were I write here will be only called inside of a while loop so will be only executed

68
00:05:02.870 --> 00:05:04.610
inside of while loop.

69
00:05:04.610 --> 00:05:14.050
So whatever I write here is only going to be executed while number is less than 10.

70
00:05:14.060 --> 00:05:19.710
So for example let me print the number and let me add the one to my number.

71
00:05:19.790 --> 00:05:21.950
So let's see what will happen.

72
00:05:21.950 --> 00:05:31.240
Let me run this and you will see what I mean in the logs you will see 0 1 2 3 4 5 6 7 8 9.

73
00:05:31.340 --> 00:05:32.510
So that's fantastic.

74
00:05:32.510 --> 00:05:34.400
How did it happen.

75
00:05:34.460 --> 00:05:38.010
So as long as number was less than 10.

76
00:05:38.210 --> 00:05:39.950
This vent in a loop.

77
00:05:39.950 --> 00:05:41.700
So it started with zero.

78
00:05:41.840 --> 00:05:44.660
And it was less than 10.

79
00:05:44.720 --> 00:05:46.550
So it printed out zero.

80
00:05:46.670 --> 00:05:54.170
And it added the one to zero and it went back to the beginnings and it controlled one more time one

81
00:05:54.170 --> 00:06:02.630
was less than 10 and it printed out the one and it added one to the one it vent up until nine.

82
00:06:02.840 --> 00:06:10.460
So it printed out nine and it added one to the nine and it it was 10 right now.

83
00:06:10.460 --> 00:06:13.280
So ten was not less than 10.

84
00:06:13.310 --> 00:06:17.850
So our loop was and that's OK.

85
00:06:17.870 --> 00:06:23.970
So as long as no was less than 10 it got executed.

86
00:06:24.170 --> 00:06:30.650
And once it was more than 10 it stopped being executed.

87
00:06:31.040 --> 00:06:38.750
So if I change this to less than an equal to it will also print out the ten eyes you might see.

88
00:06:39.200 --> 00:06:47.060
So you can't change this number I can play with it and you will see that as long as this condition holds

89
00:06:47.390 --> 00:06:49.340
this will continue.

90
00:06:49.340 --> 00:06:57.140
So writing this will continue printing and as you can see well they were right inside of this block

91
00:06:57.220 --> 00:07:05.240
coding block is only got egg is being executed inside of this why a loop.

92
00:07:05.240 --> 00:07:13.550
So we're going to learn about if later on but let me create a character over here so I'm going to call

93
00:07:13.550 --> 00:07:15.220
this var character alive.

94
00:07:15.220 --> 00:07:16.690
True.

95
00:07:16.990 --> 00:07:27.070
So I can check to see if my character is alive condition holds so I can just go over here and say vile

96
00:07:27.070 --> 00:07:29.360
character alive is true.

97
00:07:29.380 --> 00:07:30.430
Do the following.

98
00:07:30.490 --> 00:07:31.150
Right.

99
00:07:31.150 --> 00:07:33.660
So it doesn't have to be an integer.

100
00:07:33.670 --> 00:07:36.040
It doesn't have to be less than greater than.

101
00:07:36.540 --> 00:07:41.640
So I can just say like this wild character alive is true.

102
00:07:41.770 --> 00:07:43.330
Then do the following.

103
00:07:44.200 --> 00:07:53.180
For example you can print out and why am I using two equations two equal size rather than one.

104
00:07:53.260 --> 00:07:59.340
If I do two equals size it means that just check if they're equal or not.

105
00:07:59.410 --> 00:08:04.360
If I do one equals sign it means that make it equals.

106
00:08:04.370 --> 00:08:13.240
OK so when I use to equal size I am checking for something to see if they are true or not.

107
00:08:14.430 --> 00:08:22.440
So in this case I am checking to see if the character alive is actually true.

108
00:08:22.440 --> 00:08:31.020
So while character alive is true I'm going to print character alive and of course I'm going to say character

109
00:08:31.020 --> 00:08:31.360
alive.

110
00:08:31.370 --> 00:08:32.190
False.

111
00:08:32.310 --> 00:08:41.070
So this will get only just rum one time because it will change it to false and it will stop doing this

112
00:08:41.330 --> 00:08:43.420
and it doesn't make sense I know.

113
00:08:43.530 --> 00:08:52.410
But if I don't do this it will be an infinite loop so we will see an infinite number of character alive

114
00:08:52.440 --> 00:08:57.420
printing over here because it won't just break out of the loop.

115
00:08:57.570 --> 00:09:06.000
It won't stop the loop so just for an example I did that so that you would see you can use a boolean

116
00:09:06.000 --> 00:09:11.400
you can't see any teacher you can even use as string in here as well.

117
00:09:11.400 --> 00:09:20.520
So while this condition holds and the condition doesn't even matter as long as it makes sense obviously.

118
00:09:21.360 --> 00:09:28.280
So right now let me show you the other checkpoints like we can do something like this right.

119
00:09:28.290 --> 00:09:38.100
So tree is less than 5 so you can control to see if tree is less than 5 and it will give you at 2 boolean.

120
00:09:38.640 --> 00:09:45.660
So this is indeed less than 5 and you can do something like this 5 is less than 3 and it will give you

121
00:09:45.660 --> 00:09:46.710
false.

122
00:09:46.770 --> 00:09:50.890
So this is less than of course you can do a greater of them.

123
00:09:50.970 --> 00:09:51.670
Okay.

124
00:09:51.680 --> 00:09:53.700
Life is greater than 3.

125
00:09:53.880 --> 00:10:00.000
You can go for less than or equal to greater done and equal to as well.

126
00:10:00.000 --> 00:10:07.260
And you can do something like this equal to two equal size so important here.

127
00:10:07.260 --> 00:10:13.040
Greater than equal to first greater sign later equals sign.

128
00:10:13.080 --> 00:10:16.950
So less than an equal to less sign equals sign.

129
00:10:17.130 --> 00:10:27.540
And if you're checking for being equal to equal size and actually we have something called a not equal

130
00:10:27.540 --> 00:10:28.890
to as well.

131
00:10:28.890 --> 00:10:35.120
So you can't control like this exclamation point and an equal sign.

132
00:10:35.280 --> 00:10:45.250
So it means that this is not equal to and as you can see we get to as the output of this so this is

133
00:10:45.250 --> 00:10:46.120
kind of cool right.

134
00:10:46.120 --> 00:10:53.380
We can use this kind of mathematical operations in our coats and we're going to use those a lot.

135
00:10:53.380 --> 00:11:04.120
And even if we're not using those with integers we're using these widths billions of strings and everything.

136
00:11:04.120 --> 00:11:09.770
Later on we're going to go a little bit deeper on this subject as well.

137
00:11:09.790 --> 00:11:15.670
Right now I'm going to stop here and within the next lecture we're going to continue with another loop

138
00:11:15.670 --> 00:11:17.200
called for loop.
