WEBVTT
1
00:00:00.540 --> 00:00:01.220
Hi.

2
00:00:01.360 --> 00:00:05.910
We didn't this lecture we gonna make our calculators safe.

3
00:00:05.910 --> 00:00:13.090
And later on we're going to focus on a subject called scope which is very important in first.

4
00:00:13.140 --> 00:00:16.840
So we're going to see you out of this in just a few minutes.

5
00:00:16.860 --> 00:00:22.570
So first of all let me start by just solving this problem that we have wi fi.

6
00:00:22.580 --> 00:00:24.020
First I read this.

7
00:00:24.030 --> 00:00:31.830
This will be irregular in so I can just some of them together but it crashes my application then user

8
00:00:31.830 --> 00:00:34.540
gives me a bad input.

9
00:00:34.680 --> 00:00:37.340
So how do I go for that.

10
00:00:37.370 --> 00:00:42.670
If I just delete this for zone wrap think then it will give me an error.

11
00:00:42.810 --> 00:00:47.490
So of course I'm going to go with this if that's OK.

12
00:00:47.730 --> 00:00:49.090
So we have seen this.

13
00:00:49.110 --> 00:00:59.250
What does it mean if you can convert this first text that text into an integer then cast this to a variable

14
00:00:59.250 --> 00:01:07.950
called first number assign this to the variable called first number so I can work with this first number

15
00:01:08.490 --> 00:01:15.300
then I'm going to do that for second number as well inside of this if I'm going to delete the Second

16
00:01:15.990 --> 00:01:24.420
Optional first I'm wrapping sorry over here and as you can see I have and if control and inside of this

17
00:01:24.420 --> 00:01:26.180
I have another if control.

18
00:01:26.370 --> 00:01:34.680
So that's OK I can have as many as I want so if statements can be layered as this.

19
00:01:34.680 --> 00:01:42.180
So first if statement if this works then I'm going to check for the second one and if that works I'm

20
00:01:42.180 --> 00:01:44.090
going to do what I am going to do.

21
00:01:44.340 --> 00:01:45.170
OK.

22
00:01:45.240 --> 00:01:51.450
So this will check to convert first text that text into an integer.

23
00:01:51.600 --> 00:01:59.490
And if that succeeds it's going to do the second one and then I can say first number plus second number

24
00:01:59.490 --> 00:02:04.630
and as you can see first number and second number is not optional anymore.

25
00:02:04.800 --> 00:02:12.990
So I can go for the result labeled that text is string representation of the result itself.

26
00:02:13.080 --> 00:02:18.390
So let's try this way and let's see if that works for us.

27
00:02:18.450 --> 00:02:22.160
So the user will come over here let's see first.

28
00:02:22.180 --> 00:02:25.140
3 to 2 they will see 5.

29
00:02:25.170 --> 00:02:26.480
So this works.

30
00:02:26.640 --> 00:02:28.200
So we didn't break it I think.

31
00:02:28.440 --> 00:02:31.850
So let's try Apple and hit plus.

32
00:02:31.860 --> 00:02:36.470
And as you can see this doesn't give me a crash.

33
00:02:36.720 --> 00:02:44.940
And of course you can have an L statement over here and you can say result labeled dot text.

34
00:02:44.940 --> 00:02:47.160
Bring me a number give me a number.

35
00:02:47.190 --> 00:02:48.620
Don't give me any string.

36
00:02:48.630 --> 00:02:51.650
Don't give me any tax don't write Apple here.

37
00:02:51.870 --> 00:02:59.640
So you can display a message to user in a way like that but this is perfect for right now.

38
00:02:59.670 --> 00:03:03.470
This is what I have been looking for.

39
00:03:03.540 --> 00:03:11.550
So this works and the rest is pretty much to say we are going to actually copy all of this and place

40
00:03:11.550 --> 00:03:14.270
them into the other functions as well.

41
00:03:14.400 --> 00:03:20.460
So I'm going to copy all of this with common C and with command V I'm going to pass it over here and

42
00:03:20.460 --> 00:03:30.590
say minus rather than plus I'm going to do the same thing here with multiply and then over here we divide

43
00:03:30.600 --> 00:03:32.250
sign.

44
00:03:32.250 --> 00:03:33.300
So here you go.

45
00:03:33.300 --> 00:03:36.880
We actually made our first calculator.

46
00:03:37.080 --> 00:03:39.890
So let's go and test this.

47
00:03:39.960 --> 00:03:44.330
Of course I how casted everything as integers.

48
00:03:44.340 --> 00:03:51.180
Maybe we can do it with doubles or something but right now this works in a way that we want.

49
00:03:51.420 --> 00:03:57.670
We don't have to make this complicated because we're building diverse calculate forever right.

50
00:03:57.720 --> 00:03:58.890
So that's OK.

51
00:03:58.910 --> 00:04:08.820
But since we're here let me tell you one of the most important concepts in swift in this lecture so

52
00:04:08.820 --> 00:04:11.750
we're going to be talking about scope.

53
00:04:11.820 --> 00:04:13.040
So what does it mean.

54
00:04:13.060 --> 00:04:16.030
So let me tidy up here a little bit.

55
00:04:16.030 --> 00:04:18.250
OK so we can see better.

56
00:04:18.360 --> 00:04:25.860
I'm going to write some quotes over here as well because I'm going to work on scope and by scope I mean

57
00:04:26.100 --> 00:04:28.510
the scope of the variables.

58
00:04:28.650 --> 00:04:36.630
So here I am defining some first numbers take a number and everything's in some clicked function and

59
00:04:36.630 --> 00:04:43.870
doing the same in minus clicked and I can have as many functions as I want in here right.

60
00:04:43.890 --> 00:04:49.890
I have this we did load I had this some clicked I have this minus clicked and I have these variables

61
00:04:49.890 --> 00:04:59.170
over here so what if I want to create a variable inside of one function and can I reach.

62
00:04:59.180 --> 00:05:02.550
That's very well inside of another function.

63
00:05:02.700 --> 00:05:07.050
So for example in we did load what was we did load again.

64
00:05:07.050 --> 00:05:13.280
So this is the first thing happens when the app is low that's when users seize the app.

65
00:05:13.380 --> 00:05:15.810
But they were I right here gets executed.

66
00:05:15.800 --> 00:05:16.390
That's right.

67
00:05:16.650 --> 00:05:21.580
So we don't need that in this application so it stays empty.

68
00:05:21.660 --> 00:05:27.000
But we need our we don't need anything to happen when the first app lunches.

69
00:05:27.000 --> 00:05:30.260
We need something to happen when user clicks on some buttons.

70
00:05:30.270 --> 00:05:34.080
So we have written our codes inside of button actions.

71
00:05:34.080 --> 00:05:39.510
But for example let me create a variable inside of this we've did load.

72
00:05:39.660 --> 00:05:43.410
So I have a number or here I can change its value.

73
00:05:43.410 --> 00:05:44.140
Okay.

74
00:05:44.210 --> 00:05:48.030
1 2 through for example and this is perfectly okay.

75
00:05:48.030 --> 00:05:49.540
I have created this.

76
00:05:49.650 --> 00:05:51.660
I have changed its value.

77
00:05:51.660 --> 00:05:58.710
I can do whatever I want to do with this I can make my result labeled up text equal to string my number

78
00:05:58.710 --> 00:06:02.340
for example or I can just print this.

79
00:06:02.520 --> 00:06:03.910
And that's perfectly OK.

80
00:06:03.910 --> 00:06:05.160
This will work.

81
00:06:05.430 --> 00:06:13.580
But what happens if I want to change did my numbers value inside of my sum clicked function.

82
00:06:13.620 --> 00:06:15.330
Can I do that.

83
00:06:15.540 --> 00:06:18.420
I cannot do that actually.

84
00:06:18.600 --> 00:06:25.950
And this will give me an error as soon as you can see it says that this is our result envoys it's our

85
00:06:25.950 --> 00:06:32.270
result because it's not in the scope of some clicked function it's in the scope of with the load.

86
00:06:32.520 --> 00:06:36.110
So we have created this variable inside of wildfire.

87
00:06:36.120 --> 00:06:40.230
Jim we cannot call that variable in any other function.

88
00:06:40.440 --> 00:06:48.600
OK so I cannot do that and this first number in here is completely different than this first number

89
00:06:48.600 --> 00:06:49.080
in here.

90
00:06:49.080 --> 00:06:52.080
So these are two different variables over here.

91
00:06:52.080 --> 00:06:58.290
OK I can just call them same I can just call them different names.

92
00:06:58.290 --> 00:07:03.700
It doesn't matter because they're completely different variables anyway.

93
00:07:04.050 --> 00:07:12.140
So if I create a variable in the sum collect I cannot change that in the minus clicked.

94
00:07:12.540 --> 00:07:16.320
And is there a way to create a variable.

95
00:07:16.530 --> 00:07:22.970
I reach this variable in all functions why I cannot do that.

96
00:07:23.130 --> 00:07:24.990
Of course there is a way to do that.

97
00:07:25.410 --> 00:07:28.000
And in fact we're doing that right now.

98
00:07:28.080 --> 00:07:28.370
Right.

99
00:07:28.380 --> 00:07:31.600
We have this class and we haven't seen other classes.

100
00:07:31.740 --> 00:07:35.200
We will see in a separate section in a detailed section.

101
00:07:35.220 --> 00:07:41.880
But as you can see this class has some different functions different variables inside of it.

102
00:07:41.910 --> 00:07:49.610
So this should be something important and we're doing everything inside of our class.

103
00:07:49.770 --> 00:07:59.250
So I have defined this first tax second tax end result label under my class but they are not even inside

104
00:07:59.250 --> 00:08:00.960
of a function right now.

105
00:08:00.960 --> 00:08:10.200
So if I come under my some clicks I can call them if I come under my minus clicked I can call them.

106
00:08:10.200 --> 00:08:15.090
So these variables are actually in the class level right.

107
00:08:15.090 --> 00:08:18.600
These are not in functions.

108
00:08:18.600 --> 00:08:26.070
And in fact we couldn't drag and drop these views into the functions as you might remember we couldn't

109
00:08:26.070 --> 00:08:27.340
drop them inside.

110
00:08:27.350 --> 00:08:28.140
We did load.

111
00:08:28.200 --> 00:08:33.340
We have to make sure that they are defined inside of the class.

112
00:08:33.420 --> 00:08:35.220
So you find do the same thing.

113
00:08:35.520 --> 00:08:44.010
I can't create this number for example in here and I can't reach that number inside of every function

114
00:08:44.010 --> 00:08:45.210
that I have.

115
00:08:45.270 --> 00:08:56.580
So I can create the results in here with zero initial value then I can call these results anywhere I

116
00:08:56.580 --> 00:08:56.870
want.

117
00:08:56.880 --> 00:08:57.150
Right.

118
00:08:57.150 --> 00:08:59.710
I can called is under the load.

119
00:09:00.120 --> 00:09:04.190
So as you can see no I can change this result value.

120
00:09:04.860 --> 00:09:10.650
So I how defined and initialized is under my class.

121
00:09:10.650 --> 00:09:18.570
Then I can call this value and I can change its value from wherever I want.

122
00:09:18.570 --> 00:09:26.430
So rather than creating a new result over here I can just a sign my results first number plus second

123
00:09:26.440 --> 00:09:27.330
number.

124
00:09:27.340 --> 00:09:28.290
OK.

125
00:09:28.560 --> 00:09:34.140
So this is going to be this as you can see if I click on it it will be highlighted.

126
00:09:34.140 --> 00:09:39.240
So this refers again to this variable over here.

127
00:09:39.360 --> 00:09:46.810
So we're using the same results in my class in my sum clicked function everywhere.

128
00:09:47.190 --> 00:09:53.060
So we're using the same variable we can do that under other functions as well.

129
00:09:53.580 --> 00:10:05.050
So that I can reach and use the same variable my old functions it is much more efficient to do this

130
00:10:05.650 --> 00:10:06.880
in this way.

131
00:10:07.040 --> 00:10:07.500
Okay.

132
00:10:07.510 --> 00:10:13.030
Rather than creating new result variables and it works like this.

133
00:10:13.030 --> 00:10:17.920
When I type results it first looks.

134
00:10:17.920 --> 00:10:21.970
If I created the result inside of this function.

135
00:10:21.970 --> 00:10:22.810
Okay.

136
00:10:22.990 --> 00:10:30.790
If there is a result variable that I have previously created here then it works with that variable.

137
00:10:30.790 --> 00:10:35.000
If it cannot find a result it looks over here.

138
00:10:35.080 --> 00:10:44.260
So if there is another variable in class and if it cannot find it actually looks outside of the class

139
00:10:44.260 --> 00:10:49.770
as well so I can create a variable outside of my class as well.

140
00:10:49.780 --> 00:10:51.730
And this is called global variable.

141
00:10:51.780 --> 00:10:58.450
Where we going to work with these global variables later on but we generally do not prefer to do this

142
00:10:58.450 --> 00:11:07.210
very much in our applications because it's not very safe we can easily make a mistake or here but this

143
00:11:07.210 --> 00:11:08.710
is valid as well.

144
00:11:08.830 --> 00:11:16.300
If it cannot find the result the inside of the function inside of the class it can look to find the

145
00:11:16.300 --> 00:11:25.600
result outside of the class as well and if it cannot find outside of the class it's actually what looks

146
00:11:25.600 --> 00:11:29.340
for predefined values like let var.

147
00:11:29.470 --> 00:11:34.820
So is Derrick keyword or is there a predefined swift value in here.

148
00:11:34.900 --> 00:11:39.480
And if it doesn't find anything it gives me an hour result.

149
00:11:39.520 --> 00:11:41.290
Identify your error.

150
00:11:41.400 --> 00:11:43.890
Okay it works like this.

151
00:11:44.140 --> 00:11:50.800
So make sure you create your variables inside of your functional inside of your class or even outside

152
00:11:50.800 --> 00:11:55.780
of your class whenever or wherever you may want to create.

153
00:11:55.780 --> 00:12:00.090
So decide the optimal place in your own case.

154
00:12:00.190 --> 00:12:04.100
We go to see a lot of examples regarding to this.

155
00:12:04.220 --> 00:12:07.470
I'm just explaining how it works right now.

156
00:12:07.480 --> 00:12:09.980
Don't worry about that.

157
00:12:10.030 --> 00:12:12.550
So as you can see this works.

158
00:12:12.550 --> 00:12:22.150
And if I divide to buy treat gives me zero because this is an integer but the I just divide or some

159
00:12:22.160 --> 00:12:25.110
does Apple with treats doesn't crash.

160
00:12:25.120 --> 00:12:28.030
So that's important right now.

161
00:12:28.030 --> 00:12:31.650
And we have completed our first stop.

162
00:12:31.660 --> 00:12:33.940
So congratulations.

163
00:12:33.940 --> 00:12:41.170
And following the next section we're going to work with the layouts a little bit more and then we're

164
00:12:41.170 --> 00:12:45.400
going to start working on real apps real examples.
