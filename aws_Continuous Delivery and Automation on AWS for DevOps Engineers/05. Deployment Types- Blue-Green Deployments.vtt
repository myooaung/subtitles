WEBVTT
1
00:00:01.040 --> 00:00:04.940
The next type of deployment we'll look at is a blue/green deployment.

2
00:00:04.940 --> 00:00:06.100
Now, with blue/green deployments,

3
00:00:06.100 --> 00:00:09.000
there's a few different ways we can control how we shift

4
00:00:09.000 --> 00:00:11.900
traffic between versions of our application.

5
00:00:11.900 --> 00:00:15.580
The first is called a canary deployment where we deploy just a little bit of

6
00:00:15.580 --> 00:00:18.940
traffic to test it out before we deploy everything else.

7
00:00:18.940 --> 00:00:21.290
Then there's a linear deployment type,

8
00:00:21.290 --> 00:00:24.440
which allows us to slowly scale up the amount of traffic

9
00:00:24.440 --> 00:00:26.770
we send to our new application version,

10
00:00:26.770 --> 00:00:30.240
and we do this piece by piece over a little bit of time.

11
00:00:30.240 --> 00:00:30.850
And finally,

12
00:00:30.850 --> 00:00:34.770
there's an all‑at‑once blue/green deployment where we instantly shift all

13
00:00:34.770 --> 00:00:38.920
the traffic from our version 1 to our version 2 of our application or the

14
00:00:38.920 --> 00:00:41.170
subsequent versions as we continue development.

15
00:00:41.170 --> 00:00:44.420
All of these different blue/green deployment traffic shifting

16
00:00:44.420 --> 00:00:47.810
models can be deployed in different scenarios with different AWS

17
00:00:47.810 --> 00:00:50.080
services that CodeDeploy will deploy to.

18
00:00:50.080 --> 00:00:52.510
So let's look at some specific examples,

19
00:00:52.510 --> 00:00:54.900
starting with blue/green deployments and EC2.

20
00:00:54.900 --> 00:00:58.200
Pretty similar to what we were looking at within place deployments,

21
00:00:58.200 --> 00:01:00.750
we'd start with a load balancer shifting traffic

22
00:01:00.750 --> 00:01:03.240
between 1 version of our application, in this case,

23
00:01:03.240 --> 00:01:05.500
the version 1 being called the blue version,

24
00:01:05.500 --> 00:01:08.350
and the second version of our application that we'll eventually

25
00:01:08.350 --> 00:01:11.140
want to put version 2 of our software on.

26
00:01:11.140 --> 00:01:13.540
What will happen is we'll take revisions for the

27
00:01:13.540 --> 00:01:15.160
second version of our application,

28
00:01:15.160 --> 00:01:18.900
and we'll move those over to our second set of instances,

29
00:01:18.900 --> 00:01:20.440
or autoscaling group,

30
00:01:20.440 --> 00:01:25.440
and then we'll do some optional testing against this newer green version.

31
00:01:25.440 --> 00:01:28.570
When we run these tests and they are proved successful,

32
00:01:28.570 --> 00:01:30.040
then we could move on to the next step,

33
00:01:30.040 --> 00:01:34.350
which is to shift traffic from version 1 to version 2 of our application,

34
00:01:34.350 --> 00:01:37.040
and this is where those different deployment strategies

35
00:01:37.040 --> 00:01:39.280
come in where we can choose either linear,

36
00:01:39.280 --> 00:01:41.220
canary, or all at once,

37
00:01:41.220 --> 00:01:44.440
and that would just determine the speed of this transition.

38
00:01:44.440 --> 00:01:45.210
Eventually,

39
00:01:45.210 --> 00:01:47.900
when we're done with version 1 the application and all traffic

40
00:01:47.900 --> 00:01:51.600
has been switched to version 2, version 2 then becomes considered

41
00:01:51.600 --> 00:01:53.810
the blue version of our application,

42
00:01:53.810 --> 00:01:57.840
or the one will eventually change from into a new green version.

43
00:01:57.840 --> 00:02:01.890
So how do we deal with this same sort of strategy using a different service,

44
00:02:01.890 --> 00:02:03.050
like ECS.

45
00:02:03.050 --> 00:02:07.410
With ECS, instead of instances, we'll have task sets that we'll switch between.

46
00:02:07.410 --> 00:02:09.180
We'll still have the same repository,

47
00:02:09.180 --> 00:02:13.640
and we'll also have a new task set that we send version 2 of our application.

48
00:02:13.640 --> 00:02:14.200
From there,

49
00:02:14.200 --> 00:02:17.320
we'll have the option of doing the same sort of optional testing and

50
00:02:17.320 --> 00:02:20.640
validation that we could do against EC2 services,

51
00:02:20.640 --> 00:02:22.360
and eventually, when we're ready,

52
00:02:22.360 --> 00:02:26.810
we'll change the traffic from test traffic to actual production traffic,

53
00:02:26.810 --> 00:02:30.150
and eventually, remove the first version of our application.

54
00:02:30.150 --> 00:02:33.840
Again, once we've fully transitioned into this new deployment,

55
00:02:33.840 --> 00:02:37.440
this version of the application would be considered the blue version,

56
00:02:37.440 --> 00:02:40.140
and we continue this process over again.

57
00:02:40.140 --> 00:02:43.900
The same thing would happen with blue/green deployments in AWS Lambda.

58
00:02:43.900 --> 00:02:46.540
We send traffic to the first version of our Lambda function,

59
00:02:46.540 --> 00:02:48.660
the blue version, we get a revision,

60
00:02:48.660 --> 00:02:51.930
and then we create a new Lambda function version with that revision.

61
00:02:51.930 --> 00:02:52.420
From there,

62
00:02:52.420 --> 00:02:55.860
we then start switching over traffic to the green version of the application,

63
00:02:55.860 --> 00:03:00.940
the version 2, and eventually phase out version 1 and remove the Lambda function.

64
00:03:00.940 --> 00:03:02.960
Now, this is a lot simpler because we don't have as many

65
00:03:02.960 --> 00:03:05.980
moving parts as with EC2 or with ECS,

66
00:03:05.980 --> 00:03:09.140
but it works basically the same way as we then consider this

67
00:03:09.140 --> 00:03:11.740
version the application the new blue version.

68
00:03:11.740 --> 00:03:14.060
So what are some of the benefits of these different kinds of

69
00:03:14.060 --> 00:03:16.930
deployments when you're working with blue/green deployments?

70
00:03:16.930 --> 00:03:17.340
Well,

71
00:03:17.340 --> 00:03:18.770
they can really help because there's no

72
00:03:18.770 --> 00:03:21.260
interruptions between the traffic shifting.

73
00:03:21.260 --> 00:03:23.840
The traffic gets shifted from the load balancer,

74
00:03:23.840 --> 00:03:28.190
and you move from 1 version of the application in 1 Lambda function, or ECS

75
00:03:28.190 --> 00:03:32.140
task set, or set a EC2 instances directly to the next.

76
00:03:32.140 --> 00:03:35.580
And also, because you maintain two separate versions of your

77
00:03:35.580 --> 00:03:39.330
application, you'll have easy rollbacks to switch to the previous

78
00:03:39.330 --> 00:03:42.680
version if you have something happen like errors or flaws in your

79
00:03:42.680 --> 00:03:45.640
application that weren't caught through testing.

80
00:03:45.640 --> 00:03:46.400
Additionally,

81
00:03:46.400 --> 00:03:49.540
this model of deployment makes it a lot easier to set up tests and

82
00:03:49.540 --> 00:03:53.200
alarms on the versions of your application that can help trigger

83
00:03:53.200 --> 00:03:55.640
these rollbacks if they're required.

84
00:03:55.640 --> 00:04:02.000
So now that we know more about deployment types, let's see how we can actually use these deployments with CodeDeploy.

