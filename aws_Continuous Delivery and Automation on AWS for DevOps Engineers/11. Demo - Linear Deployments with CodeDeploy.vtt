WEBVTT
1
00:00:01.040 --> 00:00:05.240
For the last part of this demo, we'll try another deployment. Instead of the

2
00:00:05.240 --> 00:00:09.120
first employment where we deploy our application from its initial stage, we'll

3
00:00:09.120 --> 00:00:12.790
be moving it from its blue stage to its green stage.

4
00:00:12.790 --> 00:00:13.800
To help illustrate this,

5
00:00:13.800 --> 00:00:17.000
I've created another version of the task that'll have a green

6
00:00:17.000 --> 00:00:18.970
background instead of a blue background.

7
00:00:18.970 --> 00:00:20.400
So let's get started here.

8
00:00:20.400 --> 00:00:22.700
The first thing we'll need to do is to register a task

9
00:00:22.700 --> 00:00:26.290
definition using this new version of the task.

10
00:00:26.290 --> 00:00:30.580
To do this, we'll need to go into the fargate‑task‑green.json file in

11
00:00:30.580 --> 00:00:35.100
p11‑deploy‑new‑version. Scroll down to the very bottom and replace the

12
00:00:35.100 --> 00:00:38.640
ROLE_ARN with the ROLE_ARN we created a while back.

13
00:00:38.640 --> 00:00:41.010
With this new version of our fargate‑task,

14
00:00:41.010 --> 00:00:44.640
we can then go to the commands‑and‑instructions.txt section

15
00:00:44.640 --> 00:00:48.300
and use the aws register‑task‑definition command to send a

16
00:00:48.300 --> 00:00:50.800
new version of this task into ECS.

17
00:00:50.800 --> 00:00:55.030
So we'll copy that command and then paste it in our CLI. Now importantly,

18
00:00:55.030 --> 00:00:58.920
I need to be inside of the p11‑deploy‑new‑version folder to run

19
00:00:58.920 --> 00:01:02.140
this because it's referencing the fargate‑task‑green.json file

20
00:01:02.140 --> 00:01:04.440
that's right next to this command.

21
00:01:04.440 --> 00:01:05.960
Now once we finish this process,

22
00:01:05.960 --> 00:01:09.250
we'll have to scroll up and find the taskDefinitionArn at the

23
00:01:09.250 --> 00:01:12.160
very top towards where we ran this command.

24
00:01:12.160 --> 00:01:12.600
Honestly,

25
00:01:12.600 --> 00:01:15.600
it should look pretty similar to our previous output

26
00:01:15.600 --> 00:01:18.740
value for our previous task definition.

27
00:01:18.740 --> 00:01:21.970
You'll see that if I actually paste over the previous task definition,

28
00:01:21.970 --> 00:01:24.550
the only thing that changes is the number at the end.

29
00:01:24.550 --> 00:01:26.230
It goes from 1 to 2.

30
00:01:26.230 --> 00:01:26.830
But for right now,

31
00:01:26.830 --> 00:01:28.980
let's leave our previous TASK_DEFINITION_ARN the

32
00:01:28.980 --> 00:01:31.300
same and just paste V2 down here.

33
00:01:31.300 --> 00:01:33.440
We'll use this in the next section.

34
00:01:33.440 --> 00:01:36.330
So, now that we've registered this new version of the task

35
00:01:36.330 --> 00:01:39.420
ARN, let's go down here and make sure that we update the

36
00:01:39.420 --> 00:01:42.420
appspec.yml file to reference that.

37
00:01:42.420 --> 00:01:47.110
So instead of having V1 of the application task, we'll paste this in here and

38
00:01:47.110 --> 00:01:52.660
have :2 at the end of it. Now we save this appspec.yml file, and then we can go

39
00:01:52.660 --> 00:01:56.740
and upload this appspec.yml file to our S3 bucket.

40
00:01:56.740 --> 00:02:00.870
Remember, we have the value for this right here in our output.txt file.

41
00:02:00.870 --> 00:02:04.440
So, let's go back to the commands‑and‑instructions and paste it in here, and

42
00:02:04.440 --> 00:02:07.150
then grab the entire command and run this one more time.

43
00:02:07.150 --> 00:02:11.680
This will upload the new version of our appspec file into our S3 bucket,

44
00:02:11.680 --> 00:02:14.440
and then we can just go back to the CodeDeploy console.

45
00:02:14.440 --> 00:02:17.340
This is what it looked like previously when I had just deployed

46
00:02:17.340 --> 00:02:19.980
the original task set to our infrastructure.

47
00:02:19.980 --> 00:02:23.080
But now what we're going to do is go back to the Applications section,

48
00:02:23.080 --> 00:02:25.730
click on our tutorial‑bluegreen‑app,

49
00:02:25.730 --> 00:02:28.090
go down and click on our deployment groups here,

50
00:02:28.090 --> 00:02:30.540
and we'll create a new deployment.

51
00:02:30.540 --> 00:02:33.760
Now when doing this, we can paste this same value we just

52
00:02:33.760 --> 00:02:37.170
copied if it doesn't appear here directly for us to click on,

53
00:02:37.170 --> 00:02:40.220
and then we can select the revision type of the file, and we'll

54
00:02:40.220 --> 00:02:44.410
click .yml. Now importantly, if we want to change this up a bit,

55
00:02:44.410 --> 00:02:47.680
we can go to Deployment group overrides and go from

56
00:02:47.680 --> 00:02:52.540
ECSAllAtOnce to ECSLinear10PercentEvery1Minutes.

57
00:02:52.540 --> 00:02:55.000
This will change the deployment strategy we're using to

58
00:02:55.000 --> 00:02:59.160
shift traffic from one task set to another over the process

59
00:02:59.160 --> 00:03:01.900
of a few minutes, at 10 minutes, to be exact,

60
00:03:01.900 --> 00:03:05.500
because we'll transfer 10% every single minute. So we'll

61
00:03:05.500 --> 00:03:07.530
leave this as a deployment group override,

62
00:03:07.530 --> 00:03:09.290
and we'll click Create deployment.

63
00:03:09.290 --> 00:03:12.310
Now this deviates from the original deployment strategy that we had,

64
00:03:12.310 --> 00:03:14.920
which was all at once, but it will allow us to start

65
00:03:14.920 --> 00:03:17.340
to shift traffic piece by piece,

66
00:03:17.340 --> 00:03:21.410
and you'll see that the original currently gets 100% of the traffic right now.

67
00:03:21.410 --> 00:03:23.740
But as we go through the deployment process,

68
00:03:23.740 --> 00:03:27.310
this will shift by 10% every minute after we've gotten to

69
00:03:27.310 --> 00:03:30.870
that step. I've waited for a few minutes,

70
00:03:30.870 --> 00:03:33.780
and now we can see that the traffic has started shifting from our

71
00:03:33.780 --> 00:03:36.670
original task set to our replacement task set.

72
00:03:36.670 --> 00:03:40.890
Now in order to see this visually, we can go over to the Services section,

73
00:03:40.890 --> 00:03:44.530
go to EC2 and open that up in a new tab, and if we haven't

74
00:03:44.530 --> 00:03:47.640
already opened up the load balancer from before,

75
00:03:47.640 --> 00:03:51.240
we could go back to the load balancer section and copy this DNS name

76
00:03:51.240 --> 00:03:54.920
here. Now in order to see what this looks like, we'll just paste it

77
00:03:54.920 --> 00:03:57.270
into our browser here and hit Enter.

78
00:03:57.270 --> 00:04:00.030
Currently, we're getting the blue version of the application,

79
00:04:00.030 --> 00:04:02.730
but if I start refreshing the page a few times,

80
00:04:02.730 --> 00:04:06.620
I should eventually get a green version like I did just now.

81
00:04:06.620 --> 00:04:08.720
Now, at the moment, if I keep refreshing it,

82
00:04:08.720 --> 00:04:13.050
I'm going to go back and forth between blue and green, and that's because our

83
00:04:13.050 --> 00:04:17.450
application load balancer is shifting traffic between two different ECS test

84
00:04:17.450 --> 00:04:20.440
sets running different versions of our application.

85
00:04:20.440 --> 00:04:21.310
Eventually,

86
00:04:21.310 --> 00:04:25.000
as our application shifts more traffic over to the replacement, we'll

87
00:04:25.000 --> 00:04:27.580
see the green happening a lot more than the blue.

88
00:04:27.580 --> 00:04:28.570
And when it's finished,

89
00:04:28.570 --> 00:04:33.640
we'll only see the green in our application. Alright, I've skipped ahead

90
00:04:33.640 --> 00:04:36.860
to when the traffic shifting has gone to about 50/50.

91
00:04:36.860 --> 00:04:40.600
So if we go back to our application and start refreshing the page again,

92
00:04:40.600 --> 00:04:44.690
we should start going about 50/50 between the two different colors.

93
00:04:44.690 --> 00:04:46.360
Almost every time I refresh,

94
00:04:46.360 --> 00:04:51.080
we should see a change between the two versions. Now that all the traffic

95
00:04:51.080 --> 00:04:54.630
has been moved over to our replacement task set, if we go back over to the

96
00:04:54.630 --> 00:04:58.460
ALB URL here and start refreshing the screen more, we shouldn't see the

97
00:04:58.460 --> 00:05:02.730
blue version of the application, no matter how many times we refresh the screen.

98
00:05:02.730 --> 00:05:04.810
This is because we finished our deployment, and we're not

99
00:05:04.810 --> 00:05:08.040
serving any of that traffic from the old version.

100
00:05:08.040 --> 00:05:09.310
In a few more minutes,

101
00:05:09.310 --> 00:05:12.810
this deployment should finish and eventually remove the original task

102
00:05:12.810 --> 00:05:15.640
set that's not currently serving any more traffic.

103
00:05:15.640 --> 00:05:18.710
Then it'll clean up all the remaining resources that are running

104
00:05:18.710 --> 00:05:22.550
under the original, and the replacement will become that original

105
00:05:22.550 --> 00:05:24.440
and continue running our application.

106
00:05:24.440 --> 00:05:27.760
You can review the full process and the records down below,

107
00:05:27.760 --> 00:05:31.040
but we're really done for this section here. You've managed to deploy

108
00:05:31.040 --> 00:05:35.110
an application to ECS using AWS CodeDeploy, both the initial version

109
00:05:35.110 --> 00:05:38.750
of the application and a later version with the blue/green deployment

110
00:05:38.750 --> 00:05:40.540
style we talked about earlier.

111
00:05:40.540 --> 00:05:44.020
And we managed to use two different traffic shifting methods, an

112
00:05:44.020 --> 00:05:47.350
all at once method for that original version and the linear

113
00:05:47.350 --> 00:05:53.000
method where we shift 10% of the traffic at a time in the second version that we just did now.

