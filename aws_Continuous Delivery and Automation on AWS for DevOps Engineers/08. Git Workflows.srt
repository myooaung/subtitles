1
00:00:01,340 --> 00:00:03,970
Now that we know some basic concepts around Git,

2
00:00:03,970 --> 00:00:07,150
let's look at some different workflows we might use depending on the

3
00:00:07,150 --> 00:00:11,200
project that we're working on. We might have a simple Git workflow that

4
00:00:11,200 --> 00:00:13,490
looks very similar to what we were doing earlier,

5
00:00:13,490 --> 00:00:16,470
where we just have one single remote repository and our

6
00:00:16,470 --> 00:00:19,450
local repository, and we go through all the steps I talked

7
00:00:19,450 --> 00:00:21,660
about earlier on the same branch,

8
00:00:21,660 --> 00:00:25,040
typically something called main, or sometimes master.

9
00:00:25,040 --> 00:00:26,220
But in this case,

10
00:00:26,220 --> 00:00:29,230
we'd only really do this when we're working on our own,

11
00:00:29,230 --> 00:00:32,010
without a team putting in commits alongside us,

12
00:00:32,010 --> 00:00:34,990
and also without having to worry about whether we're stomping

13
00:00:34,990 --> 00:00:37,540
on our own toes by working on multiple features at the same

14
00:00:37,540 --> 00:00:40,340
time. For more complicated projects,

15
00:00:40,340 --> 00:00:42,710
we might end up using something like Git Flow,

16
00:00:42,710 --> 00:00:45,090
which is an option when you have to maintain multiple

17
00:00:45,090 --> 00:00:47,480
versions of the same pieces of software.

18
00:00:47,480 --> 00:00:50,660
So if you have one customer expecting that you'll maintain one

19
00:00:50,660 --> 00:00:53,940
version of software for them, and another customer expecting that

20
00:00:53,940 --> 00:00:56,130
you'll maintain another version for them,

21
00:00:56,130 --> 00:00:59,640
Git Flow can be pretty useful for this because it has the ability to

22
00:00:59,640 --> 00:01:03,040
support those sorts of changes and that kind of maintenance.

23
00:01:03,040 --> 00:01:07,000
One of the drawbacks is that it is pretty complicated, and while it can be

24
00:01:07,000 --> 00:01:09,950
great for managing those multiple versions of software,

25
00:01:09,950 --> 00:01:13,240
it was actually popularized before web development,

26
00:01:13,240 --> 00:01:16,670
meaning that for a lot of web developers, you don't really have

27
00:01:16,670 --> 00:01:19,430
lots and lots of people expecting you to maintain multiple

28
00:01:19,430 --> 00:01:21,500
versions of the same piece of software.

29
00:01:21,500 --> 00:01:25,490
Rather, you push that piece of software out with constant changes,

30
00:01:25,490 --> 00:01:30,560
and everybody gets those changes, sometimes in A/B tests or staged rollouts,

31
00:01:30,560 --> 00:01:33,940
but eventually everybody's working from the same thing.

32
00:01:33,940 --> 00:01:36,690
Now, even the creator of Git Flow, Vincent Driessen,

33
00:01:36,690 --> 00:01:39,650
says that another workflow called GitHub Flow is

34
00:01:39,650 --> 00:01:41,450
actually well suited to web development,

35
00:01:41,450 --> 00:01:43,540
possibly better than Git Flow.

36
00:01:43,540 --> 00:01:47,240
So let's look at what GitHub Flow looks like. With GitHub Flow,

37
00:01:47,240 --> 00:01:50,470
you'd have a pretty similar example to what I was showing you earlier,

38
00:01:50,470 --> 00:01:54,750
where you have a remote repository, except instead of only having one

39
00:01:54,750 --> 00:01:57,840
branch you'll have multiple branches coming into that remote

40
00:01:57,840 --> 00:02:01,660
repository, the main branch where you're merging everything into and

41
00:02:01,660 --> 00:02:05,330
other feature branches that you're putting pull requests on to merge

42
00:02:05,330 --> 00:02:08,610
into that main branch. Again, the naming of this main branch might

43
00:02:08,610 --> 00:02:13,340
differ by your organization, but the logic here is basically the same.

44
00:02:13,340 --> 00:02:16,990
So why would we use GitHub Flow as opposed to some other workflows?

45
00:02:16,990 --> 00:02:20,390
Well, right now it's one of the most popular options for web development,

46
00:02:20,390 --> 00:02:25,160
and it encourages best practices with frequent smaller merges for your features.

47
00:02:25,160 --> 00:02:28,380
It's also well suited to see CI/CD practices that we talked about

48
00:02:28,380 --> 00:02:31,850
earlier, by allowing you to quickly merge into a main branch, by

49
00:02:31,850 --> 00:02:35,000
making sure that you run your unit tests as you might merge into

50
00:02:35,000 --> 00:02:36,770
your main branch, and also,

51
00:02:36,770 --> 00:02:39,840
if you do your deployments to a test environment, running some integration

52
00:02:39,840 --> 00:02:43,140
tests in that test or development environment. From there,

53
00:02:43,140 --> 00:02:46,580
you might use continuous delivery to actually send your code out

54
00:02:46,580 --> 00:02:49,310
to a production stage so that your customers can interact with

55
00:02:49,310 --> 00:02:56,000
it. Because it's well suited to CI/CD, we'll primarily be using GitHub Flow in this course.

