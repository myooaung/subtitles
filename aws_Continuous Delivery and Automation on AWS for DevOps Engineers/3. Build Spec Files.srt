1
00:00:00,940 --> 00:00:04,650
So now that we understand some of the basics of AWS CodeBuild,

2
00:00:04,650 --> 00:00:07,740
let's take a closer look at build spec files.

3
00:00:07,740 --> 00:00:10,600
Build spec files have different sections that determine

4
00:00:10,600 --> 00:00:13,000
different things that we'll be doing with the file.

5
00:00:13,000 --> 00:00:14,890
One of the first sections we could choose to add is

6
00:00:14,890 --> 00:00:16,940
an environment variables section.

7
00:00:16,940 --> 00:00:20,540
This could contain different pieces of information to help us distinguish

8
00:00:20,540 --> 00:00:25,120
between different environments such as production and test, but it could

9
00:00:25,120 --> 00:00:27,000
also include things like different secrets.

10
00:00:27,000 --> 00:00:29,760
Maybe we want to use them differently across different environments,

11
00:00:29,760 --> 00:00:30,660
for example.

12
00:00:30,660 --> 00:00:32,120
But when you're working with secrets,

13
00:00:32,120 --> 00:00:34,810
it's important to realize that in the environment variables

14
00:00:34,810 --> 00:00:39,560
section, you can also reference other AWS services like the SSM

15
00:00:39,560 --> 00:00:41,870
Parameter Store and the Secrets Manager.

16
00:00:41,870 --> 00:00:45,710
Be sure to use those services when you're putting secrets into the built spec

17
00:00:45,710 --> 00:00:49,660
files so that you don't actually have to hard code the values, but you can just

18
00:00:49,660 --> 00:00:52,940
code references to those values and those services.

19
00:00:52,940 --> 00:00:56,080
There's also other sections like the phases section. In

20
00:00:56,080 --> 00:00:58,840
the phases section, you'll determine what happens in each

21
00:00:58,840 --> 00:01:00,970
phase of your build process,

22
00:01:00,970 --> 00:01:03,860
and you can also configure things like the reports section,

23
00:01:03,860 --> 00:01:06,250
which will output tests that you can then later

24
00:01:06,250 --> 00:01:08,740
review after the build is completed.

25
00:01:08,740 --> 00:01:12,570
Additionally, if you're building different pieces of code in your build,

26
00:01:12,570 --> 00:01:14,530
you might output artifacts.

27
00:01:14,530 --> 00:01:17,720
This is relevant when you have language runtimes that require

28
00:01:17,720 --> 00:01:21,000
artifacts to be built to deploy your actual application.

29
00:01:21,000 --> 00:01:23,910
But it could also be relevant when you're building things like front‑end

30
00:01:23,910 --> 00:01:27,540
applications or other things where you have deployment artifacts you need to

31
00:01:27,540 --> 00:01:31,340
send out rather than just your existing application code.

32
00:01:31,340 --> 00:01:33,910
So let's take a closer look at a build spec file.

33
00:01:33,910 --> 00:01:36,790
Here's an example that only includes a phases and a reports

34
00:01:36,790 --> 00:01:40,330
section. Underneath the phases section, we have an install,

35
00:01:40,330 --> 00:01:42,040
pre_build, and build section,

36
00:01:42,040 --> 00:01:45,420
and each of these will do different tasks that the build container

37
00:01:45,420 --> 00:01:48,340
needs to do in order to run the entire build.

38
00:01:48,340 --> 00:01:49,930
For example, in the install section,

39
00:01:49,930 --> 00:01:52,340
we're configuring it to work with Python 3.8,

40
00:01:52,340 --> 00:01:55,110
and in the pre_build section, we're installing some dependencies,

41
00:01:55,110 --> 00:01:58,800
setting up a Python virtual environment, and making a directory for our

42
00:01:58,800 --> 00:02:02,470
test reports to go into. Later in the build section, we're actually not

43
00:02:02,470 --> 00:02:05,600
building anything because with Python you don't need to output

44
00:02:05,600 --> 00:02:07,910
deployment artifacts in most cases.

45
00:02:07,910 --> 00:02:08,450
Instead,

46
00:02:08,450 --> 00:02:11,840
we're just running tests against our Python code to make sure that

47
00:02:11,840 --> 00:02:15,140
those will pass for a successful build to have run.

48
00:02:15,140 --> 00:02:16,850
And then in the reports section,

49
00:02:16,850 --> 00:02:20,510
we're configuring where to expect the reports from those tests to

50
00:02:20,510 --> 00:02:24,860
end up, in this case, in the test report directory with the file

51
00:02:24,860 --> 00:02:29,090
format that we've included up in the python ‑n pytest command

52
00:02:29,090 --> 00:02:30,740
underneath the build section.

53
00:02:30,740 --> 00:02:34,290
Now we'll be using a very similar file like this later on in the demo,

54
00:02:34,290 --> 00:02:37,470
but you can customize these sorts of files pretty significantly.

55
00:02:37,470 --> 00:02:41,110
So let's take a look at some of the ways we can do these customizations. In

56
00:02:41,110 --> 00:02:45,250
the phases section, the overall purpose of the phases section is to control

57
00:02:45,250 --> 00:02:49,560
the flow of the build process and to allow us to structure and execute build

58
00:02:49,560 --> 00:02:54,120
commands, depending on where in the build process we are. Some example phases

59
00:02:54,120 --> 00:02:57,010
would be the install phase, the pre‑build phase,

60
00:02:57,010 --> 00:03:00,870
the build phase, and the post‑build phase. And you can start to see, we might

61
00:03:00,870 --> 00:03:03,600
want to run different commands in each of these phases,

62
00:03:03,600 --> 00:03:07,110
depending on what we want in our build. With the reports section,

63
00:03:07,110 --> 00:03:10,770
as I mentioned before, the purpose is to allow us to define

64
00:03:10,770 --> 00:03:13,040
different reports that will be generated,

65
00:03:13,040 --> 00:03:15,790
and we might configure different testing frameworks and output

66
00:03:15,790 --> 00:03:18,720
locations. Now with the artifacts section,

67
00:03:18,720 --> 00:03:22,110
which is one I didn't show in that earlier snippet of code, the

68
00:03:22,110 --> 00:03:25,680
purpose is to allow us to configure and define output locations

69
00:03:25,680 --> 00:03:29,570
for artifacts that we're building, and this is also completely optional.

70
00:03:29,570 --> 00:03:31,590
For example, with Python builds,

71
00:03:31,590 --> 00:03:35,840
we wouldn't use it because we don't typically have output from Python builds.

72
00:03:35,840 --> 00:03:36,910
But with Java builds,

73
00:03:36,910 --> 00:03:41,230
we might build a .jar file and similar for other runtimes that require

74
00:03:41,230 --> 00:03:44,870
deployment artifacts to be created in order for your application to then

75
00:03:44,870 --> 00:03:47,940
eventually run. Frequently, you'll see this with languages that are

76
00:03:47,940 --> 00:03:50,600
compiled rather than languages like Python,

77
00:03:50,600 --> 00:03:55,680
which are not. So now that we know what to expect inside of build spec files,

78
00:03:55,680 --> 00:04:01,000
let's give this a try for ourselves in the demo when we're working with AWS CodeBuild.

