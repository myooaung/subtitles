1
00:00:01,240 --> 00:00:03,910
Let's look at some different types of deployments that we

2
00:00:03,910 --> 00:00:06,240
can make when we're using CodeDeploy.

3
00:00:06,240 --> 00:00:09,110
The first we'll look at is called in‑place deployments,

4
00:00:09,110 --> 00:00:12,700
but that's only one of two high‑level deployment types.

5
00:00:12,700 --> 00:00:14,880
The second is called blue/green deployments,

6
00:00:14,880 --> 00:00:17,140
which we'll look at a little bit later.

7
00:00:17,140 --> 00:00:17,360
Now,

8
00:00:17,360 --> 00:00:21,140
when we're working with these two different types of deployments and EC2,

9
00:00:21,140 --> 00:00:24,820
there's technically a few different destinations for where we deploy our code

10
00:00:24,820 --> 00:00:29,660
to. We might have specific instances in the case when we're working with

11
00:00:29,660 --> 00:00:33,860
particular EC2 instances and we want to update the applications on just one or

12
00:00:33,860 --> 00:00:38,240
two specific instances, but we might also have more complicated infrastructure

13
00:00:38,240 --> 00:00:42,510
that uses something like auto scaling groups to scale up and down the number

14
00:00:42,510 --> 00:00:46,180
of instances that we require to meet the capacity of our demand for our

15
00:00:46,180 --> 00:00:47,170
service.

16
00:00:47,170 --> 00:00:48,010
So when we have that,

17
00:00:48,010 --> 00:00:51,740
we might also have an auto scaling group as a deployment destination.

18
00:00:51,740 --> 00:00:55,610
So let's take a look at a visualization of in‑place deployments when we're

19
00:00:55,610 --> 00:00:59,080
working with either EC2 or on‑premises applications.

20
00:00:59,080 --> 00:00:59,890
Either way,

21
00:00:59,890 --> 00:01:02,750
it'll be very similar. With in‑place deployments, we might have

22
00:01:02,750 --> 00:01:06,020
traffic coming in from a load balancer, and this traffic could get

23
00:01:06,020 --> 00:01:09,280
served to a deployment group. Inside of a deployment group, we'll

24
00:01:09,280 --> 00:01:11,420
have different instances or, again,

25
00:01:11,420 --> 00:01:13,410
auto scaling groups might also be in here with

26
00:01:13,410 --> 00:01:15,840
multiple instances inside of these.

27
00:01:15,840 --> 00:01:16,040
Now,

28
00:01:16,040 --> 00:01:20,120
these instances will have a CodeDeploy agent and an app version inside of them,

29
00:01:20,120 --> 00:01:23,050
so whatever version of our application we're currently running. And we could

30
00:01:23,050 --> 00:01:27,040
have multiple instances all inside of that deployment group. When we're ready to

31
00:01:27,040 --> 00:01:29,030
update the version of this application,

32
00:01:29,030 --> 00:01:32,720
we then have a repository which contains new versions. Our

33
00:01:32,720 --> 00:01:35,390
instances would periodically pull this repository,

34
00:01:35,390 --> 00:01:38,180
and when they see a new application version,

35
00:01:38,180 --> 00:01:40,170
they'll know that they have to make an update.

36
00:01:40,170 --> 00:01:40,800
At this point,

37
00:01:40,800 --> 00:01:44,440
traffic will be de‑routed from one of the instances or more of the

38
00:01:44,440 --> 00:01:48,320
instances in our deployment group, and then the revision will be moved

39
00:01:48,320 --> 00:01:52,340
into the instance and override the previous version so it becomes the

40
00:01:52,340 --> 00:01:54,140
next version of our application.

41
00:01:54,140 --> 00:01:58,050
Once that's completed, traffic will eventually be routed back to that instance,

42
00:01:58,050 --> 00:02:01,190
and the same thing would happen for any of the instances in our group.

43
00:02:01,190 --> 00:02:04,410
Traffic is unregistered from the instance, the application

44
00:02:04,410 --> 00:02:06,940
version is updated to the new version,

45
00:02:06,940 --> 00:02:10,210
and then traffic is moved back to that instance.

46
00:02:10,210 --> 00:02:13,840
The same thing would happen if we were working with auto scaling groups here.

47
00:02:13,840 --> 00:02:18,080
So, one important distinction here is that these are the same instances

48
00:02:18,080 --> 00:02:22,160
that we're working with. We're not adding new instances that we install

49
00:02:22,160 --> 00:02:28,000
the new version of the application to. That's something we'll take a look at in blue/green deployments.

