1
00:00:00,940 --> 00:00:03,540
So what is AWS CodeDeploy?

2
00:00:03,540 --> 00:00:07,280
CodeDeploy is a managed to AWS service that automates application

3
00:00:07,280 --> 00:00:10,640
deployment to different AWS compute services.

4
00:00:10,640 --> 00:00:14,700
With CodeDeploy, you can have multiple different deployment destinations.

5
00:00:14,700 --> 00:00:19,050
You can deploy your code to things like Amazon EC2 virtual machines.

6
00:00:19,050 --> 00:00:21,810
You can also send it to on‑premise instances,

7
00:00:21,810 --> 00:00:22,340
for example,

8
00:00:22,340 --> 00:00:24,540
if you have your own data centers that you'd like to

9
00:00:24,540 --> 00:00:26,360
deploy your applications into.

10
00:00:26,360 --> 00:00:27,210
Additionally,

11
00:00:27,210 --> 00:00:30,290
you can deploy your code to AWS Lambda functions or

12
00:00:30,290 --> 00:00:33,140
even to Amazon ECS and Fargate.

13
00:00:33,140 --> 00:00:36,300
So what can you deploy throughout AWS?

14
00:00:36,300 --> 00:00:37,960
Well, you can deploy your code.

15
00:00:37,960 --> 00:00:40,810
You can deploy serverless functions, like we mentioned with Lambda.

16
00:00:40,810 --> 00:00:44,570
You can also deploy configuration files or different kinds of packages,

17
00:00:44,570 --> 00:00:46,140
even executables.

18
00:00:46,140 --> 00:00:49,500
And if you're deploying things that require changes to media files,

19
00:00:49,500 --> 00:00:51,640
you can deploy those, too.

20
00:00:51,640 --> 00:00:54,910
So what are some of the benefits we get from using CodeDeploy?

21
00:00:54,910 --> 00:00:57,410
Well, it can help us to automate our deployments,

22
00:00:57,410 --> 00:01:00,700
and we can automate these deployments to multiple different locations,

23
00:01:00,700 --> 00:01:03,340
like I discussed earlier, between Amazon EC2,

24
00:01:03,340 --> 00:01:05,250
Lambda, and to other places.

25
00:01:05,250 --> 00:01:08,190
We can also make customizations to each deployment,

26
00:01:08,190 --> 00:01:11,590
so we don't have to have a single standard type of deployment.

27
00:01:11,590 --> 00:01:15,540
But we can customize it based on where and when we want to deploy to,

28
00:01:15,540 --> 00:01:18,200
as well as some of the conditions we want to deploy under.

29
00:01:18,200 --> 00:01:20,640
For example, if we need to run a bunch of tests.

30
00:01:20,640 --> 00:01:23,490
CodeDeploy will also help us improve the speed of our

31
00:01:23,490 --> 00:01:27,100
deployments by minimizing or eliminating the downtime that our

32
00:01:27,100 --> 00:01:29,190
services have when we're deploying them,

33
00:01:29,190 --> 00:01:32,510
and also by allowing us to run concurrent deployments if we need

34
00:01:32,510 --> 00:01:35,440
to deploy multiple things at the same time.

35
00:01:35,440 --> 00:01:37,050
In addition to these benefits,

36
00:01:37,050 --> 00:01:41,220
it will help us to avoid errors in our deployment process by standardizing

37
00:01:41,220 --> 00:01:43,990
our deployments through a single deployment pipeline,

38
00:01:43,990 --> 00:01:47,840
and also allowing us to configure different tests and rollbacks.

39
00:01:47,840 --> 00:01:50,860
This will also help us to eliminate manual deployment errors

40
00:01:50,860 --> 00:01:53,750
that might happen when you have an engineer deploying something

41
00:01:53,750 --> 00:01:55,970
using buttons in the AWS console,

42
00:01:55,970 --> 00:02:00,620
or maybe making manual configuration changes inside of a configuration file.

43
00:02:00,620 --> 00:02:04,340
So with CodeDeploy, we can do a lot better.

44
00:02:04,340 --> 00:02:04,570
Now,

45
00:02:04,570 --> 00:02:07,970
there are a lot of other deployment tools that we could use in

46
00:02:07,970 --> 00:02:10,430
AWS and throughout our development process.

47
00:02:10,430 --> 00:02:12,930
CodeDeploy will really help us in a specific

48
00:02:12,930 --> 00:02:17,020
scenario when we're deploying to EC2, on‑premises locations,

49
00:02:17,020 --> 00:02:19,610
with AWS Lambda, or with ECS and Fargate.

50
00:02:19,610 --> 00:02:23,740
However, if we want to use something to deploy other pieces of infrastructure,

51
00:02:23,740 --> 00:02:27,180
we might rely on something like CloudFormation or the AWS Cloud

52
00:02:27,180 --> 00:02:30,410
Development Kit to help us deploy pieces of infrastructure that

53
00:02:30,410 --> 00:02:32,210
don't fall into this category.

54
00:02:32,210 --> 00:02:33,040
For example,

55
00:02:33,040 --> 00:02:36,730
particular AWS cloud resources or configuration

56
00:02:36,730 --> 00:02:39,880
changes to those resources. Now also,

57
00:02:39,880 --> 00:02:43,110
if we wanted to use other tools like AWS's CodePipeline,

58
00:02:43,110 --> 00:02:45,070
which we'll look at in the next module,

59
00:02:45,070 --> 00:02:49,130
this will help us build more complex build pipelines with discrete steps.

60
00:02:49,130 --> 00:02:52,460
Whereas CodeDeploy will help us in very niche use cases,

61
00:02:52,460 --> 00:02:55,340
deploying to particular compute services.

62
00:02:55,340 --> 00:02:58,820
So hopefully this helps clarify where all these different services

63
00:02:58,820 --> 00:03:06,000
really fit within the broader picture of infrastructure management and deployment of our code inside of AWS.

