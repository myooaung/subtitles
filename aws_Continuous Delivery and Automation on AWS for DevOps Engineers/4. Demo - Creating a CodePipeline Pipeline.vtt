WEBVTT
1
00:00:00.690 --> 00:00:01.710
In this demo,

2
00:00:01.710 --> 00:00:06.700
we'll be creating a CodePipeline pipeline for an Elastic Beanstalk application.

3
00:00:06.700 --> 00:00:12.290
We'll start by creating and configuring the source stage using AWS CodeCommit.

4
00:00:12.290 --> 00:00:15.940
Then we'll create the build and test stage with AWS CodeBuild,

5
00:00:15.940 --> 00:00:19.490
and we'll create a deployment stage for this application using

6
00:00:19.490 --> 00:00:22.060
CodePipeline in the Elastic Beanstalk option,

7
00:00:22.060 --> 00:00:25.840
and all of this will be configured inside of CodePipeline.

8
00:00:25.840 --> 00:00:26.470
From there,

9
00:00:26.470 --> 00:00:30.620
we'll trigger and test our pipeline by pushing commits to the CodeCommit

10
00:00:30.620 --> 00:00:34.870
repository and watching our entire pipeline automatically trigger.

11
00:00:34.870 --> 00:00:38.940
So let's go over to the AWS console and get started.

12
00:00:38.940 --> 00:00:42.140
Over here in the AWS console, let's go to the Services drop‑down,

13
00:00:42.140 --> 00:00:45.640
and let's go over to the CodePipeline section.

14
00:00:45.640 --> 00:00:48.890
On this section, we'll be able to start creating our pipeline.

15
00:00:48.890 --> 00:00:52.330
Let's click Create pipeline here, and then we'll give this pipeline a name.

16
00:00:52.330 --> 00:00:54.220
I'm going to call mine flasky3,

17
00:00:54.220 --> 00:00:58.640
which will automatically create a service role for us for this pipeline.

18
00:00:58.640 --> 00:01:02.790
Now, we'll need to make sure we have permissions to add roles in AWS,

19
00:01:02.790 --> 00:01:05.980
so make sure you're logged into a privileged user in this AWS

20
00:01:05.980 --> 00:01:09.490
account and not the developer user that we created a little

21
00:01:09.490 --> 00:01:11.720
while earlier in previous demos.

22
00:01:11.720 --> 00:01:14.520
That's because that user doesn't have permissions to necessarily

23
00:01:14.520 --> 00:01:17.540
create the roles that we need for this demo.

24
00:01:17.540 --> 00:01:20.260
So once we've done this, let's click the Next button here,

25
00:01:20.260 --> 00:01:22.560
and then we'll click our first setup step,

26
00:01:22.560 --> 00:01:24.160
which is to add a source stage.

27
00:01:24.160 --> 00:01:26.610
We'll be able to pick from all the source providers

28
00:01:26.610 --> 00:01:28.840
that AWS CodePipeline offers,

29
00:01:28.840 --> 00:01:33.050
and we'll pick CodeCommit because that's where we'll end up keeping our code.

30
00:01:33.050 --> 00:01:36.240
Now, we have our previous flasky repositories,

31
00:01:36.240 --> 00:01:38.640
but in case you're still working on those demos,

32
00:01:38.640 --> 00:01:40.480
I don't want to make you overwrite them.

33
00:01:40.480 --> 00:01:43.880
Typically, we would probably iterate on our application and add to it.

34
00:01:43.880 --> 00:01:46.900
But as this version of the flasky application will be

35
00:01:46.900 --> 00:01:49.770
deployed to AWS Elastic Beanstalk,

36
00:01:49.770 --> 00:01:53.260
I don't want to interfere with the other places we deployed our applications to.

37
00:01:53.260 --> 00:01:55.920
So let's go and create a new repository.

38
00:01:55.920 --> 00:01:57.740
I'll go to the Services drop‑down again,

39
00:01:57.740 --> 00:01:58.860
go over to CodeCommit,

40
00:01:58.860 --> 00:02:01.570
and I'll open this in a new tab so that we don't ruin

41
00:02:01.570 --> 00:02:05.550
our work in CodePipeline there, and then we'll create a new repository.

42
00:02:05.550 --> 00:02:10.240
We'll call this one flasky3, and then we'll scroll down and click Create.

43
00:02:10.240 --> 00:02:11.330
Now, from here,

44
00:02:11.330 --> 00:02:13.520
I'm going to assume that you still have the Git

45
00:02:13.520 --> 00:02:16.790
credentials set up from the earlier modules.

46
00:02:16.790 --> 00:02:19.580
This means that you'll be able to go in here and click Clone URL,

47
00:02:19.580 --> 00:02:25.600
Clone SSH, and later use this URL in order to push tooth the repository here.

48
00:02:25.600 --> 00:02:28.820
If you haven't already gone through this setup in the module on CodeCommit,

49
00:02:28.820 --> 00:02:31.840
make sure you go back and take that module first.

50
00:02:31.840 --> 00:02:36.420
Now that we've copied the SSH URL, let's set up the demo files for this course.

51
00:02:36.420 --> 00:02:39.850
If you haven't already, go ahead and download them from Pluralsight.

52
00:02:39.850 --> 00:02:45.500
Then we can go over to the download folder for 06‑cicd‑with‑codepipeline.

53
00:02:45.500 --> 00:02:49.440
There's another folder inside of that called demo1‑cicd‑codepipeline.

54
00:02:49.440 --> 00:02:53.960
Now, inside of there, the folder we're really interested in is called flasky3.

55
00:02:53.960 --> 00:02:57.460
So let's change directories into that inside of here.

56
00:02:57.460 --> 00:02:58.450
Now that we're in flasky3,

57
00:02:58.450 --> 00:03:01.210
let's double check we're in there because we need to be

58
00:03:01.210 --> 00:03:04.840
inside the flasky3 folder in order to initialize just that

59
00:03:04.840 --> 00:03:06.640
folder as a Git repository.

60
00:03:06.640 --> 00:03:09.140
I'm going to used the pwd, or print working directory,

61
00:03:09.140 --> 00:03:13.040
command just to make sure that flasky3 is the last folder we're in here.

62
00:03:13.040 --> 00:03:13.410
Now,

63
00:03:13.410 --> 00:03:16.340
your terminal might not show it on the left side of the screen in

64
00:03:16.340 --> 00:03:18.330
blue like mine with the arrow pointing to it,

65
00:03:18.330 --> 00:03:20.970
so just make sure that when you run the commands to check the

66
00:03:20.970 --> 00:03:23.740
directory that flasky3 is at there at the end.

67
00:03:23.740 --> 00:03:24.800
So now that we've done this,

68
00:03:24.800 --> 00:03:29.010
let's clear the screen and let's get this repository set up to push all

69
00:03:29.010 --> 00:03:32.140
of the code that's inside of it to AWS CodeCommit.

70
00:03:32.140 --> 00:03:33.840
In the command.txt folder,

71
00:03:33.840 --> 00:03:36.510
I've included some Git commands that'll help you do that.

72
00:03:36.510 --> 00:03:39.300
They start with git init, or git initialize.

73
00:03:39.300 --> 00:03:42.510
This sets up flasky3 as a Git repository.

74
00:03:42.510 --> 00:03:45.550
Now, inside of flasky3, there's a lot of files we're going to need,

75
00:03:45.550 --> 00:03:47.230
and I'll look through them in just a moment.

76
00:03:47.230 --> 00:03:49.660
But we need to get them into CodeCommit first,

77
00:03:49.660 --> 00:03:53.540
so let's go ahead and git add them to the changes that we'll be tracking.

78
00:03:53.540 --> 00:03:54.860
We'll do this with git add dot.

79
00:03:54.860 --> 00:03:57.860
This should move them all to being tracked.

80
00:03:57.860 --> 00:04:00.210
From here, we can do git commit,

81
00:04:00.210 --> 00:04:04.560
and we can commit these with a message called first commit just so

82
00:04:04.560 --> 00:04:06.620
we know that it's the first one we put in there.

83
00:04:06.620 --> 00:04:08.710
This should add all of these different files in

84
00:04:08.710 --> 00:04:12.130
flasky3 to our repositories locally.

85
00:04:12.130 --> 00:04:16.750
This should add all of the different files in flasky3 to our repository locally,

86
00:04:16.750 --> 00:04:19.690
but now we need to push them into the cloud.

87
00:04:19.690 --> 00:04:22.540
In order to do this, we have to set up a remote.

88
00:04:22.540 --> 00:04:25.280
If we run the git remote command right now, nothing happens.

89
00:04:25.280 --> 00:04:29.090
If we run to git remote command with v, nothing happens either.

90
00:04:29.090 --> 00:04:31.040
That's the verbose flag here.

91
00:04:31.040 --> 00:04:34.740
What we want to do is set up a remote that we can push our code to.

92
00:04:34.740 --> 00:04:39.840
Now, I have included this inside of the commands.txt file to give you an example.

93
00:04:39.840 --> 00:04:43.460
We'll do git remote add origin,

94
00:04:43.460 --> 00:04:46.700
and then we'll paste in our SSH URL that we copied.

95
00:04:46.700 --> 00:04:47.570
Once we've done this,

96
00:04:47.570 --> 00:04:51.100
we should be able to rerun the git remote ‑v flag and see that we

97
00:04:51.100 --> 00:04:54.520
currently have a fetch and push URL set up for origin.

98
00:04:54.520 --> 00:04:56.740
So let's clear the screen here and get started by

99
00:04:56.740 --> 00:04:58.840
pushing all of the commits we just made,

100
00:04:58.840 --> 00:05:01.980
just the one first commit, over to our repository.

101
00:05:01.980 --> 00:05:07.240
We'll do this with git push origin, and we'll send it to a master branch.

102
00:05:07.240 --> 00:05:08.220
Now that we've done this,

103
00:05:08.220 --> 00:05:12.120
if we go back to the AWS CodeCommit console and we refresh the screen,

104
00:05:12.120 --> 00:05:15.490
we should see all this code pushed into our new repository.

105
00:05:15.490 --> 00:05:17.470
This is exactly what we're hoping for.

106
00:05:17.470 --> 00:05:21.300
So now, let's take a closer look at what's actually inside of flasky3.

107
00:05:21.300 --> 00:05:25.040
I've made some changes to our earlier versions of the flasky application.

108
00:05:25.040 --> 00:05:25.780
Previously,

109
00:05:25.780 --> 00:05:29.850
we started with a pretty simple API, but now I've gone inside of the

110
00:05:29.850 --> 00:05:35.010
application.py file instead of app.py file and changed a few things.

111
00:05:35.010 --> 00:05:37.180
The first is just that high‑level name.

112
00:05:37.180 --> 00:05:39.540
That's because when we're working with Elastic Beanstalk,

113
00:05:39.540 --> 00:05:41.150
which we'll be doing in just a moment,

114
00:05:41.150 --> 00:05:45.840
it'll expect application.py by default instead of app.py.

115
00:05:45.840 --> 00:05:50.320
And for the same reason, I've changed apponline3 to application if you

116
00:05:50.320 --> 00:05:52.740
compare it to the previous versions of this app.

117
00:05:52.740 --> 00:05:54.240
So below this,

118
00:05:54.240 --> 00:05:58.420
we have some more text that helps us set up a website that returns some HTML,

119
00:05:58.420 --> 00:06:01.320
depending on what part of the site and what path in

120
00:06:01.320 --> 00:06:03.300
the URL bar we're actually visiting.

121
00:06:03.300 --> 00:06:08.200
We also kept all the same instructions from earlier about getting the data

122
00:06:08.200 --> 00:06:11.940
related to particular users if we go to their user_id.

123
00:06:11.940 --> 00:06:15.890
Now, this data still comes from the data.json file that we store

124
00:06:15.890 --> 00:06:18.510
locally here and deploy with our website, so it's not a real

125
00:06:18.510 --> 00:06:21.030
application that I advise you to use in production,

126
00:06:21.030 --> 00:06:23.540
but it does give us a scaffold to run the same tests we

127
00:06:23.540 --> 00:06:25.940
had before against this application.

128
00:06:25.940 --> 00:06:27.510
Now, with all this happening,

129
00:06:27.510 --> 00:06:32.240
we'll still have a requirements.txt file for our flask and pytest dependencies.

130
00:06:32.240 --> 00:06:32.700
Now,

131
00:06:32.700 --> 00:06:36.920
the main other change that I've made inside of here is to the buildspec.yml

132
00:06:36.920 --> 00:06:40.710
file and the elasticbeanstalk folder here. There's two different

133
00:06:40.710 --> 00:06:43.720
configuration files to determine what we'll be doing.

134
00:06:43.720 --> 00:06:46.120
The elasticbeanstalk folder just has one that basically

135
00:06:46.120 --> 00:06:48.710
tells Elastic Beanstalk how we want to deploy this

136
00:06:48.710 --> 00:06:51.040
application with Elastic Beanstalk,

137
00:06:51.040 --> 00:06:54.420
and it'll handle the rest of everything there with CodePipeline.

138
00:06:54.420 --> 00:06:57.370
The other big change though is in buildspec.yml where

139
00:06:57.370 --> 00:07:00.600
instead of just having a build command that runs the tests

140
00:07:00.600 --> 00:07:02.490
and then outputs them to a directory,

141
00:07:02.490 --> 00:07:05.820
we also have a section at the very end called artifacts.

142
00:07:05.820 --> 00:07:09.570
This will output all the code from our repository and then pass it

143
00:07:09.570 --> 00:07:11.990
along to the next part of the build pipeline.

144
00:07:11.990 --> 00:07:12.630
In this case,

145
00:07:12.630 --> 00:07:16.440
Elastic Beanstalk, and CodePipeline will help us do everything there.

146
00:07:16.440 --> 00:07:18.610
So now that we know what's inside of here,

147
00:07:18.610 --> 00:07:27.000
let's move on to the next step, which is setting up a CodePipeline pipeline. Let's go back to CodePipeline and finish this up in the next part of the demo.

