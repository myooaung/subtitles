WEBVTT
1
00:00:01.040 --> 00:00:01.690
First,

2
00:00:01.690 --> 00:00:04.380
let's create a new branch that we'll be using to store all the

3
00:00:04.380 --> 00:00:06.410
changes we're making to this application.

4
00:00:06.410 --> 00:00:09.760
We're going to use the git checkout ‑b command and provide

5
00:00:09.760 --> 00:00:11.770
it the parameter of initial‑flask‑app,

6
00:00:11.770 --> 00:00:14.700
which will just be the name of the branch we're using.

7
00:00:14.700 --> 00:00:17.670
Now from here, we'll be working on the initial‑flask‑app branch,

8
00:00:17.670 --> 00:00:20.140
which is why it appears inside of my terminal here.

9
00:00:20.140 --> 00:00:22.800
The next thing we want to do is edit this app.py file

10
00:00:22.800 --> 00:00:24.420
that we added just a little bit earlier,

11
00:00:24.420 --> 00:00:28.940
and in this case I'll be adding a new line of code to import the Flask library.

12
00:00:28.940 --> 00:00:33.400
Now I'll need to fix this flask right here so that it's a capital F,

13
00:00:33.400 --> 00:00:35.960
because that's how the package works, and then on the next line,

14
00:00:35.960 --> 00:00:39.260
we'll be able to start working with our Flask code.

15
00:00:39.260 --> 00:00:43.360
So we'll create our first application with app = Flask,

16
00:00:43.360 --> 00:00:47.340
and then in parentheses, __name__.

17
00:00:47.340 --> 00:00:50.440
This will give us an application with Flask to start working with.

18
00:00:50.440 --> 00:00:51.080
From there,

19
00:00:51.080 --> 00:00:54.600
we'll want to create a new route that we'll be referencing whenever

20
00:00:54.600 --> 00:00:57.190
we hit the endpoints for this Flask application.

21
00:00:57.190 --> 00:00:59.340
We'll do this with @app.route,

22
00:00:59.340 --> 00:01:03.550
and then in parentheses we'll have the first forward slash here.

23
00:01:03.550 --> 00:01:05.520
This means that it will just get everything that goes

24
00:01:05.520 --> 00:01:07.340
to the root of our application.

25
00:01:07.340 --> 00:01:10.430
We'll also just define a simple function here called hello_world,

26
00:01:10.430 --> 00:01:14.080
and I'm going put just a basic return statement in here.

27
00:01:14.080 --> 00:01:18.900
This will allow us to return syntax every time our root route is hit.

28
00:01:18.900 --> 00:01:24.180
So let's just say Hello World, and here after we save this,

29
00:01:24.180 --> 00:01:27.670
we should be able to have this Flask application always return this

30
00:01:27.670 --> 00:01:30.740
anytime someone comes to try and interact with it.

31
00:01:30.740 --> 00:01:33.840
So we'll leave this here as the first part of our feature.

32
00:01:33.840 --> 00:01:36.650
The next step will be setting up these dependencies that we're using.

33
00:01:36.650 --> 00:01:37.420
To do this,

34
00:01:37.420 --> 00:01:40.920
we're going to use something called the virtual environment with Python 3.

35
00:01:40.920 --> 00:01:43.640
Now there's instructions for creating virtual environments inside

36
00:01:43.640 --> 00:01:46.090
of the materials downloads for this course.

37
00:01:46.090 --> 00:01:49.050
Specifically, we're using a Python virtual environment,

38
00:01:49.050 --> 00:01:51.730
not an actual operating system virtual machine or

39
00:01:51.730 --> 00:01:53.540
virtual environment of that nature.

40
00:01:53.540 --> 00:01:55.870
So to do this on several different operating systems,

41
00:01:55.870 --> 00:02:00.220
we can do python3, ‑m for module, and then venv,

42
00:02:00.220 --> 00:02:04.610
and next we'll give the virtual environment we're creating a name; in this case,

43
00:02:04.610 --> 00:02:05.720
we'll just call it venv.

44
00:02:05.720 --> 00:02:06.260
Now,

45
00:02:06.260 --> 00:02:08.110
this might take a second depending on the operating

46
00:02:08.110 --> 00:02:09.710
system you're on; especially on Windows,

47
00:02:09.710 --> 00:02:11.490
it sometimes takes several seconds,

48
00:02:11.490 --> 00:02:14.440
but you should see that we now have a new folder here on the left side of the

49
00:02:14.440 --> 00:02:17.260
screen that includes a bunch of new files that we'll be using.

50
00:02:17.260 --> 00:02:20.980
Now, I don't want to commit these to my source repository.

51
00:02:20.980 --> 00:02:22.440
So if I haven't already,

52
00:02:22.440 --> 00:02:26.460
I'll create a new file inside of the repository called git ignore.

53
00:02:26.460 --> 00:02:30.190
So let's do .gitignore, because it's actually a hidden file,

54
00:02:30.190 --> 00:02:33.250
and then we'll go into this file and we're going to add a

55
00:02:33.250 --> 00:02:35.140
new folder we don't want git to track.

56
00:02:35.140 --> 00:02:40.740
So we'll do venv/, and that should tell it to now ignore our venv folder.

57
00:02:40.740 --> 00:02:42.100
Now, the next thing we're going to need to do,

58
00:02:42.100 --> 00:02:46.180
if I clear this screen here, we can turn on the Python virtual environment.

59
00:02:46.180 --> 00:02:48.700
Now this will be called sourcing it or activating it,

60
00:02:48.700 --> 00:02:51.040
and the way we'll do this on a Windows machine,

61
00:02:51.040 --> 00:02:53.530
a Mac machine, and a Linux machine might differ slightly,

62
00:02:53.530 --> 00:02:56.670
so definitely reference the instructions for the materials in this

63
00:02:56.670 --> 00:02:59.100
course if you need help with this part of the process.

64
00:02:59.100 --> 00:03:01.390
But essentially, in most systems,

65
00:03:01.390 --> 00:03:03.460
there'll be a script to turn on the virtual

66
00:03:03.460 --> 00:03:05.450
environment inside of the venv folder.

67
00:03:05.450 --> 00:03:09.870
To do this on Mac, I can go source venv/bin/activate,

68
00:03:09.870 --> 00:03:11.790
and on other systems,

69
00:03:11.790 --> 00:03:14.960
follow along with the commands in those instructions for this module.

70
00:03:14.960 --> 00:03:16.090
Now, once this is turned on,

71
00:03:16.090 --> 00:03:19.740
you should see a venv in parentheses on the left side of the terminal,

72
00:03:19.740 --> 00:03:23.540
which means that you're working from within the virtual environment.

73
00:03:23.540 --> 00:03:24.660
So now, at this point,

74
00:03:24.660 --> 00:03:26.880
we should be able to install some requirements for this

75
00:03:26.880 --> 00:03:29.210
application inside of this virtual environment.

76
00:03:29.210 --> 00:03:32.000
Now, we're going to do this from our requirements.txt file,

77
00:03:32.000 --> 00:03:33.610
which we're going to make on the side here.

78
00:03:33.610 --> 00:03:35.820
We're going to call this requirements.txt,

79
00:03:35.820 --> 00:03:39.800
like I just said, and then inside of this file,

80
00:03:39.800 --> 00:03:41.200
we'll put two requirements.

81
00:03:41.200 --> 00:03:42.440
We'll do Flask,

82
00:03:42.440 --> 00:03:45.840
and we'll keep the capitalization just because that's kind of standard,

83
00:03:45.840 --> 00:03:49.230
even though with the package manager, it doesn't really matter,

84
00:03:49.230 --> 00:03:52.510
and then we'll use boto3 as the second dependency that we'll be

85
00:03:52.510 --> 00:03:55.050
using later on to work with our Flask application.

86
00:03:55.050 --> 00:03:58.810
So now that the both of these are here, we can run pip install,

87
00:03:58.810 --> 00:04:02.640
and depending on your system, this might be pip3 install instead.

88
00:04:02.640 --> 00:04:06.340
And then we'll use the ‑r flag to specify a requirements file,

89
00:04:06.340 --> 00:04:09.690
which in this case will be our requirements.txt file.

90
00:04:09.690 --> 00:04:13.010
Now it looks like I inadvertently put this in the top‑level folder so

91
00:04:13.010 --> 00:04:16.540
make sure when you're running this command that it's both inside of

92
00:04:16.540 --> 00:04:20.540
your main flasky project here so that we can include it inside of the

93
00:04:20.540 --> 00:04:22.240
git history for this project,

94
00:04:22.240 --> 00:04:24.700
and also so that we can install requirements from it

95
00:04:24.700 --> 00:04:27.640
while it's alongside that venv folder.

96
00:04:27.640 --> 00:04:28.590
So now in my terminal,

97
00:04:28.590 --> 00:04:32.200
I'll complete that pip install ‑r flag here with requirements.txt,

98
00:04:32.200 --> 00:04:35.740
and this will go into requirements.txt and run pip

99
00:04:35.740 --> 00:04:38.260
install Flask and pip install boto3,

100
00:04:38.260 --> 00:04:42.240
but it'll install them all inside of this virtual environment.

101
00:04:42.240 --> 00:04:45.630
So now to test that this application is working,

102
00:04:45.630 --> 00:04:47.790
we can run flask run here,

103
00:04:47.790 --> 00:04:52.310
and this should turn on the development server for our Flask application.

104
00:04:52.310 --> 00:04:57.680
You'll notice that it's currently running on 127.0.0.1:5000,

105
00:04:57.680 --> 00:04:59.940
which is localhost:5000.

106
00:04:59.940 --> 00:05:00.910
So if I click here,

107
00:05:00.910 --> 00:05:04.540
it should open up in my browser that I was working with CodeCommit earlier.

108
00:05:04.540 --> 00:05:07.030
So this is a functional web application here that we could

109
00:05:07.030 --> 00:05:09.640
deploy into a container or somewhere else,

110
00:05:09.640 --> 00:05:12.220
and we should be feeling pretty good about doing this right now,

111
00:05:12.220 --> 00:05:14.140
so we want to go and commit our changes.

112
00:05:14.140 --> 00:05:16.100
I'll go back to my VS Code editor here,

113
00:05:16.100 --> 00:05:20.620
and we can use Ctrl+C to exit out of this Flask application.

114
00:05:20.620 --> 00:05:22.340
Now I'm going to clear the screen,

115
00:05:22.340 --> 00:05:25.020
and we should be able to then commit all our changes.

116
00:05:25.020 --> 00:05:26.140
So let's do git status,

117
00:05:26.140 --> 00:05:29.190
and now you'll see we have a bunch of different stuff in

118
00:05:29.190 --> 00:05:30.890
here and we might not want all of it.

119
00:05:30.890 --> 00:05:33.290
So let's go back to our git ignore file,

120
00:05:33.290 --> 00:05:42.310
and let's also add the dunder or __pycache__/ here so that we don't look at

121
00:05:42.310 --> 00:05:44.940
this pycache folder and the files inside of it either.

122
00:05:44.940 --> 00:05:46.490
Then we can do git status one more time,

123
00:05:46.490 --> 00:05:48.540
and you'll notice that it's just disappeared.

124
00:05:48.540 --> 00:05:51.340
I have to make sure I save git ignore before I do this, though.

125
00:05:51.340 --> 00:05:53.400
So now that we've got all the files we want,

126
00:05:53.400 --> 00:05:54.980
we can do git add dot,

127
00:05:54.980 --> 00:05:59.170
which should add all of the new files that we just added and include the

128
00:05:59.170 --> 00:06:03.090
modifications to the app.py file in the changes we just made.

129
00:06:03.090 --> 00:06:05.170
So if I do git status one more time,

130
00:06:05.170 --> 00:06:08.070
these are now all included in the staging setup,

131
00:06:08.070 --> 00:06:11.610
ready for us to commit it to this initial‑flask‑app branch.

132
00:06:11.610 --> 00:06:12.790
So that's what we're going to do next.

133
00:06:12.790 --> 00:06:17.340
We're going to do git commit and ‑m for a message to go along with this commit,

134
00:06:17.340 --> 00:06:21.140
and we'll say Functional app.

135
00:06:21.140 --> 00:06:21.390
Now,

136
00:06:21.390 --> 00:06:23.440
different organizations might have different standards

137
00:06:23.440 --> 00:06:25.900
for what you put in commit messages, but for right now,

138
00:06:25.900 --> 00:06:28.290
just because it's just us, we'll leave it here,

139
00:06:28.290 --> 00:06:29.440
and then we'll hit Enter.

140
00:06:29.440 --> 00:06:34.000
So now we should be able to push this commit into our CodeCommit repository.

141
00:06:34.000 --> 00:06:35.560
We'll do this with git status,

142
00:06:35.560 --> 00:06:38.290
just to make sure that we have nothing else to push in first,

143
00:06:38.290 --> 00:06:42.640
and then git push and we'll push to the remote with the name of origin,

144
00:06:42.640 --> 00:06:44.690
which is the only remote that we have right now,

145
00:06:44.690 --> 00:06:48.620
and we're pushing to this branch name, not to our main branch directly.

146
00:06:48.620 --> 00:06:50.170
So we should type that out.

147
00:06:50.170 --> 00:06:52.590
We can press tab.autocompleted on most systems,

148
00:06:52.590 --> 00:06:57.740
and then we can enter to push this to our initial‑flask‑app branch.

149
00:06:57.740 --> 00:07:00.350
So now that this is done, you'll notice it says new branch,

150
00:07:00.350 --> 00:07:02.820
and it looks like it's worked pushing into CodeCommit.

151
00:07:02.820 --> 00:07:05.840
So let's go back over to CodeCommit here,

152
00:07:05.840 --> 00:07:08.990
and let's see if there are any new branches after we refresh the page.

153
00:07:08.990 --> 00:07:10.510
It might not appear immediately,

154
00:07:10.510 --> 00:07:12.860
so we might need to do that just to make sure it gets

155
00:07:12.860 --> 00:07:14.420
the new commits we just pushed.

156
00:07:14.420 --> 00:07:17.000
So it looks like main is the same, which is what we would expect,

157
00:07:17.000 --> 00:07:20.350
but we also have this new branch called initial‑flask‑app,

158
00:07:20.350 --> 00:07:22.690
which contains all the other code we just pushed in.

159
00:07:22.690 --> 00:07:26.140
So if we wanted to move this from the initial‑flask‑app into main,

160
00:07:26.140 --> 00:07:28.240
we could create a pull request.

161
00:07:28.240 --> 00:07:31.010
Now, this will look different depending on the provider that you're using,

162
00:07:31.010 --> 00:07:34.670
but with CodeCommit it will allow us to take the destination branch and the

163
00:07:34.670 --> 00:07:37.620
source branch and determine them from these drop‑downs here.

164
00:07:37.620 --> 00:07:39.560
Now we want the destination branch to be main,

165
00:07:39.560 --> 00:07:42.000
because that's where we want to merge all of our code into,

166
00:07:42.000 --> 00:07:45.020
and we want our source branch to be that branch we just pushed,

167
00:07:45.020 --> 00:07:46.670
which is initial‑flask‑app.

168
00:07:46.670 --> 00:07:48.600
If we wanted to compare these line by line,

169
00:07:48.600 --> 00:07:50.940
we could click this Compare button,

170
00:07:50.940 --> 00:07:52.840
and then we could scroll down and look at some of the

171
00:07:52.840 --> 00:07:54.880
changes between these two branches.

172
00:07:54.880 --> 00:07:56.880
So you'll see that we now added a git ignore,

173
00:07:56.880 --> 00:07:59.760
and we made some changes to this app.py file,

174
00:07:59.760 --> 00:08:02.490
as well as adding the requirements.txt file.

175
00:08:02.490 --> 00:08:04.820
So if we're satisfied with all these changes,

176
00:08:04.820 --> 00:08:08.240
then we could go back up here and enter a name for this pull request.

177
00:08:08.240 --> 00:08:15.340
We can give this pull request the name of Initial Flask App ‑ Functioning,

178
00:08:15.340 --> 00:08:18.830
and then we could give a longer description and describe everything else we've

179
00:08:18.830 --> 00:08:22.490
done in this PR, but this should be good for us for right now. And we can click

180
00:08:22.490 --> 00:08:25.660
Create Pull Request. Now in a larger organization,

181
00:08:25.660 --> 00:08:29.670
we might go and ask somebody to review our code or have some established

182
00:08:29.670 --> 00:08:33.440
processes for that, but since it's just us right now,

183
00:08:33.440 --> 00:08:36.020
we would be able to go through any of the details here

184
00:08:36.020 --> 00:08:38.250
with the activity history on the commit,

185
00:08:38.250 --> 00:08:40.220
in case anybody had added anything to it,

186
00:08:40.220 --> 00:08:43.300
changes that this commit actually makes, so if we review the

187
00:08:43.300 --> 00:08:46.660
differences between files and the new files added and the different

188
00:08:46.660 --> 00:08:48.630
commits that were actually made. In this case,

189
00:08:48.630 --> 00:08:51.590
we only made one commit, but if we'd made multiple different

190
00:08:51.590 --> 00:08:54.870
iterations on this code and included them in the merge

191
00:08:54.870 --> 00:08:56.620
requests that we were sending in, we could see that here,

192
00:08:56.620 --> 00:08:57.340
too.

193
00:08:57.340 --> 00:08:59.370
Now, finally, we can look at the Approvals section.

194
00:08:59.370 --> 00:09:03.210
So if there are other users who approved the PR or if we wanted

195
00:09:03.210 --> 00:09:06.500
to create rules that would enable us only to merge this in if

196
00:09:06.500 --> 00:09:09.340
another developer had approved it.

197
00:09:09.340 --> 00:09:10.450
But to finish this off,

198
00:09:10.450 --> 00:09:13.790
let's pretend that somebody had already gone in and approved this,

199
00:09:13.790 --> 00:09:16.270
and now we can merge it into our repository.

200
00:09:16.270 --> 00:09:18.700
So we'll click the Merge button here, and there's a few

201
00:09:18.700 --> 00:09:20.250
different options for how we do this.

202
00:09:20.250 --> 00:09:24.160
If we'd made a bunch of different commits, we could use a squash and merge

203
00:09:24.160 --> 00:09:28.220
strategy here where we push those commits into the same single commit when

204
00:09:28.220 --> 00:09:30.830
merging on to main, but right now we'll use the default,

205
00:09:30.830 --> 00:09:33.660
which is the fast forward merge, which takes all of our commits

206
00:09:33.660 --> 00:09:36.130
and applies them to the top of this branch here.

207
00:09:36.130 --> 00:09:37.080
Now by default,

208
00:09:37.080 --> 00:09:40.400
CodeCommit will have us delete the branch that we just merged the

209
00:09:40.400 --> 00:09:43.570
code from right after we merge it into main, but if we wanted to

210
00:09:43.570 --> 00:09:45.120
keep that branch around for some reason,

211
00:09:45.120 --> 00:09:49.290
we could uncheck the box on the bottom left. After we're ready selecting

212
00:09:49.290 --> 00:09:51.950
our merge strategy, we can click Merge Pull Request, and this should

213
00:09:51.950 --> 00:09:56.490
finally get the commits into our main repository. So you'll see that our

214
00:09:56.490 --> 00:10:00.410
pull request is now in the merged state, and if we go back up to our

215
00:10:00.410 --> 00:10:03.990
repositories, and then we click into flasky from the initial view for

216
00:10:03.990 --> 00:10:04.910
the first time,

217
00:10:04.910 --> 00:10:07.620
you'll see that even on this main branch, we have all three

218
00:10:07.620 --> 00:10:11.040
files we were just working on. In later modules, we'll look at

219
00:10:11.040 --> 00:10:17.000
how we can add tests and deployments to the process of merging in code to our main branch.

