WEBVTT
1
00:00:01.040 --> 00:00:03.580
Now that we have a bunch of Git knowledge under our belt,

2
00:00:03.580 --> 00:00:05.740
let's look at where we'll be storing our code.

3
00:00:05.740 --> 00:00:08.850
We'll be putting it in different repository hosting tools.

4
00:00:08.850 --> 00:00:12.870
Now, depending on your organization, you might be using something like GitHub,

5
00:00:12.870 --> 00:00:14.530
GitLab, or Bitbucket,

6
00:00:14.530 --> 00:00:17.500
depending on what sort of features you want to use and if your

7
00:00:17.500 --> 00:00:19.460
organization is already working with these.

8
00:00:19.460 --> 00:00:24.340
For our purposes, we'll be focused exclusively on the equivalent in AWS,

9
00:00:24.340 --> 00:00:26.040
AWS CodeCommit.

10
00:00:26.040 --> 00:00:28.450
What are some of the benefits we'll get by working with

11
00:00:28.450 --> 00:00:31.640
CodeCommit or other repository hosting providers?

12
00:00:31.640 --> 00:00:35.250
Well, they'll be managing the infrastructure that actually hosts our code.

13
00:00:35.250 --> 00:00:39.330
They'll also allow us to do things like user and team management and assign

14
00:00:39.330 --> 00:00:42.380
permissions to the different users in our organizations.

15
00:00:42.380 --> 00:00:44.530
Now, in addition to all of these benefits,

16
00:00:44.530 --> 00:00:47.280
we can use them to integrate continuous integration and

17
00:00:47.280 --> 00:00:50.380
continuous delivery or deployment tooling and different

18
00:00:50.380 --> 00:00:52.140
testing workflows inside of that,

19
00:00:52.140 --> 00:00:55.970
and we'll be able to do code reviews and pull request approval

20
00:00:55.970 --> 00:00:59.350
workflows that allow multiple developers to collaborate on the

21
00:00:59.350 --> 00:01:01.890
same repositories at the same time.

22
00:01:01.890 --> 00:01:04.830
So when we're working with AWS CodeCommit specifically,

23
00:01:04.830 --> 00:01:07.590
there's a few different actions we need to take to get it set up.

24
00:01:07.590 --> 00:01:10.030
The first is an AWS admin.

25
00:01:10.030 --> 00:01:14.140
We'll need to go in and create a repository inside of CodeCommit.

26
00:01:14.140 --> 00:01:16.780
We'll also need to add a user that has permissions to

27
00:01:16.780 --> 00:01:19.600
access that CodeCommit repository, for example,

28
00:01:19.600 --> 00:01:23.660
a particular developer under their developer name in AWS.

29
00:01:23.660 --> 00:01:27.890
Then that user that has permissions to access the repository will have to take

30
00:01:27.890 --> 00:01:32.260
some actions of their own. They'll have to log into AWS and generate their own

31
00:01:32.260 --> 00:01:36.610
CodeCommit credentials so that they can access this repo and make sure that they

32
00:01:36.610 --> 00:01:39.240
have their code attributed to their user.

33
00:01:39.240 --> 00:01:42.310
Then they'll be able to save those credentials to their local

34
00:01:42.310 --> 00:01:46.970
machines and use the credentials to go and grab the CodeCommit repo

35
00:01:46.970 --> 00:01:48.970
to their local development environment.

36
00:01:48.970 --> 00:01:49.800
From there,

37
00:01:49.800 --> 00:01:52.890
they'll work with that repository using some of the Git workflows that

38
00:01:52.890 --> 00:01:56.640
we discussed earlier, in our cases, GitHub flow.

39
00:01:56.640 --> 00:02:03.000
So let's jump into a demo where we'll be taking all these actions inside of AWS ourselves.

