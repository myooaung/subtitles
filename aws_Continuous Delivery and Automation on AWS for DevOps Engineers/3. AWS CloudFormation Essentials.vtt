WEBVTT
1
00:00:01.340 --> 00:00:05.740
So now, let's look at some more of the basic concepts surrounding CloudFormation.

2
00:00:05.740 --> 00:00:06.300
First,

3
00:00:06.300 --> 00:00:10.780
what is CloudFormation? We looked at this a little bit in the previous sections,

4
00:00:10.780 --> 00:00:14.090
but it's an AWS service that allows us to manage our cloud

5
00:00:14.090 --> 00:00:17.040
resources using infrastructure as code.

6
00:00:17.040 --> 00:00:21.370
It'll allow us to use either JSON or YAML syntax to describe all

7
00:00:21.370 --> 00:00:24.850
of the resources that we want to create in AWS.

8
00:00:24.850 --> 00:00:28.640
It'll also allow us to extend the default CloudFormation syntax

9
00:00:28.640 --> 00:00:33.340
that we have with custom AWS Lambda functions that could create

10
00:00:33.340 --> 00:00:35.540
something called custom resources.

11
00:00:35.540 --> 00:00:38.890
And there's a lot of options for what we could do inside of CloudFormation,

12
00:00:38.890 --> 00:00:42.240
but let's look at some of the basic concepts first.

13
00:00:42.240 --> 00:00:44.760
The first concept is that of a template.

14
00:00:44.760 --> 00:00:44.910
Now,

15
00:00:44.910 --> 00:00:49.360
these templates contain all of the different things we want to create in AWS.

16
00:00:49.360 --> 00:00:51.940
And when we use them with CloudFormation,

17
00:00:51.940 --> 00:00:53.400
they create stacks,

18
00:00:53.400 --> 00:00:57.080
which are essentially amalgamation of all the different AWS

19
00:00:57.080 --> 00:01:01.040
resources that we want to create using those templates.

20
00:01:01.040 --> 00:01:01.950
So, for example,

21
00:01:01.950 --> 00:01:05.640
one stack might have different databases inside of it with all the

22
00:01:05.640 --> 00:01:08.770
networking rules that connect to those databases,

23
00:01:08.770 --> 00:01:11.740
as well as any virtual machines, or SQS queues,

24
00:01:11.740 --> 00:01:15.940
or SNS topics that we want to create in AWS.

25
00:01:15.940 --> 00:01:20.060
In addition to being able to write CloudFormation natively in JSON or YAML,

26
00:01:20.060 --> 00:01:23.900
there are other tools that would allow us to create CloudFormation code,

27
00:01:23.900 --> 00:01:26.770
things like the AWS Cloud Development Kit,

28
00:01:26.770 --> 00:01:28.780
AWS Serverless Application Model,

29
00:01:28.780 --> 00:01:33.540
or even third‑party frameworks not supported directly by AWS.

30
00:01:33.540 --> 00:01:35.120
So when we're looking at all of these,

31
00:01:35.120 --> 00:01:37.540
it's important to know how each of them differ.

32
00:01:37.540 --> 00:01:40.260
When we're working with CloudFormation directly,

33
00:01:40.260 --> 00:01:42.630
we're going to use it to control the state of our

34
00:01:42.630 --> 00:01:46.410
infrastructure by describing every single cloud resource

35
00:01:46.410 --> 00:01:49.240
inside of a descriptive set of code.

36
00:01:49.240 --> 00:01:51.570
In addition to using CloudFormation directly,

37
00:01:51.570 --> 00:01:55.070
we could also use something like the AWS Cloud Development Kit,

38
00:01:55.070 --> 00:01:58.040
which will allow us to control our infrastructure using either

39
00:01:58.040 --> 00:02:02.420
high‑level or low‑level constructs that consist of one or more

40
00:02:02.420 --> 00:02:06.550
cloud resources without having to describe every single resource

41
00:02:06.550 --> 00:02:08.840
in excruciating detail.

42
00:02:08.840 --> 00:02:11.850
Now, in addition to using the Cloud Development Kit,

43
00:02:11.850 --> 00:02:15.440
we could also use something like the AWS Serverless Application Model,

44
00:02:15.440 --> 00:02:16.760
or AWS SAM.

45
00:02:16.760 --> 00:02:16.910
Now,

46
00:02:16.910 --> 00:02:19.480
this will be more focused on helping us develop and

47
00:02:19.480 --> 00:02:22.270
deploy AWS Lambda‑based applications,

48
00:02:22.270 --> 00:02:27.250
but it does allow us to do this a lot more easily without having to delve

49
00:02:27.250 --> 00:02:31.340
into all the details of either CloudFormation or the CDK.

50
00:02:31.340 --> 00:02:34.730
There's a lot of other tools that integrate with CloudFormation as well.

51
00:02:34.730 --> 00:02:35.220
For example,

52
00:02:35.220 --> 00:02:39.580
something like AWS CodeDeploy would allow us to deploy application code

53
00:02:39.580 --> 00:02:43.820
to different compute services with nuanced rollout strategies. And some

54
00:02:43.820 --> 00:02:47.570
of these AWS Developer Tools services will also integrate with

55
00:02:47.570 --> 00:02:51.630
CloudFormation as a method for deploying application code out to your

56
00:02:51.630 --> 00:02:55.160
different compute resources. Now, when we're working with CloudFormation,

57
00:02:55.160 --> 00:02:58.470
we also have to pay attention to some of the permissions that we need in

58
00:02:58.470 --> 00:03:02.680
order to get it to deploy our resources. There is first the permissions we'd

59
00:03:02.680 --> 00:03:05.680
need in order to work with CloudFormation itself.

60
00:03:05.680 --> 00:03:06.430
For example,

61
00:03:06.430 --> 00:03:11.340
as a developer, inside of the AWS Identity and Access Management Console,

62
00:03:11.340 --> 00:03:14.980
we might need to get permissions to have the ability to see CloudFormation

63
00:03:14.980 --> 00:03:19.450
stacks and templates and deploy resources through CloudFormation, but then

64
00:03:19.450 --> 00:03:23.090
we also need to make sure we have permissions for all the services that will

65
00:03:23.090 --> 00:03:25.540
be touched by CloudFormation itself.

66
00:03:25.540 --> 00:03:29.930
So if you're deploying a resource to Amazon SNS, for example,

67
00:03:29.930 --> 00:03:33.490
and creating an SNS topic with CloudFormation, you'd also

68
00:03:33.490 --> 00:03:35.980
need permissions to create the topic,

69
00:03:35.980 --> 00:03:40.890
not just to be able to control CloudFormation stacks, and that'll go for any

70
00:03:40.890 --> 00:03:44.940
other resources that you're manipulating with CloudFormation.

71
00:03:44.940 --> 00:03:47.830
In addition to keeping these permissions in mind, when

72
00:03:47.830 --> 00:03:48.980
we're working with CloudFormation,

73
00:03:48.980 --> 00:03:52.330
there's a few security considerations we need to deal with.

74
00:03:52.330 --> 00:03:54.780
The first one is that build pipelines that use

75
00:03:54.780 --> 00:03:58.000
CloudFormation will carry a lot of permissions.

76
00:03:58.000 --> 00:04:01.450
If you think about what I just said for the permissions with CloudFormation,

77
00:04:01.450 --> 00:04:05.120
you might need permissions for a bunch of different things, like creating

78
00:04:05.120 --> 00:04:10.550
AWS resources, deleting AWS resources, or modifying configurations, plenty

79
00:04:10.550 --> 00:04:13.040
of things that could carry some risk with them.

80
00:04:13.040 --> 00:04:16.000
So it's important to have isolated and inaccessible

81
00:04:16.000 --> 00:04:18.560
build environments if it all possible,

82
00:04:18.560 --> 00:04:21.750
meaning you can't have a developer fiddling around inside of your build

83
00:04:21.750 --> 00:04:25.390
environment and taking advantage of the fact that CloudFormation needs a

84
00:04:25.390 --> 00:04:27.940
lot of permissions to do what it needs to do.

85
00:04:27.940 --> 00:04:31.520
You'll also need to make sure you secure the pipeline and how to

86
00:04:31.520 --> 00:04:36.280
modify it or it's permissions so that developers who go rogue or

87
00:04:36.280 --> 00:04:40.000
anybody who inadvertently gets access to your system can't modify

88
00:04:40.000 --> 00:04:41.340
anything they shouldn't.

89
00:04:41.340 --> 00:04:42.210
And finally,

90
00:04:42.210 --> 00:04:45.690
you'll need to think outside the context of the build pipeline itself,

91
00:04:45.690 --> 00:04:46.410
for example,

92
00:04:46.410 --> 00:04:50.440
to secure the Git workflows that trigger build pipelines. Even if I

93
00:04:50.440 --> 00:04:53.630
don't have access to a pipeline or a build environment,

94
00:04:53.630 --> 00:04:57.760
I could go into a GitHub repo, change some of the code inside

95
00:04:57.760 --> 00:05:00.870
of the infrastructure as code, and introduce a flaw either

96
00:05:00.870 --> 00:05:02.840
intentionally or unintentionally.

97
00:05:02.840 --> 00:05:08.210
So making sure that you secure those Git repositories and implement review

98
00:05:08.210 --> 00:05:16.000
processes on your code changes is essential when you're trying to set up secure practices using infrastructure as code.

