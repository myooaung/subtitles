WEBVTT
1
00:00:01.140 --> 00:00:03.910
So why would we want to use infrastructure as code?

2
00:00:03.910 --> 00:00:06.330
Well, there's a lot of different benefits we can get from it.

3
00:00:06.330 --> 00:00:08.460
Let's look at a few topâ€‘level benefits and dive

4
00:00:08.460 --> 00:00:10.100
into more detail on each of them.

5
00:00:10.100 --> 00:00:11.920
The first of these will be cost management,

6
00:00:11.920 --> 00:00:14.970
how we can save money or at least manage the cost that

7
00:00:14.970 --> 00:00:17.440
we have using infrastructure as code.

8
00:00:17.440 --> 00:00:20.700
We'll also look at how we can create infrastructures that are

9
00:00:20.700 --> 00:00:23.410
reproducible every time we want to create them.

10
00:00:23.410 --> 00:00:27.340
So if we have a very similar project for one client and for another,

11
00:00:27.340 --> 00:00:30.660
we might want to create the exact same infrastructure for both of them.

12
00:00:30.660 --> 00:00:32.140
We'll talk about this too.

13
00:00:32.140 --> 00:00:32.890
And then finally,

14
00:00:32.890 --> 00:00:36.550
we'll look at how we can make sure we're doing some secure things

15
00:00:36.550 --> 00:00:39.240
when we're working with infrastructure as code.

16
00:00:39.240 --> 00:00:41.040
Let's start with cost management.

17
00:00:41.040 --> 00:00:42.020
With cost management,

18
00:00:42.020 --> 00:00:45.840
we'll have the ability to allocate costs for every resource that we

19
00:00:45.840 --> 00:00:48.940
create when we're using infrastructure as code.

20
00:00:48.940 --> 00:00:49.670
In AWS,

21
00:00:49.670 --> 00:00:54.010
we can do this by tagging the different resources we create and associating

22
00:00:54.010 --> 00:00:57.560
their costs with particular projects or particular cost centers,

23
00:00:57.560 --> 00:01:00.040
such as departments in our organization.

24
00:01:00.040 --> 00:01:04.030
We can also create cost estimates for each infrastructure stack.

25
00:01:04.030 --> 00:01:06.830
If two stacks are identical between different projects,

26
00:01:06.830 --> 00:01:10.590
we can probably assume they're going to be relatively the same cost

27
00:01:10.590 --> 00:01:13.550
unless there is significant differences inside of the stack involving

28
00:01:13.550 --> 00:01:16.840
how much they can scale out or scale down.

29
00:01:16.840 --> 00:01:17.390
Additionally,

30
00:01:17.390 --> 00:01:21.950
we're going to avoid having leftover stranded resources throughout our

31
00:01:21.950 --> 00:01:25.050
AWS cloud infrastructure that we're still paying for,

32
00:01:25.050 --> 00:01:27.850
but that we're not really sure which projects they're associated

33
00:01:27.850 --> 00:01:29.690
with and that we don't want to delete them.

34
00:01:29.690 --> 00:01:32.390
You can avoid this by using infrastructure as code and

35
00:01:32.390 --> 00:01:36.140
making sure you're doing tagging, like I mentioned for cost allocation.

36
00:01:36.140 --> 00:01:36.930
Additionally,

37
00:01:36.930 --> 00:01:40.390
infrastructure as code can help with policy compliance, for example,

38
00:01:40.390 --> 00:01:43.650
if we have different regulations that mean we have to have pieces

39
00:01:43.650 --> 00:01:46.150
of infrastructure that do one thing or another.

40
00:01:46.150 --> 00:01:47.550
With infrastructure as code,

41
00:01:47.550 --> 00:01:51.380
you could actually evaluate that line by line through the code and make sure

42
00:01:51.380 --> 00:01:54.740
that you are compliant with whatever those policies are.

43
00:01:54.740 --> 00:01:57.080
And, of course, with infrastructure as code,

44
00:01:57.080 --> 00:02:01.920
you don't have to do as much work to create one set of resources multiple times.

45
00:02:01.920 --> 00:02:04.000
It'll actually save you a lot of time,

46
00:02:04.000 --> 00:02:07.940
and this impacts the costs and the bottom line that you have.

47
00:02:07.940 --> 00:02:08.130
Now,

48
00:02:08.130 --> 00:02:11.120
let's talk about this last bit a little more because it goes

49
00:02:11.120 --> 00:02:14.870
into reproducibility between different environments when we're

50
00:02:14.870 --> 00:02:16.250
creating the same infrastructure.

51
00:02:16.250 --> 00:02:19.330
Let's imagine we have a CloudFormation template.

52
00:02:19.330 --> 00:02:22.180
This template will help us create infrastructure that

53
00:02:22.180 --> 00:02:25.040
contains things like databases, virtual machines,

54
00:02:25.040 --> 00:02:27.760
and the networking rules that make them able to talk to

55
00:02:27.760 --> 00:02:30.190
one another and to the larger internet.

56
00:02:30.190 --> 00:02:32.530
Now, if we wanted to reproduce this infrastructure,

57
00:02:32.530 --> 00:02:36.200
we could use the same template in a different AWS account to

58
00:02:36.200 --> 00:02:38.740
produce the exact same infrastructure.

59
00:02:38.740 --> 00:02:41.500
So what is this reproducibility offer us?

60
00:02:41.500 --> 00:02:41.830
Well,

61
00:02:41.830 --> 00:02:45.590
it helps us avoid making mistakes inside of the AWS console

62
00:02:45.590 --> 00:02:48.240
UI, clicking on the wrong buttons or setting the

63
00:02:48.240 --> 00:02:50.740
configuration settings inappropriately.

64
00:02:50.740 --> 00:02:53.390
There's also no series of commands that we have to

65
00:02:53.390 --> 00:02:55.200
run correctly in the right order.

66
00:02:55.200 --> 00:02:58.560
We just get a descriptive template of our entire infrastructure,

67
00:02:58.560 --> 00:03:02.070
and we deploy that. Now, you can use this one configuration

68
00:03:02.070 --> 00:03:05.190
file and then deploy to any AWS account,

69
00:03:05.190 --> 00:03:09.370
and we can, even if we wanted to, parameterize across different regions or

70
00:03:09.370 --> 00:03:14.130
application stages to help us manage things like one version of an application

71
00:03:14.130 --> 00:03:18.650
inside of the US region of our choice and another version of an application

72
00:03:18.650 --> 00:03:21.840
inside of Europe or another AWS data center.

73
00:03:21.840 --> 00:03:23.040
Now, if we have different stages,

74
00:03:23.040 --> 00:03:26.650
we can also manage things like a test environment versus a production

75
00:03:26.650 --> 00:03:31.240
environment and different API keys we might have in one or the other.

76
00:03:31.240 --> 00:03:35.260
So in addition to reproducibility, what are some of the other benefits we get?

77
00:03:35.260 --> 00:03:39.750
Let's look at security. With confirmation templates, we can have them be

78
00:03:39.750 --> 00:03:44.130
reviewed by other developers or DevOps engineers to make sure that they live

79
00:03:44.130 --> 00:03:47.240
up to whatever standards our organization has.

80
00:03:47.240 --> 00:03:50.590
We can also create approved reusable templates with different

81
00:03:50.590 --> 00:03:54.330
parameterization in them to make sure that whatever we're building is

82
00:03:54.330 --> 00:03:58.640
within the security guidelines that our organization sets, and we can

83
00:03:58.640 --> 00:04:02.050
limit the ways that we change the infrastructure inside of our AWS

84
00:04:02.050 --> 00:04:06.140
account, mandating that it goes through infrastructure as code processes

85
00:04:06.140 --> 00:04:09.300
rather than developers changing any of the settings inside of our

86
00:04:09.300 --> 00:04:10.740
accounts that they'd like.

87
00:04:10.740 --> 00:04:10.960
Now,

88
00:04:10.960 --> 00:04:13.800
this can also help when we have things like audits of our

89
00:04:13.800 --> 00:04:16.660
infrastructure because auditors can then focus on the

90
00:04:16.660 --> 00:04:19.290
infrastructure as code pieces of our code,

91
00:04:19.290 --> 00:04:23.360
and they can see all the different changes that occurred to that infrastructure

92
00:04:23.360 --> 00:04:26.600
and also review any application logs if we've set those up.

93
00:04:26.600 --> 00:04:30.410
But that can severely reduce the scope of what the auditors have

94
00:04:30.410 --> 00:04:33.350
to look at in our environments to make sure they're confident

95
00:04:33.350 --> 00:04:36.400
that what we're doing is living up to the standards that they're

96
00:04:36.400 --> 00:04:38.140
there to check in on.

97
00:04:38.140 --> 00:04:41.340
So hopefully now you're convinced that infrastructure as code gives us

98
00:04:41.340 --> 00:04:49.000
a lot of different benefits when we're working with it. Let's learn how we can apply it directly inside of AWS.

