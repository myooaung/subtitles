1
00:00:00,940 --> 00:00:03,100
So what is AWS CodeBuild?

2
00:00:03,100 --> 00:00:07,540
And how can it help people like DevOps engineers putting together applications?

3
00:00:07,540 --> 00:00:10,970
Well, AWS CodeBuild will allow us to do a few different things.

4
00:00:10,970 --> 00:00:14,040
If we're working with a programming language that requires us to compile

5
00:00:14,040 --> 00:00:16,780
code before we deploy it out into our infrastructure,

6
00:00:16,780 --> 00:00:19,540
CodeBuild can help us automate this step.

7
00:00:19,540 --> 00:00:22,370
It can also help us to run tests against any changes we

8
00:00:22,370 --> 00:00:24,960
make to our application code to make sure that we're not

9
00:00:24,960 --> 00:00:27,180
going to run into regressions, or issues,

10
00:00:27,180 --> 00:00:30,560
or add additional bugs to our code that we would otherwise

11
00:00:30,560 --> 00:00:33,340
have been able to catch with some tests.

12
00:00:33,340 --> 00:00:34,050
Additionally,

13
00:00:34,050 --> 00:00:36,810
if we compile our code into artifacts or we create other

14
00:00:36,810 --> 00:00:39,140
sorts of artifacts that we need to deploy,

15
00:00:39,140 --> 00:00:42,470
CodeBuild can help us produce those deployment artifacts and do

16
00:00:42,470 --> 00:00:45,440
things with them using other AWS services.

17
00:00:45,440 --> 00:00:48,140
So what are some of the benefits of using CodeBuild?

18
00:00:48,140 --> 00:00:50,960
Well, first, it's fully managed by AWS.

19
00:00:50,960 --> 00:00:54,610
Rather than having to create our own build server and keep tabs on that,

20
00:00:54,610 --> 00:00:56,780
as well as patch it and secure it,

21
00:00:56,780 --> 00:01:00,930
we can outsource this all to AWS CodeBuild, and this will help us avoid the

22
00:01:00,930 --> 00:01:04,110
overhead of patching or versioning our build software,

23
00:01:04,110 --> 00:01:07,340
as well as keeping tabs on the server that's running all of it.

24
00:01:07,340 --> 00:01:08,120
Additionally,

25
00:01:08,120 --> 00:01:11,910
we can get access to a bunch of preconfigured environments using CodeBuild,

26
00:01:11,910 --> 00:01:15,830
so we can get access to different operating systems or a variety of

27
00:01:15,830 --> 00:01:20,140
different language runtimes to either build or test our code.

28
00:01:20,140 --> 00:01:23,260
And this can be helpful because CodeBuild will manage all these for us

29
00:01:23,260 --> 00:01:26,060
without us having to go and install the languages and the different

30
00:01:26,060 --> 00:01:29,540
versions of languages and runtimes that we might need.

31
00:01:29,540 --> 00:01:32,840
So let's look at some or concepts related to CodeBuild.

32
00:01:32,840 --> 00:01:35,670
The first one we need to understand is the build project.

33
00:01:35,670 --> 00:01:38,600
This essentially contains all the information that we need to

34
00:01:38,600 --> 00:01:41,650
create an environment where we build our code,

35
00:01:41,650 --> 00:01:45,580
and this, kind of expectedly, is something called a build environment.

36
00:01:45,580 --> 00:01:47,590
This build environment can be things like the

37
00:01:47,590 --> 00:01:49,580
operating system and the language runtime.

38
00:01:49,580 --> 00:01:52,220
And we also have something called the buildspec.

39
00:01:52,220 --> 00:01:55,200
This will help us determine what to do during the CodeBuild

40
00:01:55,200 --> 00:01:59,680
process, when we run specific commands, when we install specific software,

41
00:01:59,680 --> 00:02:01,620
and when we output particular artifacts,

42
00:02:01,620 --> 00:02:05,840
all those sorts of things will be configured inside of our buildspec file.

43
00:02:05,840 --> 00:02:08,440
So let's try and visualize these concepts.

44
00:02:08,440 --> 00:02:12,710
First, we have our build projects, and these get turned into build environments,

45
00:02:12,710 --> 00:02:15,820
both the operating system, such as a Linux operating system,

46
00:02:15,820 --> 00:02:17,250
or a Windows operating system,

47
00:02:17,250 --> 00:02:19,890
or one of the flavors of the Linux operating system,

48
00:02:19,890 --> 00:02:22,970
to be more specific, and the runtime that we're working with.

49
00:02:22,970 --> 00:02:25,350
In the case of some examples we'll be working with later,

50
00:02:25,350 --> 00:02:26,350
we'll be using Python,

51
00:02:26,350 --> 00:02:31,030
but you could choose a lot of other runtimes to build and work with your code.

52
00:02:31,030 --> 00:02:33,180
And we'll also have our source code.

53
00:02:33,180 --> 00:02:36,460
Our source code is going to include a buildspec file, but it's

54
00:02:36,460 --> 00:02:38,280
not just going to be that buildspec file.

55
00:02:38,280 --> 00:02:41,580
It'll also be all the code we're using to build our application.

56
00:02:41,580 --> 00:02:42,630
In the case of later demos,

57
00:02:42,630 --> 00:02:45,290
this might be our flask application and all the files that

58
00:02:45,290 --> 00:02:48,100
go with it alongside the buildspec file.

59
00:02:48,100 --> 00:02:52,340
The buildspec file will then go into the build environment along with our code,

60
00:02:52,340 --> 00:02:54,750
and we'll be using that to help determine what happens

61
00:02:54,750 --> 00:02:57,440
inside of this build environment.

62
00:02:57,440 --> 00:02:58,270
From here,

63
00:02:58,270 --> 00:03:01,830
the buildspec file might tell our application that it needs to do something

64
00:03:01,830 --> 00:03:06,280
like install dependencies inside of the build environment, and this might mean

65
00:03:06,280 --> 00:03:09,960
adding different libraries to our applications so that it can run correctly

66
00:03:09,960 --> 00:03:12,440
with all the dependencies that it requires.

67
00:03:12,440 --> 00:03:15,120
It also might mean running tests against the application

68
00:03:15,120 --> 00:03:16,780
after everything has been installed.

69
00:03:16,780 --> 00:03:18,730
And when those tests are run,

70
00:03:18,730 --> 00:03:22,190
it might need to output test results to some location so that we can

71
00:03:22,190 --> 00:03:25,040
see them and confirm that everything is going well.

72
00:03:25,040 --> 00:03:28,540
Now, these test results might get output to something like an S3 bucket,

73
00:03:28,540 --> 00:03:31,440
and we could store them there to be viewed later.

74
00:03:31,440 --> 00:03:35,030
But if our tests run successfully, we might also configure it to

75
00:03:35,030 --> 00:03:38,400
package everything up from our application and deploy this out

76
00:03:38,400 --> 00:03:41,620
somewhere too, potentially to an S3 bucket to be picked up by our

77
00:03:41,620 --> 00:03:43,340
deployment infrastructure.

78
00:03:43,340 --> 00:03:44,560
In addition to this,

79
00:03:44,560 --> 00:03:47,590
CodeBuild will also keep tabs on everything that's happening inside

80
00:03:47,590 --> 00:03:50,610
of the build environment, and it'll send logs from the entire

81
00:03:50,610 --> 00:03:54,480
process inside of the build environment to CloudWatch Logs so we can

82
00:03:54,480 --> 00:03:57,840
know whether or not things happen correctly or incorrectly inside of

83
00:03:57,840 --> 00:03:58,940
our different builds.

84
00:03:58,940 --> 00:04:02,600
It'll also store a lot of this information inside of the AWS CodeBuild

85
00:04:02,600 --> 00:04:06,390
console as well. So now that you have a better understanding of what

86
00:04:06,390 --> 00:04:14,000
happens inside of CodeBuild, in the next section, we'll look closer at the buildspec and how we write buildspec files.

