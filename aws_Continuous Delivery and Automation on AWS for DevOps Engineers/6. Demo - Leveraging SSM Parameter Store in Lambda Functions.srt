1
00:00:00,940 --> 00:00:05,760
In this demo, we'll be leveraging Parameter Store in lambda functions.

2
00:00:05,760 --> 00:00:08,650
Now it seems like this is a bit of a change of pace from the

3
00:00:08,650 --> 00:00:11,690
infrastructure as code that we've just been doing; however,

4
00:00:11,690 --> 00:00:15,840
you'll see in a moment why it's so important to know how to use Parameter Store.

5
00:00:15,840 --> 00:00:19,890
It'll allow us to add secrets inside of the Simple Systems Manager

6
00:00:19,890 --> 00:00:23,540
Parameter Store that we can then reference from inside of

7
00:00:23,540 --> 00:00:26,890
applications that run our code like AWS Lambda.

8
00:00:26,890 --> 00:00:29,720
Then we can test the lambda functions out with the values

9
00:00:29,720 --> 00:00:31,750
that are stored inside of Parameter Store.

10
00:00:31,750 --> 00:00:34,000
Now this all matters because it helps us avoid

11
00:00:34,000 --> 00:00:36,300
storing secrets inside of our code.

12
00:00:36,300 --> 00:00:40,940
Either our application code or our infrastructure as code code.

13
00:00:40,940 --> 00:00:43,340
You'll see in a moment how this will help us out.

14
00:00:43,340 --> 00:00:47,900
Let's go over to our code editors now. I've already downloaded the

15
00:00:47,900 --> 00:00:50,550
code for this module, and its inside of the

16
00:00:50,550 --> 00:00:55,130
demo2‑leveraging‑parameter‑store‑in‑lambda‑functions folder. And

17
00:00:55,130 --> 00:00:57,380
inside of here, we have a few different files.

18
00:00:57,380 --> 00:01:00,790
I'll have some commands that you can run to work with CloudFormation,

19
00:01:00,790 --> 00:01:03,500
some commands you can run to work with Parameter Store,

20
00:01:03,500 --> 00:01:06,540
and then a lambda‑template.yml file.

21
00:01:06,540 --> 00:01:08,810
This is actually a CloudFormation template that will

22
00:01:08,810 --> 00:01:12,770
deploy out a lambda function using the same CloudFormation

23
00:01:12,770 --> 00:01:14,990
CLI that we worked with earlier.

24
00:01:14,990 --> 00:01:17,880
It'll look a little bit different than the JSON that we worked with,

25
00:01:17,880 --> 00:01:20,390
but overall, it contains a resources section,

26
00:01:20,390 --> 00:01:22,990
which has different resources inside of it that'll

27
00:01:22,990 --> 00:01:27,240
automatically be created when we deploy it into AWS.

28
00:01:27,240 --> 00:01:27,570
Now,

29
00:01:27,570 --> 00:01:30,310
even if we look down on line 38, you'll see that some of the

30
00:01:30,310 --> 00:01:33,540
code is written inline for our lambda function.

31
00:01:33,540 --> 00:01:33,870
Now,

32
00:01:33,870 --> 00:01:35,670
I won't go into too much detail about what's

33
00:01:35,670 --> 00:01:37,640
actually happening in this template,

34
00:01:37,640 --> 00:01:40,380
but essentially, we're creating a lambda function that will

35
00:01:40,380 --> 00:01:44,430
then return the value of an SSM parameter that we're storing

36
00:01:44,430 --> 00:01:47,140
inside of AWS' Parameter Store.

37
00:01:47,140 --> 00:01:49,880
So, let's go ahead and get started by going over to

38
00:01:49,880 --> 00:01:52,540
the ssm‑commands section first.

39
00:01:52,540 --> 00:01:56,270
Now I've already downloaded and installed the AWS CLI and

40
00:01:56,270 --> 00:01:58,060
configured it, so if you need help with that,

41
00:01:58,060 --> 00:02:00,860
remember to go back to the instruction section for this

42
00:02:00,860 --> 00:02:03,740
entire course to go through with those steps.

43
00:02:03,740 --> 00:02:06,910
The first thing we'll need to do is to create a parameter.

44
00:02:06,910 --> 00:02:12,840
We'll do this using the aws ssm put‑parameter command.

45
00:02:12,840 --> 00:02:15,640
Then, we'll put a space and a \ so we can see everything we're

46
00:02:15,640 --> 00:02:20,190
typing out, and we'll use ‑‑name, in this case, giving the parameter

47
00:02:20,190 --> 00:02:23,840
a name of site and then capital C, Color.

48
00:02:23,840 --> 00:02:28,150
Then we'll do one more \ and hit Enter, and we'll give this value for

49
00:02:28,150 --> 00:02:31,730
the siteColor, currently as the siteColor of purple.

50
00:02:31,730 --> 00:02:36,510
Then we'll do one more \ here, hit Enter, do ‑‑type in order to

51
00:02:36,510 --> 00:02:39,690
indicate whether or not we're going to store it as a just regular

52
00:02:39,690 --> 00:02:43,100
string or an encrypted string. And to store it as an encrypted

53
00:02:43,100 --> 00:02:46,960
string, we'll use the SecureString value like you see up here in

54
00:02:46,960 --> 00:02:49,240
the ssm‑commands.txt file.

55
00:02:49,240 --> 00:02:52,340
Then I can hit Enter, and this should create a parameter

56
00:02:52,340 --> 00:02:55,140
inside of AWS' Parameter Store for me.

57
00:02:55,140 --> 00:02:56,950
You'll see here that the current version of this parameter

58
00:02:56,950 --> 00:02:59,670
is 1, meaning I haven't created this before and we can

59
00:02:59,670 --> 00:03:01,840
iterate on it later on if we want.

60
00:03:01,840 --> 00:03:04,160
Now if we wanted to get this back using the CLI,

61
00:03:04,160 --> 00:03:06,460
I'm going to go ahead and clear the screen to do this and show you what

62
00:03:06,460 --> 00:03:12,770
the command looks like as well. We could run aws ssm get‑parameter, and

63
00:03:12,770 --> 00:03:16,670
then we could do a \ here, go onto the next line, do ‑‑name, and then get

64
00:03:16,670 --> 00:03:20,500
back the parameter we just created, in this case, called siteColor, then

65
00:03:20,500 --> 00:03:23,380
I'll hit Enter. And you'll notice that we get back a bunch of different

66
00:03:23,380 --> 00:03:26,340
information, including this value here.

67
00:03:26,340 --> 00:03:29,990
Now this value is an encrypted version of the purple color,

68
00:03:29,990 --> 00:03:32,680
and you'll see that it returns in all this gibberish

69
00:03:32,680 --> 00:03:34,200
rather than just giving us purple.

70
00:03:34,200 --> 00:03:37,780
So if we wanted to, instead, get the value back decrypted,

71
00:03:37,780 --> 00:03:40,000
we could use the same command we did earlier.

72
00:03:40,000 --> 00:03:40,480
Except now,

73
00:03:40,480 --> 00:03:43,510
instead of just passing in siteColor, we'll do another \,

74
00:03:43,510 --> 00:03:49,640
hit Enter, and use ‑‑with‑decryption,

75
00:03:49,640 --> 00:03:54,940
and then this should come back with the value decrypted, currently purple.

76
00:03:54,940 --> 00:03:56,150
So now that we've done this,

77
00:03:56,150 --> 00:04:04,000
let's change gears a little bit, and in the next video, let's look at how we can deploy the lambda function template using CloudFormation.

