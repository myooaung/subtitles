WEBVTT
1
00:00:01.110 --> 00:00:05.350
Let's start deploying our lambda function by going to cfn‑commands.txt to

2
00:00:05.350 --> 00:00:08.680
see what commands we need to use in order to deploy this.

3
00:00:08.680 --> 00:00:09.780
Now, in this case,

4
00:00:09.780 --> 00:00:12.770
we're doing a bit more than what we were doing in the previous demo.

5
00:00:12.770 --> 00:00:16.720
We're deploying a lambda function along with a variety of other resources,

6
00:00:16.720 --> 00:00:20.120
including identity and access management resources to give our lambda

7
00:00:20.120 --> 00:00:23.980
function permissions to go and access the Parameter Store and the

8
00:00:23.980 --> 00:00:25.850
value that we just created inside of it.

9
00:00:25.850 --> 00:00:28.350
So our command to deploy this will be a little bit more

10
00:00:28.350 --> 00:00:30.450
complicated than in the last demo.

11
00:00:30.450 --> 00:00:35.270
We'll use aws cloudformation deploy, then we'll do a \,

12
00:00:35.270 --> 00:00:39.140
and now we're going to specify the template file the same way we were before,

13
00:00:39.140 --> 00:00:44.740
in this case, lambda‑template.yml rather than a JSON file.

14
00:00:44.740 --> 00:00:48.540
And then we'll need to give our stack a stack name the same way we did before.

15
00:00:48.540 --> 00:00:51.950
In this case, I'll call this demo‑lambda‑stack,

16
00:00:51.950 --> 00:00:57.590
and we can run one more \, and then we'll do a new flag called capabilities,

17
00:00:57.590 --> 00:01:01.030
which will then pass in a value here to determine what

18
00:01:01.030 --> 00:01:03.590
capabilities we should have when running this command.

19
00:01:03.590 --> 00:01:06.830
We're going to need to pass in CAPABILITY_IAM,

20
00:01:06.830 --> 00:01:11.680
and we'll also need to pass in CAPABILITY_NAMED_IAM.

21
00:01:11.680 --> 00:01:16.950
Now both of these will allow us to use AWS IAM roles and assign

22
00:01:16.950 --> 00:01:19.890
them to our lambda function and also create some resources that

23
00:01:19.890 --> 00:01:21.840
we need in the background to do this.

24
00:01:21.840 --> 00:01:24.260
So with all of this written out, we can click Enter here,

25
00:01:24.260 --> 00:01:26.530
and we could look for the deployed lambda function,

26
00:01:26.530 --> 00:01:30.270
either running the commands below or going into the AWS CloudFormation

27
00:01:30.270 --> 00:01:33.660
console and reviewing the output of our CloudFormation stack.

28
00:01:33.660 --> 00:01:35.100
Once this is completed,

29
00:01:35.100 --> 00:01:39.260
we could just run the aws lambda list‑functions command to see what's in

30
00:01:39.260 --> 00:01:41.640
there and double check that it's been deployed correctly.

31
00:01:41.640 --> 00:01:43.940
So we'll do that in a second.

32
00:01:43.940 --> 00:01:46.800
So after our stack has been deployed, let's clear the screen.

33
00:01:46.800 --> 00:01:49.400
Now if we wanted to list out all the functions in our account,

34
00:01:49.400 --> 00:01:52.440
we could run the aws lambda list‑functions command.

35
00:01:52.440 --> 00:01:55.190
However, if you have lots of lambda functions in your account,

36
00:01:55.190 --> 00:01:58.910
this can give us quite a bit of detail back about all the

37
00:01:58.910 --> 00:02:00.600
lambda functions that we have in here.

38
00:02:00.600 --> 00:02:03.370
Another easier way is to go to the AWS console,

39
00:02:03.370 --> 00:02:05.790
go to the Services section and look up lambda,

40
00:02:05.790 --> 00:02:09.040
and then we can look for the lambda function we just deployed.

41
00:02:09.040 --> 00:02:12.840
It should be sorted in the list of functions by the last modified amount.

42
00:02:12.840 --> 00:02:16.500
Now if we go to this one, it looks like it was modified 1 minute ago,

43
00:02:16.500 --> 00:02:20.340
so we can click on this here and get more details about the function.

44
00:02:20.340 --> 00:02:22.340
In order to invoke this function,

45
00:02:22.340 --> 00:02:26.240
we then need the function name to paste into this next command in the file.

46
00:02:26.240 --> 00:02:27.410
So let's try that here.

47
00:02:27.410 --> 00:02:30.410
Let's grab the entire function name with this pretty long name

48
00:02:30.410 --> 00:02:32.240
with a bunch of gibberish on the end of it,

49
00:02:32.240 --> 00:02:35.350
and we'll run aws lambda invoke,

50
00:02:35.350 --> 00:02:40.540
and we'll do a \ here and hit Enter so we can pass in the function name,

51
00:02:40.540 --> 00:02:45.310
and it's a long function name here, so we can do one more \ at the end of it,

52
00:02:45.310 --> 00:02:47.880
hit Enter, and then we'll have an output file.

53
00:02:47.880 --> 00:02:53.320
We'll just call this result‑file.txt where the value of the

54
00:02:53.320 --> 00:02:55.740
function should output its result to.

55
00:02:55.740 --> 00:02:58.770
Now you'll see that we have an executed status code of 200,

56
00:02:58.770 --> 00:03:00.670
so that means it should've worked.

57
00:03:00.670 --> 00:03:02.230
So let's check our result file.

58
00:03:02.230 --> 00:03:04.850
It looks like the status code of this function is 200,

59
00:03:04.850 --> 00:03:06.400
which generally indicates success,

60
00:03:06.400 --> 00:03:08.700
and the body returned by the function is purple,

61
00:03:08.700 --> 00:03:11.150
which means that it successfully returned the value that we

62
00:03:11.150 --> 00:03:13.240
were storing inside of Parameter Store.

63
00:03:13.240 --> 00:03:14.540
Now if we wanted to change this,

64
00:03:14.540 --> 00:03:16.170
we wouldn't need to change anything in the

65
00:03:16.170 --> 00:03:18.730
CloudFormation template or in our lambda code.

66
00:03:18.730 --> 00:03:21.070
Instead, we could go to the ssm‑commands section,

67
00:03:21.070 --> 00:03:23.580
and we could run a command like this one you see right here,

68
00:03:23.580 --> 00:03:26.500
which is pretty similar to our previous commands to put a

69
00:03:26.500 --> 00:03:28.750
parameter inside of Parameter Store.

70
00:03:28.750 --> 00:03:29.630
I'll paste it in here,

71
00:03:29.630 --> 00:03:33.580
and it will allow us to overwrite the value from purple to red.

72
00:03:33.580 --> 00:03:36.350
The reason for this being that it has a value of red,

73
00:03:36.350 --> 00:03:40.130
and it's also including the ‑‑overwrite flag to make sure that

74
00:03:40.130 --> 00:03:42.740
we can replace purple with our new value.

75
00:03:42.740 --> 00:03:43.600
Now that we've done this,

76
00:03:43.600 --> 00:03:47.530
if we press up twice and we invoke the same lambda function one

77
00:03:47.530 --> 00:03:49.700
more time and then look at the result file,

78
00:03:49.700 --> 00:03:52.890
you'll notice that it's changed to red now instead of purple,

79
00:03:52.890 --> 00:03:55.300
even though we haven't changed a thing about the lambda

80
00:03:55.300 --> 00:03:57.880
function or about the CloudFormation template.

81
00:03:57.880 --> 00:04:01.210
And what this allows us to do is control very specific parts

82
00:04:01.210 --> 00:04:04.740
of our application outside of the context of CloudFormation

83
00:04:04.740 --> 00:04:06.790
or the application code itself.

84
00:04:06.790 --> 00:04:10.650
This can be really helpful for things like API keys and also other

85
00:04:10.650 --> 00:04:13.250
sorts of credentials that you don't want to include inside your

86
00:04:13.250 --> 00:04:15.840
source code or your infrastructure as code.

87
00:04:15.840 --> 00:04:17.520
Now that you know how to use SSM,

88
00:04:17.520 --> 00:04:20.840
you should be able to integrate it inside of your applications using

89
00:04:20.840 --> 00:04:23.610
all the different kinds of SDKs that AWS offers.

90
00:04:23.610 --> 00:04:27.700
In this case, in our lambda function, we were relying on something called boto3,

91
00:04:27.700 --> 00:04:31.480
which is the SDK for Python to create a Simple Systems Manager

92
00:04:31.480 --> 00:04:34.540
Parameter Store client and interact with it.

93
00:04:34.540 --> 00:04:37.050
So hopefully now you're confident enough to start using

94
00:04:37.050 --> 00:04:40.740
Parameter Store inside of your own applications.

95
00:04:40.740 --> 00:04:43.180
So we went through quite a bit in this module.

96
00:04:43.180 --> 00:04:47.110
We looked at infrastructure as code and some CloudFormation basics,

97
00:04:47.110 --> 00:04:51.440
as well as other infrastructure tools that we might use inside of AWS,

98
00:04:51.440 --> 00:04:55.320
and some security best practices ranging for making sure we have the right

99
00:04:55.320 --> 00:04:58.210
permissions set on our cloud infrastructure pipelines,

100
00:04:58.210 --> 00:05:01.650
as well as to make sure that we're using things like SSM Parameter

101
00:05:01.650 --> 00:05:04.360
Store to move secrets out of our infrastructure,

102
00:05:04.360 --> 00:05:08.140
in our infrastructure as code, and out of our applications.

103
00:05:08.140 --> 00:05:09.150
Now, after that,

104
00:05:09.150 --> 00:05:13.010
we went hands on and worked with CloudFormation inside of the AWS console,

105
00:05:13.010 --> 00:05:17.140
as well as working with Parameter Store and something like AWS Lambda.

106
00:05:17.140 --> 00:05:20.470
Keep in mind that this is meant to be a really high level and quick and

107
00:05:20.470 --> 00:05:23.890
dirty introduction to CloudFormation and Parameter Store.

108
00:05:23.890 --> 00:05:25.790
If you want to learn more about CloudFormation,

109
00:05:25.790 --> 00:05:28.850
I highly recommend looking at other courses here on Pluralsight,

110
00:05:28.850 --> 00:05:31.420
as there's a lot more to learn about different

111
00:05:31.420 --> 00:05:33.230
kinds of CloudFormation resources,

112
00:05:33.230 --> 00:05:35.590
how you can parameterize things with CloudFormation,

113
00:05:35.590 --> 00:05:38.640
and a variety of other topics.

114
00:05:38.640 --> 00:05:44.000
In the meantime, we'll keep learning about other DevOps tools inside of this course.

