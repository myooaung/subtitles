WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.620
hold it.

00:00:00.620 --> 00:00:05.410
We already had some understanding on Jerry BC We've taken a look at how to set up the

00:00:05.410 --> 00:00:06.190
enrollment,

00:00:06.190 --> 00:00:12.070
to use the Jerry busy drivers etcetera and in this very well thought off,

00:00:12.070 --> 00:00:13.740
try to talk on the same lines.

00:00:13.740 --> 00:00:20.830
So we have our application logic and say that we have all these three data basis from

00:00:20.830 --> 00:00:23.160
different providers like posed area school,

00:00:23.160 --> 00:00:25.090
my SQL or SQL Server.

00:00:25.090 --> 00:00:25.900
For instance,

00:00:25.900 --> 00:00:32.780
no letter that I wanted to talk to one of these databases From my application logic here,

00:00:32.780 --> 00:00:39.360
Java can actually provide us set off libraries or classes that can let us talk to your

00:00:39.360 --> 00:00:40.590
specific database.

00:00:40.590 --> 00:00:41.620
For example,

00:00:41.620 --> 00:00:46.780
we could have set off classes that will help us talk to oppose greedy the base.

00:00:46.780 --> 00:00:52.710
Or we could have another set off classes that will help us talk to the Maya skill database

00:00:52.710 --> 00:00:52.710
.

00:00:52.710 --> 00:00:54.920
But the problem is to more.

00:00:54.920 --> 00:00:58.450
If there is a new database that gets introduced in the market,

00:00:58.450 --> 00:01:01.850
then Joshua has to support that as well.

00:01:01.850 --> 00:01:04.970
There has to be another library return just to support that.

00:01:04.970 --> 00:01:06.630
In addition to that,

00:01:06.630 --> 00:01:12.330
even from programmer respect to once I write the code that talks to a specific database

00:01:12.330 --> 00:01:15.400
using the class libraries that are relevant to that database.

00:01:15.400 --> 00:01:16.520
Two more.

00:01:16.520 --> 00:01:18.710
If I would like to switch to a different database,

00:01:18.710 --> 00:01:25.220
then that's going to cost me quite a lot off a fort because I have to change the names off

00:01:25.220 --> 00:01:27.680
the classes and methods everywhere in my court,

00:01:27.680 --> 00:01:29.350
which is quite impossible.

00:01:29.350 --> 00:01:31.650
So to address this problem,

00:01:31.650 --> 00:01:33.510
we have the Jerry B.

00:01:33.510 --> 00:01:39.390
C A P I Java Database connectivity application program interface,

00:01:39.390 --> 00:01:45.300
which is nothing but a bunch off interfaces whose implementation is provided by these

00:01:45.300 --> 00:01:46.650
database providers.

00:01:46.650 --> 00:01:52.360
So the a p I that I'm talking about is basically set off classes and interfaces that are

00:01:52.360 --> 00:01:58.150
part of the package java dot SQL wants to import this package.

00:01:58.150 --> 00:02:00.690
You get access to all interfaces in it,

00:02:00.690 --> 00:02:09.010
and their implementation were actually provided by the driver jar files provided by these

00:02:09.010 --> 00:02:11.430
individual database providers.

00:02:11.430 --> 00:02:12.550
For example,

00:02:12.550 --> 00:02:14.760
if you'd like to work with post great skill,

00:02:14.760 --> 00:02:17.950
then you would download its corresponding driver jar.

00:02:17.950 --> 00:02:24.960
You would place it in the Silver Lib directory so that your program can actually make use

00:02:24.960 --> 00:02:30.070
off those driver libraries to communicate with special database.

00:02:30.070 --> 00:02:33.540
And that's the very reason why we had to download pose.

00:02:33.540 --> 00:02:33.790
Great.

00:02:33.790 --> 00:02:39.470
Ask your specific drivers and copy that jar file into our service Live directory.

00:02:39.470 --> 00:02:41.410
And in our application logic.

00:02:41.410 --> 00:02:49.380
We used this package and we wrote our code using interfaces and classes that are part of

00:02:49.380 --> 00:02:50.580
this Jerry B.

00:02:50.580 --> 00:02:50.830
C.

00:02:50.830 --> 00:02:50.890
A.

00:02:50.890 --> 00:02:51.620
P I.

00:02:51.620 --> 00:02:52.450
So two more.

00:02:52.450 --> 00:02:54.600
If I'd like to switch to a different database,

00:02:54.600 --> 00:02:58.950
then I don't have to make too many changes in application logic.

00:02:58.950 --> 00:03:00.150
Instead,

00:03:00.150 --> 00:03:07.020
I'll just delete this jar file from my library and put this jar to talk to my school

00:03:07.020 --> 00:03:07.870
database.

00:03:07.870 --> 00:03:13.000
So let me quickly walking through set off classes and interfaces that are part of this J D

00:03:13.000 --> 00:03:14.150
B C a P I.

00:03:14.150 --> 00:03:17.290
So if you go to the official Oracle Side Dark,

00:03:17.290 --> 00:03:20.350
start oracle dot com and search for this package,

00:03:20.350 --> 00:03:24.890
you would be able to see these list off interfaces and classes that are part off them.

00:03:24.890 --> 00:03:26.350
In fact,

00:03:26.350 --> 00:03:32.160
we have used some of these interfaces and classes already in our example that have

00:03:32.160 --> 00:03:36.650
demonstrated how to connect to the database from the application logic.

00:03:36.650 --> 00:03:38.750
So here we have.

00:03:38.750 --> 00:03:39.250
Ah,

00:03:39.250 --> 00:03:45.820
the interface is like we have a connection to face which we have used to maintain

00:03:45.820 --> 00:03:48.250
connection with a specific database.

00:03:48.250 --> 00:03:50.050
And prior to that,

00:03:50.050 --> 00:03:57.100
we have used this class while driver manager to actually help us connect to the database by

00:03:57.100 --> 00:03:58.870
using the jdb.

00:03:58.870 --> 00:03:59.080
See,

00:03:59.080 --> 00:04:01.450
you are Let me show you what I mean.

00:04:01.450 --> 00:04:04.850
So here's our code,

00:04:04.850 --> 00:04:06.350
which I have written.

00:04:06.350 --> 00:04:09.250
Henman offer examples in the beginning.

00:04:09.250 --> 00:04:13.600
Now we know that understand all the rest of the court in here.

00:04:13.600 --> 00:04:17.450
You must have gone through my course on GSP and so let's.

00:04:17.450 --> 00:04:20.570
But here's a section that is off relevance.

00:04:20.570 --> 00:04:22.040
So first of all,

00:04:22.040 --> 00:04:27.490
you to copy the driver jar file into the applications Live directory once you do.

00:04:27.490 --> 00:04:32.780
So you need to execute this following statement that this class dot for name and you would

00:04:32.780 --> 00:04:39.350
provide this saying that you wanted to load this driver onto the JV m so that we can now

00:04:39.350 --> 00:04:46.100
connect to the database and then you would use this class driver manager and you say,

00:04:46.100 --> 00:04:47.220
get connection.

00:04:47.220 --> 00:04:48.920
You provide the you are oh,

00:04:48.920 --> 00:04:52.610
the euro has to follow certain format into,

00:04:52.610 --> 00:04:52.960
say,

00:04:52.960 --> 00:04:58.200
Jerry BC hyphen was great skill for post visit the base for my skill.

00:04:58.200 --> 00:04:59.230
This could be different.

00:04:59.230 --> 00:05:05.090
Maybe my ask your and then you would provide the I p address and port number wherever your

00:05:05.090 --> 00:05:12.450
databases running the name of the database and his credentials with which you can actually

00:05:12.450 --> 00:05:16.120
access the database and perform crowd operations.

00:05:16.120 --> 00:05:17.530
So once you do that,

00:05:17.530 --> 00:05:23.100
the statement will actually return an object off the class that implements the connection

00:05:23.100 --> 00:05:29.600
interface and later on using that object you can actually call this method creates

00:05:29.600 --> 00:05:33.250
statement that will get you this statement object,

00:05:33.250 --> 00:05:38.680
and then you're good to go ahead and execute any query off your choice.

00:05:38.680 --> 00:05:44.100
The execute query is an interface method that is part of the statement interface,

00:05:44.100 --> 00:05:48.720
and its implementation is present in the driver jar file that you have downloaded.

00:05:48.720 --> 00:05:55.050
It will have the largest that will actually process this instruction our escort statement

00:05:55.050 --> 00:05:56.860
and get you some results.

00:05:56.860 --> 00:06:02.750
Whatever the result that gets sent back will be assigned to this result set,

00:06:02.750 --> 00:06:05.870
which you can then sort off,

00:06:05.870 --> 00:06:10.150
travels through all the list off rose and then display them.

00:06:10.150 --> 00:06:11.570
As you wish,

00:06:11.570 --> 00:06:13.210
just as we're doing here.

00:06:13.210 --> 00:06:14.600
Once you do that,

00:06:14.600 --> 00:06:23.320
run your application and here is the output how it's going to look like now again in order

00:06:23.320 --> 00:06:28.110
to know how to run this application then you need to go through my course on Jsp.

00:06:28.110 --> 00:06:31.250
And so let's otherwise distant gives.

00:06:31.250 --> 00:06:32.640
If you haven't gone through it,

00:06:32.640 --> 00:06:36.050
then just get a sense of what we're trying to do here.

00:06:36.050 --> 00:06:38.350
Pretty simple and straightforward.

00:06:38.350 --> 00:06:40.270
Similarly,

00:06:40.270 --> 00:06:49.720
just try to walk through all these list off classes and interfaces and exceptional classes

00:06:49.720 --> 00:06:51.840
that are part off this package.

00:06:51.840 --> 00:06:52.950
Jabara Rescue.

00:06:52.950 --> 00:06:55.450
Try to get a sense of what they're doing.

00:06:55.450 --> 00:06:57.010
In fact,

00:06:57.010 --> 00:07:01.550
most of these are something that we don't use frequently.

00:07:01.550 --> 00:07:03.040
But nevertheless,

00:07:03.040 --> 00:07:05.350
it's always good to understand.

00:07:05.350 --> 00:07:13.120
And this will definitely lay a solid foundation for learning frameworks.

00:07:13.120 --> 00:07:14.500
All right,

00:07:14.500 --> 00:07:16.490
see you in my next video.

