WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.450
All right,

00:00:01.450 --> 00:00:06.730
let us take a look at how we can go about dealing with multiple queries or combining the

00:00:06.730 --> 00:00:08.770
results sets off multiple queries.

00:00:08.770 --> 00:00:12.450
The first thing that we're going to talk about is union.

00:00:12.450 --> 00:00:15.960
The union keyword would actually help us combine.

00:00:15.960 --> 00:00:20.010
The result sets off two or more queries into one result set.

00:00:20.010 --> 00:00:22.430
Let us take a look at this example.

00:00:22.430 --> 00:00:24.050
We have students table,

00:00:24.050 --> 00:00:25.250
and with this quit,

00:00:25.250 --> 00:00:30.090
I'm just displaying worse What's inside the students table and using this good.

00:00:30.090 --> 00:00:35.320
I'm displaying the course table with this instruction,

00:00:35.320 --> 00:00:38.450
which I just selected weaken despite the students table.

00:00:38.450 --> 00:00:40.430
And with this instruction,

00:00:40.430 --> 00:00:42.390
Aiken display the course table.

00:00:42.390 --> 00:00:47.860
But when I use this keyword union in between these two queries,

00:00:47.860 --> 00:00:51.680
then I'm actually combining these two result sets.

00:00:51.680 --> 00:00:55.070
And so we have this.

00:00:55.070 --> 00:01:01.370
This is as good as me dragging this particular image right below this like this and

00:01:01.370 --> 00:01:07.490
combining this too so the union would actually sort off.

00:01:07.490 --> 00:01:08.450
Combines arisen,

00:01:08.450 --> 00:01:09.660
sets off to queries.

00:01:09.660 --> 00:01:11.810
But there are certain rules to be followed,

00:01:11.810 --> 00:01:15.910
whichever the crease that decide on the left hand side,

00:01:15.910 --> 00:01:18.130
as well as the right hand side of the Union key.

00:01:18.130 --> 00:01:21.740
Would the number of columns specified onboard.

00:01:21.740 --> 00:01:23.540
This queries should be same.

00:01:23.540 --> 00:01:24.380
In this case,

00:01:24.380 --> 00:01:26.300
there are two columns which are specified.

00:01:26.300 --> 00:01:28.450
Same should go in here as well.

00:01:28.450 --> 00:01:30.190
Also,

00:01:30.190 --> 00:01:34.560
the corresponding columns must be compatible data types,

00:01:34.560 --> 00:01:35.530
for example.

00:01:35.530 --> 00:01:37.570
The idea column is off type integer.

00:01:37.570 --> 00:01:39.050
Same is the case here.

00:01:39.050 --> 00:01:39.980
Similarly,

00:01:39.980 --> 00:01:42.370
si dot name is off type text,

00:01:42.370 --> 00:01:48.780
and student name is also off type text in the boat or compatible data types.

00:01:48.780 --> 00:01:53.730
So there's a couple of things that you need to keep in mind when you're using the union

00:01:53.730 --> 00:01:54.850
operator.

00:01:54.850 --> 00:01:56.530
Also,

00:01:56.530 --> 00:01:59.730
the union operator would actually get it off.

00:01:59.730 --> 00:02:01.350
The Duke will get Rose.

00:02:01.350 --> 00:02:04.350
If you don't want to get it off the duplicate Rose,

00:02:04.350 --> 00:02:07.090
then you have to use union all.

00:02:07.090 --> 00:02:08.590
Let me show you what I mean.

00:02:08.590 --> 00:02:14.160
Having this competence exact query and let's go to our query tool,

00:02:14.160 --> 00:02:16.980
pestered or here run it.

00:02:16.980 --> 00:02:21.760
Now let's try to remove in the skins.

00:02:21.760 --> 00:02:23.410
We don't have any duplicate rose,

00:02:23.410 --> 00:02:25.910
and so you don't find any difference.

00:02:25.910 --> 00:02:30.660
But let me just get it off this to the name column as alas,

00:02:30.660 --> 00:02:34.150
here and run the query.

00:02:34.150 --> 00:02:36.240
What do you expect in 10 rows?

00:02:36.240 --> 00:02:44.680
It won't be because the Union operator actually eliminated all the duplicate rose from the

00:02:44.680 --> 00:02:45.450
result set.

00:02:45.450 --> 00:02:47.700
If you want to display everything,

00:02:47.700 --> 00:02:50.780
then you use union all.

00:02:50.780 --> 00:02:54.570
And that would display all the rose.

00:02:54.570 --> 00:02:56.210
Let's go back.

00:02:56.210 --> 00:02:58.950
So that's about union.

00:02:58.950 --> 00:03:03.250
Now let's talk about the Intersect.

00:03:03.250 --> 00:03:04.860
Intersect,

00:03:04.860 --> 00:03:06.150
as the name suggests,

00:03:06.150 --> 00:03:10.950
is only going to display the common dross found in both the result sets.

00:03:10.950 --> 00:03:12.090
For example,

00:03:12.090 --> 00:03:14.300
let us make use off the exact same query,

00:03:14.300 --> 00:03:16.640
and instead of union,

00:03:16.640 --> 00:03:20.850
all I'm going to say intersect.

00:03:20.850 --> 00:03:29.200
So these are the rolls off both the results of soft this queries that are common.

00:03:29.200 --> 00:03:30.550
I mean,

00:03:30.550 --> 00:03:34.170
there's going to display 1234 has,

00:03:34.170 --> 00:03:35.140
alas,

00:03:35.140 --> 00:03:37.250
this.

00:03:37.250 --> 00:03:43.760
So the intercept has just displayed the common rose.

00:03:43.760 --> 00:03:50.850
And if I were to represent the same scenario di grammatically using the Wen diagram,

00:03:50.850 --> 00:03:52.950
then this is how it would look.

00:03:52.950 --> 00:03:59.320
The circuit on the left represents the results that off a table which is basically the

00:03:59.320 --> 00:04:05.360
table that decides on the left hand side of this intercept keyword and in the right circle

00:04:05.360 --> 00:04:08.320
represents the result set off the B table,

00:04:08.320 --> 00:04:13.450
which is on the right hand side of the Intersect keyword and the highlighted area in here

00:04:13.450 --> 00:04:19.890
which is grain color is set off roads that were displaying pretty straightforward.

00:04:19.890 --> 00:04:24.020
The except is kind off opposite to intersect,

00:04:24.020 --> 00:04:31.250
and it basically helps us display distinct grows from the left query,

00:04:31.250 --> 00:04:35.950
which is this that are not in the output off the right query.

00:04:35.950 --> 00:04:37.440
For example,

00:04:37.440 --> 00:04:46.510
our core stable comes on the right hand side of the except keyboard and if you notice we

00:04:46.510 --> 00:04:54.550
have the ideas 1234 And these ideas are also common in the students table,

00:04:54.550 --> 00:05:00.750
and so the except would display the remaining Rose six and five.

00:05:00.750 --> 00:05:02.350
So let's say,

00:05:02.350 --> 00:05:09.150
except and it shows just as expected,

00:05:09.150 --> 00:05:10.690
let's go back.

00:05:10.690 --> 00:05:14.650
And this is a diagram that represents the same scenario,

00:05:14.650 --> 00:05:17.150
but it's self explanatory.

00:05:17.150 --> 00:05:23.190
Grouping set is kind of like a shorthand for writing multiple group by queries.

00:05:23.190 --> 00:05:28.290
Let me show you what I mean for this purpose have greater this particular table.

00:05:28.290 --> 00:05:34.280
We have missed off students and the course that they're registered and then went off we

00:05:34.280 --> 00:05:37.300
that they had paid for their courses.

00:05:37.300 --> 00:05:38.550
For example,

00:05:38.550 --> 00:05:42.450
John has enrolled for this two courses javelin database,

00:05:42.450 --> 00:05:45.900
and he had to pay 1000 each,

00:05:45.900 --> 00:05:46.300
which,

00:05:46.300 --> 00:05:47.520
when combined together,

00:05:47.520 --> 00:05:49.350
would become 2000.

00:05:49.350 --> 00:05:51.020
Similarly,

00:05:51.020 --> 00:05:54.350
we have the same course Java bean,

00:05:54.350 --> 00:05:56.100
the district by multiple students,

00:05:56.100 --> 00:05:57.920
John as well asunder.

00:05:57.920 --> 00:06:02.080
So keep the scenario in mind and let's go to our query tool.

00:06:02.080 --> 00:06:07.150
Let me copy the table name and goto our query tool.

00:06:07.150 --> 00:06:27.040
I'm going to say select s name and some coffee from the student called stable and I wanna

00:06:27.040 --> 00:06:29.380
group by s name.

00:06:29.380 --> 00:06:32.910
We've already talked about the group by keyword.

00:06:32.910 --> 00:06:35.390
If you want to take a look at it once again,

00:06:35.390 --> 00:06:36.650
feel free to do so.

00:06:36.650 --> 00:06:38.430
All right,

00:06:38.430 --> 00:06:40.900
so this is the expected result.

00:06:40.900 --> 00:06:41.700
Now,

00:06:41.700 --> 00:06:44.350
let's say that I wanted to group by the course name,

00:06:44.350 --> 00:06:48.240
so I would say see name and grew by sea name.

00:06:48.240 --> 00:06:48.820
That's right.

00:06:48.820 --> 00:06:49.600
Now query,

00:06:49.600 --> 00:06:51.050
credible and good.

00:06:51.050 --> 00:06:58.250
Let's copy the statement and let her know I wanted to display about the results in one goal

00:06:58.250 --> 00:06:58.250
.

00:06:58.250 --> 00:06:59.960
And for that,

00:06:59.960 --> 00:07:02.420
I'm going to make use off the union.

00:07:02.420 --> 00:07:03.470
Oh,

00:07:03.470 --> 00:07:09.850
because I also wanted to display the duplicate draws if they exist.

00:07:09.850 --> 00:07:11.870
That's run the query.

00:07:11.870 --> 00:07:12.870
Now,

00:07:12.870 --> 00:07:13.780
if you notice.

00:07:13.780 --> 00:07:21.400
Although we have displayed the union off these two queries,

00:07:21.400 --> 00:07:24.670
the column name is little misleading.

00:07:24.670 --> 00:07:26.350
For example,

00:07:26.350 --> 00:07:30.600
the column name says that's name which represents the student name.

00:07:30.600 --> 00:07:33.970
But in here we're also displaying the course name.

00:07:33.970 --> 00:07:38.690
So let us write it more meaningful for that in this crude,

00:07:38.690 --> 00:07:45.350
I'm going to say no in place off the course name field,

00:07:45.350 --> 00:07:51.900
because in this query we can't display the course name when we're trying to group by the

00:07:51.900 --> 00:07:52.780
student name.

00:07:52.780 --> 00:07:54.070
And similarly,

00:07:54.070 --> 00:07:59.750
we can't display the student name when we're trying to group by the course name.

00:07:59.750 --> 00:08:02.420
So in place off the student named Field,

00:08:02.420 --> 00:08:04.580
we're gonna say now as well.

00:08:04.580 --> 00:08:05.550
And no,

00:08:05.550 --> 00:08:11.020
it's done the query so you would see not getting populated now,

00:08:11.020 --> 00:08:15.130
Although this doesn't display the course as the column name,

00:08:15.130 --> 00:08:19.250
we in fact separated this column from the student name,

00:08:19.250 --> 00:08:21.150
so we're fine with it.

00:08:21.150 --> 00:08:26.450
Now let's say that I also wanted to displace some grouping by fee,

00:08:26.450 --> 00:08:30.130
and I wanted to combine the results with this table.

00:08:30.130 --> 00:08:31.250
For that,

00:08:31.250 --> 00:08:40.530
I went into just another query and of course I'm going to be using union all for this

00:08:40.530 --> 00:08:42.990
purpose this time.

00:08:42.990 --> 00:08:43.180
See,

00:08:43.180 --> 00:08:45.770
Name blow to remain has now,

00:08:45.770 --> 00:08:49.480
and I want to grow by fee.

00:08:49.480 --> 00:08:54.100
And let's run the query incredible and good.

00:08:54.100 --> 00:08:55.670
Now,

00:08:55.670 --> 00:08:58.610
instead of writing so many group by queries,

00:08:58.610 --> 00:09:06.350
we can accomplish the same task with just one clearly and that by using the grouping sets,

00:09:06.350 --> 00:09:07.870
it's very simple.

00:09:07.870 --> 00:09:09.570
Let's get it off.

00:09:09.570 --> 00:09:17.430
All the queries will keep only one grew by grouping sets,

00:09:17.430 --> 00:09:25.530
you would have an open and the closing parentis is just like so you would end with the semi

00:09:25.530 --> 00:09:26.060
colon.

00:09:26.060 --> 00:09:31.950
And in here we'll have our list off groups we have group by s name.

00:09:31.950 --> 00:09:40.950
We've also group by seen ing and by fee,

00:09:40.950 --> 00:09:42.700
that's all there is to it.

00:09:42.700 --> 00:09:45.790
It's on the query ordered.

00:09:45.790 --> 00:09:50.260
The reason why you're seeing all the null values here is because we said second column to

00:09:50.260 --> 00:09:50.850
be now.

00:09:50.850 --> 00:09:52.310
Instead,

00:09:52.310 --> 00:09:54.550
we want this to be see name.

00:09:54.550 --> 00:09:58.540
Where does run the query,

00:09:58.540 --> 00:10:02.650
and you would see the exact same result what we have seen before.

00:10:02.650 --> 00:10:07.550
And just as you could use group buy clothes on multiple columns.

00:10:07.550 --> 00:10:12.950
You can also specify multiple columns in this parentis is separated by coma,

00:10:12.950 --> 00:10:14.580
for example,

00:10:14.580 --> 00:10:15.790
see name,

00:10:15.790 --> 00:10:16.700
for instance,

00:10:16.700 --> 00:10:18.150
etcetera.

00:10:18.150 --> 00:10:20.950
Let's go back.

00:10:20.950 --> 00:10:27.250
So this query as well as this gritty are both same,

00:10:27.250 --> 00:10:31.950
except this is more readable and would get the same result.

00:10:31.950 --> 00:10:35.810
So if you understood the grouping set,

00:10:35.810 --> 00:10:38.510
Cuba is pretty easy.

00:10:38.510 --> 00:10:42.450
The key War Cube would put their simple for your job.

00:10:42.450 --> 00:10:43.720
For example,

00:10:43.720 --> 00:10:48.760
this query in here is equal into this.

00:10:48.760 --> 00:10:53.280
Observe this section off query was that Cube?

00:10:53.280 --> 00:11:01.530
And then we give three column names and those three column names will be represented like

00:11:01.530 --> 00:11:02.150
so.

00:11:02.150 --> 00:11:05.380
So instead of writing this statement,

00:11:05.380 --> 00:11:07.800
you can just simply right this.

00:11:07.800 --> 00:11:10.050
So we have sort off,

00:11:10.050 --> 00:11:16.470
have all the combinations off group by close on all these columns.

00:11:16.470 --> 00:11:21.500
And as you would expect,

00:11:21.500 --> 00:11:25.140
the result off this going to be pretty big.

00:11:25.140 --> 00:11:28.450
This is actually single result.

00:11:28.450 --> 00:11:30.590
With the 22 rows,

00:11:30.590 --> 00:11:36.450
the rule up is essentially does the job off a cube,

00:11:36.450 --> 00:11:39.050
which will help us reduce the number of lines off.

00:11:39.050 --> 00:11:40.980
Clearly instruction.

00:11:40.980 --> 00:11:48.650
But the task off rollup is to form the group by clauses like So I said,

00:11:48.650 --> 00:11:49.430
Roll up.

00:11:49.430 --> 00:11:51.550
And then I gave three columns.

00:11:51.550 --> 00:11:53.240
But internally,

00:11:53.240 --> 00:12:00.950
the statement is equal into performing group operations on all these sets off columns.

00:12:00.950 --> 00:12:04.450
It's like for ABC column.

00:12:04.450 --> 00:12:07.080
We have group by ABC,

00:12:07.080 --> 00:12:09.390
and then we have group by a bee,

00:12:09.390 --> 00:12:17.140
grew by a and then grew by nothing as simple as that are adopted on this video.

00:12:17.140 --> 00:12:17.900
See you soon

