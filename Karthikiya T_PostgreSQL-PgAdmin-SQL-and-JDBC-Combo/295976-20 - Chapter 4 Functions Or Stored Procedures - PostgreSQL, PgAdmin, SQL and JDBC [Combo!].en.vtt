WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.960
okay,

00:00:00.960 --> 00:00:01.310
And this,

00:00:01.310 --> 00:00:01.520
really,

00:00:01.520 --> 00:00:04.670
we're going to talk about functions in database.

00:00:04.670 --> 00:00:10.770
A function in database is similar to a function in any other programming language or is

00:00:10.770 --> 00:00:12.950
similar to methods in Java.

00:00:12.950 --> 00:00:15.250
All they do is they.

00:00:15.250 --> 00:00:17.560
Villela was to write set off instructions,

00:00:17.560 --> 00:00:21.160
and these instructions are associated with a name,

00:00:21.160 --> 00:00:22.580
which is a function name,

00:00:22.580 --> 00:00:28.650
so that later on we can actually call or execute those set off instructions by using that

00:00:28.650 --> 00:00:29.140
name.

00:00:29.140 --> 00:00:30.660
It's as simple as that.

00:00:30.660 --> 00:00:35.050
So here are some of the advantages which I've listed,

00:00:35.050 --> 00:00:43.460
first of which is there won't be a need for sending multiple database request from the

00:00:43.460 --> 00:00:44.560
application logic,

00:00:44.560 --> 00:00:45.580
which means,

00:00:45.580 --> 00:00:48.550
let's say that you have multiple SQL statements to be executed,

00:00:48.550 --> 00:00:53.450
then you don't have to send request for each and every escrow.

00:00:53.450 --> 00:00:53.970
Clearly,

00:00:53.970 --> 00:00:58.090
it can club all the SQL statements into one function,

00:00:58.090 --> 00:01:02.880
and then you can just simply call that function with just one request from your application

00:01:02.880 --> 00:01:03.500
logic,

00:01:03.500 --> 00:01:06.450
so that will actually improve.

00:01:06.450 --> 00:01:12.000
The performance functions would also make testing a lot easier,

00:01:12.000 --> 00:01:18.010
because we can now run those function directly from your database software instead of

00:01:18.010 --> 00:01:20.000
having to run the entire application,

00:01:20.000 --> 00:01:22.750
so that would make all life a little easier.

00:01:22.750 --> 00:01:24.790
Also,

00:01:24.790 --> 00:01:31.290
functions will improve the performance because the first ember eggs good the function it's

00:01:31.290 --> 00:01:31.740
compiled.

00:01:31.740 --> 00:01:35.610
Abortion would be stored in the cache memory and later on,

00:01:35.610 --> 00:01:37.650
for for the request to the same function.

00:01:37.650 --> 00:01:40.860
The compiled abortion will get executed instead,

00:01:40.860 --> 00:01:45.020
off re translating everything so that will improve the performance.

00:01:45.020 --> 00:01:49.930
And this is the very reason functions are also called as stored procedures.

00:01:49.930 --> 00:01:53.000
They're stored in compiled form,

00:01:53.000 --> 00:01:54.680
which are ready to run.

00:01:54.680 --> 00:01:59.450
But there are also some disadvantageous and using functions.

00:01:59.450 --> 00:02:00.520
The first off,

00:02:00.520 --> 00:02:05.790
which is switching to another database software would need a lot of technical expertise,

00:02:05.790 --> 00:02:12.800
because sometimes these functions are written in other programming languages like C Pull

00:02:12.800 --> 00:02:14.250
Python etcetera.

00:02:14.250 --> 00:02:17.390
So in order to switch to a different database,

00:02:17.390 --> 00:02:23.880
the developer may need to learn a new technology or eat to hire a person who is super good

00:02:23.880 --> 00:02:29.990
at those technologies to be able to make them berg in another database software,

00:02:29.990 --> 00:02:33.350
which is quite a task and time consuming.

00:02:33.350 --> 00:02:34.430
Also,

00:02:34.430 --> 00:02:35.190
typically,

00:02:35.190 --> 00:02:42.060
the majority of the database operations that we perform or that we ever need are crowd

00:02:42.060 --> 00:02:43.020
operations,

00:02:43.020 --> 00:02:46.690
and in order to perform these simple crowd operations,

00:02:46.690 --> 00:02:50.030
writing functions is definitely an overkill.

00:02:50.030 --> 00:02:53.540
So let's take a look at how we go about creating a function.

00:02:53.540 --> 00:03:01.050
Here is the syntax for that he would use the create key would to create the function and

00:03:01.050 --> 00:03:01.430
optional.

00:03:01.430 --> 00:03:04.080
You can also provide this keyword or replace,

00:03:04.080 --> 00:03:05.530
which means,

00:03:05.530 --> 00:03:07.460
if this function was all the existing,

00:03:07.460 --> 00:03:11.490
then we want to replace that function with newly introduced logic,

00:03:11.490 --> 00:03:15.800
and then you provide the name of the function.

00:03:15.800 --> 00:03:17.390
This could be whatever you wish.

00:03:17.390 --> 00:03:22.350
We'll also have arguments associated with the function just as functions in any other

00:03:22.350 --> 00:03:23.550
programming language,

00:03:23.550 --> 00:03:27.270
and similarly will also have a written type.

00:03:27.270 --> 00:03:34.020
And he would specify that using this keyword returns and this section as variable is

00:03:34.020 --> 00:03:36.200
specific to see language.

00:03:36.200 --> 00:03:39.850
When you're writing this function using C language,

00:03:39.850 --> 00:03:43.500
that's where this will come into picture.

00:03:43.500 --> 00:03:44.260
Currently,

00:03:44.260 --> 00:03:46.300
since we're not concerned with C language,

00:03:46.300 --> 00:03:47.750
you can just simply ignore that.

00:03:47.750 --> 00:03:52.930
But the language that we're going to use to write or function is peel PDS school.

00:03:52.930 --> 00:03:56.050
Now you don't have to worry if this is a new language that we need to learn,

00:03:56.050 --> 00:03:59.990
because this is very easy.

00:03:59.990 --> 00:04:03.770
All it has is bunch off key words just as you can see here,

00:04:03.770 --> 00:04:06.350
we'll talk about this in a minute.

00:04:06.350 --> 00:04:12.720
So similarly also got other programming languages like pull python and a few other.

00:04:12.720 --> 00:04:14.230
And then your pride,

00:04:14.230 --> 00:04:17.690
the body where you would have declarations.

00:04:17.690 --> 00:04:23.940
Action very would initialize your variables and declare them etcetera and written this

00:04:23.940 --> 00:04:25.300
Begin and end.

00:04:25.300 --> 00:04:27.480
You would have your actual logic.

00:04:27.480 --> 00:04:33.370
You also have the written statement and you would use the return key word.

00:04:33.370 --> 00:04:35.280
You would add a return,

00:04:35.280 --> 00:04:43.610
a variable which is declaring the regulation section maybe are a simple literal And then in

00:04:43.610 --> 00:04:43.970
the end,

00:04:43.970 --> 00:04:48.470
it would provide the language that you have used by using this keyword language.

00:04:48.470 --> 00:04:55.150
So just try to map this particular syntax with the example in here.

00:04:55.150 --> 00:04:56.910
In this function,

00:04:56.910 --> 00:04:59.350
all I'm trying to do here is on accepting one.

00:04:59.350 --> 00:04:59.620
Indeed,

00:04:59.620 --> 00:05:05.900
your argument under stinker menting it by one and returning the final value.

00:05:05.900 --> 00:05:07.520
Which in this case,

00:05:07.520 --> 00:05:11.040
is that the name final some has simple as that.

00:05:11.040 --> 00:05:17.750
Just take a look at this and see how things are going here that's copied this and go to our

00:05:17.750 --> 00:05:26.230
PG admin and select the database where I want to run this Cleary and let me past it down

00:05:26.230 --> 00:05:31.810
here and let's run it.

00:05:31.810 --> 00:05:39.790
So this has created the stored procedure and you can actually see it getting reflected or

00:05:39.790 --> 00:05:40.660
here as well.

00:05:40.660 --> 00:05:41.320
That says,

00:05:41.320 --> 00:05:42.380
Add 10.

00:05:42.380 --> 00:05:42.860
Now,

00:05:42.860 --> 00:05:44.750
in order to call this function again,

00:05:44.750 --> 00:05:51.820
you could just simply say select and then the function name Add 10.

00:05:51.820 --> 00:05:57.450
Let's pass some integer argument and run it by hitting a five.

00:05:57.450 --> 00:05:59.740
Did you have it?

00:05:59.740 --> 00:06:05.980
You can also actually do the same using the user interface that PG admin provides.

00:06:05.980 --> 00:06:10.250
All you have to do is to right click on this functions create function.

00:06:10.250 --> 00:06:12.450
You'd good some name,

00:06:12.450 --> 00:06:18.250
Let's say add one.

00:06:18.250 --> 00:06:23.720
We're just simply going to increment the value by one click on definition.

00:06:23.720 --> 00:06:27.110
The written type is going to be in digital,

00:06:27.110 --> 00:06:28.150
in my case.

00:06:28.150 --> 00:06:33.050
And here is where our logical girl.

00:06:33.050 --> 00:06:41.750
Let me just simply copy this section off code and pasted over there.

00:06:41.750 --> 00:06:44.290
You also include the end,

00:06:44.290 --> 00:06:47.930
the key word as simple as that.

00:06:47.930 --> 00:06:54.230
Now you can actually see everything getting reflected in this SQL as well and thereby

00:06:54.230 --> 00:07:01.230
you'll be sure that things are in good shape on it now.

00:07:01.230 --> 00:07:01.620
Actually,

00:07:01.620 --> 00:07:06.920
there is no point in using a variable here can just strike Ever used this written keyboard

00:07:06.920 --> 00:07:13.130
here just as so and everything will be taken.

00:07:13.130 --> 00:07:15.950
Care looks OK.

00:07:15.950 --> 00:07:19.540
I don't want to set any options,

00:07:19.540 --> 00:07:25.450
but we do have an argument which will come in here.

00:07:25.450 --> 00:07:27.290
I'm at it.

00:07:27.290 --> 00:07:32.250
It's going to be off type in de jure Azriel.

00:07:32.250 --> 00:07:42.230
The name of the argument is going to be madam one or whatever the name that you want to do

00:07:42.230 --> 00:07:42.230
.

00:07:42.230 --> 00:07:45.650
But make sure you would have the same thing here as well.

00:07:45.650 --> 00:07:50.440
Let's call it argument one instead off Badham.

00:07:50.440 --> 00:07:58.000
One thing that's all there is to it Just walked through all the fields in different tabs.

00:07:58.000 --> 00:08:00.180
And once you're satisfied with that,

00:08:00.180 --> 00:08:02.150
you can just click save.

00:08:02.150 --> 00:08:03.310
OK,

00:08:03.310 --> 00:08:05.150
Looks like we have a syntax error.

00:08:05.150 --> 00:08:13.750
Okay.

00:08:13.750 --> 00:08:20.400
Looks like the default language is a skill that has tried to change it to P.

00:08:20.400 --> 00:08:20.540
O.

00:08:20.540 --> 00:08:20.810
P.

00:08:20.810 --> 00:08:23.450
G s school and try to save it.

00:08:23.450 --> 00:08:25.450
And this time it worked.

00:08:25.450 --> 00:08:27.650
So instead,

00:08:27.650 --> 00:08:30.330
off at 10 I would say,

00:08:30.330 --> 00:08:33.950
and one let's run it and it worked.

00:08:33.950 --> 00:08:39.780
So this is the way you go about creating a function from the PG admin again.

00:08:39.780 --> 00:08:42.950
Try not to use the comfort off user interface.

00:08:42.950 --> 00:08:45.630
Try to type down the function,

00:08:45.630 --> 00:08:47.280
thereby you will learn better.

00:08:47.280 --> 00:08:49.050
Let's go back.

00:08:49.050 --> 00:08:50.680
So similarly,

00:08:50.680 --> 00:08:56.870
we can also include and SQL Statement as part of the function.

00:08:56.870 --> 00:08:58.050
Just as you see here,

00:08:58.050 --> 00:09:03.050
we're trying to get the average age of all the students combined together,

00:09:03.050 --> 00:09:10.850
and we're starting the result into a variable that were declared here.

00:09:10.850 --> 00:09:17.470
So we use this keyboard into to be able to store the result into a variable.

00:09:17.470 --> 00:09:26.750
Let me copy dysfunction and granite an RPG admin and it looked,

00:09:26.750 --> 00:09:36.950
Let's try to use this function by saying Select and then we'll call that method.

00:09:36.950 --> 00:09:43.080
Let's run it So this is the average age.

00:09:43.080 --> 00:09:45.650
Let's go back.

00:09:45.650 --> 00:09:57.410
We have another example that demonstrates that a function can also return the table

00:09:57.410 --> 00:09:58.150
continent.

00:09:58.150 --> 00:10:04.150
This time the written type is going to be off type table and then you would want to provide

00:10:04.150 --> 00:10:12.770
a couple of fields and these will should map but the fields not just specifying your query

00:10:12.770 --> 00:10:12.770
.

00:10:12.770 --> 00:10:18.610
So student name and this name off type text they both must be compatible.

00:10:18.610 --> 00:10:26.040
Similarly age and message off top indigent And in here I'm just simply trying toe get those

00:10:26.040 --> 00:10:32.890
two fields from the students table But this time I need to use the ski would return query

00:10:32.890 --> 00:10:39.420
to be able to return the result and then back to where dysfunction is called.

00:10:39.420 --> 00:10:43.360
So let's run this in RPG admin.

00:10:43.360 --> 00:10:48.550
It worked.

00:10:48.550 --> 00:10:51.040
That's copy,

00:10:51.040 --> 00:10:53.950
and he was that function.

00:10:53.950 --> 00:10:58.650
So this region's all the student details.

00:10:58.650 --> 00:11:06.010
So all the different types off key words that I'm talking about are part off this

00:11:06.010 --> 00:11:07.170
programming language.

00:11:07.170 --> 00:11:10.000
Be OPD SQL again.

00:11:10.000 --> 00:11:10.990
It's very simple.

00:11:10.990 --> 00:11:13.950
You don't have toe brainstorm too much.

00:11:13.950 --> 00:11:18.750
We can also have constants declared.

00:11:18.750 --> 00:11:20.570
In that case,

00:11:20.570 --> 00:11:23.150
you would need to use this keyboard constant,

00:11:23.150 --> 00:11:24.140
and then,

00:11:24.140 --> 00:11:25.690
instead of simply called Sign,

00:11:25.690 --> 00:11:31.150
you would have a colon and unequal sign an example of what you can see here,

00:11:31.150 --> 00:11:37.180
representing by as a constant with 3.14 as its value,

00:11:37.180 --> 00:11:39.250
which nobody can change.

00:11:39.250 --> 00:11:47.070
We can also have control statements in this PG pl SQL language,

00:11:47.070 --> 00:11:49.250
and it's pretty straightforward.

00:11:49.250 --> 00:11:57.790
Only have to do is to use this key words if condition then exited this else if condition

00:11:57.790 --> 00:12:05.930
and then he would execute this etcetera and finally would say and if similarly,

00:12:05.930 --> 00:12:07.570
can have a care statement.

00:12:07.570 --> 00:12:16.230
This is similar to switch case in Java you would say case and then some variable are a

00:12:16.230 --> 00:12:17.150
constant.

00:12:17.150 --> 00:12:19.450
If the variable is banana,

00:12:19.450 --> 00:12:27.200
then we go ahead and execute the statement tested Sweet beach sore,

00:12:27.200 --> 00:12:33.330
etcetera and finally would end with end case as simple as that.

00:12:33.330 --> 00:12:42.910
We can also have a looping construct like this while the count is less than whatever is the

00:12:42.910 --> 00:12:43.450
number,

00:12:43.450 --> 00:12:51.610
he would say loop And you would keep looping until this condition fails and then finally

00:12:51.610 --> 00:12:54.480
would say and loop as simple as that.

00:12:54.480 --> 00:12:56.480
And finally,

00:12:56.480 --> 00:12:58.070
if you would like to get it off the function,

00:12:58.070 --> 00:13:01.100
you would use a statement drop function.

00:13:01.100 --> 00:13:02.890
You're toward the function name.

00:13:02.890 --> 00:13:04.410
Shall we try this?

00:13:04.410 --> 00:13:07.850
Let's copy this and go to PG admin.

00:13:07.850 --> 00:13:17.550
That said drop one and he would no longer see it who are here.

00:13:17.550 --> 00:13:20.080
Okay,

00:13:20.080 --> 00:13:20.530
that's it.

00:13:20.530 --> 00:13:24.990
On functions and typically as a Java developer,

00:13:24.990 --> 00:13:29.800
we would interact less with dysfunctions because most probably will be working with

00:13:29.800 --> 00:13:30.650
frameworks.

00:13:30.650 --> 00:13:31.870
But nevertheless,

00:13:31.870 --> 00:13:33.760
it's always good to know these concepts.

00:13:33.760 --> 00:13:37.110
This might come in handy at later point off time in your life.

00:13:37.110 --> 00:13:38.750
So see you in my next radio

