WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.750
all that.

00:00:01.750 --> 00:00:07.570
Let us take a look at how we can fetch the data from the database by using multiple clauses

00:00:07.570 --> 00:00:07.570
.

00:00:07.570 --> 00:00:13.770
Were all that ever off the select applause that helps us view all the list of Rose

00:00:13.770 --> 00:00:15.650
available in the table.

00:00:15.650 --> 00:00:21.900
The select clause by default is going to fish the details in the same order they were

00:00:21.900 --> 00:00:22.650
inserted.

00:00:22.650 --> 00:00:29.690
But if you accompanied by using this keyword order by and with A C stands for ascending

00:00:29.690 --> 00:00:33.100
than the data that gets fetched would be in ascending order.

00:00:33.100 --> 00:00:34.550
They're sending al Guard,

00:00:34.550 --> 00:00:34.950
um,

00:00:34.950 --> 00:00:38.350
would get applied on the column name that dispense for here,

00:00:38.350 --> 00:00:43.170
so this particular instruction would display all the columns in the table.

00:00:43.170 --> 00:00:51.680
Students and his order by the age and in ascending order similarly can also say it to be in

00:00:51.680 --> 00:00:52.620
descending order.

00:00:52.620 --> 00:00:59.270
If you don't specify either ascending or descending than the order by clause defaults to

00:00:59.270 --> 00:01:00.000
ascending.

00:01:00.000 --> 00:01:01.310
Similarly,

00:01:01.310 --> 00:01:03.900
you can also sort a string attributes.

00:01:03.900 --> 00:01:04.790
For example,

00:01:04.790 --> 00:01:08.240
we're trying to sort the student name in ascending order,

00:01:08.240 --> 00:01:10.190
which means in alphabetical order.

00:01:10.190 --> 00:01:13.700
If you want in diverse alphabetical order,

00:01:13.700 --> 00:01:17.250
then you would say descending as simple as that.

00:01:17.250 --> 00:01:24.310
The select distinct clause would help us eliminate the duplicate rose from the results set

00:01:24.310 --> 00:01:24.310
.

00:01:24.310 --> 00:01:28.650
The best fit understanding is to take a look at this example.

00:01:28.650 --> 00:01:30.870
If you take a look at this,

00:01:30.870 --> 00:01:33.010
I'm having list off students,

00:01:33.010 --> 00:01:37.840
and I'm saying Select distinct age from students,

00:01:37.840 --> 00:01:41.850
which would actually eliminate the rose that has the same age.

00:01:41.850 --> 00:01:47.060
And this statement would actually display the age column,

00:01:47.060 --> 00:01:48.650
but distinct values.

00:01:48.650 --> 00:01:53.260
So even though we have age 28 repeated multiple times,

00:01:53.260 --> 00:01:55.490
it would be displayed only once,

00:01:55.490 --> 00:01:58.710
just as you see here on the similar lines.

00:01:58.710 --> 00:02:01.600
We also have the group by Klaus.

00:02:01.600 --> 00:02:09.790
The group by is actually going to work the same way the select distant works.

00:02:09.790 --> 00:02:11.290
For example,

00:02:11.290 --> 00:02:14.990
we have Krish repeated twice.

00:02:14.990 --> 00:02:17.350
Same is the case with Maria,

00:02:17.350 --> 00:02:21.690
but those two entries are not seen over here.

00:02:21.690 --> 00:02:23.550
These are all distinct names,

00:02:23.550 --> 00:02:30.150
but things will change with group by when you use the aggregate function.

00:02:30.150 --> 00:02:32.650
So in here,

00:02:32.650 --> 00:02:34.260
the only addition I made,

00:02:34.260 --> 00:02:36.270
here's the segregate function,

00:02:36.270 --> 00:02:38.470
I said student name,

00:02:38.470 --> 00:02:41.270
and then this keyword some.

00:02:41.270 --> 00:02:45.990
We're going to take a look at the list off aggregate functions available in a moment,

00:02:45.990 --> 00:02:48.150
and then I specify the column.

00:02:48.150 --> 00:02:54.430
So this has displayed the student name and their aggregated some off their fee.

00:02:54.430 --> 00:02:55.200
For example,

00:02:55.200 --> 00:02:56.020
for Krish,

00:02:56.020 --> 00:02:59.050
we got to students with the same name,

00:02:59.050 --> 00:02:59.790
Krish.

00:02:59.790 --> 00:03:02.010
And when we try to find the sum,

00:03:02.010 --> 00:03:06.890
that's going to be 3000 and that's exactly what we're seeing here.

00:03:06.890 --> 00:03:08.550
Same is the case with Maria.

00:03:08.550 --> 00:03:10.280
If you take a look at this,

00:03:10.280 --> 00:03:12.900
there are two students with the same name.

00:03:12.900 --> 00:03:13.950
Maria.

00:03:13.950 --> 00:03:15.440
When we try to find a go,

00:03:15.440 --> 00:03:17.190
get some off their fee,

00:03:17.190 --> 00:03:22.620
that's going to be 7000 and same thing gets reflected here as well.

00:03:22.620 --> 00:03:23.790
And along with that,

00:03:23.790 --> 00:03:25.790
we can also use the having clause.

00:03:25.790 --> 00:03:28.580
This is just too for the filter out,

00:03:28.580 --> 00:03:29.720
the result set.

00:03:29.720 --> 00:03:32.850
So in here we're seeing some offi,

00:03:32.850 --> 00:03:34.640
which is the exact same thing.

00:03:34.640 --> 00:03:37.700
What we specified here greater than 5000.

00:03:37.700 --> 00:03:40.780
So we'd like to display only the entries.

00:03:40.780 --> 00:03:44.970
Who's some off fee is going to be greater than 5000.

00:03:44.970 --> 00:03:45.940
In our case,

00:03:45.940 --> 00:03:50.750
it's Maria and Flint O and those two God displayed here.

00:03:50.750 --> 00:03:54.590
So these are list off aggregate functions available,

00:03:54.590 --> 00:03:58.180
and they're pretty self explanatory as well.

00:03:58.180 --> 00:04:04.810
So can just quickly take a look at them and practice see,

00:04:04.810 --> 00:04:05.350
assume

