WEBVTT
1
00:00:00.130 --> 00:00:00.690
OK.

2
00:00:00.900 --> 00:00:02.690
Welcome to this big step.

3
00:00:02.940 --> 00:00:07.370
What we're doing next is integrating Majeski well into a web app.

4
00:00:07.410 --> 00:00:12.510
So we saw again how to integrate my ass Cuil with node in a single file that has nothing to do with

5
00:00:12.510 --> 00:00:18.360
the Internet or web applications or servers or routes where we just inserted 500 users at once.

6
00:00:18.360 --> 00:00:24.990
Now what we're going to do is take our web app that we've created super simple and styled but something

7
00:00:24.990 --> 00:00:28.820
like this when we go to the home page here right now it says you've reached the home page.

8
00:00:28.930 --> 00:00:31.530
What we're going to try to do is take it to this.

9
00:00:31.800 --> 00:00:36.900
We have 500000 users and that 519 is not hardcoded in.

10
00:00:36.900 --> 00:00:42.400
That's coming from our my eschewing database with the 500 something that we inserted.

11
00:00:42.480 --> 00:00:46.160
So this will change depending on how many users are in our database.

12
00:00:46.320 --> 00:00:48.210
And we'll see that that works.

13
00:00:48.210 --> 00:00:53.740
So to do that we're basically I have another diagram that took ages to put together.

14
00:00:54.210 --> 00:00:59.400
I apologize if it's the colors aren't perfect or they're not nice typography.

15
00:00:59.400 --> 00:01:00.810
I wish I had better that stuff.

16
00:01:01.020 --> 00:01:05.410
But here's our trusty red rectangle that represents a client computer.

17
00:01:05.430 --> 00:01:13.430
Here is our express app this mint green this time we're requesting the homepage slash the route route.

18
00:01:13.590 --> 00:01:17.220
We ask the server for it by going to this URL.

19
00:01:17.250 --> 00:01:18.590
Hitting enter.

20
00:01:18.960 --> 00:01:24.710
The server says oh hang on it says here that I need to ask my ask Q Well for a user account.

21
00:01:25.930 --> 00:01:29.050
Ok so my school is now involved.

22
00:01:29.260 --> 00:01:32.770
This arrow represents the connection between Express and my ass.

23
00:01:32.770 --> 00:01:34.710
Q Well we've already seen how to do that.

24
00:01:34.720 --> 00:01:38.030
How did connect my ask well to a javascript file.

25
00:01:38.050 --> 00:01:42.450
We ask basically the select statements like to count from users.

26
00:01:43.370 --> 00:01:44.850
We get a response from my ask you.

27
00:01:44.900 --> 00:01:46.580
Hopefully there's an error.

28
00:01:46.790 --> 00:01:47.450
We get a response.

29
00:01:47.470 --> 00:01:53.650
519 then our express app can take that and say OK we're all set.

30
00:01:53.650 --> 00:01:55.340
Now here is your final result.

31
00:01:55.400 --> 00:01:56.560
Here's the page we get.

32
00:01:56.690 --> 00:01:59.500
We have 519 users.

33
00:01:59.670 --> 00:02:00.300
All right.

34
00:02:00.530 --> 00:02:03.140
So there's a couple steps involved that we need to do.

35
00:02:03.140 --> 00:02:08.270
Basically it boils down to we've already seen how to make a simple route and in the last section we

36
00:02:08.270 --> 00:02:10.750
saw how to connect my ask you all to a file.

37
00:02:10.760 --> 00:02:13.280
Now we just need to combine them together.

38
00:02:13.340 --> 00:02:21.120
So the first thing that we'll do is go over to cloud 9 and we need to connect our app this file to our

39
00:02:21.200 --> 00:02:28.190
my Escuela database and what we can do is just go to our previous updates and just copy this code for

40
00:02:28.190 --> 00:02:32.000
our connection Nico's my as well that create connection.

41
00:02:32.270 --> 00:02:36.760
So I won't make you watch me type this whole thing again but remember this is using the media.

42
00:02:36.770 --> 00:02:43.590
Q Well package and we already installed that earlier we ran NPM install dash dash save my ass.

43
00:02:43.590 --> 00:02:48.170
Q Well if you didn't do that yet go ahead and do it so that you see it here and that instead of our

44
00:02:48.170 --> 00:02:54.590
Join us folder instead of node modules we have my ask you well we need that.

45
00:02:54.780 --> 00:02:59.330
But we're still missing something which is we need to require it far as well.

46
00:02:59.600 --> 00:03:01.180
Equals require.

47
00:03:01.730 --> 00:03:03.310
Q Well so this is all review.

48
00:03:03.480 --> 00:03:08.410
We did it earlier when we made our see data that inserted 500 users.

49
00:03:08.820 --> 00:03:10.180
So we've got this.

50
00:03:10.230 --> 00:03:12.570
And let's just make sure that that works without problem.

51
00:03:12.570 --> 00:03:14.110
So we'll just start node after.

52
00:03:14.220 --> 00:03:16.290
Yes everything looks OK.

53
00:03:16.770 --> 00:03:17.280
All right.

54
00:03:17.340 --> 00:03:21.330
So now we can focus on interacting with a database now that we've connected to it.

55
00:03:21.480 --> 00:03:27.430
But just to reiterate this database name needs to be the name of the database instead of my AS WELL

56
00:03:27.450 --> 00:03:30.520
server that you created with the users table.

57
00:03:30.900 --> 00:03:32.960
So it's the same as what we were doing earlier.

58
00:03:32.970 --> 00:03:37.260
If you've been following along if you named it something else this has to match.

59
00:03:37.260 --> 00:03:46.320
So what we're going to do is instead of you've reached the home page we want to find Count of users

60
00:03:46.410 --> 00:03:56.160
in database and then we want to respond with that count.

61
00:03:56.180 --> 00:03:58.330
So we've got to read that second.

62
00:03:58.880 --> 00:04:11.870
French what we're hoping to do is have something like we have plus count plus users in our database

63
00:04:11.870 --> 00:04:14.850
or something stupid like that that's what we're hoping to do.

64
00:04:14.900 --> 00:04:19.700
Of course right now we don't have this count variables so that's what we need to aim to get to.

65
00:04:20.000 --> 00:04:22.220
So I'll start by commenting that redstart send out.

66
00:04:22.530 --> 00:04:28.430
So to find the count of our users in our database we need to do a connection.

67
00:04:28.670 --> 00:04:32.240
Query which we've done before.

68
00:04:32.240 --> 00:04:34.940
Remember it's all the stuff we are doing over here.

69
00:04:36.250 --> 00:04:37.170
Connection.

70
00:04:37.270 --> 00:04:41.160
Queery connection queery connection.

71
00:04:41.170 --> 00:04:41.890
I query.

72
00:04:42.100 --> 00:04:44.220
And what is the query you want to write.

73
00:04:44.440 --> 00:04:46.090
Let's do it in a separate variable.

74
00:04:46.090 --> 00:04:59.900
So far you just do queue again because the string select count star from users just like that.

75
00:04:59.970 --> 00:05:06.350
If we were to just copy it go over to our my S Q Will we get 500.

76
00:05:06.710 --> 00:05:07.100
OK.

77
00:05:07.170 --> 00:05:08.700
So that's what we're hoping to get.

78
00:05:09.120 --> 00:05:11.720
But of course through Javascript.

79
00:05:12.030 --> 00:05:14.340
So we've got our query written as a string.

80
00:05:14.340 --> 00:05:17.280
Now we just pass it in connection type query.

81
00:05:17.280 --> 00:05:20.340
Then we add in that fun callback.

82
00:05:20.350 --> 00:05:25.760
Or we have error and let's call it results.

83
00:05:26.890 --> 00:05:32.310
OK so whatever code is in here will only run when two things happen.

84
00:05:32.430 --> 00:05:40.110
First when somebody requests slash then we have to wait for this connection to run the query which is

85
00:05:40.110 --> 00:05:41.670
select count from users.

86
00:05:41.670 --> 00:05:47.600
So then when that is done whether it worked or not this code runs and there will either be an error.

87
00:05:47.610 --> 00:05:54.500
So we can add our if error throw error which is not actually a great thing to do in a web application

88
00:05:54.520 --> 00:05:59.550
what would probably be better is to say if there's an error what do we want to do you know redirect

89
00:05:59.550 --> 00:06:04.890
the user to a different page or send them a different response which we can see how to do and a little

90
00:06:04.890 --> 00:06:10.400
bit but we're just going to leave it at that to keep it short and then Otherwise let's do a confidant

91
00:06:10.440 --> 00:06:11.380
log.

92
00:06:12.950 --> 00:06:17.880
Results and just see just see what we get.

93
00:06:18.260 --> 00:06:19.370
OK.

94
00:06:19.370 --> 00:06:27.710
So again to go over this connected to our database then only when somebody requests slash are we trying

95
00:06:27.710 --> 00:06:32.380
to select count from users we could do it inside joke if we wanted to or a random number.

96
00:06:32.510 --> 00:06:38.240
But the way that our app is going to work the home route when we go to the home page we see you know

97
00:06:38.300 --> 00:06:44.990
welcome nurse join us join the 519 users or whatever it is and then there's a form at the bottom.

98
00:06:44.990 --> 00:06:49.380
So we're just going to do it on the home route but see what happens with Red Tree running node apps.

99
00:06:49.420 --> 00:06:49.870
Yes.

100
00:06:50.000 --> 00:06:56.570
Looks like we have a syntax error and that is cause we're missing parentheses around error there.

101
00:06:58.170 --> 00:07:00.080
OK now we're good to go.

102
00:07:00.790 --> 00:07:07.840
Now if I try and just go to the home route not joke of Djoko works just fine but if I try to go to the

103
00:07:07.840 --> 00:07:10.040
home route What do you think will happen.

104
00:07:11.820 --> 00:07:17.780
And the answer is that we're not responding with anything assuming we don't get an error we're not actually

105
00:07:17.780 --> 00:07:20.110
responding with any rest of send.

106
00:07:20.120 --> 00:07:21.580
So we're not going to see anything over here.

107
00:07:21.590 --> 00:07:23.860
Just wait and wait and wait until it gives up.

108
00:07:24.170 --> 00:07:25.260
So I'll stop it here.

109
00:07:25.400 --> 00:07:31.230
But notice we get this row data packet single array with one item in it.

110
00:07:31.250 --> 00:07:33.460
So we're going to want to do results to you.

111
00:07:33.860 --> 00:07:42.740
And then what is nicer is if we give it that as alias it will say like count as counts just like that.

112
00:07:43.100 --> 00:07:53.080
So now if I start the server up again and I refresh the page this time we get row data packet count

113
00:07:53.410 --> 00:07:58.400
is equal to 500 it's inside of an object so all I need to do is do dot count.

114
00:07:58.510 --> 00:08:00.780
So this will print 500 now.

115
00:08:00.910 --> 00:08:05.620
So let's save it to a variable var and we'll just call it count as well.

116
00:08:07.530 --> 00:08:10.260
So now we have a variable with the count in it.

117
00:08:10.290 --> 00:08:13.330
So then the last step and I'm going to get rid of this pain here.

118
00:08:13.570 --> 00:08:14.940
Just work over here.

119
00:08:15.240 --> 00:08:22.890
But now that we have our data coming back from the query we're going to want to do a red cent now something

120
00:08:22.890 --> 00:08:28.230
that tricks people up trips people up when you're working with callbacks like this.

121
00:08:28.740 --> 00:08:34.110
It might seem like this code is going to run after this but in fact we have no guarantee of that.

122
00:08:34.300 --> 00:08:38.320
But we want to do instead is only run it inside of this callback.

123
00:08:38.640 --> 00:08:44.190
So this is a very common pattern in javascript and in node in particular is that you have these nested

124
00:08:44.190 --> 00:08:48.000
callbacks and it can get out of control sometimes with something called the callback hell.

125
00:08:48.030 --> 00:08:50.360
But this isn't too bad it's not bad at all.

126
00:08:50.370 --> 00:08:57.100
So we have our route get when this route is hit run all this code instead of there where the front a

127
00:08:57.110 --> 00:08:59.610
query and we're doing that query and it takes time.

128
00:08:59.610 --> 00:09:01.090
It might take half a second.

129
00:09:01.190 --> 00:09:05.290
That would be pretty long but it might take you know a tenth of a second or something.

130
00:09:05.310 --> 00:09:12.110
And so what we want to do is wait until it comes back and run this code if it's an error throw the error

131
00:09:12.320 --> 00:09:13.080
otherwise.

132
00:09:13.260 --> 00:09:21.030
So they isolate the count from the results then we do it results and we have a space count.

133
00:09:21.360 --> 00:09:23.450
Space users in our database.

134
00:09:23.730 --> 00:09:24.710
Let's try it.

135
00:09:27.990 --> 00:09:28.600
And there we go.

136
00:09:28.620 --> 00:09:32.990
We have 500 users in our database and to prove to you that it's working.

137
00:09:33.210 --> 00:09:34.390
Let's go over here.

138
00:09:34.650 --> 00:09:44.930
Let's do an insert into users and we'll just do an email and we'll do something we haven't done.

139
00:09:45.030 --> 00:09:47.340
So an original here.

140
00:09:48.090 --> 00:09:54.050
Austin had she mailed that COM is still struggling with the originality there.

141
00:09:54.060 --> 00:10:00.120
So to answer that single user OK so there now should be five hundred and one.

142
00:10:00.370 --> 00:10:04.470
And we can double check and it works.

143
00:10:04.480 --> 00:10:09.390
No we didn't have to restart the server or anything that would kind of defeat the purpose if our data

144
00:10:09.390 --> 00:10:11.810
was only refreshed whenever the server restarted.

145
00:10:11.850 --> 00:10:17.200
Because we're going to have people interacting with this when we set this app up and we finish it up.

146
00:10:17.220 --> 00:10:22.260
It will just be left running you know in perpetuity until I don't know if we have to fix something or

147
00:10:22.740 --> 00:10:25.600
I don't know we launch or startup happen.

148
00:10:25.830 --> 00:10:28.420
So it will be waiting just running constantly.

149
00:10:28.470 --> 00:10:33.300
So our database will be changing all the time and it has a connection to that database.

150
00:10:33.450 --> 00:10:37.500
You can kind of check in with the database see how it's working what's going on and get the results

151
00:10:37.500 --> 00:10:39.770
back and do something with them.

152
00:10:40.290 --> 00:10:43.200
So still very simple but it's a start.

153
00:10:43.440 --> 00:10:45.680
So we're connecting with our database.

154
00:10:45.690 --> 00:10:50.130
The next thing that we'll need to focus on which will take us a bit to get there because we have to

155
00:10:50.130 --> 00:10:54.330
create the form and talk about each team out and a thing called Ejay us.

156
00:10:54.340 --> 00:11:00.340
But our next goal is to also run the insert query that will insert a new user in.

157
00:11:00.790 --> 00:11:05.670
But like I said to do that we have to set up the route that will insert and we have to set up the form

158
00:11:05.760 --> 00:11:07.470
to actually do the insert for us.

159
00:11:07.470 --> 00:11:08.350
But that's where we're heading.
