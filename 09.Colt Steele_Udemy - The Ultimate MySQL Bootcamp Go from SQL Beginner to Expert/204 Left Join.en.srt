1
00:00:00,090 --> 00:00:02,380
OK I hope you're still with us.

2
00:00:02,430 --> 00:00:05,020
I really hope you sleep at the last video.

3
00:00:05,280 --> 00:00:08,680
These are getting a little too long for my taste.

4
00:00:08,970 --> 00:00:13,420
Significantly too long so I apologize for that but there's a lot to cover here.

5
00:00:13,620 --> 00:00:16,030
And there's no great place to break it up.

6
00:00:16,080 --> 00:00:19,910
However we are done with kind of the long slog of explaining joints.

7
00:00:19,920 --> 00:00:25,280
Now I'm just going to show you another type so INNER JOIN is what most people end up doing.

8
00:00:25,290 --> 00:00:28,620
That's a big generalization but it's what I end up doing most of the time.

9
00:00:28,620 --> 00:00:30,210
But there are other types.

10
00:00:30,540 --> 00:00:33,500
And the next one that I'll show you is called the LEFT JOIN.

11
00:00:33,860 --> 00:00:35,200
There's the left and right.

12
00:00:35,280 --> 00:00:39,150
They worked very similarly So once you know understand how one works it makes it easier to understand

13
00:00:39,150 --> 00:00:39,850
the other.

14
00:00:40,110 --> 00:00:46,170
So what we saw so far was the inner join where we take one table and another table B and then we select

15
00:00:46,230 --> 00:00:50,850
all the records from A and B where the join condition is met.

16
00:00:51,120 --> 00:00:52,530
But there's another type of choice.

17
00:00:52,800 --> 00:00:55,530
Before we get there I want to show one other thing.

18
00:00:56,070 --> 00:01:03,020
If we go back to any of our joints that we had let's take this one here.

19
00:01:03,270 --> 00:01:08,260
So this gives us a nice little table with Boy George and his orders.

20
00:01:08,280 --> 00:01:09,890
We have George Michael in his orders.

21
00:01:09,900 --> 00:01:16,470
And Patty Davis in her orders I can do just any regular ask you well functions and things that you're

22
00:01:16,470 --> 00:01:18,150
used to with this data.

23
00:01:18,150 --> 00:01:20,580
So I didn't make that very clear in the last video.

24
00:01:20,580 --> 00:01:22,330
This isn't some special table.

25
00:01:22,440 --> 00:01:23,490
We can do whatever we want.

26
00:01:23,490 --> 00:01:26,840
So I could do something like Group By.

27
00:01:27,120 --> 00:01:28,860
Or let's start even simpler.

28
00:01:29,550 --> 00:01:32,920
I could do an order by let's do an order by.

29
00:01:33,080 --> 00:01:35,260
And let me actually move this.

30
00:01:35,300 --> 00:01:37,200
So we have a record of everything we've done.

31
00:01:37,380 --> 00:01:39,310
So I'll scroll down.

32
00:01:39,570 --> 00:01:41,200
Getting fancier.

33
00:01:41,700 --> 00:01:42,300
Here we go.

34
00:01:42,540 --> 00:01:45,000
So we can do an order by

35
00:01:48,750 --> 00:01:52,680
amount if you want it to.

36
00:01:52,810 --> 00:02:00,520
And now we have from the lowest order up to the highest order or we could order a pie order date.

37
00:02:02,020 --> 00:02:03,730
So that's one thing we can do.

38
00:02:04,510 --> 00:02:07,800
But we can also do things like group buy.

39
00:02:08,260 --> 00:02:15,610
So maybe let's say this is something we actually might want to do is take all of our orders and group

40
00:02:15,610 --> 00:02:17,380
them by who ordered them.

41
00:02:17,820 --> 00:02:18,460
OK.

42
00:02:18,640 --> 00:02:25,120
Groups and by who ordered them and then take that and find the average amount they spent or the total

43
00:02:25,120 --> 00:02:25,440
amount.

44
00:02:25,470 --> 00:02:32,050
But we start there let's identify the biggest spender in our entire database which is pretty easy to

45
00:02:32,050 --> 00:02:34,050
do if you just look here and add things up.

46
00:02:34,060 --> 00:02:36,570
But let's say we had you know ten thousand records.

47
00:02:36,610 --> 00:02:39,610
How do we find the biggest spender.

48
00:02:39,610 --> 00:02:41,400
So Will group buy.

49
00:02:42,310 --> 00:02:44,090
And how do we group them.

50
00:02:44,290 --> 00:02:50,700
Well we want to group by our customer right place the order first name could work.

51
00:02:50,830 --> 00:02:56,410
But that assumes that we only have one beti or one George and we might have George Michael and George

52
00:02:56,410 --> 00:02:57,500
Foreman or something.

53
00:02:57,550 --> 00:02:58,990
So that's not going to work.

54
00:02:59,050 --> 00:03:03,490
We could do first name Khama last name but we still could have people with the same name.

55
00:03:03,490 --> 00:03:09,640
So it's better to just group buy something we know is unique like customer id just like that.

56
00:03:09,640 --> 00:03:18,030
And let's be explicit orders dot customer id so gripped by that and if we hit enter.

57
00:03:18,350 --> 00:03:23,320
I remember when we do group high and we don't actually do any math or any functions on it it looks like

58
00:03:23,380 --> 00:03:29,350
it just cut data out because that's just how it prints things to us but now you can see that we have

59
00:03:29,350 --> 00:03:32,060
grouped by the customer ID.

60
00:03:32,560 --> 00:03:38,770
So you know it's hard to see because we're not displaying customer ID but remember that customer ID

61
00:03:38,770 --> 00:03:42,470
is unique relative to every user.

62
00:03:42,490 --> 00:03:44,850
So we're basically grouping by customer.

63
00:03:45,190 --> 00:03:46,810
Hopefully that makes sense.

64
00:03:47,140 --> 00:03:51,800
You could make it a bit clearer if you did something like this.

65
00:03:51,860 --> 00:03:52,550
What we've done.

66
00:03:52,560 --> 00:04:00,140
And let me get rid of the group by briefly what we've done is take these customer ideas here that we

67
00:04:00,140 --> 00:04:06,590
weren't showing and just grouping these two together these two together and this one on its own.

68
00:04:08,050 --> 00:04:09,610
We're not actually displaying that.

69
00:04:09,790 --> 00:04:10,100
OK.

70
00:04:10,140 --> 00:04:17,550
So we can group by that like we did and then we want to do is totally together the amount.

71
00:04:17,580 --> 00:04:29,250
So rather than just amount to do some amount and I'm going to clean this up a little bit and just give

72
00:04:29,250 --> 00:04:32,530
it an alias as total spent.

73
00:04:33,090 --> 00:04:35,530
Just like that.

74
00:04:35,540 --> 00:04:46,190
Now let's try it cool so we can see boy George spent 135 George Michael 813 and Bette Davis 450.

75
00:04:46,190 --> 00:04:52,090
And then lastly if we could order by total spent.

76
00:04:52,250 --> 00:04:55,980
Move our semi-colon.

77
00:04:56,250 --> 00:05:00,020
Now you can see and actually let's do descending.

78
00:05:03,320 --> 00:05:07,890
Now you can see OK George Michael is definitely our biggest spender.

79
00:05:07,910 --> 00:05:11,450
Thirteen point seventeen cents perfect.

80
00:05:11,450 --> 00:05:13,860
Now order date doesn't really make sense to have in there.

81
00:05:13,870 --> 00:05:19,630
So because we have multiple orders and it doesn't make sense just to show one.

82
00:05:19,670 --> 00:05:21,290
So maybe this makes more sense.

83
00:05:21,290 --> 00:05:22,070
There we go.

84
00:05:22,390 --> 00:05:22,600
OK.

85
00:05:22,610 --> 00:05:28,190
So I just want to show that you can still do typical things that we're used to with the results of a

86
00:05:28,190 --> 00:05:29,230
JOIN query.

87
00:05:29,240 --> 00:05:32,840
It's not some special alien type of a table.

88
00:05:32,900 --> 00:05:35,380
Now that brings us on to the left join.

89
00:05:35,540 --> 00:05:37,630
So another way of joining our data.

90
00:05:38,390 --> 00:05:41,080
Here's the ugly diagram I tried to make a little better.

91
00:05:41,080 --> 00:05:43,040
The colors are still awful I'm sorry.

92
00:05:43,040 --> 00:05:44,280
So what does that do.

93
00:05:44,750 --> 00:05:48,260
Well it's going to take everything from the first table.

94
00:05:48,260 --> 00:05:54,350
So if customers is our table on the left it will take every customer and then on the right it will try

95
00:05:54,350 --> 00:05:59,870
and match or it will match any or it will add any matching records from orders.

96
00:05:59,870 --> 00:06:00,910
In our case.

97
00:06:01,220 --> 00:06:05,080
So these diagrams just talking about it like this I find isn't that helpful.

98
00:06:05,090 --> 00:06:11,030
But basically think of it as it takes the union of where they match just like enter.

99
00:06:11,450 --> 00:06:15,110
But then it also does everything from the left table from customers.

100
00:06:15,110 --> 00:06:16,200
In our case.

101
00:06:16,550 --> 00:06:18,960
So let's test it out over in cloud 9.

102
00:06:19,040 --> 00:06:21,010
Have a comment here for my join.

103
00:06:21,320 --> 00:06:27,560
And let's go take one of our joint that we did earlier like let's do this first one.

104
00:06:27,560 --> 00:06:29,700
This was an inner join.

105
00:06:30,530 --> 00:06:36,980
And one thing I didn't mention is you can explicitly write in or join and I'll show you it does the

106
00:06:36,980 --> 00:06:37,860
exact same thing.

107
00:06:37,880 --> 00:06:43,110
If you leave it off it's implied that it's going to be an inner join it's most common type.

108
00:06:43,160 --> 00:06:50,000
What it does is we know it takes customers where the I.D. matches customer I.D. and that's all we get.

109
00:06:50,000 --> 00:06:52,340
And that's the inner part that matches.

110
00:06:52,340 --> 00:07:01,510
Now if we change this to be left and select everything you'll see we get a couple of differences.

111
00:07:01,540 --> 00:07:04,570
So we still have to kind of ugly to look at.

112
00:07:04,570 --> 00:07:05,410
I'm sorry.

113
00:07:05,410 --> 00:07:07,960
We have Boy George in the order he placed.

114
00:07:07,990 --> 00:07:12,970
And Boy George another order he placed George Michael two orders that match.

115
00:07:12,970 --> 00:07:15,430
But then we have two users who never placed orders.

116
00:07:15,460 --> 00:07:18,660
David Bowie in Blue Steel do not have orders.

117
00:07:18,760 --> 00:07:22,560
And so we end up with David Bowie but still no no no no.

118
00:07:22,570 --> 00:07:27,440
For the orders portion and then Bette Davis and the order that she placed.

119
00:07:27,940 --> 00:07:33,160
So we have customers on the left orders on the right.

120
00:07:33,250 --> 00:07:35,240
We're taking everything from customers.

121
00:07:35,260 --> 00:07:39,620
So that's why we end up with David Bowie and blue steel.

122
00:07:39,940 --> 00:07:45,340
And then we take the intersection as well where there is an impeccable match.

123
00:07:45,460 --> 00:07:47,880
So for David Bowie and blue still there isn't one.

124
00:07:47,920 --> 00:07:53,470
And it fills in NO but for Boy George and George Michael and Bette Davis.

125
00:07:53,470 --> 00:08:00,970
There is a matching order so I know it's kind of difficult to look at and understand but think of it

126
00:08:00,970 --> 00:08:01,520
again.

127
00:08:01,600 --> 00:08:05,330
We have customers and we go through with it beginning.

128
00:08:05,530 --> 00:08:08,060
Boy George is there a matching order.

129
00:08:08,350 --> 00:08:09,070
Yes.

130
00:08:09,250 --> 00:08:11,810
This one here right here and this one.

131
00:08:12,100 --> 00:08:13,940
So put those together.

132
00:08:14,140 --> 00:08:15,790
George Michael Id have to.

133
00:08:15,790 --> 00:08:17,050
Is there any marching orders.

134
00:08:17,170 --> 00:08:17,490
Yes.

135
00:08:17,500 --> 00:08:18,450
There's two.

136
00:08:19,000 --> 00:08:22,840
Put those two together next to George Michael David Bowie.

137
00:08:22,840 --> 00:08:24,280
Is there a matching order.

138
00:08:24,280 --> 00:08:24,920
No.

139
00:08:24,980 --> 00:08:27,900
So just put David Bowie because it's a left join.

140
00:08:28,240 --> 00:08:32,150
If it was an inner join then David Bowie and blues still don't show up.

141
00:08:32,290 --> 00:08:36,320
But it's a left join which means we're taking everything from the left table.

142
00:08:36,760 --> 00:08:41,370
And it works perfectly well depending on what you're trying to do.

143
00:08:41,710 --> 00:08:44,460
So that brings us to the question why would you do this.

144
00:08:44,650 --> 00:08:49,690
And before we get there I'm going to just clean this one up again so that we can see it a little bit

145
00:08:50,050 --> 00:08:50,730
easier.

146
00:08:50,740 --> 00:09:01,280
Let's only select first name last name order date and amount just like before.

147
00:09:01,330 --> 00:09:03,970
So that brings us again to the question why would you do this.

148
00:09:03,970 --> 00:09:08,500
Why would you want to have access to information like David Bowie and blue steel.

149
00:09:08,980 --> 00:09:10,720
And it depends on what you're doing.

150
00:09:10,870 --> 00:09:17,350
And in this case maybe I previously I wanted to see OK all the orders that have been placed and names

151
00:09:17,350 --> 00:09:18,060
next to them.

152
00:09:18,340 --> 00:09:22,800
But now what if I want to tabulate the high spenders on our site.

153
00:09:22,900 --> 00:09:25,540
But I want to include people who haven't spent anything.

154
00:09:25,690 --> 00:09:31,480
So I just want to be able to see for every user how much have they spent and I'd be able to go through

155
00:09:31,480 --> 00:09:34,810
and say you know maybe send an e-mail to the people who have spent a lot.

156
00:09:35,020 --> 00:09:39,000
OK thanks for being a loyal customer versus people who haven't spent.

157
00:09:39,160 --> 00:09:40,600
I could go through and send an e-mail.

158
00:09:40,600 --> 00:09:46,270
Here's a coupon for your first purchase 10 percent off something like that right where I want to basically

159
00:09:46,270 --> 00:09:53,020
get some insight where it involves knowing everything about all users and some of them have corresponding

160
00:09:53,020 --> 00:09:55,350
orders and some of them don't.

161
00:09:55,360 --> 00:10:00,070
Now that brings us to another topic which is OK but we have Knoll's here.

162
00:10:00,070 --> 00:10:03,250
So is there a way to change that.

163
00:10:03,610 --> 00:10:05,520
Let's say I want to do the same thing.

164
00:10:05,570 --> 00:10:07,510
We had a period where we had our high spenders.

165
00:10:07,510 --> 00:10:08,160
Right.

166
00:10:08,530 --> 00:10:15,660
So we selected and we summed all the orders based off of grouping them by customer IDs so it's a lot

167
00:10:15,660 --> 00:10:16,020
again.

168
00:10:16,030 --> 00:10:21,220
But let's do that here with a left join and there's going to be a slight difference right because we

169
00:10:21,220 --> 00:10:22,870
have NOLs.

170
00:10:22,870 --> 00:10:28,630
So if we do this it's like first name last name order date and amount from customers left join orders

171
00:10:29,050 --> 00:10:32,250
and we do a group by customers at this time.

172
00:10:32,560 --> 00:10:39,250
So that will group by customers that we have these two grouped these two groups on his own on his own

173
00:10:39,400 --> 00:10:40,040
on her.

174
00:10:40,140 --> 00:10:42,580
And actually it is a girl I'm sorry.

175
00:10:43,320 --> 00:10:43,810
OK.

176
00:10:44,170 --> 00:10:47,140
So if we do this we won't see much difference.

177
00:10:47,140 --> 00:10:49,700
Well we will see a difference but it's not very meaningful.

178
00:10:49,750 --> 00:10:50,600
What am I missing.

179
00:10:50,950 --> 00:10:58,580
Extra semi-colon not that useful because it just condenses our data and hides stuff.

180
00:10:58,770 --> 00:11:01,300
But if we go through and format this again

181
00:11:04,100 --> 00:11:05,650
put some together everything.

182
00:11:05,710 --> 00:11:06,500
Right.

183
00:11:06,550 --> 00:11:14,880
So will some and inside of here we want to some amount and we don't actually need to have a mount there

184
00:11:14,940 --> 00:11:16,240
and we can get rid of order date too.

185
00:11:16,240 --> 00:11:20,910
So let's just have the first last name and then some.

186
00:11:20,920 --> 00:11:23,360
OK so this is accurate.

187
00:11:23,360 --> 00:11:24,020
That's accurate.

188
00:11:24,020 --> 00:11:25,130
That's accurate.

189
00:11:25,150 --> 00:11:31,790
We still have no hair which it can work but it would be nice if instead of just said 0 because they've

190
00:11:31,790 --> 00:11:33,280
spent $0.

191
00:11:33,560 --> 00:11:35,030
So how do we do that.

192
00:11:35,060 --> 00:11:39,340
And this is not an energy is not a join specific thing in any way.

193
00:11:39,410 --> 00:11:41,490
This is just an interesting problem.

194
00:11:41,510 --> 00:11:45,100
How do we get instead of no how do I replace that with zero.

195
00:11:45,590 --> 00:11:46,760
And there's a couple of ways.

196
00:11:46,760 --> 00:11:52,310
The first really length the awful way is to use a case statement so I could have a case statement where

197
00:11:52,310 --> 00:12:01,070
I checked is some amount is no number I can't just say equals nil but if I said it's is null then do

198
00:12:01,070 --> 00:12:04,160
0 otherwise do some amount.

199
00:12:04,160 --> 00:12:05,990
But that's that's kind of long.

200
00:12:06,380 --> 00:12:14,870
So it's going to be much easier if I use what's known as if no and haven't shown this to you yet because

201
00:12:14,870 --> 00:12:17,410
we didn't really have many cases where we had no data.

202
00:12:17,570 --> 00:12:18,540
But here's one.

203
00:12:18,760 --> 00:12:21,230
So what if does it takes two arguments.

204
00:12:21,230 --> 00:12:25,190
The first one is the thing you want it to check if it is known or not.

205
00:12:25,190 --> 00:12:27,910
So we want to check is some of amount.

206
00:12:27,920 --> 00:12:28,690
No.

207
00:12:29,120 --> 00:12:31,430
So here it's not right it's not.

208
00:12:31,430 --> 00:12:32,330
No it's not.

209
00:12:32,330 --> 00:12:32,870
No.

210
00:12:32,870 --> 00:12:34,310
Here it is.

211
00:12:34,310 --> 00:12:40,320
So then the second argument is what we want to replace it with if it is null and we'll just say zero

212
00:12:41,600 --> 00:12:42,980
so it's very simple.

213
00:12:43,010 --> 00:12:44,840
It checks if the first argument is no.

214
00:12:44,870 --> 00:12:50,540
If it is it replaces it with the second argument if it's not it leaves it as the first.

215
00:12:50,540 --> 00:12:55,300
So now if I try it perfect we get zero.

216
00:12:55,670 --> 00:12:57,180
We should definitely add an alias.

217
00:12:57,320 --> 00:12:58,690
Let's call it total spend.

218
00:12:58,690 --> 00:13:02,000
Again OK.

219
00:13:02,240 --> 00:13:11,050
One other thing that would be nice is to order by total spent and this time let's do it from least.

220
00:13:11,210 --> 00:13:15,680
So we'll just do order by total spent and that should work.

221
00:13:15,680 --> 00:13:16,660
There we go.

222
00:13:16,670 --> 00:13:18,990
Now you can see we have zero.

223
00:13:19,640 --> 00:13:20,240
OK.

224
00:13:20,690 --> 00:13:22,310
So we kind of talked about a lot.

225
00:13:22,310 --> 00:13:24,470
There's a couple of topics that touch on each other.

226
00:13:24,470 --> 00:13:31,310
The first thing just to recap was that I wanted to show you when we do joints any joints.

227
00:13:31,310 --> 00:13:33,050
They're not fancy special tables.

228
00:13:33,050 --> 00:13:35,300
They work just the same way as any other table.

229
00:13:35,300 --> 00:13:42,790
So we can do things like grouped by an order by then the next thing was that we saw inner joints.

230
00:13:42,920 --> 00:13:47,490
I go back we saw this and we also saw a left join.

231
00:13:47,640 --> 00:13:48,690
And the key difference.

232
00:13:48,690 --> 00:13:53,050
They both join data from two tables with the key differences what data they join.

233
00:13:53,220 --> 00:13:54,410
So we give him a condition.

234
00:13:54,420 --> 00:14:02,760
But even given the same condition in our case it was a join on customer ID equals orders customer ID.

235
00:14:02,910 --> 00:14:08,600
This middle part in an inner join That's all we get is the exact overlap on a left join.

236
00:14:08,700 --> 00:14:15,570
We also get the left part in addition so every customer in our case which can be useful if we wanted

237
00:14:15,570 --> 00:14:19,050
to see things like which customers hadn't ordered things.

238
00:14:19,620 --> 00:14:21,080
Which is what we got here.

239
00:14:21,120 --> 00:14:24,020
So hopefully that explanation made some sense.

240
00:14:24,030 --> 00:14:25,860
I totally understand if it didn't.

241
00:14:26,040 --> 00:14:30,200
This is a a tough thing to really wrap your head around at first.

242
00:14:30,240 --> 00:14:36,180
Now it's not terribly difficult once you get going with it but understanding it it can be super intimidating.

243
00:14:36,180 --> 00:14:42,290
So if you're in that situation we will have exercises coming up in just one more video after this.

244
00:14:42,630 --> 00:14:44,510
And I recommend you try and go through those.

245
00:14:44,880 --> 00:14:48,800
And if that's not enough then absolutely ask for help in the forums here.

246
00:14:48,810 --> 00:14:54,580
This is one of the crucial things that in my experience sometimes take students a couple of hours a

247
00:14:54,580 --> 00:14:55,520
couple of days.

248
00:14:55,560 --> 00:14:58,020
Not not like 12 20 hour days.

249
00:14:58,020 --> 00:15:03,870
I just mean sleeping on it once or twice to help kind of get some space in your brain.

250
00:15:04,110 --> 00:15:08,370
Anyways hopefully you're able to kind of get where I'm going with this.

251
00:15:08,400 --> 00:15:11,520
Next up we're going to see our last type of join which is right join.

252
00:15:11,520 --> 00:15:17,160
Very simple can so simple and very easy to grasp if you understand left joints.
