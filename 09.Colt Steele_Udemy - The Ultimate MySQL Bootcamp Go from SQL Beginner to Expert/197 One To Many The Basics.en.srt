1
00:00:00,090 --> 00:00:00,540
OK.

2
00:00:00,660 --> 00:00:06,450
So we talked about the three kind of common relationship classifications and as I mentioned we're focusing

3
00:00:06,450 --> 00:00:07,670
on one to many.

4
00:00:07,680 --> 00:00:09,900
First and we're doing that for a couple of reasons.

5
00:00:09,930 --> 00:00:16,260
One is that compared to many many it's a little bit easier to get through shorter but also it's more

6
00:00:16,260 --> 00:00:21,240
common and it's more central in my opinion to most of the development that that I've done and that I

7
00:00:21,240 --> 00:00:22,340
see other people doing.

8
00:00:22,440 --> 00:00:25,830
Not to discount many too many but we're going to get there.

9
00:00:25,830 --> 00:00:27,060
We're starting with one too many.

10
00:00:27,450 --> 00:00:30,330
So we're going to start with a classic example.

11
00:00:30,480 --> 00:00:36,870
Customers and orders or this could be users and orders or users and carts whatever the transaction is

12
00:00:36,920 --> 00:00:39,510
but we're going to call it customers and orders.

13
00:00:39,510 --> 00:00:40,770
So two tables.

14
00:00:40,980 --> 00:00:44,600
And this is a one to many relationship as we talked about earlier.

15
00:00:44,640 --> 00:00:51,810
So let's say we have a customer President Bill Clinton that's our customer and he can place as many

16
00:00:51,810 --> 00:00:52,940
orders as he'd like.

17
00:00:52,950 --> 00:00:59,660
He can have many orders but each of those orders is associated with exactly one user.

18
00:00:59,670 --> 00:01:07,020
Bill Clinton President Bill Clinton excuse me there is no way to have two people associated with one

19
00:01:07,110 --> 00:01:08,360
order.

20
00:01:08,490 --> 00:01:12,160
So it's a one too many customers have many orders.

21
00:01:12,280 --> 00:01:15,850
Orders have one customer associated with them.

22
00:01:15,960 --> 00:01:19,590
So let's talk about for our case what data we want to store.

23
00:01:19,610 --> 00:01:21,140
It's going to be very simple.

24
00:01:21,390 --> 00:01:25,830
I don't want to clutter it with a whole bunch of other pieces of information we're just going to focus

25
00:01:25,830 --> 00:01:27,230
on the basics.

26
00:01:27,270 --> 00:01:31,270
So a first and last name for customers and an email.

27
00:01:31,500 --> 00:01:34,730
Now in a real web app we'd want a lot more information probably.

28
00:01:34,770 --> 00:01:40,410
We want to create you know our registration data when a customer signs up maybe a last active date that

29
00:01:40,410 --> 00:01:44,620
we're storing or date time password somehow we need to store that.

30
00:01:44,710 --> 00:01:47,830
There's I don't know there's so many other things phone number.

31
00:01:47,830 --> 00:01:49,700
We're trying to do two factor authentication.

32
00:01:49,770 --> 00:01:50,660
Lots of things.

33
00:01:50,910 --> 00:01:55,290
So first and last name and email so three things per customer.

34
00:01:55,650 --> 00:02:00,970
But then we also for orders we need to store the date that an order was made.

35
00:02:01,260 --> 00:02:06,050
So it doesn't matter for our example if it date or date time but we'll keep it simple with date.

36
00:02:06,120 --> 00:02:10,080
So 2017 slash 11 slash 12 or something.

37
00:02:10,350 --> 00:02:17,550
And then the price of the order the total amount let's say ninety nine point nine nine or twenty point

38
00:02:17,550 --> 00:02:18,490
five zero.

39
00:02:18,750 --> 00:02:21,210
So that's going to be a decimal.

40
00:02:21,210 --> 00:02:27,090
So we're going to have first and last name and email which should probably be Vardar as the date of

41
00:02:27,090 --> 00:02:31,440
the purchase which will be a date time and the price of the order which will be a decimal.

42
00:02:31,530 --> 00:02:32,850
That's the easy part.

43
00:02:32,850 --> 00:02:34,920
The next question is how do we store that.

44
00:02:34,920 --> 00:02:36,170
How do we represent it.

45
00:02:36,630 --> 00:02:42,170
And we could do it this way which I want to make clear I'm not saying this is a good way of doing it.

46
00:02:42,330 --> 00:02:47,530
But you could technically get away with doing it in one giant table but there's problems.

47
00:02:47,550 --> 00:02:49,480
But let's first just walk through how it works.

48
00:02:49,710 --> 00:02:55,590
So we have first name and last name and e-mail for customers and then order date and amount.

49
00:02:55,680 --> 00:03:00,530
So we have you know Boy George whose e-mail is George a gmail dot com.

50
00:03:00,540 --> 00:03:07,050
He was a very early user of Gmail and then we have the order date 20:16 to 10.

51
00:03:07,560 --> 00:03:11,060
And that order was ninety nine dollars and 99 cents.

52
00:03:11,070 --> 00:03:19,560
So this is capturing information for one order but then George or Boy George placed another order and

53
00:03:19,560 --> 00:03:22,100
we have duplicated information because we're storing.

54
00:03:22,110 --> 00:03:27,280
OK it's Boy George which I know was not his first name but just let's go with it.

55
00:03:27,330 --> 00:03:30,790
And then George had gmail again and then a different date.

56
00:03:30,810 --> 00:03:35,820
This one was later in 2017 and then a different price or different amount.

57
00:03:36,180 --> 00:03:41,190
So this store is the information that we talked about when needed first last e-mail and then date of

58
00:03:41,190 --> 00:03:43,460
the purchase price of the order.

59
00:03:43,560 --> 00:03:45,710
And so that's working.

60
00:03:45,720 --> 00:03:52,980
Same thing with George Michael who has GM at gmail dot com bought something in 2014 that was $800 and

61
00:03:52,980 --> 00:03:54,200
67 cents.

62
00:03:54,390 --> 00:04:00,030
And then George Michael Sam email Bazzani in 2050 and that was 12 dollars and 50 cents.

63
00:04:00,420 --> 00:04:00,880
OK.

64
00:04:00,930 --> 00:04:03,050
So already you should be noticing.

65
00:04:03,060 --> 00:04:04,880
We have some a lot of duplication.

66
00:04:04,920 --> 00:04:05,340
Right.

67
00:04:05,520 --> 00:04:10,710
Even though we are storing the information that we're supposed to store there's a lot of duplicated

68
00:04:10,710 --> 00:04:16,340
data and then we run into these two David Bowie and blue steel.

69
00:04:16,360 --> 00:04:20,440
My cat there's problems because they haven't placed orders yet.

70
00:04:20,670 --> 00:04:25,220
So we have their customer information we have David Bowie David at gmail dot com.

71
00:04:25,260 --> 00:04:29,840
Also early adopter of Gmail and we have blue steel blue at gmail dot com.

72
00:04:30,120 --> 00:04:36,540
And they haven't placed orders but they still have order date and amount as columns and they just have

73
00:04:36,540 --> 00:04:37,050
no value.

74
00:04:37,050 --> 00:04:37,880
It's not.

75
00:04:38,370 --> 00:04:44,170
So this technically represents that fact that Boy George and George Michael have two orders each.

76
00:04:44,490 --> 00:04:46,890
And David Bowie and you still have no orders.

77
00:04:46,890 --> 00:04:48,870
So that's really not a great way of doing it.

78
00:04:48,870 --> 00:04:53,090
Yes it works but we're not only duplicating a lot of things right.

79
00:04:53,170 --> 00:04:59,340
George George George Michael and if somebody you know shopped a lot we would have tons of duplicated

80
00:04:59,340 --> 00:05:01,640
information which is just a waste.

81
00:05:01,770 --> 00:05:07,440
But then also we run into problems where we have users who maybe haven't ordered anything yet and they

82
00:05:07,440 --> 00:05:09,020
just signed up for the site.

83
00:05:09,030 --> 00:05:13,360
There's no reason to have anything to do with orders until they actually place an order.

84
00:05:13,380 --> 00:05:19,590
So it's much better to keep our data separated because if we ever need to work with just customers on

85
00:05:19,590 --> 00:05:24,560
their own which is happens you know there are times on the site where you don't care about orders or

86
00:05:24,570 --> 00:05:25,650
you just care about customers.

87
00:05:25,660 --> 00:05:27,700
Let's say when a customer is signing in.

88
00:05:28,050 --> 00:05:33,150
All you need is to take their e-mail and check it and take a password and check it against the password

89
00:05:33,150 --> 00:05:33,750
field.

90
00:05:33,960 --> 00:05:35,490
That has nothing to do with orders.

91
00:05:35,580 --> 00:05:39,570
So why would we need to go through a giant customer orders table.

92
00:05:39,960 --> 00:05:41,360
And that's just a really silly example.

93
00:05:41,370 --> 00:05:45,110
But what I'm trying to show is that it's not just about the duplications.

94
00:05:45,300 --> 00:05:49,850
It's also that sometimes it's better to keep your data separate almost every time.

95
00:05:49,980 --> 00:05:56,550
In Leicester always accessing your data together like if the only time we're ever talking about customers

96
00:05:56,790 --> 00:06:01,520
is when we're talking about orders then OK maybe you could put them together.

97
00:06:01,680 --> 00:06:07,020
But then we still have this problem where we have people who haven't placed orders or we have duplicated

98
00:06:07,020 --> 00:06:07,730
data.

99
00:06:07,730 --> 00:06:12,730
So this is a bad idea not a good idea aka bad idea.

100
00:06:13,130 --> 00:06:14,380
So what do we do.

101
00:06:15,020 --> 00:06:17,260
Well here's the simplest approach.

102
00:06:17,270 --> 00:06:21,730
This is how we express one to many relationship and it looks like this.

103
00:06:21,740 --> 00:06:28,100
So we have two tables customers and orders and customers have an ID field and then first name last name

104
00:06:28,100 --> 00:06:35,600
and email and then orders have an ID field and then the date the amount and then this is the important.

105
00:06:35,660 --> 00:06:37,350
This is the crux of everything.

106
00:06:37,430 --> 00:06:42,620
They have a field called it doesn't matter necessarily what it's called but ours is called Customer

107
00:06:42,620 --> 00:06:46,510
ID and is a reference to the customers table.

108
00:06:46,550 --> 00:06:53,570
So whatever customer ID is in a given order is going to correspond to an actual customer who placed

109
00:06:53,570 --> 00:06:54,960
it.

110
00:06:54,980 --> 00:06:56,820
So let's dive into it a bit more.

111
00:06:56,930 --> 00:06:58,310
Here's an example.

112
00:06:58,380 --> 00:07:00,170
So I took the exact same data.

113
00:07:00,170 --> 00:07:07,460
We had four orders and four customers from back here and I split it up into separate tables and you

114
00:07:07,460 --> 00:07:13,130
can see it let's just talk about customers first we have a customers table with an ID a first name last

115
00:07:13,130 --> 00:07:14,810
name and an email.

116
00:07:14,810 --> 00:07:23,720
So we have board Ga-Ga G-mail ID one George Michael GMG mail id to David Bowie David at gmail dot com

117
00:07:23,800 --> 00:07:28,460
ID 3 and then blue steel blue at gmail dot com idea for.

118
00:07:28,520 --> 00:07:33,390
These are all unique corresponding to exactly one user or one customer.

119
00:07:33,620 --> 00:07:36,320
And then we have our orders table.

120
00:07:36,320 --> 00:07:44,270
So there's an ID there Order ID and then the date that an order was placed and then the amount and then

121
00:07:44,300 --> 00:07:49,760
the most important part well arguably the most important part definitely the crux of the relationship

122
00:07:50,090 --> 00:07:59,810
is customer id so in this case it's one which is pointing to this customer the idea of one meeting.

123
00:07:59,810 --> 00:08:05,290
Boy George so Boy George placed an order on 2016 for ninety nine dollars.

124
00:08:05,300 --> 00:08:07,310
Ninety nine cents.

125
00:08:07,340 --> 00:08:14,570
Here's another customer I.D. one telling us that this entire row here this order is related to Boy George

126
00:08:14,570 --> 00:08:14,910
again.

127
00:08:14,960 --> 00:08:24,540
So he placed an order for 35 50 on 20:17 and then we have George Michael customer ID to match this idea

128
00:08:24,540 --> 00:08:25,230
here.

129
00:08:25,740 --> 00:08:31,830
And he bought something for $800 67 cents in 2014 and something in 2015 for twelve dollars and fifty

130
00:08:31,830 --> 00:08:35,340
cents which is the exact same data we had represented here.

131
00:08:36,150 --> 00:08:41,640
And then notice that we have users like David Bowie or customers excuse me David Bowie and Blue Steel

132
00:08:41,910 --> 00:08:43,180
who haven't bought anything.

133
00:08:43,350 --> 00:08:46,050
And there's no extra data there's no Knolles.

134
00:08:46,140 --> 00:08:48,910
We have the minimum information that we need.

135
00:08:48,930 --> 00:08:51,340
We're not storing anything that we don't need.

136
00:08:51,570 --> 00:08:56,580
So we don't have extra orders that are created because they haven't created order and we have separate

137
00:08:56,580 --> 00:08:57,440
tables.

138
00:08:57,930 --> 00:09:01,620
So this is the classic way of structuring a one to many relationship.

139
00:09:01,950 --> 00:09:07,050
And along with that there are two terms we need to point out which we have briefly discussed and the

140
00:09:07,050 --> 00:09:08,940
first one is primary key.

141
00:09:09,210 --> 00:09:14,310
So remember this key word we can type when we're defining a schema we can say and what we've been saying

142
00:09:14,310 --> 00:09:24,420
a lot is ID space and space autoincrement and primary key and the effect of that what a primary key

143
00:09:24,420 --> 00:09:30,820
means is that some particular column in our case is customer ID is always unique.

144
00:09:30,960 --> 00:09:36,580
So we only have one customer with the idea of one and only one customer.

145
00:09:36,580 --> 00:09:41,710
The idea of two and three and four and that's really important because if we're referencing it somewhere

146
00:09:41,710 --> 00:09:47,800
else like over here if there are two different customers that have ID of one then this is useless because

147
00:09:47,800 --> 00:09:49,280
Which one does it refer to.

148
00:09:49,630 --> 00:09:55,000
So it has to be unique and then that's where the auto increment comes in right where it will make it

149
00:09:55,270 --> 00:10:00,870
unique every time we insert a new customer it will automatically increment this to 5 and to 6 to 7.

150
00:10:00,910 --> 00:10:04,740
So there is no possible way we could have duplicate customer IDs.

151
00:10:04,960 --> 00:10:09,380
And then also here is Order ID which is also a primary key.

152
00:10:09,430 --> 00:10:13,560
It is the way the unique way of referencing an order.

153
00:10:13,570 --> 00:10:21,130
Now this is a bit extreme but it's possible that we would have to duplicate rows here where basically

154
00:10:21,130 --> 00:10:26,760
an order was placed with the same amount at the same day by the same person.

155
00:10:26,770 --> 00:10:32,560
It's possible and we would need to refer to them separately though we don't want our database just to

156
00:10:32,560 --> 00:10:33,420
combine them.

157
00:10:33,460 --> 00:10:38,530
Maybe the user purposely bought the same thing twice they bought it once and then they realize oh shoot

158
00:10:38,580 --> 00:10:39,850
I really should have bought two.

159
00:10:39,850 --> 00:10:43,920
So then they buy it again same amount same day same customer ID.

160
00:10:44,170 --> 00:10:48,860
Well the only thing that keeps those orders unique is our Order ID.

161
00:10:48,880 --> 00:10:51,160
So again these two are primary keys.

162
00:10:51,190 --> 00:10:57,670
They are the primary way of referring to rows in this table is what makes them or it's not the only

163
00:10:57,670 --> 00:11:01,160
thing that makes them unique but it is guaranteed to be unique.

164
00:11:01,720 --> 00:11:09,310
And then that brings us to foreign keys and foreign keys are references to another table within a given

165
00:11:09,310 --> 00:11:10,580
table.

166
00:11:10,600 --> 00:11:19,090
So in this case in our orders table customer ID is a foreign key because it is referring to this idea

167
00:11:19,090 --> 00:11:20,920
of the customers.

168
00:11:20,920 --> 00:11:28,180
So primary key primary key foreign key customers does not have a foreign key and it is not referring

169
00:11:28,180 --> 00:11:33,340
to any external table but orders has a foreign key and that terminology is important.

170
00:11:33,340 --> 00:11:34,870
We'll come back to it a lot.

171
00:11:34,870 --> 00:11:36,520
Primary key foreign key.

172
00:11:36,610 --> 00:11:42,340
Will also show you how you actually say in your schema definition that something is a foreign key.

173
00:11:42,550 --> 00:11:49,570
And the reason you would do that is to enforce that whatever customer ID is in here is an existing customer

174
00:11:49,570 --> 00:11:56,400
id over here because we might what if we inserted something an order in an amount with customer id of

175
00:11:56,410 --> 00:12:00,900
20 and we dont have a customer with ID of 20 we mean.

176
00:12:00,940 --> 00:12:03,160
I mean most likely we dont want that to happen.

177
00:12:03,280 --> 00:12:03,490
Right.

178
00:12:03,490 --> 00:12:08,140
We would want to bounce that back and say hey this is a problem there is not a valid customer with that

179
00:12:08,140 --> 00:12:08,650
ID.

180
00:12:08,860 --> 00:12:14,840
And thats what foreign key when we use that in our schema definition it will enforce that.

181
00:12:15,010 --> 00:12:20,980
Otherwise if we dont say that its a foreign key explicitly we could have customer IDs you know all over

182
00:12:20,980 --> 00:12:22,820
the place that don't actually exist.

183
00:12:23,170 --> 00:12:23,570
OK.

184
00:12:23,710 --> 00:12:25,790
So this is the schema that we've defined.

185
00:12:25,900 --> 00:12:31,320
Well this is in the actual scheme of this is that the basics of what we want our schema to look like.

186
00:12:31,360 --> 00:12:33,370
Now we're going to implement it in the next video.
