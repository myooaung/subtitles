WEBVTT
1
00:00:00.060 --> 00:00:04.980
So let's suppose we're inheriting someone else's database and they decided not to use foreign.

2
00:00:05.010 --> 00:00:08.040
They didn't know about foreign key constraints so they didn't use it.

3
00:00:08.190 --> 00:00:09.690
And then they had users.

4
00:00:09.690 --> 00:00:14.100
They used to have all the way up until a hundred and nine users are customers.

5
00:00:14.220 --> 00:00:19.110
And then a lot of people left they just deleted their accounts that say something bad happened there

6
00:00:19.110 --> 00:00:20.640
was a hack a data breach.

7
00:00:20.640 --> 00:00:27.590
Everyone got scared away and then all we are left with are these customers.

8
00:00:27.680 --> 00:00:28.650
It's pretty sad.

9
00:00:28.880 --> 00:00:36.050
So I mean it's a great bunch of customers to have honestly but still only five compared to 109.

10
00:00:36.050 --> 00:00:38.640
Keep in mind this is all done made up story.

11
00:00:38.780 --> 00:00:46.970
But what we could do is use our right join to basically identify all of our customer and orders and

12
00:00:46.970 --> 00:00:52.680
their associated orders as well as any orders that don't have an associated customer.

13
00:00:52.850 --> 00:00:54.570
So we could fill in No.

14
00:00:54.950 --> 00:01:01.100
So if we do our joint that we had done earlier just you know scroll up to save times or save time if

15
00:01:01.100 --> 00:01:06.070
we do this join here which is an inner join or that actually a left join.

16
00:01:06.260 --> 00:01:09.780
Let's do this one right here.

17
00:01:13.680 --> 00:01:14.610
Nothing changes right.

18
00:01:14.610 --> 00:01:18.270
We still have Boy George and his associated two orders.

19
00:01:18.270 --> 00:01:20.130
George Michael has two orders.

20
00:01:20.160 --> 00:01:28.410
Patty Davis her one order and then if I did a left join which we could just do by simply changing that

21
00:01:28.440 --> 00:01:32.710
one inner to the left or we can just do this here.

22
00:01:33.580 --> 00:01:39.630
And I'm I'm only choosing this one because rather than Star this has a smaller subset of data that's

23
00:01:39.690 --> 00:01:41.390
easier to look at.

24
00:01:42.180 --> 00:01:49.170
OK so now we end up with this which still is unchanged from when we did it in the last video because

25
00:01:49.380 --> 00:01:53.940
there are orders that have no customers but they're not here because we did a left join.

26
00:01:54.150 --> 00:02:00.060
And the left join takes everything from customers and any associated matching data from orders.

27
00:02:00.120 --> 00:02:07.010
But now if we do the same thing down here you can hear my cat me.

28
00:02:07.900 --> 00:02:10.560
And we just change it to be right join.

29
00:02:11.290 --> 00:02:16.790
So we're still just doing first name last name order date and amount from customers on the left or from

30
00:02:17.140 --> 00:02:23.050
on the left as long term from customers first right joined with orders so that we take everything from

31
00:02:23.050 --> 00:02:30.380
orders like this everything from orders and any overlap from customers.

32
00:02:30.540 --> 00:02:36.610
Let's try it and you can see exactly what we expected happened.

33
00:02:36.800 --> 00:02:43.430
So we still have all of her orders that match customers and orders but then we have those two orphans

34
00:02:43.430 --> 00:02:44.460
that we added in.

35
00:02:44.690 --> 00:02:46.940
Where there is no matching customer.

36
00:02:46.940 --> 00:02:51.770
So we end up with no first name no last name no first name no last name.

37
00:02:52.190 --> 00:02:55.000
So that's basically all we want to show you with.

38
00:02:55.010 --> 00:02:55.250
Right.

39
00:02:55.250 --> 00:03:02.210
Joines But like I said we will have actually relevant useful examples later but the last thing I wanted

40
00:03:02.210 --> 00:03:07.580
to do was hit you with a whole bunch of set up brand new data just so that you could see how a right

41
00:03:07.580 --> 00:03:08.350
joining works.

42
00:03:08.540 --> 00:03:11.420
So there is you know this is a hypothetical situation that could happen.

43
00:03:11.420 --> 00:03:13.860
We could have orphan data like this.

44
00:03:14.060 --> 00:03:15.670
So I'm going to show you two things now.

45
00:03:15.770 --> 00:03:21.500
The first one is that we can still just do any you know anything that we want with this data like we

46
00:03:21.500 --> 00:03:24.340
did earlier we can do more complex selections.

47
00:03:24.500 --> 00:03:26.380
And I'm also going to show you a new constraint.

48
00:03:26.390 --> 00:03:32.210
You can add to your schema so that when something is deleted that has a foreign key depending on it

49
00:03:32.390 --> 00:03:35.180
it will automatically delete the dependent record.

50
00:03:35.360 --> 00:03:39.950
But to start I just wanted to show we can still do things like group by.

51
00:03:40.490 --> 00:03:44.500
Or we can do things like order by so we can add that in here.

52
00:03:44.670 --> 00:03:45.870
You order by.

53
00:03:46.010 --> 00:03:49.760
And let's do first name just like that

54
00:03:53.140 --> 00:03:54.260
OK.

55
00:03:55.010 --> 00:03:59.870
What about if we tried to group by but if we did group by.

56
00:04:00.500 --> 00:04:05.040
And what if we tried to group by customer ID.

57
00:04:05.090 --> 00:04:06.020
What happens then.

58
00:04:10.110 --> 00:04:14.470
So it doesn't look like all that much right but we can still do our same.

59
00:04:14.490 --> 00:04:16.240
You know we have Boy George was condensed.

60
00:04:16.260 --> 00:04:26.220
George Michael condensed but we can do a sum for amounts just like we've been doing and we can see how

61
00:04:26.220 --> 00:04:32.090
much everyone has spent or George 135 George Michael 8:13 Bette Davis for 50.

62
00:04:32.160 --> 00:04:34.380
We still have these two Knolles.

63
00:04:34.740 --> 00:04:41.010
So this is where we can start to make decisions and do things like OK if first name is no then let's

64
00:04:41.010 --> 00:04:42.490
replace it with something.

65
00:04:43.080 --> 00:04:50.430
So I'm going to format this a bit as we start to get more and more and more replace first name and last

66
00:04:50.430 --> 00:04:56.250
name with if no first name.

67
00:04:56.260 --> 00:04:57.250
Remember how this works.

68
00:04:57.270 --> 00:04:58.550
First name is no.

69
00:04:58.710 --> 00:05:01.140
Then it will be replaced with whatever we pass in.

70
00:05:01.200 --> 00:05:05.050
So we'll say the same missing.

71
00:05:06.410 --> 00:05:14.790
And then we can do the same thing for last name if no last name comma will say use her.

72
00:05:14.790 --> 00:05:18.610
So we'll end up with missing user if we do it that way.

73
00:05:21.530 --> 00:05:25.990
If we don't have an error extra comma here that would do it.

74
00:05:28.360 --> 00:05:37.780
And let's use aliases as the first as last all write I like going on.

75
00:05:38.050 --> 00:05:46.300
OK so now we have missing user and then say we want to see what the total of our orders are where we

76
00:05:46.300 --> 00:05:47.590
don't have a user.

77
00:05:47.590 --> 00:05:50.800
So basically the orphans we want to group those together as well.

78
00:05:50.800 --> 00:05:53.010
Right now we're grouping right customer ID.

79
00:05:53.320 --> 00:06:01.540
But what if I wanted to group these to what we could do is change customer ID to be a first name and

80
00:06:01.540 --> 00:06:06.190
we'd want to do Khama last name rather than just first name because we may have multiple people with

81
00:06:06.190 --> 00:06:07.560
the same first name.

82
00:06:07.630 --> 00:06:09.100
So if we do this now

83
00:06:13.000 --> 00:06:21.490
you'll see that we end up with missing user has 801 total spent then Bette Davis 450 and so on.

84
00:06:21.490 --> 00:06:25.990
And we can order it I think right now you understand what I'm trying to show that these tables aren't

85
00:06:25.990 --> 00:06:27.160
special.

86
00:06:27.220 --> 00:06:31.720
You just have to be comfortable working with NO and if no it's kind of your best friend when you're

87
00:06:31.720 --> 00:06:32.590
doing that.

88
00:06:32.990 --> 00:06:33.470
OK.

89
00:06:33.610 --> 00:06:37.230
So then the very last thing I wanted to show I keep doing that.

90
00:06:37.340 --> 00:06:37.970
Go away.

91
00:06:38.110 --> 00:06:46.130
The last thing I wanted to show was how we do what's known as on the beat cascade.

92
00:06:46.480 --> 00:06:52.330
So this is what I was talking about when we we if we have a foreign key relationship when we delete

93
00:06:52.360 --> 00:06:53.040
a parent.

94
00:06:53.050 --> 00:06:58.510
So if we delete Customers table not the whole table but let's say we delete Bette Davis.

95
00:06:58.900 --> 00:07:01.180
We want her order to also be deleted.

96
00:07:01.180 --> 00:07:02.790
So it's not just totally on its own.

97
00:07:02.800 --> 00:07:05.100
We don't end up with this situation.

98
00:07:05.140 --> 00:07:06.200
So how do we do that.

99
00:07:06.310 --> 00:07:10.470
Well I'll show you right now if you're not interested then go ahead and skip this.

100
00:07:10.470 --> 00:07:14.120
This isn't about Joines but I figured it's a good place to put it.

101
00:07:14.140 --> 00:07:20.610
I'm going to actually drop our tables again.

102
00:07:21.370 --> 00:07:22.760
I'm going to redo.

103
00:07:22.930 --> 00:07:26.330
So grab our original schema from way up here.

104
00:07:27.720 --> 00:07:29.720
Just copy.

105
00:07:29.890 --> 00:07:33.440
How much do we want down to here.

106
00:07:37.310 --> 00:07:45.650
And we still have our foreign key there and when and done to submit and all we do is add on delete cascade

107
00:07:46.830 --> 00:07:54.120
and all that does is it says when a customer is deleted that has a corresponding order to read the order

108
00:07:54.240 --> 00:07:54.910
as well.

109
00:07:56.000 --> 00:07:57.740
So let's try it.

110
00:07:57.980 --> 00:08:00.530
I'm going to copy this in.

111
00:08:01.050 --> 00:08:03.110
Let's make sure we don't have any tables right now.

112
00:08:03.140 --> 00:08:04.270
Perfect.

113
00:08:04.400 --> 00:08:15.990
So let's copy it then let's copy orders in and then let's insert our data and insert our data again.

114
00:08:16.650 --> 00:08:17.180
OK.

115
00:08:17.510 --> 00:08:25.070
So as we know we have data that is joined I'm not going to spend time going over the joined part let's

116
00:08:25.070 --> 00:08:27.610
just use select start from customers.

117
00:08:29.410 --> 00:08:29.960
Okay.

118
00:08:30.380 --> 00:08:36.860
And then we'll do a select star from orders and let's say we want to delete Boy George.

119
00:08:36.860 --> 00:08:40.170
Boy George has two orders these first two.

120
00:08:40.580 --> 00:08:45.840
So if I had to lead boy george these two should now disappear first.

121
00:08:45.890 --> 00:08:48.310
And before a couple of minutes go on we tried it.

122
00:08:48.400 --> 00:08:49.660
We had a problem.

123
00:08:49.690 --> 00:08:55.660
It's not really a problem but we we ran into trouble that we put in there ourselves because a foreign

124
00:08:55.660 --> 00:08:58.220
key constraint didn't allow us to delete it.

125
00:08:58.330 --> 00:09:02.560
We weren't allowed to delete a customer unless we deleted the order first.

126
00:09:02.740 --> 00:09:04.290
So we're going to do that now.

127
00:09:04.600 --> 00:09:11.410
Just try deleting based off of ID or we could do it based off of first name let's do e-mail.

128
00:09:12.240 --> 00:09:12.700
OK.

129
00:09:12.850 --> 00:09:24.680
So we're going to delete from customers where e-mail equals George at gmail dot com and we don't get

130
00:09:24.680 --> 00:09:26.340
that scary error.

131
00:09:26.390 --> 00:09:34.860
Now if we look at our customers we're missing boy George and if we look at our orders we're only down

132
00:09:34.860 --> 00:09:36.350
to three.

133
00:09:36.340 --> 00:09:39.810
All right now we're about to move on to our exercises.

134
00:09:39.990 --> 00:09:42.220
So you're going to get some practice on your own.

135
00:09:42.540 --> 00:09:43.620
Hopefully that's a little.

136
00:09:43.650 --> 00:09:47.400
We have new data so hopefully it's a little more interesting rather than having to work with the same

137
00:09:47.400 --> 00:09:48.580
old data over and over.

138
00:09:48.900 --> 00:09:50.900
And then we're going to keep moving on.

139
00:09:51.180 --> 00:09:51.540
All right.
