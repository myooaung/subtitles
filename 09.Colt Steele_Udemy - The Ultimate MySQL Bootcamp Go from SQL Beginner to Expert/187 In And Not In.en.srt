1
00:00:00,280 --> 00:00:01,020
Already.

2
00:00:01,080 --> 00:00:08,100
So next up we're talking about a new operator called in N and what it does is it allows us to provide

3
00:00:08,130 --> 00:00:19,020
a set of values to three ten fifty different values and then check if a given column is in that set.

4
00:00:19,020 --> 00:00:22,080
So basically like put that in the easier to understand way.

5
00:00:22,290 --> 00:00:30,540
So we wanted to do this on a select all the books written by Carver Raymond Carver or Lahiri Hillary

6
00:00:31,140 --> 00:00:32,430
or Smith.

7
00:00:32,460 --> 00:00:36,710
In our case Patti Smith So we know how to do that right now.

8
00:00:36,880 --> 00:00:42,730
I mean if you listen to how I just said that with these oars we would say she liked all books written

9
00:00:42,730 --> 00:00:48,140
by Carver or either here or by Smith who look something like this.

10
00:00:48,240 --> 00:00:55,750
It's like title An author last name from books where author last name is equal to Carver or author last

11
00:00:55,750 --> 00:00:59,950
name is equal to the history or the last name is equal to Smith.

12
00:00:59,950 --> 00:01:00,840
So this works.

13
00:01:00,940 --> 00:01:02,730
Come on over to cloud nine.

14
00:01:02,740 --> 00:01:07,080
First thing you'll need to do is switch databases.

15
00:01:07,260 --> 00:01:10,850
I'm using the new testing D-B.

16
00:01:10,870 --> 00:01:15,040
I mean a used bookshop again.

17
00:01:15,040 --> 00:01:23,170
OK so now I'm going to use this select title and author L name from these 3 or from where author is

18
00:01:23,170 --> 00:01:25,690
one of these three if I paste that in.

19
00:01:25,870 --> 00:01:31,480
You can see we get all the books by the Harry Smith and Carver perfect.

20
00:01:31,720 --> 00:01:35,620
However as you probably guess there's a better way to do it in.

21
00:01:35,710 --> 00:01:37,980
Make it much easier and much shorter.

22
00:01:38,560 --> 00:01:40,200
So it looks like this.

23
00:01:40,240 --> 00:01:43,270
So like title an author from the first book or from books.

24
00:01:43,270 --> 00:01:52,180
Same thing where author last name is in and then in parentheses we pass in a comma separated list of

25
00:01:52,180 --> 00:01:53,340
values.

26
00:01:53,380 --> 00:02:00,470
So if author name matches anything in here it will be that the row will be select.

27
00:02:00,520 --> 00:02:03,540
So it's really straightforward very simple to use.

28
00:02:03,550 --> 00:02:09,470
It basically goes from this multiple lines and look how much repetition we have.

29
00:02:09,610 --> 00:02:17,720
Author L name equals or author L name equals author L name equals and condenses it down to this.

30
00:02:17,740 --> 00:02:22,180
So let's try to paste this down here so you can just compare

31
00:02:25,170 --> 00:02:26,000
repasted in.

32
00:02:26,170 --> 00:02:28,220
You can see it does the exact same thing.

33
00:02:28,630 --> 00:02:35,650
And the other good thing is that you know as we add in more conditions or more authors in our case this

34
00:02:35,650 --> 00:02:37,930
continues to get much longer every time.

35
00:02:37,930 --> 00:02:39,880
This is really just a very simple change.

36
00:02:39,890 --> 00:02:44,950
If we also want to add in another author very easy.

37
00:02:45,610 --> 00:02:46,630
So it's pretty useful.

38
00:02:46,630 --> 00:02:49,210
You're not limited just to working with text.

39
00:02:49,480 --> 00:02:52,750
So I'll just duplicate this just to show you we could do.

40
00:02:52,750 --> 00:03:07,920
Select title and release your where release year is in let's say 2017 or 1985 just like that.

41
00:03:08,080 --> 00:03:12,700
And if we pace that it and we get these two books.

42
00:03:12,850 --> 00:03:13,120
All right.

43
00:03:13,130 --> 00:03:20,140
So just to show you it doesn't have to be strings you can work with new numbers as well as you probably

44
00:03:20,140 --> 00:03:21,860
guessed maybe it didn't.

45
00:03:21,880 --> 00:03:22,260
I don't know.

46
00:03:22,390 --> 00:03:29,790
But there's also a knot in and it works just like not between worked compared to between.

47
00:03:29,890 --> 00:03:32,350
It will do the opposite of it.

48
00:03:33,250 --> 00:03:39,250
So let's say this is a really dumb hypothetical but let's say I'm really superstitious and I have a

49
00:03:39,250 --> 00:03:45,670
problem with even numbers I go into the bookstore and I tell the court this even though I promise I'm

50
00:03:45,670 --> 00:03:48,790
not superstitious and I don't have a problem with even numbers.

51
00:03:48,790 --> 00:03:52,720
If anything I really like even numbers if you can.

52
00:03:53,080 --> 00:04:01,090
But I go into the store and I say I want to get all books that were not published an even number of

53
00:04:01,090 --> 00:04:03,620
years 2000 until 2016.

54
00:04:04,470 --> 00:04:08,400
So I want to exclude 2002 to 2004 and so on.

55
00:04:09,030 --> 00:04:17,560
Well I can do this which is kind of a nightmare where I'm basically using logical ends and not equals.

56
00:04:18,030 --> 00:04:25,050
So remember we have to go back a few slides here when we were doing this version here before we talked

57
00:04:25,050 --> 00:04:26,570
to it in I was doing.

58
00:04:26,600 --> 00:04:33,370
Equals and or so author equals cover or author I'll name it here.

59
00:04:33,630 --> 00:04:35,990
But when we negate it and do the opposite.

60
00:04:36,150 --> 00:04:38,800
I need to negate that equals with a not equals.

61
00:04:38,820 --> 00:04:47,130
And I flip that or two in and which when I say it that way I realize it may sound a bit more intimidating

62
00:04:47,130 --> 00:04:53,100
than it is basically logically if we step through this what I'm saying is I want to select all the books

63
00:04:53,400 --> 00:04:59,110
where really steer is not 2000 and it's not 2002 and it's not 2004 and it's not any of these.

64
00:04:59,400 --> 00:05:04,340
So anything other than these values and or wouldn't work here it has to be and.

65
00:05:05,010 --> 00:05:05,310
OK.

66
00:05:05,340 --> 00:05:07,750
But the point is is that this is a mess.

67
00:05:07,810 --> 00:05:10,970
It's noxious It's gigantic.

68
00:05:11,030 --> 00:05:15,300
I do copy it over and I tried running it.

69
00:05:15,300 --> 00:05:18,120
You'll see we get all books from odd number years.

70
00:05:21,650 --> 00:05:27,290
But there's a better way we can use not in which works just like you'd expect.

71
00:05:27,290 --> 00:05:29,860
Rather than saying in we just say not in.

72
00:05:29,900 --> 00:05:33,060
And we provide that list that set of values.

73
00:05:33,170 --> 00:05:34,820
And in this case have just passed them all.

74
00:05:34,830 --> 00:05:39,020
And notice the difference there massive difference.

75
00:05:39,260 --> 00:05:40,280
And if we run this

76
00:05:45,970 --> 00:05:47,370
we get the exact same result.

77
00:05:49,010 --> 00:05:54,360
But much much shorter and much easier to add onto or change.

78
00:05:54,380 --> 00:05:58,320
Now some of you might be thinking well this still seems really silly.

79
00:05:58,490 --> 00:06:00,380
There's a couple of things that we can change.

80
00:06:00,380 --> 00:06:05,510
One is that I only want books released after 2000.

81
00:06:05,690 --> 00:06:12,020
So right now I'm basically saying I don't want any even years in the 2000s but we're still getting even

82
00:06:12,020 --> 00:06:16,030
years 96 is there any others.

83
00:06:16,070 --> 00:06:17,770
I guess it's just 5:51.

84
00:06:18,200 --> 00:06:26,650
So what I could do is say that I only want books released after 2000 and it would just look like this.

85
00:06:26,660 --> 00:06:32,390
So the only reason I'm showing you this is so that you can see how to use logical and in conjunction

86
00:06:32,390 --> 00:06:33,320
with something like not.

87
00:06:33,340 --> 00:06:41,270
And so all that we're doing here is selecting books where the release after the year 2000 including

88
00:06:41,270 --> 00:06:43,450
2000 greater than or equal to two thousand.

89
00:06:43,670 --> 00:06:45,920
So that's going to narrow it down significantly.

90
00:06:46,310 --> 00:06:53,200
And then within that subset we only want ones that were released in years that are not contained here.

91
00:06:53,240 --> 00:06:59,660
So the odd numbers the odd 2000 2001 2003 and so on.

92
00:06:59,670 --> 00:07:05,670
So as far as why you would do this let's say that I have taste in literature and I only want recent

93
00:07:05,670 --> 00:07:07,720
books from odd years.

94
00:07:08,130 --> 00:07:12,760
And let's do an order by.

95
00:07:13,550 --> 00:07:14,240
There we go.

96
00:07:14,320 --> 00:07:17,120
So we get 2001 all the way up to 2017.

97
00:07:17,470 --> 00:07:22,090
All the modern books with odd years but there's still something more.

98
00:07:22,720 --> 00:07:25,770
And it doesn't require us to use in or not in.

99
00:07:25,840 --> 00:07:28,150
Because if you look at this this is pretty repetitive.

100
00:07:28,170 --> 00:07:30,280
Well repetitive is the wrong word.

101
00:07:30,490 --> 00:07:33,120
It's long and there's a pattern here.

102
00:07:33,130 --> 00:07:33,980
Right.

103
00:07:34,000 --> 00:07:37,110
So there has to be a better way to express this.

104
00:07:37,420 --> 00:07:40,860
And what I'm going to show you here has nothing to do with in or not in.

105
00:07:40,870 --> 00:07:46,640
So it's a bit of a tangent but I feel that it's worth talking about if you're familiar with programming.

106
00:07:46,930 --> 00:07:50,690
The solution here is to use an operator called Maggiolo.

107
00:07:51,100 --> 00:07:54,970
And basically this is also known as the remainder operator.

108
00:07:55,240 --> 00:07:58,670
What it will allow us to do is test if something is even.

109
00:07:59,140 --> 00:08:01,420
So how do we know if something is even in general.

110
00:08:02,020 --> 00:08:04,560
Well it's divisible evenly by 2 right.

111
00:08:04,570 --> 00:08:07,570
We can divide 2 into a number and there's no remainder.

112
00:08:07,570 --> 00:08:14,210
That means that it's even so 4 divided by two is two and it's just a whole number.

113
00:08:14,270 --> 00:08:17,530
So it's perfect but 3 or let's say seven divided by two.

114
00:08:17,540 --> 00:08:20,110
It's not a clean even division.

115
00:08:20,360 --> 00:08:22,330
So that means that it's not an even number.

116
00:08:22,640 --> 00:08:24,750
So there's a way to do that.

117
00:08:24,810 --> 00:08:25,790
It looks like this.

118
00:08:26,950 --> 00:08:28,660
So the percent sign is known.

119
00:08:28,690 --> 00:08:31,190
As I said modulo the remainder operator.

120
00:08:31,240 --> 00:08:36,800
So if we just focus on that part this is saying release year divided by 2.

121
00:08:37,060 --> 00:08:39,320
The remainder is not equal to zero.

122
00:08:41,110 --> 00:08:49,140
So if we plug in 2000 right here 2000 divided by two the remainder of that is zero.

123
00:08:49,540 --> 00:08:52,670
But if we plug in 2001 the remainder is not zero.

124
00:08:52,690 --> 00:08:55,250
The remainder is 1 meaning that it's odd.

125
00:08:55,720 --> 00:08:58,580
So again this is above and beyond what you need to know.

126
00:08:58,600 --> 00:09:03,970
But I just figured it would come up in the comments if someone saw this gigantic mess here someone would

127
00:09:03,970 --> 00:09:05,840
probably say there's a better way.

128
00:09:06,100 --> 00:09:07,000
And they're right.

129
00:09:07,270 --> 00:09:11,730
It just happens to not use in or not and which is the whole point of this video.

130
00:09:11,740 --> 00:09:14,290
But I figured it is still worth talking about.

131
00:09:14,710 --> 00:09:19,350
So what we're doing is selecting the same stuff title really square from books.

132
00:09:19,420 --> 00:09:26,110
First thing is the same only selecting books that are released after the year 2000 or Including the

133
00:09:26,110 --> 00:09:37,000
year 2000 and then they also have to be pod years so release year is not released year maade 2 is not

134
00:09:37,030 --> 00:09:42,500
equal to zero two does not divide cleanly and paste that interest.

135
00:09:42,510 --> 00:09:44,470
We have a record.

136
00:09:44,470 --> 00:09:50,200
Run it and you can see now I only get the same exact results right.

137
00:09:50,520 --> 00:09:57,140
Let me order it so that we can compare.

138
00:09:57,490 --> 00:09:58,200
No.

139
00:09:58,460 --> 00:10:01,710
Type of OK.

140
00:10:02,210 --> 00:10:08,930
So we get the exact same results that we got earlier but we didn't have to write all these years out

141
00:10:08,930 --> 00:10:09,800
explicitly.

142
00:10:09,800 --> 00:10:16,280
And the other advantage is this solution works when we're in 2018 and 2020 and whatever other even numbers

143
00:10:16,280 --> 00:10:21,720
we have as long as they are even and greater than 2000 it will be filtered up.

144
00:10:21,770 --> 00:10:26,990
So this is a in my opinion a better solution it grows and it expands more.

145
00:10:26,990 --> 00:10:30,130
The other thing there is a bit of a performance difference.

146
00:10:30,130 --> 00:10:39,670
It's not major but when we look at this basically what if we're pretending less personify or anthropomorphized

147
00:10:39,920 --> 00:10:48,810
might as well and it's taking a year like 2013 when we have not in it's going to try.

148
00:10:48,980 --> 00:10:51,630
Is 2013 equal to 2000.

149
00:10:51,680 --> 00:10:52,300
No.

150
00:10:52,310 --> 00:10:53,620
Is it equal to 2002.

151
00:10:53,810 --> 00:10:56,630
No it's well 2004 and going to keep going down.

152
00:10:56,720 --> 00:11:02,150
It has to try every option there's no way to know unless it actually matches it or tries to match it

153
00:11:02,150 --> 00:11:04,820
against every year we have in this set.

154
00:11:04,850 --> 00:11:10,880
So that could potentially take a lot more time than doing it a single mathematical operation like we

155
00:11:10,880 --> 00:11:11,990
have here.

156
00:11:12,650 --> 00:11:18,140
We're just checking is the release year model 2 not equal to zero.

157
00:11:18,440 --> 00:11:22,820
And it's really not a big difference but it's just something that's nice to be aware of.

158
00:11:23,060 --> 00:11:23,410
OK.

159
00:11:23,460 --> 00:11:25,430
So big tangent here.

160
00:11:25,460 --> 00:11:28,610
This video was really about in not in.

161
00:11:28,810 --> 00:11:32,720
So just to go back to that were very useful.

162
00:11:32,870 --> 00:11:39,500
Allow us to pass in a set of numbers or strings or values dates or whatever it is which then are rows

163
00:11:39,500 --> 00:11:45,020
are checked against to see if they either contained or not contained depending on if we're using in

164
00:11:45,020 --> 00:11:46,210
or not in.

165
00:11:46,340 --> 00:11:46,790
All right.
