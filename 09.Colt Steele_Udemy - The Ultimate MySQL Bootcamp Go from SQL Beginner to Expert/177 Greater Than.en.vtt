WEBVTT
1
00:00:00.090 --> 00:00:03.680
So next step we're moving on to the next subset of logical operators.

2
00:00:03.690 --> 00:00:09.240
There is a group that fits together nicely which you're probably familiar with just from middle school

3
00:00:09.240 --> 00:00:11.110
or early school years.

4
00:00:11.460 --> 00:00:17.160
And those are the greater than greater than an equal to or sorry greater than or equal to less than

5
00:00:17.400 --> 00:00:18.630
and less than or equal to.

6
00:00:18.780 --> 00:00:22.160
So four operators are very similar and pretty useful.

7
00:00:22.470 --> 00:00:29.700
So this is the greater than operator in my school it's pretty standard the way this is called Alligator

8
00:00:29.850 --> 00:00:30.550
bracket.

9
00:00:30.690 --> 00:00:34.120
I don't know what to call this honestly I just call it the grade with bracket.

10
00:00:34.140 --> 00:00:40.860
It's pretty universal across programming and it allows us to do things like select all the books released

11
00:00:40.950 --> 00:00:48.010
after a certain year so select all books where release is greater than the year 2000.

12
00:00:48.720 --> 00:00:50.460
And typically we're working with numbers.

13
00:00:50.460 --> 00:00:53.380
I'll talk about strings and a little bit but typically we're working with numbers.

14
00:00:53.490 --> 00:01:02.070
So an example earlier today I was looking on every NBA to book an Air B and B and they have a filter

15
00:01:02.070 --> 00:01:06.180
that allows you to set a minimum price or maximum price.

16
00:01:06.180 --> 00:01:11.940
So if I wanted to I could have gone in and said I only want to book you know every piece that have a

17
00:01:11.940 --> 00:01:17.130
price greater than $50 a night or something to filter out the $20 a night.

18
00:01:17.430 --> 00:01:21.590
You know couches and some person's living room so that's powered.

19
00:01:21.600 --> 00:01:24.300
Behind the scenes most likely by a greater than sign.

20
00:01:24.420 --> 00:01:28.480
So now let's give it a shot on our own over here.

21
00:01:28.860 --> 00:01:35.320
Let's start by just selecting all titles and released here from books.

22
00:01:35.760 --> 00:01:43.060
And let's just order by release here just ordering it will let us see you know when we remove things.

23
00:01:43.110 --> 00:01:45.950
It will make it clearer rather than having them just be jumbled.

24
00:01:46.430 --> 00:01:46.800
OK.

25
00:01:46.920 --> 00:01:52.980
So we've got 1945 up to 2017 if I want to go ahead and do what I showed you which is select all the

26
00:01:52.980 --> 00:01:57.580
books released in the 2000s or after the year 2000.

27
00:01:57.790 --> 00:02:10.190
All I need to do is add in where release to year is greater than 2000 just like that.

28
00:02:10.320 --> 00:02:12.750
And if we look we lost everything.

29
00:02:14.660 --> 00:02:16.520
From here on back.

30
00:02:16.520 --> 00:02:19.920
So from Cannery Row to The Amazing Adventures of Kavalier and Clay.

31
00:02:19.940 --> 00:02:23.420
Important to note that 2000 is not included.

32
00:02:23.480 --> 00:02:24.610
We'll get to in just a moment.

33
00:02:24.800 --> 00:02:26.950
But everything greater than 2000 is.

34
00:02:26.990 --> 00:02:33.170
So that gives us all loops it's just all these books for American Gods down to Lincoln and the Bardo

35
00:02:34.710 --> 00:02:36.670
you can see here we go.

36
00:02:37.230 --> 00:02:43.360
So that brings us to greater than or equal to which works exactly the same way except you add in this

37
00:02:43.390 --> 00:02:48.430
equal sign afterwards which makes it rather than greater than it makes it greater than or equal to which

38
00:02:48.430 --> 00:02:50.210
means that it's inclusive.

39
00:02:51.340 --> 00:02:57.220
So if I just change that and do where released year rather than greater than is greater than or equal

40
00:02:57.220 --> 00:03:02.760
to 2000 now it includes the year 2000.

41
00:03:02.770 --> 00:03:05.010
Let's do one more quick example.

42
00:03:05.350 --> 00:03:13.780
Let's do a select title and stock quantity from books and let's say that we're going to do a sale because

43
00:03:13.990 --> 00:03:16.980
we have some excess stock in some of our books.

44
00:03:17.060 --> 00:03:23.380
Any book that we have more than one hundred including one hundred Let's say so 100 or more copies in

45
00:03:23.380 --> 00:03:24.230
stock.

46
00:03:24.460 --> 00:03:27.150
We want to select and we're going to discount them.

47
00:03:27.520 --> 00:03:28.800
So how do we select those.

48
00:03:29.020 --> 00:03:30.430
Well it's pretty straightforward.

49
00:03:30.430 --> 00:03:36.940
We're just going to select title and stock quantity from books where stock quantity is greater than

50
00:03:37.570 --> 00:03:40.430
or equal to 100.

51
00:03:40.960 --> 00:03:42.100
And there we go.

52
00:03:42.190 --> 00:03:45.290
These are the books that we're going to discount.

53
00:03:45.420 --> 00:03:46.170
All right.

54
00:03:46.500 --> 00:03:46.850
OK.

55
00:03:46.860 --> 00:03:49.670
So there's one other small tangent I want to talk about.

56
00:03:49.950 --> 00:03:54.220
It's a bit of a diversion away from the tables and books that we've been working with.

57
00:03:54.240 --> 00:03:57.350
This has nothing to do with any particular data.

58
00:03:57.960 --> 00:04:05.360
But if you try running something like this select ninety nine greater than one what do you expect.

59
00:04:06.790 --> 00:04:10.310
Well go ahead and try to if you'd like to go and type it over here.

60
00:04:10.690 --> 00:04:18.050
Select ninety nine greater than one if we hit Enter we get the number one back.

61
00:04:18.070 --> 00:04:18.370
All right.

62
00:04:18.370 --> 00:04:23.490
So if you're familiar with other programming languages you've probably come across boolean values.

63
00:04:23.500 --> 00:04:25.020
True or false values.

64
00:04:25.270 --> 00:04:27.850
And that's what my ask who is replicating here.

65
00:04:28.000 --> 00:04:34.250
So the way that it works in Boolean logic is it actually works with the numbers zeros and one.

66
00:04:34.320 --> 00:04:39.990
So we know that ninety nine is greater than 1 that's true.

67
00:04:40.480 --> 00:04:44.290
So we get one which is equivalent to true.

68
00:04:44.400 --> 00:04:48.430
Basically this evaluates to one which you can think of as evaluating to true.

69
00:04:48.450 --> 00:04:50.280
So if it's if that's confusing you.

70
00:04:50.310 --> 00:04:51.410
Let's try something.

71
00:04:51.840 --> 00:04:53.380
Let's change nine.

72
00:04:53.610 --> 00:04:59.510
Greater than 1 2 is ninety nine greater than 5 6 7.

73
00:05:00.000 --> 00:05:00.800
I just lost it.

74
00:05:00.810 --> 00:05:01.430
Here we go.

75
00:05:01.710 --> 00:05:03.380
We know that that's false.

76
00:05:03.660 --> 00:05:06.030
And you can see if we get zero.

77
00:05:06.810 --> 00:05:08.290
So the reason I'm showing this to you.

78
00:05:08.330 --> 00:05:09.120
Well there's two reasons.

79
00:05:09.120 --> 00:05:14.010
One is that it will help us going forward with some of the other things are going to show you when we

80
00:05:14.010 --> 00:05:15.430
can start changing things together.

81
00:05:15.450 --> 00:05:20.640
You'll be able to evaluate them and kind of do some exercises on your own first.

82
00:05:20.760 --> 00:05:25.590
The other thing and the more important reason is that this is what's happening behind the scenes.

83
00:05:25.830 --> 00:05:29.370
When we have something like this right here we're stuck.

84
00:05:29.370 --> 00:05:31.730
Quantity is greater than or equal to 100.

85
00:05:31.740 --> 00:05:37.110
You can almost think of it as my as you're going through every stock quantity and playing it in here

86
00:05:38.130 --> 00:05:41.530
and trying OK it's 100 greater than or equal to 100.

87
00:05:41.790 --> 00:05:42.360
One.

88
00:05:42.480 --> 00:05:43.010
Yes.

89
00:05:43.080 --> 00:05:43.410
OK.

90
00:05:43.410 --> 00:05:47.170
So keep that one is 23 greater than or equal to 100.

91
00:05:47.260 --> 00:05:48.890
0 No false.

92
00:05:48.900 --> 00:05:54.630
So get rid of that one and if it does that you know going down the line that's kind of the humanised

93
00:05:54.630 --> 00:06:00.390
version if you will but it's evaluating to these numbers but those numbers are just you know bits and

94
00:06:00.390 --> 00:06:01.690
memory.

95
00:06:01.950 --> 00:06:03.870
But the concept is the same.

96
00:06:04.350 --> 00:06:08.770
So if you'd like let's wrap this up with just a really simple exercise.

97
00:06:09.000 --> 00:06:12.650
I'm going to type up a few things for you to evaluate them yourselves.

98
00:06:14.760 --> 00:06:15.180
OK.

99
00:06:15.200 --> 00:06:22.070
So I typed up a couple of examples here and I'd like for you to just either mentally try these or actually

100
00:06:22.070 --> 00:06:22.950
try them yourselves.

101
00:06:23.150 --> 00:06:27.010
And remember you'll need to actually run select and don't need a semi-colon.

102
00:06:27.040 --> 00:06:29.780
But what's the result that you expect.

103
00:06:30.110 --> 00:06:32.580
And there are a couple of straight forward ones.

104
00:06:32.660 --> 00:06:37.700
And then I threw in two string ones at the end basically to give myself a talking point at the end.

105
00:06:37.700 --> 00:06:43.760
I want to talk about why this happens and if you should care so go ahead I'll throw up the thing on

106
00:06:43.760 --> 00:06:45.640
the screen that says you should do it.

107
00:06:45.890 --> 00:06:48.150
And then in like two seconds I'll be back.

108
00:06:49.610 --> 00:06:51.300
All right I'm back.

109
00:06:51.300 --> 00:06:52.640
So first one.

110
00:06:52.690 --> 00:06:53.730
One hundred.

111
00:06:53.730 --> 00:06:54.710
Greater than five.

112
00:06:54.720 --> 00:06:55.640
Is that true.

113
00:06:55.890 --> 00:06:58.390
Well yes I believe that to be true.

114
00:06:58.470 --> 00:07:01.740
Just to double check it gives us one.

115
00:07:01.830 --> 00:07:06.050
That means we're in the clear negative 15 greater than 15.

116
00:07:06.050 --> 00:07:07.120
Is that true.

117
00:07:07.400 --> 00:07:11.440
Well no I don't think so.

118
00:07:11.640 --> 00:07:12.570
And we get zero.

119
00:07:12.980 --> 00:07:14.150
All right.

120
00:07:14.150 --> 00:07:17.530
Nine greater than negative 10.

121
00:07:17.630 --> 00:07:25.140
That seems like it should be true and it is what about 1 greater than 1.

122
00:07:25.430 --> 00:07:27.340
Well I don't think one is greater than one.

123
00:07:27.380 --> 00:07:28.450
So it's false.

124
00:07:28.460 --> 00:07:32.350
However if there was the equal sign of course it would be true.

125
00:07:33.200 --> 00:07:42.170
Now these two string comparisons with greater than less and is notorious in all languages for one being

126
00:07:42.200 --> 00:07:46.140
annoying and confusing and to differing radically between languages.

127
00:07:46.310 --> 00:07:51.860
So the advice that I would give to anyone is to just avoid ever having to do anything like this.

128
00:07:51.860 --> 00:07:55.320
There are ways around it but I just wanted to show you what happens.

129
00:07:55.340 --> 00:07:59.490
So what do you think is the lowercase a culture for B.

130
00:07:59.600 --> 00:08:01.850
So is it greater than or less than B.

131
00:08:02.570 --> 00:08:08.320
And in some languages it is greater than in others it's less than in my case my ass.

132
00:08:08.340 --> 00:08:17.610
Q Well if we hit Enter we can see that a is not greater than B meaning that it's less than B although

133
00:08:17.610 --> 00:08:22.300
technically that statement is logically wrong because it could be equal to B.

134
00:08:22.500 --> 00:08:26.560
But as you can see if I add that equal sign it's still false.

135
00:08:26.610 --> 00:08:29.650
So we know definitely a is less than B.

136
00:08:30.030 --> 00:08:36.800
Ok so that brings us to our last one which is a bit tricky upper case a greater than lower case.

137
00:08:37.230 --> 00:08:42.980
And if we run with a semi-colon you'll see that it's false.

138
00:08:43.080 --> 00:08:46.060
So uppercase case is not greater than lowercase J.

139
00:08:46.320 --> 00:08:53.850
So then does that mean that it's lower as upper case a come before lower case.

140
00:08:54.240 --> 00:08:59.420
And the answer is actually if we change this just slightly to be greater than or equal to.

141
00:09:00.000 --> 00:09:01.410
You'll see now it's true.

142
00:09:01.710 --> 00:09:08.150
So that tells us uppercase a is equivalent to lowercase say in my eyes.

143
00:09:08.340 --> 00:09:09.570
And we've seen that before.

144
00:09:09.750 --> 00:09:13.670
When we do something like Well let me just type it again.

145
00:09:13.750 --> 00:09:26.210
Select author L. name where author name equals Buju Eggers like this.

146
00:09:26.670 --> 00:09:33.000
And of course they add in the all important table name from books.

147
00:09:34.170 --> 00:09:35.410
So if I do this.

148
00:09:36.210 --> 00:09:41.130
And let's also do title just to make it easier to see what's going on.

149
00:09:41.130 --> 00:09:42.750
It matches just fine.

150
00:09:43.030 --> 00:09:46.700
But I can also do this with lowercase e and it works just the same.

151
00:09:46.800 --> 00:09:50.950
Or I can do Aggers like that with two uppercase G's.

152
00:09:50.970 --> 00:09:56.430
So the way that string comparisons work in my school is quite odd in and if you're familiar with other

153
00:09:56.430 --> 00:10:00.280
languages it's very different from pretty much every language I've worked with.

154
00:10:00.290 --> 00:10:03.670
So just something worth noting that case doesn't actually matter.
