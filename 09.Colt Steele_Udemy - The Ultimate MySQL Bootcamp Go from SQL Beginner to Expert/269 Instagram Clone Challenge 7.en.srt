1
00:00:00,090 --> 00:00:00,540
All right.

2
00:00:00,540 --> 00:00:01,690
Next problem here.

3
00:00:01,820 --> 00:00:03,180
This is a little different.

4
00:00:03,330 --> 00:00:09,570
So as I mentioned earlier a real problem on Instagram are bot bot accounts that basically exist to go

5
00:00:09,570 --> 00:00:15,270
around and like a bunch of stuff or to comment on people's things but not create their own content they're

6
00:00:15,270 --> 00:00:18,690
not real people oftentimes are commenting the exact same thing.

7
00:00:18,870 --> 00:00:24,390
Or like if I post a photo I'll notice I get like 10 likes immediately like the next second.

8
00:00:24,570 --> 00:00:29,910
And usually there's not 10 people who are happening to you know to like it immediately there's some

9
00:00:29,910 --> 00:00:35,310
sort of program that's happening behind the scenes where it's looking for new posts and liking them

10
00:00:35,310 --> 00:00:36,440
immediately.

11
00:00:36,450 --> 00:00:39,930
So in our hypothetical Instagram phone we have the same problem.

12
00:00:39,960 --> 00:00:45,180
So what we want to do is just find all the users who we think could be bought their users who have never

13
00:00:45,250 --> 00:00:48,850
or excuse me their users who have liked every single photo on the site.

14
00:00:48,900 --> 00:00:52,050
So if we have 257 photos they liked all of them.

15
00:00:52,290 --> 00:00:57,510
If we have 800 photos if I liked all of them and I'm going to show you a way of doing it that actually

16
00:00:57,510 --> 00:00:58,990
use is something we haven't seen yet.

17
00:00:59,010 --> 00:01:00,570
Something new.

18
00:01:00,570 --> 00:01:05,020
So go ahead give it your own shot and then we'll have a solution.

19
00:01:05,310 --> 00:01:05,600
OK.

20
00:01:05,640 --> 00:01:11,670
So the first thing we want to do we know it's going to be a join tween users and like so we can start

21
00:01:11,670 --> 00:01:20,090
with this to select a star from users and we'll do an INNER JOIN like this.

22
00:01:20,100 --> 00:01:25,440
And the reason we know it's an inner join because we don't care about users who don't have any corresponding

23
00:01:25,440 --> 00:01:29,250
likes or likes or don't have a corresponding user that shouldn't exist.

24
00:01:29,250 --> 00:01:36,900
So we want the INNER JOIN on the overlap only so select start from users or join likes on users start

25
00:01:36,920 --> 00:01:40,350
ID calls like Dot use your ID.

26
00:01:40,520 --> 00:01:48,710
And if we start with that takes a moment you've got remember eight 8000 782 likes.

27
00:01:49,360 --> 00:01:54,580
And now what we want to do is group them based off of the user who did the liking.

28
00:01:54,910 --> 00:01:56,820
So we have a group by.

29
00:01:57,410 --> 00:01:59,810
And we have a bunch of choices of how we group them.

30
00:02:00,050 --> 00:02:08,440
We could do user ID or we can do like user ID will save.

31
00:02:09,290 --> 00:02:17,950
OK so now we have 77 rows here and we can see you know there's a bunch of information we've got the

32
00:02:17,990 --> 00:02:20,340
username we don't need created at.

33
00:02:20,370 --> 00:02:31,540
So let's them this down a bit let's do select user name User ID and we'll just keep it at that.

34
00:02:31,950 --> 00:02:32,340
OK.

35
00:02:32,580 --> 00:02:37,260
So these are all the users who have liked anything at all.

36
00:02:37,260 --> 00:02:38,060
We're grouping them.

37
00:02:38,100 --> 00:02:38,600
Right.

38
00:02:38,640 --> 00:02:42,080
So the groups by user id missing a comma.

39
00:02:42,150 --> 00:02:44,660
That's what's going on.

40
00:02:45,210 --> 00:02:47,990
Now what we want to do is figure out how many.

41
00:02:48,060 --> 00:02:53,430
So that's just a matter of using Count star which you should feel pretty good about now we'll give it

42
00:02:53,430 --> 00:02:54,950
an alias right now.

43
00:02:57,520 --> 00:03:02,620
OK and we can get rid of user ID as well and just to use your name.

44
00:03:03,580 --> 00:03:09,980
OK so we can see that you know we have Andre Purdey 85 has 94 likes.

45
00:03:10,300 --> 00:03:13,400
Let's give this actually numb like this.

46
00:03:14,130 --> 00:03:18,960
But the question was not just to figure out who has the most but to figure out the people who have liked

47
00:03:19,320 --> 00:03:20,910
every single photo.

48
00:03:21,360 --> 00:03:28,410
And you know if you don't remember how many we have 257 we're not talking about cheating.

49
00:03:28,530 --> 00:03:30,600
We could cheat if we wanted to check.

50
00:03:30,600 --> 00:03:32,840
Exactly for 257.

51
00:03:33,180 --> 00:03:37,660
It's not too bad but you might think you could just do like a Where where.

52
00:03:37,710 --> 00:03:40,790
Numb like equals to five 7.

53
00:03:41,220 --> 00:03:43,300
But that won't actually work.

54
00:03:43,740 --> 00:03:50,910
And that's because where clauses actually go before the group by telling it what the data you like to

55
00:03:50,920 --> 00:03:56,290
select to group versus what you'd like to select from the group's data.

56
00:03:56,520 --> 00:03:58,500
So where doesn't work.

57
00:03:58,560 --> 00:04:04,560
We need to use something different which we haven't seen which is called having and having X like where

58
00:04:04,950 --> 00:04:09,800
it's just a different word and what it will do is take our group's data.

59
00:04:09,810 --> 00:04:15,440
Our end result and allow us to filter based off of a clause so we can say having.

60
00:04:15,450 --> 00:04:18,990
And we want to say total equals 257.

61
00:04:19,350 --> 00:04:21,970
Just like that.

62
00:04:21,980 --> 00:04:26,880
So now if we do it up total I change the name to numb like.

63
00:04:26,960 --> 00:04:30,490
But now if I do it can see OK these are the people who have liked it.

64
00:04:30,530 --> 00:04:33,730
257 times like every single post.

65
00:04:33,890 --> 00:04:36,980
But the problem again is hard coded 2:57.

66
00:04:37,340 --> 00:04:39,610
So we could fix that very easily.

67
00:04:39,620 --> 00:04:41,120
We want this to be dynamic.

68
00:04:41,180 --> 00:04:50,820
However many photos we have and we can just use a subquery to select count star from photos.

69
00:04:50,840 --> 00:04:58,670
So this will be where the number of things it likes is equal to the total number of our photos and every

70
00:04:58,670 --> 00:05:00,100
go we get the same exact thing.

71
00:05:00,110 --> 00:05:07,070
But this time if I add a thousand photos or remove 10 photos this will still always be the total number

72
00:05:07,070 --> 00:05:07,950
of photos.

73
00:05:08,320 --> 00:05:08,810
OK.

74
00:05:09,020 --> 00:05:13,160
Kind of an ugly query with a subquery here but if you came up with something different.

75
00:05:13,160 --> 00:05:13,810
Post it.

76
00:05:13,880 --> 00:05:14,560
We'll have a discussion.
