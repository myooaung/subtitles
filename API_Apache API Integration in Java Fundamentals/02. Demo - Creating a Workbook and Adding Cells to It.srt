1
00:00:01,740 --> 00:00:04,870
Now let's see how to get started, first,

2
00:00:04,870 --> 00:00:07,050
by creating the quotation Excel document.

3
00:00:07,050 --> 00:00:12,290
You will see how to create a blank workbook,

4
00:00:12,290 --> 00:00:16,700
add a sheet to it, and start adding content,

5
00:00:16,700 --> 00:00:21,840
like the title, company name, and contact details.

6
00:00:21,840 --> 00:00:23,140
But first,

7
00:00:23,140 --> 00:00:26,230
let's have a look at the API packages that you will

8
00:00:26,230 --> 00:00:30,140
be making use of in this process.

9
00:00:30,140 --> 00:00:35,060
The org.apache.poi.common package,

10
00:00:35,060 --> 00:00:41,640
which holds the common functionality for all POI document classes.

11
00:00:41,640 --> 00:00:50,400
The org.apache.poi.ss package consists of all classes that implement

12
00:00:50,400 --> 00:00:54,640
common spreadsheet formatting‑related features.

13
00:00:54,640 --> 00:00:55,440
Then,

14
00:00:55,440 --> 00:01:03,910
the org.apache.poi.hssf package has all the facilities required

15
00:01:03,910 --> 00:01:08,060
for reading from and writing to Excel files.

16
00:01:08,060 --> 00:01:09,280
And also,

17
00:01:09,280 --> 00:01:17,880
the org.apache.poi.xssf is the package that consists of features

18
00:01:17,880 --> 00:01:22,840
required for reading from and writing to Excel files,

19
00:01:22,840 --> 00:01:27,340
compliant with the OOXML file format.

20
00:01:27,340 --> 00:01:31,240
Let's say you want to create an Excel document

21
00:01:31,240 --> 00:01:34,890
compliant with the OOXML file format.

22
00:01:34,890 --> 00:01:39,990
In other words, a .xlsx file.

23
00:01:39,990 --> 00:01:43,030
These are the basic steps you will need to follow.

24
00:01:43,030 --> 00:01:51,140
First, create an empty workbook by instantiating the XSSFWorkbook class.

25
00:01:51,140 --> 00:01:54,970
Open a file output stream to write the content of

26
00:01:54,970 --> 00:01:57,530
the workbook to the file system.

27
00:01:57,530 --> 00:02:02,240
Create a new blank sheet on the workbook,

28
00:02:02,240 --> 00:02:07,640
then create a row on the sheet, followed by a cell on the row,

29
00:02:07,640 --> 00:02:11,540
and set a value to the cell.

30
00:02:11,540 --> 00:02:14,730
You'll keep adding rows and cells as required.

31
00:02:14,730 --> 00:02:22,340
And finally, write the workbook that you created to the output stream.

32
00:02:22,340 --> 00:02:26,910
I've opened up the Maven Java project that we've been working on.

33
00:02:26,910 --> 00:02:32,170
You can find it in the exercise files of this module.

34
00:02:32,170 --> 00:02:36,350
Here, I have already added a new Java class quotation,

35
00:02:36,350 --> 00:02:41,740
and in it, there are few blank methods already added.

36
00:02:41,740 --> 00:02:47,540
I will explain them as we proceed through the demos.

37
00:02:47,540 --> 00:02:50,150
Inside this generateQuotation method,

38
00:02:50,150 --> 00:02:58,640
the first thing to do is to instantiate the XSSFWorkbook class like this,

39
00:02:58,640 --> 00:03:04,590
and then, create a file output stream to write the Excel file into,

40
00:03:04,590 --> 00:03:12,340
surrounded with try with resources, and handle the exceptions.

41
00:03:12,340 --> 00:03:16,110
Next, create a new sheet on the workbook.

42
00:03:16,110 --> 00:03:22,440
Assign it to an XSSFSheet type reference variable,

43
00:03:22,440 --> 00:03:25,460
as we are going to have to use it in the subsequent

44
00:03:25,460 --> 00:03:27,590
code that we will be writing.

45
00:03:27,590 --> 00:03:31,640
Now in this addCompanyDetails method,

46
00:03:31,640 --> 00:03:36,280
you will be writing the code to fill the top section of

47
00:03:36,280 --> 00:03:38,980
the quotation document that you saw.

48
00:03:38,980 --> 00:03:48,340
In here, add this code to create a new XSSFRow on the sheet.

49
00:03:48,340 --> 00:03:49,690
As you can see,

50
00:03:49,690 --> 00:03:56,740
the sheet that you created back there is being passed into this method.

51
00:03:56,740 --> 00:04:00,740
Notice that we pass 0 as the row number,

52
00:04:00,740 --> 00:04:05,240
as we are creating the top‑most row of the worksheet.

53
00:04:05,240 --> 00:04:11,240
Note that the row and column numbers in an Excel sheet start from 0.

54
00:04:11,240 --> 00:04:16,840
Now, to this title row, let's add a cell.

55
00:04:16,840 --> 00:04:22,660
We need to display the title product quotation in the fifth column from left.

56
00:04:22,660 --> 00:04:27,740
So you'll need to pass in 4 as the column index.

57
00:04:27,740 --> 00:04:33,740
Now you can set the value to this cell by calling the setCellValue method,

58
00:04:33,740 --> 00:04:38,640
passing in the string value Product quotation,

59
00:04:38,640 --> 00:04:41,490
which will be the title of the quotation.

60
00:04:41,490 --> 00:04:46,530
In the subsequent rows, you'll need to add the company details.

61
00:04:46,530 --> 00:04:49,030
So create another row.

62
00:04:49,030 --> 00:04:54,800
This time, the row number would be 1, and to that row,

63
00:04:54,800 --> 00:04:57,970
add the contact number cell in column 3,

64
00:04:57,970 --> 00:05:01,960
which means the column index 2.

65
00:05:01,960 --> 00:05:07,040
And to display the company name in the 11th column,

66
00:05:07,040 --> 00:05:13,150
on the same row, specify the column index as 10.

67
00:05:13,150 --> 00:05:16,860
Then set the value like this.

68
00:05:16,860 --> 00:05:20,830
Add one more row.

69
00:05:20,830 --> 00:05:24,590
Create a cell in it, to add the email address,

70
00:05:24,590 --> 00:05:29,360
and set its value, and then, in the next row,

71
00:05:29,360 --> 00:05:33,440
to set the web address.

72
00:05:33,440 --> 00:05:40,870
Now, don't forget to call this method inside the generateQuotation method above.

73
00:05:40,870 --> 00:05:46,140
Also, write the workbook to the file output stream.

74
00:05:46,140 --> 00:05:50,140
If you'd like to see what the output looks like,

75
00:05:50,140 --> 00:05:59,220
simply call the method from the main class by adding these three lines of code.

76
00:05:59,220 --> 00:06:04,900
Don't worry about the values passed in as arguments to this method, for now.

77
00:06:04,900 --> 00:06:09,540
We'll be talking about them in the upcoming clips.

78
00:06:09,540 --> 00:06:14,040
Now, if you run it,

79
00:06:14,040 --> 00:06:23,180
you can see the Excel file quotation.xlsx created inside the resources folder.

80
00:06:23,180 --> 00:06:27,240
That's where we wanted it to create the Excel file.

81
00:06:27,240 --> 00:06:29,040
So there you go.

82
00:06:29,040 --> 00:06:34,270
You now created a Microsoft Excel file, and added content to it.

83
00:06:34,270 --> 00:06:44,000
In the upcoming clips, we'll see how to add some more content to it, and do a bit of formatting and styling.

