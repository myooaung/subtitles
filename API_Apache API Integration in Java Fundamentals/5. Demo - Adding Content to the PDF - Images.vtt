WEBVTT
1
00:00:00.840 --> 00:00:05.540
The next step is to add the product details to the page.

2
00:00:05.540 --> 00:00:09.410
For this, I've preloaded some product data,

3
00:00:09.410 --> 00:00:14.040
and I'm going to pass it to the generateCatalog method.

4
00:00:14.040 --> 00:00:17.140
The method will accept a list of products,

5
00:00:17.140 --> 00:00:24.940
and in the method we'll iterate over the list and display them on the PDF page.

6
00:00:24.940 --> 00:00:31.940
To add an image in PDFBox, you can use the PDImageXObject class.

7
00:00:31.940 --> 00:00:34.860
Create an image object, prodImage,

8
00:00:34.860 --> 00:00:44.540
and inside the for loop we'll call PDImageXObject.creatFromFile method,

9
00:00:44.540 --> 00:00:49.410
passing in the image file name of the product object,

10
00:00:49.410 --> 00:00:55.440
p.getImageFile, and the document object,

11
00:00:55.440 --> 00:00:59.040
catalog.

12
00:00:59.040 --> 00:01:02.620
You should also know that there are different ways in

13
00:01:02.620 --> 00:01:05.840
which you can add an image to a PDF.

14
00:01:05.840 --> 00:01:10.140
There are different methods for that in the API.

15
00:01:10.140 --> 00:01:17.030
Now we should draw the image to the content stream by calling drawImage method,

16
00:01:17.030 --> 00:01:20.640
passing in the image object,

17
00:01:20.640 --> 00:01:27.440
the x and y coordinates where we intend to start drawing our image on the page,

18
00:01:27.440 --> 00:01:30.650
and the width and height of the image.

19
00:01:30.650 --> 00:01:36.270
So let's give 50 for x and 525 for y,

20
00:01:36.270 --> 00:01:41.060
and give the width of the image to be the width of the image

21
00:01:41.060 --> 00:01:51.340
itself by calling prodImage.getWidth and prodImage.getHeight

22
00:01:51.340 --> 00:01:54.340
as the height of the image.

23
00:01:54.340 --> 00:01:59.100
Let me show you what this means in the PDF document.

24
00:01:59.100 --> 00:02:02.980
The image will start drawing itself in an x coordinate

25
00:02:02.980 --> 00:02:06.940
like this and a y coordinate like this.

26
00:02:06.940 --> 00:02:11.180
The images that we are using are placed inside the

27
00:02:11.180 --> 00:02:14.590
images folder under resources right here,

28
00:02:14.590 --> 00:02:22.020
and all images have a width of 225 pixels and a height of 225 pixels.

29
00:02:22.020 --> 00:02:28.540
When converted to inches, it would be approximately 2 inches,

30
00:02:28.540 --> 00:02:33.270
which would become around 144 PDF units.

31
00:02:33.270 --> 00:02:35.340
So from this point,

32
00:02:35.340 --> 00:02:45.840
the image will be drawn 144 PDF units to the right and 144 PDF units to the top.

33
00:02:45.840 --> 00:02:48.730
Now, as you may have guessed already,

34
00:02:48.730 --> 00:02:53.140
the images should be placed one below the other.

35
00:02:53.140 --> 00:02:59.580
Therefore, the y coordinate should change when displaying each product image.

36
00:02:59.580 --> 00:03:00.890
Precisely,

37
00:03:00.890 --> 00:03:07.940
it should reduce itself in an amount equal to the height of the product image.

38
00:03:07.940 --> 00:03:13.940
So we define a variable, imageY, and change it here,

39
00:03:13.940 --> 00:03:23.340
and reduce it like this, ImageY = imageY â€‘ prodImage.getHeight.

40
00:03:23.340 --> 00:03:35.000
All right, now if we save and run the application again, you should see the product images added to the page like this.

