1
00:00:01,340 --> 00:00:04,540
Now let's format the table and its content.

2
00:00:04,540 --> 00:00:08,740
First, let's center align the table on the document.

3
00:00:08,740 --> 00:00:16,040
For that, here, call the setAlignment method on the table,

4
00:00:16,040 --> 00:00:23,090
passing in a constant value, CENTER, from the TableRowAlignment enum.

5
00:00:23,090 --> 00:00:29,340
Then to set the width of the table, call the setWidth method.

6
00:00:29,340 --> 00:00:33,940
This method accepts an int value.

7
00:00:33,940 --> 00:00:39,150
It should be noted that it accepts values as 20ths of a point,

8
00:00:39,150 --> 00:00:48,530
or twips. Twips is a measurement defined as 1/20th of a

9
00:00:48,530 --> 00:01:00,530
typographical point. One twips is 1/1440 inches, where one

10
00:01:00,530 --> 00:01:07,140
typographical point is 1440 inches.

11
00:01:07,140 --> 00:01:11,040
So if you want the table to be 6 inches wide,

12
00:01:11,040 --> 00:01:19,640
you should pass in 1440 into 6 to this method.

13
00:01:19,640 --> 00:01:24,340
Now to align cell content and apply some formatting to text,

14
00:01:24,340 --> 00:01:29,940
you need to place cell content inside paragraphs.

15
00:01:29,940 --> 00:01:36,130
There is a paragraph added by default in an XWPFTable cell at the time of

16
00:01:36,130 --> 00:01:42,780
creation. You can access that paragraph by simply calling the getParagraph

17
00:01:42,780 --> 00:01:48,950
array method, passing in 0 to access the one and only element of that

18
00:01:48,950 --> 00:01:55,290
paragraph array. Then you can set alignment of it.

19
00:01:55,290 --> 00:02:04,700
Let's center align the quantity. Now create a run on the paragraph, and now,

20
00:02:04,700 --> 00:02:08,360
instead of setting cell text directly to the cell,

21
00:02:08,360 --> 00:02:10,740
set the text to the run,

22
00:02:10,740 --> 00:02:13,920
and you can call the formatting methods as usual on

23
00:02:13,920 --> 00:02:19,340
the run, like setBold, setColor.

24
00:02:19,340 --> 00:02:23,140
Let's make it bold and blue.

25
00:02:23,140 --> 00:02:29,540
Do the same for the description, unit price and LineTotalCells.

26
00:02:29,540 --> 00:02:32,740
In addition to making the text bold and blue,

27
00:02:32,740 --> 00:02:40,080
let's set the width of the unit price and lineTotalCells to exactly 1 inch. So

28
00:02:40,080 --> 00:02:48,040
how can you do that? For that, call the setWidthType method of the XWPFTable

29
00:02:48,040 --> 00:02:54,700
cell class to set the type of width. To this method,

30
00:02:54,700 --> 00:03:02,710
you shall pass in a constant in TableWidthType enum. It has these values. AUTO

31
00:03:02,710 --> 00:03:10,140
is the default value, if you do not specify anything. DXA is to specify it as

32
00:03:10,140 --> 00:03:19,240
an absolute value, once again in 20th of a point or twips, and PCT is to

33
00:03:19,240 --> 00:03:25,530
specify the width as a percentage value. Let's give it as an absolute value.

34
00:03:25,530 --> 00:03:30,760
So, TableWidthType.DXA. Next,

35
00:03:30,760 --> 00:03:34,250
call the setWidth method on the cell, and let's say you

36
00:03:34,250 --> 00:03:38,040
want to set the column to be 1 inch wide.

37
00:03:38,040 --> 00:03:49,940
So as a string value, pass in 1440, which is 1 inch in 20ths of a point.

38
00:03:49,940 --> 00:03:55,950
Do the same for the line total as well. Then to format the rest

39
00:03:55,950 --> 00:04:00,250
of the cell values, inside the for loop, that is the product

40
00:04:00,250 --> 00:04:03,940
detail values, follow the same process.

41
00:04:03,940 --> 00:04:14,040
Get the default paragraph of each table cell, et alignment, and into the run,

42
00:04:14,040 --> 00:04:20,640
add the cell text instead of adding it directly to the cell.

43
00:04:20,640 --> 00:04:25,800
Do the same for all the columns, and also to the

44
00:04:25,800 --> 00:04:36,910
subTotal, tax, and total cell values.

45
00:04:36,910 --> 00:04:42,650
Notice that the subTotal, tax, and total labor cells are set to bold and

46
00:04:42,650 --> 00:04:50,740
italic, and cell values are aligned to the right of the cell.

47
00:04:50,740 --> 00:04:54,770
Finally, add this code inside the addInfo method to add

48
00:04:54,770 --> 00:04:57,770
the deliveryInfo and the generalInfo lines to the

49
00:04:57,770 --> 00:05:01,710
quotation. There's nothing new here.

50
00:05:01,710 --> 00:05:07,100
It's just adding more paragraphs and content to them. Before you run the

51
00:05:07,100 --> 00:05:13,760
application, call addInfo method in the generate quotation method.

52
00:05:13,760 --> 00:05:19,640
Now save and run the application.

53
00:05:19,640 --> 00:05:32,000
You should see a document that looks like this. So you have now successfully created the quotation as a word document.

