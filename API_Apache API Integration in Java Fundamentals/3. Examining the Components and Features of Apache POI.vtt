WEBVTT
1
00:00:01.540 --> 00:00:05.530
What are the components of the Apache POI API.

2
00:00:05.530 --> 00:00:10.620
Apache POI API is made of many components.

3
00:00:10.620 --> 00:00:18.040
POIFS is the most stable and the oldest part of the API.

4
00:00:18.040 --> 00:00:22.310
It is the foundation to all other components,

5
00:00:22.310 --> 00:00:26.540
and it can work with the OLE compound document format,

6
00:00:26.540 --> 00:00:33.040
which means it can work with all types of Microsoft Office files.

7
00:00:33.040 --> 00:00:37.900
HSSF is the component that can work specifically with

8
00:00:37.900 --> 00:00:42.500
Microsoft Excel files with the XLS extension.

9
00:00:42.500 --> 00:00:46.400
HWPF is the part of the API,

10
00:00:46.400 --> 00:00:50.960
which is therefore working with Microsoft Office files with the

11
00:00:50.960 --> 00:00:57.640
DOC extension. Then the HSLF component handles Microsoft

12
00:00:57.640 --> 00:01:02.620
PowerPoint files that has an extension of PPT.

13
00:01:02.620 --> 00:01:09.390
Since Apache POI now supports the Office Open XML file format, there are

14
00:01:09.390 --> 00:01:18.150
components in the API like XSSF that supports reading and writing from and to

15
00:01:18.150 --> 00:01:28.640
Microsoft Excel documents with the file extension XLSX. And XWPF, using which it

16
00:01:28.640 --> 00:01:34.160
is possible to handle Microsoft Word documents that have a file extension of

17
00:01:34.160 --> 00:01:41.970
DOCX. And also, the XSLF component to work specifically with Microsoft

18
00:01:41.970 --> 00:01:50.090
PowerPoint documents with an extension of PPTX. Talking about the features of

19
00:01:50.090 --> 00:01:55.790
Apache POI. Using this API, it is possible to create,

20
00:01:55.790 --> 00:02:01.840
read, and write Microsoft Office documents from your Java application.

21
00:02:01.840 --> 00:02:06.700
It offers streamâ€‘based processing that is especially good for

22
00:02:06.700 --> 00:02:11.740
processing large files because it utilizes less memory.

23
00:02:11.740 --> 00:02:20.140
It also offers an extended component of XSSF named SXSSF that is

24
00:02:20.140 --> 00:02:24.050
capable of working with very large Excel sheets,

25
00:02:24.050 --> 00:02:28.340
which often would be a requirement in Java applications.

26
00:02:28.340 --> 00:02:29.610
Furthermore,

27
00:02:29.610 --> 00:02:44.000
the API has great support for features like working with Excel formulas, cell styling, data validations, and elements like images and hyperlinks.

