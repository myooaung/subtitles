1
00:00:01,220 --> 00:00:02,690
In this first demo,

2
00:00:02,690 --> 00:00:07,600
you are going to load up the product catalog PDF that you created earlier.

3
00:00:07,600 --> 00:00:14,340
To do this, you'll use the static load method of the PDDocument class.

4
00:00:14,340 --> 00:00:15,840
After loading it,

5
00:00:15,840 --> 00:00:22,650
we'll add a new page to it and then extract text content from the PDF

6
00:00:22,650 --> 00:00:27,940
using the getText method of the PDFTextStripper class.

7
00:00:27,940 --> 00:00:31,420
You'll also extract images from the PDF.

8
00:00:31,420 --> 00:00:35,840
Since we've got multiple images in the product catalog PDF,

9
00:00:35,840 --> 00:00:40,870
we'll look at how to extract them and also see a slightly different way of

10
00:00:40,870 --> 00:00:46,440
extracting an image in case if the image is a full page image.

11
00:00:46,440 --> 00:00:50,500
In the ProductCatalog class, let's add a new method,

12
00:00:50,500 --> 00:00:53,540
load, and modify a product catalog.

13
00:00:53,540 --> 00:00:58,860
First, we need to create a file to represent the catalog PDF document.

14
00:00:58,860 --> 00:01:02,640
So create a file object, file.

15
00:01:02,640 --> 00:01:05,610
You will need to specify the path to the file,

16
00:01:05,610 --> 00:01:11,540
and for that let's define a string variable named path and initialize

17
00:01:11,540 --> 00:01:15,840
it with the path to the product_catalog document.

18
00:01:15,840 --> 00:01:19,940
Now the next step is to load the PDF document.

19
00:01:19,940 --> 00:01:25,360
The way to do this is to call the static load method of the PDDocument class,

20
00:01:25,360 --> 00:01:29,490
passing in the file that you created.

21
00:01:29,490 --> 00:01:36,040
Now, remember you need to ensure that the document is closed after using it.

22
00:01:36,040 --> 00:01:43,240
So surround it with try with resources, and handle the IOException as well.

23
00:01:43,240 --> 00:01:47,340
Now that the PDF document is loaded from the file system,

24
00:01:47,340 --> 00:01:51,150
we can do modifications to it like adding content,

25
00:01:51,150 --> 00:01:54,540
removing content, and etc.

26
00:01:54,540 --> 00:01:57,240
Let's just add another page to it.

27
00:01:57,240 --> 00:02:02,040
So call the addPage method on the catalog document.

28
00:02:02,040 --> 00:02:04,840
Remember to pass in the page size.

29
00:02:04,840 --> 00:02:07,640
We want it to be an A4â€‘sized page.

30
00:02:07,640 --> 00:02:08,530
Great.

31
00:02:08,530 --> 00:02:12,640
You've now added another page to the PDF document.

32
00:02:12,640 --> 00:02:16,140
But wait, you need to save it.

33
00:02:16,140 --> 00:02:20,940
If not, the changes you made to the document will not be there.

34
00:02:20,940 --> 00:02:28,440
So, call the save method on the catalog document, passing in the path.

35
00:02:28,440 --> 00:02:32,940
Now let's test it to see if the new page got added.

36
00:02:32,940 --> 00:02:37,340
Back in the main class, call the method.

37
00:02:37,340 --> 00:02:45,040
Run the application, and you should see now that the PDF has two pages in it.

38
00:02:45,040 --> 00:02:50,240
Now let's extract content from the PDF document, product_catalog.

39
00:02:50,240 --> 00:02:54,820
I've added this extractContent method and have already written the

40
00:02:54,820 --> 00:02:58,940
code to load the document which you've seen already.

41
00:02:58,940 --> 00:03:03,710
The PDFTextStripper class has the methods that can be used to strip

42
00:03:03,710 --> 00:03:07,540
out all the text content from a PDF document.

43
00:03:07,540 --> 00:03:11,310
It should be noted that all formatting will be ignored

44
00:03:11,310 --> 00:03:14,210
when stripping out the text from the PDF.

45
00:03:14,210 --> 00:03:17,990
Once the text content of the document is stripped out,

46
00:03:17,990 --> 00:03:21,940
you can work with that content the way you want.

47
00:03:21,940 --> 00:03:23,200
As you can see,

48
00:03:23,200 --> 00:03:26,390
this class has a bunch of methods that can be used to

49
00:03:26,390 --> 00:03:29,740
handle the text content of a PDF document.

50
00:03:29,740 --> 00:03:31,140
For example,

51
00:03:31,140 --> 00:03:35,650
if you want to limit the text that is extracted you can specify the range

52
00:03:35,650 --> 00:03:41,940
of pages using setStartPage and setEndPage methods.

53
00:03:41,940 --> 00:03:46,140
However, let's use the getText method in this case.

54
00:03:46,140 --> 00:03:50,050
So, to call the getText method for the PDF document,

55
00:03:50,050 --> 00:03:55,540
let's first create an object of the PDFTextStripper class.

56
00:03:55,540 --> 00:04:05,540
And then, using it, call getText, passing in the PDF document, catalog.

57
00:04:05,540 --> 00:04:09,190
This method call is going to return the entire text

58
00:04:09,190 --> 00:04:12,640
content of the PDF document as a string.

59
00:04:12,640 --> 00:04:18,540
So, store the string in a variable textContent.

60
00:04:18,540 --> 00:04:24,040
Let's see what we've got in textContent, so print it out.

61
00:04:24,040 --> 00:04:29,740
Now, if you call this method in the main class and save and run the application,

62
00:04:29,740 --> 00:04:35,340
you should see an output that looks like this.

63
00:04:35,340 --> 00:04:38,520
You can see all the text content in the document from the

64
00:04:38,520 --> 00:04:42,210
heading to the rest of the details, like product names,

65
00:04:42,210 --> 00:04:46,740
their features, and the product prices.

66
00:04:46,740 --> 00:04:50,380
You can simply use the getText method or use any other

67
00:04:50,380 --> 00:04:57,000
method in the PDFTextStripper class to deal with the text content in your PDF document.

