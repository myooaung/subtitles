1
00:00:01,300 --> 00:00:04,850
Next up is aligning cell content.

2
00:00:04,850 --> 00:00:12,100
Talking about aligning cell content, you can align content in two directions,

3
00:00:12,100 --> 00:00:16,240
that is, horizontally and vertically.

4
00:00:16,240 --> 00:00:18,360
To align cell content horizontally,

5
00:00:18,360 --> 00:00:25,470
you can use the setAlignment method in the XSSF cell style class, passing

6
00:00:25,470 --> 00:00:30,940
in a constant value of the HorizontalAlignment enum.

7
00:00:30,940 --> 00:00:33,260
To set the vertical alignment,

8
00:00:33,260 --> 00:00:38,740
you can call the setVerticalAlignment method of the same class,

9
00:00:38,740 --> 00:00:44,980
passing in the constant from VerticalAlignment enum. Back in

10
00:00:44,980 --> 00:00:51,050
the code, let's leftâ€‘align the dateCell value. To do that, to

11
00:00:51,050 --> 00:00:53,940
the style object, dateCellStyle,

12
00:00:53,940 --> 00:00:58,250
set the horizontal alignment by calling the setAlignment

13
00:00:58,250 --> 00:01:07,240
method, passing in the constant value, like this.

14
00:01:07,240 --> 00:01:10,220
Also, align the cell values,

15
00:01:10,220 --> 00:01:15,550
quantity and description, in the product details section to be center

16
00:01:15,550 --> 00:01:25,320
aligned. For that, create a new XSSFCellStyle lineRowCellStyle. Set the

17
00:01:25,320 --> 00:01:34,640
alignment as center, and apply the style to the required cells, quantity

18
00:01:34,640 --> 00:01:43,340
and description. Now run to see the result.

19
00:01:43,340 --> 00:01:49,140
You can see that the date is now left aligned in the cell,

20
00:01:49,140 --> 00:01:54,740
and the quantity and description are center aligned in the cell.

21
00:01:54,740 --> 00:01:57,010
Apart from aligning the cells,

22
00:01:57,010 --> 00:02:01,740
it is required to increase the width of some of the columns.

23
00:02:01,740 --> 00:02:06,940
Let's increase the width of columns 3, 5, and 11.

24
00:02:06,940 --> 00:02:12,340
It can be done by calling the setColumnWidth method of the sheet.

25
00:02:12,340 --> 00:02:17,650
So let's do that inside the generate quotation method, right here at

26
00:02:17,650 --> 00:02:25,750
the top, sheet.setColumnWidth. Now, to this method,

27
00:02:25,750 --> 00:02:30,330
you should pass in the columnIndex and the required

28
00:02:30,330 --> 00:02:37,540
width as 1/256th of a character width.

29
00:02:37,540 --> 00:02:43,440
What it means is if you want the column to be eight characters wide,

30
00:02:43,440 --> 00:02:50,940
you should specify the width as 8*2 56.

31
00:02:50,940 --> 00:02:57,030
So for the third column, that is columnIndex 2, let's say we

32
00:02:57,030 --> 00:03:00,740
wanted to have a width of 30 characters,

33
00:03:00,740 --> 00:03:06,440
you will need to give 30 into 256.

34
00:03:06,440 --> 00:03:17,440
The fifth column, that is index 4, to also have a width of 30 characters,

35
00:03:17,440 --> 00:03:26,140
and the 11th column to have a width of 20 characters.

36
00:03:26,140 --> 00:03:30,840
Now, when you run it,

37
00:03:30,840 --> 00:03:37,440
you can see that the width has been increased in those columns.

38
00:03:37,440 --> 00:03:41,360
It should be noted that the number of characters that can be

39
00:03:41,360 --> 00:03:45,140
displayed can vary depending on the font.

40
00:03:45,140 --> 00:03:50,240
The default font in XSSF is Calibri,

41
00:03:50,240 --> 00:03:58,000
and you will need to give it some thought in case you are using any special points in your workbook.

