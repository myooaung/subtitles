WEBVTT
1
00:00:00.270 --> 00:00:03.500
Hello everyone and welcome to this python tutorial.

2
00:00:03.540 --> 00:00:10.170
In this video we are going to create the main function for the flask API project when creating a function

3
00:00:10.170 --> 00:00:11.980
for the flask application.

4
00:00:12.000 --> 00:00:19.680
There is one additional thing that we have to do and that is a decorator if you haven't used them before.

5
00:00:19.680 --> 00:00:27.120
It is a statement starting with ADD in Python and it is defined above a function and it provides a more

6
00:00:27.120 --> 00:00:28.770
functionality to it.

7
00:00:28.950 --> 00:00:35.640
In the case of flask with these decorators we connect the python function with a specific Web site wrote

8
00:00:36.390 --> 00:00:40.730
let's define the first one at add dot root.

9
00:00:40.740 --> 00:00:47.400
This app is the name of the flask application already defined before and this road is the root of the

10
00:00:47.520 --> 00:00:50.940
website inside the road function.

11
00:00:50.950 --> 00:00:56.310
Provide the road which the user has to type to access this function.

12
00:00:56.530 --> 00:01:03.040
In the case of API let's choose this one slash API slash we V1.

13
00:01:03.280 --> 00:01:11.050
And here we have to specify a dynamic part of the road which will expect a path to upload file to achieve

14
00:01:11.050 --> 00:01:16.000
these write smaller than bigger than an inside.

15
00:01:16.000 --> 00:01:19.560
We need to specify what type of data is expected.

16
00:01:19.660 --> 00:01:21.990
Is it an integer or a string.

17
00:01:22.060 --> 00:01:29.260
In this case it is a string then followed the data type by the name of the function argument let's put

18
00:01:29.700 --> 00:01:38.760
AMG name the next argument of the road function is to specify what kind of method is expected on this

19
00:01:38.760 --> 00:01:44.510
road methods for a road could be a get post or both.

20
00:01:44.630 --> 00:01:53.150
In this case because we expect data to be uploaded to a server the methods should be post so right methods

21
00:01:53.570 --> 00:01:55.360
and in those brackets right.

22
00:01:55.370 --> 00:02:04.730
Post we are done with our decorator let us define the classify image function define classify image

23
00:02:05.090 --> 00:02:13.010
and the argument name has to be the same one specify in the road to started with our function.

24
00:02:13.040 --> 00:02:22.220
Firstly we need to specify where is our uploaded directory so right uploaded there is equal to upload

25
00:02:22.310 --> 00:02:28.570
flash the next part of the classify image function is to load and upload it.

26
00:02:28.630 --> 00:02:38.760
Image to load an image right image is equal to I am read and I am function takes only one argument and

27
00:02:38.760 --> 00:02:42.460
that is the path to an image for our path.

28
00:02:42.450 --> 00:02:51.640
Right uploaded there plus I am NE at this point we have our image loaded and we are all set to perform

29
00:02:51.640 --> 00:02:56.180
classification to improve the general user experience.

30
00:02:56.180 --> 00:02:59.080
Let's return the class name instead of the class.

31
00:02:59.120 --> 00:03:01.570
Index to do this.

32
00:03:01.600 --> 00:03:08.190
We need to define an array of all class names so Let's paste it right here.

33
00:03:08.210 --> 00:03:14.720
I created this array by copying class names from the main dataset repository if you want.

34
00:03:14.720 --> 00:03:21.180
You can copy the array from the screen right here or you can go to fashion and as GitHub repository

35
00:03:21.570 --> 00:03:25.750
and in the read me you will find all class names.

36
00:03:25.760 --> 00:03:29.020
Now it's time to make prediction right.

37
00:03:29.030 --> 00:03:37.070
Prediction is able to model both predict and because our model expects multiple images or least of images

38
00:03:37.160 --> 00:03:38.310
as an input.

39
00:03:38.360 --> 00:03:44.850
Let's put the input the image in brackets because our model is fully connected network.

40
00:03:44.850 --> 00:03:48.410
We can feed images with a raw shape to it.

41
00:03:48.780 --> 00:03:53.340
To overcome this problem we can simply reshape the input image.

42
00:03:53.340 --> 00:04:05.120
So use dot reshape one because we have only one image and then 28 times 28 and now we have our predictions.

43
00:04:05.140 --> 00:04:11.530
The last thing to do is to return the Jason response to a user right return.

44
00:04:11.680 --> 00:04:20.170
Jason ify this function takes only one argument and that is byte and dictionary and transforms it into

45
00:04:20.170 --> 00:04:24.000
Jason object for the key let's write.

46
00:04:24.080 --> 00:04:25.520
Object detected.

47
00:04:25.820 --> 00:04:32.240
You can set here whatever you want it is just a simple message to a user to explain what it receives

48
00:04:33.770 --> 00:04:38.590
then classes and that is our array of all class names.

49
00:04:38.870 --> 00:04:46.440
And now we need to access an index of a class that has highest probability to do this part right.

50
00:04:46.460 --> 00:04:52.850
MP dot org marks all predictions and because of the carer's outputs shape right.

51
00:04:53.020 --> 00:04:58.850
0 and you're all set and that's it for our last KPI.

52
00:04:58.890 --> 00:05:03.270
If you have any questions or comments please post them in the comments section.

53
00:05:03.270 --> 00:05:05.190
Otherwise I'll see you in the next tutorial.
