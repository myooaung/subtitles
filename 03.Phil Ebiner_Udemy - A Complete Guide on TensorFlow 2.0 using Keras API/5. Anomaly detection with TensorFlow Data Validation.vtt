WEBVTT
1
00:00:00.390 --> 00:00:03.720
Hello everyone and welcome to this python tutorial.

2
00:00:03.720 --> 00:00:08.540
In this video we are going to compare our test statistics with our schema.

3
00:00:08.550 --> 00:00:10.590
The idea is very simple.

4
00:00:10.620 --> 00:00:17.430
We are going to take our statistics generated based on our test set and compare it with our schema and

5
00:00:17.430 --> 00:00:24.360
the functions that we are going to use to do that are going to output all differences or anomalies detected

6
00:00:24.750 --> 00:00:27.600
when using tensor flow data validation package.

7
00:00:27.630 --> 00:00:32.550
Any difference between test set and schema is called an anomaly.

8
00:00:32.550 --> 00:00:37.070
The thing that we have to compare is the test sets that this takes with our schema.

9
00:00:37.770 --> 00:00:44.250
So in the first free cell let's define a variable called anomalies and said that to be equal to DV dot

10
00:00:44.340 --> 00:00:49.780
validate statistics in this function validated statistics takes two arguments.

11
00:00:49.890 --> 00:00:57.390
Our statistics that we generated based on our test set for example and our schema as a second argument.

12
00:00:57.480 --> 00:01:03.880
So let's write statistics is equal to test stats that we generated in the previous video.

13
00:01:03.890 --> 00:01:11.040
And for the second argument provide our scheme and now this function will compare our test set and our

14
00:01:11.150 --> 00:01:18.390
dataset or our schema in the deck all anomalies or differences between those two to make it more user

15
00:01:18.390 --> 00:01:20.980
friendly than the flow data validation.

16
00:01:21.000 --> 00:01:25.620
Developers have created a function called display anomalies.

17
00:01:25.620 --> 00:01:31.400
Let's use that to display anomalies if any detected in our test set right.

18
00:01:31.410 --> 00:01:39.610
T of DV dot display anomalies and provide the anomalies that you generated as you can see we don't have

19
00:01:39.730 --> 00:01:41.760
any numbers in the test set.

20
00:01:41.770 --> 00:01:43.890
How cool is this library.

21
00:01:43.900 --> 00:01:50.230
This was great so far but you and I don't have any experience with cases that are normally appeared

22
00:01:50.260 --> 00:01:51.770
in the data set for example.

23
00:01:51.940 --> 00:01:57.090
So let's generate some anomalies in the rest of this video before we do that.

24
00:01:57.110 --> 00:02:01.630
Let's go through some common anomalies detected in the dataset.

25
00:02:01.670 --> 00:02:07.730
For example if you have a value lower than 10 and you've got an input larger in that that this is going

26
00:02:07.730 --> 00:02:12.350
to be your message or if you expect an end but got the string.

27
00:02:12.380 --> 00:02:14.570
This is going to be your anomaly.

28
00:02:14.570 --> 00:02:22.040
Now let's drop a column and see how DV handles that to start with our second part of this video.

29
00:02:22.100 --> 00:02:24.410
Let's create a copy of the test set.

30
00:02:24.470 --> 00:02:31.950
So we don't have to perform any changes on the original one let's add the new code so as we discussed

31
00:02:31.980 --> 00:02:36.480
before our suit column is our target column that we want to predict.

32
00:02:36.510 --> 00:02:41.670
And since that is the case we shouldn't be expecting it in our test set for example.

33
00:02:41.670 --> 00:02:43.470
So let's drop it.

34
00:02:43.530 --> 00:02:48.800
Write test copy out the drop and provide the column name suit.

35
00:02:48.840 --> 00:02:52.460
In the second argument is our X's said that to be one.

36
00:02:52.650 --> 00:02:57.320
And lastly set in place is equal to true at this point.

37
00:02:57.330 --> 00:03:04.050
We have the test set without the suit column so let's check how DV handles that problem.

38
00:03:04.190 --> 00:03:11.820
To start with our check generates statistics based on our test set copy let's define test set copy stats

39
00:03:12.030 --> 00:03:16.470
is equal to DV that generate statistics from data frame.

40
00:03:16.740 --> 00:03:20.120
But now for the data frame provide test set copy.

41
00:03:20.410 --> 00:03:28.390
Execute the cell and now that we have our statistics let us generate anomalies define anomalies new

42
00:03:28.750 --> 00:03:35.710
is equal to T of the v dot validate statistics for the first argument provide our newly created statistics

43
00:03:36.100 --> 00:03:44.970
so let's copy our test set copy stats and for the second argument provide those schema and lastly let's

44
00:03:44.970 --> 00:03:47.710
display our anomalies right.

45
00:03:47.810 --> 00:03:56.480
T of DV the display anomalies and provide anomalies new and now we have totally different report saying

46
00:03:56.480 --> 00:03:58.460
that our column is dropped.

47
00:03:58.520 --> 00:04:00.280
The column is completely missing.

48
00:04:00.380 --> 00:04:07.050
As you can see t of DV successfully detected the change that we made in the next video we are going

49
00:04:07.050 --> 00:04:11.990
to improve our schema to be able to handle this situation for now.

50
00:04:12.120 --> 00:04:17.250
If you have any questions or comments please post them in the comments section otherwise I'll see in

51
00:04:17.250 --> 00:04:18.030
the next tutorial.
