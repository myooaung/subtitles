WEBVTT
1
00:00:00.300 --> 00:00:05.120
All right we're now going to move on from celebrities and come down to earth a little and look at something

2
00:00:05.160 --> 00:00:06.600
good Jason.

3
00:00:06.690 --> 00:00:08.050
Now if you haven't seen it before.

4
00:00:08.070 --> 00:00:13.070
Jason stands for javascript object notation even that's called javascript in the name.

5
00:00:13.080 --> 00:00:17.210
It's not actually specific to the language javascript in any way.

6
00:00:17.280 --> 00:00:24.150
It was developed to be able to pass information between websites or between pages on Web sites but it's

7
00:00:24.150 --> 00:00:30.220
grown really to become one of the standard ways of passing information around the web.

8
00:00:30.570 --> 00:00:38.430
So Jason and SML are really the two most commonly used ways of passing information from one program

9
00:00:38.430 --> 00:00:39.520
to another.

10
00:00:40.170 --> 00:00:42.060
So Jason basically looks like this.

11
00:00:42.090 --> 00:00:45.720
It's surrounded by those cuddie brackets we're so familiar with.

12
00:00:45.930 --> 00:00:48.980
And then this is a bit like an array.

13
00:00:49.290 --> 00:00:51.700
We've got an employees object here.

14
00:00:51.900 --> 00:00:59.280
And then that's essentially an array of first names and last names so we can extract the information

15
00:00:59.280 --> 00:00:59.550
here.

16
00:00:59.560 --> 00:01:05.160
And basically we put a bunch of employees and we can get their first names and last names so all Jason

17
00:01:05.160 --> 00:01:10.320
is is a way of setting out data that can be processed by our programming language.

18
00:01:10.320 --> 00:01:15.380
In this case Java to allow us to get the information and then do something with it.

19
00:01:15.390 --> 00:01:22.500
The reason that Jason is so important is because API is that is application programming interfaces are

20
00:01:22.530 --> 00:01:25.120
great ways to add features to your apps.

21
00:01:25.380 --> 00:01:29.850
So if you want to make a weather app for example as we're going to be doing in the next lecture you

22
00:01:29.980 --> 00:01:32.040
would need to get some weather information.

23
00:01:32.040 --> 00:01:36.300
Now one way to do that would be to set up your own weather company and set up weather stations all around

24
00:01:36.300 --> 00:01:37.390
the world.

25
00:01:37.410 --> 00:01:43.530
More straightforward though would be to use a preexisting system and there are lots of API is available

26
00:01:43.560 --> 00:01:45.920
completely free for you to use.

27
00:01:45.970 --> 00:01:50.580
We're going to be using one called open weather map dot org because it meets the requirements and it's

28
00:01:50.580 --> 00:01:51.750
free to use.

29
00:01:51.810 --> 00:01:53.990
It does say here that you need to sign up for an API key.

30
00:01:54.030 --> 00:01:59.460
They do that if you want to but I've actually found that a very low usage we can use it without an API

31
00:01:59.500 --> 00:02:00.880
key at all.

32
00:02:01.060 --> 00:02:03.380
API is of course aren't just about whether.

33
00:02:03.540 --> 00:02:09.050
Pretty much all the big major services like Google Maps Facebook Twitter almost anything that you could

34
00:02:09.060 --> 00:02:14.640
want to plug into with your app will have an API that you can use to being able to work with API.

35
00:02:14.670 --> 00:02:17.880
And Jason is extremely valuable.

36
00:02:17.940 --> 00:02:20.690
Before we go over to Android studio make.

37
00:02:20.720 --> 00:02:27.350
Let's just have a quick look and see what the weather data looks like on open weather map.

38
00:02:27.400 --> 00:02:34.100
Talk and here this is one of the reasons that we're going to be using this system because it allows

39
00:02:34.100 --> 00:02:39.610
us very flexibly to just put in a city name and then get the weather for that city.

40
00:02:39.620 --> 00:02:46.250
So if for example we go to the Web site API to open weather map dot org slash data slash 2.5 slash weather

41
00:02:46.370 --> 00:02:47.660
and then question mark.

42
00:02:47.660 --> 00:02:55.260
Q It was London that will give us in IP form the weather in London right now.

43
00:02:56.360 --> 00:03:00.440
Not particularly inspiring but it is the precise dates that we need.

44
00:03:00.450 --> 00:03:04.740
And then we can extract that and put it into our.

45
00:03:05.020 --> 00:03:07.370
So you might be guessing what the first challenge is going to be.

46
00:03:07.660 --> 00:03:14.650
Very simply I want you to use the code that we've used a few times now to download the contents of this

47
00:03:14.760 --> 00:03:15.780
u r l.

48
00:03:16.080 --> 00:03:18.010
You don't need to process them or anything yet.

49
00:03:18.010 --> 00:03:19.380
I'll show you how to do that later on.

50
00:03:19.600 --> 00:03:25.150
But just use the code that we've had so far which now should be reasonably solidly in your head at least.

51
00:03:25.150 --> 00:03:31.290
Hopefully it will be after after this exercise to download the contents of this within your app.

52
00:03:31.300 --> 00:03:39.490
Go for it.

53
00:03:39.490 --> 00:03:40.270
All right.

54
00:03:40.640 --> 00:03:41.790
OK.

55
00:03:42.220 --> 00:03:52.200
I'm going to as usual start with a new project and we'll call this Jason Dema

56
00:03:54.940 --> 00:04:00.490
all the usual settings nothing strange or different here.

57
00:04:01.720 --> 00:04:02.550
And here we go.

58
00:04:02.590 --> 00:04:08.110
We're not interested in the design of this one we're going to do everything in mind activity dog Java

59
00:04:08.350 --> 00:04:09.260
as before.

60
00:04:12.470 --> 00:04:17.060
So let's start without download task.

61
00:04:17.480 --> 00:04:22.970
It's a public class we call it the same as before.

62
00:04:22.970 --> 00:04:23.820
Download task.

63
00:04:23.840 --> 00:04:25.010
And it extends

64
00:04:28.400 --> 00:04:31.610
a sync task.

65
00:04:31.610 --> 00:04:36.590
By the way when you're writing code like this it's a great idea to just talk through what you're doing

66
00:04:36.950 --> 00:04:38.880
even though you might feel like a crazy person.

67
00:04:38.900 --> 00:04:42.560
It's a really good idea to just remind yourself what exactly is I think just doing.

68
00:04:42.650 --> 00:04:47.860
What are these parameters that we're about to put in etc. rather than just mindlessly repeating the

69
00:04:47.880 --> 00:04:49.670
code that you've learnt before.

70
00:04:50.330 --> 00:04:56.180
So async task allows us to run a task on the background thread which is a great idea if we're doing

71
00:04:56.180 --> 00:05:04.410
something that might take a long time like downloading some web content we're going to pass a class

72
00:05:04.470 --> 00:05:06.660
A string.

73
00:05:06.660 --> 00:05:15.260
We don't need to do anything whilst the task is in progress and we want to return a string as well.

74
00:05:19.810 --> 00:05:28.210
That should give us an era where it is and that error is that we're missing the do in backgrounded method

75
00:05:32.440 --> 00:05:36.300
so we'll just get where studio to put it in for us.

76
00:05:36.890 --> 00:05:37.370
OK.

77
00:05:37.520 --> 00:05:41.560
So the dogs we're going to rename to you or else

78
00:05:44.410 --> 00:05:49.570
and then just as before we'll create an empty string to store out results

79
00:05:54.830 --> 00:05:59.540
we'll create a u r l called u r l

80
00:06:05.190 --> 00:06:16.790
store r u r l and we'll create a t p u r l connection called u r l connection which initially will be

81
00:06:16.790 --> 00:06:17.590
empty.

82
00:06:17.620 --> 00:06:34.300
Now then we'll create you well as a new U R L from the U R L that we're passing to the method which

83
00:06:34.300 --> 00:06:37.450
is going to be the first one in var Oaks.

84
00:06:37.480 --> 00:06:40.780
So you are elss error that could fail.

85
00:06:40.900 --> 00:06:43.180
If it's not a valid u r l.

86
00:06:43.180 --> 00:06:46.210
So we need to surround it with try and catch

87
00:06:52.170 --> 00:07:03.660
and then we're going to set up a u r l connection using u r l dot open connection and to make sure that

88
00:07:03.660 --> 00:07:05.750
that's the right type we need to cast it.

89
00:07:05.760 --> 00:07:08.570
H t t p u r l connection.

90
00:07:11.320 --> 00:07:12.500
Could fail as well.

91
00:07:13.940 --> 00:07:21.160
Say going at the catch clause to try catch up.

92
00:07:21.470 --> 00:07:23.180
Then we create how input stream

93
00:07:27.100 --> 00:07:29.200
called in.

94
00:07:29.560 --> 00:07:35.780
We get that from you RL connection don't get input stream.

95
00:07:36.850 --> 00:07:38.840
Then we create our input stream.

96
00:07:38.860 --> 00:07:39.370
Rita

97
00:07:42.760 --> 00:07:50.480
called Rita which has a new input stream reader from our input stream.

98
00:07:50.630 --> 00:07:51.110
I n

99
00:07:55.750 --> 00:07:56.170
then

100
00:07:59.790 --> 00:08:05.610
we create our data variable which we're going to use to read the contents of our reader.

101
00:08:06.770 --> 00:08:16.250
So I read it don't read and then we create a while loop which will run as long as data is not equal

102
00:08:16.250 --> 00:08:17.170
to a minus one

103
00:08:21.790 --> 00:08:28.800
and that's each time going to create a current character

104
00:08:32.500 --> 00:08:40.130
which we're going to get from casting data to a character Job.

105
00:08:41.900 --> 00:08:46.990
Then we'll take result and append the current character to it.

106
00:08:50.590 --> 00:08:51.260
Whoops.

107
00:08:52.690 --> 00:08:55.580
Using plus not exclamation mark.

108
00:08:55.660 --> 00:08:59.880
And finally we'll take data.

109
00:09:02.440 --> 00:09:04.930
And get it to read the next character

110
00:09:08.050 --> 00:09:09.330
that we get.

111
00:09:09.700 --> 00:09:17.700
And then when we're finished all that's what we're 10 results.

112
00:09:18.070 --> 00:09:23.170
Now I'm going to shake this up very slightly and show you another way that we can work with results

113
00:09:23.890 --> 00:09:28.960
rather than passing it back to the main thread and then getting the main thread to work with it.

114
00:09:29.260 --> 00:09:36.670
And that is to use a different method called on post.

115
00:09:36.970 --> 00:09:42.870
Execute.

116
00:09:42.900 --> 00:09:43.700
There it is.

117
00:09:43.700 --> 00:09:52.910
So we get all the defaults set up and essentially what this method is is a method that is called when

118
00:09:53.420 --> 00:09:53.810
the

119
00:09:56.740 --> 00:10:04.840
download Saurin when they do in background method has completed and it will be passed the whatever we

120
00:10:04.840 --> 00:10:07.790
return from the DO IN BACKGROUND method so hopefully the results

121
00:10:10.860 --> 00:10:17.250
and difference between the on post execute method and they do in that method is that they do in Bakra

122
00:10:17.250 --> 00:10:19.690
method can't interact with the UI at all.

123
00:10:19.830 --> 00:10:24.840
So I don't know if you've experimented with this but if you try and update a label for example in the

124
00:10:24.840 --> 00:10:29.950
do in background method it won't work because that should only be done in the UI thread.

125
00:10:30.030 --> 00:10:33.330
The main thread all in on post.

126
00:10:33.340 --> 00:10:36.500
Execute.

127
00:10:36.640 --> 00:10:38.070
We could update the UI.

128
00:10:38.140 --> 00:10:41.310
We don't actually need to or we're going to do is log.

129
00:10:41.950 --> 00:10:42.130
I

130
00:10:47.310 --> 00:10:49.500
website content and result

131
00:10:54.980 --> 00:11:00.580
and that's who got an error there because it refers to a string as s.

132
00:11:00.980 --> 00:11:05.040
I think I'll call that result just to keep everything the same

133
00:11:08.020 --> 00:11:08.660
OK.

134
00:11:09.050 --> 00:11:13.540
So now all we need to do is call our download task method.

135
00:11:16.180 --> 00:11:25.510
In uncreate and we'll do that in the usual way using download task tasks to create our new task.

136
00:11:25.510 --> 00:11:28.080
And this is a new download task.

137
00:11:30.760 --> 00:11:35.950
And then we'll run it using task to execute.

138
00:11:36.100 --> 00:11:37.360
And then I think in my

139
00:11:42.110 --> 00:11:45.640
clipboard I've still got the you are every we need.

140
00:11:45.650 --> 00:11:51.500
And this time we don't need to display the result or log it here because it's already logged within

141
00:11:51.740 --> 00:11:59.300
the do in background sorted within the async task download task extension right then.

142
00:11:59.330 --> 00:12:04.790
So let's give that a shot just a note we haven't done anything new yet.

143
00:12:04.810 --> 00:12:07.160
We haven't actually processed the Jason data.

144
00:12:07.210 --> 00:12:13.540
All we've done is got the contents of this u r l which is something that we have done before but now

145
00:12:13.570 --> 00:12:15.200
we should be pretty much expert at it.

146
00:12:15.490 --> 00:12:20.130
And we should hopefully understand where all of these individual bits are doing.

147
00:12:20.470 --> 00:12:34.480
And just before we run it let's not forget to put a request in the manifest so users permission Android

148
00:12:34.480 --> 00:12:43.340
permission for internet.

149
00:12:43.350 --> 00:12:43.790
All right.

150
00:12:43.790 --> 00:12:44.900
Here we go.

151
00:12:45.750 --> 00:12:47.000
And there it is.

152
00:12:47.000 --> 00:12:51.210
There's our contents are coordinates London weather etc etc..

153
00:12:51.270 --> 00:12:52.010
Fantastic.

154
00:12:52.140 --> 00:12:53.760
So that's part's done.

155
00:12:54.000 --> 00:12:59.590
So let's see how we process this information.

156
00:12:59.730 --> 00:13:05.760
So we're going to be interested in is this weather part here we are not particularly interested in the

157
00:13:05.760 --> 00:13:09.390
coordinates of the location we're going to be interested in the weather parts.

158
00:13:09.400 --> 00:13:11.940
So first of all how do we extract that.

159
00:13:12.560 --> 00:13:15.870
Well our first step

160
00:13:19.220 --> 00:13:28.460
is to convert this which is currently just a string into actual Jason data and we can do that in Java

161
00:13:28.520 --> 00:13:31.300
using J-Zone object

162
00:13:34.010 --> 00:13:40.900
which creates a Jason object for us from a string which I'll call Jay object.

163
00:13:41.370 --> 00:13:43.960
Well let's call it J-Zone object.

164
00:13:45.270 --> 00:13:54.850
And this is going to be a new Jason object created from the result string.

165
00:13:54.880 --> 00:14:01.330
Now that of course might well fail if the result string is empty for example or if this is malformed

166
00:14:01.350 --> 00:14:02.240
Jason.

167
00:14:02.440 --> 00:14:07.450
So if there's a problem with this Jason then it won't be able to convert it into adjacent objects so

168
00:14:08.380 --> 00:14:10.510
you can imagine what we're going to have to do with that.

169
00:14:10.510 --> 00:14:15.420
Surround it with try and catch that we get.

170
00:14:15.770 --> 00:14:21.650
So we're catching the possibility that this Jason object is his bat essentially

171
00:14:24.660 --> 00:14:33.240
say once we've got our Jason objects we can then extract particular parts from it say we wanted just

172
00:14:33.240 --> 00:14:34.980
this weather part here.

173
00:14:38.540 --> 00:14:40.330
We can take our Jason objects

174
00:14:43.280 --> 00:14:45.830
and we can get a string from its

175
00:14:49.120 --> 00:14:54.850
And the string that we want to get has a name of whether.

176
00:14:55.060 --> 00:15:02.970
So that will then extract the wet part of the J-Zone object.

177
00:15:02.980 --> 00:15:07.130
So then let's try logging that instead of logging the whole thing.

178
00:15:10.040 --> 00:15:12.500
So it will change this to weather content.

179
00:15:15.510 --> 00:15:23.270
And let's give it a name.

180
00:15:23.320 --> 00:15:27.900
So this is going to be a string and we'll call it weather info.

181
00:15:36.690 --> 00:15:37.850
OK.

182
00:15:38.540 --> 00:15:42.270
So now we get a fairly similar result to this but we don't have the coordinates part.

183
00:15:42.290 --> 00:15:48.930
We'll only have the weather part so should start with ID and then have main description etc.

184
00:15:51.750 --> 00:15:53.170
and just one that's compiling.

185
00:15:53.190 --> 00:15:58.050
It's worth mentioning why this is better than what we were doing in the previous videos because this

186
00:15:58.050 --> 00:16:03.150
is a particular structure that this API has created for us.

187
00:16:03.180 --> 00:16:08.520
So it's very unlikely that the API are just going to change the structure and break our app whereas

188
00:16:08.940 --> 00:16:16.120
the posh 24 Web site have no reason not to change their HD now.

189
00:16:16.230 --> 00:16:21.990
And if they did change the image to them that would break our app so much better to use API rather than

190
00:16:22.260 --> 00:16:25.540
direct scraping from the web if you possibly can.

191
00:16:26.370 --> 00:16:28.840
But knowing how to use both is very useful.

192
00:16:30.160 --> 00:16:37.390
I can't say if we can find our code

193
00:16:40.880 --> 00:16:42.550
there it is wonderful.

194
00:16:42.550 --> 00:16:47.540
So as I said it starts with ID and then gets each part here.

195
00:16:48.060 --> 00:16:55.260
So now we have a new challenge we need to extract the individual content from each of these.

196
00:16:55.530 --> 00:17:01.340
So notice that what we've got here is a summary of mini Jameson's.

197
00:17:01.460 --> 00:17:08.900
So we've got here an idea 12:55 amain of rain and the description of proximity shower rain and an icon

198
00:17:08.930 --> 00:17:10.170
of 0 9 D.

199
00:17:10.430 --> 00:17:23.060
Then we've got a similar bunch of content but with drizzle so idea of three 10 main of drizzle description

200
00:17:23.570 --> 00:17:26.140
light intensity drizzle rain.

201
00:17:26.360 --> 00:17:31.760
So we need to find a way to loop through all of that to get that information.

202
00:17:32.600 --> 00:17:36.980
So as as usual with programming there's a number of different ways we could do it but I'm going to do

203
00:17:36.980 --> 00:17:45.170
it in the way that I think is simplest and that is by initially taking our weather info which is this

204
00:17:45.170 --> 00:17:49.970
whole long string here and converting it into a JSM array.

205
00:17:50.120 --> 00:17:54.210
So we do that using Jasen array.

206
00:17:54.560 --> 00:17:57.670
I'll call it a long array.

207
00:17:57.750 --> 00:18:03.700
And this is a new Jason array from weather info.

208
00:18:06.570 --> 00:18:07.170
OK.

209
00:18:07.430 --> 00:18:12.780
The reason I can do that here is because this is set up as an array.

210
00:18:12.950 --> 00:18:17.550
We've got an initial object here which is our first object in the array.

211
00:18:17.720 --> 00:18:22.330
And then we've got a second object etc that might not be possible depending on the structure of your

212
00:18:22.380 --> 00:18:29.630
adjacent but if it looks like this is just a collection of objects without any hierarchies or different

213
00:18:29.630 --> 00:18:34.300
sections or anything like that then you can use Jason array.

214
00:18:34.370 --> 00:18:38.960
And once you've got an array we can just loop through it so we can use a for loop.

215
00:18:39.500 --> 00:18:48.260
We'll have an AI which is initially 0 will keep going as long as it is length less than the length of

216
00:18:48.260 --> 00:18:55.400
the array and obviously will increment by each time.

217
00:18:56.270 --> 00:19:05.390
And then within each of these we need to convert each of these to a separate Jaison object will have

218
00:19:05.420 --> 00:19:06.660
their own.

219
00:19:07.290 --> 00:19:16.220
So we'll create a new Jasen object of call it Jason part because it's a part of the whole Jason and

220
00:19:16.220 --> 00:19:24.800
we get that from the array which remember is an adjacent array an array of Jason's and get Jason objects

221
00:19:26.690 --> 00:19:35.180
and we want the object so we just looping through and this will convert each part in turn to a J-Zone

222
00:19:35.180 --> 00:19:35.950
object.

223
00:19:37.460 --> 00:19:40.750
And once we've got that we can do the same thing that we did up here.

224
00:19:40.790 --> 00:19:44.890
You get to the string to get the individual bits that we want.

225
00:19:44.960 --> 00:19:51.020
So we're not particularly interested in the ID but we are interested in the main whatever type of weather

226
00:19:51.020 --> 00:19:54.560
that is and we are interested in the description as well.

227
00:19:55.520 --> 00:19:59.810
So let's grab those for now we'll just lock them

228
00:20:03.170 --> 00:20:12.580
say Main is going to be J some part don't get string.

229
00:20:15.530 --> 00:20:26.130
Main And then the same thing for description.

230
00:20:32.390 --> 00:20:36.440
So J some part to get string description

231
00:20:41.810 --> 00:20:47.210
and select the wrong one that OK.

232
00:20:47.430 --> 00:20:52.560
So it's a slightly laborious process going through and finding all the bits that we want.

233
00:20:52.580 --> 00:20:59.880
But once that's been processed we should be able to access all of the different parts of the Jason that

234
00:20:59.880 --> 00:21:02.280
we're interested in which in our case is just

235
00:21:05.180 --> 00:21:10.910
the main and the description and there we go you can see we've got it there.

236
00:21:11.260 --> 00:21:13.970
So it seems to be returning slightly different things each time.

237
00:21:15.710 --> 00:21:18.050
That's probably just because this haze is coming in and out.

238
00:21:18.050 --> 00:21:20.650
So we've got rain is now moderate rain.

239
00:21:20.660 --> 00:21:27.260
Haze is haze and we've got thunderstorms this time proximity thunderstorm.

240
00:21:27.280 --> 00:21:27.830
So there we go.

241
00:21:27.830 --> 00:21:30.270
We've now extracted the contents.

242
00:21:31.180 --> 00:21:36.470
And this is very much a general purpose script that you can use to process any type of JSM.

243
00:21:36.700 --> 00:21:39.690
And then at this point you can do what you like with it really.

244
00:21:39.700 --> 00:21:44.830
Usually we might want to put it into an array list or something else so that we can access it later

245
00:21:44.830 --> 00:21:45.350
on.

246
00:21:45.790 --> 00:21:46.800
But that will do for now.

247
00:21:46.810 --> 00:21:50.890
We're now going to move on with this and create out what's the weather app.
