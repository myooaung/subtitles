1
00:00:00,600 --> 00:00:06,240
So now that you're an expert on variables Let's go and look at arrays which are an extremely important

2
00:00:06,240 --> 00:00:08,860
way of storing information.

3
00:00:09,090 --> 00:00:12,450
If by the way you're getting a little antsy because we haven't made an app in a while.

4
00:00:12,540 --> 00:00:17,220
Don't worry you've just got two videos to go and then we're going to go back to enjoy studio and use

5
00:00:17,460 --> 00:00:23,190
all of the Java knowledge that we've built so far to make a high or low a guessing game.

6
00:00:23,520 --> 00:00:24,850
So just hold on till then.

7
00:00:26,840 --> 00:00:29,000
And let's take a look at arrays first.

8
00:00:29,020 --> 00:00:35,100
So we met the array a few videos ago when we saw this string and then square brackets.

9
00:00:35,170 --> 00:00:38,320
But I kind of brushed over exactly what it was.

10
00:00:38,320 --> 00:00:40,520
So let's look in more detail now.

11
00:00:41,140 --> 00:00:44,780
Let's say we wanted to store a bunch of numbers.

12
00:00:44,950 --> 00:00:52,600
So if for example I wanted to store the first few prime numbers that is the numbers that have no factors

13
00:00:52,690 --> 00:00:58,700
other than 1 and themselves then this is going to be a bunch of integers whole numbers.

14
00:00:58,930 --> 00:01:00,400
So I'll call it it.

15
00:01:00,610 --> 00:01:06,030
And then I use the open and close square brackets to say the I want this to be an array of integers

16
00:01:07,570 --> 00:01:10,970
and then I'll call it prime numbers.

17
00:01:10,990 --> 00:01:14,280
So just in the same way as we did with variables.

18
00:01:14,410 --> 00:01:20,920
So this is saying we want to create an array of integers which is called prime numbers and then we use

19
00:01:20,920 --> 00:01:24,760
curly brackets to store all the numbers that we want to store.

20
00:01:25,120 --> 00:01:28,290
So the first prime number is two.

21
00:01:28,300 --> 00:01:29,720
Second one is three.

22
00:01:29,740 --> 00:01:35,110
The third one is 5 and 7 11 and we'll do one more.

23
00:01:35,260 --> 00:01:37,960
13.

24
00:01:38,020 --> 00:01:39,050
There we go.

25
00:01:39,640 --> 00:01:40,110
So that's it.

26
00:01:40,120 --> 00:01:44,860
That's our array of prime numbers and it is just a collection of.

27
00:01:44,920 --> 00:01:49,920
In this case integers 2 3 5 7 11 13.

28
00:01:50,070 --> 00:01:51,730
So that's all an array is.

29
00:01:51,910 --> 00:01:57,690
You can imagine that's a very useful construct for us if we wanted to have a list of images that we've

30
00:01:57,730 --> 00:02:01,990
downloaded from Instagram or a list of our users or anything like that.

31
00:02:02,080 --> 00:02:08,320
We can store it in an array and we can store as many different items as we need without having to create

32
00:02:08,320 --> 00:02:11,050
new variable names for each of them.

33
00:02:11,140 --> 00:02:17,750
So let's just print that to the console and see what the system does with it.

34
00:02:17,860 --> 00:02:21,220
So systems are out of print line

35
00:02:24,380 --> 00:02:25,210
prime numbers.

36
00:02:27,140 --> 00:02:29,380
I don't need a semi-colon there as well.

37
00:02:30,840 --> 00:02:35,190
It's easy to forget because it's a curly bracket.

38
00:02:36,300 --> 00:02:40,500
So we get a collection of strange symbols here which is very useful for us.

39
00:02:40,560 --> 00:02:44,580
This is because prime numbers is an array and not a string.

40
00:02:44,580 --> 00:02:48,570
And so trying to print as a line doesn't work.

41
00:02:48,570 --> 00:02:51,240
We get this strange object instead.

42
00:02:51,320 --> 00:02:56,050
And let's try and display the second member of the array.

43
00:02:56,340 --> 00:03:01,230
So prime numbers and then square brackets with two inside.

44
00:03:01,250 --> 00:03:07,710
Now see if you can anticipate what number that is going to display which of these numbers will get pushed

45
00:03:07,800 --> 00:03:09,100
to the console.

46
00:03:09,180 --> 00:03:10,550
It's the number five.

47
00:03:10,740 --> 00:03:14,250
That might be slightly unexpected for you if you haven't worked with a raise before.

48
00:03:14,520 --> 00:03:17,770
So it's actually the third number even though we've got two here.

49
00:03:18,090 --> 00:03:23,410
And that's because the first is considered to be the with number in the array.

50
00:03:23,430 --> 00:03:26,610
So if we put prime numbers and then square brackets

51
00:03:29,970 --> 00:03:36,460
and then Syrie then that will give us the two that we get.

52
00:03:36,640 --> 00:03:38,090
So those are two target.

53
00:03:38,440 --> 00:03:40,330
Zero is the number two.

54
00:03:40,360 --> 00:03:42,020
And then one would be three.

55
00:03:42,150 --> 00:03:43,030
Two would be five.

56
00:03:43,030 --> 00:03:44,810
Three would be seven etc..

57
00:03:44,980 --> 00:03:51,830
So that's a common starter error is to get confused as to which map of the array that you want.

58
00:03:52,120 --> 00:03:54,770
And forgetting that it starts at zero.

59
00:03:55,630 --> 00:03:59,240
So there are a few things that you can do with a raise.

60
00:03:59,260 --> 00:04:03,750
First one is to find out how many items are in your right.

61
00:04:04,120 --> 00:04:08,240
And we do that using dot length.

62
00:04:08,250 --> 00:04:12,300
But this time we don't use the parentheses.

63
00:04:12,370 --> 00:04:13,360
So let's take a look.

64
00:04:13,450 --> 00:04:17,490
And that should give us the number of items in the right which is 6.

65
00:04:17,650 --> 00:04:18,730
Excellent.

66
00:04:19,480 --> 00:04:26,320
Now the main limitation with arrays as we're using them here is that they can't be altered.

67
00:04:26,320 --> 00:04:31,690
That is have elements added to them or taken away from them after they've been created.

68
00:04:31,800 --> 00:04:37,090
Now that's probably a deal breaker for most of the arrays that we'd want to use but we're going to move

69
00:04:37,090 --> 00:04:45,810
quickly on from this primitive array type to the list type which does allow you to add and take away

70
00:04:46,210 --> 00:04:49,800
and do a lot of other things to your arrays.

71
00:04:49,870 --> 00:05:01,290
So in order to be able to use the list type we need to import a number of different frameworks and save

72
00:05:01,300 --> 00:05:05,260
us importing all them individually.

73
00:05:05,290 --> 00:05:13,060
We can use Java Util and then dot star and that will import a number of different frameworks that will

74
00:05:13,060 --> 00:05:18,030
give us all the methods that we need and the classes that we need to create lists.

75
00:05:18,730 --> 00:05:23,280
So let's get rid of the code that we have before and see how we create a list.

76
00:05:23,290 --> 00:05:26,220
It's slightly more complicated than creating an array.

77
00:05:26,650 --> 00:05:31,320
So now to create our list we write down the type.

78
00:05:31,320 --> 00:05:35,810
First of all which is a list and then the name.

79
00:05:35,810 --> 00:05:44,470
So I'm just going to call it a list with a lowercase L and this time we set it equal to a new array

80
00:05:44,470 --> 00:05:45,590
list.

81
00:05:48,550 --> 00:05:54,280
So this is a different way of creating an object instead of setting it equal to the value that we actually

82
00:05:54,280 --> 00:05:55,010
want.

83
00:05:55,030 --> 00:06:00,180
We just create the type that we're going to use so we're going to use an array list.

84
00:06:00,310 --> 00:06:03,640
There are various other lists types but we'll stick with this one for now because it does everything

85
00:06:03,700 --> 00:06:04,450
we need.

86
00:06:04,570 --> 00:06:11,050
So we're just creating a new array list and this construct is something that we'll see again and again

87
00:06:11,050 --> 00:06:14,740
later in the course when you're creating variables of certain types.

88
00:06:14,860 --> 00:06:18,520
You can use it with strings and other variables that we've seen before as well.

89
00:06:20,390 --> 00:06:28,640
And then to add items to our list we use the Add method so the list at.

90
00:06:28,970 --> 00:06:38,270
And if we wanted to add the first item in our prime numbers list then we would add 2 and then we do

91
00:06:38,270 --> 00:06:40,060
the same three

92
00:06:43,920 --> 00:06:46,540
and the next one is a 5.

93
00:06:47,070 --> 00:06:48,150
I'll stop there.

94
00:06:48,180 --> 00:06:51,470
Feel free to add some more if you like but those are the first three prime numbers.

95
00:06:51,480 --> 00:06:52,380
Felty.

96
00:06:53,010 --> 00:07:00,050
And then if we wanted to print one of those to the console which you system start out of print line

97
00:07:00,540 --> 00:07:04,460
and this time we'd use list dot get.

98
00:07:04,890 --> 00:07:08,140
And then we give the number of the item that we want.

99
00:07:08,160 --> 00:07:11,090
So a quick challenge for you if we wanted three.

100
00:07:11,340 --> 00:07:12,970
What number would we use here.

101
00:07:15,400 --> 00:07:19,520
I hope you said one because this would be zero.

102
00:07:19,530 --> 00:07:20,920
This is one this is 2.

103
00:07:20,970 --> 00:07:22,200
Cetera et cetera.

104
00:07:22,620 --> 00:07:28,670
So a list to get and then one will give us the second item in the list.

105
00:07:28,910 --> 00:07:32,430
So that should print three every day.

106
00:07:33,570 --> 00:07:38,190
So now that we've got this slightly more complicated set up we can do much more powerful things so we

107
00:07:38,190 --> 00:07:39,840
can add items.

108
00:07:39,840 --> 00:07:41,460
Of course we can take them away as well.

109
00:07:42,680 --> 00:07:46,410
To do that we use list don't remove.

110
00:07:46,880 --> 00:07:50,480
And then we give the index of the number that we want to remove.

111
00:07:50,480 --> 00:07:52,930
So let's say we want to remove this three here.

112
00:07:53,000 --> 00:07:56,550
This has an index of 1 0 or 1 and 2.

113
00:07:56,630 --> 00:07:58,520
So we use list don't remove.

114
00:07:58,580 --> 00:08:04,740
And then one and just have a quick think what is this going to output now.

115
00:08:08,100 --> 00:08:09,890
Let's run it and see if you are right.

116
00:08:10,170 --> 00:08:11,570
The answer is 5.

117
00:08:11,790 --> 00:08:15,530
Because this array has now lost the middle item.

118
00:08:15,840 --> 00:08:18,160
So it's only a 2 and a 5.

119
00:08:18,390 --> 00:08:24,620
So the item with index number 1 is the 5.

120
00:08:25,250 --> 00:08:31,850
And just to prove that to you I'll show you how we can actually display the whole of this list rather

121
00:08:31,850 --> 00:08:33,810
than just one particular item.

122
00:08:33,860 --> 00:08:36,420
We use a function that we have seen before.

123
00:08:36,950 --> 00:08:39,020
That's two string.

124
00:08:39,020 --> 00:08:45,620
So that just converts our list to a string so that we can put it in the console and see what's in there.

125
00:08:45,620 --> 00:08:46,500
So there we go.

126
00:08:46,850 --> 00:08:49,680
So the items in the list are now just a two and a 5.

127
00:08:51,720 --> 00:08:52,440
All right.

128
00:08:52,530 --> 00:09:01,440
Quick challenge then can you create a list of 3 say countries and then remove an item from that list

129
00:09:01,770 --> 00:09:04,040
and add a different one in.

130
00:09:04,140 --> 00:09:10,440
So create a list of three countries remove one added in and then display it in the console.

131
00:09:10,440 --> 00:09:10,970
Good luck.

132
00:09:17,700 --> 00:09:28,380
All right well let's create a list so I'll call it countries and that's going to be a new array list

133
00:09:31,270 --> 00:09:32,130
just like that.

134
00:09:32,320 --> 00:09:35,180
And then we'll add our countries one by one.

135
00:09:38,800 --> 00:09:43,220
Countries not at all put England

136
00:09:46,310 --> 00:09:48,340
and then let's add another one.

137
00:09:48,630 --> 00:09:55,590
So are people local say Scotland and then

138
00:09:58,770 --> 00:09:59,400
Wales

139
00:10:03,520 --> 00:10:07,080
OK I think while I'm here I'm just going to check that that's all worked OK.

140
00:10:07,090 --> 00:10:14,560
It's just him out duck print line and then countries

141
00:10:17,600 --> 00:10:24,010
to string a case let's just make sure that created it.

142
00:10:24,070 --> 00:10:26,300
England Scotland Wales fantastic.

143
00:10:26,370 --> 00:10:34,270
So let's remove Wales so we do that using countries remove.

144
00:10:34,670 --> 00:10:37,420
And then I want to remove That's the zeroth one.

145
00:10:37,550 --> 00:10:39,090
That's the first one that's the second one.

146
00:10:39,090 --> 00:10:42,370
So now do we need to.

147
00:10:42,470 --> 00:10:54,470
And then finally countries had Let's put Ireland there as a state like.

148
00:10:54,540 --> 00:10:54,970
All right.

149
00:10:55,020 --> 00:10:55,570
There we go.

150
00:10:55,650 --> 00:10:57,090
So England Scotland and Ireland.

151
00:10:57,120 --> 00:10:58,370
So we've created our right.

152
00:10:58,380 --> 00:11:03,100
We've removed an item from it and we've added one in its place.

153
00:11:03,150 --> 00:11:09,710
The last thing I want to show you in this video is maps which work in similar ways to lists.

154
00:11:09,720 --> 00:11:13,030
But something is crucially different about them.

155
00:11:13,050 --> 00:11:14,490
Let's find out what it is.

156
00:11:15,190 --> 00:11:22,830
Let's get rid of our work on lists so maps we've already imported everything that we need for that because

157
00:11:22,840 --> 00:11:27,360
we've been ported all at the Java utility frameworks.

158
00:11:27,600 --> 00:11:32,370
We create a map in exactly the same way as we create a list.

159
00:11:33,030 --> 00:11:36,300
So I'm going to call it math in lowercase.

160
00:11:36,820 --> 00:11:48,310
And so it's a new something but it's not an array list it's a hash map so recreate that like that.

161
00:11:48,440 --> 00:11:54,890
And now we put an item into this map and we do that using it.

162
00:11:54,900 --> 00:12:02,470
And now you'll see the difference between the hash map and an array or a list.

163
00:12:02,620 --> 00:12:05,500
So I'm going to add for example Father

164
00:12:09,590 --> 00:12:10,010
Rob

165
00:12:12,730 --> 00:12:16,570
say I just get my syntax right.

166
00:12:16,570 --> 00:12:17,260
There we go.

167
00:12:17,500 --> 00:12:23,200
So what this does is it maps farver to the value Rob.

168
00:12:23,260 --> 00:12:34,780
So whereas arrays are lists that go 0 1 2 3 4 5 on the index here we can map a certain index to a certain

169
00:12:34,780 --> 00:12:37,070
value.

170
00:12:37,100 --> 00:12:51,590
So now if we take system how it's print line if I want to print a particular value I would use map don't

171
00:12:51,770 --> 00:13:04,000
get and then the key which is father so let's just make sure that that returns roll up as we would expect.

172
00:13:03,990 --> 00:13:11,520
So you can see what we're doing we're linking father to rob and then I can imagine what that

173
00:13:14,820 --> 00:13:15,570
next might be.

174
00:13:15,570 --> 00:13:25,800
So mother in this case will have as Keston and we can again use that to string function if we want to

175
00:13:25,800 --> 00:13:27,190
look at the whole of Emap

176
00:13:30,230 --> 00:13:34,050
So map talked to string.

177
00:13:34,050 --> 00:13:35,120
Let's take a look.

178
00:13:35,570 --> 00:13:44,320
So we've got mother is Caston and father is Rob and again we can use remove.

179
00:13:44,510 --> 00:13:51,650
Not that I would ever want to of course but if we wanted to remove an item for this from this map we

180
00:13:51,650 --> 00:13:59,390
would just use the key just like that and then that would remove that item and we're left with just

181
00:13:59,690 --> 00:14:01,960
the first item.

182
00:14:02,220 --> 00:14:02,990
And finally

183
00:14:05,740 --> 00:14:12,740
as with arrays we can use map dot size to tell us the number of items in the map.

184
00:14:12,740 --> 00:14:14,360
So in this case just one.

185
00:14:14,900 --> 00:14:19,840
So that's as far as we're going to go with arrays lists and maps for the moment.

186
00:14:20,090 --> 00:14:27,500
But later on we'll see how to do things like loop through an array or a list or a map find specific

187
00:14:27,500 --> 00:14:29,500
values and a lot more.

188
00:14:29,930 --> 00:14:35,840
Now we're getting close to being able to build our higher or lower app but we need one more important

189
00:14:35,840 --> 00:14:41,570
programming construct and that is the if statement and we'll look at that and how it works in Java in

190
00:14:41,570 --> 00:14:42,370
the next video.
