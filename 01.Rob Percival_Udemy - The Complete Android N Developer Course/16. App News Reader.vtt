WEBVTT
1
00:00:00.510 --> 00:00:05.990
So congratulations on making it to the end of section 7 of The Complete Android and develop a course

2
00:00:06.510 --> 00:00:11.820
now that we've covered both web views and ask you our data storage we're going to put that knowledge

3
00:00:11.850 --> 00:00:18.900
in action making a completely off line newsreader app and the app looks like this.

4
00:00:18.900 --> 00:00:22.170
So we're downloading some news items.

5
00:00:22.170 --> 00:00:23.580
I'll show you where we're going to get those from.

6
00:00:23.580 --> 00:00:24.510
In a minute.

7
00:00:24.510 --> 00:00:32.190
And then when we tap any of those news items and then when we tap one of those news items it displays

8
00:00:33.330 --> 00:00:40.350
the Web site and we display the HDMI content completely off line.

9
00:00:40.620 --> 00:00:41.490
So that's the idea.

10
00:00:41.550 --> 00:00:46.370
The app that we're going to build could really be used with pretty much any news Web site but we're

11
00:00:46.380 --> 00:00:54.570
going to be using a site called Hacker News which is a site that I read quite frequently and I'd thoroughly

12
00:00:54.570 --> 00:01:01.380
recommend you as a developer checking it out as a lot of interesting stuff on there but particularly

13
00:01:01.380 --> 00:01:10.700
usefully it has a really nice API which is something that we know how to work with now.

14
00:01:11.920 --> 00:01:17.640
So if you just do a quick google for hack and use API you should get all the details that you need.

15
00:01:19.430 --> 00:01:19.980
All right.

16
00:01:19.980 --> 00:01:21.440
That's pretty much it.

17
00:01:21.510 --> 00:01:27.340
So back over 200 studio we're recreating the hack and use of line news reader app.

18
00:01:27.510 --> 00:01:29.200
Best of luck for you guys.

19
00:01:38.000 --> 00:01:50.280
All right well I'll kick off by starting a new project for my newsreader app usual settings.

20
00:01:50.470 --> 00:01:52.290
Empty activity to begin with.

21
00:01:52.780 --> 00:01:54.080
And don't forget.

22
00:01:54.690 --> 00:02:03.400
Well that's lighting up looking a bit more detail at the Hacker News API and work out where we need

23
00:02:03.400 --> 00:02:04.170
to begin.

24
00:02:04.360 --> 00:02:10.490
So you can see we can access an item via its Id had a u r l like that

25
00:02:13.670 --> 00:02:19.710
where we need to start with a list of all the recent articles.

26
00:02:20.160 --> 00:02:25.230
So let's see if we can scroll down and find one of those.

27
00:02:26.150 --> 00:02:27.060
And here we go.

28
00:02:27.140 --> 00:02:32.860
So this link here gives us the top stories that's open that in a new tab.

29
00:02:33.650 --> 00:02:40.320
And just take a look and there we go it's not interesting but a set of ideas gives us the top stories

30
00:02:41.360 --> 00:02:52.980
and then once we've got those items to get the details of the items if we scroll up here we go it looks

31
00:02:52.980 --> 00:02:56.190
like this link should do the job for us.

32
00:02:56.730 --> 00:03:00.130
So that has all the details of the item that we need.

33
00:03:00.270 --> 00:03:05.730
Specifically the title and you are all going to be the ones that we're really interested in.

34
00:03:05.730 --> 00:03:06.310
All right.

35
00:03:06.540 --> 00:03:10.100
So now we've got the basic idea hopefully of how the app is going to work.

36
00:03:10.110 --> 00:03:15.210
Let's start off by creating our list view.

37
00:03:17.340 --> 00:03:19.940
For our titles.

38
00:03:20.310 --> 00:03:24.290
So get rid of the text fee and down in containers.

39
00:03:25.980 --> 00:03:34.720
Drag in our list view and for this one I'm going to get a full screen so I'm going to get rid of

40
00:03:38.400 --> 00:03:45.910
any padding in the flexible layout there any matter of personal taste.

41
00:03:45.920 --> 00:03:49.950
But I think Elfen looks better to have that going right to the edge of the screen.

42
00:03:53.180 --> 00:03:53.780
OK.

43
00:03:53.790 --> 00:04:00.960
And then we'll add an ID of the.

44
00:04:00.990 --> 00:04:06.700
All right back over to main activity and I'll just run the app in the background again.

45
00:04:09.730 --> 00:04:14.050
And then we'll do our usual process to create a list view

46
00:04:19.630 --> 00:04:23.760
so we're going to find it by its Id also.

47
00:04:23.980 --> 00:04:28.230
Id dot list view.

48
00:04:28.870 --> 00:04:33.700
And of course we'll cast that as a list vib

49
00:04:36.870 --> 00:04:46.370
and then we'll need an array list of strings for our titles.

50
00:04:51.250 --> 00:04:52.160
OK.

51
00:04:52.570 --> 00:05:01.350
Just the one string so ill defined it up there as I'm sure we'll need to use it in several locations.

52
00:05:01.410 --> 00:05:03.450
Similarly with our array adapter

53
00:05:09.990 --> 00:05:13.640
I'll define it and then set it up here.

54
00:05:14.070 --> 00:05:17.780
So it's going to be a new array of

55
00:05:22.420 --> 00:05:24.000
using this I.

56
00:05:24.070 --> 00:05:39.010
Main activity an android don't lay out a simple list item one has the structure and then titles as the

57
00:05:39.010 --> 00:05:47.790
linked list and then we take a list view and we set that array adapter to it.

58
00:05:47.860 --> 00:05:53.960
All right next we're going to set up the process of downloading the content.

59
00:05:53.960 --> 00:06:00.160
So before I forget I'm going to add the permission for Internet

60
00:06:04.390 --> 00:06:13.210
to manifest and then we're going to download the contents of this you are all here.

61
00:06:13.580 --> 00:06:15.670
So I would just copy that.

62
00:06:15.710 --> 00:06:17.310
I will need it surely.

63
00:06:17.960 --> 00:06:20.300
So hopefully you can remember how to do this.

64
00:06:20.450 --> 00:06:24.210
We first set up our download task.

65
00:06:24.860 --> 00:06:34.960
So this is going to be a public class go down a task which is going to extend async task

66
00:06:39.780 --> 00:06:40.500
with a string

67
00:06:43.910 --> 00:06:47.770
we're not going to return anything.

68
00:06:48.500 --> 00:06:58.950
And then a second string and then we'll get Andreas Judaea to implement the one required method doing

69
00:06:58.950 --> 00:06:59.430
background

70
00:07:03.470 --> 00:07:06.910
and then we'll write a code to get the contents of this you are.

71
00:07:07.130 --> 00:07:14.340
So for that we need to set up a string which will call result which will initially be an empty string

72
00:07:15.910 --> 00:07:21.920
we'll have a u r l l which we'll use later on.

73
00:07:22.400 --> 00:07:26.240
And then we have our HTP u r l connection

74
00:07:29.110 --> 00:07:34.620
called u r l connection which initially will be not

75
00:07:37.730 --> 00:07:39.470
then we're going to take R U R L

76
00:07:44.350 --> 00:07:52.330
which we can t create using the U R L method from this variable here.

77
00:07:52.380 --> 00:07:53.120
Strings

78
00:07:55.790 --> 00:08:02.710
0 and that will be the U R L that's passed to the download task.

79
00:08:02.730 --> 00:08:06.260
Klaus and of course that might fail.

80
00:08:06.300 --> 00:08:10.790
So we need to surround that with try and capture.

81
00:08:12.450 --> 00:08:15.070
Assuming that works we'll take our u r l connection

82
00:08:18.570 --> 00:08:28.880
and we'll open a connection from R U R L as before we need to cast that c and c t p u r l connection.

83
00:08:32.380 --> 00:08:39.370
And there are some specific ways in which that could fail so we can add catch clauses for those specifically

84
00:08:39.370 --> 00:08:40.510
the IO exception that

85
00:08:43.830 --> 00:08:45.600
then we take our input stream

86
00:08:48.930 --> 00:08:59.110
call it I N and we use your connection and we get an input stream from it.

87
00:09:01.110 --> 00:09:10.650
Then we take our input stream read up and we create an input stream reader code reader which is going

88
00:09:10.650 --> 00:09:15.990
to be any input stream reader based on our input stream in

89
00:09:20.380 --> 00:09:31.870
next we create a data integer which we're going to use to loop through the reader and we keep going

90
00:09:31.870 --> 00:09:36.680
as long as data is not equal t minus one

91
00:09:40.740 --> 00:09:41.500
and we go.

92
00:09:41.520 --> 00:09:48.350
And then we create a character called current to represent the current character that's being read.

93
00:09:49.070 --> 00:09:59.010
And this we're going to take our data variable and cast it to a character then we take our result string

94
00:09:59.100 --> 00:10:02.210
and append the current character to it.

95
00:10:06.460 --> 00:10:16.700
And then finally in this part we update our data variable to read the next character.

96
00:10:17.320 --> 00:10:24.570
And then finally for now we're just going to log our old content

97
00:10:27.630 --> 00:10:33.190
and log the result of that process and then to run the task.

98
00:10:33.280 --> 00:10:42.720
We get back over to our own create method and we create a download task which we call task which is

99
00:10:42.720 --> 00:10:53.880
going to be a new download task and then we're going to take our task and execute it with the R L that

100
00:10:53.880 --> 00:11:01.710
I copied earlier which should give us all the ID numbers of the top stories and we'll just surround

101
00:11:01.710 --> 00:11:03.060
that with a try

102
00:11:06.140 --> 00:11:07.260
and catch as well

103
00:11:13.980 --> 00:11:19.770
just in case we have any problems and we'll just do a print stack trace.

104
00:11:19.770 --> 00:11:21.130
If that does go wrong.

105
00:11:24.130 --> 00:11:25.220
All right.

106
00:11:25.480 --> 00:11:27.900
So let's give this a try.

107
00:11:29.190 --> 00:11:33.790
Hopefully that brings back to you the process of downloading content from the web a little bit more

108
00:11:33.790 --> 00:11:36.950
arduous than we want maybe but it gets the job done.

109
00:11:37.330 --> 00:11:40.710
Let's take a look and there it is.

110
00:11:40.760 --> 00:11:45.830
So you are real content and those are lovely numbers.

111
00:11:46.950 --> 00:11:48.700
Displayed for us.

112
00:11:49.440 --> 00:11:49.800
Right.

113
00:11:49.830 --> 00:11:56.400
So next task is to take those numbers and convert them into a form that we can use to extract the individual

114
00:11:56.430 --> 00:11:59.990
ideas so that should be pretty straightforward.

115
00:12:00.780 --> 00:12:07.940
We just need to create a Jason array call Jason All right.

116
00:12:08.910 --> 00:12:20.130
And this is going to be a new Jason array based on the results stream and we'll need to add a catch

117
00:12:20.130 --> 00:12:25.440
clause for that because it's possible that something could go wrong with the Jason process.

118
00:12:25.440 --> 00:12:25.820
All right.

119
00:12:25.830 --> 00:12:27.570
And then we're just going to loop through the.

120
00:12:27.580 --> 00:12:29.240
JASON All right.

121
00:12:29.350 --> 00:12:31.050
So will do a simple flip

122
00:12:33.940 --> 00:12:38.380
with an eye counter variable that starts at zero.

123
00:12:38.480 --> 00:12:46.640
Keeps on going as long as it's less than the length of the Jason.

124
00:12:46.650 --> 00:12:47.540
Right.

125
00:12:48.030 --> 00:12:50.200
And it increments by 1 each time

126
00:12:53.290 --> 00:13:11.130
and then temporarily or just log chase on item and Jason Auray get string or.

127
00:13:11.580 --> 00:13:17.560
All right so that should now separate out all the numbers in

128
00:13:21.170 --> 00:13:27.170
the adjacent array and then we can see that all returned at the bottom that wonderful.

129
00:13:27.170 --> 00:13:31.510
Now there's probably more there than we need.

130
00:13:31.650 --> 00:13:45.010
So I'm going to limit this to 20 items by setting number of items to be 20 and then we're going to go

131
00:13:45.100 --> 00:13:50.070
up see number of items in our list.

132
00:13:50.090 --> 00:13:54.610
There's a chance though of course that for some reason the API won't return 20 items and we don't want

133
00:13:54.620 --> 00:13:57.220
our apt to crash in that situation.

134
00:13:57.260 --> 00:13:59.060
So we'll do a check to see if

135
00:14:02.560 --> 00:14:08.430
Jason array length is less than 20

136
00:14:12.360 --> 00:14:15.440
then number of items will equal.

137
00:14:15.720 --> 00:14:19.690
Jason Auray does length.

138
00:14:19.750 --> 00:14:20.820
All right.

139
00:14:20.820 --> 00:14:25.220
So I'm going to get rid of these locks for now.

140
00:14:25.380 --> 00:14:33.840
Now that we've got all the ID numbers of the items that we're interested in we're going to load these

141
00:14:33.900 --> 00:14:39.770
you are else here to do that we'll need this you know.

142
00:14:41.010 --> 00:14:43.860
So let's create a u r l from it.

143
00:14:46.440 --> 00:14:48.250
It's going to be a new R L

144
00:14:52.340 --> 00:14:54.510
based on that u r l that.

145
00:14:54.680 --> 00:15:01.480
But of course we want to replace the ID here with the article ID that we want.

146
00:15:01.990 --> 00:15:05.780
So let's create a string called Article ID

147
00:15:08.510 --> 00:15:15.880
which is going to be Jason Auray don't get string I.

148
00:15:16.000 --> 00:15:18.300
And then we can use that in here.

149
00:15:24.700 --> 00:15:33.340
To get the details of our current article and because we're still in our try catch leap we've got the

150
00:15:33.340 --> 00:15:35.170
necessary catches there.

151
00:15:35.650 --> 00:15:44.980
All right so now we set up everything again so your connection is HTP oil connection and we get that

152
00:15:44.980 --> 00:15:48.250
from you or else that open connection.

153
00:15:50.180 --> 00:15:52.210
We set up our input stream again.

154
00:15:53.090 --> 00:15:57.300
So your connection don't get input stream.

155
00:15:57.470 --> 00:15:58.670
We set up our Rita

156
00:16:05.670 --> 00:16:13.790
being the input stream read up based on our input stream.

157
00:16:14.240 --> 00:16:24.930
We set up our data variable we read the content and we're going to have a string which I'll call article

158
00:16:24.940 --> 00:16:32.690
info which will initially be empty and then we'll loop through using the same process as before.

159
00:16:32.700 --> 00:16:34.860
So as long as data is not minus one

160
00:16:41.580 --> 00:16:53.940
will create a character called Current which is cast to a character from the data variable and then

161
00:16:54.240 --> 00:17:01.760
optical info is going to be appended with the current character.

162
00:17:02.980 --> 00:17:14.460
And then we carry on the process using data is read dot read right so that should give us the article

163
00:17:14.460 --> 00:17:14.990
content.

164
00:17:14.990 --> 00:17:17.400
So now again time to do a quick log

165
00:17:24.490 --> 00:17:25.810
article in.

166
00:17:29.580 --> 00:17:33.220
Article in.

167
00:17:33.250 --> 00:17:34.150
All right.

168
00:17:34.550 --> 00:17:35.450
So let's give that a try.

169
00:17:35.450 --> 00:17:43.380
Now we should get the article info i.e. something that looks like this for all of the articles where

170
00:17:43.440 --> 00:17:44.300
we've got that of course.

171
00:17:44.300 --> 00:17:47.340
We're going to extract the necessary information that we need.

172
00:17:47.400 --> 00:17:52.990
So specifically title and you are able and we might save the idea as well.

173
00:17:58.730 --> 00:18:01.110
So let's have a look.

174
00:18:01.190 --> 00:18:11.100
Scroll down and there were gay excellence so that's all the data that we need in nice Jason format.

175
00:18:11.100 --> 00:18:13.770
So now let's extract what we need.

176
00:18:15.530 --> 00:18:19.520
This time all we've got is a little bit more complicated than just a list of numbers.

177
00:18:19.520 --> 00:18:27.770
So we're going to need a Jason object which I'll call Jason object and this is going to be a new an

178
00:18:28.240 --> 00:18:29.540
object from

179
00:18:32.220 --> 00:18:33.670
article info.

180
00:18:34.530 --> 00:18:43.740
And as I mentioned the two bits that we're particularly interested in are title and you are el.

181
00:18:43.760 --> 00:18:45.980
So let's for now just print both if that is

182
00:18:48.970 --> 00:18:54.130
create an article title stream.

183
00:18:54.270 --> 00:18:56.470
It's going to be chasing objects don't get

184
00:18:58.980 --> 00:19:02.130
string title

185
00:19:05.010 --> 00:19:15.500
and article you are l which is going to be traced on objects to get string you are well.

186
00:19:15.510 --> 00:19:21.140
So we're checking title and you are out against the names here's a yep you are l and title

187
00:19:27.590 --> 00:19:33.260
so we could jump straight on to the next one but I think it's always a good idea.

188
00:19:36.360 --> 00:19:38.360
To print things as you go.

189
00:19:41.530 --> 00:19:45.410
It doesn't take long and it could save you a lot of time.

190
00:19:45.430 --> 00:19:50.140
Further on down the line while that's compiling it's a good idea to think about what is going to come

191
00:19:50.140 --> 00:19:50.860
next.

192
00:19:51.100 --> 00:19:56.230
So now that we've got the article title and the article you are Arel the final bit of data from the

193
00:19:56.230 --> 00:20:01.300
web that we're going to need to get is the article content which will get of course from the article

194
00:20:01.420 --> 00:20:02.730
you are out.

195
00:20:03.250 --> 00:20:07.430
So let's just make sure that info

196
00:20:10.210 --> 00:20:11.990
data is working.

197
00:20:12.640 --> 00:20:14.920
And now we've got an interesting result here.

198
00:20:16.050 --> 00:20:19.800
That's for one of our articles.

199
00:20:19.830 --> 00:20:23.760
It would appear that there is no value for the r l.

200
00:20:23.760 --> 00:20:29.270
So let's have a quick bit of investigation and see what's going on there.

201
00:20:29.530 --> 00:20:30.420
So I'm going to log

202
00:20:33.540 --> 00:20:36.630
the Jason object itself

203
00:20:40.160 --> 00:20:43.660
and rerun the app and see if that's the case.

204
00:20:45.630 --> 00:20:52.800
And if it is as looks likely we'll need to put in some manual checks for a u r l not existing which

205
00:20:52.800 --> 00:20:53.860
is a good idea anyway.

206
00:20:53.870 --> 00:21:00.330
Notice that because we're inside I try catch sleep it won't crash our app if there's no u r l but it

207
00:21:00.330 --> 00:21:02.130
will cause an exception.

208
00:21:02.130 --> 00:21:03.770
So none of this will run.

209
00:21:03.780 --> 00:21:09.300
So if there's a single article with either no title or no you r l or no ID or something that it will

210
00:21:09.300 --> 00:21:15.480
stop our app from getting any information until the article is no longer in the top 20.

211
00:21:15.570 --> 00:21:21.420
So you can see we're getting the info fine here and it is extracting the data that we need for most

212
00:21:21.420 --> 00:21:22.490
of them.

213
00:21:22.530 --> 00:21:24.110
Let's have a look at the last one.

214
00:21:24.180 --> 00:21:25.140
So this one here

215
00:21:27.960 --> 00:21:33.070
you can see it's got a lot more children than most.

216
00:21:33.810 --> 00:21:37.380
And a big long title as well.

217
00:21:37.380 --> 00:21:39.700
And it doesn't appear to have a u r l.

218
00:21:40.160 --> 00:21:40.890
OK.

219
00:21:41.190 --> 00:21:47.760
So that's always a good lesson to learn not to trust the API that you're working with but always provide

220
00:21:47.760 --> 00:21:51.660
you with the data that you are expecting.

221
00:21:51.660 --> 00:21:54.530
So as always there's a number of ways to check for this.

222
00:21:54.750 --> 00:21:59.170
I'm going to show you one called is no.

223
00:22:00.180 --> 00:22:01.410
So we can use if

224
00:22:04.550 --> 00:22:08.090
Jason object dot is no.

225
00:22:08.360 --> 00:22:21.880
And then title and that will be called if either the title doesn't exist or if the title is no.

226
00:22:22.290 --> 00:22:25.680
Now we want to check for that not to be the case.

227
00:22:25.740 --> 00:22:28.420
So I'll put an exclamation mark in front of it.

228
00:22:28.440 --> 00:22:33.800
So we're now checking that the title exists and is not no.

229
00:22:34.620 --> 00:22:39.630
So I'll do a similar check for the.

230
00:22:39.870 --> 00:22:40.490
You are L

231
00:22:46.860 --> 00:22:47.980
and then we'll move

232
00:22:52.770 --> 00:22:57.720
these lines of code into that statement.

233
00:22:57.780 --> 00:23:06.060
So now if we check again we should get all of the news items that have a title and you are and the one

234
00:23:06.060 --> 00:23:08.590
that doesn't have a u r l just won't be returned.

235
00:23:13.780 --> 00:23:14.950
So let's have a look.

236
00:23:19.460 --> 00:23:27.190
So now we've got all our info from our Top 20 news items.

237
00:23:27.200 --> 00:23:28.440
Excellent.

238
00:23:29.270 --> 00:23:36.630
So as we've said the final thing is to get the article data itself.

239
00:23:36.740 --> 00:23:43.820
Now this time I want to use exactly the same code as what we've got here.

240
00:23:44.510 --> 00:23:46.240
So I'm going to copy that down.

241
00:23:49.590 --> 00:23:51.920
And just change what I need.

242
00:23:53.160 --> 00:24:02.670
So we're going to create a new U R L from article u r l and then we're going to go through that process

243
00:24:02.670 --> 00:24:07.780
of getting the content and I'll call this article content.

244
00:24:11.060 --> 00:24:15.200
And finally then we'll loquat we need

245
00:24:18.380 --> 00:24:24.940
which will be the article content.

246
00:24:25.190 --> 00:24:26.800
So let's just have a quick look.

247
00:24:29.260 --> 00:24:38.820
We should now have the HMO of a lot of different pages in our logs.

248
00:24:38.810 --> 00:24:39.930
Let's take a look.

249
00:24:42.730 --> 00:24:45.760
And you can see here that it is getting the data

250
00:24:49.210 --> 00:24:53.420
but it's just too much data to be displayed in the logs.

251
00:24:53.440 --> 00:25:03.270
So instead what Aldie is go straight to saving this data in our ICU database that the database will

252
00:25:03.270 --> 00:25:05.740
need to be accessed from a number of places.

253
00:25:06.180 --> 00:25:08.640
So we'll define it up here.

254
00:25:13.710 --> 00:25:25.890
And I'll call it articles DP and then we'll set it up down here before the download task to articles

255
00:25:25.990 --> 00:25:28.440
D-B we can use this

256
00:25:31.230 --> 00:25:33.030
open or create database

257
00:25:35.450 --> 00:25:44.600
and we'll call it articles are going to be private mode and no.

258
00:25:45.950 --> 00:25:52.480
And then if it's the first time that we've run it we need to create a table in it for our data.

259
00:25:52.770 --> 00:26:04.170
So we use articles DP exec as well and then we go with the rescue and we want to create a table if it

260
00:26:04.170 --> 00:26:10.930
doesn't exist and the table will be called particles

261
00:26:14.530 --> 00:26:20.080
and we're going to have an I.D. as we have in all our security tables which will be an integer

262
00:26:23.610 --> 00:26:27.060
and it will also be the primary key.

263
00:26:28.170 --> 00:26:30.120
We'll save the article ID

264
00:26:32.760 --> 00:26:45.030
which will be an integer we'll save the title which will be a voucher and we'll save the content

265
00:26:48.050 --> 00:26:54.870
which will also be used for child.

266
00:26:54.880 --> 00:27:03.450
OK so now we have the table let's add articles to it.

267
00:27:04.330 --> 00:27:12.610
So this time I'll need to create my SU as a string and then we'll add the variables in afterwards.

268
00:27:12.610 --> 00:27:16.170
So we're going to insert into the articles table

269
00:27:19.280 --> 00:27:22.700
and we'll leave the ID to be created automatically.

270
00:27:22.820 --> 00:27:29.500
The article ID we're going to add ourselves as well as the title and the content.

271
00:27:30.880 --> 00:27:40.450
And we've got values 1 2 3 I'll just put in extra space there.

272
00:27:40.570 --> 00:27:41.840
Spread them out.

273
00:27:43.530 --> 00:27:44.350
There we go.

274
00:27:44.730 --> 00:27:56.120
And then we take our ask you a light segment class and set up a statement

275
00:27:58.830 --> 00:28:06.700
and we're going to do that via articles D-B dot compile statement and the statement is of course rescue

276
00:28:06.700 --> 00:28:07.580
l string.

277
00:28:07.580 --> 00:28:09.350
I've just created.

278
00:28:10.070 --> 00:28:21.380
And then we take out statements and we bind a string through it and the first one is that one there.

279
00:28:21.380 --> 00:28:28.520
So that's the article ID which we've got saved in article ID.

280
00:28:30.060 --> 00:28:36.310
Then number two is going to be the title which we've got saved.

281
00:28:36.320 --> 00:28:41.290
And in fact it's not title it's article title

282
00:28:46.230 --> 00:28:54.950
and number three is the content which we've got saved in article content that

283
00:28:58.870 --> 00:28:59.890
grates.

284
00:28:59.940 --> 00:29:04.400
And then we take out statement and we execute it.

285
00:29:05.880 --> 00:29:06.570
OK.

286
00:29:06.950 --> 00:29:08.310
So that's all looking good.

287
00:29:08.540 --> 00:29:13.190
Bear in mind that this is just going to add it to the table.

288
00:29:13.310 --> 00:29:20.240
So I'm going to add an instruction here to clear the table before we add any new data because we don't

289
00:29:20.240 --> 00:29:22.930
want to adding the same thing over and over again.

290
00:29:23.470 --> 00:29:31.230
So articles don't D-B exec as well and then simply delete from articles.

291
00:29:31.680 --> 00:29:35.800
So that will clear everything and add new data in that.

292
00:29:35.990 --> 00:29:36.660
All right.

293
00:29:36.740 --> 00:29:38.020
So we're close.

294
00:29:38.210 --> 00:29:46.130
We just need to write some code to update the list view when we're ready to go.

295
00:29:46.250 --> 00:29:49.450
Now we're going to want to call that from the uncreate method.

296
00:29:49.490 --> 00:29:56.630
And also we're going to want to call it again when article downloading process has completed.

297
00:29:56.930 --> 00:30:02.100
So I'm going to define it as a method here.

298
00:30:03.490 --> 00:30:06.010
Call it update list view.

299
00:30:08.290 --> 00:30:15.670
So here we're going to want to get the data from the database and display the titles to the user.

300
00:30:16.390 --> 00:30:28.390
So let's start by creating a cursor see which we're going to get from a simple articles D-B query select

301
00:30:28.780 --> 00:30:33.120
everything from articles.

302
00:30:34.110 --> 00:30:40.340
Well I don't know that as well then we need to create our indexes.

303
00:30:41.350 --> 00:30:52.480
So we will have a content index which is going to be say don't get column index content

304
00:30:55.380 --> 00:30:57.480
and then title index

305
00:31:00.440 --> 00:31:03.740
which will be Sido get column index

306
00:31:08.480 --> 00:31:11.120
and then we're going to check to see if

307
00:31:14.680 --> 00:31:18.390
we have an initial value.

308
00:31:18.700 --> 00:31:31.180
If the database returns anything and if it does we'll clear our titles list and we'll also need a content

309
00:31:31.500 --> 00:31:37.860
array list to store our content.

310
00:31:37.890 --> 00:31:39.180
So let's just add that in

311
00:31:45.560 --> 00:31:47.320
every day.

312
00:31:48.380 --> 00:31:59.880
So we're clear the content list as well and then we'll do a do while loop and the thing that we want

313
00:31:59.880 --> 00:32:16.660
to do is add the current title to our titles array list so we get that with C. don't get string and

314
00:32:16.660 --> 00:32:24.020
then title index and then Same thing with content.

315
00:32:24.910 --> 00:32:37.320
So you don't get string content index and we keep doing that as long as we can go to the next item.

316
00:32:37.480 --> 00:32:41.290
So we don't move to next

317
00:32:44.160 --> 00:32:52.350
and then we just update the array adapter telling it that the data set has changed.

318
00:32:52.350 --> 00:32:57.150
Now we're going to want to run this from two locations.

319
00:32:57.150 --> 00:33:07.880
We'll update the list view there in the on create method and then we also want to do it down here.

320
00:33:07.880 --> 00:33:17.240
So we'll do that by using the on post execute method which you remember is run when the

321
00:33:20.330 --> 00:33:24.190
process in the download task is completed.

322
00:33:24.490 --> 00:33:28.120
And so here we'll just update the list.

323
00:33:29.180 --> 00:33:30.590
And here we go.

324
00:33:30.710 --> 00:33:36.110
Now that did take a fair while a few minutes on my simulator here should be much quicker on a real device

325
00:33:36.110 --> 00:33:39.100
now than we have with our titles which is great.

326
00:33:39.110 --> 00:33:43.420
Let's check and make sure that they are indeed stored permanently.

327
00:33:43.880 --> 00:33:49.580
So we'll just comment out the execute a task that

328
00:33:52.320 --> 00:33:54.050
and restart the app.

329
00:33:54.420 --> 00:33:58.580
And that should then save all of the titles.

330
00:33:58.710 --> 00:34:05.180
And of course all of the content is well within the app and there we go just to make absolutely sure

331
00:34:06.580 --> 00:34:11.490
we'll shut down the app load it up again.

332
00:34:15.080 --> 00:34:17.190
And all the data is there.

333
00:34:18.170 --> 00:34:18.620
Wonderful.

334
00:34:18.630 --> 00:34:24.530
So now all that remains is adding the second activity which would display the article itself for the

335
00:34:24.530 --> 00:34:25.530
user.

336
00:34:26.210 --> 00:34:32.950
So let's do that so file new activity

337
00:34:36.550 --> 00:34:42.780
and we'll just go for the usual empty activity I'll call this article activity

338
00:34:47.100 --> 00:34:47.730
and then

339
00:34:50.930 --> 00:34:52.950
we'll add in our Webby

340
00:35:00.040 --> 00:35:00.450
gay

341
00:35:04.270 --> 00:35:14.290
and we'll give it an idea of you and then we'll add in the code to set it up.

342
00:35:14.560 --> 00:35:22.870
So let's create our web you call it web you will be cast as a web view and we'll get it using find view

343
00:35:22.900 --> 00:35:25.900
by ID card or ID.

344
00:35:26.060 --> 00:35:34.840
Talk wepe then we'll add in the settings that I mentioned last time so get settings and then set javascript

345
00:35:34.900 --> 00:35:37.360
enabled to be true.

346
00:35:38.240 --> 00:35:52.730
And we'll also set the web the client has a new web client and then we need to know which item was tapped

347
00:35:52.730 --> 00:35:54.500
on to display it.

348
00:35:54.500 --> 00:36:04.660
So let's get back to main activity and then he in our list view will set an on item click listener

349
00:36:07.520 --> 00:36:18.750
with a new Adap.tv on item click listener and them as we are now hopefully familiar with we'll create

350
00:36:18.750 --> 00:36:30.420
an intent which will be a new intent with the context of application context.

351
00:36:32.120 --> 00:36:43.220
And we want to jump to Article activity class and we want to pass an extra.

352
00:36:44.330 --> 00:36:56.820
And this is going to be called content and we want to pass content dog get.

353
00:36:56.930 --> 00:37:02.520
And then the position that we're interested in is I which would be the one that the user.

354
00:37:02.760 --> 00:37:08.740
All right then we'll start that activity

355
00:37:12.240 --> 00:37:16.770
and then finally we can jump to Article activity.

356
00:37:16.770 --> 00:37:19.530
And then again we'll create an intense

357
00:37:23.030 --> 00:37:34.340
four which will use GET intent and then we'll use Wehby dot load data and then the stream is going to

358
00:37:34.340 --> 00:37:44.430
be content to get string extra And this term we want to get is content

359
00:37:49.040 --> 00:37:55.830
and then we just had the format so text Hachem L and the character encoding.

360
00:37:55.850 --> 00:37:57.980
So UTF 8

361
00:38:01.390 --> 00:38:06.490
hoops and that should be I-Slash.

362
00:38:06.690 --> 00:38:07.120
All right.

363
00:38:07.160 --> 00:38:08.320
Let's give it a try.

364
00:38:08.690 --> 00:38:16.700
So we should now be able to tap on those items and view the article within the app in that web view.

365
00:38:18.720 --> 00:38:19.610
Let's take a look.

366
00:38:20.100 --> 00:38:21.390
And there we go.

367
00:38:21.390 --> 00:38:25.360
So there's the article content displaying very nicely in our web view.

368
00:38:26.130 --> 00:38:33.810
Worth bearing in mind that it looks so nice because we're on line so it's getting the styles and images

369
00:38:33.810 --> 00:38:34.600
as well.

370
00:38:34.650 --> 00:38:40.470
If we were off line then we'd only be displaying the HVM else so we'd get the content but it wouldn't

371
00:38:40.710 --> 00:38:42.100
likely look as good.

372
00:38:42.330 --> 00:38:43.070
But there we go.

373
00:38:43.290 --> 00:38:44.400
That's what we were after.

374
00:38:44.910 --> 00:38:52.270
And that takes us to the end of section 7 of the complete Android and developer of course.

375
00:38:52.320 --> 00:38:59.400
So you are now hopefully confident and competent with using both shared preferences and as well databases

376
00:38:59.640 --> 00:39:07.300
to store your users data off line as well as becoming familiar with web views dialogs and menus.

377
00:39:07.320 --> 00:39:12.900
And of course having built two pretty big apps the news reader and our no taking app time to move on

378
00:39:12.900 --> 00:39:19.470
now and we're going to start building our first social app using self-hosted passus server and that

379
00:39:19.470 --> 00:39:20.740
is Instagram.

380
00:39:20.880 --> 00:39:23.210
And we'll be building that in the next section.

381
00:39:23.220 --> 00:39:24.050
I'll see you there.
