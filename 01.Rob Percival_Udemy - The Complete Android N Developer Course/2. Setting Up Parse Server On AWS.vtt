WEBVTT
1
00:00:00.300 --> 00:00:03.540
In this section we're going to build our first social app.

2
00:00:03.630 --> 00:00:09.750
And this is going to be a clone of the popular app Instagram where people can take and post images and

3
00:00:09.750 --> 00:00:13.740
then follow people that they like and view their photos.

4
00:00:13.740 --> 00:00:18.690
So we're going to replicate that core functionality and to do that we're going to need a server.

5
00:00:18.720 --> 00:00:25.110
So we're going to need a way to store user's data and photos somewhere on a central location so that

6
00:00:25.110 --> 00:00:32.970
we can share them between users and we're going to be using a platform called passive server which is

7
00:00:32.970 --> 00:00:41.100
an offshoot of Pasto home and allows you to host data like usernames passwords photos on your own servers.

8
00:00:41.490 --> 00:00:48.260
So it allows you to essentially have a database without needing to manage or code your own database.

9
00:00:48.270 --> 00:00:54.240
The great advantage of using past server over another solution such as firebase is that Passover is

10
00:00:54.240 --> 00:00:57.060
completely stored on your own server.

11
00:00:57.570 --> 00:01:02.880
So you're completely in control of your own data and can move it to another server if you like and you're

12
00:01:02.880 --> 00:01:04.840
not at risk of your app failing.

13
00:01:04.890 --> 00:01:10.860
If the company that you're using for data storage shuts down so per server you can run on any service

14
00:01:10.860 --> 00:01:15.110
provider you like including Heroku Google Cloud or Microsoft as you.

15
00:01:15.390 --> 00:01:21.810
But we're going to be using the most popular cloud service in the world which is AWOS or Amazon Web

16
00:01:21.810 --> 00:01:22.830
Services.

17
00:01:23.250 --> 00:01:28.920
And one of the big reasons we're using AWOS is because they offer a free tier to allow you to completely

18
00:01:28.920 --> 00:01:34.970
try out past server on AWOS for 12 months without paying anything at all.

19
00:01:34.980 --> 00:01:39.130
You also get 50 dollars of AWOS credit with this course.

20
00:01:39.190 --> 00:01:49.320
So enough preamble Let's get started go over to AWOS dot Amazon Dot Com and click sign into the console.

21
00:01:49.620 --> 00:01:53.830
If you don't have an Amazon account then you need to create one here.

22
00:01:54.030 --> 00:01:59.570
If you do then just log in with your Amazon username and password.

23
00:01:59.610 --> 00:02:04.760
So I'm going to log in with Rob at repairs of all the current UK and my password.

24
00:02:05.220 --> 00:02:12.990
And now we logged in we're going to jump to services and you can see the huge range of services that

25
00:02:13.020 --> 00:02:15.020
AWOS offers.

26
00:02:15.090 --> 00:02:21.060
We're going to go for two which is short for Elastic Compute generation number two.

27
00:02:21.360 --> 00:02:27.300
Essentially the elastic part of it means that it stretches to provide the resources that you need.

28
00:02:27.300 --> 00:02:32.940
So if you only need a very small amount of resources because you're just testing out a new app then

29
00:02:34.020 --> 00:02:36.600
you'll only be charged for those resources.

30
00:02:36.660 --> 00:02:41.630
And indeed if you're running them on the free tier you won't be charged anything at all.

31
00:02:41.640 --> 00:02:46.650
However if you do need more resources because you have started getting popular then you will get charged

32
00:02:46.650 --> 00:02:48.060
more for that.

33
00:02:48.060 --> 00:02:50.370
So the great thing is you only pay for what you use.

34
00:02:50.370 --> 00:02:56.250
But the flip side of that is to be careful and monitor your account just in case your app becomes more

35
00:02:56.250 --> 00:02:58.190
popular than you think it is.

36
00:02:58.860 --> 00:02:59.420
All right.

37
00:02:59.500 --> 00:03:07.080
So are we going to click launch instance to create a new AWOS instance which is essentially like a server

38
00:03:07.530 --> 00:03:09.730
for us to store our data on.

39
00:03:10.050 --> 00:03:15.830
And now we're going to go to AWOS marketplace and search for pass

40
00:03:18.680 --> 00:03:23.300
and we're going to use passus server powered by Piton army.

41
00:03:23.300 --> 00:03:27.090
You can see it's free to eligible to just select that.

42
00:03:27.230 --> 00:03:32.180
And this essentially makes the installation of POS server very easy.

43
00:03:32.180 --> 00:03:39.020
So make sure you choose the T2 micro which is Frita eligible.

44
00:03:39.290 --> 00:03:46.170
And then just click review and launch and then launch.

45
00:03:46.170 --> 00:03:54.740
And now we need to choose or create a key pair which we'll be using in a moment to access our AWOS instance.

46
00:03:54.740 --> 00:04:04.340
So I'm going to create a new keypad and I'm going to call this Instagram Android because I've already

47
00:04:04.340 --> 00:04:15.200
got an Instagram for my Iowa scores that I'm just going to download that and then launch instance and

48
00:04:15.200 --> 00:04:21.230
this will then set up everything that you need to use pass server with AWOS.

49
00:04:21.320 --> 00:04:25.160
You'll notice here that I'm on Firefox rather than Chrome.

50
00:04:25.160 --> 00:04:30.620
Now that's because we're now going to access E.W. instance and we're going to use a bit of software

51
00:04:30.650 --> 00:04:37.340
that works on Firefox but doesn't work on quite so I'd recommend using Firefox for this next step.

52
00:04:37.340 --> 00:04:42.970
I'm now going to click on the instance name to load up the dashboard for that instance.

53
00:04:43.400 --> 00:04:51.050
And what we need to do is find the application ID and client key which are stored and automatically

54
00:04:51.050 --> 00:04:56.480
generated when the pass server instance is set up.

55
00:04:56.480 --> 00:05:03.110
So to do that we're going to click connect and we're going to be connecting via something called S-sh

56
00:05:03.170 --> 00:05:12.130
or secure shell which essentially allows us to log into our AWOS instance and run commands on it.

57
00:05:12.140 --> 00:05:18.110
Now if you're familiar with S-sh you can use any S-sh client to do this and just follow those instructions.

58
00:05:18.690 --> 00:05:25.610
But I'm going to use the Java S-sh client and that's because it works directly with Firefox and doesn't

59
00:05:25.610 --> 00:05:31.340
require any installation so I think that's the simplest process unless you've got a client that you

60
00:05:31.340 --> 00:05:33.040
use already.

61
00:05:33.200 --> 00:05:40.280
Then we leave the public DNS username Kinane the same and we just have to give a key path.

62
00:05:40.320 --> 00:05:44.530
We need to give it the location of this Instagram Android key.

63
00:05:44.570 --> 00:05:46.550
I created a few moments ago.

64
00:05:47.060 --> 00:05:52.400
So if you're in Windows then you just enter see code on backslash and then whatever the location of

65
00:05:52.400 --> 00:05:54.200
that file is.

66
00:05:54.800 --> 00:06:03.890
So wherever you saved it if you're on a Mac then if you find the file and click on it then you can control

67
00:06:03.890 --> 00:06:08.780
click and click get info and that will tell you where it is.

68
00:06:08.840 --> 00:06:18.300
So this is uses Roper's of all desktop search for what slash uses with a capital U.

69
00:06:19.150 --> 00:06:24.020
And then Rob Percival desk top with a capital D.

70
00:06:24.730 --> 00:06:33.530
And then I'll just remind myself of the file name Instagram Android p m..

71
00:06:34.070 --> 00:06:35.120
There we go.

72
00:06:35.550 --> 00:06:43.510
And I'd recommend keeping that in the browser cache so you don't have to enter it every time and then

73
00:06:43.510 --> 00:06:49.180
click launch S-sh client and you'll likely see a couple of pop ups if you haven't done this before that

74
00:06:49.180 --> 00:06:51.430
require you to install the S-sh client.

75
00:06:51.430 --> 00:06:59.290
Just click OK and run through the process and then you should see something like this.

76
00:06:59.290 --> 00:07:03.400
So this means we're locked into our past server and all has gone well.

77
00:07:03.580 --> 00:07:08.920
If you don't see that the most likely issue is that the private key path is wrong.

78
00:07:09.010 --> 00:07:13.660
So just check that and make sure that you've definitely got that right and then launch the S-sh client

79
00:07:13.660 --> 00:07:15.400
again.

80
00:07:15.400 --> 00:07:22.680
All right so now we're logged into our AWOS instance we need to find out what the client key and app

81
00:07:22.690 --> 00:07:29.520
ID are so that we can enter them in our Android app and connect to our pass server.

82
00:07:30.820 --> 00:07:39.170
So to do that we need a couple of fairly simple S-sh commands and the first is CD for change directory

83
00:07:40.030 --> 00:07:47.190
and then we want to change directory to apps slash pass slash HD docs

84
00:07:49.910 --> 00:07:53.990
so that's where most of the past server files are stored.

85
00:07:54.560 --> 00:08:01.960
And then we're going to use a command called VI which is short for them which opens up a text editor

86
00:08:02.690 --> 00:08:07.370
and the file that we want to edit in this text that is our server.

87
00:08:07.510 --> 00:08:08.900
Dr. J.S.

88
00:08:12.100 --> 00:08:17.120
which is the file where the settings that we need have been stored.

89
00:08:17.260 --> 00:08:20.800
And again if all goes well you should see this.

90
00:08:20.830 --> 00:08:25.970
So this is all the data that you need to connect to your app.

91
00:08:26.010 --> 00:08:26.550
All right.

92
00:08:26.550 --> 00:08:29.660
So give yourself a slap on the back if you manage to do that.

93
00:08:29.700 --> 00:08:31.360
I'm going to leave that running for the moment.

94
00:08:31.620 --> 00:08:43.180
And then in the background I'm going to go to Android of course dot com slash POS project dot

95
00:08:46.480 --> 00:08:53.290
and this is essentially an android studio project which contains everything you need to get started

96
00:08:53.650 --> 00:09:03.070
with an app that connects to pass server and then when that's downloaded and expanded You should have

97
00:09:03.160 --> 00:09:04.380
a pass server.

98
00:09:04.400 --> 00:09:08.940
Start a project folder wherever you expanded the zip file.

99
00:09:08.980 --> 00:09:11.080
All right don't worry we're nearly there.

100
00:09:11.080 --> 00:09:21.790
We're now going to jump over to Android studio and open up new files file open and then for me it was

101
00:09:21.790 --> 00:09:29.250
in the desktop which is up here and there it is Tarth server started Project.

102
00:09:29.260 --> 00:09:36.490
So click OK and then this will open up just like any Android studio project just like all the other

103
00:09:36.490 --> 00:09:39.720
ones that you've downloaded from this course.

104
00:09:39.730 --> 00:09:40.400
Here we go.

105
00:09:40.450 --> 00:09:46.300
So just in the normal way click project and then we'll have a look in past.

106
00:09:46.320 --> 00:09:52.290
Start to project Java and you can see we've got two files here.

107
00:09:52.370 --> 00:09:56.820
The first is main activity which looks very similar to what we're used to.

108
00:09:56.870 --> 00:10:04.610
It's just got a little past line which sets of past analytics and then you'll see a second class starter

109
00:10:04.610 --> 00:10:11.660
or application which is what does the connection to our past server.

110
00:10:11.660 --> 00:10:17.270
So we're going to need three things an application ID a client key and a server which is essentially

111
00:10:17.270 --> 00:10:20.820
the address of our AWOS instance.

112
00:10:20.890 --> 00:10:23.470
So let's sort of the top application ID.

113
00:10:23.690 --> 00:10:33.140
So if we find the java app that we're using to connect to every instance and you can see here we've

114
00:10:33.140 --> 00:10:34.610
got the app.

115
00:10:34.640 --> 00:10:42.370
So just select it copy using Control-C and then paste.

116
00:10:42.380 --> 00:10:48.260
Be careful if you accidently include some of the double quotes to just delete those afterwards and then

117
00:10:48.530 --> 00:10:53.550
same with the client key which is the same as the master key here.

118
00:10:53.610 --> 00:10:58.280
So just copy that.

119
00:10:58.430 --> 00:11:01.320
And finally the server you are.

120
00:11:01.340 --> 00:11:08.100
Which is this big long one that and it does actually go into the next line for me.

121
00:11:08.140 --> 00:11:13.290
So make sure you get the whole thing including the past at the end.

122
00:11:15.710 --> 00:11:16.410
There we go.

123
00:11:16.700 --> 00:11:19.660
So now finally our set up process is at an end.

124
00:11:19.670 --> 00:11:21.610
You can see we've got a bit of code here.

125
00:11:21.710 --> 00:11:27.800
All it does is creates a new pass object and then saves it on the server.

126
00:11:27.800 --> 00:11:31.740
So we're going to be looking at that in more detail in the next video to see how that actually works.

127
00:11:31.880 --> 00:11:40.010
But for now let's just run a quick test to see if this app does what we want it to i.e. saves some data

128
00:11:40.010 --> 00:11:41.120
on the server.

129
00:11:41.640 --> 00:11:48.980
So it should save an example object with my number value of 2:59 and of my string value of Raupp and

130
00:11:48.980 --> 00:11:52.360
just before we run that there's one very quick thing we need to add.

131
00:11:52.430 --> 00:11:53.700
And don't forget this.

132
00:11:53.720 --> 00:11:55.580
Otherwise you'll get an error.

133
00:11:55.670 --> 00:12:02.550
We need to add a backslash on the and of pass there just like that.

134
00:12:03.650 --> 00:12:11.140
And now this with any luck we'll save our example object on our pass server on AWOS.

135
00:12:11.320 --> 00:12:21.640
You might be wondering how we will know whether that saved or not and we can do that pretty easily by

136
00:12:21.700 --> 00:12:25.580
pasting in the address that we had.

137
00:12:26.140 --> 00:12:36.670
And then just replace pass the end with apps and this if everything is working we'll bring up the past

138
00:12:36.730 --> 00:12:43.870
dashboard or data browser which will allow you to look at and edit if you want the data that's been

139
00:12:43.870 --> 00:12:46.550
saved on your server.

140
00:12:47.080 --> 00:12:52.660
So let's click on my bit NAMI past API and you can see here we go.

141
00:12:52.660 --> 00:12:59.190
So this is our past dashboard and currently we've got no data and no users.

142
00:12:59.200 --> 00:13:04.800
So going back over to Android studio should be running.

143
00:13:04.810 --> 00:13:10.210
So let's take a look an android monitor and you can see we've got past results successful.

144
00:13:10.240 --> 00:13:11.380
Excellent.

145
00:13:11.440 --> 00:13:13.210
Looking very promising.

146
00:13:13.210 --> 00:13:22.370
So now let's just go back over to our data browser or parse dashboard and I'm just going to refresh

147
00:13:22.370 --> 00:13:23.690
that.

148
00:13:23.690 --> 00:13:32.730
And we should with any luck see our example object saved in our data browser and there we go.

149
00:13:32.810 --> 00:13:41.780
You can see we've got an example object and it's got an object id automatically created and we've got

150
00:13:41.780 --> 00:13:49.400
Rob as my string and 2:59 has my number and we've also got a session and user created as well we're

151
00:13:49.400 --> 00:13:53.480
using the user objects later on.

152
00:13:54.290 --> 00:13:54.970
Excellent.

153
00:13:55.280 --> 00:14:00.280
So well-done if you managed to follow along with all of that what we've essentially done is set up past

154
00:14:00.270 --> 00:14:08.390
server on how AWOS instance which means we can save all sorts of user data images in the cloud and then

155
00:14:08.390 --> 00:14:15.890
sync them across devices with our apps in the next video then we'll go back over to Android studio and

156
00:14:15.980 --> 00:14:23.180
we'll see how this past object code works and see what else we can do with pass as well.

157
00:14:23.180 --> 00:14:24.240
I'll see you then.
