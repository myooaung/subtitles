WEBVTT
1
00:00:00.510 --> 00:00:06.540
In this last video before we make our app at the end of this section we're going to look at classes

2
00:00:06.570 --> 00:00:08.060
in a little bit more detail.

3
00:00:08.190 --> 00:00:14.310
So we've seen them popping up every now and again but we haven't really created our own and seen what

4
00:00:14.310 --> 00:00:15.610
they can do.

5
00:00:15.790 --> 00:00:17.000
Now they're very powerful things.

6
00:00:17.040 --> 00:00:21.540
So I'm going to show you what we can do with them in this video.

7
00:00:22.470 --> 00:00:34.260
So it's going to create a new program for us and we'll call it classes.

8
00:00:35.230 --> 00:00:35.850
OK.

9
00:00:36.230 --> 00:00:42.740
So as I've mentioned before a class is kind of a template or a blueprint for an object that we could

10
00:00:42.740 --> 00:00:45.190
create several times in our program.

11
00:00:45.200 --> 00:00:49.030
Now that's the sort of thing that doesn't make a lot of sense until we put it into context.

12
00:00:49.250 --> 00:00:54.350
So let's say for example we've got a game that we're programming and in this game there are several

13
00:00:54.350 --> 00:01:01.980
uses of the game that it might be useful to create a class called user notice.

14
00:01:02.030 --> 00:01:06.990
Classes generally have a capital letter at the beginning of them unlike variables.

15
00:01:07.580 --> 00:01:15.350
So we could create our User class and within this User class we might have some variables and we might

16
00:01:15.350 --> 00:01:19.690
have some methods that apply to the user class.

17
00:01:19.700 --> 00:01:29.180
So for example we might have a variable SCORE which represents the score that that particular user has

18
00:01:29.180 --> 00:01:31.800
got so far in the game.

19
00:01:31.830 --> 00:01:37.050
How would we access that outside of the class.

20
00:01:37.730 --> 00:01:41.000
Well first of all we'd have to create a particular user.

21
00:01:41.480 --> 00:01:48.400
So we would do that by first defining the type of the object that we're creating which is a user.

22
00:01:48.620 --> 00:01:52.940
So it's not a string or an int or any of the other types that we've seen so far.

23
00:01:52.940 --> 00:01:53.810
It's a user.

24
00:01:53.900 --> 00:01:56.060
And we might call the user Bob.

25
00:01:56.420 --> 00:02:00.180
So this is a particular user Bob that we're creating here.

26
00:02:00.710 --> 00:02:04.390
And he is going to be a new user.

27
00:02:05.270 --> 00:02:10.240
So we've seen this kind of construct as well but now we're using it with our very own code.

28
00:02:10.310 --> 00:02:15.770
So we've created a class of user which has a score variable within it.

29
00:02:16.040 --> 00:02:25.010
And then we've created a specific instance or object with that type and that's bulb and that is a type

30
00:02:25.100 --> 00:02:27.100
of user.

31
00:02:27.220 --> 00:02:39.340
So then if we want to set Bob's school then we would say Bob don't score is equal say and then whatever

32
00:02:40.270 --> 00:02:47.980
10 let's say then if we wanted to display that or use it somewhere we just are in the same way.

33
00:02:48.040 --> 00:03:03.400
So system out print helÃ¨ne Bob taught school and then we run that and we get a score of 10.

34
00:03:03.600 --> 00:03:06.830
So you can see what we're doing is quite similar to what we've done before.

35
00:03:06.960 --> 00:03:12.150
And to be honest I won't be able to convince you that you should always write your code like this rather

36
00:03:12.150 --> 00:03:16.980
than just having a variable called score and setting it equal to 10 but you might be able to say that

37
00:03:16.980 --> 00:03:20.650
this is quite a convenient way to set up your code.

38
00:03:20.760 --> 00:03:26.970
And it really helps when you start building big libraries of code that when you've got all the logic

39
00:03:27.000 --> 00:03:33.090
of the user together in one place rather than spread out all over the place then it's much easier to

40
00:03:33.090 --> 00:03:36.640
maintain and keep control over.

41
00:03:37.290 --> 00:03:40.940
So let's see how else we might use this.

42
00:03:41.100 --> 00:03:46.710
Let's say that in our game we've decided that when you get to 100 points you win the game and we want

43
00:03:46.710 --> 00:03:49.790
to check whether a user has won the game or not.

44
00:03:49.890 --> 00:03:58.920
Then we could create a method within a user class that's going to return true or false depending on

45
00:03:59.160 --> 00:04:03.510
whether the user has won the game whether they've got 100 points or more.

46
00:04:04.140 --> 00:04:11.050
So we do that by creating a public method public so that we can create it from anywhere.

47
00:04:11.400 --> 00:04:15.580
Now we're used to using voit because we usually return nothing.

48
00:04:15.660 --> 00:04:21.790
But this time we're going to return true or false depending whether or not the user has won the game.

49
00:04:21.810 --> 00:04:31.960
So instead of void we're going to return a boolean true or false and then we'll call the method has

50
00:04:32.230 --> 00:04:32.650
one

51
00:04:35.490 --> 00:04:42.900
and parentheses because it's a method but it doesn't need to take any variables.

52
00:04:44.600 --> 00:04:53.300
And then we can do a check if score is greater or equal to a 100

53
00:04:57.090 --> 00:05:03.990
then we're going to return.

54
00:05:04.000 --> 00:05:12.430
So that means we're going to return the value true to where the method was called in the first place.

55
00:05:12.430 --> 00:05:13.660
And if it's not

56
00:05:17.200 --> 00:05:19.410
we're going to return false

57
00:05:22.600 --> 00:05:25.450
that we got it because the user hasn't won yet.

58
00:05:25.450 --> 00:05:27.040
Now how do we use that down here.

59
00:05:28.810 --> 00:05:34.250
The obvious thing would be to just change this to Bob.

60
00:05:34.570 --> 00:05:37.100
Dot has one.

61
00:05:37.660 --> 00:05:43.140
And then because it's a method rather than a variable we need parentheses afterwards.

62
00:05:43.300 --> 00:05:54.010
So this will run the has one method on Bob which will then go up here look for has one then check if

63
00:05:54.010 --> 00:05:55.960
Bob score is greater than or equal to 100.

64
00:05:55.960 --> 00:06:00.180
If it is returned true if it's not returned false.

65
00:06:00.210 --> 00:06:07.620
So let's take a look and see what that returns as we would expect it returns false.

66
00:06:07.650 --> 00:06:17.890
And let's just check if we suddenly give Bob 200 points then it returns true as we would expect.

67
00:06:17.920 --> 00:06:26.530
So that means if I want to suddenly change the winning score of the game then I change it here in the

68
00:06:26.530 --> 00:06:33.790
User class with all the other user information and logic and data which makes a lot more sense.

69
00:06:33.790 --> 00:06:39.610
So once again we could of course write this code in a simpler way in a way that works for this level

70
00:06:39.610 --> 00:06:40.950
of program.

71
00:06:41.350 --> 00:06:47.980
But hopefully you can see that this would be a useful construction and a useful way to write a larger

72
00:06:47.980 --> 00:06:53.730
program to make it more maintainable and more logical in terms of its layout and structure.

73
00:06:53.740 --> 00:06:55.960
So here's your challenge.

74
00:06:56.080 --> 00:07:03.950
Can you create a class of number and then that number class.

75
00:07:04.140 --> 00:07:10.510
I want to have an integer value associated with it which could either be positive or negative or greater

76
00:07:10.510 --> 00:07:12.830
than zero or less than zero.

77
00:07:13.060 --> 00:07:21.460
And I want an is positive method which will return true if the number of the object is positive and

78
00:07:21.460 --> 00:07:22.240
false.

79
00:07:22.270 --> 00:07:27.970
If it's not and that will be just a good test to see if you've got the idea of what these classes are

80
00:07:27.970 --> 00:07:28.510
doing.

81
00:07:28.720 --> 00:07:33.130
If not don't worry it is a complicated and quite tricky concept.

82
00:07:33.160 --> 00:07:36.660
So if you want to watch me do it then that's absolutely fine.

83
00:07:36.660 --> 00:07:37.510
Best of luck.

84
00:07:45.030 --> 00:07:45.590
OK.

85
00:07:45.810 --> 00:07:48.160
How did you manage that one.

86
00:07:48.200 --> 00:07:58.720
I would do something like this say class of number with a capital N for our class definitions and then

87
00:07:59.870 --> 00:08:05.900
we're going to have an integer which I'll just call a number with a lower case in

88
00:08:10.130 --> 00:08:20.240
and then we're going to have a public method which again is going to return a boolean and we're going

89
00:08:20.240 --> 00:08:22.100
to call it is positive.

90
00:08:24.040 --> 00:08:29.280
Pair of parentheses because it's a method but it's not receiving anything.

91
00:08:29.280 --> 00:08:34.020
So we don't need to put any variables in them.

92
00:08:34.740 --> 00:08:36.660
And then we just do a check if

93
00:08:39.480 --> 00:08:43.280
number is greater than zero.

94
00:08:47.950 --> 00:08:49.900
Return true.

95
00:08:52.210 --> 00:08:52.690
Else

96
00:08:56.400 --> 00:08:57.930
return false.

97
00:09:00.740 --> 00:09:01.210
There we go.

98
00:09:01.310 --> 00:09:03.770
So that's how class we've done.

99
00:09:04.100 --> 00:09:12.290
Let's just create a new instance of it an object just to make sure that everything's as we would expect.

100
00:09:12.320 --> 00:09:20.260
So we're creating a new number I'll call it my number.

101
00:09:22.000 --> 00:09:24.800
And that's a new number.

102
00:09:26.710 --> 00:09:28.340
As we've seen.

103
00:09:28.340 --> 00:09:38.600
And then I'll just set that number so my number don't number I'm going to set equal to 7 which is of

104
00:09:38.600 --> 00:09:41.830
course a positive number so I'm expecting a true result.

105
00:09:42.470 --> 00:09:52.250
And then I'm actually going to use an if statement and I'm going to use my number that is positive as

106
00:09:52.250 --> 00:09:56.830
the test for that if statement because this is a billion.

107
00:09:56.840 --> 00:10:05.810
I can just put it straight into an if statement and if it's true then my statement parses as true and

108
00:10:06.290 --> 00:10:07.800
then I'm going to be a bit fancy.

109
00:10:08.150 --> 00:10:15.500
And rather than just printing to a false to the so I'm going to use the system to go out and print and

110
00:10:15.500 --> 00:10:33.020
I'm going to get my number DOT number plus is positive every day and else

111
00:10:38.650 --> 00:10:43.480
say in this case it's not positive.

112
00:10:43.560 --> 00:10:50.370
So my number two number is not positive.

113
00:10:51.120 --> 00:10:55.680
If you're being really precise Be careful about saying my number that number is negative because it

114
00:10:55.680 --> 00:10:56.700
could of course be zero.

115
00:10:56.760 --> 00:11:00.130
Which generally speaking is accepted to be neither positive or negative.

116
00:11:00.240 --> 00:11:04.320
But I won't take marks off if you put negative there OK.

117
00:11:04.420 --> 00:11:05.010
That's it.

118
00:11:05.050 --> 00:11:09.070
Of course the important thing here is what we're doing here.

119
00:11:09.550 --> 00:11:17.380
So we're creating a new object called my number or that type number and then we're setting the number

120
00:11:17.710 --> 00:11:22.250
variable within that to 7 and then we're doing the test for is positive.

121
00:11:22.270 --> 00:11:24.330
And if it is we're saying that it's positive.

122
00:11:24.340 --> 00:11:27.280
If it's not it's same but it's not positive.

123
00:11:28.780 --> 00:11:31.610
So let's just check that.

124
00:11:32.150 --> 00:11:33.230
I've got an error in there.

125
00:11:33.230 --> 00:11:34.670
Did you see that coming.

126
00:11:35.030 --> 00:11:40.970
I forgot to put my pair of brackets after is positive because this of course is a method not a variable

127
00:11:41.090 --> 00:11:45.210
so it needs an open close pair of parentheses.

128
00:11:45.230 --> 00:11:45.990
There we go.

129
00:11:46.130 --> 00:11:47.630
Seven is positive.

130
00:11:47.840 --> 00:11:49.940
If I change it to minus seven

131
00:11:53.220 --> 00:11:55.780
we get minus 7 is not positive.

132
00:11:57.570 --> 00:11:58.450
There we go.

133
00:11:58.860 --> 00:12:04.650
So I hope that's helped clarify a little bit of what a class is what an object is and how we might use

134
00:12:04.650 --> 00:12:06.650
classes in our code.

135
00:12:07.160 --> 00:12:12.660
And the next video we're going to create the second and final map of this section and I'm going to encourage

136
00:12:12.660 --> 00:12:15.360
you to do it in an object oriented way.

137
00:12:15.450 --> 00:12:18.990
So that is using classes and objects.

138
00:12:19.010 --> 00:12:19.580
So you then.
