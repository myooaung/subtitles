WEBVTT
1
00:00:00.510 --> 00:00:06.000
Now that we've got our uber logon screen up and running we're going to build the rider activity.

2
00:00:06.480 --> 00:00:11.730
And this is going to look like this is mostly just a Google map.

3
00:00:11.730 --> 00:00:15.040
That of course centers on the right location.

4
00:00:15.210 --> 00:00:22.130
And of course as I update that location it updates the map accordingly.

5
00:00:22.380 --> 00:00:30.210
But we've also got this cool and Oubre button which when we press it it changes to cancel Ubah.

6
00:00:30.840 --> 00:00:39.660
And if we have a look on our past dashboard we now have an object called request which is a store of

7
00:00:39.690 --> 00:00:45.450
all of the active Oubre requests and we've got the user name of the requester as well as their location

8
00:00:45.720 --> 00:00:53.580
in a pass Geo point and you're going to need to use geo points to store the location.

9
00:00:53.580 --> 00:01:02.550
One other small hint as well is that you'll need to have a state variable which can just be a Boullion

10
00:01:02.880 --> 00:01:08.910
and will tell the app whether and uber request is active or not and show the appropriate label on the

11
00:01:08.910 --> 00:01:14.730
button and then either create or cancel a request when the button is pressed.

12
00:01:14.820 --> 00:01:16.460
So not an easy one by any means.

13
00:01:16.460 --> 00:01:18.630
You might decide you'd rather follow along with the video here.

14
00:01:18.660 --> 00:01:19.900
And that would be absolutely fine.

15
00:01:19.980 --> 00:01:21.260
But either way good luck.

16
00:01:21.420 --> 00:01:25.030
I'll give you a moment now to pause the video and give it a try.

17
00:01:25.310 --> 00:01:33.690
Epic as well.

18
00:01:33.830 --> 00:01:34.260
All right.

19
00:01:34.260 --> 00:01:35.510
So here goes.

20
00:01:35.970 --> 00:01:39.150
I'm going to start of course by creating new activity

21
00:01:42.850 --> 00:01:47.290
from the gallery and we're going to want a Google Maps activity

22
00:01:50.300 --> 00:01:54.280
I'll call it the activity.

23
00:01:59.570 --> 00:02:04.980
And we'll need to do a fair bit of set up to to get this working.

24
00:02:05.090 --> 00:02:11.020
You remember first off we copied that you are el

25
00:02:14.210 --> 00:02:17.180
and then jump over to our browser and pasted in

26
00:02:23.280 --> 00:02:24.170
here we go.

27
00:02:24.180 --> 00:02:27.770
It's going to create a new project so I'm just going to click continue.

28
00:02:29.510 --> 00:02:31.170
And then that's the name the API.

29
00:02:31.190 --> 00:02:35.060
So let's get our API key to use in our app

30
00:02:37.900 --> 00:02:38.960
and here we go.

31
00:02:39.220 --> 00:02:46.320
So there's the key I'm going to copy that to the clipboard back over 200 hundred studio and then paste

32
00:02:46.320 --> 00:02:46.710
that in

33
00:02:51.380 --> 00:02:53.720
without a space at the end.

34
00:02:53.730 --> 00:03:01.990
Great just going to remove those tabs just in case they cause any problems.

35
00:03:04.370 --> 00:03:07.450
Area and then check ends with zero starts with an array.

36
00:03:07.470 --> 00:03:08.630
Is that right.

37
00:03:08.910 --> 00:03:09.670
Yes it is.

38
00:03:09.720 --> 00:03:11.040
OK.

39
00:03:11.880 --> 00:03:15.070
So we now get to go with our map.

40
00:03:15.450 --> 00:03:25.130
Let's start in our main activity by creating our redirect and we want to do that in two places in the

41
00:03:25.140 --> 00:03:30.320
uncreate method and also in the Get Started method when the button is pressed.

42
00:03:30.360 --> 00:03:45.260
So let's set it up as a method of call it redirect activity.

43
00:03:45.280 --> 00:03:50.720
So again more check to see if the current user is a rider or driver.

44
00:03:51.420 --> 00:03:52.090
So if

45
00:03:54.790 --> 00:03:59.280
Parsis a don't get current user don't get

46
00:04:02.860 --> 00:04:04.060
rider or driver

47
00:04:10.380 --> 00:04:14.440
I we'll see if that's equal to the rider.

48
00:04:15.340 --> 00:04:19.510
And if it is all set up and intent

49
00:04:24.840 --> 00:04:25.720
it's a

50
00:04:28.720 --> 00:04:34.290
use the application context and jump to the right activity.

51
00:04:40.380 --> 00:04:41.150
That we get.

52
00:04:41.490 --> 00:04:42.650
So we'll do that here.

53
00:04:48.700 --> 00:04:49.980
And also here

54
00:04:56.100 --> 00:04:56.820
quake.

55
00:04:56.960 --> 00:04:59.320
So that will be directed to the writer activity.

56
00:04:59.330 --> 00:05:07.970
If the user is a writer now we need to set up our Google map to show the users location.

57
00:05:08.000 --> 00:05:11.810
So it's been a while since we did this but we have done it several times so hopefully it will come flooding

58
00:05:11.810 --> 00:05:18.620
back to you or create a Location Manager Location Manager and a location listener.

59
00:05:20.970 --> 00:05:28.500
Call location listen up and then in the on map ready method.

60
00:05:31.570 --> 00:05:34.650
We set up the manager and the listener.

61
00:05:34.690 --> 00:05:38.890
So start with location manager.

62
00:05:39.700 --> 00:05:40.750
And this is going to be

63
00:05:44.170 --> 00:05:57.040
location manager using this dog get system service and then context dot location service.

64
00:05:58.340 --> 00:06:08.820
And then we've got location Lisner which is a new location listener and the main bit that we're interested

65
00:06:08.820 --> 00:06:11.600
in is on location and changed.

66
00:06:12.530 --> 00:06:18.030
And what we want to do here is update the map with the users location.

67
00:06:18.030 --> 00:06:25.980
So to do that we're going to need a lot them for the use of location which is going to be a new balloon

68
00:06:27.400 --> 00:06:30.200
and we'll get that from the location up here.

69
00:06:30.860 --> 00:06:36.570
So the location don't get latitude and location don't get

70
00:06:39.400 --> 00:06:48.470
longitude and then we take out a map and we move the camera

71
00:06:51.620 --> 00:06:53.670
using camera update factory.

72
00:06:53.940 --> 00:07:04.640
And when we leave them to a new lot to learn that location being used location will also add a marker

73
00:07:06.250 --> 00:07:07.750
to show them exactly where they are.

74
00:07:10.690 --> 00:07:23.240
At Marka you corruption's and we're going to set the position to the user location and also set the

75
00:07:23.240 --> 00:07:29.610
title to your location.

76
00:07:29.650 --> 00:07:37.580
One thing we should remember today before we add that marker is clear and existing markets otherwise

77
00:07:37.580 --> 00:07:41.180
we'll get markers all over the place as the user moves around.

78
00:07:41.720 --> 00:07:42.360
All right.

79
00:07:42.440 --> 00:07:49.370
So that's all done except for the permission side of things and possibly a semi-colon at the end of

80
00:07:49.370 --> 00:07:51.400
there as well.

81
00:07:51.530 --> 00:07:53.600
We no longer need the Sydney Marka

82
00:07:57.570 --> 00:08:12.420
say we'll take our location manager and request location updates using the CPS provider and we'll get

83
00:08:12.420 --> 00:08:17.600
the updates whether they move any kind of distance and any kind of time

84
00:08:21.130 --> 00:08:47.210
and we'll apply location listener as the method to be run when we have a vacation update.

85
00:08:47.230 --> 00:08:53.420
Now we only want to do that directly if they were on a version earlier than marshmallow.

86
00:08:54.100 --> 00:09:03.170
So we'll check for build version STK integer to be less than 23.

87
00:09:03.310 --> 00:09:04.470
So if that's the case

88
00:09:08.010 --> 00:09:14.960
then we'll request that location directly if it's not we need to ask for permission more directly.

89
00:09:15.510 --> 00:09:20.850
So we'll check to see if we already have this permission.

90
00:09:20.850 --> 00:09:30.660
So we look for context compatibility check self-promotion and we're checking for this activity to see

91
00:09:30.660 --> 00:09:39.260
if it has manifest permission the access fine location.

92
00:09:39.690 --> 00:09:48.870
So we want to see if that is not equal to a package manager dot.

93
00:09:49.050 --> 00:09:54.620
Permission granted if that's the case we don't have permission.

94
00:09:54.620 --> 00:09:56.040
So we need to ask for it.

95
00:09:59.200 --> 00:10:09.130
So activity compact don't request permissions for this activity and we're going to create an array of

96
00:10:09.130 --> 00:10:16.440
strings with a single value which is manifest.

97
00:10:17.360 --> 00:10:26.120
Got permission access file location and our request code will just be a one

98
00:10:29.580 --> 00:10:30.180
and another.

99
00:10:30.180 --> 00:10:32.610
Else this means we've got permission.

100
00:10:32.970 --> 00:10:41.880
So firstly we again request the location updates by the location manager.

101
00:10:41.980 --> 00:10:46.700
And remember this is when the app or the activity starts.

102
00:10:46.810 --> 00:10:55.690
So we're going to want to get the users last known location if we can and we get that from location

103
00:10:55.690 --> 00:11:10.070
manager or get the last known location by location manager or CPS provider and then we want to update

104
00:11:10.070 --> 00:11:12.650
the map.

105
00:11:12.670 --> 00:11:19.290
So I think what Aldin I'll create a method to do that so we're not using the same code again and again

106
00:11:23.080 --> 00:11:24.590
I would just call it a map

107
00:11:31.150 --> 00:11:40.370
update map and it will actually need a location which will call location.

108
00:11:40.600 --> 00:11:43.350
And this one will get the location from up here.

109
00:11:48.690 --> 00:11:53.260
And this time we'll check to see if there is a last known location

110
00:11:56.960 --> 00:11:57.800
and if there is

111
00:12:00.830 --> 00:12:02.320
and we'll update the map.

112
00:12:04.020 --> 00:12:06.380
But that location.

113
00:12:06.410 --> 00:12:06.890
All right.

114
00:12:06.920 --> 00:12:15.440
So we then we just need to add a method for when the user has given us permission.

115
00:12:15.630 --> 00:12:19.690
So that is on request permissions result.

116
00:12:21.680 --> 00:12:29.030
And if we want to we can check that request carryed is one even though we're pretty certain it will

117
00:12:29.030 --> 00:12:30.800
be.

118
00:12:31.540 --> 00:12:41.020
And then we do our usual check to see if grond results length is greater than zero if we've got a result

119
00:12:42.070 --> 00:12:45.770
and Granfer results.

120
00:12:45.960 --> 00:12:52.830
0 3 is equal to a package manager it's permission granted.

121
00:12:52.870 --> 00:12:57.740
Then we get to go.

122
00:12:57.850 --> 00:13:08.190
So we're going to say location manager and request location updates by our location manager at our provider.

123
00:13:08.530 --> 00:13:11.390
Zero meters and zero seconds.

124
00:13:13.170 --> 00:13:16.290
And location listener.

125
00:13:16.450 --> 00:13:22.020
And we also want to update map using the last known location

126
00:13:26.790 --> 00:13:28.410
so I would just copy that line up there.

127
00:13:28.410 --> 00:13:32.470
I don't think it's quite worth setting up a method just for that line.

128
00:13:34.790 --> 00:13:40.850
But you're obviously welcome to say and then even though we've just checked that we have permission

129
00:13:41.270 --> 00:13:42.890
we do need to do an explicit check

130
00:13:46.170 --> 00:13:49.000
so context compact check.

131
00:13:49.150 --> 00:13:51.610
So permission this activity

132
00:13:53.840 --> 00:13:59.850
manifesto permission to access find location.

133
00:13:59.900 --> 00:14:00.590
And we want to check.

134
00:14:00.590 --> 00:14:02.220
But that's equal to this time

135
00:14:05.230 --> 00:14:09.470
package manager it's permission granted

136
00:14:17.040 --> 00:14:18.630
few.

137
00:14:19.190 --> 00:14:19.600
There we go.

138
00:14:19.600 --> 00:14:26.780
So with any luck I haven't forgotten anything that's worth having a quick check in the manifest to make

139
00:14:26.780 --> 00:14:29.130
sure we're asking for access find location.

140
00:14:29.150 --> 00:14:30.820
Yes we are.

141
00:14:31.310 --> 00:14:32.780
That is normally added by default.

142
00:14:32.780 --> 00:14:38.500
When you add a Google Maps activity but it's worth checking to be sure.

143
00:14:39.830 --> 00:14:45.850
And I've got an interesting Arrowhead which is almost certainly one that you'll come across at this

144
00:14:45.850 --> 00:14:54.220
point because without a combination of parts and Google Maps we've gone over the maximum number of methods

145
00:14:54.250 --> 00:14:56.700
in an Android app which is 64000.

146
00:14:56.710 --> 00:14:58.710
So as always a number of ways to fix this.

147
00:14:58.710 --> 00:15:05.230
But the easiest is to add what's known as decks support which essentially allows you to have more than

148
00:15:05.230 --> 00:15:08.350
64000 references in your app.

149
00:15:08.350 --> 00:15:14.060
And we do that by editing our build Gretl file.

150
00:15:14.150 --> 00:15:23.000
That's the one that says module pass starter project and in the default config section just add a line

151
00:15:23.470 --> 00:15:24.020
that says

152
00:15:27.130 --> 00:15:31.100
multi decs enabled.

153
00:15:31.780 --> 00:15:32.390
True.

154
00:15:34.500 --> 00:15:48.620
And then down in the dependencies at compile com dot Android DOS support and then Colan multi decks

155
00:15:49.820 --> 00:15:53.320
Colan one point zero point zero or

156
00:15:57.590 --> 00:16:00.470
and then rethink the project.

157
00:16:00.470 --> 00:16:04.540
And that should add multi deck support to your app.

158
00:16:04.790 --> 00:16:08.970
All right that's now sinked successfully.

159
00:16:08.970 --> 00:16:10.580
So let's give it another try.

160
00:16:14.030 --> 00:16:21.620
As a note there as well there's a new version of multi decks available say that's update

161
00:16:24.330 --> 00:16:26.490
our cradle file to take that one.

162
00:16:27.050 --> 00:16:28.040
And here we go.

163
00:16:28.310 --> 00:16:29.780
So I'm going to leave it on.

164
00:16:29.810 --> 00:16:32.290
Right click get started.

165
00:16:32.300 --> 00:16:40.160
And that takes us to the New Right activity asking us to allow access to the devices location so we'll

166
00:16:40.160 --> 00:16:43.050
click allow and there we go.

167
00:16:43.610 --> 00:16:45.090
So we've got the users location.

168
00:16:45.110 --> 00:16:47.440
I think that we need to zoom in a little bit.

169
00:16:47.530 --> 00:16:49.690
It's a little bit too far down.

170
00:16:49.820 --> 00:17:03.270
So let's update our update map method to use new that learn zun

171
00:17:07.790 --> 00:17:16.810
and then we can use user location and I'll try a zoom level of 9.

172
00:17:16.830 --> 00:17:18.130
See how that works.

173
00:17:23.720 --> 00:17:35.770
While we're there as well we can test moving around the map remember by choosing the location and interestingly

174
00:17:35.770 --> 00:17:41.100
it hasn't automatically redirected for me so I'll check that in a moment but let's have a quick look

175
00:17:41.100 --> 00:17:45.900
at our map while we're focusing on that's OK.

176
00:17:46.150 --> 00:17:53.110
I think that's maybe a little too zoomed out so let's increase that to 15 or so.

177
00:17:58.090 --> 00:17:59.310
See how that looks.

178
00:17:59.380 --> 00:18:06.420
And also let's see why it didn't save the user details.

179
00:18:06.430 --> 00:18:08.850
Aha I think I know what it is.

180
00:18:08.920 --> 00:18:20.520
I think it's because although we added the rider or driver right there we didn't say that to pass.

181
00:18:20.740 --> 00:18:22.220
So let's do that.

182
00:18:27.110 --> 00:18:39.950
We'll have saving back ground with a new save Colback and then we'll do the redirect activity when

183
00:18:42.960 --> 00:18:45.470
the data has saved.

184
00:18:46.290 --> 00:18:48.060
And also while we're here.

185
00:18:48.900 --> 00:18:50.310
There was a small mistake up here

186
00:18:52.980 --> 00:18:59.280
that instead of course when we're comparing two strings we should use dot equals

187
00:19:02.520 --> 00:19:05.690
a better solution.

188
00:19:05.880 --> 00:19:06.810
So let's try that out.

189
00:19:06.810 --> 00:19:20.600
We should now with any luck be redirected to the map as soon as the app starts.

190
00:19:21.320 --> 00:19:22.370
And there we go.

191
00:19:22.610 --> 00:19:27.440
So now we're in it's now time to bring in our big request uber button.

192
00:19:27.950 --> 00:19:30.380
So let's go back and do that.

193
00:19:31.560 --> 00:19:40.270
In activity right now you may have noticed from before the activity right at the moment is just a fragment.

194
00:19:40.620 --> 00:19:41.760
But that's not a problem.

195
00:19:41.760 --> 00:19:46.100
We can just take out button and drag it in

196
00:19:49.140 --> 00:19:55.140
relative to the bottom right of the screen and I'll change the button text

197
00:19:57.830 --> 00:20:04.760
to call an Uber.

198
00:20:04.780 --> 00:20:12.870
How much has the ID to call ubah button.

199
00:20:12.970 --> 00:20:14.200
And then when it's clicked

200
00:20:17.080 --> 00:20:19.930
it will run the call method.

201
00:20:20.680 --> 00:20:21.800
OK.

202
00:20:22.330 --> 00:20:31.990
So let's quickly set up they call either method public voyde call Ruba.

203
00:20:32.020 --> 00:20:37.390
It's going to be called by a button or a view and initially it will just do a quick

204
00:20:42.820 --> 00:20:49.300
call.

205
00:20:49.720 --> 00:20:55.370
So let's just do a quick check to make sure that that's working.

206
00:20:55.630 --> 00:21:03.400
And then a cool EBA is essentially going to be a saving of a new pass object which is going to be an

207
00:21:03.460 --> 00:21:12.250
uber request by the way worth noting here with our rider or driver field just that

208
00:21:15.220 --> 00:21:16.380
OK.

209
00:21:16.640 --> 00:21:23.390
So let's go back over to Android studio and just check that that's working with our button you can see

210
00:21:23.390 --> 00:21:25.600
how cool in at the bottom there.

211
00:21:25.630 --> 00:21:31.020
So I'll just tap that and then we'll have a look in the locks.

212
00:21:31.040 --> 00:21:37.630
With any luck we'll see our cool uber there we are at the bottom.

213
00:21:37.840 --> 00:21:38.470
Super.

214
00:21:38.920 --> 00:21:40.120
So to cool in Aruba.

215
00:21:40.150 --> 00:21:45.940
We're going to create a panel object and that passenger is going to contain the username and also the

216
00:21:45.940 --> 00:21:49.470
location of the user that requested it.

217
00:21:50.050 --> 00:21:54.820
So let's write that code.

218
00:21:54.990 --> 00:21:57.210
We're going to create a new Paris object

219
00:22:00.770 --> 00:22:12.160
which I'll call a request and this is going to be a new parse object with a class of request and then

220
00:22:13.270 --> 00:22:15.470
we're going to add first the user name.

221
00:22:15.550 --> 00:22:29.260
So I put it username and this is going to be passed user to get current user to get username and then

222
00:22:29.260 --> 00:22:34.360
we'll use the last known location to save the users location.

223
00:22:34.390 --> 00:22:35.880
So we've got that here.

224
00:22:36.910 --> 00:22:42.800
We'll need to do the check as well.

225
00:22:47.450 --> 00:22:50.320
So we don't need to update the map we just need to get the location.

226
00:22:50.360 --> 00:22:51.050
In fact

227
00:22:54.240 --> 00:22:55.470
I'll put all of this code

228
00:22:58.170 --> 00:23:04.050
inside that check and I'll also check for last known location

229
00:23:06.960 --> 00:23:07.920
not being No.

230
00:23:08.190 --> 00:23:12.860
Because if we don't have a location there's not much point creating a request.

231
00:23:13.050 --> 00:23:17.280
And then if the location is no we just do a quick toast

232
00:23:20.970 --> 00:23:28.700
thing could not find the location.

233
00:23:28.800 --> 00:23:29.760
Please try again later.

234
00:23:30.030 --> 00:23:31.660
Or something like that.

235
00:23:33.880 --> 00:23:34.570
OK.

236
00:23:34.850 --> 00:23:42.680
Now for locations pass has a built in data type called a geo point so it will use

237
00:23:47.280 --> 00:23:48.970
a pass Geo point

238
00:23:53.530 --> 00:23:59.430
and you can see here we create it with a latitude and longitude.

239
00:23:59.560 --> 00:24:07.480
So we're going to get those from the last known location to get latitude and last known location.

240
00:24:07.490 --> 00:24:11.880
Don't get let me G.

241
00:24:13.160 --> 00:24:15.830
And then we'll take our request and put

242
00:24:21.140 --> 00:24:28.760
location as they pass Geo point that we get.

243
00:24:29.360 --> 00:24:31.010
So now let's say our request

244
00:24:35.010 --> 00:24:36.840
with a new save Colback

245
00:24:39.920 --> 00:24:41.580
and then as usual we'll check

246
00:24:46.110 --> 00:24:47.160
if there was no error.

247
00:24:47.340 --> 00:24:52.360
Then we also want to show the user that the has been requested.

248
00:24:52.920 --> 00:25:08.590
So we'll take the baton the call button and we'll update it to give the user the option to cancel the.

249
00:25:08.660 --> 00:25:12.790
So let's define it up here.

250
00:25:14.320 --> 00:25:23.420
Call the boot button and then in on create we'll set it up.

251
00:25:23.420 --> 00:25:31.380
This is going to be a button from fine view by ID card or ID dot called Hoopa button

252
00:25:34.980 --> 00:25:38.450
there we get.

253
00:25:38.540 --> 00:25:49.480
So now we'll change call button and we'll set the text to cancel Ubah.

254
00:25:49.710 --> 00:25:55.670
So let's just check that that's a working once we verified that we're up and running with that.

255
00:25:55.690 --> 00:26:03.240
We're going to need to have an app state that knows whether and Oubre request is active or not.

256
00:26:03.280 --> 00:26:09.880
So it can display the right text on the button and it can either cancel or request an uber when the

257
00:26:09.880 --> 00:26:11.880
user presses that button.

258
00:26:12.550 --> 00:26:14.100
And here we go.

259
00:26:14.890 --> 00:26:18.350
So let's tap cool and Ebba we can see that that switched over to cancel either.

260
00:26:18.370 --> 00:26:21.990
So it looks like it's worked on the app side of things.

261
00:26:22.540 --> 00:26:30.070
Let's refresh our past dashboard and just make sure that our request has been suitably created.

262
00:26:31.210 --> 00:26:40.460
And there it is so that our location which matches what we had in the app and the user name as well.

263
00:26:41.050 --> 00:26:42.450
Excellent.

264
00:26:43.500 --> 00:26:51.150
So now all that remains for the right activity is to properly manage the cooling and canceling of a

265
00:26:51.220 --> 00:26:51.770
bed.

266
00:26:52.200 --> 00:27:04.720
So let's start off by creating a boolean which will manage whether or not there's a request active.

267
00:27:05.490 --> 00:27:07.800
And initially it will be false.

268
00:27:07.800 --> 00:27:16.920
And then the uncreate method will do a check to see if there is an active request in place.

269
00:27:17.460 --> 00:27:22.900
So it will need a pass query on a pass object

270
00:27:25.650 --> 00:27:30.540
and this is going to be a new parse query on a part object

271
00:27:33.210 --> 00:27:36.290
of the class request.

272
00:27:38.420 --> 00:27:39.800
And we'll call it query

273
00:27:44.070 --> 00:27:51.730
and then we're going to look for where the username is equal to our current username

274
00:27:55.640 --> 00:27:56.700
that we gave.

275
00:27:56.880 --> 00:27:58.980
That's the only limit we need.

276
00:27:59.970 --> 00:28:07.080
So then we find in the background with a new find Colback

277
00:28:10.940 --> 00:28:12.260
and then if there's an error

278
00:28:15.630 --> 00:28:16.890
and if we have some objects

279
00:28:26.480 --> 00:28:32.580
then we're going to switch the request active to true

280
00:28:37.430 --> 00:28:41.090
request active becomes true and we'll also change the button text

281
00:28:44.130 --> 00:28:46.520
say the button was cool button

282
00:28:51.260 --> 00:28:55.700
to cancel Ubah.

283
00:28:55.850 --> 00:28:56.750
There we go.

284
00:28:57.080 --> 00:29:02.510
And the last thing that we need to change is that when they call either button is pressed

285
00:29:06.030 --> 00:29:17.890
which is this method here we need to check to see if Everquest is active and if it is then we're going

286
00:29:17.890 --> 00:29:19.040
to want to cancel.

287
00:29:19.180 --> 00:29:19.930
You bet.

288
00:29:20.280 --> 00:29:25.480
And if it isn't then we'll go through that process.

289
00:29:27.400 --> 00:29:30.290
Of creating a new.

290
00:29:30.390 --> 00:29:30.930
Here we go.

291
00:29:31.250 --> 00:29:38.980
And when the AIBA is created we also need to set request active to trigger

292
00:29:42.690 --> 00:29:48.820
so to cancel a Nouba we need to find the request

293
00:29:52.080 --> 00:29:57.450
which is exactly the same process as we had in the create method

294
00:30:00.750 --> 00:30:02.810
so let's put that in then.

295
00:30:03.230 --> 00:30:14.850
And this time if we find a request we're going to request active force and set the text to call and

296
00:30:14.980 --> 00:30:18.640
Buba or just check that I do that with capitals.

297
00:30:18.640 --> 00:30:18.940
I did

298
00:30:24.070 --> 00:30:24.580
OK.

299
00:30:24.680 --> 00:30:30.810
And then we're also going to need to delete the object from our past server.

300
00:30:32.180 --> 00:30:45.650
So we'll loop through we need to create a parser object called object for all the objects returned.

301
00:30:45.860 --> 00:30:50.900
That's possible there might be more than one where an expected one but this will delete all of them

302
00:30:51.170 --> 00:30:53.130
just in case there is more than one.

303
00:30:53.450 --> 00:31:00.640
And then we simply want to take an object and delete in the background.

304
00:31:01.340 --> 00:31:03.860
And I'm not going to even have a callback for that.

305
00:31:03.860 --> 00:31:06.480
You can obviously at one end if you'd like.

306
00:31:07.340 --> 00:31:19.250
But now our app should display what we want which is when an Uber is active whenever a quest is active

307
00:31:19.550 --> 00:31:21.360
then it will show the cancel button.

308
00:31:21.440 --> 00:31:24.100
When we load the app.

309
00:31:24.440 --> 00:31:33.440
And then when we press the button it will remove the request from our server and update the button and

310
00:31:33.440 --> 00:31:35.030
the app state as well.

311
00:31:35.510 --> 00:31:36.250
And here we go.

312
00:31:36.290 --> 00:31:42.020
You can see we've got the council Lubos so expected that there is a request active and if we press the

313
00:31:42.050 --> 00:31:43.030
cancel button

314
00:31:46.050 --> 00:31:50.750
just once then you can see it goes back to call in Aruba.

315
00:31:51.150 --> 00:31:57.650
And if we refresh our data browser request has indeed disappeared.

316
00:31:59.470 --> 00:32:06.400
All right so our app is now behaving as we want it from a wider perspective.

317
00:32:06.590 --> 00:32:09.060
It's now time to think about the driver.

318
00:32:09.170 --> 00:32:15.110
And of course the driver then has to be able to view active requests and select them and navigate to

319
00:32:15.110 --> 00:32:15.880
them.

320
00:32:16.010 --> 00:32:18.450
And that's what we're going to find out how to be in the next video.
