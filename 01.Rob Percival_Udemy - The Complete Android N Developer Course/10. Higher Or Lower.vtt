WEBVTT
1
00:00:00.240 --> 00:00:05.910
We're now going to take a little break from our Java deep dive and practice what we've learned so far

2
00:00:05.940 --> 00:00:11.640
with variables if statements are arrays and maps to create our higher or lower gain.

3
00:00:12.000 --> 00:00:13.350
So it's pretty simple.

4
00:00:13.410 --> 00:00:20.740
We need to type in a number to try and guess a random number between 1 and 20 that our phone has generated.

5
00:00:20.730 --> 00:00:29.820
So if I start by guessing 10 then it tells me that I need to get lower so I'll get 5 higher than 5 7

6
00:00:30.270 --> 00:00:31.220
lower than 7.

7
00:00:31.220 --> 00:00:33.050
It must be 6.

8
00:00:33.210 --> 00:00:33.710
Excellent.

9
00:00:33.720 --> 00:00:39.510
And then it generates a new random number and invites the user to play again.

10
00:00:39.510 --> 00:00:40.610
So pretty simple.

11
00:00:40.740 --> 00:00:45.420
There is of course one big new thing that you don't have to do yet and that is to generate a random

12
00:00:45.420 --> 00:00:51.480
number and as before I'm going to leave that to you to try and figure out just a quick bit of googling

13
00:00:51.510 --> 00:00:57.420
should get you the answer as to how you generate a random number between 1 and 20.

14
00:00:57.420 --> 00:01:01.640
There are a couple of other little quirks that you might come across as you're building this up.

15
00:01:01.740 --> 00:01:06.720
But as always don't panic if you can find solutions by Google then great.

16
00:01:06.720 --> 00:01:12.960
If not then just follow along with the video and I'll show you how to make it so I hope you have fun

17
00:01:12.960 --> 00:01:13.890
with this app.

18
00:01:13.890 --> 00:01:16.140
Time to pause the video and give it a shot.

19
00:01:16.140 --> 00:01:16.920
Best of luck.

20
00:01:24.360 --> 00:01:25.400
All right then here we go.

21
00:01:25.430 --> 00:01:27.290
I hope that went well for you.

22
00:01:27.300 --> 00:01:35.370
I'm going to start Of course by creating a new project within Andray studio going to call it higher

23
00:01:35.460 --> 00:01:41.140
or lower and use all of our default settings.

24
00:01:41.210 --> 00:01:50.740
So the empty activity and finish so will start by setting up the user interface which will be very very

25
00:01:50.740 --> 00:01:56.470
simple and then will write the code of course as I mentioned the new bit the bit that we haven't done

26
00:01:56.470 --> 00:01:59.870
before is generating a random number.

27
00:01:59.950 --> 00:02:06.720
So let's take a moment while the app is launching

28
00:02:10.250 --> 00:02:14.350
and let's see how we generate a random number in Java.

29
00:02:14.390 --> 00:02:18.710
So that's what I would have for you could generate random number up Android as well that would probably

30
00:02:18.710 --> 00:02:23.150
give you the same thing but this is quite a Java specific case.

31
00:02:23.150 --> 00:02:26.770
That top result looks pretty perfect for us.

32
00:02:32.680 --> 00:02:33.840
Here we go.

33
00:02:34.180 --> 00:02:35.110
And this looks ideal.

34
00:02:35.110 --> 00:02:44.380
So we're creating a random which we call Randhir which is a new random and then we're creating an integer

35
00:02:44.480 --> 00:02:54.370
N which is taken from our random and we use the next method to generate a random number from that.

36
00:02:54.670 --> 00:03:00.580
And it looks like this would generate a random number between 1 and 50.

37
00:03:00.580 --> 00:03:06.320
So next int 50 in itself would generate a random number between 0 and 49.

38
00:03:06.370 --> 00:03:12.260
So we have to plus 1 to get a number between 1 and 50 OK.

39
00:03:12.490 --> 00:03:18.870
That makes sense we'll come back to that and grab that code when we need it for now they are up.

40
00:03:18.880 --> 00:03:21.190
So let's start by setting up

41
00:03:24.280 --> 00:03:27.210
our user interface.

42
00:03:27.380 --> 00:03:32.620
Now I'm not going to spend a lot of time with layouts or images here we're going to focus on the code

43
00:03:32.930 --> 00:03:36.520
but you're welcome to make it look a little prettier if you like.

44
00:03:36.530 --> 00:03:37.720
So here we go.

45
00:03:38.030 --> 00:03:45.870
I'm going to start by taking this label and I use the existing one so I change that text too.

46
00:03:45.880 --> 00:03:52.960
I'm thinking of a number between 1 and 20

47
00:03:55.810 --> 00:04:00.890
and then we'll bring in another X-Fi underneath that one

48
00:04:05.120 --> 00:04:11.100
will say Can you guess it.

49
00:04:11.310 --> 00:04:15.000
And I think I'll just add

50
00:04:18.220 --> 00:04:22.810
a little bit of a margin around the can you get it and change the text size slightly.

51
00:04:23.650 --> 00:04:26.010
So it's a little more obvious.

52
00:04:30.860 --> 00:04:41.040
Try 15 Espey a little larger I think.

53
00:04:42.060 --> 00:04:43.550
OK then we'll bring in

54
00:04:46.350 --> 00:04:50.950
a text field and we're definitely expecting a number.

55
00:04:56.020 --> 00:05:08.050
So let's bring that in and as usual I like my text fields to be full with great and then the final element

56
00:05:08.050 --> 00:05:08.650
that we need

57
00:05:12.240 --> 00:05:13.410
is a button

58
00:05:20.600 --> 00:05:35.120
so cool that gets and there we go that's my user interface so I'll just set the ID for the edit text

59
00:05:35.240 --> 00:05:36.680
to be guessed at it text

60
00:05:40.270 --> 00:05:42.880
updates and he acts homo references.

61
00:05:44.100 --> 00:05:56.250
And also add an on click method for the button which would just be guess OK.

62
00:05:56.680 --> 00:05:58.370
Right that's my user interface.

63
00:06:02.760 --> 00:06:10.410
I'll run my app in the background and then jump over to the main activity of Java to write.

64
00:06:10.420 --> 00:06:13.350
OK OK here we go.

65
00:06:13.610 --> 00:06:18.720
So we're going to create a method that we use to.

66
00:06:19.040 --> 00:06:26.330
It's a public method it's not pretending anything so it's void and it's called Guess it's being called

67
00:06:26.360 --> 00:06:28.870
by the button which is a view.

68
00:06:28.950 --> 00:06:33.890
So it create a variable could we with a little Vi of a type view with a big V

69
00:06:36.900 --> 00:06:40.170
to represent that bottom.

70
00:06:40.540 --> 00:06:42.000
So as we've done before.

71
00:06:42.250 --> 00:06:47.170
Rather than go straight into generating random numbers I'm going to make sure everything's connected

72
00:06:47.170 --> 00:06:47.900
up right.

73
00:06:48.220 --> 00:06:52.000
And first find the value of the added text and display that in a text

74
00:06:56.840 --> 00:07:04.120
so it will create an edit text called guess edit text.

75
00:07:04.670 --> 00:07:13.740
And we're going to need to convert this to an edit text from vine view by id and the ID is going to

76
00:07:13.740 --> 00:07:22.890
be results is dot IDs dot guess at it text.

77
00:07:25.540 --> 00:07:30.080
And then we're going to display that value as a toast

78
00:07:36.100 --> 00:07:42.660
so it will create a new toast using toast don't make text main activity.

79
00:07:42.690 --> 00:07:52.070
This is the context the thing we want to display is going to be the guess at it text don't get text

80
00:07:53.840 --> 00:07:55.760
taught to string.

81
00:07:56.420 --> 00:08:01.100
Lovely when you start to do things several times it starts to get what you want often it gets it right

82
00:08:01.110 --> 00:08:02.410
which is great.

83
00:08:02.550 --> 00:08:08.950
And then we'll leave the length as short and then we use dog show to actually show the thing.

84
00:08:11.500 --> 00:08:12.370
And here we go.

85
00:08:12.510 --> 00:08:13.480
So let's give it a try.

86
00:08:13.490 --> 00:08:17.270
I'll just pop in a number there that I guess.

87
00:08:17.320 --> 00:08:20.330
And that appears excellent.

88
00:08:25.120 --> 00:08:26.140
Great.

89
00:08:27.060 --> 00:08:30.370
So the app is all connected up and working as we'd like.

90
00:08:30.430 --> 00:08:34.990
Time now to introduce our random number generator.

91
00:08:35.710 --> 00:08:37.460
So that's copy the code

92
00:08:40.520 --> 00:08:42.920
from here.

93
00:08:43.460 --> 00:08:46.700
I'll pop it in after the added text.

94
00:08:46.700 --> 00:08:48.360
So recreating a new random number

95
00:08:52.700 --> 00:08:59.210
and we want our random number to be between 1 and 20.

96
00:08:59.730 --> 00:09:07.080
So I can just change that to 20 and it should give us our random number.

97
00:09:07.310 --> 00:09:10.340
However you might see that we've got a bit of a problem here.

98
00:09:11.030 --> 00:09:16.100
The way this code is set up is going to generate a new random number every time the user guesses which

99
00:09:16.100 --> 00:09:19.990
is not what we want it will be impossible for them to get it unless they're very lucky.

100
00:09:20.360 --> 00:09:28.790
So a neat way around that is to generate a random number up when the app is launched and you hopefully

101
00:09:28.790 --> 00:09:34.970
remember although we haven't used it before the uncreate method is where we can run code that will run

102
00:09:35.000 --> 00:09:37.220
when the app is launched.

103
00:09:37.220 --> 00:09:39.760
So if we move out random generation code

104
00:09:42.670 --> 00:09:49.630
to that then the random number will be generated when the app is launched rather than when the button

105
00:09:49.840 --> 00:09:52.100
is clicked which is much better.

106
00:09:52.690 --> 00:09:58.120
But there is a small problem with the code in its current form and that is if we try and access this

107
00:09:58.180 --> 00:10:03.410
integer up here that will work.

108
00:10:03.460 --> 00:10:08.470
It doesn't know about that variable up there in the guess method.

109
00:10:08.530 --> 00:10:11.560
So to get round that we can define our integer

110
00:10:14.270 --> 00:10:17.270
outside of these two methods.

111
00:10:17.660 --> 00:10:24.440
And this is something known as variable scope that anything defined outside a method will be available

112
00:10:24.470 --> 00:10:30.650
within that method but anything defined inside a method like that and will only be available within

113
00:10:30.710 --> 00:10:31.910
that method.

114
00:10:32.450 --> 00:10:42.860
So if we define That's call it random number as an integer there outside the methods I can now use it

115
00:10:42.860 --> 00:10:43.670
here.

116
00:10:46.350 --> 00:10:51.720
And so this will now create a random number generator and then a random number and it will assign that

117
00:10:51.720 --> 00:10:59.490
random number between 1 and 20 to integer random number which is available anywhere in the main activity

118
00:10:59.490 --> 00:11:01.220
class.

119
00:11:01.560 --> 00:11:06.390
So I can now refer to random number right there.

120
00:11:06.420 --> 00:11:10.170
So well done if you managed to either figure that out or find a different solution to that particular

121
00:11:10.170 --> 00:11:10.850
problem.

122
00:11:11.130 --> 00:11:16.940
So now we need to test whether that number is higher or lower or equal to the random number.

123
00:11:17.130 --> 00:11:23.880
To do that we're going to need to get the value of their guess and convert it to an integer.

124
00:11:23.970 --> 00:11:26.040
Now again that's something we haven't done before.

125
00:11:26.460 --> 00:11:32.690
So let's do a quick Google search see if we can figure out how to do that.

126
00:11:32.750 --> 00:11:47.190
So again where in Java convert string to integer you may remember we use the pass double function to

127
00:11:47.190 --> 00:11:48.740
convert the string to a double before.

128
00:11:48.740 --> 00:11:55.630
So we're expecting something fairly similar to that and it looks like every guy we've got into yet.

129
00:11:55.720 --> 00:12:04.150
Pass it exactly the same as how the double function works.

130
00:12:04.220 --> 00:12:07.620
So let's see if we can make that work.

131
00:12:08.630 --> 00:12:18.690
So let's create an integer which will be uses guess as an integer and then that's going to be a guess

132
00:12:19.200 --> 00:12:23.030
at it text and then we're going to get the text again.

133
00:12:26.480 --> 00:12:40.560
And convert it to a string and then we want to apply the method integer dot pass it to that say integer

134
00:12:42.120 --> 00:12:50.070
pass it and then the string we want to convert to an integer is that great so that should give us a

135
00:12:50.070 --> 00:12:51.900
guess as an integer.

136
00:12:52.380 --> 00:13:01.210
Now let's start some checking as to whether their guess is greater or less than the random number.

137
00:13:01.410 --> 00:13:03.480
So we'll start with I if

138
00:13:06.590 --> 00:13:15.150
guessing is greater than random number.

139
00:13:15.220 --> 00:13:24.780
So if that's the case we'll create a taste saying lower because that means if their guess is bigger

140
00:13:24.780 --> 00:13:27.710
than the random number they need to get lower.

141
00:13:28.790 --> 00:13:33.240
OK then we'll look to see if

142
00:13:39.600 --> 00:13:45.770
their guess is less than the answer.

143
00:13:45.770 --> 00:13:46.650
So the random number

144
00:13:49.730 --> 00:13:50.760
I could do that if

145
00:13:53.600 --> 00:14:00.900
it was well if you start seeing that the author predicts is not predicting as you would expect probably

146
00:14:00.900 --> 00:14:04.540
means that you've forgotten something or there's a problem in your area code.

147
00:14:07.870 --> 00:14:16.300
So if this is the case we'll then test higher.

148
00:14:16.410 --> 00:14:23.790
And finally if it's neither greater than or less than it must be equal to.

149
00:14:24.750 --> 00:14:28.320
So let's toast to say

150
00:14:32.510 --> 00:14:33.220
that's right.

151
00:14:35.430 --> 00:14:42.040
Now we no longer need this test taste either.

152
00:14:42.060 --> 00:14:44.480
All right so let's give it a try.

153
00:14:44.580 --> 00:14:46.130
We've got a few changes that we need to make

154
00:14:49.810 --> 00:14:50.860
to make the game perfect.

155
00:14:50.870 --> 00:14:54.020
But it should be playable in his current form.

156
00:14:54.370 --> 00:14:56.460
So let's give it a try.

157
00:14:56.470 --> 00:14:59.220
I'll start with a guess of 10.

158
00:14:59.260 --> 00:15:00.150
I need to go lower.

159
00:15:00.160 --> 00:15:07.090
So five lower three higher must be four.

160
00:15:07.240 --> 00:15:08.330
Excellent.

161
00:15:09.000 --> 00:15:09.830
OK.

162
00:15:09.970 --> 00:15:11.320
So the game works.

163
00:15:11.560 --> 00:15:16.900
Of course one big problem is that once CS's guessed at once They're going to want to guess again.

164
00:15:16.900 --> 00:15:23.020
But at the moment it doesn't generate a new random number it just keeps it at that same random number.

165
00:15:23.020 --> 00:15:31.810
So when they get it right let's generate a new random number which we can do in just the same way we

166
00:15:31.810 --> 00:15:32.580
did before.

167
00:15:33.980 --> 00:15:39.180
So we need a new round gests

168
00:15:43.970 --> 00:15:45.240
copy that over.

169
00:15:45.650 --> 00:15:55.390
So I ran it and then next in 20 plus one and let's give the user a message

170
00:15:58.930 --> 00:16:00.000
something like That's right.

171
00:16:00.010 --> 00:16:06.470
Try again just to make it clear that they can then get a new number.

172
00:16:07.090 --> 00:16:08.530
So let's try that out.

173
00:16:12.020 --> 00:16:15.720
If we go so I'll use my cutting in half method again.

174
00:16:15.720 --> 00:16:22.150
So starting with 10 15 12 we've got it's OK.

175
00:16:22.170 --> 00:16:26.530
And then if we get 12 again then it's no longer correct.

176
00:16:31.250 --> 00:16:32.710
Or in the end 9.

177
00:16:32.780 --> 00:16:33.820
Fantastic.

178
00:16:34.190 --> 00:16:43.550
So there's only one change that I want to make to this code and this is to get rid of the three quite

179
00:16:43.550 --> 00:16:46.790
chunky and very similar lines of code that we've got there.

180
00:16:46.790 --> 00:16:50.680
So generally speaking you want to avoid repeating yourself in code.

181
00:16:50.690 --> 00:16:56.510
So for example we wanted to change it from a toast to updating a text field for example we'd have to

182
00:16:56.510 --> 00:16:59.000
update that three times which isn't great.

183
00:16:59.000 --> 00:17:04.040
Not impossible with an app of this scale but if it was a bigger app then we'd want to make this more

184
00:17:04.040 --> 00:17:10.910
efficient and we can do that simply by creating a function to do the toasting for us.

185
00:17:12.410 --> 00:17:18.350
So for example we could do public and again voit because we're not going to be returning anything just

186
00:17:18.350 --> 00:17:28.580
making a toast and I'll call it make toast and this function is going to expect a string which I'll

187
00:17:28.580 --> 00:17:29.840
just call string

188
00:17:34.300 --> 00:17:38.600
and then when we've got the string what the function will do.

189
00:17:41.110 --> 00:17:45.540
Is create a text where the string

190
00:17:50.570 --> 00:17:53.600
is the string that was passed to it.

191
00:17:53.720 --> 00:17:55.140
Very very simple.

192
00:17:55.160 --> 00:18:03.640
So that means I can now replace this line with the command make toast lower.

193
00:18:04.550 --> 00:18:20.890
Similarly I can replace this line with make toast Haja And this line becomes like taste.

194
00:18:20.900 --> 00:18:23.230
That's right.

195
00:18:23.270 --> 00:18:23.840
Try again

196
00:18:27.530 --> 00:18:32.720
because not only is our code more efficient than it was before we've got far less text than we had.

197
00:18:32.780 --> 00:18:37.870
It's also much more easier to update if I want to change the way I display messages to users.

198
00:18:37.880 --> 00:18:44.860
I only have to update this bit of code once rather than updating each bit of code separately.

199
00:18:45.670 --> 00:18:49.590
So just to finally check that that works in the same way that it did before.

200
00:18:50.420 --> 00:18:52.440
Let's do one more run through.

201
00:18:53.080 --> 00:18:58.350
I have a guess of 10 Haja looking good.

202
00:18:58.360 --> 00:18:59.670
18 was correct.

203
00:18:59.670 --> 00:19:04.260
Try again and again given a new number.

204
00:19:04.260 --> 00:19:04.860
Excellent.

205
00:19:04.920 --> 00:19:05.840
So I hope you enjoy that.

206
00:19:05.850 --> 00:19:08.460
And you managed to make a fair bit of it yourself.

207
00:19:09.000 --> 00:19:15.030
We're now going to dive back into Java itself and we're going to start by looking at the great power

208
00:19:15.030 --> 00:19:17.610
that we can get from working with loop's.
