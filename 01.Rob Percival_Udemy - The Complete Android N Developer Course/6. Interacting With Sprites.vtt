WEBVTT
1
00:00:00.540 --> 00:00:05.520
Now that we've got our flapping bird and our background we want to start to get the bird interacting

2
00:00:05.520 --> 00:00:06.490
with us.

3
00:00:06.630 --> 00:00:09.620
So Flappy bird has got a very simple control mechanism.

4
00:00:09.630 --> 00:00:16.020
Essentially all you need to do is touch the screen and then the flappy bird will start flying around.

5
00:00:16.020 --> 00:00:19.310
So how do we get a tap to be detected.

6
00:00:19.320 --> 00:00:20.280
It's very straightforward.

7
00:00:20.280 --> 00:00:31.650
We do it in the window method and we look for GDX dart input and then you can see there's lots of possible

8
00:00:31.650 --> 00:00:37.740
options so you can even work with the accelerometer and other fancy bits and bobs.

9
00:00:37.890 --> 00:00:49.360
We want to look for just touched so this will be called every time the screen is tapped.

10
00:00:49.370 --> 00:00:56.850
So for now let's just log something saying that it's been tapped when you're working with IGDA zap.

11
00:00:56.900 --> 00:01:03.740
It's best to use the GDX app logging commands.

12
00:01:03.770 --> 00:01:11.200
So we use GDX start up log and then something like touched.

13
00:01:11.600 --> 00:01:11.870
Yep

14
00:01:15.210 --> 00:01:16.020
there we go.

15
00:01:16.430 --> 00:01:24.510
So now we should find of course that we get something added to the logs every time we touch the screen.

16
00:01:24.660 --> 00:01:29.440
And what we actually want is for this bird to drop out of the sky.

17
00:01:29.760 --> 00:01:36.480
And then when we tap the screen for the bird to essentially be given a shelf as if something's hit it

18
00:01:36.480 --> 00:01:41.010
from underneath and it flies up and then continues its fall.

19
00:01:41.010 --> 00:01:47.690
So essentially we want to create a gravity system which is actually surprisingly easy to create.

20
00:01:47.700 --> 00:01:48.300
Here we go.

21
00:01:48.300 --> 00:01:55.130
So let's get the logs showing and then I'll tap the screen and there we go.

22
00:01:55.350 --> 00:02:00.400
You can see they're definitely responding to that touch.

23
00:02:01.540 --> 00:02:02.340
OK.

24
00:02:03.030 --> 00:02:10.830
So if we wanted to move the bird talking let's set up gravity and then we'll set up our touch to interact

25
00:02:10.830 --> 00:02:12.180
with that.

26
00:02:12.180 --> 00:02:15.750
So for our gravity we're going to need to know two things about this bird.

27
00:02:15.810 --> 00:02:20.260
We're going to need to know its position and its velocity or its speed.

28
00:02:20.310 --> 00:02:21.650
So let's set that up

29
00:02:25.310 --> 00:02:34.910
so we'll create these as floats and then I'm going to call the position bird.

30
00:02:34.950 --> 00:02:36.480
Why now.

31
00:02:36.510 --> 00:02:39.720
The x coordinate of the bird is always going to be the same.

32
00:02:39.720 --> 00:02:43.650
That's the horizontal coordinate because it's always going to be in the center of the screen.

33
00:02:43.740 --> 00:02:48.600
It appears to be moving to the right but it actually stays in the center of the screen all the time.

34
00:02:48.780 --> 00:02:53.690
So it's only the Y or vertical position that will change.

35
00:02:54.420 --> 00:02:56.560
And also that 0 initially.

36
00:02:56.700 --> 00:03:06.380
But we don't want it to be zero for long because we want it to be equal to where the bird starts.

37
00:03:06.960 --> 00:03:12.470
So that's going to be initially this position here.

38
00:03:14.600 --> 00:03:20.210
Now we could build this into the Renda method but we only need to get the height once right at the beginning.

39
00:03:20.210 --> 00:03:27.240
So to make it more efficient we'll do it in the create method.

40
00:03:27.560 --> 00:03:29.480
So it only happens once.

41
00:03:30.050 --> 00:03:38.900
So we want bird Y to be set to GDX dark graphics don't get height and then birds top flap state to get

42
00:03:38.900 --> 00:03:41.040
height divided by two.

43
00:03:41.870 --> 00:03:46.080
And both these birds have the same height.

44
00:03:46.100 --> 00:03:49.490
The only difference between them is one of the wings up and the other has got the wings down so actually

45
00:03:49.490 --> 00:03:51.410
it doesn't matter which one we use.

46
00:03:51.410 --> 00:03:56.820
So just to make things a little clearer I'm going to use birds zero rather than birds flap state.

47
00:03:56.940 --> 00:03:59.030
OK so now this will work.

48
00:03:59.160 --> 00:04:01.720
As it stands in the same way as it has already.

49
00:04:02.340 --> 00:04:12.880
So let's set up our velocity which is going to be how fast the bird is moving and again after that initially

50
00:04:12.880 --> 00:04:13.840
to be zero.

51
00:04:14.290 --> 00:04:15.800
And then what will the is.

52
00:04:15.830 --> 00:04:19.150
Will increase the velocity each time.

53
00:04:21.870 --> 00:04:33.570
The rendah loop is called and then will increase or decrease the Y.

54
00:04:34.140 --> 00:04:43.110
So the position of the bird by the velocity.

55
00:04:43.270 --> 00:04:44.800
So this is going to increase the velocity.

56
00:04:44.800 --> 00:04:52.570
Each time the Renda loop is called and it's going to decrease the birds y coordinate by the velocity.

57
00:04:52.570 --> 00:04:55.000
So we're going to get this effect of gravity as it falls.

58
00:04:55.000 --> 00:04:57.790
It's going to fall faster and faster.

59
00:04:57.820 --> 00:05:03.550
Now one thing I'm going to do before we run that is if if this is how you run it then the bird will

60
00:05:03.550 --> 00:05:07.840
likely drop off the bottom of the screen before you can do anything about it.

61
00:05:07.870 --> 00:05:12.260
So I'm going to create a variable that will need anyway.

62
00:05:12.710 --> 00:05:15.730
It's an integer called game state.

63
00:05:16.360 --> 00:05:19.670
And this will just keep track of the state of the game.

64
00:05:19.960 --> 00:05:27.250
So initially we're going to obviously just have the bird hovering in the middle as it is just that until

65
00:05:27.250 --> 00:05:30.550
the user taps the screen and then gravity will kick in.

66
00:05:31.000 --> 00:05:36.460
So for all of this we need to check if

67
00:05:39.760 --> 00:05:43.930
game state is not zero or

68
00:05:47.410 --> 00:05:55.490
so we're going to do all of the processing only if the game state is not saying we're And then when

69
00:05:58.630 --> 00:06:00.860
the game is touched the screen is touched.

70
00:06:00.910 --> 00:06:04.750
We're going to set game state

71
00:06:10.320 --> 00:06:13.060
equal to one.

72
00:06:13.090 --> 00:06:20.870
Now I'm actually going to just copy that and we're going to have this in an else statement.

73
00:06:23.250 --> 00:06:28.050
There because we only need to do this particular check if the game state is zero.

74
00:06:28.300 --> 00:06:32.280
Most of the time especially when there's lots going on the game state is not going to be zero.

75
00:06:32.400 --> 00:06:37.290
So to save having to do that check every time we'll put it inside an else statement here.

76
00:06:37.770 --> 00:06:42.540
And of course when you're making a game you do need to be fairly careful about system resources and

77
00:06:42.540 --> 00:06:44.280
do things as efficiently as possible.

78
00:06:44.280 --> 00:06:49.350
So we'll take reasonable steps to make our game efficient even though our game isn't particularly resource

79
00:06:49.350 --> 00:06:50.490
heavy.

80
00:06:51.290 --> 00:06:52.790
OK.

81
00:06:54.060 --> 00:07:00.840
So that will make game state equal to one which will then kick in with our velocity and our bird movement.

82
00:07:00.840 --> 00:07:02.790
And of course we will need to

83
00:07:05.970 --> 00:07:15.640
just copy that part of the code into games tapings there because we still want to see the background

84
00:07:15.700 --> 00:07:20.830
and the flappy bird either way.

85
00:07:20.830 --> 00:07:25.510
In fact while compiling compiling Oh just change it so that

86
00:07:31.170 --> 00:07:33.010
we get that every time.

87
00:07:34.130 --> 00:07:38.480
So we don't have to have the Katowice

88
00:07:42.080 --> 00:07:42.460
that we got.

89
00:07:42.480 --> 00:07:47.360
So it's only this velocity which is changing everything.

90
00:07:47.360 --> 00:07:55.410
It makes more sense probably to put that at the end rather than at the beginning then it will do the

91
00:07:55.420 --> 00:07:58.910
recalculated locations depending on the velocity etc..

92
00:07:59.410 --> 00:08:06.070
And we want the flip state calculations to happen either way as well.

93
00:08:08.950 --> 00:08:14.290
So there'll be a lot more code in this if game state is not zero or part because this is maybe where

94
00:08:14.290 --> 00:08:17.080
we put our game logic and our tubes and everything else.

95
00:08:17.110 --> 00:08:22.980
But for now it's pretty pretty very it would go.

96
00:08:23.240 --> 00:08:25.610
So let's tap.

97
00:08:25.700 --> 00:08:26.400
There we go.

98
00:08:26.720 --> 00:08:27.910
Fantastic.

99
00:08:27.920 --> 00:08:30.550
Now what was find that a little bit slower than I would have liked.

100
00:08:30.620 --> 00:08:33.820
So you can of course experiment with how you want this to work.

101
00:08:34.040 --> 00:08:43.660
But what I'm going to do is set a another variable here called gravity.

102
00:08:44.340 --> 00:08:51.810
And because one seemed to be a little bit slow I'm going to initially set it to be equal to two actually

103
00:08:51.820 --> 00:08:57.490
let's make it a flight because we're going to be using it to work with flights and you might want to

104
00:08:57.490 --> 00:09:00.980
have 1.5 if you want to get it just right.

105
00:09:01.390 --> 00:09:08.810
So instead of increasing velocity by one will increase it by gravity.

106
00:09:11.190 --> 00:09:11.620
OK.

107
00:09:11.700 --> 00:09:13.360
So we'll see how that works.

108
00:09:13.410 --> 00:09:19.740
Now the way we want our interaction to work is if the game state is not zero.

109
00:09:19.740 --> 00:09:25.560
So if we're playing the game we won't when the use the taps to screen

110
00:09:29.730 --> 00:09:39.270
the birds to receive essentially a shove upwards which is the same thing as giving the bird a certain

111
00:09:39.270 --> 00:09:40.560
velocity.

112
00:09:40.560 --> 00:09:48.540
Now I've played around with this and I think a velocity of minus 20 works quite well.

113
00:09:48.680 --> 00:09:50.900
But let's run it and take a look.

114
00:09:51.650 --> 00:09:57.690
So if we give the bird a velocity of minus 20 because we're subtracting the velocity each time that

115
00:09:57.690 --> 00:10:00.450
will subtract a negative number.

116
00:10:00.450 --> 00:10:05.650
So it will add to the bed height and the bird will shoot up into the air.

117
00:10:07.500 --> 00:10:11.000
Now slight alteration as well I think it makes just a little bit more sense.

118
00:10:11.040 --> 00:10:16.090
Even that will work in much the same way to adjust the birds

119
00:10:18.550 --> 00:10:27.510
velocity and location just after the touch rather than before.

120
00:10:28.130 --> 00:10:29.840
So let's give it a try now.

121
00:10:30.000 --> 00:10:40.150
So once there we get and you can see you can now tap and the bird does indeed head up what's

122
00:10:42.860 --> 00:10:45.910
and then falls back down to actually looking at that.

123
00:10:45.980 --> 00:10:49.910
Maybe let's try something like 30 and see how that works.

124
00:10:50.120 --> 00:10:55.880
And one alteration before we're done with our game controls is I found during development it's frustrating

125
00:10:55.880 --> 00:10:58.220
that the bird disappears off the bottom of the screen.

126
00:10:58.400 --> 00:11:01.160
And so it's difficult to test things.

127
00:11:01.160 --> 00:11:14.630
So what I'm going to do to avoid that is look at bird wide and if Bird Y is less than zero or in fact

128
00:11:14.630 --> 00:11:15.460
let's do it the other way around.

129
00:11:15.470 --> 00:11:17.510
If bird Y is greater than zero

130
00:11:21.360 --> 00:11:25.620
so this will stop the bird going off the bottom of the screen it will stop also.

131
00:11:25.670 --> 00:11:28.710
However our ability to shoot the bird up.

132
00:11:28.710 --> 00:11:40.210
So let's have a quick or velocity is less than zero.

133
00:11:40.760 --> 00:11:48.800
And then that will allow us to shoot the bird up either when we're in flying mode.

134
00:11:48.810 --> 00:11:56.560
So we're in above the bottom of the screen or if we give it a tap.

135
00:11:57.300 --> 00:12:03.360
So essentially it will allow us to move the bed up wherever we like but it will stop the bird moving

136
00:12:03.360 --> 00:12:09.510
downwards once it gets to the bottom of the screen we just make our lives a lot easier when we're doing

137
00:12:09.510 --> 00:12:10.330
testing.

138
00:12:10.350 --> 00:12:15.090
We didn't have to get in there and keep the bird at the top of the screen all the time.

139
00:12:15.090 --> 00:12:16.550
So here we go.

140
00:12:17.240 --> 00:12:17.660
Yes.

141
00:12:17.700 --> 00:12:22.310
I'm liking the way that that moves around now and then see what happens.

142
00:12:22.350 --> 00:12:28.430
The bottom of the screen then the bird stops and we can still move the bat upwards.

143
00:12:28.650 --> 00:12:36.910
So believe me that don't make it that will make life a lot easier when we're testing OK.

144
00:12:37.230 --> 00:12:39.500
So now we've created our interaction with our bird.

145
00:12:39.510 --> 00:12:42.630
We've actually got quite a long way already into a game creation.

146
00:12:42.640 --> 00:12:48.390
Our next step is to bring in our troops and start creating several of them and get them moving from

147
00:12:48.390 --> 00:12:51.650
right to left and we'll do that in the next few.
