1
00:00:00,410 --> 00:00:06,540
Our next challenge involves making a guess the celebrity app for which we're going to need to download

2
00:00:06,540 --> 00:00:10,380
the names and images of a bunch of celebrities.

3
00:00:10,380 --> 00:00:16,260
Now I found this web site 24 dot com slash celebrities which gives a list of apparently the top 100

4
00:00:16,710 --> 00:00:19,510
celebrities I'm not sure how they're ranked but there they are.

5
00:00:19,740 --> 00:00:23,780
So that would be a very useful list for us for our app.

6
00:00:23,820 --> 00:00:30,630
Now what we'll need to do is look at the code of this page which we can do as we've seen before by control

7
00:00:30,630 --> 00:00:32,340
clicking or right clicking and

8
00:00:35,220 --> 00:00:37,050
clicking view page source.

9
00:00:37,050 --> 00:00:43,970
Make sure you click on that wipe it there and then you can see the familiar h h d l of the page.

10
00:00:44,520 --> 00:00:49,720
And if we look here you can see this is the Nicki Minaj section.

11
00:00:49,740 --> 00:00:53,390
And we've got the source image there.

12
00:00:53,400 --> 00:00:59,760
So we're going to need that and we're going to need the name which we can get either from there or from

13
00:00:59,760 --> 00:01:04,500
the old tag of the image itself.

14
00:01:04,560 --> 00:01:10,450
So we're going to need to be able to extract those two bits of information for each person in the list

15
00:01:10,590 --> 00:01:14,480
so there's the next person there's the next one et cetera.

16
00:01:14,850 --> 00:01:18,570
So to be able to do that we're going to need to be able to manipulate strings in a rather more advanced

17
00:01:18,570 --> 00:01:21,120
way than we're currently capable of.

18
00:01:21,120 --> 00:01:23,410
So let's just see how we do that.

19
00:01:23,430 --> 00:01:26,440
And again this is Java rather than anything Android specific.

20
00:01:26,460 --> 00:01:30,960
So it's a little bit easier if we work in pro x y dot com.

21
00:01:31,260 --> 00:01:39,430
So click try to get the Hellewell project and then just start just to make sure everything's looking

22
00:01:39,430 --> 00:01:40,610
good.

23
00:01:41,530 --> 00:01:42,220
All right.

24
00:01:42,490 --> 00:01:50,060
So the first thing we're going to need to do is to split the single big string into lots of smaller

25
00:01:50,060 --> 00:01:50,900
strings.

26
00:01:50,900 --> 00:01:54,430
So like the last one this one and that one.

27
00:01:54,680 --> 00:02:00,210
And fortunately there's a method in Java that does that for us which is called split.

28
00:02:00,230 --> 00:02:02,690
So let's quickly see how we use it.

29
00:02:03,890 --> 00:02:12,100
Let's create a string which I'll call my string which I will have a bunch of strings.

30
00:02:12,200 --> 00:02:16,520
Have names and will separate those names by the letter X

31
00:02:20,660 --> 00:02:25,550
names that you're probably fed up with having shoved down your throat for the moment but there we get.

32
00:02:25,790 --> 00:02:27,810
You can obviously choose your own names.

33
00:02:27,860 --> 00:02:34,900
So for some reason I seem to have a string with a bunch of XS in and names separated by those Xs.

34
00:02:35,180 --> 00:02:41,060
So if I wanted to separate that into an array which contained each of the names and what I could do

35
00:02:42,920 --> 00:02:49,750
is create an array of strings like that and I'll call it split string.

36
00:02:51,780 --> 00:02:57,200
And then I'm going to take my string and split it

37
00:03:00,490 --> 00:03:05,120
by the letter x.

38
00:03:05,170 --> 00:03:10,000
So what that does is hopefully fairly straightforward it takes my string and then it splits it into

39
00:03:10,000 --> 00:03:12,820
an array by the letter X..

40
00:03:13,060 --> 00:03:15,930
Then we just need to display that in the logs.

41
00:03:16,330 --> 00:03:26,230
So we use system thought out to print line and then again we can convert our array to a string.

42
00:03:27,190 --> 00:03:33,740
So will use arrays to string and we want to convert split string

43
00:03:36,970 --> 00:03:41,650
and to do that we'll need to import Java.

44
00:03:41,700 --> 00:03:46,790
Don't you tell Dot arrays.

45
00:03:48,800 --> 00:03:53,800
OK let's take a look that we get.

46
00:03:54,120 --> 00:03:57,070
So we've got Rob cast in Tommy and Ralphy as an array.

47
00:03:57,080 --> 00:03:59,420
Now there's a slight problem here.

48
00:03:59,430 --> 00:04:03,660
Before I tell you what that problem is and see if you can work out why we've got this kind of weird

49
00:04:03,660 --> 00:04:07,010
spacing issue here and what we could do here to solve it.

50
00:04:07,070 --> 00:04:07,770
Go for it.

51
00:04:12,080 --> 00:04:13,530
Did you figure it out.

52
00:04:13,550 --> 00:04:19,830
The problem is of course that between Rob and Kersten is not just an X but there's a space as well as

53
00:04:19,910 --> 00:04:29,270
Rob Space X space Keston so simple fix would be to instead of just splitting it by X split it by Space

54
00:04:29,390 --> 00:04:37,750
X and then space and then you can say we just get the names in an array like that.

55
00:04:37,790 --> 00:04:38,240
All right.

56
00:04:38,240 --> 00:04:41,770
Quick challenge for you then let's get rid of that.

57
00:04:41,810 --> 00:04:49,010
Can you create a string which is equal to the name Mississippi and then split it according to the letter

58
00:04:49,140 --> 00:04:54,620
S and before you do it try and write down what the result is going to be.

59
00:04:55,650 --> 00:05:02,280
So try and create a string which is equal to Mississippi and split it according to the letter S and

60
00:05:02,280 --> 00:05:05,780
before you do it try to anticipate what the result is going to be.

61
00:05:05,790 --> 00:05:06,300
Good luck.

62
00:05:11,920 --> 00:05:12,670
All right.

63
00:05:14,610 --> 00:05:16,090
I'm going to create a string.

64
00:05:16,100 --> 00:05:17,890
I'll call it River.

65
00:05:18,690 --> 00:05:23,510
The big challenge here of course was spelling Mississippi correctly.

66
00:05:23,640 --> 00:05:24,660
I did have to look it up.

67
00:05:24,660 --> 00:05:27,600
I have to admit but I would get.

68
00:05:28,200 --> 00:05:33,150
And then we'll create our array.

69
00:05:34,000 --> 00:05:42,700
I'll call it split up and we're going to take river and we're going to split it by the letter S.

70
00:05:45,670 --> 00:06:00,050
Go and then system taught how to print line and then Jorge's taught to string splits river

71
00:06:03,610 --> 00:06:04,720
and let's have a look.

72
00:06:04,840 --> 00:06:08,390
Hopefully it will be what you guessed so slightly strange your way.

73
00:06:08,740 --> 00:06:15,550
So obviously before the first s We've got just an eye which goes there then between the first and second

74
00:06:15,550 --> 00:06:16,450
as there's nothing.

75
00:06:16,480 --> 00:06:23,590
So we've got an empty portion of our right that then between the next two S's we've got an eye which

76
00:06:23,590 --> 00:06:29,120
is that then between those two S's we've got nothing again.

77
00:06:29,140 --> 00:06:32,180
And then after the final last week I API.

78
00:06:32,230 --> 00:06:37,540
So that's why we get that strange array that hopefully that's what you guessed.

79
00:06:37,590 --> 00:06:38,230
OK.

80
00:06:38,350 --> 00:06:43,780
So that's the first part I'm just going to comment that out for now.

81
00:06:43,780 --> 00:06:45,540
So now we can now split strings

82
00:06:48,290 --> 00:06:54,090
by another string saying we're going to need to do is to get a portion of a string.

83
00:06:54,170 --> 00:07:00,350
So we're going to need as I mentioned that piece of the string and also that bit.

84
00:07:00,490 --> 00:07:02,360
So let's see how we do that.

85
00:07:05,790 --> 00:07:09,240
Let's start by creating a string again.

86
00:07:09,510 --> 00:07:17,130
And actually I think I'm going to use Mississippi again mostly because I just like saying it.

87
00:07:17,130 --> 00:07:20,400
So if we want to return a part of that string

88
00:07:24,260 --> 00:07:26,240
you might call it rip apart.

89
00:07:26,250 --> 00:07:31,680
Then we can take how Reeva and get a substring of it

90
00:07:34,440 --> 00:07:41,800
and for example we could do something like substring to comma five.

91
00:07:41,900 --> 00:07:44,990
Let's just have a look and see what that gives us.

92
00:07:48,810 --> 00:07:53,940
We don't need to convert this time we can just do it directly because it's a string.

93
00:07:56,000 --> 00:07:58,790
So that gives us s s o.

94
00:07:59,510 --> 00:08:02,740
So what's going on there is that this is returning.

95
00:08:02,870 --> 00:08:12,300
If we think of these letters as being 0 1 2 3 4 5 et cetera then the zeroth letter is M and number 1

96
00:08:12,300 --> 00:08:12,930
is.

97
00:08:12,960 --> 00:08:21,630
So it starts with number 2 which is that first X and then it keeps going until the one before the last

98
00:08:21,750 --> 00:08:22,440
letter.

99
00:08:23,720 --> 00:08:26,360
So we've got two three and then four.

100
00:08:26,450 --> 00:08:35,090
But not including five so quick challenge then can you change the numbers so that instead of getting

101
00:08:35,170 --> 00:08:36,620
SSI we get.

102
00:08:36,710 --> 00:08:42,520
I asked as I said that middle portion there different

103
00:08:47,640 --> 00:08:48,880
you manage that.

104
00:08:49,000 --> 00:08:52,500
So this will be 0 1 2 3 4.

105
00:08:52,520 --> 00:08:59,680
So our first number is four four five six seven eight.

106
00:08:59,990 --> 00:09:08,090
So we want to go up to but not including eight that's just check that you give us SSI.

107
00:09:08,390 --> 00:09:09,480
That we go.

108
00:09:10,080 --> 00:09:15,360
So that's pretty useful in itself but it doesn't quite solve the problem that we have because we don't

109
00:09:15,360 --> 00:09:21,380
necessarily know exactly which number which character is going to be the ones that we want.

110
00:09:21,390 --> 00:09:26,710
So we actually want to track down a particular string of characters.

111
00:09:27,120 --> 00:09:34,890
So I'm going to show you a third way of working with strings which I think is more powerful than the

112
00:09:34,890 --> 00:09:38,300
first two put together by a little bit tricky to get to grips with.

113
00:09:38,670 --> 00:09:40,100
It's known as rejects.

114
00:09:40,240 --> 00:09:40,500
Sure.

115
00:09:40,500 --> 00:09:46,530
For regular expressions and is actually a cross language way of manipulating strings.

116
00:09:46,530 --> 00:09:48,440
I'm just going to show you the basics of it here.

117
00:09:48,450 --> 00:09:55,890
But if you do a google for Java rejects e.g. X then you'll get loads of ways that you can do more advanced

118
00:09:55,890 --> 00:09:57,300
things with strings.

119
00:09:57,360 --> 00:09:59,080
What we're going to do here.

120
00:09:59,790 --> 00:10:05,390
So with the way it works is we start off by creating a pattern.

121
00:10:05,790 --> 00:10:11,100
So let's actually create a string to work with first.

122
00:10:11,100 --> 00:10:14,400
So let's stick with Mississippi.

123
00:10:14,520 --> 00:10:15,700
Why not.

124
00:10:16,440 --> 00:10:26,490
And then we normally call our pattern P and that is a pattern and we're going to compile a pattern from

125
00:10:28,020 --> 00:10:30,290
a piece of rejects.

126
00:10:30,300 --> 00:10:33,360
Now rejects is a kind of a language as I say all on its own.

127
00:10:33,450 --> 00:10:39,690
But the most important thing that we're going to use it for is for finding the content between two other

128
00:10:39,690 --> 00:10:41,160
strings.

129
00:10:41,310 --> 00:10:47,580
And so let's say we want to find what's between MRI and PIII.

130
00:10:47,730 --> 00:10:50,720
So that is obviously we know that it's there.

131
00:10:50,750 --> 00:10:58,250
So as I said IP but if we wanted to find that for our general string then what we would do is type II

132
00:10:59,130 --> 00:11:06,660
and then the rechecks code forgetting the string between those two which is brackets.

133
00:11:06,660 --> 00:11:15,520
And then inside that brackets dot star question mark and then PIII.

134
00:11:16,270 --> 00:11:25,660
So what this means is find M-I and find PIII and then return whatever you find between the two of them.

135
00:11:25,690 --> 00:11:26,560
Simple as that.

136
00:11:26,680 --> 00:11:29,230
I'm not going to go into details of where that comes from.

137
00:11:29,250 --> 00:11:33,460
Again you can look that up and find information of what the DOT stock question mark is actually doing

138
00:11:33,670 --> 00:11:38,800
but it's pretty complicated and we don't really need all that detail of rejects right now.

139
00:11:38,800 --> 00:11:45,760
We just need to use it to find the strings within our string.

140
00:11:46,780 --> 00:11:59,770
So now that we've got that pattern we create a matcher call it m which is P L pattern and then we're

141
00:11:59,770 --> 00:12:03,660
going to match it against our string.

142
00:12:04,120 --> 00:12:13,640
So river so I'll match just matches our pattern against our original string and see if it can find anything.

143
00:12:13,700 --> 00:12:17,990
Obviously it might find something it might find nothing or might find more than one thing if we had

144
00:12:17,990 --> 00:12:21,840
the word Mississippi twice then it would return to different results.

145
00:12:22,280 --> 00:12:30,560
So the way we do with that is we use a while loop and then we take our Maacha and we find with it

146
00:12:33,300 --> 00:12:41,400
so this will set our matcher going so we'll look for matches to how pattern in our original string river.

147
00:12:41,580 --> 00:12:44,760
And it will keep doing this loop as long as it finds them.

148
00:12:45,760 --> 00:12:49,080
And we just want to output the results of that.

149
00:12:49,150 --> 00:12:59,520
So we do that using system out of print line and we take how matcher and to get the actual result that

150
00:12:59,520 --> 00:13:00,580
we want.

151
00:13:00,580 --> 00:13:10,370
We use matcher group and then 1 so that will return the result itself.

152
00:13:10,750 --> 00:13:16,430
And as before we need to add the import for that.

153
00:13:16,570 --> 00:13:17,770
So that's import

154
00:13:21,350 --> 00:13:22,170
Java.

155
00:13:22,310 --> 00:13:38,410
Don't you still dot rejects thought pattern and all say we need java or you to talk rejects don't match.

156
00:13:39,190 --> 00:13:42,350
All right let's take a look them.

157
00:13:43,630 --> 00:13:47,860
We run that code and you can see what is returned is SSI.

158
00:13:47,860 --> 00:13:55,530
SSI P which is everything between MRI and PIII.

159
00:13:55,770 --> 00:14:04,620
And if we had all of that twice and we run it again it would print it twice prints it every time it

160
00:14:04,620 --> 00:14:08,180
finds it in holstering.

161
00:14:08,220 --> 00:14:11,010
So that's an extremely powerful process.

162
00:14:11,100 --> 00:14:18,960
And as I challenge I'm going to require you to actually use it in our Kate

163
00:14:22,240 --> 00:14:23,210
over here.

164
00:14:23,620 --> 00:14:33,190
So let's say we've managed to get as string and we want to extract the SIRC here.

165
00:14:34,140 --> 00:14:35,920
And the old tag.

166
00:14:36,230 --> 00:14:38,840
So to get the name essentially.

167
00:14:38,850 --> 00:14:43,200
One quick thing we're going to need to do first is escape all of these

168
00:14:45,970 --> 00:14:49,360
double quites as we've seen before

169
00:14:52,030 --> 00:14:57,580
Java it would by default think that the double quote meant oh this is the end of the string but it doesn't

170
00:14:58,180 --> 00:15:01,040
until the actual end of the string.

171
00:15:01,090 --> 00:15:06,250
We need to put a backslash in front of it to say no this is just part of our string not a sign that

172
00:15:06,250 --> 00:15:08,060
we want to end the string.

173
00:15:08,100 --> 00:15:08,500
All right then.

174
00:15:08,530 --> 00:15:09,600
So your challenge.

175
00:15:09,850 --> 00:15:17,140
Preferably not looking at this code but use it if you need to is to extract the two bits of information

176
00:15:17,140 --> 00:15:18,150
that we need.

177
00:15:18,250 --> 00:15:21,690
So that is the you are all there.

178
00:15:23,310 --> 00:15:25,700
And the nine Caitlyn Jenner.

179
00:15:26,280 --> 00:15:34,910
Good luck.

180
00:15:34,920 --> 00:15:35,750
All right.

181
00:15:35,990 --> 00:15:38,180
Well that was a pretty tough challenge.

182
00:15:38,340 --> 00:15:43,980
I'm actually going to do it by just renaming that first of all.

183
00:15:44,010 --> 00:15:45,980
It's not it's not really a river.

184
00:15:46,860 --> 00:15:59,190
So let's start off by getting R C source u r l and we'll do this by creating a pattern P and we're going

185
00:15:59,190 --> 00:16:02,840
to compile a pattern.

186
00:16:03,250 --> 00:16:12,620
And what we're interested in I'm going to have the start of al-Qaeda's S R C equals and then backslash

187
00:16:13,580 --> 00:16:20,990
double quotes again and then we have the parentheses with dot star.

188
00:16:21,260 --> 00:16:29,800
Question mark in and then we want to have everything up to the next double quotes

189
00:16:33,580 --> 00:16:39,400
and then we end the string with an actual double quotes and then that's our pattern.

190
00:16:39,400 --> 00:16:42,130
So what we're going to use to compile our pattern with.

191
00:16:42,130 --> 00:16:46,000
So that's the bit that we're looking for before the bit that we're interested in.

192
00:16:46,090 --> 00:16:52,930
And then we want everything up to the next double quotes within the string.

193
00:16:53,160 --> 00:16:53,820
OK.

194
00:16:54,330 --> 00:16:56,130
So that's the tricky bit.

195
00:16:56,310 --> 00:16:58,270
The rest of it is exactly the same as before.

196
00:16:58,500 --> 00:16:59,290
So much.

197
00:16:59,320 --> 00:17:06,450
M is equal t p don't match the h t m l.

198
00:17:07,770 --> 00:17:11,880
And then while M dot find

199
00:17:18,130 --> 00:17:29,190
and we want system out dot print line and Dot group 1.

200
00:17:29,220 --> 00:17:31,180
All right.

201
00:17:31,180 --> 00:17:32,520
Fingers crossed.

202
00:17:33,130 --> 00:17:37,840
OK now we've got an interesting error there so I thought I'd leave that one in because you may well

203
00:17:37,840 --> 00:17:42,340
have seen something like that if you copy it all of that and what actually happens there is this line

204
00:17:42,340 --> 00:17:48,170
break breaks our code because Java thinks we want to go into a new instruction.

205
00:17:48,250 --> 00:17:56,890
So what I'll do for now is just remove all the line breaks in that string so it becomes just a single

206
00:17:56,890 --> 00:18:00,300
long string and then our code is more or less unchanged by that.

207
00:18:00,310 --> 00:18:05,080
We'll see how we actually get to deal with that in the app itself later on.

208
00:18:05,080 --> 00:18:12,940
And there we go you can see that now without those errors we've got the you are all that we need.

209
00:18:12,940 --> 00:18:13,450
Fantastic.

210
00:18:13,450 --> 00:18:22,020
So that's the you are el I'm going to actually just copy and paste because my code next time is going

211
00:18:22,020 --> 00:18:29,830
to be pretty similar except we're not going to create PNM this time because they're already created.

212
00:18:29,880 --> 00:18:36,810
So now what we need to do is work out what we need to get Caitlyn Jenner and I think we'll use the old

213
00:18:36,870 --> 00:18:45,970
equals and then they escaped quotes there as are set up to the string before the bit that we're interested

214
00:18:45,970 --> 00:18:46,630
in.

215
00:18:46,630 --> 00:18:49,100
And the bit after is actually the same as before.

216
00:18:49,330 --> 00:18:53,310
So those double quotes once again.

217
00:18:53,590 --> 00:18:56,740
So that with any luck should get us the code that we need.

218
00:18:56,740 --> 00:18:58,090
Fantastic.

219
00:18:58,090 --> 00:19:01,510
So there's the u r l and there's the name.

220
00:19:01,930 --> 00:19:06,850
So that is actually all we need to get all the data that we're interested in for our app.

221
00:19:06,850 --> 00:19:07,840
Guess the celebrity.

222
00:19:07,930 --> 00:19:11,190
So now we're ready to go and let's make it in the next lecture.
