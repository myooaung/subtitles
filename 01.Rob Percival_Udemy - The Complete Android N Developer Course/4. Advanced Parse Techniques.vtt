WEBVTT
1
00:00:00.570 --> 00:00:05.250
Now that we are all set up where the path server on A-type us we're going to spend a couple of videos

2
00:00:05.700 --> 00:00:13.190
seeing how we can work with pass objects to save restore and search objects on our past server.

3
00:00:13.950 --> 00:00:21.030
So I'm going to start by just deleting this code which is really only there to make sure your pulse

4
00:00:21.030 --> 00:00:29.690
installation is working correctly and we're going to be writing our code live in main activity.

5
00:00:29.700 --> 00:00:36.000
So let's say we're making a game and we want to save the user score on pass to share it between devices

6
00:00:36.030 --> 00:00:38.710
or to display it on some kind of leader board.

7
00:00:39.150 --> 00:00:45.150
Well what we did is we create a parser objects.

8
00:00:45.450 --> 00:00:55.110
This time we might call it school and this is going to be a new parse object and then we give it a class

9
00:00:55.200 --> 00:01:02.100
name and because it is a class name starts with a capital letter and we can of course call it whatever

10
00:01:02.100 --> 00:01:06.810
we like but something like school would make sense.

11
00:01:06.840 --> 00:01:12.420
So just jumping back over to our data browser at the moment our class that we've created is called example

12
00:01:12.420 --> 00:01:13.440
object.

13
00:01:13.440 --> 00:01:18.880
And we've also got user session as classes as well.

14
00:01:19.050 --> 00:01:22.790
So we don't need to define the score on parse in any way.

15
00:01:22.950 --> 00:01:26.190
If it's not already that then pass will set it up for us.

16
00:01:26.190 --> 00:01:33.840
So then we might want a couple of bits of data in this school object.

17
00:01:33.840 --> 00:01:36.110
So we use school put to do that.

18
00:01:36.300 --> 00:01:44.080
And then you can say we've got string value and object value so the string is the name of the variable

19
00:01:44.080 --> 00:01:45.140
that we want to save.

20
00:01:45.340 --> 00:01:52.860
So for example we might want to use an ATM and then I use an I might be wrong.

21
00:01:53.740 --> 00:02:01.960
And that would then save a variable called name with a value of robbe as a new object within the score.

22
00:02:01.960 --> 00:02:02.560
Clauss

23
00:02:05.730 --> 00:02:13.860
Similarly we might want to put the score itself or maybe I'm doing pretty well at this game and I've

24
00:02:13.860 --> 00:02:19.680
got a score of 86 and that will automatically create it as a certain type so this will of course be

25
00:02:19.680 --> 00:02:23.640
a string and this will be an integer.

26
00:02:24.750 --> 00:02:28.370
And then we've got a number of ways of saving this object.

27
00:02:30.520 --> 00:02:36.640
If I start typing save you can see we've got two main options that we got save in background which is

28
00:02:36.640 --> 00:02:38.300
just the standard safe.

29
00:02:38.620 --> 00:02:44.440
And then we've got save eventually which works a little bit differently and it will save when we have

30
00:02:44.440 --> 00:02:45.600
an opportunity to save.

31
00:02:45.610 --> 00:02:47.440
So maybe the use is off line.

32
00:02:47.590 --> 00:02:54.100
If that's the case then save in background work but eventually we'll remember and then save as soon

33
00:02:54.100 --> 00:02:55.470
as possible.

34
00:02:55.510 --> 00:02:59.530
Normally we're going to one save in background because we're going to want to save right there and then

35
00:02:59.920 --> 00:03:01.670
eventually can be useful as well.

36
00:03:02.770 --> 00:03:09.940
And then notice we've also got callback options so we can just use a standard saving background.

37
00:03:10.420 --> 00:03:14.470
And if we run that that will attempt to save it but it doesn't give us any idea as to whether that's

38
00:03:14.470 --> 00:03:15.720
been successful.

39
00:03:16.000 --> 00:03:20.920
So almost always I think it's a good idea unless you really don't care whether it's been successful

40
00:03:20.920 --> 00:03:21.420
or not.

41
00:03:21.580 --> 00:03:34.470
To use the callback option and then to add a callback we just create a new safe callback that we go.

42
00:03:34.500 --> 00:03:41.220
And that will give us a done method which would be called when the save is done either successfully

43
00:03:41.220 --> 00:03:42.090
or not.

44
00:03:42.270 --> 00:03:49.460
And then the easiest way to check if it's been successful is look for an error or an exception.

45
00:03:50.040 --> 00:03:53.220
And if there isn't one i.e. if he is no

46
00:03:55.800 --> 00:03:57.210
then we can log

47
00:04:01.940 --> 00:04:12.120
something like save in background as our tag and successful as our message

48
00:04:16.310 --> 00:04:18.320
and of course if that's not the case

49
00:04:21.010 --> 00:04:25.240
then we can log save in

50
00:04:28.100 --> 00:04:28.910
background

51
00:04:31.790 --> 00:04:43.760
failed and if we want see we could add the error which we might use we don't to string or something

52
00:04:43.760 --> 00:04:44.320
like that.

53
00:04:47.360 --> 00:04:50.180
So let's just quickly see that in action.

54
00:04:50.180 --> 00:04:51.270
Hopefully that's fairly clear.

55
00:04:51.280 --> 00:04:56.560
We're setting up a parcel object called score which is of a class score.

56
00:04:56.840 --> 00:05:02.000
We're adding a user name and a score to it and then we're saving in the background with a callback to

57
00:05:02.000 --> 00:05:06.200
check if it's been successful or not if it has we're LOEG successful.

58
00:05:06.320 --> 00:05:08.730
If not we'll log failed.

59
00:05:09.620 --> 00:05:14.470
Let's take a look and there we go.

60
00:05:14.480 --> 00:05:18.910
Looks promising so then it can always go over to our data browser.

61
00:05:20.030 --> 00:05:25.570
And refresh.

62
00:05:25.870 --> 00:05:33.210
And we should see our new school class appearing that without one object within it and there it is as

63
00:05:33.220 --> 00:05:38.520
our school use Gruben school 86 excellent.

64
00:05:38.650 --> 00:05:45.550
So now we know and understand hopefully how to save objects How about restoring them so if we want to

65
00:05:45.550 --> 00:05:48.590
get a value from Passover.

66
00:05:49.420 --> 00:05:55.330
So let's see how to do that or just start by commenting out the save code so that we don't end up saving

67
00:05:55.330 --> 00:05:57.220
that multiple times.

68
00:06:00.040 --> 00:06:06.190
And then to bring back data from APA 7 we use a pass query

69
00:06:09.370 --> 00:06:13.750
and we're running a Pasquarelli on a pass object.

70
00:06:14.860 --> 00:06:16.740
We'll call the query query.

71
00:06:19.020 --> 00:06:21.750
And this is going to be a past query.

72
00:06:21.780 --> 00:06:31.030
Don't get query and we're going to put in the class that we want to query and that's scole

73
00:06:34.280 --> 00:06:46.650
and then we use query to get in background and we'll use the callback version and you can see we need

74
00:06:46.650 --> 00:06:49.800
to provide an object ID.

75
00:06:49.830 --> 00:06:52.690
Now the object ID can be found here.

76
00:06:52.830 --> 00:06:58.500
Every object on pass is automatically given an object ID.

77
00:06:58.500 --> 00:06:59.920
So I'm just going to copy that.

78
00:07:03.090 --> 00:07:13.370
As my object id and will need I get callback.

79
00:07:13.580 --> 00:07:18.520
And as usual we do a quick check to see if he is no

80
00:07:21.300 --> 00:07:25.360
then we should be able to use our object here.

81
00:07:25.530 --> 00:07:33.530
We might even want to check for objects not being null.

82
00:07:33.830 --> 00:07:35.250
Then we could log

83
00:07:40.420 --> 00:07:45.460
object value and then say I want to get the user name.

84
00:07:46.240 --> 00:07:47.140
That's a string.

85
00:07:47.170 --> 00:07:58.750
So I'm going to use object don't get string and the string I want to get is use in this variable here

86
00:07:58.870 --> 00:08:02.310
which I know is a string.

87
00:08:02.320 --> 00:08:04.920
Similarly if I want to get

88
00:08:08.160 --> 00:08:09.110
the score

89
00:08:12.230 --> 00:08:15.170
I can do it in much the same way.

90
00:08:15.380 --> 00:08:25.310
Object gets and int and B that I want to get is a school.

91
00:08:25.350 --> 00:08:33.520
I don't need to convert that C string to look at it not to string

92
00:08:36.680 --> 00:08:40.240
like that that every.

93
00:08:42.180 --> 00:08:45.640
So that's how we get objects back from pass.

94
00:08:46.050 --> 00:08:50.490
Let's just have a look and make sure that that gives us the values that we're expecting So we should

95
00:08:50.490 --> 00:08:56.950
get a user name and a score of 86 and there we go.

96
00:08:57.280 --> 00:09:01.260
Rob does our 86.

97
00:09:01.260 --> 00:09:03.500
We can also update our values here.

98
00:09:03.630 --> 00:09:06.580
So if you want to update a value that exists already.

99
00:09:06.690 --> 00:09:12.870
So let's say I've had a nice long session on this game and I've gone from a score of 86 to a score of

100
00:09:12.870 --> 00:09:15.740
140.

101
00:09:16.100 --> 00:09:23.180
Then I just take my object and update the valley.

102
00:09:23.180 --> 00:09:35.190
So I'm going to change the score to 200 and then I can use object dot sight and background.

103
00:09:35.790 --> 00:09:40.180
And this time I won't have a callback so that I really need to check.

104
00:09:40.200 --> 00:09:45.820
I'm pretty sure it's going to work and I'll refresh the data browser when it's gone anyway.

105
00:09:46.410 --> 00:09:51.980
Notice that the object is to go get in.

106
00:09:51.980 --> 00:09:58.460
School will also be updated because we're updating the object locally on the device within our app.

107
00:09:58.610 --> 00:10:06.080
And then we're saving it on our server using the save in background command so we don't need to get

108
00:10:06.080 --> 00:10:12.110
it again for it to be already updated in our app.

109
00:10:12.110 --> 00:10:18.440
One thing you might have noticed is we can't use the instant restart unfortunately because of the complexity

110
00:10:18.440 --> 00:10:20.210
of the app that we're working with now.

111
00:10:20.530 --> 00:10:24.350
But it's a shame but a small price to pay I think for all the convenience.

112
00:10:24.350 --> 00:10:26.590
So there we go we've got a score of 200 here.

113
00:10:26.660 --> 00:10:30.990
If I go back over to our data browser and refresh.

114
00:10:31.400 --> 00:10:33.960
Should give me the new score of 200.

115
00:10:35.340 --> 00:10:37.640
Fabulous.

116
00:10:37.900 --> 00:10:38.240
All right.

117
00:10:38.240 --> 00:10:40.490
Time for a quick challenge.

118
00:10:40.510 --> 00:10:41.350
I'm going to come out

119
00:10:45.470 --> 00:10:53.840
all of this and for this challenge I want you to just practice what we've just learned by creating a

120
00:10:53.870 --> 00:11:04.310
tweaked class containing a user name and a tweet and the user name and that we can be whatever you like

121
00:11:04.310 --> 00:11:11.030
tweet can be just hey there was something simple like that and then say that on pass and then

122
00:11:15.580 --> 00:11:16.030
then

123
00:11:18.660 --> 00:11:26.970
query it and update the tweet contents.

124
00:11:27.040 --> 00:11:32.170
So we're assuming that someone wants to edit the tweet that they've already saved and then we're updating

125
00:11:32.550 --> 00:11:35.430
the content to the new content whatever you want that to be.

126
00:11:35.800 --> 00:11:38.110
So it's just an opportunity to practice what we've had.

127
00:11:38.260 --> 00:11:42.910
Try and do it without going back and looking over your earlier work if you can.

128
00:11:42.940 --> 00:11:47.300
But if you do need to go back for hints then that's fine.

129
00:11:47.320 --> 00:11:47.560
All right.

130
00:11:47.560 --> 00:11:48.540
Best of luck.

131
00:11:48.610 --> 00:11:49.390
Go for it.

132
00:11:59.610 --> 00:12:00.060
All right.

133
00:12:00.060 --> 00:12:01.170
Here we are.

134
00:12:01.590 --> 00:12:11.910
So I'm going to create a past object which I'll call tweet which is going to be a new object with a

135
00:12:11.930 --> 00:12:16.990
class name of tweet with a capital T.

136
00:12:17.190 --> 00:12:18.380
And then we're going to set up

137
00:12:22.500 --> 00:12:26.490
a username which this time will be Tommy

138
00:12:30.950 --> 00:12:31.490
and

139
00:12:34.770 --> 00:12:35.610
I tweet

140
00:12:38.960 --> 00:12:47.360
which I'll just have as you then and then will you save him background's

141
00:12:51.630 --> 00:12:57.130
with a new save Colback and a quick check to see if

142
00:13:00.890 --> 00:13:02.230
there's no error.

143
00:13:07.710 --> 00:13:16.280
Well look tweet successful I think there is an error log.

144
00:13:18.090 --> 00:13:22.300
Tweet fettled.

145
00:13:22.680 --> 00:13:25.430
All right let's give it a go.

146
00:13:28.470 --> 00:13:35.940
One thing to note on the past dashboard is if you just use the refresh button here that only refreshes

147
00:13:35.970 --> 00:13:40.870
the score class and indeed it only refreshes the values.

148
00:13:40.950 --> 00:13:45.430
So if you've added an extra column and you refresh that won't be reflected.

149
00:13:45.450 --> 00:13:51.120
So if you want to look for a whole new class or for a whole new column within a class then you need

150
00:13:51.120 --> 00:14:00.200
to refresh the whole page just before I do that I'll have a look at the locks and hopefully I should

151
00:14:00.200 --> 00:14:02.680
see tweet successful.

152
00:14:03.350 --> 00:14:04.440
And there it is.

153
00:14:04.460 --> 00:14:06.170
So all is looking promising.

154
00:14:06.440 --> 00:14:16.100
Let's jump back over and do a proper full page refresh.

155
00:14:16.320 --> 00:14:19.890
And now you can see my tweet classes there.

156
00:14:20.170 --> 00:14:20.620
Excellent.

157
00:14:20.620 --> 00:14:23.230
With the tweet and the username and

158
00:14:26.480 --> 00:14:37.500
I'm going to copy the object id and now I'm going to write my courage to bring that tweet back and update

159
00:14:37.520 --> 00:14:38.370
its value.

160
00:14:45.190 --> 00:14:56.650
So I will create a pass query and this is a query on I-PASS object again I'll call it query and this

161
00:14:56.650 --> 00:15:02.710
is going to be a pass query to get query on the tweet to class

162
00:15:06.220 --> 00:15:17.020
and then we use query to get in background and then we'll paste in the object id and will have a new

163
00:15:18.850 --> 00:15:20.460
get callback.

164
00:15:23.160 --> 00:15:29.040
And in fact or just copy and paste this time.

165
00:15:29.280 --> 00:15:33.240
So we'll do a double check for now and object.

166
00:15:37.050 --> 00:15:42.560
Is not null and say if this is the case.

167
00:15:42.810 --> 00:15:51.450
Not only do I want to log that is successful but I also want to update the content say or use object

168
00:15:51.720 --> 00:16:00.060
dots put and then I want to update the tweet variable.

169
00:16:00.060 --> 00:16:04.580
This bit here t by

170
00:16:07.560 --> 00:16:13.470
and then of course save in background and leave out the callback this time.

171
00:16:19.320 --> 00:16:24.000
And let's check the logs so Twitter has been successful with looking good.

172
00:16:24.340 --> 00:16:36.000
Let's have a quick refresh here and we should see now that the tweet has been updated to by wonderful.

173
00:16:36.090 --> 00:16:41.000
So now hopefully you get the basic idea of saving and updating objects.

174
00:16:41.040 --> 00:16:47.600
One thing that you might be thinking is how on earth will we know this ID of our average object.

175
00:16:47.800 --> 00:16:49.800
Well the answer is most of the time we don't.

176
00:16:50.040 --> 00:16:57.300
So we need to know how to query objects for example to find all the tweets by a certain username and

177
00:16:57.300 --> 00:16:59.540
that is what we'll see have to be in the next video.
