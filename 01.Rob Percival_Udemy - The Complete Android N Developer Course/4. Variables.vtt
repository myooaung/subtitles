WEBVTT
1
00:00:00.900 --> 00:00:06.610
Now we're going to look at variables and how we create them and how we can work with them in Java.

2
00:00:06.810 --> 00:00:08.570
And indeed what a variable is.

3
00:00:08.970 --> 00:00:14.390
So for each new lecture here I'm going to create a new hello world template.

4
00:00:14.430 --> 00:00:20.820
So just by tapping try that and then get rid of my previous one and I'm going to save it straight away

5
00:00:21.180 --> 00:00:23.140
so that it's clear what we're working on.

6
00:00:23.400 --> 00:00:25.440
I'll call this variable's

7
00:00:30.510 --> 00:00:31.090
that we get.

8
00:00:31.180 --> 00:00:38.270
So you can see that it's already saving all of our programs that we've made and then really all we're

9
00:00:38.270 --> 00:00:45.250
going to change for most of the next few lectures is the code inside the main method.

10
00:00:45.710 --> 00:00:50.360
So if you've worked with different languages before you may be used to defining a variable with something

11
00:00:50.360 --> 00:00:54.230
like the VAR command like you do in javascript for example.

12
00:00:54.710 --> 00:00:57.740
But in Java it works differently.

13
00:00:57.740 --> 00:01:05.810
Java is a strong typed language which means that every variable that you create has to be of a certain

14
00:01:05.810 --> 00:01:10.770
type and once that variable has been created you can change its type.

15
00:01:10.790 --> 00:01:15.080
So let's start with a fairly basic type an integer.

16
00:01:15.370 --> 00:01:19.380
So it is short for integer which is a whole number.

17
00:01:19.880 --> 00:01:25.760
So if I wanted to create an integer I just type it and then the name of the variable so I might call

18
00:01:25.760 --> 00:01:27.680
it age for example.

19
00:01:27.980 --> 00:01:31.550
And then the initial value of that variable.

20
00:01:31.550 --> 00:01:37.920
So for example 34 and then semi-colon at the end of the line.

21
00:01:37.940 --> 00:01:45.550
So this creates an integer or a whole number which has the name of age and the value 34.

22
00:01:46.100 --> 00:01:50.660
And from there just in case you're slightly unclear on what a variable is it should be fairly straightforward.

23
00:01:50.660 --> 00:01:54.370
A variable is something like this that we can change the value of.

24
00:01:54.560 --> 00:01:59.660
So that this might just keep track of the age of our current use for example.

25
00:01:59.660 --> 00:02:01.460
And that's all a variable is.

26
00:02:01.460 --> 00:02:07.100
We did use them a couple of times in the previous section when we created for example the added text

27
00:02:07.370 --> 00:02:11.050
to refer to the text field that we wanted to get the value of.

28
00:02:11.210 --> 00:02:13.720
So we have used variables already.

29
00:02:13.730 --> 00:02:16.050
So here's a quick challenge for you straight away.

30
00:02:16.190 --> 00:02:21.510
Can you create an integer called favorite number.

31
00:02:21.520 --> 00:02:25.680
Set it to your favorite number and then output it to the console.

32
00:02:26.560 --> 00:02:27.490
Very simple.

33
00:02:27.490 --> 00:02:34.410
Good luck.

34
00:02:34.420 --> 00:02:34.840
All right.

35
00:02:34.850 --> 00:02:36.470
I hope you manage that.

36
00:02:36.670 --> 00:02:43.660
You should have just used it to create your integer and then favorite number.

37
00:02:43.660 --> 00:02:45.490
You may or may not have spelled favorite like that.

38
00:02:45.490 --> 00:02:52.480
I won't take marks off if you didn't put you in but favorite number with a small F and A capital and

39
00:02:52.740 --> 00:02:58.870
would be generally we would describe the variable because we usually use a small first letter and then

40
00:02:58.870 --> 00:03:01.170
a capital letter for every word after that.

41
00:03:01.190 --> 00:03:03.790
That just makes it nice and easy to read.

42
00:03:03.830 --> 00:03:08.700
So a favorite number of my favorite number is 7.

43
00:03:08.850 --> 00:03:11.310
And again take so if you chose a number other seven.

44
00:03:11.360 --> 00:03:12.790
Well then of course you are wrong.

45
00:03:13.680 --> 00:03:18.090
And then we just want to display it in the log so we use the same command that we saw in the previous

46
00:03:18.090 --> 00:03:31.480
video system dot out dot print alone and then we just pop it straight in favorite number.

47
00:03:32.390 --> 00:03:33.480
There we go.

48
00:03:34.160 --> 00:03:38.580
So let's start that and there it is.

49
00:03:38.580 --> 00:03:43.910
So that's our first example of creating a variable and displaying it.

50
00:03:43.920 --> 00:03:48.610
Now what if our favorite number happened to be 7.5.

51
00:03:48.840 --> 00:03:50.950
The reason your favorite number can be a decimal.

52
00:03:51.420 --> 00:03:54.420
Let's try running that and see what happens.

53
00:03:54.750 --> 00:03:59.300
We've got an era possible loss of precision.

54
00:03:59.340 --> 00:04:00.400
So what's going on there.

55
00:04:00.510 --> 00:04:01.470
Well it's fairly straightforward.

56
00:04:01.470 --> 00:04:06.270
I think we've created our favorite number as an integer which means a whole number and then we've set

57
00:04:06.270 --> 00:04:08.890
it to seven point five which is not a whole number.

58
00:04:09.180 --> 00:04:15.930
So we need to change the variable type to one that can accept a non whole number and the one that I

59
00:04:15.930 --> 00:04:24.960
normally use is a double so named because it takes up double the memory of a standard floating point

60
00:04:24.990 --> 00:04:29.810
number and a floating point number is just a decimal.

61
00:04:29.810 --> 00:04:33.570
So a number that can be either a whole number or a decimal.

62
00:04:33.600 --> 00:04:37.690
So when you want to use decimals I'd recommend using double like that.

63
00:04:38.100 --> 00:04:40.890
And then that's just take a look.

64
00:04:41.050 --> 00:04:44.270
Now that displays seven point five no problem at all.

65
00:04:44.650 --> 00:04:50.560
So those are the two Meric variable types that you'll probably want to use either and if you want something

66
00:04:50.560 --> 00:04:51.220
to be an integer.

67
00:04:51.220 --> 00:04:57.640
So the number of uses for example h that kind of thing and double if you think that your number might

68
00:04:57.640 --> 00:05:00.130
end up being a decimal.

69
00:05:00.160 --> 00:05:05.590
So something like a price or temperature before we go on to look at other variable types.

70
00:05:05.590 --> 00:05:11.240
I just want to quickly turn your attention to a great Web site learn Java on line dot org.

71
00:05:11.290 --> 00:05:15.880
You'll probably end up here if you do some googling and you want to find out a bit more information

72
00:05:15.880 --> 00:05:16.980
about something.

73
00:05:17.170 --> 00:05:22.360
But this particular page shows us what is known as the primitives in Java.

74
00:05:22.510 --> 00:05:29.780
So they are a set of you could say basic variable types from which other variable types are built.

75
00:05:29.980 --> 00:05:37.560
So you can see the ones that we've looked at already are int and double the others just to make you

76
00:05:37.560 --> 00:05:38.580
aware of them.

77
00:05:38.580 --> 00:05:45.630
We don't really use very much but we have a few other integer types so that we've got bite short which

78
00:05:45.630 --> 00:05:46.980
are much smaller.

79
00:05:46.980 --> 00:05:49.870
They only take out one byte or two bytes.

80
00:05:49.870 --> 00:05:55.680
And there's an integer which takes up 4 bytes and then long which takes up 8 bytes so the number of

81
00:05:55.680 --> 00:06:00.090
bytes here refers to how big the number can get.

82
00:06:00.900 --> 00:06:03.340
Without causing an error in the program.

83
00:06:03.340 --> 00:06:15.050
So if for example I want to check how big an int can be I would google something like it maximum size

84
00:06:15.280 --> 00:06:20.810
Well maximum value let's say in Java something like that.

85
00:06:21.280 --> 00:06:23.350
And I like to look at that third result there.

86
00:06:25.500 --> 00:06:28.220
Say in fact we've got the values for all of them there.

87
00:06:28.670 --> 00:06:36.450
So the basic bite can be between minus 128 and 6:59 which is probably a bit small for most cases a short

88
00:06:36.450 --> 00:06:44.320
integer goes from minus 32000 to 32000 which again is probably going to be OK in most cases but if your

89
00:06:44.320 --> 00:06:49.440
a number of users gets higher and higher then you might well exceed that.

90
00:06:49.690 --> 00:06:58.490
Whereas for it it goes down to minus 2 to the 31 which is about minus 2 billion and up to about 2 billion.

91
00:06:58.510 --> 00:07:03.090
So that's probably going to be big enough for most values that you're dealing with in your programs.

92
00:07:03.190 --> 00:07:08.240
But if it's not you can use a long which goes up to an even higher number.

93
00:07:08.350 --> 00:07:11.170
So that's the difference between those types.

94
00:07:11.170 --> 00:07:15.570
And then we've got two decimal numbers so float and double.

95
00:07:15.670 --> 00:07:17.600
I'd recommend generally going for double.

96
00:07:18.040 --> 00:07:21.150
And then we've got Charle which is just a character.

97
00:07:21.160 --> 00:07:27.070
So any ABC etc. and then Boullion which is the next one that we're going to look at here which is just

98
00:07:27.070 --> 00:07:28.560
true or false.

99
00:07:28.990 --> 00:07:34.610
So these are the primitive types and all other types are made up from those.

100
00:07:34.640 --> 00:07:42.160
So let's jump back and have a look at our billion and I'm just going to get rid of that.

101
00:07:42.200 --> 00:07:53.410
So to create a billion we just type Boullion like that and then we might have something like am I male

102
00:07:54.880 --> 00:07:57.220
and for me that would be true

103
00:08:00.610 --> 00:08:01.480
if you're interested.

104
00:08:01.510 --> 00:08:05.310
The word Boullion is named after George Boole.

105
00:08:05.500 --> 00:08:11.950
There is an English mathematician who did a lot of work in logic and so true or false is obviously fairly

106
00:08:11.950 --> 00:08:16.570
central to that and that's where the word Boullion comes from.

107
00:08:16.570 --> 00:08:23.290
So in your programs you could use a Boolean for is logged in or is active user or something like that

108
00:08:23.590 --> 00:08:24.990
or dead or alive or dead.

109
00:08:25.000 --> 00:08:28.110
For our ghosts example from the previous video.

110
00:08:28.630 --> 00:08:33.880
So very quick challenge once again create a Boolean for something that you could imagine actually using

111
00:08:33.880 --> 00:08:37.910
a Boolean for in a program and then display it in the logs.

112
00:08:38.100 --> 00:08:38.420
Durford

113
00:08:47.090 --> 00:08:49.380
All right nice and easy.

114
00:08:49.680 --> 00:09:00.840
So just typed boolean and then I'm going to call it user likes pizza and we'll set that to be true.

115
00:09:02.380 --> 00:09:06.140
It is true for this particular use app and then we'll just pop it in the console.

116
00:09:06.330 --> 00:09:19.740
So system and then output methods and print line use out likes pizza.

117
00:09:20.150 --> 00:09:23.830
So I mean go and start.

118
00:09:23.890 --> 00:09:26.860
And we should get tree that we get.

119
00:09:26.860 --> 00:09:28.340
So that's how we use billions.

120
00:09:28.350 --> 00:09:30.500
So so far we've got billions and numbers.

121
00:09:30.610 --> 00:09:36.040
The final variable type that we're going to look at is strings which we've already seen before up here.

122
00:09:36.490 --> 00:09:42.460
So a string is just a combination of characters really it's a very common variable type but it's not

123
00:09:42.550 --> 00:09:47.130
a primitive because it's made up of Charles characters.

124
00:09:48.640 --> 00:09:50.040
So because it's not a primitive.

125
00:09:50.050 --> 00:09:52.980
Instead of using a lowercase definition.

126
00:09:52.990 --> 00:09:59.430
So before we use it is lowercase b and we've used lower cases for all our definitions so far.

127
00:09:59.770 --> 00:10:08.100
We use a capital letter because it's not a primitive it's actually a class and classes are generally

128
00:10:08.100 --> 00:10:10.490
defined with capital letters at the start.

129
00:10:10.490 --> 00:10:12.300
So just like hello world there.

130
00:10:12.710 --> 00:10:19.500
So string my name for example is Rob of course.

131
00:10:19.830 --> 00:10:22.400
I think we've seen before that we don't type it like that.

132
00:10:23.670 --> 00:10:27.740
We need to put quotes round a string whenever we use it.

133
00:10:28.150 --> 00:10:29.870
So my name is Rob.

134
00:10:30.870 --> 00:10:32.830
And then let's print that to the console.

135
00:10:33.120 --> 00:10:36.960
But this time we'll do something slightly different.

136
00:10:37.350 --> 00:10:46.760
Dot dot dot printer line and then we could use.

137
00:10:46.790 --> 00:10:51.340
My name is in quites than I want to put a space at the end of that.

138
00:10:51.500 --> 00:10:56.060
And then we use plus to concatenate strings.

139
00:10:56.300 --> 00:10:58.260
That means put them together basically.

140
00:10:58.670 --> 00:11:05.970
So my name is and then we have my name and we might want to put a full stop on the end as well.

141
00:11:07.020 --> 00:11:11.800
I would have let's just run that every day.

142
00:11:11.840 --> 00:11:13.660
My name is Rob.

143
00:11:13.700 --> 00:11:14.780
Fantastic.

144
00:11:15.290 --> 00:11:16.940
So another quick challenge for you.

145
00:11:17.270 --> 00:11:26.650
I want you to save your name and your age as variables and then output them to the console saying my

146
00:11:26.650 --> 00:11:32.380
name is whatever your name is and I am your number of years years old.

147
00:11:32.380 --> 00:11:33.030
Good luck.

148
00:11:40.350 --> 00:11:40.890
All right.

149
00:11:40.970 --> 00:11:42.270
I hope you manage that.

150
00:11:42.900 --> 00:11:50.610
So let's create a string again we'll just call it my name robe.

151
00:11:50.670 --> 00:11:51.800
Same as before.

152
00:11:52.200 --> 00:11:57.800
And then create an integer called H which is 34.

153
00:11:58.770 --> 00:12:01.410
And then we just put that to the console.

154
00:12:01.600 --> 00:12:05.560
So system took out of print.

155
00:12:07.710 --> 00:12:08.730
My name is

156
00:12:11.680 --> 00:12:13.680
what's my name.

157
00:12:16.760 --> 00:12:23.070
And I put all those spaces in h

158
00:12:26.180 --> 00:12:32.370
is old I the brackets semi-colon.

159
00:12:32.400 --> 00:12:32.670
All right.

160
00:12:32.680 --> 00:12:33.410
Let's take a look.

161
00:12:35.460 --> 00:12:36.060
Just run that.

162
00:12:36.060 --> 00:12:36.870
Fantastic.

163
00:12:36.870 --> 00:12:39.500
My name is Rob and I am 34 years old.

164
00:12:39.690 --> 00:12:45.910
Something that some of you may have picked up on is that this age is not a string it's an integer.

165
00:12:46.110 --> 00:12:52.350
And yet the system has allowed us to bring it into this string without any problems.

166
00:12:52.350 --> 00:12:59.430
That works because it's a primitive primitive variables can be put into strings like this without having

167
00:12:59.430 --> 00:13:04.590
to convert them to strings whereas other variable types generally will need a conversion to a string

168
00:13:04.830 --> 00:13:09.200
before you can display it or bring it into a string like we have done there.

169
00:13:10.540 --> 00:13:14.920
OK so now we're familiar with the main variable types that we're going to be using.

170
00:13:14.930 --> 00:13:18.610
So integers doubles strings and booleans.

171
00:13:18.830 --> 00:13:23.750
Let's just see a few things that we can do with them rather than just set their value and display them

172
00:13:23.750 --> 00:13:24.790
in the console.

173
00:13:25.190 --> 00:13:33.880
So let's work with numbers first of all let's get rid of this and create a double.

174
00:13:34.200 --> 00:13:35.130
And I'm just going to call it.

175
00:13:35.140 --> 00:13:45.260
I for the moment and will set it to six point seven and then we'll have another double beat which will

176
00:13:45.260 --> 00:13:53.400
be three point two so I can do all sorts of manipulation with these numbers really straightforwardly.

177
00:13:53.420 --> 00:14:03.410
So let's put it straight in the console's system out towards print line and then let's say we want to

178
00:14:03.410 --> 00:14:06.110
multiply those two together.

179
00:14:06.110 --> 00:14:10.150
We use the asterisks so that shift 8 for me.

180
00:14:10.210 --> 00:14:15.250
So I start a means eight times B and that will give us whatever six point seven times three point two

181
00:14:15.270 --> 00:14:18.430
is that we get we can add them together of course.

182
00:14:21.340 --> 00:14:29.860
Similarly say nine point nine and we could subtract seven point three from that

183
00:14:32.840 --> 00:14:33.500
as well.

184
00:14:33.550 --> 00:14:35.270
We'll work that out for us.

185
00:14:35.270 --> 00:14:37.270
Now here we get an interesting result.

186
00:14:37.310 --> 00:14:39.830
It's not quite 2.6 it's 2.6.

187
00:14:39.830 --> 00:14:42.860
Loads of zeros and then a 5.

188
00:14:42.860 --> 00:14:47.530
Now this is because a double is not a completely accurate variable type.

189
00:14:47.540 --> 00:14:49.270
I'm not going to go into precisely why.

190
00:14:49.280 --> 00:14:55.730
But essentially this is a binary So a set of zeros and ones which is an approximation of the decimal

191
00:14:55.790 --> 00:14:56.590
number.

192
00:14:56.930 --> 00:15:01.460
Now the reason that is is essentially because it's much faster for the computers to work with.

193
00:15:01.460 --> 00:15:07.010
So if you round it to one or two decimal places to display to the user then it's always going to be

194
00:15:07.010 --> 00:15:12.740
accurate enough for you but you should be aware that if you're working with doubles and then you display

195
00:15:12.740 --> 00:15:17.900
them to the user at some point or you use them in some way you should bear in mind that you should round

196
00:15:17.900 --> 00:15:21.060
them to the number of decimal places that you need.

197
00:15:22.700 --> 00:15:25.220
So that's working with numbers.

198
00:15:25.220 --> 00:15:28.330
There are of course a bunch of things you can do with strings as well.

199
00:15:28.370 --> 00:15:32.370
I'm just going to show you one for now but we'll see a lot more throughout the course.

200
00:15:33.200 --> 00:15:36.770
And the one I'm going to show you is how to get the length of the strings or the number of characters

201
00:15:36.770 --> 00:15:37.900
in a string.

202
00:15:38.390 --> 00:15:47.580
So let's create a string which I'll just call my string with a bunch of random characters in it.

203
00:15:47.590 --> 00:15:48.000
There you go.

204
00:15:48.020 --> 00:15:51.880
If I wanted to get the length of that string and I would

205
00:15:55.700 --> 00:16:10.890
put it in the console's print line I would use my string dot length and then I would use a pair of parentheses.

206
00:16:11.080 --> 00:16:17.950
That's because length here is a method and whenever we call a method we were instructed to do something

207
00:16:18.400 --> 00:16:23.440
we have a pair of parentheses which sometimes will contain a variable that we want to pass to that particular

208
00:16:23.440 --> 00:16:23.970
method.

209
00:16:24.100 --> 00:16:26.280
But in this case we don't want to do that.

210
00:16:26.290 --> 00:16:31.480
We just want my string Daut length and that will tell us the length of my string

211
00:16:34.270 --> 00:16:39.510
so check that we get so 16 characters in my string.

212
00:16:39.520 --> 00:16:39.950
All right.

213
00:16:39.950 --> 00:16:45.050
So that's how you create and manipulate variables in Java.

214
00:16:45.050 --> 00:16:49.790
Of course we need a final challenge to put all of that together.

215
00:16:49.790 --> 00:16:55.130
So fairly straightforwardly I want you to create two strings which will be equal to your first name

216
00:16:55.190 --> 00:16:56.580
and your last name.

217
00:16:56.990 --> 00:17:04.190
And then I want you to create an integer which sums the number of characters in your first name and

218
00:17:04.190 --> 00:17:10.430
your second name and then a line that displays in the console the number of characters in my full name

219
00:17:10.520 --> 00:17:15.860
is and then that final value should be fairly straightforward with any luck.

220
00:17:16.230 --> 00:17:16.920
Go for it.

221
00:17:23.350 --> 00:17:24.860
All right I managed it.

222
00:17:26.380 --> 00:17:32.360
So in my case I just want to have a string and I'll call it first name.

223
00:17:34.480 --> 00:17:35.680
Is equal to rope.

224
00:17:36.280 --> 00:17:38.150
And then we'll have another string.

225
00:17:38.350 --> 00:17:41.560
Second name is equal to Percival

226
00:17:44.270 --> 00:17:53.660
and then we'll create an integer which I'll call length and that's going to be equal to a first name.

227
00:17:54.540 --> 00:18:07.820
Dot length plus second name dot length because you want to add the a c together and then finally we

228
00:18:07.820 --> 00:18:14.610
want to output the result say system start out of print line.

229
00:18:17.510 --> 00:18:32.110
The number of characters in my full name is and then will concatenate that with the variable length.

230
00:18:32.510 --> 00:18:33.180
I should do it.

231
00:18:34.850 --> 00:18:35.750
Let's take a look.

232
00:18:37.010 --> 00:18:38.310
Fantastic.

233
00:18:38.750 --> 00:18:41.960
In my full name is brilliant.

234
00:18:41.960 --> 00:18:43.780
I hope you manage that in the next video.

235
00:18:43.790 --> 00:18:48.360
We'll go on to another important variable type which is the type of array.

236
00:18:48.470 --> 00:18:49.260
See you then.
