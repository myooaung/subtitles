1
00:00:00,330 --> 00:00:02,520
Hello and welcome to this art tutorial.

2
00:00:02,580 --> 00:00:07,620
So in the previous tutorial we imported the dataset and today in this tutorial we're going to implement

3
00:00:07,740 --> 00:00:10,940
the UCB upper conference bound algorithm.

4
00:00:11,100 --> 00:00:16,770
So I'm not sure if it's bad news or good news but there is actually no package that we can use easily

5
00:00:16,770 --> 00:00:19,700
to implement this UCB algorithm.

6
00:00:19,980 --> 00:00:21,360
So that's the bad news.

7
00:00:21,360 --> 00:00:27,360
But the good news is that we are going to implement the UCB from scratch and that's good news because

8
00:00:27,360 --> 00:00:31,490
that will give you the opportunity to really improve your skills in our.

9
00:00:31,860 --> 00:00:33,310
So be ready.

10
00:00:33,330 --> 00:00:38,490
It's not going to take three or four lines like we used to have before we are going to implement the

11
00:00:38,490 --> 00:00:42,220
whole algorithm from scratch without using any package.

12
00:00:42,390 --> 00:00:44,600
And we are going to do it step by step.

13
00:00:44,610 --> 00:00:50,930
And speaking of steps let's now actually jump to the slide of the upper confidence found algorithm.

14
00:00:51,030 --> 00:00:53,970
So this algorithm takes three steps.

15
00:00:54,030 --> 00:00:59,760
The first step is at each round and we consider two numbers for each add.

16
00:00:59,910 --> 00:01:06,830
That is for each version of the add these two numbers are and I the number of times the ad I was selected

17
00:01:06,840 --> 00:01:11,970
up to round and the sum of rewards of the adversion I have two round.

18
00:01:12,200 --> 00:01:12,520
OK.

19
00:01:12,540 --> 00:01:18,150
So the first thing that we need to do here is to declare these two variables because we will need them

20
00:01:18,180 --> 00:01:18,860
afterwards.

21
00:01:18,980 --> 00:01:19,260
OK.

22
00:01:19,260 --> 00:01:26,370
So the first one the number of times that I was selected to round and let's actually call this variable

23
00:01:26,700 --> 00:01:31,470
numbers of selections.

24
00:01:31,600 --> 00:01:32,190
All right.

25
00:01:32,520 --> 00:01:35,530
So we need to consider this number for each.

26
00:01:35,700 --> 00:01:41,910
So what we're going to do is create a vector that will contain each of those numbers of selections of

27
00:01:42,000 --> 00:01:42,770
each add.

28
00:01:42,840 --> 00:01:49,080
So we will set this variable equal to a vector of size D and we will initialize all the components of

29
00:01:49,080 --> 00:01:50,850
this vector to zero.

30
00:01:51,160 --> 00:01:53,030
And so how can we do that in our.

31
00:01:53,250 --> 00:01:58,350
Well we simply need to type integer and in parenthesis D.

32
00:01:58,860 --> 00:02:05,400
And this will create a vector of size D containing only zeroes and we're doing this because of course

33
00:02:05,540 --> 00:02:09,360
at the first round each version of the ad hasn't been selected yet.

34
00:02:09,420 --> 00:02:13,950
So the number of times each version of the album selected is of course zero.

35
00:02:14,160 --> 00:02:16,080
OK so done for the first number.

36
00:02:16,080 --> 00:02:16,410
All right.

37
00:02:16,410 --> 00:02:21,750
And the second number is the sum of rewards of the add up to round and.

38
00:02:21,960 --> 00:02:31,850
OK so let's call this variable sons of rewards this way and same you know we need to take the sums of

39
00:02:31,860 --> 00:02:34,670
rewards of each version of the ad at a trial.

40
00:02:34,700 --> 00:02:39,800
And so we're going to set it as a vector of the components as well exactly like we did for numbers of

41
00:02:39,800 --> 00:02:43,410
selections and same we will initialize it to zero.

42
00:02:43,430 --> 00:02:49,560
Because of course at the first round the sons of rewards are each version of the ad is of course zero.

43
00:02:49,730 --> 00:02:54,640
So we will just copy this copy and paste it here.

44
00:02:54,680 --> 00:02:55,190
All right.

45
00:02:55,190 --> 00:02:58,030
So basically step one done.

46
00:02:58,040 --> 00:02:59,920
Now let's move on to Step Two.

47
00:03:00,050 --> 00:03:03,050
Step two is from these two numbers.

48
00:03:03,050 --> 00:03:08,540
We compute first the average reward of an eye up to around and.

49
00:03:08,810 --> 00:03:12,860
And second the confidence interval that's round.

50
00:03:12,860 --> 00:03:17,420
And so basically we need to compute these two numbers at each round.

51
00:03:17,450 --> 00:03:23,250
And so let's implement this step two since we need to compute these two numbers at each round.

52
00:03:23,250 --> 00:03:27,160
And of course what we need to do is to make a for loop.

53
00:03:27,370 --> 00:03:29,500
All right so that's what we're going to do.

54
00:03:29,530 --> 00:03:35,570
We're going to go through all the rounds from 0 to the 10000 round.

55
00:03:35,600 --> 00:03:37,530
So for each round.

56
00:03:37,560 --> 00:03:39,250
And so we're calling the rounds.

57
00:03:39,310 --> 00:03:44,230
And then now we need to input the lower bound which is one.

58
00:03:44,360 --> 00:03:45,760
So that's the first round.

59
00:03:45,920 --> 00:03:47,780
And then the upper bound which is.

60
00:03:48,020 --> 00:03:55,880
And so and is the total number of rounds that is 10000 rounds so in case you have a problem with more

61
00:03:55,880 --> 00:04:03,800
rounds or more users we will you know declare this variable here and equals while here for our problem

62
00:04:03,800 --> 00:04:05,680
it's ten thousand.

63
00:04:05,960 --> 00:04:07,170
All right 10000.

64
00:04:07,190 --> 00:04:08,950
So right now we're in the loop.

65
00:04:09,050 --> 00:04:10,590
And so what do we need to do.

66
00:04:10,880 --> 00:04:14,810
We need to compute for each version of the at the average you are.

67
00:04:14,900 --> 00:04:16,490
And the confidence interval.

68
00:04:16,580 --> 00:04:18,390
So that's exactly what we're going to do.

69
00:04:18,410 --> 00:04:24,740
And since we're doing it for each version of the ad I will what we need to do now is again another for

70
00:04:24,740 --> 00:04:30,070
loop and this time we're going to loop over all the 10 different versions of the ad.

71
00:04:30,230 --> 00:04:32,390
So the ads are indexed by i.

72
00:04:32,420 --> 00:04:38,960
So for I here in one and then again we're going to input here D.

73
00:04:39,080 --> 00:04:45,240
In case you have more versions of your ADD or more arms for your specific problem.

74
00:04:45,260 --> 00:04:49,720
So we are going to declare a new variable here which is D.

75
00:04:49,970 --> 00:04:54,480
And since it's the number of ads we will set it equal to 10.

76
00:04:54,500 --> 00:05:01,490
All right and now we're entering into the second loop so right now at this level we are at a specific

77
00:05:01,490 --> 00:05:09,140
round and dealing with a specific version of the ad and now we can compute our two numbers.

78
00:05:09,140 --> 00:05:13,140
The average word of the eye and the confidence interval.

79
00:05:13,190 --> 00:05:16,780
So let's start with the first number the first number is the average word.

80
00:05:16,820 --> 00:05:21,840
So let's call it average reward and equals.

81
00:05:21,920 --> 00:05:22,220
All right.

82
00:05:22,230 --> 00:05:29,700
So what does it say it says that it's the sum of rewards of the adversion I up to around and divided

83
00:05:29,700 --> 00:05:33,740
by the number of times this adversion I was selected at around.

84
00:05:33,750 --> 00:05:36,420
And so simply let's write this formula.

85
00:05:36,420 --> 00:05:43,200
We already have these two variables where we have to vectors but of course we will take the ice element

86
00:05:43,380 --> 00:05:47,130
of these two vectors because they correspond to our version.

87
00:05:47,140 --> 00:05:48,500
I have the add.

88
00:05:48,540 --> 00:05:58,210
So let's do it sums of rewards and we take the element of this vector divided by numbers.

89
00:05:59,920 --> 00:06:05,800
Selections and same we're taking the element of this vector.

90
00:06:05,800 --> 00:06:06,330
Great.

91
00:06:06,340 --> 00:06:10,330
So we have our first number computed the average word.

92
00:06:10,360 --> 00:06:12,360
Now let's take care of the second number.

93
00:06:12,430 --> 00:06:18,550
The confidence interval Well we will not build the whole confidence interval which we will compute right

94
00:06:18,550 --> 00:06:23,750
now is the upper bounds of the confidence interval because that's what we need for Step 3.

95
00:06:23,860 --> 00:06:29,530
As you can see Step three is we select the app that has the maximum upper confidence bounds so we just

96
00:06:29,530 --> 00:06:33,200
need the upper confidence bounds of this confidence interval.

97
00:06:33,340 --> 00:06:35,380
And so what is this upper confidence bound.

98
00:06:35,470 --> 00:06:43,480
Well it's the average reward plus delta I and and Delta and it's given by this formula it's the square

99
00:06:43,480 --> 00:06:52,910
root of 1.5 LUGG and divided by an N which is the number of times the adversion I was selected to round

100
00:06:52,930 --> 00:06:53,280
in.

101
00:06:53,470 --> 00:06:58,690
So let's compute this delta first and then we'll compute the upper confidence bound.

102
00:06:58,750 --> 00:07:03,280
So Delta will cut its actually delta on this core.

103
00:07:03,460 --> 00:07:08,300
And so its equal to square root which I call s q r t.

104
00:07:08,380 --> 00:07:09,620
Parenthesis here.

105
00:07:09,880 --> 00:07:11,200
OK so what do we have first.

106
00:07:11,260 --> 00:07:17,160
We have this three divided by two 10 times and then we take the log.

107
00:07:17,350 --> 00:07:28,270
So log here and in that we divide by the numbers of selections of the adversion plie that is number

108
00:07:28,270 --> 00:07:32,830
of times the adversion I was selected up to round and.

109
00:07:33,220 --> 00:07:39,870
OK so great for Delta Delta is ready and therefore now we are ready to compute the upper confidence

110
00:07:39,940 --> 00:07:44,500
bounds which is of the essence of this UCB algorithm.

111
00:07:44,530 --> 00:07:53,230
So let's do it let's compute the UCD and let's call it upper bound this way upper bounds equals average

112
00:07:53,230 --> 00:07:53,830
reward

113
00:07:56,870 --> 00:07:59,790
plus delta.

114
00:08:00,050 --> 00:08:01,610
Exactly like in the slide.

115
00:08:01,880 --> 00:08:02,930
OK so great.

116
00:08:02,930 --> 00:08:09,090
We just computed the average reward and the upper bounds and therefore we are done with step 2.

117
00:08:09,260 --> 00:08:11,360
So now let's move on to Step Three.

118
00:08:11,450 --> 00:08:18,350
Step three is to select the add the adversion I that has the maximum upper bound.

119
00:08:18,350 --> 00:08:24,980
So now things get a little more complicated because we need to actually create a vector a huge vector

120
00:08:24,980 --> 00:08:31,630
like a huge list that will contain the different versions of the ADD that were selected at each round.

121
00:08:31,730 --> 00:08:33,170
So let's do this.

122
00:08:33,220 --> 00:08:39,590
We're going to declare here a new variable that we're going to call an underscore selected and this

123
00:08:39,590 --> 00:08:45,230
variable is going to be the huge vector that will give us the list of all the different versions of

124
00:08:45,230 --> 00:08:47,430
the ad that are selected at each front.

125
00:08:47,440 --> 00:08:53,150
That is you know at the end of the algorithm when we run it the ADD selected will be a vector of 10000

126
00:08:53,210 --> 00:08:58,170
elements and each of these elements will be the ad that was selected at each round.

127
00:08:58,250 --> 00:09:01,970
So we will clearly see the results of the strategy used by the algorithm.

128
00:09:02,230 --> 00:09:02,740
OK.

129
00:09:02,870 --> 00:09:10,700
So as usual we need to initialize this and we are simply going to initialize it as NMT vector because

130
00:09:11,060 --> 00:09:17,530
what we'll do next is to append the different AD's one by one up to the last round round 10000.

131
00:09:17,880 --> 00:09:24,470
OK so now the question is how are we going to append the different versions of the add in this at selected

132
00:09:24,710 --> 00:09:25,440
vector.

133
00:09:25,730 --> 00:09:27,970
Well let's go back to the slide.

134
00:09:27,980 --> 00:09:33,620
Step three is we select the ADD either has the maximum upper confidence bounds.

135
00:09:33,650 --> 00:09:36,460
So we already computed the preconditions bound.

136
00:09:36,650 --> 00:09:41,900
And now we need to create another variable that will be the highest upper confidence bounds because

137
00:09:41,900 --> 00:09:47,600
right now this upper bound variable here is just the upper bound for each of the diversions of the ADD

138
00:09:47,780 --> 00:09:49,170
at round end.

139
00:09:49,370 --> 00:09:55,190
And so that's why we need to create another variable that will take the maximum of these upper bounds

140
00:09:55,190 --> 00:09:57,050
here of the 10 adds at round.

141
00:09:57,050 --> 00:10:02,660
And so let's create this new variable and we're going to call it Max upper bound.

142
00:10:02,660 --> 00:10:07,230
So since this smacks of preven variable is going to be different at each round.

143
00:10:07,430 --> 00:10:10,630
Well we need to initialize it at each new round.

144
00:10:10,700 --> 00:10:15,970
So therefore this voidable Max upper bound will be initialized right here.

145
00:10:16,010 --> 00:10:22,450
So we will initialize this Max upper bound variable here to zero.

146
00:10:22,550 --> 00:10:27,740
And then what happens is that we will compute the difference upper bounds of each of the 10 adds and

147
00:10:27,740 --> 00:10:31,160
then we will compare these upper bound to this Max upper bound.

148
00:10:31,280 --> 00:10:35,990
And each time the upper bound of the ad I hear will be higher than max upper bound.

149
00:10:36,170 --> 00:10:39,410
Then we will set max upper bound equals two upper bound.

150
00:10:39,560 --> 00:10:40,680
So that's the idea.

151
00:10:40,760 --> 00:10:42,160
So let's do that right now.

152
00:10:42,910 --> 00:10:49,600
So basically what we have to do here is in this for loop we need to add a new IF condition and this

153
00:10:49,600 --> 00:10:55,750
condition will be if upper bound larger than max upper bound.

154
00:10:55,750 --> 00:10:59,830
And then what happens if upper bound is larger than the max upper bound.

155
00:10:59,830 --> 00:11:04,950
Then we need to set max upper bound equal to upper bound.

156
00:11:04,990 --> 00:11:09,610
This way you know what will happen is that we will compute the different upper bounds of each of the

157
00:11:09,610 --> 00:11:11,130
10 adds that's round.

158
00:11:11,170 --> 00:11:14,530
And at first this smacks of revelant is equal to zero.

159
00:11:14,620 --> 00:11:16,300
Then we compute the first upper bound.

160
00:11:16,300 --> 00:11:20,920
And of course it will be larger than max of rebound because it's equal to zero.

161
00:11:21,190 --> 00:11:23,740
So the next upper bound will be equal to upper bound.

162
00:11:23,860 --> 00:11:28,810
So that's for the first add and then we will compute the other upper bounds of the other ads.

163
00:11:28,900 --> 00:11:34,190
And each time we find an upper bound that is larger the next upper bound than max or pre-ban will be

164
00:11:34,190 --> 00:11:36,880
equal to this new upper bound.

165
00:11:36,880 --> 00:11:37,550
All right.

166
00:11:37,750 --> 00:11:44,120
So this way we will get the maximum of the different upper bounds of the 10 x at the specific round.

167
00:11:44,150 --> 00:11:50,260
And all right and now we need to do one more thing you know we need to select the ADD that has the highest

168
00:11:50,260 --> 00:11:56,480
upper bound and therefore each time we find this upper bound to be larger than the max upper.

169
00:11:56,620 --> 00:12:02,800
Not only we need to do this to keep the max rebound but also we need to keep track of the index that

170
00:12:02,800 --> 00:12:05,500
has the max rebound and to keep track of this index.

171
00:12:05,560 --> 00:12:12,700
What we need to do here is to create a new variable here which we'll call add and we will make it equal

172
00:12:12,700 --> 00:12:13,880
to I.

173
00:12:13,990 --> 00:12:20,170
Because right now we are dealing with a specific ad because we are at a specific eye of this for I loop

174
00:12:20,170 --> 00:12:20,820
here.

175
00:12:20,820 --> 00:12:26,410
And so I hear has a specific value that corresponds to a specific ad and so we need to keep track of

176
00:12:26,410 --> 00:12:32,500
this specific add each time we find another band that is larger than the max or we're bound to become

177
00:12:32,770 --> 00:12:34,440
this new max of rebound.

178
00:12:34,720 --> 00:12:35,260
All right.

179
00:12:35,260 --> 00:12:36,160
So that's great.

180
00:12:36,220 --> 00:12:41,960
But you know when we use a new variable here it's always important to initialize it.

181
00:12:41,980 --> 00:12:44,080
So that's what we'll do right now.

182
00:12:44,080 --> 00:12:46,650
We will initialize this as variable.

183
00:12:46,660 --> 00:12:49,420
We will initialize it to zero.

184
00:12:49,830 --> 00:12:50,190
OK.

185
00:12:50,200 --> 00:12:51,510
So we're getting close.

186
00:12:51,610 --> 00:12:57,890
Now what we need to do is deal with the initial conditions because this is what happens that round.

187
00:12:57,940 --> 00:13:03,430
And you know this is the strategy that happens at round and but this is actually not what happens at

188
00:13:03,430 --> 00:13:08,790
the beginning because at the beginning you know during the 10 first rounds we don't have much information

189
00:13:08,890 --> 00:13:09,340
yet.

190
00:13:09,370 --> 00:13:15,130
We don't have much information about their reward whether they earned reward equals one or reward equals

191
00:13:15,130 --> 00:13:15,760
zero.

192
00:13:15,790 --> 00:13:19,380
When we selected them because simply we haven't selected them yet.

193
00:13:19,600 --> 00:13:25,960
So that's why we need to deal with the initial conditions that is choose which as we will select during

194
00:13:25,960 --> 00:13:27,140
the 10 first rounds.

195
00:13:27,250 --> 00:13:32,650
And so according to you what will be the strategy to select the asterisk to 10 rounds given the fact

196
00:13:32,650 --> 00:13:34,380
that we don't have any information.

197
00:13:34,570 --> 00:13:37,070
Well there is actually no strategy.

198
00:13:37,150 --> 00:13:41,140
We will simply select the 10 first ads without using the strategy here.

199
00:13:41,140 --> 00:13:47,110
We will use this strategy as soon as we have some informations of the reward of each of the 10 ads.

200
00:13:47,110 --> 00:13:53,290
So basically what we will do during the first 10 rounds is to simply select the 10 first ads that is

201
00:13:53,500 --> 00:14:00,390
run one will select Add one round to will select to run three We'll select at 3 up to around 10.

202
00:14:00,400 --> 00:14:06,850
We'll select at 10 and then that will give us some information about you know the number of selections

203
00:14:07,000 --> 00:14:08,970
of each of the 10 as well.

204
00:14:08,990 --> 00:14:14,950
That's round 11 the number of selections will be one for each of the 10 at and we'll also get some information

205
00:14:15,010 --> 00:14:20,650
about the sums of rewards that some of your words will contain either zeroes corresponding to the go

206
00:14:20,710 --> 00:14:26,620
to zero reward when they were selected during the first round or ones corresponding to the ads that

207
00:14:26,620 --> 00:14:30,110
go to one reward when they were selected during the first 10 rounds.

208
00:14:30,310 --> 00:14:37,360
So let's do it now let's simply select one two three up to 10 during the first ten rounds and then let's

209
00:14:37,360 --> 00:14:47,010
use the strategy so to do this we will add that if condition here which will be if numbers of selections

210
00:14:47,500 --> 00:14:50,780
by is larger than zero.

211
00:14:51,010 --> 00:14:57,730
So that means if the version I was selected at least once then we will use this strategy and actually

212
00:14:57,970 --> 00:14:59,970
we need to align this.

213
00:15:00,060 --> 00:15:05,520
And so now thanks to this condition here the strategy will be applied after the 10 first rounds.

214
00:15:05,740 --> 00:15:06,400
OK.

215
00:15:06,520 --> 00:15:12,470
And now we just need to add a little something to make sure that the algorithm selects one or two at

216
00:15:12,480 --> 00:15:14,930
three to 10 during the ten first round.

217
00:15:15,100 --> 00:15:25,720
And to do this the trick is to add an else here else and then we will set the upper bound to a very

218
00:15:25,720 --> 00:15:28,250
large value like 10.

219
00:15:28,390 --> 00:15:30,260
And the power of 400.

220
00:15:30,370 --> 00:15:37,390
So to get this we can use one three four hundred and that's 10 to the power of 400.

221
00:15:37,750 --> 00:15:40,090
So now I'd like to give you a little enigma.

222
00:15:40,180 --> 00:15:46,240
I would like you to figure out why we're using this very large and you turn the power of 400 for the

223
00:15:46,240 --> 00:15:52,180
upper bound here in the else condition try to figure out why trying to figure out how it will be useful

224
00:15:52,180 --> 00:15:53,270
for what we want.

225
00:15:53,470 --> 00:15:57,040
And now you get the answer and the explanation in the next to Torro.

226
00:15:57,280 --> 00:15:58,950
Until then enjoy machine learning
