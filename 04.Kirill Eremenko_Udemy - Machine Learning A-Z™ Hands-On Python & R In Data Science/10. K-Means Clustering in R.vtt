WEBVTT
1

00:00:00.240  -->  00:00:05.340
Hello and welcome to this art tutorial in this tutorial we are going to solve our business problem using

2

00:00:05.340  -->  00:00:07.420
the Kamins algorithm in our.

3

00:00:07.440  -->  00:00:13.320
So let's start by setting a working directory so we get a session set working directory and we click

4

00:00:13.320  -->  00:00:14.370
on choose directory.

5

00:00:14.580  -->  00:00:20.670
Then we pick our folder machine learning azy Part 3 clustering section Kamins clustering and we click

6

00:00:20.670  -->  00:00:21.420
on Open.

7

00:00:21.670  -->  00:00:24.400
OK now the first step is to import the small data sets.

8

00:00:24.540  -->  00:00:30.200
So let's introduce a new code section with the comment importing Dymo data set and we import our dataset

9

00:00:30.240  -->  00:00:33.110
by typing dataset left arrow.

10

00:00:33.210  -->  00:00:34.540
Read that CSV.

11

00:00:34.770  -->  00:00:37.240
And in parenthesis Model T S V.

12

00:00:37.260  -->  00:00:41.280
OK let's select this line and hit Control increment please enter to execute.

13

00:00:41.280  -->  00:00:43.450
And our data set is now imported.

14

00:00:43.710  -->  00:00:45.370
Let's click on it to see it.

15

00:00:45.770  -->  00:00:50.700
OK so let's me explain what this small dataset is about and what our mission is.

16

00:00:50.730  -->  00:00:56.580
There is a big mall in a specific city that contains information of its clients the clients that subscribe

17

00:00:56.580  -->  00:01:01.980
to the membership card when the clients subscribe to the card they provided their information like their

18

00:01:01.980  -->  00:01:05.430
gender their age and their annual income.

19

00:01:05.430  -->  00:01:09.840
And because they have this card they use it to buy all sorts of things in the mall and therefore the

20

00:01:09.840  -->  00:01:12.750
mall has to purchase history of each of its client member.

21

00:01:12.750  -->  00:01:16.650
And that's how they obtained the last column here which is a spending score.

22

00:01:16.650  -->  00:01:22.110
So as a reminder of the spending score is a score that the mall computed for each of their clients based

23

00:01:22.110  -->  00:01:27.480
on several criteria including for example their income the number of times per week they show up in

24

00:01:27.480  -->  00:01:28.230
the mall.

25

00:01:28.350  -->  00:01:33.360
And of course the amount of dollars they spent in year and based on all this they computed this metric

26

00:01:33.360  -->  00:01:35.930
that takes values between 1 and 100.

27

00:01:35.970  -->  00:01:42.000
So that the closer to spending score is to 1 and the less declines spends and the closer the spending

28

00:01:42.000  -->  00:01:44.900
scores to 100 the more decline spends.

29

00:01:45.120  -->  00:01:51.450
And eventually after collecting this data set the company hired you as a machine earning scientist to

30

00:01:51.450  -->  00:01:55.690
segment their clients into different groups based on these two metrics.

31

00:01:55.800  -->  00:02:01.470
The annual income and the spending score and since the mall has no idea what this client segments might

32

00:02:01.470  -->  00:02:05.390
be or even has no idea about how many segments there would be.

33

00:02:05.490  -->  00:02:09.720
This is typically a clustering problem because we don't know the answers.

34

00:02:09.720  -->  00:02:15.510
So now let's start our mission and use the Kamins algorithm to find out what those clusters of clients

35

00:02:15.510  -->  00:02:16.300
might be.

36

00:02:16.650  -->  00:02:22.650
So here we just imported the data set and now let's create a variable x that will only contain the two

37

00:02:22.650  -->  00:02:26.410
columns we are interested in the annual income and the spending score.

38

00:02:26.430  -->  00:02:32.640
So here we write X left arrow data set and then in square brackets we're going to put the two indexes

39

00:02:32.640  -->  00:02:34.290
of our two columns of interest.

40

00:02:34.290  -->  00:02:40.740
That is if we go to data set since indexes are started 1 the indexes of our two columns annual income

41

00:02:40.740  -->  00:02:43.320
and spending score are 4 and 5.

42

00:02:43.320  -->  00:02:49.630
So here in the square brackets we put for Column 5 which means that we go from 4 to 5.

43

00:02:49.830  -->  00:02:50.210
OK.

44

00:02:50.230  -->  00:02:53.510
It's like this line of code and execute it perfect.

45

00:02:53.580  -->  00:03:00.070
It created the array x of our two columns which we can visualize here by clicking on X..

46

00:03:00.480  -->  00:03:00.860
All right.

47

00:03:00.870  -->  00:03:05.940
Now we have our data well imported and well-prepared and we are ready to move onto the next step and

48

00:03:05.940  -->  00:03:08.460
that's when things start to get interesting indeed.

49

00:03:08.580  -->  00:03:11.370
Right now we are going to start using Kamins.

50

00:03:11.460  -->  00:03:15.490
So remember when we use Kamins we have to specify the number of clusters.

51

00:03:15.570  -->  00:03:20.100
But the problem here is that we have no idea of how many clusters of clients we are looking for.

52

00:03:20.190  -->  00:03:25.140
So we could fit came in several times in our dataset with different numbers of clusters to test different

53

00:03:25.140  -->  00:03:26.040
outcomes.

54

00:03:26.040  -->  00:03:31.200
However there is a much faster way that allows us to find the optimal number of clusters to use with

55

00:03:31.200  -->  00:03:35.470
K means for our problem and we are of course going to use the elbow method.

56

00:03:35.520  -->  00:03:40.950
So let's introduce a new section with the comment using the elbow method to find the optimal number

57

00:03:40.950  -->  00:03:46.500
of clusters and in this code section we are going to make a for loop to plot our elbow method chart

58

00:03:46.510  -->  00:03:46.710
.

59

00:03:46.890  -->  00:03:51.930
So since there are random factors and Kamins we can obtain slightly different results by using came

60

00:03:51.930  -->  00:03:52.980
in several times.

61

00:03:53.220  -->  00:03:59.010
So in order to all get the same result we are going to set the same seed and to do this we type set

62

00:03:59.280  -->  00:04:03.760
dot seed and then parenthesis we can pick whatever number we like.

63

00:04:03.810  -->  00:04:05.400
Let's pick six.

64

00:04:05.460  -->  00:04:10.620
Then we are going to use a for loop to compute some different within plus the sum of squares for different

65

00:04:10.620  -->  00:04:15.510
numbers of clusters and we are going to place the different within cluster sum of squares in a vector

66

00:04:15.510  -->  00:04:15.930
.

67

00:04:15.930  -->  00:04:23.130
So let's start by initializing this vector by typing WCA says left arrow vector and empty parenthesis

68

00:04:23.130  -->  00:04:23.640
.

69

00:04:24.000  -->  00:04:26.210
So that just initialized an empty vector.

70

00:04:26.250  -->  00:04:30.450
And now we're going to use the full loop to populated with the different within cluster sum of squares

71

00:04:30.450  -->  00:04:31.100
.

72

00:04:31.140  -->  00:04:32.650
So let's write four.

73

00:04:32.910  -->  00:04:36.230
And in parenthesis I in one call and 10.

74

00:04:36.240  -->  00:04:41.330
So in four loops and are the lower bound in the upper bound are included so here that means that I'm

75

00:04:41.340  -->  00:04:47.050
going to take the values from 1 to 10 into that and then at each iteration we directly compute the within

76

00:04:47.060  -->  00:04:54.650
close to sum of squares for each number of clusters by writing sum and in parenthesis k means X..

77

00:04:54.730  -->  00:05:00.990
I fit the Kamins algorithm to our data set X with clusters and by doing that we actually created an

78

00:05:00.990  -->  00:05:03.260
object of the class K Kamins in R.

79

00:05:03.480  -->  00:05:09.990
And if we select Kamins here press F 1 and then scroll down to value we see that this class has an attribute

80

00:05:09.990  -->  00:05:17.220
called within that computes to within a cluster sum of squares so let's of course use it and type Kamins

81

00:05:17.280  -->  00:05:20.280
X I and then Dollar Sign with it.

82

00:05:20.450  -->  00:05:20.850
All right.

83

00:05:20.850  -->  00:05:25.770
Now thanks to this group the WTS has vector's populated with a 10 different with interest the sum of

84

00:05:25.770  -->  00:05:29.030
squares for the 10 numbers of clusters 9:59.

85

00:05:29.280  -->  00:05:29.770
Perfect.

86

00:05:29.770  -->  00:05:32.300
So now all we have to do leftist plot the graph.

87

00:05:32.490  -->  00:05:39.250
So we type plot and in parenthesis we first put the x values that means 9:59 then the y values.

88

00:05:39.270  -->  00:05:43.400
WCA says OK then let's select plot and press F 1.

89

00:05:43.650  -->  00:05:45.470
We can specify a type of plot.

90

00:05:45.630  -->  00:05:49.450
Peter have only points L to have any lines and B for both.

91

00:05:49.560  -->  00:05:51.040
And we are going to choose both.

92

00:05:51.240  -->  00:05:52.970
So be.

93

00:05:53.050  -->  00:05:58.350
Then let's give a title to her plot by typing main equals space and in parenthesis clusters of clients

94

00:05:58.350  -->  00:05:58.720
.

95

00:05:58.740  -->  00:06:00.660
Then we a name to our X label.

96

00:06:00.750  -->  00:06:07.320
So let's put ex-law because number of clusters and we give a name to our y axis y love equals WCOS s

97

00:06:07.320  -->  00:06:08.460
.

98

00:06:08.460  -->  00:06:13.770
Now let's electroscope section here and let's execute it to see if we have an optimal number of clusters

99

00:06:13.770  -->  00:06:14.100
.

100

00:06:14.220  -->  00:06:15.330
And yes we do.

101

00:06:15.330  -->  00:06:18.130
We can clearly see that the point here is the elbow.

102

00:06:18.210  -->  00:06:22.690
And when we project this point on the x axis we obtain 5 clusters.

103

00:06:22.770  -->  00:06:27.630
So that means that the optimal number of clusters for our problem is five clusters.

104

00:06:27.960  -->  00:06:32.880
And thanks to this insightful information we are ready to move on to the next step because the next

105

00:06:32.880  -->  00:06:38.610
step is actually to fit Kamins to the small data set with the right number of clusters five clusters

106

00:06:38.610  -->  00:06:39.360
.

107

00:06:39.360  -->  00:06:43.700
So let's introduce this new step with the comment applying gamins to them all datasets.

108

00:06:43.710  -->  00:06:46.400
Then let's proceed so that we all obtain the same result.

109

00:06:46.440  -->  00:06:51.640
We can beat any number let's pick 29 and then let's fit came into our data x.

110

00:06:51.720  -->  00:06:58.600
So we create the object gamins from the class Kamins and then let's select Kamins here and press F 1

111

00:06:58.600  -->  00:06:59.330
.

112

00:06:59.430  -->  00:07:04.910
The first argument we have to input is our data X then the second argument is the number of clusters

113

00:07:04.910  -->  00:07:04.990
.

114

00:07:05.010  -->  00:07:06.250
And now we know it's five.

115

00:07:06.630  -->  00:07:10.050
And then like in python we can specify a maximum of iterations.

116

00:07:10.050  -->  00:07:12.850
Let's use the same value for Mexico 300.

117

00:07:13.170  -->  00:07:18.030
And we can also specify the number of initial random sets and start equals then.

118

00:07:18.190  -->  00:07:22.740
All right now we have everything we need and we are ready to select this code section and execute it

119

00:07:22.740  -->  00:07:25.650
to fit the Kamins algorithm to our data X..

120

00:07:25.650  -->  00:07:26.390
Here we go.

121

00:07:26.640  -->  00:07:28.230
And perfect.

122

00:07:28.230  -->  00:07:31.580
Now let's move on to the next step and let's get all the fun.

123

00:07:31.590  -->  00:07:36.660
Indeed this is the fun part because we did our job fitting the Kamins algorithm to our data X and now

124

00:07:36.660  -->  00:07:38.480
we look forward to seeing the results.

125

00:07:38.490  -->  00:07:40.880
So let's immediately introduce this new section.

126

00:07:41.040  -->  00:07:45.910
Visualizing the clusters we are going to Protheroe clusters using the cluster library.

127

00:07:45.930  -->  00:07:51.120
So first thing we do is to import the cluster library and to do this you can either go to packages and

128

00:07:51.120  -->  00:07:56.790
select cluster here or we can type here library and in parenthesis cluster which is a better way if

129

00:07:56.790  -->  00:07:57.890
you want to execute later.

130

00:07:57.900  -->  00:07:59.010
The whole script.

131

00:07:59.100  -->  00:08:02.000
And now let's plot our clusters to do this.

132

00:08:02.040  -->  00:08:07.700
We will use clus plot let's select classpath here and press F 1 to see the parameters through input

133

00:08:07.700  -->  00:08:08.340
.

134

00:08:08.550  -->  00:08:11.510
So the first parameter is our data x.

135

00:08:11.700  -->  00:08:15.020
The second parameter when put the vector of clusters.

136

00:08:15.090  -->  00:08:20.490
That is the vector that returns for each observation which cluster it belongs to and we can take this

137

00:08:20.490  -->  00:08:28.200
vector by typing Kamins dollar sign cluster then a parameter that we have to specify is lines because

138

00:08:28.200  -->  00:08:33.030
when you don't give a value two lines some distance lines between the clusters will appear in your plot

139

00:08:33.340  -->  00:08:34.720
and we don't really want that.

140

00:08:34.770  -->  00:08:39.730
So we are going to choose a value zero so that no distance lines will appear in our plot.

141

00:08:39.780  -->  00:08:45.150
Then let's set the parameters shape to true so that the clusters are shaded with respect to their density

142

00:08:46.050  -->  00:08:47.040
then Same for color.

143

00:08:47.040  -->  00:08:53.250
Let's add it to true then we have the parameter labels and we are going to pick labels equals to so

144

00:08:53.250  -->  00:08:56.580
that we have all points and clusters labeled in the plot.

145

00:08:57.060  -->  00:09:00.260
Then we don't really want different symbols for the points and different clusters.

146

00:09:00.330  -->  00:09:05.730
So we said plot got to false then we have this cool parameter span that allows us to plot ellipses around

147

00:09:05.730  -->  00:09:09.790
the clusters and in order to plot the ellipses we will set it to true.

148

00:09:10.400  -->  00:09:13.070
And finally we would like to add a title to our plot.

149

00:09:13.140  -->  00:09:17.570
So we write main equals spaced clusters of clients.

150

00:09:17.580  -->  00:09:24.930
Then we want to give a name to our x axis so we add x love equals annual income and same for the y axis

151

00:09:25.200  -->  00:09:27.630
while other equals spending score.

152

00:09:28.290  -->  00:09:29.680
And now a moment of truth.

153

00:09:29.820  -->  00:09:32.600
Let's find out what our five clusters look like.

154

00:09:32.790  -->  00:09:39.660
We select this code section here and let's press commander control plus enter to execute voila our five

155

00:09:39.660  -->  00:09:41.190
final clusters.

156

00:09:41.490  -->  00:09:47.620
So let's look at them one by one cluster one clients and cluster one have high income and no spending

157

00:09:47.620  -->  00:09:48.150
score.

158

00:09:48.300  -->  00:09:52.610
So in this cluster clients earn a high income but don't spend much money.

159

00:09:52.680  -->  00:09:54.690
So we could call this cluster of clients.

160

00:09:54.690  -->  00:10:01.500
Careful for careful clients cluster to clients in cluster to have average income an average spending

161

00:10:01.500  -->  00:10:02.130
score.

162

00:10:02.130  -->  00:10:08.890
So let's call this cluster of clients standard cluster 3 high income and high spending score.

163

00:10:08.910  -->  00:10:13.860
So that is the cluster of clients that would be the main potential target of the mall marketing campaigns

164

00:10:13.870  -->  00:10:13.990
.

165

00:10:14.070  -->  00:10:18.780
And so it would be very insightful for them all to understand what kind of products are bought by the

166

00:10:18.780  -->  00:10:20.190
clients in this cluster.

167

00:10:20.190  -->  00:10:27.960
So eventually we can get to discuss the following name targets cluster for low income and low spending

168

00:10:27.960  -->  00:10:28.620
score.

169

00:10:28.650  -->  00:10:33.570
So as opposed to the Carolis clients who have low income and spend much we are going to call them the

170

00:10:33.570  -->  00:10:39.430
sensible clients and eventually close to five low income but high spending score.

171

00:10:39.480  -->  00:10:43.700
So clients in this cluster earn a low income but don't care and spend much.

172

00:10:43.710  -->  00:10:47.520
So let's call this cluster of clients careless.

173

00:10:47.520  -->  00:10:48.000
All right.

174

00:10:48.000  -->  00:10:53.610
We are done with the Kamins algorithm and our look at our code is structured simple and it does the

175

00:10:53.610  -->  00:10:58.740
job perfectly well and you can use this code any time you want for your work you just have to replace

176

00:10:58.740  -->  00:11:00.300
the name of the data set.

177

00:11:00.360  -->  00:11:05.580
Change the indexes of the columns of interest and then you just have to execute this code to find some

178

00:11:05.580  -->  00:11:07.100
answers of your business problem.

179

00:11:07.290  -->  00:11:12.030
And if you are doing clustering in more than two dimensions then don't execute the less code section

180

00:11:12.030  -->  00:11:16.340
to visualize the clusters because it's only for two dimensional clustering.

181

00:11:16.350  -->  00:11:20.700
However later in this course we will learn a technique that allows us to reduce the diamond sions of

182

00:11:20.700  -->  00:11:21.660
our data sets.

183

00:11:21.660  -->  00:11:27.150
So if you reduce your data set to two dimensions then you can use this last code section to plot the

184

00:11:27.150  -->  00:11:28.240
clusters.

185

00:11:28.320  -->  00:11:31.650
And now to finish this tutorial let's clear everything.

186

00:11:31.710  -->  00:11:33.610
So we click on this button here.

187

00:11:34.350  -->  00:11:37.620
Let's also go here and press control Al to clear the console.

188

00:11:37.800  -->  00:11:42.740
We still like the whole code executed and we make sure everything works fine.

189

00:11:43.140  -->  00:11:47.300
Thank you for watching this video and I look forward to seeing you in the next tutorial.
