WEBVTT
1
00:00:01.740 --> 00:00:07.030
If you do, however, also want to log the user out of the authorization server,

2
00:00:07.030 --> 00:00:10.650
then OpenID Connect's Session Management endpoint

3
00:00:10.650 --> 00:00:12.930
is there for just that purpose.

4
00:00:12.930 --> 00:00:16.210
It provides ways your client can monitor the session of the

5
00:00:16.210 --> 00:00:19.800
user on the auth server and a way for them to also sign the

6
00:00:19.800 --> 00:00:22.340
user out of the auth server.

7
00:00:22.340 --> 00:00:25.800
And with Spring, it's super easy to set up.

8
00:00:25.800 --> 00:00:30.580
On the logout builder, we can add a logoutSuccessHandler,

9
00:00:30.580 --> 00:00:35.200
which will trigger when logging out of crypto‑portfolio is complete,

10
00:00:35.200 --> 00:00:40.240
i.e., the session between the user's browser and crypto‑portfolio is terminated.

11
00:00:40.240 --> 00:00:44.340
Then we can implement a way of logging out the user from the

12
00:00:44.340 --> 00:00:49.850
authorization server in our logoutSuccessHandler; however,

13
00:00:49.850 --> 00:00:55.670
Spring conveniently has implemented a logoutSuccessHandler for OpenID Connect,

14
00:00:55.670 --> 00:00:59.140
which is compatible with the Session Management endpoint.

15
00:00:59.140 --> 00:01:03.280
So let's create a method to return an instance of this class,

16
00:01:03.280 --> 00:01:09.340
the OidcClientInitiatedLogoutSuccessHandler.

17
00:01:09.340 --> 00:01:12.940
The name explains what we are doing perfectly.

18
00:01:12.940 --> 00:01:15.320
Our client is initiating a logout.

19
00:01:15.320 --> 00:01:19.340
All we do is set the postLogoutRedirectUri.

20
00:01:19.340 --> 00:01:22.850
This is where the authorization server will redirect our user's

21
00:01:22.850 --> 00:01:27.340
browser to after the logout is completed successfully.

22
00:01:27.340 --> 00:01:29.940
I'll set it to just go back to the root.

23
00:01:29.940 --> 00:01:30.320
Now,

24
00:01:30.320 --> 00:01:32.760
you can instruct Spring Security to use this

25
00:01:32.760 --> 00:01:36.540
logoutSuccessHandler via the logout builder method.

26
00:01:36.540 --> 00:01:41.340
One last thing we need to do is in the Keycloak admin console,

27
00:01:41.340 --> 00:01:46.030
we have to set the redirect URI in the verified redirect URIs for

28
00:01:46.030 --> 00:01:49.840
that client otherwise Keycloak will reject it.

29
00:01:49.840 --> 00:01:50.050
Now,

30
00:01:50.050 --> 00:01:54.130
this is to prevent a malicious browser plug‑in manipulating this redirect

31
00:01:54.130 --> 00:01:57.560
value and redirecting the user to some malicious site,

32
00:01:57.560 --> 00:01:58.510
for example.

33
00:01:58.510 --> 00:02:03.140
If we restart our application, log in, and log out,

34
00:02:03.140 --> 00:02:07.380
the user has been logged out from both the application and

35
00:02:07.380 --> 00:02:11.040
Keycloak and is prompted to sign in again.

36
00:02:11.040 --> 00:02:16.040
This time, the user session is terminated, unlike with the prompt property.

37
00:02:16.040 --> 00:02:16.290
Now,

38
00:02:16.290 --> 00:02:19.860
different identity providers or authorization servers will

39
00:02:19.860 --> 00:02:23.300
also have custom ways of achieving this.

40
00:02:23.300 --> 00:02:24.930
For example, with Keycloak,

41
00:02:24.930 --> 00:02:28.320
you can instruct the Keycloak server not to create a

42
00:02:28.320 --> 00:02:30.850
session after authenticating the user.

43
00:02:30.850 --> 00:02:35.440
This way, each time an authorization request reaches Keycloak,

44
00:02:35.440 --> 00:02:37.940
the user will have to reauthenticate.

45
00:02:37.940 --> 00:02:42.740
All you do is, in the Keycloak admin console, under Authentication,

46
00:02:42.740 --> 00:02:53.240
create a new flow with cookies disabled.

47
00:02:53.240 --> 00:02:58.710
Then in your client, you can override the browser auth flow to

48
00:02:58.710 --> 00:03:04.140
use this new flow, hence no session and no reauthentication

49
00:03:04.140 --> 00:03:06.740
for each authorization request.

50
00:03:06.740 --> 00:03:11.570
Now, it's worth mentioning, Keycloak actually has great support for Spring Boot

51
00:03:11.570 --> 00:03:16.440
and Spring Security, not surprising as it's based on Java.

52
00:03:16.440 --> 00:03:20.500
There is a spring‑boot‑starter, and it is well documented.

53
00:03:20.500 --> 00:03:24.130
This gives you closer integration; however,

54
00:03:24.130 --> 00:03:25.780
this course is about OAuth,

55
00:03:25.780 --> 00:03:34.000
and using the adapter will tightly couple the application to Keycloak. Okay. Next, let's wrap up.

