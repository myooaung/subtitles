1
00:00:01,640 --> 00:00:04,340
Hi, it's Wojciech Lesniak again.

2
00:00:04,340 --> 00:00:06,130
In the previous modules,

3
00:00:06,130 --> 00:00:12,840
you learn how to add OAuth2 login into an existing application's authentication.

4
00:00:12,840 --> 00:00:17,420
That was a lengthy module, and it didn't even include building

5
00:00:17,420 --> 00:00:21,040
the user registration and form authentication.

6
00:00:21,040 --> 00:00:23,740
That is another course in itself.

7
00:00:23,740 --> 00:00:28,840
If you're interested, you can check out my previous course on how to do that.

8
00:00:28,840 --> 00:00:34,660
But what if I told you that you can get all this done and

9
00:00:34,660 --> 00:00:38,240
more with just a few lines of configuration?

10
00:00:38,240 --> 00:00:42,470
Yeah, authentication without coding, and your

11
00:00:42,470 --> 00:00:46,040
application's architecture will be more secure.

12
00:00:46,040 --> 00:00:51,370
You can achieve all this by outsourcing your authentication to an identity

13
00:00:51,370 --> 00:00:57,440
provider, known as an authorization server in the OAuth world.

14
00:00:57,440 --> 00:01:01,220
When an unauthenticated user accesses your application,

15
00:01:01,220 --> 00:01:06,140
your application will simply delegate authentication of that user

16
00:01:06,140 --> 00:01:10,460
to the authorization server. The authorization server will then

17
00:01:10,460 --> 00:01:13,340
notify your application of the result.

18
00:01:13,340 --> 00:01:18,210
The auth server will handle all the heavy lifting, identity brokering

19
00:01:18,210 --> 00:01:24,380
with SAML, Kerberos, user federation with OAuth and LDAP, or Active

20
00:01:24,380 --> 00:01:27,770
Directory, or any custom user store that you use.

21
00:01:27,770 --> 00:01:32,340
It will even handle social login with Facebook or Google for you,

22
00:01:32,340 --> 00:01:37,740
not to mention user registration, management, you name it.

23
00:01:37,740 --> 00:01:40,840
Now, from a security perspective,

24
00:01:40,840 --> 00:01:45,810
all your user passwords, and authentication data, and code will be

25
00:01:45,810 --> 00:01:50,120
isolated from your application, so any injection vulnerabilities

26
00:01:50,120 --> 00:01:54,090
introduced by your development teams will not result in lists of users

27
00:01:54,090 --> 00:01:57,740
and password hashes being sold on the dark web.

28
00:01:57,740 --> 00:02:01,580
And as you add more applications and services,

29
00:02:01,580 --> 00:02:06,940
you avoid having to duplicate authentication logic in every application.

30
00:02:06,940 --> 00:02:12,200
So adding a new authentication requirement, like two‑factor authentication or

31
00:02:12,200 --> 00:02:17,240
even biometrics in the future, will only be done in one place.

32
00:02:17,240 --> 00:02:20,200
The trend also seems to be towards distributed

33
00:02:20,200 --> 00:02:22,640
microservices‑style architectures,

34
00:02:22,640 --> 00:02:26,610
which are polyglot in nature, hence this approach is perfect

35
00:02:26,610 --> 00:02:30,450
for that environment as your application can be an OpenID

36
00:02:30,450 --> 00:02:33,140
client of the authorization server,

37
00:02:33,140 --> 00:02:37,640
making the interactions technologically agnostic, and you can have

38
00:02:37,640 --> 00:02:41,240
dedicated security teams working on just this part.

39
00:02:41,240 --> 00:02:50,000
I could go on, but I'm sure you get the point. Next, let's look at your options for an authorization server.

