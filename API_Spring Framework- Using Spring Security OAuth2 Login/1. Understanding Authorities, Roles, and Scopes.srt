1
00:00:01,840 --> 00:00:04,040
Hi, it's Wojciech Lesniak.

2
00:00:04,040 --> 00:00:07,140
Welcome to the final module on authorization.

3
00:00:07,140 --> 00:00:11,170
In Spring Security, on the authentication token,

4
00:00:11,170 --> 00:00:14,120
there is a collection called GrantedAuthority,

5
00:00:14,120 --> 00:00:20,440
which, well, represents authorities granted to the user, plain and simple.

6
00:00:20,440 --> 00:00:23,540
Spring traditionally had two types,

7
00:00:23,540 --> 00:00:28,640
authorities and roles, both stored in this collection.

8
00:00:28,640 --> 00:00:33,140
Authorities are your more fine‑grained authorization,

9
00:00:33,140 --> 00:00:36,040
generally representing a single task, like,

10
00:00:36,040 --> 00:00:36,500
for example,

11
00:00:36,500 --> 00:00:40,070
portfolio:read or portfolio:write, and roles are

12
00:00:40,070 --> 00:00:42,660
like containers for authorities.

13
00:00:42,660 --> 00:00:47,040
So rather than individually assigning a new admin user with

14
00:00:47,040 --> 00:00:50,070
all the authorities related to their role,

15
00:00:50,070 --> 00:00:53,010
you can just assign them a role of admin,

16
00:00:53,010 --> 00:00:56,040
which kind of represents that level of access.

17
00:00:56,040 --> 00:00:59,650
Now, scopes come into play when you're dealing with OAuth,

18
00:00:59,650 --> 00:01:04,840
which is for delegated authorization, so what a client

19
00:01:04,840 --> 00:01:09,930
application can do or access on behalf of the user. OAuth 2

20
00:01:09,930 --> 00:01:12,910
defines scopes as groupings of claims.

21
00:01:12,910 --> 00:01:17,470
So if you look at the OpenID Connect specification for scopes,

22
00:01:17,470 --> 00:01:21,240
you can see the logical groupings of claims about the user.

23
00:01:21,240 --> 00:01:24,480
So rather than requesting each individual claim,

24
00:01:24,480 --> 00:01:28,840
you can request a scope and get the related claims back.

25
00:01:28,840 --> 00:01:31,100
You can also use scopes to define actions,

26
00:01:31,100 --> 00:01:34,970
so portfolio:read would mean read access for a portfolio, and

27
00:01:34,970 --> 00:01:38,140
portfolio:write could mean write access to a portfolio.

28
00:01:38,140 --> 00:01:41,390
Now, the main difference between roles and scopes is that roles

29
00:01:41,390 --> 00:01:45,420
are what privileges the user has and scopes are what the client

30
00:01:45,420 --> 00:01:48,140
can access or do on the user's behalf.

31
00:01:48,140 --> 00:01:52,440
So you could have a user that's an administrator in an application,

32
00:01:52,440 --> 00:01:58,160
giving them authority to perform administrative functions, a client who

33
00:01:58,160 --> 00:02:00,480
would hold an access token for this user,

34
00:02:00,480 --> 00:02:04,660
and let's say the access token has the scope of user profile and email.

35
00:02:04,660 --> 00:02:07,030
Now, this gives the client access to the user's profile

36
00:02:07,030 --> 00:02:10,540
information and email address, that's it.

37
00:02:10,540 --> 00:02:14,180
The client can't perform any admin functions on the user's behalf.

38
00:02:14,180 --> 00:02:16,270
Now, they would need an access token with the correct

39
00:02:16,270 --> 00:02:19,040
scopes allowing them to do that.

40
00:02:19,040 --> 00:02:20,570
You can actually see this in Keycloak.

41
00:02:20,570 --> 00:02:26,540
Scopes can be assigned to clients, whereas roles to users and not vice versa.

42
00:02:26,540 --> 00:02:29,940
The GrantedAuthority collection, again, is effectively a list.

43
00:02:29,940 --> 00:02:34,730
You will find that the roles are prefixed with capital ROLE_ and scopes

44
00:02:34,730 --> 00:02:39,270
with capital SCOPE_, while authorities have no prefix. The prefixes are

45
00:02:39,270 --> 00:02:47,000
basically like a namespace for the different types. Next, let's look at role‑based authorization.

