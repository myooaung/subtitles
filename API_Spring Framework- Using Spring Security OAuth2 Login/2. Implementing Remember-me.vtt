WEBVTT
1
00:00:01.640 --> 00:00:05.090
If you access the login to our demo application,

2
00:00:05.090 --> 00:00:10.230
Spring adds a session cookie named JSESSION_ID.

3
00:00:10.230 --> 00:00:14.500
As you can see, it's for our localhost domain to the root path,

4
00:00:14.500 --> 00:00:16.560
and the expiry is set to Session,

5
00:00:16.560 --> 00:00:20.440
which means that it's active until the browser session is aligned.

6
00:00:20.440 --> 00:00:23.620
That basically means until the user closes their browser.

7
00:00:23.620 --> 00:00:27.740
Now, to allow the user to stay logged in between sessions,

8
00:00:27.740 --> 00:00:33.040
Spring supports rememberMe, and it has its own builder method.

9
00:00:33.040 --> 00:00:35.560
You can check out my previous course where I go into the

10
00:00:35.560 --> 00:00:38.540
details about it and how to set it up.

11
00:00:38.540 --> 00:00:40.430
But for this course,

12
00:00:40.430 --> 00:00:45.180
the whole point of outsourcing authentication to Keycloak using OpenID

13
00:00:45.180 --> 00:00:49.300
Connect and OAuth was so that our client app doesn't have to deal with

14
00:00:49.300 --> 00:00:52.130
that and for all that to be managed centrally,

15
00:00:52.130 --> 00:00:54.740
not at every application or service.

16
00:00:54.740 --> 00:00:56.560
So let's log into the Keycloak admin console.

17
00:00:56.560 --> 00:01:03.440
Now, under Login, select Remember Me, Save, job done.

18
00:01:03.440 --> 00:01:05.500
Now, let's close and reopen our browser.

19
00:01:05.500 --> 00:01:10.040
Now, Keycloak gives us the Remember Me checkbox.

20
00:01:10.040 --> 00:01:15.840
If you select it, and log in, and close and restart your browser,

21
00:01:15.840 --> 00:01:18.310
this time, if you access crypto‑portfolio,

22
00:01:18.310 --> 00:01:23.540
you're still logged in and you don't have to re‑enter your credentials.

23
00:01:23.540 --> 00:01:25.020
If you inspect the cookies,

24
00:01:25.020 --> 00:01:28.740
you can see that we actually have a new Spring Security session,

25
00:01:28.740 --> 00:01:33.040
so reauthentication took place.

26
00:01:33.040 --> 00:01:34.530
And if we look at the Network tab,

27
00:01:34.530 --> 00:01:37.940
you can actually see the authorization code flow being triggered.

28
00:01:37.940 --> 00:01:42.140
Now, to achieve this, Keycloak added a new REMEMBER_ME cookie.

29
00:01:42.140 --> 00:01:44.340
This cookie is not a session cookie,

30
00:01:44.340 --> 00:01:47.340
so it doesn't disappear after the browser is closed.

31
00:01:47.340 --> 00:01:50.040
It does, however, have an expiry,

32
00:01:50.040 --> 00:01:53.240
and the duration can be tweaked via the console.

33
00:01:53.240 --> 00:01:58.640
Now, if you had enabled Remember Me in the Spring Security configuration,

34
00:01:58.640 --> 00:02:02.140
Spring would have added a similar REMEMBER_ME cookie.

35
00:02:02.140 --> 00:02:04.000
Now, for the user, it would have seemed transparent.

36
00:02:04.000 --> 00:02:07.070
They would have just remained logged into the application; however,

37
00:02:07.070 --> 00:02:11.320
if we did it via Spring and then the user was deactivated or

38
00:02:11.320 --> 00:02:14.440
their session was terminated with Keycloak,

39
00:02:14.440 --> 00:02:18.020
the user would still have access to crypto‑portfolio until

40
00:02:18.020 --> 00:02:20.620
the Spring REMEMBER_ME cookie expires.

41
00:02:20.620 --> 00:02:23.390
So that's something to think about,

42
00:02:23.390 --> 00:02:30.140
whereas if we drive it via Keycloak and we terminate the session at Keycloak,

43
00:02:30.140 --> 00:02:35.540
we can prevent reauthentication with the REMEMBER_ME the cookie taking place.

44
00:02:35.540 --> 00:02:40.210
Again, every application is different, just think about your bank.

45
00:02:40.210 --> 00:02:40.810
Generally,

46
00:02:40.810 --> 00:02:45.450
the session terminates after only 5 or 10 minutes of inactivity or your

47
00:02:45.450 --> 00:02:50.090
level of access is downgraded and you require reauthentication for any

48
00:02:50.090 --> 00:02:52.940
sensitive acts like transferring funds, etc.

49
00:02:52.940 --> 00:02:56.110
So it's important to treat reauthentication via Remember

50
00:02:56.110 --> 00:03:03.000
Me with more scrutiny in some cases. Next, let's look at tokens.

