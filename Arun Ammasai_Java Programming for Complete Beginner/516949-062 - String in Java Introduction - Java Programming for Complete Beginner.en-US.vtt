WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.190
Hello everyone, Welcome back.

00:00:02.190 --> 00:00:06.345
We have discussed different kinds of data types, correct?

00:00:06.345 --> 00:00:10.290
So into long double boolean,

00:00:10.290 --> 00:00:12.870
everything but all of them all primitive.

00:00:12.870 --> 00:00:15.794
So before we are moving to some other concept,

00:00:15.794 --> 00:00:21.270
let's talk about one important thing which is nothing but string.

00:00:21.270 --> 00:00:25.080
String is not a primitive data type, right?

00:00:25.080 --> 00:00:26.940
Because if you take a look at this string,

00:00:26.940 --> 00:00:28.500
the string is starts with capital letter,

00:00:28.500 --> 00:00:31.060
which means it's belongs to a class.

00:00:31.160 --> 00:00:32.655
Right?

00:00:32.655 --> 00:00:34.950
So what exactly is a string?

00:00:34.950 --> 00:00:37.380
String is basically a sequence of a character.

00:00:37.380 --> 00:00:40.240
For example, if we have a hello, H-E-L-L-O,

00:00:40.240 --> 00:00:44.255
each and everyone belongs to one single characters.

00:00:44.255 --> 00:00:47.700
The combination of character becomes a string.

00:00:47.950 --> 00:00:51.815
And in Java, string is an immutable object.

00:00:51.815 --> 00:00:54.035
Let's assume what is an immutable object?

00:00:54.035 --> 00:00:58.640
Immutable object means it cannot be modified again, right?

00:00:58.640 --> 00:01:01.145
So once it is created, it's been permanent.

00:01:01.145 --> 00:01:04.040
And there are multiple ways to create a string.

00:01:04.040 --> 00:01:07.175
The first one is string literal.

00:01:07.175 --> 00:01:09.830
Will talk about that also.

00:01:09.830 --> 00:01:12.710
Second, honest, using new keyword.

00:01:12.710 --> 00:01:15.545
Okay, we're going to talk about two methods.

00:01:15.545 --> 00:01:19.115
And what else we can do that when you have a string,

00:01:19.115 --> 00:01:23.420
you can do lots of operations like you can compare with another string.

00:01:23.420 --> 00:01:26.465
Are you can concatenate with the other string,

00:01:26.465 --> 00:01:29.990
or you can check something is available or not using equals R,

00:01:29.990 --> 00:01:31.280
you can split them.

00:01:31.280 --> 00:01:33.755
And you can find out the line not only that,

00:01:33.755 --> 00:01:36.035
there are a few other things also.

00:01:36.035 --> 00:01:39.455
So the ways we need to create a string s1 is equal to l,

00:01:39.455 --> 00:01:42.350
which means it is a string literal reign.

00:01:42.350 --> 00:01:45.620
And string two is equal to new string.

00:01:45.620 --> 00:01:47.210
So this is second way.

00:01:47.210 --> 00:01:49.400
So we're going to talk about what is the difference between

00:01:49.400 --> 00:01:53.570
these two bits in the next video before that. So what are the other method?

00:01:53.570 --> 00:01:56.465
We have seen few methods in the previous slide, right?

00:01:56.465 --> 00:01:58.610
The similar way the string will.

00:01:58.610 --> 00:02:00.710
How lot of operations?

00:02:00.710 --> 00:02:06.950
So here is a few of them care AT equals compared to start with index of concordant.

00:02:06.950 --> 00:02:09.110
We're not going to talk to all the methods.

00:02:09.110 --> 00:02:12.605
So I'm going to tell you what are the best thing which you can do.

00:02:12.605 --> 00:02:16.745
So once you know how to create a string and the alkyne, how to use them.

00:02:16.745 --> 00:02:21.695
Then you can go and search for yourself and you can find it how to use all limiters.

00:02:21.695 --> 00:02:24.710
Each and every method has its own ad one day.

00:02:24.710 --> 00:02:26.810
Right? So the next example,

00:02:26.810 --> 00:02:31.745
I'm going to create a simple string example.

00:02:31.745 --> 00:02:37.475
And I'm going to show you why we need to have a two different ways to create a string.

00:02:37.475 --> 00:02:39.210
Thank you.
