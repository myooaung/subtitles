WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.910
Hello everyone, Welcome back. The last one.

00:00:02.910 --> 00:00:06.495
Using this keyword, we're going to make the kind of sector call.

00:00:06.495 --> 00:00:09.210
So what is a contract of our veneer using

00:00:09.210 --> 00:00:13.020
new and you're trying to create an object for some cloud,

00:00:13.020 --> 00:00:15.565
which means you are trying to call some contractor.

00:00:15.565 --> 00:00:19.625
All right, so this is called calling a contract are correct.

00:00:19.625 --> 00:00:28.760
So let's create another example to explore the final topic of the under this concept.

00:00:28.760 --> 00:00:35.480
Okay? Okay, so now I have this keyword examples x.

00:00:35.480 --> 00:00:37.565
So let's keep it aside.

00:00:37.565 --> 00:00:43.190
So now what I'm gonna do is it might be kind of confusion also,

00:00:43.190 --> 00:00:44.780
but try to understand it.

00:00:44.780 --> 00:00:51.425
I have a class called a and I have a class called B.

00:00:51.425 --> 00:00:55.000
So basically what I'm trying to do here, instead of the class,

00:00:55.000 --> 00:00:59.330
I'm creating reference for Class B.

00:00:59.330 --> 00:01:02.150
B is equal to OBJ.

00:01:02.150 --> 00:01:03.425
Got it.

00:01:03.425 --> 00:01:06.380
And then I'm creating a constructor.

00:01:06.380 --> 00:01:11.585
We know how to get a concert or read constructor with same as the class name.

00:01:11.585 --> 00:01:15.770
So what is the class name? A rate.

00:01:15.770 --> 00:01:20.930
So and I'm passing be object as an input like me, object.

00:01:20.930 --> 00:01:24.170
So this time we have our widget here always eager.

00:01:24.170 --> 00:01:26.360
I want to overwrite this object with this.

00:01:26.360 --> 00:01:31.055
Okay, so this is the scenario we need to use this keyword.

00:01:31.055 --> 00:01:33.770
That is the first example which we discussed.

00:01:33.770 --> 00:01:38.465
Obj. Obj.

00:01:38.465 --> 00:01:40.160
So what basically it means,

00:01:40.160 --> 00:01:47.940
this OBJ represents this friends and this coming from this contract, our input.

00:01:48.220 --> 00:01:53.615
And then we'll go to the class B.

00:01:53.615 --> 00:01:59.390
Class B, what we can do is you can have some, some variable, okay?

00:01:59.390 --> 00:02:01.370
X is equal to 15.

00:02:01.370 --> 00:02:02.615
Okay?

00:02:02.615 --> 00:02:04.670
So here I'm going to create,

00:02:04.670 --> 00:02:06.605
let me maximize this.

00:02:06.605 --> 00:02:09.455
So I have some class we won't constructor.

00:02:09.455 --> 00:02:10.895
Okay?

00:02:10.895 --> 00:02:16.910
So here what I'm gonna do is I'm going to call the class.

00:02:16.910 --> 00:02:17.465
Yeah.

00:02:17.465 --> 00:02:21.980
I mean, I'm going to create the classy a OBJ.

00:02:21.980 --> 00:02:25.595
So new of a.

00:02:25.595 --> 00:02:29.900
But as a parameter I'm passing this keyword.

00:02:29.900 --> 00:02:35.480
So you must understand what this keyword will do here.

00:02:35.480 --> 00:02:39.470
What basically it will return the instance of current class.

00:02:39.470 --> 00:02:41.810
So what is the current class here, B.

00:02:41.810 --> 00:02:43.940
So what is the content of using B?

00:02:43.940 --> 00:02:48.770
So this means here in this place when you are passing this as a parameter,

00:02:48.770 --> 00:02:52.490
this will return the instance of my current class.

00:02:52.490 --> 00:02:53.885
My current class is B.

00:02:53.885 --> 00:02:57.635
So when I call new to this concept,

00:02:57.635 --> 00:03:01.280
when I'm calling this constructor will be

00:03:01.280 --> 00:03:06.515
called this concept or will be called the object is passed, is classic.

00:03:06.515 --> 00:03:09.410
Normally it's supposed to be new.

00:03:09.410 --> 00:03:11.330
So this is how we need to pass.

00:03:11.330 --> 00:03:15.365
But in short, we can directly pass this because both are same,

00:03:15.365 --> 00:03:18.170
because this will return the same instance of the class.

00:03:18.170 --> 00:03:19.340
Got it.

00:03:19.340 --> 00:03:23.340
Then I have another method called wide shot.

00:03:24.070 --> 00:03:27.560
We know that right wired show mother is gonna do.

00:03:27.560 --> 00:03:27.950
So.

00:03:27.950 --> 00:03:32.310
So what I'm gonna do value x.

00:03:35.140 --> 00:03:40.550
Alright, so now we have objects.

00:03:40.550 --> 00:03:41.870
So here what we can do,

00:03:41.870 --> 00:03:43.490
we have an object for buret,

00:03:43.490 --> 00:03:44.570
we can call the method, right?

00:03:44.570 --> 00:03:53.200
So OBJ, it might not getting way this gray going there and going on back.

00:03:53.200 --> 00:03:56.230
This is just a concept of understanding.

00:03:56.230 --> 00:03:58.540
Okay, so why we are mixing a with B,

00:03:58.540 --> 00:04:00.970
B with the okay.

00:04:00.970 --> 00:04:03.070
Just tried to warn you,

00:04:03.070 --> 00:04:04.689
you won't be able to understand

00:04:04.689 --> 00:04:06.700
when you're drying it the first time, but when you're giving,

00:04:06.700 --> 00:04:08.455
doing it for two or three times,

00:04:08.455 --> 00:04:10.240
you started understanding, oh,

00:04:10.240 --> 00:04:13.030
this code is working, right?

00:04:13.030 --> 00:04:14.995
You want the same thing happened for me also.

00:04:14.995 --> 00:04:16.420
So now what I'm gonna do,

00:04:16.420 --> 00:04:19.735
I'm gonna create a main, a main method in my class.

00:04:19.735 --> 00:04:24.715
So here I'm going to create on debt for my class B.

00:04:24.715 --> 00:04:28.495
So OBJ is equal to b.

00:04:28.495 --> 00:04:31.340
So what happened when the new base color,

00:04:31.340 --> 00:04:34.070
which means this is going to call the constructor,

00:04:34.070 --> 00:04:37.580
which is nothing but class because there is no parameter.

00:04:37.580 --> 00:04:41.645
So it is going to call this conductor constructor, default constructor, correct?

00:04:41.645 --> 00:04:45.230
Default constructor, I'm creating object for the class here,

00:04:45.230 --> 00:04:47.390
a or b, j is equal to new.

00:04:47.390 --> 00:04:49.820
But the parameter I'm passing is current class,

00:04:49.820 --> 00:04:53.090
which is B. I'm passing B to a.

00:04:53.090 --> 00:04:55.700
So when I'm providing new way here,

00:04:55.700 --> 00:04:57.770
this particular concept that will be invoked.

00:04:57.770 --> 00:05:00.095
Correct? So, and I'm passing these,

00:05:00.095 --> 00:05:01.715
which are nothing but new B.

00:05:01.715 --> 00:05:03.230
So B obviously be patched.

00:05:03.230 --> 00:05:06.950
And with this B, we can call the object dot show Mehta.

00:05:06.950 --> 00:05:08.690
Okay, so when you run this,

00:05:08.690 --> 00:05:10.340
you will know what the outcome.

00:05:10.340 --> 00:05:12.720
So let me run it now.

00:05:12.900 --> 00:05:16.780
See the value x is equal to 50.

00:05:16.780 --> 00:05:21.850
My advice to you for this particular concept alone,

00:05:21.850 --> 00:05:25.270
just try with the multiple examples to hopefully we covered

00:05:25.270 --> 00:05:29.050
six different types of usage of this correct, this keyword.

00:05:29.050 --> 00:05:32.590
And then unless if you practice it some more examples,

00:05:32.590 --> 00:05:35.305
it pretty hard for you to understand.

00:05:35.305 --> 00:05:39.460
So the best way to make,

00:05:39.460 --> 00:05:41.635
the best way to understand this particular code,

00:05:41.635 --> 00:05:43.300
keep trying different examples.

00:05:43.300 --> 00:05:44.305
That's all.

00:05:44.305 --> 00:05:47.395
Okay, So this is the entire usage about this skewer.

00:05:47.395 --> 00:05:53.845
And the next example we're going to talk about the usage and need of a super keyword.

00:05:53.845 --> 00:05:55.580
Thank you.
