WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.760
Hello everyone, Welcome back.

00:00:02.760 --> 00:00:06.975
We tried all the data types, correct?

00:00:06.975 --> 00:00:09.420
But we need to try that types,

00:00:09.420 --> 00:00:12.120
also different types of variables available, right?

00:00:12.120 --> 00:00:20.100
Like local instance and the static.

00:00:20.100 --> 00:00:27.900
So we don't have to write a specific for local variable because we have a method here,

00:00:27.900 --> 00:00:31.440
main method, which contains lot of variables.

00:00:31.440 --> 00:00:33.855
So these are our local variables.

00:00:33.855 --> 00:00:36.270
We have a handshake. I'm in handy code here.

00:00:36.270 --> 00:00:39.640
So all of them, this is a local variable.

00:00:39.680 --> 00:00:42.560
Not only does it x1, x2, x3,

00:00:42.560 --> 00:00:46.295
all of them are local variables because they are Lynn said the matter.

00:00:46.295 --> 00:00:47.330
Right?

00:00:47.330 --> 00:00:48.740
So that is a condition, right?

00:00:48.740 --> 00:00:50.900
If it is inside local method,

00:00:50.900 --> 00:00:52.700
you cannot prove it static,

00:00:52.700 --> 00:00:56.660
which will end up an issue. That is a rule.

00:00:56.660 --> 00:00:59.885
Okay, so this is the local variable.

00:00:59.885 --> 00:01:05.420
Now let's create a variable for the reference of instance variable.

00:01:05.420 --> 00:01:12.425
So we know that the instance variable has to creator under the class or outset automatic,

00:01:12.425 --> 00:01:14.030
both are same outer element,

00:01:14.030 --> 00:01:16.595
that means is without a doubt, this is a method, right?

00:01:16.595 --> 00:01:20.270
So if you read outside of the method that belongs to another class, right?

00:01:20.270 --> 00:01:24.330
So let's create an instance variable here.

00:01:27.210 --> 00:01:32.635
So y is equal to 15.

00:01:32.635 --> 00:01:37.460
So the instance variable,

00:01:42.930 --> 00:01:47.875
of course, we know what is the difference between the instance and the static variable.

00:01:47.875 --> 00:01:50.450
So it's pretty much the same.

00:01:50.670 --> 00:01:53.950
So you cannot have the same variable name.

00:01:53.950 --> 00:01:56.995
You need to have a different one mean is that.

00:01:56.995 --> 00:02:07.700
So here, now this is called instance variable and this is called a static variable.

00:02:13.770 --> 00:02:21.745
It's pretty simple. So whatever written inside there called as a local variable.

00:02:21.745 --> 00:02:25.810
So if your return inside a class are outside of the method,

00:02:25.810 --> 00:02:28.000
those are called as incidence.

00:02:28.000 --> 00:02:30.250
And if you provide static in front of them,

00:02:30.250 --> 00:02:33.500
that is called a static variable.

00:02:34.290 --> 00:02:41.875
Correct. Now you understand what is the types of different types of variables?

00:02:41.875 --> 00:02:43.370
Correct?

00:02:44.340 --> 00:02:49.105
And one more thing, when we talk about instance and Sadik.

00:02:49.105 --> 00:02:52.490
So we discussed something like when you

00:02:52.490 --> 00:02:56.150
create a multiple instance for the particular class,

00:02:56.150 --> 00:02:58.685
each one have a different instance,

00:02:58.685 --> 00:03:02.090
all of them holding a copy of the way.

00:03:02.090 --> 00:03:03.560
So what I'm trying to say is,

00:03:03.560 --> 00:03:06.155
for example, if this is my variable example, right?

00:03:06.155 --> 00:03:08.105
Let's take an example you have.

00:03:08.105 --> 00:03:09.650
For this particular variable example,

00:03:09.650 --> 00:03:11.105
you could do three instance.

00:03:11.105 --> 00:03:16.175
What is the instance? We'll talk about it when we go for the auditor Enter.

00:03:16.175 --> 00:03:19.280
So this is my class.

00:03:19.280 --> 00:03:22.400
Sorry. So this year class,

00:03:22.400 --> 00:03:28.445
let's assume you have three insurance, S1, S2, S3.

00:03:28.445 --> 00:03:36.115
So all day instance has one copy of y and also is it. All right?

00:03:36.115 --> 00:03:41.095
So for example, if you go and modify data,

00:03:41.095 --> 00:03:45.775
instead the ES1, if you update y into a 100,

00:03:45.775 --> 00:03:47.740
what basically will happen?

00:03:47.740 --> 00:03:50.980
Only S1 contains y is equal to a 100,

00:03:50.980 --> 00:03:54.355
but S2 and S3 will remain the same

00:03:54.355 --> 00:03:59.350
because each and everything holds a separate copy of why.

00:03:59.350 --> 00:04:00.730
The similar way.

00:04:00.730 --> 00:04:01.915
This is a static.

00:04:01.915 --> 00:04:04.390
So I have S1, S2, S3,

00:04:04.390 --> 00:04:09.415
E field going and update the data is in s1 5200.

00:04:09.415 --> 00:04:14.470
Basically what will happen because static it's referring the memory location.

00:04:14.470 --> 00:04:16.510
So if your update the memory location,

00:04:16.510 --> 00:04:20.810
everything is pointing to the same memory location, right?

00:04:20.810 --> 00:04:22.340
If you update for S1,

00:04:22.340 --> 00:04:28.530
the same will reflect in S2 and S3 coded.

00:04:28.600 --> 00:04:32.840
So if you update one, it'll update all.

00:04:32.840 --> 00:04:34.925
That is all we can simply say.

00:04:34.925 --> 00:04:37.325
In case of into I it's an honor,

00:04:37.325 --> 00:04:39.110
It's not a static, it's a Instance.

00:04:39.110 --> 00:04:42.500
So each and every instance holds a separate coffee.

00:04:42.500 --> 00:04:47.645
If you upgrade to one, only that particular instance will be updated alone.

00:04:47.645 --> 00:04:50.735
Will have a separate example for this.

00:04:50.735 --> 00:04:52.290
Thank you.
