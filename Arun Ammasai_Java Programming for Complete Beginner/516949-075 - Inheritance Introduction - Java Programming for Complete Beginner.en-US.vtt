WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.255
Hello everyone, Welcome back.

00:00:03.255 --> 00:00:05.505
Inheritance.

00:00:05.505 --> 00:00:10.980
So another important thing under inheritance.

00:00:10.980 --> 00:00:14.445
Okay, you might have heard about inheritance.

00:00:14.445 --> 00:00:19.200
Second, so inheriting something from someone,

00:00:19.200 --> 00:00:22.290
you are you are a father.

00:00:22.290 --> 00:00:25.275
Your son or daughter there inherit.

00:00:25.275 --> 00:00:28.110
You would habits are your property.

00:00:28.110 --> 00:00:31.185
So what does it mean that is called inheritance.

00:00:31.185 --> 00:00:33.690
Okay. So you are as a parent,

00:00:33.690 --> 00:00:35.610
you are adding some functionality,

00:00:35.610 --> 00:00:38.115
some behaviors to your child.

00:00:38.115 --> 00:00:40.185
But it's also inheritance,

00:00:40.185 --> 00:00:42.010
not only that behavior,

00:00:42.010 --> 00:00:44.390
you can take as the assets also.

00:00:44.390 --> 00:00:48.410
So you were properties IS goes to

00:00:48.410 --> 00:00:54.980
your son or daughter or daughters are different signs. Okay?

00:00:54.980 --> 00:00:57.394
So that is called inheritance.

00:00:57.394 --> 00:00:59.945
The same thing can apply in Java also.

00:00:59.945 --> 00:01:03.140
So the process by which one class acquired

00:01:03.140 --> 00:01:06.665
the properties and the functionalities from the class.

00:01:06.665 --> 00:01:08.510
Simple thing, parent and child.

00:01:08.510 --> 00:01:10.310
I want something from my parent.

00:01:10.310 --> 00:01:11.930
I want something from my father,

00:01:11.930 --> 00:01:13.745
I want something from my mom,

00:01:13.745 --> 00:01:16.355
some hidden something from them.

00:01:16.355 --> 00:01:17.705
That is inheritance.

00:01:17.705 --> 00:01:19.115
That similarly in class,

00:01:19.115 --> 00:01:22.850
I have a class which requires some information or which

00:01:22.850 --> 00:01:27.380
requires some methods and functionality from another class.

00:01:27.380 --> 00:01:31.310
Okay, so when I'm trying to access something from another class,

00:01:31.310 --> 00:01:34.895
I become the child, right?

00:01:34.895 --> 00:01:37.250
So whoever is providing data to me are

00:01:37.250 --> 00:01:40.774
providing functional distribute there becomes a patterns.

00:01:40.774 --> 00:01:43.415
So this is how the flow will work.

00:01:43.415 --> 00:01:45.620
So whoever's providing to you,

00:01:45.620 --> 00:01:51.560
they are bad in class or base class.

00:01:51.560 --> 00:01:53.315
Who is receiving it.

00:01:53.315 --> 00:01:56.420
They call it as a child class,

00:01:56.420 --> 00:01:58.730
or you can call them as a subclass.

00:01:58.730 --> 00:02:00.725
So why do we need inheritance?

00:02:00.725 --> 00:02:03.170
So you don't need to write the code again and again.

00:02:03.170 --> 00:02:04.715
So reusability of a chord.

00:02:04.715 --> 00:02:08.465
If I have a class which we'll do some calculation purpose,

00:02:08.465 --> 00:02:12.905
like adding some data or adding some numbers, multiplying some numbers.

00:02:12.905 --> 00:02:15.770
So you don't need to write the code again.

00:02:15.770 --> 00:02:19.205
So you can simply use my property,

00:02:19.205 --> 00:02:21.665
which means I am providing

00:02:21.665 --> 00:02:25.535
the information to you and I'm providing the properties and methods to you.

00:02:25.535 --> 00:02:29.600
You can capture them and you can use them.

00:02:29.600 --> 00:02:33.710
Okay? So I become paranoid and you become child node.

00:02:33.710 --> 00:02:37.580
And its contents.

00:02:37.580 --> 00:02:40.955
The overriding concept which comes out of polymorphism.

00:02:40.955 --> 00:02:44.900
Okay, We have the method overriding and Mao or loading another polymorphism.

00:02:44.900 --> 00:02:47.299
But here we have only overriding.

00:02:47.299 --> 00:02:50.360
So not only that inheritance,

00:02:50.360 --> 00:02:52.670
it has a different kind of aversions.

00:02:52.670 --> 00:02:54.980
The first one it's a single inheritance,

00:02:54.980 --> 00:02:56.900
and second one is multi-level,

00:02:56.900 --> 00:02:59.930
and third one is hierarchical inheritance.

00:02:59.930 --> 00:03:04.400
And you might think like C single, multi-level hierarchical.

00:03:04.400 --> 00:03:06.200
Where is the multiple-level?

00:03:06.200 --> 00:03:11.255
Multiple level is not supported in Sierra.

00:03:11.255 --> 00:03:16.310
So we are achieving multiple inheritance with the help of interfaces.

00:03:16.310 --> 00:03:19.650
Interface we have a separate topic, as I mentioned earlier.

00:03:20.440 --> 00:03:24.200
So what are the types of inheritance?

00:03:24.200 --> 00:03:27.785
Tree depth, single, multi-level, hierarchical, single.

00:03:27.785 --> 00:03:30.845
Class B extends.

00:03:30.845 --> 00:03:34.820
And multi-level classy extends class B.

00:03:34.820 --> 00:03:36.680
And the extents class.

00:03:36.680 --> 00:03:42.290
And multi-level hierarchical plaza.

00:03:42.290 --> 00:03:44.480
Use re Class B and Class C.

00:03:44.480 --> 00:03:46.100
It's like, for example,

00:03:46.100 --> 00:03:49.100
you are a father of two daughters, okay?

00:03:49.100 --> 00:03:51.095
So data one and data jewel,

00:03:51.095 --> 00:03:54.200
they're inheriting data, our properties from you,

00:03:54.200 --> 00:03:56.375
which means that it's a hierarchical.

00:03:56.375 --> 00:03:57.860
Right?

00:03:57.860 --> 00:04:02.120
So let me explain this entire scenario in

00:04:02.120 --> 00:04:06.980
a real example so you can easily understand that how they know that it's going to work.

00:04:06.980 --> 00:04:11.345
And now what did it syntax to create a inheritance?

00:04:11.345 --> 00:04:13.860
We'll talk about in the next video.
