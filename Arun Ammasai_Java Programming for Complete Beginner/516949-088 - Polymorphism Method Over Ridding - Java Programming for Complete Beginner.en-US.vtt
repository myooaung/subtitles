WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.680
Hello everyone, Welcome back.

00:00:01.680 --> 00:00:03.690
So we discussed about method overloading,

00:00:03.690 --> 00:00:05.444
which is static polymorphism.

00:00:05.444 --> 00:00:09.810
So now we're going to try dynamic polymorphism,

00:00:09.810 --> 00:00:13.350
which means it's method overriding.

00:00:13.350 --> 00:00:17.250
What isn't a difference between overloading and overriding? Overloading?

00:00:17.250 --> 00:00:19.890
It has the same name, but different parameters.

00:00:19.890 --> 00:00:26.490
But overriding means it has the same name and the same input parameters.

00:00:26.490 --> 00:00:29.470
Okay, let's create a simple class for that.

00:00:30.980 --> 00:00:38.980
So my reading example.

00:00:42.520 --> 00:00:48.600
So now what I'm gonna do, I'm gonna create a different kind of example here.

00:00:48.940 --> 00:00:52.295
What we can do, we can create, okay,

00:00:52.295 --> 00:01:00.830
So let me create a class called animal and human waste.

00:01:00.830 --> 00:01:05.480
And I think we already created one animal in a different example, right?

00:01:05.480 --> 00:01:09.360
So I'm going to create a wild animal.

00:01:12.070 --> 00:01:13.595
Okay?

00:01:13.595 --> 00:01:14.975
So the wild animal,

00:01:14.975 --> 00:01:18.755
which contains a method called sound or make noise.

00:01:18.755 --> 00:01:19.385
Okay.

00:01:19.385 --> 00:01:23.819
So wide, make noise.

00:01:26.440 --> 00:01:30.845
So by default, we don't know which animal I'm going to call.

00:01:30.845 --> 00:01:34.520
So by default it has no sound.

00:01:34.520 --> 00:01:43.310
Our defaults on default sound.

00:01:43.310 --> 00:01:45.680
So unmet, lower rating,

00:01:45.680 --> 00:01:49.145
it will only happen through the inheritance.

00:01:49.145 --> 00:01:56.645
Okay, so because the method overriding in the subclass, correct.

00:01:56.645 --> 00:02:02.330
So I haven't mattered column make noise here and no wild animal, right?

00:02:02.330 --> 00:02:03.650
So now what I'm going to do,

00:02:03.650 --> 00:02:06.000
I'm going to create a one more.

00:02:06.880 --> 00:02:11.090
What I can say that I am going to create another class.

00:02:11.090 --> 00:02:15.365
I'm basically, I'm creating an animal now, lion.

00:02:15.365 --> 00:02:18.860
Lion. We know that how to extend the class,

00:02:18.860 --> 00:02:21.620
right? Extense wild animal.

00:02:21.620 --> 00:02:26.510
So what happened since I'm extending wild animal to lie and right.

00:02:26.510 --> 00:02:32.465
So Lion can access them, make noise.

00:02:32.465 --> 00:02:37.330
Correct. But what I'm trying to do the line is going to override the make noise method.

00:02:37.330 --> 00:02:40.550
So I'll just copy the entire thing and paste it here, which means the overriding.

00:02:40.550 --> 00:02:43.295
It's not the R4.

00:02:43.295 --> 00:02:46.560
Or else you can simply say lion roar.

00:02:47.440 --> 00:02:48.980
Correct.

00:02:48.980 --> 00:02:51.710
So you might have a doubt.

00:02:51.710 --> 00:02:54.335
Okay, let, let, let me create a main method here.

00:02:54.335 --> 00:02:58.760
So I'm going to create an object for Lion.

00:02:58.760 --> 00:03:03.860
Obj is equal to new, new line.

00:03:03.860 --> 00:03:07.445
So that is a caution here when I'm creative and I'm calling

00:03:07.445 --> 00:03:10.310
the make noise method that is coefficient

00:03:10.310 --> 00:03:13.325
here we can normally whenever you extend some classes here,

00:03:13.325 --> 00:03:16.040
it will access a method from the parent class.

00:03:16.040 --> 00:03:19.220
But here I have the same method name in my parent class,

00:03:19.220 --> 00:03:20.885
say metonymic child class.

00:03:20.885 --> 00:03:24.530
Both of them at the same input parameter

00:03:24.530 --> 00:03:27.500
because it doesn't have any input and also it doesn't have any input.

00:03:27.500 --> 00:03:31.730
So compiler how competitor will identify which matter I need to execute, man.

00:03:31.730 --> 00:03:34.340
So you need to specify which Medina to call it,

00:03:34.340 --> 00:03:38.180
since I am making the call to make noise using line object.

00:03:38.180 --> 00:03:39.560
So basically what will happen?

00:03:39.560 --> 00:03:43.280
Always, the child's us will override the parent class.

00:03:43.280 --> 00:03:45.350
So what does it, what does that mean?

00:03:45.350 --> 00:03:48.755
So even met whenever the method overriding is happening,

00:03:48.755 --> 00:03:51.905
that class, who overriding the method,

00:03:51.905 --> 00:03:53.405
that class will be executed.

00:03:53.405 --> 00:03:55.835
So when we call Object.create noise,

00:03:55.835 --> 00:03:58.265
obviously the law and order will be executed.

00:03:58.265 --> 00:04:02.075
Let's see see Lander.

00:04:02.075 --> 00:04:02.945
Correct.

00:04:02.945 --> 00:04:05.330
In case let let let me modify

00:04:05.330 --> 00:04:08.015
their name and make nice one which means it's a different method name.

00:04:08.015 --> 00:04:09.950
If I run the code, I'll get defaults

00:04:09.950 --> 00:04:13.640
on because I'm not overriding the wild animal matter.

00:04:13.640 --> 00:04:16.520
So now we can easily see,

00:04:16.520 --> 00:04:17.840
okay, so when I make,

00:04:17.840 --> 00:04:22.805
I create another method with the same name and different implementation.

00:04:22.805 --> 00:04:26.720
So that is called over it while we're loading means same method name,

00:04:26.720 --> 00:04:28.805
but different parameters overriding,

00:04:28.805 --> 00:04:31.055
same name, same parameters.

00:04:31.055 --> 00:04:34.205
That is the difference between method overloading and overriding.

00:04:34.205 --> 00:04:37.865
This concept is called as a dynamic polymorphism.

00:04:37.865 --> 00:04:39.185
Right?

00:04:39.185 --> 00:04:42.710
So you can create your own examples.

00:04:42.710 --> 00:04:45.320
Because so far whatever we cover everything is

00:04:45.320 --> 00:04:48.935
very pretty simple example because there are a lot of people.

00:04:48.935 --> 00:04:52.940
Even date doesn't know anything about any programming background.

00:04:52.940 --> 00:04:57.290
So if I write some difficult example like employee or FirstName,

00:04:57.290 --> 00:04:58.940
LastName or creating digital,

00:04:58.940 --> 00:05:01.474
which will be difficult for them to understand.

00:05:01.474 --> 00:05:04.595
So we are going with the simple examples.

00:05:04.595 --> 00:05:06.150
Thank you.
