WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.875
Hello everyone, Welcome back.

00:00:01.875 --> 00:00:08.115
So we have good understanding about variables and how we can create them,

00:00:08.115 --> 00:00:10.650
and how many data types are available,

00:00:10.650 --> 00:00:12.765
and what are the types of variable available,

00:00:12.765 --> 00:00:14.355
okay, we have some basic understanding,

00:00:14.355 --> 00:00:18.030
unit credits and multiple programs to make it even better understanding.

00:00:18.030 --> 00:00:18.930
Right?

00:00:18.930 --> 00:00:22.665
The next topic we are going to talk about is operators.

00:00:22.665 --> 00:00:25.605
There are different kind of operators available in Java.

00:00:25.605 --> 00:00:28.815
And let's see what are available.

00:00:28.815 --> 00:00:32.265
So these are the operative types and what are the operators here?

00:00:32.265 --> 00:00:35.250
The first one is added medic operating operators,

00:00:35.250 --> 00:00:38.995
which will help us to do the calculations.

00:00:38.995 --> 00:00:42.815
And assignment operators, which will do

00:00:42.815 --> 00:00:47.435
the assignment when you declare int x is equal to 10.

00:00:47.435 --> 00:00:48.410
So what does a equal?

00:00:48.410 --> 00:00:51.260
Equal is the assignment operator and increment and

00:00:51.260 --> 00:00:55.985
decrement adding or decreasing and logical.

00:00:55.985 --> 00:00:59.795
So taking conditions, comparison,

00:00:59.795 --> 00:01:04.250
comparing two conditions and bitwise and ternary, right?

00:01:04.250 --> 00:01:06.755
So we'll talk about H and everything.

00:01:06.755 --> 00:01:09.275
Let's start with arithmetic.

00:01:09.275 --> 00:01:11.119
So the plus, minus,

00:01:11.119 --> 00:01:14.790
multiply, divide and mod.

00:01:15.460 --> 00:01:22.010
So let me create a new class here.

00:01:22.010 --> 00:01:28.895
New file here.

00:01:28.895 --> 00:01:32.760
So class, and this is going to be arithmetic example.

00:01:35.380 --> 00:01:37.774
Take an example.

00:01:37.774 --> 00:01:46.130
Okay, so let's save it first arithmetic example that Java.

00:01:46.130 --> 00:01:47.555
So I have a main method.

00:01:47.555 --> 00:01:50.705
This is the first thing is you always do create a main method.

00:01:50.705 --> 00:01:56.150
Okay? So when you performing arithmetic operator,

00:01:56.150 --> 00:01:58.354
you need some numbers.

00:01:58.354 --> 00:02:01.520
Whether you're doing addition and multiplication and subtraction,

00:02:01.520 --> 00:02:05.570
you need to do some numbers.

00:02:05.570 --> 00:02:11.345
So I'm going to have a two numbers get int number one is equal to 15

00:02:11.345 --> 00:02:19.230
and int number two is equal to 25.

00:02:20.290 --> 00:02:23.450
So we are going to perform all the operations are,

00:02:23.450 --> 00:02:25.100
what are the arithmetic operators here?

00:02:25.100 --> 00:02:29.795
So we can do addition, subtraction,

00:02:29.795 --> 00:02:35.690
multiplication, and divide, and mod below each and every one, right?

00:02:35.690 --> 00:02:38.450
So let's call each and everyone here.

00:02:38.450 --> 00:02:42.150
So let's print system.

00:02:44.800 --> 00:02:51.215
System, dot out, dot, print LN.

00:02:51.215 --> 00:02:53.330
So normally when we print something,

00:02:53.330 --> 00:02:56.285
we had this directly providing the variables, right?

00:02:56.285 --> 00:02:59.570
But you can provide some notations

00:02:59.570 --> 00:03:03.170
also like this is the value and this is output, something like that.

00:03:03.170 --> 00:03:08.570
So if you want to provide some explanation and different data, so how we can do that?

00:03:08.570 --> 00:03:11.540
So let's use a double quote, double quote.

00:03:11.540 --> 00:03:14.695
This represents to provide the strings.

00:03:14.695 --> 00:03:18.260
We're going to provide some statements here, right?

00:03:18.260 --> 00:03:20.150
So like, so what I'm gonna do,

00:03:20.150 --> 00:03:27.300
I'm gonna do num one, num two.

00:03:29.800 --> 00:03:32.390
So this is just a printing segment.

00:03:32.390 --> 00:03:37.460
Okay, so now I need to do the exact calculation.

00:03:37.460 --> 00:03:39.875
So I want to try to perform addition operation, right?

00:03:39.875 --> 00:03:43.970
So you need to convert using the plus symbol.

00:03:43.970 --> 00:03:45.860
Plus is concatenating them operation.

00:03:45.860 --> 00:03:48.395
Or if you feel like it's different right now,

00:03:48.395 --> 00:03:49.775
we can do that later also.

00:03:49.775 --> 00:03:55.685
So what I can do is add. So what we can do.

00:03:55.685 --> 00:03:59.585
So number one plus number two,

00:03:59.585 --> 00:04:03.290
that's an addition operator rate.

00:04:03.290 --> 00:04:05.255
So number one plus number two,

00:04:05.255 --> 00:04:07.340
the outcome will be stored in AD.

00:04:07.340 --> 00:04:10.650
So you can provide the add here, plus AD.

00:04:10.650 --> 00:04:13.015
So the plus, when you're,

00:04:13.015 --> 00:04:14.395
when you're using here,

00:04:14.395 --> 00:04:17.335
the pluses working as a concatenation operator.

00:04:17.335 --> 00:04:20.200
Here it is working as a calibration operator.

00:04:20.200 --> 00:04:21.730
I'm in addition operator.

00:04:21.730 --> 00:04:25.630
Alright, so now what I'm gonna do is let's go back to the command

00:04:25.630 --> 00:04:32.395
prompt and display or the pencil CLS for clear the console.

00:04:32.395 --> 00:04:37.100
So let's compile Java C arithmetic example.

00:04:38.370 --> 00:04:46.135
In arithmetic example, Java space arithmetic example to run the code.

00:04:46.135 --> 00:04:49.510
See the addition data is 75.

00:04:49.510 --> 00:04:53.100
Got it. Cool.

00:04:53.100 --> 00:04:56.795
Let's try all of them. Multiplication, divide everything.

00:04:56.795 --> 00:05:05.450
So let's let subtraction.

00:05:05.450 --> 00:05:08.990
Subtraction is nothing but number one, number two,

00:05:08.990 --> 00:05:16.130
and then multiplication number one and number two.

00:05:16.130 --> 00:05:25.025
And divide int number one divided by number two.

00:05:25.025 --> 00:05:26.810
And that is something different here.

00:05:26.810 --> 00:05:33.890
Int mode, what is marred by they're doing division operations, right?

00:05:33.890 --> 00:05:35.880
It will give you the remainder.

00:05:35.880 --> 00:05:40.480
For example, 10 divided by 20,

00:05:40.480 --> 00:05:42.670
1020 divided by 10.

00:05:42.670 --> 00:05:49.945
So the remainder is 0 because what is 10 divided by 20 divided by 10,

00:05:49.945 --> 00:05:51.655
because it can be divisible by two.

00:05:51.655 --> 00:05:53.380
There is no remainder it to 0.

00:05:53.380 --> 00:05:54.355
Okay?

00:05:54.355 --> 00:05:58.375
So to return the remainder will use the mode.

00:05:58.375 --> 00:06:04.630
So num 1, num 2.

00:06:04.630 --> 00:06:07.540
Okay, so now we're good to go.

00:06:07.540 --> 00:06:10.310
So let's copy this.

00:06:11.250 --> 00:06:14.635
So here num one.

00:06:14.635 --> 00:06:25.909
And here is going to be subtract Control-C finite.

00:06:26.040 --> 00:06:27.280
Okay?

00:06:27.280 --> 00:06:31.180
So here it is going to be multiplication here and it's going to be divide.

00:06:31.180 --> 00:06:33.070
And this is going to be a MOD.

00:06:33.070 --> 00:06:35.935
So this is going to be

00:06:35.935 --> 00:06:42.070
multiplication and this is going to hit divide and this is going to be mowed.

00:06:42.070 --> 00:06:43.225
Okay?

00:06:43.225 --> 00:06:45.550
So can you guess what is going to the outcome?

00:06:45.550 --> 00:06:48.865
So add a sound if I do where it is going to be,

00:06:48.865 --> 00:06:50.575
a subtraction is going to be 25.

00:06:50.575 --> 00:06:53.355
And multiplication at some big number and divide it

00:06:53.355 --> 00:06:57.100
by 50 divided by 25 sigma two and mod.

00:06:57.100 --> 00:06:59.229
So 50 divided by 25,

00:06:59.229 --> 00:07:01.330
25, 25 is equal to 50,

00:07:01.330 --> 00:07:03.100
right? So there is no remainder.

00:07:03.100 --> 00:07:09.320
All right, Let's compile the program and run it again to see the outcome.

00:07:11.070 --> 00:07:15.385
7525120 to 0.

00:07:15.385 --> 00:07:17.230
So whatever the remainder is 0,

00:07:17.230 --> 00:07:23.035
so whatever we expect that is coming as we export that.

00:07:23.035 --> 00:07:24.985
Okay, let's, for now,

00:07:24.985 --> 00:07:29.860
let me try something. Okay, we'll try 20.

00:07:29.860 --> 00:07:32.980
So let's run it again.

00:07:32.980 --> 00:07:35.330
Compare them again first.

00:07:37.560 --> 00:07:42.775
See now the remainder is 10 because 50 divided by 2.

00:07:42.775 --> 00:07:45.585
So 2, 2 and t is equal to 42, remainder is 10.

00:07:45.585 --> 00:07:49.595
So that is how we need to make use of the operators.

00:07:49.595 --> 00:07:54.515
Okay? So these are the things which you need to know.

00:07:54.515 --> 00:07:58.505
I didn't want it. These are available for arithmetic example, right?

00:07:58.505 --> 00:08:02.160
So in the next program we'll talk about the next operator.
