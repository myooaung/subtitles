WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.310
Hello everyone, Welcome back.

00:00:02.310 --> 00:00:06.510
So another important concept, Encapsulation.

00:00:06.510 --> 00:00:10.170
So without knowing ourselves from the beginning,

00:00:10.170 --> 00:00:12.075
we are using encapsulation.

00:00:12.075 --> 00:00:15.315
Encapsulation is nothing but it contains

00:00:15.315 --> 00:00:19.335
are wrapping the code and data together in a single unit,

00:00:19.335 --> 00:00:24.600
like methods and variables are binded into a single location,

00:00:24.600 --> 00:00:29.625
which means where we can have mother-son variables inside the class, right?

00:00:29.625 --> 00:00:32.745
So each and every class, It's encapsulation.

00:00:32.745 --> 00:00:36.179
Okay, So each and every class is example for an encapsulation.

00:00:36.179 --> 00:00:39.660
Encapsulation we cannot write node and a single class.

00:00:39.660 --> 00:00:41.425
Okay?

00:00:41.425 --> 00:00:46.220
So there is a very traditional example.

00:00:46.220 --> 00:00:49.505
So the class which contains the variables and the method,

00:00:49.505 --> 00:00:53.480
or you can call the method data members are data, that's okay.

00:00:53.480 --> 00:01:01.550
So encapsulate both, both the data classes wrapping everything inside.

00:01:01.550 --> 00:01:03.155
So that is called encapsulation.

00:01:03.155 --> 00:01:04.670
You know, the capsules, right?

00:01:04.670 --> 00:01:06.200
So when you have a capsule,

00:01:06.200 --> 00:01:07.640
if you open the capsule,

00:01:07.640 --> 00:01:09.455
it contains some data in it.

00:01:09.455 --> 00:01:11.645
Some medical inherited, I mean,

00:01:11.645 --> 00:01:14.450
medical students will be there inside the capture rate.

00:01:14.450 --> 00:01:17.705
So that is a traditional example people used to say for encapsulation.

00:01:17.705 --> 00:01:18.425
Okay?

00:01:18.425 --> 00:01:23.300
So just notice if somebody's asking what is encapsulation, It's a class.

00:01:23.300 --> 00:01:27.590
Each and every class is encapsulation example, right?

00:01:27.590 --> 00:01:30.035
Because class have my thoughts and numbers.

00:01:30.035 --> 00:01:30.980
Okay?

00:01:30.980 --> 00:01:33.140
And what is the important thing?

00:01:33.140 --> 00:01:39.860
It keeps the data and the code is safe from external interference because your binder,

00:01:39.860 --> 00:01:42.815
the data and the methods instead the classes.

00:01:42.815 --> 00:01:45.410
So until unless if you are accessing the class,

00:01:45.410 --> 00:01:47.930
you cannot access the members and the method 2,

00:01:47.930 --> 00:01:49.610
that means they external parties,

00:01:49.610 --> 00:01:53.600
they cannot access without knowing the class.

00:01:53.600 --> 00:01:56.300
And you can create,

00:01:56.300 --> 00:01:58.580
fully encapsulate your class by

00:01:58.580 --> 00:02:01.700
making all the data members as private. So what is it mean?

00:02:01.700 --> 00:02:06.485
Okay, So members means it's variable thread.

00:02:06.485 --> 00:02:09.320
So if I'm creating a class,

00:02:09.320 --> 00:02:13.354
okay, I can make my data members as private.

00:02:13.354 --> 00:02:14.690
What is the prey?

00:02:14.690 --> 00:02:20.405
Prey, which means we cannot access outside of the class.

00:02:20.405 --> 00:02:25.940
So sim, simply, we can provide the members in private and we can

00:02:25.940 --> 00:02:31.520
create other methods inside the same class.

00:02:31.520 --> 00:02:33.410
We can modify the data.

00:02:33.410 --> 00:02:35.600
I think it might be no confusion,

00:02:35.600 --> 00:02:39.440
but the example will show you exactly what I meant.

00:02:39.440 --> 00:02:44.810
So we can use the getters and setters to access the data members,

00:02:44.810 --> 00:02:47.810
man, so I want to modify the data, but not directly.

00:02:47.810 --> 00:02:51.290
I have my own methods.

00:02:51.290 --> 00:02:54.455
Okay, So through them I can access that what basically it means.

00:02:54.455 --> 00:02:55.925
So I have a property.

00:02:55.925 --> 00:02:58.055
I don't want anybody to talk to me.

00:02:58.055 --> 00:03:00.590
I have a separate person in place,

00:03:00.590 --> 00:03:06.530
multiple persons in between myself and the client. Okay.

00:03:06.530 --> 00:03:08.840
They will talk to the brokers.

00:03:08.840 --> 00:03:14.540
So the broker one, he will take care of the registration and other things.

00:03:14.540 --> 00:03:16.295
And broker number 2,

00:03:16.295 --> 00:03:18.229
he will take care of the negotiation.

00:03:18.229 --> 00:03:19.520
Okay. So the client,

00:03:19.520 --> 00:03:23.495
they cannot communicate directly to the owner.

00:03:23.495 --> 00:03:26.840
They had to come through the broker.

00:03:26.840 --> 00:03:31.085
So the similar way, if you want to access some data members inside the class,

00:03:31.085 --> 00:03:32.855
you cannot directly access them.

00:03:32.855 --> 00:03:36.665
You have to come through the supported methods,

00:03:36.665 --> 00:03:38.030
which is called getters.

00:03:38.030 --> 00:03:42.050
And setters. Getters means receiving. It just means our s0.

00:03:42.050 --> 00:03:43.415
Right?

00:03:43.415 --> 00:03:45.470
I'll show you in

00:03:45.470 --> 00:03:49.490
a simple example and it provides a control over the route. What do you mean by that?

00:03:49.490 --> 00:03:55.625
Because we can create a class which provides read-only or write only, read and write.

00:03:55.625 --> 00:03:59.160
Let me show you a simple example for that.
