WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.395
Hello everyone.

00:00:01.395 --> 00:00:08.130
Let's jump into an example and then we'll move on to some real dumb example.

00:00:08.130 --> 00:00:10.840
So let's create a new class

00:00:13.310 --> 00:00:19.420
to see how the for loop is working for loop example.

00:00:20.930 --> 00:00:24.250
Let's have a main method in it.

00:00:25.670 --> 00:00:27.285
Right?

00:00:27.285 --> 00:00:29.400
So what are they going to do today?

00:00:29.400 --> 00:00:33.930
Is anywhere, if you're talking able to follow the first thing which fail,

00:00:33.930 --> 00:00:38.985
do we want to repeatedly do some of the operation?

00:00:38.985 --> 00:00:41.290
So in those kind of scenarios,

00:00:41.290 --> 00:00:44.765
we can use the far lower, right.

00:00:44.765 --> 00:00:48.275
For example, I need to print the number one to 10.

00:00:48.275 --> 00:00:51.030
So normally how we look.

00:00:55.540 --> 00:01:05.720
So here, 12 up to 10 minute write system.out.print,

00:01:05.720 --> 00:01:08.030
which is not a proper way to do that.

00:01:08.030 --> 00:01:14.225
So because we have a loop which will take in this as simple as it is possible.

00:01:14.225 --> 00:01:16.610
To Landsat record, we can do that.

00:01:16.610 --> 00:01:19.700
You don't have to write up to ten numbers of land god everyday every,

00:01:19.700 --> 00:01:22.205
each and every line will print 1, 2, 3, 4, 5, 6.

00:01:22.205 --> 00:01:23.405
We don't need that.

00:01:23.405 --> 00:01:25.220
Let's talk about with a for loop.

00:01:25.220 --> 00:01:26.750
Let's create a for loop.

00:01:26.750 --> 00:01:32.070
So the first one, it's awarded the first thing, the initial value.

00:01:32.980 --> 00:01:36.710
Initial value. And second one is the limit.

00:01:36.710 --> 00:01:40.500
So how many times it's going to enter 0 times increment?

00:01:41.020 --> 00:01:42.560
Correct.

00:01:42.560 --> 00:01:43.880
Okay, So initial value,

00:01:43.880 --> 00:01:49.790
so I'm going to initialize int I is equal to, let's start from one.

00:01:49.790 --> 00:01:51.920
You can start it from any number.

00:01:51.920 --> 00:01:53.045
Okay?

00:01:53.045 --> 00:01:56.990
And what is the limit? How many times this particular loop needs to be done?

00:01:56.990 --> 00:02:01.040
So I less than or equal to 10.

00:02:01.040 --> 00:02:05.600
So i1 to run this loop up to, okay,

00:02:05.600 --> 00:02:08.090
So each and every time the loop needs to be increment,

00:02:08.090 --> 00:02:10.895
the I plus plus.

00:02:10.895 --> 00:02:12.815
So for stem, the local communist,

00:02:12.815 --> 00:02:15.590
the value is equal to one and then we'll go inside.

00:02:15.590 --> 00:02:18.695
So what will happen where it's going inside the loop?

00:02:18.695 --> 00:02:19.970
The value will be incremented.

00:02:19.970 --> 00:02:22.655
I plus y plus z is equal i, e is equal to I plus 1.

00:02:22.655 --> 00:02:24.395
So I already having one.

00:02:24.395 --> 00:02:26.690
So when it comes,

00:02:26.690 --> 00:02:28.220
I equal I plus 1.

00:02:28.220 --> 00:02:30.680
So 1 is equal to 1 plus 1, 2, right?

00:02:30.680 --> 00:02:35.790
So every time which will be keep on incrementing.

00:02:38.290 --> 00:02:42.800
So now let's print the value here,

00:02:42.800 --> 00:02:47.750
which will simply tell you what does the data inside the eye.

00:02:47.750 --> 00:02:49.250
Socket hours and RAAS 1, 2,

00:02:49.250 --> 00:02:51.050
3, 4, 5, 6, 7, 8, 9, 10.

00:02:51.050 --> 00:02:53.810
As simple as that, z.

00:02:53.810 --> 00:02:57.080
Think about a scenario. If you need to print a hundred-dollar thousands of numbers,

00:02:57.080 --> 00:02:59.075
you cannot keep writing them.

00:02:59.075 --> 00:03:02.570
And you can easily was the value also.

00:03:02.570 --> 00:03:05.105
So it's not that different, difficult.

00:03:05.105 --> 00:03:05.885
Okay?

00:03:05.885 --> 00:03:07.130
So how are we going to that?

00:03:07.130 --> 00:03:09.650
So if I'm in the descending order,

00:03:09.650 --> 00:03:12.230
so the data has to be started from ten.

00:03:12.230 --> 00:03:13.070
Okay?

00:03:13.070 --> 00:03:16.350
So either lead it has to be greater than one.

00:03:16.360 --> 00:03:18.830
And instead of I plus, plus,

00:03:18.830 --> 00:03:23.030
I'm going to minus-minus because every time it azure AD is one value.

00:03:23.030 --> 00:03:25.355
So now we'll print that.

00:03:25.355 --> 00:03:28.290
Now will have the data in a reverse order.

00:03:29.520 --> 00:03:34.705
Then. So there isn't one is not here I used the greater than or equal to one.

00:03:34.705 --> 00:03:37.180
So if you use greater than or equal,

00:03:37.180 --> 00:03:40.660
we will how the data up to one.

00:03:40.660 --> 00:03:43.490
So you just pretty simple, right?

00:03:45.090 --> 00:03:46.525
Ok.

00:03:46.525 --> 00:03:48.954
So as I mentioned the previous example,

00:03:48.954 --> 00:03:53.080
we created an IRA and we use the far loop to print the data.

00:03:53.080 --> 00:03:55.135
Correct?

00:03:55.135 --> 00:03:57.250
So kinda do that here.

00:03:57.250 --> 00:03:59.710
Yes, it's copy this loop.

00:03:59.710 --> 00:04:02.420
I'm going to get into here.

00:04:03.990 --> 00:04:07.375
So I don't want to,

00:04:07.375 --> 00:04:11.515
okay, Here I have a string, correct?

00:04:11.515 --> 00:04:13.330
So far now what I'm gonna do,

00:04:13.330 --> 00:04:15.520
let's create a for loop for us.

00:04:15.520 --> 00:04:20.095
So they initially, I,

00:04:20.095 --> 00:04:24.830
sorry, int I is equal to one.

00:04:26.160 --> 00:04:30.430
The indefinite stuff from the outlet side from 0, 0.

00:04:30.430 --> 00:04:34.840
So my loop needs to be executed until the array's length.

00:04:34.840 --> 00:04:38.020
So a racecars red cards that lend correct.

00:04:38.020 --> 00:04:40.300
If you want to know the length of the array,

00:04:40.300 --> 00:04:42.775
you can use the length matter array.length.

00:04:42.775 --> 00:04:49.820
So I less than or equal to array dot length.

00:04:54.400 --> 00:04:58.140
Okay, I didn't implement the data.

00:04:58.570 --> 00:05:03.890
I plus, plus. And then we can print the data.

00:05:03.890 --> 00:05:07.480
So Garza I.

00:05:07.480 --> 00:05:13.425
So this is how it'll walk into some other exception tree.

00:05:13.425 --> 00:05:22.355
So the tree here not equal to less than run it.

00:05:22.355 --> 00:05:27.080
So Honda for Ferrari with the numbers,

00:05:27.080 --> 00:05:28.805
let me comment this line.

00:05:28.805 --> 00:05:31.415
So I can see only the costs.

00:05:31.415 --> 00:05:37.625
Honda for Honda for them.

00:05:37.625 --> 00:05:42.605
So this is how we are going to be used a for loop to explore how it is, okay?

00:05:42.605 --> 00:05:47.730
Okay, So there are two different versions of our loop we'll talk about in the next video.
