WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.145
Hello everyone, Welcome back.

00:00:02.145 --> 00:00:04.950
So we know the problem with the previous approach.

00:00:04.950 --> 00:00:10.380
Which means So even though both are different variables, S1, S2,

00:00:10.380 --> 00:00:12.885
the values seem that Alice existing in the memory,

00:00:12.885 --> 00:00:18.060
they're going to use the same instance.

00:00:18.060 --> 00:00:20.715
So to overcome that particular approach,

00:00:20.715 --> 00:00:26.680
that is a new way to create a variable like using string.

00:00:27.110 --> 00:00:33.710
String S3 is equal to S strain.

00:00:33.710 --> 00:00:37.410
And here and to provide high.

00:00:37.600 --> 00:00:43.710
And now you need to create one more, the same.

00:00:43.840 --> 00:00:47.000
So basically what happened? So when you're trying

00:00:47.000 --> 00:00:49.775
this kind of approach, so what will happen?

00:00:49.775 --> 00:00:52.655
So even though the value is same,

00:00:52.655 --> 00:00:53.990
unlike the previous one,

00:00:53.990 --> 00:00:55.850
this will create a new instance.

00:00:55.850 --> 00:00:57.755
So yes, three will be a separate instance,

00:00:57.755 --> 00:01:00.469
S4 will be a different instance.

00:01:00.469 --> 00:01:04.835
So that is a difference between creating a string,

00:01:04.835 --> 00:01:10.580
using a string literal and creating new keyword,

00:01:10.580 --> 00:01:12.050
used to buy new keyword.

00:01:12.050 --> 00:01:14.150
Okay, so what I'm gonna do use,

00:01:14.150 --> 00:01:17.525
I'm going to create a another example which will tell you

00:01:17.525 --> 00:01:23.885
a simple example of how to create a string and how I have a car.

00:01:23.885 --> 00:01:28.310
So our I can convert them into a string.

00:01:28.310 --> 00:01:30.770
Correct? We did know that I, so let's try that.

00:01:30.770 --> 00:01:33.440
So I'm gonna create a new class here.

00:01:33.440 --> 00:01:38.945
So string example one, sample one.

00:01:38.945 --> 00:01:42.500
So of course we need to have a main method, right?

00:01:42.500 --> 00:01:45.900
So create a main method.

00:01:47.980 --> 00:01:50.570
And here what we're gonna do.

00:01:50.570 --> 00:01:54.890
So I need to have a variable,

00:01:54.890 --> 00:01:59.155
which means string SDR.

00:01:59.155 --> 00:02:01.495
So you can probably anything here.

00:02:01.495 --> 00:02:04.340
So Java basics.

00:02:04.410 --> 00:02:06.190
Got it.

00:02:06.190 --> 00:02:09.730
So now what I'm gonna do, not only that,

00:02:09.730 --> 00:02:11.380
I need to have an array also.

00:02:11.380 --> 00:02:17.830
So I can create a character array is equal to C array.

00:02:17.830 --> 00:02:21.460
So let's create some data on it.

00:02:21.460 --> 00:02:26.210
So character which comes inside the single quotes, right?

00:02:29.280 --> 00:02:32.110
So what I'm gonna do is here,

00:02:32.110 --> 00:02:34.015
I'm going to prevent hello,

00:02:34.015 --> 00:02:38.390
edge e, l, l.

00:02:39.490 --> 00:02:43.880
I have a string, and also I have a character array.

00:02:43.880 --> 00:02:46.055
Okay, so now what I'm gonna do,

00:02:46.055 --> 00:02:49.040
I'm going to convert this character array into a string.

00:02:49.040 --> 00:02:50.285
So how I can do that?

00:02:50.285 --> 00:02:51.380
It is pretty simple.

00:02:51.380 --> 00:02:58.265
So create string STR r1 is equal to.

00:02:58.265 --> 00:03:04.685
So we need to use new string, a new string.

00:03:04.685 --> 00:03:06.020
And inside instead of,

00:03:06.020 --> 00:03:08.330
uh, instead of protein,

00:03:08.330 --> 00:03:12.380
some data you can provide CH3 genetic but the character array.

00:03:12.380 --> 00:03:18.545
So the character by default internally it will convert into a string of data.

00:03:18.545 --> 00:03:24.780
So which means now I have a string value which contains hello.

00:03:25.990 --> 00:03:29.600
So let me create one more example here.

00:03:29.600 --> 00:03:37.264
So a string STR 2 is equal to new string.

00:03:37.264 --> 00:03:38.600
So here I'm going to use

00:03:38.600 --> 00:03:48.840
normal one string sample or example.

00:03:49.360 --> 00:03:51.770
Okay, so now what we're gonna do,

00:03:51.770 --> 00:03:54.800
so we could add a 33 different type of string,

00:03:54.800 --> 00:03:56.710
okay, one is a normal 1 second

00:03:56.710 --> 00:03:59.285
1 is character array and I'm converting them into a string.

00:03:59.285 --> 00:04:02.300
And third, honestly, against similar like the first one.

00:04:02.300 --> 00:04:04.590
So let's print the data.

00:04:04.590 --> 00:04:10.045
So like so it printed the first one, yes.

00:04:10.045 --> 00:04:13.135
And then SDR one,

00:04:13.135 --> 00:04:17.215
and then followed by STR 2.

00:04:17.215 --> 00:04:22.940
So now what we can do, we can simply then the code and see what the outcome.

00:04:26.850 --> 00:04:31.495
So now we have Java basics hello and Java string example.

00:04:31.495 --> 00:04:37.420
So this is the simplest example for string example, right?

00:04:37.420 --> 00:04:40.615
So the next example we're going to talk about, as I mentioned,

00:04:40.615 --> 00:04:41.800
when you're using string,

00:04:41.800 --> 00:04:44.200
there are a lot of mentors available because you have a string, right?

00:04:44.200 --> 00:04:47.460
You need to know how many characters are available, what is the length of it?

00:04:47.460 --> 00:04:49.670
We need to know that right?

00:04:49.670 --> 00:04:51.590
Or else I have a two different variables,

00:04:51.590 --> 00:04:53.795
how I can cut that particular data.

00:04:53.795 --> 00:04:56.615
So we're gonna talk about in the next example.

00:04:56.615 --> 00:04:58.200
Thank you.
