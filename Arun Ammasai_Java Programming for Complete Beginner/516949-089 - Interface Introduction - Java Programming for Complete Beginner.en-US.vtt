WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.370
Hello everyone, welcome back.

00:00:02.370 --> 00:00:04.335
So what is the next topic?

00:00:04.335 --> 00:00:10.380
And which is another important thing under wolves concept, right?

00:00:10.380 --> 00:00:15.660
Interface, because when we go through the abstract classes,

00:00:15.660 --> 00:00:17.910
we discussed reboot interface all so we're going to

00:00:17.910 --> 00:00:20.190
talk about interfaces is later, right?

00:00:20.190 --> 00:00:24.420
So where do we need to use abstract, correct?

00:00:24.420 --> 00:00:29.505
Abstract classes to provide some kind of abstraction to a class,

00:00:29.505 --> 00:00:32.504
which means providing partial information,

00:00:32.504 --> 00:00:35.595
not the end died implementations to the user, right?

00:00:35.595 --> 00:00:37.905
So abstract is a partial.

00:00:37.905 --> 00:00:44.840
But the reason why we are going for interface here is an interface,

00:00:44.840 --> 00:00:46.549
a mechanism to achieve abstraction.

00:00:46.549 --> 00:00:50.600
Of course, we know that an abstract is a PowerShell,

00:00:50.600 --> 00:00:52.445
but interfaces are full abstraction.

00:00:52.445 --> 00:00:55.985
So what does it mean? When you look at the abstract classes?

00:00:55.985 --> 00:00:59.330
You can have methods. At the same time.

00:00:59.330 --> 00:01:01.610
You can have abstract method,

00:01:01.610 --> 00:01:04.175
which means method with the declaration.

00:01:04.175 --> 00:01:07.625
At the same time, we can have that with the implementation also.

00:01:07.625 --> 00:01:15.300
It means abstract and non-abstract method that is called partial. Abstraction.

00:01:15.880 --> 00:01:19.999
Can contain abstract method, not the implementation,

00:01:19.999 --> 00:01:22.204
but when you're going for interface,

00:01:22.204 --> 00:01:26.790
you cannot have the method implementation.

00:01:27.490 --> 00:01:30.365
You're going to have one little method implemented.

00:01:30.365 --> 00:01:36.485
I mean, the declaration lake intakes are wide, wide, wide multiply.

00:01:36.485 --> 00:01:40.820
You cannot provide any body.

00:01:40.820 --> 00:01:43.610
The class who's going to be extend,

00:01:43.610 --> 00:01:48.660
implement this particular interface they can provide him implementation.

00:01:48.970 --> 00:01:53.255
And the another important thing when we talk about the inheritance rate,

00:01:53.255 --> 00:01:57.425
we discussed about the single inheritance, multi-level and hierarchical.

00:01:57.425 --> 00:01:59.450
But as I mentioned,

00:01:59.450 --> 00:02:02.120
multiple level is not supported in Java,

00:02:02.120 --> 00:02:10.400
but we can achieve the multiple level of inheritance using right?

00:02:10.400 --> 00:02:12.365
Okay, let's do that.

00:02:12.365 --> 00:02:14.660
Let me give you a simple example,

00:02:14.660 --> 00:02:16.640
but few more points.

00:02:16.640 --> 00:02:18.440
We can have variables also,

00:02:18.440 --> 00:02:22.550
which is common in I was shocked and interfaces also.

00:02:22.550 --> 00:02:25.445
And mainly you start loosely coupling.

00:02:25.445 --> 00:02:28.625
So loosely coupling is another important concept.

00:02:28.625 --> 00:02:31.100
Whenever you've read once Java,

00:02:31.100 --> 00:02:33.020
like when you're shredding Spring Boot sandal,

00:02:33.020 --> 00:02:35.060
you'll know a lot about loosely coupling.

00:02:35.060 --> 00:02:36.905
So what is loosely coupling?

00:02:36.905 --> 00:02:43.580
Basically, it does not have do much dependency with the different classes.

00:02:43.580 --> 00:02:50.030
We can have a separate video for that. Okay.

00:02:50.030 --> 00:02:53.030
So how would it look like? Is it a class?

00:02:53.030 --> 00:02:56.930
No, it is just like a glass but it does not.

00:02:56.930 --> 00:02:59.870
We cannot call them as a class.

00:02:59.870 --> 00:03:02.660
It may look like a class, that's all.

00:03:02.660 --> 00:03:04.835
But everything else remains the same,

00:03:04.835 --> 00:03:08.100
like classic GAN have met the declaration.

00:03:08.320 --> 00:03:11.525
But all limit that by default abstract.

00:03:11.525 --> 00:03:14.239
The reason we're only providing the declination,

00:03:14.239 --> 00:03:18.305
That means whatever the material broadening into the interface,

00:03:18.305 --> 00:03:20.420
all of them are abstract.

00:03:20.420 --> 00:03:23.735
The similarly you can provide the variables also.

00:03:23.735 --> 00:03:27.620
But they are by default static final.

00:03:27.620 --> 00:03:32.885
Okay? You don't have to specifically mention abstract keyword and final keyword.

00:03:32.885 --> 00:03:37.325
Because when you write some method inside interface by default it's abstract.

00:03:37.325 --> 00:03:39.575
But when you write the same method in an abstract class,

00:03:39.575 --> 00:03:42.890
you need to provide the upshot of that is a difference and

00:03:42.890 --> 00:03:46.325
variable again declared by default.

00:03:46.325 --> 00:03:48.515
They are public, static final.

00:03:48.515 --> 00:03:51.605
And just like abstract,

00:03:51.605 --> 00:03:55.580
we know that follow-ups her class as you cannot initiate the object.

00:03:55.580 --> 00:04:00.170
Okay, So it is extending that particular class only.

00:04:00.170 --> 00:04:05.090
They can create objects and then they'll be able to

00:04:05.090 --> 00:04:11.580
access the members of abstract less even in interests in similar concept.

00:04:13.570 --> 00:04:16.070
But another thing.

00:04:16.070 --> 00:04:17.660
So as I mentioned,

00:04:17.660 --> 00:04:21.125
interface does not contain any metadata Implementation,

00:04:21.125 --> 00:04:25.685
but as the growth or almost two decades, right?

00:04:25.685 --> 00:04:28.190
So each in a really there is a changing,

00:04:28.190 --> 00:04:30.620
especially after Java six.

00:04:30.620 --> 00:04:35.195
I mean, pretty much for interface from Java 7,

00:04:35.195 --> 00:04:38.240
we have lot of changes including interface.

00:04:38.240 --> 00:04:40.955
The interface has been keep on upgrading.

00:04:40.955 --> 00:04:42.605
So since Java 8,

00:04:42.605 --> 00:04:45.950
we can have default and static methods.

00:04:45.950 --> 00:04:50.810
What does it mean? So we know that the interface will contain one limit,

00:04:50.810 --> 00:04:54.200
that declaration, no body or red but default and chatting with it,

00:04:54.200 --> 00:04:57.110
they can bodied aid.

00:04:57.110 --> 00:04:58.520
So how disposable?

00:04:58.520 --> 00:05:00.410
So that is a change in Java 8.

00:05:00.410 --> 00:05:04.955
So we can have abstract method along with the default and static methods.

00:05:04.955 --> 00:05:08.570
But since John and not only the photon static method,

00:05:08.570 --> 00:05:10.340
we can have a private methods also,

00:05:10.340 --> 00:05:14.720
we know that the private can be accessed only in the class, right?

00:05:14.720 --> 00:05:16.580
So private with it,

00:05:16.580 --> 00:05:19.535
it has been introduced in Java nine. Okay?

00:05:19.535 --> 00:05:22.085
So we covered a lot of things that would interface, okay?

00:05:22.085 --> 00:05:25.895
And we're going to create a simple example for each and every point.

00:05:25.895 --> 00:05:30.065
Okay, We'll, we'll shut the coding from the next video.

00:05:30.065 --> 00:05:31.530
Thank you.
