WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.880
Hello everyone, Welcome back.

00:00:02.880 --> 00:00:08.835
We discuss a board. What is arithmetic operators and what are the operators?

00:00:08.835 --> 00:00:10.455
Write the similar way,

00:00:10.455 --> 00:00:13.845
we have something called assignment operator.

00:00:13.845 --> 00:00:18.509
So let's talk about what are the assignment operators.

00:00:18.509 --> 00:00:23.790
So I'm going to create a new class to explore a

00:00:23.790 --> 00:00:29.415
board assignment operator n. And then I'm going to create a,

00:00:29.415 --> 00:00:35.820
just close this one and find new yellow.

00:00:35.820 --> 00:00:44.285
So here it's going to be assignment operator Example.

00:00:44.285 --> 00:00:45.470
Okay?

00:00:45.470 --> 00:00:47.660
Just take a look at my class name.

00:00:47.660 --> 00:00:53.390
It starts with a capital letter and each and every next word starts with a capitalized.

00:00:53.390 --> 00:00:59.885
Okay? So let's save the class that Java.

00:00:59.885 --> 00:01:03.785
Okay, So the ultimate thing which we are trying to do it right now.

00:01:03.785 --> 00:01:08.450
So first of all, we need to know what are the assignment operators, right?

00:01:08.450 --> 00:01:15.350
So the one we already seen is equal and a minus.

00:01:15.350 --> 00:01:18.485
And I'll tell you why or how we are going to use that.

00:01:18.485 --> 00:01:24.500
And plus end to play.

00:01:24.500 --> 00:01:27.420
Of course divided by equal.

00:01:28.330 --> 00:01:29.705
Right?

00:01:29.705 --> 00:01:33.425
So first of all, we have done this and what is the assignment operator?

00:01:33.425 --> 00:01:36.245
Let me show you int x is equal to 10.

00:01:36.245 --> 00:01:40.805
Okay, so here, int is a datatype and x is a variable name,

00:01:40.805 --> 00:01:42.590
and x is a value.

00:01:42.590 --> 00:01:44.660
But what is the equal?

00:01:44.660 --> 00:01:48.320
So E is the assignment operator,

00:01:48.320 --> 00:01:49.370
so which will distinct.

00:01:49.370 --> 00:01:51.500
Usually this is going to be moving a limb and

00:01:51.500 --> 00:01:54.335
this value is going to belong to a particular variable name.

00:01:54.335 --> 00:01:56.810
So the left side you have the variable m,

00:01:56.810 --> 00:01:59.390
the rise aerial data value.

00:01:59.390 --> 00:02:02.730
So we segregate them, the help off.

00:02:03.550 --> 00:02:07.150
Let's talk about, I'm going to create

00:02:07.150 --> 00:02:11.095
a simple example to show you how all the operators will walk.

00:02:11.095 --> 00:02:14.170
Okay, so this is simple assignment operator.

00:02:14.170 --> 00:02:18.790
Let's try with the minus and plus equals and everything.

00:02:18.790 --> 00:02:20.950
Indexes are called return.

00:02:20.950 --> 00:02:28.795
Here, what I'm gonna do is I'm going to do something like x plus equal to 3.

00:02:28.795 --> 00:02:31.720
So you might wonder what these dad,

00:02:31.720 --> 00:02:36.895
this is called Docker Buddha income and our right.

00:02:36.895 --> 00:02:38.530
When we talk about increment,

00:02:38.530 --> 00:02:41.845
we'll talk about how, how exactly this is going to work, okay?

00:02:41.845 --> 00:02:45.235
So normally when you do x plus is equal to three.

00:02:45.235 --> 00:02:49.040
So the clear description for that x is

00:02:49.040 --> 00:02:56.930
equal to x, x plus three.

00:02:56.930 --> 00:02:59.180
So what is the x axis dendrite?

00:02:59.180 --> 00:03:02.315
So it has to be ten plus three.

00:03:02.315 --> 00:03:05.180
Okay, let me print it to show you what the

00:03:05.180 --> 00:03:12.800
outcome PR and T then.

00:03:12.800 --> 00:03:15.110
So here value is going to be,

00:03:15.110 --> 00:03:21.845
so I'm going to print x here.

00:03:21.845 --> 00:03:25.670
So let's compile that and we'll show you.

00:03:25.670 --> 00:03:27.050
So how are we going to compile

00:03:27.050 --> 00:03:32.285
Java C space assignment operator dot Java if there is no header.

00:03:32.285 --> 00:03:33.785
Okay, that is a matters here.

00:03:33.785 --> 00:03:35.855
So let's see what is that.

00:03:35.855 --> 00:03:38.960
So okay, semicolon is expert on.

00:03:38.960 --> 00:03:43.835
So here semicolon is acceptor.

00:03:43.835 --> 00:03:48.410
Because semicolon indicates and it had to be like that.

00:03:48.410 --> 00:03:51.110
And you should not give any spaces here.

00:03:51.110 --> 00:03:52.370
Okay, save it.

00:03:52.370 --> 00:03:54.410
Go back to the command prompt.

00:03:54.410 --> 00:03:56.670
Let's compile them again.

00:03:56.860 --> 00:04:00.515
See now, it compiles successfully.

00:04:00.515 --> 00:04:02.165
Now we can render,

00:04:02.165 --> 00:04:05.210
Let's see what is the value is 13.

00:04:05.210 --> 00:04:10.010
So how would this 13 int x is equal to ten and x plus is equal to three,

00:04:10.010 --> 00:04:13.085
which means x is equal to x plus three.

00:04:13.085 --> 00:04:16.625
Okay, so, well, candidate in a straightforward way.

00:04:16.625 --> 00:04:18.005
Yeah, we can still do that.

00:04:18.005 --> 00:04:19.610
So how we can do that?

00:04:19.610 --> 00:04:22.160
X is equal to x plus three,

00:04:22.160 --> 00:04:24.710
which will give you the same outcome.

00:04:24.710 --> 00:04:31.535
Save it, go back and compare them again and run it.

00:04:31.535 --> 00:04:33.380
You can see the same outcome.

00:04:33.380 --> 00:04:35.840
So this is shortest way.

00:04:35.840 --> 00:04:39.065
I mean the one we used earlier.

00:04:39.065 --> 00:04:40.760
That's the shortest way to do that.

00:04:40.760 --> 00:04:46.040
So x plus three.

00:04:46.040 --> 00:04:50.270
So which means x is equal to 10 plus 3.

00:04:50.270 --> 00:04:51.800
Right?

00:04:51.800 --> 00:04:53.420
Can we try something else now?

00:04:53.420 --> 00:05:03.350
So like x minus 4, it's straightforward here.

00:05:03.350 --> 00:05:12.260
So basically how it has to be x is equal to x minus 4.

00:05:12.260 --> 00:05:14.090
So that is a definition.

00:05:14.090 --> 00:05:18.060
Okay, let me print out value.

00:05:19.210 --> 00:05:21.680
Okay, Let's go back to the command prompt.

00:05:21.680 --> 00:05:24.090
Let's compile them again.

00:05:27.610 --> 00:05:30.845
See Now we got data's nine.

00:05:30.845 --> 00:05:33.155
So how it is going to be nine?

00:05:33.155 --> 00:05:39.155
So the x value is 10,

00:05:39.155 --> 00:05:43.040
ten minus four is 600.

00:05:43.040 --> 00:05:45.875
How come it is nine. So you might think right,

00:05:45.875 --> 00:05:50.255
basically what will happen here be updater,

00:05:50.255 --> 00:05:54.155
our X value to 13 because you are adding x plus 3.

00:05:54.155 --> 00:05:56.360
So the x value is updated too.

00:05:56.360 --> 00:06:00.320
13. So 13 minus 4 is equal to 9, right?

00:06:00.320 --> 00:06:03.680
For now, we have the x as a nine.

00:06:03.680 --> 00:06:05.899
Let's try to multiply.

00:06:05.899 --> 00:06:07.625
Let's do the same operation,

00:06:07.625 --> 00:06:14.255
x multiplication equal with the tree, right?

00:06:14.255 --> 00:06:18.095
Which indicates x is equal to x multiply 3.

00:06:18.095 --> 00:06:19.970
This is the definition.

00:06:19.970 --> 00:06:21.410
So now we have nine, right?

00:06:21.410 --> 00:06:23.015
So nine into three.

00:06:23.015 --> 00:06:25.370
2007 said that is outcome.

00:06:25.370 --> 00:06:32.900
So let's validate that to go back to a comment from compile your code.

00:06:32.900 --> 00:06:39.740
And random again, see nine into three, 27.

00:06:39.740 --> 00:06:41.195
Got it right.

00:06:41.195 --> 00:06:42.830
So what else is missing?

00:06:42.830 --> 00:06:45.995
So we haven't tried that divided by right?

00:06:45.995 --> 00:06:47.480
We can do that also.

00:06:47.480 --> 00:06:55.205
X divided by 2,

00:06:55.205 --> 00:06:58.805
which is indicates x is equal,

00:06:58.805 --> 00:07:00.530
x divided by 2.

00:07:00.530 --> 00:07:07.470
So what is it to now? 27 writer 27 divided by 23958.

00:07:08.950 --> 00:07:13.520
Okay, let's go back to the command prompt and compile the code again.

00:07:13.520 --> 00:07:16.715
You can press up and down arrows to go

00:07:16.715 --> 00:07:21.450
forward and backward water the comments so far we, we enter.

00:07:21.730 --> 00:07:25.025
So it's compiled. I'm going to run it now.

00:07:25.025 --> 00:07:27.920
See 13. Okay?

00:07:27.920 --> 00:07:29.900
The reason you might think why it is comes as a

00:07:29.900 --> 00:07:32.645
13 because it actually without in 95 rate.

00:07:32.645 --> 00:07:35.180
The reason it is coming as at 13.

00:07:35.180 --> 00:07:37.985
It is an integer if you're providing isn't a double.

00:07:37.985 --> 00:07:39.950
We will go dot in 0.5.

00:07:39.950 --> 00:07:42.575
So this is how you use the assignment operator.

00:07:42.575 --> 00:07:47.765
Don't get confused with this because it is just a detail explanation.

00:07:47.765 --> 00:07:50.030
I mean, this just says sharp cutoff,

00:07:50.030 --> 00:07:53.750
this kind of implementation.

00:07:53.750 --> 00:07:56.405
So you can provide x is equal to x plus 3.

00:07:56.405 --> 00:08:01.440
All right, so in the next video we're going to talk about some other operator. Thank you.
