WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.815
Hello everyone.

00:00:01.815 --> 00:00:06.150
So we know what is variable and what types of variable available, right?

00:00:06.150 --> 00:00:08.235
So we discussed the,

00:00:08.235 --> 00:00:15.180
I mean the local variable and instance variables and static variable also.

00:00:15.180 --> 00:00:17.385
But we need to know how to declare them,

00:00:17.385 --> 00:00:18.795
how to create a variable,

00:00:18.795 --> 00:00:21.015
how to declare a variable, correct?

00:00:21.015 --> 00:00:28.580
So this syntax is a datatype space variable name equal to value, okay?

00:00:28.580 --> 00:00:30.560
That are different types of data type.

00:00:30.560 --> 00:00:32.600
We will talk about that in the next video.

00:00:32.600 --> 00:00:36.965
Okay, so sometimes I might saying like we'll talk about next video.

00:00:36.965 --> 00:00:39.440
So it might not exactly the next video,

00:00:39.440 --> 00:00:41.705
it might be in the upcoming videos, right?

00:00:41.705 --> 00:00:47.960
So that declaring the variables in this data type variable name equal to value.

00:00:47.960 --> 00:00:50.255
And here isn't a simple example.

00:00:50.255 --> 00:00:56.600
Int is a datatype which can hold integer data and it has a name on it.

00:00:56.600 --> 00:00:59.345
It is nothing but x int x is equal to ten.

00:00:59.345 --> 00:01:07.070
And that is another example for a double which is more which holds the decimal data.

00:01:07.070 --> 00:01:10.085
So keep it in mind whenever you create a variable.

00:01:10.085 --> 00:01:12.140
These things in mind,

00:01:12.140 --> 00:01:14.315
the first one, so what is a data type?

00:01:14.315 --> 00:01:15.770
So either an integer or a double,

00:01:15.770 --> 00:01:18.230
or a string or a Boolean or something like that.

00:01:18.230 --> 00:01:21.320
And whenever you create a variable, it has a name.

00:01:21.320 --> 00:01:23.255
That name is a reference for it,

00:01:23.255 --> 00:01:26.670
and what is the value for it.

00:01:27.790 --> 00:01:30.650
Like class.

00:01:30.650 --> 00:01:34.980
Variables also have some naming conventions.

00:01:36.010 --> 00:01:39.065
As I said, for class,

00:01:39.065 --> 00:01:42.560
no special characters that allowed the similar way.

00:01:42.560 --> 00:01:44.600
There is no special characters allowed in variable.

00:01:44.600 --> 00:01:49.110
I'm also except that dollar and underscore symbol.

00:01:50.770 --> 00:01:54.410
And variable, unlike class name,

00:01:54.410 --> 00:01:56.885
class name always starts with a capital letter

00:01:56.885 --> 00:02:01.025
and the next literal also started capitalised.

00:02:01.025 --> 00:02:03.755
But when we talk about variable names,

00:02:03.755 --> 00:02:07.775
variable names always starts with a small letter.

00:02:07.775 --> 00:02:09.710
For example, my name.

00:02:09.710 --> 00:02:14.210
So M should be small letter and continue later.

00:02:14.210 --> 00:02:21.270
The next one that will be capitalised and a MEN should be in capital letter.

00:02:21.340 --> 00:02:24.665
So class name starts with

00:02:24.665 --> 00:02:29.310
a capital letter and the variable name starts with a small letter.

00:02:29.830 --> 00:02:34.430
And that is n symbol example in the first number is equal to 10.

00:02:34.430 --> 00:02:35.915
So in this my data type,

00:02:35.915 --> 00:02:37.430
first number is my variable name.

00:02:37.430 --> 00:02:40.130
Look at the variable name if it starts with a small,

00:02:40.130 --> 00:02:41.675
but n is it capitalized?

00:02:41.675 --> 00:02:43.520
Because that's the next letter.

00:02:43.520 --> 00:02:47.120
In Java, everything is case sensitive, right?

00:02:47.120 --> 00:02:48.830
Basically keywords on the names.

00:02:48.830 --> 00:02:52.685
So capital hello is different.

00:02:52.685 --> 00:02:55.890
Small Hello is different.

00:02:59.320 --> 00:03:01.535
Now another important thing.

00:03:01.535 --> 00:03:03.845
So how we are going to declare a variable,

00:03:03.845 --> 00:03:06.635
datatype space variable m is equal to value.

00:03:06.635 --> 00:03:09.110
I need to know what kind of data types are available,

00:03:09.110 --> 00:03:11.790
right? That is the key.

00:03:12.670 --> 00:03:14.165
Okay?

00:03:14.165 --> 00:03:20.105
So datatypes basically two different types.

00:03:20.105 --> 00:03:24.425
The one which you are talking about here, It's a primitive.

00:03:24.425 --> 00:03:27.455
And the other one is, of course it's a non primitive.

00:03:27.455 --> 00:03:33.500
So primitive data types like byte,

00:03:33.500 --> 00:03:37.940
short, int, long, float, and double.

00:03:37.940 --> 00:03:38.990
There is something else also,

00:03:38.990 --> 00:03:44.720
we have a car and Boolean is my bad, I missed out there.

00:03:44.720 --> 00:03:47.030
So I should have been added those things also.

00:03:47.030 --> 00:03:49.265
So there are eight primitive types.

00:03:49.265 --> 00:03:51.950
Okay, so byte, short, int,

00:03:51.950 --> 00:03:55.040
long, float, double, and Boolean and care.

00:03:55.040 --> 00:03:55.730
Okay?

00:03:55.730 --> 00:04:00.720
So you might think, why do I need these many types of them?

00:04:01.600 --> 00:04:05.195
So when you are working with the integers,

00:04:05.195 --> 00:04:08.555
you can use the int type in DC data type.

00:04:08.555 --> 00:04:11.585
And when you're working with a decimal,

00:04:11.585 --> 00:04:13.835
you can go for double and float.

00:04:13.835 --> 00:04:16.580
But working with the India itself,

00:04:16.580 --> 00:04:19.085
you have two different types of int and long,

00:04:19.085 --> 00:04:24.350
because each and every primitive data type has its own limit.

00:04:24.350 --> 00:04:29.344
So byte will only work with the minus 128, 2 plus 128.

00:04:29.344 --> 00:04:31.100
So if you declare a variable by d,

00:04:31.100 --> 00:04:33.290
a is equal to 120 and n,

00:04:33.290 --> 00:04:35.300
which will not work because that,

00:04:35.300 --> 00:04:38.480
that bite, it doesn't have a limit to access 129.

00:04:38.480 --> 00:04:39.770
Then you need to go for short,

00:04:39.770 --> 00:04:45.695
which will accept 32000 68 minus to plus the similar way int long, float and w.

00:04:45.695 --> 00:04:50.930
So these are the types of data and non-primitive.

00:04:50.930 --> 00:04:52.775
So everything else is non-primitive.

00:04:52.775 --> 00:04:53.975
Classes.

00:04:53.975 --> 00:04:57.095
Interfaces are there is an extra S, Okay?

00:04:57.095 --> 00:04:59.720
So those are our variable types.

00:04:59.720 --> 00:05:01.910
So the variable data types, byte,

00:05:01.910 --> 00:05:05.675
short, int, and float and double.

00:05:05.675 --> 00:05:07.265
And you can add two more,

00:05:07.265 --> 00:05:08.870
Boolean and the care.

00:05:08.870 --> 00:05:12.485
So we're going to create a simple example to talk about everything.

00:05:12.485 --> 00:05:14.580
In the next video.
