WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.800
Hello everyone, welcome back.

00:00:01.800 --> 00:00:04.530
So as I mentioned, incense and static variable,

00:00:04.530 --> 00:00:06.330
when I'm planning that concept,

00:00:06.330 --> 00:00:10.845
it might not feel like not exactly understand the concept.

00:00:10.845 --> 00:00:12.255
But what I'm gonna do,

00:00:12.255 --> 00:00:14.070
I'm gonna create a separate example for this

00:00:14.070 --> 00:00:18.540
now to show the difference between these two and how it is impacting the data.

00:00:18.540 --> 00:00:24.060
You might not feel like it is not fully understandable right now,

00:00:24.060 --> 00:00:26.204
but outer seen that example,

00:00:26.204 --> 00:00:28.050
I'm pretty sure you will understand that.

00:00:28.050 --> 00:00:32.530
So I'm going to create an example called class.

00:00:33.320 --> 00:00:37.380
Instance versus static.

00:00:37.380 --> 00:00:42.370
Doesn't make last name. So my class name starts with a capital letter and the next word,

00:00:42.370 --> 00:00:45.425
continuous were also capitalised.

00:00:45.425 --> 00:00:49.190
And you're gonna do open, close, open,

00:00:49.190 --> 00:00:53.195
close brackets to mention the end and the beginning of the class.

00:00:53.195 --> 00:00:57.530
Let's save it and send messages.

00:00:57.530 --> 00:00:59.555
So the first thing first,

00:00:59.555 --> 00:01:01.680
let's create a main method.

00:01:02.530 --> 00:01:05.450
Because main method is a key,

00:01:05.450 --> 00:01:11.789
the entry point string.

00:01:18.370 --> 00:01:20.700
Okay?

00:01:34.390 --> 00:01:36.050
So now let's

00:01:36.050 --> 00:01:37.880
create two variables here,

00:01:37.880 --> 00:01:42.770
like x is equal to

00:01:42.770 --> 00:01:48.890
10 and static weight

00:01:48.890 --> 00:01:53.975
is equal to 20. Okay?

00:01:53.975 --> 00:01:55.970
So what I'm trying to do right now,

00:01:55.970 --> 00:01:57.425
I'm trying to tell the difference.

00:01:57.425 --> 00:02:00.290
I'll create an object for this particular class, object.

00:02:00.290 --> 00:02:03.380
In the sentence I'm creating an instance for the particular class.

00:02:03.380 --> 00:02:06.005
It might not look familiar for you right now because

00:02:06.005 --> 00:02:08.720
this concept we're going to cover in the,

00:02:08.720 --> 00:02:11.030
oops, concept because how do create a class?

00:02:11.030 --> 00:02:13.670
I mean, how to create the object for the class and how

00:02:13.670 --> 00:02:17.570
to use the object reference to call the methods integer class.

00:02:17.570 --> 00:02:20.945
Those are big topic that will become center of the funnel.

00:02:20.945 --> 00:02:23.600
I'm gonna use them to show you the difference.

00:02:23.600 --> 00:02:26.555
Okay? So instead of the SEPIC,

00:02:26.555 --> 00:02:31.290
so here is a PS1 is equal to nu.

00:02:33.250 --> 00:02:37.230
So let me print multiple times here.

00:02:39.700 --> 00:02:44.270
So before that, let me compile it to see is there

00:02:44.270 --> 00:02:46.350
any exception in the class?

00:02:53.170 --> 00:02:55.440
Okay.

00:02:56.410 --> 00:03:06.410
So I added here in the y is one.

00:03:06.410 --> 00:03:08.420
So this is fine.

00:03:08.420 --> 00:03:11.570
So let me more if it, because the names has to be unique.

00:03:11.570 --> 00:03:12.275
Okay.

00:03:12.275 --> 00:03:14.300
So what basically I'm trying to do first,

00:03:14.300 --> 00:03:15.785
let's talk about the static,

00:03:15.785 --> 00:03:18.125
how the static embedding that data.

00:03:18.125 --> 00:03:21.335
Okay? So I'm going to print

00:03:21.335 --> 00:03:26.585
SOP system dot

00:03:26.585 --> 00:03:31.910
out dot print l.

00:03:31.910 --> 00:03:34.490
And this is to print the data.

00:03:34.490 --> 00:03:38.820
So s1 dot x.

00:03:42.280 --> 00:03:45.420
So copy paste it.

00:03:52.300 --> 00:03:56.165
Okay, so I'm just printing all the data here.

00:03:56.165 --> 00:03:58.835
So now what I'm gonna do,

00:03:58.835 --> 00:04:00.890
I'm trying to modify the data.

00:04:00.890 --> 00:04:05.855
So s1 dot y is equal to 22, I'm modeling to 30.

00:04:05.855 --> 00:04:09.360
And I'm doing the same thing, the bottom.

00:04:09.670 --> 00:04:12.960
So let's put something here.

00:04:14.820 --> 00:04:17.425
Don't get confused what I'm doing here,

00:04:17.425 --> 00:04:22.100
I'm just trying to show the difference. After.

00:04:23.940 --> 00:04:29.630
Okay, let's go back and now compile the code.

00:04:29.670 --> 00:04:32.560
So let's run it.

00:04:32.560 --> 00:04:36.415
Server Instance as his rhetoric.

00:04:36.415 --> 00:04:39.440
Can you see the difference here?

00:04:39.450 --> 00:04:45.265
Initially it was 20 is before update one.

00:04:45.265 --> 00:04:47.530
I updated the s1 dot y.

00:04:47.530 --> 00:04:49.690
But what basically happened,

00:04:49.690 --> 00:04:53.095
everything has been updated because S2 dot-dot-dot.

00:04:53.095 --> 00:05:00.650
Okay, so that's on a lot of minor to modify the data to S3, S2, and S3.

00:05:00.650 --> 00:05:01.850
It save it and go back,

00:05:01.850 --> 00:05:06.925
compile again and run it again.

00:05:06.925 --> 00:05:09.200
Here's the difference, correct?

00:05:09.200 --> 00:05:12.290
So it is 20. But once I absolutely as dead,

00:05:12.290 --> 00:05:16.730
why even S2 and S3

00:05:16.730 --> 00:05:18.710
dot-dot-dot everything that updated weather

00:05:18.710 --> 00:05:21.890
dataset bit because all of them sharing the memory location.

00:05:21.890 --> 00:05:24.845
So once we update the memory location,

00:05:24.845 --> 00:05:28.610
so whoever is trying to access the same location,

00:05:28.610 --> 00:05:30.665
they'll get the updated data,

00:05:30.665 --> 00:05:33.275
not the original data.

00:05:33.275 --> 00:05:36.875
So that is a difference between incidence and static.

00:05:36.875 --> 00:05:41.619
Let's try to apply the same In the instance,

00:05:41.619 --> 00:05:43.960
and I'll show you what is the difference, okay,

00:05:43.960 --> 00:05:47.050
for now, Let's come into this one.

00:05:47.050 --> 00:05:50.605
I'm going to do the multiple line comment here.

00:05:50.605 --> 00:05:56.360
So now the entire portion will not taken for compilation.

00:06:00.840 --> 00:06:03.850
So now we have x is equal to ten, right?

00:06:03.850 --> 00:06:05.395
So I'm going to update the same.

00:06:05.395 --> 00:06:08.725
Maybe we can keep this control C,

00:06:08.725 --> 00:06:15.490
control V. So instead of y,

00:06:15.490 --> 00:06:17.695
I'm going to use x here.

00:06:17.695 --> 00:06:24.245
So I'm updating S. One dot x is equal to from ten to quantify.

00:06:24.245 --> 00:06:27.870
And here is two dot x.

00:06:37.810 --> 00:06:39.395
Okay?

00:06:39.395 --> 00:06:41.285
So what I'm trying to show you here,

00:06:41.285 --> 00:06:44.585
I'm just printing all the incidence data here.

00:06:44.585 --> 00:06:48.110
So at this point everything is 10.

00:06:48.110 --> 00:06:50.915
I'm updating s1 dot x dot 25.

00:06:50.915 --> 00:06:55.280
Previously, everything has been updated once I updated one instance,

00:06:55.280 --> 00:06:57.365
but I'm updating the same here.

00:06:57.365 --> 00:06:59.120
But this is not a static.

00:06:59.120 --> 00:07:02.300
Okay, let's run the code and z.

00:07:02.300 --> 00:07:04.935
Now, recompile them again.

00:07:04.935 --> 00:07:06.895
Spencer on adder.

00:07:06.895 --> 00:07:11.350
So we need to provide a semicolon that is an indication for end up the line.

00:07:11.350 --> 00:07:13.885
So compelled them again.

00:07:13.885 --> 00:07:16.525
And random.

00:07:16.525 --> 00:07:19.435
Can you see the difference now?

00:07:19.435 --> 00:07:24.415
Dan, Dan, dan, these are all before updating the instance.

00:07:24.415 --> 00:07:27.790
After update, only one cut operated at 25,

00:07:27.790 --> 00:07:28.900
which means what Lee yes,

00:07:28.900 --> 00:07:33.175
one got updated to 25 but less shoved them remains the same.

00:07:33.175 --> 00:07:38.095
So that is a major difference between the static and instance to instance,

00:07:38.095 --> 00:07:40.795
which always keeps a separate copy.

00:07:40.795 --> 00:07:44.185
So whenever you make a change that will only apply to the separate copy,

00:07:44.185 --> 00:07:47.550
not to the entire instance.

00:07:47.550 --> 00:07:51.665
Instance. It's what the other way around if you impact one instance,

00:07:51.665 --> 00:07:56.180
it will apply for all the static insurance, right?

00:07:56.180 --> 00:07:59.190
That's more than extra. Thank you.
