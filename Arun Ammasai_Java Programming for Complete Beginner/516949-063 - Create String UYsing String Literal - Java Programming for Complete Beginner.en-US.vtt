WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.295
Hello everyone, Welcome back.

00:00:02.295 --> 00:00:07.560
So we discussed how we can create a string datatype, right?

00:00:07.560 --> 00:00:10.080
So there are two ways. The first one is using string

00:00:10.080 --> 00:00:12.810
literal and second one is using new keyword.

00:00:12.810 --> 00:00:13.800
Got it.

00:00:13.800 --> 00:00:18.090
So now we're going to talk about how we are going to perform or creating

00:00:18.090 --> 00:00:22.485
a string using Spring literature.

00:00:22.485 --> 00:00:26.850
Okay, so I've created a simple sample program here,

00:00:26.850 --> 00:00:29.115
string example and I have a main method.

00:00:29.115 --> 00:00:33.480
The first way we need to do string, that is a key word.

00:00:33.480 --> 00:00:36.765
S1 is equal to.

00:00:36.765 --> 00:00:40.575
The string value always becomes inside the double quotes.

00:00:40.575 --> 00:00:42.370
Here I'm going to provide Hello.

00:00:42.370 --> 00:00:43.880
Got it.

00:00:43.880 --> 00:00:46.950
So this is my string value.

00:00:47.980 --> 00:00:51.755
And I'm going to do the same thing again.

00:00:51.755 --> 00:00:54.485
String dot AS2.

00:00:54.485 --> 00:00:58.130
So the problem with this particular approach,

00:00:58.130 --> 00:01:00.515
so I have S1 and S2,

00:01:00.515 --> 00:01:02.465
but the value remains the same.

00:01:02.465 --> 00:01:04.655
So what basically will happen here?

00:01:04.655 --> 00:01:06.740
So when you're creating this second variable,

00:01:06.740 --> 00:01:11.945
which is S2, our compiler will find,

00:01:11.945 --> 00:01:13.670
it, will search our memory.

00:01:13.670 --> 00:01:17.495
Is there any way value exist with data of Hello?

00:01:17.495 --> 00:01:19.595
So if data exists,

00:01:19.595 --> 00:01:23.255
it will not create another instance.

00:01:23.255 --> 00:01:27.910
It will share the one which are already created for S1.

00:01:27.910 --> 00:01:30.070
Okay, So I have a S1 and S2,

00:01:30.070 --> 00:01:31.435
both will print hello rate.

00:01:31.435 --> 00:01:34.100
So we can print them also.

00:01:34.650 --> 00:01:40.180
So here S1 and you can provide one more.

00:01:40.180 --> 00:01:42.970
And S2 here. Okay?

00:01:42.970 --> 00:01:44.920
So let me run this.

00:01:44.920 --> 00:01:48.055
You can see both of them same data.

00:01:48.055 --> 00:01:49.465
So you're going to simply tell

00:01:49.465 --> 00:01:52.315
a both a different man because both are different variables.

00:01:52.315 --> 00:01:57.100
But actually in the front it looks like it's a two different variables.

00:01:57.100 --> 00:01:59.890
But actually in the memory that only one, only one,

00:01:59.890 --> 00:02:03.760
hello, S1, S2, both of them point to the same data.

00:02:03.760 --> 00:02:06.175
Okay. I don't know how to verify that.

00:02:06.175 --> 00:02:06.960
Okay.

00:02:06.960 --> 00:02:08.540
In order to verify that memory,

00:02:08.540 --> 00:02:11.480
you can easily use a method called hash code.

00:02:11.480 --> 00:02:14.885
So a hashCode will give you the address of your memory.

00:02:14.885 --> 00:02:17.075
So how will you need to get the hashCode?

00:02:17.075 --> 00:02:21.350
Just one dot hashCode. Right?

00:02:21.350 --> 00:02:26.240
So the similar way you can try for S2 dot-dot-dot hashCode.

00:02:26.240 --> 00:02:27.545
Okay?

00:02:27.545 --> 00:02:29.180
So now if you run,

00:02:29.180 --> 00:02:32.285
you can see both numbers are same,

00:02:32.285 --> 00:02:34.325
which means it is a memory location.

00:02:34.325 --> 00:02:37.805
So both of them using the same memory location.

00:02:37.805 --> 00:02:40.610
You might ask, it might be coincident.

00:02:40.610 --> 00:02:43.130
Okay, what I'm gonna do is I'm going to do,

00:02:43.130 --> 00:02:46.175
instead of hello, I'm adding one more rule here.

00:02:46.175 --> 00:02:48.980
So now both are not seem correct.

00:02:48.980 --> 00:02:50.660
So let's run it again.

00:02:50.660 --> 00:02:52.250
Now we'll see what happens.

00:02:52.250 --> 00:02:54.770
See both hashCode is different,

00:02:54.770 --> 00:02:59.045
which means both of them are using different memory.

00:02:59.045 --> 00:03:00.275
Got it.

00:03:00.275 --> 00:03:06.200
So this is the problem with the string literal approach.

00:03:06.200 --> 00:03:09.650
This approach which will always trying to look

00:03:09.650 --> 00:03:12.830
for the memory whether the same instances available.

00:03:12.830 --> 00:03:14.705
If it is the same instances available,

00:03:14.705 --> 00:03:16.175
it's not going to create a new one.

00:03:16.175 --> 00:03:17.705
It is going to share them.

00:03:17.705 --> 00:03:18.710
That's all.

00:03:18.710 --> 00:03:20.570
So in the next example,

00:03:20.570 --> 00:03:21.725
what we're going to talk about,

00:03:21.725 --> 00:03:27.350
we're going to create a string data with the help of new keyword.

00:03:27.350 --> 00:03:29.765
Let's do that in the next video.

00:03:29.765 --> 00:03:31.350
Thank you.
