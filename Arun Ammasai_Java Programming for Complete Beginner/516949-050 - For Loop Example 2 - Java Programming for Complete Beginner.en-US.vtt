WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.440
Hello everyone.

00:00:01.440 --> 00:00:02.430
Welcome back.

00:00:02.430 --> 00:00:05.160
So let's create one more example to explore

00:00:05.160 --> 00:00:09.045
how the for loop is going to work so far, live example one.

00:00:09.045 --> 00:00:13.710
So in the previous example we use normal for loop which

00:00:13.710 --> 00:00:18.270
contains the initial value and lend and the incrementer.

00:00:18.270 --> 00:00:20.895
So here we are going to use something else.

00:00:20.895 --> 00:00:23.320
So let's have a main method.

00:00:26.110 --> 00:00:27.560
Okay?

00:00:27.560 --> 00:00:31.880
So we're going to use for each loop,

00:00:31.880 --> 00:00:34.865
for example, for each,

00:00:34.865 --> 00:00:38.270
so the importance about the for each loop, okay?

00:00:38.270 --> 00:00:40.580
So I'm like our normal for loop.

00:00:40.580 --> 00:00:45.770
The for each loop is used to travel the array or collection also.

00:00:45.770 --> 00:00:48.650
And it's easier to use than

00:00:48.650 --> 00:00:53.450
our normal for loop because we don't need to increment a value.

00:00:53.450 --> 00:00:57.950
There isn't is it works based on the elements,

00:00:57.950 --> 00:00:59.510
not based on the impacts.

00:00:59.510 --> 00:01:01.490
So when it is not based on the index,

00:01:01.490 --> 00:01:03.815
you don't need to increment the data.

00:01:03.815 --> 00:01:10.010
You cannot do dark gate array of 0 or F1 or F2 cannot do that.

00:01:10.010 --> 00:01:11.030
Okay?

00:01:11.030 --> 00:01:14.330
So let me give you a simple example here.

00:01:14.330 --> 00:01:18.365
Let's consider I have an integer array.

00:01:18.365 --> 00:01:25.580
So array contains open curly braces

00:01:25.580 --> 00:01:30.380
and it contains one comma two commodity known for concreteness 6, 7.

00:01:30.380 --> 00:01:33.560
So this one elements. So I want to print them.

00:01:33.560 --> 00:01:36.500
So normally how we will do in far loop,

00:01:36.500 --> 00:01:44.640
like this red for high.

00:01:47.920 --> 00:01:51.000
This is how we'll do right,

00:01:51.220 --> 00:01:54.125
shall burn all the data here.

00:01:54.125 --> 00:02:03.480
But now I don't want to use this because I want to do it based on the for each loop.

00:02:04.840 --> 00:02:07.490
Some commodities.

00:02:07.490 --> 00:02:10.310
Okay, so let's see how the for-each loop,

00:02:10.310 --> 00:02:13.790
I mean the forage, the forest syntax is four.

00:02:13.790 --> 00:02:23.705
And here the type and type and the variable name,

00:02:23.705 --> 00:02:28.670
variable and the data.

00:02:28.670 --> 00:02:31.220
So this is how the for loop,

00:02:31.220 --> 00:02:33.035
the for each loop will work.

00:02:33.035 --> 00:02:36.170
What is the type here? So my type is integer, right?

00:02:36.170 --> 00:02:39.035
So here my type is integer.

00:02:39.035 --> 00:02:41.975
This is a variable name. I can simply say num.

00:02:41.975 --> 00:02:46.430
So this is data means what is the data which you are feeling too far loop.

00:02:46.430 --> 00:02:49.460
So our ARR, correct.

00:02:49.460 --> 00:02:51.620
So now what we can simply do this well,

00:02:51.620 --> 00:02:53.940
and you can print the num.

00:02:54.310 --> 00:02:55.925
That's all.

00:02:55.925 --> 00:02:58.160
It is, even pretty simple.

00:02:58.160 --> 00:03:01.220
Now what we can do is just run it again.

00:03:01.220 --> 00:03:04.715
You'll see the same output as the previous one.

00:03:04.715 --> 00:03:06.830
But the way they used the normal,

00:03:06.830 --> 00:03:10.175
traditional for loop and this is the enhanced for loop.

00:03:10.175 --> 00:03:15.420
Okay, so bad you don't need to increment or based on the index.

00:03:16.270 --> 00:03:19.100
Okay, let's talk about one more.

00:03:19.100 --> 00:03:23.915
The for loop which mentioned as labeled follow.

00:03:23.915 --> 00:03:29.570
It is pretty much our normal for loop only, but slightly different.

00:03:29.570 --> 00:03:33.545
So what I'm gonna do is I'm going to comment until this now.

00:03:33.545 --> 00:03:35.735
So everything is commentary here.

00:03:35.735 --> 00:03:37.820
Okay? So here what I'm going to do,

00:03:37.820 --> 00:03:39.230
we're going to use the labeled.

00:03:39.230 --> 00:03:41.510
For now what I want to do, I'm going to create a simple for

00:03:41.510 --> 00:03:44.645
loop which contains int I is equal to 0.

00:03:44.645 --> 00:03:48.320
Sorry, The I is equal to.

00:03:48.320 --> 00:03:55.050
Let's start from one and less than or equal to five.

00:03:55.780 --> 00:04:03.290
And I, basically I'm creating a loop which will print up to five.

00:04:03.290 --> 00:04:07.010
And I'm going to have a nested for loop like a nice steady

00:04:07.010 --> 00:04:11.105
if there is a condition in my if condition.

00:04:11.105 --> 00:04:13.460
So if I'm on the inside,

00:04:13.460 --> 00:04:15.710
that is one more if condition the design itself right there.

00:04:15.710 --> 00:04:17.480
Similarly, I have a for loop inside of here.

00:04:17.480 --> 00:04:21.170
If I have another four loop that is called as a nested for loop.

00:04:21.170 --> 00:04:27.240
So I'm going to copy this and I'm going to change it to j here.

00:04:28.240 --> 00:04:31.850
So j plus, plus.

00:04:31.850 --> 00:04:35.940
Okay? So this is a pretty much a simple,

00:04:36.100 --> 00:04:39.965
I'm going to print 0 here.

00:04:39.965 --> 00:04:43.325
So I want to print I and j.

00:04:43.325 --> 00:04:50.045
So I value and I'm concatenating and coordination using some space here plus j.

00:04:50.045 --> 00:04:53.990
So I is correct.

00:04:53.990 --> 00:04:58.250
So, so what is this normal for loop or what is the difference here?

00:04:58.250 --> 00:05:01.175
But what I can do is I can provide a label here.

00:05:01.175 --> 00:05:05.045
So Luke, 1 and column.

00:05:05.045 --> 00:05:09.995
So that means this particular line of code belongs to this particular label.

00:05:09.995 --> 00:05:13.010
All right, and here I have another loop,

00:05:13.010 --> 00:05:15.275
so I can call it as a loop to.

00:05:15.275 --> 00:05:18.155
So if you close the loop one,

00:05:18.155 --> 00:05:22.295
this follow-up learned, if you break that this loop, this fallible went.

00:05:22.295 --> 00:05:27.200
Okay, so you can specifically break the loop based on their label.

00:05:27.200 --> 00:05:28.490
Normally we won't use label,

00:05:28.490 --> 00:05:30.800
but even though if you can use when you have

00:05:30.800 --> 00:05:33.155
a multiple far loops, people will get confused.

00:05:33.155 --> 00:05:36.680
So we need to know what is the reason for the particular loop.

00:05:36.680 --> 00:05:37.790
Okay?

00:05:37.790 --> 00:05:40.895
So you need to validate some condition.

00:05:40.895 --> 00:05:42.080
If the condition is satisfied,

00:05:42.080 --> 00:05:45.440
only break that particular loop, not all the loose.

00:05:45.440 --> 00:05:46.460
Okay?

00:05:46.460 --> 00:05:49.250
So here what I'm gonna do is before we are printing the data,

00:05:49.250 --> 00:05:50.300
I'm putting some condition.

00:05:50.300 --> 00:05:52.265
I'm writing if condition here,

00:05:52.265 --> 00:06:00.860
I equal to 3 and t equal to 3.

00:06:00.860 --> 00:06:08.400
So if both are three and that scenario just break my loop one.

00:06:10.090 --> 00:06:15.155
See, normally if you're using breakaway can't grow anything here,

00:06:15.155 --> 00:06:17.195
but when you're using the labeled,

00:06:17.195 --> 00:06:20.045
you can use break loop here.

00:06:20.045 --> 00:06:27.500
So let me run this. Can you see what happened here?

00:06:27.500 --> 00:06:29.045
One comma 11 comma two,

00:06:29.045 --> 00:06:34.370
comma 31 comma 41 comma phi.

00:06:34.370 --> 00:06:40.325
So the moment the I is equal to three and j is equal to 3.

00:06:40.325 --> 00:06:43.955
So you have up to 22, 22, and 32.

00:06:43.955 --> 00:06:46.280
So the next level is going to be 33.

00:06:46.280 --> 00:06:47.660
What happened here?

00:06:47.660 --> 00:06:50.915
So when that scenario is three is equal to 3,

00:06:50.915 --> 00:06:54.900
the end of the loop, which means the loop one.

00:06:55.600 --> 00:06:57.260
Correct?

00:06:57.260 --> 00:07:01.670
So that is how the labeled loop will look.

00:07:01.670 --> 00:07:02.750
The basically the only thing,

00:07:02.750 --> 00:07:04.070
why do we need a label?

00:07:04.070 --> 00:07:07.670
When you have a multiple number of layers, I'm in for loops.

00:07:07.670 --> 00:07:10.400
The first for loop based on this student names and

00:07:10.400 --> 00:07:13.385
second follower base and the student Martin purpose-based Randy,

00:07:13.385 --> 00:07:16.235
student patent information load of things, okay?

00:07:16.235 --> 00:07:21.275
For example, if we have 54 loop each label on it, okay?

00:07:21.275 --> 00:07:23.720
And if you are taking some condition, if this condition satisfied,

00:07:23.720 --> 00:07:26.315
I want to Wanli exit the loop,

00:07:26.315 --> 00:07:27.890
not all the loops.

00:07:27.890 --> 00:07:28.790
Okay?

00:07:28.790 --> 00:07:30.080
So those kind of scenarios,

00:07:30.080 --> 00:07:33.050
you can make use of the label the for loop, okay?

00:07:33.050 --> 00:07:36.755
The normal for loop and labeled for both are same.

00:07:36.755 --> 00:07:42.320
But when it has a label that is labeled for loop audience, It's an honor for loop.

00:07:42.320 --> 00:07:45.410
And then the other one is the unanswered for loop,

00:07:45.410 --> 00:07:47.990
which we tried in the previous example. This is the one.

00:07:47.990 --> 00:07:50.220
Okay, Thank you.
