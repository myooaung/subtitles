WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.220
Hello everyone. Welcome back.

00:00:02.220 --> 00:00:04.980
So let's continue about the JVM.

00:00:04.980 --> 00:00:07.560
Okay, so we know how the DMV miss working right?

00:00:07.560 --> 00:00:10.905
How it is getting the source code and,

00:00:10.905 --> 00:00:14.130
and how it is compiled as

00:00:14.130 --> 00:00:17.190
a bytecode that the help of compiler and then it's passed 100 JVM.

00:00:17.190 --> 00:00:18.615
Then we got the output.

00:00:18.615 --> 00:00:19.125
Okay?

00:00:19.125 --> 00:00:21.840
So from the byte code to the output that it'll be

00:00:21.840 --> 00:00:25.620
architecture which will taken your multiple steps. So process.

00:00:25.620 --> 00:00:30.640
Okay, Let's talk about the architecture, about your JVM.

00:00:31.030 --> 00:00:34.235
Great, So here is an example.

00:00:34.235 --> 00:00:38.630
In previous example, you start with dot Java file because that is

00:00:38.630 --> 00:00:45.725
a JDK which developing a Java file and compiling them and then sending you do JVMs.

00:00:45.725 --> 00:00:48.360
But here the input is class fail.

00:00:48.580 --> 00:00:52.985
So, so once the class will be saved, what will happen?

00:00:52.985 --> 00:01:00.680
There are multiple layer of process has been done in order to show are executed output.

00:01:00.680 --> 00:01:04.115
The first thing, the class loader.

00:01:04.115 --> 00:01:09.530
And then we have another layer which contains my third area,

00:01:09.530 --> 00:01:12.230
heap stack and PC register.

00:01:12.230 --> 00:01:14.690
Some native at that stack.

00:01:14.690 --> 00:01:17.780
So these are all inside JVM memory.

00:01:17.780 --> 00:01:20.975
And after that, we have an execution engine,

00:01:20.975 --> 00:01:24.305
native matter interfaces and native libraries.

00:01:24.305 --> 00:01:24.890
Okay?

00:01:24.890 --> 00:01:26.510
So we're going to talk on board,

00:01:26.510 --> 00:01:29.645
what is metadata, what is heap, what is stack?

00:01:29.645 --> 00:01:31.850
Eat and everything? Because if you know it,

00:01:31.850 --> 00:01:33.410
this is my architects that have JVM, right?

00:01:33.410 --> 00:01:36.740
Do you need to know what each and everything is doing?

00:01:36.740 --> 00:01:39.425
Then only you should be able to understand how the basically the

00:01:39.425 --> 00:01:42.050
sea just writing a code. It's not a big deal.

00:01:42.050 --> 00:01:45.750
We need to understand how it is working in the background.

00:01:46.660 --> 00:01:49.595
Okay, so how would it logging?

00:01:49.595 --> 00:01:52.775
The first thing, class loader.

00:01:52.775 --> 00:01:54.810
So what we'll do,

00:01:54.810 --> 00:01:57.115
you can have them enter in the name itself.

00:01:57.115 --> 00:02:02.440
It reads the class file and save the bytecode in a metallic character.

00:02:02.440 --> 00:02:09.970
Metallic. Next step. Okay, So whenever the landfill given as a input to a JVM,

00:02:09.970 --> 00:02:15.235
the class loader will load the class and tend to buy the method area.

00:02:15.235 --> 00:02:17.365
We just saw that next step.

00:02:17.365 --> 00:02:23.530
So what metadata is exactly as doing once it is received from the class loader grid.

00:02:23.530 --> 00:02:28.690
This is the place where you can store all the class level information of each class.

00:02:28.690 --> 00:02:31.120
For example, if you are sending thousands of classifiers, right?

00:02:31.120 --> 00:02:33.025
So that is a one that is,

00:02:33.025 --> 00:02:37.590
that is that guy we need who can handle all the details.

00:02:37.590 --> 00:02:39.140
When you have a lot of students,

00:02:39.140 --> 00:02:40.865
you have the attendance, right?

00:02:40.865 --> 00:02:43.250
Are you our student details data is read there.

00:02:43.250 --> 00:02:45.215
Similarly, when we have a classes,

00:02:45.215 --> 00:02:50.315
we need someone to taken care off to handle the information about each and every classes.

00:02:50.315 --> 00:02:54.500
So in the motor area which will take and get up that but Slovak.

00:02:54.500 --> 00:02:56.840
Okay, so the next one is heap.

00:02:56.840 --> 00:02:58.955
Okay, So what did he,

00:02:58.955 --> 00:03:01.940
not only hippies belongs to the memory.

00:03:01.940 --> 00:03:04.520
So this will define,

00:03:04.520 --> 00:03:09.290
this will do fine how to allocate the memory to an object's.

00:03:09.290 --> 00:03:10.805
Okay.

00:03:10.805 --> 00:03:12.890
For example, int I is equal ten.

00:03:12.890 --> 00:03:17.855
So you need this, specify some memory allocation to that particular x variable, right?

00:03:17.855 --> 00:03:22.805
So that partner, they can get in the hip area and stack.

00:03:22.805 --> 00:03:27.785
So basically it is used for storing temporary variables so they will be destroyed once

00:03:27.785 --> 00:03:33.095
the method execution is 10 or glass execution is complete and right.

00:03:33.095 --> 00:03:36.545
And then register PC registers.

00:03:36.545 --> 00:03:38.465
I don't know how to explain that.

00:03:38.465 --> 00:03:42.690
We all know what is it used for registers, correct.

00:03:43.000 --> 00:03:45.170
So the 3D cell,

00:03:45.170 --> 00:03:49.940
which will hold the breeze tip about the execution path.

00:03:49.940 --> 00:03:52.430
So what needs to be done and what is going to be

00:03:52.430 --> 00:03:55.085
executed next and after what needs to be done.

00:03:55.085 --> 00:04:00.215
So each and everything is registered in this particular area,

00:04:00.215 --> 00:04:04.560
which will hold the execution flow of a class.

00:04:04.960 --> 00:04:09.155
For example, we know that write Java is running in a multiple threads

00:04:09.155 --> 00:04:14.885
or single thread and multiple drug because basically it's the thread, right?

00:04:14.885 --> 00:04:17.300
So whenever you are dealing with the threads,

00:04:17.300 --> 00:04:21.110
each and every thread has its own PC register.

00:04:21.110 --> 00:04:21.830
Guard.

00:04:21.830 --> 00:04:23.840
I have a one register R1,

00:04:23.840 --> 00:04:26.285
one thread which handles to class fails.

00:04:26.285 --> 00:04:29.990
So that particular thread has-a PC register which

00:04:29.990 --> 00:04:34.800
will handle those two class execution information.

00:04:35.620 --> 00:04:40.400
Right? And the next one is native met that stack.

00:04:40.400 --> 00:04:43.970
So basically it will use to access the runtime data.

00:04:43.970 --> 00:04:45.035
Correct?

00:04:45.035 --> 00:04:48.275
Because there are times you will provide that.

00:04:48.275 --> 00:04:51.800
You'll, you'll provide the inputs to the execution of the matter.

00:04:51.800 --> 00:04:56.900
So for example, you want to provide then as an input and you'll get one more input,

00:04:56.900 --> 00:04:59.180
1 p. So I want to know what is ten plus 20.

00:04:59.180 --> 00:05:01.580
So those data has been feeder to

00:05:01.580 --> 00:05:06.650
the JVM Mandanten process so that they can get off the stack.

00:05:06.650 --> 00:05:09.095
And the metadata interfaces.

00:05:09.095 --> 00:05:11.495
So what basically the material,

00:05:11.495 --> 00:05:14.450
the interface means is that it's a time some layer

00:05:14.450 --> 00:05:19.130
between two systems are two things, right?

00:05:19.130 --> 00:05:21.350
So this will enable us to call,

00:05:21.350 --> 00:05:24.185
called by a native application.

00:05:24.185 --> 00:05:27.050
You can call your Java program from your hardware, right?

00:05:27.050 --> 00:05:31.040
Are, you can call using a programmer, you can find it.

00:05:31.040 --> 00:05:33.185
How many are RAM is available in my mission,

00:05:33.185 --> 00:05:37.160
you can use a Java program running and what kind of thread is running right now.

00:05:37.160 --> 00:05:39.500
So you can track all those information.

00:05:39.500 --> 00:05:44.135
So garbage collection, so is entwined actually.

00:05:44.135 --> 00:05:49.340
So he's the one taken care of each and every variables or memories or objects.

00:05:49.340 --> 00:05:53.945
Once it is done, it is garbage collector responsibility to destroy them

00:05:53.945 --> 00:05:59.045
and to me to clear the memory management so the memory has been cleared.

00:05:59.045 --> 00:06:03.455
So then it will be ready for they can get off other data.

00:06:03.455 --> 00:06:06.545
Okay, So this is all about the JVM.

00:06:06.545 --> 00:06:07.160
Let's meet.

00:06:07.160 --> 00:06:10.350
In the next video, we'll talk about another topic.
