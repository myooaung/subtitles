1
00:00:00,940 --> 00:00:03,330
There are many different events sources you can use in

2
00:00:03,330 --> 00:00:06,200
AWS to trigger lambda invocations.

3
00:00:06,200 --> 00:00:08,640
In this pattern, Lambda is really the brains,

4
00:00:08,640 --> 00:00:11,260
and event sources are the appendages.

5
00:00:11,260 --> 00:00:12,600
In this video,

6
00:00:12,600 --> 00:00:16,050
we're going to take a look at all the different event types you have

7
00:00:16,050 --> 00:00:19,280
available to you with serverless architecture in AWS.

8
00:00:19,280 --> 00:00:21,880
The first is AWS IOT.

9
00:00:21,880 --> 00:00:27,240
You can configure a lambda to be invoked when an IOT button is pressed.

10
00:00:27,240 --> 00:00:30,070
IOT buttons are these little things you can purchase

11
00:00:30,070 --> 00:00:32,830
from Amazon that connect to your Wi‑Fi.

12
00:00:32,830 --> 00:00:36,310
Amazon first released them as dash buttons that would

13
00:00:36,310 --> 00:00:39,140
order common household products for you.

14
00:00:39,140 --> 00:00:44,070
The AWS IOT service also allows you to configure rules that evaluate

15
00:00:44,070 --> 00:00:47,510
an IOT according to input from connected devices,

16
00:00:47,510 --> 00:00:50,860
and these can also invoke lambdas when desired.

17
00:00:50,860 --> 00:00:53,740
The next event source is API Gateway.

18
00:00:53,740 --> 00:00:57,180
This is the most straightforward way to expose your lambdas to

19
00:00:57,180 --> 00:01:00,250
be invoked in response to web‑based URLs.

20
00:01:00,250 --> 00:01:04,270
API Gateway lets you configure URL paths that invoke

21
00:01:04,270 --> 00:01:06,230
lambdas when they are accessed.

22
00:01:06,230 --> 00:01:09,950
We'll get more into API Gateway later in this module.

23
00:01:09,950 --> 00:01:14,650
Alexa is actually the event source with which I first tried out Lambda.

24
00:01:14,650 --> 00:01:17,270
Using the AWS Alexa service,

25
00:01:17,270 --> 00:01:22,540
whether triggered from an Amazon Echo device or an Amazon Smart Home device,

26
00:01:22,540 --> 00:01:25,960
you can invoke a lambda that receives the event information,

27
00:01:25,960 --> 00:01:29,620
such as what was said to the Echo device or what the

28
00:01:29,620 --> 00:01:32,150
Smart Home device was instructed to do.

29
00:01:32,150 --> 00:01:35,100
You can have a CloudFront distribution trigger a

30
00:01:35,100 --> 00:01:38,240
lambda via the Lambda@Edge service.

31
00:01:38,240 --> 00:01:42,880
There are some restrictions in place, like you can't use environment variables,

32
00:01:42,880 --> 00:01:47,340
no dead‑letter queues, and the lambda won't be in a VPC.

33
00:01:47,340 --> 00:01:52,410
Lambdas you would want invoked by CloudFront would likely be simple functions,

34
00:01:52,410 --> 00:01:57,840
potentially just returning documents from S3 or a pure function.

35
00:01:57,840 --> 00:02:01,200
Both CloudWatch Events and CloudWatch Logs can be

36
00:02:01,200 --> 00:02:03,500
event sources for invoking lambdas.

37
00:02:03,500 --> 00:02:09,020
Events triggering a lambda is a good way to set up a more complex flow

38
00:02:09,020 --> 00:02:13,030
for when metrics of AWS resources might trip alarms.

39
00:02:13,030 --> 00:02:16,660
With log sources, CloudWatch will search logs.

40
00:02:16,660 --> 00:02:20,820
And when a log is delivered that matches a preconfigured pattern,

41
00:02:20,820 --> 00:02:24,740
it will invoke the lambda and pass in the log entry.

42
00:02:24,740 --> 00:02:30,690
You can invoke lambdas based on two types of streams, DynamoDB and Kinesis.

43
00:02:30,690 --> 00:02:35,010
Both will deliver records as they're added to the streams. In Dynamo's

44
00:02:35,010 --> 00:02:39,180
case, a stream is attached to a table, and records are sent down the

45
00:02:39,180 --> 00:02:42,740
stream when they're created or updated in the table.

46
00:02:42,740 --> 00:02:46,710
The records that come into your invoked lambda could be one or a

47
00:02:46,710 --> 00:02:50,730
batch, and the delay between adding records to the stream and

48
00:02:50,730 --> 00:02:53,080
the lambda invocation is very low,

49
00:02:53,080 --> 00:02:57,740
usually only a couple of seconds. Modifications to an S3 bucket

50
00:02:57,740 --> 00:03:01,540
can be configured as a trigger to invoke a lambda function.

51
00:03:01,540 --> 00:03:03,390
When configuring the event source,

52
00:03:03,390 --> 00:03:07,330
you set up what type of action you want to listen for and can

53
00:03:07,330 --> 00:03:11,490
also set up object prefixes to restrict the invocation to

54
00:03:11,490 --> 00:03:13,490
certain folders in your bucket.

55
00:03:13,490 --> 00:03:17,600
The last two event sources are for Simple Notification Service or Simple

56
00:03:17,600 --> 00:03:22,940
Queue Service. Like the Kinesis or DynamoDB streams, these events sources

57
00:03:22,940 --> 00:03:27,570
will get records sent to them, and the lambda will be invoked as they appear.

58
00:03:27,570 --> 00:03:31,140
As you can see, there are a lot of different ways you can invoke your lambda

59
00:03:31,140 --> 00:03:35,600
functions, and each one of these events sources play a huge role when

60
00:03:35,600 --> 00:03:40,120
designing a complete serverless application. For our demo application, we're

61
00:03:40,120 --> 00:03:45,640
going to connect both API Gateway and Kinesis Stream event sources to make

62
00:03:45,640 --> 00:03:54,000
the Trash Panda Buffet game completely function. In the rest of this module, let's get started on making that happen.

