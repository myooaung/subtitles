WEBVTT
1
00:00:00.940 --> 00:00:05.840
If you ever question how much AWS is invested in serverless architecture,

2
00:00:05.840 --> 00:00:09.250
look no further than the Serverless Application Model,

3
00:00:09.250 --> 00:00:11.050
also called SAM.

4
00:00:11.050 --> 00:00:15.040
This open‑source software provides many of the pieces you need to

5
00:00:15.040 --> 00:00:18.530
create a full serverless application in AWS.

6
00:00:18.530 --> 00:00:22.500
Using a configuration tool and a command line application,

7
00:00:22.500 --> 00:00:26.150
you can define all the pieces of your serverless application,

8
00:00:26.150 --> 00:00:29.500
such as functions, event sources, and more,

9
00:00:29.500 --> 00:00:32.540
and then deploy them up to AWS.

10
00:00:32.540 --> 00:00:34.560
Before I go into detail about SAM,

11
00:00:34.560 --> 00:00:37.850
let's discuss the differences between it and the Serverless

12
00:00:37.850 --> 00:00:40.270
Framework we're using for the demo application.

13
00:00:40.270 --> 00:00:46.100
While the SAM CLI tool was in a rough place a year or 2 ago,

14
00:00:46.100 --> 00:00:50.640
SAM development has finally reached a mature and stable point.

15
00:00:50.640 --> 00:00:53.810
The team has built many features into the SAM CLI tool

16
00:00:53.810 --> 00:00:56.740
that makes deployment a smooth process.

17
00:00:56.740 --> 00:01:01.260
Since SAM is mostly just a wrapper around CloudFormation however,

18
00:01:01.260 --> 00:01:04.370
there are still many things that the Serverless

19
00:01:04.370 --> 00:01:07.480
Framework lets you do that SAM cannot.

20
00:01:07.480 --> 00:01:08.230
And really,

21
00:01:08.230 --> 00:01:10.570
that's why I chose the Serverless Framework for the

22
00:01:10.570 --> 00:01:13.130
demo application with this course.

23
00:01:13.130 --> 00:01:15.030
SAM is still very important,

24
00:01:15.030 --> 00:01:19.610
and since it appears on the AWS Developer Associate Certification exam,

25
00:01:19.610 --> 00:01:22.670
I wanted to talk through how it works.

26
00:01:22.670 --> 00:01:25.750
The core of SAM is a configuration template,

27
00:01:25.750 --> 00:01:28.630
quite similar to a CloudFormation template,

28
00:01:28.630 --> 00:01:31.100
that defines your serverless application.

29
00:01:31.100 --> 00:01:35.740
The template will actually be deployed by CloudFormation.

30
00:01:35.740 --> 00:01:39.900
So a key property of this template is the transform property.

31
00:01:39.900 --> 00:01:44.140
This tells CloudFormation that the template is written in the SAM

32
00:01:44.140 --> 00:01:48.070
syntax and instructs it to transform certain resources.

33
00:01:48.070 --> 00:01:51.930
The additional resource types available to declare in a SAM

34
00:01:51.930 --> 00:01:55.960
template as of this video are Serverless Function,

35
00:01:55.960 --> 00:01:59.410
Serverless API, and Serverless SimpleTable.

36
00:01:59.410 --> 00:02:01.320
Let's take a look at each one of these.

37
00:02:01.320 --> 00:02:05.510
A serverless function is exactly what you would think, a lambda function.

38
00:02:05.510 --> 00:02:09.750
What SAM does beyond creating a normal lambda function is to also

39
00:02:09.750 --> 00:02:14.170
create an IAM execution role and create and configure any event

40
00:02:14.170 --> 00:02:16.540
source mappings for the function.

41
00:02:16.540 --> 00:02:20.770
Here's an example SAM function resource declaration that creates a

42
00:02:20.770 --> 00:02:24.600
lambda and connects it to an API Gateway event source.

43
00:02:24.600 --> 00:02:27.490
You will need to create the event source separately from this

44
00:02:27.490 --> 00:02:30.540
declaration since this only creates the mapping.

45
00:02:30.540 --> 00:02:34.520
The only exception is in the case of an API resource.

46
00:02:34.520 --> 00:02:38.740
If there is no corresponding serverless API resource in your SAM template,

47
00:02:38.740 --> 00:02:42.210
this mapping declaration will create one for you.

48
00:02:42.210 --> 00:02:45.670
To define an API Gateway mapping specifically,

49
00:02:45.670 --> 00:02:49.640
you can use the Serverless API resource type.

50
00:02:49.640 --> 00:02:52.070
This creates an API, resources,

51
00:02:52.070 --> 00:02:56.120
and methods for you based on a Swagger configuration.

52
00:02:56.120 --> 00:02:58.370
If you've never heard of Swagger,

53
00:02:58.370 --> 00:03:01.610
it's an API documentation and design framework that can

54
00:03:01.610 --> 00:03:04.550
be used to model an API completely.

55
00:03:04.550 --> 00:03:08.350
The Serverless API resource type in a SAM template will take that

56
00:03:08.350 --> 00:03:11.990
design and create the real resources it defines.

57
00:03:11.990 --> 00:03:17.290
The final SAM‑specific resource type is Serverless SimpleTable.

58
00:03:17.290 --> 00:03:22.470
This is a basic DynamoDB table that has no secondary indexes defined.

59
00:03:22.470 --> 00:03:26.910
If you just want a Dynamo table with basic primary key retrieval,

60
00:03:26.910 --> 00:03:29.530
you can use this to set it up quickly.

61
00:03:29.530 --> 00:03:33.230
If you need to configure your table beyond what's available in SAM,

62
00:03:33.230 --> 00:03:37.540
you should just use the regular CloudFormation DynamoDB type.

63
00:03:37.540 --> 00:03:40.730
You can also define other normal CloudFormation

64
00:03:40.730 --> 00:03:42.800
resource types in your SAM template.

65
00:03:42.800 --> 00:03:45.420
When CloudFormation is doing the transform,

66
00:03:45.420 --> 00:03:48.350
it will pass over them without modification.

67
00:03:48.350 --> 00:03:50.340
Once you're SAM template is written,

68
00:03:50.340 --> 00:03:54.260
here are the steps for deploying your SAM application to AWS.

69
00:03:54.260 --> 00:03:55.150
First,

70
00:03:55.150 --> 00:03:59.910
you'll use the SAM CLI to build the project with the build command.

71
00:03:59.910 --> 00:04:03.700
This takes your code and the SAM template, and then it zips

72
00:04:03.700 --> 00:04:06.740
everything up and gets it ready to be deployed.

73
00:04:06.740 --> 00:04:12.640
You can then deploy that bundle to AWS using the SAM CLI deploy command.

74
00:04:12.640 --> 00:04:16.540
This will deploy your lambda functions up to the cloud.

75
00:04:16.540 --> 00:04:19.820
If you locally ever make a change to your code after

76
00:04:19.820 --> 00:04:21.870
that and you need to redeploy,

77
00:04:21.870 --> 00:04:26.840
you just follow the same steps from the beginning. Choosing between SAM and

78
00:04:26.840 --> 00:04:31.560
the Serverless Framework for your project will likely come down to probably

79
00:04:31.560 --> 00:04:34.050
how much serverless stuff you're actually doing.

80
00:04:34.050 --> 00:04:34.720
You know,

81
00:04:34.720 --> 00:04:37.800
if there's only a small amount, then I think that SAM would

82
00:04:37.800 --> 00:04:39.760
probably be more than enough for you.

83
00:04:39.760 --> 00:04:45.230
There's a lot less involved in the configuration, mostly because it can do

84
00:04:45.230 --> 00:04:48.860
less. But it makes it a little simpler. But if you're really going to be

85
00:04:48.860 --> 00:04:53.610
relying on a lot of different serverless architecture pieces and want to do

86
00:04:53.610 --> 00:05:01.000
something fairly complex, then I'd say that the Serverless Framework is probably going to be a better choice for you.

