WEBVTT
1
00:00:00.940 --> 00:00:04.080
AWS already handles many of the aspects of stability

2
00:00:04.080 --> 00:00:06.550
when executing your lambda functions.

3
00:00:06.550 --> 00:00:09.030
They ensure your lambda function is available,

4
00:00:09.030 --> 00:00:12.540
scaled out, and running on performant hardware.

5
00:00:12.540 --> 00:00:15.400
There's not much else you have to think about except the

6
00:00:15.400 --> 00:00:19.040
stability of the code your lambda is running.

7
00:00:19.040 --> 00:00:23.240
There are two things that I consider when thinking about lambda stability.

8
00:00:23.240 --> 00:00:26.930
The first is monitoring the lambda for states that are bad,

9
00:00:26.930 --> 00:00:30.860
such as errors, long execution time, etc.

10
00:00:30.860 --> 00:00:34.240
We will cover this in a later module on monitoring.

11
00:00:34.240 --> 00:00:37.060
The other thing is ensuring that events that come to

12
00:00:37.060 --> 00:00:39.840
the lambda are processed for sure.

13
00:00:39.840 --> 00:00:42.940
There's nothing worse than a lambda receiving an event,

14
00:00:42.940 --> 00:00:44.610
but then dropping the ball.

15
00:00:44.610 --> 00:00:47.880
Imagine database records that should be written, but aren't.

16
00:00:47.880 --> 00:00:51.180
The lack of stability in regards to event processing

17
00:00:51.180 --> 00:00:53.340
can affect your entire application.

18
00:00:53.340 --> 00:00:56.240
Monitoring can let you know when errors occur,

19
00:00:56.240 --> 00:00:59.440
but they won't help you ensure whatever event caused those

20
00:00:59.440 --> 00:01:02.440
errors will eventually be processed.

21
00:01:02.440 --> 00:01:04.500
That's where dead‑letter queues come in.

22
00:01:04.500 --> 00:01:05.480
As stated earlier,

23
00:01:05.480 --> 00:01:10.440
a dead‑letter queue is either an SNS topic or an SQS queue

24
00:01:10.440 --> 00:01:13.980
where your lambda will send any events that were unable to

25
00:01:13.980 --> 00:01:15.840
be processed by the lambda.

26
00:01:15.840 --> 00:01:18.780
For instance, if your code errors from an event,

27
00:01:18.780 --> 00:01:23.120
the lambda infrastructure will then send that event to the dead‑letter queue,

28
00:01:23.120 --> 00:01:25.030
ensuring it isn't lost.

29
00:01:25.030 --> 00:01:28.090
You can then retrieve any unprocessed events from the

30
00:01:28.090 --> 00:01:31.450
dead‑letter queue at a later time and run them back through the

31
00:01:31.450 --> 00:01:34.740
lambda once you fix the underlying issue.

32
00:01:34.740 --> 00:01:37.020
If you look in the details of one of your lambdas,

33
00:01:37.020 --> 00:01:40.940
you'll see there's an Asynchronous invocation section.

34
00:01:40.940 --> 00:01:42.570
Click Edit on this section,

35
00:01:42.570 --> 00:01:47.240
which contains information on function timeout and retry attempts.

36
00:01:47.240 --> 00:01:50.560
The DLQ, aka dead‑letter queue,

37
00:01:50.560 --> 00:01:54.340
drop‑down is where you would configure the dead‑letter queue.

38
00:01:54.340 --> 00:01:59.540
You can select either SNS or SQS and then a resource from one of them.

39
00:01:59.540 --> 00:02:02.720
Once configured, you don't need to do anything else.

40
00:02:02.720 --> 00:02:05.490
The lambda infrastructure takes it from there.

41
00:02:05.490 --> 00:02:08.830
Processing these events at a later time is up to you,

42
00:02:08.830 --> 00:02:09.290
however,

43
00:02:09.290 --> 00:02:13.610
so you'd want to ensure there's some sort of listener on the other end of these

44
00:02:13.610 --> 00:02:17.740
dead‑letter queues that is persisting the events somehow.

45
00:02:17.740 --> 00:02:20.950
Once the stability of your lambda function processing

46
00:02:20.950 --> 00:02:22.980
is insured with dead‑letter queues,

47
00:02:22.980 --> 00:02:25.580
you have a computing process that can handle

48
00:02:25.580 --> 00:02:28.280
basically any load you can throw at it.

49
00:02:28.280 --> 00:02:34.000
And speaking of that, let's take a look at performance and concurrency in the next video.

