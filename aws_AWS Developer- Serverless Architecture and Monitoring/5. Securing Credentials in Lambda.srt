1
00:00:00,940 --> 00:00:02,040
Besides permissions,

2
00:00:02,040 --> 00:00:05,840
another important security concern with Lambda is the storing

3
00:00:05,840 --> 00:00:08,080
of credentials and sensitive information.

4
00:00:08,080 --> 00:00:13,950
While IAM permissions are often enough to access most services in AWS,

5
00:00:13,950 --> 00:00:17,740
occasionally there are credentials you need to store for accessing things

6
00:00:17,740 --> 00:00:22,550
like databases or external services There are a few different approaches to

7
00:00:22,550 --> 00:00:26,240
this ranging from least secure to most.

8
00:00:26,240 --> 00:00:30,600
The first approach is to put the credentials in your application code.

9
00:00:30,600 --> 00:00:31,810
Bottom line,

10
00:00:31,810 --> 00:00:35,380
do not do this. There are plenty of better ways, and this is

11
00:00:35,380 --> 00:00:38,720
the most insecure and hardest to update.

12
00:00:38,720 --> 00:00:41,650
A better approach is to store the credentials as

13
00:00:41,650 --> 00:00:44,140
environment variables in your lambda.

14
00:00:44,140 --> 00:00:47,460
As you can see in the lambda details for one of our functions,

15
00:00:47,460 --> 00:00:50,730
that's what we're doing in our demo application.

16
00:00:50,730 --> 00:00:54,140
This makes it easier to update and more secure.

17
00:00:54,140 --> 00:00:57,140
The environment variables are encrypted at rest by

18
00:00:57,140 --> 00:01:00,060
AWS, and using IAM permissions,

19
00:01:00,060 --> 00:01:05,520
you can lock down access to your lambda configuration in the AWS console.

20
00:01:05,520 --> 00:01:09,620
The only step where these environment variables aren't encrypted is

21
00:01:09,620 --> 00:01:13,140
in transit, such as when deploying to your lambda.

22
00:01:13,140 --> 00:01:16,160
The best approach is to store these credentials in

23
00:01:16,160 --> 00:01:19,060
one of AWS's secret solutions.

24
00:01:19,060 --> 00:01:23,820
One that has been available for a while is the EC2 Systems Manager

25
00:01:23,820 --> 00:01:28,330
Parameter Store. This gives you commandâ€‘line access to set and

26
00:01:28,330 --> 00:01:31,440
retrieve secrets, such as credentials.

27
00:01:31,440 --> 00:01:34,360
Your lambda would then call the parameter store

28
00:01:34,360 --> 00:01:36,790
anytime it needs those credentials.

29
00:01:36,790 --> 00:01:39,980
This adds a little latency to your lambdas that need those

30
00:01:39,980 --> 00:01:43,640
credentials, but greatly improves security.

31
00:01:43,640 --> 00:01:47,850
A newer service that follows the same model is AWS Secrets

32
00:01:47,850 --> 00:01:51,980
Manager. With a similar process, you store secrets and then

33
00:01:51,980 --> 00:01:55,140
retrieve them in your code with the SDK.

34
00:01:55,140 --> 00:01:59,930
What Secrets Manager adds is the ability to automatically connect to

35
00:01:59,930 --> 00:02:03,840
RDS databases and rotate credentials regularly.

36
00:02:03,840 --> 00:02:07,970
This means that your credentials for the database are ultra secure,

37
00:02:07,970 --> 00:02:12,840
rotated regularly, and available anytime your lambda needs them. Reducing the

38
00:02:12,840 --> 00:02:17,190
permissions of your lambdas and securely storing credentials will ensure your

39
00:02:17,190 --> 00:02:20,840
serverless application is as secure as possible.

40
00:02:20,840 --> 00:02:21,650
In the next video,

41
00:02:21,650 --> 00:02:28,000
we're going to look at what it takes to increase the stability of your lambda functions.

