WEBVTT
1
00:00:00.940 --> 00:00:05.930
X‑Ray combines all the data sent to it into a structure it calls a trace.

2
00:00:05.930 --> 00:00:10.860
A trace is a collection of different segments that occur from a single request.

3
00:00:10.860 --> 00:00:13.550
When a request comes into your application,

4
00:00:13.550 --> 00:00:17.800
the first X‑Ray‑enabled service will generate a trace ID that will

5
00:00:17.800 --> 00:00:21.610
follow the request through our system and be used to report

6
00:00:21.610 --> 00:00:24.110
segment data back to the X‑Ray service.

7
00:00:24.110 --> 00:00:28.440
A segment in X‑Ray is a single packet of data sent to X‑Ray

8
00:00:28.440 --> 00:00:32.280
by your application or resource and contains some data points

9
00:00:32.280 --> 00:00:35.380
about any work that was done, how long it took,

10
00:00:35.380 --> 00:00:37.230
if there were errors, etc.

11
00:00:37.230 --> 00:00:42.020
All of the useful information in X‑Ray is derived from these segments.

12
00:00:42.020 --> 00:00:44.740
In addition to segments, there are also subsegments,

13
00:00:44.740 --> 00:00:49.260
which often give more granular detail about actions that occurred.

14
00:00:49.260 --> 00:00:50.180
For instance,

15
00:00:50.180 --> 00:00:53.620
an API Gateway endpoint that was hit might include a

16
00:00:53.620 --> 00:00:55.840
lambda invocation as a subsegment.

17
00:00:55.840 --> 00:00:57.470
In the same trace,

18
00:00:57.470 --> 00:01:01.270
a segment for the lambda that was invoked might show a subsegment

19
00:01:01.270 --> 00:01:04.640
for a Kinesis putRecord function that it called.

20
00:01:04.640 --> 00:01:08.180
Using these segments and subsegments can be helpful for you to

21
00:01:08.180 --> 00:01:10.810
understand how your application is functioning.

22
00:01:10.810 --> 00:01:12.910
As these segments come in,

23
00:01:12.910 --> 00:01:18.340
X‑Ray draws a service map that shows which segments connected to other segments.

24
00:01:18.340 --> 00:01:20.150
Sometimes, this isn't linear,

25
00:01:20.150 --> 00:01:23.470
and it's instead much like a graph database structure where

26
00:01:23.470 --> 00:01:26.220
segments connect to each other at different points.

27
00:01:26.220 --> 00:01:30.650
Looking at the individual traces in the dashboard will show you a more

28
00:01:30.650 --> 00:01:35.080
linear timeline of what happened when and gives you a clearer picture of

29
00:01:35.080 --> 00:01:37.940
a request lifecycle in your application.

30
00:01:37.940 --> 00:01:42.880
While most database services will provide preconfigured segment data to X‑Ray,

31
00:01:42.880 --> 00:01:46.450
you can also produce your own segment and subsegments if

32
00:01:46.450 --> 00:01:50.080
running code in lambda or on EC2 or ECS.

33
00:01:50.080 --> 00:01:51.040
For example,

34
00:01:51.040 --> 00:01:55.520
if you had a complicated sequence of code and wanted to use X‑Ray

35
00:01:55.520 --> 00:01:58.240
to monitor where it might be getting stuck,

36
00:01:58.240 --> 00:02:02.630
you could use the X‑Ray SDK to manually create segments and

37
00:02:02.630 --> 00:02:05.440
subsegments and send them on to X‑Ray.

38
00:02:05.440 --> 00:02:10.000
This could have the result of making X‑Ray even more useful as the service

39
00:02:10.000 --> 00:02:13.840
map information can sometimes seem a little generic.

40
00:02:13.840 --> 00:02:17.460
You can add annotations and metadata to your segments that would be

41
00:02:17.460 --> 00:02:22.240
application‑specific data that could help if troubleshooting an issue.

42
00:02:22.240 --> 00:02:29.000
Now enough talking about X‑Ray. Let's configure it and see it in action in the next video.

