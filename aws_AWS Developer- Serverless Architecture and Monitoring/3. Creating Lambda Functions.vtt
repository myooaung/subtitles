WEBVTT
1
00:00:00.940 --> 00:00:04.980
AWS Lambda is the compute part of a serverless application.

2
00:00:04.980 --> 00:00:10.320
When we say a lambda, this is basically the same as saying a function.

3
00:00:10.320 --> 00:00:15.550
In fact, services like Lambda are often called Functions as a Service.

4
00:00:15.550 --> 00:00:21.140
Lambda is the name of the AWS service that provides Functions as a Service.

5
00:00:21.140 --> 00:00:23.480
When architecting a serverless application,

6
00:00:23.480 --> 00:00:26.550
I often try to plan out my functions beforehand.

7
00:00:26.550 --> 00:00:28.860
There are two ways to approach this.

8
00:00:28.860 --> 00:00:33.290
One is to try to push all of your computing code into a single lambda,

9
00:00:33.290 --> 00:00:34.570
something like a monolith.

10
00:00:34.570 --> 00:00:38.870
A lot of times, this is how you would build a normal web applications.

11
00:00:38.870 --> 00:00:43.140
So, I don't think the initial thought is that wrong.

12
00:00:43.140 --> 00:00:45.750
But with Lambda, functions are cheap,

13
00:00:45.750 --> 00:00:49.570
and connecting different services in AWS to create your entire

14
00:00:49.570 --> 00:00:53.440
application is really how things ought to be built.

15
00:00:53.440 --> 00:00:55.610
So let's take a look at that approach.

16
00:00:55.610 --> 00:01:00.020
I like to separate out my functions by their logical business function.

17
00:01:00.020 --> 00:01:01.050
Think of it like this.

18
00:01:01.050 --> 00:01:07.540
In a normal API, you have actions such as getting a thing or posting a thing.

19
00:01:07.540 --> 00:01:09.670
You could have one lambda for both,

20
00:01:09.670 --> 00:01:14.340
logically isolating it due to the CRUD operations on a thing.

21
00:01:14.340 --> 00:01:15.850
If you do that, however,

22
00:01:15.850 --> 00:01:19.930
it would mean in your lambda function you would need to have logic to

23
00:01:19.930 --> 00:01:23.190
decide whether to do the getting or the posting.

24
00:01:23.190 --> 00:01:26.580
You'd need to look at the event request method to

25
00:01:26.580 --> 00:01:28.740
determine the client's intention.

26
00:01:28.740 --> 00:01:32.230
If you push that logic up to the HTTP layer,

27
00:01:32.230 --> 00:01:36.350
executing different lambdas for the GET method and the POST method,

28
00:01:36.350 --> 00:01:38.920
then not only do you have the different behavior,

29
00:01:38.920 --> 00:01:42.730
but you're essentially getting that logic for free due to the

30
00:01:42.730 --> 00:01:45.200
way you've architected your application.

31
00:01:45.200 --> 00:01:48.750
I think that's pretty cool and a very elegant solution,

32
00:01:48.750 --> 00:01:52.110
and I try to architect my functions in this way.

33
00:01:52.110 --> 00:01:55.750
If there's a logical distinction between one function and another,

34
00:01:55.750 --> 00:01:58.440
then I try to split them into multiples.

35
00:01:58.440 --> 00:02:02.050
I also approach my functions as if I was writing code,

36
00:02:02.050 --> 00:02:06.320
creating modular functions when it seems right and trying to keep

37
00:02:06.320 --> 00:02:09.340
the logic in each lambda function to a minimum.

38
00:02:09.340 --> 00:02:12.460
There are a few more scientific methods to guide you when

39
00:02:12.460 --> 00:02:15.140
your lambda functions are getting too large.

40
00:02:15.140 --> 00:02:16.930
The first is package size.

41
00:02:16.930 --> 00:02:21.460
Lambda has a hard limit of 50 MB on the upload size

42
00:02:21.460 --> 00:02:23.510
of your lambda function package.

43
00:02:23.510 --> 00:02:28.240
Unzipped, the function size limit is 250 MB.

44
00:02:28.240 --> 00:02:31.200
If you find yourself hitting either of those limits,

45
00:02:31.200 --> 00:02:35.150
you should either take a look at the dependencies you're uploading with your

46
00:02:35.150 --> 00:02:40.540
lambda or think about breaking up your function into multiples.

47
00:02:40.540 --> 00:02:45.180
Another method of analyzing lambda function scope is the execution metrics.

48
00:02:45.180 --> 00:02:47.870
In the Monitoring tab of a lambda,

49
00:02:47.870 --> 00:02:50.240
you'll be able to view a lot of different metrics

50
00:02:50.240 --> 00:02:52.280
related to your function execution.

51
00:02:52.280 --> 00:02:57.250
You can use these metrics not only to ensure everything is working correctly,

52
00:02:57.250 --> 00:03:00.460
but also to determine whether you need to refactor

53
00:03:00.460 --> 00:03:02.630
a function into many functions.

54
00:03:02.630 --> 00:03:07.420
There's no hard and fast rule around how long your function should execute.

55
00:03:07.420 --> 00:03:11.840
You'll just want to consider the user experience you're aiming for.

56
00:03:11.840 --> 00:03:14.940
Let's see what these metrics look like in action.

57
00:03:14.940 --> 00:03:16.280
If the tab is still up,

58
00:03:16.280 --> 00:03:21.430
go to the index URL for the demo app and refresh it a few times.

59
00:03:21.430 --> 00:03:26.050
This should generate enough lambda invocations for us to view metrics.

60
00:03:26.050 --> 00:03:30.290
Switch back to the AWS console and the Lambda dashboard.

61
00:03:30.290 --> 00:03:36.020
Select the dev‑index function and then scroll down to the Monitor tab.

62
00:03:36.020 --> 00:03:37.980
And when you select it,

63
00:03:37.980 --> 00:03:43.140
make sure that the Metrics tab below that is already selected.

64
00:03:43.140 --> 00:03:46.440
The graphs should have some actual data in them now.

65
00:03:46.440 --> 00:03:52.240
The Invocations graph shows how many invocations per 5‑minute interval.

66
00:03:52.240 --> 00:03:55.010
The Duration graph is a little more relevant,

67
00:03:55.010 --> 00:04:01.140
showing the min, max, and average invocation duration per 5‑minute interval.

68
00:04:01.140 --> 00:04:05.870
This is where you can get a good idea what the average invocation of your

69
00:04:05.870 --> 00:04:09.940
lambda function is and whether you need to split it up or not.

70
00:04:09.940 --> 00:04:12.210
In the case of this index function,

71
00:04:12.210 --> 00:04:15.020
it's only returning the contents of an S3 file.

72
00:04:15.020 --> 00:04:18.740
So, you can see the invocation time is quite low.

73
00:04:18.740 --> 00:04:22.090
I would say this response time is better than most

74
00:04:22.090 --> 00:04:24.140
web applications I've seen before.

75
00:04:24.140 --> 00:04:26.640
So, I'm pretty happy with it.

76
00:04:26.640 --> 00:04:28.800
Now let's look at the rest of these graphs.

77
00:04:28.800 --> 00:04:32.980
Next, we have an error count and success rate graph.

78
00:04:32.980 --> 00:04:36.520
This lets you know how many errors your lambda is throwing,

79
00:04:36.520 --> 00:04:38.730
a good metric to keep an eye on.

80
00:04:38.730 --> 00:04:42.220
The Throttles graph refers to how many times a

81
00:04:42.220 --> 00:04:45.140
function execution lambda was throttled.

82
00:04:45.140 --> 00:04:48.430
We'll talk more about this in a later video in this module.

83
00:04:48.430 --> 00:04:52.240
The IteratorAge graph is used for lambdas that

84
00:04:52.240 --> 00:04:56.050
consume DynamoDB or Kinesis Streams.

85
00:04:56.050 --> 00:05:00.310
It's basically a way to measure how long it took between records being put

86
00:05:00.310 --> 00:05:03.420
in those streams and the time your lambda was invoked.

87
00:05:03.420 --> 00:05:06.540
So it's a good measure of the speed of those streams.

88
00:05:06.540 --> 00:05:09.340
Our full app isn't working yet, but once it is,

89
00:05:09.340 --> 00:05:13.140
you'll be able to look in the processAction function and

90
00:05:13.140 --> 00:05:15.940
see this graph populated with real data.

91
00:05:15.940 --> 00:05:18.620
And that's it for the metrics in Lambda.

92
00:05:18.620 --> 00:05:25.000
In the next video, we're going to talk about security and stability for your lambda functions.

