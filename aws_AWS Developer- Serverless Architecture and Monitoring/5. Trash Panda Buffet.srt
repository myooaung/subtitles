1
00:00:00,940 --> 00:00:04,250
Every great course needs a great demo application,

2
00:00:04,250 --> 00:00:06,320
and this course is no different.

3
00:00:06,320 --> 00:00:09,660
So let me introduce you to Trash Panda Buffet,

4
00:00:09,660 --> 00:00:13,290
a completely serverless game about feeding trash pandas,

5
00:00:13,290 --> 00:00:16,570
also known as raccoons, their favorite kinds of food,

6
00:00:16,570 --> 00:00:18,740
also known as trash.

7
00:00:18,740 --> 00:00:21,280
The game itself is simple and a little random.

8
00:00:21,280 --> 00:00:24,160
You select a food for a given raccoon.

9
00:00:24,160 --> 00:00:26,760
Each raccoon has certain likes and dislikes,

10
00:00:26,760 --> 00:00:30,400
which contribute or subtract from a total score.

11
00:00:30,400 --> 00:00:34,360
After the accumulation of four tries for five trash pandas,

12
00:00:34,360 --> 00:00:36,100
you have a final high score.

13
00:00:36,100 --> 00:00:39,430
You can store your score to gain serious street

14
00:00:39,430 --> 00:00:42,060
cred in the persisted high scores.

15
00:00:42,060 --> 00:00:43,640
And that's about it.

16
00:00:43,640 --> 00:00:47,820
Under the hood, the serverless architecture looks kind of like this.

17
00:00:47,820 --> 00:00:51,840
A lambda is responsible for serving up the initial index page,

18
00:00:51,840 --> 00:00:55,460
and then assets are loaded from a CloudFront distribution.

19
00:00:55,460 --> 00:00:59,900
There are several API endpoints for things like getting a game ID,

20
00:00:59,900 --> 00:01:02,640
retrieving trash panda and food information,

21
00:01:02,640 --> 00:01:06,440
sending the user actions, and saving the scores.

22
00:01:06,440 --> 00:01:10,430
The application uses Amazon Aurora and RDS to store all

23
00:01:10,430 --> 00:01:13,930
the user data and Kinesis to communicate between lambdas,

24
00:01:13,930 --> 00:01:16,440
just for a little extra spice.

25
00:01:16,440 --> 00:01:18,790
While this is the finished application,

26
00:01:18,790 --> 00:01:26,000
you'll be responsible for implementing a lot of the pieces of this application throughout the rest of this course.

