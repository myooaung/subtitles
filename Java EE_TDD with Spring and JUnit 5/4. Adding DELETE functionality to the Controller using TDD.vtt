WEBVTT
1
00:00:00.000 --> 00:00:02.113
I mentioned earlier that we were going to add delete

2
00:00:02.113 --> 00:00:05.290
capabilities to the product controller by using a proper

3
00:00:05.290 --> 00:00:07.500
test-driven development methodology.

4
00:00:07.500 --> 00:00:09.923
This means that we're going to write test methods first,

5
00:00:09.923 --> 00:00:12.206
validate that the test methods fail,

6
00:00:12.206 --> 00:00:15.747
and then implement the delete method inside the product controller,

7
00:00:15.747 --> 00:00:19.306
using our test harness to prove that our implementation is correct.

8
00:00:19.306 --> 00:00:21.348
When implementing the delete operation,

9
00:00:21.348 --> 00:00:24.751
we expect the product controller to first see if the product exists,

10
00:00:24.751 --> 00:00:26.522
and if it does, delete it.

11
00:00:26.522 --> 00:00:29.872
There are three primary scenarios that we want to test.

12
00:00:29.872 --> 00:00:32.367
First we want to test a successful deletion.

13
00:00:32.367 --> 00:00:33.153
In this case,

14
00:00:33.153 --> 00:00:36.019
the test case will attempt to perform a deletion of a

15
00:00:36.019 --> 00:00:37.730
product that exists in the service.

16
00:00:37.730 --> 00:00:40.040
The product controller should first attempt to find

17
00:00:40.040 --> 00:00:41.862
the product with the specified ID,

18
00:00:41.862 --> 00:00:46.416
so we'll mock the product service's findById method to return a valid product.

19
00:00:46.416 --> 00:00:50.299
The product service already has a delete method that returns true if

20
00:00:50.299 --> 00:00:53.170
the deletion is successful or false if it's not.

21
00:00:53.170 --> 00:00:55.656
So we'll use the mockProduct service bean to return

22
00:00:55.656 --> 00:00:57.947
true when its delete method is called.

23
00:00:57.947 --> 00:01:02.577
Finally, we'll validate that we receive a 200 OK HTTP response code.

24
00:01:02.577 --> 00:01:02.735
Next,

25
00:01:02.735 --> 00:01:04.957
we want to handle the case when an attempt is made to

26
00:01:04.957 --> 00:01:06.849
delete a product that does not exist.

27
00:01:06.849 --> 00:01:07.784
In this case,

28
00:01:07.784 --> 00:01:12.066
we'll mock the product service's findById method to return an optional empty,

29
00:01:12.066 --> 00:01:15.827
and then we'll validate that we receive a 404 Not Found response.

30
00:01:15.827 --> 00:01:20.282
Finally, we want to test the scenario when the delete database operation fails.

31
00:01:20.282 --> 00:01:24.655
So we'll mock the product service's findById method to return a valid product,

32
00:01:24.655 --> 00:01:27.071
but we'll mock the delete method to return false,

33
00:01:27.071 --> 00:01:30.161
then we'll validate that we receive a 500 internal

34
00:01:30.161 --> 00:01:32.500
server error HTTP response code.

35
00:01:32.500 --> 00:01:34.061
Let's dive into the code.

36
00:01:34.061 --> 00:01:36.013
First we're going to implement our deletion tests,

37
00:01:36.013 --> 00:01:38.414
then we're going to validate that our tests fail.

38
00:01:38.414 --> 00:01:42.356
Next, we're going to implement the delete operation in the product controller,

39
00:01:42.356 --> 00:01:43.230
and finally,

40
00:01:43.230 --> 00:01:45.903
we're going to validate that our tests pass and that our new

41
00:01:45.903 --> 00:01:48.274
delete operation is implemented correctly.

42
00:01:48.274 --> 00:01:53.808
We have three new tests: TestProductDeleteSuccess tests a successful deletion,

43
00:01:53.808 --> 00:01:56.827
testProductDeleteNotFound tests a deletion attempt

44
00:01:56.827 --> 00:01:59.488
for a product that does not exist,

45
00:01:59.488 --> 00:02:01.788
and testProductDeleteFailure tests a deletion attempt

46
00:02:01.788 --> 00:02:03.700
that fails at the database level.

47
00:02:03.700 --> 00:02:08.056
The testProductDeleteSuccess method first creates a mockProduct that will be

48
00:02:08.056 --> 00:02:11.324
returned by the mockProduct service's findById method.

49
00:02:11.324 --> 00:02:13.573
It then configures the mockProduct service.

50
00:02:13.573 --> 00:02:16.777
It returns an Optional of our mockProduct when the product

51
00:02:16.777 --> 00:02:19.367
service's findById method is called with an ID of 1,

52
00:02:19.367 --> 00:02:22.093
and then it returns true when the product service's

53
00:02:22.093 --> 00:02:24.525
delete method is called on an ID of 1.

54
00:02:24.525 --> 00:02:27.389
Next it invokes mockMvc's perform method,

55
00:02:27.389 --> 00:02:29.845
passing in a delete RequestBuilder with a urlTemplate

56
00:02:29.845 --> 00:02:31.867
referencing the path /product/1,

57
00:02:31.867 --> 00:02:37.453
and then it validates that we receive a 200 OK HTTP response code.

58
00:02:37.453 --> 00:02:41.622
The testProductDeleteNotFound method configures the MockProduct service to

59
00:02:41.622 --> 00:02:45.391
return an Optional.empty when its findById 1 method is called,

60
00:02:45.391 --> 00:02:49.907
and then validates that we receive a 404 NotFound HTTP response code.

61
00:02:49.907 --> 00:02:50.547
Finally,

62
00:02:50.547 --> 00:02:54.403
the testProductDeleteFailure method configures the mockProduct service to

63
00:02:54.403 --> 00:02:57.236
return a mockProduct when its findById method is called,

64
00:02:57.236 --> 00:03:00.566
but then to return false when its delete method is called.

65
00:03:00.566 --> 00:03:04.464
We perform the delete request and validate that we receive a

66
00:03:04.464 --> 00:03:06.658
500 InternalServerError HTTP response code.

67
00:03:06.658 --> 00:03:12.250
Let's run these tests and see what we get.

68
00:03:12.250 --> 00:03:15.306
As you can see, the three DELETE test cases all fail.

69
00:03:15.306 --> 00:03:17.495
If we scroll down in the console output,

70
00:03:17.495 --> 00:03:21.026
we can see that instead of receiving our 200,

71
00:03:21.026 --> 00:03:23.004
404, and 500 response codes,

72
00:03:23.004 --> 00:03:27.411
we instead receive a 405 HTTP response code and a message that

73
00:03:27.411 --> 00:03:31.138
indicates that the Request method DELETE is not supported.

74
00:03:31.138 --> 00:03:34.277
Now let's implement the delete operation in the ProductController.

75
00:03:34.277 --> 00:03:37.016
The deleteProduct method is annotated with the DeleteMapping

76
00:03:37.016 --> 00:03:41.405
annotation and handles the /product/id URI path.

77
00:03:41.405 --> 00:03:44.027
It first attempts to retrieve the product with the

78
00:03:44.027 --> 00:03:45.940
specified ID from the product service.

79
00:03:45.940 --> 00:03:49.264
If it's found, then it calls the productService's delete method.

80
00:03:49.264 --> 00:03:54.303
If the delete method returns true, then it returns a 200 OK ResponseEntity.

81
00:03:54.303 --> 00:03:58.679
If it returns false, then it returns a 500 INTERNAL_SERVER_ERROR ResponseEntity.

82
00:03:58.679 --> 00:04:00.552
Finally, if the product is not found,

83
00:04:00.552 --> 00:04:03.813
then it returns a 404 NotFound ResponseEntity.

84
00:04:03.813 --> 00:04:08.704
With this method implemented, let's rerun our tests and see how they do.

85
00:04:08.704 --> 00:04:11.940
As you can see, all ProductController tests now pass.

86
00:04:11.940 --> 00:04:14.491
This is the power of test-driven development.

87
00:04:14.491 --> 00:04:17.348
We wrote tests that validate the behavior that we expect,

88
00:04:17.348 --> 00:04:26.000
and then we wrote the code to implement that behavior. If we made a mistake when writing our code, our test would've found it for us.

