1
00:00:00,000 --> 00:00:01,949
Hi everyone.

2
00:00:01,949 --> 00:00:08,497
My name is Steven Haines, and welcome to my Pluralsight course,

3
00:00:08,497 --> 00:00:11,780
Test-Driven Development with Spring and JUnit 5.

4
00:00:11,780 --> 00:00:15,877
Properly testing your code is important to the success of you applications,

5
00:00:15,877 --> 00:00:18,827
but there are so many different technologies in a Spring

6
00:00:18,827 --> 00:00:21,921
application that doing it right can seem overwhelming.

7
00:00:21,921 --> 00:00:24,428
We'll break those technologies down into small and

8
00:00:24,428 --> 00:00:28,196
understandable units as we develop unit tests for various Spring

9
00:00:28,196 --> 00:00:31,250
services that fit into an ecommerce website.

10
00:00:31,250 --> 00:00:34,696
Some of the major topics that we'll cover include testing the

11
00:00:34,696 --> 00:00:37,631
individual components that comprise a Spring web service,

12
00:00:37,631 --> 00:00:41,620
including controllers, services, and back-end repositories.

13
00:00:41,620 --> 00:00:43,648
Each component requires its own testing strategy,

14
00:00:43,648 --> 00:00:46,822
so we'll review the ins and outs of each component and

15
00:00:46,822 --> 00:00:48,577
discuss the best way to test each.

16
00:00:48,577 --> 00:00:51,098
Then we'll look at testing Spring web services that

17
00:00:51,098 --> 00:00:52,956
connect to different back ends.

18
00:00:52,956 --> 00:00:56,127
We'll test a service that connects to a SQL database by using

19
00:00:56,127 --> 00:00:59,250
DbUnit to pre-populate the database before our tests run and

20
00:00:59,250 --> 00:01:02,359
clean it up after tests complete so that we can write tests

21
00:01:02,359 --> 00:01:03,847
against a known set of good data.

22
00:01:03,847 --> 00:01:06,209
We'll test the service that connects to MongoDB,

23
00:01:06,209 --> 00:01:07,607
following a similar pattern,

24
00:01:07,607 --> 00:01:11,584
and we'll test a service that connects to a third-party API using

25
00:01:11,584 --> 00:01:14,385
WireMock to simulate the behavior of the third-party API.

26
00:01:14,385 --> 00:01:14,798
Finally,

27
00:01:14,798 --> 00:01:19,458
we'll develop a set of integration tests using JUnit to validate that

28
00:01:19,458 --> 00:01:22,357
our application works together as a complete unit.

29
00:01:22,357 --> 00:01:23,381
By the end of this course,

30
00:01:23,381 --> 00:01:27,598
you'll feel comfortable writing JUnit 5 test cases for Spring applications,

31
00:01:27,598 --> 00:01:28,334
but more importantly,

32
00:01:28,334 --> 00:01:31,646
you'll have more confidence in the quality of your Spring

33
00:01:31,646 --> 00:01:34,137
applications and how they'll behave in production.

34
00:01:34,137 --> 00:01:35,615
Before beginning this course,

35
00:01:35,615 --> 00:01:38,732
I recommend being familiar with Spring and having had some

36
00:01:38,732 --> 00:01:41,745
exposure to test-driven development in JUnit 5.

37
00:01:41,745 --> 00:01:44,576
I hope you'll join me to learn how to properly test your

38
00:01:44,576 --> 00:01:56,000
Spring applications with the Test-Driven Development with Spring and JUnit 5 course, at Pluralsight.

