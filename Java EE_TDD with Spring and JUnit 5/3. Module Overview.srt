1
00:00:00,000 --> 00:00:03,004
This course contains four modules in addition to this introduction,

2
00:00:03,004 --> 00:00:05,378
so let's review what we'll be covering.

3
00:00:05,378 --> 00:00:07,876
Globomantics is an electronic retailer that just

4
00:00:07,876 --> 00:00:09,788
built their first ecommerce site,

5
00:00:09,788 --> 00:00:13,095
but needs some help getting their Spring MVC back end production ready.

6
00:00:13,095 --> 00:00:16,025
They've built a web front end as a single-page application,

7
00:00:16,025 --> 00:00:18,561
or SPA, and three services.

8
00:00:18,561 --> 00:00:22,210
The product service provides information about the products that they sell,

9
00:00:22,210 --> 00:00:25,565
the review service maintains reviews of the products that they sell,

10
00:00:25,565 --> 00:00:26,217
and finally,

11
00:00:26,217 --> 00:00:30,014
the inventory service connects to a third-party API that manages the

12
00:00:30,014 --> 00:00:32,170
inventory for both their brick-and-mortar stores,

13
00:00:32,170 --> 00:00:33,863
as well as their online website.

14
00:00:33,863 --> 00:00:34,379
In this course,

15
00:00:34,379 --> 00:00:36,799
we're going to write test cases for the three back-end

16
00:00:36,799 --> 00:00:39,301
services that the web front end calls.

17
00:00:39,301 --> 00:00:42,011
We'll leave the front-end testing for another course.

18
00:00:42,011 --> 00:00:44,115
The first service that we'll look at is the product service.

19
00:00:44,115 --> 00:00:47,611
It's a Spring Boot microservice built using Spring 5.

20
00:00:47,611 --> 00:00:50,771
It leverages the Spring RestController and is implemented with

21
00:00:50,771 --> 00:00:54,067
autowiring and uses convention over configuration.

22
00:00:54,067 --> 00:00:58,554
As such, Spring automatically discovers the controller service and repository,

23
00:00:58,554 --> 00:01:01,467
finds the H2 driver in the class path and creates an

24
00:01:01,467 --> 00:01:04,305
embedded H2 instance and a data source for us.

25
00:01:04,305 --> 00:01:08,042
It uses the H2 database, which is traditionally used for testing purposes,

26
00:01:08,042 --> 00:01:09,804
but for simplicity's sake,

27
00:01:09,804 --> 00:01:13,297
we changed the scope of the H2 resource to allow it to be used at runtime.

28
00:01:13,297 --> 00:01:16,385
You're free to substitute MySQL or any other SQL

29
00:01:16,385 --> 00:01:18,155
database for your production needs.

30
00:01:18,155 --> 00:01:18,535
Finally,

31
00:01:18,535 --> 00:01:21,226
data persistence is accomplished using Spring's JDBC

32
00:01:21,226 --> 00:01:22,620
template and hand-written SQL.

33
00:01:22,620 --> 00:01:24,511
For the purposes of our tests,

34
00:01:24,511 --> 00:01:28,826
the difference between hand-written SQL and Spring Data with JPA is moot,

35
00:01:28,826 --> 00:01:30,845
as we'll be testing the repository,

36
00:01:30,845 --> 00:01:32,951
but I wanted to include a breadth of practiced technology,

37
00:01:32,951 --> 00:01:37,235
so I included a repository that implements persistence by hand.

38
00:01:37,235 --> 00:01:39,922
The second service that we'll be looking at is the review service.

39
00:01:39,922 --> 00:01:43,032
It's also a Spring Boot microservice built using Spring 5,

40
00:01:43,032 --> 00:01:46,135
leveraging the Spring RestController, autowiring,

41
00:01:46,135 --> 00:01:48,427
and uses convention over configuration.

42
00:01:48,427 --> 00:01:51,014
It uses MongoDB for its persistence layer,

43
00:01:51,014 --> 00:01:52,032
and for testing,

44
00:01:52,032 --> 00:01:55,437
we're using the embedded Mongo library so that we can test our data

45
00:01:55,437 --> 00:01:58,806
persistence without installing a full MongoDB instance.

46
00:01:58,806 --> 00:02:01,577
Finally, data persistence is accomplished using Spring Data.

47
00:02:01,577 --> 00:02:05,992
Spring Data is a modern persistence abstraction that allows you to define an

48
00:02:05,992 --> 00:02:08,927
interface containing the operations that you want to perform,

49
00:02:08,927 --> 00:02:12,914
and it automatically generates an implementation of that interface for you.

50
00:02:12,914 --> 00:02:15,759
When using Spring Data on top of a relational database,

51
00:02:15,759 --> 00:02:18,032
it'll generate hibernate code under the hood.

52
00:02:18,032 --> 00:02:20,593
When using Spring Data on top of MongoDB,

53
00:02:20,593 --> 00:02:24,607
it will generate persistence logic using Spring's built-in support for Mongo.

54
00:02:24,607 --> 00:02:26,626
The final service we'll review is the inventory service.

55
00:02:26,626 --> 00:02:28,320
It's a Spring Boot microservice,

56
00:02:28,320 --> 00:02:32,123
but the interesting thing about it is that it connects to an inventory manager,

57
00:02:32,123 --> 00:02:36,075
which is a third-party API through a RESTful interface.

58
00:02:36,075 --> 00:02:40,110
The inventory service makes its RESTful calls using Spring's REST template,

59
00:02:40,110 --> 00:02:43,234
which makes it easy to make RESTful calls and translate request

60
00:02:43,234 --> 00:02:46,652
and response bodies to and from Java objects.

61
00:02:46,652 --> 00:02:49,677
We'll finish the course with a module that describes how to perform

62
00:02:49,677 --> 00:02:52,632
integration tests against each service using JUnit.

63
00:02:52,632 --> 00:02:55,467
Integration testing allows us to make sure that our

64
00:02:55,467 --> 00:02:57,587
components are properly wired together by Spring,

65
00:02:57,587 --> 00:03:00,669
and tests the requests made to each service passed through the

66
00:03:00,669 --> 00:03:03,435
technology stack and return the correct results.

67
00:03:03,435 --> 00:03:04,524
To do this,

68
00:03:04,524 --> 00:03:07,435
we'll leverage Spring's MockMvc to make our requests and validate responses,

69
00:03:07,435 --> 00:03:11,257
and then we'll set up and tear down our back-end resources using the

70
00:03:11,257 --> 00:03:13,370
strategies that we'll learn in the other modules.

71
00:03:13,370 --> 00:03:14,727
At the completion of this course,

72
00:03:14,727 --> 00:03:19,129
you should feel comfortable writing unit tests with Spring 5 and JUnit 5.

73
00:03:19,129 --> 00:03:19,343
Specifically,

74
00:03:19,343 --> 00:03:22,211
you should be able to write unit tests against Spring

75
00:03:22,211 --> 00:03:25,294
services that connect to a SQL back end,

76
00:03:25,294 --> 00:03:27,167
MongoDB, and a third-party API.

77
00:03:27,167 --> 00:03:27,423
Finally,

78
00:03:27,423 --> 00:03:34,000
you should feel comfortable developing integration tests for your Spring components using JUnit 5.

