1
00:00:00,000 --> 00:00:03,777
Now let's take a look at the source code for the InventoryControllerTest.

2
00:00:03,777 --> 00:00:07,181
The InventoryControllerTest class is annotated with the

3
00:00:07,181 --> 00:00:11,928
ExtendWith SpringExtension annotation, the SpringBootTest annotation,

4
00:00:11,928 --> 00:00:14,966
and the AutoConfigureMockMvc annotation.

5
00:00:14,966 --> 00:00:18,316
The corresponding MockMvc instance is autowired into the class,

6
00:00:18,316 --> 00:00:23,108
and we create a mock InventoryService using the MockBean annotation.

7
00:00:23,108 --> 00:00:27,915
There are three test cases: TestGetInventoryByIdSuccess,

8
00:00:27,915 --> 00:00:32,801
testGetInventoryByIdNotFound, and testCreatePurchaseRecord.

9
00:00:32,801 --> 00:00:37,742
The testGetInventoryByIdSuccess method creates a mock InventoryRecord,

10
00:00:37,742 --> 00:00:40,229
and configures the mock service's getInventoryRecord method to

11
00:00:40,229 --> 00:00:43,716
return it when it's invoked for productId 1.

12
00:00:43,716 --> 00:00:47,082
It uses mockMvc to perform a GET request to /inventory/1,

13
00:00:47,082 --> 00:00:53,173
and then verifies that it returns a 200 OK HTTP response code,

14
00:00:53,173 --> 00:00:57,177
the correct LOCATION header, and the correct values in the JSON payload.

15
00:00:57,177 --> 00:01:00,659
The testGetInventoryByIdNotFound method does the same thing,

16
00:01:00,659 --> 00:01:04,497
but configures the mocked service to return Optional.empty when its

17
00:01:04,497 --> 00:01:07,484
getInventoryRecord method is called for productId 2.

18
00:01:07,484 --> 00:01:11,295
It uses MockMvc to perform a GET request against /inventory/2,

19
00:01:11,295 --> 00:01:15,761
and validates that returns a 404 Not Found HTTP response.

20
00:01:15,761 --> 00:01:16,246
Finally,

21
00:01:16,246 --> 00:01:19,892
the testCreatePurchase method creates a mock InventoryRecord object and

22
00:01:19,892 --> 00:01:23,834
configures the mock inventory service to return it when its purchaseProduct

23
00:01:23,834 --> 00:01:27,424
method is invoked on productid 1 with a quantity of 5.

24
00:01:27,424 --> 00:01:32,873
It uses MockMvc to perform a post request to /inventory/purchaseRecord with a

25
00:01:32,873 --> 00:01:37,627
JSON content type and a body that is the JSON representation of a new

26
00:01:37,627 --> 00:01:40,792
PurchaseRecord for product ID 1 with a quantity of 5.

27
00:01:40,792 --> 00:01:44,852
Finally, it validates that the post returns a 200 OK HTTP response,

28
00:01:44,852 --> 00:01:48,827
verifies the LOCATION header, and the values in the JSON payload.

29
00:01:48,827 --> 00:01:55,000
This is our third time through a controller test, so at this point, you should feel pretty comfortable with this test code.

