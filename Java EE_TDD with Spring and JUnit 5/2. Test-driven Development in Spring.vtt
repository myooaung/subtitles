WEBVTT
1
00:00:00.000 --> 00:00:02.954
Now let's turn our attention to writing test cases in Spring and

2
00:00:02.954 --> 00:00:05.727
review the support that Spring provides for testing the various

3
00:00:05.727 --> 00:00:08.415
components of a Spring Boot web service.

4
00:00:08.415 --> 00:00:10.578
The examples in this course all use Spring Boot,

5
00:00:10.578 --> 00:00:14.415
which is the modern way to build Spring applications in Spring 5,

6
00:00:14.415 --> 00:00:17.666
and Spring provides robust support for writing test cases.

7
00:00:17.666 --> 00:00:20.107
First it provides the SpringBootTest annotation,

8
00:00:20.107 --> 00:00:22.684
which, when combined with the SpringExtension annotation,

9
00:00:22.684 --> 00:00:26.372
loads your full application context into your tests and manages

10
00:00:26.372 --> 00:00:29.681
that Spring application context as your tests run.

11
00:00:29.681 --> 00:00:34.036
Next, one of the challenges in testing web services is testing your controller.

12
00:00:34.036 --> 00:00:36.748
You can certainly test your controller as a plain old Java class,

13
00:00:36.748 --> 00:00:40.695
but the role of a controller is to translate web requests into web responses,

14
00:00:40.695 --> 00:00:44.963
so it makes sense to test your controller using a web request paradigm.

15
00:00:44.963 --> 00:00:48.835
Spring's MockMvc class provides robust support for testing your controller

16
00:00:48.835 --> 00:00:52.285
using a web request and validating the HTTP response,

17
00:00:52.285 --> 00:00:54.846
including the response code, HTTP headers,

18
00:00:54.846 --> 00:00:57.958
and validating the contents of your response body.

19
00:00:57.958 --> 00:01:02.218
This course dives deep into MockMvc and not only explains how to use it,

20
00:01:02.218 --> 00:01:05.632
but also walks through its various interfaces and classes so that

21
00:01:05.632 --> 00:01:07.582
you'll understand how to use it effectively.

22
00:01:07.582 --> 00:01:07.989
Finally,

23
00:01:07.989 --> 00:01:12.170
Spring provides tight integration with Mockito through its MockBean annotation.

24
00:01:12.170 --> 00:01:15.436
The MockBean annotation allows you to define Mock Spring-managed beans

25
00:01:15.436 --> 00:01:19.707
will get autowired into your application context by simply defining it

26
00:01:19.707 --> 00:01:21.679
in your test class with this annotation,

27
00:01:21.679 --> 00:01:23.835
and then configuring its behavior.

28
00:01:23.835 --> 00:01:25.762
In addition to Spring's built-in support for JUnit,

29
00:01:25.762 --> 00:01:30.388
we'll employ a set of third-party extensions for managing back-end resources.

30
00:01:30.388 --> 00:01:30.711
First,

31
00:01:30.711 --> 00:01:33.293
we'll use DbUnit to pre-populate a SQL database

32
00:01:33.293 --> 00:01:35.449
from a YAML file before tests run,

33
00:01:35.449 --> 00:01:37.784
and then clean up the database when the tests complete.

34
00:01:37.784 --> 00:01:40.992
This allows us to write test cases against a repository

35
00:01:40.992 --> 00:01:43.197
class using a known set of good data.

36
00:01:43.197 --> 00:01:47.149
Next, we'll build a custom extension to do something similar for MongoDB,

37
00:01:47.149 --> 00:01:51.418
namely, pre-populate a MongoDB collection from a JSON file before a test run,

38
00:01:51.418 --> 00:01:54.225
and then drop the collection when the test completes.

39
00:01:54.225 --> 00:01:58.301
Finally, we'll use WireMock to simulate responses from a third-part API.

40
00:01:58.301 --> 00:02:01.850
We'll update our service's properties file to redirect it to an embedded

41
00:02:01.850 --> 00:02:05.627
WireMock server and configure the WireMock server to return a known set

42
00:02:05.627 --> 00:02:07.538
of responses for various web service calls.

43
00:02:07.538 --> 00:02:08.871
As I said earlier,

44
00:02:08.871 --> 00:02:11.457
this course assumes that you have an understanding of test-driven

45
00:02:11.457 --> 00:02:13.923
development and have written JUnit 5 test cases,

46
00:02:13.923 --> 00:02:17.447
but if it's new to you, don't worry; throughout the modules in this course,

47
00:02:17.447 --> 00:02:20.489
we'll walk through how to write JUnit 5 test cases extensively,

48
00:02:20.489 --> 00:02:24.083
and the next module demonstrates how to add a test case following

49
00:02:24.083 --> 00:02:26.685
a proper test-driven development methodology.

50
00:02:26.685 --> 00:02:29.801
The modules in this course have pre-built Spring Boot applications,

51
00:02:29.801 --> 00:02:32.579
so let's walk through setting up a new Spring Boot

52
00:02:32.579 --> 00:02:35.293
application using the start.spring .io website,

53
00:02:35.293 --> 00:02:39.293
and then review how to add JUnit 5 support to a project.

54
00:02:39.293 --> 00:02:43.241
Navigate to start.spring .io to access the Spring Initializr.

55
00:02:43.241 --> 00:02:46.790
The Spring Initializr allows us to set up a new Spring Boot project

56
00:02:46.790 --> 00:02:49.833
with whatever dependencies our application requires.

57
00:02:49.833 --> 00:02:52.984
We can choose to use Maven or Gradle as our build tool,

58
00:02:52.984 --> 00:02:55.580
Java, Kotlin, or Groovy as our programming language,

59
00:02:55.580 --> 00:02:59.586
and we can specify the version of Spring Boot that we want to use.

60
00:02:59.586 --> 00:03:01.605
For this example, we're going to use Maven,

61
00:03:01.605 --> 00:03:04.309
Java, and the latest version of Spring Boot,

62
00:03:04.309 --> 00:03:07.065
which is 2.1 .1 as of this recording.

63
00:03:07.065 --> 00:03:09.291
Now enter a Group name for your project,

64
00:03:09.291 --> 00:03:12.317
such as com.globomantics, and an artifact name,

65
00:03:12.317 --> 00:03:13.823
such as exampleservice.

66
00:03:13.823 --> 00:03:17.123
Click on the Switch to full version link to show all of the

67
00:03:17.123 --> 00:03:18.780
dependencies that we can choose from.

68
00:03:18.780 --> 00:03:19.903
For this example,

69
00:03:19.903 --> 00:03:22.721
we're only going to select the web dependency in the Web

70
00:03:22.721 --> 00:03:25.836
section to include Spring MVC and Tomcat.

71
00:03:25.836 --> 00:03:31.002
For the next module, we'll also include the H2 database and JBDC dependencies,

72
00:03:31.002 --> 00:03:32.040
and for the following module,

73
00:03:32.040 --> 00:03:35.964
we'll include the MongoDB and Embedded MongoDB dependencies.

74
00:03:35.964 --> 00:03:39.998
Scroll back to the top of the page and click on the Generate Project button.

75
00:03:39.998 --> 00:03:43.418
The Spring Initializr will generate a zip file for you that has a

76
00:03:43.418 --> 00:03:46.410
preconfigured Maven POM file with all of our dependencies.

77
00:03:46.410 --> 00:03:50.589
Download this file, decompress it, and open it in your favorite IDE.

78
00:03:50.589 --> 00:03:53.751
The Maven POM file that the Spring Initializr generated for us

79
00:03:53.751 --> 00:03:56.998
includes two dependencies: spring-boot-starter-web,

80
00:03:56.998 --> 00:04:01.089
which brings in Spring MVC and Tomcat, and spring-boot-starter-test,

81
00:04:01.089 --> 00:04:04.397
which brings in Spring's testing code, JUnit 4.12,

82
00:04:04.397 --> 00:04:07.791
Mockito, and Hamcrest, among other dependencies.

83
00:04:07.791 --> 00:04:10.370
In order to use JUnit 5 in our project,

84
00:04:10.370 --> 00:04:14.977
we need to include the following additional dependencies: junit-jupiter-api,

85
00:04:14.977 --> 00:04:19.007
which is used for writing JUnit 5 test cases and extensions,

86
00:04:19.007 --> 00:04:20.018
junit-jupiter-engine,

87
00:04:20.018 --> 00:04:22.754
which is JUnit's test engine implementation that we'll need

88
00:04:22.754 --> 00:04:25.280
when we run our test from a Maven build,

89
00:04:25.280 --> 00:04:26.594
and junit-jupiter-params,

90
00:04:26.594 --> 00:04:30.521
which provides support for parameterized tests if you choose to use them.

91
00:04:30.521 --> 00:04:35.000
With this set of dependencies, you'll be ready to start writing JUnit 5 test cases.

