1
00:00:01,140 --> 00:00:02,790
[Autogenerated] Hi, this is Greg Golightly.

2
00:00:02,790 --> 00:00:08,040
And welcome to managing keys and certificates.

3
00:00:08,040 --> 00:00:11,540
We're going to take a look at three main services offered by

4
00:00:11,540 --> 00:00:14,580
A W S to manage keys and certificates.

5
00:00:14,580 --> 00:00:19,980
First A W s Key Management Service or Kms Next,

6
00:00:19,980 --> 00:00:26,640
iCloud, HSM and finally, Amazon Certificate Manager or a C M.

7
00:00:26,640 --> 00:00:30,250
In order to encrypt data, you need an encryption key.

8
00:00:30,250 --> 00:00:33,880
That key needs to be properly formed and unique so that the

9
00:00:33,880 --> 00:00:38,150
resulting encryption is strong and it needs to be managed in a

10
00:00:38,150 --> 00:00:41,440
secure way with controlled access.

11
00:00:41,440 --> 00:00:44,080
Storing the encryption key in the database where your

12
00:00:44,080 --> 00:00:47,090
encrypting the data or on the application server,

13
00:00:47,090 --> 00:00:51,040
where your encrypting data is not a secure location.

14
00:00:51,040 --> 00:00:53,730
If an attacker gains access to the database or

15
00:00:53,730 --> 00:00:56,160
server and you've left the key there,

16
00:00:56,160 --> 00:00:59,640
then the encryption hasn't really provided you any benefits.

17
00:00:59,640 --> 00:01:02,430
The key needs to be available when you need it,

18
00:01:02,430 --> 00:01:04,090
depending on the nature of the data,

19
00:01:04,090 --> 00:01:07,340
your encrypting and how your application uses it.

20
00:01:07,340 --> 00:01:11,490
A high volume application could be making hundreds or thousands of

21
00:01:11,490 --> 00:01:15,020
requests to decrypt the data in a period of time.

22
00:01:15,020 --> 00:01:19,700
If the key isn't available, then the application must wait to get the data,

23
00:01:19,700 --> 00:01:21,340
the key must be durable.

24
00:01:21,340 --> 00:01:25,970
Losing the key means losing all of the data that is encrypted with that key.

25
00:01:25,970 --> 00:01:26,830
Finally,

26
00:01:26,830 --> 00:01:30,150
you may have different compliance requirements that dictate

27
00:01:30,150 --> 00:01:32,780
certain standards for managing your keys,

28
00:01:32,780 --> 00:01:36,140
and you may need to audit the use of your keys.

29
00:01:36,140 --> 00:01:39,770
Amazon Key Management Service, or Kms,

30
00:01:39,770 --> 00:01:44,060
is a managed service that provides you centralized control over the

31
00:01:44,060 --> 00:01:47,840
lifecycle and permissions of your encryption keys.

32
00:01:47,840 --> 00:01:53,620
K M s uses hardware security modules or HS EMS that meet many industry

33
00:01:53,620 --> 00:01:57,000
standards for secure key generation and storage.

34
00:01:57,000 --> 00:02:01,140
You can control which users have access to administer each key

35
00:02:01,140 --> 00:02:04,540
and which users have access to use those keys,

36
00:02:04,540 --> 00:02:09,850
you can also enable automatic yearly rotation of master keys and kms will

37
00:02:09,850 --> 00:02:13,540
automatically re encrypt previously encrypted data.

38
00:02:13,540 --> 00:02:15,460
As a managed service,

39
00:02:15,460 --> 00:02:22,140
Kms dynamically scales to meet your demand and is extremely durable 11 nines

40
00:02:22,140 --> 00:02:26,780
and is integrated with many AWS services for ease of use,

41
00:02:26,780 --> 00:02:30,570
including CloudTrail so that you can audit who used what

42
00:02:30,570 --> 00:02:34,340
keys when and where they were used.

43
00:02:34,340 --> 00:02:41,340
Because keys are stored in a secure hardware device, Kms is a regional service.

44
00:02:41,340 --> 00:02:44,830
Keys you generate will only be available in the region.

45
00:02:44,830 --> 00:02:50,340
You generated them and you cannot export keys from kms.

46
00:02:50,340 --> 00:02:50,550
K.

47
00:02:50,550 --> 00:02:53,810
M s is also a multi tenant service,

48
00:02:53,810 --> 00:02:57,770
meaning AWS partitions a single hardware security

49
00:02:57,770 --> 00:03:01,240
module for use by multiple customers.

50
00:03:01,240 --> 00:03:04,290
If your application requires single tendency,

51
00:03:04,290 --> 00:03:08,260
then you'll need to look into cloudhsm, which we'll talk about a little later.

52
00:03:08,260 --> 00:03:13,260
In this module, when you generate a master key in kms,

53
00:03:13,260 --> 00:03:19,040
you can import your own key or have kms generated for you.

54
00:03:19,040 --> 00:03:21,170
You'll then decide which I am.

55
00:03:21,170 --> 00:03:26,440
Users and rolls can use the key and which can administer the key.

56
00:03:26,440 --> 00:03:30,780
Integrated AWS services generate a data encryption key

57
00:03:30,780 --> 00:03:33,150
to encrypt the data in the service,

58
00:03:33,150 --> 00:03:37,310
Kms uses envelope encryption to encrypt the data

59
00:03:37,310 --> 00:03:40,190
encryption key with a master key from K.

60
00:03:40,190 --> 00:03:41,340
M s.

61
00:03:41,340 --> 00:03:46,160
You can choose to let AWS manage the customer Master key used to

62
00:03:46,160 --> 00:03:54,000
encrypt the data encryption key for the service. Or you can manage the C m kay used for that envelope encryption

