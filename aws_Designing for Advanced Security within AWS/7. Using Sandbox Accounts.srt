1
00:00:01,020 --> 00:00:04,680
[Autogenerated] an AWS account is one of the strongest physical and

2
00:00:04,680 --> 00:00:08,390
logical perimeters you can have around your resource is.

3
00:00:08,390 --> 00:00:12,130
You may have felt hesitation creating sandbox accounts in the past,

4
00:00:12,130 --> 00:00:15,730
because instead of creating a member account as part of an AWS

5
00:00:15,730 --> 00:00:18,640
organization with a single payer account,

6
00:00:18,640 --> 00:00:21,080
you were spinning up in entirely separate account,

7
00:00:21,080 --> 00:00:25,940
complete with billing information and full access to everything as a root user.

8
00:00:25,940 --> 00:00:30,660
Creating member accounts in your AWS organization is a much faster and more

9
00:00:30,660 --> 00:00:35,340
secure way to create temporary disposable sandbox accounts.

10
00:00:35,340 --> 00:00:42,240
Some advantages include isolation, innovation, accountability and oversight.

11
00:00:42,240 --> 00:00:44,160
First isolation.

12
00:00:44,160 --> 00:00:47,700
If a developer or other team member is in their own account,

13
00:00:47,700 --> 00:00:51,770
they're not going to accidentally delete production or other resource is that

14
00:00:51,770 --> 00:00:56,640
another person or team is working on second innovation.

15
00:00:56,640 --> 00:00:59,210
When you don't have to worry about messing something up,

16
00:00:59,210 --> 00:01:01,090
your more likely to experiment,

17
00:01:01,090 --> 00:01:04,750
make mistakes and quickly iterate to solve a problem.

18
00:01:04,750 --> 00:01:08,340
This type of exploration is highly effective because you can

19
00:01:08,340 --> 00:01:11,840
actually observe things working or not working.

20
00:01:11,840 --> 00:01:13,940
Third accountability.

21
00:01:13,940 --> 00:01:17,720
If only one user has access to an account and they leave a bunch of

22
00:01:17,720 --> 00:01:21,100
services running over the weekend that didn't need to run.

23
00:01:21,100 --> 00:01:24,380
There's a pretty clear path to the responsible party.

24
00:01:24,380 --> 00:01:28,030
There's no question about who is using the resource is or who to

25
00:01:28,030 --> 00:01:32,070
ask if there are questions about account activity or adjustments

26
00:01:32,070 --> 00:01:34,200
that need to be made regularly.

27
00:01:34,200 --> 00:01:39,500
Deleting and creating sandbox accounts helps eliminate zombie resource is and

28
00:01:39,500 --> 00:01:44,130
can encourage more thoughtful cloud spend when each user sees the breakdown of

29
00:01:44,130 --> 00:01:48,240
costs associated with their sandbox accounts.

30
00:01:48,240 --> 00:01:50,340
Fourth oversight.

31
00:01:50,340 --> 00:01:52,400
When you create a sandbox account,

32
00:01:52,400 --> 00:01:56,910
you can utilize service control policies to limit available actions in the

33
00:01:56,910 --> 00:02:01,720
account to what the user will actually be working on and ensure any

34
00:02:01,720 --> 00:02:04,800
security or compliance measures used in the account.

35
00:02:04,800 --> 00:02:06,540
Stay in place.

36
00:02:06,540 --> 00:02:09,970
You can set a budget to alert at a low threshold to make

37
00:02:09,970 --> 00:02:12,250
sure there are no unexpected costs,

38
00:02:12,250 --> 00:02:15,910
and you can create a role to give a user access to

39
00:02:15,910 --> 00:02:18,480
their sandbox account and time box.

40
00:02:18,480 --> 00:02:21,440
How long they have access to that role.

41
00:02:21,440 --> 00:02:25,940
This can help you regularly delete sandbox accounts and create new ones to

42
00:02:25,940 --> 00:02:30,540
ensure resource is allocated are relevant and necessary.

43
00:02:30,540 --> 00:02:33,910
Just as Cloud computing has given us a much more fluid view

44
00:02:33,910 --> 00:02:37,090
of resource is compared to buying and provisioning our own

45
00:02:37,090 --> 00:02:38,710
hardware in a data center.

46
00:02:38,710 --> 00:02:42,940
Cloud accounts could be just as fluid.

47
00:02:42,940 --> 00:02:47,740
Now you can secure your root user and other users in your master account

48
00:02:47,740 --> 00:02:51,390
and use a variety of items to manage your I am users,

49
00:02:51,390 --> 00:02:56,840
including policies, multi factor authentication and permissions boundary.

50
00:02:56,840 --> 00:03:00,910
You can also add an external IDE to further secure your roles,

51
00:03:00,910 --> 00:03:03,600
and you can create sandbox accounts in your A.

52
00:03:03,600 --> 00:03:07,490
W s organization for greater isolation, innovation,

53
00:03:07,490 --> 00:03:12,540
accountability and oversight of your AWS resources.

54
00:03:12,540 --> 00:03:13,240
Next,

55
00:03:13,240 --> 00:03:15,610
we're going to talk about managing keys and

56
00:03:15,610 --> 00:03:24,000
certificates using AWS Key management Service, Cloudhsm and Amazon Certificate manager.

