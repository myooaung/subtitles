WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.130
already.

00:00:01.130 --> 00:00:02.330
And welcome to this.

00:00:02.330 --> 00:00:02.970
Ah,

00:00:02.970 --> 00:00:08.040
demonstration on invoking transactions and running quarries on our fabric network.

00:00:08.040 --> 00:00:09.370
So in the previous lesson,

00:00:09.370 --> 00:00:12.400
what we did is where we installed our chain code.

00:00:12.400 --> 00:00:13.060
We Instead,

00:00:13.060 --> 00:00:16.940
she ate our chain court and we confirmed it through the hyper ledger Explorer.

00:00:16.940 --> 00:00:22.160
So now we're going to run and execute some transactions and quarries within our high

00:00:22.160 --> 00:00:28.020
pleasure fabric and also monitor them in the Explorer to see how it's reflected when we are

00:00:28.020 --> 00:00:32.050
monitoring our high pressure fabric network in terms of administration.

00:00:32.050 --> 00:00:33.910
So we're going.

00:00:33.910 --> 00:00:38.050
What we're going to do is use the appear chain called Involved command from the command

00:00:38.050 --> 00:00:39.150
line interface.

00:00:39.150 --> 00:00:42.580
And if you remember when we were in,

00:00:42.580 --> 00:00:43.260
for instance,

00:00:43.260 --> 00:00:44.710
she ating the chain code,

00:00:44.710 --> 00:00:49.810
We specify the order that will order the transaction and then in encryption that we're

00:00:49.810 --> 00:00:55.050
going to uses TLS using that certificate file ordered order underscore C eight.

00:00:55.050 --> 00:01:01.290
Now we're gonna invoke his transaction on the Public Channel on the application that will

00:01:01.290 --> 00:01:04.050
execute is my d app.

00:01:04.050 --> 00:01:05.480
After that,

00:01:05.480 --> 00:01:11.220
I want to specify the details of this transaction by using the dash C flag on the first of

00:01:11.220 --> 00:01:18.610
the arguments that want to specify is a create car method next as the car Zahra one,

00:01:18.610 --> 00:01:21.850
which is going to the unique identify for this car.

00:01:21.850 --> 00:01:25.400
And since it is a unique identifier,

00:01:25.400 --> 00:01:29.060
we're going to specify this as a key for our state database.

00:01:29.060 --> 00:01:33.350
And what remains is basically the rest of the details of the car,

00:01:33.350 --> 00:01:33.820
such as,

00:01:33.820 --> 00:01:34.050
you know,

00:01:34.050 --> 00:01:35.820
what type of make it is the model,

00:01:35.820 --> 00:01:38.040
the color and most importantly,

00:01:38.040 --> 00:01:40.380
who is the owner of the specific car.

00:01:40.380 --> 00:01:42.400
Now,

00:01:42.400 --> 00:01:45.760
once we execute this transaction and it's been done successfully,

00:01:45.760 --> 00:01:51.210
this is a transaction that updated the state off our Blockchain network and AIM New block

00:01:51.210 --> 00:01:52.480
should have been added.

00:01:52.480 --> 00:01:59.440
So now we're gonna run a command to query this the legis state to ensure that it was

00:01:59.440 --> 00:02:00.190
actually done.

00:02:00.190 --> 00:02:04.120
So let's keep in mind that when you run a query,

00:02:04.120 --> 00:02:05.780
it's not really running a transactions.

00:02:05.780 --> 00:02:07.080
When you're running a query.

00:02:07.080 --> 00:02:11.160
No new blocks should be added to the blotchy network,

00:02:11.160 --> 00:02:15.610
and the state of the Blockchain network is not going to be updated when you're simply

00:02:15.610 --> 00:02:16.350
quarrying it.

00:02:16.350 --> 00:02:20.850
It's only updated when you're changing it or adding to the Blockchain network,

00:02:20.850 --> 00:02:28.900
and since we're running quarries is going to run the pH in court Quarry Command rather than

00:02:28.900 --> 00:02:29.870
the invoke command.

00:02:29.870 --> 00:02:34.110
Because invoke is what's going to update the Blockchain network on the quarry just keeps

00:02:34.110 --> 00:02:35.250
the state the same.

00:02:35.250 --> 00:02:38.150
Everything else in terms of the court,

00:02:38.150 --> 00:02:39.550
we're going to keep it the same.

00:02:39.550 --> 00:02:41.250
And then,

00:02:41.250 --> 00:02:41.810
as you can see,

00:02:41.810 --> 00:02:44.070
the results include the details of the car,

00:02:44.070 --> 00:02:48.700
which we just entered in before in terms of the Make model and the owner.

00:02:48.700 --> 00:02:52.260
So now we have our first transaction done.

00:02:52.260 --> 00:02:56.310
We've added a vehicle into our car registry database,

00:02:56.310 --> 00:02:58.350
and we've assigned an owner to it.

00:02:58.350 --> 00:03:01.370
So let's say if somebody comes in and they buy that vehicle,

00:03:01.370 --> 00:03:04.810
we want to go ahead and change the ownership off that car.

00:03:04.810 --> 00:03:11.150
So let's run and other invoked transaction where we change the car owner transaction.

00:03:11.150 --> 00:03:12.490
Now,

00:03:12.490 --> 00:03:13.400
unlike the quarry,

00:03:13.400 --> 00:03:14.660
this is going toe up late,

00:03:14.660 --> 00:03:15.670
the lit update,

00:03:15.670 --> 00:03:17.950
the Blockchain and the state off our database,

00:03:17.950 --> 00:03:21.350
and then or do that,

00:03:21.350 --> 00:03:24.950
we're going to call the Invoke Jane called method.

00:03:24.950 --> 00:03:27.700
We're going to specify the order Nord.

00:03:27.700 --> 00:03:32.170
We're going to specify the TLS and obviously the main identify,

00:03:32.170 --> 00:03:33.160
which is the cars.

00:03:33.160 --> 00:03:37.510
They're a one room or to change the owner of that to somebody else.

00:03:37.510 --> 00:03:39.790
I want to do that now.

00:03:39.790 --> 00:03:40.550
It's had successful,

00:03:40.550 --> 00:03:42.130
but we want to just verify us.

00:03:42.130 --> 00:03:46.550
We're gonna run another query to check whether the owner of the car as indeed been changed

00:03:46.550 --> 00:03:46.550
.

00:03:46.550 --> 00:03:48.950
And then we can see that finally,

00:03:48.950 --> 00:03:50.950
it indeed has been changed.

00:03:50.950 --> 00:03:53.760
Tonight belongs to another person.

00:03:53.760 --> 00:04:01.050
So now what we've done is we've rent to transactions and we've ran to separate Cory's.

00:04:01.050 --> 00:04:04.970
So let's see how that updated the status off our Blockchain network.

00:04:04.970 --> 00:04:09.720
If we navigate back into our hyper ledger explorer now,

00:04:09.720 --> 00:04:10.580
if you don't have it open,

00:04:10.580 --> 00:04:13.990
you guys can again go ahead and open it up through the cloud formations deck.

00:04:13.990 --> 00:04:16.270
If you already have it open from the periods lesson,

00:04:16.270 --> 00:04:17.670
let's click on Refresh,

00:04:17.670 --> 00:04:19.140
and it will refresh them,

00:04:19.140 --> 00:04:21.080
not the number off blocks.

00:04:21.080 --> 00:04:22.110
Before,

00:04:22.110 --> 00:04:27.650
we had four blocks and now is against NC.

00:04:27.650 --> 00:04:29.090
We have six blocks,

00:04:29.090 --> 00:04:35.480
so two blocks have been added because we conducted two different invoke statements and

00:04:35.480 --> 00:04:38.460
remember like I mentioned queries do not add blocks.

00:04:38.460 --> 00:04:40.720
Even though we ran four separate statements on Lee,

00:04:40.720 --> 00:04:42.060
two blocks have been added.

00:04:42.060 --> 00:04:48.340
That's because we only issued to invoke statements which is what updates the state off our

00:04:48.340 --> 00:04:50.480
Blockchain or state off our ledger.

00:04:50.480 --> 00:04:55.510
If you go ahead and going over to the blocks that we can see that the total that the total

00:04:55.510 --> 00:04:56.870
number we have is six,

00:04:56.870 --> 00:05:02.850
and the transaction's basically show us the total number of transactions that we have.

00:05:02.850 --> 00:05:05.910
Let's go ahead and just run another credit transactions.

00:05:05.910 --> 00:05:08.490
So now we have one car in our database.

00:05:08.490 --> 00:05:13.370
Let's go ahead and create a new car and this identify unique identify a logically will just

00:05:13.370 --> 00:05:17.560
name this car zero to and add this into our database.

00:05:17.560 --> 00:05:18.780
Run in the Invoke Command.

00:05:18.780 --> 00:05:21.140
Once is added successfully,

00:05:21.140 --> 00:05:27.820
let's go ahead and run that same quarry again to get the details off the second car and

00:05:27.820 --> 00:05:29.360
just like we did for the first car,

00:05:29.360 --> 00:05:32.260
let's go ahead and change the owner of the second car.

00:05:32.260 --> 00:05:35.250
Also now,

00:05:35.250 --> 00:05:35.990
once we do that,

00:05:35.990 --> 00:05:39.580
let's to go ahead and go back into our hyper Legend Explorer browser.

00:05:39.580 --> 00:05:41.690
And if you click on Refresh,

00:05:41.690 --> 00:05:48.450
you guys can see that additional blocks and transactions have been added.

00:05:48.450 --> 00:05:50.840
So there you have it.

00:05:50.840 --> 00:05:57.200
This is basically a very simple Blockchain network that we created and were able to monitor

00:05:57.200 --> 00:06:00.780
through the hyper ledger network in the Hypo the Temple.

00:06:00.780 --> 00:06:02.480
It has been provided by AWS,

00:06:02.480 --> 00:06:04.940
and the main thing about this is the chain code,

00:06:04.940 --> 00:06:08.020
which again we created a very simple chan cordis in Golan,

00:06:08.020 --> 00:06:10.300
which is basically a car posit Ori system.

00:06:10.300 --> 00:06:12.570
But you are able to change.

00:06:12.570 --> 00:06:17.470
And instance she ate any type of chain called that you want in terms of what type of

00:06:17.470 --> 00:06:22.140
transactions that you guys want to do or what type of network or application that you guys

00:06:22.140 --> 00:06:22.970
want to use.

00:06:22.970 --> 00:06:25.550
But the essential the grown works off.

00:06:25.550 --> 00:06:30.050
It stays the same in terms of the resource is and how it's done states the same.

00:06:30.050 --> 00:06:34.260
But what you do changes based on the different business environment.

00:06:34.260 --> 00:06:39.550
So you can basically take this and implanted into a production environment based on your on

00:06:39.550 --> 00:06:40.320
specific chain.

00:06:40.320 --> 00:06:41.940
Called that you can write Ah,

00:06:41.940 --> 00:06:44.060
and in those specific languages.

00:06:44.060 --> 00:06:46.150
But how you invoke them,

00:06:46.150 --> 00:06:47.550
how you Instead she ate them.

00:06:47.550 --> 00:06:50.430
How you get them into production stays the same.

00:06:50.430 --> 00:06:55.330
The only thing that would always the change is what the chain could specifically is and

00:06:55.330 --> 00:06:56.050
what it does,

00:06:56.050 --> 00:06:57.910
but you're able to use it,

00:06:57.910 --> 00:06:59.110
you're able to install it.

00:06:59.110 --> 00:07:00.700
You're able to instance she ate it.

00:07:00.700 --> 00:07:01.420
And then,

00:07:01.420 --> 00:07:02.420
most importantly,

00:07:02.420 --> 00:07:07.330
you're able to view and monitor the progress off your Blockchain that recusing the hyper

00:07:07.330 --> 00:07:08.350
ledger Explorer.

