WEBVTT

00:02.030 --> 00:09.810
I want to come to an end with all these strategies by using one other strategy, the cache only strategy. I mentioned

00:09.830 --> 00:17.430
that this is a strategy which doesn't make that much sense oftentimes but for the assets, we store in our

00:17.440 --> 00:24.240
app shell, it does make sense in my opinion because whenever we update one of these files, we push a new

00:24.240 --> 00:30.660
service worker to the front-end anyways, so we always have the latest version of these files in the cache.

00:30.660 --> 00:38.160
Hence it makes sense to load all these files directly from the cache instead of trying to get them from

00:38.160 --> 00:38.760
the network

00:38.760 --> 00:45.390
if the cache fails. Now you could argue if the cache fails for some other reason, then these files not

00:45.390 --> 00:46.390
being present,

00:46.560 --> 00:51.990
we kind of break our app unnecessarily, though that shouldn't really happen. Anyways

00:51.990 --> 00:56.180
feel free to keep the current implementation to protect against this edge case,

00:56.370 --> 01:02.590
I still want to show you how you could use the cache only strategy combined with routing.

01:02.660 --> 01:07.380
So for that, I'll simply add a new block here, else/if

01:07.440 --> 01:16.170
where I now want to check whether we're loading one of these files here. To implement that, I'll first

01:16.170 --> 01:23.760
of all create a new variable which I'll call static assets and this will be an array of strings and

01:23.850 --> 01:27.110
I will use the array of strings I have up here.

01:27.360 --> 01:35.820
So I will basically take all these files, I'll leave these links in there at the bottom, though to be honest

01:35.820 --> 01:36.760
we can grab them all,

01:36.780 --> 01:41.400
so let's take them all and let's add them into these array here.

01:41.730 --> 01:47.370
Well actually since I'm setting up this array anyways, why don't we go to the top of that file

01:47.400 --> 01:55.530
and add a static files array here where I simply add all these files and now we can use this here in

01:55.530 --> 02:00.890
the add all call, static files simply to remove redundancy

02:01.110 --> 02:05.860
and then down there, I check if the static files array simply,

02:05.880 --> 02:09.220
well if the URL contains one of these links to be precise.

02:09.420 --> 02:13.560
So there I use a regular expression, with new reg exp,

02:13.590 --> 02:16.270
I can create a new regular expression on the fly

02:16.620 --> 02:19.590
and here is the regular expression I want to create.

02:19.590 --> 02:26.010
This is simply a regular expression which will check if in my static files array which I join

02:26.010 --> 02:28.610
here in my regular expression,

02:29.790 --> 02:33.210
if that contains any

02:33.280 --> 02:39.460
if the URL, the request URL contains any of the elements in that array and for that, I again on the

02:39.460 --> 02:47.980
fly create this regular expression which will simply contain all these elements of my array and give

02:47.980 --> 02:54.310
me a way to check if any of these is present in my final request

02:54.310 --> 02:55.230
URL.

02:55.420 --> 02:58.490
So that's what this regular expression does here,

02:58.690 --> 03:04.760
so a lot of backslashes and Bs, in the end what this reads or what this means is,

03:04.780 --> 03:11.980
I join all my static files with the word boundary operators so to say, so this basically means

03:11.980 --> 03:21.720
we have separate words and I check if this regular expression of separate words, if the URL matches this.

03:21.880 --> 03:31.060
So I chain test here on the created regular expression and test if the event request, the URL fits

03:31.150 --> 03:33.160
any of the words I have in there,

03:33.280 --> 03:35.710
so I might look a bit cryptic but that's what I do.

03:35.710 --> 03:39.460
Of course you could write a helper function where you simply loop through the array and check every

03:39.460 --> 03:43.970
entry against the URL, this is the shortest possible way I could come up with.

03:44.080 --> 03:48.160
So I'm checking if my request URL is part of that array,

03:48.190 --> 03:51.710
so basically if I'm requesting any of these files here

03:51.990 --> 03:58.590
and if this is the case, well then I want to implement my cache only strategy.

03:58.810 --> 04:00.620
We can just copy it from there,

04:00.700 --> 04:10.760
respond with the cache, nothing else. So let's go up here and comment this in and with that, we get the

04:10.760 --> 04:15.320
cache only strategy implemented for our statically cached files.

04:15.680 --> 04:22.450
Let's go back to the application and reload it to install the updated service worker,

04:22.940 --> 04:26.950
oh for that maybe network access would be good,

04:26.980 --> 04:29.130
so let's enable that and reload.

04:29.290 --> 04:31.270
Now we install the service worker

04:31.450 --> 04:36.760
and with that, you know the game, simply reopen a new tab to activate it.

04:36.770 --> 04:40.590
Now everything is working, which is a good sign. In the network,

04:40.630 --> 04:43.260
we're loading everything from the service worker,

04:43.570 --> 04:47.900
if I go offline, we're also loading it from there.

04:48.250 --> 04:52.980
So now the cache first or the cache only, excuse me, strategy is working,

04:53.140 --> 04:57.040
it works as before but the difference is we don't have a fallback,

04:57.070 --> 05:00.850
we don't try to go to the network if we don't find it in the cache.

05:00.910 --> 05:03.870
Now I said you can stick to the other alternative,

05:04.030 --> 05:10.120
this however would be a use case where a cache only also is a viable strategy because you're talking

05:10.120 --> 05:15.940
about files which don't change, where you update the service worker anyways if they change because you

05:15.950 --> 05:20.000
cache them right during the installation step. With that,

05:20.080 --> 05:25.720
this is all about strategies and routing or requests URL parsing

05:25.720 --> 05:27.170
I want to show you for now.

05:27.400 --> 05:31.200
You'll learn a lot of tools for handling caching,

05:31.210 --> 05:35.260
working with it and experience really comes with practicing that.

05:35.380 --> 05:37.230
So that's what we're going to do next,

05:37.240 --> 05:38.920
definitely do it on your own anyways,

05:39.010 --> 05:41.700
build your own projects where you practice it, this is

05:41.700 --> 05:43.750
the only way you can really master this.
