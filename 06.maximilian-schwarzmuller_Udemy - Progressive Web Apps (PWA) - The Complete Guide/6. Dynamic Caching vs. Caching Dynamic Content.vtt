WEBVTT

00:02.160 --> 00:09.060
Let's understand what's so special about caching dynamic content and why the cache API which we use

00:09.060 --> 00:14.540
thus far might not be the best choice. To begin with that, I want to clarify something else though,

00:14.760 --> 00:19.760
what's the difference between dynamic caching and caching dynamic content?

00:19.800 --> 00:22.530
Both terms have caching and dynamic in the name.

00:22.860 --> 00:24.240
Let's have a look.

00:24.300 --> 00:28.460
They are not the same, dynamic caching is what we did thus far

00:28.560 --> 00:35.190
and it's not a single pattern or something like this, dynamic caching simply means if we have our page

00:35.220 --> 00:40.410
and we send a network request which is intercepted by the service worker, therefore the service worker

00:40.440 --> 00:46.350
reaches out to the network and we then get this back and store this in the cache and return it to the page,

00:46.500 --> 00:49.450
like in our cache then network strategy,

00:49.530 --> 00:56.980
we make sure that we store assets, resources the user requests in the cache

00:57.000 --> 01:03.150
once we got them. We use that not only in the cache then network strategy but in other strategies

01:03.150 --> 01:10.740
too. Basically dynamic caching always happens whenever you not just pre-cache files during the installation

01:11.100 --> 01:17.440
but you add files, resources to the cache once you've got a response during a fetch request.

01:17.440 --> 01:22.070
This is dynamic caching, it just means you dynamically add items to your cache,

01:22.140 --> 01:23.260
that's all.

01:23.280 --> 01:26.220
Now caching dynamic content means something else.

01:26.220 --> 01:28.710
Actually the pattern isn't that different,

01:28.710 --> 01:34.080
we still have a page and we send a network request which gets intercepted by the service worker but we

01:34.080 --> 01:35.960
don't use the cache API,

01:36.090 --> 01:42.870
instead we use a new tool, indexedDB which is an in-browser database, a key-value database.

01:42.900 --> 01:49.920
It runs in the browser and it's there to help you store, well data as all databases do I guess. The difference

01:49.920 --> 01:54.760
to the cache API is that indexedDB is used differently

01:54.870 --> 02:01.320
and that it's not so much about storing CSS or script files or images in there but instead storing JSON

02:01.320 --> 02:03.030
data, XML data,

02:03.030 --> 02:09.840
so basically the structured or unstructured data you're getting back from your back-end, not files, not

02:09.930 --> 02:13.310
assets which define how your application works or looks

02:13.500 --> 02:16.840
but the meat of your application, the content.

02:17.010 --> 02:20.860
So in the end, we still reach out that to get the data from there, 

02:20.880 --> 02:26.460
at least if we have a cache then network strategy and we also reach out to the network,

02:26.620 --> 02:31.860
return it to the page via the service worker of course and also store the indexedDB.

02:31.860 --> 02:37.860
So basically this still is a cache then network strategy, just that our cache is no longer the application

02:37.860 --> 02:39.810
cache we used with the cache API

02:39.990 --> 02:44.830
but instead indexedDB. The question then of course still is, why would we use that?

02:44.850 --> 02:49.320
So first of all, we have to recognize that we're talking about data that changes frequently and therefore

02:49.380 --> 02:52.320
is dynamic, that is what's meant with Dynamic Content

02:52.560 --> 02:58.690
and it typically is in JSON format or XML format but JSON is the most common choice nowadays.

02:59.190 --> 03:05.730
And for that, the indexedDB just happens to be really good because it's a key-value database, we can

03:05.730 --> 03:12.330
store JSON data there and we can have more power over it than we have in the normal cache API. There

03:12.330 --> 03:18.660
we can just store the response and we have to parse the response, we never really use it, it's the whole HTTP

03:18.660 --> 03:24.030
response. In indexedDB, we can already store the formatted response or whatever we want,

03:24.030 --> 03:25.920
we can store pieces of the response,

03:26.010 --> 03:28.710
we have the full power over what we want to store,

03:28.740 --> 03:33.430
which part of the response we want to store. Now that doesn't make much sense for CSS files

03:33.450 --> 03:37.740
because there we typically want to store the complete response because we would just want to serve that

03:37.740 --> 03:38.900
to our page in the end

03:39.120 --> 03:44.980
but for data, JSON data, dynamic data, we might want to pick certain fields we want to store, maybe

03:44.980 --> 03:46.360
you want to transform it,

03:46.410 --> 03:51.570
think about the transformation we're already doing in our project with that data from Firebase.

03:51.720 --> 03:55.300
That's why indexedDB is a great choice for dynamic content

03:55.410 --> 04:00.120
typically in a JSON format, we can transform and we have more control over it,

04:00.150 --> 04:07.320
the cache API is possible to be used and it's not necessarily wrong or bad but you can definitely use

04:07.590 --> 04:08.310
indexedDB for that

04:08.310 --> 04:11.060
and it might hold some significant advantages.

04:11.340 --> 04:12.690
So that's the key thing,

04:12.690 --> 04:18.630
the approach is the same, cache then network but the data, nature and format is different and therefore

04:18.630 --> 04:20.760
we might want to store it differently.

04:21.890 --> 04:27.620
Of course, we can use indexedDB not only with the cache then network approach, you can basically use it

04:27.620 --> 04:31.330
whenever you use the cache API, just for JSON data,

04:31.400 --> 04:37.610
typically not so much for CSS file, Javascript files but if you have JSON data, feel free to use any

04:37.610 --> 04:43.850
of the strategies you learned about in the last modules and replace the cache with indexedDB for

04:43.850 --> 04:44.990
JSON data.

04:44.990 --> 04:49.180
Now let's learn more about indexedDB and let's then use it in our project.
