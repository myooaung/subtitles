WEBVTT

00:02.200 --> 00:07.270
So we learned about some use cases where it would be nice to access the web application even though

00:07.270 --> 00:09.190
we have no internet connection

00:09.190 --> 00:11.570
and for that, we can use the cache API.

00:11.710 --> 00:17.890
Now here's an important thing, when working with web applications, there actually are multiple possible

00:17.890 --> 00:19.420
caches to work with.

00:19.420 --> 00:26.340
The server can cache some resources but these still need to be sent over the wire, so they disqualify

00:26.340 --> 00:28.060
for offline access,

00:28.060 --> 00:33.590
the browser also manages its own cache totally without you telling it to do so,

00:33.610 --> 00:36.890
this is the cache we disabled in the first course module.

00:37.090 --> 00:41.160
Now this cache managed by the browser has one big disadvantage,

00:41.200 --> 00:42.400
it's managed by the browser,

00:42.460 --> 00:43.750
you can't rely on it,

00:43.810 --> 00:48.460
you can't explicitly tell it which assets to cache and which not to cache.

00:48.490 --> 00:54.190
So you as a developer have no control over it or only a very limited amount and you can't rely on these

00:54.190 --> 00:56.100
files being there when you need them,

00:56.380 --> 01:02.680
that's where the cache API steps in. A separate cache storage also living in the browser but managed by

01:02.680 --> 01:04.670
you as a developer.

01:04.670 --> 01:11.340
This cache holds simple key-value pairs where the key are the HTTP requests you want to send,

01:11.530 --> 01:17.890
so to put it in a simplified picture, simply the URL you're trying to reach, though it really is the

01:17.890 --> 01:22.100
complete request and the value is the response you got back.

01:22.270 --> 01:28.720
So of course you need to have made that request successfully at least one time so that you got the response

01:28.720 --> 01:29.980
you actually want to display,

01:29.980 --> 01:31.360
otherwise you can't cache it,

01:31.360 --> 01:37.800
you can't cache what's not there but once you've got that response one time, you can store it on the key,

01:37.810 --> 01:43.870
so on that request you sent and then fetch it later on when you need to send that same request again

01:43.900 --> 01:48.160
but have no internet connection and that simply is how the cache API works,

01:48.190 --> 01:51.370
you store key-value pairs, request and response.

01:51.370 --> 01:58.480
Now the cache API can be accessed from both service workers and your ordinary Javascript on your pages.

01:58.930 --> 02:04.720
So you can access it not only from service workers but also from your day-to-day Javascript running

02:04.740 --> 02:07.540
in your pages loaded through your HTML pages.

02:07.840 --> 02:12.760
That's important and we will actually use both approaches of accessing the cache and you will learn

02:12.850 --> 02:15.140
when which approach makes sense.

02:15.520 --> 02:21.250
So being able to access it from the service worker is powerful though because keep in mind, the service

02:21.250 --> 02:25.910
worker runs in the background, you register it and it keeps on running.

02:25.930 --> 02:30.830
So normal Javascript only wouldn't do the trick because where does this come from?

02:30.850 --> 02:31.440
Right,

02:31.540 --> 02:33.660
it's loaded via a request.

02:33.730 --> 02:38.680
So if you have no internet connection, the normal Javascript can't be loaded because it's sitting on

02:38.680 --> 02:39.420
a server,

02:39.430 --> 02:46.210
so yes you have the ability to access the cache but you don't even get to that point because you never

02:46.210 --> 02:47.930
get the Javascript file.

02:47.950 --> 02:53.620
It's still useful that you can access the cache from normal Javascript but I will show you a use case

02:53.620 --> 02:58.920
where this makes sense later in this module. Being able to access it from the service worker on the other hand

02:58.930 --> 03:03.760
makes a lot of sense because this service worker is always there, you don't need to fetch it when you

03:03.760 --> 03:04.620
visit the page,

03:04.660 --> 03:06.030
it's a background process,

03:06.100 --> 03:07.180
so it's already running

03:07.210 --> 03:13.690
even if you have no internet connection. Well and using that cache, you get a chance of retrieving that

03:13.690 --> 03:18.650
data instead of sending the network request which of course is exactly what you want to do

03:18.760 --> 03:21.580
if you have no internet connection.

03:21.580 --> 03:28.900
So in the end by using the fetch event in the service worker which of course will be the key to intercepting

03:28.900 --> 03:35.110
any requests you want to send and the cache API, you have a complete network proxy living in your service

03:35.110 --> 03:41.290
worker which allows you to control if the request really is allowed to continue to the network or if

03:41.290 --> 03:45.310
you want to return a response from the cache if available.

03:45.310 --> 03:53.050
So with that, let's dive into using that cache API and let's learn how you can actually decide which

03:53.050 --> 03:58.260
assets to cache, how you cache them and which different strategies you can use to do so.
