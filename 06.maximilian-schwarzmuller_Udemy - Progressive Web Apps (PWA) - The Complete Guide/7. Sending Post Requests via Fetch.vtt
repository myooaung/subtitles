WEBVTT

00:02.080 --> 00:08.650
So now that we send get requests, let's go back to httpbin.org and let's send a post request.

00:09.310 --> 00:14.950
We can do this by sending a post request to /post at the end and it will basically mirror back

00:14.950 --> 00:16.630
the data we send to it.

00:17.020 --> 00:24.390
So for that, I will copy that fetch call here and I'll target /post at the end.

00:24.460 --> 00:28.480
Now by default, we still send a get request though, it of course doesn't

00:28.480 --> 00:34.600
infer the kind of HTTP request it should send by to URL, that would be super bad because maybe

00:34.600 --> 00:36.960
we might just want to get a single post here,

00:37.270 --> 00:40.420
so that post doesn't indicate that we send a post request.

00:40.690 --> 00:46.330
Instead we can configure this request by passing a second argument to the fetch method and passing a

00:46.330 --> 00:49.860
Javascript object as an argument.

00:49.860 --> 00:53.300
Now here, we can set up this fetch request,

00:53.370 --> 00:57.120
we can specify some options for the requests.

00:57.120 --> 01:02.370
Now there are many options you can pass here and a detailed article up about fetch in case you want to

01:02.370 --> 01:03.270
dive deeper

01:03.330 --> 01:05.670
can also be found at the end of this module,

01:05.670 --> 01:12.510
this course of course is not just about fetch. Here however are the core things you can set up on this request

01:12.570 --> 01:15.080
to turn it into a post request,

01:15.090 --> 01:21.390
so for example the method, that's super important. By default it's get, so you don't need to add this if

01:21.390 --> 01:27.700
you want to send a get request. If you want to send a post request though, you need to set this to post

01:27.820 --> 01:31.170
and now we already send a post request.

01:31.170 --> 01:37.560
Maybe we also want to send different headers though, so we can also pass headers and there you can simply

01:37.560 --> 01:44.640
pass a Javascript object with key-value pairs, representing the headers you want to set. For example maybe

01:44.640 --> 01:47.310
we are about to send JSON data,

01:47.400 --> 01:55.650
so I should set the content type to application/json showing the server that data attached to

01:55.650 --> 01:58.570
this request will be in JSON format,

01:58.590 --> 02:02.390
of course you could set other headers like authorisation headers here too.

02:02.640 --> 02:09.990
Now for this request to work, we also need to specify what we want to accept here I want to accept application/json,

02:09.990 --> 02:17.130
I need to specify this for this specific rest API which will only mirror back the data I sent

02:17.130 --> 02:20.700
to it if I accept to receive that data.

02:21.800 --> 02:29.150
Now with that, there's one other important key we have to set, the body we actually want to send. The body here

02:29.570 --> 02:32.710
is simply in my case, the Javascript object

02:32.720 --> 02:37.460
I want to pass to that back-end which I want to attach to this request.

02:37.520 --> 02:42.180
So here maybe, that could be a message where I say does this work?

02:42.410 --> 02:47.270
And with that, we're setting up that this should be a post request, which kind of data we're sending and

02:47.260 --> 02:53.300
then we accept to get back JSON data and then the data we want to send, we're then handing the

02:53.300 --> 02:56.580
response, extract the data and then output it in another

02:56.600 --> 03:02.940
then call. Let's see if that works by going back to the application and quickly reloading

03:03.090 --> 03:05.330
and you see it's empty,

03:05.330 --> 03:08.110
we don't get back our message.

03:08.190 --> 03:14.550
Now the reason for this is that we attached a Javascript object, we told the back-end though that we send JSON

03:14.550 --> 03:15.140
data,

03:15.360 --> 03:21.770
so we need to transform this into JSON data by calling JSON.stringify like that.

03:21.810 --> 03:26.350
Now with this, if we now save this and we reload the application one more time,

03:26.400 --> 03:30.210
now you see that the data field here is populated

03:30.220 --> 03:36.780
and under JSON, we've got the parsed Javascript object because we set this to be JSON data with the content

03:36.780 --> 03:37.610
type.

03:38.130 --> 03:41.810
So now we get back the mirror data and we see that posting the data worked,

03:41.820 --> 03:46.910
we successfully sent the post request. This is the basics,

03:46.910 --> 03:54.170
these are the basics of the fetch API and how we use it to either send get requests or post requests.

03:54.180 --> 03:59.550
Now as a side note, you don't necessarily need to set the accept header whenever you send a post request,

03:59.580 --> 04:02.550
it depends on the API you are sending the request to.

04:02.730 --> 04:08.160
If it's an API which always returns back some JSON data and doesn't care about whether you're accepting

04:08.160 --> 04:10.370
it or not, you don't need to set this,

04:10.380 --> 04:15.670
typically you will find out which headers you need to send in the API documentation of the API you're

04:15.690 --> 04:17.360
communicating with.

04:17.360 --> 04:21.050
Now there's one other option I want to discuss in the next lecture though.
