WEBVTT

00:02.440 --> 00:07.540
Let's dive into background synchronization then, how does it work?

00:07.840 --> 00:14.050
Well background synchronization is all about sending data to a server when we have no internet connection.

00:14.050 --> 00:15.180
So here's the setup,

00:15.190 --> 00:18.010
we have our web application running in the browser,

00:18.040 --> 00:23.340
of course it's also served by a server, can be the same as our back-end server but doesn't have to

00:23.510 --> 00:28.930
and we got our back-end server, again that maybe the server which is serving our HTML pages but it

00:28.930 --> 00:32.560
may just be an API we built, that does not matter at all.

00:32.560 --> 00:35.790
Now the goal is to send some data to the server.

00:36.190 --> 00:38.440
Now of course this will work most of the time

00:38.770 --> 00:44.890
but of course there's a chance that the user does this right at the point of time we have no internet

00:44.890 --> 00:48.830
connection which is an issue obviously because it will fail.

00:49.120 --> 00:55.480
Now just as we're able to render some of our pages offline with service workers, wouldn't it be great

00:55.480 --> 00:58.750
if we could also send data when we're not online?

00:58.750 --> 01:03.390
So kind of store the request and send it at a later point of time.

01:03.520 --> 01:08.830
Remember that on service workers, I told you that you can't cache post requests,

01:08.830 --> 01:12.330
you can cache the response but you can't cache

01:12.340 --> 01:15.840
the request itself to be sent at a later point of time.

01:15.850 --> 01:22.030
Now there is a technique we can use though, we can use a service worker to register a sync task,

01:22.030 --> 01:28.310
so basically tell the service worker hey here is something I want to do eventually, I want to send data,

01:28.480 --> 01:33.480
please be aware of that and register it as a task, as a synchronization task.

01:33.490 --> 01:37.680
Now of course, registering the task alone isn't everything we have to do,

01:37.690 --> 01:42.970
we also need to store the data we want to send with the request, with the post or put request or whatever

01:42.970 --> 01:50.020
it is and as this is probably JSON data, even if it were an image it would be possible though, we can

01:50.020 --> 01:51.740
store it in an indexedDB

01:51.790 --> 01:57.160
and actually you will see this later in the course once we add images, that you can store images in indexedDB

01:57.160 --> 01:57.840
too,

01:57.850 --> 02:00.520
so it's not just limited to JSON data.

02:00.520 --> 02:05.890
So basically the data we want to attach to the post request or to the put request or whatever it is,

02:06.340 --> 02:08.140
we store it here.

02:08.230 --> 02:13.080
Now with that, we got everything prepared to send it at a later point of time,

02:13.360 --> 02:16.150
eventually connectivity will reestablish.

02:16.260 --> 02:22.120
Now if we always had internet connectivity, the service worker will go ahead and execute that task

02:22.120 --> 02:27.520
immediately, so we can take this route even if we know we have internet connection,

02:27.520 --> 02:30.510
it will then just execute it immediately as I just said.

02:30.820 --> 02:38.120
However if we didn't have connectivity and it is re-established, it will also work now. In both situations,

02:38.170 --> 02:45.340
so us having connectivity or us getting connectivity again, a so-called sync event will be executed on

02:45.340 --> 02:49.510
the service worker and you can listen to that event in the service worker.

02:49.510 --> 02:54.170
Once this event occurs, the service worker will, if we instruct it to do so,

02:54.260 --> 02:59.230
fetcher the request data and send the data to the server, so it will then make the request.

02:59.230 --> 03:06.490
The cool thing is and please note that, that this will even work if we did close the tab or on mobile

03:06.490 --> 03:08.070
phones even the browser.

03:08.230 --> 03:11.360
So our website doesn't have to be open for this to work,

03:11.410 --> 03:13.140
we can just go away,

03:13.210 --> 03:18.490
that is why it's also a good idea to register a sync task even if we do have internet connection

03:18.760 --> 03:24.340
because it'll then still execute even if the user immediately closes the browser after hitting a button

03:24.340 --> 03:26.150
or something like that.

03:26.260 --> 03:28.810
This is how it works behind the scenes,

03:28.810 --> 03:31.970
now let's see how we can implement it in our application.
