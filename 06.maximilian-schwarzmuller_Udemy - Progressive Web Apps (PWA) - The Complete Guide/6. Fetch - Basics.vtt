WEBVTT

00:02.040 --> 00:05.570
Over the last lectures, you learned how to work with promises,

00:05.570 --> 00:11.330
now let's turn to fetch which we already use in the service worker here. Fetch is a method provided by

00:11.330 --> 00:13.170
Javascript in your browser,

00:13.400 --> 00:19.670
it has decent browser support, you can find a detailed article about that in a lecture at the end of

00:19.670 --> 00:25.490
this module and fetch basically allows you to send HTTP requests.

00:25.490 --> 00:32.990
Now you might already know Ajax which behind the scenes uses the new XML HTTP request object, fetch

00:33.020 --> 00:38.720
could be thought of as an alternative to that, though a bit nicer to work with.

00:38.750 --> 00:43.060
Let's see how it works and let's go back to the app.js file for this.

00:43.220 --> 00:52.100
I already have a promise here where I register set timeout, I now want to also use fetch as another

00:52.100 --> 00:58.880
asynchronous task I use in my code. To demonstrate how fetch works, I of course need some web page to

00:58.880 --> 01:05.210
fetch data from because I just said it's about sending network requests. For that we can visit 

01:05.210 --> 01:06.620
httpbin.org,

01:06.640 --> 01:13.020
this is a page which simply gives you some example rest API endpoints you can send requests to. You can

01:13.040 --> 01:16.630
post data to it, fetch data from it and so on,

01:16.730 --> 01:22.950
for example on the get request here, this is data we could get back. Now with that,

01:22.970 --> 01:27.660
why don't we use that and send a request to some of these API endpoints?

01:27.920 --> 01:35.780
Let's start with that IP route which simply returns our IP address. Here right after the promise I create

01:35.780 --> 01:39.180
here which wraps set timeout, I'll add another method,

01:39.290 --> 01:40.540
fetch.

01:40.540 --> 01:46.550
So fetch again is a method provided by Javascript and your browser, assuming you're executing this in

01:46.550 --> 01:48.000
a browser supporting fetch,

01:48.020 --> 01:53.180
so make sure you're doing this, Chrome in the latest version is always a good choice as it is in general

01:53.180 --> 01:54.800
for this course.

01:54.860 --> 01:57.610
Next we need to pass the URL here.

01:57.870 --> 02:04.880
So let's quickly click on that link and copy the URL from the top here, paste it as a string here, as the

02:04.880 --> 02:06.570
first argument to fetch

02:06.590 --> 02:08.740
and in this case also the only argument.

02:08.900 --> 02:13.340
Now I told you that fetch would return a promise, so we can chain then to it

02:13.400 --> 02:18.410
and even though that's a new line, that still is added to this method here,

02:18.440 --> 02:21.460
so this will use the return value of fetch.

02:21.710 --> 02:25.490
Here we will actually get back some response,

02:25.490 --> 02:28.330
it will automatically be passed into our function,

02:28.460 --> 02:32.720
so let's start simple by simply logging that response.

02:32.720 --> 02:39.530
Now if I save this and I go back to the application and reload this page, you will see that we got this

02:39.530 --> 02:41.340
response here at the bottom,

02:41.390 --> 02:44.030
this item here, this object.

02:44.090 --> 02:47.330
There we got a response body which is a readable stream,

02:47.330 --> 02:48.820
I'll come back to this,

02:48.830 --> 02:50.680
we also get some headers here,

02:50.870 --> 02:56.540
not really populated with any special headers though but interesting is we get a status code 200,

02:56.660 --> 03:01.930
we get this OK property which basically is a check if the status code is in the 200 range,

03:01.970 --> 03:08.330
so a quick way for us to see if the request was successful and we also got the type of the request, that

03:08.330 --> 03:15.140
it's a CORS request, so that we are only able to access the response if CORS headers are set by the

03:15.140 --> 03:19.340
server and this is the URL we sent the request to.

03:19.370 --> 03:24.170
Now if we want to consume the body, we have to do something with that response,

03:24.230 --> 03:31.190
we have to run a method on it, JSON because I know that for this route and you typically know this for

03:31.190 --> 03:35.430
any route you target of course since there should be a documentation for a given API,

03:35.720 --> 03:42.650
I know that for this route, I get back JSON data and JSON is a utility method provided by the fetch

03:42.650 --> 03:49.820
API on the response object to extract that data and convert it into a Javascript object.

03:49.850 --> 03:54.950
It is an asynchronous operation though because it gets a readable stream as you can see and it will

03:54.950 --> 03:58.860
basically parse that stream for us which is an asynchronous task.

03:59.150 --> 04:02.330
So let's return the response JSON method call

04:02.600 --> 04:05.470
and this happens to also give us a promise.

04:05.480 --> 04:06.600
Now we're chaining the

04:06.600 --> 04:12.710
then call I was mentioning in the last lectures. Here we now get to extracted data passed to

04:12.710 --> 04:18.610
the function passed to this then call and we can simply log that data here.

04:18.620 --> 04:23.660
Now if we save this and we go back to the application and reload, you will see that at the bottom, we got

04:23.660 --> 04:31.400
the response but then we also get this Javascript object, that's the parsed JSON data and here it happens

04:31.400 --> 04:36.890
to have a property named origin which holds a string, my IP in this case.

04:36.890 --> 04:47.180
So this is how we can work with that, how we can work with this fetch API for sending get requests.

04:47.190 --> 04:51.950
This also shows us how we can easily use promise then calls.

04:52.010 --> 04:53.980
Now of course this could also fail,

04:54.200 --> 05:00.060
let me add a catch block where I catch any error we might get, in here

05:00.060 --> 05:07.760
I will then simply log that error. Let's say I'm sending the request to IPs, this URL shouldn't exist,

05:07.760 --> 05:12.140
so this path here shouldn't be handled by httpbin.org.

05:12.800 --> 05:19.670
So let's save this and now quickly reload the page. You see at the bottom, I get an error

05:20.040 --> 05:23.880
and I still get an error log here,

05:23.900 --> 05:28.270
this is from app.js line 39 which is exactly this log statement.

05:28.400 --> 05:34.100
So we did catch the error and output the error message which in this case is no nicely formatted error

05:34.100 --> 05:38.000
message but simply basically an HTML document

05:38.000 --> 05:43.850
we seem to have fetched. Still, catching errors and executing code we want to execute here seems a good

05:43.850 --> 05:44.480
idea

05:44.530 --> 05:46.470
whenever you work with the web,

05:46.610 --> 05:49.840
I'll turn this back to just an IP at the end.

05:49.970 --> 05:56.870
This is how we can send get requests with fetch and important, you need to parse the response data before

05:56.870 --> 05:59.630
you can use it in a separate step,

05:59.630 --> 06:02.630
we will do this later in the course too.

06:02.720 --> 06:06.970
Of course you don't just want to send get requests, in the next lecture,

06:06.980 --> 06:09.870
we'll have a look at how we would post data to the web.
