WEBVTT

00:02.400 --> 00:10.170
Now with the importance of this service worker lifecycle and how it activates highlighted, let's see how we

00:10.170 --> 00:17.420
can also listen to non-lifecycle events. Right now we only listen to events while referring to the service 

00:17.440 --> 00:21.820
worker installation, which is nice but doesn't add any value to our application,

00:22.110 --> 00:29.500
let's add another event listener now, self add event listener fetch.

00:29.730 --> 00:35.880
Now fetch will get triggered or the function here will then get triggered whenever our web application

00:35.880 --> 00:37.290
fetches something.

00:37.290 --> 00:45.060
Now as I told you, a fetch event will be emitted when the HTML pages for example load assets like the

00:45.060 --> 00:54.940
scripts here or like our CSS code here through links or when they load an image, like this.

00:54.960 --> 00:57.620
This all triggers the fetch event.

00:58.260 --> 01:04.350
It will also trigger if we manually send a fetch request in the app.js file which we don't do yet

01:04.380 --> 01:07.330
but we'll do so in the next course module.

01:07.860 --> 01:10.560
So this is when we get informed about fetching,

01:10.560 --> 01:16.890
so let's quickly add a console log here where I'll also say service worker to highlight that

01:16.890 --> 01:18.260
it's coming from there,

01:18.890 --> 01:20.960
fetching something...

01:20.960 --> 01:22.750
and

01:22.900 --> 01:29.070
let's add an event here which we output. Now

01:29.330 --> 01:34.690
this will make sure that we log whenever the fetch event is triggered.

01:34.880 --> 01:37.940
Now with that let's save it and let's go back to the application.

01:37.940 --> 01:44.540
Now again if we reload, this won't activate the new service worker, it only installs it, under application

01:44.540 --> 01:48.280
you see that it's waiting to be activate and we can click skip waiting here.

01:48.620 --> 01:50.940
Now the new service worker is activated.

01:50.960 --> 01:57.830
Another important thing is, once you activated it, all pages are under control of the service worker except

01:57.830 --> 01:59.770
for the page you are currently on,

01:59.780 --> 02:05.570
you need to reload this once for the service router to control this too, simply due to the way time works

02:05.570 --> 02:09.290
I guess, you loaded the page first before the service worker was activated,

02:09.380 --> 02:11.340
it doesn't know this page yet.

02:11.540 --> 02:17.950
So if you reload one more time, you'll see that now we're fetching stuff here and we're emitting the fetch

02:17.950 --> 02:19.420
event therefore. 

02:19.610 --> 02:20.910
So this is now all working

02:20.910 --> 02:25.940
and we get a lot of fetch events because we get a lot of places in the application where we do fetch

02:25.940 --> 02:26.960
things.

02:26.960 --> 02:31.440
Now back in the fetch event handler, we can do more than just logging it,

02:31.730 --> 02:39.000
we can use the event which gets passed into the event listener and there we can execute respond with.

02:39.000 --> 02:44.700
Now this allows us to overwrite the data which gets sent back.

02:44.900 --> 02:50.120
Now as I said earlier, you can think of the service worker as a network proxy,

02:50.120 --> 02:56.750
at least if we use the fetch event here. So every outgoing fetch request goes through the service worker

02:57.110 --> 02:59.360
and so does every response.

02:59.360 --> 03:01.510
Now if we don't do anything as we did before,

03:01.580 --> 03:03.600
the response is simply passed on.

03:03.890 --> 03:06.510
However, if you add respond with,

03:06.710 --> 03:15.050
you can basically overwrite with what you want to respond. If you respond with null here, let's reload our

03:15.050 --> 03:16.250
application,

03:16.640 --> 03:22.710
let's make sure we activate the new service worker by skipping waiting and let's reload again,

03:23.770 --> 03:27.550
now you see it's showing us this site can't be reached

03:27.570 --> 03:33.820
window here for a brief second before it recovers simply because we return null initially

03:33.820 --> 03:34.610
here.

03:34.900 --> 03:42.700
Now if we return fetch event request here, which basically means return the fetch request and this

03:42.700 --> 03:43.810
is a promise,

03:43.810 --> 03:49.300
so this will automatically be parsed thereafter and this will also then use the response of this promise

03:49.330 --> 03:55.810
automatically, go back to the application and reload here,

03:55.820 --> 04:01.130
now you see we don't get this in-between because now it never has this point of time where it's not

04:01.130 --> 04:06.500
getting its data and where it then has to fallback to some browser mechanism.

04:06.500 --> 04:08.950
So this is what I will stay with for now,

04:08.990 --> 04:12.450
later in the course we'll do much more powerful things with that though.

04:12.620 --> 04:19.980
We'll really intercept this request and return different things depending on whether we have online access,

04:19.990 --> 04:22.120
if we have internet access or not,

04:22.280 --> 04:27.710
we'll then use respond with to simply check the internet connection basically and return stuff from

04:27.710 --> 04:29.980
our cache or from the network.

04:30.010 --> 04:33.400
So for now, registering the fetch listener is all I want to do,

04:33.620 --> 04:40.940
it's important to understand that fetch is triggered by your web application, by the actual page whilst

04:41.030 --> 04:44.260
install and activate are triggered by the browser

04:44.300 --> 04:47.750
when the service worker is getting installed or was activated.
