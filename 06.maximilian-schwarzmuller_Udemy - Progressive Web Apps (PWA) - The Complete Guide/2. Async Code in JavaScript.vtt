WEBVTT

00:02.140 --> 00:04.910
So let's dive into promises and the fetch API,

00:04.980 --> 00:11.190
at least the very basics about these two concepts since they are core building blocks of progressive

00:11.190 --> 00:15.260
web apps and since we use both concepts a lot in service workers.

00:15.270 --> 00:20.780
So let's start with promises and let's start with recognizing that Javascript is single threaded,

00:20.880 --> 00:23.790
it executes on a single thread.

00:23.880 --> 00:30.690
So if you have a Javascript code, for example you fetch data from a server, you might also have some code waiting

00:30.690 --> 00:37.080
for three seconds with set timeout or you have any other generic long running operation,

00:37.080 --> 00:44.550
you of course recognize that all these three tasks triggered by regular Javascript are asynchronous, they

00:44.550 --> 00:46.480
don't finish immediately.

00:46.740 --> 00:51.810
So you could think that since we have a single thread, it looks like this.

00:51.810 --> 00:57.710
We have the three tasks executing after each other because we only have one thread

00:57.720 --> 01:00.600
available, we have no multitasking like this.

01:00.600 --> 01:05.880
So we fetch data from a server and we can only continue once this finished, then we wait for the three

01:05.880 --> 01:11.580
seconds and then we have the other long running operation, even though theoretically we might want

01:11.580 --> 01:14.520
to execute all three at the same time.

01:14.550 --> 01:17.570
This is not how it works in Javascript,

01:17.580 --> 01:20.650
instead we work like this in Javascript.

01:20.700 --> 01:28.710
We handle asynchronous code by starting the asynchronous tasks and then waiting for responses in the

01:28.710 --> 01:34.120
future and in-between, we get some free time we can spend on other operations.

01:34.350 --> 01:40.570
We do this with callbacks already, you probably know callbacks, this is how they look like.

01:40.680 --> 01:45.380
Here's a simple callback in our app.js file, it will execute right at the start

01:45.390 --> 01:50.860
when we first parse this file. I'll use set timeout since it's easy to understand and write,

01:50.880 --> 01:55.090
we want to wait for three seconds to stick with the example from the slides.

01:55.140 --> 02:01.090
The first argument to set timeout is a function though, the so-called callback.

02:01.190 --> 02:02.950
This is an anonymous function here

02:02.970 --> 02:05.840
but we could also point to some named function.

02:05.850 --> 02:10.170
The key thing is after the time period specified as the second argument,

02:10.260 --> 02:12.680
this function will get executed.

02:12.690 --> 02:15.960
This allows us to immediately proceed with execution,

02:16.080 --> 02:23.550
for example with this line of code, this is executed right after set timeout.

02:23.550 --> 02:29.490
Now if set timeout were blocking the main thread, then we would have to wait for three seconds before

02:29.490 --> 02:33.730
we see this console log. To see that the opposite is the case,

02:33.870 --> 02:41.290
let's simply console log something in that function we call in set timeout too, this is executed

02:41.540 --> 02:49.880
once the timer is done. If we now save this, we go back to our application and open the console and we

02:49.880 --> 02:52.130
reload the application,

02:52.130 --> 02:58.310
you see this is executed right after set timeout and only after three seconds you see this is executed

02:58.310 --> 03:02.120
once the timer is done, let me increase this in size.

03:02.150 --> 03:03.530
Here is the first log,

03:03.560 --> 03:08.350
this is executed right after set timeout and then we get the timer is done log,

03:08.450 --> 03:11.180
even though in our code, they are exactly

03:11.180 --> 03:12.770
the other way around.

03:12.830 --> 03:15.810
First we would execute this, then this line

03:15.950 --> 03:20.790
but again since it is this non-blocking, we get to this line immediately.

03:20.810 --> 03:25.190
This is how Javascript works and how it should work because otherwise we would block the single thread

03:25.190 --> 03:32.810
with every asynchronous operation we do. Now using callbacks is a fine way of handling asynchronous code

03:32.810 --> 03:33.710
like this

03:33.860 --> 03:36.690
but we can quickly enter callback hell.

03:36.800 --> 03:41.730
You enter this hell whenever you nest asynchronous operations into each other and

03:41.730 --> 03:47.650
you've probably been there in your Javascript applications. That's why promises came up,

03:47.660 --> 03:52.650
let's have a look at how we could rewrite this example with promises in the next lecture.
