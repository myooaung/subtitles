WEBVTT

00:02.170 --> 00:08.470
So in the last lecture, we made sure that in our feed.js file, we actually get the video image into our

00:08.470 --> 00:10.450
modal and that's nice,

00:10.450 --> 00:16.510
now I want to hook up that button, that capture button here. Now we already get access to the button

00:16.510 --> 00:18.010
in the feed.js file,

00:18.040 --> 00:24.730
it's the capture button variable here. Now I want to add an event listener and to keep the code which

00:24.730 --> 00:25.920
belongs together

00:25.990 --> 00:31.980
together, I'll add it right below initialized media which is where I set everything up regarding that.

00:31.990 --> 00:38.320
So here, I'll now get access to my capture button and I want to add an event listener to listen on a

00:38.320 --> 00:41.410
click and on that click here,

00:42.330 --> 00:48.510
I obviously want to take an image. Now for that as I said, we'll use that canvas element because

00:48.510 --> 00:57.510
the cool thing is the general idea is we'll get the stream of the video element, basically send it to the

00:57.510 --> 00:58.270
canvas

00:58.290 --> 01:03.780
and since the canvas is there to display static content, it will automatically take the latest snapshot

01:03.780 --> 01:09.540
and just display that. Then we stop the video player and all we get is a canvas element with the

01:09.540 --> 01:15.660
latest snapshot and we can then extract that simply from that canvas element. Might sound super

01:15.660 --> 01:18.800
hacky but actually is a very valid way of doing that.

01:19.230 --> 01:25.420
So on the click listener, I want to show the canvas therefore. So the canvas element

01:25.620 --> 01:29.670
should be switched to display block, so that it shows up.

01:29.670 --> 01:31.380
Now it is empty by default though.

01:31.530 --> 01:33.890
So the next thing is I want to disable,

01:33.930 --> 01:40.290
so basically hide the video player, so I'll set it to style none. Important, even if we hide it,

01:40.290 --> 01:41.910
the stream is still going on,

01:41.970 --> 01:47.150
so what we can do this first and still get access to the currently running stream. We'll stop this in

01:47.150 --> 01:48.640
a second too though.

01:49.050 --> 01:55.780
So this will basically set the canvas and disable the video player.

01:55.780 --> 02:02.460
Now the next thing I want to do is, I want to set my capture button here, the style to none because I also want

02:02.470 --> 02:03.170
to disable that 

02:03.170 --> 02:05.270
once I took a screenshot.

02:05.280 --> 02:08.900
Now finally, let's get the stream onto the canvas.

02:09.240 --> 02:15.240
For that, I need to create some context for the canvas, I'll store it in a variable by accessing my canvas

02:15.300 --> 02:21.370
element here and there we can access get context.

02:21.590 --> 02:26.870
That's a method where we basically initialize how we want to draw on this canvas.

02:26.870 --> 02:32.830
I want to draw it to the image because I just want to have two-dimensional image,

02:33.080 --> 02:36.910
a screenshot basically or a snapshot of my stream. 

02:37.010 --> 02:38.140
So that's the context

02:38.150 --> 02:44.360
and now we can use that canvas context here to draw an image, since it's two-dimensional,

02:44.390 --> 02:46.340
that's easily possible.

02:46.440 --> 02:49.430
Now drawing an image sounds complicated but it isn't.

02:49.820 --> 02:55.740
I'll use the video player as an image element and this will automatically give me the stream,

02:55.970 --> 03:00.560
then I have to define the boundaries, the dimensions of the canvas.

03:00.560 --> 03:02.840
I want to start in the top left corner, 

03:02.840 --> 03:05.360
that's why I initialize it with 00,

03:05.480 --> 03:11.210
so it uses a two-dimensional coordinate system basically and we want to paste that image in the top left

03:11.210 --> 03:18.710
corner and then span it up to the bottom and the right and the next thing is the width.

03:18.710 --> 03:26.420
Now here, I want to use the default canvas width which I set up in CSS or which I actually limit to the

03:26.420 --> 03:28.260
maximum screen width

03:28.520 --> 03:32.580
because here I clearly have to contain this inside the screen.

03:32.990 --> 03:41.030
Regarding the height though, I need to do a calculation because the height should of course fit the video

03:41.120 --> 03:42.480
aspect ratio.

03:42.800 --> 03:46.730
So here, I will get access to my video player which still has the stream going on,

03:46.730 --> 03:52.740
keep that in mind, even though we draw it here, that doesn't stop the stream and there, I can access video

03:52.740 --> 03:53.740
height,

03:53.810 --> 04:04.080
this gives me, you guessed it, the video height and I'll divide it by the video player, video width divided

04:04.080 --> 04:11.040
by the canvas width because the canvas width is set and by dividing the video player width through the

04:11.040 --> 04:19.770
canvas or by the canvas width, I get the portion of the original source I can use and I

04:19.770 --> 04:25.020
can then apply this on the video player, video height by simply dividing it through that, this make sure I

04:25.020 --> 04:27.470
keep the aspect ratio.

04:27.510 --> 04:32.160
Now I need to stop that stream in the video though because otherwise it keeps on going even though we

04:32.160 --> 04:36.670
closed it and if we keep this stream ongoing, the camera will stay on,

04:36.810 --> 04:43.520
also indicating this of course by, for example on a Mac, having the screen LED light pointing at you.

04:43.590 --> 04:49.590
So you definitely want to turn this off to both save resources and not scare your users.

04:49.590 --> 04:53.190
So we stopped the video by accessing the video player

04:53.460 --> 04:57.490
and on that video player, we now can access the source object.

04:57.510 --> 05:03.950
You remember, that is where we added our stream to and now you could think we just set it to null,

05:03.960 --> 05:05.470
this is not what we do though,

05:05.640 --> 05:13.230
instead we access get video tracks. Get video tracks as you guessed it, gives us access to all the running

05:13.230 --> 05:15.060
video streams on that element,

05:15.390 --> 05:19.410
it's only one here but still, that's the general approach you can use.

05:19.410 --> 05:21.590
You can then use the forEach method

05:22.430 --> 05:29.070
to loop through all the running tracks and basically for each track, you call stop.

05:29.780 --> 05:35.000
So that gives you access to all streams which are currently used on that video player and it will stop

05:35.000 --> 05:36.170
them all.

05:36.170 --> 05:39.290
So with that, let's save this and let's see if it works.

05:39.320 --> 05:46.020
Back in the service worker, I'll bump up that version number and go back to my application, reload once

05:46.020 --> 05:54.470
to get the newest service worker, close and reopen to then activate this new service worker and let's

05:54.470 --> 05:55.370
try it out.

05:55.440 --> 05:57.980
I'll open this, we'll see my image again,

05:58.100 --> 06:06.440
now let me try to smile and click that capture button. And you see, yes I could have looked more intelligently

06:06.520 --> 06:12.960
but what you see is that the stream stopped and we got a picture, exactly what we wanted.

06:13.000 --> 06:14.160
So this is the

06:14.170 --> 06:15.460
first step,

06:15.640 --> 06:20.230
now the next step is to get that picture onto the server.

06:20.380 --> 06:23.060
We'll start working on this in the next lecture.
