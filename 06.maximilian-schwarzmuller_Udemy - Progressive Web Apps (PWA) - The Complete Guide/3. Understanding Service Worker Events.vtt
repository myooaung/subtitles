WEBVTT

00:02.210 --> 00:08.750
You learned that service workers are background processes which can listen to events, now which events

00:08.990 --> 00:10.530
can we listen to?

00:11.060 --> 00:14.670
Now fetch is one of the most important events,

00:14.780 --> 00:19.300
it is triggered whenever the browser or page-related Javascript,

00:19.340 --> 00:25.880
so Javascript running because it was loaded by the index.html or by any HTML page initiates a

00:25.880 --> 00:28.360
fetch which is a HTTP request.

00:28.400 --> 00:35.210
Now that could be because you have an image tag in your HTML code and you obviously point to some

00:35.240 --> 00:42.140
image resource there and when the browser tries to get that image to display it, it actually sends such

00:42.140 --> 00:49.460
a fetch request. You can react to that fetch request in the service worker and you can basically think

00:49.550 --> 00:56.300
of the service worker serving as a network proxy. Every HTTP request sent via fetch

00:56.510 --> 01:03.530
and that is every request sent by the browser due to HTML loading some assets goes through the service worker.

01:03.800 --> 01:10.010
So whenever you load a CSS, JavaScript file because you import it in your HTML file, that triggers

01:10.010 --> 01:16.700
fetch. Whenever you use the fetch API, you will learn more about it in the next course module,

01:16.850 --> 01:23.630
whenever you use that API in your own Javascript code, you also trigger such a fetch request. Important,

01:23.890 --> 01:26.300
you don't trigger a fetch request

01:26.300 --> 01:34.910
if you use a normal traditional Ajax request in Javascript, so the XML HTTP request or any package

01:34.910 --> 01:39.290
like axios which builds up on that, that won't trigger the fetch event.

01:39.740 --> 01:45.890
So with that, the cool thing is since most requests go through the service worker as soon as you start listening

01:45.890 --> 01:50.110
to the fetch event at least, you have ways of manipulating these requests,

01:50.120 --> 01:51.410
you can block them,

01:51.410 --> 01:57.560
you can return cached assets, you can control them basically, really powerful.

01:57.680 --> 02:00.460
Another cool event are push notifications,

02:00.650 --> 02:02.910
these are sent from another server,

02:02.930 --> 02:11.270
basically every browser window like Google for Chrome and Mozilla for Firefox has its own push web push

02:11.360 --> 02:12.470
server.

02:12.530 --> 02:18.140
You can send push notifications to the service from your own server

02:18.650 --> 02:29.120
and then these vendor service of the browser vendors will send this push notification to your client

02:29.120 --> 02:35.750
application and in the service worker, you can listen for such a push event, so for such an incoming push

02:35.750 --> 02:36.940
request.

02:37.010 --> 02:42.650
Why do you do this in the service worker and not in the normal Javascript page? Because remember what

02:42.650 --> 02:43.330
I said,

02:43.370 --> 02:45.900
service workers live in the background

02:45.950 --> 02:49.100
and they even live once all your pagers were closed,

02:49.250 --> 02:56.540
so push notifications obviously are all about getting you as a user back into the application after

02:56.540 --> 02:57.400
you closed it.

02:57.590 --> 02:59.720
If you are still in the application,

02:59.900 --> 03:07.190
yes you maybe still want to push notify the user but it's far more valuable if your phone is in your

03:07.190 --> 03:08.030
pocket,

03:08.210 --> 03:14.450
make your phone ring, give you a push notification. With service workers, you can get this behavior you

03:14.450 --> 03:20.660
know from native applications into your browser web applications and service workers are the key

03:20.660 --> 03:23.960
because they can react to that push notification.

03:23.960 --> 03:29.960
Now once you've got that push notification, you often want to show an alert, a notification to the user

03:30.050 --> 03:32.920
in your application or on the phone.

03:32.940 --> 03:38.450
Now if the user interacts with that, for example he taps on that notification, you can also listen to

03:38.450 --> 03:41.590
that interaction in the service worker to do something with it,

03:41.600 --> 03:46.460
show an example page, load something from the cache, whatever you want to do,

03:46.520 --> 03:52.250
so you can react to the user interaction with notifications in the service worker.

03:52.340 --> 03:53.200
Why do you do that

03:53.210 --> 03:59.890
in the service worker and not in the normal Javascript code? Because again, that might not be loaded,

03:59.990 --> 04:03.530
there might not be a tab open with your web application,

04:03.560 --> 04:10.720
the service worker always runs though, so it's the best place to handle notification interaction. 

04:10.730 --> 04:14.200
Another very useful event is background synchronisation.

04:14.450 --> 04:21.240
Imagine a case where you don't have that good of an internet connection and you send a post.

04:21.290 --> 04:25.080
Now if the internet connection is bad, that will fail.

04:25.490 --> 04:31.920
Now some browsers, mainly Chrome right now but support is getting better as for all these features you learn

04:31.920 --> 04:32.920
in the course,

04:33.080 --> 04:40.340
some browsers allow you to use background synchronisation, which means you store a certain action

04:40.400 --> 04:46.700
if it can't be executed right now and you execute it once Internet connection was re-established.

04:46.700 --> 04:52.730
Now to know when this is the case, the browser which supports background synchronization will issue

04:52.820 --> 04:58.350
a certain event or emit a certain event to which you can listen in the service worker.

04:58.490 --> 05:01.900
Why in the service worker? For the same reason as before,

05:01.970 --> 05:04.390
maybe you already closed the application.

05:04.580 --> 05:11.000
Well the good thing is the service worker is still alive and therefore if internet connection is established

05:11.000 --> 05:17.300
again, you can react to it in the service worker and execute that action you stored and you couldn't

05:17.300 --> 05:23.470
execute earlier, so it allows you basically to do something once the internet connection is re-established,

05:23.480 --> 05:25.040
very useful too.

05:25.520 --> 05:29.590
And then there are also events which are related to the service worker lifecycle,

05:29.700 --> 05:31.660
so the installation and the activation,

05:31.670 --> 05:36.160
I'll come back to the different lifecycle phases and how you activate and use a service worker

05:36.170 --> 05:42.110
in the next lectures. You can hook into these lifecycle phases and execute some code,

05:42.110 --> 05:48.980
for example whilst the service worker is getting installed. These are the main, the most important events

05:48.980 --> 05:51.640
you can listen to in a service worker.

05:51.800 --> 05:54.080
You will see them all, in this course

05:54.080 --> 05:56.170
we're going to cover everything about that,

05:56.220 --> 05:59.660
you will see how to really take advantage of service workers

05:59.840 --> 06:06.080
but with that I'd say let's dive into registering a service worker and understand how we actually set

06:06.080 --> 06:11.120
one up and how we tell the browser that this is not a normal Javascript code

06:11.120 --> 06:16.940
we execute all the time but that we actually want to register a background process.
