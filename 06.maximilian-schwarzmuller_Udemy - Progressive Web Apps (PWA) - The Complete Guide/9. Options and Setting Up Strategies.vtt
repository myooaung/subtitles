WEBVTT

00:02.210 --> 00:05.590
So in the last lectures, we already made some progress,

00:05.600 --> 00:11.860
now let's have a look at which other options we can set up on our strategies when using workboxSW

00:11.950 --> 00:14.570
strategies and then picking one of the strategies.

00:14.690 --> 00:18.190
Of course, I'll also introduce you to alternative strategies.

00:18.590 --> 00:21.110
So let's first have a look at alternative strategies,

00:21.260 --> 00:22.260
here they are.

00:22.340 --> 00:28.040
You have cache first, cache only, network first, network only and staleWhileRevalidate.

00:28.040 --> 00:29.490
Now this is the one we're currently using,

00:29.490 --> 00:33.290
staleWhileRevalidate and the other one should be pretty self-explanatory.

00:33.410 --> 00:39.260
Cache first means that it tries to get it from the cache and falls back to the network

00:39.260 --> 00:44.510
if we don't find it there, it's not the same as staleWhileRevalidate where we will always reach out to

00:44.510 --> 00:50.000
the network, just as in cache then network. Cache only obviously means it will just look at the cache, we

00:50.000 --> 00:55.340
have network first which allows you to reach out to the network first and to the cache if that fails

00:55.460 --> 00:58.610
and network only to only reach out to the network.

00:58.670 --> 01:02.660
Now there are also different options besides cache name.

01:02.660 --> 01:08.360
So if we scroll down on this page and you can find this page in the last lecture of this module too,

01:08.360 --> 01:14.030
if we scroll down, you see the options you can pass to all the strategies.

01:14.030 --> 01:20.330
Here you see an example, it's simply a Javascript object passed to the strategy as we already do it and we already

01:20.330 --> 01:21.800
use cache name.

01:21.800 --> 01:27.770
Now as you see, other things you can use is cache expiration which also takes a Javascript object and there you

01:27.770 --> 01:30.400
can for example limit the cache entries to 10

01:30.560 --> 01:33.920
and then for every new entry, the oldest one will be removed.

01:33.950 --> 01:37.340
You can also define an age for the cache,

01:37.370 --> 01:43.850
that's pretty cool because workbox will manage this timer behind the scenes through indexedDB,

01:43.970 --> 01:49.880
so it'll basically store a timestamp on every item it adds and then whenever it basically takes

01:49.880 --> 01:55.560
action, it checks the timestamps and sees if something needs to be removed due to your age set up here

01:55.880 --> 01:58.100
and this is in seconds as it implies.

01:58.280 --> 02:04.040
So here you can really control that items only stay in the cache for let's say a day, a week, two weeks,

02:04.040 --> 02:05.320
whatever you need.

02:05.780 --> 02:07.880
You can broadcast a cache update,

02:07.880 --> 02:11.910
now this is something advanced where you could listen to this message,

02:12.010 --> 02:17.960
not really something you use that often probably. The cache it will respond to is interesting since here

02:17.960 --> 02:19.040
in this object,

02:19.070 --> 02:25.820
you can define which statuses should be cached, so you could say I only want to cache success statuses

02:25.880 --> 02:27.800
and that's actually the default

02:28.010 --> 02:31.760
but you could also say I'm also interested in not found errors

02:31.790 --> 02:38.150
for whatever reason or you say, I want to analyze the headers of the response. So only if the header

02:38.150 --> 02:43.520
for example is content-type HTML, only then I want to store it

02:43.970 --> 02:45.940
and that is the core set up.

02:45.940 --> 02:47.380
Now here you can read more about that

02:47.390 --> 02:54.200
but these are the main things to set up, the workbox toolset also is still growing,

02:54.200 --> 02:59.100
so chances are this is getting better documentation and more options in the future

02:59.330 --> 03:01.810
but for now, this is the feature set you can work with.

03:01.940 --> 03:06.640
Definitely check this page again in case you want to dive deeper into something

03:06.770 --> 03:09.920
and let's use this cache expiration in our project now.

03:09.920 --> 03:19.020
Let's say that we want to store these fonts but only for a certain amount of time because that includes

03:19.020 --> 03:24.390
the material icons and if they update, maybe we don't get the latest ones, even though we do we use

03:24.400 --> 03:27.010
the staleWhileRevalidate which will update it

03:27.020 --> 03:33.680
but still, let's add cache expiration here and you'll see that's this option.

03:34.010 --> 03:40.820
It takes an argument or a value which is another Javascript object and there you can specify max

03:40.820 --> 03:46.460
entries and/or max age seconds, we can use either of the two or both together.

03:46.460 --> 03:53.940
So here I'm saying max entries, that should be three because I'm not aware that my project has more three,

03:53.960 --> 04:00.320
so I don't want to store more than three and max age seconds and let's say I want to make sure that I fetch

04:00.380 --> 04:03.840
update versions, at least once a month.

04:03.860 --> 04:12.410
So here I could say I want to fetch it every 60 seconds times 60 minutes per hour times 24 hours per

04:12.410 --> 04:16.700
day times maybe 30 days per month.

04:16.700 --> 04:19.800
So this set up again means every 60 seconds

04:19.850 --> 04:25.880
but that's not enough so every hour is if we multiply it by 60, every day is if we multiply it by 24, every

04:25.880 --> 04:30.560
month is if we multiply by 30, 31, 28, whatever you like.

04:30.560 --> 04:33.230
So this is now my Google fonts as set up 

04:33.230 --> 04:35.790
and let's see what this changed.

04:36.050 --> 04:38.720
So I'll open up the terminal and run npm run

04:38.750 --> 04:45.950
generate-sw, npm start is still running in the other tab for me and I'll have a look at this now.

04:46.040 --> 04:49.950
So here, I'll again clear my storage to start fresh,

04:50.210 --> 04:51.680
reload,

04:51.680 --> 04:55.770
reload again to give the dynamic cache a chance of filling up

04:55.850 --> 04:59.690
and now if we refresh this, in Google fonts we still see these items

04:59.990 --> 05:05.150
but now if you refresh indexedDB and make sure to close and open your developer tools in case this is

05:05.150 --> 05:09.250
not working, you'll see there's not only your post store,

05:09.530 --> 05:13.710
there is the precaching set up for one, here all the asset revisions are tracked

05:13.730 --> 05:20.090
and that's what I meant with if we update a file and rerun the generate command, it will give changed

05:20.090 --> 05:25.710
files a new hash and update it here to make sure that it then fetches them new

05:25.940 --> 05:30.520
but we also get this cache expiration storage for Google fonts

05:30.770 --> 05:35.290
and here you see the different elements with their timestamps.

05:36.270 --> 05:38.550
Timestamps are also stored here

05:38.910 --> 05:46.770
and then again this mapping of the timestamp and the asset and this timestamp is basically what workbox

05:46.770 --> 05:52.300
manages and checks automatically for us to remove elements from our cache here,

05:52.320 --> 05:59.280
so from Google fonts whenever one month passed after this item has been added or updated for

05:59.280 --> 06:00.680
the last time.

06:00.720 --> 06:07.200
So this is another cool and powerful feature using these options and especially managing cache expiration.
