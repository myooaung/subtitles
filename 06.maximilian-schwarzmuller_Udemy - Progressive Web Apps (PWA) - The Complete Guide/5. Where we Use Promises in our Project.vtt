WEBVTT

00:02.160 --> 00:04.910
I walked you through the basic features of promises

00:05.030 --> 00:11.740
and with that, this set up here when we register a service worker should make more sense. Here

00:11.750 --> 00:17.540
we first of all access the service worker, then we call register and register is just a method call on

00:17.540 --> 00:18.760
service worker.

00:18.830 --> 00:26.930
This method happens to return a promise and therefore we can call then to react to the case or to the

00:27.170 --> 00:34.280
event that the promise resolved. In this case, this will be done automatically by Javascript when the service

00:34.280 --> 00:35.840
worker is registered,

00:35.840 --> 00:40.620
so this service worker API is exposing a promise to us here.

00:40.820 --> 00:45.780
We could also chain catch to handle the case that this failed,

00:45.860 --> 00:53.030
so here catch with a function which is executed in that case would allow us to catch any cases where for

00:53.030 --> 00:59.210
some reason, we're not able to register a service worker, then this would be executed, shouldn't occur

00:59.210 --> 01:00.390
too often though.

01:01.130 --> 01:09.290
And we also use a promise in the service worker, here when we respond with fetch. I'll come back to fetch

01:09.290 --> 01:17.030
in the next lectures but basically respond with expects a promise because respond with expects asynchronous

01:17.030 --> 01:20.930
code and this is handled via promises in service workers,

01:20.930 --> 01:27.170
there we work a lot with promises. Fetch returns a promise which will resolve as soon as this network

01:27.170 --> 01:28.570
request is done

01:28.970 --> 01:36.130
and later in the course, we will also use then and catch on fetch to handle these manually.

01:36.140 --> 01:38.960
So this is another place where we use a promise,

01:39.080 --> 01:44.540
the one thing it has in common with the registration is that we don't create the promise on our own

01:44.540 --> 01:45.790
as we do down there.

01:45.950 --> 01:51.830
As I mentioned, you don't do that too often, only if you want to wrap your own asynchronous code into

01:51.830 --> 01:59.030
a promise but a lot of the built-in APIs exposed by Javascript in the browser use promises and

01:59.030 --> 02:04.700
that's why you have to be aware of what happens behind the scenes, they resolve or reject and how you

02:04.700 --> 02:05.990
can handle these values with

02:06.050 --> 02:12.590
then, the second argument to then or better than that, catch in error cases.

02:12.590 --> 02:14.150
So this is promises

02:14.300 --> 02:18.610
and with that of the way, let's move on to the fetch API next.

02:18.710 --> 02:23.930
We already use it here in the service worker and it's important to understand what fetch actually does.
