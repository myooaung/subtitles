WEBVTT

00:02.180 --> 00:08.720
I mentioned in the last lecture that we want to use vapid keys to protect our push messages and

00:08.720 --> 00:15.030
make sure we only send them from our application server and no one else can send them.

00:15.230 --> 00:19.800
Now for that, we'll install a package which we'll also use on our back-end,

00:19.970 --> 00:24.590
now keep in mind our back-end, that's our Firebased cloud function here,

00:24.590 --> 00:30.550
this is our back-end code and this could run on any of your node servers too of course.

00:30.680 --> 00:36.950
Now if you're not using NodeJS on your back-end, there are of course also packages for other frameworks,

00:36.980 --> 00:38.430
other languages like PHP

00:38.460 --> 00:46.370
to use web push and generate vapid keys, you'll just have to google search for your own framework

00:46.430 --> 00:53.900
or back-end language of choice and vapid or web push to find fitting libraries. For our project

00:53.900 --> 00:54.490
here,

00:54.650 --> 00:59.060
I'll go into that functions folder in my project folder here, in my terminal,

00:59.060 --> 01:00.300
that's the normal terminal,

01:00.320 --> 01:07.100
just integrate it into my IDE and there I will run npm install --save to also store an entry in the package.json

01:07.200 --> 01:14.930
file web-push. This will install this web push package which will allow us to generate

01:14.930 --> 01:19.740
these vapid keys and also later send the push messages themselves.

01:19.830 --> 01:27.050
Now in the package.json file, I can add a new section which I'll name scripts which holds a Javascript

01:27.080 --> 01:33.710
object of our own scripts we can run and I will set one up to easily generate such vapid keys by using

01:33.710 --> 01:39.000
this web push package from the command line. I'll name the script web push

01:39.080 --> 01:43.180
but you can use any name you want and the value is also web push.

01:43.340 --> 01:45.670
Now this is not anything you want,

01:45.680 --> 01:46.940
this is the package name,

01:47.060 --> 01:54.950
so this will just execute the package and this gives us a convenient way of running npm run web push which

01:54.950 --> 01:59.630
will just give an error because this command like this doesn't do anything.

01:59.630 --> 02:02.090
It gives us hint at how we may use it though,

02:02.330 --> 02:06.660
send notification, that's something we'll later use directly from our NodeJS

02:06.690 --> 02:09.420
code but generate vapid keys,

02:09.590 --> 02:12.890
that's a great command to generate these key-value pairs

02:12.890 --> 02:16.440
we need to authenticate our requests.

02:16.460 --> 02:20.270
Now we only need to generate one per application

02:20.270 --> 02:23.000
basically, this doesn't change later on.

02:23.240 --> 02:27.740
You can change it but then you will render your existing subscription useless,

02:27.740 --> 02:30.560
so you only run this once during development.

02:30.560 --> 02:39.920
So I'll re-run npm run web push blank, generate -vapid keys and this will give us a public

02:39.920 --> 02:41.880
key and a private key.

02:41.930 --> 02:44.180
Now we'll use the private key later on the server,

02:44.180 --> 02:46.140
for now we need the public key.

02:46.250 --> 02:50.120
So let's copy that key, go back to our application, to the app.js

02:50.150 --> 02:58.640
file and let's quickly store it in a variable and I'll name this variable vapidPublicKey.

02:58.700 --> 02:59.710
So that's the string

02:59.780 --> 03:01.980
and that's the string I just copied.

03:02.150 --> 03:09.200
Now we don't pass this key to the subscribe method though, the subscribe object here actually expects

03:09.200 --> 03:14.070
a Uint8Array. Now attached to this file,

03:14.110 --> 03:22.100
you will find a function, a text file basically with a function which you can add to your utility.js

03:22.100 --> 03:23.180
file,

03:23.220 --> 03:28.970
it's this urlBase64Uint8Array helper function.

03:28.970 --> 03:31.180
Now this might look very complicated,

03:31.310 --> 03:32.930
you don't need to write it from scratch,

03:33.050 --> 03:38.120
it will convert and URL base 64 string which we have,

03:38.120 --> 03:40.520
that's the public vapid key

03:40.550 --> 03:44.400
to an array of Uint8 values.

03:44.720 --> 03:48.590
Now that is exactly what we need to pass to that subscribe method

03:48.590 --> 03:54.920
and that's a useful helper function which we can use in app.js because app.js gets

03:54.920 --> 04:00.890
imported after utility.js where we define the helper function.

04:00.950 --> 04:08.150
So now, I'll create a new variable here and this is a variable I'll name convertedVapidPublicKey

04:09.220 --> 04:09.720
.

04:09.760 --> 04:16.630
and of course you can pick a shorter name if you like. Here I will execute this helper function,

04:16.650 --> 04:22.600
so this urlBase64Uint8Array function and pass the vapid public key to it.

04:23.480 --> 04:29.580
By doing that, I now have the value I actually need to pass to the subscribe object and

04:29.630 --> 04:32.860
I do so by adding a second property to it

04:33.140 --> 04:42.810
and this has to be named application server key and the value is converted public key. With

04:42.810 --> 04:48.140
that set up, we're passing something to our back-end soon or right now we're just generating a

04:48.140 --> 04:56.120
subscription with a clear identification of a server who's allowed to send push messages.

04:56.120 --> 05:01.700
Now this alone of course doesn't identify our server but since we'll later store the private key on

05:01.700 --> 05:08.000
the server, we'll have the counterpart and then the browser window or server is basically able to match

05:08.030 --> 05:13.070
both together and find out that our application server is authenticated.

05:13.160 --> 05:20.510
So that generates our subscription, the subscription like this isn't worth much though, we have to make

05:20.510 --> 05:25.360
sure that we pass the subscription to our back-end.

05:25.580 --> 05:31.250
So I will return the subscription here and in the else case I just don't do anything here

05:31.550 --> 05:34.610
and then I'll continue with then.

05:34.690 --> 05:42.100
Now here, I will actually get a new subscription in my function which gets executed because subscribe

05:42.100 --> 05:43.270
returns a promise,

05:43.300 --> 05:48.430
so therefore here we resolve the promise and we get this new subscription.

05:48.430 --> 05:54.900
Now this new subscription is what I want to pass to my server now.

05:55.030 --> 05:59.950
Now to my server of course means my Firebase server,

06:00.210 --> 06:02.680
here it is, let me close this.

06:02.680 --> 06:09.850
Here I got my real time database and in this database where I store my posts, I also want to store

06:09.850 --> 06:11.740
my new subscriptions.

06:11.740 --> 06:20.010
Now for that, we can simply copy that URL here and now issue a new post request

06:20.050 --> 06:20.880
to that URL

06:20.890 --> 06:24.760
and then a subscriptions node which will get created automatically.

06:25.020 --> 06:31.850
So I will use fetch for that, pass the URL and there as I just said maybe store it in a subscriptions node,

06:31.900 --> 06:34.180
don't forget to add .json

06:34.210 --> 06:41.300
when directly targeting the database interface on Firebase and I'll pass an object to configure this

06:41.330 --> 06:45.290
request because of course it shouldn't be a get request,

06:45.310 --> 06:48.280
it should be a post request by adding that method,

06:48.490 --> 06:55.730
I want to set the appropriate headers. So here I will set content type to be application/json

06:55.730 --> 07:00.370
and I also only accept values of that type,

07:00.580 --> 07:08.770
so application/json as a response, lowercase J. So these are the headers and of course

07:08.770 --> 07:10.500
I need to send the body,

07:10.570 --> 07:17.760
now here I will use JSON.stringify to turn a Javascript object into JSON and I will pass my new

07:17.760 --> 07:22.320
subscription as we get it back from the subscribe method to it.

07:22.690 --> 07:27.470
So now I'm sending a post request to my database to store my subscription there

07:27.700 --> 07:35.270
and with that, I'll return this too, fetch of course also returns a promise. Now I'll chain another

07:35.300 --> 07:36.660
then call here,

07:36.830 --> 07:39.180
so we have quite a lot of then calls

07:39.190 --> 07:40.850
and this shows the power of promises,

07:40.850 --> 07:42.740
it's still quite readable,

07:42.740 --> 07:44.520
imagine this with callbacks,

07:44.540 --> 07:51.180
we would be in callback hell already. Now this function holds the response of the server,

07:51.440 --> 07:58.070
the thing I want to do here though is I simply want to display my confirm notification, that we successfully

07:58.070 --> 07:59.190
subscribed.

07:59.510 --> 08:04.970
So here I'll remove from service worker because I now just want to say I successfully subscribed,

08:04.970 --> 08:06.450
the rest should still work

08:06.530 --> 08:09.680
and I subscribe as soon as I have back a response.

08:10.010 --> 08:13.590
Well maybe we check if response is OK,

08:13.700 --> 08:18.910
OK is this helper variable which is true whenever we have a 200 something response

08:18.920 --> 08:20.110
because then we know

08:20.120 --> 08:23.440
yes it indeed was successful.

08:23.450 --> 08:31.430
Now we display our notification and I'll catch any error happening in any of the steps prior to catch

08:32.360 --> 08:38.030
and there I just want to log it so that during development, I can easily find out why something isn't

08:38.030 --> 08:39.090
working.

08:39.170 --> 08:44.920
With that, we get a set up to send, to create a new subscription and send it to the server, let's now

08:44.960 --> 08:48.560
see if that works as it should work. For that

08:48.560 --> 08:54.700
I'll save it and go back to my application, there to the application tab and clear the site data,

08:55.640 --> 08:57.500
refresh the page of course

08:57.800 --> 09:05.230
and let's now create a new notification, new subscription excuse me, by clicking enable notifications.

09:05.230 --> 09:07.980
Now let's check our database,

09:07.990 --> 09:14.140
there we get the new subscriptions node with an object with this ID automatically assigned by Firebase

09:14.670 --> 09:21.370
and in there, this is now the subscription object generated by this subscribe method here.

09:22.510 --> 09:25.480
This object as you can see holds an endpoint

09:25.660 --> 09:29.130
and this is one of Google servers for Chrome

09:29.130 --> 09:33.160
basically, that's the endpoint I meant on this browser window server.

09:33.160 --> 09:34.150
It's not our server,

09:34.180 --> 09:35.440
we can't access it

09:35.530 --> 09:38.750
but this is the URL we have to send push messages to

09:38.920 --> 09:40.780
and even though it looks quite cryptic,

09:40.910 --> 09:44.390
anyone with that URL could send the messages

09:44.680 --> 09:46.590
but here comes the interesting part,

09:46.600 --> 09:52.710
the keys. Here we get two keys, an auth key and a p256dh key,

09:52.720 --> 09:54.430
now both look very cryptic.

09:54.430 --> 10:03.520
The cool thing is these keys in the end incorporate our vapid information or all three things together

10:03.770 --> 10:11.080
incorporate our vapid public key information. As soon as we start sending push messages from our application

10:11.080 --> 10:12.070
server,

10:12.130 --> 10:19.900
we need to pass auth and that p256dh key as well as our private vapid key

10:20.290 --> 10:22.570
and then there's web push package

10:22.570 --> 10:30.580
will use all that information to send a push request to this endpoint which identifies itself as coming

10:30.580 --> 10:35.220
from our identified and verified application server.

10:35.230 --> 10:40.180
So this is all the information we need to send a push request together with the private key which

10:40.180 --> 10:41.470
we're not using yet

10:41.800 --> 10:49.030
but with that, let's start working on the server side to send new push requests to our web app.
