WEBVTT

00:02.160 --> 00:04.150
Now that I walked you through the documentation

00:04.190 --> 00:10.850
in the last lecture, let's enhance our project by at least enhancing our build workflow a little bit.

00:11.240 --> 00:15.130
For example, I want to make sure that my Javascript files are minified,

00:15.380 --> 00:21.140
they're not super big but there's no reason to ship them to our production server like this.

00:21.140 --> 00:27.680
So for this I'm going to install a new package, I'm going to open up the terminal for this and run npm

00:27.680 --> 00:36.750
install --save-dev uglify-js which is a popular package to minify

00:36.800 --> 00:39.590
your Javascript code. With that installed,

00:39.590 --> 00:44.220
we can go to the package.json file and add a new script and I'll name it

00:44.230 --> 00:45.290
minify.

00:45.710 --> 00:50.060
Now in the script, I want to execute this uglify.js command,

00:50.180 --> 00:53.120
so this is now available since we install the package.

00:53.120 --> 00:55.080
Side note, this is no typo,

00:55.100 --> 00:58.100
the package was named uglify-js,

00:58.340 --> 01:03.640
the command is named uglify.js. Little bit like with workbox and workbox-cli.

01:04.100 --> 01:11.160
So here, uglify.js takes two inputs in a very simple form and that is first the file we want to minify.

01:11.210 --> 01:13.260
So that could be

01:13.320 --> 01:18.280
public/src/js/app.js, the path is to be seen relative from where you run this command,

01:18.290 --> 01:26.130
so from this package.json file. Then we can add -o to specify the name of the output file

01:26.240 --> 01:34.150
and this can be public/src/js/app.min.js maybe, to indicate it's minified.

01:34.270 --> 01:37.360
So in the same folder sitting next to the original file

01:37.520 --> 01:44.190
and of course, you can set up a more elaborate set up where you have like a build folder and then

01:44.240 --> 01:47.690
an output folder, here I'll manage it in the same.

01:47.690 --> 01:55.640
Now I'll add two options, --compress and --mangle, this defines that it should really

01:55.640 --> 02:03.380
try its best to make it as small as possible and now I can repeat this. So I can copy this full command

02:03.920 --> 02:10.670
and with two and signs, I can change it one more time to do the same not for the app.js file but

02:10.670 --> 02:15.030
for the feed.js file and then repeat it again,

02:15.780 --> 02:20.620
this time not for the app.js file but for the fetch.js file.

02:20.730 --> 02:23.080
So I'm moving through all the Javascript files

02:23.310 --> 02:28.800
and yes of course you can use a more elaborate set up where you manage this in a separate Javascript

02:28.800 --> 02:33.140
file which you execute with Node or where you sculp or something like that.

02:33.360 --> 02:41.520
For this project, this will do though, I'll do the same for IDB and so on, simply just chaining all these

02:41.520 --> 02:47.000
things to make sure I minify all my Javascript files. Material min is already minified,

02:47.040 --> 02:48.780
so I'll continue with the promise

02:49.080 --> 02:58.330
and then finally with my utility.js file. And again, the goal of this practice is not to get you

02:58.330 --> 03:01.660
to write this code for every new project you set up,

03:01.750 --> 03:06.910
you probably want to use a workflow tool like web pack or whatever but I want to show you that

03:06.910 --> 03:11.870
minification is something you should also have in mind when working with service workers.

03:12.040 --> 03:17.290
And if you have a simple project like this one where you don't have many Javascript files, not that uncommon

03:17.290 --> 03:17.890
too,

03:18.100 --> 03:21.780
well then this approach is absolutely fine.

03:21.850 --> 03:25.130
Now with that, we also got our generate-sw command,

03:25.360 --> 03:33.210
so now I'll add a new command which I'll name built and there, I simply want to execute npm run minify

03:33.820 --> 03:35.560
and then followed by npm run

03:35.680 --> 03:40.210
generate-sw. So I first execute this script to minify everything

03:40.360 --> 03:44.740
and then this to create my updated service worker.

03:44.770 --> 03:49.960
However, there is one thing which wouldn't work as expected right now,

03:49.960 --> 03:58.690
do you know which? Well we're creating a bunch of new Javascript files and remember, what are we

03:58.690 --> 03:59.740
precaching?

03:59.770 --> 04:01.340
Let's have a look at our config.

04:01.690 --> 04:04.150
We precache all Javascript files,

04:04.180 --> 04:10.390
now that of course is bad because this means we also precache the old files, not the minified ones

04:10.450 --> 04:12.530
and I only want to use the minified ones,

04:12.700 --> 04:19.240
so I have to make two adjustments. First in the index.html file, I have to make sure I only load the

04:19.240 --> 04:26.930
minified files by simply adding .min on all of them since that's what I renamed them after

04:26.950 --> 04:30.950
uglifying, the same in the help index.html file, there

04:31.030 --> 04:36.070
I also want to load the minified versions. Now that's one step

04:36.160 --> 04:39.480
but of course I need to make sure I only cache the minified versions then.

04:39.670 --> 04:42.180
There's no sense in caching the original versions,

04:42.190 --> 04:47.360
I don't even load them, so they will just occupy occupy the cache unnecessarily.

04:47.380 --> 04:54.070
Now this can be achieved by simply going in there and getting rid of Javascript in this globPattern

04:54.100 --> 04:58.210
so that it doesn't add all Javascript files.

04:58.270 --> 05:05.230
Instead, I'll add a new pattern where I'll say in the source Javascript folder, I want to cache all files

05:05.230 --> 05:07.580
which end with

05:07.600 --> 05:08.740
.min.js,

05:08.740 --> 05:12.580
so now I should only precache the minified files.

05:12.600 --> 05:19.590
Now with that, let's take advantage of our new build command here by running npm run build and now it should

05:19.640 --> 05:22.410
minify everything and then generate the new service worker.

05:22.690 --> 05:25.920
So this takes a couple of seconds, with it finished,

05:25.930 --> 05:28.980
let's have a look at the new service worker, there

05:29.110 --> 05:35.510
if we have a look at the precached files, we see it's indeed only precaching the

05:35.530 --> 05:37.890
Javascript files with .min in it.

05:38.260 --> 05:40.330
So with npm start still running,

05:40.540 --> 05:42.850
so our development server still running,

05:42.850 --> 05:46.480
I can go back to my application, clear my storage,

05:46.480 --> 05:48.150
wouldn't even need to do that

05:48.160 --> 05:53.360
but no matter. Reload the page twice to also have dynamic caching in place

05:53.770 --> 06:00.010
and now let's have a look at our cache storage. There in the precaching storage,

06:00.010 --> 06:05.340
we see we only got the min versions, so now if we go offline, does it still work?

06:06.180 --> 06:08.460
That still looks good to me,

06:08.550 --> 06:13.840
everything working as before even though it's now minified.

06:14.340 --> 06:18.810
So this is now our improved application with our own,

06:18.810 --> 06:26.550
at least see my build process with minification in place and with our old service worker which now

06:26.550 --> 06:28.830
only caches the minified assets.
