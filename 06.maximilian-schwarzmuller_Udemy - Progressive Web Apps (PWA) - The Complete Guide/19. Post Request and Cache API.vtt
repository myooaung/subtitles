WEBVTT

00:02.060 --> 00:04.680
That was a lot about caching strategies,

00:04.850 --> 00:11.240
I don't want to introduce any new strategies but I want to bring up a case which might then be clear

00:11.240 --> 00:17.040
about how it works. In the feed.js file in our cache then network strategy,

00:17.040 --> 00:21.910
we have a fetch request and this of course is a get request.

00:22.010 --> 00:27.550
Now what would happen if that actually is a post request?

00:27.710 --> 00:28.880
Let's try it out.

00:29.210 --> 00:34.090
Let's add an object as a second argument to fetch to configure this,

00:34.150 --> 00:36.860
let's set method to post

00:37.220 --> 00:40.020
and we also need to adjust the headers.

00:40.370 --> 00:46.900
Let's set the headers to content-type application/json

00:46.920 --> 00:53.310
and do the same for the type we accept,

00:53.520 --> 01:02.840
so here accept should also be application/json. Lastly, I'll add a body and this body will simply be

01:03.350 --> 01:07.700
an object where I have a message, some message, we're not using this anyways.

01:07.910 --> 01:15.270
Now if I send it to HTTP bin post and this is a post request, so we send this to this URL, it will mirror

01:15.270 --> 01:20.120
back what we send there and it doesn't really matter because we don't really use that anyways.

01:20.150 --> 01:21.870
Now one thing I forgot,

01:21.950 --> 01:24.260
you of course need to stringify this,

01:24.380 --> 01:27.520
so make sure to do that before testing it.

01:27.520 --> 01:29.190
Now we can test it.

01:29.200 --> 01:36.490
Now let's go back to application clear storage, clear site data, reload the application, this will reinstall

01:36.580 --> 01:41.360
the service worker. Let's reload one more time

01:41.580 --> 01:48.330
and what you see is we get it back from cache too. If we have a look at the cache unsurprisingly, in the

01:48.330 --> 01:54.060
dynamic cache, we'll see that the post request is stored there too. Now the thing is theoretically you

01:54.060 --> 02:01.050
can't store post requests in the cache, it's storing the response of the post request here though, it's

02:01.050 --> 02:08.460
not storing the post request itself or something like that, just what we got back so that if we send

02:08.460 --> 02:16.400
it again here, the thing is we have the post request here but let's go offline and try this. Here

02:16.510 --> 02:22.140
if we have a look at the network, you'll see post fails in all places.

02:22.140 --> 02:25.440
Now the reason for that is that we can't send it,

02:25.440 --> 02:28.650
we obviously have no internet connection.

02:28.830 --> 02:35.600
It is able to still render the card because we find a matching URL in the cache

02:35.760 --> 02:36.930
and that's what we're checking,

02:36.960 --> 02:38.530
do we have this URL in the cache,

02:38.580 --> 02:45.000
yes we do have that there because we put the response of the post request there but it does not mean

02:45.000 --> 02:47.780
that we can't send the post request when we're offline,

02:47.790 --> 02:51.630
it's not storing it and sending it at a later point of time.

02:51.630 --> 02:57.620
Now throughout the course, you will learn a method to do just that but it's not working like that with the cache.

02:57.630 --> 03:03.990
This is important for you to recognize or to keep in mind, if I go online again, it's not going to send

03:03.990 --> 03:05.880
that request which it couldn't send earlier,

03:06.000 --> 03:07.610
that's not how it works.

03:07.650 --> 03:15.720
Later in the course, you will learn a way to do just that though. So that are post requests and the cache

03:15.720 --> 03:16.260
API.
