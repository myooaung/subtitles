WEBVTT

00:02.270 --> 00:09.180
In the last lecture, we added some basic set up to ensure that once we click post here, we have to enter

00:09.250 --> 00:09.920
valid data.

00:09.960 --> 00:13.790
Now here it doesn't work yet because what I have to do of course is save,

00:13.920 --> 00:16.070
go back to the service worker,

00:16.080 --> 00:22.800
bump up the static version here so that the new feed.js file also gets used or just clear

00:22.800 --> 00:24.320
the storage here and reload,

00:24.330 --> 00:26.310
that of course is always the option, let

00:27.290 --> 00:29.610
me get rid of this question mark at the end of the URL

00:29.780 --> 00:34.790
and now we should see that if I click post here, I get an alert that I need to enter valid data, as soon as I do enter

00:34.790 --> 00:36.850
valid data though, it slides down.

00:36.860 --> 00:39.370
Now of course we don't do anything with that data,

00:39.380 --> 00:41.290
that's the goal of this lecture.

00:41.300 --> 00:49.070
Now I want to register this sync task and for that, I will first of all check if we do have access

00:49.070 --> 00:54.500
to service workers in a given browser because otherwise there is no use in doing that because

00:54.560 --> 00:59.180
we can't use background synchronization anyways because we can't use servers workers.

00:59.330 --> 01:05.610
Now however, we also have to check if this sync manager is available in window. Now

01:05.720 --> 01:11.960
sync manager is basically the API through which we use the background synchronization features and it's important

01:11.960 --> 01:15.290
to understand how browsers support looks like for that feature.

01:15.290 --> 01:21.400
For that, we can inspect the sync manager API document here on MDN, link of course can be found in the

01:21.400 --> 01:22.920
last lecture of this module

01:23.120 --> 01:25.060
and there you find how to use it,

01:25.100 --> 01:30.380
not that difficult as you can see, only get two methods and you see the browser compatibility.

01:30.380 --> 01:32.630
Now as you can see, it's pretty scarce right now,

01:32.770 --> 01:39.180
Chrome supports it and Edge and on mobile, also Chrome for Android supports it and Edge.

01:39.320 --> 01:45.440
So basically, most browsers don't support it yet, though Chrome for mobile already is a big thing,

01:45.440 --> 01:49.150
I always will say that, that reaches a big audience already

01:49.280 --> 01:54.560
and of course chances are very high that other browser vendors will soon support this too,

01:54.560 --> 01:57.340
it is in development for these browsers.

01:57.410 --> 02:02.960
So with that, we know what the browser support looks like but that also makes clear why we need to check

02:02.960 --> 02:06.530
for sync manager, even if a browser support service workers,

02:06.620 --> 02:08.900
it might not support sync manager.

02:09.020 --> 02:15.800
Therefore with these checks here in place, now I can safely we use background sync inside of that if

02:15.800 --> 02:16.490
statement.

02:16.670 --> 02:23.060
First of all, I will reach out to my service worker and there I can call the ready property to make sure

02:23.060 --> 02:29.450
that it has been configured, that it is installed and activated, that it is ready to take some input. Ready

02:29.480 --> 02:33.120
returns a promise and therefore I can chain

02:33.170 --> 02:40.190
then at the end. So this simply will be executed, the function in here will be executed and give me access

02:40.190 --> 02:41.190
to the service worker

02:41.210 --> 02:48.270
once it verified that the service worker is ready, that's an asynchronous task hence then. Now inside

02:48.330 --> 02:51.790
then, I now can interact with the service worker and that's important.

02:51.790 --> 02:53.990
Keep in mind I'm still working in the feed.js

02:54.090 --> 02:55.140
file,

02:55.170 --> 02:57.510
I'm not writing this code inside the service worker

02:57.510 --> 03:00.090
which is why I need to get access to it like so. Now

03:00.120 --> 03:06.750
the reason I'm doing it like this is because the event which triggers the background synchronization

03:06.750 --> 03:10.530
set up happens in the feed.js file.

03:10.560 --> 03:15.240
I can't listen to that event in the service worker because I can't listen to the form submission

03:15.240 --> 03:15.880
there,

03:15.900 --> 03:17.680
that is why I have to do it in feed.js

03:17.690 --> 03:20.560
and that is why I reach out to the service worker like that.

03:20.880 --> 03:28.170
Now however we can work with the service worker and I want to register my sync event with it.

03:28.170 --> 03:31.650
We do this by using the service worker and calling sync,

03:31.650 --> 03:32.480
this gives us access to

03:32.490 --> 03:38.940
the sync manager now from the service workers point of view and there we can call the register method.

03:39.050 --> 03:44.100
The register method just as you would assume allows us to register a synchronization task with the service

03:44.100 --> 03:44.860
worker.

03:44.940 --> 03:48.740
It takes only one input and that is an ID, a tag

03:48.750 --> 03:53.480
we can add or we can use to clearly identify a given synchronization task.

03:53.670 --> 03:56.170
So here, I'll give it the name of sync new post,

03:56.190 --> 03:58.000
you can choose any string you want

03:58.000 --> 04:05.220
here, we'll later use that in the service worker to react to re-established connectivity and check which

04:05.220 --> 04:06.770
outstanding tasks we have

04:06.960 --> 04:11.060
and then we can use the tag to find out what we need to do with the task.

04:11.070 --> 04:14.060
So for now, we only register the tag.

04:14.160 --> 04:21.090
Of course we don't have all the information we need yet though, we also need to find out what we should

04:21.090 --> 04:22.260
we do, what should we send,

04:22.260 --> 04:25.540
what's the data we want to send with that request.

04:25.560 --> 04:31.890
That's something I'll add in the next lecture when we configure this synchronization and make sure we also store

04:31.950 --> 04:35.040
the data we want to send in indexedDB.
