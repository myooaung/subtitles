WEBVTT

00:02.140 --> 00:07.740
So in the last lecture, we recognize that we might need to clear the database before we re-populate it.

00:08.020 --> 00:15.780
So back in the utility.js file, I'll add a new function and I'll simply name that function

00:15.800 --> 00:21.790
clearStorage or to stay in line with the other names, maybe clearAllData,

00:21.790 --> 00:25.930
you need to provide the storage for which you want to remove all data though.

00:26.530 --> 00:34.500
Now in there as before, I'll return my promise and then we access then on the promise

00:35.170 --> 00:40.510
and then in the then block, we get a function in which we get access to that database returned by the

00:40.520 --> 00:41.650
database promise. 

00:42.690 --> 00:48.940
Now in there it's the old pattern, create a transaction with DB transaction, pass the store for which you

00:48.940 --> 00:52.920
want to do a transaction and define which kind of transaction it is.

00:53.000 --> 00:56.800
Now clearing definitely requires write access,

00:56.800 --> 00:59.710
so let's use readwrite here.

00:59.830 --> 01:06.820
With that, the next step is to open the store, so tx object store gives us access to the store, pass

01:06.850 --> 01:12.370
the store we want to open as an argument and then we can call store clear to simply remove elements

01:12.370 --> 01:13.320
from that store,

01:13.420 --> 01:17.370
all the elements. Then I return tx complete,

01:17.500 --> 01:24.040
here that is required because clear of course is a write operation and on every write operation, you

01:24.040 --> 01:30.670
want to return tx complete to make sure that you keep that database integrity and don't get an error,

01:30.790 --> 01:35.260
so that you definitely finished the transaction successfully.

01:35.260 --> 01:41.710
So with that, we clear everything from the store and now we can go back to the service worker here and

01:41.710 --> 01:46.970
when we write data, before we do so, we can clear the store.

01:47.350 --> 01:55.710
So right after we clone the response here maybe, before we extract any data, we can call clear all data,

01:56.770 --> 02:01.150
pass the store which is post for which we want to do that and that gives us back a promise so we

02:01.150 --> 02:06.750
can call then and here we have a function where we don't need to get any argument

02:06.880 --> 02:09.650
but in that function I then want to continue

02:09.790 --> 02:17.260
and well simply extract my data. Here I can rewrite this to have it a bit easier to read and not that

02:17.260 --> 02:18.600
much of nesting,

02:18.610 --> 02:25.420
I return the JSON method and chain that then block after the first one.

02:25.660 --> 02:28.210
So now we have it a bit easier to read,

02:28.230 --> 02:34.990
we first of all clear the data, then we, if that was successful, then we basically extract the JSON

02:34.990 --> 02:40.900
data from our cloned response and then we use that extracted data here in the next then block where we

02:40.900 --> 02:42.890
finally write data.

02:43.240 --> 02:50.110
So with that here in place, now we changed our code a little bit to ensure that we clear the storage

02:50.110 --> 02:52.260
before we re-populate it.

02:52.600 --> 02:59.590
Let me bump up the static cache version and let's head over to our application here and there,

02:59.590 --> 03:05.600
I don't want to clear the storage because I want to see that this gets cleared, so I don't clear it manually,

03:05.620 --> 03:12.220
instead I'll use the old approach of simply refreshing the page once to install the new service worker,

03:12.490 --> 03:16.260
closing the tab and opening a new one.

03:16.540 --> 03:21.060
Now with that, we have our new service worker activated,

03:21.250 --> 03:25.720
now let's refresh one more time so that it also controls the front page

03:25.720 --> 03:32.530
and now let's have a look at the application, refresh indexedDB and go to posts and you see we only have

03:32.530 --> 03:33.710
the first post now,

03:33.760 --> 03:37.870
the other one was deleted and keep in mind, we didn't clear the database

03:37.870 --> 03:41.550
and of course it survives page refreshes, just like the cache API.

03:41.950 --> 03:48.700
So we now successfully clear that because we cleared the whole database before we repopulate it.

03:48.790 --> 03:55.600
So this is one important enhancement which ensures that we also react to items getting deleted on our

03:55.710 --> 03:56.140
back-end.
