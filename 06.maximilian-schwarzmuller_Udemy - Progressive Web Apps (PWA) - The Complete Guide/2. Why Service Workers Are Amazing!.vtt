WEBVTT

00:02.140 --> 00:06.310
So let's dive into the star of progressive web apps, service workers.

00:06.550 --> 00:09.460
They do a lot of work behind the scenes,

00:09.460 --> 00:16.750
they allow us to make our application offline ready so that it works even if we have no internet connection

00:17.110 --> 00:23.680
and they allow us to use a lot of other next generation web application features, like push notifications

00:23.680 --> 00:25.990
or background synchronization

00:26.020 --> 00:29.420
So what exactly are service workers? Now

00:29.440 --> 00:32.880
let's start with normal Javascript.

00:33.070 --> 00:36.960
We have Javascript files loaded by HTML pages

00:37.270 --> 00:42.190
and an important thing to know is that Javascript runs on a single thread.

00:42.250 --> 00:47.950
That means that if you visit a web application and that page or that application obviously returns you a

00:47.950 --> 00:56.210
HTML page which then execute some Javascript, the Javascript code loaded by this page runs on one thread.

00:56.350 --> 01:02.560
Now even if you have multiple Javascript files loaded by one and the same page, they still share one thread

01:02.740 --> 01:04.620
on which they execute their code,

01:04.780 --> 01:06.780
that is important to know.

01:06.910 --> 01:13.390
Now these Javascript files loaded by HTML pages can access the DOM of these pages.

01:13.390 --> 01:15.610
This is the Javascript code you already know,

01:15.610 --> 01:22.000
you can show alerts, prompt the user for input, change the DOM, manipulate it,

01:22.000 --> 01:28.540
therefore hide elements or add new elements and execute all kind of logic you want to execute, all the

01:28.540 --> 01:32.430
Javascript frameworks you know like React, Angular and so on,

01:32.530 --> 01:34.150
they run exactly like this,

01:34.150 --> 01:40.390
they are loaded as JavaScript by your page and they therefore can manipulate the DOM hence allowing

01:40.390 --> 01:44.150
you to create single page applications or add widgets to your pages.

01:44.160 --> 01:46.270
So this is Javascript as you know it,

01:46.270 --> 01:49.290
how do service workers fit into this picture?

01:49.300 --> 01:52.670
Service workers are also Javascript files,

01:52.780 --> 01:54.030
Javascript code,

01:54.220 --> 01:57.430
however they have access to a different set of features,

01:57.460 --> 02:01.960
they also run on a separate single thread and this is important

02:01.960 --> 02:07.930
Now they don't share the same thread as the normal Javascript code loaded by your HTML pages

02:07.930 --> 02:08.780
runs on,

02:08.920 --> 02:15.970
they have their own thread because service workers run in the background. So they also are decoupled from

02:16.030 --> 02:18.210
HTML pages and this is important,

02:18.250 --> 02:25.600
whilst you do register a service worker through HTML code or through an HTML page initially, once you

02:25.600 --> 02:29.420
registered it, it simply has a certain scope,

02:29.460 --> 02:32.260
I'll come back to this, where it applies too,

02:32.290 --> 02:38.170
for example that could be the domain of your page. So the service worker is then not attached to a single

02:38.170 --> 02:43.140
page but available to all the pages of your web application,

02:43.240 --> 02:48.490
so if you have multiple HTML files served from different URLs and the service worker is

02:48.490 --> 02:54.190
attached to your root page, to your domain therefore, then it is applicable to all these HTML pages

02:54.400 --> 02:58.550
and not attached to a single page like your normal Javascript is.

02:58.900 --> 03:03.930
Service workers also live on even after you closed all the pages in the browser,

03:03.970 --> 03:10.420
so even if you close the tab with your web application and you only have other tabs open or sometimes

03:10.420 --> 03:16.910
for example, mobile phones, even after you close the browser, the service worker still keeps on running,

03:16.960 --> 03:19.080
it's a background process.

03:19.090 --> 03:21.780
This is the one thing I want you to take away right now,

03:21.790 --> 03:26.410
service workers are background processes run in the background.

03:26.470 --> 03:31.150
You use Javascript in there but they work totally different than the normal Javascript code,

03:31.270 --> 03:32.830
they can't attract with the DOM,

03:32.860 --> 03:36.930
they are not attached to a page, they are attached to a certain scope,

03:36.940 --> 03:41.620
for example your entire web application, a domain and they run in the background.

03:41.950 --> 03:43.880
What can you do in service workers then?

03:44.230 --> 03:45.890
Well since they run in the background,

03:46.000 --> 03:53.770
they're really good at one thing, reacting to events. They can listen to some events, either emitted by your

03:53.830 --> 04:02.230
normal Javascript pages or also by your HTML code or by another server, like web push notifications,

04:02.230 --> 04:04.200
I'll come back to these events in a second.

04:04.600 --> 04:08.430
So service workers are all about reacting to events,

04:08.440 --> 04:14.380
they sit there in the background and they do nothing but they can react to all kinds of incoming events

04:14.500 --> 04:22.300
and then do something, like for example return a cached asset or show a notification to the user and

04:22.300 --> 04:29.020
you will see all these things throughout the course. So that are service workers, background processes attached

04:29.020 --> 04:34.140
to entire applications than of a single page and all about events.

04:34.390 --> 04:38.670
Let's have a look at which kind of events a service worker typically reacts to.
