WEBVTT

00:02.200 --> 00:07.690
So let's dive deeper into indexedDB. You learned that it's a key-value database,

00:07.780 --> 00:13.090
actually it's a transactional key-value database running in the browser and that of course is important,

00:13.120 --> 00:15.160
it's not running on a server.

00:15.160 --> 00:21.850
Now what does transactional mean? Transactional simply means that if one of the actions in a given transaction

00:21.850 --> 00:26.280
fails, none of the actions are applied to keep database integrity.

00:26.500 --> 00:32.110
So this basically means if you're trying to write something to the database and you're writing 10 lines

00:32.110 --> 00:39.310
to the database, 10 entries and one of these writes fails, none of the entries are added, for a good reason,

00:39.310 --> 00:44.830
you want to ensure that the database doesn't enter some invalid state thereafter because you kind of

00:44.830 --> 00:47.880
wrote some of the data and you don't know which data was written,

00:47.980 --> 00:53.680
so therefore you have this transactional approach, every operation of a given transaction has to succeed

00:53.740 --> 00:55.690
for the whole transaction to succeed.

00:55.930 --> 00:58.820
Now in practice, this shouldn't cause you too much of a headache,

00:58.840 --> 01:00.640
it's really easy to use that model,

01:00.640 --> 01:02.310
it's just important for you to know

01:02.380 --> 01:05.060
you have that extra security layer.

01:05.170 --> 01:10.810
Now another important thing is, that you can store significant amounts of unstructured data including

01:10.810 --> 01:12.250
files and blobs.

01:12.250 --> 01:16.860
Now I said that it's best for JSON data and not so much for CSS files and 

01:16.870 --> 01:17.500
so on

01:17.620 --> 01:23.500
but theoretically, you can also store files in there. If you have some data which is like a title, a course

01:23.500 --> 01:26.800
description and a content of a text field

01:26.950 --> 01:33.040
but you also have an image of the post or course or whatever you're storing in indexedDB, you can store

01:33.040 --> 01:38.980
that file directly in the database. And unstructured data just means you don't have to define a scheme

01:39.040 --> 01:39.840
upfront,

01:39.850 --> 01:45.760
you can store whichever data in whichever structure you want to store. Due to this key-value nature,

01:45.760 --> 01:47.740
it's basically like a Javascript object,

01:47.740 --> 01:50.860
you can have nested objects, nested properties,

01:50.860 --> 01:56.210
you can have arrays in there, you can store all of that in indexedDB.

01:56.230 --> 01:59.290
It can also be accessed asynchronously.

01:59.290 --> 02:06.790
Now this is important because whilst you can access it synchronously too, due to it being accessible asynchronously,

02:06.880 --> 02:11.790
you can use it in a service worker because remember, service workers are all about listening events,

02:11.800 --> 02:17.410
they have this asynchronous nature, therefore it's synchronous only code can't be run in service workers.

02:17.770 --> 02:23.170
Hence being able to asynchronously access indexedDB is the reason why it is so great,

02:23.230 --> 02:29.740
you can use it from both your normal Javascript code which is loaded through your pages as well as through

02:29.800 --> 02:35.960
service workers. That as a side note is also the difference to local storage.

02:36.070 --> 02:40.600
You might be aware that in the browser there is local storage and session storage,

02:40.630 --> 02:46.320
now both of these are accessed synchronously and therefore can't be used in service workers,

02:46.330 --> 02:49.040
that's the reason why you typically use indexedDB.

02:49.090 --> 02:50.950
It also has great browsers support

02:50.950 --> 02:52.800
but I'll come back to that.

02:52.900 --> 02:59.590
Now inside an indexedDB or inside that construct, you can actually have multiple databases but typically,

02:59.590 --> 03:05.900
you have one per application. In a given database though, you again have multiple object stores,

03:05.920 --> 03:07.550
this is something like a table

03:07.660 --> 03:12.580
and since your data can be unstructured and doesn't have to follow a schema, you can basically put whichever

03:12.580 --> 03:16.450
data you want into a database and into an object store.

03:16.450 --> 03:19.820
Now inside an object store, you store the objects and that's just,

03:19.840 --> 03:24.210
well the data you want to put there. That's indexedDB in a nutshell.

03:24.250 --> 03:26.840
You probably learn more about it by simply using it,

03:26.920 --> 03:28.790
so that's what we're going to do next.

03:28.840 --> 03:32.810
Not before having a look at in which browsers we can actually use it though.
