WEBVTT

00:02.180 --> 00:09.040
Now it worked before because I made a mistake, it didn't really send there, it didn't update the URL in our

00:09.040 --> 00:12.210
front-end code because we didn't reload the page often enough,

00:12.230 --> 00:15.080
we only reloaded it once, should have reloaded it twice.

00:15.440 --> 00:21.050
So this is now the first time it really tries to send it to our own back-end there we got a cors error, no

00:21.050 --> 00:24.770
access control allow origin headers present.

00:24.770 --> 00:29.090
Now let me quickly fix that with you. As a side note before I fix it,

00:29.180 --> 00:36.940
you will notice that if you update your indexedDB here, it's still queued up, correctly so.

00:36.950 --> 00:43.350
The reason leading to this error is that I used the cors function incorrectly, it's almost correct

00:43.420 --> 00:49.990
and then it is not, the function here doesn't pass request and response on, it's actually a function which

00:49.990 --> 00:51.500
doesn't take any input,

00:51.520 --> 00:57.640
we do have access to request and response inside of the function though because this outer function executing

00:57.670 --> 01:00.910
on an incoming request gives us access to it.

01:00.910 --> 01:09.520
Instead we need to pass both request and response as extra arguments to cors, a little error I made here

01:09.520 --> 01:10.420
when we set this up,

01:10.430 --> 01:15.250
so cors takes three arguments, the first one is the request, the second one is the response and

01:15.250 --> 01:18.470
the third one is the actual function where we have our logic.

01:18.490 --> 01:24.460
Now another thing we need to fix here, we need to initialize the app so that we can actually access the

01:24.460 --> 01:26.590
Firebase database with admin,

01:26.890 --> 01:34.430
so outside of this exports store post data thing, I'll call admin, initialize app

01:34.430 --> 01:42.020
and here I need to pass the credentials to initialize this application and for that, we need two things.

01:42.800 --> 01:46.640
We need to tell it where our application lives, where the database lives at

01:46.640 --> 01:49.730
and we need a key file.

01:49.790 --> 01:53.000
Now the location of the database is simple,

01:53.090 --> 01:55.040
simply this URL here,

01:55.160 --> 02:03.290
so I'll copy this and add the database URL property here which is a string to this URL, URL with

02:03.290 --> 02:04.680
capital characters,

02:04.940 --> 02:09.170
we also need that key file and we get this under settings

02:09.180 --> 02:10.900
here, project settings,

02:11.090 --> 02:17.030
so here on this here icon, project settings and there on service accounts.

02:17.030 --> 02:24.360
If you want to use the admin SDK which we want, you'll simply need to download your service account

02:24.440 --> 02:25.770
key file,

02:25.860 --> 02:29.790
here you can find the full code for initialising it, you could copy that.

02:30.000 --> 02:32.280
So you should generate a new private key here,

02:32.310 --> 02:33.790
generate the key and download it,

02:33.810 --> 02:42.090
that's a JSON file, store it in your project folder under functions and you may of course shorten the

02:42.090 --> 02:42.830
name here, so

02:42.840 --> 02:51.190
I will name it pwagram fbkey, whatever you like, store the JSON file in that folder

02:51.770 --> 02:59.360
and with that go back to your functions code at credential, credential here and then you need to import

02:59.420 --> 03:00.410
that key file.

03:00.410 --> 03:01.980
Now the code can be found here,

03:02.000 --> 03:03.480
I'll just copy it.

03:03.690 --> 03:05.070
Var service account,

03:05.090 --> 03:06.950
I'll create a new variable here

03:08.480 --> 03:15.170
and I will point to my key file here which is ./ and then pwagram fbkey.json

03:15.260 --> 03:17.050
since it's lying in the same folder

03:17.330 --> 03:26.090
and then I'll refer to this service account variable here though by calling admin credential cert and

03:26.090 --> 03:31.310
then passing service account and this will basically read this file and initialize my app.

03:31.310 --> 03:35.600
So with that, we got the access otherwise this would throw an error which wasn't handled by cors

03:35.600 --> 03:37.770
hence we got this cryptic cors error

03:38.050 --> 03:45.250
and now with both change is in place, I can deploy my application by calling Firebase deploy again

03:45.590 --> 03:50.330
and this would again take a couple of seconds and then we will visit this again.

03:50.330 --> 03:55.860
So redeploying finished, the URL didn't change so we don't need to change anything there,

03:55.910 --> 04:01.460
we don't even have to restart our browser or refresh the page because the error happened on the server.

04:01.670 --> 04:06.980
So now what I will do is I will still refresh this to re-trigger the sync watcher of the browser

04:06.980 --> 04:09.900
basically and I will push a third message,

04:09.920 --> 04:19.130
some title three three three, something like that, whatever you like, our location and post this. Now

04:19.130 --> 04:20.800
it's syncing this

04:20.810 --> 04:21.740
and this looks good,

04:21.740 --> 04:24.620
it's sending all the other requests too it had queued up,

04:24.620 --> 04:27.500
we get back status 201. Now if

04:27.530 --> 04:29.170
we inspect indexedDB,

04:29.210 --> 04:34.180
so refresh it and reopen the developer tools to fix that bug where it doesn't show otherwise,

04:34.490 --> 04:37.860
you see it's empty so now it deleted the correct ID,

04:37.940 --> 04:38.690
that's good,

04:38.690 --> 04:39.930
so that worked

04:40.370 --> 04:48.650
and now if visit Firebase, under database, we see all these new posts here with some title three three three

04:48.770 --> 04:50.360
and the other queued up posts.

04:50.420 --> 04:53.270
So this is all working correctly as it should

04:53.300 --> 04:55.090
which of course is awesome.

04:55.490 --> 04:57.250
Now with that, we got that finished,

04:57.320 --> 05:01.130
you of course don't need to add this to have basic background synchronization to work,

05:01.280 --> 05:06.380
it's an important step for the rest of the course though because we'll soon add more where we definitely

05:06.380 --> 05:12.260
need to run our own server-side code and for returning the ID of the added project which allows us

05:12.260 --> 05:14.870
to clean this up in the service worker correctly,

05:14.870 --> 05:16.300
it was also important.

05:16.400 --> 05:18.830
So with that, onto the next course module.
