WEBVTT

00:02.120 --> 00:07.490
So using push notifications makes sense because we get a lot of benefits out of it,

00:07.550 --> 00:13.730
that of course leads us to the question, how does push notifications work, how do they work especially

00:13.730 --> 00:15.050
in a web app?

00:15.380 --> 00:21.010
Let's start simple, let's consider our web app which has the service worker running in the background.

00:21.230 --> 00:25.880
Now push notifications actually contain of two parts,

00:25.880 --> 00:32.240
we have push which means that some thing, some server pushes some information to our application

00:32.600 --> 00:36.230
and we have notifications which is what we showed to the user in the end

00:36.380 --> 00:41.070
and in this module, I will of course show both to you and I will show you how to connect it.

00:41.330 --> 00:45.550
So first of all, we need the user to enable notifications,

00:45.620 --> 00:49.420
we need to prompt for permission and I will show you how this works,

00:49.460 --> 00:51.910
otherwise we can't show any notifications

00:51.970 --> 00:57.550
and that also means we can send push messages to our web app from any server.

00:57.590 --> 01:01.220
So that's the first step, we have to ask the user for permission,

01:01.240 --> 01:05.790
this is a one time task though, once we have permission it's always granted.

01:05.810 --> 01:11.600
Of course the user could remove it through browser tools but if he doesn't do that, we have these notifications

01:11.600 --> 01:18.740
in future instances of this web application too. Now with notifications enabled, we can already display

01:18.740 --> 01:20.810
notifications, that's important,

01:20.810 --> 01:23.960
it's totally independent of pushing messages to our app.

01:23.990 --> 01:26.340
We can start displaying notifications

01:26.540 --> 01:28.110
and this is actually the first part

01:28.130 --> 01:30.310
I will show in this course too

01:30.680 --> 01:38.690
but let's move further and let's dive into the push part of notifications, of push notifications. Notifications

01:38.690 --> 01:41.180
themselves are triggered from Javascript

01:41.360 --> 01:48.140
but of course that becomes most interesting if we push messages from some other server to our web

01:48.140 --> 01:49.100
application.

01:49.280 --> 01:55.550
Imagine an application where users can create posts and we want to inform all the users about new posts,

01:55.700 --> 02:03.170
well then we can push this message that a new post was created to all web apps that subscribed in our

02:03.380 --> 02:09.030
service. That is the keyword, subscription. In the web app,

02:09.050 --> 02:12.180
we can check for existing push subscriptions

02:12.380 --> 02:19.030
and here's one important thing, a subscription refers to a browser on a given device.

02:19.100 --> 02:26.070
So if you use Chrome on Mac, you may subscribe with this browser device combination to push

02:26.450 --> 02:31.790
and if you use Firefox on the same Mac, you could set up a new subscription there, the subscription will

02:31.790 --> 02:33.970
be managed by the browser for you,

02:34.190 --> 02:38.430
you use the service worker to request and work with subscriptions.

02:38.750 --> 02:43.040
So you can check if you already have an existing subscription because maybe the users set one up in

02:43.040 --> 02:44.160
the past,

02:44.210 --> 02:49.040
if that's not the case, you can create a new one and I will show you how this works in this module.

02:49.340 --> 02:55.010
Now a new subscription is created in Javascript with the service worker,

02:55.040 --> 03:01.640
however we need more information than just our web app and the service worker. Subscriptions for push

03:01.640 --> 03:08.810
notifications of course need external servers because a push notification needs to be delivered to our

03:08.810 --> 03:09.960
web application

03:10.040 --> 03:12.210
and for that we need other servers,

03:12.290 --> 03:18.530
otherwise it's just our web app and if our web app is closed, there's no way we could show a notification,

03:18.710 --> 03:21.480
we could send any information to anything.

03:21.800 --> 03:27.870
Now a subscription as I just said is referring to a browser device combination

03:28.310 --> 03:35.900
and to deliver a message per push to our web app, we need help by the browser because by default, our

03:35.900 --> 03:40.450
web app is just running and is not receiving any incoming messages.

03:40.460 --> 03:46.790
We could build something using web sockets but that's a totally different technology and also only works

03:46.790 --> 03:48.830
if our web app is open,

03:48.830 --> 03:53.970
so we need the help of the browser to get informed even if our web app isn't open.

03:54.200 --> 04:00.530
That's why I created subscription, any subscription involves some information by the browser vendor or

04:00.830 --> 04:05.330
namely each browser vendor has its own push server.

04:05.390 --> 04:08.560
So Google has its own server handling push messages,

04:08.570 --> 04:11.160
Mozilla has its own server and so on.

04:11.270 --> 04:13.900
We don't configure the servers, we don't own them,

04:13.910 --> 04:17.020
they are owned by Google, Mozilla and so on

04:17.180 --> 04:23.810
but when we set up a new subscription in Javascript, Javascript will automatically reach out to that

04:23.810 --> 04:27.950
push server you could say and fetch an endpoint for us.

04:27.950 --> 04:35.480
Now this endpoint is simply a URL to which we can later send new push messages so that the browser

04:35.480 --> 04:41.880
vendor service here, the brown box, will forward them to our web app.

04:41.990 --> 04:47.320
So a newly created subscription holds that information, the push API endpoint.

04:47.360 --> 04:54.530
It will also hold some authentication information to make sure that only we can push to our web app

04:54.740 --> 04:58.550
because everyone with this endpoint could send push messages there,

04:58.550 --> 05:03.890
therefore in this module, I will also show you how to check it, how to pass additional authentication

05:03.890 --> 05:10.100
information to the subscription to make sure that even if someone else finds out this API endpoint, he

05:10.100 --> 05:15.320
can't start pushing messages to your users which you definitely don't want because they would show up

05:15.320 --> 05:22.990
in the scope of your app and if someone pushes them, some porn or worse content maybe, not that great.

05:23.000 --> 05:30.490
So this is one side, we have a subscription with an endpoint to which we can deliver push messages.

05:30.590 --> 05:32.920
We also need our own server though,

05:33.050 --> 05:40.310
now this can be the same server serving your web app, so your HTML and Javascript and CSS files or

05:40.310 --> 05:45.890
it's a different server. So you can have a fullstack set up here where you have your back-end server

05:45.920 --> 05:52.730
rendering out different pages which happen to use service workers or your web app is a standalone single

05:52.730 --> 06:00.110
page application and your back-end server is a rest API to which you reach out from that single page application.

06:00.110 --> 06:01.180
Both works,

06:01.190 --> 06:08.330
the main thing is you need a server which you work on where you can run your code and you can't do this

06:08.540 --> 06:10.420
on the browser vendor push server,

06:10.520 --> 06:11.990
these are managed for you.

06:12.320 --> 06:15.410
So your custom back-end server where you can run your own code,

06:15.440 --> 06:16.700
that's important.

06:17.330 --> 06:23.630
It's important because the service worker which creates this new subscription which holds information

06:23.630 --> 06:25.470
about that endpoint and so on

06:25.500 --> 06:32.030
this browser vendor push server endpoint, your service worker can now send this created subscription

06:32.270 --> 06:34.900
to your back-end server to store it there.

06:34.940 --> 06:36.690
Why store it in the server?

06:36.800 --> 06:40.000
Well to keep it, if you would store it in your web app,

06:40.160 --> 06:43.810
not only could you not really work with it due to the way push works,

06:43.810 --> 06:47.360
it also would be lost at the point of time you shut your web app down.

06:47.600 --> 06:50.530
Yes you could store it in indexedDB or something like that

06:50.540 --> 06:53.010
but even that is not a persistent storage.

06:53.240 --> 06:59.120
So we store it on our back-end server in some database there because it will be our back-end server

06:59.180 --> 07:02.250
which later wants to push messages to the front-end app.

07:02.360 --> 07:08.180
Again consider that example of users creating new posts, that of course in the end happens on the server,

07:08.240 --> 07:10.560
we store new posts in the database there.

07:10.790 --> 07:17.360
We could then after we store them in the database, also issue push messages to all our subscriptions

07:17.780 --> 07:21.580
and keep in mind, the subscription is simply a browser device combination.

07:21.770 --> 07:26.420
So if we have 10 users on different devices with different browsers, we would have ten subscriptions

07:26.420 --> 07:31.850
maybe and we could inform them all about a new post and we do that from our back-end server.

07:31.910 --> 07:35.270
That's why the back-end server has subscriptions.

07:35.360 --> 07:40.230
Now something happens which wants us to push notifications to the web apps,

07:40.280 --> 07:45.750
for example this new post which was created. So we decide to send a new push notification

07:45.860 --> 07:49.120
and of course I will show you how this works in this module too,

07:49.190 --> 07:56.060
so we execute some server side code to do so and this push notification is then sent to the browser

07:56.060 --> 08:03.590
vendor push server to this API endpoint we stored in the subscription. This reaches the push

08:03.600 --> 08:09.020
server by the browser vendor, we also send some authentication information with that push message

08:09.020 --> 08:16.010
to be able to really deliver it to the web app and the browser vendor push server then delivers it

08:16.100 --> 08:17.990
to our web application,

08:17.990 --> 08:23.670
to be precise it delivers that to the service worker by triggering the push event there.

08:23.960 --> 08:28.320
That's especially event we can listen to with the event listener in the service worker

08:28.580 --> 08:35.210
and then in the service worker, we can display a notification in our web app and if that sounds very complex,

08:35.300 --> 08:35.970
no worries,

08:36.020 --> 08:41.280
it's not, we will walk through all these phases step-by-step in this module.

08:41.330 --> 08:47.720
I will show you how to get a new subscription, how to store it on a server, how to push a notification to

08:47.760 --> 08:53.720
a browser vendor server, how to react to it in the service worker and how to display notifications.

08:54.080 --> 09:00.650
Actually displaying notifications is with which I'll start since this works standalone and is a key

09:00.650 --> 09:02.640
building block of this whole picture.
