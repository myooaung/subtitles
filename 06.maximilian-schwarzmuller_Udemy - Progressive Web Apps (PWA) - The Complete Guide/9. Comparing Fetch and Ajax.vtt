WEBVTT

00:02.080 --> 00:04.880
So over the last lectures, you learned about fetch,

00:04.880 --> 00:10.360
now you might still wonder, fetch is nice but what's the difference to Ajax requests we send

00:10.370 --> 00:16.190
prior to this, either via jQuery which behind the scenes used it or by hardcoding it on

00:16.190 --> 00:16.850
our own.

00:17.030 --> 00:22.190
Let me quickly show you how we sent this request here with the old Ajax logic,

00:22.290 --> 00:25.240
I'll add it above it. Here I'll

00:25.280 --> 00:32.270
first of all set up my xhr object where I instantiate a new XML HTTP request. As a next step,

00:32.270 --> 00:38.940
we open a connection by calling open and there we say that we want to send a get request and we set

00:39.120 --> 00:39.820
this

00:39.890 --> 00:45.080
URL here because I want to send the same request let's say. Up on this point,

00:45.080 --> 00:50.680
we don't do anything, we just configured the request, we opened the connection but we didn't send anything.

00:50.720 --> 00:59.240
Next I could set the response type to JSON because I expect JSON data and thereafter, I can register

00:59.310 --> 01:04.300
an onLoad listener which is executed whenever we get back a response.

01:04.310 --> 01:07.040
So here, I specify a function which should get executed

01:07.040 --> 01:14.400
in this case and in this function, I can log my xhr response,

01:14.460 --> 01:20.630
I also can specify an onError handler to handle any error I might get,

01:20.640 --> 01:24.530
so here I could console log error.

01:25.070 --> 01:29.280
Now finally to really send this, we have to call send.

01:29.690 --> 01:33.820
So that's quite some code for just sending a simple get request.

01:33.830 --> 01:38.870
Now you might say this is also quite some code but here we're not just getting the response, we would

01:38.870 --> 01:40.090
be done by here,

01:40.310 --> 01:45.140
we're also extracting the data and get this nicely formatted.

01:45.170 --> 01:54.530
Now if I save this and I go back to my application and reload the app page, you see this is the call, the data here,

01:54.600 --> 01:56.990
line 45,

01:57.040 --> 01:57.990
this one here

01:58.150 --> 02:02.340
I get back with the traditional Ajax XML HTTP request.

02:02.440 --> 02:04.390
Of course it works,

02:04.390 --> 02:07.570
however it works differently behind the scenes,

02:07.570 --> 02:12.460
it has a lot of synchronous code in there and therefore won't work in service workers which are all

02:12.460 --> 02:13.810
about asynchronous code,

02:13.870 --> 02:17.750
so you can't use that in service workers and it's more complex,

02:17.760 --> 02:19.830
verbose. Opening it,

02:19.870 --> 02:24.460
setting the response type like this, setting up event listeners and then sending it,

02:24.700 --> 02:26.770
well this syntax certainly is easier,

02:26.800 --> 02:31.600
this one line already sends the request and then here, we handle the response.

02:31.600 --> 02:37.570
This is very convenient and this is why the fetch API is nice to use in general, again for service workers

02:37.570 --> 02:38.210
especially,

02:38.230 --> 02:39.730
you don't even have a choice,

02:39.790 --> 02:46.420
you have to use fetch because service workers only allow you to use asynchronous ready operations like

02:46.420 --> 02:47.270
fetch here,

02:47.350 --> 02:51.460
you can't use the traditional Ajax request in service workers.

02:51.460 --> 02:53.620
So this is something you have to keep in mind,

02:53.620 --> 02:55.080
I'll leave it here for reference

02:55.170 --> 03:00.700
but we won't use that in this course, we will use fetch and we'll especially use it in service workers because

03:00.760 --> 03:02.400
there, we have to use it.
