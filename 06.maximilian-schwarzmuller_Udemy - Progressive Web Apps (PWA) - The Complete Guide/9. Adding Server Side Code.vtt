WEBVTT

00:02.270 --> 00:09.090
Thus far in this course, we always used our HTTP server here to serve our application under

00:09.130 --> 00:10.110
http://localhost:8080

00:10.280 --> 00:14.960
and that was all we needed because progressive web apps happen in the browser,

00:15.020 --> 00:20.750
all these features happened the browser, service workers run in the browser in the end.

00:20.750 --> 00:27.740
Now however, we have a use case where we also need to tweak our server-side code and especially for the next

00:27.740 --> 00:32.410
module, it will be very important that we can write some server-side code.

00:32.420 --> 00:38.690
Now you could have your own Node server which could be an API for a single page app or the same server

00:38.690 --> 00:39.770
rendering these pages,

00:39.770 --> 00:41.120
it doesn't matter

00:41.510 --> 00:47.300
and you can add your own code to this server of course. Now in our set up here, we don't have our own

00:47.300 --> 00:47.870
server,

00:48.020 --> 00:50.910
HTTP server is just a development dummy server,

00:50.960 --> 00:53.290
we can't really configure it that much and we shouldn't,

00:53.300 --> 00:56.020
it's not meant to run in production.

00:56.150 --> 01:02.740
However we already use Firebase here and Firebase has a nice feature which is cloud functions.

01:02.750 --> 01:05.960
Here we can define some code which should run on-demand,

01:05.960 --> 01:09.570
so basically whenever a certain event triggers.

01:09.620 --> 01:14.000
So you can think of these functions like rest API endpoints for example,

01:14.000 --> 01:18.420
you could also set up functions which run whenever something is added to the database but you can also

01:18.470 --> 01:21.970
just set up your own endpoint, your own API endpoint

01:22.100 --> 01:26.990
so that Firebase really is your back-end server and this is just an example because it's easy to set

01:26.990 --> 01:27.270
up,

01:27.290 --> 01:32.100
you can of course also write your own NodeJS application, I want to stress this,

01:32.120 --> 01:36.170
you don't need to use Firebase at all. Here however,

01:36.170 --> 01:38.150
I will use it because it's convenient,

01:38.390 --> 01:41.310
so for that I'll open up the terminal

01:41.360 --> 01:48.270
and this is the normal terminal just integrated into my IDE and I'll install a new package, Firebase. I will

01:48.270 --> 01:53.180
install it globally on my machine and on Mac, you may need to add sudo in front of it,

01:53.180 --> 01:54.580
on Windows you don't

01:54.650 --> 01:57.650
and then I use npm which you already have since you have NodeJS

01:57.680 --> 01:59.400
on your machine,

01:59.720 --> 02:05.400
npm install -g and then it's firebase-tools,

02:05.410 --> 02:10.580
this is basically a command line interface Firebase offers you to manage your project and I want to manage

02:10.580 --> 02:11.910
this project with Firebase now.

02:11.910 --> 02:15.220
Now here I'm prompted to enter my password,

02:15.280 --> 02:21.880
this might not be the case for your set up and once you entered it if you need to, it will install this

02:21.890 --> 02:24.190
Firebase CLI on your machine.

02:24.200 --> 02:27.630
Now you will see in a second why this is useful or important.

02:27.920 --> 02:33.890
So once the installation of the Firebase tools finished successfully, navigate into the project folder

02:34.030 --> 02:38.160
in this terminal, I already am inside the complete guide folder here

02:38.450 --> 02:43.760
and then inside this project folder, run Firebase init. Firebase should now be available

02:43.760 --> 02:50.270
since you installed that CLI globally, this will put this project under control of Firebase and no

02:50.270 --> 02:55.090
worries, this won't destroy anything. Here you can define which features you want to use,

02:55.310 --> 03:01.550
you select them by hitting the space button, I'll select functions to write this server-side code which I can

03:01.550 --> 03:08.120
trigger by sending requests to API endpoints and hosting which will become important later once we deploy

03:08.120 --> 03:12.900
this into the web and don't run it on our local development machine anymore.

03:13.670 --> 03:18.050
Hit enter and then you have to associate this with one of your projects,

03:18.230 --> 03:20.440
so for me that's pwagram,

03:20.480 --> 03:24.590
so I will pick that, hit enter again. As a next step,

03:24.590 --> 03:28.000
it asks if you want to install the dependencies, enter y here

03:28.100 --> 03:28.560
for yes

03:28.580 --> 03:33.880
and hit enter and this will now pull down all the dependencies it needs to allow you write

03:33.890 --> 03:39.140
these cloud functions because as I just mentioned, cloud functions is just NodeJS code running on

03:39.140 --> 03:42.800
your server and therefore, it requires some dependencies.

03:42.800 --> 03:47.460
Then you can define what the public directory is and the default of public is already correct here,

03:47.480 --> 03:54.150
this is where we in the end serve our application from, so I'll just hit enter and do you want to configure this as

03:54.150 --> 03:55.130
a single page app.

03:55.140 --> 03:56.110
I will hit no

03:56.120 --> 03:58.090
because we actually have multiple pages,

03:58.140 --> 03:59.240
we have the help page

03:59.280 --> 04:00.650
and our starting page,

04:00.780 --> 04:03.680
so we don't have a single page application here.

04:03.840 --> 04:06.370
It asks us if it should overwrite the index.html file,

04:06.440 --> 04:11.000
definitely enter n for no here and hit enter and you're done.

04:11.000 --> 04:12.870
Now this is an one-time process,

04:12.870 --> 04:14.630
you don't have to repeat this,

04:14.640 --> 04:18.530
it also gives you this 404.html file now to handle 404 errors,

04:18.540 --> 04:24.480
you can leave it here, it doesn't hurt and this firebase.json file which has some configuration,

04:24.480 --> 04:25.960
the default should be fine,

04:26.040 --> 04:31.830
this firebase.rc file also has a configuration about the project it manages, this should also be correct.

04:31.830 --> 04:37.050
You also have this new functions folder and this is important because here you can now write your own

04:37.110 --> 04:38.200
function

04:38.310 --> 04:46.170
and as I told you, this allows us to basically write a rest API endpoint which will run on your own Firebase

04:46.170 --> 04:54.310
project server. In the index.js file, you write normal NodeJS application code and actually, you

04:54.310 --> 04:56.070
can even use Express here,

04:56.140 --> 05:02.590
so definitely not that far off your traditional application, you just don't need to do all the initialization,

05:02.590 --> 05:06.630
you don't need to listen to a port, that already is happening for you.

05:06.820 --> 05:13.780
Now in there, let's create a new rest API endpoint by commenting this out and I will rename Hello World

05:14.140 --> 05:17.590
to store post data, whatever you like,

05:17.590 --> 05:19.680
this is just the name I pick here

05:20.440 --> 05:27.940
and the other side here simply defines how this should be triggered. Functions gives you access to

05:27.940 --> 05:30.460
Firebase functions, to this helper library here,

05:30.640 --> 05:36.230
it uses ES6 syntax which is why we have const here, you can of course use var. Https

05:36.310 --> 05:40.150
means the event is an HTTP request, an incoming one

05:40.150 --> 05:43.980
which is exactly what we want, to send the request to this API.

05:44.770 --> 05:45.550
On request,

05:45.550 --> 05:48.460
well that just clarifies it, on a request,

05:48.460 --> 05:50.680
this function will be executed.

05:50.680 --> 05:52.800
This is an ES6 arrow function,

05:52.930 --> 05:54.150
you can of course use

05:54.190 --> 05:55.360
a normal function,

05:55.390 --> 05:58.750
so I just replaced it and here, we're just sent back a response,

05:58.750 --> 06:00.510
hello from Firebase.

06:00.640 --> 06:07.590
Now for now what I want to do here is, I want to simply store the data in the Firebase database.

06:07.600 --> 06:13.450
This might look redundant right now because we already can do this by simply sending a post request

06:13.610 --> 06:20.980
to our endpoint here with posts.json but it will become important later once we add push notifications

06:21.220 --> 06:28.990
and want to store an image too, so I will already start setting this up. To store data in the database,

06:28.990 --> 06:32.330
I need some additional packages here,

06:32.590 --> 06:37.870
so open up your terminal again and navigate into that functions folder in your project folder,

06:37.870 --> 06:46.120
make sure you are inside there and then inside this folder, you want to install two additional packages

06:46.120 --> 06:48.230
with npm install.

06:48.310 --> 06:57.080
First of all, I'll add Firebase admin and I will install cors, I'll add --save to also store an

06:57.080 --> 07:03.160
entry in the package.json file here. So this will install these new packages in this functions folder

07:03.160 --> 07:04.220
only.

07:04.450 --> 07:06.070
Now back in index.js

07:06.120 --> 07:10.940
here in the functions folder, I want to use these packages. For that,

07:10.990 --> 07:12.480
I'll import them at the top,

07:12.490 --> 07:15.580
first of all admin requires Firebase admin,

07:15.580 --> 07:18.040
this will give us access to the Firebase database,

07:18.280 --> 07:24.280
so just as before when we directly send this from our front-end code, here we can basically access the

07:24.280 --> 07:30.880
database when we already are in some code running on the server so to say and cors will become important

07:31.210 --> 07:38.200
to send the right headers so that we can access this HTTP endpoint from an application running on a different

07:38.200 --> 07:38.660
server

07:38.680 --> 07:41.940
which of course might be the case and will be the case during development.

07:42.220 --> 07:48.340
So here I will require cors and this actually export the function we immediately need to execute where

07:48.340 --> 07:49.360
we pass origin

07:49.450 --> 07:54.600
true to simply tell it that we want to allow cross-origin-access.

07:54.670 --> 07:57.340
Now here inside this function

07:57.340 --> 08:03.640
here, you execute the code you want to execute whenever a request reaches this endpoint and I will show

08:03.640 --> 08:07.180
you the exact URL you need to send a request to in a second.

08:07.750 --> 08:08.500
So here, I

08:08.620 --> 08:14.400
first of all will use cors and this will give me a function with request and response, so it will

08:14.410 --> 08:20.370
basically wrap all the code I want to execute and we'll automatically send the right headers to allow

08:20.380 --> 08:22.560
cross-origin-access by doing so.

08:22.630 --> 08:30.280
The next thing I will do is I will access admin and there I can access the database function to access my database,

08:30.340 --> 08:33.660
I want to access the posts node here,

08:33.670 --> 08:37.040
so just as we do before, this will then access

08:37.120 --> 08:45.790
the post node here in my database and there, I want to push a new post and I expect to

08:45.910 --> 08:49.040
get data sent to this request.

08:49.180 --> 08:56.320
Now to get data sent to this request, we already get application/json data or we will get this eventually,

08:56.500 --> 08:59.800
so what I will do is I will push a new Javascript object,

08:59.800 --> 09:08.340
this object here onto posts where I expect to have an ID which I can get from request body ID,

09:08.430 --> 09:13.360
I expect to have an ID field there and I will have because in the service worker, we will send a

09:13.360 --> 09:14.830
request which has ID,

09:14.860 --> 09:17.610
title, location and image as fields,

09:17.910 --> 09:26.650
so I want to extract the ID. Of course I also want to extract the title and the location and you guessed

09:26.650 --> 09:35.980
it, I'll do the same for my image, so the image which I will store here too, image property, that shall also

09:35.980 --> 09:43.900
be extracted from request body image. You might recognize this code from your last Node application where

09:43.910 --> 09:46.290
you're simply writing comparable code here.

09:46.840 --> 09:53.560
So I'm pushing this object onto my Firebase database and that is actually all I want to do for now,

09:53.560 --> 09:56.970
well almost, I'll chain a then call here to execute it

09:56.980 --> 10:04.810
when this was successful, in this case if it was successful, I want to send a new response where I

10:04.810 --> 10:11.110
will set the status code to 201 for something was entered successfully and some JSON data,

10:11.170 --> 10:17.550
again using normal Express syntax you might know where I will simply send a message, data stored and

10:17.600 --> 10:18.400
important,

10:18.430 --> 10:23.140
the ID of the data we stored because this is what I want to use in my service worker to delete the

10:23.140 --> 10:26.030
right element from my indexedDB,

10:26.200 --> 10:34.450
so here I will send request body ID again as response. I also will catch any errors to handle these

10:34.460 --> 10:40.810
too and there I want to then send a response with status code 500 for

10:40.840 --> 10:47.400
server-side error and a JSON object where I have my error sent back to the front-end.

10:47.750 --> 10:50.030
This is now my own API,

10:50.050 --> 10:54.220
the question of course is, how do we send requests to it?

10:54.990 --> 10:57.510
It's actually super simple.

10:57.510 --> 11:00.210
First of all, we need to deploy this to the server,

11:00.450 --> 11:04.790
for that we can use Firebase, the CLI we install and call deploy

11:05.280 --> 11:09.080
and this will now deploy our front-end application in the public folder,

11:09.240 --> 11:10.720
we'll use that later though

11:11.010 --> 11:16.350
and our functions as you can see, takes a couple of seconds up to minutes and I will inform you once

11:16.350 --> 11:23.200
it is done. The deployment finished and it shows you the URL under which you can access your page,

11:23.200 --> 11:25.340
again I'll do this later in this course,

11:25.350 --> 11:28.050
it also shows you this function URL.

11:28.110 --> 11:34.030
Now you can just copy that and this is the new URL to which you want to send your requests.

11:34.290 --> 11:41.640
So in the service-worker.js file where we send requests to the database basically or that also

11:41.640 --> 11:43.980
uses a rest endpoint in the end

11:44.000 --> 11:47.550
but it maps directly to the database, Firebase does this,

11:47.550 --> 11:49.940
I will replace this with our

11:49.950 --> 11:54.310
URL and you don't need to and shouldn't add JSON at the end,

11:54.330 --> 11:57.620
don't add it, just send it to this endpoint, that's the endpoint

11:57.630 --> 11:59.430
we defined, store post data,

11:59.490 --> 12:02.570
that's exactly what we set up here as a name.

12:02.580 --> 12:05.210
So this is what I want to send my data to,

12:05.420 --> 12:07.490
I also need to replace it in the feed.js

12:07.530 --> 12:11.190
file in our fallback send data method

12:11.640 --> 12:13.630
and now let's see if that works.

12:13.650 --> 12:20.430
Now for that first of all, I'll bump up the static cache version and then back in our application, I'll

12:20.430 --> 12:25.870
close this tab, open a new one to install my new service worker

12:26.190 --> 12:28.470
and I'll see if this works.

12:28.710 --> 12:43.750
Let me send a new post, some title, send via custom endpoint and some location. Let's hit post, it sent data,

12:43.980 --> 12:46.990
let's see if the data was added here,

12:47.250 --> 12:52.470
we got a new entry, some titles sent via custom endpoint, some location.

12:52.470 --> 12:58.450
And if you check your cloud functions here on the Firebase back-end, you should see there's one function,

12:58.900 --> 13:01.820
you can access the logs here

13:02.050 --> 13:05.060
and this may take some time to update so that you really see it

13:05.140 --> 13:09.300
but in these logs, you should see the request you just sent.

13:09.310 --> 13:12.820
So here are no logs yet, again this will update,

13:12.820 --> 13:18.580
however one thing we can improve now since this works and we can see this in our application, on the

13:18.580 --> 13:24.220
response in the body, well we can't see it here because I need to call JSON first

13:24.430 --> 13:31.540
but there we will actually get back the ID because remember, we'd set this up here in the function, we return

13:31.600 --> 13:34.720
the ID along with the message.

13:34.720 --> 13:42.190
So what I can do now is, I want to clean this up in service-worker.js by no longer using this method

13:42.190 --> 13:46.250
which didn't work correctly, using the ID in the loop which doesn't work,

13:46.360 --> 13:53.290
I want to instead use the ID from the response. So I will extract the JSON data from the response,

13:53.530 --> 13:59.770
call then here because it's an asynchronous operation, here I have my response data in that function

14:00.370 --> 14:06.730
and now I will delete data inside that then block here and use res data ID

14:06.730 --> 14:11.470
and again I know that there will be an ID field because we return it here.

14:11.920 --> 14:17.830
So this is what I want to do in my service worker now, extract the response data and then delete an

14:17.830 --> 14:21.950
item once I got that data using that ID we get back from the server

14:22.240 --> 14:30.150
and with this added, now if I go offline or first of all though, I need to update my service worker,

14:30.220 --> 14:37.950
so I'll clear everything, reload the page and now I will go offline to queue up a couple of posts. So I

14:37.940 --> 14:47.180
will queue up post one with location one, I have no connection so it doesn't send it yet, then I will add post

14:47.190 --> 14:48.900
two with location two

14:49.230 --> 14:54.540
and if I refresh indexedDB, you will see both are queued up here.

14:54.860 --> 15:01.750
Now if I go back online, go to the console here, you will see it triggers that event,

15:02.880 --> 15:06.140
now however it fails.

15:06.260 --> 15:07.750
Now why does that happen?

15:07.880 --> 15:09.460
Let's fix it in the next lecture.
