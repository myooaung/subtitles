WEBVTT

00:02.300 --> 00:05.850
In the last lecture, we implemented the cache, the network strategy,

00:05.850 --> 00:12.060
the second part of it where we put everything we get back from a network request onto our cache, hence

00:12.060 --> 00:13.690
our cache is filled with stuff here

00:13.740 --> 00:14.620
as you can tell

00:14.730 --> 00:18.240
but still if I go offline, we fail.

00:18.240 --> 00:19.350
Do you know why?

00:19.350 --> 00:27.540
Have a look at the service worker. Well we never have any code where we try to fetch something from the

00:27.540 --> 00:28.520
cache.

00:28.920 --> 00:33.240
Now that's exactly what our cache, the network strategy is about,

00:33.270 --> 00:39.690
it's really good for use cases where we do have Internet access and we want to get something on the

00:39.690 --> 00:43.240
screen quickly because we fetch it from the cache first.

00:43.290 --> 00:48.690
It's bad for cases where we don't have internet access though because we never try to fetch it only

00:48.690 --> 00:49.750
from the cache,

00:50.070 --> 00:52.360
so that is why offline doesn't work

00:52.590 --> 01:00.570
whilst online does work and if we do fetch it from online, here in our application we can't even see

01:00.570 --> 01:05.730
the advantage because everything loads so fast anyways but it is a real improvement for applications

01:05.730 --> 01:08.640
where you work with real servers and may have some delay.

01:08.850 --> 01:16.890
Still, I also want to provide some offline functionality, so we should mix the cache and the network approach

01:16.890 --> 01:23.420
here with our old approach where we also check if something is in the cache already.

01:23.850 --> 01:26.230
This on the other hand breaks our cache

01:26.230 --> 01:31.800
then network strategy because if we have a look at the cache and return something from there if it's in

01:31.800 --> 01:40.740
there, even if we then make the network request, we override updated data with outdated data,

01:40.740 --> 01:46.030
so we not really get the result we want to get in this case.

01:46.850 --> 01:54.410
So what we need to do here is we need to ensure that our app shell, the core files we need and also the

01:54.410 --> 02:01.520
file which kicks off our cache then network strategy, which is the feed.js file, that these files

02:01.970 --> 02:07.100
are loaded first so that we always load these when offline

02:07.100 --> 02:10.420
otherwise our other strategy can't work,

02:10.550 --> 02:19.130
now we can easily implement such a strategy. In the fetch listener here, we simply have to check which

02:19.130 --> 02:21.270
kind of request we're making,

02:21.350 --> 02:28.460
what we're requesting and we could say that we only want to use this strategy where we just store something

02:28.460 --> 02:31.150
in the cache and don't look up if it's there,

02:31.220 --> 02:38.240
so the counterpart for our cache then network strategy, that we only want to use that for the URL where

02:38.240 --> 02:41.390
we also have the code in a normal Javascript.

02:41.390 --> 02:46.150
Keep in mind, we're only using the cache then network strategy on this URL,

02:46.220 --> 02:48.880
we kick it off here in the feed.js file,

02:48.920 --> 02:53.010
so this is the only URL where we should use the service worker counterpart.

02:53.270 --> 02:59.260
So what we can do is we can store that URL here too, that was a little bit too much code

02:59.270 --> 03:01.880
I copied, just want to grab that URL here.

03:02.000 --> 03:05.790
So store it here too and with it stored here,

03:05.790 --> 03:09.810
keep in mind you can of course write code before respond with,

03:09.810 --> 03:13.110
this just means that's the final thing I want to respond with.

03:13.110 --> 03:15.300
So with that URL stored here,

03:15.300 --> 03:21.070
I can check if the event request URL contains that URL.

03:21.120 --> 03:25.570
Actually here, it should be equal but with indexOf URL,

03:25.620 --> 03:31.370
I can really be sure that the URL I'm sending the request to contains this string,

03:31.370 --> 03:37.050
this is a simple way of parsing the URL. If that is greater than minus one, it means we have

03:37.050 --> 03:42.080
found an entry of this string in this string,

03:42.120 --> 03:46.030
so in the URL which also is a string we're sending the request to.

03:46.410 --> 03:50.130
So if it's greater than minus one, we know we hit something,

03:50.130 --> 03:51.180
we found it,

03:51.510 --> 03:59.130
so in this case, we want to respond with that strategy. In the other case though, we're not having a

03:59.130 --> 04:01.500
cache then network strategy,

04:01.500 --> 04:05.300
we want to use our old strategy then, nothing easier than that.

04:05.400 --> 04:14.260
Let's copy our caches match code from down there, from our old strategy and let's implement it here.

04:14.420 --> 04:22.790
If we now comment this in here and important, wrap it in event respond with otherwise we're, well not responding

04:22.790 --> 04:23.910
with that.

04:23.930 --> 04:26.420
So wrap all that code, put it in

04:26.420 --> 04:28.080
respond with here,

04:28.430 --> 04:36.170
so once we did this, we're actually checking that we only use the cache then network counterpart for

04:36.180 --> 04:40.270
that URL where we also have the other code in the feed.js file

04:40.580 --> 04:49.040
and for all other URLs which don't use the cache then network strategy, we're using our old cache with

04:49.040 --> 04:51.530
network fallback strategy,

04:51.560 --> 04:56.630
so where we always try to find it in the cache first, return it if we do find it and only reach out

04:56.630 --> 05:03.620
to the network if we don't find it. With that if we save this, we of course need to reload the app to install

05:03.620 --> 05:09.680
the new service worker and once installation is finished, we can close that and open a new tab to activate

05:09.680 --> 05:10.420
it

05:10.640 --> 05:15.890
and now we can already see in the network tab if I reload this page, that a lot of stuff is fetched from

05:15.890 --> 05:16.760
the service worker

05:16.820 --> 05:22.090
except for this get route here where we see a file size because there, we do reach out to the web

05:22.550 --> 05:26.840
and now we also see that in application, if I go offline,

05:27.080 --> 05:28.230
this still works.

05:28.250 --> 05:32.890
We also get our cards still because we have the cache then network strategy,

05:32.900 --> 05:37.640
so it works offline if no network is available but it prefers the network

05:37.640 --> 05:43.230
if it does have one. That's the finished strategy enhanced with, I call it routing,

05:43.250 --> 05:49.610
so parsing the request URL to load different strategies for different requests. A little bit

05:49.610 --> 05:56.750
of an advanced concept but super useful because with that, you have full control over how you load which

05:56.750 --> 05:57.470
resource.
