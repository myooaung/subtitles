WEBVTT

00:02.260 --> 00:07.140
So in the last lecture, we added the functionality to read data, that's pretty good.

00:07.150 --> 00:13.230
Now let's consider a new case, let's say in our database we had more posts than just one,

00:13.240 --> 00:20.740
let's quickly add a second post here. So I'll add second post, second post,

00:20.770 --> 00:22.380
click the plus on the right,

00:22.600 --> 00:25.750
then give it an ID which is second post again,

00:25.990 --> 00:26.250
click

00:26.250 --> 00:27.080
add

00:27.200 --> 00:33.030
and now let's add an image and you can use any link to any image you want here or just enter nothing,

00:33.040 --> 00:37.060
of course no image will be displayed then but it's only for testing purposes.

00:37.090 --> 00:44.710
I'll enter a title which is test post for example and the last property, the location, here I'm in Munich

00:44.710 --> 00:46.610
so I'll use that, use whatever you want.

00:46.600 --> 00:48.620
The key thing is we have two posts now.

00:48.970 --> 00:54.800
Now let's quickly call this or refresh the page and we correctly see a second card.

00:54.880 --> 00:56.400
Now there is no image since I entered

00:56.400 --> 00:59.120
xxx and that's why you see that failed request,

00:59.140 --> 01:00.710
of course that's not found

01:01.000 --> 01:02.990
but you see the card was added,

01:03.100 --> 01:09.660
you also see an application if you refresh your indexedDB, we have the second post here in the indexedDB,

01:09.880 --> 01:12.060
that is working as it should.

01:12.070 --> 01:17.530
Now what happens if we for some reason would delete an entry from the database and that's not that uncommon

01:17.530 --> 01:18.680
for dynamic data,

01:18.820 --> 01:20.420
data changes.

01:20.500 --> 01:24.590
Now if we just change a value, let me do that first,

01:24.850 --> 01:26.130
that's not really an issue.

01:26.260 --> 01:33.150
If I do this and I reload here, if I now refresh the indexedDB, that changed too.

01:33.160 --> 01:37.190
By the way, if it doesn't change immediately, close your developer tools, reopen them,

01:37.210 --> 01:40.520
sometimes you then have the bug that this doesn't open, click refresh,

01:40.600 --> 01:46.000
try again until you can open it and then you should see that this was refreshed too.

01:46.030 --> 01:51.970
So changes are reflected because we use the put methods and the put method overwrites old values, we used

01:51.970 --> 01:53.740
the put method here.

01:53.980 --> 02:00.030
So changes are reflected but if we remove the second post, what does then happen?

02:00.220 --> 02:07.390
So we're back to one post and now back in our application if I reload, we still see the second post for

02:07.390 --> 02:13.060
a brief second until the network told us that it's not there because we have the cache then network

02:13.060 --> 02:13.930
strategy,

02:13.930 --> 02:17.220
that's why we initially see it before the network overwrites it

02:17.560 --> 02:22.960
but the problem we face is, if I open and close the developer tools to make sure I get a really updated

02:22.960 --> 02:24.820
version of indexedDB,

02:24.820 --> 02:28.550
here you see the second post is still in the cache. Now

02:28.660 --> 02:33.670
therefore if we go offline, we still see the second post.

02:33.670 --> 02:36.790
The reason for this is is that put overrides the old value

02:36.880 --> 02:41.810
but if the old value is gone, it's not removing it, it just overrides it if it's there.

02:42.100 --> 02:48.070
So if we delete a value on the database and again, it's not that uncommon for dynamic data to change

02:48.070 --> 02:54.210
or even be removed, that's not fully reflected in our front-end database in indexedDB.

02:54.370 --> 03:01.120
So we need a way to also handle the case that data was removed and one easy and good way to handle this

03:01.420 --> 03:08.590
is to simply go to the service worker and whenever we write new data into our indexedDB here, before

03:08.590 --> 03:14.320
we do so, we could clear the entire database because we're fetching all the data we want to store anyways,

03:14.530 --> 03:19.900
so we could clear it and then we're writing all the new entries anyway, so we would have a clear database

03:20.260 --> 03:23.830
and re-populate it every time we get back data.

03:23.830 --> 03:29.170
Now of course, you can also write more elaborate solutions than that and I will give you the code to

03:29.170 --> 03:32.670
both delete single items or clear the whole database

03:32.740 --> 03:38.640
depending on which approach you want to use. Let's implement the clear database method in the next lecture.
