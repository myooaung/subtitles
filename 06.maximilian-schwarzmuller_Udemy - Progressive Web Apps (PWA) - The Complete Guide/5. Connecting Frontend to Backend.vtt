WEBVTT

00:02.270 --> 00:05.310
In the last lecture, we set up Firebase to have some data there,

00:05.390 --> 00:08.660
we added some data to the database and to the storage.

00:08.660 --> 00:12.020
Now it's time to head back to the project and fetch that data.

00:12.140 --> 00:16.890
We already make a HTTP request and I basically want to do the same,

00:16.950 --> 00:22.710
I want to get the data from Firebase but now I then also want to update the code to use that data.

00:23.090 --> 00:27.470
So for that first of all, let's see how we can fetch it from Firebase, in the end

00:27.470 --> 00:30.000
we want to fetch this first post here,

00:30.050 --> 00:30.540
right.

00:30.560 --> 00:36.590
So what we can do is we can simply fetch all posts and then loop through all of them to basically create

00:36.590 --> 00:40.340
a card for each post we have in that posts array here.

00:40.700 --> 00:45.810
So if you click on posts, you can use this URL here to make your HTTP request,

00:45.830 --> 00:52.520
so let's go back to the application and replace URL with this URL here. Now important,

00:52.640 --> 00:55.240
you also have to add .json at the end,

00:55.310 --> 01:01.070
this is simply a requirement from Firebase to really target the right API endpoint.

01:01.070 --> 01:08.090
Now since we also use this with the cache then network strategy, let's go to the service worker already and

01:08.090 --> 01:11.380
make sure we update our URL parsing there too.

01:11.410 --> 01:14.710
Here we we're looking for URLs reaching to the get route,

01:14.720 --> 01:19.760
now let's use our new route here to make sure that every request which reaches this route is handled

01:19.760 --> 01:22.940
correctly here and we store the answer, though

01:22.970 --> 01:28.520
this is exactly what we'll also work on in this module because we'll store it differently later, not in

01:28.520 --> 01:30.750
the cache but for now, I'll leave it like that.

01:31.220 --> 01:36.020
So back in the feed.js file, now we're reaching out to this page,

01:36.020 --> 01:38.490
it should no longer be a post request,

01:38.510 --> 01:44.570
instead it should be a normal get request, so we can get rid of all that configuration on our fetch method

01:44.570 --> 01:45.430
here.

01:45.500 --> 01:52.040
Now we fetch the data and the one thing I want to change now is here. Right now I just create one card

01:52.040 --> 01:53.680
and that's a dummy card,

01:53.780 --> 01:56.170
I now want to create a card based on the data

01:56.180 --> 02:01.700
I actually fetched and actually, that could be more than one card because maybe I have more than one

02:01.700 --> 02:02.750
card I fetched,

02:02.810 --> 02:10.130
so I need a whole new way of creating these cards. For that, I'll create a new function and I'll name

02:10.130 --> 02:10.280
it

02:10.310 --> 02:11.890
updateUI.

02:12.200 --> 02:14.260
So here in updateUI,

02:14.270 --> 02:15.100
I

02:15.290 --> 02:17.360
now expect to get the data

02:17.690 --> 02:19.700
and now I want to loop through it.

02:19.820 --> 02:27.980
So I'll create a normal for loop here starting with i equal to zero, looping as long as it's

02:27.980 --> 02:33.740
smaller than the data length and incrementing it, so a normal for loop here and inside there,

02:33.750 --> 02:37.330
I want to call create card and pass that data piece

02:37.430 --> 02:42.430
I'm currently at to that method, so that I create a card for the data I'm currently at.

02:42.680 --> 02:47.580
Now Card, Create Card doesn't expect to get any data yet, so let's add this too

02:47.900 --> 02:49.690
and now we should use the data we get 

02:49.730 --> 02:55.250
here to really create a card using the data. That starts here with the background image

02:55.250 --> 02:58.580
for example, we no longer need to use that dummy image here,

02:58.640 --> 03:02.050
in the end we will still use this because that's what I uploaded

03:02.300 --> 03:06.860
but I theoretically want to be able to use any image and later in the course once we really upload our

03:06.890 --> 03:09.920
own images, this definitely becomes important.

03:09.920 --> 03:16.000
So I'll simply simply restructure this to add a dynamic piece to that string here.

03:16.040 --> 03:22.520
I want to access data image here to stay in line with the name I chose here because in the end what

03:22.520 --> 03:25.300
we'll loop through is all the data pieces in posts,

03:25.310 --> 03:30.630
so what we pass to create cards will be a single post, so we can access the image property on this

03:30.680 --> 03:35.840
because of the Javascript-like structure we have in that Firebase database here.

03:36.080 --> 03:39.700
So I can access image here and simply route to that,

03:39.710 --> 03:40.690
that's pretty good.

03:40.850 --> 03:43.050
Let's see if that works, we'll see it in,

03:43.100 --> 03:49.730
well in the next lectures. Another thing I want to do is the title here of course. We do have a title

03:49.850 --> 03:51.740
in our database too, here, title,

03:51.800 --> 03:53.330
so let's use that.

03:53.360 --> 03:57.070
So I will simply replace this string with data

03:57.140 --> 03:58.640
title.

03:58.640 --> 04:01.130
We also have a location we can output,

04:01.190 --> 04:08.750
so here where I say in San Francisco, I want to output data.location because again, we have that here

04:09.320 --> 04:11.230
in San Francisco.

04:11.330 --> 04:15.480
So this is now all using the data from my database,

04:15.470 --> 04:20.010
so from the back-end and I'm creating a card when looping through it.

04:20.180 --> 04:24.230
So now the only thing we have to do is call updateUI once we get the data.

04:24.230 --> 04:27.960
So here in fetch, we receive the data

04:28.040 --> 04:33.220
and now of course we want to no longer call create card here but call updateUI.

04:33.440 --> 04:39.890
However passing the data like that won't work because the data we get back here when we reach out to

04:39.890 --> 04:43.240
posts is actually not an array

04:43.400 --> 04:48.680
but since we have an identifier here, it's an object where we have key-value pairs.

04:48.790 --> 04:50.490
The keys will be these things

04:50.480 --> 04:56.330
here, so our individual post IDs basically and the values will then be the objects, so we have a Javascript

04:56.390 --> 04:59.290
object and not an array.

04:59.570 --> 05:01.490
So we have two ways of fixing this,

05:01.670 --> 05:08.780
we could use a for/in loop here simply but I want to keep this function flexible. So what I'll instead do is I'll simply

05:08.790 --> 05:15.360
convert data here to an array and to do this really cleanly, I'll convert data here to an array.

05:15.410 --> 05:22.030
So I will simply loop through all the keys in data and I'll create a new array,

05:22.040 --> 05:27.410
so data array is what I want to get and it's an empty array at the beginning and then I will simply

05:27.410 --> 05:32.230
say data array push and push data key,

05:32.360 --> 05:40.820
so I push all the values, so the objects we have here in these key-value pairs onto this array and therefore

05:40.820 --> 05:45.750
I create a new array which only holds the objects here with these properties.

05:46.130 --> 05:52.600
So that's my data array and now I'm passing data array to updateUI. Now clear cards can also go to updateUI

05:52.620 --> 05:55.970
here at the beginning before we create all these cards,

05:56.120 --> 05:59.400
now in the cache, I also want to call updateUI

05:59.420 --> 06:05.480
and of course there since we receive the data here from the cache which is our stored response in the

06:05.480 --> 06:11.390
end, I also want to execute this transformation code here.

06:11.690 --> 06:13.510
So I'll also do that here

06:13.640 --> 06:18.650
and if you want to avoid repeating yourself here, you can of course outsource this into its own method

06:18.800 --> 06:21.130
too, I'll leave it like this for now.

06:21.200 --> 06:25.030
So pass the data array, we need to create that variable

06:25.130 --> 06:35.740
therefore here and now we also update the UI from cache. In our cache if we have a look at it, we will recognize

06:35.740 --> 06:41.170
that URL and there we will add it to that dynamic cache, so that should still work.

06:42.020 --> 06:48.300
So with that, we made some changes and now we should really render the content from our Firebase back-end,

06:48.330 --> 06:50.950
let's see if that works.

06:51.020 --> 06:56.210
Now to see this, you of course have to make sure that your development server is running,

06:56.240 --> 06:57.880
for me it still is

06:58.220 --> 07:03.320
and then go back to your application and go to application and make sure to clear the storage because we

07:03.320 --> 07:06.420
changed so much even about the data and how we get it,

07:06.590 --> 07:13.710
I don't want to have anything old in the cache. So let's simply clear the storage here and then reload

07:13.910 --> 07:15.150
and we already see

07:15.170 --> 07:17.750
this seems to work because this is not coming from cache,

07:17.750 --> 07:20.370
instead this should be coming from the web

07:20.370 --> 07:22.690
and here we can confirm it from web,

07:22.700 --> 07:26.860
this is the first post object we get, seems to be converted correctly.

07:26.870 --> 07:29.120
Now let's reload one more time,

07:29.120 --> 07:30.460
this still looks good,

07:30.470 --> 07:34.270
now let's reload again to see if it's coming from the cache too,

07:34.640 --> 07:35.170
looks good and

07:35.190 --> 07:37.980
now let's go offline and see if that works.

07:38.060 --> 07:40.950
If I am offline now, it still works,

07:41.060 --> 07:43.860
so we can still use or still see that card,

07:43.880 --> 07:50.870
the key thing is this card is now really coming from Firebase and to prove this, let me change something

07:50.870 --> 07:51.770
in Firebase.

07:51.770 --> 07:54.450
So we have in San Francisco here now,

07:54.680 --> 07:59.580
so let's change this to near Golden Gate.

07:59.780 --> 08:05.990
Let's hit enter here to update that and let's go back to the application and reload and we see near Golden

08:05.990 --> 08:07.850
Gate here, for a fraction of a second,

08:07.850 --> 08:13.410
you saw in San Francisco because of our cache then network strategy which first fetch that from the cache

08:13.790 --> 08:18.260
but now you see, it indeed is fetching it from the network and updating it from there.

08:18.260 --> 08:19.370
So this is pretty cool,

08:19.370 --> 08:21.030
now we have dynamic data,

08:21.080 --> 08:25.180
now let's get back to why our current approach might not be the best

08:25.340 --> 08:29.630
and how we could store dynamic data using indexedDB.
