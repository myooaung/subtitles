WEBVTT
1
00:00:02.800 --> 00:00:09.460
Welcome to this course module. In the last course module about routing, we had first contact with

2
00:00:09.520 --> 00:00:10.890
observables.

3
00:00:10.900 --> 00:00:15.160
Now I want to dive deeper into observables in this section.

4
00:00:15.160 --> 00:00:17.570
Now you could create a whole course about observables,

5
00:00:17.620 --> 00:00:22.960
so we're not going to dive that deeply into them but I want you to understand what observables actually

6
00:00:23.020 --> 00:00:27.420
are and what you could use them for and why Angular uses them.

7
00:00:27.460 --> 00:00:33.390
So what is an observable? An observable basically can be thought of as a data source.

8
00:00:33.400 --> 00:00:40.420
Now in our Angular project, an observable basically just is an object we import from a third-party package,

9
00:00:40.640 --> 00:00:49.030
RxJS. The observable here is implemented in a way that it follows the observable pattern,

10
00:00:49.030 --> 00:00:52.800
so we have an observable and we have an observer. In between,

11
00:00:52.810 --> 00:00:55.020
we have a stream, a timeline

12
00:00:55.180 --> 00:01:02.030
and on this timeline, we can have multiple events emitted by the observable or data packages

13
00:01:02.050 --> 00:01:08.290
you could say emitted by the observable, depending on the data source of that observable of course.

14
00:01:08.290 --> 00:01:13.350
So the observable could emit data because you trigger it to do so,

15
00:01:13.390 --> 00:01:15.430
you can do that programmatically,

16
00:01:15.430 --> 00:01:20.440
it could be connected to a button and therefore whenever the button is clicked, an event in a data package

17
00:01:20.470 --> 00:01:25.500
is emitted automatically or as the Angular HTTP service does it,

18
00:01:25.510 --> 00:01:27.710
it's connected to a HTTP request.

19
00:01:27.760 --> 00:01:31.960
So when the response returns, the response is emitted as a data package

20
00:01:31.960 --> 00:01:34.960
and there are dozens of other data sources too,

21
00:01:34.990 --> 00:01:38.830
we will have a look on where to find more soon.

22
00:01:39.250 --> 00:01:42.550
So as I said, the other part is the observer,

23
00:01:42.610 --> 00:01:48.820
this actually is your code you could say. It's the subscribe function you saw earlier or at least it

24
00:01:48.820 --> 00:01:50.870
has something to do with that.

25
00:01:50.900 --> 00:01:54.850
There, you have three ways of handling data packages - 

26
00:01:54.850 --> 00:02:01.000
you can handle the normal data, you can handle errors or you can handle the completion of the observable

27
00:02:01.240 --> 00:02:08.020
because these are the three types of data packages you can receive and in these hooks, in these

28
00:02:08.020 --> 00:02:11.300
boxes you could say, your code gets executed.

29
00:02:11.380 --> 00:02:16.690
So you can determine what should happen if I receive a new data package, what should happen if I receive

30
00:02:16.690 --> 00:02:17.480
an error,

31
00:02:17.590 --> 00:02:24.040
what should happen when the observable eventually completes? Side note, an observable doesn't have to

32
00:02:24.040 --> 00:02:24.820
complete,

33
00:02:24.820 --> 00:02:30.730
there are observables, for example hooked up to a normal button, which never complete because how would

34
00:02:30.730 --> 00:02:32.350
you know when it completes?

35
00:02:32.410 --> 00:02:35.580
A user could click the button how often the user wants right.

36
00:02:35.890 --> 00:02:42.130
Other observables, like the HTTP request on the other hand, will have a clear end and will complete eventually

37
00:02:42.160 --> 00:02:46.780
because once the response is there, what else should happen, it's done.

38
00:02:46.780 --> 00:02:50.610
So this is how the observable pattern generally works

39
00:02:50.620 --> 00:02:57.810
and of course you use it to handle asynchronous tasks because all these data sources here, user events

40
00:02:57.810 --> 00:03:04.780
triggered in your code or a HTTP request are asynchronous tasks, you don't know when they will happen

41
00:03:04.990 --> 00:03:07.490
and you don't know how long they will take.

42
00:03:07.510 --> 00:03:14.080
So if you execute your normal application code, you don't want to wait for these events or you don't

43
00:03:14.080 --> 00:03:20.500
want to wait for the completion of such a HTTP request because that would block your program, would block

44
00:03:20.530 --> 00:03:21.570
your logic.

45
00:03:21.790 --> 00:03:26.430
Therefore, we need methods of handling such asynchronous tasks

46
00:03:26.560 --> 00:03:29.960
and historically you might have used callbacks or promises

47
00:03:30.160 --> 00:03:36.700
and it's not necessarily bad to use them, observables is just a different approach of handling that, a

48
00:03:36.700 --> 00:03:43.870
different alternative and Angular embraces observables which is why I chose to explain these because

49
00:03:43.900 --> 00:03:48.810
Angular uses them a lot and actually, observables have one major advantage,

50
00:03:48.880 --> 00:03:54.160
their operators, which I will show later in the section too. Back to this slide,

51
00:03:54.250 --> 00:04:00.310
so we got our observable and we get our observer with the three buckets you could say or with the three

52
00:04:00.370 --> 00:04:06.110
hooks where different code is executed depending on the type of package we receive and then exactly

53
00:04:06.110 --> 00:04:07.090
this happens,

54
00:04:07.210 --> 00:04:10.900
the observables might emit a couple of normal data packages,

55
00:04:10.990 --> 00:04:18.140
it might emit an error or eventually, it might get completed and the respective code is then executed.

56
00:04:18.310 --> 00:04:19.580
So that's the theory,

57
00:04:19.690 --> 00:04:23.720
let's now take a closer look in our actual project.
