WEBVTT
1
00:00:02.230 --> 00:00:04.840
Now to finish up this topic on interceptors

2
00:00:04.840 --> 00:00:10.100
and by the way, we'll see interceptors again in the authentication section of this course

3
00:00:10.150 --> 00:00:15.670
but to wrap it up for now, let's add a second interceptor because you're not limited to one, you can add

4
00:00:15.700 --> 00:00:17.210
as many as you want.

5
00:00:17.410 --> 00:00:22.700
I'll name this one logging interceptor because I only want to do some logging here

6
00:00:23.020 --> 00:00:27.430
and therefore the file name is logging-interceptor.service.ts and

7
00:00:27.460 --> 00:00:28.580
there

8
00:00:28.870 --> 00:00:31.190
we now will create a new interceptor,

9
00:00:31.210 --> 00:00:34.600
feel free to pause the video at this point and try it on your own of course.

10
00:00:37.350 --> 00:00:45.510
You do create it by exporting a class, which you should name appropriately like logging interceptor

11
00:00:45.510 --> 00:00:49.350
service,

12
00:00:49.370 --> 00:00:55.990
this has to implement the HttpInterceptor interface which you import from @angular/common/http,

13
00:00:56.000 --> 00:01:02.750
this forces you to add an intercept method which then in turn gets a request which is of type

14
00:01:02.780 --> 00:01:10.910
HTTP request and which gets this next object function thing which is of type HTTP handler

15
00:01:11.120 --> 00:01:14.990
and there, you should return next handle as you learned

16
00:01:15.320 --> 00:01:21.420
and since HTTP request is generic, you should also add angled brackets there and define the type of data

17
00:01:21.440 --> 00:01:22.730
it will eventually wrap.

18
00:01:22.940 --> 00:01:26.350
Now to next handle, you also have to pass your request in.

19
00:01:26.450 --> 00:01:31.550
This is a basic interceptor but of course, it's not doing any logging which it should if we have a look

20
00:01:31.550 --> 00:01:32.830
at the name.

21
00:01:32.870 --> 00:01:36.970
So here, I will now do some logging and of course log whatever you want here.

22
00:01:37.130 --> 00:01:48.310
So here, I'll just log outgoing request and maybe also the URL, though you could of course also

23
00:01:48.310 --> 00:01:50.250
log the headers or whatever you want

24
00:01:50.440 --> 00:01:57.460
and on the response, I will now again pipe the tap operator which is imported from

25
00:01:57.490 --> 00:01:59.860
rxjs/operators where I got the event

26
00:02:03.840 --> 00:02:06.410
and here, we could now log all events again

27
00:02:06.420 --> 00:02:08.530
but I only care about the response

28
00:02:08.700 --> 00:02:14.310
so I'll compare the event type to HTTP event type response

29
00:02:14.490 --> 00:02:24.350
and in there, we can console log incoming response and also console log the event body, so the response

30
00:02:24.350 --> 00:02:30.410
body if you want to. Now it's a very simple logging interceptor. In the auth interceptor, I'll therefore

31
00:02:30.410 --> 00:02:33.470
get rid of that extra logging I'm doing here,

32
00:02:33.470 --> 00:02:37.840
so I'll get rid of that pipe method and just return the modified request,

33
00:02:37.870 --> 00:02:44.300
I'll also not log these two statements here, so that I have a leaner interceptor here.

34
00:02:44.300 --> 00:02:49.640
So this interceptor is now only attaching the auth header and the other interceptor is responsible

35
00:02:49.640 --> 00:02:50.690
for logging,

36
00:02:50.690 --> 00:02:52.850
now we just need to add them both

37
00:02:52.850 --> 00:02:58.880
and now here it comes something super important, the order in which you provide them matters because

38
00:02:58.880 --> 00:03:02.360
that will be the order in which they are executed.

39
00:03:02.390 --> 00:03:08.000
So in the app module here, of course we provide the other interceptor, the logging interceptor by simply

40
00:03:08.000 --> 00:03:11.210
repeating this object in that providers array

41
00:03:11.360 --> 00:03:16.620
and here you now point at that logging interceptor service which you have to import

42
00:03:16.820 --> 00:03:22.970
but now this auth interceptor will run first and thereafter comes the logging interceptor.

43
00:03:23.000 --> 00:03:29.570
Now often, the order might not matter but if it does, be aware of that order and order your interceptors

44
00:03:29.570 --> 00:03:35.300
accordingly so that the order in which they execute fits your use case and whatever you're doing in

45
00:03:35.300 --> 00:03:41.750
your interceptors and to prove that order thing, in the logging interceptor, I'll actually also console

46
00:03:41.750 --> 00:03:49.040
log the request headers because there, since the logging interceptor comes second, we should see that

47
00:03:49.040 --> 00:03:52.430
custom key, this auth key being added.

48
00:03:52.430 --> 00:03:59.990
So now if that if we save that, let me clear the console and fetch again, we see outgoing request

49
00:03:59.990 --> 00:04:04.280
and URL, we see the headers and in there,

50
00:04:04.280 --> 00:04:12.660
indeed we have that auth thing with the value of xyz and we have incoming response and we see the response

51
00:04:12.660 --> 00:04:16.950
body and now to really prove that order thing, remember that

52
00:04:16.950 --> 00:04:19.210
here we see auth xyz,

53
00:04:19.320 --> 00:04:25.980
now I guess you can already imagine what will happen if I switch the order here and we log first and

54
00:04:25.980 --> 00:04:28.040
thereafter, we add the key.

55
00:04:28.050 --> 00:04:34.200
Well if we do that and I clear that and then I fetch, then of course you see we still log the same as

56
00:04:34.200 --> 00:04:34.890
before

57
00:04:34.950 --> 00:04:41.230
but if we inspect our headers, here we only got that custom header which we're not setting in an interceptor,

58
00:04:41.310 --> 00:04:43.650
we're missing the auth header though.

59
00:04:43.740 --> 00:04:45.570
So the order matters

60
00:04:45.570 --> 00:04:49.980
but other than that, providing multiple interceptors is extremely simple as you can tell.
