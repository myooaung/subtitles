1

00:00:02,590  -->  00:00:10,730
In the last lecture, we saw ngIf, super useful directive and ngIf was a structural directive, the other

2

00:00:10,730  -->  00:00:16,400
type of directives are attribute directives which are called like this because they really just look

3

00:00:16,400  -->  00:00:20,830
like normal HTML attributes without a star basically.

4

00:00:20,960  -->  00:00:24,170
Let's add one, on the server component here,

5

00:00:24,410  -->  00:00:29,060
we output the serverStatus right and the serverStatus always is offline,

6

00:00:29,090  -->  00:00:30,520
let's mix this up.

7

00:00:30,610  -->  00:00:38,240
Let's say we want to dynamically create this, so I'll add the constructor which is just a built-in method

8

00:00:38,330  -->  00:00:43,070
each TypeScript class has which is called once this component is created

9

00:00:43,370  -->  00:00:47,800
and here I will set the serverStatus to a random value,

10

00:00:47,930  -->  00:00:54,530
I will use the math.random function and this gives us a random number between 0 and 1, a floating point

11

00:00:54,530  -->  00:00:55,340
number

12

00:00:55,790  -->  00:01:03,260
and if this is greater than 0.5, I want to set the status to online otherwise I will set it to

13

00:01:03,260  -->  00:01:04,610
offline.

14

00:01:04,610  -->  00:01:08,910
So with that, we shouldn't get the same status all the time

15

00:01:09,000  -->  00:01:11,260
and now let's check this,

16

00:01:11,370  -->  00:01:16,080
we see indeed online and offline, that's lucky, could have of course also been both offline since we have

17

00:01:16,080  -->  00:01:18,010
a 50% chance.

18

00:01:18,090  -->  00:01:20,160
Now we have two different statuses here

19

00:01:20,370  -->  00:01:27,990
and now let's say we want to change the color, the background color of this component depending on

20

00:01:27,990  -->  00:01:35,540
the serverStatus. For this, we can use another directive, on this wrapping paragraph here,

21

00:01:35,610  -->  00:01:40,150
I can add it and it's called ngStyle.

22

00:01:40,170  -->  00:01:44,080
Now that's a built-in directive, you can recognize this on the ng

23

00:01:44,100  -->  00:01:50,340
at the beginning and ngStyle, that's the directive, is pretty useless like this,

24

00:01:50,340  -->  00:01:56,850
we need to give it some configuration to do something, that is why we will use property binding on this

25

00:01:56,850  -->  00:02:03,720
directive and it's super important to understand that the square brackets here are not part of the directive

26

00:02:03,720  -->  00:02:06,820
name, the directive name is just ngStyle,

27

00:02:06,980  -->  00:02:13,770
the square brackets indicate that we want to bind to some property on this directive and this property

28

00:02:13,770  -->  00:02:17,270
name happens to also be ngStyle.

29

00:02:17,370  -->  00:02:22,970
We will see this in practice on our own directives in the directives section later

30

00:02:23,040  -->  00:02:27,110
but super important to understand that property binding is not the same as a directive,

31

00:02:27,110  -->  00:02:28,350
it's totally different,

32

00:02:28,350  -->  00:02:31,920
we are binding to a property of the directive.

33

00:02:32,190  -->  00:02:37,150
This ngStyle property expects to get a Javascript object

34

00:02:37,470  -->  00:02:44,630
and here, we define key-value pairs of the style name as the key and the value of the style as the

35

00:02:44,640  -->  00:02:50,910
value. So for example, we could bind background-color and if you want to use this notation with the

36

00:02:50,910  -->  00:02:57,570
dash, you have to wrap it in single quotation marks to make it a valid Javascript property name or you

37

00:02:57,570  -->  00:02:59,370
use the camel case notation,

38

00:02:59,490  -->  00:03:02,260
backgroundColor like this

39

00:03:02,280  -->  00:03:06,710
and then you could set this to red but I don't want to set it to red,

40

00:03:06,720  -->  00:03:10,110
I want to set it to something depending on the serverStatus.

41

00:03:10,110  -->  00:03:20,140
So here we could simply call a method, getColor, so that is really mixing now all the things and make

42

00:03:20,140  -->  00:03:25,660
it clear that between the quotation marks, we are executing TypeScript code here, so therefore we can of

43

00:03:25,660  -->  00:03:27,730
course call a method.

44

00:03:27,770  -->  00:03:32,940
Now getColor is a method we can add here and getColor should

45

00:03:32,940  -->  00:03:38,150
now let's say return green if the status is online and red otherwise.

46

00:03:38,380  -->  00:03:41,120
So I will return something,

47

00:03:41,200  -->  00:03:43,130
first I check the serverStatus,

48

00:03:43,180  -->  00:03:45,240
so this serverStatus

49

00:03:45,340  -->  00:03:52,490
and if this is equal to online, using a ternary expressing here, I will return

50

00:03:52,750  -->  00:03:57,130
green, otherwise I will return red.

51

00:03:57,490  -->  00:04:00,430
So getColor will return green or red 

52

00:04:00,490  -->  00:04:04,450
and this is then assigned as the background color with ngStyle.

53

00:04:04,690  -->  00:04:07,850
If we now save this, let's have a look at the result.

54

00:04:08,940  -->  00:04:15,610
We see indeed the running server has a green background and the offline server has a red one,

55

00:04:15,740  -->  00:04:21,960
so that is working, ngStyle allows us to dynamically update that. If I reload,

56

00:04:22,060  -->  00:04:23,860
you see now both are offline

57

00:04:23,880  -->  00:04:25,250
so both are red now.

58

00:04:25,410  -->  00:04:30,680
And that is the big advantage of ngStyle, it allows you to dynamically update the styles

59

00:04:30,960  -->  00:04:35,870
and of course if the serverStatus here did change over time,

60

00:04:35,970  -->  00:04:38,850
it would update the styling respectively.

61

00:04:38,940  -->  00:04:43,780
So this binding we set up here still is working,

62

00:04:43,920  -->  00:04:50,930
if the serverStatus here which is responsible for choosing the right color changes, it updates the

63

00:04:50,930  -->  00:04:51,500
style.

64

00:04:51,530  -->  00:04:55,880
So that's ngStyle, an attribute directive added like an attribute

65

00:04:56,000  -->  00:04:59,610
and in this case, also using property binding to configure it.
