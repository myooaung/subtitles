1
00:00:02,930 --> 00:00:06,860
In the last lectures, we learned a lot about event binding and property binding,

2
00:00:06,920 --> 00:00:09,150
now let's combine both to

3
00:00:09,160 --> 00:00:10,970
two-way binding.

4
00:00:11,100 --> 00:00:17,950
We learned that we can get the event data like this for example, there is another approach too though.

5
00:00:18,420 --> 00:00:25,770
If I copy this and I comment it out and now I replace this input event here with something else, you will

6
00:00:25,770 --> 00:00:32,150
find that we have an even easier way of binding to some data. With two-way data binding,

7
00:00:32,280 --> 00:00:35,140
we combine property and event binding,

8
00:00:35,280 --> 00:00:42,090
we use it therefore by combining the syntaxes, square brackets and within these, parentheses.

9
00:00:42,510 --> 00:00:50,000
Now here, we have to use a special directive and we will learn more about directives in a second, @NgModel.

10
00:00:50,100 --> 00:00:54,300
Now we can set this equal to some property defined in our TypeScript code,

11
00:00:54,330 --> 00:00:58,880
so of to the server name for example. This set up will do the following,

12
00:00:59,100 --> 00:01:07,910
it will trigger on the input event and update the value of server name in our component automatically.

13
00:01:08,070 --> 00:01:15,120
On the other hand, since it is two-way binding, it will also update the value of the input element

14
00:01:15,120 --> 00:01:22,120
if we change server name somewhere else and I can demonstrate this by going back to the TypeScript code

15
00:01:22,660 --> 00:01:26,930
and setting server name to Testserver here initially.

16
00:01:27,280 --> 00:01:29,130
So before that was an empty string,

17
00:01:29,140 --> 00:01:30,820
now it isn't anymore.

18
00:01:31,040 --> 00:01:37,670
With this if we go back to the running application, you see that the input is pre-populated with that.

19
00:01:38,050 --> 00:01:45,570
Now if for demo purposes, I comment in the other input which does not use two-way binding,

20
00:01:45,610 --> 00:01:49,930
you'll see that this input is empty because again it's not using two-way binding.

21
00:01:49,930 --> 00:01:57,820
Now if I type something here, you see it updates the property name and hence it updates it there where we

22
00:01:57,860 --> 00:02:00,870
use string interpolation and in the other input

23
00:02:01,150 --> 00:02:07,210
but if I type here, it's not getting changed in the first input because again, we're not using two-way

24
00:02:07,210 --> 00:02:08,390
binding there.

25
00:02:08,470 --> 00:02:14,120
This is what two-way data binding is, a very simple way of binding in both directions

26
00:02:14,200 --> 00:02:21,510
and for example of reacting to changes in the input value here.

27
00:02:21,510 --> 00:02:23,690
So I will comment out the first approach,

28
00:02:23,740 --> 00:02:26,110
I will leave the method in here though,

29
00:02:26,200 --> 00:02:27,950
even though we're not calling it anymore

30
00:02:28,120 --> 00:02:34,990
but with that you now also had a look at two-way binding, a nice and easy way of reacting to events in both

31
00:02:34,990 --> 00:02:36,460
directions.

32
00:02:36,470 --> 00:02:39,550
Now let's fine tune our app here a little bit more

33
00:02:39,610 --> 00:02:45,400
and let's then move on to directives, another core feature of Angular.
