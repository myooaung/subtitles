WEBVTT
1
00:00:02.670 --> 00:00:05.090
In the last lecture, we had a look at event binding,

2
00:00:05.120 --> 00:00:09.190
now before focusing on two-way binding and explaining what this is,

3
00:00:09.200 --> 00:00:12.360
there's one other important thing you need to know about event binding.

4
00:00:12.710 --> 00:00:17.210
Let's say before this button, we also have a label, server name

5
00:00:17.240 --> 00:00:24.110
and then more importantly, we have an input which we maybe give a bootstrap class of form-control. Here

6
00:00:24.180 --> 00:00:29.040
I want to allow the user to enter the name of the server which should get created.

7
00:00:29.360 --> 00:00:31.300
So here, we could listen to the input event,

8
00:00:31.330 --> 00:00:37.600
this is a normal DOM event provided by the input element which is fired whenever the user types

9
00:00:38.000 --> 00:00:44.820
and here we could execute onUpdateServerName because it will be fired on every keystroke.

10
00:00:45.260 --> 00:00:53.390
So let's add this method to our component here and now I somehow want to output what the user entered

11
00:00:53.390 --> 00:01:01.140
right now, what the value of this field is. Now we can do this by passing $event here and

12
00:01:01.140 --> 00:01:05.970
$event super important is kind of a reserved variable name

13
00:01:06.020 --> 00:01:13.220
you can use in the template when using event binding. For this event, so only between these quotation marks

14
00:01:13.220 --> 00:01:20.170
here, $event will simply be the data emitted with that event.

15
00:01:20.540 --> 00:01:24.890
So input and click are default events provided by the DOM you could say

16
00:01:25.220 --> 00:01:30.560
and they ship some data when they are fired, the click event gives us an object which for example holds

17
00:01:30.560 --> 00:01:35.540
the coordinates where we clicked and the input event also gives us some data, some information about the

18
00:01:35.540 --> 00:01:42.410
event. Now we can capture this data with $event passed as an argument to the method we're

19
00:01:42.410 --> 00:01:48.530
calling or used anywhere between these quotation marks in the code we're executing, $event,

20
00:01:48.620 --> 00:01:52.910
something to keep in mind, reserved word which gives us access to event data.

21
00:01:53.330 --> 00:01:56.550
So now we pass this to onUpdateServerName,

22
00:01:56.630 --> 00:02:02.040
so here we know we will receive this event and this will be of type any for now.

23
00:02:02.450 --> 00:02:08.450
So now let's simply log it to the console, so that we can see it in this debug log.

24
00:02:09.170 --> 00:02:17.610
If we do this and I now type something here, watch the console on the right. A couple of outputs were

25
00:02:17.730 --> 00:02:22.880
written there, four to be precise because I typed four characters, did four keystrokes,

26
00:02:22.920 --> 00:02:25.880
so the input event was fired four times

27
00:02:25.890 --> 00:02:29.170
and if we have a look at this event, we get a couple of information here,

28
00:02:29.220 --> 00:02:36.510
for example the target and the target simply is the HTML element on which this event occurred.

29
00:02:36.510 --> 00:02:48.550
So here on the target, since this is an input element, if we scroll down, we also got the value, test and this

30
00:02:48.550 --> 00:02:49.830
is what the user entered.

31
00:02:50.020 --> 00:02:57.130
So what we can do now in our TypeScript code is we can set a server name property which is an empty

32
00:02:57.130 --> 00:02:58.670
string by default

33
00:02:59.050 --> 00:03:06.490
and then here in onUpdateServerName, instead of logging it, we could say this server name and we just

34
00:03:06.490 --> 00:03:14.650
learned that on the event which is of type event as we now also saw, here we have a target and on the

35
00:03:14.650 --> 00:03:22.440
target, we have a value. Now this is only available because the target is of type input element though.

36
00:03:22.460 --> 00:03:25.220
This is why my IDE doesn't like it,

37
00:03:25.290 --> 00:03:31.220
we can explicitly inform it about the type in TypeScript by adding HTML input element here

38
00:03:32.580 --> 00:03:35.280
in front of it, like this

39
00:03:35.510 --> 00:03:43.190
and again this is just needed to inform TypeScript that we know that the type of the HTML element of

40
00:03:43.190 --> 00:03:45.790
this event will be an HTML input element.

41
00:03:45.800 --> 00:03:52.670
We do this explicit casting with this syntax, with the opening and closing tag, with the smaller and greater

42
00:03:52.670 --> 00:03:54.920
than sign and the type in-between.

43
00:03:55.340 --> 00:04:03.050
So with that we assign this value to our server name, what we can now do is in the HTML file here,

44
00:04:04.080 --> 00:04:05.670
we can output this for now.

45
00:04:05.670 --> 00:04:11.070
So with string interpolation, we could output the server name below the input.

46
00:04:11.310 --> 00:04:18.390
If we save this and go back to this application and I type test server here, you see this dynamically

47
00:04:18.390 --> 00:04:20.440
updates below the input.

48
00:04:20.580 --> 00:04:27.480
This is how you can use this $event object to fetch the event data.

49
00:04:27.480 --> 00:04:34.560
Now with that, let's move on to two-way data binding to kind of finish this little example app here for

50
00:04:34.560 --> 00:04:35.230
now.
