1
00:00:02,570 --> 00:00:06,410
What should our recipe service do for us?

2
00:00:06,410 --> 00:00:13,760
I guess it makes sense if the recipe service is the place in our app where we manage our recipes. Therefore

3
00:00:14,030 --> 00:00:21,220
we should take our recipes which we currently manage in our recipe list and manage it in the recipe

4
00:00:21,220 --> 00:00:22,200
service,

5
00:00:22,220 --> 00:00:28,820
that's the first thing with which I'll start, so I'll simply copy it for now and add it as a property in

6
00:00:28,820 --> 00:00:30,200
the recipe service.

7
00:00:30,320 --> 00:00:35,480
Of course we now have to add the import pointing to the recipe model file which sits in the same folder

8
00:00:35,510 --> 00:00:37,040
as the service.

9
00:00:37,340 --> 00:00:45,140
So with that, we get an array of recipes in the recipe service and I will actually make this private

10
00:00:45,230 --> 00:00:49,540
so that you can't directly access this array from outside.

11
00:00:50,150 --> 00:00:56,390
Now with this added, I also want to add a getRecipes method which will return this array, so that we

12
00:00:56,390 --> 00:00:59,420
can get access to it from outside.

13
00:00:59,420 --> 00:01:06,320
If I were to return it like this, I actually return the direct reference to this array

14
00:01:06,470 --> 00:01:12,660
and since arrays and objects are reference types in Javascript, so has nothing to do with Angular, vanilla

15
00:01:12,660 --> 00:01:14,460
Javascript that is,

16
00:01:14,840 --> 00:01:20,660
well if we now change something on this array, we will change it on the array in this service.

17
00:01:20,660 --> 00:01:24,420
Therefore, I will call slice with no arguments,

18
00:01:24,510 --> 00:01:31,030
this will simply return a new array which is an exact copy of the one in this service file.

19
00:01:31,100 --> 00:01:36,410
So therefore, we really can't access the recipes array stored here from outside,

20
00:01:36,410 --> 00:01:39,090
we only get a copy,

21
00:01:39,300 --> 00:01:43,740
so that is a way to get our recipe.

22
00:01:43,740 --> 00:01:48,440
Now with that, we can and we have to add our service,

23
00:01:48,450 --> 00:01:55,950
actually both services to a place in our app to provide them so that we can inject them. Where should

24
00:01:55,950 --> 00:02:05,090
we provide both services? Well let's start with providing the recipe service in our recipe component,

25
00:02:05,230 --> 00:02:11,290
we can always put it somewhere else later if we recognize that we want access to it from another part

26
00:02:11,290 --> 00:02:12,150
in our app

27
00:02:12,460 --> 00:02:17,670
but for now, I'll add providers, this array to the recipe component,

28
00:02:17,800 --> 00:02:23,920
therefore this component and all other recipe related components, since they are all child components

29
00:02:23,920 --> 00:02:29,260
to this component in the end, will share the same instance of this service but you won't be able to access

30
00:02:29,260 --> 00:02:34,530
the service or at least not the same instance in other components like the shopping list component.

31
00:02:34,810 --> 00:02:39,380
So here in providers, I will list my recipe service,

32
00:02:39,460 --> 00:02:45,620
of course you have to add an import at the top telling TypeScript where to find this type.

33
00:02:45,660 --> 00:02:51,280
Now with this, we use our or we can use our recipe service here,

34
00:02:51,300 --> 00:02:54,450
now let's use it in the recipe list component.

35
00:02:55,180 --> 00:03:00,090
Here right now, we already manage our recipe array,

36
00:03:00,340 --> 00:03:02,870
now I don't want to do that here anymore,

37
00:03:02,980 --> 00:03:05,160
it will be undefined initially,

38
00:03:05,320 --> 00:03:08,240
we will get the value here in ngOnInit

39
00:03:08,350 --> 00:03:14,500
and for this, we need to inject our service. Now we can do this since we just provided it on the parent

40
00:03:14,500 --> 00:03:15,330
component,

41
00:03:15,340 --> 00:03:22,230
so here I will provide my recipe service which is of type recipe service.

42
00:03:22,360 --> 00:03:28,390
Of course make sure to import recipe service from the appropriate file and this should be private

43
00:03:28,600 --> 00:03:36,090
here, to use this TypeScript shortcut of instantly assigning a property with the same name. In

44
00:03:36,090 --> 00:03:36,480
ngOnInit,

45
00:03:36,480 --> 00:03:46,290
I can now say this recipe equals this recipe service get recipes and we will get this copy of recipes,

46
00:03:46,290 --> 00:03:48,210
this copy of that array.

47
00:03:48,750 --> 00:03:55,800
Well, let's see this in action. If we save this, we should and we do see the same as before,

48
00:03:55,810 --> 00:04:02,020
the app works just like before because the only thing we changed right now is where and how we manage

49
00:04:02,080 --> 00:04:04,010
our array of recipes.

50
00:04:04,060 --> 00:04:05,590
An important first step.
