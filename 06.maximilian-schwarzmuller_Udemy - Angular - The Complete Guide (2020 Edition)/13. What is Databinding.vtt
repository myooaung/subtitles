WEBVTT
1

00:00:02.460  -->  00:00:07.740
In our little basic first application we're working on, where we added a couple of components,

2

00:00:07.790  -->  00:00:13.240
we covered a lot of key aspects of a basic Angular app, how it starts and how to use components,

3

00:00:13.250  -->  00:00:21.660
the base building block of any Angular app. But thus far, we only output static content,

4

00:00:21.680  -->  00:00:25.370
the server component here, that's not super interesting,

5

00:00:25.370  -->  00:00:28.750
we did even more than that in the first section of this course.

6

00:00:29.030  -->  00:00:36.350
So let's change this to output some data which is kind of dynamic at least, which is not hardcoded into

7

00:00:36.350  -->  00:00:37.360
the template,

8

00:00:37.370  -->  00:00:40.560
time for some data binding. What is data binding?

9

00:00:40.730  -->  00:00:48.170
You could basically translate data binding with communication. Communication between your TypeScript code

10

00:00:48.380  -->  00:00:54.200
of your component, your business logic and the template, so what the user sees because you might have

11

00:00:54.200  -->  00:01:00.230
some result in your TypeScript code because you fetched something from a server or finished some calculation

12

00:01:00.470  -->  00:01:02.300
which you want to display to the user

13

00:01:02.420  -->  00:01:05.100
and the only thing the user sees is the template.

14

00:01:05.240  -->  00:01:11.240
So we need some kind of communication between both pieces to be able to really do something in

15

00:01:11.240  -->  00:01:17.030
our app, that is where data binding comes into play because it is responsible for this communication.

16

00:01:17.030  -->  00:01:23.420
We get different ways of communication now, for example we want to output data from our TypeScript code

17

00:01:23.770  -->  00:01:29.060
in the HTML code in the template. We can use string interpolation for this,

18

00:01:29.060  -->  00:01:33.650
you saw this in the first section of course, it's the syntax with the double curly braces and then

19

00:01:33.650  -->  00:01:40.360
some property name or some expression in between or property binding. We will have a closer look at all

20

00:01:40.370  -->  00:01:44.900
these forms of course in the next lectures, so we will learn what this then is and how it works. The

21

00:01:45.000  -->  00:01:50.240
syntax basically uses these strange square brackets around HTML attributes

22

00:01:50.240  -->  00:01:52.280
but again, I will come back to this.

23

00:01:52.670  -->  00:01:56.490
Sometimes though, the other direction is interesting too,

24

00:01:56.600  -->  00:02:02.150
if the user clicks a button, you can kind of think of the user clicking the button on the template because

25

00:02:02.150  -->  00:02:07.130
again, the template is the thing with which the user interacts, which he sees and where he is also able to

26

00:02:07.130  -->  00:02:08.380
click buttons.

27

00:02:08.690  -->  00:02:13.300
So if we click a button, we maybe want to trigger something in our TypeScript code,

28

00:02:13.310  -->  00:02:17.620
so now we need the other direction and we can get this other direction,

29

00:02:17.630  -->  00:02:24.320
we can react to user events with event binding. So we can bind to for example a click event to execute

30

00:02:24.320  -->  00:02:26.420
some code whenever it occurs

31

00:02:26.840  -->  00:02:34.940
and we also have one additional form of data binding where we combine both directions, two-way data binding,

32

00:02:35.120  -->  00:02:41.300
where we are able to react events and output something at the same time. Might not be super clear how

33

00:02:41.300  -->  00:02:41.930
this works

34

00:02:41.960  -->  00:02:47.400
but that is what you will now have a detailed look at all four forms in the next lectures.
