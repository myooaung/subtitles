1

00:00:01,520  -->  00:00:06,840
Why can't the first with you in this fit you will have a look at typing which is really the core of

2

00:00:06,840  -->  00:00:07,580
typescript.

3

00:00:07,590  -->  00:00:08,930
Hence the name.

4

00:00:09,260  -->  00:00:17,820
So prepared a little example here and in this typing got us in this type of file which is also attached

5

00:00:17,820  -->  00:00:19,180
to this lecture.

6

00:00:19,260  -->  00:00:25,950
All these files are attached to this section of course you will well find some examples about typing

7

00:00:26,500  -->  00:00:33,780
will start by creating a string my string and by using Tobel them and then the name of the type we're

8

00:00:33,780  -->  00:00:38,200
setting this stream to the type string.

9

00:00:38,310  -->  00:00:40,830
Variable excuse me to the type stream.

10

00:00:40,830  -->  00:00:45,090
So now we may only assign string values to this type.

11

00:00:45,090  -->  00:00:46,960
Otherwise we will get an error.

12

00:00:47,310  -->  00:00:52,070
So for example here the first step where we say my string does is a string.

13

00:00:52,170  -->  00:00:53,550
This is fine.

14

00:00:53,700  -->  00:00:59,560
Let me comment out this line and comment in this line here where we have my string equals four.

15

00:00:59,970  -->  00:01:01,990
You might already be able to see that it might.

16

00:01:02,060  -->  00:01:06,930
I get this red underline indicating here is an error.

17

00:01:07,170  -->  00:01:09,330
Let's try to compile this file.

18

00:01:09,390  -->  00:01:15,690
Running TC This is typescript we installed Clovelly in our setup process and then the name of the file

19

00:01:15,700  -->  00:01:15,850
.

20

00:01:15,990  -->  00:01:18,160
And I think the number for them.

21

00:01:18,150  -->  00:01:21,960
So that we get into this.

22

00:01:23,120  -->  00:01:24,700
So now you see.

23

00:01:24,860  -->  00:01:30,840
And the file is called type and or TS They don't need to type TS TSA can't just write C type and compile

24

00:01:30,840  -->  00:01:37,300
it and then you can see here to the error type number is not assignable to type string.

25

00:01:37,590  -->  00:01:42,750
That's exactly the problem we're setting my string to be of type string but now we try to compile it

26

00:01:42,750  -->  00:01:43,520
.

27

00:01:43,530  -->  00:01:44,850
No that's not good.

28

00:01:45,000  -->  00:01:45,780
So let me.

29

00:01:45,870  -->  00:01:53,520
Well commented out again and comment that an interesting thing this typing touchiest was created because

30

00:01:53,550  -->  00:02:01,230
what we compiled and here you can see it did compile this even though it an error because technically

31

00:02:01,290  -->  00:02:07,050
it is possible and Javascript of course you can see we're not setting any type here because we don't

32

00:02:07,050  -->  00:02:11,290
have types and javascript or we can set variables to certain types.

33

00:02:11,430  -->  00:02:14,640
So this is a valid Charles group but not valid types.

34

00:02:14,790  -->  00:02:19,930
And this is good because as already mentioned for you this prevents us from making errors.

35

00:02:20,010  -->  00:02:25,530
We want this to be a story and that we would be of an error made by mistake or whatever.

36

00:02:25,530  -->  00:02:28,620
If we assign a number type of what are we.

37

00:02:28,800  -->  00:02:35,550
So this is the basic typing we got here and how we make sure that we always assign the correct types

38

00:02:35,550  -->  00:02:36,860
.

39

00:02:36,870  -->  00:02:43,290
Now we don't have to do it like this if we initialize a variable that also already well at the point

40

00:02:43,290  -->  00:02:44,080
of declaration.

41

00:02:44,100  -->  00:02:52,740
Assign a value like here and line 16 typescript is able to infer the type it knows.

42

00:02:52,740  -->  00:02:54,690
OK this is a string because.

43

00:02:55,160  -->  00:02:57,030
Well setting it equal to a string.

44

00:02:57,120  -->  00:03:00,280
So we could write code string.

45

00:03:00,300  -->  00:03:01,340
This would not for ever.

46

00:03:01,350  -->  00:03:07,950
That's fine but we don't have to type disable 2 in for the type of variable.

47

00:03:07,950  -->  00:03:11,160
Now let's see if I try to set equal to 4.

48

00:03:11,310  -->  00:03:18,130
I can already see I got this red underline if my compilers file again to get an error type number.

49

00:03:18,120  -->  00:03:22,320
It's not assignable to type string in line 19 this year.

50

00:03:22,380  -->  00:03:26,780
This is because I've inferred that this is the string.

51

00:03:26,970  -->  00:03:34,130
So really clever and well we don't have to use this explicit typing.

52

00:03:34,290  -->  00:03:41,640
If we're already signing a value at Declaration time it's important to understand inferring that type

53

00:03:41,820  -->  00:03:43,410
does not work.

54

00:03:43,410  -->  00:03:47,040
If we declare a variable without setting a value.

55

00:03:47,490  -->  00:03:53,600
So here we're not setting a value upon a declaration and we're not declaring a type.

56

00:03:53,610  -->  00:03:59,460
Now you can see the decimal fraud arrow by itself because we have to set types but it's best practice

57

00:03:59,690  -->  00:04:02,940
or a good practice to do so when you see Tuscola.

58

00:04:03,040  -->  00:04:10,200
Now the next step I'm setting this variable equal to a string and assigning the swelling and then assigning

59

00:04:10,290  -->  00:04:11,650
a value of 5.

60

00:04:11,830  -->  00:04:18,650
I could think typescript is able to infer the type as I'm not setting a pipe here but in the first assignment

61

00:04:18,680  -->  00:04:20,320
or when initializing it.

62

00:04:20,530  -->  00:04:23,380
I'm setting a string value.

63

00:04:23,580  -->  00:04:27,760
So tapster might be able to infer it this way will ship history.

64

00:04:28,020  -->  00:04:29,010
No it doesn't.

65

00:04:29,000  -->  00:04:29,240
No.

66

00:04:29,250  -->  00:04:30,390
This might be an accident.

67

00:04:30,570  -->  00:04:31,040
Types.

68

00:04:31,110  -->  00:04:31,620
No.

69

00:04:31,830  -->  00:04:34,680
So it's not done for in any type off this line.

70

00:04:34,740  -->  00:04:42,150
And therefore using an assigning number in the next step that's not an error as you can see if I compile

71

00:04:42,150  -->  00:04:42,960
this.

72

00:04:42,960  -->  00:04:49,970
It compiles fine because here we're not setting any type and therefore by evil it will have a type.

73

00:04:50,030  -->  00:04:59,970
And in this type here which allows us to do this set any time like in normal javascript this is possible

74

00:04:59,970  -->  00:05:00,030
.

75

00:05:00,090  -->  00:05:07,120
But if you got a chance avoid it strong type your variables are class members use it.

76

00:05:07,200  -->  00:05:08,650
It's very helpful.

77

00:05:08,670  -->  00:05:10,180
It prevents errors.

78

00:05:10,230  -->  00:05:12,740
It's really very helpful.

79

00:05:13,410  -->  00:05:20,760
So which types can be used where there are a couple of basic types of typescript like streams number

80

00:05:20,770  -->  00:05:28,860
Boyens and every year this is a generic type with these smaller than and greater than signs here.

81

00:05:29,070  -->  00:05:36,690
We'll get to Teneriffe types in wealth section for a lecturer for hearing or lecture five actually so

82

00:05:36,720  -->  00:05:37,940
this is.

83

00:05:38,160  -->  00:05:39,180
And we all at this.

84

00:05:39,330  -->  00:05:43,940
Type all it showed a second ago where we are able to assign any value.

85

00:05:44,250  -->  00:05:50,400
Additionally what for white which means empty for function functions for example if you want to say

86

00:05:50,650  -->  00:05:58,530
if it's nothing then the function return type would be void or eems which you might know from other

87

00:05:58,530  -->  00:06:02,270
languages which are basically a set of values.

88

00:06:02,310  -->  00:06:10,650
Of course if required create road types or classes we can use them you well ask types to make a certain

89

00:06:10,650  -->  00:06:13,010
variable should only be of type.

90

00:06:13,160  -->  00:06:17,470
Our custom class to that is typing.

91

00:06:17,690  -->  00:06:19,280
And I hope I make this clear.

92

00:06:19,290  -->  00:06:20,980
It's a huge advantage.

93

00:06:21,000  -->  00:06:21,620
Use it.

94

00:06:21,630  -->  00:06:23,080
It really helps you.

95

00:06:23,430  -->  00:06:25,690
See you next will you.
