WEBVTT
1
00:00:02.420 --> 00:00:04.560
We're almost done fixing bugs,

2
00:00:04.700 --> 00:00:10.270
our recipe service is now working as expected, if we switch back and forth, the spaghetti are there

3
00:00:10.610 --> 00:00:16.760
but now if we go back to recipe edit component, this delete button, this X here

4
00:00:16.760 --> 00:00:18.420
is not working.

5
00:00:18.440 --> 00:00:22.670
First of all, it's even submitting our form and we definitely don't want that,

6
00:00:22.910 --> 00:00:25.620
so we should set the type to button,

7
00:00:26.100 --> 00:00:34.840
then I'll also add a click listener and say onDeleteIngredient and here of course, I should pass the information

8
00:00:34.840 --> 00:00:37.270
of which ingredient should get deleted.

9
00:00:37.640 --> 00:00:47.960
So I should pass the index i, which is simply the index of the control we want to remove. With that, we can

10
00:00:48.320 --> 00:00:54.320
implement the onDeleteIngredient method in our TypeScript file here

11
00:00:54.740 --> 00:01:00.130
and I know that I will receive the index here, number.

12
00:01:00.150 --> 00:01:07.800
Now with that, I can get access to my recipe form to call the get method and get access to my ingredients

13
00:01:07.800 --> 00:01:13.730
which I know is a formArray, so let's cast it as we did earlier too

14
00:01:13.900 --> 00:01:20.530
and now we can call the removeAt method and pass the index to remove a specific FormControl, the one

15
00:01:20.530 --> 00:01:23.370
at the position we want to delete.

16
00:01:23.410 --> 00:01:28.680
Now with that in place, we can save this

17
00:01:28.920 --> 00:01:34.700
and now if we open a recipe and edit it and remove this,

18
00:01:34.710 --> 00:01:38.560
now you see it indeed remove the ingredient,

19
00:01:38.760 --> 00:01:44.340
so now we updated the recipe and therefore, we only sent the french fries to the shopping list

20
00:01:44.340 --> 00:01:50.100
and again the other bug we had before is fixed, our recipe survive.

21
00:01:50.100 --> 00:01:57.210
Now to clean this app up, there is one thing I forgot to do earlier, in the recipe list component where we

22
00:01:57.210 --> 00:02:00.950
subscribe to our recipeChanged event here,

23
00:02:01.350 --> 00:02:04.940
well we should unsubscribe if the component gets destroyed.

24
00:02:05.160 --> 00:02:12.690
So let's implement onDestroy and import this from @angular/core and then I will add 

25
00:02:12.690 --> 00:02:13.860
ngOnDestroy here

26
00:02:14.710 --> 00:02:22.060
and I want to store the subscription in a property named subscription, of type subscription, which needs

27
00:02:22.060 --> 00:02:27.870
to be imported from rxjs/subscription

28
00:02:28.090 --> 00:02:36.070
and then I can store it by assigning it as a value here in onInit, the subscription is assigned and in

29
00:02:36.070 --> 00:02:45.380
onDestroy, I can now unsubscribe, again to make sure I don't cause any memory leaks here.

30
00:02:45.390 --> 00:02:51.330
So with that, with all these bug fixes we added, our app is looking great.

31
00:02:51.330 --> 00:02:53.260
It should work fine now,

32
00:02:53.550 --> 00:02:56.090
we can add new recipes here,

33
00:02:56.130 --> 00:03:04.950
we can edit existing ones, we can remove the ingredients there and add new ingredients if we want of

34
00:03:04.950 --> 00:03:09.160
course. We can then use them and send them to the shopping list,

35
00:03:09.180 --> 00:03:17.220
there we can delete them, we can add new items or decide otherwise and clear the form. Our forms are

36
00:03:17.220 --> 00:03:24.510
working great here and use quite a lot of useful tools you may use in your next application which are

37
00:03:24.510 --> 00:03:29.090
great to enhance it and to offer a great user experience.

38
00:03:29.250 --> 00:03:32.420
With that, let's move on to the next course section.
