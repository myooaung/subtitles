1
00:00:02,180 --> 00:00:08,390
We're almost done for this section but we have a bug or not really a bug but a behavior which I want

2
00:00:08,390 --> 00:00:08,870
to get rid of.

3
00:00:09,440 --> 00:00:15,590
If we are on a recipe detail page, like this here, recipes/2 and you reload, you get an error,

4
00:00:16,180 --> 00:00:20,930
you get an error that it can't read the property ingredients of undefined and the bigger problem here is

5
00:00:20,930 --> 00:00:27,590
not related to the ingredients but simply that we tried to load the detail page for a recipe which doesn't

6
00:00:27,590 --> 00:00:35,390
exist because we're fetching our recipes from a back-end and if we haven't pressed fetch data before,

7
00:00:35,600 --> 00:00:37,670
then we simply have no recipes,

8
00:00:37,760 --> 00:00:41,740
so accessing the details of a recipe is doomed to fail.

9
00:00:41,750 --> 00:00:45,920
Now there are different ways of making this work,

10
00:00:45,950 --> 00:00:53,480
one of course would be to simply add a guard that prevents us from accessing recipes/2 or the

11
00:00:53,480 --> 00:00:59,810
added route which also an ID encoded in the URL when we have no recipes loaded and instead

12
00:00:59,810 --> 00:01:02,880
redirects us to just /recipes for example.

13
00:01:03,050 --> 00:01:04,630
That would be one way of doing it,

14
00:01:04,640 --> 00:01:10,820
we could use such a guard but we can also use a guard but another type of guard,

15
00:01:10,910 --> 00:01:15,030
we can use a resolver which I also covered in the routing module.

16
00:01:15,160 --> 00:01:20,980
A resolver is essentially some code that runs before a route is loaded to ensure that certain data

17
00:01:20,990 --> 00:01:23,690
the route depends on is there.

18
00:01:23,690 --> 00:01:26,540
That sounds like a good idea to me.

19
00:01:26,540 --> 00:01:31,910
I'll add it in the recipes folder next to the recipes component and I'll name the

20
00:01:31,910 --> 00:01:40,190
file recipes-resolver.service.ts because it is a normal Angular service in the end. In there,

21
00:01:40,190 --> 00:01:44,920
let's export a class which should be named recipes resolver service

22
00:01:48,200 --> 00:01:57,000
and this will get the @injectable decorator because it is injectable in the end and injectable as

23
00:01:57,010 --> 00:02:06,600
you learned needs to be imported from @angular/core and this will then get the provided in root object

24
00:02:06,610 --> 00:02:11,550
here to provide it application-wide automatically.

25
00:02:11,590 --> 00:02:20,930
Now the recipes resolver service now needs to implement the resolve interface. Now

26
00:02:20,930 --> 00:02:30,670
resolve is also imported from an Angular package of course, it's imported from @angular/router. Now resolve

27
00:02:30,670 --> 00:02:35,980
is a generic interface which means we need to define which type of data it will resolve in the end and

28
00:02:35,980 --> 00:02:41,830
in our case, that will be the recipe data,

29
00:02:41,870 --> 00:02:50,460
so an array of recipes and for that, let's also import recipe from the recipe module here.

30
00:02:50,580 --> 00:02:54,300
So our resolver will in the end run some code that loads some recipes,

31
00:02:57,740 --> 00:03:02,950
we now need to inject our data storage service here because that is the service that will make the HTTP

32
00:03:02,960 --> 00:03:12,790
request. So I'll name it data storage service here, of type data storage service which now also needs to be imported

33
00:03:12,800 --> 00:03:13,430
up there

34
00:03:16,400 --> 00:03:24,310
from the shared folder and there the data storage service file and now the resolve interface forces

35
00:03:24,310 --> 00:03:31,990
us to add a resolve method here which gets data about the route, the activated route snapshot which is

36
00:03:31,990 --> 00:03:39,070
imported from the Angular router and which gets the current routing state, which is of type router state

37
00:03:39,130 --> 00:03:43,720
snapshot which is also imported from @angular/router.

38
00:03:43,730 --> 00:03:48,080
From there, we could get information like the ID we're requesting but I'm not interested,

39
00:03:48,110 --> 00:03:50,250
I want to load all recipes anyways,

40
00:03:50,250 --> 00:03:54,920
otherwise things like editing them won't work correctly because we need to reinsert them into the

41
00:03:54,920 --> 00:03:58,280
array and so on and therefore now here,

42
00:03:58,580 --> 00:04:05,900
the goal is to return either an array of recipes which we can't because we need to load it first or an observable

43
00:04:05,990 --> 00:04:10,700
that will in the end yield an array of recipes and that is something different,

44
00:04:10,700 --> 00:04:15,320
that is something we can offer. For that, let's have a look at the data storage service.

45
00:04:15,320 --> 00:04:16,130
There we have

46
00:04:16,130 --> 00:04:16,950
fetch recipes

47
00:04:16,970 --> 00:04:18,820
and right now, we subscribe in here,

48
00:04:18,950 --> 00:04:21,290
we just have to tweak this a little bit.

49
00:04:21,290 --> 00:04:27,620
I still want to set the recipes in the recipes service from inside fetch recipes but we can simply do

50
00:04:27,620 --> 00:04:33,830
this by adding another rxjs/operator, the tap operator and the tap operator also needs to be

51
00:04:33,830 --> 00:04:39,860
imported from rxjs/operators. The tap operator allows us to execute some code here in place

52
00:04:40,100 --> 00:04:44,240
without altering the data that is funneled through that observable.

53
00:04:44,240 --> 00:04:49,610
So in here, we will get our recipes array indeed and I will simply set the recipes in a service then

54
00:04:49,850 --> 00:04:50,590
as before

55
00:04:50,870 --> 00:04:58,700
but now I will not subscribe here anymore but instead, return this call to this HTTP service

56
00:04:58,700 --> 00:05:04,700
and that means that in the header component, we now have to subscribe here and you don't even have to

57
00:05:04,700 --> 00:05:08,250
pass in a function if you're not caring about the response anyways.

58
00:05:08,390 --> 00:05:13,040
So therefore here in the header component, this change of course is a bit redundant but it's now really

59
00:05:13,040 --> 00:05:20,240
helpful here in the resolve method because here we can now return this data storage service fetch recipes.

60
00:05:20,270 --> 00:05:26,070
Now please note that I'm not subscribing here but I'm simply not subscribing here because the resolver,

61
00:05:26,080 --> 00:05:33,910
this Angular feature will subscribe for me to basically find out once the data is there. You can ignore

62
00:05:33,910 --> 00:05:34,570
this error,

63
00:05:34,600 --> 00:05:37,960
it's my IDE not understanding that this is valid.

64
00:05:38,020 --> 00:05:44,140
So now, we should have a valid resolver that loads the data before this page is loaded.

65
00:05:44,140 --> 00:05:51,000
So let's now fetch data, open the summer salad and reload and we still fail.

66
00:05:51,080 --> 00:05:53,720
Now obviously because we're not applying the resolver.

67
00:05:54,170 --> 00:06:00,800
So let's now go to the app routing module, where we have our two paths that rely on a recipe being loaded

68
00:06:01,550 --> 00:06:02,960
and on both these paths,

69
00:06:02,960 --> 00:06:10,160
we now have to add the resolve key which is an array of resolvers and there, we should add our recipes

70
00:06:11,730 --> 00:06:15,150
resolver service and that now needs to be imported,

71
00:06:15,160 --> 00:06:25,280
so let's import recipes resolver service from ./recipes and then there it's that recipe resolver

72
00:06:25,280 --> 00:06:27,000
service file.

73
00:06:27,020 --> 00:06:32,630
Now let's add that same key here to the recipe edit component and now Angular

74
00:06:32,630 --> 00:06:36,040
will run this resolver before loading this route.

75
00:06:36,080 --> 00:06:38,810
So now if I reload this, this looks much better

76
00:06:38,900 --> 00:06:46,040
and now that data is here because now what we do in the end is we run, through that resolver,

77
00:06:46,190 --> 00:06:53,270
our data storage service fetch recipes method whenever this route gets loaded and that is super helpful

78
00:06:53,270 --> 00:06:58,050
and important here to ensure that our data really is there when we need it

79
00:06:58,190 --> 00:07:03,950
and therefore even when editing this, if I reload this edit route, this also works. It takes a bit longer

80
00:07:03,950 --> 00:07:09,530
to load because the data needs to be fetched first but since Firebase is super fast, this is no issue

81
00:07:09,770 --> 00:07:16,670
and now we prevent nasty bugs by us loading data which is not there because now it is there and as you

82
00:07:16,670 --> 00:07:23,750
learned, of course saving data and fetching data also works, so that now we can freely delete our recipes

83
00:07:24,050 --> 00:07:24,900
as we want.

84
00:07:24,950 --> 00:07:29,270
We can always fetch them again, unless we save it again after deleting of course.
