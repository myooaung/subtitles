WEBVTT
1
00:00:02.430 --> 00:00:09.130
In the last lecture we saw how we can use these error codes and we also saw that we can add our own

2
00:00:09.130 --> 00:00:10.060
validator,

3
00:00:10.060 --> 00:00:16.840
we checked if the name is invalid, the username but typically, you might need to reach out to a web server

4
00:00:16.840 --> 00:00:18.650
to check this.

5
00:00:18.680 --> 00:00:24.820
That however is an asynchronous operation because the response is not coming back instantly,

6
00:00:24.820 --> 00:00:27.600
instead it just takes a couple of seconds.

7
00:00:27.610 --> 00:00:35.830
So we also kind of need asynchronous validators which are able to wait for a response before

8
00:00:35.920 --> 00:00:38.090
returning true or false,

9
00:00:38.110 --> 00:00:39.900
is it valid or not,

10
00:00:39.910 --> 00:00:46.620
turns out we can create such asynchronous validators. So let's create one here in the app component,

11
00:00:46.900 --> 00:00:47.630
I'll name it

12
00:00:47.740 --> 00:00:56.150
forbiddenEmails, this asynchronous validator also takes the control as an argument.

13
00:00:56.150 --> 00:01:02.210
Now we also need to return something here but this will not be an object with an error code and a boolean, 

14
00:01:02.490 --> 00:01:10.760
instead this will be a promise which wraps anything or an observable which wraps anything. For the observable,

15
00:01:10.760 --> 00:01:14.720
you need to import it from rxjs/observable

16
00:01:15.170 --> 00:01:22.970
and these are of course two constructs which handle asynchronous data, that's exactly what this validator

17
00:01:23.000 --> 00:01:24.530
is about.

18
00:01:24.530 --> 00:01:33.440
So here, I now want to create a promise in this validator, a new promise it will be which returns us anything

19
00:01:33.770 --> 00:01:41.330
and as all promises, this receives a function with resolve and reject as arguments we can execute in that

20
00:01:41.330 --> 00:01:42.430
function

21
00:01:43.010 --> 00:01:49.550
and in that function, I now want to set a timeout, after one and a half seconds I one to return a response

22
00:01:49.550 --> 00:01:55.020
to simulate the fact that we have an asynchronous task like reaching out to a server.

23
00:01:55.070 --> 00:02:00.510
So this will be the function which gets executed after one and a half seconds, this anonymous function

24
00:02:00.510 --> 00:02:07.940
here and here I will simply check if control value equals test@test.com.

25
00:02:07.940 --> 00:02:10.370
Of course you could also check if it's part of an array,

26
00:02:10.370 --> 00:02:13.670
I will simply check for this single e-mail address.

27
00:02:13.970 --> 00:02:21.380
If this is the case, validation failed and as in the synchronous validator case, this is when I will return

28
00:02:21.380 --> 00:02:25.560
an object with a key-value pair with this error code.

29
00:02:25.610 --> 00:02:30.440
Here of course since we are in a promise, I don't return, I resolve

30
00:02:30.440 --> 00:02:39.390
and again I resolve this object where I say emailIsForbidden, like this,

31
00:02:39.410 --> 00:02:41.570
set this to true

32
00:02:41.710 --> 00:02:45.360
and if we pass this check here,

33
00:02:45.640 --> 00:02:52.330
so in the else case that we have a valid input, that we have a valid e-mail address, I will simply

34
00:02:52.340 --> 00:02:54.540
resolve null.

35
00:02:54.580 --> 00:02:58.230
Now of course, we need to return this promise in the end.

36
00:02:59.360 --> 00:03:02.940
So with this, we set up our asynchronous validator,

37
00:03:02.960 --> 00:03:09.610
now we can add it, let's add it to the e-mail and here you don't add it in this array of normal validators,

38
00:03:09.620 --> 00:03:13.560
instead we use the third argument we can pass to FormControl,

39
00:03:13.570 --> 00:03:20.550
this is an asynchronous validator or an array of such validators, just like the normal validators but reserved

40
00:03:20.550 --> 00:03:22.610
for the asynchronous ones.

41
00:03:22.640 --> 00:03:28.830
So here I will use my forbiddenEmails validator,

42
00:03:28.960 --> 00:03:36.910
again don't execute it, simply pass the reference and you need to bind this if you plan on using this in

43
00:03:36.910 --> 00:03:37.230
there,

44
00:03:37.240 --> 00:03:39.670
I don't so I don't need to do it here,

45
00:03:39.940 --> 00:03:45.410
now let's check if it works. If we compile this and we inspect the e-mail,

46
00:03:45.420 --> 00:03:49.170
it's invalid, if I enter something here,

47
00:03:49.180 --> 00:03:56.900
you see it stays invalid, if I enter test2, closely watch ngInvalid.

48
00:03:57.020 --> 00:04:00.260
Did you see that? It changed to ngPending

49
00:04:00.380 --> 00:04:05.380
because it was evaluating the input, then it changed to ngValid.

50
00:04:05.690 --> 00:04:11.060
Now if I remove the two and therefore I will enter an invalid e-mail address because that's the one we're

51
00:04:11.060 --> 00:04:16.430
checking for, it again switches to pending and then to invalid.

52
00:04:16.460 --> 00:04:19.430
So this is now how the asynchronous validator works

53
00:04:19.460 --> 00:04:26.220
and of course this would work with code where you reach out to the web for example and we correctly

54
00:04:26.220 --> 00:04:29.420
therefore of course see our error message.

55
00:04:29.420 --> 00:04:35.710
So these are asynchronous validators, really easy to add when using the reactive approach as you saw.
