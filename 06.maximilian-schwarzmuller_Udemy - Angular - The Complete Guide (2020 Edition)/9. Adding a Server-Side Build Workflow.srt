1
00:00:02,430 --> 00:00:08,790
Mari kita lanjutkan dengan menyesuaikan konfigurasi naskah yang perlu kita sesuaikan karena naskah skrip default kami

2
00:00:08,880 --> 00:00:15,630
Quantic yang bertanggung jawab untuk mengkompilasi kode naskah kami menjadi kode javascript yang tidak akan berfungsi untuk

3
00:00:15,690 --> 00:00:16,940
sisi server.

4
00:00:16,950 --> 00:00:20,050
Di sana kami tentu saja ingin mengeksekusi kode sudut kami.

5
00:00:20,130 --> 00:00:27,120
Jadi kami ingin menjalankan aplikasi sudut kami di sana, tetapi kami perlu mengompilasinya menjadi kode yang tidak berjalan

6
00:00:27,120 --> 00:00:27,910
di browser.

7
00:00:27,960 --> 00:00:34,980
Tetapi pada server dan misalnya simpul J. S. yang merupakan bahasa yang harus Anda gunakan

8
00:00:35,340 --> 00:00:38,320
untuk rendering pra menggunakan sintaksis ekspor impor yang berbeda.

9
00:00:38,400 --> 00:00:41,250
Jadi kita perlu mengkompilasi kode naskah kita secara berbeda.

10
00:00:41,520 --> 00:00:47,940
Dan untuk menambahkan kompilasi ini kita dapat mengambil konflik DTA pada file aplikasi yang berdekatan dan digandakan.

11
00:00:48,150 --> 00:00:55,030
Dan mari kita beri nama dua tingkatan konfigurasi dot server dot Jason jatuh sekarang di sana.

12
00:00:55,080 --> 00:01:00,850
Anda perlu mengganti modul dari E. S. 2015 untuk J. umum S ..

13
00:01:00,930 --> 00:01:05,850
Anda juga dapat menemukan ini di sini sekarang pengaturan Deandra OK.

14
00:01:06,010 --> 00:01:08,090
Tetapi kita perlu menambahkan satu pengaturan ekstra.

15
00:01:08,170 --> 00:01:11,440
Kita perlu menambahkan beberapa opsi kompilasi sudut.

16
00:01:11,440 --> 00:01:14,660
Anda tentu saja dapat menyalin seluruh cuplikan di sini.

17
00:01:14,710 --> 00:01:21,300
Sekarang saya hanya akan menambahkan opsi-opsi ini dan mereka akan mengkonfigurasikan kompiler bersudut yang

18
00:01:21,310 --> 00:01:26,310
bukan kompiler skrip tetapi kompiler tambahan yang mengkompilasi templat bersudut.

19
00:01:26,440 --> 00:01:33,640
Jadi kode HMO Anda dengan semua set direktif Anda ke kode javascript asli tidak kompiler perlu tahu

20
00:01:33,640 --> 00:01:35,570
apa moduli awal Anda.

21
00:01:35,620 --> 00:01:42,070
Dan di sini saya menunjuk aplikasi aplikasi atau file modul tanpa tag hash ekstensi dan kemudian nama kelas yang

22
00:01:42,070 --> 00:01:44,160
kita temukan di file itu.

23
00:01:44,200 --> 00:01:49,360
Dan jika Anda tidak mengubah apa pun tentang modul server aplikasi itu maka pengaturan default ini akan

24
00:01:49,360 --> 00:01:50,610
bekerja untuk Anda.

25
00:01:50,620 --> 00:01:56,710
Sekarang kita dapat mengkompilasi aplikasi annular kita yang ditulis dalam naskah tentu saja menjadi

26
00:01:56,710 --> 00:02:00,240
kata yang dapat dijalankan di server untuk itu.

27
00:02:00,320 --> 00:02:04,330
Kita hanya perlu sedikit men-tweak Jason kita.

28
00:02:04,550 --> 00:02:12,950
Di sana kita perlu menambahkan perintah yang baru dibangun perintah server dan saya hanya akan menyalin seluruh perintah.

29
00:02:13,250 --> 00:02:17,610
Mari kita pergi ke pemancing Jason Folden dan mari kita mencari simpul arsitek.

30
00:02:17,810 --> 00:02:24,830
Di sana kita memiliki perintah yang dibangun yang membangunnya untuk klien dan di bawah ini saya akan menambahkan perintah server saya.

31
00:02:24,830 --> 00:02:27,320
Sekarang Anda bisa menambahkannya di mana saja di arsitek itu.

32
00:02:27,320 --> 00:02:35,720
Perhatikan dengan cara saya akan menambahkannya di sini dan perintah server akan memungkinkan kita untuk menjalankan Seelye ini atau menjalankan

33
00:02:35,720 --> 00:02:41,990
proses build hingga Selye untuk mengambil konfigurasi naskah kami secara otomatis dan kemudian membangun

34
00:02:41,990 --> 00:02:47,420
aplikasi kami untuk deserver mengoptimalkannya dan melakukan semua pekerjaan berat untuk kami.

35
00:02:47,450 --> 00:02:53,810
Untuk itu akan dibutuhkan alat pembangun pembangun khusus yang dikirimkan bersama Selye atau sebagai ketergantungan

36
00:02:53,810 --> 00:02:54,390
DC.

37
00:02:54,410 --> 00:02:58,500
Tepatnya yang cocok untuk paket sisi layanan.

38
00:02:59,640 --> 00:03:03,210
Dan kami menetapkan beberapa opsi dan sekarang ini adalah opsi penting.

39
00:03:03,210 --> 00:03:12,650
Di sinilah kami ingin membangun aplikasi kami dan saya akan beri nama dasbor resep resep ini.

40
00:03:12,830 --> 00:03:16,430
Sekarang hanya catatan untuk proses pembangunan normal.

41
00:03:16,490 --> 00:03:19,040
Output Potthast baru saja diatur ke Dist.

42
00:03:19,070 --> 00:03:23,140
Mari kita ubah ini menjadi slash rouser ini.

43
00:03:25,220 --> 00:03:31,030
Dan sekarang kembali ke sisi layanan kami yang dibangun dan mungkin mengubahnya ke server Dist sehingga ini benar-benar

44
00:03:31,030 --> 00:03:33,890
jelas bahwa ini adalah layanan yang saya buat.

45
00:03:34,060 --> 00:03:39,550
Sekarang kita juga telah menetapkan titik masuk yang merupakan server TS utama baru ini ditambahkan

46
00:03:39,550 --> 00:03:42,050
file dan jenis konfigurasi yang digunakan.

47
00:03:42,070 --> 00:03:48,820
Sekarang dengan itu kita mengatur alur kerja build dan kita sudah bisa mengujinya untuk menjalankan perintah server baru kita di

48
00:03:48,820 --> 00:03:49,530
sini.

49
00:03:49,720 --> 00:03:58,030
Kami hanya menjalankan Engy run, bukan NPM, menjalankan N-G, lalu nama proyek Anda yang Anda temukan di File Jason

50
00:03:58,030 --> 00:04:00,220
bersudut di sini dalam proyek.

51
00:04:00,220 --> 00:04:03,200
Dalam kasus saya ini adalah lima panduan lengkap.

52
00:04:03,910 --> 00:04:07,430
Lalu tanda titik dua dan kemudian perintah yang ingin Anda jalankan.

53
00:04:07,450 --> 00:04:13,540
Jadi apa pun dari simpul arsitek yang dibangun misalnya atau di server kasus kami.

54
00:04:13,750 --> 00:04:16,260
Mari kita edit di sini dan tekan enter.

55
00:04:16,420 --> 00:04:22,870
Dan ini sekarang akan menjalankan perintah build kami di sini yang baru saja kami tambahkan

56
00:04:22,870 --> 00:04:32,230
dengan konfigurasi naskah kami dan harus memuntahkan folder dist server yang menyimpan dot utama J sebagai fall yang akan membangun bundel bersudut

57
00:04:32,410 --> 00:04:33,750
untuk sisi layanan.

58
00:04:33,760 --> 00:04:42,120
Atau setidaknya beberapa bagian dari itu yang diperlukan untuk melakukan layanan rendering Hyper-V sekarang mati harus membangun proses yang

59
00:04:42,120 --> 00:04:45,300
perlu kita sesuaikan sebagai langkah berikutnya.

60
00:04:45,300 --> 00:04:47,150
Mari kita tambahkan simpul sederhana.

61
00:04:47,160 --> 00:04:53,530
JS server yang mampu menjalankan proses rendering bebas hutang dan melayani aplikasi sudut kami.
