WEBVTT
1
00:00:02.380 --> 00:00:07.870
Kami mendekati akhir modul ini dan saya ingin menyimpulkan dengan menyelami salah satu teknik optimasi yang

2
00:00:07.870 --> 00:00:12.220
kami bisa dan harus lakukan sebelum kami mengirimkan aplikasi kami ke produksi.

3
00:00:12.250 --> 00:00:18.810
Jadi sebelum kita menyebarkan aplikasi sudut kami yang dibangun ke server dan itu adalah waktu sebelumnya di mana ini

4
00:00:18.810 --> 00:00:20.270
hanya dalam kompilasi waktu.

5
00:00:20.320 --> 00:00:21.670
Apa itu.

6
00:00:21.670 --> 00:00:26.710
Baik dalam aplikasi sudut kami, kami tentu saja menulis beberapa kode adalah kode sudut dalam

7
00:00:27.400 --> 00:00:34.090
kode templat kami dan templat kami tentu saja menyertakan sintaks sudut khusus seperti energi f dan g untuk NS pada hanya

8
00:00:34.090 --> 00:00:37.240
sudut yang memahami templat D yang kami buat ini.

9
00:00:37.240 --> 00:00:43.690
Itu bukan snapshot satu-ke-satu yang akan dimasukkan ke dalam Dom nyata, bukan angular akan lulus

10
00:00:43.690 --> 00:00:50.140
template kami dan kemudian memperbarui Dom nyata berdasarkan instruksi yang kami tempatkan di template

11
00:00:50.530 --> 00:00:56.470
kami sehingga semua komponen dan arahan kami pada akhirnya diterjemahkan menjadi perintah

12
00:00:56.560 --> 00:01:02.950
yang akan digunakan untuk mengubah Dom javascript nyata browser tidak mengerti template kami tidak.

13
00:01:02.950 --> 00:01:09.710
Jadi kami menulis template kami untuk sudut karena sudut memahami semua fitur ini jadi sementara kami menggunakan jenis

14
00:01:09.710 --> 00:01:14.510
kompiler untuk mengkompilasi jenis kode yang baik untuk kode JavaScript yang

15
00:01:14.510 --> 00:01:21.140
tentu saja dipahami oleh browser kami juga memiliki kompiler lain dalam proses membangun yang bekerja di belakang

16
00:01:21.140 --> 00:01:26.870
Adegan sebagai bagian dari servis Angie yang merupakan kompiler sudut yang termasuk dalam kerangka sudut.

17
00:01:26.870 --> 00:01:30.920
Ini adalah bagian penting dari kerangka sudut dan sebenarnya cukup besar.

18
00:01:30.920 --> 00:01:33.780
Kompiler Anglo itu sendiri ditulis dalam Javascript.

19
00:01:33.800 --> 00:01:39.060
Ini relatif besar dan merupakan bagian dari aplikasi sudut yang Anda lihat di browser dengan N. G.

20
00:01:39.070 --> 00:01:46.830
melayani sehingga kompiler sudut diperlukan untuk mengkompilasi kode javascript dan template Anda dan benar-benar menerjemahkan semua logika di

21
00:01:46.920 --> 00:01:54.540
sana menjadi instruksi konkret yang memperbarui Dom D nyata secara default terjadi semua di browser Anda karena

22
00:01:54.540 --> 00:02:00.000
kompiler sudut adalah bagian dari kode pemancing yang Anda kirim .

23
00:02:00.000 --> 00:02:06.120
Proses ini disebut kompilasi tepat waktu karena template sudut dikompilasi tepat pada waktunya

24
00:02:06.240 --> 00:02:09.240
ketika rendering terjadi di browser Anda.

25
00:02:09.240 --> 00:02:12.570
Jadi kompiler sudut berjalan di browser saat runtime.

26
00:02:12.630 --> 00:02:18.090
Kelemahan yang jelas dari ini adalah bahwa proses kompilasi ini membutuhkan waktu.

27
00:02:18.090 --> 00:02:24.510
Ini super cepat tapi tetap saja itu adalah kinerja kecil kompiler anti angular sehingga seluruh kode

28
00:02:24.510 --> 00:02:29.640
yang hanya bertanggung jawab untuk mengkompilasi template Anda tidak sekecil itu.

29
00:02:29.640 --> 00:02:35.730
Ini sebenarnya cukup besar dan merupakan bagian dari aplikasi sudut Anda meskipun tidak memiliki tujuan itu

30
00:02:35.730 --> 00:02:41.910
tidak ada hubungannya dengan logika bisnis Anda selain membawanya ke layar yang bisa dibilang penting tetapi

31
00:02:41.910 --> 00:02:46.490
masih sedikit menjengkelkan bahwa itu harus menjadi bagian dari Anda aplikasi.

32
00:02:46.500 --> 00:02:53.970
Hal baiknya adalah ia tidak harus menjadi bagian dari aplikasi Anda karena kompiler sudut bertanggung jawab

33
00:02:54.210 --> 00:03:00.390
untuk mengubah kode template Anda menjadi instruksi template Anda menjadi perintah javascript.

34
00:03:00.390 --> 00:03:07.140
Peramban memahami bahwa kami dapat melakukannya selama pengembangan sebagai bagian dari proses pembuatan dan

35
00:03:07.140 --> 00:03:12.960
proses itu disebut kompilasi sebelumnya karena kami mengkompilasi template sudut sebelum waktu

36
00:03:12.960 --> 00:03:13.950
eksekusi.

37
00:03:14.160 --> 00:03:19.680
Kemudian kompiler templat pemancing berjalan selama proses pembuatan sebelum aplikasi disebarkan dan

38
00:03:19.680 --> 00:03:22.420
tidak ada di browser sekarang.

39
00:03:22.440 --> 00:03:28.730
Proses Cerf energi seperti yang sekarang secara default menggunakan kompiler Justin Time karena itu lebih baik

40
00:03:28.730 --> 00:03:35.660
untuk debugging dan memperbarui cepat aplikasi yang sedang berjalan dan tidak ada yang salah dengan itu selama pengembangan.

41
00:03:35.660 --> 00:03:41.750
Kami tidak memiliki masalah dengan pengiriman aplikasi yang terlalu besar di mana kompiler adalah bagian dari kode karena

42
00:03:41.750 --> 00:03:44.480
kami tidak mengoptimalkan ukuran kode selama pengembangan.

43
00:03:44.480 --> 00:03:50.480
Kami ingin memiliki pengalaman pengembangan yang baik dengan pesan kesalahan yang kaya dan sebagainya, tetapi

44
00:03:50.480 --> 00:03:56.200
segera setelah kami mempersiapkan diri untuk produksi dan untuk membangun aplikasi bersudut kami untuk produksi

45
00:03:56.190 --> 00:04:02.870
untuk kemudian mengunggahnya di server kami ingin mengoptimalkan kode kami sebanyak mungkin dan mengecilkannya menjadi sekelompok kecil

46
00:04:02.870 --> 00:04:04.060
kurang mungkin.

47
00:04:04.370 --> 00:04:09.690
Dan kami melakukannya dengan perintah yang juga akan Anda lihat di bagian penerapan yang saya hentikan.

48
00:04:09.710 --> 00:04:10.950
Dan Anda melayani di sini.

49
00:04:11.150 --> 00:04:17.720
Kami melakukannya dengan membangun energi tetapi di sana Anda benar-benar menambahkan laba dasbor untuk produksi.

50
00:04:17.780 --> 00:04:24.080
Perintah ini mengambil aplikasi sudut Anda dan sekarang tidak memutar server pengembangan tempat

51
00:04:24.080 --> 00:04:31.520
Anda bisa melihatnya tetapi sebenarnya membangun seluruh aplikasi Anda menjadi beberapa file yang kemudian dapat Anda gunakan.

52
00:04:31.640 --> 00:04:37.040
Sekarang menunjukkan proses penyebaran dalam modul terpisah tetapi mari kita sudah menjalankan perintah

53
00:04:37.070 --> 00:04:41.240
ini karena ini secara otomatis melakukan optimasi penting untuk Anda.

54
00:04:41.360 --> 00:04:43.880
Ini menggunakan kompilasi sebelumnya.

55
00:04:44.120 --> 00:04:46.150
Anda tidak perlu mengkonfigurasi sesuatu yang istimewa.

56
00:04:46.160 --> 00:04:47.260
Itu hal yang hebat.

57
00:04:47.300 --> 00:04:51.370
Ini bekerja di luar kotak tetapi itu untuk Anda.

58
00:04:51.380 --> 00:04:53.730
Dan di sini kita sekarang mendapatkan kesalahan.

59
00:04:53.990 --> 00:04:56.170
Kontrol properti tidak ada tepat waktu.

60
00:04:56.240 --> 00:04:59.530
Kontrol abstrak dalam komponen tambahan resep Anda.

61
00:04:59.690 --> 00:05:05.960
Kesalahan ini tidak terjadi lebih awal karena hanya dalam kompiler waktu sedikit lebih

62
00:05:05.960 --> 00:05:10.790
memaafkan daripada sebelumnya kompiler sebelumnya kompilator melakukan beberapa pemeriksaan tambahan.

63
00:05:10.820 --> 00:05:13.490
Dan di sini ia menemukan kode yang tidak dimengerti.

64
00:05:13.490 --> 00:05:16.690
Jadi mari kita lihat komponen resep file timeout H.

65
00:05:17.020 --> 00:05:24.080
Ada masalah adalah bagian ini bagian ini bekerja dengan kompilator tepat waktu tetapi sebelumnya.

66
00:05:24.080 --> 00:05:31.880
Kompiler pada dasarnya tidak mengerti bahwa bagian disk di sini resep formulir mendapatkan bahan memberi kita kembali array bentuk

67
00:05:31.910 --> 00:05:37.220
yang memiliki properti kontrol tidak tahu apa yang kita dapatkan kembali di sini

68
00:05:37.220 --> 00:05:44.060
tahu kita mendapatkan kembali array bentuk kontrol abstrak adalah kontrol abstrak tetapi pada dasarnya versi yang diperluas

69
00:05:44.060 --> 00:05:49.850
dengan properti kontrol tambahan ini Kontrol Abra tidak memiliki properti kontrol dan itu adalah

70
00:05:49.850 --> 00:05:56.060
masalah yang lebih dulu dikompilasi, solusinya adalah dengan menghapus kode itu dari template dan memindahkannya

71
00:05:56.780 --> 00:06:09.980
ke dalam kode skrip di sana kita dapat menambahkan yang baru pengambil properti katakanlah di sini dengan Dapatkan kata kunci dan kemudian kita beri nama sebagai bahan kontrol properti pengambil adalah seperti fungsi

72
00:06:10.280 --> 00:06:17.060
yang dapat Anda gunakan seperti properti dalam templat Anda dapat menetapkan nilai untuk itu meskipun Anda hanya

73
00:06:17.060 --> 00:06:23.520
bisa membacanya bahwa itu dicapai oleh gunakan untuk mendapatkan kata kunci di sini di depan nama

74
00:06:23.520 --> 00:06:28.220
properti tanda tangan kemudian terlihat seperti tanda tangan fungsi dengan

75
00:06:28.220 --> 00:06:37.190
tanda kurung di dalamnya ras keriting dan kemudian di sana kita kembali bentuk resep ini mendapatkan bahan dan n ow untuk menginformasikan

76
00:06:37.280 --> 00:06:44.240
naskah tentang jenis ini dan bahwa kita tahu bahwa itu akan menjadi form array kita bungkus bagian

77
00:06:44.240 --> 00:06:52.940
ini di sini ke dalam sepasang kurung tambahan dan menambahkan form array di sini form array perlu diimpor dari menambahkan banyak bentuk.

78
00:06:52.940 --> 00:06:57.310
Ini adalah instruksi naskah yang memberi tahu naskah semua baik.

79
00:06:57.380 --> 00:07:05.150
Istilah ini di sini atau ungkapan ini di sini akan menyelesaikan ke array formulir dan oleh karena itu tidak mengeluh

80
00:07:05.150 --> 00:07:07.590
tentang kami menggunakan kontrol di sini.

81
00:07:07.610 --> 00:07:15.020
Sekarang kita mengembalikan ini dan oleh karena itu satu-satunya hal yang kita lakukan adalah kita membuat

82
00:07:15.020 --> 00:07:22.500
tipe yang lebih aman ini mungkin tampak berlebihan tetapi penting bagi penyusun waktu sebelumnya untuk tidak gagal lagi.

83
00:07:22.670 --> 00:07:28.430
Sekarang kita dapat menggunakan kontrol bahan untuk menyebarkan properti di sini di tempat sebelumnya kita

84
00:07:28.430 --> 00:07:30.050
memiliki potongan kode itu.

85
00:07:30.050 --> 00:07:36.880
Dan sekarang jika kita menghemat itu dan kita menjalankan kembali tagihan energi yang dibawa sekarang ini akan benar-benar berfungsi.

86
00:07:40.400 --> 00:07:44.640
Mari kita tunggu ini selesai dan dengarkan ini.

87
00:07:44.840 --> 00:07:50.120
Sekarang sebelum kita melihat apa yang dihasilkan ini mari kita jalankan kembali energi yang

88
00:07:50.120 --> 00:07:57.140
disajikan di sini untuk melihat apakah Ayah semua bekerja dan untuk melihat ukuran pengembangan yang cukup besar jika Anda ingat.

89
00:07:57.560 --> 00:08:00.270
Mari kita tunggu sampai ini dibangun.

90
00:08:00.290 --> 00:08:01.530
Ini dia.

91
00:08:01.550 --> 00:08:04.430
Mari kita login dengan cepat di sini.

92
00:08:04.460 --> 00:08:12.110
Pergi ke modul resep untuk mengambil resep dan kemudian mungkin juga menambahkan satu untuk melihat bahwa halaman edit

93
00:08:12.110 --> 00:08:13.460
benar-benar masih berfungsi.

94
00:08:13.460 --> 00:08:14.700
Itu terlihat bagus.

95
00:08:14.720 --> 00:08:18.440
Mari kita buat resep baru tempat kita menambahkan bahan.

96
00:08:18.440 --> 00:08:21.100
Jadi ini semua berfungsi tanpa kesalahan.

97
00:08:21.110 --> 00:08:23.300
Nah, itu bagus tentu saja.

98
00:08:23.300 --> 00:08:26.450
Sekarang mari kita lihat apa yang dihasilkan perintah energi yang

99
00:08:29.340 --> 00:08:31.690
dihasilkan ini menghasilkan folder dist baru.

100
00:08:31.720 --> 00:08:35.070
Kontrol folder ini berisi folder dengan nama proyek Anda.

101
00:08:35.190 --> 00:08:40.810
Dan kemudian di sana Anda mendapatkan beberapa file yang pada dasarnya yang pada dasarnya berisi konten aplikasi

102
00:08:40.900 --> 00:08:42.690
Anda sehingga file kode Anda.

103
00:08:42.760 --> 00:08:52.750
Tapi sekarang dibundel dan dioptimalkan dan ukurannya dikurangi sebanyak mungkin menjadi sekecil mungkin.

104
00:08:52.750 --> 00:08:57.030
Biarkan saya benar-benar memeriksa ini di sini di finder saya atau di Windows Explorer.

105
00:08:57.050 --> 00:08:59.440
Kami telah melihat ini.

106
00:08:59.560 --> 00:09:04.470
Dan di sana Anda melihat file-file ini jauh lebih kecil.

107
00:09:04.470 --> 00:09:09.320
Ingatlah bahwa dalam pengembangan kita dapat melihatnya di sini sebenarnya di tab jaringan.

108
00:09:09.480 --> 00:09:14.030
Jika saya memuat ulang halaman ini, kami memiliki file yang Dot gratis.

109
00:09:14.070 --> 00:09:16.830
Besar delapan megabita dan satu megabita.

110
00:09:16.830 --> 00:09:23.610
Sekarang di sini jika kita melihat file-file ini mereka jauh lebih kecil mereka menyusut secara

111
00:09:23.610 --> 00:09:30.240
signifikan dalam ukuran karena semua optimasi ini dan kompilasi sebelumnya adalah salah satu optimasi penting

112
00:09:30.240 --> 00:09:36.810
karena menghapus kompiler sudut dari bundel akhir yang super penting dan besar tentu saja.

113
00:09:36.870 --> 00:09:42.810
Jadi pasti selalu bangun aplikasi Anda dengan strip build energi yang luas sebelum Anda ingin menggunakannya di suatu

114
00:09:42.810 --> 00:09:43.420
tempat.

115
00:09:43.470 --> 00:09:47.610
Tetapi berbicara tentang penyebaran itu juga sesuatu yang akan kita fokuskan selanjutnya dalam kursus ini.
