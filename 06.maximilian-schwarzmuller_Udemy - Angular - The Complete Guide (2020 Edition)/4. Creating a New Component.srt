1
00:00:02,560 --> 00:00:04,210
Components are important right,

2
00:00:04,240 --> 00:00:09,940
that is why we start with one, with the app component. It on the one hand is a normal Angular component

3
00:00:09,970 --> 00:00:14,740
but on the other hand, it's also kind of special because it serves as our root component,

4
00:00:14,800 --> 00:00:20,320
it's in the end listed here in the app module in this bootstrap array which tells Angular, hey this is a special

5
00:00:20,320 --> 00:00:21,010
component,

6
00:00:21,100 --> 00:00:26,490
you should bootstrap the whole application with that component being the root component.

7
00:00:26,560 --> 00:00:33,460
So all other components we create will not be added to the index.html file, there selectors will not

8
00:00:33,460 --> 00:00:34,600
be added here,

9
00:00:34,910 --> 00:00:37,900
there selectors will be added to the app.component.html

10
00:00:37,900 --> 00:00:43,940
file because this is now the root component of our app where we add the other parts.

11
00:00:44,110 --> 00:00:47,970
Enough talking about adding components, let's add one.

12
00:00:48,130 --> 00:00:53,610
Let's say we want to output some information about a server.

13
00:00:53,710 --> 00:01:00,720
We're building a back-end for our server management application and we want to output some server information.

14
00:01:00,820 --> 00:01:07,260
So I will store this in a new folder which is a subfolder of the app folder because generally in a Angular

15
00:01:07,260 --> 00:01:13,330
CLI project, all your app related content will go into this app folder.

16
00:01:13,540 --> 00:01:17,210
I will name it server because it will hold my ServerComponent

17
00:01:17,260 --> 00:01:18,730
and this is a good practice,

18
00:01:18,730 --> 00:01:24,910
having the folder name equal your component name and each component typically should have its own folder,

19
00:01:25,110 --> 00:01:28,280
though it's not a hard rule but generally, it makes sense.

20
00:01:28,540 --> 00:01:32,690
So here in the server folder, I will add my ServerComponent.

21
00:01:32,690 --> 00:01:41,110
Now a good naming convention is to have server, so the name of your component first, then a dot and then

22
00:01:41,200 --> 00:01:47,200
component, we will later learn that there are other building blocks in an Angular application too,

23
00:01:47,320 --> 00:01:52,030
so by using filenames like this, it's very easy to see what's inside the file.

24
00:01:52,270 --> 00:01:55,380
And very important, don't forget to add .ts,

25
00:01:55,570 --> 00:01:59,780
so for TypeScript because this is what we will write this component in.

26
00:02:00,190 --> 00:02:03,020
So now we get an empty file for our new component,

27
00:02:03,160 --> 00:02:04,470
how do we create a component

28
00:02:04,480 --> 00:02:13,370
now? First of all, a component simply is just a class, a TypeScript class, so that Angular is able to instantiate

29
00:02:13,370 --> 00:02:18,010
it to create objects based on the blueprint we set up here you could say.

30
00:02:18,010 --> 00:02:22,030
So let's export this class so that we can use it outside of the file too

31
00:02:22,030 --> 00:02:27,460
because as I mentioned before, we're going to use our component in the app component for example to add

32
00:02:27,460 --> 00:02:28,430
it there.

33
00:02:28,870 --> 00:02:35,020
So we will add a class here and this class should now be named ServerComponent.

34
00:02:35,020 --> 00:02:41,260
Again the naming convention here, have the name of the component first, server and then also the description,

35
00:02:41,350 --> 00:02:41,910
component

36
00:02:41,920 --> 00:02:46,630
because later we will also learn about other parts which might then be named differently in the Angular

37
00:02:46,630 --> 00:02:47,310
app.

38
00:02:47,620 --> 00:02:51,340
This is our class and right now, it's a normal TypeScript class,

39
00:02:51,370 --> 00:02:53,110
nothing special about it,

40
00:02:53,530 --> 00:02:58,100
we can't use it like this, Angular doesn't have all the information it requires.

41
00:02:58,330 --> 00:03:04,330
So we should add something to it which tells Angular that this is not only a normal TypeScript class

42
00:03:04,840 --> 00:03:07,640
but instead something special, a component.

43
00:03:08,050 --> 00:03:10,720
We do this by adding a special decorator,

44
00:03:10,720 --> 00:03:18,580
decorators are a TypeScript feature which allow you to enhance your classes for example, enhance elements

45
00:03:18,580 --> 00:03:19,540
you use in your code,

46
00:03:19,540 --> 00:03:20,970
it's not restricted to classes

47
00:03:20,980 --> 00:03:23,690
but here we will use a class decorator.

48
00:03:23,740 --> 00:03:30,930
It's the component decorator and decorators are always attached by adding an @ sign in front of them.

49
00:03:30,950 --> 00:03:36,640
Now this component decorator is not something TypeScript knows from the start,

50
00:03:36,640 --> 00:03:38,890
so we have to import it.

51
00:03:39,070 --> 00:03:46,990
We have to add an import and this import now needs to give us access to component, so we need to import

52
00:03:46,990 --> 00:03:52,870
component between curly braces because from the file where we're going to import this, we could import other

53
00:03:52,870 --> 00:03:53,770
parts too,

54
00:03:53,830 --> 00:03:59,670
so we have to specifically pick the component by using this syntax and then it's from

55
00:03:59,890 --> 00:04:06,470
and now the package where we import component from is @angular/core.

56
00:04:06,730 --> 00:04:11,980
Now Angular ships with a couple of packages where it basically groups its functionalities and the core

57
00:04:11,980 --> 00:04:17,100
package as the name implies gives us access to some of the core functionalities of Angular.

58
00:04:17,380 --> 00:04:19,820
So with that, we imported component,

59
00:04:19,990 --> 00:04:26,550
now this @component decorator is known to TypeScript, so when it parses this file and compiles it to Javascript,

60
00:04:26,550 --> 00:04:28,720
it is able to understand it,

61
00:04:28,780 --> 00:04:34,270
now we need to pass a Javascript object to this component decorator to configure it because without

62
00:04:34,300 --> 00:04:38,230
any configuration, it's still not that valuable to Angular.

63
00:04:38,230 --> 00:04:44,320
But here, we can set up some important information which will be stored as metadata for this class in

64
00:04:44,320 --> 00:04:49,110
the background then which will tell Angular what to do with this class

65
00:04:49,240 --> 00:04:53,310
and one important information piece is the selector.

66
00:04:53,440 --> 00:05:00,730
So basically, the HTML tag by which you're able to use this component later in your other components

67
00:05:00,730 --> 00:05:01,330
templates,

68
00:05:01,330 --> 00:05:03,720
we will see this in action soon.

69
00:05:03,720 --> 00:05:05,670
The selector should be a string

70
00:05:05,820 --> 00:05:12,300
and here you may set up any name you want but you should make sure that it is a unique selector, that

71
00:05:12,300 --> 00:05:17,290
you don't accidentally overwrite a default HTML element or something like this.

72
00:05:17,370 --> 00:05:25,310
So typically, you prefix it with app- and then a fitting name, like server because it's a ServerComponent.

73
00:05:25,320 --> 00:05:30,770
This is my own selector by which I can now later use this component in my other components

74
00:05:30,780 --> 00:05:32,410
HTML files.

75
00:05:32,820 --> 00:05:39,980
So with that set up, the other important piece we need to have is the template and here let's reference

76
00:05:40,040 --> 00:05:41,890
another external file,

77
00:05:41,940 --> 00:05:43,360
I'll come back to another

78
00:05:43,370 --> 00:05:49,160
alternative to this soon and this external file of course needs to be created.

79
00:05:49,200 --> 00:05:55,190
So in the same folder, I will create a server.component and now .html file,

80
00:05:55,200 --> 00:05:59,710
this will hold the template, the HTML code of my component here.

81
00:05:59,790 --> 00:06:03,990
So here, I can now basically add any content I want,

82
00:06:03,990 --> 00:06:12,050
like for example the Server Component to start simple and back to the TypeScript file, I can now point

83
00:06:12,140 --> 00:06:14,520
to this HTML file.

84
00:06:14,570 --> 00:06:17,080
We need a relative path for this,

85
00:06:17,120 --> 00:06:19,710
in the end this will all get bundled by webpack,

86
00:06:19,790 --> 00:06:22,690
so we need to tell it where to find the HTML file.

87
00:06:22,910 --> 00:06:30,680
Well and relative to the TypeScript file, the path simply is ./server.component.html,

88
00:06:30,770 --> 00:06:37,670
like this, this is pointing to this file. With this we created our first component,

89
00:06:37,850 --> 00:06:44,420
now to use it we need to dive into app module and understand what this does because we need to change

90
00:06:44,420 --> 00:06:46,980
something here to use our own component.

91
00:06:47,090 --> 00:06:49,350
Let's do this in the next lecture.
