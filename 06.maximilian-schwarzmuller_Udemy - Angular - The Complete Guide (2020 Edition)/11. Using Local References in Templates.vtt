WEBVTT
1

00:00:02.360  -->  00:00:07.270
Back in the application we built throughout the first lectures of this course, with our cockpit and the

2

00:00:07.350  -->  00:00:13.520
server-element component, with using output and input to pass data around our own custom property and event

3

00:00:13.520  -->  00:00:15.050
binding.

4

00:00:15.420  -->  00:00:20.630
Now in the cockpit, right now I'm using two-way data binding to get the serverName and content.

5

00:00:20.640  -->  00:00:26.580
Now there is nothing wrong with that but maybe we don't need to use two-way data binding. Since I only

6

00:00:26.580  -->  00:00:31.310
want to save or use the data at the point of time I click the button,

7

00:00:31.320  -->  00:00:34.550
the add server or the add server blueprint button,

8

00:00:34.800  -->  00:00:37.620
it would be enough to get the value of the input

9

00:00:37.620  -->  00:00:43.700
at this point of time and there is a nice way we can achieve just that.

10

00:00:43.860  -->  00:00:50.280
So I'll duplicate this and comment out the old solution and now I'll structure it out over a couple of

11

00:00:50.280  -->  00:00:57.840
lines and remove the two-way binding, there the other option we would have is to place a local reference

12

00:00:57.900  -->  00:01:03.870
on that element. A local reference can be placed on any HTML element,

13

00:01:03.930  -->  00:01:10.590
so not only on an input element, on anything you see here in the template and you add with a hashtag

14

00:01:10.800  -->  00:01:17.520
and then a name of your choice, like for example server name since this is what this reference will

15

00:01:17.520  -->  00:01:19.260
hold, a reference to this element,

16

00:01:19.260  -->  00:01:21.440
so maybe serverNameInput.

17

00:01:21.690  -->  00:01:27.470
Now important, this reference as I just said will hold a reference to this element,

18

00:01:27.480  -->  00:01:33.270
so not to the value we entered there, to the whole HTML element with all its properties.

19

00:01:33.600  -->  00:01:41.820
We can see this if we pass this now as an argument once we click add server, onAddServer.

20

00:01:42.030  -->  00:01:48.690
Here, I can pass serverNameInput because the other important thing you need to know about references besides

21

00:01:48.690  -->  00:01:56.730
how to create them is that you can use them everywhere in your template but important, only there, not

22

00:01:57.000  -->  00:02:01.930
inside your TypeScript code, only in the template.

23

00:02:02.280  -->  00:02:05.960
But we do call the method here inside the template of course,

24

00:02:06.000  -->  00:02:12.780
so here we can use serverNameInput and that is a way how we can pass it to the TypeScript code because

25

00:02:12.840  -->  00:02:18.120
in onAddServer, we now know that we will receive the name input,

26

00:02:18.120  -->  00:02:20.240
you could also name it serverNameInput

27

00:02:20.460  -->  00:02:25.990
and if we log this, we can analyze what this actually means, what we actually got here.

28

00:02:26.040  -->  00:02:29.480
So let's save this and let our app reload

29

00:02:29.820  -->  00:02:35.590
and now if I test something and enter something here and I click add server, of course this was broken

30

00:02:35.590  -->  00:02:38.960
here, this is broken because we're not fetching the data correctly right now,

31

00:02:39.210  -->  00:02:42.980
you see we actually get the input element itself.

32

00:02:43.050  -->  00:02:46.260
So this is the element we got here,

33

00:02:46.260  -->  00:02:52.430
that is what the local reference gives us, the element with all its properties.

34

00:02:52.440  -->  00:02:58.110
So here we could also output value, the value of this input since we know that an input element

35

00:02:58.110  -->  00:02:58.930
has a value

36

00:02:58.950  -->  00:03:03.330
and of course this will depend on which kind of element you placed your local reference on,

37

00:03:03.330  -->  00:03:06.170
not all elements have the same properties.

38

00:03:06.240  -->  00:03:12.900
So with this if we try this again, you'll see we now print test because we access the value of this input

39

00:03:13.140  -->  00:03:16.610
to which we got access through the local reference.

40

00:03:16.800  -->  00:03:24.030
So local references, a very nice feature to get access to some elements in your template and then use

41

00:03:24.030  -->  00:03:26.050
that either directly in the template,

42

00:03:26.070  -->  00:03:36.250
you could also output serverNameInput value here or you can pass it on, like we do to use it in the TypeScript

43

00:03:36.250  -->  00:03:38.910
code, a nice and handy feature.

44

00:03:38.920  -->  00:03:45.970
Now with that being passed, we can use it here to not only log our data to the console but instead

45

00:03:46.040  -->  00:03:47.830
here once we define it or

46

00:03:47.860  -->  00:03:55.050
once we create the server, we could access name input value. And we should also be explicit about the type,

47

00:03:55.060  -->  00:03:57.990
we know that this will be a HTML input element,

48

00:03:58.030  -->  00:04:05.500
so we know that this value property will be there. Now the same can of course be done on the blueprint where

49

00:04:05.500  -->  00:04:13.400
we can always replace this newServerName with name input and then value.

50

00:04:13.550  -->  00:04:17.020
Now with that, we can get rid of newServerName, we don't need it anymore,

51

00:04:17.030  -->  00:04:20.290
I will comment it out so that we still have it there for reference

52

00:04:20.330  -->  00:04:25.010
but the new approach now only uses this local reference.

53

00:04:25.010  -->  00:04:31.020
Now for this to work, we of course also need to pass this reference to our onAddBlueprint method.

54

00:04:31.370  -->  00:04:33.780
So these are local references.
