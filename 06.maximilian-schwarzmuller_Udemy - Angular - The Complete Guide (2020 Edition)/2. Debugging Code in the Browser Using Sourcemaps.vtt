WEBVTT
1
00:00:02.600 --> 00:00:10.500
Sometimes reading error messages is not enough or you don't even get an error message, like here. I get my servers

2
00:00:10.500 --> 00:00:11.340
here right

3
00:00:11.600 --> 00:00:14.020
and if I click on them, I can delete them

4
00:00:14.030 --> 00:00:21.570
and it seems to work until I click the last one or if I deleted all of them, the only one.

5
00:00:21.830 --> 00:00:24.790
So deleting the last server is not working,

6
00:00:24.790 --> 00:00:26.750
I can click it as often as I want,

7
00:00:26.750 --> 00:00:28.260
it's not going away.

8
00:00:28.460 --> 00:00:31.180
Now if we have a look at our code, at the template

9
00:00:31.190 --> 00:00:39.350
first, we see that on each list item, I call onRemoveServer and I do pass i, the index of the current

10
00:00:39.350 --> 00:00:41.300
iteration to that method.

11
00:00:41.300 --> 00:00:46.130
Now of course we could simply dive into the TypeScript code here and have a look at this

12
00:00:46.250 --> 00:00:52.580
and there we see, well we get the position of this item and then we simply call splice to remove the

13
00:00:52.580 --> 00:00:55.720
item, the element in this array at this position.

14
00:00:55.790 --> 00:00:58.690
So you might say well that looks all right,

15
00:00:58.790 --> 00:01:04.250
sometimes it's just not super easy to debug a message like this because we're not getting an error message

16
00:01:04.250 --> 00:01:07.860
but we get a logical error in our app.

17
00:01:08.390 --> 00:01:12.850
Now debugging is supported by developer tools in a browser though,

18
00:01:13.100 --> 00:01:16.700
so it would be great if we could simply check at runtime

19
00:01:16.910 --> 00:01:19.900
why this is not working. In Chrome,

20
00:01:19.900 --> 00:01:26.720
you can simply go to sources and here, you will find all these sources imported on this page.

21
00:01:26.720 --> 00:01:33.170
So in this case, all our script bundles and there are a couple of bundles as you'll see, the important one for

22
00:01:33.170 --> 00:01:34.980
us is of course the main bundle

23
00:01:35.090 --> 00:01:43.440
and if we have a look at the main bundle, yes that's not super easy to debug, right. Now theoretically

24
00:01:43.440 --> 00:01:51.320
of course, we can have a look at it and there, let's find, this seems to be our template here with container

25
00:01:51.330 --> 00:02:01.770
and row and maybe we can find the line responsible for splicing, here and now maybe we want to debug here

26
00:02:01.900 --> 00:02:07.050
and if you try to place a breakpoint here which you of course can do in your developer tools, you'll

27
00:02:07.050 --> 00:02:08.720
see something changed,

28
00:02:08.770 --> 00:02:12.510
it jumped to the app.component.ts file.

29
00:02:12.550 --> 00:02:16.300
Now remember, TypeScript is not what runs on the browser,

30
00:02:16.300 --> 00:02:20.120
so there the Javascript, these bundles here are used,

31
00:02:20.260 --> 00:02:28.360
how can we now access TypeScript? Because these Javascript files support source maps. Source maps are

32
00:02:28.420 --> 00:02:29.620
a little addition

33
00:02:29.710 --> 00:02:37.270
the CLI kind of adds to our bundles which allow the browser to translate our Javascript code to TypeScript

34
00:02:37.510 --> 00:02:43.870
or to simply map the Javascript code to our TypeScript files. In development-only, these source

35
00:02:43.870 --> 00:02:47.230
maps will be stripped out for production of course.

36
00:02:47.330 --> 00:02:54.370
So this is a great feature because now we can place breakpoints here in our TypeScript code and if I now

37
00:02:54.370 --> 00:02:55.230
click somewhere,

38
00:02:55.240 --> 00:02:57.430
you see it indeed pauses

39
00:02:57.430 --> 00:03:01.410
and now we can check and even see that ID currently is 2

40
00:03:01.450 --> 00:03:07.550
which makes sense because I clicked this item here which has an ID of 2, just to show this again, here

41
00:03:07.570 --> 00:03:13.870
now with this item, now it's ID 1 because again the middle item which is ID 1 in this case because

42
00:03:13.870 --> 00:03:21.460
we started 0 for the first item and then we see that position is undefined right now.

43
00:03:21.460 --> 00:03:25.060
Now we can move on a step, now we see position is 2

44
00:03:25.540 --> 00:03:33.460
and now we can also check servers and in servers, we see position 2 of course is the last server

45
00:03:33.460 --> 00:03:34.430
in the list.

46
00:03:34.480 --> 00:03:36.060
So if we let this continue,

47
00:03:36.280 --> 00:03:41.500
it looks like the middle one was removed but actually, the last one was removed and we can confirm this

48
00:03:41.500 --> 00:03:46.740
by checking this if I click on the last one which was the thing which was not working, we see ID is

49
00:03:46.750 --> 00:03:52.560
1, makes sense, it's the second element of 2 and the ID starts at 0, so ID 1 makes sense

50
00:03:52.900 --> 00:03:56.950
but now position is 2 because we add one to the ID.

51
00:03:57.040 --> 00:04:04.090
So now we try to delete the element at position two in this servers array and clearly we don't have that element

52
00:04:04.090 --> 00:04:04.450
here,

53
00:04:04.450 --> 00:04:08.120
we only have two elements with positions 0 and 1.

54
00:04:08.380 --> 00:04:15.810
So the logical error in our code is that we add 1 to the ID here and that is how we could debug that

55
00:04:15.910 --> 00:04:17.600
with the TypeScript code

56
00:04:17.650 --> 00:04:22.610
here, with that source map, that of course would allow us to now fix this bug.

57
00:04:23.050 --> 00:04:25.510
Now correctly, you might say that's awesome,

58
00:04:25.510 --> 00:04:33.530
that's great but if I have to scan my main bundle to then click somewhere to open the TypeScript file,

59
00:04:33.640 --> 00:04:41.240
that's not really a great tool because if that bundle grows bigger, it gets even harder to find

60
00:04:41.240 --> 00:04:43.600
the right spot.

61
00:04:43.630 --> 00:04:48.800
Therefore you can directly access your TypeScript files, under webpack

62
00:04:48.800 --> 00:04:56.770
here, you should find a couple of subfolders and if you open up the dot folder here and then source, here

63
00:04:57.040 --> 00:05:00.580
in the app folder and so on, you find all your TypeScript files,

64
00:05:00.580 --> 00:05:06.220
so here is where you can directly access your TypeScript files in the same structure as in your project

65
00:05:06.400 --> 00:05:10.560
to easily find the file you want to dive into and you want to debug

66
00:05:10.560 --> 00:05:16.660
with the Chrome developer tools. So that is another great tool at your disposal,

67
00:05:16.690 --> 00:05:23.080
besides reading error messages, using the debugger with source maps, with TypeScript files to either of

68
00:05:23.080 --> 00:05:30.170
course dive into errors for which you have error messages but also into logical errors, like here.
