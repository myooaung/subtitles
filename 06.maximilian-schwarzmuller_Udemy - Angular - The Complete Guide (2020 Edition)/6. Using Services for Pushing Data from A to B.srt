1
00:00:02,540 --> 00:00:06,120
In the last lecture, we basically finished our shopping list service

2
00:00:06,280 --> 00:00:08,740
but here's one thing which is not working.

3
00:00:08,980 --> 00:00:11,960
I can click this add button as often as I want,

4
00:00:11,980 --> 00:00:16,140
I don't get an error but I also don't see it getting added to this list.

5
00:00:17,670 --> 00:00:24,240
The reason for this is that when we call getIngredients which we of course do to populate this list,

6
00:00:24,930 --> 00:00:29,530
we only get a slice of the ingredients array, so we get a copy.

7
00:00:29,670 --> 00:00:35,520
Therefore once we add a new ingredient which we of course don't add to the copy but to the original

8
00:00:35,520 --> 00:00:38,610
array, that is not reflected in our components 

9
00:00:38,730 --> 00:00:42,300
where we only have that copy to work with.

10
00:00:42,350 --> 00:00:48,170
Now there are a couple of ways of solving this, for the easiest solution, you could remove slice and

11
00:00:48,170 --> 00:00:49,830
that's not necessarily bad,

12
00:00:50,030 --> 00:00:52,730
you would then simply return the original array

13
00:00:52,850 --> 00:00:58,790
and if you're sure you don't accidentally edit it somewhere, this might not be wrong.

14
00:00:58,820 --> 00:01:04,690
I choose this approach though because I want to show you a different solution,

15
00:01:04,730 --> 00:01:09,990
we basically have to inform our component that new data is available.

16
00:01:10,340 --> 00:01:16,070
So I will simply add a new event emitter here and I'll name it

17
00:01:16,120 --> 00:01:18,360
ingredients changed

18
00:01:19,840 --> 00:01:26,260
and I'll set this to or I'll of course set this to a new event emitter to be imported from 

19
00:01:26,260 --> 00:01:27,840
@angular/core.

20
00:01:27,850 --> 00:01:37,780
This event emitter now can emit our ingredient array, so the type it will pass on is an array of ingredients

21
00:01:37,930 --> 00:01:47,860
and now here whenever we change this array, we simply call this ingredients changed and emit a new event

22
00:01:48,520 --> 00:01:51,360
and we of course pass a value here,

23
00:01:51,520 --> 00:01:55,120
our original ingredients array, though to be precise

24
00:01:55,150 --> 00:01:58,250
again, only a copy of it.

25
00:01:58,420 --> 00:02:06,870
So now we always have the right ingredients array in the service and we inform other interested components

26
00:02:06,880 --> 00:02:10,850
about that change in the event we're emitting here.

27
00:02:11,260 --> 00:02:17,770
So now in the shopping list component, besides getting the ingredients at the point of time we load

28
00:02:17,830 --> 00:02:19,140
the app,

29
00:02:19,150 --> 00:02:26,110
I also want to reach out to my shopping list service and simply subscribe to that ingredients changed

30
00:02:26,140 --> 00:02:27,050
event.

31
00:02:27,400 --> 00:02:32,140
So now whenever ingredients change, I know that I will get them,

32
00:02:32,140 --> 00:02:35,010
this will be of type ingredient array here as we learned

33
00:02:36,020 --> 00:02:40,860
and now I can use them here in the body of this anonymous function I'm passing to subscribe

34
00:02:41,700 --> 00:02:45,270
and here, I can now simply set this

35
00:02:45,280 --> 00:02:50,730
ingredients equal to the ingredients I got here. And with this change in place,

36
00:02:50,760 --> 00:03:00,020
now if we let the application reload here and go to shopping list and now I add bread and now you see

37
00:03:00,020 --> 00:03:06,730
it gets added here again without any issues because now, we're getting informed that something changed.
