1
00:00:02,790 --> 00:00:08,890
So in the last lectures, we learned a lot about the creation and configuration and usage of our own forms.

2
00:00:08,910 --> 00:00:14,550
Now let's use another cool feature we can easily implement when using the reactive approach, adding our

3
00:00:14,550 --> 00:00:15,900
own validators.

4
00:00:15,930 --> 00:00:20,880
Thus far, we always used the built-in ones and to be honest, with all the built-in ones,

5
00:00:20,910 --> 00:00:24,250
you should be able to cover most of your use cases 

6
00:00:24,480 --> 00:00:29,400
but let's say we have some usernames we don't want to allow the user to use.

7
00:00:29,400 --> 00:00:37,770
In this case, I will go to my TypeScript file and here I'll add a new property, forbiddenUsernames

8
00:00:37,800 --> 00:00:40,000
for example and in this array,

9
00:00:40,140 --> 00:00:49,990
I'll add Chris and Anna as forbiddenUsernames if written like this.

10
00:00:50,110 --> 00:00:56,080
So now I want to create my own validator which checks whether the username the user entered is one of the

11
00:00:56,080 --> 00:00:58,890
two usernames it specified here,

12
00:00:58,960 --> 00:01:01,860
now a new validator can be added pretty easily.

13
00:01:02,020 --> 00:01:08,140
A validator in the end is just a function which gets executed by Angular automatically when it checks the

14
00:01:08,140 --> 00:01:11,950
validity of the FormControl and it checks that validity

15
00:01:11,950 --> 00:01:13,890
whenever you change that control.

16
00:01:14,050 --> 00:01:16,690
So a validator is just a function,

17
00:01:17,110 --> 00:01:22,830
let's name it forbiddenNames.

18
00:01:23,990 --> 00:01:29,940
Now a validator to work correctly needs to receive an argument which is the control it should check,

19
00:01:30,170 --> 00:01:37,040
so this will be of type FormControl, a validator also needs to return something for Angular to be

20
00:01:37,040 --> 00:01:39,830
able to handle the return value correctly.

21
00:01:39,830 --> 00:01:43,220
This something should be a Javascript object

22
00:01:43,220 --> 00:01:46,020
and now the following notation might look strange,

23
00:01:46,460 --> 00:01:53,660
it should have any key which can be interpreted as a string and this is just TypeScript syntax for saying hey

24
00:01:53,720 --> 00:01:59,810
we want to have a key-value pair where the key again can be interpreted as a string which is true for

25
00:01:59,900 --> 00:02:02,280
a key in an object in general.

26
00:02:02,450 --> 00:02:06,390
More importantly, the value of that key-value pair,

27
00:02:06,530 --> 00:02:08,610
that should be a boolean.

28
00:02:09,050 --> 00:02:18,660
So this function here should return something like let's say an object where we have name is forbidden,

29
00:02:18,670 --> 00:02:23,980
this would be the key name which is interpreted as a string and it could be true.

30
00:02:24,420 --> 00:02:26,370
So this is what this function should return in the end

31
00:02:26,370 --> 00:02:34,040
for example, the message itself, the key name is up to us and therefore we can now add the logic in this

32
00:02:34,040 --> 00:02:40,850
function. In our case here, I want to check if the value of the control is part of this

33
00:02:40,880 --> 00:02:42,220
forbiddenUsernames array.

34
00:02:42,380 --> 00:02:48,170
So I want to check if this forbiddenUsernames indexOf,

35
00:02:48,170 --> 00:02:55,370
so if it contains a certain element and the element is the value of our control we pass here, the control

36
00:02:55,370 --> 00:03:00,680
we're checking. If this is the case, I want to return an object

37
00:03:00,910 --> 00:03:05,670
where I say name is forbidden,

38
00:03:05,680 --> 00:03:10,470
any short error code you want, is true.

39
00:03:11,640 --> 00:03:13,510
Now in the other case,

40
00:03:13,710 --> 00:03:15,070
I want to return null

41
00:03:15,180 --> 00:03:16,610
and now this is important,

42
00:03:17,040 --> 00:03:23,050
if validation is successful, you have to pass nothing or null,

43
00:03:23,070 --> 00:03:28,310
you should not pass this object with false.

44
00:03:28,320 --> 00:03:32,330
This might sound counter-intuitive but that's just how it works,

45
00:03:32,340 --> 00:03:33,590
it should be null

46
00:03:33,600 --> 00:03:36,540
or you simply omit the return statement.

47
00:03:36,930 --> 00:03:41,380
This is how you tell Angular that the FormControl is valid.

48
00:03:41,850 --> 00:03:47,330
Well then this is all, we created our own form validator, our own validator here.

49
00:03:47,370 --> 00:03:53,580
Important, it receives the control and it returns this object with an error code and then true

50
00:03:53,580 --> 00:03:56,310
for example if it is invalid.

51
00:03:56,490 --> 00:04:03,250
So now to add this, I'll go to my username and actually we now want to assign an array of validators,

52
00:04:03,330 --> 00:04:11,020
so I'll change this appropriately and I will now add a reference to my forbiddenNames function again.

53
00:04:11,100 --> 00:04:12,170
Don't execute it,

54
00:04:12,240 --> 00:04:14,010
only pass a reference

55
00:04:14,190 --> 00:04:17,600
and now if we save this, we get an error.

56
00:04:17,880 --> 00:04:21,890
Now this can be a tough one to spot, what's going wrong here?

57
00:04:22,930 --> 00:04:29,120
This error has something to do with the way Javascript handles this. In forbiddenNames,

58
00:04:29,140 --> 00:04:32,260
I'm accessing this here.

59
00:04:32,260 --> 00:04:38,460
Now this might look all right because I'm in this class and I access this forbiddenUsernames

60
00:04:38,920 --> 00:04:43,410
but think about who is calling these forbiddenNames.

61
00:04:43,420 --> 00:04:49,720
We're not calling it from inside this class, Angular will call it when it checks the validity,

62
00:04:49,720 --> 00:04:54,770
at this point of time, this will not refer to our class here.

63
00:04:54,970 --> 00:05:05,450
So to fix this, I actually need to bind this, the good old Javascript trick to make sure that this refers

64
00:05:05,450 --> 00:05:07,580
to what we want it to refer to.

65
00:05:08,060 --> 00:05:11,960
So with this in place, if we now let this recompile,

66
00:05:11,960 --> 00:05:13,720
the error is gone.

67
00:05:13,880 --> 00:05:16,010
Let's now check the validity of this input

68
00:05:16,010 --> 00:05:17,840
here, it is invalid

69
00:05:18,080 --> 00:05:22,020
but if I enter test here, it stays invalid.

70
00:05:22,070 --> 00:05:24,410
The reason for this is that right now I'm checking

71
00:05:24,410 --> 00:05:30,420
if control value is part of this array, this will return -1

72
00:05:30,440 --> 00:05:35,770
if it is not part, well -1 is interpreted as true though.

73
00:05:36,050 --> 00:05:41,340
So we need to check if this is not equal to -1.

74
00:05:41,600 --> 00:05:45,870
So if this is not equal to -1, that means we did find it,

75
00:05:45,890 --> 00:05:47,520
that means it is invalid.

76
00:05:47,570 --> 00:05:55,830
So now with this in place, if we go back, inspect this again and type test here, you see it becomes valid,

77
00:05:56,060 --> 00:05:59,780
if I type Anna here, it becomes invalid,

78
00:05:59,810 --> 00:06:03,840
so our own validation here is working fine. Now

79
00:06:03,950 --> 00:06:09,070
in the next lecture, I will have a look at this strange error code and how we can use that.
