WEBVTT
1

00:00:02.690  -->  00:00:07.310
In the last lecture, we created our route with a dynamic path segment,

2

00:00:07.310  -->  00:00:12.920
now we want to get access to the data the user sent us or which is encoded in the URL I should

3

00:00:12.920  -->  00:00:13.730
say.

4

00:00:14.060  -->  00:00:18.240
So we know that we will load the user component, user component, this one here

5

00:00:18.830  -->  00:00:22.220
and we know that there will be some data in the URL for us.

6

00:00:22.220  -->  00:00:24.100
How can we get access to it?

7

00:00:24.380  -->  00:00:30.050
Well, it is in the TypeScript file where we can get access and there, we need to inject something we already

8

00:00:30.050  -->  00:00:33.440
injected before, the active route.

9

00:00:33.470  -->  00:00:35.920
So this is again on ActivatedRoute,

10

00:00:35.960  -->  00:00:42.350
so make sure to use this type and import it from @angular/router and by injecting this, we get access to

11

00:00:42.350  -->  00:00:44.670
the currently loaded route.

12

00:00:44.690  -->  00:00:50.060
Now I told you that this currently loaded route is a Javascript object with a lot of metadata about

13

00:00:50.060  -->  00:00:56.210
this currently loaded route, one of this important pieces of information is the currently active user.

14

00:00:56.340  -->  00:00:58.390
Now you see that in this user component,

15

00:00:58.400  -->  00:01:02.510
I already defined a user object at the top which is undefined

16

00:01:02.510  -->  00:01:09.710
for now, it should have the following structure and it's not used right now but we could load our user

17

00:01:10.160  -->  00:01:11.440
by simply

18

00:01:11.570  -->  00:01:17.270
getting access or retrieving this parameter from our URL.

19

00:01:17.300  -->  00:01:24.910
So it would be nice if let's say in ngOnInit when our component gets initialized, we get our user.

20

00:01:24.920  -->  00:01:34.350
So we maybe want to say this user equals and now we assign it to a Javascript object because that is

21

00:01:34.370  -->  00:01:42.320
the type of it, a Javascript object with an ID and with a name. Now the value for the ID can be

22

00:01:42.320  -->  00:01:44.010
fetched from our route

23

00:01:44.300  -->  00:01:46.820
and there, we have a snapshot property

24

00:01:46.880  -->  00:01:54.020
and on this snapshot of our currently active route, we have a params Javascript object

25

00:01:54.140  -->  00:01:56.650
and here we can get our ID

26

00:01:56.900  -->  00:02:00.360
and now you will only have the access to properties here

27

00:02:00.560  -->  00:02:04.230
which you defined in your route parameters.

28

00:02:04.610  -->  00:02:08.160
So this part here,

29

00:02:08.250  -->  00:02:14.280
we named it the ID here so we can retrieve the ID from this params object here.

30

00:02:14.550  -->  00:02:18.410
Now the name is something which is not encoded in the route right now,

31

00:02:18.480  -->  00:02:20.190
so maybe we should do this too.

32

00:02:20.340  -->  00:02:26.000
Let's go to app module and let's simply add another dynamic part here,

33

00:02:26.120  -->  00:02:28.600
:name.

34

00:02:28.650  -->  00:02:35.180
Now we also will get this as a parameter, so we can retrieve it the same way we retrieve the ID,

35

00:02:35.460  -->  00:02:41.010
let's retrieve the name and it's in the same params object because it's all part of the route which

36

00:02:41.010  -->  00:02:43.190
was loaded due to this path

37

00:02:43.200  -->  00:02:50.420
we set up in app module being triggered which holds two dynamic pieces and you can add as many parameters

38

00:02:50.430  -->  00:02:51.420
here as you want,

39

00:02:51.420  -->  00:02:55.440
they will all be retrievable on this params object of the loaded route.

40

00:02:55.950  -->  00:02:59.520
With that, we assign something to our user,

41

00:02:59.520  -->  00:03:03.440
now we could go to our HTML document and output that data.

42

00:03:03.480  -->  00:03:07.370
So with string interpolation, here we could output user ID,

43

00:03:07.380  -->  00:03:14.350
it will now be set, we know that and username maybe, both will be available because we set it in

44

00:03:14.370  -->  00:03:15.740
ngOnInit.

45

00:03:15.810  -->  00:03:25.500
Now this should work, so if we save this and we target /users one, Max maybe so that we have

46

00:03:25.530  -->  00:03:32.850
both the ID and the name and we hit enter, we correctly see ID one, name Max, if we change the ID to three,

47

00:03:33.270  -->  00:03:35.590
we see ID three here.

48

00:03:35.880  -->  00:03:37.510
So this seems to work

49

00:03:37.800  -->  00:03:44.400
and you even see that this is still marked as active because this currently active path still contains

50

00:03:44.460  -->  00:03:49.830
/users which was the route for this link, so this routerLink active directive is still doing its

51

00:03:49.830  -->  00:03:50.670
job.

52

00:03:50.970  -->  00:03:53.350
Now this seems to be working fine,

53

00:03:53.550  -->  00:03:57.230
now let me add something to it which will break it though.

54

00:03:57.690  -->  00:03:59.340
I'll do this in the next lecture.
