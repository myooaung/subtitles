WEBVTT
1
00:00:02.270 --> 00:00:05.870
The next step now of course is to output our posts. Before we do that

2
00:00:05.870 --> 00:00:13.190
however, let me bring your attention to a tiny problem we have here or to a spot where we can improve

3
00:00:13.220 --> 00:00:20.270
our code. If we hover over posts here, in your IDE you probably see the type of posts and you see that

4
00:00:20.270 --> 00:00:22.840
this is of type any.

5
00:00:22.940 --> 00:00:28.670
That of course means that TypeScript is not able to detect how our posts look like, the format of our

6
00:00:28.670 --> 00:00:35.450
posts because here, posts array also is of type any because the only thing TypeScript sees is that

7
00:00:35.450 --> 00:00:41.150
we add the ID key here but other than that, the object we push is totally unknown to it because it

8
00:00:41.150 --> 00:00:46.420
doesn't know the format of our response data, there it only knows that it's an object but not how this

9
00:00:46.430 --> 00:00:50.700
object looks like. We can tell TypeScript how it

10
00:00:50.700 --> 00:00:58.350
looks like. One way of doing it would be to assign a type here on the argument we're getting in map, so

11
00:00:58.350 --> 00:01:07.590
we could say yes we know that this actually will be an object where we have a randomly generated string

12
00:01:08.070 --> 00:01:16.320
and now this syntax can look really weird in TypeScript but in the end, you use a placeholder property

13
00:01:16.320 --> 00:01:16.850
name for that

14
00:01:16.860 --> 00:01:24.490
by using square brackets here and then you add key colon string in there, which simply means

15
00:01:24.490 --> 00:01:29.140
this is any string key we have here on that object,

16
00:01:29.140 --> 00:01:34.600
we don't know the exact property name because it's randomly generated or not randomly but it's generated

17
00:01:34.600 --> 00:01:40.000
by Firebase and we do have many different properties but we know it will be a property that can be interpreted

18
00:01:40.030 --> 00:01:40.970
as a string

19
00:01:41.110 --> 00:01:46.160
and now the value held by that property is our actual post data, right?

20
00:01:46.180 --> 00:01:49.150
It's the same format we have here.

21
00:01:49.240 --> 00:01:51.820
Now therefore, to simplify this a bit for us,

22
00:01:51.820 --> 00:02:00.040
we can of course add a new model let's say, a post model here, where I export an interface and I'll name

23
00:02:00.040 --> 00:02:03.520
this post and this will just have that format here,

24
00:02:03.520 --> 00:02:09.400
title and content and actually will optionally also have an ID, let's add a question mark here to

25
00:02:09.400 --> 00:02:15.480
make clear that this is a string but it's optional and now we can use that here.

26
00:02:15.490 --> 00:02:26.970
So there, we use post, we just need to import that, so let's import post from our post model file here,

27
00:02:27.040 --> 00:02:38.090
so from ./post.model and now we know here, we have that randomly generated ID

28
00:02:38.750 --> 00:02:42.200
but that will then hold a post as a value,

29
00:02:42.200 --> 00:02:47.540
that's that nested element I showed you in the developer tools earlier. With that

30
00:02:47.550 --> 00:02:51.960
now, TypeScript suddenly knows what's inside of response data

31
00:02:52.250 --> 00:02:57.240
and now we can also set the type here on our posts array and say yes,

32
00:02:57.260 --> 00:03:05.060
that will be a post array, which you set by using this type assignment, the name of the type and then square

33
00:03:05.060 --> 00:03:10.890
brackets to indicate that it will be an array of these types. This now is improved code because now we

34
00:03:10.890 --> 00:03:16.050
can clearly understand what's inside of posts array and we get better autocompletion,

35
00:03:16.110 --> 00:03:21.360
for example if I try to access the first element, you see I can access ID, content and title because

36
00:03:21.360 --> 00:03:26.580
I now know that it has this format and that therefore is a recommended practice.

37
00:03:26.580 --> 00:03:32.230
However with the Angular HttpClient, there is a more elegant way of assigning the type.

38
00:03:32.280 --> 00:03:39.180
You don't need to do this here on the argument in map or in subscribe or whatever you're using to access

39
00:03:39.180 --> 00:03:40.000
your data,

40
00:03:40.290 --> 00:03:44.200
instead the get method is a so-called generic method.

41
00:03:44.220 --> 00:03:51.390
This means you can add angled brackets here and between the angled brackets, you store the type which this

42
00:03:51.480 --> 00:03:54.320
response will actually return as a body

43
00:03:54.330 --> 00:04:00.720
once it's done. So it's the response body type which is stored here and that will then automatically

44
00:04:00.720 --> 00:04:07.050
be handled by the Angular HttpClient and TypeScript understands this and now knows that the response

45
00:04:07.050 --> 00:04:10.200
data will have this type format as you can tell

46
00:04:10.380 --> 00:04:12.700
and this is also available on post requests,

47
00:04:12.720 --> 00:04:14.730
it's available on all requests,

48
00:04:14.850 --> 00:04:20.460
you can use these angled brackets to add this extra piece of information which is totally optional but

49
00:04:20.460 --> 00:04:24.660
recommended and helpful about the data you're getting back.

50
00:04:24.740 --> 00:04:30.990
And now here you know it'll be a Javascript object where you have a name property and the value of that

51
00:04:30.990 --> 00:04:32.510
will be a string

52
00:04:32.730 --> 00:04:40.570
because if you remember when you send a post, this is a new post, really new, the data you get back is

53
00:04:40.570 --> 00:04:44.690
exactly such an object, name property and then a random string

54
00:04:44.930 --> 00:04:50.500
and now we're making this really clear here so that we also know this in our subscribe function and

55
00:04:50.680 --> 00:04:56.650
if we had code that depends on the types, we get better autocompletion and avoid unnecessary TypeScript

56
00:04:56.650 --> 00:04:57.320
errors.

57
00:04:57.340 --> 00:05:04.280
So this is optional but recommended, you can define the response data types here on these generic HTTP verb

58
00:05:04.300 --> 00:05:04.870
methods.
