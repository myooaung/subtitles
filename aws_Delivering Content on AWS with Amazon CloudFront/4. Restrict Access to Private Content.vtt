WEBVTT
1
00:00:00.670 --> 00:00:03.250
In the previous lesson, we protected our content,

2
00:00:03.250 --> 00:00:06.850
but we only did so based on where the visitor is located,

3
00:00:06.850 --> 00:00:10.180
CloudFront provides several other solutions for securing

4
00:00:10.180 --> 00:00:12.900
content and keeping designated content private.

5
00:00:12.900 --> 00:00:16.730
Many times, when distributing content over the internet,

6
00:00:16.730 --> 00:00:18.980
you will want to restrict access to documents,

7
00:00:18.980 --> 00:00:23.870
business data, media streams, or content that is intended for selected users.

8
00:00:23.870 --> 00:00:24.920
For example,

9
00:00:24.920 --> 00:00:29.170
users who have paid a fee. To securely serve this private content

10
00:00:29.170 --> 00:00:34.850
through CloudFront, you can use the following: Require that users only

11
00:00:34.850 --> 00:00:38.620
access content through CloudFront URLs. They can't directly reach your

12
00:00:38.620 --> 00:00:41.260
origin by using origin access identity.

13
00:00:41.260 --> 00:00:46.180
Require that your users access your private content by using

14
00:00:46.180 --> 00:00:49.220
special CloudFront‑signed URLs or signed cookies.

15
00:00:49.220 --> 00:00:53.000
Keep sensitive data posted through web forms

16
00:00:53.000 --> 00:00:55.050
private with field‑level encryption.

17
00:00:55.050 --> 00:01:00.440
Utilize AWS WAF to protect against many types of

18
00:01:00.440 --> 00:01:02.680
malicious attempts to access private content.

19
00:01:02.680 --> 00:01:06.880
Every one of these solutions has tons of options and many

20
00:01:06.880 --> 00:01:08.640
ways to configure our implement them,

21
00:01:08.640 --> 00:01:12.690
which could take us down the rabbit hole of hours and hours of video, so let's

22
00:01:12.690 --> 00:01:18.580
just briefly describe in touch on their technical elements. The problem with

23
00:01:18.580 --> 00:01:22.190
CloudFront distributions with default settings is that you make your bucket

24
00:01:22.190 --> 00:01:27.090
public, and your users can also access your content through the S3 bucket if

25
00:01:27.090 --> 00:01:28.280
they know the bucket address.

26
00:01:28.280 --> 00:01:31.900
This makes CloudFront's caching mechanism ineffective.

27
00:01:31.900 --> 00:01:33.160
Besides,

28
00:01:33.160 --> 00:01:35.260
if you would like to serve your private content with

29
00:01:35.260 --> 00:01:37.050
signed URLs through CloudFront,

30
00:01:37.050 --> 00:01:42.570
you need to allow access to your content only through CloudFront; otherwise,

31
00:01:42.570 --> 00:01:46.010
unauthorized users can access your content through the

32
00:01:46.010 --> 00:01:47.880
S3 endpoint without your control.

33
00:01:47.880 --> 00:01:50.610
To avoid the situation,

34
00:01:50.610 --> 00:01:53.350
you need to define an origin access identity for your

35
00:01:53.350 --> 00:01:57.480
CloudFront distribution. Make your bucket private, and only

36
00:01:57.480 --> 00:01:59.870
grant access to this origin access identity.

37
00:01:59.870 --> 00:02:01.430
However,

38
00:02:01.430 --> 00:02:06.350
let me note that origin access identity is only applicable to

39
00:02:06.350 --> 00:02:10.140
distributions who have S3 buckets as origin domain names.

40
00:02:10.140 --> 00:02:15.430
An origin access identity is a special CloudFront user.

41
00:02:15.430 --> 00:02:20.680
You can create an origin access identity while adding a new S3 origin to

42
00:02:20.680 --> 00:02:25.720
your CloudFront distribution. After entering the origin domain name with

43
00:02:25.720 --> 00:02:32.450
your S3 bucket, select Yes on Restrict Bucket Access. When you enable

44
00:02:32.450 --> 00:02:36.730
bucket restriction, be sure to select Create a New Identity on Origin

45
00:02:36.730 --> 00:02:38.020
Access Identity's section.

46
00:02:38.020 --> 00:02:40.860
It only has a comment field,

47
00:02:40.860 --> 00:02:43.420
which you can leave as is or type of meaningful

48
00:02:43.420 --> 00:02:45.230
explanation to remember in the future.

49
00:02:45.230 --> 00:02:46.970
Alternatively,

50
00:02:46.970 --> 00:02:50.750
you can create an origin access identity in CloudFront console under

51
00:02:50.750 --> 00:02:54.130
Private Content, Origin access identity section.

52
00:02:54.130 --> 00:02:59.650
You created an origin excess identity, but it has no permissions.

53
00:02:59.650 --> 00:03:03.640
You need to grant it read access to your S3 bucket to be able to serve your

54
00:03:03.640 --> 00:03:07.980
users. Again, you can do this during creation by selecting Yes,

55
00:03:07.980 --> 00:03:12.440
Update Bucket Policy in Grant Reed Permissions on Bucket section.

56
00:03:12.440 --> 00:03:17.670
This actually modifies the bucket policy of your S3 bucket to

57
00:03:17.670 --> 00:03:20.230
grant read access to your origin access identity,

58
00:03:20.230 --> 00:03:21.930
which you can see here.

59
00:03:21.930 --> 00:03:27.130
If you need to grant read access to origin access identity manually,

60
00:03:27.130 --> 00:03:28.950
then select No,

61
00:03:28.950 --> 00:03:32.530
I Will Update Permissions. And this time, you need to use

62
00:03:32.530 --> 00:03:35.300
CanonicalUser as Principal in the bucket policy.

63
00:03:35.300 --> 00:03:41.060
You can find the S3 canonical user ID of your origin access

64
00:03:41.060 --> 00:03:44.430
identity on CloudFront Console, Private Content,

65
00:03:44.430 --> 00:03:46.630
Origin access identity.

66
00:03:46.630 --> 00:03:50.220
After refreshing the bucket policy page,

67
00:03:50.220 --> 00:03:55.010
you will see the Amazon S3 converted your policy with CanonicalUser to

68
00:03:55.010 --> 00:04:00.120
the ARN version automatically. And by default, only owners of the S3

69
00:04:00.120 --> 00:04:03.320
bucket have access to objects in the S3 bucket.

70
00:04:03.320 --> 00:04:06.360
After creating your CloudFront distribution,

71
00:04:06.360 --> 00:04:09.690
you should wait for its status to switch from InProgress to Deployed.

72
00:04:09.690 --> 00:04:11.190
From this point on,

73
00:04:11.190 --> 00:04:16.770
your objects will only be distributed via CloudFront URLs.

74
00:04:16.770 --> 00:04:22.250
CloudFront signed URLs provide a mechanism to control access to

75
00:04:22.250 --> 00:04:24.300
the content served through a distribution.

76
00:04:24.300 --> 00:04:27.230
Unlike the origin access identity,

77
00:04:27.230 --> 00:04:31.600
it restricts access to users who can view your content.

78
00:04:31.600 --> 00:04:35.060
When you create a distribution, by default,

79
00:04:35.060 --> 00:04:38.100
it is open to everybody who knows the URL.

80
00:04:38.100 --> 00:04:40.040
But sometimes you want to limit that.

81
00:04:40.040 --> 00:04:43.540
For example, on our event website,

82
00:04:43.540 --> 00:04:46.950
you only want visitors who have purchased a ticket to be able to

83
00:04:46.950 --> 00:04:50.180
download the ticket template from S3 when the attempt to print their

84
00:04:50.180 --> 00:04:53.900
ticket. You can use signed URLs for this.

85
00:04:53.900 --> 00:04:57.400
Awesome! But why should we do this?

86
00:04:57.400 --> 00:05:01.400
A common scenario is when you have a public part of

87
00:05:01.400 --> 00:05:05.300
your site that is non‑protected, allowing anonymous access,

88
00:05:05.300 --> 00:05:10.600
and there is a private part accessible only to a subset of your users.

89
00:05:10.600 --> 00:05:15.470
You can configure the latter to require a signed URL so you

90
00:05:15.470 --> 00:05:17.840
have control over who can access the content.

91
00:05:17.840 --> 00:05:23.900
In order to sign a request, you need to associate a key pair with your account.

92
00:05:23.900 --> 00:05:26.760
In order to generate your keys,

93
00:05:26.760 --> 00:05:32.720
you need the root account, as IAM users cannot manage them. After

94
00:05:32.720 --> 00:05:35.910
logging in with the root account, access the form through the My

95
00:05:35.910 --> 00:05:38.310
Security Credentials menu on the console.

96
00:05:38.310 --> 00:05:46.920
Find the CloudFront key pairs and add a new one. Within the

97
00:05:46.920 --> 00:05:49.950
CloudFront distribution, check the Restrict Viewer Access

98
00:05:49.950 --> 00:05:52.900
checkbox on the behavior you wish to restrict.

99
00:05:52.900 --> 00:05:56.500
Since it is per behavior,

100
00:05:56.500 --> 00:06:00.320
you can have protected and unprotected paths side by side.

101
00:06:00.320 --> 00:06:06.270
Now when you try to access the protected path, you'll get a 403 Forbidden error.

102
00:06:06.270 --> 00:06:10.720
Now you need to prepare your back end to do the signing.

103
00:06:10.720 --> 00:06:14.250
For example, if we were to use Node.js,

104
00:06:14.250 --> 00:06:18.970
we could use aws‑cloudfront‑sign library to do the signing for us.

105
00:06:18.970 --> 00:06:22.090
The following code can be used to do the signing.

106
00:06:22.090 --> 00:06:27.970
If this had the correct certificate and key pair,

107
00:06:27.970 --> 00:06:33.110
you'd get back a signed URL. I know this can be difficult to see,

108
00:06:33.110 --> 00:06:36.390
but let's just talk about what all is included in this signed

109
00:06:36.390 --> 00:06:40.070
URL. Well, you have your domain and path.

110
00:06:40.070 --> 00:06:44.570
You have your signed URL expiration date.

111
00:06:44.570 --> 00:06:47.770
This is your policy.

112
00:06:47.770 --> 00:06:55.290
You have the actual signature for the URL. And then you've got your key pair ID,

113
00:06:55.290 --> 00:06:58.170
which was used to generate the value of the signature.

114
00:06:58.170 --> 00:07:01.170
If you don't want to modify the URLs,

115
00:07:01.170 --> 00:07:04.790
you can use signed cookies. To generate them, call

116
00:07:04.790 --> 00:07:11.370
the getSignedCookies function, which returns three cookies, CloudFront‑Policy,

117
00:07:11.370 --> 00:07:17.170
CloudFront‑Signature, and CloudFront‑Key‑Pair‑Id.

118
00:07:17.170 --> 00:07:21.790
Send these to the user, and they will be able to access the

119
00:07:21.790 --> 00:07:28.340
protected content on the original URLs. You can already configure

120
00:07:28.340 --> 00:07:31.800
CloudFront to help enforce secure end‑to‑end connections to your

121
00:07:31.800 --> 00:07:34.370
origin servers by using HTTPS.

122
00:07:34.370 --> 00:07:39.150
Field‑level encryption adds an additional layer of security along with

123
00:07:39.150 --> 00:07:43.810
HTTPS that lets you protect specific data throughout system processing so

124
00:07:43.810 --> 00:07:46.030
that only certain applications can see it.

125
00:07:46.030 --> 00:07:50.320
Field‑level encryption allows you to securely upload

126
00:07:50.320 --> 00:07:53.570
user‑submitted sensitive information to your web servers.

127
00:07:53.570 --> 00:07:58.710
The sensitive information provided by your clients is encrypted

128
00:07:58.710 --> 00:08:02.500
at the edge closer to the user and remains encrypted throughout

129
00:08:02.500 --> 00:08:04.190
the entire application stack,

130
00:08:04.190 --> 00:08:08.020
ensuring that only applications that need the data and have the

131
00:08:08.020 --> 00:08:11.090
credentials to decrypt it are able to do so.

132
00:08:11.090 --> 00:08:15.370
This is important in general when protecting your visitor's information,

133
00:08:15.370 --> 00:08:19.660
but even more so when working within an industry that has strict

134
00:08:19.660 --> 00:08:25.580
compliance rules for data that falls under PII, PHI, payment data, or

135
00:08:25.580 --> 00:08:31.360
other sensitives or confidential data. To use field‑level encryption, you

136
00:08:31.360 --> 00:08:35.050
configure your CloudFront distribution to specify the set of fields in

137
00:08:35.050 --> 00:08:40.030
post requests that you want to be encrypted, as well as the public key

138
00:08:40.030 --> 00:08:41.240
used to encrypt them.

139
00:08:41.240 --> 00:08:46.660
You can encrypt up to 10 data fields in a request. You can't

140
00:08:46.660 --> 00:08:49.650
encrypt all the data in a request with field‑level encryption. You

141
00:08:49.650 --> 00:08:52.220
must specify individual fields to encrypt.

142
00:08:52.220 --> 00:08:57.970
When the HTTPS request with field‑level encryption is forwarded to the origin,

143
00:08:57.970 --> 00:09:01.740
the request is routed throughout your origin subsystem.

144
00:09:01.740 --> 00:09:04.460
The sensitive data is still encrypted,

145
00:09:04.460 --> 00:09:07.970
reducing the risk of a data breach or accidental data loss of

146
00:09:07.970 --> 00:09:13.060
sensitive data. Components that need access to the sensitive data for

147
00:09:13.060 --> 00:09:17.710
business reasons, such as a payment processing system needing access

148
00:09:17.710 --> 00:09:21.520
to the credit card number, can use the appropriate private key to

149
00:09:21.520 --> 00:09:23.190
decrypt and access the data.

150
00:09:23.190 --> 00:09:27.640
All right, a high‑level overview of field‑level encryption.

151
00:09:27.640 --> 00:09:33.530
You must obtain and add the public key before you start setting up field‑level

152
00:09:33.530 --> 00:09:38.040
encryption in CloudFront. Field‑level encryption profiles,

153
00:09:38.040 --> 00:09:40.360
which you create in CloudFront, define the fields

154
00:09:40.360 --> 00:09:41.760
that you want to have encrypted.

155
00:09:41.760 --> 00:09:47.110
A configuration specifies the profiles to use based on the

156
00:09:47.110 --> 00:09:50.120
content type of the request or the query argument for

157
00:09:50.120 --> 00:09:51.790
encrypting specific data fields.

158
00:09:51.790 --> 00:09:56.370
You can also choose the request forwarding behavior option

159
00:09:56.370 --> 00:09:58.490
that you want for different scenarios.

160
00:09:58.490 --> 00:10:00.100
For example,

161
00:10:00.100 --> 00:10:04.100
when the profile name specified by the the query argument in a

162
00:10:04.100 --> 00:10:09.350
request URL doesn't exist in CloudFront. Link configuration to a

163
00:10:09.350 --> 00:10:12.310
cache behavior for a distribution to specify when CloudFront

164
00:10:12.310 --> 00:10:13.460
shouldn't encrypt your data.

165
00:10:13.460 --> 00:10:22.940
AWS WAF is a web application firewall that lets you monitor the HTTP and HTTPS

166
00:10:22.940 --> 00:10:27.510
requests that are forwarded to CloudFront and lets you control access to your

167
00:10:27.510 --> 00:10:30.200
content based on conditions that you specify,

168
00:10:30.200 --> 00:10:34.770
such as the IP addresses the requests originated from or the values of query

169
00:10:34.770 --> 00:10:40.140
strings. CloudFront responds to requests either with the requested content or

170
00:10:40.140 --> 00:10:45.860
with an HTTP 403 status code Forbidden. With AWS WAF,

171
00:10:45.860 --> 00:10:49.990
you can protect web content deployed on CloudFront from common web

172
00:10:49.990 --> 00:10:54.610
exploits that could compromise security, availability, or consuming

173
00:10:54.610 --> 00:11:01.460
excessive resources. You start AWS WAF by defining conditions, which

174
00:11:01.460 --> 00:11:03.660
are combined together within rules.

175
00:11:03.660 --> 00:11:07.800
Your rules are collected within a web ACL,

176
00:11:07.800 --> 00:11:11.160
which are then associated with your CloudFront distribution.

177
00:11:11.160 --> 00:11:16.110
Associating a WAF ACL attaches it to the entire

178
00:11:16.110 --> 00:11:18.720
distribution. Not a single origin or behavior,

179
00:11:18.720 --> 00:11:20.410
but the entire distribution.

180
00:11:20.410 --> 00:11:24.780
In addition to configuring AWS WAF to inspect traffic

181
00:11:24.780 --> 00:11:29.740
sent to your CloudFront distribution, you can combine custom error page handling,

182
00:11:29.740 --> 00:11:35.480
geo restriction, and handling of different HTTP methods. For more

183
00:11:35.480 --> 00:11:39.670
information on how to build and implement WAF ACL, then look in the

184
00:11:39.670 --> 00:11:43.010
Pluralsight catalog for AWS security‑related courses.

185
00:11:43.010 --> 00:11:50.300
As I stated earlier, previously we talked about restrictions

186
00:11:50.300 --> 00:11:52.660
regarding where your users are coming from.

187
00:11:52.660 --> 00:12:01.000
Now you can see there are a lot of options on restricting who can access your content.

