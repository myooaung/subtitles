WEBVTT
1
00:00:00.000 --> 00:00:07.306
AWS's CTO has been quoted as saying everything fails all the time.

2
00:00:07.306 --> 00:00:12.854
Well, his quote applies as well to content delivery.

3
00:00:12.854 --> 00:00:17.202
In content delivery, issues might occur in different places,

4
00:00:17.202 --> 00:00:23.510
for example, on your origin when it returns an HTTP 500 error,

5
00:00:23.510 --> 00:00:28.703
on CloudFront when it can't connect to your origin or Lambda@Edge

6
00:00:28.703 --> 00:00:31.858
when your code throws an unhandled exception.

7
00:00:31.858 --> 00:00:35.743
The best way to prevent failures is to plan carefully and design a resilient

8
00:00:35.743 --> 00:00:39.422
architecture that works with your specific requirements.

9
00:00:39.422 --> 00:00:42.862
However, when content delivery fails despite your efforts,

10
00:00:42.862 --> 00:00:46.963
you need to identify the issue quickly and take action to resolve it.

11
00:00:46.963 --> 00:00:48.031
In this module,

12
00:00:48.031 --> 00:00:50.847
I provide three steps that guide you in debugging

13
00:00:50.847 --> 00:00:53.352
CloudFront content delivery issues.

14
00:00:53.352 --> 00:00:56.372
The goal is to make sure that your application or web content continues

15
00:00:56.372 --> 00:01:01.095
to be delivered to your users with minimal disruption.

16
00:01:01.095 --> 00:01:04.639
Step one, enable CloudFront logging.

17
00:01:04.639 --> 00:01:08.660
Step two, configure monitoring and alerting.

18
00:01:08.660 --> 00:01:13.273
In step three, we'll troubleshoot a delivery issue on CloudFront.

19
00:01:13.273 --> 00:01:14.819
By the end of this module,

20
00:01:14.819 --> 00:01:17.992
you should know how to quickly troubleshoot issues using the AWS

21
00:01:17.992 --> 00:01:26.000
tools and services which are available to you. Alright, let's get logging up and running.

