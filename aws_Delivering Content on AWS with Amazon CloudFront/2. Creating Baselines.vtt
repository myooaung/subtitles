WEBVTT
1
00:00:00.299 --> 00:00:00.985
In this course,

2
00:00:00.985 --> 00:00:05.735
we are going to pretend we are organizing a large developer conference.

3
00:00:05.735 --> 00:00:06.331
Along with that,

4
00:00:06.331 --> 00:00:09.096
we will launch the new website containing all of the marketing

5
00:00:09.096 --> 00:00:13.837
information to drive as many attendee signups as possible.

6
00:00:13.837 --> 00:00:14.806
In this fantasy,

7
00:00:14.806 --> 00:00:18.210
the website was designed and developed by an Australian web design

8
00:00:18.210 --> 00:00:20.426
shop with guidance from our marketing professionals,

9
00:00:20.426 --> 00:00:26.094
so their focus has been on the UI and hitting all of the marketing requirements.

10
00:00:26.094 --> 00:00:28.031
They have made their servers, which are in Sydney,

11
00:00:28.031 --> 00:00:31.057
available to us to test the website.

12
00:00:31.057 --> 00:00:34.263
It's up to us to ensure this content is deliverable in

13
00:00:34.263 --> 00:00:37.663
an optimized and resilient fashion.

14
00:00:37.663 --> 00:00:39.480
The website has been delivered,

15
00:00:39.480 --> 00:00:43.115
social media and press releases are ready to go out to announce that the event

16
00:00:43.115 --> 00:00:46.803
is scheduled and that people can begin purchasing tickets.

17
00:00:46.803 --> 00:00:53.472
Our mission is to determine if we are able to handle a large growth in traffic.

18
00:00:53.472 --> 00:00:54.202
In this lesson,

19
00:00:54.202 --> 00:00:56.967
we will review the current infrastructure architecture to

20
00:00:56.967 --> 00:00:59.588
understand if we are good to launch.

21
00:00:59.588 --> 00:01:04.087
We will run a load or a stress test to determine how much of an

22
00:01:04.087 --> 00:01:08.760
impact a large spike of traffic has on our website.

23
00:01:08.760 --> 00:01:12.106
These tests will allow us to measure the performance of the site and give

24
00:01:12.106 --> 00:01:17.342
us the information we need to determine our next steps.

25
00:01:17.342 --> 00:01:18.531
As you can see,

26
00:01:18.531 --> 00:01:24.366
this is a marketing website with many important details such as date and time,

27
00:01:24.366 --> 00:01:29.157
speakers, the schedule, details regarding the venue,

28
00:01:29.157 --> 00:01:30.601
plus many more.

29
00:01:30.601 --> 00:01:32.044
But as you can see,

30
00:01:32.044 --> 00:01:35.660
this website is very media rich with lots of static

31
00:01:35.660 --> 00:01:39.194
content like photos and video.

32
00:01:39.194 --> 00:01:41.535
The current infrastructure hosting the website is

33
00:01:41.535 --> 00:01:43.844
running with the following architecture.

34
00:01:43.844 --> 00:01:47.539
There are 2 EC2 instances running NGINX with an

35
00:01:47.539 --> 00:01:49.672
application load balancer in front of them.

36
00:01:49.672 --> 00:01:53.188
Route 53 DNS is pointed at the load balancer.

37
00:01:53.188 --> 00:01:57.835
All content is deployed locally on each EC2 instance

38
00:01:57.835 --> 00:02:01.583
including static assets such as CSS, JavaScript,

39
00:02:01.583 --> 00:02:05.029
as well as all of the media files.

40
00:02:05.029 --> 00:02:09.005
I have set up a load test script to give us our response time.

41
00:02:09.005 --> 00:02:09.851
As you can see,

42
00:02:09.851 --> 00:02:14.092
the script will run simple get requests against our web server or origin.

43
00:02:14.092 --> 00:02:17.950
I'm using an old domain that I own for this Pluralsight

44
00:02:17.950 --> 00:02:20.556
course strictly for demonstration purposes.

45
00:02:20.556 --> 00:02:23.900
I have gone and set the subdomain origin.dyrcz .me to show

46
00:02:23.900 --> 00:02:28.863
that this will be our origin servers.

47
00:02:28.863 --> 00:02:31.585
I'm going to run this test simulating 1,

48
00:02:31.585 --> 00:02:36.080
000 visitors over the course of 15 minutes.

49
00:02:36.080 --> 00:02:40.179
Now we won't watch 15 minutes of a progress bar,

50
00:02:40.179 --> 00:02:46.505
so I'm going to go ahead and skip past this just to get to our results.

51
00:02:46.505 --> 00:02:50.169
While the test ran, I pushed the results to my monitoring platform,

52
00:02:50.169 --> 00:02:56.436
which uses InfluxDB and Grafana to store and display the relevant datapoints.

53
00:02:56.436 --> 00:02:59.252
As you can see, when we ran this test,

54
00:02:59.252 --> 00:03:04.867
we are consistently getting over 4 second average response time.

55
00:03:04.867 --> 00:03:08.507
This is not a good experience.

56
00:03:08.507 --> 00:03:11.598
So let's take a peek at our metrics.

57
00:03:11.598 --> 00:03:14.534
If you open up your browser and toggle the Developer Tools,

58
00:03:14.534 --> 00:03:17.651
you will find that when visiting the origin domain,

59
00:03:17.651 --> 00:03:21.136
in order to fully load the page,

60
00:03:21.136 --> 00:03:26.096
we're seeing approximately 99 actual requests and a

61
00:03:26.096 --> 00:03:32.287
total file size or files size of 6 MB.

62
00:03:32.287 --> 00:03:38.659
That means in order to fully render the page, you have to download 6 MB of data.

63
00:03:38.659 --> 00:03:43.358
If you remember during our initial talks about how a web request works,

64
00:03:43.358 --> 00:03:45.083
after the TCP handshakes,

65
00:03:45.083 --> 00:03:48.001
that initial request reaches out to the server to

66
00:03:48.001 --> 00:03:51.412
request the HTML or the website.

67
00:03:51.412 --> 00:03:53.682
That's what you're seeing here with the DOM content.

68
00:03:53.682 --> 00:03:56.425
That takes 3 full seconds to load.

69
00:03:56.425 --> 00:03:59.420
Any additional media that has to load, JavaScript,

70
00:03:59.420 --> 00:04:02.058
CSS, media files,

71
00:04:02.058 --> 00:04:06.186
that is taking an extra 4 seconds on top of that 3

72
00:04:06.186 --> 00:04:08.572
seconds just to load the page.

73
00:04:08.572 --> 00:04:11.019
That's why we're seeing that it takes 7 full

74
00:04:11.019 --> 00:04:14.819
seconds to fully render your website.

75
00:04:14.819 --> 00:04:21.461
So that means a lot of requests and a lot of large files.

76
00:04:21.461 --> 00:04:24.188
Origin is currently located in Sydney, Australia,

77
00:04:24.188 --> 00:04:27.660
and I'm making these requests from Copenhagen,

78
00:04:27.660 --> 00:04:28.248
Denmark.

79
00:04:28.248 --> 00:04:32.484
Each one of these 99 requests are having to travel around the globe.

80
00:04:32.484 --> 00:04:35.504
Distance alone is probably costing each of these objects

81
00:04:35.504 --> 00:04:39.421
at least 50% of their response time.

82
00:04:39.421 --> 00:04:42.999
So if I were interested in this conference and every

83
00:04:42.999 --> 00:04:44.699
page was taking this long to load,

84
00:04:44.699 --> 00:04:50.588
I would probably give up and would end up not purchasing tickets for

85
00:04:50.588 --> 00:04:54.705
this conference just because the experience is so bad.

86
00:04:54.705 --> 00:05:07.000
We have tested, we have measured, we now know what our baselines are. Remember, we want people to register for this conference so let's fix this.

