WEBVTT
1
00:00:00.740 --> 00:00:01.320
And by now,

2
00:00:01.320 --> 00:00:04.920
you should know that Lambda is Amazon's Function as a Service offering.

3
00:00:04.920 --> 00:00:07.990
But did you know that if you combine CloudFront and Lambda,

4
00:00:07.990 --> 00:00:12.130
you can move those functions as close to your requester as your content?

5
00:00:12.130 --> 00:00:16.320
Lambda@Edge allows you to deploy Node or Python code at the same

6
00:00:16.320 --> 00:00:19.640
edge locations that your content is cached.

7
00:00:19.640 --> 00:00:22.860
The benefits of using Lambda at edge are huge.

8
00:00:22.860 --> 00:00:26.060
It really opens a whole new world to why you would use

9
00:00:26.060 --> 00:00:28.180
CloudFront to deliver your content.

10
00:00:28.180 --> 00:00:31.400
We're talking about more responsive applications because of

11
00:00:31.400 --> 00:00:33.720
the reduced latency and response time.

12
00:00:33.720 --> 00:00:37.160
It's a fully managed solution, so there's no servers to manage,

13
00:00:37.160 --> 00:00:41.850
which helps on security, compliance, and also your time and resources. But the

14
00:00:41.850 --> 00:00:44.900
big thing here is that it lets you customize your content.

15
00:00:44.900 --> 00:00:49.220
I'll go over a couple examples in a second just to touch on a few limitations,

16
00:00:49.220 --> 00:00:53.520
which really aren't limitations, but you should be aware of them. Only Node and

17
00:00:53.520 --> 00:00:57.340
Python are supported languages for running on Lambda@Edge.

18
00:00:57.340 --> 00:01:00.930
You can't just deploy Lambda@Edge by itself. It has to be associated

19
00:01:00.930 --> 00:01:04.050
with a CloudFront distribution in order to deploy to the edge

20
00:01:04.050 --> 00:01:07.000
locations. Since it's paired with CloudFront,

21
00:01:07.000 --> 00:01:08.510
and that's a global service,

22
00:01:08.510 --> 00:01:12.280
not regional, you need to deploy these functions from US‑East‑1

23
00:01:12.280 --> 00:01:15.940
in order to associate with the global service.

24
00:01:15.940 --> 00:01:16.310
Now,

25
00:01:16.310 --> 00:01:20.890
a few ways CloudFront can customize your content delivery are perhaps you want

26
00:01:20.890 --> 00:01:24.570
to be able to send search engine crawlers to a static version of your content

27
00:01:24.570 --> 00:01:27.750
while delivering real users to the dynamic version.

28
00:01:27.750 --> 00:01:29.790
You can use Lambda@Edge for that.

29
00:01:29.790 --> 00:01:34.840
Maybe you would like to run UX experiments and need to way to A/B test.

30
00:01:34.840 --> 00:01:37.480
In addition to running weighted Route 53 DNS,

31
00:01:37.480 --> 00:01:40.730
you can route users to a different testing origin based on

32
00:01:40.730 --> 00:01:44.540
whatever category you would like with Lambda@Edge.

33
00:01:44.540 --> 00:01:49.640
You can also improve your content security by adding or altering headers.

34
00:01:49.640 --> 00:01:53.240
Perhaps your origin is not applying strict transport security

35
00:01:53.240 --> 00:01:55.850
or you want to mask your server's banner.

36
00:01:55.850 --> 00:01:59.610
All this can be done with Lambda@Edge. And it's pretty slick how

37
00:01:59.610 --> 00:02:03.910
Lambda@Edge functions work within the CloudFront delivery stack.

38
00:02:03.910 --> 00:02:07.640
When your visitor request reaches CloudFront edge locations,

39
00:02:07.640 --> 00:02:10.960
it determines whether it should return cached content or if it

40
00:02:10.960 --> 00:02:14.460
needs to pass the request to a Lambda@Edge function before

41
00:02:14.460 --> 00:02:18.640
returning the content from origin or cache.

42
00:02:18.640 --> 00:02:19.340
Okay,

43
00:02:19.340 --> 00:02:21.990
so let's take that third example we just mentioned. We're

44
00:02:21.990 --> 00:02:24.700
going to add a simple Lambda function which will help us

45
00:02:24.700 --> 00:02:27.740
apply secure headers to our website.

46
00:02:27.740 --> 00:02:30.570
As you can see, when we call our event website, we

47
00:02:30.570 --> 00:02:32.220
receive a few response headers,

48
00:02:32.220 --> 00:02:37.540
Content‑Encoding and Type, Date, ETag, and several CloudFront headers.

49
00:02:37.540 --> 00:02:40.640
Well, there are several things you may want to tell the browser,

50
00:02:40.640 --> 00:02:43.000
which we'll enable to handle your website securely.

51
00:02:43.000 --> 00:02:46.210
For example, content type options, frame options,

52
00:02:46.210 --> 00:02:49.910
cross‑site scripting protection, and there are many more. You can learn all

53
00:02:49.910 --> 00:02:53.170
about security headers and Mozilla's infosec website.

54
00:02:53.170 --> 00:02:55.740
I'll include a link in the lesson notes.

55
00:02:55.740 --> 00:02:59.330
Now we could enable these type of security headers on our web server,

56
00:02:59.330 --> 00:03:02.640
but that would require server configuration changes.

57
00:03:02.640 --> 00:03:04.530
Or, like in our case,

58
00:03:04.530 --> 00:03:09.440
we've moved entirely over to a static‑based website hosted from our S3 bucket.

59
00:03:09.440 --> 00:03:13.720
We don't have a web server per se. CloudFront is doing that work for us.

60
00:03:13.720 --> 00:03:14.730
Unfortunately,

61
00:03:14.730 --> 00:03:17.210
CloudFront doesn't have the controls that lets us supply

62
00:03:17.210 --> 00:03:19.540
these headers from the CloudFront settings.

63
00:03:19.540 --> 00:03:25.140
But what it does do is let us apply a Lambda function to our behaviors.

64
00:03:25.140 --> 00:03:28.550
We're going to inject these headers at the origin response and

65
00:03:28.550 --> 00:03:31.140
then let CloudFront cache these headers for us.

66
00:03:31.140 --> 00:03:35.230
That way, all proceeding requests received these headers.

67
00:03:35.230 --> 00:03:39.740
Let's begin by opening up the Lambda service in the AWS console.

68
00:03:39.740 --> 00:03:45.320
Click Create function. On this screen, we'll use the Author from scratch option,

69
00:03:45.320 --> 00:03:49.420
and then we'll go through and fill out our options. For name, I'll use

70
00:03:49.420 --> 00:03:54.800
theevent‑security‑headers. And for this function,

71
00:03:54.800 --> 00:03:57.680
I'm going to choose a Python 3.8 run time.

72
00:03:57.680 --> 00:04:03.440
Remember, you can choose either Python or JavaScript. For Permissions.

73
00:04:03.440 --> 00:04:07.640
I'll let it create a new role with basic permissions for us.

74
00:04:07.640 --> 00:04:11.440
Then I'll click Create function at the bottom.

75
00:04:11.440 --> 00:04:13.810
Now we find our actual function where we can apply

76
00:04:13.810 --> 00:04:15.880
our code and manage our settings.

77
00:04:15.880 --> 00:04:19.940
As I scroll down, you'll see where our code goes.

78
00:04:19.940 --> 00:04:22.380
Let's go ahead and replace the boilerplate code with our

79
00:04:22.380 --> 00:04:26.440
header function and then click Deploy.

80
00:04:26.440 --> 00:04:30.170
We've just launched a Lambda function. But in order for

81
00:04:30.170 --> 00:04:32.740
us to turn it into an @Edge function,

82
00:04:32.740 --> 00:04:36.720
we need to publish a version which can be replicated to all edge caches.

83
00:04:36.720 --> 00:04:44.330
Click Actions and then Publish new version. And then, I like to give it a

84
00:04:44.330 --> 00:04:47.440
label to easily references this in the future.

85
00:04:47.440 --> 00:04:50.140
We click Publish.

86
00:04:50.140 --> 00:04:53.860
Now, before we go adding this to our CloudFront distribution,

87
00:04:53.860 --> 00:04:56.440
we need to update one permission.

88
00:04:56.440 --> 00:04:59.890
It's called the trust relationship.

89
00:04:59.890 --> 00:05:02.530
This grants a permission trust with the edge properties,

90
00:05:02.530 --> 00:05:14.640
which allows our functions to execute at the edge caches.

91
00:05:14.640 --> 00:05:15.570
Once we've done that,

92
00:05:15.570 --> 00:05:20.890
head back to your Lambda, and copy the ARN of your latest version. And

93
00:05:20.890 --> 00:05:28.140
we'll take that over to our CloudFront distribution. Go to Behaviors and

94
00:05:28.140 --> 00:05:35.910
then to our default behavior. Scroll to the bottom and add our function to

95
00:05:35.910 --> 00:05:39.310
create an Origin Response association.

96
00:05:39.310 --> 00:05:45.140
Save that and let it deploy.

97
00:05:45.140 --> 00:05:49.320
Don't forget to invalidate your current cache copy so that the next

98
00:05:49.320 --> 00:05:54.040
request will execute the function to cache our headers.

99
00:05:54.040 --> 00:05:55.840
And that should be it.

100
00:05:55.840 --> 00:06:01.840
When you request your site again, you should find your new headers.

101
00:06:01.840 --> 00:06:03.030
So, as you can see,

102
00:06:03.030 --> 00:06:16.000
it's very simple to add a Lambda@Edge function to your CloudFront distribution. And by now, you should understand all of the benefits.

