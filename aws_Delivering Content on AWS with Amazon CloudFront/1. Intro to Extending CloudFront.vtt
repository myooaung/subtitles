WEBVTT
1
00:00:01.740 --> 00:00:05.090
CloudFront is now in between our origin and those

2
00:00:05.090 --> 00:00:06.690
who are requesting our content.

3
00:00:06.690 --> 00:00:10.550
It's doing the heavy lifting of moving our content as close as

4
00:00:10.550 --> 00:00:13.000
possible to wherever those requesters might be.

5
00:00:13.000 --> 00:00:18.650
It's helping secure our content in transit, and it's making it more resilient.

6
00:00:18.650 --> 00:00:20.150
Sounds pretty good, right?

7
00:00:20.150 --> 00:00:24.190
Well, we can leverage CloudFront to do even more.

8
00:00:24.190 --> 00:00:28.430
CloudFront can assist us with error handling by presenting

9
00:00:28.430 --> 00:00:30.600
and caching errors in a user‑friendly way,

10
00:00:30.600 --> 00:00:33.450
ensuring that even during a production incident, we can

11
00:00:33.450 --> 00:00:35.670
maintain the desired user experience.

12
00:00:35.670 --> 00:00:40.930
CloudFront can provide us with a few ways to limit access to our content.

13
00:00:40.930 --> 00:00:44.100
This can be done through many methods such as geo‑specific

14
00:00:44.100 --> 00:00:47.950
restrictions or by signing URLs to private content.

15
00:00:47.950 --> 00:00:54.500
It can restrict access to S3 origins, allow for WAF rules, or even

16
00:00:54.500 --> 00:00:57.350
field‑level encryption to protect sensitive data.

17
00:00:57.350 --> 00:01:02.710
Since CloudFront's infrastructure already puts our content as close to

18
00:01:02.710 --> 00:01:06.330
our visitors as possible, we can also run compute from the edge

19
00:01:06.330 --> 00:01:09.150
locations to perform tasks as quickly as possible.

20
00:01:09.150 --> 00:01:12.500
Let's go through each one of these elements to understand how

21
00:01:12.500 --> 00:01:18.000
we can further extend CloudFront to enhance the delivery of our web content even further.

