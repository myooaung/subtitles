1
00:00:00,968 --> 00:00:06,163
When you create a distribution, you specify default caching behavior.

2
00:00:06,163 --> 00:00:09,992
Behaviors are the real substance of your CloudFront distribution.

3
00:00:09,992 --> 00:00:13,247
The simplest way to describe behaviors is that they are a set of

4
00:00:13,247 --> 00:00:17,031
rules which are bound to an origin that define how CloudFront

5
00:00:17,031 --> 00:00:20,090
handles and process incoming requests.

6
00:00:20,090 --> 00:00:22,870
You can create as many behaviors as necessary.

7
00:00:22,870 --> 00:00:26,816
This might be for path patterns, multiple origins,

8
00:00:26,816 --> 00:00:28,833
forwarding query strings,

9
00:00:28,833 --> 00:00:32,635
accessing secure objects through HTTPS or assigned URLs,

10
00:00:32,635 --> 00:00:34,975
or setting specific TTLs.

11
00:00:34,975 --> 00:00:37,984
Now here are just a few of the many possible elements that

12
00:00:37,984 --> 00:00:40,709
we can define while creating a behavior.

13
00:00:40,709 --> 00:00:43,892
The highlights to focus on are origin definition,

14
00:00:43,892 --> 00:00:49,112
caching duration or TTLs, forwarding of cookies or query strings,

15
00:00:49,112 --> 00:00:51,981
the HTTP request headers, file compression,

16
00:00:51,981 --> 00:00:53,031
and encryption.

17
00:00:53,031 --> 00:00:54,446
While there are many, many more,

18
00:00:54,446 --> 00:00:57,324
we'll hit on those as we review our default caching behavior which

19
00:00:57,324 --> 00:01:01,741
we set up when we first created our distribution.

20
00:01:01,741 --> 00:01:05,691
If you go into the CloudFront service within the AWS Management console,

21
00:01:05,691 --> 00:01:08,877
you should see your list of distributions.

22
00:01:08,877 --> 00:01:11,203
I'll click on the distribution we created for our demo

23
00:01:11,203 --> 00:01:13,996
app and then head to the Behaviors tab.

24
00:01:13,996 --> 00:01:19,248
Here you'll find your default behavior.

25
00:01:19,248 --> 00:01:24,240
You can define as many behaviors as necessary and you do that from this console.

26
00:01:24,240 --> 00:01:28,916
Let's head into our existing default behavior to review what we have.

27
00:01:28,916 --> 00:01:32,326
At the very top, we see path pattern.

28
00:01:32,326 --> 00:01:35,428
This is where we define any path from our URI that

29
00:01:35,428 --> 00:01:38,321
will need specific caching behaviors.

30
00:01:38,321 --> 00:01:41,180
Since this is the default, it includes everything,

31
00:01:41,180 --> 00:01:44,592
hence the wildcard after the word default.

32
00:01:44,592 --> 00:01:52,692
For example, maybe you have some sort of Admin panel at example.com /adminpanel,

33
00:01:52,692 --> 00:01:55,344
you might not want to cache those pages.

34
00:01:55,344 --> 00:01:57,343
Since it's using the same origin,

35
00:01:57,343 --> 00:02:00,507
you'll want to include a separate behavior defined where you

36
00:02:00,507 --> 00:02:03,451
can configure to prevent caching that path.

37
00:02:03,451 --> 00:02:08,423
From the last lesson, we should know what origin is now.

38
00:02:08,423 --> 00:02:11,977
Viewer Protocol Policy is how we define how the Edge

39
00:02:11,977 --> 00:02:14,363
locations handle the initial request.

40
00:02:14,363 --> 00:02:19,264
The Edge locations can listen on both HTTP and HTTPS,

41
00:02:19,264 --> 00:02:23,814
they could redirect an HTTP request to HTTPS,

42
00:02:23,814 --> 00:02:28,261
or completely disable the HTTP listener opting in to

43
00:02:28,261 --> 00:02:31,893
only listen for HTTPS requests.

44
00:02:31,893 --> 00:02:36,553
Next, the Allowed HTTP Methods.

45
00:02:36,553 --> 00:02:39,983
Option one will use CloudFront to get objects from your origin,

46
00:02:39,983 --> 00:02:41,589
as well as headers.

47
00:02:41,589 --> 00:02:43,100
Option two is the same,

48
00:02:43,100 --> 00:02:47,936
but has the ability to list options that your origin supports.

49
00:02:47,936 --> 00:02:48,921
If you enable options,

50
00:02:48,921 --> 00:02:53,367
you will have the ability to optionally cache those headers as well.

51
00:02:53,367 --> 00:02:57,414
Option three allows CloudFront to handle all of these methods.

52
00:02:57,414 --> 00:02:59,890
This option will only be used if necessary.

53
00:02:59,890 --> 00:03:02,241
like if viewers need to submit data.

54
00:03:02,241 --> 00:03:07,512
On top of that, CloudFront will only cache the get, head, and options request.

55
00:03:07,512 --> 00:03:10,259
All others are uncacheable.

56
00:03:10,259 --> 00:03:13,385
The field level encryption goes hand in hand with option three

57
00:03:13,385 --> 00:03:17,366
because it can help you protect sensitive data by encrypting

58
00:03:17,366 --> 00:03:21,088
specific data fields that your viewers might possibly submit

59
00:03:21,088 --> 00:03:22,814
through your applications.

60
00:03:22,814 --> 00:03:25,876
By default, get and head requests are cached.

61
00:03:25,876 --> 00:03:28,777
But if you chose option two under the allowed HTTP methods,

62
00:03:28,777 --> 00:03:34,492
you can choose to make options request cached as well.

63
00:03:34,492 --> 00:03:38,383
Cache Based on Selected Request Headers is a very important setting.

64
00:03:38,383 --> 00:03:39,990
There are only three options,

65
00:03:39,990 --> 00:03:45,304
but they can create widely different experiences based on what you choose.

66
00:03:45,304 --> 00:03:47,598
None, while this option improves caching,

67
00:03:47,598 --> 00:03:51,701
it does not listen to your origin's header values.

68
00:03:51,701 --> 00:03:55,255
Whitelist allows you to specify the headers you want

69
00:03:55,255 --> 00:03:58,360
CloudFront to consider when caching your objects.

70
00:03:58,360 --> 00:04:02,954
This means any headers you choose to whitelist in the next field below,

71
00:04:02,954 --> 00:04:08,775
CloudFront will respect their values from the origin and base caching on them.

72
00:04:08,775 --> 00:04:11,044
If you choose the All option,

73
00:04:11,044 --> 00:04:14,803
CloudFront won't cache any object that are associated with this behavior,

74
00:04:14,803 --> 00:04:17,536
instead, it'll forward every request to your origin,

75
00:04:17,536 --> 00:04:19,322
and as you can see,

76
00:04:19,322 --> 00:04:22,968
I'm basing caching on host header right now as it's the

77
00:04:22,968 --> 00:04:24,913
only one I'm currently whitelisting.

78
00:04:24,913 --> 00:04:26,809
Within the Object Caching setting,

79
00:04:26,809 --> 00:04:29,689
you can allow CloudFront to handle caching based on

80
00:04:29,689 --> 00:04:31,785
the headers you whitelisted above,

81
00:04:31,785 --> 00:04:36,982
but you still have the option to override them anyways and create custom TTLs.

82
00:04:36,982 --> 00:04:39,844
These TTLs can be a little confusing to begin with.

83
00:04:39,844 --> 00:04:43,866
We have minimum, maximum, and default.

84
00:04:43,866 --> 00:04:47,720
Minimum and maximum are impacted based on how you

85
00:04:47,720 --> 00:04:50,626
handle caching based on request headers.

86
00:04:50,626 --> 00:04:51,899
Minimum, by default,

87
00:04:51,899 --> 00:04:57,046
is set to 0 because if you whitelist or allow all request headers,

88
00:04:57,046 --> 00:05:00,755
then CloudFront needs to pass requests directly to your origin,

89
00:05:00,755 --> 00:05:02,797
therefore, the 0-second TTL.

90
00:05:02,797 --> 00:05:05,408
Maximum works the other way.

91
00:05:05,408 --> 00:05:08,053
Obviously, it means the maximum TTL for the object,

92
00:05:08,053 --> 00:05:12,125
but it only applies when you add the cache control or

93
00:05:12,125 --> 00:05:14,435
expires headers at your origin.

94
00:05:14,435 --> 00:05:24,174
The maximum TTL's default setting is set to 31, 536, 000 seconds or 1 year.

95
00:05:24,174 --> 00:05:29,114
Default is where you really can specify the TTL from CloudFront because

96
00:05:29,114 --> 00:05:34,832
the default TTL only applies when you don't whitelist or you don't set

97
00:05:34,832 --> 00:05:37,815
cache control or expires headers at your origin.

98
00:05:37,815 --> 00:05:45,440
This setting defaults to 86, 400 seconds or 1 day.

99
00:05:45,440 --> 00:05:49,124
Forwarding Cookies and Query Strings,

100
00:05:49,124 --> 00:05:52,949
both of these options have a similar set of choices to

101
00:05:52,949 --> 00:05:56,229
handling your origin caching headers, none,

102
00:05:56,229 --> 00:05:58,155
whitelist, or all.

103
00:05:58,155 --> 00:06:03,190
In regards to cookies, I think none and all are pretty self-explanatory.

104
00:06:03,190 --> 00:06:08,843
Either you forward none of your cookies or you forward all of your cookies.

105
00:06:08,843 --> 00:06:12,245
Whitelist allows you to specify which cookies you want

106
00:06:12,245 --> 00:06:14,589
to allow to forward to your origin.

107
00:06:14,589 --> 00:06:19,135
You won't need to use this if S3 is your origin unless you've

108
00:06:19,135 --> 00:06:23,368
configured S3 to act as a website endpoint.

109
00:06:23,368 --> 00:06:24,658
When whitelisting query strings,

110
00:06:24,658 --> 00:06:28,904
you should choose this if your origin returns different versions of your

111
00:06:28,904 --> 00:06:32,599
objects based on one or more query string parameters.

112
00:06:32,599 --> 00:06:35,171
You can specify the parameters that you want CloudFront to

113
00:06:35,171 --> 00:06:38,238
use as a basis for caching in the whitelist field that

114
00:06:38,238 --> 00:06:40,558
appears when you choose this option.

115
00:06:40,558 --> 00:06:44,013
Okay, only a few more options at this point.

116
00:06:44,013 --> 00:06:47,849
Smooth Streaming is only used if you want to distribute media

117
00:06:47,849 --> 00:06:51,767
files in the Microsoft Smooth Streaming format and you don't

118
00:06:51,767 --> 00:06:55,306
have an IIS server to do so.

119
00:06:55,306 --> 00:06:57,942
Restrict View Access is something we will go further

120
00:06:57,942 --> 00:07:00,092
into detail in a later module.

121
00:07:00,092 --> 00:07:00,629
For now,

122
00:07:00,629 --> 00:07:03,802
just understand that this gives you the ability to restrict access

123
00:07:03,802 --> 00:07:08,453
to a specific path pattern through signed URLs.

124
00:07:08,453 --> 00:07:12,909
Now for me, Compressing Objects Automatically,

125
00:07:12,909 --> 00:07:16,016
I don't understand why this one is not set to yes by

126
00:07:16,016 --> 00:07:18,235
default with the option to turn it off,

127
00:07:18,235 --> 00:07:21,316
but if you haven't compressed your objects at your origin,

128
00:07:21,316 --> 00:07:26,233
if the visitor browser sends an accept encoding gzip request header,

129
00:07:26,233 --> 00:07:28,784
then CloudFront will compress your content.

130
00:07:28,784 --> 00:07:31,292
This makes downloads faster because the files are smaller

131
00:07:31,292 --> 00:07:34,110
allowing your web pages to render faster.

132
00:07:34,110 --> 00:07:38,780
The final configuration choice is associating lambda functions.

133
00:07:38,780 --> 00:07:41,027
We'll go in depth in the next module,

134
00:07:41,027 --> 00:07:44,114
but this allows you to specify a lambda at Edge function,

135
00:07:44,114 --> 00:07:48,404
which can be triggered by any of the viewer requests to CloudFront.

136
00:07:48,404 --> 00:07:49,393
And as you can see,

137
00:07:49,393 --> 00:07:52,082
there are many options which allow us to create very specific

138
00:07:52,082 --> 00:07:56,202
behaviors allowing CloudFront to respond exactly as we need to our

139
00:07:56,202 --> 00:07:58,957
requests and interact with our origin.

140
00:07:58,957 --> 00:08:01,175
By learning all these configurations,

141
00:08:01,175 --> 00:08:09,000
you can really begin to understand how CloudFront can help us deliver your content faster and more securely.

