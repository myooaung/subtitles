1
1

00:00:05,287  -->  00:00:07,880
<v Narrator>Alright, so in this video, we're going to</v>
2

2

00:00:07,880  -->  00:00:09,833
add the code to delete a node.
3

3

00:00:09,833  -->  00:00:11,744
Or at least, start adding the code,
4

4

00:00:11,744  -->  00:00:14,494
because delete can be quite complex.
5

5

00:00:14,494  -->  00:00:19,265
Now let's think about what will happen when we delete a node
6

6

00:00:19,265  -->  00:00:22,523
Well, because we're dealing with a binary search tree,
7

7

00:00:22,523  -->  00:00:26,560
meaning that nodes can have zero, one or two children,
8

8

00:00:26,560  -->  00:00:28,683
there are three possibilities.
9

9

00:00:28,683  -->  00:00:32,080
The first is that the node we want to delete is a leaf.
10

10

00:00:32,080  -->  00:00:35,147
The second is that the node we want to delete has one child.
11

11

00:00:35,147  -->  00:00:36,999
And the third is the node
12

12

00:00:36,999  -->  00:00:39,684
that we want to delete has two children.
13

13

00:00:39,684  -->  00:00:41,441
The first case will be really easy,
14

14

00:00:41,441  -->  00:00:44,046
if a node doesn't have any children and we wanna delete it
15

15

00:00:44,046  -->  00:00:45,854
we can just remove it from the tree.
16

16

00:00:45,854  -->  00:00:47,557
We have no children to worry about.
17

17

00:00:47,557  -->  00:00:49,810
In the second case, when there is one child
18

18

00:00:49,810  -->  00:00:51,920
that's actually pretty easy as well.
19

19

00:00:51,920  -->  00:00:54,645
If a node only has one child and we delete it,
20

20

00:00:54,645  -->  00:00:58,493
the child basically replaces the node we're deleting.
21

21

00:00:58,493  -->  00:01:01,734
The third case is complex, and so in this video
22

22

00:01:01,734  -->  00:01:04,757
we'll take a look at the first two cases
23

23

00:01:04,757  -->  00:01:07,635
and we'll handle the third case in another video.
24

24

00:01:07,635  -->  00:01:10,125
So, here is the usual binary tree,
25

25

00:01:10,125  -->  00:01:12,494
except I've added node 17 here,
26

26

00:01:12,494  -->  00:01:15,547
when we go the IDE we'll do the same thing.
27

27

00:01:15,547  -->  00:01:17,844
And so, node 17 is a leaf node.
28

28

00:01:17,844  -->  00:01:21,165
So let's say we wanna delete node 17.
29

29

00:01:21,165  -->  00:01:25,448
Well, all we have to do is knock node 17 off, right?
30

30

00:01:25,448  -->  00:01:26,576
Because it's a leaf,
31

31

00:01:26,576  -->  00:01:28,340
so we don't have to worry about any children.
32

32

00:01:28,340  -->  00:01:33,340
So we basically just knock out node 15's right child.
33

33

00:01:33,567  -->  00:01:36,994 line:15% 
And we're done. And this is the tree, we'd end up with.
34

34

00:01:36,994  -->  00:01:39,878 line:15% 
So, here's the tree with node 17.
35

35

00:01:39,878  -->  00:01:41,731 line:15% 
Here's the tree without node 17.
36

36

00:01:41,731  -->  00:01:43,931
Essentially, the tree that we had before.
37

37

00:01:43,931  -->  00:01:46,321
So, that's case one, it's really easy.
38

38

00:01:46,321  -->  00:01:50,350
Just knock out parent's left child or right child.
39

39

00:01:50,350  -->  00:01:53,685
Depending on which side is the leaf node,
40

40

00:01:53,685  -->  00:01:56,595
that you are deleting. So I've put 17 back now
41

41

00:01:56,595  -->  00:02:00,579
and instead of deleting 17, let's say we wanna delete 15.
42

42

00:02:00,579  -->  00:02:02,865
And so, 15 has one child and it wouldn't matter
43

43

00:02:02,865  -->  00:02:05,142
if the child was on the left or the right.
44

44

00:02:05,142  -->  00:02:07,522
Well, in this case, when there's only one child
45

45

00:02:07,522  -->  00:02:10,642
all we do is we replace the node we're deleting
46

46

00:02:10,642  -->  00:02:15,034
with the child. And it's safe to do that because
47

47

00:02:15,034  -->  00:02:16,951
we know that everything
48

48

00:02:17,840  -->  00:02:19,507
in 20's left subtree
49

49

00:02:20,738  -->  00:02:23,598
is smaller than 20. And so it's safe to say,
50

50

00:02:23,598  -->  00:02:26,517
"Oh, we can just move this value up here,
51

51

00:02:26,517  -->  00:02:30,783
"We know all the values in this subtree are less than 20".
52

52

00:02:30,783  -->  00:02:33,683
So, after we've deleted 15,
53

53

00:02:33,683  -->  00:02:35,587
this is what our tree would look like.
54

54

00:02:35,587  -->  00:02:38,711
Instead of having 15 here, we have 17.
55

55

00:02:38,711  -->  00:02:41,135
And the characteristics of a binary search tree
56

56

00:02:41,135  -->  00:02:43,122
have been preserved. Now, let's pretend
57

57

00:02:43,122  -->  00:02:45,164
we were deleting a node from over here.
58

58

00:02:45,164  -->  00:02:48,329
Let's say we had the value 23,
59

59

00:02:48,329  -->  00:02:49,281
and so we could...
60

60

00:02:49,281  -->  00:02:52,469
You know, 23 is less than 25, it's greater than 20,
61

61

00:02:52,469  -->  00:02:55,870
it's greater than 22. So let's say we have 23 here
62

62

00:02:55,870  -->  00:02:59,117
and we wanna delete 22. We know everything over here
63

63

00:02:59,117  -->  00:03:01,250
is greater than 20, and so it's safe for us
64

64

00:03:01,250  -->  00:03:03,998
to just move 23 into this node.
65

65

00:03:03,998  -->  00:03:07,004
And so, that's how we handle the first two cases,
66

66

00:03:07,004  -->  00:03:09,842
deleting a leaf and deleting a node, that has only
67

67

00:03:09,842  -->  00:03:12,961
one child, so let's go over to the IDE
68

68

00:03:12,961  -->  00:03:15,415
and let's implement the first two cases.
