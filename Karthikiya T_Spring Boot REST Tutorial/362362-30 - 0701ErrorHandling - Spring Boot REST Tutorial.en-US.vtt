WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.370
Let's talk about exception handling in spring rest a P I.

00:00:03.370 --> 00:00:04.800
First of all,

00:00:04.800 --> 00:00:06.330
why should you handle exceptions?

00:00:06.330 --> 00:00:06.750
Well,

00:00:06.750 --> 00:00:10.500
here are some of the reasons why you should handle exceptions gracefully.

00:00:10.500 --> 00:00:16.240
The number one reason is you don't want to show the other message on the you I to your user

00:00:16.240 --> 00:00:19.040
because and use that doesn't care about the error.

00:00:19.040 --> 00:00:21.630
If you show every specific messages on the you,

00:00:21.630 --> 00:00:25.660
I to user may get annoyed and so bad user experience.

00:00:25.660 --> 00:00:26.440
Instead,

00:00:26.440 --> 00:00:29.230
what you'd like to show them is an error page.

00:00:29.230 --> 00:00:32.590
It's a meaningful message that the user can understand.

00:00:32.590 --> 00:00:34.200
Number two reason is,

00:00:34.200 --> 00:00:36.700
maybe you would like to send a customary message.

00:00:36.700 --> 00:00:38.520
Our response especially.

00:00:38.520 --> 00:00:43.250
This is true if you're talking to another Web application from your application,

00:00:43.250 --> 00:00:49.430
in which case you don't want to receive standard http Error response Institute like their

00:00:49.430 --> 00:00:52.220
message to be represented in some meaningful way,

00:00:52.220 --> 00:00:54.110
maybe in Jason Format or next Emily,

00:00:54.110 --> 00:00:55.820
depending on your needs.

00:00:55.820 --> 00:01:03.300
Yet another reason is you may want to log the exception in case often exception so that at

00:01:03.300 --> 00:01:04.420
later point off time,

00:01:04.420 --> 00:01:10.700
developers can trace the error while trying to debunk the issue so typical inside your

00:01:10.700 --> 00:01:16.330
controller will have all these mapping methods you could introduce strike at blocks in all

00:01:16.330 --> 00:01:18.580
these methods and handle exceptions.

00:01:18.580 --> 00:01:22.440
But that's going to introduce unnecessary corded and Nancy.

00:01:22.440 --> 00:01:23.490
Instead,

00:01:23.490 --> 00:01:29.310
it's better to have all that exception handling mechanism in one place and that it's

00:01:29.310 --> 00:01:33.050
possible with the sanitation exception handler.

00:01:33.050 --> 00:01:36.230
He would specify the annotation just about the method.

00:01:36.230 --> 00:01:36.950
Sick nature.

00:01:36.950 --> 00:01:44.300
And you would list on all the list of exceptions for which you want to have a handing logic

00:01:44.300 --> 00:01:45.580
inside the mattered.

00:01:45.580 --> 00:01:47.550
He can do whatever you want.

00:01:47.550 --> 00:01:48.340
Miskell.

00:01:48.340 --> 00:01:52.500
Inside Here you may have logic Teoh respond back with an ever view.

00:01:52.500 --> 00:01:59.350
It's a message that the user can understand are you may want to send the response entity,

00:01:59.350 --> 00:02:03.550
which is what we're trying to do in this case with the custom matter object.

00:02:03.550 --> 00:02:07.200
We'll take a look at an example so that you'll understand better,

00:02:07.200 --> 00:02:11.580
and this method can actually take inability off para meters.

00:02:11.580 --> 00:02:16.060
You can also ask for request object response object so that context,

00:02:16.060 --> 00:02:18.510
etcetera and spring will take care off,

00:02:18.510 --> 00:02:20.890
passing them as perimeters.

00:02:20.890 --> 00:02:23.150
That's what eclipse and see how it's done.

00:02:23.150 --> 00:02:26.400
So here is the exception handling cord,

00:02:26.400 --> 00:02:27.700
and in this case.

00:02:27.700 --> 00:02:30.950
No matter what type of exception we get,

00:02:30.950 --> 00:02:35.290
this cold right here will be triggered.

00:02:35.290 --> 00:02:36.640
And in this case,

00:02:36.640 --> 00:02:41.950
I'm trying to respond back with the response entity populating a custom header object.

00:02:41.950 --> 00:02:47.450
This is simply a poor Joe with a couple of fields.

00:02:47.450 --> 00:02:53.470
Status and message status will deter mined the extra devastate er's message.

00:02:53.470 --> 00:02:54.160
What is that?

00:02:54.160 --> 00:02:54.980
Her message.

00:02:54.980 --> 00:03:02.150
I'm trying to populate the same here bypassing arguments to this constructor.

00:03:02.150 --> 00:03:07.890
And I'm just simply trying to respond back with response entity,

00:03:07.890 --> 00:03:13.730
which will take in all these perimeters the response body headers and status called,

00:03:13.730 --> 00:03:18.350
which is exactly what I'm trying to populate in here.

00:03:18.350 --> 00:03:22.730
You can get a little creative and do water we want in here.

00:03:22.730 --> 00:03:29.430
Maybe you'd like toe respond back with model and view in case offspring MBC and respond

00:03:29.430 --> 00:03:34.680
back with a ever view to show some meaningful message to the user.

00:03:34.680 --> 00:03:42.340
You can also target multiple exceptions by adding them inside a calibrates separated by a

00:03:42.340 --> 00:03:43.450
comma character.

00:03:43.450 --> 00:03:52.090
Maybe I would like to add no point or exception as well,

00:03:52.090 --> 00:03:54.000
by the way,

00:03:54.000 --> 00:03:59.450
this doesn't make sense because we already have the parent class declared in here.

00:03:59.450 --> 00:04:02.800
So regardless off there is another point.

00:04:02.800 --> 00:04:03.330
Exceptional.

00:04:03.330 --> 00:04:06.940
Not this will be triggered anyway.

00:04:06.940 --> 00:04:11.750
But ideally would like to have two unique exceptions.

00:04:11.750 --> 00:04:12.420
Maybe,

00:04:12.420 --> 00:04:13.240
for example,

00:04:13.240 --> 00:04:18.390
you can change the exception to illegal access,

00:04:18.390 --> 00:04:20.570
exception whatever,

00:04:20.570 --> 00:04:24.650
depending on your needs and this will work just fine.

00:04:24.650 --> 00:04:29.070
Let's run,

00:04:29.070 --> 00:04:40.280
not application and see how it looks inside the postman Inclined,

00:04:40.280 --> 00:04:44.250
Amusing post actually be mattered nor to send the request.

00:04:44.250 --> 00:04:51.350
And I've intentionally messed up with the format off the Jason data that I'm trying to send

00:04:51.350 --> 00:04:51.350
.

00:04:51.350 --> 00:04:54.670
This is just to make sure that will have an exception.

00:04:54.670 --> 00:05:00.560
And so handling logic would be triggered.

00:05:00.560 --> 00:05:01.450
And sure enough,

00:05:01.450 --> 00:05:02.500
water,

00:05:02.500 --> 00:05:07.960
The poor Joe object Porta A robbery that were just created or send back as part of the

00:05:07.960 --> 00:05:09.980
response body.

00:05:09.980 --> 00:05:12.750
We have status as well as a message.

00:05:12.750 --> 00:05:16.080
Whatever we had populated in here,

00:05:16.080 --> 00:05:20.280
this method right here is applicable.

00:05:20.280 --> 00:05:21.850
Only written this controller,

00:05:21.850 --> 00:05:26.090
if you want this handling logic to be present across all the controllers,

00:05:26.090 --> 00:05:28.270
you can create another class.

00:05:28.270 --> 00:05:29.780
I mean,

00:05:29.780 --> 00:05:39.250
get it off this and just add the sanitation controller advice and spring will take care off

00:05:39.250 --> 00:05:39.250
.

00:05:39.250 --> 00:05:43.000
Making this exception handler part off all the controllers.

00:05:43.000 --> 00:05:49.110
This matter is nothing different from the one we had here previously.

00:05:49.110 --> 00:06:00.290
That's run out application and you won't see any difference,

00:06:00.290 --> 00:06:04.650
which means it walked.

00:06:04.650 --> 00:06:08.100
Hope it makes sense.

