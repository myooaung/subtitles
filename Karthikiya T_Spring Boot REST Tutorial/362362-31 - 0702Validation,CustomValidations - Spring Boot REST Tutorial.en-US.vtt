WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.080
Let's talk about how we handle validation in spring rest.

00:00:04.080 --> 00:00:09.800
A typical test AP I may be receiving a lot off request from declined application,

00:00:09.800 --> 00:00:13.650
but not all requests could be in the right format.

00:00:13.650 --> 00:00:15.140
For example,

00:00:15.140 --> 00:00:21.440
every quiz could be lacking the required request para meters or part variables or deform it

00:00:21.440 --> 00:00:21.560
off.

00:00:21.560 --> 00:00:25.970
The Jason inside Erica's body may not be in the right format,

00:00:25.970 --> 00:00:31.190
in which case we don't want to delegate that call to the service layer on the business

00:00:31.190 --> 00:00:31.850
logic.

00:00:31.850 --> 00:00:32.940
Instead,

00:00:32.940 --> 00:00:36.480
we want to have an additional layer a validation layer,

00:00:36.480 --> 00:00:40.350
which will check to see if the request is in the right format.

00:00:40.350 --> 00:00:44.340
Only then we will forward the request to the business logic.

00:00:44.340 --> 00:00:49.710
One of the advantages with this is that we don't have to care much about the validation

00:00:49.710 --> 00:00:52.360
logic inside the business layer,

00:00:52.360 --> 00:00:56.080
and we can focus on performing the actual business task.

00:00:56.080 --> 00:01:02.500
We would leave that responsibility to the validation layer so that whatever the liquids

00:01:02.500 --> 00:01:07.350
that come to the service layer were sure that we can process it.

00:01:07.350 --> 00:01:11.250
Spring actually does this job for us to some extent.

00:01:11.250 --> 00:01:12.970
For instance,

00:01:12.970 --> 00:01:16.050
let's that you have the following controller method,

00:01:16.050 --> 00:01:18.390
which takes in one part variable.

00:01:18.390 --> 00:01:24.190
Let's say that the part variable that you entered is not in the right format.

00:01:24.190 --> 00:01:27.850
The method is expecting long type,

00:01:27.850 --> 00:01:31.950
but we're sending a string so spring will throw an exception.

00:01:31.950 --> 00:01:34.540
And Silva will respond back with foreign.

00:01:34.540 --> 00:01:36.240
Did bad request error,

00:01:36.240 --> 00:01:40.500
complaining that the string cannot become watered or typecasting too long?

00:01:40.500 --> 00:01:45.280
Like was If you were to send the Chris perimeters that are not compatible,

00:01:45.280 --> 00:01:51.090
then so would complain with the same because spring is modern after identify such others.

00:01:51.090 --> 00:01:52.460
However,

00:01:52.460 --> 00:01:55.250
in some cases you have to do things manually.

00:01:55.250 --> 00:01:57.970
For instance,

00:01:57.970 --> 00:02:00.850
let's that you wanted to edit an existing product.

00:02:00.850 --> 00:02:07.150
You want to make sure that the product name is not blank are is not empty.

00:02:07.150 --> 00:02:13.030
Spring certainly cannot decide on your behalf as to whether the sting should be empty or

00:02:13.030 --> 00:02:13.530
not.

00:02:13.530 --> 00:02:14.380
It is you,

00:02:14.380 --> 00:02:15.200
as a programmer,

00:02:15.200 --> 00:02:17.850
have to have price such restrictions,

00:02:17.850 --> 00:02:19.790
and that's what I'm trying to do.

00:02:19.790 --> 00:02:20.770
In this case,

00:02:20.770 --> 00:02:27.240
I'm using standard job invalidation FBI and introduced these annotations.

00:02:27.240 --> 00:02:34.320
So if the client application sends a request where the product name is not mentioned or is

00:02:34.320 --> 00:02:34.920
empty,

00:02:34.920 --> 00:02:41.480
declined application would be seeing the response with this message and here's example.

00:02:41.480 --> 00:02:42.360
For the same,

00:02:42.360 --> 00:02:45.030
the product name is empty,

00:02:45.030 --> 00:02:49.250
and so the several respond back with foreign Did Bad Request era,

00:02:49.250 --> 00:02:51.260
saying that it is invalid.

00:02:51.260 --> 00:02:56.490
Let's take a look at this with the running application as well as will explore how to

00:02:56.490 --> 00:02:58.350
create custom allegations.

00:02:58.350 --> 00:03:02.350
So here I am inside hair clips.

00:03:02.350 --> 00:03:08.750
So I'm going to be using extra TV put method in order to update an existing product.

00:03:08.750 --> 00:03:11.350
And here's the product for JAL,

00:03:11.350 --> 00:03:13.880
along with validations,

00:03:13.880 --> 00:03:15.550
which will just stopped.

00:03:15.550 --> 00:03:18.340
I already have this application running.

00:03:18.340 --> 00:03:23.250
I'll just go to Post meant Lined and send the request.

00:03:23.250 --> 00:03:30.350
I'm going to choose the put method,

00:03:30.350 --> 00:03:39.150
and let's say that I want object the product with I d one.

00:03:39.150 --> 00:03:48.880
Let me make sure that this is empty so that we'll see if we're going to get an error.

00:03:48.880 --> 00:03:58.050
Content type is going to be Jason.

00:03:58.050 --> 00:04:01.850
Let's fire the request.

00:04:01.850 --> 00:04:05.450
And sure enough,

00:04:05.450 --> 00:04:10.380
we've seen the message along with few other details.

00:04:10.380 --> 00:04:15.240
But however,

00:04:15.240 --> 00:04:20.370
things might get little complex at times because with these annotations,

00:04:20.370 --> 00:04:25.930
you're just restricted to use only the validations provided by the job.

00:04:25.930 --> 00:04:26.950
Rex Library.

00:04:26.950 --> 00:04:31.120
If you'd like to take a look at the and our list,

00:04:31.120 --> 00:04:32.350
Hiro Day.

00:04:32.350 --> 00:04:35.650
So you can check for now,

00:04:35.650 --> 00:04:38.740
not empty min Max,

00:04:38.740 --> 00:04:39.750
etcetera.

00:04:39.750 --> 00:04:41.130
Now,

00:04:41.130 --> 00:04:47.190
let's say that I wanted to put a restriction that whatever the product price that will be

00:04:47.190 --> 00:04:52.650
populated should be written the range between 1 $2000.

00:04:52.650 --> 00:04:54.830
How do I buy the restriction?

00:04:54.830 --> 00:04:56.550
I cannot use one of these methods.

00:04:56.550 --> 00:04:59.800
I have to create my own allegation.

00:04:59.800 --> 00:05:03.350
I'm going to use the standard.

00:05:03.350 --> 00:05:09.880
Java interferes an addition to create my custom annotation.

00:05:09.880 --> 00:05:13.580
And here is the name off the annotation that I would like to use.

00:05:13.580 --> 00:05:16.460
And whatever you specify,

00:05:16.460 --> 00:05:22.400
whatever the methods that you specify are the bunch off attributes that will be part of the

00:05:22.400 --> 00:05:23.890
habitation.

00:05:23.890 --> 00:05:26.150
Let me show you what I mean.

00:05:26.150 --> 00:05:33.410
So here is how our custom annotation is going to look like,

00:05:33.410 --> 00:05:38.150
and these are the method names that correspond to these methods.

00:05:38.150 --> 00:05:41.250
In addition to that,

00:05:41.250 --> 00:05:45.550
we also have a matter that says message with the default message.

00:05:45.550 --> 00:05:46.110
Well,

00:05:46.110 --> 00:05:49.850
this is there a message that will show in case of the criteria is not met.

00:05:49.850 --> 00:05:52.650
If you'd like to override this message,

00:05:52.650 --> 00:06:00.680
he can certainly make use off this matter of name and add it as another attribute with your

00:06:00.680 --> 00:06:01.950
custom message.

00:06:01.950 --> 00:06:10.370
So once you have this matter,

00:06:10.370 --> 00:06:11.250
Dick laid.

00:06:11.250 --> 00:06:14.990
You just have to add a couple off additional methods.

00:06:14.990 --> 00:06:18.750
These methods have nothing to do with what we're doing now,

00:06:18.750 --> 00:06:20.950
but you just have to add them.

00:06:20.950 --> 00:06:28.090
Talking about groups and payload is a little bit off topic and actually will never get to

00:06:28.090 --> 00:06:29.450
use one on these.

00:06:29.450 --> 00:06:33.000
So just have them in there and forget about it.

00:06:33.000 --> 00:06:39.430
Let's talk about these and additions Target.

00:06:39.430 --> 00:06:45.850
You would specify the list off target where you think that we can use the sanitation.

00:06:45.850 --> 00:06:47.290
I want this,

00:06:47.290 --> 00:06:54.080
an addition to be used at method level at free level and that I met the perimeter level.

00:06:54.080 --> 00:06:57.250
Maybe I can get it on this.

00:06:57.250 --> 00:07:01.710
It's individual choice.

00:07:01.710 --> 00:07:10.240
The retention specifies that When do you want the deflection FBI to use the sanitation or

00:07:10.240 --> 00:07:11.760
to populate the sanitation?

00:07:11.760 --> 00:07:13.750
It is during the run time.

00:07:13.750 --> 00:07:16.950
As part of the constant annotation.

00:07:16.950 --> 00:07:20.250
It would specify the class name,

00:07:20.250 --> 00:07:28.140
and this is a class where we'll have the logic to see if the value falls in between the min

00:07:28.140 --> 00:07:32.450
and max values that we configuring here.

00:07:32.450 --> 00:07:40.950
So you just have to create another class that implements constant while the data that comes

00:07:40.950 --> 00:07:43.050
with a couple of gender perimeters.

00:07:43.050 --> 00:07:44.350
The first off,

00:07:44.350 --> 00:07:46.520
which is the annotation glass.

00:07:46.520 --> 00:07:47.690
But we've just created,

00:07:47.690 --> 00:07:54.990
and the second argument is the target type putting stance.

00:07:54.990 --> 00:07:57.950
We're trying to target indigent here,

00:07:57.950 --> 00:08:02.300
so it's the exact type which you have to specify.

00:08:02.300 --> 00:08:08.650
This introverts comes with a couple off methods initialized as well as his valid with

00:08:08.650 --> 00:08:12.150
initialized method will try to initialize all these fields,

00:08:12.150 --> 00:08:14.060
and spring will take care off,

00:08:14.060 --> 00:08:18.660
providing all the values that we enter as part of this attribute,

00:08:18.660 --> 00:08:23.950
and you will have them with this object.

00:08:23.950 --> 00:08:27.230
So I'm just trying to initialize these very boats,

00:08:27.230 --> 00:08:30.550
and then we have is valid method.

00:08:30.550 --> 00:08:37.350
This is where you would write your own logic to see if the entered value,

00:08:37.350 --> 00:08:40.300
whatever the value is entered by the user,

00:08:40.300 --> 00:08:43.880
false within this range,

00:08:43.880 --> 00:08:47.450
and based on that it will return a Boolean value,

00:08:47.450 --> 00:08:51.650
so that's pretty much it.

00:08:51.650 --> 00:08:55.290
Let's run our application.

00:08:55.290 --> 00:08:58.650
Let's make this 1000.

00:08:58.650 --> 00:09:03.680
Can't expect I phone to be priced within that range off 1 to 10.

00:09:03.680 --> 00:09:06.390
Let's relaunch our application.

00:09:06.390 --> 00:09:16.610
Go to Postman,

00:09:16.610 --> 00:09:21.450
and this time let me mess up with the price.

00:09:21.450 --> 00:09:22.990
It's already messed up.

00:09:22.990 --> 00:09:25.570
It's send the request.

00:09:25.570 --> 00:09:26.950
Okay,

00:09:26.950 --> 00:09:30.280
We have seen this ad or a name is mandatory field.

00:09:30.280 --> 00:09:32.900
Have me populate some name.

00:09:32.900 --> 00:09:38.540
I phoned Z the future Russian off iPhone,

00:09:38.540 --> 00:09:47.650
and sure enough were able to see this message which was populated in here.

00:09:47.650 --> 00:09:52.650
So that's how you create custom validations.

