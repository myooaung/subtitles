WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.150
Let's talk about error handling in dressed in black.

00:00:03.150 --> 00:00:09.850
Let's say that your application is about delivering food so we have a food delivery service

00:00:09.850 --> 00:00:11.710
which might want a doctor,

00:00:11.710 --> 00:00:12.670
one of the Web service,

00:00:12.670 --> 00:00:13.020
say,

00:00:13.020 --> 00:00:14.290
a weather forecast service.

00:00:14.290 --> 00:00:19.880
Because depending on the weather conditions are application needs to notify to the user

00:00:19.880 --> 00:00:22.250
regarding the delay of delivery off food.

00:00:22.250 --> 00:00:24.230
So obviously,

00:00:24.230 --> 00:00:29.060
we're going to be using rest template to make a Web service called to the weather Forecast

00:00:29.060 --> 00:00:29.670
service.

00:00:29.670 --> 00:00:30.900
However,

00:00:30.900 --> 00:00:33.160
we may not always get deposited.

00:00:33.160 --> 00:00:37.630
Response from the server are the weather forecasts Elvis.

00:00:37.630 --> 00:00:38.850
In other words,

00:00:38.850 --> 00:00:40.970
we may not always get wounded.

00:00:40.970 --> 00:00:41.270
Okay,

00:00:41.270 --> 00:00:42.210
status scored.

00:00:42.210 --> 00:00:43.770
As part of the response,

00:00:43.770 --> 00:00:47.040
we may end up getting other status courts,

00:00:47.040 --> 00:00:49.350
depending on the type off error.

00:00:49.350 --> 00:00:51.180
For instance,

00:00:51.180 --> 00:00:57.730
plane may have requested for a resource which is not present on the silver are it could be

00:00:57.730 --> 00:01:02.170
the case that silver went down for some reason or it went off this space.

00:01:02.170 --> 00:01:03.940
Whatever is the reason,

00:01:03.940 --> 00:01:10.590
depending on the ever its corresponding Hester deepest Rita scored would be sent back as

00:01:10.590 --> 00:01:12.760
part of the response from the silver,

00:01:12.760 --> 00:01:18.780
in which case we need to handle those other scenarios gracefully on the client side.

00:01:18.780 --> 00:01:21.050
Inside our application logic,

00:01:21.050 --> 00:01:28.070
here are some of the typical state of scores that we might come across within our date of

00:01:28.070 --> 00:01:30.510
their life when working with Web services.

00:01:30.510 --> 00:01:34.280
But there are many more status chords like this,

00:01:34.280 --> 00:01:35.950
depending on the other.

00:01:35.950 --> 00:01:37.450
For example,

00:01:37.450 --> 00:01:40.750
we have poor ended has to deepest era scored.

00:01:40.750 --> 00:01:43.500
This could happen for Verity off reasons,

00:01:43.500 --> 00:01:47.870
one of which could be the format at which declined.

00:01:47.870 --> 00:01:50.550
Since the request may not be in the right format,

00:01:50.550 --> 00:01:53.720
let me quickly demonstrate you what I mean.

00:01:53.720 --> 00:02:00.660
I already have our crowd application running and currently the showing list off products

00:02:00.660 --> 00:02:01.310
available.

00:02:01.310 --> 00:02:05.550
We also have a put method nor a top data record.

00:02:05.550 --> 00:02:08.280
So let me just make use off that mattered.

00:02:08.280 --> 00:02:15.600
So I'm going to make this part of the body and send the request.

00:02:15.600 --> 00:02:24.790
But before that that Mr the Comden typed to Jason.

00:02:24.790 --> 00:02:32.480
Now let me just mess with the format So this is not acceptable format.

00:02:32.480 --> 00:02:34.860
This is not standard Jason format.

00:02:34.860 --> 00:02:41.980
If I send the request if you notice you have 400 bad request,

00:02:41.980 --> 00:02:47.840
So not having right format while turning the request is we're not the reasons why you might

00:02:47.840 --> 00:02:50.610
get 400 bad request status.

00:02:50.610 --> 00:02:52.300
Similarly,

00:02:52.300 --> 00:02:54.380
we have four or three forbidden.

00:02:54.380 --> 00:03:00.650
That means Plant is not authorized to invoke a particular operation.

00:03:00.650 --> 00:03:01.690
This is true,

00:03:01.690 --> 00:03:04.830
especially if security is enabled on the other end,

00:03:04.830 --> 00:03:07.350
and it requires authentication and authorization.

00:03:07.350 --> 00:03:11.970
And then we have 404 not found status.

00:03:11.970 --> 00:03:13.520
I think this is pretty popular one.

00:03:13.520 --> 00:03:15.990
I'm pretty sure you might have come across with this.

00:03:15.990 --> 00:03:17.890
Friends stands.

00:03:17.890 --> 00:03:19.250
Let me just go to Google.

00:03:19.250 --> 00:03:27.250
It's google dot com slash whatever,

00:03:27.250 --> 00:03:32.750
obviously doesn't exist.

00:03:32.750 --> 00:03:38.060
Hence we're getting poorer for not for Netter were trying to request for the resource,

00:03:38.060 --> 00:03:40.750
which is not present on the silver.

00:03:40.750 --> 00:03:50.240
So likewise we have many such status is you can go to the Wikipedia page has to be bested

00:03:50.240 --> 00:03:50.970
US codes,

00:03:50.970 --> 00:03:56.140
and you can explore all the official list off State of Scolds off yesterday.

00:03:56.140 --> 00:04:00.300
Be so we have basically find sets off status cords.

00:04:00.300 --> 00:04:04.350
If you have a status code that starts with one,

00:04:04.350 --> 00:04:06.990
then that means it's informational response.

00:04:06.990 --> 00:04:12.910
All the state of scores there start with two would correspond to a such a status.

00:04:12.910 --> 00:04:14.170
Similarly,

00:04:14.170 --> 00:04:20.400
we have state of scores that start with four to represent it is different types of feathers

00:04:20.400 --> 00:04:23.270
which you have just seen from decline side.

00:04:23.270 --> 00:04:23.930
I mean,

00:04:23.930 --> 00:04:27.070
if you come across with the status scored that started four,

00:04:27.070 --> 00:04:31.080
then that means something is messed up from the client side.

00:04:31.080 --> 00:04:38.580
Whatever the examples that were just seen is the mystic from declined side me as a client

00:04:38.580 --> 00:04:40.950
at requester for the resource which is not present.

00:04:40.950 --> 00:04:43.080
So it is my fault,

00:04:43.080 --> 00:04:44.300
not on the server side.

00:04:44.300 --> 00:04:51.550
While all the serious courts that start with five has something to do with this over side,

00:04:51.550 --> 00:04:56.370
maybe sober might have went out off this space or result of service,

00:04:56.370 --> 00:04:57.150
etcetera.

00:04:57.150 --> 00:05:01.690
So here are all the list off status cords,

00:05:01.690 --> 00:05:05.960
so we have 500 status scored.

00:05:05.960 --> 00:05:08.250
This can come from already off reasons.

00:05:08.250 --> 00:05:11.800
If the server is not able to determine mind theater,

00:05:11.800 --> 00:05:14.980
then it would just respond back with this gender extractors.

00:05:14.980 --> 00:05:19.450
Court 500 which means something is wrong from the silver side.

00:05:19.450 --> 00:05:23.500
So how do we handle these errors on the client side?

00:05:23.500 --> 00:05:25.460
How do we deal with this?

00:05:25.460 --> 00:05:26.270
Well,

00:05:26.270 --> 00:05:30.100
one straightforward approach is off course to rob the court around,

00:05:30.100 --> 00:05:30.360
Try,

00:05:30.360 --> 00:05:30.710
catch,

00:05:30.710 --> 00:05:33.250
block it pretty much will work.

00:05:33.250 --> 00:05:38.610
But if you want to get more fine grain control on how you handle the status courts.

00:05:38.610 --> 00:05:44.100
Then we have a special interface specifically tuned to walk with rest template.

00:05:44.100 --> 00:05:45.450
Let's take a look.

00:05:45.450 --> 00:05:48.880
So here I am Inside Eclipse.

00:05:48.880 --> 00:05:55.150
I just created a random class and we want this class Toby Auto scannable.

00:05:55.150 --> 00:06:05.630
And so I made this a competent and this class has to implement the interface response Error

00:06:05.630 --> 00:06:06.240
Handler.

00:06:06.240 --> 00:06:08.140
As the name suggests,

00:06:08.140 --> 00:06:14.850
it's going to let us right Methods toe handle the errors that are part of the response.

00:06:14.850 --> 00:06:21.580
This interface comes with three methods to our standard method signatures,

00:06:21.580 --> 00:06:25.390
and so we have to provide implementation and hit all day.

00:06:25.390 --> 00:06:32.870
The first matter is about deter mining if the response has another so inside this matter

00:06:32.870 --> 00:06:40.030
willing to introduce a logic that will help us determine mind if the response has ever you

00:06:40.030 --> 00:06:44.710
have complete control on the response that is sent back from the silver,

00:06:44.710 --> 00:06:49.010
and you can customize your logic to determine if it has an answer.

00:06:49.010 --> 00:06:56.350
So the court that I had introduced is to see the status cord.

00:06:56.350 --> 00:06:59.880
If it is not Esther,

00:06:59.880 --> 00:07:00.590
devastate us.

00:07:00.590 --> 00:07:01.250
Okay,

00:07:01.250 --> 00:07:06.700
this is an Inam constant and OK would mean 200.

00:07:06.700 --> 00:07:07.250
Okay,

00:07:07.250 --> 00:07:09.950
State is called.

00:07:09.950 --> 00:07:11.020
Likewise,

00:07:11.020 --> 00:07:18.250
we have many different status cords which we can use said the status is not okay,

00:07:18.250 --> 00:07:26.360
that I'm returning the value True which will tell this matter here handle error that we

00:07:26.360 --> 00:07:28.540
have another which we need to handle.

00:07:28.540 --> 00:07:30.630
If this method returns false,

00:07:30.630 --> 00:07:33.790
then this method will not be triggered at all.

00:07:33.790 --> 00:07:36.290
The other would be handled.

00:07:36.290 --> 00:07:38.850
Additionally,

00:07:38.850 --> 00:07:42.260
if you would like to deal with only specific status cords,

00:07:42.260 --> 00:07:48.360
I mean let's that you want to deal with only for a 34 billion response.

00:07:48.360 --> 00:07:54.970
Then you can just simply have a check to see the status code and based on that,

00:07:54.970 --> 00:07:59.650
he will set the flag and so this method would be triggered accordingly.

00:07:59.650 --> 00:08:03.590
Inside this method,

00:08:03.590 --> 00:08:05.450
you can have the handling logic.

00:08:05.450 --> 00:08:06.410
I mean,

00:08:06.410 --> 00:08:09.650
whatever you would otherwise do inside the catch block,

00:08:09.650 --> 00:08:12.540
you can pretty much have the same stuff in here as well.

00:08:12.540 --> 00:08:16.010
But how do we make this all work?

00:08:16.010 --> 00:08:22.680
We need to somehow bag this handler with the rest template.

00:08:22.680 --> 00:08:27.750
And that's what is being done in this method.

00:08:27.750 --> 00:08:34.680
So for this example specifically have introduced this method which would map to the get

00:08:34.680 --> 00:08:38.260
request and inside here.

00:08:38.260 --> 00:08:40.480
The first thing that I'm trying to do,

00:08:40.480 --> 00:08:48.860
we won't be needing these exceptions since I corporate dismay at that.

00:08:48.860 --> 00:08:51.790
All those exceptions came along with that.

00:08:51.790 --> 00:08:53.180
But we won't be needing them,

00:08:53.180 --> 00:08:57.390
but he does a key instruction that will sort off,

00:08:57.390 --> 00:08:58.560
said the other handler.

00:08:58.560 --> 00:09:00.090
For this rest template,

00:09:00.090 --> 00:09:02.450
which was dependence injected.

00:09:02.450 --> 00:09:09.310
And then this you are right here will help us generate the status quo for choice.

00:09:09.310 --> 00:09:15.150
So let me just quickly walk it through this website and see what they have to offer,

00:09:15.150 --> 00:09:19.920
said this website.

00:09:19.920 --> 00:09:27.480
Right here is a service for generating different hash Olympic cords and is useful for

00:09:27.480 --> 00:09:28.060
testing.

00:09:28.060 --> 00:09:32.210
Have your scripts deal with bearing responses,

00:09:32.210 --> 00:09:34.740
and the way you use it is,

00:09:34.740 --> 00:09:35.890
it just have happened.

00:09:35.890 --> 00:09:42.470
This data scored in this manner and this application would respond back with the exact same

00:09:42.470 --> 00:09:46.500
status cord so that we can desktop application.

00:09:46.500 --> 00:09:47.410
For instance.

00:09:47.410 --> 00:09:58.220
I'm trying to experiment with four or four error and so I appended this in here and the

00:09:58.220 --> 00:10:00.450
application would respond back with that court.

00:10:00.450 --> 00:10:05.250
I'm using the exchange A B I in order to send the request.

00:10:05.250 --> 00:10:16.030
That's when our application and see how things will go well.

00:10:16.030 --> 00:10:21.030
We could actually have another application running end and change the logic in there to

00:10:21.030 --> 00:10:21.750
start off.

00:10:21.750 --> 00:10:23.270
Create this errors,

00:10:23.270 --> 00:10:25.080
but it's going to be a lot off mess.

00:10:25.080 --> 00:10:28.100
So I'm just using an existing application.

00:10:28.100 --> 00:10:43.350
It's got a postman and try to send the get request if you go back to eclipse.

00:10:43.350 --> 00:10:57.720
So this method has been invoked and we're also trying to display some details which are

00:10:57.720 --> 00:11:00.710
being displayed as part of the output.

00:11:00.710 --> 00:11:05.650
And we even handled the other.

00:11:05.650 --> 00:11:12.270
So that's how you would handle errors and gets off rest template.

00:11:12.270 --> 00:11:13.820
Hope it makes sense.

