WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.240
the straight.

00:00:01.240 --> 00:00:03.430
Understand how we can introduce,

00:00:03.430 --> 00:00:08.410
upload and download features using springboard dressed FBI in the process.

00:00:08.410 --> 00:00:14.060
We're also going to explore so 10 crucial concepts in the state p i that maybe off helpful

00:00:14.060 --> 00:00:14.650
to you.

00:00:14.650 --> 00:00:20.330
So here is how our A P is going to look like will have an upload endpoint,

00:00:20.330 --> 00:00:22.570
which will help us applaud a single file.

00:00:22.570 --> 00:00:25.810
And then we have upload files,

00:00:25.810 --> 00:00:28.150
which will help us applaud multiple files.

00:00:28.150 --> 00:00:31.770
We also have an endpoint for download,

00:00:31.770 --> 00:00:34.380
and here are the steps that made to follow.

00:00:34.380 --> 00:00:41.310
First wanted to have a springboard project a very basic springboard project with spring Web

00:00:41.310 --> 00:00:44.150
started dependency will do just fine.

00:00:44.150 --> 00:00:45.390
In my case,

00:00:45.390 --> 00:00:50.850
I'm just going to use one off my previous projects where I created crowd application.

00:00:50.850 --> 00:00:52.140
And after that,

00:00:52.140 --> 00:00:57.900
we're going to introduce certain properties that will help us upload files and then off

00:00:57.900 --> 00:01:04.000
course will write the logic both controller and service logic to perform the upload and

00:01:04.000 --> 00:01:05.200
download our operation.

00:01:05.200 --> 00:01:10.380
So let's go to Eclipse and Roman and see how it's done.

00:01:10.380 --> 00:01:12.990
And he wrote the set off properties,

00:01:12.990 --> 00:01:16.050
which needs to go inside the application or properties file.

00:01:16.050 --> 00:01:23.070
The first off which is to enable so called multi part file uploads by neighbouring this

00:01:23.070 --> 00:01:27.740
Sprinkle helpers upload the file in multiple parts.

00:01:27.740 --> 00:01:31.290
Which means said that you uploaded at 10 MBI file.

00:01:31.290 --> 00:01:34.250
It would be split up into multiple parts,

00:01:34.250 --> 00:01:37.650
and each part will be flushed into the destination file system.

00:01:37.650 --> 00:01:41.000
But for that we do have to set the threshold,

00:01:41.000 --> 00:01:43.510
and that's what this property is meant for.

00:01:43.510 --> 00:01:45.650
File size threshold.

00:01:45.650 --> 00:01:48.810
So for every two K B,

00:01:48.810 --> 00:01:50.680
all the bodily date off,

00:01:50.680 --> 00:01:55.100
the uploaded file would be flushed into the destination file system.

00:01:55.100 --> 00:02:02.060
And here we're trying to set the maximum size off a single file with this property max file

00:02:02.060 --> 00:02:05.700
size and then with this property Max request size.

00:02:05.700 --> 00:02:11.650
We're trying to set maximum size off all the files combined while sending the request.

00:02:11.650 --> 00:02:15.550
Now let's take a look at the controller logic.

00:02:15.550 --> 00:02:16.920
For now,

00:02:16.920 --> 00:02:19.860
let us ignore the downward file functionality,

00:02:19.860 --> 00:02:23.690
and let's just focus on applauding violets.

00:02:23.690 --> 00:02:29.150
It is a logic that will help us upload a single file.

00:02:29.150 --> 00:02:34.170
This mother is going to accept one single Param Eter with the name file.

00:02:34.170 --> 00:02:40.120
This is basically the file that we went up from the client specifically from the Postman

00:02:40.120 --> 00:02:40.630
Klein,

00:02:40.630 --> 00:02:43.620
and it's going to be off type,

00:02:43.620 --> 00:02:44.750
multi part file.

00:02:44.750 --> 00:02:51.570
And in order to actually store this file are binary data into the destination directory.

00:02:51.570 --> 00:02:55.870
I had created a service with this Method store file,

00:02:55.870 --> 00:03:04.920
and all we're trying to do here is we're trying to just simply use one off the Java

00:03:04.920 --> 00:03:12.930
libraries and using one off its method copy to copy the stream off input onto the

00:03:12.930 --> 00:03:14.900
destination or the target location.

00:03:14.900 --> 00:03:17.600
And while it isn't stance off,

00:03:17.600 --> 00:03:20.350
this class is created inside the constructor.

00:03:20.350 --> 00:03:23.350
I'm also trying to populate this property,

00:03:23.350 --> 00:03:24.590
which says,

00:03:24.590 --> 00:03:30.530
File storage location and I have explicitly hardcore did the value where we want upload the

00:03:30.530 --> 00:03:33.400
files in real time projects.

00:03:33.400 --> 00:03:34.440
Your mont heart.

00:03:34.440 --> 00:03:38.050
Cordes maybe want to read it from the properties file itself,

00:03:38.050 --> 00:03:42.910
and we also have a check to save.

00:03:42.910 --> 00:03:46.510
The file contains any illegal characters or whatever.

00:03:46.510 --> 00:03:49.070
You can have as many validations as you wish.

00:03:49.070 --> 00:03:51.070
But that's not our primary focus here.

00:03:51.070 --> 00:03:53.500
And in case,

00:03:53.500 --> 00:03:55.140
if you have any exceptions,

00:03:55.140 --> 00:04:00.940
you may want to handle that exception in some good way by creating a custom exception.

00:04:00.940 --> 00:04:02.220
In my case,

00:04:02.220 --> 00:04:04.050
in order to explain things better,

00:04:04.050 --> 00:04:06.670
I just kept things simple for now.

00:04:06.670 --> 00:04:11.450
And finally we were just returning back with that exact file name.

00:04:11.450 --> 00:04:14.750
And after that,

00:04:14.750 --> 00:04:20.450
we're just trying to populate upload file response object.

00:04:20.450 --> 00:04:23.440
This is just for response.

00:04:23.440 --> 00:04:27.450
This is the response that the user or the client will see.

00:04:27.450 --> 00:04:30.330
Once we take a look at the example of the same,

00:04:30.330 --> 00:04:31.770
you'll understand this better.

00:04:31.770 --> 00:04:37.720
So let's go the postman and try toe upload a file and see the functionality working.

00:04:37.720 --> 00:04:39.000
But before that,

00:04:39.000 --> 00:04:40.450
let's run out application.

00:04:40.450 --> 00:04:48.620
So here is a postman client again.

00:04:48.620 --> 00:04:51.970
I cleaned up everything just so that everything looks clean.

00:04:51.970 --> 00:05:07.310
And in here I'm just going to say a local local host call in 80 80 slash product upload and

00:05:07.310 --> 00:05:07.850
that's it.

00:05:07.850 --> 00:05:10.860
Inside the body,

00:05:10.860 --> 00:05:16.170
I'm going to simulate submitting a farm with a file upload sensor off.

00:05:16.170 --> 00:05:16.450
Next,

00:05:16.450 --> 00:05:17.780
I'm going to choose a file.

00:05:17.780 --> 00:05:22.100
And when did you lose the fires specifically for this purpose?

00:05:22.100 --> 00:05:26.660
I've actually created a folder with these two files,

00:05:26.660 --> 00:05:28.150
which we're going to experiment with.

00:05:28.150 --> 00:05:30.090
And once I upload the file,

00:05:30.090 --> 00:05:32.750
this is the destination folder.

00:05:32.750 --> 00:05:33.330
Mary.

00:05:33.330 --> 00:05:34.050
Want to sell what?

00:05:34.050 --> 00:05:40.450
Upload the files to someone to choose one of these files?

00:05:40.450 --> 00:05:43.900
I went to give the name.

00:05:43.900 --> 00:05:46.010
It has to be exact same name.

00:05:46.010 --> 00:05:46.990
Whatever the request.

00:05:46.990 --> 00:05:49.710
Bottom we had configured in the end point.

00:05:49.710 --> 00:05:57.150
We seem to be having an editor and that say it's failed to convert type,

00:05:57.150 --> 00:06:00.150
string and required type long.

00:06:00.150 --> 00:06:01.330
Okay,

00:06:01.330 --> 00:06:03.990
this is going to be a post request,

00:06:03.990 --> 00:06:06.550
not a get request.

00:06:06.550 --> 00:06:08.710
All right,

00:06:08.710 --> 00:06:10.990
let's go back to eclipse and see what's going wrong.

00:06:10.990 --> 00:06:23.240
So it's product slash It's upload file,

00:06:23.240 --> 00:06:24.610
not upload me.

00:06:24.610 --> 00:06:25.470
Copy this.

00:06:25.470 --> 00:06:28.380
It's just a type wetter.

00:06:28.380 --> 00:06:33.560
No,

00:06:33.560 --> 00:06:35.560
it worked with it.

00:06:35.560 --> 00:06:35.900
Wonder.

00:06:35.900 --> 00:06:36.460
OK,

00:06:36.460 --> 00:06:38.690
and if you go to the destination directory,

00:06:38.690 --> 00:06:43.050
you would indeed find that file applauded.

00:06:43.050 --> 00:06:46.800
But if you notice the response,

00:06:46.800 --> 00:06:49.480
we have some details here.

00:06:49.480 --> 00:06:51.950
This is a response object that I was talking about.

00:06:51.950 --> 00:07:02.550
So here I'm just trying to populate that response object upload fire response,

00:07:02.550 --> 00:07:08.990
which is simply a Poggio that has all the details that we've just seen in the response.

00:07:08.990 --> 00:07:12.860
And here I'm just trying toe calculate the download.

00:07:12.860 --> 00:07:16.690
Your I went to take a look at the download file function out in a while,

00:07:16.690 --> 00:07:21.850
and ultimately this you are I would show up in the result,

00:07:21.850 --> 00:07:26.390
so I can just simply click this and download the file.

00:07:26.390 --> 00:07:28.360
But before that,

00:07:28.360 --> 00:07:31.850
let's try toe experiment with multi file upload,

00:07:31.850 --> 00:07:38.790
and for that we're going to make use off this endpoint.

00:07:38.790 --> 00:07:40.650
And inside this method,

00:07:40.650 --> 00:07:47.400
I'm just trying to use job way it streams in order to call this method for each and every

00:07:47.400 --> 00:07:52.950
file that got uploaded to this time we're going to accept and a day off files.

00:07:52.950 --> 00:08:01.350
So going to say,

00:08:01.350 --> 00:08:11.100
upload files and with me,

00:08:11.100 --> 00:08:17.450
apply multiple files and send the request.

00:08:17.450 --> 00:08:23.200
And this time you see a couple of files getting uploaded and since filed one was already

00:08:23.200 --> 00:08:23.740
uploaded.

00:08:23.740 --> 00:08:29.250
It got replaced because if you remember inside ourselves logic,

00:08:29.250 --> 00:08:32.860
that's what we had set to replace the existing file.

00:08:32.860 --> 00:08:34.750
If it was all that existing,

00:08:34.750 --> 00:08:39.850
I hope it makes sense.

00:08:39.850 --> 00:08:45.550
No other straight explored the download functionality.

00:08:45.550 --> 00:08:48.740
This matter is going to accept one part variable,

00:08:48.740 --> 00:08:51.350
so we're going to use a template variable.

00:08:51.350 --> 00:08:59.550
So this right here is what we're going to read as part of the path variable.

00:08:59.550 --> 00:09:04.600
And once we have the file name,

00:09:04.600 --> 00:09:08.500
I'm trying to load that file as a resource.

00:09:08.500 --> 00:09:13.560
Let's take a look at what's going on in here inside this matter.

00:09:13.560 --> 00:09:19.320
We just have some logic that will help us read the file as a resource which is providing

00:09:19.320 --> 00:09:20.250
the final name.

00:09:20.250 --> 00:09:25.600
And then we're trying to create a resource object out off it so that we can work on it,

00:09:25.600 --> 00:09:30.160
and we're just having some validation here to see if it really exists.

00:09:30.160 --> 00:09:32.860
Others were trying to throw an exception in my case.

00:09:32.860 --> 00:09:34.040
I just commented the thought,

00:09:34.040 --> 00:09:38.060
but you may want to handle this exception in some meaningful way by creating custom

00:09:38.060 --> 00:09:39.250
exceptions or whatever.

00:09:39.250 --> 00:09:42.450
Continuing on this logic,

00:09:42.450 --> 00:09:48.130
we're trying to determine the content type of the file is the Pdf is a text file,

00:09:48.130 --> 00:09:50.270
or is it image or whatever?

00:09:50.270 --> 00:09:54.250
We're trying to do it remind that so that we can respond back in the same format.

00:09:54.250 --> 00:09:56.240
And ultimately,

00:09:56.240 --> 00:09:56.480
again,

00:09:56.480 --> 00:10:02.020
we're just trying to use the response object to send back the details along with the

00:10:02.020 --> 00:10:04.450
resource as part of the response body.

00:10:04.450 --> 00:10:15.580
Let's go back to Postman and just click this link consent.

00:10:15.580 --> 00:10:25.640
Not sure why has it taken so much time with me?

00:10:25.640 --> 00:10:34.240
Cancel this try to recent Oops,

00:10:34.240 --> 00:10:34.950
my bad.

00:10:34.950 --> 00:10:38.950
We have a debug point right here.

00:10:38.950 --> 00:10:41.200
Let's get it off this.

00:10:41.200 --> 00:10:43.890
Continue with our execution,

00:10:43.890 --> 00:10:54.730
and we got 200.

00:10:54.730 --> 00:10:54.990
Okay,

00:10:54.990 --> 00:10:57.960
That means file is available for download.

00:10:57.960 --> 00:11:01.000
And here is the text Inside that fire.

00:11:01.000 --> 00:11:03.400
You can also try the same,

00:11:03.400 --> 00:11:06.500
but in age or any other file formats.

00:11:06.500 --> 00:11:11.630
I'm going to make this court available for you to download so that you can take a look at

00:11:11.630 --> 00:11:11.930
it,

00:11:11.930 --> 00:11:13.880
make some changes and experiment with it.

00:11:13.880 --> 00:11:15.510
I hope it makes sense.

