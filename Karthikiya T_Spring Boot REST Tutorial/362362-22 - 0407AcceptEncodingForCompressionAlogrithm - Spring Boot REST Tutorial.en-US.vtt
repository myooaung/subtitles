WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.750
Let's talk about compression mechanisms real quick.

00:00:04.750 --> 00:00:06.250
In our case,

00:00:06.250 --> 00:00:12.510
our application is running in the same Horst and even the response his Justin few lines.

00:00:12.510 --> 00:00:13.750
However,

00:00:13.750 --> 00:00:15.550
in real time scenario,

00:00:15.550 --> 00:00:18.660
the summer might be reciting in different geographical location,

00:00:18.660 --> 00:00:21.740
and even the response can be in hundreds off lines,

00:00:21.740 --> 00:00:27.890
in which case it takes a vile for the response to be transmitted over the Internet to the

00:00:27.890 --> 00:00:28.550
client.

00:00:28.550 --> 00:00:31.370
And if there are millions off request to the server,

00:00:31.370 --> 00:00:35.550
it's going to cost a lot of bandwidth and delay in response.

00:00:35.550 --> 00:00:37.590
You know that that just this issue,

00:00:37.590 --> 00:00:40.050
we have compression mechanism in place.

00:00:40.050 --> 00:00:42.160
Let me show you what I mean.

00:00:42.160 --> 00:00:48.350
If you go to the network stab,

00:00:48.350 --> 00:00:52.450
you should be having same tool in chrome as ville,

00:00:52.450 --> 00:00:54.550
and I'm guessing that you're a better off it.

00:00:54.550 --> 00:00:57.820
To take a look at the response,

00:00:57.820 --> 00:01:01.840
you would notice a request header that says,

00:01:01.840 --> 00:01:08.220
except and according and specifies a couple off and courting mechanisms are including

00:01:08.220 --> 00:01:13.820
algorithms that the client is expecting server to use in order to compress the response.

00:01:13.820 --> 00:01:14.390
So,

00:01:14.390 --> 00:01:15.450
using this header,

00:01:15.450 --> 00:01:22.490
Silver is going to pick one of these algorithms in order to compress the response so that

00:01:22.490 --> 00:01:27.390
when the response reaches to the client plant is going to use the same old guard.

00:01:27.390 --> 00:01:27.710
Um,

00:01:27.710 --> 00:01:34.350
in order to decode the response and render back the media in this manner,

00:01:34.350 --> 00:01:38.460
it's all taken.

00:01:38.460 --> 00:01:39.510
Get automatically.

00:01:39.510 --> 00:01:43.150
You don't have to had any additional head us or anything of that sort.

