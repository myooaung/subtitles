WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.550
there are certain challenges with traditional monolithic applications.

00:00:04.550 --> 00:00:06.150
The stock about a few of them.

00:00:06.150 --> 00:00:12.840
Imagine that there is another company who are providing fried booking services so the

00:00:12.840 --> 00:00:15.370
customers can book flights etcetera.

00:00:15.370 --> 00:00:19.680
What they found out is that they also needed some other information,

00:00:19.680 --> 00:00:22.890
depending on which they would schedule flights.

00:00:22.890 --> 00:00:24.470
At the same time,

00:00:24.470 --> 00:00:28.970
they don't want to spend a lot of money hiring people to do all of that service for them.

00:00:28.970 --> 00:00:29.620
Instead,

00:00:29.620 --> 00:00:35.590
what they want to do is to use ourselves by paying a certain amount so they will approach

00:00:35.590 --> 00:00:37.590
us and we talk about a deal.

00:00:37.590 --> 00:00:38.300
And finally,

00:00:38.300 --> 00:00:42.150
we agree with the contract to use our service from that point on.

00:00:42.150 --> 00:00:47.230
What they will do is they will send yesterday Pericles from their application from the

00:00:47.230 --> 00:00:51.460
business logic to our service to extract the weather information.

00:00:51.460 --> 00:00:55.750
But our application is designed in such way we won't be sending the data,

00:00:55.750 --> 00:01:00.450
but we'll send data along with their Stammel or the presentation logic.

00:01:00.450 --> 00:01:02.750
This is clearly a problem.

00:01:02.750 --> 00:01:07.180
The flight booking service is expecting our service to send data,

00:01:07.180 --> 00:01:10.710
but we're not only sending data but also the presentation logic.

00:01:10.710 --> 00:01:13.740
This is bad for two good reasons.

00:01:13.740 --> 00:01:14.660
Number one.

00:01:14.660 --> 00:01:19.840
The fried booking service does not have knowledge on how to understand HTML.

00:01:19.840 --> 00:01:25.270
So they have to introduce some additional modules or write additional code to chop off all

00:01:25.270 --> 00:01:28.000
the stimulus tax and extract the data from it.

00:01:28.000 --> 00:01:30.100
And another problem is,

00:01:30.100 --> 00:01:31.740
even if they're able to do so,

00:01:31.740 --> 00:01:34.050
presentation logic will not remain same.

00:01:34.050 --> 00:01:35.160
It will keep changing.

00:01:35.160 --> 00:01:37.140
So when we make changes in our esteem,

00:01:37.140 --> 00:01:37.680
l cord,

00:01:37.680 --> 00:01:39.470
it's also going to break their court,

00:01:39.470 --> 00:01:41.930
and so their application will not function as well.

00:01:41.930 --> 00:01:43.650
So this is one problem.

00:01:43.650 --> 00:01:46.470
Another problem is,

00:01:46.470 --> 00:01:48.700
if you think about a website like Amazon,

00:01:48.700 --> 00:01:51.790
you can't expect Amazon to be hosted on a single server.

00:01:51.790 --> 00:01:52.400
I mean,

00:01:52.400 --> 00:01:57.160
what if there are not enough resources to handle the traffic awarded the silver runs off

00:01:57.160 --> 00:02:01.900
this space are What if there is a bug in the app that's going to cause the end?

00:02:01.900 --> 00:02:05.650
That application to crash and no one would be able to access the website,

00:02:05.650 --> 00:02:07.710
so instead,

00:02:07.710 --> 00:02:12.530
their application is split up into multiple competent and each component would be reciting

00:02:12.530 --> 00:02:14.850
in an independent instance off server,

00:02:14.850 --> 00:02:18.420
and each instance would handle a particular task,

00:02:18.420 --> 00:02:22.990
especially with Microsoft's architecture and when you spit out the application in this

00:02:22.990 --> 00:02:23.590
manner,

00:02:23.590 --> 00:02:27.770
they often need to communicate each other in order to perform a business task.

00:02:27.770 --> 00:02:29.190
But unfortunately,

00:02:29.190 --> 00:02:31.390
the way we're deploying our applications,

00:02:31.390 --> 00:02:36.080
they won't be able to talk to each other because we're not sending the data were

00:02:36.080 --> 00:02:38.340
communicating with data with presentation,

00:02:38.340 --> 00:02:40.680
and that's not feasible at all.

00:02:40.680 --> 00:02:42.550
So this is clearly a problem.

00:02:42.550 --> 00:02:47.960
Another problem arises when you talk about single page applications.

00:02:47.960 --> 00:02:52.500
If you don't have what single page application here is the simplest definition off the same

00:02:52.500 --> 00:02:52.500
.

00:02:52.500 --> 00:02:58.950
A single page application is an application that does not need a page reload when the user

00:02:58.950 --> 00:03:01.300
is interacting with the application on the website.

00:03:01.300 --> 00:03:05.820
Here are some of the examples off single paid applications A stock about Gmail,

00:03:05.820 --> 00:03:06.600
for instance.

00:03:06.600 --> 00:03:08.560
The moment you log into Gmail,

00:03:08.560 --> 00:03:10.820
you're going to see all the emails subjects,

00:03:10.820 --> 00:03:13.010
and when you click on one of the subjects,

00:03:13.010 --> 00:03:14.810
all the content would come up.

00:03:14.810 --> 00:03:18.770
But the page reload does not happen as soon as you click the subject.

00:03:18.770 --> 00:03:20.040
Similarly,

00:03:20.040 --> 00:03:21.260
with the Google Dogs,

00:03:21.260 --> 00:03:24.860
when you're navigating through the entire Google Docks application,

00:03:24.860 --> 00:03:28.050
it does not cause pace to be loaded.

00:03:28.050 --> 00:03:31.500
Only that particular section which you wanted to access will be populated.

00:03:31.500 --> 00:03:34.190
Twitter is also a single page application.

00:03:34.190 --> 00:03:39.660
You can click on multiple links that are available and Twitter and use all its features

00:03:39.660 --> 00:03:41.680
without causing pace to be lorded.

00:03:41.680 --> 00:03:43.570
Same is the case with Instagram.

00:03:43.570 --> 00:03:45.150
The moment you click on image,

00:03:45.150 --> 00:03:47.200
it does not cause players to be reloaded.

00:03:47.200 --> 00:03:50.020
Same as guest with Netflix there many such examples,

00:03:50.020 --> 00:03:51.150
including Facebook.

00:03:51.150 --> 00:03:57.970
Facebook is also partially single bit application and basically it's not about Page not

00:03:57.970 --> 00:03:58.850
getting reloaded.

00:03:58.850 --> 00:04:04.190
The idea is that it will improve the performance off the application and gives the

00:04:04.190 --> 00:04:11.700
batteries or experience Single payer applications are possible because off the way it works

00:04:11.700 --> 00:04:11.700
,

00:04:11.700 --> 00:04:13.200
we never use the visits.

00:04:13.200 --> 00:04:18.640
The website a get request will be sent to the server so that would then respond back with

00:04:18.640 --> 00:04:19.480
all the esteem.

00:04:19.480 --> 00:04:20.630
Lt is his jowls prep,

00:04:20.630 --> 00:04:21.370
etcetera.

00:04:21.370 --> 00:04:23.170
And from that point on,

00:04:23.170 --> 00:04:26.350
for all these interactions with the website,

00:04:26.350 --> 00:04:32.020
the silver would only send back the data without the presentation logic Because so where

00:04:32.020 --> 00:04:33.860
has all the injected the javascript,

00:04:33.860 --> 00:04:34.820
which is a client court,

00:04:34.820 --> 00:04:37.790
essentially like angler reactor BJ s,

00:04:37.790 --> 00:04:42.220
which is handling the presentation part but taking the data anyway,

00:04:42.220 --> 00:04:43.560
that's a topical future.

00:04:43.560 --> 00:04:47.150
But I hope you understood how single page application is working,

00:04:47.150 --> 00:04:50.250
but with our traditional monolithic application.

00:04:50.250 --> 00:04:56.060
So where is going to just respond back with SD Emma making single page applications harder

00:04:56.060 --> 00:04:56.870
to implement?

00:04:56.870 --> 00:04:59.950
So this is clearly yet another problem.

00:04:59.950 --> 00:05:04.840
We will take a look at how we can bring solutions to these problems with,

00:05:04.840 --> 00:05:06.350
of course Web services.

