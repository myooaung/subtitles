WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.070
Let's talk about content negotiation,

00:00:03.070 --> 00:00:04.860
industrial Web services.

00:00:04.860 --> 00:00:08.830
We already know that in case of rest,

00:00:08.830 --> 00:00:11.020
API I decline can be anything.

00:00:11.020 --> 00:00:13.170
It could be a JavaScript application.

00:00:13.170 --> 00:00:15.110
It could be a mobile application,

00:00:15.110 --> 00:00:18.300
or it can even be traditional embassy application.

00:00:18.300 --> 00:00:21.300
In case off traditional embassy application,

00:00:21.300 --> 00:00:23.250
the brother would send the request,

00:00:23.250 --> 00:00:28.780
and it would expect esteem allows the response from the server in order for it to render on

00:00:28.780 --> 00:00:29.460
the browser.

00:00:29.460 --> 00:00:31.440
But in other cases,

00:00:31.440 --> 00:00:33.280
the former can be different.

00:00:33.280 --> 00:00:34.820
For example,

00:00:34.820 --> 00:00:37.910
if you're talking about adjusted application,

00:00:37.910 --> 00:00:43.150
it would expect this over to respond back in Nader XML or in Jason format.

00:00:43.150 --> 00:00:48.850
So it's not specific what kind of format that the client needs.

00:00:48.850 --> 00:00:50.460
In this case,

00:00:50.460 --> 00:00:54.500
it may not be ideal to configure a specific format on the server side.

00:00:54.500 --> 00:00:55.430
Instead,

00:00:55.430 --> 00:01:00.810
we want to leave that option to the client to specify what kind of format it is expecting

00:01:00.810 --> 00:01:01.750
from the silver.

00:01:01.750 --> 00:01:03.420
And at the same time,

00:01:03.420 --> 00:01:08.510
server may not be capable off sending in any random format that ever existed.

00:01:08.510 --> 00:01:12.450
So there are certain limitations on the server side as well.

00:01:12.450 --> 00:01:17.690
If the train's request for a format that silver doesn't support so we would just simply

00:01:17.690 --> 00:01:19.580
respond back with an error.

00:01:19.580 --> 00:01:23.640
So this mechanism is called content negotiation.

00:01:23.640 --> 00:01:26.920
So how will this over know?

00:01:26.920 --> 00:01:29.950
What can a format that the client is requesting for?

00:01:29.950 --> 00:01:30.460
Well,

00:01:30.460 --> 00:01:32.590
there are three different mechanisms for that.

00:01:32.590 --> 00:01:34.150
The first off,

00:01:34.150 --> 00:01:37.090
which is so called part extension,

00:01:37.090 --> 00:01:42.600
would just simply means that the client would specify the format as part of the part

00:01:42.600 --> 00:01:43.420
extension,

00:01:43.420 --> 00:01:45.750
an example of which can be seen in here.

00:01:45.750 --> 00:01:47.310
In this case,

00:01:47.310 --> 00:01:51.610
the client is requesting list off products in the form it off PdF,

00:01:51.610 --> 00:01:57.170
and so we would be able to determine that by taking a look at this extension.

00:01:57.170 --> 00:02:01.000
If the server supports pdf format,

00:02:01.000 --> 00:02:04.390
then the server would respond back with PdF as a response.

00:02:04.390 --> 00:02:05.510
Similarly,

00:02:05.510 --> 00:02:08.750
the trying can request in Jason Format,

00:02:08.750 --> 00:02:14.380
in which case there would respond back in the format off Jason.

00:02:14.380 --> 00:02:18.460
Another approach is by using a Ural Param Eter,

00:02:18.460 --> 00:02:23.540
an example of which can be seen in here pretty much same as the previous one.

00:02:23.540 --> 00:02:30.660
Except we're not going through the Part Extension institute include a your Param Eter with

00:02:30.660 --> 00:02:31.660
the name format.

00:02:31.660 --> 00:02:32.820
This is customizable,

00:02:32.820 --> 00:02:33.360
by the way,

00:02:33.360 --> 00:02:35.650
and we'll take a look at it in our example.

00:02:35.650 --> 00:02:37.270
So in this case,

00:02:37.270 --> 00:02:43.850
client is requesting for the PDF format and here Plant is requesting for XML format.

00:02:43.850 --> 00:02:48.950
Yet another approach is to include a history dp axa Petr,

00:02:48.950 --> 00:02:50.260
obviously,

00:02:50.260 --> 00:02:51.420
Gandhi's browser.

00:02:51.420 --> 00:02:53.380
In order to include Scdp headers,

00:02:53.380 --> 00:02:58.050
you have to use the to like postman our JavaScript in order to do so.

00:02:58.050 --> 00:03:03.050
But essentially watching it to do is to include a property as part of this today,

00:03:03.050 --> 00:03:06.740
beheaders and the name of property is,

00:03:06.740 --> 00:03:09.040
except which does the server,

00:03:09.040 --> 00:03:12.510
what kind of format plant is willing to accept,

00:03:12.510 --> 00:03:18.270
and the value off it is going to be the format that the client is willing to consume.

00:03:18.270 --> 00:03:20.510
Once we take a look at an example,

00:03:20.510 --> 00:03:22.150
you'll understand this better.

00:03:22.150 --> 00:03:24.750
Let's talk about message.

00:03:24.750 --> 00:03:25.910
Can voters first of all,

00:03:25.910 --> 00:03:26.950
what is a message?

00:03:26.950 --> 00:03:28.580
A message in Web services,

00:03:28.580 --> 00:03:29.430
simply a request,

00:03:29.430 --> 00:03:30.250
our response,

00:03:30.250 --> 00:03:33.570
having information to process or retrieve the data?

00:03:33.570 --> 00:03:34.450
I mean,

00:03:34.450 --> 00:03:36.600
when you're sending as to directly from that line,

00:03:36.600 --> 00:03:38.420
that's called a message.

00:03:38.420 --> 00:03:40.200
It's called a request message,

00:03:40.200 --> 00:03:45.220
which will have enough information for the silver to process and respond back with

00:03:45.220 --> 00:03:45.800
something.

00:03:45.800 --> 00:03:50.040
And when silver response back with something as part of the yesterday.

00:03:50.040 --> 00:03:50.850
P response.

00:03:50.850 --> 00:03:52.890
It's called the response message,

00:03:52.890 --> 00:03:55.630
but how does this conversion happen?

00:03:55.630 --> 00:03:56.110
I mean,

00:03:56.110 --> 00:04:01.050
you've seen in our crowd example that we're able to include Jason Data as part of the

00:04:01.050 --> 00:04:01.650
request,

00:04:01.650 --> 00:04:08.720
and the solar is able to convert that Jason Data into a job a model object in order for it

00:04:08.720 --> 00:04:09.650
to process.

00:04:09.650 --> 00:04:11.870
How does that conversion happen?

00:04:11.870 --> 00:04:12.650
Well,

00:04:12.650 --> 00:04:14.950
that is with help off this converters.

00:04:14.950 --> 00:04:17.480
In case off Jason,

00:04:17.480 --> 00:04:20.250
we have a specific on motor for that.

00:04:20.250 --> 00:04:21.160
Similar.

00:04:21.160 --> 00:04:22.120
We have a converted,

00:04:22.120 --> 00:04:22.910
for example.

00:04:22.910 --> 00:04:23.840
Similarly,

00:04:23.840 --> 00:04:25.850
for all the other formats,

00:04:25.850 --> 00:04:34.860
marshaling would just simply mean the process of converting the Jason or XML or

00:04:34.860 --> 00:04:37.810
representation to Equal and Java object.

00:04:37.810 --> 00:04:44.210
And we've seen this example when they're trying to send the Jason data from the client and

00:04:44.210 --> 00:04:49.730
sort off abated at record on the server side and the opposite off it is called on

00:04:49.730 --> 00:04:50.350
marshalling,

00:04:50.350 --> 00:04:56.020
which assembled the process of converting job object back to the representation.

00:04:56.020 --> 00:04:56.680
I mean,

00:04:56.680 --> 00:04:59.450
when the controller is returning a moral object,

00:04:59.450 --> 00:05:05.250
somebody is trying to represent that object in the client requester format like Jason or

00:05:05.250 --> 00:05:05.890
XML.

00:05:05.890 --> 00:05:08.890
That mechanism is called on marshalling

