WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.500
Okay,

00:00:00.500 --> 00:00:03.450
let's talk about Web services with soap protocol.

00:00:03.450 --> 00:00:05.590
We've seen that too.

00:00:05.590 --> 00:00:06.480
Services,

00:00:06.480 --> 00:00:11.140
which may be written on two different languages or technologies and maybe running on two

00:00:11.140 --> 00:00:17.040
different platforms cannot actually talk to each other because they just cannot call every

00:00:17.040 --> 00:00:20.150
more Java method on your application is written using,

00:00:20.150 --> 00:00:20.610
say,

00:00:20.610 --> 00:00:22.790
PHP or Darknet Technologies.

00:00:22.790 --> 00:00:29.350
So the underlying problem is we don't have a common language that these two entities can

00:00:29.350 --> 00:00:30.210
understand.

00:00:30.210 --> 00:00:35.070
If we can introduce a language that these two entities can understand an exchange data

00:00:35.070 --> 00:00:37.850
between them that would solve our problem.

00:00:37.850 --> 00:00:42.690
So the language off choice is XML markup language.

00:00:42.690 --> 00:00:46.600
XML is just bunch off tax somewhat like HTML,

00:00:46.600 --> 00:00:50.970
and we can define our own standards and at a very high level.

00:00:50.970 --> 00:00:52.650
This is how it's going to work,

00:00:52.650 --> 00:00:55.750
going back to our example on fried booking service,

00:00:55.750 --> 00:01:00.690
where it tries to access the weather forecast service to maybe extract the current

00:01:00.690 --> 00:01:01.330
temperature,

00:01:01.330 --> 00:01:02.690
depending on the location,

00:01:02.690 --> 00:01:05.020
assuming that the flight booking service.

00:01:05.020 --> 00:01:09.150
So the client is written using BH pure .net Technologies,

00:01:09.150 --> 00:01:12.380
and it tries to access a remote matter of Java,

00:01:12.380 --> 00:01:16.860
which is reciting on a different host our remote machine.

00:01:16.860 --> 00:01:21.320
This is how it's going to work you as a dollop er off PHP.

00:01:21.320 --> 00:01:27.690
You're going to use a PHP library in order to send the request so you would send the battle

00:01:27.690 --> 00:01:29.850
meters or the method name etcetera.

00:01:29.850 --> 00:01:36.680
And this underlying library will take care of converting that request into Equal Int XML

00:01:36.680 --> 00:01:37.180
file,

00:01:37.180 --> 00:01:42.530
which will then be transmitted over the Internet to the remote machine on the remote side.

00:01:42.530 --> 00:01:45.050
You would have a library written using Java,

00:01:45.050 --> 00:01:46.900
which will take care off,

00:01:46.900 --> 00:01:51.860
passing all the XML data and making call to the Java method.

00:01:51.860 --> 00:01:54.100
And whatever the value that the Java mattered,

00:01:54.100 --> 00:02:00.030
returns would again be robbed inside XML tags and would be transmitted over the Internet

00:02:00.030 --> 00:02:01.100
back to the client,

00:02:01.100 --> 00:02:07.050
which will again be received by the library and would be translated back to technology

00:02:07.050 --> 00:02:09.150
specific implementation.

00:02:09.150 --> 00:02:10.380
So,

00:02:10.380 --> 00:02:10.950
ultimately,

00:02:10.950 --> 00:02:13.290
your Babel toe make a call.

00:02:13.290 --> 00:02:14.970
The remote method,

00:02:14.970 --> 00:02:20.640
which was written using different technology than to that off the client and you would be

00:02:20.640 --> 00:02:25.410
able to receive the data as a response back to the client.

00:02:25.410 --> 00:02:26.310
Now,

00:02:26.310 --> 00:02:27.350
in this case,

00:02:27.350 --> 00:02:33.670
the weather Forecast Service is called a Web service because it is essentially a service

00:02:33.670 --> 00:02:39.560
available over the gap and somebody can access it over the Internet like the fried booking

00:02:39.560 --> 00:02:41.050
services trying to access it.

00:02:41.050 --> 00:02:44.670
But we still have a lot of problems here.

00:02:44.670 --> 00:02:45.310
I mean,

00:02:45.310 --> 00:02:49.890
you can't just send any random XML and expect the remote mission to understand it.

00:02:49.890 --> 00:02:56.420
You have to follow certain standards are you have toe follow certain standard tags in order

00:02:56.420 --> 00:02:57.620
texting data,

00:02:57.620 --> 00:03:03.010
and all these entities who want to be part of the Web services would stick to that standard

00:03:03.010 --> 00:03:03.010
.

00:03:03.010 --> 00:03:08.930
And that standard is nothing but soap are simple object access protocol,

00:03:08.930 --> 00:03:13.820
which are just bunch off rules that needs to be followed by all these entities in order to

00:03:13.820 --> 00:03:14.790
exchange data.

00:03:14.790 --> 00:03:16.050
In simple terms,

00:03:16.050 --> 00:03:17.550
it's a messaging protocol,

00:03:17.550 --> 00:03:23.390
a standard as we off exchanging data using example between these entities or services.

00:03:23.390 --> 00:03:25.320
In addition to all this,

00:03:25.320 --> 00:03:28.850
the plane also needs to know how rats is the Web service.

00:03:28.850 --> 00:03:30.190
What are the matter?

00:03:30.190 --> 00:03:31.750
Perimeters that are expected?

00:03:31.750 --> 00:03:33.900
What is the return value that it can expect?

00:03:33.900 --> 00:03:34.740
Etcetera.

00:03:34.740 --> 00:03:40.730
We have to use wisdom or Web service description language in order to define all those

00:03:40.730 --> 00:03:41.250
stuff.

00:03:41.250 --> 00:03:47.190
So here is that our format office soap mess age is the same format which you need to follow

00:03:47.190 --> 00:03:47.190
.

00:03:47.190 --> 00:03:49.150
For both request and response,

00:03:49.150 --> 00:03:52.100
you have to have the route tag,

00:03:52.100 --> 00:03:53.230
which is envelope.

00:03:53.230 --> 00:03:56.680
It's mandatory to start your maximal with this tag.

00:03:56.680 --> 00:03:59.110
And when I say you have to start,

00:03:59.110 --> 00:04:01.360
you don't really have to do that as a developer.

00:04:01.360 --> 00:04:04.750
This will all be taken care by the underlying library.

00:04:04.750 --> 00:04:07.830
You don't get to create the request maximal in this format,

00:04:07.830 --> 00:04:11.380
unless you're testing seem tohave the envelope as root tag.

00:04:11.380 --> 00:04:15.730
It would have typically bunch off child tax the first off,

00:04:15.730 --> 00:04:18.180
which is an optional header tag,

00:04:18.180 --> 00:04:21.510
wherein you could include some authentication information.

00:04:21.510 --> 00:04:25.890
This is optional and you need to have a mandatory body tag.

00:04:25.890 --> 00:04:31.990
This is where you were include all the information required to call the remote procedure or

00:04:31.990 --> 00:04:33.450
to send back the response.

00:04:33.450 --> 00:04:34.120
You know,

00:04:34.120 --> 00:04:35.430
flight booking service.

00:04:35.430 --> 00:04:39.550
If you want to send the request from the flight booking service to the remote method,

00:04:39.550 --> 00:04:43.910
the body would include the information to call the more procedure,

00:04:43.910 --> 00:04:46.690
including the perimeters that you want to send.

00:04:46.690 --> 00:04:51.940
So maybe you would want to call get current temperature and you would pass string as a

00:04:51.940 --> 00:04:52.700
perimeter.

00:04:52.700 --> 00:04:55.710
Then you can do so in this case.

00:04:55.710 --> 00:05:01.060
What we're looking at is the response received back from the web service back to the client

00:05:01.060 --> 00:05:01.060
.

00:05:01.060 --> 00:05:07.760
So here we're trying toe send the name of the location and the current temperature that it

00:05:07.760 --> 00:05:09.050
is trying to return.

00:05:09.050 --> 00:05:11.510
But still,

00:05:11.510 --> 00:05:13.700
this is not the complete soap architecture.

00:05:13.700 --> 00:05:16.050
It is way more complex than this.

00:05:16.050 --> 00:05:23.620
And this was just a very high level view how far it's going to work in case if you're

00:05:23.620 --> 00:05:28.650
curious how it exactly works in case offspring ws our spring Web services.

00:05:28.650 --> 00:05:34.890
Here are the sequins off steps in to take care in order to create a Web service and expose

00:05:34.890 --> 00:05:35.950
it over the Internet,

00:05:35.950 --> 00:05:42.190
you would force create so called on xsd file and it looks something like this,

00:05:42.190 --> 00:05:45.270
and this would define the information about the perimeters.

00:05:45.270 --> 00:05:47.880
Expected the expected return value,

00:05:47.880 --> 00:05:48.580
etcetera.

00:05:48.580 --> 00:05:51.340
So you have this get temperature request,

00:05:51.340 --> 00:05:52.150
for instance,

00:05:52.150 --> 00:05:58.510
and you're expecting to receive location as a perimeter to the remote mattered,

00:05:58.510 --> 00:06:04.230
which is off type string and similarly went to send back the response,

00:06:04.230 --> 00:06:07.650
which is the temperature in the form off string.

00:06:07.650 --> 00:06:10.230
And using this XML document,

00:06:10.230 --> 00:06:12.270
we're going to use the tool called Jack's B,

00:06:12.270 --> 00:06:16.230
which will be a maven plug in our greater plugging,

00:06:16.230 --> 00:06:18.980
depending on the project management tool,

00:06:18.980 --> 00:06:26.370
your using who used this plug in in order to create doing objects using this XSD file.

00:06:26.370 --> 00:06:29.040
This will be done with that plug in.

00:06:29.040 --> 00:06:30.800
And then we'll create an end point,

00:06:30.800 --> 00:06:35.750
which is essentially a place where he would receive the request and process it kind off

00:06:35.750 --> 00:06:36.850
like a controller.

00:06:36.850 --> 00:06:38.880
And it would start off,

00:06:38.880 --> 00:06:42.560
respond back with some written value,

00:06:42.560 --> 00:06:46.750
and inside here would use all those domain objects.

00:06:46.750 --> 00:06:48.250
And then,

00:06:48.250 --> 00:06:48.980
finally,

00:06:48.980 --> 00:06:55.990
spring Ws will create so called a versatile file that I talked about isn't the sexes do

00:06:55.990 --> 00:07:00.960
file and would make it available over the Internet on the other end?

00:07:00.960 --> 00:07:02.900
Whoever wants to consume the service,

00:07:02.900 --> 00:07:03.580
like,

00:07:03.580 --> 00:07:04.440
in our case,

00:07:04.440 --> 00:07:08.650
tried booking service willing to consume the weather forecast service,

00:07:08.650 --> 00:07:13.900
we will again used to Jack's be plug in in order to create the domain classes,

00:07:13.900 --> 00:07:19.940
using the video file that was published over the Internet and then using those request and

00:07:19.940 --> 00:07:24.580
response domain classes who would send the request and receive the response?

00:07:24.580 --> 00:07:25.400
Well,

00:07:25.400 --> 00:07:26.710
this is at a very high level.

00:07:26.710 --> 00:07:33.320
Down the line will have some examples that will understand even better So in the end,

00:07:33.320 --> 00:07:37.990
we may have all these advantageous by creating Web services with soap protocol,

00:07:37.990 --> 00:07:40.850
the first of which is interoperability,

00:07:40.850 --> 00:07:45.650
meaning that regardless off the technology is in which your service is written,

00:07:45.650 --> 00:07:51.740
every service can actually talk to each other using soap protocol and extend data between

00:07:51.740 --> 00:07:52.780
them like this,

00:07:52.780 --> 00:07:54.050
another that will just talked,

00:07:54.050 --> 00:07:58.550
the second of which is Soap uses his tribute protocol,

00:07:58.550 --> 00:08:00.700
and hence there won't be any shoe.

00:08:00.700 --> 00:08:04.020
With the fire war going back to our PC example,

00:08:04.020 --> 00:08:04.600
for instance,

00:08:04.600 --> 00:08:05.990
or remote procedural call,

00:08:05.990 --> 00:08:13.250
you have to open a second report and oftentimes firearm actually block that traffic.

00:08:13.250 --> 00:08:18.750
So with soap since we're using is to depict protocol in order to transmit the data.

00:08:18.750 --> 00:08:24.020
There's going to be no problem with the firewall because Hester the report is always open

00:08:24.020 --> 00:08:25.500
and Fire world will not stop it.

00:08:25.500 --> 00:08:27.410
In other words,

00:08:27.410 --> 00:08:36.080
the message that I talked about would be wrapped with extra DP header and body inside the

00:08:36.080 --> 00:08:37.750
body would have this message.

00:08:37.750 --> 00:08:43.190
Soap also works with other protocols like FTP,

00:08:43.190 --> 00:08:44.750
SMTP or TCP,

00:08:44.750 --> 00:08:49.300
in order to communicate within the network and for this very reason.

00:08:49.300 --> 00:08:55.490
For all the advantages that I talked about soap is a better alternator compact toe RPC when

00:08:55.490 --> 00:08:59.150
it comes to single page applications or distributed systems.

00:08:59.150 --> 00:08:59.870
Well,

00:08:59.870 --> 00:09:00.850
that being said,

00:09:00.850 --> 00:09:05.760
there are a lot of disadvantages when you're trying to access up services with soap

00:09:05.760 --> 00:09:06.440
protocol,

00:09:06.440 --> 00:09:10.550
and we'll talk about them once after we cover rest architecture.

