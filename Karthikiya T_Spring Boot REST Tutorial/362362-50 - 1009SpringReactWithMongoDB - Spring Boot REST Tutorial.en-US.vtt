WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.680
okay,

00:00:00.680 --> 00:00:01.100
so far,

00:00:01.100 --> 00:00:05.530
I'm assuming that you have a fair bit off understanding on how reactor program and walks in

00:00:05.530 --> 00:00:06.850
case our spring framework.

00:00:06.850 --> 00:00:08.760
And so with that in mind,

00:00:08.760 --> 00:00:14.180
let's take a look at how we can create a complete reactor application from scratch using

00:00:14.180 --> 00:00:17.850
spring boot and with Mongo DB as a data source,

00:00:17.850 --> 00:00:23.550
we're going to be creating an application that performs basic crowd operations.

00:00:23.550 --> 00:00:24.980
And for this purpose,

00:00:24.980 --> 00:00:28.460
I'm not expecting you to have any knowledge or longer DB.

00:00:28.460 --> 00:00:32.010
So even if you haven't had an exposure to using mongo DB,

00:00:32.010 --> 00:00:36.830
he should be able to follow this tutorial at a high level.

00:00:36.830 --> 00:00:39.330
This is how our application is going to function.

00:00:39.330 --> 00:00:42.300
The client would send the request to the controller.

00:00:42.300 --> 00:00:47.870
The controller will have all those end points to perform crabbed operations and the

00:00:47.870 --> 00:00:52.470
controllable intern delegate the call to the service layer and then the service level,

00:00:52.470 --> 00:00:57.920
make a call to the repository which will doctor the database to perform that idea off

00:00:57.920 --> 00:00:58.810
operations.

00:00:58.810 --> 00:01:04.400
But the key thing to note here is we're going to be using react to libraries in the entire

00:01:04.400 --> 00:01:05.000
stack.

00:01:05.000 --> 00:01:10.440
And so what are the responses that we get from this competent are going to be a the flux

00:01:10.440 --> 00:01:11.800
Hormonal objects,

00:01:11.800 --> 00:01:16.560
depending on whether we requested for results set or one specific result.

00:01:16.560 --> 00:01:18.020
So for this purpose,

00:01:18.020 --> 00:01:23.250
we're going to be needing every actor library in place that is specific to the data store

00:01:23.250 --> 00:01:24.180
that we're using.

00:01:24.180 --> 00:01:26.050
Since I'm using mongo DB,

00:01:26.050 --> 00:01:31.390
we're going to be needing the Mongo DB reactor libraries offered by Spring Data Project,

00:01:31.390 --> 00:01:37.150
and we're going to use them in order to bringing all those reactor capabilities.

00:01:37.150 --> 00:01:41.600
So here are the steps that we're going to follow possible we're going to be creating a

00:01:41.600 --> 00:01:46.270
springboard project isn't Sprinkle suit with all those react to libraries,

00:01:46.270 --> 00:01:48.400
which includes react the Web as well.

00:01:48.400 --> 00:01:51.220
Last react a Mongo db dependence is.

00:01:51.220 --> 00:01:52.490
And in our example,

00:01:52.490 --> 00:01:54.940
we're not going to be using any external mongo db.

00:01:54.940 --> 00:01:58.370
And so I'm going to be using an embedded longer db.

00:01:58.370 --> 00:02:04.630
So we have to add a special dependency for that unfortunately embedded Mangane but doesn't

00:02:04.630 --> 00:02:11.210
come by default with all those react to dependencies as part of Step number three went to

00:02:11.210 --> 00:02:15.200
be creating a repository and with spring data,

00:02:15.200 --> 00:02:20.290
things are going to be very smooth because all we have to do is to declare an interface

00:02:20.290 --> 00:02:27.220
that extent a specific react to Mongo DB interface and that will do the job for us that's

00:02:27.220 --> 00:02:32.970
going to include all the crowd operations would be needing a non application and finally as

00:02:32.970 --> 00:02:34.320
part off step number four.

00:02:34.320 --> 00:02:36.080
We're going to create a controller,

00:02:36.080 --> 00:02:41.280
which will have all those end points to perform crowd operations.

00:02:41.280 --> 00:02:43.060
So we have get mapping,

00:02:43.060 --> 00:02:43.990
post mapping,

00:02:43.990 --> 00:02:47.650
put mapping and delete mapping methods to do that job for us.

00:02:47.650 --> 00:02:48.780
And,

00:02:48.780 --> 00:02:49.130
of course,

00:02:49.130 --> 00:02:51.330
we're also going to be needing at Poggio,

00:02:51.330 --> 00:02:57.920
which is product which will be used across all these components in order to sort of hold

00:02:57.920 --> 00:02:58.550
the data.

00:02:58.550 --> 00:03:05.160
And that corresponds to a document in manga DB are in rd BMS Stones that would correspond

00:03:05.160 --> 00:03:09.770
to an entity will understand what I mean once we take a look at a working example.

00:03:09.770 --> 00:03:15.730
So here are the dependence is that we're going to be needing we need the spring would start

00:03:15.730 --> 00:03:20.220
a Web flux to bring in all those react to libraries and capabilities.

00:03:20.220 --> 00:03:21.180
And then,

00:03:21.180 --> 00:03:22.750
since we're using mongo DB,

00:03:22.750 --> 00:03:27.450
we're going to be needing springboard starter date among really be react to library in

00:03:27.450 --> 00:03:29.550
order to come to get and react away.

00:03:29.550 --> 00:03:31.480
And finally,

00:03:31.480 --> 00:03:37.110
we're also going to be including the embedded mongo db with the dependency that you're

00:03:37.110 --> 00:03:38.150
seeing at the bottom.

00:03:38.150 --> 00:03:42.550
Here is the depository or the interface that will create.

00:03:42.550 --> 00:03:44.410
And as I mentioned before,

00:03:44.410 --> 00:03:50.390
this is all you need to do and this will suffice to perform crowd operations just have to

00:03:50.390 --> 00:03:56.160
create a random interface with add direct repository annotation that will make this a

00:03:56.160 --> 00:03:59.850
repository component and this must extend.

00:03:59.850 --> 00:04:01.130
They react.

00:04:01.130 --> 00:04:01.460
Oh,

00:04:01.460 --> 00:04:05.720
manga repository which accepts couple of gender para meters.

00:04:05.720 --> 00:04:06.240
In our case,

00:04:06.240 --> 00:04:08.670
it's going to be product and string,

00:04:08.670 --> 00:04:11.150
which is kind of like a unique ID and fire,

00:04:11.150 --> 00:04:16.240
and inside our controller will be having all those end points.

00:04:16.240 --> 00:04:21.100
And here's the cord that would help us retrieve all the products from the data source.

00:04:21.100 --> 00:04:28.050
So I'm actually making a call to define doll method off the depositary we had created well

00:04:28.050 --> 00:04:28.050
,

00:04:28.050 --> 00:04:28.550
ideally,

00:04:28.550 --> 00:04:32.100
would have a service layer and you would make a call to the service layer.

00:04:32.100 --> 00:04:34.310
But since our application is spread,

00:04:34.310 --> 00:04:39.520
your simple I want to reduce the complexity and I see there is no need off introducing a

00:04:39.520 --> 00:04:40.350
service layer,

00:04:40.350 --> 00:04:42.850
and we can just talk to the depositor layer.

00:04:42.850 --> 00:04:43.930
But ofcourse,

00:04:43.930 --> 00:04:47.500
India time projects would have a service layer that in General Doctor,

00:04:47.500 --> 00:04:50.000
the depository are the data tear.

00:04:50.000 --> 00:04:54.620
So I'm trying to retrieve all the products available in the data source.

00:04:54.620 --> 00:04:56.170
Are manga deep in our case?

00:04:56.170 --> 00:05:00.850
And I'm returning a flux object because it's going to be results set.

00:05:00.850 --> 00:05:04.880
If you're using a nonreactive mongo DB library,

00:05:04.880 --> 00:05:08.380
then that would not have been returning the flux object.

00:05:08.380 --> 00:05:11.610
And so that would introduce all the blocking operations.

00:05:11.610 --> 00:05:16.360
And here is our read mattered and for you To understand this,

00:05:16.360 --> 00:05:19.850
you must have some knowledge on Lambda Expressions and Stream.

00:05:19.850 --> 00:05:22.480
FBI introduced us part of job eight.

00:05:22.480 --> 00:05:25.940
But here is what we're trying to do.

00:05:25.940 --> 00:05:26.620
Initial.

00:05:26.620 --> 00:05:30.480
We're trying to retrieve a product with a given I D,

00:05:30.480 --> 00:05:33.340
which will be sent as part of the path variable.

00:05:33.340 --> 00:05:36.340
So that would be part of the U.

00:05:36.340 --> 00:05:36.540
R.

00:05:36.540 --> 00:05:37.250
Itself.

00:05:37.250 --> 00:05:42.890
And using that identify where we're trying to find that particular product from the data

00:05:42.890 --> 00:05:45.260
source and using the map mattered.

00:05:45.260 --> 00:05:51.260
I'm trying to transform that object by wrapping it with a response ended the object,

00:05:51.260 --> 00:05:53.590
and here,

00:05:53.590 --> 00:05:59.410
whatever the value that gets returned by calling this map that find my i d would be passed

00:05:59.410 --> 00:06:03.360
as a para meter and would be wrapped with the response into the object.

00:06:03.360 --> 00:06:06.440
And here I'm trying to set the status as okay.

00:06:06.440 --> 00:06:09.330
That means when the client is response,

00:06:09.330 --> 00:06:15.190
the extra demonstrators would be to under okay with the response body as this object.

00:06:15.190 --> 00:06:18.190
In case if we don't find that particular product,

00:06:18.190 --> 00:06:21.070
then we want to populate some default information.

00:06:21.070 --> 00:06:22.090
In this case,

00:06:22.090 --> 00:06:26.370
I'm trying to set the response entity to not found which would correspond to,

00:06:26.370 --> 00:06:32.210
for or for not for better off yesterday be the create method that corresponds to the post

00:06:32.210 --> 00:06:32.750
mapping.

00:06:32.750 --> 00:06:37.540
We would send a Jason Daito as input,

00:06:37.540 --> 00:06:41.100
which we're trying to read with the sanitation because body.

00:06:41.100 --> 00:06:47.990
And then I'm trying to save the object by using one of the methods available as part off

00:06:47.990 --> 00:06:54.070
the depository which would written a more No object would just got saved.

00:06:54.070 --> 00:07:01.510
And since the same matter is going to return only one instance or one object we're using

00:07:01.510 --> 00:07:02.970
Mortal Nora Flux.

00:07:02.970 --> 00:07:08.240
And here is the code to perform update operation.

00:07:08.240 --> 00:07:16.030
So we have put mapping and we're going to be sending the identifier off the product to

00:07:16.030 --> 00:07:17.800
which we want to perform the update.

00:07:17.800 --> 00:07:23.340
Along with that as part of the request body were also sending the product Jason,

00:07:23.340 --> 00:07:26.950
which will become water and equal and product object.

00:07:26.950 --> 00:07:33.440
And in here we're trying toe retrieve a product with that particular I d.

00:07:33.440 --> 00:07:35.370
And inside this method,

00:07:35.370 --> 00:07:38.690
what are the court that you're seeing in dread?

00:07:38.690 --> 00:07:44.860
We're trying to set the product name to whatever the name that has been received as part of

00:07:44.860 --> 00:07:45.790
the request body.

00:07:45.790 --> 00:07:49.240
So whatever the product that is retrieved,

00:07:49.240 --> 00:07:56.400
we're trying to update its name and then saving it back again to go back to post mapping

00:07:56.400 --> 00:07:56.950
method.

00:07:56.950 --> 00:08:02.500
Whatever we're trying to do in here is exactly what we're trying to do in here.

00:08:02.500 --> 00:08:04.090
But before doing that,

00:08:04.090 --> 00:08:08.150
we're not only retrieving the product but also updating its name.

00:08:08.150 --> 00:08:09.780
And then finally,

00:08:09.780 --> 00:08:12.350
business on what happens in here.

00:08:12.350 --> 00:08:15.850
We're again wrapping the result as part of the response entity.

00:08:15.850 --> 00:08:18.540
If everything goes well and good,

00:08:18.540 --> 00:08:24.520
that means product has been found and is updated then we're sending the status as extra DP

00:08:24.520 --> 00:08:25.270
Okay,

00:08:25.270 --> 00:08:29.980
otherwise would populate the default response with extra devastate us.

00:08:29.980 --> 00:08:32.500
As for four not found,

00:08:32.500 --> 00:08:34.410
the deal.

00:08:34.410 --> 00:08:37.300
It operation is somewhat similar.

00:08:37.300 --> 00:08:40.570
We're trying to retrieve a product and,

00:08:40.570 --> 00:08:41.500
if it is found,

00:08:41.500 --> 00:08:47.050
were trying to delete that particular product from the data store.

00:08:47.050 --> 00:08:52.550
And then we're responding back with some response entity,

00:08:52.550 --> 00:08:57.700
depending on whether the product has been found or not.

00:08:57.700 --> 00:09:02.240
We can also live,

00:09:02.240 --> 00:09:06.040
stream the data by adding this attribute,

00:09:06.040 --> 00:09:08.600
produces and said it to media type,

00:09:08.600 --> 00:09:09.230
text,

00:09:09.230 --> 00:09:10.460
even stream value.

00:09:10.460 --> 00:09:15.770
And here I'm trying to retrieve all the products that ever existed.

00:09:15.770 --> 00:09:20.790
And then I'm also applying some back pressure to deliver the spot.

00:09:20.790 --> 00:09:23.300
It's once every second,

00:09:23.300 --> 00:09:27.600
so that's how it works at a high level.

00:09:27.600 --> 00:09:32.130
But let's take a look at a working example so that you'll have a better picture and you'll

00:09:32.130 --> 00:09:33.650
have a better experience,

00:09:33.650 --> 00:09:35.070
but how it all works.

