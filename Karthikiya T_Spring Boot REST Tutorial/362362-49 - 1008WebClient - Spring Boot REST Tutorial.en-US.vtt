WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.280
Let's talk about how you can make to Web services are to micro services,

00:00:05.280 --> 00:00:06.190
for that matter,

00:00:06.190 --> 00:00:08.850
communicate each other in react away.

00:00:08.850 --> 00:00:13.950
So think about the following scenario wherein the client would be crystal list off products

00:00:13.950 --> 00:00:17.130
and a Web service will received the request.

00:00:17.130 --> 00:00:21.870
And let's say that this Web service needs to send requests to yet another Web service in

00:00:21.870 --> 00:00:24.190
order to retrieve the list off product.

00:00:24.190 --> 00:00:30.670
Obviously in traditional embassy applications will be using the rest template to perform

00:00:30.670 --> 00:00:31.580
that operation.

00:00:31.580 --> 00:00:34.350
But rest Ember is again blocking.

00:00:34.350 --> 00:00:38.470
That means once that it questions sent from this Web service,

00:00:38.470 --> 00:00:40.450
the thread will keep waiting.

00:00:40.450 --> 00:00:42.550
So that's going to pose a problem.

00:00:42.550 --> 00:00:44.310
That would be the case,

00:00:44.310 --> 00:00:48.490
even if this particular Web services reactive in nature.

00:00:48.490 --> 00:00:54.850
So if you want to get things done in react away and utilize the resources in much better

00:00:54.850 --> 00:00:55.480
fashion,

00:00:55.480 --> 00:01:00.050
then you have to replace the rest template with Web client,

00:01:00.050 --> 00:01:02.580
which is no,

00:01:02.580 --> 00:01:09.050
I'm blocking so the trade will not be waiting and is available to process other requests.

00:01:09.050 --> 00:01:12.050
So let's take a look at an example of the same.

00:01:12.050 --> 00:01:15.270
So for this purpose,

00:01:15.270 --> 00:01:17.770
we're going to be needing a couple off Web services.

00:01:17.770 --> 00:01:21.850
What I've done is I've just created a clone.

00:01:21.850 --> 00:01:26.520
How far existing project I literally did control C and Contrave.

00:01:26.520 --> 00:01:30.790
And here is what I got one additional chain that I need to make,

00:01:30.790 --> 00:01:35.790
though designed to add this property inside the application Dark Properties file.

00:01:35.790 --> 00:01:40.110
Since we're going to have this to services running under same host,

00:01:40.110 --> 00:01:44.660
we don't want any port conflicts and want them to be running on two different ports.

00:01:44.660 --> 00:01:46.730
So we have a Web service,

00:01:46.730 --> 00:01:50.950
one which will be running in 80 80 and the other one in 80 81.

00:01:50.950 --> 00:01:55.820
So he wrote the controllers off both these services.

00:01:55.820 --> 00:02:01.120
So here what I'm trying to do,

00:02:01.120 --> 00:02:03.150
it's just simply written,

00:02:03.150 --> 00:02:08.250
went off product objects by using the gender,

00:02:08.250 --> 00:02:14.970
it matter off flogs and generating an unlimited number off product objects.

00:02:14.970 --> 00:02:23.960
But then I'm applying the limit off only 10 and from hip service to I'm going to be using

00:02:23.960 --> 00:02:25.150
the Web client,

00:02:25.150 --> 00:02:29.560
which is a reactive abortion off rest template,

00:02:29.560 --> 00:02:34.850
and I'm using this method create and passing the u R I.

00:02:34.850 --> 00:02:37.650
But I would like to send a request to,

00:02:37.650 --> 00:02:46.430
and I'm a pending the your I that I would like to happened on top off existing.

00:02:46.430 --> 00:02:47.150
You're right.

00:02:47.150 --> 00:02:54.880
And I'm using this method retrieve in order to actually send the request and then retrieve

00:02:54.880 --> 00:02:55.610
the result.

00:02:55.610 --> 00:02:59.760
And then we have this mattered body to flux,

00:02:59.760 --> 00:03:04.150
which means I want to convert the response body to flux object.

00:03:04.150 --> 00:03:06.550
And here I'm providing the Poggio.

00:03:06.550 --> 00:03:08.500
Ultimately,

00:03:08.500 --> 00:03:10.480
we get the flux object,

00:03:10.480 --> 00:03:12.650
which would consider the list of products.

00:03:12.650 --> 00:03:16.380
And we're responding back with the same to the client,

00:03:16.380 --> 00:03:17.120
which in our case,

00:03:17.120 --> 00:03:19.080
is going to be the postman plaint.

00:03:19.080 --> 00:03:21.550
So let's run these two applications.

00:03:21.550 --> 00:03:30.250
This is going to run on Port 80 80 and the other one would be in port 80 81.

00:03:30.250 --> 00:03:38.780
So we're going to be sending request toe this method right here to this web service,

00:03:38.780 --> 00:03:41.960
which is running in port 80 81.

00:03:41.960 --> 00:03:46.860
And this is going to make a call to another Web service.

00:03:46.860 --> 00:03:48.900
With this you are I.

00:03:48.900 --> 00:03:57.720
And we got all the list off products,

00:03:57.720 --> 00:04:01.360
obviously the data and here doesn't make sense.

00:04:01.360 --> 00:04:04.550
I just want to simulate like,

00:04:04.550 --> 00:04:05.680
retrieving products,

00:04:05.680 --> 00:04:10.420
the lot off methods available,

00:04:10.420 --> 00:04:12.090
last part off the wept,

00:04:12.090 --> 00:04:12.570
lined,

00:04:12.570 --> 00:04:15.000
just as with the rest template,

00:04:15.000 --> 00:04:17.050
and you can actually play with it.

00:04:17.050 --> 00:04:18.000
I mean,

00:04:18.000 --> 00:04:18.930
if you'd like to,

00:04:18.930 --> 00:04:31.400
let's say filled road the results and you can use the filter method and send alarmed

00:04:31.400 --> 00:04:32.140
expression.

00:04:32.140 --> 00:04:37.750
You can even go ahead and retrieve particular fields from each product.

00:04:37.750 --> 00:04:40.930
And if you want to apply back pressure,

00:04:40.930 --> 00:04:50.670
can again use the deal elements method and given number the time you'd like to wait.

00:04:50.670 --> 00:04:57.460
You can even go ahead and subscribe and do some processing,

00:04:57.460 --> 00:04:59.290
passing the method reference.

00:04:59.290 --> 00:05:03.660
So there a lot of possible cases and depending on your needs,

00:05:03.660 --> 00:05:06.630
you have to come up with 11 solution and in fact,

00:05:06.630 --> 00:05:11.400
it will get even complex like you would be able to even come by multiple streams.

00:05:11.400 --> 00:05:20.350
Or maybe just let me demonstrate that I'm just going to make a clone off this stream,

00:05:20.350 --> 00:05:25.850
Let me call it,

00:05:25.850 --> 00:05:36.910
but plus two and them we're going to have the flux tree product looks.

00:05:36.910 --> 00:05:37.450
Three.

00:05:37.450 --> 00:05:56.180
I'm going to use one of its Matt that called Gone Got with multiple sources and let me just

00:05:56.180 --> 00:05:57.450
born back with the same.

00:05:57.450 --> 00:06:05.650
So I'm trying to come by multiple streams seemed to be having another.

00:06:05.650 --> 00:06:18.140
You tend the statement and relaunch our application hopes.

00:06:18.140 --> 00:06:30.520
That's too okay So this time,

00:06:30.520 --> 00:06:31.340
essentially,

00:06:31.340 --> 00:06:34.560
we should be getting 20 products,

00:06:34.560 --> 00:06:37.620
and sure enough,

00:06:37.620 --> 00:06:38.050
it work.

00:06:38.050 --> 00:06:40.950
So ultimately,

00:06:40.950 --> 00:06:45.130
this is the reactor part off the entire application.

00:06:45.130 --> 00:06:48.730
Rest off the layers would pretty much remain the same as with traditional embassy

00:06:48.730 --> 00:06:49.550
application.

00:06:49.550 --> 00:06:54.620
But make sure whatever the libraries are competence that you're going to introduce into

00:06:54.620 --> 00:06:57.030
your project are reactive in nature.

00:06:57.030 --> 00:06:59.950
If you'd like to follow the reactor way of dealing with things,

00:06:59.950 --> 00:07:03.630
we're going to talk about some of the drawbacks off.

00:07:03.630 --> 00:07:04.890
React to programming,

00:07:04.890 --> 00:07:07.450
especially in the context offspring framework,

00:07:07.450 --> 00:07:11.190
and we'll also try to understand when to use it and when not to use it.

