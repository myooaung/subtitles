WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.180
Let's take a look at how we can implement reactor programming in spring framework.

00:00:04.180 --> 00:00:05.420
In fact,

00:00:05.420 --> 00:00:10.470
we're going to take a look at the simplest possible example off reactor programming in our

00:00:10.470 --> 00:00:11.250
spring project.

00:00:11.250 --> 00:00:15.390
Here are the steps that we're going to follow pasta Paul.

00:00:15.390 --> 00:00:17.450
We're going to be needing the reactor library.

00:00:17.450 --> 00:00:19.120
And for that help,

00:00:19.120 --> 00:00:24.010
including one off the Maven started dependencies for spring boot inside our bomb.

00:00:24.010 --> 00:00:24.920
The XML file,

00:00:24.920 --> 00:00:30.350
if you use maybe in and then will be creating a consumer or a subscriber.

00:00:30.350 --> 00:00:32.440
And then we'll have the flux,

00:00:32.440 --> 00:00:39.440
which will be the producer to produce stream of data which will be consumed by the consumer

00:00:39.440 --> 00:00:40.450
or the subscriber.

00:00:40.450 --> 00:00:45.550
So let's go day clips and right off us react toe example.

00:00:45.550 --> 00:00:51.980
So what I have here is the simple controller with the falling mapping,

00:00:51.980 --> 00:00:57.690
and we have to get map method so that when you send to get records with this year,

00:00:57.690 --> 00:01:02.000
old mapping will be able to execute whatever recites in this method.

00:01:02.000 --> 00:01:03.920
But before that,

00:01:03.920 --> 00:01:07.090
let's take a look at the dependency that I've just added.

00:01:07.090 --> 00:01:13.280
I just have to add the following spring boot started dependency.

00:01:13.280 --> 00:01:15.160
It's springboard started,

00:01:15.160 --> 00:01:15.400
wept,

00:01:15.400 --> 00:01:15.680
flocks,

00:01:15.680 --> 00:01:18.150
dependency which will do the trick.

00:01:18.150 --> 00:01:23.100
So this will bring in all the reactor capabilities inside our project.

00:01:23.100 --> 00:01:23.760
Now,

00:01:23.760 --> 00:01:26.770
since I'm not going to be using any database I'm not,

00:01:26.770 --> 00:01:31.050
including any react to data sources are repositories.

00:01:31.050 --> 00:01:34.250
I just want to keep things simple.

00:01:34.250 --> 00:01:37.080
And since we don't have a database,

00:01:37.080 --> 00:01:40.450
we have to have some means to stream the data.

00:01:40.450 --> 00:01:41.910
Fortunately,

00:01:41.910 --> 00:01:49.350
the producer class flux has a method called just,

00:01:49.350 --> 00:01:55.180
which will allow us to specify a bunch off elements which will be streamed.

00:01:55.180 --> 00:02:00.280
So here I'm going to say Apple,

00:02:00.280 --> 00:02:08.700
whatever Doesn't matter.

00:02:08.700 --> 00:02:11.180
It's called it banana.

00:02:11.180 --> 00:02:16.350
And let's call this maybe orange,

00:02:16.350 --> 00:02:22.120
and this could be maybe eyes one or whatever.

00:02:22.120 --> 00:02:32.690
Let's look under a shift or to import the flux class that belongs to the reactor core

00:02:32.690 --> 00:02:33.470
library.

00:02:33.470 --> 00:02:35.750
And it is a publisher.

00:02:35.750 --> 00:02:37.760
So so far,

00:02:37.760 --> 00:02:38.900
with this instruction,

00:02:38.900 --> 00:02:42.360
no data will be streamed because there is nobody to consume it.

00:02:42.360 --> 00:02:46.040
And if you could recollect what we've dogged earlier,

00:02:46.040 --> 00:02:50.660
the producer interface has the method called subscribe.

00:02:50.660 --> 00:02:51.720
In this case,

00:02:51.720 --> 00:02:53.150
Flux is our producer,

00:02:53.150 --> 00:03:02.350
which implements the producer interface so we could just use thesis subscribe method.

00:03:02.350 --> 00:03:07.250
There are many variants off this mattered,

00:03:07.250 --> 00:03:11.600
but the one that I'm going to be demonstrating is right here.

00:03:11.600 --> 00:03:15.450
The one that takes in Consumer has the Para Meter.

00:03:15.450 --> 00:03:21.650
I really we would be using a method that takes in the subscriber object.

00:03:21.650 --> 00:03:30.910
But let's try to use the consumer first for simplicity and in here we're going to specify

00:03:30.910 --> 00:03:31.850
our consumer.

00:03:31.850 --> 00:03:38.890
So for this purpose I'm actually going to create and a realist,

00:03:38.890 --> 00:04:00.990
let's call it as products a new era list and off string.

00:04:00.990 --> 00:04:03.150
I'll look under a shift Oh,

00:04:03.150 --> 00:04:07.100
to import all the required classes.

00:04:07.100 --> 00:04:10.560
And no,

00:04:10.560 --> 00:04:19.910
I'm actually going to send him at the difference had let's dig deep and try to understand

00:04:19.910 --> 00:04:22.090
what's inside this matter If you open,

00:04:22.090 --> 00:04:27.270
the implementation is going to take in the consumer,

00:04:27.270 --> 00:04:30.400
which in this case have sent them at the difference.

00:04:30.400 --> 00:04:34.550
So all the data that will be streamed by this producer,

00:04:34.550 --> 00:04:42.580
there's going to be an on next event and inside the our next event were calling the method

00:04:42.580 --> 00:04:42.580
.

00:04:42.580 --> 00:04:44.450
Add are very list.

00:04:44.450 --> 00:04:49.180
If this sounds confusing this hold on for a moment.

00:04:49.180 --> 00:04:51.210
I have a better example,

00:04:51.210 --> 00:04:55.550
but ultimately instrument we creating the new subscriber.

00:04:55.550 --> 00:05:02.690
The flux is going to do that for us with this method difference used as the consumer of the

00:05:02.690 --> 00:05:04.700
data that gets streamed.

00:05:04.700 --> 00:05:10.550
Let's try to We could actually run this application,

00:05:10.550 --> 00:05:14.060
but I'd like to log everything What's happening?

00:05:14.060 --> 00:05:21.610
Someone to be using one of the methods available as part of the flux class and dis method.

00:05:21.610 --> 00:05:24.950
It's just going to return the flux object,

00:05:24.950 --> 00:05:30.840
but will also help us look at the in for messages as to what's happening.

00:05:30.840 --> 00:05:31.290
I mean,

00:05:31.290 --> 00:05:34.490
we can observe all the sequence off events that are triggered.

00:05:34.490 --> 00:05:37.910
So with the launch,

00:05:37.910 --> 00:05:44.350
your application and then we'll explore further.

00:05:44.350 --> 00:05:47.090
Well,

00:05:47.090 --> 00:05:47.370
I did.

00:05:47.370 --> 00:05:49.430
I could just write the J unit for this,

00:05:49.430 --> 00:05:52.450
but I think this example would be more realistic.

00:05:52.450 --> 00:05:55.650
So let me send the request.

00:05:55.650 --> 00:05:58.670
So that's 200.

00:05:58.670 --> 00:05:59.200
Okay,

00:05:59.200 --> 00:06:00.710
you're not going to be seeing anything here.

00:06:00.710 --> 00:06:04.350
But if you go back Jack lips and to the control,

00:06:04.350 --> 00:06:08.300
he would notice some log messages.

00:06:08.300 --> 00:06:09.850
So first of all,

00:06:09.850 --> 00:06:18.080
the producer has called the unsubscribe mattered off the subscriber by sending the

00:06:18.080 --> 00:06:19.250
subscription object,

00:06:19.250 --> 00:06:25.150
and the subscriber is going to use this subscription object to call its request method,

00:06:25.150 --> 00:06:27.010
and by default,

00:06:27.010 --> 00:06:30.660
the perimeter that it passes is unbounded.

00:06:30.660 --> 00:06:32.310
That means we're requesting.

00:06:32.310 --> 00:06:34.550
For all the data that is available in the stream,

00:06:34.550 --> 00:06:36.450
this is there.

00:06:36.450 --> 00:06:39.450
The back pressure will come into picture.

00:06:39.450 --> 00:06:45.150
If you could specify some number in here along value,

00:06:45.150 --> 00:06:49.040
then you would only be retrieving that much off data.

00:06:49.040 --> 00:06:49.790
For example,

00:06:49.790 --> 00:06:55.250
if you have a results that off say 100 products but your space for 10 in here you just

00:06:55.250 --> 00:06:59.270
going to get 10 elements from the result set that gets streamed.

00:06:59.270 --> 00:07:02.760
And as I mentioned before reaching every element,

00:07:02.760 --> 00:07:07.320
the publisher will call the our next event off the subscriber.

00:07:07.320 --> 00:07:09.950
And since we have four elements in the stream,

00:07:09.950 --> 00:07:14.880
there are four on next events preaching every on next.

00:07:14.880 --> 00:07:20.890
We're trying to call the ad matter off federalist by passing these elements.

00:07:20.890 --> 00:07:27.150
So essentially all these elements would be added in the list that were created.

00:07:27.150 --> 00:07:31.590
And finally the producer will call the UN complete.

00:07:31.590 --> 00:07:33.310
Even That means it says,

00:07:33.310 --> 00:07:37.050
I've delivered all the data I have and I have nothing else to share.

00:07:37.050 --> 00:07:40.930
Well,

00:07:40.930 --> 00:07:42.420
I mentioned that internally,

00:07:42.420 --> 00:07:47.550
this subscribed method is actually going to create a subscriber for us.

00:07:47.550 --> 00:07:49.350
If you go deep.

00:07:49.350 --> 00:07:58.420
So you have this method that's going to ultimately create the subscriber and is going to

00:07:58.420 --> 00:08:02.150
call publisher DOT subscribe to subscribe that subscriber.

00:08:02.150 --> 00:08:10.350
But what I'm going to do next is instead off we letting the flux create the subscriber.

00:08:10.350 --> 00:08:12.930
We can do that as well.

00:08:12.930 --> 00:08:17.070
And this is an interface.

00:08:17.070 --> 00:08:21.010
You have to implement all the UN implement that methods.

00:08:21.010 --> 00:08:26.260
And inside our next event,

00:08:26.260 --> 00:08:37.950
I'm just going to populate the realist with the object that receiving here.

00:08:37.950 --> 00:08:42.430
Of course,

00:08:42.430 --> 00:08:44.890
this needs to be typecast,

00:08:44.890 --> 00:08:48.900
erred and on subscribe.

00:08:48.900 --> 00:08:52.350
We got the subscription object,

00:08:52.350 --> 00:08:56.690
which we're going to use to call its request mattered,

00:08:56.690 --> 00:09:00.050
and you can specify some value in here.

00:09:00.050 --> 00:09:01.240
But for now,

00:09:01.240 --> 00:09:05.190
I'm going to be setting this to long dot max value.

00:09:05.190 --> 00:09:08.010
That means we want everything that is being streamed,

00:09:08.010 --> 00:09:11.990
and now that's run our application.

00:09:11.990 --> 00:09:14.420
But let's also flogged them a sage.

00:09:14.420 --> 00:09:14.930
So for that,

00:09:14.930 --> 00:09:19.890
I'm going to be using the default logger that comes with spring boot.

00:09:19.890 --> 00:09:21.060
Um,

00:09:21.060 --> 00:09:37.650
so longer logger factory dot get longer.

00:09:37.650 --> 00:09:41.170
I'm want to specify this glass name.

00:09:41.170 --> 00:09:47.650
Well,

00:09:47.650 --> 00:09:59.200
let's follow some best practices and make it prior weight Static final contar Schiphol to

00:09:59.200 --> 00:10:00.350
import the logger,

00:10:00.350 --> 00:10:07.900
and that's just use this longer to print.

00:10:07.900 --> 00:10:20.660
Watch inside the list n four and I'm just simply going toe print the list in the form off a

00:10:20.660 --> 00:10:21.350
string.

00:10:21.350 --> 00:10:24.600
Hold it,

00:10:24.600 --> 00:10:25.970
Let's run our application.

00:10:25.970 --> 00:10:47.860
But send the request and let's go back and make sure there are elements in the list that

00:10:47.860 --> 00:10:49.750
means all the elements were consumed.

00:10:49.750 --> 00:10:56.860
So here's a quick example off the reactor programming walks,

00:10:56.860 --> 00:11:01.650
and we've also practically understood the sequence of events that have dogged in theory.

00:11:01.650 --> 00:11:03.290
I hope it makes sense.

