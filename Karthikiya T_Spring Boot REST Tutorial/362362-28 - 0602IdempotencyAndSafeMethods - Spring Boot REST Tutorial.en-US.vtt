WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.400
Let's try to understand safe and I damn bored and met.

00:00:03.400 --> 00:00:05.340
That's Nestor DP First,

00:00:05.340 --> 00:00:07.590
let's talk about what are safe methods.

00:00:07.590 --> 00:00:14.650
A method is considered safe if they do not have side effects are if they do not cause any

00:00:14.650 --> 00:00:16.700
state change on the solar side.

00:00:16.700 --> 00:00:19.460
Let me explain what I mean with an example.

00:00:19.460 --> 00:00:22.970
Consider the get matter.

00:00:22.970 --> 00:00:23.870
For instance,

00:00:23.870 --> 00:00:27.750
all this is going to do is to retrieve an existing resource.

00:00:27.750 --> 00:00:28.840
In this case,

00:00:28.840 --> 00:00:33.080
I'm trying to retreat a product with a particular island fire.

00:00:33.080 --> 00:00:35.820
This is not going to perform any update,

00:00:35.820 --> 00:00:37.600
our creation off resource.

00:00:37.600 --> 00:00:41.550
So this is just a read operation and is completely safe.

00:00:41.550 --> 00:00:42.280
I mean,

00:00:42.280 --> 00:00:44.790
no matter how many times you fired the same request,

00:00:44.790 --> 00:00:50.010
it's not going to cause any side effect or it's not going toe cause any state change on the

00:00:50.010 --> 00:00:50.860
server side.

00:00:50.860 --> 00:00:57.430
However often developers would like to log some information along with the times tramp as

00:00:57.430 --> 00:00:58.910
to when the request has come,

00:00:58.910 --> 00:01:04.510
that is considered safe because it does not have any negative consequences on the solar

00:01:04.510 --> 00:01:05.020
side.

00:01:05.020 --> 00:01:05.810
However,

00:01:05.810 --> 00:01:06.890
coming to posed,

00:01:06.890 --> 00:01:11.820
if you try to fire this request along with this Jason Data,

00:01:11.820 --> 00:01:13.490
this is going to result.

00:01:13.490 --> 00:01:14.500
In addition,

00:01:14.500 --> 00:01:16.970
off a new resource on the silver side,

00:01:16.970 --> 00:01:23.350
which means this will potentially change the state on the server side if you find the same

00:01:23.350 --> 00:01:24.690
request multiple times,

00:01:24.690 --> 00:01:27.590
this may result in creation off multiple resources.

00:01:27.590 --> 00:01:33.870
Our multiple products hence post method is considered not as a safe method.

00:01:33.870 --> 00:01:38.690
I'm pretty sure you must have experienced whenever you're trying to re submit the form on

00:01:38.690 --> 00:01:40.250
the browser for the second time.

00:01:40.250 --> 00:01:41.900
Rosabal Trey warning.

00:01:41.900 --> 00:01:45.510
Prompt asking if you would like to re submit the form Well,

00:01:45.510 --> 00:01:48.930
this is the reason for that Post is considered not so safe.

00:01:48.930 --> 00:01:53.560
And so browsers kind of giving your warning whenever you try to submit the form for the

00:01:53.560 --> 00:01:54.390
second time.

00:01:54.390 --> 00:01:56.510
If you want experiment with it,

00:01:56.510 --> 00:02:01.790
just try to fill any post form submitted and tried to reload the page.

00:02:01.790 --> 00:02:08.320
You would see that warning from the browser similarly put is also considered as not a safe

00:02:08.320 --> 00:02:13.020
operation because it's going to result in state change.

00:02:13.020 --> 00:02:16.480
Your essentially trying to update an existing resource.

00:02:16.480 --> 00:02:18.420
Same is the case with delete.

00:02:18.420 --> 00:02:19.950
The same is the case with Patch,

00:02:19.950 --> 00:02:23.470
so the only method that is safe is get.

00:02:23.470 --> 00:02:25.750
There's no talk about,

00:02:25.750 --> 00:02:28.010
I'd impotency off a method.

00:02:28.010 --> 00:02:30.330
Hired impotence is a little bit tricky.

00:02:30.330 --> 00:02:36.880
It states Multiple identical request should have the same effect as a single request.

00:02:36.880 --> 00:02:38.850
Let me explain with an example,

00:02:38.850 --> 00:02:40.870
Let's consider.

00:02:40.870 --> 00:02:42.300
Get for instance,

00:02:42.300 --> 00:02:46.910
no matter how many times you fired this query or the request,

00:02:46.910 --> 00:02:50.400
nothing is going to change on the server side.

00:02:50.400 --> 00:02:52.630
So obviously this is I'd impotent.

00:02:52.630 --> 00:02:54.450
But let's talk about Post.

00:02:54.450 --> 00:02:56.920
He fired the query for the first time.

00:02:56.920 --> 00:02:57.760
It's going to result.

00:02:57.760 --> 00:02:58.590
In addition,

00:02:58.590 --> 00:02:59.690
off a new resource.

00:02:59.690 --> 00:03:03.410
You going to find the same query or the request for the second time.

00:03:03.410 --> 00:03:06.570
That's going to result in addition off a new resource.

00:03:06.570 --> 00:03:09.690
And if you fired for the third time,

00:03:09.690 --> 00:03:11.400
a new resource will be added.

00:03:11.400 --> 00:03:16.280
A new resource will be added every time you send the post Request.

00:03:16.280 --> 00:03:17.430
Hence,

00:03:17.430 --> 00:03:19.320
post is not item,

00:03:19.320 --> 00:03:20.250
but in method.

00:03:20.250 --> 00:03:26.550
This talk about put Matt the first time you send this request.

00:03:26.550 --> 00:03:29.700
It's going to replace an existing resource.

00:03:29.700 --> 00:03:31.990
And from that point on,

00:03:31.990 --> 00:03:35.490
no matter how many times you send the same request,

00:03:35.490 --> 00:03:38.250
it's not going to change the state on the server.

00:03:38.250 --> 00:03:43.250
Everything would remain same only for the first time it might change.

00:03:43.250 --> 00:03:46.570
Hence put is I'd impotent.

00:03:46.570 --> 00:03:50.570
Same as with delete only for the first query.

00:03:50.570 --> 00:03:53.310
It's going to result in delicious off resource.

00:03:53.310 --> 00:03:55.430
But for all the subsequent query,

00:03:55.430 --> 00:03:59.100
you're going to see an error because the resources no longer present.

00:03:59.100 --> 00:04:02.020
No matter how many times you find the same query,

00:04:02.020 --> 00:04:04.570
it's going to get back with the same result.

00:04:04.570 --> 00:04:09.810
Let's talk about Patch Patch in this case,

00:04:09.810 --> 00:04:12.380
his ID imprint.

00:04:12.380 --> 00:04:16.520
But the Pats prescription does not say that it has to be.

00:04:16.520 --> 00:04:19.360
I'd impotent because coming toe patch.

00:04:19.360 --> 00:04:26.230
Unlike put where he would specify the entire resource that needs to be replaced in batch,

00:04:26.230 --> 00:04:32.530
you're just specify some instructions as to how to identify resource and what feels or what

00:04:32.530 --> 00:04:33.880
abduction is to be done.

00:04:33.880 --> 00:04:37.420
So it's not guaranteed that the patch will be.

00:04:37.420 --> 00:04:40.180
I'd impotent if you're using any tour party,

00:04:40.180 --> 00:04:40.760
FBI.

00:04:40.760 --> 00:04:43.040
And if you want to fight a patch request,

00:04:43.040 --> 00:04:47.400
you'd have to be careful that it doesn't necessarily have to be hide impotent.

00:04:47.400 --> 00:04:48.720
For example,

00:04:48.720 --> 00:04:54.350
you could have a patch request having instructions to increment the age of the employees by

00:04:54.350 --> 00:04:54.860
one,

00:04:54.860 --> 00:04:57.900
and if you want to send the same request multiple times,

00:04:57.900 --> 00:05:02.330
it's going to result in incriminating the value every time you send the request.

00:05:02.330 --> 00:05:06.660
In which case Patch is not I'd MPA tint.

00:05:06.660 --> 00:05:08.080
However,

00:05:08.080 --> 00:05:09.260
in all likelihood,

00:05:09.260 --> 00:05:10.490
in most cases,

00:05:10.490 --> 00:05:12.770
Patch is I'd impotent,

00:05:12.770 --> 00:05:15.070
but it's just not guaranteed nobody.

00:05:15.070 --> 00:05:21.720
There is no specification that states the patch has to be identified int I hope it makes

00:05:21.720 --> 00:05:22.250
sense.

