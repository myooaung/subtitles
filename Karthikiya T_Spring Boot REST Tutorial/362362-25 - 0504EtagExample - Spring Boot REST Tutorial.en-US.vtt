WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.840
Okay,

00:00:00.840 --> 00:00:04.050
let's take a look at an example off E tag the first time.

00:00:04.050 --> 00:00:08.650
A request for the resource in this case I'm trying to fetch all the products available.

00:00:08.650 --> 00:00:20.780
I should be getting toe under focus status and the response header must be having the e

00:00:20.780 --> 00:00:24.000
tank with the hash off the response.

00:00:24.000 --> 00:00:26.100
Along with that,

00:00:26.100 --> 00:00:29.180
he would notice some of the head of it says Cash a control.

00:00:29.180 --> 00:00:31.250
Set it to know Kasia.

00:00:31.250 --> 00:00:32.100
Earlier,

00:00:32.100 --> 00:00:34.050
we had said this to Max Time,

00:00:34.050 --> 00:00:37.250
but this time we had said this to no cash,

00:00:37.250 --> 00:00:43.230
a meaning that we won't declined to come from with the server before it can fetch the

00:00:43.230 --> 00:00:44.890
resource from its cache memory.

00:00:44.890 --> 00:00:49.150
Let's go to our eclipse and see how this court is implemented.

00:00:49.150 --> 00:00:54.180
I know having to just a new method where,

00:00:54.180 --> 00:00:56.650
and I'm tryingto send list off products,

00:00:56.650 --> 00:01:02.650
available a spot off the response entity and have no said the cash control to know cachet.

00:01:02.650 --> 00:01:06.540
And that's what you're seeing in the response header.

00:01:06.540 --> 00:01:11.100
But the key thing to notice inside your conflict file,

00:01:11.100 --> 00:01:17.430
you have to introduce this shallow it I had a filter because this is the thing that will do

00:01:17.430 --> 00:01:22.230
the job off actually hashing the response internally,

00:01:22.230 --> 00:01:27.450
This is going to use all the filters to start off perform this operation.

00:01:27.450 --> 00:01:32.750
You need to have this being defined inside a contract file.

00:01:32.750 --> 00:01:37.130
Whether it is Java conflict are XML conflict.

00:01:37.130 --> 00:01:38.850
He must have this being defined.

00:01:38.850 --> 00:01:41.350
And once you do so,

00:01:41.350 --> 00:01:44.380
everything will be taken get automatically.

00:01:44.380 --> 00:01:51.660
And the second time you try to send the same request again.

00:01:51.660 --> 00:01:53.950
A custom for the same resource.

00:01:53.950 --> 00:01:58.290
This time you got three or four status from the server.

00:01:58.290 --> 00:02:02.050
And if you notice,

00:02:02.050 --> 00:02:12.370
client has also sent that exact hash with the key as if none match Exactly.

00:02:12.370 --> 00:02:14.750
The stuff that we talked about earlier,

00:02:14.750 --> 00:02:23.110
so so would compare this particular value with the hash value off the response and would

00:02:23.110 --> 00:02:24.450
save the both are same.

00:02:24.450 --> 00:02:25.680
In this case,

00:02:25.680 --> 00:02:29.710
the both are same and so so has responded back with three or four status.

00:02:29.710 --> 00:02:32.060
Otherwise,

00:02:32.060 --> 00:02:34.590
that would have just sent all the required resources.

00:02:34.590 --> 00:02:38.250
And that's how Anne Tank would work.

00:02:38.250 --> 00:02:42.450
You can perform the same operation in Postman climbed as well.

00:02:42.450 --> 00:02:46.350
Only that you have to manually send the request header.

00:02:46.350 --> 00:02:47.450
I mean,

00:02:47.450 --> 00:02:52.450
you just have to copy the e tag and when you send the second request from the client,

00:02:52.450 --> 00:02:59.250
you just have to include that e tank while us part of the if none match request header.

00:02:59.250 --> 00:03:01.250
Hope you understand what I mean.

00:03:01.250 --> 00:03:02.000
Also,

00:03:02.000 --> 00:03:06.120
I was mentioning before that this is still going to cost bit off performance on the solar

00:03:06.120 --> 00:03:10.240
side because no matter how many times you send the request for the same resource,

00:03:10.240 --> 00:03:15.380
so we'll still have to fight acquitted to the database in order to fish the resources and

00:03:15.380 --> 00:03:16.510
apply National Guard,

00:03:16.510 --> 00:03:16.830
um,

00:03:16.830 --> 00:03:19.750
to create hash value of that response,

00:03:19.750 --> 00:03:24.810
the better approach is to actually do something on your own.

00:03:24.810 --> 00:03:26.100
Because unfortunately,

00:03:26.100 --> 00:03:27.890
spring does not have such support.

00:03:27.890 --> 00:03:29.170
Our of box,

00:03:29.170 --> 00:03:31.650
you have to come up with something off your own.

00:03:31.650 --> 00:03:33.130
One of the approaches,

00:03:33.130 --> 00:03:37.120
which I had followed earlier when I was working in one of the projects,

00:03:37.120 --> 00:03:39.320
is that we maintain the hash map,

00:03:39.320 --> 00:03:43.250
and every time there is an abdication off a resource in the database,

00:03:43.250 --> 00:03:47.540
there's a hibernate trigger or uneven that kicks in,

00:03:47.540 --> 00:03:51.370
and we'll upgrade that map along with its corresponding hash value.

00:03:51.370 --> 00:03:53.190
It gets really complex,

00:03:53.190 --> 00:03:56.720
and there is no sure shot way or the best way to do it.

00:03:56.720 --> 00:03:59.930
It is up to the individual preferences.

00:03:59.930 --> 00:04:04.500
Have you come up with a solution that would solve the problem so that someone doesn't have

00:04:04.500 --> 00:04:06.240
to file quit or the database instant?

00:04:06.240 --> 00:04:11.350
It can just validate the hash value by checking a map or something of that sort.

00:04:11.350 --> 00:04:13.250
Hope that makes sense.

