WEBVTT

00:00.270 --> 00:01.770
Welcome back all.

00:01.770 --> 00:09.570
So today we're going to go ahead and begin constructing a promise and this promise will be a part of

00:09.570 --> 00:10.930
a return statement.

00:10.950 --> 00:14.840
As you can see this entire thing here.

00:15.660 --> 00:21.570
What we want to do is have an asynchronous method for creating accounts which will basically inform

00:21.570 --> 00:26.550
us if the account has been created or if the Creation has failed for whatever reason.

00:26.880 --> 00:33.840
Please keep in mind that at this point in time we are simulating this synchronous communication and

00:33.870 --> 00:35.050
it is not perfect.

00:35.160 --> 00:39.020
And with the coming of the server this will change to a very good extent.

00:39.060 --> 00:40.800
So let's go ahead and begin.

00:40.830 --> 00:47.610
Promise is a class and the new is a keyword for the initialization of the class so new is a key word

00:47.610 --> 00:53.910
for the initialization of a class with the usage of classes constructor and this constructor will take

00:54.060 --> 00:57.970
one argument here so this is all one single argument.

01:00.130 --> 01:00.850
As you can see.

01:00.880 --> 01:07.360
So I'm going to go ahead and pass one argument this one argument is a bit of a longer function.

01:07.360 --> 01:14.530
This function is a lambda function which has or the function of an arrow syntax and this is where a

01:14.530 --> 01:16.570
bit of a tricky part comes in.

01:17.480 --> 01:23.480
As I told you before on the left side of the arrow you have the parameters of the function and on the

01:23.480 --> 01:28.360
right side of the arrow you have the body of the function.

01:28.370 --> 01:35.490
Now this land the function here it actually receives two other functions as parameters.

01:35.570 --> 01:39.410
So you have resolve and reject.

01:39.410 --> 01:45.500
So these are the two that it receives as parameters and then we go onto the right side and we have the

01:45.500 --> 01:48.140
body of the function and the body of the function.

01:48.140 --> 01:53.550
We basically just want to see if the account procedure has failed or if it has succeeded.

01:53.900 --> 02:01.090
So if the length of the account's array is greater or equal then the account limit.

02:01.160 --> 02:04.620
Go ahead and reject Now the reject itself.

02:04.630 --> 02:09.390
I mean just go ahead and rewrite this a little bit so it's all that clear to you what is going on here.

02:13.020 --> 02:14.310
OK let's do it.

02:14.320 --> 02:16.200
But it's about doing it this way.

02:22.520 --> 02:23.990
I'm missing something.

02:24.000 --> 02:25.490
Let me just go ahead and type it in

02:30.250 --> 02:36.170
very frustrating but there we go should be fine and dandy now.

02:36.240 --> 02:37.510
OK.

02:38.150 --> 02:43.880
Anyway the reason why I did this is because a reject is not being actually returned.

02:43.910 --> 02:45.550
We only need the return statement.

02:45.580 --> 02:51.290
Terminate this function in case the account has the account creation has failed.

02:51.290 --> 02:59.210
So we are calling the reject method here and it's going to get rejected and we have the the the string

02:59.210 --> 03:04.660
here which is basically maximum accounts limit reached and then you pass on.

03:04.700 --> 03:07.340
Then you type in a return statement to terminate the function.

03:07.340 --> 03:14.870
At this point in time if we go down below this line is nothing new nothing new nothing new.

03:14.870 --> 03:19.120
Nothing new but the last one is actually resolve.

03:19.310 --> 03:25.040
And this is going to confirm that the account creation has been successful.

03:25.220 --> 03:31.160
So depending on whether this is this happens to be reject or resolve that will determine whether the

03:31.170 --> 03:34.520
accounting process has been successful or not.

03:34.520 --> 03:38.830
Now in case the accounts limit has been reached it's going to get rejected.

03:38.840 --> 03:44.890
In case it has not been reached the account will be created and its creation will be logged as well

03:44.900 --> 03:47.660
something we've done in the previous lessons.

03:47.660 --> 03:49.960
Now if we go to the component as

03:53.110 --> 03:56.460
and if we dig in here a little bit and there we go.

03:56.680 --> 04:04.150
So the create account function has been modified to an extent you have this a little bit confusing syntax

04:04.150 --> 04:04.920
here.

04:05.260 --> 04:09.610
Let me just go ahead and this is the way you were posed to write it in general this is the way it's

04:09.610 --> 04:09.940
written.

04:09.950 --> 04:15.520
But let me just go ahead and alter it a little bit so that you can understand it a little bit easier.

04:17.590 --> 04:18.390
Okay.

04:18.450 --> 04:23.730
So this makes no difference in terms of code or whether this is here or down below but it's just the

04:23.730 --> 04:30.720
general coding just general way of writing these things I guess a standardized way anyway so account

04:30.720 --> 04:38.320
service the create method is called From account service and we want to create this new account that

04:38.320 --> 04:47.800
has been that has been previously processed in the account service by the create so you have to create

04:47.800 --> 04:53.400
function create method here and it has been called.

04:53.530 --> 05:01.440
And then we shall see what the create method will return anyway depending on what it returns based upon

05:01.530 --> 05:06.790
the parameter that has been passed to it we will pay for one of the two.

05:06.870 --> 05:12.740
Either this will happen or we will simply catchier and this will happen.

05:13.020 --> 05:18.750
So again we have a lambda function here where we have the parameters here or the parameter.

05:18.750 --> 05:23.740
In our case and on the right side you have the body of the function which is really nothing new you

05:23.770 --> 05:31.980
just have console log and start create account and form and basically the method for resetting the form.

05:31.980 --> 05:40.200
All of which we have used before we have simply placed them here because if it gets resolved OK do these

05:40.290 --> 05:41.610
perform the sort of actions.

05:41.610 --> 05:48.860
If it doesn't go into the catch block and use a lambda function which will basically have a parameter

05:48.910 --> 05:55.900
the R R and D create a counter error will be set to the value of E R R.

05:56.310 --> 05:59.330
So the error message will be there.

06:00.090 --> 06:01.820
And that's that's basically it.

06:01.830 --> 06:02.490
There is nothing.

06:02.500 --> 06:03.560
There is nothing more to it.

06:03.570 --> 06:09.350
We just we haven't done anything like new or strange to this site we've just changed the way to the

06:09.380 --> 06:13.480
logic in the background of the site actually functions.

06:13.500 --> 06:19.270
Now there will be one more tutorial in this regard where I will show you this part how this happens

06:19.290 --> 06:21.700
where it says account is deleted.

06:23.230 --> 06:26.410
And then we're going to be wrapping up this chapter.

06:26.710 --> 06:33.500
So I'm going to go ahead and bid you farewell here and just another note before I leave.

06:33.700 --> 06:38.470
I know that it can seem a little bit complicated in the sense of logic so feel free to ask as many questions

06:38.470 --> 06:39.170
as you choose.

06:39.210 --> 06:39.900
Please.

06:39.970 --> 06:42.570
We will be more than happy to try to help you out.
