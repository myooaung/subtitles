WEBVTT

00:00.300 --> 00:04.860
OK so let's go ahead and go move on with the demo.

00:05.040 --> 00:10.080
So first of all because this is a lot of the things here have been built for the convenience of the

00:10.080 --> 00:19.740
demo type in bills here and press enter so that this would so the demo would work the way that it is

00:19.800 --> 00:20.810
intended to work.

00:20.810 --> 00:26.950
You don't type bills both new transaction both same array a new array will actually work the same way.

00:27.660 --> 00:34.920
And then we'll just go ahead and click on the button with the summary text a few times and you will

00:34.920 --> 00:36.830
see that there are no updates here.

00:36.840 --> 00:42.390
Description value and date no new transactions are there even though that the Jason printout down below

00:42.450 --> 00:49.200
which you use for debugging here will actually state that something new has indeed been created or the

00:49.200 --> 00:53.030
new transactions are indeed being added.

00:53.030 --> 00:58.980
And if I click on new transaction lock the hard code a transaction is added multiple times over and

00:58.980 --> 00:59.480
over.

00:59.580 --> 01:03.170
Even though it was added before now it is simply displayed.

01:03.210 --> 01:05.050
Why does this happen.

01:05.220 --> 01:12.690
Well at the moment we have the pipe set to true.

01:12.720 --> 01:20.290
Basically this is a pure pipe and we've stated that by typing in pure colon and true and pure pipes

01:20.320 --> 01:22.780
can only detect pure changes.

01:22.780 --> 01:24.210
Now what does this mean.

01:24.280 --> 01:30.280
Well pure changes are are all the changes that happen on primitive types.

01:30.280 --> 01:39.580
For example if you change some sort of a number or a string or a boolean except for or a change of a

01:39.580 --> 01:42.230
reference to an object or an array.

01:42.310 --> 01:48.610
But we haven't really changed any primitive types here and we certainly haven't changed the reference

01:48.610 --> 01:51.440
to the array to the newly created race.

01:51.520 --> 01:55.790
We've only added more information to the old array.

01:55.830 --> 01:58.990
Now we are interested in the change of the reference.

01:59.020 --> 02:02.590
So which is used for arrays and objects.

02:02.590 --> 02:05.500
That means that no changes will be detected.

02:05.500 --> 02:08.920
If we add new elements as we have done so here.

02:08.920 --> 02:15.100
So as you can see it's being added in Jason but it's not being added It's not being displayed here so

02:15.100 --> 02:20.530
it's not actually being detected even though the change is taking place.

02:20.620 --> 02:21.850
This basically means

02:24.520 --> 02:28.360
changes will only be detected if we actually change the reference to an array or an object.

02:28.450 --> 02:30.190
But this has not occurred.

02:30.190 --> 02:34.960
We have only updated the old array and the reference to the array has remained the same.

02:34.990 --> 02:42.340
This basically means that the current array has been if a reference or a reference change occurs that

02:42.340 --> 02:46.460
would mean that the current array has been replaced with a new array.

02:46.600 --> 02:49.030
And then the reference to it has changed as well.

02:49.060 --> 02:53.530
Hence we have the words.

02:53.830 --> 02:56.710
Hence we have the copy.

02:57.350 --> 03:03.390
Hence we have the method for the copying of the arrays and updating them.

03:03.470 --> 03:08.860
So why are why why would you have such a terrible limitation here.

03:09.110 --> 03:19.600
Well it improves performance by a very good margin and you can check out the console log file just scroll

03:19.610 --> 03:27.530
it means that the pipe transform has been called and the three times even though I have added so many

03:27.530 --> 03:29.280
transactions here.

03:29.730 --> 03:32.620
But I'm just going to go ahead and refresh the site

03:35.780 --> 03:39.550
and ok by transform has been called once.

03:39.560 --> 03:47.100
Now I am going to go ahead and change this to false and hence create an impure pipe

03:49.900 --> 03:52.780
fulls just to control us to save

03:55.530 --> 03:58.580
and just give it time for the site to load.

03:58.980 --> 04:02.510
And before I type in bills here look at this.

04:02.670 --> 04:04.410
It was only once before.

04:04.410 --> 04:10.980
Now a simple reload of the site causes the pipe transform to be called for tightness which is a great

04:10.980 --> 04:12.640
deal.

04:12.720 --> 04:19.410
Maybe you can see the degree of performance on that small site like this but on bigger projects this

04:19.530 --> 04:22.050
rose by orders of magnitude.

04:22.440 --> 04:23.970
And that's a pretty big problem.

04:24.000 --> 04:28.200
So just type in bills one more time here and you can see it immediately jumps to eight so every page

04:28.200 --> 04:29.700
refresh or whatsoever.

04:29.850 --> 04:30.270
Pretty much.

04:30.270 --> 04:38.190
In our case causes this number to increase by 4 which is pretty bad in terms of performance as opposed

04:38.190 --> 04:44.750
to the one before as opposed to the pure pipe where this only happened once.

04:45.560 --> 04:51.770
On the other hand these impure pipes can detect pretty much any changes within the component which is

04:51.890 --> 04:59.070
an extremely common occurrence and it degrades this performance by a very large margin.

04:59.090 --> 05:07.430
So if I just click on new transaction it just grows by two screws by two so both act in the same way.

05:07.580 --> 05:15.230
So this is being added nonstop but pipe transform calls are increasing in size by a ridiculous amount.

05:15.230 --> 05:17.850
So a very large amount of increases here.

05:17.960 --> 05:23.720
So the method is being called over and over and over and over and over again which degrades the performance

05:23.810 --> 05:25.730
significantly.

05:25.730 --> 05:33.230
However it does the tect any sort of a change within the component and that is very useful and practical

05:33.590 --> 05:36.330
for from the user perspective.

05:36.680 --> 05:41.330
But now you might ask yourselves which which pipes to use.

05:41.330 --> 05:43.860
In general it's very situational.

05:43.870 --> 05:45.460
It's situation dependent.

05:45.470 --> 05:47.760
Sometimes you should use.

05:47.960 --> 05:51.480
You should use the pure pipes as much as you can to improve the performance.

05:51.680 --> 05:55.790
But when you use impure pipes you have to be really careful especially with loading of arrays and all

05:55.790 --> 06:03.000
that because a click is an event error or a key press is an event etc..

06:03.350 --> 06:10.460
And these key presses can increase the amount of method calls you have on the site and that can lead

06:10.460 --> 06:15.350
to some serious problems you just have to be really careful with impure pipes while on the other hand

06:15.770 --> 06:21.920
your pipes are fairly safe to use and fast perform much much better performance although they don't

06:21.920 --> 06:25.630
have as much capabilities as the impure pipes do.

06:26.070 --> 06:30.770
Ok going to bid you farewell here and we shall see each other in the next tutorial.
