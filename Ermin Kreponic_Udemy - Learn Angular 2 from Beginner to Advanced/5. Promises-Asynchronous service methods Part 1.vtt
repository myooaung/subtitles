WEBVTT

00:00.220 --> 00:01.430
Welcome back.

00:01.770 --> 00:10.800
So what we're going to do today is basically we're going to go ahead and create and simulation of synchronous

00:11.340 --> 00:15.660
communication with the server because we're coming to the point in time where we're going to have a

00:15.660 --> 00:18.900
server and we need to learn how to communicate with it.

00:18.900 --> 00:25.170
Now the communication between our application and the server itself it needs to be synchronous meaning

00:25.500 --> 00:32.100
that when a request towards a server is sent the entire cycle loading doesn't need to wait for the response

00:32.100 --> 00:34.020
from that server to occur.

00:34.020 --> 00:39.630
Rather instead this will be based on the on a promise that a response shall arrive.

00:39.960 --> 00:44.940
But the site will continue loading without the actual data up from the server.

00:44.940 --> 00:46.440
This increases the loading.

00:46.440 --> 00:53.960
This actually severely decreases the loading time of the site which makes the site function a lot faster.

00:55.520 --> 00:59.000
So just some general logic of things.

00:59.000 --> 01:02.030
You send the request your application sends a request towards a server.

01:02.060 --> 01:07.640
So your site is loading and at a certain point in time it needs to pool the list of accounts and it

01:07.640 --> 01:11.170
continues loading without actually having that list of accounts.

01:11.180 --> 01:18.410
Even though it's sent a request for that list of accounts but it only receives a promise that it will

01:18.470 --> 01:24.650
get them at a certain point in time in the future that we do not know but we don't know when but it

01:24.650 --> 01:26.130
will get them.

01:26.420 --> 01:31.550
And it continues loading everything else on the site without actually waiting for the response from

01:31.550 --> 01:32.010
the server.

01:32.030 --> 01:37.490
Once the response comes it renders that part of the page anyway.

01:38.240 --> 01:50.210
So we can begin from the get or method here and we're just going to go and scroll down.

01:50.370 --> 01:55.740
So we have modified our get or public method here.

01:55.740 --> 02:05.650
First of all it says your promise and an array account so OK basically promise is an object here that

02:05.650 --> 02:09.530
is used to make a synchronous programming easier.

02:09.550 --> 02:17.350
The general logic of the promise is that we basically promise that a function will execute at some future

02:17.350 --> 02:18.300
point in time.

02:18.310 --> 02:24.880
As I said what we don't know when this enables us to define basically what will happen if the function

02:24.940 --> 02:29.970
executes successfully or if it fails anyway.

02:30.070 --> 02:38.930
You have the you have the have the return here and in return it says Promise d'arte resolve.

02:38.940 --> 02:41.260
Now resolve for debt.

02:41.280 --> 02:49.290
All of that is all that that does is basically just states that the fetching of the accounts has been

02:49.350 --> 02:50.110
successful.

02:50.130 --> 02:50.590
OK.

02:50.610 --> 02:55.610
So it's a method that's going to fetch this and that's going to state it within the promise.

02:55.740 --> 03:02.280
Hey I have successfully managed to retrieve the accounts and that promise will be sent over when this

03:02.670 --> 03:04.110
function is called.

03:04.110 --> 03:07.550
So whatever is in need of these accounts we'll see.

03:07.700 --> 03:13.500
OK I promise it has succeeded in pulling it but it's going to deliver them at some future point in time

03:13.500 --> 03:16.870
I can continue on loading the site.

03:16.870 --> 03:23.280
Now this is all that was changed here really just this account just this just this function just this

03:23.280 --> 03:24.800
method.

03:25.010 --> 03:27.320
And if we go back to the app component.

03:27.460 --> 03:30.620
Yes quite a bit of things have been changed here.

03:30.640 --> 03:34.850
But nothing on there that we've done.

03:34.850 --> 03:35.240
Okay.

03:35.270 --> 03:39.860
So we're going to go over them one by one.

03:39.860 --> 03:47.450
So first of all you have a private Auray counts since we are a Synchronoss asynchronously initialising

03:47.570 --> 03:50.120
this array so accounts Auray

03:52.810 --> 03:57.090
we need to have it here and we need to make it empty.

03:57.130 --> 04:04.330
So as you can see it's completely empty there's nothing in it so that it is available for future use.

04:04.330 --> 04:08.230
Sort of became populated later point in time.

04:08.860 --> 04:15.670
Anyway if we go down these have been these two lines have been added here so we have a variable premise

04:16.210 --> 04:22.390
and this very this is basically this is going to take the contents of the GET or method.

04:22.390 --> 04:26.300
So through this logic we are calling the get or method.

04:26.380 --> 04:34.570
So the current in this represents the current instance account service that's where that's where the

04:34.570 --> 04:41.830
get or method is basically located and get all is then called any promise is delivered.

04:42.040 --> 04:45.370
And then down below have promise Da'ath then

04:48.060 --> 04:57.780
and here you're going to we're going to be actually fetching the data itself and storing it.

04:57.780 --> 05:10.810
Now what happens here is that you have a new form of you have a new form you have a new function you

05:10.830 --> 05:13.730
have a new method but promise then is also a method.

05:13.920 --> 05:19.860
So then is also a method which is the first parameter basically takes a function.

05:19.860 --> 05:21.270
So this entire thing.

05:21.300 --> 05:30.000
This is one single parameter and within the confines of this function we will define what will happen

05:30.480 --> 05:35.280
and we can also add an additional argument here to define what will happen.

05:35.280 --> 05:38.130
In case it fails as well.

05:38.130 --> 05:43.270
But we're not going to do that now we're just going to define what it what happens if it succeeds.

05:44.880 --> 05:48.500
And basically it passes.

05:48.900 --> 05:53.950
You have this is called This year this entire thing.

05:56.500 --> 05:59.060
It's not difficult to understand but it's a little bit new.

05:59.080 --> 06:00.820
Let me put it like that.

06:00.820 --> 06:02.020
So accounts.

06:02.050 --> 06:07.070
And then you have this equal graden sound which is basically an arrow.

06:07.340 --> 06:11.830
You have this that accounts equals accounts so this function is written.

06:11.830 --> 06:14.080
This is all of this is actually a function.

06:14.080 --> 06:17.050
So what I am selecting now is a function.

06:17.080 --> 06:20.430
So this is a new type a new syntax for function.

06:20.440 --> 06:31.080
It's called a lambda function or as it is referred to it has erro syntax as it is literally erro syntax

06:31.090 --> 06:33.360
you have like an arrow here.

06:34.750 --> 06:41.230
And to the left to tilt to the left of the arrow you have the parameters to the function will receive

06:42.120 --> 06:46.210
and to the right of the arrow you have the body of the function.

06:46.210 --> 06:49.250
So all of this is just the body of the function.

06:49.510 --> 06:55.660
So I don't know we have some parameter accounts and then you have this referring to the current instance

06:55.660 --> 07:05.110
of the private variable counts in which we intend to store all of the all of the data that we have retrieved.

07:05.180 --> 07:11.000
So therefore we initialize private variable accounts to the accounts here.

07:11.030 --> 07:12.170
Simple as that.

07:12.170 --> 07:19.820
So this is initialized to deaths and this is the parameter of the function.

07:20.030 --> 07:26.290
So no big no big deal but it's a little bit difficult to adjust and get used to it.

07:27.780 --> 07:36.960
OK so now that that's VOLP before before I actually move on you have underlined accounts here underlined

07:37.010 --> 07:37.900
accounts.

07:37.950 --> 07:39.000
This is the array.

07:39.150 --> 07:44.270
So all the accounts that we are fetching we're going to be storing in this array.

07:44.280 --> 07:49.190
That is how we are initializing this empty array.

07:49.200 --> 07:53.220
Anyway going to bid you farewell here and we're going to go ahead and continue in the follow up.
