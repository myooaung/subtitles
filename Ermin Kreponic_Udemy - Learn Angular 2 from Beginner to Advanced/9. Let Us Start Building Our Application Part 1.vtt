WEBVTT

00:00.160 --> 00:00.630
OK.

00:00.720 --> 00:02.760
So welcome back everybody.

00:02.790 --> 00:09.870
We're going to start building our application and this is the point in time where we will actually begin

00:09.870 --> 00:13.310
creating the code for the application.

00:13.320 --> 00:21.270
So the first thing that you need to do is clear the app component Yes or just have the same code as

00:21.330 --> 00:30.600
I do and for DML as well you need to clear it and then type in the same code that I have of course the

00:30.600 --> 00:32.100
code will be available.

00:32.130 --> 00:35.530
You will be able to find it either under the lecture or.

00:36.090 --> 00:39.420
Or just follow up the links in the introduction video.

00:39.420 --> 00:44.950
But I do believe that all of them will be under the lecture so we don't have anything to worry about.

00:45.480 --> 00:49.470
Or you can type them in type them as we go.

00:49.740 --> 00:51.090
If you want to type them as we go.

00:51.090 --> 00:53.500
Just delete everything for the time being.

00:53.730 --> 00:58.930
The entirety of the code and we'll proceed to writing it together.

00:59.880 --> 01:02.730
So we have the same files here as we had before.

01:02.850 --> 01:05.640
But what we are going to do is add another one.

01:05.940 --> 01:14.580
So we're just going to go ahead and say new file and then we're going to type in an account dot model

01:14.620 --> 01:16.250
that TS.

01:16.770 --> 01:17.540
I'd have that right.

01:17.740 --> 01:18.430
Yes.

01:19.560 --> 01:21.950
That's all that we need to do.

01:21.960 --> 01:24.520
I'll explain the moment why we're doing that.

01:24.750 --> 01:33.300
But I am going to copy paste the code primarily because I want to actually be explaining and explaining

01:33.300 --> 01:38.730
and typing is not always the best of ideas but you yourselves should really type the code in and not

01:38.730 --> 01:39.540
copy paste it.

01:39.540 --> 01:42.840
This is not complicated to type in at all.

01:44.140 --> 01:48.500
So in our application we're going to have a list of accounts.

01:48.700 --> 01:58.900
So that is why we are making our own custom type account which is basically a class similar to the similar

01:58.900 --> 02:04.420
to our interface user that we made in the previous tutorials.

02:04.420 --> 02:12.100
So since we are going to use this same type account over and over again across

02:15.030 --> 02:18.830
across different files and export it across different files.

02:18.840 --> 02:27.480
Basically we should export it and we should basically separate it in a completely different file so

02:27.480 --> 02:32.140
that we have it there and we can reuse it on and elsewhere.

02:33.100 --> 02:39.330
It so that we don't have to repeat de-code over and over again for every everywhere else where we might

02:39.330 --> 02:41.470
need discuss them types or we're going to create it here.

02:41.520 --> 02:43.300
We're going to create it in a separate file.

02:43.320 --> 02:49.960
The file will be called Account at bubble dot D.S. and then we are going to recycle this code elsewhere.

02:49.980 --> 02:53.210
That is the logic that I'm following here.

02:53.550 --> 03:02.160
So every account is going to have an ID decide it needs to be unique to accounts can not have the same

03:02.160 --> 03:06.610
ID so each account will have its own ID.

03:06.630 --> 03:08.950
This ID will be some number.

03:09.090 --> 03:13.780
So be it in yeah it's going to be a number.

03:14.070 --> 03:22.640
I don't know the first Gunst can have one that 10 billion account is going to have 10 billion etc. and

03:22.730 --> 03:29.030
this will this I.D. will be of type number.

03:29.030 --> 03:37.580
Also every account will have a title the title will be something or we can type in the first last name

03:37.580 --> 03:38.830
or something like that.

03:39.200 --> 03:42.400
But in any case every account will have a title.

03:42.410 --> 03:49.330
So we create a variable title of type string down below.

03:49.430 --> 03:52.880
Every account is going to have a description as well so that needs to be a string as well.

03:52.880 --> 03:53.650
Right.

03:54.110 --> 04:02.240
And the balance so every account is going to need to have a balance which will determine how much money

04:02.300 --> 04:04.220
does every account have.

04:04.610 --> 04:09.980
And all these are publics because we're going to be using them extensively elsewhere.

04:09.980 --> 04:16.760
So we've placed them into public really and in such a way we're going to be able to recycle them as

04:16.760 --> 04:22.790
much as we want and of course export glass is very important because as I said we want to be able to

04:22.790 --> 04:24.310
use this elsewhere.

04:24.650 --> 04:27.610
Now down below we have a constructor.

04:27.620 --> 04:33.680
Now what does a constructor constructor is a special type of a method which will be used to create an

04:33.680 --> 04:36.230
object of this type.

04:36.380 --> 04:44.410
We basically it's the syntax is pretty much the same as for a method if not the same by it's the same.

04:44.600 --> 04:53.000
So you type in public constructors should be public and they type in constructor ID and then type number

04:53.000 --> 05:02.860
title and then the type String description type string balance type number and these will be used to

05:02.860 --> 05:05.400
set the properties of these values.

05:05.570 --> 05:08.340
Set to set the values of these properties.

05:08.770 --> 05:14.260
Often constructors can have additional logic other than sheer initialization.

05:14.590 --> 05:20.330
You can do in them pretty much everything you can do inside of methods as well.

05:20.500 --> 05:26.730
And its goal is set is to set the values of properties set to proper values.

05:26.740 --> 05:28.820
So how does this function.

05:29.410 --> 05:36.070
Well this constructor will be called somewhere in the code not in the not in this model to be called

05:36.100 --> 05:37.440
elsewhere in the code.

05:37.510 --> 05:43.230
So each time this constructor is called a different instance of this class will be created.

05:43.990 --> 05:50.760
And since each instance instance in each instance the values are pretty much should be different anyway.

05:50.800 --> 05:56.370
They can be the same but each each instance will have its own variables at will.

05:56.380 --> 06:03.500
Properties will have these properties and for each instance these properties values can be different.

06:03.580 --> 06:12.760
So when this constructor is called these arguments are passed to it and then these arguments are used

06:12.760 --> 06:20.010
for initialization and restating this Daut ID is equal to this one.

06:20.350 --> 06:30.370
So we pass ID to constructor and then that ID is used to initialize an ID here and over and over again

06:30.880 --> 06:37.630
the values are not the properties are not being overwritten each time a new one is created for every

06:37.630 --> 06:41.890
instance of the class and that is how we basically initialize them.

06:41.890 --> 06:51.690
So once again you pass an ID here and then that ID is used so this and this corresponds and then that

06:51.760 --> 06:58.590
ID is used to initialize the ID of the current instance of the class.

06:58.900 --> 07:03.060
So basically you're going to have more than one account you're going to have like 10 15 accounts in

07:03.130 --> 07:08.320
each one of those 10 15 accounts is going to need to have an ID title or a description and a balance

07:08.620 --> 07:12.430
and each one of those accounts is going to be a different instance of the class so therefore we need

07:12.430 --> 07:18.580
to initialize these values every time a new account is created or every time a new instance of this

07:18.580 --> 07:20.660
class is created.

07:21.190 --> 07:25.640
OK so we've created our accounts account modeled our teams.

07:25.660 --> 07:29.070
We're going to go ahead and move on continue in the follow up tutorial.
