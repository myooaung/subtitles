WEBVTT

00:00.310 --> 00:01.280
OK.

00:01.350 --> 00:02.520
Welcome back.

00:02.520 --> 00:09.800
So today we're going to go ahead and talk about basically local variables.

00:09.810 --> 00:15.510
Again we are going to deal with the same applicant with the same thing with the same things but the

00:15.510 --> 00:20.280
same general outline and I'm just going to talk about local variables.

00:20.280 --> 00:26.900
I have changed a few things here actually quite a bit and we'll see how that actually works.

00:26.910 --> 00:33.240
So pretty soon we will actually go into building a real application I do believe that it should be in

00:33.240 --> 00:38.850
like two one or two more chapters and then we're going to start building the application after after

00:38.850 --> 00:45.040
we have went over some of the very very very basic things.

00:45.070 --> 00:49.820
So some of the things that are different here.

00:50.170 --> 00:54.340
I mean you will have the code of course so you can take a look at it and you can take a look at it on

00:54.340 --> 00:55.080
the screen as well.

00:55.080 --> 00:56.490
That's the best way actually.

00:56.500 --> 01:01.930
But if you want to just copy paste it from some from the links that will be provided you absolutely

01:01.930 --> 01:03.290
can do that as well.

01:03.760 --> 01:07.360
So again we have this class.

01:07.360 --> 01:19.090
There is this private some sort of a variable here property and down below we have tables before change

01:19.180 --> 01:20.270
mail.

01:20.470 --> 01:27.530
But aside from Changed mail right below it is a key press function.

01:27.550 --> 01:35.490
Now this is going to actually serve us rather well because this method does not return anything and

01:35.530 --> 01:42.250
it accepts a parameter which is actually a keyboard event so it can detect when you press a key on your

01:42.340 --> 01:44.140
keyboard.

01:44.990 --> 01:46.750
The if statement here.

01:46.880 --> 01:51.100
So it first receives a keyboard event some sort of a keyboard.

01:51.610 --> 01:57.970
And then there's an if statement which checks whether or not the key code from the event is equal to

01:58.150 --> 01:59.440
13.

01:59.440 --> 02:00.610
Now what is 13.

02:00.820 --> 02:06.420
Well which which key on the keyboard do you think that 13 represents.

02:06.420 --> 02:11.320
Well you can look it up on the net if you want to answer your answer questions for yourselves but it

02:11.320 --> 02:15.710
represents enter so it presents to return key on your keyboard.

02:15.970 --> 02:18.120
Here Actually I might just show you quickly.

02:18.310 --> 02:25.840
You can just type in the MLT codes and open up pretty much any site I have opened up this one CSSA tricks

02:25.930 --> 02:32.590
dot com and you get the list of values and corresponding key.

02:32.600 --> 02:39.930
So you see backspace would be a tab would be 9 enter would be 13 shift 16 extra.

02:39.940 --> 02:46.020
So you even have the key codes for letters.

02:46.100 --> 02:52.700
Decimal points and function keys you have you have you have these keys for everything you have that

02:52.750 --> 02:58.690
you have the codes for each and every key on the keyboard or you should have in any case.

02:58.780 --> 03:02.490
So I'm just going to go ahead and close that.

03:02.500 --> 03:05.460
You also have the ASCII table you can take a look at it there if you wish.

03:08.050 --> 03:10.280
13 should still be the entry.

03:10.360 --> 03:16.060
But here it says carriage return at the entry is basically the return key.

03:16.210 --> 03:17.830
The way I put it in anyway.

03:18.460 --> 03:24.340
So it checks whether the event key code is 13 basically checks whether the user has pressed enter or

03:24.340 --> 03:30.130
not if you press anything else obviously it's not going to have the return value or the key code will

03:30.130 --> 03:34.870
not be 13 it will be something else as you could as you just saw on the site.

03:34.890 --> 03:43.510
Then we have some sort of a variable called input element and this TELLEMENT has basically event target

03:43.540 --> 03:45.500
gets our element.

03:45.880 --> 03:53.830
And then we need to cast event or target which is an HD M-L element to input element.

03:54.250 --> 03:58.380
Casting is basically converting something to something else.

03:58.420 --> 04:04.230
So if any of you are familiar with C++ or some programming languages fairly similar to that casting

04:04.240 --> 04:06.210
would look something like this.

04:06.720 --> 04:09.050
Is just pseudo code this is not real code.

04:09.130 --> 04:10.920
If I say 2.2.

04:12.130 --> 04:18.970
Basically point two as I said this is not legit code this is just pseudo code 2.2 which is a double

04:19.080 --> 04:26.200
A-type double in C++ meaning that its like it has this part and this part of floating point in C++ would

04:26.200 --> 04:27.810
be 0.2 for example.

04:28.030 --> 04:29.060
But that does not matter.

04:29.230 --> 04:31.910
What matters is that this is a method.

04:31.930 --> 04:34.690
This is a way of converting things.

04:34.690 --> 04:36.220
So since this is of type double.

04:36.220 --> 04:39.320
This is going to get converted to type and type in it.

04:39.610 --> 04:48.070
Well the small portion of it will get truncated so it will 2.2 will become two.

04:48.070 --> 04:50.160
This is of course all irrelevant for you now.

04:50.170 --> 04:55.730
I'm just trying to explain what is going on here in simpler terms.

04:55.780 --> 05:00.260
So we're basically converting this into this.

05:00.280 --> 05:05.040
Well the return value of this into this type.

05:05.260 --> 05:13.150
So we need the we need this we need this event our target that gets our element we need to cast that

05:13.420 --> 05:15.790
into a an input element.

05:15.790 --> 05:21.130
So this is this will be NHT MLA element and then we need to cast that to an input element.

05:21.130 --> 05:26.990
So as I said casting is basically just converting things then down below.

05:27.030 --> 05:32.720
Therefore I will very soon correlate this with the HDMI code and things will become a lot clearer.

05:32.720 --> 05:40.890
Dan so down below we simply call the change mail function or method and then we pass to it the input

05:40.900 --> 05:42.490
element dot value.

05:42.760 --> 05:46.530
So we do it this we pass this parameter to it.

05:46.810 --> 05:50.030
And this will be a string and change e-mail.

05:50.050 --> 05:57.750
We'll then basically perform its logic where the current user e-mail will be changed.

05:57.750 --> 06:04.530
Hence this value here will become I don't know something else something that we input on the screen

06:04.860 --> 06:05.900
in the problem.

06:06.070 --> 06:12.730
Now let's go ahead and correlate this with our HMO code and see what is going on there.

06:12.840 --> 06:17.330
Let me just see if I can do this.

06:17.390 --> 06:19.830
Close tabs right.

06:19.880 --> 06:27.300
Closed see tabs split up split down case I'm just going to do a split like this.

06:27.310 --> 06:33.400
The split of the screen so that you can actually see things a little bit better in terms of correlating

06:35.320 --> 06:41.510
the amount HDMI is going to be down below so that we can i just want to be able to see the methods down

06:41.510 --> 06:41.980
below.

06:42.020 --> 06:49.250
And here you will be able to see the HD M-L code anyway.

06:49.690 --> 06:55.780
So again there are a few things that are different here the very first thing that you will notice and

06:55.780 --> 07:01.900
the very thing that I wish to explain here is this referencing here so check this part out.

07:01.930 --> 07:04.930
This does this separation here.

07:05.320 --> 07:12.130
So we have some sort of an element which is basically input and it accepts text but we are creating

07:12.130 --> 07:13.300
new reference to it.

07:13.330 --> 07:22.900
Angular 2 allows for references to elements to each DML elements inside of the template we declare a

07:22.910 --> 07:30.440
reference by basically using a hash and then I don't know name of reference it doesn't need to be.

07:30.440 --> 07:37.880
It can be like test or whatever you can type in pretty much as long as you stay true to some naming

07:37.880 --> 07:41.460
conventions and rules anyway.

07:42.050 --> 07:49.520
Immediately down below we're stating that the value of input is a dot value.

07:50.420 --> 07:53.810
So our value gets the value from the input above.

07:53.810 --> 07:56.390
So from here we type something in.

07:56.390 --> 08:02.330
So we type some sort of a text in and then we were retrieving that text and we're going to retrieve

08:02.330 --> 08:05.690
it by interpellation which we have learned previously.

08:07.000 --> 08:14.170
So a is the element and the value is the value of element or whatever we've typed in.

08:14.170 --> 08:16.660
So that's that's what a represents here.

08:18.480 --> 08:20.720
Anyway this is not going to work.

08:20.850 --> 08:24.170
So this is clearly a wrong example.

08:24.170 --> 08:25.010
This is not going to work.

08:25.020 --> 08:28.630
It's missing something it's missing an event.

08:28.650 --> 08:29.340
Why.

08:29.340 --> 08:36.070
Because basically if we do not call any events nothing's going to happen no changes will be detected.

08:36.300 --> 08:40.950
Only when an event is triggered will Engler actually check for any changes.

08:40.950 --> 08:45.600
If it does not check for any changes it doesn't matter if we have enacted those changes or not.

08:45.780 --> 08:51.220
And ular 2 will not Shank's will not check for them and hence nothing is going to happen.

08:51.230 --> 08:53.440
Nothing is going to be displayed on the site for us.

08:53.510 --> 08:58.810
That's nothing that has happened in that sense immediately down below.

08:58.880 --> 09:00.860
I have a right example of it.

09:00.860 --> 09:07.250
And the only thing that's the only thing that separates the wrong from the right here is this.

09:07.250 --> 09:14.810
So this part here so 8.5 you again get again we'll get the value.

09:14.850 --> 09:22.220
Well not sorry not a value the data value will again get the value from this input and I don't know

09:22.220 --> 09:28.340
if we type in some text like hello throw or blah blah blah that's what's going to go here but we have

09:28.430 --> 09:29.510
this event.

09:29.660 --> 09:36.620
This is the only reason that this works because we called an event and it's not just any event because

09:36.680 --> 09:39.770
I mean you need to call an event but you don't actually need an event for anything.

09:39.770 --> 09:40.820
So what do you do.

09:41.030 --> 09:45.560
Well you call a so-called stupid event a stupid event.

09:45.650 --> 09:50.120
Well it is an event that basically is called and does literally nothing.

09:50.120 --> 09:53.050
So it does not interfere with us in any way manner or form.

09:53.240 --> 09:54.140
Why do we need this.

09:54.140 --> 10:00.350
Because as I said Engler will only check for changes if an event was omitted if it was not.

10:00.380 --> 10:04.120
If we do not do that no changes will be detected.

10:04.120 --> 10:13.700
A completely pointless fact with me just go ahead and save this save us and wait for the loading Ah.

10:13.990 --> 10:17.520
The beautiful speed.

10:17.590 --> 10:23.780
So we have the first one so we're looking at the first one.

10:23.790 --> 10:28.300
So Dave imper tax day value of input is there.

10:28.740 --> 10:40.130
OK so let's type something in LA LA LA LA LA LA and we click value of input is la la la la.

10:40.140 --> 10:43.780
OK so this apparently works.

10:43.840 --> 10:48.070
But let me just button test value of this test.

10:48.110 --> 10:55.330
Again they work but it should be actually outputting it it should be actually outputting it without

10:55.330 --> 10:59.170
me without me doing the clicking test.

10:59.200 --> 11:02.300
Nothing but la la la la.

11:02.350 --> 11:04.120
And changes are detected.

11:04.150 --> 11:10.190
So when I click I have obviously called some sort of an A and therefore this is displayed.

11:10.210 --> 11:13.350
But if I just type in I don't know why why why why.

11:13.390 --> 11:14.070
Nothing happens.

11:14.080 --> 11:19.510
But if I type it y y y y down below you see they both will change this one.

11:19.510 --> 11:26.630
This one here will reflect the changes here and this one here will this one here basic.

11:26.650 --> 11:30.490
Sorry this one here will reflect the changes here if you don't believe me let me just say you like I'll

11:30.490 --> 11:33.450
type in D D D D D and you see it happens there.

11:33.460 --> 11:40.320
But if I type something in here like 4 4 4 4 nothing happens there are no changes which have been enacted.

11:40.480 --> 11:47.350
But again R R and when an event is called angular to we'll check for any changes within the component

11:48.220 --> 11:49.560
within one whole.

11:49.570 --> 11:55.210
So to say this is regard to click that's gonna work and actually come to that.

11:55.210 --> 12:00.070
Obviously if you click you called and you've called another event here so therefore the changes are

12:00.160 --> 12:07.390
reflected and any event that's basically called it's going to trigger checking for changes.

12:07.490 --> 12:13.010
But just this regard the total click here because that's something that we're going to come to in a

12:13.010 --> 12:18.430
fair amount of time anyway anyway as I stated we're looking at this first.

12:18.440 --> 12:24.530
So Dave imper type equals text reference and then the value is we're using the reference to get the

12:24.530 --> 12:27.080
value and that value.

12:27.080 --> 12:35.390
We're expecting it to be printed out right underneath the input so if I type in 2 2 2 2 2 a piece Ah

12:35.480 --> 12:38.120
good amount of twos nothing happens.

12:38.120 --> 12:40.970
It's not displayed but look at the code down below.

12:41.090 --> 12:45.000
It's exactly the same ups.

12:45.100 --> 12:46.000
My apologies.

12:47.720 --> 12:50.660
If I just do this now.

12:50.710 --> 12:51.680
Yes.

12:51.710 --> 12:54.590
Be OK.

12:56.630 --> 12:59.840
We're going to get to all of these elements doesn't matter anyway.

12:59.900 --> 13:02.110
You look at this code up above the first day of.

13:02.260 --> 13:06.380
And then you look at the second is and there are exactly the same except for the key.

13:06.380 --> 13:09.510
Up equals zero except an event is called here.

13:09.530 --> 13:13.130
So if I type things in here nothing's going to happen.

13:13.220 --> 13:18.980
I have them typed in there unless an event is called and angular to will not detect any changes.

13:18.980 --> 13:21.290
In fact it will not even attempt to detect any changes.

13:21.290 --> 13:25.730
And this paragraph will not be printed out onto the screen.

13:26.210 --> 13:31.010
If any event is called within the component it should be like that anyway.

13:31.510 --> 13:39.790
E-5 just typed in 1 1 1 1 1 ones get printed out and to get printed out because angular too has detected

13:39.880 --> 13:43.540
the change above as well it detects all the changes.

13:43.540 --> 13:48.920
So this is for the second input and the first is for the first.

13:49.180 --> 13:53.790
I know it can seem a little bit confusing I'll give my best to explain it to the best of my abilities.

13:54.190 --> 13:58.200
But if you have any questions feel free to post them in the Q&amp;A section.

13:59.500 --> 14:10.480
Anyway let's just minimize this and let's go ahead and check to check the rest of the things out.

14:10.700 --> 14:15.800
The to go up there click that was a leftover from the previous tutorial.

14:15.820 --> 14:21.700
You can see the code here but that has already been explained extensively in the previous tutorial.

14:21.700 --> 14:25.250
Why is it so and how it actually works.

14:26.960 --> 14:31.030
Anyway I'm going to go ahead and pause the video here because it's getting rather lengthy and then we're

14:31.040 --> 14:35.360
going to proceed from here onwards down to the bottom.
