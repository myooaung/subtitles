WEBVTT

00:00.480 --> 00:01.740
Welcome all.

00:01.740 --> 00:10.350
So today we're going to begin a chapter on services so services in angular are basically some sort of

00:10.410 --> 00:19.700
a logical layer that we in our case basically showed use for communication with the server.

00:20.280 --> 00:27.800
They contain a logic and we make them as reusable as possible.

00:28.300 --> 00:32.970
We need to we also use them for manipulation for any sort of manipulation with data.

00:32.980 --> 00:43.620
So we create services and then those services are utilized by other by basically by by basically components

00:43.660 --> 00:51.340
by classes by whatever fragments from them are utilized and used to manipulate the data and to communicate

00:51.340 --> 00:55.850
with the server and they're used for some other things as well in general.

00:56.380 --> 01:05.940
So can we get up on the net but like the definitions that I've found I really think that there are inappropriate

01:05.940 --> 01:09.340
for anyone who is in the beginning stages.

01:09.660 --> 01:13.190
Rather it's that we can look at them like this in a simpler way.

01:13.290 --> 01:17.880
And if you want you can just type in services angular Yes you don't need to look up services dangler

01:17.880 --> 01:20.450
to just type in angular japes services.

01:20.660 --> 01:26.550
And you will get the official definition and the documentation.

01:26.550 --> 01:31.770
Although as I said I find it a little bit complex anyway so I try to simplify it as much as I could

01:32.330 --> 01:37.610
anyway so the thing that we're going to need to do is right click on app and we're going to go ahead.

01:37.800 --> 01:38.980
Sorry.

01:39.660 --> 01:44.990
We're going to go ahead and right click on account and we're going to go ahead and say new.

01:45.060 --> 01:47.490
Right click on account not an app.

01:47.490 --> 01:56.940
And here we're going to create a new file which will be ups going to go ahead and click on your file

01:56.940 --> 02:00.280
again and this will be a code dot services Dot.

02:00.380 --> 02:01.370
Yes.

02:01.860 --> 02:07.470
So press enter and this is an empty file for the time being I have the code here and notepad does a

02:07.470 --> 02:09.320
horrendous job.

02:14.250 --> 02:19.980
I'm just going to go ahead and copy this and I'm going to delete this notepad there's a horrendous job

02:19.980 --> 02:24.750
with copy paste operations like when you copy something into Notepad it's all in a single line which

02:24.750 --> 02:26.490
is horrible.

02:26.520 --> 02:30.410
Can't believe they can make a proper text editor anyway.

02:30.810 --> 02:32.780
So you're going to have this code of course.

02:32.790 --> 02:37.530
I strongly advise you to actually type it in yourselves.

02:37.530 --> 02:42.690
I'm only copying it for the convenience sake because it is much easier to just talk about the code as

02:42.690 --> 02:46.230
opposed to write and talk about the code at the same time.

02:46.230 --> 02:50.450
I mean at a certain point of time this code had to be written it didn't write itself.

02:50.700 --> 02:58.050
So police even though you have the code try to rewrite it yourselves anyway.

02:58.380 --> 03:00.600
So let's go ahead and begin from the top.

03:00.600 --> 03:04.990
You have this it says injectable for God's sakes for rejecting.

03:05.170 --> 03:10.670
Well injectable is basically a decorator which enables us to inject a class.

03:10.680 --> 03:13.430
What does this mean inject class.

03:13.440 --> 03:21.750
Well it means that other classes just specify that they will use certain services and angular takes

03:21.750 --> 03:26.220
care of the way that they are passed to those classes.

03:26.220 --> 03:32.220
So classes they specify that they will use services and then angular takes care of the way that those

03:32.220 --> 03:37.500
services are basically passed to those classes that are passed in a proper way.

03:37.680 --> 03:40.780
But we will talk about this a little bit more later on.

03:40.780 --> 03:42.120
I just wanted to mention that here.

03:42.150 --> 03:44.220
That is what injectable means.

03:44.370 --> 03:45.090
So once again

03:49.140 --> 03:55.230
classes specify that they will use certain services so you have a class and that class specifies hey

03:55.290 --> 04:02.310
I want to use the service and then Engler takes care of the journey takes care of the way that those

04:02.310 --> 04:05.610
services are passed to those classes.

04:05.850 --> 04:11.070
And that is basically what it means to make a class injectable.

04:11.600 --> 04:12.210
OK.

04:12.630 --> 04:18.160
So let's go into hopefully the good here.

04:18.390 --> 04:21.030
I hope that I did just that explanation.

04:21.060 --> 04:23.790
That's like my simplified version of things.

04:23.790 --> 04:30.120
If you want the official definition of an injectable decorator go onto the net and type in angular gyrus

04:30.120 --> 04:35.610
injectable decorator and you will get some extensive documentation there which you can feel which of

04:35.610 --> 04:37.840
course you can read through.

04:38.300 --> 04:38.870
OK.

04:38.910 --> 04:43.850
So next up this import account you know this like from a kind of model.

04:43.860 --> 04:45.370
We did that before.

04:45.530 --> 04:51.580
Anyway here we have our first example of at injectable decorator so we can place this decorated before

04:51.660 --> 04:52.680
before the class.

04:52.680 --> 04:57.160
This is the syntax that you need to follow it needs to be placed before the class.

04:57.720 --> 05:04.730
And once this class once this and the creator is placed there then we are effectively making this class

05:04.800 --> 05:06.020
injectable.

05:06.060 --> 05:10.460
So this refers to this class.

05:10.860 --> 05:15.740
And if you placed another class down below it would not be referring to that class at all.

05:15.750 --> 05:19.870
If you place that low class above it wouldn't be referring to that class either.

05:19.890 --> 05:22.580
It just refers to a class directly below it.

05:23.820 --> 05:30.660
Anyway this is something this array we're basically utilizing for the time being to basically act as

05:30.720 --> 05:32.400
our temporary database.

05:32.550 --> 05:37.680
But don't worry we will get to the portion where we will actually have a date where we will have an

05:37.680 --> 05:38.450
actual database.

05:38.460 --> 05:42.050
But I didn't want to like burden Nouba debt straightaway.

05:42.810 --> 05:47.310
So we're just using this as some sort of a simulation but we'll get to the point where we'll have an

05:47.310 --> 05:49.070
actual database.

05:49.110 --> 05:54.210
Now this public method here this is a private one and this is not going to get access to outside of

05:54.210 --> 05:54.990
this.

05:55.110 --> 05:58.160
And do you have export class account services.

05:58.170 --> 06:02.010
It's pretty much all the functionalities of it are known to you.

06:02.010 --> 06:05.860
We're just moving something from one place to the other.

06:05.880 --> 06:07.780
Basically you notice the Re.

06:08.040 --> 06:16.900
And to get to or public method get all it just returns all the accounts that are within this array.

06:16.910 --> 06:20.790
So that's all that it is doing nothing else.

06:20.960 --> 06:27.380
Then you have the next ID as before you have public create you have public remove all of these.

06:27.470 --> 06:32.190
I have explained extensively and we have went over them anyway.

06:32.390 --> 06:38.550
The next thing that you will need to do is modify app component TS file.

06:38.690 --> 06:45.560
So this one I'm just going to go ahead and control it and delete everything in sight and then I'm going

06:45.560 --> 06:54.460
to go ahead and copy the one from Pad fully it's going to keep you in the proper way.

06:55.350 --> 06:56.230
OK.

06:57.190 --> 06:58.640
Sort of the end.

06:58.650 --> 07:04.770
But there was a school like modification that I need to create here.

07:06.840 --> 07:08.490
Account Services.

07:08.510 --> 07:09.590
There seems to be a problem.

07:09.590 --> 07:13.170
They all just go out and save it and save this one as well.

07:16.580 --> 07:20.910
Come on service is OK.

07:20.910 --> 07:21.240
There we go.

07:21.240 --> 07:25.030
So just a little bit of mis spelling on my end.

07:26.160 --> 07:27.220
Hate this file.

07:27.230 --> 07:29.280
You don't need to write anything for the time being.

07:29.300 --> 07:32.050
We're going to get to this file in the follow up to Tauriel.

07:32.050 --> 07:34.720
And now explain pretty much one vine at a time.

07:34.740 --> 07:37.280
And what on earth is it that happened here.

07:37.280 --> 07:44.570
Because as you can see we've pooled certain things from the app component class and they have been quite

07:44.570 --> 07:46.560
literally placed here.

07:47.540 --> 07:53.260
Indy accounts service class which has also been exported so it can be used elsewhere.

07:53.540 --> 07:55.240
We're just going to go over these things.

07:55.250 --> 07:58.100
But there is very little that is new here.

07:58.100 --> 08:04.410
We've just reformatted this in preparation to what is to come because we're enabling services.

08:04.550 --> 08:09.680
We're going to start utilizing services we will use them for the store the logic of our application

08:09.690 --> 08:13.900
will use services basically to store the logic of our application.

08:14.000 --> 08:20.090
And it's again where again we are dealing with the separation of the code.

08:20.240 --> 08:25.650
So certain things will be performed by certain certain things will be performed by certain components.

08:25.670 --> 08:33.440
But now we are just transferring the logic of the entire application into the services files.

08:34.200 --> 08:34.670
OK.

08:34.890 --> 08:38.450
So we're going to bid you farewell here and hope to see you in the fall of Tauriel.
