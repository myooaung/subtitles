WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.260 --> 00:00:03.900
The styling for our project is pretty much now in place,

00:00:03.900 --> 00:00:06.090
there's just a little to come back to later on.

00:00:06.090 --> 00:00:09.105
When we add this section down at the very bottom.

00:00:09.105 --> 00:00:11.550
Well, for now though, we're going to move on to add in

00:00:11.550 --> 00:00:14.565
our script file to introduce some JavaScript.

00:00:14.565 --> 00:00:16.170
In particular, in this video,

00:00:16.170 --> 00:00:21.405
we'll capture the user's input and then update our last seven days.

00:00:21.405 --> 00:00:26.265
The first thing we need to do inside of our project is to create a new file,

00:00:26.265 --> 00:00:29.880
which is going to be this script.js.

00:00:29.880 --> 00:00:35.250
The first thing to do is to link this down at the very bottom,

00:00:35.250 --> 00:00:38.340
just above our close and body section.

00:00:38.340 --> 00:00:41.740
We can link this with the script elements.

00:00:42.110 --> 00:00:46.705
This is also in the [inaudible] project alongside our index.

00:00:46.705 --> 00:00:50.495
We can just reference this with script.js.

00:00:50.495 --> 00:00:54.730
Let's take a quick moment to think about exactly what we want to do here.

00:00:54.730 --> 00:00:59.060
We have a form input just here where the user will add the value.

00:00:59.060 --> 00:01:02.605
We want to listen out for any form submissions.

00:01:02.605 --> 00:01:06.290
Once this happens, we don't want to run a function.

00:01:06.290 --> 00:01:09.865
Let us start with this of in this script.js.

00:01:09.865 --> 00:01:14.410
The first thing to do is to grab a reference to our form.

00:01:14.410 --> 00:01:19.060
For this form section, we now need to listen out for the submit event.

00:01:19.060 --> 00:01:22.450
The submit event will be called each time the user hits

00:01:22.450 --> 00:01:27.880
enter inside this input or clicks on our submit button.

00:01:27.880 --> 00:01:32.030
In the script, let's create a reference to this form.

00:01:32.030 --> 00:01:37.330
Const form. All form reference is always going to stay the same.

00:01:37.330 --> 00:01:42.505
This can be used as a constant within a target, the full document.

00:01:42.505 --> 00:01:46.070
Then we can use the query selector.

00:01:47.030 --> 00:01:51.505
Query selector is a way to capture HTML elements,

00:01:51.505 --> 00:01:54.969
and we can capture any of the elements in our HTML.

00:01:54.969 --> 00:01:58.780
The way we do this is exactly the same as our style sheets.

00:01:58.780 --> 00:02:00.340
If we target any elements,

00:02:00.340 --> 00:02:03.040
we reference the elements by the name.

00:02:03.040 --> 00:02:07.005
If it's a class, we use the dot followed by the class name.

00:02:07.005 --> 00:02:08.890
If it was a ID,

00:02:08.890 --> 00:02:11.690
we would use the hash prefix.

00:02:11.780 --> 00:02:15.910
Since our form, is just simply a form element.

00:02:15.910 --> 00:02:17.945
We can target this.

00:02:17.945 --> 00:02:20.975
Then we want to add an event listener.

00:02:20.975 --> 00:02:24.830
The events in which you want to listen for is the submit event.

00:02:24.830 --> 00:02:27.170
Then we want to run a function.

00:02:27.170 --> 00:02:31.805
We add the name of our function as the second value separated by a comma.

00:02:31.805 --> 00:02:35.420
The function name is going to be a handle submit.

00:02:35.420 --> 00:02:39.620
We haven't created this handle submit function just yet.

00:02:39.620 --> 00:02:41.330
Just above our event listener,

00:02:41.330 --> 00:02:43.350
we can create this now.

00:02:47.210 --> 00:02:50.295
Handlesubmit is going to take in

00:02:50.295 --> 00:02:55.895
the event information which is passed to the function each time form has been submit.

00:02:55.895 --> 00:02:58.635
The first thing we want to do is to grab

00:02:58.635 --> 00:03:02.645
this event information and then call prevent default.

00:03:02.645 --> 00:03:05.825
Prevent defaults will prevent the default behavior of

00:03:05.825 --> 00:03:09.440
the form submission which is to reload the browser.

00:03:09.440 --> 00:03:12.110
For this use case, we don't want to refresh

00:03:12.110 --> 00:03:15.755
the browser since all of our information will be lost.

00:03:15.755 --> 00:03:21.505
Instead what we want to do is to actually capture the user inputs from this field here.

00:03:21.505 --> 00:03:24.525
Again, let's use querySelector.

00:03:24.525 --> 00:03:27.615
This is going to grab our form input.

00:03:27.615 --> 00:03:33.850
We could either grab this using the input name or also buy the ID of entry.

00:03:34.280 --> 00:03:41.030
So document.querySelector. Just like with CSS,

00:03:41.030 --> 00:03:44.630
we target this with the hash and then the ID name.

00:03:44.630 --> 00:03:51.599
We can then grab the value and also store this inside of a variable or a constant.

00:03:52.430 --> 00:03:56.480
If you remember from early when we created the Tip calculator,

00:03:56.480 --> 00:03:59.960
one of the problems which we had when we grabbed the information

00:03:59.960 --> 00:04:04.265
submitted by the user was the value came in the form of string.

00:04:04.265 --> 00:04:06.200
Since we work with numbers,

00:04:06.200 --> 00:04:08.840
we want to convert this to be a number type.

00:04:08.840 --> 00:04:12.380
That could be this,

00:04:12.380 --> 00:04:14.885
I'm going to convert this string value to be number,

00:04:14.885 --> 00:04:18.500
bypassing this into the JavaScript number function.

00:04:18.500 --> 00:04:21.800
Before moving on, let's do a console log with the value of

00:04:21.800 --> 00:04:25.440
entry and check everything is working fine.

00:04:27.160 --> 00:04:31.280
Right-click Inspect and we can go into the console.

00:04:31.280 --> 00:04:33.665
Click the console tab.

00:04:33.665 --> 00:04:37.180
Let's add some random numbers inside here.

00:04:37.180 --> 00:04:41.740
So 1.2,

00:04:41.740 --> 00:04:45.170
6.4, meaning we now successfully listening for

00:04:45.170 --> 00:04:49.190
a submit event and also capturing the user's input.

00:04:49.190 --> 00:04:52.340
There's also a couple of ways we can improve on this if we go

00:04:52.340 --> 00:04:55.670
over to our input and type the value of zero,

00:04:55.670 --> 00:04:59.095
we still see that the value of zero is still logged.

00:04:59.095 --> 00:05:02.210
This could cause a problem if the user was hit enter by

00:05:02.210 --> 00:05:05.420
accident before inputting their value.

00:05:05.420 --> 00:05:07.835
Also each time a value is added,

00:05:07.835 --> 00:05:12.805
we also want to clear this form so it's available for the next entry.

00:05:12.805 --> 00:05:14.790
Back over to our function,

00:05:14.790 --> 00:05:19.045
we can use an if statement to check if no entry has been made.

00:05:19.045 --> 00:05:21.410
Use the exclamation mark.

00:05:21.410 --> 00:05:25.970
This means if no entry is present or the value is false.

00:05:25.970 --> 00:05:28.730
Then we can use the return keyword to break out of

00:05:28.730 --> 00:05:32.420
our function since no value has been entered.

00:05:32.420 --> 00:05:38.480
The next thing to do is to clear the form input each time a value has been submit.

00:05:38.480 --> 00:05:40.985
First of all, let's grab all form.

00:05:40.985 --> 00:05:44.430
So document.querySelector.

00:05:45.260 --> 00:05:47.470
We can grab our form.

00:05:47.470 --> 00:05:49.655
Then we can call the reset method,

00:05:49.655 --> 00:05:56.860
which is going to clear all of our form inputs. Enter the value.

00:05:56.860 --> 00:05:59.405
Now when we enter a value and hit Enter,

00:05:59.405 --> 00:06:01.855
I will form input is cleared.

00:06:01.855 --> 00:06:05.030
With this taken care of, the next thing we want to do is to actually

00:06:05.030 --> 00:06:08.285
store all of the user values inside of an array.

00:06:08.285 --> 00:06:15.410
I'm going to initialize our array called entries and set this equal to an empty array.

00:06:15.410 --> 00:06:18.440
Notice here we use the let keyword rather than

00:06:18.440 --> 00:06:22.055
const because we want to update the values of entries.

00:06:22.055 --> 00:06:24.140
If this was said to be const,

00:06:24.140 --> 00:06:28.600
we won't be able to obtain this array by pushing new values.

00:06:28.600 --> 00:06:31.790
Now the way to actually add a new value inside of

00:06:31.790 --> 00:06:37.330
our empty array is to first target this by the variable name of entries.

00:06:37.330 --> 00:06:40.460
Then an array has a push method which allows us to

00:06:40.460 --> 00:06:43.490
push a new value to the end of our array.

00:06:43.490 --> 00:06:46.595
The value which you want to push is our entry,

00:06:46.595 --> 00:06:49.900
which has been captured from our user input.

00:06:49.900 --> 00:06:52.890
Let's test this out with a console log.

00:06:52.890 --> 00:06:56.870
We can now output the value of entries which is our array.

00:06:56.870 --> 00:07:03.665
Reload. Insert a couple of values inside here, let's see what happens.

00:07:03.665 --> 00:07:07.535
This will now update our array with the user inputs.

00:07:07.535 --> 00:07:08.975
With this all now working,

00:07:08.975 --> 00:07:11.750
let's remove our console log and we

00:07:11.750 --> 00:07:14.885
could carry on adding more code to this handleSubmit method.

00:07:14.885 --> 00:07:16.160
But to keep this more clean,

00:07:16.160 --> 00:07:20.779
I'm going to create a new function which is going to update our user interface.

00:07:20.779 --> 00:07:27.035
Each one of these array items is going to be pushed onto the end of our unordered list.

00:07:27.035 --> 00:07:30.470
Let's create a new function about the very top,

00:07:30.470 --> 00:07:34.050
and I'm going to call this addNewEntry.

00:07:38.440 --> 00:07:43.055
I'm also going to call this function each time the user enters a new input,

00:07:43.055 --> 00:07:46.520
also, parsing in the value of entry.

00:07:46.520 --> 00:07:50.240
This entry value will then be received inside of our function,

00:07:50.240 --> 00:07:52.460
and I'm going to call this newEntry,

00:07:52.460 --> 00:07:55.220
but the value will be exactly the same.

00:07:55.220 --> 00:07:59.930
First of all, let's do a console log with the value of the newEntry just to check

00:07:59.930 --> 00:08:05.370
we are receiving this correctly in our function. Add a value.

00:08:05.860 --> 00:08:12.240
Okay. Good. Now our function has access to each one of these user inputs.

00:08:12.280 --> 00:08:15.920
One of the great things about using JavaScript is we can

00:08:15.920 --> 00:08:19.385
also use it to create new elements in our DOM.

00:08:19.385 --> 00:08:22.400
If we go to our index.html,

00:08:22.400 --> 00:08:27.410
so far we've been creating all of these elements inside of our HTML page.

00:08:27.410 --> 00:08:30.725
But we can also use JavaScript to create these too.

00:08:30.725 --> 00:08:33.470
The way we're going to use this in this function is we're going

00:08:33.470 --> 00:08:36.095
to target this unordered list,

00:08:36.095 --> 00:08:39.275
and then for each new number which the user adds,

00:08:39.275 --> 00:08:42.395
we're then going to create a new list item.

00:08:42.395 --> 00:08:48.360
The way to do this is by using document.createElement.

00:08:48.670 --> 00:08:51.800
When creating a new HTML Element,

00:08:51.800 --> 00:08:55.070
we can use the same element name as the opening tag.

00:08:55.070 --> 00:08:56.825
We can create an unordered list,

00:08:56.825 --> 00:08:59.375
a list item, a level 3 heading,

00:08:59.375 --> 00:09:01.100
or even a section.

00:09:01.100 --> 00:09:03.500
We are going to be using a list item,

00:09:03.500 --> 00:09:06.080
so we can push this to the end of our list.

00:09:06.080 --> 00:09:10.010
Let's start this inside of a constant called listItem,

00:09:10.010 --> 00:09:14.255
and then, next, we also need a value to go in between our elements.

00:09:14.255 --> 00:09:17.210
At the moment, this is just going to create a list item,

00:09:17.210 --> 00:09:18.755
which is just like this.

00:09:18.755 --> 00:09:22.070
But we also need to create some text content inside.

00:09:22.070 --> 00:09:27.030
We do this in JavaScript with document.createTextNode.

00:09:31.600 --> 00:09:35.525
We can parse in anything, such as a string of text.

00:09:35.525 --> 00:09:39.540
But in our case, we want to parse in the new entry,

00:09:40.890 --> 00:09:44.080
then also store this in a constant too,

00:09:44.080 --> 00:09:46.730
and we're going to call this the list value.

00:09:47.620 --> 00:09:51.860
This now leaves us with the actual elements and the contents.

00:09:51.860 --> 00:09:54.470
But these are two separate nodes.

00:09:54.470 --> 00:09:58.610
We need to actually add our list value to our list item.

00:09:58.610 --> 00:10:02.615
The way we can do this is by grabbing our listItem,

00:10:02.615 --> 00:10:05.435
and then we use appendChild.

00:10:05.435 --> 00:10:08.120
This is going to add a newChild node.

00:10:08.120 --> 00:10:11.940
Under newChild node, one we want to add is the listValue.

00:10:12.520 --> 00:10:18.290
Here, what we're basically doing is creating a list item with this first line.

00:10:18.290 --> 00:10:22.175
Then with the second line, we're creating a value from our new entry.

00:10:22.175 --> 00:10:24.965
If the user enters 2.7,

00:10:24.965 --> 00:10:27.635
this will be stored in listValue.

00:10:27.635 --> 00:10:31.340
We then append in this listValue into our listItem.

00:10:31.340 --> 00:10:36.605
This is going to grab our value and place this inside of our elements.

00:10:36.605 --> 00:10:40.355
This now leaves us with a fully constructed list item.

00:10:40.355 --> 00:10:44.450
This list item now needs to push to our unordered list.

00:10:44.450 --> 00:10:48.080
The way we can do this is by first targeting our unordered list,

00:10:48.080 --> 00:10:50.375
find the ID of entries.

00:10:50.375 --> 00:10:53.555
Outside of our function I'm going to create a constant,

00:10:53.555 --> 00:10:56.790
which is called our entriesWrapper.

00:10:57.040 --> 00:11:02.765
This is going to be equal to document.querySelector,

00:11:02.765 --> 00:11:05.610
with the ID of entries.

00:11:06.190 --> 00:11:08.420
This is our unordered list,

00:11:08.420 --> 00:11:12.065
and now we need to push the listItem, which we have here.

00:11:12.065 --> 00:11:16.220
The way we can do this is very similar to this line just here.

00:11:16.220 --> 00:11:18.515
We're going to grab our unordered list.

00:11:18.515 --> 00:11:24.300
Again, using appendChild, adding on our full listItem.

00:11:24.700 --> 00:11:28.925
This will now take our list item add this until the very end

00:11:28.925 --> 00:11:32.915
of our unordered list creating a new value at the end.

00:11:32.915 --> 00:11:35.600
Go to the browser and reload,

00:11:35.600 --> 00:11:37.460
and add some values,

00:11:37.460 --> 00:11:45.620
1.4, and these are all now added to the end of our list.

00:11:45.620 --> 00:11:48.110
This is all good. This now means our entries in

00:11:48.110 --> 00:11:50.405
our working are being pushed to our array,

00:11:50.405 --> 00:11:54.275
and we're also creating a new list item and updating the DOM.

00:11:54.275 --> 00:11:57.710
Just one little thing we need to do before we wrap this video up.

00:11:57.710 --> 00:12:03.165
These three new values which we just added will be added to the existing seven entries.

00:12:03.165 --> 00:12:06.730
We only want to keep a record of the last seven days.

00:12:06.730 --> 00:12:09.445
Each time we add a value to the end of the array,

00:12:09.445 --> 00:12:13.110
we also want to remove the first value too.

00:12:13.110 --> 00:12:16.040
The way we do this in JavaScript is

00:12:16.040 --> 00:12:18.840
pretty much the opposite of what we've just done here.

00:12:18.840 --> 00:12:24.190
Here we were grabbing the unordered list and appending a newChild element.

00:12:24.190 --> 00:12:26.290
Instead, though, we want to do the opposite,

00:12:26.290 --> 00:12:28.570
which is to remove a child.

00:12:28.570 --> 00:12:33.135
Let's do this at the start of our addNewEntry function.

00:12:33.135 --> 00:12:37.100
Grab the entriesWrapper, which is our unordered list,

00:12:37.100 --> 00:12:40.140
and then we can call removeChild.

00:12:41.140 --> 00:12:44.045
If we just simply call removeChild,

00:12:44.045 --> 00:12:47.870
JavaScript won't know exactly which child element we want to remove.

00:12:47.870 --> 00:12:51.890
By child element, we mean each one of these list items.

00:12:51.890 --> 00:12:54.350
But, fortunately, JavaScript provides us with

00:12:54.350 --> 00:12:58.820
an easy and simple way to target the very first child elements.

00:12:58.820 --> 00:13:02.600
This is a property called firstChildElement.

00:13:02.600 --> 00:13:04.850
If I go over to our script,

00:13:04.850 --> 00:13:07.100
we can target the entriesWrapper,

00:13:07.100 --> 00:13:09.515
which is all of our unordered list,

00:13:09.515 --> 00:13:12.560
and then select the firstElementChild.

00:13:12.560 --> 00:13:17.600
Let's now save this file and go back over to the browser and check if this is working.

00:13:17.600 --> 00:13:19.610
Let's add some values,

00:13:19.610 --> 00:13:22.580
4, 5, 6, 7.

00:13:22.580 --> 00:13:24.830
Now, for each element which we add,

00:13:24.830 --> 00:13:27.920
we see that we still have seven days in total.

00:13:27.920 --> 00:13:31.190
Let's add number 8, and we see the value

00:13:31.190 --> 00:13:34.295
of one has now been removed from the start of our list.

00:13:34.295 --> 00:13:36.965
Let's try one more. The value of nine.

00:13:36.965 --> 00:13:39.575
This removes the value of two.

00:13:39.575 --> 00:13:43.670
All of this may look pretty complex if it's something which you've not done before,

00:13:43.670 --> 00:13:46.700
but all we're doing is adding a new list item to

00:13:46.700 --> 00:13:50.525
the end here and then removing the very first one.

00:13:50.525 --> 00:13:55.940
This is now a really important part of our running truck application now complete.

00:13:55.940 --> 00:13:58.850
Next, we'll move down to our start section where we'll add

00:13:58.850 --> 00:14:02.460
the total and also the average distance.
