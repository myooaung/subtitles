WEBVTT

00:05.110 --> 00:12.150
Previously we created several variables each one containing a single value.

00:12.260 --> 00:15.490
We're a bit limited with this however.

00:16.990 --> 00:24.730
For example let's say you want to display a list of articles you have several articles to display and

00:24.730 --> 00:30.050
you have variables containing strings for the article titles like this.

00:30.460 --> 00:37.060
But what if you don't know how many articles you're going to have are if you have a large number of

00:37.060 --> 00:38.680
them you dont.

00:38.680 --> 00:42.750
Now how many individual variables you need.

00:44.610 --> 00:53.580
The solution is to use an array an array is simply a list of other values a single variable containing

00:53.580 --> 01:00.050
an array can contain as few as many values as you want.

01:00.060 --> 01:05.820
You can also decide how many values you have in an array when your code is running.

01:05.820 --> 01:07.650
Not when you write it.

01:08.520 --> 01:15.260
So this single variable here contains an array of three string values.

01:17.520 --> 01:21.370
There are two ways to create an array in P HP.

01:21.450 --> 01:30.370
You can use square brackets like this followed by the list of values separated by comers.

01:30.480 --> 01:37.320
Alternatively you can use the array function like this by writing the word array again followed by the

01:37.320 --> 01:42.130
list of values separated by comer's inside round brackets.

01:42.510 --> 01:44.660
These two methods are equivalent.

01:44.700 --> 01:50.640
You'll see both of these used in other people's P HP code.

01:50.640 --> 01:57.260
Personally I prefer the square brackets method as I think it looks cleaner but it's up to you.

02:01.060 --> 02:05.570
Let's create an array in our code.

02:07.670 --> 02:12.710
This array has three elements each one being a string.

02:13.310 --> 02:15.740
So now we have an array variable.

02:15.800 --> 02:18.180
How do we use it.

02:18.380 --> 02:23.830
We can't use echo as if we do that.

02:24.770 --> 02:26.790
We get this error message.

02:29.600 --> 02:32.700
If we use var dump instead.

02:37.050 --> 02:42.470
It tells us that this variable contains an array with three values.

02:42.840 --> 02:46.510
The first one is a 10 character string.

02:46.590 --> 02:51.690
The second one is a 12 character string and so on.

02:51.690 --> 02:57.910
Note that each value has been assigned a number starting from zero.

03:02.540 --> 03:07.880
Each value in an array is traditionally referred to as an array element.

03:07.880 --> 03:16.160
This array for example has three elements each element of the array has a unique value that identifies

03:16.160 --> 03:16.820
it.

03:16.820 --> 03:22.550
This is known as an index are key the elements index from 0.

03:22.760 --> 03:25.430
So this is element 0.

03:25.460 --> 03:30.920
This is Element 1 and this is element 2.

03:31.010 --> 03:36.250
We can see this when we use var dump to display the contents of the variable.

03:41.050 --> 03:47.710
You can access an individual that array element by putting the index in square brackets after the array

03:47.740 --> 03:50.370
variable name like this.

03:52.470 --> 03:57.010
You can treat one of these as though it was an individual variable.

04:00.500 --> 04:08.420
So back in our code instead of the whole array let's just print out the value of the first element by

04:08.480 --> 04:10.130
adding the index like that

04:12.950 --> 04:13.720
in the browser.

04:13.730 --> 04:17.840
It looks like this just like an individual variable.

04:20.630 --> 04:24.340
We can do the same for the third element for example.

04:26.800 --> 04:29.400
Don't forget the indexes start from zero.

04:29.470 --> 04:33.620
So the third element has an index of two.

04:34.960 --> 04:38.210
And in the browser This is what is printed out.

04:41.470 --> 04:45.670
If we try and access an array elements with an invalid index

04:48.730 --> 04:49.590
like that.

04:52.340 --> 04:54.420
We get this error message.

04:57.640 --> 05:03.210
We'll see later on how we can process every element of an array using a loop.
