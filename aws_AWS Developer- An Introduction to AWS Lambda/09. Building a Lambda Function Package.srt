1
00:00:00,540 --> 00:00:04,690
Now let's built our function package and upload it into the AWS Console.

2
00:00:04,690 --> 00:00:06,700
There's two different setup files here.

3
00:00:06,700 --> 00:00:08,420
There's a setup.sh file,

4
00:00:08,420 --> 00:00:11,530
which contains all the steps that we'll need to create a function package on a

5
00:00:11,530 --> 00:00:15,320
Mac or Linux system, and there's a windows_setup.bat file,

6
00:00:15,320 --> 00:00:19,300
which will contain the same steps and commands, except on a Windows system.

7
00:00:19,300 --> 00:00:21,710
So use the one that's appropriate for you.

8
00:00:21,710 --> 00:00:22,320
In this case,

9
00:00:22,320 --> 00:00:25,900
I'll be going through all the steps step by step in the setup.sh file,

10
00:00:25,900 --> 00:00:28,170
but they'll be basically identical with a few different

11
00:00:28,170 --> 00:00:31,740
commands as the windows_setup.bat file.

12
00:00:31,740 --> 00:00:35,730
So, let's see what we do first. As our first step, we'll be creating a

13
00:00:35,730 --> 00:00:38,790
virtual environment to install our dependencies inside of. Now,

14
00:00:38,790 --> 00:00:40,760
if you had one previously created,

15
00:00:40,760 --> 00:00:45,020
you could keep that one, but I'd suggest removing it using the rm command.

16
00:00:45,020 --> 00:00:47,250
And if you're removing the virtual environment,

17
00:00:47,250 --> 00:00:52,460
you're also going to have to use the recursive flag here and then specify .venv

18
00:00:52,460 --> 00:00:55,510
if you already have it around like I do in this window on the left. So I'm

19
00:00:55,510 --> 00:00:59,770
going to remove that there, and because I have the pycache directory around,

20
00:00:59,770 --> 00:01:03,290
which I had from previous videos, this is also going to be something I could

21
00:01:03,290 --> 00:01:07,350
remove just because I won't need it inside of my Lambda function package, so

22
00:01:07,350 --> 00:01:10,400
I'll removed that too. You could do the same thing here if you have these

23
00:01:10,400 --> 00:01:14,400
lingering, and if you still see the .venv on the side of your screen in your

24
00:01:14,400 --> 00:01:17,240
terminal, you can always run the deactivate command,

25
00:01:17,240 --> 00:01:20,380
and this will turn off the virtual environment, but it'll only

26
00:01:20,380 --> 00:01:22,660
work when the virtual environment is turned on.

27
00:01:22,660 --> 00:01:24,160
So with all of these steps out of the way,

28
00:01:24,160 --> 00:01:27,210
let's go ahead and clear the screen here and start creating our function

29
00:01:27,210 --> 00:01:30,770
package. First, we'll create a brand‑new virtual environment.

30
00:01:30,770 --> 00:01:36,310
We use python3 ‑m venv and venv. Now this will create a

31
00:01:36,310 --> 00:01:38,370
fresh virtual environment for us.

32
00:01:38,370 --> 00:01:41,400
Then we'll need to turn this virtual environment on, in this case on

33
00:01:41,400 --> 00:01:43,930
my Mac system, or if you're on a Linux system,

34
00:01:43,930 --> 00:01:47,790
we could do source .venv/bin/activate.

35
00:01:47,790 --> 00:01:48,040
Now,

36
00:01:48,040 --> 00:01:51,100
with this virtual environment on, we can move on to the next step, which will

37
00:01:51,100 --> 00:01:53,600
be creating a setup directory to install everything in.

38
00:01:53,600 --> 00:01:57,880
So I'm gong to do mkdir setup here, and this will create

39
00:01:57,880 --> 00:02:00,150
a brand‑new empty directory for us.

40
00:02:00,150 --> 00:02:02,390
And now we're going to need to copy some of the things that

41
00:02:02,390 --> 00:02:04,250
we'll be using in our function package.

42
00:02:04,250 --> 00:02:08,250
So I'm going to copy sparrow.py into our setup folder here. I'm also going to

43
00:02:08,250 --> 00:02:12,970
copy the ssm_secrets.py file into our setup folder here.

44
00:02:12,970 --> 00:02:15,570
Now, after we are done with this,

45
00:02:15,570 --> 00:02:19,840
let's go ahead and change directories into our setup folder here.

46
00:02:19,840 --> 00:02:20,610
Now, from here,

47
00:02:20,610 --> 00:02:24,800
I'm going to install dependencies that are required for this function package.

48
00:02:24,800 --> 00:02:28,290
And if we look at what these are, they're included in requirements.txt.

49
00:02:28,290 --> 00:02:31,650
And I've only listed twython here because, again, boto3,

50
00:02:31,650 --> 00:02:35,050
while a requirement for ssm_secrets, because we import it

51
00:02:35,050 --> 00:02:36,790
on that first line of that file,

52
00:02:36,790 --> 00:02:40,640
it's not necessary because it's included for us in the Lambda runtime.

53
00:02:40,640 --> 00:02:41,260
So really,

54
00:02:41,260 --> 00:02:44,670
it's just this single dependency of twython. Instead of running

55
00:02:44,670 --> 00:02:48,470
the pip install twython command, we'll use this requirements.txt

56
00:02:48,470 --> 00:02:50,380
file to install the dependencies.

57
00:02:50,380 --> 00:02:54,940
Let's look at this back in setup.sh. And let's run the pip install

58
00:02:54,940 --> 00:02:58,490
command, but instead of the package name, we'll use ‑r to specify the

59
00:02:58,490 --> 00:03:00,670
requirements file that we want to use.

60
00:03:00,670 --> 00:03:00,830
Now,

61
00:03:00,830 --> 00:03:04,890
this is above this directory of the setup directory inside of that

62
00:03:04,890 --> 00:03:09,180
containing directory, and we'll look for requirements.txt, and then

63
00:03:09,180 --> 00:03:12,300
we're also going to specify one more flag for ‑t.

64
00:03:12,300 --> 00:03:16,700
Now, ‑t is telling us where we want to install all the dependencies.

65
00:03:16,700 --> 00:03:18,950
Now I want to install them currently in the present directory

66
00:03:18,950 --> 00:03:21,500
inside of setup, so I'm going to do that here,

67
00:03:21,500 --> 00:03:25,970
and it should install all those dependencies in this local present directory.

68
00:03:25,970 --> 00:03:26,790
Now if I list these out,

69
00:03:26,790 --> 00:03:28,750
you'll see that they're all there, and I can also show you by

70
00:03:28,750 --> 00:03:32,080
opening up the setup file, which now currently has a ton of

71
00:03:32,080 --> 00:03:35,040
different dependencies that are all loaded in there.

72
00:03:35,040 --> 00:03:37,420
And these should all be directly next to our

73
00:03:37,420 --> 00:03:41,080
sparrow.py and ssm_secrets.py files.

74
00:03:41,080 --> 00:03:43,195
This is because they're going to need to directly reference

75
00:03:43,195 --> 00:03:45,550
these dependencies inside of the Lambda runtime.

76
00:03:45,550 --> 00:03:47,620
So I'll close this out again, and we can clear the

77
00:03:47,620 --> 00:03:49,890
screen and start the next step.

78
00:03:49,890 --> 00:03:55,370
If we scroll down, this will be for us to zip up this into a package.zip file.

79
00:03:55,370 --> 00:03:58,920
Now, on Windows, we might use something like 7‑Zip, but on Linux and Mac,

80
00:03:58,920 --> 00:04:02,780
we can use the zip command‑line utility, so I'll use zip ‑r.

81
00:04:02,780 --> 00:04:06,780
And then I want to specify the location to output what we're zipping,

82
00:04:06,780 --> 00:04:11,570
which is going to be in the containing directory in package.zip, and then I'm

83
00:04:11,570 --> 00:04:14,920
going to be able to also specify what I want included in this,

84
00:04:14,920 --> 00:04:17,460
which is going to be every file in the present directory.

85
00:04:17,460 --> 00:04:21,940
Now, importantly, I don't want to include the setup folder itself.

86
00:04:21,940 --> 00:04:24,240
I just want to include everything inside of it.

87
00:04:24,240 --> 00:04:27,330
So that's why I am doing ./ to refer to this directory,

88
00:04:27,330 --> 00:04:31,050
and then I'm doing * to refer to all the contents of this directory,

89
00:04:31,050 --> 00:04:33,090
not including the directory itself.

90
00:04:33,090 --> 00:04:35,010
So let's run this, and this will really quickly

91
00:04:35,010 --> 00:04:37,640
create us a package.zip file here.

92
00:04:37,640 --> 00:04:38,780
Now, if I scroll down,

93
00:04:38,780 --> 00:04:42,080
the last bits here are going to clean up our setup step. So I'm

94
00:04:42,080 --> 00:04:44,030
going to change directories back up a level,

95
00:04:44,030 --> 00:04:47,810
and then I can run rm ‑rf. And this is a command you should be

96
00:04:47,810 --> 00:04:50,570
very careful with because it can delete things on your system

97
00:04:50,570 --> 00:04:53,470
that you might not want to, so be very careful not to force

98
00:04:53,470 --> 00:04:55,640
delete anything unless you mean to.

99
00:04:55,640 --> 00:04:58,590
And we do want to delete this setup directory and all of its contents

100
00:04:58,590 --> 00:05:01,460
because we just created the package that we need, so we can go ahead and

101
00:05:01,460 --> 00:05:04,940
run this. And then we can turn our virtual environment off with the

102
00:05:04,940 --> 00:05:08,010
deactivate command that I mentioned earlier, and now you see that the

103
00:05:08,010 --> 00:05:11,050
.venv in parentheses has disappeared.

104
00:05:11,050 --> 00:05:13,660
And finally, we can clean up our entire environment,

105
00:05:13,660 --> 00:05:19,590
including the virtual environment, by doing rm ‑rf .venv.

106
00:05:19,590 --> 00:05:22,050
Now, this will make our virtual environment disappear.

107
00:05:22,050 --> 00:05:22,900
And finally,

108
00:05:22,900 --> 00:05:24,740
what we could do if we wanted to just see what was

109
00:05:24,740 --> 00:05:27,130
inside of here is run the open . command.

110
00:05:27,130 --> 00:05:28,560
This would work on a Mac.

111
00:05:28,560 --> 00:05:33,200
You might also have to use something like nautilus . on a Linux system,

112
00:05:33,200 --> 00:05:36,200
depending on which Linux distribution you're using, and that would open

113
00:05:36,200 --> 00:05:38,710
up the Finder window or the File Explorer window,

114
00:05:38,710 --> 00:05:43,740
depending on your operating system, and show you where the package.zip file is.

115
00:05:43,740 --> 00:05:47,240
So let's clear the screen here, and then let's do that now.

116
00:05:47,240 --> 00:05:50,360
Now this has opened it another window, so let me go over there.

117
00:05:50,360 --> 00:05:52,560
And now we have this package.zip file that we can

118
00:05:52,560 --> 00:05:55,040
use and upload it to AWS Lambda.

119
00:05:55,040 --> 00:05:58,450
So that's all we need to do inside of our text editor. We've used

120
00:05:58,450 --> 00:06:02,040
this setup.sh file to create the package.zip file.

121
00:06:02,040 --> 00:06:04,610
Now, instead of doing all those commands manually,

122
00:06:04,610 --> 00:06:07,280
we could also actually clear the screen here, and let's remove

123
00:06:07,280 --> 00:06:10,270
package.zip because it wasn't that hard to make it in the first

124
00:06:10,270 --> 00:06:12,430
place, so we'll use the rm commend for that.

125
00:06:12,430 --> 00:06:16,740
And now we can create it automatically just by running this script.

126
00:06:16,740 --> 00:06:22,500
So I'm just going to run ./setup.sh, and this should run the entire

127
00:06:22,500 --> 00:06:25,040
script and tell me what it's doing in the background.

128
00:06:25,040 --> 00:06:25,900
And when it's done,

129
00:06:25,900 --> 00:06:30,640
it should clean everything up for us and still output us the package.zip file.

130
00:06:30,640 --> 00:06:31,000
Now,

131
00:06:31,000 --> 00:06:33,910
on some machines, it'll also open up that Finder window and

132
00:06:33,910 --> 00:06:36,470
show you where that package.zip file is.

133
00:06:36,470 --> 00:06:38,400
But since I know where that is and I know that it's

134
00:06:38,400 --> 00:06:45,000
appearing here my VS Code editor, I can go over to the AWS Console, and we can start the next step.

