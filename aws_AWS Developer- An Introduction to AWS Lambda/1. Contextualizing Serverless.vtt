WEBVTT
1
00:00:01.350 --> 00:00:02.090
Hello everyone.

2
00:00:02.090 --> 00:00:05.270
My name is Fernando Medina Corey, and welcome to my AWS

3
00:00:05.270 --> 00:00:08.360
Developer course, An Introduction to AWS Lambda.

4
00:00:08.360 --> 00:00:11.370
I'm excited to get you up and running with tools and examples that will help

5
00:00:11.370 --> 00:00:15.000
you move some of your functional code to the cloud. In this course, I'll

6
00:00:15.000 --> 00:00:18.780
introduce you to AWS Lambda and demonstrate several ways you can use Lambda to

7
00:00:18.780 --> 00:00:22.130
power your own development projects. Building these examples will help you

8
00:00:22.130 --> 00:00:25.770
understand how you can write function code that doesn't require you to manage

9
00:00:25.770 --> 00:00:27.110
a server infrastructure.

10
00:00:27.110 --> 00:00:27.270
Now,

11
00:00:27.270 --> 00:00:30.660
keep in mind that I've completely redone this course from its original

12
00:00:30.660 --> 00:00:34.340
version, so you'll see a lot of new updated examples on using the AWS

13
00:00:34.340 --> 00:00:38.340
console and working with some of the most recent features and services

14
00:00:38.340 --> 00:00:41.910
in AWS, as well as some of the most modern ways to do serverless

15
00:00:41.910 --> 00:00:45.120
application development with AWS Lambda. So let's go ahead and get

16
00:00:45.120 --> 00:00:49.080
started. In this module, we'll be looking at the evolution of

17
00:00:49.080 --> 00:00:50.640
serverless functions.

18
00:00:50.640 --> 00:00:54.430
We'll start by comparing serverless and more traditional architectures just

19
00:00:54.430 --> 00:00:57.140
so we can understand some of the differences between them.

20
00:00:57.140 --> 00:00:59.740
This will help us understand what serverless functions are,

21
00:00:59.740 --> 00:01:03.040
and also some of the benefits and the drawbacks that they have.

22
00:01:03.040 --> 00:01:03.680
Next,

23
00:01:03.680 --> 00:01:06.690
we'll take a look at cloud infrastructure providers like AWS and

24
00:01:06.690 --> 00:01:09.290
their main competitors. And at the end of the module,

25
00:01:09.290 --> 00:01:12.470
we'll look at some of the projects that we'll be building and how

26
00:01:12.470 --> 00:01:15.640
exactly we're going to be building them inside of AWS.

27
00:01:15.640 --> 00:01:18.900
So thanks for joining me, and let's go ahead and get started.

28
00:01:18.900 --> 00:01:20.840
In order to understand serverless functions,

29
00:01:20.840 --> 00:01:23.460
you need to first take a step back and learn a little bit about

30
00:01:23.460 --> 00:01:25.920
how we arrived here. In the beginning of time,

31
00:01:25.920 --> 00:01:28.800
or at least near the beginning of UNIX timestamps, to build an

32
00:01:28.800 --> 00:01:31.070
application meant we had to manage everything from the metal

33
00:01:31.070 --> 00:01:33.750
machine running our code to the code itself.

34
00:01:33.750 --> 00:01:36.150
What this meant was that it took much longer to get

35
00:01:36.150 --> 00:01:38.040
a project from start to finish,

36
00:01:38.040 --> 00:01:41.140
so we're going to take a quick look at what's changed since then.

37
00:01:41.140 --> 00:01:45.240
So let's take a look at serverless versus traditional architectures.

38
00:01:45.240 --> 00:01:48.485
We'll start in the era of IBM and the mainframe, and then briefly move

39
00:01:48.485 --> 00:01:51.360
into Apple and others developing personal computing.

40
00:01:51.360 --> 00:01:52.110
After that,

41
00:01:52.110 --> 00:01:56.300
we'll look at VMware and the jump into operating system virtualization

42
00:01:56.300 --> 00:01:59.960
before we move over to AWS and the advent of the cloud.

43
00:01:59.960 --> 00:02:00.800
Then finally,

44
00:02:00.800 --> 00:02:04.330
we'll take a look at AWS Lambda and how the more modern context of

45
00:02:04.330 --> 00:02:08.240
serverless architectures fits in with where we are now.

46
00:02:08.240 --> 00:02:10.270
So, let's start with mainframes.

47
00:02:10.270 --> 00:02:15.180
In the mainframe era, the full process of building applications might take years.

48
00:02:15.180 --> 00:02:18.390
First you had to secure some space for your enterprise hardware, then

49
00:02:18.390 --> 00:02:21.990
the personnel that you needed to install it, and to maintain it, as

50
00:02:21.990 --> 00:02:25.290
well as the software that would work with it, because not all software

51
00:02:25.290 --> 00:02:27.630
would work with all hardware,

52
00:02:27.630 --> 00:02:30.710
Then you had to also have the costs of all the support staff,

53
00:02:30.710 --> 00:02:34.560
the hardware, and the electricity as another thing you had to manage and keep

54
00:02:34.560 --> 00:02:37.430
in mind as you're going to go forward with your development.

55
00:02:37.430 --> 00:02:41.270
So this meant that this entire situation was highly inflexible

56
00:02:41.270 --> 00:02:43.650
and you were pretty locked into those expenses,

57
00:02:43.650 --> 00:02:46.240
so you better hope you planned everything right.

58
00:02:46.240 --> 00:02:50.340
But with the advent of nonâ€‘mainframe servers and personal computers,

59
00:02:50.340 --> 00:02:53.410
the provisioning of compute power became more distributed.

60
00:02:53.410 --> 00:02:57.630
Servers that you could set up in a room or a closet in months or

61
00:02:57.630 --> 00:03:00.870
weeks rather than a warehouse in a few years became the next

62
00:03:00.870 --> 00:03:03.040
stage of computational evolution.

63
00:03:03.040 --> 00:03:05.590
Now this led to lower barriers to entry,

64
00:03:05.590 --> 00:03:10.290
meaning that you could get started quite easily compared to the mainframe era.

65
00:03:10.290 --> 00:03:13.900
You also were able to do things that reduced costs in comparison to

66
00:03:13.900 --> 00:03:16.710
that earlier era because you didn't have to dedicate so many

67
00:03:16.710 --> 00:03:19.120
personnel and all the hardware in space,

68
00:03:19.120 --> 00:03:23.320
as well as all the electricity, to that single purpose for compute.

69
00:03:23.320 --> 00:03:25.790
Now, this meant that there was increased distribution and

70
00:03:25.790 --> 00:03:28.940
democratization of being able to use this technology,

71
00:03:28.940 --> 00:03:32.850
and I think this is a key step on the way toward serverless applications.

72
00:03:32.850 --> 00:03:35.410
But one of the next important points that helped enable

73
00:03:35.410 --> 00:03:38.600
this is virtualization and hypervisors.

74
00:03:38.600 --> 00:03:42.660
Virtualization, or operating system virtualization, was something

75
00:03:42.660 --> 00:03:45.610
similar in that it helped us abstract away some of the traditional

76
00:03:45.610 --> 00:03:49.530
problems with computing by having multiple operating systems running

77
00:03:49.530 --> 00:03:51.540
on the same physical hardware.

78
00:03:51.540 --> 00:03:55.230
Now, this allowed us to do things like running a gaming application

79
00:03:55.230 --> 00:03:58.120
in a virtual machine on top of a physical server,

80
00:03:58.120 --> 00:04:00.990
simultaneous with maybe running a database application,

81
00:04:00.990 --> 00:04:04.000
another virtual machine, and potentially something like an email

82
00:04:04.000 --> 00:04:07.140
server in another virtual machine on that server.

83
00:04:07.140 --> 00:04:10.070
So this helped us split up the actual physical hardware

84
00:04:10.070 --> 00:04:13.190
from multiple purposes so that when it wasn't being used

85
00:04:13.190 --> 00:04:15.020
for one application or another,

86
00:04:15.020 --> 00:04:17.680
we could actually split up its capacity and spread that

87
00:04:17.680 --> 00:04:19.950
around between different use cases.

88
00:04:19.950 --> 00:04:20.100
Now,

89
00:04:20.100 --> 00:04:23.590
this is a key part of what happens next because I think this

90
00:04:23.590 --> 00:04:27.670
really enabled us to get to the cloud, or thinking about things

91
00:04:27.670 --> 00:04:30.840
like Amazon EC2, or Elastic Compute Cloud.

92
00:04:30.840 --> 00:04:35.790
EC2 is really the logical extension of this virtualization where Amazon

93
00:04:35.790 --> 00:04:39.960
decided to take a bunch of physical servers themselves and put it into

94
00:04:39.960 --> 00:04:43.610
their own data centers, or the cloud in this case is what we might call

95
00:04:43.610 --> 00:04:47.150
it, and they turn those physical machines into a bunch of virtual

96
00:04:47.150 --> 00:04:51.240
machines that then people like you and I could go rent for pennies

97
00:04:51.240 --> 00:04:52.840
rather than dollars.

98
00:04:52.840 --> 00:04:55.650
And in this way, we'd save ourselves quite a bit of money

99
00:04:55.650 --> 00:04:58.530
if we weren't really dedicated to having these physical

100
00:04:58.530 --> 00:05:00.290
machines around all the time.

101
00:05:00.290 --> 00:05:02.600
So why spend thousands to rent a server for a new

102
00:05:02.600 --> 00:05:04.970
project when you could spend a few bucks,

103
00:05:04.970 --> 00:05:08.840
test something out, and scale it further if your success called for that.

104
00:05:08.840 --> 00:05:10.900
Instead of managing physical servers,

105
00:05:10.900 --> 00:05:14.630
we got to manage virtual ones that should behave more or less the same

106
00:05:14.630 --> 00:05:17.340
way as any other virtual machine that we're using.

107
00:05:17.340 --> 00:05:20.200
So, by now you can start to see a trend with this short history.

108
00:05:20.200 --> 00:05:24.210
Whenever you can strip something of the equation by implementing mainframes,

109
00:05:24.210 --> 00:05:27.860
renting physical servers, or managing the hardware itself, people seem to

110
00:05:27.860 --> 00:05:31.480
flock there to save themselves time and focus on things that matter more

111
00:05:31.480 --> 00:05:34.470
to the developer or the business as a whole.

112
00:05:34.470 --> 00:05:38.010
Now, one thing that continues to be a persistent challenge for developers

113
00:05:38.010 --> 00:05:41.100
is managing server configuration and infrastructure.

114
00:05:41.100 --> 00:05:43.990
Now, even with virtualized, standardized servers,

115
00:05:43.990 --> 00:05:47.800
it can be a challenge to provision our virtual machines for heavy traffic loads,

116
00:05:47.800 --> 00:05:51.890
deal with operating system configurations, or manage software updates and

117
00:05:51.890 --> 00:05:55.040
patches that are required to keep our applications safe.

118
00:05:55.040 --> 00:05:57.860
So this is where serverless comes in.

119
00:05:57.860 --> 00:05:59.870
Now when you think of serverless, as you might have guessed,

120
00:05:59.870 --> 00:06:01.990
this doesn't mean there are no servers.

121
00:06:01.990 --> 00:06:03.480
It means that you, as a developer,

122
00:06:03.480 --> 00:06:06.900
don't have to think as much about the servers that your code is

123
00:06:06.900 --> 00:06:10.470
running on. With the serverless model, everything from security

124
00:06:10.470 --> 00:06:13.640
updates to scaling ends up being managed for you.

125
00:06:13.640 --> 00:06:16.590
So what are serverless functions specifically? Well,

126
00:06:16.590 --> 00:06:19.260
you can think of them as event driven to start.

127
00:06:19.260 --> 00:06:21.630
Whenever a serverless function is running,

128
00:06:21.630 --> 00:06:25.470
it's running only in response to some event that's triggering it.

129
00:06:25.470 --> 00:06:28.880
Now this might be something like a file upload in an application,

130
00:06:28.880 --> 00:06:33.240
or maybe an API request coming in from an API endpoint in a front end.

131
00:06:33.240 --> 00:06:35.050
Now there's lots of different possibilities,

132
00:06:35.050 --> 00:06:38.380
including things like IoT and streaming applications with lots of

133
00:06:38.380 --> 00:06:41.980
data coming in, but any of these things could be considered events

134
00:06:41.980 --> 00:06:45.570
that then trigger some code to run in response to them in order to

135
00:06:45.570 --> 00:06:47.780
address whatever those events are.

136
00:06:47.780 --> 00:06:51.130
Now serverless functions are also going to be code focused, so

137
00:06:51.130 --> 00:06:54.480
rather than managing all the infrastructure surrounding all of

138
00:06:54.480 --> 00:06:55.680
the code that we're writing,

139
00:06:55.680 --> 00:06:59.040
we're hopefully going to do a lot more writing of the business and

140
00:06:59.040 --> 00:07:01.830
application logic and the purpose of our application,

141
00:07:01.830 --> 00:07:05.670
rather than having to manage all of the infrastructure that helps enable that.

142
00:07:05.670 --> 00:07:09.740
Also, serverless functions will be run on managed machines.

143
00:07:09.740 --> 00:07:13.450
Now this means that they'll be run on something like AWS's hardware and

144
00:07:13.450 --> 00:07:16.950
maybe AWS's virtualized operating systems, and potentially,

145
00:07:16.950 --> 00:07:20.010
in this case with Lambda, inside of containers that

146
00:07:20.010 --> 00:07:22.020
live on those virtual machines.

147
00:07:22.020 --> 00:07:25.740
But, that entire three steps of layers that I just

148
00:07:25.740 --> 00:07:28.540
said is actually managed by AWS,

149
00:07:28.540 --> 00:07:31.670
and we can focus on the code that we're writing and that's running on

150
00:07:31.670 --> 00:07:39.000
top of that rather than the underlying infrastructure. So, let's take a look at a few examples of events in the next video.

