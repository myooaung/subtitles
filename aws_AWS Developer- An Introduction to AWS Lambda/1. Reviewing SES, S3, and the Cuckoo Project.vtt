WEBVTT
1
00:00:01.120 --> 00:00:05.540
Welcome to this module of my AWS Developer course, An Introduction to Lambda.

2
00:00:05.540 --> 00:00:07.210
My name is Fernando Medina Corey,

3
00:00:07.210 --> 00:00:09.420
and in this module, we'll learn about integrating

4
00:00:09.420 --> 00:00:12.420
Lambda with other AWS services.

5
00:00:12.420 --> 00:00:15.390
In this module, we'll start by reviewing some of the resources

6
00:00:15.390 --> 00:00:17.340
that we'll need to set up for this project.

7
00:00:17.340 --> 00:00:20.680
Specifically, we'll look at getting the Amazon Simple Email

8
00:00:20.680 --> 00:00:23.770
Service set up and verifying emails that we'll be sending

9
00:00:23.770 --> 00:00:26.690
email with and receiving email to.

10
00:00:26.690 --> 00:00:28.340
Once we finish this process,

11
00:00:28.340 --> 00:00:32.620
we'll be able to set up the Amazon Simple Storage Service, or S3,

12
00:00:32.620 --> 00:00:36.060
and create a bucket inside of it to store some template files that

13
00:00:36.060 --> 00:00:39.880
we'll use to send out email templates. From there, we'll review the

14
00:00:39.880 --> 00:00:43.740
skeleton code in the Cuckoo folder that we'll be using for this

15
00:00:43.740 --> 00:00:44.880
particular demo.

16
00:00:44.880 --> 00:00:47.420
We'll make sure it's up to date with the information we're putting in

17
00:00:47.420 --> 00:00:51.400
S3 and the emails that we're using in the Simple Email Service. From

18
00:00:51.400 --> 00:00:54.460
there, we'll look at a few other resources that we'll be relying on

19
00:00:54.460 --> 00:00:58.700
inside of this demo, like Jinja2 and boto3, and then we'll move on to

20
00:00:58.700 --> 00:01:00.370
deploying our functions.

21
00:01:00.370 --> 00:01:03.430
We'll look at how to create a new function package using the

22
00:01:03.430 --> 00:01:07.350
setup.sh script for this particular demo, and then we'll set up a

23
00:01:07.350 --> 00:01:10.240
scheduled event configuration using cron.

24
00:01:10.240 --> 00:01:11.370
Except in this demo,

25
00:01:11.370 --> 00:01:15.870
all of these activities will happen through the AWS CLI rather than the AWS

26
00:01:15.870 --> 00:01:19.780
Console, so we'll be learning an entirely new set of skills.

27
00:01:19.780 --> 00:01:22.070
So let's get started.

28
00:01:22.070 --> 00:01:25.670
The Simple Email Service, or Amazon SES, is an AWS

29
00:01:25.670 --> 00:01:28.510
application service that makes it easier to integrate email

30
00:01:28.510 --> 00:01:30.550
functionality in your application.

31
00:01:30.550 --> 00:01:33.810
SES both allows you to accept inbound mail and build in

32
00:01:33.810 --> 00:01:35.910
ways to manage the incoming mail,

33
00:01:35.910 --> 00:01:40.580
as well as sending outgoing mail to email addresses not managed by AWS.

34
00:01:40.580 --> 00:01:44.800
So let's take a look at a few of the core benefits of using SES.

35
00:01:44.800 --> 00:01:47.520
The first primary benefit of using a managed email service

36
00:01:47.520 --> 00:01:51.380
like SES is that it has a variety of processes in place to

37
00:01:51.380 --> 00:01:53.260
ensure high deliverability.

38
00:01:53.260 --> 00:01:57.620
This means that AWS takes care to keep the quality of its outgoing mail high so

39
00:01:57.620 --> 00:02:00.860
that it doesn't get marked as spam by other email providers.

40
00:02:00.860 --> 00:02:03.600
You also have access to sending statistics.

41
00:02:03.600 --> 00:02:06.780
This means that you can actually see key metrics like deliverability,

42
00:02:06.780 --> 00:02:08.740
bounces, and complaints.

43
00:02:08.740 --> 00:02:11.190
You can also control the emails that you receive and how

44
00:02:11.190 --> 00:02:13.130
they're processed after you receive them.

45
00:02:13.130 --> 00:02:13.740
For example,

46
00:02:13.740 --> 00:02:18.510
by allowing or blocking emails from an IP range or by a recipient address.

47
00:02:18.510 --> 00:02:21.370
With this level of control and transparency to your emails,

48
00:02:21.370 --> 00:02:24.330
you can also configure monitoring to notify you of problems

49
00:02:24.330 --> 00:02:27.130
like spam complaints or low deliverability.

50
00:02:27.130 --> 00:02:31.470
This can help you ensure high quality and maximum viewership for your emails.

51
00:02:31.470 --> 00:02:34.390
So now let's take a look at another AWS service we'll be working

52
00:02:34.390 --> 00:02:40.510
with, AWS S3. S3, or the Simple Storage Service, was one of the first

53
00:02:40.510 --> 00:02:44.020
products that AWS released back in 2006.

54
00:02:44.020 --> 00:02:47.710
The service allows you to store objects on AWS infrastructure.

55
00:02:47.710 --> 00:02:52.730
These objects can be text, audio, video, code, and many other types of files,

56
00:02:52.730 --> 00:02:55.740
and each of these objects is stored in something called a bucket.

57
00:02:55.740 --> 00:02:58.480
Now, buckets can hold multiple objects,

58
00:02:58.480 --> 00:03:00.890
and each of these objects have a key name that you can use to

59
00:03:00.890 --> 00:03:03.220
reference them inside of those buckets.

60
00:03:03.220 --> 00:03:03.460
Now,

61
00:03:03.460 --> 00:03:07.420
each of these buckets have a global namespace, and what I mean by this is that

62
00:03:07.420 --> 00:03:11.340
if you wanted to make a bucket called my bucket and I wanted to make a bucket

63
00:03:11.340 --> 00:03:14.590
called my bucket, we can't both have our way.

64
00:03:14.590 --> 00:03:18.020
These buckets must be unique across AWS accounts and regions

65
00:03:18.020 --> 00:03:20.820
throughout the world, and you can never duplicate the name of a

66
00:03:20.820 --> 00:03:25.060
bucket. S3 also has a concept of folder prefixes.

67
00:03:25.060 --> 00:03:25.320
Now,

68
00:03:25.320 --> 00:03:28.220
folders aren't strictly folders in the sense you'd think of them

69
00:03:28.220 --> 00:03:31.130
as containing objects themselves. Instead,

70
00:03:31.130 --> 00:03:34.800
in S3, every object has a key, and in order to implement

71
00:03:34.800 --> 00:03:37.250
something looking and feeling like a folder,

72
00:03:37.250 --> 00:03:41.490
you would use prefixes on the object's name that then end with a slash,

73
00:03:41.490 --> 00:03:44.830
and that allows you to group objects into what appear to be folders,

74
00:03:44.830 --> 00:03:48.050
but are actually just prefixes on the object name.

75
00:03:48.050 --> 00:03:51.410
Now, we'll be using S3 to keep a hold of some the email templates that we

76
00:03:51.410 --> 00:03:54.240
don't want to put in with our Lambda function package.

77
00:03:54.240 --> 00:03:58.700
So what are some of the benefits of using S3? The first is scalability.

78
00:03:58.700 --> 00:04:02.350
When you're working with S3, AWS will scale up the compute capacity

79
00:04:02.350 --> 00:04:05.900
required to serve your files inside of S3 for you.

80
00:04:05.900 --> 00:04:08.700
And this can go pretty far before you need to implement things like

81
00:04:08.700 --> 00:04:12.850
caching or other systems for distributing your files. S3 will also

82
00:04:12.850 --> 00:04:17.440
integrate very easily with a variety of AWS services. You can use Lambda

83
00:04:17.440 --> 00:04:22.450
to pull files from S3 and store them in S3 using the AWS SDKs, and

84
00:04:22.450 --> 00:04:24.500
anywhere you could run an AWS SDK,

85
00:04:24.500 --> 00:04:27.810
you could interact with S3. There's also direct integrations

86
00:04:27.810 --> 00:04:30.040
with many services for data analytics,

87
00:04:30.040 --> 00:04:32.740
data processing, and other purposes like that.

88
00:04:32.740 --> 00:04:35.410
Another benefit is that S3 is pretty simple to get

89
00:04:35.410 --> 00:04:38.330
started with. You can put all of your objects into it

90
00:04:38.330 --> 00:04:40.250
immediately after creating a bucket,

91
00:04:40.250 --> 00:04:43.580
and then you could go get them using the Adobe AWS SDK's Command Line

92
00:04:43.580 --> 00:04:47.300
Interface or the AWS Console, and you can set this up to work in a

93
00:04:47.300 --> 00:04:49.610
lot of your applications fairly easily.

94
00:04:49.610 --> 00:04:53.710
Another benefit is availability. Because S3 is managed by AWS,

95
00:04:53.710 --> 00:04:57.180
not only does it scale automatically to support your capacity,

96
00:04:57.180 --> 00:04:58.050
but behind the scenes,

97
00:04:58.050 --> 00:05:01.530
AWS is making sure that your files will be available

98
00:05:01.530 --> 00:05:03.710
at the highest amount possible.

99
00:05:03.710 --> 00:05:06.860
Now, there's plenty of other benefits to S3, so take a closer look at

100
00:05:06.860 --> 00:05:09.600
the service as you build your own applications.

101
00:05:09.600 --> 00:05:09.970
Next,

102
00:05:09.970 --> 00:05:13.530
let's take a look at our skeleton code, Cuckoo. Cuckoo will help us

103
00:05:13.530 --> 00:05:17.290
by having reminder types in HTML templates that can be modified by

104
00:05:17.290 --> 00:05:21.480
Jinja2, which is a Python library, for each purpose that we might

105
00:05:21.480 --> 00:05:24.570
have. We'll also manage sending different types of messages out at

106
00:05:24.570 --> 00:05:25.730
different times,

107
00:05:25.730 --> 00:05:29.340
depending on which scheduled event we're going to use to trigger it.

108
00:05:29.340 --> 00:05:30.180
Additionally,

109
00:05:30.180 --> 00:05:33.410
for each of these events, it'll use a different email template

110
00:05:33.410 --> 00:05:36.410
that will load from S3 in order to populate relevant

111
00:05:36.410 --> 00:05:38.840
information based on the event context.

112
00:05:38.840 --> 00:05:41.270
This will give us a different template to remind our employees to

113
00:05:41.270 --> 00:05:44.860
come to work versus sending a template reminder to our clients to

114
00:05:44.860 --> 00:05:46.810
remind them to come pick up their pets.

115
00:05:46.810 --> 00:05:49.480
It'll also manage different groups of folks that we

116
00:05:49.480 --> 00:05:53.850
want to send to, in this case, employees and clients.

117
00:05:53.850 --> 00:05:57.040
Now, there's a few other resource is that we'll be using. We'll be looking

118
00:05:57.040 --> 00:06:01.940
at the Python SDK boto3 and use that in our Python code.

119
00:06:01.940 --> 00:06:04.840
We'll also be using specific HTML templates using

120
00:06:04.840 --> 00:06:08.370
Jinja2, which is a Python templating tool.

121
00:06:08.370 --> 00:06:11.950
So, as one final reminder, what's our project actually going to do?

122
00:06:11.950 --> 00:06:14.180
It's going to get triggered at a specific time.

123
00:06:14.180 --> 00:06:17.650
It'll then use the logic inside of Cuckoo to determine if it

124
00:06:17.650 --> 00:06:20.990
should send a morning alert over to our employees to remind them

125
00:06:20.990 --> 00:06:23.250
to come to work, or if it's midday,

126
00:06:23.250 --> 00:06:26.240
it might tell them to do a few specific tasks,

127
00:06:26.240 --> 00:06:28.730
reminding them to do things like feeding the rabbits or

128
00:06:28.730 --> 00:06:30.770
cleaning out the cat litter boxes.

129
00:06:30.770 --> 00:06:32.400
And then in the afternoon,

130
00:06:32.400 --> 00:06:35.540
it's going to send an email reminder to our clients to remind them to

131
00:06:35.540 --> 00:06:38.340
come pick up their pets from our day care center.

132
00:06:38.340 --> 00:06:44.000
So with this refresher out of the way, in the next video, let's look at what we'll do in the demo.

