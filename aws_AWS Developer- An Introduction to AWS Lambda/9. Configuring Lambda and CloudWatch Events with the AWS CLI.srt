1
00:00:01,310 --> 00:00:04,700
So now let's connect the Lambda function we created with the CloudWatch events

2
00:00:04,700 --> 00:00:10,140
that we created. We'll start by using aws events list‑rules.

3
00:00:10,140 --> 00:00:10,300
Now,

4
00:00:10,300 --> 00:00:13,050
this should list out all the ARNs of all the events

5
00:00:13,050 --> 00:00:14,580
that we've created in the past.

6
00:00:14,580 --> 00:00:18,800
And if you didn't get a chance to copy down the ARN of the pickup and the

7
00:00:18,800 --> 00:00:22,885
daily_tasks and the come_to_work ARNs, you could do this now. Now, I'm going

8
00:00:22,885 --> 00:00:26,770
to clear the screen because I already copied those down, and instead, I'm

9
00:00:26,770 --> 00:00:30,860
going to set up the Lambda function we just created to trust events that come

10
00:00:30,860 --> 00:00:33,240
from the CloudWatch Events system.

11
00:00:33,240 --> 00:00:39,830
So I'll do this with aws lambda add‑permission, and then I'll do a

12
00:00:39,830 --> 00:00:45,540
backslash here, and we'll type in the function‑name for the thing

13
00:00:45,540 --> 00:00:47,140
that needs to get the permission.

14
00:00:47,140 --> 00:00:47,660
In this case,

15
00:00:47,660 --> 00:00:54,950
it's gpc_cuckoo. And I'll do another backslash, and we'll do a

16
00:00:54,950 --> 00:00:59,040
statement‑id here. And I just need to give a unique statement‑id so

17
00:00:59,040 --> 00:01:02,920
that as we add permissions to this Lambda function to expect to get

18
00:01:02,920 --> 00:01:05,100
events from different CloudWatch events,

19
00:01:05,100 --> 00:01:08,740
they have unique IDs so there's no conflicts in this.

20
00:01:08,740 --> 00:01:11,100
So I'll just make sure to give this a statement‑id of 1 since

21
00:01:11,100 --> 00:01:13,230
it's the first one we're configuring here.

22
00:01:13,230 --> 00:01:16,810
Then I'll do another backslash, and we'll add in an action here that

23
00:01:16,810 --> 00:01:19,650
we're going to expect to happen on this Lambda function.

24
00:01:19,650 --> 00:01:24,380
And I'll need to do lambda:, in this exact capitalization,

25
00:01:24,380 --> 00:01:29,690
InvokeFunction. Now, in that string there, I do a backslash, and what

26
00:01:29,690 --> 00:01:33,330
this is saying is that we're going to expect Lambda to be invoked by

27
00:01:33,330 --> 00:01:37,640
the next thing that we're entering in, which is going to be a principal.

28
00:01:37,640 --> 00:01:41,670
Now, this principal will be the events system of AWS. So

29
00:01:41,670 --> 00:01:43,800
this is the CloudWatch Events system,

30
00:01:43,800 --> 00:01:47,610
and we'll have to put in this domain here of amazonaws.com

31
00:01:47,610 --> 00:01:50,350
with the events subdomain, and that'll tell Lambda to

32
00:01:50,350 --> 00:01:52,530
expect events from that principal.

33
00:01:52,530 --> 00:01:56,340
Now we're also going to need to specify a source‑arn,

34
00:01:56,340 --> 00:01:59,290
and this is going to be the ARN of the events that we

35
00:01:59,290 --> 00:02:01,540
just created just a moment ago.

36
00:02:01,540 --> 00:02:05,340
So if you haven't copied down those ARNs from earlier, go ahead and rerun the

37
00:02:05,340 --> 00:02:09,110
aws events list‑rules command and then get back to this step.

38
00:02:09,110 --> 00:02:10,500
So since I already copied this,

39
00:02:10,500 --> 00:02:13,770
so I'm going to paste it in here, and then I can hit Enter to add

40
00:02:13,770 --> 00:02:16,950
this permission to our Lambda function. Now, I'm also going to need

41
00:02:16,950 --> 00:02:19,950
to add a few other permissions, so let's clear the screen here, and

42
00:02:19,950 --> 00:02:21,730
let's run this command again,

43
00:02:21,730 --> 00:02:25,350
except we'll need to change the statement‑id from 1 to 2,

44
00:02:25,350 --> 00:02:28,790
and we're also going to need to change the source‑arn from

45
00:02:28,790 --> 00:02:32,140
the source ARN related to our come_to_work event to the

46
00:02:32,140 --> 00:02:36,440
source ARN for our daily_tasks event.

47
00:02:36,440 --> 00:02:37,870
Now let's run this again.

48
00:02:37,870 --> 00:02:41,790
Clear the screen one more time, and let's run this now with our third

49
00:02:41,790 --> 00:02:45,610
statement, so let's change the statement‑id to 3. And finally,

50
00:02:45,610 --> 00:02:49,600
let's change the daily_tasks to the pickup event.

51
00:02:49,600 --> 00:02:52,230
Let's hit Enter one more time here. And now that we've

52
00:02:52,230 --> 00:02:54,800
added all these permissions to allow CloudWatch events to

53
00:02:54,800 --> 00:02:56,360
trigger the Lambda function,

54
00:02:56,360 --> 00:02:59,920
we can go in here and set the CloudWatch event targets

55
00:02:59,920 --> 00:03:02,440
to target the Lambda function itself.

56
00:03:02,440 --> 00:03:04,340
For this, we'll be using a new command.

57
00:03:04,340 --> 00:03:07,980
So let's clear the screen, and let's run aws events

58
00:03:07,980 --> 00:03:12,170
put‑targets. Now, this is going to allow our CloudWatch rules

59
00:03:12,170 --> 00:03:14,200
to have a target of the Lambda function,

60
00:03:14,200 --> 00:03:19,480
so we need to specify the rule name, so we'll say daily_tasks for

61
00:03:19,480 --> 00:03:22,040
the first one here. And I'll do another backslash,

62
00:03:22,040 --> 00:03:25,300
and we'll specify the targets that we want this event to

63
00:03:25,300 --> 00:03:28,535
trigger. For this target, we'll need to pass it in as

64
00:03:28,535 --> 00:03:30,380
string, but inside of the string,

65
00:03:30,380 --> 00:03:33,810
we're going to need to give it a dictionary of some different values.

66
00:03:33,810 --> 00:03:36,570
The first value is going to be an Id value,

67
00:03:36,570 --> 00:03:39,750
and I'll put that in double quotes. And then I'll do a colon,

68
00:03:39,750 --> 00:03:43,440
and we can refer to This is just Id 1 because we'll need to have unique

69
00:03:43,440 --> 00:03:46,870
IDs for our targets. And then I'll put a comma here.

70
00:03:46,870 --> 00:03:50,770
The next property will be Arn for the Amazon Resource Name, and

71
00:03:50,770 --> 00:03:53,610
we'll specify another colon here. And now we'll have to be the

72
00:03:53,610 --> 00:03:56,740
ARN value for our Lambda function.

73
00:03:56,740 --> 00:03:58,180
Now, if we don't have this value,

74
00:03:58,180 --> 00:04:01,900
we can get it by going over to the AWS Console and then copying

75
00:04:01,900 --> 00:04:05,280
the value from the ARN at the top of our Lambda function for

76
00:04:05,280 --> 00:04:08,230
gpc_cuckoo. Then we can go back over here,

77
00:04:08,230 --> 00:04:14,480
paste that in, and then hit Enter for our events put‑targets here. Next,

78
00:04:14,480 --> 00:04:17,150
we can press the up arrow, and we can run this again.

79
00:04:17,150 --> 00:04:17,890
In this case,

80
00:04:17,890 --> 00:04:22,870
I'm going to change the rule from daily_tasks over to the new rule, which

81
00:04:22,870 --> 00:04:28,160
will be come_to_work, and I'll change this from Id 1 to Id 2, and hit

82
00:04:28,160 --> 00:04:32,360
Enter. Now we'll get this exact same result, and we can do it third time,

83
00:04:32,360 --> 00:04:36,950
again, changing this from come_to_work to our final event target that we

84
00:04:36,950 --> 00:04:38,200
want to set up here,

85
00:04:38,200 --> 00:04:43,410
which is setting up the pickup event to target this same function. In

86
00:04:43,410 --> 00:04:48,200
this case, we'll use Id 3 here and then hit Enter. Now,

87
00:04:48,200 --> 00:04:51,130
finally, these should all be set up with our Lambda function.

88
00:04:51,130 --> 00:04:53,940
So let me clear the screen here, and let's go back to the

89
00:04:53,940 --> 00:04:56,190
console and check if these have been set up.

90
00:04:56,190 --> 00:04:58,590
I'm going to refresh the screen here, and let's see if

91
00:04:58,590 --> 00:05:01,340
we now have three CloudWatch events.

92
00:05:01,340 --> 00:05:04,320
So it looks like all three have been set up on our function,

93
00:05:04,320 --> 00:05:08,620
and if I scroll down, I should see pickup, daily_tasks, and come_to_work.

94
00:05:08,620 --> 00:05:11,760
So this means we successfully created our Lambda function.

95
00:05:11,760 --> 00:05:15,680
So let's go back and look at what we've done in this module. In

96
00:05:15,680 --> 00:05:18,570
this module, we worked with new AWS services,

97
00:05:18,570 --> 00:05:24,040
including the Simple Email Service, SES, and the Simple Storage Service, S3.

98
00:05:24,040 --> 00:05:26,960
We also learned about some of the resources that we used,

99
00:05:26,960 --> 00:05:32,070
including more parts of the boto3 SDK and how we could use it with Python,

100
00:05:32,070 --> 00:05:34,960
as well as another library called Jinja2 that we used as

101
00:05:34,960 --> 00:05:37,350
a templating engine for those emails.

102
00:05:37,350 --> 00:05:38,260
And then finally,

103
00:05:38,260 --> 00:05:42,210
we created and deployed our Lambda function using the CLI to

104
00:05:42,210 --> 00:05:44,730
set up different events for our Lambda function in order to

105
00:05:44,730 --> 00:05:46,340
trigger it with CloudWatch.

106
00:05:46,340 --> 00:05:49,280
Now that was a lot of effort to get this done. In the next module,

107
00:05:49,280 --> 00:05:56,000
we'll look at how we can simplify this entire process with modern serverless application development.

