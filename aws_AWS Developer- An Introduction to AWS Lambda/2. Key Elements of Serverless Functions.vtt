WEBVTT
1
00:00:01.490 --> 00:00:05.180
So what are some examples of events, and how do they actually work?

2
00:00:05.180 --> 00:00:05.320
Well,

3
00:00:05.320 --> 00:00:08.450
let's imagine a few different event types and how that

4
00:00:08.450 --> 00:00:11.270
actually triggers Lambda to do something.

5
00:00:11.270 --> 00:00:12.190
The first, let's imagine,

6
00:00:12.190 --> 00:00:16.760
is a file upload. Well, with a file upload, we might have a PNG file,

7
00:00:16.760 --> 00:00:21.770
for example, gets sent to something like Amazon S3 or Simple Storage Service.

8
00:00:21.770 --> 00:00:24.890
Let's say that Lambda is supposed to resize that PNG and put

9
00:00:24.890 --> 00:00:28.010
it back somewhere else so our application can use it as

10
00:00:28.010 --> 00:00:29.720
something like a profile image.

11
00:00:29.720 --> 00:00:34.080
So when it sees that file upload coming to S3, S3 will then send

12
00:00:34.080 --> 00:00:36.640
a little piece of information over to Lambda,

13
00:00:36.640 --> 00:00:41.190
essentially the event details to tell Lambda that it has some work to do.

14
00:00:41.190 --> 00:00:43.290
Then Lambda will examine the event details,

15
00:00:43.290 --> 00:00:47.550
go and get the image from S3 based on the event details that are sent to it,

16
00:00:47.550 --> 00:00:50.140
resize it, and then put it where it's supposed to go.

17
00:00:50.140 --> 00:00:53.540
Similarly, we might have another event, like a scheduled time,

18
00:00:53.540 --> 00:00:56.270
which might trigger from something like a cron job,

19
00:00:56.270 --> 00:00:58.180
which triggers at a specific time,

20
00:00:58.180 --> 00:01:03.500
or a rate which triggers regularly on some interval, like 5 minutes or 3 hours.

21
00:01:03.500 --> 00:01:05.770
And every time that that job is triggered,

22
00:01:05.770 --> 00:01:09.260
we would get that basic configuration to come into our Lambda function, and then

23
00:01:09.260 --> 00:01:12.980
it would determine if it has some preconfigured task inside the Lambda to run

24
00:01:12.980 --> 00:01:17.740
what to do. Now, we might also have something like an API request that comes in

25
00:01:17.740 --> 00:01:20.240
from something like the AWS API Gateway.

26
00:01:20.240 --> 00:01:23.420
Now, each of these different types of events are all going to send

27
00:01:23.420 --> 00:01:26.520
some structured data over to Lambda to process.

28
00:01:26.520 --> 00:01:27.870
And from that structured data,

29
00:01:27.870 --> 00:01:31.230
it'll take different parts of it and determine what to do with it.

30
00:01:31.230 --> 00:01:32.580
In the case of an AP I request,

31
00:01:32.580 --> 00:01:35.680
it might take the specific endpoint being sent in.

32
00:01:35.680 --> 00:01:40.130
Maybe it's a GET request for some piece of information from a backing

33
00:01:40.130 --> 00:01:43.090
database. And it would see that, go to the backing database,

34
00:01:43.090 --> 00:01:45.390
get the information, and send it back.

35
00:01:45.390 --> 00:01:49.440
So what are some benefits and challenges of working with events

36
00:01:49.440 --> 00:01:51.900
and working with serverless functions like this?

37
00:01:51.900 --> 00:01:52.560
Well,

38
00:01:52.560 --> 00:01:56.020
one of the biggest things that we see in response to using serverless

39
00:01:56.020 --> 00:01:59.410
functions is the cost and utilization benefits,

40
00:01:59.410 --> 00:02:02.060
and there's some arguments on both sides in terms of

41
00:02:02.060 --> 00:02:04.540
using Lambda and cost and utilization.

42
00:02:04.540 --> 00:02:07.850
But the biggest thing to think about here is whether or not you're going to

43
00:02:07.850 --> 00:02:13.120
get high utilization from using Lambda and if that's worthwhile to offset

44
00:02:13.120 --> 00:02:17.230
the slight increase of cost that AWS is charging as a markup on top of this

45
00:02:17.230 --> 00:02:19.130
sort of service. Because technically,

46
00:02:19.130 --> 00:02:24.730
if you ran a 100% optimized service on something like EC2, just from the

47
00:02:24.730 --> 00:02:29.110
purely resource and machine cost infrastructure costs,

48
00:02:29.110 --> 00:02:32.620
the EC2 service would be a little bit cheaper, whereas with Lambda there'll be

49
00:02:32.620 --> 00:02:35.660
that slight overhead for AWS managing everything for you.

50
00:02:35.660 --> 00:02:38.950
But that's not really the whole picture because it's basically

51
00:02:38.950 --> 00:02:41.700
impossible to get to that 100% utilization.

52
00:02:41.700 --> 00:02:45.070
And it's a notorious problem with traditional applications.

53
00:02:45.070 --> 00:02:47.650
How do you make sure you're not paying for more than you're actually using?

54
00:02:47.650 --> 00:02:51.640
With serverless,t that problem is taken care of for you because you're only

55
00:02:51.640 --> 00:02:55.480
paying for the few seconds or the fractions of seconds that your code is

56
00:02:55.480 --> 00:02:57.950
actually running. Now, additionally,

57
00:02:57.950 --> 00:03:02.200
not having to manage the machines that your code runs on saves you time

58
00:03:02.200 --> 00:03:06.260
from doing everything from security patches to hardware maintenance, and it

59
00:03:06.260 --> 00:03:11.030
also saves you from having to deal with the potential consequences of not

60
00:03:11.030 --> 00:03:13.170
doing security patches or maintenance.

61
00:03:13.170 --> 00:03:15.930
That could be downtime for your business or serious

62
00:03:15.930 --> 00:03:19.230
vulnerabilities or risks for your applications.

63
00:03:19.230 --> 00:03:23.550
Now, because AWS manages both the machines in the Lambda service for you,

64
00:03:23.550 --> 00:03:27.055
you also get access to a bunch of integrations with other AWS services.

65
00:03:27.055 --> 00:03:30.720
Now, this helps you integrate between things like streaming data with

66
00:03:30.720 --> 00:03:35.180
Kinesis or IoT processing of data from the Internet of Things devices

67
00:03:35.180 --> 00:03:36.960
you might be working with. Now,

68
00:03:36.960 --> 00:03:40.840
if you want the benefits of that, Lambda is really the place to go.

69
00:03:40.840 --> 00:03:41.410
Finally,

70
00:03:41.410 --> 00:03:44.420
another massive benefit is that AWS handles the scaling of

71
00:03:44.420 --> 00:03:47.450
your compute capacity up and down for you.

72
00:03:47.450 --> 00:03:50.590
You don't need to request new hardware, set it up, or configure it.

73
00:03:50.590 --> 00:03:54.190
It's all there for you with a capacity that you need. Now, of course,

74
00:03:54.190 --> 00:03:55.380
with any newer technology,

75
00:03:55.380 --> 00:03:59.040
there are also challenges, and when you're running thousands and thousands of

76
00:03:59.040 --> 00:04:02.790
Lambda function invocations, each of those events that's triggering a Lambda

77
00:04:02.790 --> 00:04:06.710
function would cause an invocation. It can be hard to isolate which specific

78
00:04:06.710 --> 00:04:09.740
ones fail and how and really dig into those,

79
00:04:09.740 --> 00:04:13.220
and so debugging becomes a slightly more difficult challenge than

80
00:04:13.220 --> 00:04:16.090
it might be in the case of an EC2 instance. Just because those

81
00:04:16.090 --> 00:04:18.120
problems have been around for so long,

82
00:04:18.120 --> 00:04:21.900
there's more tools to address those in the case of EC2. You might

83
00:04:21.900 --> 00:04:25.330
have to end up using a third‑party tool to help isolate those or

84
00:04:25.330 --> 00:04:27.380
use something like Amazon CloudWatch,

85
00:04:27.380 --> 00:04:30.230
which has all the logs for your Lambda functions.

86
00:04:30.230 --> 00:04:30.420
Now,

87
00:04:30.420 --> 00:04:33.720
if your projects require lower level control over the operating

88
00:04:33.720 --> 00:04:36.250
system or other parts of the infrastructure,

89
00:04:36.250 --> 00:04:39.500
then Lambda might not be the best use case for you because many of

90
00:04:39.500 --> 00:04:43.620
those areas aren't configurable using AWS Lambda.

91
00:04:43.620 --> 00:04:46.410
And finally, because the service is a little bit newer,

92
00:04:46.410 --> 00:04:49.700
there's always going to be cutting‑edge quirks for niche use cases, so

93
00:04:49.700 --> 00:04:53.680
just be sure to research your own use cases as you're doing development

94
00:04:53.680 --> 00:04:56.550
work before you dive into Lambda to make sure that it's still

95
00:04:56.550 --> 00:04:58.840
appropriate for this new technology.

96
00:04:58.840 --> 00:05:02.080
So why would you specifically want to learn about Lambda?

97
00:05:02.080 --> 00:05:02.360
Well,

98
00:05:02.360 --> 00:05:04.090
I'm going to start by thinking about reasons that

99
00:05:04.090 --> 00:05:05.900
developers might want to learn Lambda,

100
00:05:05.900 --> 00:05:07.600
and then we'll look at the relevance it has to

101
00:05:07.600 --> 00:05:10.470
organizations and businesses on a broader scale.

102
00:05:10.470 --> 00:05:11.660
So, as a developer,

103
00:05:11.660 --> 00:05:14.760
you're going to want to focus on your applications and the needs of your

104
00:05:14.760 --> 00:05:18.440
users and the value that you can provide from your code.

105
00:05:18.440 --> 00:05:19.020
And in general,

106
00:05:19.020 --> 00:05:22.260
the maintenance of machines and operational tasks is not going to

107
00:05:22.260 --> 00:05:27.017
be your priority or your real desire to focus on, so this managed

108
00:05:27.017 --> 00:05:29.200
infrastructure helps you avoid that.

109
00:05:29.200 --> 00:05:29.530
Now,

110
00:05:29.530 --> 00:05:32.890
if you're interested in the surge of IoT devices in the Internet of

111
00:05:32.890 --> 00:05:35.710
Things, Lambda is a huge presence in that regard.

112
00:05:35.710 --> 00:05:38.990
Not only does it make it really easy to build things like Amazon

113
00:05:38.990 --> 00:05:43.290
Alexa skills, the overall event‑driven model is a super powerful

114
00:05:43.290 --> 00:05:46.380
architecture to utilize in the IoT space.

115
00:05:46.380 --> 00:05:47.490
And more generally,

116
00:05:47.490 --> 00:05:52.540
Lambda and AWS as a whole are consistently increasing in demand and relevance,

117
00:05:52.540 --> 00:05:56.290
with Lambda as a particular skill showing up more and more

118
00:05:56.290 --> 00:05:59.280
in job applications and different roles.

119
00:05:59.280 --> 00:06:03.390
So, let's take a look at what I mean by Lambda and AWS being in higher demand.

120
00:06:03.390 --> 00:06:05.130
Don't take my word for it.

121
00:06:05.130 --> 00:06:08.140
In terms of Lambda's growing relevance, over the last several

122
00:06:08.140 --> 00:06:11.940
years, it's been skyrocketing in comparison to other cloud

123
00:06:11.940 --> 00:06:16.030
function providers and remains one of the top cloud function

124
00:06:16.030 --> 00:06:18.440
providers in the industry today.

125
00:06:18.440 --> 00:06:20.380
As you can see from this Google trend search,

126
00:06:20.380 --> 00:06:24.640
it's still high above Azure Functions and Google Cloud Functions.

127
00:06:24.640 --> 00:06:26.770
But it's not just Lambda that's great to learn.

128
00:06:26.770 --> 00:06:30.770
It's also the largest AWS, or Amazon Web Service, ecosystem

129
00:06:30.770 --> 00:06:33.240
that's currently the single strongest player in the

130
00:06:33.240 --> 00:06:35.620
Infrastructure as a Service space.

131
00:06:35.620 --> 00:06:39.110
The second place winner is still probably Microsoft Azure,

132
00:06:39.110 --> 00:06:41.000
with other providers like IBM,

133
00:06:41.000 --> 00:06:44.250
Google Cloud Platform, and many others, distant contenders,

134
00:06:44.250 --> 00:06:47.240
for market share here. Some of those other providers have

135
00:06:47.240 --> 00:06:49.480
excellent services in specific areas,

136
00:06:49.480 --> 00:06:53.270
and Microsoft Azure has also started to develop many comparable services

137
00:06:53.270 --> 00:06:58.638
to AWS, but the overall ecosystem still appears to be strongest for AWS.

138
00:06:58.638 --> 00:07:02.970
Now, this means that not only for your personal development needs, but

139
00:07:02.970 --> 00:07:06.440
also for the needs of your businesses and organizations as a whole,

140
00:07:06.440 --> 00:07:10.230
Lambda and AWS still seem to be the best choices for developing these

141
00:07:10.230 --> 00:07:12.290
sorts of applications.

142
00:07:12.290 --> 00:07:14.340
So, by now, you're probably wondering, well,

143
00:07:14.340 --> 00:07:16.380
who uses Lambda, and why? Well,

144
00:07:16.380 --> 00:07:19.640
there's lots of different use cases for it. If just a few can include

145
00:07:19.640 --> 00:07:22.730
things like processing streaming data and the Internet of Things,

146
00:07:22.730 --> 00:07:26.250
like I mentioned, but it can also be integrated with AWS API Gateway

147
00:07:26.250 --> 00:07:28.720
to make easy and scalable APIs.

148
00:07:28.720 --> 00:07:32.200
And in the event you have some sort of photo or file processing needs,

149
00:07:32.200 --> 00:07:34.490
you can use Lambda to do this on demand.

150
00:07:34.490 --> 00:07:38.050
Now, it's also very flexible, so it can be used to power many

151
00:07:38.050 --> 00:07:41.520
different parts of back‑end web applications, be that getting

152
00:07:41.520 --> 00:07:45.460
access to some sort of database or processing some incoming data

153
00:07:45.460 --> 00:07:47.620
coming through CSVs or other files,

154
00:07:47.620 --> 00:07:50.480
or really many use cases that any sort of application

155
00:07:50.480 --> 00:07:52.950
you're building on the web might require.

156
00:07:52.950 --> 00:07:55.440
But keep in mind that this is just a subset of the things that

157
00:07:55.440 --> 00:08:01.000
Lambda can do, and always take a look for your specific use cases as you're starting to use it.

