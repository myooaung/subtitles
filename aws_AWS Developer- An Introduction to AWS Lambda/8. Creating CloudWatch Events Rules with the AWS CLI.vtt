WEBVTT
1
00:00:01.160 --> 00:00:03.990
The first thing we'll need to do in order to configure CloudWatch

2
00:00:03.990 --> 00:00:07.240
events with AWS Lambda is to create the different events that we'll

3
00:00:07.240 --> 00:00:10.200
be using to trigger that Lambda function.

4
00:00:10.200 --> 00:00:15.990
We'll do this with the aws events put‑rule command here.

5
00:00:15.990 --> 00:00:16.160
Now,

6
00:00:16.160 --> 00:00:19.390
events is signifying CloudWatch events, and I'll use the

7
00:00:19.390 --> 00:00:21.960
same backslash I was using before so I can go to the next

8
00:00:21.960 --> 00:00:23.920
line and type in my arguments.

9
00:00:23.920 --> 00:00:27.600
I'm going to use name here, and then I'm going to give this a name

10
00:00:27.600 --> 00:00:30.890
that's particular to what we're using in cuckoo.py. It's going to

11
00:00:30.890 --> 00:00:35.670
be come_to_work. Now I'm going to run this three times later on to

12
00:00:35.670 --> 00:00:37.850
create a come_to_work event,

13
00:00:37.850 --> 00:00:40.900
a daily_tasks event, and then our pickup event for our

14
00:00:40.900 --> 00:00:42.860
clients to come and pick up their pets.

15
00:00:42.860 --> 00:00:46.300
I'm going to put a space here and put another backslash, and we'll need to

16
00:00:46.300 --> 00:00:51.140
now pass in a new argument called schedule‑expression.

17
00:00:51.140 --> 00:00:51.340
Now,

18
00:00:51.340 --> 00:00:55.250
this will allow us to pass in either a rate or a cron event to

19
00:00:55.250 --> 00:00:57.840
trigger this function on a regular basis.

20
00:00:57.840 --> 00:00:58.410
In this case,

21
00:00:58.410 --> 00:01:02.130
I'm going to use a cron event using cron and this open‑close

22
00:01:02.130 --> 00:01:04.930
parentheses syntax. I'm also going to close it out with a single

23
00:01:04.930 --> 00:01:08.350
quotation here. And then inside of here, I'm going to need to tell

24
00:01:08.350 --> 00:01:10.240
this cron event when to run.

25
00:01:10.240 --> 00:01:12.290
Now, I want it to run at the top of the hour,

26
00:01:12.290 --> 00:01:15.040
so I would put a 0 here at the first value.

27
00:01:15.040 --> 00:01:19.970
If I wanted it to run at the 15‑minute mark, I could put a 15 here instead.

28
00:01:19.970 --> 00:01:21.820
But I want it to run at the top the hour, so that's

29
00:01:21.820 --> 00:01:23.730
the first thing there for minutes.

30
00:01:23.730 --> 00:01:27.480
And then I want it to run at a particular hour, so I'm going to put 12 here,

31
00:01:27.480 --> 00:01:31.950
and that'll signify 12 in GMT, which is about the time you'd want your

32
00:01:31.950 --> 00:01:34.775
employees to come to work in the east coast of the United States.

33
00:01:34.775 --> 00:01:39.310
However, keep in mind that this CloudWatch cron event is going to run in

34
00:01:39.310 --> 00:01:43.740
GMT always, so convert whatever you're doing to GMT when you're creating

35
00:01:43.740 --> 00:01:45.800
these cron events. Next,

36
00:01:45.800 --> 00:01:49.440
I'm going to add in the day of the month that I want this to run.

37
00:01:49.440 --> 00:01:49.620
Now,

38
00:01:49.620 --> 00:01:51.780
I don't really care too much about the day of the month that it

39
00:01:51.780 --> 00:01:53.650
is, so I'm going to put the question mark here,

40
00:01:53.650 --> 00:01:56.325
which will say go ahead and treat the other stuff as more important,

41
00:01:56.325 --> 00:01:59.440
and the day of the month will become irrelevant.

42
00:01:59.440 --> 00:02:02.980
Now let's put another space in here, and in this position I'll be

43
00:02:02.980 --> 00:02:05.880
specifying the month that I want this to run. So I could put

44
00:02:05.880 --> 00:02:08.170
something like JAN in here for January.

45
00:02:08.170 --> 00:02:10.840
If I wanted to do that with a number, I could also put a 1 in here.

46
00:02:10.840 --> 00:02:14.220
But I want this to run every month, so I'm going to put a star here.

47
00:02:14.220 --> 00:02:18.100
After that, I'll specify the day of the week that I want this to run.

48
00:02:18.100 --> 00:02:21.920
I could do something like MON for Monday, or if I want a range of dates,

49
00:02:21.920 --> 00:02:25.640
which in this case I do, I want to say Monday through the other date,

50
00:02:25.640 --> 00:02:28.520
which in this case will be FRI for Friday. So this

51
00:02:28.520 --> 00:02:31.640
will run during the work week in GMT.

52
00:02:31.640 --> 00:02:35.470
Next, I'm going to put a space here, and we'll add the last thing here,

53
00:02:35.470 --> 00:02:37.420
which is the year we want this to run in.

54
00:02:37.420 --> 00:02:39.690
I want this to run every year and not just in the

55
00:02:39.690 --> 00:02:41.330
current year or some future year,

56
00:02:41.330 --> 00:02:44.170
so I'll put the star there. So with all of this typed in,

57
00:02:44.170 --> 00:02:46.540
let's go ahead and hit Enter.

58
00:02:46.540 --> 00:02:50.250
So now this rule should have been created inside of my AWS account,

59
00:02:50.250 --> 00:02:54.080
and I'll be able to use it later on to configure it with AWS Lambda.

60
00:02:54.080 --> 00:02:56.430
Now one important thing I'm going to want to do is to copy

61
00:02:56.430 --> 00:02:59.790
down this ARN that's included here for later.

62
00:02:59.790 --> 00:03:02.360
Now the beginning of the ARN should remain the same.

63
00:03:02.360 --> 00:03:04.850
So if I create additional rules here,

64
00:03:04.850 --> 00:03:07.990
I should be able to then copy and paste the endings of the

65
00:03:07.990 --> 00:03:11.365
ARN, the actual name of the rule, in order to get the new

66
00:03:11.365 --> 00:03:13.500
ARN that's associated with it.

67
00:03:13.500 --> 00:03:17.010
So let's go ahead and continue on, adding these different rules.

68
00:03:17.010 --> 00:03:19.000
Let me go back up, and let's edit this.

69
00:03:19.000 --> 00:03:21.780
And instead of calling this come_to_work,

70
00:03:21.780 --> 00:03:28.240
let's call this next one our daily_tasks. Now, for this daily_tasks rule,

71
00:03:28.240 --> 00:03:31.980
we're also going to need to change the schedule‑expression from 12, which

72
00:03:31.980 --> 00:03:36.320
will be in that case about 8 a.m, to like 5 hours later, so what about in

73
00:03:36.320 --> 00:03:38.880
the middle of the day when we need to remind them to get some of that work

74
00:03:38.880 --> 00:03:40.720
done. So, with this,

75
00:03:40.720 --> 00:03:45.100
I should hit Enter again, and this will create a new daily_tasks rule for me.

76
00:03:45.100 --> 00:03:48.230
Now, finally, I can press up one more time to get that previous command,

77
00:03:48.230 --> 00:03:51.550
and we'll change daily_tasks to pickup.

78
00:03:51.550 --> 00:03:51.720
Now,

79
00:03:51.720 --> 00:03:56.280
this will be that pickup reminder for our clients to come and get their pets.

80
00:03:56.280 --> 00:03:57.300
So once I've changed the name,

81
00:03:57.300 --> 00:04:02.260
I'll also change the schedule‑expression from the 5 that's here to 22, and

82
00:04:02.260 --> 00:04:05.530
this should be closer to when we'd want our clients to come by and pick up

83
00:04:05.530 --> 00:04:09.440
their pets in the afternoon. So I can hit Enter one more time here, and

84
00:04:09.440 --> 00:04:11.600
this should've created the final rule.

85
00:04:11.600 --> 00:04:15.580
Now, one thing to note about these rules is that while they've been created,

86
00:04:15.580 --> 00:04:18.540
they haven't been associated with our Lambda function.

87
00:04:18.540 --> 00:04:20.740
In fact, I'm going to go ahead and clear the screen,

88
00:04:20.740 --> 00:04:24.450
and then we can go back over here to our Lambda console, and

89
00:04:24.450 --> 00:04:26.540
you'll notice that if we refresh the screen,

90
00:04:26.540 --> 00:04:31.230
they're still not associated with our gpc_cuckoo function here.

91
00:04:31.230 --> 00:04:34.130
Now I just want to demonstrate something on a different function because I

92
00:04:34.130 --> 00:04:37.150
don't want to mess anything up for our gpc_cuckoo function.

93
00:04:37.150 --> 00:04:40.720
Let's say I wanted to add a new trigger to the sparrow function. If

94
00:04:40.720 --> 00:04:44.580
we wanted to add a CloudWatch trigger from CloudWatch Events, we

95
00:04:44.580 --> 00:04:47.230
could specify one of these rules that we just created of

96
00:04:47.230 --> 00:04:50.240
daily_tasks, pickup, or come_to_work.

97
00:04:50.240 --> 00:04:53.300
But I don't want to do this for the sparrow function. I want to do this for

98
00:04:53.300 --> 00:04:56.830
our other function that we created of the gpc_cuckoo.

99
00:04:56.830 --> 00:05:04.000
But I'm not going to show you how to do this in the console. Instead, in the next video, I'll show you how to do this in the CLI.

