1
00:00:01,040 --> 00:00:03,080
Now that you have all the context you need,

2
00:00:03,080 --> 00:00:06,540
let's deploy our first Lambda function. In this demo,

3
00:00:06,540 --> 00:00:08,420
we'll deploy a Lambda canary function,

4
00:00:08,420 --> 00:00:10,930
which regularly checks the availability status of our

5
00:00:10,930 --> 00:00:13,840
imaginary client, Globomantics Pet Care.

6
00:00:13,840 --> 00:00:17,830
We'll start by using AWS' Lambda canary function blueprint.

7
00:00:17,830 --> 00:00:20,940
Then we'll configure a CloudWatch schedule in order to

8
00:00:20,940 --> 00:00:23,510
trigger our function on a regular basis.

9
00:00:23,510 --> 00:00:24,250
After that,

10
00:00:24,250 --> 00:00:26,915
we'll review the function code that AWS provides for the

11
00:00:26,915 --> 00:00:29,600
Lambda canary and make some adjustments to the Lambda

12
00:00:29,600 --> 00:00:31,630
function's configuration settings.

13
00:00:31,630 --> 00:00:34,670
Then we'll configure a default test event to make sure our function is

14
00:00:34,670 --> 00:00:38,520
working properly. And then finally, we'll review our function's results

15
00:00:38,520 --> 00:00:42,280
inside of Amazon CloudWatch and also make sure that we have an alarm set up

16
00:00:42,280 --> 00:00:44,680
to be notified if there are any errors.

17
00:00:44,680 --> 00:00:49,780
So let's go back over to the AWS console and get started. From the AWS

18
00:00:49,780 --> 00:00:52,760
Management Console home page, let's go to the Lambda section of the

19
00:00:52,760 --> 00:00:56,380
console by clicking on our Lambda icon here.

20
00:00:56,380 --> 00:00:59,020
Then let's create a Lambda function.

21
00:00:59,020 --> 00:01:02,980
If you see a get started page before you get onto that create a function page,

22
00:01:02,980 --> 00:01:06,240
just go ahead and click get started and then create your function.

23
00:01:06,240 --> 00:01:08,320
Instead of authoring a function from scratch,

24
00:01:08,320 --> 00:01:11,390
we're going to be using a blueprint for this function,

25
00:01:11,390 --> 00:01:13,460
and we're going to need to search through the existing

26
00:01:13,460 --> 00:01:16,440
blueprints for a canary function.

27
00:01:16,440 --> 00:01:16,570
Now,

28
00:01:16,570 --> 00:01:18,960
once I type in canary and hit Enter there, we should see

29
00:01:18,960 --> 00:01:22,820
this python3.7 lambda‑canary function in the available

30
00:01:22,820 --> 00:01:24,630
selection from the drop‑down.

31
00:01:24,630 --> 00:01:25,600
Once we're done with that,

32
00:01:25,600 --> 00:01:29,160
we can click Configure, after selecting it, and start the process

33
00:01:29,160 --> 00:01:32,250
of configuring this function and creating it.

34
00:01:32,250 --> 00:01:36,740
I'm going to call this function lamda‑canary.

35
00:01:36,740 --> 00:01:38,320
I'm also going to leave the default,

36
00:01:38,320 --> 00:01:40,710
Create a new role with basic Lambda permissions,

37
00:01:40,710 --> 00:01:43,100
selected underneath the Execution role.

38
00:01:43,100 --> 00:01:43,980
This will, by default,

39
00:01:43,980 --> 00:01:47,990
allow my function to send logs to Amazon CloudWatch. After I put the function

40
00:01:47,990 --> 00:01:51,470
name in and leave the Execution role as, Create a new role with basic Lambda

41
00:01:51,470 --> 00:01:55,070
permissions, I can scroll down and choose how I'd like to configure this

42
00:01:55,070 --> 00:01:58,520
function. Because this is a Lambda blueprint, it already knows we're working

43
00:01:58,520 --> 00:02:02,060
with a CloudWatch Events trigger, and we can go ahead and click the drop‑down

44
00:02:02,060 --> 00:02:06,400
here to pick between a CloudWatch Event rule that might already exist, in this

45
00:02:06,400 --> 00:02:10,355
case we don't have any, or we can click to create a new rule. So we'll do that

46
00:02:10,355 --> 00:02:11,050
now.

47
00:02:11,050 --> 00:02:14,420
Let's call the rule name for this particular function our

48
00:02:14,420 --> 00:02:17,730
canary, and let's give it a description of the frequency with

49
00:02:17,730 --> 00:02:19,660
which we'd like this rule to run.

50
00:02:19,660 --> 00:02:20,210
In this case,

51
00:02:20,210 --> 00:02:24,990
we're going to do it every 5 minutes, so let's say a five minute rule. And then

52
00:02:24,990 --> 00:02:29,300
below we'll be able to specify how we want this rule type to work. We can either

53
00:02:29,300 --> 00:02:32,390
choose a schedule expression or an event pattern.

54
00:02:32,390 --> 00:02:32,570
Now,

55
00:02:32,570 --> 00:02:36,505
a schedule expression would be something like the rate of one day or a

56
00:02:36,505 --> 00:02:39,440
cron expression that would allow us to specify when,

57
00:02:39,440 --> 00:02:43,040
specifically with a cron‑style event, we'd like this to trigger.

58
00:02:43,040 --> 00:02:46,640
Now, I'm going to use the rate of 5 minutes,

59
00:02:46,640 --> 00:02:49,500
and this will allow us to run every 5 minutes.

60
00:02:49,500 --> 00:02:51,600
If I wanted to do something like an event pattern,

61
00:02:51,600 --> 00:02:54,510
I could also click that. This would allow me to trigger my function

62
00:02:54,510 --> 00:02:58,740
based off of things happening in Auto Scaling groups, EC2 instances, or

63
00:02:58,740 --> 00:03:02,350
other services inside of AWS. But because I just want to trigger this

64
00:03:02,350 --> 00:03:05,600
every 5 minutes, I'll stick to that schedule expression and just keep my

65
00:03:05,600 --> 00:03:07,310
rate of 5 minutes there.

66
00:03:07,310 --> 00:03:07,560
Now,

67
00:03:07,560 --> 00:03:10,870
I don't want to enable this trigger quite yet because I don't want to have

68
00:03:10,870 --> 00:03:13,800
my function start running until I'm done configuring it.

69
00:03:13,800 --> 00:03:16,210
So I'm going to leave this as unselected and then scroll

70
00:03:16,210 --> 00:03:18,150
down to the Lambda function code here.

71
00:03:18,150 --> 00:03:18,430
Now,

72
00:03:18,430 --> 00:03:23,090
we can actually review this inside of our Lambda console here and edit it and

73
00:03:23,090 --> 00:03:26,040
make any changes we need to before we create the function.

74
00:03:26,040 --> 00:03:27,550
But I'm not going to do this right now,

75
00:03:27,550 --> 00:03:30,700
so I'm going to keep scrolling down and review the Environment variables

76
00:03:30,700 --> 00:03:33,760
section. In this section with the environment variables,

77
00:03:33,760 --> 00:03:37,220
we're going to be able to change what website our function is going to,

78
00:03:37,220 --> 00:03:41,240
by default, be pinging to check if it's still up and what the expected

79
00:03:41,240 --> 00:03:44,200
text on that website is. In this case,

80
00:03:44,200 --> 00:03:48,920
it's been prepopulated as amazon.com. And if I go to amazon.com,

81
00:03:48,920 --> 00:03:52,770
it's expecting us to see the text Online Shopping on that page.

82
00:03:52,770 --> 00:03:55,090
So let's not change anything here either, and for right now,

83
00:03:55,090 --> 00:03:56,730
let's just click Create Function.

84
00:03:56,730 --> 00:04:00,140
We'll change the rest of these configuration values in just a moment.

85
00:04:00,140 --> 00:04:07,000
This might take a few moments, as it's also creating the role and permissions required for this Lambda function to work.

