1
00:00:01,120 --> 00:00:03,460
So now I've gone ahead and added a few things here.

2
00:00:03,460 --> 00:00:06,190
I've updated the handler file so that it contains the

3
00:00:06,190 --> 00:00:08,740
code from the demos for this section.

4
00:00:08,740 --> 00:00:11,700
It's got a bit more information in here, and now it's using a

5
00:00:11,700 --> 00:00:13,950
few different libraries that I've also added.

6
00:00:13,950 --> 00:00:16,670
I have added the notify.py library,

7
00:00:16,670 --> 00:00:20,900
which inside of it should allow us to use the SES client and

8
00:00:20,900 --> 00:00:24,640
verified emails that we verified in earlier sections to send an

9
00:00:24,640 --> 00:00:26,670
email to an admin. In this case,

10
00:00:26,670 --> 00:00:30,790
one of the email addresses that we've already notified, letting them know that a

11
00:00:30,790 --> 00:00:34,880
client with the email of email has been added to DynamoDB.

12
00:00:34,880 --> 00:00:39,240
Then it'll send that message out with the ses.send_email method.

13
00:00:39,240 --> 00:00:40,040
Additionally,

14
00:00:40,040 --> 00:00:44,970
we have this users library. Inside of this users library, we're creating

15
00:00:44,970 --> 00:00:48,900
a boto3 resource to interact with the DynamoDB table.

16
00:00:48,900 --> 00:00:52,400
This will allow us to, in the create_user function down below,

17
00:00:52,400 --> 00:00:57,420
send an item into DynamoDB with the email of an email that we're passing into

18
00:00:57,420 --> 00:01:01,760
it and some data associated with a new client email. From there, we'll be

19
00:01:01,760 --> 00:01:06,500
returning a status code result. If the request succeeds, we'll return 200 for

20
00:01:06,500 --> 00:01:09,200
the status code, and if the request fails,

21
00:01:09,200 --> 00:01:12,900
we'll return a status code of 400 and also say that the request is

22
00:01:12,900 --> 00:01:16,220
invalid with the status right there. From here,

23
00:01:16,220 --> 00:01:18,970
we're going to go ahead and go back to the handler function and see how

24
00:01:18,970 --> 00:01:23,270
we're using these inside of it. We're importing the users create_user

25
00:01:23,270 --> 00:01:26,640
function and the notify_admin_of_new_client function.

26
00:01:26,640 --> 00:01:30,640
And inside of our handler, we're going to be taking the event that's coming in,

27
00:01:30,640 --> 00:01:33,620
printing it out just so we can see this in the logs, and

28
00:01:33,620 --> 00:01:36,850
then creating a payload from what should be inside of the

29
00:01:36,850 --> 00:01:38,740
event, inside of the body.

30
00:01:38,740 --> 00:01:39,980
Now inside of this body,

31
00:01:39,980 --> 00:01:43,980
we're going to expect to see an email that we can set as the client email and a

32
00:01:43,980 --> 00:01:48,150
data section, which will contain the data related to this user. From there,

33
00:01:48,150 --> 00:01:52,740
we'll run the create_user function from inside of that users.py file with the

34
00:01:52,740 --> 00:01:56,150
client email that we're expecting from this incoming payload and the data

35
00:01:56,150 --> 00:02:00,470
associated with that. That will either return a status code of 200, if we're

36
00:02:00,470 --> 00:02:03,160
successful, or a 400 status.

37
00:02:03,160 --> 00:02:06,260
So in the case that it returns a successful status code of 200,

38
00:02:06,260 --> 00:02:09,530
we'll send an email to the admin in order to let them know that

39
00:02:09,530 --> 00:02:11,940
there's a new client with that client email.

40
00:02:11,940 --> 00:02:13,910
And if it doesn't have that status code,

41
00:02:13,910 --> 00:02:16,980
it'll end up sending a 400 response back to the client.

42
00:02:16,980 --> 00:02:17,550
But if it does,

43
00:02:17,550 --> 00:02:21,920
it'll keep that 200 response and send it along through the return response here.

44
00:02:21,920 --> 00:02:26,790
So let's go ahead and deploy this using serverless deploy. Now once we do this,

45
00:02:26,790 --> 00:02:31,270
we'll have all of this updated code out inside of our AWS environment,

46
00:02:31,270 --> 00:02:35,990
and we can review any tests of this API using the Serverless Dashboard.

47
00:02:35,990 --> 00:02:40,540
So we're also going to test this API using something called Postman.

48
00:02:40,540 --> 00:02:42,360
So once this is finished deploying,

49
00:02:42,360 --> 00:02:46,020
we should be able to scroll up and make sure we have this POST endpoint here so

50
00:02:46,020 --> 00:02:49,370
we can paste it into Postman and test this new endpoint out.

51
00:02:49,370 --> 00:02:51,400
So let's go back over to Postman here,

52
00:02:51,400 --> 00:02:54,060
and I've already created a request for us here.

53
00:02:54,060 --> 00:02:55,960
So I'm going to paste this into Postman just to make

54
00:02:55,960 --> 00:02:57,820
sure the API endpoint is the same.

55
00:02:57,820 --> 00:03:01,120
And then I'm going to configure the request that we're sending out.

56
00:03:01,120 --> 00:03:03,640
So in this case, I'm sticking with a POST here,

57
00:03:03,640 --> 00:03:08,070
and not using another HTTP method, and I'm also creating a body inside of here,

58
00:03:08,070 --> 00:03:13,660
which I am setting as raw JSON that I've used inside of this JSON selector here,

59
00:03:13,660 --> 00:03:16,730
and I've pasted in some information inside of the JSON.

60
00:03:16,730 --> 00:03:19,750
That's what our API expects to get in this format.

61
00:03:19,750 --> 00:03:22,640
So once I do this, I should be able to hit Send,

62
00:03:22,640 --> 00:03:24,540
and we should see the results below.

63
00:03:24,540 --> 00:03:26,210
So let's scroll down now.

64
00:03:26,210 --> 00:03:28,860
It looks like there's an internal server error with something that's

65
00:03:28,860 --> 00:03:32,310
happening here. Now in order to debug this more fully,

66
00:03:32,310 --> 00:03:35,680
we could go over to the Serverless Dashboard. Over here on the

67
00:03:35,680 --> 00:03:38,830
Serverless Dashboard, I could go into the app we created earlier and

68
00:03:38,830 --> 00:03:42,540
into the dev stage here, and let's go to the explorer. Now, I've been

69
00:03:42,540 --> 00:03:44,430
testing this out a little bit previously,

70
00:03:44,430 --> 00:03:47,010
so you might see some errors that are unrelated here

71
00:03:47,010 --> 00:03:48,430
to what we've just been doing.

72
00:03:48,430 --> 00:03:49,900
But a few seconds ago,

73
00:03:49,900 --> 00:03:54,700
we just ran this function. So let's take a look at the most recent failure here.

74
00:03:54,700 --> 00:03:57,350
And it looks like this has to do with the SendEmail operation

75
00:03:57,350 --> 00:03:59,330
when we were trying to notify an admin.

76
00:03:59,330 --> 00:04:03,440
So let's go back to our permissions and see why this might be the case. If

77
00:04:03,440 --> 00:04:06,300
we look at the provider section inside of serverless.yml,

78
00:04:06,300 --> 00:04:08,560
we currently have one IAM role statement,

79
00:04:08,560 --> 00:04:13,460
and it's giving us the actions of dynamodb:PutItem and SES:*, but it's

80
00:04:13,460 --> 00:04:16,190
only allowing us to do that on the DynamoDB table,

81
00:04:16,190 --> 00:04:19,720
and we're not trying to email the DynamoDB table, we're trying to email a

82
00:04:19,720 --> 00:04:23,190
separate email. So this means that we had an error here that we actually need

83
00:04:23,190 --> 00:04:26,330
to resolve by updating our permissions and redeploying.

84
00:04:26,330 --> 00:04:29,780
So let me fix those really quick and show you what they look like.

85
00:04:29,780 --> 00:04:32,770
So I've gone ahead and updated the iamRoleStatements here, and

86
00:04:32,770 --> 00:04:35,680
now you can see we have two different statements, the effect of

87
00:04:35,680 --> 00:04:40,030
allow for the dynamodb:PutItem over to that resource of the users

88
00:04:40,030 --> 00:04:41,900
table, and a new statement,

89
00:04:41,900 --> 00:04:46,100
which is allowing the SES:* action, so allowing us to send emails

90
00:04:46,100 --> 00:04:49,490
or send raw emails or send HTML emails, basically any of those

91
00:04:49,490 --> 00:04:52,120
actions on any resource this time.

92
00:04:52,120 --> 00:04:53,080
So with this update,

93
00:04:53,080 --> 00:04:56,910
we should be able to run serverless deploy one more time and then update

94
00:04:56,910 --> 00:05:00,090
the permissions on our service to avoid this error.

95
00:05:00,090 --> 00:05:03,120
Once this finishes, let's go back to Postman.

96
00:05:03,120 --> 00:05:04,990
Now that our service is finished deploying,

97
00:05:04,990 --> 00:05:08,790
let's go over to Postman. In Postman, let's try and test this one

98
00:05:08,790 --> 00:05:12,190
more time. I'm going to hit Send to send it out again, and let's

99
00:05:12,190 --> 00:05:14,040
scroll down and see what happens.

100
00:05:14,040 --> 00:05:16,710
It looks like now we get back the results of our request,

101
00:05:16,710 --> 00:05:19,340
which is what we'd expect if this worked correctly.

102
00:05:19,340 --> 00:05:23,640
So let's go over to my Yahoo email and see if I got a notification about this.

103
00:05:23,640 --> 00:05:25,160
Over here in my Yahoo email,

104
00:05:25,160 --> 00:05:27,420
it looks like a new client has been added, so let's open

105
00:05:27,420 --> 00:05:29,940
up this email. And inside this email,

106
00:05:29,940 --> 00:05:32,150
it's showing us that a new client has been added with the

107
00:05:32,150 --> 00:05:34,840
values that we just sent into that API.

108
00:05:34,840 --> 00:05:37,390
So this means that our service is up and running correctly,

109
00:05:37,390 --> 00:05:39,730
and we've managed to do a lot of different things with it.

110
00:05:39,730 --> 00:05:43,280
So let's go back and review what we've done in this module. In this

111
00:05:43,280 --> 00:05:47,040
module, we managed to create our own serverless service and integrate

112
00:05:47,040 --> 00:05:50,050
it with the Serverless Dashboard using the app and org values that we

113
00:05:50,050 --> 00:05:54,140
had in severless.yml. We also configured the service with several

114
00:05:54,140 --> 00:05:57,210
different IAM role statements to give it permissions to act on

115
00:05:57,210 --> 00:05:59,800
DynamoDB and on SES.

116
00:05:59,800 --> 00:06:04,520
And, we created a new function that had an http endpoint that allowed us

117
00:06:04,520 --> 00:06:08,240
to trigger it using something like Postman, cURL, or to integrate this

118
00:06:08,240 --> 00:06:10,830
URL into our front‑end web applications.

119
00:06:10,830 --> 00:06:14,340
We also created a DynamoDB table using the resources section of

120
00:06:14,340 --> 00:06:18,670
serverless.yml. This DynamoDB table allowed us to store our user's

121
00:06:18,670 --> 00:06:23,130
emails, and then after we added the users in that table, and then

122
00:06:23,130 --> 00:06:25,040
after we added users to that table,

123
00:06:25,040 --> 00:06:29,480
we used the notify_admin_of_new_client function in notify.py to let

124
00:06:29,480 --> 00:06:31,840
ourselves know when that user has been added.

125
00:06:31,840 --> 00:06:34,430
So there's a lot of different things that we did in this section,

126
00:06:34,430 --> 00:06:40,000
and nice work getting it all done. Let's review what we did inside of this course.

