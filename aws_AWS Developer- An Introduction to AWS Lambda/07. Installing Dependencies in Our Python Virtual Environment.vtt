WEBVTT
1
00:00:01.040 --> 00:00:04.280
In this video, we'll test everything out locally to make sure that we can

2
00:00:04.280 --> 00:00:07.770
send tweets out to Twitter and take other actions using a Twitter client

3
00:00:07.770 --> 00:00:10.170
that we create from the Twython library.

4
00:00:10.170 --> 00:00:11.450
So let's get started.

5
00:00:11.450 --> 00:00:11.800
First,

6
00:00:11.800 --> 00:00:15.250
let's review the code in sparrow.py. At the very top, we're

7
00:00:15.250 --> 00:00:18.180
importing several different dependencies here. The first is the

8
00:00:18.180 --> 00:00:21.040
random library from the Python standard library.

9
00:00:21.040 --> 00:00:24.540
Then, we'll be using Twython, which we'll install from pip,

10
00:00:24.540 --> 00:00:27.480
the Python package manager, in order to interact with

11
00:00:27.480 --> 00:00:29.260
Twitter and create the Twitter client.

12
00:00:29.260 --> 00:00:33.380
And we're also using the get_secret function from ssm_secrets to go out

13
00:00:33.380 --> 00:00:36.690
and get our secrets from the SSM Parameter Store.

14
00:00:36.690 --> 00:00:36.920
Now,

15
00:00:36.920 --> 00:00:40.440
after we do all those imports, we'll be creating a Twitter client using

16
00:00:40.440 --> 00:00:45.150
Twython. We'll be getting the secrets from the CONSUMER_KEY, CONSUMER_SECRET,

17
00:00:45.150 --> 00:00:49.780
ACCESS_TOKEN_KEY, and ACCESS_TOKEN_SECRET parameters that are all already in

18
00:00:49.780 --> 00:00:52.840
the SSM Parameter Store from the previous videos.

19
00:00:52.840 --> 00:00:56.320
Now below this, we'll be able to set up some random tweets that

20
00:00:56.320 --> 00:00:59.460
we'll pick from when we want to send tweets out to Twitter. And

21
00:00:59.460 --> 00:01:03.100
directly below that, we'll have two functions, send_tweet and

22
00:01:03.100 --> 00:01:04.450
the handler function.

23
00:01:04.450 --> 00:01:08.490
The handler function is what we'll configure inside of AWS Lambda to

24
00:01:08.490 --> 00:01:11.320
run every time our Lambda function is invoked.

25
00:01:11.320 --> 00:01:15.140
Now, send_tweet will be a useful helper function for that handler,

26
00:01:15.140 --> 00:01:18.750
which will allow it to send status updates out to Twitter, and we can

27
00:01:18.750 --> 00:01:21.780
just feed it a tweet_text whenever we wanted to do that.

28
00:01:21.780 --> 00:01:25.560
So, in the handler, we'll use the send_tweet function and pick a random

29
00:01:25.560 --> 00:01:29.640
choice from the potential_tweets using that random library and the

30
00:01:29.640 --> 00:01:32.390
potential_tweets list that we just defined earlier.

31
00:01:32.390 --> 00:01:34.870
Now there's a few other options inside of this if you'd like

32
00:01:34.870 --> 00:01:36.740
to change up what the handler is doing,

33
00:01:36.740 --> 00:01:39.380
I've also gone ahead and defined a few other functions,

34
00:01:39.380 --> 00:01:42.640
like a follow_someone function that uses the Twitter client's

35
00:01:42.640 --> 00:01:46.560
create_friendship method to go and follow somebody on Twitter,

36
00:01:46.560 --> 00:01:50.080
and I've defined a follow_fernando function as an example of how you

37
00:01:50.080 --> 00:01:53.520
might use that. So you could use either of these functions, as well

38
00:01:53.520 --> 00:01:56.450
as either of the like_tweet function or the like_a_punny_tweet

39
00:01:56.450 --> 00:01:59.990
function, where like_tweet will allow you to like a specific tweet

40
00:01:59.990 --> 00:02:01.490
on Twitter by its ID,

41
00:02:01.490 --> 00:02:04.490
which is the number that's included in the URL whenever you're looking

42
00:02:04.490 --> 00:02:07.410
at a particular status message on Twitter, and you can also like a

43
00:02:07.410 --> 00:02:11.160
specific treat, like I'm showing you here in like_a_punny_tweet, which

44
00:02:11.160 --> 00:02:14.790
will like one of my worst tweets on Twitter and my worst puns that I

45
00:02:14.790 --> 00:02:16.130
think I've ever made.

46
00:02:16.130 --> 00:02:18.610
So, feel free to use any of these functions as you'd like,

47
00:02:18.610 --> 00:02:21.360
and we can take a look at how they work after we've installed

48
00:02:21.360 --> 00:02:24.090
everything we need to test this all out locally.

49
00:02:24.090 --> 00:02:25.840
So let's get started here.

50
00:02:25.840 --> 00:02:28.120
I'm going to go ahead in my terminal here,

51
00:02:28.120 --> 00:02:33.060
and I'm going to use python3 and a module on python3 using ‑m.

52
00:02:33.060 --> 00:02:33.200
Now,

53
00:02:33.200 --> 00:02:37.810
modules are some bits of code that we can use with Python to do useful things.

54
00:02:37.810 --> 00:02:41.460
This one is called venv, which stands for virtual environment.

55
00:02:41.460 --> 00:02:45.340
It's going to allow us to create a clean installation of Python and pip

56
00:02:45.340 --> 00:02:48.970
and allow us to install dependencies inside of this virtual environment

57
00:02:48.970 --> 00:02:52.350
so that we can work with a clean slate and not have to worry about any

58
00:02:52.350 --> 00:02:55.260
other dependencies you might have on your operating system polluting

59
00:02:55.260 --> 00:02:58.950
everything or risking maybe doing something you don't want to do on your

60
00:02:58.950 --> 00:02:59.720
operating system,

61
00:02:59.720 --> 00:03:04.510
like installing Twython at the global level and just keeping it contained here.

62
00:03:04.510 --> 00:03:07.530
Now I'm going to need to give this virtual environment a name. In this case,

63
00:03:07.530 --> 00:03:10.500
I'm going to call it .venv so we don't forget what it

64
00:03:10.500 --> 00:03:12.740
is, and I'm going to hit Enter.

65
00:03:12.740 --> 00:03:17.390
This will create a new .venv folder that will contain a bunch of stuff in it.

66
00:03:17.390 --> 00:03:19.040
So if I go and open this up,

67
00:03:19.040 --> 00:03:22.190
you'll see that it contains a bin, includes, and lib, and

68
00:03:22.190 --> 00:03:25.600
inside of bin It has things like pip, pip3,

69
00:03:25.600 --> 00:03:29.410
pip3.7, and python and python3.

70
00:03:29.410 --> 00:03:32.940
Now, all of these are going to allow us to use these installations

71
00:03:32.940 --> 00:03:36.900
of pip and Python in order to take actions like opening up the

72
00:03:36.900 --> 00:03:40.780
Python interpreter or installing dependencies from pip instead of

73
00:03:40.780 --> 00:03:42.920
using our globally installed ones.

74
00:03:42.920 --> 00:03:46.200
So how do we actually take advantage of these resources? Well, we can

75
00:03:46.200 --> 00:03:50.810
turn on our virtual environment on a Linux or a Mac system with a

76
00:03:50.810 --> 00:03:54.790
command called source, and then we're going to need to source a file

77
00:03:54.790 --> 00:03:56.440
inside of a virtual environment.

78
00:03:56.440 --> 00:04:01.060
So I'm going to type .venv here, and that'll get us into the virtual

79
00:04:01.060 --> 00:04:03.780
environment folder, and then I'm going to press Tab to autocomplete some

80
00:04:03.780 --> 00:04:06.590
of these things. So I'm going to go into bin here,

81
00:04:06.590 --> 00:04:08.905
and then I want to get to the activate file, so I'm going

82
00:04:08.905 --> 00:04:11.150
to do activate there and hit Enter.

83
00:04:11.150 --> 00:04:12.360
Once I've done that,

84
00:04:12.360 --> 00:04:16.310
the virtual environment has been turned on because I sourced that activate file.

85
00:04:16.310 --> 00:04:18.440
Now, if you're working on a Windows environment,

86
00:04:18.440 --> 00:04:21.600
there's a separate command that you'll need to use, and I've included

87
00:04:21.600 --> 00:04:24.570
the second command that you would need to use in windows_setup.bat.

88
00:04:24.570 --> 00:04:31.330
You're going to use instead after running that python3 ‑m venv .venv

89
00:04:31.330 --> 00:04:36.190
command, call .venv\Scripts\activate.bat.

90
00:04:36.190 --> 00:04:38.570
Now this command will do the exact same thing and will

91
00:04:38.570 --> 00:04:40.140
turn on your virtual environment.

92
00:04:40.140 --> 00:04:41.720
It's just because you're on a Windows system you have

93
00:04:41.720 --> 00:04:43.350
to run a slightly different one.

94
00:04:43.350 --> 00:04:45.310
So, after you run the command,

95
00:04:45.310 --> 00:04:48.690
go ahead and make sure that the .venv appears in parentheses

96
00:04:48.690 --> 00:04:50.740
on the left side of your command prompt.

97
00:04:50.740 --> 00:04:52.610
Once it does, you should be good to go.

98
00:04:52.610 --> 00:04:53.500
Now, in here,

99
00:04:53.500 --> 00:04:57.650
we can install dependencies that we need to make this function run, so

100
00:04:57.650 --> 00:05:02.210
let's do this with Twython first. I could use either pip or pip3 in this

101
00:05:02.210 --> 00:05:05.340
case now that I've turned on my virtual environment. Either one will work

102
00:05:05.340 --> 00:05:08.370
the same because they're both associated with the virtual environment

103
00:05:08.370 --> 00:05:09.790
installation of Python.

104
00:05:09.790 --> 00:05:14.190
So let's use pip3 first and install Twython. Now, I actually

105
00:05:14.190 --> 00:05:17.735
need to install this, so I'm going to do pip3 install twython

106
00:05:17.735 --> 00:05:19.820
and not just type out the name there.

107
00:05:19.820 --> 00:05:20.040
Now,

108
00:05:20.040 --> 00:05:22.250
once this installs Twython, we should have it

109
00:05:22.250 --> 00:05:24.560
available in our virtual environment.

110
00:05:24.560 --> 00:05:25.510
And if we wanted to find it,

111
00:05:25.510 --> 00:05:29.430
we could actually go into venv and see if it's appearing in the lib here.

112
00:05:29.430 --> 00:05:31.450
I'll need to scroll down and actually find it, but

113
00:05:31.450 --> 00:05:33.530
here you see twython right there.

114
00:05:33.530 --> 00:05:35.500
This means that we have this local installation of

115
00:05:35.500 --> 00:05:37.440
Twython inside of our virtual environment,

116
00:05:37.440 --> 00:05:40.660
and it's not appearing up in higher levels of our operating system.

117
00:05:40.660 --> 00:05:42.390
So, this is great because it keeps all our

118
00:05:42.390 --> 00:05:44.920
dependencies contained to this project.

119
00:05:44.920 --> 00:05:47.930
So now let's go back here, I'm going to clear the screen, and let's

120
00:05:47.930 --> 00:05:51.560
also install another dependency we need. Now it's not really clear

121
00:05:51.560 --> 00:05:57.330
why we need this right now when I type in pip install boto3, but if

122
00:05:57.330 --> 00:06:02.980
we look at the ssm_secrets file, you'll see that we are using it inside of here.

123
00:06:02.980 --> 00:06:06.340
Now, boto3 is kind of an interesting dependency for Lambda.

124
00:06:06.340 --> 00:06:09.600
The reason is because we need it locally in order to use

125
00:06:09.600 --> 00:06:13.000
boto3 inside of the ssm_secrets.py file.

126
00:06:13.000 --> 00:06:16.110
However, we don't need to install it into our function package,

127
00:06:16.110 --> 00:06:20.070
which we'll do in a minute, because it's provided for us in the AWS

128
00:06:20.070 --> 00:06:23.080
Lambda runtime, so we don't need to install it as an additional

129
00:06:23.080 --> 00:06:26.570
dependency along with something like Twyton. The same would go for

130
00:06:26.570 --> 00:06:31.530
the AWS SDK for JavaScript or some of the other AWS SKDs that run

131
00:06:31.530 --> 00:06:32.440
inside of Lambda.

132
00:06:32.440 --> 00:06:36.120
They're all provided by AWS in there for us to help us avoid

133
00:06:36.120 --> 00:06:38.570
having to have larger function packages.

134
00:06:38.570 --> 00:06:41.150
So let's close this out, and let's go through the rest

135
00:06:41.150 --> 00:06:43.510
of the process by installing boto3.

136
00:06:43.510 --> 00:06:44.800
And once this is done,

137
00:06:44.800 --> 00:06:48.960
we can start testing out sparrow.py. I'm going to clear this window out here.

138
00:06:48.960 --> 00:06:51.900
And now if I wanted to test what's currently in my environment,

139
00:06:51.900 --> 00:06:55.350
I could do pip freeze to see what's installed already.

140
00:06:55.350 --> 00:06:58.040
From here, I see twython, and if I scroll up a little further,

141
00:06:58.040 --> 00:07:01.570
I also see boto3, so this should be exactly what we need.

142
00:07:01.570 --> 00:07:08.000
Now, with these dependencies installed, in the next video, we can run some code to test out how to work with Twython.

