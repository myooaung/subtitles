1
00:00:01,190 --> 00:00:03,700
Welcome to this module of my AWS Developer course,

2
00:00:03,700 --> 00:00:07,900
An Introduction to AWS Lambda, starting with Lambda functions.

3
00:00:07,900 --> 00:00:10,840
Now that you're familiar with the AWS ecosystem and you've

4
00:00:10,840 --> 00:00:13,870
looked at the Identity and Access Management console and learned

5
00:00:13,870 --> 00:00:16,890
how to work with policies and roles that will be underpinning

6
00:00:16,890 --> 00:00:18,350
our projects in this course,

7
00:00:18,350 --> 00:00:23,880
we can jump into creating and deploying our first function in this module.

8
00:00:23,880 --> 00:00:24,890
In this module,

9
00:00:24,890 --> 00:00:28,300
you'll learn about current limitations to AWS Lambda and considerations

10
00:00:28,300 --> 00:00:31,140
that you should have regarding those limitations.

11
00:00:31,140 --> 00:00:36,400
First, we'll review the languages and runtimes supported by AWS Lambda.

12
00:00:36,400 --> 00:00:39,140
Then we'll take a look at the resource limitations that it has,

13
00:00:39,140 --> 00:00:43,540
including the maximum runtime lengths and total file size caps.

14
00:00:43,540 --> 00:00:46,020
We'll also take a look at a few other considerations that we'll

15
00:00:46,020 --> 00:00:49,100
need to keep in mind when making Lambda functions.

16
00:00:49,100 --> 00:00:49,810
Next,

17
00:00:49,810 --> 00:00:54,500
you'll learn the steps you need to take in order to deploy your function to AWS.

18
00:00:54,500 --> 00:00:57,030
We'll learn about gathering function dependencies,

19
00:00:57,030 --> 00:01:01,340
how to write our code locally, and also within the AWS editor in the console.

20
00:01:01,340 --> 00:01:03,790
We'll also learn about function packages and how to

21
00:01:03,790 --> 00:01:06,230
deploy them to Lambda. And finally,

22
00:01:06,230 --> 00:01:08,640
we'll take a look at how we can debug our Lambda functions

23
00:01:08,640 --> 00:01:12,200
effectively. With all this knowledge under our belts, we'll be

24
00:01:12,200 --> 00:01:14,880
able to look at deploying our Lambda canary.

25
00:01:14,880 --> 00:01:17,700
We'll walk through all of the steps required to do so and

26
00:01:17,700 --> 00:01:20,310
set up our function on a regular schedule.

27
00:01:20,310 --> 00:01:22,220
So let's start with some considerations and

28
00:01:22,220 --> 00:01:24,980
limitations for working with AWS Lambda.

29
00:01:24,980 --> 00:01:26,280
It's only a few years old,

30
00:01:26,280 --> 00:01:28,010
which means that there are still a variety of

31
00:01:28,010 --> 00:01:29,820
limitations when it comes to using it.

32
00:01:29,820 --> 00:01:33,340
We'll take a look at some of the hard and soft limits that Lambda has, as well

33
00:01:33,340 --> 00:01:36,330
as what it means for us when we're building applications.

34
00:01:36,330 --> 00:01:38,570
One of the first considerations you'll need to make is

35
00:01:38,570 --> 00:01:41,540
picking a runtime to run your code against.

36
00:01:41,540 --> 00:01:45,550
Now, I want to quickly differentiate between a language, like Python,

37
00:01:45,550 --> 00:01:51,300
Node.js, Java, or Go, and a runtime with a specific version number within

38
00:01:51,300 --> 00:01:56,540
that language, like Python 3.8 or Node.js 12.13.0.

39
00:01:56,540 --> 00:01:59,160
These different runtimes will have the features of the

40
00:01:59,160 --> 00:02:02,040
language at that particular version and with the actual

41
00:02:02,040 --> 00:02:04,840
software that's used to run your code.

42
00:02:04,840 --> 00:02:08,120
Now, if you're writing your code against one particular runtime version,

43
00:02:08,120 --> 00:02:10,710
you're going to need to make sure that you specify that version or that

44
00:02:10,710 --> 00:02:15,740
it's actually supported by AWS Lambda before you use it.

45
00:02:15,740 --> 00:02:19,790
Let's take a look at some of the AWS managed languages and runtimes.

46
00:02:19,790 --> 00:02:23,160
These are runtimes that AWS will allow you to select from a dropâ€‘down

47
00:02:23,160 --> 00:02:27,180
window inside of the AWS console or from a simple configuration value

48
00:02:27,180 --> 00:02:31,770
inside of the AWS CLI or SDKs. It includes things like two of the most

49
00:02:31,770 --> 00:02:35,920
popular languages for programming with Lambda, like Node.js and Python,

50
00:02:35,920 --> 00:02:40,960
and it also includes other supported languages like Ruby, Java, Go, and

51
00:02:40,960 --> 00:02:41,850
.NET Core,

52
00:02:41,850 --> 00:02:44,520
which contains within it C# and PowerShell and the

53
00:02:44,520 --> 00:02:46,700
option to run code against both of those.

54
00:02:46,700 --> 00:02:49,370
Now, these are just the ones that AWS negatively has

55
00:02:49,370 --> 00:02:51,370
support for that they manage for you.

56
00:02:51,370 --> 00:02:54,380
But there's also the option to have your own custom runtimes.

57
00:02:54,380 --> 00:02:57,500
For example, if you really wanted to run your code using Rust,

58
00:02:57,500 --> 00:03:02,240
C++, or PHP, there are ways to do this with Lambda; however,

59
00:03:02,240 --> 00:03:04,530
it will take a little bit more configuration on your part to

60
00:03:04,530 --> 00:03:06,940
get one of these runtimes up and running.

61
00:03:06,940 --> 00:03:08,390
But once you pick a runtime,

62
00:03:08,390 --> 00:03:11,330
you'll also need to take a few other considerations in mind,

63
00:03:11,330 --> 00:03:14,920
starting with some size limitations for your Lambda functions.

64
00:03:14,920 --> 00:03:17,720
Whenever you're making a Lambda function, you have to evaluate the

65
00:03:17,720 --> 00:03:20,830
file size of your uncompressed code and dependencies.

66
00:03:20,830 --> 00:03:24,720
The uncompressed file size must be less than 250 MB for

67
00:03:24,720 --> 00:03:26,990
you to be able to deploy it into Lambda.

68
00:03:26,990 --> 00:03:27,830
Additionally,

69
00:03:27,830 --> 00:03:30,700
your compressed code and dependencies after you zip up your

70
00:03:30,700 --> 00:03:34,090
function package must be less than 50 MB.

71
00:03:34,090 --> 00:03:36,300
There are a few other file size limitations,

72
00:03:36,300 --> 00:03:40,170
but one of the other important ones is that your total function packages

73
00:03:40,170 --> 00:03:45,090
inside of an AWS region must remain less than 75 GB.

74
00:03:45,090 --> 00:03:48,660
If you encounter any of these limitations as you continue working with Lambda,

75
00:03:48,660 --> 00:03:50,870
keep in mind that for many of the size limitations,

76
00:03:50,870 --> 00:03:52,820
there are a few workarounds.

77
00:03:52,820 --> 00:03:56,480
I've found that when I encounter a library that is larger than I expect,

78
00:03:56,480 --> 00:03:59,630
I can usually find a more succinct library with less

79
00:03:59,630 --> 00:04:02,020
dependency bloat. This can frequently shave some needed

80
00:04:02,020 --> 00:04:04,260
megabytes off my total function package size,

81
00:04:04,260 --> 00:04:06,760
both when compressed and uncompressed.

82
00:04:06,760 --> 00:04:08,930
In addition to searching for smaller libraries,

83
00:04:08,930 --> 00:04:13,110
you can also make a more specific architectural decision. Rather than

84
00:04:13,110 --> 00:04:16,830
having a massive code monolith that performs all the operations you need,

85
00:04:16,830 --> 00:04:20,750
think about how you could break that out into discrete parts, like

86
00:04:20,750 --> 00:04:23,880
microservice architectures, and how each could serve a component of the

87
00:04:23,880 --> 00:04:26,350
work you need to do. For example,

88
00:04:26,350 --> 00:04:30,230
pretend your application needed a few large image processing libraries

89
00:04:30,230 --> 00:04:34,180
that each perform consecutive actions on some file. Rather than loading

90
00:04:34,180 --> 00:04:36,780
all of those dependencies into the same function,

91
00:04:36,780 --> 00:04:39,260
split them into separate functions that hand off the

92
00:04:39,260 --> 00:04:42,020
partially processed files at each step.

93
00:04:42,020 --> 00:04:46,240
This way, you don't have to worry about every library in every single function.

94
00:04:46,240 --> 00:04:49,680
Another thing to consider is that maybe there's another language that offers a

95
00:04:49,680 --> 00:04:52,910
more compact solution to the problem that you're working on.

96
00:04:52,910 --> 00:04:56,660
If you're working with Python, take a look at how Node could handle the task.

97
00:04:56,660 --> 00:04:59,865
If you're using Java, check out Python. There might not always be a

98
00:04:59,865 --> 00:05:02,440
more concise solution in a different language,

99
00:05:02,440 --> 00:05:05,520
but it is certainly worth a look, and some of the runtimes

100
00:05:05,520 --> 00:05:08,650
like Java do tend to have higher amounts of dependencies

101
00:05:08,650 --> 00:05:11,410
required to get the same things done.

102
00:05:11,410 --> 00:05:14,950
There are several other resource limitations to keep in mind when using Lambda.

103
00:05:14,950 --> 00:05:19,340
The first is the ephemeral storage limitation of 512 MB.

104
00:05:19,340 --> 00:05:21,740
This means that if you need to work with local files on

105
00:05:21,740 --> 00:05:26,730
the machine that your code executes on, they better not be bigger than 512 MB.

106
00:05:26,730 --> 00:05:29,410
There's also a maximum execution duration on all of

107
00:05:29,410 --> 00:05:31,910
your Lambda functions of 900 seconds.

108
00:05:31,910 --> 00:05:35,440
This means after 900 seconds, your Lambda functions will time out.

109
00:05:35,440 --> 00:05:37,890
This is important to note if you're running tasks that have

110
00:05:37,890 --> 00:05:41,830
higher latencies or depend on other services. The 900â€‘second

111
00:05:41,830 --> 00:05:45,100
timer is still running when Lambda is waiting on something like a

112
00:05:45,100 --> 00:05:47,700
database query or in API request.

113
00:05:47,700 --> 00:05:52,050
Additionally, you have a limit of 1000 concurrent Lambda functions.

114
00:05:52,050 --> 00:05:56,140
This means that you can only execute 1000 functions at the same time.

115
00:05:56,140 --> 00:05:58,480
Now this might sound like a relatively low number,

116
00:05:58,480 --> 00:06:00,710
but keep in mind that many Lambda functions run

117
00:06:00,710 --> 00:06:03,520
within a second or a few seconds.

118
00:06:03,520 --> 00:06:05,300
Now if you do encounter any of these limitations,

119
00:06:05,300 --> 00:06:08,080
there are a few ways to avoid being impacted by them.

120
00:06:08,080 --> 00:06:12,440
Let's say you have a several gigabyte log file that you need processed.

121
00:06:12,440 --> 00:06:16,450
Instead of being limited by the 512 MB of ephemeral storage,

122
00:06:16,450 --> 00:06:19,520
consider splitting the file up into different parts in S3 and

123
00:06:19,520 --> 00:06:21,980
then processing it in incremental chunks.

124
00:06:21,980 --> 00:06:22,430
For example,

125
00:06:22,430 --> 00:06:26,620
you could break up the log file into 500â€‘MB chunks for processing, and

126
00:06:26,620 --> 00:06:29,610
then have the Lambda function handle each of these chunks to avoid

127
00:06:29,610 --> 00:06:33,150
these limitations. In order to avoid running up against the maximum

128
00:06:33,150 --> 00:06:35,410
execution duration of 900 seconds,

129
00:06:35,410 --> 00:06:37,750
you could consider chaining functions together that are

130
00:06:37,750 --> 00:06:39,790
discrete parts of your application logic.

131
00:06:39,790 --> 00:06:40,660
For example,

132
00:06:40,660 --> 00:06:43,840
let's say you'd like to use Lambda to assist in your data warehousing pipeline.

133
00:06:43,840 --> 00:06:46,510
Instead of using a single function to extract,

134
00:06:46,510 --> 00:06:50,630
transform, and load the data into your warehouse, use one Lambda function

135
00:06:50,630 --> 00:06:54,720
to query and store raw data in S3, then use a second function to process

136
00:06:54,720 --> 00:06:57,340
that raw data and store it in a new location,

137
00:06:57,340 --> 00:06:58,230
and lastly,

138
00:06:58,230 --> 00:07:00,490
used a third function to take the process data and

139
00:07:00,490 --> 00:07:02,290
load it into your data warehouse.

140
00:07:02,290 --> 00:07:05,160
Each of these discrete steps will be in different Lambda

141
00:07:05,160 --> 00:07:07,720
functions that have separate 900â€‘second timeouts,

142
00:07:07,720 --> 00:07:10,690
allowing you to effectively increase your limitations.

143
00:07:10,690 --> 00:07:11,400
Lastly,

144
00:07:11,400 --> 00:07:15,010
there are several cases in which AWS will simply increase the

145
00:07:15,010 --> 00:07:17,810
limitations if you ask. If you're interested in getting more than 1000

146
00:07:17,810 --> 00:07:20,130
concurrent Lambda functions running at the same time,

147
00:07:20,130 --> 00:07:24,010
just contact AWS and see if they can change the restrictions on your account.

148
00:07:24,010 --> 00:07:25,820
It never hurts to ask.

149
00:07:25,820 --> 00:07:29,090
There are a few more things to keep in mind when configuring your Lambda

150
00:07:29,090 --> 00:07:31,660
functions, the first of which is to make sure that you're allocating a

151
00:07:31,660 --> 00:07:34,350
reasonable amount of memory to your Lambda function.

152
00:07:34,350 --> 00:07:39,910
You can choose to give it anywhere from 128 MB to 3 GB of memory to use.

153
00:07:39,910 --> 00:07:40,330
Now,

154
00:07:40,330 --> 00:07:43,820
the CPU doesn't have a setting like that within the Lambda

155
00:07:43,820 --> 00:07:46,610
configuration, but AWS says that it scales proportionately with the

156
00:07:46,610 --> 00:07:49,280
amount of memory allocation that you give to your function.

157
00:07:49,280 --> 00:07:51,220
So if you double the memory for your function,

158
00:07:51,220 --> 00:07:53,710
you also double the available CPU.

159
00:07:53,710 --> 00:07:56,860
Another thing to think about when using Lambda is if you needed to have

160
00:07:56,860 --> 00:08:02,880
access to AWS resources within an AWS VPC, or virtual private cloud. A VPC

161
00:08:02,880 --> 00:08:07,230
is a virtual network specifically for your AWS account that blocks access to

162
00:08:07,230 --> 00:08:09,930
AWS services from outside of the VPC.

163
00:08:09,930 --> 00:08:13,340
While Lambda runs within the AWS VPC by default,

164
00:08:13,340 --> 00:08:16,840
it doesn't have access to resources within your private VPC.

165
00:08:16,840 --> 00:08:18,600
This is because it isn't running on a virtual

166
00:08:18,600 --> 00:08:21,180
machine instance within your own VPC.

167
00:08:21,180 --> 00:08:26,320
Instead, it runs on AWS managed instances that live outside of your VPC.

168
00:08:26,320 --> 00:08:27,100
Essentially,

169
00:08:27,100 --> 00:08:29,600
keep in mind that if you want your Lambda function to be able to talk to

170
00:08:29,600 --> 00:08:34,770
other resources, like databases in your private VPC such as Redshift or RDS

171
00:08:34,770 --> 00:08:38,690
instances, you'll want to provide VPC access to Lambda. And as a final

172
00:08:38,690 --> 00:08:41,240
caveat, if you're in an industry that requires you to run your code within

173
00:08:41,240 --> 00:08:43,200
something called a dedicated VPC,

174
00:08:43,200 --> 00:08:46,920
which is essentially a VPC that runs on physically separated hardware,

175
00:08:46,920 --> 00:08:50,620
you're going to need to make sure that AWS will allow you to connect with

176
00:08:50,620 --> 00:08:53,620
Lambda to anything inside of that VPC. At this time,

177
00:08:53,620 --> 00:08:55,840
it might not be completely supported.

178
00:08:55,840 --> 00:08:58,470
So what are some final considerations that you should have when

179
00:08:58,470 --> 00:09:02,420
using AWS Lambda? Well, keep in mind that Lambda is purely event

180
00:09:02,420 --> 00:09:07,170
driven, be that often AWS API requests, some file being uploaded to

181
00:09:07,170 --> 00:09:11,340
S3, or a regularly scheduled event, triggering it at a preset time.

182
00:09:11,340 --> 00:09:13,840
Now make sure your use case can fit within that.

183
00:09:13,840 --> 00:09:17,400
Also, remember that there are those code and size limitations.

184
00:09:17,400 --> 00:09:20,640
If you have a very complex and bulky application that doesn't seem to

185
00:09:20,640 --> 00:09:22,940
have an easy way to decouple itself into smaller,

186
00:09:22,940 --> 00:09:24,090
discrete parts,

187
00:09:24,090 --> 00:09:27,155
you might run into some of the size limitations that we discussed earlier.

188
00:09:27,155 --> 00:09:31,350
And think about how you can use Lambda as a component of a larger whole.

189
00:09:31,350 --> 00:09:33,990
Lambda can be integrated with a variety of services,

190
00:09:33,990 --> 00:09:38,150
which makes it ideal to power microservices and irregular workloads.

191
00:09:38,150 --> 00:09:40,690
But keep in mind that you may need to refactor your

192
00:09:40,690 --> 00:09:44,100
applications into more distinct Lambda functions rather than

193
00:09:44,100 --> 00:09:46,640
a monolithic application architecture.

194
00:09:46,640 --> 00:09:47,280
Also,

195
00:09:47,280 --> 00:09:50,310
there are real performance limitations on Lambda. If you need

196
00:09:50,310 --> 00:09:52,910
significant amounts of processing power altogether,

197
00:09:52,910 --> 00:09:55,750
and there are no ways to break up your workloads into smaller

198
00:09:55,750 --> 00:09:58,030
chunks, Lambda won't always be able to help you.

199
00:09:58,030 --> 00:10:01,390
And lastly, if you have exceptionally long running workloads,

200
00:10:01,390 --> 00:10:05,540
you might not be able to reconcile them with Lambda's timeout limitations.

201
00:10:05,540 --> 00:10:13,000
So, with that context aside, let's take a look at what we need in order to deploy our first Lambda functions.

