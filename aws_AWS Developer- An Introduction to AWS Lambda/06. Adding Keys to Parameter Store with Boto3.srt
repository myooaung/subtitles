1
00:00:01,070 --> 00:00:04,680
In this video, I'll be helping you set all of the rest of your Twitter API

2
00:00:04,680 --> 00:00:09,040
credentials into the SSM Parameter Store using boto3 and some of the Python

3
00:00:09,040 --> 00:00:13,320
code that I've included in the ssm_secrets.py file.

4
00:00:13,320 --> 00:00:13,580
Now,

5
00:00:13,580 --> 00:00:16,990
if you've already done this in the AWS Console, you can skip ahead through

6
00:00:16,990 --> 00:00:20,640
this part. If you haven't, this is a great way to do it and is a pretty fun

7
00:00:20,640 --> 00:00:25,260
way to learn more about the AWS SDK for Python boto3. So let's start by

8
00:00:25,260 --> 00:00:30,630
taking a closer look at the ssm_secrets.py file. Particularly, we're going

9
00:00:30,630 --> 00:00:33,430
to be interested in one of the functions that I write towards the bottom

10
00:00:33,430 --> 00:00:37,650
called put_secret. Now, at the very top, I've imported the boto3 library,

11
00:00:37,650 --> 00:00:40,520
and we can do this in our terminal down here as we follow along with the

12
00:00:40,520 --> 00:00:41,240
code.

13
00:00:41,240 --> 00:00:45,190
So I'm going to run import boto3, and because we just installed that,

14
00:00:45,190 --> 00:00:47,930
we should be able to use it in our Python code here.

15
00:00:47,930 --> 00:00:51,360
Now the next thing we can do is to look at the put_secret function

16
00:00:51,360 --> 00:00:54,370
that we have right here up above in the Python code.

17
00:00:54,370 --> 00:00:57,950
Now put_secret takes a parameter_name and a parameter_value, and

18
00:00:57,950 --> 00:01:01,200
essentially what it's going to let us do is the exact same thing we did in

19
00:01:01,200 --> 00:01:04,300
the AWS Console when we were in the Parameter Store.

20
00:01:04,300 --> 00:01:09,340
It's going to let us take the SSM client that we can create with boto3 and

21
00:01:09,340 --> 00:01:12,780
then used the put_parameter method of that SSM client.

22
00:01:12,780 --> 00:01:15,610
We'd have to provide it a name, which in this case is going to be the

23
00:01:15,610 --> 00:01:19,230
input from parameter_name, and a value, which is the parameter_value

24
00:01:19,230 --> 00:01:22,260
input, and then we're going to set the type of the parameter we're

25
00:01:22,260 --> 00:01:24,310
creating called SecureString.

26
00:01:24,310 --> 00:01:24,830
In this case,

27
00:01:24,830 --> 00:01:27,330
the exact same encrypted value that we were setting

28
00:01:27,330 --> 00:01:32,030
in the AWS Console. And finally, we set this Overwrite value equal to True,

29
00:01:32,030 --> 00:01:35,170
essentially saying that if we see an already existing parameter name,

30
00:01:35,170 --> 00:01:37,930
we're going to overwrite the value of whatever's in there.

31
00:01:37,930 --> 00:01:39,600
Now if I scroll down a little further,

32
00:01:39,600 --> 00:01:41,500
it's just going to print out some information about our

33
00:01:41,500 --> 00:01:44,010
success, if we can run this correctly. Now,

34
00:01:44,010 --> 00:01:47,070
I'm going to scroll down even further here, and you'll see that all of

35
00:01:47,070 --> 00:01:51,160
this commented out code is an example of how we could use put_secret to

36
00:01:51,160 --> 00:01:54,460
send in all our secrets to SSM Parameter Store.

37
00:01:54,460 --> 00:01:57,660
So let's go ahead and try this now. I'm going to uncomment this entire code

38
00:01:57,660 --> 00:02:01,440
block, and let's try setting it up to run in our interpreter.

39
00:02:01,440 --> 00:02:01,610
Now,

40
00:02:01,610 --> 00:02:05,100
first, we're going to need to rely on this put_secret function, so copy the

41
00:02:05,100 --> 00:02:09,430
put_secret function and paste it into your Python interpreter. And hit Enter a

42
00:02:09,430 --> 00:02:12,150
few times to make sure that it's been recorded there.

43
00:02:12,150 --> 00:02:12,600
Now,

44
00:02:12,600 --> 00:02:15,100
after you've done that, you can scroll down and start taking a

45
00:02:15,100 --> 00:02:17,610
look at this example code that I've included.

46
00:02:17,610 --> 00:02:20,050
Now what we're going to need to do is replace the REPLACE_ME

47
00:02:20,050 --> 00:02:22,660
values with the values of your secrets.

48
00:02:22,660 --> 00:02:26,910
Do not commit this code anywhere into GitHub or using Git in any sense

49
00:02:26,910 --> 00:02:30,420
because this contains our secrets, and that's just why I've included it as

50
00:02:30,420 --> 00:02:34,010
commented out code here as an example,. You really don't want to leave this

51
00:02:34,010 --> 00:02:37,780
code inside of ssm_secrets.py. In fact,

52
00:02:37,780 --> 00:02:41,170
let's actually copy this code piece by piece as we're adding it in.

53
00:02:41,170 --> 00:02:44,370
So I'm going to copy this SECRETS = and then the open curly

54
00:02:44,370 --> 00:02:46,890
brace here, and this will start off our dictionary

55
00:02:46,890 --> 00:02:49,090
containing the information we need.

56
00:02:49,090 --> 00:02:51,020
Now in the next line I'll use a tab,

57
00:02:51,020 --> 00:02:55,140
and then I'll have the CONSUMER_KEY be the first name that I'll be using.

58
00:02:55,140 --> 00:02:57,230
So let's go ahead and have that CONSUMER_KEY in there.

59
00:02:57,230 --> 00:02:59,800
We may have already set this value previously,

60
00:02:59,800 --> 00:03:03,410
but that's okay because we can overwrite it in this section too.

61
00:03:03,410 --> 00:03:05,130
So I'm going to paste this in here. Instead of using

62
00:03:05,130 --> 00:03:08,110
REPLACE_ME, I'm using the actual CONSUMER_KEY value,

63
00:03:08,110 --> 00:03:09,770
and I'm not going to make you watch me do this,

64
00:03:09,770 --> 00:03:12,140
but I'm going to fill the rest of the values in.

65
00:03:12,140 --> 00:03:15,470
So now I've entered all those values in and created this SECRETS

66
00:03:15,470 --> 00:03:18,680
dictionary here, that you can see if I type it in, and it'll be returned

67
00:03:18,680 --> 00:03:22,660
to us. And this SECRETS dictionary will be used inside of these lines 33

68
00:03:22,660 --> 00:03:27,080
and 34 here in order to get a parameter_name and a parameter_value

69
00:03:27,080 --> 00:03:31,227
inside of that SECRETS dictionary and then put that secret into the AWS

70
00:03:31,227 --> 00:03:33,140
SSM Parameter Store.

71
00:03:33,140 --> 00:03:35,570
So let's just copy this section of code here

72
00:03:35,570 --> 00:03:37,740
directly into our Python interpreter.

73
00:03:37,740 --> 00:03:38,710
Now, I'm going to hit Enter here,

74
00:03:38,710 --> 00:03:42,310
and this should run through all of the code we need it to do. Now this for

75
00:03:42,310 --> 00:03:45,850
loop has successfully executed, and it's put a parameter with the name of

76
00:03:45,850 --> 00:03:50,260
CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN_ KEY, and ACCESS_TOKEN_SECRET

77
00:03:50,260 --> 00:03:53,920
all into SSM, and it looks like it'll work successfully. Now, if we wanted

78
00:03:53,920 --> 00:03:56,400
to go back to AWS, we could actually check on this.

79
00:03:56,400 --> 00:04:00,340
So back in the AWS Console we could navigate to the Systems Manager here.

80
00:04:00,340 --> 00:04:03,070
And as long as we've configured everything inside of that same region,

81
00:04:03,070 --> 00:04:04,610
in my case Northern Virginia,

82
00:04:04,610 --> 00:04:07,930
us‑east‑1, if I go to the Parameter Store, I should see

83
00:04:07,930 --> 00:04:10,200
all of the keys we just pushed in here.

84
00:04:10,200 --> 00:04:12,350
Now you can see some of these don't have descriptions, and

85
00:04:12,350 --> 00:04:15,030
that's because I didn't bother specifying a description using

86
00:04:15,030 --> 00:04:18,810
the AWS SDK boto3. So now that we know these are in here and

87
00:04:18,810 --> 00:04:20,610
we've successfully pushed them in,

88
00:04:20,610 --> 00:04:23,710
let's see if we can get the values back from the Parameter Store.

89
00:04:23,710 --> 00:04:25,480
So let's go back to my code here.

90
00:04:25,480 --> 00:04:25,850
Now,

91
00:04:25,850 --> 00:04:28,320
we don't actually need any of the previous code because we just

92
00:04:28,320 --> 00:04:32,070
finished this step, so let's go ahead and just either delete or

93
00:04:32,070 --> 00:04:35,010
comment out this section of code again since we don't need it. I'm

94
00:04:35,010 --> 00:04:38,360
going to save the ssm_secrets.py file to make sure that none of this

95
00:04:38,360 --> 00:04:40,540
runs while we're using it later on.

96
00:04:40,540 --> 00:04:41,290
Now from here,

97
00:04:41,290 --> 00:04:44,130
let's scroll back up, and let's see how we can use the

98
00:04:44,130 --> 00:04:47,410
get_secret function to get secrets back out of boto3.

99
00:04:47,410 --> 00:04:51,590
So let's copy it now from the top of get_secret to the bottom here, and

100
00:04:51,590 --> 00:04:54,280
let's paste it into our interpreter and hit Enter.

101
00:04:54,280 --> 00:04:57,965
Now let's see what it actually does by taking a closer look at it. Now,

102
00:04:57,965 --> 00:05:01,500
first it's creating a ssm client like the other function we had, and

103
00:05:01,500 --> 00:05:05,220
then it's using the ssm.get_parameter method to go and get the

104
00:05:05,220 --> 00:05:09,010
parameter with a specific name and then decrypt the values inside of

105
00:05:09,010 --> 00:05:11,040
that parameter to return to us.

106
00:05:11,040 --> 00:05:15,540
So this should be as simple as going get_secret and then

107
00:05:15,540 --> 00:05:17,940
typing in the name of the value that we want,

108
00:05:17,940 --> 00:05:21,860
which in this case might be something like CONSUMER_KEY.

109
00:05:21,860 --> 00:05:25,030
So let's make sure to quote that here and hit Enter.

110
00:05:25,030 --> 00:05:28,310
Now we're getting back this value, so it looks like it's working properly.

111
00:05:28,310 --> 00:05:30,220
Now, if we wanted to get any of the other values out,

112
00:05:30,220 --> 00:05:33,580
we just need to make sure to get the name of that value that we wanted for

113
00:05:33,580 --> 00:05:37,725
the parameter, and then we could use get_secret again and replace the

114
00:05:37,725 --> 00:05:40,980
CONSUMER_KEY value here with the ACCESS_TOKEN_SECRET.

115
00:05:40,980 --> 00:05:43,652
So this is everything that we need to get set up with our SSM secrets

116
00:05:43,652 --> 00:05:51,000
here. In the next videos, we'll see how this will interact with sparrow.py to help us create our Twitter bot.

