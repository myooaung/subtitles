WEBVTT
1
00:00:01.040 --> 00:00:01.830
[Autogenerated] way to go.

2
00:00:01.830 --> 00:00:04.750
You made it through the first module of this designing,

3
00:00:04.750 --> 00:00:09.730
scalable in fault tolerant systems within a W s plural site course.

4
00:00:09.730 --> 00:00:14.570
Before we move on, let's have a quick wrap up and review on what we learned.

5
00:00:14.570 --> 00:00:20.420
We looked at the differences between state ful and stateless workloads,

6
00:00:20.420 --> 00:00:23.830
as well as the considerations that you need to take

7
00:00:23.830 --> 00:00:26.880
into account for designing each.

8
00:00:26.880 --> 00:00:30.490
We introduced stateless and serve Earless service's.

9
00:00:30.490 --> 00:00:33.840
We looked at a W s Lambda and we talked about E.

10
00:00:33.840 --> 00:00:34.940
C s.

11
00:00:34.940 --> 00:00:38.650
And then we explore different E c two instance types.

12
00:00:38.650 --> 00:00:40.590
So we looked at different life cycles,

13
00:00:40.590 --> 00:00:45.080
including reserved instances for big cost savings.

14
00:00:45.080 --> 00:00:47.500
We talked about how you can commit to a year,

15
00:00:47.500 --> 00:00:52.310
23 years, as well as convertible or standard instances.

16
00:00:52.310 --> 00:00:55.350
We looked at the typical on demand instances,

17
00:00:55.350 --> 00:00:58.160
which is what you get when you just spin up in launch.

18
00:00:58.160 --> 00:01:01.940
An instance immediately within the EEC to dashboard.

19
00:01:01.940 --> 00:01:04.440
And then we looked at spot instances.

20
00:01:04.440 --> 00:01:08.860
So we Gwen ahead and made a spot request and saw how it

21
00:01:08.860 --> 00:01:11.710
gets fulfilled based on a bid price.

22
00:01:11.710 --> 00:01:15.330
And we talked about how you receive an interruption warning

23
00:01:15.330 --> 00:01:18.640
that may suddenly terminate your instances.

24
00:01:18.640 --> 00:01:22.660
Now let's go ahead and wrap up here and in the next module will

25
00:01:22.660 --> 00:01:32.000
pick up and learn about implementing resilient auto scaling workloads within AWS using offered service's.

