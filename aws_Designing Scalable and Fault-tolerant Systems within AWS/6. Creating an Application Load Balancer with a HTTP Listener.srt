1
00:00:00,940 --> 00:00:05,790
[Autogenerated] Let's talk about elastic load balancing within AWS.

2
00:00:05,790 --> 00:00:09,780
Now I'm at the EEC to dashboard here and under load balancing.

3
00:00:09,780 --> 00:00:13,690
I want to select load balancers and let's click on Create.

4
00:00:13,690 --> 00:00:19,790
Currently, there are three main offerings for us from a ws for load balancing.

5
00:00:19,790 --> 00:00:21,730
We have application load balancing,

6
00:00:21,730 --> 00:00:25,420
which is going to focus on that layer seven traffic in the routing.

7
00:00:25,420 --> 00:00:29,280
Based around those rules, we have a network load balancer,

8
00:00:29,280 --> 00:00:32,290
which is going to focus on the network layer,

9
00:00:32,290 --> 00:00:33,900
and it allows for T.

10
00:00:33,900 --> 00:00:36,310
L s offloading at scale.

11
00:00:36,310 --> 00:00:39,490
And that's a common exam scenario that's brought up

12
00:00:39,490 --> 00:00:42,210
on the solutions architect exam.

13
00:00:42,210 --> 00:00:46,040
Now the final one we have here is on the right classic load balancer.

14
00:00:46,040 --> 00:00:49,820
Now this is the legacy low balance or offered to us,

15
00:00:49,820 --> 00:00:53,830
and it's not recommended that you use these if you can avoid it.

16
00:00:53,830 --> 00:00:57,280
So for this demo will look at application load balancers

17
00:00:57,280 --> 00:00:59,620
in the next one will look at network,

18
00:00:59,620 --> 00:01:04,540
so let's click on create on application and this brings us to our configuration.

19
00:01:04,540 --> 00:01:08,220
Now there's three main components to an application.

20
00:01:08,220 --> 00:01:10,000
Low balance or set up.

21
00:01:10,000 --> 00:01:14,540
The first is the load balancer itself, which is pretty self explanatory,

22
00:01:14,540 --> 00:01:17,240
and you can see that here on the diagram.

23
00:01:17,240 --> 00:01:21,320
But then we also have a listener which is listening for

24
00:01:21,320 --> 00:01:25,040
traffic over the Internet or internally.

25
00:01:25,040 --> 00:01:28,010
And then we have target groups that are assigned to

26
00:01:28,010 --> 00:01:32,180
listeners for forwarding rules, and we'll walk through those here.

27
00:01:32,180 --> 00:01:35,510
So the first thing we do is we create a load balancer name.

28
00:01:35,510 --> 00:01:37,440
So let me go and give it a name.

29
00:01:37,440 --> 00:01:40,790
We can choose if we wanted to be Internet facing or internal.

30
00:01:40,790 --> 00:01:43,680
So if we want it to be public, we choose Internet.

31
00:01:43,680 --> 00:01:47,740
If we want it to be private to R V P C, we can choose internal.

32
00:01:47,740 --> 00:01:50,200
Now, Internet facing is pretty common.

33
00:01:50,200 --> 00:01:52,840
That's what you see in a lot of public websites.

34
00:01:52,840 --> 00:01:56,520
But a use case for internal might be some application that you're

35
00:01:56,520 --> 00:02:00,320
hosting that need to be load balance within an enterprise,

36
00:02:00,320 --> 00:02:03,540
but you don't want to allow access from the outside,

37
00:02:03,540 --> 00:02:06,600
and then that brings us to our I p address type.

38
00:02:06,600 --> 00:02:10,260
Now we can choose I P V four, which is self explanatory,

39
00:02:10,260 --> 00:02:12,960
or we can choose dual stack now.

40
00:02:12,960 --> 00:02:13,880
Dual stack.

41
00:02:13,880 --> 00:02:17,020
For those who are not familiar with it means that it does

42
00:02:17,020 --> 00:02:21,600
both i p v four and I p V six routing.

43
00:02:21,600 --> 00:02:26,240
And this is another common exam scenario given to you by a W s.

44
00:02:26,240 --> 00:02:30,640
So keep that in mind for this demo will do I p v four.

45
00:02:30,640 --> 00:02:32,730
And that brings us to our listeners.

46
00:02:32,730 --> 00:02:35,300
So our listeners, like I mentioned,

47
00:02:35,300 --> 00:02:39,920
allow us to listen for connection requests based on protocol import

48
00:02:39,920 --> 00:02:47,580
configurations so we can choose http or https and then specify a port.

49
00:02:47,580 --> 00:02:50,100
Now, you can configure this to be a custom port,

50
00:02:50,100 --> 00:02:52,340
but I'll leave it the default for now.

51
00:02:52,340 --> 00:02:56,140
And we'll also just use basic http for this one.

52
00:02:56,140 --> 00:03:00,210
But we'll come back through and at a secure listener later on.

53
00:03:00,210 --> 00:03:04,220
So the next available thing that we have is our availability zones.

54
00:03:04,220 --> 00:03:10,140
So this is where we get to select our multi ese routing that we want to do now.

55
00:03:10,140 --> 00:03:15,910
This is how you can approach the ability to have auto Skilling instances within

56
00:03:15,910 --> 00:03:20,140
several availability zones behind a single load balancer.

57
00:03:20,140 --> 00:03:25,020
So if you split it in the two a z's on the back end and one of those goes down,

58
00:03:25,020 --> 00:03:28,340
your load balancer can still route traffic to the other ese.

59
00:03:28,340 --> 00:03:30,340
That's still up, so I'll go ahead.

60
00:03:30,340 --> 00:03:33,470
I'll choose to a in to see.

61
00:03:33,470 --> 00:03:36,130
I'll leave the default subjects that I have for my default

62
00:03:36,130 --> 00:03:39,240
BBC and I'll go to security settings.

63
00:03:39,240 --> 00:03:42,870
Now, if this was a secure listener, we would configure it here.

64
00:03:42,870 --> 00:03:45,760
I'll go to security groups and we choose a security

65
00:03:45,760 --> 00:03:49,000
group specific to our load balancer.

66
00:03:49,000 --> 00:03:52,300
Now, to explain this, I'll use this diagram here.

67
00:03:52,300 --> 00:03:57,010
What happens here is we assign a security group to our load balancer,

68
00:03:57,010 --> 00:04:01,450
and then a best practice from architecture perspective is to

69
00:04:01,450 --> 00:04:05,590
assign a security group to your internal instances or back in

70
00:04:05,590 --> 00:04:07,910
compute that lives in your private subnet.

71
00:04:07,910 --> 00:04:13,520
ETS and on Lee allow traffic from the load balancer security group

72
00:04:13,520 --> 00:04:17,910
to your private instances via specific protocols.

73
00:04:17,910 --> 00:04:21,910
So it follows the least permissive policy that a W s

74
00:04:21,910 --> 00:04:25,110
preaches and we'll see that here in a minute.

75
00:04:25,110 --> 00:04:29,880
So select my load balancers security group I go to configure routing.

76
00:04:29,880 --> 00:04:33,570
And this is where we specify our new target group so

77
00:04:33,570 --> 00:04:36,820
we don't have an existing one, So I'm gonna create a new one,

78
00:04:36,820 --> 00:04:40,860
and I'm gonna call this Web server A and the next thing

79
00:04:40,860 --> 00:04:42,820
we can choose is our target tight.

80
00:04:42,820 --> 00:04:44,000
So, do we want a route?

81
00:04:44,000 --> 00:04:47,010
Two instances based on instance.

82
00:04:47,010 --> 00:04:50,290
Do we want the route specifically the eye peas?

83
00:04:50,290 --> 00:04:52,930
Or do we want a route to a lambda function?

84
00:04:52,930 --> 00:04:57,820
So this is another really neat feature that application load balancers offer us.

85
00:04:57,820 --> 00:05:03,490
We can route traffic from a load balancer toe a lambda function on the back end.

86
00:05:03,490 --> 00:05:05,020
It's really cool.

87
00:05:05,020 --> 00:05:07,200
Now, the health checks will be a little bit different,

88
00:05:07,200 --> 00:05:08,950
so you need to be aware of that.

89
00:05:08,950 --> 00:05:11,440
But I'm gonna choose Instance for this Go.

90
00:05:11,440 --> 00:05:15,050
We'll leave the protocol at http on the default port of

91
00:05:15,050 --> 00:05:18,400
80 and then we specify a health check.

92
00:05:18,400 --> 00:05:22,680
So what I'm gonna do is I'm eventually gonna use that same PHP page

93
00:05:22,680 --> 00:05:26,340
that we use from before to get a status code from,

94
00:05:26,340 --> 00:05:30,420
And I'm gonna use the basic http protocol Now if I

95
00:05:30,420 --> 00:05:33,010
expand advanced health check settings,

96
00:05:33,010 --> 00:05:37,200
we can specify settings for our health check so we can set

97
00:05:37,200 --> 00:05:39,890
our healthy threshold are unhealthy.

98
00:05:39,890 --> 00:05:44,010
The timeout that's expected to count is unhealthy or healthy.

99
00:05:44,010 --> 00:05:50,100
And then the interval between checks and we'll leave that at 30 Now the last bit

100
00:05:50,100 --> 00:05:54,680
here sometimes gets tested over and it's the success coats.

101
00:05:54,680 --> 00:05:57,740
Now you can specify a single response,

102
00:05:57,740 --> 00:06:02,930
or you can specify multiple values in a list or a range

103
00:06:02,930 --> 00:06:05,170
of values with a hyphen in between.

104
00:06:05,170 --> 00:06:07,840
And you can see those examples in this pop up.

105
00:06:07,840 --> 00:06:11,680
So I'll just leave the basic 200 which is a status of OK,

106
00:06:11,680 --> 00:06:14,220
and I moved to register targets.

107
00:06:14,220 --> 00:06:17,810
Now this is where if we had instances running in R.

108
00:06:17,810 --> 00:06:17,900
A.

109
00:06:17,900 --> 00:06:19,030
W s account,

110
00:06:19,030 --> 00:06:22,330
we could see them as long as they're within this region

111
00:06:22,330 --> 00:06:24,460
and we could manually register them.

112
00:06:24,460 --> 00:06:25,760
I don't want to do that here.

113
00:06:25,760 --> 00:06:31,440
I'm gonna click next, we review it and then I click on Create.

114
00:06:31,440 --> 00:06:33,570
So while this is provisioning,

115
00:06:33,570 --> 00:06:37,080
let's just go to target groups and I want to verify our Web server.

116
00:06:37,080 --> 00:06:41,380
A target group exists, and it does, as you can see here.

117
00:06:41,380 --> 00:06:43,750
Now, how do we get instances to this?

118
00:06:43,750 --> 00:06:49,130
Well, we assign instances or back in compute like a lambda function or an E.

119
00:06:49,130 --> 00:06:53,490
C s container to a target group so it's not directly

120
00:06:53,490 --> 00:06:55,750
associated with a load balancer.

121
00:06:55,750 --> 00:06:59,540
It's directly associated with a target group instead.

122
00:06:59,540 --> 00:07:05,380
So what I'll do is I'll goto auto Skilling groups and I have

123
00:07:05,380 --> 00:07:08,110
one already created here for this demo.

124
00:07:08,110 --> 00:07:11,810
Now it's using that launch template that we defined earlier,

125
00:07:11,810 --> 00:07:16,580
and we're gonna set this to a desired instances of two.

126
00:07:16,580 --> 00:07:19,690
So let's do desire capacity of two.

127
00:07:19,690 --> 00:07:23,030
And then down here we have our health check type.

128
00:07:23,030 --> 00:07:27,660
Now the default when you create a group is easy to, but with an E.

129
00:07:27,660 --> 00:07:32,910
L B health check, it gives us more options and more flexibility.

130
00:07:32,910 --> 00:07:36,210
So we'll choose an elastic load balance or health check will give a

131
00:07:36,210 --> 00:07:40,440
grace period of two minutes and then I'll click on safe.

132
00:07:40,440 --> 00:07:40,700
Now.

133
00:07:40,700 --> 00:07:45,840
Another key factor to realize here is the Availability Zone section,

134
00:07:45,840 --> 00:07:51,190
so you can see my auto Skilling Group has us east to a end to see which

135
00:07:51,190 --> 00:07:56,890
is what we configured for our load balancer back here.

136
00:07:56,890 --> 00:08:00,140
It spans across to a and to see.

137
00:08:00,140 --> 00:08:05,390
So let me go back to auto scaling groups and let's go ahead.

138
00:08:05,390 --> 00:08:10,020
I want to edit this one more time and I want to scroll down to target groups.

139
00:08:10,020 --> 00:08:13,590
So this is where we can add our auto scaling group to a

140
00:08:13,590 --> 00:08:16,240
target group for a load balancer.

141
00:08:16,240 --> 00:08:19,440
So I select Web server a I'll click on safe,

142
00:08:19,440 --> 00:08:23,610
and that should start attaching it to our target groups once they're spun up.

143
00:08:23,610 --> 00:08:28,950
So if I go to target groups and I go to targets and

144
00:08:28,950 --> 00:08:33,280
pause this clip for a little while, we'll see that they start to register.

145
00:08:33,280 --> 00:08:36,180
And now we see that the targets are registering in.

146
00:08:36,180 --> 00:08:38,020
The registration is in progress,

147
00:08:38,020 --> 00:08:42,390
and that shows is two instances that belonged to our auto Skilling group.

148
00:08:42,390 --> 00:08:45,210
So let me go ahead and pause the clip while these spin up in

149
00:08:45,210 --> 00:08:48,160
register and when they're successful and healthy.

150
00:08:48,160 --> 00:08:49,490
All resume.

151
00:08:49,490 --> 00:08:49,840
All right,

152
00:08:49,840 --> 00:08:52,500
so that only took a couple of minutes due to the

153
00:08:52,500 --> 00:08:55,190
health check thresholds that we said.

154
00:08:55,190 --> 00:08:58,360
And now our targets are showing up as healthy and they're

155
00:08:58,360 --> 00:09:00,980
in two different availability zones.

156
00:09:00,980 --> 00:09:06,040
So now if I go to load balancers and I copy this D.

157
00:09:06,040 --> 00:09:11,310
N s name here and I go to it, we get our Apache page.

158
00:09:11,310 --> 00:09:12,530
So that's awesome.

159
00:09:12,530 --> 00:09:16,210
Now this is going to one of those back and instances that

160
00:09:16,210 --> 00:09:19,100
we configured for Auto Skilling Group.

161
00:09:19,100 --> 00:09:25,280
So if I go to that PHP info page, we get this.

162
00:09:25,280 --> 00:09:26,760
Now if I refresh enough,

163
00:09:26,760 --> 00:09:31,990
we should see this internal I p change that lives here

164
00:09:31,990 --> 00:09:33,710
and there you go with one refresh.

165
00:09:33,710 --> 00:09:35,350
We're now hitting the other instance.

166
00:09:35,350 --> 00:09:37,030
So if I refresh this a couple of times,

167
00:09:37,030 --> 00:09:40,750
that should swap back and forth and it iss so that's how we

168
00:09:40,750 --> 00:09:44,450
can see that are instances are receiving traffic based on

169
00:09:44,450 --> 00:09:46,740
load from our load balancer.

170
00:09:46,740 --> 00:09:47,770
Now we'll go ahead.

171
00:09:47,770 --> 00:09:50,970
This is a good place to take a break and then in the next

172
00:09:50,970 --> 00:09:57,000
clip will pick up where we left off and will add a secure listener to our load balancer.

