WEBVTT
1
00:00:01.040 --> 00:00:01.750
Now next,

2
00:00:01.750 --> 00:00:06.290
we're going to be examining a key concept within the CDK and that is the

3
00:00:06.290 --> 00:00:09.640
different construct levels that exist within the CDK.

4
00:00:09.640 --> 00:00:11.920
So here, over the course of this demo,

5
00:00:11.920 --> 00:00:15.660
were first going to be reviewing what we call L1 and L2

6
00:00:15.660 --> 00:00:18.640
constructs within the CDK documentation.

7
00:00:18.640 --> 00:00:19.590
And then, in addition,

8
00:00:19.590 --> 00:00:26.180
we're going to be utilizing an L1 construct within our CDK app so let's dive in.

9
00:00:26.180 --> 00:00:31.550
So I'm here in my browser and here I'm at the awsâ€‘s3 module

10
00:00:31.550 --> 00:00:34.570
that we were at within the previous clip, and I want to call

11
00:00:34.570 --> 00:00:36.010
out a couple of things here.

12
00:00:36.010 --> 00:00:40.580
We mentioned in passing earlier that it gives us some indications about two

13
00:00:40.580 --> 00:00:44.410
different types of constructs at the top of this Overview page.

14
00:00:44.410 --> 00:00:45.000
Here,

15
00:00:45.000 --> 00:00:48.870
we can see CFN or CloudFormation resources being stable and

16
00:00:48.870 --> 00:00:51.940
we can see CDK constructs being stable.

17
00:00:51.940 --> 00:00:54.760
So CFN resources, or CloudFormation resources,

18
00:00:54.760 --> 00:00:59.610
are what we refer to as L1 constructs and the CDK

19
00:00:59.610 --> 00:01:03.060
constructs are what we call L2 constructs.

20
00:01:03.060 --> 00:01:04.700
Now here is what that means.

21
00:01:04.700 --> 00:01:07.740
The CFN resources are CloudFormation resources,

22
00:01:07.740 --> 00:01:13.240
they always map to the data types that exist within CloudFormation directly.

23
00:01:13.240 --> 00:01:13.530
And so,

24
00:01:13.530 --> 00:01:16.600
if you're used to working within CloudFormation every single

25
00:01:16.600 --> 00:01:18.540
option that you can define within CloudFormation,

26
00:01:18.540 --> 00:01:22.370
you can define here when working with the CDK.

27
00:01:22.370 --> 00:01:28.520
In most cases, the CDK constructs are easier to work with as the L2 constructs,

28
00:01:28.520 --> 00:01:31.260
they simplify key tasks, and in some cases,

29
00:01:31.260 --> 00:01:33.520
which we'll see later within this course,

30
00:01:33.520 --> 00:01:37.640
they might greatly simplify and even create multiple different

31
00:01:37.640 --> 00:01:41.740
types of resources for us simultaneously and incorporating

32
00:01:41.740 --> 00:01:44.040
best practices directly into them.

33
00:01:44.040 --> 00:01:47.560
But in most cases, they just make it easier to do what you need to do.

34
00:01:47.560 --> 00:01:48.290
However,

35
00:01:48.290 --> 00:01:54.410
you can always go down a level and work with those L1 constructs if you need to.

36
00:01:54.410 --> 00:01:59.240
There also are some services where we don't currently have L2 constructs.

37
00:01:59.240 --> 00:02:04.700
So if I go, for example, to AWS Elasticsearch,

38
00:02:04.700 --> 00:02:08.480
I can see here that we have the CloudFormation resources are stable,

39
00:02:08.480 --> 00:02:12.150
but we don't yet have L2 constructs and that's just an example

40
00:02:12.150 --> 00:02:16.110
so we can see that the CDK is continually evolving. Now as a

41
00:02:16.110 --> 00:02:18.650
note, if I go back to S3 again,

42
00:02:18.650 --> 00:02:22.340
I'll see here on the overview page that both of these are stable,

43
00:02:22.340 --> 00:02:25.340
but there are several different AWS services where you'll see that

44
00:02:25.340 --> 00:02:28.050
the CDK constructs are experimental.

45
00:02:28.050 --> 00:02:32.460
That means that the APIs for working with them could change, and in some cases,

46
00:02:32.460 --> 00:02:35.760
change greatly, and that could mean you're going to have to rewrite

47
00:02:35.760 --> 00:02:38.540
the way that you're creating your infrastructure.

48
00:02:38.540 --> 00:02:40.550
Now, if we look over here on the left pane,

49
00:02:40.550 --> 00:02:42.960
I can see here that we do have these constructs.

50
00:02:42.960 --> 00:02:45.860
Now these here that are listed are L2 constructs and we

51
00:02:45.860 --> 00:02:48.340
have both bucket and bucket policy.

52
00:02:48.340 --> 00:02:53.790
Now if I continue to scroll down past class, and structs, interfaces, and enums,

53
00:02:53.790 --> 00:02:56.480
I can get to the point where I see CloudFormation

54
00:02:56.480 --> 00:02:59.940
Resources and these are our L1 constructs.

55
00:02:59.940 --> 00:03:04.820
So I have CFN bucket as an example and here you can see that all of the

56
00:03:04.820 --> 00:03:08.650
different construct props that exist mapping into the CloudFormation

57
00:03:08.650 --> 00:03:12.540
properties that exist for this particular data type.

58
00:03:12.540 --> 00:03:16.200
And you can even see here the specific CloudFormation id that is

59
00:03:16.200 --> 00:03:19.160
included for each of those different data types.

60
00:03:19.160 --> 00:03:21.260
Now I want to go show you one additional thing.

61
00:03:21.260 --> 00:03:23.970
So I'm going to go over here on the left pane, I'm going to

62
00:03:23.970 --> 00:03:27.760
collapse back down AWS S3, and I'm going to scroll all the way

63
00:03:27.760 --> 00:03:29.840
down and I'm going to go to core. Now,

64
00:03:29.840 --> 00:03:33.440
this is what is included within the CDK Core. Now,

65
00:03:33.440 --> 00:03:34.970
if I go here to the Overview page,

66
00:03:34.970 --> 00:03:37.440
we'll see the same thing we have L1 and L2

67
00:03:37.440 --> 00:03:39.300
constructs both stable here for the core,

68
00:03:39.300 --> 00:03:41.140
which you probably would expect.

69
00:03:41.140 --> 00:03:43.940
But here, I'm going to go here to CFN output,

70
00:03:43.940 --> 00:03:48.540
which is a CloudFormation output, and we're going to use this within our stack.

71
00:03:48.540 --> 00:03:53.330
Now, we're not going to deploy our particular CDK application just yet,

72
00:03:53.330 --> 00:03:55.580
but I want to showcase here that this is something that we'll be

73
00:03:55.580 --> 00:03:59.300
using. Now we don't have to go in and actually add in a new

74
00:03:59.300 --> 00:04:02.870
package because this is included within the core that we already

75
00:04:02.870 --> 00:04:05.440
have within our application.

76
00:04:05.440 --> 00:04:08.740
So now I'm going to go back over to VS code.

77
00:04:08.740 --> 00:04:10.270
So here, within VS code,

78
00:04:10.270 --> 00:04:12.560
we're going to add in another resource which is going

79
00:04:12.560 --> 00:04:15.840
to be our CloudFormation output.

80
00:04:15.840 --> 00:04:22.040
So I'm going to say new cdk. and we'll say CfnOutput.

81
00:04:22.040 --> 00:04:25.970
Now, just as before, we're going to need to pass in a few things.

82
00:04:25.970 --> 00:04:26.570
First of all,

83
00:04:26.570 --> 00:04:30.430
we're going to need to pass in a reference to the construct that we're creating

84
00:04:30.430 --> 00:04:33.980
this within, which in this case is going to be the stack.

85
00:04:33.980 --> 00:04:38.540
Then we're going to need to give this an id.

86
00:04:38.540 --> 00:04:43.340
Then I need to actually go in and add in the different properties.

87
00:04:43.340 --> 00:04:46.440
So here, first, we need to pass in a value.

88
00:04:46.440 --> 00:04:51.040
Well, in this case, we're going to take this as our bucket,

89
00:04:51.040 --> 00:04:54.510
and then we're going to say bucket name and you can see here

90
00:04:54.510 --> 00:04:58.390
that we do have IntelliSense provided for the specific CDK

91
00:04:58.390 --> 00:05:00.490
packages that we've pulled in.

92
00:05:00.490 --> 00:05:00.630
Now,

93
00:05:00.630 --> 00:05:02.380
the next thing we're going to need to do is we're going to

94
00:05:02.380 --> 00:05:05.190
need to give this an export name, and in this case, we'll

95
00:05:05.190 --> 00:05:09.970
also call this DocumentsBucketName.

96
00:05:09.970 --> 00:05:11.260
Now that we have this in place,

97
00:05:11.260 --> 00:05:16.720
we're ready to deploy the initial version of our CDK application, however,

98
00:05:16.720 --> 00:05:18.270
we're not going to do that just yet.

99
00:05:18.270 --> 00:05:26.000
We're going to spend the entire next module walking through the deployment and management of our CDK application.

