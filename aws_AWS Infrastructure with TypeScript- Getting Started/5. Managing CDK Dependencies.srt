1
00:00:01,040 --> 00:00:04,740
So now we're going to talk about how we manage the CDK dependencies

2
00:00:04,740 --> 00:00:08,810
that we leverage within our CDK applications. So here,

3
00:00:08,810 --> 00:00:09,960
over the course of this demo,

4
00:00:09,960 --> 00:00:14,420
we're first going to be accessing the CDK documentation because you'll

5
00:00:14,420 --> 00:00:18,060
find this is an essential part of working within the CDK.

6
00:00:18,060 --> 00:00:22,340
I generally always have a tab open to the CDK documentation.

7
00:00:22,340 --> 00:00:22,840
Also,

8
00:00:22,840 --> 00:00:26,730
we're going to be installing service‑specific packages for use within the

9
00:00:26,730 --> 00:00:29,720
CDK because if we're going to be using most any service,

10
00:00:29,720 --> 00:00:33,140
we need to be able to install its package into our project.

11
00:00:33,140 --> 00:00:35,910
And then we're going to be reviewing some best practices

12
00:00:35,910 --> 00:00:38,310
for managing dependencies for a project.

13
00:00:38,310 --> 00:00:41,030
And then we're going to be creating our first bit of infrastructure in

14
00:00:41,030 --> 00:00:45,660
TypeScript when we configure an S3 bucket for use with the CDK.

15
00:00:45,660 --> 00:00:48,140
So, let's dive in.

16
00:00:48,140 --> 00:00:51,520
So it might seem strange, but to get to the CDK documentation,

17
00:00:51,520 --> 00:00:53,700
I'm going to start here within my IDE.

18
00:00:53,700 --> 00:00:55,550
I'm just going to open up a new terminal,

19
00:00:55,550 --> 00:00:59,460
and I'm going to run the command cdk and docs.

20
00:00:59,460 --> 00:01:03,680
This will open up the latest documentation for the CDK. And so

21
00:01:03,680 --> 00:01:07,230
here I can see that it has launched the latest version of the CDK

22
00:01:07,230 --> 00:01:09,800
documentation here within my browser.

23
00:01:09,800 --> 00:01:13,040
So I'm going to click on the option here for API Reference, and as

24
00:01:13,040 --> 00:01:15,890
mentioned, you'll spend a lot of time here. Now,

25
00:01:15,890 --> 00:01:16,580
first of all,

26
00:01:16,580 --> 00:01:19,880
I want to call out on the left side, we can see most all of the

27
00:01:19,880 --> 00:01:23,440
different services that are supported within the CDK.

28
00:01:23,440 --> 00:01:28,600
And so if I scroll all the way down here, I'm first going to go into S3.

29
00:01:28,600 --> 00:01:33,340
So I'm going to click on S3 and then I'll click on Overview.

30
00:01:33,340 --> 00:01:33,500
Now,

31
00:01:33,500 --> 00:01:36,120
I want to call out here at the top, there's a couple things I need to

32
00:01:36,120 --> 00:01:40,350
mention. First is you can see here with the TypeScript language, we

33
00:01:40,350 --> 00:01:44,320
have a specific reference to the package that we will need to install

34
00:01:44,320 --> 00:01:46,540
locally within our project.

35
00:01:46,540 --> 00:01:46,760
Now,

36
00:01:46,760 --> 00:01:50,300
we can't actually create an S3 bucket if we don't have

37
00:01:50,300 --> 00:01:53,270
this particular package installed.

38
00:01:53,270 --> 00:01:56,810
The second thing I want to call out here is we can see here both the

39
00:01:56,810 --> 00:02:00,140
CFN‑RESOURCES, meaning CloudFormation resources,

40
00:02:00,140 --> 00:02:03,690
and the CDK‑CONSTRUCTS are both listed here as stable.

41
00:02:03,690 --> 00:02:07,600
We'll talk more about what that means within the next clip and why that's

42
00:02:07,600 --> 00:02:11,110
important, but that is something that you need to watch before you create

43
00:02:11,110 --> 00:02:14,160
some infrastructure so that you know whether or not the underlying

44
00:02:14,160 --> 00:02:16,540
constructs are going to be changing.

45
00:02:16,540 --> 00:02:19,820
Now I'm going to scroll down and look at some of what is included here.

46
00:02:19,820 --> 00:02:20,520
First of all,

47
00:02:20,520 --> 00:02:23,920
I can see here that it gives us the ability to create an S3

48
00:02:23,920 --> 00:02:26,020
bucket, and it gives us a sample for this.

49
00:02:26,020 --> 00:02:30,650
Now, this is a construct that we're using, and we can see here on the left,

50
00:02:30,650 --> 00:02:33,740
we can see this listed under Constructs.

51
00:02:33,740 --> 00:02:35,690
And here we can see a lot of the different types of

52
00:02:35,690 --> 00:02:37,100
settings that we can configure,

53
00:02:37,100 --> 00:02:40,200
we can see things like encryption, we can see things like

54
00:02:40,200 --> 00:02:42,420
different permissions that we can set.

55
00:02:42,420 --> 00:02:44,880
So, this is perfect, this is exactly what we need.

56
00:02:44,880 --> 00:02:47,540
So I'm going to go up here to the option where it shows

57
00:02:47,540 --> 00:02:51,940
encryption, I'm going to copy this particular option,

58
00:02:51,940 --> 00:02:55,940
and I'm now going to bounce back over to Visual Studio Code.

59
00:02:55,940 --> 00:02:56,590
So here,

60
00:02:56,590 --> 00:02:58,910
I'm going to go ahead and close out my terminal just to give me

61
00:02:58,910 --> 00:03:02,310
some more screen real estate, and I'll slide this pane over, and

62
00:03:02,310 --> 00:03:04,100
here where we have the comment,

63
00:03:04,100 --> 00:03:06,830
I'm going to delete this, and now I'm going to go and I'm

64
00:03:06,830 --> 00:03:08,950
going to paste in this particular value.

65
00:03:08,950 --> 00:03:12,470
Now, you'll notice here that we're getting errors because we don't have

66
00:03:12,470 --> 00:03:17,600
the AWS S3 package currently installed, so we're going to need to fix

67
00:03:17,600 --> 00:03:19,790
that so that we can get a reference to these.

68
00:03:19,790 --> 00:03:21,590
So what I'm going to do is I'm going to open back up the

69
00:03:21,590 --> 00:03:24,010
terminal and here within our project,

70
00:03:24,010 --> 00:03:31,330
I'm going to go in, I'm going to say npm install @aws‑cdk because

71
00:03:31,330 --> 00:03:37,140
everything for the CDK exists under the @aws‑cdk scope.

72
00:03:37,140 --> 00:03:40,640
And so, if you're looking for a specific package for the CDK,

73
00:03:40,640 --> 00:03:43,490
chances are it is also going to be under this scope.

74
00:03:43,490 --> 00:03:48,090
And most of them are structured like this, aws, and then dash, the service.

75
00:03:48,090 --> 00:03:48,740
So in this case,

76
00:03:48,740 --> 00:03:53,400
we're looking for aws‑s3. And then I'm just going to say Save

77
00:03:53,400 --> 00:03:56,780
because we do want this to be saved as a dependency within our

78
00:03:56,780 --> 00:04:03,150
project. And we can see that we have installed aws‑s3 as a

79
00:04:03,150 --> 00:04:05,190
dependency for our project.

80
00:04:05,190 --> 00:04:08,960
Now, we still have errors here because we haven't actually imported this.

81
00:04:08,960 --> 00:04:11,620
So I'm going to go in and I'm going to say import,

82
00:04:11,620 --> 00:04:12,370
and then, in this case,

83
00:04:12,370 --> 00:04:16,600
we're going to say bucket and a bucket encryption, and we're going to

84
00:04:16,600 --> 00:04:22,600
import these from, so now you can see that in doing so,

85
00:04:22,600 --> 00:04:25,240
we've now actually fixed the errors that we were seeing.

86
00:04:25,240 --> 00:04:27,980
So now I'm going to close out the terminal, again, just to

87
00:04:27,980 --> 00:04:31,940
give us back some screen real estate, and now I'm going to update a few things.

88
00:04:31,940 --> 00:04:32,570
First of all,

89
00:04:32,570 --> 00:04:35,150
we're going to actually give this an ID, and we're going

90
00:04:35,150 --> 00:04:38,950
to call this our DocumentsBucket. Now,

91
00:04:38,950 --> 00:04:41,760
you'll notice here that there are several arguments that need to be passed

92
00:04:41,760 --> 00:04:44,730
in, and this is going to be a common pattern that we'll see when we're

93
00:04:44,730 --> 00:04:47,740
working with the TypeScript version of the CDK. First,

94
00:04:47,740 --> 00:04:49,950
with any construct that we create,

95
00:04:49,950 --> 00:04:53,800
we're going to need to pass in a reference to the stack that it exists in.

96
00:04:53,800 --> 00:04:58,140
That's why we have the this value that gets passed in as the first argument.

97
00:04:58,140 --> 00:05:00,650
Next, we're going to need to give it an ID.

98
00:05:00,650 --> 00:05:04,150
And this ID is going to be the basis for the CloudFormation

99
00:05:04,150 --> 00:05:08,950
logical ID when we actually launch this within AWS. And then the

100
00:05:08,950 --> 00:05:12,150
third thing is, a properties object that will show us the

101
00:05:12,150 --> 00:05:14,840
different values that can be passed in.

102
00:05:14,840 --> 00:05:17,640
And you can certainly find those within the

103
00:05:17,640 --> 00:05:20,170
documentation that we just saw in the browser.

104
00:05:20,170 --> 00:05:24,450
I also can hold down Command and actually click here on the name, and

105
00:05:24,450 --> 00:05:27,820
I can see here that we have an option here called BucketProps, that's

106
00:05:27,820 --> 00:05:30,120
an optional object that gets passed in.

107
00:05:30,120 --> 00:05:32,360
If I click on this, if I hit Command+Click,

108
00:05:32,360 --> 00:05:34,200
I can see all the options that are available.

109
00:05:34,200 --> 00:05:36,980
We can see here encryption, which is what we're working with.

110
00:05:36,980 --> 00:05:39,860
We can pass in a value for that encryptionKey, bucketName,

111
00:05:39,860 --> 00:05:41,960
RemovalPolicy, whether or not it's version,

112
00:05:41,960 --> 00:05:44,080
all of these things are included.

113
00:05:44,080 --> 00:05:44,790
So in this case,

114
00:05:44,790 --> 00:05:47,630
I'm going to close this back out, and we'll go up here to

115
00:05:47,630 --> 00:05:51,080
where it says BucketEncryption, and we can see here that I'm

116
00:05:51,080 --> 00:05:53,600
just going to choose S3_MANAGED, because in this case,

117
00:05:53,600 --> 00:05:56,500
I do want it to be encrypted, but I'm not actually going to be

118
00:05:56,500 --> 00:05:59,700
maintaining my own encryption keys within kms,

119
00:05:59,700 --> 00:06:02,390
and so this enables me to get encryption, but without

120
00:06:02,390 --> 00:06:04,780
having to manage those underlying keys.

121
00:06:04,780 --> 00:06:08,810
Now, I want to go in and look really quickly at the package.json file.

122
00:06:08,810 --> 00:06:10,720
So I want to call out here that, first of all,

123
00:06:10,720 --> 00:06:17,710
you'll notice that the aws‑cdk/core and aws‑cdk/aws‑s3

124
00:06:17,710 --> 00:06:21,420
are both the same version, 1.62.0.

125
00:06:21,420 --> 00:06:23,680
Also, under devDependencies,

126
00:06:23,680 --> 00:06:28,140
we have the assert package and the aws‑cdk package, both of

127
00:06:28,140 --> 00:06:30,840
those are also under the same version.

128
00:06:30,840 --> 00:06:32,430
Here's something that's critical.

129
00:06:32,430 --> 00:06:36,180
You need to make sure that every single package that you pull

130
00:06:36,180 --> 00:06:40,130
in for the CDK is using the same version.

131
00:06:40,130 --> 00:06:42,510
They all have the same release cycle,

132
00:06:42,510 --> 00:06:45,120
and there could be issues that occur when you're

133
00:06:45,120 --> 00:06:47,590
trying to use different versions.

134
00:06:47,590 --> 00:06:49,640
In some cases, you might get some weird errors,

135
00:06:49,640 --> 00:06:52,440
and it might not be immediately obvious what's going on.

136
00:06:52,440 --> 00:06:54,110
Your first step, if that happens,

137
00:06:54,110 --> 00:06:57,790
is to check and make sure that every single CDK package that you

138
00:06:57,790 --> 00:07:01,800
have is using the exact same version. And the easiest way to keep

139
00:07:01,800 --> 00:07:05,360
up with this is just to be sure, before you're installing any new

140
00:07:05,360 --> 00:07:09,400
package, just to go through and then update all of your packages

141
00:07:09,400 --> 00:07:10,510
before you do that.

142
00:07:10,510 --> 00:07:10,710
Now,

143
00:07:10,710 --> 00:07:14,410
if you have a production application and you're concerned about always

144
00:07:14,410 --> 00:07:17,410
updating because you want to be sure that you don't have to go through and

145
00:07:17,410 --> 00:07:20,560
potentially fix some of your elements of infrastructure,

146
00:07:20,560 --> 00:07:24,550
you can simply install and then utilize a specific version.

147
00:07:24,550 --> 00:07:25,310
So, for example,

148
00:07:25,310 --> 00:07:30,690
if I wanted to go back and install the AWS S3 package again, and so I could go

149
00:07:30,690 --> 00:07:35,810
in and I could say npm install, and then I could say @aws‑cdk, which is the

150
00:07:35,810 --> 00:07:41,590
scope, aws‑s3, and then I could finish it with an @ sign and specify the exact

151
00:07:41,590 --> 00:07:44,940
version that I wanted to install. In this way,

152
00:07:44,940 --> 00:07:48,650
you could make sure that you're installing the exact right version if you're

153
00:07:48,650 --> 00:07:51,980
using a single version for your production application.

154
00:07:51,980 --> 00:08:00,000
But the key is just to make sure that you don't mismatch the different versions of the CDK packages that you're using.

