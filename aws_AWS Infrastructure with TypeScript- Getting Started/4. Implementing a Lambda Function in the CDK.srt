1
00:00:01,040 --> 00:00:05,490
So now that we have a lambda TypeScript function configured within our project,

2
00:00:05,490 --> 00:00:09,250
we're now ready to implement that lambda function within the CDK.

3
00:00:09,250 --> 00:00:11,460
So here within this particular clip,

4
00:00:11,460 --> 00:00:13,880
we're going to be walking through the process of configuring

5
00:00:13,880 --> 00:00:16,610
our lambda function project within the CDK,

6
00:00:16,610 --> 00:00:18,400
deploying our lambda function, and then,

7
00:00:18,400 --> 00:00:23,130
ultimately, verifying our lambda function within the AWS console.

8
00:00:23,130 --> 00:00:26,040
So let's dive in.

9
00:00:26,040 --> 00:00:29,100
So our first step is actually here within the terminal.

10
00:00:29,100 --> 00:00:31,440
We need to install some of the packages that we

11
00:00:31,440 --> 00:00:34,060
looked at earlier within this module.

12
00:00:34,060 --> 00:00:36,020
So I'm going to go ahead and run npm install,

13
00:00:36,020 --> 00:00:41,510
and I'm going to specify first the aws‑lambda‑nodejs and aws‑lambda packages,

14
00:00:41,510 --> 00:00:43,430
and I want to be sure that we saved both of these.

15
00:00:43,430 --> 00:00:46,130
Now I should mention here I'm in the root of our project,

16
00:00:46,130 --> 00:00:51,940
and I'm not in our specific lambda project.

17
00:00:51,940 --> 00:00:56,080
Now the next thing is, I need to install a specific version of Parcel.

18
00:00:56,080 --> 00:01:00,310
If you remember, this is used within the bundling process with the CDK,

19
00:01:00,310 --> 00:01:03,160
and there is a specific version that they're expecting.

20
00:01:03,160 --> 00:01:05,260
So here, I'm going to run npm install,

21
00:01:05,260 --> 00:01:08,540
and we're going to install Parcel 2.0.0 beta 1.

22
00:01:08,540 --> 00:01:10,560
And I'm going to tell it to save this as a development

23
00:01:10,560 --> 00:01:14,940
dependency and use this exact version.

24
00:01:14,940 --> 00:01:19,540
Now that I have this in place, I'm going to head back over to VS Code.

25
00:01:19,540 --> 00:01:21,130
So if you remember, previously,

26
00:01:21,130 --> 00:01:26,110
we isolated all of our networking resources within a single construct,

27
00:01:26,110 --> 00:01:28,840
and we're going to do the same thing here for the API.

28
00:01:28,840 --> 00:01:32,840
So I'm going to go under the lib directory, and I'm going to create a new file.

29
00:01:32,840 --> 00:01:36,440
We'll call this one api.ts.

30
00:01:36,440 --> 00:01:41,440
And here, I'm going to use the same snippet I used for the networking construct.

31
00:01:41,440 --> 00:01:47,040
And we're going to call this DocumentManagementAPI.

32
00:01:47,040 --> 00:01:48,520
And here within this construct,

33
00:01:48,520 --> 00:01:52,140
this is where we're going to define our lambda function.

34
00:01:52,140 --> 00:01:55,250
But one of the things we're going to need to do here is we're going to need

35
00:01:55,250 --> 00:01:58,940
to import the packages that we installed with npm install.

36
00:01:58,940 --> 00:02:01,240
I'm going to go up here under my CDK core import,

37
00:02:01,240 --> 00:02:03,390
and I'm going to add in two additional values.

38
00:02:03,390 --> 00:02:08,460
So I'm going to pull in everything from the aws‑lambda‑nodejs package as Lambda,

39
00:02:08,460 --> 00:02:11,610
and then I'm going to pull in one specific item from aws‑lambda,

40
00:02:11,610 --> 00:02:14,940
which is runtime.

41
00:02:14,940 --> 00:02:17,850
So the first thing we're going to do here is to give our lambda function a name.

42
00:02:17,850 --> 00:02:20,240
We'll call it getDocumentsFunction.

43
00:02:20,240 --> 00:02:24,640
And then we're going to say new lambda.NodejsFunction.

44
00:02:24,640 --> 00:02:26,830
And just like any other construct,

45
00:02:26,830 --> 00:02:30,190
we're going to need to add in first a reference to the current construct,

46
00:02:30,190 --> 00:02:31,980
which is going to be this particular construct.

47
00:02:31,980 --> 00:02:34,200
And then we're going to need to give it a name,

48
00:02:34,200 --> 00:02:37,740
and I'm going to call this my GetDocumentsFunction.

49
00:02:37,740 --> 00:02:41,580
Now that I have this in place, I can now pass in a props object,

50
00:02:41,580 --> 00:02:43,750
which has all of the different configuration values

51
00:02:43,750 --> 00:02:44,940
that I would be concerned with.

52
00:02:44,940 --> 00:02:47,740
Now one of the first things I want to specify is runtime.

53
00:02:47,740 --> 00:02:51,720
Now depending on your machine, this is probably going to be set properly for you,

54
00:02:51,720 --> 00:02:53,690
but I always want to be explicit.

55
00:02:53,690 --> 00:02:57,390
So in this case, we'll say runtime, and then I'm going to set this to be NODEJS,

56
00:02:57,390 --> 00:03:00,440
and we'll do 12 for the version.

57
00:03:00,440 --> 00:03:03,840
Now the next thing that I want to specify here is the entry point.

58
00:03:03,840 --> 00:03:08,000
Now this is going to be a reference to the TypeScript file that we

59
00:03:08,000 --> 00:03:11,140
created within our API and getDocuments folder.

60
00:03:11,140 --> 00:03:13,830
So to do this, I'm going to need to be able to use the path module,

61
00:03:13,830 --> 00:03:16,240
so I'm going to need to import that.

62
00:03:16,240 --> 00:03:17,980
And so we'll say path.join.

63
00:03:17,980 --> 00:03:21,890
Now in this case, we need to specify the directory name of this file,

64
00:03:21,890 --> 00:03:23,350
so we're going to say dirname.

65
00:03:23,350 --> 00:03:26,160
And then we're going to need to tell it to go up a directory.

66
00:03:26,160 --> 00:03:29,660
And the reason here we're using path.join as opposed to just

67
00:03:29,660 --> 00:03:33,010
writing it out using dots and slashes is we want this to

68
00:03:33,010 --> 00:03:34,860
work in a cross‑platform manner.

69
00:03:34,860 --> 00:03:38,640
And so the path.join function takes care of that for us.

70
00:03:38,640 --> 00:03:41,240
So the next thing we're going to do is in the api directory,

71
00:03:41,240 --> 00:03:44,210
and then within that directory, we're going to go to getDocuments,

72
00:03:44,210 --> 00:03:48,920
and then within that directory, we're going to go to index.ts.

73
00:03:48,920 --> 00:03:52,330
So that should give us a reference into our entry point.

74
00:03:52,330 --> 00:03:54,680
Now the next thing we need to specify is the handler.

75
00:03:54,680 --> 00:03:57,990
So within that particular file, what is the handler?

76
00:03:57,990 --> 00:04:00,640
Well, in this case, it's going to be getDocuments.

77
00:04:00,640 --> 00:04:03,430
And then the next thing we need to specify is the external modules.

78
00:04:03,430 --> 00:04:06,760
Now you remember that this is what we tell Parcel to not

79
00:04:06,760 --> 00:04:09,310
bundle in with our bundled application.

80
00:04:09,310 --> 00:04:14,140
So here, I'm going to specify aws‑sdk.

81
00:04:14,140 --> 00:04:16,050
So once we have these things in place,

82
00:04:16,050 --> 00:04:20,920
we're now ready to go through the process of integrating this in with our stack.

83
00:04:20,920 --> 00:04:24,240
So I'm going to go over to our TypeScript CDK stack.

84
00:04:24,240 --> 00:04:26,880
We're going to go in and create a new instance.

85
00:04:26,880 --> 00:04:28,670
So we're going to call this api.

86
00:04:28,670 --> 00:04:33,200
And now for this to work, we're going to need to import this in.

87
00:04:33,200 --> 00:04:38,410
And then, we can go down here and say new DocumentManagementAPI.

88
00:04:38,410 --> 00:04:42,240
We're going to pass in the construct, and we're going to give it a name.

89
00:04:42,240 --> 00:04:45,200
Now at this point, we don't have any props to pass into it,

90
00:04:45,200 --> 00:04:46,780
but we're going to do one other thing.

91
00:04:46,780 --> 00:04:49,440
We're going to go ahead and add in tags.

92
00:04:49,440 --> 00:04:52,640
We're going to say everything that is within this api construct,

93
00:04:52,640 --> 00:04:57,340
we want to add a tag module and then API.

94
00:04:57,340 --> 00:05:01,840
So now we should be ready to validate our lambda function.

95
00:05:01,840 --> 00:05:04,640
So I'm going to navigate over to the terminal.

96
00:05:04,640 --> 00:05:09,240
So here within the terminal, I'm going to run cdk deploy.

97
00:05:09,240 --> 00:05:12,430
So here, we're going to see something for the first time.

98
00:05:12,430 --> 00:05:12,750
First,

99
00:05:12,750 --> 00:05:14,690
I want to point out that we can see that our function

100
00:05:14,690 --> 00:05:17,430
here actually built in 2.44 seconds.

101
00:05:17,430 --> 00:05:21,410
So this is going to be infinitely faster than if we had used the Docker options.

102
00:05:21,410 --> 00:05:21,740
So again,

103
00:05:21,740 --> 00:05:26,260
this ability to build this locally is baked into the L2 construct

104
00:05:26,260 --> 00:05:28,840
that we're using for Node.js lambda functions.

105
00:05:28,840 --> 00:05:31,730
But the other thing I want to point out here is that because we have IAM

106
00:05:31,730 --> 00:05:35,700
statement changes, the CDK is going to alert us to this fact,

107
00:05:35,700 --> 00:05:38,120
and we're going to have to approve these. Now there is a way to

108
00:05:38,120 --> 00:05:40,340
specify that it shouldn't warn you about these things.

109
00:05:40,340 --> 00:05:42,410
But if you're just deploying from your own machine,

110
00:05:42,410 --> 00:05:45,730
I think it's a good idea to review these anytime they pop up, and we'll see

111
00:05:45,730 --> 00:05:48,950
them multiple times throughout this module. And here, we can see that we're

112
00:05:48,950 --> 00:05:51,740
seeing a change related to the lambda execution role.

113
00:05:51,740 --> 00:05:53,070
So in this case, we're going to say yes,

114
00:05:53,070 --> 00:05:59,010
we do want to deploy these changes. And now we can see that

115
00:05:59,010 --> 00:06:01,130
the deployment process has completed.

116
00:06:01,130 --> 00:06:04,440
So I'm going to jump back over to the browser.

117
00:06:04,440 --> 00:06:08,710
So here I can see that the update is complete for our TypeScript CDK stack.

118
00:06:08,710 --> 00:06:13,140
I'm going to go under Services, and I'm going to go to Lambda.

119
00:06:13,140 --> 00:06:16,600
Now we should see our lambda function being deployed here.

120
00:06:16,600 --> 00:06:20,440
So I'm going to click on the one lambda function that we have.

121
00:06:20,440 --> 00:06:24,240
And then from here, I'm going to click on the option to test the function.

122
00:06:24,240 --> 00:06:26,680
Now here, we're not going to be passing any values into

123
00:06:26,680 --> 00:06:29,430
this. So we can just have a test event that doesn't have

124
00:06:29,430 --> 00:06:31,310
any variables that are passed in.

125
00:06:31,310 --> 00:06:34,240
And then I'm going to go to the bottom and say Create.

126
00:06:34,240 --> 00:06:35,920
Now that I've created this test event,

127
00:06:35,920 --> 00:06:40,160
I should be able to go in and simply do Test. And we can see that

128
00:06:40,160 --> 00:06:43,480
are lambda function has executed, and you can see here that we are

129
00:06:43,480 --> 00:06:50,000
returning the correct status code and the body that we specified within our TypeScript file.

