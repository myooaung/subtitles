WEBVTT
1
00:00:01.040 --> 00:00:05.750
So I realize not everyone has experience working with containers on AWS.

2
00:00:05.750 --> 00:00:08.540
And since we're covering that within this module,

3
00:00:08.540 --> 00:00:11.280
I'm going to give you just a really quick overview.

4
00:00:11.280 --> 00:00:14.880
We're actually not going to talk about the CDK in this clip.

5
00:00:14.880 --> 00:00:17.090
And if you're familiar with the container services,

6
00:00:17.090 --> 00:00:18.940
feel free to move on through.

7
00:00:18.940 --> 00:00:23.170
Now here let's look at the different services that are available on AWS.

8
00:00:23.170 --> 00:00:27.880
First of all, we have Amazon ECS, or elastic container service,

9
00:00:27.880 --> 00:00:32.740
which is a container orchestration service that AWS built for their platform.

10
00:00:32.740 --> 00:00:37.130
And then we have AWS Fargate, which really uses a lot of ECS.

11
00:00:37.130 --> 00:00:41.030
But what it does is it provides a managed cluster layer for you,

12
00:00:41.030 --> 00:00:43.600
so you don't have to manage the underlying instances

13
00:00:43.600 --> 00:00:45.790
that your containers are running on.

14
00:00:45.790 --> 00:00:46.380
And generally,

15
00:00:46.380 --> 00:00:50.290
you should use Fargate unless you have a reason to need more capabilities,

16
00:00:50.290 --> 00:00:52.540
in which case you might want to use ECS.

17
00:00:52.540 --> 00:00:55.200
But if you're used to Kubernetes and you really want to use that,

18
00:00:55.200 --> 00:01:00.940
there is also the EKS service where you can leverage Kubernetes within AWS.

19
00:01:00.940 --> 00:01:03.560
Now there's also another service we're going to be interacting with,

20
00:01:03.560 --> 00:01:07.910
and that is the ECR, which is the AWS container registry.

21
00:01:07.910 --> 00:01:12.140
And we'll be using this for our container images here within this module.

22
00:01:12.140 --> 00:01:14.710
Now let's talk about some different ECS terms,

23
00:01:14.710 --> 00:01:17.230
and then we'll get into Fargate in just a minute.

24
00:01:17.230 --> 00:01:19.830
So what you're going to do with ECS is you're going to

25
00:01:19.830 --> 00:01:23.240
deploy your containers onto a cluster.

26
00:01:23.240 --> 00:01:25.040
In this case, you're going to have a cluster instance,

27
00:01:25.040 --> 00:01:27.240
and really you're going to have more than one in most cases.

28
00:01:27.240 --> 00:01:29.480
So let's say that we have two potentially spanning

29
00:01:29.480 --> 00:01:31.340
two different availability zones.

30
00:01:31.340 --> 00:01:34.940
Well, the first term that we need to be familiar with is a task.

31
00:01:34.940 --> 00:01:37.280
So let's say that we define here that we have a task

32
00:01:37.280 --> 00:01:39.380
for our sample web application,

33
00:01:39.380 --> 00:01:42.690
and it's going to contain both a web server and a database.

34
00:01:42.690 --> 00:01:46.340
So here we have two different containers running within one task.

35
00:01:46.340 --> 00:01:46.510
Well,

36
00:01:46.510 --> 00:01:49.070
we probably want to have some different rules about how

37
00:01:49.070 --> 00:01:51.240
many of our tasks we have up and running.

38
00:01:51.240 --> 00:01:53.240
Now let's say we want to have a rule saying that we want to

39
00:01:53.240 --> 00:01:56.300
have this kind of working across both of our cluster

40
00:01:56.300 --> 00:01:58.610
instances so we have high availability.

41
00:01:58.610 --> 00:01:58.930
Well,

42
00:01:58.930 --> 00:02:01.770
these kind of rules for how we deploy our tasks and how

43
00:02:01.770 --> 00:02:03.950
many of them we need to have up and running at any given

44
00:02:03.950 --> 00:02:06.540
point in time is called a service.

45
00:02:06.540 --> 00:02:08.470
So here we have an app service.

46
00:02:08.470 --> 00:02:11.750
But our clusters can actually have more than one service on them.

47
00:02:11.750 --> 00:02:14.600
So maybe we have another task that is going to

48
00:02:14.600 --> 00:02:16.660
handle reporting for our application.

49
00:02:16.660 --> 00:02:19.840
We also want to have that running across both availability zones,

50
00:02:19.840 --> 00:02:24.340
and this might be contained within another service called our reporting service.

51
00:02:24.340 --> 00:02:26.820
But if you remember when I talked about Fargate,

52
00:02:26.820 --> 00:02:29.500
the benefit of Fargate is you don't have to manage

53
00:02:29.500 --> 00:02:31.650
those underlying cluster instances.

54
00:02:31.650 --> 00:02:33.020
You still define tasks.

55
00:02:33.020 --> 00:02:34.860
You still define a service.

56
00:02:34.860 --> 00:02:39.240
So let's talk about how you actually deploy a Fargate application.

57
00:02:39.240 --> 00:02:41.650
So here we first have our VPC,

58
00:02:41.650 --> 00:02:46.250
and this is going to be the same VPC that we created earlier within this course.

59
00:02:46.250 --> 00:02:52.140
And if you remember, we created both public and private subnets within our VPC.

60
00:02:52.140 --> 00:02:54.470
So here, within our private subnet,

61
00:02:54.470 --> 00:02:59.320
this is where our Fargate container is going to live. And here we're going to

62
00:02:59.320 --> 00:03:02.130
have one task which is going to be our web server task,

63
00:03:02.130 --> 00:03:06.000
and it's only going to have a single container. And then we'll define

64
00:03:06.000 --> 00:03:10.240
rules for the service for how that works with Fargate.

65
00:03:10.240 --> 00:03:13.020
And then what we're going to have is we're going to have a public subnet,

66
00:03:13.020 --> 00:03:17.070
which is going to contain an application load balancer or ALB.

67
00:03:17.070 --> 00:03:19.850
And the way it'll work is that any incoming traffic will go

68
00:03:19.850 --> 00:03:22.570
through that load balancer in the public subnet.

69
00:03:22.570 --> 00:03:23.730
And then from there,

70
00:03:23.730 --> 00:03:26.340
it will be able to communicate from the public subnet to

71
00:03:26.340 --> 00:03:33.000
the private subnet to our container. So that's what we're going to be implementing within this module.

