WEBVTT
1
00:00:01.040 --> 00:00:01.920
So now,

2
00:00:01.920 --> 00:00:04.960
we're going to be generating our own new TypeScript

3
00:00:04.960 --> 00:00:08.340
CDK application using the CLI.

4
00:00:08.340 --> 00:00:11.940
So to make this happen, here's what we're going to be doing in this demo.

5
00:00:11.940 --> 00:00:12.780
First of all,

6
00:00:12.780 --> 00:00:16.790
we're going to be verifying our CDK installation because here we

7
00:00:16.790 --> 00:00:20.340
need the CLI to be able to generate the project.

8
00:00:20.340 --> 00:00:20.920
Next,

9
00:00:20.920 --> 00:00:25.700
we will use the CDK to generate that new application, and then we'll

10
00:00:25.700 --> 00:00:30.400
be reviewing the CDK TypeScript project structure so you understand

11
00:00:30.400 --> 00:00:32.720
what was created and how you use it.

12
00:00:32.720 --> 00:00:35.340
So, let's dive in.

13
00:00:35.340 --> 00:00:37.950
So I'm here within my terminal, and the first thing I'm going

14
00:00:37.950 --> 00:00:40.840
to run is I'm going to run cdk ‑‑version.

15
00:00:40.840 --> 00:00:41.640
And when I do,

16
00:00:41.640 --> 00:00:44.190
I'm going to get back the version number for the CDK

17
00:00:44.190 --> 00:00:46.070
that I have installed on my machine.

18
00:00:46.070 --> 00:00:50.560
Now, an important note here. The CDK is still under active development.

19
00:00:50.560 --> 00:00:53.000
That means there are a lot of changes that are coming in.

20
00:00:53.000 --> 00:00:55.140
You'll see updates pretty much weekly,

21
00:00:55.140 --> 00:00:57.940
so this version number is going to quickly increment.

22
00:00:57.940 --> 00:01:01.330
You need to always be sure that you're updating both the versions

23
00:01:01.330 --> 00:01:05.450
that you're using with your project and also the global CDK CLI

24
00:01:05.450 --> 00:01:07.290
that you have installed on your machine.

25
00:01:07.290 --> 00:01:07.550
Now,

26
00:01:07.550 --> 00:01:10.510
if you don't have the latest version or if you don't

27
00:01:10.510 --> 00:01:14.840
have any version at all of the CDK, you can simply install it using npm.

28
00:01:14.840 --> 00:01:23.940
So I'm going to say npm install aws‑cdk ‑g, and this will install this globally.

29
00:01:23.940 --> 00:01:26.160
And we can see here that I have installed it, and it is

30
00:01:26.160 --> 00:01:28.240
the same version that I had previously.

31
00:01:28.240 --> 00:01:29.720
Now, once I have this in place,

32
00:01:29.720 --> 00:01:35.170
I need to create a directory for my TypeScript project.

33
00:01:35.170 --> 00:01:38.500
And I'm going to create a directory here called typescript‑cdk,

34
00:01:38.500 --> 00:01:41.240
and I'm going to change into that directory.

35
00:01:41.240 --> 00:01:46.540
Now that I'm in the directory, I can now use the CLI to create a new project.

36
00:01:46.540 --> 00:01:50.780
So I'm going to say cdk init, and then I'm going to tell it that I

37
00:01:50.780 --> 00:01:54.180
want to initialize an app, so we'll say app.

38
00:01:54.180 --> 00:01:56.150
And then I need to tell it the language that it's going

39
00:01:56.150 --> 00:02:01.380
to use. Now that I have this in place, I can now hit Enter,

40
00:02:01.380 --> 00:02:03.200
and it's going to go through the process now of

41
00:02:03.200 --> 00:02:07.540
creating our new CDK application.

42
00:02:07.540 --> 00:02:08.670
And now that that's done,

43
00:02:08.670 --> 00:02:11.650
it has created a project for us in this current directory.

44
00:02:11.650 --> 00:02:15.880
And as you've seen here with the instructions, it's already run npm install.

45
00:02:15.880 --> 00:02:21.640
So now, I'm going to open this up in VS Code.

46
00:02:21.640 --> 00:02:26.600
So here I can see the project that was created with the CDK CLI. And

47
00:02:26.600 --> 00:02:29.490
here we already have things like our package.json file, we have our

48
00:02:29.490 --> 00:02:32.530
node_modules directory that's already pretty full with a lot of

49
00:02:32.530 --> 00:02:36.110
different packages, and we even have a Git repository that has been

50
00:02:36.110 --> 00:02:38.800
created within this directory.

51
00:02:38.800 --> 00:02:40.740
Now the first thing I want to take a look at as I want

52
00:02:40.740 --> 00:02:43.880
to take a look at this cdk.json file.

53
00:02:43.880 --> 00:02:46.730
Now if I open this up, there's a few things I want to call out.

54
00:02:46.730 --> 00:02:47.320
First of all,

55
00:02:47.320 --> 00:02:51.670
you can see here under the app key that here were using ts‑node

56
00:02:51.670 --> 00:02:56.530
to run a file called bin/typescript‑cdk.ts. And we'll review

57
00:02:56.530 --> 00:02:59.140
that in just a minute, but that's going to be the entry point

58
00:02:59.140 --> 00:03:01.940
for our CDK application.

59
00:03:01.940 --> 00:03:02.400
In addition,

60
00:03:02.400 --> 00:03:06.240
we have some other context values here that basically turn on or

61
00:03:06.240 --> 00:03:09.040
off specific features of the CDK. And really,

62
00:03:09.040 --> 00:03:12.540
for the most part, you shouldn't worry about these values for now.

63
00:03:12.540 --> 00:03:14.410
The next thing I want to take a look at is I want to

64
00:03:14.410 --> 00:03:17.940
take a look at the package.json file.

65
00:03:17.940 --> 00:03:18.630
So first of all,

66
00:03:18.630 --> 00:03:20.580
I want to call out that we have some dependencies

67
00:03:20.580 --> 00:03:22.900
here like typescript and ts‑node.

68
00:03:22.900 --> 00:03:26.420
These are included as dependencies within the projects so we don't

69
00:03:26.420 --> 00:03:28.880
have to worry about installing these separately.

70
00:03:28.880 --> 00:03:33.010
In addition, you can see that we're already pulling in the cdk/core.

71
00:03:33.010 --> 00:03:35.340
However, when we start to use other services,

72
00:03:35.340 --> 00:03:37.540
which we will within the next module,

73
00:03:37.540 --> 00:03:41.440
we will need to install some additional packages from the CDK.

74
00:03:41.440 --> 00:03:44.780
But you can see that out of the gate we have some things here that enable

75
00:03:44.780 --> 00:03:49.260
us to build, to watch, to test, and a reference to the CDK that we can use

76
00:03:49.260 --> 00:03:53.530
directly from within npm. Now one of the things that's included, because

77
00:03:53.530 --> 00:03:57.720
you can see there is a test command here using Jest, is we also have a test

78
00:03:57.720 --> 00:04:01.950
directory that already has a test configured for us. And here, we can see

79
00:04:01.950 --> 00:04:06.680
some of the capabilities that are provided within the CDK utilizing the

80
00:04:06.680 --> 00:04:10.740
matchTemplate function that has been exported. Here we can say that we

81
00:04:10.740 --> 00:04:14.780
would expect that our stack that we've configured should match the template

82
00:04:14.780 --> 00:04:19.160
that we've included here. Now, because we don't have any specific resources

83
00:04:19.160 --> 00:04:22.330
configured within the CDK, this should work because we're telling it it

84
00:04:22.330 --> 00:04:24.700
should basically create a blank template.

85
00:04:24.700 --> 00:04:27.160
And so I can go here and create a new version of the terminal,

86
00:04:27.160 --> 00:04:32.270
and we can run in here, and we can say npm test, and we can see

87
00:04:32.270 --> 00:04:35.060
that indeed here our tests do pass.

88
00:04:35.060 --> 00:04:39.550
So here you can see the testing capability that is baked in. Now, in addition,

89
00:04:39.550 --> 00:04:42.830
I also want to take a look here at the tsconfig.json file.

90
00:04:42.830 --> 00:04:46.010
So we already see that we have a tsconfig file that is properly

91
00:04:46.010 --> 00:04:48.940
configured based on what the CDK expects.

92
00:04:48.940 --> 00:04:52.810
This is another reason why it just makes sense to use the CDK CLI

93
00:04:52.810 --> 00:04:55.640
until you get to the point where you're familiar enough with the

94
00:04:55.640 --> 00:04:58.850
project structure that you can craft your own configuration to make

95
00:04:58.850 --> 00:05:01.040
it work the way that you want it to.

96
00:05:01.040 --> 00:05:04.050
Now, the next thing I want to call out here is the bin file.

97
00:05:04.050 --> 00:05:08.010
This is going to be the entry point for the CDK for our application.

98
00:05:08.010 --> 00:05:08.800
And if you remember,

99
00:05:08.800 --> 00:05:14.150
we've talked about previously the concepts of a CDK application and a CDK

100
00:05:14.150 --> 00:05:19.240
stack. And a CDK application can contain one or more stacks.

101
00:05:19.240 --> 00:05:22.320
Now a stack has to exist within a single environment,

102
00:05:22.320 --> 00:05:25.710
meaning that it exists within a single AWS account and a

103
00:05:25.710 --> 00:05:29.560
corresponding region. Here in this case we're creating an app

104
00:05:29.560 --> 00:05:31.840
here on line 6, and then right after that,

105
00:05:31.840 --> 00:05:34.180
we're creating an instance of our stack,

106
00:05:34.180 --> 00:05:36.120
which is a TypescriptCdkStack.

107
00:05:36.120 --> 00:05:40.070
Now currently, we only have this one stack that has been generated for us,

108
00:05:40.070 --> 00:05:42.320
and we can look at this by going under the lib

109
00:05:42.320 --> 00:05:44.650
directory. Here, under the lib directory,

110
00:05:44.650 --> 00:05:46.940
I can click on typescript‑cdk‑stack,

111
00:05:46.940 --> 00:05:50.270
and here I can see the bones of a CDK stack that have already been

112
00:05:50.270 --> 00:05:53.750
created for me. And I can take here where this comment is,

113
00:05:53.750 --> 00:05:58.140
and I can begin to define the resources that I need for my

114
00:05:58.140 --> 00:06:04.000
CDK application. And that's what we're going to be doing here within the next clip.

