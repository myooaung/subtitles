WEBVTT
1
00:00:01.040 --> 00:00:04.740
So now I want to take a minute and revisit a concept that we covered

2
00:00:04.740 --> 00:00:08.390
in detail within the last course in this path.

3
00:00:08.390 --> 00:00:11.630
And that is this: That managing infrastructure should be as

4
00:00:11.630 --> 00:00:14.740
easy as managing your application code.

5
00:00:14.740 --> 00:00:15.040
Now,

6
00:00:15.040 --> 00:00:17.620
one of the reasons we say that is because we get to now take

7
00:00:17.620 --> 00:00:21.100
advantage of our development workflow when we're talking about

8
00:00:21.100 --> 00:00:23.720
creating our infrastructure in AWS.

9
00:00:23.720 --> 00:00:26.630
And this includes aspects like using version control,

10
00:00:26.630 --> 00:00:31.840
having collaborative review, automated testing, and continuous delivery.

11
00:00:31.840 --> 00:00:34.790
So here, when we're talking about infrastructure as code,

12
00:00:34.790 --> 00:00:38.810
what we mean is this approach of managing our infrastructure and its

13
00:00:38.810 --> 00:00:42.670
configuration in human‑readable definition files instead of manually

14
00:00:42.670 --> 00:00:45.540
launching and configuring infrastructure,

15
00:00:45.540 --> 00:00:48.200
I just want to revisit quickly some of the challenges that can

16
00:00:48.200 --> 00:00:51.840
happen when you're not using infrastructure as code.

17
00:00:51.840 --> 00:00:52.660
So, first of all,

18
00:00:52.660 --> 00:00:57.010
you have a separate deployment workflow for your infrastructure and your code.

19
00:00:57.010 --> 00:01:00.770
That means it's very likely that the two can get out of sync.

20
00:01:00.770 --> 00:01:02.960
But here, within infrastructure as code,

21
00:01:02.960 --> 00:01:05.520
you can have a deployment workflow that can be unified

22
00:01:05.520 --> 00:01:08.130
between both your infrastructure and your code so you can

23
00:01:08.130 --> 00:01:11.140
deploy both of them at the same time.

24
00:01:11.140 --> 00:01:15.370
Within manual infrastructure, you're almost always having manual processes,

25
00:01:15.370 --> 00:01:18.130
and we know the human processes and manual things

26
00:01:18.130 --> 00:01:20.870
that we have to do are error prone.

27
00:01:20.870 --> 00:01:23.230
But with infrastructure as code, if done correctly,

28
00:01:23.230 --> 00:01:26.640
there is no need for manual processes.

29
00:01:26.640 --> 00:01:28.800
Next, within manual infrastructure,

30
00:01:28.800 --> 00:01:31.600
our environments can easily get out of sync with how they were

31
00:01:31.600 --> 00:01:35.380
configured initially. It could be that someone went and changed

32
00:01:35.380 --> 00:01:37.760
something in production to fix an issue, but then we didn't see

33
00:01:37.760 --> 00:01:41.360
that same change replicated within our QA and our staging and our

34
00:01:41.360 --> 00:01:43.040
development environments.

35
00:01:43.040 --> 00:01:45.050
But with infrastructure as code,

36
00:01:45.050 --> 00:01:49.170
we see our workflow being unified, manual processes are eliminated,

37
00:01:49.170 --> 00:01:50.640
and because of that,

38
00:01:50.640 --> 00:01:55.140
our environments can stay in sync. With manual infrastructure, we can

39
00:01:55.140 --> 00:01:58.290
see our environment configuration drift over time,

40
00:01:58.290 --> 00:02:01.460
meaning that it's different from how it was initially configured.

41
00:02:01.460 --> 00:02:03.250
But with infrastructure as code,

42
00:02:03.250 --> 00:02:06.660
we can actually do drift detection with many infrastructure as code

43
00:02:06.660 --> 00:02:10.160
solutions, and especially here with AWS CloudFormation,

44
00:02:10.160 --> 00:02:12.770
we can make sure that our environments are working

45
00:02:12.770 --> 00:02:14.740
as they were configured to work.

46
00:02:14.740 --> 00:02:16.970
In addition, with manual infrastructure,

47
00:02:16.970 --> 00:02:20.830
standing up new environments is time consuming and error prone.

48
00:02:20.830 --> 00:02:24.100
But if you're following infrastructure as code, launching

49
00:02:24.100 --> 00:02:26.940
a new environment is quick and easy.

50
00:02:26.940 --> 00:02:30.660
And I think one of the things we'll see here with this example is the testing

51
00:02:30.660 --> 00:02:33.750
that they're doing for Globomantics makes it very easy to spin up an

52
00:02:33.750 --> 00:02:39.210
environment to do a POC in and to help you validate whether or not this concept

53
00:02:39.210 --> 00:02:41.920
and approach makes sense for your organization.

54
00:02:41.920 --> 00:02:44.950
But I want to take a minute and talk about TypeScript and

55
00:02:44.950 --> 00:02:47.140
its role with infrastructure as code.

56
00:02:47.140 --> 00:02:48.840
So here within this course,

57
00:02:48.840 --> 00:02:51.850
I'm gong to be using TypeScript for the infrastructure as code.

58
00:02:51.850 --> 00:02:52.880
And that's what you would expect.

59
00:02:52.880 --> 00:02:54.540
That's what this course is about.

60
00:02:54.540 --> 00:02:58.530
But I'm also going to be using it here for the APIs and for the web server.

61
00:02:58.530 --> 00:03:00.870
It's going to be used here end to end.

62
00:03:00.870 --> 00:03:04.120
And I think this is one of the benefits of TypeScript and where we're at

63
00:03:04.120 --> 00:03:07.710
within the technology landscape today. I'm working, apart from what I'm

64
00:03:07.710 --> 00:03:10.880
doing with Pluralsight, I'm working right now to build out a large‑scale

65
00:03:10.880 --> 00:03:12.640
multi‑tenant SaaS application.

66
00:03:12.640 --> 00:03:15.190
And here's the thing. I'm using TypeScript throughout.

67
00:03:15.190 --> 00:03:18.630
TypeScript with the CDK for the infrastructure.

68
00:03:18.630 --> 00:03:22.470
I'm using TypeScript with Lambda to actually build out my API

69
00:03:22.470 --> 00:03:25.510
tier. And I'm even using TypeScript within a React

70
00:03:25.510 --> 00:03:27.890
application to build out the front end.

71
00:03:27.890 --> 00:03:28.910
So, with this,

72
00:03:28.910 --> 00:03:31.690
we're seeing the ability to now unify the technology that we're

73
00:03:31.690 --> 00:03:34.640
using across every tier of our application.

74
00:03:34.640 --> 00:03:39.490
And I think this is one of the great advantages of using the CDK. And even

75
00:03:39.490 --> 00:03:43.370
we're seeing organizations embrace what we would call monorepos, where you

76
00:03:43.370 --> 00:03:47.750
have your CDK code living alongside your API code and your front‑end code,

77
00:03:47.750 --> 00:03:51.910
and there's a unified build process for all of those different tiers. So I

78
00:03:51.910 --> 00:03:58.000
would encourage you to embrace concepts like this when you're building your application with the CDK.

