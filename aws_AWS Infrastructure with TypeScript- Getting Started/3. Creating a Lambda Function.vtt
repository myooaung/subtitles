WEBVTT
1
00:00:01.040 --> 00:00:05.640
So now we're ready to create our Lambda function within our project.

2
00:00:05.640 --> 00:00:06.890
So here within this demo,

3
00:00:06.890 --> 00:00:10.700
were first going to be creating our first TypeScript Lambda function,

4
00:00:10.700 --> 00:00:15.300
and we're going to be configuring this as a service within our existing project.

5
00:00:15.300 --> 00:00:16.640
So in this particular demo,

6
00:00:16.640 --> 00:00:19.230
we're going to stop short of building this out within the CDK,

7
00:00:19.230 --> 00:00:20.870
we'll be doing that within the next clip.

8
00:00:20.870 --> 00:00:23.920
But we're going to show here how you can implement this monorepo‑type

9
00:00:23.920 --> 00:00:26.640
approach where you have projects within projects,

10
00:00:26.640 --> 00:00:29.890
and this is where we'll be building out our initial TypeScript service.

11
00:00:29.890 --> 00:00:32.440
So, let's dive in.

12
00:00:32.440 --> 00:00:36.770
So I want to call out here that I have redeployed our TypeScript CDK stack,

13
00:00:36.770 --> 00:00:39.250
and I've done that without any changes to the project.

14
00:00:39.250 --> 00:00:41.370
So if you want to be consistent with where I'm at,

15
00:00:41.370 --> 00:00:44.930
make sure that you go into your project and just type CDK deploy,

16
00:00:44.930 --> 00:00:48.640
and this should get you to where I'm at within this particular module.

17
00:00:48.640 --> 00:00:51.740
So now let me jump over into VS Code.

18
00:00:51.740 --> 00:00:56.170
Now, our first step here to make this Lambda function might seem a bit unusual.

19
00:00:56.170 --> 00:00:58.640
We're going to go into our tsconfig file,

20
00:00:58.640 --> 00:01:00.970
and here we need to add one additional value,

21
00:01:00.970 --> 00:01:03.520
and that's going to be esModuleInterop.

22
00:01:03.520 --> 00:01:05.640
And we're going to set this to be true.

23
00:01:05.640 --> 00:01:06.890
Once we have that in place,

24
00:01:06.890 --> 00:01:09.590
I'm going to close out our tsconfig file and I'm

25
00:01:09.590 --> 00:01:13.640
going to create a new directory, and I'm going to call this one API.

26
00:01:13.640 --> 00:01:15.050
The way this is going to be structured,

27
00:01:15.050 --> 00:01:18.670
API is going to be the overall folder for all of the different

28
00:01:18.670 --> 00:01:20.810
services that we're going to expose via Lambda.

29
00:01:20.810 --> 00:01:22.630
Now we're just building one out in this course,

30
00:01:22.630 --> 00:01:26.440
but you could expand upon this concept to have multiple services.

31
00:01:26.440 --> 00:01:29.600
The next thing I'm going to do is I'm going to go within the API directory

32
00:01:29.600 --> 00:01:34.340
and I'm going to create another folder called getDocuments.

33
00:01:34.340 --> 00:01:38.430
Now that I have that in place, I'm going to create two files within that folder.

34
00:01:38.430 --> 00:01:40.880
The first is going to be index.ts,

35
00:01:40.880 --> 00:01:44.270
and this is going to be our main TypeScript file for this service,

36
00:01:44.270 --> 00:01:47.640
and the other is going to be package.json.

37
00:01:47.640 --> 00:01:48.730
And as I mentioned here,

38
00:01:48.730 --> 00:01:51.560
we're dealing with a bit of a monorepo‑type approach where we have a

39
00:01:51.560 --> 00:01:54.610
separate project that exists with its own package.json file,

40
00:01:54.610 --> 00:01:57.940
its own node modules, here within the overall project.

41
00:01:57.940 --> 00:01:58.090
Now,

42
00:01:58.090 --> 00:02:00.250
the next thing I'm going to do is I'm going to use a snippet that

43
00:02:00.250 --> 00:02:03.140
I have to just add in some base dependencies.

44
00:02:03.140 --> 00:02:05.980
So here you can see we're pulling in two devDependencies.

45
00:02:05.980 --> 00:02:07.480
Types for aws‑lambda,

46
00:02:07.480 --> 00:02:10.090
which allows us to work with Lambda inputs and outputs

47
00:02:10.090 --> 00:02:14.330
in a typed manner with TypeScript, and the aws‑sdk.

48
00:02:14.330 --> 00:02:14.560
Now,

49
00:02:14.560 --> 00:02:17.940
one of the steps we'll need to take within the next clip is to

50
00:02:17.940 --> 00:02:22.000
make sure that that aws‑sdk is not bundled in because we know

51
00:02:22.000 --> 00:02:23.570
that that is provided within Lambda,

52
00:02:23.570 --> 00:02:26.540
so we don't want that within our bundled function.

53
00:02:26.540 --> 00:02:30.940
But now that we have this in place, I'm going to move over to the index.ts file,

54
00:02:30.940 --> 00:02:34.140
and I have another snippet that I'm going to use here.

55
00:02:34.140 --> 00:02:38.670
So this particular snippet allows us to go in and work with a

56
00:02:38.670 --> 00:02:40.850
handler function that can be used with Lambda,

57
00:02:40.850 --> 00:02:44.540
and I'm going to call this one getDocuments.

58
00:02:44.540 --> 00:02:46.740
And you'll see here that in this particular file,

59
00:02:46.740 --> 00:02:50.200
we're using typed values for the event and the context,

60
00:02:50.200 --> 00:02:52.960
And we're going to be returning a value that is going to be

61
00:02:52.960 --> 00:02:57.100
of type APIGatewayProxyStructuredResultV2.

62
00:02:57.100 --> 00:03:00.100
Now the V2 here corresponds to APIGatewayV2,

63
00:03:00.100 --> 00:03:04.540
meaning an HTTP API over a REST‑based API.

64
00:03:04.540 --> 00:03:08.840
So because of that, I'm going to actually return a particular structure.

65
00:03:08.840 --> 00:03:11.780
Now, this will apply once we integrate in with APIGateway,

66
00:03:11.780 --> 00:03:13.590
but even though we're not doing that yet,

67
00:03:13.590 --> 00:03:16.290
I'm going to keep this return syntax throughout.

68
00:03:16.290 --> 00:03:19.020
Where we're specifying both a status code and then returning

69
00:03:19.020 --> 00:03:23.150
a numeric HTTP status code and a body, which needs to be a string.

70
00:03:23.150 --> 00:03:27.640
So if it's a complex object, we need to use JSON.stringify() on it.

71
00:03:27.640 --> 00:03:30.040
But now that I have this in place, I'm almost done.

72
00:03:30.040 --> 00:03:32.740
But you'll note here that we have an error within the IDE,

73
00:03:32.740 --> 00:03:35.860
and that's because I haven't yet installed the dependencies that

74
00:03:35.860 --> 00:03:38.380
I've defined within the package.json file.

75
00:03:38.380 --> 00:03:40.390
So I'm going to go ahead and save this file,

76
00:03:40.390 --> 00:03:42.840
and then I'm going to go over to the terminal.

77
00:03:42.840 --> 00:03:43.530
From here,

78
00:03:43.530 --> 00:03:48.000
I'm going to change into my API directory and then they getDocuments directory,

79
00:03:48.000 --> 00:03:51.440
and now I can run npm install.

80
00:03:51.440 --> 00:03:55.220
Now I can see that I've installed the needed dependencies for my Lambda

81
00:03:55.220 --> 00:04:00.140
function and I'm going to head back over into VS Code.

82
00:04:00.140 --> 00:04:02.340
So now that we've defined our Lambda function,

83
00:04:02.340 --> 00:04:10.000
we're now ready for the step that we'll tackle in the next clip, which is beginning to integrate this in with the CDK.

