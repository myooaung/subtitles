WEBVTT
1
00:00:01.040 --> 00:00:04.380
Now, the next step that we're going to take might seem like a strange one,

2
00:00:04.380 --> 00:00:07.880
but it is an essential part of the CDK workflow.

3
00:00:07.880 --> 00:00:11.940
And that is we're going to delete an existing CDK application.

4
00:00:11.940 --> 00:00:13.340
So here, first,

5
00:00:13.340 --> 00:00:17.680
we're going to be utilizing the CLI to delete a custom application.

6
00:00:17.680 --> 00:00:22.550
We'll also be reviewing other methods for deleting a deployed CDK app.

7
00:00:22.550 --> 00:00:25.380
So, let's dive in.

8
00:00:25.380 --> 00:00:26.840
So I'm here within the terminal,

9
00:00:26.840 --> 00:00:29.750
and the first thing I'm going to do is I'm going to run a cdk diff.

10
00:00:29.750 --> 00:00:33.080
Now we should see here that there are no changes because we

11
00:00:33.080 --> 00:00:35.300
have deployed all of our application.

12
00:00:35.300 --> 00:00:37.140
And that is indeed what we see here.

13
00:00:37.140 --> 00:00:42.280
Now that we have this in place, we're now ready to run cdk destroy.

14
00:00:42.280 --> 00:00:46.390
Now, this will go through the process of deleting our deployed application.

15
00:00:46.390 --> 00:00:47.950
It's going to ask us for confirmation.

16
00:00:47.950 --> 00:00:49.680
We're going to say, yes.

17
00:00:49.680 --> 00:00:52.500
And so it will now go through the process of deleting all of the

18
00:00:52.500 --> 00:00:54.850
resources within our stack and then ultimately,

19
00:00:54.850 --> 00:00:59.170
our stack itself. And this is a critical piece here, if we define all

20
00:00:59.170 --> 00:01:01.910
of our infrastructure by infrastructure as code,

21
00:01:01.910 --> 00:01:05.190
there should be no reason why we can't destroy and

22
00:01:05.190 --> 00:01:07.500
then simply redeploy our application.

23
00:01:07.500 --> 00:01:08.230
A matter of fact,

24
00:01:08.230 --> 00:01:11.620
this is one of the key checks that we can do to see if we are

25
00:01:11.620 --> 00:01:14.220
fully abiding by infrastructure as code.

26
00:01:14.220 --> 00:01:18.910
If we delete and then redeploy and our application isn't in the same state,

27
00:01:18.910 --> 00:01:21.740
there's probably something we're doing here that is outside the best

28
00:01:21.740 --> 00:01:26.320
practices of infrastructure as code. As an example, often,

29
00:01:26.320 --> 00:01:31.140
when I'm working on large scale applications within AWS accounts that I manage,

30
00:01:31.140 --> 00:01:34.490
I will actually delete the application potentially at the

31
00:01:34.490 --> 00:01:36.980
end of the day or certainly before the weekend so that I

32
00:01:36.980 --> 00:01:39.160
don't incur any unneeded charges.

33
00:01:39.160 --> 00:01:42.150
And I know that I can simply redeploy whenever I'm ready

34
00:01:42.150 --> 00:01:44.680
to work again with my application.

35
00:01:44.680 --> 00:01:47.610
And so now here we will wait for this process to complete

36
00:01:47.610 --> 00:01:53.600
while we're deleting our CDK stack. And now we can see that

37
00:01:53.600 --> 00:01:56.050
our CDK app has been destroyed.

38
00:01:56.050 --> 00:01:59.340
So now, let's navigate over to the console.

39
00:01:59.340 --> 00:02:02.860
So I'm here in the CloudFormation console and you can see

40
00:02:02.860 --> 00:02:05.620
that we only have one stack, our CDKToolkit.

41
00:02:05.620 --> 00:02:09.140
So we did successfully delete our custom application,

42
00:02:09.140 --> 00:02:12.170
but I want to call out that you could, if you need to, delete your

43
00:02:12.170 --> 00:02:14.880
application from within the console as well.

44
00:02:14.880 --> 00:02:17.220
So I'm going to click on my CDKToolkit stack.

45
00:02:17.220 --> 00:02:18.660
Now, I'm not going to delete this,

46
00:02:18.660 --> 00:02:22.330
but I could go through here and actually press the delete option

47
00:02:22.330 --> 00:02:24.710
here within the console and then walk through the process of

48
00:02:24.710 --> 00:02:26.340
deleting it here. Because remember,

49
00:02:26.340 --> 00:02:31.290
at the end of the day our custom CDK stack is just a CloudFormation stack.

50
00:02:31.290 --> 00:02:33.200
And so anything we could do here,

51
00:02:33.200 --> 00:02:35.580
including going in and doing things like drift detection,

52
00:02:35.580 --> 00:02:39.100
for example, or going in and changing termination protection.

53
00:02:39.100 --> 00:02:47.000
These are things that we could enable within the console, as well as working with the CDK CLI.

