1
00:00:01,040 --> 00:00:05,640
And now we're ready to actually deploy our CDK application.

2
00:00:05,640 --> 00:00:07,440
So here, within this demo,

3
00:00:07,440 --> 00:00:11,530
were first going to be deploying our app, and then we'll be reviewing the

4
00:00:11,530 --> 00:00:15,660
generated CloudFormatin stack within the AWS console.

5
00:00:15,660 --> 00:00:17,940
So, let's dive in.

6
00:00:17,940 --> 00:00:19,860
So first, I want to point out again here,

7
00:00:19,860 --> 00:00:23,110
within the account that we're going to be using and within the

8
00:00:23,110 --> 00:00:27,370
Northern Virginia region, we currently only have the CDKToolkit stack

9
00:00:27,370 --> 00:00:31,200
included. And as a reminder, that is the stack that was generated when

10
00:00:31,200 --> 00:00:34,640
we ran the cdk bootstrap Command.

11
00:00:34,640 --> 00:00:37,540
So now I'm going to go over to the terminal.

12
00:00:37,540 --> 00:00:42,930
So now, here within the terminal, I'm first going to run cdk list.

13
00:00:42,930 --> 00:00:45,540
Now this is going to list all of the stacks that

14
00:00:45,540 --> 00:00:48,450
are included within our CDK app.

15
00:00:48,450 --> 00:00:51,870
So you can see here that we only have a single stack,

16
00:00:51,870 --> 00:00:54,840
which is the TypescriptCdkStack.

17
00:00:54,840 --> 00:00:57,140
Now since we only have a single stack,

18
00:00:57,140 --> 00:01:01,770
any of the commands that we want to run, we can simply just use the command.

19
00:01:01,770 --> 00:01:04,460
We don't have to specify the exact stack.

20
00:01:04,460 --> 00:01:08,730
If we were dealing with a multi‑stack application, in those cases,

21
00:01:08,730 --> 00:01:12,040
we would need to specify the stack that we were going to work with.

22
00:01:12,040 --> 00:01:19,940
But now, since we just have a single stack, we're going to run just cdk deploy.

23
00:01:19,940 --> 00:01:23,140
And now we can see that the deployment has completed.

24
00:01:23,140 --> 00:01:27,340
It even lets us know here what our output value is that we configured.

25
00:01:27,340 --> 00:01:29,430
But let's look at it a little bit more in depth by

26
00:01:29,430 --> 00:01:32,540
diving back over into the AWS Console.

27
00:01:32,540 --> 00:01:35,280
So now we can see that we have two stacks, our

28
00:01:35,280 --> 00:01:38,240
TypescriptCdkStack and the CDKToolkit.

29
00:01:38,240 --> 00:01:42,260
So first, I'm going to click into the stack that we just deployed, and I

30
00:01:42,260 --> 00:01:45,810
want to go now to the Resources tab. And here I can see within the

31
00:01:45,810 --> 00:01:50,250
Resources tab we do have a CDKMetadata item.

32
00:01:50,250 --> 00:01:53,560
Now this is metadata that's associated with our deployment that

33
00:01:53,560 --> 00:01:57,600
lets the CDK know all the specific versions of the different

34
00:01:57,600 --> 00:02:00,440
libraries that we used within our project. And generally you

35
00:02:00,440 --> 00:02:01,590
won't need to mess with this.

36
00:02:01,590 --> 00:02:05,440
This is something that the CDK uses behind the scenes.

37
00:02:05,440 --> 00:02:09,770
But then we can also see our DocumentsBucket that was created, and you can see

38
00:02:09,770 --> 00:02:14,550
here that it does have the logical ID that was used within the generated JSON

39
00:02:14,550 --> 00:02:17,940
template that we reviewed within the last clip.

40
00:02:17,940 --> 00:02:21,850
We also can see here that we have our output configured, so our

41
00:02:21,850 --> 00:02:26,360
DocumentsBucketNameExport is the name of the bucket that's included here.

42
00:02:26,360 --> 00:02:32,420
Now this also uses a name that is consistent with what we have named it, but it

43
00:02:32,420 --> 00:02:34,990
includes the name of the stack and then the name we gave it,

44
00:02:34,990 --> 00:02:39,140
which was DocumentsBucket, and then followed by a unique identifier.

45
00:02:39,140 --> 00:02:42,080
So we have all of those values also included.

46
00:02:42,080 --> 00:02:44,610
Now I'm going to go over to the terminal really quick,

47
00:02:44,610 --> 00:02:51,640
and here we can also see our export if we use aws cloudformation

48
00:02:51,640 --> 00:02:55,910
list‑exports. And we can see that our export,

49
00:02:55,910 --> 00:02:59,100
which is DocumentsBucketName and the value of it have been included here

50
00:02:59,100 --> 00:03:02,510
as well. So we've done a lot here within this module.

51
00:03:02,510 --> 00:03:06,080
We started off with an initialized application where we had our

52
00:03:06,080 --> 00:03:08,780
own generated resources. And then after this,

53
00:03:08,780 --> 00:03:11,620
we were able to first go through the bootstrapping process.

54
00:03:11,620 --> 00:03:15,160
We then reviewed the generated templates, and we deployed

55
00:03:15,160 --> 00:03:18,370
our application to our AWS account.

56
00:03:18,370 --> 00:03:20,920
Now that we have this in place, within the next module,

57
00:03:20,920 --> 00:03:22,810
we're going to go through the process of how we

58
00:03:22,810 --> 00:03:26,510
actually manage a deployed stack, how we push updates,

59
00:03:26,510 --> 00:03:29,740
how we view differences between the deployed stack and

60
00:03:29,740 --> 00:03:38,000
our local stack, and then ultimately, once we move on later, we're going to be building out integrations with Lambda and Fargate.

