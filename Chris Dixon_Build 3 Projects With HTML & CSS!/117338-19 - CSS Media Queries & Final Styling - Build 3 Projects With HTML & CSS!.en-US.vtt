WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.120 --> 00:00:07.295
To help us out with adding some additional styling and layout for our larger view,

00:00:07.295 --> 00:00:10.785
we're going to make use of some CSS media queries.

00:00:10.785 --> 00:00:15.255
A media query is a way for us to apply different CSS properties,

00:00:15.255 --> 00:00:17.115
with different media types.

00:00:17.115 --> 00:00:21.045
With screens, we can specify what screen sizes we want this to apply to.

00:00:21.045 --> 00:00:25.500
If you want them only to apply to a landscape or a portrait orientation,

00:00:25.500 --> 00:00:28.380
if the screen resolution is high density,

00:00:28.380 --> 00:00:30.300
and lots of other options.

00:00:30.300 --> 00:00:32.750
To do this inside of our style sheet,

00:00:32.750 --> 00:00:35.255
we use the @media rule,

00:00:35.255 --> 00:00:39.170
and then we're going to add our conditions inside of the brackets.

00:00:39.170 --> 00:00:42.620
A common one is to only apply these CSS rules if

00:00:42.620 --> 00:00:46.165
the screen width is a minimum or a maximum size.

00:00:46.165 --> 00:00:48.845
Just like we looked at with the responsive images,

00:00:48.845 --> 00:00:55.285
we could set something like the minimum width to be a certain value such as 900 pixels,

00:00:55.285 --> 00:00:57.815
and inside of these curly braces,

00:00:57.815 --> 00:01:02.695
all we need to do is to write our CSS code exactly like we've previously done.

00:01:02.695 --> 00:01:04.190
Then using this example,

00:01:04.190 --> 00:01:07.535
all of the CSS inside of here will only apply

00:01:07.535 --> 00:01:11.795
when the minimum width of the browser is 900 pixels wide.

00:01:11.795 --> 00:01:14.225
As mentioned, you could do things also,

00:01:14.225 --> 00:01:16.360
which are certainly maximum width.

00:01:16.360 --> 00:01:19.450
We could set the orientation.

00:01:19.810 --> 00:01:23.270
This is more for mobile or portable devices,

00:01:23.270 --> 00:01:27.785
but we could check if the device is rotated portrait or landscape.

00:01:27.785 --> 00:01:30.730
We have a search online for CSS media queries,

00:01:30.730 --> 00:01:33.770
if you want to find out more about the different types available.

00:01:33.770 --> 00:01:37.100
With this project, I'm going to stick with the screen width,

00:01:37.100 --> 00:01:41.425
as this is really general and applies to a lot of different use cases.

00:01:41.425 --> 00:01:44.410
Anything which we currently have above just here,

00:01:44.410 --> 00:01:47.180
this will always apply to the small screen view.

00:01:47.180 --> 00:01:51.655
Then what we're going to do is to override this for the larger screen.

00:01:51.655 --> 00:01:54.794
Starting from the top of our project,

00:01:54.794 --> 00:01:57.980
again, we just write this CSS like we would normally do.

00:01:57.980 --> 00:02:01.340
For this header, if we make this a little bit wider,

00:02:01.340 --> 00:02:04.985
we want this icon or this logo to appear over on the left.

00:02:04.985 --> 00:02:07.805
Then they linked over on the right.

00:02:07.805 --> 00:02:12.050
To do this, if we go back up to our original header section,

00:02:12.050 --> 00:02:15.200
we've already set the display type to be flex.

00:02:15.200 --> 00:02:19.050
We don't need to set this again since we've already specified this here.

00:02:19.050 --> 00:02:23.705
But what we do need to do is to override any of these values which you want to change.

00:02:23.705 --> 00:02:27.260
One of the things which we do need change is this flex direction.

00:02:27.260 --> 00:02:30.635
Rather than it being in the direction of column like we have here,

00:02:30.635 --> 00:02:33.020
we need to set this to be a row.

00:02:33.020 --> 00:02:36.050
Go down to our media query.

00:02:36.050 --> 00:02:41.930
Let's do this first. The flex direction, the row.

00:02:41.930 --> 00:02:47.645
This now takes effect since we have reached the screen size of over 900 pixels.

00:02:47.645 --> 00:02:51.619
Shrinking this down, we can see once we go below 900,

00:02:51.619 --> 00:02:55.565
it's now reversed back to our original flex direction.

00:02:55.565 --> 00:02:57.770
To add our spacing in between,

00:02:57.770 --> 00:03:03.595
we can set the justify content property and use a value called space between.

00:03:03.595 --> 00:03:05.490
This will only distribute all of

00:03:05.490 --> 00:03:08.780
the available white space in-between all of the elements.

00:03:08.780 --> 00:03:12.565
This works no matter how many elements we have in our header.

00:03:12.565 --> 00:03:14.690
If we had three different elements,

00:03:14.690 --> 00:03:19.150
all of the spacing would apply equally between all three of these sections.

00:03:19.150 --> 00:03:21.100
The final thing to do for this header,

00:03:21.100 --> 00:03:24.220
if we look over on the right we have some spacing to the right of

00:03:24.220 --> 00:03:28.540
our links and we also need to match this over on the left-hand side.

00:03:28.540 --> 00:03:31.505
Go back up to the very top.

00:03:31.505 --> 00:03:35.020
Scroll down to our list items and we can see we've added

00:03:35.020 --> 00:03:38.155
10 pixels of margin on the left and right,

00:03:38.155 --> 00:03:40.750
Your balance is up, go down to

00:03:40.750 --> 00:03:43.720
our header section and then we can set

00:03:43.720 --> 00:03:47.825
this 10 pixels of margin to apply only on the left-hand side.

00:03:47.825 --> 00:03:50.325
Save, and over to the browser.

00:03:50.325 --> 00:03:52.695
This now matches up at the both sides.

00:03:52.695 --> 00:03:55.230
Next, down to the overlay section,

00:03:55.230 --> 00:03:57.425
we don't have too much to do for this.

00:03:57.425 --> 00:04:00.400
We've already setup a responsive image in the background.

00:04:00.400 --> 00:04:06.085
All I'm going to do is the font size and make this section a little bit bigger.

00:04:06.085 --> 00:04:09.400
These are the class of text overlay.

00:04:09.400 --> 00:04:14.765
The font size. Let's give 2.2 rems a try.

00:04:14.765 --> 00:04:18.780
Make it a little bit bigger, 3.4.

00:04:18.780 --> 00:04:23.670
We can also increase the [inaudible] value to add some more space in the inside.

00:04:23.670 --> 00:04:26.440
Let's go for eight rems.

00:04:26.840 --> 00:04:30.245
Scrolling down to our Popular Courses section,

00:04:30.245 --> 00:04:34.630
what we need to do for this is to set the CSS display type to be

00:04:34.630 --> 00:04:36.460
equal to grid and this will give us

00:04:36.460 --> 00:04:39.730
this grid style layout which we see on the final version.

00:04:39.730 --> 00:04:44.605
To do this, we first need to select the parent's elements for all of our grid items.

00:04:44.605 --> 00:04:47.245
This has this class of courses.

00:04:47.245 --> 00:04:52.330
Then each individual section has the class of grid item.

00:04:52.370 --> 00:04:55.000
First of all, we go to the parents,

00:04:55.000 --> 00:04:57.880
which has the class of courses,

00:04:57.880 --> 00:05:01.360
and then we set the display type to be grid.

00:05:01.360 --> 00:05:05.560
If we reload the browser, we don't see any changes at the moment.

00:05:05.560 --> 00:05:09.100
This is because we need to tell the browser exactly how many columns and

00:05:09.100 --> 00:05:13.210
rows we want to use to create our grid for the columns.

00:05:13.210 --> 00:05:16.800
We need to add the grid template, columns property.

00:05:16.800 --> 00:05:19.615
The number of values which we add inside here

00:05:19.615 --> 00:05:22.955
determines how many columns we have across our page.

00:05:22.955 --> 00:05:25.890
The final version has three different columns.

00:05:25.890 --> 00:05:29.350
What we can do is to set three separate sizes,

00:05:29.350 --> 00:05:31.240
such as 200 pixels,

00:05:31.240 --> 00:05:35.150
100 pixels, and 300.

00:05:35.480 --> 00:05:39.250
Refresh. We can see here for our first column,

00:05:39.250 --> 00:05:41.770
we have the value of 200 pixels wide.

00:05:41.770 --> 00:05:43.285
We then have 100,

00:05:43.285 --> 00:05:46.285
and then 300, which we have set just here.

00:05:46.285 --> 00:05:49.450
We could also make these the same value too,

00:05:49.450 --> 00:05:51.580
or instead to make things even easier,

00:05:51.580 --> 00:05:54.055
we can make use of a repeat function.

00:05:54.055 --> 00:05:56.410
Then we can pass in two values.

00:05:56.410 --> 00:05:59.275
The first one is the number of columns which you want to

00:05:59.275 --> 00:06:04.150
create and then the second value is the width of each one of our columns.

00:06:04.150 --> 00:06:07.645
If we want each one of these columns to have an equal amount of width,

00:06:07.645 --> 00:06:09.825
we can set this to be 1fr.

00:06:09.825 --> 00:06:14.240
The fractional unit when used with the grid means that it will automatically

00:06:14.240 --> 00:06:19.045
calculate the width photos and make sure all of our three columns are equal.

00:06:19.045 --> 00:06:22.245
Refresh and this now takes effect.

00:06:22.245 --> 00:06:24.605
We can do exactly the same for

00:06:24.605 --> 00:06:27.380
grid template rows and we can set

00:06:27.380 --> 00:06:30.815
the exact height we want for each one of these sections.

00:06:30.815 --> 00:06:34.835
But we don't need to do this because if we just add the columns like we have here,

00:06:34.835 --> 00:06:38.120
each time we add a new section or a new grid item,

00:06:38.120 --> 00:06:41.305
this will then just automatically flow onto the next line.

00:06:41.305 --> 00:06:44.645
If you want some space in between each one of these grid items,

00:06:44.645 --> 00:06:47.910
what we can also add is the grid gap.

00:06:48.010 --> 00:06:52.920
Set this to any CSS value such as two rems.

00:06:53.180 --> 00:06:57.770
This grid gap will only appear in between each one of these grid items.

00:06:57.770 --> 00:07:01.535
It doesn't apply to the left and right or the top and bottom.

00:07:01.535 --> 00:07:04.640
If you wanted to apply some spacing around the outside edge,

00:07:04.640 --> 00:07:07.465
we do need to apply some margin or padding.

00:07:07.465 --> 00:07:10.475
This is what I'm going to do at the very bottom.

00:07:10.475 --> 00:07:13.820
It says some padding, just to the bottom of

00:07:13.820 --> 00:07:18.660
these elements and we'll keep it the same of two rems refresh.

00:07:18.760 --> 00:07:22.609
Next onto the styling for each one of these courses,

00:07:22.609 --> 00:07:25.835
and each one of these has the class of grid item.

00:07:25.835 --> 00:07:31.055
For this, place a border around each one of one pixel,

00:07:31.055 --> 00:07:36.510
a solid line, and the color of light gray.

00:07:37.090 --> 00:07:41.390
We can round the corners with some border-radius.

00:07:41.390 --> 00:07:43.550
Just a small value is fine,

00:07:43.550 --> 00:07:47.030
so let's try three pixels. This looks fine.

00:07:47.030 --> 00:07:51.140
What we want to do, we can see the border-radius at the bottom, but up on the top,

00:07:51.140 --> 00:07:55.640
we also want to match the rounded corners for this background image.

00:07:55.640 --> 00:07:58.550
Where we can do this is to again select

00:07:58.550 --> 00:08:04.040
the grid item and then apply to all images in this section.

00:08:04.040 --> 00:08:07.610
We can set the individual border-radius properties,

00:08:07.610 --> 00:08:11.360
and we can add in four individual values from the top-left,

00:08:11.360 --> 00:08:13.490
the top right, the bottom right,

00:08:13.490 --> 00:08:15.300
and the bottom left.

00:08:15.300 --> 00:08:18.775
First of all, the top-left of three pixels.

00:08:18.775 --> 00:08:21.400
Three pixels on the top right,

00:08:21.400 --> 00:08:25.195
and we don't want the bottom right or the bottom left to be rounded,

00:08:25.195 --> 00:08:28.670
so I set the last two values to be zero.

00:08:28.860 --> 00:08:33.810
Even this would round the corners on all four sides of our grid item.

00:08:33.810 --> 00:08:36.830
After this we have the sports section just below,

00:08:36.830 --> 00:08:41.285
and for this, we're going to make use of the flex direction.

00:08:41.285 --> 00:08:44.480
Paste the image alongside this text.

00:08:44.480 --> 00:08:47.735
If we go over to our index or html,

00:08:47.735 --> 00:08:52.380
and scroll down is full section has the class of sports,

00:08:54.010 --> 00:08:56.645
set the display time to be flex.

00:08:56.645 --> 00:08:59.705
Remember, when we're making use of the flex box,

00:08:59.705 --> 00:09:02.825
the default flex direction is going to be row.

00:09:02.825 --> 00:09:04.790
We don't need to include this,

00:09:04.790 --> 00:09:06.935
since this is default,

00:09:06.935 --> 00:09:10.790
this will automatically place our content in a row.

00:09:10.790 --> 00:09:12.380
If we shrink down the browser,

00:09:12.380 --> 00:09:17.850
we can see that this display type of flex will only apply on this large screen view.

00:09:18.250 --> 00:09:20.930
Look closely down at the bottom of the image,

00:09:20.930 --> 00:09:23.340
we can see this white line across here.

00:09:23.340 --> 00:09:27.715
This is something which can be [inaudible] if you're just starting out building websites.

00:09:27.715 --> 00:09:29.590
It can also be hard to diagnose,

00:09:29.590 --> 00:09:33.175
since the spacing is not been applied with any margin or padding.

00:09:33.175 --> 00:09:35.680
In fact, I've actually wrote up a blog post on this,

00:09:35.680 --> 00:09:37.950
and if we go over to my website,

00:09:37.950 --> 00:09:41.600
we can see exactly why this white spacing will apply.

00:09:41.600 --> 00:09:45.800
This image also has the same white space problem down at the bottom.

00:09:45.800 --> 00:09:50.600
This happens because by default a image elements is said to be inline.

00:09:50.600 --> 00:09:54.170
Inline elements will appear across the page by default.

00:09:54.170 --> 00:09:56.480
If we set up 10 different images,

00:09:56.480 --> 00:09:59.000
these would try to take up all of the available space on

00:09:59.000 --> 00:10:02.390
the same row and then move down to the next line.

00:10:02.390 --> 00:10:04.895
The opposite is a block level element,

00:10:04.895 --> 00:10:07.850
and this will automatically appear on a new line.

00:10:07.850 --> 00:10:10.910
The reason why the browser adds this white space onto the bottom

00:10:10.910 --> 00:10:14.150
of inline elements is because many inline elements,

00:10:14.150 --> 00:10:17.075
such as a span, can also contain text.

00:10:17.075 --> 00:10:19.010
If we consider this text,

00:10:19.010 --> 00:10:21.950
which you see just here with the letter P and also

00:10:21.950 --> 00:10:25.805
the G falls below the baseline of the rest of the text,

00:10:25.805 --> 00:10:28.685
and it's this bottom section which is called the descender,

00:10:28.685 --> 00:10:32.435
which is the reason why the browser will add some space in it down at the bottom.

00:10:32.435 --> 00:10:35.660
If the browser didn't add space at the bottom of the elements,

00:10:35.660 --> 00:10:39.785
the bottom of this P and also the G, maybe cut off.

00:10:39.785 --> 00:10:43.160
But in our case we're use an image rather than text,

00:10:43.160 --> 00:10:46.175
so we don't need to allow for this white space at the bottom.

00:10:46.175 --> 00:10:48.785
There's a couple of different ways we can get around these,

00:10:48.785 --> 00:10:53.120
and one of the simpler ways is to use set the display type to be block.

00:10:53.120 --> 00:10:56.749
This will override the inline type which we have by default,

00:10:56.749 --> 00:10:59.480
refresh, and now mean that the browser doesn't

00:10:59.480 --> 00:11:02.510
allow for the white space at the bottom of this element.

00:11:02.510 --> 00:11:04.940
This is just something to watch out for when you see

00:11:04.940 --> 00:11:08.135
some white space on the bottom of an image.

00:11:08.135 --> 00:11:12.080
Back to the media query and just below the sports section,

00:11:12.080 --> 00:11:15.590
we need to make sure that both the image and also the text area

00:11:15.590 --> 00:11:19.205
has an equal amount of space or to be more specific,

00:11:19.205 --> 00:11:20.855
a equal amount of width.

00:11:20.855 --> 00:11:24.320
To do this, we can grab our sports section,

00:11:24.320 --> 00:11:27.650
and the flex box has a flex property which will allow us to apply

00:11:27.650 --> 00:11:31.860
an equal amount of width to both of these child elements.

00:11:31.990 --> 00:11:34.430
First of all, grab the wrapper,

00:11:34.430 --> 00:11:36.170
which is the sports section,

00:11:36.170 --> 00:11:39.575
and then any div which immediately follows these elements,

00:11:39.575 --> 00:11:42.140
set the flex value to be equal to one,

00:11:42.140 --> 00:11:46.550
and since this flex value of one will apply to you both of our child div's,

00:11:46.550 --> 00:11:48.815
so both this one and also this one,

00:11:48.815 --> 00:11:51.650
you should now have an equal amount of space.

00:11:51.650 --> 00:11:54.590
If we only set the 1st div have the flex value of

00:11:54.590 --> 00:11:58.565
one and we set the 2nd div to have a flex value of 2,

00:11:58.565 --> 00:12:03.335
the 2nd div would try to take up twice the available space as the 1st div,

00:12:03.335 --> 00:12:05.900
but since we have these as equal values,

00:12:05.900 --> 00:12:08.855
they should not be reflected inside the browser.

00:12:08.855 --> 00:12:13.430
But still we see the image is slightly smaller than this section over on the right.

00:12:13.430 --> 00:12:16.620
Let's go into the developer tools.

00:12:17.370 --> 00:12:20.155
Select this section just here,

00:12:20.155 --> 00:12:24.265
and the reason why is this green area around the outside of this div.

00:12:24.265 --> 00:12:27.115
Select this and over to the computed area,

00:12:27.115 --> 00:12:31.755
we can see we have 20 pixels of padding applied to all four sides.

00:12:31.755 --> 00:12:35.790
To make this equal, we could remove this padding for the large screen.

00:12:35.790 --> 00:12:38.875
Section has the class of sports texts,

00:12:38.875 --> 00:12:41.260
so it could either remove this inside of

00:12:41.260 --> 00:12:45.910
the media query or we could scroll up to the original sports text section,

00:12:45.910 --> 00:12:49.125
and we could only apply this padding on the top and bottom.

00:12:49.125 --> 00:12:51.905
Get the value of zero on the left and right,

00:12:51.905 --> 00:12:55.715
refresh, and this now looks much more equal.

00:12:55.715 --> 00:12:58.745
Let's see how this looks on the small screen.

00:12:58.745 --> 00:13:03.410
This still looks fine since we've already centered detect using the flex box.

00:13:03.410 --> 00:13:06.935
The last section to take care of is the foot area.

00:13:06.935 --> 00:13:08.930
This is going to be pretty simple.

00:13:08.930 --> 00:13:11.240
We just need to grab the footer sections on

00:13:11.240 --> 00:13:15.330
ordered list and change the flex direction to be row.

00:13:15.460 --> 00:13:19.235
That footer, unordered list,

00:13:19.235 --> 00:13:22.110
flex directions to be equal to row,

00:13:22.840 --> 00:13:26.105
and add the space is equally across the page,

00:13:26.105 --> 00:13:28.520
we'll make use of justify content.

00:13:28.520 --> 00:13:33.590
Select space evenly, and there we go.

00:13:33.590 --> 00:13:36.620
We can also just check this looks good on the small screen.

00:13:36.620 --> 00:13:38.090
From the top, we still have all of

00:13:38.090 --> 00:13:41.870
the original CSS properties which we applied in the early videos.

00:13:41.870 --> 00:13:46.040
Now, if we stretch the browser to over 900 pixels wide,

00:13:46.040 --> 00:13:48.740
our content will now adjust to fit the largest screen.

00:13:48.740 --> 00:13:50.735
We have content side-by-side,

00:13:50.735 --> 00:13:53.525
we have a grid section for our courses,

00:13:53.525 --> 00:13:57.530
some larger text and also some additional space in too.

00:13:57.530 --> 00:14:00.935
Hope you've enjoyed building a responsive project,

00:14:00.935 --> 00:14:03.545
making use of the CSS media queries,

00:14:03.545 --> 00:14:07.970
responsive images, and also relative sizes for our texts.

00:14:07.970 --> 00:14:12.140
We have one more project to move on to where we're going to make use of a framework.

00:14:12.140 --> 00:14:15.090
I'll see you in the upcoming section.
