1

00:00:00,620  -->  00:00:05,070
In today's tutorial I will show you a few simple tricks that will help you find corrupt records and

2

00:00:05,070  -->  00:00:06,900
save you a lot of time.

3

00:00:06,900  -->  00:00:09,350
Let's start off by opening our Roth table.

4

00:00:09,750  -->  00:00:16,580
Now get rid of the top 1000 restriction and click execute at the bottom here.

5

00:00:16,590  -->  00:00:21,240
You can see that there are fifty thousand and four rows in the output.

6

00:00:21,570  -->  00:00:27,540
This is already suspicious because our daughter should only have 50000 rows.

7

00:00:27,600  -->  00:00:32,280
Now this window at the top is called your query window in your query window.

8

00:00:32,370  -->  00:00:34,140
Scroll to the bottom.

9

00:00:34,560  -->  00:00:37,940
Now we're going to make some adjustments after the last line.

10

00:00:37,990  -->  00:00:46,140
Add the following text where then copy column 46 with the square brackets.

11

00:00:46,710  -->  00:00:50,470
Then type in a knot like.

12

00:00:50,790  -->  00:00:57,960
And then just two single quotations one after the other with nothing in between.

13

00:00:57,960  -->  00:00:59,850
I will explain what we're doing in a second.

14

00:00:59,850  -->  00:01:07,980
For now let's add a second line or then copy the longitude.

15

00:01:08,450  -->  00:01:11,960
Then once again not like.

16

00:01:12,330  -->  00:01:22,440
And then a single quotation mark then the percent sign then a period then another percent sign and another

17

00:01:22,440  -->  00:01:24,600
single quotation.

18

00:01:24,600  -->  00:01:29,800
Congratulations you have just added a filter to your select statement.

19

00:01:29,850  -->  00:01:35,060
Now when you execute this script only two types of rows will be allowed in the output.

20

00:01:35,130  -->  00:01:41,580
They either have to be not empty in column 46 and this is specified by the first line you added or they

21

00:01:41,580  -->  00:01:45,780
have to not have a period in the long digit column.

22

00:01:45,780  -->  00:01:51,600
This condition is said by the second row as we saw in the previous tutorials Soros corruption often

23

00:01:51,600  -->  00:01:54,290
causes rows to shift either left or right.

24

00:01:54,300  -->  00:02:00,040
This handy little trick will help you pick up most of these rows that shifted in your daughter.

25

00:02:00,270  -->  00:02:04,530
The first condition will be true for rows that were shifted to the right and now the last column is

26

00:02:04,530  -->  00:02:05,580
not empty.

27

00:02:05,580  -->  00:02:10,890
The second condition will be true for rows and shifted to the left and now there is no period in the

28

00:02:10,890  -->  00:02:11,200
long.

29

00:02:11,200  -->  00:02:13,200
You should call them instead.

30

00:02:13,250  -->  00:02:15,090
It's now empty.

31

00:02:15,090  -->  00:02:17,270
Now let's execute the script.

32

00:02:17,640  -->  00:02:20,550
14 rows have been picked up.

33

00:02:20,640  -->  00:02:26,670
If you scroll through them you can see that they do look suspicious on the end here you can see how

34

00:02:26,670  -->  00:02:28,120
this method picked up these rows.

35

00:02:28,140  -->  00:02:30,020
Some of them had been shifted to the right.

36

00:02:30,030  -->  00:02:31,470
Some of them to the left.

37

00:02:31,470  -->  00:02:33,910
However not all of these rows had been shifted.

38

00:02:34,020  -->  00:02:38,490
Some simply had missing data in them like for example row 4.

39

00:02:38,730  -->  00:02:44,840
Try to figure out on your own which of these rows were actually corrupt and which had missing data.

40

00:02:44,850  -->  00:02:47,820
This is not the only way you can check for data issues.

41

00:02:47,820  -->  00:02:51,380
You can also look at other columns however prefer B.

42

00:02:51,390  -->  00:02:53,820
They have to be towards the end of the table.

43

00:02:53,820  -->  00:02:57,110
Also you can pass for other conditions and you will learn how to do that.

44

00:02:57,210  -->  00:03:03,330
When we talk about the basics of skill a simple example of when you would want to modify this query

45

00:03:03,660  -->  00:03:04,140
would be.

46

00:03:04,170  -->  00:03:10,880
If you want to keep the rows of missing daughter in your table and only exclude the corrupt DROs.

47

00:03:10,920  -->  00:03:15,570
Note that this neat little trick most certainly isn't a 100 percent guarantee that you will pick up

48

00:03:15,660  -->  00:03:17,080
all errors in your data.

49

00:03:17,100  -->  00:03:18,800
However it works like dynamite.

50

00:03:18,810  -->  00:03:22,400
You can use it to find the bulk of the errors and later in the course.

51

00:03:22,410  -->  00:03:27,630
I will show you how to surgically treat the remaining few to finish off now that we have found these

52

00:03:27,630  -->  00:03:29,540
errors what do we do with them.

53

00:03:29,820  -->  00:03:30,800
Well there are two options.

54

00:03:30,810  -->  00:03:35,190
You can either deal with them in a schedule or you can take a step back and deal with them in SSA as

55

00:03:35,460  -->  00:03:37,530
before the load happens.

56

00:03:37,530  -->  00:03:40,470
It all depends on your situation and your personal preference.

57

00:03:40,470  -->  00:03:45,250
I will show you the Sosias method and we will look at it in the next tutorial.
