1
00:00:00,550 --> 00:00:06,700
Hello and welcome back to the course on databases and the first tutorial we investigated our current

2
00:00:06,700 --> 00:00:10,850
database designed to check if rules conforming to the third normal form.

3
00:00:10,930 --> 00:00:14,490
We have two tables we've got the Customers table in the Transactions table.

4
00:00:14,620 --> 00:00:22,180
We learned that the Customers table which is this one does conform to the third normal form at the same

5
00:00:22,180 --> 00:00:22,470
time.

6
00:00:22,480 --> 00:00:28,390
We learned that the transactions table which is this one unfortunately doesn't conform to the third

7
00:00:28,390 --> 00:00:29,340
normal form.

8
00:00:29,380 --> 00:00:30,370
At this stage.

9
00:00:30,370 --> 00:00:39,040
So what are we going to do today is we going to change the design of our database to make sure that

10
00:00:39,280 --> 00:00:44,610
this table also conforms to the third normal form or meets the criteria of the third normal form.

11
00:00:44,800 --> 00:00:52,900
And what that will do is it will make sure that the whole database while the whole schema is in third

12
00:00:52,900 --> 00:00:53,830
normal form.

13
00:00:53,920 --> 00:00:57,470
So there we go we've got an exciting challenge ahead.

14
00:00:57,700 --> 00:01:02,680
But the good news is that we already know what we need to do.

15
00:01:02,680 --> 00:01:10,270
We already know what's part of this table is actually is actually preventing it from passing their normal

16
00:01:10,270 --> 00:01:11,120
form criteria.

17
00:01:11,230 --> 00:01:18,640
We know that we've got the item code here and then we've got the item description and the retail price

18
00:01:18,640 --> 00:01:24,340
of the item we established last time that these two columns or each one of these columns.

19
00:01:24,340 --> 00:01:27,530
So here we've got the candidate key and then we've got another candidate again.

20
00:01:27,550 --> 00:01:33,820
So we established that description is not directly dependent on this candidate and is not directly depend

21
00:01:33,820 --> 00:01:34,600
on this candidate.

22
00:01:34,630 --> 00:01:41,710
It is actually transitively dependent on each of those candidate keys through the item code like that.

23
00:01:41,740 --> 00:01:50,770
So the item code is what dictates the description even though indeed each one of these is one of these

24
00:01:52,450 --> 00:01:57,210
rows has a has an item description and a retail price.

25
00:01:57,220 --> 00:02:01,960
But in reality there's a transitive dependency description depends on the candidate keys through the

26
00:02:01,960 --> 00:02:07,160
item and retail price depends on the candidate keys through the item as well.

27
00:02:07,180 --> 00:02:10,230
So item dictates these two values.

28
00:02:10,270 --> 00:02:17,320
So what we need to do is basically separate out these columns into a separate table where item will

29
00:02:17,320 --> 00:02:18,940
be the primary key.

30
00:02:18,940 --> 00:02:22,760
So basically we'll have item description and the price item description price and so on.

31
00:02:22,780 --> 00:02:27,820
And then in this table we will keep the item column on the out of these three columns and that will

32
00:02:28,190 --> 00:02:34,180
item will be the foreign key here for us to connect or to join to that new table that we're going to

33
00:02:34,180 --> 00:02:37,750
create where the item information is going to be stored.

34
00:02:37,750 --> 00:02:40,210
So that's what we've got ahead of us for today.

35
00:02:40,210 --> 00:02:43,160
And without further ado let's get started.

36
00:02:43,420 --> 00:02:45,610
So what are we going to do.

37
00:02:45,610 --> 00:02:53,680
Well we're going to separate the transitive dependencies so let's write that in the comment Tran of

38
00:02:54,910 --> 00:03:05,460
div pen and CS need to be separated into their own table.

39
00:03:05,460 --> 00:03:11,100
All right so we're going to use the temporary table again and that's why it's a good thing that we removed

40
00:03:11,100 --> 00:03:19,400
it so we can use the same name and we can say create table by the way before I proceed the process here

41
00:03:19,410 --> 00:03:24,180
is going to be very similar to what we did to modify the second normal form.

42
00:03:24,270 --> 00:03:28,950
Now that we know what needs to be done it's going to be very very similar to what we did or we're here

43
00:03:28,950 --> 00:03:30,400
for the second normal form.

44
00:03:30,420 --> 00:03:37,110
So if you'd like to practice then I invite you to pose this video and try to create this code on your

45
00:03:37,110 --> 00:03:43,530
own and see if you can indeed separate out these three columns into their own table and get rid of the

46
00:03:43,530 --> 00:03:48,870
duplicates and so on and then check that that table also conforms to a third normal form and then play

47
00:03:48,870 --> 00:03:55,470
the video and see how I'm going to go about accomplishing this task and compare your results to the

48
00:03:55,470 --> 00:03:59,980
results we get in the tutorial and that'll be a good opportunity for your practice.

49
00:04:00,120 --> 00:04:08,580
But otherwise I'm just going to continue with this now and feel free to stick around and see how I'm

50
00:04:08,580 --> 00:04:12,640
going to come up with the solution to this challenge.

51
00:04:12,930 --> 00:04:19,810
All right so here we are going to create the timber table and we're going to say create table as select.

52
00:04:20,010 --> 00:04:32,340
And we just want to select these columns into our TMB table item or item Qamar description Khama retail

53
00:04:32,910 --> 00:04:41,180
price and where it's like the from from transactions semicon.

54
00:04:41,400 --> 00:04:44,450
So if I run this part.

55
00:04:44,880 --> 00:04:45,830
OK.

56
00:04:45,840 --> 00:04:50,960
Tran is actions plural.

57
00:04:51,030 --> 00:04:51,630
My bad.

58
00:04:51,630 --> 00:04:52,390
So there we go.

59
00:04:52,470 --> 00:04:55,120
If we run this part you'll see that beef's.

60
00:04:55,200 --> 00:04:57,250
To those comma columns.

61
00:04:57,490 --> 00:05:02,490
Now if we just run this whole query we're going to put them into a table which is going to copy this

62
00:05:02,550 --> 00:05:03,170
as the comment.

63
00:05:03,160 --> 00:05:08,040
So right now we have three thousand four hundred and fifty five rows in the item table.

64
00:05:08,040 --> 00:05:14,550
But as you can imagine that's way too many because in our items table we have duplicate because in our

65
00:05:14,550 --> 00:05:19,380
transactions table we had several an item could have been purchased many times by many different customers

66
00:05:19,380 --> 00:05:23,090
at different times different time stamps.

67
00:05:23,250 --> 00:05:28,690
Therefore that table had duplicate items and therefore this table has to be good.

68
00:05:28,710 --> 00:05:30,540
So let's just check.

69
00:05:30,690 --> 00:05:36,120
It's always a good idea to check your table to impy that you've just created.

70
00:05:36,190 --> 00:05:37,040
Let's have a look.

71
00:05:38,480 --> 00:05:41,290
That it is indeed created the way we wanted it.

72
00:05:41,290 --> 00:05:41,540
Yup.

73
00:05:41,540 --> 00:05:46,380
So if you just scroll through these you will inevitably find duplicate So there is a duplicate code

74
00:05:46,460 --> 00:05:48,630
and it's actually got even the same code.

75
00:05:49,020 --> 00:05:53,900
Sometimes you'll find that the description is the same but the items are different.

76
00:05:53,900 --> 00:05:54,160
Right.

77
00:05:54,170 --> 00:06:00,260
So that's that's normal that means you know there's two different types of scarves or two different

78
00:06:00,260 --> 00:06:01,880
types of T-shirts.

79
00:06:01,910 --> 00:06:02,330
That's fine.

80
00:06:02,330 --> 00:06:06,300
But in this case we see that the description is the same right.

81
00:06:06,310 --> 00:06:08,020
Those are the items the same.

82
00:06:08,180 --> 00:06:12,560
The description is the same and the prices is completely duplicated.

83
00:06:12,740 --> 00:06:16,870
So we need to get rid of those and we just want a list like a price list.

84
00:06:16,880 --> 00:06:24,550
Basically we need a price list here and instead of a extract from the transactions list.

85
00:06:24,860 --> 00:06:26,940
So we're going to continue with that.

86
00:06:26,960 --> 00:06:32,420
And here we're going to say two and why why are we doing this.

87
00:06:32,450 --> 00:06:38,800
Because we want to make the new table one enough so we want to put in first normal form.

88
00:06:38,990 --> 00:06:45,420
And that's why we want to remove duplicate rows.

89
00:06:45,950 --> 00:06:46,250
OK.

90
00:06:46,260 --> 00:06:54,010
So create a table tray table and you want to call it what to call this one we'll call it items as.

91
00:06:54,260 --> 00:06:57,140
And same thing as we did previously.

92
00:06:57,140 --> 00:07:01,190
Right so same thing as we did here.

93
00:07:01,190 --> 00:07:03,320
Select Distinct from Tempe.

94
00:07:03,330 --> 00:07:09,740
Right so we're selecting the distinct values from the same table select distinct

95
00:07:13,060 --> 00:07:17,400
distinct store from tempy.

96
00:07:17,530 --> 00:07:25,240
So if you just run this you'll get the distinct items so you can see 126 rows right.

97
00:07:25,450 --> 00:07:34,430
So far on this we got a hundred and twenty six rows so there's only 126 items on sale at the store.

98
00:07:34,700 --> 00:07:47,180
And now we're just going to check read say select star for all items I mean call on are on this you'll

99
00:07:47,180 --> 00:07:48,490
see that now.

100
00:07:48,700 --> 00:07:50,260
126 rows.

101
00:07:50,420 --> 00:07:55,460
So if you go through here you'll see that it doesn't have the book you've got the T-shirt she's a blanket

102
00:07:55,460 --> 00:08:02,030
sweater you will find cases when you've got the same description as we discussed like baby quilt baby

103
00:08:02,030 --> 00:08:02,620
quilt.

104
00:08:02,750 --> 00:08:06,810
But they have different item codes.

105
00:08:06,860 --> 00:08:08,240
And here the price is different.

106
00:08:08,240 --> 00:08:09,830
It's a very expensive baby quilt.

107
00:08:09,850 --> 00:08:13,060
$100 for a baby quilt.

108
00:08:13,790 --> 00:08:15,710
I probably I don't know.

109
00:08:15,710 --> 00:08:20,350
I don't know much about baby clothes but that sounds expensive $100.

110
00:08:20,470 --> 00:08:20,760
OK.

111
00:08:20,780 --> 00:08:24,800
So we've got the table with the items.

112
00:08:24,800 --> 00:08:31,570
And now the last thing that we want to do or one of the final things that we want to do is we want to

113
00:08:31,570 --> 00:08:33,760
go back to that table.

114
00:08:33,760 --> 00:08:39,150
So basically before we go back to the table to the transactions they will remove these rolls.

115
00:08:39,200 --> 00:08:41,230
There's a switch which in which order we did it previously.

116
00:08:41,230 --> 00:08:48,290
So we've we've done this now we just want to let's go ahead and make sure that this table that we have.

117
00:08:48,320 --> 00:08:53,770
Right so let's make sure that this table that we have that the items table is in the third normal form.

118
00:08:53,770 --> 00:08:55,660
So I'm going to refresh this.

119
00:08:55,660 --> 00:09:00,700
And so we have four tables we're going to drop the tempy table so we don't need to worry about that

120
00:09:01,000 --> 00:09:04,930
very check that the customers table is indeed in third normal form so that's good.

121
00:09:04,990 --> 00:09:06,980
No transitive dependencies there.

122
00:09:07,210 --> 00:09:11,260
We're still working on the transaction stable but so far we've come up with the item stable so let's

123
00:09:11,260 --> 00:09:15,400
go ahead and while we are here check that it is in third normal form.

124
00:09:15,400 --> 00:09:21,220
Just to check that check it off and make sure that so we don't have to come back to it later.

125
00:09:21,220 --> 00:09:21,480
All right.

126
00:09:21,480 --> 00:09:27,470
So in the items table what is our what are all kind of the keys.

127
00:09:27,490 --> 00:09:34,620
So we've only got one kind of ticket item here because indeed the item codes are unique in this table.

128
00:09:34,910 --> 00:09:42,790
And so you won't find to repeating item costs you on that same time you could find two repeating descriptions

129
00:09:42,790 --> 00:09:46,200
you could find repeating retail prices.

130
00:09:46,310 --> 00:09:47,530
Therefore this is our candidate.

131
00:09:47,590 --> 00:09:53,710
And no other combination here so description plus retail price.

132
00:09:53,710 --> 00:09:59,260
Actually if you take description price retail price that that could be a close call right that could

133
00:09:59,260 --> 00:10:02,110
be if you've got to think about that.

134
00:10:02,120 --> 00:10:10,320
So if you've got an item right the item might change but what if.

135
00:10:10,330 --> 00:10:19,480
So if you know the description and the retail price could they be could they have.

136
00:10:19,690 --> 00:10:20,780
Could they be.

137
00:10:21,310 --> 00:10:22,240
If you take those too.

138
00:10:22,240 --> 00:10:23,570
Could they be a candidate.

139
00:10:23,580 --> 00:10:30,010
Q Right so the question is if you take the description in the retail price does that mean that based

140
00:10:30,010 --> 00:10:39,670
on those two you can you can identify or you you can uniquely tell what the item code will be.

141
00:10:39,800 --> 00:10:47,350
Oh that's a very interesting question because basically to paraphrase it can we have two items two different

142
00:10:47,350 --> 00:10:53,960
items two different item codes that have the same description and the same retail price.

143
00:10:54,520 --> 00:10:57,670
So it depends it depends on the way your store operates.

144
00:10:57,670 --> 00:11:06,730
If you have let's say if every time you have a new item code right then either the description has to

145
00:11:06,730 --> 00:11:11,520
change or the retail price has to or his description has to be different or retail prices to boot.

146
00:11:11,530 --> 00:11:17,410
But when you think about it you could let's say you could have a handbag for $114 77 cents under this

147
00:11:17,410 --> 00:11:23,340
code and you could have another handbag under the under this under a different code.

148
00:11:23,350 --> 00:11:29,920
Under this say this code you can have a handbag for $114 and 77 cents again.

149
00:11:29,990 --> 00:11:30,300
Right.

150
00:11:30,310 --> 00:11:32,350
But they would be different handbags right.

151
00:11:32,410 --> 00:11:35,760
So one could be from Gucci and one could be from Louis Vuitton.

152
00:11:35,980 --> 00:11:43,610
And so the description is the same the price is the same but the item codes are different.

153
00:11:43,630 --> 00:11:47,230
So makes sense just through that example.

154
00:11:47,230 --> 00:11:53,100
We can tell that description at retail price the combination of these two fields is not a candidate.

155
00:11:53,440 --> 00:11:55,850
So a bit of thinking went into that.

156
00:11:56,290 --> 00:11:58,900
I hope I hope that was a good good explanation.

157
00:11:58,900 --> 00:12:02,570
So basically the item is definitely a candidate key.

158
00:12:02,650 --> 00:12:10,930
These two together do not form a candidate key because two different items could still have the same

159
00:12:11,730 --> 00:12:15,880
hand by hand because have the same description and retail price.

160
00:12:16,000 --> 00:12:16,210
Right.

161
00:12:16,210 --> 00:12:18,200
So there we go.

162
00:12:18,250 --> 00:12:20,460
We know that this is our candidate key.

163
00:12:20,740 --> 00:12:21,390
These are.

164
00:12:21,460 --> 00:12:24,860
So this is our prime attribute these are non-prime attributes.

165
00:12:24,970 --> 00:12:30,490
So this tables is indeed in first normal form because there is no duplicates and there are no cells

166
00:12:30,490 --> 00:12:36,370
that contain more than one value so all values are atomic.

167
00:12:36,370 --> 00:12:41,950
So this is this sounds like one value even though this slash in between is just a description that's

168
00:12:41,950 --> 00:12:47,980
how description is been written up then is this table in second normal form so basically when to check

169
00:12:47,980 --> 00:12:55,000
that each one of the non-prime attributes depends on the candidate key or the can.

170
00:12:55,030 --> 00:13:02,830
Or each one of the candidate keys in full or depends on the whole of each of the candidate keys.

171
00:13:02,830 --> 00:13:04,730
Right so here we only have one candidate key.

172
00:13:04,750 --> 00:13:08,930
So you cannot and it's consist of only one column.

173
00:13:09,010 --> 00:13:15,640
So you cannot split it up and so therefore by default each one of these columns indeed depends on this

174
00:13:16,060 --> 00:13:21,240
candidate key in full in full or wholly or fully depends on this candidate.

175
00:13:21,250 --> 00:13:27,550
So this table is in second order form and to check a third or form we need to check that there is no

176
00:13:27,550 --> 00:13:28,900
transitive dependencies.

177
00:13:28,900 --> 00:13:32,440
So the description then an item or does depend on item through price.

178
00:13:32,440 --> 00:13:38,900
No it depends the require an item and the same thing for price does prize depend on description on item

179
00:13:38,900 --> 00:13:43,790
through description or doesn't depend on item directly so depends on item directly but the way to think

180
00:13:43,790 --> 00:13:51,430
about it is basically if I say all right so this price is fixed 9:29 What if I change the description

181
00:13:51,440 --> 00:13:52,010
right.

182
00:13:52,010 --> 00:13:53,990
Will this price have to change.

183
00:13:53,990 --> 00:13:54,950
Well not necessarily.

184
00:13:54,950 --> 00:13:57,230
You could have sheet's a 29 it was.

185
00:13:57,270 --> 00:14:05,840
You have a blanket at 29 90 a sweater 29 90 so the price doesn't depend on the description there's no

186
00:14:05,840 --> 00:14:06,930
connection between them.

187
00:14:06,950 --> 00:14:08,570
They both just depend on it.

188
00:14:08,780 --> 00:14:15,100
So this table is in three N.F. the N.F. confirm it.

189
00:14:15,100 --> 00:14:16,150
Great.

190
00:14:16,150 --> 00:14:20,110
And finally we just need to finish off with our transactions table.

191
00:14:20,110 --> 00:14:37,660
So what we need to do is now remove the extracted rows from the Transactions table but keep the foreign

192
00:14:37,900 --> 00:14:42,330
key item right so we want to keep this.

193
00:14:42,430 --> 00:14:50,200
If we look at the transactions table there it is once you remove remove these Toro's basically and just

194
00:14:50,200 --> 00:14:55,170
keep this one so we know what items purchased so we don't lose all of the information about it.

195
00:14:55,270 --> 00:15:04,510
So simple alter statement alter table transactions drop column.

196
00:15:04,570 --> 00:15:16,490
So we're going to have description and cheer up call them retail price semi-colon.

197
00:15:16,680 --> 00:15:18,690
If you're on this.

198
00:15:18,790 --> 00:15:25,510
There we go so we've dropped those columns and now if we select start from transactions

199
00:15:29,870 --> 00:15:34,180
you can see that now this table is much more simplified.

200
00:15:34,430 --> 00:15:39,740
So you've got it's just the transaction ID the time timestamp when it occurred.

201
00:15:39,740 --> 00:15:41,910
The customer ID right.

202
00:15:41,960 --> 00:15:43,110
So this is it.

203
00:15:43,190 --> 00:15:48,890
This is also a combination of these two columns are cabinet key and you've got the item and then in

204
00:15:48,890 --> 00:15:56,720
addition to that one thing that we need to do is drop table t MP Kallen and rid of the tempy table.

205
00:15:56,720 --> 00:15:58,250
So if we refresh that.

206
00:15:58,430 --> 00:16:00,890
So now we have three tables.

207
00:16:01,100 --> 00:16:06,860
We know that the transaction table indeed conforms to the third normal form because we've removed the

208
00:16:06,860 --> 00:16:08,720
columns that prevented that from happening.

209
00:16:08,720 --> 00:16:10,100
So we don't even need to check.

210
00:16:10,310 --> 00:16:18,560
We can say three N.F. confirmed and we also know that the rest of the tables We've already checked that

211
00:16:18,560 --> 00:16:20,300
they conform to the third normal form.

212
00:16:20,300 --> 00:16:26,180
So basically we have a database design where all of the tables conform to the third normal form so therefore

213
00:16:26,510 --> 00:16:30,060
this whole database is now in the third normal form.

214
00:16:30,110 --> 00:16:36,470
And as you can see right away we've saved so much space so much processing time and so much potential

215
00:16:36,470 --> 00:16:37,010
for error.

216
00:16:37,010 --> 00:16:43,000
We've removed that by removing those columns which through the process of normalization.

217
00:16:43,010 --> 00:16:49,970
So we've now normalized our database and we've got these new to your table so if you ever are curious

218
00:16:49,970 --> 00:16:54,620
about a certain transaction you want to find out more about this transaction and you want to know the

219
00:16:54,620 --> 00:17:02,570
customer ID then you just basically take this table and you perform a join like join this table to the

220
00:17:03,200 --> 00:17:08,960
customers table and you will be able to match it up to this customer I.D. And if you want information

221
00:17:08,960 --> 00:17:13,520
about the items you join this table to the items table and you'll get information.

222
00:17:13,520 --> 00:17:20,360
So as you can see as we discussed now it's easier to write into the stable.

223
00:17:20,390 --> 00:17:25,490
But reading is become harder so previously if you just wanted to read information about a row in the

224
00:17:25,490 --> 00:17:31,850
original transaction table you just select just read that redoes roll right from that table because

225
00:17:31,840 --> 00:17:35,810
all of the information is right there and that is good for oil a.p.

226
00:17:35,840 --> 00:17:38,420
Online analytics processing.

227
00:17:38,660 --> 00:17:46,250
But if you wanted to OLTP then writing is more important because you want to save time and increase

228
00:17:46,250 --> 00:17:47,890
efficiency during writing.

229
00:17:48,050 --> 00:17:55,400
So therefore now in this table it's very easy to write the rows because you only need to write four

230
00:17:55,400 --> 00:18:01,200
columns instead of much greater amount of columns that we had previously.

231
00:18:01,430 --> 00:18:05,850
So hopefully you enjoyed these tutorials on normalization.

232
00:18:05,870 --> 00:18:11,610
It is quite a lengthy process but nevertheless it is rewarding and it is fun.

233
00:18:11,630 --> 00:18:16,810
It's fun to perform these investigations and around this around this code.

234
00:18:16,940 --> 00:18:22,520
So on that note we've achieved our results with normalized the database and I look forward to seeing

235
00:18:22,520 --> 00:18:23,290
you next time.

236
00:18:23,300 --> 00:18:24,980
Until then happy analyzing.
