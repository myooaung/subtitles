WEBVTT
1
00:00:00.300 --> 00:00:06.480
Hello and welcome back to the course on databases in the previous tutorial we investigated this transaction

2
00:00:06.480 --> 00:00:13.520
stable to find out if it's an second normal form and what we found was that it actually isn't in second

3
00:00:13.520 --> 00:00:20.370
normal form that there are some columns which are first names or names shipping state and loyalty discount

4
00:00:20.820 --> 00:00:26.970
which don't conform to the definition of the second or form and specifically we have this candidate

5
00:00:26.970 --> 00:00:30.210
key stamp Plus customer ID.

6
00:00:30.300 --> 00:00:37.410
These two columns together either a candidate key and each one of these columns on each one of them

7
00:00:37.650 --> 00:00:43.030
doesn't or none of them depends wholly or fully on this candidate.

8
00:00:43.060 --> 00:00:48.510
So if any one of these four columns you take for example first name it only depends on customer ID doesn't

9
00:00:48.510 --> 00:00:51.180
depend on a timestamp in seconds.

10
00:00:51.180 --> 00:00:56.670
So therefore these four columns need to be moved to a separate table and that's exactly what we're going

11
00:00:56.670 --> 00:00:57.560
to be doing today.

12
00:00:57.690 --> 00:01:01.470
We're going to be bringing our database into second normal form.

13
00:01:01.470 --> 00:01:03.420
So we're very excited Tauriel ahead.

14
00:01:03.510 --> 00:01:05.850
Let's get started right away.

15
00:01:06.090 --> 00:01:06.360
All right.

16
00:01:06.360 --> 00:01:17.320
So today we are going to separate customer specific columns and how do we do that.

17
00:01:17.340 --> 00:01:23.970
Well first of all we're going to write a short select statement we're going to say select and then we'll

18
00:01:23.970 --> 00:01:35.580
get a customer ID then we're going to say call my first name which is going to list all those columns

19
00:01:35.640 --> 00:01:41.040
including the customer ID card because in our resulting table we want this customer as you call him

20
00:01:41.040 --> 00:01:46.650
because that's going to be our primary key in that new table and it's going to be our foreign key in

21
00:01:46.650 --> 00:01:47.930
this current table.

22
00:01:47.940 --> 00:01:49.040
So go ahead and do that.

23
00:01:49.320 --> 00:01:58.410
All right so first name Qamar who's going to be surname coma.

24
00:01:58.510 --> 00:02:01.970
Actually First we don't need a capital.

25
00:02:02.050 --> 00:02:08.470
In fact in this specific dataset or database we are just dealing with non-capital So we just give the

26
00:02:08.520 --> 00:02:14.540
Wal-Mart capital and also this underlining sometimes gets in the way Sachiko to options.

27
00:02:14.710 --> 00:02:23.950
Text Editor transactor GYO Intellisense and then well this should be off and that should take care of

28
00:02:23.950 --> 00:02:24.530
it.

29
00:02:24.910 --> 00:02:27.210
All right so let's try that again.

30
00:02:27.220 --> 00:02:28.600
Will underline errors.

31
00:02:28.630 --> 00:02:29.190
Yes.

32
00:02:29.230 --> 00:02:33.220
And then we'll go back to options and take it off.

33
00:02:33.220 --> 00:02:34.470
So hopefully that takes care of it.

34
00:02:34.480 --> 00:02:37.100
All right there we go so surname.

35
00:02:37.360 --> 00:02:48.440
Then we want shipping state shipping state and we want loyalty discounts.

36
00:02:48.520 --> 00:02:58.890
So if we just select all of these all of us in each sector from from transactions that's how table.

37
00:02:58.900 --> 00:03:04.780
So if we just run this code will select those columns and now we want to put them into a temporary table

38
00:03:04.780 --> 00:03:11.560
so we'll just create a temporary table for us which will be displayed here just now so if we run that

39
00:03:11.830 --> 00:03:13.870
select into fraud.

40
00:03:13.870 --> 00:03:16.680
So this is a select into statement.

41
00:03:17.230 --> 00:03:20.310
Basically it's like just the way we created it right.

42
00:03:20.330 --> 00:03:26.740
Right select from and then in-between you add the into the MP or whatever other name of the table you

43
00:03:26.740 --> 00:03:29.590
want to specify.

44
00:03:29.590 --> 00:03:30.580
So there we go.

45
00:03:30.740 --> 00:03:39.840
That's three thousand four hundred fifty five rose and if we refresh your you will see that we have

46
00:03:39.840 --> 00:03:41.170
this tempy table.

47
00:03:41.340 --> 00:03:48.060
So let's go ahead and selects our from Tempe just for fun.

48
00:03:48.950 --> 00:03:55.070
You'll see that here we've got this temporary table of all not just these specific columns that we wanted

49
00:03:55.070 --> 00:03:57.210
to separate have been separate actually.

50
00:03:57.210 --> 00:04:00.490
Customer ID should be like that.

51
00:04:01.130 --> 00:04:05.690
But it's too late now and it doesn't really matter because this is a temporary tables leave it as it

52
00:04:05.690 --> 00:04:06.530
was.

53
00:04:06.530 --> 00:04:06.860
All right.

54
00:04:06.860 --> 00:04:12.440
So temporary table is there what we want to do with this table is we want to remove duplicates and what

55
00:04:12.440 --> 00:04:12.860
does that mean.

56
00:04:12.860 --> 00:04:16.850
Well you'll see that here we got three thousand four hundred fifty five Rosewell.

57
00:04:16.850 --> 00:04:22.070
We know that we only have just over 900 customers so obviously there's lots of duplicates in here.

58
00:04:22.070 --> 00:04:22.870
And why is that.

59
00:04:23.000 --> 00:04:27.530
Well the reason is because where did this data come from it came from the Transactions table and all

60
00:04:27.530 --> 00:04:34.940
we did is we just just extracted these specific columns these ones including loyalty discount and obviously

61
00:04:34.940 --> 00:04:41.600
here sometimes customers purchase several times and therefore they will come up in this table many times.

62
00:04:41.630 --> 00:04:45.230
We just don't have the information about the transactions anymore just the customers.

63
00:04:45.230 --> 00:04:47.360
And therefore now we need to remove duplicate.

64
00:04:47.360 --> 00:04:49.500
So let's go ahead and do that.

65
00:04:49.970 --> 00:04:52.640
Remove duplicates.

66
00:04:52.790 --> 00:04:54.880
I want to say select this thing.

67
00:04:54.960 --> 00:05:02.300
So we were worked of distinct a little bit into customers that's going to be our actual table from Tempe.

68
00:05:02.520 --> 00:05:11.790
So this is a handy little trick on how to separate unique color unique rows out of a table so we're

69
00:05:11.790 --> 00:05:14.630
going to run this and see 942.

70
00:05:14.700 --> 00:05:17.640
So that's how many customers we have.

71
00:05:17.730 --> 00:05:27.160
And now if you look at select star from customers you'll see that you only each one of these roses uniques

72
00:05:27.260 --> 00:05:27.810
doesn't come.

73
00:05:27.810 --> 00:05:29.400
They don't come up several times.

74
00:05:29.470 --> 00:05:31.030
And why is this a handy little trick.

75
00:05:31.030 --> 00:05:38.020
Because what we did here is so separating the columns or what we want to do we already from this very

76
00:05:38.020 --> 00:05:45.190
start know that we want to take out just the unique Kolbe's but also to do it right away and one statement

77
00:05:45.190 --> 00:05:46.720
will be quite a complex query.

78
00:05:46.720 --> 00:05:53.920
So the handy little trick that we use here is we first select the columns that we want to separate out

79
00:05:53.950 --> 00:06:00.460
right into a temporary table and then from that temporary table it's very easy to select the distinct

80
00:06:00.490 --> 00:06:01.260
rows.

81
00:06:01.360 --> 00:06:05.830
Then we just say Select Distinct start from P into customers.

82
00:06:05.830 --> 00:06:10.610
So if we wanted like we could have used the table customers here.

83
00:06:10.690 --> 00:06:16.900
But instead we're putting in a temporary table transitional table for the data it goes into a temporary

84
00:06:16.900 --> 00:06:22.840
table and then from the temporary table it goes into the customers table and is ready is exactly as

85
00:06:22.840 --> 00:06:23.700
we want it to be.

86
00:06:23.890 --> 00:06:25.750
So that is a handy little trick.

87
00:06:25.750 --> 00:06:33.990
Now we have this customer table and our final step here is we need to check if it's in the second normal

88
00:06:33.990 --> 00:06:39.790
form because for this whole database to be in second form every single table has to be a second order

89
00:06:39.850 --> 00:06:42.410
form and we're going into while we're here we're going to check that.

90
00:06:42.520 --> 00:06:47.520
But before we proceed with that I wanted to draw your attention to this tempy table.

91
00:06:47.670 --> 00:06:53.710
Is just a good example of a table that is not in first normal form because we know that this table contains

92
00:06:53.710 --> 00:06:54.210
duplicates.

93
00:06:54.210 --> 00:06:59.200
We're not going to look for them now but we know that this table contains duplicates and therefore it

94
00:06:59.240 --> 00:07:01.980
doesn't conform to the condition of first initial form.

95
00:07:01.980 --> 00:07:07.770
So if you were looking for an example of a table that's not in first normal form it's this one here

96
00:07:07.780 --> 00:07:11.710
selects star or the tempy table that we have is not enforceable.

97
00:07:12.010 --> 00:07:14.130
But anyway let's get back to our customers table.

98
00:07:14.140 --> 00:07:17.950
We want to check if it's actually in second normal form or not.

99
00:07:17.950 --> 00:07:18.600
How do we do that.

100
00:07:18.610 --> 00:07:21.860
Well we really know how to check.

101
00:07:21.910 --> 00:07:31.510
Second all are form we need to check that every single non-prime attribute tells us a fact about the

102
00:07:31.510 --> 00:07:34.440
whole of every single candidate key.

103
00:07:34.870 --> 00:07:38.690
So basically it depends fully on every single candidate.

104
00:07:38.830 --> 00:07:41.830
Well the thing here is that we only have one candidate.

105
00:07:41.930 --> 00:07:47.140
Well we know that this is our primary key in this table because it's uniquely identifies every single

106
00:07:47.140 --> 00:07:52.350
customer is a customer ID and so it is by definition a candidate key.

107
00:07:52.420 --> 00:07:55.010
The question is are there any other candidate keys in this table.

108
00:07:55.030 --> 00:07:58.000
Well Ken first name bites how big can it get.

109
00:07:58.060 --> 00:08:06.130
No it cannot because separate is different customers can have the same name in fact different customers

110
00:08:06.130 --> 00:08:08.530
can have the same name and the same surname.

111
00:08:08.620 --> 00:08:13.390
They can even have the same name surname and live in the same state and have the same loyalty discount

112
00:08:14.050 --> 00:08:20.110
and even if it's not the case this is an important point even if it's not the case in your specific

113
00:08:20.110 --> 00:08:26.850
database so let's say your database had only had only me know and only five rows like that.

114
00:08:26.950 --> 00:08:30.720
Right so here you'd be able to say oh actually first name is unique.

115
00:08:31.170 --> 00:08:33.180
No we know two customers have the same first name.

116
00:08:33.190 --> 00:08:38.740
What would you need to think well the way you need to think about it is hypothetically right.

117
00:08:38.740 --> 00:08:45.400
If this database keeps growing if more data is added to this table can first name be the same for two

118
00:08:45.400 --> 00:08:46.220
customers.

119
00:08:46.270 --> 00:08:50.490
It's about the design not actually what you have in the table.

120
00:08:50.500 --> 00:08:58.680
And by design this table is used to service customers of an organization and it can easily happen to

121
00:08:58.700 --> 00:09:02.080
them have the same person and they can have the same customer ID because that's the way the table is

122
00:09:02.080 --> 00:09:02.810
designed.

123
00:09:03.010 --> 00:09:05.050
But first they've started him shipping Santigold discount.

124
00:09:05.050 --> 00:09:10.040
They can all happen to be the same for 32 different customers.

125
00:09:10.090 --> 00:09:15.790
So therefore this these four columns together do not make up a candidate key and therefore not know

126
00:09:15.790 --> 00:09:19.070
combination of these columns make up a candidate key as well.

127
00:09:19.090 --> 00:09:27.100
So that means we only have one candidate key here customer ID and we have four non-prime attributes

128
00:09:27.290 --> 00:09:29.360
first name surname ship said loyalty discount.

129
00:09:29.530 --> 00:09:35.370
And because our candidate key consists of only one column we can split it up.

130
00:09:35.380 --> 00:09:43.360
That means that indeed every single one of these non-prime attributes depends fully on the on the candidate

131
00:09:43.360 --> 00:09:49.130
key and therefore we have confirmed that this table is indeed in second normal form.

132
00:09:49.140 --> 00:09:51.640
So to an F confirmed.

133
00:09:51.640 --> 00:09:51.940
All right.

134
00:09:51.940 --> 00:09:57.940
So we know that one of our two tables we were worried about the wrong transaction table so this refresh

135
00:09:57.940 --> 00:10:00.120
we're not worried about the wrong table or the TMB table.

136
00:10:00.120 --> 00:10:04.840
These are our working tables so we know that customers is Internet.

137
00:10:04.870 --> 00:10:07.720
We all have to do is to check transactions.

138
00:10:07.780 --> 00:10:15.070
So now what we're going to do is we're going to say this out a comment so we can navigate this cold

139
00:10:15.070 --> 00:10:16.240
later on if we need to.

140
00:10:16.240 --> 00:10:22.560
Let's go back to our transactions table now.

141
00:10:23.050 --> 00:10:23.370
All right.

142
00:10:23.380 --> 00:10:30.860
So what we want to do here is we want to bring up our transactions sale and see what's going on there.

143
00:10:33.050 --> 00:10:38.030
So there's a transaction tables and what we can see here is customer ID is still in the table.

144
00:10:38.120 --> 00:10:41.280
First name surname shipping and large discount are still in table.

145
00:10:41.300 --> 00:10:41.890
Why is that.

146
00:10:42.050 --> 00:10:45.690
Well that is because we actually did take them all.

147
00:10:45.760 --> 00:10:46.700
We didn't take them out.

148
00:10:46.700 --> 00:10:48.530
We actually just copied them.

149
00:10:48.560 --> 00:10:54.010
We took these columns and we made a copy of them put them into the translate into the tempy file of

150
00:10:54.010 --> 00:10:57.980
home table and then kept working with them but we never took them out.

151
00:10:57.980 --> 00:11:04.120
So now is the time to actually remove them from this new form this old table says.

152
00:11:04.130 --> 00:11:16.840
What we can do is say remove customer specific columns but we're going to say but leave the customer

153
00:11:17.020 --> 00:11:18.880
id call them.

154
00:11:18.890 --> 00:11:22.930
Why do you want to leave the customer and call them in the stable because the customer id call them

155
00:11:23.020 --> 00:11:30.580
is actually our foreign key that will allow us to join this table to the customers table because if

156
00:11:30.580 --> 00:11:33.080
we remove the customer id call them as well.

157
00:11:33.080 --> 00:11:42.670
Then we will lose all connection to the customers table and we will not be able to re read create this

158
00:11:42.670 --> 00:11:48.700
information will not be able to match up the transaction to the customers so it's important to always

159
00:11:48.700 --> 00:11:55.480
remember to really leave that foreign key that important part that's actually going to be the link between

160
00:11:55.490 --> 00:12:01.560
the old adjusted table and the brand new table that has been extracted from it.

161
00:12:01.870 --> 00:12:02.980
So there we go.

162
00:12:02.980 --> 00:12:14.050
Let's go ahead and do that and say alter or table transactions and then all say drop call them and then

163
00:12:14.050 --> 00:12:16.750
we're just going to say drop which columns around the gun shop.

164
00:12:16.840 --> 00:12:22.200
We wanted a first name or first actually smaller letters right.

165
00:12:22.480 --> 00:12:29.350
First Name Last Name is not actually said it.

166
00:12:29.700 --> 00:12:35.420
They don't want to drop shipping so they want drop.

167
00:12:35.420 --> 00:12:36.580
We'll see.

168
00:12:37.510 --> 00:12:38.840
Discount.

169
00:12:39.220 --> 00:12:39.620
All right.

170
00:12:39.640 --> 00:12:44.570
So don't drop those columns and you'll notice here that it's a bit different to postgresql.

171
00:12:44.570 --> 00:12:46.250
I'll pose reskill.

172
00:12:46.420 --> 00:12:50.210
You would need to say drop column every like like that.

173
00:12:50.740 --> 00:12:58.120
But in Trossachs skill or in Microsoft skills or you don't just say drop call them and then list the

174
00:12:58.120 --> 00:12:59.490
call if you want to drop.

175
00:12:59.530 --> 00:13:01.960
So that's an interesting distinction.

176
00:13:02.230 --> 00:13:13.210
And here all you have to do is just an undisclosed bank successfully and now you just check select star

177
00:13:13.360 --> 00:13:21.190
for all transactions run that they go you can see that those calls are gone and now it's very easy to

178
00:13:21.190 --> 00:13:23.620
check of this tables into an.

179
00:13:24.210 --> 00:13:30.040
We can right away say that this table is indeed into an F in second normal form because we have removed

180
00:13:30.130 --> 00:13:34.450
those columns that were preventing it from being in second normal form.

181
00:13:34.450 --> 00:13:40.270
So we've already checked the condition the criteria of the second form for these remaining columns and

182
00:13:40.270 --> 00:13:41.590
we don't need to do it again.

183
00:13:41.860 --> 00:13:52.320
So we can just say simply two and if confirmed and while the other was to capitals in light of hostile.

184
00:13:52.530 --> 00:13:58.200
And one final step that we need to do is we need to drop this team at the table.

185
00:13:58.200 --> 00:14:04.160
It's always a good idea to clean up after yourself in the table.

186
00:14:04.650 --> 00:14:13.600
So it's a really simple line of code draw up table tempy run that and the refresh you'll see is gone.

187
00:14:14.580 --> 00:14:25.480
All right so there we go that's how we convert a database from a first normal form to a second normal

188
00:14:25.500 --> 00:14:31.950
form so we know that our database wasn't in second form when we just had the transactions table by itself.

189
00:14:31.950 --> 00:14:40.230
We did that check previously and then we learned how to take that one table and split it out into several

190
00:14:40.230 --> 00:14:47.190
tables so we went through this process of spreading out those columns and making sure that they're unique

191
00:14:47.280 --> 00:14:52.500
those rows are unique in the new table and then removing those columns and then dropping a temporary

192
00:14:52.500 --> 00:14:53.190
table.

193
00:14:53.190 --> 00:15:01.560
That's how we approach changing the tide changing the database.

194
00:15:01.560 --> 00:15:09.180
From my first animal form to a second normal form and so second form as you can see why is it good.

195
00:15:09.180 --> 00:15:16.320
Well if you look at transactions now you don't have information anymore on the customer name surname

196
00:15:16.320 --> 00:15:22.620
loyalty discount their stage you know there where they live and so on because it's not necessary.

197
00:15:22.630 --> 00:15:30.720
It's in this table it's it was just being duplicated and copied many many times and was taking up space

198
00:15:31.500 --> 00:15:36.900
whereas now that information lives in the Customers table it is only recorded once per customer.

199
00:15:36.900 --> 00:15:41.950
So as soon as we get a new customer gets the customer gets added here and then will be in 942 it'll

200
00:15:41.960 --> 00:15:43.980
be 943 arose and so on.

201
00:15:43.980 --> 00:15:49.200
So it's only recorded once and there's only this one single source of truth about the customer.

202
00:15:49.200 --> 00:15:56.190
So there's a much lesser chance of error instead of when you have this information copied over and over

203
00:15:56.190 --> 00:15:56.910
and over again.

204
00:15:56.910 --> 00:16:01.040
What if one of those rows is incorrect and then you don't know which ones correct which was incorrect

205
00:16:01.440 --> 00:16:07.620
but also an important part is that this is this will save us space and this will help our database work

206
00:16:07.620 --> 00:16:08.190
faster.

207
00:16:08.190 --> 00:16:15.690
So that is why OLTP type databases and functions actually processing that data type but databases should

208
00:16:15.690 --> 00:16:17.780
be at least all.

209
00:16:17.790 --> 00:16:26.850
Why isn't the second normal form is beneficial for the or LTE type databases because it helps save space

210
00:16:26.880 --> 00:16:31.090
helps reduce potential for error and helps speed them up.

211
00:16:31.590 --> 00:16:32.280
So there we go.

212
00:16:32.280 --> 00:16:35.160
I hope you enjoyed today's tutorial and I look forward to seeing you next time.

213
00:16:35.160 --> 00:16:36.720
Until then happy analyzing.
