WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:08.370
in this video,

00:00:08.370 --> 00:00:10.470
we're going to look at how we can build with heaven.

00:00:10.470 --> 00:00:14.020
So we've seen how we can create a project using Levin archetypes.

00:00:14.020 --> 00:00:15.930
This generates a simple project.

00:00:15.930 --> 00:00:20.230
A basic project is a starting point for our own projects out of the maven quick start

00:00:20.230 --> 00:00:20.820
archetype,

00:00:20.820 --> 00:00:22.690
and we've seen that it has a source.

00:00:22.690 --> 00:00:27.480
Main Java folder for production source code on a source test Java folder four Test source.

00:00:27.480 --> 00:00:27.850
Good.

00:00:27.850 --> 00:00:30.150
And it also comes with a palmed XML,

00:00:30.150 --> 00:00:31.970
which is the main file in Melbourne,

00:00:31.970 --> 00:00:34.080
which describes the build customization ins,

00:00:34.080 --> 00:00:36.530
which are project has pretty much in memory.

00:00:36.530 --> 00:00:42.060
You you're not really writing a build file per se on your more customizing an existing

00:00:42.060 --> 00:00:43.140
standardized build,

00:00:43.140 --> 00:00:45.520
which Melvin comes with on.

00:00:45.520 --> 00:00:48.630
We'll see more about that when we look at build life cycles a little later on.

00:00:48.630 --> 00:00:49.630
But first of all,

00:00:49.630 --> 00:00:55.130
let's just see how we can invoke heaven and run a few build commends if I want to build the

00:00:55.130 --> 00:00:55.550
project,

00:00:55.550 --> 00:00:57.170
which I have so first off,

00:00:57.170 --> 00:00:58.600
let's just take a look on.

00:00:58.600 --> 00:01:01.900
We'll see that we don't have a target directory,

00:01:01.900 --> 00:01:05.960
so this means that the project hasn't been built before heaven will create a target

00:01:05.960 --> 00:01:08.900
directory to generate all its build artifacts in during a build.

00:01:08.900 --> 00:01:10.910
So we don't have a target directory here,

00:01:10.910 --> 00:01:13.190
so we haven't built it before anyway,

00:01:13.190 --> 00:01:14.850
if we wanted to build this project,

00:01:14.850 --> 00:01:18.110
then we can give the phase of the build that we want to run.

00:01:18.110 --> 00:01:21.240
We'll talk more about phases later on when we look at the builds life cycle.

00:01:21.240 --> 00:01:21.850
But for now,

00:01:21.850 --> 00:01:22.370
for example,

00:01:22.370 --> 00:01:24.160
if I want to create the package,

00:01:24.160 --> 00:01:26.400
which is basically the jar file of this project,

00:01:26.400 --> 00:01:36.050
I could just type Melvin package and enter because you can see when I did this the end

00:01:36.050 --> 00:01:36.650
output.

00:01:36.650 --> 00:01:41.660
You can see here that it's written on my up 1.0 snapshot dot jar file into the target

00:01:41.660 --> 00:01:42.210
directory.

00:01:42.210 --> 00:01:46.400
I can actually have a look at that directory and see what's inside.

00:01:46.400 --> 00:01:53.460
Now we can see the inside the jar file.

00:01:53.460 --> 00:01:54.990
We have an appetite class.

00:01:54.990 --> 00:01:58.230
This corresponds to the AP source file that we saw earlier,

00:01:58.230 --> 00:02:01.820
which was generated that this was the AP class that was in the source men Java folder.

00:02:01.820 --> 00:02:04.630
Notice that we don't have AP test in here,

00:02:04.630 --> 00:02:07.410
and we don't have ab testing here because that's test code.

00:02:07.410 --> 00:02:12.110
So I'm ever makes a distinction between production source code and test code and the build

00:02:12.110 --> 00:02:12.540
artifacts,

00:02:12.540 --> 00:02:13.490
which is generating which,

00:02:13.490 --> 00:02:13.910
in this case,

00:02:13.910 --> 00:02:14.350
it's a jar.

00:02:14.350 --> 00:02:16.300
File one include any of the test classes.

00:02:16.300 --> 00:02:19.410
This is because of a concept Nona's dependency scops.

00:02:19.410 --> 00:02:20.010
Again,

00:02:20.010 --> 00:02:21.550
we'll cover that later on in the course.

00:02:21.550 --> 00:02:22.250
But for now,

00:02:22.250 --> 00:02:23.990
just know that it's created a jar file,

00:02:23.990 --> 00:02:25.550
and we didn't really have to do anything.

00:02:25.550 --> 00:02:28.080
We didn't have to write a script to compile the source code.

00:02:28.080 --> 00:02:32.790
We didn't have to copy the class files into a temper directory and then used some kind of

00:02:32.790 --> 00:02:34.650
jar task to be able to create the jar.

00:02:34.650 --> 00:02:37.300
File members just done it all for us out of the box.

00:02:37.300 --> 00:02:40.150
The only has made been created this jar file for us.

00:02:40.150 --> 00:02:45.390
It's actually executed the prerequisite build steps required to get to the stage where it

00:02:45.390 --> 00:02:46.750
can even generate a jar file.

00:02:46.750 --> 00:02:50.210
If we look up what actually happened here,

00:02:50.210 --> 00:02:51.860
we see a few things that have gone on.

00:02:51.860 --> 00:02:55.850
These are really the steps which may even took to be able to generate the end jar file.

00:02:55.850 --> 00:02:57.550
So just to point a couple out,

00:02:57.550 --> 00:03:02.940
you can see here it's used the compiler plug in to compile the source code on then that she

00:03:02.940 --> 00:03:08.130
was this surefire plug in to test the source code Nice and run those tests and it's finally

00:03:08.130 --> 00:03:09.550
built the jar file itself.

00:03:09.550 --> 00:03:13.250
So this is how to create the jar file to create the end build artifact.

00:03:13.250 --> 00:03:15.550
Just clear this down a second.

00:03:15.550 --> 00:03:16.840
Also,

00:03:16.840 --> 00:03:20.850
another thing I can do is I can just decide to clean the project if I clean the project

00:03:20.850 --> 00:03:22.910
that,

00:03:22.910 --> 00:03:23.450
as you can see,

00:03:23.450 --> 00:03:25.080
it's deleted the target directory.

00:03:25.080 --> 00:03:27.440
So this means we don't have a target directory any longer,

00:03:27.440 --> 00:03:28.450
which is correct.

00:03:28.450 --> 00:03:32.620
So this clears out all of the temporary files that were used in the build on the end

00:03:32.620 --> 00:03:34.190
resulting artifact as well,

00:03:34.190 --> 00:03:35.740
which were held in the Target directory.

00:03:35.740 --> 00:03:38.030
A few of the things we can do as well Well,

00:03:38.030 --> 00:03:39.950
we can just decide to test the source code,

00:03:39.950 --> 00:03:42.690
So if we just type from heaven test,

00:03:42.690 --> 00:03:49.250
then this will just run the tests weaken.

00:03:49.250 --> 00:03:50.780
Just compile the source good.

00:03:50.780 --> 00:03:58.150
And this just compiles the source code in the Production sources directory,

00:03:58.150 --> 00:04:06.120
and we can also compile the test source code to so they should really demonstrate how easy

00:04:06.120 --> 00:04:10.160
it is to use movin on the functionality that's provided out of the box by the plug ins such

00:04:10.160 --> 00:04:13.410
that we don't really need to write any build scripts like we used to do with ants or bash

00:04:13.410 --> 00:04:13.800
fruits,

00:04:13.800 --> 00:04:14.450
and in the next,

00:04:14.450 --> 00:04:15.550
videos will dig in further.

