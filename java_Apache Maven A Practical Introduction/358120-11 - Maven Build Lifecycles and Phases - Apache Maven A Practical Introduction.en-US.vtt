WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:10.680
So in this section we're going to look at the builds life cycle.

00:00:10.680 --> 00:00:15.400
So one of the men benefits of movement is that it offers standardized build life cycle.

00:00:15.400 --> 00:00:17.170
This is a template for builds,

00:00:17.170 --> 00:00:19.990
which includes a standardized set of steps or phases,

00:00:19.990 --> 00:00:20.600
as the non,

00:00:20.600 --> 00:00:24.690
which run together sequentially toe ultimately perform a full build off whatever archetype

00:00:24.690 --> 00:00:25.200
your building.

00:00:25.200 --> 00:00:28.270
So this will become a bit clearer if we look at the life cycle reference.

00:00:28.270 --> 00:00:33.050
So if we go to this link here on the lifecycle reference,

00:00:33.050 --> 00:00:38.360
Megan actually contains three separate life cycles for three different types of build.

00:00:38.360 --> 00:00:41.080
So the first is the clean life cycle that's executed.

00:00:41.080 --> 00:00:43.230
Whenever you do a clean of the build,

00:00:43.230 --> 00:00:46.320
that's to clear out all of the generated class files and such.

00:00:46.320 --> 00:00:49.390
Like any artifacts which have generated further build,

00:00:49.390 --> 00:00:51.650
there's the default lifecycle,

00:00:51.650 --> 00:00:54.690
which is the general lifecycle for all builds on.

00:00:54.690 --> 00:00:55.190
Finally,

00:00:55.190 --> 00:00:56.570
there's this site life cycle,

00:00:56.570 --> 00:01:01.260
which is the life cycle that's used when you use Maven's site generation functionality.

00:01:01.260 --> 00:01:04.800
So what this boils down to is if you type in Vienna clean,

00:01:04.800 --> 00:01:08.730
then the build with the clean life cycle will be run with those three phases pre clean,

00:01:08.730 --> 00:01:11.740
clean and pass clean if you run made from site to envy.

00:01:11.740 --> 00:01:16.180
Insight that will run to build with the site life cycle with the first is pre site cites

00:01:16.180 --> 00:01:17.050
past site and site.

00:01:17.050 --> 00:01:18.260
Deploy any other fairs.

00:01:18.260 --> 00:01:24.360
Do you specify will be one of thes faces here in the default lifecycle on the default build

00:01:24.360 --> 00:01:24.360
?

00:01:24.360 --> 00:01:25.830
Then we'll execute up to that point.

00:01:25.830 --> 00:01:27.850
So let's just take a quick look with the clean one,

00:01:27.850 --> 00:01:29.650
because that's the simplest to understand.

00:01:29.650 --> 00:01:31.890
I'm in the project here.

00:01:31.890 --> 00:01:38.880
If I type in envy and clean so you can see here that the MEV unclean plug in has been

00:01:38.880 --> 00:01:39.540
invoked.

00:01:39.540 --> 00:01:41.480
The clean goal has been cold.

00:01:41.480 --> 00:01:43.730
Then we have something in parentheses,

00:01:43.730 --> 00:01:45.290
which is default clean,

00:01:45.290 --> 00:01:49.550
and this is actually the execution already for this particular so called binding.

00:01:49.550 --> 00:01:55.340
So how maven builds work is that Nevin defines a particular lifecycle for a build,

00:01:55.340 --> 00:01:58.100
so to go back to the clean life cycle and look at this one.

00:01:58.100 --> 00:02:01.600
This life cycle consists of three phases pre clean,

00:02:01.600 --> 00:02:03.280
clean and post clean.

00:02:03.280 --> 00:02:08.800
These air pretty much like three coal backs which can be triggered in maven builds and how

00:02:08.800 --> 00:02:11.030
these callbacks triggered or rather,

00:02:11.030 --> 00:02:13.110
how you actually register a piece of functionality.

00:02:13.110 --> 00:02:19.190
To be run for a given phase is to bind a goal after plugging you want to use on the given

00:02:19.190 --> 00:02:19.650
phase.

00:02:19.650 --> 00:02:21.480
So in Megan's case,

00:02:21.480 --> 00:02:24.140
when weeks you may have been passing in clean,

00:02:24.140 --> 00:02:28.460
it's going to run all those build phases in that life cycle up to the feds we've specified

00:02:28.460 --> 00:02:28.460
.

00:02:28.460 --> 00:02:30.530
And if there are any plug in goals,

00:02:30.530 --> 00:02:31.790
bounce were given phase.

00:02:31.790 --> 00:02:33.360
It will execute those as well.

00:02:33.360 --> 00:02:34.910
Let's put this into context.

00:02:34.910 --> 00:02:37.130
If we just copy this default clean execution,

00:02:37.130 --> 00:02:41.420
I d clear the screen out.

00:02:41.420 --> 00:02:42.940
If we now use Melvin,

00:02:42.940 --> 00:02:48.560
help effective Palm on this project.

00:02:48.560 --> 00:02:52.720
And that's going to give us the complete projects object model for this entire project,

00:02:52.720 --> 00:02:56.820
including mavens defaults which were inherited from the soup upon which we talk about in a

00:02:56.820 --> 00:02:57.610
different video.

00:02:57.610 --> 00:03:08.660
But if we execute that and then scroll up and if we try and find default clean,

00:03:08.660 --> 00:03:10.550
there it is.

00:03:10.550 --> 00:03:16.030
So here we can see the registration of the MEV unclean plug in and the binding of its clean

00:03:16.030 --> 00:03:21.000
goal to the clean phase of that build lifecycle under the execution i d of default touch

00:03:21.000 --> 00:03:21.370
clean,

00:03:21.370 --> 00:03:24.870
and we also see in this file other plug ins,

00:03:24.870 --> 00:03:27.940
which are also bound at certain points in the movement.

00:03:27.940 --> 00:03:30.150
Build life cycle in the default one that is so.

00:03:30.150 --> 00:03:31.210
The moving resources plug in,

00:03:31.210 --> 00:03:31.960
for example,

00:03:31.960 --> 00:03:33.340
has two executions.

00:03:33.340 --> 00:03:36.610
So when process test resources is encountered,

00:03:36.610 --> 00:03:38.640
our process resources has encountered,

00:03:38.640 --> 00:03:41.280
it's going to execute those goals that specified there.

00:03:41.280 --> 00:03:43.890
Feel free to have a look at this model in detail.

00:03:43.890 --> 00:03:46.980
But that should give you some idea of how life cycles work for now.

00:03:46.980 --> 00:03:51.150
So now we've seen how Bill life cycle consists of multiple phases.

00:03:51.150 --> 00:03:52.070
And by the way,

00:03:52.070 --> 00:03:54.920
these phases can't alter these faces of built into heaven itself.

00:03:54.920 --> 00:03:58.150
There's not customizing what the actual faces themselves are on Lee.

00:03:58.150 --> 00:03:58.290
What?

00:03:58.290 --> 00:03:59.360
You can do it each phase.

00:03:59.360 --> 00:04:02.260
But now we've seen how the build consists of phases.

00:04:02.260 --> 00:04:04.040
Let's look at this sequential measure off it.

00:04:04.040 --> 00:04:06.410
So by this we mean that,

00:04:06.410 --> 00:04:07.150
for example,

00:04:07.150 --> 00:04:09.890
if we were to invoke the test compile phase,

00:04:09.890 --> 00:04:14.500
that is to compile the test source code into the test destination directories,

00:04:14.500 --> 00:04:15.130
it says now,

00:04:15.130 --> 00:04:17.550
by typing envy in test compile,

00:04:17.550 --> 00:04:23.150
then what happened would be all of these phases would be executed point of that,

00:04:23.150 --> 00:04:27.650
culminating in the test compile fares being executed itself.

00:04:27.650 --> 00:04:31.250
Now it may well be that not all of these phases have looking girls bound to them.

00:04:31.250 --> 00:04:32.310
And if that's the case,

00:04:32.310 --> 00:04:34.590
then you won't see them inthe e build output.

00:04:34.590 --> 00:04:36.770
But where you will see in the build out put our faces,

00:04:36.770 --> 00:04:37.650
which are being executed,

00:04:37.650 --> 00:04:39.230
which do have plug ins bound to them.

00:04:39.230 --> 00:04:39.850
So,

00:04:39.850 --> 00:04:40.580
for example,

00:04:40.580 --> 00:04:42.600
in order to compile the test source code,

00:04:42.600 --> 00:04:45.230
it's necessary to first compile a production source.

00:04:45.230 --> 00:04:45.490
Good,

00:04:45.490 --> 00:04:46.000
because,

00:04:46.000 --> 00:04:46.330
after all,

00:04:46.330 --> 00:04:47.400
that's what we're going to test.

00:04:47.400 --> 00:04:51.130
So we'll expect to see the compile for is being executed with the methane.

00:04:51.130 --> 00:04:55.410
Compile a plug in compiling the source code and then afterwards the test compile fares

00:04:55.410 --> 00:04:58.800
being executed with again to compile a plug in this time component.

00:04:58.800 --> 00:04:59.350
The test source.

00:04:59.350 --> 00:04:59.620
Good.

00:04:59.620 --> 00:05:01.620
There's a handy reference underneath this.

00:05:01.620 --> 00:05:02.190
In fact,

00:05:02.190 --> 00:05:11.530
under the section built in life cycle bindings on this shows you in documentation of former

00:05:11.530 --> 00:05:11.530
,

00:05:11.530 --> 00:05:14.060
where you can actually see already by looking at the effects of palm.

00:05:14.060 --> 00:05:14.880
But we can see here,

00:05:14.880 --> 00:05:15.480
for example,

00:05:15.480 --> 00:05:20.950
that the compile phase executes to compile goal of the compiler plug in the test phase

00:05:20.950 --> 00:05:25.870
executes the test goal of the show If I plug in on the package Phase Fairies,

00:05:25.870 --> 00:05:30.380
which plug ins Goal unplugging is executed based on the packaging type so we can see at the

00:05:30.380 --> 00:05:30.630
top.

00:05:30.630 --> 00:05:32.260
Here we have different packaging types,

00:05:32.260 --> 00:05:34.680
the ones we've seen a jar on war.

00:05:34.680 --> 00:05:36.130
So in the case of a war file,

00:05:36.130 --> 00:05:36.890
for example,

00:05:36.890 --> 00:05:39.710
when you type in VN package and we're up to that phase,

00:05:39.710 --> 00:05:41.810
the package fears will invoke the war.

00:05:41.810 --> 00:05:43.190
Plug in with the war goal.

00:05:43.190 --> 00:05:45.150
If the packaging type is JAR,

00:05:45.150 --> 00:05:47.410
it will invoke the job looking for the jar goal.

00:05:47.410 --> 00:05:48.890
So let's take equipment now,

00:05:48.890 --> 00:05:50.850
and we'll just do Melvin compile.

00:05:50.850 --> 00:05:53.340
So here we're giving a single word,

00:05:53.340 --> 00:05:55.370
which means a single phase.

00:05:55.370 --> 00:05:59.550
So it's going to execute all of the build steps up to the compile phase,

00:05:59.550 --> 00:06:04.150
what you could do,

00:06:04.150 --> 00:06:07.640
and you can see up to the compile phase on the way to the compile fares.

00:06:07.640 --> 00:06:08.950
We actually have to plug ins,

00:06:08.950 --> 00:06:10.370
which were executed along the way.

00:06:10.370 --> 00:06:14.140
The Navan Resources Blufgan on the Melbourne compile a plug in for Cleveland out.

00:06:14.140 --> 00:06:17.160
If we do have Melvin test compile,

00:06:17.160 --> 00:06:23.920
then we also get to more executions after the compile phase,

00:06:23.920 --> 00:06:26.670
which do the same things as the preceding executions.

00:06:26.670 --> 00:06:31.760
So copying resources across with the resources plug in and doing compilation.

00:06:31.760 --> 00:06:34.410
But doing this for the test sauce tree.

00:06:34.410 --> 00:06:36.110
So there was not sourced men,

00:06:36.110 --> 00:06:40.410
Java and sourcing in resources but source test java and source test resources.

00:06:40.410 --> 00:06:41.560
So to summarize,

00:06:41.560 --> 00:06:43.810
Melvin defines build life cycles,

00:06:43.810 --> 00:06:45.650
which consists of a sequence of phases.

00:06:45.650 --> 00:06:50.720
You can register plugging girls to execute on those faces by specifying execution bindings

00:06:50.720 --> 00:06:51.980
in the project object model.

00:06:51.980 --> 00:06:56.300
This is how the default build effectively works by invoking the various begins at different

00:06:56.300 --> 00:06:58.050
phases within the default lifecycle,

00:06:58.050 --> 00:06:59.770
and it also provides the key for you.

00:06:59.770 --> 00:07:04.810
Is the Nevin user to be able to customize your build by binding different plugging goals at

00:07:04.810 --> 00:07:06.650
different phases in the build lifecycle.

00:07:06.650 --> 00:07:08.950
This is how build life cycles work in 11

