WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:08.300
in this video,

00:00:08.300 --> 00:00:12.770
we're going to see how to include more complex dependency and see how maybe resolves that.

00:00:12.770 --> 00:00:17.470
So previously we've seen the case where we have a simple dependency on by simple we mean

00:00:17.470 --> 00:00:20.330
that that dependency doesn't depend on any other dependencies.

00:00:20.330 --> 00:00:24.050
So we saw the inclusion of a Commons Lang dependency,

00:00:24.050 --> 00:00:28.190
which resulted in just that jar file being downloaded and included in the project.

00:00:28.190 --> 00:00:31.800
But it's possible for dependencies to include other dependencies to And in fact,

00:00:31.800 --> 00:00:32.780
this is not only possible,

00:00:32.780 --> 00:00:34.020
it s actually quite common sense.

00:00:34.020 --> 00:00:37.060
Software components in general rely on other software components,

00:00:37.060 --> 00:00:40.600
which the bill on top of and so we're going to see the inclusion off more advanced

00:00:40.600 --> 00:00:42.530
dependency and see how it gets resolved.

00:00:42.530 --> 00:00:43.650
So in this case,

00:00:43.650 --> 00:00:46.740
we've got a Web project which were created with the mayor of Weather Park.

00:00:46.740 --> 00:00:49.100
It type on this project produces a war file.

00:00:49.100 --> 00:00:52.920
So we're gonna include a dependency on spring NBC,

00:00:52.920 --> 00:00:54.750
which is the model view controller framework,

00:00:54.750 --> 00:00:56.360
which is partly spring project.

00:00:56.360 --> 00:01:00.220
We're gonna set dependency on that in the project and see what happens to the results in

00:01:00.220 --> 00:01:01.360
war file in the woodsy,

00:01:01.360 --> 00:01:02.640
which libraries are being included.

00:01:02.640 --> 00:01:03.450
Once we've done that,

00:01:03.450 --> 00:01:04.140
hey,

00:01:04.140 --> 00:01:06.520
we're in the search once and for the Melbourne Central Repository.

00:01:06.520 --> 00:01:08.260
If you want to include Spring NBC.

00:01:08.260 --> 00:01:10.470
Dependency for this is spring dash Web.

00:01:10.470 --> 00:01:15.210
So if we just type in spring Web on the reason you know this,

00:01:15.210 --> 00:01:15.590
by the way,

00:01:15.590 --> 00:01:18.020
is if you read the documentation in spring,

00:01:18.020 --> 00:01:20.450
it tells you you said you such a spring web.

00:01:20.450 --> 00:01:24.250
So here is the top.

00:01:24.250 --> 00:01:33.820
We'll go for 438 Release on will copy this dependency across into the project.

00:01:33.820 --> 00:01:35.050
So here's my project.

00:01:35.050 --> 00:01:49.080
Let's just copy this dependency in clubs tighter that up a bit.

00:01:49.080 --> 00:01:50.250
So now just review.

00:01:50.250 --> 00:01:55.740
We've now included a dependency on spring Web so explicitly here in the war file.

00:01:55.740 --> 00:01:58.270
We only have one non test dependence included,

00:01:58.270 --> 00:01:59.330
which is Spring Web.

00:01:59.330 --> 00:02:01.750
But let's see what happens when we create the war file.

00:02:01.750 --> 00:02:03.670
Let's go back to the console,

00:02:03.670 --> 00:02:13.210
and I may even package to create the war file so you can see it's created on my Web app dot

00:02:13.210 --> 00:02:15.750
war in the Target directory.

00:02:15.750 --> 00:02:24.780
So it's just clear this out and just have a look that the contents two in the Web INF Lib

00:02:24.780 --> 00:02:25.300
directory,

00:02:25.300 --> 00:02:27.240
which contained the libraries or JAR files,

00:02:27.240 --> 00:02:28.620
which will be included in the Wall File,

00:02:28.620 --> 00:02:29.790
which the Web dependence on.

00:02:29.790 --> 00:02:31.040
We don't just see Spring Web,

00:02:31.040 --> 00:02:33.200
but we also see six other JAR files as well.

00:02:33.200 --> 00:02:35.650
So spring expression has been core concepts,

00:02:35.650 --> 00:02:35.940
beings,

00:02:35.940 --> 00:02:37.550
AARP and Commons logging.

00:02:37.550 --> 00:02:41.820
What happens actually done here is it's gone off to the Melbourne Central repository.

00:02:41.820 --> 00:02:44.350
If we didn't have Spring Web 43 and cash locally,

00:02:44.350 --> 00:02:46.350
it's inspected the Palm File.

00:02:46.350 --> 00:02:48.360
If if we do have it cash locket and look for the Palm Father,

00:02:48.360 --> 00:02:50.240
it's then looked in the Palm file,

00:02:50.240 --> 00:02:51.950
and it's looked in the dependence of section.

00:02:51.950 --> 00:02:53.460
Andi found the dependencies,

00:02:53.460 --> 00:02:56.420
which spring Web needs itself and it's going off on downloaded those.

00:02:56.420 --> 00:02:56.930
And then,

00:02:56.930 --> 00:02:59.380
for each of those dependence is is done the same process.

00:02:59.380 --> 00:03:03.250
It looked inside the Palm Files and seeing what other dependencies needed.

00:03:03.250 --> 00:03:06.390
The end result of this is that we have seven job follows now included,

00:03:06.390 --> 00:03:08.440
which constitute the spring Web component.

00:03:08.440 --> 00:03:12.720
Then we could go back to the search front into the Melbourne Central Repository.

00:03:12.720 --> 00:03:14.300
You'll notice to the right.

00:03:14.300 --> 00:03:16.980
We also have the palm file for the artifacts,

00:03:16.980 --> 00:03:20.670
which were viewing at the minute and this is quite a complex one,

00:03:20.670 --> 00:03:21.490
in all fairness.

00:03:21.490 --> 00:03:23.550
But if we look right down to the bottom,

00:03:23.550 --> 00:03:30.080
and if we look for just those dependencies which have a compile scope on no optional,

00:03:30.080 --> 00:03:32.750
then we see those four dependencies here,

00:03:32.750 --> 00:03:33.820
which is spring LP,

00:03:33.820 --> 00:03:34.980
spring beans,

00:03:34.980 --> 00:03:37.740
spring context on spring core.

00:03:37.740 --> 00:03:42.660
If we then go up to search textbooks and just type in spring core,

00:03:42.660 --> 00:03:46.300
which was one of spring webs dependencies and search on that,

00:03:46.300 --> 00:03:49.930
I'm a go to 438 release,

00:03:49.930 --> 00:03:52.350
which is the version that was included on again,

00:03:52.350 --> 00:03:54.150
scroll down to the dependencies section.

00:03:54.150 --> 00:03:57.050
Look for the dependency,

00:03:57.050 --> 00:03:58.700
which has a compile scope,

00:03:58.700 --> 00:03:59.730
which isn't optional.

00:03:59.730 --> 00:04:03.140
We see Commons logging here version 1.2,

00:04:03.140 --> 00:04:07.110
which corresponds here to the Commons logging,

00:04:07.110 --> 00:04:09.300
which is included in the Web influence of directory.

00:04:09.300 --> 00:04:13.170
And you can have a look around in the search for intend for the Movement's Central Report

00:04:13.170 --> 00:04:16.990
to dig into the other dependencies and see how that dependence a graph is being formed.

00:04:16.990 --> 00:04:20.960
But that demonstrates to you how more complex dependencies resolved in MEV.

00:04:20.960 --> 00:04:22.360
In we're in the palm file itself.

00:04:22.360 --> 00:04:24.650
You just explicitly depend on one dependency,

00:04:24.650 --> 00:04:27.690
which is spring Web in this case on its dependence is,

00:04:27.690 --> 00:04:28.120
in fact,

00:04:28.120 --> 00:04:28.440
it sold.

00:04:28.440 --> 00:04:30.360
Three of dependence is so it's dependencies.

00:04:30.360 --> 00:04:32.590
Dependence is if you will resolve recursive Lee.

00:04:32.590 --> 00:04:36.100
Those are brought into the project to on these air called transitive dependencies.

00:04:36.100 --> 00:04:37.100
These dependencies,

00:04:37.100 --> 00:04:41.200
which basically have to exist at run time otherwise that component that you've included

00:04:41.200 --> 00:04:42.360
wouldn't be able to function.

00:04:42.360 --> 00:04:45.100
So that shows you how more complex dependency,

00:04:45.100 --> 00:04:46.480
which has transitive dependency,

00:04:46.480 --> 00:04:47.760
is resolved in 11.

