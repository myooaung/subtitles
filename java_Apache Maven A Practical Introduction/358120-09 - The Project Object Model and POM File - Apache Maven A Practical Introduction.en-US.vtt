WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:08.260
in this video,

00:00:08.260 --> 00:00:11.670
we're going to talk about the move in palm or project Object model.

00:00:11.670 --> 00:00:15.450
So let's just open a per sample project and have a look at what's in the palm.

00:00:15.450 --> 00:00:17.950
So here's a sample project opened up,

00:00:17.950 --> 00:00:23.110
so all made in projects have a project object model on This describes the view of the

00:00:23.110 --> 00:00:23.460
project.

00:00:23.460 --> 00:00:25.480
Has members would like to see it so by this,

00:00:25.480 --> 00:00:29.570
we mean includes configuration and properties on Bill customization,

00:00:29.570 --> 00:00:31.650
which customize the build for a given project.

00:00:31.650 --> 00:00:34.960
So they just have a look at this project and see what properties we have in.

00:00:34.960 --> 00:00:38.980
This is a project which was create with the mayor and quick start archetype as a default

00:00:38.980 --> 00:00:39.490
project,

00:00:39.490 --> 00:00:40.770
but it's a good place to get started.

00:00:40.770 --> 00:00:42.060
So first off,

00:00:42.060 --> 00:00:43.090
we have model version.

00:00:43.090 --> 00:00:46.150
So this is the version off the palm that's used in general.

00:00:46.150 --> 00:00:48.580
This isn't change between make conversions don't on either way.

00:00:48.580 --> 00:00:50.010
It's generated by the archetype anyway,

00:00:50.010 --> 00:00:52.330
so you don't really have to worry about the Lexx.

00:00:52.330 --> 00:00:57.470
We have three very important properties in 11 which in earnest the gaffe coordinates which

00:00:57.470 --> 00:01:01.780
collectively stunned for a group i d artifact tidy inversion say we conceive these three

00:01:01.780 --> 00:01:02.280
properties.

00:01:02.280 --> 00:01:03.260
The Group I d.

00:01:03.260 --> 00:01:06.720
Is basically kind of a name space for where this particular project will live,

00:01:06.720 --> 00:01:08.400
kind of synonymous with the idea of a job,

00:01:08.400 --> 00:01:08.970
a package.

00:01:08.970 --> 00:01:12.400
So it's a way have been able to group in aggregate different projects together under the

00:01:12.400 --> 00:01:15.900
same location which corresponds to the same section in American repository.

00:01:15.900 --> 00:01:16.550
Next up,

00:01:16.550 --> 00:01:17.830
we have the artifact i d.

00:01:17.830 --> 00:01:20.120
This is in them of the artifact that will be produced.

00:01:20.120 --> 00:01:24.380
By that we mean the end build artifacts that's produced as the output of the May even build

00:01:24.380 --> 00:01:24.380
.

00:01:24.380 --> 00:01:26.370
So this is the best name for the artifact.

00:01:26.370 --> 00:01:26.760
Next,

00:01:26.760 --> 00:01:27.570
we have the version,

00:01:27.570 --> 00:01:29.250
which in this case is 10 snapshot.

00:01:29.250 --> 00:01:34.720
So these three properties taken together the group I D artifact only inversion specify the

00:01:34.720 --> 00:01:38.130
location that this artifact will be located in when it's deployed to,

00:01:38.130 --> 00:01:38.250
um,

00:01:38.250 --> 00:01:39.060
Evan Repository.

00:01:39.060 --> 00:01:40.900
This is either an external repository,

00:01:40.900 --> 00:01:42.730
such as one of them a public open source.

00:01:42.730 --> 00:01:43.350
Ones there are,

00:01:43.350 --> 00:01:44.300
like Nevin central,

00:01:44.300 --> 00:01:45.010
for example,

00:01:45.010 --> 00:01:48.010
which is the men default repository for maven artifacts.

00:01:48.010 --> 00:01:51.920
Or you won't be allowed to publish here and that you have a proper open source project or

00:01:51.920 --> 00:01:53.230
it could be an internal repository,

00:01:53.230 --> 00:01:54.690
which is normally repository,

00:01:54.690 --> 00:01:56.900
which is part of a corporate infrastructure.

00:01:56.900 --> 00:01:59.980
So here we're talking about tools like Nexus Artifact Cherie,

00:01:59.980 --> 00:02:04.760
which house all the maven artifacts across an organization and third party depends as well

00:02:04.760 --> 00:02:05.500
in most cases,

00:02:05.500 --> 00:02:07.510
or the local Melvin report Cash,

00:02:07.510 --> 00:02:08.830
which is actually on your system,

00:02:08.830 --> 00:02:13.370
were just quickly demonstrate how the group I d artifact only inversion map to the location

00:02:13.370 --> 00:02:17.810
of the repository by going to the command line on building and installing the artifact into

00:02:17.810 --> 00:02:18.570
the local report.

00:02:18.570 --> 00:02:18.940
Cash.

00:02:18.940 --> 00:02:20.050
Let's just do that now.

00:02:20.050 --> 00:02:25.590
So let's just quickly can't this palmed XML file.

00:02:25.590 --> 00:02:28.280
And so this project should be located in a group idea,

00:02:28.280 --> 00:02:28.840
which is common.

00:02:28.840 --> 00:02:30.440
Does engine not training that Demmer?

00:02:30.440 --> 00:02:32.910
This means that in the local Melvin report,

00:02:32.910 --> 00:02:33.370
Cash,

00:02:33.370 --> 00:02:35.330
which is located here,

00:02:35.330 --> 00:02:44.080
would expect to see full of structure like this convention training demo on.

00:02:44.080 --> 00:02:44.960
We don't have that.

00:02:44.960 --> 00:02:45.990
So because we don't have that,

00:02:45.990 --> 00:02:48.160
it means it's not installed on this system currently,

00:02:48.160 --> 00:02:54.240
so if we quickly install this will compile the source code,

00:02:54.240 --> 00:02:59.190
makes the jar file and then install into the local repository thing,

00:02:59.190 --> 00:03:04.590
we should see that it's populated that particular directory and you can see here on the

00:03:04.590 --> 00:03:08.380
bottom where it's installed two items we see my up $1.0 snapshot,

00:03:08.380 --> 00:03:09.430
that jar and well,

00:03:09.430 --> 00:03:10.280
to see the Palm file,

00:03:10.280 --> 00:03:11.390
which is deployed as well.

00:03:11.390 --> 00:03:13.760
So this means now if we re execute that command,

00:03:13.760 --> 00:03:21.850
we will see the artifact that so the first part of the path after Empty Repository is a

00:03:21.850 --> 00:03:23.270
group hiding that's common extension,

00:03:23.270 --> 00:03:24.210
not training a demo.

00:03:24.210 --> 00:03:25.430
Then under there we have ah,

00:03:25.430 --> 00:03:26.040
subdirectory,

00:03:26.040 --> 00:03:27.580
which is named off the artifact I D,

00:03:27.580 --> 00:03:28.250
which is Maya.

00:03:28.250 --> 00:03:29.750
And if we go into my app,

00:03:29.750 --> 00:03:33.970
they would see 10 snapshot.

00:03:33.970 --> 00:03:35.400
So under the artifact I.

00:03:35.400 --> 00:03:35.690
D.

00:03:35.690 --> 00:03:37.110
Director and we see the versions,

00:03:37.110 --> 00:03:40.820
which reveal about the only one version here because it's the version we just installed on

00:03:40.820 --> 00:03:40.820
.

00:03:40.820 --> 00:03:41.490
Then finally,

00:03:41.490 --> 00:03:42.880
inside that version folder,

00:03:42.880 --> 00:03:45.690
we have the actual artifact itself,

00:03:45.690 --> 00:03:48.130
which is my up $1.0 snapshot chart.

00:03:48.130 --> 00:03:49.100
You'll notice as well.

00:03:49.100 --> 00:03:52.020
It's also deployed in my APP $1.0 snapshot dot palm.

00:03:52.020 --> 00:03:53.550
So let's just quickly take a look at that,

00:03:53.550 --> 00:03:59.400
and you should recognize this because this is actually the Pond XML file,

00:03:59.400 --> 00:04:03.460
which was in the root of the project So whenever you do an install with heaven to install

00:04:03.460 --> 00:04:07.650
to the local member repository cash or you to deploy to deploy from external repository,

00:04:07.650 --> 00:04:13.760
it also pushes along the Pond XML file such that when this particular artifact is used as a

00:04:13.760 --> 00:04:15.650
dependency in other projects.

00:04:15.650 --> 00:04:19.350
Heaven knows which other dependencies in needs to download as well.

00:04:19.350 --> 00:04:20.310
And if you are the suspects,

00:04:20.310 --> 00:04:20.590
too.

00:04:20.590 --> 00:04:21.970
So we see that the group I d.

00:04:21.970 --> 00:04:23.300
Artifact any inversion.

00:04:23.300 --> 00:04:27.950
This so called gaffe coordinator is used both in the publishing or installing often

00:04:27.950 --> 00:04:31.750
artifact into a major repository to define its location there on the golf course.

00:04:31.750 --> 00:04:32.890
And it can also be used.

00:04:32.890 --> 00:04:37.630
Tea was an artifact as a dependency in the dependencies section off the Pond XML file,

00:04:37.630 --> 00:04:37.990
too.

00:04:37.990 --> 00:04:39.190
So let's just go back to the Palm,

00:04:39.190 --> 00:04:41.830
the XML file and continue reviewing this.

00:04:41.830 --> 00:04:43.720
So whenever you create 11 project,

00:04:43.720 --> 00:04:45.780
at the very least you have a pom XML file,

00:04:45.780 --> 00:04:47.370
which is at the root of the project,

00:04:47.370 --> 00:04:50.280
and this needs to include at least the 1st 5 properties.

00:04:50.280 --> 00:04:51.190
The model version,

00:04:51.190 --> 00:04:54.620
crew party artifact only inversion on the packaging type,

00:04:54.620 --> 00:04:56.850
and this constitutes a so called minimal palm.

00:04:56.850 --> 00:04:57.630
In other words,

00:04:57.630 --> 00:05:01.710
It's the absolute bare minimum that you need in heaven to be able to describe a project.

00:05:01.710 --> 00:05:05.280
But you can add other sections as well as we can see by looking at this page on the main

00:05:05.280 --> 00:05:05.750
website.

00:05:05.750 --> 00:05:09.960
So this page on the Melbourne website gives you another view off the medal in palm

00:05:09.960 --> 00:05:11.850
structure for the project Object model.

00:05:11.850 --> 00:05:16.780
If we scroll down the section about what is the palm?

00:05:16.780 --> 00:05:22.230
But just anethe they we have a description of what else is in here so we can see in the

00:05:22.230 --> 00:05:23.820
first section we have the basics,

00:05:23.820 --> 00:05:25.070
which the Group I,

00:05:25.070 --> 00:05:29.510
the artifact version we saw before the gaffe co ordinates along with the packaging type,

00:05:29.510 --> 00:05:31.170
which can be jar or war.

00:05:31.170 --> 00:05:34.190
This determines what actual type of build artifacts you want to generate.

00:05:34.190 --> 00:05:37.280
So a war packaging type to generate a war file,

00:05:37.280 --> 00:05:38.890
which could be deployed into a Web container,

00:05:38.890 --> 00:05:41.190
a jar packaging type to create a jar file,

00:05:41.190 --> 00:05:43.680
which can be used as a dependency than in other projects.

00:05:43.680 --> 00:05:45.920
Or maybe it's a standalone execute herbal jar far,

00:05:45.920 --> 00:05:46.540
for example,

00:05:46.540 --> 00:05:50.160
on the some of the bits and pieces that was well related to more advanced use cases off

00:05:50.160 --> 00:05:54.380
Melvin relating to when you create multi module builds on how you manage dependencies

00:05:54.380 --> 00:05:54.900
within there,

00:05:54.900 --> 00:05:56.930
we also see the dependencies section.

00:05:56.930 --> 00:05:59.850
This is where you specify the dependence is to the bill should use.

00:05:59.850 --> 00:06:02.550
And then underneath there you have the build settings.

00:06:02.550 --> 00:06:07.480
So the one we're concerned about in this course is the build tech on its inside the bill

00:06:07.480 --> 00:06:07.910
tank.

00:06:07.910 --> 00:06:10.450
Do you actually find customization is of the current build?

00:06:10.450 --> 00:06:12.260
So let's just dig into that little bit further.

00:06:12.260 --> 00:06:20.470
So the build section within the palm file can house a few different elements,

00:06:20.470 --> 00:06:23.250
but in this course were concerned with the plug ins section.

00:06:23.250 --> 00:06:27.700
And this is where you define plug ins you're gonna use within the build or provide

00:06:27.700 --> 00:06:29.810
configuration and customise existing plug ins,

00:06:29.810 --> 00:06:31.440
which are being used in the default build.

00:06:31.440 --> 00:06:33.960
We'll see more about that later on when we look at build life cycles.

00:06:33.960 --> 00:06:38.450
But feel free to have a look at this particular section,

00:06:38.450 --> 00:06:42.100
which describes the palm to dig in for a few more details.

00:06:42.100 --> 00:06:46.230
But we've covered here should give us enough of an idea of what the palm does and what is

00:06:46.230 --> 00:06:47.650
in this introductory course.

