WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:08.310
in this video,

00:00:08.310 --> 00:00:10.980
we're going to take a look at the Super Palm and see what it is.

00:00:10.980 --> 00:00:15.060
So we have this notion of the project object model in MEV in projects,

00:00:15.060 --> 00:00:17.720
and this is basically maven's model off the build.

00:00:17.720 --> 00:00:21.370
It includes all of the properties configuration and bill customization ins.

00:00:21.370 --> 00:00:23.440
Dependence is that you're going to use that kind of stuff,

00:00:23.440 --> 00:00:25.760
which is specific to your projects build.

00:00:25.760 --> 00:00:27.170
But as we've seen the,

00:00:27.170 --> 00:00:30.460
we don't actually have to write an awful lot in a Pond XML file.

00:00:30.460 --> 00:00:30.950
In fact,

00:00:30.950 --> 00:00:33.250
it can actually be pretty minimal if we have a basic project.

00:00:33.250 --> 00:00:38.840
So if we just take a look at the one from the moving quick start archetype here,

00:00:38.840 --> 00:00:40.240
we see that it's actually pretty minimal.

00:00:40.240 --> 00:00:41.680
We just have the gaffe coordinates.

00:00:41.680 --> 00:00:43.680
That's a group on the artifact at the version,

00:00:43.680 --> 00:00:46.210
the packaging type on their dependency,

00:00:46.210 --> 00:00:47.130
which we're going to use.

00:00:47.130 --> 00:00:49.840
But those are the salient points of the palm.

00:00:49.840 --> 00:00:51.530
Near the properties aren't really is important.

00:00:51.530 --> 00:00:55.960
But just because you define such a small XML file to define your version of the project

00:00:55.960 --> 00:00:56.570
object model,

00:00:56.570 --> 00:00:58.310
this doesn't mean that's the only thing involved.

00:00:58.310 --> 00:00:59.120
In actual fact,

00:00:59.120 --> 00:01:01.580
there's another item called the Super Palm in Heaven.

00:01:01.580 --> 00:01:03.560
And this is a much larger palm file,

00:01:03.560 --> 00:01:07.620
which all moving projects inherit from Let's have a quick look at this now you find type

00:01:07.620 --> 00:01:10.010
envy in minus minus version.

00:01:10.010 --> 00:01:11.940
Then where it says Memon home.

00:01:11.940 --> 00:01:15.450
This is the actual moving installation that this particular machine is using.

00:01:15.450 --> 00:01:23.370
So if I copy this CD into them,

00:01:23.370 --> 00:01:28.360
I use STK minus the package manager so your installation path might look different.

00:01:28.360 --> 00:01:29.550
But ultimately at the end of the day,

00:01:29.550 --> 00:01:31.010
it's still the same distribution,

00:01:31.010 --> 00:01:31.630
which I'm looking at.

00:01:31.630 --> 00:01:34.200
So if I have a look inside there,

00:01:34.200 --> 00:01:36.190
this is the MoveOn installation itself,

00:01:36.190 --> 00:01:37.100
which were pointing to.

00:01:37.100 --> 00:01:42.370
And if I go into live directory,

00:01:42.370 --> 00:01:52.250
there's a file in here which is called The Model Builder,

00:01:52.250 --> 00:01:54.840
and this is part of Melvin's internal implementation here,

00:01:54.840 --> 00:01:56.400
so you'll never really have to have a look at this.

00:01:56.400 --> 00:02:00.190
But it's just instructive to have a quick look inside to show you what the super Palm is.

00:02:00.190 --> 00:02:01.870
If we look inside that file,

00:02:01.870 --> 00:02:05.720
which we can do with Boy Savoy,

00:02:05.720 --> 00:02:09.260
even model builder.

00:02:09.260 --> 00:02:14.990
So this is what's inside this particular job file.

00:02:14.990 --> 00:02:15.800
Then we'll see here.

00:02:15.800 --> 00:02:18.430
There's a file called Palm 400 dot xml.

00:02:18.430 --> 00:02:27.140
So if we go to Palm 400 XML and look inside that,

00:02:27.140 --> 00:02:29.760
then what we see here is the super Palm itself.

00:02:29.760 --> 00:02:31.350
So if we scroll down,

00:02:31.350 --> 00:02:40.010
we can see that it's bringing some of the properties in configuration to the table on.

00:02:40.010 --> 00:02:43.500
This is where Melvin's Convention over configuration idea comes in.

00:02:43.500 --> 00:02:46.650
May even works on the idea that you have a standard build lifecycle,

00:02:46.650 --> 00:02:51.290
a standard project structure and standard properties defined in a well known way on.

00:02:51.290 --> 00:02:53.850
As long as you stick to that structure or stick to the convention,

00:02:53.850 --> 00:02:54.400
if you will,

00:02:54.400 --> 00:02:57.510
then there's not really a need to have too much configuration.

00:02:57.510 --> 00:02:59.830
So is this idea of convention of a configuration,

00:02:59.830 --> 00:03:00.050
you know,

00:03:00.050 --> 00:03:01.220
stick to the conventions,

00:03:01.220 --> 00:03:01.990
put source files,

00:03:01.990 --> 00:03:05.100
whether supposed to go name things in the way they're supposed to be named,

00:03:05.100 --> 00:03:06.080
use them Evan builders.

00:03:06.080 --> 00:03:09.040
It's supposed to be used on this will lead to less configuration,

00:03:09.040 --> 00:03:11.600
which means you can't with very minimal palm files.

00:03:11.600 --> 00:03:11.920
So,

00:03:11.920 --> 00:03:12.010
yeah,

00:03:12.010 --> 00:03:13.720
let's have a look at what this is bringing to the table.

00:03:13.720 --> 00:03:17.790
So we're seeing that it brings to repositories in which of the default repositories in

00:03:17.790 --> 00:03:18.150
Melbourne,

00:03:18.150 --> 00:03:20.250
the so called MEV in central Repository.

00:03:20.250 --> 00:03:23.600
This is how may even knows to go to the Melbourne Central repository to tell more

00:03:23.600 --> 00:03:27.060
dependence is even though you don't specify in your pom XML file itself.

00:03:27.060 --> 00:03:27.370
And,

00:03:27.370 --> 00:03:27.480
um,

00:03:27.480 --> 00:03:27.660
Evan,

00:03:27.660 --> 00:03:29.210
you have two different types of repositories,

00:03:29.210 --> 00:03:30.500
one for dependencies.

00:03:30.500 --> 00:03:31.820
Regular dependence is that is,

00:03:31.820 --> 00:03:36.100
on 14 Plug in dependencies on Devon makes a distinction between the two.

00:03:36.100 --> 00:03:40.970
So that's why there are two interest here for each repository type scrolling down.

00:03:40.970 --> 00:03:41.790
Further Still,

00:03:41.790 --> 00:03:45.760
we've seen we've been setting some default properties for the build,

00:03:45.760 --> 00:03:47.260
so it's defining the project structure.

00:03:47.260 --> 00:03:47.860
In other words,

00:03:47.860 --> 00:03:49.610
source directory is pointing to source men.

00:03:49.610 --> 00:03:50.200
Java.

00:03:50.200 --> 00:03:51.340
That's one convention.

00:03:51.340 --> 00:03:53.940
The final name of the artifact is the artifact i.

00:03:53.940 --> 00:03:54.210
D.

00:03:54.210 --> 00:03:54.740
Hyphen,

00:03:54.740 --> 00:03:58.020
and then the version specified in the Palm File that would end.

00:03:58.020 --> 00:03:59.180
We've got Jordan War,

00:03:59.180 --> 00:04:00.690
depending on what the packaging type is,

00:04:00.690 --> 00:04:01.510
and even then,

00:04:01.510 --> 00:04:06.080
the war or the jar section of that again comes from the convention that it's the packaging

00:04:06.080 --> 00:04:06.470
type.

00:04:06.470 --> 00:04:07.460
We see some folders,

00:04:07.460 --> 00:04:10.100
its defining for resources as well.

00:04:10.100 --> 00:04:13.710
Then there's a plug in management section,

00:04:13.710 --> 00:04:17.610
which defines the versions of different plug ins which you're gonna be used to scroll down

00:04:17.610 --> 00:04:18.450
further still.

00:04:18.450 --> 00:04:25.580
And here we see other parts relating to which plug ins will be used and how they're

00:04:25.580 --> 00:04:26.830
attached to the build lifecycle.

00:04:26.830 --> 00:04:28.950
We'll see more about this in the build life cycles video.

00:04:28.950 --> 00:04:30.090
Now,

00:04:30.090 --> 00:04:32.510
the last thing will show you is the effective palm.

00:04:32.510 --> 00:04:37.950
So whereas maven brings to the table defaults in the Super Palm file and you specify your

00:04:37.950 --> 00:04:38.700
customization,

00:04:38.700 --> 00:04:38.990
Zaun,

00:04:38.990 --> 00:04:41.650
your projects build in your pom XML file.

00:04:41.650 --> 00:04:47.040
Mellon combines these together into emerged project object model on this is known as the

00:04:47.040 --> 00:04:47.980
effective palm.

00:04:47.980 --> 00:04:50.430
So we can see this effective palm in other words,

00:04:50.430 --> 00:04:53.950
that the full set of properties configuration and customization ins applicable to the

00:04:53.950 --> 00:04:56.450
current Memin project with the May even help plug in.

00:04:56.450 --> 00:04:58.650
And we're gonna use the effective pom girl.

00:04:58.650 --> 00:05:04.550
So if I just type MBN help effective Palm,

00:05:04.550 --> 00:05:14.680
then when we see here is the scroll to the top is the full set of properties on bill

00:05:14.680 --> 00:05:17.210
customization ins for the current project that we have.

00:05:17.210 --> 00:05:21.710
So some of these elements are brought in from our Pond XML file on other ones that brought

00:05:21.710 --> 00:05:23.720
in from the super palm so the first section,

00:05:23.720 --> 00:05:24.270
for example,

00:05:24.270 --> 00:05:28.270
where we have the dependency J unit that's brought in from our project down below.

00:05:28.270 --> 00:05:30.750
There we have the two repositories,

00:05:30.750 --> 00:05:32.250
which were brought in from the Super Palm.

00:05:32.250 --> 00:05:36.020
We also have other properties down below there in the build section,

00:05:36.020 --> 00:05:39.070
which are brought in from the super palm on DSO on and so forth.

00:05:39.070 --> 00:05:44.750
And now you know how the project object model is formed out off the Super Palm.

00:05:44.750 --> 00:05:46.040
To give the effective palm,

00:05:46.040 --> 00:05:49.440
you should be able to use this to better manage your bill projects with Kevin.

