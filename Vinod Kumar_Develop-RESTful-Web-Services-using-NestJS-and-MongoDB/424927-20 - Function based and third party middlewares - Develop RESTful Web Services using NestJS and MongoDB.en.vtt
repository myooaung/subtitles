WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.150
in this lecture,

00:00:01.150 --> 00:00:04.520
let's read a function as a middleware on the register,

00:00:04.520 --> 00:00:07.780
the same thing with our model to do so.

00:00:07.780 --> 00:00:14.450
I'm going to go toe my SRC folder rightly can say new five on the name of the file.

00:00:14.450 --> 00:00:22.020
I want to give it US cars dot middleware dot ts and I just want to export a function and I

00:00:22.020 --> 00:00:26.980
can read the function either in the form of an adult function or a regular function.

00:00:26.980 --> 00:00:29.180
Let's prefer to use the arrow function.

00:00:29.180 --> 00:00:36.050
I'm gonna say you're export const Ongoing export a function called enable cost,

00:00:36.050 --> 00:00:42.700
which is nothing but an arrow function on another function has a bunch of parameters.

00:00:42.700 --> 00:00:43.310
In this case,

00:00:43.310 --> 00:00:49.420
it's gonna be request response and the next and then we're going to use an arrow and then a

00:00:49.420 --> 00:00:50.750
curly bracket on.

00:00:50.750 --> 00:00:55.490
This is where we have to actually do the job off modifying the response headers.

00:00:55.490 --> 00:00:58.890
And if you want to interlace since for request response,

00:00:58.890 --> 00:01:02.620
then better to declare that with appropriate data type.

00:01:02.620 --> 00:01:06.460
We know that Arctic you is nothing but off type requests.

00:01:06.460 --> 00:01:08.440
This is going to come from express.

00:01:08.440 --> 00:01:09.060
I pressed.

00:01:09.060 --> 00:01:10.620
Enter again.

00:01:10.620 --> 00:01:16.200
The response is also off type of response coming from the express model.

00:01:16.200 --> 00:01:17.750
So press enter.

00:01:17.750 --> 00:01:19.840
Next is just a function.

00:01:19.840 --> 00:01:25.370
I'm going to say your function which is an interface which is part of the core Norges.

00:01:25.370 --> 00:01:30.010
We don't have to import anything now that I have the request response and next number at

00:01:30.010 --> 00:01:30.500
the end,

00:01:30.500 --> 00:01:33.570
I have to say next that is going to be done first.

00:01:33.570 --> 00:01:36.800
But before that I would like to add some response headers.

00:01:36.800 --> 00:01:41.790
So I'm going to say rest dog header which takes a name and value.

00:01:41.790 --> 00:01:45.860
So the name is basically what is the head of name that you want to give on?

00:01:45.860 --> 00:01:46.560
As for us,

00:01:46.560 --> 00:01:47.500
cross our agenda.

00:01:47.500 --> 00:01:48.710
So sharing its concern,

00:01:48.710 --> 00:01:51.390
we have to give at least a three off them.

00:01:51.390 --> 00:01:54.200
Number one is called access Control although origin,

00:01:54.200 --> 00:02:00.830
which follows only certain origins toe make a request to our restaurant point Most of the

00:02:00.830 --> 00:02:01.040
time,

00:02:01.040 --> 00:02:03.870
If you're creating an AP which can be accessed by anybody,

00:02:03.870 --> 00:02:05.930
you should give star alternately.

00:02:05.930 --> 00:02:09.250
You can give a list off I peer doses which are white listed.

00:02:09.250 --> 00:02:12.080
The 2nd 1 is access control,

00:02:12.080 --> 00:02:15.070
although methods which is a list off a load.

00:02:15.070 --> 00:02:17.900
Http Medals from the client for example,

00:02:17.900 --> 00:02:20.660
you may want toe restrict the clients toe,

00:02:20.660 --> 00:02:24.550
make only the get request and not post put or delete.

00:02:24.550 --> 00:02:27.130
The 3rd 1 is an optional one,

00:02:27.130 --> 00:02:32.750
which is the access control although headers which can restrict a certain headaches

00:02:32.750 --> 00:02:34.310
Otherwise all the headers are a load.

00:02:34.310 --> 00:02:40.310
But with this now I can say only certain kinds of headers are alone Let's go on out one by

00:02:40.310 --> 00:02:40.580
one.

00:02:40.580 --> 00:02:48.440
So the 1st 1 is basically access control alot origin like this on the value for that I'm

00:02:48.440 --> 00:02:53.270
gonna give it a star You can just give a list of I peer distance which are separate,

00:02:53.270 --> 00:02:54.150
is in comma.

00:02:54.150 --> 00:02:59.600
I'm going to duplicate the same thing by using option shifted down Arrow are all shift down

00:02:59.600 --> 00:03:06.030
arrow on windows on the 2nd 1 is gonna be the methods on the Macuxi is going to be a list

00:03:06.030 --> 00:03:06.590
off methods.

00:03:06.590 --> 00:03:14.720
I want to follow all the metrics possible so I can say you get post put deal it on a patch

00:03:14.720 --> 00:03:14.720
.

00:03:14.720 --> 00:03:22.960
The 3rd 1 is access control alot headers on you can give a list off all the Lord headers If

00:03:22.960 --> 00:03:27.400
you don't give all the headers would be a load like star But if you want to restrict the

00:03:27.400 --> 00:03:31.480
plane to send only content except on authorization,

00:03:31.480 --> 00:03:34.840
you can give it like this content dash type.

00:03:34.840 --> 00:03:36.880
That's one header comma,

00:03:36.880 --> 00:03:37.570
I can say,

00:03:37.570 --> 00:03:41.950
except and then probably authorization with this.

00:03:41.950 --> 00:03:46.380
Now our enable cars which is a function you can see right translated.

00:03:46.380 --> 00:03:50.820
The function that's assigned to this variable on that variable is being exported from this

00:03:50.820 --> 00:03:51.880
particular model.

00:03:51.880 --> 00:03:56.710
Now I can go and import this and register the same with our model.

00:03:56.710 --> 00:04:00.990
The registration process is same as the previous example.

00:04:00.990 --> 00:04:02.910
So I'm gonna go to the app model ts.

00:04:02.910 --> 00:04:05.750
I can have one or more middleweights in this list.

00:04:05.750 --> 00:04:07.160
They're all comma separated.

00:04:07.160 --> 00:04:09.920
This is going to be the 1st 1 Andi,

00:04:09.920 --> 00:04:16.280
I can give a comma and then say enable cars as the 2nd 1 enable cards have to be imported.

00:04:16.280 --> 00:04:21.340
So I'm gonna press command dot and then say imported from our cars dot middle way.

00:04:21.340 --> 00:04:23.820
So whenever a plane makes a request toe,

00:04:23.820 --> 00:04:28.350
any of these your girls lager middleware is the 1st 1 to receive the request.

00:04:28.350 --> 00:04:30.330
Once this has done its job,

00:04:30.330 --> 00:04:32.320
it's gonna call the next to function,

00:04:32.320 --> 00:04:34.110
which is nothing but the next middleware,

00:04:34.110 --> 00:04:39.850
which is enable cars and enable courses gonna actually add those additional headers,

00:04:39.850 --> 00:04:41.570
calls the next function,

00:04:41.570 --> 00:04:43.670
which is supposed to invoke the next imagery.

00:04:43.670 --> 00:04:44.030
Where,

00:04:44.030 --> 00:04:44.910
as you can see,

00:04:44.910 --> 00:04:47.150
I don't have any other middle well because of it.

00:04:47.150 --> 00:04:49.940
It simply goes to the intended controller.

00:04:49.940 --> 00:04:51.890
So let's go and check it out.

00:04:51.890 --> 00:04:53.880
Let's go to the patch on.

00:04:53.880 --> 00:04:57.230
You can see that this was the previous awkward we had got.

00:04:57.230 --> 00:04:58.100
Not only that,

00:04:58.100 --> 00:04:59.690
we have the response body here.

00:04:59.690 --> 00:05:03.100
We can also see the response headers and in the list of head.

00:05:03.100 --> 00:05:03.660
As you can see,

00:05:03.660 --> 00:05:08.140
there is explored by added by Express that also content type,

00:05:08.140 --> 00:05:11.690
which was nothing but a decision by nest urges.

00:05:11.690 --> 00:05:13.620
When we returned an object,

00:05:13.620 --> 00:05:18.330
so had we returned a primitive that could have been probably text a slash plane.

00:05:18.330 --> 00:05:19.110
Similarly,

00:05:19.110 --> 00:05:23.710
we have some content land which was automatically calculated based on what the length off

00:05:23.710 --> 00:05:30.340
this entire response on their a few more like E tag and the date and connection this time

00:05:30.340 --> 00:05:35.590
electric consent because we're sending a patch request to contact slash star,

00:05:35.590 --> 00:05:38.950
we should see a lot over here and then additional headers.

00:05:38.950 --> 00:05:41.040
Let's hope that's gonna work like that.

00:05:41.040 --> 00:05:47.210
Click on send So you can see that there is a love over here on the additional headers that

00:05:47.210 --> 00:05:48.420
we added over here.

00:05:48.420 --> 00:05:54.520
So the access control Hello origin star A load methods These are the methods that I gave

00:05:54.520 --> 00:05:57.170
and then there is a alone headers Similarly,

00:05:57.170 --> 00:05:59.710
if I go to the put request over here on,

00:05:59.710 --> 00:06:05.860
then click on send You can see we got a love over here as well as we got the response.

00:06:05.860 --> 00:06:10.010
If you go to the response headers once again you can see that we are seeing these

00:06:10.010 --> 00:06:11.620
additional headers over here.

00:06:11.620 --> 00:06:12.500
However,

00:06:12.500 --> 00:06:19.570
if I goto the get request and then send my request neither I see a long not I see those

00:06:19.570 --> 00:06:25.530
additional headers while we are able to write our own middle ways using either a class or a

00:06:25.530 --> 00:06:30.880
function There are a lot of third party members are also available For example toe enable

00:06:30.880 --> 00:06:35.840
course there is a middleweight called cars on toe enable security related additional

00:06:35.840 --> 00:06:36.430
headers.

00:06:36.430 --> 00:06:38.180
There is a middleware called helmet,

00:06:38.180 --> 00:06:38.830
for example.

00:06:38.830 --> 00:06:43.010
If I open chrome and look for helmet middleware,

00:06:43.010 --> 00:06:49.440
you can see that we are taken to this helmet Js where you can get some documentation.

00:06:49.440 --> 00:06:50.470
They basically say,

00:06:50.470 --> 00:06:52.690
Do an NPM install on,

00:06:52.690 --> 00:06:55.200
then start using that helmet on.

00:06:55.200 --> 00:06:58.250
If you want to use this in our application,

00:06:58.250 --> 00:07:05.810
we can simply do an NPM install first important in our APP model on then just I This helmet

00:07:05.810 --> 00:07:08.350
in the list off middle best that were already register.

00:07:08.350 --> 00:07:09.760
So let's give it a try.

00:07:09.760 --> 00:07:12.410
So I'm gonna go back toe the terminal over here,

00:07:12.410 --> 00:07:14.020
open a new tab.

00:07:14.020 --> 00:07:19.190
So I'm gonna go into my desktop nest providers Demo.

00:07:19.190 --> 00:07:21.130
That's the project location.

00:07:21.130 --> 00:07:23.330
I'm gonna die pure NPM.

00:07:23.330 --> 00:07:26.550
I are installed and then type your helmet.

00:07:26.550 --> 00:07:27.790
Chris Ender,

00:07:27.790 --> 00:07:32.530
This is going toe not only download that our North Models folder,

00:07:32.530 --> 00:07:36.120
but also acts that entry into our packaged or Jason.

00:07:36.120 --> 00:07:38.610
Let's go back to our server.

00:07:38.610 --> 00:07:41.730
Longs on go to the visual studio code.

00:07:41.730 --> 00:07:45.810
And now this is where I have registered a couple off middle.

00:07:45.810 --> 00:07:50.110
It's I can now say that I want a middleware from helmet.

00:07:50.110 --> 00:07:51.050
So first of all,

00:07:51.050 --> 00:07:58.430
let's import helmets or to import helmet you say import star as helmet From off course,

00:07:58.430 --> 00:08:00.920
the model name is called Helmet on.

00:08:00.920 --> 00:08:04.060
All have to do now is toe find its location.

00:08:04.060 --> 00:08:04.600
Typically,

00:08:04.600 --> 00:08:09.620
death suggested that you make that at the 1st 1 So I'm gonna go type your helmet and then

00:08:09.620 --> 00:08:11.230
put a comma with this.

00:08:11.230 --> 00:08:15.140
Now we have 1/3 party middleware,

00:08:15.140 --> 00:08:16.970
one class based middleware,

00:08:16.970 --> 00:08:18.770
one function basement away.

00:08:18.770 --> 00:08:22.050
Let's go back to our postman and see if it works.

00:08:22.050 --> 00:08:24.040
I'm gonna go back toe the postman here,

00:08:24.040 --> 00:08:30.630
send a request to patch and see if I get additional headers added by helmets on you Click

00:08:30.630 --> 00:08:32.010
on the send on.

00:08:32.010 --> 00:08:32.790
I got another.

00:08:32.790 --> 00:08:37.240
It says that it appears you have done something like Abdullah use helmet,

00:08:37.240 --> 00:08:39.760
but it is supposed to be done like this,

00:08:39.760 --> 00:08:41.350
which is not a motor function Call.

00:08:41.350 --> 00:08:44.750
Let's go back over here and add a bracket here.

00:08:44.750 --> 00:08:47.090
So we're calling the helmet function,

00:08:47.090 --> 00:08:48.680
which returns them everywhere.

00:08:48.680 --> 00:08:51.380
And that middleware is gonna be registered without a model.

00:08:51.380 --> 00:08:52.630
So let's go back quickly.

00:08:52.630 --> 00:08:56.820
Send the request on you can see that I got my logs.

00:08:56.820 --> 00:08:59.440
I got the headers that I added,

00:08:59.440 --> 00:09:00.850
which is the cards headers.

00:09:00.850 --> 00:09:06.320
But you can also see there is this ex Deena's prefects control X frame options,

00:09:06.320 --> 00:09:07.920
strict transport security.

00:09:07.920 --> 00:09:08.210
Exe,

00:09:08.210 --> 00:09:09.180
download options.

00:09:09.180 --> 00:09:13.590
Ex content of options on X X SS Prediction.

00:09:13.590 --> 00:09:17.620
So all these are additional leaders added by helmet.

00:09:17.620 --> 00:09:22.480
So this is how many ways can be practically used somewhere down the line.

00:09:22.480 --> 00:09:23.850
In the subsequent lectures,

00:09:23.850 --> 00:09:26.050
we're gonna create another middleware onda,

00:09:26.050 --> 00:09:30.590
that Middlebury supposed to check the request header for authorization tokens.

00:09:30.590 --> 00:09:31.660
On that tradition,

00:09:31.660 --> 00:09:34.480
tokens were generated when the user logs in.

00:09:34.480 --> 00:09:40.290
So if it'll we have toe add modify our delete our contact details,

00:09:40.290 --> 00:09:43.390
the user must be longing on once they use a lodged in,

00:09:43.390 --> 00:09:48.850
the user gets a token and we will read a middle way to check if the request contains the

00:09:48.850 --> 00:09:51.960
header called Authorization with a valid token.

00:09:51.960 --> 00:09:53.840
So that's all for now.

00:09:53.840 --> 00:09:55.190
See you in the next lecture.

