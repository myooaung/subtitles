WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.280
in this Jays pipes have to typical use cases transform import data toe the desert form,

00:00:06.280 --> 00:00:10.720
for example from string toe indigent are valued input data,

00:00:10.720 --> 00:00:16.160
and it's valid simply passed through unchanged other ways through an exception when the

00:00:16.160 --> 00:00:17.450
data is incorrect.

00:00:17.450 --> 00:00:18.600
In both cases,

00:00:18.600 --> 00:00:21.940
pipes operate on the arguments being processed by a controller.

00:00:21.940 --> 00:00:26.960
Road handler nest into possess a pipe just before the method is invoked on the pipe

00:00:26.960 --> 00:00:31.420
receives the arguments destined for the method on operates on them.

00:00:31.420 --> 00:00:33.520
Any transformation are validation.

00:00:33.520 --> 00:00:35.530
Operation takes place at that time,

00:00:35.530 --> 00:00:40.950
after which the route handler is involved with any potentially transformed arguments.

00:00:40.950 --> 00:00:45.390
Next comes with a number off built in pipes that you can use out of the box.

00:00:45.390 --> 00:00:49.550
You can also build your own custom pipes in this lecture.

00:00:49.550 --> 00:00:52.960
Let's see some of the building pipes to understand the same.

00:00:52.960 --> 00:00:55.110
Let's create a new project.

00:00:55.110 --> 00:00:56.590
I'm on my desktop.

00:00:56.590 --> 00:00:58.610
I'm going to issue the command nest.

00:00:58.610 --> 00:01:01.850
New messed dash pipes Dash Demo.

00:01:01.850 --> 00:01:04.160
This is going to create a brand new project.

00:01:04.160 --> 00:01:05.610
It's gonna ask me a question.

00:01:05.610 --> 00:01:07.080
Are you going to use NPM?

00:01:07.080 --> 00:01:07.760
Are young?

00:01:07.760 --> 00:01:14.000
I'm going to say NPM now that the project is really Let's clear the screen and city into

00:01:14.000 --> 00:01:15.100
our project folder,

00:01:15.100 --> 00:01:18.010
which is nothing but Nestor Dash pipes Demo.

00:01:18.010 --> 00:01:21.800
Start the development server by typing NPM.

00:01:21.800 --> 00:01:22.330
Run,

00:01:22.330 --> 00:01:23.770
start on,

00:01:23.770 --> 00:01:29.410
then colon Death and also open visual studio chord in the same project directory.

00:01:29.410 --> 00:01:30.880
Someone open a new tab.

00:01:30.880 --> 00:01:32.270
Check if I'm in the project.

00:01:32.270 --> 00:01:35.690
Military on I'm not so I'll say City Desktop,

00:01:35.690 --> 00:01:39.830
Nestor Dash Pipes Demo and then type called DOT.

00:01:39.830 --> 00:01:45.050
This will bring up the Visual Studio Court that's full screen and quickly make some changes

00:01:45.050 --> 00:01:46.140
to our APP.

00:01:46.140 --> 00:01:51.040
Controller tortillas will add the controller road called contacts.

00:01:51.040 --> 00:01:57.690
Let's get it off all the court inside this class and under a copy and paste in our A off

00:01:57.690 --> 00:02:02.250
contacts over here and write a function called Get By i D.

00:02:02.250 --> 00:02:09.030
Which takes ideas a perimeter and I'm supposed to return one of the contact based on the I

00:02:09.030 --> 00:02:09.390
D.

00:02:09.390 --> 00:02:14.020
So the idea is going to come from the You are a segments I'm gonna take here at the rate

00:02:14.020 --> 00:02:16.520
get slash colon I d.

00:02:16.520 --> 00:02:20.500
And this is something that I have to map to this whatever that is.

00:02:20.500 --> 00:02:26.530
Part of the you are a segment we can accident by using at the rate bottom and then take the

00:02:26.530 --> 00:02:28.050
name off the perimeter,

00:02:28.050 --> 00:02:30.090
which is colon idea given here.

00:02:30.090 --> 00:02:31.080
That's what I have to give.

00:02:31.080 --> 00:02:32.610
Whatever I have passed,

00:02:32.610 --> 00:02:34.790
that's going to be the suit into this variable.

00:02:34.790 --> 00:02:39.180
Now let's say if this particular idea is phoned in this Ari,

00:02:39.180 --> 00:02:41.250
we will assign that to a variable.

00:02:41.250 --> 00:02:45.490
Let's call it R C one equals toe the start contract.

00:02:45.490 --> 00:02:51.850
Start find we get one object at a time and then we're gonna check you see that I d triple

00:02:51.850 --> 00:02:53.360
equals toe idee.

00:02:53.360 --> 00:02:55.540
Then we will assign that to see one.

00:02:55.540 --> 00:02:58.820
And if C one is undefined so I can check here.

00:02:58.820 --> 00:02:59.420
If not,

00:02:59.420 --> 00:03:00.050
see one,

00:03:00.050 --> 00:03:03.200
we will throw an exception called new,

00:03:03.200 --> 00:03:04.950
not phone exception.

00:03:04.950 --> 00:03:07.190
This will give you for not for better,

00:03:07.190 --> 00:03:09.650
along with meaningful Jason content.

00:03:09.650 --> 00:03:12.250
But if C one exists,

00:03:12.250 --> 00:03:14.670
we're gonna simply say return See one.

00:03:14.670 --> 00:03:17.090
We have returned such a court earlier,

00:03:17.090 --> 00:03:20.450
but let's go and try the same thing in postman now.

00:03:20.450 --> 00:03:23.540
So I'm gonna type your http colon.

00:03:23.540 --> 00:03:32.120
Local host Colon 3000 slash contacts slash some number Notice that I have here 12 and three

00:03:32.120 --> 00:03:32.120
.

00:03:32.120 --> 00:03:35.350
So any number I type here I should be getting the details,

00:03:35.350 --> 00:03:36.180
however,

00:03:36.180 --> 00:03:40.550
when active consent it's coming back with for not for the reason,

00:03:40.550 --> 00:03:41.160
Father Days.

00:03:41.160 --> 00:03:44.350
Whatever I sent as part of the http request,

00:03:44.350 --> 00:03:46.810
everything will be considered as a string.

00:03:46.810 --> 00:03:47.700
For example,

00:03:47.700 --> 00:03:55.600
if I come down here and then just type a console log saying tight off Ivy ease and then

00:03:55.600 --> 00:03:57.640
I'll type your type off i d.

00:03:57.640 --> 00:04:00.020
You will see that on the console.

00:04:00.020 --> 00:04:02.000
It's going to tell that it is a string,

00:04:02.000 --> 00:04:05.350
whereas here digital numerical values,

00:04:05.350 --> 00:04:10.290
let's go make another request and see what happens in the console.

00:04:10.290 --> 00:04:14.120
You can see that it says type of idea is strength.

00:04:14.120 --> 00:04:20.480
So one of the solution we worked around earlier is that user double equals toe instead off

00:04:20.480 --> 00:04:21.710
single equals toe.

00:04:21.710 --> 00:04:25.580
But then the problem is that even for a string value,

00:04:25.580 --> 00:04:28.300
this will simply throw not formed exception.

00:04:28.300 --> 00:04:31.300
But I want to tell the user Dart strings are not alone.

00:04:31.300 --> 00:04:33.750
Only numerical values are expected.

00:04:33.750 --> 00:04:36.180
Let's give it a try and then check.

00:04:36.180 --> 00:04:37.500
When I type two here,

00:04:37.500 --> 00:04:39.130
you can see that it's going to work.

00:04:39.130 --> 00:04:42.850
That's because even though the input is still a string,

00:04:42.850 --> 00:04:48.110
we're actually checking whether string toe is equals toe numerical,

00:04:48.110 --> 00:04:48.540
too,

00:04:48.540 --> 00:04:50.180
but we're only taking the value,

00:04:50.180 --> 00:04:51.570
not actual data type.

00:04:51.570 --> 00:04:54.360
That's why we're actually supposed to use triple equals two,

00:04:54.360 --> 00:04:58.490
which is a strict comparison with value as a less data type.

00:04:58.490 --> 00:05:03.930
So if I go here and then look for Let's say is DF again,

00:05:03.930 --> 00:05:09.040
this airs De of his taken of the string on that string is comfort with each one off this,

00:05:09.040 --> 00:05:11.250
and eventually it's going to come back with another.

00:05:11.250 --> 00:05:16.450
On the other would be for not for not another that indicates it's an invalid input.

00:05:16.450 --> 00:05:19.360
So let's give it a try and check on.

00:05:19.360 --> 00:05:21.050
You can see that we got for not for,

00:05:21.050 --> 00:05:25.020
but not something that felt that it is an invalid data type.

00:05:25.020 --> 00:05:26.380
To fix this problem,

00:05:26.380 --> 00:05:32.110
we can make use off one of the building pipe called Parson Pipe on the way you can use is

00:05:32.110 --> 00:05:34.710
very simple for agday rate Param,

00:05:34.710 --> 00:05:36.630
along with the perimeter idea,

00:05:36.630 --> 00:05:44.080
you can also say here parts into pipe Parson pipe is defined in the nest,

00:05:44.080 --> 00:05:45.610
just common package.

00:05:45.610 --> 00:05:48.260
So we have imported the same thing over here.

00:05:48.260 --> 00:05:50.350
Now you can see it's going toe.

00:05:50.350 --> 00:05:51.230
Give another.

00:05:51.230 --> 00:05:54.750
If I do triple equals and supply a string.

00:05:54.750 --> 00:05:56.750
If I supply a number,

00:05:56.750 --> 00:05:58.350
it is received as a string.

00:05:58.350 --> 00:06:03.510
But this will convert that string into an integer and that is going to be given over here.

00:06:03.510 --> 00:06:08.060
So the pencil log should now say that type of idea is in number,

00:06:08.060 --> 00:06:09.400
so it's give it a try.

00:06:09.400 --> 00:06:10.170
First,

00:06:10.170 --> 00:06:11.960
let's send a valued idea.

00:06:11.960 --> 00:06:14.150
Let it to click on send.

00:06:14.150 --> 00:06:16.050
You can see that I got the data,

00:06:16.050 --> 00:06:17.890
and if I go to the console,

00:06:17.890 --> 00:06:20.350
you will see that it is type of ideas number.

00:06:20.350 --> 00:06:24.060
But if I go and type in a value off,

00:06:24.060 --> 00:06:29.580
let's say is dear and click on Send earlier we got for not for.

00:06:29.580 --> 00:06:36.200
But this time you can see we Garden Editor Court as 404 100 correspond toe bad requests,

00:06:36.200 --> 00:06:42.490
and it also gives me a meaningful message here that says validation fail numeric string is

00:06:42.490 --> 00:06:43.200
expected,

00:06:43.200 --> 00:06:47.250
So this is supposed to be a numeric string value over here.

00:06:47.250 --> 00:06:49.350
Let's take one more example.

00:06:49.350 --> 00:06:53.390
Let's say I have a handler in our controller,

00:06:53.390 --> 00:06:56.530
which can give me list off all the contacts,

00:06:56.530 --> 00:07:02.020
but I want to supply the page number on how many values that should come in a particular

00:07:02.020 --> 00:07:02.620
page.

00:07:02.620 --> 00:07:05.250
This is a very common concept called imagination.

00:07:05.250 --> 00:07:06.620
On the typically,

00:07:06.620 --> 00:07:09.440
these values are passed as quite distinct parameters.

00:07:09.440 --> 00:07:10.540
For example,

00:07:10.540 --> 00:07:11.310
contacts,

00:07:11.310 --> 00:07:14.410
question mark underscore Page equals to,

00:07:14.410 --> 00:07:14.760
let's say,

00:07:14.760 --> 00:07:19.400
one as a less underscore limit equals 2 10 Nowadays,

00:07:19.400 --> 00:07:22.990
I don't have a handler for this particular you are.

00:07:22.990 --> 00:07:24.790
Let's go and write the same.

00:07:24.790 --> 00:07:28.950
I'm gonna right here a new function that says Get all,

00:07:28.950 --> 00:07:31.540
which is supposed to take two variables.

00:07:31.540 --> 00:07:33.850
Let's call it a page on limit.

00:07:33.850 --> 00:07:34.920
However,

00:07:34.920 --> 00:07:39.640
the perimeters are nothing but underscore page on underscored limits so to us than the

00:07:39.640 --> 00:07:40.930
questing perimeters.

00:07:40.930 --> 00:07:41.620
First of all,

00:07:41.620 --> 00:07:43.250
it's our that they get.

00:07:43.250 --> 00:07:47.210
So this is a get handler for slash contacts,

00:07:47.210 --> 00:07:52.400
but they should correspond toe the quietest ing perimeter on just like how we used at the

00:07:52.400 --> 00:07:55.450
rate problem we can use here on great quality.

00:07:55.450 --> 00:08:00.390
The quietly decorator takes the name of the perimeter on notice that we have used

00:08:00.390 --> 00:08:01.280
underscored solar.

00:08:01.280 --> 00:08:03.050
It's parts that underscore Page,

00:08:03.050 --> 00:08:04.380
and similarly,

00:08:04.380 --> 00:08:10.710
we can stay here at the red quality and then supply underscored limit like this once again

00:08:10.710 --> 00:08:10.710
.

00:08:10.710 --> 00:08:12.160
Anything that you supply,

00:08:12.160 --> 00:08:14.020
whether it is quite a sting perimeter,

00:08:14.020 --> 00:08:16.250
are you are a Sigmund's are headers.

00:08:16.250 --> 00:08:19.110
Everything come to the store as a string on.

00:08:19.110 --> 00:08:21.250
But that is where I can also use here,

00:08:21.250 --> 00:08:22.550
the past in pipe.

00:08:22.550 --> 00:08:28.900
So I did a PR parsed into pipe and the same thing I'm gonna copy and then paste over here

00:08:28.900 --> 00:08:33.250
and just to check whether the transformation has taken place or not,

00:08:33.250 --> 00:08:40.160
Let's written an object that consist off page and limit their value and the data type.

00:08:40.160 --> 00:08:42.040
So I'm gonna take your page,

00:08:42.040 --> 00:08:42.910
Colon.

00:08:42.910 --> 00:08:46.260
I'll say value is nothing with the page variable.

00:08:46.260 --> 00:08:50.610
And then I take your type is nothing but type off page.

00:08:50.610 --> 00:08:52.250
That's nothing but a number.

00:08:52.250 --> 00:08:55.910
Our could be string if I don't use the parson pipe.

00:08:55.910 --> 00:08:58.550
So I'm gonna copy this and then paste over here,

00:08:58.550 --> 00:09:00.750
change the page toe.

00:09:00.750 --> 00:09:02.850
Let the limit Onda.

00:09:02.850 --> 00:09:05.400
Now we have a meaningful return value.

00:09:05.400 --> 00:09:07.700
Let's remove the last comma on.

00:09:07.700 --> 00:09:14.540
Go back to the postman and then send it request once again and you can see that we are able

00:09:14.540 --> 00:09:19.530
to get the value for page is one the value for limited stent.

00:09:19.530 --> 00:09:21.810
Both of them are number types.

00:09:21.810 --> 00:09:23.460
And if I go here,

00:09:23.460 --> 00:09:27.440
make this as two on 20 and click on Send.

00:09:27.440 --> 00:09:28.560
We do get this.

00:09:28.560 --> 00:09:29.370
However,

00:09:29.370 --> 00:09:31.550
if I don't supply a value,

00:09:31.550 --> 00:09:33.010
let's say I'm not supplying.

00:09:33.010 --> 00:09:34.950
Limit the consent.

00:09:34.950 --> 00:09:41.620
You can see we got 400 indicating that the value was expecting to be numeric.

00:09:41.620 --> 00:09:42.770
There was no value,

00:09:42.770 --> 00:09:44.970
so it is actually centre than none on.

00:09:44.970 --> 00:09:46.230
I'm getting that error.

00:09:46.230 --> 00:09:52.450
And this is where we can also use one more standard by which is called default value pipe.

00:09:52.450 --> 00:09:53.570
So I can say that,

00:09:53.570 --> 00:09:53.920
Hey,

00:09:53.920 --> 00:09:57.600
if there is a value missing for this page,

00:09:57.600 --> 00:09:59.760
we can tell that the page must be one.

00:09:59.760 --> 00:10:01.880
If there is a value missing for limit,

00:10:01.880 --> 00:10:03.850
I can say the default value is 10.

00:10:03.850 --> 00:10:05.160
To do so,

00:10:05.160 --> 00:10:09.850
you might have to use another pipe here called Default Value Pipe.

00:10:09.850 --> 00:10:12.750
But if you give a class here,

00:10:12.750 --> 00:10:16.250
the class is going to be instant stated by nest.

00:10:16.250 --> 00:10:18.840
But Nest doesn't know what value to supply,

00:10:18.840 --> 00:10:22.610
so instead we can take control and say Instead of supplying a class,

00:10:22.610 --> 00:10:27.070
we're going to supply an object so it's a new default value pipe off.

00:10:27.070 --> 00:10:31.460
11 is going to be the default value in case of pages missing.

00:10:31.460 --> 00:10:33.580
Similarly for limit.

00:10:33.580 --> 00:10:35.200
Let's give a default value.

00:10:35.200 --> 00:10:40.050
Often I'll put a comma new default value off then.

00:10:40.050 --> 00:10:41.170
However,

00:10:41.170 --> 00:10:43.380
this is also going toe given Adul.

00:10:43.380 --> 00:10:44.750
If I ascended across,

00:10:44.750 --> 00:10:46.570
you can see that we got the same error.

00:10:46.570 --> 00:10:50.760
And that's mainly because the pipes are evaluated in the sequence.

00:10:50.760 --> 00:10:54.950
So when passed in pipe is developing value for limit,

00:10:54.950 --> 00:10:58.420
it finds that limit is not being supplied to.

00:10:58.420 --> 00:11:01.610
It is none on now cannot be converted into an integer.

00:11:01.610 --> 00:11:05.840
So this is very important for us to supply the pipes in a sequence.

00:11:05.840 --> 00:11:09.800
So I have toe give the default value first on,

00:11:09.800 --> 00:11:12.280
then the actual parts in fight.

00:11:12.280 --> 00:11:14.050
So I'm gonna cut that from here,

00:11:14.050 --> 00:11:16.150
faced the same thing over here.

00:11:16.150 --> 00:11:17.050
Now,

00:11:17.050 --> 00:11:18.090
if I send this,

00:11:18.090 --> 00:11:21.850
you can see that I'm only sending page not limit.

00:11:21.850 --> 00:11:24.140
But I do get a limit,

00:11:24.140 --> 00:11:25.360
which is nothing but 10.

00:11:25.360 --> 00:11:27.130
That's the default value that I have given.

00:11:27.130 --> 00:11:27.870
Similarly,

00:11:27.870 --> 00:11:30.410
if I remove this underscore page,

00:11:30.410 --> 00:11:35.000
you will see that Page also will come with a value off one,

00:11:35.000 --> 00:11:36.450
which is the default that I have given.

00:11:36.450 --> 00:11:38.600
Let's go back to a visual studio.

00:11:38.600 --> 00:11:40.130
You can t in both the cases.

00:11:40.130 --> 00:11:44.220
I'm using the pipes along with the decorator at the rate Param,

00:11:44.220 --> 00:11:45.610
or in the great quality,

00:11:45.610 --> 00:11:48.440
even for at the rate body at the red Header,

00:11:48.440 --> 00:11:50.670
you can supply additional pipes.

00:11:50.670 --> 00:11:51.410
However,

00:11:51.410 --> 00:11:57.170
if you have a scenario where the pipe has to be a player on all the perimeters off your

00:11:57.170 --> 00:11:57.850
function,

00:11:57.850 --> 00:12:00.350
then instant off giving it over here.

00:12:00.350 --> 00:12:06.160
You can also give it at the function level instead of perimeter level to check this out.

00:12:06.160 --> 00:12:12.540
Let's remove this past in pipe from both the perimeters over here and here we come and then

00:12:12.540 --> 00:12:18.040
say use pipes and then give an R E R A sequence off pipes.

00:12:18.040 --> 00:12:20.750
Either pipe classes are pipe objects.

00:12:20.750 --> 00:12:21.510
For example.

00:12:21.510 --> 00:12:24.150
I can stay here farce into fight,

00:12:24.150 --> 00:12:26.320
and if I go back over here,

00:12:26.320 --> 00:12:27.610
let's check it out.

00:12:27.610 --> 00:12:28.990
Question mark underscored.

00:12:28.990 --> 00:12:30.060
Page equals toe,

00:12:30.060 --> 00:12:32.370
say three Onda underscore.

00:12:32.370 --> 00:12:34.150
Limit equals toe fire.

00:12:34.150 --> 00:12:35.650
Click on send.

00:12:35.650 --> 00:12:40.050
You can see that we got the data type converted in tow number.

00:12:40.050 --> 00:12:41.550
With this approach,

00:12:41.550 --> 00:12:43.250
we may have one small issue.

00:12:43.250 --> 00:12:47.380
Nor does the parts in pipe is executed first,

00:12:47.380 --> 00:12:52.050
So if you have not supplied a value for underscored limit or underscore page,

00:12:52.050 --> 00:12:57.450
there is no default value at this point in time parts in type will throw an exception.

00:12:57.450 --> 00:12:59.800
Even if I have given this default value pipe.

00:12:59.800 --> 00:13:00.600
For example,

00:13:00.600 --> 00:13:05.710
if I go here and then remove underscored limit and then click on send,

00:13:05.710 --> 00:13:07.910
you can see it through an exception,

00:13:07.910 --> 00:13:10.010
and then we got in other 400.

00:13:10.010 --> 00:13:12.180
So in scenarios like this,

00:13:12.180 --> 00:13:17.400
using pipes at the method level may not be useful in some scenarios like this,

00:13:17.400 --> 00:13:21.240
where if the user has not given any value for I D.

00:13:21.240 --> 00:13:23.050
I really want to throw an exception.

00:13:23.050 --> 00:13:23.570
That is,

00:13:23.570 --> 00:13:27.650
when I can use the parson pipe at the method level instead of perimeter level.

00:13:27.650 --> 00:13:31.600
We will see such an example when we're working with custom pipes,

00:13:31.600 --> 00:13:32.580
but for no,

00:13:32.580 --> 00:13:38.460
I will remove this and then use the same thing at the perimeter level after the default

00:13:38.460 --> 00:13:39.400
values given.

00:13:39.400 --> 00:13:46.050
I would like to give the past into pipe same thing for limit as well.

00:13:46.050 --> 00:13:49.750
Next comes with six different pipes out of the box.

00:13:49.750 --> 00:13:51.980
There is something called validation pipe,

00:13:51.980 --> 00:13:54.280
which can be used for validating the inputs.

00:13:54.280 --> 00:13:57.080
There is part star pipes,

00:13:57.080 --> 00:13:57.910
for example,

00:13:57.910 --> 00:14:04.980
parts in pie parts bullfight forced a pipe and parts you yo I d pipe another one that we

00:14:04.980 --> 00:14:07.720
have seen so far is the default value pipe.

00:14:07.720 --> 00:14:09.430
So that's all for this lecture.

00:14:09.430 --> 00:14:10.470
In the next lecture,

00:14:10.470 --> 00:14:13.150
let's see how to create our own custom pipe.

