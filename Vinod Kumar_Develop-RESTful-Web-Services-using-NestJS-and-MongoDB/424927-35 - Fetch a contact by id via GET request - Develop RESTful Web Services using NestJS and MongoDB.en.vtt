WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.400
in this lecture.

00:00:01.400 --> 00:00:04.360
Let's straight a get request handler toe,

00:00:04.360 --> 00:00:07.570
send in an idea as a part perimeter Onda,

00:00:07.570 --> 00:00:10.110
get a corresponding content object.

00:00:10.110 --> 00:00:13.860
And in case there is no document corresponding to the i d given,

00:00:13.860 --> 00:00:16.200
I should get the state s Korda's for.

00:00:16.200 --> 00:00:17.690
Not for first.

00:00:17.690 --> 00:00:21.680
Let's create a http get request supplying the I d.

00:00:21.680 --> 00:00:23.050
So I'm gonna copy this.

00:00:23.050 --> 00:00:26.020
You are all here and then go to a new tab.

00:00:26.020 --> 00:00:27.950
It's going to be a get request.

00:00:27.950 --> 00:00:33.940
The U released this slash and I D Let's border and I leave from here,

00:00:33.940 --> 00:00:38.290
so I'm gonna select the 2nd 1 Copy this and then paste over here.

00:00:38.290 --> 00:00:40.870
Since I don't have a handle for this,

00:00:40.870 --> 00:00:46.380
this is any We're going to be 404 Let's click on Send Onda.

00:00:46.380 --> 00:00:48.720
Fix this by going to the controller,

00:00:48.720 --> 00:00:51.010
adding a new function over here.

00:00:51.010 --> 00:00:57.730
The function is supposed to be decorated as at the red get with a part perimeter called

00:00:57.730 --> 00:00:58.340
idee.

00:00:58.340 --> 00:01:03.790
The name of the perimeter itself can be anything but We need to map this idea toe the

00:01:03.790 --> 00:01:04.630
variable,

00:01:04.630 --> 00:01:06.740
which can be given as idea again.

00:01:06.740 --> 00:01:10.450
I'm gonna call this as get one contact.

00:01:10.450 --> 00:01:12.400
Let's say I did it,

00:01:12.400 --> 00:01:12.570
but,

00:01:12.570 --> 00:01:12.950
um,

00:01:12.950 --> 00:01:15.850
which is gonna map this dynamic part?

00:01:15.850 --> 00:01:17.560
Perimeter toe variable.

00:01:17.560 --> 00:01:18.120
So I'm gonna say,

00:01:18.120 --> 00:01:23.020
here I d and then declare a variable called idly off string type.

00:01:23.020 --> 00:01:25.910
Let's open and close the bracket for the function on.

00:01:25.910 --> 00:01:31.590
All I have to do is tow make yourself a satirist function which currently doesn't exist and

00:01:31.590 --> 00:01:33.820
returned the value given to me by that function.

00:01:33.820 --> 00:01:34.690
So I'm gonna say here,

00:01:34.690 --> 00:01:40.970
return this dirt survey start get one contact or any other name.

00:01:40.970 --> 00:01:43.840
Doesn't matter because this function doesn't exist yet.

00:01:43.840 --> 00:01:46.040
So I'm gonna supply the perimeter I d.

00:01:46.040 --> 00:01:47.080
That I received.

00:01:47.080 --> 00:01:52.350
And then click your press commander dot on Mac controlled out on windows.

00:01:52.350 --> 00:01:56.770
You can see that It says declare a method called get one contact declared property called

00:01:56.770 --> 00:01:57.850
Get one contact.

00:01:57.850 --> 00:01:59.360
I want to create a method.

00:01:59.360 --> 00:02:05.200
So I'm gonna sell it this and go to the contacts terrorist RTs The function is added over

00:02:05.200 --> 00:02:06.000
here on the top.

00:02:06.000 --> 00:02:09.530
So I'm gonna cut this from here and then based at the end,

00:02:09.530 --> 00:02:12.020
the sequence of the functions do not matter.

00:02:12.020 --> 00:02:15.060
So let's get it off the throw statement from here.

00:02:15.060 --> 00:02:22.130
And I want to make is the contact model on written on object Corresponding the i d received

00:02:22.130 --> 00:02:22.890
as perimeter.

00:02:22.890 --> 00:02:30.450
So all day return this dot contact model dot Find by the This is the function bloated by

00:02:30.450 --> 00:02:31.110
mangoes,

00:02:31.110 --> 00:02:32.430
which takes ideas.

00:02:32.430 --> 00:02:33.240
A perimeter.

00:02:33.240 --> 00:02:38.100
Andi returns the value the return value is received over here.

00:02:38.100 --> 00:02:44.390
And then further written toe nest nest is going toe respond the user with the Jason washing

00:02:44.390 --> 00:02:45.250
off their object.

00:02:45.250 --> 00:02:50.720
So let's go back to the postman sending this request and see if we are able to get the

00:02:50.720 --> 00:02:51.750
actual data.

00:02:51.750 --> 00:02:57.120
So I'm gonna click on send and you can see we're able to get the contact corresponding to

00:02:57.120 --> 00:02:58.240
the idea I supply.

00:02:58.240 --> 00:02:59.280
However,

00:02:59.280 --> 00:03:01.150
if I supply and I did,

00:03:01.150 --> 00:03:02.420
that doesn't exist.

00:03:02.420 --> 00:03:03.350
For example,

00:03:03.350 --> 00:03:05.730
I'm gonna make some change to the last three characters.

00:03:05.730 --> 00:03:06.230
I'm gonna type.

00:03:06.230 --> 00:03:07.790
You're a one D,

00:03:07.790 --> 00:03:14.150
which is a valued Exodus Immel number as well as a valued mongo db object Ready,

00:03:14.150 --> 00:03:15.200
Hollywood.

00:03:15.200 --> 00:03:20.970
There is no data corresponding to this while I expected for not for you can see that I

00:03:20.970 --> 00:03:22.500
still get 200.

00:03:22.500 --> 00:03:24.250
Although there is no content.

00:03:24.250 --> 00:03:27.770
The reason behind this is if I go back over here,

00:03:27.770 --> 00:03:33.250
the return value from this particular function is not really a contact object,

00:03:33.250 --> 00:03:34.950
but a promise object.

00:03:34.950 --> 00:03:37.470
A promise has to outcomes.

00:03:37.470 --> 00:03:39.090
Either the promise gets a result.

00:03:39.090 --> 00:03:42.760
That means I get a contact object or the promise gets rejected.

00:03:42.760 --> 00:03:43.980
And here,

00:03:43.980 --> 00:03:49.190
since we're returning this back toe nest nest identifies that this is not a regular

00:03:49.190 --> 00:03:50.150
JavaScript object.

00:03:50.150 --> 00:03:53.240
But this is a promise object and Nestor's will result.

00:03:53.240 --> 00:03:57.250
The object which eventually becomes either a valued contact object,

00:03:57.250 --> 00:03:59.180
are an industry,

00:03:59.180 --> 00:04:02.850
and the same thing is returned back to the http client.

00:04:02.850 --> 00:04:06.880
So if I want to handle the promise resolution by myself,

00:04:06.880 --> 00:04:09.250
then I have toe collect this promise.

00:04:09.250 --> 00:04:13.460
So I'll say Let probably let's call it S p r equals two.

00:04:13.460 --> 00:04:16.690
And if PR is result to a valid contract object,

00:04:16.690 --> 00:04:17.360
I have to return.

00:04:17.360 --> 00:04:20.390
The same fpr is result to an empty string.

00:04:20.390 --> 00:04:25.440
Then I have to throw a not phoned exception in the earlier days of JavaScript working with

00:04:25.440 --> 00:04:27.830
the promise object waas Little difficult,

00:04:27.830 --> 00:04:31.350
but with the introduction off a think await keywords,

00:04:31.350 --> 00:04:33.950
handling promises becomes very easy.

00:04:33.950 --> 00:04:34.970
For example,

00:04:34.970 --> 00:04:39.040
we know that on the right hand side is a promise that is ascent over here.

00:04:39.040 --> 00:04:41.290
But Instead of assigning the promise to this,

00:04:41.290 --> 00:04:47.220
I can say let the promise be resolved so I'm gonna evade that process.

00:04:47.220 --> 00:04:52.050
So which means that the promise will be resolved first and the resort where you will be

00:04:52.050 --> 00:04:52.750
assigned today.

00:04:52.750 --> 00:04:53.110
So no,

00:04:53.110 --> 00:04:54.450
this is no longer a promise,

00:04:54.450 --> 00:04:57.350
but this would be a valued contact object.

00:04:57.350 --> 00:05:00.580
And now I can check your If see,

00:05:00.580 --> 00:05:02.980
that means it is a valid contract object.

00:05:02.980 --> 00:05:07.400
Oregon's A if not see where it is an empty string are undefined,

00:05:07.400 --> 00:05:09.490
and I can say throw new,

00:05:09.490 --> 00:05:11.810
not phone exception like this.

00:05:11.810 --> 00:05:15.030
And in case if C is a valued contact object,

00:05:15.030 --> 00:05:15.770
I'm gonna say,

00:05:15.770 --> 00:05:16.560
written c,

00:05:16.560 --> 00:05:19.570
you can see that there is one other over here.

00:05:19.570 --> 00:05:23.560
That's because if you're using an await keyword inside a function,

00:05:23.560 --> 00:05:26.220
the function has to be marked as he think.

00:05:26.220 --> 00:05:27.850
So I'm gonna do the same thing.

00:05:27.850 --> 00:05:32.970
And now my function is really let's go back to the postman and try the same thing.

00:05:32.970 --> 00:05:36.650
So this is a non existing idee I click on send.

00:05:36.650 --> 00:05:41.760
I do get for not for but if I send a valued request,

00:05:41.760 --> 00:05:45.350
then I should get the corresponding contact object.

00:05:45.350 --> 00:05:48.990
You can also try sending some arbitrary value here.

00:05:48.990 --> 00:05:49.740
For example,

00:05:49.740 --> 00:05:51.520
a SDF No,

00:05:51.520 --> 00:05:56.920
not that This is going to be assumed as a valued mongo DB object really format.

00:05:56.920 --> 00:05:57.970
But this is not.

00:05:57.970 --> 00:06:01.470
It is supposed to be a 12 bite hexi decimal value.

00:06:01.470 --> 00:06:04.070
This will result into an exception.

00:06:04.070 --> 00:06:07.480
Buy mangos on that exception will cause ever 500.

00:06:07.480 --> 00:06:08.630
When active consent,

00:06:08.630 --> 00:06:13.150
you can see that we got status called 500 internal server error.

00:06:13.150 --> 00:06:14.390
If you want,

00:06:14.390 --> 00:06:20.290
you can write your own subclass offer http exception plus and then throw the same thing to

00:06:20.290 --> 00:06:22.040
get a customized other message,

00:06:22.040 --> 00:06:23.450
which we have done in the past.

00:06:23.450 --> 00:06:26.350
So that's all for this lecture.

00:06:26.350 --> 00:06:27.600
See you in the next one.

