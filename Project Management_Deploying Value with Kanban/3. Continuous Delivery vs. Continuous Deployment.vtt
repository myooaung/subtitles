WEBVTT
1
00:00:00.940 --> 00:00:07.440
Now let's go a little deeper into continuous delivery and continuous deployment.

2
00:00:07.440 --> 00:00:11.610
With continuous delivery, you deploy to production only when you want to.

3
00:00:11.610 --> 00:00:14.700
This could be done by either pushing a button to install in production,

4
00:00:14.700 --> 00:00:19.270
sending an email to operations or other overt action the dev team will take.

5
00:00:19.270 --> 00:00:22.000
So continuous delivery only takes you so far,

6
00:00:22.000 --> 00:00:25.400
and is the culmination of the continuous integration process,

7
00:00:25.400 --> 00:00:29.000
whereas continuous deployment is where there is no human intervention,

8
00:00:29.000 --> 00:00:32.760
but is automatically deployed into production following all the rules

9
00:00:32.760 --> 00:00:36.510
you set up in the path from backlog to deployment.

10
00:00:36.510 --> 00:00:40.290
Important point, so to have continuous deployment,

11
00:00:40.290 --> 00:00:44.360
you need to have continuous integration flowing completely and smoothly into

12
00:00:44.360 --> 00:00:47.300
continuous deployment and automatically on to production.

13
00:00:47.300 --> 00:00:49.630
Now, this still kind of scares me to this day,

14
00:00:49.630 --> 00:00:50.920
but if you can do it,

15
00:00:50.920 --> 00:00:53.460
then it's the best way to have a continuously flowing

16
00:00:53.460 --> 00:00:57.940
value stream from backlog to production.

17
00:00:57.940 --> 00:00:59.860
Is continuous deployment risky?

18
00:00:59.860 --> 00:01:03.790
I say yes, and I mean yes it's risky if you are not doing it.

19
00:01:03.790 --> 00:01:07.080
Continuous deployment automatically deploying builds directly into

20
00:01:07.080 --> 00:01:09.710
production has been around for about 15 years.

21
00:01:09.710 --> 00:01:12.560
If you are not doing continuous deployment, don't be alarmed.

22
00:01:12.560 --> 00:01:16.110
It has taken time to take hold since so many organizations

23
00:01:16.110 --> 00:01:18.120
find that approach to be very risky.

24
00:01:18.120 --> 00:01:19.030
Take Google Chrome.

25
00:01:19.030 --> 00:01:19.640
In the past,

26
00:01:19.640 --> 00:01:22.760
you would have to take the action to download and install the latest build,

27
00:01:22.760 --> 00:01:26.540
and now, if you choose to, the new releases are automatically installed for you.

28
00:01:26.540 --> 00:01:29.340
In a way, that's a continuous deployed product.

29
00:01:29.340 --> 00:01:32.180
What comes with these builds nowadays is mechanisms to

30
00:01:32.180 --> 00:01:35.430
monitor the health of the install and monitor the usage of

31
00:01:35.430 --> 00:01:37.140
the program or release as well.

32
00:01:37.140 --> 00:01:39.920
The monitoring will be sending back data to the mothership,

33
00:01:39.920 --> 00:01:40.520
if you will,

34
00:01:40.520 --> 00:01:44.240
to provide inputs into improving the next build and the next deployment.

35
00:01:44.240 --> 00:01:48.790
So some of the more robust DevOps platforms have the tools and methods to

36
00:01:48.790 --> 00:01:51.660
provide your applications with monitoring capabilities.

37
00:01:51.660 --> 00:01:53.780
I'll talk more about DevOps in a few slides.

38
00:01:53.780 --> 00:01:57.390
Obviously, with continuous deployment, the build will be automatically built,

39
00:01:57.390 --> 00:02:00.040
that is compiled, scripts prepared, and all that.

40
00:02:00.040 --> 00:02:02.750
If issues or feedback comes up in that process,

41
00:02:02.750 --> 00:02:05.140
then you can review the issues and modify the build

42
00:02:05.140 --> 00:02:06.710
process and/or fix the errors.

43
00:02:06.710 --> 00:02:08.930
If an application is being installed and it fails,

44
00:02:08.930 --> 00:02:11.430
the DevOps platform needs to be able to roll back

45
00:02:11.430 --> 00:02:13.690
to the last known good release.

46
00:02:13.690 --> 00:02:16.650
But this is the way of the future, and the future is now,

47
00:02:16.650 --> 00:02:21.340
so continuous deployment is here to stay.

48
00:02:21.340 --> 00:02:24.350
I'd like to emphasize a few benefits of continuous deployment.

49
00:02:24.350 --> 00:02:26.570
You can eliminate manually installing software,

50
00:02:26.570 --> 00:02:28.580
which is a very error‑prone process.

51
00:02:28.580 --> 00:02:29.310
Once automated,

52
00:02:29.310 --> 00:02:32.540
you can monitor and gather feedback to improve the process of deployment.

53
00:02:32.540 --> 00:02:36.130
Remember how we want a Kanban value stream to be as frictionless as possible?

54
00:02:36.130 --> 00:02:39.320
Continuous deployment enables deployments to be frictionless.

55
00:02:39.320 --> 00:02:40.880
If you have all the pieces in place,

56
00:02:40.880 --> 00:02:43.770
you might consider not even having a pre‑production environment.

57
00:02:43.770 --> 00:02:44.400
Let's face it.

58
00:02:44.400 --> 00:02:48.590
Almost every pre‑production environment I have seen is not a copy of production,

59
00:02:48.590 --> 00:02:51.910
and usually that is either impossible to do or outrageously expensive,

60
00:02:51.910 --> 00:02:54.820
so usually a test environment or pre‑production can only

61
00:02:54.820 --> 00:02:56.560
test a portion of your system anyway.

62
00:02:56.560 --> 00:02:58.880
If you need to do specialize pre‑production environments,

63
00:02:58.880 --> 00:03:02.000
build them only for the pieces or components that make sense to,

64
00:03:02.000 --> 00:03:04.180
and that will also save you a lot of time and money.

65
00:03:04.180 --> 00:03:06.820
There's a multitude of DevOps tools in the market that will

66
00:03:06.820 --> 00:03:08.870
support the entire continuous deployment,

67
00:03:08.870 --> 00:03:10.230
and we will mention some later.

68
00:03:10.230 --> 00:03:12.760
Okay, I've mentioned DevOps a few times so far.

69
00:03:12.760 --> 00:03:13.760
In the next section,

70
00:03:13.760 --> 00:03:21.000
I will define DevOps and talk about how it bridges the gap between continuous integration, continuous deployment.

