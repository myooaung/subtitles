WEBVTT
1
00:00:01.040 --> 00:00:04.960
Now let's look at using version control systems with Kanban, and in particular,

2
00:00:04.960 --> 00:00:08.240
branching and merging.

3
00:00:08.240 --> 00:00:11.970
Now let's go through an example of using a version control system with Kanban.

4
00:00:11.970 --> 00:00:12.790
So on the left,

5
00:00:12.790 --> 00:00:15.740
we have a typical Kanban backlog with cards organized by

6
00:00:15.740 --> 00:00:20.150
priority 1, 2, 3, and some nice to haves.

7
00:00:20.150 --> 00:00:24.070
So if I'm a resource in the first value stream step and then I run an example,

8
00:00:24.070 --> 00:00:28.140
it is specify, I pull a work item from the priority 1 backlog.

9
00:00:28.140 --> 00:00:32.680
I may choose to use the Kanban work item ID as the potential branch name.

10
00:00:32.680 --> 00:00:36.030
Now depending on how automated you are and if you are using separate

11
00:00:36.030 --> 00:00:39.670
systems, one for Kanban and one from version control, these should be

12
00:00:39.670 --> 00:00:42.060
linked electronically or by name of course.

13
00:00:42.060 --> 00:00:46.630
Now I use the VCS to create a branch from the main branch named WI456

14
00:00:46.630 --> 00:00:51.770
for the Kanban work item 456. So now I am all set to begin development

15
00:00:51.770 --> 00:00:59.040
on the Kanban work item 456, and I'm using the branch name WI456.

16
00:00:59.040 --> 00:01:01.550
Merging from mainline to your dev branch.

17
00:01:01.550 --> 00:01:03.750
Here is our mainline version control code.

18
00:01:03.750 --> 00:01:07.660
Think of this like a timeline, it is the pristine production code.

19
00:01:07.660 --> 00:01:11.340
There is no other representation of what is in production, period.

20
00:01:11.340 --> 00:01:14.110
So on Day 1 say we're going to create a new branch.

21
00:01:14.110 --> 00:01:18.370
We will name the branch WI456 like I mentioned on my previous example.

22
00:01:18.370 --> 00:01:19.720
So now on Day 1,

23
00:01:19.720 --> 00:01:22.930
you are developing your current work item assignment in your own branch.

24
00:01:22.930 --> 00:01:26.080
Your branch, that is, your work will move forward with time.

25
00:01:26.080 --> 00:01:29.380
Now, on Day 2, the mainline was updated by a merge up,

26
00:01:29.380 --> 00:01:31.970
if you will, by user X. We will talk more about

27
00:01:31.970 --> 00:01:33.780
merge ups in a minute, but for now,

28
00:01:33.780 --> 00:01:37.880
the production mainline of code has changed since you last did a merge down.

29
00:01:37.880 --> 00:01:39.620
So a good VC system,

30
00:01:39.620 --> 00:01:43.040
a good version control system should alert you. On Day 3, you

31
00:01:43.040 --> 00:01:45.040
are informed of this change to the mainline,

32
00:01:45.040 --> 00:01:48.360
either by an email or maybe an alert from your VCS, and you

33
00:01:48.360 --> 00:01:50.630
should therefore merge down into your branch,

34
00:01:50.630 --> 00:01:54.380
compile, and build, and validate before you proceed further on your work.

35
00:01:54.380 --> 00:01:56.340
Sometimes this is known as rebasing.

36
00:01:56.340 --> 00:02:01.240
Then on Day 5, the mainline codebase is updated again, but this time by user Y.

37
00:02:01.240 --> 00:02:03.710
You are informed of this change in the mainline either by

38
00:02:03.710 --> 00:02:06.720
an email or maybe an alert from your VCS and you merge

39
00:02:06.720 --> 00:02:08.510
down into your branch again.

40
00:02:08.510 --> 00:02:12.960
Compile and build and validate before you proceed further on your work.

41
00:02:12.960 --> 00:02:16.710
As you can see, you might be pretty busy refreshing or rebasing your branch.

42
00:02:16.710 --> 00:02:20.680
Here is a tip, don't wait until you have a ton of rebasing work to do.

43
00:02:20.680 --> 00:02:24.470
Typically, your team will discuss and agree on your rebasing policies.

44
00:02:24.470 --> 00:02:26.170
Follow your team's policies.

45
00:02:26.170 --> 00:02:28.220
The longer your work takes to develop,

46
00:02:28.220 --> 00:02:31.690
the more likely that other merges into the main line will take place.

47
00:02:31.690 --> 00:02:35.130
If you're Version Control tool is capable of alerting you when the

48
00:02:35.130 --> 00:02:38.520
parent code base, and in this case, the main line, has been updated,

49
00:02:38.520 --> 00:02:42.630
then you would know you have an extra task to do. Again, don't wait to

50
00:02:42.630 --> 00:02:45.500
the end of your task to merge, build, and validate.

51
00:02:45.500 --> 00:02:49.110
You will regret it. Whenever you are alerted, do a merge down,

52
00:02:49.110 --> 00:02:52.210
rebase your code, and keep working because you never know what

53
00:02:52.210 --> 00:02:55.470
you'll find and that's the whole point of this process is to

54
00:02:55.470 --> 00:02:57.530
find issues and errors earlier.

55
00:02:57.530 --> 00:03:03.240
We want to move left upstream and find things earlier.

56
00:03:03.240 --> 00:03:06.600
Would you create a new branch for each work item?

57
00:03:06.600 --> 00:03:08.420
I say it depends.

58
00:03:08.420 --> 00:03:10.050
Here are a few rules of thumb.

59
00:03:10.050 --> 00:03:13.430
Well, don't have too many branches too much to keep track of.

60
00:03:13.430 --> 00:03:16.300
Don't have too few branches where maybe you have 10

61
00:03:16.300 --> 00:03:19.370
developers all working in the same branch, but your team

62
00:03:19.370 --> 00:03:20.910
will figure out what works best.

63
00:03:20.910 --> 00:03:23.480
I think these decisions are environmental, that is

64
00:03:23.480 --> 00:03:25.740
the people, skills, type of work,

65
00:03:25.740 --> 00:03:30.130
the culture, and other attributes, but I do recommend having a branch between

66
00:03:30.130 --> 00:03:33.840
the main or mainline branch and the dev work item branches.

67
00:03:33.840 --> 00:03:35.190
For some of my examples,

68
00:03:35.190 --> 00:03:38.210
I show branching off of the main directly to the work item.

69
00:03:38.210 --> 00:03:41.540
That is really to keep the slide simpler, but I do believe you

70
00:03:41.540 --> 00:03:44.540
need one between the main and the work item.

71
00:03:44.540 --> 00:03:48.920
I like having a release branch or multiple release branches.

72
00:03:48.920 --> 00:03:53.000
You see, releases come and go, that is good, but if you have a dev branch,

73
00:03:53.000 --> 00:03:57.080
well, that'll hang around forever and some issues may arise over time.

74
00:03:57.080 --> 00:03:58.510
The only branch, if you will,

75
00:03:58.510 --> 00:04:02.560
that I want to hang around forever is the main or mainline code base.

76
00:04:02.560 --> 00:04:05.740
Remember, one or more devs can work within the same branch,

77
00:04:05.740 --> 00:04:10.140
so not all work items pulled into the value stream may require its own branch.

78
00:04:10.140 --> 00:04:10.740
Lastly,

79
00:04:10.740 --> 00:04:14.290
these rules of thumb seem to work well in the environments I have managed,

80
00:04:14.290 --> 00:04:16.670
but there is no one way to do anything.

81
00:04:16.670 --> 00:04:18.050
What is important, though,

82
00:04:18.050 --> 00:04:20.970
is that you and your team have agreed on what your best

83
00:04:20.970 --> 00:04:23.260
practices are for branching and merging and,

84
00:04:23.260 --> 00:04:28.940
for that matter, the entire use of your version control system.

85
00:04:28.940 --> 00:04:31.770
Merging down is merging code from a parent branch

86
00:04:31.770 --> 00:04:33.490
into a work in progress branch.

87
00:04:33.490 --> 00:04:36.680
Here are the rules of thumb when you are the developer and you need to merge

88
00:04:36.680 --> 00:04:40.720
down from the mainline or other higher level branch. It is a best practice to

89
00:04:40.720 --> 00:04:44.580
merge these changes from the related parent branch into your working branch

90
00:04:44.580 --> 00:04:48.560
frequently. Merging new changes into the branch helps decrease the likelihood of

91
00:04:48.560 --> 00:04:50.800
any complexity of a merge conflict.

92
00:04:50.800 --> 00:04:53.910
Your slogan should be merge early and merge often.

93
00:04:53.910 --> 00:04:57.270
Don't wait until you are all done with your branch before you merge down.

94
00:04:57.270 --> 00:05:01.100
You may have a ton of work to do and many conflicts. Use branches for

95
00:05:01.100 --> 00:05:05.170
spikes too. Developers create branches to experiment in isolation, this

96
00:05:05.170 --> 00:05:07.070
keeps the overall product stable.

97
00:05:07.070 --> 00:05:09.650
It is a best practice to update these working branches

98
00:05:09.650 --> 00:05:11.840
with changes in related parent branches.

99
00:05:11.840 --> 00:05:16.200
If your work item was a validate task or a spike task and you have your results,

100
00:05:16.200 --> 00:05:19.350
you could either kill off the branch or keep it around in case other

101
00:05:19.350 --> 00:05:22.040
developers may need to get to your code and reuse it.

102
00:05:22.040 --> 00:05:24.080
Use meaningful naming conventions,

103
00:05:24.080 --> 00:05:27.360
especially if the VCS and the Kanban management system are

104
00:05:27.360 --> 00:05:30.720
two distinct tools and you need to connect the dots by

105
00:05:30.720 --> 00:05:32.750
strictly following naming conventions.

106
00:05:32.750 --> 00:05:33.380
For example,

107
00:05:33.380 --> 00:05:38.520
work item 123 in a Kanban system would be a branch maybe WI123 in

108
00:05:38.520 --> 00:05:41.400
the VCS. Branches shouldn't be around forever.

109
00:05:41.400 --> 00:05:44.760
Branches should only live as long as necessary, otherwise,

110
00:05:44.760 --> 00:05:45.920
you'll have a million of them.

111
00:05:45.920 --> 00:05:48.610
Having too many branches adds complexity.

112
00:05:48.610 --> 00:05:52.540
This increases the risk of using or merging to the wrong branch.

113
00:05:52.540 --> 00:05:54.180
Use branching policies.

114
00:05:54.180 --> 00:05:57.270
The activity of branching should have a single policy for who can

115
00:05:57.270 --> 00:06:00.950
make changes, when builds occur, what tests to run,

116
00:06:00.950 --> 00:06:01.610
etc.

117
00:06:01.610 --> 00:06:03.630
This should not be just some random activity.

118
00:06:03.630 --> 00:06:07.040
Get it all figured out for your team and follow your policies.

119
00:06:07.040 --> 00:06:12.090
All branches in the original mainline have owners. Appoint a single owner

120
00:06:12.090 --> 00:06:15.440
for each branch to resolve any issues that may arise.

121
00:06:15.440 --> 00:06:20.320
This puts someone clearly in charge and there is no fuzz on who is responsible.

122
00:06:20.320 --> 00:06:23.310
Usually only leads, PMs, or version control managers

123
00:06:23.310 --> 00:06:25.900
will make branches or do the merge ups.

124
00:06:25.900 --> 00:06:29.050
All devs typically may do the merge downs, it depends on

125
00:06:29.050 --> 00:06:30.730
your environment, and your situation,

126
00:06:30.730 --> 00:06:34.600
and your policies. Relate branches to releases or milestones.

127
00:06:34.600 --> 00:06:38.640
With most projects, releases have to be built while development continues.

128
00:06:38.640 --> 00:06:41.070
Create branches to isolate a release so future

129
00:06:41.070 --> 00:06:42.890
development can continue in parallel.

130
00:06:42.890 --> 00:06:45.050
So if a team is working on release four,

131
00:06:45.050 --> 00:06:47.470
there is nothing to say that release five isn't also

132
00:06:47.470 --> 00:06:49.620
underway and maybe even release six.

133
00:06:49.620 --> 00:06:58.000
You could decide on what's best. Then all devs working on release four would have their own child branches off of release four.

