WEBVTT
1
00:00:01.240 --> 00:00:03.320
Now let's talk about version control.

2
00:00:03.320 --> 00:00:07.210
You can't do continuous integration without rockâ€‘solid version control

3
00:00:07.210 --> 00:00:10.290
systems and disciplined engineering best practices.

4
00:00:10.290 --> 00:00:11.760
Both are required.

5
00:00:11.760 --> 00:00:13.140
The first one is easy.

6
00:00:13.140 --> 00:00:14.230
It's just a tool.

7
00:00:14.230 --> 00:00:17.990
But can you motivate, guide, and lead your team of engineers to create

8
00:00:17.990 --> 00:00:21.540
even better best practices leading to superior software?

9
00:00:21.540 --> 00:00:24.540
I think you can.

10
00:00:24.540 --> 00:00:27.130
Let's hit some key concepts of version control.

11
00:00:27.130 --> 00:00:30.590
Version control systems are a category of software tools that help

12
00:00:30.590 --> 00:00:33.090
a software team manage changes to source code.

13
00:00:33.090 --> 00:00:34.380
Well, that's pretty much it.

14
00:00:34.380 --> 00:00:37.670
You need to know what the most current representation of the latest

15
00:00:37.670 --> 00:00:40.940
production build is in any earlier builds or versions.

16
00:00:40.940 --> 00:00:43.090
Version control software keeps track of every

17
00:00:43.090 --> 00:00:45.120
modification to the code in a database.

18
00:00:45.120 --> 00:00:48.640
I am sure everyone has used or experienced one tool or another.

19
00:00:48.640 --> 00:00:52.880
Even if you are a single developer, you should always use version control.

20
00:00:52.880 --> 00:00:56.080
The database that keeps all of this information organized is known as

21
00:00:56.080 --> 00:00:59.440
the repository and sometimes referred to as the repo.

22
00:00:59.440 --> 00:01:02.960
So a repo is a database or structure which stores the source code

23
00:01:02.960 --> 00:01:05.940
itself and all of the metadata for those files.

24
00:01:05.940 --> 00:01:09.700
Some of the metadata that a repository contains includes a historical

25
00:01:09.700 --> 00:01:12.890
record of changes in the repository, who made the changes,

26
00:01:12.890 --> 00:01:15.420
notes on the changes, and much, much more.

27
00:01:15.420 --> 00:01:17.710
In a repo, your app will have a main branch,

28
00:01:17.710 --> 00:01:20.750
which is the latest and greatest fully tested and

29
00:01:20.750 --> 00:01:22.680
functional code that's running in production.

30
00:01:22.680 --> 00:01:24.270
That is the main branch.

31
00:01:24.270 --> 00:01:28.110
It has many other names in practice, such as mainline, integration,

32
00:01:28.110 --> 00:01:32.440
trunk, baseline, master, or others. Pick something that works for you.

33
00:01:32.440 --> 00:01:36.940
Now let's look a little deeper into the features of a repo.

34
00:01:36.940 --> 00:01:40.340
Here are the key features of version control. The technique of code

35
00:01:40.340 --> 00:01:43.680
branching enables software development teams to work on different parts

36
00:01:43.680 --> 00:01:46.080
of a project without impacting each other.

37
00:01:46.080 --> 00:01:48.820
Teams can more efficiently organize work on a shared

38
00:01:48.820 --> 00:01:51.250
codebase by branching and later merging.

39
00:01:51.250 --> 00:01:55.410
A single branch is a copy of a codebase managed in a version control system.

40
00:01:55.410 --> 00:01:58.640
Branching helps software development teams work in parallel.

41
00:01:58.640 --> 00:02:02.340
It separates out work in progress from tested and stable code.

42
00:02:02.340 --> 00:02:04.930
The codebase in a version control system is often

43
00:02:04.930 --> 00:02:09.200
referred to as the trunk, baseline, master, mainline, or just playing main.

44
00:02:09.200 --> 00:02:11.010
Actually, you can call it anything you want,

45
00:02:11.010 --> 00:02:14.670
but picking an industrywide term is likely better. Developers or others

46
00:02:14.670 --> 00:02:18.700
create branches originating either directly or indirectly from the main line

47
00:02:18.700 --> 00:02:21.440
to develop an isolation from the main codebase.

48
00:02:21.440 --> 00:02:23.330
This keeps the overall product stable.

49
00:02:23.330 --> 00:02:25.970
It is a best practice to update these working branches

50
00:02:25.970 --> 00:02:27.950
with changes in related code lines.

51
00:02:27.950 --> 00:02:30.010
This is done by merging down, if you will.

52
00:02:30.010 --> 00:02:32.570
We will discuss this in more detail in the next section.

53
00:02:32.570 --> 00:02:34.550
Now that you've finished work in your branch,

54
00:02:34.550 --> 00:02:36.730
how to get it back into the rest of the codebase?

55
00:02:36.730 --> 00:02:38.290
Well, you merge it back.

56
00:02:38.290 --> 00:02:40.740
Sometimes this may be known as merging up.

57
00:02:40.740 --> 00:02:44.130
Branching creates a relationship between the branch and the code line, you know,

58
00:02:44.130 --> 00:02:47.240
the main codebase or the target where it came from.

59
00:02:47.240 --> 00:02:49.530
While a developer is working on their own branch,

60
00:02:49.530 --> 00:02:52.820
other devs may also be submitting changes to the related code

61
00:02:52.820 --> 00:03:00.000
line or main branch that you branched off of. Now let's dive a little deeper into branching, merging, and the kanban board.

