WEBVTT
1
00:00:01.140 --> 00:00:05.390
Now let's look at strategies for handling unplanned work. Doesn't it

2
00:00:05.390 --> 00:00:11.450
seem sometimes that most of our work is becoming unplanned? Here are

3
00:00:11.450 --> 00:00:15.100
three examples of types of unplanned work we will discuss in this

4
00:00:15.100 --> 00:00:17.510
section. First, new requirements.

5
00:00:17.510 --> 00:00:20.860
There seems to be a limitless amount of new work in our lives.

6
00:00:20.860 --> 00:00:22.790
Next, changing requirements.

7
00:00:22.790 --> 00:00:23.380
Oh yeah,

8
00:00:23.380 --> 00:00:26.860
remember I said I wanted the checkout process to handle a credit card? Well,

9
00:00:26.860 --> 00:00:30.340
now I want it to handle multiple credit cards and gift cards, too.

10
00:00:30.340 --> 00:00:35.130
Surprise! And hot fixes or got‑to‑haves. I need this right now! Usually

11
00:00:35.130 --> 00:00:37.270
coming from the business or a senior leader.

12
00:00:37.270 --> 00:00:40.520
We will first talk about how Agile Scrum handles unplanned work,

13
00:00:40.520 --> 00:00:43.160
and then we will discuss how Kanban handles it.

14
00:00:43.160 --> 00:00:47.040
Okay, let's drill into each one.

15
00:00:47.040 --> 00:00:49.240
Let's see how we can handle new requirements while

16
00:00:49.240 --> 00:00:51.160
we are in the middle of a Sprint.

17
00:00:51.160 --> 00:00:54.770
The new requirement is added to the backlog, discussed in the next Sprint

18
00:00:54.770 --> 00:00:57.460
planning meeting, and targeted for a future Sprint.

19
00:00:57.460 --> 00:01:00.120
I like that. That's a good option, and it didn't disrupt

20
00:01:00.120 --> 00:01:03.380
the Sprint. Or, the new requirement is added to the backlog

21
00:01:03.380 --> 00:01:05.340
with a great sense of urgency.

22
00:01:05.340 --> 00:01:09.440
Typically in Sprints, the team is to be protected so they do not lose momentum,

23
00:01:09.440 --> 00:01:11.440
and they can produce with predictability.

24
00:01:11.440 --> 00:01:14.620
But in the real world, this could be an important feature,

25
00:01:14.620 --> 00:01:17.240
and there may be management pressure on the Sprint team.

26
00:01:17.240 --> 00:01:19.570
Well, we've all been there. Since in this scenario,

27
00:01:19.570 --> 00:01:23.440
we are assuming it is a new feature or a new user story, you might use any

28
00:01:23.440 --> 00:01:26.350
slack you have in the Sprint to simply assess the feature,

29
00:01:26.350 --> 00:01:29.830
determine the task required to implement, and provide a planning poker

30
00:01:29.830 --> 00:01:33.230
estimate. Else, the new requirement still stays in the backlog.

31
00:01:33.230 --> 00:01:36.210
This will better prepare you for the next Sprint planning meeting,

32
00:01:36.210 --> 00:01:38.370
especially if this new feature was presented to the

33
00:01:38.370 --> 00:01:40.460
team near the end of the Sprint.

34
00:01:40.460 --> 00:01:43.480
Another approach would be to hold an ad hoc Sprint planning meeting

35
00:01:43.480 --> 00:01:46.330
right in the middle of your Sprint, and hopefully get the new

36
00:01:46.330 --> 00:01:48.740
feature planned into the very next Sprint,

37
00:01:48.740 --> 00:01:51.870
or somehow get it included into the current Sprint.

38
00:01:51.870 --> 00:01:56.720
But, of course, that would be breaking your Sprint rules.

39
00:01:56.720 --> 00:01:59.370
Let's see how we might handle changing requirements

40
00:01:59.370 --> 00:02:01.180
while we are in the middle of a Sprint.

41
00:02:01.180 --> 00:02:04.840
You might find yourself in one of these two camps or somewhere in the middle.

42
00:02:04.840 --> 00:02:05.860
We are agile,

43
00:02:05.860 --> 00:02:10.530
so respond to change immediately to maximize business value delivered, or stay

44
00:02:10.530 --> 00:02:14.900
the course, make no mid‑Sprint changes, and maximize the team's productivity,

45
00:02:14.900 --> 00:02:17.240
and wait until the next Sprint planning meeting.

46
00:02:17.240 --> 00:02:19.130
Now, where might you fall in the spectrum?

47
00:02:19.130 --> 00:02:22.100
Below are some important considerations that will help your team

48
00:02:22.100 --> 00:02:24.920
decide if they should accept the change or not.

49
00:02:24.920 --> 00:02:28.380
The size of the change; while taking a small change may enhance

50
00:02:28.380 --> 00:02:31.820
agility, a big change may disrupt the flow of the Sprint.

51
00:02:31.820 --> 00:02:34.910
The timing of the change; changes early in the Sprint may be

52
00:02:34.910 --> 00:02:37.540
preferred, rather than towards the end, of course.

53
00:02:37.540 --> 00:02:41.160
And the frequency of change; are such changes occasional?

54
00:02:41.160 --> 00:02:44.810
Or is the product owner getting into the practice of giving unplanned

55
00:02:44.810 --> 00:02:47.430
requirements and then changing them frequently?

56
00:02:47.430 --> 00:02:50.940
You certainly do not want to encourage that behavior, so push back

57
00:02:50.940 --> 00:02:55.340
professionally and add the backlog for the next Sprint planning meeting.

58
00:02:55.340 --> 00:02:56.070
Lastly,

59
00:02:56.070 --> 00:02:59.580
it's all about genuine and trusting conversations and

60
00:02:59.580 --> 00:03:02.040
negotiations with your product owner and your team.

61
00:03:02.040 --> 00:03:04.510
Trust must work both ways.

62
00:03:04.510 --> 00:03:06.690
Sometimes you will accept the change mid‑Sprint,

63
00:03:06.690 --> 00:03:11.700
and sometimes you won't. Both sides need to accept that and respect each other.

64
00:03:11.700 --> 00:03:12.330
Ideally,

65
00:03:12.330 --> 00:03:16.740
the team will come up with a consistent policy, agreed by all, and hopefully

66
00:03:16.740 --> 00:03:22.640
written down regarding dealing with changes during the Sprint.

67
00:03:22.640 --> 00:03:26.210
Let's see how we will handle hot fixes while we are in the middle of a Sprint.

68
00:03:26.210 --> 00:03:29.420
It is really no different than requirement changes in mid‑Sprint,

69
00:03:29.420 --> 00:03:32.830
except if it is hot and urgent, of course, there will be much

70
00:03:32.830 --> 00:03:35.020
pressure on the team to get it worked out,

71
00:03:35.020 --> 00:03:38.970
and hence, you must at least immediately assess and validate to ensure

72
00:03:38.970 --> 00:03:43.710
it is truly hot and urgent and provide immediate feedback to the source

73
00:03:43.710 --> 00:03:46.290
of the hot fix as to your options. Now,

74
00:03:46.290 --> 00:03:49.230
here are the same considerations we discussed in handling changing

75
00:03:49.230 --> 00:03:53.290
requirements. The size of the change; can you squeeze it in by using slack, or

76
00:03:53.290 --> 00:03:57.500
not doing another user story, for example. The timing of the change; hot fixes

77
00:03:57.500 --> 00:04:00.520
early in the Sprint will obviously be easier than hot fixes later in the

78
00:04:00.520 --> 00:04:05.090
Sprint. And the frequency of the change; if this hot fix approach is overused

79
00:04:05.090 --> 00:04:07.210
or oversold by the product owner,

80
00:04:07.210 --> 00:04:09.830
you will need to professionally push back and place on the

81
00:04:09.830 --> 00:04:11.940
backlog for the next Sprint planning meeting.

82
00:04:11.940 --> 00:04:12.640
And again,

83
00:04:12.640 --> 00:04:17.150
I can't stress this more to you, it is all about solid and trusting

84
00:04:17.150 --> 00:04:20.970
conversations and negotiations with your product owner and your team.

85
00:04:20.970 --> 00:04:25.460
This is gold! If you have a great relationship and you have trust both ways,

86
00:04:25.460 --> 00:04:28.720
working these issues out, because there will be issues, and there will be

87
00:04:28.720 --> 00:04:32.080
challenges, and it'll be so much better and smoother with a great

88
00:04:32.080 --> 00:04:36.940
relationship that's trusting and bidirectional.

89
00:04:36.940 --> 00:04:40.630
Now let's switch over to Kanban and see how we will handle new requirements

90
00:04:40.630 --> 00:04:44.440
during work in progress. With new requirements, they simply go into the

91
00:04:44.440 --> 00:04:47.310
backlog, and during the day, stand up will be discussed,

92
00:04:47.310 --> 00:04:51.320
prioritized, and tweeted like any other work item. If the new requirement

93
00:04:51.320 --> 00:04:54.340
is added to the backlog with a great sense of urgency,

94
00:04:54.340 --> 00:04:55.690
then during the next stand up,

95
00:04:55.690 --> 00:04:58.610
the team will discuss the new urgent requirement and place it

96
00:04:58.610 --> 00:05:00.850
in the priority one portion of the backlog.

97
00:05:00.850 --> 00:05:04.480
Once there, it can now be the next work item to be pulled forward.

98
00:05:04.480 --> 00:05:06.360
But if this new item is super urgent,

99
00:05:06.360 --> 00:05:10.140
the team could decide to pause on a work‑in‑progress item in the first

100
00:05:10.140 --> 00:05:13.240
step of the value stream. The work item card they're working on can

101
00:05:13.240 --> 00:05:17.120
remain in that value stream step and the card marked as paused or

102
00:05:17.120 --> 00:05:19.020
temporary hold or something like that.

103
00:05:19.020 --> 00:05:22.540
That pause card is now the next number one priority when the

104
00:05:22.540 --> 00:05:25.900
next resource comes up for air in that particular step. And

105
00:05:25.900 --> 00:05:27.330
by using your daily standups,

106
00:05:27.330 --> 00:05:31.440
you can fine‑tune or adjust the workflow of this super urgent new requirement.

107
00:05:31.440 --> 00:05:33.110
After the urgent item is done,

108
00:05:33.110 --> 00:05:36.530
the resource can simply place the urgent item in the done buffer

109
00:05:36.530 --> 00:05:40.200
for their step, and then restart the paused item and change its

110
00:05:40.200 --> 00:05:42.340
status from paused to work in progress.

111
00:05:42.340 --> 00:05:46.400
Each resource in the value stream would handle the urgent item the same. Put

112
00:05:46.400 --> 00:05:50.050
a temporary hold on the current item they're working on and pull forward the

113
00:05:50.050 --> 00:05:52.730
urgent work from the upstream's done buffer.

114
00:05:52.730 --> 00:05:54.820
Now, this is very straightforward, and remember,

115
00:05:54.820 --> 00:06:00.440
with Kanban, you can create your own schemes that better fit your needs.

116
00:06:00.440 --> 00:06:03.070
Let's see how we will handle changing requirements while

117
00:06:03.070 --> 00:06:05.670
work is in progress in Kanban. Here are the same

118
00:06:05.670 --> 00:06:07.840
considerations as with Agile Scrum.

119
00:06:07.840 --> 00:06:11.690
How many work items are affected? A feature or user story may have been

120
00:06:11.690 --> 00:06:14.480
broken down to multiple Kanban work items or cards,

121
00:06:14.480 --> 00:06:16.530
all scattered across the value stream.

122
00:06:16.530 --> 00:06:20.140
Where in the workflow are the affected work items, early or late?

123
00:06:20.140 --> 00:06:21.390
Certainly, if they are early,

124
00:06:21.390 --> 00:06:24.550
it may have less impact, and if later in the workflow, there

125
00:06:24.550 --> 00:06:27.630
may be much more of a workflow impact. What is the implication

126
00:06:27.630 --> 00:06:29.260
or consequences of the change?

127
00:06:29.260 --> 00:06:31.540
Can you simply tweak a few work item cards?

128
00:06:31.540 --> 00:06:34.550
Or is the change so significant that you have to stop or

129
00:06:34.550 --> 00:06:37.320
cancel some work items and start new work items from the

130
00:06:37.320 --> 00:06:38.620
beginning of the value stream?

131
00:06:38.620 --> 00:06:40.870
Those are the decisions you'll have to make.

132
00:06:40.870 --> 00:06:41.580
And again,

133
00:06:41.580 --> 00:06:44.500
it's all about solid and trusting conversations and

134
00:06:44.500 --> 00:06:47.210
negotiations with your product owner or customers and your

135
00:06:47.210 --> 00:06:51.740
team to come to the optimal solution.

136
00:06:51.740 --> 00:06:54.170
Let's see how we'll handle hot fixes in Kanban.

137
00:06:54.170 --> 00:06:57.970
It is similar to requirement changes, except if it's hot and urgent, of course,

138
00:06:57.970 --> 00:06:59.640
there'll be much more pressure on the team,

139
00:06:59.640 --> 00:07:02.450
but I really think less pressure than on a Scrum team.

140
00:07:02.450 --> 00:07:05.900
You will have more flexibility and choices to solve this tough problem.

141
00:07:05.900 --> 00:07:09.430
So call an ad hoc stand up and assess the hot fix and provide immediate

142
00:07:09.430 --> 00:07:12.240
feedback to the source of the hot fix as to your options.

143
00:07:12.240 --> 00:07:14.000
And here are those considerations again.

144
00:07:14.000 --> 00:07:15.550
Number of work items affected.

145
00:07:15.550 --> 00:07:19.240
Look at those. Where in the workflow are the affected work items, early

146
00:07:19.240 --> 00:07:22.680
or late? Remember, earlier is easier to handle than late. What are the

147
00:07:22.680 --> 00:07:24.860
implications or consequences of the change?

148
00:07:24.860 --> 00:07:27.160
Look how big or small those consequences are in your

149
00:07:27.160 --> 00:07:29.170
decision. And always nurture healthy,

150
00:07:29.170 --> 00:07:34.140
constructive communication, which promotes trust.

151
00:07:34.140 --> 00:07:37.770
Let's recap work in progress. For new requirements and for Scrum,

152
00:07:37.770 --> 00:07:40.250
place on the backlog or use slack, and for Kanban,

153
00:07:40.250 --> 00:07:43.170
place in the backlog or follow your normal process.

154
00:07:43.170 --> 00:07:47.050
Remember, there's no slack in Kanban. For changing requirements, for Scrum,

155
00:07:47.050 --> 00:07:50.550
disrupt the Sprint, or wait until the next Sprint planning session.

156
00:07:50.550 --> 00:07:52.440
And for Kanban, pause work,

157
00:07:52.440 --> 00:07:55.270
pull change forward, or follow the normal process of just

158
00:07:55.270 --> 00:07:57.820
placing in the backlog and address it during the next stand

159
00:07:57.820 --> 00:07:59.610
up. For hot fixes for Scrum,

160
00:07:59.610 --> 00:08:02.530
disrupt the Sprint, or wait until the next Sprint planning

161
00:08:02.530 --> 00:08:05.520
session. And for Kanban, pause work, and pull change

162
00:08:05.520 --> 00:08:07.750
forward, or follow normal process.

163
00:08:07.750 --> 00:08:08.880
But in both cases,

164
00:08:08.880 --> 00:08:11.550
you need to consider the number of work items affected and

165
00:08:11.550 --> 00:08:14.730
the implications that this hot fix may have to the flow and

166
00:08:14.730 --> 00:08:16.640
quality of the work in progress.

167
00:08:16.640 --> 00:08:17.940
And in all cases,

168
00:08:17.940 --> 00:08:21.090
I believe that Kanban provides the most flexibility in

169
00:08:21.090 --> 00:08:28.000
choosing how to solve the challenge, as well as better visibility into the remediation of the challenge.

