WEBVTT
1
00:00:01.040 --> 00:00:07.640
Now let's get into the basics of continuous integration, or what we call CI.

2
00:00:07.640 --> 00:00:08.190
In a nutshell,

3
00:00:08.190 --> 00:00:11.950
continuous integration is where you have automated your testing

4
00:00:11.950 --> 00:00:14.990
and build process with confidence and quality,

5
00:00:14.990 --> 00:00:17.840
and you can integrate your new code back into your

6
00:00:17.840 --> 00:00:20.180
main codebase every single day.

7
00:00:20.180 --> 00:00:25.340
Well, that's pretty much it, but the devil's in the details.

8
00:00:25.340 --> 00:00:27.070
Here's a more formal definition.

9
00:00:27.070 --> 00:00:30.050
Continuous integration is a best practice in software

10
00:00:30.050 --> 00:00:33.860
engineering to integrate your completed and tested code back

11
00:00:33.860 --> 00:00:36.440
into the repository as often as necessary.

12
00:00:36.440 --> 00:00:39.120
This includes using one or more automated integration tools,

13
00:00:39.120 --> 00:00:42.870
of course, like Azure DevOps or a multitude of other tools.

14
00:00:42.870 --> 00:00:45.900
The tools enable you to validate the build and run

15
00:00:45.900 --> 00:00:48.070
automated tests against the new code.

16
00:00:48.070 --> 00:00:50.600
So before we talk about how continuous integration can

17
00:00:50.600 --> 00:00:52.310
be managed and used with Kanban,

18
00:00:52.310 --> 00:00:57.840
let's drill into a few terms to be sure we are on the same page.

19
00:00:57.840 --> 00:01:01.610
To be clear, continuous integration is not a silver bullet.

20
00:01:01.610 --> 00:01:04.940
Continuous integration does not eliminate your bugs,

21
00:01:04.940 --> 00:01:08.220
but you can find and identify them sooner,

22
00:01:08.220 --> 00:01:13.100
and they'll be easier to remove, thus further supporting a continuous flow.

23
00:01:13.100 --> 00:01:17.160
Personally, I can't see why anyone is not doing continuous integration today.

24
00:01:17.160 --> 00:01:18.060
Tons of tools.

25
00:01:18.060 --> 00:01:19.700
Everyone needs to get on board with this.

26
00:01:19.700 --> 00:01:25.540
It'll greatly reduce your bugs and greatly improve the flow of your work.

27
00:01:25.540 --> 00:01:28.880
Keep in mind that Kanban focuses on providing continuous

28
00:01:28.880 --> 00:01:31.200
value to its customers and the business.

29
00:01:31.200 --> 00:01:35.330
We start with our backlog that we receive from our upstream partner or partners,

30
00:01:35.330 --> 00:01:37.780
followed by specify, implement, validate,

31
00:01:37.780 --> 00:01:38.450
and deliver.

32
00:01:38.450 --> 00:01:41.400
This will be our general value stream throughout this course.

33
00:01:41.400 --> 00:01:43.590
Yours certainly may be different, may be much different.

34
00:01:43.590 --> 00:01:45.150
As we can see in this chart,

35
00:01:45.150 --> 00:01:47.760
Kanban is designed and centered on delivering

36
00:01:47.760 --> 00:01:49.960
continuous flow and value to its customers.

37
00:01:49.960 --> 00:01:53.360
But right here in the delivery step, just how is code delivered?

38
00:01:53.360 --> 00:01:57.440
And also, just how is it validated to ensure continuous delivery?

39
00:01:57.440 --> 00:02:00.040
And while we are coding, that is implementing,

40
00:02:00.040 --> 00:02:08.000
what can we be doing as mindful developers to ensure continuous integration? Let's explore further to answer these questions.

