WEBVTT
1
00:00:01.240 --> 00:00:02.070
To this point,

2
00:00:02.070 --> 00:00:06.200
we have covered adding to the backlog, organizing the backlog, compared

3
00:00:06.200 --> 00:00:09.220
the processes of planning and pulling from the backlog.

4
00:00:09.220 --> 00:00:11.750
Now we will move onto comparing the differences with

5
00:00:11.750 --> 00:00:15.640
how work in progress is handled.

6
00:00:15.640 --> 00:00:18.390
So let's look at work in progress. With Agile Scrum

7
00:00:18.390 --> 00:00:21.410
projects, they use the defined concept, as you know,

8
00:00:21.410 --> 00:00:24.470
called sprints. A sprint can be of any length, but

9
00:00:24.470 --> 00:00:26.250
it's usually about 2 or 3 weeks.

10
00:00:26.250 --> 00:00:29.760
Whereas in Kanban, it is simply a series of continuous

11
00:00:29.760 --> 00:00:34.160
steps in a value stream, no sprints, no timeboxing, just a smooth,

12
00:00:34.160 --> 00:00:35.440
continuous flow.

13
00:00:35.440 --> 00:00:38.740
Okay, let's go deeper.

14
00:00:38.740 --> 00:00:42.380
Before there is a sprint, there are a few more upfront activities.

15
00:00:42.380 --> 00:00:45.380
Typically, a product vision and roadmap is created.

16
00:00:45.380 --> 00:00:48.480
Then the project may be laid out in releases with each

17
00:00:48.480 --> 00:00:50.490
release covering a chunk of functionality,

18
00:00:50.490 --> 00:00:53.500
which really is a chunk or subset of the overall backlog.

19
00:00:53.500 --> 00:00:55.890
Then at the end of the project will be a project

20
00:00:55.890 --> 00:00:58.440
retrospective and that is an Agile project.

21
00:00:58.440 --> 00:01:01.310
Each release we comprise of multiple sprints and a

22
00:01:01.310 --> 00:01:03.280
sprint will look something like this.

23
00:01:03.280 --> 00:01:07.850
A sprint begins with Sprint planning and contains a series of daily work events,

24
00:01:07.850 --> 00:01:11.440
followed by the Sprint demo, review, and retrospective.

25
00:01:11.440 --> 00:01:12.970
All of that is a sprint.

26
00:01:12.970 --> 00:01:17.040
You could see it has a nice structure and I think is well laid out too,

27
00:01:17.040 --> 00:01:20.050
but it does have structure which can, on occasion,

28
00:01:20.050 --> 00:01:21.140
work against itself.

29
00:01:21.140 --> 00:01:27.640
Now let's take a deeper look at how Kanban manages its work in progress.

30
00:01:27.640 --> 00:01:31.740
Here are the steps in a generalized Kanban value stream. You

31
00:01:31.740 --> 00:01:34.520
will discuss and negotiate with your upstream partners about

32
00:01:34.520 --> 00:01:36.090
the work you will receive.

33
00:01:36.090 --> 00:01:38.390
Your upstream partners are providing requirements,

34
00:01:38.390 --> 00:01:41.480
prioritization, and other project artifacts, such as

35
00:01:41.480 --> 00:01:44.080
budgets and resources potentially as well.

36
00:01:44.080 --> 00:01:47.600
This could be product owners, remember, I like that term, customers,

37
00:01:47.600 --> 00:01:51.040
users, vendors, or any valued input entity.

38
00:01:51.040 --> 00:01:53.520
Here is your value stream, and in this example,

39
00:01:53.520 --> 00:01:57.340
I am showing a simplistic value stream composed of specify,

40
00:01:57.340 --> 00:01:58.820
implement, and validate.

41
00:01:58.820 --> 00:02:01.920
This is where you have control and influence over analysis,

42
00:02:01.920 --> 00:02:03.700
design, coding, and testing.

43
00:02:03.700 --> 00:02:04.230
Lastly,

44
00:02:04.230 --> 00:02:07.500
your downstream partners are those that you will deliver your finished

45
00:02:07.500 --> 00:02:11.110
products to such a software, of course. There may be other development

46
00:02:11.110 --> 00:02:14.710
teams, operations, you know those who put things into production, or even

47
00:02:14.710 --> 00:02:17.990
your own end users if it's a finished product. So as this bracket is

48
00:02:17.990 --> 00:02:22.030
showing, the orange boxes are what is in your control and therefore in

49
00:02:22.030 --> 00:02:23.100
your value stream.

50
00:02:23.100 --> 00:02:26.690
No sprints, no releases, just a continuous flow.

51
00:02:26.690 --> 00:02:29.240
Now I'll be using and building upon this simple,

52
00:02:29.240 --> 00:02:33.840
basic value stream throughout this course.

53
00:02:33.840 --> 00:02:38.430
Now let's discuss and compare and see what makes a good sprint

54
00:02:38.430 --> 00:02:42.320
length, or another way to put it, what makes a good length of work

55
00:02:42.320 --> 00:02:44.990
time before you re‑evaluate your work?

56
00:02:44.990 --> 00:02:48.760
Okay, remember why Agile Scrum was so popular and is so popular?

57
00:02:48.760 --> 00:02:52.040
It is because it solved so many issues and problems

58
00:02:52.040 --> 00:02:53.890
with traditional waterfall projects.

59
00:02:53.890 --> 00:02:55.340
By having short sprints,

60
00:02:55.340 --> 00:02:58.390
you can be agile, you can make course corrections and produce

61
00:02:58.390 --> 00:03:01.360
business values sooner and with much better quality.

62
00:03:01.360 --> 00:03:04.950
I like Scrum and it has been successful for my teams, but

63
00:03:04.950 --> 00:03:06.810
what is the right length of a sprint?

64
00:03:06.810 --> 00:03:07.280
In a way,

65
00:03:07.280 --> 00:03:10.930
the waterfall approach was one big sprint that lasts months or

66
00:03:10.930 --> 00:03:13.680
even years in the old days, and with Agile Scrum,

67
00:03:13.680 --> 00:03:15.420
we have a series of sprints.

68
00:03:15.420 --> 00:03:18.810
Now I've seen sprints to be 2, 3, or even 4 weeks in length.

69
00:03:18.810 --> 00:03:22.240
It seems that the shortest sprints are better than the longer sprints,

70
00:03:22.240 --> 00:03:23.440
or at least they are to me.

71
00:03:23.440 --> 00:03:25.760
And since you will have reduced lead times,

72
00:03:25.760 --> 00:03:29.140
you can make course corrections and better satisfy your customer.

73
00:03:29.140 --> 00:03:32.680
Well, then what about a 1‑week sprint or a 3‑day sprint?

74
00:03:32.680 --> 00:03:35.220
So you probably see where I'm going with this. Even though

75
00:03:35.220 --> 00:03:39.170
there are no sprints with Kanban, in a way, you could think of

76
00:03:39.170 --> 00:03:43.460
Kanban as a series of 1‑day sprints, since in each day,

77
00:03:43.460 --> 00:03:46.470
every daily stand up, you can make course corrections.

78
00:03:46.470 --> 00:03:47.140
Think about it.

79
00:03:47.140 --> 00:03:50.820
Why was 2 or 3 weeks generally chosen for a sprint over waterfall?

80
00:03:50.820 --> 00:03:53.990
Because waterfall just did not work, the smaller the sprint,

81
00:03:53.990 --> 00:03:56.760
the easier to make course corrections. Now Kanban just took it

82
00:03:56.760 --> 00:03:59.400
a step further throughout the sprint and now you could make

83
00:03:59.400 --> 00:04:01.380
course corrections daily if need be.

84
00:04:01.380 --> 00:04:05.240
I really like that flexibility.

85
00:04:05.240 --> 00:04:08.810
Let's compare the end events of work in progress.

86
00:04:08.810 --> 00:04:10.080
Now, at the end of a sprint,

87
00:04:10.080 --> 00:04:13.060
you will typically have a demonstration of the outcome of the sprint,

88
00:04:13.060 --> 00:04:15.430
which is great, and you'll want your customer feedback.

89
00:04:15.430 --> 00:04:19.130
Also, you will have a Sprint review where you review how that sprint went,

90
00:04:19.130 --> 00:04:22.000
maybe how good you were able to complete your story points, and

91
00:04:22.000 --> 00:04:24.910
things like that, and a Sprint retrospective where you might look at

92
00:04:24.910 --> 00:04:28.680
the process of doing sprints like maybe having your standup at 8 AM,

93
00:04:28.680 --> 00:04:32.090
instead of 9 AM, and choosing a better physical location or a better

94
00:04:32.090 --> 00:04:36.300
video conferencing tool. With Kanban, it is simply a continuous flow,

95
00:04:36.300 --> 00:04:37.710
daily demos, if needed,

96
00:04:37.710 --> 00:04:41.450
and each day the progress will be reviewed, workflow issues discussed,

97
00:04:41.450 --> 00:04:44.380
possibly corrected, and maybe even resources moved, and

98
00:04:44.380 --> 00:04:46.960
daily process improvements can be proposed,

99
00:04:46.960 --> 00:04:49.460
discussed, and decided upon immediately.

100
00:04:49.460 --> 00:04:51.820
So process issues are discussed and corrected as

101
00:04:51.820 --> 00:04:53.960
encountered and no waiting for the end of,

102
00:04:53.960 --> 00:04:56.810
well, anything.

103
00:04:56.810 --> 00:05:00.790
Let's recap work in progress. With sprints, you have fixed time periods

104
00:05:00.790 --> 00:05:03.690
and it's a more rigid process structure, and again,

105
00:05:03.690 --> 00:05:06.550
Scrum has been widely successful as it should be.

106
00:05:06.550 --> 00:05:09.500
With Kanban, it is simply a continuous flow.

107
00:05:09.500 --> 00:05:12.440
Kanban is more agile and adaptable to change.

108
00:05:12.440 --> 00:05:15.450
Agile Scrum certainly made a great leap from waterfall or other

109
00:05:15.450 --> 00:05:22.000
homegrown random approaches and is likely the most popular approach today in building software and systems.

