1
00:00:01,040 --> 00:00:05,110
Finding the optimal order to do things in a single Kanban team

2
00:00:05,110 --> 00:00:07,580
with a single product owner may not be too bad,

3
00:00:07,580 --> 00:00:10,350
but can you imagine doing that over many product owners,

4
00:00:10,350 --> 00:00:11,670
teams, and requirements?

5
00:00:11,670 --> 00:00:15,040
Let's see how we might handle that.

6
00:00:15,040 --> 00:00:18,600
So now that each team understands the vision and overall project

7
00:00:18,600 --> 00:00:22,170
outcomes and they have their MVP backlogs in place,

8
00:00:22,170 --> 00:00:24,750
you need to figure out what order is everyone doing

9
00:00:24,750 --> 00:00:26,740
their work. This is critical.

10
00:00:26,740 --> 00:00:29,920
The order of work that your team produces is determined by the

11
00:00:29,920 --> 00:00:33,340
downstream teams that depend on your work outcomes.

12
00:00:33,340 --> 00:00:36,840
They will give you their preferences on when they need what they want.

13
00:00:36,840 --> 00:00:37,870
Conversely,

14
00:00:37,870 --> 00:00:40,380
your team should influence the order of work

15
00:00:40,380 --> 00:00:42,540
performed by your upstream partners.

16
00:00:42,540 --> 00:00:45,410
The bottom line in a large organization is that this is

17
00:00:45,410 --> 00:00:49,260
a very challenging problem to solve, and there is no silver bullet.

18
00:00:49,260 --> 00:00:53,420
You need a solid digital real‑time representation or virtual model to

19
00:00:53,420 --> 00:00:56,700
make all this work and your ordered and scheduling of when you need

20
00:00:56,700 --> 00:01:00,610
things or when you're downstream partners need things could change every

21
00:01:00,610 --> 00:01:06,110
day. For very large projects, there would be no way to do the complete

22
00:01:06,110 --> 00:01:07,910
planning without automated tools.

23
00:01:07,910 --> 00:01:10,230
Here is a list of tools you might want to consider.

24
00:01:10,230 --> 00:01:11,880
I do not endorse any tools,

25
00:01:11,880 --> 00:01:15,830
and you need to pick the tool or tools that best meets your requirements.

26
00:01:15,830 --> 00:01:18,860
And it may be that some tools work best for large chunks of work

27
00:01:18,860 --> 00:01:20,840
and other tools for smaller chunks of work.

28
00:01:20,840 --> 00:01:22,560
When you're planning the order of work,

29
00:01:22,560 --> 00:01:25,790
you must allow adequate time of iterative planning to get the

30
00:01:25,790 --> 00:01:27,940
planning complete enough to begin work.

31
00:01:27,940 --> 00:01:31,330
The bottom line is that you need more than one tool to get the job done,

32
00:01:31,330 --> 00:01:34,550
but try and get the fewest tools to do the most work.

33
00:01:34,550 --> 00:01:39,640
This helps you avoid product integration issues.

34
00:01:39,640 --> 00:01:43,870
One approach should be higher article ordering, that is top‑down decomposition.

35
00:01:43,870 --> 00:01:46,580
We start with project‑based ordering. Order and

36
00:01:46,580 --> 00:01:49,000
prioritize large use cases and services.

37
00:01:49,000 --> 00:01:52,440
Here, the work items are very large use cases and major service

38
00:01:52,440 --> 00:01:55,320
features and then determine the ordering of those.

39
00:01:55,320 --> 00:01:58,550
This would be the overall ordering of the entire project,

40
00:01:58,550 --> 00:02:01,840
independent of what teams work on what. Next, groups of

41
00:02:01,840 --> 00:02:04,300
teams. They order and prioritize those large,

42
00:02:04,300 --> 00:02:09,010
chunky features into midsize use cases and services. Here, the work items

43
00:02:09,010 --> 00:02:11,540
are smaller and then determine the ordering of those.

44
00:02:11,540 --> 00:02:14,180
This would be the overall ordering of each of the pieces

45
00:02:14,180 --> 00:02:16,620
or chunks of the one above. And lastly,

46
00:02:16,620 --> 00:02:20,740
the team determines the order and prioritize at the team level for its backlog.

47
00:02:20,740 --> 00:02:24,740
Then you need to iterate on this and how I like to say it is wash,

48
00:02:24,740 --> 00:02:27,920
rinse, and repeat until the ordering looks pretty good.

49
00:02:27,920 --> 00:02:34,000
Do not spend a ton of time since things will soon change once the development begins.

