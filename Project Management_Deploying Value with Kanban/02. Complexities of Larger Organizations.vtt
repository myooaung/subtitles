WEBVTT
1
00:00:01.040 --> 00:00:04.070
Large organizations present a whole host of complex

2
00:00:04.070 --> 00:00:06.670
challenges to application and system development.

3
00:00:06.670 --> 00:00:10.440
Let's take a moment to discuss these.

4
00:00:10.440 --> 00:00:13.360
If you work for a small organization with your Kanban team,

5
00:00:13.360 --> 00:00:15.490
in one sense, you have it pretty easy.

6
00:00:15.490 --> 00:00:18.690
You do not have any complex coordination or planning to worry about,

7
00:00:18.690 --> 00:00:21.720
hopefully, and your project is likely on the smaller side.

8
00:00:21.720 --> 00:00:25.500
You have your product owner who continually feeds your backlog with use cases,

9
00:00:25.500 --> 00:00:28.040
tickets, or other work items, and life's pretty good.

10
00:00:28.040 --> 00:00:31.040
If you work for a larger organization with your Kanban team,

11
00:00:31.040 --> 00:00:34.440
you may also have it a bit on the easier side. You may have a larger

12
00:00:34.440 --> 00:00:37.920
than average project and have negotiated with your upstream partner

13
00:00:37.920 --> 00:00:39.690
and your downstream partner as well,

14
00:00:39.690 --> 00:00:43.290
and you clearly know what you'll receive from them into your backlog,

15
00:00:43.290 --> 00:00:46.230
and you clearly know what you'll need to deliver to them.

16
00:00:46.230 --> 00:00:48.820
You may be isolated or shielded from the bigger corporate

17
00:00:48.820 --> 00:00:51.990
complexities and doing your job just fine. So you have your

18
00:00:51.990 --> 00:00:54.580
backlog, you have your value stream ‑ for example,

19
00:00:54.580 --> 00:00:58.050
specify implement and validate ‑ and then you deliver, one

20
00:00:58.050 --> 00:01:00.900
upstream partner and one downstream partner.

21
00:01:00.900 --> 00:01:04.680
Pretty straightforward and typical to all my examples in this course. Well,

22
00:01:04.680 --> 00:01:06.040
until this module.

23
00:01:06.040 --> 00:01:09.500
But if you're in a larger organization with your Kanban team and

24
00:01:09.500 --> 00:01:12.420
part of a large project of many developer teams,

25
00:01:12.420 --> 00:01:17.580
well, you may have multiple upstream partners and multiple downstream partners.

26
00:01:17.580 --> 00:01:19.760
Okay, things are getting complicated now,

27
00:01:19.760 --> 00:01:21.510
and so proceed with caution,

28
00:01:21.510 --> 00:01:24.130
and you will have some other additional challenges as well.

29
00:01:24.130 --> 00:01:27.340
Let's see what they might be.

30
00:01:27.340 --> 00:01:30.160
Here's a sampling of system development challenges in

31
00:01:30.160 --> 00:01:33.520
large or complex organizations. Many requirements needing

32
00:01:33.520 --> 00:01:35.090
to be released at the same time.

33
00:01:35.090 --> 00:01:38.140
This certainly can be complex. Larger team sizes.

34
00:01:38.140 --> 00:01:39.160
The more people,

35
00:01:39.160 --> 00:01:41.930
the more issues you will have with effective communication and

36
00:01:41.930 --> 00:01:45.610
leadership. Significant work happening in parallel, and this might

37
00:01:45.610 --> 00:01:48.660
require a lot of coordination, plus, as earlier mentioned,

38
00:01:48.660 --> 00:01:52.370
must be released at the same time. Integrating large components,

39
00:01:52.370 --> 00:01:55.320
systems, databases, you name it, yet again,

40
00:01:55.320 --> 00:01:56.340
another challenge.

41
00:01:56.340 --> 00:01:59.150
And don't forget about non development tasks, such as

42
00:01:59.150 --> 00:02:01.300
documentation, release management,

43
00:02:01.300 --> 00:02:04.940
the build process, and other process‑oriented activities.

44
00:02:04.940 --> 00:02:07.170
Okay, so you think I'm done with the challenges?

45
00:02:07.170 --> 00:02:12.750
Well, not quite. Here are a few more. In larger organizations,

46
00:02:12.750 --> 00:02:15.190
you will most certainly find development teams using a

47
00:02:15.190 --> 00:02:17.730
variety of methods or approaches to their work,

48
00:02:17.730 --> 00:02:19.540
such as Kanban, of course,

49
00:02:19.540 --> 00:02:23.800
with a continuous stream of delivery. Agile/Scrum, delivering code after

50
00:02:23.800 --> 00:02:27.360
each sprint. Waterfall, with sequential steps and milestones and

51
00:02:27.360 --> 00:02:30.920
typically delivering code only at the end of the project, or maybe very

52
00:02:30.920 --> 00:02:34.480
large chunks of code delivered over milestones that may stretch months.

53
00:02:34.480 --> 00:02:37.500
And certainly, a blend of approaches, sometimes known as

54
00:02:37.500 --> 00:02:40.630
water‑Scrum‑fall or Scrummerfall.

55
00:02:40.630 --> 00:02:44.430
So it sandwiches Scrum methodology between an upfront design

56
00:02:44.430 --> 00:02:47.280
phase and a legacy deployment mechanism, and yes,

57
00:02:47.280 --> 00:02:49.890
I have used this approach too, but when you consult,

58
00:02:49.890 --> 00:02:51.620
you adapt to your customer's wishes.

59
00:02:51.620 --> 00:02:55.440
So certainly I did. And there are certainly other approaches to make software.

60
00:02:55.440 --> 00:02:56.570
Why is this a problem?

61
00:02:56.570 --> 00:02:59.640
I'm glad you asked.

62
00:02:59.640 --> 00:03:01.870
There are many challenges of using multiple

63
00:03:01.870 --> 00:03:04.410
development methods in larger organizations.

64
00:03:04.410 --> 00:03:08.680
Different methods imply different expectations of quality or just

65
00:03:08.680 --> 00:03:12.420
exactly what makes a deliverable. How work is validated and

66
00:03:12.420 --> 00:03:15.860
completed. Are the done rules equal? In Kanban,

67
00:03:15.860 --> 00:03:20.240
we have clear and distinct done rules for each value stream step.

68
00:03:20.240 --> 00:03:23.190
What about other approaches, do they? And will they?

69
00:03:23.190 --> 00:03:25.490
And how does that work if you must integrate your software

70
00:03:25.490 --> 00:03:29.250
modules as well? Development cadence practices. Each of the

71
00:03:29.250 --> 00:03:31.740
methods I've mentioned on the previous slide have different

72
00:03:31.740 --> 00:03:36.040
project cadences. With Waterfall, one big deliverable. Scrum,

73
00:03:36.040 --> 00:03:39.040
maybe deliverable every two weeks. And with Kanban, a

74
00:03:39.040 --> 00:03:41.140
constant stream of deliverables.

75
00:03:41.140 --> 00:03:44.000
All this makes fitting the pieces of this puzzle together

76
00:03:44.000 --> 00:03:47.630
very challenging and creates significant project management

77
00:03:47.630 --> 00:03:49.340
integration challenges as well.

78
00:03:49.340 --> 00:03:51.570
And just when you think you've heard enough of the issues with

79
00:03:51.570 --> 00:03:53.630
building software in larger organizations,

80
00:03:53.630 --> 00:03:59.810
I have a few more. In larger organizations, I think it's prudent

81
00:03:59.810 --> 00:04:02.370
and wise to be aware of the organizational,

82
00:04:02.370 --> 00:04:04.960
political, and planning world around you.

83
00:04:04.960 --> 00:04:06.400
This is a big ask of you,

84
00:04:06.400 --> 00:04:10.360
and it's not easy to do, but if you can be more cognitive of your surroundings,

85
00:04:10.360 --> 00:04:11.050
so to speak,

86
00:04:11.050 --> 00:04:15.540
I think you will be more successful working and coping in larger organizations.

87
00:04:15.540 --> 00:04:18.390
Here are a few more considerations. Strategic planning.

88
00:04:18.390 --> 00:04:20.340
What is the overall goal of this project?

89
00:04:20.340 --> 00:04:21.410
Tactical planning.

90
00:04:21.410 --> 00:04:23.740
Just how are we going to get there?

91
00:04:23.740 --> 00:04:26.200
Business alignment. Is what we are doing in alignment with

92
00:04:26.200 --> 00:04:28.540
the business goals? Tracking progress.

93
00:04:28.540 --> 00:04:32.490
Do we have multiple tracking in project management tools or methods? Might this

94
00:04:32.490 --> 00:04:37.130
be confusing? Project team coordination. Just how do we effectively coordinate

95
00:04:37.130 --> 00:04:41.870
across teams? Multiple sources of budgets. These can directly affect people

96
00:04:41.870 --> 00:04:45.470
resources, third‑party services, and other things that might be needed to be

97
00:04:45.470 --> 00:04:48.170
purchased. Multiple customer domains.

98
00:04:48.170 --> 00:04:49.350
This one can be tough.

99
00:04:49.350 --> 00:04:52.790
This is where you may have competing product owners vying for

100
00:04:52.790 --> 00:04:55.470
influence and control, and maybe even budget.

101
00:04:55.470 --> 00:04:58.020
So what can we do to help mitigate all of this we

102
00:04:58.020 --> 00:05:04.000
talked about in the last few slides? Well let's find out. That's what the rest of this module is all about.

