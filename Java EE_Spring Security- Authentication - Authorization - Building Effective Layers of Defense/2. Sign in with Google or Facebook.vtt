WEBVTT
1
00:00:01.907 --> 00:00:06.353
First you need to register your application as a client with Google.

2
00:00:06.353 --> 00:00:13.227
Log in to Google API, Credentials, Create credentials for OAuth client ID.

3
00:00:13.227 --> 00:00:15.643
The type is web application.

4
00:00:15.643 --> 00:00:22.953
For the authorized redirect URL, set localhost login/oauth2/code/google.

5
00:00:22.953 --> 00:00:25.131
This is for additional security.

6
00:00:25.131 --> 00:00:29.847
Google will only redirect users' browsers to the authorized URIs.

7
00:00:29.847 --> 00:00:31.139
Now for demo purposes,

8
00:00:31.139 --> 00:00:34.413
we can use localhost as the browser and the web

9
00:00:34.413 --> 00:00:37.641
application is running locally on our PCs.

10
00:00:37.641 --> 00:00:40.238
But in production, this would not work.

11
00:00:40.238 --> 00:00:43.981
Google will display the client ID and client secret to you.

12
00:00:43.981 --> 00:00:46.938
The client ID is the unique identifier for your application,

13
00:00:46.938 --> 00:00:49.688
and the secret must be kept secure.

14
00:00:49.688 --> 00:00:52.436
Do not hard-code it in your application.

15
00:00:52.436 --> 00:00:55.026
Keep it safe in a place like Vault.

16
00:00:55.026 --> 00:00:59.927
If your secret is exposed, then a hacker can easily mascaraed as your site.

17
00:00:59.927 --> 00:01:05.397
Now in the application.yml file, under security OAuth 2012 client registration,

18
00:01:05.397 --> 00:01:10.761
you can put in google the client ID and the secret.

19
00:01:10.761 --> 00:01:15.229
Again, for demo purposes, we have the secret here in plain text.

20
00:01:15.229 --> 00:01:19.958
However, in production, inject it in as a property and keep it secure.

21
00:01:19.958 --> 00:01:23.521
Now you can configure multiple providers on the registration,

22
00:01:23.521 --> 00:01:25.661
like Facebook, Okta, etc.

23
00:01:25.661 --> 00:01:28.890
Okay, now in the Configuration class,

24
00:01:28.890 --> 00:01:33.065
we just set up the oath2Login authentication filter using its

25
00:01:33.065 --> 00:01:37.119
builder method in the HttpSecurity object.

26
00:01:37.119 --> 00:01:40.519
By default, once authenticated with Google,

27
00:01:40.519 --> 00:01:45.367
the oauth2Login authentication filter will create an authenticated principal

28
00:01:45.367 --> 00:01:50.609
with the role User and add it to the security context.

29
00:01:50.609 --> 00:01:52.800
Now this works really well for our site.

30
00:01:52.800 --> 00:01:55.158
However, if you need other roles/privileges,

31
00:01:55.158 --> 00:01:59.967
you can use the authorizationEndpoint and provide your

32
00:01:59.967 --> 00:02:03.257
own authorizationRequestRespository,

33
00:02:03.257 --> 00:02:06.072
which will load the roles from your identity store.

34
00:02:06.072 --> 00:02:11.278
For the demo, if it's the first time the user accesses the site,

35
00:02:11.278 --> 00:02:13.636
we need to create them a portfolio.

36
00:02:13.636 --> 00:02:16.193
Again, we can add that in the SuccessHandler,

37
00:02:16.193 --> 00:02:19.889
which is the class that implements the

38
00:02:19.889 --> 00:02:23.066
AuthenticationSuccessHandler interface and overrides the

39
00:02:23.066 --> 00:02:28.457
AuthenticationSuccessHandler method and annotate it as a component.

40
00:02:28.457 --> 00:02:31.476
You can then check if the user has a portfolio set up.

41
00:02:31.476 --> 00:02:32.176
If not,

42
00:02:32.176 --> 00:02:38.273
we create one for them using the username set in the authenticated principal.

43
00:02:38.273 --> 00:02:42.275
If needed, we can access the Google profile properties on a token,

44
00:02:42.275 --> 00:02:48.337
like the name, the email, etc., that we might need to register the user.

45
00:02:48.337 --> 00:02:49.872
That's it.

46
00:02:49.872 --> 00:02:52.711
Let's start up the application.

47
00:02:52.711 --> 00:02:55.252
We now have the Google authentication link.

48
00:02:55.252 --> 00:02:58.654
If we select it, we get the Google sign-in.

49
00:02:58.654 --> 00:03:00.645
If you're already logged into Google,

50
00:03:00.645 --> 00:03:04.598
then you might ask it to select your account and give permission for the site.

51
00:03:04.598 --> 00:03:06.895
You now have access to the site.

52
00:03:06.895 --> 00:03:11.635
Now you'll probably want to add the Google sign-in button to your login page.

53
00:03:11.635 --> 00:03:16.960
In the Configuration class for oauth2Login, we can set the login page.

54
00:03:16.960 --> 00:03:18.621
And in the login HTML,

55
00:03:18.621 --> 00:03:24.512
we can add the link that submits to oauth/authorization/google.

56
00:03:24.512 --> 00:03:25.392
Now that's it.

57
00:03:25.392 --> 00:03:27.846
Spring Security will now do the rest.

58
00:03:27.846 --> 00:03:31.862
Setting up other providers is also very simple.

59
00:03:31.862 --> 00:03:34.240
Register your application with them, example Facebook,

60
00:03:34.240 --> 00:03:36.421
you need to create a developer account,

61
00:03:36.421 --> 00:03:42.278
and simply add the sign- in button to the login page and add the client ID and

62
00:03:42.278 --> 00:03:48.159
secret in the application.yml for the OAuth2 registration.

63
00:03:48.159 --> 00:03:49.351
Nice and simple.

64
00:03:49.351 --> 00:03:54.412
Now this is just a primer of Spring Security OAuth2 support.

65
00:03:54.412 --> 00:04:00.000
It can actually be a whole course in itself. But hopefully, this has given you a starting point.

