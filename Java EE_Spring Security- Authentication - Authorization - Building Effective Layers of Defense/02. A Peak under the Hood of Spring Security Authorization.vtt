WEBVTT
1
00:00:02.248 --> 00:00:05.009
Let's take a typical HTTP request,

2
00:00:05.009 --> 00:00:08.718
trying to access a portfolio page as an example.

3
00:00:08.718 --> 00:00:11.827
The request will make its way down the filter chain until it

4
00:00:11.827 --> 00:00:17.158
reaches the FilterSecurityInterceptor, which is the final filter in the chain.

5
00:00:17.158 --> 00:00:20.544
This filter will call the SecurityMetadataSource to retrieve

6
00:00:20.544 --> 00:00:25.615
the security metadata of the portfolio URL.

7
00:00:25.615 --> 00:00:30.225
Recall back to our SecurityConfiguration class where we configured

8
00:00:30.225 --> 00:00:35.500
the /portfolio URL to require the role USER.

9
00:00:35.500 --> 00:00:39.874
The SecurityMetadataSource will return the config attribute.

10
00:00:39.874 --> 00:00:46.139
In this case, the URL pattern requires the principle to have a role of user.

11
00:00:46.139 --> 00:00:49.317
The interceptor filter will also retrieve the

12
00:00:49.317 --> 00:00:51.820
authenticated principle from the security context,

13
00:00:51.820 --> 00:00:55.503
which, in this case, has the role of user.

14
00:00:55.503 --> 00:00:59.779
It will then call the AccessDecisionManager to decide if the request has

15
00:00:59.779 --> 00:01:04.468
access to that portfolio URL by passing it the request object,

16
00:01:04.468 --> 00:01:09.138
the security metadata, and the Authentication object.

17
00:01:09.138 --> 00:01:13.558
The manager then asks one or more AccessDecisionVoters for their

18
00:01:13.558 --> 00:01:16.988
opinion on whether access should be granted.

19
00:01:16.988 --> 00:01:20.556
The AccessDecisionVoters return their votes to the

20
00:01:20.556 --> 00:01:24.176
AccessDecisionManager who will then make the final decision.

21
00:01:24.176 --> 00:01:27.376
Now let's drill into the AccessDecisionVoters.

22
00:01:27.376 --> 00:01:29.631
It has a number of support methods,

23
00:01:29.631 --> 00:01:34.149
which are called first by the AccessDecisionManager to see if the voter is

24
00:01:34.149 --> 00:01:38.771
capable of voting on the passed ConfigAttribute or object type.

25
00:01:38.771 --> 00:01:43.649
If it is, the vote method is called, passing in the Authentication object,

26
00:01:43.649 --> 00:01:49.555
the secured object being invoked, in this example the HTTP servlet request,

27
00:01:49.555 --> 00:01:52.484
and the security metadata configuration attribute,

28
00:01:52.484 --> 00:01:56.366
returning a vote as an integer value.

29
00:01:56.366 --> 00:02:00.553
The voters can vote one of three ways, to grant access,

30
00:02:00.553 --> 00:02:05.908
returning a value of 1, to deny access, returning a value of -1,

31
00:02:05.908 --> 00:02:10.379
and to abstain, returning 0, meaning they declined to vote.

32
00:02:10.379 --> 00:02:13.908
There are many flavors of the AccessDecisionVoter.

33
00:02:13.908 --> 00:02:14.995
The AuthenticatedVoter,

34
00:02:14.995 --> 00:02:19.528
this is very basic voter that only considers if the user is

35
00:02:19.528 --> 00:02:22.704
authenticated and how they are authenticated,

36
00:02:22.704 --> 00:02:28.404
either by Remember me, anonymously, or via the login page.

37
00:02:28.404 --> 00:02:33.797
Then there is the RoleVoters that additionally consider the principle's role.

38
00:02:33.797 --> 00:02:38.079
The most common voter used by web applications and currently being used

39
00:02:38.079 --> 00:02:40.941
in our demo application is the WebExpressionVoter.

40
00:02:40.941 --> 00:02:43.987
It also handles Spring expressions,

41
00:02:43.987 --> 00:02:47.996
which we will be using heavily in the next sections.

42
00:02:47.996 --> 00:02:52.150
There are many other types of voters, and you can even create your own.

43
00:02:52.150 --> 00:02:55.383
Let's now focus on the AccessDecisionManager.

44
00:02:55.383 --> 00:02:58.775
It also has a support method and a decide method,

45
00:02:58.775 --> 00:03:03.529
which can either throw an AccessDeniedException if the user is not

46
00:03:03.529 --> 00:03:06.371
authorized to access the resource or an

47
00:03:06.371 --> 00:03:11.241
InsufficientAuthenticationException if the user was either not

48
00:03:11.241 --> 00:03:15.253
authenticated or perhaps the user was authenticated via Remember me,

49
00:03:15.253 --> 00:03:19.557
but the resource requires them to be authenticated by the

50
00:03:19.557 --> 00:03:22.643
sign-in for additional security measures.

51
00:03:22.643 --> 00:03:26.243
There are three flavors of the AuthenticationDecisionManager,

52
00:03:26.243 --> 00:03:29.891
which extend the AbstractAccessDecisionManager that

53
00:03:29.891 --> 00:03:33.855
implements the AccessDecisionManager interface.

54
00:03:33.855 --> 00:03:37.539
The AffirmativeBased, which is the default implementation.

55
00:03:37.539 --> 00:03:41.263
It grants access if just one of the voters grants access,

56
00:03:41.263 --> 00:03:45.899
even if the other voters vote to deny or abstain.

57
00:03:45.899 --> 00:03:51.662
The consensus grants access based on the majority of non-abstained voters.

58
00:03:51.662 --> 00:03:58.022
And finally, the unanimous requires all non-abstained voters to grant access.

59
00:03:58.022 --> 00:04:01.858
If just one denies access, it will not be granted.

60
00:04:01.858 --> 00:04:06.988
Okay, so going back to the flow, if the outcome is access-denied,

61
00:04:06.988 --> 00:04:09.467
then the decision manager will throw an AccessDeniedExcpetion,

62
00:04:09.467 --> 00:04:14.772
which will be handled by the ExceptionTranslationFilter.

63
00:04:14.772 --> 00:04:18.112
If we drill into the ExceptionTranslationFilter,

64
00:04:18.112 --> 00:04:22.895
depending on the exception, it will invoke the appropriate exception handler.

65
00:04:22.895 --> 00:04:25.730
In this case, it's the AccessDeniedHandler,

66
00:04:25.730 --> 00:04:29.735
which might return a 403 or perform any action you

67
00:04:29.735 --> 00:04:32.697
configure in your AccessDeniedhanlder.

68
00:04:32.697 --> 00:04:35.571
That's basically it in a nutshell.

69
00:04:35.571 --> 00:04:39.918
Spring provides the ability to layer authorization form course-grained,

70
00:04:39.918 --> 00:04:43.653
like URL or page level, to more finer- grained,

71
00:04:43.653 --> 00:04:52.000
such as method invocation and access control to a domain object. We will demo these in the next sections.

