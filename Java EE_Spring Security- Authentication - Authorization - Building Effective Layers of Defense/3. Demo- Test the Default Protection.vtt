WEBVTT
1
00:00:01.956 --> 00:00:06.280
Okay, to better understand the importance of these headers and threats,

2
00:00:06.280 --> 00:00:09.910
let's put on a hackie hoodie and head over to the basement again.

3
00:00:09.910 --> 00:00:12.706
Now as I mentioned, as a tech lead,

4
00:00:12.706 --> 00:00:16.218
I can't recall the number of times I have reviewed code where

5
00:00:16.218 --> 00:00:19.134
developers simply disabled the default security settings

6
00:00:19.134 --> 00:00:20.982
without understanding the consequences,

7
00:00:20.982 --> 00:00:25.177
like when receiving an error on the form submission due to not

8
00:00:25.177 --> 00:00:28.253
including the cross-site request forgery token.

9
00:00:28.253 --> 00:00:33.216
The developer simply disabled cross-site request forgery protection altogether.

10
00:00:33.216 --> 00:00:34.698
On top of that, for some reason,

11
00:00:34.698 --> 00:00:38.181
they just disabled the default headers as well because that was the

12
00:00:38.181 --> 00:00:41.849
first solution they came across when Googling the error.

13
00:00:41.849 --> 00:00:42.967
Hence, in this demo,

14
00:00:42.967 --> 00:00:46.478
let's see the negative consequence to your users when

15
00:00:46.478 --> 00:00:50.254
incorrectly changing the default security settings.

16
00:00:50.254 --> 00:00:52.785
Let's disable the cross-site request forgery filter,

17
00:00:52.785 --> 00:00:56.081
as well as the header filter.

18
00:00:56.081 --> 00:00:59.023
Spring will now not add these filters to the filter chain.

19
00:00:59.023 --> 00:01:04.251
If you just want to disable default headers and perhaps add your own headers,

20
00:01:04.251 --> 00:01:06.517
you can use the disabled defaults.

21
00:01:06.517 --> 00:01:09.602
Hence, Spring will still include the header filter in the chain,

22
00:01:09.602 --> 00:01:12.151
but with the default headers disabled.

23
00:01:12.151 --> 00:01:17.211
If your user now logs into the site from,

24
00:01:17.211 --> 00:01:21.430
say, a public computer, perhaps they're on holiday using an internet cafÃ©,

25
00:01:21.430 --> 00:01:25.319
they check their portfolio balance and maybe the account details,

26
00:01:25.319 --> 00:01:26.396
and then log off.

27
00:01:26.396 --> 00:01:29.809
The hacker can then browse the public computer's temporary internet

28
00:01:29.809 --> 00:01:32.914
files and potentially see the user's personal details,

29
00:01:32.914 --> 00:01:35.714
like their email address, their home address,

30
00:01:35.714 --> 00:01:37.871
as caching is not disabled.

31
00:01:37.871 --> 00:01:42.109
This now exposes the user to a targeted cycling attacks.

32
00:01:42.109 --> 00:01:46.381
Noticing that the caching was not disabled on sensitive data,

33
00:01:46.381 --> 00:01:50.297
the hacker suspects that other weaknesses might be likely.

34
00:01:50.297 --> 00:01:53.927
The user receives a promotional email to win free crypto.

35
00:01:53.927 --> 00:01:59.201
With the personal information from the cached pages now make it look more legit.

36
00:01:59.201 --> 00:02:01.117
And who doesn't want free crypto?

37
00:02:01.117 --> 00:02:06.421
If they are logged into the portfolio site and open this link and submit it,

38
00:02:06.421 --> 00:02:09.672
their litecoin position has now been sold.

39
00:02:09.672 --> 00:02:13.093
The user will not be impressed.

40
00:02:13.093 --> 00:02:15.068
So what just happened here?

41
00:02:15.068 --> 00:02:18.698
If we look at the malicious site's source,

42
00:02:18.698 --> 00:02:21.262
it is submitting a form to our portfolio site with

43
00:02:21.262 --> 00:02:24.521
hidden form fields to sell the crypto.

44
00:02:24.521 --> 00:02:27.467
And the browser will simply add the cookie on the way out.

45
00:02:27.467 --> 00:02:30.207
And since the user is logged into the portfolio site and

46
00:02:30.207 --> 00:02:33.143
the request originated from the browser,

47
00:02:33.143 --> 00:02:36.324
the portfolio server simply accepts the request.

48
00:02:36.324 --> 00:02:41.303
The user has just been a victim of cross- site request forgery.

49
00:02:41.303 --> 00:02:44.714
If we re-enable the cross-site request forgery filter and try again,

50
00:02:44.714 --> 00:02:48.823
you can see that we get an error now as the cross-site request forgery token

51
00:02:48.823 --> 00:02:54.102
is missing in the request and Spring Security blocks it.

52
00:02:54.102 --> 00:02:55.214
Now to get around this,

53
00:02:55.214 --> 00:02:59.005
the hacker can send another email apologizing to the user for technical

54
00:02:59.005 --> 00:03:03.954
issues with the promotion and asking them to try a new link.

55
00:03:03.954 --> 00:03:07.389
The page looks similar, but let's take a look at the source.

56
00:03:07.389 --> 00:03:12.071
You can see it's embedding the portfolio site as a frame on top of

57
00:03:12.071 --> 00:03:14.787
the form of the malicious page that submits itself.

58
00:03:14.787 --> 00:03:19.874
Let's change the opacity of the frame to 30% and see what happens.

59
00:03:19.874 --> 00:03:22.779
You can now see the portfolio site in the background.

60
00:03:22.779 --> 00:03:25.160
The hacker can simply align the buttons on the malicious

61
00:03:25.160 --> 00:03:27.356
page over the top of the portfolio site.

62
00:03:27.356 --> 00:03:27.717
Hence,

63
00:03:27.717 --> 00:03:30.779
the user is actually selecting things on the portfolio

64
00:03:30.779 --> 00:03:33.566
site without even knowing about it.

65
00:03:33.566 --> 00:03:36.353
And if we look at the source of the embedded portfolio page,

66
00:03:36.353 --> 00:03:41.816
the cross-site request forgery token is on the form.

67
00:03:41.816 --> 00:03:46.427
So if the user submits this, their litecoin position will now be removed.

68
00:03:46.427 --> 00:03:52.415
The user has just been a victim of a clickjacking attack.

69
00:03:52.415 --> 00:03:55.521
If we re-enable the header filter and try this again,

70
00:03:55.521 --> 00:03:58.413
you can see the browser prevents the malicious site

71
00:03:58.413 --> 00:04:00.616
from embedding our portfolio page.

72
00:04:00.616 --> 00:04:04.928
Now back to the drawing board for the hacker.

73
00:04:04.928 --> 00:04:07.913
This time they register a fake account with the site and submit

74
00:04:07.913 --> 00:04:11.075
the following script to the support page.

75
00:04:11.075 --> 00:04:15.541
Now if an administrator goes and views this support query,

76
00:04:15.541 --> 00:04:20.238
the browser executes the code, which could try to steal the session ID,

77
00:04:20.238 --> 00:04:25.158
the cookie, change page content, or any number of nefarious tasks.

78
00:04:25.158 --> 00:04:28.739
This is a very simple replay cross-site scripting attack.

79
00:04:28.739 --> 00:04:32.499
And it occurred because the content was not encoded.

80
00:04:32.499 --> 00:04:33.298
Now I'm using Thymeleaf,

81
00:04:33.298 --> 00:04:37.709
and I had to specifically use a tag that prevents encoding.

82
00:04:37.709 --> 00:04:41.179
If I flip it back to the correct tag and refresh the page,

83
00:04:41.179 --> 00:04:44.318
you can see the browser will now simply just display

84
00:04:44.318 --> 00:04:46.517
the content without executing it.

85
00:04:46.517 --> 00:04:46.773
Again,

86
00:04:46.773 --> 00:04:50.202
this shows you the importance of using tag libraries and frameworks

87
00:04:50.202 --> 00:04:53.853
like Spring to ensure the content is encoded.

88
00:04:53.853 --> 00:04:59.151
To sum up, use well-established frameworks with large, active communities.

89
00:04:59.151 --> 00:05:01.114
Don't try to reinvent the wheel.

90
00:05:01.114 --> 00:05:03.971
The increased adoption of frameworks, like Spring Security,

91
00:05:03.971 --> 00:05:08.134
has resulted in significant reductions of these types of attacks.

92
00:05:08.134 --> 00:05:11.678
Don't change any of the default setting configuration unless you really

93
00:05:11.678 --> 00:05:15.434
need to and you know the consequences to your users,

94
00:05:15.434 --> 00:05:22.000
as sometimes it might be better to reconsider your approach and change the application instead.

