WEBVTT
1
00:00:00.000 --> 00:00:04.049
Hi, it's Wojciech Lesniak.

2
00:00:04.049 --> 00:00:09.593
Welcome to this module on Outsourcing Authentication with OpenID and OAuth2.

3
00:00:09.593 --> 00:00:14.636
To speed up the registration process and simplify authentication for the user,

4
00:00:14.636 --> 00:00:18.160
many sites outsource authentication to third parties,

5
00:00:18.160 --> 00:00:21.086
like Facebook, Google, or Okta.

6
00:00:21.086 --> 00:00:22.608
This is done through OAuth.

7
00:00:22.608 --> 00:00:25.927
And the way it works is there are generally three actors,

8
00:00:25.927 --> 00:00:30.007
the user, let's call her Victoria, the client,

9
00:00:30.007 --> 00:00:32.880
our web application, Crypto Portfolio,

10
00:00:32.880 --> 00:00:37.101
the resource server where the user's profile is stored,

11
00:00:37.101 --> 00:00:38.827
in this case Google.

12
00:00:38.827 --> 00:00:44.500
Our portfolio site is a client of Google and has a client ID and a secret,

13
00:00:44.500 --> 00:00:49.305
which it shares with Google, so Google can identify the web application.

14
00:00:49.305 --> 00:00:54.920
Now Victoria wants to monitor her holdings using the Crypto Portfolio site.

15
00:00:54.920 --> 00:00:58.011
Before she can do that, she needs to be authenticated.

16
00:00:58.011 --> 00:01:01.350
The site gives her the ability to register and log in.

17
00:01:01.350 --> 00:01:06.557
However, we can also give her another option to authenticate with a third party,

18
00:01:06.557 --> 00:01:07.530
like Google.

19
00:01:07.530 --> 00:01:11.490
Victoria is already registered with Google and decides on the

20
00:01:11.490 --> 00:01:15.283
easy route of selecting sign in with Google.

21
00:01:15.283 --> 00:01:17.799
She is then redirected to the Google's authentication page,

22
00:01:17.799 --> 00:01:22.347
and the client ID is included in the redirect.

23
00:01:22.347 --> 00:01:26.709
She authenticates with Google, and as the resource owner of her data,

24
00:01:26.709 --> 00:01:29.698
Google asks if she gives the client, Crypto Portfolio,

25
00:01:29.698 --> 00:01:34.641
authority to access the following data from her profile in Google.

26
00:01:34.641 --> 00:01:36.579
If she authorizes the client,

27
00:01:36.579 --> 00:01:41.780
then Google will send a redirect to her browser back to the client's server

28
00:01:41.780 --> 00:01:45.281
with the auth code that is encrypted with the secret key.

29
00:01:45.281 --> 00:01:48.631
The user's browser will then forward the request to the

30
00:01:48.631 --> 00:01:51.337
client with the encrypted auth code.

31
00:01:51.337 --> 00:01:54.852
The client will decrypt the auth code with the secret key

32
00:01:54.852 --> 00:01:57.653
known only to the client and Google.

33
00:01:57.653 --> 00:01:59.957
The client will then the auth code to Google,

34
00:01:59.957 --> 00:02:04.898
and Google will validate it and respond back with an access token.

35
00:02:04.898 --> 00:02:08.641
The access token can be used to retrieve the authorized user

36
00:02:08.641 --> 00:02:12.900
profile data to identify and authenticate the user,

37
00:02:12.900 --> 00:02:17.623
giving them access to their portfolio.

38
00:02:17.623 --> 00:02:23.034
OAuth is not actually designed for authentication, but for authorization.

39
00:02:23.034 --> 00:02:23.955
In the past,

40
00:02:23.955 --> 00:02:26.725
many providers like Google and Facebook have customized

41
00:02:26.725 --> 00:02:29.772
it to perform authentication securely.

42
00:02:29.772 --> 00:02:32.223
Due to the popularity of sign in with OAuth,

43
00:02:32.223 --> 00:02:35.550
this has resulted in each provider having different

44
00:02:35.550 --> 00:02:37.897
implementations of OAuth for authentication.

45
00:02:37.897 --> 00:02:38.413
Hence,

46
00:02:38.413 --> 00:02:43.955
you would need to know each provider's implementation to add it to your site.

47
00:02:43.955 --> 00:02:47.040
OpenID Connect builds on top of OAuth.

48
00:02:47.040 --> 00:02:49.391
It is a specification that attempts to standardize

49
00:02:49.391 --> 00:02:53.480
authentication with OAuth so that you don't need to know the

50
00:02:53.480 --> 00:02:56.143
details of the authentication provider.

51
00:02:56.143 --> 00:02:58.235
But it is not yet widely adopted by everybody,

52
00:02:58.235 --> 00:03:02.069
and you often hear the names used interchangeably.

53
00:03:02.069 --> 00:03:04.575
Often providers will still use the name OAuth,

54
00:03:04.575 --> 00:03:07.366
even though they're using OpenID Connect.

55
00:03:07.366 --> 00:03:09.639
This can be a lot to take in.

56
00:03:09.639 --> 00:03:13.158
Fortunately, Spring Security does most of the work for us.

57
00:03:13.158 --> 00:03:16.710
It has out-of-the-box support for Google,

58
00:03:16.710 --> 00:03:21.702
GitHub, Facebook, and Okta, some using OAuth2,

59
00:03:21.702 --> 00:03:26.000
some OpenID. So let's sign in with Google.

