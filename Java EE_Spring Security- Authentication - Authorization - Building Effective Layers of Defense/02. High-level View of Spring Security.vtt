WEBVTT
1
00:00:02.655 --> 00:00:07.282
Let's take a higher view of web security with Spring.

2
00:00:07.282 --> 00:00:10.101
In your typical Java web application,

3
00:00:10.101 --> 00:00:14.055
the client makes an HTTP request to a web server,

4
00:00:14.055 --> 00:00:16.529
like Tomcat or JBoss.

5
00:00:16.529 --> 00:00:20.762
The request is then forwarded to the appropriate servlet for processing.

6
00:00:20.762 --> 00:00:24.220
The response is then updated and returned to the client.

7
00:00:24.220 --> 00:00:26.143
For a Spring web application,

8
00:00:26.143 --> 00:00:31.732
the servlet handling all requests would be the dispatcher servlet.

9
00:00:31.732 --> 00:00:34.690
Another key component here are filters,

10
00:00:34.690 --> 00:00:38.091
which sit in front of the servlets and intercept requests.

11
00:00:38.091 --> 00:00:43.429
They can perform some actions on the request response objects and

12
00:00:43.429 --> 00:00:46.856
forward them on to the next filter in the chain.

13
00:00:46.856 --> 00:00:50.191
Spring Security makes heavy use of these filters.

14
00:00:50.191 --> 00:00:52.920
Basically, to enable Spring Security,

15
00:00:52.920 --> 00:00:56.207
you just have to register the Spring Security filter,

16
00:00:56.207 --> 00:01:00.104
the DelegatingFilterProxy, with your servlet container.

17
00:01:00.104 --> 00:01:05.013
The DelegatingFilterProxy will forward all requests to other Spring Security

18
00:01:05.013 --> 00:01:09.781
filters to perform authentication or authorization checks.

19
00:01:09.781 --> 00:01:13.581
This is one of the key strengths of Spring Security and Spring Boot.

20
00:01:13.581 --> 00:01:17.006
You only need to configure two components with the web server,

21
00:01:17.006 --> 00:01:20.141
the dispatcher servlet and the DelegatingFilterProxy.

22
00:01:20.141 --> 00:01:20.662
That's it.

23
00:01:20.662 --> 00:01:24.750
You don't need to use any other features of the web container,

24
00:01:24.750 --> 00:01:27.490
which makes the framework very portable.

25
00:01:27.490 --> 00:01:32.445
You can easily plug it in to any application server quickly.

26
00:01:32.445 --> 00:01:35.652
Let's take a quick look at the filter interface.

27
00:01:35.652 --> 00:01:40.730
The specification for a filter requires three methods to be implemented,

28
00:01:40.730 --> 00:01:44.931
the init method, which is called when the filter is put into service,

29
00:01:44.931 --> 00:01:49.626
the destroy method, which is called when it is taken out of service.

30
00:01:49.626 --> 00:01:53.013
Any initialization or cleanup code can be placed here.

31
00:01:53.013 --> 00:01:55.582
The key method is the doFilter method.

32
00:01:55.582 --> 00:01:58.968
This is where all the action takes place.

33
00:01:58.968 --> 00:02:03.262
IsExecuted on each request the filter is configured to receive,

34
00:02:03.262 --> 00:02:07.459
giving it access to the Request and Response objects.

35
00:02:07.459 --> 00:02:11.688
The FilterChain object passed into the method gives it the ability to

36
00:02:11.688 --> 00:02:16.605
forward the request on to the next filter in the chain.

37
00:02:16.605 --> 00:02:18.479
If we dive a little deeper,

38
00:02:18.479 --> 00:02:23.029
we can see that the DelegatingFilterProxy is registered in

39
00:02:23.029 --> 00:02:25.647
the Spring container's web XML file,

40
00:02:25.647 --> 00:02:31.643
and it simply delegates to another Spring filter known as the FilterChainProxy,

41
00:02:31.643 --> 00:02:36.813
which also delegates to another object called the SecurityFilterChain.

42
00:02:36.813 --> 00:02:40.105
The SecurityFilterChain is a wrapper around a collection of

43
00:02:40.105 --> 00:02:44.214
Spring filters that perform the actual security tasks on the

44
00:02:44.214 --> 00:02:46.732
Request and Response objects.

45
00:02:46.732 --> 00:02:47.367
Don't worry.

46
00:02:47.367 --> 00:02:51.511
This will make more sense in the subsequent sections.

47
00:02:51.511 --> 00:02:53.613
But as you're probably already starting to see,

48
00:02:53.613 --> 00:02:57.234
Spring Security is made up of a lot of filters and even

49
00:02:57.234 --> 00:03:01.173
filters and filter chains within filters.

50
00:03:01.173 --> 00:03:04.016
So let's now take a look at how Spring Security is

51
00:03:04.016 --> 00:03:06.852
configured in the web application.

52
00:03:06.852 --> 00:03:10.226
Traditionally, this is done via the web XML file.

53
00:03:10.226 --> 00:03:15.935
As you can see here, we simply register the DelegatingFilterProxy with the name,

54
00:03:15.935 --> 00:03:20.305
springSecurityFilterChain and provide a mapping.

55
00:03:20.305 --> 00:03:22.900
The key here is the filter mapping.

56
00:03:22.900 --> 00:03:26.563
As you can see, the pattern is /*.

57
00:03:26.563 --> 00:03:26.975
Hence,

58
00:03:26.975 --> 00:03:30.223
every request that the container receives will be

59
00:03:30.223 --> 00:03:39.000
intercepted by the DelegatingFilterProxy. So Spring Security will be performing all security checks on all requests.

