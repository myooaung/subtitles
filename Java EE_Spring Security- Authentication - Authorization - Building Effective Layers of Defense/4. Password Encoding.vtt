WEBVTT
1
00:00:02.021 --> 00:00:08.043
As of Spring 5, the default password encoder is the DelegatingPasswordEncoder.

2
00:00:08.043 --> 00:00:09.246
As the name suggests,

3
00:00:09.246 --> 00:00:14.545
it delegates the encoding and password matching to an appropriate encoder.

4
00:00:14.545 --> 00:00:16.774
It implements the PasswordEncoder interface,

5
00:00:16.774 --> 00:00:19.906
which requires two methods to be implemented,

6
00:00:19.906 --> 00:00:24.818
the encode method, which encodes a plain text password into a hash,

7
00:00:24.818 --> 00:00:26.955
and the matches method,

8
00:00:26.955 --> 00:00:30.424
which checks if a plain text password matches the

9
00:00:30.424 --> 00:00:33.210
encoded password used for authentication.

10
00:00:33.210 --> 00:00:36.974
Now this will all make more sense once we look at the

11
00:00:36.974 --> 00:00:38.202
PasswordEncodersFactories class.

12
00:00:38.202 --> 00:00:43.780
This is the factory that configures the default DelegatingPasswordEncoder.

13
00:00:43.780 --> 00:00:44.502
You can see,

14
00:00:44.502 --> 00:00:49.810
it configures a map of many encoders from MD5 to bcrypt and creates an

15
00:00:49.810 --> 00:00:54.573
instance of the DelegatingPasswordEncoder with the encoders map,

16
00:00:54.573 --> 00:00:56.677
as well as an encodingId.

17
00:00:56.677 --> 00:00:59.954
Now the encodingId configures the default encoder to be

18
00:00:59.954 --> 00:01:02.598
used when the encode method is called.

19
00:01:02.598 --> 00:01:06.746
Now how the delegating encoder works is that it expects the

20
00:01:06.746 --> 00:01:09.510
password retrieved from your identity store,

21
00:01:09.510 --> 00:01:09.973
i.e.

22
00:01:09.973 --> 00:01:15.609
the hashed raw password, to be prefixed with an encoded prefix ID.

23
00:01:15.609 --> 00:01:19.616
It will then use the encoder map to determine which one of them

24
00:01:19.616 --> 00:01:23.488
matches the ID and use that for authentication.

25
00:01:23.488 --> 00:01:27.222
Now in this case, the passwords are prefixed with noop.

26
00:01:27.222 --> 00:01:33.051
Hence, it will strip this prefix and use the noop password encoder.

27
00:01:33.051 --> 00:01:36.134
Now this gives you the flexibility to use different types of

28
00:01:36.134 --> 00:01:39.062
encoders for passwords in your identity store,

29
00:01:39.062 --> 00:01:43.383
which makes migrating to bcrypt or other encoders a lot more simpler

30
00:01:43.383 --> 00:01:45.978
as user accounts with credentials encoded with,

31
00:01:45.978 --> 00:01:46.441
say,

32
00:01:46.441 --> 00:01:51.406
a legacy MD5 can still log in and be gradually migrated

33
00:01:51.406 --> 00:01:56.513
to the different encoder over time, perhaps when their password resets.

34
00:01:56.513 --> 00:01:59.719
Now by default, the encoder ID is set to bcrypt,

35
00:01:59.719 --> 00:02:04.807
which means passwords, by default, will be encoded by bcrypt.

36
00:02:04.807 --> 00:02:05.879
Currently in MongoDB,

37
00:02:05.879 --> 00:02:11.087
I have configured three users and used the noop password prefix.

38
00:02:11.087 --> 00:02:13.968
Hence, when the user logs into the application,

39
00:02:13.968 --> 00:02:17.757
the delegating password encoder will use the noop password

40
00:02:17.757 --> 00:02:20.668
encoder to see if the password matches.

41
00:02:20.668 --> 00:02:23.534
Now this is not secure as the noop password encoder

42
00:02:23.534 --> 00:02:26.618
effectively is a plain text password matcher,

43
00:02:26.618 --> 00:02:31.094
and we want to hash our password using bcrypt.

44
00:02:31.094 --> 00:02:31.998
Now to do this,

45
00:02:31.998 --> 00:02:35.438
we need to autowire the delegating PasswordEncoder into the

46
00:02:35.438 --> 00:02:39.436
RegistrationServices class and then encode the password.

47
00:02:39.436 --> 00:02:41.628
Now before we can do that,

48
00:02:41.628 --> 00:02:46.865
you will also need to expose the encoder as a bean so that we can

49
00:02:46.865 --> 00:02:50.610
autowire it in to the RegistrationService class.

50
00:02:50.610 --> 00:02:52.561
Now you can do this in your configuration class,

51
00:02:52.561 --> 00:02:56.591
which extends the WebSecurityConfigurerAdapter.

52
00:02:56.591 --> 00:02:58.932
Create a method that returns a PasswordEncoder and

53
00:02:58.932 --> 00:03:01.236
annotate it with the Bean annotation.

54
00:03:01.236 --> 00:03:05.616
Now you can then use the PasswordEncoderFactories class to

55
00:03:05.616 --> 00:03:08.476
return the password encoder returned by the

56
00:03:08.476 --> 00:03:12.072
createDelegatingPasswordEncoder method.

57
00:03:12.072 --> 00:03:15.991
Now if we restart our application and register as a new user,

58
00:03:15.991 --> 00:03:19.059
you can see that the password is now hashed,

59
00:03:19.059 --> 00:03:20.713
and the prefix is bcrypt.

60
00:03:20.713 --> 00:03:23.808
We can now log in as a new user,

61
00:03:23.808 --> 00:03:28.366
and the delegating encoder will use the prefix to determine that it should

62
00:03:28.366 --> 00:03:32.812
the bcrypt encoder to perform the password matching.

63
00:03:32.812 --> 00:03:35.383
You can still log in with the other user accounts

64
00:03:35.383 --> 00:03:38.362
that have the noop password prefix.

65
00:03:38.362 --> 00:03:43.676
Now you can also set a default password encoder for matching.

66
00:03:43.676 --> 00:03:46.570
In this way, if the prefix ID is missing,

67
00:03:46.570 --> 00:03:50.613
it will not throw an exception, but use the encoder you specified,

68
00:03:50.613 --> 00:03:56.087
in this case, perhaps the bcrypt encoder or any other one you want to use.

69
00:03:56.087 --> 00:03:59.345
Now if you want to encode your password for registration with

70
00:03:59.345 --> 00:04:02.502
a different algorithm other than bcrypt,

71
00:04:02.502 --> 00:04:07.340
you can simply create your own instance of the DelegatingPasswordEncoder.

72
00:04:07.340 --> 00:04:11.113
You can also add your own map of encoders you want to support,

73
00:04:11.113 --> 00:04:15.475
as well as change the encoder type to something,

74
00:04:15.475 --> 00:04:17.672
say, like scrypt.

75
00:04:17.672 --> 00:04:21.927
Now the password encoders with a line through them have now been deprecated,

76
00:04:21.927 --> 00:04:25.328
which means they are no longer secure, things like MD5,

77
00:04:25.328 --> 00:04:25.839
etc.

78
00:04:25.839 --> 00:04:28.903
So it's not recommended you use any of these.

79
00:04:28.903 --> 00:04:31.680
Now if you only want to use bcrypt in your application,

80
00:04:31.680 --> 00:04:44.000
you can simply return the BCryptPasswordEncoder as a bean, and Spring will then use this encoder for both encoding and matching.

