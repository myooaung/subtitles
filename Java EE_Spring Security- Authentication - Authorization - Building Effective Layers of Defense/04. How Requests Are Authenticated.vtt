WEBVTT
1
00:00:02.693 --> 00:00:06.995
Let's explore the authentication filters in a little bit more detail.

2
00:00:06.995 --> 00:00:11.365
As mentioned before, there are many flavors you can choose from,

3
00:00:11.365 --> 00:00:13.523
like basic, digest, OpenID.

4
00:00:13.523 --> 00:00:16.980
The authentication filter will extract the credentials from the

5
00:00:16.980 --> 00:00:21.108
request and create an authentication request token.

6
00:00:21.108 --> 00:00:21.482
Again,

7
00:00:21.482 --> 00:00:25.423
many flavors of tokens are available to you depending

8
00:00:25.423 --> 00:00:27.685
on your authentication strategy.

9
00:00:27.685 --> 00:00:31.137
The filter then delegates authentication to an AuthenticationManager,

10
00:00:31.137 --> 00:00:36.311
which will return an authenticated principal token to the filter.

11
00:00:36.311 --> 00:00:39.634
Let's now take a closer look at the AuthenticationManager.

12
00:00:39.634 --> 00:00:43.274
The AuthenticationManager actually delegates to one or more

13
00:00:43.274 --> 00:00:46.532
authentication providers that do the authentication.

14
00:00:46.532 --> 00:00:51.455
Again, Spring provides many flavors of authentication providers.

15
00:00:51.455 --> 00:00:55.276
Generally though, you will only have one provider in your application.

16
00:00:55.276 --> 00:00:57.660
But if you have multiple identity stores,

17
00:00:57.660 --> 00:00:59.969
which is not that unusual in large organizations,

18
00:00:59.969 --> 00:01:03.478
you have that flexibility to configure others.

19
00:01:03.478 --> 00:01:09.625
The manager will try each one until it receives an authenticated token.

20
00:01:09.625 --> 00:01:13.029
The interface for the AuthenticationManager is straightforward.

21
00:01:13.029 --> 00:01:18.623
It has one method that accepts and returns an authentication token.

22
00:01:18.623 --> 00:01:22.913
The authentication interface has a few more moving parts.

23
00:01:22.913 --> 00:01:25.510
IsAuthenticated is self-explanatory.

24
00:01:25.510 --> 00:01:26.888
It defaults to false.

25
00:01:26.888 --> 00:01:29.800
And if set to true by the authentication provider,

26
00:01:29.800 --> 00:01:32.692
the authentication was successful.

27
00:01:32.692 --> 00:01:38.580
GetPrincipal returns the entity that can be authenticated, example the username.

28
00:01:38.580 --> 00:01:41.380
GetCredentials returns the piece of evidence that the

29
00:01:41.380 --> 00:01:45.765
principal has to prove its identity, like a password.

30
00:01:45.765 --> 00:01:50.573
GetAuthorties returns the rights and powers of the principal once authenticated,

31
00:01:50.573 --> 00:01:54.868
example the user roles, like admin user,

32
00:01:54.868 --> 00:01:55.481
etc.

33
00:01:55.481 --> 00:01:59.046
Now let's clean up some of the terminology and look at the

34
00:01:59.046 --> 00:02:02.489
different stages the authentication token goes through.

35
00:02:02.489 --> 00:02:02.743
Initially,

36
00:02:02.743 --> 00:02:05.681
it is referred to as the authentication request as

37
00:02:05.681 --> 00:02:08.219
it hasn't yet been authenticated.

38
00:02:08.219 --> 00:02:12.258
The principal will have a username or any object that

39
00:02:12.258 --> 00:02:15.450
identifies the entity being authenticated,

40
00:02:15.450 --> 00:02:18.402
and it will have no granted authorities.

41
00:02:18.402 --> 00:02:22.880
Once authenticated, it is known as the authentication principal.

42
00:02:22.880 --> 00:02:25.500
The isAuthenticated method will return true,

43
00:02:25.500 --> 00:02:29.610
and the principal will now return a UserDetails object,

44
00:02:29.610 --> 00:02:34.546
which will encapsulate all the principal's identity details.

45
00:02:34.546 --> 00:02:38.308
Credentials will be removed however as you don't want things

46
00:02:38.308 --> 00:02:41.431
like passwords around for longer than absolutely necessary

47
00:02:41.431 --> 00:02:44.546
outside of their identity stores.

48
00:02:44.546 --> 00:02:45.839
And if you recall,

49
00:02:45.839 --> 00:02:50.427
the authenticate principal will be stored in memory in the session context,

50
00:02:50.427 --> 00:02:53.077
which will be persisted in the session,

51
00:02:53.077 --> 00:02:56.600
accessible to any object in the current thread.

52
00:02:56.600 --> 00:03:01.225
There is one more piece to this puzzle, and that is the AuthenticationProviders.

53
00:03:01.225 --> 00:03:02.413
To perform authentication,

54
00:03:02.413 --> 00:03:07.169
they need to retrieve the principal's details from an identity store,

55
00:03:07.169 --> 00:03:09.805
like your database or LDAP.

56
00:03:09.805 --> 00:03:12.129
And to do this, they use the UserDetailsService.

57
00:03:12.129 --> 00:03:15.588
There are many flavors of this class,

58
00:03:15.588 --> 00:03:18.642
like InMemory where the credentials are hard-coded in the

59
00:03:18.642 --> 00:03:22.728
application code or a properties file, JDBC for database,

60
00:03:22.728 --> 00:03:25.212
or a lot of the time,

61
00:03:25.212 --> 00:03:28.245
you'll implement a custom UserDetailsService to perform

62
00:03:28.245 --> 00:03:34.470
this task on your identity store, which we will be doing a lot of in the demos.

63
00:03:34.470 --> 00:03:38.123
Once the provider receives the UserDetails from the service,

64
00:03:38.123 --> 00:03:41.520
it will match the credentials against the request.

65
00:03:41.520 --> 00:03:42.326
And if successful,

66
00:03:42.326 --> 00:03:46.353
it will return a new authenticated token back to the manager

67
00:03:46.353 --> 00:03:49.178
with the authentication flag set to true.

68
00:03:49.178 --> 00:03:52.680
Credentials now and granted authorities populated.

69
00:03:52.680 --> 00:03:57.249
The interface for the AuthenticationProvider has an authenticate method,

70
00:03:57.249 --> 00:04:01.104
which accepts an authentication request and returns

71
00:04:01.104 --> 00:04:03.074
an authenticated principal token.

72
00:04:03.074 --> 00:04:05.647
It also has a support method,

73
00:04:05.647 --> 00:04:10.830
which the manager calls prior to calling the authenticate method to check if the

74
00:04:10.830 --> 00:04:14.926
provider supports the particular authentication token type.

75
00:04:14.926 --> 00:04:26.000
The UserDetails interface has just one method that either returns a UserDetails object or throws a UsernameNotFound exception.

