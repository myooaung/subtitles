WEBVTT
1
00:00:02.149 --> 00:00:03.586
Why Spring Boot?

2
00:00:03.586 --> 00:00:06.761
The Spring framework, including Spring Security,

3
00:00:06.761 --> 00:00:09.942
is very comprehensive with an active community

4
00:00:09.942 --> 00:00:12.867
constantly adding features and enhancements.

5
00:00:12.867 --> 00:00:17.596
Just check out the course Spring: The Big Picture by Dustin Schultz.

6
00:00:17.596 --> 00:00:21.103
It's over an hour long just to explain all the aspects of

7
00:00:21.103 --> 00:00:24.424
the Spring framework at a very high level.

8
00:00:24.424 --> 00:00:27.904
The framework is also very flexible, which has its benefits,

9
00:00:27.904 --> 00:00:31.842
but also it can make it a challenge to configure correctly,

10
00:00:31.842 --> 00:00:36.175
as well as dependency version management of all the Spring packages.

11
00:00:36.175 --> 00:00:37.366
Hence, Spring Boot,

12
00:00:37.366 --> 00:00:41.652
which addresses a lot of this complexity of configuration by

13
00:00:41.652 --> 00:00:44.995
taking an opinionated view of the Spring platform and doing

14
00:00:44.995 --> 00:00:47.524
a lot of the configuration, setup,

15
00:00:47.524 --> 00:00:55.927
heavy lifting for you so you can focus on the important parts.

16
00:00:55.927 --> 00:00:57.983
It's time for a demo.

17
00:00:57.983 --> 00:01:02.601
In this demo, we're going to configure Spring Security using Spring Boot.

18
00:01:02.601 --> 00:01:05.844
The demo application is a crypto currency portfolio site.

19
00:01:05.844 --> 00:01:10.345
It allows you to keep track of your positions for each coin.

20
00:01:10.345 --> 00:01:13.227
You can add, buy, and sell transactions,

21
00:01:13.227 --> 00:01:18.010
view and delete transactions, as well as raise support queries.

22
00:01:18.010 --> 00:01:21.239
There is also a section for administrators.

23
00:01:21.239 --> 00:01:23.980
Securing it with Spring Boot is simple.

24
00:01:23.980 --> 00:01:28.667
All you need to do is add the spring-boot- starter-security dependency.

25
00:01:28.667 --> 00:01:32.941
No version is required as this is handled by the parent poms,

26
00:01:32.941 --> 00:01:35.105
which makes like so much easier.

27
00:01:35.105 --> 00:01:36.949
With so many Spring dependencies,

28
00:01:36.949 --> 00:01:42.506
it used to be a nightmare just to maintain the correct compatible versions.

29
00:01:42.506 --> 00:01:43.877
If all this worked,

30
00:01:43.877 --> 00:01:47.341
then we should see the password printed in the logs the

31
00:01:47.341 --> 00:01:49.938
next time we start our application.

32
00:01:49.938 --> 00:01:53.268
If a UserDetailsService is not configured,

33
00:01:53.268 --> 00:01:58.228
then Spring provides a default one with an in-memory AuthenticationManager,

34
00:01:58.228 --> 00:02:02.510
which creates a default user with a randomly generated password.

35
00:02:02.510 --> 00:02:04.366
If you don't see it printed,

36
00:02:04.366 --> 00:02:08.461
check your info log settings and ensure that it's not disabled.

37
00:02:08.461 --> 00:02:12.664
Let's copy this password as we will be using it to log in to the application.

38
00:02:12.664 --> 00:02:15.973
Now if we try to access the previous URL for the portfolio,

39
00:02:15.973 --> 00:02:19.998
we are now redirected to a default Spring login page,

40
00:02:19.998 --> 00:02:22.772
which does look a little bit bland, but it does the job.

41
00:02:22.772 --> 00:02:25.516
In future modules, we will add a nice, fancy page.

42
00:02:25.516 --> 00:02:30.714
The username is user, and we're going to paste in the password the logs.

43
00:02:30.714 --> 00:02:34.883
We now have access to the site.

44
00:02:34.883 --> 00:02:36.316
Let's try logging in again,

45
00:02:36.316 --> 00:02:41.093
but this time with some breakpoints to see what is happening under the covers.

46
00:02:41.093 --> 00:02:42.161
Before we do that,

47
00:02:42.161 --> 00:02:47.179
let's also inspect the communication between the browser and our application.

48
00:02:47.179 --> 00:02:50.989
If we right-click and select Inspect and then select Network,

49
00:02:50.989 --> 00:02:55.018
we can see all the network traffic.

50
00:02:55.018 --> 00:03:00.061
The authentication request sent from our browser is a post and has the

51
00:03:00.061 --> 00:03:03.639
password end username in the body of the message.

52
00:03:03.639 --> 00:03:06.417
The first breakpoint is on the DelegatingFilterProxy,

53
00:03:06.417 --> 00:03:08.402
which, as you might recall,

54
00:03:08.402 --> 00:03:11.844
is the Spring Security filter registered with the web

55
00:03:11.844 --> 00:03:15.069
container where all requests are forwarded to.

56
00:03:15.069 --> 00:03:18.518
You can see its delegate is the FilterChainProxy that has a

57
00:03:18.518 --> 00:03:21.875
bean named springSecurityFilterChain.

58
00:03:21.875 --> 00:03:25.560
And it also has a single filter chain configured.

59
00:03:25.560 --> 00:03:28.540
The filterChain has a requestMatcher of Any,

60
00:03:28.540 --> 00:03:32.426
meaning that it will handle all the requests.

61
00:03:32.426 --> 00:03:33.709
If you expand the filters,

62
00:03:33.709 --> 00:03:37.688
you can see some of the familiar ones we've talked about previously,

63
00:03:37.688 --> 00:03:40.746
like the SecurityContextPersistenceFilter,

64
00:03:40.746 --> 00:03:43.609
which manages the SecurityContext.

65
00:03:43.609 --> 00:03:44.505
The LogoutFilter.

66
00:03:44.505 --> 00:03:48.512
As the name suggests, it handles the logout requests.

67
00:03:48.512 --> 00:03:51.833
By default, Spring configures a logout entry point.

68
00:03:51.833 --> 00:03:55.138
So if, for example, you make a request to /logout,

69
00:03:55.138 --> 00:03:58.543
that will be handled by the LogoutFilter.

70
00:03:58.543 --> 00:04:00.876
There are two authentication filters,

71
00:04:00.876 --> 00:04:06.363
the UsernamePasswordAuthenticationFilter and the BasicAuthenticationFilter.

72
00:04:06.363 --> 00:04:08.542
Hence, you can use both strategies.

73
00:04:08.542 --> 00:04:13.718
Finally, we have the ExceptionTranslationFilter and the Interceptor.

74
00:04:13.718 --> 00:04:15.879
Let's look at one of the authentication filters,

75
00:04:15.879 --> 00:04:19.932
and, as expected, we have an authenticationManager.

76
00:04:19.932 --> 00:04:23.122
The manager has an authentication provider,

77
00:04:23.122 --> 00:04:27.891
which has an in-memory userDetailsService.

78
00:04:27.891 --> 00:04:31.253
If we allow this request to progress from the DelegatingFilterProxy,

79
00:04:31.253 --> 00:04:36.213
it actually hits the UsernamePasswordAuthenticationFilter

80
00:04:36.213 --> 00:04:39.684
where the username and password is extracted from the

81
00:04:39.684 --> 00:04:42.176
request and used to authenticate.

82
00:04:42.176 --> 00:04:47.080
Now you might be wondering why the BasicAuthenticationFilter wasn't used.

83
00:04:47.080 --> 00:04:49.338
Well if we look at the ExceptionTranslationFilter

84
00:04:49.338 --> 00:04:52.230
at the authenticationEntryPoint,

85
00:04:52.230 --> 00:04:58.515
it is defaulted to the LoginUrlAuthenticationEntryPoint.

86
00:04:58.515 --> 00:05:01.710
So when the first request tried to access the page,

87
00:05:01.710 --> 00:05:07.031
the interceptor threw an AccessDeniedException that was caught by the exceptions

88
00:05:07.031 --> 00:05:12.777
filter that used the LoginUrlAuthenticationEntryPoint to generate a default

89
00:05:12.777 --> 00:05:16.578
login page and redirect the client browser to that.

90
00:05:16.578 --> 00:05:18.718
Since the credentials are passed in the request body,

91
00:05:18.718 --> 00:05:22.647
that is handled by the authentication filter as basic

92
00:05:22.647 --> 00:05:26.187
expects the credentials to be in the header.

93
00:05:26.187 --> 00:05:28.759
In the next section, we'll actually go over basic in more detail,

94
00:05:28.759 --> 00:05:30.606
so that will make more sense.

95
00:05:30.606 --> 00:05:34.112
So how did Spring Boot configure all this?

96
00:05:34.112 --> 00:05:37.355
We mentioned before that it's very opinionated.

97
00:05:37.355 --> 00:05:39.835
How did it make its decisions?

98
00:05:39.835 --> 00:05:41.126
Let's find out.

99
00:05:41.126 --> 00:05:44.977
To make decisions, Spring Boot uses these auto configuration classes,

100
00:05:44.977 --> 00:05:50.249
which are configured in the Spring Boot autoconfigure dependency.

101
00:05:50.249 --> 00:05:53.224
The classes are defined in the spring.factories file located

102
00:05:53.224 --> 00:05:58.528
in the META- INF folder of that dependency.

103
00:05:58.528 --> 00:06:01.629
Spring Boot will load these on startup.

104
00:06:01.629 --> 00:06:04.133
They make all the decisions as to how and what to

105
00:06:04.133 --> 00:06:07.947
configure based on a number of factors, like class path,

106
00:06:07.947 --> 00:06:11.628
configured beans, environment, and settings.

107
00:06:11.628 --> 00:06:15.721
There are a number of key Spring Security autoconfiguration classes,

108
00:06:15.721 --> 00:06:17.338
which are highlighted here.

109
00:06:17.338 --> 00:06:21.441
The first one is the SecurityAutoConfiguration class.

110
00:06:21.441 --> 00:06:25.311
Now the way these auto configuration classes decide on what to configure

111
00:06:25.311 --> 00:06:30.224
and what not to is through these conditional annotations.

112
00:06:30.224 --> 00:06:32.099
ConditionalonClass, for example,

113
00:06:32.099 --> 00:06:35.037
checks the class path for the presence of a particular class,

114
00:06:35.037 --> 00:06:40.152
in this case the DefaultAuthenticationEventPublisher class.

115
00:06:40.152 --> 00:06:44.655
If it is present, then the autoconfiguration is activated.

116
00:06:44.655 --> 00:06:48.863
Recall that as soon as we added the Spring Security startup dependency,

117
00:06:48.863 --> 00:06:51.328
Security just magically appeared.

118
00:06:51.328 --> 00:06:53.299
Well this is how that happened.

119
00:06:53.299 --> 00:06:57.433
The autoconfiguration class detected the presence of the security

120
00:06:57.433 --> 00:07:01.897
class and decided that you wanted security enabled.

121
00:07:01.897 --> 00:07:05.963
Now this auto configuration class registers the

122
00:07:05.963 --> 00:07:08.102
default AuthenticationEventPublisher,

123
00:07:08.102 --> 00:07:10.648
and it uses a ConditionalOnMissingBean annotation,

124
00:07:10.648 --> 00:07:13.713
which means that if you haven't configured your own

125
00:07:13.713 --> 00:07:17.604
AuthenticationEventPublisher, that Spring creates a default one.

126
00:07:17.604 --> 00:07:21.193
But if you do configure one, then Spring will back off.

127
00:07:21.193 --> 00:07:24.885
The class also imports three other configuration classes,

128
00:07:24.885 --> 00:07:27.757
the SpringBootWebSecurityConfiguration,

129
00:07:27.757 --> 00:07:31.399
which configures the DefaultConfigurationAdapter.

130
00:07:31.399 --> 00:07:33.354
Now the adapter is a key component.

131
00:07:33.354 --> 00:07:37.604
You will extend this class if you want to customize the security settings.

132
00:07:37.604 --> 00:07:39.220
If we drill into it,

133
00:07:39.220 --> 00:07:44.024
the default settings are that any request needs authentication,

134
00:07:44.024 --> 00:07:47.994
and the method of authentication is form or Basic.

135
00:07:47.994 --> 00:07:51.687
This is why the FilterChain mapper previously was any,

136
00:07:51.687 --> 00:07:55.783
and both the Username and PasswordAuthenticationFilter and

137
00:07:55.783 --> 00:07:59.439
BasicAuthenticationFilter was set up.

138
00:07:59.439 --> 00:08:03.647
The other autoconfiguration class imported by the Spring

139
00:08:03.647 --> 00:08:08.384
autoconfiguration was the WebSecurityEnablerConfiguration.

140
00:08:08.384 --> 00:08:11.601
The key feature here is the annotation, EnableWebSecurity.

141
00:08:11.601 --> 00:08:14.622
If we did not use Spring Boot,

142
00:08:14.622 --> 00:08:19.163
we would've had to manually create a configuration class with this annotation,

143
00:08:19.163 --> 00:08:24.016
hence another example where Spring Boot takes care of the configuration for us.

144
00:08:24.016 --> 00:08:29.164
The key task this annotation performs is to create the

145
00:08:29.164 --> 00:08:31.803
FilterChainProxy using the settings provided in the

146
00:08:31.803 --> 00:08:36.191
configuration adapter we just looked at previously.

147
00:08:36.191 --> 00:08:40.344
It registers the FilterChainProxy as a bean with a name

148
00:08:40.344 --> 00:08:42.433
of a Spring Security Filter Chain.

149
00:08:42.433 --> 00:08:46.852
Now this is key as the DelegatingFilterChainProxy will expect a

150
00:08:46.852 --> 00:08:50.646
bean of that name to be configured in the context.

151
00:08:50.646 --> 00:08:52.059
In effect,

152
00:08:52.059 --> 00:08:57.457
the security autoconfiguration has now initialized the FilterChainProxy.

153
00:08:57.457 --> 00:08:59.642
All that's left is to configure the DelegatingFilterProxy

154
00:08:59.642 --> 00:09:03.887
and plug that into the servlet container.

155
00:09:03.887 --> 00:09:09.366
Now this done through the autoconfig class, SecurityFilterAutoConfiguration.

156
00:09:09.366 --> 00:09:12.034
Again, after it performs all the conditional checks,

157
00:09:12.034 --> 00:09:18.815
it sets up the DelegatingFilterProxy with the FilterChainProxy as the delegate.

158
00:09:18.815 --> 00:09:22.250
The other autoconfiguration class worth mentioning is the

159
00:09:22.250 --> 00:09:25.642
UserDetailsServiceAutoConfiguration.

160
00:09:25.642 --> 00:09:29.029
It sets up the default InMemory AuthenticationManager and

161
00:09:29.029 --> 00:09:33.371
generates and prints the password we use to login.

162
00:09:33.371 --> 00:09:34.928
Now if by any chance,

163
00:09:34.928 --> 00:09:38.843
you wanted to disable all these autoconfiguration and do it all yourself,

164
00:09:38.843 --> 00:09:43.555
you can simply exclude all these autoconfiguration classes in your

165
00:09:43.555 --> 00:09:47.881
Spring Boot application annotation as shown here.

166
00:09:47.881 --> 00:09:52.213
If you're interested in learning more about Spring Boot's autoconfiguration,

167
00:09:52.213 --> 00:09:56.058
then I would recommend the course, Spring Boot: Efficient Development,

168
00:09:56.058 --> 00:10:02.000
Configuration, and Deployment by Dustin Schultz, which covers this in detail.

