WEBVTT
1
00:00:01.968 --> 00:00:05.049
Okay, it's time to test our web app.

2
00:00:05.049 --> 00:00:09.529
Let's quickly pop into the basement, and don't forget to grab your hacker hoodie.

3
00:00:09.529 --> 00:00:12.322
The website has now HTTPS enabled.

4
00:00:12.322 --> 00:00:14.978
The hacker can no longer sniff the network traffic or

5
00:00:14.978 --> 00:00:17.735
perform many of the previous attacks.

6
00:00:17.735 --> 00:00:20.131
There is still one vulnerability here.

7
00:00:20.131 --> 00:00:24.061
If we look at the communication between the browser and the server,

8
00:00:24.061 --> 00:00:28.818
the initial redirect request and response is via HTTP.

9
00:00:28.818 --> 00:00:32.745
Hence, it's susceptible to a man-in-the-middle attack.

10
00:00:32.745 --> 00:00:36.535
The hacker could intercept the response from the server and inject

11
00:00:36.535 --> 00:00:40.935
malicious content like scripts or simply change the redirect to their

12
00:00:40.935 --> 00:00:43.136
malicious site by changing the header,

13
00:00:43.136 --> 00:00:46.484
and it's a lot easier than you might think.

14
00:00:46.484 --> 00:00:51.942
Here is the GUI for the WiFi Pineapple, which costs around $100 off Ebay,

15
00:00:51.942 --> 00:00:57.300
and it can open up a fake Wi-Fi endpoint with any SSID you want.

16
00:00:57.300 --> 00:01:00.368
Here I have set one up for CRYPTO_CONF.

17
00:01:00.368 --> 00:01:03.216
Now if the user connects to this SSID,

18
00:01:03.216 --> 00:01:05.902
they are exposed to a man-in-the-middle attack.

19
00:01:05.902 --> 00:01:09.687
And these days, users expect there to be free Wi-Fi everywhere,

20
00:01:09.687 --> 00:01:13.043
in restaurants, cafes, conferences, you name it.

21
00:01:13.043 --> 00:01:15.783
Even planes and trains are starting to implement them.

22
00:01:15.783 --> 00:01:20.302
And the user doesn't even have to specifically connect to this network.

23
00:01:20.302 --> 00:01:23.030
When they connect to an SSID at home or anywhere,

24
00:01:23.030 --> 00:01:25.402
their device remembers that point,

25
00:01:25.402 --> 00:01:30.842
and it will automatically reconnect to that network when it is in range.

26
00:01:30.842 --> 00:01:35.518
It does this through probe requests, continuously searching for these networks.

27
00:01:35.518 --> 00:01:37.854
The Pineapple can actually detect these probes and

28
00:01:37.854 --> 00:01:43.122
mascaraed as the exact same SSID, tricking your device into connecting to it.

29
00:01:43.122 --> 00:01:46.397
Now once a user is connected to this malicious Wi-Fi spot,

30
00:01:46.397 --> 00:01:49.822
they will be using the DNS server of the device,

31
00:01:49.822 --> 00:01:52.051
and the hacker can use DNS spoofing.

32
00:01:52.051 --> 00:01:59.249
Here we add the AWS domain and map it to a malicious server IP address.

33
00:01:59.249 --> 00:02:01.870
Now if the user decides to check their portfolio while

34
00:02:01.870 --> 00:02:03.700
connected to this malicious Wi-Fi,

35
00:02:03.700 --> 00:02:08.289
they receive a familiar bland default login page.

36
00:02:08.289 --> 00:02:11.546
But notice it's not HTTPS.

37
00:02:11.546 --> 00:02:14.324
Now the user probably wouldn't even notice this.

38
00:02:14.324 --> 00:02:20.457
If they log in, the hacker now has their credentials.

39
00:02:20.457 --> 00:02:23.732
Now you can image, if this site was popular among crypto investors,

40
00:02:23.732 --> 00:02:27.687
the hacker could gather quite a lot of passwords in a conference.

41
00:02:27.687 --> 00:02:29.254
Now fortunately, Spring, by default,

42
00:02:29.254 --> 00:02:33.051
helps protect against this by adding the HSTS HTTP

43
00:02:33.051 --> 00:02:40.000
strict transport security header. We will discuss this in the next section.

