1
00:00:02,240 --> 00:00:04,550
[Autogenerated] in the first demo will be walking fruit,

2
00:00:04,550 --> 00:00:06,000
a consumer driven contract.

3
00:00:06,000 --> 00:00:08,240
Testing workflow is normal,

4
00:00:08,240 --> 00:00:11,290
but this time are micro services will be message driven,

5
00:00:11,290 --> 00:00:17,840
Robin and hey http, driven, we'll start by writing of failing consumer side test,

6
00:00:17,840 --> 00:00:22,620
this time making use of the stop trigger next will define a

7
00:00:22,620 --> 00:00:25,580
message driven interaction in a contract on,

8
00:00:25,580 --> 00:00:30,640
then install that contract locally and then finally will make Harkin Sheamus.

9
00:00:30,640 --> 00:00:35,040
I test pass.

10
00:00:35,040 --> 00:00:38,330
Starting in our consumer will navigate to our existing

11
00:00:38,330 --> 00:00:41,500
test and then copy and paste it well,

12
00:00:41,500 --> 00:00:44,740
Adam messaging suffix to the end of the new test class.

13
00:00:44,740 --> 00:00:47,770
We're just taking a set up short court here so we can

14
00:00:47,770 --> 00:00:50,340
delete our existing test methods.

15
00:00:50,340 --> 00:00:52,690
We can then remove the weapon Fireman.

16
00:00:52,690 --> 00:00:55,230
This is because our new test will not require a Web

17
00:00:55,230 --> 00:00:57,840
server as nothing will happen over Haiti.

18
00:00:57,840 --> 00:01:02,640
TP we'll leave the auto configure stubborn annotation bay as

19
00:01:02,640 --> 00:01:05,340
we'll be using the same stuff Jarrah's Before on.

20
00:01:05,340 --> 00:01:09,140
We wanted to be downloaded and executed as normal.

21
00:01:09,140 --> 00:01:11,830
Okay, let's create our test calling.

22
00:01:11,830 --> 00:01:14,940
It should store results of a credit check.

23
00:01:14,940 --> 00:01:19,740
Then we'll wiring instance of the stuff trigger into are test class

24
00:01:19,740 --> 00:01:23,040
spring Cloud contract will or to configure this forest,

25
00:01:23,040 --> 00:01:26,260
so there's no settle for us here now.

26
00:01:26,260 --> 00:01:30,670
The interesting part we want to test our consumer behaves as

27
00:01:30,670 --> 00:01:34,940
expected when it receives a message as we're no longer working

28
00:01:34,940 --> 00:01:37,150
with the request reply architecture.

29
00:01:37,150 --> 00:01:41,740
It's an external service, which will make the decision to publish the message.

30
00:01:41,740 --> 00:01:44,300
So to simulate this external service,

31
00:01:44,300 --> 00:01:47,790
publishing a message would use a stop trigger.

32
00:01:47,790 --> 00:01:51,840
Let's call still trigger dot trigger an impasse in the label.

33
00:01:51,840 --> 00:01:55,300
We'll call the credit score this comm bt identify for

34
00:01:55,300 --> 00:01:58,040
the contract that we want to trigger.

35
00:01:58,040 --> 00:01:58,590
Next.

36
00:01:58,590 --> 00:02:00,940
We need to work on our assertion.

37
00:02:00,940 --> 00:02:04,340
What we'd like to do is save the credit score when it's received,

38
00:02:04,340 --> 00:02:08,040
So all we need to research is that this has happened,

39
00:02:08,040 --> 00:02:11,080
will create a repository to store our credit score.

40
00:02:11,080 --> 00:02:13,760
Let's make it a field or tow wire it and then

41
00:02:13,760 --> 00:02:16,890
generate it with alternate er following.

42
00:02:16,890 --> 00:02:21,570
This will put a you you i d in our test and then we'll call gets

43
00:02:21,570 --> 00:02:25,440
score on the repository on past in that you you i d.

44
00:02:25,440 --> 00:02:29,540
Again we can generate a method with Alz and enter.

45
00:02:29,540 --> 00:02:34,040
Finally, we can write an assertion to chat that the scores being saved.

46
00:02:34,040 --> 00:02:39,280
Remember the trigger for saving the score will be the consumption off a message.

47
00:02:39,280 --> 00:02:42,170
We'll also make our repository of spring bean.

48
00:02:42,170 --> 00:02:46,040
So it's part of our spring context when we run our test.

49
00:02:46,040 --> 00:02:48,300
Okay, now attest, compiles.

50
00:02:48,300 --> 00:02:51,740
Let's run it and see what happens.

51
00:02:51,740 --> 00:02:56,540
It fails as we expected, and we can immediately see the problem.

52
00:02:56,540 --> 00:02:59,320
We have yet to declare a contract with our label,

53
00:02:59,320 --> 00:03:02,610
so the stop trigger has nothing to execute.

54
00:03:02,610 --> 00:03:07,840
Switching to our provider, Let's define our first mashes driving contract.

55
00:03:07,840 --> 00:03:08,360
First,

56
00:03:08,360 --> 00:03:11,590
we'll navigate to two contracts directory and then we'll

57
00:03:11,590 --> 00:03:13,830
create a new file for our contract.

58
00:03:13,830 --> 00:03:14,360
Will call.

59
00:03:14,360 --> 00:03:18,390
It should grant a credit score of High to a Citizen with messaging, Doc.

60
00:03:18,390 --> 00:03:24,200
Groovy, once in the file will call Contract out, make as normal.

61
00:03:24,200 --> 00:03:28,500
Then I will declare label score off high well,

62
00:03:28,500 --> 00:03:31,240
then define an output message closure.

63
00:03:31,240 --> 00:03:32,860
This is slightly different to the hay.

64
00:03:32,860 --> 00:03:34,680
Http request closure,

65
00:03:34,680 --> 00:03:39,740
but still quite similar in it will declare a senti parameter.

66
00:03:39,740 --> 00:03:44,800
This is a channel Q or topic that the message in our contract will get sent to.

67
00:03:44,800 --> 00:03:46,860
Then comes a body closure.

68
00:03:46,860 --> 00:03:51,640
We can provide a score of high on we can provide a u I day.

69
00:03:51,640 --> 00:03:55,240
Finally, we can provide a closure for message headers.

70
00:03:55,240 --> 00:03:57,850
We'll give it a single one content type,

71
00:03:57,850 --> 00:04:00,630
so I can Sheamus will know how to marshal the message.

72
00:04:00,630 --> 00:04:04,640
Payload is Jason switching to the terminal?

73
00:04:04,640 --> 00:04:08,940
We can now run a maven Clean install skip tests is normal.

74
00:04:08,940 --> 00:04:12,200
This will install are mentioning contract into the stub jar,

75
00:04:12,200 --> 00:04:14,020
just like with the hay http.

76
00:04:14,020 --> 00:04:18,350
Contracts Now let's switch back to our consumer and start

77
00:04:18,350 --> 00:04:20,300
implement in the rest of our function.

78
00:04:20,300 --> 00:04:21,540
Alice e.

79
00:04:21,540 --> 00:04:24,360
First of all, we need to add some dependencies,

80
00:04:24,360 --> 00:04:27,470
so we'll open our palm file and get started.

81
00:04:27,470 --> 00:04:28,790
As already discussed,

82
00:04:28,790 --> 00:04:32,540
Spring cloud contract plucks into many messaging frameworks.

83
00:04:32,540 --> 00:04:36,220
But for this demo, will you spring cloud stream, rub it.

84
00:04:36,220 --> 00:04:39,970
This is an arbitrary choice on you should be aware that nearly all

85
00:04:39,970 --> 00:04:43,490
of the spring cloud contract specific code we will use here is

86
00:04:43,490 --> 00:04:46,440
common across all supported frameworks.

87
00:04:46,440 --> 00:04:50,570
Now let's at the starter maven dependency to reduce the amount of

88
00:04:50,570 --> 00:04:54,710
configuration that we need to get going on also lets out the test

89
00:04:54,710 --> 00:04:58,000
support dependency just to clarify.

90
00:04:58,000 --> 00:04:59,450
As we implement this,

91
00:04:59,450 --> 00:05:03,270
I'm not going to go into defining details of how spring cloud stream is

92
00:05:03,270 --> 00:05:08,040
working as a focus here is on string cloud contract.

93
00:05:08,040 --> 00:05:12,690
First, we'll annotate our application configuration without enable Binding,

94
00:05:12,690 --> 00:05:16,540
which configures abounding of our application to rabbit,

95
00:05:16,540 --> 00:05:19,210
will then create a listener class which will consume

96
00:05:19,210 --> 00:05:20,750
messages from our credit scores.

97
00:05:20,750 --> 00:05:25,510
Que will make it a spring component and then create a receive score.

98
00:05:25,510 --> 00:05:29,740
Mefford passing in the credit chat response.

99
00:05:29,740 --> 00:05:32,600
Well, then annotate it with upstream listener,

100
00:05:32,600 --> 00:05:36,540
meaning this method will be called when a message is received.

101
00:05:36,540 --> 00:05:40,180
Then we'll take the repository class on where it into the list.

102
00:05:40,180 --> 00:05:45,110
No, we want the listener to save a credit score once it is received.

103
00:05:45,110 --> 00:05:46,530
Let's give it to arguments.

104
00:05:46,530 --> 00:05:52,040
The your i D in the score using Alton enter to generate the method.

105
00:05:52,040 --> 00:05:53,670
Now we can actually implement.

106
00:05:53,670 --> 00:05:57,750
A repository will just store everything in memory in a hash map.

107
00:05:57,750 --> 00:05:58,620
Robin, Amusing.

108
00:05:58,620 --> 00:06:04,110
A real database will achieve this by creating a field which maps between do you,

109
00:06:04,110 --> 00:06:05,980
I DS and scores.

110
00:06:05,980 --> 00:06:10,550
Then we'll implement to get score method so we can return a score by you.

111
00:06:10,550 --> 00:06:15,530
You i d from this map and then we'll implement the save method

112
00:06:15,530 --> 00:06:18,740
where we put data directly into the map.

113
00:06:18,740 --> 00:06:19,900
There's one last step,

114
00:06:19,900 --> 00:06:23,590
which is to configure our application properties to bind to our credit

115
00:06:23,590 --> 00:06:28,040
scores channel using the input destination property.

116
00:06:28,040 --> 00:06:33,240
Okay, now we can run our tests and see if it passes.

117
00:06:33,240 --> 00:06:35,200
Woops Simple error here,

118
00:06:35,200 --> 00:06:38,570
which is that we've accidentally put the wrong label in our test.

119
00:06:38,570 --> 00:06:42,690
We should have put score of high as that's what went into our contract.

120
00:06:42,690 --> 00:06:49,440
Let's rename the label and then rerun our test.

121
00:06:49,440 --> 00:06:50,200
Great.

122
00:06:50,200 --> 00:06:51,920
This time our test passes,

123
00:06:51,920 --> 00:06:59,000
meaning we've implemented our first match is driven interaction using spring cloud contracts.

