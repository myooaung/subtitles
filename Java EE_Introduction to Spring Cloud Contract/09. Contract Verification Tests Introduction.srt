1
00:00:01,970 --> 00:00:03,040
[Autogenerated] As we've learned,

2
00:00:03,040 --> 00:00:06,660
consumer driven contract testing is about continuous

3
00:00:06,660 --> 00:00:10,610
testing on both sides of the interaction.

4
00:00:10,610 --> 00:00:16,140
This is where the contract verification tests will come into play.

5
00:00:16,140 --> 00:00:20,940
Contract verification tests do the opposite to our stops.

6
00:00:20,940 --> 00:00:21,390
Robert.

7
00:00:21,390 --> 00:00:23,300
In giving the agreed response.

8
00:00:23,300 --> 00:00:25,700
When the agreed request is made,

9
00:00:25,700 --> 00:00:31,410
they make the agreed request on assert agreed responses Made this way,

10
00:00:31,410 --> 00:00:35,260
we are able to know that the way we interact with the stop is the

11
00:00:35,260 --> 00:00:39,710
same as the interaction with the rial provider.

12
00:00:39,710 --> 00:00:42,840
Spring Cloud Contract makes creating these contract

13
00:00:42,840 --> 00:00:47,530
verification tests easy as it creates and Fouras.

14
00:00:47,530 --> 00:00:53,050
It does this by passing the contracts using Spring Cloud contract verifier on,

15
00:00:53,050 --> 00:00:56,700
then performing some cogeneration.

16
00:00:56,700 --> 00:01:01,100
The tests that produced can be generated in free modes.

17
00:01:01,100 --> 00:01:02,180
Mark NBC,

18
00:01:02,180 --> 00:01:06,470
which uses Spring mock NBC against the mock Web environment to

19
00:01:06,470 --> 00:01:09,850
make the request and assertions explicit.

20
00:01:09,850 --> 00:01:13,670
Which does say we're for real Web server on Jax RS,

21
00:01:13,670 --> 00:01:17,580
which creates a Jax RS claim to do it.

22
00:01:17,580 --> 00:01:22,670
It also presents a choice of Eva J Unit or spot Tests will be

23
00:01:22,670 --> 00:01:25,180
working with Jean Unit during this course,

24
00:01:25,180 --> 00:01:30,180
but if you're familiar of groovy and spot would be worth checking out to a spot.

25
00:01:30,180 --> 00:01:32,620
Tests are particularly expressive.

26
00:01:32,620 --> 00:01:38,530
Let's take a look at how all of this will fit together in a workflow.

27
00:01:38,530 --> 00:01:41,280
First, we run this spring cloud contract.

28
00:01:41,280 --> 00:01:46,870
Verify a plug in in order to create our contract verification tests.

29
00:01:46,870 --> 00:01:48,560
As already explained,

30
00:01:48,560 --> 00:01:54,740
this is done by pausing a contract year sell on performing cogeneration.

31
00:01:54,740 --> 00:01:57,420
Then we executed tests.

32
00:01:57,420 --> 00:01:59,190
This can be done directly from the I.

33
00:01:59,190 --> 00:01:59,440
D.

34
00:01:59,440 --> 00:01:59,830
A.

35
00:01:59,830 --> 00:02:00,870
Or via the bill.

36
00:02:00,870 --> 00:02:07,160
Tool, of course, has nothing to implemented yet the test will fail.

37
00:02:07,160 --> 00:02:11,640
It's a desk point that we need to investigate what's wrong.

38
00:02:11,640 --> 00:02:24,000
And finally we made the required changes in order to make our test pass. This will then mean our provider is fully compliant with our contracts.

