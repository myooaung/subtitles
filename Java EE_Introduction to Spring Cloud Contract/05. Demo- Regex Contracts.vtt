WEBVTT
1
00:00:02.300 --> 00:00:03.080
[Autogenerated] in this ____.

2
00:00:03.080 --> 00:00:06.680
Ooh, We're going to start by making a change in our provider,

3
00:00:06.680 --> 00:00:10.040
which will cause our consumer to start failing.

4
00:00:10.040 --> 00:00:14.740
This change will involve introducing dynamic data.

5
00:00:14.740 --> 00:00:14.940
Well,

6
00:00:14.940 --> 00:00:18.400
then make our contract support dynamic data by using

7
00:00:18.400 --> 00:00:23.170
rejects and in doing so will be able to make the consumer

8
00:00:23.170 --> 00:00:29.240
side test that we broke pass again.

9
00:00:29.240 --> 00:00:31.520
In this case, we're going to do things.

10
00:00:31.520 --> 00:00:33.240
Provide a first.

11
00:00:33.240 --> 00:00:36.240
This is because of requirement has come in to include a

12
00:00:36.240 --> 00:00:38.940
date in calculating the credit score,

13
00:00:38.940 --> 00:00:44.740
meaning we need to add it to our contract to ensure the consumer is sending it.

14
00:00:44.740 --> 00:00:47.120
Starting with far provided project,

15
00:00:47.120 --> 00:00:52.240
we will open our should grants a credit score of high to a citizen contract.

16
00:00:52.240 --> 00:00:55.120
We'll start by removing the triple equal string,

17
00:00:55.120 --> 00:00:58.680
changing our body to the groove you mount notation.

18
00:00:58.680 --> 00:01:02.840
This will allow us to invoke methods for each part of the body.

19
00:01:02.840 --> 00:01:03.270
For now,

20
00:01:03.270 --> 00:01:09.400
dough will just provide a static date field switching back to the terminal.

21
00:01:09.400 --> 00:01:13.290
We can run maven clean installs skip tests to generate new

22
00:01:13.290 --> 00:01:16.960
stops locally as a build was successful.

23
00:01:16.960 --> 00:01:19.640
There's nothing else to do here.

24
00:01:19.640 --> 00:01:24.430
Switch him back so I consume a project flattery runner should cram application.

25
00:01:24.430 --> 00:01:29.440
When credit scores high test and see what happens,

26
00:01:29.440 --> 00:01:31.550
we can see that there's a failure,

27
00:01:31.550 --> 00:01:35.430
which in this case is a good thing scrolling up.

28
00:01:35.430 --> 00:01:39.030
We can see that it's because of a Y mark error where it

29
00:01:39.030 --> 00:01:41.900
could not match are requested to stop.

30
00:01:41.900 --> 00:01:48.340
This is because it expects a date in the body and we are not sending one.

31
00:01:48.340 --> 00:01:50.730
We should know here that we've proved how useful

32
00:01:50.730 --> 00:01:53.240
consumers of in contract testing is,

33
00:01:53.240 --> 00:01:57.000
as by making a breaking changed Our provider were causing our

34
00:01:57.000 --> 00:02:02.140
consumers bill to fell with FAO any end to end testing.

35
00:02:02.140 --> 00:02:07.680
Now let's modify our code to make it date be sent with every request.

36
00:02:07.680 --> 00:02:10.680
We could heart code today in our contract here,

37
00:02:10.680 --> 00:02:13.750
but that wouldn't really make any sense as really,

38
00:02:13.750 --> 00:02:16.690
what we want is to send today's date.

39
00:02:16.690 --> 00:02:17.880
Let's do this one.

40
00:02:17.880 --> 00:02:21.240
Run our tests again.

41
00:02:21.240 --> 00:02:25.580
As expected, we still have a test value and scrolling note.

42
00:02:25.580 --> 00:02:28.740
We can see it's because the dates don't match.

43
00:02:28.740 --> 00:02:32.250
Even if we did get him too much on a subsequent build,

44
00:02:32.250 --> 00:02:35.640
the date would change and the test would start failing.

45
00:02:35.640 --> 00:02:41.300
This is why we need rejects in our contract, allowing for any dates.

46
00:02:41.300 --> 00:02:44.140
Let's switch back to our provider project.

47
00:02:44.140 --> 00:02:47.770
This time we can replace the value of the day within any date.

48
00:02:47.770 --> 00:02:51.340
Methods behind the scenes is using rejects,

49
00:02:51.340 --> 00:02:52.050
but again,

50
00:02:52.050 --> 00:02:55.180
we can just use the method directly without worrying

51
00:02:55.180 --> 00:02:58.710
about the implementation details.

52
00:02:58.710 --> 00:03:00.780
Switching again back to the terminal.

53
00:03:00.780 --> 00:03:03.870
We can run maven, clean installs, get tests,

54
00:03:03.870 --> 00:03:08.140
regenerating our contract on success.

55
00:03:08.140 --> 00:03:13.820
We can switch back to our consumer Andhra now failing test again.

56
00:03:13.820 --> 00:03:16.920
This time it passes scrolling up.

57
00:03:16.920 --> 00:03:20.190
We can see that the reason it past is because wire mark no

58
00:03:20.190 --> 00:03:22.790
longer cares about the value of the date.

59
00:03:22.790 --> 00:03:27.190
Only cares about a matching date patter.

60
00:03:27.190 --> 00:03:32.240
Now we aren't quite done as we have more than one contract that uses RM point.

61
00:03:32.240 --> 00:03:33.590
Let's switch to our provider.

62
00:03:33.590 --> 00:03:39.390
Projects on Open should grant a credit score of Low to Citizen a modified out.

63
00:03:39.390 --> 00:03:44.380
So it's also expects a day switching back to the terminal.

64
00:03:44.380 --> 00:03:50.250
We can build our Stubbs again and then back in our can you shima project.

65
00:03:50.250 --> 00:03:55.300
We can run our credit card application denial test scrolling up.

66
00:03:55.300 --> 00:04:00.340
We can see that our request was much despite sending around the day,

67
00:04:00.340 --> 00:04:05.540
we can now run a full maven install and wait for the results.

68
00:04:05.540 --> 00:04:10.000
Great. Our tests are now successful

