1
00:00:01,580 --> 00:00:02,850
[Autogenerated] in Ness demo.

2
00:00:02,850 --> 00:00:06,920
We're going to make use of the consumer and producer methods to allow

3
00:00:06,920 --> 00:00:11,340
our contract to support more complicated use cases.

4
00:00:11,340 --> 00:00:12,580
Specifically,

5
00:00:12,580 --> 00:00:15,720
we're going to use these methods so our contract supports

6
00:00:15,720 --> 00:00:20,040
different data on both sides of the interaction.

7
00:00:20,040 --> 00:00:24,230
This will help his make a failing test pass where we'd over ways being a

8
00:00:24,230 --> 00:00:28,230
chicken and egg situation where one side of the interaction needs the

9
00:00:28,230 --> 00:00:35,400
support rejects on your beside needs to support static data starting with

10
00:00:35,400 --> 00:00:38,490
far consumer last chains are assertion.

11
00:00:38,490 --> 00:00:41,340
So we expect to your I d.

12
00:00:41,340 --> 00:00:46,700
Well, a shame that this year your I d should be generated by the provider.

13
00:00:46,700 --> 00:00:50,240
Let's run the tests on Look a failure.

14
00:00:50,240 --> 00:00:54,540
As we can see, the issue is that we're missing a year, I day.

15
00:00:54,540 --> 00:00:58,740
So we need to change our contract so it returns well,

16
00:00:58,740 --> 00:01:00,720
switching back to the provider.

17
00:01:00,720 --> 00:01:06,540
Let's put the same New York idea that's in our test assertion into the contract.

18
00:01:06,540 --> 00:01:11,080
Then switch into the terminal lights installed latest contracts

19
00:01:11,080 --> 00:01:16,140
locally by running maven clean installs get tests.

20
00:01:16,140 --> 00:01:18,640
A nan Back in Arkin Shima,

21
00:01:18,640 --> 00:01:21,790
we can update our credit chat response so it returns

22
00:01:21,790 --> 00:01:25,680
a U U I day working backwards.

23
00:01:25,680 --> 00:01:27,880
We don't need to modify the gateway.

24
00:01:27,880 --> 00:01:31,520
So when we return the credit shot response, it contains issue you.

25
00:01:31,520 --> 00:01:33,140
I day.

26
00:01:33,140 --> 00:01:35,510
We don't need to pass a you your i d instead,

27
00:01:35,510 --> 00:01:40,070
a credit card response and then generate a year I d Field

28
00:01:40,070 --> 00:01:43,240
in our credit card response object.

29
00:01:43,240 --> 00:01:45,680
And then let's run our tests again.

30
00:01:45,680 --> 00:01:49,740
Getting a green billed as we expected.

31
00:01:49,740 --> 00:01:51,520
Now back in our provider,

32
00:01:51,520 --> 00:01:54,770
we can run a full install to regenerate our contract

33
00:01:54,770 --> 00:02:00,400
verification tests as expected, both of them and now failing.

34
00:02:00,400 --> 00:02:04,310
Let's navigate through them and confirm it's because of the year your i d.

35
00:02:04,310 --> 00:02:07,540
Assertion that we just introduced.

36
00:02:07,540 --> 00:02:13,930
Yes, that looks like it's the case as we can see the assertion taking place here.

37
00:02:13,930 --> 00:02:16,890
Let's navigate through our credit checked response class

38
00:02:16,890 --> 00:02:19,460
and get it to generate a new your i d.

39
00:02:19,460 --> 00:02:22,090
Each time it's it's done, she hated.

40
00:02:22,090 --> 00:02:24,830
We want the your i d to change these time,

41
00:02:24,830 --> 00:02:28,840
as this is what the rial production system would do.

42
00:02:28,840 --> 00:02:33,410
Okay, let's run our tests again and see what happens.

43
00:02:33,410 --> 00:02:34,540
As she'd expects,

44
00:02:34,540 --> 00:02:37,880
we have a failure on its because the you I did every

45
00:02:37,880 --> 00:02:41,610
return is randomly generated on does not match the one

46
00:02:41,610 --> 00:02:44,600
that we declared in our contract.

47
00:02:44,600 --> 00:02:47,740
So this is a point in which we have a problem,

48
00:02:47,740 --> 00:02:49,970
because in our consumer side, stop.

49
00:02:49,970 --> 00:02:53,540
We want a specific your I d to be returned.

50
00:02:53,540 --> 00:02:55,550
But in our provider side test,

51
00:02:55,550 --> 00:03:02,340
we want to be out to assert any your I d and not care about the specific value.

52
00:03:02,340 --> 00:03:05,430
So let's modify our contract to use a producer and

53
00:03:05,430 --> 00:03:09,040
consumer methods to allow us to do this.

54
00:03:09,040 --> 00:03:13,370
Under consumer, we can keep the same hard coded geo I d.

55
00:03:13,370 --> 00:03:16,130
So I stopped still returns the same value on our

56
00:03:16,130 --> 00:03:19,140
consume aside test still passes.

57
00:03:19,140 --> 00:03:24,840
However, in the producer method, we can use the any you i d method.

58
00:03:24,840 --> 00:03:28,790
They should fix our provider side test decision by making the

59
00:03:28,790 --> 00:03:32,490
only assert that AU ideas present and not care about the

60
00:03:32,490 --> 00:03:36,350
specific value we should also switched,

61
00:03:36,350 --> 00:03:39,930
are over contract on repeat the same process as they're

62
00:03:39,930 --> 00:03:43,640
both for exactly the same M point.

63
00:03:43,640 --> 00:03:48,540
Okay, let's run out tests and see if they pass, they dio.

64
00:03:48,540 --> 00:03:51,860
And if we navigate to our contract verification tests,

65
00:03:51,860 --> 00:03:55,980
we can see this is because the assertion is now based on a your i d

66
00:03:55,980 --> 00:04:00,860
regular expression rather than attacks comparison again.

67
00:04:00,860 --> 00:04:03,880
This regular expression is the one that we put in the

68
00:04:03,880 --> 00:04:07,140
producer method of our contract.

69
00:04:07,140 --> 00:04:10,410
We should also switch back to our consumer project

70
00:04:10,410 --> 00:04:12,200
and make sure our tests still pass.

71
00:04:12,200 --> 00:04:16,460
Since making I'll change as expected, they dio on.

72
00:04:16,460 --> 00:04:20,840
We can see this is because the your I d returned by our stop is a one

73
00:04:20,840 --> 00:04:25,140
defined in the consumer method in the contract.

74
00:04:25,140 --> 00:04:25,910
Finally,

75
00:04:25,910 --> 00:04:29,800
back in the provider lecture p a similar process for

76
00:04:29,800 --> 00:04:32,440
the requests part of the contract.

77
00:04:32,440 --> 00:04:37,540
We dont technically need to do this in our use case as a test pass already,

78
00:04:37,540 --> 00:04:38,960
but to prove that it works,

79
00:04:38,960 --> 00:04:44,880
let's do it will pass any day instead of consumer method so I can shame aside,

80
00:04:44,880 --> 00:04:47,740
tests continue to function the same,

81
00:04:47,740 --> 00:04:52,600
but let's provide a specific date value to the producer methods.

82
00:04:52,600 --> 00:04:59,740
17 7 2007 We can then Rohan install and then we can get a green build.

83
00:04:59,740 --> 00:05:01,390
Only now if we navigate.

84
00:05:01,390 --> 00:05:03,840
So our contract verification test,

85
00:05:03,840 --> 00:05:09,680
we can see that the request that it makes is our specific day and that's it.

86
00:05:09,680 --> 00:05:11,820
Really, As you can see,

87
00:05:11,820 --> 00:05:16,270
it's useful to be able to control both sides of the interaction like this on.

88
00:05:16,270 --> 00:05:23,000
It's straightforward enough to do by leveraging the consumer some producer methods.

