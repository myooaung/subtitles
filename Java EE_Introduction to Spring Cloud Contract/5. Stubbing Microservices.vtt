WEBVTT
1
00:00:02.090 --> 00:00:05.520
[Autogenerated] after highlighting the short communes of enter and testing.

2
00:00:05.520 --> 00:00:09.530
Let's look at another approach where we use marks or stops to replace

3
00:00:09.530 --> 00:00:13.040
the dependencies of our micro services on the test.

4
00:00:13.040 --> 00:00:16.130
With this approach, we have some automated tests,

5
00:00:16.130 --> 00:00:20.800
which this time live in the same project as a Michael service they belong to.

6
00:00:20.800 --> 00:00:24.870
They'll spin up in individual instance off the micro service on tests,

7
00:00:24.870 --> 00:00:29.440
um, interaction with it by its A p I or free publishing messages.

8
00:00:29.440 --> 00:00:32.340
When the micro service calls another micro service,

9
00:00:32.340 --> 00:00:35.140
we can replace it with a Stobaugh remark.

10
00:00:35.140 --> 00:00:39.390
This is essentially a fake double, which mimics Israel counterpart.

11
00:00:39.390 --> 00:00:42.370
The two terms can sometimes be a little overloaded,

12
00:00:42.370 --> 00:00:46.230
so to elaborate on markets where instances of objects were replaced by

13
00:00:46.230 --> 00:00:49.640
a _____ by using a mocking framework like mosquito.

14
00:00:49.640 --> 00:00:52.280
Where is the stop is an external process which is

15
00:00:52.280 --> 00:00:55.590
communicated with as if it's a real micro service.

16
00:00:55.590 --> 00:00:58.950
This approach obviously has some advantages over and to end.

17
00:00:58.950 --> 00:01:02.550
Testing has now we're no longer dependent on an environment

18
00:01:02.550 --> 00:01:05.540
and contest are micro service in isolation,

19
00:01:05.540 --> 00:01:07.880
But the reality is that is many short communist

20
00:01:07.880 --> 00:01:10.550
today s approach to First of all,

21
00:01:10.550 --> 00:01:13.790
it's a manual process to create our stops and marks.

22
00:01:13.790 --> 00:01:17.940
This can be slow and tedious and also painful to get right.

23
00:01:17.940 --> 00:01:20.060
There are also difficult to maintain.

24
00:01:20.060 --> 00:01:22.320
When a producer changes, it's a P I.

25
00:01:22.320 --> 00:01:24.430
All of its marks must be updated.

26
00:01:24.430 --> 00:01:25.690
Also,

27
00:01:25.690 --> 00:01:28.410
these marks might live in multiple services needing

28
00:01:28.410 --> 00:01:30.600
to be changed in many places.

29
00:01:30.600 --> 00:01:33.990
This process is also quite error prone as it's a human,

30
00:01:33.990 --> 00:01:37.330
either has to make sure no mistakes of the maze.

31
00:01:37.330 --> 00:01:39.790
False positives are also a problem.

32
00:01:39.790 --> 00:01:40.370
As again,

33
00:01:40.370 --> 00:01:43.760
there's no automated means of determining whether a mark or a

34
00:01:43.760 --> 00:01:46.740
storm is a reflection of its real counterpart.

35
00:01:46.740 --> 00:01:48.900
Test can be written against the store, been them.

36
00:01:48.900 --> 00:01:51.760
Pass only for the rial service to be deployed to

37
00:01:51.760 --> 00:01:59.000
production on for a discovery to be made, that the stop was wrong and for that service to fail.

