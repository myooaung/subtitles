1
00:00:02,040 --> 00:00:04,830
[Autogenerated] The final thing we're going to look at in this module

2
00:00:04,830 --> 00:00:07,840
is how to deal with some of the problems produced by putting

3
00:00:07,840 --> 00:00:11,440
contracts and provided project repositories.

4
00:00:11,440 --> 00:00:12,840
For example,

5
00:00:12,840 --> 00:00:16,790
if we have one team member working on a consumer and enough

6
00:00:16,790 --> 00:00:19,840
a team member working on the provider,

7
00:00:19,840 --> 00:00:22,870
then the first team member may not have permission to

8
00:00:22,870 --> 00:00:26,200
commit contractor to providers repository,

9
00:00:26,200 --> 00:00:27,660
in fact, they may know,

10
00:00:27,660 --> 00:00:31,880
even have permission to see the source code it all ignoring

11
00:00:31,880 --> 00:00:34,310
what may be an organizational mistake.

12
00:00:34,310 --> 00:00:37,760
We can accept that this is simply the case in a lot of places,

13
00:00:37,760 --> 00:00:40,280
particularly in larger enterprises.

14
00:00:40,280 --> 00:00:44,260
Andi, even if the users could access each of those repositories,

15
00:00:44,260 --> 00:00:47,170
having the contract scattered around everywhere could

16
00:00:47,170 --> 00:00:49,700
end up becoming a maintainable.

17
00:00:49,700 --> 00:00:52,370
So as this is a legitimate problem,

18
00:00:52,370 --> 00:00:59,540
we need to think of a solution The way around this,

19
00:00:59,540 --> 00:01:01,940
at least from an architectural point of view,

20
00:01:01,940 --> 00:01:04,640
is relatively straightforward.

21
00:01:04,640 --> 00:01:08,880
We contain the members of our team and give them all access to a shared

22
00:01:08,880 --> 00:01:13,240
contract repository as opposed to each other's projects.

23
00:01:13,240 --> 00:01:15,580
Then, when we generate our stops,

24
00:01:15,580 --> 00:01:20,970
we can do so by running the stub generator in the central repository and

25
00:01:20,970 --> 00:01:24,570
when we generate our provider verification tests again,

26
00:01:24,570 --> 00:01:30,000
we can generate them based on contracts contained in the central repository.

27
00:01:30,000 --> 00:01:34,330
This is known as a centralized contract repository pattern and is a

28
00:01:34,330 --> 00:01:38,740
simple way of getting around any access control issues.

29
00:01:38,740 --> 00:01:43,170
On top of this, when we centralize all these contracts in one place,

30
00:01:43,170 --> 00:01:47,410
the interactions overall becoming easier to reason about because every

31
00:01:47,410 --> 00:01:55,690
famous together So what would this centralize contract repository look

32
00:01:55,690 --> 00:02:00,590
like while was start for base maven project containing the group and

33
00:02:00,590 --> 00:02:03,940
artifact I DS of our applications.

34
00:02:03,940 --> 00:02:08,540
Then for each provider, we create a subdirectory.

35
00:02:08,540 --> 00:02:12,140
Then for each interaction and provider has with a consumer,

36
00:02:12,140 --> 00:02:17,240
we also create a subdirectory putting contracts within it.

37
00:02:17,240 --> 00:02:18,140
There can, of course,

38
00:02:18,140 --> 00:02:22,330
be more than one consumer interacts with the provider so we can add more

39
00:02:22,330 --> 00:02:26,170
directories for each of those consumers on that can,

40
00:02:26,170 --> 00:02:30,580
of course, be more providers, so we can add to relevant directories for them,

41
00:02:30,580 --> 00:02:32,440
too.

42
00:02:32,440 --> 00:02:36,340
We also adds a maven assembly plugging configuration.

43
00:02:36,340 --> 00:02:37,270
In this case,

44
00:02:37,270 --> 00:02:42,060
the assembly plug in will aggregate all the contracts into a jar foul in order

45
00:02:42,060 --> 00:02:47,040
to be used for the provider side contract verification tests,

46
00:02:47,040 --> 00:02:50,250
so to build, install the stops for a service.

47
00:02:50,250 --> 00:02:53,110
We can create a palm foul in its directory,

48
00:02:53,110 --> 00:02:56,740
navigate to it and runny install task.

49
00:02:56,740 --> 00:03:00,720
We can repeat this for the other service and finally,

50
00:03:00,720 --> 00:03:01,890
to be clear,

51
00:03:01,890 --> 00:03:12,000
the palm in the root directory is used to package are contracts into a jar file for use by the provider side for verification tests.

