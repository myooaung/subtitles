1
00:00:02,310 --> 00:00:03,200
[Autogenerated] So far,

2
00:00:03,200 --> 00:00:08,540
we've introduced in detail the consumer driven contracts testing technique.

3
00:00:08,540 --> 00:00:11,830
That's because without this foundational understanding,

4
00:00:11,830 --> 00:00:16,050
learning a framework in it would be pretty challenging.

5
00:00:16,050 --> 00:00:20,540
So now this is done is tying to introduce Spring Cloud contract,

6
00:00:20,540 --> 00:00:24,040
which basically provides a scaffolding for us to bear with the Dukan.

7
00:00:24,040 --> 00:00:30,860
She maturing contracts testing in JV M based applications in order

8
00:00:30,860 --> 00:00:34,560
for us to be able to produce contracts sprinklered contract

9
00:00:34,560 --> 00:00:38,480
providers with contract definition language.

10
00:00:38,480 --> 00:00:42,560
This is basically a grieving TSL where we can define all of our

11
00:00:42,560 --> 00:00:47,140
interactions between our consumers and our producers.

12
00:00:47,140 --> 00:00:49,370
Don't worry if you don't know grieve Edo,

13
00:00:49,370 --> 00:00:54,940
as all this uses a very small subset that wouldn't require any prior knowledge.

14
00:00:54,940 --> 00:01:02,740
In fact, the contract DSL is designed to be expressive and easy to use.

15
00:01:02,740 --> 00:01:06,080
Spring Cloud contract also comes with a plug in that is

16
00:01:06,080 --> 00:01:09,730
used to generate stops from our contracts.

17
00:01:09,730 --> 00:01:14,040
These are stops that will be used in the consumer side test.

18
00:01:14,040 --> 00:01:18,310
We can feed our contracts in and get our stops out is part of

19
00:01:18,310 --> 00:01:24,130
a fully automated maven or greater build.

20
00:01:24,130 --> 00:01:27,320
It also providers within easy means of actually

21
00:01:27,320 --> 00:01:30,090
downloading and actually que in the stops,

22
00:01:30,090 --> 00:01:31,350
Jury Narcan Sheamus.

23
00:01:31,350 --> 00:01:33,240
I test runs.

24
00:01:33,240 --> 00:01:36,610
This is through the use of something called the Stop Runner,

25
00:01:36,610 --> 00:01:42,600
which will cover shortly and finally, on the producer side.

26
00:01:42,600 --> 00:01:47,540
Shrink loud Contract generates contract verification tests for is,

27
00:01:47,540 --> 00:01:51,900
there's a variety of configuration options for fundamentally.

28
00:01:51,900 --> 00:01:55,340
The only way for Earth's is to make these tests pass.

29
00:01:55,340 --> 00:02:00,780
The generation off them is fully automated for us by the framework.

30
00:02:00,780 --> 00:02:04,970
As you can see, spring car contract essentially pieces together.

31
00:02:04,970 --> 00:02:14,000
All the parts of consumers of in contract testing on automates as much of the workflow forests is possible.

