WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.945
The CSS flexbox is a relatively new way of laying out and aligning items on a website.

00:00:06.945 --> 00:00:11.370
It aims to make the process much simpler than it has been in the past.

00:00:11.370 --> 00:00:15.570
In the past, we've used hacks and methods such as; tables,

00:00:15.570 --> 00:00:20.115
floats, or complicated CSS to achieve the layer which you want.

00:00:20.115 --> 00:00:24.105
The flexbox has sold this by providing us with some simple,

00:00:24.105 --> 00:00:27.600
yet effective ways to layout and position items.

00:00:27.600 --> 00:00:32.250
We begin by defining a flex container, like you can see here.

00:00:32.250 --> 00:00:37.615
This allows us to set how we want the flex items inside to appear.

00:00:37.615 --> 00:00:39.695
We can set the direction,

00:00:39.695 --> 00:00:44.455
the alignment, and how much space is in between, to name a few.

00:00:44.455 --> 00:00:49.445
Also, we have the control of the individual flex items too.

00:00:49.445 --> 00:00:53.710
For example, we can set the order in which you want them to appear,

00:00:53.710 --> 00:00:57.085
the alignment, and also set how they should grow,

00:00:57.085 --> 00:01:00.750
or shrink depending on the available space.

00:01:00.860 --> 00:01:04.025
What does this all mean for our blog?

00:01:04.025 --> 00:01:06.485
Well, basically, it will be used to layout

00:01:06.485 --> 00:01:10.835
our website to be best suited to different site vices.

00:01:10.835 --> 00:01:16.705
Changing layout for different screen sizes is known as responsive web design.

00:01:16.705 --> 00:01:23.235
We're going to make our blog respond different site devices for a better user experience.

00:01:23.235 --> 00:01:26.885
Over on the left, we have a small screen device,

00:01:26.885 --> 00:01:30.245
such as a mobile or small tablets.

00:01:30.245 --> 00:01:34.925
The content here is typically stacked on top of each-other vertically.

00:01:34.925 --> 00:01:37.610
However, as we can see on the right,

00:01:37.610 --> 00:01:40.325
as we have more available screen space,

00:01:40.325 --> 00:01:43.970
we can add more content side-by-side.

00:01:43.970 --> 00:01:47.960
To achieve this, we simply set our flex containers,

00:01:47.960 --> 00:01:50.555
such as the header at the top,

00:01:50.555 --> 00:01:54.905
and another container for the rest of our content we want to control.

00:01:54.905 --> 00:01:57.210
Here, I'm using a div.

00:01:57.290 --> 00:02:03.350
To achieve this, we can set a CSS property of direction.

00:02:03.350 --> 00:02:09.545
Amongst those, flex direction allows us to set the child elements to be either column,

00:02:09.545 --> 00:02:11.555
which is stacked on top of each other,

00:02:11.555 --> 00:02:14.905
a row, which is left to right.

00:02:14.905 --> 00:02:20.615
To change a CSS property from column to row will use a media query,

00:02:20.615 --> 00:02:22.585
but more on that later.

00:02:22.585 --> 00:02:26.840
This is just a basic overview of the CSS flexbox.

00:02:26.840 --> 00:02:30.770
It does have a lot more properties and options than what we can see here.

00:02:30.770 --> 00:02:34.665
We will also look at a few more of these during the projects,

00:02:34.665 --> 00:02:39.720
but for now let's put this into practice by adding it to the heavy section.
