1

00:00:01,050  -->  00:00:06,660
Hello everyone and welcome to the solution to the binary search tree check interview problem.

2

00:00:06,720  -->  00:00:12,330
To reiterate the problem statement given a binary tree you have to check whether it was a binary search

3

00:00:12,390  -->  00:00:13,820
tree or not.

4

00:00:14,370  -->  00:00:16,530
So if we just zoom in here.

5

00:00:17,940  -->  00:00:21,120
So too much so we can take a look at the solution.

6

00:00:21,120  -->  00:00:23,380
I'll just be walking through the solution note book.

7

00:00:23,490  -->  00:00:28,800
I won't actually code anything out live because there's quite a bit of code but actually one of the

8

00:00:28,800  -->  00:00:30,590
solutions is really simple.

9

00:00:30,990  -->  00:00:37,230
So the simple solution is to know that if a tree is a binary search tree then traversing the tree in

10

00:00:37,230  -->  00:00:42,810
order should lead to the sorted order of the values in the tree so we can actually perform and in order

11

00:00:42,810  -->  00:00:47,720
traversal traversal and then check whether the node values are sorted or not.

12

00:00:47,730  -->  00:00:53,640
So if you go back to treat traversal lecture you should be able to check out the function we had for

13

00:00:53,640  -->  00:00:56,460
that in order traversal of a tree.

14

00:00:56,460  -->  00:00:59,780
So here that is just straight from that lecture.

15

00:00:59,790  -->  00:01:06,300
In this case what I did was create a list called Tree values and I appended the values of the tree as

16

00:01:06,300  -->  00:01:11,070
we traversed in order and then went ahead and did a sort check.

17

00:01:11,070  -->  00:01:12,860
And what this sort check function does.

18

00:01:12,870  -->  00:01:19,470
It takes that list of tree values and then just checks if the tree values list is the same as the sorted

19

00:01:19,470  -->  00:01:21,260
version of the tree values list.

20

00:01:21,530  -->  00:01:28,610
And so with that function here I can check if the in order traversal of the tree actually was the sorted

21

00:01:28,620  -->  00:01:32,150
values and then I know it's a binary search tree.

22

00:01:32,370  -->  00:01:37,620
In other classic solution is to keep track of the minimum maximum values a node can take as you go through

23

00:01:37,620  -->  00:01:39,900
the tree in each node.

24

00:01:40,050  -->  00:01:45,320
You're going to check whether it's values between the min and max values it's allowed to take the Ruken

25

00:01:45,330  -->  00:01:48,810
take any value between negative infinity and positive infinity.

26

00:01:48,840  -->  00:01:53,950
ANY node its left child should be smaller than or equal to its own value.

27

00:01:54,060  -->  00:01:59,460
And similarly the right child should be larger than or equal to that own value.

28

00:01:59,460  -->  00:02:02,210
So remember this was the BSEE property.

29

00:02:02,230  -->  00:02:06,830
You can go to review the binary search tree lectures but this is essentially just checking each node

30

00:02:06,840  -->  00:02:10,820
for that BSD property and the so doing recursion.

31

00:02:10,860  -->  00:02:16,470
What are you going to do send the current value as the new max to the left child and send the men as

32

00:02:16,470  -->  00:02:17,980
it is without changing it.

33

00:02:18,750  -->  00:02:23,310
And to the right child what you're going to do is send the current value as the new men and send the

34

00:02:23,310  -->  00:02:24,960
max that change.

35

00:02:25,320  -->  00:02:28,530
So here's an example of that sort of logic.

36

00:02:28,530  -->  00:02:31,100
Code it out so you have this class note here.

37

00:02:31,380  -->  00:02:34,530
In this case we have key value and then left and right as none.

38

00:02:34,920  -->  00:02:39,690
As I mentioned before you can use basically any node class you want something that just makes sense

39

00:02:39,690  -->  00:02:41,670
to you because an interview setting.

40

00:02:41,760  -->  00:02:45,410
You're probably just going to expect you to write out your own methods here.

41

00:02:45,930  -->  00:02:52,020
In this case I just said the function tree Max tree men and then I have this verify function which if

42

00:02:52,020  -->  00:02:57,850
I zoom out a bit and see it in its full scope and I just have some examples here.

43

00:02:58,240  -->  00:03:01,120
We go ahead and just go back up here.

44

00:03:01,400  -->  00:03:07,230
What's happening here on tree Max is if we're saying if not node just return a flow of negative infinity

45

00:03:07,230  -->  00:03:07,660
.

46

00:03:07,750  -->  00:03:12,920
And what this allows us to do if I just copy this and go to a try that Jupiter empty cell.

47

00:03:12,920  -->  00:03:17,100
This just allows you to have negative infinity in a notebook.

48

00:03:17,130  -->  00:03:19,030
Or excuse me in Python.

49

00:03:19,340  -->  00:03:20,430
The coming back to this.

50

00:03:20,430  -->  00:03:26,700
If it's not a node that does not end up being true you just return negative infinity and then Otherwise

51

00:03:26,700  -->  00:03:33,180
you have Max left and max rate variables and that sequel to the recursive call on the left and right

52

00:03:33,180  -->  00:03:35,800
nodes and you just return again key.

53

00:03:35,820  -->  00:03:42,780
Max left Max right in you doing a similar recursive call here except the minimum now on the left and

54

00:03:42,780  -->  00:03:48,730
right of that node and basically throughout this varify function.

55

00:03:48,750  -->  00:03:52,100
All we're doing is just making sure that BSEE property is true.

56

00:03:52,380  -->  00:04:00,240
So we're making sure that that node laughs into the tree max function is Lessner equal to the node key

57

00:04:00,950  -->  00:04:04,010
and that at the right it's greater than or equal to.

58

00:04:04,200  -->  00:04:08,760
And you also verify the node left and node right through recursive calls.

59

00:04:08,970  -->  00:04:13,080
Basically you just keep recursively verifying each note in that fashion.

60

00:04:13,260  -->  00:04:15,750
So he gave an example of what this would look like.

61

00:04:15,750  -->  00:04:18,380
We have 10 5 and 30.

62

00:04:18,540  -->  00:04:25,510
So 5 is less than 10 and 30 is greater than 10 to the left and right nodes respectively.

63

00:04:25,710  -->  00:04:28,210
So that will print true since that's correct.

64

00:04:28,560  -->  00:04:36,780
Here we have 10 as are roots the right of that is 20 so that's still good left of that IF is 5 so that's

65

00:04:36,780  -->  00:04:44,760
still good but what happens is we have left right equal to 15 and since 15 isn't in the correct position

66

00:04:44,760  -->  00:04:51,000
it's going to print false since 15 is to the left 10 and it shouldn't have been on the right there.

67

00:04:51,000  -->  00:04:55,560
OK so I'm going to check out this code yourself and go ahead and put in an example Sirian to this note

68

00:04:55,560  -->  00:04:58,350
code so you can understand what varify is doing.

69

00:04:58,350  -->  00:05:03,540
And these recursive calls on the min and max checks but really the key to understanding this problem

70

00:05:04,110  -->  00:05:10,490
in the second portion is going to be the BSEE check and really in an interview setting.

71

00:05:10,620  -->  00:05:15,740
You're most likely probably going to be asked to implement this solution instead of the sorting trick

72

00:05:15,750  -->  00:05:17,920
here about the in order traversal.

73

00:05:18,380  -->  00:05:20,610
Ok if that being said definitely review this one.

74

00:05:20,670  -->  00:05:22,740
It's a classic interview problem.

75

00:05:22,740  -->  00:05:28,050
Feel free to just google search validate BSD in case you want more information on this problem as well

76

00:05:28,070  -->  00:05:28,330
.

77

00:05:28,590  -->  00:05:31,510
OK thanks and I'll see at the next lecture.
