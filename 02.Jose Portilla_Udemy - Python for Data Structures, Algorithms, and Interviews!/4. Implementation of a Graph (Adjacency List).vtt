WEBVTT
1

00:00:01.470  -->  00:00:06.380
Hello everyone and welcome to the implementation of a graph as an adjacency list lecture.

2

00:00:06.840  -->  00:00:12.450
In this lecture we're going to go over Python programming and how to use it to implement a graph as

3

00:00:12.450  -->  00:00:14.760
an adjacency lists in order to do this.

4

00:00:14.760  -->  00:00:20.540
You can go ahead and check out the notebook that's underneath the graph folder in the repository and

5

00:00:20.550  -->  00:00:26.070
we're going to be implementing two classes of vertex class and then we'll use that to build out the

6

00:00:26.070  -->  00:00:29.020
full graph class before we begin building.

7

00:00:29.090  -->  00:00:35.160
Just go over a few things or we're going to do is as I mentioned create that graph which holds that

8

00:00:35.160  -->  00:00:40.760
master list of vertices and then the vertex class which will represent each vertex in the graph.

9

00:00:40.980  -->  00:00:46.230
Each vertex is going to use a dictionary to keep track of the vertices twitch it's connected to and

10

00:00:46.230  -->  00:00:49.890
the weight of each edge that dictionary is going to be called connected to.

11

00:00:49.890  -->  00:00:54.450
So if you go ahead and scroll down to the code you can see here we have a self duck connected to empty

12

00:00:54.450  -->  00:00:56.010
dictionary object.

13

00:00:56.160  -->  00:01:00.390
Then what the constructor is simply going to do is initialize the ID which is typically going to be

14

00:01:00.390  -->  00:01:06.120
a string and the connected to dictionary the ADD neighbor method is used to add a connection from the

15

00:01:06.120  -->  00:01:07.370
vertex to another.

16

00:01:07.650  -->  00:01:12.270
We have a get connection's method which returns all the vertices and the adjacency list as represented

17

00:01:12.270  -->  00:01:17.340
by the connected to instance variable that dictionary we created then the weight method just returns

18

00:01:17.340  -->  00:01:21.470
the weight of the edge from the vertex of the vertex pass as a parameter.

19

00:01:21.510  -->  00:01:26.130
So with that being say let's go ahead and build out this vertex and explain what we're doing along the

20

00:01:26.130  -->  00:01:26.650
way.

21

00:01:26.880  -->  00:01:28.390
It's actually a pretty simple class.

22

00:01:28.530  -->  00:01:32.290
And then after that we'll go ahead and go over the details of the graph class.

23

00:01:32.310  -->  00:01:36.920
Let's go ahead and jump to a fresh Jupiter notebook and get started.

24

00:01:37.400  -->  00:01:43.820
So I'm going to zoom in a bit here so it's a little easier to see first thing than do say class let's

25

00:01:43.820  -->  00:01:45.330
just call this vertex

26

00:01:49.230  -->  00:01:54.090
and I'm going to go ahead and say it is

27

00:01:56.580  -->  00:01:58.770
Passons self and key.

28

00:01:59.340  -->  00:02:05.760
And so the idea of the vertex is going to be that key though we pass and then as I mentioned before

29

00:02:05.760  -->  00:02:11.970
we're going to have a dictionary called connected to and all this realized that it's an empty dictionary

30

00:02:11.970  -->  00:02:14.310
so right us that we create the vertex object.

31

00:02:14.430  -->  00:02:18.140
We have a key and an empty dictionary connected to.

32

00:02:18.150  -->  00:02:21.050
Now we want a method to add neighbors.

33

00:02:21.360  -->  00:02:30.570
So I will say the ADD neighbor that's going to take himself of course and then it's going to take a

34

00:02:30.570  -->  00:02:36.310
variable NDR for that neighbor and then a weight which will initialises zero.

35

00:02:36.450  -->  00:02:44.550
So if you forget to put in a weight has a weight of 0 and then will say self-fertile connected to that

36

00:02:44.550  -->  00:02:48.880
neighbor we create that key and then say it's equal to weights.

37

00:02:49.470  -->  00:02:54.240
So it is connected to dictionaries doing is it's taking in the neighbor as the key will be a string

38

00:02:54.450  -->  00:02:57.850
and then the weight as the value for that key.

39

00:02:57.910  -->  00:03:03.300
Then all we're gonna do is say the F let's say gets connection's

40

00:03:06.090  -->  00:03:16.590
self and then we're going to return self-taught connected to overturn all the keys that dictionary.

41

00:03:16.590  -->  00:03:23.310
So that we can just grab all the connections for that neighbor for that connected to dictionary I should

42

00:03:23.310  -->  00:03:32.550
say then we'll create one more cup more methods will say Get Id taken self and that's just going to

43

00:03:32.550  -->  00:03:35.380
return self-study.

44

00:03:35.970  -->  00:03:40.100
One more method called Get away.

45

00:03:40.920  -->  00:03:47.550
They'll take in self and a neighbor and they will go ahead and return that way.

46

00:03:47.550  -->  00:03:51.280
So remember that way is just the value at that key.

47

00:03:51.280  -->  00:03:58.170
So we can essentially just copy that and say return self-deceit connected to a neighbor.

48

00:03:58.350  -->  00:04:01.140
Now we're going to add a special method.

49

00:04:02.100  -->  00:04:04.200
So this one is going to be that string method.

50

00:04:04.200  -->  00:04:08.150
So this is what happens when Python needs a string representation.

51

00:04:08.340  -->  00:04:11.910
So it's basically going to be what happens when you say print that vertex object.

52

00:04:11.970  -->  00:04:19.650
Python is going to look for that string representation there and then you say return a string of self-treat

53

00:04:19.680  -->  00:04:31.500
the class will say connected to and then we'll say plus And then what I'm going to do is use list comprehension

54

00:04:32.160  -->  00:04:33.600
in order to get a list of everything.

55

00:04:33.600  -->  00:04:41.790
So I'll say Exidy for X and self-taught connected to.

56

00:04:41.910  -->  00:04:46.230
Let's go ahead and zoom out a bit so you can see that whole code.

57

00:04:46.230  -->  00:04:51.080
So what I'm saying here is just grab every Friday for X and that self-talk connected to the dictionary

58

00:04:51.870  -->  00:04:52.570
.

59

00:04:52.760  -->  00:04:53.230
All right.

60

00:04:53.510  -->  00:04:55.680
So that should be it forever.

61

00:04:55.720  -->  00:05:00.650
Next class will check up on it later.

62

00:05:00.660  -->  00:05:01.500
Make sure it works.

63

00:05:01.500  -->  00:05:04.940
Back when we implement the anti-graft class.

64

00:05:05.120  -->  00:05:05.600
OK.

65

00:05:05.610  -->  00:05:11.260
So up next is the graph class so in order to implement the graph is an adjacency list.

66

00:05:11.340  -->  00:05:12.530
We're going to have the following methods.

67

00:05:12.540  -->  00:05:17.500
We're going have just the graph which creates a new empty graph that's going to be this right here will

68

00:05:17.510  -->  00:05:21.310
have at Vertex which adds an instance of vertex.

69

00:05:21.310  -->  00:05:28.620
The graph will have an edge which as you directed edge to the graph that connects to vertices and then

70

00:05:28.620  -->  00:05:34.080
we'll also let that same method taken a weight arguments if we want to.

71

00:05:34.190  -->  00:05:36.340
And that's going to add a new way to direct that edge.

72

00:05:36.360  -->  00:05:40.650
The graph then we'll have a vertex and get vertices.

73

00:05:40.640  -->  00:05:45.840
This one just gets that particular vertex for that key and get vertices returns a list of all the vertices

74

00:05:45.840  -->  00:05:50.710
in the graph and in return TRUE first statement the form vertex and graph.

75

00:05:50.790  -->  00:05:55.520
If the given vertex is in the graph falsify Otherwise we'll explain that one a little more when we actually

76

00:05:55.520  -->  00:05:56.250
get to it.

77

00:05:56.540  -->  00:06:00.980
But let's go ahead and implement this graph class and take advantage of that vertex class we just created

78

00:06:00.990  -->  00:06:03.670
.

79

00:06:03.720  -->  00:06:06.480
So first timer and do say class

80

00:06:09.060  -->  00:06:23.020
graph we're going to say initialize it just taken self going to say self Virts list.

81

00:06:23.060  -->  00:06:24.950
So list that vertices.

82

00:06:25.010  -->  00:06:30.250
It's actually going to be an empty dictionary not an empty list all show why later.

83

00:06:30.370  -->  00:06:39.960
And they'll say self-fertile whoops numb courtesies is equal to zero and they'll basically be a verdict's

84

00:06:40.430  -->  00:06:43.570
a vertex tracker counter.

85

00:06:43.590  -->  00:06:49.160
Next up we're going to do is say make a method for adding a vertex to this graph.

86

00:06:49.350  -->  00:06:50.720
And so that's going to take itself.

87

00:06:50.730  -->  00:06:54.070
Remember the vertex takes in keys.

88

00:06:54.090  -->  00:06:56.010
So we're going to do is go ahead and add a key to that

89

00:06:59.620  -->  00:07:10.050
will say self-taught now vertices is equal to self-taught vertices plus 1

90

00:07:14.930  -->  00:07:19.050
and you could also just say here plus one.

91

00:07:19.100  -->  00:07:20.070
Up to you.

92

00:07:20.100  -->  00:07:24.000
We'll go ahead and go with the shorter message is a little cleaner basically means.

93

00:07:24.020  -->  00:07:25.340
So I added a vertex.

94

00:07:25.350  -->  00:07:31.490
I need to add a number the number of vertices I have graph and now it's actually do that.

95

00:07:31.490  -->  00:07:38.870
So let's that vertex going to create basically a temporary object here called new vertex set equal to

96

00:07:38.880  -->  00:07:50.330
an instance of the vertex class with that key that's been given and I'll say self dot vert list at that

97

00:07:50.340  -->  00:07:58.490
key is new vertex and just keep in mind the reason I'm calling this list is because we're modeling this

98

00:07:58.560  -->  00:08:01.670
as an adjacency list not because the sexual object.

99

00:08:01.710  -->  00:08:04.970
List keep in mind that Burtt list is a dictionary.

100

00:08:05.120  -->  00:08:10.710
But the reason it's called list is because we're modeling this after an adjacency list.

101

00:08:10.740  -->  00:08:11.440
All right.

102

00:08:11.810  -->  00:08:17.130
Then lastly I was going to say return new vertex.

103

00:08:17.120  -->  00:08:18.700
All right so that's how we out of her attacks.

104

00:08:18.720  -->  00:08:27.890
We add a number to our counter vs. set new vertex obsoletes to vertex key say self-taught Burtt list

105

00:08:27.990  -->  00:08:30.130
at that key is equal to that new vertex object.

106

00:08:30.140  -->  00:08:32.920
And then just return the new vertex.

107

00:08:32.930  -->  00:08:39.270
Next I want to get a method for or create a method for getting vertices so I'm going to say protects

108

00:08:39.660  -->  00:08:41.060
.

109

00:08:42.250  -->  00:08:52.100
Going to say self an end and it's going to say if an in self the verb list and keep in mind that if

110

00:08:52.110  -->  00:08:57.270
I say in a dictionary it's going to say in the dictionary key.

111

00:08:57.260  -->  00:09:03.020
So I'm just going to show you an example of that real quick by creative dictionary.

112

00:09:03.030  -->  00:09:11.100
And I say K-1 with the value one in if I ask one.

113

00:09:11.180  -->  00:09:19.380
Or let's say if K-1 in that dictionary current

114

00:09:22.670  -->  00:09:33.410
in dictionary but notice if I say this I don't get anything out because it's not in there.

115

00:09:33.410  -->  00:09:38.460
So when you essentially want to try to say is it when you iterate through a dictionary without specifying

116

00:09:38.900  -->  00:09:47.280
dot it or items or it or keys or values or items etc. it's going to automatically default to the Keys

117

00:09:47.280  -->  00:09:47.300
.

118

00:09:47.310  -->  00:09:49.800
And this is for both Python to in Python 3.

119

00:09:49.880  -->  00:09:54.220
So when you iterate through a dictionary by default you don't say a specific method.

120

00:09:54.380  -->  00:09:56.750
It's going to iterate through those keys.

121

00:09:56.790  -->  00:09:58.770
So why is that important.

122

00:09:58.800  -->  00:10:04.160
Because that's basically what we're doing here we're saying if an is in the keys of that list because

123

00:10:04.160  -->  00:10:10.340
that Burtless has those keys which are the vertices and that in that graph.

124

00:10:10.640  -->  00:10:21.730
OK so if it's in there I'm going to return self or list of an else I'm just going to return.

125

00:10:21.770  -->  00:10:26.760
So that wasn't in there.

126

00:10:26.760  -->  00:10:36.000
Next up I want to say add edge if I want to add an edge I'll say DPF add edge.

127

00:10:36.340  -->  00:10:40.140
Go ahead and take a space there an edge.

128

00:10:40.140  -->  00:10:42.150
And this is where it's going to say self

129

00:10:45.140  -->  00:10:49.860
F C cost is zero.

130

00:10:51.080  -->  00:10:54.500
So as a reminder what do these actually stand for.

131

00:10:54.550  -->  00:10:59.280
This is going to be from Burt Tietz or Virtex I should say.

132

00:10:59.380  -->  00:11:03.850
This is t for two Virtex and then cost is that weight.

133

00:11:03.880  -->  00:11:15.670
So continuing all of this I'm going to say if the F which is the from Virtex is not in self-taught list

134

00:11:16.600  -->  00:11:27.190
I mean we're going to say nv equals make a variable called n v equal to self dot at Vertex

135

00:11:30.190  -->  00:11:36.970
and then if the two vertex isn't in there I must say not in self-taught or just

136

00:11:40.120  -->  00:11:55.150
say and B is equal to self at Vertex at two vertex and then finally and just going to say self that

137

00:11:55.310  -->  00:11:59.880
Virt list f to the ADD neighbor method

138

00:12:02.430  -->  00:12:09.340
and let's make sure we spell that correctly at neighbor if we scroll back up to Herberts vertex class

139

00:12:09.340  -->  00:12:10.600
we have the neighbor.

140

00:12:10.690  -->  00:12:13.310
So we need to take neighbor in the way.

141

00:12:14.560  -->  00:12:19.410
So I need to say the neighbors are going to be self-taught.

142

00:12:19.410  -->  00:12:26.620
List that to Virtex and then that way it's just a car.

143

00:12:26.620  -->  00:12:30.860
So remember here is that from Virtex and see here is that two Virtex.

144

00:12:30.900  -->  00:12:33.700
So here we're checking if they're actually in our vert list.

145

00:12:33.750  -->  00:12:39.780
So if or not that means kind of like adding a new vertex the graph in order to add that edge.

146

00:12:39.790  -->  00:12:40.290
All right.

147

00:12:40.600  -->  00:12:47.750
So we're not returning this we're just setting this inside the actual object.

148

00:12:47.840  -->  00:12:59.860
Want to make another method called get C's self and say return self list and just go ahead and return

149

00:12:59.860  -->  00:13:04.000
the keys.

150

00:13:04.000  -->  00:13:08.890
So if I didn't specify keys I would have accidently overturned the whole dictionary.

151

00:13:08.880  -->  00:13:14.110
Now we're going to go ahead and say some special methods here.

152

00:13:14.130  -->  00:13:20.250
One is the entire method so it happens and actually iterate through this graph object by say for Blenkin

153

00:13:20.250  -->  00:13:31.310
graph this case what I want to do is return later of self list stop values.

154

00:13:31.500  -->  00:13:38.080
And so what that's essentially doing is saying OK grab all the values in that Burtless dictionary and

155

00:13:38.080  -->  00:13:40.460
then make it into an iterable object.

156

00:13:40.600  -->  00:13:46.710
So that basically means when I say for some for object or item in graph and actually iterate through

157

00:13:46.720  -->  00:13:51.180
it I'm going to be iterating through the values in that Vergilius dictionary.

158

00:13:51.970  -->  00:13:56.450
And you can check out some more special methods we're going to add to more called contains

159

00:14:00.410  -->  00:14:12.740
and I'll say self an and here will just return an in self a verb list and that allows us to use that

160

00:14:12.750  -->  00:14:17.240
and in OPERATOR OK so.

161

00:14:18.350  -->  00:14:19.170
So I ran that.

162

00:14:19.210  -->  00:14:23.010
Let's go ahead and actually check if it ran and make sure we don't have any errors here.

163

00:14:23.010  -->  00:14:27.730
It's quite a bit of code might have an error somewhere but let's go ahead and see if it works.

164

00:14:27.720  -->  00:14:32.450
I'm going to say G is an instance of a graph object.

165

00:14:32.640  -->  00:14:33.970
So far so good.

166

00:14:34.410  -->  00:14:45.390
And then I'm going to say let's say for zoom in here X I assume though what it say for I in range 6

167

00:14:46.570  -->  00:14:53.420
will st g dot at a vertex of II.

168

00:14:53.500  -->  00:14:55.770
So basically just keep adding those numbers.

169

00:14:56.130  -->  00:14:57.650
Ok that works.

170

00:14:57.660  -->  00:15:01.610
So let's go ahead and call the vertex list from it.

171

00:15:02.470  -->  00:15:02.700
Right.

172

00:15:02.710  -->  00:15:08.680
So we actually have zero through five vertices so let's go ahead and make sure we can add an edge here

173

00:15:08.700  -->  00:15:08.920
.

174

00:15:09.100  -->  00:15:12.210
So this is essentially that Vizcarra V1 V2 et cetera.

175

00:15:12.300  -->  00:15:15.750
You remember back from the presentations in earlier lectures.

176

00:15:16.150  -->  00:15:18.560
Let's go ahead and try adding an edge.

177

00:15:18.700  -->  00:15:26.780
So I'll say go from vertex zero so that from vertex to which is that t the one vertex and give it a

178

00:15:26.790  -->  00:15:27.810
weight of 2.

179

00:15:27.830  -->  00:15:29.220
So what is actually doing.

180

00:15:29.240  -->  00:15:30.890
We go back and check here.

181

00:15:31.170  -->  00:15:33.370
I'm saying add edge.

182

00:15:33.370  -->  00:15:40.000
I'm saying from vertex and my two vertex and that weights that I can check from and two are in there

183

00:15:40.000  -->  00:15:40.090
.

184

00:15:40.090  -->  00:15:47.530
If not I add those vertex and then I say solve for list add a neighbor to it go ahead and check it out

185

00:15:47.640  -->  00:15:50.920
make sure it works like it did.

186

00:15:50.910  -->  00:15:52.430
So I say no.

187

00:15:52.800  -->  00:15:55.480
So if for vertex in G.

188

00:15:55.870  -->  00:16:02.010
And what does that actually mean for vertex and G that actually allows me to take advantage of the special

189

00:16:02.020  -->  00:16:04.310
methods I created.

190

00:16:05.230  -->  00:16:15.940
And I'm going to print Virtex and will say print vertex dot get connections

191

00:16:19.600  -->  00:16:21.530
and then I'll print a new line after that.

192

00:16:21.930  -->  00:16:24.320
So see if this works right.

193

00:16:24.340  -->  00:16:25.410
Looks like it did.

194

00:16:25.720  -->  00:16:27.950
So what does this actually doing.

195

00:16:27.970  -->  00:16:32.170
It's going to print the vertex and then print all the connections of that vertex and then prints into

196

00:16:32.160  -->  00:16:32.780
line.

197

00:16:33.070  -->  00:16:40.210
So remember of six vertices in this adjacency lists graph zero through five and there should only be

198

00:16:40.210  -->  00:16:45.570
one connection because I only added one edge and it's actually here it says zero is connected to 1 which

199

00:16:45.580  -->  00:16:47.870
is exactly what I had here.

200

00:16:48.220  -->  00:16:49.950
So it all worked out.

201

00:16:50.160  -->  00:16:56.500
I encourage you to play around with this methods or with these methods I should say build out your graph

202

00:16:56.500  -->  00:17:01.210
a little bigger but really just understand what's actually happening here in relation to that figure

203

00:17:01.670  -->  00:17:04.550
of the adjacency list.

204

00:17:04.680  -->  00:17:06.060
That's really all there is to it.

205

00:17:06.120  -->  00:17:13.080
So just to review what we did we created a class Virtex we have ADD neighbors get connections in a bunch

206

00:17:13.090  -->  00:17:14.400
of other get weights get IDs.

207

00:17:14.400  -->  00:17:21.560
But really the key here is just set it as a dictionary key and say it's connected to weight.

208

00:17:22.170  -->  00:17:23.230
If we need it.

209

00:17:23.640  -->  00:17:27.830
So we have that connected to a dictionary and we can add neighbors to it with weights.

210

00:17:27.880  -->  00:17:29.340
So that's the vertex class.

211

00:17:29.380  -->  00:17:33.340
And then for the graph class takes advantage of the vertex class we just made.

212

00:17:33.340  -->  00:17:41.250
So it can add vertices to it with a number of vertices tracker and we can use a list again just to really

213

00:17:41.260  -->  00:17:43.550
say this is a dictionary.

214

00:17:43.600  -->  00:17:47.080
And the reason it's called the list is because it's an adjacency list form.

215

00:17:47.350  -->  00:17:51.240
But what we're actually dealing in effect we're working with it as a Python dictionary just makes it

216

00:17:51.240  -->  00:17:54.700
a lot easier to create this class.

217

00:17:54.700  -->  00:18:01.120
Now we can add edges and everything else is essentially just special tools or methods to work with that

218

00:18:01.120  -->  00:18:07.320
graph class as far as getting objects from it or iterating through it or checking if it's in something

219

00:18:07.330  -->  00:18:08.500
in that class.

220

00:18:08.930  -->  00:18:10.180
OK that's it.

221

00:18:10.200  -->  00:18:11.650
I encourage you to check this out.

222

00:18:11.640  -->  00:18:16.610
Again there's a bunch of notes in case you want to check out all the explanations and the Perrineau

223

00:18:16.650  -->  00:18:17.710
book.

224

00:18:17.720  -->  00:18:18.260
All right.

225

00:18:18.450  -->  00:18:21.590
That's it for the implementation of a graph is an adjacency list.

226

00:18:21.630  -->  00:18:23.550
Thanks everyone and I'll see you at the next lecture
