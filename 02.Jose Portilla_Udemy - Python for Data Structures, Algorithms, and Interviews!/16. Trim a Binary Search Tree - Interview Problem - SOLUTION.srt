1

00:00:01,320  -->  00:00:06,540
Hello everyone and welcome to the solution lecture for the trim a binary search tree into the problem

2

00:00:06,540  -->  00:00:07,090
.

3

00:00:07,320  -->  00:00:10,320
Just to go over the interview problem again one more time.

4

00:00:10,320  -->  00:00:16,750
The problem statement was given the root of a binary search tree and two numbers min and max trimmed

5

00:00:16,770  -->  00:00:22,750
the tree such that all the numbers in the new tree are between the min and max inclusive.

6

00:00:22,800  -->  00:00:26,280
The resulting tree should still be a valid binary search tree.

7

00:00:26,340  -->  00:00:31,950
So remember that BSD property that we were talking about in the binary search tree lecture.

8

00:00:31,950  -->  00:00:38,700
So for example if it if we get this tree as input this one right here and we want to get a mean value

9

00:00:38,850  -->  00:00:45,010
as 5 and a max value is 13 in your resulting binary search tree should look something like this.

10

00:00:45,030  -->  00:00:47,880
And notice how the branches go correctly.

11

00:00:47,880  -->  00:00:51,360
First 7 is greater than 6 so goes the right 13 to the 10.

12

00:00:51,360  -->  00:00:52,390
It goes right.

13

00:00:52,540  -->  00:00:57,510
So you remove all the nodes whose value is not in between the min and max and it's still a valid binary

14

00:00:57,510  -->  00:00:59,710
search tree.

15

00:00:59,730  -->  00:01:05,970
So I'm at the solution book so there's an explanation or solution right here as well as some code for

16

00:01:05,970  -->  00:01:08,480
this solution and a discussion on the complexity.

17

00:01:08,680  -->  00:01:11,270
What we are going to do is just jump straight to the live code.

18

00:01:11,460  -->  00:01:14,110
Code this out and explain along the way.

19

00:01:14,610  -->  00:01:17,450
So let's go ahead and jump to the Jupiter notebook.

20

00:01:18,180  -->  00:01:21,600
OK here we are at the Jupiter note book and let's go ahead and begin.

21

00:01:21,600  -->  00:01:24,160
First thing I'm going to do is say D.

22

00:01:24,170  -->  00:01:35,600
If say trm will say binary search history b s t will take in the tree the min value is good and call

23

00:01:35,600  -->  00:01:43,480
it in value it matches social code and Maxwell and we can go ahead and zoom in one more.

24

00:01:43,680  -->  00:01:52,720
OK first going to do is say if not 3 return.

25

00:01:53,400  -->  00:01:57,670
Meaning if we come finally to a node we just return.

26

00:01:57,780  -->  00:02:00,060
All right so what are we going to do here to solve this problem.

27

00:02:00,060  -->  00:02:02,610
We're actually going to use some recursive calls.

28

00:02:02,850  -->  00:02:05,800
We're going to do a post order traversal of the tree.

29

00:02:05,880  -->  00:02:09,490
Go ahead and review the traversal lecture in case you want more information.

30

00:02:09,480  -->  00:02:14,880
The Post order but we're basic going to do is process the left children first then the right children

31

00:02:15,000  -->  00:02:17,040
and finally the node itself.

32

00:02:17,040  -->  00:02:23,790
So if form the Nutri bottom up starting from the leaves towards the root as a result while processing

33

00:02:23,790  -->  00:02:29,970
the node itself both its left and right subtrees are valid Trimm the binary search trees.

34

00:02:30,000  -->  00:02:35,370
They may be null as well or none and so what we're going to do at each node is we're going to turn a

35

00:02:35,370  -->  00:02:40,980
reference based on its value which will then be assigned to its parent whose left or right child pointer

36

00:02:41,340  -->  00:02:46,740
depending on whether the current node is left or right child of the parent and see what this looks like

37

00:02:46,740  -->  00:02:47,790
.

38

00:02:47,790  -->  00:02:49,650
So what I can say is tree.

39

00:02:49,890  -->  00:03:00,510
The left is equal to and here's the recursive call trim b s t we pass in the left and again the men

40

00:03:00,510  -->  00:03:06,720
vowel and the max of L.

41

00:03:06,780  -->  00:03:16,230
Now we're going to do the same thing for the rights so trim BSEE say tree the left or Scuse me tree

42

00:03:16,230  -->  00:03:22,360
that writes medieval Maxwell.

43

00:03:23,430  -->  00:03:33,930
OK then we're going to say if men yvel is less than or equal to treetop vowel or less than or equal

44

00:03:33,930  -->  00:03:44,490
to max stop Well we just return the tree since we know it's good and this is where we basically are

45

00:03:44,490  -->  00:03:47,830
taking in the B s t property fences.

46

00:03:48,480  -->  00:03:58,190
So we're saying if trees that vowel is less than or equal to minable then a return tree that writes

47

00:03:59,510  -->  00:04:13,170
and then finally we'll say if tree of that all is greater then Maxwell return tree that left and that's

48

00:04:13,170  -->  00:04:14,070
all there is to it.

49

00:04:14,070  -->  00:04:19,890
So let's go and discuss this in a little more detail so each knows what we're doing is we're all return

50

00:04:19,890  -->  00:04:21,610
a reference based on its value.

51

00:04:21,630  -->  00:04:26,010
As I mentioned which will then be assigned to its parents left or right.

52

00:04:26,040  -->  00:04:31,400
Child pointer depending on whether the current note is the left or right child of the parent.

53

00:04:31,500  -->  00:04:38,510
If current nodes values between min and max So that's these checks right here.

54

00:04:38,730  -->  00:04:40,050
MIN and MAX.

55

00:04:40,050  -->  00:04:41,890
Then there's no action needs to be taken.

56

00:04:41,910  -->  00:04:42,650
So it's good.

57

00:04:42,660  -->  00:04:45,230
We just returned the reference to the node itself.

58

00:04:45,510  -->  00:04:49,440
So again if that value is in between the min and max we know we're good there.

59

00:04:49,440  -->  00:04:52,200
So we just return the tree itself or that node.

60

00:04:52,230  -->  00:04:59,040
So if the current nodes value is less than minimum then we return the reference to its right subtree

61

00:04:59,160  -->  00:05:01,270
and discard the left subtree.

62

00:05:01,650  -->  00:05:06,900
So if it's less than the min Val we return the right subtree and we can do that because remember we

63

00:05:06,900  -->  00:05:12,070
know it's a binary search tree so everything to the left can be discarded since we already know everything

64

00:05:12,150  -->  00:05:15,180
left going to be lower than that minimum.

65

00:05:15,450  -->  00:05:17,250
And then you can use the same logic here.

66

00:05:17,310  -->  00:05:22,770
If a tree value is greater than the max value you can just return tree left because you know everything

67

00:05:22,770  -->  00:05:26,600
on the right is already too big because it's a binary search tree.

68

00:05:26,790  -->  00:05:32,370
So this is really all the interview problem is trying to get at the fact that you can think of these

69

00:05:32,370  -->  00:05:34,450
three properties here.

70

00:05:34,770  -->  00:05:39,060
First you just check if the value is in between the min evaluate the max value.

71

00:05:39,060  -->  00:05:40,290
If so then you're good.

72

00:05:40,290  -->  00:05:41,430
Return the tree.

73

00:05:41,820  -->  00:05:45,970
And the reason you are returning that note to that tree is because you're doing a recursive call.

74

00:05:46,110  -->  00:05:49,880
So you're going to eventually keep doing this and you'll take care of all the branches.

75

00:05:49,950  -->  00:05:55,920
Which is why you have these two recursive calls for left and right then and this is the key is what

76

00:05:55,950  -->  00:06:01,080
your interviewer will be looking for is the fact that you know if the tree that Val is less than the

77

00:06:01,080  -->  00:06:07,470
minimum value you just return the entire right tree and you discard the entire left because it's a binary

78

00:06:07,470  -->  00:06:08,250
search tree.

79

00:06:08,310  -->  00:06:13,210
You know everything to the left is can already be discarded because of this line.

80

00:06:13,680  -->  00:06:17,310
And then similarly can do the same thing here.

81

00:06:17,340  -->  00:06:24,470
OK so again they're really just searching for your understanding of the binary search tree property

82

00:06:24,470  -->  00:06:25,230
.

83

00:06:25,320  -->  00:06:27,510
The complexity of this algorithm is order.

84

00:06:27,540  -->  00:06:30,520
And where n is the number of nodes in the tree.

85

00:06:30,780  -->  00:06:35,400
Because we basically perform a post order traversal of the tree business each and every node.

86

00:06:35,640  -->  00:06:40,150
Once this is optimal because we should visit every node at least once.

87

00:06:40,350  -->  00:06:46,750
This is a very nice question here that both demonstrates the effectiveness of recursion on trees.

88

00:06:46,800  -->  00:06:53,430
This and your understanding of BSD so to really understand the solution to this problem completely.

89

00:06:53,430  -->  00:07:00,780
Go ahead and review post order traversal and review BSD property entries so you can go ahead and revisit

90

00:07:00,780  -->  00:07:02,550
those lectures.

91

00:07:02,700  -->  00:07:05,960
As far as your code itself it doesn't have to look exactly like this.

92

00:07:06,000  -->  00:07:11,340
As far as a tree that left or how you call the specific methods on tree that value case you're putting

93

00:07:11,340  -->  00:07:12,540
in root turn node.

94

00:07:12,840  -->  00:07:15,110
But the actual logic should be the same.

95

00:07:15,120  -->  00:07:21,830
This line this line and this line then recursive calls here could be one depending on how your function

96

00:07:21,830  -->  00:07:22,640
set up.

97

00:07:23,110  -->  00:07:27,990
OK that's it for this solution you can check out the Jubran notebook with a written out explanation

98

00:07:27,990  -->  00:07:29,500
of everything we're doing here.

99

00:07:29,700  -->  00:07:32,950
An explanation on the complexity of the rhythm.

100

00:07:33,120  -->  00:07:34,070
Other than that.

101

00:07:34,320  -->  00:07:36,630
Good job and I'll see at the next lecture.

102

00:07:36,630  -->  00:07:38,220
Thanks everyone.
