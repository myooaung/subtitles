WEBVTT
1

00:00:01.230  -->  00:00:06.780
Hello everyone and welcome to the word ladder problem lecture this lecture we're going to learn about

2

00:00:06.780  -->  00:00:11.840
what the word ladder problem is we're going to see how we can solve that problem with a graph.

3

00:00:12.150  -->  00:00:15.720
We're going to see an implementation of a solution in Python and then we're going to begin thinking

4

00:00:15.720  -->  00:00:17.670
about graph traversal.

5

00:00:17.670  -->  00:00:22.110
A quick note on the imitation of a solution in Python we're not actually going to live code anything

6

00:00:22.110  -->  00:00:27.540
out because the main purpose of the lecture and the word ladder problem in general is just to get us

7

00:00:27.540  -->  00:00:32.460
thinking about how we can actually traverse through a graph and what kind of problems it can apply graphs

8

00:00:32.490  -->  00:00:34.570
to.

9

00:00:34.590  -->  00:00:36.900
So what is the word ladder problem.

10

00:00:36.900  -->  00:00:38.820
So consider the following puzzle.

11

00:00:38.820  -->  00:00:40.670
You have to transform the word fool.

12

00:00:40.710  -->  00:00:44.530
F O L into the word sage s h e.

13

00:00:44.850  -->  00:00:49.860
And in the word ladder puzzle you must make a change occur gradually by only changing one letter at

14

00:00:49.860  -->  00:00:51.630
a time at each step.

15

00:00:51.630  -->  00:00:56.220
You must transform one word into another word and you're not allowed to transform a word into a non-word

16

00:00:56.220  -->  00:00:56.530
.

17

00:00:56.580  -->  00:01:02.940
So to give you an example an idea fool here which will transform into a pool by only changing one letter

18

00:01:02.990  -->  00:01:03.210
.

19

00:01:03.280  -->  00:01:09.660
Then we can transform that into pole and then pull again pale sale and then Saige.

20

00:01:09.990  -->  00:01:15.340
So on each step we only change one letter and we slowly transform fool into the word sage.

21

00:01:15.390  -->  00:01:21.210
So that's the basics of the word letter problem and one of those that we can actually solve this problem

22

00:01:21.210  -->  00:01:23.130
using graph algorithm.

23

00:01:23.160  -->  00:01:28.110
What we can do is represent the relationships between the words as a graph and then use the graph algorithm

24

00:01:28.110  -->  00:01:32.010
known as breath first search which is what we want to begin thinking about.

25

00:01:32.010  -->  00:01:36.010
To find an efficient path from the starting word the ending word.

26

00:01:37.170  -->  00:01:42.270
So we wanted to figure out how to turn a large collection of words into a graph and what we would like

27

00:01:42.270  -->  00:01:45.020
is to have an edge from one word to another.

28

00:01:45.120  -->  00:01:50.640
If two words are only different by a single other letter then any path from one word to another is a

29

00:01:50.640  -->  00:01:52.340
solution to the word letter puzzle.

30

00:01:52.560  -->  00:01:54.900
So let me show you what I mean by that.

31

00:01:55.330  -->  00:01:59.240
Imagine you have here this graph and here we have fool.

32

00:01:59.280  -->  00:02:00.510
And here we have Saige.

33

00:02:00.720  -->  00:02:04.310
And you'll notice the actual edges connect one word to another.

34

00:02:04.440  -->  00:02:11.430
Only after removed by one letter in what you should also notice is that this is an unweighted edge on

35

00:02:11.430  -->  00:02:14.110
all of them and it's also an undirected graph.

36

00:02:14.160  -->  00:02:18.120
And remember it directly digraphs are where edges only point in one direction.

37

00:02:18.120  -->  00:02:20.290
In this case all the edges point into that direction.

38

00:02:20.310  -->  00:02:24.300
Because you can jump from one word to another in both directions.

39

00:02:24.300  -->  00:02:28.190
OK so the edges are unweighted in it's undirected graph.

40

00:02:28.380  -->  00:02:30.800
So how could you actually build out this graph.

41

00:02:30.800  -->  00:02:32.460
There are several approaches.

42

00:02:32.550  -->  00:02:36.540
One approach you could do is take the assumption that you already have a list of words that are all

43

00:02:36.540  -->  00:02:37.430
the same length.

44

00:02:37.680  -->  00:02:42.690
So imagine you had all these words in the list and they're all the same length for letters as a starting

45

00:02:42.690  -->  00:02:43.160
point.

46

00:02:43.170  -->  00:02:48.330
You can create a vertex in the graph for every word in the list to figure out how to connect the words

47

00:02:48.330  -->  00:02:48.480
.

48

00:02:48.540  -->  00:02:53.220
You could compare each word in the list with every other and then when you compare what you're looking

49

00:02:53.220  -->  00:02:57.270
for see how the letters are different to two words in question are different Barling one letter.

50

00:02:57.280  -->  00:02:59.870
Then you just create an edge between them in the graph.

51

00:03:00.180  -->  00:03:03.960
So that thinking might work for a very small set of words.

52

00:03:04.020  -->  00:03:09.800
Will be fine however if you have a list of thousands of words roughly speaking you're gonna have order

53

00:03:09.830  -->  00:03:15.030
and squared algorithm because you have to do a comparison from this word to every other word.

54

00:03:15.100  -->  00:03:17.060
It's it's almost like a nested for loop.

55

00:03:17.370  -->  00:03:20.180
So you can actually do a lot better than that.

56

00:03:20.430  -->  00:03:25.140
And then what you can do is suppose that you have a huge number of buckets each of them of a four letter

57

00:03:25.140  -->  00:03:32.080
word on the outside except that one of the letters in the label has been replaced by an underscore.

58

00:03:32.130  -->  00:03:37.860
So for example as you can see in this figure we might have a bucket labeled POPC underscore and as we

59

00:03:37.860  -->  00:03:39.470
process each word in our list.

60

00:03:39.480  -->  00:03:44.110
What we do is compare the word with each bucket using the underscore as a wildcard.

61

00:03:44.400  -->  00:03:50.370
So then Bouffes words like Pope and pops would each match GOP underscore and every time you find the

62

00:03:50.370  -->  00:03:53.170
matching bucket you put the word in that bucket.

63

00:03:53.340  -->  00:03:57.240
And once we have all the words in the appropriate buckets we know that all the words in the bucket must

64

00:03:57.240  -->  00:03:58.140
be connected.

65

00:03:58.380  -->  00:04:02.100
So that's a way better and more efficient way of actually creating the graph.

66

00:04:02.100  -->  00:04:04.770
We just saw versus the end squared algorithm.

67

00:04:04.770  -->  00:04:08.480
We were thinking about comparing each word to every other single word.

68

00:04:08.480  -->  00:04:12.640
This bucket solution with the blank is a lot better.

69

00:04:12.950  -->  00:04:16.910
In Python you can actually implement that scheme by just using a dictionary.

70

00:04:16.950  -->  00:04:20.260
The labels on the buckets we've just described are the keys to a dictionary.

71

00:04:20.460  -->  00:04:23.830
And then the value stored for that key is a list of words.

72

00:04:24.000  -->  00:04:26.480
Once we have the dictionary built we can create the graph.

73

00:04:26.490  -->  00:04:30.990
We start a graph by creating a vertex for each word in the graph and then we create edges between all

74

00:04:30.990  -->  00:04:33.630
the vertices we find for the words found under the same key.

75

00:04:33.630  -->  00:04:36.070
That dictionary is essentially that bucket.

76

00:04:36.570  -->  00:04:38.590
So let's go ahead and see the implementation in Python.

77

00:04:38.610  -->  00:04:39.450
Again we all live.

78

00:04:39.450  -->  00:04:40.200
Code anything out.

79

00:04:40.200  -->  00:04:44.390
We just want to begin to think about how we can build graphs to solve problems.

80

00:04:44.430  -->  00:04:46.490
So let's go in and jump to the code.

81

00:04:47.250  -->  00:04:51.270
So here we are now at the word ladder example problem notebook.

82

00:04:51.270  -->  00:04:55.540
Again here I'm just actually on get not be a viewer because we're not going to code anything out.

83

00:04:55.660  -->  00:05:00.100
Just going to go ahead and explore the code a bit so we can get a better understanding.

84

00:05:00.120  -->  00:05:03.480
So in order to construct the graph I've just copied and pasted.

85

00:05:03.480  -->  00:05:05.310
And you can import this if you want.

86

00:05:05.310  -->  00:05:11.850
The vertex class that we created earlier as well as the graph class and this is what the build graph

87

00:05:12.180  -->  00:05:14.130
essentially code or function would look like.

88

00:05:14.130  -->  00:05:20.040
In case you want to do this so again what you're doing here is the labels on those buckets we've just

89

00:05:20.040  -->  00:05:25.980
described earlier are the keys in our dictionary and the value stored for that key is a list of words

90

00:05:25.980  -->  00:05:26.570
.

91

00:05:26.570  -->  00:05:27.780
Also you have the dictionary built.

92

00:05:27.810  -->  00:05:33.660
We can create the graph and then you start our graph by creating a vertex for each ward Magrath.

93

00:05:33.750  -->  00:05:38.710
So then we create edges between all the vertices we find for words fun in the same key.

94

00:05:38.730  -->  00:05:44.750
So in this case you've opened the giant list of words you set for line and the Word file.

95

00:05:44.790  -->  00:05:46.290
Go ahead and print the line and print the word.

96

00:05:46.290  -->  00:05:48.720
If you're curious you can just hash tag those out.

97

00:05:48.750  -->  00:05:55.860
If there's too many words grab the word and then say for an arranged length of word essentially just

98

00:05:56.670  -->  00:06:01.830
insert that underscore there and then you're setting those as buckets which are essentially your keys

99

00:06:01.830  -->  00:06:02.500
.

100

00:06:02.580  -->  00:06:07.500
Then you're saying for the bucket in that key and then for the word in that bucket again for word 2

101

00:06:07.540  -->  00:06:08.480
in that bucket.

102

00:06:08.630  -->  00:06:10.130
They don't equal each other.

103

00:06:10.500  -->  00:06:13.940
Add an edge between word one and word two.

104

00:06:13.940  -->  00:06:14.590
All right.

105

00:06:15.030  -->  00:06:16.500
So again you can check this out.

106

00:06:16.500  -->  00:06:21.060
I encourage you to go through it but really this is just to get us to think about how we can use a graph

107

00:06:21.390  -->  00:06:24.860
to solve real problems and how we can traverse that graph.

108

00:06:24.930  -->  00:06:29.880
So the next lecture we're going to dive much deeper into how we can actually traverse a graph and search

109

00:06:29.880  -->  00:06:31.240
for something in a graph.

110

00:06:31.560  -->  00:06:34.290
OK thanks everyone and I'll see you at the next lecture
