1

00:00:01,380  -->  00:00:08,610
Hello everyone and welcome to the lecture on the implementation of they d f s r that first search algorithm

2

00:00:08,610  -->  00:00:08,700
.

3

00:00:08,700  -->  00:00:15,540
So this algorithm basically explores possible vertices remember from a supply route and it goes down

4

00:00:15,660  -->  00:00:18,240
each branch before backtracking.

5

00:00:18,240  -->  00:00:23,820
And this property allows the algorithm to be implemented singly in both iterative and recursive forms

6

00:00:23,820  -->  00:00:24,620
.

7

00:00:24,690  -->  00:00:28,380
So below we're going to do this is the notebook this associate of this lecture.

8

00:00:28,600  -->  00:00:33,030
You can go ahead and check it out but below the listing of actions we're going to do upon visiting each

9

00:00:33,030  -->  00:00:38,820
node is marked the current vertex as being visited and then explore each adjacent vertex that is not

10

00:00:38,820  -->  00:00:42,060
included in that visited set.

11

00:00:42,120  -->  00:00:47,790
With that being said we're going to assume that the graph is and this simplified form screen going to

12

00:00:47,790  -->  00:00:50,460
copy and paste that's here.

13

00:00:50,640  -->  00:00:57,690
And let's go ahead and get started with just the basic implementation of depth first search.

14

00:00:57,900  -->  00:01:01,750
So we're going to do is go ahead and start with just the basic function call it.

15

00:01:01,760  -->  00:01:14,640
DFS is going to take in a graph and then a starting node or vertex and then we'll say visited is equal

16

00:01:14,640  -->  00:01:22,310
to a set and then we all create our stack and that's going to be a list.

17

00:01:22,560  -->  00:01:27,150
We start as the first element in that list.

18

00:01:27,150  -->  00:01:37,740
Now we're going to say wow stack will have vertex equal to popping an item off of that stack.

19

00:01:37,800  -->  00:01:43,780
Basically the vertex that's in that stack that node member you can use those interchangeably.

20

00:01:43,860  -->  00:01:53,430
I will say if that vertex is not in visited then I will take visited

21

00:01:56,370  -->  00:02:12,690
add that vertex to it and then what I'm going to do is say stack that extends and I'm going to do vertex

22

00:02:15,840  -->  00:02:22,130
visited and then I'm going to return visited.

23

00:02:22,140  -->  00:02:28,980
So let's see let's make sure this works before we fully break it down pasand graph and let's start at

24

00:02:28,980  -->  00:02:30,910
node A.

25

00:02:30,960  -->  00:02:38,300
So if we look at the connected components of a that's going to be this.

26

00:02:38,940  -->  00:02:39,960
And there you have it.

27

00:02:39,960  -->  00:02:42,230
We've there's the entire graph.

28

00:02:42,240  -->  00:02:44,450
So we've done that first search.

29

00:02:44,670  -->  00:02:48,470
Let's go ahead and go over everything we just did.

30

00:02:48,510  -->  00:02:53,040
So this implantation we're using basically a stack like data structure which is that list are saying

31

00:02:53,040  -->  00:02:53,890
visited.

32

00:02:53,980  -->  00:02:57,750
So all the vidis visited versus that empty set.

33

00:02:57,750  -->  00:03:04,200
We set our stack equal just to the starting node and then we'll say well stack go ahead and pop that

34

00:03:04,200  -->  00:03:08,000
vertex saw that the vertex isn't unvisited yet.

35

00:03:08,250  -->  00:03:13,920
We're going to add that vertex and then we're going to say stack and extend that by this term right

36

00:03:13,920  -->  00:03:14,300
here.

37

00:03:14,310  -->  00:03:18,510
Graph that vertex meaning if we look at our graph here it's a dictionary.

38

00:03:18,510  -->  00:03:22,820
So at that Vertex that value it's the set.

39

00:03:22,950  -->  00:03:24,390
So it's going to show you what this does.

40

00:03:24,420  -->  00:03:31,770
If I go ahead and say that sets minus let's say B or something.

41

00:03:31,870  -->  00:03:37,600
You know you get a type error and that's because this is actually supposed to be a set.

42

00:03:37,600  -->  00:03:41,780
So remember this is what we're actually doing.

43

00:03:42,360  -->  00:03:47,370
And that's because basically Python's overloading of the subtraction operator to remove items from a

44

00:03:47,370  -->  00:03:55,500
set or we're able to add only that of adjacent vertices so if we look at this again this is what this

45

00:03:55,500  -->  00:03:57,430
line is essentially doing.

46

00:03:57,780  -->  00:04:04,700
So graph at that vertex is going to be all the vertices that vertex is connected to.

47

00:04:04,950  -->  00:04:08,970
And then we subtract visited member visit visitors a set.

48

00:04:09,000  -->  00:04:12,900
So it's a set with that particular vertex on it.

49

00:04:12,960  -->  00:04:15,570
And then we keep subtracting until we don't get anything.

50

00:04:15,570  -->  00:04:18,250
And then we've built out our entire depth first search.

51

00:04:18,240  -->  00:04:20,440
So that's really all there is to it.

52

00:04:20,460  -->  00:04:26,180
It's definitely a lot simpler than a b f s or breadth first search.

53

00:04:26,570  -->  00:04:31,950
There's a couple other like implementation methods and functions so you can go ahead and check out in

54

00:04:31,950  -->  00:04:32,930
the notebook.

55

00:04:32,940  -->  00:04:38,160
So for instance there's a recursive implementation here and you can check out and there's also if you

56

00:04:38,160  -->  00:04:43,040
wanted to show all the possible paths between two nodes.

57

00:04:43,060  -->  00:04:48,150
There's also an implementation free to check out there and there's a bunch of resources for you in case

58

00:04:48,150  -->  00:04:50,430
you want to read more into it.

59

00:04:50,610  -->  00:04:52,910
So definitely check out especially this first research.

60

00:04:52,950  -->  00:04:54,920
I find it really good.

61

00:04:55,190  -->  00:04:58,140
It just goes over DFS and DFS.

62

00:04:58,460  -->  00:05:02,830
It's just a little blog post and it just goes over again basic graph data structure.

63

00:05:02,940  -->  00:05:07,020
So little more math oriented but it's still pretty relevant to what we're doing.

64

00:05:07,050  -->  00:05:13,410
And then it gives you again code for both methods for DFS and for B.

65

00:05:13,500  -->  00:05:18,820
So I encourage you to check it out check that out and then goes over generalizing too.

66

00:05:18,870  -->  00:05:23,330
A great link great blog post and there's the official wikipedia links there.

67

00:05:23,370  -->  00:05:26,020
Casher interested in that as well.

68

00:05:26,040  -->  00:05:27,890
That being said that's really all there is to it.

69

00:05:27,890  -->  00:05:36,840
First that first search you taken to go back here your visited your stack and then take the Virtex pop

70

00:05:36,840  -->  00:05:40,180
it off of the stack you have visited.

71

00:05:40,240  -->  00:05:46,200
Get at it and then you can just do this extension operation until we keep going.

72

00:05:46,290  -->  00:05:49,520
We've actually seen all those nodes and that's all there is to it.

73

00:05:49,540  -->  00:05:50,650
That first search.

74

00:05:50,790  -->  00:05:51,410
OK.

75

00:05:51,600  -->  00:05:55,310
Go ahead and check out the full Jupiter note book for all the notes and all the implementations.

76

00:05:55,320  -->  00:05:57,030
But that's all there is to it.

77

00:05:57,030  -->  00:05:58,140
I'll see at the next lecture.

78

00:05:58,140  -->  00:05:58,660
Thanks everyone
