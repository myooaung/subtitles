WEBVTT
1

00:00:01.320  -->  00:00:08.250
Hello everyone and welcome to the lecture on singly linked lists in this lecture we'll have an overview

2

00:00:08.400  -->  00:00:09.620
on singly linked lists.

3

00:00:09.630  -->  00:00:15.480
What they are will see some diagrams to explain them and then more specifically We'll also go over adding

4

00:00:15.480  -->  00:00:21.080
elements to us linked lists and removing elements to a singly linked list.

5

00:00:22.290  -->  00:00:29.820
OK formally and in a general sense a singly linked lists in its simplest form is a collection of nodes

6

00:00:30.270  -->  00:00:33.120
that collectively form a linear sequence.

7

00:00:33.120  -->  00:00:38.700
Each node stores a reference to an object that is an element of the sequence as well as a reference

8

00:00:38.720  -->  00:00:41.620
the next node of the list.

9

00:00:41.640  -->  00:00:47.030
So if we see this drawn out there just what a single node looks like we have our elements.

10

00:00:47.280  -->  00:00:53.490
In this case we are going to use airport codes or elements MSP the airport code for Minneapolis and

11

00:00:53.490  -->  00:01:00.330
then we have another reference to connecting to another node in our linked lists so we can think of

12

00:01:00.330  -->  00:01:07.360
this as a bunch of nodes that are linked together by these pointers.

13

00:01:07.590  -->  00:01:13.650
Here we have a more full diagram of a singly linked lists the list instance maintains a member named

14

00:01:13.680  -->  00:01:19.050
head that identifies the first note of the list which is this one right here.

15

00:01:19.050  -->  00:01:24.300
Notice how nothing points to the head since its the first node of that list.

16

00:01:24.360  -->  00:01:30.420
In some applications another member named tail that it defies the last note of the list may be found

17

00:01:30.510  -->  00:01:31.690
over at the end.

18

00:01:31.830  -->  00:01:38.970
And in this case this note points to none or nothing indicating that its detail and remember each of

19

00:01:38.970  -->  00:01:42.010
these nodes again is referencing its own element.

20

00:01:42.060  -->  00:01:43.680
In this case the airport codes

21

00:01:46.860  -->  00:01:54.240
again the first and last note of a linked list are known as the head and tail of the list we can identify

22

00:01:54.240  -->  00:01:57.730
the tail as the node having none as its next reference.

23

00:01:57.750  -->  00:02:04.830
This process of going through out the nodes and going through them and checking the linked lists by

24

00:02:04.830  -->  00:02:09.300
going through the nodes is commonly known as traversing the linked list.

25

00:02:09.600  -->  00:02:11.660
So just a couple of terms to review.

26

00:02:11.850  -->  00:02:18.750
We have the head and the tail of the linked list and if we start going through the notes and going through

27

00:02:18.750  -->  00:02:25.590
the connections of the pointers that will be known as traversing the linked list because the next reference

28

00:02:25.590  -->  00:02:28.660
of a node can be viewed as a link or a pointer to another node.

29

00:02:28.860  -->  00:02:34.680
That process of traversing a list is sometimes also known as link hopping or pointer hopping we'll just

30

00:02:34.680  -->  00:02:37.340
call it traversing.

31

00:02:38.760  -->  00:02:44.340
Each node is represented as a unique object of that instance storing a reference to its elements.

32

00:02:44.370  -->  00:02:51.360
In our case those airport codes and the reference to the next node or in the case of the tail none.

33

00:02:51.570  -->  00:02:53.110
So we changed the diagram here.

34

00:02:53.120  -->  00:02:59.850
Just for simplicity's sake with the reference to the element just being part of the node instead of

35

00:02:59.850  -->  00:03:06.060
writing out that pointer that way it looks a little cleaner.

36

00:03:06.060  -->  00:03:10.790
Now lets talk about inserting an element at the head of a singly linked lists.

37

00:03:10.790  -->  00:03:13.140
How do we actually go about doing that.

38

00:03:13.520  -->  00:03:19.490
An important property of a linked list is that it does not have a pre-determined fixed size that uses

39

00:03:19.490  -->  00:03:23.390
space proportionally to its current number of elements.

40

00:03:23.430  -->  00:03:26.310
That means to insert a new element at the head of the list.

41

00:03:26.490  -->  00:03:28.430
You have to do four things.

42

00:03:28.530  -->  00:03:35.640
We create a new node set its element to the new element set its next link to refer to the current head

43

00:03:36.210  -->  00:03:39.930
then set the list head to point to the new node.

44

00:03:40.530  -->  00:03:42.850
Let's try this out in a diagram.

45

00:03:43.810  -->  00:03:51.480
OK we have three steps here three diagrams a BNC bays water singly Leitz looks like before we actually

46

00:03:51.480  -->  00:03:52.970
do an insertion to it.

47

00:03:53.310  -->  00:03:59.850
So we have the head node Minneapolis pointing to Atlanta node pointing to the boss the node pointing

48

00:03:59.850  -->  00:04:00.800
to none.

49

00:04:00.960  -->  00:04:04.840
And now we want to insert an element to the head of a singly linked list.

50

00:04:05.070  -->  00:04:12.960
So we want to insert elex here after we create the new node where we end up doing is a re-assignment

51

00:04:13.050  -->  00:04:15.060
of the head of reference.

52

00:04:15.330  -->  00:04:22.200
So we assign alx and reference a next node in Minneapolis and then do a re-assignment of the head reference

53

00:04:22.320  -->  00:04:26.320
to L.A.X..

54

00:04:26.520  -->  00:04:30.850
Now we want to insert element at the tail of a singly linked lists.

55

00:04:30.870  -->  00:04:36.200
We can also easily insert elmet at the tail de-list provided we keep a reference to the tail node.

56

00:04:36.840  -->  00:04:43.260
In this case we create a new node assign its next reference to none set the next reference of the tail

57

00:04:43.260  -->  00:04:44.740
to point to this new node.

58

00:04:45.060  -->  00:04:49.190
Then update the tail reference itself to this new node.

59

00:04:50.220  -->  00:04:52.270
Lets see what this looks like a diagram.

60

00:04:52.500  -->  00:04:54.030
Here we have three figures.

61

00:04:54.030  -->  00:04:58.710
The first one a is what it looks like before the insertion.

62

00:04:58.710  -->  00:05:05.340
So Minneapolis has the head pointed to Atlanta pointing to the tail Boston which itself points to none

63

00:05:05.640  -->  00:05:07.640
because its the tail.

64

00:05:07.980  -->  00:05:11.670
Then we create a new node here in this figure.

65

00:05:11.970  -->  00:05:18.590
And after we do this we set that you know to reference none.

66

00:05:18.630  -->  00:05:25.270
Its important to know that we must set the next blink of detail in this that be before we assign the

67

00:05:25.260  -->  00:05:30.450
tail variable to point to the new node in see here.

68

00:05:30.480  -->  00:05:38.310
So we set up our new node and then first pointed to none before pointing our previous tail to the new

69

00:05:38.310  -->  00:05:40.430
tail node.

70

00:05:42.000  -->  00:05:47.130
Now lets talk about removing an element from a singly linked lists removing an element from the head

71

00:05:47.130  -->  00:05:52.620
of a singly linked list is essentially the reverse operation of inserting a new element at the head

72

00:05:52.620  -->  00:05:54.990
.

73

00:05:54.990  -->  00:05:57.210
Here we explain it through some diagrams.

74

00:05:57.240  -->  00:06:03.150
This is what are singly linked lists looks like before Moville we have L.A.X. Minneapolis Atlanta Boston

75

00:06:03.550  -->  00:06:07.230
L.A. X at the head Boston at the tail.

76

00:06:07.230  -->  00:06:15.450
And we basically just link out L.A.X. by pointing the head to Minneapolis and then we can easily remove

77

00:06:15.450  -->  00:06:17.690
that node.

78

00:06:18.930  -->  00:06:22.180
We cannot easily delete the last note of a singly linked list.

79

00:06:22.200  -->  00:06:28.770
However even if we maintain a tail reference directly to the last note of the list we must be able to

80

00:06:28.800  -->  00:06:31.120
access the node before the last node.

81

00:06:31.380  -->  00:06:37.870
In order to remove the last node but we cannot reach the node before the tail by following the next

82

00:06:37.870  -->  00:06:43.590
links from the tail if we want to support such an operation efficiently we will need to make our list

83

00:06:43.770  -->  00:06:47.080
a doubly linked list.

84

00:06:48.570  -->  00:06:53.760
So weve learned a lot about singly linked list and how to add or remove elements from them.

85

00:06:53.760  -->  00:06:57.980
Up next we're going to implement a node class and create a single linked list.

86

00:06:58.710  -->  00:07:05.130
As far as the actual topic of linked list formally and through diagrams you might think hey this pretty

87

00:07:05.130  -->  00:07:09.590
simple is just a bunch of notes pointing to each other and then pointing to an element.

88

00:07:09.730  -->  00:07:15.810
And I think when you see the actual implementation you'll realize is just that simple of an idea.

89

00:07:15.810  -->  00:07:19.010
The singly linked lists you have nodes that point to each other.

90

00:07:19.020  -->  00:07:25.140
The trick is just doing certain operations on them such as reversing them or checking on particular

91

00:07:25.140  -->  00:07:32.490
node in that list or removing nodes from the tail of a singly linked lists in which case you have to

92

00:07:32.490  -->  00:07:35.080
go to a doubly linked list.

93

00:07:35.190  -->  00:07:40.080
Hopefully you can see in our implementation the next lecture that this is a pretty simple topic and

94

00:07:40.080  -->  00:07:41.340
straightforward.

95

00:07:41.340  -->  00:07:46.470
The challenge is feeling comfortable enough with it in order to solve the injury problems that we see

96

00:07:46.470  -->  00:07:48.550
at the end of the section.

97

00:07:48.570  -->  00:07:49.470
All right.

98

00:07:49.470  -->  00:07:55.350
So let's go ahead and jump to the next lecture or we're going to implement our own node class and create

99

00:07:55.440  -->  00:07:57.460
a singly linked list.

100

00:07:57.570  -->  00:07:59.260
Thanks and I'll see you at the next lecture
