WEBVTT
1

00:00:01.560  -->  00:00:06.020
Hello everyone and welcome to your first interview problem for the tree section of the Course.

2

00:00:06.150  -->  00:00:07.740
This is called binary search tree.

3

00:00:07.770  -->  00:00:10.880
Check problems statements are actually quite simple.

4

00:00:10.890  -->  00:00:16.950
All it is is given a binary tree check whether it's a binary search tree or not.

5

00:00:16.950  -->  00:00:21.330
So again you can refer to your lectures or even just a quick Google search on what's the difference

6

00:00:21.330  -->  00:00:27.680
between a binary tree and a binary search tree is as far as the solution.

7

00:00:27.690  -->  00:00:30.490
There's no actual testor solution.

8

00:00:30.500  -->  00:00:32.980
So in the interview problem note book.

9

00:00:33.030  -->  00:00:34.910
And that's because of the nature of the question.

10

00:00:34.920  -->  00:00:38.330
Having a testing cell but basically give away the answer.

11

00:00:38.490  -->  00:00:42.520
In this case just worry about your code making sense logically.

12

00:00:42.570  -->  00:00:47.520
A quick hint you may want to think about tree traversals and how that would be effected if it was a

13

00:00:47.520  -->  00:00:49.710
binary search tree or not.

14

00:00:49.710  -->  00:00:52.130
You can go in and fill out your solution below.

15

00:00:52.140  -->  00:00:53.050
One quick note.

16

00:00:53.190  -->  00:00:58.240
This is the classic interview problem so feel free to just google search validate BSD.

17

00:00:58.290  -->  00:00:59.820
For more information on this problem.

18

00:00:59.850  -->  00:01:05.220
After you've had a go at it and one more thing I wanted to point out is just when you're writing your

19

00:01:05.220  -->  00:01:11.930
function as far as how to go about essentially simulating the tree you can just hop over to Jupiter

20

00:01:11.930  -->  00:01:11.960
.

21

00:01:11.970  -->  00:01:13.500
Note book does something like this.

22

00:01:13.500  -->  00:01:20.970
You can say the if your solution and let's say it takes in a tree.

23

00:01:20.970  -->  00:01:27.720
As far as logically speaking you can just do assumptions like this tree that right child or whatever

24

00:01:27.720  -->  00:01:32.250
you want to call it to say what the right branch of that tree is.

25

00:01:32.250  -->  00:01:33.440
You can say that right.

26

00:01:34.650  -->  00:01:42.240
Tree left and the tree the value or a vowel etc..

27

00:01:42.420  -->  00:01:48.840
So the reason why I'm not being very specific on how I want you to format the input of your solution

28

00:01:49.230  -->  00:01:54.240
is because in an interview setting they're going to basically expect you to almost pseudo code this

29

00:01:54.240  -->  00:01:56.020
out but with the right syntax.

30

00:01:56.370  -->  00:02:01.110
So they're not usually going to give you a complete structure for what the tree looks like or how to

31

00:02:01.110  -->  00:02:02.060
check the nodes.

32

00:02:02.280  -->  00:02:07.380
You can just go ahead and assume on your own the various methods you would be able to call off that

33

00:02:07.380  -->  00:02:08.220
tree.

34

00:02:08.240  -->  00:02:12.900
You can go ahead and look back at the implementation lectures to see what methods we had.

35

00:02:12.900  -->  00:02:18.300
OK as far as the actual problem here is just write a function that would be able to take in a binary

36

00:02:18.300  -->  00:02:21.990
tree and check whether it's a binary search tree or not.

37

00:02:21.990  -->  00:02:24.690
Again we're just looking for your code to make sense logically.

38

00:02:24.690  -->  00:02:30.360
Maybe think about tree traversals but just fill out some code below that would look a function something

39

00:02:30.360  -->  00:02:31.040
like this.

40

00:02:31.080  -->  00:02:37.530
And then in this case it would return some sort of boolean true or false right depending if it was a

41

00:02:37.530  -->  00:02:39.970
binary search tree or not.

42

00:02:40.020  -->  00:02:40.500
All right.

43

00:02:40.710  -->  00:02:42.260
Well that all being said.

44

00:02:42.270  -->  00:02:46.300
Best of luck and index structure will go over the solutions to this problem.

45

00:02:46.320  -->  00:02:47.830
Thanks and I'll see you there.
