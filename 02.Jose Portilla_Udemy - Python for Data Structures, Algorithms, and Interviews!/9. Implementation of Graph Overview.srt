1

00:00:01,320  -->  00:00:06,110
Hello everyone and welcome to the implementation of a graph overview lecture.

2

00:00:06,180  -->  00:00:11,190
So this sucks we're going to implement just a simple graph by focusing on the Node class and you can

3

00:00:11,190  -->  00:00:15,910
refer to this lecture for the solution for the future interview problem where you're asked to implement

4

00:00:15,910  -->  00:00:17,100
Siggraph.

5

00:00:17,100  -->  00:00:21,590
Now keep in mind we've actually already implemented a graph earlier in the section of the course.

6

00:00:21,660  -->  00:00:25,890
So if we really understood that and you felt comfortable with it we can go ahead and feel free to skip

7

00:00:25,890  -->  00:00:26,880
this lecture.

8

00:00:27,150  -->  00:00:31,860
But at this lecture it's going to implement the code and this Jupiter notebook and explain it along

9

00:00:31,860  -->  00:00:36,130
the way where we have a graph that's directed and the edges can hold weights.

10

00:00:36,150  -->  00:00:42,120
We have three classes a state class a node class and a graph class and we build it this way just because

11

00:00:42,120  -->  00:00:45,910
sometimes in interviews they want you to fill out some code.

12

00:00:45,990  -->  00:00:49,070
They saw a node instead of an edge.

13

00:00:49,170  -->  00:00:50,420
So this will we're going to build out.

14

00:00:50,420  -->  00:00:54,360
You'll notice that it's going to look really similar to what we did previously and we're going to take

15

00:00:54,360  -->  00:00:57,140
advantage of two built in tools.

16

00:00:57,360  -->  00:01:04,130
The order dictionary and enough for enumerate and they're basically going allow us to as far as to order

17

00:01:04,140  -->  00:01:05,280
dictionary.

18

00:01:05,410  -->  00:01:10,830
If we go ahead and zoom in here there's links to documentation at Jupiter notebook for you but the order

19

00:01:10,830  -->  00:01:12,420
dictionary what it does.

20

00:01:12,420  -->  00:01:16,280
Go ahead and look for it here.

21

00:01:16,280  -->  00:01:17,730
Ordered Dick.

22

00:01:18,210  -->  00:01:26,760
So in order dictionary does is basically allows you to run a dictionary but it also remembers the orders

23

00:01:26,760  -->  00:01:28,500
that the keys were inserted in.

24

00:01:28,680  -->  00:01:33,050
So you can imagine that's a pretty useful tool for building out your graph.

25

00:01:33,120  -->  00:01:35,100
So it operates just like a dictionary.

26

00:01:35,310  -->  00:01:39,240
Except that it also remembers the order that the keys were first inserted them.

27

00:01:39,630  -->  00:01:40,280
OK.

28

00:01:40,620  -->  00:01:45,660
And the other thing we're going to be taking advantage of is in room which is support for enumerations

29

00:01:46,440  -->  00:01:53,400
and it's going to be a very basic class syntax so we're going to say enumerations created use that class

30

00:01:53,400  -->  00:02:00,900
syntax and allows us to create really basic enumerations or we're going to use that for this state class

31

00:02:00,950  -->  00:02:06,510
where we have visited visited and visiting one to three so we can call those instead of white black

32

00:02:06,510  -->  00:02:11,820
and gray like we did in the lectures and you can see you can read more on the documentation how you

33

00:02:11,820  -->  00:02:12,740
would actually grab this.

34

00:02:12,750  -->  00:02:20,100
Basically you just say print a representation of color red and it would give you one for the enumeration

35

00:02:20,120  -->  00:02:20,890
.

36

00:02:21,690  -->  00:02:23,320
OK.

37

00:02:23,370  -->  00:02:27,780
So let's go ahead and jump to implementing this.

38

00:02:27,780  -->  00:02:34,540
So the first thing we're going to have to do is begin by starting up that state class.

39

00:02:34,830  -->  00:02:43,230
So let's go in and say from each noom imports income and you notice you make it an area where you have

40

00:02:43,230  -->  00:02:44,860
no module named in them.

41

00:02:45,030  -->  00:02:49,780
If you do have that it means you're using Python 2 and you need to go ahead and install it.

42

00:02:50,340  -->  00:02:52,570
So if you need to install it you can do that by running.

43

00:02:52,590  -->  00:02:54,780
Exclamation mark Pip.

44

00:02:54,840  -->  00:02:57,320
Install the NUM three four.

45

00:02:57,330  -->  00:03:01,690
And if you done of Anaconda installation you should be able to run this.

46

00:03:01,690  -->  00:03:06,780
So they just click shift enter and then wait for that finished to install.

47

00:03:07,170  -->  00:03:11,510
So I'm going to go ahead and let them install so we can use the numerate for using Python 3.

48

00:03:11,520  -->  00:03:13,310
You don't have to worry about this step.

49

00:03:13,500  -->  00:03:16,050
This will work without the installation.

50

00:03:16,050  -->  00:03:18,950
So looks like we've just finished installing it looks all good.

51

00:03:19,180  -->  00:03:23,260
Then to go ahead and delete that before I do I want to make something clear.

52

00:03:23,280  -->  00:03:28,960
I have an exclamation mark here so I can run this as a basically a command line prompt.

53

00:03:29,280  -->  00:03:32,270
So you could also put this into your command line or your terminal.

54

00:03:32,520  -->  00:03:34,550
So I'm going to put shift center here.

55

00:03:34,590  -->  00:03:38,410
Run this again and I can see it works great.

56

00:03:38,460  -->  00:03:45,480
So that's going to allow us to create this really basic enumeration or inherit from it and then say

57

00:03:47,360  -->  00:03:57,600
other visitors will one visit is equal to and the teen is equal to three.

58

00:03:57,600  -->  00:04:03,300
Now it really depends on your interview situation whether or not something of this detail is necessary

59

00:04:03,300  -->  00:04:03,430
.

60

00:04:03,450  -->  00:04:10,060
You have to fill out and ask your interviewer if they really want that level of detail.

61

00:04:10,870  -->  00:04:13,620
But let's go ahead and then begin the Node class.

62

00:04:13,620  -->  00:04:15,360
So we're going to initialize the node

63

00:04:18,390  -->  00:04:21,220
we have self and then it's also going to take in.

64

00:04:21,780  -->  00:04:24,070
We'll say and you am for.

65

00:04:24,330  -->  00:04:26,800
And that's just going to be the number of that note.

66

00:04:26,850  -->  00:04:33,580
Some people also like to call this like the ID so say selfness is equal to none.

67

00:04:33,630  -->  00:04:45,770
So and they'll say self-taught visit States is equal to states thoughts unvisited and that's really

68

00:04:45,770  -->  00:04:47,790
where we're making use of this.

69

00:04:47,960  -->  00:04:54,620
So it starts off unvisited and now we can actually keep track whether it's been visited visiting or

70

00:04:54,620  -->  00:04:55,440
visited.

71

00:04:55,700  -->  00:04:57,330
So that's really actually really useful.

72

00:04:57,350  -->  00:05:02,060
Again the really depends on your interview situation whether they want you to take that into account

73

00:05:02,500  -->  00:05:08,750
that children gain extra points for thinking about it and they will say self-taught adjacent as the

74

00:05:08,750  -->  00:05:13,960
adjacent nodes and also that equal to an order dictionary.

75

00:05:13,970  -->  00:05:18,680
Now last time we were doing this we just set this equal to a normal dictionary.

76

00:05:18,680  -->  00:05:24,560
Here we're going to take advantage of order dictionaries which you may find useful for the first DFS

77

00:05:24,650  -->  00:05:26,060
search algorithms.

78

00:05:26,270  -->  00:05:28,160
But in this case for order dictionary will set.

79

00:05:28,160  -->  00:05:39,260
The key is going to be the node it will have that value be the weights of that Vertex that connects

80

00:05:39,590  -->  00:05:47,150
and then one more thing I'm going to do is add a special Messen underscore underscore SDR underscore

81

00:05:47,150  -->  00:05:47,980
underscore.

82

00:05:48,170  -->  00:05:53,420
So if I want to print the note or return something in this case and it is going to return self-taught

83

00:05:53,530  -->  00:05:56,670
numb basically the number of that node.

84

00:05:57,710  -->  00:06:02,640
OK so there is or node class and now we just have to build out the graph.

85

00:06:02,700  -->  00:06:17,870
So going to say class graph I'm going to say initialize it and Im going to initialize it with just self

86

00:06:19,360  -->  00:06:31,340
and I say self-taught nodes is equal to an ordered dictionary and I should have pointed out earlier

87

00:06:31,490  -->  00:06:36,920
that we need actually import this first for we run this.

88

00:06:37,100  -->  00:06:39,700
So let's make sure we actually say.

89

00:06:40,640  -->  00:06:43,330
From collections import ordered.

90

00:06:43,430  -->  00:06:47,090
So make sure this all runs.

91

00:06:47,090  -->  00:06:55,550
So we have that will continue on the node and going to make a method to add a node.

92

00:06:56,130  -->  00:07:00,670
So basically adding a vertex excuse me a node to this graph

93

00:07:03,370  -->  00:07:05,690
and I will say node is equal to

94

00:07:08,570  -->  00:07:14,990
node so making a little temporary variable there and then I'm sitting self-taught knows that or a dictionary

95

00:07:16,430  -->  00:07:24,750
at that no call to node then is going to return node that temporary variable there.

96

00:07:25,700  -->  00:07:31,610
So notice how I'm not saying self-taught node here I call self-taught notes here so I can set that key

97

00:07:32,360  -->  00:07:35,800
which is the node ID and the value.

98

00:07:36,380  -->  00:07:47,990
So then I can just add an edge by saying self source destination and weights will set it equal to zero

99

00:07:47,990  -->  00:07:48,010
.

100

00:07:48,010  -->  00:07:50,240
So this should look extremely familiar.

101

00:07:50,510  -->  00:07:56,030
If it doesnt make your review the first time we implemented the adjacency list but it should look extremely

102

00:07:56,030  -->  00:08:03,230
familiar because last time we did this we had from two and then weight was also at zero.

103

00:08:04,100  -->  00:08:13,070
Now this case will say if source not in self-taught nodes we will add that node

104

00:08:15,950  -->  00:08:23,660
or that source and will say if the destination is not in self-taught nodes meaning its not in the graph

105

00:08:23,720  -->  00:08:30,520
right now will say cells at a node destination.

106

00:08:30,520  -->  00:08:34,570
So we did this exact same thing earlier when we were doing the adjacency list but basically what I was

107

00:08:34,570  -->  00:08:41,510
saying is we're going to add an edge give it source notice destination note and the weight of the connection

108

00:08:41,510  -->  00:08:48,020
between them have that edge and what's going to happen is if it's if the source isn't in there as it

109

00:08:48,110  -->  00:08:53,750
is the destination is in there I add it once I have added them I'm just going to say self-taught notes

110

00:08:55,550  -->  00:09:00,570
source adjacent.

111

00:09:03,170  -->  00:09:09,000
And then this is where it gets a little tricky but what I'm going to say is that adjacent method so

112

00:09:09,010  -->  00:09:14,310
if we scroll back up member we have dot adjacent which is that or a dictionary.

113

00:09:14,390  -->  00:09:21,980
So I called that adjacent and I also then want to call self-taught nodes destination on it.

114

00:09:21,980  -->  00:09:26,350
And so that equal to the weight.

115

00:09:28,230  -->  00:09:28,700
OK.

116

00:09:28,760  -->  00:09:29,480
And that should be it.

117

00:09:29,480  -->  00:09:31,470
So let's make sure it works.

118

00:09:31,790  -->  00:09:34,600
So called G is an instance of our graph.

119

00:09:35,030  -->  00:09:36,940
And then we can add an edge to it.

120

00:09:36,950  -->  00:09:41,150
So I go from 0 to 1 to 5.

121

00:09:41,150  -->  00:09:47,020
Notice they didn't have to actually say add node because remember our add edge takes into account if

122

00:09:47,030  -->  00:09:50,130
the source and destination nodes aren't already in there.

123

00:09:50,630  -->  00:09:59,750
So we have that and then we can actually say go ahead and well just say that nodes get all the nodes

124

00:10:00,860  -->  00:10:03,770
and there we have our ordered dictionary with zero and 1 nodes.

125

00:10:03,800  -->  00:10:14,510
And if we go ahead and say add another edge if we wanted to we could say gee the add edge and we'll

126

00:10:14,510  -->  00:10:20,190
go let's say from 1 to 2 for weight of 3 and that's fine too.

127

00:10:20,210  -->  00:10:21,530
We look at our notes now.

128

00:10:21,530  -->  00:10:23,290
Now we have 0 1 2.

129

00:10:23,780  -->  00:10:24,100
OK.

130

00:10:24,140  -->  00:10:25,670
So that's really all there is to it.

131

00:10:25,670  -->  00:10:30,710
Again hopefully this felt a little familiar to you should have been some things that are really familiar

132

00:10:30,710  -->  00:10:36,530
especially in those adding the edges adding nodes instead of the verdicts vertices et cetera.

133

00:10:36,620  -->  00:10:42,200
So hopefully they all felt pretty familiar but that's just another way to implement a graph in Python

134

00:10:42,200  -->  00:10:42,370
.

135

00:10:42,370  -->  00:10:46,790
And it's a super common interview question and it is going to be one of your practice interview questions

136

00:10:46,790  -->  00:10:47,120
.

137

00:10:47,210  -->  00:10:50,440
So I really suggest that you review this lecture as well as the lecture.

138

00:10:50,450  -->  00:10:52,820
We implemented the adjacency list.

139

00:10:52,820  -->  00:10:53,780
All right.

140

00:10:53,780  -->  00:10:56,250
Thanks everyone and I'll see you at the next lecture.
