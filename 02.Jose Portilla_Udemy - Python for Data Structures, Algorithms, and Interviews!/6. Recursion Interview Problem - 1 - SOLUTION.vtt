WEBVTT
1

00:00:02.040  -->  00:00:07.970
Hello everyone and welcome to the recursion interview problem solution for the first interview problem

2

00:00:07.970  -->  00:00:08.030
.

3

00:00:08.070  -->  00:00:12.510
Reversing a string using recursion remember you how to use recursion to solve this.

4

00:00:12.510  -->  00:00:15.700
You can slice or use an iterative process.

5

00:00:16.230  -->  00:00:21.960
As always there's a full solution's notebook that goes over the solutions with code and an explanation

6

00:00:22.710  -->  00:00:24.630
in the contest at the solution yourself.

7

00:00:24.720  -->  00:00:30.300
In this case it's in the folder under recursion and the recursion interview problems and then recursion

8

00:00:30.300  -->  00:00:32.120
problems dash solutions.

9

00:00:32.130  -->  00:00:37.970
You can click that folder it'll take you to all the solutions for all the interview problems.

10

00:00:37.980  -->  00:00:41.850
In this case we're looking at reverse a string.

11

00:00:41.910  -->  00:00:47.190
So we're going to go ahead and walk through the particular solution we have for this interview problem

12

00:00:47.190  -->  00:00:48.000
.

13

00:00:48.180  -->  00:00:54.390
So I was going to think about the problem what we have to do is reverse a string using recursion so

14

00:00:54.450  -->  00:00:59.530
that phrase recursion we already know we need a base case and some sort of recursive case.

15

00:00:59.720  -->  00:01:02.010
So let's go ahead and start filling that in.

16

00:01:02.940  -->  00:01:04.510
We'll need a base case.

17

00:01:04.600  -->  00:01:09.260
And notice I'm just thinking out loud with comments.

18

00:01:09.390  -->  00:01:11.020
This is important to do during an interview.

19

00:01:11.020  -->  00:01:17.160
You really want to make sure that your interview isn't just watching you perform silently or think silently

20

00:01:17.250  -->  00:01:20.040
think out loud during the interview process.

21

00:01:20.070  -->  00:01:25.080
So what I'm thinking right now is since I know I'm going to use recursion I'll have a base case and

22

00:01:25.080  -->  00:01:32.790
a recursive case and let's go ahead and put a pass in here so we don't get an error when we run that

23

00:01:32.790  -->  00:01:34.230
block.

24

00:01:34.230  -->  00:01:35.880
So think about we want to do here.

25

00:01:36.060  -->  00:01:44.600
If I have a string let's just say it's a b c.

26

00:01:45.720  -->  00:01:56.310
I want to reverse this string which means I'm going to want to grab C somehow and then grab B and then

27

00:01:56.310  -->  00:01:59.630
grab a and then add them up together.

28

00:01:59.640  -->  00:02:04.860
But I want to do that in a recursive fashion so how can I do that.

29

00:02:05.580  -->  00:02:07.830
Well we can start by thinking of the base case.

30

00:02:07.830  -->  00:02:13.700
How would I know that I'm done for constructing this reverse string recursively.

31

00:02:13.710  -->  00:02:22.110
I'll start out with C and then I'll have to do some sort of recursive call on the reverse function and

32

00:02:22.110  -->  00:02:29.010
I'll pass and everything else that's remaining let's say ab and then that will eventually lead to and

33

00:02:29.010  -->  00:02:35.520
this is just pseudo code to some sort of call on CA.

34

00:02:35.850  -->  00:02:42.120
And then let's see B and then I'll have some single letter remaining No matter how long the string is

35

00:02:42.450  -->  00:02:43.580
eventually at the end.

36

00:02:43.590  -->  00:02:48.550
I'll just be adding one single element to that string as I reverse it.

37

00:02:49.050  -->  00:02:54.940
So I know I can think about this as my base case being when I only have one element left in that string

38

00:02:55.560  -->  00:02:57.170
so we can go in and fill that out.

39

00:02:57.180  -->  00:03:04.530
I could say if the length of what string is in this case is less than or equal to one

40

00:03:07.730  -->  00:03:10.950
or turn that string cause i know i'm done so already.

41

00:03:10.950  -->  00:03:17.370
Just by thinking about it logically I can think that I have a base case when the length of my string

42

00:03:17.490  -->  00:03:18.240
is what.

43

00:03:18.300  -->  00:03:21.400
So I won't need to do any more recursion calls on it.

44

00:03:21.400  -->  00:03:24.440
So now we can focus on the recursive case.

45

00:03:24.450  -->  00:03:27.220
What do I actually want to return here.

46

00:03:27.780  -->  00:03:29.050
So we think about this.

47

00:03:29.070  -->  00:03:32.520
We want to grab the first element of the string

48

00:03:35.990  -->  00:03:44.160
and in this case that will be as index 0 and we actually want to take it on since reversing it.

49

00:03:44.160  -->  00:03:51.530
We want to tack on to the recursive call of the function in reverse.

50

00:03:51.540  -->  00:03:57.160
In this case on the string but I don't want to do the whole thing.

51

00:03:57.210  -->  00:04:01.240
I want to do on everything that wasn't in that first element.

52

00:04:01.620  -->  00:04:07.940
So I want to do it from one index one all the way to the rest of string.

53

00:04:08.070  -->  00:04:09.370
So let's go ahead and run this.

54

00:04:09.390  -->  00:04:10.920
Make sure it works.

55

00:04:11.250  -->  00:04:16.920
Or call reverse.

56

00:04:17.880  -->  00:04:19.670
And here we go CBA.

57

00:04:19.830  -->  00:04:21.440
Great.

58

00:04:21.820  -->  00:04:26.000
So let's go ahead and work through this and make sure we understand what's actually happening.

59

00:04:26.010  -->  00:04:28.000
First we check if we have a base case.

60

00:04:28.050  -->  00:04:31.480
Is the length of the string less than or equal to one here.

61

00:04:31.800  -->  00:04:35.710
And what I want to know is we could also just said check if it is equal to 1.

62

00:04:36.360  -->  00:04:38.490
So we're checking if it's equal to one.

63

00:04:38.490  -->  00:04:44.970
If it is then we know it's the base case and in some languages you may need to check if it's less than

64

00:04:44.970  -->  00:04:47.200
or equal to 1 which is why I keep it here.

65

00:04:47.700  -->  00:04:55.290
So then we'll return the last element of the string for every other case will pop off that first letter

66

00:04:55.290  -->  00:04:55.320
.

67

00:04:55.320  -->  00:05:01.350
So if we're just starting out will pop off a and then we'll attach it to the recursive call and everything

68

00:05:01.350  -->  00:05:05.110
else which will then pop off B and then will pop off C..

69

00:05:05.400  -->  00:05:15.750
So in this case what's happening recursively is I grab a and pop off B and C then on the next recursive

70

00:05:15.750  -->  00:05:17.140
call.

71

00:05:17.490  -->  00:05:25.200
I grab the puppet off from there and I remaining with C and then I see that see that element only has

72

00:05:25.200  -->  00:05:26.740
a length for one.

73

00:05:26.790  -->  00:05:30.330
So these little sections of string here.

74

00:05:30.330  -->  00:05:37.560
Granted this is pseudo code I can make into real code by adding single quotes will then form the reverse

75

00:05:37.560  -->  00:05:39.410
version of that string.

76

00:05:39.450  -->  00:05:44.610
So as far as code this is actually very very simple which had a code out but it was really the process

77

00:05:44.610  -->  00:05:51.360
of thinking about it thinking about what order this statement and this statement go in in order to have

78

00:05:51.360  -->  00:05:53.040
the correct solution.

79

00:05:53.040  -->  00:05:55.370
So again a walkthrough solution book.

80

00:05:55.380  -->  00:05:59.160
Make sure you really understand the important parts here.

81

00:05:59.160  -->  00:06:02.810
We're thinking about the base case.

82

00:06:02.850  -->  00:06:04.980
What it would look like when you're versed in the string.

83

00:06:05.340  -->  00:06:10.020
So don't worry if you had a little bit of trouble in thinking about the base case would look like.

84

00:06:10.020  -->  00:06:15.360
It just takes a lot of practice and you do have to struggle with it for a bit since thinking about things

85

00:06:15.360  -->  00:06:20.430
recursively doesn't come naturally to a lot of people so it's important to see a lot of examples.

86

00:06:20.430  -->  00:06:25.680
Again if you're having trouble with it you can look through the example homework problems we did earlier

87

00:06:25.770  -->  00:06:27.180
in this section of course.

88

00:06:27.330  -->  00:06:32.680
Or go ahead and look up just basic recursion problems online through Google.

89

00:06:33.120  -->  00:06:33.820
All right.

90

00:06:34.110  -->  00:06:38.130
So again hopefully this was pretty straightforward as far as what the solution actually looked like

91

00:06:38.520  -->  00:06:42.840
and make sure that both the base case and the recursive case makes sense to you.

92

00:06:42.870  -->  00:06:44.670
As you review this problem.

93

00:06:44.910  -->  00:06:45.580
All right.

94

00:06:45.810  -->  00:06:49.080
Great job and I'll see you at the next lecture.
