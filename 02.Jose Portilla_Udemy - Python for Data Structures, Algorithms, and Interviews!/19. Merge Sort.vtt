WEBVTT
1

00:00:01.920  -->  00:00:05.700
Hello everyone and welcome to the lecture on merge sort.

2

00:00:06.070  -->  00:00:11.490
So in this lecture again we'll have an explanation and some visualizations and merge sort and then the

3

00:00:11.490  -->  00:00:17.370
following lecture will have an implementation of merge sort in Python.

4

00:00:17.370  -->  00:00:23.130
So we're going to begin to turn our attention to using divide and conquer strategies as a way to improve

5

00:00:23.130  -->  00:00:25.570
the performance of our sorting out rhythms.

6

00:00:25.920  -->  00:00:31.860
And the first out room in this section of divide and conquer is going to be known as the merge sort

7

00:00:31.860  -->  00:00:32.600
.

8

00:00:32.640  -->  00:00:39.540
So the Mersch sore is a recursive algorithm that continually splits a list and half the list is empty

9

00:00:39.540  -->  00:00:42.680
or has one item it is sorted by definition.

10

00:00:42.690  -->  00:00:48.960
So that's the base case and if the list has more than one item we split the list then recursively invoke

11

00:00:48.960  -->  00:00:51.780
a merge sort on both halves.

12

00:00:52.470  -->  00:00:58.200
So once the two halves are sorted the fundamental operation that's called the merge is performed and

13

00:00:58.200  -->  00:01:03.690
merging is just a process of taking two smaller sorted lists and then combining them together into a

14

00:01:03.690  -->  00:01:05.980
single sorted new list.

15

00:01:06.060  -->  00:01:10.680
So recursive calls are a little hard to illustrate bullets couldn't look at some figures or try to show

16

00:01:10.680  -->  00:01:15.070
that as far as a simple example.

17

00:01:15.120  -->  00:01:16.720
So here we can see this figure.

18

00:01:16.810  -->  00:01:21.480
Your list is being recursively split in half by the merge sort.

19

00:01:21.480  -->  00:01:28.300
So he keeps splitting the lists in half and then through a recursive call when you put them back together

20

00:01:28.680  -->  00:01:32.190
what you're doing is sorting them on the way back.

21

00:01:32.190  -->  00:01:38.070
So it's a little hard to show this recursive call here but this first slide you're showing the lists

22

00:01:38.070  -->  00:01:39.490
being split in half.

23

00:01:39.780  -->  00:01:42.380
So it's being continually split in half.

24

00:01:42.540  -->  00:01:46.710
And here you're seeing that recursive merging taking place.

25

00:01:46.710  -->  00:01:52.170
So the list has more than one item you're going to ahead and split that list and then once the two halves

26

00:01:52.170  -->  00:01:58.310
are sorted that funnel operate the fundamental operation called the merge is performed.

27

00:01:58.320  -->  00:02:03.780
So let's go out and take a look at some visualizations to get a better understanding of this.

28

00:02:04.590  -->  00:02:04.970
OK.

29

00:02:05.010  -->  00:02:09.790
So at the implementation of merge sort lecture you can go in and click the visual outwell resource for

30

00:02:09.790  -->  00:02:17.880
review that will take you here and maybe they'll zoom in hopefully well actually zoom out because the

31

00:02:17.880  -->  00:02:22.040
recursive call where it's going to do is actually highlights what's going to happen.

32

00:02:22.050  -->  00:02:24.180
So you go and click merge sort.

33

00:02:24.630  -->  00:02:31.780
And let's go ahead and slow it down a bit and go ahead and compute this sort.

34

00:02:32.580  -->  00:02:33.110
OK.

35

00:02:33.420  -->  00:02:36.340
So again you're going to split each elements.

36

00:02:36.950  -->  00:02:43.440
And in this case you can see the coloring is basically defining this splitting that's occurring.

37

00:02:43.440  -->  00:02:46.470
So in this case it's actually splitting elements

38

00:02:48.930  -->  00:02:52.200
recursively into partitions of size one.

39

00:02:52.230  -->  00:02:59.610
So I'm going to encourage you to check this out on your own and we can move it a little faster here

40

00:02:59.610  -->  00:03:02.260
to see how these kind of splits are occurring.

41

00:03:02.420  -->  00:03:03.510
It's merging them in half.

42

00:03:03.510  -->  00:03:09.300
So that was your first half there and now it's doing it against the second half and then it's merging

43

00:03:09.330  -->  00:03:11.450
everything together.

44

00:03:11.460  -->  00:03:11.730
All right.

45

00:03:11.730  -->  00:03:15.250
So let's go in and see it in full one more time.

46

00:03:15.270  -->  00:03:20.400
So there are the little recursion calls that's kind of starting at the end in a sense just because the

47

00:03:20.400  -->  00:03:22.060
visualization works that way.

48

00:03:22.120  -->  00:03:24.360
They're either your first half and your second half.

49

00:03:24.480  -->  00:03:26.230
And they keep getting split in half.

50

00:03:26.310  -->  00:03:28.210
And then finally have them merge.

51

00:03:28.580  -->  00:03:28.860
Okay.

52

00:03:28.860  -->  00:03:30.270
So go ahead and check that out.

53

00:03:30.300  -->  00:03:35.580
And again there's also a link to the Wikipedia page for merge sort which has a great explanation as

54

00:03:35.580  -->  00:03:36.370
well.

55

00:03:36.480  -->  00:03:43.100
So I encourage you to be checking out the Wikipedia pages for the Mersch sorts.

56

00:03:43.110  -->  00:03:47.970
It's also going to show you here how it's dividing the list the smallest units which is just one element

57

00:03:48.330  -->  00:03:52.880
and it's comparing each element with the adjacent list and then merging the two adjacent lists.

58

00:03:53.190  -->  00:03:53.560
All right.

59

00:03:53.640  -->  00:03:58.950
So go ahead and check those resources out in the next lecture we'll actually be implementing this sorting

60

00:03:58.950  -->  00:04:00.400
algorithm in Python.

61

00:04:00.720  -->  00:04:01.320
OK.

62

00:04:01.530  -->  00:04:04.410
Thank you everyone and I'll see you at the next lecture.
