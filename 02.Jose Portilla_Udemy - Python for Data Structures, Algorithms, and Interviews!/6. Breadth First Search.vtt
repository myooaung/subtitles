WEBVTT
1

00:00:01.200  -->  00:00:06.980
Hello everyone and welcome to the lecture on breath first search algorithm or CFS.

2

00:00:06.990  -->  00:00:11.460
So in this lecture we're going to get an overview of that DFS algorithm and we're going to continue

3

00:00:11.460  -->  00:00:15.700
to build off that example of that word ladder problem.

4

00:00:15.750  -->  00:00:20.610
So what we want to know now is how can we find the shortest solution to the word ladder problem.

5

00:00:20.610  -->  00:00:24.240
We were able to build out that graph efficiently using That bucket's method.

6

00:00:24.420  -->  00:00:28.710
But now we want to do is actually find the solution to it as we traverse the graph or go through the

7

00:00:28.710  -->  00:00:29.640
graph.

8

00:00:30.060  -->  00:00:35.300
The graph algorithm we're going to use is called breath's first search algorithm or B-F us.

9

00:00:35.310  -->  00:00:37.880
So one of the easy algorithms for searching a graph.

10

00:00:38.100  -->  00:00:42.210
It also serves as a prototype for several other important graph algorithms that we're going to study

11

00:00:42.210  -->  00:00:43.870
later.

12

00:00:44.610  -->  00:00:50.190
Of course as an extra resource there's an MIT algorithms and data structures course it's part of MIT

13

00:00:50.250  -->  00:00:51.410
Open Courseware.

14

00:00:51.480  -->  00:00:52.710
And I encourage you to check it out.

15

00:00:52.710  -->  00:00:54.990
Here's the link so you can go to the resource section.

16

00:00:54.990  -->  00:00:59.800
Download this presentation or just copy and paste this link into YouTube.

17

00:01:00.240  -->  00:01:03.510
And I think you'll be really surprised at how well you can follow along.

18

00:01:03.660  -->  00:01:09.300
Given that you're going straight into the middle of an MIT data structures and algorithms course pretty

19

00:01:09.300  -->  00:01:10.590
much you can jump right in.

20

00:01:10.590  -->  00:01:15.210
We've covered a lot and I encourage you to really use this course as an extra resource for understanding

21

00:01:15.300  -->  00:01:17.280
algorithms and data structures.

22

00:01:17.280  -->  00:01:23.340
Just keep in mind that it's really more on the theory in more basic computer science ideas.

23

00:01:23.360  -->  00:01:28.050
Well in this course we try to emphasize which ideas are important for interview situations so just keep

24

00:01:28.050  -->  00:01:28.820
that in mind.

25

00:01:28.970  -->  00:01:30.060
It's a really great resource.

26

00:01:30.060  -->  00:01:31.310
I definitely encourage you to check it out.

27

00:01:31.310  -->  00:01:36.510
They have the whole playlist and you can also check out additional homework assignments that go along

28

00:01:36.510  -->  00:01:39.220
with that on MIT Open Courseware.

29

00:01:39.240  -->  00:01:41.850
Again it's a great resource and you can jump right in.

30

00:01:41.850  -->  00:01:46.250
You'll really notice how you can understand already everything that they've been talking about.

31

00:01:46.350  -->  00:01:50.040
Even though this is basically halfway through their semester.

32

00:01:50.140  -->  00:01:50.590
OK.

33

00:01:50.790  -->  00:01:51.960
Moving along.

34

00:01:51.960  -->  00:01:52.930
Let's talk about B.

35

00:01:52.970  -->  00:01:54.090
Yes.

36

00:01:54.150  -->  00:02:01.110
So give given a graph G and a starting vertex s what the b fs algorithm does it Prissie's by exploring

37

00:02:01.110  -->  00:02:07.110
the edges in the graph to find all the vertices and G for which there is a path from S.

38

00:02:07.110  -->  00:02:12.540
The remarkable thing about the DFS algorithm is that it finds all the vertices that are at distance

39

00:02:12.540  -->  00:02:18.530
K from S before it finds any vertices or distance K plus 1.

40

00:02:18.540  -->  00:02:24.380
So one good way to visualize what the FS algorithm is doing is to imagine that it's building a tree

41

00:02:24.690  -->  00:02:26.590
one level of the tree at a time.

42

00:02:27.030  -->  00:02:32.850
And what the DFS algorithm does adds all the children of the starting vertex before it begins to discover

43

00:02:32.850  -->  00:02:34.170
any of the grandchildren

44

00:02:36.810  -->  00:02:41.330
as we go along and explain the FS algorithm and the example code.

45

00:02:41.670  -->  00:02:47.280
We're going to keep track of its progress through coloring so be a fast going to color all the vertices

46

00:02:47.280  -->  00:02:53.220
white gray or black all the vertices are initialized to white when they are constructed a white vertex

47

00:02:53.220  -->  00:02:54.960
is an undiscovered for Tex.

48

00:02:54.960  -->  00:02:58.510
So as you go through digraph if it's white it means we haven't discovered it yet.

49

00:02:59.260  -->  00:03:04.410
When a vertex is initially discovered it's colored grey and want to be EF-S has completely explored

50

00:03:04.760  -->  00:03:06.780
a vertex then its color black.

51

00:03:06.780  -->  00:03:11.570
This means that once a vertexes colored black it has no white vertices adjacent to it.

52

00:03:11.760  -->  00:03:15.370
A green note on the other hand may have some white vertices adjacent to it.

53

00:03:15.510  -->  00:03:20.220
In the cane that there's still additional vertices to explore and we'll actually see this basically

54

00:03:20.220  -->  00:03:24.180
diagrammed out later on this lecture.

55

00:03:24.180  -->  00:03:30.510
So what the first does it begins at the starting vertex s and colors start Gray to show that it's currently

56

00:03:30.510  -->  00:03:37.320
being explored to other values the distance and the predecessor are initialized to zero and then none

57

00:03:37.320  -->  00:03:39.810
respectively for the starting of vertex.

58

00:03:39.810  -->  00:03:43.650
And then finally star is placed on a Q data structure.

59

00:03:43.650  -->  00:03:48.490
The next step is to begin systematically exploring the vertices at the front of the queue.

60

00:03:49.050  -->  00:03:54.540
So then what we do is we explore each new node at the front of the queue but iterating over its adjacency

61

00:03:54.540  -->  00:03:59.800
list as each node on the adjacency list is Examinates colors check if it's white.

62

00:03:59.880  -->  00:04:06.200
The vertex is an explore and therefore things are going to happen if the vertex is explored.

63

00:04:06.210  -->  00:04:07.880
We have four things that are going to happen.

64

00:04:08.160  -->  00:04:13.400
The new unexplored vertex which will call and B.R. for neighbor is then colored grey.

65

00:04:13.530  -->  00:04:19.760
The predecessor of neighbour is set to the current node current Virts or current vertex the distance

66

00:04:19.760  -->  00:04:24.660
the neighbour is set to the distance to the current vertex Plus once he had to go an additional edge

67

00:04:25.230  -->  00:04:29.970
and then the neighbors added to the end of the queue adding Nehru's the end of the queue effectively

68

00:04:29.970  -->  00:04:35.880
schedule's this node for further exploration but not until all the other vertices on the adjacency list

69

00:04:36.030  -->  00:04:38.130
of that current vertex have been explored.

70

00:04:38.370  -->  00:04:42.040
So let's take a quick look at what some example code may look like.

71

00:04:42.090  -->  00:04:47.040
So you have a new unexplored vertex and B.R. that could be colored.

72

00:04:47.040  -->  00:04:48.710
So we'll start from the very beginning.

73

00:04:48.720  -->  00:04:50.550
Here we have the FS.

74

00:04:50.560  -->  00:04:52.610
It takes on a graph and a start.

75

00:04:52.920  -->  00:04:58.350
You can say starts at distance or set predecessor and we'll look at that those are just additional methods

76

00:04:58.350  -->  00:05:04.300
on the vertex that we're using to essentially visualize what the FS is doing.

77

00:05:04.350  -->  00:05:11.330
So we begin at the starting vertex s and then the colors start Gray to show that it's currently being

78

00:05:11.340  -->  00:05:17.190
explored then the two other values the distance and the predecessor have been initialized to 0 and none

79

00:05:17.210  -->  00:05:19.870
respectively for the starting vertex.

80

00:05:20.070  -->  00:05:22.990
And then finally the start is placed on a queue.

81

00:05:23.070  -->  00:05:25.170
So you have start in queue over here.

82

00:05:25.350  -->  00:05:30.960
The next step is to begin to systematically explore the vertices at the front of the queue.

83

00:05:31.020  -->  00:05:36.690
We explore each node at the front of the queue but iterating over its adjacency list as each node on

84

00:05:36.690  -->  00:05:38.160
the adjacency list is examen.

85

00:05:38.160  -->  00:05:39.750
It's colour's checked.

86

00:05:40.090  -->  00:05:45.080
Then if it's white which happens at this step we do a couple of things.

87

00:05:45.150  -->  00:05:47.820
The new unexplored vertex neighbor is colored grey.

88

00:05:47.820  -->  00:05:49.400
So he set color gray.

89

00:05:49.650  -->  00:05:53.930
The predecessor of neighbor is set to the current node.

90

00:05:54.050  -->  00:05:59.850
This is the neighbor sets the distance of the current note plus 1 and then the neighbor's added to the

91

00:05:59.850  -->  00:06:03.490
end of the queue again by adding neighbor to the end of the queue.

92

00:06:03.550  -->  00:06:08.370
You've effectively scheduled this note for further exploration but not until all the other vertices

93

00:06:08.370  -->  00:06:12.500
on the adjacency list of the current verdict's Virtex have been explored.

94

00:06:12.620  -->  00:06:14.820
So this is just a quick example code.

95

00:06:15.000  -->  00:06:17.940
I know we didn't actually go and create any.

96

00:06:17.940  -->  00:06:22.910
A few of these methods but just keep in mind it's just to help you out what the code would look like

97

00:06:22.920  -->  00:06:25.970
for the diagram an explanation we're about to see.

98

00:06:26.370  -->  00:06:32.820
So now let's take a look at how that DFS function would construct the basically the breadth first search

99

00:06:32.820  -->  00:06:37.080
tree corresponding to the graph here.

100

00:06:37.110  -->  00:06:41.970
So we're going to do is start from Fool and take all the nodes adjacent to fool and add them to the

101

00:06:41.970  -->  00:06:43.330
tree.

102

00:06:43.350  -->  00:06:48.810
So if we go ahead and visualize that we start Riffel take all the notes that are adjacent to fool and

103

00:06:48.810  -->  00:06:56.530
add them to a tree the adjacent notes here include pool foul foul and cool or foil.

104

00:06:56.560  -->  00:06:59.640
Excuse me so pool foil fouling cool.

105

00:06:59.730  -->  00:07:03.070
Each of these notes are added to the cue of the new nodes to expand.

106

00:07:03.330  -->  00:07:06.720
So here you have a cue of the new nodes to expand.

107

00:07:06.720  -->  00:07:13.970
So here we are on the in-progress tree along with the key after this that in the next step what the

108

00:07:14.160  -->  00:07:20.070
FS does is it removes the next node which is pool in this case from that front of the queue and repeats

109

00:07:20.070  -->  00:07:22.510
the process for all of its adjacent nodes.

110

00:07:22.760  -->  00:07:28.950
However when DFS examines the node cool it finds that the color of cool has already been changed to

111

00:07:28.950  -->  00:07:34.160
great this in the case that there's a shorter path to cool and that cool is already on the queue.

112

00:07:34.170  -->  00:07:41.870
Further exploration the only new node added to the queue while examining pool is in pole p o l l in

113

00:07:41.900  -->  00:07:50.970
a new state of the tree and Q is then shown here and what may be helpful is to open up the graph picture

114

00:07:51.210  -->  00:07:55.670
and see it along as we go through the first search.

115

00:07:55.670  -->  00:07:58.350
But after this this is the second step.

116

00:07:58.380  -->  00:08:02.240
Basically the next vertex on the queue is foil.

117

00:08:02.280  -->  00:08:05.250
F O I L.

118

00:08:05.400  -->  00:08:07.060
So what does that mean.

119

00:08:07.110  -->  00:08:10.870
That means the only way you know that foil can add to the tree is fail.

120

00:08:10.950  -->  00:08:15.360
F A I L and as we fast continue to process the Q.

121

00:08:15.360  -->  00:08:19.890
Neither of the next two nodes adds anything new to the Q or the tree.

122

00:08:19.980  -->  00:08:26.580
So here this figure we see the tree in the q after expanding all the vertices on the second level of

123

00:08:26.580  -->  00:08:28.050
the tree.

124

00:08:28.080  -->  00:08:33.070
So now I want to encourage you to do is continue to work through that algorithm on your own so that

125

00:08:33.090  -->  00:08:34.880
your country will with how it works.

126

00:08:34.880  -->  00:08:40.530
So you should really be doing now is definitely checking out that MIT video I linked earlier and then

127

00:08:40.530  -->  00:08:45.930
trying to see if you can continue with this algorithm until you get to Sage and what it should look

128

00:08:45.920  -->  00:08:47.280
like.

129

00:08:47.340  -->  00:08:49.040
Is this figure right here.

130

00:08:49.080  -->  00:08:55.260
So I encourage you to take this figure and see if just basically mentally you can build this out as

131

00:08:55.250  -->  00:09:00.610
your path as you construct the tree in your mind using b fs and if you want further explanation of the

132

00:09:00.620  -->  00:09:03.870
FS then you can definitely reference that video.

133

00:09:04.110  -->  00:09:06.260
That image at the beginning of the lecture.

134

00:09:06.410  -->  00:09:12.220
So it's a bit of a complicated topic to formally write out but the idea is actually kind of simple.

135

00:09:12.300  -->  00:09:15.750
So let's quickly recap what the FS is actually doing.

136

00:09:15.750  -->  00:09:21.300
It starts at a vertex s and then if we go ahead and jump to that coatless thing.

137

00:09:21.570  -->  00:09:23.910
So here we take n g and a start.

138

00:09:24.360  -->  00:09:31.110
So we start at a vertex and then we're going to do in color that start variable Gray to show that it's

139

00:09:31.110  -->  00:09:32.900
currently being explored.

140

00:09:32.900  -->  00:09:36.820
So we have three colors here gray white and black.

141

00:09:37.380  -->  00:09:39.360
All the vertices are initialized to white.

142

00:09:39.360  -->  00:09:43.930
When they're constructed so that means a white vertex is an undiscovered vertex.

143

00:09:44.070  -->  00:09:49.710
When a vertex is initially discovered it's colored grey and then one of the FS has completely explored

144

00:09:49.710  -->  00:09:56.910
that vertex than its color black and again once a vertex is colored black has no white vertices adjacent

145

00:09:56.900  -->  00:09:57.690
to it.

146

00:09:57.870  -->  00:10:02.130
And then the great node on the other hand may have some white vertices adjacent to it indicating that

147

00:10:02.120  -->  00:10:09.750
there are still some additional vertices to explore and so in this coding list the distance and predecessor

148

00:10:09.750  -->  00:10:13.640
are initialized to zero and none for that starting vertex.

149

00:10:13.770  -->  00:10:19.470
And then we place that start vertex on the Q then the next steps begin to systematically explore the

150

00:10:19.470  -->  00:10:21.640
vertices at the front of the queue.

151

00:10:21.810  -->  00:10:26.730
Now we explore each new note at the front of the queue by iterating over its adjacency list.

152

00:10:26.730  -->  00:10:32.880
So again refer to the adjacency list lecture for what it's actually happening when we iterate over it

153

00:10:32.890  -->  00:10:33.180
.

154

00:10:33.380  -->  00:10:38.610
But basically as each note on the adjacency list is examined we're going to check its color if it's

155

00:10:38.610  -->  00:10:39.000
white.

156

00:10:39.000  -->  00:10:44.490
That means that vertex unexplored and four things are going to happen that new unexplored vertex is

157

00:10:44.490  -->  00:10:46.840
then colored grey because we're there now.

158

00:10:47.120  -->  00:10:53.760
The predecessor of that Vertex that NBER that neighbor is set to the current node which is the current

159

00:10:53.760  -->  00:10:59.700
Virts or current vertex variable that distance the neighbor is set to the distance of the current vertex

160

00:10:59.700  -->  00:11:06.660
plus 1 and the neighbors added to the end of the queue by adding neighbor to the end of the queue we've

161

00:11:06.650  -->  00:11:12.630
effectively scheduled that node for further exploration but not until all the other vertices in the

162

00:11:12.620  -->  00:11:15.940
adjacency list of that current Virtex have been explored.

163

00:11:16.200  -->  00:11:20.510
That way if we reach the end or the target we'll reach it first.

164

00:11:20.550  -->  00:11:26.130
So what's the amazing thing about the first search solution is that not only we've solved the fool to

165

00:11:26.120  -->  00:11:31.830
Saige problem so given that graph find that path but we've actually solved many other problems along

166

00:11:31.830  -->  00:11:32.770
the way.

167

00:11:32.790  -->  00:11:39.690
Now we can start at any vertex in the first search tree and follow the predecessor arrows back to the

168

00:11:39.680  -->  00:11:45.460
root to find the shortest word ladder from any word back to fool.

169

00:11:45.460  -->  00:11:51.090
So up next is the knight's path problem and that's going to be our introduction problem to depth first

170

00:11:51.090  -->  00:11:53.250
search or DFS.

171

00:11:53.250  -->  00:11:54.140
So what should you do.

172

00:11:54.140  -->  00:11:59.670
Now you should definitely go through the MIT lecture listen to it.

173

00:11:59.660  -->  00:12:01.280
It's about 40 minutes long.

174

00:12:01.280  -->  00:12:05.340
So it is quite a time commitment but you'll be able to jump right in.

175

00:12:05.340  -->  00:12:10.650
Understand what they're talking about and get a chance to see how this topic is taught and basically

176

00:12:11.180  -->  00:12:16.100
the best technical university in the world and you'll be surprised at how will you be able to jump in

177

00:12:16.110  -->  00:12:20.920
and you'll know pretty much all the terms that we're talking about as well as the notation.

178

00:12:21.270  -->  00:12:26.100
Then once you're done watching that come take a look through the presentation and make sure you really

179

00:12:26.100  -->  00:12:29.690
understand the FS and see if you can follow through those diagrams.

180

00:12:29.700  -->  00:12:30.460
OK.

181

00:12:30.890  -->  00:12:35.340
Thanks everyone and I'll see you at the next lecture where we discuss that night's paff problem and

182

00:12:35.340  -->  00:12:39.620
get an introduction to DFS or that first search.

183

00:12:39.620  -->  00:12:40.080
Thanks.

184

00:12:40.110  -->  00:12:41.010
I'll see at the next lecture
