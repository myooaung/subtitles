WEBVTT
1

00:00:01.170  -->  00:00:05.640
Hello everyone and welcome to the implementation of Mirch sort lecture.

2

00:00:05.640  -->  00:00:12.120
So again as a brief overview Mirch sort is a recursive algorithm that continually splits a list and

3

00:00:12.120  -->  00:00:14.700
half list or array.

4

00:00:14.730  -->  00:00:18.660
If that list is empty or has one item by definition it's already sorted.

5

00:00:18.680  -->  00:00:20.400
That's your base case.

6

00:00:20.400  -->  00:00:25.950
If the list has more than one item we are in a split that list recursively and invoke a merge sort on

7

00:00:25.950  -->  00:00:27.320
both halves.

8

00:00:27.570  -->  00:00:33.030
Once the two halves are sorted the fundamental operation called the merge is performed that merging

9

00:00:33.090  -->  00:00:38.190
is the process of taking two smaller sorted lists and then combining them together into a single sorted

10

00:00:38.340  -->  00:00:39.650
needed list.

11

00:00:39.660  -->  00:00:44.730
So here I am at the implementation of a merge sort notebook which is under sorting and searching folder

12

00:00:44.750  -->  00:00:45.350
.

13

00:00:45.390  -->  00:00:50.010
Use your resources for review and then here's the actual function we're going to implement and explain

14

00:00:50.010  -->  00:00:51.420
as we go along.

15

00:00:51.450  -->  00:00:53.400
So let's go ahead and implement it.

16

00:00:53.520  -->  00:00:57.020
Make sure it works and then break it down line by line.

17

00:00:57.060  -->  00:01:02.100
So I'm going go ahead and hop over to a Jupiter note book here and I'm going to go ahead and start typing

18

00:01:02.100  -->  00:01:02.380
out.

19

00:01:02.460  -->  00:01:14.040
So first thing we're going to do is just say the earth merge underscores sorts and we're going to go

20

00:01:14.040  -->  00:01:17.120
ahead and pass in an array or a list.

21

00:01:17.130  -->  00:01:25.130
Same thing as we've discussed before and I'm going to say if length of this python lists which are treating

22

00:01:25.140  -->  00:01:32.910
as an array is greater than one that I'm going to have some code out here so I'm going to say mid as

23

00:01:32.910  -->  00:01:34.050
a variable.

24

00:01:34.050  -->  00:01:38.220
So if we already have a length that's more than one we know we're dealing Philos. so as to that middle

25

00:01:38.220  -->  00:01:45.630
of that list that M-ID mid done with the length of that array divided by two and then I'm going to create

26

00:01:45.630  -->  00:01:48.300
two Hafs the left half of that array and the right.

27

00:01:48.350  -->  00:01:52.240
So when I say left half as equal to Array.

28

00:01:52.270  -->  00:02:01.230
I'm going to use some slicing here and to say left half is everything to the middle and then the right

29

00:02:01.230  -->  00:02:01.830
half

30

00:02:04.680  -->  00:02:07.560
is from the middle onwards.

31

00:02:07.560  -->  00:02:12.800
All right so we're using that M-ID that variable as a midpoint so we can split that array.

32

00:02:12.840  -->  00:02:16.440
And here we're actually going to do a recursive call I'm going to say merge sorts

33

00:02:19.650  -->  00:02:26.920
on the left half and then I'm going to call immerged sorts on the right half.

34

00:02:27.120  -->  00:02:31.440
And I'm just using tabbed to autocomplete does variables which is why they're popping up so quickly

35

00:02:31.460  -->  00:02:31.960
.

36

00:02:32.460  -->  00:02:37.930
All right so then we're going to go ahead and make basically some index variables as counters something

37

00:02:37.960  -->  00:02:39.960
to say equals zero.

38

00:02:41.020  -->  00:02:47.270
Jake will zero and cake zero right.

39

00:02:47.430  -->  00:02:51.880
And there were essentially going to have three wild loops here.

40

00:02:52.050  -->  00:02:55.830
One to check basically that midpoint and then another one the left and right half.

41

00:02:55.830  -->  00:02:59.250
So let's go ahead and program these out.

42

00:02:59.490  -->  00:03:06.840
So I'll say why while I is less than the length of the left half

43

00:03:09.570  -->  00:03:23.790
and J is less than the length of the right half what we're going to do is say if the left half at that

44

00:03:23.790  -->  00:03:31.200
index is less than the right half of that index of J

45

00:03:34.200  -->  00:03:44.670
then we're going to say theory at the K index that value is equal to left half of I and then we're just

46

00:03:44.700  -->  00:03:56.130
going to say it equals what I was plus 1 and then it's going zoom in on this loop here.

47

00:03:56.380  -->  00:03:57.600
Then I say else

48

00:04:02.850  -->  00:04:12.490
the array value at that index k is equal to the right half J.

49

00:04:12.730  -->  00:04:19.510
Then we're going to add evaluates J-Rich going to say J was J plus 1.

50

00:04:19.840  -->  00:04:23.840
And then outside of that we're just going to say play plus 1.

51

00:04:23.850  -->  00:04:29.150
And just as a reminder this is the same thing as saying cake will k plus 1.

52

00:04:30.120  -->  00:04:30.650
OK.

53

00:04:30.870  -->  00:04:38.520
So that's our first while loop and something to note here is that these additional y loops are really

54

00:04:38.520  -->  00:04:43.570
just operating from merging to smaller sorted lists into a larger sorted list.

55

00:04:44.010  -->  00:04:50.580
So notice that the merge operation places the items back into the original list which in this case is

56

00:04:50.670  -->  00:04:52.380
a r r for us.

57

00:04:52.380  -->  00:04:56.220
So it replaces them placing the items back to that original list.

58

00:04:56.260  -->  00:05:03.010
Or are that array one at a time by repeatedly taking the smallest item from the sorted list.

59

00:05:03.540  -->  00:05:08.280
OK so let's go ahead and continue on with the rest of the code we need for actually merging these two

60

00:05:08.280  -->  00:05:09.400
sorted lists.

61

00:05:09.420  -->  00:05:16.610
So as far as the actual sorting that's happening here at the recursive call we have two more wireless

62

00:05:16.860  -->  00:05:22.220
for continuing this merging of these two sort of sublists.

63

00:05:22.230  -->  00:05:25.310
And these have to do with the left and right half.

64

00:05:25.310  -->  00:05:37.710
So we're just going to say while it is less than the length of the left half then our value k is just

65

00:05:37.710  -->  00:05:39.530
equal to left have value.

66

00:05:39.600  -->  00:05:46.500
I just say it counts to those index markers

67

00:05:49.640  -->  00:05:52.040
and then we're going to the same similar thing for the White House.

68

00:05:52.050  -->  00:06:03.940
So then while J is less than the length of the right half that value at K is equal to right half J.

69

00:06:04.590  -->  00:06:14.610
And then similarly we're just going to say James 1 J plus equals 1 in the cake Wil's plus one there

70

00:06:14.620  -->  00:06:15.290
.

71

00:06:15.890  -->  00:06:16.640
OK.

72

00:06:16.920  -->  00:06:19.740
So I know that's actually quite a bit of code that we just did.

73

00:06:19.740  -->  00:06:24.360
So before we break it down line by line we're just going to go and make sure it actually worked out

74

00:06:24.360  -->  00:06:27.600
for us so let's go ahead and make an array.

75

00:06:27.590  -->  00:06:34.370
Some random numbers that are unsorted.

76

00:06:34.500  -->  00:06:35.630
OK.

77

00:06:36.000  -->  00:06:42.510
And then let's call merge sort's on that array and then check the array.

78

00:06:42.620  -->  00:06:43.310
OK great.

79

00:06:43.310  -->  00:06:44.150
Looks like it worked.

80

00:06:44.160  -->  00:06:45.620
It looks like it was all sorted.

81

00:06:45.870  -->  00:06:48.650
So now let's go back again and check this out line by line.

82

00:06:48.660  -->  00:06:51.700
Really make sure we understand what's going on here for the merge sort.

83

00:06:52.050  -->  00:06:57.150
And we remember that it's basically a recursive call on the sorting algorithm.

84

00:06:57.140  -->  00:07:03.200
So first off we basically have in the base case right and we're checking here and doing the recursive

85

00:07:03.210  -->  00:07:03.940
calls.

86

00:07:04.010  -->  00:07:08.910
So we're saying that the length the array is still greater than 1 which means we haven't reached that

87

00:07:08.910  -->  00:07:11.810
base case of just one element in that list.

88

00:07:11.880  -->  00:07:18.150
We calculate the mid and then split that list into left and right halfs and then we call merge or a

89

00:07:18.190  -->  00:07:20.280
left half and right half.

90

00:07:20.340  -->  00:07:24.810
So you can imagine you keep calling this recursive algorithm if you remember back to the figures of

91

00:07:24.810  -->  00:07:28.610
the previous lecture you keep splitting that list in half.

92

00:07:28.620  -->  00:07:29.320
All right.

93

00:07:29.630  -->  00:07:33.890
And then once those two halves are sorted we basically have that fundamental operation called emerge

94

00:07:34.440  -->  00:07:39.150
and the merging it's just a process taking those two smaller sorted lists and combining them together

95

00:07:39.140  -->  00:07:41.690
into a single sorted new list.

96

00:07:41.730  -->  00:07:48.390
So we basically have three different index trackers where the K index tracker is going to relate to

97

00:07:48.380  -->  00:07:57.220
our final array and then the tracker is for the left half and the J trackers for that right half.

98

00:07:57.360  -->  00:08:02.970
So each three of these wild calls here is just to make sure that the index is actually still within

99

00:08:03.650  -->  00:08:08.340
the left and right half of the list which is why they're just less than calls.

100

00:08:08.340  -->  00:08:10.710
So we have our eye index for that left hand.

101

00:08:10.860  -->  00:08:11.770
And here we're just checking.

102

00:08:11.790  -->  00:08:12.120
OK.

103

00:08:12.120  -->  00:08:14.690
Are we still in that left half and then J.

104

00:08:14.700  -->  00:08:15.220
Just checking.

105

00:08:15.220  -->  00:08:16.980
We're still in that right half.

106

00:08:16.980  -->  00:08:23.870
So then we're just checking at that particular index of I and J as we continue on because remember we're

107

00:08:23.880  -->  00:08:30.080
adding them essentially equally for any if or else cases we're saying which ones less than or greater

108

00:08:30.090  -->  00:08:30.420
then.

109

00:08:30.420  -->  00:08:37.830
So if it's less than that we just set the value at that current K equal to the left half and then we

110

00:08:37.830  -->  00:08:38.290
add.

111

00:08:38.490  -->  00:08:43.910
So the value there once was on that we go ahead and add to the K value.

112

00:08:44.040  -->  00:08:49.380
If this wasn't the case then we actually set the value equal to the right hand and then add a 1 to the

113

00:08:49.380  -->  00:08:51.660
right half index marker.

114

00:08:52.350  -->  00:08:59.920
Then we have while I is less in line to the left half we continue on a similar process at I plus 1 K

115

00:08:59.930  -->  00:09:06.270
plus 1 and then the similar thing for right half if it's still inside right half.

116

00:09:06.260  -->  00:09:12.920
Go ahead and set that current value where I have J J plus 1 Caple sequel's one is constantly adding

117

00:09:12.920  -->  00:09:17.650
counts and making sure you're still in that left half right half markers.

118

00:09:17.640  -->  00:09:24.940
So these three while loops are just doing the actual merging of the sort it's sublists so licious break

119

00:09:24.950  -->  00:09:30.200
down this code one more time as a complete whole picture I'm kind of zoomed out a bit.

120

00:09:30.480  -->  00:09:33.740
But basically what we have here is our merge sort function.

121

00:09:33.750  -->  00:09:39.160
It begins by asking that base case question if the length of the list is less than or equal to 1 then

122

00:09:39.170  -->  00:09:40.880
we've actually already have a sorted list.

123

00:09:40.910  -->  00:09:42.960
And no more processing is necessary.

124

00:09:43.290  -->  00:09:47.490
If on the other hand the length is greater than one then we use the python slice operation.

125

00:09:47.490  -->  00:09:54.920
So we're doing here to extract the left and the right Hafs which is this variable and this variable

126

00:09:55.530  -->  00:09:59.390
and it's important to note that the list may not have an even number of items that actually doesn't

127

00:09:59.390  -->  00:10:03.060
matter as the lengths will differ by at most one.

128

00:10:03.110  -->  00:10:06.550
It's an odd number of elements.

129

00:10:06.600  -->  00:10:12.660
So then once that merge sort function is invoked on the left half and the right half these two lines

130

00:10:12.650  -->  00:10:15.270
here it's assumed that they are sorted.

131

00:10:15.410  -->  00:10:20.300
And what's actually happening for the rest of the function the rest of these lines they're responsible

132

00:10:20.310  -->  00:10:24.620
for merging the two smaller sorted lists into a larger sorted list.

133

00:10:24.650  -->  00:10:29.710
So notice that that merge operation place the items back to the original list.

134

00:10:29.730  -->  00:10:35.720
So we're actually placing them back into our original array that we took in here at the top.

135

00:10:35.970  -->  00:10:40.740
So it's placing them back one at a time but just repeatedly taking the smallest item from the sorted

136

00:10:40.740  -->  00:10:41.440
list.

137

00:10:41.730  -->  00:10:48.720
So you notice here we're always checking for the smallest item when we're doing these merging operations

138

00:10:48.720  -->  00:10:51.360
.

139

00:10:51.410  -->  00:10:58.160
So one more useful tip as far as really understanding what's going on is definitely adding print statements

140

00:10:58.180  -->  00:10:58.500
.

141

00:10:58.740  -->  00:11:06.380
So you could even just say here in line with that if we go ahead and go back we can actually just say

142

00:11:06.380  -->  00:11:09.190
prints and we can say merging

143

00:11:12.090  -->  00:11:15.890
and then let's go ahead and say just that array.

144

00:11:16.430  -->  00:11:22.150
Let's make sure that primes or works and we can see the actual arrays remerging.

145

00:11:22.160  -->  00:11:27.330
So this is a really nice visualization and hopefully you can see how it matches up with that original

146

00:11:27.950  -->  00:11:30.070
diagram that we saw in the last lecture.

147

00:11:30.090  -->  00:11:31.960
So remerging 11 and 2.

148

00:11:32.150  -->  00:11:37.340
So these guys have already been immersed sorted all the way until they only have one element left in

149

00:11:37.350  -->  00:11:37.860
their index.

150

00:11:37.860  -->  00:11:40.840
Let's zoom in a little more so you can really see this.

151

00:11:40.880  -->  00:11:43.670
So remerging 11:2 We're checking which one is less.

152

00:11:43.700  -->  00:11:45.300
And now we have a sorted.

153

00:11:45.410  -->  00:11:48.800
Now we're going to the right half taking five and four.

154

00:11:48.880  -->  00:11:54.190
Merging them and sorting them and then we're going to go ahead and merge these two guys.

155

00:11:54.240  -->  00:12:01.980
So now we have them sorted and you can see how we have the recursive calls on these arrays or these

156

00:12:01.980  -->  00:12:06.080
sublists and you can see how we're combining them and merge them.

157

00:12:06.120  -->  00:12:07.500
So go ahead and walk through this.

158

00:12:07.500  -->  00:12:12.480
What I would recommend is that you actually replace the Saray with the same array we used in the previous

159

00:12:12.480  -->  00:12:13.330
diagram.

160

00:12:13.470  -->  00:12:19.070
So you can actually match up your code to the diagrams and figures we saw in the last lecture.

161

00:12:19.640  -->  00:12:20.200
OK.

162

00:12:20.340  -->  00:12:22.890
So that's it for the merge sort.

163

00:12:23.150  -->  00:12:29.400
Probably the most tricky or confusing part is making sure the merging itself is actually checking correctly

164

00:12:29.950  -->  00:12:38.250
on these three while loops but the actual idea of it and the recursive call should be pretty simple

165

00:12:38.340  -->  00:12:43.080
and straightforward especially if you do then the recursion section this sort of method of sorting just

166

00:12:43.700  -->  00:12:48.110
kind of makes sense would keep splitting that list in half more and more and more and then just slowly

167

00:12:48.120  -->  00:12:50.850
sort them and merge them as you go back up.

168

00:12:50.880  -->  00:12:51.480
OK.

169

00:12:51.780  -->  00:12:53.140
That's it for the merge sort.

170

00:12:53.220  -->  00:12:57.980
You can go in and check out the Jupiter notebook in case you want more resource for review more explanations

171

00:12:58.700  -->  00:13:02.690
and check out the previous lecture if you want the actual diagrams.

172

00:13:02.690  -->  00:13:05.670
All right thanks everyone and I'll see you at the next lecture
