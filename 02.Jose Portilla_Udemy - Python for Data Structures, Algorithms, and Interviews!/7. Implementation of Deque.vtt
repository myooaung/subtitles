WEBVTT
1

00:00:00.870  -->  00:00:06.840
Hello everyone and welcome to the lecture where we implement a deck so we can implement our own debt

2

00:00:06.840  -->  00:00:08.940
class and just like the other lectures.

3

00:00:08.940  -->  00:00:09.890
Before we begin.

4

00:00:10.080  -->  00:00:14.550
Let's go ahead and take a look at the methods and attributes that will be in our class.

5

00:00:14.550  -->  00:00:20.340
First off we're going to have deck that creates a new deck that is empty.

6

00:00:20.340  -->  00:00:24.110
It's not going to need any parameters and it's just going to return an empty deck.

7

00:00:24.270  -->  00:00:28.110
Now we're going to have adding and removal methods.

8

00:00:28.110  -->  00:00:30.590
So we'll have an ad front and an ad career.

9

00:00:30.900  -->  00:00:36.510
They'll both add items and take items as parameters and then either put them to the front or the rear

10

00:00:36.690  -->  00:00:38.180
depending on which method it's called.

11

00:00:38.370  -->  00:00:40.560
And it will return nothing.

12

00:00:40.560  -->  00:00:44.370
Then we're going to have remove front and remove rear.

13

00:00:44.370  -->  00:00:48.490
These methods are going to remove items either from the front or the rear of the deck.

14

00:00:48.540  -->  00:00:51.340
They won't need any parameters and they're going to return an item.

15

00:00:51.450  -->  00:00:54.060
The deck will then be modified.

16

00:00:54.060  -->  00:00:59.410
Then we have is empty to test to see whether the deck is empty or not it won't need any parameters or

17

00:00:59.430  -->  00:01:01.010
will return a boolean value.

18

00:01:01.020  -->  00:01:04.660
True or false depending if the deck is empty or not.

19

00:01:04.710  -->  00:01:08.020
Then we have size which just returns a number of items in the deck.

20

00:01:08.220  -->  00:01:11.240
It won't need any parameters and it's just going to return an integer.

21

00:01:11.760  -->  00:01:17.440
So as always if you go to the Jupiter notebooks you'll have an implementation of deck notebook which

22

00:01:17.450  -->  00:01:22.360
is what I'm looking at here as well is the code that we're going to explain and code out right now.

23

00:01:22.410  -->  00:01:27.870
So let's go ahead and hop over to Jupiter notebook and code this out.

24

00:01:27.930  -->  00:01:28.370
All right.

25

00:01:28.500  -->  00:01:31.100
So let's go ahead and get started.

26

00:01:31.200  -->  00:01:34.430
So you have a class deck.

27

00:01:34.930  -->  00:01:41.940
I'll go ahead and passen objects is going to be an object and are just going to basically initiate this

28

00:01:41.940  -->  00:01:46.320
class again just like we've been doing for stacks and Qs.

29

00:01:46.410  -->  00:01:56.400
We're going to have the items be defined by a list then we'll create or is empty method that just takes

30

00:01:56.400  -->  00:01:58.700
in self.

31

00:01:58.830  -->  00:02:06.600
And that's going to return soft items is equal to an empty list.

32

00:02:06.630  -->  00:02:11.110
So that's similar to the same method we used for stacks and Qs.

33

00:02:11.270  -->  00:02:17.190
It's just checking if the items in list and if that's true will turn out true boolean otherwise or return

34

00:02:17.190  -->  00:02:18.440
false.

35

00:02:19.210  -->  00:02:23.820
Ok here's an X method at add front.

36

00:02:24.780  -->  00:02:31.260
So we're going to take in an item as well as self and we're going to do is just a pen the item.

37

00:02:31.260  -->  00:02:32.460
So remember a pen.

38

00:02:32.700  -->  00:02:33.990
We have a list.

39

00:02:34.200  -->  00:02:35.640
We'll put it at the very end.

40

00:02:35.640  -->  00:02:38.070
In this case we'll call that the front of our deck

41

00:02:40.860  -->  00:02:42.090
for the ADD rear method

42

00:02:44.890  -->  00:02:56.700
but we want to do is again take an item say softer items and in this case we're going to inserts at

43

00:02:56.700  -->  00:03:00.060
the zero index item.

44

00:03:00.210  -->  00:03:05.970
So this will allow us to add that item at the rear.

45

00:03:05.970  -->  00:03:11.700
Then let's go ahead and remove those items so I'll make two removal methods or remove front end or remove

46

00:03:11.700  -->  00:03:13.200
rear.

47

00:03:13.290  -->  00:03:19.230
Let's go ahead and zoom in on it just so we can really see it for move front.

48

00:03:19.680  -->  00:03:27.300
We're going to take in self and we will return self items up pop

49

00:03:30.300  -->  00:03:32.010
and then A-4 remove rear

50

00:03:36.890  -->  00:03:45.740
but we're going to do is take taken cells and we will return self items.

51

00:03:46.020  -->  00:03:50.710
But in this case we're going to pop at zero with index.

52

00:03:51.250  -->  00:03:52.010
OK.

53

00:03:52.530  -->  00:04:02.880
And then just for the last method which is size we are just going to return the length of the items

54

00:04:02.890  -->  00:04:07.260
list which will these self items.

55

00:04:07.320  -->  00:04:07.630
All right.

56

00:04:07.650  -->  00:04:10.740
Let's go ahead and play around this and make sure it all makes sense.

57

00:04:10.740  -->  00:04:15.810
So create a variable D and create an instance of our debt class.

58

00:04:15.810  -->  00:04:19.390
So we just made we'll add to the front of it.

59

00:04:19.440  -->  00:04:21.610
We'll say hello.

60

00:04:21.860  -->  00:04:23.600
It's just a string hello.

61

00:04:24.540  -->  00:04:32.520
And then we'll add the rear of it another string world or hello world strings.

62

00:04:32.520  -->  00:04:35.270
Let's go ahead and check the science should be too.

63

00:04:35.910  -->  00:04:36.230
All right.

64

00:04:36.240  -->  00:04:37.420
That's looking good.

65

00:04:37.810  -->  00:04:43.080
And now let's go ahead and make sure that the ordering makes sense to us or we're going to do is Prince

66

00:04:44.040  -->  00:04:58.750
d remove France plus a space string and then we're going to say D remove rear and just a reminder of

67

00:04:58.750  -->  00:05:04.590
just doing tab there to get that fill out or the autocomplete.

68

00:05:04.620  -->  00:05:06.090
And if I run this I get.

69

00:05:06.090  -->  00:05:07.650
Hello world.

70

00:05:07.650  -->  00:05:10.370
So I removed both the front and the rear.

71

00:05:10.710  -->  00:05:19.650
Let's go ahead and check the size now it's zero which means if I call is empty I should get a true boolean

72

00:05:19.660  -->  00:05:20.170
.

73

00:05:20.670  -->  00:05:21.360
All right.

74

00:05:21.360  -->  00:05:26.610
That's it for the deck so you can kind of see how this was a mix between the stack and the queue classes

75

00:05:26.940  -->  00:05:34.770
especially since the adding front and rear and the removal front and rear methods looked really similar

76

00:05:35.050  -->  00:05:39.080
to almost like a combination of both stacks and Qs.

77

00:05:39.150  -->  00:05:43.800
Again the main thing to be aware of is that you're gonna have to be careful as far as keeping these

78

00:05:43.800  -->  00:05:50.850
in order if you decide to use your own deck creation especially in an interview setting where you may

79

00:05:50.850  -->  00:05:57.180
be asked tricky questions on adding and removing items to really test your understanding of a deck.

80

00:05:57.730  -->  00:05:58.450
OK.

81

00:05:58.950  -->  00:06:01.050
That's it for the lectures.

82

00:06:01.050  -->  00:06:07.050
Up next our the interview questions of the course so I'll see you at the next lecture.

83

00:06:07.050  -->  00:06:08.200
And thank you everyone.
