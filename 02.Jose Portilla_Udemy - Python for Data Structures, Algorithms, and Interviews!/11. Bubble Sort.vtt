WEBVTT
1

00:00:01.800  -->  00:00:07.830
Hello everyone and welcome to the lecture on bubble sort and the actual learn how the bubble sort algorithm

2

00:00:07.890  -->  00:00:08.480
works.

3

00:00:08.520  -->  00:00:14.800
And we'll also see some paralyzation of it after this lecture will implement bubble sort in Python.

4

00:00:15.000  -->  00:00:16.470
So it's getting to get started.

5

00:00:16.920  -->  00:00:20.980
So as I mentioned we'll have an explanation of visualization and afterwards in implementation.

6

00:00:21.020  -->  00:00:22.700
All on bubble sort.

7

00:00:23.460  -->  00:00:25.050
So the bubble sort.

8

00:00:25.050  -->  00:00:28.450
How it works is it makes multiple passes through that list.

9

00:00:28.560  -->  00:00:32.780
It then compares adjacent items and exchanges those that are out of order.

10

00:00:32.970  -->  00:00:38.040
So each pass through the list places the next largest value in its proper place.

11

00:00:38.040  -->  00:00:41.580
And in essence each item bubbles up to the location where it belongs.

12

00:00:41.580  -->  00:00:43.800
That's how this algorithm gets its name.

13

00:00:44.310  -->  00:00:48.800
So let's go ahead and see a quick figure that explains this.

14

00:00:48.930  -->  00:00:54.170
So here we're looking at is just the drawing of a first pass of a bubble sort.

15

00:00:54.450  -->  00:00:59.640
So the shaded items and you can see him here kind of along at the Agnel are the ones being compared

16

00:00:59.640  -->  00:01:01.540
to see if they're out of order.

17

00:01:01.620  -->  00:01:04.380
So if we have a list of items then there's going to be.

18

00:01:04.410  -->  00:01:09.240
And minus one pairs of items that need to be compared on the first pass.

19

00:01:09.450  -->  00:01:15.180
And it is important to know that once the largest value in the list is part of a pair it will continually

20

00:01:15.180  -->  00:01:18.090
be moved along until the pass is complete.

21

00:01:18.720  -->  00:01:24.180
So we can take a look here and see that in comparing 54 versus 26.

22

00:01:24.200  -->  00:01:27.270
There's an exchange it's 54 has greater than 26.

23

00:01:27.300  -->  00:01:33.600
Now we move on to the next pier 54 versus 93 no exchange 93 is bigger than 54.

24

00:01:33.660  -->  00:01:36.660
We keep going down and doing the exchanges as needed.

25

00:01:36.660  -->  00:01:39.960
When we compare the two elements to check which one is greater than the other.

26

00:01:39.960  -->  00:01:41.210
And then we do a swap.

27

00:01:41.550  -->  00:01:46.980
So you can see certain elements are kind of bubbling to the top if they happen to be greater than the

28

00:01:46.980  -->  00:01:50.610
other element that's being compared to.

29

00:01:50.830  -->  00:01:57.700
So eventually 93 is in place the elements number 93 is in place after the first pass.

30

00:01:57.750  -->  00:02:06.630
So at the start of the second pass the largest value is now in place there are any minus 1 items left

31

00:02:06.630  -->  00:02:07.380
to sort.

32

00:02:07.380  -->  00:02:13.840
Meaning that there will be a minus 2 pairs since each pass places the next largest value in place.

33

00:02:13.980  -->  00:02:18.220
The total number of passes necessary will be and minus one.

34

00:02:18.510  -->  00:02:23.430
Then after completing the end of minus one passes the smallest item must be in the correct position

35

00:02:23.730  -->  00:02:26.430
with no further processing required.

36

00:02:26.430  -->  00:02:27.180
All right.

37

00:02:27.480  -->  00:02:32.360
So we're going to do now is go ahead and check out some visualisations.

38

00:02:32.640  -->  00:02:34.850
So let's go ahead and jump to the notebook.

39

00:02:34.890  -->  00:02:37.800
Were there some useful links for you to check out.

40

00:02:38.910  -->  00:02:44.500
So if you go to the sorting and searching folder here I'm on and be viewer and you are the Python the

41

00:02:44.520  -->  00:02:49.680
or under the Python for algorithms data structures in interviews there's a sorting and searching folder

42

00:02:49.970  -->  00:02:52.920
and you can click on implementation of bubble sort.

43

00:02:53.010  -->  00:02:57.760
Right here they'll take you to this notebook which also has a quick explanation.

44

00:02:57.780  -->  00:03:02.610
But more importantly it has resources for review and an implementation that we're going to be looking

45

00:03:02.610  -->  00:03:04.720
at in the next lecture.

46

00:03:05.280  -->  00:03:08.340
But if you click on each of these resources you'll get the following.

47

00:03:08.340  -->  00:03:10.280
You'll get a link to Wikipedia.

48

00:03:10.280  -->  00:03:18.540
And Wikipedia has pretty nice resources wups for learning about the various sorting algorithms and it

49

00:03:18.540  -->  00:03:23.370
also has little animations here free to check out performance information.

50

00:03:23.370  -->  00:03:28.740
So I encourage you to check those out or look at the big cheat sheet from the Big O section of the Course

51

00:03:29.730  -->  00:03:30.780
has an explanation.

52

00:03:30.780  -->  00:03:33.140
Step by step examples she can see here.

53

00:03:33.180  -->  00:03:35.950
A first pass example some are taught we just saw.

54

00:03:36.810  -->  00:03:39.850
And then it also has pseudo code implementation.

55

00:03:39.870  -->  00:03:44.350
The second link that you're going to see is from a Web site called visual algo dot net.

56

00:03:44.670  -->  00:03:49.140
This is really one of the key resources for you to learn sorting really well.

57

00:03:49.290  -->  00:03:52.510
So what it does is it has a list of sorting algorithms.

58

00:03:52.530  -->  00:03:58.230
It also visualizes other algorithms which will get to later but it's really useful for visualizing sorting

59

00:03:58.230  -->  00:03:59.640
algorithms.

60

00:03:59.640  -->  00:04:04.470
So you can go in and click that link visual algo dot net slash sorting they'll take you to a page that

61

00:04:04.470  -->  00:04:10.380
looks like this you'll get a little walk through it first and click next here you can do bubbles select

62

00:04:10.440  -->  00:04:13.670
insert merge quick quick count and read x.

63

00:04:13.680  -->  00:04:17.320
Sorting algorithms select the 20 you want to do.

64

00:04:17.330  -->  00:04:22.230
And you can either create your own new list or you can define or let the computer generate a random

65

00:04:22.230  -->  00:04:28.860
list and then to sort the elements you click sorts and then go and then you'll view the visualization

66

00:04:28.860  -->  00:04:30.680
here.

67

00:04:31.080  -->  00:04:34.980
And what's really nice about this and this is probably the best part is that as the action is being

68

00:04:34.980  -->  00:04:41.010
carried out each steps described here in this little status panel and you can follow some pseudo code

69

00:04:41.010  -->  00:04:46.700
here which traces the algorithm and the pseudocode looks really similar to what Python does.

70

00:04:47.070  -->  00:04:51.920
And you can control the animation with the player controls here at the bottom.

71

00:04:51.980  -->  00:05:00.590
All right so just to show you a quick run through the click here and click sort and click go.

72

00:05:02.310  -->  00:05:07.290
And you'll notice it didn't run and that's because up here you have to click exploration mode.

73

00:05:07.290  -->  00:05:08.330
So I was on tutorial mode.

74

00:05:08.340  -->  00:05:16.290
Good unclick exploration mode then click go and you'll start to see the swaps taking place and you can

75

00:05:16.290  -->  00:05:20.190
control the speed here or go back a step rewind etc..

76

00:05:20.520  -->  00:05:24.150
So you have a status and it's going through the pseudo code here.

77

00:05:24.150  -->  00:05:25.480
So that's really useful.

78

00:05:25.800  -->  00:05:28.530
So I really encourage you to make the most of this resource.

79

00:05:28.560  -->  00:05:33.210
This is probably the best way to learn them if you're a visual learner especially for sorting algorithms

80

00:05:33.220  -->  00:05:33.280
.

81

00:05:33.300  -->  00:05:38.700
Really the best way is to watch the animation a couple times really learn it well understand what's

82

00:05:38.700  -->  00:05:42.360
happening and then implement the code yourself.

83

00:05:42.360  -->  00:05:42.930
OK.

84

00:05:43.260  -->  00:05:46.870
So I encourage you to check out this visual algo that net resource.

85

00:05:46.950  -->  00:05:54.900
We're going to do now is paused this and check out the other links in the other one that's on that list

86

00:05:54.930  -->  00:05:59.720
is W.W. that sorting dash algorithms dot com slash bubble soar.

87

00:05:59.790  -->  00:06:04.400
It has all sorting algorithms and all kinds of initial conditions here.

88

00:06:04.490  -->  00:06:10.510
It has an algorithm for you to follow basic pseudo code has the properties.

89

00:06:11.070  -->  00:06:11.660
What kind of big.

90

00:06:11.670  -->  00:06:13.800
Oh it has little discussion on it.

91

00:06:13.980  -->  00:06:21.390
And for examples on different types the list so has random list nearly surrealists river reverse list

92

00:06:21.480  -->  00:06:23.300
and a few unique lists.

93

00:06:23.340  -->  00:06:28.410
So if you click on them they'll start going through the animation of being sorted.

94

00:06:28.410  -->  00:06:34.140
So you can actually click on all these and you'll see how the algorithm is taking place visually.

95

00:06:34.850  -->  00:06:35.980
OK.

96

00:06:36.160  -->  00:06:44.640
Finally we have this bubble animation here using javascript and this is the one I'm going to use just

97

00:06:44.640  -->  00:06:50.360
to quickly go over again what we're actually doing or performing a bubble sort.

98

00:06:51.120  -->  00:06:56.910
So keep in mind that what we're going to do on the first pass is keep comparing and doing what are known

99

00:06:56.910  -->  00:06:59.740
as sometimes swaps this exchange operation.

100

00:07:00.120  -->  00:07:06.670
So between six and eights it's already bigger so we're not going to do a swap between 8 and 1 here.

101

00:07:06.690  -->  00:07:10.210
We will do a swap 18:15 no swap.

102

00:07:10.230  -->  00:07:12.600
So now we're comparing 15 and nine.

103

00:07:12.720  -->  00:07:15.960
This is going to be a swap 15 and 20.

104

00:07:16.150  -->  00:07:16.450
No.

105

00:07:16.560  -->  00:07:18.920
No exchange here so we move on to 20.

106

00:07:19.230  -->  00:07:22.780
So notice basically this in-between line is what we're moving down.

107

00:07:22.780  -->  00:07:26.570
So we're going to be moving down this whole list on this first pass here.

108

00:07:27.060  -->  00:07:34.050
And you can kind of go faster on your own or hold it down and notice the patterns here how eventually

109

00:07:34.740  -->  00:07:39.830
towards the end of the list you're getting the sorted items so they're bubbling up to the top here.

110

00:07:39.960  -->  00:07:43.620
And if you just hold this down you can see it in a little faster.

111

00:07:43.620  -->  00:07:44.240
Okay.

112

00:07:44.610  -->  00:07:49.470
So go in and check out those visualisations So you really understand what's actually happening here

113

00:07:49.480  -->  00:07:49.690
.

114

00:07:49.920  -->  00:07:56.040
But the basic idea of bubble sort is you're bubbling up throughout the list and doing exchanges along

115

00:07:56.040  -->  00:08:01.800
the way so that eventually you've sort of the entire list in the next lecture to make this really clear

116

00:08:01.800  -->  00:08:01.840
.

117

00:08:01.860  -->  00:08:05.730
We're going to implement our own bubble sorting algorithm in Python.

118

00:08:05.730  -->  00:08:07.680
All right guys I'll see you at the next lecture
