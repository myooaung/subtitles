1

00:00:01,350  -->  00:00:05,150
Hello everyone and welcome to the Big O example's lecture.

2

00:00:05,550  -->  00:00:11,880
So we're going to be doing here is showing you various examples of Big-O notation and what those algorithms

3

00:00:11,880  -->  00:00:13,950
and functions will look like.

4

00:00:13,950  -->  00:00:17,160
So at the end of this there's a reading assignment.

5

00:00:17,160  -->  00:00:21,870
So here have opened the Jupiter notebook and if I scroll down here you'll see there's a homework assignment

6

00:00:21,870  -->  00:00:21,900
.

7

00:00:21,900  -->  00:00:26,970
So make sure that after we go over this video and once you've gone through the Jupiter notebook you

8

00:00:27,000  -->  00:00:33,900
check out these two sources which are additional explanations of Big-O notation and various big-O examples

9

00:00:33,910  -->  00:00:34,290
.

10

00:00:34,490  -->  00:00:37,750
There are great explanations so go ahead and check them out.

11

00:00:38,390  -->  00:00:39,130
OK.

12

00:00:39,390  -->  00:00:42,510
So let's go and start off with our own examples.

13

00:00:42,510  -->  00:00:49,350
So we're going to do is start with some simple examples of various big functions so the first one we're

14

00:00:49,350  -->  00:00:52,000
going to explore is the constant.

15

00:00:52,020  -->  00:01:02,850
So 0 1 so we're going to make a function here and I'm going to call it func underscore constants and

16

00:01:02,850  -->  00:01:09,150
it's going to take in a list of values and what are going to do it's going to print the first item in

17

00:01:09,150  -->  00:01:09,870
a list of values.

18

00:01:09,870  -->  00:01:19,890
So it takes in a list called values and it says prints values it takes that first index and let's go

19

00:01:19,890  -->  00:01:22,410
ahead and run this.

20

00:01:22,410  -->  00:01:31,020
If I say func constant remember just doing tab for autocomplete I can then go ahead and pass in a list

21

00:01:31,020  -->  00:01:31,450
.

22

00:01:31,560  -->  00:01:36,210
Let's go ahead and just say ls t and assign ls t to be the list.

23

00:01:36,330  -->  00:01:38,320
One two three.

24

00:01:39,090  -->  00:01:40,840
OK so I've run that cell.

25

00:01:40,840  -->  00:01:43,360
I'll see what happens here.

26

00:01:43,530  -->  00:01:48,980
I get a result of Sumant of one here.

27

00:01:49,440  -->  00:01:56,070
And if you notice I'll always get that result no matter how large that list is.

28

00:01:56,400  -->  00:02:03,150
So this function is constant because regardless of the list size the function is only ever going to

29

00:02:03,150  -->  00:02:05,450
take one constant step step size.

30

00:02:05,460  -->  00:02:06,720
In this case 1.

31

00:02:06,960  -->  00:02:10,230
So it's just printing the first value from a list.

32

00:02:10,230  -->  00:02:17,190
So we can see here that an input list of 100 values will still just print one item even FS 10 velt 10000

33

00:02:17,250  -->  00:02:17,740
values.

34

00:02:17,740  -->  00:02:19,830
It's still going to print one item.

35

00:02:20,100  -->  00:02:25,230
So a list of end values will still just print one item.

36

00:02:25,230  -->  00:02:27,210
Which is why it is a constant.

37

00:02:27,420  -->  00:02:28,590
BIG NO.

38

00:02:29,160  -->  00:02:31,530
So let's move on to linear.

39

00:02:32,310  -->  00:02:40,600
So I'll make a function here called func underscore lin will take in a list object.

40

00:02:40,710  -->  00:02:42,670
It's called elist T in this case.

41

00:02:42,810  -->  00:02:50,020
And this will take in a list and print out all the values so it's going to say for Valin ls t.

42

00:02:50,190  -->  00:02:52,690
Print them all.

43

00:02:53,310  -->  00:02:54,810
And if we go ahead and

44

00:02:57,540  -->  00:03:04,750
call that on that list we just made note how we get every single value printed.

45

00:03:05,070  -->  00:03:09,840
So this function runs in O N or linear time.

46

00:03:09,840  -->  00:03:16,260
So this means that the number of operations that are going to take place here the number of print statements

47

00:03:16,560  -->  00:03:19,170
is going to scale linearly with N.

48

00:03:19,260  -->  00:03:23,130
So if we have an input list of 100 values it's going to print's 100 times.

49

00:03:23,130  -->  00:03:29,520
We have a list of 10000 values it's going to print 10000 times and a list of end values will print and

50

00:03:29,700  -->  00:03:30,600
times.

51

00:03:30,630  -->  00:03:33,460
So that's why this is a linear example.

52

00:03:33,480  -->  00:03:33,740
All right.

53

00:03:33,750  -->  00:03:38,380
Finally let's go ahead and check out a quadratic example.

54

00:03:38,790  -->  00:03:48,540
So let's say func underscore quad and we'll have taken ls t and it's going to print pairs for every

55

00:03:48,540  -->  00:03:49,480
item in a list.

56

00:03:49,500  -->  00:04:02,160
And what I mean by that is going to say for item 1 in that list and then for item 2 in that list go

57

00:04:02,160  -->  00:04:08,560
ahead and prints item underscore one item underscore to.

58

00:04:09,470  -->  00:04:10,230
OK.

59

00:04:10,500  -->  00:04:13,600
So let's go ahead and see what this looks like.

60

00:04:13,680  -->  00:04:19,470
Reassign the list to just be 1 to 3 and then I'm going to call that function on that list

61

00:04:24,060  -->  00:04:26,100
and let's see what we get here.

62

00:04:26,100  -->  00:04:28,290
All right so what happens.

63

00:04:28,560  -->  00:04:33,390
So no we have two loops one nested inside the other.

64

00:04:33,390  -->  00:04:40,380
This means that for a list of items we will have to perform an operations for every item in that list

65

00:04:40,380  -->  00:04:40,800
.

66

00:04:40,800  -->  00:04:46,080
So that means in total we are poor form and times and actions here.

67

00:04:46,110  -->  00:04:48,990
We're going to print this and times and times.

68

00:04:48,990  -->  00:04:55,140
So that's going to be end times and or end to the power of two and squared which is quite dramatic.

69

00:04:55,380  -->  00:04:59,940
So a list of 10 items is going to have tens of the power of two or a hundred operations there.

70

00:05:00,360  -->  00:05:04,920
So you can see how dangerous this can be for very large inputs and that's why big OE is so important

71

00:05:04,920  -->  00:05:08,760
to be aware of and it's such a crucial part of the interview process.

72

00:05:09,750  -->  00:05:14,100
So now we're going to move on to a section of calculating the scale of big-O.

73

00:05:14,210  -->  00:05:20,720
So we want to discuss now how insignificant terms will drop out of Big O notation when it comes to Big

74

00:05:20,720  -->  00:05:23,850
O notation we only care about the most significant terms.

75

00:05:23,870  -->  00:05:26,090
So remember as the input grows larger.

76

00:05:26,150  -->  00:05:28,560
Only the fastest growing terms will matter.

77

00:05:28,970  -->  00:05:33,680
And if you've taken a calculus class before this is going to remind you of taking limits towards infinity

78

00:05:33,680  -->  00:05:34,360
.

79

00:05:34,430  -->  00:05:39,290
So let's go ahead and see a quick example of how to drop constants are going to make a function called

80

00:05:39,530  -->  00:05:43,740
Prince underscore once takes on a list.

81

00:05:43,740  -->  00:05:44,710
Ls t.

82

00:05:45,020  -->  00:05:47,060
And it prints all the items just once.

83

00:05:47,090  -->  00:05:53,690
It's just going to say for thou enlistee prints the vowel.

84

00:05:54,750  -->  00:06:01,820
And if I call print's once on that list I just get one into three.

85

00:06:01,820  -->  00:06:05,870
So what is the big O of this function.

86

00:06:05,870  -->  00:06:08,360
Go ahead and take a moment to think about it.

87

00:06:08,480  -->  00:06:11,630
All right hopefully you saw that it's just 0 and it's linear.

88

00:06:11,810  -->  00:06:16,570
You're going to do an action end times for the size of the list.

89

00:06:16,570  -->  00:06:18,630
Now I'm going to show you a different example.

90

00:06:19,070  -->  00:06:24,300
I want to call this function prints underscore too.

91

00:06:26,360  -->  00:06:33,060
And I'm going to say for vowel in Alice T.

92

00:06:33,100  -->  00:06:34,550
PRINCEVILLE.

93

00:06:35,270  -->  00:06:39,650
And then when I'm going to do it again I'm going to say for vowel in ls t

94

00:06:42,290  -->  00:06:44,910
print vowel.

95

00:06:45,050  -->  00:06:51,150
So now let's call this function prints underscore to you know say get an output.

96

00:06:51,230  -->  00:06:52,310
One two three.

97

00:06:52,370  -->  00:06:54,590
One two three.

98

00:06:54,590  -->  00:07:03,030
So the question here is what is the big O her performance of this print underscore to function.

99

00:07:03,050  -->  00:07:05,690
Notice we are printing it twice.

100

00:07:05,900  -->  00:07:07,480
But what's actually happening here.

101

00:07:07,640  -->  00:07:11,390
It's not going to be square because it's still linear.

102

00:07:11,660  -->  00:07:20,810
It's going to be N plus n so two times then and this is where we get to terms with insignificant or

103

00:07:20,810  -->  00:07:24,170
significant constants.

104

00:07:24,170  -->  00:07:30,750
So we can see here that the first one actually made with prints on the order of O N and the second one

105

00:07:30,750  -->  00:07:33,190
will print on the order of two times then.

106

00:07:33,290  -->  00:07:34,850
So it's going to do it twice.

107

00:07:34,880  -->  00:07:39,560
However if and is going to infinity the constant can be dropped.

108

00:07:39,620  -->  00:07:41,870
And that's an important thing to remember.

109

00:07:41,870  -->  00:07:47,210
You're going to be dropping most constants and only focusing on the terms that grow the fastest and

110

00:07:47,210  -->  00:07:48,930
have the largest effect.

111

00:07:49,190  -->  00:07:55,620
So in this case both of these are order n they're big O N.

112

00:07:55,850  -->  00:07:56,870
So this is

113

00:08:00,610  -->  00:08:07,810
0 then and this is also 0 then.

114

00:08:07,870  -->  00:08:13,010
Now as I mentioned before in reality it's really just two times.

115

00:08:13,010  -->  00:08:19,190
And but we're going to drop the constants there since two times infinity is going to basically be the

116

00:08:19,190  -->  00:08:21,280
same as infinity.

117

00:08:21,360  -->  00:08:24,830
OK so let's go to see a more complex example of this.

118

00:08:24,830  -->  00:08:31,370
Of dropping these eggs in significant terms and these insignificant constants I'm going to make a function

119

00:08:31,370  -->  00:08:38,840
called comp and it's going to be soon to be three parts to it what's first going to do it's going to

120

00:08:38,840  -->  00:08:46,250
print the first item in the list once done with that it's going to print the first half of the list

121

00:08:46,250  -->  00:08:47,980
.

122

00:08:48,020  -->  00:08:56,390
So the way I'm going to do that is I'm going to say I'm going to call a midpoints equal to the length

123

00:08:56,390  -->  00:09:06,560
of that list divided by two and then when I say for Val and list I'm going to slice it all the way to

124

00:09:06,560  -->  00:09:08,950
the midpoints index.

125

00:09:08,960  -->  00:09:19,360
I'm going to save Prince Val and then going to say for x in range tens is going to be the third operation

126

00:09:19,360  -->  00:09:30,670
is going to print a string 10 times it's going to say Prince let's just say hello world.

127

00:09:32,120  -->  00:09:32,850
OK.

128

00:09:33,110  -->  00:09:34,900
So let's go ahead and make a list.

129

00:09:34,940  -->  00:09:43,430
I'm going to say one two three four five and then call or pass that list into the function and I get

130

00:09:43,430  -->  00:09:48,320
1 1 2 and then hello world hello world hello world.

131

00:09:48,710  -->  00:09:54,530
Let's go ahead and make this list a little larger so the effect of that midpoint is a little more obvious

132

00:09:54,530  -->  00:09:56,470
.

133

00:09:56,480  -->  00:09:56,840
All right.

134

00:09:56,870  -->  00:10:00,440
So one and then one two three four five and then ten.

135

00:10:00,440  -->  00:10:01,570
Hello world.

136

00:10:01,940  -->  00:10:05,060
So what is the big O of this function.

137

00:10:05,060  -->  00:10:07,120
And the algorithm within it.

138

00:10:07,160  -->  00:10:10,000
So let's break down the operations here.

139

00:10:10,070  -->  00:10:15,470
Well notice the first operation this prince the first item is 0 1.

140

00:10:16,160  -->  00:10:27,390
So I'll comment that in here 0 1 OK now what about this middle operation which I'm separating with some

141

00:10:27,390  -->  00:10:29,930
comments here.

142

00:10:30,370  -->  00:10:36,250
So if you notice here we're going to go all the way to end divided by two.

143

00:10:36,730  -->  00:10:42,920
So in this case this is order of 1 1/2 times and which is the same as an.

144

00:10:42,970  -->  00:10:45,420
Divided by two.

145

00:10:45,420  -->  00:10:55,530
Now keep in mind that this is the same as order of basically 1 1/2 times.

146

00:10:55,540  -->  00:10:57,950
And so just keep that in mind.

147

00:10:58,240  -->  00:10:59,430
This is still a constant.

148

00:10:59,430  -->  00:11:03,780
So and the vibe 2 is the same as one halftimes and that's going to be important because we're going

149

00:11:03,780  -->  00:11:08,530
to keep the idea that as it gets larger these constants will go away.

150

00:11:09,060  -->  00:11:13,080
And then this last one it performs the action 10 times.

151

00:11:13,210  -->  00:11:14,640
So it's a constant.

152

00:11:14,760  -->  00:11:20,590
So it's going to be constant officially 10 there order 10.

153

00:11:20,620  -->  00:11:27,190
So a first part order one second part is order halftimes then and third parties order 10.

154

00:11:27,300  -->  00:11:32,400
So in total what we can do is add all of these up and you may need to do this in an interview setting

155

00:11:33,750  -->  00:11:38,590
is add up the different components in order to figure out the entire Big Show.

156

00:11:39,000  -->  00:11:42,340
And in this case we get something that looks like this.

157

00:11:42,660  -->  00:11:52,920
We have an order or big show and let's go ahead and make this a markdown so.

158

00:11:57,270  -->  00:11:59,910
So right now that's the order of that function.

159

00:11:59,940  -->  00:12:03,120
One plus and divided by two plus 10.

160

00:12:03,490  -->  00:12:08,700
But now we can actually simplify this so we can see that it grows arbitrarily large.

161

00:12:08,700  -->  00:12:15,000
Remember that was part of our definition of big-O as it grows larger and larger.

162

00:12:15,120  -->  00:12:19,700
This one term and this 10 term becomes insignificant.

163

00:12:19,990  -->  00:12:25,390
And then this one half or that divided by two term multiplied against N as it grows larger and towards

164

00:12:25,380  -->  00:12:28,730
infinity is really not going to have much effect.

165

00:12:28,750  -->  00:12:41,530
So that means that this function is actually can be simplified down to be of order or Big O N.

166

00:12:42,420  -->  00:12:42,740
All right.

167

00:12:42,750  -->  00:12:48,390
So let's just do a brief overview of what we did there in order to figure out the big-O this entire

168

00:12:48,510  -->  00:12:52,860
complicated Well semi complicated equation or a function.

169

00:12:53,080  -->  00:12:55,350
We separate out the parts.

170

00:12:55,410  -->  00:12:56,190
Right.

171

00:12:56,470  -->  00:13:05,410
Then we put them all together and then we simplified it as and grows arbitrarily large and then finally

172

00:13:05,400  -->  00:13:10,920
what I want to discuss is worst case versus best case so many times where we are only concerned with

173

00:13:10,920  -->  00:13:16,680
the worst possible case of an algorithm but in an interview setting its points keep in mind the worst

174

00:13:16,680  -->  00:13:21,900
case and best case scenarios may be completely different for different big-O times.

175

00:13:21,880  -->  00:13:23,580
So let's see an example.

176

00:13:23,620  -->  00:13:25,680
Consider the following function.

177

00:13:25,950  -->  00:13:29,080
I'm going to make a function called matcher.

178

00:13:29,470  -->  00:13:36,680
It takes in a list and it takes in some item you want to match and what it does is given a list.

179

00:13:36,690  -->  00:13:40,900
It returns a boolean indicating if a match item is in the list.

180

00:13:40,890  -->  00:13:58,000
So I'm going to save for item in list if item is equal to match return true if no true is return then

181

00:13:58,000  -->  00:14:00,820
the function will return false.

182

00:14:00,830  -->  00:14:03,880
OK so remember I have my list here.

183

00:14:03,900  -->  00:14:11,700
It's one through 10 in difficult matcher on it and pass in a list and then say I want one.

184

00:14:12,120  -->  00:14:13,590
It's going to return true.

185

00:14:14,010  -->  00:14:18,290
So one is in that list and we got a match.

186

00:14:18,300  -->  00:14:26,550
Now if I call matcher list and I say a number that's not in that list such as 11.

187

00:14:26,830  -->  00:14:31,380
Notice I get a false here now when we're concerned about big.

188

00:14:31,420  -->  00:14:35,340
Oh you'll notice that we have a best case here.

189

00:14:35,740  -->  00:14:44,160
So the best case is that the match occurs in the first item of that list and that means that in this

190

00:14:44,160  -->  00:14:50,130
particular Best case you actually have a constants runtime here.

191

00:14:50,160  -->  00:14:52,590
The best case is actually 0 1 constant.

192

00:14:52,770  -->  00:14:59,170
Since the matches found at the first element in the case were there is no match every single element

193

00:14:59,160  -->  00:15:02,440
has to be checked which is going to be any elements.

194

00:15:02,430  -->  00:15:06,610
So the worst case is o n.

195

00:15:07,200  -->  00:15:09,250
Now in an interview setting.

196

00:15:09,250  -->  00:15:14,670
You're pretty much always dealing with either worst case or sometimes average case and we'll discuss

197

00:15:14,670  -->  00:15:17,600
that in further detail for different data structures.

198

00:15:17,750  -->  00:15:20,710
You can consider it if someone's asking you what is the big O.

199

00:15:20,830  -->  00:15:29,190
Consider the worst case but make sure that you make a point of considering best cases as well.

200

00:15:29,190  -->  00:15:33,570
Now finally I'm going to introduce the topic of space complexity.

201

00:15:33,580  -->  00:15:37,720
Many times you're also concerned of how much memory or space an algorithm uses.

202

00:15:37,900  -->  00:15:43,110
So right now we've been talking about performance or time complexity but we also want to keep in mind

203

00:15:43,120  -->  00:15:49,870
space complexity and I'm going to show this through just two simple examples so I'm going to make a

204

00:15:49,870  -->  00:16:01,890
function here called Def create list going to take in an and wanting and a half years make a variable

205

00:16:01,890  -->  00:16:08,050
called new list which is just an empty list and then say for num in range and

206

00:16:10,710  -->  00:16:23,650
you underscore list appends a string called new and then just return new list.

207

00:16:24,490  -->  00:16:37,770
OK so if I say creates list five here you have 1 2 3 4 5 news there so no the size of the new list object

208

00:16:37,770  -->  00:16:37,860
.

209

00:16:37,870  -->  00:16:41,280
This object scales with the input of n.

210

00:16:41,430  -->  00:16:44,480
So right now I'm just talking about space or memory.

211

00:16:44,590  -->  00:16:52,680
So in this case this shows that it's a big O of just n or linear in terms in regards of space complexity

212

00:16:52,680  -->  00:16:53,070
.

213

00:16:53,120  -->  00:16:57,250
We'll have to take up an items in memory.

214

00:16:57,550  -->  00:16:58,430
All right.

215

00:16:59,000  -->  00:17:04,480
So another example I want to show you is a function a color printer

216

00:17:10,710  -->  00:17:13,540
and it's going to print hello world a number of times.

217

00:17:13,570  -->  00:17:20,980
That's going to save for x in range 10.

218

00:17:21,280  -->  00:17:26,140
Go ahead and prints hello world.

219

00:17:26,350  -->  00:17:32,010
So if I call a printer and I pass and then it prints hello world 10 times.

220

00:17:32,350  -->  00:17:34,040
So what's the big O.

221

00:17:34,360  -->  00:17:36,730
For the time complexity here.

222

00:17:37,140  -->  00:17:39,770
Well it has to do this end times.

223

00:17:39,930  -->  00:17:41,320
So has n o n.

224

00:17:41,320  -->  00:17:46,110
For time complexity over time complexity this is linear.

225

00:17:46,120  -->  00:17:48,390
But what about space complexity.

226

00:17:48,390  -->  00:17:52,560
How much does this algorithm actually have to attribute to memory.

227

00:17:52,570  -->  00:17:56,100
If you notice it's printing the same thing over and over again.

228

00:17:56,220  -->  00:18:01,970
It doesn't actually have to save and items it just has to save one the hello world string.

229

00:18:01,990  -->  00:18:08,910
So as far as space complexity it's constant has 0 1 so that's an important difference to make here.

230

00:18:09,390  -->  00:18:14,490
In this case we have space.

231

00:18:14,490  -->  00:18:18,600
Complexity is a constant one.

232

00:18:18,610  -->  00:18:25,480
Since we're only having a save in memory this one item does print hello world string but we're doing

233

00:18:25,470  -->  00:18:27,480
it as far as time complexity

234

00:18:31,700  -->  00:18:33,270
order n..

235

00:18:34,180  -->  00:18:40,510
OK so that's just something to keep in mind that there may be tradeoffs between time complex and space

236

00:18:40,510  -->  00:18:41,650
complexity.

237

00:18:41,830  -->  00:18:47,670
Usually in interviews you'll be concerned with time complexity but depending on the interview question

238

00:18:47,670  -->  00:18:54,990
or case or who your interviewer is you may be asked about both space and time complexity so it's important

239

00:18:54,990  -->  00:19:00,450
to keep them both in mind and know the various tradeoffs in certain situations.

240

00:19:00,450  -->  00:19:01,100
All right.

241

00:19:01,360  -->  00:19:06,120
So as I mentioned before at the end of this lecture there's a homework assignment.

242

00:19:06,300  -->  00:19:12,580
So make sure you go ahead and read those two explanations on more big denotations and more big-O examples

243

00:19:12,580  -->  00:19:13,280
.

244

00:19:13,380  -->  00:19:13,690
All right.

245

00:19:13,720  -->  00:19:19,420
Just to review what we did here we went over various examples of different big O notations and big O

246

00:19:19,440  -->  00:19:21,070
common functions.

247

00:19:21,150  -->  00:19:21,680
All right.

248

00:19:22,030  -->  00:19:25,200
Thank you very much and I'll see you at the next lecture.
