1

00:00:01,620  -->  00:00:07,580
Hello everyone and welcome to the implementation of a hash table lecture and this lecture will be implementing

2

00:00:07,580  -->  00:00:12,390
our own hash table to complete her understanding of hash tables and hash function.

3

00:00:12,540  -->  00:00:17,250
Make sure to review the video lecture before this to fully understand this implementation.

4

00:00:17,250  -->  00:00:22,660
Also keep in mind that Python already has a built in dictionary object that serves as a hash table.

5

00:00:22,950  -->  00:00:26,450
You would never actually need to implement your own hash table in Python.

6

00:00:27,480  -->  00:00:30,480
So let's talk about math.

7

00:00:30,510  -->  00:00:36,240
The idea of a dictionary uses a hash table to get and retrieve items using keys is often referred to

8

00:00:36,240  -->  00:00:41,130
as mapping in our implementation will have the following methods.

9

00:00:41,130  -->  00:00:45,170
So we'll have our hash table class and it's going to create a new empty map.

10

00:00:45,210  -->  00:00:47,430
It returns an empty map collection.

11

00:00:47,730  -->  00:00:49,250
Then we'll have a method.

12

00:00:49,500  -->  00:00:54,160
We'll add a new key value pair to the map just like a default Python dictionary.

13

00:00:54,420  -->  00:00:58,630
If the keys are already in the map then it replaces the old value of the new value.

14

00:00:58,670  -->  00:01:04,630
Also have a get method given a key return the value stored in the map or not otherwise.

15

00:01:04,770  -->  00:01:11,280
Also have a DL which will delete the key value pair from the map using a statement of the form delete

16

00:01:11,280  -->  00:01:12,370
map.

17

00:01:12,750  -->  00:01:18,990
Also have Eliane which will return the number of key value pairs stored and will have in the map in

18

00:01:18,990  -->  00:01:19,740
return true.

19

00:01:19,790  -->  00:01:21,560
First statement of the form Keenum map.

20

00:01:21,780  -->  00:01:24,950
If the key is in the given if the given key is in the map calls.

21

00:01:25,010  -->  00:01:30,540
Otherwise it will explain that one a little more detail and we actually get to it.

22

00:01:30,810  -->  00:01:35,520
So you have your Jupiter note book here all the code that we're going to be going over is available

23

00:01:35,520  -->  00:01:36,460
for you here.

24

00:01:36,570  -->  00:01:39,750
Code class hash table and you can check it out yourself.

25

00:01:40,120  -->  00:01:44,580
No it's a lot of code but we're going to go through it and life code it out right now.

26

00:01:44,580  -->  00:01:47,310
So let's go ahead and get started.

27

00:01:47,310  -->  00:01:47,840
All right.

28

00:01:47,880  -->  00:01:56,690
I serve in your Jupiter notebook and I'm going to go ahead and create class hash table and it's going

29

00:01:56,690  -->  00:01:59,570
to be an object.

30

00:01:59,760  -->  00:02:01,970
And let's start by initializing some attributes.

31

00:02:02,030  -->  00:02:09,750
I say the F underscore underscore I-90 underscore underscore pasand self and the only thing I'm going

32

00:02:09,750  -->  00:02:14,820
to pass in for an attribute that we declare at first is just the size.

33

00:02:15,240  -->  00:02:20,190
I'll say softer size equal size.

34

00:02:20,190  -->  00:02:24,760
And then I'll create another attribute called slots.

35

00:02:24,870  -->  00:02:31,830
In this case we're just going to have to be equal to none times self-taught size where none is essentially

36

00:02:31,830  -->  00:02:34,670
an item or a list within Intel.

37

00:02:34,710  -->  00:02:37,180
Let me just show you real quick what I mean by that.

38

00:02:37,290  -->  00:02:40,540
So this is a list with a none item.

39

00:02:40,680  -->  00:02:46,500
So when we multiply it by self-taught size imagine we said Self that size is going to be 4 that it's

40

00:02:46,500  -->  00:02:50,910
going to give you a list with 4 nuns in it so that you look really familiar from the previous lecture

41

00:02:50,910  -->  00:02:51,000
.

42

00:02:51,000  -->  00:02:54,450
Member that the initial hash table we just had a list of nuns

43

00:02:57,240  -->  00:03:02,060
and then will say self-taught data siecle to none.

44

00:03:02,190  -->  00:03:05,600
Multiply by self-taught size.

45

00:03:07,630  -->  00:03:16,260
Ok first method were going to work on as put and put is going to take in self so we know referencing

46

00:03:16,920  -->  00:03:19,870
and then a key and the data.

47

00:03:20,730  -->  00:03:26,570
So no for right now we're only going to use integer keys just for ease of use of the hash function.

48

00:03:26,820  -->  00:03:30,570
All right so first thing or do you just get the hash value.

49

00:03:30,930  -->  00:03:44,990
So also a hash value is equal to self's hash function which going taken key and then the links cell

50

00:03:46,080  -->  00:03:47,620
slots.

51

00:03:47,760  -->  00:03:55,460
So we actually haven't developed the hash function yet but I'll go ahead and mark it off right now.

52

00:03:55,650  -->  00:04:06,900
Hash function and it's going to say self he and sys right now we'll just have it EZ pass.

53

00:04:06,900  -->  00:04:11,940
But this is essentially going to be the actual

54

00:04:14,610  -->  00:04:15,870
hash function.

55

00:04:15,870  -->  00:04:19,070
So we'll get to that once we're done putting in that method.

56

00:04:19,290  -->  00:04:23,730
But essentially it's going to be the remainder method that very first hash function we saw.

57

00:04:24,240  -->  00:04:34,170
OK so living along we're gonna do is after we get our hash value meaning we insert the key the number

58

00:04:34,260  -->  00:04:36,070
the size will get a hash value.

59

00:04:36,070  -->  00:04:39,360
Back then we'll check if the slots empty.

60

00:04:39,360  -->  00:04:52,380
So if self-study slots at the hash value is equal to none then we know it's empty so we can say self

61

00:04:53,650  -->  00:05:08,210
thought slots hash value is equal to the key and then self data at the hash value is equal to that data

62

00:05:08,210  -->  00:05:08,230
.

63

00:05:08,230  -->  00:05:09,840
We wanted to put here.

64

00:05:10,480  -->  00:05:11,070
All right.

65

00:05:11,440  -->  00:05:19,440
So that's the most basic situation we have where it's already done it's empty and your hash function

66

00:05:19,480  -->  00:05:24,360
lined up with an empty slot so you fill in the key and the data.

67

00:05:24,400  -->  00:05:30,010
Let's go ahead and actually fill out this hash function now will have it be the remainder method.

68

00:05:30,010  -->  00:05:42,080
So that means that schook going to return the key mod size.

69

00:05:42,100  -->  00:05:49,990
All right something to begin to know as we've discussed before if we have a collision case here where

70

00:05:50,050  -->  00:05:55,600
the hash value does not equal none will have to take that into account.

71

00:05:55,840  -->  00:06:02,460
In this case we'll need to basically create a rehash so finding next possible positions for that case

72

00:06:02,530  -->  00:06:09,990
go ahead and create a method called rehash.

73

00:06:10,020  -->  00:06:19,090
It'll take in the old hash value the size of the array and it's going to find the next possible position

74

00:06:19,120  -->  00:06:28,870
by just saying return the old hash plus one motard by the size so this is essentially just moving along

75

00:06:29,050  -->  00:06:31,470
trying to find the next empty slot.

76

00:06:32,080  -->  00:06:36,920
So another we have rehashed done we can continue to fill out our Put method.

77

00:06:37,000  -->  00:06:45,860
So if the slot is empty we fill it in with our key and data else.

78

00:06:45,880  -->  00:06:47,070
That's not the case.

79

00:06:47,080  -->  00:06:48,610
So the key already exists.

80

00:06:48,610  -->  00:07:01,870
We'll just replace the old value so we can say if self-taught slots hash value is already equal to the

81

00:07:01,870  -->  00:07:12,550
key meaning it's already in there they'll just say self-taught data at the hash value is equal to data

82

00:07:12,550  -->  00:07:15,790
.

83

00:07:15,940  -->  00:07:16,990
All right.

84

00:07:16,990  -->  00:07:20,380
So otherwise what we're going to do is try to find the next available slot.

85

00:07:20,380  -->  00:07:30,640
So I'm going to say else say next slots equals self-taught rehash

86

00:07:33,480  -->  00:07:41,890
hash value with the length of self-taught slots so that matches up to what a rehash function.

87

00:07:41,890  -->  00:07:48,340
Over here this method was taken so then we were going to try to get to the next slot.

88

00:07:48,550  -->  00:07:57,640
So we'll say while self-taught slots in this case we'll just call it next slot that variable we just

89

00:07:57,640  -->  00:08:02,200
made is not equal to none.

90

00:08:02,500  -->  00:08:13,810
And self-taught slots of the next slots does not actually equal the key.

91

00:08:13,810  -->  00:08:27,550
Well we can do is just say that the next slots is equal to self-taught rehash take in the next slots

92

00:08:30,160  -->  00:08:35,230
and the length of the current slots which is self-trust slots.

93

00:08:35,360  -->  00:08:38,660
OK so that's to get the next slot.

94

00:08:39,520  -->  00:08:41,290
And then we'll set the new key if none.

95

00:08:41,290  -->  00:08:56,320
So that means if self that slots to that list we're keeping track of slots next slots is equal to none

96

00:08:56,320  -->  00:08:57,200
.

97

00:08:57,280  -->  00:09:07,570
Then we just replace the values so say self-taught slots next slots equals key and then self-taught

98

00:09:07,570  -->  00:09:10,780
data at the next slot

99

00:09:14,200  -->  00:09:17,380
is equal to data.

100

00:09:17,380  -->  00:09:24,630
Otherwise we just replace the old I'll say else self-taught data.

101

00:09:25,180  -->  00:09:29,230
Next slot is equal to data.

102

00:09:29,230  -->  00:09:32,740
All right let's go ahead and zoom out a bit make sure we fully understand what's going on because that

103

00:09:32,730  -->  00:09:39,400
was quite a bit of information and quite a bit of coding.

104

00:09:39,460  -->  00:09:47,110
So here we have right now our entire push function and this supposed to be on a new line right here

105

00:09:47,130  -->  00:09:47,600
.

106

00:09:48,040  -->  00:09:49,090
OK.

107

00:09:49,600  -->  00:09:54,460
Let's go ahead and just rerun over what's going on and make sure it compares correctly to what we have

108

00:09:54,460  -->  00:09:58,420
here in our official jus Perrineau book.

109

00:09:58,420  -->  00:10:02,470
So first thing we're doing is just initializing our hash table.

110

00:10:02,470  -->  00:10:06,730
We put in a size and then we create slots and data.

111

00:10:06,730  -->  00:10:13,180
These are just two arrays of none with self-taught size and we're using just the Python list as we shoot

112

00:10:13,270  -->  00:10:23,400
showed earlier then we have a put method that's going to put in a piece of data to the correct key.

113

00:10:23,420  -->  00:10:25,970
So where do we actually put this data.

114

00:10:26,000  -->  00:10:29,480
We use the hash value which we got from the hash function.

115

00:10:29,600  -->  00:10:35,510
In this case for the hash function we just use the key and the length of self-taught slots the actual

116

00:10:35,510  -->  00:10:42,280
slots we specified earlier because we're using the remainder method over here.

117

00:10:43,040  -->  00:10:50,180
So after that we just say if a slot is empty or a hears of self-doubt slots hash value equals none meaning

118

00:10:50,180  -->  00:10:51,230
it's empty.

119

00:10:51,230  -->  00:10:55,930
We just fill in the key and the data itself.

120

00:10:55,970  -->  00:11:01,950
Otherwise if the key already exists we go ahead and replace the old value.

121

00:11:02,660  -->  00:11:03,650
And then in that case.

122

00:11:03,680  -->  00:11:06,530
Otherwise meaning it doesn't exist.

123

00:11:06,560  -->  00:11:12,070
We actually have to find the next available slot meaning we have to say next slot equals.

124

00:11:12,110  -->  00:11:16,910
Rehash the hash value we get to the next slot over here.

125

00:11:16,910  -->  00:11:21,760
So we continually go while and then we set the new key if none.

126

00:11:21,920  -->  00:11:24,120
So this is setting a new key.

127

00:11:24,230  -->  00:11:27,300
Otherwise we just replace the old value.

128

00:11:27,970  -->  00:11:28,970
OK.

129

00:11:29,360  -->  00:11:35,750
So we found out we that we we needed to use a rehash to find the next possible Can we just continue

130

00:11:35,750  -->  00:11:38,410
along ticking the old hash function adding on.

131

00:11:38,630  -->  00:11:41,490
And then again just doing a simple remainder method.

132

00:11:41,600  -->  00:11:47,470
Let's now focus on getting items given a key.

133

00:11:50,180  -->  00:11:55,340
I'll go ahead and zoom in for this.

134

00:11:55,340  -->  00:12:01,620
While we focus on the get method so say death gets.

135

00:12:01,640  -->  00:12:05,990
And in this case it's just going to take in a key just like we would for a normal dictionary and it's

136

00:12:05,990  -->  00:12:13,610
going to return items basically get items which are our data by taking in a key and returning the data

137

00:12:13,670  -->  00:12:15,770
that's matched up with that key.

138

00:12:16,190  -->  00:12:17,560
We're going to set up a couple of variables.

139

00:12:17,550  -->  00:12:27,110
First search we're going to say Start slot is equal to self-taught hash function which takes in the

140

00:12:27,110  -->  00:12:32,750
key and then the length of self-taught slots

141

00:12:35,970  -->  00:12:42,600
will start off with data being done at the end will actually return data will have stopped.

142

00:12:42,600  -->  00:12:43,910
Equals false.

143

00:12:43,910  -->  00:12:53,870
So the boolean to tell us what the stop will say found is equal to false and also the position marker

144

00:12:53,870  -->  00:12:57,530
called just equal to start slot.

145

00:12:58,760  -->  00:13:01,000
OK so right now we have Start slot.

146

00:13:01,040  -->  00:13:07,310
And this is just telling us what slot do we start off on in our search based off the hash function.

147

00:13:07,310  -->  00:13:12,250
And because of our rehash method we're adding if it's not a hit at the hash function.

148

00:13:12,350  -->  00:13:16,880
We can end up doing is just continuing on until we actually find it.

149

00:13:17,270  -->  00:13:26,840
So until we learn that it's not empty or found and haven't stopped yet meaning while self thought slots

150

00:13:28,220  -->  00:13:36,890
at that position which is the start slot does not equal none and not found meaning or boolean variable

151

00:13:36,900  -->  00:13:37,520
hasn't.

152

00:13:37,760  -->  00:13:43,270
That data hasn't been found and not stop meaning we haven't stopped yet.

153

00:13:43,620  -->  00:13:44,830
Then we'll just do a check.

154

00:13:44,840  -->  00:13:55,840
We'll say if self-taught slots at that position is equal to the key then we found it.

155

00:13:55,850  -->  00:13:58,710
So we can say found is equal to true.

156

00:13:58,760  -->  00:14:09,960
And we just set the data equal to that value which is self that data position.

157

00:14:10,640  -->  00:14:27,110
Else we'll say position equals self rehash at the position length of self-taught slots and we'll do

158

00:14:27,110  -->  00:14:39,140
an additional check here will say if position is equal to start slots then we notice stop which is say

159

00:14:39,140  -->  00:14:43,020
stop equals true.

160

00:14:43,040  -->  00:14:47,510
And then finally we just return the data.

161

00:14:47,570  -->  00:14:51,500
Let's go ahead and zoom out and make sure we break this down completely.

162

00:14:51,500  -->  00:14:56,270
So we're trying to get a value or some data based off it's key.

163

00:14:56,270  -->  00:14:59,010
So we set up our variables for our search.

164

00:14:59,060  -->  00:15:05,240
The slot we're going to start in the data which is none right now whether or not we stopped whether

165

00:15:05,240  -->  00:15:10,490
or not we found it and the position starts off at start slot.

166

00:15:11,180  -->  00:15:17,060
And essentially we keep going until we discern that it's not empty or found haven't stopped yet.

167

00:15:17,060  -->  00:15:23,440
So while the self-taught slots at that index of position does not equal none and you need to change

168

00:15:23,430  -->  00:15:28,720
this to an actual keyword none and not found an out.

169

00:15:28,730  -->  00:15:30,460
Stop that.

170

00:15:30,470  -->  00:15:36,260
If self-taught slots position equals to key then found this was true and we just go ahead and return

171

00:15:36,260  -->  00:15:37,380
that data.

172

00:15:37,700  -->  00:15:42,470
Otherwise we have to use rehash to continue going.

173

00:15:42,470  -->  00:15:49,610
All right let's go ahead and use add two more methods.

174

00:15:49,610  -->  00:15:58,340
And these are going to be death underscore underscore gets item and these are just special methods for

175

00:15:58,340  -->  00:16:03,740
use of Python indexing self key.

176

00:16:04,310  -->  00:16:05,550
And we're just going to return.

177

00:16:05,580  -->  00:16:10,220
Self-taught gets key

178

00:16:13,310  -->  00:16:21,830
and the other thing we're into this case def set item underscore underscore self.

179

00:16:22,440  -->  00:16:24,260
Key data

180

00:16:27,800  -->  00:16:29,260
in this case we're just going to put it.

181

00:16:29,270  -->  00:16:35,210
Will say self-talk put the data.

182

00:16:35,360  -->  00:16:41,060
Now what this allows us to do this is just special methods in Python that allow you to use that bracket

183

00:16:41,060  -->  00:16:42,720
notation.

184

00:16:42,860  -->  00:16:43,790
All right.

185

00:16:43,790  -->  00:16:45,850
So we wrote quite a bit of code here.

186

00:16:45,860  -->  00:16:52,560
I mean it's a lot of code but we also just basic create our own hash table using lists as our base.

187

00:16:52,580  -->  00:16:58,730
Let's go ahead and make sure it worked out and I won't be surprised if we get an error but hopefully

188

00:16:58,730  -->  00:16:59,280
we don't.

189

00:16:59,420  -->  00:17:03,600
Let's see if we're able to implement it correctly.

190

00:17:04,140  -->  00:17:05,720
So I'll make my hash table.

191

00:17:06,200  -->  00:17:11,600
I'll give it a size of 5 and let's go ahead and put on her first key so say 8 1

192

00:17:14,270  -->  00:17:23,780
0 to 1 and we'll say h of 2 is equal to 2.

193

00:17:23,780  -->  00:17:31,540
Now let's say H 3 is equal to 3 strings 3.

194

00:17:32,240  -->  00:17:34,680
And let's zoom in on that.

195

00:17:34,710  -->  00:17:39,200
We're not coding a whole lot of stuff anymore to create a hash table.

196

00:17:39,200  -->  00:17:41,250
Assign some keys and some data.

197

00:17:41,630  -->  00:17:44,530
Let's see if we can actually retrieve it.

198

00:17:44,570  -->  00:17:45,010
All right.

199

00:17:45,020  -->  00:17:47,750
So looks like that's working out.

200

00:17:47,750  -->  00:17:52,660
So one two and shook finally three.

201

00:17:52,670  -->  00:17:54,090
Looks like that's all working out.

202

00:17:54,290  -->  00:18:00,920
So even though this is a rudimentary implementation we can place play around with it by implementing

203

00:18:01,280  -->  00:18:02,750
different hash functions.

204

00:18:02,750  -->  00:18:09,200
So what I would recommend to you is to implement different hash functions meaning if you're able to

205

00:18:09,200  -->  00:18:14,570
take this existing code and mess around with hash function and rehash to try to implement the other

206

00:18:14,570  -->  00:18:19,160
hash functions we talked about throughout this lecture that weren't just remainder methods where we

207

00:18:19,160  -->  00:18:24,230
had those middle numbers and also those square methods as well as some ordered no value methods.

208

00:18:24,230  -->  00:18:26,810
Go ahead and try those out and play around with it.

209

00:18:26,850  -->  00:18:32,420
Now we can really build your understanding of hash tables and hash functions again realistically you're

210

00:18:32,450  -->  00:18:37,420
probably not going to be making your own hash table objects and classes because you already have things

211

00:18:37,420  -->  00:18:41,750
such just Python dictionaries or in other languages you already have hash tables that you don't need

212

00:18:41,750  -->  00:18:43,380
to build out yourself.

213

00:18:43,850  -->  00:18:44,780
OK.

214

00:18:44,780  -->  00:18:47,770
Again you have the Jupiter notebook available to you.

215

00:18:47,830  -->  00:18:51,970
It has all the codes you can copy along paste it read it at your own pace.

216

00:18:52,040  -->  00:18:53,950
So I know we went through quite a bit.

217

00:18:54,230  -->  00:19:00,350
And just to note it also has comments everywhere explaining every code block for you.

218

00:19:00,620  -->  00:19:02,960
So really go over this code slowly.

219

00:19:02,960  -->  00:19:06,770
Make sure you understand it and have fun with it.

220

00:19:06,800  -->  00:19:10,660
Mess around make your own hash functions and check it out.

221

00:19:10,920  -->  00:19:11,620
OK.

222

00:19:11,840  -->  00:19:14,850
So that's it for the hash table implementation.

223

00:19:14,870  -->  00:19:15,790
I know it was a lot.

224

00:19:15,800  -->  00:19:20,570
So make sure you take your time and go over the Jupiter note books that are available to you and the

225

00:19:20,570  -->  00:19:21,590
next lecture.

226

00:19:21,590  -->  00:19:24,760
We're going to begin to discuss sorting out rhythms.

227

00:19:24,770  -->  00:19:27,710
All right thanks everyone and I'll see you at the next lecture
