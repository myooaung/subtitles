WEBVTT
1

00:00:01.140  -->  00:00:06.690
Hello everyone and welcome to lecture on finding the missing element solution.

2

00:00:06.690  -->  00:00:09.730
So let's go over the problem statement one more time.

3

00:00:09.780  -->  00:00:12.940
Consider an array of non-negative integers.

4

00:00:13.200  -->  00:00:19.110
Then a second array is formed by shuffling the elements of the first array and deleting a random element

5

00:00:19.110  -->  00:00:19.630
.

6

00:00:19.860  -->  00:00:24.350
Given these two arrays find which element is missing in the second array.

7

00:00:24.390  -->  00:00:31.800
So for an example we have this array this list and then the second rate IList something to take.

8

00:00:31.800  -->  00:00:34.380
No I'm saying the term array.

9

00:00:34.740  -->  00:00:38.490
But that's just to be agnostic about which programming language you're using.

10

00:00:38.490  -->  00:00:40.230
So in an interview setting you'll be set.

11

00:00:40.260  -->  00:00:43.020
You'll be asked about arrays in Python.

12

00:00:43.020  -->  00:00:44.180
These are just lists.

13

00:00:44.200  -->  00:00:47.670
We said before in the beginning of this section.

14

00:00:47.820  -->  00:00:54.980
So again I get one array is a python list a second array is a python list the second array as shuffled

15

00:00:54.990  -->  00:00:58.440
elements of the first one and a deleted random element.

16

00:00:58.440  -->  00:01:02.670
Your function should be able to find that random element that was missing.

17

00:01:02.670  -->  00:01:07.170
So let's talk about solution and theory in logic.

18

00:01:07.170  -->  00:01:13.170
So the naive solution just brute forcing it out is to go through every element in the second array and

19

00:01:13.170  -->  00:01:15.950
then check whether it appears in the first rate.

20

00:01:15.990  -->  00:01:20.280
Note that there may be duplicate elements in the arrays so you would need to pay special attention for

21

00:01:20.280  -->  00:01:25.950
that complexity of that approach is order and squared since who would need to do 2 for loops for that

22

00:01:25.950  -->  00:01:27.080
.

23

00:01:27.450  -->  00:01:30.650
A more efficient solution is to sort the first array.

24

00:01:30.930  -->  00:01:36.060
So while checking whether an element in the first array appears in the second we could do a binary search

25

00:01:36.070  -->  00:01:36.290
.

26

00:01:36.600  -->  00:01:41.230
We'll learn more about binary searches in more detail in the searching and sorting section of this course

27

00:01:42.230  -->  00:01:47.580
but if that solution you still need to be careful about duplicate elements the complexity of that solution

28

00:01:47.670  -->  00:01:48.660
is order and log.

29

00:01:48.660  -->  00:01:53.810
And if we don't want to have to deal that special case of duplicate numbers we can sort.

30

00:01:53.810  -->  00:01:56.880
Both arrays and iterate over them simultaneously.

31

00:01:57.030  -->  00:02:01.340
Once the two iterators have different values we can stop the value of the first.

32

00:02:01.350  -->  00:02:03.140
Iterator is a missing element.

33

00:02:03.420  -->  00:02:09.540
So this solution is also also order analog and so let's go ahead and do a solution for this approach

34

00:02:09.540  -->  00:02:10.320
.

35

00:02:10.320  -->  00:02:11.800
Let's jump to solution.

36

00:02:11.820  -->  00:02:14.870
Put in code it out and explain along the way.

37

00:02:14.970  -->  00:02:25.760
So we're going to do is define our finder function takes and the arrays will go ahead and sort theories

38

00:02:25.780  -->  00:02:30.270
.

39

00:02:30.480  -->  00:02:36.700
So now that the arrays are sorted we're going to compare elements in a sort of race.

40

00:02:36.780  -->  00:02:38.330
So for now.

41

00:02:38.730  -->  00:02:48.610
To them one of them two in are going to Zipp theories together and I'll show you what Zipp does in just

42

00:02:48.610  -->  00:02:50.950
the second in case you're not familiar with it.

43

00:02:51.030  -->  00:02:53.370
It's a bit of a python trick.

44

00:02:54.750  -->  00:03:02.180
As for simplifier code I'm making it clear to read that are going to return the first element.

45

00:03:02.250  -->  00:03:04.970
If I don't get a return of the first number there.

46

00:03:06.060  -->  00:03:10.240
So I can explain Zipp first and then we're going to walk through this entire code.

47

00:03:10.680  -->  00:03:16.020
As far as what zip does it essentially just zips together lists.

48

00:03:16.500  -->  00:03:23.930
So if I pass in lists like this for five six the output is a zipped up matching pair of the tuples.

49

00:03:24.150  -->  00:03:33.170
So I get 1 4 to 5 36 so takes the first element put some together a speechless.

50

00:03:33.180  -->  00:03:34.550
Second element of each list.

51

00:03:34.560  -->  00:03:36.420
Puts them together in a tuple.

52

00:03:36.420  -->  00:03:37.550
Third element of each list.

53

00:03:37.560  -->  00:03:38.780
Put them together tuple.

54

00:03:38.850  -->  00:03:46.420
So it returns a list of tuples and I'm doing tuple unpacking here in order to grab those elements.

55

00:03:46.770  -->  00:03:51.330
So continuing on lets go ahead and walk through a solution.

56

00:03:51.330  -->  00:03:55.700
First thing we're doing is we're sorting both both arrays excuse me.

57

00:03:56.040  -->  00:04:01.920
So we're sorting both arrays and then we're saying for those numbers and those pairs as we go along

58

00:04:01.920  -->  00:04:03.430
the indexes.

59

00:04:03.600  -->  00:04:09.180
If the number one of the number of the first array isn't equal to number of the second array then we

60

00:04:09.180  -->  00:04:13.890
know we're just going to return the number of the first array because it was missing after we sort of

61

00:04:13.890  -->  00:04:14.930
them.

62

00:04:15.030  -->  00:04:19.730
Otherwise we're just going to return the last elements of the first array.

63

00:04:19.800  -->  00:04:27.930
So let's go ahead and copy some code to test up this problem or a function solution.

64

00:04:27.930  -->  00:04:31.530
This was the example at first and we got five out.

65

00:04:31.530  -->  00:04:32.280
All right.

66

00:04:32.490  -->  00:04:33.370
Great.

67

00:04:33.390  -->  00:04:38.830
So in most interviews you're actually going to be expected to come up for a linear type solution.

68

00:04:38.830  -->  00:04:44.520
We can use a hash table and stored the number of times each element appears in the second rate then

69

00:04:44.580  -->  00:04:46.490
for each element in the first array.

70

00:04:46.530  -->  00:04:50.620
We're going to decrease this counter once we hit an element of zero count.

71

00:04:50.670  -->  00:04:52.070
That's the missing element.

72

00:04:52.320  -->  00:04:54.590
So let's go ahead and check out the solution.

73

00:04:54.600  -->  00:04:58.080
We're going to learn about hash tables in a more formal manner later on the course.

74

00:04:58.110  -->  00:05:01.790
So don't worry if you don't understand full hash tables right now.

75

00:05:02.190  -->  00:05:08.000
But in order to do this well we're going to do is take advantage of python and its collections module

76

00:05:12.250  -->  00:05:14.590
so I'm going to say import collections.

77

00:05:14.690  -->  00:05:15.950
Go ahead and do that.

78

00:05:15.980  -->  00:05:16.470
All right.

79

00:05:16.850  -->  00:05:23.330
So we're going to do a default dict from collection's module which is just a dictionary in Python where

80

00:05:23.330  -->  00:05:28.160
if the key isn't already in the dictionary it will automatically add it for you.

81

00:05:28.160  -->  00:05:31.390
All right let's go ahead and use it.

82

00:05:31.400  -->  00:05:37.430
So our second solution looks something like this.

83

00:05:37.880  -->  00:05:43.860
It takes both arrays and this is where collection's comes into play.

84

00:05:44.410  -->  00:05:51.290
I'm going say d equals from collections a default dictionary that takes in integers.

85

00:05:51.290  -->  00:05:54.780
So all this does is allows us to avoid key errors.

86

00:05:54.880  -->  00:06:00.860
So if the key isn't in the dictionary instead of throwing up an error it's going to just add the key

87

00:06:00.860  -->  00:06:02.580
to that dictionary.

88

00:06:03.410  -->  00:06:03.890
All right.

89

00:06:04.000  -->  00:06:10.190
So what I'm going to do is add a count for every instance in array one single save for now.

90

00:06:11.900  -->  00:06:23.990
And actually do this for a rate to a safer nomine or a two dictionary Num. added one and then check

91

00:06:24.010  -->  00:06:26.080
if the number isn't in that dictionary.

92

00:06:26.120  -->  00:06:29.240
So I'm going to say for now.

93

00:06:29.620  -->  00:06:32.550
In this case the first array.

94

00:06:32.830  -->  00:06:36.140
So we're to say are one.

95

00:06:37.510  -->  00:06:46.240
If that number count is equal to zero return number because we never counted it and otherwise are just

96

00:06:46.250  -->  00:06:47.240
going to say else

97

00:06:50.260  -->  00:06:55.510
that number is going to be subtracted.

98

00:06:55.510  -->  00:07:00.800
So let's go ahead and check the solution and then we're going to walk through this.

99

00:07:01.340  -->  00:07:01.810
All right.

100

00:07:02.060  -->  00:07:04.880
So that looks like it worked and it matched up.

101

00:07:04.880  -->  00:07:11.830
Let's go ahead and check it on our second one by putting in final two here also worked great.

102

00:07:12.110  -->  00:07:13.400
So let's go to walk through this.

103

00:07:13.400  -->  00:07:14.960
What are we actually doing here.

104

00:07:15.410  -->  00:07:18.420
Well we're importing a default dictionary.

105

00:07:18.530  -->  00:07:21.380
And again this is the same as a normal Python dictionary.

106

00:07:21.500  -->  00:07:24.620
But if the key doesn't already exist there's no error.

107

00:07:24.640  -->  00:07:26.370
You just add the key.

108

00:07:26.500  -->  00:07:31.790
So I'm going to the second array and I'm counting how many times each element shows up.

109

00:07:31.890  -->  00:07:40.090
Saying for number in array two set that key plus one notes I'm avoiding the little if statement so if

110

00:07:40.250  -->  00:07:46.540
I'm in dictionary D because I'm using a default dict So that's what allows us to write.

111

00:07:46.550  -->  00:07:47.950
This is one line right here.

112

00:07:47.960  -->  00:07:53.030
If you try doing this with a normal dictionary this line would throw an error if numb wasn't already

113

00:07:53.030  -->  00:07:58.120
a key in the dictionary but with default dict were allowed to do that.

114

00:07:58.120  -->  00:08:05.290
So as I mentioned we go along the second array for every number in it we add a count.

115

00:08:05.490  -->  00:08:11.940
Then the first rate what we're doing is for numb in or a one if it's equal to zero.

116

00:08:12.130  -->  00:08:19.010
We return numb otherwise we're going to subtract 1.

117

00:08:19.040  -->  00:08:19.660
All right.

118

00:08:19.910  -->  00:08:24.260
So there's two other possible solutions one of them which are going to code out and the other one we'll

119

00:08:24.250  -->  00:08:29.540
talk about the one we're going to talk about is just you could compute the sum of all the numbers in

120

00:08:29.540  -->  00:08:36.330
array 1 and then or at 2 and then subtract a rate to some from Array one sum.

121

00:08:36.380  -->  00:08:38.440
And that difference would be the missing number.

122

00:08:38.450  -->  00:08:39.580
Iterate to.

123

00:08:40.000  -->  00:08:45.530
However this approach could be problematic if the arrays are too long or the numbers are very large

124

00:08:45.530  -->  00:08:45.830
.

125

00:08:45.830  -->  00:08:50.720
You could end up getting an overflow when summing up the numbers or if the numbers are really really

126

00:08:50.720  -->  00:08:54.660
small and have a ton of decimal places you may lose some information.

127

00:08:54.750  -->  00:08:58.960
So the interviewer probably actually wouldn't like that approach even though you might think it's pretty

128

00:08:58.970  -->  00:09:03.470
clever algorithmically and in a programming sense it has trouble.

129

00:09:03.640  -->  00:09:07.670
If the arrays are too long or the numbers are very large you get an overflow issue.

130

00:09:07.970  -->  00:09:13.480
So I would recommend mentioning it but also mentioning the problems with that solution.

131

00:09:14.260  -->  00:09:16.940
Here's the clever trick version.

132

00:09:16.940  -->  00:09:22.250
So you could achieve a linear time in constant space complexity without any problem.

133

00:09:22.370  -->  00:09:29.300
And the way to do that is you could initialize a variable to zero and then do an exclusive or of every

134

00:09:29.300  -->  00:09:32.400
element in the first and second arrays with that variable.

135

00:09:32.680  -->  00:09:40.630
So what's an exclusive or if you go to the solution book and scroll down here.

136

00:09:41.570  -->  00:09:47.650
This is what we're at right now by performing a very clever trick you can do an exclusive or in an exclusive

137

00:09:47.650  -->  00:09:55.130
or basically is a comparison and you can read about it more on the Wikipedia link here.

138

00:09:55.280  -->  00:09:59.460
And we're going to go over this exclusive or we'll see it again in another interview problem.

139

00:09:59.620  -->  00:10:02.430
So don't worry about understanding the solution completely right now.

140

00:10:02.440  -->  00:10:04.070
You'll see it again later.

141

00:10:04.150  -->  00:10:09.320
As far as the exclusive or and what it does is it shows outputs when the inputs differ.

142

00:10:09.320  -->  00:10:14.680
So if your input is a and b if it's 0 0 you put a 0.

143

00:10:14.960  -->  00:10:19.080
If one of them is 1 then you get one.

144

00:10:19.150  -->  00:10:24.160
If one of them's one you get one if they're both the same you get false.

145

00:10:24.160  -->  00:10:31.370
So by performing this kind of clever trick you basically what you do is we scroll down here.

146

00:10:31.970  -->  00:10:37.340
Initialiser result to 0 and then perform an exclusive or between the numbers in the array.

147

00:10:37.340  -->  00:10:42.920
So for now in these some here are one plus are.

148

00:10:43.070  -->  00:10:44.430
We're actually just adding lists.

149

00:10:44.440  -->  00:10:45.640
Remember that.

150

00:10:45.630  -->  00:10:47.950
So if I do this in python let me just copy and paste that.

151

00:10:47.960  -->  00:10:50.880
Show what it does.

152

00:10:51.620  -->  00:10:58.580
If we take these two arrays and add them together like this then we're just basically concatenating

153

00:10:58.580  -->  00:10:59.530
the arrays together.

154

00:10:59.540  -->  00:11:03.060
We're not actually summing each element.

155

00:11:03.160  -->  00:11:08.670
So then you say for now the result stoon exclusive or with that number and then just print the results

156

00:11:08.660  -->  00:11:08.710
.

157

00:11:08.720  -->  00:11:13.330
So you can see as it goes along and then return the results.

158

00:11:13.340  -->  00:11:18.680
So this is kind of a clever trick then I wouldn't expect you to know right off the bat and we're going

159

00:11:18.670  -->  00:11:24.320
to go much deeper into exclusive or because it shows up in another interview problem as a really good

160

00:11:24.320  -->  00:11:27.670
solution and not just the clever trick solution.

161

00:11:27.860  -->  00:11:32.210
So don't worry if we don't completely understand this last solution we're going to see it again later

162

00:11:32.210  -->  00:11:33.740
on this course.

163

00:11:33.740  -->  00:11:36.950
Make sure you do understand the solution right here.

164

00:11:36.940  -->  00:11:41.980
And if you don't understand the default dict then try implementing the solution or just normal dictionary

165

00:11:41.990  -->  00:11:43.760
.

166

00:11:43.750  -->  00:11:49.010
And then remember you could have also sort of the elements to make sure you understand the problems

167

00:11:49.490  -->  00:11:52.710
with the order complexity of this solution.

168

00:11:52.730  -->  00:11:53.300
All right.

169

00:11:53.620  -->  00:11:56.250
That's it for finding the missing elements.

170

00:11:56.270  -->  00:11:58.010
Thanks and I'll see you at the next lecture
