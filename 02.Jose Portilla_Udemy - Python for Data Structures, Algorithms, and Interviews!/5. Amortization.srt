1

00:00:01,200  -->  00:00:04,780
Hello everyone and welcome to lecture on a more time zation.

2

00:00:04,830  -->  00:00:06,840
So we've already discussed dynamic arrays.

3

00:00:06,840  -->  00:00:12,780
We've implemented a dynamic array and we learn that when dynamic areas get full they double in size

4

00:00:12,780  -->  00:00:13,830
.

5

00:00:13,830  -->  00:00:19,240
So in this lecture we're going to do in amortized analysis of dynamic arrays.

6

00:00:19,320  -->  00:00:26,370
So the strategy of replacing an array with a new larger array might at first seem slow since a single

7

00:00:26,370  -->  00:00:34,350
append operation may require order and time to perform our new array allows us to add new elements before

8

00:00:34,350  -->  00:00:36,980
the array must be replaced again.

9

00:00:37,020  -->  00:00:42,600
So what we're going to do is use an algorithmic design pattern called the Morto ization.

10

00:00:42,600  -->  00:00:47,250
We can show that performing a sequence of such append operations on a dynamic range is actually quite

11

00:00:47,250  -->  00:00:50,040
efficient.

12

00:00:50,070  -->  00:00:56,280
So again just to reiterate remember if we have a current number of elements now we're going to overflow

13

00:00:56,400  -->  00:01:00,690
that is fill up the array we're going to double it to get more room.

14

00:01:01,170  -->  00:01:05,850
But on that doubling that means that primitive operations for and a pen is going to be Order end.

15

00:01:06,390  -->  00:01:08,180
So here we have one on two.

16

00:01:08,180  -->  00:01:11,720
We have to double on four it put it a pen.

17

00:01:11,760  -->  00:01:19,080
So it's going to be order m on eights again in a penalty order 8 on 16 order 16 Everything else is just

18

00:01:19,080  -->  00:01:22,580
going to be order one for constant.

19

00:01:22,590  -->  00:01:27,730
So again what we're going to do is allocate memory for a larger array of size typically twice the older

20

00:01:27,730  -->  00:01:32,890
a copy the contents of the older read to the jury and then free the old array.

21

00:01:33,010  -->  00:01:36,480
So go ahead and see a diagram of this process.

22

00:01:36,480  -->  00:01:40,010
So here we have a dynamic array.

23

00:01:40,080  -->  00:01:45,770
Initially we'll call it the table it's just empty and the size is zero or item 1.

24

00:01:45,780  -->  00:01:48,120
We're having an overflow since our array is full.

25

00:01:48,150  -->  00:01:51,190
So we have to double it when we enter item 2.

26

00:01:51,300  -->  00:01:53,600
Again we're having an overflow arrays full.

27

00:01:53,640  -->  00:01:56,670
So we have to double it on inserting item 3.

28

00:01:56,750  -->  00:01:59,400
You're fine but inserting item 4.

29

00:01:59,670  -->  00:02:03,740
You have to double it because you're having an overflow then on 5 6 and 7.

30

00:02:03,760  -->  00:02:05,040
You're all right.

31

00:02:05,040  -->  00:02:09,750
So let's do an analysis on this process here on the left.

32

00:02:09,750  -->  00:02:15,510
We have that same figure showing the insertions and here on the right we're actually going to do the

33

00:02:15,510  -->  00:02:16,550
analysis.

34

00:02:16,560  -->  00:02:21,050
So for item number one for instance or table sizes 1.

35

00:02:21,180  -->  00:02:28,140
So our cost of putting in that append or inserting it into that table or array is just one item number

36

00:02:28,140  -->  00:02:30,280
two table sizes too.

37

00:02:30,480  -->  00:02:38,070
So our cost was to order end and here's where the basically the magic of the more times analysis happens

38

00:02:38,160  -->  00:02:42,810
on Item number three the table size has become four since we doubled it.

39

00:02:42,870  -->  00:02:44,560
Meaning are costs three.

40

00:02:44,910  -->  00:02:47,120
And then an item number four.

41

00:02:47,160  -->  00:02:54,420
So you've already doubled the table size to for our cost is now just one for that insertion then on

42

00:02:54,420  -->  00:03:03,450
item 5 and table size 8 Our cost is 5 but for six seven 8 since the table sizes 8 our cost of insertion

43

00:03:03,450  -->  00:03:05,320
is actually just one.

44

00:03:05,340  -->  00:03:10,950
So the more ties cost we can actually sum this all up and divide it by n the number of items in that

45

00:03:10,980  -->  00:03:19,440
array and we can actually simplify that above series by breaking the terms 2 3 5 9 into 2 as one plus

46

00:03:19,440  -->  00:03:22,410
one one to close to 1 plus for 1 plus 8.

47

00:03:22,410  -->  00:03:29,220
So are those end terms that one plus one plus one and then using a bit of a math trick we can have the

48

00:03:29,220  -->  00:03:37,170
other ones go one plus two plus four etc. divided by end meaning we have N plus 2 end over end.

49

00:03:37,620  -->  00:03:41,920
And when you divide and out that will be just one plus two which is three.

50

00:03:41,970  -->  00:03:46,590
So the more time cost is actually constant order one.

51

00:03:47,340  -->  00:03:54,060
So go ahead and check out the resource section of the lecture for a PDA of a more detailed explanation

52

00:03:54,570  -->  00:03:56,160
thats going to be your homework assignment.

53

00:03:56,220  -->  00:04:02,190
So make sure you read that fool PDAF explanation just a few pages long but again it's a nice amortized

54

00:04:02,610  -->  00:04:03,990
analysis.

55

00:04:03,990  -->  00:04:09,180
This isn't really necessary for you to know given what the array interview questions are going to look

56

00:04:09,180  -->  00:04:13,820
like but you should know if you're interested in how a dynamic array works.

57

00:04:13,830  -->  00:04:18,090
So up next we're going to have a lecture over viewing the interview problems in this section of the

58

00:04:18,090  -->  00:04:22,300
course and after that we'll get started with the interview problems.

59

00:04:22,440  -->  00:04:24,420
Thanks everyone and I'll see you at the next lecture
