WEBVTT
1

00:00:01.530  -->  00:00:08.220
Hello everyone and welcome to this lecture on representing a tree as a list of lists.

2

00:00:08.280  -->  00:00:14.550
So if you go to the folder for trees you'll see a lecture or a note book titled tree representation

3

00:00:14.550  -->  00:00:17.310
implementation and princes lists.

4

00:00:17.310  -->  00:00:19.610
So this is the code we're going to be going over.

5

00:00:19.650  -->  00:00:24.000
You'll notice it's actually just a series of functions we're not going to be using any object oriented

6

00:00:24.000  -->  00:00:25.460
programming or classes.

7

00:00:25.470  -->  00:00:28.490
We'll do that in the next implementation of a tree.

8

00:00:28.650  -->  00:00:34.050
But this is just to give you a basic idea of how we could implement a tree using lists a built in data

9

00:00:34.050  -->  00:00:35.470
structure in Python.

10

00:00:35.580  -->  00:00:41.010
So I'll be coding these functions out and explaining what each of them do along the way.

11

00:00:41.010  -->  00:00:41.600
All right.

12

00:00:41.880  -->  00:00:43.330
So I encourage you to follow along.

13

00:00:43.410  -->  00:00:46.330
So let's go ahead and get started.

14

00:00:46.410  -->  00:00:53.870
I'm going to start out by creating a function and I'll call it binary tree.

15

00:00:53.970  -->  00:01:01.560
It's going to take in in arguments are for the root node and then it's going to return a list and this

16

00:01:01.560  -->  00:01:08.920
list will have are that root node and then it's going to have two other empty lists.

17

00:01:08.940  -->  00:01:14.280
So what this function does it just simply constructs a list with the root node and then to empty sublists

18

00:01:14.400  -->  00:01:16.240
for the children.

19

00:01:17.120  -->  00:01:22.290
And now what we're going to want to do is if we want to add a left subtree to the root of a tree we

20

00:01:22.290  -->  00:01:26.210
need to insert a new list into the second position of the root list.

21

00:01:26.250  -->  00:01:30.500
So you have to be careful here if the list already has something in that second position.

22

00:01:30.570  -->  00:01:34.320
We need to keep track and then push it down the tree as left child.

23

00:01:34.320  -->  00:01:36.480
The list we are adding.

24

00:01:36.480  -->  00:01:40.600
So let's go and see the code for inserting a left child.

25

00:01:41.040  -->  00:01:45.420
So I'm just going to make each cell have a function in it.

26

00:01:45.630  -->  00:01:51.330
So I'm going to make a function called inserts left.

27

00:01:51.420  -->  00:01:57.420
It's going to take in the roots and then it's going to take an object we'll call new branch

28

00:02:00.700  -->  00:02:11.810
we'll set a variable t equal to roots pop and we'll pop out that index at 1.

29

00:02:11.930  -->  00:02:23.250
So that will be the left and then we'll say if length of T is greater than one meaning it has something

30

00:02:23.250  -->  00:02:24.630
in it.

31

00:02:24.910  -->  00:02:32.360
I'm going to call root's thoughts inserts and we'll go over what that actually means in a second we'll

32

00:02:32.370  -->  00:02:44.100
say the inserts one and then we'll also pass in new branch T and an empty list.

33

00:02:44.720  -->  00:02:49.820
OK so we know now what to do if there's already a list there.

34

00:02:50.190  -->  00:03:00.120
So we'll do an L statements to say roots that inserts and keep in mind insert is just a method on a

35

00:03:00.120  -->  00:03:04.140
list will insert new branch

36

00:03:08.520  -->  00:03:13.270
and then also passen to empty lists.

37

00:03:13.710  -->  00:03:15.430
Since there's nothing there yet.

38

00:03:16.230  -->  00:03:22.090
And then I'll return the roots that we basically affected.

39

00:03:22.170  -->  00:03:23.000
OK.

40

00:03:23.100  -->  00:03:25.770
So notice here that insert a left child.

41

00:03:25.770  -->  00:03:32.610
We first obtain a list which could possibly be empty that corresponds to that current left child.

42

00:03:33.060  -->  00:03:39.770
Then we add the new left child installing the old left child as the left child of the new one.

43

00:03:39.780  -->  00:03:45.210
So this basically allowing us to splice a new node into the tree at any position.

44

00:03:45.210  -->  00:03:49.890
So we're going to do another function called insert right which is going to be really really similar

45

00:03:49.920  -->  00:03:50.690
.

46

00:03:51.430  -->  00:03:59.190
So similar in fact that I'm going to copy this function and then show you the differences here.

47

00:03:59.190  -->  00:04:08.460
So if I'm inserting rights I'm actually going to pop in or pop out to here since that's going to correspond

48

00:04:08.460  -->  00:04:09.320
to that right.

49

00:04:09.330  -->  00:04:13.180
Branch excuse me right child.

50

00:04:13.650  -->  00:04:14.760
This actually stays the same.

51

00:04:14.760  -->  00:04:24.630
So if there is something already in there I'm going to go ahead and insert index to the new branch.

52

00:04:24.630  -->  00:04:26.780
And in this case I'm going to read order.

53

00:04:26.790  -->  00:04:36.090
These guys since I'm inserting the rights so it goes new branch and empty list.

54

00:04:36.090  -->  00:04:39.750
See if there's already something in there.

55

00:04:39.900  -->  00:04:42.310
Otherwise it goes index too.

56

00:04:42.510  -->  00:04:47.990
And the list that we're inserting here is new branch and stillest empty list.

57

00:04:48.450  -->  00:04:53.970
So to round out this set of tree making functions we're going to write a couple of access functions

58

00:04:53.970  -->  00:04:59.550
for getting and setting the value as well as getting the left or right subtrees.

59

00:04:59.550  -->  00:05:02.610
So this is just going to be a series of short functions.

60

00:05:02.670  -->  00:05:08.420
First one let's say I want to get the root to value or make a function called Get roots.

61

00:05:08.470  -->  00:05:15.630
Well it'll take in that list that roots and is just going to return the first item in that list the

62

00:05:15.630  -->  00:05:16.750
index 0.

63

00:05:16.770  -->  00:05:20.410
So that makes sense since we define the root as zero.

64

00:05:21.140  -->  00:05:27.150
OK then I want to say death sets.

65

00:05:27.180  -->  00:05:30.390
So I want to set a new root value.

66

00:05:30.550  -->  00:05:37.450
I've taken that route and I will also take in any value.

67

00:05:38.550  -->  00:05:39.180
All right.

68

00:05:39.510  -->  00:05:41.910
And the way I'm going to do that is just re-assign

69

00:05:44.610  -->  00:05:45.580
index 0 there.

70

00:05:45.600  -->  00:05:50.190
So notice I'm not returning anything I'm just resetting that route and different want to get the left

71

00:05:50.190  -->  00:06:00.950
child will say Get Left child passen the roots and the way we're constructing this that's going to be

72

00:06:01.010  -->  00:06:01.950
index 1

73

00:06:04.860  -->  00:06:10.170
and you can imagine for getting the right child is going to be extremely similar except will do it index

74

00:06:11.770  -->  00:06:17.350
to something and say return routes to.

75

00:06:18.330  -->  00:06:24.810
OK so is this list of functions we've actually already done a simple representation of lists so let's

76

00:06:24.810  -->  00:06:26.910
go ahead and use them.

77

00:06:26.940  -->  00:06:32.590
So I'm going to say R is equal to binary tree.

78

00:06:32.700  -->  00:06:45.480
Of value 3 and then say let's go ahead and inserts left passen that route has a value of 4.

79

00:06:45.480  -->  00:06:47.570
And here you can see we're actually building out the tree.

80

00:06:47.580  -->  00:06:50.070
So it's returning what the tree is looking like.

81

00:06:50.070  -->  00:06:53.790
So then let's go ahead and insert and other ones to the left.

82

00:06:53.970  -->  00:06:55.290
Again we passed in that room.

83

00:06:55.350  -->  00:06:57.250
Let's put in five.

84

00:06:58.050  -->  00:07:00.320
You can see our building at that tree.

85

00:07:00.780  -->  00:07:05.970
Let's go and insert rights let's say six books.

86

00:07:05.980  -->  00:07:09.100
Forgot to pass in that route.

87

00:07:09.600  -->  00:07:12.330
All right then we're going to inserts right.

88

00:07:12.330  -->  00:07:13.400
Let's go ahead and do another one.

89

00:07:13.400  -->  00:07:15.450
Let's just say seven again.

90

00:07:15.450  -->  00:07:17.490
Got a pass in that route.

91

00:07:18.650  -->  00:07:19.180
OK.

92

00:07:19.290  -->  00:07:24.030
And notice how we're building out that tree in the list of lists fashion.

93

00:07:24.030  -->  00:07:25.500
Now normally you wouldn't do it this way.

94

00:07:25.510  -->  00:07:30.510
You'll use a class and object oriented programming with nodes and references which we're going to do

95

00:07:31.050  -->  00:07:32.890
in next lectures.

96

00:07:33.240  -->  00:07:39.120
But here we can actually just get a simple representation of a list purely through functions.

97

00:07:39.120  -->  00:07:44.190
Excuse me a simple reference is that representation of a tree purely through the data structure of a

98

00:07:44.190  -->  00:07:45.930
list in Python.

99

00:07:46.500  -->  00:07:53.070
OK so you can see how we're inserting left and right and it's building up that tree so we can also say

100

00:07:54.120  -->  00:08:03.990
for instance L is equal to get left child node pass in the root node and let's go ahead and print's

101

00:08:03.990  -->  00:08:10.940
else see what it looks like and you can see now what that left child off that route looks like.

102

00:08:11.070  -->  00:08:15.640
And we also mention we created a set root value.

103

00:08:16.290  -->  00:08:20.180
So I can pasan for instance that left child.

104

00:08:20.910  -->  00:08:28.440
And so it's equal to 9 I print our notice.

105

00:08:28.450  -->  00:08:35.790
Now we've affected that by setting it's true here since I'm still referencing that original tree.

106

00:08:36.360  -->  00:08:37.140
OK.

107

00:08:37.500  -->  00:08:40.110
So that's it for the basics here.

108

00:08:40.140  -->  00:08:41.250
Go ahead and review this.

109

00:08:41.250  -->  00:08:45.450
Make sure you understand how you're building out this tree.

110

00:08:45.450  -->  00:08:46.690
It's pretty simple.

111

00:08:46.920  -->  00:08:52.170
You're just answering left index one checking to make sure if there's a list in there how you build

112

00:08:52.170  -->  00:08:53.340
out that new branch.

113

00:08:53.370  -->  00:08:55.130
Otherwise you build out an empty branch.

114

00:08:55.200  -->  00:09:00.260
No reference to that previous pop that list and then right.

115

00:09:00.270  -->  00:09:02.750
Same thing except now it's index too.

116

00:09:03.210  -->  00:09:07.280
And then these simple methods are just basically indexing to grab left and right.

117

00:09:08.450  -->  00:09:11.460
OK that's it for this lecture.

118

00:09:11.460  -->  00:09:14.280
Thank you guys so much and I'll see you at the next lecture.
