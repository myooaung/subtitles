1

00:00:01,140  -->  00:00:06,450
Hello everyone and welcome to the solution for the string compression interview problem.

2

00:00:06,450  -->  00:00:12,990
So the problem was this given a string in the form such as this bunch of letters you need to compress

3

00:00:12,990  -->  00:00:17,310
it to become this letter and then the number of times that occurred.

4

00:00:17,670  -->  00:00:22,210
Or this problem you could have falsely compressed strings of single or double letters.

5

00:00:22,260  -->  00:00:24,780
So for instance a string a B.

6

00:00:25,020  -->  00:00:27,720
It's ok for returns 8 to be 1.

7

00:00:28,020  -->  00:00:32,880
Even though this technically takes more space with four elements instead of three elements in that string

8

00:00:33,870  -->  00:00:40,650
the function should also be case sensitive so that three capitally three lowercase a returns this a

9

00:00:40,950  -->  00:00:44,130
capital A three lowercase a three.

10

00:00:44,230  -->  00:00:46,610
OK so let's think about the solution.

11

00:00:47,010  -->  00:00:52,200
Since Python strings are immutable we'll need to work off of a list of characters and at the end convert

12

00:00:52,200  -->  00:00:55,090
that list back to a string with a joint statement.

13

00:00:55,440  -->  00:01:00,030
The solution below the one we're going to go through should heal this with time and space complexity

14

00:01:00,030  -->  00:01:04,460
of order n where n is the number of elements in that string.

15

00:01:04,470  -->  00:01:05,720
So let's go in and take a look.

16

00:01:05,730  -->  00:01:08,070
Pay careful attention to comments here.

17

00:01:08,080  -->  00:01:11,460
We're just going to go through the notebook but we're going to actually code this out and explain what

18

00:01:11,460  -->  00:01:14,190
we're doing along the way.

19

00:01:14,190  -->  00:01:16,360
So let's go ahead and begin.

20

00:01:16,620  -->  00:01:25,530
We're going to start by creating our compress function and it takes in a string s the solution is actually

21

00:01:25,530  -->  00:01:28,020
known as compressing without checking.

22

00:01:28,080  -->  00:01:30,890
And it's called the run length compression algorithm.

23

00:01:30,900  -->  00:01:33,170
So this one actually has a name already.

24

00:01:33,270  -->  00:01:39,180
We're going to begin to run as an empty string so I don't make a variable called R for our run and compare

25

00:01:39,180  -->  00:01:46,920
it to equal to an empty string going to make a variable called L and set equal to the length of our

26

00:01:46,920  -->  00:01:48,670
string.

27

00:01:48,760  -->  00:01:54,540
And let's go ahead and do two edge cases first edge case is if we have a length 0 string second edge

28

00:01:54,540  -->  00:01:56,800
case is for a length 1.

29

00:01:57,480  -->  00:02:05,550
So I'm going to say if L is equal to zero then just return an empty string.

30

00:02:05,550  -->  00:02:14,880
If L is equal to length 1 then return the string which is going to be just one letter plus the number

31

00:02:14,880  -->  00:02:15,390
1.

32

00:02:15,390  -->  00:02:19,850
So for instance if string was just a single letter A B to return a 1.

33

00:02:20,250  -->  00:02:25,530
So again we're not actually compressing in that case but this is just OK since we're just doing a run

34

00:02:25,530  -->  00:02:26,720
length.

35

00:02:27,330  -->  00:02:29,450
Now let's do the meat of the algorithm.

36

00:02:29,580  -->  00:02:35,880
So in order to do that actually to initialize some values and to make a value called last and set equal

37

00:02:35,880  -->  00:02:44,010
to the first elements of the string then I'm going to make a value called C.A. which stands for counts

38

00:02:44,010  -->  00:02:44,380
.

39

00:02:44,430  -->  00:02:46,620
That's also going to be equal to 1.

40

00:02:46,620  -->  00:02:52,340
And then I which is going to be index marker when a set that equal to 1 as well.

41

00:02:52,380  -->  00:03:01,260
So when I say while I is less than l the length of that list what I'm going to do is say if s of I.

42

00:03:01,410  -->  00:03:04,240
So the element at that index of the string.

43

00:03:04,560  -->  00:03:08,880
If it's equal to the one that came before.

44

00:03:09,120  -->  00:03:17,470
So what this basically means is if the letter is equal to the letter before it let's go ahead and add

45

00:03:17,500  -->  00:03:18,470
account.

46

00:03:19,110  -->  00:03:21,660
So add to that counts.

47

00:03:22,020  -->  00:03:28,520
Else That means they're no longer in continuous series so we're going to store the previous data.

48

00:03:28,620  -->  00:03:38,990
I'm going to say R is now equal to r plus S minus 1 plus the count.

49

00:03:39,420  -->  00:03:45,210
But we'll need to convert this into a string since we're just putting the string together as the run

50

00:03:45,210  -->  00:03:46,380
.

51

00:03:47,370  -->  00:03:54,510
Once we've done that we'll just go ahead and add to the index to continue on throughout the entire string

52

00:03:54,620  -->  00:03:57,990
until it terminated that while loop.

53

00:03:58,140  -->  00:04:00,790
After that we're just going to put everything back in to run.

54

00:04:00,810  -->  00:04:15,470
So I'm going to say R is an equal to r plus at the previous plus s tr CNC and then going to return our

55

00:04:15,480  -->  00:04:16,660
.

56

00:04:16,680  -->  00:04:19,120
So let's go ahead and see if this works.

57

00:04:20,290  -->  00:04:20,910
OK.

58

00:04:21,470  -->  00:04:22,950
Well go ahead and run compress.

59

00:04:22,980  -->  00:04:28,490
Let's put a string a B Zulily output a to b 2.

60

00:04:28,500  -->  00:04:29,700
So we have an error here.

61

00:04:29,700  -->  00:04:31,360
What's going on.

62

00:04:31,410  -->  00:04:38,400
The reason for the error is because we need to reset the count after we've redefined our.

63

00:04:38,430  -->  00:04:42,050
So I need to put in CNC here equal to 1.

64

00:04:42,210  -->  00:04:46,690
And now if we run it you'll notice we get the correct result 8 to beat 1.

65

00:04:46,710  -->  00:04:49,500
Let's try on more examples.

66

00:04:49,500  -->  00:04:52,050
Here you have four seats so I should get 8 to be 1.

67

00:04:52,060  -->  00:04:53,360
See.

68

00:04:53,670  -->  00:04:54,740
We have eight to 1.

69

00:04:54,800  -->  00:05:02,600
A to be one seat for by it on a maybe a to b one are still good there.

70

00:05:02,880  -->  00:05:09,050
Let's see if it does lowercase good capitally lower case a too.

71

00:05:09,060  -->  00:05:10,110
All right so that's it.

72

00:05:10,140  -->  00:05:14,910
Let's go ahead and go over this run length compression algorithm one more time.

73

00:05:15,780  -->  00:05:17,470
So what are we doing here.

74

00:05:17,520  -->  00:05:25,560
We're just setting this run equal to an entire string l equal to a length of less checking or edge cases

75

00:05:26,220  -->  00:05:28,700
initializing some variables.

76

00:05:28,980  -->  00:05:32,410
In this case sometimes people use last as a marker.

77

00:05:32,460  -->  00:05:39,090
We didn't actually use it but just keep that in mind some people tend to use that will also put in a

78

00:05:39,090  -->  00:05:39,870
while loop.

79

00:05:39,870  -->  00:05:45,510
So what's the while loop doing this is the heart of the algorithm we're saying while this index is less

80

00:05:45,510  -->  00:05:48,410
than all of the string.

81

00:05:48,960  -->  00:05:55,420
If the string at that index is equal to the index before it.

82

00:05:55,770  -->  00:06:00,800
So that means if that element is equal to the element before we go ahead and add accounts.

83

00:06:00,930  -->  00:06:05,360
Otherwise we build out this section of the run which is going to be our.

84

00:06:05,700  -->  00:06:09,220
In this case if you look at what we are equal to an empty string.

85

00:06:09,270  -->  00:06:15,990
So in the first run that's just an empty string plus that very last previous element plus the string

86

00:06:15,990  -->  00:06:16,830
of the count.

87

00:06:16,920  -->  00:06:18,530
So all these counts added together.

88

00:06:18,540  -->  00:06:21,500
Compare it to a string and then we reset the count.

89

00:06:21,750  -->  00:06:25,340
Once we did that we went ahead and added 1 to i.

90

00:06:25,710  -->  00:06:30,370
And then we're back at the While loop until we're no longer less than the length of the string.

91

00:06:30,430  -->  00:06:34,250
And then finally we add all the RS together in the same fashion.

92

00:06:34,290  -->  00:06:36,240
We did it up here.

93

00:06:36,240  -->  00:06:38,360
Then we just returned that run.

94

00:06:38,760  -->  00:06:39,440
OK.

95

00:06:39,660  -->  00:06:41,060
That's it for this solution.

96

00:06:41,070  -->  00:06:45,620
Go ahead and go over the full notebook if you want every step explained as a comment.

97

00:06:45,810  -->  00:06:47,360
But that's basically it.

98

00:06:47,370  -->  00:06:47,930
All right.

99

00:06:48,090  -->  00:06:49,450
Thanks Ron and I'll see you the next
