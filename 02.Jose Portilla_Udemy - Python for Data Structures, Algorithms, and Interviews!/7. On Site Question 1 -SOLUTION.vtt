WEBVTT
1

00:00:01.440  -->  00:00:06.290
Hello everyone and welcome to the first onsight question solution for the social network company.

2

00:00:06.300  -->  00:00:12.150
Mock interview for this problem you were given a list of integers and a target number.

3

00:00:12.480  -->  00:00:17.370
Then you were assigned to write a function that returns a boolean indicating if it's possible to sum

4

00:00:17.400  -->  00:00:23.130
two of the integers from that list to reach the target number and you had a requirement here you cannot

5

00:00:23.130  -->  00:00:24.720
use an integer element twice.

6

00:00:24.840  -->  00:00:29.010
You have optimized for time over space.

7

00:00:29.010  -->  00:00:33.310
So for this problem we're actually going to take advantage of a set data structure.

8

00:00:33.420  -->  00:00:37.190
We just took advantage of a set in the last phone screen problem.

9

00:00:37.220  -->  00:00:38.530
We're going to do it again.

10

00:00:38.650  -->  00:00:45.210
Really want to iterate here that the set is a very very useful data structure and sometimes it doesn't

11

00:00:45.210  -->  00:00:50.880
come to mind as much as say a list or strip dictionary.

12

00:00:50.940  -->  00:00:52.500
So sets a really really useful.

13

00:00:52.530  -->  00:00:55.690
And we're going to make use of it again in this particular solution.

14

00:00:55.810  -->  00:01:02.400
What we're going to do is make a single pass through that list of integers and then treat each element

15

00:01:02.460  -->  00:01:07.860
as a first integer and our possible sum then each iteration we're going to check to see if there's a

16

00:01:07.860  -->  00:01:12.870
second integer which will allow us to hit the target number and then we're going to use a set to check

17

00:01:12.870  -->  00:01:17.910
if we've already seen in our list then we're going to update our scene set by adding the current number

18

00:01:17.910  -->  00:01:19.460
in the iteration to it.

19

00:01:19.470  -->  00:01:26.550
So this should be really similar to what we just did as far as using a set as an already seen

20

00:01:29.200  -->  00:01:29.660
holder.

21

00:01:29.670  -->  00:01:32.150
So we're going to do is taking that list.

22

00:01:32.180  -->  00:01:41.430
Ls t and then have our target then we're going to create a variable called scene and have it be an empty

23

00:01:41.430  -->  00:01:42.580
set again.

24

00:01:43.080  -->  00:01:46.950
So this should be really familiar to you from the last problem we just did.

25

00:01:47.160  -->  00:01:50.050
And this is really what a set is super useful for.

26

00:01:50.160  -->  00:01:54.480
If you ever have an interview problem where you're thinking hey how can I keep track of integers or

27

00:01:54.480  -->  00:01:58.720
elements that I've already seen a set should definitely come to mind.

28

00:01:58.810  -->  00:02:07.920
All right so now we want to go throughout the list so say for now analysts are going to find out if

29

00:02:07.920  -->  00:02:11.670
there's a second number that sums up with the number to reach the target.

30

00:02:11.670  -->  00:02:17.580
And in order to do that I just use a simple so traction here I'm going to say number two equals target

31

00:02:18.600  -->  00:02:32.580
minus number then if number two has already been seen I'm going to return true after that if that if

32

00:02:32.580  -->  00:02:38.280
statement doesn't happen I'm going to add that number to scene and then if it never gets hit I'm just

33

00:02:38.280  -->  00:02:40.620
going to return false.

34

00:02:40.620  -->  00:02:40.890
All right.

35

00:02:40.920  -->  00:02:43.440
So let's think about what's actually happening here.

36

00:02:43.440  -->  00:02:44.730
It's pretty simple code.

37

00:02:44.910  -->  00:02:46.570
And the idea should be pretty straightforward.

38

00:02:46.570  -->  00:02:52.470
I have seen variable and it's an empty set and then I'm going along and saying for every number in that

39

00:02:52.470  -->  00:02:58.480
list I want to find a second number which makes me reach that target number.

40

00:02:58.490  -->  00:03:05.240
So I have my targets minus the current number in that list equal to number two.

41

00:03:05.460  -->  00:03:12.010
And if I've already seen that number two if it's already in Seen I'm going to return true.

42

00:03:12.240  -->  00:03:19.190
And then if that doesn't happen if this if statement doesn't become in scene I won't return anything

43

00:03:19.200  -->  00:03:22.710
so I keep going and add that number to seen otherwise.

44

00:03:22.740  -->  00:03:28.290
If I go throughout this entire list and never see it I'm just going to return false.

45

00:03:28.390  -->  00:03:34.650
And so this is why I mentioned we're optimizing for time over space because in space we're actually

46

00:03:34.650  -->  00:03:40.740
keeping track of every number that we've already seen which isn't so great for space efficiency but

47

00:03:40.740  -->  00:03:42.280
as far as time efficiency.

48

00:03:42.450  -->  00:03:45.790
What's nice is that we're only doing one run through this list.

49

00:03:46.200  -->  00:03:46.880
OK.

50

00:03:47.130  -->  00:03:48.950
So that's it for the solution.

51

00:03:49.050  -->  00:03:54.420
Again we're just taking advantage of a set data structure making a single pass through the list of integers

52

00:03:54.720  -->  00:03:58.240
and treating each element as the first integer of our possible sum.

53

00:03:58.640  -->  00:04:03.720
Then each iteration we will check to see if there's a second integer which allows us to hit that target

54

00:04:03.720  -->  00:04:06.430
number which is what this is.

55

00:04:07.050  -->  00:04:12.210
And we're going to use a set to check if we've already seen in our list which is what's happening here

56

00:04:12.690  -->  00:04:15.770
here and then numb to insane.

57

00:04:16.350  -->  00:04:20.460
Then we're going to update our scene set by adding the current number to the iteration which we do here

58

00:04:20.470  -->  00:04:20.550
.

59

00:04:20.670  -->  00:04:25.650
If we don't end up returning true we go throughout the entire list and that number two is never in that

60

00:04:25.650  -->  00:04:28.410
scene set where you can return false.

61

00:04:28.410  -->  00:04:29.020
All right.

62

00:04:29.230  -->  00:04:30.450
That's it again.

63

00:04:30.480  -->  00:04:35.550
Remember to keep that set data structure in the back of your mind especially if you're trying to keep

64

00:04:35.550  -->  00:04:37.030
track of something.

65

00:04:37.260  -->  00:04:38.040
OK.

66

00:04:38.100  -->  00:04:40.200
Thanks everyone and I'll see you at the next solution lecture
