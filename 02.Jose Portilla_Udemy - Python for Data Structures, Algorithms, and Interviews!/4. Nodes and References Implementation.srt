1

00:00:01,830  -->  00:00:08,360
Hello everyone and welcome to lecture on the notes and references implementation of a tree.

2

00:00:08,370  -->  00:00:13,890
So in this case what we're going to do is to find a class that has attributes for the value as well

3

00:00:13,890  -->  00:00:18,250
as left and right subtrees and then some methods within that class.

4

00:00:18,250  -->  00:00:24,900
So is this representation more closely follows object oriented programming or O.P. of classes in Python

5

00:00:24,900  -->  00:00:25,310
.

6

00:00:25,440  -->  00:00:29,460
We're going to continue to use the sort of representation for the remainder of the section of the course

7

00:00:29,850  -->  00:00:33,690
so it won't do that Listable it's representation.

8

00:00:33,780  -->  00:00:38,250
So just a reminder this is the kind of trip we're going to try to implement using object oriented programming

9

00:00:38,330  -->  00:00:43,230
with notes and references so you can see nodes of ABC as root node.

10

00:00:43,350  -->  00:00:49,510
And it splits off into left and right children and let's go ahead and go implement it.

11

00:00:50,790  -->  00:00:55,470
All right so now I'm here at the Jupiter notebook representing a tree notes and references.

12

00:00:55,830  -->  00:00:58,730
So as always there's a reference book under the trees folder.

13

00:00:58,800  -->  00:01:01,020
This is the code we're going to be implementing here.

14

00:01:01,260  -->  00:01:03,390
And here are some examples of the code being used.

15

00:01:03,390  -->  00:01:05,240
So let's go ahead and get started.

16

00:01:05,820  -->  00:01:07,010
OK.

17

00:01:07,680  -->  00:01:11,870
First thing we're going to do is start out with a simple class definition.

18

00:01:12,090  -->  00:01:17,850
So I'm just going to say class call it binary tree.

19

00:01:18,240  -->  00:01:23,070
And objects and the start of its attributes.

20

00:01:23,580  -->  00:01:28,620
So the important thing to remember about this representation is that the attributes left and right will

21

00:01:28,620  -->  00:01:32,770
become references to other instances of the binary tree.

22

00:01:32,820  -->  00:01:41,860
So let's going to make it pass and self and then going to pasan or just call it roots.

23

00:01:42,260  -->  00:01:48,690
Oh B.J. for Root objects and I mentioned earlier that we sometimes call that root the key.

24

00:01:48,690  -->  00:01:55,480
So we'll go ahead and say self-direct key is equal to root O.B. J.

25

00:01:56,190  -->  00:02:02,220
And as I mentioned before we're going to have left and right attributes become references to other instances

26

00:02:02,220  -->  00:02:03,850
of the binary tree.

27

00:02:03,870  -->  00:02:08,730
So for example when we insert a new life child into the tree we're actually creating another instance

28

00:02:08,730  -->  00:02:10,500
of binary tree.

29

00:02:10,890  -->  00:02:15,600
In this case we're going to just start off with no child's or no children.

30

00:02:15,600  -->  00:02:25,080
So we're going to say left child equals none to start off with and then say self-taught right child

31

00:02:25,440  -->  00:02:28,890
equals also none to start off with.

32

00:02:29,910  -->  00:02:36,120
OK so something to notice here is that the constructor function expects to get some kind of object to

33

00:02:36,120  -->  00:02:40,290
store in that route just like you can store any object you like in a list.

34

00:02:40,290  -->  00:02:44,050
The object of a tree can be a reference to any object.

35

00:02:44,600  -->  00:02:46,150
OK.

36

00:02:46,170  -->  00:02:46,720
Next.

37

00:02:46,740  -->  00:02:51,540
Well we're going to do is look at functions we need to build a tree beyond that root node.

38

00:02:51,540  -->  00:03:03,210
So what I would want to do is have an inserts left and take self and then some new node.

39

00:03:04,110  -->  00:03:11,030
And I'm actually going to put in pass here for now and then we're also going to have inserts rights

40

00:03:11,230  -->  00:03:19,990
and it would also take a self new node and we'll put it pass there.

41

00:03:20,220  -->  00:03:27,540
So to add a left child to the tree we're going to create a new binary tree object and set the left attribute

42

00:03:27,690  -->  00:03:30,620
of the root to refer to this new object.

43

00:03:30,630  -->  00:03:35,670
So in order to do that we can start filling out insert left.

44

00:03:35,670  -->  00:03:46,200
So I got to say if self stop left child is equal to none meaning we don't have anything there yet.

45

00:03:46,470  -->  00:03:57,240
What I'm going to do is say self dot left child is equal to a new instance of a binary tree.

46

00:03:59,310  -->  00:04:07,550
In this case if that root node being new node otherwise.

47

00:04:07,980  -->  00:04:15,150
Similarly when we were doing the list of lists and a certain object or variable t would be equal to

48

00:04:15,150  -->  00:04:25,980
a binary tree of new node and say the left child is equal to the self-taught left child

49

00:04:28,740  -->  00:04:30,810
and then say self-taught left child

50

00:04:34,440  -->  00:04:37,490
is then equal to see.

51

00:04:37,680  -->  00:04:43,120
All right let's go ahead and break down what this code is actually doing on the insert left.

52

00:04:43,230  -->  00:04:46,400
We're going to have to consider two cases for insertion.

53

00:04:46,410  -->  00:04:50,890
The first case is going to be characterized by a node with no existing left child.

54

00:04:51,210  -->  00:04:53,620
So self-taught left child is equal to none.

55

00:04:54,340  -->  00:04:58,920
When there's no left child we're just simply adding a note to the tree.

56

00:04:58,940  -->  00:05:04,040
The second case is going to be characterized by a note of an existing left child else.

57

00:05:04,310  -->  00:05:11,270
So in the second case we insert a note and push the existing child down one level in the tree.

58

00:05:11,290  -->  00:05:14,260
The second case is handled by the else statement.

59

00:05:14,560  -->  00:05:18,310
So make sure you review this and make sure you understand what's actually going on.

60

00:05:18,340  -->  00:05:22,500
First case there's no left child so we're simply adding a note to that tree.

61

00:05:22,510  -->  00:05:29,350
Second case we haven't noticed an existing love child so we insert a node and push the existing child

62

00:05:29,350  -->  00:05:31,890
down one level in the tree.

63

00:05:31,900  -->  00:05:36,440
So the code for insert right is going to consider a symmetric set of cases.

64

00:05:36,640  -->  00:05:41,650
There will be either no right child or we must insert the node between the root and an existing right

65

00:05:41,650  -->  00:05:43,010
child.

66

00:05:43,060  -->  00:05:45,090
So let's go ahead and code that out.

67

00:05:45,100  -->  00:05:55,090
It's going to be really similar going to say if self-taught right child is equal to none then we just

68

00:05:55,120  -->  00:06:04,150
insert that node right child is equal to an instance of binary tree with no node.

69

00:06:06,070  -->  00:06:06,790
And there we're going to say.

70

00:06:06,790  -->  00:06:13,650
Else t's equal to binary tree within you node number.

71

00:06:13,690  -->  00:06:16,710
We're going to push it down to 1 so we're going to say the right child.

72

00:06:16,750  -->  00:06:26,560
Let me scroll over to the right child as the call to self starts right child.

73

00:06:26,560  -->  00:06:35,170
Then finally set self the right child equal to the reason for doing this is so you don't accidentally

74

00:06:35,200  -->  00:06:38,490
overwrite something before you said it.

75

00:06:39,170  -->  00:06:39,650
OK.

76

00:06:39,940  -->  00:06:45,160
So now to round out the definition for a simple binary tree data structure we're going to write some

77

00:06:45,160  -->  00:06:50,080
methods that allow us to access things such as the right and left children as well as the root nodes

78

00:06:50,100  -->  00:06:50,610
.

79

00:06:51,130  -->  00:06:53,700
So this will just be for methods.

80

00:06:54,210  -->  00:06:58,180
Let's get some space here.

81

00:06:58,510  -->  00:07:10,600
I'm going to say get right child self and then I'm going to return self-taught right child.

82

00:07:10,690  -->  00:07:11,500
So that makes sense.

83

00:07:11,500  -->  00:07:13,100
Forget the right child.

84

00:07:13,660  -->  00:07:17,210
Similarly I'm going to do the same for the left child.

85

00:07:17,800  -->  00:07:26,890
So get left child calls self and then it just returns self dots left.

86

00:07:26,900  -->  00:07:33,150
Child I also want two functions for setting the value and getting the value.

87

00:07:33,270  -->  00:07:36,560
So for setting the value we'll just call it set root.

88

00:07:36,620  -->  00:07:37,060
Well

89

00:07:40,540  -->  00:07:46,750
and it's actually going to need to take Oby some object to set the value and then we're going to say

90

00:07:46,750  -->  00:07:52,670
sulphite key is equal to that object that you pass.

91

00:07:52,960  -->  00:07:57,390
And then lastly to get the root value root.

92

00:07:57,430  -->  00:08:03,980
Now we just need to pass in self and we're just going to return.

93

00:08:04,680  -->  00:08:07,130
So the key.

94

00:08:08,200  -->  00:08:08,790
OK.

95

00:08:08,920  -->  00:08:12,270
So let's go ahead and quickly review what we just did.

96

00:08:12,970  -->  00:08:15,460
We have a class binary tree.

97

00:08:15,460  -->  00:08:17,120
We start off with the attributes.

98

00:08:17,120  -->  00:08:21,280
Set the key are equal to that object that root node.

99

00:08:21,580  -->  00:08:23,300
No children start off with.

100

00:08:23,590  -->  00:08:29,500
And then we have to basically symmetrical methods for inserting left and right notes and you can see

101

00:08:29,500  -->  00:08:31,860
that we check if there's something there.

102

00:08:32,440  -->  00:08:35,830
If there is if there isn't we just said it equal to the new binary tree.

103

00:08:35,840  -->  00:08:42,070
Otherwise we're going to push it down to the new level and then we have four methods for getting in

104

00:08:42,080  -->  00:08:48,250
retrieving children and also getting in retrieving root values.

105

00:08:48,250  -->  00:08:53,590
So let's go ahead and make a simple tree to show how this can work.

106

00:08:53,600  -->  00:09:02,300
First thing we're going to do is set our equal to an instance of binary tree and we're going to set

107

00:09:02,380  -->  00:09:13,360
a string a Whoops got an error here and that's because I forgot to write this correctly.

108

00:09:13,370  -->  00:09:14,660
Sorry about that.

109

00:09:15,180  -->  00:09:15,600
OK.

110

00:09:15,750  -->  00:09:17,750
Sonera things working.

111

00:09:17,750  -->  00:09:22,050
Remember if you ever have to double underscores in Python you also need to close them out.

112

00:09:22,750  -->  00:09:23,150
All right.

113

00:09:23,230  -->  00:09:27,840
Going down we have our binary tree our.

114

00:09:27,860  -->  00:09:31,210
So let's go ahead and just start off by getting that root value.

115

00:09:31,530  -->  00:09:37,610
So I can say by TAB get Val let's go and close print.

116

00:09:37,620  -->  00:09:39,600
So we actually get something returns.

117

00:09:39,600  -->  00:09:40,090
All right.

118

00:09:40,180  -->  00:09:42,340
And there we have that value.

119

00:09:42,350  -->  00:09:49,280
So if we say get child such as left child we shouldn't actually get anything.

120

00:09:49,270  -->  00:09:50,510
So that's a nun.

121

00:09:50,500  -->  00:09:55,250
So if we actually print this out you'll notice it turns none up.

122

00:09:55,270  -->  00:09:56,060
All right.

123

00:09:56,060  -->  00:09:58,860
So let's go and try inserting a left child.

124

00:09:59,120  -->  00:10:05,880
So I'm going to say our thoughts insert let's call it be.

125

00:10:06,430  -->  00:10:08,770
So he inserted something to the left.

126

00:10:08,770  -->  00:10:15,710
So if I say our dots get left child they'll notice something interesting happens here.

127

00:10:15,770  -->  00:10:20,080
Remember we actually get another instance of that binary tree.

128

00:10:20,120  -->  00:10:32,680
So what I could do is then call roots off of this I second say then gets root value and then that's

129

00:10:32,680  -->  00:10:34,260
how we get B.

130

00:10:34,270  -->  00:10:39,200
So this nos and reference systems you're referring to subtrees again.

131

00:10:39,250  -->  00:10:44,330
So you have your main tree and then subtrees within it which is why we just call that left child.

132

00:10:44,470  -->  00:10:47,980
You got an instance of that binary tree.

133

00:10:48,080  -->  00:10:48,440
All right.

134

00:10:48,500  -->  00:10:52,690
So that's it for the basic implementation using nodes and references.

135

00:10:52,690  -->  00:10:56,510
What I encourage you to do is try to build out your own tree.

136

00:10:56,530  -->  00:11:03,040
So write a tree down just a simple one on a piece of paper and then see if using this implementation

137

00:11:03,400  -->  00:11:06,980
you can actually code it out and insert the children correctly.

138

00:11:06,970  -->  00:11:07,530
All right.

139

00:11:07,690  -->  00:11:08,920
That's it for this lecture.

140

00:11:08,980  -->  00:11:10,150
I'll see if the next one.

141

00:11:10,480  -->  00:11:11,450
Thank you.
