1

00:00:01,110  -->  00:00:05,380
Hello everyone and welcome to the solution for the sentence reversal problem.

2

00:00:05,640  -->  00:00:09,640
But this problem given a string of words you had to reverse all the words.

3

00:00:10,020  -->  00:00:14,670
So for example this is the best turned into the is this.

4

00:00:15,020  -->  00:00:19,130
You also have to take care of all leading and trailing whitespace.

5

00:00:19,130  -->  00:00:24,150
Do you know Python Well you could have taken advantage of Python's abilities to solve the problem using

6

00:00:24,150  -->  00:00:25,760
split and some slicing.

7

00:00:25,800  -->  00:00:28,890
Or of the use of the reversed builtin function.

8

00:00:28,950  -->  00:00:32,940
So these are basically one line solutions to the problem.

9

00:00:32,940  -->  00:00:37,440
The issue of these even though they are valid solutions in an interview setting you'll have to work

10

00:00:37,440  -->  00:00:39,520
out the basic algorithm that is used.

11

00:00:39,810  -->  00:00:45,720
So in this case we want to do is actually loop over the text and extract words from the string themselves

12

00:00:45,720  -->  00:00:46,350
.

13

00:00:46,680  -->  00:00:51,300
Then we can push the words to a stack and in the end put them all in reverse.

14

00:00:51,450  -->  00:00:54,590
So let's go in and see what this actually it looks like.

15

00:00:55,110  -->  00:00:56,980
Again all these are valid solutions.

16

00:00:57,240  -->  00:00:59,380
You probably shouldn't do them in an interview setting.

17

00:00:59,400  -->  00:01:02,820
You can go ahead and make your interviewer aware that you know how to do this.

18

00:01:03,180  -->  00:01:08,760
But it's kind of cheating using Python's abilities which you really want to do is manually do the splits

19

00:01:08,760  -->  00:01:11,640
on the spaces yourself in reverse everything.

20

00:01:11,640  -->  00:01:15,710
So we're going to do is go ahead and do this.

21

00:01:15,720  -->  00:01:20,260
So let's go ahead and jump to the solution and explain as we go along.

22

00:01:20,640  -->  00:01:27,270
So I'll start by having read underscore word function taken a string S

23

00:01:30,300  -->  00:01:38,190
then we're going to go ahead and start off by making a list called the words a variable called length

24

00:01:38,460  -->  00:01:46,920
which is just going to be the length of the string and then a list called spaces which is just going

25

00:01:46,920  -->  00:01:52,440
to consist of an empty string just a space of a stream there and we'll see where we use that in a second

26

00:01:52,450  -->  00:01:52,980
.

27

00:01:53,490  -->  00:01:58,230
Finally I'm going to make a variable called equal zero and that's because it's going to be an index

28

00:01:58,230  -->  00:02:03,260
tracker because we're going to be using a while loop to solve this.

29

00:02:03,270  -->  00:02:18,330
So again to say while I is less than length if as of-I is not in spaces and there's a variety of ways

30

00:02:18,330  -->  00:02:22,380
you can do this you could have also which is not in spaces.

31

00:02:22,390  -->  00:02:31,680
Meaning if the elements in that list isn't a space you could have also just said double equal sign to

32

00:02:31,710  -->  00:02:36,740
that and you could have also have managed to do this as some sort of a for loop.

33

00:02:36,810  -->  00:02:41,080
But we're just doing it in these general terms in case you want to switch languages.

34

00:02:41,730  -->  00:02:46,440
We're going to say if the element is a space then the word starts with the index are going to say Wordstar

35

00:02:48,830  -->  00:02:50,430
equals I.

36

00:02:51,570  -->  00:03:01,170
And then while I is less than the length and as of-I is not in spaces meaning we haven't hit a space

37

00:03:01,170  -->  00:03:05,810
yet but we're going to do is try to get the index where the word ends.

38

00:03:05,970  -->  00:03:16,230
So in that case what I'm going to do is add one to I and then outside of that I'm going to say words

39

00:03:16,330  -->  00:03:18,660
not pens

40

00:03:21,620  -->  00:03:23,850
and I'm going to pen from where it starts

41

00:03:27,090  -->  00:03:29,080
all the way to the index.

42

00:03:29,100  -->  00:03:34,800
We got off and then I'm going to say line it up with that.

43

00:03:34,830  -->  00:03:41,730
If they're going to add to the index then finally what I have are all the reversed words.

44

00:03:41,730  -->  00:03:44,550
So in this case I'm just going to return

45

00:03:49,980  -->  00:03:53,960
my reversed words joined up.

46

00:03:55,190  -->  00:03:59,040
OK let's go ahead and test the solution.

47

00:03:59,070  -->  00:04:02,870
So we make sure it works.

48

00:04:03,240  -->  00:04:06,880
I'm going to go ahead and copy some statements.

49

00:04:06,960  -->  00:04:09,890
So for instance if we do this.

50

00:04:09,900  -->  00:04:11,560
Hello John how are you.

51

00:04:11,550  -->  00:04:14,580
No the white space we've got an air.

52

00:04:14,580  -->  00:04:15,930
So what's the problem.

53

00:04:15,970  -->  00:04:18,230
No space is not defined.

54

00:04:18,330  -->  00:04:28,370
So if we go to that line in spaces we'll do this right here and now we have.

55

00:04:28,380  -->  00:04:29,280
You are how John.

56

00:04:29,280  -->  00:04:29,840
Hello.

57

00:04:30,030  -->  00:04:31,220
Okay great.

58

00:04:31,230  -->  00:04:32,150
So we know it's working.

59

00:04:32,160  -->  00:04:38,190
Let's do one more example to make sure we don't have any more errors space before the return before

60

00:04:38,190  -->  00:04:40,190
space for space.

61

00:04:40,200  -->  00:04:41,120
OK great.

62

00:04:41,580  -->  00:04:46,710
So let's go ahead and go over this solution.

63

00:04:46,710  -->  00:04:48,020
What are we doing here.

64

00:04:48,060  -->  00:04:55,410
We're setting words as an empty list length is just a marker of that length list spaces is just equal

65

00:04:55,410  -->  00:04:58,150
to a list with a whitespace in it.

66

00:04:58,230  -->  00:05:02,850
The first element that is equal to zero.

67

00:05:02,850  -->  00:05:06,280
So we're saying while I is less than length.

68

00:05:06,720  -->  00:05:15,310
So while we haven't gone through out the entire string basically if SMI is not in spaces meaning if

69

00:05:15,310  -->  00:05:22,820
Sri is not equal to this then we know the Wordstar the start of that word is that that index.

70

00:05:22,890  -->  00:05:27,440
So then well I's less than length and size not in space.

71

00:05:27,600  -->  00:05:31,980
Which basically means keep going until we haven't hit another space.

72

00:05:31,980  -->  00:05:34,140
Add one to the index.

73

00:05:34,290  -->  00:05:38,100
Then once that wildlife has completed we're going to append.

74

00:05:38,190  -->  00:05:42,700
So that word's list from the words start index all the way to that new I.

75

00:05:42,750  -->  00:05:51,330
Basically once we hit that then we add one to the index and keep going until it is less then until this

76

00:05:51,330  -->  00:05:54,570
is no longer true until I am no longer less than a.

77

00:05:54,780  -->  00:05:56,730
After that we just joined that list.

78

00:05:56,730  -->  00:06:01,650
The other was the reversed works spaces in between just one space.

79

00:06:01,650  -->  00:06:04,670
So if you wanted to further develop the solution.

80

00:06:04,680  -->  00:06:06,580
So it's completely manual.

81

00:06:06,600  -->  00:06:09,550
You can also create your own reversal function here.

82

00:06:09,660  -->  00:06:10,560
That's pretty easy.

83

00:06:10,560  -->  00:06:14,460
So I'll leave that as an exercise to you to go ahead and figure out.

84

00:06:14,460  -->  00:06:22,880
So if you want we can just say return words here and let's see what we get here.

85

00:06:22,890  -->  00:06:26,000
So now we have a list of words in order.

86

00:06:26,280  -->  00:06:28,700
So go ahead and write your own function.

87

00:06:29,370  -->  00:06:40,050
So same death final output that takes in that word's list.

88

00:06:40,050  -->  00:06:51,930
And what I want you to do is kind of your homework assignment is fill this in so that the list comes

89

00:06:51,930  -->  00:06:57,800
out as a reversed string.

90

00:06:57,810  -->  00:06:58,210
All right.

91

00:06:58,350  -->  00:07:04,740
So go ahead and practice manually reversing this list into a string.

92

00:07:04,890  -->  00:07:07,210
So that becomes something like this.

93

00:07:07,740  -->  00:07:13,320
But the point of this section here is to figure out how to use while loops in succession in order to

94

00:07:13,320  -->  00:07:17,270
mark where it starts and word endings.

95

00:07:17,370  -->  00:07:19,770
There's lots of different ways you could have solved this problem.

96

00:07:19,770  -->  00:07:22,870
So don't worry if your solution wasn't exactly like this.

97

00:07:23,070  -->  00:07:24,300
There's plenty of ways you can do it.

98

00:07:24,300  -->  00:07:25,600
You can do it using four loops.

99

00:07:25,620  -->  00:07:27,640
So don't worry about that again.

100

00:07:27,660  -->  00:07:30,400
Just make sure you understand how to do this solution.

101

00:07:30,540  -->  00:07:33,900
And as long as your solution works you should be fine.

102

00:07:33,900  -->  00:07:34,660
All right.

103

00:07:34,860  -->  00:07:36,420
Thanks and I'll see you at the next lecture
