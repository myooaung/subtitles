WEBVTT
1

00:00:01.380  -->  00:00:06.070
Hello everyone and welcome to the linked list reversal solution lecture.

2

00:00:06.150  -->  00:00:11.250
Again your problem statement was to write a function to reverse a linked list in place.

3

00:00:11.250  -->  00:00:16.560
The function should take the head of the list as input and then return the new head of the list you

4

00:00:16.560  -->  00:00:19.810
were given this example of a linked list node class.

5

00:00:20.110  -->  00:00:22.210
And now let's go over the solution.

6

00:00:22.800  -->  00:00:28.030
Since you want to do this in place you want to make the function operate in constant space.

7

00:00:28.170  -->  00:00:32.510
Meaning we don't create a new list and add elements to it or set up some other nodes.

8

00:00:32.520  -->  00:00:37.490
We have to do it in place so we will simply use the current nodes.

9

00:00:37.740  -->  00:00:41.940
Time wise we can actually perform this reversal linearly in linear time.

10

00:00:41.940  -->  00:00:48.190
Big O N we can reverse the list by changing the next pointer of each node each node.

11

00:00:48.210  -->  00:00:53.940
Next pointer should point to the previous node in one pass from head to tail for input list.

12

00:00:53.940  -->  00:00:58.030
We will point each node next pointer to the previous element.

13

00:00:58.080  -->  00:01:04.940
Make sure to copy the current thought next node attribute into the next node before setting the current

14

00:01:04.950  -->  00:01:10.530
next note the previous So hopefully that sounds a little familiar from the lectures as far as how to

15

00:01:10.620  -->  00:01:13.680
insert new notes and the order to do it.

16

00:01:13.680  -->  00:01:18.760
In this case we're not inserting anything new or different versing the linked list in place.

17

00:01:19.080  -->  00:01:23.700
Let's go ahead and see this idea and strategy implemented out in code.

18

00:01:23.700  -->  00:01:26.750
I'm a go ahead and hop over to Juber notebook.

19

00:01:27.210  -->  00:01:27.640
All right.

20

00:01:27.750  -->  00:01:29.840
And let's go ahead and get started.

21

00:01:29.850  -->  00:01:39.150
First thing I'm going to do is start by writing up my function single-A to say D F just call it reverse

22

00:01:39.240  -->  00:01:42.280
and it takes in that head node.

23

00:01:42.870  -->  00:01:50.940
Well I'm going to do set up three variables current previous and next and these just dance for the nodes

24

00:01:50.940  -->  00:01:51.300
I meant.

25

00:01:51.330  -->  00:02:01.560
So currents will start off as the head node previous will just be none for now looks and say next node

26

00:02:01.980  -->  00:02:06.180
is also equal to none right now.

27

00:02:06.180  -->  00:02:07.830
Now we're going to say while

28

00:02:11.350  -->  00:02:17.670
currents and this while loop will essentially let us know until we have gone through the end of the

29

00:02:17.670  -->  00:02:24.660
list then we're going to do is make sure to copy the current nodes next node to a variable next node

30

00:02:24.720  -->  00:02:28.930
before overwriting as the previous node for reversal.

31

00:02:29.050  -->  00:02:40.620
And what I mean by that is doing this offset next node variable equal to the current next underscore

32

00:02:40.770  -->  00:02:43.680
actually next node in this case.

33

00:02:43.680  -->  00:02:49.290
Let me go ahead and paste in will say pass here for now.

34

00:02:49.500  -->  00:02:53.730
Just so I can paste in the cell code here.

35

00:02:54.600  -->  00:02:59.720
Copy and paste it just so you'll remember what the actual attributes are.

36

00:02:59.720  -->  00:03:02.470
We have value and next note.

37

00:03:02.980  -->  00:03:03.590
All right.

38

00:03:04.050  -->  00:03:05.090
So just continuing on.

39

00:03:05.090  -->  00:03:08.000
So he set next node equal to current that next node.

40

00:03:08.010  -->  00:03:14.310
The reason I stopped for a bit is because in some of the node implementations we did we had an underscore

41

00:03:14.310  -->  00:03:14.680
there.

42

00:03:14.820  -->  00:03:17.670
That's pretty much up to you on how you implement it.

43

00:03:17.880  -->  00:03:22.910
But in this case for the solution book we didn't have an underscore there so I'll just say next node

44

00:03:22.960  -->  00:03:26.840
variable equals the current nodes next node.

45

00:03:26.940  -->  00:03:32.710
So I want to make sure to copy the current notes next to a variable next node before overwriting as

46

00:03:32.710  -->  00:03:34.810
the previous note for reversal.

47

00:03:34.870  -->  00:03:38.170
Then I'm going to reverse the pointer to the next note in say current

48

00:03:40.770  -->  00:03:46.770
dot next node is equal to previous.

49

00:03:47.010  -->  00:03:54.870
Then I'm going to go one forward in the list which just means previous is now equal to current and current

50

00:03:55.110  -->  00:03:58.640
is equal to that next node.

51

00:03:59.280  -->  00:04:01.530
After all of that I just return

52

00:04:04.250  -->  00:04:06.180
previous.

53

00:04:06.180  -->  00:04:09.000
Let's go ahead and run this and test our solution.

54

00:04:09.000  -->  00:04:16.770
Zoom out a bit and as I noted in the previous lecture we can just copy and paste what the cell says

55

00:04:16.800  -->  00:04:17.350
there.

56

00:04:17.580  -->  00:04:24.830
So we create a list of four nodes set up that order A B C D with values 1 2 3 4.

57

00:04:25.020  -->  00:04:31.210
We go ahead and print those values I'm just copying and pasting from that solution book and then we

58

00:04:31.210  -->  00:04:33.100
get two three four.

59

00:04:33.180  -->  00:04:38.530
Let's go ahead and reverse this in place.

60

00:04:39.300  -->  00:04:40.680
OK we reversed it.

61

00:04:40.800  -->  00:04:50.150
It returned and now it's prints DCB and we get 3 to 1.

62

00:04:50.530  -->  00:04:55.490
Ok so now we can see that each the values points to the actual previous value.

63

00:04:55.620  -->  00:05:01.680
Given that we're calling the next note of d to actually 3 now see next notice pointed to is not pointing

64

00:05:01.680  -->  00:05:04.680
to 1 etc. instead of the other way around.

65

00:05:04.830  -->  00:05:05.500
Where being x.

66

00:05:05.500  -->  00:05:10.240
Notice pointing to three this case we don't do d.

67

00:05:10.560  -->  00:05:14.890
In this first one or in the first one because they're both pointed to none.

68

00:05:14.910  -->  00:05:17.360
All right that's it for this problem.

69

00:05:17.430  -->  00:05:19.980
Let's just walk through the main code one more time.

70

00:05:19.980  -->  00:05:22.000
This reverse function.

71

00:05:22.150  -->  00:05:28.860
Oh we have to do is set Currence previous and next note and end this solution.

72

00:05:28.860  -->  00:05:35.700
The key thing to note is that you'd have to go through the entire list until the end of the list and

73

00:05:35.700  -->  00:05:41.030
you want to make sure to copy the current nodes next node before overwriting as the previous note for

74

00:05:41.040  -->  00:05:41.670
reversal.

75

00:05:41.670  -->  00:05:43.270
That's basically the trick to this.

76

00:05:43.500  -->  00:05:51.440
So making sure to copy that Curran's next node before overwriting the current next note is the previous

77

00:05:51.740  -->  00:05:54.480
So you mixed up this ordering.

78

00:05:54.480  -->  00:05:59.070
You won't have anything else to reference and the algorithm won't make sense anymore.

79

00:05:59.070  -->  00:06:04.690
After that you just set previous equal to current and then current equal to that next node.

80

00:06:04.710  -->  00:06:07.630
OK go ahead and check it out on your own.

81

00:06:07.650  -->  00:06:08.990
Make sure you understand that.

82

00:06:09.270  -->  00:06:10.650
But that's really all there is to it.

83

00:06:10.680  -->  00:06:15.880
As far as reversing a linked list in place this is a pretty common interview questions so make sure

84

00:06:15.880  -->  00:06:17.780
you fully understand that.

85

00:06:17.820  -->  00:06:20.530
Thanks everyone and I'll see you at the next lecture.
