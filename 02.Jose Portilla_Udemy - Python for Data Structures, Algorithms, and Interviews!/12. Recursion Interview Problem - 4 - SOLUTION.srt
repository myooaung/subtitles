1

00:00:01,620  -->  00:00:07,710
Hello everyone and welcome to the lecture discussing the coin change problem and its solution.

2

00:00:07,740  -->  00:00:14,100
As always there is a complete solution notebook here describing the solution so no problem.

3

00:00:14,100  -->  00:00:18,840
This problem is actually common enough that it has its own Wikipedia entry and it's a really famous

4

00:00:18,840  -->  00:00:25,260
problem in showing some of the issues with recursion in general and why dynamic programming and memorization

5

00:00:25,560  -->  00:00:30,030
is such a key tool to improving on basic recursion.

6

00:00:30,030  -->  00:00:35,580
So what we're going to do is go through basically two implementations of a solution.

7

00:00:35,610  -->  00:00:39,720
One is just a classic recursion that doesn't use memorization.

8

00:00:39,720  -->  00:00:41,820
So no the solution is not optimize.

9

00:00:41,940  -->  00:00:44,430
And then we go through a better solution.

10

00:00:44,490  -->  00:00:49,990
I would really encourage you to read through this entire solution note book first as well as read through

11

00:00:49,990  -->  00:00:50,010
.

12

00:00:50,010  -->  00:00:53,860
If you scroll all the way down to the notebook there's an extra resource here.

13

00:00:53,880  -->  00:00:56,020
Dynamic coin change problem.

14

00:00:56,040  -->  00:00:59,480
I would really recommend that you read the entire extra resource.

15

00:00:59,490  -->  00:01:05,250
It's just the page long that describes this exact same problem in why there are issues if normal recursion

16

00:01:06,330  -->  00:01:09,780
and also there's a Wikipedia entry that's linked here.

17

00:01:09,780  -->  00:01:16,020
You can also read and there's solutions as far as implementations with dynamic programming and it's

18

00:01:16,020  -->  00:01:18,740
in Python so you can read about it as well.

19

00:01:18,750  -->  00:01:19,300
All right.

20

00:01:19,680  -->  00:01:25,590
So let's go ahead and discuss the coin change problem then we're going to could and jumped to some life

21

00:01:27,360  -->  00:01:32,470
here and start by thinking about what the problem statements actually sing.

22

00:01:32,580  -->  00:01:39,120
So we're given a target amount n so some target amount of money we want to make or change we want to

23

00:01:39,120  -->  00:01:39,520
make.

24

00:01:39,690  -->  00:01:47,730
56 cents 50 cents 45 cents 46 cents etc. and then we're giving a list or an array of distinct coin values

25

00:01:48,180  -->  00:01:52,200
and we want to know what the fewest coins needed to make that change amount is.

26

00:01:52,770  -->  00:01:59,660
So for instance if we jump back to the solution book we can see here that if you have an equals 10 to

27

00:01:59,670  -->  00:02:03,770
your target number 10 and you giving values of 1 5 and 10.

28

00:02:03,780  -->  00:02:05,960
There's four possible ways to make change.

29

00:02:05,970  -->  00:02:10,620
You can have 10 ones of five and five ones two fives and a 10.

30

00:02:11,010  -->  00:02:15,950
And the correct answer for the minimum amount is of course just one coin that ten cent coin.

31

00:02:15,990  -->  00:02:21,030
So we're going to do is first do a classic recursion solution to this problem and then we'll talk about

32

00:02:21,030  -->  00:02:23,410
what the issues are with that solution.

33

00:02:23,490  -->  00:02:26,220
So it's going to get started first.

34

00:02:26,260  -->  00:02:32,400
I'll start just by calling the E-F Ari underscore coin.

35

00:02:32,500  -->  00:02:38,440
I'm going to take in or call it the target and then the list of coins.

36

00:02:40,350  -->  00:02:47,340
So what I'm going to do first is think about certain base cases or certain scenarios where I should

37

00:02:47,430  -->  00:02:49,120
instantly return something.

38

00:02:49,350  -->  00:02:55,220
So one of those cases is if the target number is in coins.

39

00:02:55,230  -->  00:03:00,530
So for instance in that last example 10 the target was actually in the list of coin values.

40

00:03:00,750  -->  00:03:02,670
You would just immediately want to return it.

41

00:03:02,730  -->  00:03:05,330
So we want to see if we have a single coin match.

42

00:03:05,600  -->  00:03:08,560
And in this case we'll just return one.

43

00:03:08,760  -->  00:03:11,980
So the minimum number of coins is 1.

44

00:03:12,070  -->  00:03:20,160
If that's not the case what I'm going to do is set a default value here that the minimum number of coins

45

00:03:20,340  -->  00:03:28,900
is the target number and what I am going to do is actually recursively solve for that and at the end

46

00:03:28,900  -->  00:03:32,250
of every thing I will return.

47

00:03:32,290  -->  00:03:34,460
Men under score coins.

48

00:03:34,460  -->  00:03:38,570
All right so let's go get us started at where we actually want to do here.

49

00:03:39,030  -->  00:03:47,100
So in plain English All I want to do is for every coin value in that coins list that is less than or

50

00:03:47,130  -->  00:03:49,260
equal to the target number.

51

00:03:49,260  -->  00:03:55,620
What I want to do is recursively call my function and add a count coin and then subtract from the target

52

00:03:56,250  -->  00:03:57,540
and then reset the minimum.

53

00:03:57,540  -->  00:04:03,210
If I have a new minimum number of coins so that's a little complicated so let's go ahead and write it

54

00:04:03,210  -->  00:04:04,090
out.

55

00:04:04,580  -->  00:04:06,690
So I want to say 4.

56

00:04:06,870  -->  00:04:07,960
Let me go ahead and zoom in here.

57

00:04:07,980  -->  00:04:20,960
So it's really clear for every coin value that is less than or equal to my target value.

58

00:04:21,110  -->  00:04:24,930
So I want to say for I in.

59

00:04:25,770  -->  00:04:28,620
And then I'll make a list using list comprehension.

60

00:04:28,860  -->  00:04:32,380
That's saying C for C in coins.

61

00:04:32,940  -->  00:04:37,350
If C is less than or equal to that target

62

00:04:40,190  -->  00:04:45,330
so hear them saying I'm making a list comprehension that's grabbing all the coins.

63

00:04:45,510  -->  00:04:53,410
If for see if C is less than that target number and I'm saying for each of those basically coin values

64

00:04:54,880  -->  00:04:58,150
I'm going to make a new variable called number of coins.

65

00:04:58,160  -->  00:05:08,510
Number of coins we need and I'm going to recursively call 1 plus the recursive function here.

66

00:05:08,940  -->  00:05:16,150
I'm going to subtract the current coin I'm on and then passing the coin values which hasn't changed

67

00:05:16,160  -->  00:05:17,290
.

68

00:05:18,820  -->  00:05:25,420
And if some coins of the number of coins suddenly finds itself being less than the minimum number of

69

00:05:25,420  -->  00:05:32,410
coins which we started off as the target number I'm going to reset it I'm going to say the coins is

70

00:05:32,410  -->  00:05:36,850
now equal to the number of coins.

71

00:05:36,880  -->  00:05:38,430
So this is the full recursion.

72

00:05:38,470  -->  00:05:46,630
So a recursive solution it's an inefficient but it will work for most cases for cases that have American

73

00:05:46,630  -->  00:05:48,360
style coins.

74

00:05:48,370  -->  00:05:54,100
If you have odd coin values or weird prime values such as like a coin that has value 7 or something

75

00:05:54,100  -->  00:06:01,390
like that and you're looking for a distinct number you may have an error solving with this recursive

76

00:06:01,390  -->  00:06:02,160
solution.

77

00:06:02,260  -->  00:06:04,810
And that's part of the problem we'll discuss in a second.

78

00:06:05,180  -->  00:06:06,620
But basically what's going on here.

79

00:06:06,640  -->  00:06:12,400
Just to go over this basic recursive solution which no is not actually the correct way to solve this

80

00:06:12,400  -->  00:06:13,390
problem.

81

00:06:13,420  -->  00:06:26,070
We have a default value for the minimum number of coins and we set it to the target.

82

00:06:26,590  -->  00:06:39,460
We have what we can think of a base case which checks to see if Target is in Coin Values list right

83

00:06:39,470  -->  00:06:40,930
.

84

00:06:40,930  -->  00:06:47,010
Otherwise I'm saying for every coin value that's Lessner equaled in my target.

85

00:06:47,260  -->  00:06:56,510
So for every i for every value in that list I'm going to add a coin.

86

00:06:56,720  -->  00:06:59,760
Let's add a coin count.

87

00:06:59,770  -->  00:07:01,240
That's what this one is here.

88

00:07:01,240  -->  00:07:03,230
So I've already had to use a coin.

89

00:07:03,640  -->  00:07:11,290
And then I add it to the recursive call where the recursive call is now a new target.

90

00:07:11,380  -->  00:07:14,590
I will subtract the value of that coin from it.

91

00:07:14,590  -->  00:07:20,300
So for instance if time looking for 15 cents and I just subtract that a dime from it.

92

00:07:20,320  -->  00:07:22,400
My new target is now five cents.

93

00:07:22,450  -->  00:07:28,780
And again I pass a list of coins searching for that new minimum and I will reset the minimum here

94

00:07:34,720  -->  00:07:40,930
if the new num coins

95

00:07:43,750  -->  00:07:51,790
is less than the minimum number of coins which reset first as the target and that's all there is for

96

00:07:51,790  -->  00:07:53,520
this recursion.

97

00:07:53,530  -->  00:08:02,530
Now if we actually run this you'll notice it takes a very long time to run for certain values.

98

00:08:02,530  -->  00:08:10,470
I'm going to do a basic example here saw passen 15 as my target value 1 5 and 10.

99

00:08:10,840  -->  00:08:11,980
I'll run it.

100

00:08:11,980  -->  00:08:13,280
It outputs 2.

101

00:08:13,360  -->  00:08:17,330
So that's correct that needs one dime and then one nickel.

102

00:08:17,350  -->  00:08:24,340
But if I input something else maybe something is sixty three and I'll also pass in a quarter in value

103

00:08:24,340  -->  00:08:25,300
.

104

00:08:25,300  -->  00:08:28,490
It'll take much much longer with this.

105

00:08:28,810  -->  00:08:33,520
And you'll notice the problem with this approach is that it's inefficient it can take many many recursive

106

00:08:33,520  -->  00:08:35,900
calls to finish this problem.

107

00:08:36,190  -->  00:08:39,290
So I'm going to go ahead and jump to the solutions notebook.

108

00:08:39,310  -->  00:08:41,460
I'm going to kill the cell by interrupting it.

109

00:08:41,800  -->  00:08:49,030
So when I say kernel interrupt here and then I'm going to clear it's output cell current output clear

110

00:08:49,570  -->  00:08:54,260
and go ahead and jump back to the solution notebook to show you an issue here.

111

00:08:55,240  -->  00:09:01,700
So for instance let's pretend that I'm looking to solve for 26 here.

112

00:09:01,900  -->  00:09:08,640
So if we look at the figure that's in the solutions notebook each node here corresponds to a call to

113

00:09:08,650  -->  00:09:10,620
that recursive function.

114

00:09:11,160  -->  00:09:17,440
The label on the node indicates the amount of change for which we are now computing the number of points

115

00:09:17,440  -->  00:09:19,090
to solve for now.

116

00:09:19,090  -->  00:09:24,220
Note how are recalculating values we've already solved for instance 15.

117

00:09:24,220  -->  00:09:29,480
Here is solve for three times over here where my mouse currently is.

118

00:09:29,740  -->  00:09:34,060
Over here where my mouse currently is and over here a mouse currently is.

119

00:09:34,150  -->  00:09:39,100
So it would be much better if we actually kept track of the function calls we've already made so we

120

00:09:39,100  -->  00:09:42,360
don't have to constantly resolve for things we already know.

121

00:09:42,730  -->  00:09:45,540
And that's where the dynamic programming solution comes into play.

122

00:09:45,550  -->  00:09:52,060
That memorization that we discussed earlier in the section and then zoom out so you can see the lips

123

00:09:53,530  -->  00:09:55,980
whole equation here or whole code.

124

00:09:56,200  -->  00:10:00,750
And the key to reducing that work time for the function is using it's dynamic programming.

125

00:10:00,980  -->  00:10:05,560
So the better solution is to remember past results that way before computing a new minimum.

126

00:10:05,620  -->  00:10:07,810
We can check to see if we already know a result.

127

00:10:08,050  -->  00:10:12,070
And you won't have the straight recursion call where you look at results that you've already done in

128

00:10:12,060  -->  00:10:14,930
the past but haven't saved in memory.

129

00:10:15,010  -->  00:10:20,620
Now something to keep in mind here is that while this is very efficient in time it's going to be less

130

00:10:20,620  -->  00:10:23,590
efficient in memory since you're storing more results.

131

00:10:23,620  -->  00:10:27,740
Usually that's a tradeoff you'd want to make for a simple problem like this but you really have to think

132

00:10:27,740  -->  00:10:32,670
of what's going on in the general scope of your problem that you're trying to solve and see if there's

133

00:10:32,680  -->  00:10:33,590
a good tradeoff.

134

00:10:33,590  -->  00:10:38,820
Usually it is especially in this context of the interview question.

135

00:10:38,840  -->  00:10:39,580
All right.

136

00:10:39,820  -->  00:10:44,860
So now we're going to do is this function is going to take in three inputs it's going to take in a Target

137

00:10:45,070  -->  00:10:51,670
coins and then we're going to have a cache known results and instead of actually putting it outside

138

00:10:51,670  -->  00:10:54,950
the function we're going to develop it inside the function.

139

00:10:54,940  -->  00:11:00,370
So let's go ahead and live code this dynamic programming solution so we can really understand why this

140

00:11:00,380  -->  00:11:03,440
is the best approach to solving this problem.

141

00:11:03,550  -->  00:11:07,970
We're going to go ahead and jump back to the live code.

142

00:11:08,020  -->  00:11:09,040
All right.

143

00:11:09,670  -->  00:11:13,890
So let's start by naming our function.

144

00:11:13,910  -->  00:11:20,080
Or C underscore coin underscore D-y Dine-In for dynamic.

145

00:11:20,400  -->  00:11:26,830
In this case we've taken three arguments the target the coins and a new parameter.

146

00:11:27,010  -->  00:11:32,060
Results are known results.

147

00:11:32,050  -->  00:11:34,300
So I'm going to do the exact same thing I did last time.

148

00:11:34,340  -->  00:11:39,380
I'll set the default output to the target.

149

00:11:39,400  -->  00:11:48,620
So so far the minimum number of coins I need is whatever target number gets passed and then I'm going

150

00:11:48,620  -->  00:11:50,110
to think of my base case.

151

00:11:50,120  -->  00:11:51,530
So what does that look like.

152

00:11:51,520  -->  00:12:06,270
Well again if I know the target is in the coins then I'm going to say known results of that target and

153

00:12:06,380  -->  00:12:11,530
a set that equal to 1 and then when to return one.

154

00:12:11,920  -->  00:12:17,410
So what's going on here it means if I kept doing recursive calls and suddenly I find that the target

155

00:12:17,870  -->  00:12:28,460
number is actually in coins then I'm going to set the known results at the target equal to 1 and then

156

00:12:28,450  -->  00:12:31,840
I'm going to continue on to what's the more complicated part.

157

00:12:31,880  -->  00:12:40,500
The actual recursive calls and it's going to be an else if statement or an ellipse statement.

158

00:12:40,730  -->  00:12:44,440
And what I want to do here is I want to return a known

159

00:12:48,170  -->  00:12:49,160
results

160

00:12:52,370  -->  00:12:59,700
if it happens to be greater than 1.

161

00:12:59,950  -->  00:13:11,930
So if I know my known results at that particular target is greater than zero then I'm just going to

162

00:13:11,920  -->  00:13:13,510
return that value.

163

00:13:14,050  -->  00:13:20,740
And this is dynamic programming that's going to save you a lot of time in recursive calls and hopefully

164

00:13:20,750  -->  00:13:25,180
we'll be clear once we go through the final statement.

165

00:13:25,180  -->  00:13:38,250
So again I'm going to say for every coin value that is less than or equal to the target.

166

00:13:38,440  -->  00:13:49,300
So for I in and I'm using less comprehension again see for see in coins if C is less than or equal to

167

00:13:50,770  -->  00:13:52,560
target.

168

00:13:53,000  -->  00:13:59,080
I'm going to make a recursive call but pay attention here because I'm going to include the known results

169

00:13:59,090  -->  00:13:59,170
.

170

00:13:59,200  -->  00:14:04,010
So when I say number of coins it's going to look really similar to the last one.

171

00:14:04,050  -->  00:14:13,690
Another recursive call here rec coin this case 9am I pass and my target minus sign that current value

172

00:14:13,690  -->  00:14:17,690
that I'm on the coins the values we know doesn't change.

173

00:14:17,840  -->  00:14:24,920
And then I passen my currently known results and then I reset my minimum just like we did in the last

174

00:14:24,910  -->  00:14:25,300
one.

175

00:14:25,310  -->  00:14:36,190
So if my number of coins is less than my minimum number of coins I can just say mint coins is equal

176

00:14:36,190  -->  00:14:39,370
to the current number of coins.

177

00:14:39,620  -->  00:14:42,390
And here's where it comes into play.

178

00:14:42,430  -->  00:14:48,660
I will also need to reset that known result.

179

00:14:48,900  -->  00:15:01,150
I will have to say my known results at Target is equal to the minimum number of coins and then finally

180

00:15:01,150  -->  00:15:06,960
I will return the minimum number of coins here.

181

00:15:07,000  -->  00:15:09,600
So let's go ahead and check that out.

182

00:15:09,970  -->  00:15:13,290
Let me fix a table here that should have been known results.

183

00:15:13,300  -->  00:15:16,210
Make sure results pleura and all of these are right.

184

00:15:16,420  -->  00:15:17,440
Let's see if this runs.

185

00:15:17,440  -->  00:15:26,440
Make sure there is no other typos in it and we will call it let's say an interesting target number maybe

186

00:15:26,450  -->  00:15:28,130
74.

187

00:15:28,220  -->  00:15:40,960
My coin values will be 1 5 10 25 and I'm going to initiate my known results just like we did in that

188

00:15:40,960  -->  00:15:50,900
last memoization problem by a list of zeros of length Tarja plus 1.

189

00:15:51,280  -->  00:15:54,370
And now if I call my function

190

00:15:57,060  -->  00:16:04,490
on my target with my coins and my known results you'll notice I get 8.

191

00:16:04,480  -->  00:16:12,700
Now if I tried doing that on that first function with just targeting coins you'll know it's just taking

192

00:16:12,700  -->  00:16:19,390
forever to run because it's making a ton of recursive calls here so I'll have to stop that cell from

193

00:16:19,390  -->  00:16:20,370
running.

194

00:16:20,660  -->  00:16:28,600
OK so if you notice the notebook did have a test your solution but no it was designed for non dynamic

195

00:16:28,610  -->  00:16:31,050
functions and they will take a long time to test.

196

00:16:31,090  -->  00:16:34,650
So if you believed you had a solution you should have come here and checked this.

197

00:16:35,080  -->  00:16:38,760
All right so let's go ahead and briefly go over what we did here.

198

00:16:38,870  -->  00:16:44,170
We tried to create a normal recursive solution but it would have failed because it would have taken

199

00:16:44,170  -->  00:16:49,240
so long because it kept made getting repeated recursive calls for results.

200

00:16:49,270  -->  00:16:51,790
Actually it already previously calculated before.

201

00:16:51,940  -->  00:16:56,930
As you can see from this diagram of trying to figure out 26 here.

202

00:16:57,350  -->  00:17:04,360
All right we came up with a dynamic programming solution that took into account our known results but

203

00:17:04,370  -->  00:17:12,760
also solved a very similar recursive fashion just like the first solution except it updated its known

204

00:17:12,760  -->  00:17:16,930
results here here and here.

205

00:17:17,440  -->  00:17:20,870
And that's really the case of memoization dynamic programming.

206

00:17:20,920  -->  00:17:27,530
So once you've gone through this video Remember you should really check out this great resource here

207

00:17:27,520  -->  00:17:27,540
.

208

00:17:27,590  -->  00:17:32,930
They Nemec programming coin change problem link at the bottom of the solutions notebook read through

209

00:17:32,920  -->  00:17:33,140
it.

210

00:17:33,130  -->  00:17:36,530
It's a great walk through on the coin changing problem.

211

00:17:36,910  -->  00:17:40,640
Or you can also read the Wikipedia page entry here.

212

00:17:40,690  -->  00:17:43,810
That also explains the dynamic programming solution.

213

00:17:43,820  -->  00:17:48,610
It does a little bit of a different fashion here by creating a matrix but again you should walk through

214

00:17:48,620  -->  00:17:52,630
it and make sure you understand it because there's various ways of writing out this particular dynamic

215

00:17:52,630  -->  00:17:54,520
programming solution.

216

00:17:54,520  -->  00:18:00,370
All right so your homework is to make sure you read both that Wikipedia entry and if you scroll down

217

00:18:00,380  -->  00:18:02,710
here.

218

00:18:03,590  -->  00:18:06,430
This link here is that Amec coin change problem.

219

00:18:06,550  -->  00:18:08,980
It's going to be pretty similar to what we discussed here.

220

00:18:08,980  -->  00:18:13,670
It will also have this figure in it but it's important to read it because it goes through a very slow

221

00:18:13,660  -->  00:18:18,430
and steady solution explanation for the case of dynamic programming there.

222

00:18:18,460  -->  00:18:26,800
All right that's it for this section on recursive interview problems recursive interview problems.

223

00:18:26,870  -->  00:18:32,080
As far as the way they're presented in interview situations sometimes they won't explicitly tell you

224

00:18:32,090  -->  00:18:39,580
to use recursion but hopefully after completing the section you have an idea of in your mind what situations

225

00:18:39,590  -->  00:18:41,450
would call for recursive solution.

226

00:18:41,620  -->  00:18:44,400
And if you ever confuse an interview situation.

227

00:18:44,410  -->  00:18:49,620
Don't be afraid to ask of something like Hey recursion be a good call here.

228

00:18:49,630  -->  00:18:52,360
It fits on the brink of your mind but you're unsure.

229

00:18:52,370  -->  00:18:54,020
Remember to ask a lot of questions.

230

00:18:54,050  -->  00:18:59,190
Do your thinking out loud when your interview situation other than that as far as this question goes

231

00:18:59,190  -->  00:19:04,150
for the coin change problem make sure you do that homework reading and I will see you at the next lecture

232

00:19:04,150  -->  00:19:04,530
.

233

00:19:04,550  -->  00:19:05,300
All right.

234

00:19:05,300  -->  00:19:07,580
Great job everyone on the interview questions.

235

00:19:07,820  -->  00:19:10,510
I'll see you in the next section.
