WEBVTT
1

00:00:00.930  -->  00:00:07.760
Hello everyone and welcome to the recursion interview Problem number three the Fibonacci sequence.

2

00:00:07.770  -->  00:00:13.020
So in this interview exercise we will begin to get a feel of having to solve a single problem multiple

3

00:00:13.020  -->  00:00:14.140
ways.

4

00:00:14.700  -->  00:00:15.420
All right.

5

00:00:15.420  -->  00:00:22.170
So if you decided to skip the memorization lecture reading material you'll have to go back and read

6

00:00:22.170  -->  00:00:27.650
it in order to fully understand the various ways to solve this problem.

7

00:00:27.660  -->  00:00:30.840
So for this problem what you're going to do is implement a Fibonacci sequence.

8

00:00:30.840  -->  00:00:35.070
In case you're unfamiliar with the Fibonacci sequence you can go ahead and click the link that's provided

9

00:00:35.070  -->  00:00:36.290
for you in the notebook.

10

00:00:36.570  -->  00:00:40.740
It'll take you to the Wikipedia page for the Fibonacci sequence.

11

00:00:40.800  -->  00:00:46.360
All it is it should take the last two numbers to define the next number the sequence.

12

00:00:46.560  -->  00:00:53.790
So one plus one delivers to one plus two delivers three to plus three delivers five etc..

13

00:00:54.540  -->  00:00:59.850
Ok so you can see how this is kind of set up already for you to do some sort of recursion in order to

14

00:00:59.850  -->  00:01:01.400
solve this problem.

15

00:01:01.410  -->  00:01:07.380
You can also use dynamic programming which utilizes memorization that will allow you to store results

16

00:01:07.830  -->  00:01:12.030
then you can also solve this problem literally.

17

00:01:12.060  -->  00:01:17.180
So let's just go over what the function is going actually except for input and total output.

18

00:01:17.280  -->  00:01:20.590
And then we'll discuss each of the different methods of solving it.

19

00:01:21.120  -->  00:01:21.780
So you're French.

20

00:01:21.800  -->  00:01:27.480
Your function is going to except the number N and then return the nth number of the Fibonacci sequence

21

00:01:27.480  -->  00:01:28.040
.

22

00:01:28.110  -->  00:01:33.060
So remember that a Fibonacci sequence like image before shows the series and numbers starts off of the

23

00:01:33.060  -->  00:01:36.920
base case checks to there any equal zero or 1.

24

00:01:37.020  -->  00:01:42.400
If that's the case it would return 1 otherwise it returns something that looks like this.

25

00:01:42.460  -->  00:01:45.140
This sort of recursive sequence.

26

00:01:45.330  -->  00:01:50.810
So hopefully that's a big hand as far as solving it using basic recursion methods.

27

00:01:52.350  -->  00:02:00.390
So your first part of this interview problem will be solve the Fibonacci sequence problem.

28

00:02:00.390  -->  00:02:08.760
So for instance here fill out this function using simple recursion to put in the end that you want and

29

00:02:08.760  -->  00:02:12.240
it will put out the nth number of that sequence.

30

00:02:12.480  -->  00:02:15.850
So the test number in the Fibonacci sequence is 55.

31

00:02:16.320  -->  00:02:24.210
OK then you'll have to use dynamic programming which will implement memoization using that cash to store

32

00:02:24.210  -->  00:02:25.780
results.

33

00:02:26.040  -->  00:02:29.460
You'll need to instantiate cache information.

34

00:02:29.460  -->  00:02:33.220
So I've put that here Fioretti kind of as a set up.

35

00:02:33.390  -->  00:02:38.470
And then you can fill out that function again you'll have to go back and do the homework reading material

36

00:02:38.580  -->  00:02:44.550
in order to fully understand memorization and go through that factorial example in both that notebook

37

00:02:44.640  -->  00:02:48.620
and the Wikipedia article reading from that lecture.

38

00:02:48.900  -->  00:02:54.230
After that I want you to solve this eternally just using simple iteration.

39

00:02:54.870  -->  00:02:58.370
You'll have to use tuple on packing or you should use tuple Impac.

40

00:02:58.380  -->  00:02:59.070
You don't have to.

41

00:02:59.070  -->  00:03:02.830
But it's definitely the better way to go as far as solving this.

42

00:03:02.970  -->  00:03:05.880
And here's an example of it being solved.

43

00:03:05.880  -->  00:03:13.490
So depending on which of these functions you want to test you can test your solution with this cell

44

00:03:13.490  -->  00:03:13.960
.

45

00:03:14.070  -->  00:03:20.700
What you got to do is simply uncomment is the one function you want to test to for instance right now

46

00:03:20.720  -->  00:03:20.900
.

47

00:03:21.090  -->  00:03:24.860
This will just test the first recursion function.

48

00:03:25.470  -->  00:03:34.320
Something I want to point out is besides uncommon thing you'll have to take into account especially

49

00:03:34.320  -->  00:03:39.580
for the dynamic programming that you may need a nother input as far as cache.

50

00:03:39.600  -->  00:03:40.630
I'll leave it at that.

51

00:03:40.650  -->  00:03:48.180
So I don't kind of drop too many hints but if you're having too much trouble with the normal recursion

52

00:03:48.210  -->  00:03:56.010
function taking just way too long or having the dynamic version not pass any tests go ahead and make

53

00:03:56.010  -->  00:04:02.430
sure that you can compare it to at least some of these first cases here and see if it sticks out the

54

00:04:02.520  -->  00:04:03.840
correct result.

55

00:04:03.840  -->  00:04:06.570
And then after that go ahead and check out the solution notebook.

56

00:04:06.810  -->  00:04:08.380
So don't worry too much.

57

00:04:08.460  -->  00:04:15.210
As far as this particular testing cell because it may fail even if you have the right solution for some

58

00:04:15.210  -->  00:04:20.040
of these more complicated dynamic programming solutions.

59

00:04:20.280  -->  00:04:24.660
Or if you have a normal recursion solution it may just take forever and you shouldn't have to wait for

60

00:04:24.660  -->  00:04:24.830
that.

61

00:04:24.840  -->  00:04:29.530
You should just go and check your solution against the one in the solution notebook.

62

00:04:29.580  -->  00:04:30.470
All right.

63

00:04:30.900  -->  00:04:32.460
So again this is good practice.

64

00:04:32.460  -->  00:04:38.010
A lot of times in an interview situation you'll be asked to solve the same problem in multiple ways

65

00:04:38.580  -->  00:04:39.570
so you can go ahead and do that.

66

00:04:39.570  -->  00:04:42.230
Here was the Fibonacci sequence problem.

67

00:04:42.330  -->  00:04:48.720
All right I'll see you at the next lecture where we're going to walk through the various solutions for

68

00:04:48.750  -->  00:04:49.910
this problem.

69

00:04:49.950  -->  00:04:50.550
All right.

70

00:04:50.730  -->  00:04:52.380
Thanks everyone and best of luck
