1

00:00:01,500  -->  00:00:07,410
Hello everyone and welcome to this lecturer we're going to be implementing FS or breadth first search

2

00:00:07,410  -->  00:00:08,050
.

3

00:00:08,190  -->  00:00:14,610
So this algorithm provides us with the ability to return the same results as DFS but with the added

4

00:00:14,610  -->  00:00:16,790
guarantee to return the shortest path.

5

00:00:16,820  -->  00:00:20,790
First remember this has to do more of that word ladder puzzle.

6

00:00:20,790  -->  00:00:24,080
So this rhythm's a little more tricky to implement in a recursive manner.

7

00:00:24,120  -->  00:00:30,750
Instead of using a Q data structure so what we're going to be documenting just the iterative approach

8

00:00:31,050  -->  00:00:34,710
which is most likely what they're going to be expecting in a interview setting.

9

00:00:34,710  -->  00:00:38,520
So we're going to be coding out this all right.

10

00:00:38,520  -->  00:00:45,300
So we'll simmer graph is in the form of the dictionary we have your vertex and then the vertices is

11

00:00:45,300  -->  00:00:48,300
connect to.

12

00:00:48,300  -->  00:00:51,110
So let's go ahead and implement this out.

13

00:00:51,870  -->  00:00:52,950
So what do we do if Libya.

14

00:00:52,950  -->  00:01:02,820
FS Well our function is going to take in that graph and that starting vertex will have an object visited

15

00:01:03,300  -->  00:01:06,350
and that's going to be equal to an antisense.

16

00:01:07,140  -->  00:01:08,700
And then we'll have a Q

17

00:01:12,030  -->  00:01:17,340
and we'll will treat this as just a list start and you can actually use a queue from the collections

18

00:01:17,340  -->  00:01:18,630
module if you want to.

19

00:01:18,810  -->  00:01:25,840
We're just going to be popping it off with a specified index 0 to treat it as a queue.

20

00:01:26,310  -->  00:01:30,800
So basically I'm going to say is vertex is equal to q.

21

00:01:30,820  -->  00:01:33,200
The pop at 0.

22

00:01:33,240  -->  00:01:38,340
So you could just if you wanted to from the collections module you could import here as we've discussed

23

00:01:39,060  -->  00:01:41,540
back in the Q section or bill that you're on.

24

00:01:41,540  -->  00:01:43,580
Q Maybe you're asked in an interview setting.

25

00:01:43,590  -->  00:01:48,110
Anyways so while the Q Still there pop it off at zero.

26

00:01:48,300  -->  00:01:49,820
So that's going to be that first one.

27

00:01:49,810  -->  00:01:58,770
Remember the first in line going to review the Q lectures and if you say if Virtex is not in visited

28

00:01:59,800  -->  00:02:07,860
Well we're going to do is take visited add that vertex to it and there we're going to use a Q to extend

29

00:02:07,880  -->  00:02:07,910
.

30

00:02:07,920  -->  00:02:08,440
We'll say.

31

00:02:08,440  -->  00:02:26,320
Q That extends and that going to graph that vertex minus the visited and then just return visited.

32

00:02:26,320  -->  00:02:31,130
So it's extremely similar to DFS except you notice we treating it as a queue.

33

00:02:31,230  -->  00:02:33,880
So we pop off at the beginning.

34

00:02:34,680  -->  00:02:37,290
So what's actually going on here.

35

00:02:38,340  -->  00:02:44,130
Well the main thing you should notice is that the actions performed per each explored vertex are basically

36

00:02:44,130  -->  00:02:47,450
the same as the first implementation.

37

00:02:47,460  -->  00:02:53,580
However what we're doing is replacing the stack with a queue and with the queue what's going to happen

38

00:02:53,580  -->  00:02:58,270
as well as that explore the breadth of a vertex that before moving on.

39

00:02:58,560  -->  00:03:04,260
And this behavior basically guarantees that that first path located is the shortest path present based

40

00:03:04,260  -->  00:03:07,290
on the number of edges being the cost factor.

41

00:03:07,620  -->  00:03:08,120
Right.

42

00:03:08,400  -->  00:03:14,370
So if you want to check out more explanation notes you can always reference a Jupiter note book here

43

00:03:14,370  -->  00:03:14,890
.

44

00:03:14,940  -->  00:03:16,770
So this is where we just code it out.

45

00:03:16,950  -->  00:03:23,550
But there's again code that will actually also tell you how to print out the possible paths so that's

46

00:03:23,550  -->  00:03:28,660
also helpful to know as well as just printing out the shortest path that's there not.

47

00:03:28,890  -->  00:03:31,600
And again some really great resource for free to check out.

48

00:03:32,040  -->  00:03:32,940
That's all there is to it.

49

00:03:32,940  -->  00:03:38,370
Again it's really quick if you already know how to DFS you're simply just switching a stack for a Q

50

00:03:38,370  -->  00:03:38,950
here.

51

00:03:39,190  -->  00:03:42,810
That way you guarantee the shortest path is the one you hit upon first.

52

00:03:42,810  -->  00:03:50,400
All right I definitely encourage you to really read about graphs and DFS and be EF-S on your own in

53

00:03:50,400  -->  00:03:51,960
the pendant early.

54

00:03:52,080  -->  00:03:57,330
Don't just take everything you've learned from this course but really you should explore more and use

55

00:03:57,330  -->  00:04:01,040
the resources provided for you to really build out your understanding.

56

00:04:01,230  -->  00:04:06,570
It really helped complete your computer science knowledge as far as graph theory.

57

00:04:06,930  -->  00:04:11,760
But as far as interview questions definitely the most important wants to know is how to implement a

58

00:04:11,760  -->  00:04:19,230
graph how to implement both FS and DFS and then another common interview question is basically filling

59

00:04:19,230  -->  00:04:22,980
out this function which is to return all possible paths.

60

00:04:22,980  -->  00:04:25,760
Sometimes I ask sometimes no they don't.

61

00:04:25,800  -->  00:04:29,140
Sometimes they don't even ask Raphe questions that also keep that in mind.

62

00:04:29,370  -->  00:04:34,380
But basically the ones that we ask in this course are the definitely the ones that you should really

63

00:04:34,380  -->  00:04:35,190
really know.

64

00:04:35,620  -->  00:04:39,120
OK well thanks everyone and I will see you at the next lecture
