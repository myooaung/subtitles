1

00:00:01,260  -->  00:00:06,510
Hello everyone and welcome to the singly linked list implementation lecture in this lecture we're going

2

00:00:06,510  -->  00:00:09,780
to be implementing a basic singly linked lists.

3

00:00:09,780  -->  00:00:15,450
Remember in a singly linked list we have an ordered list of items as individual nodes have pointers

4

00:00:15,450  -->  00:00:17,340
to other nodes.

5

00:00:17,580  -->  00:00:21,570
So as always you have a Jupiter notebook with the code that we're going to go through it's actually

6

00:00:21,570  -->  00:00:23,060
pretty simple in this case.

7

00:00:23,280  -->  00:00:27,930
And there's also some more discussion of pros and cons which we'll get to later after implementing it

8

00:00:27,940  -->  00:00:28,260
.

9

00:00:28,590  -->  00:00:34,800
So let's go ahead and jump to the live code and implement this singly linked list.

10

00:00:34,830  -->  00:00:38,420
First thing I'm going to do is actually just create my node.

11

00:00:39,120  -->  00:00:49,860
So I'm going to say class node objects and this is a big part of doing any sort of linked list interview

12

00:00:49,860  -->  00:00:55,620
problem or question usually are going to have to implement Metro note class and use the different methods

13

00:00:55,620  -->  00:01:01,770
and attributes of that node class to further answer the question that's referring to a linked list.

14

00:01:01,770  -->  00:01:10,080
This case we're just implementing a single linked lists meaning I'm going to take in just one attribute

15

00:01:10,410  -->  00:01:14,170
value or say self-talk.

16

00:01:14,190  -->  00:01:16,770
Value is equal to that value.

17

00:01:16,770  -->  00:01:24,540
So for example in the previous lectures we saw examples of values being pointing to strings referring

18

00:01:24,540  -->  00:01:29,970
to airport codes so we could use that later on and so this is a singly linked list.

19

00:01:29,970  -->  00:01:36,810
I just care about the next note and pointing to all of it as none for right now.

20

00:01:36,810  -->  00:01:42,090
All right so we have this really basic class vnode and we're going to use it to build out a linked list

21

00:01:42,180  -->  00:01:44,270
as a collection of nodes.

22

00:01:45,030  -->  00:01:55,140
I'll say A equals no de-value want to keep it simple than be a of value too and then see as a node of

23

00:01:55,160  -->  00:01:57,280
values theory.

24

00:01:58,470  -->  00:02:06,600
Now I want to actually link these nodes together and to do that I can just say a next node is equal

25

00:02:06,600  -->  00:02:17,820
to B and similarly it can say B next node is he could see and that's all there is to it.

26

00:02:17,820  -->  00:02:25,200
So we've already developed our own linked list so I can go ahead and check the values from it and I

27

00:02:25,200  -->  00:02:29,190
can also check out the nodes that are coming next.

28

00:02:29,190  -->  00:02:32,280
Meaning I could say a next node.

29

00:02:32,580  -->  00:02:39,760
Now I actually just get a statement on an object class here so node where it's being stored.

30

00:02:40,010  -->  00:02:45,060
But I could call the value of the next node and that should give me the value of B which in this case

31

00:02:45,150  -->  00:02:46,320
was 2.

32

00:02:46,950  -->  00:02:49,250
So if you run that we get two out.

33

00:02:49,580  -->  00:02:50,250
OK.

34

00:02:50,430  -->  00:02:52,330
That's really all there is to it.

35

00:02:52,500  -->  00:02:57,900
I hope that this implementation shows you how simple the idea of a linked list is.

36

00:02:57,900  -->  00:02:58,910
You just have a node.

37

00:02:58,950  -->  00:03:04,440
In this case and for a singly linked list you just care about that nodes value and then the next No

38

00:03:04,440  -->  00:03:05,700
that's coming up.

39

00:03:05,820  -->  00:03:11,910
You go ahead and create instances of those objects and then you just assign what the next nodes are

40

00:03:13,200  -->  00:03:18,570
and then you can call their values as far as pros versus cons.

41

00:03:18,600  -->  00:03:23,430
What's nice about linked lists is that they have constant time insertions and deletions and any position

42

00:03:24,000  -->  00:03:31,030
in comparison arrays will owers require linear or Big O N time to do the same thing.

43

00:03:31,080  -->  00:03:37,140
Link lists can also continue to expand without having to specify their size ahead of time so try to

44

00:03:37,140  -->  00:03:39,420
remember or lectures on a race sizing.

45

00:03:39,420  -->  00:03:44,070
From the array sequence section of the course where we talked about mortification and how he kept having

46

00:03:44,070  -->  00:03:48,410
to double the array size since linked lists are just collections of nodes.

47

00:03:48,570  -->  00:03:54,360
We can just keep inserting the nodes so we don't have to worry about the lectures on dynamic arrays

48

00:03:54,360  -->  00:03:55,210
.

49

00:03:55,380  -->  00:03:59,840
Some cons to a linked list is to access an element in the linked list.

50

00:04:00,030  -->  00:04:07,260
You need to take O K time to go from the head of the list so that Kafe elements in contrast arrays always

51

00:04:07,260  -->  00:04:11,550
have constant time operations to access elements of an array.

52

00:04:12,000  -->  00:04:17,130
These pros and cons are written out for you at the bottom of the singly linked list implementation lecture

53

00:04:17,140  -->  00:04:17,300
.

54

00:04:17,700  -->  00:04:20,260
And this is probably the main one here.

55

00:04:20,520  -->  00:04:25,920
To access an element in a linked list you need to take Ok time to go from the head of the list to the

56

00:04:25,920  -->  00:04:32,090
case elements in contrast arrays always have constant time operations X elements in a rate.

57

00:04:32,310  -->  00:04:39,440
Definitely the main thing to know here are this line of the pros vs this line of the cons.

58

00:04:39,480  -->  00:04:44,070
Essentially if someone asks you an interview what are the pros and cons of using a linked list vs an

59

00:04:44,070  -->  00:04:44,900
array.

60

00:04:44,940  -->  00:04:49,590
You're really going to want to have these answers ready to go ok.

61

00:04:49,980  -->  00:04:52,380
Hopefully the implementation was pretty simple.

62

00:04:52,380  -->  00:04:56,670
I know we went over the theory in the previous lecture and it might have seen a little obscure but I

63

00:04:56,670  -->  00:05:01,680
can really see how easy it is to just implement a node set up a value and set up a next note for a singly

64

00:05:01,680  -->  00:05:07,560
linked list in the next lecture will be discussing doubly linked lists and after that we'll actually

65

00:05:07,560  -->  00:05:10,630
implement one in Python and I'll also be pretty simple.

66

00:05:10,700  -->  00:05:15,000
I'll have to add certain attributes and methods to that node class.

67

00:05:15,060  -->  00:05:18,120
OK that's it and I'll see you at the next lecture.

68

00:05:18,120  -->  00:05:20,090
Thank you everyone.
