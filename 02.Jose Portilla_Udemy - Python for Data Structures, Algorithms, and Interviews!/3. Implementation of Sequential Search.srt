1

00:00:01,620  -->  00:00:05,560
Hello everyone and welcome to the implementation of sequential search lecture.

2

00:00:05,820  -->  00:00:09,340
So again you can check out the previous video lecture for a full breakdown.

3

00:00:09,340  -->  00:00:13,890
But in this notebook we're going to do is go ahead and implement sequential search for an unordered

4

00:00:13,890  -->  00:00:17,450
list and then adapt it to an ordered list.

5

00:00:17,460  -->  00:00:22,050
So let's go ahead and implement this.

6

00:00:22,050  -->  00:00:29,220
Going to go ahead and jump to a MT Jupiter notebook and start writing up my function for a sequential

7

00:00:29,220  -->  00:00:30,570
search.

8

00:00:30,600  -->  00:00:38,490
So first thing I want to do is just go ahead and say DPF to start off her function and we'll call this

9

00:00:38,580  -->  00:00:41,440
Eski SC queue search.

10

00:00:41,680  -->  00:00:43,180
Call it whatever you want.

11

00:00:43,740  -->  00:00:47,970
And it's going to take in two arguments the array or that list that we actually are searching through

12

00:00:47,970  -->  00:00:48,290
.

13

00:00:48,480  -->  00:00:54,710
And then the element or item we want to find a column a r r n e l e respectively.

14

00:00:55,350  -->  00:00:58,290
So this is just going to work on an ordered list.

15

00:00:58,680  -->  00:01:05,190
So I'm going to go ahead and start at position zero or create a very well called POS for position started

16

00:01:05,190  -->  00:01:10,560
at zero and I'm going to create another variable called found.

17

00:01:11,490  -->  00:01:17,250
This is just going to be a boolean and it's going to start off as false and it's going to become true

18

00:01:17,370  -->  00:01:20,190
if we ever find the element in our list.

19

00:01:20,190  -->  00:01:31,020
So we can do is say while the position is less than the length of our array and not found meaning we

20

00:01:31,020  -->  00:01:32,220
haven't found that yet.

21

00:01:32,790  -->  00:01:42,260
I can just say if the value of the array at that position is equal to the elements then we found that

22

00:01:42,270  -->  00:01:51,900
so I can just say found isn't true else where we're going to do it just keep moving one down.

23

00:01:52,020  -->  00:01:56,410
So I'm just going to say that's a position.

24

00:01:56,610  -->  00:01:57,340
Add 1 to it.

25

00:01:57,360  -->  00:02:03,440
And this is the same as just saying POS equals POS plus 1.

26

00:02:03,450  -->  00:02:04,210
All right.

27

00:02:04,350  -->  00:02:07,860
And then once you're done with that while loop you can just return the found element.

28

00:02:07,890  -->  00:02:09,500
So it's pretty simple idea.

29

00:02:09,570  -->  00:02:11,030
Let's go ahead to make sure it works.

30

00:02:11,040  -->  00:02:20,700
I'll say one two three four five and then call sequential search passen the array and let's say I'm

31

00:02:20,700  -->  00:02:28,620
going to search for six Senos will return false meaning we never found it.

32

00:02:28,860  -->  00:02:33,060
Let's go in and search for three and it returns true.

33

00:02:33,060  -->  00:02:35,510
Let's check in on the edges just to make sure it's working.

34

00:02:35,550  -->  00:02:36,240
What is true.

35

00:02:36,240  -->  00:02:39,290
Perfect in five is true.

36

00:02:39,330  -->  00:02:39,840
All right.

37

00:02:39,840  -->  00:02:43,680
So hopefully that should have been pretty logical you're going through every single element.

38

00:02:43,790  -->  00:02:49,740
So items in that array checking if it matches up to your target and then changing that boolean variable

39

00:02:49,740  -->  00:02:50,290
.

40

00:02:50,430  -->  00:02:57,450
But remember from the previous lecture we said if we know a list is ordered We only have to check until

41

00:02:57,450  -->  00:03:01,850
we have found the elements or an element that can be greater than it.

42

00:03:01,890  -->  00:03:05,190
So we're going to do is edit our code a bit.

43

00:03:05,790  -->  00:03:10,530
So it's a little more efficient given that we know it's ordered so I'm going to go ahead and recall

44

00:03:10,530  -->  00:03:14,820
this ordered sequential search.

45

00:03:15,390  -->  00:03:18,150
And again we start at position zero.

46

00:03:18,300  -->  00:03:25,100
We still have the target that found variable which will become true if the elements in the list.

47

00:03:25,200  -->  00:03:33,370
But I'm also going to start a new variable called stopped and I'll set that equal to false.

48

00:03:33,370  -->  00:03:35,600
That's basically going to be a start marker.

49

00:03:35,730  -->  00:03:40,500
And in this case I'm going to say my position is less than the length of the array.

50

00:03:40,500  -->  00:03:47,420
Meaning we're still going through the array and not found we haven't found the yet and not stopped.

51

00:03:47,430  -->  00:03:52,530
And that's going to come into play when we reach an element that scriptor then our target element given

52

00:03:52,530  -->  00:04:06,390
that we know we can even write it as a docstring here input array must be ordered let's say Order slash

53

00:04:06,390  -->  00:04:07,780
sorted.

54

00:04:08,160  -->  00:04:08,550
OK.

55

00:04:08,640  -->  00:04:10,760
So we have that as a check.

56

00:04:10,770  -->  00:04:15,110
So again we're going to go see if we have a match.

57

00:04:15,110  -->  00:04:24,960
Else what we're going to do is two things we're going to say if the array value at that position that

58

00:04:24,960  -->  00:04:28,320
elements is greater than the elements self.

59

00:04:28,650  -->  00:04:33,350
We'll just say stops is equal to true meaning we've already passed the limit.

60

00:04:33,390  -->  00:04:36,100
So we reach an element that was greater than our target element.

61

00:04:36,120  -->  00:04:39,330
So we're not going to continue going otherwise we're going to move on.

62

00:04:39,330  -->  00:04:46,640
So then we'll actually say else and shift this code into that block.

63

00:04:48,290  -->  00:04:49,640
OK.

64

00:04:50,160  -->  00:04:54,550
So where you can go ahead and test this out.

65

00:04:55,140  -->  00:04:58,200
We're going to just say this is already a sorted array.

66

00:04:58,470  -->  00:05:01,280
Let's add a couple more items to it.

67

00:05:01,380  -->  00:05:06,640
So that's one through 10 going to do sequential search and that's true.

68

00:05:07,140  -->  00:05:09,100
Let's say 12.

69

00:05:09,640  -->  00:05:10,760
And that's false.

70

00:05:10,770  -->  00:05:12,700
So you can mess around with this.

71

00:05:12,810  -->  00:05:19,620
It should work because we basically just added this check here and stopped variable.

72

00:05:19,620  -->  00:05:20,490
All right.

73

00:05:20,490  -->  00:05:24,810
So hopefully for you sequential search both the implementation and the theory around that is actually

74

00:05:24,810  -->  00:05:30,660
pretty basic you just going through that array and doing the most logical thing you're checking it every

75

00:05:30,660  -->  00:05:31,200
element.

76

00:05:31,200  -->  00:05:36,810
If it's an unordered list if you know the list is sorted or ordered beforehand and then we change that

77

00:05:36,810  -->  00:05:37,950
to must.

78

00:05:37,950  -->  00:05:39,440
Sorry about that.

79

00:05:39,450  -->  00:05:46,720
So if it's ordered or sorted beforehand you can just go ahead and add a stopped variable for it.

80

00:05:47,250  -->  00:05:49,760
OK that's all there is to it.

81

00:05:50,040  -->  00:05:52,050
And I will see you at the next lecture.

82

00:05:52,050  -->  00:05:53,170
Thanks everyone.
