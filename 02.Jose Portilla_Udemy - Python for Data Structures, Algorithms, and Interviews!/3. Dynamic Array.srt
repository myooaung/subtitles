1

00:00:01,110  -->  00:00:04,980
Hello everyone and welcome to the lecture on dynamic arrays.

2

00:00:05,010  -->  00:00:10,630
Let's go ahead and get started in this lecture we're going to learn what is a dynamic array and we're also

3

00:00:10,820  -->  00:00:13,590
learn how to implement a dynamic array.

4

00:00:14,490  -->  00:00:17,470
So let's just discuss what a dynamic array is.

5

00:00:17,610  -->  00:00:22,950
When you're building a list in Python you may have noticed that you don't actually need to specify how

6

00:00:22,950  -->  00:00:26,060
large the array or that list is beforehand.

7

00:00:26,130  -->  00:00:32,490
So for instance here we have a little diagram that we saw earlier of all the bytes that are allocated

8

00:00:32,520  -->  00:00:33,850
to a particular array.

9

00:00:34,290  -->  00:00:36,860
But in Python these lists are dynamic.

10

00:00:36,870  -->  00:00:40,970
So you don't need to specify how large your list is going to be beforehand.

11

00:00:40,980  -->  00:00:44,720
You can just keep constantly adding to it.

12

00:00:44,730  -->  00:00:46,730
So how does Python actually do this.

13

00:00:46,860  -->  00:00:53,280
Well it does this through use of dynamic arrays so that list instance actually often has a greater capacity

14

00:00:53,340  -->  00:00:55,080
than its current length.

15

00:00:55,080  -->  00:01:01,080
So if you put in a list with three elements and it usually that list is going to actually have a greater

16

00:01:01,080  -->  00:01:05,710
capacity to hold more elements than just the three you initiated it with.

17

00:01:05,940  -->  00:01:11,670
But if you keep adding elements to it or keep appending elements to that list eventually even that extra

18

00:01:11,670  -->  00:01:13,830
space is going to run out.

19

00:01:14,550  -->  00:01:20,430
So we're going to do is show a live coding example that really demonstrates the relationship between

20

00:01:20,430  -->  00:01:26,510
the size and bytes allocated to a list or array and the actual length of the elements in the array.

21

00:01:26,760  -->  00:01:32,730
So let's go ahead and jump to the Jupiter notebook and show you an example of this.

22

00:01:32,730  -->  00:01:37,740
So here we are at the Jupiter notebook and let's go ahead and go over some code that I wrote out in

23

00:01:37,740  -->  00:01:44,820
order to experiment just experiment and explore the relationship between the slits length and the underlying

24

00:01:44,820  -->  00:01:48,050
size that the computer's holding in memory.

25

00:01:48,060  -->  00:01:54,030
So first thing I did was I just imported as well as the system and that's going to allow us to use a

26

00:01:54,060  -->  00:01:59,490
get size of function which will let us know the actual size in bytes that the computer's holding in

27

00:01:59,490  -->  00:02:00,590
memory.

28

00:02:00,870  -->  00:02:08,990
After that I just set an arbitrary n and that's going to be the amount of elements in the array.

29

00:02:09,210  -->  00:02:18,150
And then I set an empty list called data and then we're going to say for I in range of an set a equal

30

00:02:18,570  -->  00:02:19,730
to the length of data.

31

00:02:19,740  -->  00:02:24,240
So that's going to tell us the number of elements in that list and then we're going to set be equal

32

00:02:24,240  -->  00:02:31,050
to sys dot get size of data and that's going to tell us the actual size in bytes and then we're going

33

00:02:31,050  -->  00:02:36,960
to print out the format to say length which is going to report back how many elements are in that list

34

00:02:37,440  -->  00:02:42,720
and they're going to see size in bytes and we're going to format or use print formatting to print that

35

00:02:42,720  -->  00:02:43,460
out.

36

00:02:43,650  -->  00:02:48,510
And then after that I'm going to increase the length by 1 by just appending that particular number or

37

00:02:48,540  -->  00:02:50,990
integer to the list.

38

00:02:51,000  -->  00:02:53,370
So let's go ahead and run this and see what happens.

39

00:02:53,370  -->  00:02:56,480
Right now we're running it for an equal to 10.

40

00:02:57,060  -->  00:03:02,400
I'm going to zoom out a bit so we can see the various print statements.

41

00:03:02,400  -->  00:03:03,330
Here we go.

42

00:03:03,780  -->  00:03:10,780
So you notice we begin a full length of 0 and we have Cyzon bytes is 64 bytes are being used.

43

00:03:11,010  -->  00:03:18,480
Now here's where the interesting part happens when we increase length to 1 the size in bytes gets increased

44

00:03:18,480  -->  00:03:19,910
to 96.

45

00:03:20,010  -->  00:03:26,040
But you notice as we keep increasing length all the way up to 4 the size in bytes doesn't actually change

46

00:03:26,040  -->  00:03:26,730
.

47

00:03:26,730  -->  00:03:34,260
So Python has done it it's actually set a number of bytes larger than what it needs to hold the current

48

00:03:34,260  -->  00:03:36,730
elements in the list.

49

00:03:37,530  -->  00:03:40,350
While it's appending new elements to the array.

50

00:03:40,350  -->  00:03:43,990
So to get a better idea of this we're going to actually put in a much larger end.

51

00:03:44,040  -->  00:03:45,450
Let's go ahead and put in

52

00:03:48,350  -->  00:03:50,650
let's say 50 and run this.

53

00:03:51,420  -->  00:03:52,070
OK.

54

00:03:52,290  -->  00:03:54,180
So you'll notice a pattern here.

55

00:03:54,450  -->  00:04:01,440
Basically as we keep adding elements to the arrays the size in bytes that list is using increases.

56

00:04:01,680  -->  00:04:04,500
But you'll notice it happens in chunks.

57

00:04:04,530  -->  00:04:08,670
So for the first element we have 64 bytes.

58

00:04:08,700  -->  00:04:11,450
Good and zoom in on that.

59

00:04:11,850  -->  00:04:17,040
And then for the next four additional elements we have 96 bytes so the first element has 64.

60

00:04:17,190  -->  00:04:23,490
The next additional four have 96 bytes and then the next for 128 bytes allocated in memory and then

61

00:04:23,490  -->  00:04:27,200
we have 192 for a larger section of the next bytes.

62

00:04:27,510  -->  00:04:32,650
And then to 64 for a larger section and then 3 4 4 3 etc..

63

00:04:33,000  -->  00:04:38,520
So you'll notice that as we keep adding elements basically what Python is doing is is grabbing more

64

00:04:38,520  -->  00:04:46,420
and more real estate in memory and it's allowing us to see that there is an underlying change in memory

65

00:04:46,430  -->  00:04:46,520
.

66

00:04:46,650  -->  00:04:52,740
When you insert more or more elements until you need a memory usage jump.

67

00:04:52,740  -->  00:05:02,170
So for instance back here if we look at the fifth element size in bytes 128 we can see that we needed

68

00:05:02,190  -->  00:05:11,220
to make a memory usage jump so a basic analogy to this system could be almost like a hermit crab grabbing

69

00:05:11,230  -->  00:05:12,900
larger and larger shells.

70

00:05:13,200  -->  00:05:20,530
So this list is grabbing more and more space and memory until it realizes hey I'm growing large enough

71

00:05:20,580  -->  00:05:22,220
that I'm probably going to need more in the future.

72

00:05:22,240  -->  00:05:28,650
And then it grabs more memory but it doesn't in chunks so that it doesn't need to constantly do it for

73

00:05:28,650  -->  00:05:31,210
every element that gets appended to it.

74

00:05:31,650  -->  00:05:37,720
So even if you just add one elements after the first element they'll still grab 96 bites which is going

75

00:05:37,710  -->  00:05:42,100
to be able to hold those next four elements one two three and four.

76

00:05:42,330  -->  00:05:47,350
And then when you add the fifth element it's going to jump to 128 and that's going to be able to hold

77

00:05:48,360  -->  00:05:49,760
future elements as well.

78

00:05:49,810  -->  00:05:56,170
And it's going to keep doing these jumps almost like a hermit crab jumping to a largish shell until

79

00:05:56,170  -->  00:06:00,850
it grows large enough that it's going to need to jump to another shell.

80

00:06:00,850  -->  00:06:01,360
All right.

81

00:06:01,600  -->  00:06:03,480
So it's going to go back to the presentation.

82

00:06:03,490  -->  00:06:06,940
To finish off some of the theory of this.

83

00:06:07,060  -->  00:06:07,750
All right.

84

00:06:07,750  -->  00:06:13,080
So now at the presentation that we're going to do is just briefly describe what it implements a dynamic

85

00:06:13,080  -->  00:06:13,730
array.

86

00:06:14,130  -->  00:06:18,260
And then in the next lecture we'll actually live code and implementation out.

87

00:06:18,310  -->  00:06:24,240
So the Python list class provides a very optimized implementation of dynamic arrays which we're going

88

00:06:24,250  -->  00:06:29,580
to rely on for the remainder of this course but just for instruction we're going to make our own basic

89

00:06:29,580  -->  00:06:30,880
implementation.

90

00:06:31,200  -->  00:06:34,880
So let's go ahead and learn the theory behind how we're going to implement this.

91

00:06:34,950  -->  00:06:38,250
And then in the next lecture we'll actually code it out live.

92

00:06:39,150  -->  00:06:44,680
So the key to provide the key is to provide a means to grow the array.

93

00:06:44,700  -->  00:06:46,450
Let's say in this case it's a.

94

00:06:46,770  -->  00:06:49,030
So we want to grow the array a.

95

00:06:49,080  -->  00:06:51,180
That stores the elements of a list.

96

00:06:51,390  -->  00:06:56,820
And of course we can't actually grow that array because we already know that it needs have a fixed capacity

97

00:06:56,820  -->  00:06:57,420
.

98

00:06:57,690  -->  00:07:02,740
So if an elements appended to a list at a time when the underlying array is.

99

00:07:02,890  -->  00:07:09,050
We're going to perform some steps and just go ahead and see what those look like.

100

00:07:09,060  -->  00:07:16,020
So the steps are going to be first we allocate a new array let's call it B with a larger capacity and

101

00:07:16,020  -->  00:07:21,600
then we set the indices let's say be of equal to a of I for I.

102

00:07:21,630  -->  00:07:28,230
All the way from 0 to and minus 1 or endnotes to current number of items.

103

00:07:28,320  -->  00:07:34,060
And the reason we are using and minus one is because the in the index starts at 0 and then we're going

104

00:07:34,060  -->  00:07:42,550
to do is say set a equal to B and then henceforth for going to use B as the array supporting the list

105

00:07:42,540  -->  00:07:42,830
.

106

00:07:43,120  -->  00:07:47,890
And then finally we're going to insert that new elements n into the new array.

107

00:07:48,190  -->  00:07:50,450
So let's go in and see an illustration of this process.

108

00:07:50,470  -->  00:07:53,220
It's a little more clear.

109

00:07:53,250  -->  00:07:53,820
All right.

110

00:07:54,150  -->  00:08:00,970
So again here we have is in array loops a.

111

00:08:01,120  -->  00:08:02,710
So we have this array.

112

00:08:02,820  -->  00:08:06,630
We allocate a new array B has a larger capacity.

113

00:08:06,690  -->  00:08:13,120
So that was the bytes that new chunk of bytes that we saw when we were actually programming out that

114

00:08:13,120  -->  00:08:14,260
print statements.

115

00:08:14,280  -->  00:08:17,710
So here we have this array already has references.

116

00:08:17,790  -->  00:08:23,670
We allocate a new chunk of memory space and we'll call that array B.

117

00:08:23,940  -->  00:08:32,910
And then we set the references here on storing elements of a in B and then finally we reference the

118

00:08:32,910  -->  00:08:33,680
array B.

119

00:08:33,730  -->  00:08:35,410
Now it's array.

120

00:08:35,790  -->  00:08:42,510
So again the steps are we create the array B store the elements of a and b through a re-assignment of

121

00:08:42,510  -->  00:08:46,710
the reference and then we call the B array.

122

00:08:46,720  -->  00:08:47,590
Now it's a.

123

00:08:47,670  -->  00:08:53,280
So now we have this new array and that information or that memory space that was allocated to the old

124

00:08:53,280  -->  00:08:55,220
array can now be used.

125

00:08:55,480  -->  00:09:00,460
Well we're not showing here in the diagram is what's called garbage collection of the old array or the

126

00:09:00,450  -->  00:09:01,920
insertion of the new element.

127

00:09:02,010  -->  00:09:04,260
We'll go over those in a future lecture.

128

00:09:04,650  -->  00:09:11,640
Now the last remaining issue is to consider how large of a new array to create a commonly used rule

129

00:09:11,740  -->  00:09:16,970
is for the new array to have twice the capacity of the existing array that has just been filled.

130

00:09:17,280  -->  00:09:23,230
And later on we'll actually have a lecture that describing the mathematical analysis to justify that

131

00:09:23,230  -->  00:09:25,640
decision.

132

00:09:26,020  -->  00:09:31,050
And so just to go over that again we want to learn how large of an array to create that common rule

133

00:09:31,060  -->  00:09:36,910
is twice the capacity of the existing array and later on we'll see a mathematic reasoning behind this

134

00:09:36,920  -->  00:09:37,520
.

135

00:09:38,110  -->  00:09:42,680
So just to review what we've done we learn what a dynamic array is.

136

00:09:43,090  -->  00:09:46,130
We saw theoretically how to implement a dynamic array.

137

00:09:46,240  -->  00:09:51,880
And we also saw some life coding on the thought process and just what's actually happening under the

138

00:09:51,880  -->  00:09:57,910
hood so to speak where we're appending new elements but we can see that there's these chunks of bytes

139

00:09:57,900  -->  00:10:02,120
and memory that are being allocated as we create new arrays.

140

00:10:02,130  -->  00:10:02,630
All right.

141

00:10:02,980  -->  00:10:07,980
So up next we're going to code our own implementation example of a dynamic array.

142

00:10:08,290  -->  00:10:11,200
All right thanks everyone and I'll see you at the next lecture.
