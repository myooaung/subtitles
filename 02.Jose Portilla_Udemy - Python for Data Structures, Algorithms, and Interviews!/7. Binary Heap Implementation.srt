1

00:00:01,680  -->  00:00:07,450
Hello everyone and welcome to the binary heap implementation lecture.

2

00:00:08,280  -->  00:00:12,240
Just so you know all the code are going to be going through and the presentation is already written

3

00:00:12,240  -->  00:00:14,400
out for you in the Jupiter notebook.

4

00:00:14,520  -->  00:00:19,020
Also I highly recommend that you read through the Wikipedia article on binary heaps.

5

00:00:19,020  -->  00:00:24,690
First before viewing this lecture Let's go ahead and jump quickly to the browser to go over these two

6

00:00:24,690  -->  00:00:26,040
things.

7

00:00:26,910  -->  00:00:29,220
OK here we are at the Jupiter notebook.

8

00:00:29,220  -->  00:00:32,000
It's called binary heap implementation.

9

00:00:32,080  -->  00:00:36,180
Now we're going to implement binary heaps with certain operations.

10

00:00:36,180  -->  00:00:42,710
The operations we can implement are just binary heap which creates a new empty binary heap will add

11

00:00:42,710  -->  00:00:46,640
an insert operation which adds a new item to the heap.

12

00:00:46,680  -->  00:00:52,920
We'll have a Fynes men operation that will return the item with the minimum key value leaving the item

13

00:00:52,920  -->  00:00:54,080
in the heap.

14

00:00:54,090  -->  00:01:00,120
We'll have a DL for the delete men which returns the item with the minimum key value and removes the

15

00:01:00,120  -->  00:01:01,650
item from the heap.

16

00:01:01,650  -->  00:01:04,220
Also it is empty operation.

17

00:01:04,230  -->  00:01:07,280
Essentially these are all methods in our class and is empty.

18

00:01:07,290  -->  00:01:08,850
Method was going to return true.

19

00:01:08,870  -->  00:01:10,770
The senti returns false.

20

00:01:10,800  -->  00:01:16,410
Otherwise we'll have a size operation which returns a number of items in the heap and then a built heap

21

00:01:16,530  -->  00:01:24,330
list which builds a new heap from a list of keys later on the lecture will actually discuss how the

22

00:01:24,330  -->  00:01:29,600
list data structure can be mashed up for binary heap implementation.

23

00:01:30,000  -->  00:01:35,170
As far as the actual code here it is written up for use to go ahead and check it out.

24

00:01:35,190  -->  00:01:39,510
We're actually going to be basically looking at each of these Methot chunks and explaining them as we

25

00:01:39,510  -->  00:01:40,290
go along.

26

00:01:40,440  -->  00:01:46,320
Throughout this video lecture the other note I wanted to make was the actual binary heap Wikipedia article

27

00:01:46,340  -->  00:01:46,620
.

28

00:01:46,950  -->  00:01:50,770
So I highly recommend you actually just go ahead and read this first.

29

00:01:50,910  -->  00:01:58,140
Just read the introduction and then go ahead and read both the hip operations on inserts and extracts

30

00:01:58,320  -->  00:02:02,970
which are really similar to the ones we're going to implement and you can go ahead and read about building

31

00:02:02,970  -->  00:02:08,550
a heap but that's not super important for this lecture but the heap implementation will probably be

32

00:02:08,550  -->  00:02:12,870
super useful since it also discusses how to implement it with an array.

33

00:02:13,020  -->  00:02:16,520
So we're essentially going to be doing the same thing implementing it for list.

34

00:02:16,590  -->  00:02:19,200
So I highly recommend you just check out this article and read it.

35

00:02:19,200  -->  00:02:21,120
It's actually pretty straightforward.

36

00:02:21,210  -->  00:02:22,510
So definitely check it out.

37

00:02:22,860  -->  00:02:23,660
OK.

38

00:02:23,670  -->  00:02:28,440
With that being said let's go ahead and jump back to the presentation.

39

00:02:28,470  -->  00:02:30,300
OK so we're back to the presentation.

40

00:02:30,300  -->  00:02:33,560
Let's go ahead and continue.

41

00:02:33,570  -->  00:02:33,900
All right.

42

00:02:33,900  -->  00:02:39,450
First thing we're gonna do is in order to make our heape work efficiently we will take advantage of

43

00:02:39,450  -->  00:02:46,260
the logarithmic nature of the binary tree represent our heat in order to guarantee logarithmic performance

44

00:02:46,260  -->  00:02:46,340
.

45

00:02:46,350  -->  00:02:52,560
We must keep our tree balance a balanced binary tree has roughly the same number of nodes in the left

46

00:02:52,650  -->  00:02:57,700
and right subtrees of the root in our heap implementation.

47

00:02:57,720  -->  00:03:04,830
We keep the tree balanced by creating a complete binary tree a complete binary tree is a tree in which

48

00:03:04,920  -->  00:03:08,850
each level has all of its nodes.

49

00:03:08,880  -->  00:03:12,250
So let me show you an example binary tree.

50

00:03:12,570  -->  00:03:14,880
Here we have a complete binary tree.

51

00:03:14,940  -->  00:03:20,970
And you'll notice it begins to only have one node at this particular branch because it has an odd number

52

00:03:20,970  -->  00:03:22,450
of elements in it.

53

00:03:23,010  -->  00:03:28,080
What's another interesting property of a complete tree is that we can actually represent it using a

54

00:03:28,080  -->  00:03:29,980
single list.

55

00:03:30,270  -->  00:03:35,850
We do not need to use nodes and references as we showed earlier or even a list of lists which was our

56

00:03:35,850  -->  00:03:39,720
other implementation because we know the tree is complete.

57

00:03:39,780  -->  00:03:46,620
The left child of parents let's say at position P is the No that is found in position to p in the list

58

00:03:46,620  -->  00:03:48,510
.

59

00:03:48,600  -->  00:03:54,710
Similarly the right child or the parent is that position two times P plus one in the list.

60

00:03:54,720  -->  00:04:02,390
Let me go ahead and show you a figure of a complete tree with its list representation.

61

00:04:03,450  -->  00:04:09,870
So here you can begin to know that this Tupi and two plus one relationship between the parent and children

62

00:04:10,290  -->  00:04:16,440
given this representation that this represent the list representation of the tree along with the full

63

00:04:16,440  -->  00:04:22,350
structure property allows us to efficiently traverse a complete binary tree using only a few simple

64

00:04:22,350  -->  00:04:27,210
mathematical operations which we're going to see as we show you the implementation code.

65

00:04:27,590  -->  00:04:33,500
We will see that this also leads to an efficient implementation of the binary heap.

66

00:04:33,690  -->  00:04:40,470
So if we just look at this figure we can see that we have five as a level at the root level the tree

67

00:04:41,070  -->  00:04:43,830
and then 9/11 at the next level.

68

00:04:44,080  -->  00:04:52,290

69
14:18 19:21 at the next level down and then 33 17 27 and we see here the pattern we just have 0 as an

70

00:04:52,290  -->  00:04:59,190
index of 0 and then we continue almost the levels so let me go over what I was talking about about that

71

00:04:59,190  -->  00:04:59,750
too.

72

00:04:59,840  -->  00:05:08,250
And that two P plus one let's say for instance we want to find out what are the children of the nine

73

00:05:08,310  -->  00:05:08,730
node.

74

00:05:08,760  -->  00:05:16,980
So over here the children are 14 and 18 Well we have the index of two over here.

75

00:05:17,070  -->  00:05:23,990
So if you just want say two times P that parent value is two times two which is four.

76

00:05:24,090  -->  00:05:28,340
And here we have 14 which is the left child who want to find the right child.

77

00:05:28,350  -->  00:05:34,680
We just have to say two times P plus 1 p just stands for that parent position.

78

00:05:34,680  -->  00:05:38,320
So two times two plus one is five and then we get 18.

79

00:05:38,640  -->  00:05:40,920
So go ahead and try that one more time.

80

00:05:41,010  -->  00:05:47,670
Here we have 18 let's say we want to find out the left child that's going to be 2 times P she's going

81

00:05:47,670  -->  00:05:55,200
to be that 5 index times 2 which will bring you over to 10 which is 27 element which you found and matches

82

00:05:55,200  -->  00:05:56,730
correctly.

83

00:05:57,240  -->  00:06:02,070
You can go ahead and reference that Wikipedia article I mentioned earlier in case you want a full mathematical

84

00:06:02,070  -->  00:06:08,610
breakdown of that 2 P and 2 P plus 1 so hopefully here you can see that it's pretty straightforward

85

00:06:08,610  -->  00:06:09,780
and basic.

86

00:06:09,780  -->  00:06:14,180
So again let's just go ahead and choose one other number will say 11.

87

00:06:14,370  -->  00:06:17,640
So 11 is a position P equals 3.

88

00:06:17,880  -->  00:06:22,830
If I wanted to find the right child of 11 I would say two times P plus 1.

89

00:06:22,830  -->  00:06:27,140
So that's going to be three times two which equals six plus one is seven.

90

00:06:27,150  -->  00:06:30,300
So I go to index 7 and here I found 21.

91

00:06:30,630  -->  00:06:34,860
So this is pretty cool in the fact that I just need to use a single list.

92

00:06:34,920  -->  00:06:39,840
I don't need to use those notes and references or the list of lists implementations that we saw earlier

93

00:06:39,840  -->  00:06:41,830
in this section of course.

94

00:06:41,880  -->  00:06:42,790
So keep that in mind.

95

00:06:42,810  -->  00:06:47,890
It's going to be really useful as we implement our binary heap.

96

00:06:48,150  -->  00:06:50,460
And again just a quick reminder as we continue on.

97

00:06:50,460  -->  00:06:53,670
You can use that Jupiter notebook to reference the complete code.

98

00:06:53,670  -->  00:06:57,340
I'll be showing you just screenshots of sections of the code.

99

00:06:58,200  -->  00:07:01,440
First off is going to be the class Ben heap.

100

00:07:01,620  -->  00:07:04,920
And as I mentioned we're just going to use a list representation.

101

00:07:04,920  -->  00:07:10,440
So I have self-taught heape list equals to just a single number 0 there.

102

00:07:10,710  -->  00:07:13,060
And self-taught current size equals zero.

103

00:07:13,140  -->  00:07:20,690
So we have lists of just one single element of zero in the list and the current size is zero.

104

00:07:21,630  -->  00:07:27,690
And what I wanted to point out here is that the next method we're going to implement is insert in before

105

00:07:27,690  -->  00:07:28,690
we implement insert.

106

00:07:28,710  -->  00:07:33,230
Let me go back real quick and clarify every step that's going on here.

107

00:07:33,240  -->  00:07:38,560
We're beginning our implementation of a binary heap just with the simple constructor that Ben heap.

108

00:07:38,640  -->  00:07:43,920
And since the entire binary heap can be represented by a single list as we just saw all the constructor

109

00:07:43,920  -->  00:07:50,490
will do is initialized the list and an attribute current size to keep track of the current size of the

110

00:07:50,490  -->  00:07:51,660
heat.

111

00:07:51,810  -->  00:07:56,640
So you will notice that an empty binary heap has a single zero as the first element of the heap list

112

00:07:57,390  -->  00:08:03,900
and this zero is not used but is there so that simple integer division can be used on inhalator methods

113

00:08:03,900  -->  00:08:04,390
.

114

00:08:04,410  -->  00:08:09,210
So if we scope back real quick you notice that 0 here.

115

00:08:09,210  -->  00:08:16,530
This is really just for simplifying and all the other methods we're going to be using later on for integer

116

00:08:16,530  -->  00:08:18,370
division purposes.

117

00:08:19,140  -->  00:08:19,920
OK.

118

00:08:20,280  -->  00:08:22,410
Let's go ahead and keep moving on.

119

00:08:22,440  -->  00:08:29,290
So we have our constructor ready to go that class been here and we have the lists and current size.

120

00:08:29,310  -->  00:08:34,650
Now the next method will implement is insert the easiest and most efficient way to add an item to a

121

00:08:34,650  -->  00:08:38,840
list is just to simply append the item to the end of the list.

122

00:08:38,850  -->  00:08:44,010
The good news about appending is that it guarantees that we will maintain the complete tree property

123

00:08:44,010  -->  00:08:44,670
.

124

00:08:44,670  -->  00:08:52,020
However the bad news about a pending is that will very likely violate the heap structure property.

125

00:08:52,020  -->  00:08:57,030
However it is possible to write a method that will allow us to regain the heap structure property by

126

00:08:57,030  -->  00:09:00,120
comparing the newly added item with its parent.

127

00:09:00,120  -->  00:09:05,750
If the newly added item is less than its parent then we can actually swap the item with its parent.

128

00:09:06,120  -->  00:09:11,550
Let's go ahead and see the series of swaps needed to essentially percolate the newly added item to its

129

00:09:11,550  -->  00:09:16,710
proper position in the tree.

130

00:09:16,760  -->  00:09:24,290
OK so here we have our complete tree and we just added new item 7 as the right child of 18.

131

00:09:24,720  -->  00:09:30,180
So we're going to do is keep doing swaps and essentially percolate at the new node up to its proper

132

00:09:30,180  -->  00:09:31,890
position.

133

00:09:31,890  -->  00:09:38,940
So meaning we do one swap here and another swap here and noticed that when we percolate an item up we

134

00:09:38,940  -->  00:09:43,250
are restoring the heap property between the newly added item and the parent.

135

00:09:43,260  -->  00:09:48,570
We're also preserving the heap property for any siblings of course it's the newly added item is very

136

00:09:48,570  -->  00:09:49,260
small.

137

00:09:49,260  -->  00:09:54,720
We may need to swap it up another level in fact we may need to keep swapping until we get to the top

138

00:09:54,720  -->  00:09:56,010
of the tree in this case.

139

00:09:56,010  -->  00:09:59,710
We don't because it's just seven in the root was five

140

00:10:02,980  -->  00:10:07,540
so this is just everything I just said as far as having to keep swapping to go up to the top of the

141

00:10:07,530  -->  00:10:08,750
tree.

142

00:10:08,970  -->  00:10:10,850
And as far as the method for insertion.

143

00:10:11,160  -->  00:10:16,920
So what it looks like we have this perk up method and we're able to use this simple integer division

144

00:10:16,920  -->  00:10:20,940
here due to the fact that we're using just that simple heape list.

145

00:10:21,000  -->  00:10:27,810
So we just say if the list is less then well the list at that index is less than the heap list at that

146

00:10:27,820  -->  00:10:28,710
index.

147

00:10:28,960  -->  00:10:30,710
Integer division 2.

148

00:10:30,820  -->  00:10:35,730
Then we set up this temporary variable as that integer division 2.

149

00:10:36,460  -->  00:10:44,350
And this is just to deal with the classic division versus floating point division just so we always

150

00:10:44,350  -->  00:10:51,310
have an index coming out here and then we essentially just reassign it to that original index and then

151

00:10:51,310  -->  00:10:53,940
set the new the old index a temporary variable.

152

00:10:53,950  -->  00:10:56,470
This is just a switching that's happening here.

153

00:10:56,740  -->  00:11:06,160
And then we just say equal to a class division divided by two and then we have ready to write the insert

154

00:11:06,150  -->  00:11:06,800
method.

155

00:11:06,820  -->  00:11:11,850
So most of the work in the insert method is actually really done by that perk up method we just saw

156

00:11:12,270  -->  00:11:14,180
once a new item is appended to the tree.

157

00:11:14,380  -->  00:11:22,020
Perk up takes over and positions and you item properly so you can see here in the inserts we just append

158

00:11:22,070  -->  00:11:25,270
they say the current size plus 1.

159

00:11:25,380  -->  00:11:30,900
And then we call that perk up function or method to help us out and do the heavy lifting of the actual

160

00:11:30,900  -->  00:11:34,470
inserting that's going on.

161

00:11:34,500  -->  00:11:39,610
So if the insert method properly defined we can now look at the delete min method.

162

00:11:40,090  -->  00:11:45,790
So since the heap property acquires at the root of the tree must be excuse me that the root of the tree

163

00:11:45,780  -->  00:11:47,830
be the smallest item in the tree.

164

00:11:47,830  -->  00:11:50,700
Finding the minimum item is actually pretty easy.

165

00:11:50,710  -->  00:11:56,170
The hard part of the Littman is then restoring full compliance with the heap structure and heap order

166

00:11:56,160  -->  00:11:59,880
properties after the root has been removed.

167

00:12:01,020  -->  00:12:03,310
We can restore a heap in two steps.

168

00:12:03,340  -->  00:12:09,460
First we will restore the root item by taking the last item in the list and moving it to the root position

169

00:12:09,460  -->  00:12:10,300
.

170

00:12:10,300  -->  00:12:13,930
Moving the last item maintains or heap structure property.

171

00:12:13,920  -->  00:12:19,160
However we have properly destroyed the heap order property of our binary heap.

172

00:12:19,210  -->  00:12:24,930
Second we will restore the heap order property by pushing the new root node down the tree to its proper

173

00:12:24,930  -->  00:12:26,480
position.

174

00:12:27,220  -->  00:12:32,440
So let's go and check out the series of swaps needed to move the new root node to its proper position

175

00:12:32,430  -->  00:12:33,880
in the heap.

176

00:12:34,770  -->  00:12:39,100
So here in this figure we just decided to remove that minimum element which is fine.

177

00:12:39,550  -->  00:12:42,720
And in this case we're going to begin to doing some swapping.

178

00:12:43,170  -->  00:12:53,050
So Will do one swap from this nine to the root and then we have 27 being swapped to go to that place

179

00:12:53,070  -->  00:12:54,330
.

180

00:12:54,580  -->  00:13:01,500
Then we're going to swap 14:27 to move 14 up such the percolating up and then you notice we have to

181

00:13:01,500  -->  00:13:06,910
do another swap since 2007 is still greater than 17.

182

00:13:06,900  -->  00:13:11,730
In order to maintain the heap order property all we need to do is swap the root with its smallest child

183

00:13:11,980  -->  00:13:13,320
less than the root.

184

00:13:13,530  -->  00:13:19,050
After the initial swap we may repeat the swapping process with a node and its children until the notice

185

00:13:19,060  -->  00:13:25,500
swapped to position on the tree where it is already less than both children.

186

00:13:25,600  -->  00:13:31,680
So here's the full code for Pickle percolating and note down the tree and it can be found in bouffe

187

00:13:31,980  -->  00:13:37,780
Kirk down and the men child methods here let you go ahead and check those out on your own.

188

00:13:37,920  -->  00:13:43,060
But it's essentially you doing the swapping mechanisms that we just described which then just leads

189

00:13:43,060  -->  00:13:47,950
us to the code for that delete men and you can note again that most of the heavy work is going to be

190

00:13:47,940  -->  00:13:51,400
done by this per down method.

191

00:13:52,090  -->  00:13:53,860
So here's the code for delete men.

192

00:13:54,120  -->  00:13:59,890
So when you call delete man you're just setting that return value equal to heape list one member cause

193

00:14:00,020  -->  00:14:00,710
plus 0.

194

00:14:00,720  -->  00:14:08,550
That index at 0 0 zero meaning list at 1 is your root node which is the minimum element in your heap

195

00:14:08,560  -->  00:14:09,620
structure.

196

00:14:09,630  -->  00:14:13,980
So you have that return value and you go ahead and return the return value at the end.

197

00:14:13,990  -->  00:14:21,120
But before you do that you say replace that one equals self-doubt heap list self-talk current size and

198

00:14:21,120  -->  00:14:24,290
then solve the current size equal soft or current size minus one.

199

00:14:24,490  -->  00:14:30,580
So you readjust your size because you just got rid of an element you say replace that pop and then you

200

00:14:30,580  -->  00:14:34,140
Pearch down and put down as follows.

201

00:14:34,140  -->  00:14:38,700
This method of swapping and as well as getting that minimum child finding.

202

00:14:39,060  -->  00:14:44,140
OK the reason we have the minimum child here as well is because pert down needs to call it in order

203

00:14:44,130  -->  00:14:46,120
to find it.

204

00:14:46,360  -->  00:14:49,810
Continuing on to finish our discussion of binary heaps.

205

00:14:49,830  -->  00:14:53,920
We'll look at a method to build an entire heap from a list of keys.

206

00:14:53,980  -->  00:14:57,480
The first method you might think of maybe like the following.

207

00:14:57,490  -->  00:15:02,730
Given a list of keys you could easily build a heap by inserting each key one at a time.

208

00:15:02,830  -->  00:15:08,590
Since you're starting the list of one item the list is sorted and you could use binary search to find

209

00:15:08,590  -->  00:15:15,440
the right position to insert the next key at a cost of approximately order log and operations.

210

00:15:15,450  -->  00:15:21,810
However remember that inserting an item in the middle of the list may require order n or linear operations

211

00:15:21,820  -->  00:15:25,700
to shift the rest of the list over to make room for the new key.

212

00:15:25,720  -->  00:15:32,680
Therefore to insert end keys into the heap would require a total of end times log and big-O operations

213

00:15:32,670  -->  00:15:33,210
.

214

00:15:33,220  -->  00:15:39,670
However if we start off an entire list then we can build a whole heap in just order and operations.

215

00:15:39,660  -->  00:15:42,040
So there's the code to build the heap.

216

00:15:42,040  -->  00:15:44,850
You can check it out in the Jubran note book as well.

217

00:15:44,860  -->  00:15:49,170
But let's go ahead and show a diagram of what this is actually doing.

218

00:15:49,300  -->  00:15:54,300
So we're actually going to essentially build a heap from the list that looks like this.

219

00:15:54,310  -->  00:15:57,280
9 6 5 2 3.

220

00:15:57,550  -->  00:16:04,020
So what happens here is the swaps that the build heap method that we just saw in the last slide makes

221

00:16:04,120  -->  00:16:11,440
as it moves the nodes in the initial tree of 9 6 5 to 3 into their proper positions and although we

222

00:16:11,430  -->  00:16:18,170
start out in the middle of the tree and work our way back towards the root that PERQ down method ensures

223

00:16:18,160  -->  00:16:24,620
that the largest child is always moved down the tree because the heap is a complete binary tree.

224

00:16:24,690  -->  00:16:30,470
Any nodes past the halfway point will be leaves and therefore have no children.

225

00:16:30,490  -->  00:16:35,650
Notice that when I's equal to one we are percolating down from the root of the tree.

226

00:16:35,700  -->  00:16:41,330
So this may require multiple swaps as you can see in the rightmost two trees.

227

00:16:41,500  -->  00:16:48,120
So these two trees over here first the nine is moved out of the root position but after the 9 is moved

228

00:16:48,120  -->  00:16:54,150
down one level in the tree Herc down method ensures that we check the next set of children.

229

00:16:54,270  -->  00:16:58,510
Farther down on the tree to ensure that it is pushed as low as it can go.

230

00:16:59,080  -->  00:17:05,260
Meaning we're checking here against three to continue pushing it down so no.

231

00:17:05,290  -->  00:17:11,380
Now that 9 has been moved to the lowest level the tree no further swapping can be done and it's useful

232

00:17:11,380  -->  00:17:17,920
to compare the list representation of the series of swaps as shown in this figure here with the tree

233

00:17:17,910  -->  00:17:20,140
representation.

234

00:17:20,130  -->  00:17:25,150
Something that might seem a little strange is when I said that we can actually build a heap in order

235

00:17:25,200  -->  00:17:27,130
an or linear time.

236

00:17:27,180  -->  00:17:33,130
The proof of how that actually works is really beyond the scope of this course in interviews in general

237

00:17:33,120  -->  00:17:33,590
.

238

00:17:33,610  -->  00:17:39,850
However just to know the key to understanding that is that you can build a heap in linear time because

239

00:17:39,850  -->  00:17:43,760
that log and factor is derived from the height of the tree.

240

00:17:44,050  -->  00:17:50,910
For most of the work in that build heap function or method the tree is actually shorter than a log and

241

00:17:51,440  -->  00:17:55,270
then using the fact that you can build a heap from a list in linear time.

242

00:17:55,300  -->  00:18:00,240
What we're gonna do is construct a sorting out of them that uses a heap and sorts of list in N log and

243

00:18:00,240  -->  00:18:01,560
time.

244

00:18:01,610  -->  00:18:06,880
OK so I know we went through quite a bit and that was some pretty heavy stuff.

245

00:18:06,900  -->  00:18:10,770
So make sure you review that Jupiter note book and the Wikipedia article.

246

00:18:10,780  -->  00:18:12,760
This lecture is going to lead into the next topic.

247

00:18:12,790  -->  00:18:14,560
Binary search trees.

248

00:18:14,760  -->  00:18:16,280
Go ahead take your time with this.

249

00:18:16,260  -->  00:18:21,380
This is a lot of information it's just taken in one single essentially 20 minute span.

250

00:18:22,300  -->  00:18:27,360
So if you want to review this again I suggest you check out the basics of that Wikipedia article.

251

00:18:27,370  -->  00:18:32,970
Open up your Jupiter notebook and try to type along as you see the figures so you can slow down the

252

00:18:32,970  -->  00:18:38,220
video or just pause the video and see if you can type along with your Jupiter note book and the figures

253

00:18:38,220  -->  00:18:45,060
you see to correspond the code to the actual logic and diagrams that is happening with those methods

254

00:18:45,080  -->  00:18:45,770
.

255

00:18:45,760  -->  00:18:49,360
OK that's it for this lecture.

256

00:18:49,380  -->  00:18:51,850
Thanks I know it was a long one and a lot of information.

257

00:18:51,900  -->  00:18:54,420
So take your time reviewing it.

258

00:18:54,450  -->  00:18:54,800
Thanks
