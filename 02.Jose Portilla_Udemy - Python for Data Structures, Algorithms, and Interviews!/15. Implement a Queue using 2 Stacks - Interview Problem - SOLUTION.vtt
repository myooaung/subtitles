WEBVTT
1

00:00:01.110  -->  00:00:04.230
Hello everyone and welcome to the solution for implementing it.

2

00:00:04.230  -->  00:00:08.170
Q. using two stacks interview problem.

3

00:00:08.220  -->  00:00:14.760
So again the problem statement was given the stat class below implement a q class using two stacks and

4

00:00:14.760  -->  00:00:19.080
you were allowed to use a python list data structure as your stack.

5

00:00:19.080  -->  00:00:22.640
So what was the solution.

6

00:00:23.060  -->  00:00:24.210
Go ahead and zoom in a bit.

7

00:00:24.270  -->  00:00:31.220
Wups So the key insight is that a stack reverses the order while a queue doesn't.

8

00:00:31.500  -->  00:00:33.740
When you're pulling stuff out of it.

9

00:00:33.810  -->  00:00:35.880
So that was the main key.

10

00:00:35.910  -->  00:00:41.070
And we mentioned that when we were going over the stack theory lecture to always keep that in mind as

11

00:00:41.070  -->  00:00:45.760
you pull stuff out of a stack you reversing the order of which you put them in.

12

00:00:45.780  -->  00:00:50.980
So a sequence of elements pushed onto a stack Raemer becomes reversed when you pop them out.

13

00:00:51.330  -->  00:00:58.260
So consequently two stacks chained together will return elements in the same order since reversed order

14

00:00:58.320  -->  00:01:00.990
reversed again is original order.

15

00:01:00.990  -->  00:01:03.630
So that's why this is such a classic interview problem.

16

00:01:03.660  -->  00:01:08.550
It really checks that you understand what both stack and queue is.

17

00:01:08.550  -->  00:01:14.760
So we use it in stack that we fill when an element is on cue or in Q and the dequeue operation takes

18

00:01:14.790  -->  00:01:18.480
elements from it out stack if the stack is empty.

19

00:01:18.570  -->  00:01:23.290
We pop all elements from the stack and push them into the stack.

20

00:01:23.490  -->  00:01:26.180
So you're given some filler code.

21

00:01:26.540  -->  00:01:27.800
We go and zoom out here.

22

00:01:28.080  -->  00:01:34.410
Given this class and then two stacks and you're supposed to fill in the on Kiran Q And then the dequeue

23

00:01:34.420  -->  00:01:35.070
.

24

00:01:35.730  -->  00:01:43.560
So we're going to do is rename the stacks into something that will show the logic a little better we'll

25

00:01:43.560  -->  00:01:48.010
have it in stack and in out stack.

26

00:01:48.710  -->  00:01:49.910
OK.

27

00:01:51.330  -->  00:02:01.920
So we're going to do for on cue or adding elements into that Q is say self dots in stack and we'll append

28

00:02:03.190  -->  00:02:04.980
that elements.

29

00:02:05.160  -->  00:02:07.590
So that's all we have to do for the on cue.

30

00:02:07.770  -->  00:02:13.710
We just take the stack and then appendant basically pushing it onto the top end of the dequeue is where

31

00:02:13.710  -->  00:02:15.830
we have to do that double reversal.

32

00:02:15.990  -->  00:02:21.130
So we're going to say if not self outs stack

33

00:02:24.750  -->  00:02:33.090
while self-taught in stack and this is basically the checks for the empties we're going to do is add

34

00:02:33.090  -->  00:02:37.200
the elements to the out stack to reverse the order when called.

35

00:02:37.200  -->  00:02:45.600
So when I say self-taught out stack lots of pens and I'm going to append

36

00:02:48.060  -->  00:03:03.870
the pot elements from the stack and then all I have to do is just return self out stack up pop.

37

00:03:03.930  -->  00:03:04.720
OK.

38

00:03:05.040  -->  00:03:08.840
So this is really the key insight here.

39

00:03:08.850  -->  00:03:11.330
These two lines one for that instead.

40

00:03:11.410  -->  00:03:18.630
You just have to append the element and the other for that Dijk you so remember that we have a stack

41

00:03:18.660  -->  00:03:24.500
that's going to reverse order when a sequence of elements is pushed onto a stack or on a stack.

42

00:03:24.720  -->  00:03:27.150
It's going to come back in reverse order when pot.

43

00:03:27.480  -->  00:03:33.090
So that means that two stacks chained together are going to return elements in the same order since

44

00:03:33.090  -->  00:03:34.170
reversed them twice.

45

00:03:34.170  -->  00:03:37.920
We just reverse reverse and that's the original order.

46

00:03:37.980  -->  00:03:39.130
So we're doing as we use.

47

00:03:39.180  -->  00:03:45.950
We're using this in stack right here and we use that in stack when we fill in elements.

48

00:03:46.020  -->  00:03:52.670
It's an acute and the dequeue operation takes elements from that out stack here.

49

00:03:52.710  -->  00:04:01.770
So if the stack is empty what we're going to do is pop all elements from the stack right here and then

50

00:04:01.770  -->  00:04:04.360
push them onto the stack.

51

00:04:05.130  -->  00:04:06.240
OK.

52

00:04:06.240  -->  00:04:11.100
So this loop is basically checking the empties for that particular piece of logic.

53

00:04:11.400  -->  00:04:17.250
So using that instead we fill when an element is queued and then dequeue operation takes elements from

54

00:04:17.280  -->  00:04:23.990
our stack if the stack is empty we pump all elements from the stack which is why we say here while self

55

00:04:24.030  -->  00:04:27.300
in stack and then push them onto the stack.

56

00:04:27.330  -->  00:04:28.980
So what we're doing in this line.

57

00:04:29.490  -->  00:04:30.260
OK.

58

00:04:30.600  -->  00:04:32.770
So go ahead and code out the solution.

59

00:04:33.030  -->  00:04:36.340
Make sure you can do this from memory or at least from your memory.

60

00:04:36.360  -->  00:04:41.580
The theory of queues and stacks is a really common interview problem.

61

00:04:41.580  -->  00:04:44.020
All right thanks everyone.

62

00:04:44.400  -->  00:04:49.800
And that's it for the stacks Queues and decks lectures and section of the course.

63

00:04:49.960  -->  00:04:54.780
We should have gotten out of this as a full understanding of stack queues and decks how to implement

64

00:04:54.840  -->  00:05:00.210
each of those and how to use their logic for interview problems.

65

00:05:00.210  -->  00:05:03.390
All right thanks everyone and I'll see you at the next lecture
