1

00:00:01,050  -->  00:00:06,670
Hello everyone and welcome to the implementation of binary search trees lecture.

2

00:00:07,110  -->  00:00:09,630
This is going to be a two part lecture.

3

00:00:09,630  -->  00:00:14,780
You can refer to the Jupiter note book for the code discussed in this lecture will be jumping to Jupiter

4

00:00:14,800  -->  00:00:18,250
notebook from time to time to discuss larger chunks of code.

5

00:00:18,270  -->  00:00:23,880
You can also refer to the Wikipedia article on BSD or a binary search trees for more information on

6

00:00:23,880  -->  00:00:25,040
the subject.

7

00:00:25,240  -->  00:00:30,000
In this two part lecture we're going to be going over an overview of binary search trees and also an

8

00:00:30,000  -->  00:00:32,010
implementation of them in Python.

9

00:00:32,250  -->  00:00:34,640
Let's go ahead and get started.

10

00:00:35,370  -->  00:00:41,100
A binary search tree relies on the property that keys that are less than the parents are found in the

11

00:00:41,100  -->  00:00:47,140
left subtree and keys that are greater than the parent are found in the right subtree.

12

00:00:47,190  -->  00:00:50,440
We're going to call this property BSEE property.

13

00:00:50,490  -->  00:00:55,200
The fact that keys that are less than that parent node are found in the left subtree and keys that are

14

00:00:55,200  -->  00:00:58,260
greater than the parent node are found in the right subtree.

15

00:00:58,350  -->  00:00:59,550
So in an interview setting.

16

00:00:59,580  -->  00:01:03,000
When someone mentions BSD or BSD property.

17

00:01:03,030  -->  00:01:08,310
Think of that specific property that keys that are less in the parent go left keys that are greater

18

00:01:08,310  -->  00:01:09,230
than the parent node.

19

00:01:09,240  -->  00:01:14,580
Go to the right subtree as we implement the map interface as described above.

20

00:01:14,580  -->  00:01:21,780
That BSD property is going to be a guide to implementation so I'll see it crop up again and again.

21

00:01:22,020  -->  00:01:27,990
So here we have an example of a tree and noticed that the BSD property here holds.

22

00:01:27,990  -->  00:01:35,610
So every node and if you look to the left and right of the node you have that BSEE property all keys

23

00:01:35,760  -->  00:01:41,100
in the left subtree are less than the key and the root of the keys in the right subtree are greater

24

00:01:41,100  -->  00:01:43,050
than the key in the root.

25

00:01:43,050  -->  00:01:50,990
Notice that this BSD property only refers to the direct parent not the entire tree.

26

00:01:51,300  -->  00:01:57,330
So as again just to reiterate this really important property all of the keys in the left so tree are

27

00:01:57,330  -->  00:02:01,740
less than the key and the root of the keys in the right subtree are greater than the key in the room

28

00:02:01,740  -->  00:02:03,100
.

29

00:02:03,210  -->  00:02:08,820
So now that you know what a binary search tree is we will look at how a binary search tree is constructed

30

00:02:08,820  -->  00:02:09,310
.

31

00:02:09,450  -->  00:02:14,070
The search tree in the figure here which is the last one I showed you represents the notes that exist

32

00:02:14,160  -->  00:02:19,560
after we have inserted the following keys in the order shown 70 31 93.

33

00:02:19,770  -->  00:02:25,080
Then the next level 94 14:23 and 73.

34

00:02:25,560  -->  00:02:29,650
Since 70 was that first key inserted into the tree it becomes the root.

35

00:02:29,920  -->  00:02:35,460
Next 31 says less than 70 becomes the left child of 70.

36

00:02:35,630  -->  00:02:40,250
93 is greater than 70 so it becomes the right child of 70.

37

00:02:40,260  -->  00:02:46,100
Now we have two levels of the tree filled seventy level and then that 31 93 level.

38

00:02:46,140  -->  00:02:53,190
So the next key is going to be the left or right child of the 31 or 93 which is where 14 73 and 94 come

39

00:02:53,190  -->  00:03:00,100
into play since 94 is greater than 70 and 93 it becomes the right child of 93.

40

00:03:00,270  -->  00:03:03,500
Similarly 14 is less than 70 and 31.

41

00:03:03,750  -->  00:03:10,410
So it becomes the left child the 31 23 is also less than 31 so it must be in the left subtree of 31

42

00:03:10,410  -->  00:03:11,020
.

43

00:03:11,100  -->  00:03:13,460
However it is greater than 14.

44

00:03:13,470  -->  00:03:16,000
So becomes the right child of 14.

45

00:03:16,590  -->  00:03:22,110
So keep that in mind and he can go back and reference the slides for that list ordering of the way the

46

00:03:22,110  -->  00:03:25,320
keys were in put it into the sun into this binary search tree

47

00:03:28,260  -->  00:03:30,190
in order to implement the binary search tree.

48

00:03:30,230  -->  00:03:34,870
We will use the nodes and reference's approach similar to the one we used to implement the linked list

49

00:03:35,190  -->  00:03:36,670
and the expression tree.

50

00:03:36,690  -->  00:03:41,280
So go ahead and review that lecture on the notes and references implementation in case you need to review

51

00:03:41,280  -->  00:03:42,150
it.

52

00:03:42,240  -->  00:03:46,580
However because we must be able to create and work the binary search tree that is empty.

53

00:03:46,670  -->  00:03:50,250
Our implementation implementations actually going to use two classes the first class we're going to

54

00:03:50,490  -->  00:03:53,260
call binary search tree in a second class.

55

00:03:53,310  -->  00:03:55,270
We will call tree node.

56

00:03:55,920  -->  00:03:58,540
You can begin to reference the Jubran notebook if you need to.

57

00:03:58,860  -->  00:04:04,380
But in this case the binary search tree class has a reference to the tree node that is the root of the

58

00:04:04,380  -->  00:04:06,090
binary search tree.

59

00:04:06,150  -->  00:04:11,130
In most cases the external method is defined in the outer class to simply check to see if the tree is

60

00:04:11,220  -->  00:04:12,170
empty.

61

00:04:12,360  -->  00:04:17,610
If there are nodes already in the tree the request is just passed on to a private method to find that

62

00:04:17,600  -->  00:04:23,760
the binary search tree class takes as a parameter in the case where the trees empty or we want to delete

63

00:04:23,760  -->  00:04:25,710
the key at the root of the tree.

64

00:04:25,710  -->  00:04:27,310
We have to take a special action.

65

00:04:27,330  -->  00:04:34,440
We'll discuss all of this in much more detail as we jump back and forth from the Jupiter note book but

66

00:04:34,440  -->  00:04:39,350
the basics of the class we implement called binary search tree look like this.

67

00:04:39,420  -->  00:04:43,590
We have this init method which takes in none such as none.

68

00:04:43,800  -->  00:04:48,670
And that also starts off the sizes zero so it's totally empty has none as the root.

69

00:04:48,720  -->  00:04:54,420
Then we return length as just a method to return size and also we use the special method underscore

70

00:04:54,420  -->  00:04:57,210
underscore Eliane and also return size.

71

00:04:57,210  -->  00:05:04,280
But that allows you to use the Eliane length builtin method in Python on your binary search tree.

72

00:05:04,290  -->  00:05:09,270
I will said the special method called it sir which allows you to iterate through the binary search tree

73

00:05:09,480  -->  00:05:13,630
and will call the root as well.

74

00:05:13,680  -->  00:05:18,000
Let's go ahead and jump to the note book to check out the full tree node class and just go over some

75

00:05:18,000  -->  00:05:23,150
of the code OK here we are at the binary search trees notebook.

76

00:05:23,430  -->  00:05:27,600
You'll notice we have the class tree node with some basic methods there's quite a few of them.

77

00:05:27,600  -->  00:05:29,710
So that's where we then have them in the presentation.

78

00:05:29,970  -->  00:05:35,820
But it's the basics one basic ones that we discussed earlier such as has left child is left child is

79

00:05:35,820  -->  00:05:41,960
root is leaves and these methods just do exactly what they say they check if it has left child.

80

00:05:42,120  -->  00:05:48,300
They check it's has a root or if something is a root returns of hasn't any children etc. and the binary

81

00:05:48,300  -->  00:05:53,870
search tree is just taking advantage of that tree node class as well which is why we split it up.

82

00:05:54,330  -->  00:05:59,120
Go ahead and review the notes and references implementation of a tree in case you want to refer to the

83

00:05:59,120  -->  00:06:04,170
Treanor class here and get a little more background understanding on it throughout the rest of this

84

00:06:04,170  -->  00:06:08,670
two part lecture we're going to be focusing on some of these special methods such as putting items into

85

00:06:08,670  -->  00:06:14,490
our binary search tree getting items and then what's a little tricky is deleting items from a binary

86

00:06:14,490  -->  00:06:16,980
search tree and splicing them out.

87

00:06:17,250  -->  00:06:23,970
And this fine successor method also removing items from a binary search tree is a little complicated

88

00:06:24,030  -->  00:06:27,230
and there's a couple of cases we need to consider there.

89

00:06:27,330  -->  00:06:29,870
So we'll be going over those in much more detail.

90

00:06:30,120  -->  00:06:35,160
But just as far as the basics of what the tree node class looks like it just basically has left and

91

00:06:35,160  -->  00:06:41,340
right child methods and is true and is really leaf methods which are essentially just checks or returns

92

00:06:41,340  -->  00:06:44,310
of self-taught right child or self-taught left child.

93

00:06:44,310  -->  00:06:46,530
So go ahead and review that in the note book.

94

00:06:46,800  -->  00:06:52,080
But for right now let's go ahead and go back to the presentation and discuss some specific methods used

95

00:06:52,080  -->  00:06:53,960
here.

96

00:06:53,970  -->  00:06:55,180
OK.

97

00:06:55,470  -->  00:07:00,900
Now that we have that binary search tree shell and that tree note class it's time to write the method

98

00:07:01,140  -->  00:07:04,010
that will allow us to build our binary search tree.

99

00:07:04,050  -->  00:07:07,160
The method is just a method of that binary search string class.

100

00:07:07,200  -->  00:07:11,940
Again you can refer to Jubran notebook but will also have screenshots of some of the code methods here

101

00:07:11,940  -->  00:07:14,060
.

102

00:07:14,070  -->  00:07:17,200
This method will check to see if the tree already has a root.

103

00:07:17,340  -->  00:07:23,010
If there's not a root in place then we just put the Mutare node and install it as a root of the tree

104

00:07:23,000  -->  00:07:24,440
.

105

00:07:24,450  -->  00:07:29,800
If a root node is already in place then put calls the private recursive helper function.

106

00:07:29,960  -->  00:07:33,880
Put to search the tree according to the following algorithm.

107

00:07:33,900  -->  00:07:38,880
So what it's going to do it's going to start at the root of the tree search the binary tree comparing

108

00:07:38,880  -->  00:07:41,930
the new key to the key and the current node.

109

00:07:42,300  -->  00:07:45,950
The new key is less than the current node will go to the left subtree.

110

00:07:46,200  -->  00:07:48,170
It's an Yuuki is greater than the current node.

111

00:07:48,180  -->  00:07:53,280
We search the right subtree and that's due to that BSEE property that we were talking about earlier

112

00:07:56,620  -->  00:08:01,760
when there is no left or right child to search then we've actually found the position in the tree or

113

00:08:01,760  -->  00:08:05,610
the new node should be installed to add a node to the tree.

114

00:08:05,610  -->  00:08:10,770
We create a new tree node object and insert the object at the point discovered in the previous step

115

00:08:10,760  -->  00:08:12,160
.

116

00:08:12,180  -->  00:08:13,360
So this is the key.

117

00:08:13,380  -->  00:08:18,510
Scuse me the code that does all that little step essentially to put methods one Jonathan underscore

118

00:08:18,780  -->  00:08:26,610
and one with the underscore the one of out the underscore is just for code factoring or refactoring

119

00:08:26,790  -->  00:08:27,690
reasons.

120

00:08:27,690  -->  00:08:33,230
So it looks a little nicer and we use the underscore put as a helper function to do the heavy lifting

121

00:08:33,250  -->  00:08:33,820
.

122

00:08:34,380  -->  00:08:38,470
So again what's happening in this code is we start at the root of the tree.

123

00:08:38,610  -->  00:08:44,100
We search the binary tree comparing that new key to the key and the current node if the new key is less

124

00:08:44,110  -->  00:08:44,830
than the current node.

125

00:08:44,850  -->  00:08:48,260
We search the left subtree if a new key is greater than the current node.

126

00:08:48,260  -->  00:08:52,070
We search the right subtree when there is no left or right child to search.

127

00:08:52,080  -->  00:08:56,790
We know we found the position in the tree we're then you know should be installed to add a new note

128

00:08:56,790  -->  00:08:57,470
to the tree.

129

00:08:57,480  -->  00:09:03,860
We just create a new tree node object which you can see that happening here and here depending where

130

00:09:03,870  -->  00:09:04,890
it goes.

131

00:09:04,910  -->  00:09:07,290
We also have the self-taught root equals tree node.

132

00:09:07,470  -->  00:09:12,720
In case there's not a root already in place which is essentially what the put with no underscore does

133

00:09:12,720  -->  00:09:17,630
by itself it checks if there is a root if there is a calls that helper function.

134

00:09:17,660  -->  00:09:21,600
Otherwise it just adds the tree Trina there.

135

00:09:21,600  -->  00:09:27,880
Note that this underscore function is written recursively following the steps I just mentioned.

136

00:09:27,990  -->  00:09:33,960
Also notice that when a new child is inserted into the tree the current notice passed to the tree as

137

00:09:33,960  -->  00:09:36,570
the parents.

138

00:09:36,570  -->  00:09:42,560
One important problem with our implementation of insert is that duplicate keys are actually not handled

139

00:09:42,570  -->  00:09:48,870
properly as are trees implement a duplicate key will create a new node with the same key value in the

140

00:09:48,870  -->  00:09:52,070
right subtree of the node having the original key.

141

00:09:52,160  -->  00:09:57,750
The result of this is that the notice that new key will never be found during a search.

142

00:09:57,780  -->  00:10:02,700
So a better way to handle the insertion of a duplicate key is for the value associated with that new

143

00:10:02,700  -->  00:10:05,690
key to replace the old value.

144

00:10:06,650  -->  00:10:12,900
For right now we'll just ignore those duplicate subkey scenarios that you can go and explore and fix

145

00:10:12,890  -->  00:10:13,430
that code.

146

00:10:13,430  -->  00:10:21,150
If you want to to check for a duplicate key and then replace the old value with it and then here we

147

00:10:21,140  -->  00:10:26,750
just show a screenshot of that set item method which allows us to use the key value and this is what

148

00:10:26,760  -->  00:10:30,450
inserting a note of key 19 would look like in a tree.

149

00:10:30,450  -->  00:10:34,820
So we go around check which ones are filled options aren't filled.

150

00:10:35,010  -->  00:10:42,210
So here at 29 we can see that 19 is less than 29 so it would be inserted into the left subtree.

151

00:10:42,810  -->  00:10:48,260
Once the tree is constructed the next task is to implement the retrieval of a value for a given key

152

00:10:48,270  -->  00:10:49,050
.

153

00:10:49,110  -->  00:10:54,410
The get method is even easier than the method because it simply searches the tree recursively until

154

00:10:54,410  -->  00:10:59,700
it gets to a non-matching leafnode or finds a matching key when a matching key is found.

155

00:10:59,850  -->  00:11:06,890
The value stored in the payload of the node is returned so the code for that gets and then also has

156

00:11:06,890  -->  00:11:10,730
its own underscore get helper function.

157

00:11:11,250  -->  00:11:13,790
The search code for the underscore get method.

158

00:11:13,830  -->  00:11:19,580
The second one uses the same logic for choosing the left or right child as that underscore put that

159

00:11:19,620  -->  00:11:21,770
help or put method use.

160

00:11:21,810  -->  00:11:29,220
Notice that that underscore get method returns a tree node to the original first get method.

161

00:11:29,220  -->  00:11:33,200
And this allows the underscore get to be used as that flexible helper method.

162

00:11:33,300  -->  00:11:38,600
For other binary search tree methods that may need some make use of other data from the tree node besides

163

00:11:38,600  -->  00:11:43,840
just the payload and by implementing this special method underscore underscore.

164

00:11:44,010  -->  00:11:49,410
Item underscore underscore we can write a python statement that looks just like accessing a dictionary

165

00:11:49,400  -->  00:11:49,530
.

166

00:11:49,640  -->  00:11:54,680
So that basically allows us to use the bracket notation that you use in a dictionary when you call a

167

00:11:54,680  -->  00:11:55,920
key from a dictionary.

168

00:11:56,040  -->  00:11:59,160
So that's why this is here.

169

00:11:59,730  -->  00:12:05,030
Using gets we can implement an operation by writing that underscore underscore contains underscore the

170

00:12:05,040  -->  00:12:08,120
underscore method for the binary search tree.

171

00:12:08,120  -->  00:12:14,700
Again this is a special method and the contains method will simply call get in return true if it gets

172

00:12:15,090  -->  00:12:18,180
a return value or false if it returns None.

173

00:12:18,380  -->  00:12:22,780
So we'll have a couple of special methods throughout the binary search tree.

174

00:12:22,880  -->  00:12:27,530
You can go ahead and check them out if you want more details from the Python documentation.

175

00:12:27,920  -->  00:12:34,290
But you can essentially just read the code and assume that they're allowing us to use builtin methods

176

00:12:34,350  -->  00:12:41,850
or syntax with Python for our specially created binary search string class.

177

00:12:41,850  -->  00:12:45,930
So finally we're going to turn our attention to the most challenging method in the binary search tree

178

00:12:46,080  -->  00:12:49,830
and that's the deleting of a key and the removal of a key.

179

00:12:49,830  -->  00:12:53,820
This was what we're going to be discussing in part two of this lecture.

180

00:12:53,820  -->  00:12:58,600
But just to give you an idea of what we're going to do that first task for the leading a node is to

181

00:12:58,600  -->  00:13:03,180
find the note to delete by searching the tree and then if the tree has more than one node we're have

182

00:13:03,180  -->  00:13:08,170
to use the underscore get method to find the tree no that needs to be removed.

183

00:13:08,630  -->  00:13:14,460
So in the next part of this two part lecture we're going to be talking about deleting nodes and removing

184

00:13:14,460  -->  00:13:15,330
nodes.

185

00:13:15,790  -->  00:13:20,760
OK go ahead and Ribby the Jupiter notebook and the slides so we've gone over so far.

186

00:13:20,850  -->  00:13:27,240
So far we've gone over just get em put and also just building out our basic binary search tree and using

187

00:13:27,240  -->  00:13:29,790
that tree node class representation.

188

00:13:30,240  -->  00:13:32,130
OK thanks everyone.

189

00:13:32,120  -->  00:13:36,330
I'll see you at the second part of the lecture where we're going to go into deleting nodes from a binary

190

00:13:36,330  -->  00:13:38,280
search tree in a more detail.

191

00:13:38,280  -->  00:13:40,380
As far as what you should have gotten out from this lecture.

192

00:13:40,560  -->  00:13:47,700
Definitely that BSD property where keys to have a value less than the parent node go to the left and

193

00:13:47,700  -->  00:13:49,840
keys that have a value greater than that parent node.

194

00:13:49,840  -->  00:13:50,700
Go to the right.

195

00:13:50,730  -->  00:13:53,870
That's really the key to remember binary search trees.

196

00:13:53,940  -->  00:13:55,470
All right thanks everyone.

197

00:13:55,470  -->  00:13:56,500
I'll see you at the next lecture.
