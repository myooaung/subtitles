WEBVTT
1

00:00:01.680  -->  00:00:07.950
Hello everyone and welcome solution for the singly linked list cycle check problem and this problem

2

00:00:07.980  -->  00:00:12.270
you were given a singly linked list and you had to write a function which takes in the first node and

3

00:00:12.270  -->  00:00:17.490
the singly linked list and then returns a boolean in the Kidding of the list at the linked list contains

4

00:00:17.490  -->  00:00:21.260
what's known as a cycle and that cycle is one of nodes.

5

00:00:21.280  -->  00:00:25.320
Next point actually points back to previous node in the list.

6

00:00:25.320  -->  00:00:29.340
This is also sometimes known as a circularly linked list.

7

00:00:29.340  -->  00:00:32.370
You were given this linked list class Node.

8

00:00:32.940  -->  00:00:33.200
OK.

9

00:00:33.210  -->  00:00:37.020
So here we have our solution and the code to go along with it.

10

00:00:37.080  -->  00:00:43.200
Let me go ahead and read through just the basic explanation before we start coding it out in order to

11

00:00:43.200  -->  00:00:48.940
solve this problem we're going to do is have two markers traversing through the list marker one in marker

12

00:00:48.960  -->  00:00:49.510
two.

13

00:00:49.680  -->  00:00:52.050
Those are going to be the variable names.

14

00:00:52.050  -->  00:00:57.210
Then we will have both markers begin at the first note of the list and traverse through the linked list

15

00:00:57.230  -->  00:00:57.510
.

16

00:00:57.780  -->  00:01:04.590
However the second marker marker 2 will move two nodes ahead of every one note that marker moves marker

17

00:01:04.590  -->  00:01:10.290
one moves by this logic we can imagine the markers are racing through the linked list with marker 2

18

00:01:10.560  -->  00:01:14.150
moving slightly faster for different step size.

19

00:01:14.310  -->  00:01:20.010
If the linked list has a cycle and is circularly connected we will have in the analogy of almost like

20

00:01:20.100  -->  00:01:24.720
two runners on a track in the field with marker to being the faster runner.

21

00:01:24.770  -->  00:01:29.400
And in this case the marker too will eventually be lapping the marker one and they will equal each other

22

00:01:30.090  -->  00:01:36.090
if the linked list has no cycle than a marker to be able to continue on until the very end never equaling

23

00:01:36.090  -->  00:01:37.950
the first marker.

24

00:01:37.950  -->  00:01:41.940
So explain that basic logic one more time for you.

25

00:01:42.720  -->  00:01:48.720
You can essentially imagine having two tracks one is a straight single line track and the other one

26

00:01:48.900  -->  00:01:50.790
is a circular track.

27

00:01:50.790  -->  00:01:57.000
If he had two runners on the track one very fast and one a little slower than if the track was just

28

00:01:57.000  -->  00:01:58.580
a single straight line.

29

00:01:58.620  -->  00:02:01.470
In this case it was just a list with no cycle.

30

00:02:01.620  -->  00:02:03.630
Then the runners would never actually meet up.

31

00:02:03.630  -->  00:02:08.050
The faster runner would just go ahead of the slower one and they would never actually meet up.

32

00:02:08.310  -->  00:02:14.660
But if you have a cycle or in this case a circular track then eventually that faster runner.

33

00:02:14.700  -->  00:02:22.050
In our case marker 2 is going to go along that track that linked list for cycling it and you'll eventually

34

00:02:22.050  -->  00:02:26.960
pass or lap marker 1 and they're going to eventually meets.

35

00:02:27.030  -->  00:02:30.180
And in this case equal their values to each other.

36

00:02:30.180  -->  00:02:31.870
So that's the main logic here.

37

00:02:31.890  -->  00:02:36.800
So let's go ahead and implement this so we can get a better idea of what's going on.

38

00:02:36.870  -->  00:02:38.680
Jumping to a code note book.

39

00:02:39.060  -->  00:02:50.910
Let's begin by saying DPF will say cycle underscore check and taken that node will begin both markers

40

00:02:50.910  -->  00:02:59.200
at the first node will say marker 1 equals node marker 2 equals node.

41

00:02:59.790  -->  00:03:01.890
And then we're going to go until the end of the list.

42

00:03:01.890  -->  00:03:12.000
We're going to say a while marker 2 does not equal none meaning we haven't reached that tail end marker

43

00:03:12.000  -->  00:03:25.020
to that next node does not equal none meaning marker 2 isn't just about to finish.

44

00:03:25.020  -->  00:03:34.050
Now we're going to take a note we're going to say marker 1 is equal to marker 1 next node and marker

45

00:03:34.140  -->  00:03:42.140
2 is going to be equal to marker to the next node dot next node.

46

00:03:42.150  -->  00:03:46.940
That's essentially how we're going to make marker to go a little faster.

47

00:03:46.950  -->  00:03:53.340
MARGARET Isn't a check one node ahead of marker one that we want to check if those markers have actually

48

00:03:53.340  -->  00:03:54.290
matched so.

49

00:03:54.900  -->  00:04:03.930
Marker 2 is equal to marker 1 we return true.

50

00:04:03.960  -->  00:04:08.880
And there might be a case where the marker head reaches the end the list means there's no cycle there

51

00:04:09.300  -->  00:04:09.690
then.

52

00:04:09.780  -->  00:04:13.870
In that case we just return false.

53

00:04:14.460  -->  00:04:15.860
So let's break this down one more time.

54

00:04:15.860  -->  00:04:17.550
We have two markers.

55

00:04:17.550  -->  00:04:25.140
They start off at just the node and then we clarify until market 2 doesn't equal none.

56

00:04:25.170  -->  00:04:27.120
Or its next node is not equal to.

57

00:04:27.150  -->  00:04:29.820
Sorry about that none.

58

00:04:29.910  -->  00:04:36.850
Then what's going to happen is we'll check marker 1's next node in marker twos two nodes ahead.

59

00:04:37.260  -->  00:04:42.750
Meaning this one is essentially that faster runner on that lap than if Margaret 2 is equal to marker

60

00:04:42.750  -->  00:04:44.820
1 we just return true.

61

00:04:44.820  -->  00:04:49.960
Otherwise they never met up marker to never quote unquote lapped marker 1.

62

00:04:49.980  -->  00:04:52.290
So then we just return false.

63

00:04:52.400  -->  00:04:55.200
You can go ahead and run that.

64

00:04:55.200  -->  00:04:56.740
So let's go ahead and test this.

65

00:04:56.790  -->  00:05:04.560
Zoom out a bit and we'll put in our node class and then we're going to go ahead and copy and paste the

66

00:05:04.560  -->  00:05:12.730
test cell from the notebook and there's a test cell.

67

00:05:12.750  -->  00:05:17.840
So we basically just check against the cycle in a linked list that does not have a cycle.

68

00:05:17.990  -->  00:05:21.370
And if we run this we get all test cases pass.

69

00:05:21.450  -->  00:05:22.200
All right.

70

00:05:22.200  -->  00:05:23.400
That's all there is.

71

00:05:23.400  -->  00:05:29.250
This is a bit of a trick but it's a really good way of thinking about this problem and hopefully hopefully

72

00:05:29.250  -->  00:05:34.710
that analogy of two runners running around that track or running down a straight line of one of them

73

00:05:34.710  -->  00:05:41.100
being basically in essence a node faster here and seeing if they meet up is a good way of thinking about

74

00:05:41.100  -->  00:05:43.430
this particular problem.

75

00:05:43.500  -->  00:05:48.160
This is a really common problem in interviews especially interviews testing linked lists knowledge.

76

00:05:48.240  -->  00:05:53.720
So make sure you really know this one and it'll be really great if you can explain this analogy to whoever's

77

00:05:53.730  -->  00:05:55.670
interviewing you.

78

00:05:55.680  -->  00:05:59.090
All right that's it for this lecture and the solution.

79

00:05:59.160  -->  00:06:00.570
I will see you at the next one.

80

00:06:00.570  -->  00:06:01.610
Thanks everyone.
