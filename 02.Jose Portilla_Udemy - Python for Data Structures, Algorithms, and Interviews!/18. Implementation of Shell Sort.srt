1

00:00:01,320  -->  00:00:06,480
Hello everyone and welcome to the implementation of the shell sort's lecture.

2

00:00:06,480  -->  00:00:12,960
So just as we review the shell sort improves on the insertion sort by breaking that original list into

3

00:00:12,960  -->  00:00:18,850
a number of smaller sublists and then each of those sublists is using an insertion sort.

4

00:00:18,870  -->  00:00:24,090
So the unique way that these sublists are chosen is the key to the shell sort is sort of breaking up

5

00:00:24,090  -->  00:00:26,880
that list into sub lists of continuous items.

6

00:00:27,060  -->  00:00:32,370
But the shell sort is going to do is use in increments I which is sometimes called the gap to create

7

00:00:32,370  -->  00:00:37,730
a sublist by choosing all the items or items that are eye items apart.

8

00:00:38,310  -->  00:00:44,430
OK so we've seen those figures that show that idea in the previous lecture in go to review them or you

9

00:00:44,430  -->  00:00:48,430
can go ahead and check out the resource for review here in the Jupiter note book.

10

00:00:48,540  -->  00:00:53,220
But we're going to do is go ahead and implement our shell sort and we're going to use two functions

11

00:00:53,220  -->  00:00:53,970
here.

12

00:00:53,970  -->  00:00:58,200
We're going to have her main show sort function and then we're going to create another function to do

13

00:00:58,200  -->  00:01:00,450
that gap insertion.

14

00:01:00,630  -->  00:01:03,070
So that will be this function here.

15

00:01:03,360  -->  00:01:09,190
So let's go ahead and get started with our basic shell sort.

16

00:01:09,450  -->  00:01:17,160
So I jumped over to a new tab here in the Jupiter notebook and I'm going to say let's say shell underscore

17

00:01:18,210  -->  00:01:21,980
sort's and passen some array.

18

00:01:22,910  -->  00:01:24,290
OK.

19

00:01:24,840  -->  00:01:34,980
First thing I'm going to do is go ahead and say sublist counts as equal to length of array divided by

20

00:01:34,980  -->  00:01:45,900
two and then all we're going to do is say well we still have sublists so well sublist counts is greater

21

00:01:45,900  -->  00:01:58,230
than 0 4 and I'll say for starts in range all the way up to the sublist counts.

22

00:01:58,230  -->  00:02:05,910
This is weren't going to do that gap insertions are going to say Gap underscore insertion underscores

23

00:02:05,910  -->  00:02:06,840
sort.

24

00:02:07,110  -->  00:02:10,770
And that's going to take three arguments and this is a new function we're going to develop in just a

25

00:02:10,770  -->  00:02:11,490
bit.

26

00:02:11,510  -->  00:02:13,160
It's going to take in that array.

27

00:02:13,470  -->  00:02:19,140
It's going to take in a starts and then it's going to take that sublease counts and then once we've

28

00:02:19,140  -->  00:02:26,280
done that after you do that for Luper we're going to just go ahead and do is say sublease count is equal

29

00:02:26,280  -->  00:02:29,900
to sublease counts divided by two.

30

00:02:30,340  -->  00:02:35,140
OK so now let's go ahead and focus on this gap insertion sorts.

31

00:02:35,190  -->  00:02:45,480
So we're going to say the if gap underscore insertion underscores sorts and again it's going to take

32

00:02:45,480  -->  00:02:48,100
in an array that starts.

33

00:02:48,150  -->  00:02:52,920
But instead of saying sublease counts what we're going to do is go ahead and treat the says is that

34

00:02:52,920  -->  00:02:54,530
gap that we discussed earlier.

35

00:02:54,570  -->  00:02:58,140
I'm going to say for I in range.

36

00:02:58,410  -->  00:03:06,660
And in this case we're going to have our starting be our start points plus that gap all the way to the

37

00:03:06,660  -->  00:03:08,240
length of the array.

38

00:03:08,380  -->  00:03:17,820
Now we're going to go in steps of the gap OK and then let's go ahead and make a variable called current

39

00:03:17,820  -->  00:03:18,300
value

40

00:03:21,360  -->  00:03:28,620
and set it equal to whatever that value is at this index of the array.

41

00:03:28,650  -->  00:03:30,630
And then let's go ahead and say position

42

00:03:33,180  -->  00:03:34,580
equals.

43

00:03:34,860  -->  00:03:38,420
So we're basically doing the same thing as we then and a few other algorithms at a current value in

44

00:03:38,420  -->  00:03:46,350
a current position and then using that gap we're going to do is say while position is greater than or

45

00:03:46,380  -->  00:04:03,390
equal to gap and the array value at the position minus the gap is greater than that current value.

46

00:04:03,660  -->  00:04:12,450
Here's where we're going to do sexually that exchanging we're going to see position or that shifting

47

00:04:13,950  -->  00:04:22,980
position minus gap and then say position then equals position minus gap.

48

00:04:22,980  -->  00:04:28,630
So we're switching both those values and those index positions themselves.

49

00:04:28,920  -->  00:04:30,140
So we're using the gap there.

50

00:04:30,140  -->  00:04:34,350
And then at the end all we have to do is after this while loop just go ahead and set that current values

51

00:04:34,350  -->  00:04:42,690
to just say there re at that position it's just equal to the current value.

52

00:04:42,690  -->  00:04:46,740
All right so we've there are two functions before you go ahead and break them down more let's just make

53

00:04:46,740  -->  00:04:48,210
sure that they work out.

54

00:04:48,300  -->  00:04:53,880
So going to go ahead and copy from the other notebook this test array and this test call.

55

00:04:53,880  -->  00:04:57,110
Run them and it looks like in fact we're good.

56

00:04:57,150  -->  00:04:59,560
It actually did sort.

57

00:04:59,570  -->  00:05:05,300
So let's go ahead and zoom out and then see if we can break down what's going on here.

58

00:05:05,310  -->  00:05:12,360
So first thing you want to notice is how we're actually choosing the increments or those gaps those

59

00:05:12,360  -->  00:05:14,060
sublists here.

60

00:05:14,070  -->  00:05:20,670
So in this particular method or implementation all we're doing here is we're beginning with and over

61

00:05:20,670  -->  00:05:28,320
two sublists So this array has elements that are first sublist is going to be and divided by two.

62

00:05:28,590  -->  00:05:34,650
And then on the next pass we end up having is and divided by four right because we're dividing that

63

00:05:34,650  -->  00:05:36,110
thing again by two.

64

00:05:36,450  -->  00:05:38,940
So what halftimes 1 1/2 is 1 to 4.

65

00:05:39,240  -->  00:05:43,050
And then we're taking that length's the array which is going to be an item to the array and then the

66

00:05:43,050  -->  00:05:44,760
writing by four.

67

00:05:44,760  -->  00:05:47,330
So on the first pass you start with over two sublist.

68

00:05:47,330  -->  00:05:47,990
Next pass.

69

00:05:48,030  -->  00:05:51,480
And a before and eventually a single list is sorted.

70

00:05:51,540  -->  00:05:53,740
Just that basic insertion sort.

71

00:05:54,270  -->  00:06:00,900
So what you can do if you want to visualize this a little more is actually create a print statements

72

00:06:01,620  -->  00:06:07,740
so you can go ahead and put a print statements after this for a loop and you can go ahead and say Prince

73

00:06:09,540  -->  00:06:23,090
this case let's say after increments of size and then let's go ahead and just say sublist counts here

74

00:06:24,840  -->  00:06:27,720
and then we'll print another 9 line here.

75

00:06:27,900  -->  00:06:37,110
The list is and then what we're going to do is just put that array value there.

76

00:06:37,110  -->  00:06:38,820
So let's make sure that worked out

77

00:06:41,790  -->  00:06:42,330
OK.

78

00:06:42,330  -->  00:06:47,880
So here we have our increments so let's just go in and check the length of that array so we can get

79

00:06:47,880  -->  00:06:49,320
an idea of what's going on here.

80

00:06:49,590  -->  00:06:50,570
So we have 11.

81

00:06:50,610  -->  00:06:55,410
So close is 11 divided by two rounds off to five.

82

00:06:55,410  -->  00:07:02,290
So after the increment size 5 we essentially have this list increment size to have this list Ingrid's

83

00:07:02,310  -->  00:07:05,040
size one we end up getting this list.

84

00:07:05,040  -->  00:07:11,680
So you can go ahead and review the previous lecture on the actual Celso shell sort's excuse me and how

85

00:07:11,700  -->  00:07:17,490
we had those sublists and the insertions and then those final insertion sorts when we had the increments

86

00:07:17,490  -->  00:07:19,650
of 1 go ahead and check them out.

87

00:07:19,650  -->  00:07:21,310
Those figures are really helpful.

88

00:07:21,600  -->  00:07:25,980
But essentially Remember that with the shell sort we're just improving on that insertion sort.

89

00:07:25,970  -->  00:07:31,470
By breaking the original list into a number of smaller sublists each of which are then sorted using

90

00:07:31,470  -->  00:07:32,730
an insertion sort.

91

00:07:33,030  -->  00:07:38,500
And the key to this is that unique way that these sublists are chosen in the shell sort.

92

00:07:38,550  -->  00:07:43,620
So instead of breaking that list into a bunch of sublists continuous items the shell sort uses that

93

00:07:43,680  -->  00:07:44,460
increments.

94

00:07:44,460  -->  00:07:51,660
I sometimes call that gap and that creates a sublist by choosing all the items that are eye items apart

95

00:07:51,660  -->  00:07:52,830
.

96

00:07:52,830  -->  00:07:53,540
OK.

97

00:07:53,810  -->  00:07:54,830
So go ahead.

98

00:07:55,230  -->  00:07:56,660
Write this up yourself.

99

00:07:56,760  -->  00:07:58,560
Make sure you understand it.

100

00:07:58,560  -->  00:08:04,380
I really suggest using print functions to help you keep track of what's going on throughout the functions

101

00:08:04,380  -->  00:08:05,300
and your function calls.

102

00:08:05,310  -->  00:08:06,520
That's super helpful.

103

00:08:06,660  -->  00:08:12,690
So if you're ever not understanding one or two lines of code try putting a print statement there and

104

00:08:12,690  -->  00:08:14,100
seeing what's actually happening.

105

00:08:14,220  -->  00:08:18,930
Go ahead and print out different variables so you can get an idea of what's actually being sorted where

106

00:08:18,930  -->  00:08:21,590
you sublists where your gaps etc..

107

00:08:21,680  -->  00:08:22,460
OK.

108

00:08:22,800  -->  00:08:25,910
But that being said that's the implementation of the shell sort.

109

00:08:26,130  -->  00:08:27,960
And I will see the next lecture.

110

00:08:27,960  -->  00:08:28,200
Thanks
