WEBVTT
1

00:00:01.470  -->  00:00:06.900
Hello everyone and welcome to the lecture on an introduction to algorithm analysis and BINGO.

2

00:00:07.920  -->  00:00:12.480
This lecture we're going to start off with a couple of slides explaining what this lecture and what

3

00:00:12.480  -->  00:00:13.690
this section is about.

4

00:00:13.920  -->  00:00:15.680
And then we'll jump into some life code.

5

00:00:15.870  -->  00:00:19.350
Let's go ahead and get started.

6

00:00:19.350  -->  00:00:25.220
So first off we need to ask ourselves Why analyze algorithms before we do that.

7

00:00:25.260  -->  00:00:27.680
We need to clarify what an algorithm is.

8

00:00:28.020  -->  00:00:33.590
So in this coarsen in general an algorithm is simply a procedure or formula for solving a problem.

9

00:00:33.660  -->  00:00:37.890
So I don't want you to be intimidated by this word algorithm especially in an interview setting.

10

00:00:37.890  -->  00:00:42.420
When someone asks you to come up with an algorithm it's just a procedure or formula for solving the

11

00:00:42.420  -->  00:00:43.870
problem at hand.

12

00:00:44.490  -->  00:00:49.740
Now some problems are famous enough that the algorithms have names as well some procedures mean common

13

00:00:49.740  -->  00:00:55.020
enough such as certain types of sorting where the algorithm associate with it has a name such as immerged

14

00:00:55.020  -->  00:00:56.170
sore or bubble sort.

15

00:00:56.200  -->  00:00:59.820
Etc. and we'll be covering those later on in this course.

16

00:00:59.820  -->  00:01:05.100
But now that we know what an algorithm is we have a good question we need to answer how do we analyze

17

00:01:05.160  -->  00:01:10.380
algorithms and how we can we compare algorithms against each other.

18

00:01:10.410  -->  00:01:16.620
So what I want to do is imagine if you and a friend both came up with two separate functions to sum

19

00:01:16.620  -->  00:01:23.200
the numbers from 0 to end how would you compare the functions and algorithms within the functions.

20

00:01:23.220  -->  00:01:24.830
How would you know which one was better.

21

00:01:24.840  -->  00:01:27.250
How would you even define what better is.

22

00:01:27.710  -->  00:01:33.000
So this chumped to some live code examples to explore this further.

23

00:01:33.070  -->  00:01:38.160
OK we're here at the Jupiter notebook and notice I have the corresponding Jupiter notebook available

24

00:01:38.160  -->  00:01:40.590
here for you in the Jupiter and the viewer.

25

00:01:40.800  -->  00:01:43.110
And this is the example we're going to go through.

26

00:01:43.440  -->  00:01:49.440
Let's go ahead and jump into a live notebook so we can code and I'll just zoom in real quickly so you

27

00:01:49.440  -->  00:01:50.570
can have a better view.

28

00:01:50.880  -->  00:01:51.450
OK.

29

00:01:51.720  -->  00:01:57.090
So let's start off let's say your function looked something like this.

30

00:01:57.090  -->  00:02:00.640
We'll call it someone it takes in an argument.

31

00:02:01.060  -->  00:02:06.810
And we're going to take an input of and return to some of the numbers from 0 to end and you decide to

32

00:02:06.840  -->  00:02:09.140
make an algorithm that looks like this.

33

00:02:09.270  -->  00:02:14.250
You set a variable called final sum instead of equal as zero to start.

34

00:02:14.910  -->  00:02:33.450
Then you say for x in an let's say range and plus 1 you say Final some plus or equal to x and then we

35

00:02:33.450  -->  00:02:36.690
return the final sum.

36

00:02:36.700  -->  00:02:42.840
Now we can also use x range for Python 2 to make that into a generator.

37

00:02:43.080  -->  00:02:44.570
But that's not really the point here.

38

00:02:44.610  -->  00:02:47.100
So feel free to use either.

39

00:02:47.220  -->  00:02:51.540
So you have this let's go ahead and test it out.

40

00:02:52.000  -->  00:02:54.450
Someone of 10 you get 55 up.

41

00:02:54.450  -->  00:02:59.750
So that's 0 plus one plus two three plus four etc. all the way to 10.

42

00:02:59.790  -->  00:03:02.370
So that's your algorithm and your function.

43

00:03:02.640  -->  00:03:10.650
Let's say your friend came up with this we'll call it some to the function and it does the same thing

44

00:03:10.650  -->  00:03:16.860
it takes an input event and returns of some of the numbers from 0 to N but your friend figured this

45

00:03:16.860  -->  00:03:17.570
out.

46

00:03:18.180  -->  00:03:26.250
And times and plus 1 divided by two.

47

00:03:26.530  -->  00:03:28.540
Let's check if this works.

48

00:03:28.830  -->  00:03:33.530
We call the function on 10 and then we get the exact same thing.

49

00:03:34.080  -->  00:03:38.700
So both functions have the same result but completely different algorithms.

50

00:03:38.730  -->  00:03:41.970
You'll note that the first function just literally adds the numbers.

51

00:03:42.180  -->  00:03:47.580
So it's really you're just adding these numbers to your final sum while the second function makes use

52

00:03:47.580  -->  00:03:52.880
of this algorithm and I'm going to jump back to you put another book have it written out here.

53

00:03:52.950  -->  00:04:00.820
So the sum of I equals zero to N is equal to end times and plus 1 divided by 2.

54

00:04:01.410  -->  00:04:07.920
So we want to do is a check to really compare the algorithms so we could compare the amount of space

55

00:04:07.920  -->  00:04:13.780
they take in memory and we can also compare how much time it takes each function to run.

56

00:04:13.800  -->  00:04:18.060
So before we start talking about Big O notation let's just get a general idea of what we're actually

57

00:04:18.060  -->  00:04:19.260
talking about here.

58

00:04:19.530  -->  00:04:20.150
Let's go ahead.

59

00:04:20.190  -->  00:04:25.680
Go ahead and compare how much time it takes these guys to run these two separate functions.

60

00:04:25.680  -->  00:04:28.470
And we're going to do is use some built in magic commands.

61

00:04:28.470  -->  00:04:39.200
In the Jupiter notebook song we use the time it magic command and I will say the first function some

62

00:04:39.230  -->  00:04:40.530
100.

63

00:04:41.520  -->  00:04:45.630
So it looks like it takes about 3.6 to microseconds per loop.

64

00:04:45.630  -->  00:04:53.930
Now check out the other algorithm through time it some to 100.

65

00:04:53.940  -->  00:04:55.810
Right now it's performing the loops.

66

00:04:56.640  -->  00:04:59.120
And let's see.

67

00:05:00.630  -->  00:05:02.580
So don't worry about this right now.

68

00:05:02.580  -->  00:05:05.050
This just means that a result might be being cached.

69

00:05:05.070  -->  00:05:10.410
But what you really want to focus on is that it's taking on the order of nanoseconds per loop so you

70

00:05:10.410  -->  00:05:13.770
can see that the second function is actually much more efficient.

71

00:05:14.040  -->  00:05:20.670
So running at a much faster rate than the first means that the second function or the second algorithm

72

00:05:20.670  -->  00:05:24.920
that the function use some to is a lot more efficient.

73

00:05:24.960  -->  00:05:31.350
But the problem is here we can't just use time to run as an objective measurement because that will

74

00:05:31.350  -->  00:05:35.040
depend on the speed of the computer itself and hardware capabilities.

75

00:05:35.040  -->  00:05:41.250
So we want to use an objective method to compare how much time it takes these guys to run both of these

76

00:05:41.250  -->  00:05:42.340
functions.

77

00:05:42.960  -->  00:05:46.550
But we wanted to be hardware independent so we can't use time.

78

00:05:46.770  -->  00:05:49.690
And that's where Big O notation is going to come in.

79

00:05:49.710  -->  00:05:56.040
So we're going to be able to use this idea of Big O notation to compare algorithms objectively both

80

00:05:56.130  -->  00:06:01.030
in how much time they take to run and how much space they take up in memory.

81

00:06:01.050  -->  00:06:01.620
All right.

82

00:06:01.980  -->  00:06:06.750
So what we discussed in this lecture just to go over it again I'm going to hop over to Jupiter notebook

83

00:06:07.000  -->  00:06:15.180
is just a general idea of why analyze algorithms how to analyze algorithms and start getting a notion

84

00:06:15.240  -->  00:06:18.990
of you're going to have to do this objectively in hardware in the pendant.

85

00:06:19.020  -->  00:06:20.770
So you can't use just time to run.

86

00:06:20.910  -->  00:06:23.160
We'll have these big O notation.

87

00:06:23.160  -->  00:06:23.770
All right.

88

00:06:23.940  -->  00:06:29.190
That's it for this quick introduction in the next lecture we'll dive in more into what Big O notation

89

00:06:29.220  -->  00:06:30.300
actually is.

90

00:06:30.570  -->  00:06:31.090
All right.

91

00:06:31.200  -->  00:06:32.410
Thank you and I'll see you there
