WEBVTT
1

00:00:00.870  -->  00:00:06.120
Hello and welcome to the solution for the fourth on site interview question for the large search engine

2

00:00:06.120  -->  00:00:08.560
company mock interview.

3

00:00:08.580  -->  00:00:15.510
So just to reiterate what the question was we needed to find the square root of a given number rounded

4

00:00:15.510  -->  00:00:20.570
down to the nearest integer without using any built in square root functions in Python.

5

00:00:20.580  -->  00:00:23.460
That's a security from the math library.

6

00:00:23.460  -->  00:00:30.570
So for example if you're given any number between 9 and 15 your function should return 3 and the number

7

00:00:30.570  -->  00:00:35.030
between 16:24 your function should return for All right.

8

00:00:35.130  -->  00:00:37.460
So how to actually go about solving this.

9

00:00:37.470  -->  00:00:43.560
Well we know a little fact and that fact is this line right here.

10

00:00:43.560  -->  00:00:50.410
The square root of a non-negative number n always lies between 0 and end divided by two.

11

00:00:50.880  -->  00:00:55.740
And so that becomes a fact that we can use so that the straightforward way to solve this problem is

12

00:00:55.740  -->  00:01:02.040
just check every number let's say k that comes between 0 and end divided by 2 until the square of K

13

00:01:02.040  -->  00:01:05.920
becomes greater than or equal to N if case squared it becomes equal to.

14

00:01:05.940  -->  00:01:08.070
And then we just return k.

15

00:01:08.070  -->  00:01:11.640
Otherwise we return came minus one because we're rounding down.

16

00:01:11.640  -->  00:01:17.740
So let's go ahead and implement that in a function and explain the logic that's going on.

17

00:01:18.870  -->  00:01:20.460
So going to make a function called solution

18

00:01:23.480  -->  00:01:29.400
and I'm going to say if numb is less than zero then we have issues with trying to take the square of

19

00:01:29.400  -->  00:01:30.590
a negative number.

20

00:01:30.600  -->  00:01:32.550
We're not worried about imaginary numbers in this case.

21

00:01:32.550  -->  00:01:35.690
I'm just going to say value error.

22

00:01:36.000  -->  00:01:38.490
So return some sort of exception there.

23

00:01:38.700  -->  00:01:41.650
After that I'm going to check if my number is 1.

24

00:01:41.700  -->  00:01:47.280
In that case I know just to return one square root of 1 is 1 and this is where we start our algorithm

25

00:01:47.280  -->  00:01:47.470
.

26

00:01:47.490  -->  00:01:54.630
So I get to say for k in range and I'm going to go from zero to none.

27

00:01:54.630  -->  00:01:56.040
Divided by two.

28

00:01:56.040  -->  00:02:05.500
Since indexing starts at zero I'm going to say numb divided by two plus one to do this in python.

29

00:02:05.730  -->  00:02:14.410
And then you say if K squared is equal to Nome return k.

30

00:02:16.140  -->  00:02:29.980
And then I can say LCF case where is greater than num then return K minus 1 and then return k.

31

00:02:31.280  -->  00:02:34.490
OK so that was actually pretty straightforward.

32

00:02:34.500  -->  00:02:41.430
We're just going through and checking every number k between 0 and divided by two squaring that k value

33

00:02:41.580  -->  00:02:43.750
until it becomes greater than or equal to that.

34

00:02:43.770  -->  00:02:45.090
And we're checking.

35

00:02:45.330  -->  00:02:48.900
And then if K squared becomes equal to and then we just return k.

36

00:02:49.140  -->  00:02:51.020
Otherwise her rounding down.

37

00:02:51.060  -->  00:02:54.720
We're going to return K minus 1.

38

00:02:54.750  -->  00:02:55.490
All right.

39

00:02:56.130  -->  00:02:57.800
So we can go ahead and check that out.

40

00:02:57.930  -->  00:03:04.060
Solution put in a number let's say 14 and we get three.

41

00:03:04.470  -->  00:03:09.290
And that makes sense if we keep going to 15 we should still get three.

42

00:03:09.330  -->  00:03:15.180
And then finally at 16 we should break that barrier and go to 4 6 4 times for the 16.

43

00:03:15.210  -->  00:03:22.920
The complexity of this approach is o n so because we have to check and divide it by two numbers in the

44

00:03:22.920  -->  00:03:24.440
worst case.

45

00:03:24.480  -->  00:03:29.820
So this linear algorithm is actually pretty inefficient and we can use some sort of binary search to

46

00:03:29.820  -->  00:03:31.010
speed it up.

47

00:03:31.020  -->  00:03:35.280
So remember we this binary search and other interview problems so it's going to come up here as well

48

00:03:36.000  -->  00:03:39.580
since we know that the result is between 0 and end divided by two.

49

00:03:39.930  -->  00:03:45.090
We can first try and divide it by four to see whether its square is less than greater than or equal

50

00:03:45.090  -->  00:03:45.280
to.

51

00:03:45.320  -->  00:03:49.300
And if it's equal then we simply return that value.

52

00:03:49.500  -->  00:03:55.080
If it's less than we continue our search between and divided by 4 and then divide it by 2.

53

00:03:55.080  -->  00:03:58.820
Otherwise if it's greater than we search between zero in N divided by 4.

54

00:03:58.920  -->  00:04:04.380
So we get this binary search pattern but keep cutting things and have in both cases reduce potential

55

00:04:04.380  -->  00:04:05.270
range by half.

56

00:04:05.490  -->  00:04:07.690
And continuum this is the logic of that search.

57

00:04:07.830  -->  00:04:13.410
So this was unfamiliar from the eggdrop problem here where we're not performing regular binary search

58

00:04:13.410  -->  00:04:14.970
that's going to be a little modified.

59

00:04:15.030  -->  00:04:21.000
We want to ensure that we actually stop at a number k where K Square is less or equal to N the K plus

60

00:04:21.030  -->  00:04:23.370
one square is greater than 10.

61

00:04:23.400  -->  00:04:28.860
So let's go ahead and implement this more efficient solution.

62

00:04:29.550  -->  00:04:33.510
So we'll call this better solution.

63

00:04:33.900  -->  00:04:35.730
Hasson.

64

00:04:36.930  -->  00:04:41.880
And let's go in and zoom in here so we can see here your function.

65

00:04:41.880  -->  00:04:48.540
Again I'm going to start by just checking if it's less than zero and or raise and air you can raise

66

00:04:48.540  -->  00:04:53.640
any exception here just raising a value there and then again if my number is equal to 1 I'm just going

67

00:04:53.640  -->  00:04:55.840
to return 1.

68

00:04:56.080  -->  00:04:58.230
OK so let's implement this better solution.

69

00:04:58.230  -->  00:05:01.240
Kind of a modified binary search here.

70

00:05:01.350  -->  00:05:10.020
I'm going to say I have a variable called Low 0 and I'll set my high equal to that top of the range

71

00:05:10.020  -->  00:05:23.430
we discussed earlier which was divided by two plus one MSA while low plus one is less than high.

72

00:05:23.790  -->  00:05:24.590
Here's what we're going to do.

73

00:05:24.600  -->  00:05:29.910
We're going to take since we're doing a binary search the middle now we're going to say the middle is

74

00:05:29.910  -->  00:05:34.530
equal to low plus high minus low

75

00:05:37.380  -->  00:05:43.410
divided by two.

76

00:05:43.410  -->  00:05:51.000
Then I'm going to say Square is equal to that middle number squared.

77

00:05:51.240  -->  00:05:53.790
And here's where we start doing our checks.

78

00:05:53.790  -->  00:06:08.760
You can check if that square is equal to my number that I'm going to return mid else if my square is

79

00:06:08.760  -->  00:06:13.430
less than them I'm going to say low.

80

00:06:13.920  -->  00:06:17.610
Let's go and scroll down here is equal to that.

81

00:06:17.970  -->  00:06:18.750
And then finally.

82

00:06:18.750  -->  00:06:25.380
Else I can say high is equal to mid.

83

00:06:25.500  -->  00:06:30.330
Then once that's all done I'm just going to return my low number.

84

00:06:30.420  -->  00:06:35.820
So let's go in and test that the better solution sets in on 13.

85

00:06:35.820  -->  00:06:38.100
You notice we're going to get the same results.

86

00:06:38.160  -->  00:06:41.270
Let's try 10:14 boops those 114.

87

00:06:41.430  -->  00:06:43.360
Let's try 114.

88

00:06:44.250  -->  00:06:49.380
And finally let's go up to 16 and we get four.

89

00:06:49.380  -->  00:06:50.060
All right.

90

00:06:50.280  -->  00:06:51.660
Excellent.

91

00:06:51.660  -->  00:07:00.060
So one difference here from a regular binary search is the condition of that while loop it's low plus

92

00:07:00.060  -->  00:07:02.520
one is less than high instead of low.

93

00:07:02.520  -->  00:07:03.270
It's less than high.

94

00:07:03.270  -->  00:07:04.210
So look at this here.

95

00:07:04.230  -->  00:07:06.480
We have low plus one is sort of just low.

96

00:07:06.870  -->  00:07:14.830
We also have low equals mid instead of low equals mid plus one over here and we have high walls mid

97

00:07:14.940  -->  00:07:17.310
instead of height was mid minus 1.

98

00:07:17.310  -->  00:07:21.000
And these are modifications we make to the standard binary search.

99

00:07:21.000  -->  00:07:23.130
The complexity of it though is still the same.

100

00:07:23.140  -->  00:07:24.340
That's logarithmic.

101

00:07:24.360  -->  00:07:30.420
Oh order big-O log in which is actually much better than our naive linear solution just checking them

102

00:07:30.420  -->  00:07:31.280
all.

103

00:07:31.500  -->  00:07:36.120
And there's also a constant time solution which involves a clever math trick I'm going to show you it

104

00:07:36.130  -->  00:07:36.580
.

105

00:07:36.720  -->  00:07:41.140
We hop over to the Jupiter notebook for the solution.

106

00:07:41.640  -->  00:07:47.790
You can take advantage of this trick right here where the square root of N is equal to end to the power

107

00:07:47.790  -->  00:07:55.810
of 1 1/2 0.5 which using log base 2 you can convert into this to the power of one 1/2.

108

00:07:55.980  -->  00:08:01.680
I was like base 2 then and this solution exploits the property that we take the exponent of the log

109

00:08:01.680  -->  00:08:02.480
of a number.

110

00:08:02.550  -->  00:08:03.790
The result doesn't change.

111

00:08:03.790  -->  00:08:05.650
Still the number itself.

112

00:08:05.700  -->  00:08:11.970
So we can first calculate the log of the number multiply with 0.5 take the exponent and finally take

113

00:08:11.970  -->  00:08:15.680
the floor of that value so round that down.

114

00:08:15.690  -->  00:08:20.310
And this way we can to use voidness square root function by using a log function instead.

115

00:08:20.310  -->  00:08:25.470
Now whether or not you'll be allowed to use an interview setting is tricky and they may not actually

116

00:08:25.470  -->  00:08:27.470
expect you to know this math trick.

117

00:08:27.750  -->  00:08:30.870
But it's important to know it in case they ask.

118

00:08:31.230  -->  00:08:35.790
So then the logarithm of a number rounded down to the nearest integer can be calculated in constant

119

00:08:35.790  -->  00:08:40.630
time by looking at the position of the leftmost one in the binary representation of that number.

120

00:08:40.680  -->  00:08:44.190
So it's actually a lot quicker and it's a constant time solution.

121

00:08:44.700  -->  00:08:45.190
All right.

122

00:08:45.360  -->  00:08:50.340
So thing is the solution doesn't always give the same result as above algorithms though because of the

123

00:08:50.340  -->  00:08:56.160
rounding effects and depending on the interviewer's perspective you may either have this approach be

124

00:08:56.160  -->  00:09:02.580
regarded as elegant and clever using this or as tricky just because you're cheating with the log function

125

00:09:02.600  -->  00:09:02.730
.

126

00:09:02.880  -->  00:09:07.140
So you should let your interviewer know that you're capable of the shortcut you're aware of it but they're

127

00:09:07.140  -->  00:09:12.720
probably looking for this implementation here of the better solution that we went over.

128

00:09:13.050  -->  00:09:13.570
All right.

129

00:09:13.770  -->  00:09:15.820
So what should you go over here.

130

00:09:15.840  -->  00:09:17.730
Should definitely go over binary search.

131

00:09:17.730  -->  00:09:21.090
It's important for this question and you've seen it before on the eggdrop problem.

132

00:09:21.100  -->  00:09:25.690
So it's something a lot of interview questions kind of have embedded inside of them.

133

00:09:25.740  -->  00:09:26.130
All right.

134

00:09:26.130  -->  00:09:30.810
That being said make sure I understand this solution and practice both of them understand why one is

135

00:09:30.810  -->  00:09:35.940
a little better than the other and we'll go ahead and continue and see at the next lecture.

136

00:09:35.940  -->  00:09:37.610
All right thanks everyone.
