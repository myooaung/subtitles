1

00:00:01,140  -->  00:00:08,340
Hello everyone and welcome to the lecture on hashing in this lecture will cover hashing hash tables

2

00:00:08,400  -->  00:00:11,920
hash functions something called Collision resolution.

3

00:00:12,240  -->  00:00:18,020
And the next lecture will actually implement our own hash table class using Python.

4

00:00:18,270  -->  00:00:23,370
Something to keep in mind is that there's going to be a lot of topics presented throughout this lecture

5

00:00:23,370  -->  00:00:23,570
.

6

00:00:23,760  -->  00:00:28,530
So make sure you set out enough time to fully understand the topics presented here and take notes on

7

00:00:28,530  -->  00:00:29,880
them.

8

00:00:31,060  -->  00:00:36,420
OK so we've seen how we can improve search by knowing about structures beforehand.

9

00:00:36,720  -->  00:00:43,320
If you remember back to sequential search or binary search we're able to improve our search Big O by

10

00:00:43,320  -->  00:00:49,590
knowing if the array was already sorted we were going to search for objects we can actually build the

11

00:00:49,590  -->  00:00:54,240
data structure that can be searched in constant time order one.

12

00:00:54,600  -->  00:00:59,140
This concept is referred to as Hashi.

13

00:00:59,160  -->  00:01:02,600
All right so what is hashing What's a hash table.

14

00:01:02,600  -->  00:01:08,910
A hash table is a collection of items which are stored in such a way as to make it easier to find them

15

00:01:08,910  -->  00:01:10,010
later.

16

00:01:10,080  -->  00:01:16,590
Each position of the hash table known as slots can hold that item and is named by an integer value starting

17

00:01:16,590  -->  00:01:18,000
at zero.

18

00:01:18,000  -->  00:01:23,830
So for example we will have a slot named Zero the slot names one a slot named two and so on.

19

00:01:24,180  -->  00:01:27,120
Initially the hash table contains no items.

20

00:01:27,120  -->  00:01:30,530
So every slot is empty.

21

00:01:30,930  -->  00:01:36,570
We can implement a hash table by using a list with each element initialized to the special Python value

22

00:01:36,740  -->  00:01:37,370
.

23

00:01:37,890  -->  00:01:45,190
So for example is a figure of an empty hash table with size m equals 11 would look like.

24

00:01:45,210  -->  00:01:54,260
So we have from 0 to 10 essentially indexes of our list and they're all filled with none.

25

00:01:54,300  -->  00:01:59,550
So the mapping between an item and the slot where that item belongs in the hash table is called the

26

00:01:59,550  -->  00:02:00,830
hash function.

27

00:02:00,960  -->  00:02:04,470
And this is the real key to how a hash table works.

28

00:02:04,470  -->  00:02:10,590
The hash function will take any item in the collection and return an integer in the range of slot names

29

00:02:10,920  -->  00:02:13,760
between 0 and minus 1.

30

00:02:13,770  -->  00:02:23,010
So we want to think about is how should we use hash functions to map items to slots one hash function

31

00:02:23,010  -->  00:02:29,370
we can use is known as the remainder method when presented with an item the hash function is the item

32

00:02:29,370  -->  00:02:31,050
divided by the table size.

33

00:02:31,170  -->  00:02:33,140
And this is then a slot number.

34

00:02:33,150  -->  00:02:37,030
Let's go in and see an example of how this works.

35

00:02:37,080  -->  00:02:39,510
So assume that we have a set of integer items.

36

00:02:39,600  -->  00:02:49,560
Let's say 50 for 26:23 17 77 31 we pre-assigned that empty hash table of equals 11.

37

00:02:49,670  -->  00:02:54,020
That was that figure we saw earlier of just essentially empty list.

38

00:02:54,060  -->  00:03:00,720
So what our remainder hash function is then is it's a function that takes in the item and returns the

39

00:03:00,780  -->  00:03:03,460
item divided by 11.

40

00:03:03,480  -->  00:03:04,290
Its remainder.

41

00:03:04,290  -->  00:03:10,710
So that Mada function where that maade percentage sign you can use in Python which just returns the

42

00:03:10,710  -->  00:03:12,240
remainder of a division.

43

00:03:12,350  -->  00:03:15,120
It's good to see the results as a table.

44

00:03:15,900  -->  00:03:21,900
So 54 maade 11 returns 10 26.

45

00:03:22,050  -->  00:03:32,090
Model 7 returns for 93 model Evon returns 5 17 6 7 7 0 and 31 etc. 9.

46

00:03:32,220  -->  00:03:42,060
So we're doing 54 maade 11 to get the hash value meaning 54 divided by 11 is going to be 44 remainder

47

00:03:42,060  -->  00:03:45,100
10.

48

00:03:45,240  -->  00:03:49,290
That means we're now ready to occupy six out of those 11 slots.

49

00:03:49,290  -->  00:03:54,870
And this is referred to as the load factor and it's sometimes denoted by the equation.

50

00:03:54,960  -->  00:03:59,560
The load factors equal to the number of items divided by table size.

51

00:03:59,560  -->  00:04:02,070
And in this example the load factor is 6.

52

00:04:02,070  -->  00:04:07,030
Number of items divided by the table size of 11.

53

00:04:07,620  -->  00:04:08,240
That means.

54

00:04:08,280  -->  00:04:11,840
Hash table and it looks like this after it was loaded with those items.

55

00:04:11,850  -->  00:04:13,860
So again we just use that hash function.

56

00:04:13,920  -->  00:04:20,610
In this case the remainder method to assign slots those number slots to the elements or items we wanted

57

00:04:20,610  -->  00:04:21,710
to put into it.

58

00:04:22,170  -->  00:04:30,030
So for example let's take a look here at 77 77 was the elements that we wanted to put into a specific

59

00:04:30,030  -->  00:04:32,090
slot or hash table.

60

00:04:32,220  -->  00:04:39,080
So 77 divided by 11 is seven with remainder 0 that remainder is a slot that we put it in

61

00:04:42,370  -->  00:04:44,300
what you want to search for an item.

62

00:04:44,520  -->  00:04:49,850
All we have to do is simply use the hash function to compute the slot name for the item and then check

63

00:04:49,850  -->  00:04:52,360
the hash table to see if it's present or not.

64

00:04:52,430  -->  00:04:58,160
That allows the searching operation to be done at Big 0 1 since it costs the amount of time is required

65

00:04:58,400  -->  00:05:03,930
to compute the hash value and then index the hash table at that location.

66

00:05:04,250  -->  00:05:08,640
Then you might be thinking what if you have two items that would result in the same location.

67

00:05:08,840  -->  00:05:11,710
We discussed about 77 model 11 being 0.

68

00:05:11,900  -->  00:05:17,420
But if you had another item such as 44 that would also be the same slot number 0.

69

00:05:17,420  -->  00:05:21,250
This is known as a collision sometimes also known as a clash.

70

00:05:21,260  -->  00:05:25,100
We're actually going to learn how deal them a little later on in the structure where we're going to

71

00:05:25,100  -->  00:05:30,440
do is learn more about hash functions in general first before we talk about collision resolution

72

00:05:33,730  -->  00:05:40,490
now discuss hash functions a little more formally a hash function that maps each item into unique slot

73

00:05:40,970  -->  00:05:44,120
is referred to as a perfect hash function.

74

00:05:44,360  -->  00:05:49,470
That means our goal is to create a hash function that minimizes the number of those collisions.

75

00:05:49,520  -->  00:05:55,140
It's easy to compute and evenly distributed the items in the hash table.

76

00:05:55,220  -->  00:06:00,370
Let's discuss a few techniques to do this.

77

00:06:00,410  -->  00:06:05,900
There's another hash function called the folding method and the full method for constructing hash functions

78

00:06:06,500  -->  00:06:09,740
begins by dividing the item into equal sized pieces.

79

00:06:09,740  -->  00:06:12,800
The last piece may not be of equal size.

80

00:06:12,800  -->  00:06:19,820
These pieces are then added together to give the resulting hash function or hash value excuse me.

81

00:06:19,910  -->  00:06:27,530
So let's go through a more complicated example let's say your item is the phone number 4 3 6 5 5 5 4

82

00:06:27,530  -->  00:06:29,150
6 or 1.

83

00:06:29,150  -->  00:06:34,140
What we would do is take digits and divide them into two into groups of two.

84

00:06:34,190  -->  00:06:39,800
So 43 65 55 46 and then 0 1.

85

00:06:39,830  -->  00:06:45,010
Then after adding all these numbers together we get to 10.

86

00:06:45,440  -->  00:06:50,990
If we assume our hash table has 11 slots like in the previous case then we need to perform the extra

87

00:06:50,990  -->  00:06:54,620
step of dividing by 11 and keeping the remainder.

88

00:06:54,680  -->  00:06:58,110
That means to 10 11 is 1.

89

00:06:58,460  -->  00:07:11,210
So the phone number 4 3 6 5 5 5 4 6 0 1 then hashes to slot 1 in another hash function method is called

90

00:07:11,210  -->  00:07:14,600
the square method for the mid square method.

91

00:07:14,600  -->  00:07:19,840
We first square the item and then extract some portion of the resulting digits.

92

00:07:19,850  -->  00:07:28,240
For example if the item were 44 we were first compute 44 squared which in this case is 1936.

93

00:07:28,430  -->  00:07:35,870
And then extract the middle two digits 93 and performed the remainder step to get 93 model 7 equals

94

00:07:35,870  -->  00:07:40,090
5.

95

00:07:40,100  -->  00:07:44,030
Here we have a simple comparison table of various items.

96

00:07:44,150  -->  00:07:48,770
And then what their slot numbers would be if you use just the remainder method or if you something like

97

00:07:48,770  -->  00:07:51,530
the mid square method.

98

00:07:53,360  -->  00:07:53,740
OK.

99

00:07:53,780  -->  00:07:56,270
So let's discuss non-integer elements.

100

00:07:56,270  -->  00:08:01,370
We can also create hash functions for character based items such as strings.

101

00:08:01,370  -->  00:08:05,460
The word cat can be thought of as a sequence of ordinal values.

102

00:08:05,630  -->  00:08:11,030
And if you're not familiar ordinal values in this case just think of them as a way of converting that

103

00:08:11,030  -->  00:08:12,650
string into numbers.

104

00:08:12,800  -->  00:08:17,420
You can go ahead and do a Wikipedia search for ordinal values if you want a fuller breakdown of this

105

00:08:17,420  -->  00:08:20,280
.

106

00:08:20,840  -->  00:08:26,270
But in this case if you just want to use Python you can actually call in the built in function o r d

107

00:08:26,600  -->  00:08:27,130
.

108

00:08:27,140  -->  00:08:32,930
Passing this particular letter of that string and it will give you an output of the ordinal value that

109

00:08:32,930  -->  00:08:36,310
relates to that string or that element of the string.

110

00:08:36,320  -->  00:08:45,660
In this case passing in cat CHC result in 99 97 and 116 which you can then sum up to get 312.

111

00:08:45,890  -->  00:08:52,850
And you could perform the remainder hash function on that and 3:12 Mada 11 equals four.

112

00:08:54,020  -->  00:08:54,790
OK.

113

00:08:55,250  -->  00:08:58,830
Now we discussed hash functions and a little more detail.

114

00:08:58,850  -->  00:09:04,880
Let's go ahead and talk about collision resolution one method for resolving collisions looks into the

115

00:09:04,880  -->  00:09:11,630
hash table and tries to find another open slot to hold the item that caused the collision.

116

00:09:11,630  -->  00:09:16,610
So for instance we could start with the original hash value position and then move in a sequential manner

117

00:09:16,640  -->  00:09:20,870
through the slots until we encounter the first slot that is empty.

118

00:09:20,930  -->  00:09:27,110
This collision resolution process is referred to as open addressing in that it tries to find the next

119

00:09:27,140  -->  00:09:34,240
open slot or address in the hash table by systematically visiting each slot one at a time.

120

00:09:34,250  -->  00:09:38,230
We're performing an open addressing technique called linier probing.

121

00:09:39,080  -->  00:09:41,280
So take a look at example of this.

122

00:09:41,420  -->  00:09:43,020
Consider the following table.

123

00:09:43,310  -->  00:09:48,920
Here we have 77 in slot 0 because 77 Maat 11 is equal to zero.

124

00:09:49,280  -->  00:09:55,010
But what if we also had to add 44 55 and 20.

125

00:09:55,100  -->  00:10:00,680
So if linear probing we basically just keep moving down until we find an empty slot meaning with inserted

126

00:10:00,690  -->  00:10:03,460
44 instead of at zero we moved down.

127

00:10:03,500  -->  00:10:07,080
Check that one was empty and filled it in 55.

128

00:10:07,160  -->  00:10:08,440
We tried 0.

129

00:10:08,770  -->  00:10:10,610
It didn't fit because it wasn't empty.

130

00:10:10,820  -->  00:10:12,140
Then we moved over to one.

131

00:10:12,170  -->  00:10:13,310
Again it wasn't empty.

132

00:10:13,340  -->  00:10:18,700
So he filled in at two and we did a similar thing for 20.

133

00:10:18,740  -->  00:10:25,880
So one way to deal with clustering is to skip slots thereby more evenly distributing the items that

134

00:10:25,880  -->  00:10:27,520
have caused collisions.

135

00:10:27,560  -->  00:10:33,170
So if you notice back here on one slide back we'll eventually have to keep clustering things towards

136

00:10:33,170  -->  00:10:35,560
the beginning of our hash table.

137

00:10:36,050  -->  00:10:41,270
But if we want to deal with clustering we can actually skip a certain number of slots thereby evenly

138

00:10:41,270  -->  00:10:44,000
distributing those items.

139

00:10:44,000  -->  00:10:48,880
So the more general name for this process of looking for another slot after a collision is called the

140

00:10:48,890  -->  00:10:54,980
rehashing and the variation of the linear probing idea is called quadratic probing.

141

00:10:55,280  -->  00:11:01,430
Instead of using a constant Skipp value in the last case it was just one we use a rehash function that

142

00:11:01,460  -->  00:11:07,330
increments the hash value by 1 3 5 7 9 and so on.

143

00:11:08,720  -->  00:11:10,280
OK.

144

00:11:10,300  -->  00:11:16,840
Another note is that this means if the first hash value is h the successive values are h plus 1 pulls

145

00:11:16,940  -->  00:11:21,520
for H post-9 H will 16 and so on.

146

00:11:21,890  -->  00:11:27,590
An alternative method for handling the collision problem is to allow each slot to hold a reference to

147

00:11:27,590  -->  00:11:30,080
a collection or chain of items.

148

00:11:30,080  -->  00:11:35,280
Chaining allows many items to exist at the same location in the hash table.

149

00:11:35,450  -->  00:11:42,170
Then when collisions happen the item is still placed in the proper slot of the hash table.

150

00:11:42,170  -->  00:11:47,840
So the switch chaining would look like instead of going around and probing for a new empty slot you

151

00:11:47,840  -->  00:11:50,890
would just basically chain off the original slot.

152

00:11:51,160  -->  00:11:57,850
So numbers such as 44 and 55 would chain off that zero slot number.

153

00:11:58,520  -->  00:12:03,560
And as more and more items hash to the same location it should be noted that the difficulty of searching

154

00:12:03,560  -->  00:12:07,790
for the item in the collection increases.

155

00:12:07,910  -->  00:12:09,320
All right so we've covered a lot.

156

00:12:09,320  -->  00:12:15,590
We've covered hashing hash tables various hash functions and collision resolution methods.

157

00:12:15,590  -->  00:12:20,050
Up next we're going to implement her own hash table class before we check that out.

158

00:12:20,240  -->  00:12:24,830
I would recommend that you check out the resources section of this lecture which has the PowerPoint

159

00:12:24,920  -->  00:12:26,600
and these slides we covered.

160

00:12:26,600  -->  00:12:31,910
Go ahead and walk through them check your notes and make sure you fully understand the basics of hashing

161

00:12:31,910  -->  00:12:35,330
and hash tables and hash functions.

162

00:12:35,330  -->  00:12:40,400
All right thanks everyone and I'll see you at the next lecture implementation of a hash table
