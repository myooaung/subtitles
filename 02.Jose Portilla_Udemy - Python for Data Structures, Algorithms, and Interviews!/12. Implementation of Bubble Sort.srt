1

00:00:02,580  -->  00:00:06,530
Hello everyone and welcome to the implementation of a bubble sort of lecture.

2

00:00:06,840  -->  00:00:12,240
So a quick reminder the bubble sort makes multiple passes through a list it compares adjacent items

3

00:00:12,330  -->  00:00:14,500
and exchanges those that are out of order.

4

00:00:14,850  -->  00:00:19,770
Each pass through the list places the next largest value in its proper place.

5

00:00:19,770  -->  00:00:23,940
So in essence each item is bubbling up to the location where it belongs.

6

00:00:24,390  -->  00:00:26,350
So as always Here's the notebook.

7

00:00:26,460  -->  00:00:31,290
You have resource for review including visualisations and we're going to go ahead and program out our

8

00:00:31,290  -->  00:00:32,960
own implementation in Python.

9

00:00:33,020  -->  00:00:35,080
Explain as we go along.

10

00:00:35,100  -->  00:00:37,520
So go ahead and open up a new Jupiter notebook.

11

00:00:37,560  -->  00:00:39,290
Let's go and zoom in here real quick.

12

00:00:39,300  -->  00:00:41,130
Now let's get started.

13

00:00:41,130  -->  00:00:45,390
So first thing we're going to do is go ahead and start writing our function.

14

00:00:45,390  -->  00:00:52,200
This case we'll just call it bubble underscore sorts and we'll take in an array.

15

00:00:52,220  -->  00:00:54,930
They are now again in Python.

16

00:00:54,930  -->  00:00:59,750
This is just going to be our normal list but we'll treat it with the term A-R are just we can generalize

17

00:00:59,750  -->  00:01:01,370
it to an array.

18

00:01:01,500  -->  00:01:09,540
So we're going to do is say for n in range and this is where it's going to get a bit tricky but we're

19

00:01:09,540  -->  00:01:13,360
basically arrange it backwards and I'll show you what I mean by that in just a second.

20

00:01:13,380  -->  00:01:21,540
We're going to say length r minus 1 to zero insteps of negative 1.

21

00:01:21,540  -->  00:01:23,460
So let me go in and show you what that looks like.

22

00:01:23,460  -->  00:01:34,010
I'm going to go in and say pass here and then let's go ahead and say our is just one two three four

23

00:01:34,010  -->  00:01:35,160
five.

24

00:01:35,510  -->  00:01:44,190
And if I say I just go and print this out you basically arrange everything backwards except for the

25

00:01:44,190  -->  00:01:45,600
very last elements.

26

00:01:45,600  -->  00:01:49,760
Since we're going from minus 1 so just keep them in mind as we go along.

27

00:01:50,070  -->  00:01:51,650
What does it actually do.

28

00:01:51,650  -->  00:01:58,230
If you're using Python 3 in order to see this result you have to have called LIST on this since range

29

00:01:58,230  -->  00:02:01,110
is just a generator in Python 3.

30

00:02:01,580  -->  00:02:01,880
OK.

31

00:02:01,920  -->  00:02:05,110
So let's go ahead and keep on moving.

32

00:02:06,900  -->  00:02:17,400
So the next thing we're going to do is then say for k in range of 10.

33

00:02:17,700  -->  00:02:22,650
So as we go along with that that list remember we had that one two three four five.

34

00:02:22,650  -->  00:02:30,020
In this case we're going to go all the way from k 0 to m.

35

00:02:30,060  -->  00:02:37,680
So to understand this logic we're going to say is if the array at that value points basically that index

36

00:02:39,360  -->  00:02:43,050
is greater than K plus 1.

37

00:02:43,050  -->  00:02:47,100
Let me fix those brackets there K plus 1.

38

00:02:47,340  -->  00:02:48,930
So we're basic checking here.

39

00:02:48,930  -->  00:02:51,740
We're going to come to a point where we need a switch.

40

00:02:52,200  -->  00:03:03,240
So going to say make a temporary variable equal to our of that K the index and then say our K is equal

41

00:03:03,240  -->  00:03:13,010
to r of K plus 1 and then say R K plus 1 is equal to that temporary variable.

42

00:03:13,230  -->  00:03:14,540
And that's really all there is to it.

43

00:03:14,540  -->  00:03:16,940
For this implementation of the bubble sort.

44

00:03:17,430  -->  00:03:17,780
OK.

45

00:03:17,790  -->  00:03:19,700
So let's go ahead and tests that our solution.

46

00:03:19,710  -->  00:03:23,100
Make sure it runs well and then we'll break down step by step one more time.

47

00:03:23,100  -->  00:03:24,960
What we're doing.

48

00:03:24,960  -->  00:03:28,760
So going to go in and say create an array.

49

00:03:28,760  -->  00:03:35,880
Now will say five say three 7 and two.

50

00:03:35,910  -->  00:03:37,470
So that's already unsorted.

51

00:03:37,810  -->  00:03:44,410
We're going to called Bubble sort on that array that list and then print out that array again.

52

00:03:45,290  -->  00:03:47,460
Okay perfect so it was sorted.

53

00:03:47,460  -->  00:03:53,280
Notice that I don't have a return function on the return key word on this function.

54

00:03:53,490  -->  00:03:57,970
So it didn't actually automatically return it if you wanted to you could have added in line with this

55

00:03:57,990  -->  00:03:59,140
for loop return.

56

00:03:59,160  -->  00:04:04,430
A R R in order to not have to redo and print that array.

57

00:04:04,440  -->  00:04:07,040
OK so it's good go one more time.

58

00:04:07,050  -->  00:04:09,900
What's going on in this function.

59

00:04:09,900  -->  00:04:18,440
So I'm saying for n in range and remember we are actually just saying everything in reverse order.

60

00:04:18,480  -->  00:04:20,160
So let's go ahead and show that one more time.

61

00:04:20,160  -->  00:04:28,440
So range length or minus one zero minus one.

62

00:04:28,440  -->  00:04:33,900
So if this is our example array what we should see out is 3 to 1.

63

00:04:34,230  -->  00:04:40,940
So that's going to help us see what actual index we should be doing when we come to that case so I'm

64

00:04:40,950  -->  00:04:47,810
going to go ahead and say print K and print and here.

65

00:04:47,940  -->  00:04:55,800
So if we run this on a very short array these print statements may help us visualize what's actually

66

00:04:55,800  -->  00:04:57,210
happening.

67

00:04:57,210  -->  00:04:58,200
So if I say bubble sort.

68

00:04:58,260  -->  00:05:04,190
Are you can go ahead and see the print statements and the are actual arrays we're checking.

69

00:05:04,200  -->  00:05:06,070
At that point in time.

70

00:05:06,350  -->  00:05:19,910
So I'm going to go ahead and say this is the Ann comma and then here I want to say this is the K index

71

00:05:19,920  -->  00:05:22,090
check.

72

00:05:22,430  -->  00:05:24,330
Comma.

73

00:05:25,180  -->  00:05:26,090
All right.

74

00:05:26,100  -->  00:05:29,290
So you notice what's happening here is every end.

75

00:05:29,610  -->  00:05:34,020
We're going to head and do index checks from 0 up to that end.

76

00:05:34,380  -->  00:05:36,470
And this is where the bubbling is occurring.

77

00:05:36,510  -->  00:05:43,320
Remember from the diagram we only have to bubble less and less as we continue on depending on which

78

00:05:43,320  -->  00:05:46,410
side we're going from the side from the left.

79

00:05:46,440  -->  00:05:47,890
So go ahead and check this out.

80

00:05:47,910  -->  00:05:50,140
Definitely use print statements in case you're still confused.

81

00:05:50,130  -->  00:05:58,490
But steps that themselves but all we're doing here is saying from an 3 since we have a length of four

82

00:05:58,490  -->  00:05:59,270
.

83

00:05:59,580  -->  00:06:03,450
Go ahead and do index checks at 0 1 and 2.

84

00:06:03,450  -->  00:06:07,710
Once you've done all the way up to end we'll go ahead and do an equals two.

85

00:06:08,100  -->  00:06:11,410
They'll do your on one and then keep subtracting.

86

00:06:11,790  -->  00:06:18,330
And as far as the actual index checks what's going on we're just checking at the two adjacent elements

87

00:06:18,420  -->  00:06:19,610
in the survey.

88

00:06:19,770  -->  00:06:25,160
If one is greater than the other if it is we just go ahead and do a swap with these three lines here

89

00:06:25,160  -->  00:06:25,690
.

90

00:06:25,800  -->  00:06:27,510
We're using a temporary variable.

91

00:06:27,600  -->  00:06:32,290
So we don't actually accidently overwrite anything in that list or array.

92

00:06:32,340  -->  00:06:33,020
OK.

93

00:06:33,330  -->  00:06:35,660
So that's it for the implementation of bubble sort.

94

00:06:35,700  -->  00:06:37,650
Hopefully you can see it's quite simple.

95

00:06:37,650  -->  00:06:46,200
As far as this line and the Slyne different methods may operate these two lines differently.

96

00:06:46,200  -->  00:06:51,090
So depending if you're running from the rights of the list or the left of the list you may bubble up

97

00:06:51,150  -->  00:06:52,530
in a different manner.

98

00:06:52,530  -->  00:06:58,230
But as far as our implementation this actually makes sense and this comparison is going to be very very

99

00:06:58,230  -->  00:07:00,990
similar no matter which way you go.

100

00:07:00,990  -->  00:07:04,050
All right thanks everyone and I'll see you at the next lecture
