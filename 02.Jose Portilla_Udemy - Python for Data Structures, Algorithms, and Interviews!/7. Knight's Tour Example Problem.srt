1

00:00:01,350  -->  00:00:06,420
Hello everyone and welcome to lecture on the Knights tour problem.

2

00:00:06,420  -->  00:00:10,410
So in this section in this lecture we're going to explain the Knight's Tour problem with that puzzle

3

00:00:10,410  -->  00:00:14,000
is we're going to see if we can use graphs to set up the solution.

4

00:00:14,100  -->  00:00:19,770
We'll view a solution in Python and then continue on to get a more general of the depth first search

5

00:00:19,770  -->  00:00:19,910
.

6

00:00:19,920  -->  00:00:27,030
Now just keep in mind as far as the breadth first search and depth first search so be EF-S and DFS in

7

00:00:27,030  -->  00:00:33,540
the previous lectures we saw some basic puzzle that word ladder puzzle as just an introduction to an

8

00:00:33,540  -->  00:00:33,990
idea.

9

00:00:33,990  -->  00:00:40,170
Why would you want to have FS in this lecture going to see the Knight's Tour graph problem as an idea

10

00:00:40,170  -->  00:00:45,720
of why we need DFS after this lecture and the next one we're actually going to do is have three lectures

11

00:00:45,720  -->  00:00:52,290
in a row where we fully code out and do a live code walk through explanation again of a graph implementation

12

00:00:52,640  -->  00:00:56,520
in implementation of FS and an implementation of DFS.

13

00:00:56,520  -->  00:01:00,330
So while you will see code as just an image throughout these slides.

14

00:01:00,330  -->  00:01:06,840
Keep in mind that we're actually going to live code all the algorithms in the graph overview again later

15

00:01:06,840  -->  00:01:08,680
on in the section of the Course here.

16

00:01:08,700  -->  00:01:11,970
So don't worry about having to code everything that you see right now.

17

00:01:12,060  -->  00:01:16,320
This is just basically to give you some ideas of why we need the FS.

18

00:01:16,470  -->  00:01:19,090
So let's go ahead and continue on.

19

00:01:19,110  -->  00:01:21,250
So what is the Knight's Tour puzzle.

20

00:01:21,330  -->  00:01:26,670
Well the nice tour puzzle is played on a chessboard of a single chess piece the night and the object

21

00:01:26,670  -->  00:01:31,350
of the puzzle is to find the sequence of moves that allow the night to visit every square in the board

22

00:01:31,380  -->  00:01:32,510
exactly once.

23

00:01:32,500  -->  00:01:37,320
Now you don't need to know too much about chess to get this puzzle but what we're going to do is solve

24

00:01:37,320  -->  00:01:39,060
the problem using two main steps.

25

00:01:39,060  -->  00:01:44,400
One is to represent the legal moves of a knight on a chess board as a graph and then we can use a graph

26

00:01:44,430  -->  00:01:50,640
algorithm to find the path of length rows Times columns just minus one where every vertex on that graph

27

00:01:50,640  -->  00:01:53,450
is visited exactly once.

28

00:01:53,460  -->  00:01:58,630
So let's go ahead and check this out.

29

00:01:58,680  -->  00:02:03,720
So in case you're not super familiar of chess a chess again is an 8 by 8 board.

30

00:02:03,750  -->  00:02:05,610
This is just a subsection of that board.

31

00:02:05,670  -->  00:02:10,260
And you have this night and the night piece can move in an L fashion.

32

00:02:10,470  -->  00:02:16,350
So all the dots here are legal moves for the night so you'll see has here is an L.

33

00:02:16,350  -->  00:02:20,060
So three and then 1 3 than 1 3 1 and that's how the night can move.

34

00:02:20,100  -->  00:02:22,430
So those are all the legal moves for the night.

35

00:02:22,440  -->  00:02:27,750
In this particular subsection of the board and you can see that we can represent this as a corresponding

36

00:02:27,750  -->  00:02:28,980
graph.

37

00:02:29,850  -->  00:02:34,290
So now we want to know really how we can build out this photograph and we can actually use that using

38

00:02:34,860  -->  00:02:38,520
this function here the night graph function.

39

00:02:38,520  -->  00:02:44,670
So this is going to do is the function makes one pass over the entire board and each square on the board

40

00:02:45,030  -->  00:02:50,820
the night graph is going to call a helper function called generate legal moves or general legal moves

41

00:02:51,180  -->  00:02:54,850
which is actually on the next slide if you want check that out same time.

42

00:02:54,900  -->  00:02:59,220
But basically what it does it just creates a list of legal moves for that position on the board.

43

00:02:59,550  -->  00:03:02,840
Then all the legal moves are then converted into edges in the grass.

44

00:03:03,180  -->  00:03:09,780
Another helper function which is called position to note Dear POS to note Id converts a location on

45

00:03:09,780  -->  00:03:16,050
the board in terms of a row and column into a linear vertex number similar to the vertex numbers shown

46

00:03:16,110  -->  00:03:20,430
earlier in this slide.

47

00:03:21,000  -->  00:03:26,240
And then if we just take a quick look at that generate legal moves function.

48

00:03:26,250  -->  00:03:30,240
Basically what this does is it just takes the position of a knight on the board and generates each of

49

00:03:30,240  -->  00:03:31,950
the eight possible moves.

50

00:03:32,310  -->  00:03:34,480
And then it has another helper function.

51

00:03:34,530  -->  00:03:36,710
Legal court her legal coordinate.

52

00:03:36,900  -->  00:03:41,010
And it just makes sure that particular move that is generated is actually still on the board.

53

00:03:41,010  -->  00:03:42,460
So you have board size here.

54

00:03:42,510  -->  00:03:47,430
So eight buy or whatever you just want to make sure that the legal move doesn't bounce that night off

55

00:03:47,430  -->  00:03:48,820
the actual chess board.

56

00:03:49,230  -->  00:03:52,610
So again these are in the Jupiter note book that goes along with this lecture.

57

00:03:52,620  -->  00:03:55,540
But don't worry too much about them.

58

00:03:55,620  -->  00:04:01,140
It's just for this specific puzzle and we're going to do later on is actually generate or implement

59

00:04:01,140  -->  00:04:09,020
I should say in Python a very specific DFS and b fs after these next two lectures.

60

00:04:09,030  -->  00:04:13,570
So continuing on what you want to know all the possible board moves look like after you built the graph

61

00:04:13,570  -->  00:04:15,020
it looks something like this.

62

00:04:15,450  -->  00:04:17,430
And this is something we'll revisit later.

63

00:04:17,670  -->  00:04:21,560
But this just shows a complete graph of all possible moves on an 8 by 8 board.

64

00:04:21,700  -->  00:04:24,790
So there's exactly three hundred and thirty six edges in this graph.

65

00:04:25,320  -->  00:04:30,700
And what you should notice is that the vertices corresponding to the edges of the board have fewer connections

66

00:04:30,710  -->  00:04:30,730
.

67

00:04:30,750  -->  00:04:31,380
Right.

68

00:04:31,430  -->  00:04:32,900
Which are legal moves.

69

00:04:32,910  -->  00:04:36,810
So for example these are the vertices of the edge of the bore that have less legal moves which makes

70

00:04:36,810  -->  00:04:42,990
sense because your knight would then bounce off the board so you can only really do two legal moves

71

00:04:43,080  -->  00:04:49,500
from the corner which makes sense and once again you can see how sparse the graphics of the graph is

72

00:04:49,500  -->  00:04:51,550
fully connected.

73

00:04:51,600  -->  00:04:57,450
Excuse me if the graph was fully connected meaning every node was fully connected to every other node

74

00:04:57,440  -->  00:04:57,760
.

75

00:04:57,760  -->  00:05:00,090
Thirty four thousand ninety six edges.

76

00:05:00,140  -->  00:05:02,990
Well there's actually only three six edges.

77

00:05:03,020  -->  00:05:09,550
That means if we were to try to use an adjacency matrix to fill out this graph or represent the scrap

78

00:05:10,070  -->  00:05:12,310
it only be about 8 percent for.

79

00:05:12,560  -->  00:05:16,970
So definitely for larger graphs the adjacency list is a way to go.

80

00:05:16,980  -->  00:05:23,020
So it's just a little reminder and throwback to that old lesson we had so continue here.

81

00:05:23,310  -->  00:05:25,320
We're going to do the search algorithm.

82

00:05:25,520  -->  00:05:33,470
We're going to use to solve the Knight's Tour problem is called depth first search or DFS and whereas

83

00:05:33,600  -->  00:05:39,040
DFS algorithm discussed in the previous section builds a search tree one level at a time.

84

00:05:39,140  -->  00:05:45,110
The DFS algorithm will create a search tree by exploring one branch of the tree as deeply as possible

85

00:05:45,120  -->  00:05:47,070
.

86

00:05:47,120  -->  00:05:51,020
So in this section again we're going to look at two algorithms that implement that that first search

87

00:05:51,180  -->  00:05:56,450
the first group we're really like is directed really particularly to this specific puzzle the night

88

00:05:56,450  -->  00:06:02,150
store problem and it explicitly forbids a note to be visited more than once which is exactly what the

89

00:06:02,150  -->  00:06:03,770
Knights for a puzzle was right.

90

00:06:03,770  -->  00:06:09,510
We wanted to visit every board exactly every position on the board exactly once as a night.

91

00:06:09,560  -->  00:06:16,540
Later on we're going to discuss a more general DFS which will do in the next lecture.

92

00:06:16,680  -->  00:06:22,370
So the first exploration of the graph is exactly what we need in order to find that path that has exactly

93

00:06:22,380  -->  00:06:24,310
63 edges.

94

00:06:24,500  -->  00:06:29,720
We're going to need to we will see that when the first search algorithm finds a dead end which is a

95

00:06:29,730  -->  00:06:32,220
place in the graph where there are no more moves possible.

96

00:06:32,430  -->  00:06:34,070
It's going to go back up the treats.

97

00:06:34,090  -->  00:06:37,210
Next step is vertex that allows it to make a legal move.

98

00:06:37,520  -->  00:06:42,060
And this is for that particular algorithm for solving the Knights top puzzle.

99

00:06:42,930  -->  00:06:46,200
So the tour function is actually here on the next slide.

100

00:06:46,230  -->  00:06:52,450
But it's going to take four parameters and which is the current depth in the search tree takes some

101

00:06:52,460  -->  00:06:58,800
path a list of vertices visited up to this point you which is the vertex and the graph which to wish

102

00:06:58,840  -->  00:07:04,050
to explore and then limit which is the number of nodes in the path and that we should note that the

103

00:07:04,050  -->  00:07:07,470
night tour function in this case is recursive.

104

00:07:07,500  -->  00:07:11,820
So let's go ahead and explore it here a little further and that.

105

00:07:11,910  -->  00:07:18,160
So you'll notice what happens is that our function again is using colors to keep track of which vertices

106

00:07:18,160  -->  00:07:19,900
in the graph have been visited.

107

00:07:20,150  -->  00:07:26,010
So unvisited overseas are colored whites and visited vertices are colored gray.

108

00:07:26,310  -->  00:07:31,160
And again if all the neighbors of a particular vertex have been explored We have not yet reached our

109

00:07:31,160  -->  00:07:34,770
goal length of 64 vertices and we've reached the dead end.

110

00:07:35,120  -->  00:07:37,500
And when we reach that end we have to actually backtrack.

111

00:07:37,830  -->  00:07:43,930
So backtracking happens when we returned from night tour that night tour a function of a status of falls

112

00:07:43,960  -->  00:07:44,260
.

113

00:07:44,550  -->  00:07:50,610
So if you return office that is a false from the nightwear function meaning done was never set equal

114

00:07:50,610  -->  00:07:51,070
to true.

115

00:07:51,090  -->  00:07:58,490
It means you have to backtrack and so in the first breath first search we use a Q to keep track of which

116

00:07:58,500  -->  00:08:00,430
vertex to visit next.

117

00:08:00,500  -->  00:08:07,530
And since that first search is recursive we're implicitly using a stack to help us for backtracking

118

00:08:07,590  -->  00:08:08,370
.

119

00:08:08,370  -->  00:08:15,680
So when we return from a call to the night tour have a status of false which happens in this line.

120

00:08:15,690  -->  00:08:20,580
Right here we say Dunn is equal to that recursive call of night tour.

121

00:08:20,580  -->  00:08:25,590
So when you return from a call tonight Torfi set us a false you're going to remain inside this wild

122

00:08:25,600  -->  00:08:30,900
loop because you're saying and not done right and you're going to then look at the next vertex in that

123

00:08:30,890  -->  00:08:33,040
neighbor list object which is right here.

124

00:08:33,060  -->  00:08:37,770
And B our list more or less just a list of getting the connections.

125

00:08:38,070  -->  00:08:43,050
So let's go ahead and look at a simple example of the night tour in action and I'm going to show you

126

00:08:43,050  -->  00:08:46,100
some figures of what you can check out.

127

00:08:47,220  -->  00:08:52,280
So let's go ahead and go jump to the figures and if you're in the if you downloaded this resource PowerPoint

128

00:08:52,280  -->  00:08:56,410
presentation everything I just said is in the next couple of slides.

129

00:08:56,780  -->  00:08:58,890
So we're going to go ahead and jump for it right here.

130

00:08:58,880  -->  00:09:00,950
This snakes for example.

131

00:09:00,950  -->  00:09:08,090
So we're going to do a start at node A and the nodes adjacent to A R B and D so we can see this is a

132

00:09:08,100  -->  00:09:14,760
directed graph already and since B is before the alphabetically The first is going to select B to expand

133

00:09:14,750  -->  00:09:16,020
next.

134

00:09:16,010  -->  00:09:18,060
So let's go ahead and show that.

135

00:09:18,750  -->  00:09:25,210
So we've selected B to expand next to and then exploring B happens when that night tour is called recursively

136

00:09:25,860  -->  00:09:28,690
B is adjacent to C and D.

137

00:09:28,830  -->  00:09:33,410
So the nightwear will elect to explore C next she'll be the next one.

138

00:09:33,410  -->  00:09:35,110
So now we're exploring c.

139

00:09:35,630  -->  00:09:39,960
However as you can see node C is a dead ends with no adjacent notes.

140

00:09:39,950  -->  00:09:43,540
If you look at where the edges are pointing it doesn't point outwards from C.

141

00:09:43,560  -->  00:09:46,980
So we've reached that end here.

142

00:09:47,450  -->  00:09:51,510
So now that we've reached that and what we have to do is backtrack.

143

00:09:51,540  -->  00:09:59,370
So we then do is set C back to white and the called The Night tour function will return a value of false

144

00:10:00,720  -->  00:10:02,900
return from the recursive call.

145

00:10:02,900  -->  00:10:09,600
Effectively backtracks the search to vertex B and the next for a Texan to the list to explore since

146

00:10:09,610  -->  00:10:11,890
we read that C is going to be D.

147

00:10:12,410  -->  00:10:15,780
So then we go ahead and explore D.

148

00:10:16,350  -->  00:10:22,170
And we do that with the recursive call to know the name from vertex D on what the night function is

149

00:10:22,160  -->  00:10:26,720
going to do is continue to make recursive calls until we get to nodes C again.

150

00:10:26,930  -->  00:10:34,250
So make a call here e f hasn't been explored so we go to F and then finally we reached C..

151

00:10:34,800  -->  00:10:41,430
And by this time the last time that we reached C but will notice is that and the marker is going to

152

00:10:41,420  -->  00:10:46,730
be less than the limit meaning we've already exhausted all the nodes in the graph and that at this point

153

00:10:46,740  -->  00:10:47,930
we can return true.

154

00:10:47,950  -->  00:10:53,430
In the case that we've made a successful tour of the graph and we return the list the path it's going

155

00:10:53,420  -->  00:10:59,970
to have the values A B D E F C which is the order we need to traverse the graph to visit each each node

156

00:10:59,970  -->  00:11:01,740
exactly one time.

157

00:11:01,740  -->  00:11:03,480
So what does that actually look like.

158

00:11:03,480  -->  00:11:09,490
If you were to try to try it on a pipe it well it would look something like this so this is the path

159

00:11:09,540  -->  00:11:17,920
that a knight would have to take in order to visit each part of the board exactly one time.

160

00:11:17,970  -->  00:11:23,390
So there's actually many possible tours and some are actually symmetric and with some modification you

161

00:11:23,390  -->  00:11:27,330
can actually make a circular towards that star and that the same square.

162

00:11:27,330  -->  00:11:32,090
So there's many solutions to this problem but you can see that using a graph especially a recursive

163

00:11:33,260  -->  00:11:38,090
searching algorithm to the graph is a great choice for trying to solve this puzzle.

164

00:11:38,490  -->  00:11:40,860
So that's the basic idea.

165

00:11:40,910  -->  00:11:45,110
Up next what we're going to do we've gotten this overview of that special use case.

166

00:11:45,120  -->  00:11:49,720
We're going to try to discover what General that first search looks like and afterwards we're going

167

00:11:49,720  -->  00:11:56,780
to do a full life code walkthrough of all the implementations of a graph breadth first search DFS and

168

00:11:56,790  -->  00:11:59,300
then depth first search DFS.

169

00:11:59,570  -->  00:12:00,390
OK.

170

00:12:00,770  -->  00:12:01,770
Thanks everyone.

171

00:12:01,760  -->  00:12:03,530
Go ahead and review this lecture.

172

00:12:03,550  -->  00:12:08,430
But this is basically just to get you a general idea of what you can use this for.

173

00:12:08,420  -->  00:12:08,960
All right.

174

00:12:09,120  -->  00:12:11,200
Thanks and I'll see you at the next lecture.
