1

00:00:00,930  -->  00:00:07,020
Hello everyone and welcome to part two of the implementation of binary search trees lecture in this

2

00:00:07,020  -->  00:00:07,550
part 2.

3

00:00:07,560  -->  00:00:10,220
We're going to focus on deleting and removing nodes.

4

00:00:10,530  -->  00:00:14,510
Let's go ahead and jump to that section of the presentation.

5

00:00:14,610  -->  00:00:17,760
OK so you mentioned the last lecture.

6

00:00:17,760  -->  00:00:22,080
We finally have turned their attention to the most challenging method in the binary search tree which

7

00:00:22,080  -->  00:00:23,600
is deleting a key.

8

00:00:23,640  -->  00:00:27,540
The first task is to find a note to delete by searching the tree.

9

00:00:27,870  -->  00:00:32,970
If the tree has more than one note we can search using the underscore get method to find the tree node

10

00:00:33,000  -->  00:00:34,650
that needs to be removed.

11

00:00:34,860  -->  00:00:40,860
So get underscore get method that help or functionally described in the previous lecture.

12

00:00:40,860  -->  00:00:45,960
If the tree only has a single note that means we're removing the root of the tree but we still must

13

00:00:45,960  -->  00:00:49,990
check to make sure the key of the root matches the key that is to be deleted.

14

00:00:50,340  -->  00:00:56,840
In either case if the key is not found that the elderly operator will raise an error.

15

00:00:57,240  -->  00:01:01,390
So here's what that basic delete method looks like.

16

00:01:01,410  -->  00:01:03,380
We can walk to the basics here.

17

00:01:03,390  -->  00:01:09,510
We'll check if self-taught size is greater than 1 to call the node to remove using the underscore gets

18

00:01:09,630  -->  00:01:12,080
in passing in the key as well as the root.

19

00:01:12,240  -->  00:01:18,030
Will see if node to remove then we just remove it and set the size equal to size minus 1.

20

00:01:18,030  -->  00:01:23,760
Otherwise we raise a query saying the key isn't in the tree and we have an else for each left statement

21

00:01:23,760  -->  00:01:26,530
here will say if the size equal to 1.

22

00:01:26,820  -->  00:01:29,360
And the root key is equal to the key.

23

00:01:29,400  -->  00:01:34,560
Then we reset the equal to none and subtract one from the size of the tree.

24

00:01:34,620  -->  00:01:40,660
If neither of these cases turns out to be true then the key is not in the tree we raise here.

25

00:01:40,800  -->  00:01:48,480
The special method DTL item underscore underscores surrounding it just allows us to use that DCL special

26

00:01:48,480  -->  00:01:50,400
Dilley operator in Python.

27

00:01:50,400  -->  00:01:53,970
Again this is just a special method.

28

00:01:53,970  -->  00:01:57,240
Once we found a node containing the key we want to delete.

29

00:01:57,310  -->  00:01:59,710
There's going to be three cases to consider.

30

00:02:00,270  -->  00:02:04,190
The first one is that the notes of the delay be deleted has no children.

31

00:02:04,500  -->  00:02:10,530
So for instance if we wanted to take this tree and delete the node here 16 which doesn't have any children

32

00:02:10,710  -->  00:02:12,760
this is going to be the simplest case.

33

00:02:13,290  -->  00:02:15,390
This first case just straightforward.

34

00:02:15,510  -->  00:02:20,190
All we have to do is say if the current note has no children we just delete the node and remove the

35

00:02:20,190  -->  00:02:21,800
reference to this node in the parent.

36

00:02:22,050  -->  00:02:24,270
And that's what we're doing in this section of the code.

37

00:02:24,360  -->  00:02:28,080
You can refer to the Jupiter note book for the entire deleting code.

38

00:02:28,080  -->  00:02:31,360
But here we're just going to take it a little bit by little bits.

39

00:02:31,440  -->  00:02:32,440
Sahira just saying.

40

00:02:32,490  -->  00:02:38,970
If it is a leaf if that's true then if current notice equal to the current nodes parent left child then

41

00:02:38,970  -->  00:02:40,960
we just sit the left child equals to none.

42

00:02:40,980  -->  00:02:42,200
Otherwise it's the right child.

43

00:02:42,210  -->  00:02:44,080
So he set the right child equal to none.

44

00:02:44,160  -->  00:02:47,410
Here we're just checking if it's a leaf meaning it has no children.

45

00:02:47,430  -->  00:02:53,930
That's the first case the second case is that the node to be deleted has only one child.

46

00:02:54,300  -->  00:02:57,530
So for instance if we wanted to delete here No.

47

00:02:57,530  -->  00:02:58,410
25.

48

00:02:58,440  -->  00:03:04,050
Which you can see only has a single child that right child.

49

00:03:04,650  -->  00:03:07,230
The second case is just slightly more complicated.

50

00:03:07,560  -->  00:03:13,470
If the node has only a single child then we can simply promote the child to take place of its parent

51

00:03:14,560  -->  00:03:15,120
meaning.

52

00:03:15,150  -->  00:03:21,420
If we look back here we can think of this that instead of removing 25 altogether where removing it but

53

00:03:21,420  -->  00:03:27,640
still just replacing it with 35 or removing this person or this node one up and replacing it.

54

00:03:27,870  -->  00:03:31,410
If the note to be deleted only has one child.

55

00:03:31,710  -->  00:03:35,730
So let's go and jump to the code to discuss the second case because it's a little too much to fit here

56

00:03:35,730  -->  00:03:38,940
on the screen in a presentation.

57

00:03:38,940  -->  00:03:40,910
So here we are at the binary search tree.

58

00:03:40,950  -->  00:03:47,010
We just go ahead and scroll down here and go all the way to the Remove method in the binary search tree

59

00:03:47,530  -->  00:03:49,990
and we can zoom in on this guy.

60

00:03:50,400  -->  00:03:53,150
All we're gonna be discussing is this section.

61

00:03:53,190  -->  00:03:55,470
The node only has one child.

62

00:03:55,560  -->  00:03:59,380
So here we just do a couple of checks and we essentially do the following.

63

00:03:59,400  -->  00:04:04,680
If the current note is a left child then we only need to update the parent reference to the left child

64

00:04:04,710  -->  00:04:10,230
to the point so to point to the parent not of the current node and then update that left child reference

65

00:04:10,230  -->  00:04:13,260
of the parent to point to the current notes left child.

66

00:04:13,260  -->  00:04:17,550
Just that replacing switch if the current notice a right child.

67

00:04:17,550  -->  00:04:21,810
Do we only need to update the parent reference of the right child to point to the parent of the current

68

00:04:21,810  -->  00:04:26,100
node and then update the right child reference of the parent to point to the current notes.

69

00:04:26,190  -->  00:04:27,300
Right child.

70

00:04:27,360  -->  00:04:31,480
So we're just exchanging the pointings pointers here as we are moving node.

71

00:04:31,920  -->  00:04:35,420
If that current node has no parent then it's actually the root.

72

00:04:35,520  -->  00:04:41,070
In this case we just replaced the key payload left child and write child data by calling replace no

73

00:04:41,070  -->  00:04:44,910
data method which is going to be over here.

74

00:04:44,910  -->  00:04:52,560
Replace no data or replace no data depending if it's the left child here or if the current node even

75

00:04:52,560  -->  00:04:54,090
has the left child.

76

00:04:54,450  -->  00:04:59,370
So this is the case for if it only has one child you can go to review this code but you can essentially

77

00:04:59,370  -->  00:05:05,940
just think about it as joining the parents and the children to each other as we basically pop out one

78

00:05:05,940  -->  00:05:09,320
of those nodes the figure explains it probably a little more clearly.

79

00:05:09,480  -->  00:05:12,670
But here's the actual code that implements this.

80

00:05:12,670  -->  00:05:13,110
All right.

81

00:05:13,110  -->  00:05:17,730
Again it's quite a bit of code so just go through it slowly if you want to understand every single step

82

00:05:17,730  -->  00:05:19,350
that's going on here.

83

00:05:19,990  -->  00:05:25,320
Let's go ahead and jump back to the third case of the leading item OK.

84

00:05:25,480  -->  00:05:29,430
The third case is that the note to be deleted has two children.

85

00:05:29,470  -->  00:05:35,140
So imagine here we wanted to delete the five note that has two children will have to choose a successor

86

00:05:35,170  -->  00:05:37,140
for it.

87

00:05:37,360  -->  00:05:40,320
That means this third case is the most difficult case to handle.

88

00:05:40,360  -->  00:05:43,220
And it may be one of the most common cases which is unfortunate.

89

00:05:43,330  -->  00:05:47,080
So we need to think about how to handle this specific case.

90

00:05:47,080  -->  00:05:51,790
It's the node has two children then it is unlikely that we can simply promote one of them to take the

91

00:05:51,790  -->  00:05:53,080
notes place.

92

00:05:53,110  -->  00:05:59,550
We can however search the tree for a node that can be used to replace the ones scheduled for deletion

93

00:05:59,560  -->  00:06:00,990
.

94

00:06:01,000  -->  00:06:07,770
So what we need to do is we need a no that will preserve the binary search tree relationship that BSEE

95

00:06:07,780  -->  00:06:14,110
property for both the existing left and right subtrees the No that will do this is the No that has a

96

00:06:14,110  -->  00:06:16,180
next largest key and tree.

97

00:06:16,180  -->  00:06:22,010
We call this no the successor and we will look at a way to find a successor shortly.

98

00:06:22,400  -->  00:06:27,260
Well let's talk about that successor the successor is guaranteed to have no more than one child.

99

00:06:27,460  -->  00:06:32,510
So we know how to remove it using the two cases for deletion that we just discussed implemented.

100

00:06:32,860  -->  00:06:37,630
Once that successor has been removed we simply put it in the tree in place of the note to be deleted

101

00:06:37,620  -->  00:06:39,090
.

102

00:06:39,120  -->  00:06:44,440
Notice that we make use of the helper methods in the actual Jupiter note book Code find successor and

103

00:06:44,490  -->  00:06:48,500
Feinman to find that successor to remove the successor.

104

00:06:48,550  -->  00:06:54,220
We make use of the method splice out the reason we use splice out is that it goes directly to the node

105

00:06:54,220  -->  00:06:58,240
we want to splice out and makes the right changes.

106

00:06:58,240  -->  00:07:00,860
So here we have just a little snippet of that.

107

00:07:01,090  -->  00:07:03,140
And in this case you can see the helper functions.

108

00:07:03,160  -->  00:07:09,220
So we say if current node has both children meaning that's deleting nodes K-Street has both children

109

00:07:09,730  -->  00:07:15,350
reset the variable UCSC for the successor to the current node find successor.

110

00:07:15,580  -->  00:07:19,810
So we're gonna have to use that find successor method in order to find the appropriate note to replace

111

00:07:20,230  -->  00:07:26,890
and if we go back real quick to the figure we discussed here you can see in this particular case the

112

00:07:26,880  -->  00:07:34,660
successor was 7 and 7 works because it's has two which is less than 7 on the left and 11 which is greater

113

00:07:34,660  -->  00:07:35,970
than 7 on the right.

114

00:07:36,040  -->  00:07:40,460
So it's the immediate successor if we go down from 5 that works here.

115

00:07:40,960  -->  00:07:43,630
OK let's go ahead and check this out.

116

00:07:44,080  -->  00:07:45,730
In the Jupiter notebook.

117

00:07:46,140  -->  00:07:50,770
So I'm going to jump to find success from in the Jupiter notebook.

118

00:07:50,760  -->  00:07:56,890
OK so here we are at that fine successor method if you can see here the code to find successors just

119

00:07:56,880  -->  00:08:02,050
a method of that tree node class and this code that makes use of the same properties of binary search

120

00:08:02,050  -->  00:08:07,900
trees that causin in order traversal to print out the nodes in the tree from smallest to largest.

121

00:08:08,450  -->  00:08:14,020
OK there's going to be three cases to consider when looking for the successor one if the node has a

122

00:08:14,010  -->  00:08:18,350
right child then the successor is the smallest key in the right tree.

123

00:08:18,630  -->  00:08:19,820
So that's what's happening here.

124

00:08:19,870  -->  00:08:25,170
If we have a right child the successor is going to be fine demen off that right child and that right

125

00:08:25,190  -->  00:08:32,610
subtree if the node has no right child and is the left child of its parent then the parent is the successor

126

00:08:33,310  -->  00:08:39,550
if to notice the right child of its parent in itself has no right child then the successor to this node

127

00:08:39,580  -->  00:08:44,020
is the successor of its parent excluding this node.

128

00:08:44,010  -->  00:08:48,790
The first condition is the only one that matters for us when deleting a note from a binary search tree

129

00:08:48,800  -->  00:08:49,080
.

130

00:08:49,360  -->  00:08:55,750
However define success or method has other uses that we're going to explore later on the find Dimin

131

00:08:55,750  -->  00:09:02,800
method if we scroll down here is called to find the minimum key in a subtree using what we know about

132

00:09:02,800  -->  00:09:08,800
the BSEE property we can convince ourselves that the minimum value key and any binary search tree is

133

00:09:08,800  -->  00:09:11,440
simply the leftmost child of the tree.

134

00:09:11,470  -->  00:09:15,780
Therefore this find the main method simply follows the left child references.

135

00:09:15,820  -->  00:09:22,830
Each note of the subtree until it reaches a node that no longer has a left child.

136

00:09:22,990  -->  00:09:27,640
All right with that being said we just have a few more methods to cover so let's go ahead and look at

137

00:09:27,630  -->  00:09:29,370
them.

138

00:09:29,710  -->  00:09:30,250
OK.

139

00:09:30,420  -->  00:09:35,950
One last method if we need to look at one last interface method for the binary search tree.

140

00:09:35,980  -->  00:09:41,020
And that's because suppose that we would like to simply iterate over all the keys in the tree in order

141

00:09:41,020  -->  00:09:41,620
.

142

00:09:41,740  -->  00:09:47,150
This is definitely something we've done already in dictionaries so why not trees.

143

00:09:47,470  -->  00:09:52,660
You already know how to traverse a binary tree in order using the in order traversal algorithm we discussed

144

00:09:52,720  -->  00:09:54,510
earlier in the section.

145

00:09:54,520  -->  00:10:00,460
However writing an iterator requires a bit more work since an iterator should return only one node each

146

00:10:00,460  -->  00:10:03,530
time the iterator is called.

147

00:10:03,580  -->  00:10:04,770
So here's the method.

148

00:10:04,790  -->  00:10:11,030
The special method that we can use in Python provides us with a powerful function to use and create

149

00:10:11,040  -->  00:10:12,190
an iterator.

150

00:10:12,210  -->  00:10:14,020
The function is called a yield.

151

00:10:14,130  -->  00:10:17,920
Yield is similar to return in that it returns a value to the caller.

152

00:10:17,910  -->  00:10:24,010
However if you're familiar of generators or iterators in Python yield also takes the additional step

153

00:10:24,180  -->  00:10:29,700
of freezing the state of the function so that the next time the function is called it continues executing

154

00:10:29,710  -->  00:10:32,550
from the exact point it left off earlier.

155

00:10:32,620  -->  00:10:36,180
Go ahead and search for iterators versus generators in Python.

156

00:10:36,220  -->  00:10:42,910
If you want more information on this yield keyword but for our situation here what we really care about

157

00:10:43,030  -->  00:10:46,500
is that takes that additional step of freezing the state of the function.

158

00:10:46,620  -->  00:10:52,730
So next time you call yield it just continues executing from the exact point it left off earlier.

159

00:10:52,840  -->  00:10:59,380
Functions that create objects that can be iterated are called those generator functions.

160

00:10:59,380  -->  00:11:02,950
Here's the code for in order iterator of a binary tree.

161

00:11:03,220  -->  00:11:08,500
And if you look at this code carefully at first glance you might think that the code is not recursive

162

00:11:08,500  -->  00:11:09,040
.

163

00:11:09,070  -->  00:11:15,840
However remember that this underscores underscore itor underscore underscore method overrides that for

164

00:11:15,930  -->  00:11:18,860
x in operation for iteration.

165

00:11:19,090  -->  00:11:25,990
So it really is recursive because it is recursive retreat node instances the underscore underscore special

166

00:11:26,250  -->  00:11:32,100
method is defined in that tree node class which you can check in your Jupiter notebook.

167

00:11:32,110  -->  00:11:37,120
Go ahead and review this code in the Jupiter note book in the larger picture of how to iterate through

168

00:11:37,120  -->  00:11:41,850
the tree and make sure you review the in order traversal algorithm.

169

00:11:41,860  -->  00:11:43,340
For this to be really clear.

170

00:11:43,680  -->  00:11:46,530
But I'll let you go ahead and read this on your own thread.

171

00:11:46,570  -->  00:11:52,230
Jupiter notebook and really take your time with it and keep in mind that it actually is recursive because

172

00:11:52,230  -->  00:11:56,560
of the way we're using this special method.

173

00:11:56,640  -->  00:11:58,430
All right we've covered a lot of ground.

174

00:11:58,480  -->  00:12:03,400
Make sure to review the Jupiter notebook and review the wikipedia article in binary search trees.

175

00:12:03,390  -->  00:12:10,300
As far as implementing a binary search tree it's going to be pretty rare for us to implement something

176

00:12:10,330  -->  00:12:12,240
as thoroughly as we just did here.

177

00:12:12,490  -->  00:12:18,590
But you may be asked to implement your own traversal algorithms in order etc..

178

00:12:18,790  -->  00:12:24,150
So up next we'll have some interview problems to reflect some common trick questions that you might

179

00:12:24,150  -->  00:12:27,640
find in a tree interview setting.

180

00:12:27,660  -->  00:12:29,510
All right thanks everyone.

181

00:12:29,560  -->  00:12:31,680
Again make sure you read the Jupiter note book.

182

00:12:31,680  -->  00:12:36,220
The Wikipedia article on binary search trees and the two lectures here.

183

00:12:36,370  -->  00:12:40,360
The part 1 in part 2 to really understand binary search trees.

184

00:12:40,380  -->  00:12:42,870
Thanks and I'll see you at the next lecture.
