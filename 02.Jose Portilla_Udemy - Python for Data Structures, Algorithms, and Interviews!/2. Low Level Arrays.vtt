WEBVTT
1

00:00:01.260  -->  00:00:07.740
Hello everyone and welcome to the low level array lecture in this lecture we're going to be going over

2

00:00:08.520  -->  00:00:15.720
basically how computers store information on a low level civil focus on computer memory how we have

3

00:00:15.720  -->  00:00:17.040
memory addresses.

4

00:00:17.070  -->  00:00:21.980
So how a computer can actually keep track of where information is stored.

5

00:00:21.990  -->  00:00:27.540
We'll have units of memory such as bits and bytes and learning how memory is retrieved.

6

00:00:27.540  -->  00:00:31.240
So just a quick note the next few slides are a little text heavy.

7

00:00:31.260  -->  00:00:36.240
But as we continue on we'll see more and more picture examples of what we're actually talking about

8

00:00:36.250  -->  00:00:36.700
.

9

00:00:37.170  -->  00:00:38.940
So it's going and continue.

10

00:00:39.690  -->  00:00:46.400
So in order to accurately describe the way Python represents the sequence types we're going to have

11

00:00:46.390  -->  00:00:50.020
to learn about this low level computer architecture.

12

00:00:50.130  -->  00:00:56.910
So the primary memory of a computer is composed of bits of information and the bits are typically grouped

13

00:00:56.910  -->  00:01:01.800
into larger units that depend on Usually the precise system architecture.

14

00:01:01.830  -->  00:01:06.040
But a typical unit is a byte which is equivalent to eight bits.

15

00:01:06.240  -->  00:01:10.890
And so a computer system will have a huge number of bytes and memory and to keep track of what information

16

00:01:10.890  -->  00:01:16.240
is stored and what byte the computer uses in abstraction known as a memory address.

17

00:01:16.470  -->  00:01:22.720
And in effect each byte of memory is associated with a unique number that serves as its address.

18

00:01:22.740  -->  00:01:29.660
So for instance you might have byte number 2 1 1 2 1 4 4 versus byte number 2 1 4 7.

19

00:01:29.820  -->  00:01:36.180
And in that way the computer system can refer to the data and the memory addresses are typically coordinated

20

00:01:36.180  -->  00:01:39.190
with the physical layout of the memory system.

21

00:01:39.210  -->  00:01:42.200
So let's go ahead and see kind of a drawing example of that.

22

00:01:42.420  -->  00:01:47.120
So this is usually how we represent a low level computer memory.

23

00:01:47.630  -->  00:01:50.930
It's individual bytes with consecutive addresses.

24

00:01:51.410  -->  00:01:51.940
OK.

25

00:01:52.080  -->  00:02:01.260
So despite the sequential nature of the numbering system loops the computer hardware is designed in

26

00:02:01.260  -->  00:02:07.350
theory so that any byte of the main memory can be efficiently accessed based upon its memory address

27

00:02:07.350  -->  00:02:07.830
.

28

00:02:07.830  -->  00:02:13.470
So in this sense we can say that a computer's main memory performs as a random access memory.

29

00:02:13.570  -->  00:02:21.630
Our am and that is to say it's just as easy to retrieve let's say byte number 8 6 7 5 3 0 9 as it is

30

00:02:21.630  -->  00:02:24.600
to retrieve byte number three or nine.

31

00:02:24.780  -->  00:02:31.920
So each individual byte of memory can be stored or retrieved in order one time.

32

00:02:31.920  -->  00:02:40.230
So in constant time and in general a programming language keeps track of the association between an

33

00:02:40.230  -->  00:02:44.580
identifier and the memory address in which the associated value is stored.

34

00:02:44.580  -->  00:02:51.450
So you for example might have an identifier x might be associated with one value stored in memory while

35

00:02:51.660  -->  00:02:57.270
Y is associate of another value stored in memory and a common programming task is to keep track of a

36

00:02:57.270  -->  00:02:59.170
sequence of related objects.

37

00:02:59.190  -->  00:03:04.470
For example if you're making a video game and you want to keep track of the top 10 scores for that game

38

00:03:05.040  -->  00:03:10.860
rather than use 10 different variables for that task you'd prefer to use a single name for the group

39

00:03:10.950  -->  00:03:16.680
and then use index numbers to refer to each of those high scores within that group.

40

00:03:17.550  -->  00:03:20.150
Ok on to next slide.

41

00:03:20.850  -->  00:03:27.000
So a group of related variables can be stored one after another in a contiguous portion of the computer's

42

00:03:27.000  -->  00:03:30.440
memory and we can then note that representation as an array.

43

00:03:30.450  -->  00:03:32.360
So that's what we're really talking about.

44

00:03:32.760  -->  00:03:39.300
So let's go ahead and see a more tangible example such as a text string stored as an ordered sequence

45

00:03:39.300  -->  00:03:45.000
of individual characters and something to note here is that Python internally represents each Unicode

46

00:03:45.000  -->  00:03:49.500
character with 16 bits or two bytes for each character.

47

00:03:49.500  -->  00:03:51.900
So we actually diagram it out.

48

00:03:51.900  -->  00:03:54.440
It looks like that.

49

00:03:54.480  -->  00:04:05.220
So here we have our bits 16 of them and since each Unicode character with 16 bits needs two bytes for

50

00:04:05.220  -->  00:04:06.380
the character.

51

00:04:06.510  -->  00:04:12.030
If we have a sample string so we have a six character string here such a sample it would be stored in

52

00:04:12.030  -->  00:04:14.110
12 consecutive bytes of memory.

53

00:04:14.340  -->  00:04:24.150
Since each Unicode character is taking two bytes or 16 bits since two times eight is 16.

54

00:04:24.760  -->  00:04:28.040
OK so what's up next.

55

00:04:28.050  -->  00:04:29.700
Just some basic terminology.

56

00:04:29.700  -->  00:04:34.930
We have an array here of six characters in each location within the array.

57

00:04:35.010  -->  00:04:40.830
We can call a cell and the integer index can be used to describe its location.

58

00:04:41.490  -->  00:04:48.810
So for example in this figure the cell of the array of index 4 has the contents L and it's stored in

59

00:04:48.810  -->  00:04:57.590
bytes to 1 to 5 4 and 2 1 to 5 5 of memory so something that's important to know is that each cell of

60

00:04:57.580  -->  00:05:00.800
an array must use the same number of bytes.

61

00:05:00.930  -->  00:05:06.680
And it's this requirement is what allows an arbitrary cell of the array or any randomly chosen cell

62

00:05:06.990  -->  00:05:13.860
or any randomly accessed cell of the array to be accessed in constant time based on its index.

63

00:05:13.860  -->  00:05:21.640
So in particular if we know the memory address at which an array starts and the number of bytes per

64

00:05:21.650  -->  00:05:22.480
elements.

65

00:05:22.490  -->  00:05:28.650
So in this case to for a Unicode character and the desired index within the array then the appropriate

66

00:05:28.640  -->  00:05:35.550
memory address can be computed using something like Star Plus the cell size times the index.

67

00:05:35.550  -->  00:05:43.220
So by this formula since the cell at index 0 begins precisely at the start of the array the at index

68

00:05:43.230  -->  00:05:46.580
1 begins precisely as a cell size.

69

00:05:46.570  -->  00:05:49.940
Bytes beyond the start of the array and so on.

70

00:05:49.940  -->  00:05:57.420
So in order to fleshed out a little more some numbers the cell of this figure cell 4 begins at memory

71

00:05:57.420  -->  00:06:08.820
location 2 1 4 6 plus 2 times 4 which is 2 1 4 6 Plus 8 which is 2 1 5 4 and we can see here that indeed

72

00:06:08.830  -->  00:06:12.280
the lower letter L begins at 2 1 5 4.

73

00:06:12.560  -->  00:06:20.410
So I got that by just saying our star is 2 1 4 6 and I'm adding the cell size which is 2.

74

00:06:20.400  -->  00:06:26.540
In this case Reason two bytes per Unicode character and times 4 which is the index I want to achieve

75

00:06:26.990  -->  00:06:27.910
or access.

76

00:06:27.930  -->  00:06:29.040
Excuse me.

77

00:06:29.050  -->  00:06:34.130
And that's going to be two and four six times two plus two times four which is eight.

78

00:06:34.130  -->  00:06:41.670
So two and four six plus eight brings us to 1 5 4 and that's how I can access index for there or the

79

00:06:41.660  -->  00:06:45.010
letter L.

80

00:06:45.240  -->  00:06:47.630
So that's the low level thinking.

81

00:06:48.200  -->  00:06:53.300
But usually we're thinking on a higher level abstraction and basic abstraction is what we're really

82

00:06:53.310  -->  00:06:58.520
going to use for real world discussions when we're discussing the interview problems we really won't

83

00:06:58.520  -->  00:07:03.980
be talking about those bits and bytes we'll be talking about real world real world abstraction levels

84

00:07:03.990  -->  00:07:04.080
.

85

00:07:04.110  -->  00:07:09.480
This higher level or are we just saying we have this sample string here and the indexes are 0 1 2 3

86

00:07:09.480  -->  00:07:16.250
4 and 5 we won't be worrying about cell size or bytes per elements.

87

00:07:17.310  -->  00:07:17.940
OK.

88

00:07:18.380  -->  00:07:25.280
So moving along the last topic for this lecture is going to be a referential array and how arrays can

89

00:07:25.280  -->  00:07:27.090
use object references.

90

00:07:27.440  -->  00:07:32.760
So it's a pretty important topic and it's going to seem maybe a little confusing at first but at the

91

00:07:32.750  -->  00:07:36.830
end we're going to drive it home with a bunch of examples and it should be pretty clear to you what

92

00:07:36.930  -->  00:07:40.170
the array is doing by referencing.

93

00:07:40.200  -->  00:07:46.810
So let's imagine we have an example we have 100 student names with associated ID numbers.

94

00:07:46.820  -->  00:07:50.080
So we have a student name let's say Renee.

95

00:07:50.150  -->  00:07:52.620
Another student named Joseph we have Janet Jonas.

96

00:07:52.620  -->  00:07:54.030
Helen in Virginia.

97

00:07:54.290  -->  00:08:00.260
And each of those students has an ID number with them 0 1 2 3 4 5.

98

00:08:00.440  -->  00:08:07.550
So you might be considering using an array based structure to maintain the names of the students currently

99

00:08:07.560  -->  00:08:10.130
assigned to the ID numbers.

100

00:08:10.130  -->  00:08:18.750
So in python we would just use a list of names in brackets and we want to represent this list with an

101

00:08:18.750  -->  00:08:19.290
array.

102

00:08:19.500  -->  00:08:25.640
But remember we must adhere to the requirement that each cell of the array uses the same number of bytes

103

00:08:25.640  -->  00:08:26.150
.

104

00:08:26.310  -->  00:08:30.300
And yet the elements are strings and strings naturally have different lengths.

105

00:08:30.360  -->  00:08:37.830
So we could attempt to reserve enough space for each cell to hold the maximum length string not just

106

00:08:37.840  -->  00:08:41.690
that currently stored strings but of any string we might ever want to store.

107

00:08:41.690  -->  00:08:47.360
So a maximum length of any possible name the matter how long your name is.

108

00:08:47.850  -->  00:08:49.830
But that would actually be kind of wasteful.

109

00:08:49.830  -->  00:08:55.050
We'd be using a lot of space almost preemptively in case a name popped up.

110

00:08:55.070  -->  00:08:59.510
So on our last example we saw the word sample used.

111

00:08:59.510  -->  00:09:05.370
But in this case we'd have to kind of set aside bytes of information for names so we don't know how

112

00:09:05.370  -->  00:09:06.520
long they're going to be.

113

00:09:06.840  -->  00:09:12.920
So instead of doing that well we're going to do is making an array in use object references.

114

00:09:12.950  -->  00:09:17.650
So let's go in and see a diagram of what that looks like.

115

00:09:17.660  -->  00:09:22.260
So here we can see that each element is a reference to the object.

116

00:09:22.310  -->  00:09:26.650
So we have index 0 referencing the object that string Renee.

117

00:09:27.360  -->  00:09:33.970
And we have a list now of names where the index is referencing an object.

118

00:09:33.990  -->  00:09:39.990
So although the relative size of the individual elements may vary the number of bits used to store the

119

00:09:39.990  -->  00:09:42.940
memory address of each element is fixed.

120

00:09:43.010  -->  00:09:50.330
And in this way Python can support that constant time axis that order 1 to a list or tuple element based

121

00:09:50.340  -->  00:09:52.680
on its index.

122

00:09:52.670  -->  00:09:59.730
So in this figure we characterize this list of strings that are names of the students and it's more

123

00:09:59.730  -->  00:10:06.620
likely that we would be able to manage this using that list of references.

124

00:10:07.290  -->  00:10:16.010
OK so let's go and see some more examples of referencing objects to the list so the idea that listen

125

00:10:16.010  -->  00:10:22.760
to polls are essentially referential structures is pretty significant to the semantics of these objects

126

00:10:22.790  -->  00:10:24.070
classes.

127

00:10:24.110  -->  00:10:30.770
So a single list instance may include multiple references to the same objects as elements of the list

128

00:10:30.790  -->  00:10:31.060
.

129

00:10:31.460  -->  00:10:36.740
And it's possible for a single object to be an element of two or more lists and we'll see what that

130

00:10:36.740  -->  00:10:37.850
looks like in a diagram.

131

00:10:37.850  -->  00:10:38.780
Just a second.

132

00:10:39.260  -->  00:10:44.430
So we can have two lists simply store references back to the same object.

133

00:10:44.450  -->  00:10:49.820
So an example of this is maybe when you're slicing a list the result looks like a new list instance

134

00:10:50.180  -->  00:10:55.280
but that new list actually has references to the same elements that are in the original list.

135

00:10:55.300  -->  00:10:58.340
So who's going to see what that looks like.

136

00:10:58.340  -->  00:11:03.700
So here we've computed the slice of a list here on the bottom a list called primes.

137

00:11:03.710  -->  00:11:05.600
And it's just the prime numbers.

138

00:11:05.600  -->  00:11:07.400
Notice how each of these indexes.

139

00:11:07.420  -->  00:11:13.790
0 1 2 3 4 up to 7 is referencing some prime integer.

140

00:11:14.300  -->  00:11:15.730
And then if we say temp.

141

00:11:15.770  -->  00:11:19.730
Some new list equals primes 3 through 6.

142

00:11:19.790  -->  00:11:24.920
This new temp list this temporary list is referencing the same elements.

143

00:11:24.920  -->  00:11:27.950
Here are the same objects.

144

00:11:28.310  -->  00:11:34.010
So we're not actually creating new objects we're just referencing them when we do this slice of the

145

00:11:34.010  -->  00:11:35.340
list.

146

00:11:36.130  -->  00:11:41.390
OK so what if we do some sort of maybe a reassignments.

147

00:11:41.390  -->  00:11:46.280
So in this case when the elements of the list are immutable objects and since integers are immutable

148

00:11:47.120  -->  00:11:52.100
the fact that the two lists share elements isn't really significant as neither the list can cause a

149

00:11:52.100  -->  00:11:54.080
change to the shared object.

150

00:11:54.560  -->  00:12:00.330
So for example I said temp of two is equal to 15.

151

00:12:00.350  -->  00:12:02.860
So here is a temp of 2 is equal to 15.

152

00:12:03.110  -->  00:12:09.730
What I'm actually doing is just changing the existing reference here.

153

00:12:10.130  -->  00:12:14.690
So I'm not changing the actual integer object so I didn't change 13.

154

00:12:14.840  -->  00:12:21.710
I just pointed to the index to on the template to another object.

155

00:12:21.710  -->  00:12:22.450
OK.

156

00:12:22.970  -->  00:12:28.550
And so this same type of semantics here demonstrated when you're making a new list as a copy of an existing

157

00:12:28.550  -->  00:12:29.620
one.

158

00:12:29.630  -->  00:12:35.200
So if you're using a syntax such as what I have here in bold make maybe you make a list.

159

00:12:35.420  -->  00:12:37.050
You have a new list.

160

00:12:37.070  -->  00:12:43.670
They are in play calling back up and use sort of equal to list of primes which you're actually doing

161

00:12:43.670  -->  00:12:49.370
is just producing a new list that's a shallow copy in that it references all the same elements as in

162

00:12:49.370  -->  00:12:50.450
the first list.

163

00:12:50.600  -->  00:12:57.470
You're not actually duplicating those original objects you're just duplicating a list that references

164

00:12:57.470  -->  00:12:59.400
those same objects.

165

00:13:00.200  -->  00:13:00.820
OK.

166

00:13:01.010  -->  00:13:05.870
And if you wanted the contents of the list maybe like they were immutable type so you're referencing

167

00:13:06.950  -->  00:13:08.820
a list to a list.

168

00:13:09.200  -->  00:13:15.050
You could make what's called the deep copy meaning a new list with new elements and that can be produced

169

00:13:15.050  -->  00:13:19.240
by using the deep copy function from the copy module in Python.

170

00:13:19.790  -->  00:13:25.790
Main takeaway here is that if you were to make a new list in a normal manner you would just be making

171

00:13:25.790  -->  00:13:31.490
a shallow copy and that it's referencing the same elements as the first list.

172

00:13:31.490  -->  00:13:35.930
So in order to really show this will kind of do a more extreme example.

173

00:13:35.990  -->  00:13:38.870
So a lot of times in Python.

174

00:13:39.570  -->  00:13:41.880
And I just added an asterix notation here.

175

00:13:41.900  -->  00:13:47.750
So a lot of times in Python you'll see a list initiated like this you'll have an element 0 and then

176

00:13:47.750  -->  00:13:49.560
say times 8.

177

00:13:49.580  -->  00:13:55.150
So that's actually doing as you're saying all eight cells reference the same objects.

178

00:13:55.160  -->  00:14:01.880
If every list here counters each of these cells is a reference to the same object you're not actually

179

00:14:01.880  -->  00:14:11.380
making 8 integer objects you're referencing all to the same zero number there.

180

00:14:11.390  -->  00:14:19.310
So at a first glance you may think this is a little alarming but what we rely on is the fact that that

181

00:14:19.310  -->  00:14:21.780
reference integer is immutable.

182

00:14:21.800  -->  00:14:29.460
So even if you have a command such as taking counter's index too and adding 1 to it something like this

183

00:14:29.460  -->  00:14:29.480
.

184

00:14:29.480  -->  00:14:36.080
So you say counters two plus equals one that does not technically change that value of the existing

185

00:14:36.140  -->  00:14:37.940
integer instance.

186

00:14:37.940  -->  00:14:46.190
What it does it just computes a new integer with value 0 plus 1 and then set cell number two to reference

187

00:14:46.190  -->  00:14:51.890
that newly computed value and then the resulting figuration looks like what we have here in the Strine

188

00:14:51.890  -->  00:14:53.600
.

189

00:14:53.600  -->  00:15:02.240
So really the takeaway here is how each of these index are in the season the cells and then the list

190

00:15:02.300  -->  00:15:09.020
is actually just referencing some objects and depending on how we make our copies we could just be making

191

00:15:09.020  -->  00:15:14.300
a copy of those references not of the objects themselves.

192

00:15:14.750  -->  00:15:15.590
OK.

193

00:15:16.190  -->  00:15:24.000
So last diagram example I want to show you is if you're doing something such as extends the X10 command

194

00:15:24.010  -->  00:15:27.430
is used to add all mints from one list to the end of another.

195

00:15:28.010  -->  00:15:33.160
But you should note that the extended list does not receive copies of those elements.

196

00:15:33.210  -->  00:15:40.060
Instead what it's receiving the references to those elements and so here we have a diagram kind of portraying

197

00:15:40.070  -->  00:15:41.210
that effect.

198

00:15:41.210  -->  00:15:47.960
So if I were to say this list primes two that list from the beginning we have indexes zero of 3:07 and

199

00:15:47.960  -->  00:15:50.800
numbers the prime numbers to 3:19.

200

00:15:50.900  -->  00:15:56.640
If I extend it with let's say another list that's three elements long extras.

201

00:15:56.870  -->  00:16:03.680
What I'm actually doing is I'm just adding the references to the SEC to the first list here the primes

202

00:16:03.680  -->  00:16:04.510
list.

203

00:16:04.700  -->  00:16:09.070
And that's really the main takeaway that I'm adding references.

204

00:16:09.110  -->  00:16:15.320
Each of these cells is really a reference to an object and I can have multiple this with multiple cells

205

00:16:15.380  -->  00:16:18.350
all referencing the same object.

206

00:16:18.920  -->  00:16:20.150
OK.

207

00:16:21.440  -->  00:16:28.040
So just to review of gone over in this section we went over a very basic computer architecture low level

208

00:16:28.040  -->  00:16:35.870
thinking of low level array representation and how bits and bytes can be used in order have constant

209

00:16:35.870  -->  00:16:36.500
time.

210

00:16:36.530  -->  00:16:38.930
Or order one.

211

00:16:39.050  -->  00:16:48.020
Access to any random elements in the array and then we learn about how arrays are able to be referential

212

00:16:48.110  -->  00:16:54.560
and use referencing in order for each cell or index to reference an object in an array.

213

00:16:54.560  -->  00:16:55.410
All right.

214

00:16:55.640  -->  00:17:00.080
So I know we did quite a bit here and we went over quite a bit.

215

00:17:00.620  -->  00:17:05.030
What we're going to do next is learn about dynamic arrays.

216

00:17:05.060  -->  00:17:11.120
Now as far as how this information applies to the interview practice problems really the main takeaway

217

00:17:11.150  -->  00:17:15.520
from a practical perspective is that idea of referencing.

218

00:17:15.560  -->  00:17:21.590
So if you want to play around the more practical perspective of this lecture go ahead and make a couple

219

00:17:21.590  -->  00:17:23.050
of lists.

220

00:17:23.240  -->  00:17:27.150
Use extend and use a pens and then use slices.

221

00:17:27.290  -->  00:17:35.530
Maybe try to edit some of the objects that the list indexes are indices are referencing and make sure

222

00:17:35.530  -->  00:17:41.090
you really understand that if you make a change on one list the other reference on the other list may

223

00:17:41.090  -->  00:17:43.820
or may not get affected depending on how you code it out.

224

00:17:44.150  -->  00:17:44.670
OK.

225

00:17:45.020  -->  00:17:47.890
So that's really where the practical use case comes in here.

226

00:17:47.960  -->  00:17:54.230
That idea of referencing and how slices kind of carry over that reference or how the extend the method

227

00:17:54.230  -->  00:17:59.120
would also carry over that reference and that you're not actually in a sense duplicating or creating

228

00:17:59.870  -->  00:18:03.440
new objects you're just referencing the old ones.

229

00:18:03.440  -->  00:18:05.290
All right thanks.

230

00:18:05.390  -->  00:18:12.140
I know that was kind of a heavy lecture and pretty theoretical but overall it's important to know especially

231

00:18:12.140  -->  00:18:15.630
from a practical perspective that idea of referencing.

232

00:18:15.980  -->  00:18:16.500
All right.

233

00:18:16.910  -->  00:18:19.310
Thanks everyone and I'll see you at the next lecture.

234

00:18:19.320  -->  00:18:22.220
We'll we are going to be discussing dynamic race
