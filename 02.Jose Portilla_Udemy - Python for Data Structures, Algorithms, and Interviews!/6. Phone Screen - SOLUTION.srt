1

00:00:01,110  -->  00:00:06,510
Hello everyone and welcome to the phone screen solution for the social network company mock interview

2

00:00:06,510  -->  00:00:07,740
.

3

00:00:07,740  -->  00:00:12,480
So for this problem you have to remove duplicate characters in a given string keeping only the first

4

00:00:12,480  -->  00:00:13,760
occurrences.

5

00:00:13,770  -->  00:00:18,200
So for example if the input was tree traversal your output would be Tiare space.

6

00:00:18,210  -->  00:00:23,260
Avi s.l as you remove duplicate E's T's and ours.

7

00:00:23,340  -->  00:00:24,330
OK.

8

00:00:24,810  -->  00:00:28,790
So let's go ahead and get started with the solution.

9

00:00:28,800  -->  00:00:33,240
So as we're going through the string we're going to need some sort of data structure to keep track the

10

00:00:33,240  -->  00:00:34,950
characters we've seen so far.

11

00:00:35,130  -->  00:00:38,900
And we also need one that can perform efficient find operations.

12

00:00:39,240  -->  00:00:43,910
So in this case a set data structure perfectly suits our purpose.

13

00:00:44,010  -->  00:00:49,310
It stores keys that provides constant time search for each existence.

14

00:00:49,470  -->  00:00:54,030
So we're going to loop over characters in the string and in each iteration we'll check whether we have

15

00:00:54,030  -->  00:00:56,730
seen the current character before searching the set.

16

00:00:56,730  -->  00:00:58,470
If it's inset then it means you've seen it before.

17

00:00:58,470  -->  00:01:03,630
So we ignore it otherwise we include it in the result and add it to the set keep track for future reference

18

00:01:03,630  -->  00:01:04,180
.

19

00:01:04,230  -->  00:01:05,460
So let's go ahead and code this out.

20

00:01:05,460  -->  00:01:08,100
So it's a bit easier to understand.

21

00:01:09,780  -->  00:01:11,900
Let's go ahead and call our function.

22

00:01:11,940  -->  00:01:17,400
Remove duplicates and will input.

23

00:01:18,030  -->  00:01:28,650
Let's say you just put in put s and then we're going to say results equals an empty list.

24

00:01:28,650  -->  00:01:35,250
And the reason for that is at the end what we're going to do is join that list.

25

00:01:36,010  -->  00:01:38,540
So in Python I can do this here.

26

00:01:38,550  -->  00:01:42,630
There's no space in between these single quotes and it's basically going to join every item in that

27

00:01:42,630  -->  00:01:45,440
list together without a space in between.

28

00:01:45,510  -->  00:01:47,070
I could put anything I want here.

29

00:01:47,190  -->  00:01:52,270
And that would put that whatever symbol or letter or character you put.

30

00:01:52,410  -->  00:01:54,230
So if I wanted to join everything of a comma.

31

00:01:54,270  -->  00:01:56,510
But in this case it's I just want a single string.

32

00:01:56,520  -->  00:02:03,360
I'm just going to join them with no spaces that are going to create another variable called Scene and

33

00:02:03,360  -->  00:02:06,180
I'll set that as an empty set and then here's what we're going to do.

34

00:02:06,180  -->  00:02:09,920
We're going to go for every character in a string.

35

00:02:11,310  -->  00:02:21,530
If that character is not in scene then I'm going to add it scene.

36

00:02:21,600  -->  00:02:32,220
Add that character and then going to take my results and append that character and that's really it

37

00:02:32,220  -->  00:02:33,170
here.

38

00:02:33,210  -->  00:02:38,220
So the time complexity of this algorithm is O N where N is a number of characters in the input string

39

00:02:38,220  -->  00:02:38,910
.

40

00:02:38,910  -->  00:02:45,570
And because set supports in order one or Big O one constant incertain fine.

41

00:02:45,570  -->  00:02:50,330
So this is really the optimal solution and it's a really common string interview question.

42

00:02:50,550  -->  00:02:53,900
So this problem hopefully feels pretty familiar.

43

00:02:53,910  -->  00:02:59,370
There's a similar one asked in the array section of the course and remember that a lot of basic interview

44

00:02:59,370  -->  00:03:02,910
question ideas overlap just a presentation is different.

45

00:03:03,420  -->  00:03:05,940
So again this was a pretty basic problem.

46

00:03:05,940  -->  00:03:07,760
That's why I always use the phone screen.

47

00:03:07,800  -->  00:03:12,900
The main trick or key to this problem was figuring out that a set is a really good way to go.

48

00:03:12,900  -->  00:03:16,670
In this case you just go for every character in that string.

49

00:03:16,680  -->  00:03:22,110
If you haven't seen that character yet so it's not in that set you just add that character to the set

50

00:03:22,410  -->  00:03:25,350
and then result to append that character.

51

00:03:25,490  -->  00:03:32,190
Then at the end at least for Python you can join everything in that list together as a string with this

52

00:03:32,280  -->  00:03:33,490
joint command.

53

00:03:33,810  -->  00:03:34,380
All right.

54

00:03:34,800  -->  00:03:37,290
That's really it for this fun screen solution.

55

00:03:37,290  -->  00:03:39,870
I'll see you at the next lecture with another solution.

56

00:03:39,870  -->  00:03:40,480
Thanks everyone
