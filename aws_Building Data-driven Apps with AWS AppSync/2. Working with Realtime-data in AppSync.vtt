WEBVTT
1
00:00:01.940 --> 00:00:06.040
In this demo, we are going to take a look at subscriptions on AppSync,

2
00:00:06.040 --> 00:00:10.640
and get real‑time notification whenever data changes on our backend.

3
00:00:10.640 --> 00:00:12.390
If we take a look at our Schema,

4
00:00:12.390 --> 00:00:16.430
the API creation wizard already created three subscriptions for our mutations.

5
00:00:16.430 --> 00:00:20.240
We have the onCreateGlobomanticsTasks, onUpdateTasks,

6
00:00:20.240 --> 00:00:21.870
and then the onDeleteTasks.

7
00:00:21.870 --> 00:00:23.580
From our client application,

8
00:00:23.580 --> 00:00:26.610
we are going to subscribe so whenever data changes on the

9
00:00:26.610 --> 00:00:29.440
backend we can update the UI automatically.

10
00:00:29.440 --> 00:00:34.140
Now, let's head to our client application and implement real‑time notifications.

11
00:00:34.140 --> 00:00:35.100
First things first,

12
00:00:35.100 --> 00:00:38.080
we need to define our subscription schemas on the client side,

13
00:00:38.080 --> 00:00:41.140
just like we did with querying and mutating data.

14
00:00:41.140 --> 00:00:43.740
We are going to define the subscriptions under the graphql

15
00:00:43.740 --> 00:00:46.770
folder in the Subscriptions.ts file.

16
00:00:46.770 --> 00:00:51.560
The CreateTasksSubscription is specified as onCreateGlobomanticsTasks,

17
00:00:51.560 --> 00:00:56.740
so we need to specify our query as follows: subscription,

18
00:00:56.740 --> 00:01:01.840
then subscription name, after which we specify the data that we want to receive.

19
00:01:01.840 --> 00:01:05.040
In this case, I'm receiving all the data for the task,

20
00:01:05.040 --> 00:01:10.570
and, as always, we return the parsed QraphQL query using the graphql‑tag helper,

21
00:01:10.570 --> 00:01:11.920
and export the query.

22
00:01:11.920 --> 00:01:16.540
We need to do the same for the update and delete subscription.

23
00:01:16.540 --> 00:01:20.290
The update subscription is called onUpdateGlobomanticsTasks, and

24
00:01:20.290 --> 00:01:22.900
the delete is called onDeleteGlobomanticsTasks.

25
00:01:22.900 --> 00:01:27.500
For all three subscriptions, we are requesting all the properties for the task,

26
00:01:27.500 --> 00:01:31.340
but if we wanted, we can decide to query only the fields that we need.

27
00:01:31.340 --> 00:01:34.490
For example, you might want to decide to only query the ID.

28
00:01:34.490 --> 00:01:36.340
We can do that from here.

29
00:01:36.340 --> 00:01:42.140
Now, let's navigate to the index.ts file and implement our logic.

30
00:01:42.140 --> 00:01:42.600
First,

31
00:01:42.600 --> 00:01:45.110
we need to import the subscription queries to our

32
00:01:45.110 --> 00:01:48.070
index.ts file from our Subscription.ts file.

33
00:01:48.070 --> 00:01:50.340
We are importing the CreateTaskMutation,

34
00:01:50.340 --> 00:01:52.350
UpdateTaskMutation, and the DeleteTaskMutation.

35
00:01:52.350 --> 00:01:56.540
The AppSync client has built‑in support for subscriptions,

36
00:01:56.540 --> 00:01:59.270
and with just a couple of lines we can listen for

37
00:01:59.270 --> 00:02:01.440
real‑time data changes from our backend.

38
00:02:01.440 --> 00:02:03.490
Let's navigate to our application load function

39
00:02:03.490 --> 00:02:05.020
where we create our AppSync client.

40
00:02:05.020 --> 00:02:08.490
To subscribe, use subscribe method on the AppSync client.

41
00:02:08.490 --> 00:02:11.300
As a parameter, we need to specify the query,

42
00:02:11.300 --> 00:02:13.760
so for subscribing to the taskCreatedSubscription,

43
00:02:13.760 --> 00:02:19.340
we do client.subscribe and provide the createTaskSubscription query.

44
00:02:19.340 --> 00:02:21.440
These will return an observable,

45
00:02:21.440 --> 00:02:23.890
to which we can subscribe and listen for changes.

46
00:02:23.890 --> 00:02:29.040
Now, to get the changes we need again to subscribe on the taskCreatedObservable,

47
00:02:29.040 --> 00:02:32.960
and inside the subscribe we provide the next function so any time a

48
00:02:32.960 --> 00:02:35.340
change is detected the next function is called.

49
00:02:35.340 --> 00:02:39.440
As a parameter, it will have input a newly created task,

50
00:02:39.440 --> 00:02:42.780
and in the body of the function we are outputting the newly created

51
00:02:42.780 --> 00:02:45.740
task to the console and then loading all the tasks.

52
00:02:45.740 --> 00:02:48.110
We could just append this new task to the list of

53
00:02:48.110 --> 00:02:50.580
tasks and display it in our UI.

54
00:02:50.580 --> 00:02:52.450
For this demo, to keep it simple,

55
00:02:52.450 --> 00:02:54.820
I'm going to load all the tasks from the server by

56
00:02:54.820 --> 00:02:56.840
calling the loadTasks function.

57
00:02:56.840 --> 00:03:00.270
Now let's listen for the update and delete subscriptions.

58
00:03:00.270 --> 00:03:03.080
Just like we did for the createTaskSubscription,

59
00:03:03.080 --> 00:03:06.240
we do the same for the update and the delete,

60
00:03:06.240 --> 00:03:08.450
except we pass in different queries.

61
00:03:08.450 --> 00:03:11.200
Now, let's save the changes and test our application.

62
00:03:11.200 --> 00:03:14.450
As soon as our application loads, if we look at the Network tab,

63
00:03:14.450 --> 00:03:16.940
we can see that the websocket connection is made from our

64
00:03:16.940 --> 00:03:19.250
client application to the AppSync backend.

65
00:03:19.250 --> 00:03:24.040
This will be responsible for sending real‑time data to our application.

66
00:03:24.040 --> 00:03:27.940
Now, let's open a second incognito tab and try to make changes.

67
00:03:27.940 --> 00:03:30.220
As soon as we make changes on one side,

68
00:03:30.220 --> 00:03:32.740
the changes will be displayed on the other.

69
00:03:32.740 --> 00:03:35.840
Now let's add a new test.

70
00:03:35.840 --> 00:03:39.510
Let's name it realtime test, and as soon as we create it,

71
00:03:39.510 --> 00:03:45.140
it should be displayed on the other tab.

72
00:03:45.140 --> 00:03:47.360
And indeed, as soon as we created the test,

73
00:03:47.360 --> 00:03:51.940
the other tab got the real‑time update notification and updated its content.

74
00:03:51.940 --> 00:03:54.940
Now let's try to update our test.

75
00:03:54.940 --> 00:04:00.940
Let's name it realtime test 2.

76
00:04:00.940 --> 00:04:04.440
And as soon as we save, we can see the change on the other tab.

77
00:04:04.440 --> 00:04:10.140
Now, finally, let's delete our test,

78
00:04:10.140 --> 00:04:13.170
and now the test is removed from the other tab as well.

79
00:04:13.170 --> 00:04:16.940
AppSync makes it very easy to subscribe to changes on our backend.

80
00:04:16.940 --> 00:04:21.220
We can add subscriptions to all our mutations on the backend or to only the ones

81
00:04:21.220 --> 00:04:25.040
that we need real‑time information when they are triggered,

82
00:04:25.040 --> 00:04:33.000
and then we see this notification on the client applications in real time so we can have the best user experience.

