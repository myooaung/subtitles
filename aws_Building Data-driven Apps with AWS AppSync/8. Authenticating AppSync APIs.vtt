WEBVTT
1
00:00:01.640 --> 00:00:05.640
Up until now, we have used the API key for authentication.

2
00:00:05.640 --> 00:00:06.510
While that works,

3
00:00:06.510 --> 00:00:11.440
API keys are mostly used to authenticate applications rather than users.

4
00:00:11.440 --> 00:00:14.070
Our Task Manager application will have real users,

5
00:00:14.070 --> 00:00:16.400
so we need to authenticate them.

6
00:00:16.400 --> 00:00:20.920
To select authorization mode, we need to navigate to our API settings,

7
00:00:20.920 --> 00:00:23.540
and in the Default authorization mode.

8
00:00:23.540 --> 00:00:28.340
Here we have the API key selected, but we have a couple of authorization modes.

9
00:00:28.340 --> 00:00:31.940
We can use AWS Identity and Management console,

10
00:00:31.940 --> 00:00:36.640
we can use OpenID Connect or Amazon Cognito User Pools.

11
00:00:36.640 --> 00:00:40.440
For this demo, we are going to use Amazon Cognito User Pools.

12
00:00:40.440 --> 00:00:44.750
We are not going to cover configuring Amazon Cognito User Pools in this course.

13
00:00:44.750 --> 00:00:47.160
If you want to learn more about Amazon Cognito,

14
00:00:47.160 --> 00:00:48.370
check my other course,

15
00:00:48.370 --> 00:00:52.070
Implementing User Access and Authentication Using Amazon Cognito,

16
00:00:52.070 --> 00:00:57.040
which covers in detail configuring Cognito User Pools and client applications.

17
00:00:57.040 --> 00:01:01.940
Once we choose Amazon Cognito User Pools, then we need to select the region.

18
00:01:01.940 --> 00:01:04.160
My region is US‑East‑1.

19
00:01:04.160 --> 00:01:06.260
Next, we need to select the pool.

20
00:01:06.260 --> 00:01:10.440
For the Default action, we can choose either ALLOW or DENY.

21
00:01:10.440 --> 00:01:11.250
For this demo,

22
00:01:11.250 --> 00:01:13.710
we are going to choose ALLOW so everyone who is

23
00:01:13.710 --> 00:01:16.850
authenticated will be allowed to access the data.

24
00:01:16.850 --> 00:01:19.140
There will not be secondary checks.

25
00:01:19.140 --> 00:01:22.580
Now, let's save the changes and navigate back to our client application.

26
00:01:22.580 --> 00:01:24.260
In our client application,

27
00:01:24.260 --> 00:01:28.010
we need to configure our AWS‑APPSYNC client so we can

28
00:01:28.010 --> 00:01:30.040
set the current authenticated user.

29
00:01:30.040 --> 00:01:33.120
First thing that we need to do is configure the Amazon Cognito to

30
00:01:33.120 --> 00:01:35.740
support authentication with our application.

31
00:01:35.740 --> 00:01:38.730
Again, If you want to go into details, check out my course,

32
00:01:38.730 --> 00:01:41.860
Implementing User Access and Authentication with Amazon Cognito,

33
00:01:41.860 --> 00:01:47.440
as we will not cover the details, but we are going to do a quick walkthrough.

34
00:01:47.440 --> 00:01:52.140
First we import the Authentication and Hub modules from the aws‑amplify.

35
00:01:52.140 --> 00:01:52.770
Next,

36
00:01:52.770 --> 00:01:55.640
we configure the authentication module with the user pool

37
00:01:55.640 --> 00:01:58.470
details from our Globomantics user pool.

38
00:01:58.470 --> 00:02:02.220
Then, using the Hub module provided by AWS Amplify,

39
00:02:02.220 --> 00:02:04.640
we'll listen for authentication events.

40
00:02:04.640 --> 00:02:06.950
Every time a user is signed in, signed out,

41
00:02:06.950 --> 00:02:10.040
we'll load the current user and display it in the UI.

42
00:02:10.040 --> 00:02:13.760
The rest of the logic here is UI manipulation to show the logged‑in user.

43
00:02:13.760 --> 00:02:17.780
If you are using the exercise files to adapt this to your user pool,

44
00:02:17.780 --> 00:02:23.140
you will need to change the values in the authentication configuration here.

45
00:02:23.140 --> 00:02:23.570
Now,

46
00:02:23.570 --> 00:02:26.420
let's configure our APPSYNC client to support

47
00:02:26.420 --> 00:02:28.840
community user pools authentication.

48
00:02:28.840 --> 00:02:32.740
Here, the getUser function returns the current logged‑in user.

49
00:02:32.740 --> 00:02:34.890
If the current logged‑in user is null,

50
00:02:34.890 --> 00:02:38.550
then we are not going to make a request since we are not logged in.

51
00:02:38.550 --> 00:02:41.670
Using the authentication module from the current session,

52
00:02:41.670 --> 00:02:44.510
we can get the access token using the getAccessToken,

53
00:02:44.510 --> 00:02:48.020
from which we can get the JSON web token using the getJwtToken

54
00:02:48.020 --> 00:02:51.250
function before we use the API key authentication.

55
00:02:51.250 --> 00:02:55.940
So, in the type, we use the specify API key. Now in the type we

56
00:02:55.940 --> 00:02:58.640
need to specify AMAZON COGNITO USER POOLS.

57
00:02:58.640 --> 00:03:01.340
We can use authentication type enumeration,

58
00:03:01.340 --> 00:03:03.190
which is found in the APPSYNC library,

59
00:03:03.190 --> 00:03:07.340
and then we can quickly get Amazon Cognito User Pools.

60
00:03:07.340 --> 00:03:10.960
And for a value we need to specify the JSON Web Token,

61
00:03:10.960 --> 00:03:12.740
after which we load the tasks.

62
00:03:12.740 --> 00:03:17.340
Now, let's save the changes and try this in action.

63
00:03:17.340 --> 00:03:20.540
We can see if we reload the page no request is made.

64
00:03:20.540 --> 00:03:22.740
That's because we are not logged in.

65
00:03:22.740 --> 00:03:24.860
We can log in using the Login button.

66
00:03:24.860 --> 00:03:31.840
This will redirect us to the hosted UI where we can log in.

67
00:03:31.840 --> 00:03:34.830
And once we are logged in, now we can see our tasks.

68
00:03:34.830 --> 00:03:38.010
Here, if we inspect the GraphQL query that we just made,

69
00:03:38.010 --> 00:03:45.000
we can see the authorization header that was specified, which is our access token for the current logged‑in user.

