1
00:00:01,940 --> 00:00:07,740
The AppSync client has caching capabilities powered by the Amplify store.

2
00:00:07,740 --> 00:00:12,560
Whenever we make changes to the data, that data is stored in a local cache,

3
00:00:12,560 --> 00:00:16,140
which we can utilize using fetch policies.

4
00:00:16,140 --> 00:00:19,840
When we queried our data, we specified the cache policy to network only.

5
00:00:19,840 --> 00:00:24,820
This always queries the backend to get new data and then stores that

6
00:00:24,820 --> 00:00:28,640
data into the local cache that is provided by Amplify.

7
00:00:28,640 --> 00:00:33,440
But, we also have other fetch policies that we could utilize with our client.

8
00:00:33,440 --> 00:00:38,440
Another option that we have is cache first, which is a default policy.

9
00:00:38,440 --> 00:00:42,740
This will not query the backend if there is data in the local cache.

10
00:00:42,740 --> 00:00:44,400
Whenever we mutate data,

11
00:00:44,400 --> 00:00:48,640
the cache is updated automatically with the latest data from the server.

12
00:00:48,640 --> 00:00:51,410
This option is good for preserving network calls,

13
00:00:51,410 --> 00:00:55,640
but we always risk displaying all data on our application.

14
00:00:55,640 --> 00:00:59,840
Another fetch policy that we can specify is no cache.

15
00:00:59,840 --> 00:01:02,640
This is the same as network only,

16
00:01:02,640 --> 00:01:05,840
which will skip the cache and make a network call.

17
00:01:05,840 --> 00:01:09,980
But, the main difference here is that no data will be stored on the local cache.

18
00:01:09,980 --> 00:01:14,240
This option is very useful when we don't want to store any data locally.

19
00:01:14,240 --> 00:01:17,450
That can be for security reason or for any other reasons

20
00:01:17,450 --> 00:01:19,640
that you might have for your application.

21
00:01:19,640 --> 00:01:22,190
If we want to only display cached information,

22
00:01:22,190 --> 00:01:24,780
then we can use the cache only Policy.

23
00:01:24,780 --> 00:01:28,640
This will avoid making any network calls whatsoever,

24
00:01:28,640 --> 00:01:31,140
even if there is no data in the cache.

25
00:01:31,140 --> 00:01:34,340
Most likely, you won't ever need to use this option,

26
00:01:34,340 --> 00:01:37,640
but it's there if any use cases demand it.

27
00:01:37,640 --> 00:01:41,740
For example, if you want to load all the cache data on a client machine,

28
00:01:41,740 --> 00:01:45,280
then you could use this option, as this will make sure that only

29
00:01:45,280 --> 00:01:48,450
data from the cache is returned; and finally,

30
00:01:48,450 --> 00:01:51,340
we have cache and network policy.

31
00:01:51,340 --> 00:01:55,600
This option is a hybrid between cache only and network only.

32
00:01:55,600 --> 00:01:59,240
It's very useful for displaying data that changes frequently.

33
00:01:59,240 --> 00:02:02,390
It will return the data that is in the cache and also make a

34
00:02:02,390 --> 00:02:05,140
network call to get the latest information.

35
00:02:05,140 --> 00:02:09,210
This policy cannot be used with the query function, because the query function

36
00:02:09,210 --> 00:02:14,740
returns one result, but this policy is meant to return multiple results. Once

37
00:02:14,740 --> 00:02:18,390
it returns the result from local cache, and then it makes the network calls,

38
00:02:18,390 --> 00:02:20,740
and then returns those results as well.

39
00:02:20,740 --> 00:02:24,950
To be able to use this policy, we need to use a watchQuery function. In

40
00:02:24,950 --> 00:02:28,100
our loadTasks function where we query all the data, we need to change

41
00:02:28,100 --> 00:02:37,340
it, so, we use the watchQuery function.

42
00:02:37,340 --> 00:02:40,480
The watchQuery function takes in the same biometers as our query

43
00:02:40,480 --> 00:02:44,650
function, but, it outputs an observable to which we can subscribe for

44
00:02:44,650 --> 00:02:50,140
changes. To subscribe for changes, we use the subscribe function, and

45
00:02:50,140 --> 00:02:53,450
then on the next function inside the subscribe, we implement our

46
00:02:53,450 --> 00:02:57,980
logic. Just like we did for querying data, we load the data that was

47
00:02:57,980 --> 00:02:59,740
returned in the UI.

48
00:02:59,740 --> 00:03:02,400
The difference here is that the watchQuery will call

49
00:03:02,400 --> 00:03:04,540
our observable multiple times.

50
00:03:04,540 --> 00:03:08,040
First, it will check the cache and return the data from the cache,

51
00:03:08,040 --> 00:03:12,000
after which it will return the data from the network call, here, while

52
00:03:12,000 --> 00:03:15,440
logging the result in the console so we can see the results.

53
00:03:15,440 --> 00:03:21,040
Let's run our application and see what happens.

54
00:03:21,040 --> 00:03:24,440
We can see in the console that we receive two results.

55
00:03:24,440 --> 00:03:29,040
The first one has no data because our cache was empty,

56
00:03:29,040 --> 00:03:32,640
and has a property called loading, which is set to true.

57
00:03:32,640 --> 00:03:36,770
That's because it's still retrieving data from a server, and then the

58
00:03:36,770 --> 00:03:41,450
second time our observable was called, now it has data, and has a

59
00:03:41,450 --> 00:03:45,970
property load into false, as it's not retrieving any data anymore. Let's

60
00:03:45,970 --> 00:03:51,810
clear the console and make another call. We can quickly make another

61
00:03:51,810 --> 00:03:58,380
call using the refresh button, which will call the load task function, and,

62
00:03:58,380 --> 00:04:01,580
as we can see in the console, our observable was called two

63
00:04:01,580 --> 00:04:07,300
times. The first time, it got data from cache, and this time

64
00:04:07,300 --> 00:04:08,890
around there was data in the cache,

65
00:04:08,890 --> 00:04:12,400
so it displayed it right away, and also the second

66
00:04:12,400 --> 00:04:14,940
time, it got data from the server.

67
00:04:14,940 --> 00:04:18,760
The data that we got from the server is used to update the cache.

68
00:04:18,760 --> 00:04:22,040
So the next time we get data from a cache is the latest.

69
00:04:22,040 --> 00:04:25,910
Using this feature enables us to provide our users right away with the data

70
00:04:25,910 --> 00:04:30,480
that is stored in the cache, and when the network call has finished, we

71
00:04:30,480 --> 00:04:37,000
display the latest information from the server, so our application will be very responsive.

