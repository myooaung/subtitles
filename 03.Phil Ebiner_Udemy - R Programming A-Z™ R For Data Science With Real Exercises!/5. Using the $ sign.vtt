WEBVTT
1

00:00:02.460  -->  00:00:06.990
Hello and welcome back to the course on

2

00:00:06.990  -->  00:00:08.820
R programming. In today's tutorial,

3

00:00:08.820  -->  00:00:11.250
we're talking about the dollar sign.

4

00:00:11.250  -->  00:00:13.950
So what is it all about and what does

5

00:00:13.950  -->  00:00:15.900
that operator do? Well we'll find out

6

00:00:15.900  -->  00:00:18.330
just now, let's create a new section in

7

00:00:18.330  -->  00:00:22.050
our code and here we'll say using the

8

00:00:22.050  -->  00:00:24.000
dollar sign.

9

00:00:24.000  -->  00:00:26.340
Alright so first of all, let's look at

10

00:00:26.340  -->  00:00:27.480
data right

11

00:00:27.480  -->  00:00:30.149
stats, that's quite a lot. Let's learn and

12

00:00:30.149  -->  00:00:31.349
use one of those functions that we

13

00:00:31.349  -->  00:00:34.710
learned previously head stats. So here we

14

00:00:34.710  -->  00:00:37.350
get out first six rows, our top six

15

00:00:37.350  -->  00:00:40.350
rows, great! So how could we

16

00:00:40.350  -->  00:00:43.320
for instance select a row from here? How

17

00:00:43.320  -->  00:00:45.600
could we select this row for instance?

18

00:00:45.600  -->  00:00:48.809
Angola and we want to find the, extract

19

00:00:48.809  -->  00:00:51.089
the birth rate for Angola. While working

20

00:00:51.089  -->  00:00:52.949
for data frame is very similar to

21

00:00:52.949  -->  00:00:55.829
working for matrix, so we would say stats

22

00:00:55.829  -->  00:00:59.219
square brackets and Angola is in the

23

00:00:59.219  -->  00:01:02.730
third row right? So 1, 2 and in which

24

00:01:02.730  -->  00:01:04.980
column, a third column so we would say

25

00:01:04.980  -->  00:01:09.750
Angola 3,3 that would give us 45,985,

26

00:01:09.750  -->  00:01:12.030
there we go. That's the same number that

27

00:01:12.030  -->  00:01:14.520
we were after. Alright what other ways

28

00:01:14.520  -->  00:01:15.090
are there?

29

00:01:15.090  -->  00:01:17.909
Well from our previous section we know

30

00:01:17.909  -->  00:01:19.920
about named objects and we can see that

31

00:01:19.920  -->  00:01:22.890
this is a named object it has these

32

00:01:22.890  -->  00:01:25.740
column names. So we can use the column names,

33

00:01:25.740  -->  00:01:28.049
so we can say third row and then instead

34

00:01:28.049  -->  00:01:30.329
of the number of the column we can say

35

00:01:30.329  -->  00:01:33.450
birth rate right? So we can say birth rate,

36

00:01:33.450  -->  00:01:36.030
if we run that we get the same number

37

00:01:36.030  -->  00:01:39.030
great! Now what we can do is we can stats

38

00:01:39.030  -->  00:01:44.399
basically then three here but then

39

00:01:44.399  -->  00:01:47.310
say Angola, we can't do that.

40

00:01:47.310  -->  00:01:50.490
Why can't we do that? Because of course this

41

00:01:50.490  -->  00:01:53.219
is a column in the data set, it's not the

42

00:01:53.219  -->  00:01:55.979
name of the row, it's just a column the

43

00:01:55.979  -->  00:01:58.890
data if we run that, we'll get an NA

44

00:01:58.890  -->  00:02:01.140
that's not found. The value is not found and

45

00:02:01.140  -->  00:02:03.420
we can't do that because you even though

46

00:02:03.420  -->  00:02:05.399
it looks like they're at the start and

47

00:02:05.399  -->  00:02:06.990
maybe we can use them to index things

48

00:02:06.990  -->  00:02:08.850
actually not just simply a comment, it could

49

00:02:08.850  -->  00:02:10.200
have been on the right, it could have been

50

00:02:10.200  -->  00:02:12.690
anywhere. So you can't do that and that

51

00:02:12.690  -->  00:02:15.720
that makes sense right? Because in a

52

00:02:15.720  -->  00:02:18.840
data frame the rows are numbered and

53

00:02:18.840  -->  00:02:20.370
they don't have names, the columns have

54

00:02:20.370  -->  00:02:22.740
names but rows don't, rows have numbers

55

00:02:22.740  -->  00:02:24.720
and then it's very similar if you think

56

00:02:24.720  -->  00:02:26.280
about it, it's exactly the same as an

57

00:02:26.280  -->  00:02:29.430
excel. Right in Excel you have columns

58

00:02:29.430  -->  00:02:31.920
with names but you don't have names

59

00:02:31.920  -->  00:02:34.650
for rows right? So it totally makes sense

60

00:02:34.650  -->  00:02:36.150
when you think about it that way.

61

00:02:36.150  -->  00:02:37.620
Alright so what are we talking about

62

00:02:37.620  -->  00:02:40.440
today? How what is this dollar sign?

63

00:02:40.440  -->  00:02:42.630
Well the dollar sign is another way to

64

00:02:42.630  -->  00:02:44.970
access your data in a data frame,

65

00:02:44.970  -->  00:02:47.250
dollar sign doesn't work for matrices

66

00:02:47.250  -->  00:02:49.290
but it does work for data frames. So what you

67

00:02:49.290  -->  00:02:51.600
would do is you would say stats and you

68

00:02:51.600  -->  00:02:54.450
would type in dollar sign and then you

69

00:02:54.450  -->  00:02:56.910
can select any one of your columns so

70

00:02:56.910  -->  00:03:00.450
let's say internet users, you see it's even,

71

00:03:00.450  -->  00:03:02.250
it's giving me a pop-up, so I can select

72

00:03:02.250  -->  00:03:04.530
like that or just click enter and what

73

00:03:04.530  -->  00:03:06.870
that will do if I run this now, it will

74

00:03:06.870  -->  00:03:09.150
just return me this whole column of

75

00:03:09.150  -->  00:03:12.000
internet users. So let's run that and you can

76

00:03:12.000  -->  00:03:14.970
see that it's just a huge vector, it's

77

00:03:14.970  -->  00:03:17.100
returned me a vector with all of this

78

00:03:17.100  -->  00:03:19.500
information. So it's basically extracted that

79

00:03:19.500  -->  00:03:22.320
vector and what I can do now is I can

80

00:03:22.320  -->  00:03:24.630
find a value that vector let's say I

81

00:03:24.630  -->  00:03:27.450
want to access the second row in the

82

00:03:27.450  -->  00:03:29.010
data frame that would become the

83

00:03:29.010  -->  00:03:30.600
second value in the vector and I would

84

00:03:30.600  -->  00:03:32.880
just look at it like that right? So it's

85

00:03:32.880  -->  00:03:35.700
5.9 if I look it back to my data set

86

00:03:35.700  -->  00:03:39.150
you'll see second row 5.9 so that's the

87

00:03:39.150  -->  00:03:40.980
internet users in Afghanistan.

88

00:03:40.980  -->  00:03:44.130
Ok so basically we've extracted a whole

89

00:03:44.130  -->  00:03:46.560
column from this data set and that is

90

00:03:46.560  -->  00:03:48.330
very similar with that's exactly the

91

00:03:48.330  -->  00:03:52.080
same thing as we used to do remember we

92

00:03:52.080  -->  00:03:54.570
would say comma not nothing right so

93

00:03:54.570  -->  00:03:56.760
that means we want all the rows and then

94

00:03:56.760  -->  00:03:58.830
we would use the name of the column or

95

00:03:58.830  -->  00:04:00.600
the number of the column in quotation

96

00:04:00.600  -->  00:04:02.610
marks right? Same thing we get the same

97

00:04:02.610  -->  00:04:05.280
result so basically this operation is

98

00:04:05.280  -->  00:04:08.280
identical to this operation right? So

99

00:04:08.280  -->  00:04:09.810
it's just a more convenient way, you can

100

00:04:09.810  -->  00:04:11.549
see that putting a dollar sign and then

101

00:04:11.549  -->  00:04:13.110
typing the name of the column is more

102

00:04:13.110  -->  00:04:14.640
convenient than typing in all these

103

00:04:14.640  -->  00:04:17.580
square brackets and so that is just one

104

00:04:17.580  -->  00:04:19.440
of the ways you would use the dollar

105

00:04:19.440  -->  00:04:21.900
sign so to extract a vector and access

106

00:04:21.900  -->  00:04:23.640
the value this is not the most common

107

00:04:23.640  -->  00:04:26.940
usage of the dollar sign and it's just

108

00:04:26.940  -->  00:04:29.200
to kind of help you get your head around

109

00:04:29.200  -->  00:04:30.910
what's going on here that basically

110

00:04:30.910  -->  00:04:32.830
dollar sign specifies that the columns

111

00:04:32.830  -->  00:04:34.300
that you want and you'll see throughout this

112

00:04:34.300  -->  00:04:36.430
course that the dollar sign is very handy

113

00:04:36.430  -->  00:04:37.780
when working with data frames and

114

00:04:37.780  -->  00:04:39.820
we'll be using it a lot and you will see

115

00:04:39.820  -->  00:04:42.310
it a lot in R. So we'll get used to it through

116

00:04:42.310  -->  00:04:44.110
time but for now it's just good

117

00:04:44.110  -->  00:04:45.550
that we have this understanding and I

118

00:04:45.550  -->  00:04:46.690
just wanted to show you one more

119

00:04:46.690  -->  00:04:49.540
application of the dollar sign before we

120

00:04:49.540  -->  00:04:51.520
move on to the next tutorial, remember in

121

00:04:51.520  -->  00:04:52.900
the previous tutorial we talked about

122

00:04:52.900  -->  00:04:55.750
factors so if I run this line with them

123

00:04:55.750  -->  00:04:58.330
or STR, so the structure of the data

124

00:04:58.330  -->  00:05:00.100
frame you'll see that here we've got

125

00:05:00.100  -->  00:05:02.980
factors right with levels but here from

126

00:05:02.980  -->  00:05:04.690
here we couldn't tell what are the

127

00:05:04.690  -->  00:05:06.070
factors. We know there's four of them and

128

00:05:06.070  -->  00:05:07.360
we know that one of them is high-income

129

00:05:07.360  -->  00:05:09.520
what are the other factors here?

130

00:05:09.520  -->  00:05:11.020
Well there's a function that can help

131

00:05:11.020  -->  00:05:12.670
you with that and the function is called

132

00:05:12.670  -->  00:05:15.280
levels, pretty straightforward isn't it?

133

00:05:15.280  -->  00:05:18.040
Because it says here with four levels so

134

00:05:18.040  -->  00:05:19.840
you can just basically copy that word

135

00:05:19.840  -->  00:05:21.430
from here and then there's your function

136

00:05:21.430  -->  00:05:23.260
don't even need to remember it and

137

00:05:23.260  -->  00:05:26.740
levels for the factors or you need to

138

00:05:26.740  -->  00:05:28.870
supply the name of the column right? So

139

00:05:28.870  -->  00:05:31.330
you would say stats and now you need to

140

00:05:31.330  -->  00:05:33.670
somehow get to the column to feed it to

141

00:05:33.670  -->  00:05:35.260
this function because you can't tell you

142

00:05:35.260  -->  00:05:36.970
the levels for a whole data frame,

143

00:05:36.970  -->  00:05:38.320
you have to say which column you're

144

00:05:38.320  -->  00:05:40.180
interested in. How do they get to the column?

145

00:05:40.180  -->  00:05:42.220
Well easy, we know the dollar sign now

146

00:05:42.220  -->  00:05:45.010
and we'll just say dollar sign and income

147

00:05:45.010  -->  00:05:47.110
group and now we'll run this line and

148

00:05:47.110  -->  00:05:49.210
you can see now it prints out the

149

00:05:49.210  -->  00:05:50.740
factors. It actually puts them into a

150

00:05:50.740  -->  00:05:53.170
vector so you can then assign this to a

151

00:05:53.170  -->  00:05:54.970
object if you want and create a new

152

00:05:54.970  -->  00:05:56.740
vector with these four values but

153

00:05:56.740  -->  00:05:58.000
basically we can see them on the screen,

154

00:05:58.000  -->  00:06:00.820
high-income, low-income, lower-middle income

155

00:06:00.820  -->  00:06:02.350
and upper-middle income.

156

00:06:02.350  -->  00:06:04.810
There we go that's how you use the level

157

00:06:04.810  -->  00:06:06.370
function and most important that's how

158

00:06:06.370  -->  00:06:08.200
you use the dollar sign as you can see

159

00:06:08.200  -->  00:06:10.300
here it's already very quick much more

160

00:06:10.300  -->  00:06:12.610
quicker and then typing this up. Okay

161

00:06:12.610  -->  00:06:13.630
this brings us to the end of today's

162

00:06:13.630  -->  00:06:15.370
tutorial and I look forward to seeing

163

00:06:15.370  -->  00:06:16.120
you next time,

164

00:06:16.120  -->  00:06:28.109
until then happy coding.
