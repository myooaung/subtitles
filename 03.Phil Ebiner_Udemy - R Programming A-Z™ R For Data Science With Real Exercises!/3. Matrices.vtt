WEBVTT
1

00:00:00.000  -->  00:00:06.930
Hello and welcome back to the course in

2

00:00:06.930  -->  00:00:08.580
R programming and today we're talking

3

00:00:08.580  -->  00:00:10.200
about matrices and you're probably

4

00:00:10.200  -->  00:00:11.219
wondering,

5

00:00:11.219  -->  00:00:13.769
Kirill why are matrices so important that we

6

00:00:13.769  -->  00:00:15.480
have to devote a whole section of the

7

00:00:15.480  -->  00:00:17.220
course to this topic?

8

00:00:17.220  -->  00:00:19.350
Well the answer to this question was

9

00:00:19.350  -->  00:00:21.210
actually in the previous tutorial. As you

10

00:00:21.210  -->  00:00:23.550
could see, even the data for

11

00:00:23.550  -->  00:00:26.279
basketball players careers is presented

12

00:00:26.279  -->  00:00:30.300
to us in table format and in R tables

13

00:00:30.300  -->  00:00:33.899
are stored in matrices and that is how

14

00:00:33.899  -->  00:00:35.850
the world the data is most of the time

15

00:00:35.850  -->  00:00:37.800
it's stored in table format and if we

16

00:00:37.800  -->  00:00:39.570
want to know how to work with it and

17

00:00:39.570  -->  00:00:41.760
inevitably we will need to because we're

18

00:00:41.760  -->  00:00:44.550
data scientist or data analyst and

19

00:00:44.550  -->  00:00:46.260
so if we want to know how to operate

20

00:00:46.260  -->  00:00:49.379
with tables we will need to know how

21

00:00:49.379  -->  00:00:51.390
matrices are structured in R and how

22

00:00:51.390  -->  00:00:54.360
they operate and moreover as you will

23

00:00:54.360  -->  00:00:56.070
see from further down in the course, there's

24

00:00:56.070  -->  00:00:57.899
another type of object which is called a

25

00:00:57.899  -->  00:01:00.690
data frame. So matrices are also a

26

00:01:00.690  -->  00:01:03.629
stepping stone in order to get to

27

00:01:03.629  -->  00:01:06.420
data frames, so let's dive straight into it. So

28

00:01:06.420  -->  00:01:08.549
what do we know so far? So far we know

29

00:01:08.549  -->  00:01:10.530
how to work with vectors, here's an

30

00:01:10.530  -->  00:01:13.950
example of a five element numeric vector. A

31

00:01:13.950  -->  00:01:16.619
vector has one dimension, now what

32

00:01:16.619  -->  00:01:18.360
happens if we actually want to work with

33

00:01:18.360  -->  00:01:20.340
tables and as we know tables have two

34

00:01:20.340  -->  00:01:23.159
dimensions. They have the number of

35

00:01:23.159  -->  00:01:26.250
columns and they also have rows. So how

36

00:01:26.250  -->  00:01:28.590
do we operate tables in R?

37

00:01:28.590  -->  00:01:30.360
Well here's an example of the table that

38

00:01:30.360  -->  00:01:32.009
has five columns and three rows, let's

39

00:01:32.009  -->  00:01:33.570
start by saying that there's some

40

00:01:33.570  -->  00:01:35.220
data in this table. Let's say this

41

00:01:35.220  -->  00:01:37.950
this number 50 replicated across the

42

00:01:37.950  -->  00:01:40.020
whole table. Now obviously in order to

43

00:01:40.020  -->  00:01:41.250
work with the table we're going to have

44

00:01:41.250  -->  00:01:42.990
to somehow recognize the second

45

00:01:42.990  -->  00:01:45.149
dimension and that's why there's another

46

00:01:45.149  -->  00:01:47.280
set of indexation over here. So we've got

47

00:01:47.280  -->  00:01:48.840
one, two, three, four, five on the top and

48

00:01:48.840  -->  00:01:51.119
one, two, three on the left and so that's

49

00:01:51.119  -->  00:01:52.590
what a matrix looks like in R, so

50

00:01:52.590  -->  00:01:55.290
basically it's just a table. Now because

51

00:01:55.290  -->  00:01:57.990
we have the second set of indices were

52

00:01:57.990  -->  00:01:59.700
inevitably going to run into a problem

53

00:01:59.700  -->  00:02:01.020
and what this problem?

54

00:02:01.020  -->  00:02:03.479
Well let's say we have this matrix and

55

00:02:03.479  -->  00:02:06.060
let's say it has a name it's called A

56

00:02:06.060  -->  00:02:09.690
and let's say we want to somehow get to

57

00:02:09.690  -->  00:02:11.910
this number zero in the matrix.

58

00:02:11.910  -->  00:02:13.680
Inevitably we're going to

59

00:02:13.680  -->  00:02:15.000
run into a problem if we're going to

60

00:02:15.000  -->  00:02:18.030
try to use the methods for indexation

61

00:02:18.030  -->  00:02:19.650
that we know for vectors. Let's have a

62

00:02:19.650  -->  00:02:22.049
look. Let's try calling out this number

63

00:02:22.049  -->  00:02:24.719
zero using the methods that we know for

64

00:02:24.719  -->  00:02:27.510
vectors. Let's say, we will call it using

65

00:02:27.510  -->  00:02:29.879
A4 but that's incorrect right? Because

66

00:02:29.879  -->  00:02:31.739
if you call it using A4 then there's

67

00:02:31.739  -->  00:02:34.409
actually three elements in the fourth

68

00:02:34.409  -->  00:02:36.900
column. So how will R know which one

69

00:02:36.900  -->  00:02:37.950
exactly you want?

70

00:02:37.950  -->  00:02:40.139
So that's not going to work, let's try a

71

00:02:40.139  -->  00:02:42.450
different approach. Let's say A3, but

72

00:02:42.450  -->  00:02:45.090
now how is R going to know, do you mean

73

00:02:45.090  -->  00:02:47.639
the third row or do you mean the third column

74

00:02:47.639  -->  00:02:50.370
and if you mean either than which

75

00:02:50.370  -->  00:02:52.379
element do you actually mean in one of

76

00:02:52.379  -->  00:02:54.510
these? So that's also not going to work

77

00:02:54.510  -->  00:02:55.260
for us.

78

00:02:55.260  -->  00:02:59.730
So the way you index a matrix in R is

79

00:02:59.730  -->  00:03:02.010
you put two numbers in the square

80

00:03:02.010  -->  00:03:05.189
brackets separated by comma. The first

81

00:03:05.189  -->  00:03:07.859
number will mean the row that you want

82

00:03:07.859  -->  00:03:09.540
to look up. So in this case, it will be

83

00:03:09.540  -->  00:03:12.150
the third row and second number will

84

00:03:12.150  -->  00:03:14.219
mean the column that you want to look at

85

00:03:14.219  -->  00:03:16.709
and that will mean the fourth column in

86

00:03:16.709  -->  00:03:18.959
this case and wherever these two cross so

87

00:03:18.959  -->  00:03:21.030
in this case over here at the number

88

00:03:21.030  -->  00:03:22.590
zero, that's exactly the element that

89

00:03:22.590  -->  00:03:25.769
will be returned. So that is how you

90

00:03:25.769  -->  00:03:29.129
index an element inside a matrix.

91

00:03:29.129  -->  00:03:32.579
Ok so that's our indexation and this new

92

00:03:32.579  -->  00:03:34.109
method of indexation is actually going to

93

00:03:34.109  -->  00:03:36.209
bring some new concepts into what we

94

00:03:36.209  -->  00:03:38.459
know. So you see these indices on the

95

00:03:38.459  -->  00:03:39.269
left here,

96

00:03:39.269  -->  00:03:41.760
well in R they're actually represented

97

00:03:41.760  -->  00:03:43.439
in different way. Instead of just one, two,

98

00:03:43.439  -->  00:03:44.189
three,

99

00:03:44.189  -->  00:03:47.370
what we're going to have is one in

100

00:03:47.370  -->  00:03:49.470
square brackets, with a comma, two in square

101

00:03:49.470  -->  00:03:51.269
brackets with a comma and three in square

102

00:03:51.269  -->  00:03:52.259
brackets with a comma.

103

00:03:52.259  -->  00:03:53.939
So what does that mean and why is that

104

00:03:53.939  -->  00:03:55.739
there? Well basically it's the same one,

105

00:03:55.739  -->  00:03:56.519
two, three

106

00:03:56.519  -->  00:03:59.129
but it's just in line with what we now

107

00:03:59.129  -->  00:04:01.709
know and why is that? Well that is

108

00:04:01.709  -->  00:04:04.049
because if you put the letter A in front

109

00:04:04.049  -->  00:04:07.590
of anyone of these, so let's say A1, A2 or

110

00:04:07.590  -->  00:04:09.540
A3, what you'll get is the corresponding

111

00:04:09.540  -->  00:04:13.199
full row. So for instance A[1, ]

112

00:04:13.199  -->  00:04:16.590
because here A[ 3,4 ] meant the

113

00:04:16.590  -->  00:04:18.930
crossing of the third row and the fourth

114

00:04:18.930  -->  00:04:21.930
column but if you say A[1, ]

115

00:04:21.930  -->  00:04:24.960
you mean just the first row not crossing

116

00:04:24.960  -->  00:04:27.210
any of the columns. So basically in R

117

00:04:27.210  -->  00:04:30.720
that is a way to take this whole row

118

00:04:30.720  -->  00:04:32.610
out of the matrix.

119

00:04:32.610  -->  00:04:34.919
There we go, so that's A[1, ]

120

00:04:34.919  -->  00:04:37.139
and same thing goes for the top

121

00:04:37.139  -->  00:04:39.030
indexes over here. Now that we know

122

00:04:39.030  -->  00:04:41.969
how to index inside the matrix. Their

123

00:04:41.969  -->  00:04:43.139
representation is actually going to be

124

00:04:43.139  -->  00:04:45.810
different so instead of 1, 2, 3, 4, 5 we're

125

00:04:45.810  -->  00:04:47.909
going to have brackets comma one,

126

00:04:47.909  -->  00:04:49.710
brackets comma two, brackets comma three,

127

00:04:49.710  -->  00:04:50.819
brackets comma four,

128

00:04:50.819  -->  00:04:52.439
brackets comma five because we know

129

00:04:52.439  -->  00:04:54.300
that the second element inside these

130

00:04:54.300  -->  00:04:57.090
brackets means the number of the column

131

00:04:57.090  -->  00:04:59.129
and that is it's basically the same

132

00:04:59.129  -->  00:05:02.039
1, 2, 3, 4, 5 but it's just reminding you that

133

00:05:02.039  -->  00:05:04.889
if you want to select any one of these

134

00:05:04.889  -->  00:05:07.169
given rows like let's say for instance

135

00:05:07.169  -->  00:05:09.300
a you want to select the fifth row

136

00:05:09.300  -->  00:05:11.550
all you have to do is say A brackets nothing,

137

00:05:11.550  -->  00:05:14.009
so you don't have to put a space

138

00:05:14.009  -->  00:05:16.229
here then comma 5 and then brackets

139

00:05:16.229  -->  00:05:18.060
close in that case you will select

140

00:05:18.060  -->  00:05:21.330
exactly the fifth row. So that is how

141

00:05:21.330  -->  00:05:25.080
indexation in matrices works. Now we're

142

00:05:25.080  -->  00:05:26.729
here we're running a bit ahead of

143

00:05:26.729  -->  00:05:27.389
ourselves

144

00:05:27.389  -->  00:05:29.639
this relates to the topic of subsetting

145

00:05:29.639  -->  00:05:31.229
and we'll talk about subsetting further down

146

00:05:31.229  -->  00:05:33.060
the track but I just wanted to explain

147

00:05:33.060  -->  00:05:36.449
to you, how why exactly these matrices

148

00:05:36.449  -->  00:05:39.330
have a bit of a different style in

149

00:05:39.330  -->  00:05:41.639
representing their indices and that's

150

00:05:41.639  -->  00:05:44.789
exactly why, it is because that's how you

151

00:05:44.789  -->  00:05:47.490
index a matrix or how you get inside the

152

00:05:47.490  -->  00:05:49.650
matrix and that's just they're just basically

153

00:05:49.650  -->  00:05:51.659
reflecting that exact concept.

154

00:05:51.659  -->  00:05:53.969
Ok so that's nearly all on matrices, the

155

00:05:53.969  -->  00:05:55.529
last thing you need to know about them

156

00:05:55.529  -->  00:05:58.560
is that in R, a matrix can only have

157

00:05:58.560  -->  00:06:00.990
elements of the exact same type. So just

158

00:06:00.990  -->  00:06:03.479
like a vector, you cannot put into a

159

00:06:03.479  -->  00:06:05.879
matrix elements of different times so you can't

160

00:06:05.879  -->  00:06:08.039
put a character number for instance into

161

00:06:08.039  -->  00:06:09.960
one matrix. If you tried to do that, then

162

00:06:09.960  -->  00:06:11.580
all numbers will be converted into

163

00:06:11.580  -->  00:06:13.589
characters just like we saw with vectors.

164

00:06:13.589  -->  00:06:16.050
So that's one of the core principles of

165

00:06:16.050  -->  00:06:18.419
matrices and now you know how the

166

00:06:18.419  -->  00:06:21.779
structure and how to also index them and I

167

00:06:21.779  -->  00:06:22.770
look forward to seeing you in the next

168

00:06:22.770  -->  00:06:23.430
tutorial.

169

00:06:23.430  -->  00:06:35.309
Until then, happy coding!
