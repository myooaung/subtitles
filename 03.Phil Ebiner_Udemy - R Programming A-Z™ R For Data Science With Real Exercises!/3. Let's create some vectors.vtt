WEBVTT

1

00:09:24.150  -->  00:09:26.550
to 15 and you can't do the same thing

2

00:09:26.550  -->  00:09:28.770
with the colon. Now that is the main

3

00:09:28.770  -->  00:09:30.330
difference between the sequence and the

4

00:09:30.330  -->  00:09:32.130
colon and plus sequence can be even

5

00:09:32.130  -->  00:09:33.930
more flexibility but we'll explore that

6

00:09:33.930  -->  00:09:37.320
further down the course. Now let's say we

7

00:09:37.320  -->  00:09:39.240
want to save a vector that we generate

8

00:09:39.240  -->  00:09:41.460
the sequence will say is that and we'll

9

00:09:41.460  -->  00:09:43.980
put into the selector a sequence of

10

00:09:43.980  -->  00:09:46.830
numbers from 1 to 15 for step of four

11

00:09:46.830  -->  00:09:49.380
and generate that and let's print that

12

00:09:49.380  -->  00:09:52.680
out as you can see here we've generated

13

00:09:52.680  -->  00:09:56.070
1590 13 and there's no 15 and that is

14

00:09:56.070  -->  00:09:58.200
because that's how sequence works it's a

15

00:09:58.200  -->  00:10:00.300
pretty smart function so it knows that

16

00:10:00.300  -->  00:10:03.960
you want numbers between 1 and 15 and if

17

00:10:03.960  -->  00:10:06.900
you add for on top of 13 you'll get 17

18

00:10:06.900  -->  00:10:09.690
so you kind of get out of that border

19

00:10:09.690  -->  00:10:12.000
that she specified and sequence won't

20

00:10:12.000  -->  00:10:13.500
generate that number so you will always

21

00:10:13.500  -->  00:10:14.880
you're always guaranteed that you will

22

00:10:14.880  -->  00:10:17.250
be between these two numbers even if the

23

00:10:17.250  -->  00:10:21.330
step doesn't fit in perfectly into that

24

00:10:21.330  -->  00:10:23.160
those borders that you've created.

25

00:10:23.160  -->  00:10:25.770
Ok so that was sequence for you. Now

26

00:10:25.770  -->  00:10:28.350
let's look at the last way of creating

27

00:10:28.350  -->  00:10:30.420
vectors that we wanted to color off

28

00:10:30.420  -->  00:10:33.660
today and that is replicate so in order

29

00:10:33.660  -->  00:10:36.420
to replicate we need type in R EP then

30

00:10:36.420  -->  00:10:38.970
we need to specify something that we

31

00:10:38.970  -->  00:10:40.230
want to replicate let's say we want to

32

00:10:40.230  -->  00:10:42.360
replicate number three and we want to

33

00:10:42.360  -->  00:10:45.360
replicate it 50 times so let's run that

34

00:10:45.360  -->  00:10:47.460
what you'll see is the number three has

35

00:10:47.460  -->  00:10:49.710
been replicated 50 times and this is all

36

00:10:49.710  -->  00:10:53.820
one very long vector so I can put in put

37

00:10:53.820  -->  00:10:56.640
this vector into a variable or give it a

38

00:10:56.640  -->  00:11:01.680
name and then also a rep 3, 50 but there

39

00:11:01.680  -->  00:11:04.500
we go so there is d and there's the

40

00:11:04.500  -->  00:11:05.699
vector 12

41

00:11:05.699  -->  00:11:07.589
that's how many elements that has and

42

00:11:07.589  -->  00:11:08.939
they're all the number three

43

00:11:08.939  -->  00:11:11.100
by the way here you can see that there's

44

00:11:11.100  -->  00:11:12.749
a square bracket one which we've been

45

00:11:12.749  -->  00:11:15.389
seen so far all over the place but here

46

00:11:15.389  -->  00:11:17.160
you have square bracket percent what

47

00:11:17.160  -->  00:11:17.939
does that mean?

48

00:11:17.939  -->  00:11:20.249
Well that means that you have 36

49

00:11:20.249  -->  00:11:22.259
elements up to there and then this is

50

00:11:22.259  -->  00:11:24.359
the 37, 38, 39

51

00:11:24.359  -->  00:11:26.429
so basically it will just enumerate them

52

00:11:26.429  -->  00:11:28.439
for you so if i say a hundred you'll see

53

00:11:28.439  -->  00:11:30.419
it will tell you which element you are

54

00:11:30.419  -->  00:11:32.790
looking at the start of that row.

55

00:11:32.790  -->  00:11:35.100
Alright and one last thing I wanted to

56

00:11:35.100  -->  00:11:38.339
show you is actually two last things you

57

00:11:38.339  -->  00:11:42.329
can replicate a character of course so a

58

00:11:42.329  -->  00:11:44.339
for instance and let's say we want to

59

00:11:44.339  -->  00:11:45.629
see it five times

60

00:11:45.629  -->  00:11:48.389
there we go that's a character vector of

61

00:11:48.389  -->  00:11:53.279
5a's and also what you can do is you can

62

00:11:53.279  -->  00:11:56.069
replicate even vector so let's create a

63

00:11:56.069  -->  00:11:58.649
vector X and we'll put two numbers in

64

00:11:58.649  -->  00:12:02.369
there will say 80, 20 and now we want to

65

00:12:02.369  -->  00:12:07.019
replicate x 10x. So there we go now we

66

00:12:07.019  -->  00:12:08.369
have a vector so if we put this into

67

00:12:08.369  -->  00:12:12.600
vector Y now we have a vector of 20

68

00:12:12.600  -->  00:12:15.569
elements of 20 numbers and their 80 20 80

69

00:12:15.569  -->  00:12:18.989
between 80 20 and so on so there we go

70

00:12:18.989  -->  00:12:22.109
that's how you create vectors in R those

71

00:12:22.109  -->  00:12:23.699
are the many different ways when we

72

00:12:23.699  -->  00:12:26.160
talked about was just the combined

73

00:12:26.160  -->  00:12:28.679
function we also talked about the

74

00:12:28.679  -->  00:12:30.749
sequence function, the rep function,

75

00:12:30.749  -->  00:12:33.809
replicate function and we also learned

76

00:12:33.809  -->  00:12:36.929
how to check the type so is America's

77

00:12:36.929  -->  00:12:40.230
integer is double and also is capture

78

00:12:40.230  -->  00:12:42.119
hope you enjoyed this tutorial have a

79

00:12:42.119  -->  00:12:44.069
play around with that practice some

80

00:12:44.069  -->  00:12:46.619
vectors create some vectors that come

81

00:12:46.619  -->  00:12:49.739
into your mind and see how you go see

82

00:12:49.739  -->  00:12:51.629
what different combinations of these

83

00:12:51.629  -->  00:12:54.239
functions you can use and what different

84

00:12:54.239  -->  00:12:56.399
vectors you can create because as always

85

00:12:56.399  -->  00:12:59.100
say programming is about practicing

86

00:12:59.100  -->  00:13:01.379
practicing and practicing again and

87

00:13:01.379  -->  00:13:03.029
experimenting with what you're learning

88

00:13:03.029  -->  00:13:04.589
and I look forward to seeing you next

89

00:13:04.589  -->  00:13:05.220
time.

90

00:13:05.220  -->  00:13:10.330
Until then happy coding.
's see what our town is not true

91

00:03:39.450  -->  00:03:42.600
indeed our does toward this whole vector

92

00:03:42.600  -->  00:03:46.830
as a vector of doubles because it is

93

00:03:46.830  -->  00:03:49.080
anticipating that we will require some

94

00:03:49.080  -->  00:03:51.600
arithmetic operations down the line so

95

00:03:51.600  -->  00:03:53.760
to mix it up let's create a vector of

96

00:03:53.760  -->  00:03:56.970
true integers this time we'll say C and

97

00:03:56.970  -->  00:03:59.010
now we'll put in some integers but

98

00:03:59.010  -->  00:04:01.320
remember to put the store integers an

99

00:04:01.320  -->  00:04:03.390
integer you need to add the letter L on

100

00:04:03.390  -->  00:04:08.459
the end so 12l let's say 243 l and let's

101

00:04:08.459  -->  00:04:12.630
say 0l ok now if we run this code you

102

00:04:12.630  -->  00:04:16.109
will see that here it says int and bear

103

00:04:16.109  -->  00:04:18.090
in mind that this is still also a

104

00:04:18.090  -->  00:04:20.100
numeric vector as well so we can check

105

00:04:20.100  -->  00:04:25.380
that we can say is dot numeric and b2 it

106

00:04:25.380  -->  00:04:27.030
is an American actor and that is because

107

00:04:27.030  -->  00:04:30.060
of what we discussed that a numeric and

108

00:04:30.060  -->  00:04:33.360
conferences both integers and doubles so

109

00:04:33.360  -->  00:04:36.330
now if we check is integer and we check

110

00:04:36.330  -->  00:04:37.290
me too

111

00:04:37.290  -->  00:04:38.850
you'll see that it's true and of course

112

00:04:38.850  -->  00:04:41.850
is double will be false.

113

00:04:41.850  -->  00:04:44.280
Ok so because it is stored as an integer

114

00:04:44.280  -->  00:04:46.139
and that is because we specified that

115

00:04:46.139  -->  00:04:48.540
letter L on and as you can see here the

116

00:04:48.540  -->  00:04:51.210
where L is not in place anymore just

117

00:04:51.210  -->  00:04:53.430
showing that this is indeed just a way

118

00:04:53.430  -->  00:04:56.400
to tell our hottest stories verbal or

119

00:04:56.400  -->  00:04:57.330
these numbers.

120

00:04:57.330  -->  00:04:59.820
ok so let's continue, let's see what else

121

00:04:59.820  -->  00:05:01.560
we can do with vectors.

122

00:05:01.560  -->  00:05:03.210
How about a character vector? We talked

123

00:05:03.210  -->  00:05:04.590
about character pictures in the princess

124

00:05:04.590  -->  00:05:06.570
turtle is create a character picture so

125

00:05:06.570  -->  00:05:09.540
let's say V 3 x3 we can give it any name

126

00:05:09.540  -->  00:05:11.940
actually whatever name you like and

127

00:05:11.940  -->  00:05:15.690
let's put into this vector values C so

128

00:05:15.690  -->  00:05:18.300
that's combined and we'll put those a be

129

00:05:18.300  -->  00:05:21.960
23 that will say hello and that's all

130

00:05:21.960  -->  00:05:24.210
for now so let's maybe make this a

131

00:05:24.210  -->  00:05:27.780
capital and let's run this code so v3

132

00:05:27.780  -->  00:05:30.479
as you can see it has been created it's

133

00:05:30.479  -->  00:05:32.880
a character vector of three elements 123

134

00:05:32.880  -->  00:05:35.130
and it has those elements if I printed

135

00:05:35.130  -->  00:05:37.650
out now, I'll get the character vector.

136

00:05:37.650  -->  00:05:40.410
Awesome and what we can do is we can

137

00:05:40.410  -->  00:05:44.220
check its character v three.

138

00:05:44.220  -->  00:05:47.340
It's true and just for argument's sake

139

00:05:47.340  -->  00:05:51.090
let's check if it's numeric it is not

140

00:05:51.090  -->  00:05:51.840
numeric.

141

00:05:51.840  -->  00:05:53.820
Alright so now let's test that thing

142

00:05:53.820  -->  00:05:56.010
that we talked about that a vector can

143

00:05:56.010  -->  00:05:59.430
only have data elements of the same

144

00:05:59.430  -->  00:06:01.650
basic type so you cannot mix different

145

00:06:01.650  -->  00:06:03.900
types inside one vector which is a very

146

00:06:03.900  -->  00:06:05.940
important thing to remember and also to

147

00:06:05.940  -->  00:06:09.300
understand so let's add that same number

148

00:06:09.300  -->  00:06:12.030
so another number seven right and as we

149

00:06:12.030  -->  00:06:13.860
know from here although it's an integer

150

00:06:13.860  -->  00:06:15.660
will be stored as a double so we expect

151

00:06:15.660  -->  00:06:18.120
that we'll have characters and a double

152

00:06:18.120  -->  00:06:19.770
mastectomy so if we run this vector now

153

00:06:19.770  -->  00:06:22.020
and then we printed out you will see

154

00:06:22.020  -->  00:06:24.390
that the number 7 has actually being

155

00:06:24.390  -->  00:06:26.190
converted to capture and that is because

156

00:06:26.190  -->  00:06:28.380
they cannot convert a character to a

157

00:06:28.380  -->  00:06:30.720
number but it is very simple to convert

158

00:06:30.720  -->  00:06:32.640
a character or a number to a character

159

00:06:32.640  -->  00:06:34.320
all you have to do is just put quotation

160

00:06:34.320  -->  00:06:36.120
marks around it so it's no longer a

161

00:06:36.120  -->  00:06:39.210
number and therefore this vector is

162

00:06:39.210  -->  00:06:40.320
still account

163

00:06:40.320  -->  00:06:41.910
vector which we can check here is the

164

00:06:41.910  -->  00:06:43.470
character actually and it's not a

165

00:06:43.470  -->  00:06:45.840
numeric vector now this is an important

166

00:06:45.840  -->  00:06:47.970
thing to remember because so your boy

167

00:06:47.970  -->  00:06:49.980
situation like this where you try to put

168

00:06:49.980  -->  00:06:52.500
different elements into one vector and

169

00:06:52.500  -->  00:06:54.630
also it is important to understand

170

00:06:54.630  -->  00:06:57.510
because that is like a conceptual

171

00:06:57.510  -->  00:07:00.360
fundamental principle of R. It relies

172

00:07:00.360  -->  00:07:03.390
very heavily on the fact that within a

173

00:07:03.390  -->  00:07:05.490
vector you can only find data elements

174

00:07:05.490  -->  00:07:07.830
of the same basic type and we'll talk

175

00:07:07.830  -->  00:07:10.020
more about this fundamental principle

176

00:07:10.020  -->  00:07:12.150
further down in future tutorials, but for

177

00:07:12.150  -->  00:07:13.950
know, it's good to know and to

178

00:07:13.950  -->  00:07:15.000
remember.

179

00:07:15.000  -->  00:07:16.650
Alright so as you can see creating

180

00:07:16.650  -->  00:07:18.270
vectors isn't that hard

181

00:07:18.270  -->  00:07:20.280
now let's explore what other ways there

182

00:07:20.280  -->  00:07:22.530
are to create vectors but we're going to

183

00:07:22.530  -->  00:07:25.350
discuss two more functions. Two more

184

00:07:25.350  -->  00:07:27.030
functions which are very intuitive and

185

00:07:27.030  -->  00:07:28.440
straightforward one is called the

186

00:07:28.440  -->  00:07:32.370
sequence so seq and then the brackets

187

00:07:32.370  -->  00:07:34.890
after it and I'll just put in the name

188

00:07:34.890  -->  00:07:38.010
here sequence and it's very similar to

189

00:07:38.010  -->  00:07:41.610
the operator which is the colon which

190

00:07:41.610  -->  00:07:44.160
we've been using quite a bit and the

191

00:07:44.160  -->  00:07:47.070
other one is replicate so r EP and it

192

00:07:47.070  -->  00:07:49.260
stands for replicate all right so let's

193

00:07:49.260  -->  00:07:50.370
start with sequence.

194

00:07:50.370  -->  00:07:52.020
Let's say I want to create a sequence of

195

00:07:52.020  -->  00:07:55.320
numbers from 1 to 15 that casing to call

196

00:07:55.320  -->  00:07:57.450
the sequence function and positive the

197

00:07:57.450  -->  00:07:59.670
parameters one common 15 so the start of

198

00:07:59.670  -->  00:08:01.200
the sequence commerce the animal

199

00:08:01.200  -->  00:08:03.360
sequence and if I run this now what

200

00:08:03.360  -->  00:08:05.520
you'll see is that we've got the members

201

00:08:05.520  -->  00:08:08.070

202
1:15 now what does this remind you of?

203

00:08:08.070  -->  00:08:12.060
To remind you of 1 colon 15 this is the

204

00:08:12.060  -->  00:08:14.220
expression that we've used so far in the

205

00:08:14.220  -->  00:08:15.960
previous tutorials to generate a

206

00:08:15.960  -->  00:08:17.940
sequence and as you can see the results

207

00:08:17.940  -->  00:08:20.490
are exactly the same so basically a 1

208

00:08:20.490  -->  00:08:23.700
colon 15 is identical to sequence one

209

00:08:23.700  -->  00:08:26.130
comma 15. In fact it can get a bit

210

00:08:26.130  -->  00:08:29.010
confusing there some of that when I was

211

00:08:29.010  -->  00:08:31.470
learning R, I used to type in 1 colon

212

00:08:31.470  -->  00:08:34.710
15 instead of one comma 15 and it still

213

00:08:34.710  -->  00:08:37.469
works and that confused me a lot because

214

00:08:37.469  -->  00:08:39.719
then I thought then you don't need the

215

00:08:39.719  -->  00:08:41.880
function around it or the comma is

216

00:08:41.880  -->  00:08:46.230
the same as a colon and that was a long

217

00:08:46.230  -->  00:08:49.620
story I really had to take some time and

218

00:08:49.620  -->  00:08:52.710
understanding to forget the head and

219

00:08:52.710  -->  00:08:54.540
find out to remember understand the

220

00:08:54.540  -->  00:08:56.970
correct approach so just remember that

221

00:08:56.970  -->  00:08:59.340
inside function use a comma and then

222

00:08:59.340  -->  00:09:01.470
there's this other fast way using a

223

00:09:01.470  -->  00:09:03.840
colon now so why would you use sequence

224

00:09:03.840  -->  00:09:06.240
if you have the colon version.

225

00:09:06.240  -->  00:09:08.040
Well that is because the sequence gives

226

00:09:08.040  -->  00:09:10.200
you a bit more flexibility with sequins

227

00:09:10.200  -->  00:09:13.620
you can say 12:15 and then you can plus

228

00:09:13.620  -->  00:09:15.180
an additional time at which will be the

229

00:09:15.180  -->  00:09:18.150
steps so i might say 12:15 with the step

230

00:09:18.150  -->  00:09:21.930
of two and that will give me 1 357 so

231

00:09:21.930  -->  00:09:24.150
we'll give me all the odd numbers fr
