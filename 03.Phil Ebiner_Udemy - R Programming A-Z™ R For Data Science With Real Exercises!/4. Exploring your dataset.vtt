WEBVTT
1

00:00:00.000  -->  00:00:07.140
Hello and welcome back to the course in

2

00:00:07.140  -->  00:00:08.820
R programming. In the previous tutorial

3

00:00:08.820  -->  00:00:11.250
we learned how to import data and we

4

00:00:11.250  -->  00:00:14.280
looked at two methods and today we're

5

00:00:14.280  -->  00:00:17.190
going to explore our data set so let's

6

00:00:17.190  -->  00:00:18.600
get straight to it. I'm just going to

7

00:00:18.600  -->  00:00:21.150
continue in the same file and all I'm

8

00:00:21.150  -->  00:00:23.939
going to do is just put a separator here

9

00:00:23.939  -->  00:00:27.000
so there we go that's our file, that's

10

00:00:27.000  -->  00:00:29.490
our data so stats. How would you

11

00:00:29.490  -->  00:00:32.340
explore the data that you have

12

00:00:32.340  -->  00:00:34.469
imported right? How would you go about

13

00:00:34.469  -->  00:00:36.899
exploring it, looks just like that in

14

00:00:36.899  -->  00:00:39.390
here exploring data. Well one way is just

15

00:00:39.390  -->  00:00:43.079
run the line and see what comes up and

16

00:00:43.079  -->  00:00:44.309
just look at your data set over

17

00:00:44.309  -->  00:00:46.500
here but as you can see we have quite a

18

00:00:46.500  -->  00:00:47.820
large data set.

19

00:00:47.820  -->  00:00:50.489
It's over a hundred rows actually, a

20

00:00:50.489  -->  00:00:54.300
hundred ninety five rows and it's like

21

00:00:54.300  -->  00:00:55.739
there's a lot of data to look at

22

00:00:55.739  -->  00:00:57.360
visually and you kind of get lost and

23

00:00:57.360  -->  00:00:59.460
imagine if you had even more columns or

24

00:00:59.460  -->  00:01:02.280
even more rows you'd get more lost.

25

00:01:02.280  -->  00:01:04.290
So what are the ways that we could

26

00:01:04.290  -->  00:01:06.330
explore some data? Well there are a

27

00:01:06.330  -->  00:01:07.650
couple of functions that will come in

28

00:01:07.650  -->  00:01:10.290
handy and the best way to learn these is

29

00:01:10.290  -->  00:01:12.630
to kind of just write them down probably

30

00:01:12.630  -->  00:01:14.130
and then when she would use them a

31

00:01:14.130  -->  00:01:16.200
couple of times on different datasets

32

00:01:16.200  -->  00:01:18.090
then you will remember them because

33

00:01:18.090  -->  00:01:20.009
there is quite a few and you definitely

34

00:01:20.009  -->  00:01:23.280
want to remember them right away but as

35

00:01:23.280  -->  00:01:25.409
you start new projects on and on and on

36

00:01:25.409  -->  00:01:27.869
and you use these functions you will get

37

00:01:27.869  -->  00:01:30.090
used to them. So the first function is nrow,

38

00:01:30.090  -->  00:01:32.430
it's basically just tells you the number

39

00:01:32.430  -->  00:01:35.610
of rows. So 195 and because we have a data

40

00:01:35.610  -->  00:01:37.680
frame right so we always know it'll be a

41

00:01:37.680  -->  00:01:39.750
two-dimensional object, it has some

42

00:01:39.750  -->  00:01:41.579
columns with names and then a number of

43

00:01:41.579  -->  00:01:43.530
rows so in the number of rows can be

44

00:01:43.530  -->  00:01:45.990
important sometimes and especially if

45

00:01:45.990  -->  00:01:48.180
you want to check the backgrounds and

46

00:01:48.180  -->  00:01:50.759
consulting it was very important for us

47

00:01:50.759  -->  00:01:52.710
to always ordered what we're doing

48

00:01:52.710  -->  00:01:55.380
always have a trail and once you've

49

00:01:55.380  -->  00:01:57.450
imported data like we did here, you would

50

00:01:57.450  -->  00:02:00.509
always have to count the rows and like

51

00:02:00.509  -->  00:02:02.820
we mostly did data import them to sequel

52

00:02:02.820  -->  00:02:04.979
and you would have to count the rows and

53

00:02:04.979  -->  00:02:06.299
then actually put a comment like this

54

00:02:06.299  -->  00:02:07.439
saying here,

55

00:02:07.439  -->  00:02:10.229
imported a hundred ninety-five rows, so

56

00:02:10.229  -->  00:02:12.060
for verification so if something goes

57

00:02:12.060  -->  00:02:13.620
wrong you can always come back and check

58

00:02:13.620  -->  00:02:15.480
that actually a

59

00:02:15.480  -->  00:02:17.790
I can see where the mistake was that we

60

00:02:17.790  -->  00:02:19.230
imported less rows than we actually

61

00:02:19.230  -->  00:02:20.670
supplied or something like that. So

62

00:02:20.670  -->  00:02:22.739
always a good thing to do after you've

63

00:02:22.739  -->  00:02:24.390
imported the file check the number of

64

00:02:24.390  -->  00:02:26.580
rows and does it make sense? Is it a

65

00:02:26.580  -->  00:02:27.959
reasonable number of rows of what you

66

00:02:27.959  -->  00:02:31.260
expected? Number of columns, stats, so

67

00:02:31.260  -->  00:02:33.810
here, and once again stats is just a name of an

68

00:02:33.810  -->  00:02:35.129
object, it could have been anything else.

69

00:02:35.129  -->  00:02:37.440
That's what we're supplying to the

70

00:02:37.440  -->  00:02:39.870
function so number of columns is five

71

00:02:39.870  -->  00:02:42.120
and basically yeah we can actually see

72

00:02:42.120  -->  00:02:44.819
that there's five but if there were like

73

00:02:44.819  -->  00:02:47.159
a hundred columns or you you would use

74

00:02:47.159  -->  00:02:50.069
this function to once again assess how

75

00:02:50.069  -->  00:02:51.870
you've imported the data or basically

76

00:02:51.870  -->  00:02:53.250
if it's a new data set that you're not

77

00:02:53.250  -->  00:02:55.290
really familiar with, you might want to

78

00:02:55.290  -->  00:02:56.970
know how many columns there are so you know

79

00:02:56.970  -->  00:03:00.480
what to expect. Next comes a pair of

80

00:03:00.480  -->  00:03:03.450
functions which I will, you always

81

00:03:03.450  -->  00:03:05.609
keep getting this one wrong or

82

00:03:05.609  -->  00:03:07.650
kept getting this one wrong, so it's

83

00:03:07.650  -->  00:03:11.220
called head and what it does it tells

84

00:03:11.220  -->  00:03:14.910
you the top six rows so just basically

85

00:03:14.910  -->  00:03:16.620
if you have a large data sets like we do and

86

00:03:16.620  -->  00:03:18.660
doesn't fit into this screen, if you just

87

00:03:18.660  -->  00:03:20.459
want to look at the top five rows then

88

00:03:20.459  -->  00:03:23.340
you just type in head stats and then you

89

00:03:23.340  -->  00:03:24.989
will see it's all five rows. Why is that convenient?

90

00:03:24.989  -->  00:03:26.730
Well because it actually shows you the

91

00:03:26.730  -->  00:03:29.430
column names and not just by themselves

92

00:03:29.430  -->  00:03:31.230
because it shows the column names and

93

00:03:31.230  -->  00:03:33.120
some sample data right away, so you can

94

00:03:33.120  -->  00:03:34.650
kind of get a feel for what the data set

95

00:03:34.650  -->  00:03:36.690
looks like. The other function that

96

00:03:36.690  -->  00:03:39.209
comes in pair with the previous one is

97

00:03:39.209  -->  00:03:42.419
tail stats and this one shows you the

98

00:03:42.419  -->  00:03:46.650
past, the bottom six rows. So this way,

99

00:03:46.650  -->  00:03:47.910
same thing you see the columns, column names

100

00:03:47.910  -->  00:03:50.609
and you see the bottom six rows. So that's

101

00:03:50.609  -->  00:03:52.739
useful if your data is ordered by

102

00:03:52.739  -->  00:03:55.349
alphabetically like ours is, this is ordered by

103

00:03:55.349  -->  00:03:57.540
country code. So you can see what's at

104

00:03:57.540  -->  00:03:59.819
the bottom and like maybe there's

105

00:03:59.819  -->  00:04:02.040
different things going on here so like

106

00:04:02.040  -->  00:04:03.840
kind of a different sample of the data

107

00:04:03.840  -->  00:04:06.989
and the way to remember it is and I

108

00:04:06.989  -->  00:04:09.120
always kept thinking top because in

109

00:04:09.120  -->  00:04:13.019
sequel, in SQL basically the

110

00:04:13.019  -->  00:04:15.299
function is called top and I always kept

111

00:04:15.299  -->  00:04:16.709
getting along the way to remember it is

112

00:04:16.709  -->  00:04:19.410
think of a fox right? A fox has a head

113

00:04:19.410  -->  00:04:21.389
and a tail, so basically that's what

114

00:04:21.389  -->  00:04:22.919
you're doing, you look at the head and

115

00:04:22.919  -->  00:04:25.140
you look at the tail and it's that's the

116

00:04:25.140  -->  00:04:26.120
way I remembered it

117

00:04:26.120  -->  00:04:29.240
and maybe that will be helpful for you.

118

00:04:29.240  -->  00:04:30.830
Alright and other thing is with these

119

00:04:30.830  -->  00:04:32.660
functions, you can always say comma and

120

00:04:32.660  -->  00:04:35.240
equals whatever 10 and I'll give you

121

00:04:35.240  -->  00:04:39.440
more rows or same thing here and equals

122

00:04:39.440  -->  00:04:43.760
8 gives you eight rows instead of 6. So if you want to see

123

00:04:43.760  -->  00:04:45.380
a bit more than just type in that.

124

00:04:45.380  -->  00:04:47.870
Alright and so what is the next function?

125

00:04:47.870  -->  00:04:50.960
The next function is str and str stands

126

00:04:50.960  -->  00:04:53.660
for structure. So if we're on str and

127

00:04:53.660  -->  00:04:56.389
pass it our data frame, then what

128

00:04:56.389  -->  00:04:59.270
will get back is a quick debrief of this

129

00:04:59.270  -->  00:05:00.710
data frame and what's going on in there

130

00:05:00.710  -->  00:05:02.479
so first we get the number of rows,

131

00:05:02.479  -->  00:05:04.520
195, number of columns

132

00:05:04.520  -->  00:05:07.370
5 and then it tells you a little bit

133

00:05:07.370  -->  00:05:09.770
about every single one of these columns.

134

00:05:09.770  -->  00:05:11.960
So let's have a look at them, so country

135

00:05:11.960  -->  00:05:14.120
name it says factor of a hundred ninety

136

00:05:14.120  -->  00:05:16.160
five levels. Now in order to understand

137

00:05:16.160  -->  00:05:17.990
what a factor is, let's first start with

138

00:05:17.990  -->  00:05:19.490
the income group because it'll be a bit

139

00:05:19.490  -->  00:05:23.090
easier that way. Factor with four levels

140

00:05:23.090  -->  00:05:25.130
and so what could that mean? Well what

141

00:05:25.130  -->  00:05:27.830
that means is that there's a variable

142

00:05:27.830  -->  00:05:30.500
here which has been taken as a

143

00:05:30.500  -->  00:05:33.169
categorical variable so we've got lower

144

00:05:33.169  -->  00:05:36.289
middle-income, low-income and I can tell

145

00:05:36.289  -->  00:05:38.000
right now we have lower middle-income,

146

00:05:38.000  -->  00:05:39.919
upper-middle income, low income and

147

00:05:39.919  -->  00:05:42.830
high-income. So four types of income

148

00:05:42.830  -->  00:05:45.200
groups or four different income groups we

149

00:05:45.200  -->  00:05:47.570
have here and so R has picked that up. R

150

00:05:47.570  -->  00:05:49.370
has understood that this is not just

151

00:05:49.370  -->  00:05:52.039
some random text that we from place here

152

00:05:52.039  -->  00:05:54.800
it's actually a factor so we want we

153

00:05:54.800  -->  00:05:57.080
might want to group all data based on

154

00:05:57.080  -->  00:05:59.630
this information sometime later and what

155

00:05:59.630  -->  00:06:02.930
R does is it assigns numbers so the

156

00:06:02.930  -->  00:06:06.740
science numeric values to these words to

157

00:06:06.740  -->  00:06:08.720
these strings attaches to them. So here

158

00:06:08.720  -->  00:06:10.760
you've got an example with four levels

159

00:06:10.760  -->  00:06:12.800
high income is one of them and then

160

00:06:12.800  -->  00:06:15.919
comma etc. and then it tells you how the

161

00:06:15.919  -->  00:06:16.910
numbers,

162

00:06:16.910  -->  00:06:18.500
what number is it has a science. So it's science

163

00:06:18.500  -->  00:06:22.099
number 124411 so if you look here, not

164

00:06:22.099  -->  00:06:24.440
in the last rows, in the first rows, if

165

00:06:24.440  -->  00:06:27.650
you look here, you'll see 1244 so that's how its

166

00:06:27.650  -->  00:06:29.570
assigned the values, attached the values

167

00:06:29.570  -->  00:06:33.260
and basically that's R's way of dealing

168

00:06:33.260  -->  00:06:35.750
with categorical variables and for us,

169

00:06:35.750  -->  00:06:37.640
they're called factors.

170

00:06:37.640  -->  00:06:39.660
Now what R has also done it

171

00:06:39.660  -->  00:06:42.480
has assumed that the country name and

172

00:06:42.480  -->  00:06:45.060
the country code are also factors, so it

173

00:06:45.060  -->  00:06:47.970
ended up of 195 levels and for us it

174

00:06:47.970  -->  00:06:49.620
doesn't really matter we're not going to

175

00:06:49.620  -->  00:06:51.180
use those variables so we don't really

176

00:06:51.180  -->  00:06:53.790
mind what R does with like how R treats

177

00:06:53.790  -->  00:06:56.100
them in the background for itself but

178

00:06:56.100  -->  00:06:58.110
it's also good check for us now we know

179

00:06:58.110  -->  00:07:00.390
that indeed there's no duplicates because

180

00:07:00.390  -->  00:07:02.100
it's a hundred ninety five rows and R

181

00:07:02.100  -->  00:07:03.660
has picked up a hundred ninety five

182

00:07:03.660  -->  00:07:06.300
different levels and same thing for the

183

00:07:06.300  -->  00:07:07.170
country code.

184

00:07:07.170  -->  00:07:11.310
Ok and also we have birth rate. It's, R

185

00:07:11.310  -->  00:07:12.600
has told us that it's a numeric value

186

00:07:12.600  -->  00:07:14.640
and internet users also a numeric value

187

00:07:14.640  -->  00:07:17.070
and it's just giving you some examples so

188

00:07:17.070  -->  00:07:20.730
that's the str function and actually

189

00:07:20.730  -->  00:07:22.410
it's one of my favorite functions

190

00:07:22.410  -->  00:07:24.390
because if I were conducting a job

191

00:07:24.390  -->  00:07:26.340
interview, if I was interviewing somebody

192

00:07:26.340  -->  00:07:28.950
for a data scientist position position

193

00:07:28.950  -->  00:07:30.840
there would be two functions that I

194

00:07:30.840  -->  00:07:32.910
would ask him like off the bat right? The

195

00:07:32.910  -->  00:07:34.800
first thing I would ask would be what

196

00:07:34.800  -->  00:07:37.500
does a str stand for and what does run

197

00:07:37.500  -->  00:07:38.520
if stand for?

198

00:07:38.520  -->  00:07:41.100
Because these functions have such tricky

199

00:07:41.100  -->  00:07:43.560
names, people who don't know are well

200

00:07:43.560  -->  00:07:46.050
enough will inevitably get them wrong

201

00:07:46.050  -->  00:07:48.780
right away because str in many other

202

00:07:48.780  -->  00:07:51.180
languages means the string, right? It

203

00:07:51.180  -->  00:07:53.190
means convert something to a string or

204

00:07:53.190  -->  00:07:55.200
working with strings and so on. So

205

00:07:55.200  -->  00:07:58.800
like a set of characters and so unless

206

00:07:58.800  -->  00:08:00.390
you actually know that in R it stands for

207

00:08:00.390  -->  00:08:02.490
structure, you'll get that one wrong and

208

00:08:02.490  -->  00:08:06.419
R runif what that does is it even I

209

00:08:06.419  -->  00:08:07.320
can see that

210

00:08:07.320  -->  00:08:09.810
like I read it read wrong in the proper

211

00:08:09.810  -->  00:08:12.510
way is runif because it stands for

212

00:08:12.510  -->  00:08:14.700
random variables distributed uniformly,

213

00:08:14.700  -->  00:08:18.150
so remember we had rnorm, so that was

214

00:08:18.150  -->  00:08:21.060
same thing R stands for random, norm is the

215

00:08:21.060  -->  00:08:23.280
type of distribution, same thing here. R

216

00:08:23.280  -->  00:08:25.560
stands for random, unif stands for a type

217

00:08:25.560  -->  00:08:26.940
of distribution. If you don't know R

218

00:08:26.940  -->  00:08:29.040
well enough, you will assume that that

219

00:08:29.040  -->  00:08:32.490
probably means run an operation if

220

00:08:32.490  -->  00:08:36.120
something is correct right? So just just

221

00:08:36.120  -->  00:08:39.660
a trick there or kind of a heads-up, just

222

00:08:39.660  -->  00:08:41.760
you should probably remember these two

223

00:08:41.760  -->  00:08:44.130
functions if you happen to be at a job

224

00:08:44.130  -->  00:08:45.780
interview where I'll be interviewing you

225

00:08:45.780  -->  00:08:49.329
which is very unlikely I guess.

226

00:08:49.329  -->  00:08:53.709
Anyway so that's str stats and then the

227

00:08:53.709  -->  00:08:56.920
next one would be summary, summary stats

228

00:08:56.920  -->  00:09:00.369
and let's have a look at that.

229

00:09:00.369  -->  00:09:03.279
So summary basically gives you a

230

00:09:03.279  -->  00:09:06.459
breakdown for every single column in a

231

00:09:06.459  -->  00:09:09.399
different way so str is very quick, this

232

00:09:09.399  -->  00:09:11.619
give takes like a bit of space, it's like a

233

00:09:11.619  -->  00:09:14.259
box, so here basically the these

234

00:09:14.259  -->  00:09:16.299
are categorical variables, there's nothing

235

00:09:16.299  -->  00:09:17.230
interesting about them.

236

00:09:17.230  -->  00:09:20.049
It tells you how many fall in each level,

237

00:09:20.049  -->  00:09:21.970
so how many high-income? How many

238

00:09:21.970  -->  00:09:23.709
low-income? That's pretty interesting I guess,

239

00:09:23.709  -->  00:09:26.259
then for a numeric variables it tells

240

00:09:26.259  -->  00:09:28.420
you the minimum, the first quartile, the

241

00:09:28.420  -->  00:09:31.209
median, the mean a third quartile and the

242

00:09:31.209  -->  00:09:33.790
maximum. Same thing for this variable

243

00:09:33.790  -->  00:09:35.350
here so it kind of gives you the

244

00:09:35.350  -->  00:09:36.790
breakdown so you can understand what

245

00:09:36.790  -->  00:09:38.619
type of distributions you have here or

246

00:09:38.619  -->  00:09:40.569
where what the ranges are for your data

247

00:09:40.569  -->  00:09:42.429
so you wouldn't even try looking for

248

00:09:42.429  -->  00:09:44.980
birth rate over 50 because it doesn't

249

00:09:44.980  -->  00:09:46.480
exist you can see right away and same

250

00:09:46.480  -->  00:09:48.429
thing for internet users. This is a good

251

00:09:48.429  -->  00:09:49.809
validation and it tells you that

252

00:09:49.809  -->  00:09:51.549
yep your data is between zero and a

253

00:09:51.549  -->  00:09:54.369
hundred so it is a percentage which is

254

00:09:54.369  -->  00:09:55.329
great.

255

00:09:55.329  -->  00:09:57.489
Ok that's all for today, I hope those

256

00:09:57.489  -->  00:09:59.169
functions come in handy when you're

257

00:09:59.169  -->  00:10:01.749
exploring your data sets and for us they

258

00:10:01.749  -->  00:10:03.610
have already told us a little bit about

259

00:10:03.610  -->  00:10:07.119
our data set which we will start slowly

260

00:10:07.119  -->  00:10:09.519
digging into from the next tutorial and

261

00:10:09.519  -->  00:10:11.739
I look forward to seeing you then until

262

00:10:11.739  -->  00:10:23.669
next time happy coding.
