WEBVTT
1

00:00:00.000  -->  00:00:07.080
Hello and welcome back to the course in

2

00:00:07.080  -->  00:00:08.730
R programming. Today we're going to

3

00:00:08.730  -->  00:00:10.349
learn a couple of things. Today we're

4

00:00:10.349  -->  00:00:12.150
going to learn about the if statement,

5

00:00:12.150  -->  00:00:13.380
we're going to learn about the else

6

00:00:13.380  -->  00:00:14.219
statement. The

7

00:00:14.219  -->  00:00:16.740
else, if statement also we'll learn how to

8

00:00:16.740  -->  00:00:18.869
nest those statements and chain them.

9

00:00:18.869  -->  00:00:20.699
I know it sounds like quite a lot but

10

00:00:20.699  -->  00:00:22.590
we're going to go through these things

11

00:00:22.590  -->  00:00:24.359
to step by step and you'll see that it's

12

00:00:24.359  -->  00:00:25.800
actually pretty simple stuff and we'll

13

00:00:25.800  -->  00:00:26.460
get through it

14

00:00:26.460  -->  00:00:29.279
no problem. Now what do I have up here?

15

00:00:29.279  -->  00:00:32.969
Well I have a axis where I've put some

16

00:00:32.969  -->  00:00:35.160
numbers just for our reference and that

17

00:00:35.160  -->  00:00:36.480
is because right now we're going to

18

00:00:36.480  -->  00:00:38.910
generate a random number is going to be

19

00:00:38.910  -->  00:00:40.440
a random number from a normally

20

00:00:40.440  -->  00:00:43.320
distributed set of numbers and it's okay

21

00:00:43.320  -->  00:00:45.660
if you're not entirely comfortable with

22

00:00:45.660  -->  00:00:47.789
the normal distribution and how it works

23

00:00:47.789  -->  00:00:49.680
and things like that because we'll go

24

00:00:49.680  -->  00:00:52.860
into depth on that in upcoming tutorials.

25

00:00:52.860  -->  00:00:55.410
For now let's say we're just generating

26

00:00:55.410  -->  00:00:58.079
a random number that is somewhere near

27

00:00:58.079  -->  00:01:00.510
zero. It can be very close to 0 or it

28

00:01:00.510  -->  00:01:03.000
could be quite far from zero but the

29

00:01:03.000  -->  00:01:05.010
chances of it being closer are

30

00:01:05.010  -->  00:01:07.260
higher than it being further away from 0.

31

00:01:07.260  -->  00:01:09.180
And let's leave it at that and

32

00:01:09.180  -->  00:01:11.310
let's get to the coding part so we can

33

00:01:11.310  -->  00:01:14.850
learn about the if and else statement so

34

00:01:14.850  -->  00:01:16.860
in order to generate the transit number

35

00:01:16.860  -->  00:01:18.900
we're going to use the R norm function.

36

00:01:18.900  -->  00:01:22.229
The R norm function generates a set of

37

00:01:22.229  -->  00:01:24.689
numbers which are randomly distributed

38

00:01:24.689  -->  00:01:27.330
according to the normal distribution and

39

00:01:27.330  -->  00:01:29.520
inside the simple brackets as you can

40

00:01:29.520  -->  00:01:32.070
see from this pop up over here you can

41

00:01:32.070  -->  00:01:34.380
specify a three parameters. We're only going

42

00:01:34.380  -->  00:01:36.960
to specify 1, we are just going to say one.

43

00:01:36.960  -->  00:01:38.820
Place the number one in here because

44

00:01:38.820  -->  00:01:40.170
that means that we want to generate

45

00:01:40.170  -->  00:01:42.990
exactly one number. The other two

46

00:01:42.990  -->  00:01:45.210
parameters specify what kind of normal

47

00:01:45.210  -->  00:01:46.829
distribution once and here you can see

48

00:01:46.829  -->  00:01:48.780
that the mean is 0, the sd

49

00:01:48.780  -->  00:01:50.490
is one, so we leave those things out for

50

00:01:50.490  -->  00:01:52.710
now because we already said that we want

51

00:01:52.710  -->  00:01:54.780
a number somewhere near zero and that's

52

00:01:54.780  -->  00:01:56.820
exactly what the default parameters will

53

00:01:56.820  -->  00:01:59.670
give us. So once you've typed up this

54

00:01:59.670  -->  00:02:01.710
code let's run it and see what it will give

55

00:02:01.710  -->  00:02:04.079
us, so here you can see that we've got a

56

00:02:04.079  -->  00:02:06.149
number that came out of nowhere

57

00:02:06.149  -->  00:02:08.039
that is our random number. If we run this

58

00:02:08.039  -->  00:02:09.750
code again you'll get a different number

59

00:02:09.750  -->  00:02:12.060
as you can see it is quite close to zero

60

00:02:12.060  -->  00:02:13.530
but it can be

61

00:02:13.530  -->  00:02:15.600
further away if you keep trying

62

00:02:15.600  -->  00:02:18.000
eventually you'll see different types of

63

00:02:18.000  -->  00:02:20.340
numbers come up. Now we're going to store

64

00:02:20.340  -->  00:02:22.590
the randomly generated number inside a

65

00:02:22.590  -->  00:02:24.360
variable. Let's call this a variable X,

66

00:02:24.360  -->  00:02:26.760
there we go so now when around this code

67

00:02:26.760  -->  00:02:28.830
instead of the number popping up here,

68

00:02:28.830  -->  00:02:30.870
it is now being stored inside the

69

00:02:30.870  -->  00:02:33.900
variable X and the variable X inevitably

70

00:02:33.900  -->  00:02:36.780
fall somewhere in this area. It can fall

71

00:02:36.780  -->  00:02:38.760
further away, but that's very unlikely so

72

00:02:38.760  -->  00:02:41.069
it usually falls somewhere here between

73

00:02:41.069  -->  00:02:44.640
somewhere on minus 3,2,3 so it has a very

74

00:02:44.640  -->  00:02:46.890
low high chance of falling in here. So

75

00:02:46.890  -->  00:02:48.420
we're going to use the if statement to

76

00:02:48.420  -->  00:02:51.810
identify where this variable will fall,

77

00:02:51.810  -->  00:02:53.970
so let's start typing up our if

78

00:02:53.970  -->  00:02:56.550
statement. The if statement has three parts

79

00:02:56.550  -->  00:02:59.459
suit. It has the keyword if and it has standard

80

00:02:59.459  -->  00:03:01.200
brackets and then it has curly brackets

81

00:03:01.200  -->  00:03:03.540
and I'm sure you're getting quite used

82

00:03:03.540  -->  00:03:05.100
to the structure because that's the same

83

00:03:05.100  -->  00:03:08.340
structure that while loop has and four

84

00:03:08.340  -->  00:03:10.860
loop has. The only difference between the

85

00:03:10.860  -->  00:03:12.840
if statement and the while loop is that

86

00:03:12.840  -->  00:03:14.819
it doesn't run many times. It only runs

87

00:03:14.819  -->  00:03:17.670
once, so inside your normal brackets you

88

00:03:17.670  -->  00:03:20.160
still specify a logical expression so in

89

00:03:20.160  -->  00:03:21.930
this case we're going to check if x is

90

00:03:21.930  -->  00:03:23.820
greater than one. So we want to see if

91

00:03:23.820  -->  00:03:26.370
this variable that we're generating did

92

00:03:26.370  -->  00:03:28.620
it fall in this area? Did fall to the

93

00:03:28.620  -->  00:03:31.200
right of 1 or did fall to the left? So

94

00:03:31.200  -->  00:03:33.269
basically want to check is this true

95

00:03:33.269  -->  00:03:35.760
that X is on the right over here, so

96

00:03:35.760  -->  00:03:37.230
that's a logical expression that we're

97

00:03:37.230  -->  00:03:39.989
checking and then we're going to perform

98

00:03:39.989  -->  00:03:43.079
some action inside here so let's say we

99

00:03:43.079  -->  00:03:45.150
want to create a variable which is

100

00:03:45.150  -->  00:03:47.670
answer and inside answer we want to

101

00:03:47.670  -->  00:03:50.400
place the text which will tell us that

102

00:03:50.400  -->  00:03:54.540
it is greater than one. So basically what

103

00:03:54.540  -->  00:03:56.549
will happen is once we run this code

104

00:03:56.549  -->  00:03:58.470
including the generation of the variable

105

00:03:58.470  -->  00:04:00.810
is that the number will be generated it

106

00:04:00.810  -->  00:04:02.910
will be put inside the variable then we

107

00:04:02.910  -->  00:04:05.310
will run the if statement which will

108

00:04:05.310  -->  00:04:08.430
check if the number is greater than one

109

00:04:08.430  -->  00:04:11.190
and if it is greater than one then and

110

00:04:11.190  -->  00:04:13.440
only then will the body of this if

111

00:04:13.440  -->  00:04:15.690
statement be executed and then that's it

112

00:04:15.690  -->  00:04:17.970
that's where the code will end, so it's

113

00:04:17.970  -->  00:04:19.560
not like a while loop will continue

114

00:04:19.560  -->  00:04:21.180
running it will just stop there.

115

00:04:21.180  -->  00:04:24.599
So let's go ahead and run that. If we run

116

00:04:24.599  -->  00:04:26.760
that you can see that the code has been

117

00:04:26.760  -->  00:04:27.270
run

118

00:04:27.270  -->  00:04:29.879
and the x value is updated here and

119

00:04:29.879  -->  00:04:32.669
there is no answer variable so there's

120

00:04:32.669  -->  00:04:34.379
no answer variable over here that is

121

00:04:34.379  -->  00:04:35.940
because it hasn't being created. That's

122

00:04:35.940  -->  00:04:38.280
because X is not greater than one and

123

00:04:38.280  -->  00:04:41.610
this code was not executed. So let's run

124

00:04:41.610  -->  00:04:44.370
this a couple more times, so there go the

125

00:04:44.370  -->  00:04:46.289
next time we ran it you can see that X

126

00:04:46.289  -->  00:04:50.819
is 1.6986 and the answer variable has been

127

00:04:50.819  -->  00:04:53.099
generated it says greater than one. Now

128

00:04:53.099  -->  00:04:55.860
if we run again, you'll see that what

129

00:04:55.860  -->  00:04:57.120
happens is we run into a bit of a

130

00:04:57.120  -->  00:05:00.599
problem. X is now less than 0 actually

131

00:05:00.599  -->  00:05:02.580
but the answer is still saying greater than

132

00:05:02.580  -->  00:05:03.240
one.

133

00:05:03.240  -->  00:05:05.250
Why is that? Well this is simply because

134

00:05:05.250  -->  00:05:07.770
the answer variable has been stored

135

00:05:07.770  -->  00:05:10.680
since the previous run so because this

136

00:05:10.680  -->  00:05:12.870
part of the code was not executed the

137

00:05:12.870  -->  00:05:14.880
answer variable was not changed and

138

00:05:14.880  -->  00:05:17.520
therefore it still has its old value, so

139

00:05:17.520  -->  00:05:19.440
now we're going to learn how to remove

140

00:05:19.440  -->  00:05:21.719
variables in R and that is also quite

141

00:05:21.719  -->  00:05:24.630
a good skill to have. So here before we

142

00:05:24.630  -->  00:05:26.250
run this code what we're going to do is

143

00:05:26.250  -->  00:05:28.409
we're going to type in RM and then we're

144

00:05:28.409  -->  00:05:29.759
going to type in the variable that we

145

00:05:29.759  -->  00:05:32.219
want to remove answer, so if i run this

146

00:05:32.219  -->  00:05:34.620
line by itself you'll see that the

147

00:05:34.620  -->  00:05:36.630
answer variable has been removed.

148

00:05:36.630  -->  00:05:38.550
So once again now if we highlight

149

00:05:38.550  -->  00:05:41.310
everything what will happen is we're of

150

00:05:41.310  -->  00:05:42.779
course we get a warning because we can't

151

00:05:42.779  -->  00:05:44.400
remove a variable that doesn't exist but

152

00:05:44.400  -->  00:05:45.180
that's okay.

153

00:05:45.180  -->  00:05:46.919
What will happen is we remove the

154

00:05:46.919  -->  00:05:49.949
variable if it exists and then we run

155

00:05:49.949  -->  00:05:52.349
this code so let's try that again.

156

00:05:52.349  -->  00:05:56.639
Let's try it again, a couple of times you

157

00:05:56.639  -->  00:05:58.409
want to get X greater than one. So here

158

00:05:58.409  -->  00:06:00.300
you can see that X is greater than one

159

00:06:00.300  -->  00:06:02.370
and we've got the answer that it is

160

00:06:02.370  -->  00:06:04.139
greater than one. So if we run the code

161

00:06:04.139  -->  00:06:06.840
again from now, you will see that the

162

00:06:06.840  -->  00:06:09.539
answer has disappeared and x is not

163

00:06:09.539  -->  00:06:10.740
greater than one.

164

00:06:10.740  -->  00:06:13.710
Ok so that is how the if statement works.

165

00:06:13.710  -->  00:06:16.949
Now what happens if we want to something

166

00:06:16.949  -->  00:06:21.300
else to happen if x is less than one? In

167

00:06:21.300  -->  00:06:23.039
that case, we've got a useful statement

168

00:06:23.039  -->  00:06:25.169
called the else statement. So if we type

169

00:06:25.169  -->  00:06:27.389
in else over here and then we opened the

170

00:06:27.389  -->  00:06:29.729
curly brackets and then inside these

171

00:06:29.729  -->  00:06:32.099
curly brackets we need to type in the

172

00:06:32.099  -->  00:06:34.139
body of the else statement. As you can

173

00:06:34.139  -->  00:06:35.550
see, the else statement does not have

174

00:06:35.550  -->  00:06:37.139
normal brackets here like the if

175

00:06:37.139  -->  00:06:39.449
statement and that is because it doesn't

176

00:06:39.449  -->  00:06:40.620
need a condition. The

177

00:06:40.620  -->  00:06:42.630
else statement will happen in all other

178

00:06:42.630  -->  00:06:45.419
cases except for when the if statement

179

00:06:45.419  -->  00:06:47.610
happens. So it's like a default or a

180

00:06:47.610  -->  00:06:50.520
fallback option if this part doesn't get

181

00:06:50.520  -->  00:06:52.380
executed then this part will get

182

00:06:52.380  -->  00:06:54.510
executed. So inside the else statement

183

00:06:54.510  -->  00:06:57.240
what do we want to specify? Well in this

184

00:06:57.240  -->  00:06:59.940
case we want to say that answer should

185

00:06:59.940  -->  00:07:03.510
be equal to less than one right and so

186

00:07:03.510  -->  00:07:05.550
let's give this a try. If we run all this

187

00:07:05.550  -->  00:07:08.910
you'll see that here we've got answer

188

00:07:08.910  -->  00:07:11.130
less than 1 because X is indeed less

189

00:07:11.130  -->  00:07:13.470
than one. Here we've still got less than one,

190

00:07:13.470  -->  00:07:15.630
now we've got greater than one. So as you

191

00:07:15.630  -->  00:07:18.000
can see one or the other is only being

192

00:07:18.000  -->  00:07:21.419
executed either this part or this part.

193

00:07:21.419  -->  00:07:23.490
Ok so that allows us to understand where

194

00:07:23.490  -->  00:07:26.639
the X falls in this area or whether X

195

00:07:26.639  -->  00:07:28.590
falls in this area. In fact we need to

196

00:07:28.590  -->  00:07:33.120
type in here less or equal to 1 because

197

00:07:33.120  -->  00:07:34.919
it could be equal to 1.

198

00:07:34.919  -->  00:07:37.800
Alright so that is how the if and else

199

00:07:37.800  -->  00:07:40.740
statements work. Now we want to add in

200

00:07:40.740  -->  00:07:43.470
the else if statement, so what if we want

201

00:07:43.470  -->  00:07:45.120
to check three options? What if you want

202

00:07:45.120  -->  00:07:48.510
to check if X is here? Then if X is here

203

00:07:48.510  -->  00:07:51.780
or if X is here, right? So if you want to

204

00:07:51.780  -->  00:07:53.789
check if it's greater than one between

205

00:07:53.789  -->  00:07:56.400
minus 1 and 1 or if it's less than minus

206

00:07:56.400  -->  00:07:57.120
1.

207

00:07:57.120  -->  00:07:59.849
How do we do that? Well what we could do

208

00:07:59.849  -->  00:08:03.630
is we could take out this bit and here

209

00:08:03.630  -->  00:08:05.880
in this else statement, so first we could

210

00:08:05.880  -->  00:08:08.580
check if x is greater than one, this part.

211

00:08:08.580  -->  00:08:11.039
Then if X is not greater than one so

212

00:08:11.039  -->  00:08:13.710
basically X falls between minus infinity

213

00:08:13.710  -->  00:08:17.220
and one then we will run an additional

214

00:08:17.220  -->  00:08:18.720
if-else statement so let's have a look

215

00:08:18.720  -->  00:08:21.900
at that. We're going to type in if x is

216

00:08:21.900  -->  00:08:25.320
less than one we already know that x is

217

00:08:25.320  -->  00:08:27.000
less than on if we want to say if x is

218

00:08:27.000  -->  00:08:30.210
greater or equal to minus 1 then we will

219

00:08:30.210  -->  00:08:35.880
say that answer is between minus 1 and 1

220

00:08:35.880  -->  00:08:38.729
right? Because we already know that it's

221

00:08:38.729  -->  00:08:40.919
not greater than 1 because this was not

222

00:08:40.919  -->  00:08:42.690
executed so definitely is somewhere here

223

00:08:42.690  -->  00:08:45.120
so if this condition is true that means

224

00:08:45.120  -->  00:08:47.640
we're definitely lying in this area

225

00:08:47.640  -->  00:08:50.190
between minus 1 and 1 and then to this

226

00:08:50.190  -->  00:08:52.260
we could add another else statement

227

00:08:52.260  -->  00:08:52.670
saying

228

00:08:52.670  -->  00:08:55.460
hey if this is not correct so if this

229

00:08:55.460  -->  00:08:57.050
was not correct and now if this is not

230

00:08:57.050  -->  00:08:59.060
correct then X has no other option but

231

00:08:59.060  -->  00:09:02.390
to be here. Be a less than minus 1, so in

232

00:09:02.390  -->  00:09:05.270
that case we'll say answer less than

233

00:09:05.270  -->  00:09:08.930
minus 1 and so that is a valid way, a

234

00:09:08.930  -->  00:09:11.090
valid approach to solving this problem.

235

00:09:11.090  -->  00:09:13.100
So I'm going to highlight all of this

236

00:09:13.100  -->  00:09:14.450
and click tab to move it to the right

237

00:09:14.450  -->  00:09:17.090
you can click shift tab to move it to left but I'm

238

00:09:17.090  -->  00:09:18.770
just going to move it to the right so it

239

00:09:18.770  -->  00:09:22.070
actually stands up. So if I run this this

240

00:09:22.070  -->  00:09:23.810
whole code now which is actually growing

241

00:09:23.810  -->  00:09:25.910
pretty quickly right? So if I run this

242

00:09:25.910  -->  00:09:28.160
whole code you will see that every time

243

00:09:28.160  -->  00:09:29.330
it will give you the correct answer

244

00:09:29.330  -->  00:09:32.630
because that's how these if-else

245

00:09:32.630  -->  00:09:33.890
statements work. By the way, this

246

00:09:33.890  -->  00:09:36.890
structure is called a nested if else

247

00:09:36.890  -->  00:09:39.200
statement. We've got one if else statement and

248

00:09:39.200  -->  00:09:40.970
then we've got an another if-else

249

00:09:40.970  -->  00:09:43.280
statement within that first one. That's

250

00:09:43.280  -->  00:09:45.470
why it's called nested so now if I keep

251

00:09:45.470  -->  00:09:47.870
running it you'll see that it will give

252

00:09:47.870  -->  00:09:49.340
you the correct answer every time

253

00:09:49.340  -->  00:09:50.870
because that's how we've prepared it

254

00:09:50.870  -->  00:09:53.090
right? Now the last thing that I wanted

255

00:09:53.090  -->  00:09:54.800
to show you in this tutorial is that

256

00:09:54.800  -->  00:09:57.500
this structure can get very cumbersome

257

00:09:57.500  -->  00:10:00.260
right? If you want to add another pair of

258

00:10:00.260  -->  00:10:03.110
nested statement, it will start growing

259

00:10:03.110  -->  00:10:05.600
and growing growing and that's why it's

260

00:10:05.600  -->  00:10:07.880
nested statements are not of the best

261

00:10:07.880  -->  00:10:10.400
practice in programming. It's much better

262

00:10:10.400  -->  00:10:11.930
to chain statements,

263

00:10:11.930  -->  00:10:13.760
let's see how that works. Chaining

264

00:10:13.760  -->  00:10:17.150
statement is pretty simple in R as in

265

00:10:17.150  -->  00:10:19.820
many or most other programming languages

266

00:10:19.820  -->  00:10:22.730
you can also specify a third type of

267

00:10:22.730  -->  00:10:25.370
these statements. There's if, there's else,

268

00:10:25.370  -->  00:10:28.760
there's actually else if and else if is

269

00:10:28.760  -->  00:10:30.440
exactly what allows you to chain that.

270

00:10:30.440  -->  00:10:31.580
Let's have a look at it,

271

00:10:31.580  -->  00:10:34.190
so here instead of this else, what I would

272

00:10:34.190  -->  00:10:37.280
type in I would type in else if actually

273

00:10:37.280  -->  00:10:40.820
separated so I would type in else if and

274

00:10:40.820  -->  00:10:43.640
then I would take this part so get rid

275

00:10:43.640  -->  00:10:47.150
of that and I would take this and put it

276

00:10:47.150  -->  00:10:48.410
in here right?

277

00:10:48.410  -->  00:10:50.600
So there you go, so you have that if then

278

00:10:50.600  -->  00:10:53.690
you have the else if and then you would

279

00:10:53.690  -->  00:10:57.050
put in the last else after that else if,

280

00:10:57.050  -->  00:10:58.970
and then you get rid of this bracket

281

00:10:58.970  -->  00:11:01.100
because you don't need it anymore. So

282

00:11:01.100  -->  00:11:03.020
this structure is a bit different and

283

00:11:03.020  -->  00:11:05.300
what happens here is first you check

284

00:11:05.300  -->  00:11:05.920
out this

285

00:11:05.920  -->  00:11:08.170
if statement, so is X greater than one?

286

00:11:08.170  -->  00:11:10.959
Then you check else if so if that's not

287

00:11:10.959  -->  00:11:12.339
correct let's check the next statement,

288

00:11:12.339  -->  00:11:15.040
is X greater than minus 1? Greater or

289

00:11:15.040  -->  00:11:17.110
equal to, so does X falls? Does x falls

290

00:11:17.110  -->  00:11:19.000
between these two and if that's not

291

00:11:19.000  -->  00:11:21.100
correct then you go to the fallback

292

00:11:21.100  -->  00:11:21.790
option

293

00:11:21.790  -->  00:11:23.589
meaning that X has no other option but

294

00:11:23.589  -->  00:11:27.639
to lie over here below minus one. So you

295

00:11:27.639  -->  00:11:29.170
achieve the same result but as you can

296

00:11:29.170  -->  00:11:31.600
see the code is much near and much

297

00:11:31.600  -->  00:11:34.029
shorter and this is called chaining

298

00:11:34.029  -->  00:11:36.430
statement. So let's go ahead and run this

299

00:11:36.430  -->  00:11:39.250
now, as you can see on the right here you

300

00:11:39.250  -->  00:11:40.990
were still getting the correct result

301

00:11:40.990  -->  00:11:42.399
every time.

302

00:11:42.399  -->  00:11:44.079
That's because we're achieving the same

303

00:11:44.079  -->  00:11:47.709
result but we are doing it so in a much

304

00:11:47.709  -->  00:11:49.449
better way.

305

00:11:49.449  -->  00:11:51.850
So there we go, that's how if-else and

306

00:11:51.850  -->  00:11:53.920
else if statements work and that's the

307

00:11:53.920  -->  00:11:55.600
difference between nesting and chaining

308

00:11:55.600  -->  00:11:56.920
and it's good to know the difference

309

00:11:56.920  -->  00:11:58.870
because sometimes people get it wrong

310

00:11:58.870  -->  00:12:00.370
they think that chaining is actually

311

00:12:00.370  -->  00:12:01.540
called nesting well those are two

312

00:12:01.540  -->  00:12:03.730
different things and this brings us to

313

00:12:03.730  -->  00:12:05.470
the end of today's tutorial. I hope you

314

00:12:05.470  -->  00:12:07.089
found it useful and I look forward to

315

00:12:07.089  -->  00:12:07.990
seeing you next time.

316

00:12:07.990  -->  00:12:20.049
Until then, happy coding.
