WEBVTT
1

00:00:00.000  -->  00:00:07.140
Hello and welcome back to the course in

2

00:00:07.140  -->  00:00:08.760
R programming. In the previous tutorial

3

00:00:08.760  -->  00:00:11.190
we talked a lot about vectors and we

4

00:00:11.190  -->  00:00:13.049
created some pictures and I know there

5

00:00:13.049  -->  00:00:15.000
might have been a pile of information we

6

00:00:15.000  -->  00:00:16.949
learned quite a few new functions well

7

00:00:16.949  -->  00:00:18.869
today we'll quickly recap what we learned

8

00:00:18.869  -->  00:00:21.240
last time and then I will introduce you

9

00:00:21.240  -->  00:00:23.369
to the square brackets going to be quite

10

00:00:23.369  -->  00:00:26.310
a short tutorial but also it is going to

11

00:00:26.310  -->  00:00:28.470
be quite an insightful one so let's

12

00:00:28.470  -->  00:00:30.240
start by recapping what we learned last

13

00:00:30.240  -->  00:00:32.820
time. We learned three main functions for

14

00:00:32.820  -->  00:00:35.850
creating vectors one is a combined where

15

00:00:35.850  -->  00:00:38.850
you take the letter C which is the name

16

00:00:38.850  -->  00:00:41.070
of the function and you put in some

17

00:00:41.070  -->  00:00:43.710
numbers or characters or whatever you

18

00:00:43.710  -->  00:00:45.719
want to store in your vector and basically

19

00:00:45.719  -->  00:00:49.500
combine them into a vector all right

20

00:00:49.500  -->  00:00:53.219
number two was the sequence function

21

00:00:53.219  -->  00:00:56.699
where you specify the start of the

22

00:00:56.699  -->  00:00:58.199
sequence by the way it doesn't have to

23

00:00:58.199  -->  00:01:00.030
be one we've been using one most intense

24

00:01:00.030  -->  00:01:02.370
but can be any number and the end of the

25

00:01:02.370  -->  00:01:04.619
sequence and then the step of the

26

00:01:04.619  -->  00:01:07.470
sequence as the third parameter and this

27

00:01:07.470  -->  00:01:10.830
is going to be sequence and finally

28

00:01:10.830  -->  00:01:12.689
number three that we learn to the last

29

00:01:12.689  -->  00:01:16.049
time was the replicate function so if we

30

00:01:16.049  -->  00:01:17.790
want to replicate something whether it's

31

00:01:17.790  -->  00:01:21.119
a number a character or even a vector we

32

00:01:21.119  -->  00:01:23.610
specify that object here and then we say

33

00:01:23.610  -->  00:01:25.049
how many times we want to replicate it

34

00:01:25.049  -->  00:01:29.729
and that is replicate so now for an all

35

00:01:29.729  -->  00:01:31.860
these three together I will get three

36

00:01:31.860  -->  00:01:34.650
vectors, 1 and number one number two are

37

00:01:34.650  -->  00:01:36.750
a numeric and as you can see here is

38

00:01:36.750  -->  00:01:38.880
this first one is just combination of

39

00:01:38.880  -->  00:01:40.259
the parameters that we passed into the

40

00:01:40.259  -->  00:01:40.950
function.

41

00:01:40.950  -->  00:01:43.560
The second one is indeed the sequence

42

00:01:43.560  -->  00:01:46.470
that we wanted from 201 to 250 of the

43

00:01:46.470  -->  00:01:49.049
step of 11 as you can see 250 was not

44

00:01:49.049  -->  00:01:51.210
included and that's because 11 doesn't

45

00:01:51.210  -->  00:01:54.240
feed it evenly into the interval between

46

00:01:54.240  -->  00:01:56.820
201 and 250 but that's ok

47

00:01:56.820  -->  00:01:58.680
we're always guaranteed that we will be

48

00:01:58.680  -->  00:02:01.799
within the interval and finally zed a

49

00:02:01.799  -->  00:02:04.140
character vector of three elements with

50

00:02:04.140  -->  00:02:04.890
the word

51

00:02:04.890  -->  00:02:08.550
hi ! three times ok so those are the

52

00:02:08.550  -->  00:02:10.800
three ways we learned how to create

53

00:02:10.800  -->  00:02:13.680
vectors now what will learn today

54

00:02:13.680  -->  00:02:17.159
is how to access individual elements of

55

00:02:17.159  -->  00:02:20.010
a vector. Let me explain what I mean

56

00:02:20.010  -->  00:02:22.980
let's say we have a vector W with the

57

00:02:22.980  -->  00:02:30.329
following elements, a b c d and e now this

58

00:02:30.329  -->  00:02:32.459
is a vector representing the start of

59

00:02:32.459  -->  00:02:34.680
the alphabet if I run that and I printed

60

00:02:34.680  -->  00:02:37.170
out I'll get the letters of here so it's

61

00:02:37.170  -->  00:02:40.920
and a vector of five letters now how do

62

00:02:40.920  -->  00:02:43.379
I access these letters individually? How

63

00:02:43.379  -->  00:02:45.900
can I get access to the letter A by

64

00:02:45.900  -->  00:02:48.510
itself from the spectrum well in order

65

00:02:48.510  -->  00:02:50.700
to do that we need to use square

66

00:02:50.700  -->  00:02:52.200
brackets so you need to type in the name

67

00:02:52.200  -->  00:02:54.329
of the vector which is W and then within

68

00:02:54.329  -->  00:02:57.120
square brackets you need to type in the

69

00:02:57.120  -->  00:02:59.459
number of the element you on taxes and

70

00:02:59.459  -->  00:03:01.079
as you remember especially if you're

71

00:03:01.079  -->  00:03:02.669
coming from another programming language

72

00:03:02.669  -->  00:03:05.609
background liberation or education and

73

00:03:05.609  -->  00:03:07.680
our starts with one so we're going to

74

00:03:07.680  -->  00:03:09.510
put a 1 here and that will give us

75

00:03:09.510  -->  00:03:11.099
access to the very first element.

76

00:03:11.099  -->  00:03:13.439
There we go we've accessed the letter A

77

00:03:13.439  -->  00:03:15.900
same thing we can access the second

78

00:03:15.900  -->  00:03:18.569
element which would B, we can access the

79

00:03:18.569  -->  00:03:20.220
third element and so on.

80

00:03:20.220  -->  00:03:22.229
Now a good thing to know is that the

81

00:03:22.229  -->  00:03:25.169
square brackets in R are more versatile

82

00:03:25.169  -->  00:03:27.599
than in other programming languages so

83

00:03:27.599  -->  00:03:30.540
if I want to for instance get access to

84

00:03:30.540  -->  00:03:32.849
all the letters except for the first one

85

00:03:32.849  -->  00:03:36.090
then I'll type in w minus one and I'll

86

00:03:36.090  -->  00:03:39.449
have bcde then if I want to get all

87

00:03:39.449  -->  00:03:42.239
access to all the letters except for the

88

00:03:42.239  -->  00:03:43.049
middle one

89

00:03:43.049  -->  00:03:46.560
I will type in w minus 3 right? So I'll

90

00:03:46.560  -->  00:03:49.620
have ABDE and this is a

91

00:03:49.620  -->  00:03:51.479
vector I can put this vector into

92

00:03:51.479  -->  00:03:54.780
another variable so I can say v, w-3

93

00:03:54.780  -->  00:03:57.269
and I will have another vector over here

94

00:03:57.269  -->  00:04:00.659
abde and that is the video of R

95

00:04:00.659  -->  00:04:02.699
because it operates and vectors it is

96

00:04:02.699  -->  00:04:06.150
normal, it is expected that sometimes

97

00:04:06.150  -->  00:04:09.150
when you access even a vector but you

98

00:04:09.150  -->  00:04:10.979
specify what you don't want in return

99

00:04:10.979  -->  00:04:12.449
you will get back

100

00:04:12.449  -->  00:04:15.030
vector again alright so what else can we

101

00:04:15.030  -->  00:04:18.329
do here? We can access several elements,

102

00:04:18.329  -->  00:04:22.019
so we can say W and we can say element 1

103

00:04:22.019  -->  00:04:25.919
2 &amp; 3 so we'll put in a sequence 134 the

104

00:04:25.919  -->  00:04:27.340
US that's a one two three

105

00:04:27.340  -->  00:04:30.340
sequence and now if we run this, we know

106

00:04:30.340  -->  00:04:33.130
that we want to ABC on it so basically

107

00:04:33.130  -->  00:04:35.919
we're passing on this is a vector 123 is

108

00:04:35.919  -->  00:04:38.470
a vector replacing a vector into the

109

00:04:38.470  -->  00:04:41.590
square brackets and it is being used to

110

00:04:41.590  -->  00:04:44.680
tell the vector W which elements are

111

00:04:44.680  -->  00:04:47.770
required to be returned which are ABC so

112

00:04:47.770  -->  00:04:51.280
we can do that we can do a different

113

00:04:51.280  -->  00:04:54.190
come several elements so we can say we

114

00:04:54.190  -->  00:04:56.830
want 325 for instance so this will give

115

00:04:56.830  -->  00:05:00.580
us a vector 3:5 so there we go cde

116

00:05:00.580  -->  00:05:05.740
right and so this gives you the thought

117

00:05:05.740  -->  00:05:07.479
that you can pass vectors into the

118

00:05:07.479  -->  00:05:09.010
square bracket so let's take it up a

119

00:05:09.010  -->  00:05:11.440
notch right let's not just use the colon

120

00:05:11.440  -->  00:05:13.780
operator let's say we want to use the

121

00:05:13.780  -->  00:05:15.940
combine operator so here we'll create a

122

00:05:15.940  -->  00:05:19.240
vector and we will say we want number

123

00:05:19.240  -->  00:05:21.100
one, number one, number three and number

124

00:05:21.100  -->  00:05:24.010
five right? So if I run this picture of

125

00:05:24.010  -->  00:05:26.830
three elements 135 and if I run this now

126

00:05:26.830  -->  00:05:29.620
we get ACE, so we got the first to third

127

00:05:29.620  -->  00:05:33.910
and the fifth okay and what else can we

128

00:05:33.910  -->  00:05:35.020
do? We can do the same thing with negative numbers.

129

00:05:35.020  -->  00:05:36.789
Of course we can do the same thing with

130

00:05:36.789  -->  00:05:40.330
negative numbers we can say we want the

131

00:05:40.330  -->  00:05:44.080
whole vector except four minus two and

132

00:05:44.080  -->  00:05:48.400
minus 4 run that we get the same result

133

00:05:48.400  -->  00:05:50.919
AC so it's exactly the same because

134

00:05:50.919  -->  00:05:52.750
we're passing on this picture of two numbers

135

00:05:52.750  -->  00:05:56.710
minus two and minus 4 and it's excluding

136

00:05:56.710  -->  00:05:58.599
those now can we use the colon operator

137

00:05:58.599  -->  00:06:01.990
or with negative numbers of course we

138

00:06:01.990  -->  00:06:04.750
can so if I create a if I just say minus

139

00:06:04.750  -->  00:06:08.860
3 2-5 and around that it will give me a

140

00:06:08.860  -->  00:06:11.950
vector minus 3 45 and if I run this now

141

00:06:11.950  -->  00:06:15.010
w minus 3 minus 5, so just give me

142

00:06:15.010  -->  00:06:19.090
letters A and B so now if I create a

143

00:06:19.090  -->  00:06:24.729
vector with w 1:2, we'll get the same

144

00:06:24.729  -->  00:06:26.410
result and be so as you can see there

145

00:06:26.410  -->  00:06:28.570
are multiple ways to achieve the same

146

00:06:28.570  -->  00:06:31.419
result in r especially when accessing

147

00:06:31.419  -->  00:06:35.229
elements of a vector and that's how it

148

00:06:35.229  -->  00:06:37.150
works basically so you've got many

149

00:06:37.150  -->  00:06:39.310
different options and you can

150

00:06:39.310  -->  00:06:41.890
put in a different parameters into the

151

00:06:41.890  -->  00:06:44.770
square brackets to receive what your

152

00:06:44.770  -->  00:06:46.480
officer what you're looking for

153

00:06:46.480  -->  00:06:48.100
now to finish off this tutorial there

154

00:06:48.100  -->  00:06:49.330
are two things I would like to mention,

155

00:06:49.330  -->  00:06:52.000
first thing is that in this tutorial we

156

00:06:52.000  -->  00:06:55.060
will learn how to access the individual

157

00:06:55.060  -->  00:06:56.980
elements of a vector using the square

158

00:06:56.980  -->  00:06:59.320
bracket. It's a good skill to have. It's

159

00:06:59.320  -->  00:07:02.080
good to know especially these are useful

160

00:07:02.080  -->  00:07:04.270
when you are putting a negative number

161

00:07:04.270  -->  00:07:06.310
in because that's these are this

162

00:07:06.310  -->  00:07:07.870
information might come in handy when

163

00:07:07.870  -->  00:07:10.330
we're dealing with data frames further

164

00:07:10.330  -->  00:07:12.220
down in the course but at the same time

165

00:07:12.220  -->  00:07:13.900
what you will notice through this

166

00:07:13.900  -->  00:07:15.640
course and through your work in R is

167

00:07:15.640  -->  00:07:18.820
that you won't be needing to access

168

00:07:18.820  -->  00:07:22.330
individual elements of vectors that

169

00:07:22.330  -->  00:07:25.720
often. It might come as a shock to a lot

170

00:07:25.720  -->  00:07:27.910
of people coming from other backgrounds

171

00:07:27.910  -->  00:07:30.580
and programming especially C, C++ and

172

00:07:30.580  -->  00:07:33.190
languages like like like that like java

173

00:07:33.190  -->  00:07:37.120
and so on but R is a vector driven

174

00:07:37.120  -->  00:07:39.610
language and a lot of things happen in

175

00:07:39.610  -->  00:07:42.160
vectorized form so won't run too far

176

00:07:42.160  -->  00:07:44.500
ahead here but in the next tutorial you

177

00:07:44.500  -->  00:07:47.860
will find out exactly why you won't be

178

00:07:47.860  -->  00:07:49.780
needing these square brackets that much

179

00:07:49.780  -->  00:07:51.430
so stay tuned for that

180

00:07:51.430  -->  00:07:53.350
that'll be a very exciting tutorial can't

181

00:07:53.350  -->  00:07:55.480
wait for you guys to sit and the other

182

00:07:55.480  -->  00:07:57.700
thing I wanted to mention is that you

183

00:07:57.700  -->  00:08:00.880
are now entering the world of R and

184

00:08:00.880  -->  00:08:02.410
this is the part of your journey where

185

00:08:02.410  -->  00:08:04.300
if you haven't yet you're going to

186

00:08:04.300  -->  00:08:07.480
experience how steep the learning curve

187

00:08:07.480  -->  00:08:09.340
of R is and even though we've done

188

00:08:09.340  -->  00:08:12.430
everything we can to smoothing out a lot

189

00:08:12.430  -->  00:08:15.220
you will still experience that it much

190

00:08:15.220  -->  00:08:17.770
at this space exact stage that we're in

191

00:08:17.770  -->  00:08:20.500
right now it might start to become a bit

192

00:08:20.500  -->  00:08:22.870
more difficult to keep up before these

193

00:08:22.870  -->  00:08:25.540
concepts that I'm literally throwing at

194

00:08:25.540  -->  00:08:27.280
you in these tutorials like the last

195

00:08:27.280  -->  00:08:29.320
time with we spoke about three functions

196

00:08:29.320  -->  00:08:31.600
right so it takes time to understand

197

00:08:31.600  -->  00:08:34.210
these so what I want to ask you is for

198

00:08:34.210  -->  00:08:39.130
you to become very very exploratory and

199

00:08:39.130  -->  00:08:42.370
become very, I'll ask a lot of questions like

200

00:08:42.370  -->  00:08:44.230
ask yourself a lot of questions what

201

00:08:44.230  -->  00:08:46.360
what can I do what can I do what I what

202

00:08:46.360  -->  00:08:48.850
I want to further explore in R, so

203

00:08:48.850  -->  00:08:51.760
experiment a lot, that is how you can

204

00:08:51.760  -->  00:08:52.779
master this programming

205

00:08:52.779  -->  00:08:55.060
language and get over this very

206

00:08:55.060  -->  00:08:57.939
steep part of the learning curve

207

00:08:57.939  -->  00:09:00.100
you need to keep practicing and you need

208

00:09:00.100  -->  00:09:02.470
to switch your imagination on and say

209

00:09:02.470  -->  00:09:03.550
for instance

210

00:09:03.550  -->  00:09:05.620
ok so what are like Kirill didn't explain

211

00:09:05.620  -->  00:09:07.209
what happens if I put a number greater

212

00:09:07.209  -->  00:09:09.879
than the number of elements here so if I

213

00:09:09.879  -->  00:09:12.670
put in w7 for instance or what if I put

214

00:09:12.670  -->  00:09:16.660
in w102 or what if i put in w minus 7 or

215

00:09:16.660  -->  00:09:18.970
what if i put in w0 what happens there

216

00:09:18.970  -->  00:09:21.610
like ask these questions try to figure

217

00:09:21.610  -->  00:09:23.769
these things out experimental maybe

218

00:09:23.769  -->  00:09:25.749
looking things up

219

00:09:25.749  -->  00:09:27.910
ask me in the course, ask fellow

220

00:09:27.910  -->  00:09:30.009
students in the course because you need

221

00:09:30.009  -->  00:09:31.990
to keep your brain working keep your

222

00:09:31.990  -->  00:09:34.120
brain active in regards to this

223

00:09:34.120  -->  00:09:35.559
programming language and even these two

224

00:09:35.559  -->  00:09:37.749
functional group around there is so much

225

00:09:37.749  -->  00:09:39.370
you can learn about them there's so many

226

00:09:39.370  -->  00:09:41.199
different combinations that you can use

227

00:09:41.199  -->  00:09:45.040
about them and all of this times in into

228

00:09:45.040  -->  00:09:46.720
a very interesting concept that I

229

00:09:46.720  -->  00:09:48.430
learned about quite recently which is

230

00:09:48.430  -->  00:09:52.480
called lygometry, lygometry is the

231

00:09:52.480  -->  00:09:55.930
study of measuring what you don't know

232

00:09:55.930  -->  00:09:58.329
so quantifying what you don't know so

233

00:09:58.329  -->  00:10:03.040
lygo is from the word shadow and metri

234

00:10:03.040  -->  00:10:05.410
is from measure so measuring the shadow

235

00:10:05.410  -->  00:10:06.850
measuring what unknown and there's a

236

00:10:06.850  -->  00:10:09.670
very good TED talk on youtube by me into

237

00:10:09.670  -->  00:10:11.559
funny on the commentary he actually came

238

00:10:11.559  -->  00:10:13.839
up with this term I highly recommend

239

00:10:13.839  -->  00:10:15.519
checking it out and maybe that'll

240

00:10:15.519  -->  00:10:18.639
inspire you to ask a lot more questions

241

00:10:18.639  -->  00:10:20.620
and experiment a lot with this

242

00:10:20.620  -->  00:10:22.389
programming language and I look forward

243

00:10:22.389  -->  00:10:23.980
to seeing you in the next tutorial

244

00:10:23.980  -->  00:10:29.359
until then the coding.
