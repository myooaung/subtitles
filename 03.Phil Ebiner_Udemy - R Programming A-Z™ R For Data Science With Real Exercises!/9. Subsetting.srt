1

00:00:00,000  -->  00:00:07,109
Hello and welcome back to the course on

2

00:00:07,109  -->  00:00:09,030
R programming. I hope you had a chance

3

00:00:09,030  -->  00:00:11,670
to play around with the matplot function and

4

00:00:11,670  -->  00:00:13,230
that you were able to create some

5

00:00:13,230  -->  00:00:16,170
impressive chart and as you can tell it's

6

00:00:16,170  -->  00:00:18,090
getting pretty exciting already. We're

7

00:00:18,090  -->  00:00:20,279
working with charts, we're looking at the

8

00:00:20,279  -->  00:00:22,230
basketball data. What's coming up next

9

00:00:22,230  -->  00:00:24,390
right? So what we're talking about today

10

00:00:24,390  -->  00:00:27,539
is subsetting. Subsetting is a very

11

00:00:27,539  -->  00:00:29,640
important topic in R and actually a

12

00:00:29,640  -->  00:00:32,579
lot of R users get it wrong.

13

00:00:32,579  -->  00:00:35,010
In fact some R programmers can go for

14

00:00:35,010  -->  00:00:37,680
years without knowing exactly what

15

00:00:37,680  -->  00:00:39,960
subsetting is and how it works,

16

00:00:39,960  -->  00:00:41,640
thinking that they do know it until they

17

00:00:41,640  -->  00:00:44,070
run into a problem one day and then only

18

00:00:44,070  -->  00:00:47,160
they find out about subsetting. So today I

19

00:00:47,160  -->  00:00:48,719
want to make sure that you will never

20

00:00:48,719  -->  00:00:50,910
ever end up in a situation like that and

21

00:00:50,910  -->  00:00:52,590
that's why we're going to get this topic

22

00:00:52,590  -->  00:00:53,910
down pat.

23

00:00:53,910  -->  00:00:56,309
Alright so let's go to a new file and

24

00:00:56,309  -->  00:00:58,410
the way I want to introduce this topic

25

00:00:58,410  -->  00:01:00,809
is through something you already know, so

26

00:01:00,809  -->  00:01:03,059
we've already talked about using this

27

00:01:03,059  -->  00:01:05,220
square brackets with vectors. So let's

28

00:01:05,220  -->  00:01:07,380
create a vector and in that vector we'll

29

00:01:07,380  -->  00:01:09,810
just put five values, just five letters

30

00:01:09,810  -->  00:01:11,939
and if we run this lecture there they

31

00:01:11,939  -->  00:01:15,240
are those are our five letters. Now we

32

00:01:15,240  -->  00:01:17,820
know that if we want to extract just the

33

00:01:17,820  -->  00:01:20,159
first and the fifth letter, then to do it

34

00:01:20,159  -->  00:01:22,200
we need to type in X square brackets

35

00:01:22,200  -->  00:01:26,430
then C-1 and 5 because C-1 and

36

00:01:26,430  -->  00:01:29,970
5 is just the values 1 and 5 and this

37

00:01:29,970  -->  00:01:32,490
over here tells R that we

38

00:01:32,490  -->  00:01:33,750
want to extract the first in the fifth

39

00:01:33,750  -->  00:01:35,159
value from this vector.

40

00:01:35,159  -->  00:01:37,290
Alright great, so if you want to extract

41

00:01:37,290  -->  00:01:39,780
just one value, if you want extract just

42

00:01:39,780  -->  00:01:42,000
the first value, then we would do a

43

00:01:42,000  -->  00:01:43,950
small thing, we would type in X square

44

00:01:43,950  -->  00:01:46,110
brackets 1 and we're pretty comfortable

45

00:01:46,110  -->  00:01:47,340
with that already.

46

00:01:47,340  -->  00:01:48,899
Now the interesting thing is that what

47

00:01:48,899  -->  00:01:50,700
we are actually doing is we're actually

48

00:01:50,700  -->  00:01:53,970
subsetting the vector X right? So

49

00:01:53,970  -->  00:01:56,100
originally we had a vector of five

50

00:01:56,100  -->  00:01:58,409
values then we have a vector of two

51

00:01:58,409  -->  00:02:00,270
values and finally we have a vector of

52

00:02:00,270  -->  00:02:02,369
just one value and we know that this is

53

00:02:02,369  -->  00:02:04,049
a vector because we've talked about that

54

00:02:04,049  -->  00:02:07,500
in R even a single variable is stored

55

00:02:07,500  -->  00:02:08,729
as a vector.

56

00:02:08,729  -->  00:02:12,120
Okay so every time you subset a vector,

57

00:02:12,120  -->  00:02:13,350
you get a vector.

58

00:02:13,350  -->  00:02:16,110
Great, but now let's look at a similar

59

00:02:16,110  -->  00:02:18,780
concept with matrices because you can

60

00:02:18,780  -->  00:02:20,970
also subset matrices. Let's say we look

61

00:02:20,970  -->  00:02:23,010
at the games matrix that we've been

62

00:02:23,010  -->  00:02:24,930
using so far and these are the games

63

00:02:24,930  -->  00:02:27,300
that the players have played. Now let's

64

00:02:27,300  -->  00:02:31,200
say we want to look at just a subset of

65

00:02:31,200  -->  00:02:33,210
this matrix. Let's say we want to look at

66

00:02:33,210  -->  00:02:35,940
the first three players or the top

67

00:02:35,940  -->  00:02:38,610
player, top paid players in the NBA Kobe

68

00:02:38,610  -->  00:02:41,400
Bryant, Joe Johnson and Lebron James and

69

00:02:41,400  -->  00:02:44,130
we want to look at their stats or the

70

00:02:44,130  -->  00:02:45,750
number of the games they've played only for

71

00:02:45,750  -->  00:02:47,760
the past five years so it felt intense

72

00:02:47,760  -->  00:02:48,840
2014.

73

00:02:48,840  -->  00:02:50,970
How would we write that? Well it would be

74

00:02:50,970  -->  00:02:52,830
very similar to what we've been doing

75

00:02:52,830  -->  00:02:54,600
with the vector, we would type in games

76

00:02:54,600  -->  00:02:56,640
and then we put in square brackets and

77

00:02:56,640  -->  00:02:58,950
then for rows, so there's our comma, for

78

00:02:58,950  -->  00:03:03,510
rows we would say 1:3 and for columns we would

79

00:03:03,510  -->  00:03:06,930
say 6:10. So if we run that, we get

80

00:03:06,930  -->  00:03:09,450
the first three rows and the 6th to 10th

81

00:03:09,450  -->  00:03:11,970
columns. Exactly, what we wanted and this

82

00:03:11,970  -->  00:03:13,740
time it looks like the subset of a

83

00:03:13,740  -->  00:03:16,980
matrix is also matrix. Great!  Now let's

84

00:03:16,980  -->  00:03:18,960
try another example, let's say we want to

85

00:03:18,960  -->  00:03:21,870
compare the top paid player in this

86

00:03:21,870  -->  00:03:24,630
list and the lowest paid player in this

87

00:03:24,630  -->  00:03:25,260
list,

88

00:03:25,260  -->  00:03:28,110
Kobe Bryant and Dwyane Wade. So how would

89

00:03:28,110  -->  00:03:29,700
we do that and we want to compare them

90

00:03:29,700  -->  00:03:31,740
across all the years the number of games

91

00:03:31,740  -->  00:03:34,650
are played. Well how the way to do that

92

00:03:34,650  -->  00:03:36,750
is to say games and then in square

93

00:03:36,750  -->  00:03:40,320
brackets we would say C-1 and 10 right? So

94

00:03:40,320  -->  00:03:42,270
we want just the first and the 10th rows

95

00:03:42,270  -->  00:03:44,730
and then for columns we just leave a

96

00:03:44,730  -->  00:03:46,710
blank and we've also talked about that

97

00:03:46,710  -->  00:03:50,040
that if you want just a certain row,

98

00:03:50,040  -->  00:03:51,750
then you just type in the row number,

99

00:03:51,750  -->  00:03:53,940
comma blank in the square brackets and

100

00:03:53,940  -->  00:03:55,200
that's exactly what we're doing, we just

101

00:03:55,200  -->  00:03:57,990
selecting two rows here. We run that, we

102

00:03:57,990  -->  00:04:00,270
get the first and the 10th row and once

103

00:04:00,270  -->  00:04:02,880
again we get a matrix and one more

104

00:04:02,880  -->  00:04:05,520
example like that would be if we want to

105

00:04:05,520  -->  00:04:09,180
select, let's say 2008-2009, we just want to

106

00:04:09,180  -->  00:04:11,790
analyze those two years and for all the

107

00:04:11,790  -->  00:04:14,490
players, then we would say games in

108

00:04:14,490  -->  00:04:16,770
square brackets we would type in blank comma

109

00:04:16,770  -->  00:04:20,220
C and this time instead of counting out

110

00:04:20,220  -->  00:04:22,650
every single column we would just type in

111

00:04:22,650  -->  00:04:24,540
the names of these columns because

112

00:04:24,540  -->  00:04:26,880
that's another thing we talked about we

113

00:04:26,880  -->  00:04:30,540
you know that we can use names in named

114

00:04:30,540  -->  00:04:33,090
objects and in this case it would be

115

00:04:33,090  -->  00:04:36,510
like that, if we run that we get a matrix

116

00:04:36,510  -->  00:04:38,610
again. All of the rows and just the two

117

00:04:38,610  -->  00:04:39,720
columns that we wanted.

118

00:04:39,720  -->  00:04:42,330
Ok so so far so good, looks like every

119

00:04:42,330  -->  00:04:45,330
time we subset a matrix we get a matrix,

120

00:04:45,330  -->  00:04:48,270
however it's not always the case. So

121

00:04:48,270  -->  00:04:49,860
let's look at another example, let's say

122

00:04:49,860  -->  00:04:53,670
we want to extract games and we just

123

00:04:53,670  -->  00:04:56,250
want to extract the first row, just Kobe

124

00:04:56,250  -->  00:04:59,340
Bryant, we say one comma blank and we

125

00:04:59,340  -->  00:05:02,040
run that, we get something similar

126

00:05:02,040  -->  00:05:03,540
something that looks like a matrix but

127

00:05:03,540  -->  00:05:06,060
not a not quite so if we compare it to

128

00:05:06,060  -->  00:05:08,520
this matrix here you can see that this

129

00:05:08,520  -->  00:05:11,040
matrix has row names, this matrix

130

00:05:11,040  -->  00:05:13,950
doesn't. Why is that? And is this a matrix

131

00:05:13,950  -->  00:05:15,570
in the first place?

132

00:05:15,570  -->  00:05:17,760
Well actually it isn't and we can prove

133

00:05:17,760  -->  00:05:20,160
that if we simply run that IS matrix

134

00:05:20,160  -->  00:05:24,300
function and we take this our new object

135

00:05:24,300  -->  00:05:25,950
and we put it in these matrix function

136

00:05:25,950  -->  00:05:28,140
we check we get false.

137

00:05:28,140  -->  00:05:30,600
Why is that? Well because it's actually a

138

00:05:30,600  -->  00:05:34,200
vector, if we check vector this vector we

139

00:05:34,200  -->  00:05:36,060
get true interesting.

140

00:05:36,060  -->  00:05:38,010
Ok let's have a look at another example

141

00:05:38,010  -->  00:05:39,720
before we explain that.

142

00:05:39,720  -->  00:05:42,390
Let's say we want games and we just want

143

00:05:42,390  -->  00:05:44,820
one value, let's say we want Kobe

144

00:05:44,820  -->  00:05:48,300
Bryant so the first row and 2009

145

00:05:48,300  -->  00:05:50,970
to the fifth column would go games

146

00:05:50,970  -->  00:05:54,180
one and five and we run that and so we

147

00:05:54,180  -->  00:05:56,100
got the one value but it's not a matrix

148

00:05:56,100  -->  00:05:58,140
for sure, it's a vector again.

149

00:05:58,140  -->  00:06:00,540
So what is happening here? Why are we

150

00:06:00,540  -->  00:06:02,820
getting vectors instead of matrices in

151

00:06:02,820  -->  00:06:04,170
these two cases?

152

00:06:04,170  -->  00:06:06,930
Well what's going on is actually the

153

00:06:06,930  -->  00:06:10,080
square brackets have this specific

154

00:06:10,080  -->  00:06:13,230
quality to the them which a lot of R

155

00:06:13,230  -->  00:06:15,630
users might call the flaw but in

156

00:06:15,630  -->  00:06:17,370
reality is just how the language was

157

00:06:17,370  -->  00:06:20,010
designed. So what what is going on will

158

00:06:20,010  -->  00:06:24,120
R is trying to guess what you want. So in

159

00:06:24,120  -->  00:06:26,190
all these instances obviously you want

160

00:06:26,190  -->  00:06:27,360
to matrix because you're getting a

161

00:06:27,360  -->  00:06:30,960
two-dimensional object but here and here

162

00:06:30,960  -->  00:06:33,300
your object is no longer two-dimensional,

163

00:06:33,300  -->  00:06:35,550
so R things well maybe what you were

164

00:06:35,550  -->  00:06:38,040
after was actually a vector and it

165

00:06:38,040  -->  00:06:39,900
returns you a vector so in this case it's

166

00:06:39,900  -->  00:06:40,169
a

167

00:06:40,169  -->  00:06:42,659
named vector, it's got the elements a

168

00:06:42,659  -->  00:06:45,479
name. In this case, you just get a vector

169

00:06:45,479  -->  00:06:49,409
of one value 73 and why does R do that?

170

00:06:49,409  -->  00:06:51,810
Well because let's remember that R is

171

00:06:51,810  -->  00:06:54,120
not just a programming language.

172

00:06:54,120  -->  00:06:55,680
It's a language for statisticians and

173

00:06:55,680  -->  00:06:57,479
mathematicians and there's always going

174

00:06:57,479  -->  00:06:59,729
to be this trade-off between programming

175

00:06:59,729  -->  00:07:01,379
and following strict rules and

176

00:07:01,379  -->  00:07:04,529
procedures and fast agile analysis of

177

00:07:04,529  -->  00:07:07,349
data. So in this case R is guessing

178

00:07:07,349  -->  00:07:09,419
that in most cases when you would want

179

00:07:09,419  -->  00:07:11,669
to extract a one-dimensional object

180

00:07:11,669  -->  00:07:13,860
from a matrix, you would want a vector,

181

00:07:13,860  -->  00:07:15,569
you wouldn't want to matrix. So that's

182

00:07:15,569  -->  00:07:16,800
why it's doing that.

183

00:07:16,800  -->  00:07:19,229
How do we fix that? Well to get the

184

00:07:19,229  -->  00:07:21,270
default behavior of the square brackets

185

00:07:21,270  -->  00:07:23,009
and by the way the default behavior of

186

00:07:23,009  -->  00:07:24,569
the square brackets and probably a

187

00:07:24,569  -->  00:07:26,610
default is not the best word. The best

188

00:07:26,610  -->  00:07:28,319
word here would be to get consistent

189

00:07:28,319  -->  00:07:29,729
behavior from the square brackets

190

00:07:29,729  -->  00:07:31,560
there's another parameter that you can

191

00:07:31,560  -->  00:07:33,150
specify. So in order to get that

192

00:07:33,150  -->  00:07:36,060
parameter you need to add another comma

193

00:07:36,060  -->  00:07:38,430
so this is your rows then you've got

194

00:07:38,430  -->  00:07:40,289
comma the columns and then there's a

195

00:07:40,289  -->  00:07:42,360
parameter which is called drop and drop

196

00:07:42,360  -->  00:07:45,479
by default it's set to true so what it

197

00:07:45,479  -->  00:07:48,000
does is you can see here is delete the

198

00:07:48,000  -->  00:07:49,680
dimensions of an aray which have only

199

00:07:49,680  -->  00:07:52,560
one level. It drops unnecessary

200

00:07:52,560  -->  00:07:55,199
dimensions so by default it's set to

201

00:07:55,199  -->  00:07:57,120
true let's set it to false, if I run this

202

00:07:57,120  -->  00:08:00,629
now, you will see that now I have a

203

00:08:00,629  -->  00:08:04,050
matrix instead of just a vector like I

204

00:08:04,050  -->  00:08:06,539
had here and what's going on is that R

205

00:08:06,539  -->  00:08:08,520
is no longer dropping this dimension so

206

00:08:08,520  -->  00:08:09,029
wroo..

207

00:08:09,029  -->  00:08:10,710
R would dropping dimension where

208

00:08:10,710  -->  00:08:12,810
there's it's only one. In this case, Kobe

209

00:08:12,810  -->  00:08:15,300
Bryant is the only row and R would just

210

00:08:15,300  -->  00:08:16,770
drop that dimension and turn this vector

211

00:08:16,770  -->  00:08:20,249
into a matrix into a vector. So here I

212

00:08:20,249  -->  00:08:21,659
can do the same thing, if I say drop

213

00:08:21,659  -->  00:08:24,839
equals false, I run that then I get to

214

00:08:24,839  -->  00:08:28,020
the consistent behavior from the square

215

00:08:28,020  -->  00:08:31,770
brackets and I get a matrix. So if you

216

00:08:31,770  -->  00:08:33,930
type and drop equals false then the

217

00:08:33,930  -->  00:08:36,510
square brackets will always return the

218

00:08:36,510  -->  00:08:39,539
same class of element or object as you

219

00:08:39,539  -->  00:08:41,760
had originally in this case we had a

220

00:08:41,760  -->  00:08:44,219
matrix so we're getting back a matrix.

221

00:08:44,219  -->  00:08:46,410
Ok so that is how subsetting works and

222

00:08:46,410  -->  00:08:47,430
it's important to know about these

223

00:08:47,430  -->  00:08:48,000
things.

224

00:08:48,000  -->  00:08:49,800
Just remember that whenever you're using the

225

00:08:49,800  -->  00:08:52,050
square brackets, R will try to

226

00:08:52,050  -->  00:08:53,580
guess what you want, if you

227

00:08:53,580  -->  00:08:55,410
don't want R to guest then don't forget

228

00:08:55,410  -->  00:08:58,020
about this. Let's call it a secret

229

00:08:58,020  -->  00:09:00,090
argument that you can pass the square

230

00:09:00,090  -->  00:09:02,670
brackets called drop and if you set

231

00:09:02,670  -->  00:09:04,920
false, then you will get the same class of

232

00:09:04,920  -->  00:09:07,020
object as we had originally. Hope that's

233

00:09:07,020  -->  00:09:08,730
useful and I'm sure that one day this

234

00:09:08,730  -->  00:09:10,530
knowledge will come in handy and now

235

00:09:10,530  -->  00:09:12,180
let's move on to the next tutorial. I

236

00:09:12,180  -->  00:09:13,710
look forward to seeing you there until

237

00:09:13,710  -->  00:09:25,179
then, happy coding!
