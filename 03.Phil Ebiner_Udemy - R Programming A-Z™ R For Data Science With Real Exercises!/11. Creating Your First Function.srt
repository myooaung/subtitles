1

00:00:00,000  -->  00:00:07,020
Hello and welcome back to the course in

2

00:00:07,020  -->  00:00:09,179
R programming. Today we've got a very

3

00:00:09,179  -->  00:00:11,010
exciting tutorial because we are going

4

00:00:11,010  -->  00:00:13,410
to create our very first function. Up

5

00:00:13,410  -->  00:00:14,910
until now we've only been using

6

00:00:14,910  -->  00:00:16,800
functions but today we're actually going

7

00:00:16,800  -->  00:00:19,380
to create one. So let's see how this is

8

00:00:19,380  -->  00:00:20,400
going to happen.

9

00:00:20,400  -->  00:00:21,990
What are we going to create a function

10

00:00:21,990  -->  00:00:24,449
for? Well you see this bit of code over

11

00:00:24,449  -->  00:00:27,630
here that we're using to visualize our

12

00:00:27,630  -->  00:00:31,170
data, it happens to be that we're

13

00:00:31,170  -->  00:00:32,969
always copying it along we're always

14

00:00:32,969  -->  00:00:34,800
dragging this code along whenever we

15

00:00:34,800  -->  00:00:37,350
want to create a new chart, so we have

16

00:00:37,350  -->  00:00:39,540
this code here right, we have this code

17

00:00:39,540  -->  00:00:41,520
here and now we have it here, so whenever

18

00:00:41,520  -->  00:00:43,469
we want to draw create a chart we have

19

00:00:43,469  -->  00:00:46,770
to copy this code along and how about we

20

00:00:46,770  -->  00:00:49,920
find a way to encapsulate this code in a

21

00:00:49,920  -->  00:00:52,530
simple form, so that whenever we want to

22

00:00:52,530  -->  00:00:54,870
create a chart we don't have to type up

23

00:00:54,870  -->  00:00:57,239
all of this code again or even copy it.

24

00:00:57,239  -->  00:00:59,879
We just call that simple form and that's

25

00:00:59,879  -->  00:01:01,800
exactly what functions are for, functions are

26

00:01:01,800  -->  00:01:05,339
designed to encapsulate code that does

27

00:01:05,339  -->  00:01:07,830
something in just one object inside the

28

00:01:07,830  -->  00:01:09,330
function itself and then instead of

29

00:01:09,330  -->  00:01:11,040
typing this code up every time you can

30

00:01:11,040  -->  00:01:13,110
just call the function and possibly some

31

00:01:13,110  -->  00:01:14,970
parameters and the code will work.

32

00:01:14,970  -->  00:01:16,500
Alright so that's exactly what we're

33

00:01:16,500  -->  00:01:18,750
going to do, we'll do it by step so that

34

00:01:18,750  -->  00:01:20,640
we don't get overwhelmed. We're going to

35

00:01:20,640  -->  00:01:23,970
start by just encapsulating all of this

36

00:01:23,970  -->  00:01:25,830
code, so let's create a function that

37

00:01:25,830  -->  00:01:28,409
visualizes minutes played for different

38

00:01:28,409  -->  00:01:30,240
players. So we don't need this over here

39

00:01:30,240  -->  00:01:32,250
we're going to encapsulate all of this

40

00:01:32,250  -->  00:01:34,140
inside a function right? So how do we

41

00:01:34,140  -->  00:01:36,030
create a function? It's actually pretty

42

00:01:36,030  -->  00:01:38,759
straightforward, it's very similar to the

43

00:01:38,759  -->  00:01:41,310
structure that we had for loops, like

44

00:01:41,310  -->  00:01:43,710
for loop, a while loop and so on. So let's

45

00:01:43,710  -->  00:01:45,540
check it out, to create a function you

46

00:01:45,540  -->  00:01:47,909
type in the keyword function, then you

47

00:01:47,909  -->  00:01:49,770
type in normal brackets and then you

48

00:01:49,770  -->  00:01:52,470
type in curly brackets and you put the

49

00:01:52,470  -->  00:01:57,210
code of your function, the body into the

50

00:01:57,210  -->  00:01:59,549
curly brackets. There we go, so that

51

00:01:59,549  -->  00:02:01,290
function is pretty much ready

52

00:02:01,290  -->  00:02:02,939
what we need to do now is we just need

53

00:02:02,939  -->  00:02:05,250
to assign it a name and to assign it a name, you

54

00:02:05,250  -->  00:02:07,740
just type in the name before, so let's

55

00:02:07,740  -->  00:02:09,869
say myplot that's going to be the name

56

00:02:09,869  -->  00:02:12,240
of a function and then you put the

57

00:02:12,240  -->  00:02:15,060
arrow. So basically here's myplot is

58

00:02:15,060  -->  00:02:17,220
the object and inside that object you're

59

00:02:17,220  -->  00:02:18,960
going to put not just like a value of

60

00:02:18,960  -->  00:02:20,490
vector or matrix you're putting a

61

00:02:20,490  -->  00:02:23,010
function. So function's also an object in

62

00:02:23,010  -->  00:02:26,880
R and now if I run this code, I have a

63

00:02:26,880  -->  00:02:28,530
function myplot. So if I look here,

64

00:02:28,530  -->  00:02:31,590
you'll see it here myplot function and

65

00:02:31,590  -->  00:02:34,500
now if I just call myplot and run it,

66

00:02:34,500  -->  00:02:36,120
What it will do is it will actually

67

00:02:36,120  -->  00:02:38,100
create this visualization. Now we didn't

68

00:02:38,100  -->  00:02:39,420
see anything happened because it's the same

69

00:02:39,420  -->  00:02:41,790
visualization. Let's change the player that

70

00:02:41,790  -->  00:02:43,110
we're visualizing, let's say we're

71

00:02:43,110  -->  00:02:45,390
visualizing the second player.

72

00:02:45,390  -->  00:02:48,150
Let's change that here and let's rerun

73

00:02:48,150  -->  00:02:52,110
this function and now let's execute it.

74

00:02:52,110  -->  00:02:54,360
You can see the function has changed. Now the

75

00:02:54,360  -->  00:02:55,650
color hasn't changed but that's because

76

00:02:55,650  -->  00:02:58,380
that's how a legend is designed, it will

77

00:02:58,380  -->  00:03:01,260
the top player will always in our data

78

00:03:01,260  -->  00:03:03,000
set that we visualized always have this

79

00:03:03,000  -->  00:03:06,210
color. So if we visualize that say the

80

00:03:06,210  -->  00:03:10,680
second and third players right like that

81

00:03:10,680  -->  00:03:13,320
if we run this function again, create it

82

00:03:13,320  -->  00:03:15,420
again and we visualize it now we have

83

00:03:15,420  -->  00:03:18,720
two players. Ok that's good but as

84

00:03:18,720  -->  00:03:20,280
you can see every time we want to change

85

00:03:20,280  -->  00:03:21,960
the players we have to go back into the

86

00:03:21,960  -->  00:03:24,900
function and actually change these

87

00:03:24,900  -->  00:03:26,640
values to the players we want to visualize.

88

00:03:26,640  -->  00:03:28,980
Now, we don't want that, we want our

89

00:03:28,980  -->  00:03:30,720
function to be flexible.

90

00:03:30,720  -->  00:03:32,640
How do we do that? Well in order to do

91

00:03:32,640  -->  00:03:34,470
that we use parameters and we've already

92

00:03:34,470  -->  00:03:36,960
encountered parameters numerous times

93

00:03:36,960  -->  00:03:38,670
when we were calling functions like

94

00:03:38,670  -->  00:03:43,050
sequence or replicate or R norm other

95

00:03:43,050  -->  00:03:44,250
any other function that we've been

96

00:03:44,250  -->  00:03:46,230
working with most of them actually take

97

00:03:46,230  -->  00:03:48,750
parameters. So how do we specify

98

00:03:48,750  -->  00:03:51,120
parameters for R function? Well it's

99

00:03:51,120  -->  00:03:53,820
also pretty simple. Here in the brackets,

100

00:03:53,820  -->  00:03:55,770
you need to specify the parameter name.

101

00:03:55,770  -->  00:03:58,920
So let's call our parameter rows,

102

00:03:58,920  -->  00:04:01,320
so which rows do we want to look at? Then,

103

00:04:01,320  -->  00:04:04,080
all you have to do is copy this in the

104

00:04:04,080  -->  00:04:06,450
place of where you want that value to go.

105

00:04:06,450  -->  00:04:08,760
So we wanted to go here and we wanted to go

106

00:04:08,760  -->  00:04:09,360
here.

107

00:04:09,360  -->  00:04:12,090
So now we've got this variable right? So

108

00:04:12,090  -->  00:04:14,700
rows became a variable and when whatever

109

00:04:14,700  -->  00:04:16,770
value put we put in here, the function will

110

00:04:16,770  -->  00:04:18,720
automatically look for that word

111

00:04:18,720  -->  00:04:20,310
throughout the code and we'll replace it.

112

00:04:20,310  -->  00:04:22,020
It will replace it here and we'll replace

113

00:04:22,020  -->  00:04:24,090
it here. It's as simple as that.

114

00:04:24,090  -->  00:04:25,620
So if I run this now,

115

00:04:25,620  -->  00:04:28,410
if I create this function and then for

116

00:04:28,410  -->  00:04:30,540
myplot now I supplied some variables, let's

117

00:04:30,540  -->  00:04:33,900
say, I say the first to the fifth players.

118

00:04:33,900  -->  00:04:35,940
What the function will do and this is

119

00:04:35,940  -->  00:04:37,650
the important part. The function will

120

00:04:37,650  -->  00:04:39,510
take this value because it will see

121

00:04:39,510  -->  00:04:42,090
aha, I'm looking for a value, their the

122

00:04:42,090  -->  00:04:44,040
user is supplying me a value. It's supplying me

123

00:04:44,040  -->  00:04:46,860
a vector. So I'm going to take this word

124

00:04:46,860  -->  00:04:49,410
rows and everywhere I see rows inside

125

00:04:49,410  -->  00:04:51,030
the code of the function I'm going to

126

00:04:51,030  -->  00:04:52,530
replace it with the value that's being

127

00:04:52,530  -->  00:04:55,830
supplied. Ok so let's try that out. As you

128

00:04:55,830  -->  00:04:57,419
can see, it's beautiful.

129

00:04:57,419  -->  00:04:59,729
We have the five players visualize.

130

00:04:59,729  -->  00:05:01,860
Awesome, let's try a different one. Let's say,

131

00:05:01,860  -->  00:05:04,050
players 1 to 10

132

00:05:04,050  -->  00:05:06,960
all of them, see now we have all of them.

133

00:05:06,960  -->  00:05:08,550
Ok so we're nearly done with the

134

00:05:08,550  -->  00:05:09,090
function.

135

00:05:09,090  -->  00:05:10,410
The last thing we want to do is we want

136

00:05:10,410  -->  00:05:13,650
to use this function to visualize other

137

00:05:13,650  -->  00:05:16,199
data sets that we have. Right now, the

138

00:05:16,199  -->  00:05:17,130
only data set we're visualizing is

139

00:05:17,130  -->  00:05:19,229
minutes played and if we wanted to change

140

00:05:19,229  -->  00:05:21,449
it would have to go in here and change

141

00:05:21,449  -->  00:05:24,240
this to games right? We would have to go

142

00:05:24,240  -->  00:05:26,340
in and then we would have to run this

143

00:05:26,340  -->  00:05:30,000
code, again recreate the function and

144

00:05:30,000  -->  00:05:31,800
then plot and now we see the games

145

00:05:31,800  -->  00:05:35,160
they've played or if we wanted to visualize

146

00:05:35,160  -->  00:05:37,410
the points that they got for their teams

147

00:05:37,410  -->  00:05:40,740
now if we run this code again, we can

148

00:05:40,740  -->  00:05:42,539
visualize the point that they got

149

00:05:42,539  -->  00:05:44,400
alright. So you can see that every time

150

00:05:44,400  -->  00:05:46,650
once again there's this moving bit in

151

00:05:46,650  -->  00:05:50,130
the function that we have to change and

152

00:05:50,130  -->  00:05:52,020
that makes the function inflexible. How

153

00:05:52,020  -->  00:05:54,120
do we change this? How do we make the

154

00:05:54,120  -->  00:05:55,949
function flexible?

155

00:05:55,949  -->  00:05:57,599
Well it's pretty simple, all we have to

156

00:05:57,599  -->  00:06:00,150
do is once again replay, create

157

00:06:00,150  -->  00:06:01,740
another parameter. So let's put one here,

158

00:06:01,740  -->  00:06:03,449
we'll put it first because it's more

159

00:06:03,449  -->  00:06:06,479
important and we'll call it, let's call it

160

00:06:06,479  -->  00:06:09,810
data. So now we're saying that we want a

161

00:06:09,810  -->  00:06:11,580
parameter positive function which is

162

00:06:11,580  -->  00:06:13,680
data and wherever in this code we see

163

00:06:13,680  -->  00:06:15,840
data we're going to replace it with the

164

00:06:15,840  -->  00:06:18,000
value that's going to be supplied.

165

00:06:18,000  -->  00:06:19,860
So here we're going to replace points

166

00:06:19,860  -->  00:06:21,750
with data and so whatever is going to be

167

00:06:21,750  -->  00:06:22,889
supplied as data is going to be

168

00:06:22,889  -->  00:06:25,349
replaced here, so if I execute the

169

00:06:25,349  -->  00:06:28,440
function, I create the function and then

170

00:06:28,440  -->  00:06:31,860
here I need to supply the data. So let's

171

00:06:31,860  -->  00:06:33,750
say I want to visualize salary for all

172

00:06:33,750  -->  00:06:36,930
ten players. If I run that, you'll see

173

00:06:36,930  -->  00:06:38,849
that now we see the salary for all

174

00:06:38,849  -->  00:06:41,339
ten players. Once again, I can change

175

00:06:41,339  -->  00:06:43,379
the players I want to visualize 1:2.

176

00:06:43,379  -->  00:06:47,099
Alright, so that's beautiful isn't it? It's,

177

00:06:47,099  -->  00:06:48,749
we're visualizing exactly what we

178

00:06:48,749  -->  00:06:51,629
want and the final bit, the bonus bit

179

00:06:51,629  -->  00:06:53,339
on top of everything is we're going to

180

00:06:53,339  -->  00:06:55,619
set a default parameter. You know how

181

00:06:55,619  -->  00:06:57,689
sometimes when we are using functions

182

00:06:57,689  -->  00:06:58,830
that they have default parameters

183

00:06:58,830  -->  00:07:01,469
already? Well this is exactly what we're

184

00:07:01,469  -->  00:07:03,509
going to do now for our function. We're

185

00:07:03,509  -->  00:07:05,399
going to say that rows will have a

186

00:07:05,399  -->  00:07:07,800
default value, the default value will be

187

00:07:07,800  -->  00:07:12,269
equals 1 to 10, so if the user doesn't

188

00:07:12,269  -->  00:07:14,610
pass a parameter for rows. We want to

189

00:07:14,610  -->  00:07:16,860
visualize all of them. So let's see, let's

190

00:07:16,860  -->  00:07:17,639
try that,

191

00:07:17,639  -->  00:07:19,889
let's create this function like this now

192

00:07:19,889  -->  00:07:24,479
and now we're going to visualize it

193

00:07:24,479  -->  00:07:27,330
right? So instead of actually putting in

194

00:07:27,330  -->  00:07:28,529
the row numbers that we want to

195

00:07:28,529  -->  00:07:31,139
visualize, let's say we just don't put

196

00:07:31,139  -->  00:07:33,839
the row numbers in and we run it. As you

197

00:07:33,839  -->  00:07:36,569
can see, the function has now visualized

198

00:07:36,569  -->  00:07:38,969
all of the rows for us and that's

199

00:07:38,969  -->  00:07:42,240
exactly what we were after.

200

00:07:42,240  -->  00:07:44,909
Ok so that makes this function very

201

00:07:44,909  -->  00:07:46,919
flexible, now you can set any data set

202

00:07:46,919  -->  00:07:48,779
and any rows that you want and you don't

203

00:07:48,779  -->  00:07:50,519
even have to set the rows. So you can

204

00:07:50,519  -->  00:07:53,729
type in minutes played right and you can

205

00:07:53,729  -->  00:07:55,740
run it or you can type in minutes played

206

00:07:55,740  -->  00:07:59,399
divided by  games because we know that a matrix divided by

207

00:07:59,399  -->  00:08:01,949
matrix is the matrix and we run that. We

208

00:08:01,949  -->  00:08:04,619
visualize all the players or you can

209

00:08:04,619  -->  00:08:07,349
look at a certain players, so let's look

210

00:08:07,349  -->  00:08:10,379
at third player you can see that that's

211

00:08:10,379  -->  00:08:12,419
how many minutes per game Lebron James

212

00:08:12,419  -->  00:08:14,579
has played in the past 10 years.

213

00:08:14,579  -->  00:08:17,249
Alright, so that's us creating R function.

214

00:08:17,249  -->  00:08:20,669
It was a step-by-step process. I hope it

215

00:08:20,669  -->  00:08:24,659
was quite clear what we're doing and now

216

00:08:24,659  -->  00:08:27,449
we have a very useful function that we

217

00:08:27,449  -->  00:08:30,990
can use in analyzing our data set. So we

218

00:08:30,990  -->  00:08:32,490
will get to that in the next tutorial

219

00:08:32,490  -->  00:08:34,620
and will try some very cool and

220

00:08:34,620  -->  00:08:37,199
interesting insights from this NBA

221

00:08:37,199  -->  00:08:40,229
basketball data and I'll look forward to seeing you then.

222

00:08:40,229  -->  00:08:52,190
Until next time, happy coding!
