WEBVTT
1

00:00:00.000  -->  00:00:07.200
Hello and welcome back to the course in

2

00:00:07.200  -->  00:00:09.150
R programming. Hope you're enjoying this

3

00:00:09.150  -->  00:00:11.160
section and today we're talking about

4

00:00:11.160  -->  00:00:14.490
functions to be honest it feels like we

5

00:00:14.490  -->  00:00:16.109
don't really need to talk about

6

00:00:16.109  -->  00:00:18.180
functions we've been using them all

7

00:00:18.180  -->  00:00:21.210
along and we already know functions

8

00:00:21.210  -->  00:00:23.550
pretty well but nevertheless let's

9

00:00:23.550  -->  00:00:26.010
solidify this knowledge and let's make

10

00:00:26.010  -->  00:00:28.080
sure we put everything into the right

11

00:00:28.080  -->  00:00:28.920
places.

12

00:00:28.920  -->  00:00:31.470
Alright so what a functions? How do they

13

00:00:31.470  -->  00:00:32.160
work?

14

00:00:32.160  -->  00:00:34.739
Why do I have a blender here and some

15

00:00:34.739  -->  00:00:36.000
fruit as movie

16

00:00:36.000  -->  00:00:38.309
well because this is one of the best

17

00:00:38.309  -->  00:00:40.020
representations of how functions

18

00:00:40.020  -->  00:00:42.300
actually work. Function you can think of

19

00:00:42.300  -->  00:00:46.410
a function as a blender and it requires

20

00:00:46.410  -->  00:00:48.510
some inputs right like a blender

21

00:00:48.510  -->  00:00:51.000
requires fruit so there's a function

22

00:00:51.000  -->  00:00:54.690
requires some input variables and once

23

00:00:54.690  -->  00:00:56.250
you put those variables inside the

24

00:00:56.250  -->  00:00:58.109
function does something like a blender

25

00:00:58.109  -->  00:01:01.800
it blends the fruit and berries and so

26

00:01:01.800  -->  00:01:04.559
on and then it produces something on the

27

00:01:04.559  -->  00:01:07.350
output so a blender will produce a

28

00:01:07.350  -->  00:01:10.110
delicious movie as we can see here a

29

00:01:10.110  -->  00:01:12.810
function will produce some output result

30

00:01:12.810  -->  00:01:15.570
whether it's a variable, vector well we

31

00:01:15.570  -->  00:01:17.610
actually know that all variables are in

32

00:01:17.610  -->  00:01:19.740
fact vectors so function can produce

33

00:01:19.740  -->  00:01:23.009
lots of different types of output and

34

00:01:23.009  -->  00:01:25.229
that is basically what functions before

35

00:01:25.229  -->  00:01:27.570
they take your inputs they do something

36

00:01:27.570  -->  00:01:30.299
with them they add on some of their

37

00:01:30.299  -->  00:01:32.670
internal things that they have within

38

00:01:32.670  -->  00:01:35.100
them and then they produce an output. So

39

00:01:35.100  -->  00:01:36.750
with that sort of been using them before

40

00:01:36.750  -->  00:01:39.840
so far and now let's jump straight into

41

00:01:39.840  -->  00:01:42.659
R studio and have a look at all the

42

00:01:42.659  -->  00:01:45.149
functions that we've already used.

43

00:01:45.149  -->  00:01:49.439
Ok so let's get started to get off I'm

44

00:01:49.439  -->  00:01:50.820
actually going to challenge, I'm going to

45

00:01:50.820  -->  00:01:52.470
challenge you to pause this video

46

00:01:52.470  -->  00:01:55.530
glittery for like two minutes and try to

47

00:01:55.530  -->  00:01:57.899
remember all the functions that we've

48

00:01:57.899  -->  00:02:01.380
been through so far in this course and

49

00:02:01.380  -->  00:02:03.240
I'm also going to do it with you now so

50

00:02:03.240  -->  00:02:06.119
forgive me if I don't get all of them

51

00:02:06.119  -->  00:02:08.459
but these are the ones I remember you're

52

00:02:08.459  -->  00:02:09.420
ready let's go.

53

00:02:09.420  -->  00:02:11.190
So I remember rnorm reviews down

54

00:02:11.190  -->  00:02:13.590
quite a lot then we had

55

00:02:13.590  -->  00:02:15.480
three functions for creating vectors

56

00:02:15.480  -->  00:02:17.610
right we have combined which is just the

57

00:02:17.610  -->  00:02:20.099
see then we had the sequence and we

58

00:02:20.099  -->  00:02:22.500
had the replicate so those were the

59

00:02:22.500  -->  00:02:24.780
three that family of functions for

60

00:02:24.780  -->  00:02:26.370
creating vectors then we had the

61

00:02:26.370  -->  00:02:28.950
print function to put messages into the

62

00:02:28.950  -->  00:02:31.049
console if we're inside a loop and we

63

00:02:31.049  -->  00:02:32.940
had some functions that we kind of

64

00:02:32.940  -->  00:02:35.099
didn't talk about much we just use them

65

00:02:35.099  -->  00:02:37.739
briefly just to check what kind of

66

00:02:37.739  -->  00:02:39.629
vectors are creating a pretty

67

00:02:39.629  -->  00:02:41.819
straightforward just basically a boolean

68

00:02:41.819  -->  00:02:44.220
functions good examples of functions that

69

00:02:44.220  -->  00:02:48.840
return simply a boolean value or a

70

00:02:48.840  -->  00:02:52.170
logical of value as we call them so is a

71

00:02:52.170  -->  00:02:54.030
double is character, as you can see there

72

00:02:54.030  -->  00:02:56.310
you can just click enter and the

73

00:02:56.310  -->  00:02:59.099
automatic pop-up will finish typing the

74

00:02:59.099  -->  00:03:01.620
function for you before that at the very

75

00:03:01.620  -->  00:03:03.840
start of the course we had type off

76

00:03:03.840  -->  00:03:06.209
right type off which allowed us to

77

00:03:06.209  -->  00:03:07.680
understand whether variable is an

78

00:03:07.680  -->  00:03:10.290
integer double the character and so on

79

00:03:10.290  -->  00:03:14.549
and also we have strt which we used to

80

00:03:14.549  -->  00:03:17.250
derive a square root and we also had

81

00:03:17.250  -->  00:03:21.389
pasted there we go so those are the ones

82

00:03:21.389  -->  00:03:22.920
I remember you maybe you remember the

83

00:03:22.920  -->  00:03:25.560
bit more, if we did have more

84

00:03:25.560  -->  00:03:29.010
and as you can see quite a good variety

85

00:03:29.010  -->  00:03:33.780
of functions we explored was at 4, 9, 10, 12

86

00:03:33.780  -->  00:03:35.280
functions or radio and doesn't function

87

00:03:35.280  -->  00:03:38.310
that are in your our Arsenal and you

88

00:03:38.310  -->  00:03:40.319
should be quite comfortable with already

89

00:03:40.319  -->  00:03:42.419
but we're going to do today well today

90

00:03:42.419  -->  00:03:44.099
we're going to take it a step further we

91

00:03:44.099  -->  00:03:45.870
actually going to dig into this function

92

00:03:45.870  -->  00:03:50.639
and see a bit how they are constructed

93

00:03:50.639  -->  00:03:53.010
on the inside or more what kind of

94

00:03:53.010  -->  00:03:55.680
parameters they're expecting so far

95

00:03:55.680  -->  00:03:57.810
we've been doing it intuitively and from

96

00:03:57.810  -->  00:04:00.569
the things I've told you and now you

97

00:04:00.569  -->  00:04:02.040
will have an opportunity to actually see

98

00:04:02.040  -->  00:04:04.410
for yourself. What r tell you about these

99

00:04:04.410  -->  00:04:05.849
functions. So we're not going to

100

00:04:05.849  -->  00:04:08.130
introduce any new ones because dozens

101

00:04:08.130  -->  00:04:09.900
are really quite a lot will introduce

102

00:04:09.900  -->  00:04:11.400
your functions to put it down the course

103

00:04:11.400  -->  00:04:13.889
but for now let's just talk about this

104

00:04:13.889  -->  00:04:16.260
one handy trick that I'll share one

105

00:04:16.260  -->  00:04:19.169
which is called the question mark there

106

00:04:19.169  -->  00:04:21.359
I 've created a comment with it and now

107

00:04:21.359  -->  00:04:22.919
we're going to do is we're going to take

108

00:04:22.919  -->  00:04:25.409
all these functions and we're going to

109

00:04:25.409  -->  00:04:26.639
go through them

110

00:04:26.639  -->  00:04:28.199
and at the start well not all of them

111

00:04:28.199  -->  00:04:30.569
but some select functions at the start

112

00:04:30.569  -->  00:04:32.580
will type in the question mark so this

113

00:04:32.580  -->  00:04:35.939
is how r allows you to bring up help.

114

00:04:35.939  -->  00:04:37.379
You see the window here so far it's

115

00:04:37.379  -->  00:04:39.479
been empty we haven't used that I don't

116

00:04:39.479  -->  00:04:41.969
think we've even used it once in this

117

00:04:41.969  -->  00:04:42.659
course

118

00:04:42.659  -->  00:04:44.009
well today is the first time we're going

119

00:04:44.009  -->  00:04:46.020
to use it and if you type in a question

120

00:04:46.020  -->  00:04:48.270
like before a function and then execute

121

00:04:48.270  -->  00:04:48.960
their line

122

00:04:48.960  -->  00:04:51.900
what will happen is as usual the code is

123

00:04:51.900  -->  00:04:53.969
copied into the console is executed and

124

00:04:53.969  -->  00:04:56.520
then are automatically brings up the

125

00:04:56.520  -->  00:05:00.719
help for that specific function and as

126

00:05:00.719  -->  00:05:03.029
you can see here we've got a description

127

00:05:03.029  -->  00:05:05.969
of this function, here we go description

128

00:05:05.969  -->  00:05:08.250
of the normal distribution it tells you

129

00:05:08.250  -->  00:05:11.219
a bit of the stats and here is under

130

00:05:11.219  -->  00:05:13.680
usage it's got four functions in fact. So

131

00:05:13.680  -->  00:05:15.569
not just that one function we can we've

132

00:05:15.569  -->  00:05:17.639
got a family of functions and the one

133

00:05:17.639  -->  00:05:19.409
we're interested in is over here

134

00:05:19.409  -->  00:05:22.229
rnorm as you can see it specifies that

135

00:05:22.229  -->  00:05:24.270
the function requires three input

136

00:05:24.270  -->  00:05:26.099
variable so this think of it like the

137

00:05:26.099  -->  00:05:28.020
blender example we talked about so this

138

00:05:28.020  -->  00:05:29.999
is what needs to go inside the blender

139

00:05:29.999  -->  00:05:33.509
what's in the brackets and mean equals 0

140

00:05:33.509  -->  00:05:36.750
s d standard deviation equals one and

141

00:05:36.750  -->  00:05:38.400
then you've got a description of all of

142

00:05:38.400  -->  00:05:40.229
the arguments. So you've got the ones we

143

00:05:40.229  -->  00:05:42.629
are interested in RN mean st so n is

144

00:05:42.629  -->  00:05:44.849
number of observations if length of an

145

00:05:44.849  -->  00:05:47.069
is great and one so if you pass on a

146

00:05:47.069  -->  00:05:49.770
vector which spread and one and then

147

00:05:49.770  -->  00:05:52.139
lent is taken to be the number required,

148

00:05:52.139  -->  00:05:54.960
so basically if you if you passed what

149

00:05:54.960  -->  00:05:56.610
that means if you usually polished

150

00:05:56.610  -->  00:05:58.889
number like five or ten or a hundred but

151

00:05:58.889  -->  00:06:01.319
if you put some vector then our will

152

00:06:01.319  -->  00:06:03.839
just take the length of the vector as

153

00:06:03.839  -->  00:06:06.899
the value that you want as a number of

154

00:06:06.899  -->  00:06:08.969
variables that you want to generate. Mean

155

00:06:08.969  -->  00:06:11.699
vector of means so basically you can

156

00:06:11.699  -->  00:06:14.639
pass the values of your means that you

157

00:06:14.639  -->  00:06:16.800
wanted to generate in our case we always

158

00:06:16.800  -->  00:06:19.439
pass just one value and a vector of

159

00:06:19.439  -->  00:06:20.939
standardization so as you can see this

160

00:06:20.939  -->  00:06:23.430
function actually allows you to pass

161

00:06:23.430  -->  00:06:25.409
vectors into it but we're going to go

162

00:06:25.409  -->  00:06:28.469
into too much from that will practice

163

00:06:28.469  -->  00:06:31.139
passing a vector for the down with other

164

00:06:31.139  -->  00:06:33.000
functions but what you should take from

165

00:06:33.000  -->  00:06:35.759
here is that you can get very detailed

166

00:06:35.759  -->  00:06:38.220
description of functions

167

00:06:38.220  -->  00:06:40.890
from the help so if you ever get lost if

168

00:06:40.890  -->  00:06:42.750
you ever don't know what parameters

169

00:06:42.750  -->  00:06:44.280
departure function of how exactly it

170

00:06:44.280  -->  00:06:46.500
works just type in the ? before the name

171

00:06:46.500  -->  00:06:50.520
of function and hit execute and see what

172

00:06:50.520  -->  00:06:52.110
the help tell you.

173

00:06:52.110  -->  00:06:54.000
Alright so let's practice a bit so I'm

174

00:06:54.000  -->  00:06:56.910
going to take out there ? now and let's

175

00:06:56.910  -->  00:06:58.590
see what we can plus. So what do how do

176

00:06:58.590  -->  00:07:00.540
we normally run rnorm would say

177

00:07:00.540  -->  00:07:02.190
rnorm, we would say how many variables

178

00:07:02.190  -->  00:07:04.800
lets say 5 right and then if i hit

179

00:07:04.800  -->  00:07:07.110
command enter when return you can see

180

00:07:07.110  -->  00:07:09.240
that I've got the five variables

181

00:07:09.240  -->  00:07:11.880
generated but now we also know that they

182

00:07:11.880  -->  00:07:13.560
are two other variables that we can

183

00:07:13.560  -->  00:07:14.700
past which is the mean and standard

184

00:07:14.700  -->  00:07:17.640
deviation and why is the function

185

00:07:17.640  -->  00:07:20.160
working without passing those other two

186

00:07:20.160  -->  00:07:22.050
variables so we're only passing one but

187

00:07:22.050  -->  00:07:23.220
it's waiting for three.

188

00:07:23.220  -->  00:07:24.810
What's going on here? Well the thing is

189

00:07:24.810  -->  00:07:27.330
that you see these equal sides that

190

00:07:27.330  -->  00:07:29.669
women get here so do you see these equal

191

00:07:29.669  -->  00:07:32.760
signs right here and here as well what

192

00:07:32.760  -->  00:07:36.240
the they mean is that they are default

193

00:07:36.240  -->  00:07:38.340
values for those parameters so basically

194

00:07:38.340  -->  00:07:41.010
if you do not pass the mean or the

195

00:07:41.010  -->  00:07:44.070
standard deviation what happens is our

196

00:07:44.070  -->  00:07:46.650
takes these default values of 0 and 1

197

00:07:46.650  -->  00:07:48.030
and assume that those are the ones you

198

00:07:48.030  -->  00:07:50.280
wanted the only value that is required

199

00:07:50.280  -->  00:07:52.590
in this case is absolutely necessary is

200

00:07:52.590  -->  00:07:54.720
this and parameter because it doesn't

201

00:07:54.720  -->  00:07:56.550
have a default and makes sense right so

202

00:07:56.550  -->  00:07:58.320
r need to know how many values you

203

00:07:58.320  -->  00:08:00.870
need to generate but if we want to

204

00:08:00.870  -->  00:08:02.970
change these values we can so let's try

205

00:08:02.970  -->  00:08:05.910
it we can say, let's say just coma and

206

00:08:05.910  -->  00:08:09.270
then we'll type in let's say mean of 10

207

00:08:09.270  -->  00:08:12.180
and a standard deviation not one but

208

00:08:12.180  -->  00:08:14.400
will so its standard deviation of eight right

209

00:08:14.400  -->  00:08:15.870
now as we generate these variables.

210

00:08:15.870  -->  00:08:18.300
You'll see that they're different and

211

00:08:18.300  -->  00:08:20.700
now they're not around zero there around

212

00:08:20.700  -->  00:08:23.520
ten and and as you know from the

213

00:08:23.520  -->  00:08:26.010
previous section you kind of have a good

214

00:08:26.010  -->  00:08:27.840
understanding of what the eight means

215

00:08:27.840  -->  00:08:29.430
and standard deviation of age that means

216

00:08:29.430  -->  00:08:31.470
how far away they force the most

217

00:08:31.470  -->  00:08:34.710
variables 68.2 percent of the variables

218

00:08:34.710  -->  00:08:37.229
once we generate them like it will fall

219

00:08:37.229  -->  00:08:39.750
between 2 and 18.

220

00:08:40.250  -->  00:08:42.360
Alright so that's how we passed module

221

00:08:42.360  -->  00:08:44.760
parameters and other thing it was variable

222

00:08:44.760  -->  00:08:47.010
is that when you pass them to a function

223

00:08:47.010  -->  00:08:50.010
you can just specify them like this in

224

00:08:50.010  -->  00:08:51.779
sequence that way you have

225

00:08:51.779  -->  00:08:53.639
specify them in the right order for our

226

00:08:53.639  -->  00:08:55.620
to understand them but you can also do

227

00:08:55.620  -->  00:08:59.129
is you can actually tell our what names

228

00:08:59.129  -->  00:09:01.680
these parameters have. So you can say

229

00:09:01.680  -->  00:09:06.899
mean equals to 10 and as d equals to 8 and

230

00:09:06.899  -->  00:09:09.269
then to start here you can say n

231

00:09:09.269  -->  00:09:11.249
equals to 5 because those are the

232

00:09:11.249  -->  00:09:13.079
parameters that are is waiting for and

233

00:09:13.079  -->  00:09:15.600
mean and SD you can actually name this

234

00:09:15.600  -->  00:09:17.939
is called passing parameters named

235

00:09:17.939  -->  00:09:20.459
parameters to a function. So let's

236

00:09:20.459  -->  00:09:23.040
execute that and as you can see this

237

00:09:23.040  -->  00:09:25.050
run very well and what that allows

238

00:09:25.050  -->  00:09:26.910
you to do is it allows you to past them

239

00:09:26.910  -->  00:09:28.889
and not in sequence I could take this

240

00:09:28.889  -->  00:09:31.110
mean I could get rid of it and I could

241

00:09:31.110  -->  00:09:32.970
put it at the end I could put it off to

242

00:09:32.970  -->  00:09:34.769
the standard deviation could say mean

243

00:09:34.769  -->  00:09:37.050
equals 10 it will still work because now

244

00:09:37.050  -->  00:09:39.240
our knows which is which

245

00:09:39.240  -->  00:09:43.199
right so it logically understand where

246

00:09:43.199  -->  00:09:45.509
to get one so it for demonstration

247

00:09:45.509  -->  00:09:47.759
purposes we can see me a hundred and you

248

00:09:47.759  -->  00:09:50.309
can see these variables are now around

249

00:09:50.309  -->  00:09:54.149
concentrated around that 100 mean and

250

00:09:54.149  -->  00:09:56.309
also what this allows you to do as well

251

00:09:56.309  -->  00:09:58.350
as you can skip variable so you can say

252

00:09:58.350  -->  00:10:00.720
I don't want to possibly I'll just do

253

00:10:00.720  -->  00:10:02.879
the end and the standard deviation and

254

00:10:02.879  -->  00:10:04.980
then the mean will be taken as a default

255

00:10:04.980  -->  00:10:08.339
value of zero so let's run that now you

256

00:10:08.339  -->  00:10:10.439
can see that it works again.

257

00:10:10.439  -->  00:10:11.850
Alright that's enough with the

258

00:10:11.850  -->  00:10:13.800
rnorm lets move on to the other ones. So

259

00:10:13.800  -->  00:10:16.829
combined is pretty straightforward if

260

00:10:16.829  -->  00:10:19.259
you even type of ? here there isn't

261

00:10:19.259  -->  00:10:21.120
anything special this recursive

262

00:10:21.120  -->  00:10:22.649
parameter but we're not going to go into

263

00:10:22.649  -->  00:10:24.509
detail on that let's just keep combined

264

00:10:24.509  -->  00:10:26.370
simple it just combines the variables

265

00:10:26.370  -->  00:10:28.800
that you passed on to this function.

266

00:10:28.800  -->  00:10:31.290
Let's talk about sequence remember I

267

00:10:31.290  -->  00:10:34.679
told you that sequence is like a colon

268

00:10:34.679  -->  00:10:36.209
and blood gives you that additional

269

00:10:36.209  -->  00:10:38.250
level of flexibility and what we did

270

00:10:38.250  -->  00:10:41.160
right what we did was we said sequence

271

00:10:41.160  -->  00:10:45.689
one or something that all say 10 to 20

272

00:10:45.689  -->  00:10:49.740
and oops I did it again 10 to 20 and

273

00:10:49.740  -->  00:10:51.389
then you can specify the step left step

274

00:10:51.389  -->  00:10:54.600
of three, so then you get the variable

275

00:10:54.600  -->  00:10:56.579
between between 10 and 20 starting was

276

00:10:56.579  -->  00:10:58.259
ten with the step of three.

277

00:10:58.259  -->  00:11:00.629
So let's look at the help for sequence

278

00:11:00.629  -->  00:11:03.480
which we brought up here and here will

279

00:11:03.480  -->  00:11:05.490
actually see what we're passing so

280

00:11:05.490  -->  00:11:07.649
where passing the first argument the second

281

00:11:07.649  -->  00:11:09.720
argument and where passing the third

282

00:11:09.720  -->  00:11:11.700
argument. They actually have names which

283

00:11:11.700  -->  00:11:13.980
we haven't been using up until now. We

284

00:11:13.980  -->  00:11:15.480
haven't even known about these names so

285

00:11:15.480  -->  00:11:17.550
the names of these arguments are from

286

00:11:17.550  -->  00:11:20.760
two and by so let's go ahead and type

287

00:11:20.760  -->  00:11:25.470
mean in here so from equals 10 to 20 and

288

00:11:25.470  -->  00:11:27.660
by equals 3 maybe let's make some space.

289

00:11:27.660  -->  00:11:30.360
So if you run that again works perfectly

290

00:11:30.360  -->  00:11:31.290
fine.

291

00:11:31.290  -->  00:11:33.570
What other arguments it does a sequence

292

00:11:33.570  -->  00:11:36.450
a allow so is there additional flexibility

293

00:11:36.450  -->  00:11:38.220
that we're not using it yes of course

294

00:11:38.220  -->  00:11:40.589
there is the additional flexibility is

295

00:11:40.589  -->  00:11:43.380
that you can assist by length out. So

296

00:11:43.380  -->  00:11:45.570
length out allows you to instead of

297

00:11:45.570  -->  00:11:48.750
specifying the steps its allow you to say how

298

00:11:48.750  -->  00:11:51.450
long you want your Vector to be alright

299

00:11:51.450  -->  00:11:53.730
so let's get rid of by for now and

300

00:11:53.730  -->  00:11:57.779
let's say I want length dot out right to

301

00:11:57.779  -->  00:12:00.660
be equal to let's say I want a hundred

302

00:12:00.660  -->  00:12:03.899
steps between 10 and 20 I want a hundred

303

00:12:03.899  -->  00:12:06.779
per numbers to be taken I want this

304

00:12:06.779  -->  00:12:09.089
sequence between 10 and 20 and the step

305

00:12:09.089  -->  00:12:12.209
should be such that I will get a hundred

306

00:12:12.209  -->  00:12:15.240
numbers in the end so let's run that as

307

00:12:15.240  -->  00:12:18.089
you can see I have a hundred numbers

308

00:12:18.089  -->  00:12:20.520
here so let me open up a little bit more

309

00:12:20.520  -->  00:12:23.130
you can see here so it starts with 10

310

00:12:23.130  -->  00:12:25.260
then r has automatically calculated

311

00:12:25.260  -->  00:12:28.260
what step it has to take to get you a

312

00:12:28.260  -->  00:12:30.300
hundred numbers before we get to

313

00:12:30.300  -->  00:12:33.510
drinking and it actually got to 20 fine so

314

00:12:33.510  -->  00:12:36.750
yeah that's how it works it finds those

315

00:12:36.750  -->  00:12:40.020
steps that are required even though

316

00:12:40.020  -->  00:12:42.360
these are not intercepts. So they're

317

00:12:42.360  -->  00:12:45.120
double steps and as you can see here so

318

00:12:45.120  -->  00:12:47.940
it's human again to the help you can see

319

00:12:47.940  -->  00:12:51.450
here that by the default value of by is

320

00:12:51.450  -->  00:12:55.050
actually 2 minus from divided by length out dot

321

00:12:55.050  -->  00:12:58.200
minus one so if you specify length out

322

00:12:58.200  -->  00:13:00.750
then by will be calculated using this

323

00:13:00.750  -->  00:13:02.520
formula so we'll take the distance

324

00:13:02.520  -->  00:13:04.920
between two and from and all divided by

325

00:13:04.920  -->  00:13:07.440
the quantity you want minus 1 which

326

00:13:07.440  -->  00:13:10.500
actually is the correct formula for the

327

00:13:10.500  -->  00:13:13.320
steps. So that's how r find out what the

328

00:13:13.320  -->  00:13:16.020
step is alright and what else do we have

329

00:13:16.020  -->  00:13:18.420
here well there's another one along with

330

00:13:18.420  -->  00:13:20.100
along with you can read about it here

331

00:13:20.100  -->  00:13:22.800
basically what it does it's just like

332

00:13:22.800  -->  00:13:25.529
left out but instead of specifying the

333

00:13:25.529  -->  00:13:29.370
length you can specify a vector that you

334

00:13:29.370  -->  00:13:31.500
want the vector that is generating to

335

00:13:31.500  -->  00:13:34.230
have the same length off. So let me give

336

00:13:34.230  -->  00:13:35.160
you an example

337

00:13:35.160  -->  00:13:38.880
along with the right so let's say I have

338

00:13:38.880  -->  00:13:46.440
a vector here of X is C, A, B and C

339

00:13:46.440  -->  00:13:48.600
right so there's three values and vector

340

00:13:48.600  -->  00:13:51.690
X so there we go I have a vector X of

341

00:13:51.690  -->  00:13:54.899
three values and now if I run this along

342

00:13:54.899  -->  00:13:58.800
with equals x around this I will get a

343

00:13:58.800  -->  00:14:01.440
vector sequence from 10 to 20

344

00:14:01.440  -->  00:14:03.300
we've also three values so basically you

345

00:14:03.300  -->  00:14:05.820
saying instead of specifying the length

346

00:14:05.820  -->  00:14:08.250
explicitly you specify the length

347

00:14:08.250  -->  00:14:10.230
implicitly you're saying I want the

348

00:14:10.230  -->  00:14:13.320
length of the output of this function to

349

00:14:13.320  -->  00:14:15.510
be identical to the length of this

350

00:14:15.510  -->  00:14:16.350
vector.

351

00:14:16.350  -->  00:14:19.079
Alright so that's the additional

352

00:14:19.079  -->  00:14:21.420
flexibility yet from sequence or the rep

353

00:14:21.420  -->  00:14:24.089
replicate give us let's have a look here,

354

00:14:24.089  -->  00:14:28.980
so replicate basically you can put in a

355

00:14:28.980  -->  00:14:30.839
value x right so that's what we've been

356

00:14:30.839  -->  00:14:33.329
doing so far how many times you want to

357

00:14:33.329  -->  00:14:35.790
replicate anything length out similar to

358

00:14:35.790  -->  00:14:37.709
the left out for sequence but what is

359

00:14:37.709  -->  00:14:40.170
interesting here is each right so let's

360

00:14:40.170  -->  00:14:42.000
have a look at replicate with each

361

00:14:42.000  -->  00:14:45.750
replicate let's say we're replicating

362

00:14:45.750  -->  00:14:49.410
the number 5 10 times right there we go

363

00:14:49.410  -->  00:14:51.899
but now let's say we're replicating the

364

00:14:51.899  -->  00:14:56.100
vector of 5 to 6 so 2  numbers here these two

365

00:14:56.100  -->  00:14:58.620
and we're replicating them 10 times so

366

00:14:58.620  -->  00:15:00.360
we have five six five six five six five

367

00:15:00.360  -->  00:15:02.910
six ten times and 20 numbers in total

368

00:15:02.910  -->  00:15:05.819
but what we can do with each is instead

369

00:15:05.819  -->  00:15:07.890
of time, so what we have done just now is

370

00:15:07.890  -->  00:15:09.959
we passed the second variable right so

371

00:15:09.959  -->  00:15:12.569
one variable is this first one over here

372

00:15:12.569  -->  00:15:17.370
so it's just the X value and then x is

373

00:15:17.370  -->  00:15:19.889
the four next variable so what we've

374

00:15:19.889  -->  00:15:22.980
done is we the 10 was assumed to be x so

375

00:15:22.980  -->  00:15:25.680
if we rerun this will get the same but

376

00:15:25.680  -->  00:15:27.690
what we can do now is instead of times

377

00:15:27.690  -->  00:15:30.089
we can see each alright so we run that

378

00:15:30.089  -->  00:15:31.860
which will get is 10

379

00:15:31.860  -->  00:15:35.790
five and ten six right so each one of

380

00:15:35.790  -->  00:15:40.200
your variables was replicated 10 times

381

00:15:40.200  -->  00:15:43.110
and that is the additional flexibility

382

00:15:43.110  -->  00:15:45.240
that you can get from Rep so you can

383

00:15:45.240  -->  00:15:48.300
imagine if here i have a vector of let's

384

00:15:48.300  -->  00:15:50.700
say let's say X we already have this

385

00:15:50.700  -->  00:15:52.740
vector X what they want to replicate x

386

00:15:52.740  -->  00:15:56.010
and we replicated five times ride each

387

00:15:56.010  -->  00:16:01.170
flat that gives us a aaaa, bbbbb,  cccc if we said

388

00:16:01.170  -->  00:16:04.170
not each but instead we sent times would

389

00:16:04.170  -->  00:16:06.480
get ABC ABC ABC ABC.

390

00:16:06.480  -->  00:16:09.450
Ok so that's how you can specify

391

00:16:09.450  -->  00:16:13.890
arguments for your functions and that's

392

00:16:13.890  -->  00:16:15.600
pretty much it that's all I wanted to

393

00:16:15.600  -->  00:16:16.680
show you today

394

00:16:16.680  -->  00:16:18.600
the last thing I 'll probably do is I'll

395

00:16:18.600  -->  00:16:22.620
just show that strt actually works in

396

00:16:22.620  -->  00:16:26.070
vectorize mode right so just to prove a

397

00:16:26.070  -->  00:16:27.329
point or something we talked about

398

00:16:27.329  -->  00:16:29.970
previously I'm sure you had some

399

00:16:29.970  -->  00:16:32.310
practice already of some basic vector

400

00:16:32.310  -->  00:16:34.620
operations of adding two vectors

401

00:16:34.620  -->  00:16:36.390
multiplying and so on but let's have a

402

00:16:36.390  -->  00:16:39.779
look and see how sprt can work in

403

00:16:39.779  -->  00:16:42.149
vector mode so let's take this vector

404

00:16:42.149  -->  00:16:44.339
here that we're creating 10, 15, 20 and

405

00:16:44.339  -->  00:16:45.930
let's put it into a variable let's call

406

00:16:45.930  -->  00:16:49.800
it a and if we run that now we have a

407

00:16:49.800  -->  00:16:52.470
vector a so I'll just printed out here

408

00:16:52.470  -->  00:16:56.010
10, 15, 20 and now instead of taking a

409

00:16:56.010  -->  00:16:57.839
sprt of just one number we're going

410

00:16:57.839  -->  00:17:00.089
to take the square root of the whole

411

00:17:00.089  -->  00:17:01.920
vector and see what we get so if I run

412

00:17:01.920  -->  00:17:04.380
this line I will get the square root of

413

00:17:04.380  -->  00:17:07.410
10, 15, 20 so I have a vector now so I can

414

00:17:07.410  -->  00:17:13.110
put this into b and if I print b as

415

00:17:13.110  -->  00:17:16.169
you can see I have saved the square root

416

00:17:16.169  -->  00:17:18.600
of all three numbers of the same time and

417

00:17:18.600  -->  00:17:21.000
that is just a quick illustration of the

418

00:17:21.000  -->  00:17:23.189
power of vectorize operations and that

419

00:17:23.189  -->  00:17:26.220
you can actually pass vectors two

420

00:17:26.220  -->  00:17:30.120
functions and jet a vectors as output a

421

00:17:30.120  -->  00:17:33.600
very very powerful feature and actually

422

00:17:33.600  -->  00:17:36.150
very powerful fundamental feature of r

423

00:17:36.150  -->  00:17:38.549
and it does take some time to get used

424

00:17:38.549  -->  00:17:40.380
to but after you have gotten used to it

425

00:17:40.380  -->  00:17:42.390
you want to want to change back

426

00:17:42.390  -->  00:17:44.330
it is very convenient

427

00:17:44.330  -->  00:17:46.700
and very efficient okay that brings us

428

00:17:46.700  -->  00:17:48.380
to the end of today's tutorial. I hope

429

00:17:48.380  -->  00:17:50.149
you enjoyed it and I look forward to

430

00:17:50.149  -->  00:17:52.490
seeing you on the next one until then,

431

00:17:52.490  -->  00:17:57.030
happy coding.
