1

00:00:00,000  -->  00:00:07,020
Hello and welcome back to the course in

2

00:00:07,020  -->  00:00:09,660
R programming. In the previous tutorial, we

3

00:00:09,660  -->  00:00:12,269
created our own data frame based on

4

00:00:12,269  -->  00:00:14,490
the vectors that we were supplied. So now

5

00:00:14,490  -->  00:00:16,139
we have two data frames, we've got the

6

00:00:16,139  -->  00:00:18,390
original one, the stats data frame and

7

00:00:18,390  -->  00:00:20,910
we've got the mydf data frame and our

8

00:00:20,910  -->  00:00:23,279
goal today is to transfer some of the

9

00:00:23,279  -->  00:00:25,320
information from the mydf data frame

10

00:00:25,320  -->  00:00:27,539
and specifically we want after the

11

00:00:27,539  -->  00:00:30,090
region's into the status data friend

12

00:00:30,090  -->  00:00:32,369
right? So let me create a new section and

13

00:00:32,369  -->  00:00:35,280
I will explain exactly what we are after, so

14

00:00:35,280  -->  00:00:36,989
there's the new section and this one we're

15

00:00:36,989  -->  00:00:39,989
going to call merging data frames

16

00:00:39,989  -->  00:00:41,219
because that's exactly what we're going

17

00:00:41,219  -->  00:00:43,469
to be doing. Alright, so let's have a look

18

00:00:43,469  -->  00:00:46,620
at the top bits of each one of these

19

00:00:46,620  -->  00:00:48,059
documents, so how do we look at the

20

00:00:48,059  -->  00:00:49,920
documents? We look at them using the head

21

00:00:49,920  -->  00:00:52,680
function and we say stat's that's the

22

00:00:52,680  -->  00:00:55,230
first one and the second one is the top

23

00:00:55,230  -->  00:00:59,309
bits of mydf right? So let's make some

24

00:00:59,309  -->  00:01:02,129
space here and then we can discuss what

25

00:01:02,129  -->  00:01:03,719
the plan is for today, what the plan of

26

00:01:03,719  -->  00:01:04,500
attack is.

27

00:01:04,500  -->  00:01:06,570
Alright so this is the original data

28

00:01:06,570  -->  00:01:08,610
frame that we loaded from a file as you

29

00:01:08,610  -->  00:01:10,860
remember and here we've got countryname,

30

00:01:10,860  -->  00:01:14,490
country code, birthrate, internet uses,

31

00:01:14,490  -->  00:01:16,470
income group and we've already visualize

32

00:01:16,470  -->  00:01:17,610
that so we've got this beautiful

33

00:01:17,610  -->  00:01:20,130
visualization in the right. Now according to

34

00:01:20,130  -->  00:01:22,799
our additional challenge we need to

35

00:01:22,799  -->  00:01:24,420
create the same visualization but

36

00:01:24,420  -->  00:01:27,479
instead of coloring the dots by income

37

00:01:27,479  -->  00:01:30,150
group, we need to color them by region and

38

00:01:30,150  -->  00:01:32,820
country code and region we were supplied

39

00:01:32,820  -->  00:01:35,040
these this information in additional

40

00:01:35,040  -->  00:01:37,290
vectors and in the previous tutorial, we put them

41

00:01:37,290  -->  00:01:39,299
all into a data frame over here which

42

00:01:39,299  -->  00:01:41,759
is called mydf. Now the challenge for

43

00:01:41,759  -->  00:01:45,060
today that we have is how do we combine

44

00:01:45,060  -->  00:01:47,070
all of this because we can't really

45

00:01:47,070  -->  00:01:50,880
visualize this data if the interest,

46

00:01:50,880  -->  00:01:53,159
internet users and birth rate, so this

47

00:01:53,159  -->  00:01:55,680
numeric data is in this data frame but the

48

00:01:55,680  -->  00:01:57,659
categorical variable region is in this

49

00:01:57,659  -->  00:01:59,430
data frame. How do we combine all of

50

00:01:59,430  -->  00:02:02,610
that into one data frame and what

51

00:02:02,610  -->  00:02:04,740
you'll see here is that we have

52

00:02:04,740  -->  00:02:08,129
countries right? So we're looking at each

53

00:02:08,129  -->  00:02:09,690
row is a separate country and same thing

54

00:02:09,690  -->  00:02:12,180
here it shows a separate country so that

55

00:02:12,180  -->  00:02:13,610
is our key

56

00:02:13,610  -->  00:02:15,590
to success in this case. That is the

57

00:02:15,590  -->  00:02:18,050
way we're going to combine these two

58

00:02:18,050  -->  00:02:19,460
data frames or in fact how we're

59

00:02:19,460  -->  00:02:20,480
going to merge them. We're going to say,

60

00:02:20,480  -->  00:02:23,030
everyone just take the rows and match

61

00:02:23,030  -->  00:02:25,100
them by country. So look for instance, with

62

00:02:25,100  -->  00:02:27,470
Aruba in this data frame and then

63

00:02:27,470  -->  00:02:29,240
take these columns to take this whole

64

00:02:29,240  -->  00:02:32,420
row and add it to the row so right over

65

00:02:32,420  -->  00:02:34,430
here on the right which also has Aruba

66

00:02:34,430  -->  00:02:36,650
and then Afghanistan, add it to

67

00:02:36,650  -->  00:02:39,830
Afghanistan, Angola add it to Angola. Now

68

00:02:39,830  -->  00:02:42,560
that's that's the concept behind it,

69

00:02:42,560  -->  00:02:45,050
however personally I find it's always

70

00:02:45,050  -->  00:02:47,690
safer to go with codes because in the

71

00:02:47,690  -->  00:02:49,190
country name and this is kind of like

72

00:02:49,190  -->  00:02:52,220
more of a data analytical tip or

73

00:02:52,220  -->  00:02:54,739
data science tip for you that

74

00:02:54,739  -->  00:02:57,170
sometimes in country name especially

75

00:02:57,170  -->  00:02:58,610
when the data is coming from different

76

00:02:58,610  -->  00:02:59,450
places,

77

00:02:59,450  -->  00:03:01,459
it's very likely, not very like, it's very

78

00:03:01,459  -->  00:03:02,930
simple that they could have been a

79

00:03:02,930  -->  00:03:05,570
mistake. Somebody might have typed in a

80

00:03:05,570  -->  00:03:08,420
country with the wrong letter

81

00:03:08,420  -->  00:03:11,420
somewhere or put in extra space or

82

00:03:11,420  -->  00:03:13,160
forgotten the space like might have

83

00:03:13,160  -->  00:03:15,560
typed in United Arab Emirates is one

84

00:03:15,560  -->  00:03:17,360
word or something like that and that way

85

00:03:17,360  -->  00:03:20,299
your match will not go through.

86

00:03:20,299  -->  00:03:21,860
Whereas country codes are more reliable,

87

00:03:21,860  -->  00:03:23,870
they're universal right? It's always three

88

00:03:23,870  -->  00:03:26,630
letters. They have a format. It's very

89

00:03:26,630  -->  00:03:28,430
unique. It's very hard to make a mistake.

90

00:03:28,430  -->  00:03:30,350
I mean like it could have made a mistake

91

00:03:30,350  -->  00:03:32,239
but probably these weren't typed up

92

00:03:32,239  -->  00:03:34,459
manually probably these codes came from

93

00:03:34,459  -->  00:03:35,750
somewhere. So it's always better to

94

00:03:35,750  -->  00:03:37,430
mention codes and that's what we're

95

00:03:37,430  -->  00:03:39,080
going to do. We're going to see where the

96

00:03:39,080  -->  00:03:40,850
codes match and that way we're going to

97

00:03:40,850  -->  00:03:43,190
add those roads in. Alright, so that's the

98

00:03:43,190  -->  00:03:44,299
plan of attack.

99

00:03:44,299  -->  00:03:48,709
How do we get that to work in R? Ok so

100

00:03:48,709  -->  00:03:50,720
the function that we're going to use is

101

00:03:50,720  -->  00:03:52,910
called merge. So that's what the function

102

00:03:52,910  -->  00:03:56,299
is and we're going to put to the merged

103

00:03:56,299  -->  00:03:58,549
value into a data frame which we will

104

00:03:58,549  -->  00:04:03,410
call merged just for fun and know what

105

00:04:03,410  -->  00:04:05,239
are we going to pass to this function

106

00:04:05,239  -->  00:04:07,250
merge? We need to give it some values so it

107

00:04:07,250  -->  00:04:08,810
knows what it want, what we want to merge.

108

00:04:08,810  -->  00:04:10,910
Well first we want to deposit the name

109

00:04:10,910  -->  00:04:12,320
of the data frame that we want on the

110

00:04:12,320  -->  00:04:14,660
left which will be stats and then the

111

00:04:14,660  -->  00:04:16,220
name of the data frame that we want in

112

00:04:16,220  -->  00:04:18,440
the right which will be mydf. Now it

113

00:04:18,440  -->  00:04:21,019
needs to know how exactly do we want to

114

00:04:21,019  -->  00:04:22,970
match those two data frames.

115

00:04:22,970  -->  00:04:26,300
Well then to explain that you say by dot

116

00:04:26,300  -->  00:04:26,810
x

117

00:04:26,810  -->  00:04:31,160
equals and then you explain which column

118

00:04:31,160  -->  00:04:32,900
you want to use from the first data frame.

119

00:04:32,900  -->  00:04:34,760
The first data frame has a column

120

00:04:34,760  -->  00:04:36,500
called country code and we want to use

121

00:04:36,500  -->  00:04:38,090
that column we have to pass it in

122

00:04:38,090  -->  00:04:40,610
quotation marks. There we put a comma and

123

00:04:40,610  -->  00:04:44,900
we say by dot Y and Y have by Y by X

124

00:04:44,900  -->  00:04:47,870
because X is the data frame on the left and

125

00:04:47,870  -->  00:04:50,419
then by dot y, why is the one on the right.

126

00:04:50,419  -->  00:04:53,060
So just that this function knows exactly

127

00:04:53,060  -->  00:04:55,280
which data frame we are talking about. Here

128

00:04:55,280  -->  00:04:57,260
we want to use the column code in

129

00:04:57,260  -->  00:05:00,320
quotation marks beautiful, so that's all

130

00:05:00,320  -->  00:05:02,600
we have to do and if I run that you'll

131

00:05:02,600  -->  00:05:04,669
see that now we have a new data frame

132

00:05:04,669  -->  00:05:08,000
over here which has seven variables.

133

00:05:08,000  -->  00:05:10,130
Ok let's find out and why it has seven

134

00:05:10,130  -->  00:05:12,020
variables because this one had five, this

135

00:05:12,020  -->  00:05:14,479
one had three, should have age right? So

136

00:05:14,479  -->  00:05:15,860
let's have a look what happened over

137

00:05:15,860  -->  00:05:18,860
here. If we look at merged and let's look

138

00:05:18,860  -->  00:05:21,590
at the just the head, the top part of it

139

00:05:21,590  -->  00:05:25,010
and maybe let's make some room first so

140

00:05:25,010  -->  00:05:28,580
that it fits on one screen, so what

141

00:05:28,580  -->  00:05:31,160
we have here is we've got country code,

142

00:05:31,160  -->  00:05:33,380
country name, birth rate, internet users,

143

00:05:33,380  -->  00:05:36,140
income group, country and region. What

144

00:05:36,140  -->  00:05:37,160
column is missing?

145

00:05:37,160  -->  00:05:39,560
Well the column that's missing is just a

146

00:05:39,560  -->  00:05:40,220
code,

147

00:05:40,220  -->  00:05:42,410
this column from the second data set. Why

148

00:05:42,410  -->  00:05:44,270
is it missing? Well the reason is because

149

00:05:44,270  -->  00:05:46,700
we are matching on this column right? So

150

00:05:46,700  -->  00:05:49,190
we've got country code equals to code

151

00:05:49,190  -->  00:05:52,520
right so R already knows that it will

152

00:05:52,520  -->  00:05:54,500
not make much sense for you to have a

153

00:05:54,500  -->  00:05:56,180
duplicate of this column because it,

154

00:05:56,180  -->  00:05:57,950
that's what it did, it matched on that

155

00:05:57,950  -->  00:05:59,600
column so obviously they're gonna be

156

00:05:59,600  -->  00:06:02,300
the same so that's why R just doesn't

157

00:06:02,300  -->  00:06:04,580
include that column for you and saves you

158

00:06:04,580  -->  00:06:06,710
some space. At the same time, we can also

159

00:06:06,710  -->  00:06:08,150
see that we already have a duplicate

160

00:06:08,150  -->  00:06:10,910
column as well. You see country here and we

161

00:06:10,910  -->  00:06:12,260
see country name and they're going to be

162

00:06:12,260  -->  00:06:15,380
the same right? So how do we fix that up?

163

00:06:15,380  -->  00:06:16,850
Well we're going to remove the column, we're

164

00:06:16,850  -->  00:06:18,950
going to remove this duplicate column

165

00:06:18,950  -->  00:06:21,800
country and how do we remove columns?

166

00:06:21,800  -->  00:06:25,700
Well just as we learned before, we say

167

00:06:25,700  -->  00:06:27,830
merged then country

168

00:06:27,830  -->  00:06:29,990
good good another good opportunity to

169

00:06:29,990  -->  00:06:31,460
practice something we've learned already.

170

00:06:31,460  -->  00:06:34,639
So if we run that and now we look at

171

00:06:34,639  -->  00:06:37,310
let's say instead of head, let's look at

172

00:06:37,310  -->  00:06:37,610
this

173

00:06:37,610  -->  00:06:39,409
str for structure

174

00:06:39,409  -->  00:06:42,259
merged, you will see that we have country

175

00:06:42,259  -->  00:06:44,360
code, country name, birth rate, internet

176

00:06:44,360  -->  00:06:47,059
users, income group and region and we

177

00:06:47,059  -->  00:06:49,429
don't have any duplicate column so what we

178

00:06:49,429  -->  00:06:51,499
have just done is we've transferred this

179

00:06:51,499  -->  00:06:54,199
region column into the merged data frame.

180

00:06:54,199  -->  00:06:55,729
So we have a data frame that has all

181

00:06:55,729  -->  00:06:57,739
the columns from the first data frame and

182

00:06:57,739  -->  00:06:59,209
just that one column that we are after

183

00:06:59,209  -->  00:07:02,239
from the second data frame and if we

184

00:07:02,239  -->  00:07:05,449
want, we can look at let's say last five,

185

00:07:05,449  -->  00:07:10,309
last six variables of rows here. As you

186

00:07:10,309  -->  00:07:11,719
can see, it all makes sense.

187

00:07:11,719  -->  00:07:13,909
Everything is working fine and you can

188

00:07:13,909  -->  00:07:15,949
just confirm South Africa is this, is

189

00:07:15,949  -->  00:07:18,619
actually in Africa and Yemen is in the

190

00:07:18,619  -->  00:07:21,169
Middle East. Alright so everything is

191

00:07:21,169  -->  00:07:23,029
working fine, that's great and we are

192

00:07:23,029  -->  00:07:25,039
ready to proceed with the next step

193

00:07:25,039  -->  00:07:27,739
which would be visualizing this new data

194

00:07:27,739  -->  00:07:30,079
frame and I look for single the next

195

00:07:30,079  -->  00:07:30,739
tutorial,

196

00:07:30,739  -->  00:07:42,850
until then happy coding.
