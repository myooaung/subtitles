WEBVTT
1
00:00:02.500 --> 00:00:05.477
I've opened up Windows PowerShell and all the

2
00:00:05.477 --> 00:00:06.966
necessary prerequisites are installed.

3
00:00:06.966 --> 00:00:11.985
I'm going to demonstrate creating a sample project called patient portal.

4
00:00:11.985 --> 00:00:15.290
Before we generate the project, I need to create the project folder.

5
00:00:15.290 --> 00:00:19.407
So, I'll run the command, make directory patient-portal.

6
00:00:19.407 --> 00:00:24.854
Now I need to change to that folder by running change directory patient-portal.

7
00:00:24.854 --> 00:00:27.846
It's important to note that JHipster is going to generate the full

8
00:00:27.846 --> 00:00:31.920
scaffolding in the current folder on your command line.

9
00:00:31.920 --> 00:00:35.988
So with this folder created, let's start project generation.

10
00:00:35.988 --> 00:00:41.763
I'm going to start the JHipster generator using the command yo jhipster.

11
00:00:41.763 --> 00:00:44.080
That command brought up the JHipster generator tool,

12
00:00:44.080 --> 00:00:47.045
so let's look at some of the key details.

13
00:00:47.045 --> 00:00:49.934
First, you'll notice the version number is listed.

14
00:00:49.934 --> 00:00:51.098
As I mentioned in the last module,

15
00:00:51.098 --> 00:00:54.333
it's possible you're going to be prompted here to upgrade JHipster.

16
00:00:54.333 --> 00:00:57.675
The tool tells you the directory where application

17
00:00:57.675 --> 00:00:59.649
files are going to be generated.

18
00:00:59.649 --> 00:01:06.024
In our case it's the current folder C:\dev\patient-portal.

19
00:01:06.024 --> 00:01:10.293
Finally, JHipster has displayed the first decision that needs to be made.

20
00:01:10.293 --> 00:01:13.952
I need to choose the type of application I want generated.

21
00:01:13.952 --> 00:01:15.728
I can choose from four options.

22
00:01:15.728 --> 00:01:19.668
As I noted earlier, this course is focused on creating a monolith,

23
00:01:19.668 --> 00:01:23.031
so I'm going to select that as the option.

24
00:01:23.031 --> 00:01:24.877
But what were the other options?

25
00:01:24.877 --> 00:01:28.137
And how does selecting monolith impact the scaffolding?

26
00:01:28.137 --> 00:01:31.008
Let's take a deeper dive.

27
00:01:31.008 --> 00:01:33.264
JHipster provides you with four options for deciding

28
00:01:33.264 --> 00:01:35.050
how your project will be structured.

29
00:01:35.050 --> 00:01:39.404
The first option, is the same as the architecture type it supports.

30
00:01:39.404 --> 00:01:43.495
A monolithic application is characterized by having all of

31
00:01:43.495 --> 00:01:45.795
its functionality in a single process.

32
00:01:45.795 --> 00:01:47.905
While your code structure can be componentized,

33
00:01:47.905 --> 00:01:50.315
you're still constrained to building and deploying the entire

34
00:01:50.315 --> 00:01:54.000
application for even the smallest of changes.

35
00:01:54.000 --> 00:01:58.274
The next three options support a microservices architecture.

36
00:01:58.274 --> 00:02:02.108
With microservices, you decompose an application into single purpose services,

37
00:02:02.108 --> 00:02:05.837
which run in their own process are loosely coupled and

38
00:02:05.837 --> 00:02:08.395
communicate over a light wave mechanism.

39
00:02:08.395 --> 00:02:11.054
This approach has benefits in terms of structure,

40
00:02:11.054 --> 00:02:12.051
coupling, and deployment,

41
00:02:12.051 --> 00:02:16.013
but can greatly increase the complexity of the system and operations.

42
00:02:16.013 --> 00:02:19.052
Again, this course is focused on monoliths,

43
00:02:19.052 --> 00:02:23.565
therefore, I don't plan to cover anything more on microservices.

44
00:02:23.565 --> 00:02:28.159
Next, let's look at what JHipster generates when I select the monolith option.

45
00:02:28.159 --> 00:02:32.001
Scaffolding it gets generated for a JHipster monolithic application

46
00:02:32.001 --> 00:02:35.612
can have its main assets grouped into client,

47
00:02:35.612 --> 00:02:36.966
server, and utilities.

48
00:02:36.966 --> 00:02:38.754
Let's start with the client.

49
00:02:38.754 --> 00:02:41.548
JHipster generates an Angular application with

50
00:02:41.548 --> 00:02:44.276
several foundational views implemented.

51
00:02:44.276 --> 00:02:46.945
These views include account management pages,

52
00:02:46.945 --> 00:02:49.079
administration pages, and a home page.

53
00:02:49.079 --> 00:02:51.567
Unit tests will be generated for the views,

54
00:02:51.567 --> 00:02:53.519
along with the source code,

55
00:02:53.519 --> 00:02:57.289
assets such as style sheets and images will be provided.

56
00:02:57.289 --> 00:03:02.074
On the server side, JHipster generates a full Spring Boot back end application.

57
00:03:02.074 --> 00:03:05.579
The application includes source code for configuration,

58
00:03:05.579 --> 00:03:08.887
APIs, services, repositories, entities, and security.

59
00:03:08.887 --> 00:03:12.062
JPA will be provided by Hibernate,

60
00:03:12.062 --> 00:03:14.749
to implement persistence management for the database

61
00:03:14.749 --> 00:03:16.668
type that you'll select later.

62
00:03:16.668 --> 00:03:21.027
Finally, JHipster generates code and configuration for a number of utilities.

63
00:03:21.027 --> 00:03:25.376
As we'll be using Gradle in this course, Gradle build strips will be created.

64
00:03:25.376 --> 00:03:28.992
Also, support will be provided to run the application in a Docker container,

65
00:03:28.992 --> 00:03:34.111
view APIs via Swagger, manage the database schema via Liquibase,

66
00:03:34.111 --> 00:03:36.956
and configure application logging.

67
00:03:36.956 --> 00:03:38.802
Now that you have more details about what's being

68
00:03:38.802 --> 00:03:40.642
generated for a JHipster monolith,

69
00:03:40.642 --> 00:03:45.540
let's complete our entries for application meta data.

70
00:03:45.540 --> 00:03:47.949
I've opened back up Windows PowerShell so that we can

71
00:03:47.949 --> 00:03:49.396
continue with generating the scaffolding.

72
00:03:49.396 --> 00:03:53.636
The next decision we need to make is the base name of the application.

73
00:03:53.636 --> 00:03:54.854
An important note here,

74
00:03:54.854 --> 00:03:58.159
the base name can't contain any spaces or special characters,

75
00:03:58.159 --> 00:04:01.746
as it's going to be used as a prefix for class names.

76
00:04:01.746 --> 00:04:07.173
It should reflect your project name, so here I'll answer PatientPortal.

77
00:04:07.173 --> 00:04:11.051
Next, I'll enter the Java source packaging convention.

78
00:04:11.051 --> 00:04:13.799
I'll use com.

79
00:04:13.799 --> 00:04:14.715
Pluralsight.

80
00:04:14.715 --> 00:04:15.631
patientportal.

81
00:04:15.631 --> 00:04:24.000
That concludes the application meta data options and entries. Let's continue to the next decision on the JHipster registry.

