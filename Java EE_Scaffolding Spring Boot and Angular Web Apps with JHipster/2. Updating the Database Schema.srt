1
00:00:01,706 --> 00:00:03,266
In the module on customizing security,

2
00:00:03,266 --> 00:00:08,414
I made a small change to the Liquibase scripts to modify our role name.

3
00:00:08,414 --> 00:00:11,698
Liquibase is a third-party dependency that JHipster brings into the

4
00:00:11,698 --> 00:00:15,053
application for you to manage your database schema.

5
00:00:15,053 --> 00:00:16,658
While I made the change for the role name,

6
00:00:16,658 --> 00:00:20,339
I didn't really go into depth on the structure of the Liquibase configuration.

7
00:00:20,339 --> 00:00:21,642
So let's do that now.

8
00:00:21,642 --> 00:00:27,597
You can see the directory structure where these configurations reside,

9
00:00:27,597 --> 00:00:31,727
which is src/main/resources/config/liquibase.

10
00:00:31,727 --> 00:00:35,142
The sub folder change log is where you define your schemas.

11
00:00:35,142 --> 00:00:39,515
I'm going to add a new file here shortly for our appointment schema.

12
00:00:39,515 --> 00:00:41,981
I already changed the file in this folder,

13
00:00:41,981 --> 00:00:43,945
named with leading 0's, _initial_schema.

14
00:00:43,945 --> 00:00:44,677
xml.

15
00:00:44,677 --> 00:00:50,527
This file defines the base schema from JHipster,

16
00:00:50,527 --> 00:00:54,605
including tables for users, auditing, and security.

17
00:00:54,605 --> 00:00:58,408
At the root Liquibase folder is for our files.

18
00:00:58,408 --> 00:00:58,799
Authorities.

19
00:00:58,799 --> 00:01:03,486
csv contains authority data that will be preloaded into the database.

20
00:01:03,486 --> 00:01:04,007
Master.

21
00:01:04,007 --> 00:01:08,171
xml is the main Changelog file for Liquibase.

22
00:01:08,171 --> 00:01:12,484
I'll be updating this to refer to our new change log for appointments.

23
00:01:12,484 --> 00:01:12,957
Users_authorities.

24
00:01:12,957 --> 00:01:18,873
csv contains relationship data between users and authorities, and finally users.

25
00:01:18,873 --> 00:01:21,334
csv contains user data.

26
00:01:21,334 --> 00:01:25,434
Again, both of these will preload data when we run our script.

27
00:01:25,434 --> 00:01:27,704
I'll be adding an additional file here for preloading a

28
00:01:27,704 --> 00:01:29,757
few appointments for one of the users.

29
00:01:29,757 --> 00:01:35,481
Now that you understand the structure, let's make the changes for appointments.

30
00:01:35,481 --> 00:01:37,431
I'll be walking you through dropping in the new

31
00:01:37,431 --> 00:01:39,028
Liquibase files from a GitHub repository.

32
00:01:39,028 --> 00:01:41,744
If you didn't do so already for the client,

33
00:01:41,744 --> 00:01:45,227
you can download the project from the repository listed.

34
00:01:45,227 --> 00:01:51,097
The URL is github.

35
00:01:51,097 --> 00:01:52,564
com/michaelhoffmantech/patient-portal-resources.

36
00:01:52,564 --> 00:01:57,833
You'll be copying the Liquibase folder under the server/liquibase directory.

37
00:01:57,833 --> 00:02:02,607
The source code is also included as part of the Pluralsight course material.

38
00:02:02,607 --> 00:02:07,672
Once you have this project downloaded, you can continue with the course.

39
00:02:07,672 --> 00:02:08,709
I've opened up Eclipse,

40
00:02:08,709 --> 00:02:13,525
and here we see in the package explorer that I've expanded the

41
00:02:13,525 --> 00:02:16,267
GitHub project called patient-portal-resources.

42
00:02:16,267 --> 00:02:18,336
We're going to copy two of the files.

43
00:02:18,336 --> 00:02:25,168
First, I'm going to copy the file that's under server/liquibase/changelog.

44
00:02:25,168 --> 00:02:26,742
Select that, copy it.

45
00:02:26,742 --> 00:02:33,125
We're going to put it in the corresponding folder of the project.

46
00:02:33,125 --> 00:02:38,786
I'll expand Changelog, and paste it in.

47
00:02:38,786 --> 00:02:42,904
And now we have a second change log on the project for Liquibase.

48
00:02:42,904 --> 00:02:47,432
Let's grab the other file, I'll select appointments.

49
00:02:47,432 --> 00:02:51,688
csv, found under the folder server/liquibase,

50
00:02:51,688 --> 00:03:01,975
copy that, and we'll put it in the corresponding folder of config/liquibase.

51
00:03:01,975 --> 00:03:03,834
So now that we've moved these two files over,

52
00:03:03,834 --> 00:03:08,138
let's explain a little bit about what they are.

53
00:03:08,138 --> 00:03:10,698
There are two files that we added from GitHub.

54
00:03:10,698 --> 00:03:12,268
The first file is the Changelog,

55
00:03:12,268 --> 00:03:15,071
including the schema for a new appointment's database table.

56
00:03:15,071 --> 00:03:19,565
From a naming standard, I used the date only in the prefix of the file,

57
00:03:19,565 --> 00:03:22,306
but you can also go down to the full time stamp.

58
00:03:22,306 --> 00:03:26,202
I then provided a detailed file name to indicate that the

59
00:03:26,202 --> 00:03:29,106
Changelog is for creating the appointment schema.

60
00:03:29,106 --> 00:03:32,635
The second file is a CSV file with appointments data.

61
00:03:32,635 --> 00:03:34,863
The data will be prepopulated into the database for

62
00:03:34,863 --> 00:03:36,460
the purpose of local testing.

63
00:03:36,460 --> 00:03:39,824
In order for Liquibase to process these new files,

64
00:03:39,824 --> 00:03:44,080
we'll also need to add a line to the master.

65
00:03:44,080 --> 00:03:44,931
xml configuration.

66
00:03:44,931 --> 00:03:48,260
Let's look at these new files in some detail.

67
00:03:48,260 --> 00:03:50,913
I'll start with the new Changelog file first.

68
00:03:50,913 --> 00:03:54,895
The first item of note is the definition of the changeSet element.

69
00:03:54,895 --> 00:03:57,710
I've set the ID to use the prefix from the file name,

70
00:03:57,710 --> 00:04:00,232
which was the date and trailing 0s.

71
00:04:00,232 --> 00:04:05,351
I've also appended a -1, in case we had multiple change sets in this file.

72
00:04:05,351 --> 00:04:07,565
I've also set the author to be system.

73
00:04:07,565 --> 00:04:10,611
Let's look at the contents of the changeSet.

74
00:04:10,611 --> 00:04:13,934
First, I've defined a createTable element,

75
00:04:13,934 --> 00:04:16,351
setting the tableName to be appointment.

76
00:04:16,351 --> 00:04:18,715
If you've used SQL before to create tables,

77
00:04:18,715 --> 00:04:20,885
this format should be self-explanatory.

78
00:04:20,885 --> 00:04:23,454
I've defined five columns.

79
00:04:23,454 --> 00:04:27,057
First is the id, which is the primary key and will be set sequentially,

80
00:04:27,057 --> 00:04:32,815
next is the user id, which is a foreign key I'll be touching on again shortly.

81
00:04:32,815 --> 00:04:36,876
This refers specifically to the user id of the currently

82
00:04:36,876 --> 00:04:39,236
logged in user making the appointment.

83
00:04:39,236 --> 00:04:43,218
Then, I have a reason column, which is the reason for the appointment.

84
00:04:43,218 --> 00:04:47,057
Next, I have a Boolean for whether or not the user's insurance has changed,

85
00:04:47,057 --> 00:04:51,422
and finally, I have a phone number for the user to be called back on.

86
00:04:51,422 --> 00:04:54,324
Note that I've added a not null constraint to all of the fields,

87
00:04:54,324 --> 00:04:57,888
as they will all be required for an appointment to be created.

88
00:04:57,888 --> 00:04:59,364
With the table definition in place,

89
00:04:59,364 --> 00:05:03,624
there are two more items that were added in the change set.

90
00:05:03,624 --> 00:05:05,840
The appointments table is going to have a relationship to

91
00:05:05,840 --> 00:05:08,547
the user table provided by JHipster.

92
00:05:08,547 --> 00:05:11,716
Note that I've added a foreign key constraint,

93
00:05:11,716 --> 00:05:13,697
which provides this relationship mapping.

94
00:05:13,697 --> 00:05:16,032
The constraint maps the user id column of the appointments

95
00:05:16,032 --> 00:05:20,998
table to the id column of the jhi_user table.

96
00:05:20,998 --> 00:05:24,183
I've also defined an element to tell Liquibase to preload data into

97
00:05:24,183 --> 00:05:27,601
the appointments table as part of the creation.

98
00:05:27,601 --> 00:05:31,811
The file reference was the one that I downloaded into the project from GitHub.

99
00:05:31,811 --> 00:05:34,134
It contains one line of data using all of the columns,

100
00:05:34,134 --> 00:05:36,626
and a semicolon for the separator.

101
00:05:36,626 --> 00:05:42,018
With this in place, let's make the change to the master Changelog.

102
00:05:42,018 --> 00:05:46,847
I've opened back up Eclipse, let's edit that master.

103
00:05:46,847 --> 00:05:48,457
xml file now.

104
00:05:48,457 --> 00:05:51,554
I'm going to minimize the Package Explorer so we can see the full file,

105
00:05:51,554 --> 00:05:56,428
and here we see the include from JHipster.

106
00:05:56,428 --> 00:06:01,140
This is just a reference to the Changelog for the foundational schema tables.

107
00:06:01,140 --> 00:06:05,260
I'm going to drop in another include.

108
00:06:05,260 --> 00:06:11,098
Save the file, and now we have our new Changelog added into the master.

109
00:06:11,098 --> 00:06:11,515
xml.

110
00:06:11,515 --> 00:06:14,218
Note that sequence is important here.

111
00:06:14,218 --> 00:06:17,052
Liquibase is going to run these Changelogs in order,

112
00:06:17,052 --> 00:06:20,799
so our schema will be added after the JHipster schema.

113
00:06:20,799 --> 00:06:22,186
Now, let's try running the application,

114
00:06:22,186 --> 00:06:25,550
and make sure that this new table is in place.

115
00:06:25,550 --> 00:06:30,490
I've opened up a PowerShell window to the project directory.

116
00:06:30,490 --> 00:06:34,472
If you're already running either the client or server, you should stop them now.

117
00:06:34,472 --> 00:06:37,364
I'm going to run the server command, which is.

118
00:06:37,364 --> 00:06:37,838
\gradlew,

119
00:06:37,838 --> 00:06:43,502
and once the server is started you should see a message

120
00:06:43,502 --> 00:06:47,232
regarding Liquibase loading up our database.

121
00:06:47,232 --> 00:06:50,189
I fast forwarded through the start of the server.

122
00:06:50,189 --> 00:06:54,376
Here we see the line that says Liquibase has updated our database.

123
00:06:54,376 --> 00:06:57,260
So, this has been successful.

124
00:06:57,260 --> 00:07:01,297
But let's verify it through our browser.

125
00:07:01,297 --> 00:07:05,811
I've opened up Chrome to the server homepage at localhost port 8080.

126
00:07:05,811 --> 00:07:11,880
Let's log in with the user and password admin.

127
00:07:11,880 --> 00:07:16,603
Once I'm logged in I can click the Administration menu in the nav bar.

128
00:07:16,603 --> 00:07:18,365
I'm going to select Database.

129
00:07:18,365 --> 00:07:23,673
This opened a new tab to allow for login to the H2 console.

130
00:07:23,673 --> 00:07:28,377
Let's click Connect, and now the H2 console is displayed.

131
00:07:28,377 --> 00:07:32,441
On the left, I can see the appointment database table.

132
00:07:32,441 --> 00:07:33,596
Let's expand it.

133
00:07:33,596 --> 00:07:37,444
I see the columns that I defined in the Changelog,

134
00:07:37,444 --> 00:07:41,808
but let's select everything from the table.

135
00:07:41,808 --> 00:07:47,102
And, here I'm displaying the data that was prepopulated from the appointment.

136
00:07:47,102 --> 00:07:47,984
csv file.

137
00:07:47,984 --> 00:07:52,829
This means I successfully set up Liquibase for my appointment schema change.

138
00:07:52,829 --> 00:07:54,309
With the database in place,

139
00:07:54,309 --> 00:08:02,000
we can start coding the repository and domain entity to support appointment persistence.

