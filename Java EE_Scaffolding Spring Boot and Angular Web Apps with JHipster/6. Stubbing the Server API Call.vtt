WEBVTT
1
00:00:01.896 --> 00:00:05.678
With the new patient's module in place, we can certainly try testing out the UI,

2
00:00:05.678 --> 00:00:10.026
though without being able to push and pull data to and from the backend,

3
00:00:10.026 --> 00:00:11.948
it's kind of useless.

4
00:00:11.948 --> 00:00:14.549
We're going to add two classes to the server-side

5
00:00:14.549 --> 00:00:16.572
code as a stub for the frontend.

6
00:00:16.572 --> 00:00:17.574
In the next module,

7
00:00:17.574 --> 00:00:19.830
we'll annotate this object to turn it into an

8
00:00:19.830 --> 00:00:22.989
entity for use and data persistence.

9
00:00:22.989 --> 00:00:26.222
Next, I'll show you how to stub out a rest controller.

10
00:00:26.222 --> 00:00:30.180
It will have two API endpoints, one to support the creation of appointments,

11
00:00:30.180 --> 00:00:33.729
and one to support retrieval of all appointments.

12
00:00:33.729 --> 00:00:37.351
This is a crude way of stubbing out the contract between your client and server.

13
00:00:37.351 --> 00:00:38.761
It works for this demonstration,

14
00:00:38.761 --> 00:00:43.432
but you may want to consider a more robust mechanism for your implementation.

15
00:00:43.432 --> 00:00:46.513
Let's stub that code now.

16
00:00:46.513 --> 00:00:48.189
I've once again opened up Eclipse.

17
00:00:48.189 --> 00:00:52.410
We're going to copy files from the GitHub project that I showed earlier.

18
00:00:52.410 --> 00:00:58.196
Once again, the URL for that project is github.

19
00:00:58.196 --> 00:01:01.713
com/michaelhoffmantech/patient-portal-resources.

20
00:01:01.713 --> 00:01:03.599
Let's start with the folder server.

21
00:01:03.599 --> 00:01:06.601
Under the folder server I have a stub subfolder.

22
00:01:06.601 --> 00:01:11.803
This is going to contain the source code for our two classes.

23
00:01:11.803 --> 00:01:15.141
We'll start with the appointment class.

24
00:01:15.141 --> 00:01:17.393
You can find this under the folder,

25
00:01:17.393 --> 00:01:23.966
stub/java/com/Pluralsight/patientportal/domain.

26
00:01:23.966 --> 00:01:26.435
We'll go ahead and I'm going to copy that,

27
00:01:26.435 --> 00:01:28.981
and we'll scroll back up to the project,

28
00:01:28.981 --> 00:01:33.522
and we can drop that in the package that corresponds with that folder.

29
00:01:33.522 --> 00:01:39.933
So here I'm going to select domain, and I'll go ahead and paste it.

30
00:01:39.933 --> 00:01:45.747
Great, so now we have an appointment domain object in our server code.

31
00:01:45.747 --> 00:01:48.651
Next, we want to add the resource.

32
00:01:48.651 --> 00:01:51.771
I'll scroll back down, and here we have AppointmentResource,

33
00:01:51.771 --> 00:01:57.516
which is found under the folder,

34
00:01:57.516 --> 00:02:01.800
stub/java/com/Pluralsight/patientportal/web/rest.

35
00:02:01.800 --> 00:02:07.757
Go ahead and I'll copy that file, and I'll scroll back up to the project,

36
00:02:07.757 --> 00:02:12.183
and we'll paste it into web.

37
00:02:12.183 --> 00:02:12.921
rest.

38
00:02:12.921 --> 00:02:16.246
So now that I have these two classes in there for a stub,

39
00:02:16.246 --> 00:02:18.457
let's open both of them and look at them.

40
00:02:18.457 --> 00:02:19.278
Start with Appointment.

41
00:02:19.278 --> 00:02:25.465
So you can see here in the appointment domain object I just defined id,

42
00:02:25.465 --> 00:02:28.129
reason, insuranceChange, and phoneNumber.

43
00:02:28.129 --> 00:02:30.543
These are the attributes of my appointment.

44
00:02:30.543 --> 00:02:32.372
Also included in this class are going to be my

45
00:02:32.372 --> 00:02:35.153
constructor and my getters and setters.

46
00:02:35.153 --> 00:02:41.191
Let me close this, and we'll open up our AppointmentResource.

47
00:02:41.191 --> 00:02:45.083
So you can see here at the top this class is annotated as a RestController,

48
00:02:45.083 --> 00:02:51.841
has a mapping of /api, and if I scroll down,

49
00:02:51.841 --> 00:02:55.560
we can see that I'm keeping a static list of appointments.

50
00:02:55.560 --> 00:02:56.695
I can create appointments,

51
00:02:56.695 --> 00:03:01.422
and then I can also return any appointments that I've created as I go along.

52
00:03:01.422 --> 00:03:05.276
The behavior getAllAppointments will return my list of appointments,

53
00:03:05.276 --> 00:03:09.103
and createAppointment will obviously create the appointment.

54
00:03:09.103 --> 00:03:10.557
Now that we have that in place,

55
00:03:10.557 --> 00:03:16.447
we can go back to the browser and see if our functionality works as expected.

56
00:03:16.447 --> 00:03:20.298
Displaying the browser again and I've got the application loaded up.

57
00:03:20.298 --> 00:03:24.143
If you haven't started your client in server yet, you should do so now.

58
00:03:24.143 --> 00:03:26.282
Let's go ahead and log in.

59
00:03:26.282 --> 00:03:29.134
I'll click on Account, and then Sign in,

60
00:03:29.134 --> 00:03:33.727
I'll again use user as the Login and user as the Password,

61
00:03:33.727 --> 00:03:35.380
and we'll select Sign in.

62
00:03:35.380 --> 00:03:40.355
Great, now I'm logged in as a user, and I see my Patient menu,

63
00:03:40.355 --> 00:03:44.238
let's expand that now, and I have the Appointments submenu.

64
00:03:44.238 --> 00:03:45.926
Let's see if our route work.

65
00:03:45.926 --> 00:03:47.332
I'm going to click Appointments,

66
00:03:47.332 --> 00:03:49.546
and sure enough we're sent to the Appointments module

67
00:03:49.546 --> 00:03:51.063
and the Appointments template page.

68
00:03:51.063 --> 00:03:53.813
As you can see, we have no appointments yet,

69
00:03:53.813 --> 00:03:57.399
and that's because we're just stubbing out the backend and we have no

70
00:03:57.399 --> 00:04:00.216
information coming from a database or anything of that sort.

71
00:04:00.216 --> 00:04:02.670
We also have a button in the upper-right corner,

72
00:04:02.670 --> 00:04:06.259
which is going to open up a modle to create a new appointment.

73
00:04:06.259 --> 00:04:07.765
Let's try that out now.

74
00:04:07.765 --> 00:04:10.738
Here we have three inputs that are on an appointment,

75
00:04:10.738 --> 00:04:12.754
we have the Reason, the Insurance Change,

76
00:04:12.754 --> 00:04:14.094
and the Phone Number.

77
00:04:14.094 --> 00:04:16.104
Let's start entering that data now.

78
00:04:16.104 --> 00:04:22.860
I'll enter in the Reason as sick, I'll say I have an insurance change,

79
00:04:22.860 --> 00:04:27.068
and I'll put our phone number in.

80
00:04:27.068 --> 00:04:29.472
Now let's click Save,

81
00:04:29.472 --> 00:04:33.372
and here we see the alert for a new appointment that was created.

82
00:04:33.372 --> 00:04:37.207
We also see that the new value has been added into the table.

83
00:04:37.207 --> 00:04:39.712
So this is great, this verifies our functionality,

84
00:04:39.712 --> 00:04:45.018
and also shows that our alert and event service were working as we expected.

85
00:04:45.018 --> 00:04:47.173
If you want to continue with this example,

86
00:04:47.173 --> 00:04:51.062
you can try adding functionality to edit an existing appointment,

87
00:04:51.062 --> 00:04:57.000
or delete an appointment. Let's summarize what we learned.

