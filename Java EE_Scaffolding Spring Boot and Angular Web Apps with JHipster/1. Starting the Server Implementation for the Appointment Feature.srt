1
00:00:00,000 --> 00:00:01,988
Hi I'm Michael Hoffman.

2
00:00:01,988 --> 00:00:06,150
In this module I'll be demonstrating the implementation of

3
00:00:06,150 --> 00:00:09,370
server-side code to complete the new feature that we

4
00:00:09,370 --> 00:00:11,811
started in the previous module.

5
00:00:11,811 --> 00:00:15,782
I'm going to complete the coding for the new feature, but let's quickly recap.

6
00:00:15,782 --> 00:00:18,192
The business case is to allow patients to interact

7
00:00:18,192 --> 00:00:19,844
with their physicians in a practice.

8
00:00:19,844 --> 00:00:22,300
It's eventually going to be a full functioning portal,

9
00:00:22,300 --> 00:00:25,246
but to start with we just want a feature that allows

10
00:00:25,246 --> 00:00:27,448
patients to manage their appointments.

11
00:00:27,448 --> 00:00:28,785
From a log-in perspective,

12
00:00:28,785 --> 00:00:31,737
I already have made changes to modify the existing

13
00:00:31,737 --> 00:00:33,881
user role to be a patient role.

14
00:00:33,881 --> 00:00:37,686
On the server side, I'll be showing you how JHipster handles security concerns,

15
00:00:37,686 --> 00:00:39,281
including the log-in.

16
00:00:39,281 --> 00:00:41,091
While I initially stubbed out the API,

17
00:00:41,091 --> 00:00:43,309
I'm going to replace it with full functionality.

18
00:00:43,309 --> 00:00:47,183
The first step will be to add support for persisting new appointments.

19
00:00:47,183 --> 00:00:49,864
I'll be implementing the REST controller,

20
00:00:49,864 --> 00:00:53,968
service, repository, and database script for appointments.

21
00:00:53,968 --> 00:00:55,160
With appointment persistence in place,

22
00:00:55,160 --> 00:01:06,000
it will be fairly easy to then replace the API for returning all appointments. Let's start by adding the new appointment schema to our Liquibase scripts.

