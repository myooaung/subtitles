WEBVTT
1
00:00:00.000 --> 00:00:04.227
The next decision to make is the type of

2
00:00:04.227 --> 00:00:06.515
authentication to use in the application.

3
00:00:06.515 --> 00:00:10.046
JHipster presents you with three options to choose from.

4
00:00:10.046 --> 00:00:13.681
Let's look at the details for these.

5
00:00:13.681 --> 00:00:18.996
JHipster supports two categories of authentication, stateful and stateless.

6
00:00:18.996 --> 00:00:22.083
Let's look at the stateless options fist.

7
00:00:22.083 --> 00:00:26.970
JSON web token, or JWT, is the first option for stateless authentication.

8
00:00:26.970 --> 00:00:29.209
JHipster provides support for this authentication type

9
00:00:29.209 --> 00:00:33.020
through an open source project called Java JWT.

10
00:00:33.020 --> 00:00:36.583
Authentication occurs through a secure token that holds

11
00:00:36.583 --> 00:00:38.957
the user's login name and authorities.

12
00:00:38.957 --> 00:00:42.604
The token gets signed, so it can't be altered by the user.

13
00:00:42.604 --> 00:00:46.790
For this option, a secret key is configured via properties.

14
00:00:46.790 --> 00:00:50.712
The second option for stateless authentication is OAuth2.

15
00:00:50.712 --> 00:00:53.097
JHipster provides support for this authentication type

16
00:00:53.097 --> 00:00:55.204
through the Spring Security library.

17
00:00:55.204 --> 00:00:59.582
This approach requires several database tables to store security tokens.

18
00:00:59.582 --> 00:01:03.776
Similar to JWT, a secret key is configured via properties.

19
00:01:03.776 --> 00:01:07.450
While these two options could be considered viable,

20
00:01:07.450 --> 00:01:11.457
in this course I'll be selecting the third option.

21
00:01:11.457 --> 00:01:14.648
HTTP Session-based authentication is implemented by

22
00:01:14.648 --> 00:01:17.249
JHipster via the Spring Security library.

23
00:01:17.249 --> 00:01:20.859
It's the most common approach for Spring Security implementations.

24
00:01:20.859 --> 00:01:23.920
On top of the Spring Security features,

25
00:01:23.920 --> 00:01:27.941
JHipster provides additional support for remember me functionality,

26
00:01:27.941 --> 00:01:33.104
session hijacking protection, and CSRF protection.

27
00:01:33.104 --> 00:01:37.885
Let's look at some more details around HTTP Session-based authentication.

28
00:01:37.885 --> 00:01:40.493
There are three key features that JHipster generates for

29
00:01:40.493 --> 00:01:42.021
HTTP Session-based authentication.

30
00:01:42.021 --> 00:01:45.734
First, you get built-in account management.

31
00:01:45.734 --> 00:01:48.620
This comes in the form of out of the box views,

32
00:01:48.620 --> 00:01:52.638
like the login page, registration page, and password reset page.

33
00:01:52.638 --> 00:01:56.311
JHipster starts you with a full configuration for Spring Security

34
00:01:56.311 --> 00:02:00.340
that includes secured access to web pages and APIs.

35
00:02:00.340 --> 00:02:02.694
It also defines some of the features mentioned earlier,

36
00:02:02.694 --> 00:02:08.362
including remember me, and protection from CSRF and session hijacking.

37
00:02:08.362 --> 00:02:12.787
Finally, JHipster starts you off with a set of rules and user accounts.

38
00:02:12.787 --> 00:02:14.994
These are maintained in database tables that are

39
00:02:14.994 --> 00:02:17.587
generated for you and managed by Liquibase,

40
00:02:17.587 --> 00:02:19.352
which I'll cover later.

41
00:02:19.352 --> 00:02:24.195
For me, this feature alone is a key differentiator from other scaffolding tools.

42
00:02:24.195 --> 00:02:27.542
Security is one of the most important aspects of an application,

43
00:02:27.542 --> 00:02:27.832
however,

44
00:02:27.832 --> 00:02:30.732
it's also the feature that I see the most inconsistently

45
00:02:30.732 --> 00:02:32.535
implemented from project to project.

46
00:02:32.535 --> 00:02:36.438
Just being able to start with this foundation should be a huge

47
00:02:36.438 --> 00:02:38.763
improvement for your productivity and your quality.

48
00:02:38.763 --> 00:02:44.210
Now that we know what gets generated for HTTP Session-based authentication,

49
00:02:44.210 --> 00:02:46.427
let's select it.

50
00:02:46.427 --> 00:02:48.594
I've opened back up Windows PowerShell,

51
00:02:48.594 --> 00:02:51.483
and I can now select my authentication type.

52
00:02:51.483 --> 00:03:03.000
So I'll go down to HTTP Session Authentication, and I'll select it. With that decision made, next up are the options for the database.

