1
00:00:00,000 --> 00:00:02,003
Hi, I'm Michael Hoffman.

2
00:00:02,003 --> 00:00:07,262
In this module, I'll be covering JHipster support for production deployment.

3
00:00:07,262 --> 00:00:10,970
I'll demonstrate the configuration and execution of the application that

4
00:00:10,970 --> 00:00:14,837
we generated into a production server environment.

5
00:00:14,837 --> 00:00:18,722
JHipster defines two types of application runtimes.

6
00:00:18,722 --> 00:00:19,555
Up until now,

7
00:00:19,555 --> 00:00:22,052
I've used Gradle and YARN to run the JHipster

8
00:00:22,052 --> 00:00:23,957
generated application in development mode.

9
00:00:23,957 --> 00:00:28,671
Now, let's shift to running the application in a production runtime.

10
00:00:28,671 --> 00:00:30,816
This means the application will be using a different set

11
00:00:30,816 --> 00:00:32,489
of configurations from development,

12
00:00:32,489 --> 00:00:38,611
such as using Microsoft SQL Server in place of H2 for the database.

13
00:00:38,611 --> 00:00:41,135
The production runtime for a JHipster application comes

14
00:00:41,135 --> 00:00:43,136
with a whole new set of concerns.

15
00:00:43,136 --> 00:00:46,290
It should come as no surprise as no surprise that JHipster

16
00:00:46,290 --> 00:00:49,413
provides you with strong support for addressing them.

17
00:00:49,413 --> 00:00:52,065
The first concern is production configuration.

18
00:00:52,065 --> 00:00:54,674
In the patient portal application I selected to use

19
00:00:54,674 --> 00:00:59,911
an H2 database in development, and a Microsoft SQL Server database in production.

20
00:00:59,911 --> 00:01:03,935
This has impacts on how the application interacts with the database.

21
00:01:03,935 --> 00:01:06,328
To address this type of concern,

22
00:01:06,328 --> 00:01:09,321
JHipster defines two Spring profiles- one for development,

23
00:01:09,321 --> 00:01:10,653
and one for production.

24
00:01:10,653 --> 00:01:13,294
As you saw on the server code demonstration,

25
00:01:13,294 --> 00:01:17,271
the application code explicitly configures H2 for the

26
00:01:17,271 --> 00:01:19,659
Spring development profile only.

27
00:01:19,659 --> 00:01:24,449
I'll be covering more details about project configuration and profiles shortly.

28
00:01:24,449 --> 00:01:26,671
The next concern is continuous integration and

29
00:01:26,671 --> 00:01:29,230
continuous delivery of the application.

30
00:01:29,230 --> 00:01:31,796
After development is complete,

31
00:01:31,796 --> 00:01:34,205
there may be one or more tasks that need to be performed for

32
00:01:34,205 --> 00:01:37,708
the deployment artifact to be published.

33
00:01:37,708 --> 00:01:39,913
JHipster supports sub generators for configuring

34
00:01:39,913 --> 00:01:44,943
these tasks to work with CI systems, including Jenkins,

35
00:01:44,943 --> 00:01:47,562
Travis, GitLab, and Circle.

36
00:01:47,562 --> 00:01:49,972
This concern is outside of the scope of the course,

37
00:01:49,972 --> 00:01:55,038
however, please visit the JHipster website for more information on the topic.

38
00:01:55,038 --> 00:01:59,531
Once the application is configured, and CI/CD tasks are complete,

39
00:01:59,531 --> 00:02:05,500
the next concern is the creation of either an executable or deployable artifact.

40
00:02:05,500 --> 00:02:07,878
JHipster provides you with support for either of these

41
00:02:07,878 --> 00:02:09,945
options through a defined Gradle build.

42
00:02:09,945 --> 00:02:13,712
I'll be demonstrating this after a covered production configuration.

43
00:02:13,712 --> 00:02:17,497
Once the artifact is generated, it needs to be deployed.

44
00:02:17,497 --> 00:02:20,987
As you likely know, there are many options for choosing deployment.

45
00:02:20,987 --> 00:02:26,080
JHipster provides you with sub generators to support several of these options,

46
00:02:26,080 --> 00:02:29,936
including deployment to Docker, Pivotal Cloud Foundry,

47
00:02:29,936 --> 00:02:32,968
Kubernetes, AWS, and Heroku.

48
00:02:32,968 --> 00:02:35,964
In this course, I'm just going to run an executable WAR,

49
00:02:35,964 --> 00:02:38,514
as it's the quickest and easiest example.

50
00:02:38,514 --> 00:02:40,444
Finally, once the application is deployed,

51
00:02:40,444 --> 00:02:43,919
it's important to have ways to monitor the application,

52
00:02:43,919 --> 00:02:46,107
such as metrics and auditing.

53
00:02:46,107 --> 00:02:48,817
JHipster provides you with the support by generating the

54
00:02:48,817 --> 00:02:52,267
application with dependencies and metrics libraries.

55
00:02:52,267 --> 00:02:54,318
Monitoring is outside the scope of this course,

56
00:02:54,318 --> 00:02:56,918
so I don't plan to cover it any further.

57
00:02:56,918 --> 00:02:58,567
With these concerns of mine,

58
00:02:58,567 --> 00:03:02,592
let's look at what you will need to follow along with

59
00:03:02,592 --> 00:03:04,139
the demonstration of deployment.

60
00:03:04,139 --> 00:03:07,811
To run the SQL Server production database, I'll be using Docker.

61
00:03:07,811 --> 00:03:12,546
We can find the installation on the Docker website at docker.

62
00:03:12,546 --> 00:03:12,976
com.

63
00:03:12,976 --> 00:03:14,847
I'll be using Docker for Windows to keep consistency

64
00:03:14,847 --> 00:03:16,681
with the rest of the course material.

65
00:03:16,681 --> 00:03:19,687
I won't be showing you how to install it,

66
00:03:19,687 --> 00:03:21,483
but if you run into setup issues,

67
00:03:21,483 --> 00:03:24,519
I would recommend to check out one of the existing

68
00:03:24,519 --> 00:03:26,173
Pluralsight courses for support.

69
00:03:26,173 --> 00:03:26,403
Now,

70
00:03:26,403 --> 00:03:33,000
let's look at how we can configure the patient portal application for deployment.

