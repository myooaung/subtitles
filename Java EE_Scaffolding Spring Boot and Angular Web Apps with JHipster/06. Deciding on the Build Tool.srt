1
00:00:02,449 --> 00:00:05,990
JHipster supports two build tools for the back end.

2
00:00:05,990 --> 00:00:08,622
You can choose from either Maven or Gradle.

3
00:00:08,622 --> 00:00:12,105
As I mentioned earlier in the course, we're going to use Gradle.

4
00:00:12,105 --> 00:00:16,755
I prefer to use it because it uses code over XML configuration.

5
00:00:16,755 --> 00:00:18,381
Let's select Gradle now.

6
00:00:18,381 --> 00:00:19,601
With Gradle selected,

7
00:00:19,601 --> 00:00:24,875
I'll briefly cover what JHipster is providing for your builds.

8
00:00:24,875 --> 00:00:30,012
The build tasks that JHipster generates are broken down to two categories.

9
00:00:30,012 --> 00:00:33,047
First, you have your common build tasks.

10
00:00:33,047 --> 00:00:35,729
These tasks include compiling the Java code,

11
00:00:35,729 --> 00:00:38,982
generating the WAR file, managing dependencies,

12
00:00:38,982 --> 00:00:41,087
and running tasks.

13
00:00:41,087 --> 00:00:44,761
There are also several support tasks that get included.

14
00:00:44,761 --> 00:00:47,684
These type of tasks are available for supporting the running of

15
00:00:47,684 --> 00:00:50,030
Liquibase for database schema management,

16
00:00:50,030 --> 00:00:55,291
Webpack for web asset builds, Sonar for technical debt reports,

17
00:00:55,291 --> 00:00:58,111
and Docker for container-based runtime.

18
00:00:58,111 --> 00:01:02,554
Finally, Gradle scripts allow for support to run and configure tasks,

19
00:01:02,554 --> 00:01:05,126
based on the Spring profile that you're running with.

20
00:01:05,126 --> 00:01:08,618
This includes a development and production profile.

21
00:01:08,618 --> 00:01:14,000
Now that you know what's supported for Gradle, let's continue to the next decision.

