1
00:00:02,290 --> 00:00:05,191
To maintain focus on what JHipster is providing to you,

2
00:00:05,191 --> 00:00:07,764
I'll be walking you through dropping in the new

3
00:00:07,764 --> 00:00:09,625
patient module from a GitHub repository.

4
00:00:09,625 --> 00:00:14,114
You can download the project from the repository that's listed.

5
00:00:14,114 --> 00:00:21,125
The URL is github.

6
00:00:21,125 --> 00:00:22,878
com/michaelhoffmantech/patient-portal-resources.

7
00:00:22,878 --> 00:00:27,666
You'll be copying the folder client/patient into the project.

8
00:00:27,666 --> 00:00:31,486
The source code is also included as part of the Pluralsight course material.

9
00:00:31,486 --> 00:00:34,689
Let's copy those files now.

10
00:00:34,689 --> 00:00:35,806
I've opened back up Eclipse,

11
00:00:35,806 --> 00:00:39,155
I'm not going to show you how to actually get the project from Git

12
00:00:39,155 --> 00:00:42,189
but I've already gone ahead and I've pulled down the project and

13
00:00:42,189 --> 00:00:43,921
I've loaded it up in the workspace.

14
00:00:43,921 --> 00:00:47,979
So again I have a project named patient-portal-resources,

15
00:00:47,979 --> 00:00:51,827
and under the client folder I'm going to select patient,

16
00:00:51,827 --> 00:00:53,613
and I'll right-click and select Copy.

17
00:00:53,613 --> 00:00:56,665
I'm going to scroll up to the project,

18
00:00:56,665 --> 00:01:02,470
and here under the folder source/main/webapp/app,

19
00:01:02,470 --> 00:01:06,694
I'll go ahead and I'll paste in the patient module.

20
00:01:06,694 --> 00:01:09,956
Okay so now you should have the patient module loaded into the application,

21
00:01:09,956 --> 00:01:15,789
let's walk through the files that are found in this folder.

22
00:01:15,789 --> 00:01:19,264
I'm displaying the code structure for the patient module.

23
00:01:19,264 --> 00:01:21,933
While I don't plan to dive into the entire code structure,

24
00:01:21,933 --> 00:01:26,369
I do plan to cover the segments where JHipster is providing a feature for you.

25
00:01:26,369 --> 00:01:29,222
Here's a quick description for each of these files.

26
00:01:29,222 --> 00:01:32,802
At the root of the patient directory is the patient.

27
00:01:32,802 --> 00:01:33,518
module definition.

28
00:01:33,518 --> 00:01:36,981
This texture class has a simple module decoration that

29
00:01:36,981 --> 00:01:39,009
just imports the appointment module.

30
00:01:39,009 --> 00:01:42,330
In the appointments directory we have the appointments.

31
00:01:42,330 --> 00:01:43,097
module file.

32
00:01:43,097 --> 00:01:46,806
This typescript class has a more detailed module decoration.

33
00:01:46,806 --> 00:01:50,353
It imports dependencies for the appointments page,

34
00:01:50,353 --> 00:01:53,354
including routes, components, and services.

35
00:01:53,354 --> 00:01:56,437
The next file in this directory is the appointments.

36
00:01:56,437 --> 00:01:57,122
componet class.

37
00:01:57,122 --> 00:01:59,370
This defines the template for the appointments view

38
00:01:59,370 --> 00:02:01,184
and corresponding style sheet.

39
00:02:01,184 --> 00:02:05,784
It also loads all the appointments for the patient.

40
00:02:05,784 --> 00:02:06,440
The appointments.

41
00:02:06,440 --> 00:02:10,348
component HTML then defines the template for the view of appointments.

42
00:02:10,348 --> 00:02:13,135
The appointments cascading style sheet file defines

43
00:02:13,135 --> 00:02:15,196
the styling for this template.

44
00:02:15,196 --> 00:02:16,866
Next is the appointments.

45
00:02:16,866 --> 00:02:20,207
model, which defines the attributes of an appointment.

46
00:02:20,207 --> 00:02:23,247
We have the route file that defines the route for the main view page,

47
00:02:23,247 --> 00:02:27,815
and a popup modle dialog for creating new appointments.

48
00:02:27,815 --> 00:02:28,397
The appointments.

49
00:02:28,397 --> 00:02:31,551
service file contains the service definitions for getting and

50
00:02:31,551 --> 00:02:34,901
posting appointments to the backend API.

51
00:02:34,901 --> 00:02:36,751
The appointments-dialog component class primarily

52
00:02:36,751 --> 00:02:39,183
defines the call to the appointment.

53
00:02:39,183 --> 00:02:41,827
service for creating a new appointment.

54
00:02:41,827 --> 00:02:47,647
The appointments-dialog HTML then defines the template for a new appointment.

55
00:02:47,647 --> 00:02:49,330
There is an appointments-popup.

56
00:02:49,330 --> 00:02:52,098
service for opening the modle, and finally,

57
00:02:52,098 --> 00:02:55,564
there's an index page that contains the exports of services,

58
00:02:55,564 --> 00:02:56,996
components, and routes.

59
00:02:56,996 --> 00:03:01,290
Let's look at some of this code in detail.

60
00:03:01,290 --> 00:03:06,297
Let's start by looking at a snippet of the code from the file appointments.

61
00:03:06,297 --> 00:03:06,654
module.

62
00:03:06,654 --> 00:03:07,012
ts.

63
00:03:07,012 --> 00:03:11,174
Note that I'm importing the PatientPortalSharedModule.

64
00:03:11,174 --> 00:03:14,434
This shared module was generated for you by JHipster.

65
00:03:14,434 --> 00:03:18,222
It provides you with access to several shared items.

66
00:03:18,222 --> 00:03:21,297
This includes an alert component for outputting

67
00:03:21,297 --> 00:03:24,273
informative and error messages to the display,

68
00:03:24,273 --> 00:03:27,057
authentication and authorization services and directives to

69
00:03:27,057 --> 00:03:30,447
support working with the principle user and securing the

70
00:03:30,447 --> 00:03:33,585
client-side of the application, constants for client code,

71
00:03:33,585 --> 00:03:38,122
and finally, helpers for server requests and responses.

72
00:03:38,122 --> 00:03:41,026
I've made use of some of these assets in the appointments module,

73
00:03:41,026 --> 00:03:43,092
and I'll share it as we go along.

74
00:03:43,092 --> 00:03:47,987
Next, I've shown you a snippet of the code from the file appointments.

75
00:03:47,987 --> 00:03:48,438
component.

76
00:03:48,438 --> 00:03:48,888
ts.

77
00:03:48,888 --> 00:03:53,000
You'll notice in the constructor that there are three parameters passed.

78
00:03:53,000 --> 00:03:55,507
I'll be showing you the appointment service shortly,

79
00:03:55,507 --> 00:03:57,074
which is the first parameter.

80
00:03:57,074 --> 00:04:01,044
The second parameter is the JhiAlertService.

81
00:04:01,044 --> 00:04:04,459
What's interesting about this input is that JhiAlertService is an

82
00:04:04,459 --> 00:04:08,233
interface that's brought in as a third-party dependency.

83
00:04:08,233 --> 00:04:11,892
The third party dependency here is actually JHipster.

84
00:04:11,892 --> 00:04:14,736
This is one of the first examples of where we have

85
00:04:14,736 --> 00:04:16,784
application code coupled to JHipster.

86
00:04:16,784 --> 00:04:21,927
The NG JHipster library is brought in as part of the project generation.

87
00:04:21,927 --> 00:04:25,782
The alert service provides you with the ability to track one or more alerts,

88
00:04:25,782 --> 00:04:28,056
which can then be displayed on the page.

89
00:04:28,056 --> 00:04:30,957
It provides support for different types of alerts,

90
00:04:30,957 --> 00:04:34,035
including success messages, warning messages,

91
00:04:34,035 --> 00:04:36,932
error messages, and informative messages.

92
00:04:36,932 --> 00:04:37,399
Given that,

93
00:04:37,399 --> 00:04:42,662
I plan to include it as part of the page to display success and error messages.

94
00:04:42,662 --> 00:04:46,354
The last parameter is the JhiEventManager.

95
00:04:46,354 --> 00:04:47,862
Similar to the alert service,

96
00:04:47,862 --> 00:04:53,039
this is provided as a dependency from JHipster as part of project generation.

97
00:04:53,039 --> 00:04:56,759
It wraps RxJS observables for the purpose of providing a

98
00:04:56,759 --> 00:04:58,464
published subscribe feature for events.

99
00:04:58,464 --> 00:05:02,783
I plan to use it to update the list of appointments after

100
00:05:02,783 --> 00:05:05,420
a new appointment has been created.

101
00:05:05,420 --> 00:05:06,203
Along with the constructor,

102
00:05:06,203 --> 00:05:09,895
I want to focus on three of the behaviors in the appointments.

103
00:05:09,895 --> 00:05:10,957
component class.

104
00:05:10,957 --> 00:05:12,499
The first behavior is loadAll.

105
00:05:12,499 --> 00:05:15,669
This symbol uses the appointmentService the query the

106
00:05:15,669 --> 00:05:18,088
list of all available appointments.

107
00:05:18,088 --> 00:05:20,535
Note that Responsewrapper is another shared class that

108
00:05:20,535 --> 00:05:22,774
was generated for you by JHipster.

109
00:05:22,774 --> 00:05:25,096
It encapsulates the header, JSON body,

110
00:05:25,096 --> 00:05:28,975
and status of a response from a backend server call.

111
00:05:28,975 --> 00:05:31,420
Also note that as part of the error condition,

112
00:05:31,420 --> 00:05:33,316
the onError behavior will be called.

113
00:05:33,316 --> 00:05:37,526
The onError function simply uses the alert service to display an error message,

114
00:05:37,526 --> 00:05:40,300
which in our case is the ResponseWrapper's JSON body.

115
00:05:40,300 --> 00:05:43,833
The last behavior is to register a change in appointments.

116
00:05:43,833 --> 00:05:47,767
Here I used the eventManager from JHipster's wrapper to

117
00:05:47,767 --> 00:05:51,019
subscribe to appointment list modifications.

118
00:05:51,019 --> 00:05:54,346
This will result in the loadAll behavior being executed.

119
00:05:54,346 --> 00:05:56,864
Next, we have the appointments.

120
00:05:56,864 --> 00:05:57,368
component.

121
00:05:57,368 --> 00:05:58,375
html file.

122
00:05:58,375 --> 00:06:02,775
This is the template associated with our appointments component.

123
00:06:02,775 --> 00:06:05,140
Let's look at three parts of this file.

124
00:06:05,140 --> 00:06:07,914
Near the top is the button to create a new appointment.

125
00:06:07,914 --> 00:06:12,760
This opens a popup using a route to patient-appointments-new.

126
00:06:12,760 --> 00:06:14,704
We're going to see that shortly.

127
00:06:14,704 --> 00:06:16,973
Below the button in the alert selector.

128
00:06:16,973 --> 00:06:19,912
This selector is used by the alert component that JHipster

129
00:06:19,912 --> 00:06:24,107
generated in the folder shared/alert.

130
00:06:24,107 --> 00:06:24,981
This approach is important,

131
00:06:24,981 --> 00:06:27,691
as I've seen many applications that have inconsistent message

132
00:06:27,691 --> 00:06:31,426
display return to the user across an application.

133
00:06:31,426 --> 00:06:34,337
JHipster is providing you with a standardized reusable way

134
00:06:34,337 --> 00:06:38,134
to display information across your app.

135
00:06:38,134 --> 00:06:42,729
The final section is the output for the list of appointments.

136
00:06:42,729 --> 00:06:46,248
Note that trackBy is used for the iteration of appointments.

137
00:06:46,248 --> 00:06:49,293
This just calls the trackId function on the component to

138
00:06:49,293 --> 00:06:52,286
return the appointment ID for iteration.

139
00:06:52,286 --> 00:06:54,975
That covers the appointments component.

140
00:06:54,975 --> 00:06:57,701
I'm not planning to show you the CSS file for the component,

141
00:06:57,701 --> 00:06:59,972
nor am I going to show you the model.

142
00:06:59,972 --> 00:07:04,089
Next, I'm displaying one of the routes from the fileappointments.

143
00:07:04,089 --> 00:07:04,500
route.

144
00:07:04,500 --> 00:07:04,912
ts.

145
00:07:04,912 --> 00:07:08,504
There are two key values in this route, and both are related to security.

146
00:07:08,504 --> 00:07:12,822
In the previous module, we made a change related to route guards.

147
00:07:12,822 --> 00:07:15,375
Route guards define whether or not the user has the

148
00:07:15,375 --> 00:07:17,383
necessary access to activate the route.

149
00:07:17,383 --> 00:07:21,504
We changed the role name in the data that we passed.

150
00:07:21,504 --> 00:07:27,512
In this route, we again are using the authorities value of ROLE_PATIENT.

151
00:07:27,512 --> 00:07:27,803
Next,

152
00:07:27,803 --> 00:07:31,653
note that I have defined the UserRouteAccessService as the value in canActivate.

153
00:07:31,653 --> 00:07:35,331
This means that when the route attempts to activate,

154
00:07:35,331 --> 00:07:38,179
it will call this JHipster generated service,

155
00:07:38,179 --> 00:07:40,610
check the user's authorities for ROLE_PATIENT,

156
00:07:40,610 --> 00:07:45,667
and return true or false based on the value being present.

157
00:07:45,667 --> 00:07:48,821
I've displayed several of the behaviors on the appointment service class,

158
00:07:48,821 --> 00:07:52,333
which is found in the file appointments.

159
00:07:52,333 --> 00:07:52,834
service.

160
00:07:52,834 --> 00:07:53,336
ts.

161
00:07:53,336 --> 00:07:57,360
The create function will post data for our new appointment to our backend API,

162
00:07:57,360 --> 00:08:02,036
which has the resource URL of api/appointments.

163
00:08:02,036 --> 00:08:06,406
We're going to implement this backend functionality later in the course.

164
00:08:06,406 --> 00:08:09,612
The next function is the query function.

165
00:08:09,612 --> 00:08:12,735
Once again, we see the JHipster generated ResponseWrapper,

166
00:08:12,735 --> 00:08:15,773
which includes headers, the body in JSON format,

167
00:08:15,773 --> 00:08:17,292
and a status number.

168
00:08:17,292 --> 00:08:21,195
This function also uses the imported createRequestOption.

169
00:08:21,195 --> 00:08:24,939
This will add additional search parameter data for backend server calls,

170
00:08:24,939 --> 00:08:28,543
including the page number, size, and sort action.

171
00:08:28,543 --> 00:08:30,318
The last function is convertResponse,

172
00:08:30,318 --> 00:08:34,682
which just takes a response object passed and wraps it in

173
00:08:34,682 --> 00:08:36,840
the ResponseWrapper generated by JHipster.

174
00:08:36,840 --> 00:08:39,463
There are four remaining files, which I'll cover at a high level,

175
00:08:39,463 --> 00:08:43,636
since they don't introduce any JHipster features that you haven't already seen.

176
00:08:43,636 --> 00:08:44,889
The appointments-dialog.

177
00:08:44,889 --> 00:08:45,516
component.

178
00:08:45,516 --> 00:08:48,648
ts file contains two classes.

179
00:08:48,648 --> 00:08:53,064
The AppointmentsDialogComponent provides functions to support saving a new

180
00:08:53,064 --> 00:08:56,801
appointment using the appointment service that we just covered.

181
00:08:56,801 --> 00:08:59,663
The AppointmentsPopupComponent provides support for calling the

182
00:08:59,663 --> 00:09:03,133
appointments popup service to manage the modle.

183
00:09:03,133 --> 00:09:07,906
This component uses the template file appointments dialog.

184
00:09:07,906 --> 00:09:08,502
component.

185
00:09:08,502 --> 00:09:09,099
html.

186
00:09:09,099 --> 00:09:11,787
This template leverages the JHipster alert directive,

187
00:09:11,787 --> 00:09:14,672
and displays the form for entering a new appointment.

188
00:09:14,672 --> 00:09:18,999
The final class if found in the file appointments-popup.

189
00:09:18,999 --> 00:09:19,480
service.

190
00:09:19,480 --> 00:09:19,961
ts.

191
00:09:19,961 --> 00:09:22,713
This class is just responsible for the management of the modle,

192
00:09:22,713 --> 00:09:25,375
including opening and closing it.

193
00:09:25,375 --> 00:09:28,037
The final file is index.

194
00:09:28,037 --> 00:09:28,569
ts.

195
00:09:28,569 --> 00:09:31,817
This file just simply exports resources from our module.

196
00:09:31,817 --> 00:09:33,053
With this module in place,

197
00:09:33,053 --> 00:09:36,455
there's one additional update that we need to make to the

198
00:09:36,455 --> 00:09:39,342
client code for our patient module to work.

199
00:09:39,342 --> 00:09:42,581
I've opened back up Eclipse, I have the file app.

200
00:09:42,581 --> 00:09:42,905
module.

201
00:09:42,905 --> 00:09:44,659
ts loaded up in the editor.

202
00:09:44,659 --> 00:09:47,681
You can find this file in the folder source/main/webapp/app.

203
00:09:47,681 --> 00:09:52,822
We need to import our new module.

204
00:09:52,822 --> 00:09:56,438
I'm going to start by adding an import declaration.

205
00:09:56,438 --> 00:10:01,541
Great, now we've imported the module PatientPortalPatientModule.

206
00:10:01,541 --> 00:10:05,814
The second step is to add the module as an import in the NG module declaration.

207
00:10:05,814 --> 00:10:11,561
Scroll down a bit, and I'm going to drop our new module in.

208
00:10:11,561 --> 00:10:21,000
So now the app is aware of our new patient module. Let's take the next step and stub out our server code.

