WEBVTT
1
00:00:02.481 --> 00:00:04.555
Now that we have the production configuration complete,

2
00:00:04.555 --> 00:00:09.693
and the production database running, we can focus on the application runtime.

3
00:00:09.693 --> 00:00:12.088
I'm going to focus on three options for running the

4
00:00:12.088 --> 00:00:13.686
patient portal application in production.

5
00:00:13.686 --> 00:00:14.059
First,

6
00:00:14.059 --> 00:00:18.254
if you just want to locally execute the application with the production profile,

7
00:00:18.254 --> 00:00:24.271
you can run the command gradlew, passing the prod profile as an argument.

8
00:00:24.271 --> 00:00:27.197
This will start the application in a very similar fashion to how

9
00:00:27.197 --> 00:00:29.926
we've been starting it throughout the course.

10
00:00:29.926 --> 00:00:30.142
Now,

11
00:00:30.142 --> 00:00:33.092
it's more likely that you're going to use one of the following two

12
00:00:33.092 --> 00:00:35.639
options for running the application in production.

13
00:00:35.639 --> 00:00:39.205
Running the application as an executable WAR means that all of the

14
00:00:39.205 --> 00:00:42.093
runtime libraries have been packaged into the WAR for you.

15
00:00:42.093 --> 00:00:50.761
The WAR file gets generated by using the command gradlew -Pprod bootRepackage.

16
00:00:50.761 --> 00:00:55.888
You can find the WAR file in the project folder build/libs.

17
00:00:55.888 --> 00:00:59.080
I'm going to use this approach shortly for demonstration.

18
00:00:59.080 --> 00:01:03.578
A second option for running the application is as a deployed WAR file.

19
00:01:03.578 --> 00:01:06.522
This file gets generated at the same time and in the same folder

20
00:01:06.522 --> 00:01:10.642
as the executable WAR using the same command.

21
00:01:10.642 --> 00:01:13.613
There are two differences from the executable WAR.

22
00:01:13.613 --> 00:01:18.213
The deployable WAR does not include libraries that are marked for runtime.

23
00:01:18.213 --> 00:01:22.995
Also, the deployable WAR is suffixed with the name.

24
00:01:22.995 --> 00:01:23.526
original.

25
00:01:23.526 --> 00:01:28.361
You would use this when deploying to a container, such as Tomcat or Websphere.

26
00:01:28.361 --> 00:01:29.923
Note that in all cases,

27
00:01:29.923 --> 00:01:33.798
using the production profile will automatically result in the

28
00:01:33.798 --> 00:01:37.268
generation of optimized JavaScript through Webpack.

29
00:01:37.268 --> 00:01:42.419
Now that we know the options, let's build an run an executable WAR.

30
00:01:42.419 --> 00:01:46.366
I've opened a command prompt and navigated to the project directory.

31
00:01:46.366 --> 00:01:50.441
I'm going to run the command to generate the executable WAR file.

32
00:01:50.441 --> 00:01:52.379
Let me paste that in now.

33
00:01:52.379 --> 00:01:55.860
Once again I've fast forwarded to the end of the build,

34
00:01:55.860 --> 00:01:58.910
you should see the message that the build was successful.

35
00:01:58.910 --> 00:02:01.179
Now let's try to run the WAR file.

36
00:02:01.179 --> 00:02:05.715
As I'm on Windows, I'll need to use the command java -jar.

37
00:02:05.715 --> 00:02:10.697
And finally, I need to include the location of our WAR file.

38
00:02:10.697 --> 00:02:12.673
I'm going to drop that in now.

39
00:02:12.673 --> 00:02:15.618
And I'll run the application, and once startup is complete,

40
00:02:15.618 --> 00:02:18.563
we see the message that the application is running.

41
00:02:18.563 --> 00:02:18.848
Now,

42
00:02:18.848 --> 00:02:21.418
let's check out the SQL Server Management Studio to

43
00:02:21.418 --> 00:02:23.829
ensure that Liquibase ran successfully.

44
00:02:23.829 --> 00:02:27.322
I've opened up SQL Server Management Studio,

45
00:02:27.322 --> 00:02:30.671
and let's once again log in as the host as localhost,

46
00:02:30.671 --> 00:02:35.305
the user as sa, and password as Password with a capital P,

47
00:02:35.305 --> 00:02:38.463
the number 1, and the exclamation point.

48
00:02:38.463 --> 00:02:43.875
Now that we're logged in, let's navigate down to see the tables.

49
00:02:43.875 --> 00:02:46.314
And here we see the tables have been generated successfully,

50
00:02:46.314 --> 00:02:49.377
including the appointments table that we added.

51
00:02:49.377 --> 00:02:52.261
That verifies that the database is set up correctly.

52
00:02:52.261 --> 00:02:54.901
Now let's look at the log file.

53
00:02:54.901 --> 00:02:57.164
I've once again opened up Eclipse,

54
00:02:57.164 --> 00:03:00.767
as I didn't specify a folder during configuration the application

55
00:03:00.767 --> 00:03:03.450
log file that we defined in logback-spring.

56
00:03:03.450 --> 00:03:07.256
xml will be located at the root of our project.

57
00:03:07.256 --> 00:03:11.793
If you don't see it, you may need to refresh the project.

58
00:03:11.793 --> 00:03:15.026
Here is the log with the name patientportal.

59
00:03:15.026 --> 00:03:16.238
the timestamp, and.

60
00:03:16.238 --> 00:03:16.642
log.

61
00:03:16.642 --> 00:03:21.466
And as we can see, the application log is working as we expected.

62
00:03:21.466 --> 00:03:27.286
The final step is to verify that the application is actually running correctly.

63
00:03:27.286 --> 00:03:31.576
I've opened up the browser, and I've navigated to the URL localhost port 8080.

64
00:03:31.576 --> 00:03:37.120
To begin with, this verifies that anonymous usage is working as we expected.

65
00:03:37.120 --> 00:03:38.915
Let's try to log in.

66
00:03:38.915 --> 00:03:41.117
I'm going to click Account, Sign in,

67
00:03:41.117 --> 00:03:45.925
and I'll log in with user as the Login and user as the Password.

68
00:03:45.925 --> 00:03:48.157
Great, we're able to log in.

69
00:03:48.157 --> 00:03:52.072
Now let's navigate to Patient, Appointments.

70
00:03:52.072 --> 00:03:56.383
Okay, and here we see the list of appointments with our one line of test data.

71
00:03:56.383 --> 00:04:00.791
So we've successfully verified that the production profile works for a user.

72
00:04:00.791 --> 00:04:04.032
Now, let's look at one less aspect of the production profile.

73
00:04:04.032 --> 00:04:08.641
I'll log out, and then I'm going to sign in again.

74
00:04:08.641 --> 00:04:09.180
This time,

75
00:04:09.180 --> 00:04:14.130
I'm going to sign in with admin as the Login and admin as the Password.

76
00:04:14.130 --> 00:04:18.131
Okay, now I'll expand the Administration menu.

77
00:04:18.131 --> 00:04:20.403
Note that earlier when we were in the development profile,

78
00:04:20.403 --> 00:04:25.138
we could see sub menu items here for swagger and the database console.

79
00:04:25.138 --> 00:04:28.831
Now that we're using SQL Server, it didn't choose to include the swagger profile,

80
00:04:28.831 --> 00:04:32.537
both of these items have been hidden from us.

81
00:04:32.537 --> 00:04:34.888
This concludes the demonstration of deploying a

82
00:04:34.888 --> 00:04:40.000
production version of the application. Let's summarize what we learned.

