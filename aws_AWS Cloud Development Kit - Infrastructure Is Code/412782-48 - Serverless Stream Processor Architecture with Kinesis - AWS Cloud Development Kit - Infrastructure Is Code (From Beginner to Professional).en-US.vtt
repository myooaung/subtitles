WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.620
Hello.

00:00:00.620 --> 00:00:02.550
Welcome to another lecture on Siri K.

00:00:02.550 --> 00:00:07.370
The act actual pattern that we're going to see today is so powerless they doctoring

00:00:07.370 --> 00:00:08.250
processors.

00:00:08.250 --> 00:00:12.670
When you're talking about several s applications or any more than application,

00:00:12.670 --> 00:00:15.960
you would like to capture what is happening from your user end.

00:00:15.960 --> 00:00:22.060
Maybe it is a move by click stream data or what kindof objects that your users are adding

00:00:22.060 --> 00:00:25.940
into the card or what activities they're doing on your weapons.

00:00:25.940 --> 00:00:29.090
You want to capture all that information and do some processing.

00:00:29.090 --> 00:00:29.760
For example,

00:00:29.760 --> 00:00:31.220
if it isn't mobile gaming,

00:00:31.220 --> 00:00:36.120
you would like to create a leaderboard so that people can know where they are standing and

00:00:36.120 --> 00:00:37.210
chatting with their friends.

00:00:37.210 --> 00:00:38.640
So in all those cases,

00:00:38.640 --> 00:00:41.370
that is the stream off data that is coming from your friend.

00:00:41.370 --> 00:00:46.220
And on that day that needs to be processed on your back and on some business logic has to

00:00:46.220 --> 00:00:46.950
be applied.

00:00:46.950 --> 00:00:48.160
So if we taken,

00:00:48.160 --> 00:00:51.410
apply this concept so we will have a Genesis data stream,

00:00:51.410 --> 00:00:56.170
which is can receive a lot of better from your friend on the back end.

00:00:56.170 --> 00:00:58.070
You can have a lambda processor,

00:00:58.070 --> 00:01:02.970
so penises allows you to back through the records and send it your lambda and in Walk the

00:01:02.970 --> 00:01:07.160
Lambda with toast Bash records say that it is a time bone or a number of records,

00:01:07.160 --> 00:01:09.340
depending upon your confrontations on.

00:01:09.340 --> 00:01:10.010
In this case,

00:01:10.010 --> 00:01:12.040
what we're going to see is we're going to create a lamp.

00:01:12.040 --> 00:01:16.950
A function on that lambda function is just going to write those data into and history

00:01:16.950 --> 00:01:17.480
bucket.

00:01:17.480 --> 00:01:19.090
You can have any business logic,

00:01:19.090 --> 00:01:21.140
but the lambda function that I autumn is very,

00:01:21.140 --> 00:01:26.540
very simple on for the front end or ingesting data and dorkiness is it can be in mobile

00:01:26.540 --> 00:01:30.400
plant are pros or anything but to make the simple demo.

00:01:30.400 --> 00:01:33.390
What I'm going to do is I'm going to create another Lambda function,

00:01:33.390 --> 00:01:38.450
which is going to generate some dummy data and threw it into our Genesis dentistry.

00:01:38.450 --> 00:01:40.670
So that is what we're going to build today.

00:01:40.670 --> 00:01:42.740
Let us go toe a city case tack on,

00:01:42.740 --> 00:01:44.390
see how we can build us.

00:01:44.390 --> 00:01:47.500
This is a stack that we're going to pull ash off.

00:01:47.500 --> 00:01:47.670
No,

00:01:47.670 --> 00:01:49.700
you can see here there's nothing there,

00:01:49.700 --> 00:01:54.310
just some comments which is going to help us to see what all the resources that we need to

00:01:54.310 --> 00:01:54.750
build.

00:01:54.750 --> 00:01:59.870
So the question for most of that thing that we're going to build here is going to be an

00:01:59.870 --> 00:02:04.270
Guinness's data stream on your see here there are no imports,

00:02:04.270 --> 00:02:04.640
nothing.

00:02:04.640 --> 00:02:07.220
We're just going to do everything from the stat on.

00:02:07.220 --> 00:02:13.250
I have named my stack as seller Less stream processor architecture with penises stack.

00:02:13.250 --> 00:02:15.650
So let us go ahead and import the KINESIS.

00:02:15.650 --> 00:02:16.250
Morgan.

00:02:16.250 --> 00:02:22.950
And if you remember any importing some model,

00:02:22.950 --> 00:02:27.410
we need to make sure that our requirements while also has that model.

00:02:27.410 --> 00:02:29.660
So right now I don't have penises,

00:02:29.660 --> 00:02:31.670
so I'm just going to go ahead and add it on.

00:02:31.670 --> 00:02:32.200
Install it,

00:02:32.200 --> 00:02:32.750
pass well,

00:02:32.750 --> 00:02:43.290
notice installed This So we have installed Orkin icis package that this Go ahead and build

00:02:43.290 --> 00:02:44.350
our data stream.

00:02:44.350 --> 00:02:46.510
I'm going to call my data stream.

00:02:46.510 --> 00:02:51.620
Must extreme did a pipe under the Genesis morning.

00:02:51.620 --> 00:02:53.630
You have something called a stream.

00:02:53.630 --> 00:02:55.460
So let us go ahead and use that on,

00:02:55.460 --> 00:02:56.100
as always,

00:02:56.100 --> 00:02:58.350
scope it and then create an I d.

00:02:58.350 --> 00:03:01.800
And what is going to be my retention period?

00:03:01.800 --> 00:03:03.210
Whenever a new records of coming in,

00:03:03.210 --> 00:03:06.170
I need to tell Ken this is how long it needs to retain the data.

00:03:06.170 --> 00:03:10.090
So that is what we're going to sit here on the default is 24 are,

00:03:10.090 --> 00:03:11.890
So I'm going to leave it as a default.

00:03:11.890 --> 00:03:13.470
But I'm just going to show you this plan.

00:03:13.470 --> 00:03:16.290
You how you can say it on how many shots count.

00:03:16.290 --> 00:03:18.270
So if you want a lot of throughput,

00:03:18.270 --> 00:03:23.590
then you can go ahead and increase the throughput by adding more and more shots on.

00:03:23.590 --> 00:03:24.420
In this case,

00:03:24.420 --> 00:03:25.390
I'm going to add one.

00:03:25.390 --> 00:03:28.750
The one shot on then what is going to be my name off my scream.

00:03:28.750 --> 00:03:31.640
So I'm going to call this as a data point.

00:03:31.640 --> 00:03:35.390
So we have created our Genesis data stream.

00:03:35.390 --> 00:03:41.210
The next step is we need an extra bucket for our lambda function to store that they're data

00:03:41.210 --> 00:03:41.760
cards.

00:03:41.760 --> 00:03:43.830
So we're going to create the bucket first.

00:03:43.830 --> 00:03:46.450
Then we will go ahead and create our lambda function.

00:03:46.450 --> 00:03:49.030
So I'm going to call my data,

00:03:49.030 --> 00:03:52.560
But get as a data store on Remember,

00:03:52.560 --> 00:03:54.030
we need the model off s three.

00:03:54.030 --> 00:03:59.220
So I'm just going to go ahead and add that as well on.

00:03:59.220 --> 00:04:03.070
I have previously imported s three in my requirements wide,

00:04:03.070 --> 00:04:04.720
so I'm not importing it again.

00:04:04.720 --> 00:04:06.380
If you have not done it go ahead and do that.

00:04:06.380 --> 00:04:07.820
You can see here desperation.

00:04:07.820 --> 00:04:10.270
So some of the other important that already there,

00:04:10.270 --> 00:04:11.020
I'll call it out.

00:04:11.020 --> 00:04:11.900
If it does not,

00:04:11.900 --> 00:04:13.850
just go ahead and make sure you add them.

00:04:13.850 --> 00:04:17.060
So we have on bucket,

00:04:17.060 --> 00:04:23.850
scope it and then call this as stream the gusto or Data lake.

00:04:23.850 --> 00:04:28.670
And I'm just going to add a removed policy also so that my bucket gets cleaned up.

00:04:28.670 --> 00:04:29.210
Remember,

00:04:29.210 --> 00:04:29.960
if you're back,

00:04:29.960 --> 00:04:32.310
it is having some data inside it.

00:04:32.310 --> 00:04:37.260
You are Sirikit Stack is going toe often the bucket and not going to delete it.

00:04:37.260 --> 00:04:40.770
So that will most probably be the case this time because we're going to add some data

00:04:40.770 --> 00:04:41.480
indoor bucket.

00:04:41.480 --> 00:04:43.950
So now I'm going to create a lambda function.

00:04:43.950 --> 00:04:48.860
If we can just recap what we're going to to we have created the KINESIS data stream.

00:04:48.860 --> 00:04:50.890
We have created the S three bucket.

00:04:50.890 --> 00:04:55.050
Now we're going to go ahead and create our lambda function now.

00:04:55.050 --> 00:05:02.700
So let me read the fine and you can see here under had once use cases under Lambda Source.

00:05:02.700 --> 00:05:04.470
I have three to find one.

00:05:04.470 --> 00:05:06.250
It's a string data producer,

00:05:06.250 --> 00:05:09.480
Another one stream record consumer.

00:05:09.480 --> 00:05:12.060
So this is the consumer that we're going to create?

00:05:12.060 --> 00:05:12.220
No,

00:05:12.220 --> 00:05:13.420
the consumer laptop.

00:05:13.420 --> 00:05:16.650
Then later we'll go ahead and create the producer laughter as well.

00:05:16.650 --> 00:05:19.150
So let me just go ahead and create this.

00:05:19.150 --> 00:05:40.120
So now we have read the Lambda Function code into this variable.

00:05:40.120 --> 00:05:42.380
So let us go ahead and create a Lambda functions.

00:05:42.380 --> 00:05:53.200
I'm going to call this as stream consumer function and this is going to be Lambda up Onda.

00:05:53.200 --> 00:05:54.340
Since it is not prompting,

00:05:54.340 --> 00:05:56.730
I know that I have not imported the model,

00:05:56.730 --> 00:06:03.380
so I'm just going toe imported here on this model is already installed in my requirements

00:06:03.380 --> 00:06:03.650
find,

00:06:03.650 --> 00:06:05.350
So I'm not going to install it.

00:06:05.350 --> 00:06:07.690
So we have imported.

00:06:07.690 --> 00:06:09.950
So if I dark,

00:06:09.950 --> 00:06:15.850
we should have the function on followed by my function name.

00:06:15.850 --> 00:06:23.350
And this is going to be seen consumer function on the friendly descriptions.

00:06:23.350 --> 00:06:25.650
We know what this function is going to do.

00:06:25.650 --> 00:06:29.500
Process streaming data.

00:06:29.500 --> 00:06:33.450
Ellen's from keenness is on store.

00:06:33.450 --> 00:06:37.240
The runtime is going to be fightin.

00:06:37.240 --> 00:06:41.300
Finally,

00:06:41.300 --> 00:06:42.180
the handler,

00:06:42.180 --> 00:06:44.410
Andi in handler,

00:06:44.410 --> 00:06:50.640
Give it as index dot then the handler and in guest.

00:06:50.640 --> 00:06:52.770
And if you're wondering that this is coming from,

00:06:52.770 --> 00:06:55.350
if you goto your consumer function,

00:06:55.350 --> 00:06:57.200
the handler is here.

00:06:57.200 --> 00:06:58.390
This is what we're referencing.

00:06:58.390 --> 00:07:01.160
The fight will be stored in number,

00:07:01.160 --> 00:07:02.100
as in Texas.

00:07:02.100 --> 00:07:04.730
People I on under in Dexter the people,

00:07:04.730 --> 00:07:06.110
we will have the Lambda handler.

00:07:06.110 --> 00:07:07.620
So that is what we're calling here.

00:07:07.620 --> 00:07:11.840
They just go ahead and say where the court is coming from on the court is going to be in

00:07:11.840 --> 00:07:12.590
line function.

00:07:12.590 --> 00:07:16.950
So this is where the corner store.

00:07:16.950 --> 00:07:18.930
So I'm just going to copy this on.

00:07:18.930 --> 00:07:22.050
We're going to pass the S three bucket as an environment variable.

00:07:22.050 --> 00:07:24.250
Before that letter sent out a tie and moats.

00:07:24.250 --> 00:07:29.310
So we want to run this lambda function for about three seconds on if it is going to take

00:07:29.310 --> 00:07:30.280
more than three seconds,

00:07:30.280 --> 00:07:35.050
we want to time without so result concurrency so that we doesn't run off.

00:07:35.050 --> 00:07:35.600
Finally,

00:07:35.600 --> 00:07:42.710
the environment readable on the bucket name.

00:07:42.710 --> 00:07:44.520
We can pick it up very easily from care.

00:07:44.520 --> 00:07:50.370
I'm just going to say stream data store dot bucket name Here it seemed that this or that,

00:07:50.370 --> 00:07:55.110
but get name so that will be passed on to my variable s.

00:07:55.110 --> 00:07:57.030
But get them and the function can pick it up.

00:07:57.030 --> 00:08:03.390
So now my function is also created so The next step is giving my lambda permissions to

00:08:03.390 --> 00:08:06.360
access the same because we're going to read some data from the stream.

00:08:06.360 --> 00:08:07.510
Best way to do that.

00:08:07.510 --> 00:08:17.070
IHSAA go ahead on duh Pick up the stream name streamed it up by dot Grant on.

00:08:17.070 --> 00:08:17.830
In this case,

00:08:17.830 --> 00:08:21.120
we're going to give read access to our function.

00:08:21.120 --> 00:08:24.550
So we have granted permission on.

00:08:24.550 --> 00:08:28.680
Then there's another permission that is required for our lambda function.

00:08:28.680 --> 00:08:29.320
If you remember,

00:08:29.320 --> 00:08:32.200
our lamb guys need to write to Italy s three bucket.

00:08:32.200 --> 00:08:35.350
So we're going to add custom permissions for our Lambda.

00:08:35.350 --> 00:08:45.860
So I'm going to create a very customs permission here.

00:08:45.860 --> 00:08:50.350
I'm going to call and roll statement to than I am statement that I'm going to create.

00:08:50.350 --> 00:08:55.080
This is going to be Lambda are also just going to leave with us Role statement.

00:08:55.080 --> 00:08:56.550
That's a variable name anyway.

00:08:56.550 --> 00:08:58.700
So we need I am What?

00:08:58.700 --> 00:09:02.460
You So I'm going to concert it here on If you have not done it,

00:09:02.460 --> 00:09:04.350
go ahead and install it as well.

00:09:04.350 --> 00:09:13.380
So under I am me how something called as a policy statement and that is what we're going to

00:09:13.380 --> 00:09:23.450
do on first is effect on under ethic and going to say effect dot alot on for what kind of

00:09:23.450 --> 00:09:23.890
resource?

00:09:23.890 --> 00:09:25.070
So we haven't back it.

00:09:25.070 --> 00:09:27.660
So that is what we're going to give here on.

00:09:27.660 --> 00:09:29.040
We can help multiple resources.

00:09:29.040 --> 00:09:34.050
So this is going to be a party on before the bucket.

00:09:34.050 --> 00:09:37.060
I'm going to pick the stream data store on.

00:09:37.060 --> 00:09:40.420
We need to give the bucket air and so to speak up the bucket air.

00:09:40.420 --> 00:09:41.350
And from here.

00:09:41.350 --> 00:09:46.670
So we have done the resources part that what actions do you want to allow?

00:09:46.670 --> 00:09:51.900
So actions is also an added because it can have multiple actions on in this case,

00:09:51.900 --> 00:09:57.650
I'm going to say this is a smaller case s three put object.

00:09:57.650 --> 00:09:59.840
So that's it.

00:09:59.840 --> 00:10:01.720
So our role statement is done,

00:10:01.720 --> 00:10:04.460
I'm going to add and essayed the role statement,

00:10:04.460 --> 00:10:05.910
Usually having statement I d.

00:10:05.910 --> 00:10:10.250
So that we can easily effort toe what the statement is about whenever we're looking at the

00:10:10.250 --> 00:10:11.090
policy itself.

00:10:11.090 --> 00:10:12.650
So that is what the S A T does.

00:10:12.650 --> 00:10:18.410
So I'm going to say hello and that too right to Ste.

00:10:18.410 --> 00:10:24.180
And we're going toe past this statement to our Lambda function now.

00:10:24.180 --> 00:10:32.250
So stream function dark had to roll policy.

00:10:32.250 --> 00:10:36.500
Andi inside as you just probably provide the statement.

00:10:36.500 --> 00:10:37.680
That's it.

00:10:37.680 --> 00:10:42.890
So I always create my LA group also for my function so that it gets cleaned up.

00:10:42.890 --> 00:10:45.100
Whenever my stack gets the roll out,

00:10:45.100 --> 00:10:46.690
our gets the roll back.

00:10:46.690 --> 00:10:49.020
So I'm just going to create a law group again.

00:10:49.020 --> 00:10:53.650
This is going to be called a Stream Consumer group.

00:10:53.650 --> 00:11:01.650
Onda Long Memorial is missing sort of this Go ahead and the at our logs More deals as well

00:11:01.650 --> 00:11:01.650
.

00:11:01.650 --> 00:11:10.440
So under this we should have a law group on the letter sickle head and hired scope on then

00:11:10.440 --> 00:11:15.950
say this extreme consumer Onda la group name.

00:11:15.950 --> 00:11:18.530
Whenever you're dealing with Lambda functions,

00:11:18.530 --> 00:11:20.550
it is always the swimming your pattern.

00:11:20.550 --> 00:11:24.850
Aws slash lambda slash function name.

00:11:24.850 --> 00:11:29.250
I'm going to set the detention and removal also.

00:11:29.250 --> 00:11:40.500
So we have created a lambda function were given permissions to the Lambda function you

00:11:40.500 --> 00:11:41.970
created the law group on.

00:11:41.970 --> 00:11:45.180
We're going to attach a trigger that is my Penis is event.

00:11:45.180 --> 00:11:47.490
So So it's going to be my trigger on for this.

00:11:47.490 --> 00:11:50.100
We're going to use a new model called Lambda You.

00:11:50.100 --> 00:11:55.710
Enso's Andi I have not installed it are important into my requirements.

00:11:55.710 --> 00:11:58.220
While so that it's the first step I'm going to do.

00:11:58.220 --> 00:12:03.950
So let's go ahead and added AWS underscore syndicate toe interviews underscore Lambda

00:12:03.950 --> 00:12:06.560
underscore Stephen.

00:12:06.560 --> 00:12:08.890
Sources say this.

00:12:08.890 --> 00:12:16.540
I'm going to install it so this is installed so that this go ahead and close these two taps

00:12:16.540 --> 00:12:17.790
and get back toe,

00:12:17.790 --> 00:12:19.490
adding it into our code.

00:12:19.490 --> 00:12:22.950
So from AWS and the score CTK import.

00:12:22.950 --> 00:12:27.770
So we created our import.

00:12:27.770 --> 00:12:30.950
Let us go ahead on the Creator Lambda Trigger.

00:12:30.950 --> 00:12:35.300
So it's very easy to create the lumber trigger.

00:12:35.300 --> 00:12:37.950
So first is creating the even source.

00:12:37.950 --> 00:12:39.940
So Genesis is going to be my source.

00:12:39.940 --> 00:12:41.110
So I'm going to call this.

00:12:41.110 --> 00:12:43.250
Ask Ennis's Data pipe,

00:12:43.250 --> 00:12:45.480
he went source,

00:12:45.480 --> 00:12:46.720
and then we will attack this.

00:12:46.720 --> 00:12:47.170
Even so,

00:12:47.170 --> 00:12:48.650
store limited function later.

00:12:48.650 --> 00:12:54.460
So and even sources may have something called as witnesses even source on,

00:12:54.460 --> 00:12:55.980
we can configure the information like,

00:12:55.980 --> 00:12:57.530
What is the stream name going to be?

00:12:57.530 --> 00:12:59.550
My stream name is going to be stream,

00:12:59.550 --> 00:13:02.920
followed by my starting position,

00:13:02.920 --> 00:13:05.860
like from where the streaming has to begin from.

00:13:05.860 --> 00:13:08.110
So that is what we're giving her starting position.

00:13:08.110 --> 00:13:10.220
I'm going to say from the beginning.

00:13:10.220 --> 00:13:19.870
So Lambda Doubt starting position dot latest and finally what is going to be my backside?

00:13:19.870 --> 00:13:20.570
So one,

00:13:20.570 --> 00:13:22.910
I'm going to give every the court that is coming in.

00:13:22.910 --> 00:13:24.690
I'm going to trigger by Lambda function.

00:13:24.690 --> 00:13:25.820
That is what this means.

00:13:25.820 --> 00:13:29.970
So let us go ahead and attack this kinesis even source to the Lambda function.

00:13:29.970 --> 00:13:35.850
So stream consumer function dot had human sewers.

00:13:35.850 --> 00:13:38.970
I'm going to give this human source here.

00:13:38.970 --> 00:13:42.210
So this way it is very easy and know what we're doing here.

00:13:42.210 --> 00:13:48.170
So let me ask quickly summarize what we have done So far we have created and Genesis data

00:13:48.170 --> 00:13:48.760
stream.

00:13:48.760 --> 00:13:54.290
We have created an s three bucket we have created and Lambda function on connected our

00:13:54.290 --> 00:13:59.780
Lambda function toe The X three bucket on also created even stream toe krigger by Lambda

00:13:59.780 --> 00:14:02.050
function whenever a new record is coming in.

00:14:02.050 --> 00:14:07.250
So the final activity is going ahead and creating our producers Landau function.

00:14:07.250 --> 00:14:13.020
So this is the Lambda function that is going to produce some data on that is what we're

00:14:13.020 --> 00:14:14.450
going to create now.

00:14:14.450 --> 00:14:16.700
So just to make it very very care,

00:14:16.700 --> 00:14:20.030
I have just added some comments were going to create a data producer.

00:14:20.030 --> 00:14:21.490
Usually this is not required.

00:14:21.490 --> 00:14:25.390
Producer will be removed while the wives are somewhere application that is running.

00:14:25.390 --> 00:14:26.830
But in our demo,

00:14:26.830 --> 00:14:28.350
we're going to use a lambda function.

00:14:28.350 --> 00:14:31.260
So let me just go ahead and read this fight on.

00:14:31.260 --> 00:14:31.880
You can see here.

00:14:31.880 --> 00:14:34.080
There's a Guinness is a stream data producer.

00:14:34.080 --> 00:14:36.150
So that is the fight I'm going to read now.

00:14:36.150 --> 00:14:53.910
So we read our court,

00:14:53.910 --> 00:14:55.860
let us go ahead and create the Lambda functions.

00:14:55.860 --> 00:14:58.480
Since we have seen already how to create a Lambda function,

00:14:58.480 --> 00:15:02.330
I'm just going to quickly take through this one so that they will create this land that

00:15:02.330 --> 00:15:03.350
function really fast.

00:15:03.350 --> 00:15:29.300
So I finished typing it.

00:15:29.300 --> 00:15:33.690
There are two or three things that I want to call out one of the duration because our

00:15:33.690 --> 00:15:36.450
lambda function on Guinness extreme or two different services,

00:15:36.450 --> 00:15:38.710
it needs more time to push their data in tow.

00:15:38.710 --> 00:15:41.650
The genesis frames are given it 60 seconds.

00:15:41.650 --> 00:15:43.070
I do not take that much time,

00:15:43.070 --> 00:15:45.810
but I've just given it so that this happens.

00:15:45.810 --> 00:15:46.550
Andi.

00:15:46.550 --> 00:15:51.660
I'm more surprising my stream name into my function through an environment really well.

00:15:51.660 --> 00:15:53.850
So those are the two things that I want to call out.

00:15:53.850 --> 00:15:55.090
So now we have done that.

00:15:55.090 --> 00:15:59.220
Let's give our lambda function permissions to write to the cancer state of frames.

00:15:59.220 --> 00:16:06.850
Of that we can do with the easily by going ahead and saying despite thought Grant right,

00:16:06.850 --> 00:16:15.920
ongoing her and giving our function name here on once again for this lambda function.

00:16:15.920 --> 00:16:16.880
I need a law group.

00:16:16.880 --> 00:16:21.300
So what I'm going to do is I'm just going to quickly go ahead and see if I can just

00:16:21.300 --> 00:16:23.530
repurpose this entire code here.

00:16:23.530 --> 00:16:26.700
I'm just going to copy this here and then just mortify the necessary.

00:16:26.700 --> 00:16:28.140
But so,

00:16:28.140 --> 00:16:28.970
consumer,

00:16:28.970 --> 00:16:30.960
we're going to call this as producer.

00:16:30.960 --> 00:16:36.530
So that stuff,

00:16:36.530 --> 00:16:38.550
the big should be the same.

00:16:38.550 --> 00:16:42.120
So it discard data problems or function.

00:16:42.120 --> 00:16:43.530
So that is the editor.

00:16:43.530 --> 00:16:47.620
That was saying so Let me just go ahead and be consistent here as well.

00:16:47.620 --> 00:16:50.880
So we got our data pollution.

00:16:50.880 --> 00:16:51.350
Long group,

00:16:51.350 --> 00:16:53.260
that Aboriginal Law group on Ben,

00:16:53.260 --> 00:16:54.620
This should work now.

00:16:54.620 --> 00:16:55.760
That was a lot of typing.

00:16:55.760 --> 00:16:59.350
Let us go ahead and synthesizers stack and see if we have done it all correctly.

00:16:59.350 --> 00:17:02.270
So there's a new washing off City K.

00:17:02.270 --> 00:17:03.910
Let us go ahead and do that later.

00:17:03.910 --> 00:17:05.210
Let me just go head on,

00:17:05.210 --> 00:17:12.910
deploy my several s data stream processors stack now are stacked.

00:17:12.910 --> 00:17:13.950
Got completed.

00:17:13.950 --> 00:17:16.490
Let us go ahead and check out the resources in the console.

00:17:16.490 --> 00:17:20.980
So we are in Virginia region on we're in.

00:17:20.980 --> 00:17:23.120
Keenness is let us go to our data streams.

00:17:23.120 --> 00:17:24.760
We should see a data pipe here.

00:17:24.760 --> 00:17:27.730
You can see here there's in one shark on,

00:17:27.730 --> 00:17:29.640
but there is nothing much to check it.

00:17:29.640 --> 00:17:33.750
Once you start receiving more and more data than if you go to your monitoring section,

00:17:33.750 --> 00:17:36.050
you will see the different Jack's coming up.

00:17:36.050 --> 00:17:37.280
But the limits are really,

00:17:37.280 --> 00:17:38.740
really high When you're doing,

00:17:38.740 --> 00:17:43.290
we're not together reports it might not even show our might be at the very bottom level.

00:17:43.290 --> 00:17:46.180
So check it out when you are throwing some function.

00:17:46.180 --> 00:17:47.310
So let us go to our land.

00:17:47.310 --> 00:17:49.660
A function on that must be to functions.

00:17:49.660 --> 00:17:52.200
One is the producer and one is the consumer.

00:17:52.200 --> 00:17:54.820
So we will later use the producer.

00:17:54.820 --> 00:17:56.240
So throw some records in tow.

00:17:56.240 --> 00:18:02.530
Organist Extreme Onda We will see the consume where processing it in the cloudwatch logs

00:18:02.530 --> 00:18:06.550
And we will also see the results coming in our history bucket.

00:18:06.550 --> 00:18:07.790
So let me refresh my screen.

00:18:07.790 --> 00:18:11.760
That should be one more bucket which is our did Alec bucket.

00:18:11.760 --> 00:18:17.870
So you usually hear this is a several lesser the stream bucket on under this.

00:18:17.870 --> 00:18:19.550
That should not be any of the courts right now.

00:18:19.550 --> 00:18:21.680
So let us go ahead and test.

00:18:21.680 --> 00:18:22.810
Our solution is working.

00:18:22.810 --> 00:18:24.720
Let's goto our producer.

00:18:24.720 --> 00:18:28.680
I'm going to create and test event on since all the court is available.

00:18:28.680 --> 00:18:30.410
Just go ahead and have take a look.

00:18:30.410 --> 00:18:32.700
This is nothing fancy here.

00:18:32.700 --> 00:18:37.910
I'm just creating an ah Jason file off random names and age and location.

00:18:37.910 --> 00:18:39.370
If we just take you here,

00:18:39.370 --> 00:18:43.430
you can see here There's a random user name on them creating an age and I'm creating and

00:18:43.430 --> 00:18:44.000
location.

00:18:44.000 --> 00:18:45.850
So these three men tables will be stored,

00:18:45.850 --> 00:18:47.820
as in Jason file in our restaurant bucket.

00:18:47.820 --> 00:18:50.850
So let us go toe our test function.

00:18:50.850 --> 00:18:57.310
So we have ingested one record successfully on randomly.

00:18:57.310 --> 00:18:58.910
What happens is I'm adjusting.

00:18:58.910 --> 00:19:03.090
That's a small for look which is going toe are trigger multiple records.

00:19:03.090 --> 00:19:07.210
So somewhere along the line you have here for Luke,

00:19:07.210 --> 00:19:08.510
that is 123 records.

00:19:08.510 --> 00:19:13.670
And there's next time when I then this I might just want recorder to record depending upon

00:19:13.670 --> 00:19:13.890
it.

00:19:13.890 --> 00:19:19.380
So I'm just for good measure triggering a few times so that we will have ingested a few

00:19:19.380 --> 00:19:23.010
records on If I goto my s three bucket,

00:19:23.010 --> 00:19:26.050
that must be a few items that I was coming here.

00:19:26.050 --> 00:19:27.560
So if the item is not there,

00:19:27.560 --> 00:19:30.820
probably I have made a better in giving my lambda function.

00:19:30.820 --> 00:19:33.250
In the permissions are my lambda function itself.

00:19:33.250 --> 00:19:33.980
It's not working.

00:19:33.980 --> 00:19:38.650
Let me just going Go ahead and quickly troubleshoot it because we should know how to

00:19:38.650 --> 00:19:39.920
troubleshoot as well.

00:19:39.920 --> 00:19:47.830
So let me just go and check out my consumer goto my logging if I put the monitoring on,

00:19:47.830 --> 00:19:48.340
Duh.

00:19:48.340 --> 00:19:58.930
Going to clone watch logs you can see here it has received the records you can see on the

00:19:58.930 --> 00:20:01.730
record that it doesn't receive is still listed out here.

00:20:01.730 --> 00:20:07.610
But it is not able to write it because it is having a put object permission tonight.

00:20:07.610 --> 00:20:08.740
So let us go on quickly.

00:20:08.740 --> 00:20:10.160
Check our gold.

00:20:10.160 --> 00:20:15.820
I'm for writing in tow s three bucket.

00:20:15.820 --> 00:20:20.640
That is in the slash star formation you need to give so that it can go ahead and we write

00:20:20.640 --> 00:20:23.550
it so it should look like something like this.

00:20:23.550 --> 00:20:28.860
So let me just go ahead on and synthesizer stack on day.

00:20:28.860 --> 00:20:29.260
Uh,

00:20:29.260 --> 00:20:32.350
redeployed It should not take much time.

00:20:32.350 --> 00:20:34.660
Cynic Ellis,

00:20:34.660 --> 00:20:38.050
it's going to go ahead and deploy it.

00:20:38.050 --> 00:20:41.680
So stackers guard completed.

00:20:41.680 --> 00:20:44.780
That is to go ahead and try to in just a few more records.

00:20:44.780 --> 00:20:45.130
Now,

00:20:45.130 --> 00:20:46.600
this is on the consumer.

00:20:46.600 --> 00:20:53.630
Let me just go to my producer against our test function.

00:20:53.630 --> 00:20:54.260
Should be there.

00:20:54.260 --> 00:20:55.450
If Yeah,

00:20:55.450 --> 00:20:57.330
let me just go ahead.

00:20:57.330 --> 00:21:01.300
Ingested on November Lambda conscionable or so retried whenever there are letters.

00:21:01.300 --> 00:21:03.980
So once the Detroit is successful,

00:21:03.980 --> 00:21:05.440
we should be seeing some objects.

00:21:05.440 --> 00:21:07.900
So we have clicked on a few the court,

00:21:07.900 --> 00:21:09.350
so you can see here.

00:21:09.350 --> 00:21:10.720
All the records are coming in.

00:21:10.720 --> 00:21:14.450
So what I'm going to do is I'm just going to download one off them and we can check it out

00:21:14.450 --> 00:21:14.450
.

00:21:14.450 --> 00:21:19.950
Let me open this file in my editor.

00:21:19.950 --> 00:21:24.680
So I just imported the file into my lambda source.

00:21:24.680 --> 00:21:25.650
Just review it here.

00:21:25.650 --> 00:21:26.290
You can see here.

00:21:26.290 --> 00:21:28.710
This is the core that we have ingested.

00:21:28.710 --> 00:21:30.640
But this is the record that we ingested on.

00:21:30.640 --> 00:21:31.520
This is the record.

00:21:31.520 --> 00:21:37.900
It was processed by why consumer and stored in my pocket to summarize what we have done.

00:21:37.900 --> 00:21:42.720
We created and Vanessa String on We created and consumer for the Tennis a stream on.

00:21:42.720 --> 00:21:48.280
We also created and put producer We just set some records on We saw our permission was not

00:21:48.280 --> 00:21:50.140
that once we added the permissions,

00:21:50.140 --> 00:21:54.940
our consumer was able to write those records into our history data leg.

00:21:54.940 --> 00:21:56.760
Go ahead and try this.

00:21:56.760 --> 00:21:59.770
How fun with the different producers and consumers.

00:21:59.770 --> 00:22:01.270
So you can create a different type.

00:22:01.270 --> 00:22:04.450
Show off four stream processors in your own environment.

00:22:04.450 --> 00:22:06.260
Thanks for watching Happy learning.

