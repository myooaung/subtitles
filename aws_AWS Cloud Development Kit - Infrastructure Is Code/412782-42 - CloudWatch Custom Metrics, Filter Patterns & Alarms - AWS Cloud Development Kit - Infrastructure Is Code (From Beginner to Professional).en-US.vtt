WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.270
Hello,

00:00:00.270 --> 00:00:00.900
folks.

00:00:00.900 --> 00:00:03.070
Welcome to another lecture on Syria game.

00:00:03.070 --> 00:00:08.320
Now we're going to talk about creating custom mattresses for your applications,

00:00:08.320 --> 00:00:13.850
whether it is running and lambda or in 82 or Beach dog or any other computing platform.

00:00:13.850 --> 00:00:14.870
Quite often,

00:00:14.870 --> 00:00:18.630
when the deport matrices provided by AWS is not enough,

00:00:18.630 --> 00:00:20.810
you have to create your own metric.

00:00:20.810 --> 00:00:21.610
For example,

00:00:21.610 --> 00:00:26.160
let us take a boat and simple scenario where you haven't micro service running and lambda

00:00:26.160 --> 00:00:31.370
environment on this micro service must be doing some for operations on.

00:00:31.370 --> 00:00:31.900
For example,

00:00:31.900 --> 00:00:34.260
it might be calling another third party FBI,

00:00:34.260 --> 00:00:35.080
which is very,

00:00:35.080 --> 00:00:37.880
very brittle on that's Amore Lord on the A P.

00:00:37.880 --> 00:00:38.170
A.

00:00:38.170 --> 00:00:39.130
Might be breaking,

00:00:39.130 --> 00:00:42.140
but you're not sure when it is going to break.

00:00:42.140 --> 00:00:43.100
So in those cases,

00:00:43.100 --> 00:00:47.900
what you can do is you can create your own metric in your Lamba service on.

00:00:47.900 --> 00:00:50.470
Then you can find out when the service is breaking,

00:00:50.470 --> 00:00:52.040
and then you can raise a notification.

00:00:52.040 --> 00:00:53.790
The way we do that is,

00:00:53.790 --> 00:00:58.340
what we're going to do is we're going to create a log off all the calls that are made to an

00:00:58.340 --> 00:01:02.760
FBI on whenever there is an failure were going toe lock that information in tow.

00:01:02.760 --> 00:01:04.470
Large logs on.

00:01:04.470 --> 00:01:06.970
Once you have that information cloudwatch logs.

00:01:06.970 --> 00:01:11.640
What you can do is you can create a metric filter on based on that metric filter,

00:01:11.640 --> 00:01:12.540
you can also create,

00:01:12.540 --> 00:01:13.680
allow and send.

00:01:13.680 --> 00:01:18.430
It s in this notification also to your ops team so that they can take some action.

00:01:18.430 --> 00:01:20.960
So this is what we're going to do today.

00:01:20.960 --> 00:01:23.840
We're going to have a lambda function on that lambda function,

00:01:23.840 --> 00:01:27.420
will throw some information into the logs whenever then that what the a.

00:01:27.420 --> 00:01:27.760
P a.

00:01:27.760 --> 00:01:28.850
Is failing on.

00:01:28.850 --> 00:01:34.340
Then we would trigger on alarm based on that information that is there in the logs.

00:01:34.340 --> 00:01:38.010
So this is the Lambda function that is going to do the bulk off the work and you can see

00:01:38.010 --> 00:01:42.710
here at the beginning I have something called us and called third party a p a on a random.

00:01:42.710 --> 00:01:43.890
It is going to throw another.

00:01:43.890 --> 00:01:44.400
For example,

00:01:44.400 --> 00:01:45.120
in this case,

00:01:45.120 --> 00:01:45.580
in the court,

00:01:45.580 --> 00:01:50.660
75 means if you're going to call the land 100 100 times and 70% off,

00:01:50.660 --> 00:01:51.830
the temperature is going to fail.

00:01:51.830 --> 00:01:56.090
That is every feel the four times which is going to fail on whenever that is going to mean

00:01:56.090 --> 00:01:56.780
failure,

00:01:56.780 --> 00:01:59.420
we're going to write this information into the log.

00:01:59.420 --> 00:02:01.050
We're going to say that what the a p a.

00:02:01.050 --> 00:02:02.250
L equals true.

00:02:02.250 --> 00:02:06.400
If the A P is failing on if it isn arc,

00:02:06.400 --> 00:02:09.770
it is just going to say as false on whenever it is failing.

00:02:09.770 --> 00:02:13.830
It is also count how much time it has taken for executing the Lambda function and how much

00:02:13.830 --> 00:02:16.960
time is remaining for the function to process other activities.

00:02:16.960 --> 00:02:20.170
So these are the information that we're going to throw into the log on.

00:02:20.170 --> 00:02:25.890
We will pick it up in our metric whether Andi created alarm on top off that if I take you

00:02:25.890 --> 00:02:31.280
to the Amazon documentation for doing this kind of stuff that are very clearly documented

00:02:31.280 --> 00:02:31.980
information,

00:02:31.980 --> 00:02:32.530
for example,

00:02:32.530 --> 00:02:35.920
you can see here that are different types of metric critters that you can create.

00:02:35.920 --> 00:02:36.600
As an example,

00:02:36.600 --> 00:02:41.450
it is given counting lauded wins or accounting AC currency over term or extracting feels

00:02:41.450 --> 00:02:42.390
from your party.

00:02:42.390 --> 00:02:43.300
Log on.

00:02:43.300 --> 00:02:47.850
You also have something called us and filter and patterns in Tex.

00:02:47.850 --> 00:02:50.580
If you are injecting information in adjacent field,

00:02:50.580 --> 00:02:52.760
you can go ahead and pick it up very easily.

00:02:52.760 --> 00:02:53.360
For example,

00:02:53.360 --> 00:02:57.750
if the even type of update trail or particular I p addresses coming or there's another

00:02:57.750 --> 00:02:58.670
example very.

00:02:58.670 --> 00:03:01.770
It's deductible to picking up that agency information,

00:03:01.770 --> 00:03:03.140
as you can see here.

00:03:03.140 --> 00:03:07.960
So we're going to use the true and false value here to see what the AP is failing or not

00:03:07.960 --> 00:03:09.250
and how often it is failing.

00:03:09.250 --> 00:03:11.710
So let's go ahead and start building this in tow.

00:03:11.710 --> 00:03:13.650
Our CTK stack.

00:03:13.650 --> 00:03:17.620
I have already read the Lambda Functions.

00:03:17.620 --> 00:03:22.090
So the Lambda Function is also one that is named as custom metric Lumpkin richer.

00:03:22.090 --> 00:03:25.150
I am reading it on then I have already created a function.

00:03:25.150 --> 00:03:25.450
Also,

00:03:25.450 --> 00:03:26.700
since we have seen it many times,

00:03:26.700 --> 00:03:28.370
we're not going to write it today.

00:03:28.370 --> 00:03:29.410
If you are not done it,

00:03:29.410 --> 00:03:32.080
go ahead and take the previous ones on here.

00:03:32.080 --> 00:03:34.160
We are creating a lot groups so that to be no,

00:03:34.160 --> 00:03:38.900
which law group our information is in and based on that law group,

00:03:38.900 --> 00:03:41.890
what we're going to do is we're going to create the metric name space,

00:03:41.890 --> 00:03:43.980
the lock winter under Allah itself.

00:03:43.980 --> 00:03:46.430
So we were using the default imports,

00:03:46.430 --> 00:03:49.040
which is so Fork award to Lambda logs and core.

00:03:49.040 --> 00:03:51.090
If you're not important them or install them.

00:03:51.090 --> 00:03:55.410
Go ahead and do them in the requirements while and then continue from this point onwards.

00:03:55.410 --> 00:03:58.130
So let us start building the custom metric name space.

00:03:58.130 --> 00:04:00.950
I'm going to call my name Space as 1/3 party.

00:04:00.950 --> 00:04:02.950
My trick.

00:04:02.950 --> 00:04:05.410
You can go ahead and change the name if you want.

00:04:05.410 --> 00:04:08.940
We are when they use the cloudwatch more till here.

00:04:08.940 --> 00:04:12.010
Under told was morning we have something called us metric on.

00:04:12.010 --> 00:04:14.890
The first thing is sitting on our neighbor's space here.

00:04:14.890 --> 00:04:17.760
If you go to the metric section by default,

00:04:17.760 --> 00:04:21.570
AWS provides a lot off metric and all of them are under a particular name space.

00:04:21.570 --> 00:04:22.260
And in this case,

00:04:22.260 --> 00:04:26.910
I'm going to create my own name space so that I know that that information is going to be

00:04:26.910 --> 00:04:27.550
so.

00:04:27.550 --> 00:04:29.550
I'm going to use the same string here,

00:04:29.550 --> 00:04:32.750
just going to make it s hyphens.

00:04:32.750 --> 00:04:34.960
So we got our name space,

00:04:34.960 --> 00:04:35.270
then,

00:04:35.270 --> 00:04:36.650
is the metric name.

00:04:36.650 --> 00:04:44.550
What is the label going to be for my human descriptive format so that I know what this

00:04:44.550 --> 00:04:47.450
metric unnamed spaces going toe have under period?

00:04:47.450 --> 00:04:50.450
What about my statistic?

00:04:50.450 --> 00:04:55.780
I'm going to say some because I want to come to at all the address that is happening for

00:04:55.780 --> 00:04:56.830
the last one minute,

00:04:56.830 --> 00:04:58.640
so I'm just going to choose some here.

00:04:58.640 --> 00:05:00.690
So now we have created a custom name space,

00:05:00.690 --> 00:05:02.350
and we are also created a metric.

00:05:02.350 --> 00:05:03.480
This is the metric on top off,

00:05:03.480 --> 00:05:05.690
which we're going to create an alarm later.

00:05:05.690 --> 00:05:09.950
But let's go ahead and create a filter at the true and false values have picked up.

00:05:09.950 --> 00:05:15.010
So I'm going to use the same frame here and then got it as a filter.

00:05:15.010 --> 00:05:18.140
You can go ahead and say filter pattern,

00:05:18.140 --> 00:05:23.710
or however you would like to name that under largely have something going as metric filter

00:05:23.710 --> 00:05:24.880
on under metric.

00:05:24.880 --> 00:05:25.170
Further,

00:05:25.170 --> 00:05:27.720
we're going to scope it for this stack on,

00:05:27.720 --> 00:05:28.520
then create an I.

00:05:28.520 --> 00:05:29.010
D.

00:05:29.010 --> 00:05:31.490
Andi.

00:05:31.490 --> 00:05:36.310
Then for like the future button there are many fritter patterns are available.

00:05:36.310 --> 00:05:36.710
Now.

00:05:36.710 --> 00:05:41.480
We're going to use the bullion value because we're sending an information of true and false

00:05:41.480 --> 00:05:41.480
.

00:05:41.480 --> 00:05:43.380
You can have string pattern matching or so,

00:05:43.380 --> 00:05:48.330
but since we have sent it as already as true and force the what we can use the bullet

00:05:48.330 --> 00:05:50.810
filter pattern so under filter pattern.

00:05:50.810 --> 00:05:51.670
If I do a dart,

00:05:51.670 --> 00:05:55.550
you have on the different ways you can see here there's a bullion exist,

00:05:55.550 --> 00:05:56.350
literal.

00:05:56.350 --> 00:05:56.600
Oh,

00:05:56.600 --> 00:05:57.280
our stream.

00:05:57.280 --> 00:05:57.400
Well,

00:05:57.400 --> 00:05:58.440
you know what those things.

00:05:58.440 --> 00:06:05.980
So they just go ahead and choose the bullion on this index for this is also there in the

00:06:05.980 --> 00:06:07.210
previous documentation page.

00:06:07.210 --> 00:06:08.970
If you're not familiar with it to go here,

00:06:08.970 --> 00:06:10.370
give it a read.

00:06:10.370 --> 00:06:11.140
It is really,

00:06:11.140 --> 00:06:12.350
really helpful there.

00:06:12.350 --> 00:06:17.050
So this spring has to come from your lambda function that is there.

00:06:17.050 --> 00:06:17.940
If you go here,

00:06:17.940 --> 00:06:19.090
you have this drink.

00:06:19.090 --> 00:06:20.230
This is what we're upgrading.

00:06:20.230 --> 00:06:22.490
I'm just going to go ahead and copy that here.

00:06:22.490 --> 00:06:27.730
So we're not sure that we're using the exact string that is coming from the logs on this

00:06:27.730 --> 00:06:31.130
value is going to be true on.

00:06:31.130 --> 00:06:31.690
Then what?

00:06:31.690 --> 00:06:32.190
Lago?

00:06:32.190 --> 00:06:33.830
So we have created the law group here,

00:06:33.830 --> 00:06:35.250
so I'm just going to copy this.

00:06:35.250 --> 00:06:38.460
That put it here on what is a metric name?

00:06:38.460 --> 00:06:44.330
Space metric name space is going to come from care.

00:06:44.330 --> 00:06:48.190
So what I'm going to do is that that party error metric dot name space.

00:06:48.190 --> 00:06:51.880
That's what I'm going to do here on it are.

00:06:51.880 --> 00:06:56.530
So you need to provide information on what metric that you are creating this winter pattern

00:06:56.530 --> 00:06:59.050
on metric name,

00:06:59.050 --> 00:07:04.840
You have this metric name on what is going to be the default value.

00:07:04.840 --> 00:07:06.660
If that is a match for this winter,

00:07:06.660 --> 00:07:08.770
what is going to be a default value in this case,

00:07:08.770 --> 00:07:16.820
I'm going to say default values zero because we don't want an editor to be triggered when

00:07:16.820 --> 00:07:19.220
there is no match on whenever there is a match,

00:07:19.220 --> 00:07:21.600
we are going to say the value is going to be one.

00:07:21.600 --> 00:07:29.960
Okay,

00:07:29.960 --> 00:07:33.890
We have created our custom metric footer and then the final step off,

00:07:33.890 --> 00:07:34.850
creating an alarm.

00:07:34.850 --> 00:07:38.140
So let us go head on and created alarm as well.

00:07:38.140 --> 00:07:41.780
If this is scope it on,

00:07:41.780 --> 00:07:43.330
then create the name as well.

00:07:43.330 --> 00:07:48.680
So I'm just going to use the string here and officials were going to write the alarm

00:07:48.680 --> 00:07:49.870
description on then.

00:07:49.870 --> 00:07:50.200
Also,

00:07:50.200 --> 00:07:54.160
we're going to set up the comparison operators and the metric name and all those things,

00:07:54.160 --> 00:07:55.950
so just go ahead and run through them.

00:07:55.950 --> 00:08:02.300
So the alarm prescription is going to be something like So if there are more than two

00:08:02.300 --> 00:08:03.820
errors in the last two minutes,

00:08:03.820 --> 00:08:04.790
we wanted alarm.

00:08:04.790 --> 00:08:06.410
So that is what we have done there.

00:08:06.410 --> 00:08:09.690
And then a long name on,

00:08:09.690 --> 00:08:13.250
then metric with on which metric this is a metric that we created.

00:08:13.250 --> 00:08:18.430
So we're going to use this metric here on then competiton operator.

00:08:18.430 --> 00:08:26.930
So we're going to use and greater than or equal to comparison operator here Onda three

00:08:26.930 --> 00:08:27.550
short.

00:08:27.550 --> 00:08:31.030
We already said it has to errors in the last two minutes,

00:08:31.030 --> 00:08:35.230
so we're going to set their shoulders going to be too here on how long you want to be

00:08:35.230 --> 00:08:40.870
evaluated for evaluation periods is also going to be too on the data points that we want to

00:08:40.870 --> 00:08:41.530
alarm.

00:08:41.530 --> 00:08:45.250
That is going to be one on that period.

00:08:45.250 --> 00:08:47.610
Finally,

00:08:47.610 --> 00:08:50.780
what happens when you are not having any information?

00:08:50.780 --> 00:08:52.290
So the treat missing data,

00:08:52.290 --> 00:08:58.150
I always prefer to set it as not a breaching are reaching depending upon that scenario that

00:08:58.150 --> 00:08:58.860
you are using,

00:08:58.860 --> 00:09:03.830
but always make sure that you use this parameter to set the appropriate back.

00:09:03.830 --> 00:09:07.590
So we're all good so far.

00:09:07.590 --> 00:09:10.220
Let's go ahead and send to face our stack.

00:09:10.220 --> 00:09:12.020
So once we have deployed,

00:09:12.020 --> 00:09:15.520
what we'll do is we'll go to our code former variations control and take it,

00:09:15.520 --> 00:09:16.850
or whether everything is deployed.

00:09:16.850 --> 00:09:22.710
Then we'll go to Lambda function on then trigger or in walk the function few times as we

00:09:22.710 --> 00:09:23.580
saw earlier.

00:09:23.580 --> 00:09:24.380
If we went in,

00:09:24.380 --> 00:09:25.850
walked the lambda function four times,

00:09:25.850 --> 00:09:26.840
she just went to trigger.

00:09:26.840 --> 00:09:28.520
And I get a three times.

00:09:28.520 --> 00:09:29.720
It's a probe with a stick,

00:09:29.720 --> 00:09:30.880
a random function.

00:09:30.880 --> 00:09:34.680
So you might want to do it in three or four times so that you can have the alarm trigger.

00:09:34.680 --> 00:09:36.440
But the stock is deployed.

00:09:36.440 --> 00:09:40.220
You can see here already.

00:09:40.220 --> 00:09:42.790
My console has an insufficient,

00:09:42.790 --> 00:09:43.380
uh,

00:09:43.380 --> 00:09:43.920
alarm.

00:09:43.920 --> 00:09:44.470
Here.

00:09:44.470 --> 00:09:49.150
Let us wait for a couple of minutes so that it will go into a ok state.

00:09:49.150 --> 00:09:50.860
So we have a stack.

00:09:50.860 --> 00:09:51.960
Results complete.

00:09:51.960 --> 00:09:52.800
Okay.

00:09:52.800 --> 00:09:54.550
We goto our lambda function.

00:09:54.550 --> 00:09:57.550
Onda,

00:09:57.550 --> 00:10:01.750
let me open the law group also so that we can see the metric winter in action.

00:10:01.750 --> 00:10:04.220
So this is the London function.

00:10:04.220 --> 00:10:06.450
Before we go ahead and start testing it out.

00:10:06.450 --> 00:10:09.620
If I take you to my my trick photo,

00:10:09.620 --> 00:10:13.450
you can see here the llamas ordinary OK state that I know.

00:10:13.450 --> 00:10:14.550
Law groups,

00:10:14.550 --> 00:10:16.180
our locks.

00:10:16.180 --> 00:10:17.140
Seems not long groups.

00:10:17.140 --> 00:10:18.010
This is the law group.

00:10:18.010 --> 00:10:20.320
There is no luxuries because the lab that's not in work.

00:10:20.320 --> 00:10:24.980
But if I quote to my metric for tell you considers and one metric whether they're on for

00:10:24.980 --> 00:10:25.390
Jews,

00:10:25.390 --> 00:10:26.990
this one and click on edit.

00:10:26.990 --> 00:10:31.570
You can see here it is sitting for If that party error is true,

00:10:31.570 --> 00:10:33.360
then it is going to trigger on,

00:10:33.360 --> 00:10:33.850
uh,

00:10:33.850 --> 00:10:38.250
our value off one or zero depending upon the matching.

00:10:38.250 --> 00:10:49.160
So let's go ahead and trigger some errors or create some logs so it is tested.

00:10:49.160 --> 00:10:50.220
Let me show you.

00:10:50.220 --> 00:10:54.150
It appears you can see here that that what the a p l A is true.

00:10:54.150 --> 00:10:57.060
It has taken a boat close to about two seconds.

00:10:57.060 --> 00:11:00.610
So let me just go ahead and run it again on this time.

00:11:00.610 --> 00:11:01.750
It's also true.

00:11:01.750 --> 00:11:05.430
Okay,

00:11:05.430 --> 00:11:07.070
let us run a few more times.

00:11:07.070 --> 00:11:08.970
You can see here the Stamatis false.

00:11:08.970 --> 00:11:12.450
So it's a random function every three or four times.

00:11:12.450 --> 00:11:16.010
You just like us through and trying to be picks up a situation vary.

00:11:16.010 --> 00:11:18.910
It is throwing other our job throwing header.

00:11:18.910 --> 00:11:20.400
So I'm just for good measure.

00:11:20.400 --> 00:11:24.630
I'm just kicking a few more times so that my clothes what,

00:11:24.630 --> 00:11:26.640
you will pick up that information on,

00:11:26.640 --> 00:11:28.120
then start notifying me,

00:11:28.120 --> 00:11:30.140
saying that that is an error or heather.

00:11:30.140 --> 00:11:39.920
So it does go to Michael watch dashboard here on right now It isn't okay.

00:11:39.920 --> 00:11:40.580
State.

00:11:40.580 --> 00:11:42.260
So in a very short while,

00:11:42.260 --> 00:11:47.900
we will see and a spike here because we have seen more than three errors that it's

00:11:47.900 --> 00:11:52.650
happening errors as in the value for that information that is,

00:11:52.650 --> 00:11:56.660
that party error metric will spike toe four or five on.

00:11:56.660 --> 00:12:04.310
Then it would throw and other there So you can see here.

00:12:04.310 --> 00:12:12.000
My alarm is already more toe Alum State if I take you back to my law groups here since we

00:12:12.000 --> 00:12:16.510
have some log seem I can show you to you how it works manually also,

00:12:16.510 --> 00:12:18.090
if you want to go ahead and take it out.

00:12:18.090 --> 00:12:23.350
So here we have this lot information You can see it that whatever is true,

00:12:23.350 --> 00:12:25.760
Onda somewhere that would be enforced by the also.

00:12:25.760 --> 00:12:28.010
So let us go back here,

00:12:28.010 --> 00:12:31.520
go to metric filters on then choose this one.

00:12:31.520 --> 00:12:38.260
Click on edit on then make sure you are changing this one to the lock singla tips off our

00:12:38.260 --> 00:12:41.890
interest on Then make sure this is selected and then click on test better.

00:12:41.890 --> 00:12:42.220
Right now,

00:12:42.220 --> 00:12:43.530
there's no test missiles.

00:12:43.530 --> 00:12:45.330
If I go ahead and click on test pattern,

00:12:45.330 --> 00:12:50.170
you can see here it finds all the logs which are having the true when you you can see that

00:12:50.170 --> 00:12:52.470
are more than a two in the last two minutes itself,

00:12:52.470 --> 00:12:53.870
so it is going to throw an error.

00:12:53.870 --> 00:12:58.130
That is how you create custom metrics for your application,

00:12:58.130 --> 00:12:58.700
the better it is.

00:12:58.700 --> 00:13:04.090
Running and Lambda function are easy to on creating alarm for metrics off your interest or

00:13:04.090 --> 00:13:05.580
KPs off your interest,

00:13:05.580 --> 00:13:06.930
go ahead and try this.

00:13:06.930 --> 00:13:08.220
If you have any problems,

00:13:08.220 --> 00:13:12.160
put them in the comments or the Q and A section we all can learn from each other.

00:13:12.160 --> 00:13:14.250
Thanks for watching Happy Learning.

