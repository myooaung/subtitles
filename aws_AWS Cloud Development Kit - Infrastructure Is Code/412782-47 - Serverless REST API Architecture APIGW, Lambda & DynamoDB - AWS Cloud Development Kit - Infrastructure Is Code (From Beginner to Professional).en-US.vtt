WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.260
Hello,

00:00:00.260 --> 00:00:00.930
folks.

00:00:00.930 --> 00:00:05.330
Welcome to another lecture on CD game Architectural button that we are going to see today

00:00:05.330 --> 00:00:08.750
is and rest a pH architecture on when we're talking about rest a.

00:00:08.750 --> 00:00:09.400
P A.

00:00:09.400 --> 00:00:13.600
We have to start with a P a gateway because of the functionality it offers,

00:00:13.600 --> 00:00:16.810
whether it is authentication or access management.

00:00:16.810 --> 00:00:22.760
Using AP eighties or having different staging environments and production environments are

00:00:22.760 --> 00:00:27.740
having an even a private endpoint within your BBC so that your reappear is accessible.

00:00:27.740 --> 00:00:29.300
One Lee from your network.

00:00:29.300 --> 00:00:31.760
So that is on the friend and off your a b A.

00:00:31.760 --> 00:00:33.290
When it comes to business logic,

00:00:33.290 --> 00:00:36.970
Lambda perfectly suits this environment because it is several less.

00:00:36.970 --> 00:00:39.530
You can have a configuration of how long you want to run it,

00:00:39.530 --> 00:00:39.750
what,

00:00:39.750 --> 00:00:42.280
one time you want to run it on for the back end.

00:00:42.280 --> 00:00:44.510
That would be offered low latency,

00:00:44.510 --> 00:00:47.150
highly scalable key value store database.

00:00:47.150 --> 00:00:49.260
This is what we're going to build today.

00:00:49.260 --> 00:00:51.380
We're going to build an A p a gateway US,

00:00:51.380 --> 00:00:52.190
which will access,

00:00:52.190 --> 00:00:56.530
or friend and on which will be connected toe our lambda processor,

00:00:56.530 --> 00:01:01.380
which will be taking the request from or a P a gateway and storing that information into a

00:01:01.380 --> 00:01:02.450
dynamo devi.

00:01:02.450 --> 00:01:02.940
Let us say,

00:01:02.940 --> 00:01:03.450
for example,

00:01:03.450 --> 00:01:08.300
that it's a user and they're adding some likes to one particular port or and force that you

00:01:08.300 --> 00:01:08.990
have made.

00:01:08.990 --> 00:01:11.490
Then you can store let information on dynamodb.

00:01:11.490 --> 00:01:13.540
So this is architecture we're going to pull.

00:01:13.540 --> 00:01:17.100
Let us go toe acidic a stack and see what resources are required.

00:01:17.100 --> 00:01:18.720
How we need to build this.

00:01:18.720 --> 00:01:23.050
This is the fact that we're going to use for our configurations.

00:01:23.050 --> 00:01:26.690
I have named it as a silver less rest ap Architecture Stack.

00:01:26.690 --> 00:01:31.910
Right now there are no resources pre baked and we are going to do it from the scratch on

00:01:31.910 --> 00:01:32.300
Duh.

00:01:32.300 --> 00:01:33.020
Remember,

00:01:33.020 --> 00:01:36.940
all the models that are required are already installing my environment of the requirements

00:01:36.940 --> 00:01:37.290
while.

00:01:37.290 --> 00:01:42.200
But I'm just going to add them one by one in the stop and then you're going to add them.

00:01:42.200 --> 00:01:43.190
So if you remember,

00:01:43.190 --> 00:01:45.100
we need a dynamodb table on.

00:01:45.100 --> 00:01:46.310
Then we need a lambda from sin,

00:01:46.310 --> 00:01:47.580
which does the business logic.

00:01:47.580 --> 00:01:52.640
We also need to friend and those are the three resources that we are going to pull now.

00:01:52.640 --> 00:01:54.560
So since we're starting with dynamodb,

00:01:54.560 --> 00:02:03.300
let us go ahead and import it now we have imported our dynamodb.

00:02:03.300 --> 00:02:08.730
Let's go ahead and created on Since it is going to be the back end for my a p I I'm going

00:02:08.730 --> 00:02:10.770
to call this as a P a db on.

00:02:10.770 --> 00:02:13.920
Then let us import the model under this.

00:02:13.920 --> 00:02:15.460
Let us have a scope.

00:02:15.460 --> 00:02:16.450
I'm name it.

00:02:16.450 --> 00:02:19.750
So we have named it on.

00:02:19.750 --> 00:02:21.440
I'm going to create a partition key.

00:02:21.440 --> 00:02:22.150
As always,

00:02:22.150 --> 00:02:24.710
I'm just going to have a very simple animal Devi partition,

00:02:24.710 --> 00:02:26.470
which is going to have one primary key.

00:02:26.470 --> 00:02:36.050
I'm going to call that Primerica as I d on this idea is going to be off type string.

00:02:36.050 --> 00:02:39.780
So that is it on a special.

00:02:39.780 --> 00:02:44.080
I'm going to add the removal policy because I want to clean up my environment when my stack

00:02:44.080 --> 00:02:44.780
is deleted.

00:02:44.780 --> 00:02:49.170
We got our animal David Abel created.

00:02:49.170 --> 00:02:51.900
Let us go head on and read our lam ra function.

00:02:51.900 --> 00:02:54.290
So this is the lambda function that you can see here.

00:02:54.290 --> 00:02:55.340
That is a recipe back.

00:02:55.340 --> 00:02:57.060
And that is what I'm going to read on.

00:02:57.060 --> 00:03:01.150
Then create my lambda function so that this go ahead and read it first.

00:03:01.150 --> 00:03:18.480
Now we have read the Lambda Code.

00:03:18.480 --> 00:03:22.660
They just go ahead and create a lambda function which is going to perform or business logic

00:03:22.660 --> 00:03:22.660
.

00:03:22.660 --> 00:03:32.170
So I'm going to call this as back and function under this we should have on Lambda Model.

00:03:32.170 --> 00:03:35.520
If it is not prompting we might have made a mistake.

00:03:35.520 --> 00:03:37.970
Here are we have not imported at all.

00:03:37.970 --> 00:03:39.330
So you can see here.

00:03:39.330 --> 00:03:42.050
I have not imported so little school on do that.

00:03:42.050 --> 00:03:47.660
So under this we have function.

00:03:47.660 --> 00:03:48.470
Andi,

00:03:48.470 --> 00:03:51.080
let us go ahead and scope it on,

00:03:51.080 --> 00:04:01.300
followed by my i d on then my function name on a description for my function.

00:04:01.300 --> 00:04:07.590
So let me just move it to the top little bit.

00:04:07.590 --> 00:04:09.300
So we know what we're typing here.

00:04:09.300 --> 00:04:10.950
So run time.

00:04:10.950 --> 00:04:15.680
So we got our runtime.

00:04:15.680 --> 00:04:19.850
The next is the handler on Gladys.

00:04:19.850 --> 00:04:21.330
My court is coming from,

00:04:21.330 --> 00:04:23.620
so this court is going to be in Lincolnwood.

00:04:23.620 --> 00:04:27.820
Onda score is stored in this variable someone.

00:04:27.820 --> 00:04:29.850
I'm going to copy this and put it here.

00:04:29.850 --> 00:04:37.540
So finally we're going to add our time out for our function on I'm going to say run it for

00:04:37.540 --> 00:04:43.310
three seconds on going to set yourself concurrency also so that we don't have any runoff.

00:04:43.310 --> 00:04:48.360
Lamb dies on we need our animal Devi information inside of Lambda function.

00:04:48.360 --> 00:04:50.720
So I'm going to add it into the environment.

00:04:50.720 --> 00:04:51.260
Variable.

00:04:51.260 --> 00:04:53.250
So,

00:04:53.250 --> 00:04:54.040
as always,

00:04:54.040 --> 00:04:57.450
I like toe have my log level as in four,

00:04:57.450 --> 00:05:04.230
followed by my dynamodb table name on.

00:05:04.230 --> 00:05:07.400
We can construct it from the dynamodb table.

00:05:07.400 --> 00:05:13.850
Here we have a pretty DP So we went to see a DVD dart table name.

00:05:13.850 --> 00:05:16.560
So that's it for my lambda function.

00:05:16.560 --> 00:05:18.520
So let me clean it up here.

00:05:18.520 --> 00:05:19.100
Finally,

00:05:19.100 --> 00:05:25.050
we're going to give our lamb function permissions to write to my dynamodb table.

00:05:25.050 --> 00:05:30.750
So a PDB dart grant read right toe my function here.

00:05:30.750 --> 00:05:33.600
So that's it,

00:05:33.600 --> 00:05:34.250
Andi,

00:05:34.250 --> 00:05:39.730
I also like to create a law group for my lambda functions so that it gets cleaned up when

00:05:39.730 --> 00:05:41.280
my environment gets cleaned up.

00:05:41.280 --> 00:05:46.140
So let us add our group as well on.

00:05:46.140 --> 00:05:46.580
Remember,

00:05:46.580 --> 00:05:47.970
we have not imported it.

00:05:47.970 --> 00:05:49.650
Let us go ahead and import it.

00:05:49.650 --> 00:05:57.550
We have a group for advice The scoping andan,

00:05:57.550 --> 00:05:58.150
the name.

00:05:58.150 --> 00:06:08.650
So take the function name here on then dark function name.

00:06:08.650 --> 00:06:15.810
Close this on going to set my removal policy Also Finally,

00:06:15.810 --> 00:06:23.840
my retention I'm going toe let us say remove it in the same day So that is on the law group

00:06:23.840 --> 00:06:24.220
side.

00:06:24.220 --> 00:06:24.770
Finally,

00:06:24.770 --> 00:06:26.510
we're going to build our A p a gateway,

00:06:26.510 --> 00:06:29.360
which is going to be my friend tending my application.

00:06:29.360 --> 00:06:32.740
So let us call this as my first ap s o a.

00:06:32.740 --> 00:06:35.760
P a 01 on under a be a gateway.

00:06:35.760 --> 00:06:37.650
We need to import it first.

00:06:37.650 --> 00:06:43.960
So we have imported it there at this.

00:06:43.960 --> 00:06:45.930
Go ahead and build our A B A.

00:06:45.930 --> 00:06:50.620
Get well here we have going to create and Lambert rest a pia.

00:06:50.620 --> 00:06:52.950
So let's go ahead and choose a Lambda rest api.

00:06:52.950 --> 00:06:59.600
I followed by my scope on an I D on what is going to be my recipe.

00:06:59.600 --> 00:07:00.180
A name.

00:07:00.180 --> 00:07:02.600
So I'm going to call this as a P.

00:07:02.600 --> 00:07:08.360
A front end on my handler is going to be my lambda function,

00:07:08.360 --> 00:07:09.550
which is the back and function.

00:07:09.550 --> 00:07:10.990
We can see it here,

00:07:10.990 --> 00:07:13.820
so I'm going to copy this on.

00:07:13.820 --> 00:07:17.100
We don't want to proxy it because we want to particularly use,

00:07:17.100 --> 00:07:18.020
um values.

00:07:18.020 --> 00:07:23.090
That means that we are going to do some processing and our a p a gateway by taking some

00:07:23.090 --> 00:07:25.180
valuables and passing it well,

00:07:25.180 --> 00:07:26.050
I'm the function,

00:07:26.050 --> 00:07:29.940
so I'm going to create something called as user name as and resource.

00:07:29.940 --> 00:07:34.500
So under this what we're going to create ISS and multiple resources.

00:07:34.500 --> 00:07:36.000
So this is my root level.

00:07:36.000 --> 00:07:42.600
So under things that just add on resource and so whenever and the user or somebody

00:07:42.600 --> 00:07:47.220
accessing my you are they can provide me and use the name which I can store it on under

00:07:47.220 --> 00:07:48.110
this user name.

00:07:48.110 --> 00:07:52.670
What I'm going to do is I'm going to add some likes are boarding as we can use it in our

00:07:52.670 --> 00:07:53.290
application.

00:07:53.290 --> 00:07:55.610
So these are all application conflagrations.

00:07:55.610 --> 00:07:59.340
I'm just adding some functionality that users can send in that water likes.

00:07:59.340 --> 00:08:01.830
So this is going to be under this resource.

00:08:01.830 --> 00:08:10.640
So her name dog add resource on Let us say I want to capture the lights off my users and

00:08:10.640 --> 00:08:11.180
finally,

00:08:11.180 --> 00:08:12.870
for add user likes.

00:08:12.870 --> 00:08:18.090
We're going to add a method whether what kind of metal we want to support for our a v a

00:08:18.090 --> 00:08:18.710
gateway.

00:08:18.710 --> 00:08:20.050
So in this case,

00:08:20.050 --> 00:08:22.500
it is going to be get mattered.

00:08:22.500 --> 00:08:30.050
So that is on the gateway side of things finally wanted.

00:08:30.050 --> 00:08:34.570
If you get what you are all so that we can access it easily in our brochure so we can go

00:08:34.570 --> 00:08:36.150
ahead and add it in tow.

00:08:36.150 --> 00:08:54.170
Our output section also That's it.

00:08:54.170 --> 00:08:56.910
I have created the output also a legacy.

00:08:56.910 --> 00:08:58.810
If everything has been typed or correctly,

00:08:58.810 --> 00:09:00.290
let us go ahead and synthesize it.

00:09:00.290 --> 00:09:01.470
And if there are any others,

00:09:01.470 --> 00:09:03.090
let us go ahead and fix them as well.

00:09:03.090 --> 00:09:06.100
So there is not any errors.

00:09:06.100 --> 00:09:06.350
It is.

00:09:06.350 --> 00:09:07.750
Go ahead and deploy it.

00:09:07.750 --> 00:09:11.590
So our staff has gotten completed.

00:09:11.590 --> 00:09:11.930
Lettuce,

00:09:11.930 --> 00:09:14.950
go ahead on and check it out in the console.

00:09:14.950 --> 00:09:18.280
So this is the talk formation care.

00:09:18.280 --> 00:09:19.750
Let me just refresh it.

00:09:19.750 --> 00:09:20.700
Searches complete.

00:09:20.700 --> 00:09:22.380
Let's go to our A p A gateway.

00:09:22.380 --> 00:09:24.550
First it is goto ap Ice.

00:09:24.550 --> 00:09:29.750
Let me refresh my screen so you will have an m p A front end.

00:09:29.750 --> 00:09:33.600
You can see here These are the resources that we created under user name.

00:09:33.600 --> 00:09:34.510
We have a light.

00:09:34.510 --> 00:09:40.750
So if I go to my like section on that you have a method request.

00:09:40.750 --> 00:09:42.790
So whenever you are making ah,

00:09:42.790 --> 00:09:47.500
you are request You need to pass on these two variables that its user name and the legs and

00:09:47.500 --> 00:09:52.410
that information will be taken to my Lambda function and Lambda function will process them

00:09:52.410 --> 00:09:54.080
by storing it into the animal DVD.

00:09:54.080 --> 00:09:56.520
So this is on the A p a gateway side of things.

00:09:56.520 --> 00:09:59.120
If I go back here on the integration request,

00:09:59.120 --> 00:10:01.950
you can see here that is in a lambda ap a get away.

00:10:01.950 --> 00:10:03.290
Integration.

00:10:03.290 --> 00:10:03.870
Onder,

00:10:03.870 --> 00:10:05.680
if I take you to my dynamodb,

00:10:05.680 --> 00:10:10.490
that should be a table here on that should not be any items listed for now.

00:10:10.490 --> 00:10:16.330
So what we will do now is we will goto our confirmation section,

00:10:16.330 --> 00:10:18.590
take our You are that has been published here.

00:10:18.590 --> 00:10:20.660
You can see here there is an usual name.

00:10:20.660 --> 00:10:25.440
Unlike from just going to copy this Ural on put it into my rotor.

00:10:25.440 --> 00:10:29.310
So what I'm going to do is I'm just going to change this user name into something like,

00:10:29.310 --> 00:10:32.540
uh and run on.

00:10:32.540 --> 00:10:37.210
Then I'm just going to say add legs as one you can see here,

00:10:37.210 --> 00:10:42.420
the other really clearly says that I don't have privileges are alteration to write it.

00:10:42.420 --> 00:10:46.690
That means that somewhere along the line I have not given my lambda function permissions to

00:10:46.690 --> 00:10:48.360
write to my dynamodb.

00:10:48.360 --> 00:10:49.660
So the it is very clear.

00:10:49.660 --> 00:10:50.980
Let us go ahead and check the court.

00:10:50.980 --> 00:10:55.360
If we have made any mistake there on you can see here.

00:10:55.360 --> 00:10:59.240
I have given Grant Reid level it only not to read and write.

00:10:59.240 --> 00:11:05.980
So let me just go ahead and fix it so it is as easy as going Arent in Grant read,

00:11:05.980 --> 00:11:06.720
Write it up.

00:11:06.720 --> 00:11:13.140
Just going to say this file on synthesize on deploy also because that is the only change I

00:11:13.140 --> 00:11:13.440
made.

00:11:13.440 --> 00:11:18.070
And it should be able to quickly synthesize correctly on deployed as well.

00:11:18.070 --> 00:11:23.940
So I'm just going to give it a minute for the deployment for the new permissions to take

00:11:23.940 --> 00:11:24.750
into effect.

00:11:24.750 --> 00:11:26.790
So my stackers got deployed.

00:11:26.790 --> 00:11:30.800
So what I'm gonna do is I'm just going to refresh the same page to see if I get a

00:11:30.800 --> 00:11:32.350
successful message.

00:11:32.350 --> 00:11:36.860
So you can see here It has successfully updated l Ron with one like,

00:11:36.860 --> 00:11:38.880
let's go to our dynamodb.

00:11:38.880 --> 00:11:41.030
So let me refresh my screen here.

00:11:41.030 --> 00:11:43.340
I should see here the Enron and one.

00:11:43.340 --> 00:11:45.060
Let this go ahead and change something.

00:11:45.060 --> 00:11:45.770
Also here,

00:11:45.770 --> 00:11:47.750
let me just go ahead and say,

00:11:47.750 --> 00:11:49.070
Doctor,

00:11:49.070 --> 00:11:54.510
who on then here we are going to say do here on.

00:11:54.510 --> 00:11:58.100
We should be able to see the same information in our dynamodb.

00:11:58.100 --> 00:11:58.360
Also,

00:11:58.360 --> 00:12:00.870
you can see your doctor who are like wise,

00:12:00.870 --> 00:12:04.090
you have the value also updated to summarize.

00:12:04.090 --> 00:12:07.250
What we have done is we have created an A p a gateway,

00:12:07.250 --> 00:12:09.860
which is pointing to and lambda function on.

00:12:09.860 --> 00:12:11.680
Then the Lambda processes it on.

00:12:11.680 --> 00:12:13.580
If it has the correct information,

00:12:13.580 --> 00:12:17.290
then it will insert that information into our process and stories.

00:12:17.290 --> 00:12:19.210
In this case at Dynamodb.

00:12:19.210 --> 00:12:24.450
Go ahead and create your first best Abia in AWS on Have fun with it.

