WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.710
Hey there.

00:00:00.710 --> 00:00:02.700
Welcome to another lecture on City Que.

00:00:02.700 --> 00:00:05.350
This time we're going to talk about floorboards,

00:00:05.350 --> 00:00:06.950
dashboards and widgets.

00:00:06.950 --> 00:00:07.850
When you're running,

00:00:07.850 --> 00:00:09.800
point of a lot of resources in the cloud,

00:00:09.800 --> 00:00:11.890
especially in Lambda functions,

00:00:11.890 --> 00:00:14.590
are running micro services or easy to incenses.

00:00:14.590 --> 00:00:18.990
Then you want to collect all those mattresses in a single plane off class so that you can

00:00:18.990 --> 00:00:23.250
go there and see what is happening in your ecosystem on make some actions.

00:00:23.250 --> 00:00:25.360
It might be for business action.

00:00:25.360 --> 00:00:25.950
For example,

00:00:25.950 --> 00:00:26.750
how many orders,

00:00:26.750 --> 00:00:27.100
of course,

00:00:27.100 --> 00:00:27.360
Astin,

00:00:27.360 --> 00:00:31.930
your system or some others that are happening in your lambda functions and you want your

00:00:31.930 --> 00:00:33.950
team to look at it is easy.

00:00:33.950 --> 00:00:38.240
If you have a dashboard which is constantly updating from your love information or the

00:00:38.240 --> 00:00:41.060
metrics that you're pushing into the dashboards,

00:00:41.060 --> 00:00:45.350
we are going to create a demo which is going to look something similar like this.

00:00:45.350 --> 00:00:47.850
So if you're not familiar club,

00:00:47.850 --> 00:00:50.150
which also has a light and dark more,

00:00:50.150 --> 00:00:51.870
and then you can enable the dark more,

00:00:51.870 --> 00:00:56.890
you'll also be able to have that for which it looks very cool and nice like this.

00:00:56.890 --> 00:00:59.420
So for this we need some mattresses on.

00:00:59.420 --> 00:01:04.200
We are going to use the micro service function on this Lambda is going to call it out by

00:01:04.200 --> 00:01:10.130
the FBI on then we're going to push some logs and use a metric footers on creates a alarms

00:01:10.130 --> 00:01:14.990
and notifications which will be put up in the dashboard so that you can go ahead and

00:01:14.990 --> 00:01:19.960
clearly see what is going wrong with Lambda Function or third party a p a or what is the

00:01:19.960 --> 00:01:20.980
calls that happening?

00:01:20.980 --> 00:01:22.850
So that is what we're going to see today.

00:01:22.850 --> 00:01:24.670
So let's go to our city,

00:01:24.670 --> 00:01:27.520
gets stack and see how we can build all this functionality.

00:01:27.520 --> 00:01:30.810
This is the stack that we're going to use for our line dashboards.

00:01:30.810 --> 00:01:35.030
I have named as custom cloudwatch like passports stack on.

00:01:35.030 --> 00:01:39.390
There are some resources which are pre built in which we're going to leverage later.

00:01:39.390 --> 00:01:44.150
So let me walk through the all the resources We're not going to import anything new.

00:01:44.150 --> 00:01:49.490
We have already having the club watch More new were also having the Lambda module on.

00:01:49.490 --> 00:01:52.210
Then the logs Morning on default city core.

00:01:52.210 --> 00:01:52.500
Morning.

00:01:52.500 --> 00:01:57.790
So it is going see the resources and here we have the Lambda functions I'm reading the file

00:01:57.790 --> 00:02:00.750
on then We're creating the Lambda function itself here,

00:02:00.750 --> 00:02:05.510
and we eliminate as Const own custom metric function on.

00:02:05.510 --> 00:02:08.670
What you're doing here is we're going to create a law group.

00:02:08.670 --> 00:02:12.600
I'm based on that law group we're creating in the custom metrics winter on.

00:02:12.600 --> 00:02:17.280
If you have not seen the previous demonstration on how to create a custom metrics winter,

00:02:17.280 --> 00:02:19.580
I highly recommend you to go ahead and book that,

00:02:19.580 --> 00:02:24.340
because we're going to build on top off that just to run through what the demonstration

00:02:24.340 --> 00:02:27.610
does is we are creating and function,

00:02:27.610 --> 00:02:29.210
which is going to call it out by the AP.

00:02:29.210 --> 00:02:31.520
And whenever that AP is failing,

00:02:31.520 --> 00:02:35.640
we are ingesting and particular string into our log on.

00:02:35.640 --> 00:02:37.250
We're creating a metric filter,

00:02:37.250 --> 00:02:37.900
for example,

00:02:37.900 --> 00:02:41.880
that fighting a p a ever because true means we're going to say yes,

00:02:41.880 --> 00:02:44.700
that is a problem and then create a metric by Leo one.

00:02:44.700 --> 00:02:46.100
So whenever there is an error,

00:02:46.100 --> 00:02:50.900
we'll add value to the metric on that metric can be put in our dashboard.

00:02:50.900 --> 00:02:56.700
So we're also creating an alarm whenever that metrical says that more than two errors in

00:02:56.700 --> 00:03:01.230
the last two minutes on if even that a situation happens at least once.

00:03:01.230 --> 00:03:04.780
Then go ahead and trigger an alarm and then keep on evaluating.

00:03:04.780 --> 00:03:09.290
So the last five minutes of this happened only once people alarm and then go back to okay.

00:03:09.290 --> 00:03:09.770
Stayed.

00:03:09.770 --> 00:03:11.810
So this is the basic resources.

00:03:11.810 --> 00:03:14.350
Let us go ahead and start building a dashboard.

00:03:14.350 --> 00:03:23.020
So I'm going to call this as a constant dashboard on under cloudwatch we have a dashboard

00:03:23.020 --> 00:03:23.680
method.

00:03:23.680 --> 00:03:25.350
Andi,

00:03:25.350 --> 00:03:26.960
let this go here on scope.

00:03:26.960 --> 00:03:30.050
It You also said an I d.

00:03:30.050 --> 00:03:34.980
And let us have a name for our dashboard as well.

00:03:34.980 --> 00:03:39.820
So I'm going to call this as constant at like dashboard.

00:03:39.820 --> 00:03:42.770
So we are set with our dashboard.

00:03:42.770 --> 00:03:46.450
Let us go ahead and add some metrics to this dashboard now.

00:03:46.450 --> 00:03:49.000
So when we're talking about metrics that a different kind of metrics,

00:03:49.000 --> 00:03:49.860
for example,

00:03:49.860 --> 00:03:51.210
you have ah graph metric,

00:03:51.210 --> 00:03:53.710
which is a time city state up whenever That is an error,

00:03:53.710 --> 00:03:56.840
you can keep on showing the graph that will keep on changing.

00:03:56.840 --> 00:03:58.910
But the information changes all that is.

00:03:58.910 --> 00:04:01.670
And now single Valium in metric,

00:04:01.670 --> 00:04:02.290
for example,

00:04:02.290 --> 00:04:07.910
you want to keep a count off your visitors to your website to want to keep on implementing

00:04:07.910 --> 00:04:08.060
it,

00:04:08.060 --> 00:04:08.200
say,

00:04:08.200 --> 00:04:12.990
for example today that were 10 visitors tomorrow that was 20 visitors and admit a night

00:04:12.990 --> 00:04:16.050
that was like 25 misters keeps on incriminating.

00:04:16.050 --> 00:04:16.170
So,

00:04:16.170 --> 00:04:16.510
you know,

00:04:16.510 --> 00:04:17.600
home and it was just happens.

00:04:17.600 --> 00:04:18.610
Did you?

00:04:18.610 --> 00:04:19.650
Our website.

00:04:19.650 --> 00:04:21.150
I have a different ways.

00:04:21.150 --> 00:04:22.720
So for this case,

00:04:22.720 --> 00:04:25.190
first we're going to do a graph metric.

00:04:25.190 --> 00:04:30.050
Then we will go ahead and see how to add a single metric for the a p A errors.

00:04:30.050 --> 00:04:33.480
So starting with a graph metric.

00:04:33.480 --> 00:04:38.850
So this is the dashboard.

00:04:38.850 --> 00:04:41.510
So I'm going to add a budget on then.

00:04:41.510 --> 00:04:42.810
Under that four,

00:04:42.810 --> 00:04:44.140
we'll have a budget mattered.

00:04:44.140 --> 00:04:45.310
Under this,

00:04:45.310 --> 00:04:47.620
we're going to add a cloudwatch parole.

00:04:47.620 --> 00:04:53.130
What that means is on the entries that were making toe adhere will appear in a single roll

00:04:53.130 --> 00:04:55.190
in cloudwatch dashboard.

00:04:55.190 --> 00:04:58.690
So they added it rule,

00:04:58.690 --> 00:05:01.750
then next is adding our graph image it itself.

00:05:01.750 --> 00:05:04.900
So we have something called this graph widget on.

00:05:04.900 --> 00:05:07.250
Then let us have a title for or graph widget.

00:05:07.250 --> 00:05:11.970
So this number is going to be my back and for my application.

00:05:11.970 --> 00:05:14.550
So I'm going to sit back and in locations here,

00:05:14.550 --> 00:05:18.040
Onda,

00:05:18.040 --> 00:05:23.070
where the graph axis has to be left instead of right inside So my graph axis is going to be

00:05:23.070 --> 00:05:23.650
left here.

00:05:23.650 --> 00:05:28.140
If you want to go ahead and add it on the right and say also so which my trick?

00:05:28.140 --> 00:05:29.040
I want to choose.

00:05:29.040 --> 00:05:31.570
So I'm going to pick up the function name from here.

00:05:31.570 --> 00:05:37.150
This is called as constant custom metric function.

00:05:37.150 --> 00:05:42.130
Under this,

00:05:42.130 --> 00:05:45.450
you'll have something called as a metric in locations.

00:05:45.450 --> 00:05:52.350
So I'm going to use that method on under that we can give a statistic off.

00:05:52.350 --> 00:05:56.700
Just give me some off all the implications that has happened in the past.

00:05:56.700 --> 00:05:57.380
One minute.

00:05:57.380 --> 00:06:00.250
So Period is going to be one minute for me.

00:06:00.250 --> 00:06:05.580
So we have added a one draft midget.

00:06:05.580 --> 00:06:08.250
Let me just go ahead and add one more graph,

00:06:08.250 --> 00:06:09.040
which it here,

00:06:09.040 --> 00:06:17.410
under the same rule that this would go ahead and make sure that you're adding one more this

00:06:17.410 --> 00:06:17.680
time.

00:06:17.680 --> 00:06:28.600
I'm going to add the back and others just type thing with the Dayton on,

00:06:28.600 --> 00:06:33.840
then which side do you want the access to me on?

00:06:33.840 --> 00:06:34.950
Under that function,

00:06:34.950 --> 00:06:38.090
you also have something called as a metric errors on.

00:06:38.090 --> 00:06:39.620
We don't want all the functionaries.

00:06:39.620 --> 00:06:41.410
We just want dysfunctions letters,

00:06:41.410 --> 00:06:45.550
so they just do go ahead and shoot metric errors on likewise status.

00:06:45.550 --> 00:06:46.010
Take.

00:06:46.010 --> 00:06:55.450
It's going to be some on again Period is going to be one minute.

00:06:55.450 --> 00:07:00.950
So we have added addressing a graph widget here.

00:07:00.950 --> 00:07:07.290
What I'm going to do now is I'm going to show you how to add on a single value rigid to my

00:07:07.290 --> 00:07:09.320
dashboard now on the single value,

00:07:09.320 --> 00:07:15.030
which it will have a whole often this area is happening or how much error is happening in

00:07:15.030 --> 00:07:16.890
the last one minute or five minutes.

00:07:16.890 --> 00:07:18.750
So that this go ahead and add it here.

00:07:18.750 --> 00:07:27.250
So it is going to be on the same constant dashboard and I'm going to say advocate here and

00:07:27.250 --> 00:07:28.590
then we're creating another.

00:07:28.590 --> 00:07:28.940
Also,

00:07:28.940 --> 00:07:33.650
this is going to be below the club watcher Lambda Function graph metrics.

00:07:33.650 --> 00:07:35.980
So here,

00:07:35.980 --> 00:07:36.400
once again,

00:07:36.400 --> 00:07:38.190
clothes large start single,

00:07:38.190 --> 00:07:40.070
Bridget single value.

00:07:40.070 --> 00:07:48.110
So when I was looking for a title and for this we can use the metric that has been already

00:07:48.110 --> 00:07:49.960
created me somewhere about here.

00:07:49.960 --> 00:07:54.470
We created the metric here since on the corners there,

00:07:54.470 --> 00:07:59.650
if you want to go ahead and take a look on the Koran so you can go head on and take a look

00:07:59.650 --> 00:08:01.210
And if you think that you can do it better,

00:08:01.210 --> 00:08:02.890
you can go ahead and modify them at 17.

00:08:02.890 --> 00:08:03.940
Your port request as well.

00:08:03.940 --> 00:08:05.560
So that is it.

00:08:05.560 --> 00:08:09.520
We have created a dashboard we have added to graph widgets on.

00:08:09.520 --> 00:08:13.550
We have added a single while you legitimate school hadn't sent to save your stack.

00:08:13.550 --> 00:08:20.050
Deploy Now our stack is completely just goto or concert ticket out.

00:08:20.050 --> 00:08:24.110
So status completed.

00:08:24.110 --> 00:08:26.040
If I goto my club watch,

00:08:26.040 --> 00:08:28.410
I should be able to see an alarm,

00:08:28.410 --> 00:08:28.910
which is?

00:08:28.910 --> 00:08:29.380
Yep.

00:08:29.380 --> 00:08:29.970
You can see here.

00:08:29.970 --> 00:08:30.820
There wasn't Okay.

00:08:30.820 --> 00:08:34.470
State alarm there on defy goto my dashboards.

00:08:34.470 --> 00:08:36.060
We should have a national here.

00:08:36.060 --> 00:08:36.860
Const own app.

00:08:36.860 --> 00:08:38.960
A live dashboard on as off.

00:08:38.960 --> 00:08:39.210
No.

00:08:39.210 --> 00:08:41.060
You can see here that I have no values.

00:08:41.060 --> 00:08:43.630
The Lambda function is not in walked and there are no others.

00:08:43.630 --> 00:08:44.970
That is why you can see here.

00:08:44.970 --> 00:08:50.210
There is no value that So What I'm going to quickly do is I'm going to make sure the time,

00:08:50.210 --> 00:08:50.970
our opinion,

00:08:50.970 --> 00:08:54.510
if set for one minute by default on the dashboard itself,

00:08:54.510 --> 00:08:57.950
you cannot set it for individual it of metric.

00:08:57.950 --> 00:09:01.220
It's automatically juices or two if you want.

00:09:01.220 --> 00:09:04.010
Have all the footage to have the same period.

00:09:04.010 --> 00:09:04.730
Just then,

00:09:04.730 --> 00:09:06.210
you go ahead and change it.

00:09:06.210 --> 00:09:06.920
In this case,

00:09:06.920 --> 00:09:09.280
I'm going to have it for one minute for all the widgets.

00:09:09.280 --> 00:09:10.250
So I'm changing it.

00:09:10.250 --> 00:09:13.640
So let us go toe our lambda function on duh,

00:09:13.640 --> 00:09:17.370
create some invocations and errors and see how it works.

00:09:17.370 --> 00:09:25.370
So if you remember the dysfunction,

00:09:25.370 --> 00:09:28.580
what it is going to do is if we're going to call this function four times,

00:09:28.580 --> 00:09:29.530
it is going toe,

00:09:29.530 --> 00:09:31.160
throw an error or more three times.

00:09:31.160 --> 00:09:34.990
You can see it that whatever is true a couple of times on it is And,

00:09:34.990 --> 00:09:35.120
um,

00:09:35.120 --> 00:09:39.240
it is going to check when it is going to make an editor or when it is going to give a

00:09:39.240 --> 00:09:43.290
success message so you can do it a few times,

00:09:43.290 --> 00:09:43.390
too,

00:09:43.390 --> 00:09:48.480
so that you can see in the code that sport it is moving from location to another state on

00:09:48.480 --> 00:09:48.620
it.

00:09:48.620 --> 00:09:50.780
Also change the values off the air.

00:09:50.780 --> 00:09:52.390
Earth also in the rigid.

00:09:52.390 --> 00:09:57.130
So I'm just going to do it for a few more times for good measure.

00:09:57.130 --> 00:10:01.040
So let us go to our dashboard.

00:10:01.040 --> 00:10:02.460
You can see here already.

00:10:02.460 --> 00:10:04.740
The budget is updated for six.

00:10:04.740 --> 00:10:07.210
Andi if I refresh my screen,

00:10:07.210 --> 00:10:14.550
this will also start updating on this alarm will also go from okay state to an alarm state

00:10:14.550 --> 00:10:14.550
.

00:10:14.550 --> 00:10:17.960
You can see here the alarm was triggered on.

00:10:17.960 --> 00:10:18.730
In a short while,

00:10:18.730 --> 00:10:20.650
you will also see the Lamba invocations.

00:10:20.650 --> 00:10:24.610
Or so here you can see him.

00:10:24.610 --> 00:10:26.880
My invocations outcome.

00:10:26.880 --> 00:10:31.680
I have about seven invocations and right now that I have no others in my lambda function.

00:10:31.680 --> 00:10:34.890
So if I just go ahead and introduce and type or anything,

00:10:34.890 --> 00:10:37.220
my errors will also start populating.

00:10:37.220 --> 00:10:39.760
But that is not the intention of this demo.

00:10:39.760 --> 00:10:41.830
I'll show you hoping enable the dark more.

00:10:41.830 --> 00:10:43.850
If you go toe actions,

00:10:43.850 --> 00:10:44.700
you'll have something.

00:10:44.700 --> 00:10:47.490
Call us and enter full screen mode on.

00:10:47.490 --> 00:10:48.860
Once you enter the full screen more,

00:10:48.860 --> 00:10:52.220
you will have an option for for switching toe dark.

00:10:52.220 --> 00:10:57.520
More so in this case that you can see here you can have your colorful graph widgets and

00:10:57.520 --> 00:11:01.090
change the colors off your graph for lead metric,

00:11:01.090 --> 00:11:01.550
for example,

00:11:01.550 --> 00:11:03.280
you can create 100 photograph on,

00:11:03.280 --> 00:11:04.230
then for invocations.

00:11:04.230 --> 00:11:09.120
You can help into the caf have different contrasting colors so that you can clearly I

00:11:09.120 --> 00:11:13.870
didn't know what was happening in your application That is how you create live dashboards

00:11:13.870 --> 00:11:16.360
for the applications with which is from different services.

00:11:16.360 --> 00:11:21.000
Whether it's the custom metric of roll your lambda function are some default matrices that

00:11:21.000 --> 00:11:23.490
is emitted by the AWS service itself.

00:11:23.490 --> 00:11:24.890
Go ahead and try it out.

00:11:24.890 --> 00:11:26.070
If you have any problems,

00:11:26.070 --> 00:11:27.470
put them in the comments section.

00:11:27.470 --> 00:11:29.250
I'll be happy to help them with you.

00:11:29.250 --> 00:11:31.300
Thanks for watching Happy Learning.

