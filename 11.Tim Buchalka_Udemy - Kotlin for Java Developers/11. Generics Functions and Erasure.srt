1
00:00:05,450 --> 00:00:12,090
In cotland you can use type parameter constraints to limit what types can be used for a generic type.

2
00:00:12,140 --> 00:00:17,090
For example let's say we wanted to write a function that converts every number in the collection to

3
00:00:17,090 --> 00:00:19,650
an int and prints the result.

4
00:00:19,700 --> 00:00:23,190
So let's do our first crack at this function.

5
00:00:23,270 --> 00:00:27,650
We're going to use what's in this main function in a minute.

6
00:00:27,650 --> 00:00:33,580
So we'll say Fanti convert 2 in.

7
00:00:33,650 --> 00:00:35,750
And this is going to take a collection.

8
00:00:35,750 --> 00:00:40,360
So we'll say that it takes a collection and a list of T.

9
00:00:40,430 --> 00:00:50,380
We just saw this in the last video and then we'll say for Nahm in collection line and we'll open up

10
00:00:50,400 --> 00:00:52,490
expression here now.

11
00:00:52,570 --> 00:00:54,380
Got to end.

12
00:00:54,860 --> 00:01:00,620
And of course I need the double quotes.

13
00:01:01,140 --> 00:01:04,300
OK so you're going to see here that we're getting an error.

14
00:01:04,320 --> 00:01:05,980
Now why is it happening.

15
00:01:06,090 --> 00:01:12,320
Well because there is no guarantee that the collection we pass into this function contains numbers.

16
00:01:12,330 --> 00:01:15,260
I mean we're saying that we'll accept a list of any type.

17
00:01:15,330 --> 00:01:20,780
So we could pass this function a list of strings according to this function signature.

18
00:01:20,820 --> 00:01:24,420
We could pass it a list of employee or a list of cars.

19
00:01:24,420 --> 00:01:29,420
Now we don't want to have to write a convert to it for every type of numeric object.

20
00:01:29,460 --> 00:01:33,990
We don't want to have a version for float and double and shorten byte.

21
00:01:34,050 --> 00:01:35,400
So what do we do.

22
00:01:35,700 --> 00:01:42,540
Well in this case we can restrict the generic type to the number class because the number class is the

23
00:01:42,540 --> 00:01:50,340
parent class for all of the numeric types and also the number class declarers the two int function that's

24
00:01:50,340 --> 00:01:52,640
were the two int function lives.

25
00:01:52,650 --> 00:02:00,500
So if we say that we only want to accept a list of numbers then this will work.

26
00:02:00,660 --> 00:02:09,150
And that way the function will accept a list of number or it will accept a list of instances that are

27
00:02:09,150 --> 00:02:10,760
subclasses of number.

28
00:02:10,860 --> 00:02:14,900
Because if are subclasses of number we know that they're going to have the two function.

29
00:02:15,210 --> 00:02:21,120
So when we want to do that we specify the restriction as part of the type parameter declaration so we're

30
00:02:21,120 --> 00:02:21,930
going to come over here.

31
00:02:21,930 --> 00:02:28,860
We're going to say we only want to accept number here for this function and the moment we do that our

32
00:02:28,860 --> 00:02:30,510
error goes away.

33
00:02:30,510 --> 00:02:37,070
So now we're going to call this function with a list of ints and a list of shorts.

34
00:02:37,260 --> 00:02:43,950
So let's go ahead and use the collections will say convert to it and since I know we probably wouldn't

35
00:02:43,950 --> 00:02:45,540
want to do that in reality.

36
00:02:45,540 --> 00:02:52,650
Convert to in shorts and we'll see that we're not getting any errors here at all and if we run

37
00:02:56,490 --> 00:03:03,410
we'll get our ints printed out that have been converted even though they don't need to be and are shorts

38
00:03:03,420 --> 00:03:04,390
printed out.

39
00:03:04,410 --> 00:03:06,200
Let's do a list of float.

40
00:03:06,360 --> 00:03:07,890
Just to show that that will work.

41
00:03:07,890 --> 00:03:16,170
So floats and we'll have to say float here just as we have to say short up here if we hadn't said explicitly

42
00:03:16,170 --> 00:03:17,460
here that we wanted a short.

43
00:03:17,460 --> 00:03:21,630
We would have gotten a list of ints and if we don't say float here we're going to get going to get a

44
00:03:21,630 --> 00:03:31,400
list of doubles so and I'll just say one hundred point three and minus four five eight point forty three.

45
00:03:31,530 --> 00:03:33,650
And we got to put the F at the end here.

46
00:03:34,150 --> 00:03:34,700
OK.

47
00:03:34,710 --> 00:03:39,450
And then I'm going to change this to float because it really doesn't make sense for us to be calling

48
00:03:39,450 --> 00:03:47,360
a convert in function on a list of ints and let's run you will see that these have now been converted

49
00:03:47,360 --> 00:03:51,920
to integers so they no longer have the decimal places.

50
00:03:51,980 --> 00:03:56,180
So that's how you can restrict the time that you'll set for t.

51
00:03:56,180 --> 00:04:03,530
You just specify an upper bound right here as part of the type parameter declaration.

52
00:04:03,530 --> 00:04:07,730
So before when we had this what was the upper bound.

53
00:04:07,730 --> 00:04:13,580
Well in that case the upper bound was any question mark because any question mark is essentially at

54
00:04:13,580 --> 00:04:16,920
the top of the Katlin object hierarchy.

55
00:04:16,940 --> 00:04:21,450
So nullable any every class descends from nullable any.

56
00:04:21,620 --> 00:04:27,620
But of course now that we've changed that we're back at the situation where well you can pass strings

57
00:04:27,620 --> 00:04:31,660
you can pass employees you can pass anything so this no longer works.

58
00:04:31,820 --> 00:04:33,650
So we'll add number back in.

59
00:04:33,800 --> 00:04:45,920
And now if we have a list of strings foules strings equals a list of 1 to 3 if we try to call our convert

60
00:04:45,920 --> 00:04:46,970
to ints on this

61
00:04:50,060 --> 00:04:53,340
you'll see that we can't because it doesn't satisfy the upper bound.

62
00:04:53,630 --> 00:04:57,430
Now what if you want a function with more than one upper bound.

63
00:04:57,500 --> 00:04:59,690
In that case you use the where clause.

64
00:04:59,690 --> 00:05:06,080
So let's write a function that accepts items that are dependable and that implement char sequence so

65
00:05:06,080 --> 00:05:14,750
will say Fanti append animals except in Item one state.

66
00:05:14,780 --> 00:05:25,770
Item 2 this type T and now we want to restrict this to instances that are of type char sequence and

67
00:05:25,870 --> 00:05:27,110
dependable.

68
00:05:27,110 --> 00:05:33,650
So we'll say where t can be char sequence

69
00:05:38,310 --> 00:05:40,950
and it has to be spendable as well.

70
00:05:41,970 --> 00:05:46,130
And then we'll say print line result is.

71
00:05:46,200 --> 00:05:55,890
And I'll open up an expression here must say Item 1 dot append and item 2.

72
00:05:57,480 --> 00:06:04,680
So here we have two upper bounds char sequence in append of all we need char sequence because the dependable

73
00:06:04,680 --> 00:06:07,640
interface works with Char sequences.

74
00:06:07,770 --> 00:06:13,920
So let's call the function with a couple of string builders which Because string builder satisfies the

75
00:06:13,920 --> 00:06:14,930
two upper bounds.

76
00:06:14,940 --> 00:06:24,830
I'm going to comment out the convert to in call here and we'll say append string builder

77
00:06:27,690 --> 00:06:37,650
string one dot string builder string to run that

78
00:06:41,220 --> 00:06:46,890
and we'll see that our two string builder values have been appended together.

79
00:06:47,140 --> 00:06:54,040
Now you can have a bunch of interfaces in there when where clause because it's possible for a class

80
00:06:54,040 --> 00:06:55,620
to implement more than one interface.

81
00:06:55,630 --> 00:07:01,420
But obviously you can only have one class here because otherwise nothing will ever satisfy your where

82
00:07:01,420 --> 00:07:02,400
clause.

83
00:07:02,470 --> 00:07:10,150
So we can't do something like say where T is a short and t is an end to t is because there is nothing

84
00:07:10,150 --> 00:07:13,280
that say short and an end and a double etc..

85
00:07:13,570 --> 00:07:21,070
Ok so how does null lability play into all of this as we know Scotland is quite concerned with no liability.

86
00:07:21,190 --> 00:07:28,410
Now when we use t by itself without any upper bounds does t mean the non-global type only.

87
00:07:28,420 --> 00:07:35,560
Well as we saw it no it actually it's the opposite T except supposed nullable and non nullable types

88
00:07:35,560 --> 00:07:43,420
he can remember that I said just a second ago that when you don't specify an upper bound the upper bound

89
00:07:43,420 --> 00:07:44,110
is actually.

90
00:07:44,110 --> 00:07:45,390
Any question mark.

91
00:07:45,390 --> 00:07:46,990
It's nullable any.

92
00:07:47,050 --> 00:07:51,250
So that means that we should be able to pass nullable types to our functions.

93
00:07:51,400 --> 00:07:53,740
So let's try it out.

94
00:07:54,850 --> 00:08:02,660
Let's change our lists to nullable shorts and nullable floats.

95
00:08:02,740 --> 00:08:08,500
And now of course here we are going to have to change it to nullable question mark and then we'll also

96
00:08:08,500 --> 00:08:10,800
have to say here that that might be no.

97
00:08:10,900 --> 00:08:17,720
But if we go back to the print collection function that we had in the last video so.

98
00:08:17,770 --> 00:08:21,480
So we'll say fine t print collection.

99
00:08:21,490 --> 00:08:27,060
And we were accepting a collection of typed lists T.

100
00:08:28,030 --> 00:08:38,410
And then we had that loop that we were doing for item in collection print line item.

101
00:08:38,410 --> 00:08:42,430
Now we're not specifying an upper bound So this is accepting anything.

102
00:08:42,430 --> 00:08:44,470
Any question mark.

103
00:08:45,130 --> 00:08:51,860
And so now if we have a list of strings let's say or in fact any of our collections we can call this.

104
00:08:52,000 --> 00:08:56,680
So we'll say print collection shorts.

105
00:08:57,070 --> 00:08:57,920
That works.

106
00:08:58,030 --> 00:09:01,910
Print collection strings.

107
00:09:02,140 --> 00:09:03,510
And that works.

108
00:09:03,550 --> 00:09:11,740
Now this short list is now a nullable short list and shorts is non-negotiable strings because we haven't

109
00:09:11,740 --> 00:09:14,980
specified a type so the default is going to be non nullable.

110
00:09:15,220 --> 00:09:18,640
And both of those can call this function no problem.

111
00:09:18,820 --> 00:09:23,650
I'll just comment out to convert to calls and then we'll run

112
00:09:26,990 --> 00:09:34,140
and we'll see that the values of those two lists are printed so if we want to limit print collection

113
00:09:34,140 --> 00:09:37,760
to only non nullable types how would we do that.

114
00:09:37,800 --> 00:09:44,260
Well think about this for a minute if we wanted to restrict the types that we'll take.

115
00:09:44,280 --> 00:09:49,410
How do we do that while we do it the same way we're doing it down here except this time we'll say that

116
00:09:49,410 --> 00:09:51,840
we will take any.

117
00:09:51,840 --> 00:09:57,590
So in this case for saying we just want non-knowledge all types will take any non-bailable type.

118
00:09:57,780 --> 00:10:03,660
And now of course we're going to get an error up here because our shortlist is a nullable list.

119
00:10:03,860 --> 00:10:09,500
So if you want to restrict a function to accepting only no nullable type this is the way you can do

120
00:10:09,500 --> 00:10:10,120
it.

121
00:10:10,370 --> 00:10:16,580
OK so let's just take a moment to talk about what happens with generics under the covers in Katlin now

122
00:10:16,580 --> 00:10:19,790
in Javid generics are a compile time aid.

123
00:10:19,820 --> 00:10:25,580
They help the compiler to know what types are expected and therefore they help to catch errors and they

124
00:10:25,580 --> 00:10:28,940
also help because we don't have to do as much typing.

125
00:10:29,120 --> 00:10:34,080
But when a Java application runs it doesn't have any of the generic information.

126
00:10:34,250 --> 00:10:37,280
And that's called type eraser.

127
00:10:37,280 --> 00:10:40,260
So that information is erased.

128
00:10:40,310 --> 00:10:47,510
So at compile time we might declare an array list of big decimal but at runtime all the JVM will see

129
00:10:47,510 --> 00:10:49,070
is an array list.

130
00:10:49,070 --> 00:10:51,660
It doesn't see the generic type.

131
00:10:51,740 --> 00:10:59,930
So generics are basically syntactical element that help the compiler and US now because the generics

132
00:10:59,930 --> 00:11:03,890
don't make it through to the application that the JVM runs.

133
00:11:03,890 --> 00:11:06,650
You can't use them to do type checking.

134
00:11:06,980 --> 00:11:11,920
So let's switch back to our job of file for a minute so that you can see what I'm talking about here.

135
00:11:11,960 --> 00:11:17,790
And I just realized I did not create the java file in here so let me do that quickly.

136
00:11:17,810 --> 00:11:27,400
I created it in our last project so I'll create another package we'll call it Academie learn programming

137
00:11:27,440 --> 00:11:29,120
dot the Java code.

138
00:11:29,510 --> 00:11:33,890
And then in here we'll create a Java class that will just call.

139
00:11:34,190 --> 00:11:36,850
I guess generics I'll call it job in Erich's

140
00:11:39,370 --> 00:11:46,930
and I'll say public sabbatical boy name string args.

141
00:11:47,780 --> 00:11:58,190
OK so let's do the following I'll say boolean V equals list and I need a list first so list string and

142
00:11:58,190 --> 00:12:04,280
we'll call this strings equals new new array list

143
00:12:07,070 --> 00:12:09,400
and we'll say strings dot add.

144
00:12:09,410 --> 00:12:10,100
Hello.

145
00:12:10,100 --> 00:12:12,830
That's what we had last time.

146
00:12:12,830 --> 00:12:24,920
So now we'll say Boullion B equals Liszt's is in strings rather is an instance of list string and you're

147
00:12:24,920 --> 00:12:31,760
going to see that we're going to get an error and it says illegal generic type for instance of we can't

148
00:12:31,760 --> 00:12:32,220
do it.

149
00:12:32,240 --> 00:12:38,750
And the reason we can't do it is because the JVM doesn't understand generics so there's no way it can

150
00:12:38,750 --> 00:12:43,790
check at runtime whether strings is a list of string.

151
00:12:43,880 --> 00:12:47,290
The best it can do is to check that strings is a list.

152
00:12:47,360 --> 00:12:55,670
So if we knock that off now at all times now it will say Yeah OK I can I can figure that out but I can't

153
00:12:55,670 --> 00:12:57,680
figure this out.

154
00:12:58,790 --> 00:13:00,010
I just don't know.

155
00:13:00,080 --> 00:13:03,080
Generics are a compile time feature.

156
00:13:03,080 --> 00:13:08,120
So in Java the best we can do is to check whether an instance is a list as you just saw.

157
00:13:08,120 --> 00:13:11,920
So this here is the best we can do when it comes to type checking.

158
00:13:12,080 --> 00:13:17,990
Now let's go back to Catlin and you might be expecting me to say and Katlin it works differently but

159
00:13:17,990 --> 00:13:20,590
of course Katlin runs on the JVM.

160
00:13:20,600 --> 00:13:27,380
So in CANTLIN the generics are also a compile time feature generics don't make it into the compiled

161
00:13:27,380 --> 00:13:34,400
application so at runtime all the JVM knows is that if it has a collection then it has a collection.

162
00:13:34,400 --> 00:13:40,880
It can distinguish between the collection classes like it can tell if you have a in an array list versus

163
00:13:40,910 --> 00:13:48,950
a hash map etc. but it doesn't know that at compile time we said that this list should only contain

164
00:13:48,950 --> 00:13:49,500
strings.

165
00:13:49,520 --> 00:13:51,510
It has no way of knowing that.

166
00:13:51,560 --> 00:13:56,000
Now I said that in Codlin we have to use generics with collections.

167
00:13:56,000 --> 00:13:58,010
We can't leave them off.

168
00:13:58,040 --> 00:14:01,300
So how do we use the is operator with collections.

169
00:14:01,310 --> 00:14:03,100
Can we use it in cotland.

170
00:14:03,230 --> 00:14:07,220
Of course C is operator is the equivalent of instance of.

171
00:14:07,220 --> 00:14:10,890
So let's try out the is operator in Katlin.

172
00:14:11,030 --> 00:14:16,280
Let's try to track the type of the strings list and I'll comment this out.

173
00:14:16,280 --> 00:14:18,490
So we're not getting an error.

174
00:14:19,370 --> 00:14:30,560
So we'll say if the list is a list of string Shuli we call that strings if strings is lists of string.

175
00:14:30,560 --> 00:14:32,830
Then we'll print line.

176
00:14:32,840 --> 00:14:36,890
This list contains strings.

177
00:14:37,700 --> 00:14:38,470
And look at that.

178
00:14:38,480 --> 00:14:39,740
We don't get an error.

179
00:14:39,890 --> 00:14:40,880
And if we run

180
00:14:45,170 --> 00:14:46,090
we'll see.

181
00:14:46,100 --> 00:14:48,050
This list contains strings.

182
00:14:48,230 --> 00:14:55,070
So I'm guessing that in this case the compiler is doing the check at compile time and under the covers.

183
00:14:55,230 --> 00:15:02,030
This isn't even generated to the byte code because the compiler can see that it's always going to evaluate

184
00:15:02,030 --> 00:15:02,930
to true.

185
00:15:03,200 --> 00:15:07,070
So there's no need to actually do this check at runtime.

186
00:15:07,070 --> 00:15:10,580
This can be figured out at compile time and that's why we're not getting an error.

187
00:15:10,670 --> 00:15:15,560
I haven't looked at the bite code so I don't know this for sure but that's my guess.

188
00:15:15,560 --> 00:15:18,960
I'm guessing that the compiler is doing that type of optimization.

189
00:15:19,100 --> 00:15:22,860
So we need to try it with a variable that isn't of type list.

190
00:15:23,060 --> 00:15:29,170
Let's create another list and assign it to a variable of type any.

191
00:15:29,180 --> 00:15:35,600
So rather than saying well yeah strings we know it's a list of strings the compiler already inferred

192
00:15:35,630 --> 00:15:49,590
that that's try to trick it now and say Now list any of type any equals list of us TR wan as TR too.

193
00:15:49,640 --> 00:15:51,890
And now let's check the tape for this.

194
00:15:51,890 --> 00:16:01,940
So we'll say if list any is a list of string and right away boom we can no longer do it cannot check

195
00:16:01,940 --> 00:16:05,950
for instance of Eraste type list of straying.

196
00:16:06,230 --> 00:16:13,610
So up here the compiler will know at compile time that we have a list of string here.

197
00:16:13,610 --> 00:16:19,640
It can't guarantee anything so no optimisation can be made it would have to check this at runtime and

198
00:16:19,640 --> 00:16:21,830
it can't and that's why we're getting the error now.

199
00:16:21,850 --> 00:16:27,320
So just as in Java generic types are erased as far as the runtime goes.

200
00:16:27,350 --> 00:16:31,610
OK so let's try doing what we did and then we'll just knock off the generic type.

201
00:16:31,610 --> 00:16:33,870
Remember in Java this works.

202
00:16:33,920 --> 00:16:38,530
So the JVM can at least tell us if we have a list.

203
00:16:38,600 --> 00:16:39,820
Let's do that.

204
00:16:41,880 --> 00:16:46,540
And you'll see we get an error in saying that it wants to type argument because remembering Cartland

205
00:16:46,680 --> 00:16:49,080
you have to specify the generic type.

206
00:16:49,410 --> 00:16:51,040
It's inforced in cotland.

207
00:16:51,240 --> 00:16:52,590
So how are we going to do this.

208
00:16:52,590 --> 00:16:56,110
How can we even check if something is a list.

209
00:16:56,160 --> 00:17:03,730
Well the error message gives us the answer in this case it says use a list and the angle brackets star.

210
00:17:03,960 --> 00:17:08,310
If you don't want to pass type arguments and in this case we can't pass a type argument.

211
00:17:08,310 --> 00:17:16,280
In fact in this context using the Star or asterisks like this is called The Star projection syntax.

212
00:17:16,440 --> 00:17:18,470
It sort of acts like a wild card.

213
00:17:18,480 --> 00:17:28,010
So if we go star like that it works and then we can say print line.

214
00:17:28,260 --> 00:17:30,370
Yes this is a list.

215
00:17:30,390 --> 00:17:34,280
Thank you star projection.

216
00:17:34,470 --> 00:17:35,400
And if we run

217
00:17:38,990 --> 00:17:39,410
we'll see.

218
00:17:39,410 --> 00:17:40,450
Yes this is a list.

219
00:17:40,460 --> 00:17:42,680
Thank you star projection.

220
00:17:42,680 --> 00:17:49,400
So at runtime as I've been saying several times now the JVM is capable of looking at a variable and

221
00:17:49,400 --> 00:17:51,280
comparing it against last.

222
00:17:51,320 --> 00:18:00,290
However it cannot do this it can't do that because the best it can see at run time is list.

223
00:18:00,300 --> 00:18:06,420
So how does this affect the ads and the ads question mark operators because you can use generics with

224
00:18:06,420 --> 00:18:07,920
them to as follows.

225
00:18:07,920 --> 00:18:13,510
We could say well we just start production back in here so that we're not going to get compile time

226
00:18:13,510 --> 00:18:14,600
errors.

227
00:18:14,700 --> 00:18:19,840
We can say if list any is a list

228
00:18:23,430 --> 00:18:25,280
print line.

229
00:18:25,830 --> 00:18:30,500
This list contains strings.

230
00:18:30,510 --> 00:18:38,610
Val essed your list equals the list any as list as string.

231
00:18:39,210 --> 00:18:48,020
And then we'll say print line TR list one dot replace That's her place.

232
00:18:48,030 --> 00:18:52,620
S are wids string.

233
00:18:52,710 --> 00:18:59,850
So here what we're doing is we're saying we're checking whether list any contains a list and if it does

234
00:19:00,360 --> 00:19:07,340
we're using casting here to say then we want to use list any as a list of string.

235
00:19:07,650 --> 00:19:15,240
And then we want to go ahead and treat the first element the second element rather in SDR list as a

236
00:19:15,240 --> 00:19:16,150
string.

237
00:19:16,440 --> 00:19:19,800
So this is all fine and dandy Let's run

238
00:19:23,000 --> 00:19:31,100
and now down here we've replaced this is as TR too in the original list and we've replaced as TR strings

239
00:19:31,100 --> 00:19:38,120
so we're seeing string too because we're doing that for the second element and printing out the result

240
00:19:38,510 --> 00:19:40,310
so that all works great.

241
00:19:40,340 --> 00:19:48,970
But what would happen if we change list any to a list that is not a list of string.

242
00:19:49,100 --> 00:19:55,880
So let's see what will happen if we do that because remember we said that the JVM can't tell at runtime

243
00:19:55,970 --> 00:19:57,630
what type of list it has.

244
00:19:57,650 --> 00:20:01,300
All the best it can do is figure out that it has a list.

245
00:20:01,490 --> 00:20:05,780
And so what we're checking for here isn't that we have a list of string.

246
00:20:05,870 --> 00:20:08,130
We have a list of anything.

247
00:20:08,450 --> 00:20:13,160
And then we just happened to know that we have a list of strings so we're going ahead and saying OK

248
00:20:13,160 --> 00:20:18,400
fine we know we assigned a list string list in here so just go ahead and use it as a string.

249
00:20:18,400 --> 00:20:22,820
This is going to pass etc. But now let's reassign list any.

250
00:20:22,820 --> 00:20:28,280
And I think I declared as a vowel so I'm going to change it to a VAR and right here I'm going to say

251
00:20:28,290 --> 00:20:31,450
list any equals list of.

252
00:20:31,490 --> 00:20:33,810
And let's give it a list of ints.

253
00:20:34,010 --> 00:20:36,170
So let's run now.

254
00:20:38,420 --> 00:20:39,890
And there you go.

255
00:20:39,890 --> 00:20:42,800
We get a class cast's exception Javid not language.

256
00:20:42,800 --> 00:20:46,290
Integer cannot be cast to Javid out Lang string.

257
00:20:46,310 --> 00:20:49,740
Now the compiler tried to warn us about this.

258
00:20:49,790 --> 00:20:57,860
If I switch to messages here which is gives us the result of the compile so the compiler issued a message

259
00:20:57,890 --> 00:21:05,540
on it for line 25 we're doing the casting and it's saying it's an unchecked cast because we didn't actually

260
00:21:05,540 --> 00:21:07,720
verify it here that we have a list of string.

261
00:21:07,720 --> 00:21:09,770
We just verified that we have a list.

262
00:21:09,860 --> 00:21:12,560
And as we can see it can be of any type.

263
00:21:12,590 --> 00:21:19,640
So that's the compiler's way of saying I'm letting this cas through because maybe list any will contain

264
00:21:19,820 --> 00:21:22,130
a list of strings.

265
00:21:22,340 --> 00:21:28,310
So the compiler lets the CAS goes through but it warns us about it and says I'm going to let this go

266
00:21:28,310 --> 00:21:35,090
because it's possible at runtime that list any will contain a list of strings of course it doesn't.

267
00:21:35,090 --> 00:21:40,250
But it's going to let it go through but it warns us it says you're doing something you really shouldn't

268
00:21:40,250 --> 00:21:45,440
be doing and it's possible that you're going to get a class cast exception at runtime but you can cast

269
00:21:45,440 --> 00:21:46,450
this away.

270
00:21:46,610 --> 00:21:50,180
So at least you can check what type of collection you have.

271
00:21:50,180 --> 00:21:56,490
You can use as and the same thing goes with as question mark for nullable types.

272
00:21:56,540 --> 00:21:57,790
So you can cast.

273
00:21:57,830 --> 00:22:04,580
You can cast to a specific generic type but every time you do that depending on what's on the left hand

274
00:22:04,580 --> 00:22:10,430
side it's possible that you might be opening the door to a class cast exception and the compiler will

275
00:22:10,430 --> 00:22:11,990
actually warn you about that.

276
00:22:11,990 --> 00:22:16,100
So that's the best that the compiler can do in this situation.

277
00:22:16,250 --> 00:22:21,010
OK so that's all I wanted to discuss in this video in the next video.

278
00:22:21,020 --> 00:22:25,290
We're going to talk about something called reified parameters.

279
00:22:25,310 --> 00:22:26,190
I'll see you there.
