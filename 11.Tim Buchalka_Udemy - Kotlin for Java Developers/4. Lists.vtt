WEBVTT
1
00:00:05.510 --> 00:00:05.920
All right.

2
00:00:05.930 --> 00:00:11.990
So now we're going to start taking a look at collections now most of the time Katlin uses Jabez collection

3
00:00:11.990 --> 00:00:16.690
classes but you'll see that there sometimes it uses its own.

4
00:00:16.820 --> 00:00:22.400
But even when it's using Javaris collection classes you can do more with collections in Katlin.

5
00:00:22.400 --> 00:00:28.360
Now all of the Katlin collections classes can be found in the Cartland collections package.

6
00:00:28.430 --> 00:00:34.580
And since Katlin uses Java's collections under the covers most of the time the code you write will be

7
00:00:34.580 --> 00:00:37.130
completely interoperable with Java.

8
00:00:37.130 --> 00:00:44.540
Now as you've seen cotland has the notion of mutable and immutable collections you can operate on an

9
00:00:44.630 --> 00:00:45.950
immutable collection.

10
00:00:45.950 --> 00:00:53.050
You can add and remove items when you call some functions but the result will be a brand new instance.

11
00:00:53.060 --> 00:00:58.820
So when you're working with an immutable instance the instance itself is never changed.

12
00:00:58.820 --> 00:01:03.260
If you call a function it's going to change the collection in some way that function will return a new

13
00:01:03.260 --> 00:01:04.250
instance.

14
00:01:04.250 --> 00:01:09.560
Now all collections take a generic type and all the read only interfaces are covariant.

15
00:01:09.560 --> 00:01:15.140
This isn't going to mean anything to you right now but we're going to go over covariance when we cover

16
00:01:15.200 --> 00:01:16.360
generics.

17
00:01:16.370 --> 00:01:21.710
For now all you have to understand that because all the read only interfaces are covariant that means

18
00:01:21.710 --> 00:01:26.980
you can do something like assign a list of big decimal to a list of any.

19
00:01:27.050 --> 00:01:32.590
Because when something is covariant you can treat a class like one of its parent classes.

20
00:01:32.600 --> 00:01:39.760
So because big decimal is a subclass of any you can assign a list of big decimal to a list of any and

21
00:01:39.770 --> 00:01:43.630
as I said we're going to go over this in more detail when we cover generics.

22
00:01:43.730 --> 00:01:49.310
So now let's go to intelligence and we'll take a look at the collection interface and the collection

23
00:01:49.310 --> 00:01:53.920
interface is implemented by the list and the set collections.

24
00:01:54.130 --> 00:01:56.770
So I've already created the usual project etc..

25
00:01:56.780 --> 00:02:04.340
So what I'm going to do here is just type in collection and then I'll ask him to take me over to the

26
00:02:04.760 --> 00:02:06.690
declaration.

27
00:02:06.710 --> 00:02:13.980
So here is the declaration for collection will see that it implements iterable and it's using out.

28
00:02:14.000 --> 00:02:16.120
That's because it's covariant.

29
00:02:16.130 --> 00:02:21.360
And as I said we'll cover that when we cover generics and we'll see that in this collection.

30
00:02:21.390 --> 00:02:26.570
There's not much in here you can't actually change the collection.

31
00:02:26.570 --> 00:02:27.860
You can check if it's empty.

32
00:02:27.860 --> 00:02:32.300
You can see if it contains something you can iterate over it and that's about it.

33
00:02:32.300 --> 00:02:37.400
Now if you look at mutable collection will see that it extends collection and implements the mutable

34
00:02:37.520 --> 00:02:38.960
iterable interface.

35
00:02:38.960 --> 00:02:42.470
And you'll notice that it is not covariant meaning it doesn't have the.

36
00:02:42.490 --> 00:02:47.220
Out here and we'll cover this in more detail later on.

37
00:02:47.330 --> 00:02:54.500
But that means if you have a mutable collection of big decimal You can't assign that to a mutable collection

38
00:02:54.500 --> 00:02:55.250
of any.

39
00:02:55.550 --> 00:03:02.710
And also when we cover covariance you'll learn that when something is covariant you can't modify it

40
00:03:02.720 --> 00:03:04.100
you can't add anything to it.

41
00:03:04.100 --> 00:03:08.480
And of course two immutable collection you can add things to it.

42
00:03:08.480 --> 00:03:17.240
Covariant collections are read only so that's why list or collection rather can be covariant.

43
00:03:17.240 --> 00:03:22.880
But if you're going to want a collection you can change then it can't be covariant and will cover this

44
00:03:22.880 --> 00:03:23.630
later.

45
00:03:23.630 --> 00:03:29.120
Now I mention that the array class is considered to be a collection and caught Lenon that's true but

46
00:03:29.120 --> 00:03:33.510
it's in the Cartland package not in the Cartland collections package.

47
00:03:33.710 --> 00:03:39.680
And also it doesn't implement any of the collections interfaces so it is considered a collection but

48
00:03:39.680 --> 00:03:41.830
it kind of stands on its own.

49
00:03:41.840 --> 00:03:47.310
Now we already covered arrays so we're going to start our tour of collections with lists.

50
00:03:47.420 --> 00:03:51.140
We've already been using lists and you know what a list is from Java.

51
00:03:51.230 --> 00:03:53.020
So let's jump right in.

52
00:03:53.030 --> 00:03:57.020
We're not going to spend much time on lists but we will take a look at them.

53
00:03:57.020 --> 00:04:03.860
I'm going to close this file down now so as you know there are two types of list list and mutable lists

54
00:04:03.860 --> 00:04:08.120
so let's start by creating an immutable list of strings.

55
00:04:08.120 --> 00:04:19.150
So say vals strings equals list of spring summer fall and winter.

56
00:04:19.160 --> 00:04:21.800
I think I did winter fall at one point but that's OK.

57
00:04:21.920 --> 00:04:26.970
So you've seen this before and the compiler can infer the type but what is the type.

58
00:04:27.170 --> 00:04:32.210
I mean we know we're getting a list but what is the concrete class list as an interface.

59
00:04:32.210 --> 00:04:34.780
So let's print the class that we're getting.

60
00:04:34.880 --> 00:04:36.710
So we'll say print line.

61
00:04:37.000 --> 00:04:38.960
String the Java class.

62
00:04:38.990 --> 00:04:40.400
So let's go ahead and run

63
00:04:43.390 --> 00:04:45.210
and will see that we have an array list.

64
00:04:45.220 --> 00:04:48.340
But look at the name very carefully.

65
00:04:48.340 --> 00:04:50.070
We don't have a Javid.

66
00:04:50.130 --> 00:04:52.060
You tail broad array list.

67
00:04:52.060 --> 00:04:54.280
We have a Javid you till dawn.

68
00:04:54.340 --> 00:04:56.940
Arrays array list.

69
00:04:56.950 --> 00:05:02.440
Now if you know anything about this class from Java you can't add or remove anything from this type

70
00:05:02.440 --> 00:05:05.710
of list but you can change one of the elements.

71
00:05:05.800 --> 00:05:14.860
You can call the set method and say something like array list Daut set index one comma and a new instance.

72
00:05:14.860 --> 00:05:18.890
So while you can't add or remove anything you can actually change the list.

73
00:05:18.970 --> 00:05:21.610
So this is actually a mutable list.

74
00:05:21.610 --> 00:05:29.080
Katlin makes it immutable by not having any functions in the calling list interface that can change

75
00:05:29.080 --> 00:05:30.600
the array list.

76
00:05:30.670 --> 00:05:36.960
But as I said in Java This is mutable so there are ways around the immutability when you're using this

77
00:05:36.970 --> 00:05:38.050
from Java.

78
00:05:38.050 --> 00:05:44.260
So you have to be aware of this if you're going to be using this from Java when you pass this list to

79
00:05:44.260 --> 00:05:48.760
let's say a method that accepts one of these array list you could potentially change the list so you'd

80
00:05:48.760 --> 00:05:51.160
have to be aware of that in your CANTLIN code.

81
00:05:51.250 --> 00:05:54.120
And of course you wouldn't want to do that in your Java code.

82
00:05:54.220 --> 00:06:00.430
If you're calling it from Katlin But of course if you want to mutable list then just use a mutable list

83
00:06:00.430 --> 00:06:01.020
type.

84
00:06:01.030 --> 00:06:04.500
I mean there's no need to then use an immutable list type.

85
00:06:04.540 --> 00:06:10.750
But as I said it's important to note that since cotland is enforcing immutability using interface definitions

86
00:06:11.170 --> 00:06:19.240
if you pass an instance of an immutable collection to Java code the immutable characteristic is off

87
00:06:19.240 --> 00:06:23.630
the table nothing will stop the Java code from modifying the collection.

88
00:06:23.830 --> 00:06:30.960
So when we say that a collection is immutable we mean that it's guaranteed to be immutable from Katlin.

89
00:06:31.180 --> 00:06:37.990
When you're using it in a caught Lynn file in a Cartland application the moment you give the collection

90
00:06:37.990 --> 00:06:40.280
to Java all bets are off.

91
00:06:40.290 --> 00:06:40.690
All right.

92
00:06:40.690 --> 00:06:42.710
So how can we create an empty list.

93
00:06:42.710 --> 00:06:45.120
Well we've seen this before we can save now.

94
00:06:45.130 --> 00:06:48.670
Empty list equals empty list.

95
00:06:48.670 --> 00:06:54.050
Now of course we get an error because the compiler says I have no clue what type of list this is Solar's

96
00:06:54.070 --> 00:06:55.260
two ways we can fix it.

97
00:06:55.270 --> 00:07:01.890
We can go like this or if we wanted to we could explicitly declare here we can say list string.

98
00:07:02.050 --> 00:07:03.630
So right now we're being redundant.

99
00:07:03.630 --> 00:07:06.680
We don't need both.

100
00:07:07.130 --> 00:07:08.920
And this gives us an empty list.

101
00:07:09.020 --> 00:07:13.570
But what class are we getting or are we still getting age Avodart still that array list.

102
00:07:13.580 --> 00:07:17.570
Well let's print out the to the class

103
00:07:20.530 --> 00:07:21.440
let's run now

104
00:07:24.660 --> 00:07:29.230
and this time we're getting one of the collections classes called empty list.

105
00:07:29.460 --> 00:07:35.370
So this is one case where you won't get a job for instance and that kind of makes sense because as we

106
00:07:35.370 --> 00:07:38.400
said before you can't really do anything with this list.

107
00:07:38.580 --> 00:07:42.750
So there's no need to really have a full fledged Java class backing it.

108
00:07:42.750 --> 00:07:44.880
Now you can also do something like this.

109
00:07:44.880 --> 00:07:52.190
You can go var let's call it strings one and this time we'll have to actually we can do it.

110
00:07:52.210 --> 00:07:57.070
People's list of them will say string.

111
00:07:57.300 --> 00:07:58.590
We can do that.

112
00:07:58.590 --> 00:08:05.640
The thing is we've just created an immutable list here so if you want to add to it like no strings one

113
00:08:05.640 --> 00:08:10.240
Daut you can't because it's an immutable list.

114
00:08:10.260 --> 00:08:15.480
So most of the time if you're dealing with immutable Lisieux one an empty list.

115
00:08:15.480 --> 00:08:22.380
Let's say your function can return a list and you want to be able to return an empty list at times and

116
00:08:22.380 --> 00:08:27.090
that's one case where you might just use empty list just so the caller can check to see if anything

117
00:08:27.090 --> 00:08:28.110
came back.

118
00:08:28.110 --> 00:08:33.240
But what happened what would happen if we tried to get something from here from this empty list.

119
00:08:33.240 --> 00:08:33.960
Because we can.

120
00:08:33.960 --> 00:08:37.190
We just saw that we can actually get something.

121
00:08:37.190 --> 00:08:41.030
So let us be stupid and let's print line.

122
00:08:41.040 --> 00:08:42.440
Empty list.

123
00:08:42.500 --> 00:08:43.780
0.

124
00:08:43.900 --> 00:08:46.340
Now I'm sure you can guess what's going to happen here.

125
00:08:46.350 --> 00:08:53.700
But let's demonstrate it and sure enough we get an index out of bounds exception so we can still shoot

126
00:08:53.700 --> 00:08:55.130
ourselves in the foot.

127
00:08:55.140 --> 00:08:58.620
We can check to see if the list is empty before we use it.

128
00:08:59.010 --> 00:09:10.530
So we could say if not empty list is empty and then we can go ahead and do that and that will prevent

129
00:09:10.530 --> 00:09:12.030
the index out of bounds exception.

130
00:09:12.030 --> 00:09:14.400
And again you might want to do something like this.

131
00:09:14.490 --> 00:09:18.660
If you're getting a list back from a function that could potentially be an empty list there's nothing

132
00:09:18.660 --> 00:09:19.650
new here.

133
00:09:19.650 --> 00:09:23.450
All right so now let's create a list that doesn't contain nulls.

134
00:09:23.730 --> 00:09:29.930
So we want a list that we know for sure does not contain nulls so we can say fülle not.

135
00:09:29.940 --> 00:09:34.610
No list equals and we can say a list of not no.

136
00:09:34.920 --> 00:09:41.700
And then give it the initial values so I'm going to say hello no.

137
00:09:41.810 --> 00:09:46.120
Good bye and I know what you're probably thinking here but bear with me.

138
00:09:46.440 --> 00:09:49.700
Let's print the last print line.

139
00:09:49.760 --> 00:09:54.210
Now listen let's run.

140
00:09:54.310 --> 00:09:56.740
And now you can see why I did that.

141
00:09:56.770 --> 00:09:59.740
The null value was never added to the list.

142
00:09:59.860 --> 00:10:07.480
So if you want to create Let say a list out of values that you've been given and you don't know what

143
00:10:07.480 --> 00:10:12.160
those values are and you want to guarantee that there are not going to be any nulls in the last few

144
00:10:12.190 --> 00:10:14.790
can use this list of not all function.

145
00:10:15.040 --> 00:10:21.310
OK so we've seen that when we use a list we get a Java utility arrays array lists class.

146
00:10:21.310 --> 00:10:26.560
Is there a way we can just get a plain old Java dot utility array list and there is we just have to

147
00:10:26.560 --> 00:10:32.770
specifically ask for it so we can save Val array lists equals array a list of.

148
00:10:32.800 --> 00:10:35.580
And we'll just make this one an array list of ints.

149
00:10:35.950 --> 00:10:44.110
And now if we print out the class realist taught Java CLOS

150
00:10:48.560 --> 00:10:50.720
will see that we now have a Java.

151
00:10:50.780 --> 00:10:52.430
You still don't array list.

152
00:10:52.430 --> 00:10:55.940
However we now have a mutable list.

153
00:10:56.060 --> 00:11:03.860
So if you want an immutable list you're going to have to have one of these Javid utility arrays array

154
00:11:03.860 --> 00:11:08.750
list which doesn't matter because you can't add anything to the list and you can't remove anything from

155
00:11:08.750 --> 00:11:10.430
the list so that's fine.

156
00:11:10.430 --> 00:11:14.810
You say you want an immutable list meaning you're never going to change it.

157
00:11:14.930 --> 00:11:18.940
But if you want an array list you're going to end up with amiable list.

158
00:11:19.010 --> 00:11:21.990
So let's try creating a mutable list.

159
00:11:22.110 --> 00:11:32.530
So will say Val mutable list equals mutable list of and we'll make this list of ints again one two three

160
00:11:32.540 --> 00:11:34.050
and now we'll print it

161
00:11:37.970 --> 00:11:45.310
and see what we get for that I actually went to the Java class so let me change that.

162
00:11:47.800 --> 00:11:50.050
And you'll see that we get an array list.

163
00:11:50.050 --> 00:11:58.480
So when you ask for a immutable list you're going to get a Java utility arrays array list when you ask

164
00:11:58.480 --> 00:12:04.810
for an array list explicitly or you just ask for immutable list you're going to get our good friend

165
00:12:04.840 --> 00:12:07.520
Javid dot dot array list.

166
00:12:07.870 --> 00:12:10.450
OK so let's say we have an array.

167
00:12:10.450 --> 00:12:12.730
Can we convert that to a list in cotland.

168
00:12:12.730 --> 00:12:19.250
Well yeah we can very easily so we'll say Val array equals array.

169
00:12:19.960 --> 00:12:29.020
And we'll give it black white and green and then if we want that to become a list we can just say vowel

170
00:12:29.020 --> 00:12:34.570
color list equals list of array.

171
00:12:35.040 --> 00:12:38.050
And now we'll print line color list.

172
00:12:38.220 --> 00:12:46.600
Let's run and OK I'll admit that I like to a little bit because this doesn't give us a list of black

173
00:12:46.600 --> 00:12:50.350
white and green so it doesn't give us a list of the individual elements.

174
00:12:50.350 --> 00:12:54.550
What this does and you probably would have guessed this if you had time to look at the code before I

175
00:12:54.550 --> 00:12:56.000
just went ahead and ran it.

176
00:12:56.020 --> 00:12:57.940
You're passing the array as an initial value.

177
00:12:57.940 --> 00:13:00.810
So what this is going to do is create a list with one element.

178
00:13:00.850 --> 00:13:04.600
The array this in here is the array reference.

179
00:13:04.600 --> 00:13:13.240
When you see something that begins with a square brace in an L that means that it's an array of whatever

180
00:13:13.240 --> 00:13:14.230
comes after.

181
00:13:14.230 --> 00:13:19.600
So we have an array of string here a list with one element and that's not what we wanted.

182
00:13:19.600 --> 00:13:23.670
Probably we probably wanted to convert this to a list of three elements.

183
00:13:23.800 --> 00:13:31.300
So let's try another method we could use the spread operator remember the spread operator it unpacks

184
00:13:31.450 --> 00:13:32.170
and array.

185
00:13:32.170 --> 00:13:38.260
So let's give that a shot so we'll just add the spread operator here and now that should impact the

186
00:13:38.260 --> 00:13:44.290
array into its three elements and then pass those three values to Liskov.

187
00:13:44.290 --> 00:13:46.620
So we'll probably get what we want here.

188
00:13:46.630 --> 00:13:50.280
But let's run and we do.

189
00:13:50.280 --> 00:13:54.170
This time we get a list of black white and green but there's an easier way to do it.

190
00:13:54.210 --> 00:14:00.300
You can just say array dot to list.

191
00:14:00.690 --> 00:14:08.140
And now if we run we'll get the same thing and you can do the same thing if you if you have an array

192
00:14:08.150 --> 00:14:14.450
that's one of those special primitive type arrays remember if we were saying that if you have Java code

193
00:14:14.450 --> 00:14:20.270
that you want to call and the java method once a primitive array that you can't pass it a Katlin array

194
00:14:20.390 --> 00:14:21.580
with a big day.

195
00:14:21.800 --> 00:14:24.870
You have to create one of those special primitive array type.

196
00:14:24.860 --> 00:14:33.770
So let's do that quickly we'll save out ints equals Kint array of 1 to three and then if we want to

197
00:14:33.770 --> 00:14:36.510
convert this to a list we just do the same thing.

198
00:14:36.760 --> 00:14:40.130
Print line and start to list.

199
00:14:40.130 --> 00:14:40.940
And if we run

200
00:14:44.280 --> 00:14:46.990
we'll see that we have a list of 1 to 3.

201
00:14:47.220 --> 00:14:52.090
Ok so we know how to create mutable and immutable lists.

202
00:14:52.230 --> 00:14:57.120
Of course since there are Java classes under the covers most of them we know that the empty list is

203
00:14:57.120 --> 00:14:57.500
not.

204
00:14:57.510 --> 00:15:02.880
But most of the ones that you can actually do something with there are Java classes under the covers

205
00:15:03.300 --> 00:15:06.960
so you can do everything with them that you can do a job.

206
00:15:06.960 --> 00:15:12.870
I mean you can get items you can set items if you have a mutable list etc. but as you've seen you can

207
00:15:12.870 --> 00:15:16.270
use the square bracket notation in cotland.

208
00:15:16.320 --> 00:15:25.620
So here we could say let me go to our immutable list so we can say print lying mutable list and we can

209
00:15:25.620 --> 00:15:32.850
say two but we can also set things that way we can say mutable list one equals 20.

210
00:15:33.060 --> 00:15:36.900
And then we'll print lying our immutable list.

211
00:15:37.230 --> 00:15:38.000
Let's do that

212
00:15:41.220 --> 00:15:44.670
and we'll see that mutable list 2 is equal to 3.

213
00:15:44.670 --> 00:15:50.940
And here we've replaced the second element in that list which is at index 1 with 20.

214
00:15:50.940 --> 00:15:54.060
So in addition to using set and get cars we can do that too.

215
00:15:54.060 --> 00:16:01.140
We could have said mutable lists of dot set the usual saying and then provide at the index or we can

216
00:16:01.140 --> 00:16:05.870
go mutable Lescaut get just as you can in Java.

217
00:16:06.810 --> 00:16:12.050
You can also use the square bracket notation almost as if this was an array.

218
00:16:12.120 --> 00:16:14.770
So you can do everything you can to do in Java.

219
00:16:14.790 --> 00:16:23.010
And Courtland has added more functions to the collections classes and we'll take a look at some of those

220
00:16:23.070 --> 00:16:24.170
in the next video.
