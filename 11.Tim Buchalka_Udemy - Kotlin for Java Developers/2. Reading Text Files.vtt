WEBVTT
1
00:00:05.460 --> 00:00:11.460
As I mentioned in the introduction to this section cotland doesn't have its own IO classes.

2
00:00:11.460 --> 00:00:19.350
So what it's done is it's basically Takht extension functions onto the existing Java IO classes so when

3
00:00:19.350 --> 00:00:24.970
you do IO in cotland you're always using the IO classes in the JDK.

4
00:00:25.020 --> 00:00:30.460
Now every saying Katlin to do with IO is in the Katlin dot IO package.

5
00:00:30.480 --> 00:00:32.530
So let's go take a look at it.

6
00:00:32.610 --> 00:00:37.940
We'll go up to the browser and we'll see what Cartland has added.

7
00:00:37.970 --> 00:00:42.130
So there are a couple of classes here to help with walking the file tree.

8
00:00:42.140 --> 00:00:52.400
And there's one to do with recursively copying files and there are a bunch of extension functions and

9
00:00:52.400 --> 00:01:00.410
other things that are tagged with JVM meaning you can only use them when you target the JVM.

10
00:01:00.410 --> 00:01:05.250
And that's because as I've said Cartland uses a JDK classes for IO.

11
00:01:05.360 --> 00:01:13.310
So let's click on the Javid I O dot filing here and now we can see the extension functions that have

12
00:01:13.310 --> 00:01:17.010
been added to the Javid I showed up file class.

13
00:01:17.060 --> 00:01:26.790
So there's a whole bunch in here that you can now use with a file instance an extension function is

14
00:01:26.790 --> 00:01:28.460
a syntactical illusion.

15
00:01:28.470 --> 00:01:34.650
The file class isn't being extended but you can invoke these functions with an instance of the file

16
00:01:34.650 --> 00:01:37.150
class.

17
00:01:37.170 --> 00:01:39.720
All right so let's go back to intelligent now.

18
00:01:41.070 --> 00:01:48.240
So I've created a new project here and I've added a test file text file into the project and I put it

19
00:01:48.240 --> 00:01:53.010
right under the project node because that's the working directory for the project.

20
00:01:53.010 --> 00:01:56.100
And that way I won't have to type out a directory.

21
00:01:56.100 --> 00:02:01.290
I can just reference's file because the default directory is the working directory.

22
00:02:01.560 --> 00:02:07.320
So let's look at that file and you'll see it's really simple it's just a text file with five lines in

23
00:02:07.320 --> 00:02:07.700
it.

24
00:02:07.860 --> 00:02:10.150
So let's go back to Courtland.

25
00:02:10.170 --> 00:02:14.340
I've created a main function and we're going to read our test Walda textfile.

26
00:02:14.340 --> 00:02:21.960
So we're going to create a file instance so I'll save file and as I said I can just reference text file

27
00:02:22.410 --> 00:02:28.470
test file that text directly without having to specify the directory because it's in the working directory

28
00:02:28.500 --> 00:02:29.910
and that's the default.

29
00:02:29.910 --> 00:02:39.490
Now if we go to the declaration of file Let's go to the declaration and if we pop on up to the top we'll

30
00:02:39.490 --> 00:02:43.160
see that it's our good friend Javid that Iowa file.

31
00:02:43.450 --> 00:02:47.760
So as I said cotland does not have its own IO classes.

32
00:02:47.770 --> 00:02:50.910
So what we're doing here was we're actually creating an instance of Javid.

33
00:02:50.930 --> 00:02:56.020
I showed up file and that's why that import statement has been created for us.

34
00:02:56.050 --> 00:02:58.490
I'll just close down the file here.

35
00:02:58.690 --> 00:03:03.280
So the next thing we're going to do because we want to read the file is we're going to call a function

36
00:03:03.280 --> 00:03:04.640
called reader.

37
00:03:05.080 --> 00:03:12.520
And if we pop on over now and look at the declaration for this function we'll see that it's a extenstion

38
00:03:12.520 --> 00:03:15.340
function on the file class.

39
00:03:15.340 --> 00:03:21.010
So we have filed reader and as you know now that means that we can use an instance of the file class

40
00:03:21.010 --> 00:03:23.200
to call this function.

41
00:03:23.200 --> 00:03:30.520
Now the comment says it returns a new file reader what it actually returns is an input stream reader

42
00:03:30.940 --> 00:03:39.280
and we'll see also that the default char set is UTF 8 and that's fine with us so we're not passing a

43
00:03:39.280 --> 00:03:43.690
parameter back here in our code we're not passing a parameter here.

44
00:03:43.690 --> 00:03:50.620
But if you wanted a char set that's not UTF 8 then you would have to specify the char set as a parameter.

45
00:03:50.620 --> 00:03:57.130
So basically what we've done so far if we were writing Java this won't compile but we've basically said

46
00:03:57.130 --> 00:04:09.320
new input stream reader and we've said new file input stream reader new file test files.

47
00:04:09.320 --> 00:04:16.480
T x t and we specified UTF 8.

48
00:04:16.960 --> 00:04:22.320
So this is the this call here is the equivalent of this.

49
00:04:22.330 --> 00:04:24.820
So Catlin has added an extension function.

50
00:04:24.820 --> 00:04:29.990
This is really common so cotland has added an extension function so you don't have to do what you do

51
00:04:29.990 --> 00:04:30.620
in Java.

52
00:04:30.730 --> 00:04:38.090
And chain all these IO classes together you can just instantiate a file and then say I want a reader.

53
00:04:38.140 --> 00:04:40.510
And this is what you're going to get.

54
00:04:41.700 --> 00:04:43.260
I'll just comment that out.

55
00:04:43.440 --> 00:04:49.410
OK so going back toward Cartland code if we type datt Now we'll see all the functions that we can call

56
00:04:52.010 --> 00:04:55.460
and some might look familiar and some won't.

57
00:04:55.460 --> 00:04:57.730
Now we want to read the entire file.

58
00:04:57.770 --> 00:05:02.290
So we're going to start with a function called Read O-lines.

59
00:05:02.450 --> 00:05:10.410
So we're going to use this function right here and I'll store it into a variable called lines.

60
00:05:10.500 --> 00:05:16.080
So vowel lines equals file dot reader do not read lines.

61
00:05:16.100 --> 00:05:18.640
This function returns a list of string.

62
00:05:18.650 --> 00:05:21.640
And of course each string will be a line in the file.

63
00:05:21.650 --> 00:05:27.470
So once we've read in all the lines we can then loop through them so we can say lines drop for each

64
00:05:28.790 --> 00:05:30.890
Felis just print line it.

65
00:05:31.820 --> 00:05:39.860
So it will refer to each item in our string list and of course each item in a string list is a line

66
00:05:39.860 --> 00:05:46.880
in the file so we should have a string list and each string will be one of these lines so our list should

67
00:05:46.880 --> 00:05:50.970
be a length of 5 and will have 5 entries in it.

68
00:05:51.020 --> 00:05:54.770
And the first century will be this line 1 etc..

69
00:05:54.860 --> 00:05:56.580
So let's run now.

70
00:06:00.090 --> 00:06:03.180
And sure enough here is the content of our file.

71
00:06:03.180 --> 00:06:05.740
So let's take a look at the read lines function.

72
00:06:05.750 --> 00:06:09.120
Now let's go over and look at the declaration for that.

73
00:06:10.110 --> 00:06:15.690
And we'll see a comment that says Do not use this function for huge files.

74
00:06:15.690 --> 00:06:21.630
Now this function reads the entire file into memory in one go so you don't want to use it for large

75
00:06:21.630 --> 00:06:22.410
files.

76
00:06:22.560 --> 00:06:26.050
But for our little 5 line file it's fine.

77
00:06:26.070 --> 00:06:29.480
Also the function closes the stream for us.

78
00:06:29.640 --> 00:06:34.740
That's not stated in the documentation because the docs only tell us when we have to close the stream

79
00:06:34.770 --> 00:06:40.350
and we don't have to in this case so it doesn't mention anything and will see an example in a minute

80
00:06:40.380 --> 00:06:43.980
of when we do have to explicitly close the stream.

81
00:06:43.980 --> 00:06:49.300
So let's go back to our CANTLIN code and let's just delete the read lines for a minute and press dot

82
00:06:49.300 --> 00:06:55.560
again and let's see what else is available and we'll see that there is also a read text function.

83
00:06:55.560 --> 00:07:03.030
But if I select that and then I go over and look at the declaration for it will see that we get a string

84
00:07:03.030 --> 00:07:10.050
back so we get the entire file as one string and we'd have to parse the string to get each of our lines

85
00:07:10.050 --> 00:07:14.360
and there's no reason for us to do that when we can just use the read lines function.

86
00:07:14.370 --> 00:07:19.920
Also you'll notice that we'd be responsible for closing the reader it says note in the caller's responsibility

87
00:07:20.190 --> 00:07:21.790
to close this reader.

88
00:07:21.960 --> 00:07:27.150
So unless you want to read the entire contents of a file into a single string.

89
00:07:27.330 --> 00:07:28.850
This isn't the function to use.

90
00:07:28.860 --> 00:07:32.890
But let's go ahead and use it anyway because we like to try things out.

91
00:07:32.910 --> 00:07:39.500
Now just before we do notice that this is an extension function to the reader class not the file class

92
00:07:39.510 --> 00:07:44.190
and of course that makes sense because we're not calling this with a file instance we're calling it

93
00:07:44.190 --> 00:07:46.200
with a reader instance.

94
00:07:46.380 --> 00:07:51.650
So as we've already done we can easily change the function to call read text.

95
00:07:51.660 --> 00:07:54.110
But what about closing the stream.

96
00:07:54.120 --> 00:07:57.410
The documentation stated that we're responsible for that.

97
00:07:57.420 --> 00:07:58.390
So how do we do this.

98
00:07:58.380 --> 00:08:02.940
Do we save the reader into a variable and then call close on it when we're done.

99
00:08:02.940 --> 00:08:04.410
Wow that's one way we could do it.

100
00:08:04.410 --> 00:08:06.100
Let's do it that way first.

101
00:08:06.120 --> 00:08:08.280
So let's change our code a little bit.

102
00:08:08.290 --> 00:08:15.960
Well say Val reader and so we've got a reference to our reader and then we'll save Val.

103
00:08:15.960 --> 00:08:17.940
Lines equals reader.

104
00:08:18.030 --> 00:08:19.510
Read text.

105
00:08:19.950 --> 00:08:23.030
We'll print the lines and now we can do it like this.

106
00:08:23.040 --> 00:08:26.880
We've only got the one string so we don't need to loop.

107
00:08:26.880 --> 00:08:29.910
And then we want to say reader got close.

108
00:08:30.480 --> 00:08:36.010
So we've read our file and we're now closing the reader.

109
00:08:36.030 --> 00:08:37.080
Let's go ahead and run

110
00:08:39.820 --> 00:08:45.670
and even though we're reading the string the whole file is one string because our file contains new

111
00:08:45.670 --> 00:08:47.860
lines we're still going to see the nice printout.

112
00:08:47.870 --> 00:08:51.140
So we're still going to see each line separately.

113
00:08:51.190 --> 00:08:58.960
So that's one way that we can use a function that requires us to close the resource.

114
00:08:58.960 --> 00:09:03.050
And so we can just save the resource into a variable use it and then close it.

115
00:09:03.070 --> 00:09:09.460
But there's another way that we can do this and that's to use the use function.

116
00:09:09.460 --> 00:09:13.950
So let's change our code and then we'll discuss what's going on.

117
00:09:14.350 --> 00:09:22.450
So I'm actually going to get rid of all of this and I'm going to say Val vow lines equals file test

118
00:09:22.450 --> 00:09:28.630
file text dot reader dot use.

119
00:09:28.690 --> 00:09:39.410
And then in here I'm going to say I read or read text and then I'll just go ahead and print line print

120
00:09:39.430 --> 00:09:41.600
line lines.

121
00:09:42.160 --> 00:09:43.000
All right.

122
00:09:43.000 --> 00:09:45.280
So first of all this is a lot more concise.

123
00:09:45.280 --> 00:09:49.630
We had four lines of code before and we've managed to get it down to two.

124
00:09:49.630 --> 00:09:52.390
Now let's take a look at the declaration for use.

125
00:09:55.380 --> 00:10:03.810
So it says that it executes the given block on this resource and then closes it down correctly whether

126
00:10:03.900 --> 00:10:07.080
an exception is thrown or not.

127
00:10:07.260 --> 00:10:12.860
And we'll see that we have to call this function with an instance that implements close of all.

128
00:10:12.930 --> 00:10:18.360
And this is the same in job if you want to use try with resources you can only do that with a resource

129
00:10:18.360 --> 00:10:19.960
that implements close of.

130
00:10:20.070 --> 00:10:23.500
So the use function closes the stream for us.

131
00:10:23.520 --> 00:10:27.730
And in this case the resource is the reader.

132
00:10:27.870 --> 00:10:35.940
So we're calling use on the reader so once the lambda has finished executing use We'll go ahead and

133
00:10:35.940 --> 00:10:37.910
close the reader.

134
00:10:37.920 --> 00:10:39.250
So let's go ahead and run

135
00:10:42.980 --> 00:10:45.380
and we'll see that we get the same result.

136
00:10:45.380 --> 00:10:45.790
All right.

137
00:10:45.800 --> 00:10:49.450
Can we use a buffered reader rather than a reader.

138
00:10:49.460 --> 00:10:54.110
Sure you can just change this to Bufford reader.

139
00:10:54.410 --> 00:10:58.100
And now we're using a buffered reader rather than a reader and if we run

140
00:11:00.850 --> 00:11:02.310
we'll get the same result.

141
00:11:02.440 --> 00:11:09.340
OK so one rule of thumb is that functions with use in the name will close the resource for you.

142
00:11:09.340 --> 00:11:11.050
Now there is one exception to this.

143
00:11:11.050 --> 00:11:16.670
There is another version of the read text function that will close the resource.

144
00:11:16.720 --> 00:11:24.430
The one we're using won't do that but there is also a read text extension function for the File class

145
00:11:24.520 --> 00:11:27.810
not the reader class so let's try using that one.

146
00:11:27.850 --> 00:11:38.350
So I'm going to overwrite what we have here now and all cebú lines equals file test file that text Daut

147
00:11:38.650 --> 00:11:41.310
read text.

148
00:11:41.380 --> 00:11:44.910
So here we're calling the other version of the text function.

149
00:11:45.040 --> 00:11:48.290
That is an extension function to the file class.

150
00:11:48.310 --> 00:11:51.950
So now let's print the lines we got.

151
00:11:51.970 --> 00:11:57.720
And if we run we'll see that we get the same result.

152
00:11:57.880 --> 00:11:59.350
But let's take a look at this function.

153
00:11:59.350 --> 00:12:08.700
Now this other version of read text OK we'll see that it doesn't tell us that we have to close a file.

154
00:12:08.700 --> 00:12:10.920
It closes the file for us.

155
00:12:10.950 --> 00:12:18.270
This version is not recommended on huge files and in fact it has an internal limitation of two gigabytes.

156
00:12:18.360 --> 00:12:26.090
So this one has a hard limit of the size of the file that you can use that you can read using the function.

157
00:12:26.130 --> 00:12:30.750
So file that rechecks closes the resource for you but it has a 2 gig limit.

158
00:12:30.750 --> 00:12:39.060
Now if we go back to the reader's rate text function we'll see that it does not close the resource for

159
00:12:39.060 --> 00:12:43.400
you but it also doesn't have a limit on the file size.

160
00:12:43.590 --> 00:12:44.010
All right.

161
00:12:44.010 --> 00:12:49.900
So we've seen reads lines and read text and both of these read the entire file at once.

162
00:12:49.980 --> 00:12:55.140
But let's suppose we have a huge file and we don't want to read the entire file at once.

163
00:12:55.140 --> 00:12:58.250
We want to read the file one line at a time.

164
00:12:58.500 --> 00:13:03.550
Or maybe we just want to read one line at a time because we don't need to read the entire file.

165
00:13:03.590 --> 00:13:05.890
Maybe we just need the first five lines.

166
00:13:06.150 --> 00:13:12.420
So for this we'll use the for each line function just like the for each function.

167
00:13:12.420 --> 00:13:15.540
It takes a lambda and just like for each.

168
00:13:15.570 --> 00:13:16.760
It's a loop.

169
00:13:16.800 --> 00:13:21.450
So let's go back to our Katlin file here and let's change our code to use it.

170
00:13:21.510 --> 00:13:33.230
So we'll say file test file that T T Dot reader dot for each line.

171
00:13:33.240 --> 00:13:36.720
And now we just give it a lambda and we want to print each line.

172
00:13:36.750 --> 00:13:43.320
So this looks really similar to what we did with red lines but instead of reading the entire file in

173
00:13:43.320 --> 00:13:46.650
one shot it's going to read a line at a time.

174
00:13:46.650 --> 00:13:55.180
So in this case as usual it will be each line in the file and when we run we'll see the same result

175
00:13:55.720 --> 00:13:59.980
when I converted the text adventure application at the beginning of the Course.

176
00:13:59.980 --> 00:14:06.340
This is what I used to read in the data files for the text adventure application.

177
00:14:06.340 --> 00:14:11.560
Now this function doesn't have use in its name but if we go to the declaration

178
00:14:15.020 --> 00:14:22.790
we'll see that it does close the reader for us so the use in the function name means that it definitely

179
00:14:22.790 --> 00:14:26.170
closes or the rule of thumb is that it will close.

180
00:14:26.180 --> 00:14:27.740
It closes the resource for you.

181
00:14:27.740 --> 00:14:33.170
So if a function has use in its name you normally you don't have to worry about closing the resource.

182
00:14:33.290 --> 00:14:38.780
If a function doesn't have use in its name just check the declaration you might have to close the resource

183
00:14:38.840 --> 00:14:41.810
or the function might take care of it for you.

184
00:14:41.810 --> 00:14:47.570
And why don't we have to close the resource for this while this is using the use lines function and

185
00:14:47.570 --> 00:14:50.500
we could also have used that directly.

186
00:14:50.510 --> 00:14:56.990
So here is use in the function name and this this for each line is basically just deferring to the use

187
00:14:56.990 --> 00:14:59.600
lines function and that closes the resource.

188
00:14:59.600 --> 00:15:01.670
And as I just said we could use that directly.

189
00:15:01.670 --> 00:15:08.510
So let's go back to our CANTLIN file and let C's use lines instead of for each line so we can just say

190
00:15:08.520 --> 00:15:09.530
use lines.

191
00:15:09.530 --> 00:15:17.110
But if we don't do anything more than that and we just run we'll see that we have a sequence.

192
00:15:17.360 --> 00:15:23.200
So we need to put a terminal operation in here to actually get our lines.

193
00:15:23.210 --> 00:15:31.520
And so we can't just say print line anymore we're going to say I dot for each

194
00:15:35.420 --> 00:15:37.370
print line I-T.

195
00:15:38.180 --> 00:15:44.270
So this I-T in here is actually the sequence number saying for each item in the sequence we want to

196
00:15:44.270 --> 00:15:45.010
print it.

197
00:15:45.110 --> 00:15:54.280
So now if we run we'll see that we're seeing Air Lines from the file but this is a lot more verbose

198
00:15:54.490 --> 00:15:59.810
for each line is more concise and it conveys more information actually about what you're doing.

199
00:16:00.070 --> 00:16:02.560
And it's basically a convenience function.

200
00:16:02.560 --> 00:16:06.000
So let's let's go back to using for each line.

201
00:16:06.010 --> 00:16:11.350
And now we can just go ahead and print our line directly.

202
00:16:12.360 --> 00:16:17.760
All right so that's really all there is to reading text files in the next video will.

203
00:16:17.770 --> 00:16:23.300
We'll talk about binary files and we'll also talk about try with resources so see if.
