WEBVTT
1
1

00:00:04.680  -->  00:00:07.710
Alright, let's take a look at good old
2

2

00:00:07.710  -->  00:00:11.250
try and catch for a minute. The try catch
3

3

00:00:11.250  -->  00:00:14.910
is similar to try and catch in Java but
4

4

00:00:14.910  -->  00:00:18.390
in Kotlin, you can use try catch as an
5

5

00:00:18.390  -->  00:00:20.940
expression just like you can use if it's
6

6

00:00:20.940  -->  00:00:23.610
an expression. Now related to try catch
7

7

00:00:23.610  -->  00:00:25.410
as I mentioned when we covered quick
8

8

00:00:25.410  -->  00:00:27.780
differences between Kotlin and Java,
9

9

00:00:27.780  -->  00:00:30.060
you don't have to declare the exceptions
10

10

00:00:30.060  -->  00:00:32.129
that a function throws because Kotlin
11

11

00:00:32.129  -->  00:00:34.170
doesn't distinguish between checked and
12

12

00:00:34.170  -->  00:00:36.720
unchecked exceptions, so I just wanted to
13

13

00:00:36.720  -->  00:00:38.910
remind you about that, but getting back
14

14

00:00:38.910  -->  00:00:41.040
to try and catch now, let's take a look
15

15

00:00:41.040  -->  00:00:43.950
at how to use try and catch as an
16

16

00:00:43.950  -->  00:00:45.960
expression, so we're going to write a
17

17

00:00:45.960  -->  00:00:48.360
function that returns true if a number
18

18

00:00:48.360  -->  00:00:50.399
is successfully parsed and false
19

19

00:00:50.399  -->  00:00:53.550
otherwise, I've already setup the usual
20

20

00:00:53.550  -->  00:00:56.280
project package file you get the drill
21

21

00:00:56.280  -->  00:00:58.680
by now, I'm sure. Let me come down here
22

22

00:00:58.680  -->  00:01:04.170
and I'll say fun get number and we'll
23

23

00:01:04.170  -->  00:01:06.420
pass the string and we want to return an
24

24

00:01:06.420  -->  00:01:08.670
int because this function is going to
25

25

00:01:08.670  -->  00:01:10.470
try to parse whatever string is passed
26

26

00:01:10.470  -->  00:01:14.970
and then we'll say return try and we'll
27

27

00:01:14.970  -->  00:01:20.570
say integer dot parse int the string
28

28

00:01:20.570  -->  00:01:26.310
catch e which will be a number format
29

29

00:01:26.310  -->  00:01:32.220
exception and we'll just return 0,
30

30

00:01:32.220  -->  00:01:33.810
so there's a couple of things to notice
31

31

00:01:33.810  -->  00:01:37.409
here, first of all notice the way that we
32

32

00:01:37.409  -->  00:01:40.740
write the catch part, so instead of
33

33

00:01:40.740  -->  00:01:43.770
number format exception e we say e colon
34

34

00:01:43.770  -->  00:01:45.299
number format exception because of
35

35

00:01:45.299  -->  00:01:47.280
course we're just declaring a local
36

36

00:01:47.280  -->  00:01:49.799
variable in here, basically. Also just
37

37

00:01:49.799  -->  00:01:51.689
like the if expression and the one
38

38

00:01:51.689  -->  00:01:54.329
expression, the last line in each block
39

39

00:01:54.329  -->  00:01:56.670
will be the value that the try-catch
40

40

00:01:56.670  -->  00:02:00.170
returns, so here we're returning the
41

41

00:02:00.170  -->  00:02:03.030
result of the try catch actually I'm
42

42

00:02:03.030  -->  00:02:07.950
going to indent this a little more so
43

43

00:02:07.950  -->  00:02:09.840
we're returning the result of the parse
44

44

00:02:09.840  -->  00:02:12.569
when the parse is successful, but if it
45

45

00:02:12.569  -->  00:02:14.879
isn't successful and parse int throw the
46

46

00:02:14.879  -->  00:02:16.680
number format exception then we're just
47

47

00:02:16.680  -->  00:02:18.630
returning 0. So now let's
48

48

00:02:18.630  -->  00:02:20.430
call this function from main, so we'll
49

49

00:02:20.430  -->  00:02:24.780
say print line get number and we'll pass
50

50

00:02:24.780  -->  00:02:27.210
it 22 so in this case we expect to see
51

51

00:02:27.210  -->  00:02:30.420
22 printed because parsing should be
52

52

00:02:30.420  -->  00:02:36.870
successful. So let's run and we'll see
53

53

00:02:36.870  -->  00:02:38.610
that 22 is printed,
54

54

00:02:38.610  -->  00:02:41.370
but now let's give it twenty two point
55

55

00:02:41.370  -->  00:02:45.690
five, this should fail it should cause
56

56

00:02:45.690  -->  00:02:47.970
number format exception because this
57

57

00:02:47.970  -->  00:02:50.850
string cannot be parsed to an int so
58

58

00:02:50.850  -->  00:02:55.740
let's run and we'll see that now we get
59

59

00:02:55.740  -->  00:02:58.680
0 because this threw an exception,
60

60

00:02:58.680  -->  00:03:01.080
we caught the exception and we returned 0
61

61

00:03:01.080  -->  00:03:03.600
from the try catch statement and that
62

62

00:03:03.600  -->  00:03:06.030
was returned from the function. Now what
63

63

00:03:06.030  -->  00:03:09.000
if we want it to use finally here?
64

64

00:03:09.000  -->  00:03:11.610
How would that work? Well let's add a finally
65

65

00:03:11.610  -->  00:03:13.410
block that just prints some text,
66

66

00:03:13.410  -->  00:03:18.900
so we'll say finally print line I'm in the
67

67

00:03:18.900  -->  00:03:22.500
finally block, so we see there's no
68

68

00:03:22.500  -->  00:03:25.170
errors even though finally isn't
69

69

00:03:25.170  -->  00:03:27.300
returning a value, we know that from the
70

70

00:03:27.300  -->  00:03:30.240
print line print line returns unit,
71

71

00:03:30.240  -->  00:03:37.200
so let's run and we'll see 0 printed while
72

72

00:03:37.200  -->  00:03:38.610
we see what's in the finally block
73

73

00:03:38.610  -->  00:03:41.990
printed first and then we see 0 printed
74

74

00:03:41.990  -->  00:03:45.090
because what will happen is regardless
75

75

00:03:45.090  -->  00:03:47.910
if we execute the trier to catch the
76

76

00:03:47.910  -->  00:03:50.520
finally block will execute and then of
77

77

00:03:50.520  -->  00:03:52.530
course 0 is always returned from the
78

78

00:03:52.530  -->  00:03:54.290
function and that gets printed as well.
79

79

00:03:54.290  -->  00:03:57.270
So let's have the finally block return
80

80

00:03:57.270  -->  00:04:00.030
something, so let's have it return one.
81

81

00:04:00.030  -->  00:04:02.790
Now if we hover over the one, we'll see
82

82

00:04:02.790  -->  00:04:04.620
that's kind of in yellow here, we'll see
83

83

00:04:04.620  -->  00:04:06.209
that we get a message saying the
84

84

00:04:06.209  -->  00:04:09.690
expression is unused and indeed, if we
85

85

00:04:09.690  -->  00:04:14.790
run, we'll see that we just get I'm in
86

86

00:04:14.790  -->  00:04:16.980
the finally block and we still get zero
87

87

00:04:16.980  -->  00:04:19.890
return from the function, so the finally
88

88

00:04:19.890  -->  00:04:22.350
block is not involved in the evaluation
89

89

00:04:22.350  -->  00:04:27.180
of the value of a try-catch expression
90

90

00:04:27.180  -->  00:04:29.280
you can execute code in the finally
91

91

00:04:29.280  -->  00:04:32.580
block, but no value will ever be
92

92

00:04:32.580  -->  00:04:34.800
from the finally blocked, so keep that in
93

93

00:04:34.800  -->  00:04:36.540
mind if you want to return a value from
94

94

00:04:36.540  -->  00:04:38.850
the try-catch, you can only specify a
95

95

00:04:38.850  -->  00:04:41.940
value to return in the try block or the
96

96

00:04:41.940  -->  00:04:44.640
catch block, anything you specified to be
97

97

00:04:44.640  -->  00:04:46.290
returned in the finally block is going
98

98

00:04:46.290  -->  00:04:48.630
to be ignored and that makes sense, right?
99

99

00:04:48.630  -->  00:04:51.510
Because the finally block is going to be
100

100

00:04:51.510  -->  00:04:53.550
executed regardless of whether the
101

101

00:04:53.550  -->  00:04:56.790
trying catch block is executed so if the
102

102

00:04:56.790  -->  00:04:58.710
finally block could return a value
103

103

00:04:58.710  -->  00:05:01.110
there'd be no point in specifying a
104

104

00:05:01.110  -->  00:05:02.880
return value in the trying catch because
105

105

00:05:02.880  -->  00:05:04.680
you'd always get the return value from
106

106

00:05:04.680  -->  00:05:08.160
the finally block. So that's why finally
107

107

00:05:08.160  -->  00:05:10.920
doesn't get involved when it comes to
108

108

00:05:10.920  -->  00:05:12.810
evaluating the value of the try catch
109

109

00:05:12.810  -->  00:05:14.940
expression. Alright, so let's remove the
110

110

00:05:14.940  -->  00:05:17.160
one from the finally because it doesn't
111

111

00:05:17.160  -->  00:05:19.470
get used and then let's comment out the
112

112

00:05:19.470  -->  00:05:23.580
catch, what's going to happen in this
113

113

00:05:23.580  -->  00:05:29.160
case? Well, let's run and we'll see that
114

114

00:05:29.160  -->  00:05:31.050
we get the exact same thing we get in
115

115

00:05:31.050  -->  00:05:33.480
Java, we get the finally block executed
116

116

00:05:33.480  -->  00:05:35.610
but we also get an exception thrown,
117

117

00:05:35.610  -->  00:05:38.250
so in this case nothing gets returned
118

118

00:05:38.250  -->  00:05:42.030
because an exception is thrown and so we
119

119

00:05:42.030  -->  00:05:44.430
don't see anything printed out from this
120

120

00:05:44.430  -->  00:05:46.890
result, so this is no different than in
121

121

00:05:46.890  -->  00:05:49.050
Java, we're not catching the exception so
122

122

00:05:49.050  -->  00:05:50.820
it's thrown and the print line in the
123

123

00:05:50.820  -->  00:05:53.550
main function isn't executed. Now, just
124

124

00:05:53.550  -->  00:05:55.290
like with the if expression in the when
125

125

00:05:55.290  -->  00:05:57.630
expression, if you use try catch as an
126

126

00:05:57.630  -->  00:05:59.190
expression you can assign it to a
127

127

00:05:59.190  -->  00:06:02.070
variable and you can use it wherever you
128

128

00:06:02.070  -->  00:06:04.290
can use an expression. Now let's take a
129

129

00:06:04.290  -->  00:06:06.030
look at another use of the Elvis
130

130

00:06:06.030  -->  00:06:08.490
operator, remember the Elvis operator?
131

131

00:06:08.490  -->  00:06:10.560
We saw how you can use it to assign a
132

132

00:06:10.560  -->  00:06:12.720
default value when something is null.
133

133

00:06:12.720  -->  00:06:15.210
Well, instead of assigning a default
134

134

00:06:15.210  -->  00:06:17.040
value you could also throw an exception.
135

135

00:06:17.040  -->  00:06:19.650
So let's change our function so that it
136

136

00:06:19.650  -->  00:06:21.960
will return null when a number format
137

137

00:06:21.960  -->  00:06:24.750
exception occurs rather than going ahead
138

138

00:06:24.750  -->  00:06:28.530
and returning 0, so if I uncomment this
139

139

00:06:28.530  -->  00:06:31.680
for a minute, we were returning 0 and we
140

140

00:06:31.680  -->  00:06:33.120
don't want to do that, we actually want
141

141

00:06:33.120  -->  00:06:35.330
to return null because we want to alert
142

142

00:06:35.330  -->  00:06:38.250
the main function that something didn't
143

143

00:06:38.250  -->  00:06:39.750
go right, we don't want to throw the
144

144

00:06:39.750  -->  00:06:41.340
exception but we don't want it to be
145

145

00:06:41.340  -->  00:06:43.890
business as usual, so we'll change
146

146

00:06:43.890  -->  00:06:47.900
zero to null here, null.
147

147

00:06:47.900  -->  00:06:52.410
Now when we do that, of course we'll
148

148

00:06:52.410  -->  00:06:54.720
get an error it'll say null cannot be a
149

149

00:06:54.720  -->  00:06:56.550
value of a non null type, because we're
150

150

00:06:56.550  -->  00:06:58.680
returning an int, we're not returning an
151

151

00:06:58.680  -->  00:07:00.840
int question mark, so we're not allowed
152

152

00:07:00.840  -->  00:07:03.990
to assign null to int, so we'll have to
153

153

00:07:03.990  -->  00:07:06.540
change the return type now, to nullable
154

154

00:07:06.540  -->  00:07:08.790
int and then the error goes away.
155

155

00:07:08.790  -->  00:07:10.530
Alright, so now let's go up to the main
156

156

00:07:10.530  -->  00:07:12.330
function and let's use the Elvis
157

157

00:07:12.330  -->  00:07:14.580
operator here, so if you'll remember the
158

158

00:07:14.580  -->  00:07:17.190
Elvis operator is the question mark
159

159

00:07:17.190  -->  00:07:19.770
followed by the colon and when the
160

160

00:07:19.770  -->  00:07:21.960
expression in front of the Elvis
161

161

00:07:21.960  -->  00:07:25.170
operator is null, whatever is on the
162

162

00:07:25.170  -->  00:07:27.840
right side of the Elvis operator will be
163

163

00:07:27.840  -->  00:07:30.600
used. So we saw using the Elvis operator
164

164

00:07:30.600  -->  00:07:32.820
to assign a default value when something
165

165

00:07:32.820  -->  00:07:36.000
turns out to be null. So now instead here
166

166

00:07:36.000  -->  00:07:39.480
we'll say well if we get null from get
167

167

00:07:39.480  -->  00:07:41.160
number we want to throw a different type
168

168

00:07:41.160  -->  00:07:44.550
of exception, so we want the main
169

169

00:07:44.550  -->  00:07:48.210
function to stop executing essentially
170

170

00:07:48.210  -->  00:07:50.910
and throw an exception, so we will put
171

171

00:07:50.910  -->  00:07:52.890
the Elvis operator here and we'll say
172

172

00:07:52.890  -->  00:07:55.620
throw, I'm just going to say illegal
173

173

00:07:55.620  -->  00:07:58.730
argument exception and we'll say number
174

174

00:07:58.730  -->  00:08:02.040
isn't an int, I mean this is a dumb
175

175

00:08:02.040  -->  00:08:04.950
example because what we're calling we
176

176

00:08:04.950  -->  00:08:06.630
you know we could just catch the
177

177

00:08:06.630  -->  00:08:09.210
exception up here perhaps, but I wanted
178

178

00:08:09.210  -->  00:08:10.860
to show you how you can use the Elvis
179

179

00:08:10.860  -->  00:08:12.780
operator to throw an exception instead
180

180

00:08:12.780  -->  00:08:15.600
of just assigning a default value,
181

181

00:08:15.600  -->  00:08:18.000
so before we were putting just a value here
182

182

00:08:18.000  -->  00:08:20.070
and we were using assigning it to
183

183

00:08:20.070  -->  00:08:23.010
something and if whatever is on the left
184

184

00:08:23.010  -->  00:08:24.630
hand side turned out to be null,
185

185

00:08:24.630  -->  00:08:26.430
the default value got assigned instead, well
186

186

00:08:26.430  -->  00:08:28.740
here's a different way to use it, you can
187

187

00:08:28.740  -->  00:08:31.680
check the return types of functions and
188

188

00:08:31.680  -->  00:08:33.210
then depending on what the return type
189

189

00:08:33.210  -->  00:08:36.120
is, you can do something different and in
190

190

00:08:36.120  -->  00:08:37.229
this case we're going to throw in a
191

191

00:08:37.229  -->  00:08:39.330
legal argument exception. So let's run
192

192

00:08:39.330  -->  00:08:44.010
now and we'll see that now we're getting
193

193

00:08:44.010  -->  00:08:45.510
an illegal argument exception thrown
194

194

00:08:45.510  -->  00:08:48.780
with our message, the print line does not
195

195

00:08:48.780  -->  00:08:51.510
happen because once the exception is
196

196

00:08:51.510  -->  00:08:54.060
thrown of course execution stops in the
197

197

00:08:54.060  -->  00:08:56.070
main- in the main function. Now we can
198

198

00:08:56.070  -->  00:08:57.720
also do something like the following,
199

199

00:08:57.720  -->  00:09:00.180
as I said you can use the Elvis
200

200

00:09:00.180  -->  00:09:02.130
operator in this way to check the return
201

201

00:09:02.130  -->  00:09:04.890
type of a function and then do something
202

202

00:09:04.890  -->  00:09:08.360
different, so the print line here is
203

203

00:09:08.360  -->  00:09:10.170
printing the return type of the function
204

204

00:09:10.170  -->  00:09:12.420
but if this is null, let's have it print
205

205

00:09:12.420  -->  00:09:14.850
something else and say I can't print the
206

206

00:09:14.850  -->  00:09:22.740
result. So now, if we run we'll see I'm in
207

207

00:09:22.740  -->  00:09:24.480
the finally block and then we'll say oh
208

208

00:09:24.480  -->  00:09:27.270
I can't print the result, so this is a an
209

209

00:09:27.270  -->  00:09:29.610
elegant way of handling return codes
210

210

00:09:29.610  -->  00:09:31.410
from functions that indicate that
211

211

00:09:31.410  -->  00:09:33.660
something went wrong, so instead of
212

212

00:09:33.660  -->  00:09:35.460
throwing exceptions you could just do
213

213

00:09:35.460  -->  00:09:37.290
this and then you you know you can keep
214

214

00:09:37.290  -->  00:09:39.810
on executing and everything's fine,
215

215

00:09:39.810  -->  00:09:41.490
so you can see that you can do more with
216

216

00:09:41.490  -->  00:09:43.230
the Elvis operator than just assign
217

217

00:09:43.230  -->  00:09:45.180
default values to variables when
218

218

00:09:45.180  -->  00:09:47.340
something turns out to be null, you can
219

219

00:09:47.340  -->  00:09:50.700
pretty much test anything and then do
220

220

00:09:50.700  -->  00:09:53.460
other things on the right-hand side of
221

221

00:09:53.460  -->  00:09:55.560
the operator. Now remember we briefly
222

222

00:09:55.560  -->  00:09:57.480
talked about the nothing class and I
223

223

00:09:57.480  -->  00:09:59.340
said that one use case for it is when
224

224

00:09:59.340  -->  00:10:00.780
you know a function doesn't return
225

225

00:10:00.780  -->  00:10:02.910
anything, like it's never going to return
226

226

00:10:02.910  -->  00:10:05.820
anything? For example the function might
227

227

00:10:05.820  -->  00:10:08.070
include a deliberate infinite loop and
228

228

00:10:08.070  -->  00:10:09.840
so you know it's never going to return.
229

229

00:10:09.840  -->  00:10:12.840
Well, another case in which a function
230

230

00:10:12.840  -->  00:10:15.000
doesn't return anything could be if it's
231

231

00:10:15.000  -->  00:10:17.430
always going to throw an exception for
232

232

00:10:17.430  -->  00:10:19.230
example, you might have functions you
233

233

00:10:19.230  -->  00:10:21.780
haven't implemented yet and what you've
234

234

00:10:21.780  -->  00:10:24.780
done is you've added a statement that
235

235

00:10:24.780  -->  00:10:26.760
just throws let's say an illegal
236

236

00:10:26.760  -->  00:10:28.620
argument exception whenever somebody
237

237

00:10:28.620  -->  00:10:31.650
calls that function to remind yourself that
238

238

00:10:31.650  -->  00:10:33.930
oh I haven't implemented that yet and to
239

239

00:10:33.930  -->  00:10:35.700
let other developers know that the
240

240

00:10:35.700  -->  00:10:37.260
function isn't ready for primetime yet
241

241

00:10:37.260  -->  00:10:38.430
they can't use it.
242

242

00:10:38.430  -->  00:10:40.530
So let's write a function and we'll call
243

243

00:10:40.530  -->  00:10:45.810
it fun not implemented yet and let's
244

244

00:10:45.810  -->  00:10:50.090
have it accept a string something string
245

245

00:10:50.090  -->  00:10:53.460
and we'll just say throw illegal
246

246

00:10:53.460  -->  00:10:55.410
argument exception and we'll pass the
247

247

00:10:55.410  -->  00:10:58.920
message implement me and now let's call
248

248

00:10:58.920  -->  00:11:02.700
the function, so we'll say not
249

249

00:11:02.700  -->  00:11:05.640
implemented yet and we'll pass string.
250

250

00:11:05.640  -->  00:11:12.540
I'll comment this out, let's run
251

251

00:11:12.540  -->  00:11:14.280
and we'll see that we get an exception
252

252

00:11:14.280  -->  00:11:17.460
that says implement me, what we should do
253

253

00:11:17.460  -->  00:11:19.860
here to make it absolutely clear that
254

254

00:11:19.860  -->  00:11:21.780
this function is never going to return
255

255

00:11:21.780  -->  00:11:25.940
is we could say this returns nothing
256

256

00:11:25.940  -->  00:11:28.260
because this function will never ever
257

257

00:11:28.260  -->  00:11:31.140
return anything, as the way it stands now
258

258

00:11:31.140  -->  00:11:32.670
is always just going to throw an
259

259

00:11:32.670  -->  00:11:35.790
exception, so this is one other use case
260

260

00:11:35.790  -->  00:11:38.340
for the nothing type, this is a case
261

261

00:11:38.340  -->  00:11:40.020
where you'll have a function that will
262

262

00:11:40.020  -->  00:11:42.330
never return a value. Okay, that's it for
263

263

00:11:42.330  -->  00:11:44.220
try-catch, it's not much different from
264

264

00:11:44.220  -->  00:11:45.960
Java except you can use it as an
265

265

00:11:45.960  -->  00:11:48.390
expression, even though you don't have to
266

266

00:11:48.390  -->  00:11:51.480
and we also saw a few ways that you can
267

267

00:11:51.480  -->  00:11:53.610
use the Elvis operator in conjunction
268

268

00:11:53.610  -->  00:11:58.610
with try-catch. I'll see you in the next video.
