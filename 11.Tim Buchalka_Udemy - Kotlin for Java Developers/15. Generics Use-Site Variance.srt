1
00:00:05,550 --> 00:00:08,070
OK so you've seen declarations site variants.

2
00:00:08,070 --> 00:00:10,580
Now we're going to take a look at you site variants.

3
00:00:10,770 --> 00:00:16,980
So let's say we have a bunch of car classes going to declare the car class here and I'll want to extend

4
00:00:16,980 --> 00:00:18,990
it so I'll declare it is open.

5
00:00:19,050 --> 00:00:29,070
So open class car and then we're also going to have Ford and Toyota classes all say class Toyota and

6
00:00:29,070 --> 00:00:38,750
that extends car and class Ford which also extends car.

7
00:00:39,030 --> 00:00:45,290
And now let's write a function that copies one list of cars to another this is a pretty trivial function.

8
00:00:45,300 --> 00:00:56,610
But I am going somewhere with this so will say fine copy cars and this function once a mutable list

9
00:00:56,610 --> 00:01:06,240
of car for the source and it also once a leader will Mr. list of cars for the list of cars for the destination

10
00:01:07,950 --> 00:01:16,160
and then it will say for car in source and each car to the destination.

11
00:01:16,950 --> 00:01:17,550
And that's it.

12
00:01:17,550 --> 00:01:23,850
Nothing earth shattering So all this function does is takes the source list and copies it to the destination

13
00:01:23,850 --> 00:01:24,760
list.

14
00:01:24,780 --> 00:01:28,040
So let's call this function from within the main function.

15
00:01:28,040 --> 00:01:34,140
So we'll say Well cars one equals mutable list of.

16
00:01:34,170 --> 00:01:37,220
And we'll give this a few cars.

17
00:01:37,230 --> 00:01:45,810
So we'll say car car and then we'll save all cars 2 equals and I'm going to take this one because we're

18
00:01:45,810 --> 00:01:46,980
going to give it an empty list.

19
00:01:46,980 --> 00:01:55,080
So we'll see a beautiful list of car and it'll just be an empty list and then we'll see coffee cars

20
00:01:55,080 --> 00:02:02,940
cars one cars two cars one and we don't get any errors no problems no errors.

21
00:02:03,210 --> 00:02:09,640
But now let's say that we want to call our copy car's function and do the exact same thing for Fords.

22
00:02:09,750 --> 00:02:12,760
So I'm going to copy and paste this.

23
00:02:14,340 --> 00:02:19,560
But this time I'm going to say that we want Fords.

24
00:02:19,690 --> 00:02:28,670
And so I'm going to give it a couple of Fords here Ford and Ford and we'll take Fords to here.

25
00:02:29,670 --> 00:02:41,120
And we want to amenable this to Ford to come back and will copy Ford's one to Ford's too.

26
00:02:41,400 --> 00:02:46,920
Well as you might have guessed from what we've covered with generics so far we can't do it because generic

27
00:02:46,920 --> 00:02:48,440
types are invariant.

28
00:02:48,510 --> 00:02:50,850
So the compiler is complaining.

29
00:02:50,850 --> 00:02:54,950
It wants a two readable lists here.

30
00:02:54,950 --> 00:03:00,060
Once immutable list of car for the source and a mutable list of car for the destination and we're providing

31
00:03:00,060 --> 00:03:04,170
it with a mutable list of Fords and it doesn't like that.

32
00:03:04,170 --> 00:03:08,880
And as we've covered in variant generic types are invariant.

33
00:03:09,000 --> 00:03:14,880
Now we don't want to have to create a copy car's function for every type of possible car that we could

34
00:03:14,880 --> 00:03:15,850
have.

35
00:03:15,990 --> 00:03:21,810
And all the tricks that we've looked at so far such as covariance contravariant specifying an upper

36
00:03:21,810 --> 00:03:28,140
bound in the function signature while they're all there to help us avoid this bloat and repetition.

37
00:03:28,200 --> 00:03:34,290
They let us relax the invariant taping or somewhat say to widen that so that we don't have to write

38
00:03:34,350 --> 00:03:41,130
a different version of a function like copy cars for example for every time we want to do something

39
00:03:41,130 --> 00:03:45,670
with a different type we can use one function for related types.

40
00:03:45,690 --> 00:03:55,100
So instead of using car let's use T in the copy car signature so we'll say OK let's use t so fun t.

41
00:03:55,110 --> 00:04:03,240
Copy cars and we want immutable list of T here and a mutable list of T here.

42
00:04:03,480 --> 00:04:04,720
And that works.

43
00:04:04,860 --> 00:04:12,870
We can now call this function for both cars and Fords now because Fords are cars.

44
00:04:13,080 --> 00:04:14,700
We also want to be able to do this.

45
00:04:14,700 --> 00:04:24,000
We want to be able to say copy cars and we want to copy our for it's into our cars too but we can't

46
00:04:24,000 --> 00:04:28,500
do it because he has to be the same for everything.

47
00:04:28,500 --> 00:04:36,720
So the source type and the destination type have to be the same and here they're not we're passing immutable

48
00:04:36,720 --> 00:04:44,160
list of Ford for the source but we're passing immutable list of car for the destination but we should

49
00:04:44,160 --> 00:04:46,500
be able to do it because we can do this.

50
00:04:46,500 --> 00:04:57,500
We can say Val cars three and we'll make it immutable list mutable list of car and we can give it a

51
00:04:57,500 --> 00:05:03,950
mutable list of Fords.

52
00:05:03,960 --> 00:05:07,550
That's not a problem because Fords are also cars.

53
00:05:07,550 --> 00:05:11,150
So if we can do this why can't we pass do this.

54
00:05:11,150 --> 00:05:17,120
Why can't we say well hey we're copying Fords to list of Fords to a list of cars so we should be able

55
00:05:17,120 --> 00:05:17,970
to do that.

56
00:05:18,080 --> 00:05:25,100
So just like we can add any type of instance to a list of any we should be able to create a list and

57
00:05:25,100 --> 00:05:30,200
assign it to a list of its superclass type and we can.

58
00:05:30,470 --> 00:05:37,010
But how can we get a similar thing to work for our function so that it lets us do this so we can give

59
00:05:37,010 --> 00:05:41,280
it a forward list and say copy this into a list of car.

60
00:05:41,300 --> 00:05:46,900
Now setting an upper bound won't help us here because T has to be the same if we set an upper bound

61
00:05:46,910 --> 00:05:48,620
if we were to add an upper bound here.

62
00:05:48,620 --> 00:05:55,320
Car is going to want you know it's still going to want source and destination to be both be car or both

63
00:05:55,340 --> 00:05:57,050
b Fords or both B.

64
00:05:57,060 --> 00:05:59,590
Toyota's but let's try it.

65
00:05:59,870 --> 00:06:06,100
So we'll say you know we'll take car or any of its subclasses here.

66
00:06:06,110 --> 00:06:08,110
But as you can see it doesn't work.

67
00:06:08,120 --> 00:06:13,550
So let's take a closer look at our function here and let's say that we only read the original list and

68
00:06:13,550 --> 00:06:16,300
we only write the destination list.

69
00:06:16,370 --> 00:06:21,680
So this function doesn't change the source and it doesn't read the destination.

70
00:06:21,680 --> 00:06:23,160
So think about this.

71
00:06:23,240 --> 00:06:28,500
Where have we heard that before that if you do something you can only read but you can't.

72
00:06:28,500 --> 00:06:29,270
Right.

73
00:06:29,390 --> 00:06:33,040
Or if you do something you can only write but you can't read.

74
00:06:33,050 --> 00:06:39,900
Well that sounds like some of the restrictions around using covariance and contravariant.

75
00:06:39,980 --> 00:06:46,370
So perhaps we can use covariance and contravariant here just with an individual function rather than

76
00:06:46,370 --> 00:06:54,050
doing it at a declaration site like on an interface or a class because we meet the requirements for

77
00:06:54,470 --> 00:06:56,760
covariance and Koncz of variance.

78
00:06:56,780 --> 00:07:03,920
The destination list is only written so that sounds like it could be contravariant and the source list

79
00:07:03,920 --> 00:07:04,910
is only read.

80
00:07:04,910 --> 00:07:07,400
So that sounds like it could be covariant.

81
00:07:07,580 --> 00:07:14,780
So in this case we want the original list the source lists to be a car or any of its subclasses.

82
00:07:14,780 --> 00:07:17,290
And that also sounds like covariance.

83
00:07:17,360 --> 00:07:19,790
So we don't write the original list.

84
00:07:19,790 --> 00:07:26,300
We only read it and we want the t here to be able to be a car or any of its subclasses.

85
00:07:26,390 --> 00:07:27,760
That's covariance.

86
00:07:27,890 --> 00:07:31,340
So let's try adding out to t here.

87
00:07:31,340 --> 00:07:40,100
Let's try making just this one parameter here covariant and see if that helps us and boom our error

88
00:07:40,100 --> 00:07:41,410
went away.

89
00:07:41,450 --> 00:07:50,480
So now we can pass a car or any subclass of car to the copy car's function as the source of the coffee.

90
00:07:50,480 --> 00:07:56,390
So what we've done here is we've used use site variants because a car class and its subclasses there

91
00:07:56,390 --> 00:07:58,190
are not covariant.

92
00:07:58,190 --> 00:08:02,710
We have not made any car class or any of its subclasses covariant.

93
00:08:02,810 --> 00:08:07,840
So we're not using declarations site covariance we're using you cite covariance.

94
00:08:07,850 --> 00:08:14,540
We're making a parameter type covariant and we can do this when the implementation of a function meets

95
00:08:14,540 --> 00:08:18,650
the requirements for making something covariant or contravariant.

96
00:08:18,650 --> 00:08:21,820
Now as I said this could also be in.

97
00:08:22,430 --> 00:08:25,160
That would work but we don't really need that here.

98
00:08:25,280 --> 00:08:32,730
So I'm going to take that out now doing this sort of thing you cite a variance in contravariant.

99
00:08:32,870 --> 00:08:37,960
Or rather you cite covariant and contravariant is also called type projection.

100
00:08:38,000 --> 00:08:43,370
And as I said you can use the same technique to make something contravariant and you can do the parameter

101
00:08:43,370 --> 00:08:44,840
types so as we've seen.

102
00:08:44,840 --> 00:08:47,920
But you can also do it with function return types.

103
00:08:47,930 --> 00:08:53,780
Now a good use for this is when you're working with a third party class that's invariant and you want

104
00:08:53,780 --> 00:08:58,810
to write functions that use instances of the class any covariant way.

105
00:08:58,820 --> 00:09:02,210
Now you say variants is equivalent to wildcards in Java.

106
00:09:02,210 --> 00:09:04,160
So in Java we can do the following.

107
00:09:04,160 --> 00:09:05,720
I'll just do that down here.

108
00:09:05,720 --> 00:09:08,750
It'll cause compiler errors but we can do something like this in Java.

109
00:09:08,750 --> 00:09:17,810
We can say extends car and that's covariance because you're saying you'll accept anything and it's subclasses

110
00:09:17,810 --> 00:09:21,010
so you'll accept car and anything that extends car.

111
00:09:21,110 --> 00:09:25,370
Now you wouldn't want to create a list variable of this type because you wouldn't be able to add anything

112
00:09:25,370 --> 00:09:30,510
to it because remember you can't write to a covariant instance.

113
00:09:30,560 --> 00:09:36,680
So you wouldn't in Java code use this as a variable type but where you will see it a lot in Java is

114
00:09:36,680 --> 00:09:45,120
in method declarations and then in Java the following corresponds to contravariant is if we say lefse

115
00:09:46,490 --> 00:09:53,250
super car that's contravariant because here you're saying all except Carr and any of its superclasses.

116
00:09:53,420 --> 00:09:58,940
But once again you wouldn't want to use this to declare a variable of that type because you wouldn't

117
00:09:58,940 --> 00:10:00,980
be able to read it.

118
00:10:00,980 --> 00:10:07,750
So where you're going to see the use of wildcards like this is in method declarations because Java doesn't

119
00:10:07,750 --> 00:10:14,350
have declarations site variants there are classes in the JDK that use generics and use say variants

120
00:10:14,350 --> 00:10:20,050
on all the methods in the class in cotland if you want all the methods to be covariant or contravariant

121
00:10:20,050 --> 00:10:26,620
you just use declaration site covariance or contravariant the way that we did it with our garden class

122
00:10:26,890 --> 00:10:29,260
and our flower care interface.

123
00:10:29,260 --> 00:10:34,780
But in Java you'd have to do it on every member Massad and that can make for some cluttered class and

124
00:10:34,780 --> 00:10:36,550
interface definitions.

125
00:10:36,670 --> 00:10:41,730
All right so that's covariance and contravariant both declarations site and you site.

126
00:10:41,740 --> 00:10:44,430
And that's it for generics.

127
00:10:44,440 --> 00:10:46,000
I'll see you in the next video.
