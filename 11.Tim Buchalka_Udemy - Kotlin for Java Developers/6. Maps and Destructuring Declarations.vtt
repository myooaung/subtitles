WEBVTT
1
00:00:05.420 --> 00:00:05.860
OK.

2
00:00:05.870 --> 00:00:08.210
So now let's take a look at maps now.

3
00:00:08.210 --> 00:00:12.670
Just as with lists you can have mutable and immutable maps.

4
00:00:12.770 --> 00:00:17.930
So we're going to create a car class similar to what we've used before so we can work with maps so we'll

5
00:00:17.960 --> 00:00:31.450
say class car and we'll give it a string property a model property and a your property.

6
00:00:32.990 --> 00:00:35.180
So now let's create an immutable map.

7
00:00:35.180 --> 00:00:39.390
Now remember that maps one to key and a value.

8
00:00:39.590 --> 00:00:46.290
So we'll save Val immutable map equals map of.

9
00:00:46.400 --> 00:00:51.170
And now we have to provide both a key and a value so we're going to say we want a map.

10
00:00:51.170 --> 00:01:02.330
The key of one to the following car it'll be green Toyota and it will have a year of 2015

11
00:01:05.840 --> 00:01:11.500
and then we want to map the key to to a car that's red.

12
00:01:12.020 --> 00:01:23.270
It's a Ford and it has the year 2016 and we'll add one more car will map the key three to a silver Honda

13
00:01:24.170 --> 00:01:27.030
that has the year 2013.

14
00:01:27.260 --> 00:01:30.270
Now this syntax might look a little weird.

15
00:01:30.350 --> 00:01:34.540
We use two to associate the key with the value.

16
00:01:34.550 --> 00:01:40.490
So as I said the key with the value one will map to the green Toyota the key with the value to will

17
00:01:40.490 --> 00:01:45.650
map to the red Ford and the key with the value 3 will map to the silver Honda.

18
00:01:45.650 --> 00:01:50.830
No I didn't include the type parameters because the compiler can infer them but I'm going to add them

19
00:01:50.840 --> 00:01:55.850
just for clarity and I'll do that occasionally in this section when we're working with maps.

20
00:01:55.850 --> 00:01:58.210
It's redundant and they could be removed.

21
00:01:58.220 --> 00:02:04.790
But for this section I'll occasionally include them it doesn't change the code that's generated under

22
00:02:04.790 --> 00:02:07.520
the covers so I'll add them now.

23
00:02:08.210 --> 00:02:13.890
So I'm going to say that we have an int key and a car value.

24
00:02:14.060 --> 00:02:20.150
OK so let's print the map and also the class so we can see what the class of the instance is that we're

25
00:02:20.150 --> 00:02:22.090
getting from the map of function.

26
00:02:22.160 --> 00:02:30.890
So we'll see a print line and you will map that Java class and print line immutable map.

27
00:02:30.890 --> 00:02:32.090
And let's go ahead and run

28
00:02:35.090 --> 00:02:39.800
and we'll see that we're getting a Javid you till linked Tasche map.

29
00:02:39.800 --> 00:02:46.040
Now if we look at the printout of the map we get the key value and then we're getting the instance reference

30
00:02:46.040 --> 00:02:48.890
because we haven't overridden two string here.

31
00:02:48.890 --> 00:02:54.530
Now I could make this a data class I'm not going to do that because I want it to remain a class for

32
00:02:54.530 --> 00:02:55.190
now.

33
00:02:55.370 --> 00:03:00.110
But if we wanted the nice print out here that gives us all the core values we'd have to overwrite to

34
00:03:00.110 --> 00:03:05.270
string in here and I'm not going to do that for now we'll just leave it as it is but we can see that

35
00:03:05.270 --> 00:03:08.910
we have three cars and key values one two and three.

36
00:03:09.110 --> 00:03:16.280
OK so now let's create a mutable map so I'll say Val mutable math equals.

37
00:03:16.310 --> 00:03:23.090
And this time will say mutable map of and this time will provide a string and a car.

38
00:03:23.120 --> 00:03:30.730
We want the key of John's car and we're going to map that to a car that's red.

39
00:03:31.410 --> 00:03:36.970
It's a Range Rover and it has the year 2010.

40
00:03:38.060 --> 00:03:48.530
And we'll just add one more will say we want to map Jane's car to a car that is blue Hyundai or I'm

41
00:03:48.530 --> 00:03:53.020
not sure how you say that actually and 2012.

42
00:03:53.510 --> 00:03:58.040
So that's our immutable map and let's do the same thing we did for our immutable line will print out

43
00:03:58.040 --> 00:04:03.920
the Java class and we'll print the math itself.

44
00:04:04.130 --> 00:04:05.410
So let's go ahead and run

45
00:04:09.150 --> 00:04:13.800
and you'll see that we also got a link Tasche map for the meatball map.

46
00:04:13.800 --> 00:04:19.890
So in both cases the table map and immutable map we get a linked hash map.

47
00:04:19.890 --> 00:04:28.080
Now the reason for that is that if you're going to create a map using map or mutable map of Cartland

48
00:04:28.080 --> 00:04:36.570
likes to have a linked hash map because link Tasche maps have a predictable iteration order and Cartland

49
00:04:36.570 --> 00:04:42.220
once this predictable order so that you can easily convert from a list to a set to a map.

50
00:04:42.240 --> 00:04:45.630
So that's why it prefers the linked hash map class.

51
00:04:45.630 --> 00:04:49.930
But let's say you don't want to linked hash map you want a hash map.

52
00:04:50.160 --> 00:04:56.460
Well in that case just like when we wanted an array list you ask for a hash map.

53
00:04:56.460 --> 00:05:03.580
So let's change this here to hash map of.

54
00:05:03.720 --> 00:05:05.660
And now let's run again.

55
00:05:08.330 --> 00:05:12.110
And now you'll see that you have a Javid don't you till date hash map.

56
00:05:12.110 --> 00:05:13.960
Now this is a immutable math.

57
00:05:13.970 --> 00:05:24.410
We can add to it so we could say medieval math got put in will this time we'll say let's say Mary's

58
00:05:24.410 --> 00:05:26.010
car.

59
00:05:26.450 --> 00:05:31.040
And Mary has a red Corvette.

60
00:05:34.070 --> 00:05:35.750
From 1965

61
00:05:38.090 --> 00:05:39.710
and you'll see that we don't get any errors.

62
00:05:39.710 --> 00:05:46.970
Now notice the different syntax here you have to provide a comma because the put function is expecting

63
00:05:46.970 --> 00:05:48.000
two arguments.

64
00:05:48.050 --> 00:05:51.830
So you don't use two here if we tried to use two.

65
00:05:52.020 --> 00:05:53.030
We get an error.

66
00:05:56.080 --> 00:05:57.770
So there we go.

67
00:05:57.790 --> 00:06:02.840
So if you are going to use a hash map it's always going to be mutable.

68
00:06:03.070 --> 00:06:10.540
OK so now that we've just had a quick look at maps we can talk about destructuring declarations.

69
00:06:10.540 --> 00:06:17.590
So remember I mentioned a pair class in Cortland we looked at that when we were looking at when we were

70
00:06:17.590 --> 00:06:23.410
trying to create a list from two lists and one of the functions we tried was Ziph and we discovered

71
00:06:23.440 --> 00:06:25.690
that we got a list of pairs.

72
00:06:25.720 --> 00:06:31.120
So let's just briefly revisit this class and you'll understand why we're doing this in a minute.

73
00:06:31.150 --> 00:06:40.460
So let's say we have a vowel pair and we'll give it the pair the integer 10 and the string 10.

74
00:06:40.480 --> 00:06:46.210
So if we want to get at these values and assign each of them to a different variable we can go like

75
00:06:46.210 --> 00:06:46.600
this.

76
00:06:46.600 --> 00:06:54.080
We can say Val first value equals paradox first and we can save Val.

77
00:06:54.160 --> 00:06:57.280
Second value equals Peridot second.

78
00:06:57.280 --> 00:07:00.620
That's not a problem but we can also do the following.

79
00:07:00.700 --> 00:07:07.090
And I'm going to comment these out now stead of doing it like this where we're explicitly doing two

80
00:07:07.090 --> 00:07:09.430
assignments we can save now.

81
00:07:09.850 --> 00:07:14.900
First value second value equals pair.

82
00:07:15.070 --> 00:07:21.140
And what this will do is it will take the Peridot first and assign it to first value and the Peridot

83
00:07:21.160 --> 00:07:23.560
second and assign it to the second value.

84
00:07:23.560 --> 00:07:29.750
What we've done here on this line is called a destructuring declaration.

85
00:07:29.830 --> 00:07:33.230
We've taken an instance and structured it.

86
00:07:33.220 --> 00:07:37.020
We've distributed the public member values to different variables.

87
00:07:37.030 --> 00:07:40.810
First and second are public in the pear class.

88
00:07:40.810 --> 00:07:46.810
So we've taken the public values and we've distributed them into different variables so if we now print

89
00:07:48.430 --> 00:07:52.240
first value and we print second value

90
00:07:55.390 --> 00:07:56.200
and we run

91
00:08:00.150 --> 00:08:02.520
we'll see that we get 10 and 10.

92
00:08:02.530 --> 00:08:08.980
So we have indeed distributed the values of pairs public members into different variables.

93
00:08:08.980 --> 00:08:15.910
Now getting back to maps now let's say we want to iterate over our mutable map while we can do it as

94
00:08:15.910 --> 00:08:17.510
follows.

95
00:08:18.190 --> 00:08:31.330
We can say for entry in mutable map and we can say print the entries key and Corinthians SRI's value

96
00:08:32.110 --> 00:08:33.670
that works in if we run

97
00:08:36.540 --> 00:08:38.740
we'll see that we get John's car.

98
00:08:38.970 --> 00:08:47.100
Actually Mary's car for the key and the car instance reference here John's car and Jane's car.

99
00:08:47.310 --> 00:08:51.070
But if we have her over entry now we'll see there is a.

100
00:08:51.330 --> 00:08:56.340
Not sure if we can see it but there's a light gray line here and that's intelligence kind of prodding

101
00:08:56.340 --> 00:08:59.390
us and saying you know I might have a hint for you.

102
00:08:59.580 --> 00:09:04.630
And if we have her our cursor over it I'll say use a destructuring declaration.

103
00:09:04.650 --> 00:09:06.120
So let's go ahead and do that.

104
00:09:06.120 --> 00:09:09.900
So instead of doing it this way we can do the following.

105
00:09:09.900 --> 00:09:20.360
We can replace entry with key and value and then we can just reference them directly inside.

106
00:09:20.640 --> 00:09:26.910
So here we're doing the same thing we were doing here we're taking public members and we're distributing

107
00:09:26.910 --> 00:09:30.360
them to individual variables and we could call this anything.

108
00:09:30.360 --> 00:09:35.130
I mean we could call this KNTV doesn't you know it doesn't have to be key and value

109
00:09:37.630 --> 00:09:38.570
.

110
00:09:39.680 --> 00:09:43.680
So let's run this now and we'll see the exact same thing we just saw.

111
00:09:44.330 --> 00:09:45.470
And we do.

112
00:09:45.710 --> 00:09:52.870
So once again we've just structured a map entry in this case into its key and its value.

113
00:09:52.880 --> 00:09:54.610
Now how does this happen.

114
00:09:54.620 --> 00:09:58.490
How do the structuring declarations work while you don't get them for free.

115
00:09:58.490 --> 00:10:04.700
Out of the box if you want to be able to structure a class in this way you have to implement what's

116
00:10:04.700 --> 00:10:15.910
called component functions and both the pair class and the map entry class have implemented these functions.

117
00:10:15.980 --> 00:10:19.260
So let's do that for our car class.

118
00:10:19.280 --> 00:10:23.480
Can we use our car class right now in a destructuring declaration.

119
00:10:23.480 --> 00:10:25.070
Well let's give it a shot.

120
00:10:25.340 --> 00:10:28.540
So we'll say we'll create a new car.

121
00:10:28.610 --> 00:10:33.940
So we'll say now car equals car.

122
00:10:34.450 --> 00:10:37.050
It's blue.

123
00:10:37.070 --> 00:10:39.190
We'll have another Corvette.

124
00:10:40.550 --> 00:10:45.350
And at and on we'll say 1959 I don't even know there probably was a Corvette in 1959 but I don't know

125
00:10:45.350 --> 00:10:47.060
much about cars so if there wasn't.

126
00:10:47.060 --> 00:10:48.120
Don't yell at me.

127
00:10:48.170 --> 00:10:50.240
So can we structure this car now.

128
00:10:50.240 --> 00:11:05.600
Can we do something that says like Val color model year equals car and we can't all say we need a component

129
00:11:05.600 --> 00:11:10.990
one function a component to function and a component three function.

130
00:11:11.000 --> 00:11:16.370
So as I said you don't get the destructuring declaration functionality out of the box.

131
00:11:16.400 --> 00:11:20.220
You have to implement what's called the component functions.

132
00:11:20.540 --> 00:11:23.120
So let's go ahead and do that.

133
00:11:23.270 --> 00:11:28.910
Let's go down to our car class here and let's say actually we're going to use the key we have to use

134
00:11:28.910 --> 00:11:31.090
the keyword operator in front of them.

135
00:11:31.120 --> 00:11:39.550
Now let's say fine component line and we want that to equal color analyst say operator.

136
00:11:39.880 --> 00:11:42.890
One component too.

137
00:11:44.600 --> 00:11:52.990
We want that to equal the model and we want operator one component three to equal the year.

138
00:11:53.000 --> 00:11:56.850
So now if we go up here we'll see that we're not getting an error any more.

139
00:11:57.020 --> 00:11:58.800
So let's run this now.

140
00:11:59.210 --> 00:12:03.250
Actually let's first let's print the color.

141
00:12:03.260 --> 00:12:15.430
I'll put this all into one string color equals color model equals model and the year equals year end

142
00:12:15.440 --> 00:12:16.020
quote.

143
00:12:16.100 --> 00:12:17.310
So let's run now.

144
00:12:20.510 --> 00:12:26.250
We'll see color equals blue model ECOs Corvette and your equals 1959.

145
00:12:26.250 --> 00:12:31.620
So when you use structuring the compiler will call the component function so it's going to start with

146
00:12:31.620 --> 00:12:33.130
component 1.

147
00:12:33.240 --> 00:12:38.600
So the first variable you specified is going to get the result of component 1.

148
00:12:38.640 --> 00:12:44.160
The second variable you specified will get the result of component to the third one will get the result

149
00:12:44.160 --> 00:12:51.620
of component 3 and you can keep going if you want and that's all there is to making a class deconstructive

150
00:12:51.620 --> 00:12:51.810
all.

151
00:12:51.810 --> 00:12:55.200
Now of course the properties have to be public.

152
00:12:55.350 --> 00:12:59.710
So if you had private properties they can't participate in the destructuring.

153
00:12:59.910 --> 00:13:04.890
So now that we've done this for our car class why don't we go back to the para class and take a look

154
00:13:04.890 --> 00:13:07.100
at how Peyre has done it.

155
00:13:07.140 --> 00:13:11.670
So right here ologists right click go to declaration.

156
00:13:11.670 --> 00:13:21.680
And here we are in the class and let's find the component functions and there aren't many.

157
00:13:21.870 --> 00:13:25.360
Here is pair and then here is triple.

158
00:13:26.080 --> 00:13:27.160
So what's going on.

159
00:13:27.160 --> 00:13:32.860
I just said that for this destructuring declaration functionality to work you have to implement the

160
00:13:32.860 --> 00:13:34.520
component and functions.

161
00:13:34.630 --> 00:13:38.020
But the pair class doesn't have these functions so how is it working.

162
00:13:38.020 --> 00:13:45.630
Well let's go back up to the declaration of the class and you'll notice something about this class.

163
00:13:45.670 --> 00:13:47.840
It's a data class.

164
00:13:47.980 --> 00:13:54.820
And when we looked at data classes I said that in addition to the functions like equals and to string

165
00:13:54.820 --> 00:13:59.980
that you get for free they also get what's needed to do the structuring declaration.

166
00:13:59.980 --> 00:14:06.730
So in other words you don't have to explicitly write the component end functions for data classes.

167
00:14:06.730 --> 00:14:09.040
This is another thing that they get for free.

168
00:14:09.100 --> 00:14:14.800
And so that's why we don't see a component one and any component to function in here.

169
00:14:14.950 --> 00:14:18.010
It's a data class so it gets in for free.

170
00:14:18.010 --> 00:14:24.400
So let's go back to our car class and if we were to make this a data class which would make sense for

171
00:14:24.400 --> 00:14:29.420
this class because it's not doing anything we can get rid of these functions.

172
00:14:29.440 --> 00:14:30.790
So let's go ahead and do that.

173
00:14:30.790 --> 00:14:32.310
We'll make it a data class.

174
00:14:32.350 --> 00:14:39.070
And you'll notice as soon as we do that the compiler starts complaining and we're going to get rid of

175
00:14:39.070 --> 00:14:42.060
these and everything's good again.

176
00:14:42.070 --> 00:14:45.990
And our destructuring is still working.

177
00:14:46.030 --> 00:14:46.990
So if we run

178
00:14:50.570 --> 00:14:55.130
everything still works here we've got our printout from here.

179
00:14:55.160 --> 00:15:00.500
So that was just a short detour to show you how destructuring declarations work and how to use them

180
00:15:00.500 --> 00:15:06.950
and I did this detour to show you how you can use them when you are looping through a collection that

181
00:15:06.950 --> 00:15:08.860
has a key and a value.

182
00:15:09.140 --> 00:15:13.710
And of course the good news is data classes get them for free.

183
00:15:13.730 --> 00:15:21.680
Now I'm going to reverse the changes I did here so that you have this example in the source code and

184
00:15:21.680 --> 00:15:23.730
that's it right now for maps.

185
00:15:23.790 --> 00:15:25.730
They're not really that different from Java.

186
00:15:25.730 --> 00:15:31.640
You've seen how you can declare them you've seen how you can loop through them and I'll let you explore

187
00:15:31.640 --> 00:15:34.280
the rest of the map class on your own.

188
00:15:34.280 --> 00:15:35.950
Next we're going to look at sets.
