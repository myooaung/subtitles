1
1

00:00:00,490  -->  00:00:03,407
(electronic chime)
2

2

00:00:05,460  -->  00:00:07,900
<v Sarah>Alright, so now I'm going to convert</v>
3

3

00:00:07,900  -->  00:00:11,940
the text adventure application from Java to Kotlin.
4

4

00:00:11,940  -->  00:00:14,940
Now this is meant to give you a taste of Kotlin
5

5

00:00:14,940  -->  00:00:18,130
compared to Java, so I'm not going to explain
6

6

00:00:18,130  -->  00:00:21,540
in detail what I'm going because everything I do
7

7

00:00:21,540  -->  00:00:23,080
is covered in the course.
8

8

00:00:23,080  -->  00:00:26,150
In fact, at the end of the course we're going to revisit
9

9

00:00:26,150  -->  00:00:29,520
the converted application and by that time
10

10

00:00:29,520  -->  00:00:31,850
you'll be able to explain all the code
11

11

00:00:31,850  -->  00:00:36,450
and also understand why I made some of the choices I did.
12

12

00:00:36,450  -->  00:00:39,110
So grab your favourite beverage, sit back,
13

13

00:00:39,110  -->  00:00:40,740
and just watch.
14

14

00:00:40,740  -->  00:00:43,220
Now if you don't understand anything,
15

15

00:00:43,220  -->  00:00:45,600
just mentally file away your questions
16

16

00:00:45,600  -->  00:00:47,360
and wait until you've watched the videos
17

17

00:00:47,360  -->  00:00:49,710
later in the course that cover the topic,
18

18

00:00:49,710  -->  00:00:52,830
because as I said, everything I'm going to do
19

19

00:00:52,830  -->  00:00:57,050
in this video is covered in the course and a lot more.
20

20

00:00:57,050  -->  00:01:00,670
So don't worry if you don't understand anything right now,
21

21

00:01:00,670  -->  00:01:02,190
just file away your question
22

22

00:01:02,190  -->  00:01:04,930
and it will be covered in the course.
23

23

00:01:04,930  -->  00:01:07,300
So I've already created a Kotlin project
24

24

00:01:07,300  -->  00:01:10,810
and we'll go over how to do that in the next section,
25

25

00:01:10,810  -->  00:01:13,950
and I've copied our two data files into it.
26

26

00:01:13,950  -->  00:01:18,950
Now I have made two changes to the locations_big.txt file.
27

27

00:01:21,020  -->  00:01:24,620
The first change I've made is I changed the delimiter
28

28

00:01:24,620  -->  00:01:27,450
from a comma to this weird looking quote.
29

29

00:01:27,450  -->  00:01:29,650
I don't know actually what this symbol is called,
30

30

00:01:29,650  -->  00:01:32,289
but it's located on the same key as the tilde
31

31

00:01:32,289  -->  00:01:36,090
and that's usually in the upper left corner
32

32

00:01:36,090  -->  00:01:37,670
of an English keyboard.
33

33

00:01:37,670  -->  00:01:38,960
Now why did I do that?
34

34

00:01:38,960  -->  00:01:43,900
Well I did it because descriptions can contain commas.
35

35

00:01:43,900  -->  00:01:47,950
And when I do the conversion I don't want to use a scanner
36

36

00:01:47,950  -->  00:01:52,950
to read the file and to parse the input.
37

37

00:01:53,220  -->  00:01:56,830
I want to be able to use a Kotlin extension function
38

38

00:01:56,830  -->  00:01:58,797
and we'll cover extension functions in the course
39

39

00:01:58,797  -->  00:02:01,750
and I want to be able to use one of those
40

40

00:02:01,750  -->  00:02:03,370
to read in the data.
41

41

00:02:03,370  -->  00:02:06,530
And then I just want to use the string.split method
42

42

00:02:06,530  -->  00:02:10,240
to actually get the two pieces of information.
43

43

00:02:10,240  -->  00:02:13,530
But if I had kept this delimiter's comma
44

44

00:02:13,530  -->  00:02:16,480
I wouldn't be able to do that because a lot of the
45

45

00:02:16,480  -->  00:02:18,530
descriptions have a comma in them so that would
46

46

00:02:18,530  -->  00:02:21,520
obviously throw a wrench into the whole process.
47

47

00:02:21,520  -->  00:02:23,850
Here's one right here with a comma in it,
48

48

00:02:23,850  -->  00:02:27,740
so if I use string.split and then didn't go through
49

49

00:02:27,740  -->  00:02:31,560
the hassle of having to rejoin all the tokens
50

50

00:02:31,560  -->  00:02:35,850
after the first one together, I'd be cutting off
51

51

00:02:35,850  -->  00:02:37,420
my descriptions prematurely.
52

52

00:02:37,420  -->  00:02:40,621
So I decided instead to go through and change the delimiter
53

53

00:02:40,621  -->  00:02:42,840
to something else.
54

54

00:02:42,840  -->  00:02:44,510
So I just wanted to point that out to you
55

55

00:02:44,510  -->  00:02:47,790
that in the locations_big.txt file
56

56

00:02:47,790  -->  00:02:49,420
I changed that delimiter.
57

57

00:02:49,420  -->  00:02:51,960
I don't have to do it in directions_big
58

58

00:02:51,960  -->  00:02:54,550
because none of the pieces of information
59

59

00:02:54,550  -->  00:02:58,350
will contain a comma, so I just did it for this file.
60

60

00:02:58,350  -->  00:03:00,910
Now the second change I made was I changed
61

61

00:03:00,910  -->  00:03:03,740
you are sitting in front of a computer learning Java
62

62

00:03:03,740  -->  00:03:07,740
to you are learning Kotlin, and I think that change
63

63

00:03:07,740  -->  00:03:09,680
is self-explanatory.
64

64

00:03:09,680  -->  00:03:12,560
So with that out of the way, let's get going.
65

65

00:03:12,560  -->  00:03:15,200
So the first thing I'm gonna do is create a package
66

66

00:03:16,080  -->  00:03:19,020
for my Kotlin code, Kotlin uses packages
67

67

00:03:19,020  -->  00:03:20,580
just like Java does, so we'll say
68

68

00:03:20,580  -->  00:03:23,760
Academy.learnprogramming.,
69

69

00:03:23,760  -->  00:03:25,593
and I'll call it text adventure.
70

70

00:03:28,020  -->  00:03:32,020
And them I'm going to convert the location class.
71

71

00:03:32,020  -->  00:03:33,930
You'll recall that this class stores
72

72

00:03:33,930  -->  00:03:36,070
the information for the location.
73

73

00:03:36,070  -->  00:03:38,610
So I'll say new common file or class
74

74

00:03:38,610  -->  00:03:40,870
and I'll just call that location.
75

75

00:03:40,870  -->  00:03:44,880
Now I'm going to create what's called a data class,
76

76

00:03:44,880  -->  00:03:49,530
so I'll say data class, I'm going to call it location,
77

77

00:03:49,530  -->  00:03:54,030
and we have three properties in our location class.
78

78

00:03:54,030  -->  00:03:57,340
We have the location ID which is an int,
79

79

00:03:57,340  -->  00:03:59,410
we have the description which is a string,
80

80

00:03:59,410  -->  00:04:01,820
and then we have the exits map.
81

81

00:04:01,820  -->  00:04:05,660
I'm going to declare two of those properties up front
82

82

00:04:05,660  -->  00:04:08,600
as part of this class's constructor,
83

83

00:04:08,600  -->  00:04:10,870
and I'm going to declare the exits map separately.
84

84

00:04:10,870  -->  00:04:15,870
So I'm going to say val, locationID and that's an int.
85

85

00:04:16,680  -->  00:04:20,053
I'm going to say val description and that's a string.
86

86

00:04:21,640  -->  00:04:23,800
And then inside the class I'm going
87

87

00:04:23,800  -->  00:04:26,550
to declare our exits map.
88

88

00:04:26,550  -->  00:04:28,580
I want this to be a mutable map
89

89

00:04:28,580  -->  00:04:31,900
because we want to be able to add exits to it,
90

90

00:04:31,900  -->  00:04:36,110
so I'm gonna say mutableMapOf, the key is the string,
91

91

00:04:36,110  -->  00:04:41,110
the direction letter and the value is the location
92

92

00:04:41,830  -->  00:04:43,103
destination ID.
93

93

00:04:44,490  -->  00:04:47,840
So now I'll do what we did in Java and when an instance
94

94

00:04:47,840  -->  00:04:52,380
of this class is constructed, I'll add the Q exit
95

95

00:04:52,380  -->  00:04:53,350
to the map.
96

96

00:04:53,350  -->  00:04:55,410
So I'm going to do that in an init block
97

97

00:04:55,410  -->  00:05:00,300
and I'll say exits, Q, because the direction letter
98

98

00:05:00,300  -->  00:05:02,950
is the key, equals zero.
99

99

00:05:02,950  -->  00:05:06,160
That's the destination location ID.
100

100

00:05:06,160  -->  00:05:09,100
And then the only other thing I have to do in this class
101

101

00:05:09,100  -->  00:05:12,470
is add a function that adds an exit to the map
102

102

00:05:12,470  -->  00:05:14,160
as we're reading our data files.
103

103

00:05:14,160  -->  00:05:17,560
So I'll say add exit and this will accept
104

104

00:05:17,560  -->  00:05:20,210
the direction which is a string
105

105

00:05:20,210  -->  00:05:23,000
and it also wants the destination location ID,
106

106

00:05:23,000  -->  00:05:27,683
so I'll say destinationID and that's an int.
107

107

00:05:29,030  -->  00:05:33,190
And then what that will do is exit and we want
108

108

00:05:33,190  -->  00:05:36,380
the direction here, so that will be the direction
109

109

00:05:36,380  -->  00:05:40,390
as the key equals, and the destinationID.
110

110

00:05:41,920  -->  00:05:43,830
And that's it for the locations class.
111

111

00:05:43,830  -->  00:05:45,880
So I'm doing exactly what we did in Java,
112

112

00:05:45,880  -->  00:05:48,470
I've declared the three properties.
113

113

00:05:48,470  -->  00:05:53,370
I'm adding the Q exit to every location,
114

114

00:05:53,370  -->  00:05:55,850
and then there's a function here that accepts
115

115

00:05:55,850  -->  00:05:59,430
a direction letter and a destination ID
116

116

00:05:59,430  -->  00:06:03,500
and it adds the destination ID to the map
117

117

00:06:03,500  -->  00:06:06,260
with the key of the direction letter.
118

118

00:06:06,260  -->  00:06:08,370
So that's our location class.
119

119

00:06:08,370  -->  00:06:11,960
Alright, so now let's convert the locations class
120

120

00:06:11,960  -->  00:06:13,730
and you'll recall that this is a class
121

121

00:06:13,730  -->  00:06:17,690
that reads in the two data files, creates all the locations
122

122

00:06:17,690  -->  00:06:20,910
instances and adds all the exits.
123

123

00:06:20,910  -->  00:06:24,200
So let me add a new Kotlin file for that,
124

124

00:06:24,200  -->  00:06:27,620
so I'll say new Kotlin file or class
125

125

00:06:27,620  -->  00:06:29,203
and we'll say locations.
126

126

00:06:30,440  -->  00:06:32,300
And in this file I'm just going to create
127

127

00:06:32,300  -->  00:06:36,064
a top level function called readlocationinfo.
128

128

00:06:36,064  -->  00:06:38,587
So function readlocationinfo, and it's going to return
129

129

00:06:40,490  -->  00:06:44,053
the map with all of the location instances.
130

130

00:06:45,040  -->  00:06:48,270
So it's gonna return a map and the key will be
131

131

00:06:48,270  -->  00:06:53,083
the location ID and the value is the location instance.
132

132

00:06:55,890  -->  00:06:57,760
Okay, so the first thing I'll do in here
133

133

00:06:57,760  -->  00:07:00,850
is create the map, that will eventually return.
134

134

00:07:00,850  -->  00:07:03,760
So I'll say val locations equals and once again
135

135

00:07:03,760  -->  00:07:05,440
we want it to be mutable 'cause we're going
136

136

00:07:05,440  -->  00:07:09,430
to be adding to it as we read our data files.
137

137

00:07:09,430  -->  00:07:12,273
And it's a mutable map of int and location.
138

138

00:07:14,850  -->  00:07:18,910
And then I'm going to read the locations_big.txt file
139

139

00:07:18,910  -->  00:07:21,863
so I'm gonna say file, locations_big.txt
140

140

00:07:25,470  -->  00:07:27,490
and then I want a reader,
141

141

00:07:27,490  -->  00:07:29,260
and then I want to do the following
142

142

00:07:29,260  -->  00:07:31,573
for each line in the file.
143

143

00:07:33,810  -->  00:07:37,210
I want to use the string.split method
144

144

00:07:37,210  -->  00:07:40,370
to get the two pieces of information
145

145

00:07:40,370  -->  00:07:43,610
that are on each line, the location ID and the description.
146

146

00:07:43,610  -->  00:07:48,610
So I'll say IT.split and the delimiter is the funny
147

147

00:07:48,610  -->  00:07:51,430
quotation mark that I changed it to.
148

148

00:07:51,430  -->  00:07:55,720
And then we're going to create our location instance,
149

149

00:07:55,720  -->  00:07:59,380
so I'll say val location equals location
150

150

00:07:59,380  -->  00:08:02,770
and the first token is the location ID,
151

151

00:08:02,770  -->  00:08:06,380
so we'll pass that first and the second token
152

152

00:08:06,380  -->  00:08:08,073
is the description.
153

153

00:08:08,930  -->  00:08:12,000
However, I do need to convert this to an integer
154

154

00:08:12,000  -->  00:08:13,250
because right now it's a string.
155

155

00:08:13,250  -->  00:08:16,490
So if we go back to our location class,
156

156

00:08:16,490  -->  00:08:20,020
it wants the location ID and the description
157

157

00:08:20,020  -->  00:08:23,280
and in our tokens array, the first token
158

158

00:08:23,280  -->  00:08:27,783
is the location ID and the second token is the description.
159

159

00:08:29,000  -->  00:08:31,320
And now I need to add this location instance
160

160

00:08:31,320  -->  00:08:33,440
to our locations map.
161

161

00:08:33,440  -->  00:08:36,930
So I'll say locations and the key for this
162

162

00:08:36,930  -->  00:08:39,270
will be the location ID.
163

163

00:08:39,270  -->  00:08:43,860
So I'm gonna say location.locationID equals
164

164

00:08:43,860  -->  00:08:47,070
and the location instance we just created.
165

165

00:08:47,070  -->  00:08:52,070
And that's it for reading our locations_big.txt file.
166

166

00:08:52,420  -->  00:08:56,170
We've read in all of the lines, we've split each line
167

167

00:08:56,170  -->  00:08:59,060
into the location ID in description
168

168

00:08:59,060  -->  00:09:01,690
and we've created a location instance
169

169

00:09:01,690  -->  00:09:04,330
and we then added that location instance
170

170

00:09:04,330  -->  00:09:06,340
to the locations map.
171

171

00:09:06,340  -->  00:09:08,100
So I'm now gonna use the same technique
172

172

00:09:08,100  -->  00:09:11,360
to read the directions_big.txt file.
173

173

00:09:11,360  -->  00:09:14,297
So I'll say file, directions_big.txt
174

174

00:09:18,220  -->  00:09:21,680
and I'll want a reader and I'm gonna do something
175

175

00:09:21,680  -->  00:09:23,160
for each line in the file.
176

176

00:09:23,160  -->  00:09:27,340
In this case I'm going to again use the split method,
177

177

00:09:27,340  -->  00:09:32,340
so IT.split but this time it's a comma that's the delimiter.
178

178

00:09:33,780  -->  00:09:37,590
The first token is, we go back to our directions.big,
179

179

00:09:37,590  -->  00:09:41,210
the first token will be the location ID
180

180

00:09:41,210  -->  00:09:42,640
of the current location.
181

181

00:09:42,640  -->  00:09:45,400
The second token is the direction letter
182

182

00:09:45,400  -->  00:09:49,460
and the third token is the destination location ID.
183

183

00:09:49,460  -->  00:09:52,841
So with that in mind we can now add the exit
184

184

00:09:52,841  -->  00:09:55,230
to the location, so the first thing we have to do
185

185

00:09:55,230  -->  00:09:59,300
is look up the location instance in our map.
186

186

00:09:59,300  -->  00:10:02,240
So we'll say locations which is our map,
187

187

00:10:02,240  -->  00:10:06,360
and we're going to use the current, the first token,
188

188

00:10:06,360  -->  00:10:09,030
the current location ID to look up the location.
189

189

00:10:09,030  -->  00:10:13,890
So we'll say tokens zero and we have to convert
190

190

00:10:13,890  -->  00:10:15,013
that to an int.
191

191

00:10:17,230  -->  00:10:19,380
And now here I'm going to use an operator
192

192

00:10:19,380  -->  00:10:21,930
that's not familiar, but just understand for now
193

193

00:10:21,930  -->  00:10:25,590
this has to do with Kotlin protecting against nulls.
194

194

00:10:25,590  -->  00:10:28,303
And then I'm going to say add exit,
195

195

00:10:29,400  -->  00:10:33,440
and the first thing we want to pass is the direction letter
196

196

00:10:33,440  -->  00:10:36,140
'cause that's the key and the second thing
197

197

00:10:36,140  -->  00:10:39,560
we want to pass is the destination ID
198

198

00:10:39,560  -->  00:10:41,610
and I need to convert that to an integer.
199

199

00:10:43,510  -->  00:10:47,950
So once again we're looking up the first token,
200

200

00:10:47,950  -->  00:10:51,383
is the current location ID, so we're using that
201

201

00:10:51,383  -->  00:10:55,410
to look up the location instance in our locations map.
202

202

00:10:55,410  -->  00:10:59,160
And then we're calling the addExit function
203

203

00:10:59,160  -->  00:11:02,710
which wants the direction which is the string
204

204

00:11:02,710  -->  00:11:04,690
and the destination ID.
205

205

00:11:04,690  -->  00:11:07,350
So it essentially wants tokens two and three
206

206

00:11:07,350  -->  00:11:09,969
which are tokens one and tokens two,
207

207

00:11:09,969  -->  00:11:12,950
and so that's what we're passing it here.
208

208

00:11:12,950  -->  00:11:17,080
And so that's it, we've read in the directions_big.txt
209

209

00:11:17,080  -->  00:11:20,690
and we've added each exit in that file
210

210

00:11:20,690  -->  00:11:22,320
to the appropriate location.
211

211

00:11:22,320  -->  00:11:24,940
So all that's left now is to return our map,
212

212

00:11:24,940  -->  00:11:28,150
so let's go ahead and do that, return locations.
213

213

00:11:28,150  -->  00:11:30,324
And that's it, we have now converted
214

214

00:11:30,324  -->  00:11:34,290
our locations.java file.
215

215

00:11:34,290  -->  00:11:36,680
Now looking at this and looking at location
216

216

00:11:36,680  -->  00:11:38,610
I think you'll definitely agree that this
217

217

00:11:38,610  -->  00:11:41,610
is more concise than the Java's location class
218

218

00:11:41,610  -->  00:11:43,900
and you might be looking at this and wondering
219

219

00:11:43,900  -->  00:11:46,510
how are we gonna access any of these properties,
220

220

00:11:46,510  -->  00:11:49,523
there are no sets and gets and get to that in the course.
221

221

00:11:50,700  -->  00:11:54,070
And this is also more concise, I think it's neater.
222

222

00:11:54,070  -->  00:11:57,010
Now part of it is I'm not using a scanner,
223

223

00:11:57,010  -->  00:11:59,510
but I do think it's a lot neater.
224

224

00:11:59,510  -->  00:12:02,900
We can tell pretty much at a glance what's going on here.
225

225

00:12:02,900  -->  00:12:05,850
So now all that's left for us to do is to convert
226

226

00:12:05,850  -->  00:12:07,100
the game logic.
227

227

00:12:07,100  -->  00:12:08,360
Oh but just before we do,
228

228

00:12:08,360  -->  00:12:09,540
one thing I want you to notice
229

229

00:12:09,540  -->  00:12:11,940
about the locations file is we don't have
230

230

00:12:11,940  -->  00:12:16,090
a class in here, so obviously it's possible
231

231

00:12:16,090  -->  00:12:20,260
in Kotlin to write code that is outside a class.
232

232

00:12:20,260  -->  00:12:22,380
Alright, so now we'll convert the game logic
233

233

00:12:22,380  -->  00:12:26,160
and I'm going to add another Kotlin file to that
234

234

00:12:26,160  -->  00:12:27,510
and I'm gonna call it main.
235

235

00:12:28,880  -->  00:12:29,870
And the first thing I'm gonna do
236

236

00:12:29,870  -->  00:12:31,460
in here is add a main function
237

237

00:12:31,460  -->  00:12:35,730
and I can do that by typing main and pressing enter.
238

238

00:12:35,730  -->  00:12:38,987
And now I'm going to call the read location
239

239

00:12:38,987  -->  00:12:42,980
info function that I just wrote to get all the data.
240

240

00:12:42,980  -->  00:12:47,980
So I'll say val locations equals readLocationInfo.
241

241

00:12:49,180  -->  00:12:51,090
And so we've now read in all our data
242

242

00:12:51,090  -->  00:12:55,190
and then we're going to declare the loc variable
243

243

00:12:55,190  -->  00:12:59,160
that always has the ID of the current location.
244

244

00:12:59,160  -->  00:13:01,408
And just as in Java we're gonna set that
245

245

00:13:01,408  -->  00:13:04,240
to 64 initially.
246

246

00:13:04,240  -->  00:13:06,010
Now I'm gonna add an infinite loop
247

247

00:13:06,010  -->  00:13:07,463
just like we did in Java.
248

248

00:13:10,680  -->  00:13:12,880
And the first thing I'm going to do in this loop
249

249

00:13:12,880  -->  00:13:15,510
is look up the location instance
250

250

00:13:15,510  -->  00:13:18,790
for the current location ID, but I'm gonna do
251

251

00:13:18,790  -->  00:13:21,160
something a little bit differently here.
252

252

00:13:21,160  -->  00:13:25,617
So I'm gonna say val location equals locations loc
253

253

00:13:27,510  -->  00:13:30,830
because this is a map, if we go back here,
254

254

00:13:30,830  -->  00:13:33,987
this is a map of int and location where this is the
255

255

00:13:33,987  -->  00:13:37,140
location ID and this is the instance.
256

256

00:13:37,140  -->  00:13:42,140
So back here I'm saying I want the map entry
257

257

00:13:42,700  -->  00:13:45,070
that maps to whatever is in loc, and that's going
258

258

00:13:45,070  -->  00:13:48,000
to give me the location instance.
259

259

00:13:48,000  -->  00:13:51,010
And I could stop there but I'm not going to.
260

260

00:13:51,010  -->  00:13:55,520
I'm going to assign a default value
261

261

00:13:55,520  -->  00:13:57,600
if this turns out to be null.
262

262

00:13:57,600  -->  00:13:59,870
So if we do the lookup in the map
263

263

00:13:59,870  -->  00:14:02,730
and we get a null back meaning there's no entry
264

264

00:14:02,730  -->  00:14:04,740
in the map with the key loc.
265

265

00:14:04,740  -->  00:14:08,098
I want to assign a default value to location.
266

266

00:14:08,098  -->  00:14:11,790
Now this should never happen, if we've successfully
267

267

00:14:11,790  -->  00:14:13,870
read in our data files this should never happen
268

268

00:14:13,870  -->  00:14:16,582
but Kotlin doesn't know that, so if I don't protect
269

269

00:14:16,582  -->  00:14:19,300
against a null here, if I don't protect
270

270

00:14:19,300  -->  00:14:22,170
against location getting null I'm gonna have to do
271

271

00:14:22,170  -->  00:14:24,770
something special throughout the rest of the code
272

272

00:14:24,770  -->  00:14:27,130
to protect against nulls and I don't want to to that.
273

273

00:14:27,130  -->  00:14:32,020
So instead I'm going to assign default value
274

274

00:14:32,020  -->  00:14:33,950
if this turns out to be null, now there would
275

275

00:14:33,950  -->  00:14:36,180
be nothing wrong with doing this special stuff
276

276

00:14:36,180  -->  00:14:37,300
throughout the rest of the code,
277

277

00:14:37,300  -->  00:14:38,560
but it does clutter the code.
278

278

00:14:38,560  -->  00:14:42,780
And in this case I'm pretty sure this isn't gonna be null.
279

279

00:14:42,780  -->  00:14:45,250
So I'm going to use what's called the Elvis operator
280

280

00:14:45,250  -->  00:14:47,630
and you'll learn about this operator in the course
281

281

00:14:47,630  -->  00:14:51,280
and I'm going to say if this turns out to be null,
282

282

00:14:51,280  -->  00:14:52,950
so you look up the entry in the map
283

283

00:14:52,950  -->  00:14:55,194
and there's no location instance with this key,
284

284

00:14:55,194  -->  00:14:57,530
then assign this instance.
285

285

00:14:57,530  -->  00:14:59,720
I want you to assign a location instance,
286

286

00:14:59,720  -->  00:15:03,244
it has an idea of zero, and the description
287

287

00:15:03,244  -->  00:15:06,600
for that instance will be sorry,
288

288

00:15:06,600  -->  00:15:11,530
something went wrong, so the game will terminate.
289

289

00:15:11,530  -->  00:15:14,050
I'll actually pull this back a bit
290

290

00:15:14,050  -->  00:15:14,950
so you can see it.
291

291

00:15:17,800  -->  00:15:19,540
Okay, so after that we're gonna go ahead
292

292

00:15:19,540  -->  00:15:22,050
and print out the description, so we're gonna say
293

293

00:15:22,050  -->  00:15:27,050
println, println location.description.
294

294

00:15:27,120  -->  00:15:31,390
And so that's going to print out the description
295

295

00:15:31,390  -->  00:15:33,560
for this location and if something did go wrong
296

296

00:15:33,560  -->  00:15:36,320
this would be the description that would be printed out.
297

297

00:15:36,320  -->  00:15:40,570
Then we're gonna check for the zero location
298

298

00:15:40,570  -->  00:15:42,070
which is the quit location.
299

299

00:15:42,070  -->  00:15:45,013
So if location.locationID equals zero.
300

300

00:15:46,200  -->  00:15:48,830
And in that case just as in the Java application
301

301

00:15:48,830  -->  00:15:49,890
we want to break out.
302

302

00:15:49,890  -->  00:15:53,147
And once again if by any chance this default gets assigned,
303

303

00:15:53,147  -->  00:15:56,080
I gave it zero because at this point we want to break
304

304

00:15:56,080  -->  00:15:57,670
out because obviously something has
305

305

00:15:57,670  -->  00:15:59,260
gone wrong with the game.
306

306

00:15:59,260  -->  00:16:02,290
If the user doesn't want to quit, we'll print out
307

307

00:16:02,290  -->  00:16:07,290
the available exits, so we'll say print available,
308

308

00:16:08,340  -->  00:16:10,440
let me get rid of that dialogue there,
309

309

00:16:10,440  -->  00:16:12,693
available exits are,
310

310

00:16:14,490  -->  00:16:17,670
and now we're going to loop through the exits
311

311

00:16:17,670  -->  00:16:20,500
for the location instance.
312

312

00:16:20,500  -->  00:16:25,500
So I'm going to say location.exits.keys.forEach.
313

313

00:16:29,540  -->  00:16:31,820
Remember that in the exits map the keys
314

314

00:16:31,820  -->  00:16:33,210
are the direction letters
315

315

00:16:33,210  -->  00:16:35,960
and that's what we want to print out.
316

316

00:16:35,960  -->  00:16:39,760
So here I'll say print, we're gonna say dollar sign
317

317

00:16:39,760  -->  00:16:44,760
I-T comma, and you'll learn all about this in the course.
318

318

00:16:45,220  -->  00:16:47,570
So no we printed our exit so now we want to wait
319

319

00:16:47,570  -->  00:16:49,200
for a direction from the user,
320

320

00:16:49,200  -->  00:16:53,040
so I'm gonna say val direction equals readLine,
321

321

00:16:53,040  -->  00:16:54,920
we want to read from the console.
322

322

00:16:54,920  -->  00:16:58,280
Again, I'm going to use this operator here
323

323

00:16:58,280  -->  00:17:00,300
and you'll learn about this later in the course,
324

324

00:17:00,300  -->  00:17:02,840
it has to do with protecting against nulls.
325

325

00:17:02,840  -->  00:17:07,040
And I want to upper case whatever the user gave us.
326

326

00:17:07,040  -->  00:17:09,470
And then once again here I'm going to use
327

327

00:17:09,470  -->  00:17:12,110
what's called the Elvis operator to assign a default
328

328

00:17:12,110  -->  00:17:14,813
just in case this whole thing does evaluate to null.
329

329

00:17:15,870  -->  00:17:18,450
And I'm going to assign a default of Z
330

330

00:17:19,330  -->  00:17:21,450
because I know that there's no direction
331

331

00:17:21,450  -->  00:17:24,040
that has the letter Z, so I know that this
332

332

00:17:24,040  -->  00:17:27,710
is going to be invalid when we test the direction
333

333

00:17:27,710  -->  00:17:30,420
that came back, and we're gonna do that right now.
334

334

00:17:30,420  -->  00:17:35,420
So we say if location.exits.containsKey direction,
335

335

00:17:38,860  -->  00:17:40,660
then we have a valid direction,
336

336

00:17:40,660  -->  00:17:45,660
so we're gonna go ahead and get the location ID
337

337

00:17:46,130  -->  00:17:48,550
corresponding to this direction, so in this case
338

338

00:17:48,550  -->  00:17:51,650
it will be the destination location ID,
339

339

00:17:51,650  -->  00:17:55,980
and we'll assign that back into our loc variable.
340

340

00:17:55,980  -->  00:18:00,200
So we'll say loc equals location.exits
341

341

00:18:00,200  -->  00:18:03,730
and we're gonna look up the direction
342

342

00:18:03,730  -->  00:18:08,730
and this will return us the destination location ID
343

343

00:18:08,760  -->  00:18:09,940
which we assign to loc.
344

344

00:18:09,940  -->  00:18:11,490
Now you'll notice I have an error here
345

345

00:18:11,490  -->  00:18:14,750
and once again this has to do with nullability.
346

346

00:18:14,750  -->  00:18:17,052
I'm gonna add two exclamation marks here
347

347

00:18:17,052  -->  00:18:20,150
and for now just understand that this is my way
348

348

00:18:20,150  -->  00:18:22,440
of telling the Kotlin compiler that I am absolutely
349

349

00:18:22,440  -->  00:18:24,470
sure that this is not going to be null,
350

350

00:18:24,470  -->  00:18:26,920
because we've already looked up the key
351

351

00:18:26,920  -->  00:18:31,250
and there's no reason if the exits map contains the key,
352

352

00:18:31,250  -->  00:18:33,850
then I am 100% confident that it also contains
353

353

00:18:33,850  -->  00:18:35,530
a non-null entry.
354

354

00:18:35,530  -->  00:18:38,420
So this is my way of telling the Kotlin compiler look,
355

355

00:18:38,420  -->  00:18:40,670
don't worry about nulls here, I'm telling you
356

356

00:18:41,506  -->  00:18:43,130
that this is never going to be null,
357

357

00:18:43,130  -->  00:18:45,470
otherwise I have to do other special things
358

358

00:18:45,470  -->  00:18:47,330
which is why I was getting the error there.
359

359

00:18:47,330  -->  00:18:50,670
Now if the exits map does not contain the key,
360

360

00:18:50,670  -->  00:18:54,750
then the user has given us an invalid direction
361

361

00:18:54,750  -->  00:18:58,270
or this evaluated to null for some reason,
362

362

00:18:58,270  -->  00:19:01,150
so my default value of Z was assigned.
363

363

00:19:01,150  -->  00:19:03,724
So in that case we're gonna say println
364

364

00:19:03,724  -->  00:19:06,410
you can't go in that direction,
365

365

00:19:06,410  -->  00:19:08,313
which is exactly what we did in Java.
366

366

00:19:09,493  -->  00:19:11,400
Now in both cases we'll loop back up to the top
367

367

00:19:11,400  -->  00:19:14,040
and the first thing we're gonna do is look up the new
368

368

00:19:14,040  -->  00:19:17,940
location instance, which is the destination location
369

369

00:19:17,940  -->  00:19:19,940
for the direction they went in.
370

370

00:19:19,940  -->  00:19:21,970
And we rinse and repeat.
371

371

00:19:21,970  -->  00:19:24,833
Now I think you'll agree 'cause we're finished now,
372

372

00:19:25,882  -->  00:19:27,700
we're done, I think you'll agree that Kotlin
373

373

00:19:27,700  -->  00:19:30,560
has its own flavour and it does seem to be
374

374

00:19:30,560  -->  00:19:34,763
a little more concise, especially in these two classes.
375

375

00:19:35,850  -->  00:19:37,760
And you may have spotted a few other things,
376

376

00:19:37,760  -->  00:19:40,149
for example, I'm not using semicolons at the end
377

377

00:19:40,149  -->  00:19:42,640
of lines in any of this code.
378

378

00:19:42,640  -->  00:19:45,930
I pointed out that we have a function outside of class
379

379

00:19:46,790  -->  00:19:49,510
and I pointed out a few places where we are having
380

380

00:19:49,510  -->  00:19:52,310
to do something different because Kotlin
381

381

00:19:52,310  -->  00:19:54,490
wants to protect against nulls.
382

382

00:19:54,490  -->  00:19:56,890
One of its guiding principles is safety,
383

383

00:19:56,890  -->  00:19:59,080
so I'm doing something different here,
384

384

00:19:59,080  -->  00:20:00,500
I'm doing something different here,
385

385

00:20:00,500  -->  00:20:02,390
and I'm doing something different down here
386

386

00:20:02,390  -->  00:20:04,020
and also here.
387

387

00:20:04,020  -->  00:20:07,070
I pointed out a point here where I'm doing something.
388

388

00:20:07,070  -->  00:20:10,180
And we're gonna cover all of this in the course.
389

389

00:20:10,180  -->  00:20:11,770
As I said at the end of the course,
390

390

00:20:11,770  -->  00:20:13,760
we'll come back and we'll revisit this code
391

391

00:20:13,760  -->  00:20:16,080
and at that point it's gonna look really straightforward
392

392

00:20:16,080  -->  00:20:17,890
to you and you'll be able to explain
393

393

00:20:17,890  -->  00:20:20,400
everything that's in this application.
394

394

00:20:20,400  -->  00:20:21,810
Anyway, let's run.
395

395

00:20:21,810  -->  00:20:24,043
I mean I've converted it but don't take my word for it
396

396

00:20:24,043  -->  00:20:26,623
that this actually works, so let's run.
397

397

00:20:28,893  -->  00:20:32,390
Okay, and we get you are at a complex junction,
398

398

00:20:32,390  -->  00:20:34,410
a low hands an knees passage from the north
399

399

00:20:34,410  -->  00:20:37,200
joins a higher crawl from, I still think that should
400

400

00:20:37,200  -->  00:20:39,360
be crawlspace, from the east to make
401

401

00:20:39,360  -->  00:20:41,400
a walking passage going west.
402

402

00:20:41,400  -->  00:20:44,810
There is also a large room above, the air is damp here.
403

403

00:20:44,810  -->  00:20:47,010
So let's do what we did in Java.
404

404

00:20:47,010  -->  00:20:50,510
We'll go up, alright, now we're in a large room
405

405

00:20:50,510  -->  00:20:53,730
full of dusty rocks, there was a hole in the floor,
406

406

00:20:53,730  -->  00:20:56,200
there are cracks everywhere and a passage leading east.
407

407

00:20:56,200  -->  00:20:57,743
Well let's go east.
408

408

00:20:58,950  -->  00:21:00,840
Now we're in a dirty broken passage,
409

409

00:21:00,840  -->  00:21:03,240
and to the east is a crawl space,
410

410

00:21:03,240  -->  00:21:06,423
to the west is a large passage, above you is a hole.
411

411

00:21:07,400  -->  00:21:09,653
Let's go up just for fun.
412

412

00:21:10,900  -->  00:21:14,170
Now we're in a low north south passage at a hole
413

413

00:21:14,170  -->  00:21:16,650
in the floor, and the hole goes down to an east west
414

414

00:21:16,650  -->  00:21:18,470
passage, well that's where we were before
415

415

00:21:18,470  -->  00:21:20,950
and at this point I'm gonna quit.
416

416

00:21:20,950  -->  00:21:22,570
And it says you are sitting in front
417

417

00:21:22,570  -->  00:21:25,560
of a computer learning Kotlin.
418

418

00:21:25,560  -->  00:21:27,670
Alright, so our application works.
419

419

00:21:27,670  -->  00:21:30,721
I hope you're excited about getting started with Kotlin.
420

420

00:21:30,721  -->  00:21:33,677
In the next video I'm going to show you how IntelliJ
421

421

00:21:33,677  -->  00:21:37,300
can convert Java to Kotlin for you,
422

422

00:21:37,300  -->  00:21:40,120
and then we're going to get into the wonders of Kotlin.
423

423

00:21:40,120  -->  00:21:41,103
I'll see you there.
