1
00:00:05,650 --> 00:00:10,240
OK so we learned in the last video that generic types are erased at runtime.

2
00:00:10,240 --> 00:00:17,110
Now as you've seen you can still cast to a specific generic type though you might get a class cast exception

3
00:00:17,110 --> 00:00:24,250
when you run and you can also use A-star projections and tasks to check whether a variable is an instance

4
00:00:24,340 --> 00:00:28,180
of a specific type of collection.

5
00:00:28,180 --> 00:00:33,760
Now the same holds true for function parameters because generics are a rased at runtime when a function

6
00:00:33,760 --> 00:00:36,500
accepts a parameter with a generic type.

7
00:00:36,520 --> 00:00:41,940
There is no way at runtime to determine which type it was invoked which is for example.

8
00:00:41,950 --> 00:00:47,770
Let's say we have a function that wants to iterate through a list and return all the elements of a certain

9
00:00:47,770 --> 00:00:49,160
type in the list.

10
00:00:49,210 --> 00:00:53,110
So let's write a function that would do that sort of thing.

11
00:00:53,110 --> 00:01:08,560
So we'll save fun get elements of type and it's going to accept a list a list of any and it wants to

12
00:01:08,560 --> 00:01:12,670
return a list of T.

13
00:01:13,380 --> 00:01:21,120
So the way that we would call a function like this is we would do something like vowel and we want big

14
00:01:21,120 --> 00:01:30,860
decimals only equals and we'd say get elements of type and we're going to call this with big decimal

15
00:01:31,410 --> 00:01:39,710
because we have to tell the compiler what type we want back when you have a T in the return type.

16
00:01:39,870 --> 00:01:46,470
Then you tell the compiler this way that hey this function is of type Lisp big decimal.

17
00:01:46,500 --> 00:01:53,730
I want this to return a list of big decimal and then we would pass in let's say a mixed list here containing

18
00:01:53,730 --> 00:01:56,110
a bunch of mixed objects.

19
00:01:56,340 --> 00:01:57,180
So now it's right.

20
00:01:57,180 --> 00:01:58,950
The function body.

21
00:01:59,340 --> 00:02:07,530
So we'll save our new list is going to be immutable list of T because we want to return the type of

22
00:02:07,530 --> 00:02:14,210
lists that we were asked for and will say mutable list of.

23
00:02:14,610 --> 00:02:25,560
And then we'll say for every element in the list that was passed to us if element is of type T add it

24
00:02:25,560 --> 00:02:26,400
to the list

25
00:02:30,330 --> 00:02:33,290
and at the end of course we'll return the list.

26
00:02:33,390 --> 00:02:35,990
We turn the list to sell.

27
00:02:36,020 --> 00:02:37,220
All sounds great.

28
00:02:37,250 --> 00:02:39,290
Only we can't do it.

29
00:02:39,290 --> 00:02:42,260
Actually I want to return new list here.

30
00:02:42,890 --> 00:02:45,990
OK so this all sounds great but we can't do it.

31
00:02:46,010 --> 00:02:51,930
We'll see we have an error here saying cannot check for instance of Eraste type T.

32
00:02:52,100 --> 00:03:00,340
And so we have the same problem here within the function the runtime the JVM has no clue what t is.

33
00:03:00,500 --> 00:03:04,390
So you can't do this it can't check because it doesn't know what t is.

34
00:03:04,640 --> 00:03:12,530
As the error message says the instance the type is erased at runtime so it's not there for the JVM to

35
00:03:12,530 --> 00:03:13,460
check.

36
00:03:13,460 --> 00:03:20,390
Now back when we looked at functions we we touched on inline functions and we said that one scenario

37
00:03:20,390 --> 00:03:25,210
that benefits from inline functions is when the function has a lambda as a parameter.

38
00:03:25,270 --> 00:03:31,960
Another scenario for inline functions is when they have a generic type as a parameter because inline

39
00:03:31,970 --> 00:03:36,400
function parameters can be what's called reified.

40
00:03:36,560 --> 00:03:38,020
Now what does that mean.

41
00:03:38,090 --> 00:03:45,230
Well reification is a Koplin feature that prevents the type from being erased at runtime.

42
00:03:45,230 --> 00:03:53,480
If you declare a function as in line and a type parameter as a reified then you can check the generic

43
00:03:53,480 --> 00:03:54,680
type at runtime.

44
00:03:54,680 --> 00:04:03,620
So if we inline this function now we declare the generic type the type parameter here as reify then

45
00:04:03,630 --> 00:04:06,230
we're going to be able to check the type at runtime.

46
00:04:06,380 --> 00:04:12,740
So we're going to use reification to get around this error and we have to do two things in line the

47
00:04:12,740 --> 00:04:15,170
function and reify the type parameter.

48
00:04:15,170 --> 00:04:16,860
So let's go ahead and do that.

49
00:04:16,970 --> 00:04:19,830
So we'll declare the function as in line.

50
00:04:20,240 --> 00:04:21,860
That's step 1.

51
00:04:22,070 --> 00:04:26,880
And then instead of just t We're going to say reified T.

52
00:04:27,000 --> 00:04:31,230
And you'll notice that when we do that we no longer have an error here.

53
00:04:31,460 --> 00:04:34,520
So let's go ahead and test this function.

54
00:04:34,730 --> 00:04:44,340
So we'll say Vau we'll call it mixed de-list and we want this to be a list of any and we'll say list

55
00:04:44,910 --> 00:04:46,400
and we'll put a string.

56
00:04:47,090 --> 00:04:50,300
We'll put an integer we'll put a big decimal.

57
00:04:50,710 --> 00:04:52,770
Twenty two point five.

58
00:04:53,030 --> 00:04:55,580
We'll put a I don't know what do we know.

59
00:04:55,610 --> 00:05:01,310
What else do we want to put in here we'll put another string fall let's say and we'll put in another

60
00:05:01,310 --> 00:05:08,080
big dust and all minus some weird number.

61
00:05:08,480 --> 00:05:11,190
So now we've got two strings.

62
00:05:11,210 --> 00:05:16,850
You've got an integer and we've got two big decimals and we're calling our get all elements of type

63
00:05:17,000 --> 00:05:23,630
function and we're saying we want this function to return as a list that just contains the two big decimals.

64
00:05:23,630 --> 00:05:30,740
So let's print the list we get back to see if indeed our function does that so we'll say for item in

65
00:05:30,740 --> 00:05:34,820
big decimals only print the item.

66
00:05:35,270 --> 00:05:36,430
Let's go ahead and run

67
00:05:39,980 --> 00:05:43,000
and we get a list with our two big decimals.

68
00:05:43,070 --> 00:05:54,020
So by inlining this function and declaring the parameter type here as reified the type is no longer

69
00:05:54,020 --> 00:05:58,390
Eraste at runtime and we can actually do this checking now.

70
00:05:58,760 --> 00:06:06,380
So let's go ahead and change this to a string to make sure that it's actually not just working with

71
00:06:06,560 --> 00:06:08,510
decimals and will run again.

72
00:06:10,150 --> 00:06:13,690
And this time we get our two strings.

73
00:06:13,690 --> 00:06:16,960
Now there's a shorter way to write this function.

74
00:06:16,960 --> 00:06:21,850
In fact we probably wouldn't even write it this way because there's a collections function that will

75
00:06:21,850 --> 00:06:29,620
do this type of thing for us but it shows how by reifying the T parameter we can get at the generic

76
00:06:29,620 --> 00:06:31,510
type inside the function.

77
00:06:31,510 --> 00:06:34,600
The type is interfaced at runtime.

78
00:06:34,600 --> 00:06:38,970
So you'd want to do this sort of thing when you need to check the type within a function.

79
00:06:39,010 --> 00:06:42,880
Otherwise there's absolutely no reason to use reification.

80
00:06:43,150 --> 00:06:48,940
So you only want to use reification if you need to check a type inside the function.

81
00:06:48,940 --> 00:06:55,000
Now you can't mark classes properties or non inline functions as reified.

82
00:06:55,000 --> 00:06:56,770
So you can't do something like this.

83
00:06:56,770 --> 00:07:06,340
You can't say class something and then say you want this to be a reified t that doesn't work it'll say

84
00:07:06,340 --> 00:07:10,250
only type parameters of inline functions can be reified.

85
00:07:10,540 --> 00:07:15,360
You also can't use the T to create a new instance let me get rid of this.

86
00:07:15,370 --> 00:07:18,760
So inside our function here we can't do something like this.

87
00:07:18,760 --> 00:07:28,090
We can't say oh vowel c of type T equals t because it's going to tell you right away you can do that

88
00:07:28,540 --> 00:07:31,330
type parameter T cannot be called as a function.

89
00:07:31,330 --> 00:07:36,330
So you can't create new instances of type T within the function.

90
00:07:36,580 --> 00:07:41,650
And the reason we're getting this error message that says it cannot be called as a function is because

91
00:07:41,650 --> 00:07:46,210
the compiler isn't even considering that we might be trying to create a new instance where it just assumes

92
00:07:46,210 --> 00:07:47,940
that we're trying to call a function.

93
00:07:47,950 --> 00:07:51,820
Now there are a few other restrictions on the use of reify parameters.

94
00:07:51,820 --> 00:07:56,500
I'm not going to go through them but the compiler will always let you know when you're trying to do

95
00:07:56,500 --> 00:07:59,860
something that you're not allowed to do with reified parameters.

96
00:07:59,860 --> 00:08:08,680
But as I said the only reason you want to use reification is if you want to check the type of T within

97
00:08:08,680 --> 00:08:09,600
the function.

98
00:08:09,610 --> 00:08:12,420
So if you don't need to do that don't use it.

99
00:08:12,430 --> 00:08:18,640
And remember that in order to use a reify type parameter you have to inline the function.

100
00:08:18,640 --> 00:08:21,210
This only works with inline functions.

101
00:08:21,400 --> 00:08:23,700
OK so that's it for reification.

102
00:08:23,700 --> 00:08:28,560
Are in our next video we're going to start looking at what's called variance.

103
00:08:28,600 --> 00:08:34,660
And some people find this a difficult concept so hopefully the examples that we look at are going to

104
00:08:34,660 --> 00:08:35,720
make it clear.

105
00:08:35,740 --> 00:08:37,170
I'll see you in the next video.
