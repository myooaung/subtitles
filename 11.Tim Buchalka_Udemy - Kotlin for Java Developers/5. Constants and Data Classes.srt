1
1

00:00:04,680  -->  00:00:07,529
As we've seen a few times now, Kotlin
2

2

00:00:07,529  -->  00:00:10,170
provides shortcuts to avoid boilerplate
3

3

00:00:10,170  -->  00:00:11,969
code that's always going to be the same,
4

4

00:00:11,969  -->  00:00:14,250
so here's another change that can make
5

5

00:00:14,250  -->  00:00:16,619
our code look neater. You can define
6

6

00:00:16,619  -->  00:00:20,550
constants outside classes, how many times
7

7

00:00:20,550  -->  00:00:22,650
do we write static classes filled with
8

8

00:00:22,650  -->  00:00:25,440
constants in Java, perhaps not as often
9

9

00:00:25,440  -->  00:00:28,230
once enums were added to Java, but before
10

10

00:00:28,230  -->  00:00:29,670
then, we did it quite a lot and we
11

11

00:00:29,670  -->  00:00:32,789
probably still do it quite a lot. Now in
12

12

00:00:32,789  -->  00:00:35,370
Kotlin, you can have top-level constants,
13

13

00:00:35,370  -->  00:00:37,110
just as you can have top-level functions,
14

14

00:00:37,110  -->  00:00:40,980
so you don't have to declare a class and
15

15

00:00:40,980  -->  00:00:43,530
fill it with constants. Let's add a
16

16

00:00:43,530  -->  00:00:47,309
constant to our access modifiers file,
17

17

00:00:47,309  -->  00:00:49,410
and then print it just to show how to do
18

18

00:00:49,410  -->  00:00:52,170
this, so just under the package name
19

19

00:00:52,170  -->  00:00:58,320
we'll say val my constant and we'll make
20

20

00:00:58,320  -->  00:01:01,620
it 100. Now, of course constant should be
21

21

00:01:01,620  -->  00:01:04,289
val variables you don't want them to be
22

22

00:01:04,289  -->  00:01:06,630
changed, you want them to be immutable so
23

23

00:01:06,630  -->  00:01:08,820
they're going to be val variables and
24

24

00:01:08,820  -->  00:01:10,920
I've used uppercase for the constant
25

25

00:01:10,920  -->  00:01:13,080
name as is conventional to do in Java.
26

26

00:01:13,080  -->  00:01:16,229
Now, this is an int constant, we didn't
27

27

00:01:16,229  -->  00:01:19,140
specify the type, so the default datatype
28

28

00:01:19,140  -->  00:01:21,060
for a whole number is going to be int.
29

29

00:01:21,060  -->  00:01:24,000
Now, we can use it as we'd use any other
30

30

00:01:24,000  -->  00:01:26,430
variable, we'll print the constant from
31

31

00:01:26,430  -->  00:01:28,500
the main function, so I'll do this right
32

32

00:01:28,500  -->  00:01:31,549
at the top, I'll say print line my
33

33

00:01:31,549  -->  00:01:34,409
constant, nothing earth-shattering here
34

34

00:01:34,409  -->  00:01:36,479
if we wanted to we could have used this
35

35

00:01:36,479  -->  00:01:38,729
within a string template, so we'll just
36

36

00:01:38,729  -->  00:01:43,470
run and write at the top here, we'll see
37

37

00:01:43,470  -->  00:01:46,020
100. So that's really all there is to
38

38

00:01:46,020  -->  00:01:48,060
defining a constant, you can- you don't
39

39

00:01:48,060  -->  00:01:49,829
have to create a class if you wanted to
40

40

00:01:49,829  -->  00:01:51,540
find a bunch of constants, you can just
41

41

00:01:51,540  -->  00:01:53,220
put the constants right at the top of
42

42

00:01:53,220  -->  00:01:56,189
the file. Alright, so before we move on to
43

43

00:01:56,189  -->  00:01:58,290
taking a close look at functions, you
44

44

00:01:58,290  -->  00:02:01,170
need to know about data classes, this is
45

45

00:02:01,170  -->  00:02:03,149
a special type of class that you might
46

46

00:02:03,149  -->  00:02:05,040
want to use if the main purpose of a
47

47

00:02:05,040  -->  00:02:07,920
class is to store state. When I converted
48

48

00:02:07,920  -->  00:02:09,720
the text adventure application for
49

49

00:02:09,720  -->  00:02:11,400
Kotlin right at the top of the course,
50

50

00:02:11,400  -->  00:02:13,739
used a data class for the location data
51

51

00:02:13,739  -->  00:02:16,829
because all the location class did was
52

52

00:02:16,829  -->  00:02:18,930
stored information about a location,
53

53

00:02:18,930  -->  00:02:21,510
it didn't do anything else. So if you
54

54

00:02:21,510  -->  00:02:23,370
have a class and essentially it's all
55

55

00:02:23,370  -->  00:02:25,859
it's doing is storing state, I mean it's
56

56

00:02:25,859  -->  00:02:28,590
basically fields and setters and getters
57

57

00:02:28,590  -->  00:02:30,599
and nothing else, then that's a good
58

58

00:02:30,599  -->  00:02:33,480
candidate for a data class. Now when you
59

59

00:02:33,480  -->  00:02:35,340
use a data class, you get some extra
60

60

00:02:35,340  -->  00:02:38,340
functionality for free from Kotlin. So,
61

61

00:02:38,340  -->  00:02:39,689
we're going to create a data class
62

62

00:02:39,689  -->  00:02:42,180
called car, I'll just add it to the
63

63

00:02:42,180  -->  00:02:45,209
existing file and our simple cars will
64

64

00:02:45,209  -->  00:02:47,310
have three properties, the color,
65

65

00:02:47,310  -->  00:02:50,849
the model name and the year. So let's come
66

66

00:02:50,849  -->  00:02:55,439
here and this time I'll say data class
67

67

00:02:55,439  -->  00:02:58,709
rather than just class, otherwise the
68

68

00:02:58,709  -->  00:03:00,930
syntax will be the same, I'll call it car
69

69

00:03:00,930  -->  00:03:05,400
and we'll give it a string property for
70

70

00:03:05,400  -->  00:03:07,200
the color, we could use you know RGB
71

71

00:03:07,200  -->  00:03:08,579
values or something, but let's keep
72

72

00:03:08,579  -->  00:03:12,260
things simple val model and we'll also
73

73

00:03:12,260  -->  00:03:17,340
make that a string and val your which
74

74

00:03:17,340  -->  00:03:20,159
will be an int and we'll need curly
75

75

00:03:20,159  -->  00:03:23,010
braces. So, as I mentioned to create a
76

76

00:03:23,010  -->  00:03:25,500
data class, you start the declaration
77

77

00:03:25,500  -->  00:03:27,989
with the word data. So what's different
78

78

00:03:27,989  -->  00:03:29,909
about this class compared to a regular
79

79

00:03:29,909  -->  00:03:32,729
class like employee? Well, we get some
80

80

00:03:32,729  -->  00:03:35,400
functions for free, data classes come
81

81

00:03:35,400  -->  00:03:38,609
with a nice two string function, a custom
82

82

00:03:38,609  -->  00:03:40,590
implementation of the equals and
83

83

00:03:40,590  -->  00:03:43,519
hashcode functions and a copy function.
84

84

00:03:43,519  -->  00:03:45,930
now if you don't want the default
85

85

00:03:45,930  -->  00:03:47,879
implementations of any of the provided
86

86

00:03:47,879  -->  00:03:49,650
functions, you can add your own and
87

87

00:03:49,650  -->  00:03:51,840
they'll be used. For example, if you
88

88

00:03:51,840  -->  00:03:53,069
wanted to implement to string
89

89

00:03:53,069  -->  00:03:55,379
differently, you just override the two
90

90

00:03:55,379  -->  00:03:57,090
string function within the data class
91

91

00:03:57,090  -->  00:03:59,459
and then your version of the two string
92

92

00:03:59,459  -->  00:04:02,220
function would be used. Data classes also
93

93

00:04:02,220  -->  00:04:04,290
get everything they need for a type of
94

94

00:04:04,290  -->  00:04:06,720
declaration called a destructuring
95

95

00:04:06,720  -->  00:04:09,239
declaration, we haven't covered those yet,
96

96

00:04:09,239  -->  00:04:11,069
so don't worry about that now, I just
97

97

00:04:11,069  -->  00:04:13,319
wanted to mention it. Now, data classes
98

98

00:04:13,319  -->  00:04:15,359
have to meet certain requirements, first
99

99

00:04:15,359  -->  00:04:17,549
of all the primary constructor has to
100

100

00:04:17,549  -->  00:04:20,430
have at least one parameter and all the
101

101

00:04:20,430  -->  00:04:22,349
primary constructor parameters have to
102

102

00:04:22,349  -->  00:04:25,409
be marked val or var, you can't just
103

103

00:04:25,409  -->  00:04:27,539
have a regular old parameter for the
104

104

00:04:27,539  -->  00:04:29,130
primary constructor, like for example
105

105

00:04:29,130  -->  00:04:32,520
with regular classes, you can see here
106

106

00:04:32,520  -->  00:04:35,310
full-time doesn't have val or var in
107

107

00:04:35,310  -->  00:04:37,199
front of it. It's just a regular
108

108

00:04:37,199  -->  00:04:39,479
parameter, we're not declaring the
109

109

00:04:39,479  -->  00:04:41,789
property in the primary constructor
110

110

00:04:41,789  -->  00:04:44,699
signature. Also, data classes can't be
111

111

00:04:44,699  -->  00:04:47,940
abstract, sealed or inner classes we're
112

112

00:04:47,940  -->  00:04:49,830
going to cover inheritance later on and
113

113

00:04:49,830  -->  00:04:51,690
that's when we'll discuss abstract and
114

114

00:04:51,690  -->  00:04:54,300
sealed classes, just know for now that
115

115

00:04:54,300  -->  00:04:56,639
they can't be abstract sealed or inner
116

116

00:04:56,639  -->  00:05:00,419
classes. Now you can define properties
117

117

00:05:00,419  -->  00:05:03,410
within the data class that aren't in the
118

118

00:05:03,410  -->  00:05:06,090
defined in the primary constructor, but
119

119

00:05:06,090  -->  00:05:10,770
when Kotlin generates the equals and the
120

120

00:05:10,770  -->  00:05:13,590
hash code and everything else for you,
121

121

00:05:13,590  -->  00:05:15,780
it won't include those properties,
122

122

00:05:15,780  -->  00:05:17,099
it doesn't take those properties into
123

123

00:05:17,099  -->  00:05:20,280
account. So it's best to declare all of
124

124

00:05:20,280  -->  00:05:22,710
your properties within the primary
125

125

00:05:22,710  -->  00:05:25,319
constructor signature. Okay, getting back
126

126

00:05:25,319  -->  00:05:27,180
to our car class, let's see what's
127

127

00:05:27,180  -->  00:05:28,919
printed out when we call the two string
128

128

00:05:28,919  -->  00:05:31,080
function on an instance. I'm going to
129

129

00:05:31,080  -->  00:05:33,330
comment out everything else, so that
130

130

00:05:33,330  -->  00:05:39,690
we're not getting confused here and then
131

131

00:05:39,690  -->  00:05:44,460
we'll say val car equals car and this
132

132

00:05:44,460  -->  00:05:50,180
car will be blue, it'll be a Toyota and
133

133

00:05:50,180  -->  00:05:54,900
let's say it's a 2015 model and then
134

134

00:05:54,900  -->  00:05:57,599
we'll say print line car, let's see what
135

135

00:05:57,599  -->  00:06:04,199
comes out. Alright, so we'll see that
136

136

00:06:04,199  -->  00:06:05,759
right out of the box, without having to
137

137

00:06:05,759  -->  00:06:07,650
override the two string method, we have a
138

138

00:06:07,650  -->  00:06:09,509
very nice print out, we've got color
139

139

00:06:09,509  -->  00:06:12,479
equals blue, model equals Toyota and year
140

140

00:06:12,479  -->  00:06:15,150
equals 2015. Now if this was a regular
141

141

00:06:15,150  -->  00:06:17,130
class of course, all we would have seen
142

142

00:06:17,130  -->  00:06:19,229
here was the reference, the instance
143

143

00:06:19,229  -->  00:06:22,289
reference but with a data class, you
144

144

00:06:22,289  -->  00:06:24,509
getting nicer to string method, right out
145

145

00:06:24,509  -->  00:06:26,130
of the box. Now, if you didn't like this
146

146

00:06:26,130  -->  00:06:28,289
to string method, you could override it
147

147

00:06:28,289  -->  00:06:30,569
in the data class and output something
148

148

00:06:30,569  -->  00:06:33,930
else, now to show that this is a lot
149

149

00:06:33,930  -->  00:06:36,330
nicer, let's uncomment these two lines
150

150

00:06:36,330  -->  00:06:41,290
here and I'll just print
151

151

00:06:41,290  -->  00:06:44,780
emp rather than printing out the name.
152

152

00:06:44,780  -->  00:06:48,889
Let's run and you'll see the difference
153

153

00:06:48,889  -->  00:06:50,960
now, so this is the nice two string out
154

154

00:06:50,960  -->  00:06:53,240
of the box that we get from the data
155

155

00:06:53,240  -->  00:06:56,180
class and this is the regular old two
156

156

00:06:56,180  -->  00:06:57,770
string method that just prints out the
157

157

00:06:57,770  -->  00:07:00,199
instance reference for a regular class
158

158

00:07:00,199  -->  00:07:02,900
that isn't a data class. So let's try the
159

159

00:07:02,900  -->  00:07:05,180
equals method, you'll recall that when we
160

160

00:07:05,180  -->  00:07:07,490
use the structural equality operator
161

161

00:07:07,490  -->  00:07:10,310
which is the equals operator and Kotlin
162

162

00:07:10,310  -->  00:07:12,770
it's calling the equals function under
163

163

00:07:12,770  -->  00:07:15,290
the covers to do the comparison, so let's
164

164

00:07:15,290  -->  00:07:17,900
try this out with the employee class
165

165

00:07:17,900  -->  00:07:21,350
first. So we have an employee called John,
166

166

00:07:21,350  -->  00:07:24,650
let's create another instance and two
167

167

00:07:24,650  -->  00:07:28,070
equals employee and we'll also call him
168

168

00:07:28,070  -->  00:07:33,639
John and we're going to print out
169

169

00:07:33,639  -->  00:07:37,160
emp equals emp2. So let's have a look at what
170

170

00:07:37,160  -->  00:07:38,900
that gives us, now we're going to expect
171

171

00:07:38,900  -->  00:07:40,639
false and the reason we're going to
172

172

00:07:40,639  -->  00:07:43,010
expect false right now, even though these
173

173

00:07:43,010  -->  00:07:45,229
two are structurally equal is that we
174

174

00:07:45,229  -->  00:07:48,050
have not overridden the equals function
175

175

00:07:48,050  -->  00:07:50,810
in the employee class. So right now, the
176

176

00:07:50,810  -->  00:07:53,300
dot equals function is just going to
177

177

00:07:53,300  -->  00:07:55,190
compare the two references and of course
178

178

00:07:55,190  -->  00:07:56,780
they're not going to be equal because
179

179

00:07:56,780  -->  00:07:58,099
we're dealing with two distinct
180

180

00:07:58,099  -->  00:08:03,289
instances, so let's run and we get the
181

181

00:08:03,289  -->  00:08:05,720
expected false. Now let's try the same
182

182

00:08:05,720  -->  00:08:09,639
thing with car, so we'll say val car two
183

183

00:08:09,639  -->  00:08:13,120
equals and I'll just copy this
184

184

00:08:13,120  -->  00:08:21,289
declaration here and now let's print car
185

185

00:08:21,289  -->  00:08:26,419
equals car two. Now just like with the
186

186

00:08:26,419  -->  00:08:28,160
employee class, we haven't overridden the
187

187

00:08:28,160  -->  00:08:31,789
equals function inside car, but let's see
188

188

00:08:31,789  -->  00:08:36,709
what we get and in this case you'll see
189

189

00:08:36,709  -->  00:08:38,719
that we get true, even though we haven't
190

190

00:08:38,719  -->  00:08:41,209
overridden equals, because when you're
191

191

00:08:41,209  -->  00:08:43,070
working with data classes, the equals
192

192

00:08:43,070  -->  00:08:44,810
function is one of the functions you get
193

193

00:08:44,810  -->  00:08:47,480
for free. Now once again, if you wanted to
194

194

00:08:47,480  -->  00:08:50,000
override the equals function, because
195

195

00:08:50,000  -->  00:08:52,670
let's say you only wanted cars to be
196

196

00:08:52,670  -->  00:08:55,040
equal for some strange reason if they have the
197

197

00:08:55,040  -->  00:08:56,720
in color, then you can do that you can
198

198

00:08:56,720  -->  00:08:59,120
just go ahead and override the equals
199

199

00:08:59,120  -->  00:09:02,959
function in the car class and you'll get
200

200

00:09:02,959  -->  00:09:05,180
what you want to get, but if you want
201

201

00:09:05,180  -->  00:09:06,800
equals to do what it normally does and
202

202

00:09:06,800  -->  00:09:08,750
you get that for free, you don't have to
203

203

00:09:08,750  -->  00:09:12,199
override the equals function here, you'll
204

204

00:09:12,199  -->  00:09:14,089
see this class is still totally empty,
205

205

00:09:14,089  -->  00:09:17,690
yet we have a nice two string function
206

206

00:09:17,690  -->  00:09:19,970
and also we have structural equality
207

207

00:09:19,970  -->  00:09:22,220
working the way we want it to work. Okay,
208

208

00:09:22,220  -->  00:09:24,500
now I mention that you also get a copy
209

209

00:09:24,500  -->  00:09:27,259
function for free in data classes and
210

210

00:09:27,259  -->  00:09:30,199
that lets us make a copy of a car
211

211

00:09:30,199  -->  00:09:32,839
instance. So let's give that a shot, let's
212

212

00:09:32,839  -->  00:09:39,500
say val car 3 equals car dot copy and
213

213

00:09:39,500  -->  00:09:45,910
then we'll print line car 3, see what we get.
214

214

00:09:45,910  -->  00:09:49,519
Ok, so now we have a car that structurally
215

215

00:09:49,519  -->  00:09:53,540
equal to car, the first car we created so
216

216

00:09:53,540  -->  00:09:55,850
car 3 is structurally equal to car.
217

217

00:09:55,850  -->  00:09:57,740
All the values have been copied over into
218

218

00:09:57,740  -->  00:10:01,250
the new instance, now that's great but
219

219

00:10:01,250  -->  00:10:03,380
what if we want to copy the car instance
220

220

00:10:03,380  -->  00:10:06,170
but we want to change the year to 2016
221

221

00:10:06,170  -->  00:10:07,839
and keep all the other values the same?
222

222

00:10:07,839  -->  00:10:10,370
Well, that's not a problem we can do the
223

223

00:10:10,370  -->  00:10:14,660
following, we can say val car 4 equals
224

224

00:10:14,660  -->  00:10:18,050
car dot copy and then in here we can say
225

225

00:10:18,050  -->  00:10:19,819
yeah, we want to copy it but this time
226

226

00:10:19,819  -->  00:10:23,420
you want the year to be 2016. So keep all
227

227

00:10:23,420  -->  00:10:25,730
the other values the same except for the
228

228

00:10:25,730  -->  00:10:28,579
year, set that's 2016 and then let's
229

229

00:10:28,579  -->  00:10:35,870
print out car 4, we'll run and we'll see
230

230

00:10:35,870  -->  00:10:38,120
that we have a car instance here,
231

231

00:10:38,120  -->  00:10:40,490
the color is blue the model is Toyota, but
232

232

00:10:40,490  -->  00:10:44,300
this time in the year is 2016. So all we
233

233

00:10:44,300  -->  00:10:46,040
have to do is specify what we want
234

234

00:10:46,040  -->  00:10:48,350
changed, if we also wanted to change the
235

235

00:10:48,350  -->  00:10:50,480
color, we could just add that here, we
236

236

00:10:50,480  -->  00:10:52,759
could say oh, we want the color to be
237

237

00:10:52,759  -->  00:10:56,420
green too, we don't want it to be
238

238

00:10:56,420  -->  00:11:01,910
whatever it was blue. Let's run and now
239

239

00:11:01,910  -->  00:11:04,760
the new instance has green it's still a
240

240

00:11:04,760  -->  00:11:08,250
Toyota and the year is 2016.
241

241

00:11:08,250  -->  00:11:10,470
So the names that you use in here of course
242

242

00:11:10,470  -->  00:11:14,940
have to match your property names.
243

243

00:11:14,940  -->  00:11:16,590
Now, you'll notice that because we're using
244

244

00:11:16,590  -->  00:11:18,750
the names the properties could be in any
245

245

00:11:18,750  -->  00:11:22,260
order down here in the primary
246

246

00:11:22,260  -->  00:11:24,420
constructor signature, we're expecting
247

247

00:11:24,420  -->  00:11:26,310
the color first and the year right at
248

248

00:11:26,310  -->  00:11:27,990
the end, but up here we actually
249

249

00:11:27,990  -->  00:11:30,120
specified the year first and the color
250

250

00:11:30,120  -->  00:11:32,100
second and that's because we're using
251

251

00:11:32,100  -->  00:11:33,960
name parameters and so there's no
252

252

00:11:33,960  -->  00:11:36,690
confusion. Alright so that's a taste of
253

253

00:11:36,690  -->  00:11:39,210
data classes, so they're great if you
254

254

00:11:39,210  -->  00:11:41,040
have a class that's basically storing
255

255

00:11:41,040  -->  00:11:43,140
state information and not doing anything
256

256

00:11:43,140  -->  00:11:46,410
else. So remember in here, you've got all
257

257

00:11:46,410  -->  00:11:48,480
of your gets and sets and you've got
258

258

00:11:48,480  -->  00:11:50,880
an equals function, a hash code function
259

259

00:11:50,880  -->  00:11:52,560
a to string and you've got a copy
260

260

00:11:52,560  -->  00:11:55,620
function and all you had to do is write
261

261

00:11:55,620  -->  00:11:57,480
two lines of code and one of them is a
262

262

00:11:57,480  -->  00:12:00,420
closing brace, so that's Kotlin at its
263

263

00:12:00,420  -->  00:12:02,730
best in terms of removing boilerplate
264

264

00:12:02,730  -->  00:12:05,000
code, there's nothing in here.
265

265

00:12:05,000  -->  00:12:08,690
Alright! I'll see you in the next video.
