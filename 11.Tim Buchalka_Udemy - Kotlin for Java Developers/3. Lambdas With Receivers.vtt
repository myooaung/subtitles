WEBVTT
1
1

00:00:04.680  -->  00:00:07.200
Alright, in this video we're going to
2

2

00:00:07.200  -->  00:00:09.539
take a look at what's called lambdas
3

3

00:00:09.539  -->  00:00:13.289
with receivers and we're going to start
4

4

00:00:13.289  -->  00:00:16.529
with what they are and to learn about
5

5

00:00:16.529  -->  00:00:18.510
that we're going to take a look at the
6

6

00:00:18.510  -->  00:00:21.570
with function now I've created a new
7

7

00:00:21.570  -->  00:00:25.170
project, a new package etc. I've copied
8

8

00:00:25.170  -->  00:00:27.660
the declaration of the employee class
9

9

00:00:27.660  -->  00:00:30.060
and I also have a list here, we're going
10

10

00:00:30.060  -->  00:00:32.520
to use this list later, but for now we're
11

11

00:00:32.520  -->  00:00:33.780
going to take a look at the with
12

12

00:00:33.780  -->  00:00:36.840
function and so we're going to start by
13

13

00:00:36.840  -->  00:00:38.430
writing a function that writes the
14

14

00:00:38.430  -->  00:00:43.770
numbers 1 to 100, separated by commas,
15

15

00:00:43.770  -->  00:00:46.860
so I'll do that here and I'll say fun count
16

16

00:00:46.860  -->  00:00:49.559
to 100 and this function is going to
17

17

00:00:49.559  -->  00:00:53.239
return a string and we'll say  val
18

18

00:00:53.239  -->  00:00:59.399
numbers equals stringbuilder and then
19

19

00:00:59.399  -->  00:01:04.710
we'll say for i in 1 to 99 and I'll tell
20

20

00:01:04.710  -->  00:01:07.560
you why why I'm only going up to 99 in a
21

21

00:01:07.560  -->  00:01:10.909
minute and I'll say numbers dot append i
22

22

00:01:10.909  -->  00:01:15.510
and then we want each number separated
23

23

00:01:15.510  -->  00:01:18.270
by a comma, so we'll also append a comma
24

24

00:01:18.270  -->  00:01:21.960
numbers dot append and we'll have a
25

25

00:01:21.960  -->  00:01:25.110
comma then a space. Now we also want a
26

26

00:01:25.110  -->  00:01:27.689
hundred but we don't want a comma after
27

27

00:01:27.689  -->  00:01:29.970
100 and I don't want to have to check
28

28

00:01:29.970  -->  00:01:32.610
for 100 in the loop because that
29

29

00:01:32.610  -->  00:01:34.830
wouldn't be really efficient, so we know
30

30

00:01:34.830  -->  00:01:36.810
we just want to add 100 at the end so
31

31

00:01:36.810  -->  00:01:40.170
when we're done, we'll just append 100
32

32

00:01:40.170  -->  00:01:42.119
and be done with it and then we'll
33

33

00:01:42.119  -->  00:01:46.590
return numbers dot to string. So that's
34

34

00:01:46.590  -->  00:01:50.130
our count to 100 function, so let's call
35

35

00:01:50.130  -->  00:01:52.979
this function from the main function and
36

36

00:01:52.979  -->  00:01:54.990
see what we get here, so I'll say print
37

37

00:01:54.990  -->  00:01:58.140
line count to 100 because remember the
38

38

00:01:58.140  -->  00:02:06.430
function returns a string and we'll run
39

39

00:02:06.430  -->  00:02:09.430
and we get the numbers 1 to 100
40

40

00:02:09.430  -->  00:02:13.530
separated by commas, so 1 to 100,
41

41

00:02:13.530  -->  00:02:17.080
nothing fantastic going on here but
42

42

00:02:17.080  -->  00:02:19.500
let's go back and look at the function now.
43

43

00:02:19.500  -->  00:02:21.250
Now inside the function we're
44

44

00:02:21.250  -->  00:02:23.500
referring to the numbers variable quite
45

45

00:02:23.500  -->  00:02:26.170
a bit, so is there a way that we could
46

46

00:02:26.170  -->  00:02:28.270
make this more concise and save on
47

47

00:02:28.270  -->  00:02:31.270
typing? Can we write this function in a
48

48

00:02:31.270  -->  00:02:32.770
way that we don't have to keep repeating
49

49

00:02:32.770  -->  00:02:35.410
numbers numbers numbers? Well, yes we can
50

50

00:02:35.410  -->  00:02:38.620
we can use the with function, when you
51

51

00:02:38.620  -->  00:02:40.690
use the with function, you pass an
52

52

00:02:40.690  -->  00:02:43.870
instance and the lambda to the function
53

53

00:02:43.870  -->  00:02:46.240
and within the lambda, you don't have to
54

54

00:02:46.240  -->  00:02:48.520
refer to the instance when you want to
55

55

00:02:48.520  -->  00:02:50.920
call one of its member functions, you can
56

56

00:02:50.920  -->  00:02:52.660
just call the member functions without
57

57

00:02:52.660  -->  00:02:55.330
having to invoke them using the instance.
58

58

00:02:55.330  -->  00:02:57.700
So let's take a look at what I mean here,
59

59

00:02:57.700  -->  00:02:59.380
I'm going to copy and paste this
60

60

00:02:59.380  -->  00:03:01.270
function so that we have this version
61

61

00:03:01.270  -->  00:03:05.110
for comparison purposes, so I'll paste it
62

62

00:03:05.110  -->  00:03:06.730
here and then I'm going to have to
63

63

00:03:06.730  -->  00:03:08.650
obviously comment one of these versions
64

64

00:03:08.650  -->  00:03:15.459
out, I'll comment out the lower one.
65

65

00:03:15.459  -->  00:03:18.070
Okay, so now let's rewrite this version of the
66

66

00:03:18.070  -->  00:03:21.760
function so that we're using with.
67

67

00:03:21.760  -->  00:03:23.380
So we're going to keep the val numbers
68

68

00:03:23.380  -->  00:03:24.850
equals stringbuilder because there's not
69

69

00:03:24.850  -->  00:03:26.769
really anything we can do with that,
70

70

00:03:26.769  -->  00:03:29.140
we need to declare the variable here for
71

71

00:03:29.140  -->  00:03:35.560
now and I'm going to say return with and
72

72

00:03:35.560  -->  00:03:38.050
then I'm going to pass numbers remember
73

73

00:03:38.050  -->  00:03:39.880
that I said the with function takes an
74

74

00:03:39.880  -->  00:03:42.340
instance and a lambda, so that's the
75

75

00:03:42.340  -->  00:03:43.780
instance we're passing and then I'm
76

76

00:03:43.780  -->  00:03:46.590
going to open up a lambda here and
77

77

00:03:46.590  -->  00:03:49.330
intellij added the closing curly brace
78

78

00:03:49.330  -->  00:03:52.030
for me and inside is our lambda.
79

79

00:03:52.030  -->  00:03:53.980
Now, we've put the lambda outside the
80

80

00:03:53.980  -->  00:03:56.230
parentheses, remember that I said in the
81

81

00:03:56.230  -->  00:03:58.120
last video that when the lambda is the
82

82

00:03:58.120  -->  00:04:00.160
last parameter, you can put it outside
83

83

00:04:00.160  -->  00:04:02.739
the parentheses and that's what we've
84

84

00:04:02.739  -->  00:04:04.690
done, because it's clearer, I mean we
85

85

00:04:04.690  -->  00:04:08.260
could go like this, we could say comma
86

86

00:04:08.260  -->  00:04:10.980
and then come down here and put a
87

87

00:04:10.980  -->  00:04:14.230
parentheses and that that works but I
88

88

00:04:14.230  -->  00:04:16.660
think it's clearer if you write it like
89

89

00:04:16.660  -->  00:04:18.459
this and this is how you're going to see
90

90

00:04:18.459  -->  00:04:20.230
it written this is the common
91

91

00:04:20.230  -->  00:04:22.480
way of writing the lambda when it's the
92

92

00:04:22.480  -->  00:04:26.170
last argument to a function. Okay, so now
93

93

00:04:26.170  -->  00:04:27.940
that we're using the width function,
94

94

00:04:27.940  -->  00:04:30.670
we don't have to refer to the instance when
95

95

00:04:30.670  -->  00:04:32.680
we want to call one of its member
96

96

00:04:32.680  -->  00:04:34.470
functions, so we can actually remove
97

97

00:04:34.470  -->  00:04:38.610
numbers from here, we can remove numbers
98

98

00:04:38.610  -->  00:04:42.460
we can remove numbers from here and here
99

99

00:04:42.460  -->  00:04:43.810
we can remove the return statement
100

100

00:04:43.810  -->  00:04:45.880
because now we're returning the result
101

101

00:04:45.880  -->  00:04:48.520
of the with, so we'll just take this
102

102

00:04:48.520  -->  00:04:52.030
whole thing out and now you can see that
103

103

00:04:52.030  -->  00:04:54.640
this is more concise if we compare it to
104

104

00:04:54.640  -->  00:04:56.290
the original version, where we're using
105

105

00:04:56.290  -->  00:04:58.240
numbers we save on a little bit of
106

106

00:04:58.240  -->  00:05:03.940
typing up here, so let's run and we'll
107

107

00:05:03.940  -->  00:05:06.580
see that we still get our list of 1 to
108

108

00:05:06.580  -->  00:05:10.360
100. Okay, so as I said inside the lambda
109

109

00:05:10.360  -->  00:05:12.400
we're not using numbers when we invoke
110

110

00:05:12.400  -->  00:05:14.380
one of its member functions, we're just
111

111

00:05:14.380  -->  00:05:16.420
going ahead and calling the function,
112

112

00:05:16.420  -->  00:05:18.130
so the technical way of saying this is that
113

113

00:05:18.130  -->  00:05:21.760
with converts the instance that you pass
114

114

00:05:21.760  -->  00:05:24.910
to it into a receiver and inside the
115

115

00:05:24.910  -->  00:05:27.010
lambda, you don't have to refer to the
116

116

00:05:27.010  -->  00:05:29.800
receiver object but you can and if you
117

117

00:05:29.800  -->  00:05:31.750
want to we could do this we could say
118

118

00:05:31.750  -->  00:05:36.070
this dot and if we do that this inside
119

119

00:05:36.070  -->  00:05:38.200
the lambda is referring to the instance
120

120

00:05:38.200  -->  00:05:40.900
that you pass to it, so this is the
121

121

00:05:40.900  -->  00:05:43.030
numbers instance but you don't have to
122

122

00:05:43.030  -->  00:05:45.730
do that and we're not going to. So once
123

123

00:05:45.730  -->  00:05:48.400
again what's happening here is with is
124

124

00:05:48.400  -->  00:05:50.650
converting this instance into the
125

125

00:05:50.650  -->  00:05:52.960
receiver object for this lambda and
126

126

00:05:52.960  -->  00:05:55.690
inside the lambda you don't have to
127

127

00:05:55.690  -->  00:05:57.670
refer to the receiver object when you
128

128

00:05:57.670  -->  00:05:59.590
want to invoke one of its member
129

129

00:05:59.590  -->  00:06:02.080
functions or get the value of one of its
130

130

00:06:02.080  -->  00:06:04.420
properties, we're not doing that here but
131

131

00:06:04.420  -->  00:06:06.550
you wouldn't have to refer to it.
132

132

00:06:06.550  -->  00:06:07.990
Now I said we couldn't really do anything
133

133

00:06:07.990  -->  00:06:10.180
about this line, but we can we don't have
134

134

00:06:10.180  -->  00:06:12.220
to do this in two steps, we could go like
135

135

00:06:12.220  -->  00:06:14.590
that and just directly create a
136

136

00:06:14.590  -->  00:06:20.230
string builder and pass that to with so
137

137

00:06:20.230  -->  00:06:23.230
that works its equivalent thing.
138

138

00:06:23.230  -->  00:06:24.940
Now, looking at this function now is there a
139

139

00:06:24.940  -->  00:06:26.590
way that we can make this even more
140

140

00:06:26.590  -->  00:06:28.870
concise? Think about this for a minute,
141

141

00:06:28.870  -->  00:06:33.880
all this function is doing is returning a
142

142

00:06:33.880  -->  00:06:36.460
value and what can we do when all the
143

143

00:06:36.460  -->  00:06:38.170
function does is return a value,
144

144

00:06:38.170  -->  00:06:40.030
it doesn't do anything else? Well we can use
145

145

00:06:40.030  -->  00:06:42.220
an expression body, we don't have to use
146

146

00:06:42.220  -->  00:06:44.080
a block body so I'm going to go ahead
147

147

00:06:44.080  -->  00:06:47.620
and do that, so I'm going to say and take
148

148

00:06:47.620  -->  00:06:50.950
this from here, take that away from there,
149

149

00:06:50.950  -->  00:06:53.350
I'm going to use equals and we no longer
150

150

00:06:53.350  -->  00:06:56.950
need the return statement and that works
151

151

00:06:56.950  -->  00:06:58.360
and now that we're using an expression
152

152

00:06:58.360  -->  00:07:01.480
body, we don't need the type either,
153

153

00:07:01.480  -->  00:07:03.910
so there you go this is much more concise.
154

154

00:07:03.910  -->  00:07:06.130
Now if we compare to our original
155

155

00:07:06.130  -->  00:07:08.140
version, we can see now that we're having
156

156

00:07:08.140  -->  00:07:13.020
to do a lot less typing and if we run,
157

157

00:07:13.020  -->  00:07:16.690
we'll see that we get our usual one to
158

158

00:07:16.690  -->  00:07:18.880
one hundred printed separated by commas.
159

159

00:07:18.880  -->  00:07:21.640
Now, maybe you think the original version
160

160

00:07:21.640  -->  00:07:23.800
is clearer to read and this is a
161

161

00:07:23.800  -->  00:07:26.140
preference thing. You might think this is
162

162

00:07:26.140  -->  00:07:28.390
clear what's going on and if you do you
163

163

00:07:28.390  -->  00:07:31.150
can continue to write it in this way but
164

164

00:07:31.150  -->  00:07:33.640
this is more concise it's more Kotlin
165

165

00:07:33.640  -->  00:07:36.400
like. Okay, so that's the with function,
166

166

00:07:36.400  -->  00:07:37.840
now we're going to take a look at
167

167

00:07:37.840  -->  00:07:41.200
another function called apply, now the
168

168

00:07:41.200  -->  00:07:43.870
apply function works the same way as with
169

169

00:07:43.870  -->  00:07:46.540
but it always returns the reciever
170

170

00:07:46.540  -->  00:07:49.960
object. So in our case instead of using
171

171

00:07:49.960  -->  00:07:54.250
with and calling two strings within the
172

172

00:07:54.250  -->  00:07:58.090
lambda we can use apply and apply will
173

173

00:07:58.090  -->  00:07:59.980
return the stringbuilder and then we'll
174

174

00:07:59.980  -->  00:08:02.670
call to string on the stringbuilder,
175

175

00:08:02.670  -->  00:08:05.620
I'm going to copy this and paste it just
176

176

00:08:05.620  -->  00:08:08.290
like I did before, so that you have all
177

177

00:08:08.290  -->  00:08:11.320
the versions and I'll comment this one
178

178

00:08:11.320  -->  00:08:15.850
out and then we'll go up here and so now
179

179

00:08:15.850  -->  00:08:18.490
we're going to use apply rather than with,
180

180

00:08:18.490  -->  00:08:22.420
so this time, we don't pass the instance
181

181

00:08:22.420  -->  00:08:25.750
to apply, we use an instance and we
182

182

00:08:25.750  -->  00:08:29.380
invoke apply on it. So I'm going to say
183

183

00:08:29.380  -->  00:08:37.090
stringbuilder dot apply and in this case
184

184

00:08:37.090  -->  00:08:40.860
you just pass it a lambda and now this
185

185

00:08:40.860  -->  00:08:43.900
lambda will always return the instance
186

186

00:08:43.900  -->  00:08:47.769
that you invoke apply with so we don't want to
187

187

00:08:47.769  -->  00:08:51.279
call to string in here, we're going to
188

188

00:08:51.279  -->  00:08:58.809
invoke it out here. So let's run now and
189

189

00:08:58.809  -->  00:09:01.899
we'll see that we get our usual 1 to 100
190

190

00:09:01.899  -->  00:09:05.860
printed. Alright, so that's how you use
191

191

00:09:05.860  -->  00:09:08.529
receiver objects in lambdas, if you see
192

192

00:09:08.529  -->  00:09:10.509
the term receiver object this is what
193

193

00:09:10.509  -->  00:09:12.670
it's referring to, it's referring to the
194

194

00:09:12.670  -->  00:09:15.399
object that's been passed to a lambda
195

195

00:09:15.399  -->  00:09:17.799
and in some cases you don't have to
196

196

00:09:17.799  -->  00:09:21.429
refer to that object explicitly. So now
197

197

00:09:21.429  -->  00:09:23.889
let's take a look at return statements
198

198

00:09:23.889  -->  00:09:26.410
and lambdas and now we're going to start
199

199

00:09:26.410  -->  00:09:29.860
to use our employees list, so let's
200

200

00:09:29.860  -->  00:09:32.079
suppose we want to find out if any of
201

201

00:09:32.079  -->  00:09:33.999
the employees have the last name Wilson
202

202

00:09:33.999  -->  00:09:36.939
now you're going to see when we look at
203

203

00:09:36.939  -->  00:09:39.429
collections that there's a function you
204

204

00:09:39.429  -->  00:09:41.170
can use it'll just tell you this right
205

205

00:09:41.170  -->  00:09:42.759
away but let's pretend we don't know
206

206

00:09:42.759  -->  00:09:45.489
about the function, the function is
207

207

00:09:45.489  -->  00:09:47.829
called find. So let's pretend we don't
208

208

00:09:47.829  -->  00:09:49.420
know about that function and we'll write
209

209

00:09:49.420  -->  00:09:51.610
our own function and it will have the
210

210

00:09:51.610  -->  00:09:53.529
function print out whether it finds the
211

211

00:09:53.529  -->  00:09:55.449
employee or not so at least it's doing a
212

212

00:09:55.449  -->  00:09:57.429
little more than just searching
213

213

00:09:57.429  -->  00:09:59.559
collection and finding whether an
214

214

00:09:59.559  -->  00:10:01.720
instance exists for that matches a
215

215

00:10:01.720  -->  00:10:04.119
certain criteria. So we'll call the
216

216

00:10:04.119  -->  00:10:11.230
function fun find by last name and it
217

217

00:10:11.230  -->  00:10:14.920
will take our employees list, so we'll
218

218

00:10:14.920  -->  00:10:17.110
say employees which is a list of
219

219

00:10:17.110  -->  00:10:22.449
employee and it will also take the name
220

220

00:10:22.449  -->  00:10:28.199
of the- name that we want to find and
221

221

00:10:28.199  -->  00:10:30.910
then we'll just loop, will say for
222

222

00:10:30.910  -->  00:10:38.889
employee in employees if the employees
223

223

00:10:38.889  -->  00:10:42.999
last name equals the last name we're
224

224

00:10:42.999  -->  00:10:46.179
looking for and we found an instance of
225

225

00:10:46.179  -->  00:10:48.220
an employee that has a last name
226

226

00:10:48.220  -->  00:10:50.739
whatever we've passed in, so we'll say
227

227

00:10:50.739  -->  00:10:55.839
print line yes, there's an employee with
228

228

00:10:55.839  -->  00:11:00.600
the last name last name
229

229

00:11:00.600  -->  00:11:03.149
and we'll return because there's there's
230

230

00:11:03.149  -->  00:11:06.529
no need to keep looping here, but if we
231

231

00:11:06.529  -->  00:11:09.180
finish the loop and we haven't found an
232

232

00:11:09.180  -->  00:11:11.220
employee with the matching last name
233

233

00:11:11.220  -->  00:11:12.540
then we'll print nope
234

234

00:11:12.540  -->  00:11:18.889
there is no employee with the last name
235

235

00:11:18.889  -->  00:11:23.040
last name. So this is straightforward
236

236

00:11:23.040  -->  00:11:25.889
stuff. So now let's call this function
237

237

00:11:25.889  -->  00:11:28.860
and we'll call it with a last name we
238

238

00:11:28.860  -->  00:11:30.480
know we're going to find we'll call it
239

239

00:11:30.480  -->  00:11:31.230
with Wilson
240

240

00:11:31.230  -->  00:11:33.180
and we'll call it with a last name that
241

241

00:11:33.180  -->  00:11:36.240
we know is not in the list, so we'll say
242

242

00:11:36.240  -->  00:11:40.620
find by last name employees in Wilson
243

243

00:11:40.620  -->  00:11:44.310
and we'll say find by last name
244

244

00:11:44.310  -->  00:11:51.420
employees and Smithson. So we know we're
245

245

00:11:51.420  -->  00:11:53.370
going to find an employee with the last
246

246

00:11:53.370  -->  00:11:55.259
name Wilson and we know we're not going
247

247

00:11:55.259  -->  00:11:57.269
to find an employee with the last name
248

248

00:11:57.269  -->  00:12:00.029
Smithson, so I'll go ahead and comment
249

249

00:12:00.029  -->  00:12:02.040
out printing out the 100 numbers because
250

250

00:12:02.040  -->  00:12:03.959
I don't think we need to see those again
251

251

00:12:03.959  -->  00:12:09.149
and we'll run. And sure enough we see
252

252

00:12:09.149  -->  00:12:10.949
that yes there is an employee with the
253

253

00:12:10.949  -->  00:12:13.350
last name Wilson and note there's no
254

254

00:12:13.350  -->  00:12:16.529
employee with the last name Smithson.
255

255

00:12:16.529  -->  00:12:19.139
Now, of course we can improve this code here
256

256

00:12:19.139  -->  00:12:20.519
and we're going to do that because we
257

257

00:12:20.519  -->  00:12:23.220
want to use a lambda, so we'll use for
258

258

00:12:23.220  -->  00:12:29.779
each instead, so we'll say employees dot
259

259

00:12:29.779  -->  00:12:33.509
for each and we don't need that anymore,
260

260

00:12:33.509  -->  00:12:36.269
so this is now going to be a lambda so
261

261

00:12:36.269  -->  00:12:38.279
instead of using employee, we're going to
262

262

00:12:38.279  -->  00:12:42.720
refer to each employee by it so we've
263

263

00:12:42.720  -->  00:12:44.970
converted this to using a lambda now and
264

264

00:12:44.970  -->  00:12:46.680
it's doing the same thing except we're
265

265

00:12:46.680  -->  00:12:49.110
referring to each employee using it and
266

266

00:12:49.110  -->  00:12:55.079
of course if we run, we're going to see
267

267

00:12:55.079  -->  00:12:57.329
the same thing, but you'll see that we
268

268

00:12:57.329  -->  00:12:59.279
used a return statement in the lambda
269

269

00:12:59.279  -->  00:13:02.880
here and obviously when that return was
270

270

00:13:02.880  -->  00:13:04.769
executed it didn't just returned from
271

271

00:13:04.769  -->  00:13:07.350
the lambda, it also returned from the
272

272

00:13:07.350  -->  00:13:09.899
function because if it hadn't also
273

273

00:13:09.899  -->  00:13:12.149
returned from the function in the case
274

274

00:13:12.149  -->  00:13:14.610
of Wilson, we would also be seeing the
275

275

00:13:14.610  -->  00:13:17.370
nope line printed but we don't, we just
276

276

00:13:17.370  -->  00:13:20.190
see the yes line printed. So what's
277

277

00:13:20.190  -->  00:13:21.990
happening here is when the lambda is
278

278

00:13:21.990  -->  00:13:24.420
inside the function, it's returning from
279

279

00:13:24.420  -->  00:13:27.450
the lambda and the function. Now one
280

280

00:13:27.450  -->  00:13:30.240
thing to know you can only use a return
281

281

00:13:30.240  -->  00:13:33.029
like this where the lambda is going to
282

282

00:13:33.029  -->  00:13:35.040
return from both the lambda and the
283

283

00:13:35.040  -->  00:13:38.010
function when the function that is
284

284

00:13:38.010  -->  00:13:41.100
taking the lambda is in lined.
285

285

00:13:41.100  -->  00:13:44.190
Now in this case the lambda is being
286

286

00:13:44.190  -->  00:13:46.529
used with the for each function, this is
287

287

00:13:46.529  -->  00:13:48.329
actually being passed to the for each
288

288

00:13:48.329  -->  00:13:51.209
function but since for each only takes a
289

289

00:13:51.209  -->  00:13:53.070
lambda, we don't have to put it inside
290

290

00:13:53.070  -->  00:13:56.579
parenthesis and so for each is accepting
291

291

00:13:56.579  -->  00:14:00.390
the lambda and the for each function is inlined.
292

292

00:14:00.390  -->  00:14:04.260
Now, in this case because the return is
293

293

00:14:04.260  -->  00:14:06.209
returning from both the lambda and the
294

294

00:14:06.209  -->  00:14:09.600
function, it's called a non-local return
295

295

00:14:09.600  -->  00:14:12.750
so the question becomes is there a way
296

296

00:14:12.750  -->  00:14:16.290
to make it a local return? Is there a way
297

297

00:14:16.290  -->  00:14:18.360
to say, well actually we just want to
298

298

00:14:18.360  -->  00:14:20.399
return from the lambda, we don't want
299

299

00:14:20.399  -->  00:14:23.250
this behavior of it's returning from the
300

300

00:14:23.250  -->  00:14:24.930
lambda and from the function and the
301

301

00:14:24.930  -->  00:14:28.110
answer is yes there is and you can make
302

302

00:14:28.110  -->  00:14:31.649
this a local return by using a label.
303

303

00:14:31.649  -->  00:14:34.140
So if we want the return to return from the
304

304

00:14:34.140  -->  00:14:37.079
for each but not from the function, so if
305

305

00:14:37.079  -->  00:14:38.910
when the lambda returns we want it to
306

306

00:14:38.910  -->  00:14:41.010
come out of the for reach and continue
307

307

00:14:41.010  -->  00:14:43.500
executing within the function, we have to
308

308

00:14:43.500  -->  00:14:46.529
label this lambda and we can do that
309

309

00:14:46.529  -->  00:14:50.220
you've seen labels before I'll call
310

310

00:14:50.220  -->  00:14:52.320
it return block and then use the at
311

311

00:14:52.320  -->  00:14:56.910
symbol. So now this lambda is labeled
312

312

00:14:56.910  -->  00:14:59.220
with return block and if we want to just
313

313

00:14:59.220  -->  00:15:01.890
return from the lambda on the return,
314

314

00:15:01.890  -->  00:15:05.790
we say return at return block and now
315

315

00:15:05.790  -->  00:15:08.310
this return statement is a local return.
316

316

00:15:08.310  -->  00:15:10.920
When it's executed, it will return from
317

317

00:15:10.920  -->  00:15:13.470
the for each from the lambda but it will
318

318

00:15:13.470  -->  00:15:16.560
not return from the function and so when
319

319

00:15:16.560  -->  00:15:18.839
we find an employee with a matching last
320

320

00:15:18.839  -->  00:15:21.480
name, the for each will stop but then
321

321

00:15:21.480  -->  00:15:23.399
we'll continue executing the function so
322

322

00:15:23.399  -->  00:15:26.279
we're not just going to see the yes line
323

323

00:15:26.279  -->  00:15:28.110
we're also going to see the nope line
324

324

00:15:28.110  -->  00:15:30.630
printed and we saw similar syntax like
325

325

00:15:30.630  -->  00:15:32.790
this when we were labeling loops and
326

326

00:15:32.790  -->  00:15:36.000
then using a label with continue and break
327

327

00:15:36.000  -->  00:15:38.730
statements. Alright, so now when we run
328

328

00:15:38.730  -->  00:15:40.529
we're going we're going to expect to see
329

329

00:15:40.529  -->  00:15:42.570
you the yes and the nope line printed
330

330

00:15:42.570  -->  00:15:47.280
for Wilson. So let's go ahead and run
331

331

00:15:47.280  -->  00:15:50.280
and sure enough now that this is a local
332

332

00:15:50.280  -->  00:15:52.260
return, we're seeing yes there's an
333

333

00:15:52.260  -->  00:15:54.270
employee with the last name Wilson and
334

334

00:15:54.270  -->  00:15:56.220
nope there's no employee with the last
335

335

00:15:56.220  -->  00:15:58.050
name Wilson and we're seeing that
336

336

00:15:58.050  -->  00:15:59.910
because the return is now just returning
337

337

00:15:59.910  -->  00:16:02.040
from a lambda, it's not also returning
338

338

00:16:02.040  -->  00:16:04.740
from the function. Now another time that
339

339

00:16:04.740  -->  00:16:07.020
labels can come in handy is when you're
340

340

00:16:07.020  -->  00:16:11.040
using nested with or apply statements,
341

341

00:16:11.040  -->  00:16:13.920
so let's try one of those, we'll go back to
342

342

00:16:13.920  -->  00:16:16.440
our main function and let's say we have
343

343

00:16:16.440  -->  00:16:20.220
some string and we're going to call
344

344

00:16:20.220  -->  00:16:25.050
apply on it and then inside the apply,
345

345

00:16:25.050  -->  00:16:27.420
we have another string and we also want to
346

346

00:16:27.420  -->  00:16:30.750
call apply on that string and then
347

347

00:16:30.750  -->  00:16:33.750
inside here, we want to print line this
348

348

00:16:33.750  -->  00:16:38.430
dot to lowercase. Now this to lowercase
349

349

00:16:38.430  -->  00:16:41.310
call is going to operate on another
350

350

00:16:41.310  -->  00:16:44.040
string because we're in an applied
351

351

00:16:44.040  -->  00:16:48.540
lambda and in this lambda here,
352

352

00:16:48.540  -->  00:16:51.090
the receiver object is another string,
353

353

00:16:51.090  -->  00:16:54.720
it's not some string, so right now another
354

354

00:16:54.720  -->  00:16:57.150
string will be lowercased and that's
355

355

00:16:57.150  -->  00:16:58.950
fine in fact we don't even have to use
356

356

00:16:58.950  -->  00:17:01.470
this, we can just use to lowercase and
357

357

00:17:01.470  -->  00:17:04.319
this refers to the instance that will be
358

358

00:17:04.319  -->  00:17:07.770
used to invoke to lowercase will be
359

359

00:17:07.770  -->  00:17:09.689
another string. Now let's say that within
360

360

00:17:09.689  -->  00:17:12.270
the supply block, we want to uppercase
361

361

00:17:12.270  -->  00:17:14.610
some string, how would we do that?
362

362

00:17:14.610  -->  00:17:20.390
This isn't going to work, upper case
363

363

00:17:20.390  -->  00:17:24.060
because we're still in and other strings
364

364

00:17:24.060  -->  00:17:26.520
apply block but let's say for some
365

365

00:17:26.520  -->  00:17:28.470
reason we had to do the upper casing in
366

366

00:17:28.470  -->  00:17:33.930
here, if we run now we'll see that we get
367

367

00:17:33.930  -->  00:17:36.090
another string lower case and then
368

368

00:17:36.090  -->  00:17:37.950
another string upper case and that's not
369

369

00:17:37.950  -->  00:17:41.790
what we want, we can't use this because
370

370

00:17:41.790  -->  00:17:44.130
that also applies to another string,
371

371

00:17:44.130  -->  00:17:47.820
so how can we get to uppercase on some
372

372

00:17:47.820  -->  00:17:51.000
string within the nested lambda here?
373

373

00:17:51.000  -->  00:17:53.460
Well if you've guessed that we can use a
374

374

00:17:53.460  -->  00:17:55.860
label, you're right. So we're going to
375

375

00:17:55.860  -->  00:17:57.920
remove this and we're going to label
376

376

00:17:57.920  -->  00:18:00.810
this apply block.
377

377

00:18:00.810  -->  00:18:03.540
So we'll add a label to the outer apply
378

378

00:18:03.540  -->  00:18:06.500
block and we'll call it some string at
379

379

00:18:06.500  -->  00:18:09.510
and then down here if we want to
380

380

00:18:09.510  -->  00:18:12.270
uppercase some string and not another
381

381

00:18:12.270  -->  00:18:16.010
string, we just say this at some string
382

382

00:18:16.010  -->  00:18:20.010
dot to uppercase so what we're saying
383

383

00:18:20.010  -->  00:18:22.500
here is we want to lower case the
384

384

00:18:22.500  -->  00:18:25.170
receiver object associated with the
385

385

00:18:25.170  -->  00:18:27.800
local apply so that would be another
386

386

00:18:27.800  -->  00:18:31.110
string. In here, we're saying that we want
387

387

00:18:31.110  -->  00:18:33.930
to upper case the receiver object for
388

388

00:18:33.930  -->  00:18:36.930
whatever lambda is associated with the
389

389

00:18:36.930  -->  00:18:39.510
some string label. So we're going to
390

390

00:18:39.510  -->  00:18:44.180
uppercase some string. So let's run now,
391

391

00:18:44.180  -->  00:18:48.540
and we'll see that this time we see
392

392

00:18:48.540  -->  00:18:51.210
another string lowercased and we see some
393

393

00:18:51.210  -->  00:18:54.330
string uppercase. So this is another use
394

394

00:18:54.330  -->  00:18:56.550
of labels with lambdas when you have
395

395

00:18:56.550  -->  00:18:59.580
nested applies or withs you can label
396

396

00:18:59.580  -->  00:19:02.640
the lambda and then inside one of the
397

397

00:19:02.640  -->  00:19:04.950
nested lambda is you can refer to the
398

398

00:19:04.950  -->  00:19:08.640
receiver object for an outer lambda.
399

399

00:19:08.640  -->  00:19:10.440
So that's it for lambda expressions, now
400

400

00:19:10.440  -->  00:19:11.880
we're going to start taking a look at
401

401

00:19:11.880  -->  00:19:15.830
collections. I'll see you in the next video.
