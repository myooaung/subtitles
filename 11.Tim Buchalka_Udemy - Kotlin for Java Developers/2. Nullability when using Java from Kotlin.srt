1
00:00:05,590 --> 00:00:12,100
All right so let's touch on a few things you need to be aware of when calling Java from Cartland.

2
00:00:12,160 --> 00:00:17,130
Now we've seen that when we want to use a Java class we can just go ahead and use it.

3
00:00:17,140 --> 00:00:23,380
I've gone ahead and created a car class in Java and if you take a look at it.

4
00:00:23,380 --> 00:00:24,940
Doesn't that look verbose.

5
00:00:24,970 --> 00:00:32,020
Now compare to the car class that we've sometimes worked with in Kallen and we haven't even implemented

6
00:00:32,440 --> 00:00:35,550
to straightening or equals.

7
00:00:35,980 --> 00:00:38,410
And this code looks really verbose now.

8
00:00:38,470 --> 00:00:44,260
Anyway this isn't doing anything special We've got the color model and year fields and then we just

9
00:00:44,260 --> 00:00:49,560
have a constructor that initializes those values and then these sets and gets.

10
00:00:49,780 --> 00:00:59,590
So let's go to Scotland file now and let's create an instance of this car class so we'll say vowel car

11
00:01:00,880 --> 00:01:12,970
equals car and we'll make the car blue and we'll make it a Ford and we'll make it a 2015 model and you

12
00:01:12,970 --> 00:01:20,290
can see that we can do that in tele automatically added the import for us and we can treat it like we

13
00:01:20,290 --> 00:01:25,240
can treat any cotland class from just looking at this code you wouldn't know whether you're dealing

14
00:01:25,240 --> 00:01:28,480
with a Katlin class or a Java class.

15
00:01:28,480 --> 00:01:33,490
Now we've already touched on a couple of places where you do have to be aware that you're calling Java

16
00:01:33,540 --> 00:01:37,690
one of those is when a jab at method once a primitive array went.

17
00:01:37,690 --> 00:01:43,750
Remember you have to use one of the Courtland's special primitive arrays to pass to Ajab a method that

18
00:01:43,750 --> 00:01:49,900
once a primitive array and then we saw that some access modifiers are mapped to different modifiers

19
00:01:49,900 --> 00:01:54,300
in Java and you can review the video on access modifiers.

20
00:01:54,430 --> 00:01:58,070
If you've forgotten what that's all about and you want details.

21
00:01:58,090 --> 00:02:00,250
So now let's take a look at other stuff.

22
00:02:00,250 --> 00:02:01,590
You need to be aware of.

23
00:02:01,900 --> 00:02:05,050
And we're going to start with no liability.

24
00:02:05,290 --> 00:02:11,470
So as we've seen CANTLIN protect against null pointer exceptions Java doesn't Java doesn't have any

25
00:02:11,470 --> 00:02:12,990
builtin protection.

26
00:02:13,180 --> 00:02:16,870
So how does no civility come into play when mixing Cartland with Java.

27
00:02:17,020 --> 00:02:24,220
Well intelligence has the noble and at nocte no annotations.

28
00:02:24,310 --> 00:02:26,670
They serve as documentation only.

29
00:02:26,700 --> 00:02:28,760
There is nothing that's enforced.

30
00:02:28,870 --> 00:02:36,900
However when something is annotated with nullable or at not all the implementation should enforce it.

31
00:02:36,910 --> 00:02:42,350
There's nothing in Javid to enforce it but the implementation should enforce it.

32
00:02:42,490 --> 00:02:46,450
Still Katlin uses these annotations as a hint.

33
00:02:46,450 --> 00:02:53,260
So if it sees the at nullable annotation then it's going to map the item in question to a nullable type

34
00:02:53,770 --> 00:03:00,390
and if it sees the at not no and station and it maps it to a non nullable type.

35
00:03:00,400 --> 00:03:05,930
Now when we say it maps it it's a matter of how is the compiler going to treat it.

36
00:03:05,950 --> 00:03:11,230
Remember that when you're using Java from a Cartland file it's to Cartland compile it it's going to

37
00:03:11,230 --> 00:03:13,180
be compiling that file.

38
00:03:13,240 --> 00:03:20,920
And so if it comes across the code using a an instance of a Java class it has to know.

39
00:03:20,920 --> 00:03:29,140
Well can I assign that instance to a non nullable type or can that instance only be assigned to a nullable

40
00:03:29,140 --> 00:03:29,680
type.

41
00:03:29,770 --> 00:03:36,740
So Cartland uses the non-liberal and at not know all annotations as a hint when they're there.

42
00:03:36,760 --> 00:03:38,310
They don't have to be there.

43
00:03:38,680 --> 00:03:39,940
So let's try this out.

44
00:03:39,940 --> 00:03:45,130
We'll change the set color methods so that the parameter has the not null annotation.

45
00:03:45,130 --> 00:03:47,750
So let's go back to our Java file.

46
00:03:47,830 --> 00:03:58,240
So down here on set color we're going to say that we do not expect this parameter to be no.

47
00:03:58,240 --> 00:03:59,800
Now let me just take this out for Max.

48
00:03:59,800 --> 00:04:02,980
I want to show you something when I started typing it.

49
00:04:02,980 --> 00:04:09,670
You'll see that not all comes from or just brainstorm annotations so this is actually an annotation

50
00:04:09,760 --> 00:04:12,910
from the that you can use in the ID.

51
00:04:12,970 --> 00:04:19,040
It's not a calling annotation and it's not a Java annotation so I'll add that back now.

52
00:04:19,060 --> 00:04:23,680
So here we're telling intelligence and this disk where we're telling rather the Cartland compiler we're

53
00:04:23,680 --> 00:04:27,170
giving it a hint we're saying that color shouldn't be knol.

54
00:04:27,280 --> 00:04:32,170
But again nothing will enforce this absolutely nothing's going to enforce this.

55
00:04:32,170 --> 00:04:37,340
This is kind of like a documentation for humans and it's a hint to the compiler.

56
00:04:37,430 --> 00:04:43,000
And if we go to the top we'll see that we now have an import for Oregon check brains annotations and

57
00:04:43,000 --> 00:04:50,860
there are other code bases that contain similar annotations and the Cartland compiler does recognize

58
00:04:50,860 --> 00:04:51,670
some of those.

59
00:04:51,670 --> 00:04:58,930
Obviously it recognizes the jet brings annotations because Katlin you don't check brains owns Katlin

60
00:04:59,140 --> 00:05:04,270
but it also recognizes these annotations in some other code bases.

61
00:05:04,600 --> 00:05:09,840
So now go back to our job of file or our Cartland file rather.

62
00:05:09,840 --> 00:05:12,350
And let's do the following.

63
00:05:12,540 --> 00:05:17,290
We'll say car dot color equals green.

64
00:05:18,180 --> 00:05:23,790
And then they'll both say print line car and you'll see here that we're using the same syntax for fields

65
00:05:23,790 --> 00:05:27,960
in Java classes as we do for properties in Katlin classes.

66
00:05:27,960 --> 00:05:29,910
So right now if we run this

67
00:05:33,620 --> 00:05:38,750
we'll just see the reference for a car instance because we have an overwritten two string here.

68
00:05:38,750 --> 00:05:46,340
I'm going to use intelligence's generate method to generate a two strenger generate functionality rather

69
00:05:46,340 --> 00:05:50,600
to generate a two string OK.

70
00:05:50,600 --> 00:05:54,930
So now we got a nice two string method and let's run again.

71
00:05:57,620 --> 00:05:59,850
And we'll see now that we can see our car.

72
00:06:00,020 --> 00:06:08,150
OK so we had changed the parameter for some color to say or added the annotation rather to say that

73
00:06:08,390 --> 00:06:10,240
we don't expect this to be no.

74
00:06:10,400 --> 00:06:14,510
So let's go back to call Java our Cartland file.

75
00:06:14,750 --> 00:06:16,760
And now let's change this to no.

76
00:06:20,240 --> 00:06:26,340
Now we don't get any compiler errors because what we're doing here is perfectly legal.

77
00:06:26,600 --> 00:06:33,110
But if we run we're going to get an illegal argument exception and it's going to say that the argument

78
00:06:33,110 --> 00:06:39,020
for the act not all parameter must not be null.

79
00:06:39,070 --> 00:06:45,760
So by adding than not no annotation to the parameter this check has now performed at runtime the compiler

80
00:06:45,760 --> 00:06:49,900
has generated code so that this check will be done.

81
00:06:49,900 --> 00:06:57,700
So let's remove the annotation and run again just to show that we're not going to get this runtime exception

82
00:06:58,690 --> 00:07:00,160
without the annotation.

83
00:07:00,640 --> 00:07:05,530
And we don't and we can see that the color is now now and we obviously don't want that.

84
00:07:05,530 --> 00:07:11,620
So you know this is a case where it's good to use the annotation and that will stop the Cartland code

85
00:07:11,620 --> 00:07:14,500
from from setting a the color of the car to.

86
00:07:14,520 --> 00:07:15,210
No.

87
00:07:15,430 --> 00:07:18,250
All right so now let's try out the at nullable.

88
00:07:18,370 --> 00:07:28,210
So let's say let's set this two at nullable now and there is a number of annotations there is one in

89
00:07:28,220 --> 00:07:30,930
a a sun package here.

90
00:07:30,940 --> 00:07:32,870
But we want to jet brains one.

91
00:07:32,920 --> 00:07:38,740
Now we obviously wouldn't want this but it lets the compiler know that nulls are OK.

92
00:07:38,890 --> 00:07:44,830
So back here in our Cartland file We're still setting this to knowl and before when we set this to not

93
00:07:44,830 --> 00:07:46,980
know we got a runtime exception.

94
00:07:47,050 --> 00:07:48,450
But now if we run again

95
00:07:51,280 --> 00:07:52,430
we'll see that we don't.

96
00:07:52,440 --> 00:07:53,150
So.

97
00:07:53,380 --> 00:07:57,400
So we didn't get an exception when we don't annotate at all and we don't get one.

98
00:07:57,400 --> 00:08:01,840
If we tell the compiler that oh it's fine if this is null.

99
00:08:01,900 --> 00:08:06,820
So these annotations are just aids for us and the compiler.

100
00:08:06,970 --> 00:08:13,120
And as you saw when something isn't supposed to be know the compiler will generate code so that if it

101
00:08:13,120 --> 00:08:18,110
turns out to be null at runtime an exception will be thrown to alert us.

102
00:08:18,270 --> 00:08:21,360
But somebody has done something they're not supposed to be doing.

103
00:08:21,400 --> 00:08:26,360
So that's one way Cartland tries to protect against Nalls when it's mixed with Java.

104
00:08:26,530 --> 00:08:30,930
But the onus is on us developers to add the annotations.

105
00:08:31,060 --> 00:08:37,450
Now as I mentioned there were using the jet brains annotations here but there are other code bases that

106
00:08:37,450 --> 00:08:46,350
have annotations defined and Katlin also pays attention to the Java X and the Android Knol related annotations.

107
00:08:46,660 --> 00:08:48,380
So what about return types.

108
00:08:48,520 --> 00:08:54,710
Well let's call the get model method on our car and see what class we get back.

109
00:08:55,120 --> 00:08:57,730
Let's go back to our Java code.

110
00:08:57,730 --> 00:08:59,530
I'm sorry our Cartland code.

111
00:08:59,530 --> 00:09:01,470
I'm actually going to change this to green.

112
00:09:01,570 --> 00:09:03,740
So we're not doing something of noxious.

113
00:09:04,000 --> 00:09:14,770
So now we'll say VAR model equals Kardon model then we'll say print line model dot Java class to see

114
00:09:14,770 --> 00:09:16,340
what we get back.

115
00:09:16,480 --> 00:09:17,110
Let's run

116
00:09:20,550 --> 00:09:28,020
and we'll see that we get each Avodart that string now is Cartland going to treat this as nullable or

117
00:09:28,020 --> 00:09:28,900
not.

118
00:09:28,890 --> 00:09:35,560
Nullable Well let's assign normal to model and see what happens.

119
00:09:36,030 --> 00:09:37,630
Model equals no.

120
00:09:37,770 --> 00:09:42,210
And we'll print line print line model.

121
00:09:42,280 --> 00:09:43,530
So let's go ahead and run

122
00:09:47,000 --> 00:09:48,820
and we'll see that we could assign a novel.

123
00:09:48,820 --> 00:09:55,850
And so the default free Java type that isn't annotated with anything is the nullable type.

124
00:09:55,850 --> 00:10:02,660
So let's see what happens if we declare model with a non nullable types so let's go up here and say

125
00:10:02,660 --> 00:10:08,780
let's try to force this to be a non-null of all types and we're going to declare it as a string and

126
00:10:08,780 --> 00:10:13,900
you'll see that right away down here we get an there that we can assign all to model.

127
00:10:14,000 --> 00:10:20,810
So you can treat values coming from Java as non-global and protect against null pointer exceptions in

128
00:10:20,810 --> 00:10:22,370
the Cartland code.

129
00:10:22,370 --> 00:10:26,490
Can we declare a model as a nullable type.

130
00:10:27,440 --> 00:10:35,340
Well we can but now we can't use the Java class property because this is an exclusively Cartland type.

131
00:10:35,600 --> 00:10:40,870
And so we can no longer ask for the java class.

132
00:10:40,970 --> 00:10:44,480
There is no equivalent to this class in Java.

133
00:10:44,480 --> 00:10:47,960
And so I'm going to comment this line out and run

134
00:10:51,580 --> 00:10:56,600
and must see that everything ran fine and let me just remove the question mark and run because I don't

135
00:10:56,600 --> 00:10:57,950
think I did that before.

136
00:10:57,960 --> 00:11:01,660
Oh I'm not going to be able to do that now because then also.

137
00:11:02,630 --> 00:11:08,750
OK so when you get a value from Java that isn't annotated you can assign it to a novel or a non-global

138
00:11:08,750 --> 00:11:09,530
type.

139
00:11:09,530 --> 00:11:16,880
Now let's go back to our Java code and let's annotate the return value of get model with not no.

140
00:11:17,180 --> 00:11:24,050
So we're going to say that the return value model shouldn't be No.

141
00:11:24,050 --> 00:11:27,990
And if we go back here we'll see that the CANTLIN code is still fine.

142
00:11:28,130 --> 00:11:35,270
So it's always OK as we know to assign a non knowable value to a nullable variable.

143
00:11:35,270 --> 00:11:41,170
So this is a nullable variable and it's always OK to assign a non-null level to a nullable variable.

144
00:11:41,170 --> 00:11:43,520
But you can't do it the other way around.

145
00:11:43,730 --> 00:11:49,040
So now let's go back to car and say that this is nullable

146
00:11:55,230 --> 00:12:00,890
and then we'll come back here and we'll remove this.

147
00:12:01,080 --> 00:12:08,400
And now right away we get an error and that's what we would expect because we can't assign a nullable

148
00:12:08,400 --> 00:12:10,790
type to a non-negligible variable.

149
00:12:10,800 --> 00:12:11,930
It doesn't work.

150
00:12:12,180 --> 00:12:18,090
So once again when it comes to protecting against Nalls if you want to help the compiler and you want

151
00:12:18,090 --> 00:12:25,080
to get help at runtime it's up to you the developer to properly annotate your Java code when it makes

152
00:12:25,080 --> 00:12:26,660
sense to do so.

153
00:12:26,670 --> 00:12:29,000
I mean we don't have to use these annotations.

154
00:12:29,010 --> 00:12:31,840
We can just go ahead and leave them off.

155
00:12:31,860 --> 00:12:37,230
But then of course all bets are off in the Cartland code and you're not going to get any help from the

156
00:12:37,230 --> 00:12:39,810
compiler or any help at runtime.

157
00:12:40,020 --> 00:12:45,150
So what happens then when the Cartland compiler doesn't have any information about whether a type is

158
00:12:45,150 --> 00:12:47,350
nullable or not.

159
00:12:47,550 --> 00:12:52,490
Well in that case the type is what's called a platform type.

160
00:12:52,590 --> 00:12:58,450
And as we've seen it means that you can use it either as a nullable or a non nullable value.

161
00:12:58,470 --> 00:13:06,180
Now platform types can't be created in Katlin We can't declare a variable in cotland that can be used

162
00:13:06,180 --> 00:13:14,070
as nullable or non-knowledge all you're either a string which means your non-null level or you are a

163
00:13:14,070 --> 00:13:20,880
string questionmark which means you're nullable you can't be Bogues a string question mark can store

164
00:13:20,880 --> 00:13:29,700
both nullable and non-bailable values but the type is in that case would be nullable So a type cannot

165
00:13:29,700 --> 00:13:34,090
be nullable and non-null leval you either have to question mark or you don't.

166
00:13:34,260 --> 00:13:37,620
So platform types can't be created in cotland.

167
00:13:37,950 --> 00:13:42,630
They can only result when you're mixing Cartland with another language like Java.

168
00:13:42,630 --> 00:13:48,650
So when you have a platform type the compiler uses the exclamation mark in the typed name.

169
00:13:48,660 --> 00:13:54,390
So if you ever see an error message that contains a type followed by an exclamation mark then you're

170
00:13:54,390 --> 00:13:55,830
dealing with a platform type.

171
00:13:55,830 --> 00:14:00,270
So let's see if we can make one happen.

172
00:14:00,540 --> 00:14:08,740
Let me comment out this whole block because it's filled with errors now and will save roud color.

173
00:14:08,750 --> 00:14:13,080
It equals Carr-Gomm color.

174
00:14:13,500 --> 00:14:18,660
Now we know that's not going to work because colors are a string but if we have her over the error we'll

175
00:14:18,660 --> 00:14:25,460
see that it's a type mismatch it wants an int and it found a string exclamation mark.

176
00:14:25,470 --> 00:14:32,500
OK so when it comes to no lability if a java method isn't annotated as get color isn't.

177
00:14:32,700 --> 00:14:37,980
You should do the usual null checks within the Cartland code before using the return value.

178
00:14:37,980 --> 00:14:44,550
The compiler is not going to do any checks for you and that's it for this video we'll continue discussing

179
00:14:44,640 --> 00:14:49,560
what you have to watch out for when calling Java from Katlin in the next video.
