WEBVTT
1
1

00:00:01.070  -->  00:00:04.690
[Music]
2

2

00:00:04.690  -->  00:00:07.359
in this video we're going to take a look
3

3

00:00:07.359  -->  00:00:09.519
at a Kotlin feature called string
4

4

00:00:09.519  -->  00:00:11.650
templates now I've deleted some of the
5

5

00:00:11.650  -->  00:00:13.630
code we added before so that the file is
6

6

00:00:13.630  -->  00:00:15.820
a bit cleaner and now let's do something
7

7

00:00:15.820  -->  00:00:18.189
that we typically do in Java and that is
8

8

00:00:18.189  -->  00:00:20.140
overwrite the string method because if
9

9

00:00:20.140  -->  00:00:28.080
we print employee one now and we run
10

10

00:00:28.080  -->  00:00:31.000
we'll see that we just get the instance
11

11

00:00:31.000  -->  00:00:32.680
reference and that's usually not what we
12

12

00:00:32.680  -->  00:00:34.210
want when we were printing the employee
13

13

00:00:34.210  -->  00:00:36.100
we want a nice string telling us the
14

14

00:00:36.100  -->  00:00:39.129
contents of the instance so typically in
15

15

00:00:39.129  -->  00:00:40.719
Java will overwrite the two string
16

16

00:00:40.719  -->  00:00:42.129
method and we do the same thing in
17

17

00:00:42.129  -->  00:00:44.440
Kotlin now we could type out the
18

18

00:00:44.440  -->  00:00:46.300
function definition but we could also
19

19

00:00:46.300  -->  00:00:48.789
have IntelliJ generate the two string
20

20

00:00:48.789  -->  00:00:52.180
overwrite for us by right-clicking going
21

21

00:00:52.180  -->  00:00:54.370
to generate and then I'm going to select
22

22

00:00:54.370  -->  00:00:57.940
two string and I want to include both
23

23

00:00:57.940  -->  00:00:59.800
property values in the string so I'm
24

24

00:00:59.800  -->  00:01:02.489
going to keep both of those selected and
25

25

00:01:02.489  -->  00:01:06.280
we'll see what IntelliJ has done here it
26

26

00:01:06.280  -->  00:01:10.420
has generated the following two string
27

27

00:01:10.420  -->  00:01:12.840
and you'll notice that it's using these
28

28

00:01:12.840  -->  00:01:16.209
dollar values in here now I'm actually
29

29

00:01:16.209  -->  00:01:18.280
going to delete the two single quotes
30

30

00:01:18.280  -->  00:01:20.080
because I find that that can make things
31

31

00:01:20.080  -->  00:01:22.860
a little bit confusing they usually put
32

32

00:01:22.860  -->  00:01:26.050
single quotes around string values so
33

33

00:01:26.050  -->  00:01:28.780
let's run and see what we get now when
34

34

00:01:28.780  -->  00:01:35.500
we print the employee and you'll see
35

35

00:01:35.500  -->  00:01:37.360
that we get a nice string now we get
36

36

00:01:37.360  -->  00:01:40.569
employee which is right here name equals
37

37

00:01:40.569  -->  00:01:43.119
Lynne Smith and ID equals 500 so
38

38

00:01:43.119  -->  00:01:44.530
essentially what's happening with these
39

39

00:01:44.530  -->  00:01:48.399
dollar signs is the value of the
40

40

00:01:48.399  -->  00:01:50.319
variable is being substituted into the
41

41

00:01:50.319  -->  00:01:52.929
string and that's really convenient you
42

42

00:01:52.929  -->  00:01:54.459
know it's much better than having to use
43

43

00:01:54.459  -->  00:01:57.069
string concatenation or even the format
44

44

00:01:57.069  -->  00:01:59.560
method string dot format where you have
45

45

00:01:59.560  -->  00:02:01.300
to have all the substitution variables
46

46

00:02:01.300  -->  00:02:03.759
in there this is what's known as a
47

47

00:02:03.759  -->  00:02:07.060
string template and it's generated for
48

48

00:02:07.060  -->  00:02:08.979
you by IntelliJ in this case but of
49

49

00:02:08.979  -->  00:02:10.959
course you can just use dollar sign
50

50

00:02:10.959  -->  00:02:13.030
wherever you like whenever you want to
51

51

00:02:13.030  -->  00:02:15.520
print the value of a variable within a
52

52

00:02:15.520  -->  00:02:18.550
string okay so let's take a look at
53

53

00:02:18.550  -->  00:02:21.310
using the dollar sign within a string
54

54

00:02:21.310  -->  00:02:24.310
template in a bit more detail so we'll
55

55

00:02:24.310  -->  00:02:28.120
go up here and we'll declare a Val Val
56

56

00:02:28.120  -->  00:02:30.280
cult change then we'll assign it the
57

57

00:02:30.280  -->  00:02:33.810
value of four dollars and 22 cents and
58

58

00:02:33.810  -->  00:02:36.340
then let's say we want it to print out
59

59

00:02:36.340  -->  00:02:40.510
to display the value of change you use
60

60

00:02:40.510  -->  00:02:43.570
dollar change how could we do that
61

61

00:02:43.570  -->  00:02:45.640
because the moment we put dollar change
62

62

00:02:45.640  -->  00:02:49.750
within a string the value of change is
63

63

00:02:49.750  -->  00:02:52.750
going to be substituted rather than the
64

64

00:02:52.750  -->  00:02:55.540
literal dollar change being printed so
65

65

00:02:55.540  -->  00:02:57.760
how do we prevent the value from being
66

66

00:02:57.760  -->  00:02:59.710
substituted when we want to use a dollar
67

67

00:02:59.710  -->  00:03:02.830
sign in front of a string that just
68

68

00:03:02.830  -->  00:03:05.860
happens to match a variable name and the
69

69

00:03:05.860  -->  00:03:08.080
way to do that of course is to escape
70

70

00:03:08.080  -->  00:03:10.180
the dollar sign so we do something like
71

71

00:03:10.180  -->  00:03:15.300
print line just to show the value of
72

72

00:03:15.300  -->  00:03:20.710
change we use and here we have to skip
73

73

00:03:20.710  -->  00:03:24.070
the dollar sign dollar change because if
74

74

00:03:24.070  -->  00:03:25.920
we don't escape the dollar sign here
75

75

00:03:25.920  -->  00:03:28.270
it'll actually print out the value of
76

76

00:03:28.270  -->  00:03:31.239
change so for example if we do this and
77

77

00:03:31.239  -->  00:03:36.790
then we run we'll see the show is the
78

78

00:03:36.790  -->  00:03:39.100
value of change we use for point two two
79

79

00:03:39.100  -->  00:03:40.570
and that's not what we want we want
80

80

00:03:40.570  -->  00:03:43.660
dollar change here so if we escape the
81

81

00:03:43.660  -->  00:03:49.180
dollar sign and run again we'll see that
82

82

00:03:49.180  -->  00:03:51.040
now we get to show the value of change
83

83

00:03:51.040  -->  00:03:54.130
we use dollar change so if you ever run
84

84

00:03:54.130  -->  00:03:57.250
into a situation where you want to use a
85

85

00:03:57.250  -->  00:04:00.400
string template a substitution value and
86

86

00:04:00.400  -->  00:04:03.459
you also want to print the name of a
87

87

00:04:03.459  -->  00:04:05.920
variable within the string rather than
88

88

00:04:05.920  -->  00:04:08.590
the value this is the way you do it if
89

89

00:04:08.590  -->  00:04:10.510
you're going to precede the name with a
90

90

00:04:10.510  -->  00:04:11.080
dollar sign
91

91

00:04:11.080  -->  00:04:13.570
okay now note that Kotlin is smart
92

92

00:04:13.570  -->  00:04:15.459
enough to do stuff like this so if we
93

93

00:04:15.459  -->  00:04:17.260
don't escape it now because we want the
94

94

00:04:17.260  -->  00:04:19.120
value of change and we want a dollar
95

95

00:04:19.120  -->  00:04:21.669
sign in front Kotlin smart enough to
96

96

00:04:21.669  -->  00:04:23.890
recognize that oh okay well this is just
97

97

00:04:23.890  -->  00:04:26.020
a regular dollar sign but from this
98

98

00:04:26.020  -->  00:04:28.419
point forward you're actually using a
99

99

00:04:28.419  -->  00:04:33.000
string substitution value so if we run
100

100

00:04:33.000  -->  00:04:35.560
we'll see that we get to show the value
101

101

00:04:35.560  -->  00:04:37.630
of change we use four dollars and 22
102

102

00:04:37.630  -->  00:04:40.270
cents that doesn't make sense but that's
103

103

00:04:40.270  -->  00:04:40.750
what it is
104

104

00:04:40.750  -->  00:04:44.400
we'd probably instead say something like
105

105

00:04:44.400  -->  00:04:48.370
your change is and in this case we use
106

106

00:04:48.370  -->  00:04:52.900
dollar change so if we run we'll see
107

107

00:04:52.900  -->  00:04:55.150
your changes four dollars and 22 cents
108

108

00:04:55.150  -->  00:04:57.460
now of course if you just want to print
109

109

00:04:57.460  -->  00:04:59.380
out a dollar sign you don't have to do
110

110

00:04:59.380  -->  00:05:01.990
anything special you just you know have
111

111

00:05:01.990  -->  00:05:03.490
the dollar sign in there if there's
112

112

00:05:03.490  -->  00:05:05.770
nothing following the dollar sign the
113

113

00:05:05.770  -->  00:05:07.630
Kotler that's going to understand what
114

114

00:05:07.630  -->  00:05:12.670
you want so here we can see your change
115

115

00:05:12.670  -->  00:05:15.580
is and we just have the dollar sign so
116

116

00:05:15.580  -->  00:05:17.800
that's already very powerful I mean you
117

117

00:05:17.800  -->  00:05:21.220
can substitute in variable values
118

118

00:05:21.220  -->  00:05:23.770
without having to use concatenation or
119

119

00:05:23.770  -->  00:05:25.990
without having to use a method like
120

120

00:05:25.990  -->  00:05:28.180
string dot format but string templates
121

121

00:05:28.180  -->  00:05:29.800
are even more powerful than that because
122

122

00:05:29.800  -->  00:05:32.920
you can actually substitute in the
123

123

00:05:32.920  -->  00:05:35.560
results of expressions so let's give
124

124

00:05:35.560  -->  00:05:39.040
that a try let's add another variable
125

125

00:05:39.040  -->  00:05:41.920
called numerator and we'll assign it a
126

126

00:05:41.920  -->  00:05:44.860
value of ten point nine nine and then
127

127

00:05:44.860  -->  00:05:46.630
we'll have another variable called
128

128

00:05:46.630  -->  00:05:48.880
denominator and we'll assign that the
129

129

00:05:48.880  -->  00:05:51.760
value of twenty point zero zero and now
130

130

00:05:51.760  -->  00:05:53.800
we can actually just print line the
131

131

00:05:53.800  -->  00:05:55.990
result of this expression by using a
132

132

00:05:55.990  -->  00:05:58.830
string template so the value of
133

133

00:05:58.830  -->  00:06:04.930
numerator divided by the NAM in the tour
134

134

00:06:04.930  -->  00:06:08.050
that's a hard one to spell is now when
135

135

00:06:08.050  -->  00:06:10.360
you're going to substitute the value of
136

136

00:06:10.360  -->  00:06:11.920
an expression you have to start with a
137

137

00:06:11.920  -->  00:06:13.690
dollar sign and then you have to enclose
138

138

00:06:13.690  -->  00:06:15.490
the value of the expression between
139

139

00:06:15.490  -->  00:06:17.470
curly braces so that's what we're doing
140

140

00:06:17.470  -->  00:06:22.390
now so we want to enclose numerator over
141

141

00:06:22.390  -->  00:06:31.870
denominator so if we run we'll see the
142

142

00:06:31.870  -->  00:06:34.030
value of ten point nine nine divided by
143

143

00:06:34.030  -->  00:06:36.400
twenty point zero is zero point five
144

144

00:06:36.400  -->  00:06:39.610
four nine five so we can also substitute
145

145

00:06:39.610  -->  00:06:43.060
in expressions one little point here
146

146

00:06:43.060  -->  00:06:45.790
that all all raised before we leave
147

147

00:06:45.790  -->  00:06:46.090
store
148

148

00:06:46.090  -->  00:06:49.000
templates is when you reference a
149

149

00:06:49.000  -->  00:06:52.300
property value from outside the class
150

150

00:06:52.300  -->  00:06:54.520
that's considered to be an expression so
151

151

00:06:54.520  -->  00:06:56.560
if we want it to do something like print
152

152

00:06:56.560  -->  00:07:02.650
line the employees ID is and we want to
153

153

00:07:02.650  -->  00:07:05.320
substitute in employee ones ID
154

154

00:07:05.320  -->  00:07:09.970
we can't go like this you'll notice that
155

155

00:07:09.970  -->  00:07:12.370
the second part of this is in green
156

156

00:07:12.370  -->  00:07:14.110
which means this is part of the string
157

157

00:07:14.110  -->  00:07:16.419
we have to enclose this within curly
158

158

00:07:16.419  -->  00:07:21.790
braces and now will actually print
159

159

00:07:21.790  -->  00:07:27.729
employee ones ID if we run will see the
160

160

00:07:27.729  -->  00:07:30.070
employees ID is five hundred and that's
161

161

00:07:30.070  -->  00:07:32.740
true we've set employee ones ID to five
162

162

00:07:32.740  -->  00:07:34.990
hundred up here so that's it for string
163

163

00:07:34.990  -->  00:07:36.820
templates it's a really cool feature in
164

164

00:07:36.820  -->  00:07:38.080
Kotlin that I think you're going to use
165

165

00:07:38.080  -->  00:07:40.450
a lot because we're often concatenated
166

166

00:07:40.450  -->  00:07:42.669
string values together or using string
167

167

00:07:42.669  -->  00:07:44.680
dot format and you no longer have to do
168

168

00:07:44.680  -->  00:07:46.330
that you can just substitute the values
169

169

00:07:46.330  -->  00:07:49.889
in I'll see you in the next video
