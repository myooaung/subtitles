1
1

00:00:04,819  -->  00:00:07,049
Welcome to the Kotlin for Java
2

2

00:00:07,049  -->  00:00:09,209
developers course. Thank you for
3

3

00:00:09,209  -->  00:00:11,459
investing in the course and give
4

4

00:00:11,459  -->  00:00:13,379
yourself a pat on the back for investing
5

5

00:00:13,379  -->  00:00:16,020
in yourself. In this course, you're going
6

6

00:00:16,020  -->  00:00:18,000
to leverage your Java knowledge to get
7

7

00:00:18,000  -->  00:00:20,880
up to speed quickly with Kotlin, so that
8

8

00:00:20,880  -->  00:00:24,210
brings us to who this course is for.
9

9

00:00:24,210  -->  00:00:26,730
This isn't a beginner's programming course.
10

10

00:00:26,730  -->  00:00:28,619
I assume that you have some experience
11

11

00:00:28,619  -->  00:00:31,230
with Java, so I won't be going over basic
12

12

00:00:31,230  -->  00:00:33,930
concepts like what is a variable,
13

13

00:00:33,930  -->  00:00:36,870
what does encapsulation mean, what is a
14

14

00:00:36,870  -->  00:00:40,140
conditional statement etc. We're going to
15

15

00:00:40,140  -->  00:00:42,420
hit the ground running, so if you've
16

16

00:00:42,420  -->  00:00:44,430
coded in Java, this is the course for you.
17

17

00:00:44,430  -->  00:00:47,220
Now you don't have to be a Java expert
18

18

00:00:47,220  -->  00:00:49,140
and know everything there is to know
19

19

00:00:49,140  -->  00:00:51,090
about Java because frankly few
20

20

00:00:51,090  -->  00:00:53,700
developers do, but you do need to know
21

21

00:00:53,700  -->  00:00:56,399
more than hello world and you should
22

22

00:00:56,399  -->  00:00:59,010
understand object-oriented concepts like
23

23

00:00:59,010  -->  00:01:02,460
encapsulation, polymorphism, inheritance
24

24

00:01:02,460  -->  00:01:05,399
and obstruction, all that good stuff.
25

25

00:01:05,399  -->  00:01:06,659
Now if you don't know any programming
26

26

00:01:06,659  -->  00:01:09,229
languages, if this is the first
27

27

00:01:09,229  -->  00:01:12,270
programming course you're taking or if
28

28

00:01:12,270  -->  00:01:14,190
the only Java program you've ever
29

29

00:01:14,190  -->  00:01:16,680
written is HelloWorld, you should take a
30

30

00:01:16,680  -->  00:01:19,020
Java course before you do this one and
31

31

00:01:19,020  -->  00:01:21,960
I'd recommend Tim Buchalka's Java
32

32

00:01:21,960  -->  00:01:24,720
master class, if you've taken Tim's
33

33

00:01:24,720  -->  00:01:27,060
course and you've at least watched the
34

34

00:01:27,060  -->  00:01:28,860
master class beyond the introductory
35

35

00:01:28,860  -->  00:01:31,470
topics, then you know enough to take this
36

36

00:01:31,470  -->  00:01:33,570
course. Now if you don't have experience
37

37

00:01:33,570  -->  00:01:35,670
with Java, but you do with another
38

38

00:01:35,670  -->  00:01:37,500
object-oriented language and so you
39

39

00:01:37,500  -->  00:01:39,600
understand object-oriented concepts,
40

40

00:01:39,600  -->  00:01:41,700
you'll probably be able to muddle along
41

41

00:01:41,700  -->  00:01:45,030
in this course. So let's go over what
42

42

00:01:45,030  -->  00:01:46,520
we're going to cover in this course.
43

43

00:01:46,520  -->  00:01:49,320
First I'll tell you a bit about the
44

44

00:01:49,320  -->  00:01:51,180
Kotlin language and then you'll watch
45

45

00:01:51,180  -->  00:01:54,360
me convert a Java application to Kotlin
46

46

00:01:54,360  -->  00:01:57,000
to give you a taste of the language
47

47

00:01:57,000  -->  00:01:58,710
then we're going to go over some quick
48

48

00:01:58,710  -->  00:02:00,899
differences between Kotlin and Java,
49

49

00:02:00,899  -->  00:02:02,790
for example you don't have to use semicolons
50

50

00:02:02,790  -->  00:02:05,399
at the end of statements in Kotlin, I bet
51

51

00:02:05,399  -->  00:02:07,979
you'll all be crying over that, we'll
52

52

00:02:07,979  -->  00:02:09,840
also code the classic hello world
53

53

00:02:09,840  -->  00:02:12,030
application because let's face it,
54

54

00:02:12,030  -->  00:02:13,559
it wouldn't be a programming course if we
55

55

00:02:13,559  -->  00:02:16,230
didn't do that but on top of that just
56

56

00:02:16,230  -->  00:02:18,420
that simple application will allow me
57

57

00:02:18,420  -->  00:02:20,819
to point out a few key differences
58

58

00:02:20,819  -->  00:02:23,970
between Kotlin and Java and after that
59

59

00:02:23,970  -->  00:02:25,470
we're going to look at variable
60

60

00:02:25,470  -->  00:02:27,660
declarations in Kotlin because as you'll
61

61

00:02:27,660  -->  00:02:30,510
see, they're quite different than the way
62

62

00:02:30,510  -->  00:02:33,390
that you declare variables in Java, after
63

63

00:02:33,390  -->  00:02:35,160
that we're going to take a look at data
64

64

00:02:35,160  -->  00:02:37,709
types in Kotlin and we'll also see how
65

65

00:02:37,709  -->  00:02:41,130
Kotlin protects against null pointer exceptions.
66

66

00:02:41,130  -->  00:02:43,020
You might have heard that you can't get
67

67

00:02:43,020  -->  00:02:44,730
a null pointer exception in Kotlin,
68

68

00:02:44,730  -->  00:02:47,130
that's not quite true but it's pretty
69

69

00:02:47,130  -->  00:02:49,800
hard to get them. After that, we're going
70

70

00:02:49,800  -->  00:02:52,050
to take a look at the object-oriented
71

71

00:02:52,050  -->  00:02:54,420
topics, we're going to look at classes
72

72

00:02:54,420  -->  00:02:56,250
and how you declare them, we're going to
73

73

00:02:56,250  -->  00:02:59,130
look at methods and functions, yes
74

74

00:02:59,130  -->  00:03:02,400
functions, we're going to look at how
75

75

00:03:02,400  -->  00:03:04,500
constructors are handled in Kotlin this
76

76

00:03:04,500  -->  00:03:07,290
is one area where it's very different
77

77

00:03:07,290  -->  00:03:09,900
from the way they're handled in Java and
78

78

00:03:09,900  -->  00:03:13,110
it does cause some developers some
79

79

00:03:13,110  -->  00:03:15,239
difficulty when they first start working
80

80

00:03:15,239  -->  00:03:17,910
with Kotlin, so we'll look at primary and
81

81

00:03:17,910  -->  00:03:19,980
secondary constructors will also look at
82

82

00:03:19,980  -->  00:03:21,900
enums, we're going to look at the
83

83

00:03:21,900  -->  00:03:24,299
singleton in factory patterns and how
84

84

00:03:24,299  -->  00:03:26,820
you code those in Kotlin and other good
85

85

00:03:26,820  -->  00:03:29,250
stuff, then we're going to take a look at
86

86

00:03:29,250  -->  00:03:32,370
loops I say loops but really it will be
87

87

00:03:32,370  -->  00:03:34,019
focused on the for loop because the
88

88

00:03:34,019  -->  00:03:35,670
other loops are pretty much the same in
89

89

00:03:35,670  -->  00:03:38,370
Kotlin but there has been a significant
90

90

00:03:38,370  -->  00:03:41,489
change to the for loop in Kotlin from
91

91

00:03:41,489  -->  00:03:44,250
what you can do in Java. Now related to
92

92

00:03:44,250  -->  00:03:46,260
this is a feature in Kotlin called
93

93

00:03:46,260  -->  00:03:48,720
ranges, so we're going to take a look at
94

94

00:03:48,720  -->  00:03:51,359
them as well. After that we're going to
95

95

00:03:51,359  -->  00:03:53,489
take a look at lambda expressions and
96

96

00:03:53,489  -->  00:03:56,820
also collections and generics.
97

97

00:03:56,820  -->  00:03:58,890
Now lambdas and collections aren't that much
98

98

00:03:58,890  -->  00:04:00,750
different from what they are in Java but
99

99

00:04:00,750  -->  00:04:02,370
you can do more with them in Kotlin.
100

100

00:04:02,370  -->  00:04:05,819
Kotlin has enhanced lambdas and
101

101

00:04:05,819  -->  00:04:08,700
collections. Now for generics, we're going
102

102

00:04:08,700  -->  00:04:11,340
to cover variants that's both covariance
103

103

00:04:11,340  -->  00:04:14,069
and contravariance and again this is
104

104

00:04:14,069  -->  00:04:17,070
another topic that some developers find
105

105

00:04:17,070  -->  00:04:18,810
it hard to wrap their head around,
106

106

00:04:18,810  -->  00:04:21,239
so we're going to spend some time on both
107

107

00:04:21,239  -->  00:04:24,150
of those concepts, yes so as I just said
108

108

00:04:24,150  -->  00:04:26,940
we'll be covering generics and under
109

109

00:04:26,940  -->  00:04:29,250
that topic, we are definitely taking a
110

110

00:04:29,250  -->  00:04:31,650
look at variants. Now after that, we're
111

111

00:04:31,650  -->  00:04:32,279
going to take a look
112

112

00:04:32,279  -->  00:04:35,099
at i/o more specifically file i/o because
113

113

00:04:35,099  -->  00:04:37,889
this is where Kotlin has added some
114

114

00:04:37,889  -->  00:04:40,259
convenience functions that we can use
115

115

00:04:40,259  -->  00:04:42,239
when we want to read files in particular,
116

116

00:04:42,239  -->  00:04:44,869
it's kind of focused on enhancing
117

117

00:04:44,869  -->  00:04:47,729
reading text files, so we'll take a look
118

118

00:04:47,729  -->  00:04:50,009
at that and then we're going to look at
119

119

00:04:50,009  -->  00:04:53,279
Java interoperability. Kotlin has been
120

120

00:04:53,279  -->  00:04:55,169
designed from the ground up to be
121

121

00:04:55,169  -->  00:04:58,559
interoperable with Java and so you can
122

122

00:04:58,559  -->  00:05:01,559
call Kotlin from Java and you can call
123

123

00:05:01,559  -->  00:05:03,599
Java from Kotlin .Now most of the time
124

124

00:05:03,599  -->  00:05:05,279
when you do this, you don't have to do
125

125

00:05:05,279  -->  00:05:08,610
anything special but there are cases and
126

126

00:05:08,610  -->  00:05:11,879
areas where you do have to do something
127

127

00:05:11,879  -->  00:05:13,949
a little differently or where you might
128

128

00:05:13,949  -->  00:05:15,719
want to influence the behavior of the
129

129

00:05:15,719  -->  00:05:17,879
Kotlin compiler when you know that
130

130

00:05:17,879  -->  00:05:19,439
you're going to be mixing Kotlin and Java
131

131

00:05:19,439  -->  00:05:22,139
and so we're going to take a look at all
132

132

00:05:22,139  -->  00:05:24,479
of that and there are going to be
133

133

00:05:24,479  -->  00:05:27,029
challenges along the way where you'll
134

134

00:05:27,029  -->  00:05:28,679
get a chance to practice what you've
135

135

00:05:28,679  -->  00:05:30,989
learned. Now at the end of the course,
136

136

00:05:30,989  -->  00:05:33,209
we're going to revisit the code that I'm
137

137

00:05:33,209  -->  00:05:36,360
going to convert in the next section,
138

138

00:05:36,360  -->  00:05:39,389
so we'll revisit the Kotlin code, the code
139

139

00:05:39,389  -->  00:05:42,779
that I write as I convert the Java
140

140

00:05:42,779  -->  00:05:45,209
application because by the end of the
141

141

00:05:45,209  -->  00:05:47,399
course, you're going to understand all of
142

142

00:05:47,399  -->  00:05:48,929
the code and you'll also be able
143

143

00:05:48,929  -->  00:05:52,379
hopefully to explain it to somebody if
144

144

00:05:52,379  -->  00:05:53,519
they were to ask you what the code is
145

145

00:05:53,519  -->  00:05:56,069
doing. So as you can see we have a lot to
146

146

00:05:56,069  -->  00:05:58,600
cover, so let's get started.
147

147

00:05:58,600  -->  00:06:01,849
I'll see you in the next video.
