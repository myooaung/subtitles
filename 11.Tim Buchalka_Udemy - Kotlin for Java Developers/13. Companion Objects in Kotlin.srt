1
1

00:00:04,720  -->  00:00:07,000
Now let's take a look at companion
2

2

00:00:07,000  -->  00:00:09,190
objects, the second use case for the
3

3

00:00:09,190  -->  00:00:11,410
object keyword. Now we know that the
4

4

00:00:11,410  -->  00:00:13,570
static keyword doesn't exist in Kotlin,
5

5

00:00:13,570  -->  00:00:15,690
we can't declare anything as static,
6

6

00:00:15,690  -->  00:00:18,100
instead we can use top-level functions
7

7

00:00:18,100  -->  00:00:20,860
and properties and as we've just seen,
8

8

00:00:20,860  -->  00:00:23,440
can also use object declarations when it
9

9

00:00:23,440  -->  00:00:25,450
makes sense, but we still have a problem.
10

10

00:00:25,450  -->  00:00:27,700
So let's take a look at some code in
11

11

00:00:27,700  -->  00:00:29,590
Java, I've already typed some code in,
12

12

00:00:29,590  -->  00:00:33,280
I've created a Java code package and I
13

13

00:00:33,280  -->  00:00:36,129
have two classes in here. In some class
14

14

00:00:36,129  -->  00:00:40,809
I have a private static variable and I
15

15

00:00:40,809  -->  00:00:43,449
have a public static method that
16

16

00:00:43,449  -->  00:00:46,059
accesses that variable. And then in some
17

17

00:00:46,059  -->  00:00:48,339
other class, I just have some other
18

18

00:00:48,339  -->  00:00:51,069
method and it calls that static method.
19

19

00:00:51,069  -->  00:00:54,999
So some class access private var and so
20

20

00:00:54,999  -->  00:00:57,940
here in the main method, I'm creating an
21

21

00:00:57,940  -->  00:01:00,129
instance of some other class and then
22

22

00:01:00,129  -->  00:01:02,109
I'm calling the access private var
23

23

00:01:02,109  -->  00:01:08,290
method here. So if we run this, we'll see
24

24

00:01:08,290  -->  00:01:10,810
I'm accessing private var six and we'll
25

25

00:01:10,810  -->  00:01:13,120
notice here that we didn't need an
26

26

00:01:13,120  -->  00:01:15,790
instance of some class here in order to
27

27

00:01:15,790  -->  00:01:18,400
call access private var, because access
28

28

00:01:18,400  -->  00:01:21,700
private var is static. So this class is
29

29

00:01:21,700  -->  00:01:23,920
able to call the method without needing
30

30

00:01:23,920  -->  00:01:25,930
an instance of the method. So that's all
31

31

00:01:25,930  -->  00:01:28,180
fine and dandy, but now let's try to do
32

32

00:01:28,180  -->  00:01:30,190
the same thing from Kotlin. So we'll go
33

33

00:01:30,190  -->  00:01:32,320
back to our company communications and
34

34

00:01:32,320  -->  00:01:34,750
here, I'm just going to create the
35

35

00:01:34,750  -->  00:01:37,950
classes we need within the same file and
36

36

00:01:37,950  -->  00:01:44,260
we'll say ok class some class and we'll
37

37

00:01:44,260  -->  00:01:47,920
say it has a private variable private
38

38

00:01:47,920  -->  00:01:51,700
var equals 6. Now we can't declare this
39

39

00:01:51,700  -->  00:01:54,310
static, but we know it's public and final,
40

40

00:01:54,310  -->  00:01:56,680
so it's kind of equivalent to this.
41

41

00:01:56,680  -->  00:01:58,720
And now we'll create the method that
42

42

00:01:58,720  -->  00:01:59,830
accesses it.
43

43

00:01:59,830  -->  00:02:05,689
So we'll say fun access private var
44

44

00:02:05,689  -->  00:02:08,679
and let me go back here, I can probably
45

45

00:02:08,679  -->  00:02:11,989
I'll copy this and then modify it to
46

46

00:02:11,989  -->  00:02:16,940
save on some typing. No, I don't want to
47

47

00:02:16,940  -->  00:02:19,519
convert it to Kotlin, so suppose I could
48

48

00:02:19,519  -->  00:02:21,530
have, so print line I'm accessing private
49

49

00:02:21,530  -->  00:02:24,200
var and here we'll just use do that
50

50

00:02:24,200  -->  00:02:27,349
instead and of course we don't need to
51

51

00:02:27,349  -->  00:02:30,349
semicolon. Okay, so this is all fine
52

52

00:02:30,349  -->  00:02:32,510
because it can access this variable,
53

53

00:02:32,510  -->  00:02:34,370
it's in the same class so it can access a
54

54

00:02:34,370  -->  00:02:37,400
private variable, but can we get to this
55

55

00:02:37,400  -->  00:02:40,670
function now without having an instance
56

56

00:02:40,670  -->  00:02:43,310
of some class? And the answer of course
57

57

00:02:43,310  -->  00:02:46,549
is no. So because the static keyword
58

58

00:02:46,549  -->  00:02:48,709
doesn't exist in Kotlin, because we can't
59

59

00:02:48,709  -->  00:02:50,599
declare anything as static, it's not
60

60

00:02:50,599  -->  00:02:55,280
possible to access functions and public
61

61

00:02:55,280  -->  00:02:58,760
static members, within classes without
62

62

00:02:58,760  -->  00:03:00,379
having an instance of the class.
63

63

00:03:00,379  -->  00:03:02,359
You always need an instance of the class
64

64

00:03:02,359  -->  00:03:04,670
to access anything that's inside a class,
65

65

00:03:04,670  -->  00:03:07,040
in this case because private var is
66

66

00:03:07,040  -->  00:03:09,260
private, it also doesn't have a setter
67

67

00:03:09,260  -->  00:03:13,579
generated for it or a getter for that matter, so the
68

68

00:03:13,579  -->  00:03:15,709
only things that can access private var are
69

69

00:03:15,709  -->  00:03:18,170
inside the class and that's the same
70

70

00:03:18,170  -->  00:03:19,940
thing in Java as well, though we could
71

71

00:03:19,940  -->  00:03:22,250
write setters and getters here and of
72

72

00:03:22,250  -->  00:03:23,660
course, we could make this public
73

73

00:03:23,660  -->  00:03:25,459
and then other classes could access this
74

74

00:03:25,459  -->  00:03:27,349
directly, again without needing an
75

75

00:03:27,349  -->  00:03:31,579
instance. So how do we get the equivalent
76

76

00:03:31,579  -->  00:03:33,680
situation in Kotlin? How can we have
77

77

00:03:33,680  -->  00:03:36,380
something inside a class, but not need an
78

78

00:03:36,380  -->  00:03:38,419
instance to access it? Well this is where
79

79

00:03:38,419  -->  00:03:41,180
companion objects come in, you can create
80

80

00:03:41,180  -->  00:03:44,180
companion objects inside classes and you
81

81

00:03:44,180  -->  00:03:46,669
can access these companion objects
82

82

00:03:46,669  -->  00:03:48,310
without needing an instance of the class.
83

83

00:03:48,310  -->  00:03:51,410
So let's add a companion object to our
84

84

00:03:51,410  -->  00:03:53,720
some class here, instead of doing this,
85

85

00:03:53,720  -->  00:03:56,299
let's get rid of this stuff, instead
86

86

00:03:56,299  -->  00:04:03,019
we'll say companion object and now we
87

87

00:04:03,019  -->  00:04:05,629
can put our variable in our function in
88

88

00:04:05,629  -->  00:04:10,450
here, we can say private var private var
89

89

00:04:10,450  -->  00:04:16,170
equals 6 and we can say fun access
90

90

00:04:16,170  -->  00:04:23,280
private var equals I'm accessing
91

91

00:04:23,280  -->  00:04:31,110
private var and I need a closing
92

92

00:04:31,110  -->  00:04:33,270
quotation here. So we've moved the
93

93

00:04:33,270  -->  00:04:35,160
variable declaration inside the
94

94

00:04:35,160  -->  00:04:37,230
companion object since the function
95

95

00:04:37,230  -->  00:04:40,110
needs to access it. Now if you like,
96

96

00:04:40,110  -->  00:04:41,820
you can think of everything within
97

97

00:04:41,820  -->  00:04:43,770
the companion object as being static,
98

98

00:04:43,770  -->  00:04:46,020
which is the equivalent of what we had
99

99

00:04:46,020  -->  00:04:49,680
in Java. So now we can call the access
100

100

00:04:49,680  -->  00:04:52,050
private var function without needing an
101

101

00:04:52,050  -->  00:04:54,870
instance of some class. So in our main
102

102

00:04:54,870  -->  00:04:59,600
method, let's say let's call it let's go
103

103

00:04:59,600  -->  00:05:05,070
print line some class dot now we have to
104

104

00:05:05,070  -->  00:05:08,820
use companion here dot access private
105

105

00:05:08,820  -->  00:05:11,640
var, I don't need the parentheses here
106

106

00:05:11,640  -->  00:05:13,050
that's why it's giving me an error.
107

107

00:05:13,050  -->  00:05:20,580
Alright, so let's run and we'll see I'm
108

108

00:05:20,580  -->  00:05:22,950
accessing private var six. So now we're
109

109

00:05:22,950  -->  00:05:27,240
able to access the function without
110

110

00:05:27,240  -->  00:05:30,060
needing an instance of the class. So we
111

111

00:05:30,060  -->  00:05:31,560
have the equivalent situation that we
112

112

00:05:31,560  -->  00:05:34,710
had in Java. Now we had to use the
113

113

00:05:34,710  -->  00:05:38,730
companion keyword here, because we didn't
114

114

00:05:38,730  -->  00:05:40,860
give our companion object a name, but you
115

115

00:05:40,860  -->  00:05:44,250
can give them names, so we could say you
116

116

00:05:44,250  -->  00:05:52,400
know some companion and then up here we
117

117

00:05:52,400  -->  00:05:55,380
can instead do that and now we can use
118

118

00:05:55,380  -->  00:06:00,780
some companion here and if we run, we'll
119

119

00:06:00,780  -->  00:06:03,990
see the same thing, but let's remove it
120

120

00:06:03,990  -->  00:06:09,450
again and let's try removing it from
121

121

00:06:09,450  -->  00:06:13,050
here and we'll see that Kotlin is
122

122

00:06:13,050  -->  00:06:15,450
actually smart enough to know that you
123

123

00:06:15,450  -->  00:06:17,310
want to call something in the companion
124

124

00:06:17,310  -->  00:06:18,960
object, so you don't even have to use
125

125

00:06:18,960  -->  00:06:21,180
companion, you can if you want to make it
126

126

00:06:21,180  -->  00:06:23,160
crystal clear to somebody reading the
127

127

00:06:23,160  -->  00:06:24,480
code that you're actually calling
128

128

00:06:24,480  -->  00:06:26,310
something within a companion object and
129

129

00:06:26,310  -->  00:06:27,630
of course you could have a companion
130

130

00:06:27,630  -->  00:06:30,000
object name here as well, but
131

131

00:06:30,000  -->  00:06:31,590
you don't have to do it, Kotlin's smart
132

132

00:06:31,590  -->  00:06:33,360
enough to know that you've got a
133

133

00:06:33,360  -->  00:06:35,760
companion object and it has a function
134

134

00:06:35,760  -->  00:06:38,520
called access private var. So that's one
135

135

00:06:38,520  -->  00:06:40,920
use of companion objects, so if we think
136

136

00:06:40,920  -->  00:06:44,460
about this in Java terms, what we're kind
137

137

00:06:44,460  -->  00:06:46,740
of doing is grouping static members
138

138

00:06:46,740  -->  00:06:49,830
within companion objects and anything
139

139

00:06:49,830  -->  00:06:51,630
that we have inside a companion object,
140

140

00:06:51,630  -->  00:06:53,340
we can access them without needing an
141

141

00:06:53,340  -->  00:06:56,130
instance of the enclosing class.
142

142

00:06:56,130  -->  00:06:59,100
Now another use of companion objects is you
143

143

00:06:59,100  -->  00:07:01,280
can use them to call private
144

144

00:07:01,280  -->  00:07:04,740
constructors, in fact you can use them to
145

145

00:07:04,740  -->  00:07:07,350
implement the factory pattern. So let's
146

146

00:07:07,350  -->  00:07:10,169
add two constructors to some class,
147

147

00:07:10,169  -->  00:07:12,300
I'm also going to add a property, so I'll say
148

148

00:07:12,300  -->  00:07:17,970
val some strings string, I'm going to
149

149

00:07:17,970  -->  00:07:19,530
initialize this in a minute in the
150

150

00:07:19,530  -->  00:07:22,250
constructor, so we'll say constructor
151

151

00:07:22,250  -->  00:07:26,370
this one will accept a string and all it
152

152

00:07:26,370  -->  00:07:29,250
will do is assign the property equals
153

153

00:07:29,250  -->  00:07:33,900
str. And we'll have a second secondary
154

154

00:07:33,900  -->  00:07:37,530
constructor, it will accept a string but
155

155

00:07:37,530  -->  00:07:40,440
it will also accept a boolean call it
156

156

00:07:40,440  -->  00:07:45,000
lower case and basically, if you pass
157

157

00:07:45,000  -->  00:07:48,690
true then you want to lower case the
158

158

00:07:48,690  -->  00:07:51,750
string and if you pass false, you want to upper
159

159

00:07:51,750  -->  00:07:54,510
case the string. So we'll say if lower
160

160

00:07:54,510  -->  00:07:59,790
case, then we're going to assign srt to
161

161

00:07:59,790  -->  00:08:06,870
lower case to the property and if lower
162

162

00:08:06,870  -->  00:08:08,760
case is false, then we're going to assign
163

163

00:08:08,760  -->  00:08:13,250
the upper case
164

164

00:08:13,250  -->  00:08:16,530
result to the property. So we've got two
165

165

00:08:16,530  -->  00:08:18,870
secondary constructors, we don't have a
166

166

00:08:18,870  -->  00:08:20,850
primary constructor as you can see there
167

167

00:08:20,850  -->  00:08:22,590
are no parentheses next to the class
168

168

00:08:22,590  -->  00:08:25,440
name. Now instead of doing it this way,
169

169

00:08:25,440  -->  00:08:27,420
we can add functions to our companion
170

170

00:08:27,420  -->  00:08:29,700
object that return instances of some
171

171

00:08:29,700  -->  00:08:32,190
class, in other words the companion
172

172

00:08:32,190  -->  00:08:34,020
object can act as a factory.
173

173

00:08:34,020  -->  00:08:36,150
We'll need a primary constructor for
174

174

00:08:36,150  -->  00:08:38,610
this, so I'm going to add it now, so I'm
175

175

00:08:38,610  -->  00:08:43,919
going to say val some string and its
176

176

00:08:43,919  -->  00:08:46,770
string, now we're going to see tons tons
177

177

00:08:46,770  -->  00:08:49,500
of errors now, because we have a
178

178

00:08:49,500  -->  00:08:51,180
duplicate property and also our
179

179

00:08:51,180  -->  00:08:53,280
secondary constructors aren't deferring
180

180

00:08:53,280  -->  00:08:56,310
to our primary constructor, but we're
181

181

00:08:56,310  -->  00:08:59,190
going to use the companion object, so we
182

182

00:08:59,190  -->  00:09:00,530
won't worry about the errors for now,
183

183

00:09:00,530  -->  00:09:02,820
we're going to add functions to the
184

184

00:09:02,820  -->  00:09:04,890
companion object that do the same thing
185

185

00:09:04,890  -->  00:09:06,990
that each secondary constructor is doing.
186

186

00:09:06,990  -->  00:09:14,430
So, we'll add fun just assign, accepts the
187

187

00:09:14,430  -->  00:09:18,420
string and this will just say create an
188

188

00:09:18,420  -->  00:09:21,840
instance of some class and it's just
189

189

00:09:21,840  -->  00:09:24,510
going to assign whatever it's passed.
190

190

00:09:24,510  -->  00:09:28,380
So it will pass this string along to the
191

191

00:09:28,380  -->  00:09:31,560
constructor and I see there's a typo
192

192

00:09:31,560  -->  00:09:33,540
here, I'll take that out and then we'll
193

193

00:09:33,540  -->  00:09:39,330
have a fun which upper or lower case is
194

194

00:09:39,330  -->  00:09:43,710
the string, so it will take a string and
195

195

00:09:43,710  -->  00:09:49,830
it will also take a boolean and it
196

196

00:09:49,830  -->  00:09:52,830
returns an instance of some class and in
197

197

00:09:52,830  -->  00:09:55,680
here, we'll say if lower case essentially
198

198

00:09:55,680  -->  00:09:58,020
what we're doing in the constructor then
199

199

00:09:58,020  -->  00:10:02,400
we're going to return some class and
200

200

00:10:02,400  -->  00:10:04,710
we're going to pass it string to lower
201

201

00:10:04,710  -->  00:10:09,510
case, otherwise we'll return it instance
202

202

00:10:09,510  -->  00:10:13,710
of some class and return it pass it the
203

203

00:10:13,710  -->  00:10:17,180
string upper case.
204

204

00:10:17,180  -->  00:10:19,560
Now these two functions are doing
205

205

00:10:19,560  -->  00:10:21,780
exactly what the constructors were doing,
206

206

00:10:21,780  -->  00:10:23,970
the first one as we can see has an
207

207

00:10:23,970  -->  00:10:26,340
expression body and the second one has a
208

208

00:10:26,340  -->  00:10:29,850
block body. So let's remove the duplicate
209

209

00:10:29,850  -->  00:10:32,130
property here and the two constructor
210

210

00:10:32,130  -->  00:10:33,930
definitions, because we don't need them
211

211

00:10:33,930  -->  00:10:38,310
and I can see that I didn't put a return
212

212

00:10:38,310  -->  00:10:41,880
state return here, so I'll do that. Okay,
213

213

00:10:41,880  -->  00:10:43,710
so all our errors have gone away, that's
214

214

00:10:43,710  -->  00:10:47,340
great, but we want this to implement the
215

215

00:10:47,340  -->  00:10:49,770
factory pattern which means that we want
216

216

00:10:49,770  -->  00:10:52,080
this class to be responsible for
217

217

00:10:52,080  -->  00:10:55,050
creating instances of some class nobody
218

218

00:10:55,050  -->  00:10:57,360
should be able to do it directly.
219

219

00:10:57,360  -->  00:11:00,510
So before, they could do it directly because
220

220

00:11:00,510  -->  00:11:02,400
they could call a secondary constructor,
221

221

00:11:02,400  -->  00:11:04,470
now they can call the primary
222

222

00:11:04,470  -->  00:11:07,050
constructor, so we need to make the
223

223

00:11:07,050  -->  00:11:09,090
primary constructor private, so that
224

224

00:11:09,090  -->  00:11:11,700
nobody from the outside can construct an
225

225

00:11:11,700  -->  00:11:14,250
instance of this class, so to do that,
226

226

00:11:14,250  -->  00:11:17,580
just have to add private constructor
227

227

00:11:17,580  -->  00:11:22,380
here. So now, none of the constructors
228

228

00:11:22,380  -->  00:11:25,620
because there's only one is accessible
229

229

00:11:25,620  -->  00:11:28,380
from outside the class, if you want to
230

230

00:11:28,380  -->  00:11:31,020
construct, you want to get an instance of
231

231

00:11:31,020  -->  00:11:33,630
this class, you have to call either just
232

232

00:11:33,630  -->  00:11:37,110
assign or upper or lower case and those
233

233

00:11:37,110  -->  00:11:39,480
are in the companion object. So now we
234

234

00:11:39,480  -->  00:11:41,580
have a class with a private constructor
235

235

00:11:41,580  -->  00:11:44,400
and factory functions, so let's create
236

236

00:11:44,400  -->  00:11:47,250
some instances up in the main function
237

237

00:11:47,250  -->  00:11:52,340
here, so we'll say val some class 1
238

238

00:11:52,340  -->  00:11:57,060
equals some class dot and we'll just
239

239

00:11:57,060  -->  00:11:58,740
assign here, we're not going to do
240

240

00:11:58,740  -->  00:12:00,540
anything to it and we'll say you know
241

241

00:12:00,540  -->  00:12:06,180
this is the string as is and then we'll
242

242

00:12:06,180  -->  00:12:10,860
say some class 2 equals some class dot
243

243

00:12:10,860  -->  00:12:14,190
and we'll say upper or lower case and
244

244

00:12:14,190  -->  00:12:18,590
we'll say this is the string as is,
245

245

00:12:18,590  -->  00:12:23,160
I will say true here, actually we'll say
246

246

00:12:23,160  -->  00:12:24,690
false because we want we want it to be
247

247

00:12:24,690  -->  00:12:29,760
uppercase so so we'll print line some class
248

248

00:12:29,760  -->  00:12:36,269
one dot some strings and print line some
249

249

00:12:36,269  -->  00:12:43,500
class 2 dot some string let's run and
250

250

00:12:43,500  -->  00:12:45,360
we'll see that we have our two instances,
251

251

00:12:45,360  -->  00:12:46,949
in the first case we're just assigning
252

252

00:12:46,949  -->  00:12:50,760
the string and in the second case, we're
253

253

00:12:50,760  -->  00:12:54,149
saying this isn't the string as is and
254

254

00:12:54,149  -->  00:12:55,139
we've uppercased it.
255

255

00:12:55,139  -->  00:12:58,290
So we can create instances of some class
256

256

00:12:58,290  -->  00:13:00,480
from outside the class but we have to go
257

257

00:13:00,480  -->  00:13:03,360
through the factory methods, we can't do
258

258

00:13:03,360  -->  00:13:04,430
something like this
259

259

00:13:04,430  -->  00:13:09,420
val you know some class 3 equals some
260

260

00:13:09,420  -->  00:13:12,570
class, you'll see right away we get an
261

261

00:13:12,570  -->  00:13:14,790
error says cannot access init,
262

262

00:13:14,790  -->  00:13:17,040
it is private in some class, so we cannot
263

263

00:13:17,040  -->  00:13:19,769
access the constructor directly, we have
264

264

00:13:19,769  -->  00:13:22,410
to go through the factory methods and so
265

265

00:13:22,410  -->  00:13:23,910
that's the second use for companion
266

266

00:13:23,910  -->  00:13:25,199
objects, you can use them in conjunction
267

267

00:13:25,199  -->  00:13:27,839
with a private primary constructor and
268

268

00:13:27,839  -->  00:13:30,990
so you can prevent anything from outside
269

269

00:13:30,990  -->  00:13:32,610
the class from using a constructor
270

270

00:13:32,610  -->  00:13:34,560
directly, it has to go through one of the
271

271

00:13:34,560  -->  00:13:38,209
functions in the companion object.
