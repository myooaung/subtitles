WEBVTT
1
00:00:05.630 --> 00:00:10.340
Right now that you've learned about classes and functions let's take a look at how inheritance works

2
00:00:10.340 --> 00:00:11.590
in Katlin.

3
00:00:11.600 --> 00:00:16.790
Now there's nothing new in terms of what you can do but there are some important differences between

4
00:00:16.790 --> 00:00:18.410
Cartland and Java.

5
00:00:18.410 --> 00:00:23.390
Now as I've mentioned several times before you're probably getting tired of hearing me say this.

6
00:00:23.510 --> 00:00:26.820
Everything in Katlin is public and final by default.

7
00:00:26.870 --> 00:00:31.850
That goes for classes top level functions member functions and properties.

8
00:00:31.850 --> 00:00:37.910
Recall that in Java you have to explicitly include the final keyword when you want something to be final.

9
00:00:38.060 --> 00:00:40.410
But you don't have to do that in Katlin.

10
00:00:40.490 --> 00:00:45.260
So with that in mind let's create a new intelligent project I've been doing this off screen for the

11
00:00:45.260 --> 00:00:48.500
last few videos but I'll quickly do it here.

12
00:00:48.800 --> 00:00:54.140
So we'll have a new project called lean on the left Cartland on the right and I'll call this project

13
00:00:54.140 --> 00:00:55.940
inheritance.

14
00:00:56.120 --> 00:01:05.190
And since I'll open it in this window and I'll create the usual package.

15
00:01:05.830 --> 00:01:11.890
I can only learn programming on inheritance.

16
00:01:12.050 --> 00:01:20.090
Now I'm going to create a class called printer and I'll select class so I don't have to type in word

17
00:01:20.090 --> 00:01:22.810
class and we'll call it printer.

18
00:01:23.450 --> 00:01:28.800
All right so now let's create a class called laser printer that extends printer.

19
00:01:28.940 --> 00:01:36.380
Now to extend the class in Codlin you follow the class named by a colon and then you follow that with

20
00:01:36.380 --> 00:01:41.210
the name of the class you want to extend so well say class laser printer.

21
00:01:41.330 --> 00:01:43.460
That's the name of our class Colin.

22
00:01:43.460 --> 00:01:46.570
And then we want to extend printer.

23
00:01:46.880 --> 00:01:49.760
Now we're going to get two errors here.

24
00:01:49.790 --> 00:01:52.190
First error says this type has a constructor.

25
00:01:52.190 --> 00:01:58.490
The second error says this type is final so it cannot be inherited from remember printer because we

26
00:01:58.490 --> 00:02:03.800
didn't specify an access modifier is Puplick and final by default.

27
00:02:03.800 --> 00:02:07.040
So as it stands now we can't extend this class.

28
00:02:07.040 --> 00:02:13.520
Now obviously we want printer to be extendable And so to tell the compiler that we want classes to be

29
00:02:13.520 --> 00:02:16.420
able to extend it we use the open keyword.

30
00:02:16.580 --> 00:02:22.580
And so we're going to add open here and now we'll see that the error about the class being final has

31
00:02:22.580 --> 00:02:23.290
gone away.

32
00:02:23.300 --> 00:02:25.730
So that's one problem solved.

33
00:02:25.730 --> 00:02:31.160
You'll also see that intelligence has an indicator here in the gutter now that tells us that the printer

34
00:02:31.160 --> 00:02:35.560
class has been subclassed by laser printer.

35
00:02:35.630 --> 00:02:41.300
All right but we still have the problem with the constructor and this error is telling us that we're

36
00:02:41.300 --> 00:02:43.480
not calling the superclasses constructor.

37
00:02:43.480 --> 00:02:51.320
Now we didn't specify a primary constructor here but obviously there's still a constructor being generated

38
00:02:51.350 --> 00:02:52.460
under the covers.

39
00:02:52.490 --> 00:02:58.310
It'll just be the default constructor that doesn't accept any parameters and doesn't do anything and

40
00:02:58.460 --> 00:03:01.550
the subclass has to call that constructor.

41
00:03:01.550 --> 00:03:03.110
Now we could go like this.

42
00:03:03.110 --> 00:03:09.170
We can say all right we'll just add an empty you know primary constructor here and then well we can

43
00:03:09.170 --> 00:03:13.900
do this without a constructor here and there we go.

44
00:03:13.940 --> 00:03:15.360
We fix that.

45
00:03:15.500 --> 00:03:22.270
But if we really really didn't want a primary constructor we could also go like this.

46
00:03:22.700 --> 00:03:29.630
We'd say constructor and then we want to defer to the super constructor so we just put a call in and

47
00:03:29.630 --> 00:03:30.850
say super.

48
00:03:31.040 --> 00:03:35.900
And so this is another way of doing it if we don't want a primary constructor even an empty one that

49
00:03:35.900 --> 00:03:36.990
does nothing.

50
00:03:37.070 --> 00:03:42.500
We just add a secondary constructor and all it does basically is defer to super.

51
00:03:42.590 --> 00:03:50.620
But we're going to add a primary constructor so we might as well go ahead and add a primary constructor.

52
00:03:54.670 --> 00:03:55.310
OK.

53
00:03:55.320 --> 00:04:02.220
So we've handled our two errors so let's add a model name property to printer all printers will have

54
00:04:02.220 --> 00:04:09.360
a model name so we'll add it to the superclass So we'll save our model name and we'll make it a string.

55
00:04:09.840 --> 00:04:13.800
And the moment we do that of course we're going to get an error because we're not delegating to the

56
00:04:13.800 --> 00:04:16.590
primary constructor anymore from the subclass.

57
00:04:16.590 --> 00:04:17.850
So we'll go ahead and do that.

58
00:04:17.850 --> 00:04:28.430
Well except a model name parameter and we'll delegate the handling of that to the primary constructor.

59
00:04:28.430 --> 00:04:30.070
All right so far so good.

60
00:04:30.090 --> 00:04:34.710
Now the printer class doesn't represent one specific model of a printer.

61
00:04:34.800 --> 00:04:39.640
So I'm going to make this class abstract.

62
00:04:40.080 --> 00:04:44.520
So now we've got an abstract class and we have one subclass.

63
00:04:44.560 --> 00:04:48.510
Now there is kind of a redundancy in our code here.

64
00:04:48.510 --> 00:04:50.200
Can you see what it is.

65
00:04:50.340 --> 00:04:55.470
I'll just give you a few seconds to take a look and see is there something here that we can remove because

66
00:04:55.470 --> 00:04:57.720
it's sort of redundant.

67
00:04:57.930 --> 00:05:05.750
Now if you're looking at this and you're thinking well abstract classes have to be extended right.

68
00:05:05.790 --> 00:05:07.980
Otherwise they're kind of useless.

69
00:05:08.220 --> 00:05:13.890
So do we have to tell the compiler that this class is not final.

70
00:05:13.890 --> 00:05:15.540
Well no we don't.

71
00:05:15.540 --> 00:05:20.100
Because it is redundant and you can see right here a modifier open is redundant because abstract is

72
00:05:20.100 --> 00:05:20.520
present.

73
00:05:20.520 --> 00:05:26.400
So in this case because it's an abstract class we can actually take away the open keyword because there's

74
00:05:26.400 --> 00:05:29.700
no point in having an abstract class that can't be extended.

75
00:05:29.710 --> 00:05:32.030
Mean never going to be able to do anything with it.

76
00:05:32.070 --> 00:05:38.640
So Katlin once again in the interest of conciseness you don't have to use the open keyword with abstract

77
00:05:38.640 --> 00:05:39.930
classes.

78
00:05:39.930 --> 00:05:43.470
Now you'll notice that the indicator in the gutter also went away.

79
00:05:43.470 --> 00:05:49.380
I'm not sure if that's an intentional or if it's a bug because I mean you still have this class extending

80
00:05:49.380 --> 00:05:52.340
it but the indicator went away.

81
00:05:52.470 --> 00:05:56.490
All right so let's add a function to the printer class that prints the string.

82
00:05:56.490 --> 00:06:02.070
The model name for this printer is whatever the model name is.

83
00:06:02.070 --> 00:06:10.160
So will say fine print model equals print line.

84
00:06:10.860 --> 00:06:19.530
The model name this printer is and it'll just be model name.

85
00:06:19.530 --> 00:06:25.000
Now it's perfectly OK to have non abstract functions with an abstract classes.

86
00:06:25.230 --> 00:06:27.500
So we're not doing anything wrong here.

87
00:06:27.510 --> 00:06:31.350
Now let's create a main method so we can actually start playing around with these.

88
00:06:31.380 --> 00:06:32.180
So we'll see.

89
00:06:32.180 --> 00:06:42.360
Main hit enter and we'll create a laser printer so we'll save the laser printer equals laser printer

90
00:06:44.490 --> 00:06:47.220
and we'll just say it's a brother and a no.

91
00:06:47.220 --> 00:06:53.240
1 2 3 4 have a brother sitting on my desk that's one sort of brother and then we'll we'll call different

92
00:06:53.250 --> 00:06:57.150
model functions so laser printer Daut print model.

93
00:06:57.390 --> 00:06:58.050
Let's run

94
00:07:03.310 --> 00:07:08.130
and we get the model name of this printer is brother one two 3 4.

95
00:07:08.300 --> 00:07:09.080
That's fine.

96
00:07:09.110 --> 00:07:10.850
We weren't expecting any errors.

97
00:07:10.850 --> 00:07:16.760
OK but let's say for laser printers we want to print out the model name differently so we don't want

98
00:07:16.760 --> 00:07:20.330
to use the superclasses implementation of print model.

99
00:07:20.480 --> 00:07:26.150
OK so we're going to override the print model function in the superclass So we're going to say fine

100
00:07:26.240 --> 00:07:41.480
print model equals for laser printers we're going to say print line the model name of this laser printer

101
00:07:42.620 --> 00:07:44.840
is model name.

102
00:07:44.840 --> 00:07:48.700
I know this is kind of a stupid example but it serves our purpose.

103
00:07:48.710 --> 00:07:54.440
Now we're going to get an error here that says print model hides member of super tight printer and needs

104
00:07:54.440 --> 00:07:56.350
the override modifier.

105
00:07:56.360 --> 00:07:59.470
So in other words we're not actually overwriting.

106
00:07:59.570 --> 00:08:00.830
Print model here.

107
00:08:00.960 --> 00:08:06.350
We're what we're doing is creating a completely separate function called print model and the compiler

108
00:08:06.350 --> 00:08:12.650
is complaining because it's saying hey you've already got a function call print model that's coming

109
00:08:12.650 --> 00:08:17.660
from the superclass so you can't define an other function called print model with the same function

110
00:08:17.660 --> 00:08:25.100
signature that doesn't work because once again we know that functions are final by default so the compiler

111
00:08:25.100 --> 00:08:32.000
here is assuming that this is not overriding this because right now we can't override it so we have

112
00:08:32.000 --> 00:08:35.420
to add the override keyword to this function.

113
00:08:35.750 --> 00:08:42.680
But we still have a problem because we also have to add open to the superclass.

114
00:08:42.680 --> 00:08:49.850
So when you want something to be extendable or to be able to be overridden you have to use the open

115
00:08:49.850 --> 00:08:52.080
keyword unless it's abstract.

116
00:08:52.220 --> 00:08:59.120
And then when it comes to functions when you actually override an open function in a superclass you

117
00:08:59.120 --> 00:09:01.250
have to use the override keyword.

118
00:09:01.280 --> 00:09:03.440
We don't have any errors now so let's run

119
00:09:06.400 --> 00:09:11.290
and in this case we'll see the model name and this laser printer is Brother One two three four because

120
00:09:11.290 --> 00:09:16.360
the laser printers implementation of print model is being called.

121
00:09:16.570 --> 00:09:21.190
All right so now let's add an abstract function to printer.

122
00:09:21.760 --> 00:09:28.330
So we'll say abstract fun and we'll say we'll call it best selling price

123
00:09:31.190 --> 00:09:32.750
and it returns a devil.

124
00:09:32.750 --> 00:09:37.880
Now let's pretend this function pulls in data from different places and calculates the best selling

125
00:09:37.880 --> 00:09:41.970
price for this printer meaning the one that will generate the most profit.

126
00:09:42.170 --> 00:09:46.040
We have to implement this function in laser printer because it's abstract.

127
00:09:46.040 --> 00:09:53.480
So let's go ahead and do that and we'll say override fun.

128
00:09:53.480 --> 00:09:54.870
Best selling price.

129
00:09:54.980 --> 00:10:00.170
And by pressing Enter intelligent generated the function for us and we just have to replace the body

130
00:10:00.170 --> 00:10:00.590
now.

131
00:10:00.680 --> 00:10:05.070
So we're going to replace it with a constant.

132
00:10:05.120 --> 00:10:12.020
So we don't actually need the body because we can use an expression and we're just going to set this

133
00:10:12.020 --> 00:10:17.300
to one twenty nine point ninety nine so we're going to pretend that you know this function does a bunch

134
00:10:17.300 --> 00:10:18.160
of calculations.

135
00:10:18.170 --> 00:10:22.340
But in our case we'll just say you know what the best selling price for this printer where we can make

136
00:10:22.340 --> 00:10:26.410
the most profit is $129 and 99 cents.

137
00:10:26.690 --> 00:10:33.290
Now because it's a constant we might just store it as a constant somewhere or you know use a property

138
00:10:33.500 --> 00:10:36.940
but we'll pretend it's doing a bunch of stuff and getting this number.

139
00:10:37.010 --> 00:10:44.150
Now the only reason I did this was to show you that just like with class is abstract functions are open

140
00:10:44.300 --> 00:10:48.070
by default because you'll notice that I did not use the open key word here.

141
00:10:48.080 --> 00:10:53.380
And we're not getting any errors but we still have to use the override keyword.

142
00:10:53.390 --> 00:10:57.270
You'll see that if we go like that we'll get an error.

143
00:10:57.530 --> 00:11:03.680
So even though you know the compiler should know that while this is an abstract function so you're overwriting

144
00:11:03.680 --> 00:11:04.210
it.

145
00:11:04.220 --> 00:11:06.800
Abstract functions are open by default.

146
00:11:06.950 --> 00:11:09.980
We have to use that even though we have the open keyword.

147
00:11:10.070 --> 00:11:11.980
So you always have to use override.

148
00:11:11.990 --> 00:11:16.930
But when you're dealing with abstract classes or abstract functions you don't have to use the open keyword.

149
00:11:16.940 --> 00:11:21.010
All right so I'm going to stop the video here and we'll pick this up in the next video.
