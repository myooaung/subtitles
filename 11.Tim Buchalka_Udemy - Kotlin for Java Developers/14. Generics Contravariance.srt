1
00:00:05,510 --> 00:00:09,580
We've seen how we can use covariance to preserve subtyping.

2
00:00:09,620 --> 00:00:13,290
Now we're going to take a look at what's called contravariant.

3
00:00:13,330 --> 00:00:15,640
So we're going to start with an example.

4
00:00:15,680 --> 00:00:22,850
So I've carried over just the Rose and the flower classes from the last video so I'm going to create

5
00:00:22,850 --> 00:00:30,290
an interface called Flower care so interface flower care of tea.

6
00:00:30,470 --> 00:00:40,110
And it just has one function called Prun and that function will prune a flower.

7
00:00:40,130 --> 00:00:45,530
So now I'm going to add back the garden class I didn't carried over because I want to do something a

8
00:00:45,530 --> 00:00:48,510
little bit different with it so I will say.

9
00:00:48,550 --> 00:01:00,200
Class garden and it'll be of tea flour and it's going to accept a flower's property which is a list

10
00:01:00,200 --> 00:01:07,670
of tea and it's also going to accept an instance that implements the flower care interface so Val flower

11
00:01:07,670 --> 00:01:13,270
care and that'll be of tight flower care of tea.

12
00:01:14,450 --> 00:01:20,330
And then the garden is going to have the pink flower function.

13
00:01:20,610 --> 00:01:28,790
It takes an eye and that will return to the ice flower in the garden.

14
00:01:29,030 --> 00:01:34,250
OK so now let's go out to our main function and let's create a Rose Garden now in order to do that.

15
00:01:34,250 --> 00:01:41,300
Now we're going to have to pass a list of Rose and we're also going to have to pass an instance flower

16
00:01:41,300 --> 00:01:46,750
care of rose so let's create the flower care instance first.

17
00:01:46,760 --> 00:01:52,880
So we'll save Val and I'll call it roast tender equals and we're going to make this in a not anonymous

18
00:01:52,880 --> 00:01:57,870
instance so we'll say object and we want it to be of tight flower care Rose.

19
00:01:58,610 --> 00:02:04,820
And then of course right now we're going to get an error because we have to implement the function in

20
00:02:04,820 --> 00:02:05,810
the interface.

21
00:02:05,810 --> 00:02:07,070
So we'll go ahead and do that.

22
00:02:07,070 --> 00:02:16,400
We'll say override fun Prun and we're going to take a rose and we'll just print out.

23
00:02:16,430 --> 00:02:22,060
I'm pruning a rose so that's it.

24
00:02:22,070 --> 00:02:29,990
And now we can create our garden so we'll save our Rose Garden equals a garden of Rose and we're going

25
00:02:29,990 --> 00:02:35,270
to pass a new list of roses solaced Rose.

26
00:02:35,570 --> 00:02:39,420
Rose our poor little garden only those two roses in it.

27
00:02:39,470 --> 00:02:42,190
And then of course we'll pass the rose tender.

28
00:02:42,200 --> 00:02:44,900
So that's all fine that all works.

29
00:02:44,900 --> 00:02:47,660
So now let's add another function to our garden.

30
00:02:47,660 --> 00:02:48,930
We can pick a flower.

31
00:02:49,100 --> 00:02:54,620
We're taking a flower care instance so let's use it for some things so we'll say fun.

32
00:02:54,900 --> 00:03:02,600
Ken flower and it'll also ask you what flower you want to tend to apparently tending to the entire garden

33
00:03:02,600 --> 00:03:11,390
would be a little bit too strenuous and it'll just say flower care or prune and pass along the flower

34
00:03:11,390 --> 00:03:12,830
that you want pruned.

35
00:03:13,160 --> 00:03:18,750
Actually that should be flowers I flowers by.

36
00:03:20,000 --> 00:03:25,820
So you can pick a flower and you can tend to a flower and tending to the flower means you're going to

37
00:03:25,820 --> 00:03:26,640
prune it.

38
00:03:26,810 --> 00:03:32,140
All right so now let's turn to two of our roses so we have a Rose Garden up here and we'll say well

39
00:03:32,150 --> 00:03:33,800
attend to one of our two roses.

40
00:03:33,800 --> 00:03:42,350
We don't want to overexerted our garden here so we'll say Rose Garden Daut 10 flower and will tend to

41
00:03:42,350 --> 00:03:44,070
the first rose.

42
00:03:44,090 --> 00:03:45,580
Now if we run at this point

43
00:03:49,570 --> 00:03:52,230
we'll see I'm pruning a rose.

44
00:03:52,300 --> 00:03:58,690
So what's happening here is we've created a rose garden and our garden has two roses in it and we've

45
00:03:58,690 --> 00:04:06,790
passed the rose tender and so here in the garden class when we call 10 flower it's going to call you

46
00:04:06,790 --> 00:04:13,240
see flower care object that we passed in to invoke Prun we passed in this anonymous instance and it's

47
00:04:13,240 --> 00:04:18,350
implementation of Prun just prints out I'm pruning a rose so far so good.

48
00:04:18,430 --> 00:04:24,420
So we also want a daffodil garden now so let's go ahead and create a daffodil garden of course and we're

49
00:04:24,420 --> 00:04:28,960
going to have to create declasse so we'll say class daffodil.

50
00:04:28,960 --> 00:04:33,680
And it also extends flower fullfil Yes.

51
00:04:33,850 --> 00:04:35,980
Daffodil that looks better.

52
00:04:35,980 --> 00:04:42,080
And then we'll do the same thing for the daffodil garden that we did for the Rose Garden and we'll see

53
00:04:42,150 --> 00:04:50,650
how daffodil tender and again will create an anonymous object of flower care except this time we want

54
00:04:50,650 --> 00:04:52,180
a flower care of daffodil

55
00:04:55,060 --> 00:04:59,970
and we'll say override fun prune flower.

56
00:04:59,980 --> 00:05:06,900
But this time it's going to be a daffodil and this time we'll say prune line.

57
00:05:07,900 --> 00:05:15,000
I'm pruning a daffodil and that should be flower care.

58
00:05:15,010 --> 00:05:20,920
I'm just wondering why the compiler screaming at me and it's because I had flour rather than flour care.

59
00:05:20,920 --> 00:05:29,170
OK so let's now tend actually we have to create our daffodil garden first and then we'll will tend to

60
00:05:29,170 --> 00:05:39,550
it so will say daffodil garden equals garden daffodil and we'll make this garden we'll give it Daffer

61
00:05:39,880 --> 00:05:41,800
Dale we'll give it three flowers

62
00:05:45,100 --> 00:05:52,630
and we're going to pass our daffodil tender and I need a closing bracket here.

63
00:05:54,280 --> 00:05:54,770
OK.

64
00:05:54,790 --> 00:05:56,680
So that's all fine.

65
00:05:56,860 --> 00:05:59,830
And now let's tend to a flower just like we did with the Rose Garden.

66
00:05:59,890 --> 00:06:09,280
So dark little tender dot can actually daffodil garden rather top ten flower and will tend flower number

67
00:06:09,280 --> 00:06:10,440
two this time.

68
00:06:10,570 --> 00:06:11,410
So let's run

69
00:06:14,070 --> 00:06:14,310
.

70
00:06:14,550 --> 00:06:19,170
And when we tend to our Rose Garden we're pruning your rose and when we tend to our daffodil garden

71
00:06:19,170 --> 00:06:20,850
we're pruning a daffodil.

72
00:06:20,850 --> 00:06:26,470
Now everything's working but if you look at this code let me just close up the console for a minute.

73
00:06:26,490 --> 00:06:28,860
If you look at this code this is repetitive.

74
00:06:28,890 --> 00:06:35,080
And what would happen if we also wanted a daisy garden and a lily garden etc..

75
00:06:35,190 --> 00:06:39,840
We don't want to have to be repeating code like this for every possible type of garden that we might

76
00:06:39,840 --> 00:06:40,400
have.

77
00:06:40,470 --> 00:06:46,200
Now we can't do anything about creating the different types of garden because there are different instances

78
00:06:46,230 --> 00:06:52,500
and we can't really do anything about calling 10 flower but if we look at our anonymous objects here

79
00:06:52,500 --> 00:06:59,850
so this rose tender here and this rose tender here or daffodil tender in this case they're doing the

80
00:06:59,850 --> 00:07:06,720
same thing in both cases they're just printing out a line of text so it would be nice if we could just

81
00:07:06,720 --> 00:07:08,050
use the same object.

82
00:07:08,190 --> 00:07:10,020
But right now we can't.

83
00:07:10,200 --> 00:07:15,610
If we try to pass the rose tender to the daffodil garden the compiler is going to complain.

84
00:07:15,630 --> 00:07:16,480
Let's try it.

85
00:07:16,500 --> 00:07:20,060
So let's change this two rows tender instead

86
00:07:22,770 --> 00:07:30,390
and the compiler says no I'm expecting a flower care daffodil this is a daffodil garden not a rose garden

87
00:07:30,390 --> 00:07:34,400
so why are you giving me a rose flower care instance.

88
00:07:34,560 --> 00:07:41,210
Now we could try creating a flower tenderer and you know use that for both roses and daffodils.

89
00:07:41,370 --> 00:07:43,100
Let's try that.

90
00:07:43,140 --> 00:07:47,320
So I'm going to switch this back to Daffodil for now.

91
00:07:47,970 --> 00:07:49,750
Daffodil tender.

92
00:07:50,400 --> 00:07:55,590
And then let's go up here and we'll say about flower tender.

93
00:07:55,690 --> 00:08:02,760
So this is the all mighty flower tender and be an object of flower care except this time it will tend

94
00:08:02,760 --> 00:08:10,980
to a flower because after all both roses and daffodils are flowers and we'll say override fun prune

95
00:08:11,490 --> 00:08:20,650
flower this time you want to flower and this will say print line capital F for that flower and this

96
00:08:20,660 --> 00:08:23,020
will say print line.

97
00:08:23,460 --> 00:08:25,100
I'm tending a flower.

98
00:08:25,350 --> 00:08:27,720
OK so we've got a flower tender now.

99
00:08:27,740 --> 00:08:29,560
It'll take flower care flower.

100
00:08:29,710 --> 00:08:32,220
Let's try passing it to our Rose Garden.

101
00:08:32,220 --> 00:08:37,950
So instead of a rose tender we'll say Well go ahead and use a flower tender and we can't because it's

102
00:08:37,950 --> 00:08:40,290
going to say you have a Rose Garden.

103
00:08:40,320 --> 00:08:42,800
I want a flower care flower.

104
00:08:42,810 --> 00:08:48,990
Now I think this might be a little bit of a bug here because you can see found at Lake throws its hands

105
00:08:48,990 --> 00:08:50,580
up and says I don't know what I found.

106
00:08:50,580 --> 00:08:56,130
I think it's probably a little bug in intelligence right now but we know that what it's it's doing this

107
00:08:56,130 --> 00:09:02,910
because it's saying that the type of flower care that you pass has to be T.

108
00:09:02,940 --> 00:09:08,910
So if t is a rose and I want a list of rows and I want to flower care of Rose I will not accept a flower

109
00:09:08,910 --> 00:09:15,560
care of flower even though Rose is a subclass of flower.

110
00:09:15,870 --> 00:09:19,020
So we want the team matching the matching of T.

111
00:09:19,020 --> 00:09:21,740
Here we want it to be a little more relaxed.

112
00:09:21,750 --> 00:09:28,650
I mean roses and daffodils are both flowers so a Rose Garden a daffodil garden should accept a flower

113
00:09:28,650 --> 00:09:30,960
care instance that cares for flowers.

114
00:09:30,960 --> 00:09:33,860
So this is where contravariant comes in.

115
00:09:34,040 --> 00:09:37,470
Contravariant is the opposite of covariance.

116
00:09:37,560 --> 00:09:43,260
When we use covariance we're preserving the subtyping when we use contravariant.

117
00:09:43,260 --> 00:09:50,610
We're going in the opposite direction so we're starting at a subclass and we wind to accept instances

118
00:09:50,610 --> 00:09:54,570
of that subclass or any of its superclasses.

119
00:09:54,690 --> 00:10:01,470
You can remember that we were doing the opposite with covariance So rather than saying we want to accept

120
00:10:01,470 --> 00:10:09,470
a flower and all of its subclasses were saying we want to accept a rose and all of it superclasses.

121
00:10:09,840 --> 00:10:15,780
So when it comes to contravariant we're looking up the inheritance tree rather than down the inheritance

122
00:10:15,780 --> 00:10:16,700
tree.

123
00:10:16,710 --> 00:10:23,160
Now some people have characterized this as flipping the inheritance tree upside down and so in this

124
00:10:23,160 --> 00:10:30,730
case Rose would become the super type of flower that always makes my brain hiccup because I'm thinking

125
00:10:30,730 --> 00:10:37,680
but Rose isn't a super type of flower so I I find it more intuitive to just say you're starting at a

126
00:10:37,680 --> 00:10:45,280
point on the inheritance tree and if you want to accept that point in anything above it then it's contravariant.

127
00:10:45,280 --> 00:10:49,410
And if you want to accept that point in anything below it then it's covariance.

128
00:10:49,410 --> 00:10:57,960
But for you maybe the notion of flipping the tree on its ear essentially and making subtypes become

129
00:10:57,960 --> 00:11:00,780
super types maybe that's more intuitive for you.

130
00:11:00,810 --> 00:11:02,970
So how do we make this happen in code.

131
00:11:02,970 --> 00:11:10,020
How can we say in this case that when we're given a subclass of flour we also want to accept flour.

132
00:11:10,200 --> 00:11:16,230
Well when we discussed covariance we discussed the in and out positions and we said that covariant types

133
00:11:16,590 --> 00:11:18,810
appear at the out position.

134
00:11:19,050 --> 00:11:25,980
So maybe it won't be a surprise to you that contravariant types use the in position and we know that

135
00:11:25,980 --> 00:11:32,250
parameters occur at the in position so let's do the following down here in flower care.

136
00:11:32,250 --> 00:11:38,460
We're going to say all right we want you to be contravariant because t should accept whatever T is in

137
00:11:38,460 --> 00:11:40,230
any of its superclasses.

138
00:11:40,230 --> 00:11:47,810
So if we have a garden of roses we want it to accept a flower care of flour because flour is a superclass

139
00:11:47,900 --> 00:11:48,810
of Rose.

140
00:11:48,960 --> 00:11:55,020
So we've just made our interface contravariant by adding in before the type So we're saying here that

141
00:11:55,020 --> 00:12:01,200
if we that we will accept any types that have T in their inheritance tree.

142
00:12:01,260 --> 00:12:07,300
So if t is a direct or indirect superclass of a class then the class will match T.

143
00:12:07,440 --> 00:12:13,920
So now we can create one implementation of flower care for flower and both the rows and the daffodil

144
00:12:13,920 --> 00:12:20,550
gardens will accept it because flour is a superclass of rows and it's also a superclass of daffodil.

145
00:12:20,580 --> 00:12:28,770
So a garden of Rose will be perfectly happy with a flower care a flower because we've made the flower

146
00:12:28,770 --> 00:12:36,480
care type contravariant and therefore a rose garden will accept a flower care a flower.

147
00:12:36,480 --> 00:12:44,880
So first let's go back to the flower care a flower that we created instead of just printing out.

148
00:12:44,880 --> 00:12:45,860
I'm tending a flower.

149
00:12:45,870 --> 00:12:51,840
Let's make it say something more specific so we'll say I'm tending a pen I'll open up an expression

150
00:12:51,840 --> 00:12:53,970
and we'll say a flower name.

151
00:12:54,000 --> 00:12:59,870
Now of course we don't have a name property in the flower class right now so we'll go down and fix that.

152
00:12:59,910 --> 00:13:05,690
So we'll say the flower takes a vowel name as the string.

153
00:13:05,880 --> 00:13:13,080
And now of course our subclasses are going to complain because they're saying now the primary constructor

154
00:13:13,080 --> 00:13:14,970
actually wants something.

155
00:13:14,970 --> 00:13:21,380
So for Rose we're going to pass that Rose and for a daffodil we're going to pass it.

156
00:13:21,390 --> 00:13:27,590
Daffodil So now we'll use a flower care flower for both gardens.

157
00:13:27,750 --> 00:13:31,290
We've already done it for the Rose Garden and you'll let me go here.

158
00:13:31,290 --> 00:13:32,040
Did I change it.

159
00:13:32,040 --> 00:13:32,410
No.

160
00:13:32,410 --> 00:13:36,010
So you'll notice that for the Rose Garden it's no longer complaining.

161
00:13:36,090 --> 00:13:37,270
The error went away.

162
00:13:37,410 --> 00:13:44,820
So let's also change our daffodil garden here so we'll say we want to pass in the flower tender now.

163
00:13:45,120 --> 00:13:46,860
And that's not complaining either.

164
00:13:47,100 --> 00:13:48,140
So let's run

165
00:13:51,300 --> 00:13:52,020
and we'll see.

166
00:13:52,020 --> 00:13:58,650
I'm tending a rose and I'm tending a daffodil rather than I am pruning so for sure we're calling this

167
00:13:58,650 --> 00:13:59,610
implementation.

168
00:13:59,610 --> 00:14:04,350
That's what we're passing to both of our gardens and you can see now that the roast tender and the daffodil

169
00:14:04,350 --> 00:14:08,210
tender are not used and we're no longer repeating ourselves now.

170
00:14:08,280 --> 00:14:13,500
We could go ahead and delete the rows tender and delete the daffodil tender because we no longer need

171
00:14:13,500 --> 00:14:14,010
them.

172
00:14:14,040 --> 00:14:20,190
We don't have to create a in an instance of flower care for every single possible type of flower.

173
00:14:20,220 --> 00:14:21,690
So that's contravariant.

174
00:14:21,690 --> 00:14:26,370
Just as with covariance using contravariant comes with a price.

175
00:14:26,370 --> 00:14:29,160
Remember one where we make something covariant.

176
00:14:29,310 --> 00:14:31,830
We can no longer write to it.

177
00:14:31,830 --> 00:14:38,070
I guess it won't come as any surprise that when it comes to contravariant we can't reheat them we can

178
00:14:38,070 --> 00:14:43,180
only write it so we can only use contravariant classes as parameters.

179
00:14:43,230 --> 00:14:49,500
We can't use them as return types of functions because the return type is in the out position so we

180
00:14:49,500 --> 00:14:53,910
can't do the following if we go back down to our interface which is now contravariant.

181
00:14:53,910 --> 00:15:01,920
We can't do something like fun pick T because the compiler is going to say nope type parameter T is

182
00:15:01,920 --> 00:15:08,220
declared as in but occurs in the out position so we have the opposite situation now compared to something

183
00:15:08,220 --> 00:15:10,350
that's covariant.

184
00:15:10,350 --> 00:15:11,940
Now why this restriction.

185
00:15:11,940 --> 00:15:16,570
We went through that with covariance So why do we have this restriction for contravariant.

186
00:15:16,590 --> 00:15:18,200
Let me just comment that out.

187
00:15:18,540 --> 00:15:24,060
Well because if we didn't have this restriction we could run into the following situation if we could

188
00:15:24,090 --> 00:15:25,080
implement pick.

189
00:15:25,080 --> 00:15:30,360
So pretend that we can implement this function that the compiler is not giving us an error.

190
00:15:30,510 --> 00:15:35,300
If we could do that we could write code like the following and obviously this is not going to compile

191
00:15:35,310 --> 00:15:42,540
but just to show you we could save Val flower tender and I guess I'll call it too because we already

192
00:15:42,540 --> 00:15:45,140
have one equals object.

193
00:15:45,150 --> 00:15:56,150
Flower care flower and will say overbright fun prune and for the prune will take it.

194
00:15:56,150 --> 00:16:02,010
Flower equals print line.

195
00:16:02,670 --> 00:16:06,990
You know I'll just say I'm tending a flower because this is just for illustration purposes.

196
00:16:07,000 --> 00:16:10,260
And now we'll say all right let's override pick now.

197
00:16:10,290 --> 00:16:14,330
Obviously we can't do that but pretend we're overwriting pick.

198
00:16:14,340 --> 00:16:20,740
This returns a flower and we'll say we return flower or some random flower.

199
00:16:21,010 --> 00:16:24,990
We're getting this error because there's not actually a pick function so I'll just take this out just

200
00:16:25,740 --> 00:16:26,770
so we don't get an error.

201
00:16:27,030 --> 00:16:35,240
And then down in our garden class instead of 10 flower or rather pick flower just returning flowers.

202
00:16:35,280 --> 00:16:44,140
We could change this to use our flower care so we'd say we're going to do flower care dot pick and we're

203
00:16:44,140 --> 00:16:53,730
going to pick a flower flower care this won't work because we can't actually implement flower care pick

204
00:16:53,720 --> 00:16:58,040
in the flower care interface but pretend we could.

205
00:16:58,040 --> 00:17:03,510
So if we now come up here and we say we create a rose garden so.

206
00:17:03,580 --> 00:17:09,480
Val rose garden too and we're going to pass it.

207
00:17:09,570 --> 00:17:17,580
We're going to create a garden of Rose and we'll give it a list of just one flower and then we'll pass

208
00:17:17,580 --> 00:17:21,290
it our flower tender too because that will work.

209
00:17:21,570 --> 00:17:29,540
And then we say Rose Garden to dot pick flower let's say zero.

210
00:17:29,880 --> 00:17:33,580
If we come up to here we're not going to get a rose.

211
00:17:33,630 --> 00:17:36,160
We're actually going to get some random flower.

212
00:17:36,300 --> 00:17:39,850
In fact this would work if I save Val.

213
00:17:39,850 --> 00:17:44,060
Rose Rose equals this works.

214
00:17:44,070 --> 00:17:44,720
Nothing.

215
00:17:44,730 --> 00:17:51,480
Nothing fails here and we're asking for a rose but because we've created this garden with a flower tender

216
00:17:51,480 --> 00:17:57,610
too and pretending that we could implement this pick we could return any type of flour from here.

217
00:17:57,640 --> 00:18:02,160
We're returning a flower some random flower we're not returning a rose.

218
00:18:02,220 --> 00:18:09,300
So the problem is if we were allowed to do this sort of thing when we're dealing with contravariant

219
00:18:09,300 --> 00:18:14,010
interfaces and we do something like this we're not guaranteed to get the type that we want.

220
00:18:14,010 --> 00:18:21,790
It's always ok to treat a rose like a flower but it's not okay to treat a flower like a rose.

221
00:18:22,110 --> 00:18:29,190
And so that's why it's OK to accept contravariant types as parameters and act on them because it's OK

222
00:18:29,190 --> 00:18:31,540
to treat a rose like a flower.

223
00:18:31,590 --> 00:18:36,210
We know that an instance can always be treated like one of its superclasses.

224
00:18:36,330 --> 00:18:39,870
So it's fine to treat a rose like a flower but the opposite isn't true.

225
00:18:39,870 --> 00:18:46,240
You can't treat a flower like a rose it might be a rose but it might not be.

226
00:18:46,290 --> 00:18:53,230
So once again using contravariant it comes with a price so that's covariance covariances contravariant

227
00:18:53,300 --> 00:18:58,350
you can use them when you want them matching for tea to be a bit more relaxed.

228
00:18:58,460 --> 00:19:04,370
You use covariance when you want subtyping to be preserved in other words t will match T and all of

229
00:19:04,370 --> 00:19:12,070
its subclasses and you use contravariant when you want to match T and any of it superclasses.

230
00:19:12,110 --> 00:19:17,840
And as I said before I've seen contravariant described as flipping the inheritance tree for a class.

231
00:19:18,110 --> 00:19:24,070
So in the flower case when we use contravariant we'd say Rose becomes the supertype of flower.

232
00:19:24,140 --> 00:19:29,340
But the way I look at it is which way are you looking at the inheritance tree.

233
00:19:29,390 --> 00:19:34,670
If you start with a class do you want to accept a class and all of its superclasses Well then you're

234
00:19:34,670 --> 00:19:40,070
dealing with contravariant So you want to accept a class in all its subclasses then you're dealing with

235
00:19:40,070 --> 00:19:45,410
covariance So when you started a point on a tree are you looking up the tree that's contravariant.

236
00:19:45,410 --> 00:19:48,230
Are you looking down the tree that's covariance.

237
00:19:48,230 --> 00:19:51,380
I find that more intuitive but you might not.

238
00:19:51,620 --> 00:19:56,900
So when you're dealing with covariant and contravariant what you're actually doing is widening a generic

239
00:19:56,900 --> 00:20:04,300
type to include either a class and its subclasses or a class and it's superclasses.

240
00:20:04,310 --> 00:20:11,300
Now what we've looked at so far for both covariance and contravariant is call declarations site variants

241
00:20:11,330 --> 00:20:16,840
because we're doing it when we declare a class or an interface.

242
00:20:16,850 --> 00:20:23,600
So here we've made the interface contravariant and we've done that on the interface declaration.

243
00:20:23,960 --> 00:20:33,530
And here we've made what we did in the other project we made garden covariant by including out when

244
00:20:33,530 --> 00:20:35,030
we declared garden.

245
00:20:35,060 --> 00:20:42,170
So we made it covariant by including out on the class statement and that is called declaration site

246
00:20:42,200 --> 00:20:49,280
variance and you don't have declarations site variants in Java in Java you only have use site variants

247
00:20:49,370 --> 00:20:54,090
and you have the same thing in Katlin and that's what we're going to look at next.

248
00:20:54,140 --> 00:20:55,340
I'll see you in the next video.
