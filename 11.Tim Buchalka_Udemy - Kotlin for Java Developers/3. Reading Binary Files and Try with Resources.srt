1
1

00:00:04,710  -->  00:00:06,720
so in the last video we talked about
2

2

00:00:06,720  -->  00:00:08,820
text files now let's talk about binary
3

3

00:00:08,820  -->  00:00:11,730
files well as I mentioned right upfront
4

4

00:00:11,730  -->  00:00:14,670
Kotlin doesn't have its own io classes
5

5

00:00:14,670  -->  00:00:17,970
it has added some extension functions to
6

6

00:00:17,970  -->  00:00:20,910
the jdk s io classes to make them easier
7

7

00:00:20,910  -->  00:00:24,510
to use or more convenient and while it
8

8

00:00:24,510  -->  00:00:27,060
has added some functions for binary data
9

9

00:00:27,060  -->  00:00:29,340
there's really only one that's a
10

10

00:00:29,340  -->  00:00:31,830
convenience function you can call an
11

11

00:00:31,830  -->  00:00:34,050
extension function called read bytes on
12

12

00:00:34,050  -->  00:00:36,660
the file class but it reads the file in
13

13

00:00:36,660  -->  00:00:39,120
one go and then you'd have to parse the
14

14

00:00:39,120  -->  00:00:42,540
input and it's also limited to a 2gig
15

15

00:00:42,540  -->  00:00:44,850
file size but when you're reading a
16

16

00:00:44,850  -->  00:00:47,760
binary file you often just want to read
17

17

00:00:47,760  -->  00:00:49,950
in each piece of data as you go you
18

18

00:00:49,950  -->  00:00:51,210
generally don't want to read the entire
19

19

00:00:51,210  -->  00:00:54,149
file in and to do that the best way is
20

20

00:00:54,149  -->  00:00:57,180
to just use the Java classes so I'm
21

21

00:00:57,180  -->  00:00:59,250
going to do it that way in a Kotlin file
22

22

00:00:59,250  -->  00:01:02,070
just to show you that it works so in
23

23

00:01:02,070  -->  00:01:04,259
here in the main function I'll say Val
24

24

00:01:04,259  -->  00:01:09,270
di equals data input stream and we'll go
25

25

00:01:09,270  -->  00:01:13,200
file input stream and this time we're
26

26

00:01:13,200  -->  00:01:14,909
going to read a file called test file
27

27

00:01:14,909  -->  00:01:17,850
dot bin now here there's multiple
28

28

00:01:17,850  -->  00:01:20,640
possibilities so I'm going to have to
29

29

00:01:20,640  -->  00:01:24,450
tell the compiler which one I want and I
30

30

00:01:24,450  -->  00:01:25,799
don't know why it's not finding data
31

31

00:01:25,799  -->  00:01:27,869
input stream they both try adding that
32

32

00:01:27,869  -->  00:01:33,600
one manually ok so now we're all good
33

33

00:01:33,600  -->  00:01:36,689
now this test file dot bin it's the same
34

34

00:01:36,689  -->  00:01:41,040
file as test file txt except it's been
35

35

00:01:41,040  -->  00:01:43,350
written out in binary so that's why
36

36

00:01:43,350  -->  00:01:44,909
you're getting these weird characters
37

37

00:01:44,909  -->  00:01:47,820
here when you write a string a utf-8
38

38

00:01:47,820  -->  00:01:51,689
string as a binary string the length of
39

39

00:01:51,689  -->  00:01:54,090
the string is written before the string
40

40

00:01:54,090  -->  00:01:55,979
itself so that when you read it back in
41

41

00:01:55,979  -->  00:01:58,320
you can actually figure out what the
42

42

00:01:58,320  -->  00:02:00,780
string is otherwise you'd have no way of
43

43

00:02:00,780  -->  00:02:03,299
knowing how to parse the data that
44

44

00:02:03,299  -->  00:02:03,810
you're getting
45

45

00:02:03,810  -->  00:02:09,000
ok so we'll say Val Fi and that's going
46

46

00:02:09,000  -->  00:02:10,799
to be a string in fact it's going to be
47

47

00:02:10,799  -->  00:02:12,120
a var because I'm not going to assign it
48

48

00:02:12,120  -->  00:02:18,210
yet and then we'll say try and we'll say
49

49

00:02:18,210  -->  00:02:21,590
all really want to type J don't I wall
50

50

00:02:21,590  -->  00:02:25,440
true can't type today for some reason T
51

51

00:02:25,440  -->  00:02:28,640
are you there we go
52

52

00:02:28,640  -->  00:02:33,170
so while true we're going to say F I
53

53

00:02:33,170  -->  00:02:37,470
equals di da tree UT f the read UT F
54

54

00:02:37,470  -->  00:02:39,870
function knows when it's reading a UT f
55

55

00:02:39,870  -->  00:02:41,460
that it there's going to be a length
56

56

00:02:41,460  -->  00:02:43,920
which is generally 2 bytes long and then
57

57

00:02:43,920  -->  00:02:47,700
the string and then print line si and
58

58

00:02:47,700  -->  00:02:49,020
then of course we're going to have to
59

59

00:02:49,020  -->  00:02:52,860
catch do F exception this is just a
60

60

00:02:52,860  -->  00:02:54,840
quick and dirty function to show you
61

61

00:02:54,840  -->  00:02:56,850
that this works so that's why I've got
62

62

00:02:56,850  -->  00:02:58,230
an infinite loop and we're just going to
63

63

00:02:58,230  -->  00:03:00,000
rely on an exception being thrown when
64

64

00:03:00,000  -->  00:03:02,040
we hit end a file to break us out of the
65

65

00:03:02,040  -->  00:03:07,010
loop so if we go ahead and run this
66

66

00:03:07,010  -->  00:03:10,590
we'll see that we get our file contents
67

67

00:03:10,590  -->  00:03:13,680
exactly as we had them before and we did
68

68

00:03:13,680  -->  00:03:17,640
it using Java dot IO classes inside a
69

69

00:03:17,640  -->  00:03:19,350
Kotlin file and we didn't have to do
70

70

00:03:19,350  -->  00:03:21,840
anything special so I just wanted to
71

71

00:03:21,840  -->  00:03:24,000
show you that you can do that there's
72

72

00:03:24,000  -->  00:03:27,840
really as I said no great enhancements
73

73

00:03:27,840  -->  00:03:31,290
to binary file rating most of the sort
74

74

00:03:31,290  -->  00:03:32,580
of convenience functions and
75

75

00:03:32,580  -->  00:03:34,890
enhancements have been added for reading
76

76

00:03:34,890  -->  00:03:37,230
text files and the same goes for object
77

77

00:03:37,230  -->  00:03:39,510
streams there is no support for those in
78

78

00:03:39,510  -->  00:03:42,270
Kotlin at all so just go ahead and use
79

79

00:03:42,270  -->  00:03:45,090
the Java classes and write code as you
80

80

00:03:45,090  -->  00:03:47,760
normally would of course you would write
81

81

00:03:47,760  -->  00:03:48,960
it using the hotland
82

82

00:03:48,960  -->  00:03:51,420
syntax so as you notice here we're not
83

83

00:03:51,420  -->  00:03:54,210
using new and we're not using system dot
84

84

00:03:54,210  -->  00:03:56,730
out dot print line etc but you can just
85

85

00:03:56,730  -->  00:03:58,950
go ahead and use the Java i/o classes
86

86

00:03:58,950  -->  00:04:00,660
directly from Kotlin and you don't have
87

87

00:04:00,660  -->  00:04:03,210
to do anything special so that's really
88

88

00:04:03,210  -->  00:04:04,950
all there is when it comes to reading
89

89

00:04:04,950  -->  00:04:07,740
files now what about writing files well
90

90

00:04:07,740  -->  00:04:09,360
we're not going to spend any time at all
91

91

00:04:09,360  -->  00:04:10,830
on writing files because there really
92

92

00:04:10,830  -->  00:04:12,990
isn't anything much new in that area
93

93

00:04:12,990  -->  00:04:16,260
either Kotlin has added writer and
94

94

00:04:16,260  -->  00:04:18,870
buffered writer extension functions just
95

95

00:04:18,870  -->  00:04:20,750
as it added reader and buffered reader
96

96

00:04:20,750  -->  00:04:22,920
but there aren't any functions
97

97

00:04:22,920  -->  00:04:25,800
equivalent to read text and read lines
98

98

00:04:25,800  -->  00:04:28,500
because generally you don't write stuff
99

99

00:04:28,500  -->  00:04:31,169
out in one shot so I'm going to leave it
100

100

00:04:31,169  -->  00:04:32,070
to you to go
101

101

00:04:32,070  -->  00:04:34,680
and explore the hotland style package on
102

102

00:04:34,680  -->  00:04:38,100
your own and see what you can do in
103

103

00:04:38,100  -->  00:04:40,710
Kotla and see what convenience functions
104

104

00:04:40,710  -->  00:04:42,900
have been added and as usual you can
105

105

00:04:42,900  -->  00:04:44,460
just go ahead and use the Java classes
106

106

00:04:44,460  -->  00:04:46,800
directly so now we're going to take a
107

107

00:04:46,800  -->  00:04:49,350
look at try with resources so as you
108

108

00:04:49,350  -->  00:04:51,330
know the usual way to ensure that a
109

109

00:04:51,330  -->  00:04:53,370
resource which could be a file or some
110

110

00:04:53,370  -->  00:04:55,800
other type of resource is released when
111

111

00:04:55,800  -->  00:04:57,450
you're finished with it is to use a
112

112

00:04:57,450  -->  00:05:00,330
trying a finally block or at least that
113

113

00:05:00,330  -->  00:05:02,460
was how you used to have to do it
114

114

00:05:02,460  -->  00:05:05,100
java introduced try with resources so we
115

115

00:05:05,100  -->  00:05:07,170
could avoid the situation where you have
116

116

00:05:07,170  -->  00:05:09,300
a dry and then a finally and in the
117

117

00:05:09,300  -->  00:05:11,670
finally you have to then check whether a
118

118

00:05:11,670  -->  00:05:14,070
resource instance is null and then you
119

119

00:05:14,070  -->  00:05:15,630
close it as possible you'll get an
120

120

00:05:15,630  -->  00:05:18,180
exception then you know the drill we've
121

121

00:05:18,180  -->  00:05:20,580
all kind of looked at that ugly code and
122

122

00:05:20,580  -->  00:05:22,200
thought there must be a better way
123

123

00:05:22,200  -->  00:05:24,600
so try with resources takes care of
124

124

00:05:24,600  -->  00:05:27,300
closing the resource for us regardless
125

125

00:05:27,300  -->  00:05:29,130
of whether an exception is thrown or not
126

126

00:05:29,130  -->  00:05:32,700
we don't have to explicitly do it now
127

127

00:05:32,700  -->  00:05:34,440
resources do have to implement the
128

128

00:05:34,440  -->  00:05:37,560
closable interface to work with try with
129

129

00:05:37,560  -->  00:05:40,560
resources so let's try to code a try
130

130

00:05:40,560  -->  00:05:43,440
with resources in Kotlin let's try to do
131

131

00:05:43,440  -->  00:05:47,250
that so I'm going to come down here I'm
132

132

00:05:47,250  -->  00:05:50,580
going to say try and you know try with
133

133

00:05:50,580  -->  00:05:53,490
resources you create the instance of the
134

134

00:05:53,490  -->  00:05:56,760
resource within the try here so I'll say
135

135

00:05:56,760  -->  00:05:58,950
let's have a file reader and I'll say
136

136

00:05:58,950  -->  00:06:04,320
file reader equals and you'll see that
137

137

00:06:04,320  -->  00:06:06,210
we're getting a compile error because
138

138

00:06:06,210  -->  00:06:08,640
the compiler doesn't have try with
139

139

00:06:08,640  -->  00:06:11,580
resources in the same way that Java does
140

140

00:06:11,580  -->  00:06:13,950
so it really doesn't understand what
141

141

00:06:13,950  -->  00:06:15,720
we're trying to do here now we've
142

142

00:06:15,720  -->  00:06:18,620
already seen the equivalent in Kotlin of
143

143

00:06:18,620  -->  00:06:21,870
try with resources and we saw that when
144

144

00:06:21,870  -->  00:06:25,260
we saw the use function in when we were
145

145

00:06:25,260  -->  00:06:27,660
reading our text file remember that if a
146

146

00:06:27,660  -->  00:06:30,330
function has used in its name then it
147

147

00:06:30,330  -->  00:06:32,610
closes the resource for us and that's
148

148

00:06:32,610  -->  00:06:35,280
the equivalent of try with resources in
149

149

00:06:35,280  -->  00:06:37,890
Kotlin so there's use lines which
150

150

00:06:37,890  -->  00:06:39,750
handles each line in the file but we've
151

151

00:06:39,750  -->  00:06:42,240
also seen the general use so the
152

152

00:06:42,240  -->  00:06:45,660
resource that you use to invoke a use
153

153

00:06:45,660  -->  00:06:47,790
function will be closed when the lambda
154

154

00:06:47,790  -->  00:06:50,520
finishes executing or if an exception
155

155

00:06:50,520  -->  00:06:53,310
occurs while the lambda is executing so
156

156

00:06:53,310  -->  00:06:55,140
instead of using try with resources
157

157

00:06:55,140  -->  00:06:57,120
writing it out the way you would in in
158

158

00:06:57,120  -->  00:07:00,240
Java you use one of the use functions
159

159

00:07:00,240  -->  00:07:01,830
when you want to ensure that a resource
160

160

00:07:01,830  -->  00:07:03,900
will be closed regardless of what
161

161

00:07:03,900  -->  00:07:06,270
happens during execution and that's all
162

162

00:07:06,270  -->  00:07:07,860
I wanted to say about this I just wanted
163

163

00:07:07,860  -->  00:07:10,020
to make you aware that there is no try
164

164

00:07:10,020  -->  00:07:12,150
with resources in the way that you would
165

165

00:07:12,150  -->  00:07:14,730
write it in Java but it does exist in
166

166

00:07:14,730  -->  00:07:17,550
Kotlin it's just that you code it using
167

167

00:07:17,550  -->  00:07:20,730
one of the use functions okay so in the
168

168

00:07:20,730  -->  00:07:22,520
next video we're going to take a look at
169

169

00:07:22,520  -->  00:07:25,470
walking the file tree we saw when we
170

170

00:07:25,470  -->  00:07:27,360
looked at the Kotlin that i/o package
171

171

00:07:27,360  -->  00:07:29,370
that it has added a couple of classes
172

172

00:07:29,370  -->  00:07:31,650
for that so let's take a look at how to
173

173

00:07:31,650  -->  00:07:35,360
walk a file tree in Kotlin
