1
00:00:05,400 --> 00:00:10,600
All right in this video we're going to take a look at what's known as varians.

2
00:00:10,610 --> 00:00:15,690
But under that umbrella you have covariance and contravariant.

3
00:00:15,920 --> 00:00:19,400
And we're going to start by looking at covariance.

4
00:00:19,490 --> 00:00:26,760
We've seen how we can accept a list of tea and set an upper bound so that t can be limited to a type.

5
00:00:26,900 --> 00:00:30,220
We saw that when we had our convert to in function.

6
00:00:30,260 --> 00:00:37,190
So I've created a new project now and we're going to type in our convert to function again.

7
00:00:37,190 --> 00:00:42,850
So we'll say fun convert to in.

8
00:00:43,040 --> 00:00:47,900
And we take a collection that's a list of number.

9
00:00:48,230 --> 00:00:54,680
So this time we're we're trying to do it differently rather than declaring a fun and passing a type

10
00:00:54,680 --> 00:00:59,930
parameter and setting an upper bound of number we're saying no we'll just take a list of number because

11
00:00:59,930 --> 00:01:10,770
we know number implements the two functions so we'll say for now I'm in collection print line number

12
00:01:10,900 --> 00:01:12,500
to it.

13
00:01:13,280 --> 00:01:18,920
So what we're saying here is rather than declaring a type parameter and specifying an upper bound of

14
00:01:18,920 --> 00:01:24,860
number which means that will take t can be any type that's number or that implements number we're saying

15
00:01:24,890 --> 00:01:30,200
well no let's take a list of number because if we have a list of number we know that all the instances

16
00:01:30,200 --> 00:01:33,080
in that list have the two end function.

17
00:01:33,080 --> 00:01:34,400
So that's great.

18
00:01:34,430 --> 00:01:35,820
So let's try this out.

19
00:01:35,840 --> 00:01:41,100
So we'll say Vau shorts short list rather.

20
00:01:41,100 --> 00:01:45,650
And we're going to make this a list of short and we have to explicitly say that because otherwise the

21
00:01:45,650 --> 00:01:48,030
compiler will think that our initial values are in.

22
00:01:48,050 --> 00:01:58,550
Some will say a list of 1 2 3 4 5 and then will say convert 2 inch short list.

23
00:01:58,670 --> 00:01:59,950
So that's wonderful.

24
00:01:59,960 --> 00:02:05,900
And if we take a look at short let's just take a look at the declaration will see that indeed short

25
00:02:06,020 --> 00:02:07,190
extend number.

26
00:02:07,280 --> 00:02:09,350
So that's cool.

27
00:02:09,350 --> 00:02:13,070
And we want a list of numbers so short is actually a list of numbers.

28
00:02:13,100 --> 00:02:14,420
If we go ahead and run this

29
00:02:18,060 --> 00:02:20,330
we'll see that we get our one two three four five.

30
00:02:20,350 --> 00:02:21,560
Everything's working great.

31
00:02:21,570 --> 00:02:23,960
It's working exactly how we expect.

32
00:02:24,270 --> 00:02:29,080
OK so let's now make one little change to this function.

33
00:02:29,130 --> 00:02:35,190
We're going to say you know what we don't want to list a number we want immutable list of number and

34
00:02:35,250 --> 00:02:37,950
now we're going to get a problem of course but we can change that.

35
00:02:37,950 --> 00:02:47,620
We can say mutable list you Turbo list and we can ask for a mutable list of.

36
00:02:47,750 --> 00:02:49,270
But we still have a problem.

37
00:02:49,270 --> 00:02:56,090
It's saying hey I've I've got a mutable list of short you need to pass a mutable list of number to this

38
00:02:56,090 --> 00:02:57,320
function.

39
00:02:57,320 --> 00:03:02,150
And at this point we're scratching our heads saying well wait a minute we do have an amiable list of

40
00:03:02,150 --> 00:03:04,460
number shorts are numbers too.

41
00:03:04,550 --> 00:03:09,030
And this worked with an immutable list so why isn't it working with the immutable list.

42
00:03:09,230 --> 00:03:12,650
Well let's get a little more precise with our terminology here.

43
00:03:12,650 --> 00:03:19,700
When we're discussing generics using type and subtype is more accurate than using class and subclass

44
00:03:19,850 --> 00:03:21,320
depending on the context.

45
00:03:21,320 --> 00:03:29,900
For example a list is a class list isn't a type it's a class but a list of string is a type.

46
00:03:29,990 --> 00:03:37,790
So is list of number list of int and a list of short and we say a list of int or list of short is a

47
00:03:37,790 --> 00:03:45,920
subtype of lists of number because a list of int isn't a subclass of a list of number we're not extending

48
00:03:45,920 --> 00:03:46,880
anything.

49
00:03:46,970 --> 00:03:53,810
It's more that we're saying a list of numbers should be able to accept a list of int Because list of

50
00:03:53,810 --> 00:03:56,650
int is a subtype of list of number.

51
00:03:56,810 --> 00:04:01,300
So it's important to understand the distinction between a subclass and a subtype.

52
00:04:01,310 --> 00:04:10,640
We know that in our case short is a subclass of number but is short a subtype of number.

53
00:04:10,640 --> 00:04:12,390
Now the same goes for supertype.

54
00:04:12,410 --> 00:04:17,360
So in this case a list of number would is a supertype of list of short.

55
00:04:17,360 --> 00:04:18,490
That's how we'd say it.

56
00:04:18,500 --> 00:04:26,030
Now one wrinkle here is nullable versus non nullable types a nullable type is a wider type than the

57
00:04:26,030 --> 00:04:27,050
non-knowledge of type.

58
00:04:27,050 --> 00:04:33,800
Meaning that if you have a knowable type you can store non nullable types into it but you can't of course

59
00:04:33,800 --> 00:04:35,320
you can't do it the other way around.

60
00:04:35,390 --> 00:04:40,510
If you have a non nullable variable you can't store a nullable type into it.

61
00:04:40,670 --> 00:04:43,580
So why have I just said all of this gobbledygook.

62
00:04:43,580 --> 00:04:46,920
This brings us to what's called covariance.

63
00:04:46,940 --> 00:04:52,620
What we want to do here is we want to treat a list of short like a list of number.

64
00:04:52,940 --> 00:04:56,940
And we were able to do that when we were using an immutable list.

65
00:04:57,200 --> 00:05:04,130
So what we're saying is we want list of short to be a subtype of list of number and if we want this

66
00:05:04,130 --> 00:05:11,720
subtyping to be preserved when working with generics we have to declare the type parameter to be covariant.

67
00:05:11,720 --> 00:05:18,370
Now remember when we looked at collections we looked at the collections interface and immutable collections.

68
00:05:18,380 --> 00:05:25,550
And I said that the collections interface was covariant and the mutable collections interface was not

69
00:05:25,580 --> 00:05:27,030
covariant.

70
00:05:27,230 --> 00:05:34,310
And I've just said that if we want list of short to be treated like a list of number then the list of

71
00:05:34,310 --> 00:05:37,000
short has to be a subtype of list of number.

72
00:05:37,160 --> 00:05:43,500
And if we want the subtyping to be preserved we have to declare the parameter is covariant.

73
00:05:43,700 --> 00:05:50,810
So if we're saying that an immutable collection is covariant but a mutable collection is not.

74
00:05:50,810 --> 00:05:57,350
Now maybe we're getting a hint as to why this worked with an immutable list but not with a mutable list

75
00:05:57,710 --> 00:06:03,480
the immutable list is what's called covariant and immutable list is not what's called covariant.

76
00:06:03,480 --> 00:06:08,330
So when we're dealing with something that's covariant subtyping is preserved.

77
00:06:08,660 --> 00:06:14,550
So when something is covariant a list of short is a subtype of A list of number.

78
00:06:14,810 --> 00:06:18,780
But when something is not covariant that's not true.

79
00:06:18,780 --> 00:06:26,390
So we could do this with an immutable list because it's covariant and so the subtyping is preserved.

80
00:06:26,390 --> 00:06:30,770
But when we're dealing with a mutable list subtyping is not preserved.

81
00:06:30,770 --> 00:06:35,930
So in this case we cannot treat a list of short like a list of number.

82
00:06:35,930 --> 00:06:41,510
Now don't worry we're going to look at an example here if that all sounds crazy so let's say we have

83
00:06:41,510 --> 00:06:43,130
a class called Flower.

84
00:06:43,130 --> 00:06:47,680
I'm going to comment this out because I'm going to want to be able to compile whenever we do now.

85
00:06:47,670 --> 00:06:52,630
So let's say Open Class flour because we're going to want to subtype it.

86
00:06:53,240 --> 00:06:54,340
So that's great.

87
00:06:54,350 --> 00:07:02,390
And now let's declare a class called garden and a garden can contain flowers so will say class Garden

88
00:07:02,510 --> 00:07:08,630
and we're going to give it a tight parameter here and we're actually going to say that we want this

89
00:07:08,630 --> 00:07:11,360
to be some type of flower.

90
00:07:11,930 --> 00:07:12,740
So that's great.

91
00:07:12,740 --> 00:07:16,940
So here we're saying you can have a garden of roses you can have a garden of daffodils you can have

92
00:07:16,940 --> 00:07:23,710
a garden of daisies So all of our version of garden you always have some type of flower.

93
00:07:23,810 --> 00:07:27,530
OK so now let's write a function that Waters the garden.

94
00:07:27,680 --> 00:07:32,510
Maybe it calculates the optimal amount of water that you have to use so we're going to make that a top

95
00:07:32,510 --> 00:07:34,000
level function.

96
00:07:34,340 --> 00:07:41,360
So we're going to say I'll do it here right up to class fun water garden.

97
00:07:43,420 --> 00:07:49,080
Garden and it once a garden a flower and it does something.

98
00:07:49,390 --> 00:07:53,130
And now we're going to declare a subclass of flower called Rose.

99
00:07:53,140 --> 00:08:01,920
So we'll say class rose Stenz flower and we need to call the defer to the flower class here.

100
00:08:02,230 --> 00:08:08,230
And finally let's declare a function that will tend to our Rose Garden including watering it so we'll

101
00:08:08,230 --> 00:08:17,230
put this up here so we'll say fun 10 garden and we'll say we want a rose garden and that's going to

102
00:08:17,230 --> 00:08:26,760
be a garden Navarro's screwed up my parentheses here so I'll just take that out and we'll say water

103
00:08:26,770 --> 00:08:32,260
garden rose garden and we get an error.

104
00:08:32,350 --> 00:08:36,430
We get a similar error to what we got with shorts and numbers.

105
00:08:36,430 --> 00:08:42,790
It's good to say that water garden wants a garden of flowers and we're passing it a garden of roses

106
00:08:43,450 --> 00:08:46,780
and we know that Rose is a subclass of flower.

107
00:08:46,780 --> 00:08:52,360
Now this is happening because the garden class is what's called invariant.

108
00:08:52,440 --> 00:08:54,420
We come down to our garden class here.

109
00:08:54,420 --> 00:08:57,050
This class is invariant.

110
00:08:57,160 --> 00:09:03,250
Therefore when we ask for a garden of flower we can only provide a garden a flower.

111
00:09:03,340 --> 00:09:07,340
So for asking for a garden of flower here because this is invariant.

112
00:09:07,360 --> 00:09:10,660
This will only accept a garden of flower.

113
00:09:10,840 --> 00:09:15,910
It will not accept the garden of rose it will not except the garden of daffodil it will not accept a

114
00:09:15,910 --> 00:09:17,390
garden of Daisy.

115
00:09:17,560 --> 00:09:24,340
It wants a garden of flower it is invariant it's stubborn it only wants that period.

116
00:09:24,340 --> 00:09:28,230
So subclasses of flower will not be accepted.

117
00:09:28,390 --> 00:09:33,730
In other words subtyping is not preserved it's invariant.

118
00:09:33,730 --> 00:09:36,770
Now we want garden to be a little more relaxed.

119
00:09:36,910 --> 00:09:43,060
We want it to accept a type of flower and also all of the subtypes.

120
00:09:43,060 --> 00:09:50,110
So we wanted to be able to to use the water garden function with gardens of roses and gardens of daffodils

121
00:09:50,110 --> 00:09:50,520
etc..

122
00:09:50,530 --> 00:09:54,880
We don't want to have to write a version of water garden for every single flower that we can have in

123
00:09:54,880 --> 00:09:55,750
a garden.

124
00:09:55,840 --> 00:10:00,430
So if we want that to happen garden can no longer be invariant.

125
00:10:00,430 --> 00:10:07,480
We have to make it covariant and we do that by adding the out key word.

126
00:10:07,890 --> 00:10:15,340
So I'm going to put out there and boom this is now covariant and we saw this when we looked at collections

127
00:10:15,370 --> 00:10:20,990
we saw that the immutable collection had out but the mutable did not.

128
00:10:21,130 --> 00:10:26,290
However this comes with a bit of a price now that the class is covariant.

129
00:10:26,290 --> 00:10:32,860
We're restricted with what we can do with it and doesn't sound like immutable collections as well you're

130
00:10:32,860 --> 00:10:36,280
restricted with what you can do with an immutable collection.

131
00:10:36,370 --> 00:10:39,690
You can read them but you can't add anything to them.

132
00:10:39,760 --> 00:10:44,720
And we now have the same situation with our garden class.

133
00:10:44,860 --> 00:10:53,800
You can only use a covariate class in what is called the out position and that's why to make something

134
00:10:53,800 --> 00:10:54,390
covariant.

135
00:10:54,390 --> 00:10:56,650
You use the out key word but what does that mean.

136
00:10:56,650 --> 00:11:00,120
What does it mean when we say well now that garden is covariant.

137
00:11:00,130 --> 00:11:02,530
We can only use it in out positions.

138
00:11:02,740 --> 00:11:10,540
Well Katlin has the notion of in and out positions function parameters are considered to be an in position

139
00:11:11,020 --> 00:11:18,190
the function return type is an out position so let's declare a couple of functions in our garden class.

140
00:11:18,190 --> 00:11:22,690
Now that it's covariant will declare a function for picking a flower.

141
00:11:22,690 --> 00:11:29,800
Now I know we haven't really implemented this class but will demonstrate the concepts here so we'll

142
00:11:29,800 --> 00:11:34,300
have a function for picking a flower and we also want a function for planting a flower.

143
00:11:34,300 --> 00:11:39,580
So let's pretend here in our garden class actually we don't need all that room here.

144
00:11:39,660 --> 00:11:44,740
We'll say that we have a list of flowers.

145
00:11:46,350 --> 00:11:50,550
Now I'm not initializing it here this we're not going to fully implement this class.

146
00:11:50,560 --> 00:11:54,280
We just want to demonstrate the concepts so each garden has a list of the flowers.

147
00:11:54,340 --> 00:11:56,690
And of course those flowers will be of type T.

148
00:11:56,800 --> 00:12:02,290
So if you created a rose garden they're going to be roses daffodils daffodils etc. and then we want

149
00:12:02,290 --> 00:12:08,660
a function called pick flower and we're going to give an inch because we're going to say like of course

150
00:12:08,660 --> 00:12:13,710
this doesn't make sense for flowers but pick me the fifth flower and we'll return the fifth flower and

151
00:12:13,760 --> 00:12:20,660
list so we'll return tea and we're going to return flowers.

152
00:12:21,580 --> 00:12:27,940
So if somebody calls us and says pick flower and I was 20 then we're going to return the 20th flower

153
00:12:28,060 --> 00:12:32,560
or rather the flower position 20 in our garden.

154
00:12:32,710 --> 00:12:34,300
OK that's all great.

155
00:12:34,600 --> 00:12:40,380
And I'm actually being deliberately verbose with the code because I want you to see where the Tea is.

156
00:12:40,450 --> 00:12:46,720
I could go like this that would work because the compiler can infer it but I'm being deliberately verbose.

157
00:12:47,080 --> 00:12:49,360
So now let's add the function that plants a flower.

158
00:12:49,360 --> 00:12:53,830
We said we want one function that can pick a flower in one function that can plant flowers will say

159
00:12:53,830 --> 00:12:59,400
plant flower and will take the flower and of course that's got to be of type T.

160
00:12:59,680 --> 00:13:08,820
And we get an error it says type parameter T is declared as out which it is but occurs in the in position.

161
00:13:08,830 --> 00:13:16,570
Now remember that I said Cartland has the notion of in and out positions and the in position our function

162
00:13:16,570 --> 00:13:20,830
parameters and the outer position is the return type of a function.

163
00:13:20,830 --> 00:13:24,950
Now we've made garden covariant which means we've declared it as out.

164
00:13:24,970 --> 00:13:32,760
And this means that we can only use T in the out position so we can use it as the return type of a function.

165
00:13:32,770 --> 00:13:36,230
But we can no longer use it as the parameter type.

166
00:13:36,280 --> 00:13:42,160
And that's why the compiler is complaining we're trying to use something that's out in an in position

167
00:13:42,730 --> 00:13:45,460
so we can pick flowers but we can't plant them.

168
00:13:45,460 --> 00:13:48,440
Now why is this restriction exist.

169
00:13:48,700 --> 00:13:54,970
Well because if we could plant flowers there would be nothing to stop the plant flower function from

170
00:13:54,970 --> 00:13:59,460
being called with a daisy when we have a Rose Garden.

171
00:13:59,590 --> 00:14:05,160
Think about it because a daisy is also a flower a Daffodil's a flower etc..

172
00:14:05,170 --> 00:14:11,470
So if we say yeah you can plant a flower and we're going to take Titely Well since subtyping is preserved

173
00:14:11,470 --> 00:14:16,240
that means that this function would accept a daisy daffodil a rose.

174
00:14:16,240 --> 00:14:21,550
And so you can see how we could get into trouble because all of a sudden we're going to run into the

175
00:14:21,550 --> 00:14:29,010
situation where we're getting a list of mixed types even though we have a Rose Garden.

176
00:14:29,050 --> 00:14:36,190
So once we've said that we want garden rose to be a subtype of garden flower the compiler is not going

177
00:14:36,190 --> 00:14:41,300
to let us add anything to it now because it'll open up this problem of all.

178
00:14:41,440 --> 00:14:47,350
But now any type of flower will match this because subtyping is preserved and that's going to open up

179
00:14:47,440 --> 00:14:52,900
the possibility that we'll be able to add something that isn't a rose to a Rose Garden and obviously

180
00:14:52,900 --> 00:14:53,980
that would be bad.

181
00:14:54,100 --> 00:15:02,200
So when a class is covariant meaning that we've used the out key word subtyping is preserved and the

182
00:15:02,200 --> 00:15:06,130
class can only be used in the out position.

183
00:15:06,160 --> 00:15:11,910
But you'll notice now that if we go up to our 10 to garden we don't have the air anymore.

184
00:15:12,130 --> 00:15:20,140
So our water garden here will now accept a rose garden because subtyping is preserved so it now sees

185
00:15:20,140 --> 00:15:23,440
a garden rose as a garden a flower.

186
00:15:23,440 --> 00:15:27,970
Now you may say hey wait a minute this is being used in the in position but when we're talking about

187
00:15:28,000 --> 00:15:30,770
in and out positions we're talking about member functions.

188
00:15:30,850 --> 00:15:37,930
This is safe because we can't do anything to the garden inside the water garden function that's going

189
00:15:37,930 --> 00:15:44,800
to change the collection because the fact there's not going to be any functions in garden that let us

190
00:15:44,800 --> 00:15:46,570
do that.

191
00:15:46,570 --> 00:15:55,050
So it's OK to call a nonmember function and pass a covariant type as a parameter.

192
00:15:55,120 --> 00:16:01,170
So now that we know what covariance is let's go back to our convert to inte example.

193
00:16:01,780 --> 00:16:07,120
So remember that we were getting an error when we used a mutable list and we tried to pass a mutable

194
00:16:07,120 --> 00:16:10,320
list of short to a mutable list of number.

195
00:16:10,450 --> 00:16:13,630
But we don't get the same error when we do it with a list.

196
00:16:13,630 --> 00:16:16,770
So let's take a look at the list and mutable list classes.

197
00:16:16,780 --> 00:16:26,050
I'm going to go to go to the declaration here and you'll see that there is no out keyword anywhere here

198
00:16:26,050 --> 00:16:28,510
so mutable list is invariant.

199
00:16:28,510 --> 00:16:30,700
It wants the exact type.

200
00:16:30,700 --> 00:16:35,920
So here you've said that you want a readable list of number then that's got to be a mutable list of

201
00:16:35,920 --> 00:16:39,860
number mutable list of short double float.

202
00:16:39,880 --> 00:16:44,200
Int whatever is not acceptable it once immutable list of number.

203
00:16:44,290 --> 00:16:55,690
But if we scroll up to the list class we'll see that list has the out keyword here it is covariant and

204
00:16:55,690 --> 00:17:00,130
so it is saying that you know what I want the subtyping to be preserved.

205
00:17:00,400 --> 00:17:03,100
If you say that you want a list of number.

206
00:17:03,250 --> 00:17:06,390
I'm OK with taking a list of short list of int or whatever.

207
00:17:06,400 --> 00:17:15,010
But of course this class is for immutable lists so there is nothing in here that can change the list

208
00:17:15,040 --> 00:17:20,650
just like there's nothing in the garden class that can change the garden.

209
00:17:20,650 --> 00:17:27,550
Now if you scroll down here you'll actually see that there are some functions in here that are taking

210
00:17:27,640 --> 00:17:35,890
E which is a generic type as a parameter but whenever that happens you'll notice that this unsafe variants

211
00:17:36,310 --> 00:17:37,710
annotation is being used.

212
00:17:37,720 --> 00:17:44,550
And that's telling the compiler that hey I'm taking this variable but this function doesn't change the

213
00:17:44,550 --> 00:17:47,090
list so it's safe to do so in this case.

214
00:17:47,090 --> 00:17:53,480
And what this annotation does is it suppresses the compiler errors associated with this.

215
00:17:53,490 --> 00:17:59,370
So if you're absolutely sure it's kind of like with the not null assertion case you can shoot yourself

216
00:17:59,370 --> 00:18:00,230
in the foot with this.

217
00:18:00,240 --> 00:18:06,990
But if you are absolutely sure that you have a function inside a covariant class and that function does

218
00:18:06,990 --> 00:18:11,640
not change the class in any way an instance of the class.

219
00:18:11,640 --> 00:18:16,470
So for example the contains function just checks to see if something is in the list.

220
00:18:16,470 --> 00:18:18,060
It's not going to change the list.

221
00:18:18,060 --> 00:18:20,310
It's not going to add an element to the list.

222
00:18:20,310 --> 00:18:26,490
It's not going to remove an element from the list it's not going to change an instance in the list by

223
00:18:26,490 --> 00:18:33,210
setting an instance into a specific index all it's going to do is check to see whether the list contains

224
00:18:33,210 --> 00:18:33,620
something.

225
00:18:33,620 --> 00:18:38,820
So in other words all is going to do is read the list is it's not going to write the list.

226
00:18:38,970 --> 00:18:44,910
If you know for a fact that that happens and you can use this annotation and you can pass a covariant

227
00:18:44,910 --> 00:18:47,000
instance to the function.

228
00:18:47,070 --> 00:18:52,160
And so that's why in a few cases you can see that we're using it in the in position.

229
00:18:52,170 --> 00:18:58,110
But you have to use this annotation and you can see that contains all only reads the collection index

230
00:18:58,110 --> 00:19:02,250
saw only reads that last index of only reads that.

231
00:19:02,620 --> 00:19:10,450
But there's nothing in here that changes the list whereas in mutable list you can see right away oh

232
00:19:10,500 --> 00:19:11,520
we're adding.

233
00:19:11,670 --> 00:19:13,990
We have the add function we have the remove function.

234
00:19:14,040 --> 00:19:21,480
These are in the in position and we don't need this annotation because mutable list is not covariant

235
00:19:21,480 --> 00:19:25,770
is invariant and therefore you can both read and write it.

236
00:19:26,940 --> 00:19:31,110
So you can only read covariant instances.

237
00:19:31,110 --> 00:19:37,710
That's essentially what it boils down to and Cartland ensures that that's happening by not letting you

238
00:19:37,710 --> 00:19:42,560
add functions to covariant classes that could potentially change the list.

239
00:19:42,570 --> 00:19:49,770
Because we're the one of the covariant classes because here if we have this pink flower maybe we're

240
00:19:49,770 --> 00:19:57,390
not changing the guard and inside dysfunction or plant flower rather maybe we're not changing the garden

241
00:19:57,390 --> 00:19:59,640
inside plant flower but maybe we are.

242
00:19:59,640 --> 00:20:06,600
And to be super cautious when you declare something is covariant you're just not allowed to use it like

243
00:20:06,600 --> 00:20:12,960
this at all because once you pass this in as a parameter it's possible that you're going to run into

244
00:20:12,960 --> 00:20:14,130
a bad situation.

245
00:20:14,130 --> 00:20:15,680
And let's illustrate that now.

246
00:20:15,690 --> 00:20:20,100
So let's pretend for a moment that mutable list is covariant.

247
00:20:20,200 --> 00:20:27,300
So let's go back to our convert to Ent. function and let's pretend it is covariant and let's instead

248
00:20:27,300 --> 00:20:31,480
of just printing out two in two let's add something to the collection now.

249
00:20:31,480 --> 00:20:39,130
So we'll see a collection dot add 25 because we can do anything right with this collection.

250
00:20:39,180 --> 00:20:41,430
It's been passed in so we can do anything with it.

251
00:20:41,430 --> 00:20:45,720
Now we don't see an error here but you can see the potential problem right away.

252
00:20:45,900 --> 00:20:51,870
If we could call this with a short list immutable list of short you're going ahead and adding an integer

253
00:20:52,440 --> 00:20:54,840
into that list because this is an integer.

254
00:20:54,840 --> 00:20:55,800
It's not a short.

255
00:20:55,830 --> 00:21:00,090
I mean it can fit into a short but that's not the way the compiler is going to type it.

256
00:21:00,120 --> 00:21:07,260
So right away you have a problem what if we had this if we had that youre passing in a short list and

257
00:21:07,260 --> 00:21:10,140
we go well lets add 20 5.3.

258
00:21:10,230 --> 00:21:15,360
Nigga you've got a really big problem youve got a double sitting inside something that's supposed to

259
00:21:15,360 --> 00:21:16,240
be a short.

260
00:21:16,320 --> 00:21:22,170
And so this is the type of problem that you could run into if that restriction did not exist for covariant

261
00:21:22,560 --> 00:21:23,800
classes.

262
00:21:23,820 --> 00:21:30,330
So now we understand as well why the list class cant have an add function because its covariant.

263
00:21:30,330 --> 00:21:37,480
It would open lists up to these types of shenanigans where you could declare a list of I don't know

264
00:21:37,500 --> 00:21:44,460
big decimal and then pass that list into something that accepts a list of any and you could go ahead

265
00:21:44,460 --> 00:21:49,710
and add strings and all sorts of things into that big decimal list because there would be nothing to

266
00:21:49,710 --> 00:21:51,020
stop you from doing that.

267
00:21:51,180 --> 00:21:53,400
Let's go back to list.

268
00:21:53,400 --> 00:22:04,000
So we'll see a list of short here list and we'll make this a list.

269
00:22:04,050 --> 00:22:12,000
And now you can pass in a list of short because this is covariance so it will take a list of T and all

270
00:22:12,000 --> 00:22:18,880
of its subclasses but of course now you can't do this because obviously this would be a big mistake.

271
00:22:19,200 --> 00:22:24,930
And so this is why covariant classes can only declare functions but the type in the out position meaning

272
00:22:24,930 --> 00:22:28,200
with the generic type as the return type of a function.

273
00:22:28,200 --> 00:22:33,900
But as we saw you can use an annotation to accept the type as a parameter as long as you're absolutely

274
00:22:33,900 --> 00:22:36,840
sure that it won't lead to a runtime exception.

275
00:22:36,840 --> 00:22:41,380
So in other words that it's not going to change the covariant instance.

276
00:22:41,380 --> 00:22:46,210
Now in the case of list all the functions that use the annotation don't change the list in any way so

277
00:22:46,210 --> 00:22:52,960
we know it's safe for them to accept a list of a subclass as a parameter.

278
00:22:52,960 --> 00:22:55,330
Now there are a couple of exceptions to note here.

279
00:22:55,330 --> 00:22:59,190
Constructor parameters don't have in n out positions.

280
00:22:59,290 --> 00:23:03,700
So you can always except a covariant class is a constructor parameter.

281
00:23:03,700 --> 00:23:07,710
And that's because constructors are called when an instance is created.

282
00:23:07,960 --> 00:23:14,320
So you know there's no danger of using a constructor to do something that's going to lead to this type

283
00:23:14,320 --> 00:23:18,810
of mismatch where you have a double value in a short list.

284
00:23:18,850 --> 00:23:25,480
But if you declare a VAR variable of type T then t can't be covariant.

285
00:23:25,500 --> 00:23:32,020
Because remember that Cartland is going to generate a setter and the setter will accept t as a parameter.

286
00:23:32,020 --> 00:23:37,000
And if you if t is covariant it can't be in the in position.

287
00:23:37,120 --> 00:23:45,400
So let's just briefly do this all comment this out let's go back to our garden and let's have it except

288
00:23:45,400 --> 00:23:47,810
a parameter var.

289
00:23:48,810 --> 00:23:50,000
I don't know something.

290
00:23:50,050 --> 00:23:53,730
I have no clue what this would accept and I will say that it's a tight t.

291
00:23:53,950 --> 00:23:59,680
This is a contrived example but let's say every garden has a something flower.

292
00:23:59,740 --> 00:24:01,210
I don't know what that would be.

293
00:24:01,480 --> 00:24:06,380
And you can change which flower that something is it some special type of flower.

294
00:24:06,430 --> 00:24:09,040
So we won avara because you can change it.

295
00:24:09,070 --> 00:24:15,390
And so we wanted to setter but now we have an error and it says type parameter T is declared is out

296
00:24:15,810 --> 00:24:24,010
but occurs in invariant position in type T and that's telling us that we can't have avara because t

297
00:24:24,010 --> 00:24:29,740
is in the out position t can now change something about our class.

298
00:24:29,740 --> 00:24:35,830
For example we could pass the rows Rosen here when we have a garden of Daffodil's we could pass a daisy

299
00:24:35,830 --> 00:24:42,030
in when we have a garden of rows because we've said that T Well except flower or any subclass of flour

300
00:24:42,040 --> 00:24:49,300
so once again to prevent a garden of rows ending up with daffodils in it which would be bad for for

301
00:24:49,300 --> 00:24:52,770
this anyway wouldn't be bad in real life but be bad here.

302
00:24:52,810 --> 00:24:59,910
The moment you declare a variable of a covariate classes are you going to get this error.

303
00:25:00,100 --> 00:25:08,470
So this is going to have to be vowel because when with vowel it's only going to generate a getter in

304
00:25:08,470 --> 00:25:13,230
other words it's only going to read t it's not going to write to t.

305
00:25:13,270 --> 00:25:20,920
In other words somebody from the outside can't write to t write to something once it's set and it's

306
00:25:20,920 --> 00:25:22,660
being set in the constructor.

307
00:25:22,810 --> 00:25:29,830
So as we've just said there's no danger of any of these mis mismatch type shenanigans happening when

308
00:25:29,830 --> 00:25:31,360
you're running the constructor.

309
00:25:31,360 --> 00:25:37,150
Also if you have a function or a property that is not visible to the outside world then you don't have

310
00:25:37,150 --> 00:25:39,230
to worry about in and out positions.

311
00:25:39,250 --> 00:25:44,470
So private functions don't have in and out positions you can do whatever you want with them.

312
00:25:44,620 --> 00:25:50,620
And when you think about it that makes sense because if the only functions that can call your function

313
00:25:50,620 --> 00:25:58,060
are inside the class then again you're not going to be in trouble of a daffodil or a daisy sneaking

314
00:25:58,060 --> 00:25:59,760
into a rose garden.

315
00:25:59,770 --> 00:26:07,110
So if we went private var you'll see that we no longer get the error.

316
00:26:07,120 --> 00:26:14,560
Even though this is var and that's because nobody outside the class can touch this property.

317
00:26:14,560 --> 00:26:21,790
And so the only thing this propertys ever going to be is a rose for a Rose Garden a daffodil for a daffodil

318
00:26:21,790 --> 00:26:30,430
garden etc. the in and out rules are there to protect against the outside world doing something that

319
00:26:30,430 --> 00:26:31,560
it shouldn't be doing.

320
00:26:31,570 --> 00:26:39,090
So it's to prevent something from outside trying to add the wrong type of flower into a garden.

321
00:26:39,280 --> 00:26:46,300
OK so that's covariance you use covariance when you want these subtyping to be preserved so you can

322
00:26:46,300 --> 00:26:49,930
pass an instance of the type or the subtype.

323
00:26:50,470 --> 00:27:00,780
So here we can pass an instance of Rose Garden to garden flower and appear when we were using lists

324
00:27:01,080 --> 00:27:06,430
which are covariant we could pass we can pass a list of short for a list of number.

325
00:27:06,880 --> 00:27:15,630
But when you declare something is covariant you do lose the ability to write to an instance to change

326
00:27:15,630 --> 00:27:23,160
an instance and to guarantee that you can't write to it you're not allowed to then in member functions

327
00:27:23,160 --> 00:27:26,850
you're not allowed to accept a parameter of type T.

328
00:27:26,970 --> 00:27:33,540
So that's set for covariance in the next video we're going to take a look at what's called contravariant.

329
00:27:33,690 --> 00:27:34,680
I'll see you there.
