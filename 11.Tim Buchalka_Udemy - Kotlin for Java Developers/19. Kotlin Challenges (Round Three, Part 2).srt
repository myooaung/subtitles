1
1

00:00:04,710  -->  00:00:10,530
okay so we've got three Kotlin classes
2

2

00:00:08,010  -->  00:00:13,260
now Kotlin bicycle Kotlin mountain bike
3

3

00:00:10,530  -->  00:00:15,959
in Kotlin road bike so let's start using
4

4

00:00:13,260  -->  00:00:18,420
these classes so the first thing I want
5

5

00:00:15,959  -->  00:00:21,270
you to do is to add a main function to
6

6

00:00:18,420  -->  00:00:23,820
the Kotlin file and then create an
7

7

00:00:21,270  -->  00:00:26,369
instance of all three types of bikes and
8

8

00:00:23,820  -->  00:00:28,800
then call the print description function
9

9

00:00:26,369  -->  00:00:30,720
for all three types of bikes now when
10

10

00:00:28,800  -->  00:00:32,579
you're creating the instances it doesn't
11

11

00:00:30,720  -->  00:00:34,770
matter what values you use for the
12

12

00:00:32,579  -->  00:00:36,960
properties that probably means we'll
13

13

00:00:34,770  -->  00:00:39,870
create some impossible types of bikes
14

14

00:00:36,960  -->  00:00:42,930
but that's okay so create an instance of
15

15

00:00:39,870  -->  00:00:45,720
Calton bicycle an instance of calling
16

16

00:00:42,930  -->  00:00:47,579
mountain bike and an instance of Kotlin
17

17

00:00:45,720  -->  00:00:50,370
road bike and then call the print
18

18

00:00:47,579  -->  00:00:53,630
description function for all three pause
19

19

00:00:50,370  -->  00:00:56,329
the video and give that a try
20

20

00:00:53,630  -->  00:00:59,030
okay welcome back so I'm going to add a
21

21

00:00:56,329  -->  00:01:00,710
main function and by now you should be
22

22

00:00:59,030  -->  00:01:04,790
familiar with just typing in main and
23

23

00:01:00,710  -->  00:01:08,450
hitting Enter and IntelliJ will add the
24

24

00:01:04,790  -->  00:01:11,050
function for us so let's create an
25

25

00:01:08,450  -->  00:01:14,060
instance of the bicycle so we'll say Val
26

26

00:01:11,050  -->  00:01:16,550
bicycle equals and then here and make
27

27

00:01:14,060  -->  00:01:19,190
sure you say Kotlin bicycle because if
28

28

00:01:16,550  -->  00:01:21,200
you just say bicycle you'll be creating
29

29

00:01:19,190  -->  00:01:23,390
an instance of the Java class and that
30

30

00:01:21,200  -->  00:01:24,860
would work nothing would warn you
31

31

00:01:23,390  -->  00:01:27,020
there'd be nothing wrong with doing that
32

32

00:01:24,860  -->  00:01:28,520
but we want to create an instance of our
33

33

00:01:27,020  -->  00:01:31,100
Kotlin class so we're going to use
34

34

00:01:28,520  -->  00:01:35,420
common bicycle and then I'm just going
35

35

00:01:31,100  -->  00:01:39,890
to pass 10 for the cadence 3 for the
36

36

00:01:35,420  -->  00:01:42,860
speed and 10 for the gear I have no idea
37

37

00:01:39,890  -->  00:01:47,990
if that makes sense and now I'm going to
38

38

00:01:42,860  -->  00:01:50,509
call the print description so that's one
39

39

00:01:47,990  -->  00:01:55,280
of our instances created so now I'll say
40

40

00:01:50,509  -->  00:01:58,790
valve mountain bike equals and I'm going
41

41

00:01:55,280  -->  00:02:01,939
to say Kotlin mountain bike and for this
42

42

00:01:58,790  -->  00:02:03,619
I'm going to pass twenty ten ten and
43

43

00:02:01,939  -->  00:02:04,670
thirty and once again I'm not sure if
44

44

00:02:03,619  -->  00:02:07,100
that's impossible
45

45

00:02:04,670  -->  00:02:09,590
or maybe a bike with a really really
46

46

00:02:07,100  -->  00:02:13,519
high seat and then I'm going to say
47

47

00:02:09,590  -->  00:02:15,530
mountain bike dot print description so
48

48

00:02:13,519  -->  00:02:18,620
that's our second instance done and
49

49

00:02:15,530  -->  00:02:22,100
finally we have Val road bike equals
50

50

00:02:18,620  -->  00:02:26,780
Kotlin road bike and for this one I'll
51

51

00:02:22,100  -->  00:02:31,250
pass ten ten ten and three and then I'll
52

52

00:02:26,780  -->  00:02:33,860
call road bike dot print description so
53

53

00:02:31,250  -->  00:02:36,230
that's it that's our creating our three
54

54

00:02:33,860  -->  00:02:38,200
instances and calling print description
55

55

00:02:36,230  -->  00:02:41,620
for each one so at this point let's run
56

56

00:02:38,200  -->  00:02:41,620
see what we get
57

57

00:02:43,090  -->  00:02:48,220
and we'll see that we get the bike is in
58

58

00:02:46,000  -->  00:02:51,160
gear 10 with a cadence of 10 traveling
59

59

00:02:48,220  -->  00:02:53,410
at a speed of 3 that's for this bicycle
60

60

00:02:51,160  -->  00:02:55,810
now the other 2 bikes will be printing
61

61

00:02:53,410  -->  00:02:58,920
out 2 lines each because remember in
62

62

00:02:55,810  -->  00:03:02,200
their print description functions were
63

63

00:02:58,920  -->  00:03:04,870
delegating up to the bicycle they call
64

64

00:03:02,200  -->  00:03:09,310
in bicycle class to print out the values
65

65

00:03:04,870  -->  00:03:11,319
for the properties it declares so these
66

66

00:03:09,310  -->  00:03:13,540
two lines are going to come from the
67

67

00:03:11,319  -->  00:03:16,720
mountain bike print description function
68

68

00:03:13,540  -->  00:03:19,600
and it'll say the bike is in gear 30
69

69

00:03:16,720  -->  00:03:21,730
with a cadence of 10 traveling at a
70

70

00:03:19,600  -->  00:03:23,350
speed of 10 and then let's go down to
71

71

00:03:21,730  -->  00:03:25,269
the function and then this line will get
72

72

00:03:23,350  -->  00:03:27,340
printed so the mountain bike has a seat
73

73

00:03:25,269  -->  00:03:29,980
height of 20 inches yes that's quite a
74

74

00:03:27,340  -->  00:03:32,260
high seat and then the same thing will
75

75

00:03:29,980  -->  00:03:35,410
happen for the road bike so we'll get
76

76

00:03:32,260  -->  00:03:37,120
the print from the superclasses print
77

77

00:03:35,410  -->  00:03:39,870
description and then we get the road
78

78

00:03:37,120  -->  00:03:42,640
bike has a tire width of 10 millimeters
79

79

00:03:39,870  -->  00:03:44,410
alright so that wasn't too bad that
80

80

00:03:42,640  -->  00:03:46,750
should have been pretty easy I would
81

81

00:03:44,410  -->  00:03:48,930
think okay so the next thing I want you
82

82

00:03:46,750  -->  00:03:52,239
to do is I want you to make the gear
83

83

00:03:48,930  -->  00:03:55,360
parameter optional in the Kotlin bicycle
84

84

00:03:52,239  -->  00:03:57,459
constructor and when the gear isn't
85

85

00:03:55,360  -->  00:04:00,790
specified it should be assigned a
86

86

00:03:57,459  -->  00:04:03,190
default value of 10 so make the year
87

87

00:04:00,790  -->  00:04:06,340
parameter optional assign it a default
88

88

00:04:03,190  -->  00:04:08,260
value of 10 and once you've done that up
89

89

00:04:06,340  -->  00:04:10,570
in the main function I want you to
90

90

00:04:08,260  -->  00:04:13,299
create another three instances one for
91

91

00:04:10,570  -->  00:04:15,970
each type of bike but this time don't
92

92

00:04:13,299  -->  00:04:17,289
pass the gear value and then once you've
93

93

00:04:15,970  -->  00:04:19,660
done that do the same thing you're doing
94

94

00:04:17,289  -->  00:04:22,419
for these three instances and print the
95

95

00:04:19,660  -->  00:04:24,250
descriptions so make the gear parameter
96

96

00:04:22,419  -->  00:04:26,740
optional in the cotton bicycle
97

97

00:04:24,250  -->  00:04:29,410
constructor it should have a default
98

98

00:04:26,740  -->  00:04:32,710
value of 10 if the gear isn't passed and
99

99

00:04:29,410  -->  00:04:35,350
then create three new instances one for
100

100

00:04:32,710  -->  00:04:37,630
each bike don't pass the gear value and
101

101

00:04:35,350  -->  00:04:40,960
print the descriptions for each one so
102

102

00:04:37,630  -->  00:04:43,820
pause the video and give that a try
103

103

00:04:40,960  -->  00:04:45,440
okay I'm going to close down the console
104

104

00:04:43,820  -->  00:04:47,420
here to give us some more room
105

105

00:04:45,440  -->  00:04:49,040
so making the gear parameter optional
106

106

00:04:47,420  -->  00:04:51,110
it's just a matter of adding a default
107

107

00:04:49,040  -->  00:04:54,320
value for it and we want that to be 10
108

108

00:04:51,110  -->  00:04:58,610
so we just have to say equals 10 and now
109

109

00:04:54,320  -->  00:05:01,550
this parameter is optional but as you
110

110

00:04:58,610  -->  00:05:03,920
probably discovered when you assign a
111

111

00:05:01,550  -->  00:05:05,990
default value in the superclass and
112

112

00:05:03,920  -->  00:05:09,470
therefore you make the parameter
113

113

00:05:05,990  -->  00:05:13,010
optional that does not filter down to
114

114

00:05:09,470  -->  00:05:16,010
the subclasses so we can see that if we
115

115

00:05:13,010  -->  00:05:21,320
start creating our three instances so
116

116

00:05:16,010  -->  00:05:24,560
I'm going to copy these here paste them
117

117

00:05:21,320  -->  00:05:28,000
here and this will be bicycle - bicycle
118

118

00:05:24,560  -->  00:05:31,340
- and mountain bike - mountain bike -
119

119

00:05:28,000  -->  00:05:33,200
road bike - in road bike - and then we
120

120

00:05:31,340  -->  00:05:36,410
said that you don't want to pass the
121

121

00:05:33,200  -->  00:05:39,320
gear so I'll knock the gear off this one
122

122

00:05:36,410  -->  00:05:41,960
and we don't have a problem but if I
123

123

00:05:39,320  -->  00:05:46,160
come down here and take the gear off
124

124

00:05:41,960  -->  00:05:49,220
here we get a problem and we get no
125

125

00:05:46,160  -->  00:05:51,590
value passed for parameter gear so as
126

126

00:05:49,220  -->  00:05:54,560
you probably discovered making the
127

127

00:05:51,590  -->  00:05:56,870
parameter optional in a superclass does
128

128

00:05:54,560  -->  00:05:58,370
not make it optional in the subclasses
129

129

00:05:56,870  -->  00:06:00,830
and if you think about it that makes
130

130

00:05:58,370  -->  00:06:03,530
sense first of all you might want a
131

131

00:06:00,830  -->  00:06:05,810
different default value for these
132

132

00:06:03,530  -->  00:06:07,520
subclasses and second of all you might
133

133

00:06:05,810  -->  00:06:09,200
not even want it to be optional for the
134

134

00:06:07,520  -->  00:06:11,030
subclasses you might have a subclass
135

135

00:06:09,200  -->  00:06:13,010
where it wouldn't make sense for the
136

136

00:06:11,030  -->  00:06:15,140
parameter could be optional there might
137

137

00:06:13,010  -->  00:06:17,150
be a subclass that requires the value
138

138

00:06:15,140  -->  00:06:19,790
because there isn't a meaningful default
139

139

00:06:17,150  -->  00:06:21,350
so it's not possible to assign one even
140

140

00:06:19,790  -->  00:06:23,740
if it is possible to come up with a
141

141

00:06:21,350  -->  00:06:26,090
default it wouldn't be unusual for a
142

142

00:06:23,740  -->  00:06:28,460
subclass to want a different default
143

143

00:06:26,090  -->  00:06:30,320
than what the superclass has so just
144

144

00:06:28,460  -->  00:06:32,240
making the gear optional and kahlan
145

145

00:06:30,320  -->  00:06:33,650
bicycle would have passed the first part
146

146

00:06:32,240  -->  00:06:35,960
of the challenge because I didn't
147

147

00:06:33,650  -->  00:06:37,970
specify that you had to make it optional
148

148

00:06:35,960  -->  00:06:39,920
and Calton mountain bike and call and
149

149

00:06:37,970  -->  00:06:41,690
road bike but the second part of the
150

150

00:06:39,920  -->  00:06:43,730
challenge where I said to create three
151

151

00:06:41,690  -->  00:06:45,560
instances and not to pass the gear for
152

152

00:06:43,730  -->  00:06:47,270
them obviously implies that the gear
153

153

00:06:45,560  -->  00:06:48,950
parameter should also be optional in the
154

154

00:06:47,270  -->  00:06:52,910
subclasses what we have to do that
155

155

00:06:48,950  -->  00:06:54,409
explicitly so I said we wanted any
156

156

00:06:52,910  -->  00:06:55,759
default value of 10 so when
157

157

00:06:54,409  -->  00:06:57,979
this case we're going to use the same
158

158

00:06:55,759  -->  00:07:01,009
default value so we're going to have to
159

159

00:06:57,979  -->  00:07:04,969
add equals ten to Cottman mountain bike
160

160

00:07:01,009  -->  00:07:08,029
and equals ten to Kotlin road bike and
161

161

00:07:04,969  -->  00:07:12,619
now all of our code will compile and if
162

162

00:07:08,029  -->  00:07:16,759
we run we'll see now these are our new
163

163

00:07:12,619  -->  00:07:18,649
sets of bikes here I think actually just
164

164

00:07:16,759  -->  00:07:22,339
these five lines so we'll see that
165

165

00:07:18,649  -->  00:07:24,199
they're all in a gear of ten so except
166

166

00:07:22,339  -->  00:07:26,709
for this bike here I guess I didn't pull
167

167

00:07:24,199  -->  00:07:29,779
it off on the yeah I didn't pull it off
168

168

00:07:26,709  -->  00:07:31,759
so there we go and let's run again this
169

169

00:07:29,779  -->  00:07:33,889
time I'm going to actually comment these
170

170

00:07:31,759  -->  00:07:37,300
out so we're not we're just seeing the
171

171

00:07:33,889  -->  00:07:39,469
three instances we're interested in and
172

172

00:07:37,300  -->  00:07:41,989
now we'll see that they're all in gear
173

173

00:07:39,469  -->  00:07:43,759
ten now it looks like we're repeating
174

174

00:07:41,989  -->  00:07:46,969
ourselves here because we've got into
175

175

00:07:43,759  -->  00:07:48,469
equals ten in people's 10 and int equals
176

176

00:07:46,969  -->  00:07:51,889
10 up here but in a real world
177

177

00:07:48,469  -->  00:07:53,599
application as I said it's possible and
178

178

00:07:51,889  -->  00:07:55,550
maybe even likely that the subclasses
179

179

00:07:53,599  -->  00:07:58,099
would have different default values or
180

180

00:07:55,550  -->  00:07:59,929
not even want a default value that
181

181

00:07:58,099  -->  00:08:02,839
they'd want the parameter to be a
182

182

00:07:59,929  -->  00:08:05,629
requirement all right so your next
183

183

00:08:02,839  -->  00:08:08,240
challenge is to add a secondary
184

184

00:08:05,629  -->  00:08:10,909
constructor to the cotman mountain bike
185

185

00:08:08,240  -->  00:08:13,369
class that accepts a color parameter
186

186

00:08:10,909  -->  00:08:15,769
color will be a string and all that the
187

187

00:08:13,369  -->  00:08:18,169
secondary constructor does is prints the
188

188

00:08:15,769  -->  00:08:20,479
color out now this is sort of a silly
189

189

00:08:18,169  -->  00:08:22,819
contrived example and I'll tell you why
190

190

00:08:20,479  -->  00:08:25,309
first of all it's difficult to come up
191

191

00:08:22,819  -->  00:08:26,719
with a need for a secondary constructor
192

192

00:08:25,309  -->  00:08:29,149
in a simple application like this
193

193

00:08:26,719  -->  00:08:32,899
because default parameter values are
194

194

00:08:29,149  -->  00:08:34,819
usually sufficient but also when you do
195

195

00:08:32,899  -->  00:08:38,180
have a secondary constructor it's
196

196

00:08:34,819  -->  00:08:41,180
usually because you want to accept a
197

197

00:08:38,180  -->  00:08:43,669
value that you're going to use within a
198

198

00:08:41,180  -->  00:08:46,639
secondary constructor to perhaps
199

199

00:08:43,669  -->  00:08:49,220
influence what value gets assigned to
200

200

00:08:46,639  -->  00:08:51,439
one of the other properties so in this
201

201

00:08:49,220  -->  00:08:53,120
simple example again we really don't
202

202

00:08:51,439  -->  00:08:55,759
need a secondary constructor but I want
203

203

00:08:53,120  -->  00:08:56,990
you to do something within the body so
204

204

00:08:55,759  -->  00:08:59,300
I'm just going to have you print the
205

205

00:08:56,990  -->  00:09:00,949
color so once again I want you to add a
206

206

00:08:59,300  -->  00:09:02,860
secondary constructor to call tan
207

207

00:09:00,949  -->  00:09:05,660
mountain-bike that takes a color
208

208

00:09:02,860  -->  00:09:08,120
parameter color is a string and all it
209

209

00:09:05,660  -->  00:09:11,390
does inside the body is print out
210

210

00:09:08,120  -->  00:09:13,220
the color now it's possible maybe that
211

211

00:09:11,390  -->  00:09:15,110
the secondary constructor needs to take
212

212

00:09:13,220  -->  00:09:18,050
more than color I'll let you figure that
213

213

00:09:15,110  -->  00:09:20,290
out so pause the video and I'll see you
214

214

00:09:18,050  -->  00:09:20,290
in a minute
215

215

00:09:20,500  -->  00:09:25,450
okay welcome back let's do it I'm going
216

216

00:09:23,590  -->  00:09:26,920
to put it above the print description
217

217

00:09:25,450  -->  00:09:30,280
function so I'm going to say
218

218

00:09:26,920  -->  00:09:33,190
constructors and we want it to take the
219

219

00:09:30,280  -->  00:09:36,370
color now we have a decision to make
220

220

00:09:33,190  -->  00:09:39,070
here because as you probably discovered
221

221

00:09:36,370  -->  00:09:41,740
we can't just accept color because every
222

222

00:09:39,070  -->  00:09:44,020
constructor has to delegate back to the
223

223

00:09:41,740  -->  00:09:45,700
primary constructor we we also need to
224

224

00:09:44,020  -->  00:09:48,130
take the cadence to speed in the Year
225

225

00:09:45,700  -->  00:09:51,130
now strictly speaking we don't have to
226

226

00:09:48,130  -->  00:09:54,040
we could when we're delegating past
227

227

00:09:51,130  -->  00:09:56,800
constants but that probably wouldn't be
228

228

00:09:54,040  -->  00:09:59,050
what we want so I'm going to take the
229

229

00:09:56,800  -->  00:10:01,750
cadence the speed and the gear and the
230

230

00:09:59,050  -->  00:10:03,280
seat height of course and I also want
231

231

00:10:01,750  -->  00:10:06,490
color but the question is should I
232

232

00:10:03,280  -->  00:10:08,650
accept color first before all of the
233

233

00:10:06,490  -->  00:10:11,740
other arguments or should I accept at
234

234

00:10:08,650  -->  00:10:14,140
last now normally it wouldn't matter but
235

235

00:10:11,740  -->  00:10:16,480
we have a default value assigned for
236

236

00:10:14,140  -->  00:10:20,490
gear and so that influences things
237

237

00:10:16,480  -->  00:10:23,020
because if we put color last then the
238

238

00:10:20,490  -->  00:10:25,000
parameter what the default won't be the
239

239

00:10:23,020  -->  00:10:26,440
final parameter in the argument list now
240

240

00:10:25,000  -->  00:10:28,420
in Kotlin that doesn't really matter
241

241

00:10:26,440  -->  00:10:31,030
because as we learn when we're calling
242

242

00:10:28,420  -->  00:10:33,790
functions we can label the parameters
243

243

00:10:31,030  -->  00:10:36,010
but it would put the onus on the caller
244

244

00:10:33,790  -->  00:10:38,290
to have to do that and we probably
245

245

00:10:36,010  -->  00:10:40,990
wouldn't want to do that we'd want to
246

246

00:10:38,290  -->  00:10:42,880
design the class so that callers of the
247

247

00:10:40,990  -->  00:10:45,190
class don't have to label their
248

248

00:10:42,880  -->  00:10:48,400
parameters so let me add the color
249

249

00:10:45,190  -->  00:10:53,020
property last to show you what I mean so
250

250

00:10:48,400  -->  00:10:56,350
I'm going to accept a seat height which
251

251

00:10:53,020  -->  00:10:59,440
is an int the cadence which is an int
252

252

00:10:56,350  -->  00:11:02,530
and the IDE is helping me here the speed
253

253

00:10:59,440  -->  00:11:05,550
which is an INT the year which is an INT
254

254

00:11:02,530  -->  00:11:08,170
and finally our color which is a string
255

255

00:11:05,550  -->  00:11:10,720
and then I'm going to put a colon here
256

256

00:11:08,170  -->  00:11:12,910
because we have to defer back up to the
257

257

00:11:10,720  -->  00:11:15,280
primary constructor and we do that by
258

258

00:11:12,910  -->  00:11:18,880
calling this and it wants the seat
259

259

00:11:15,280  -->  00:11:21,460
height actually if I go back here you
260

260

00:11:18,880  -->  00:11:23,140
can see that once I type that Colin is
261

261

00:11:21,460  -->  00:11:25,630
actually suggesting all of these to me
262

262

00:11:23,140  -->  00:11:28,890
so I'll just let it type for me why do
263

263

00:11:25,630  -->  00:11:31,680
it myself so there we go
264

264

00:11:28,890  -->  00:11:36,300
and then inside I'll say print line this
265

265

00:11:31,680  -->  00:11:38,820
is the color so what are we doing here
266

266

00:11:36,300  -->  00:11:41,310
we're taking the seat height the cadence
267

267

00:11:38,820  -->  00:11:44,790
the speed the gear and the color and
268

268

00:11:41,310  -->  00:11:47,550
we're delegating back up to the primary
269

269

00:11:44,790  -->  00:11:50,010
constructor here we're taking delegating
270

270

00:11:47,550  -->  00:11:53,310
up see height cadence speed and gear and
271

271

00:11:50,010  -->  00:11:56,610
we have been our color now if we wanted
272

272

00:11:53,310  -->  00:11:58,980
here to be optional here then we need to
273

273

00:11:56,610  -->  00:12:01,230
assign a default value here so let's
274

274

00:11:58,980  -->  00:12:03,540
let's do that let's say we're going to
275

275

00:12:01,230  -->  00:12:04,920
make for this secondary constructor it
276

276

00:12:03,540  -->  00:12:07,950
doesn't matter what we really pick I'll
277

277

00:12:04,920  -->  00:12:11,970
pick 10 again but you could put anything
278

278

00:12:07,950  -->  00:12:14,340
here and so if the caller of the
279

279

00:12:11,970  -->  00:12:17,880
secondary constructor doesn't pass in
280

280

00:12:14,340  -->  00:12:21,390
gear then we'll pass 10 up to the
281

281

00:12:17,880  -->  00:12:24,630
primary constructor but now because gear
282

282

00:12:21,390  -->  00:12:26,340
isn't the last parameter if we want to
283

283

00:12:24,630  -->  00:12:28,970
not pass the gear we're going to have to
284

284

00:12:26,340  -->  00:12:31,560
label our argument so let's go up to the
285

285

00:12:28,970  -->  00:12:35,640
main function here and I'm going to
286

286

00:12:31,560  -->  00:12:40,380
comment these two out and I'm going to
287

287

00:12:35,640  -->  00:12:44,070
say Val and I'll call it mountain-bike 3
288

288

00:12:40,380  -->  00:12:48,570
equals hot wind mountain bike and I'll
289

289

00:12:44,070  -->  00:12:51,960
say 20 what order do we have now seat
290

290

00:12:48,570  -->  00:12:56,070
height cadence speed gear and color so
291

291

00:12:51,960  -->  00:12:59,040
I'm just going to say 10 10 10 10 and
292

292

00:12:56,070  -->  00:13:05,520
blue that should be calling mountain
293

293

00:12:59,040  -->  00:13:07,620
bike mountain bike ok so we have 10 10
294

294

00:13:05,520  -->  00:13:09,480
10 10 and blue so that's fine we're
295

295

00:13:07,620  -->  00:13:10,950
passing everything but let's say now we
296

296

00:13:09,480  -->  00:13:12,840
say you know what we don't want to pass
297

297

00:13:10,950  -->  00:13:16,590
the gear so we're going to knock the
298

298

00:13:12,840  -->  00:13:20,250
gear off and now we have a problem
299

299

00:13:16,590  -->  00:13:22,170
because the compiler is saying I'm
300

300

00:13:20,250  -->  00:13:23,730
expecting an INT and I found a string
301

301

00:13:22,170  -->  00:13:25,380
and the reason it's saying that is it's
302

302

00:13:23,730  -->  00:13:27,780
expecting the next argument to be the
303

303

00:13:25,380  -->  00:13:29,550
year and we're giving it a string so if
304

304

00:13:27,780  -->  00:13:32,400
we want to tell the compiler that no no
305

305

00:13:29,550  -->  00:13:35,400
it's ok we're not passing the gear we
306

306

00:13:32,400  -->  00:13:37,470
have to label the argument to let the
307

307

00:13:35,400  -->  00:13:39,300
compiler know so to let it know that
308

308

00:13:37,470  -->  00:13:42,390
we're passing this for the seat height
309

309

00:13:39,300  -->  00:13:44,700
this for the cadence this for the speed
310

310

00:13:42,390  -->  00:13:48,530
getting gear and we're passing the color
311

311

00:13:44,700  -->  00:13:51,090
blue no it would be better if callers of
312

312

00:13:48,530  -->  00:13:53,280
this secondary constructor didn't have
313

313

00:13:51,090  -->  00:13:55,200
to do this we'd like them to not have to
314

314

00:13:53,280  -->  00:14:02,130
label their arguments what we want is
315

315

00:13:55,200  -->  00:14:04,020
this blue and if they leave off the gear
316

316

00:14:02,130  -->  00:14:05,580
that's fine because it's always going to
317

317

00:14:04,020  -->  00:14:07,200
be the last parameter so the compiler
318

318

00:14:05,580  -->  00:14:10,650
knows this the seat type this is the
319

319

00:14:07,200  -->  00:14:13,620
cadence and this is the speed so instead
320

320

00:14:10,650  -->  00:14:17,160
of writing our secondary constructor
321

321

00:14:13,620  -->  00:14:22,490
like this it would be better if we moved
322

322

00:14:17,160  -->  00:14:24,780
the string property up to the front and
323

323

00:14:22,490  -->  00:14:26,690
now if we go back up to the main
324

324

00:14:24,780  -->  00:14:29,790
function there's no problem here
325

325

00:14:26,690  -->  00:14:32,250
so that was one wrinkle to this one
326

326

00:14:29,790  -->  00:14:33,810
where do you want to put the color no I
327

327

00:14:32,250  -->  00:14:35,580
didn't say you had to make the gear
328

328

00:14:33,810  -->  00:14:38,520
optional but and if you didn't that's
329

329

00:14:35,580  -->  00:14:40,290
fine but I wanted to show you this so if
330

330

00:14:38,520  -->  00:14:42,120
you were designing this class and this
331

331

00:14:40,290  -->  00:14:44,430
is what you wanted you would be better
332

332

00:14:42,120  -->  00:14:49,610
to put the color property up front okay
333

333

00:14:44,430  -->  00:14:52,680
so let's run this and see what we get
334

334

00:14:49,610  -->  00:14:55,650
and we'll see that all we get is this is
335

335

00:14:52,680  -->  00:14:58,440
the blue because I said this is the
336

336

00:14:55,650  -->  00:15:00,120
color and so this is the blue and I
337

337

00:14:58,440  -->  00:15:04,620
didn't print out the description let me
338

338

00:15:00,120  -->  00:15:09,960
do that mountain-bike 3.2 print
339

339

00:15:04,620  -->  00:15:12,030
description and let's run again and now
340

340

00:15:09,960  -->  00:15:14,400
we get this is the blue which is coming
341

341

00:15:12,030  -->  00:15:16,350
from the secondary constructor and then
342

342

00:15:14,400  -->  00:15:18,960
we get the bike is in gear 10 with a
343

343

00:15:16,350  -->  00:15:22,110
cadence of 10 traveling at a speed of 10
344

344

00:15:18,960  -->  00:15:24,450
so it got our default gear value here
345

345

00:15:22,110  -->  00:15:30,290
and to show that let me change this to
346

346

00:15:24,450  -->  00:15:34,710
20 temporarily and we'll run again and
347

347

00:15:30,290  -->  00:15:37,260
now it has a gear of 20 and we're
348

348

00:15:34,710  -->  00:15:40,620
definitely not passing 20 in here I'll
349

349

00:15:37,260  -->  00:15:42,900
just leave it at 20 for this secondary
350

350

00:15:40,620  -->  00:15:44,700
constructor okay for your last challenge
351

351

00:15:42,900  -->  00:15:47,430
for this section I want you to add a
352

352

00:15:44,700  -->  00:15:50,220
companion object to the Kotlin mountain
353

353

00:15:47,430  -->  00:15:52,880
bike class the companion object should
354

354

00:15:50,220  -->  00:15:56,160
have one property it should be in
355

355

00:15:52,880  -->  00:15:57,810
immutable list of strings so
356

356

00:15:56,160  -->  00:16:01,379
list of string that cannot be changed
357

357

00:15:57,810  -->  00:16:03,870
and call the property available colors
358

358

00:16:01,379  -->  00:16:05,519
and then I want you to initialize the
359

359

00:16:03,870  -->  00:16:07,769
list with a list of colors I'm actually
360

360

00:16:05,519  -->  00:16:12,569
going to type this one out for you
361

361

00:16:07,769  -->  00:16:16,800
so companion object and it should have a
362

362

00:16:12,569  -->  00:16:24,569
list of strings called available colors
363

363

00:16:16,800  -->  00:16:35,430
and initialize the lists to blue red
364

364

00:16:24,569  -->  00:16:36,899
white black green and brown and then in
365

365

00:16:35,430  -->  00:16:38,670
the main function once you have your
366

366

00:16:36,899  -->  00:16:41,310
companion object print the list of
367

367

00:16:38,670  -->  00:16:43,379
available colors in the main function so
368

368

00:16:41,310  -->  00:16:46,079
create a companion object in the Kotlin
369

369

00:16:43,379  -->  00:16:48,870
mountain-bike class the companion object
370

370

00:16:46,079  -->  00:16:51,180
should have a property called available
371

371

00:16:48,870  -->  00:16:53,850
colors that's an immutable list of
372

372

00:16:51,180  -->  00:16:56,129
string and then initialize that list to
373

373

00:16:53,850  -->  00:16:58,230
the following colors and once you've
374

374

00:16:56,129  -->  00:17:01,769
done that print the available colors
375

375

00:16:58,230  -->  00:17:03,720
from the main function now we haven't
376

376

00:17:01,769  -->  00:17:05,640
really gone over how to print list items
377

377

00:17:03,720  -->  00:17:10,199
but you should be able to figure that
378

378

00:17:05,640  -->  00:17:12,959
out you can have the I des autocomplete
379

379

00:17:10,199  -->  00:17:14,520
give you a hint or you can just you know
380

380

00:17:12,959  -->  00:17:16,770
go out to your favorite search engine
381

381

00:17:14,520  -->  00:17:19,470
and you should be able to fairly quickly
382

382

00:17:16,770  -->  00:17:21,929
find an example of how to print a list
383

383

00:17:19,470  -->  00:17:24,689
of items in Kotlin we will be going over
384

384

00:17:21,929  -->  00:17:27,870
this when we look at collections ok so
385

385

00:17:24,689  -->  00:17:29,380
pause the video and I'll see you in a
386

386

00:17:27,870  -->  00:17:33,100
bit
387

387

00:17:29,380  -->  00:17:35,590
all right welcome back so I'll do the
388

388

00:17:33,100  -->  00:17:38,200
companion object right here I'll say
389

389

00:17:35,590  -->  00:17:40,480
companion object and I'll accept the
390

390

00:17:38,200  -->  00:17:42,730
autocomplete and then we want one
391

391

00:17:40,480  -->  00:17:45,970
property called available color so I'll
392

392

00:17:42,730  -->  00:17:47,920
say Val available colors and we want it
393

393

00:17:45,970  -->  00:17:52,210
to be an immutable list so I'm going to
394

394

00:17:47,920  -->  00:17:56,770
say list of and then these colors here
395

395

00:17:52,210  -->  00:17:58,840
so I'm going to grab this paste it in
396

396

00:17:56,770  -->  00:18:00,460
here and of course I need to remove the
397

397

00:17:58,840  -->  00:18:02,260
end we don't need to be grammatically
398

398

00:18:00,460  -->  00:18:04,870
correct when we're initializing this
399

399

00:18:02,260  -->  00:18:06,430
list so now all I have to do is print
400

400

00:18:04,870  -->  00:18:13,510
out the available colors in the main
401

401

00:18:06,430  -->  00:18:16,630
function so I'll say Kotlin
402

402

00:18:13,510  -->  00:18:19,420
mountain-bike dot and you'll see that we
403

403

00:18:16,630  -->  00:18:23,290
can see available colors and then I'm
404

404

00:18:19,420  -->  00:18:25,510
going to say for each and then for each
405

405

00:18:23,290  -->  00:18:29,320
color in the list I'm going to print it
406

406

00:18:25,510  -->  00:18:31,420
and you will learn all about this in
407

407

00:18:29,320  -->  00:18:33,220
later sections but essentially what's
408

408

00:18:31,420  -->  00:18:36,160
happening here is each item in the list
409

409

00:18:33,220  -->  00:18:37,900
is being substituted for it and so
410

410

00:18:36,160  -->  00:18:40,260
there's a loop happening under the
411

411

00:18:37,900  -->  00:18:45,460
covers here so let's go ahead and run
412

412

00:18:40,260  -->  00:18:47,440
and here are our available colors
413

413

00:18:45,460  -->  00:18:49,960
printed out blue red white green and
414

414

00:18:47,440  -->  00:18:52,000
brown now you might have printed them
415

415

00:18:49,960  -->  00:18:54,490
out in a different way that's fine as
416

416

00:18:52,000  -->  00:18:56,530
long as you see the same list as long as
417

417

00:18:54,490  -->  00:18:58,840
you managed to print them okay that's
418

418

00:18:56,530  -->  00:19:00,430
all for this challenge once you wrap
419

419

00:18:58,840  -->  00:19:02,680
your head around primary and secondary
420

420

00:19:00,430  -->  00:19:05,020
constructors and that you have to
421

421

00:19:02,680  -->  00:19:07,150
explicitly declare when things can be
422

422

00:19:05,020  -->  00:19:09,460
overridden and declare that you're
423

423

00:19:07,150  -->  00:19:10,930
overriding them writing classes and
424

424

00:19:09,460  -->  00:19:13,300
interfaces and Kotlin is pretty
425

425

00:19:10,930  -->  00:19:15,460
straightforward so that's it for this
426

426

00:19:13,300  -->  00:19:17,610
challenge and I'll see you in the next
427

427

00:19:15,460  -->  00:19:17,610
section
