WEBVTT
1
1

00:00:01.030  -->  00:00:04.790
[Music]
2

2

00:00:04.790  -->  00:00:07.050
Before we take a look at some of the
3

3

00:00:07.050  -->  00:00:08.670
more straightforward differences between
4

4

00:00:08.670  -->  00:00:10.710
Kotlin and Java, we're going to take a
5

5

00:00:10.710  -->  00:00:12.570
closer look at variable declarations,
6

6

00:00:12.570  -->  00:00:14.309
because pretty much any code we write
7

7

00:00:14.309  -->  00:00:16.560
will have variables or parameters and
8

8

00:00:16.560  -->  00:00:17.730
I don't want you to keep looking at the
9

9

00:00:17.730  -->  00:00:19.900
declarations and wondering what's going on.
10

10

00:00:19.900  -->  00:00:23.220
Now, Kotlin uses type inference
11

11

00:00:23.220  -->  00:00:25.410
and what this means is that the compiler can
12

12

00:00:25.410  -->  00:00:28.230
usually figure out or infer the type of
13

13

00:00:28.230  -->  00:00:30.720
a variable based on the context in which
14

14

00:00:30.720  -->  00:00:33.150
you're using it and this has done at
15

15

00:00:33.150  -->  00:00:36.000
compile time not at runtime, Kotlin is a
16

16

00:00:36.000  -->  00:00:38.580
statically typed language so the type of
17

17

00:00:38.580  -->  00:00:41.040
every expression is determined and known
18

18

00:00:41.040  -->  00:00:43.980
at compile time. So let's create a
19

19

00:00:43.980  -->  00:00:45.540
new Kotlin project so we can play around
20

20

00:00:45.540  -->  00:00:48.480
with variable declarations, I'll do it a
21

21

00:00:48.480  -->  00:00:51.450
little slowly so that you can see how to
22

22

00:00:51.450  -->  00:00:52.950
create a project again, but from this
23

23

00:00:52.950  -->  00:00:54.990
point forward I'll go through creating a
24

24

00:00:54.990  -->  00:00:58.160
project really quickly, so you go to file
25

25

00:00:58.160  -->  00:01:02.670
new, project. You want to make sure Kotlin
26

26

00:01:02.670  -->  00:01:04.500
is selected on the left hand side and
27

27

00:01:04.500  -->  00:01:06.750
Kotlin jvm on the right hand side
28

28

00:01:06.750  -->  00:01:10.310
and click Next, we'll call this one
29

29

00:01:10.310  -->  00:01:13.940
declarations and we'll click finish
30

30

00:01:13.940  -->  00:01:16.710
and I'm going to have the project open in
31

31

00:01:16.710  -->  00:01:20.310
the same window. And once again, we have a
32

32

00:01:20.310  -->  00:01:23.100
bare-bones Kotlin project, so let's
33

33

00:01:23.100  -->  00:01:25.770
create a package, we'll expand the node
34

34

00:01:25.770  -->  00:01:28.020
right click on the source folder, go to
35

35

00:01:28.020  -->  00:01:30.930
new package and we'll call this one
36

36

00:01:30.930  -->  00:01:35.060
academy.learnprogramming.declarations,
37

37

00:01:35.060  -->  00:01:38.400
click OK. Now let's create a Kotlin
38

38

00:01:38.400  -->  00:01:41.820
file and we'll just call this one
39

39

00:01:41.820  -->  00:01:47.520
declarations. All right, let's
40

40

00:01:47.520  -->  00:01:50.500
add our main method the same way we did before,
41

41

00:01:50.500  -->  00:01:52.900
just typing in main and then hitting enter.
42

42

00:01:52.900  -->  00:01:55.650
Now, every variable declaration
43

43

00:01:55.650  -->  00:02:01.100
begins with val, v-a-l or var v-a-r.
44

44

00:02:01.100  -->  00:02:03.750
val means the variable is immutable,
45

45

00:02:03.750  -->  00:02:05.760
it can only be assigned once and then
46

46

00:02:05.760  -->  00:02:07.830
you can't change the value and this is
47

47

00:02:07.830  -->  00:02:10.530
equivalent to final in Java so when you
48

48

00:02:10.530  -->  00:02:12.420
have a final variable in Java you can
49

49

00:02:12.420  -->  00:02:14.489
assign it once and then that's it,
50

50

00:02:14.489  -->  00:02:17.700
that's what val variables are. So let's start by
51

51

00:02:17.700  -->  00:02:20.100
declaring a val variable called number.
52

52

00:02:20.400  -->  00:02:24.200
Now, you'll notice
53

53

00:02:24.200  -->  00:02:25.890
that we have an error if we hover
54

54

00:02:25.890  -->  00:02:27.870
over it, it will say this variable must either
55

55

00:02:27.870  -->  00:02:30.420
have a type annotation or be initialized,
56

56

00:02:30.420  -->  00:02:33.210
so the reason that we have the error
57

57

00:02:33.210  -->  00:02:35.340
is because at this point the compiler can't
58

58

00:02:35.340  -->  00:02:37.110
infer the type, remember I mentioned
59

59

00:02:37.110  -->  00:02:41.160
that Kotlin uses type inference, so the
60

60

00:02:41.160  -->  00:02:42.900
compiler will look at this and say
61

61

00:02:42.900  -->  00:02:45.330
I still don't have a clue what data type
62

62

00:02:45.330  -->  00:02:46.980
number is supposed to be, I'm going to
63

63

00:02:46.980  -->  00:02:49.230
need a little bit more of a hint.
64

64

00:02:49.230  -->  00:02:51.180
So, there's two ways we can fix this, we can
65

65

00:02:51.180  -->  00:02:53.280
assign an initial value so let's just
66

66

00:02:53.280  -->  00:02:56.070
assign 25 and then you'll notice that the
67

67

00:02:56.070  -->  00:02:59.280
error goes away, and in this case
68

68

00:02:59.280  -->  00:03:02.100
the compiler is going to make number and int
69

69

00:03:02.100  -->  00:03:05.250
because just as in Java, the default
70

70

00:03:05.250  -->  00:03:07.740
datatype for whole numbers is integers,
71

71

00:03:07.740  -->  00:03:09.870
so it's going to say fine I'll make number
72

72

00:03:09.870  -->  00:03:13.050
an int. So the other way we can do it is
73

73

00:03:13.050  -->  00:03:14.880
to just tell the compiler what we want,
74

74

00:03:14.880  -->  00:03:19.800
so we can say we want an int and that's
75

75

00:03:19.800  -->  00:03:22.700
the second way that we can do it.
76

76

00:03:22.700  -->  00:03:25.170
So as you can see, we have the variable name
77

77

00:03:25.170  -->  00:03:27.630
first and then a colon and then the data
78

78

00:03:27.630  -->  00:03:30.150
type, so this is the way that we write a
79

79

00:03:30.150  -->  00:03:32.070
variable declaration in Kotlin, we start
80

80

00:03:32.070  -->  00:03:35.070
with val or var and then variable name
81

81

00:03:35.070  -->  00:03:38.280
colon datatype. So in this case, we're not
82

82

00:03:38.280  -->  00:03:40.050
explicitly assigning a value, but that's
83

83

00:03:40.050  -->  00:03:43.410
okay because we told the compiler what
84

84

00:03:43.410  -->  00:03:45.690
data type we want and so it's cool.
85

85

00:03:45.690  -->  00:03:48.239
It knows we want an int. Now we can do both,
86

86

00:03:48.239  -->  00:03:50.970
I mean we could also assign an
87

87

00:03:50.970  -->  00:03:54.450
initial value here but in Kotlin normally you
88

88

00:03:54.450  -->  00:03:56.850
don't do it that way, there are a few
89

89

00:03:56.850  -->  00:03:59.340
times when you have to, if you want the
90

90

00:03:59.340  -->  00:04:00.720
datatype you want and I'll show you an
91

91

00:04:00.720  -->  00:04:02.700
example of that in just a second but
92

92

00:04:02.700  -->  00:04:04.620
normally in Kotlin if you assign an
93

93

00:04:04.620  -->  00:04:06.570
initial value, that's good enough for the
94

94

00:04:06.570  -->  00:04:08.370
compiler to figure out the type and so
95

95

00:04:08.370  -->  00:04:10.440
you'll see it written like this.
96

96

00:04:10.440  -->  00:04:13.440
in Kotlin more than you will, with including
97

97

00:04:13.440  -->  00:04:15.060
the datatype because if you give the
98

98

00:04:15.060  -->  00:04:16.380
compiler both types of information
99

99

00:04:16.380  -->  00:04:18.030
you're kind of clobbering it over the
100

100

00:04:18.030  -->  00:04:21.030
head and Kotlin is trying to reduce the
101

101

00:04:21.030  -->  00:04:22.400
amount of typing you have to do,
102

102

00:04:22.400  -->  00:04:25.650
so you don't need to give the compiler the same
103

103

00:04:25.650  -->  00:04:28.260
information twice, but what if we want it
104

104

00:04:28.260  -->  00:04:30.240
number to be a short, we're not going to
105

105

00:04:30.240  -->  00:04:32.520
get a short doing it this way because
106

106

00:04:32.520  -->  00:04:35.069
the default datatype for whole
107

107

00:04:35.069  -->  00:04:36.660
numbers is an int so the compiler is
108

108

00:04:36.660  -->  00:04:38.250
going to look at this and say 25 whole
109

109

00:04:38.250  -->  00:04:41.009
number int so this is one of the cases
110

110

00:04:41.009  -->  00:04:42.930
where we'd have to actually include both
111

111

00:04:42.930  -->  00:04:45.180
types of information, if we wanted this
112

112

00:04:45.180  -->  00:04:47.580
to be a short, because giving the initial
113

113

00:04:47.580  -->  00:04:49.440
value isn't enough to get the compiler
114

114

00:04:49.440  -->  00:04:51.690
to do what we want it to do and it's the
115

115

00:04:51.690  -->  00:04:53.700
same thing with floating type numbers,
116

116

00:04:53.700  -->  00:04:55.050
we're going to cover datatypes in more
117

117

00:04:55.050  -->  00:04:57.840
detail later, but just as in java double
118

118

00:04:57.840  -->  00:05:00.270
as the default, so sometimes you have to
119

119

00:05:00.270  -->  00:05:01.710
explicitly tell the compiler that you
120

120

00:05:01.710  -->  00:05:03.960
actually want a float, but for now let's
121

121

00:05:03.960  -->  00:05:07.259
go back to just giving it the type,
122

122

00:05:07.259  -->  00:05:09.090
so this is a val variable so we can only
123

123

00:05:09.090  -->  00:05:11.159
assign it once within the block of code
124

124

00:05:11.159  -->  00:05:13.500
that it's declared. So let's do that,
125

125

00:05:13.500  -->  00:05:17.759
let's assign it ten so number equals ten,
126

126

00:05:17.759  -->  00:05:20.340
that's fine not a problem, but if we try
127

127

00:05:20.340  -->  00:05:24.330
to assign it again, we'll get an error
128

128

00:05:24.330  -->  00:05:27.030
and the error will be val cannot be
129

129

00:05:27.030  -->  00:05:31.069
reassigned, so let's change val to var,
130

130

00:05:31.069  -->  00:05:33.300
and now you'll see two things happen.
131

131

00:05:33.300  -->  00:05:35.800
First, of all the error goes away and secondly now,
132

132

00:05:35.800  -->  00:05:38.300
number is underlined so we can now change
133

133

00:05:38.300  -->  00:05:40.900
the value because it's a var variable,
134

134

00:05:40.900  -->  00:05:42.960
and var variables are mutable,
135

135

00:05:42.960  -->  00:05:45.180
you can change their values as often as
136

136

00:05:45.180  -->  00:05:48.509
you want. The compiler will underline var
137

137

00:05:48.509  -->  00:05:50.099
variable so that you can tell at a
138

138

00:05:50.099  -->  00:05:52.710
glance which variables are mutable and
139

139

00:05:52.710  -->  00:05:54.900
which ones are immutable, if you see a
140

140

00:05:54.900  -->  00:05:57.120
variable name that's underlined it means
141

141

00:05:57.120  -->  00:05:58.919
that you can change its value, if it
142

142

00:05:58.919  -->  00:06:01.740
isn't underlined it means you may be
143

143

00:06:01.740  -->  00:06:04.380
able to assign it, if it's the first time
144

144

00:06:04.380  -->  00:06:06.599
but if it's not, then you can't change it.
145

145

00:06:06.599  -->  00:06:09.539
Now Kotlin recommends that you declare
146

146

00:06:09.539  -->  00:06:12.960
val or immutable variables whenever possible,
147

147

00:06:12.960  -->  00:06:15.509
it doesn't enforce this but that's
148

148

00:06:15.509  -->  00:06:18.090
the recommended and practice and it's good
149

149

00:06:18.090  -->  00:06:20.729
practice in Kotlin, so try to drill it
150

150

00:06:20.729  -->  00:06:22.380
into your head that you always start a
151

151

00:06:22.380  -->  00:06:25.529
variable declaration with val unless
152

152

00:06:25.529  -->  00:06:28.289
you have a good reason to do otherwise,
153

153

00:06:28.289  -->  00:06:30.210
and this is different from Java, right?
154

154

00:06:30.210  -->  00:06:32.190
Because in Java it's the other way
155

155

00:06:32.190  -->  00:06:33.990
around, you don't declare stuff final
156

156

00:06:33.990  -->  00:06:35.900
unless you have a good reason for doing so.
157

157

00:06:35.900  -->  00:06:38.490
Well in Kotlin, they want stuff to be
158

158

00:06:38.490  -->  00:06:41.880
immutable unless you need to change it
159

159

00:06:41.880  -->  00:06:45.669
not enforced, but it's considered good practice.
160

160

00:06:45.669  -->  00:06:47.680
So now we're going to in the same file,
161

161

00:06:47.680  -->  00:06:49.990
we're going to create a class and don't
162

162

00:06:49.990  -->  00:06:52.569
worry about the syntax, there's a whole
163

163

00:06:52.569  -->  00:06:54.600
section on classes in the course,
164

164

00:06:54.600  -->  00:06:57.430
so don't worry about the syntax, so we're
165

165

00:06:57.430  -->  00:06:58.960
going to have an employee class, so we'll
166

166

00:06:58.960  -->  00:07:01.810
start with class employee and then
167

167

00:07:01.810  -->  00:07:03.280
this is going to look very different to you,
168

168

00:07:03.280  -->  00:07:06.479
don't worry about it, but we'll have a var
169

169

00:07:06.479  -->  00:07:09.340
property called name which is going to
170

170

00:07:09.340  -->  00:07:12.039
be a string and we'll have a val
171

171

00:07:12.039  -->  00:07:14.680
property called ID, which will be an int,
172

172

00:07:14.680  -->  00:07:18.969
and we'll have the usual curly braces.
173

173

00:07:18.969  -->  00:07:21.009
So, we've declared name as var because
174

174

00:07:21.009  -->  00:07:22.700
you know we're assuming an employee's name
175

175

00:07:22.700  -->  00:07:25.120
can change and we're declaring the ID as
176

176

00:07:25.120  -->  00:07:27.159
a val because we're figuring that once
177

177

00:07:27.159  -->  00:07:29.379
an employee gets assigned an ID, that ID
178

178

00:07:29.379  -->  00:07:32.700
never changes in a real world application,
179

179

00:07:32.700  -->  00:07:33.900
we probably have first name
180

180

00:07:33.900  -->  00:07:36.250
and last name but you know, this is just
181

181

00:07:36.250  -->  00:07:38.680
a demo. So now let's go back to the main
182

182

00:07:38.680  -->  00:07:40.509
function and we'll declare an employee
183

183

00:07:40.509  -->  00:07:45.330
variable, so we'll say val employee1
184

184

00:07:45.330  -->  00:07:50.800
equals employee and let's call this employee
185

185

00:07:50.800  -->  00:07:54.600
Lynn Jones and we'll give her an ID of 500.
186

186

00:07:54.600  -->  00:07:58.240
So far so good, so let's assume Lynn
187

187

00:07:58.240  -->  00:08:00.159
gets married and she decides to take her
188

188

00:08:00.159  -->  00:08:02.740
husband's name, so we'll change her name
189

189

00:08:02.740  -->  00:08:07.089
so we'll say employee1.name equals
190

190

00:08:07.089  -->  00:08:11.600
Lynn Smith and that works.
191

191

00:08:11.600  -->  00:08:13.659
We don't see an error as you can see name
192

192

00:08:13.659  -->  00:08:15.969
is underlined because it's mutable
193

193

00:08:15.969  -->  00:08:17.860
variable, because we've declared it as
194

194

00:08:17.860  -->  00:08:19.960
var and because it's declared as var,
195

195

00:08:19.960  -->  00:08:21.460
you're allowed to change it as many
196

196

00:08:21.460  -->  00:08:24.219
times as you want. I did this to show you
197

197

00:08:24.219  -->  00:08:26.319
that when a variable is immutable it
198

198

00:08:26.319  -->  00:08:28.270
doesn't mean the instance properties are
199

199

00:08:28.270  -->  00:08:30.729
immutable it means you can't assign
200

200

00:08:30.729  -->  00:08:33.279
another instance to the variable, because
201

201

00:08:33.279  -->  00:08:35.900
you'll notice that we declared employee1
202

202

00:08:35.900  -->  00:08:38.300
as val which means it's immutable,
203

203

00:08:38.300  -->  00:08:41.409
but we can reassign the properties
204

204

00:08:41.409  -->  00:08:44.169
in employee1, so it's ok for us to change
205

205

00:08:44.169  -->  00:08:47.410
the values inside an employee instance,
206

206

00:08:47.410  -->  00:08:49.420
but if we were to try to assign
207

207

00:08:49.420  -->  00:08:52.300
a different employee instance to employee1,
208

208

00:08:52.300  -->  00:08:54.900
that would be an error. So let's try it.
209

209

00:08:54.900  -->  00:08:58.840
Let's assign a different instance.
210

210

00:08:58.840  -->  00:09:04.400
So let's try employee1 equals employee
211

211

00:09:04.400  -->  00:09:09.800
and we'll call him let's see, Tim Watson
212

212

00:09:09.800  -->  00:09:12.190
and we'll give him an ID of 100
213

213

00:09:12.190  -->  00:09:14.300
and you'll see that we now have an error,
214

214

00:09:14.300  -->  00:09:17.700
val cannot be reassigned. So again, it's okay
215

215

00:09:17.700  -->  00:09:20.980
with immutable variables that contain an
216

216

00:09:20.980  -->  00:09:22.780
instance. It's okay to change the values
217

217

00:09:22.780  -->  00:09:25.630
of the instance properties, but you can't
218

218

00:09:25.630  -->  00:09:27.700
assign a completely different instance,
219

219

00:09:27.700  -->  00:09:30.250
because in here, of course you have an
220

220

00:09:30.250  -->  00:09:32.200
instance reference and the instance
221

221

00:09:32.200  -->  00:09:34.300
reference doesn't change when you do this,
222

222

00:09:34.300  -->  00:09:35.560
but when you're assigning
223

223

00:09:35.560  -->  00:09:37.750
a completely different instance, it does
224

224

00:09:37.750  -->  00:09:39.990
so you're not allowed to do that with val variables.
225

225

00:09:39.990  -->  00:09:41.860
Now, I did say that the rule
226

226

00:09:41.860  -->  00:09:43.720
for val variables is that you're allowed
227

227

00:09:43.720  -->  00:09:45.610
to assign it once, within the block of
228

228

00:09:45.610  -->  00:09:48.820
code where it's defined and there are
229

229

00:09:48.820  -->  00:09:50.980
cases then where the compiler can
230

230

00:09:50.980  -->  00:09:54.200
guarantee that the variable is only
231

231

00:09:54.200  -->  00:09:55.660
going to be assigned once, even though
232

232

00:09:55.660  -->  00:09:56.920
it might look like it's being assigned
233

233

00:09:56.920  -->  00:09:59.170
more than once. So let's get rid of this,
234

234

00:09:59.170  -->  00:10:01.450
so that we can get rid of the error.
235

235

00:10:01.450  -->  00:10:08.000
Let's declare another employee,
236

236

00:10:08.000  -->  00:10:10.470
and this time we won't assign an initial value
237

237

00:10:10.470  -->  00:10:13.930
right there and then let's declare a
238

238

00:10:13.930  -->  00:10:16.300
number2 variable, which we're just going
239

239

00:10:16.300  -->  00:10:18.670
to use in a silly if statement,
240

240

00:10:18.670  -->  00:10:19.960
that doesn't mean anything just to
241

241

00:10:19.960  -->  00:10:23.470
demonstrate that what we mean by you can
242

242

00:10:23.470  -->  00:10:25.900
assign a variable once in a block.
243

243

00:10:25.900  -->  00:10:29.800
So now, we'll type if number is less than number2,
244

244

00:10:29.800  -->  00:10:33.160
which it is. Then we'll assign
245

245

00:10:33.160  -->  00:10:40.410
employee2 the name Jane Smith,
246

246

00:10:40.410  -->  00:10:48.070
and we'll give Jane an ID of 400, else we'll
247

247

00:10:48.070  -->  00:10:53.300
assign employee2 the name Mike Watson
248

248

00:10:53.300  -->  00:10:57.000
and we'll give him an ID about 150.
249

249

00:10:57.000  -->  00:11:00.339
So, we don't have an error here even
250

250

00:11:00.339  -->  00:11:02.500
though aal is immutable because we're
251

251

00:11:02.500  -->  00:11:05.230
only assigning at once the compiler can
252

252

00:11:05.230  -->  00:11:08.140
guarantee that employee2 is only going
253

253

00:11:08.140  -->  00:11:10.150
to be assigned once, because either the
254

254

00:11:10.150  -->  00:11:12.900
if code will be executed or the else code
255

255

00:11:12.900  -->  00:11:15.300
will be executed, so this would be okay,
256

256

00:11:15.300  -->  00:11:16.930
okay and it's the same thing with final
257

257

00:11:16.930  -->  00:11:18.930
variables in Java, but I just thought I'd
258

258

00:11:18.930  -->  00:11:21.900
illustrate that the same thing applies in Kotlin.
259

259

00:11:21.900  -->  00:11:24.300
Okay, so the compiler as we've seen,
260

260

00:11:24.300  -->  00:11:27.190
can infer the type of a variable
261

261

00:11:27.190  -->  00:11:29.620
sometimes, depending on the context but
262

262

00:11:29.620  -->  00:11:31.660
that doesn't mean that the type of the
263

263

00:11:31.660  -->  00:11:33.459
variable can change like for example,
264

264

00:11:33.459  -->  00:11:37.329
we can't do something like this.
265

265

00:11:37.329  -->  00:11:40.500
That gets us an error as we can see, type mismatch
266

266

00:11:40.500  -->  00:11:42.790
required int and found string.
267

267

00:11:42.790  -->  00:11:44.740
So you can't change the data type of a variable
268

268

00:11:44.740  -->  00:11:46.779
on the fly, I mean sure the compiler can
269

269

00:11:46.779  -->  00:11:47.980
tell here that you want to assign
270

270

00:11:47.980  -->  00:11:50.529
a string, but the type is fixed at
271

271

00:11:50.529  -->  00:11:53.050
declaration time. So you can't change
272

272

00:11:53.050  -->  00:11:55.389
variable types on the fly even though
273

273

00:11:55.389  -->  00:11:57.100
the compiler can figure out types,
274

274

00:11:57.100  -->  00:11:59.290
without you having to tell it and that's
275

275

00:11:59.290  -->  00:12:01.029
it for this video. I just want it to give
276

276

00:12:01.029  -->  00:12:03.800
you a quick overview of variable.
277

277

00:12:03.800  -->  00:12:06.870
I'll see you in the next one.
