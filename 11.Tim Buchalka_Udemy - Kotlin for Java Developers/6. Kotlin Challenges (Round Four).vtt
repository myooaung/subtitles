WEBVTT
1
1

00:00:04.720  -->  00:00:07.900
Alright, so now it's time to practice
2

2

00:00:07.900  -->  00:00:09.460
what you've learned in the section this
3

3

00:00:09.460  -->  00:00:11.350
challenge won't be as long as the last
4

4

00:00:11.350  -->  00:00:13.840
section, because even though we looked at
5

5

00:00:13.840  -->  00:00:17.230
quite a few things, the for loop is not
6

6

00:00:17.230  -->  00:00:19.330
that different from what we do in Java,
7

7

00:00:19.330  -->  00:00:23.140
the if statement slash expression hasn't
8

8

00:00:23.140  -->  00:00:26.740
really changed, when is new but we don't-
9

9

00:00:26.740  -->  00:00:28.660
it wasn't as much new stuff in this
10

10

00:00:28.660  -->  00:00:30.940
section but still there's stuff you can
11

11

00:00:30.940  -->  00:00:33.399
practice, so let's start. I've created a
12

12

00:00:33.399  -->  00:00:37.059
Kotlin project already and the usual
13

13

00:00:37.059  -->  00:00:40.839
package and file. So for your first
14

14

00:00:40.839  -->  00:00:45.370
challenge, I want you to use a range to
15

15

00:00:45.370  -->  00:00:48.640
print out the numbers 5 to 5,000 in
16

16

00:00:48.640  -->  00:00:53.559
steps of 5. So you should be printing out
17

17

00:00:53.559  -->  00:00:58.800
5 10 15 20 25 etc.
18

18

00:00:58.800  -->  00:01:02.109
all the way up to 5,000 so use a
19

19

00:01:02.109  -->  00:01:06.159
range and print out the numbers from 5
20

20

00:01:06.159  -->  00:01:11.780
to 5,000. Pause the video and I'll see you in a bit.
21

21

00:01:11.780  -->  00:01:14.270
Alright welcome back. Well obviously
22

22

00:01:14.270  -->  00:01:15.650
we're also going to have to use a
23

23

00:01:15.650  -->  00:01:17.210
for-loop to do this,
24

24

00:01:17.210  -->  00:01:22.820
so we'll say for i in five to five
25

25

00:01:22.820  -->  00:01:25.700
thousand, so there is our range and we
26

26

00:01:25.700  -->  00:01:29.330
want to do this in steps of 5 and we'll
27

27

00:01:29.330  -->  00:01:32.030
just print line i, so the start and end
28

28

00:01:32.030  -->  00:01:35.360
values are included in the range and so
29

29

00:01:35.360  -->  00:01:38.270
we start with 5 and we end with 5000 and
30

30

00:01:38.270  -->  00:01:41.180
we want to increment the value by 5 each
31

31

00:01:41.180  -->  00:01:44.539
time, so we'll step 5 now I could run
32

32

00:01:44.539  -->  00:01:46.130
this and I will even though it's going
33

33

00:01:46.130  -->  00:01:49.650
to print out quite a few values
34

34

00:01:49.650  -->  00:01:53.340
and here's 5,000 at the end and if I
35

35

00:01:53.340  -->  00:01:55.620
scroll all the way up we start at 5 and
36

36

00:01:55.620  -->  00:01:58.380
we're going up in increments of 5,
37

37

00:01:58.380  -->  00:02:00.840
so that was a pretty easy one just to get
38

38

00:02:00.840  -->  00:02:03.150
started and I'm going to comment this
39

39

00:02:03.150  -->  00:02:05.550
out now because I don't want all those
40

40

00:02:05.550  -->  00:02:08.250
numbers printed out every time I run.
41

41

00:02:08.250  -->  00:02:11.160
So now I want you to do the same thing, use
42

42

00:02:11.160  -->  00:02:13.140
a range but I want you to print the
43

43

00:02:13.140  -->  00:02:16.680
numbers from negative 500 to zero
44

44

00:02:16.680  -->  00:02:21.300
without skipping any numbers, so use a
45

45

00:02:21.300  -->  00:02:23.760
range to print the numbers from negative
46

46

00:02:23.760  -->  00:02:27.360
500 to zero inclusive so the first
47

47

00:02:27.360  -->  00:02:30.209
number printed should be negative 500
48

48

00:02:30.209  -->  00:02:33.959
and then negative 499 negative 498 etc
49

49

00:02:33.959  -->  00:02:37.200
all the way to 0. So pause the video and
50

50

00:02:37.200  -->  00:02:39.670
give that a shot.
51

51

00:02:39.670  -->  00:02:42.739
Okay, welcome back well negative numbers
52

52

00:02:42.739  -->  00:02:46.250
aren't special when using ranges, so this
53

53

00:02:46.250  -->  00:02:48.680
is just a matter of setting the start
54

54

00:02:48.680  -->  00:02:51.950
value to negative 500 and the N value to
55

55

00:02:51.950  -->  00:02:57.370
zero. So we'll say for i in negative 500
56

56

00:02:57.370  -->  00:03:05.890
to 0 and print line i, so let's run this
57

57

00:03:05.890  -->  00:03:10.400
and you'll see that the last value is 0
58

58

00:03:10.400  -->  00:03:12.799
which is what we wanted and we started
59

59

00:03:12.799  -->  00:03:16.130
up at negative 500, so that's how you
60

60

00:03:16.130  -->  00:03:19.160
would do that one. Alright, so your next
61

61

00:03:19.160  -->  00:03:21.920
challenge is using a range, I want you to
62

62

00:03:21.920  -->  00:03:26.000
print the first 15, 1 5 numbers in the
63

63

00:03:26.000  -->  00:03:28.430
Fibonacci sequence, now if you're not
64

64

00:03:28.430  -->  00:03:31.310
familiar with that sequence, it starts
65

65

00:03:31.310  -->  00:03:35.030
with 0 and 1 and then after that each
66

66

00:03:35.030  -->  00:03:38.510
subsequent number is the sum of the two
67

67

00:03:38.510  -->  00:03:42.140
preceding numbers. So let me comment this
68

68

00:03:42.140  -->  00:03:47.329
out now and so the Fibonacci sequence
69

69

00:03:47.329  -->  00:03:50.630
starts with 0 and 1 and then you get the
70

70

00:03:50.630  -->  00:03:52.639
next number by adding up the two
71

71

00:03:52.639  -->  00:03:54.920
preceding numbers, so we would add 0 and
72

72

00:03:54.920  -->  00:03:58.730
1 and so the next number is 1 and now
73

73

00:03:58.730  -->  00:04:01.310
the next number, we add the two preceding
74

74

00:04:01.310  -->  00:04:03.769
for the two last numbers that's another
75

75

00:04:03.769  -->  00:04:06.440
way of looking at it, so 1 in 1 is 2 so
76

76

00:04:06.440  -->  00:04:08.419
the next number in the sequence is 2 and
77

77

00:04:08.419  -->  00:04:12.889
now 1 plus 2 is 3, so the next number in
78

78

00:04:12.889  -->  00:04:16.820
the sequence is 3, 2 plus 3 is 5 so the
79

79

00:04:16.820  -->  00:04:19.729
next number in the sequence is 5, 3 + 5
80

80

00:04:19.729  -->  00:04:21.889
is 8 so the next number in the sequence
81

81

00:04:21.889  -->  00:04:26.419
is 8 etc. and I want you to print the
82

82

00:04:26.419  -->  00:04:32.570
first 15, 1 5 so print the first 15
83

83

00:04:32.570  -->  00:04:39.440
numbers in the Fibonacci sequence and I
84

84

00:04:39.440  -->  00:04:42.680
want you to use a range to do this.
85

85

00:04:42.680  -->  00:04:44.660
Now one hint I'm going to give you is you're
86

86

00:04:44.660  -->  00:04:47.000
not going to be able to print all the
87

87

00:04:47.000  -->  00:04:50.090
numbers using the range so you may have
88

88

00:04:50.090  -->  00:04:53.180
to print the first number, the first couple of
89

89

00:04:53.180  -->  00:04:56.660
numbers outside the range and then at
90

90

00:04:56.660  -->  00:04:59.389
that point, you can start using a range
91

91

00:04:59.389  -->  00:05:01.820
in a four loop, so that's a hint for you.
92

92

00:05:01.820  -->  00:05:04.699
So go ahead now write the code that will
93

93

00:05:04.699  -->  00:05:06.800
include a range in it somewhere that
94

94

00:05:06.800  -->  00:05:09.440
will print out the first 15 numbers in
95

95

00:05:09.440  -->  00:05:11.539
the Fibonacci sequence and remember that
96

96

00:05:11.539  -->  00:05:13.340
you get each number except for the first
97

97

00:05:13.340  -->  00:05:15.440
two numbers there are there exceptions,
98

98

00:05:15.440  -->  00:05:18.530
zero and one after that you get each
99

99

00:05:18.530  -->  00:05:20.690
number by adding up, adding the two
100

100

00:05:20.690  -->  00:05:22.280
numbers that would come before it and
101

101

00:05:22.280  -->  00:05:25.250
the sum is the number. So pause the video
102

102

00:05:25.250  -->  00:05:29.000
and I'll see you in a bit.
103

103

00:05:29.000  -->  00:05:32.000
Okay, welcome back I'm going to give you
104

104

00:05:32.000  -->  00:05:35.240
my solution, it's the obvious solution
105

105

00:05:35.240  -->  00:05:37.700
you may have a different solution it
106

106

00:05:37.700  -->  00:05:41.060
doesn't matter as long as when you run,
107

107

00:05:41.060  -->  00:05:44.150
you get the same output that I do. So all
108

108

00:05:44.150  -->  00:05:46.400
that's important here is that your
109

109

00:05:46.400  -->  00:05:48.350
solution works and that you're using a
110

110

00:05:48.350  -->  00:05:51.380
range somewhere in your code, so I'm
111

111

00:05:51.380  -->  00:05:56.090
going to say var total int and I'm
112

112

00:05:56.090  -->  00:06:02.450
going to say var second to last equal
113

113

00:06:02.450  -->  00:06:06.020
zero, so in case you're not sure what I'm
114

114

00:06:06.020  -->  00:06:09.230
doing here, this is going to be the total
115

115

00:06:09.230  -->  00:06:12.560
of the two preceding numbers and the
116

116

00:06:12.560  -->  00:06:15.320
second-to-last number is going to be the
117

117

00:06:15.320  -->  00:06:17.420
second number before than when I'm
118

118

00:06:17.420  -->  00:06:19.580
trying to calculate. So in the case of
119

119

00:06:19.580  -->  00:06:22.040
two the second-to-last number would be
120

120

00:06:22.040  -->  00:06:26.120
this one here and I'm going to say var
121

121

00:06:26.120  -->  00:06:29.900
last equals one. So what I've done here
122

122

00:06:29.900  -->  00:06:33.410
is at the beginning of the sequence the
123

123

00:06:33.410  -->  00:06:35.720
last number is 1 and the second to last
124

124

00:06:35.720  -->  00:06:38.360
number is zero, so I'm going to start
125

125

00:06:38.360  -->  00:06:40.190
printing my sequence now, so I'm going to
126

126

00:06:40.190  -->  00:06:42.320
print line stuck into last because
127

127

00:06:42.320  -->  00:06:43.640
that's the first number in the sequence
128

128

00:06:43.640  -->  00:06:46.640
and then I'm going to print line last so
129

129

00:06:46.640  -->  00:06:49.490
I've now printed out these two and now I
130

130

00:06:49.490  -->  00:06:52.280
can go ahead and start using a range to
131

131

00:06:52.280  -->  00:06:54.950
print the remaining 13 numbers and so
132

132

00:06:54.950  -->  00:06:57.050
because I want 13 numbers I'm going to
133

133

00:06:57.050  -->  00:07:01.460
say for i in 1 to 13, because I want to
134

134

00:07:01.460  -->  00:07:03.890
loop around 13 times, I've written the
135

135

00:07:03.890  -->  00:07:06.680
first two numbers and we want 15, so I
136

136

00:07:06.680  -->  00:07:09.110
want 13 numbers at this point and I'm
137

137

00:07:09.110  -->  00:07:11.950
going to say the total equals
138

138

00:07:11.950  -->  00:07:16.190
second-to-last add last so I'm just add
139

139

00:07:16.190  -->  00:07:19.250
at 0 to 1 and that's going to be the
140

140

00:07:19.250  -->  00:07:21.020
next number in the sequence so that's
141

141

00:07:21.020  -->  00:07:23.210
the next number we want to print out so
142

142

00:07:23.210  -->  00:07:24.530
I'm going to go ahead and print it out
143

143

00:07:24.530  -->  00:07:29.720
and then at this point the second to
144

144

00:07:29.720  -->  00:07:32.419
last number becomes our last number and
145

145

00:07:32.419  -->  00:07:36.260
the last number becomes the total so
146

146

00:07:36.260  -->  00:07:42.800
I'll say second-to-last equals last and last
147

147

00:07:42.800  -->  00:07:45.949
equals total and that's it that's the code.
148

148

00:07:45.949  -->  00:07:49.909
So essentially I print these two numbers
149

149

00:07:49.909  -->  00:07:52.879
outside the loop and I initialize second
150

150

00:07:52.879  -->  00:07:55.789
to last to this one and last to this one
151

151

00:07:55.789  -->  00:07:59.539
and then inside the loop by some the
152

152

00:07:59.539  -->  00:08:02.240
second and last and last to get the next
153

153

00:08:02.240  -->  00:08:05.330
value and that will be the total, I print
154

154

00:08:05.330  -->  00:08:08.300
that value so that's when I print the
155

155

00:08:08.300  -->  00:08:10.340
number in the sequence, but then of
156

156

00:08:10.340  -->  00:08:12.919
course this number will now become the
157

157

00:08:12.919  -->  00:08:14.690
last number and this number will now
158

158

00:08:14.690  -->  00:08:17.659
become the second to last number and so
159

159

00:08:17.659  -->  00:08:19.789
this is a fairly obvious solution,
160

160

00:08:19.789  -->  00:08:22.280
it does use a range you may have a more
161

161

00:08:22.280  -->  00:08:24.680
concise elegant solution here and if you
162

162

00:08:24.680  -->  00:08:26.469
want to share your solution in the
163

163

00:08:26.469  -->  00:08:29.659
question area, that's fine. I want it to
164

164

00:08:29.659  -->  00:08:31.729
use something clear and obvious but
165

165

00:08:31.729  -->  00:08:33.950
let's run now to make sure it actually
166

166

00:08:33.950  -->  00:08:40.339
works and here's the first 15 numbers,
167

167

00:08:40.339  -->  00:08:44.839
so we've got 0 1 1 2 3 5 8 we had those up
168

168

00:08:44.839  -->  00:08:48.589
in our comment here and then 8 + 5 is 13
169

169

00:08:48.589  -->  00:08:54.230
13 and 8 is 21, 21 + 13 is 34 etc down to
170

170

00:08:54.230  -->  00:09:02.440
3 77 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15.
171

171

00:09:02.440  -->  00:09:05.600
So we've got our first 15 numbers in the
172

172

00:09:05.600  -->  00:09:08.899
Fibonacci sequence. Alright so now I want
173

173

00:09:08.899  -->  00:09:12.230
you to do something starting with the
174

174

00:09:12.230  -->  00:09:14.420
following code, I'm going to comment this
175

175

00:09:14.420  -->  00:09:17.839
out and I'm going to type in some code
176

176

00:09:17.839  -->  00:09:24.010
here and this code will be in the start
177

177

00:09:24.010  -->  00:09:26.510
challenge that you can download the
178

178

00:09:26.510  -->  00:09:28.940
project with start challenge project I'm
179

179

00:09:28.940  -->  00:09:33.700
going to say i in 1 to 5, for i in 1 to 5
180

180

00:09:33.700  -->  00:09:38.660
print line i and then I'm going to say
181

181

00:09:38.660  -->  00:09:46.670
for j in 11 to 20, print line j and then
182

182

00:09:46.670  -->  00:09:53.089
inside J here, for k in 100 down to 90
183

183

00:09:53.089  -->  00:09:56.900
and we're going to print line k.
184

184

00:09:56.900  -->  00:10:02.060
onw I want you to change this code in
185

185

00:10:02.060  -->  00:10:04.960
some way or add something to the code
186

186

00:10:04.960  -->  00:10:08.420
whatever you need to do to get the
187

187

00:10:08.420  -->  00:10:14.390
following output when we run. And each
188

188

00:10:14.390  -->  00:10:18.400
number will be on a separate line 1, 11
189

189

00:10:18.400  -->  00:10:24.710
100 99 98 and 2 because right now if we
190

190

00:10:24.710  -->  00:10:26.960
run, we're going to see a lot more than
191

191

00:10:26.960  -->  00:10:31.910
that. So if I run this we're going to see
192

192

00:10:31.910  -->  00:10:35.150
you know this is this is a long output
193

193

00:10:35.150  -->  00:10:37.460
because we're looping around here five
194

194

00:10:37.460  -->  00:10:39.260
times and inside there, we're looping
195

195

00:10:39.260  -->  00:10:42.140
ten times here and inside here we're
196

196

00:10:42.140  -->  00:10:44.450
looping ten times, so we're doing quite a
197

197

00:10:44.450  -->  00:10:45.860
lot of looping in here we've got all
198

198

00:10:45.860  -->  00:10:48.110
these numbers and I want you to change
199

199

00:10:48.110  -->  00:10:51.470
this code in some way so that you just
200

200

00:10:51.470  -->  00:10:54.080
see the following numbers. Now you should
201

201

00:10:54.080  -->  00:10:56.440
be able to do that without having to
202

202

00:10:56.440  -->  00:10:58.850
overwrite any of this code so in other
203

203

00:10:58.850  -->  00:11:00.290
words, you should be able to do it by
204

204

00:11:00.290  -->  00:11:03.650
just adding stuff to this code. So what
205

205

00:11:03.650  -->  00:11:06.050
you should see in the console if you've
206

206

00:11:06.050  -->  00:11:08.330
done it correctly is you'll see 1 and 11
207

207

00:11:08.330  -->  00:11:13.190
and then you'll see 100 99 98 and then 2
208

208

00:11:13.190  -->  00:11:14.750
and that's all you're going to see and
209

209

00:11:14.750  -->  00:11:16.310
each number will be on a separate line
210

210

00:11:16.310  -->  00:11:18.680
just like it is here. So pause the video
211

211

00:11:18.680  -->  00:11:22.030
and give that a try.
212

212

00:11:22.030  -->  00:11:25.910
Okay, so the key to this line is to use
213

213

00:11:25.910  -->  00:11:28.790
labels in conjunction with break and
214

214

00:11:28.790  -->  00:11:31.550
continue. Now we can tell from this input
215

215

00:11:31.550  -->  00:11:34.100
each of these loops prints out different
216

216

00:11:34.100  -->  00:11:35.720
numbers they don't print out overlapping
217

217

00:11:35.720  -->  00:11:39.380
numbers, so i only ever prints one two five
218

218

00:11:39.380  -->  00:11:42.020
the J loop only ever prints the numbers
219

219

00:11:42.020  -->  00:11:44.960
11 to 20 and the K loop only ever
220

220

00:11:44.960  -->  00:11:47.900
prints the number is 100 down to 90.
221

221

00:11:47.900  -->  00:11:51.230
So we know that this one and this two
222

222

00:11:51.230  -->  00:11:54.350
are coming from the I loop, we know that
223

223

00:11:54.350  -->  00:11:57.350
the 11 is coming from the J and we know
224

224

00:11:57.350  -->  00:12:01.640
that 100 to 99 to 98 is coming from K
225

225

00:12:01.640  -->  00:12:04.250
and we can tell from the output that the
226

226

00:12:04.250  -->  00:12:06.290
K loop and the J loop are only ever
227

227

00:12:06.290  -->  00:12:09.350
entered once and the I loop is entered
228

228

00:12:09.350  -->  00:12:12.500
twice but then it stops. So obviously
229

229

00:12:12.500  -->  00:12:14.270
we're doing something in here to
230

230

00:12:14.270  -->  00:12:17.420
short-circuit the loops so that implies
231

231

00:12:17.420  -->  00:12:19.940
that we need break and continue but in
232

232

00:12:19.940  -->  00:12:22.100
this case, we also need to use labels
233

233

00:12:22.100  -->  00:12:24.620
because if we just use break and
234

234

00:12:24.620  -->  00:12:25.850
continue we're not going to be able to
235

235

00:12:25.850  -->  00:12:27.890
get this type of behavior at least I
236

236

00:12:27.890  -->  00:12:29.300
don't think we can you might have come
237

237

00:12:29.300  -->  00:12:31.340
up with a solution that actually does it
238

238

00:12:31.340  -->  00:12:34.460
and if you have let us know. So after k
239

239

00:12:34.460  -->  00:12:37.130
finishes, we could say break let's that-
240

240

00:12:37.130  -->  00:12:38.660
might be our first attempt we'll say
241

241

00:12:38.660  -->  00:12:42.650
well look K finishes here and then we
242

242

00:12:42.650  -->  00:12:43.970
break out of the loop because we only
243

243

00:12:43.970  -->  00:12:47.000
said you know if it's 98 obviously if
244

244

00:12:47.000  -->  00:12:50.030
it's 98 because we never see 97, we're
245

245

00:12:50.030  -->  00:12:53.080
breaking out of the loop so let's say if
246

246

00:12:53.080  -->  00:12:57.710
k equals 98 because we've already
247

247

00:12:57.710  -->  00:13:00.560
printed out the 98 and let's just say
248

248

00:13:00.560  -->  00:13:03.350
we're done, we want to get out so let's
249

249

00:13:03.350  -->  00:13:10.490
try that for our first shot and okay so
250

250

00:13:10.490  -->  00:13:14.680
we'll see that we get the 1 11 100 99 98
251

251

00:13:14.680  -->  00:13:17.210
but then we're going out to the J loop
252

252

00:13:17.210  -->  00:13:20.060
again, because now we see 12 so instead
253

253

00:13:20.060  -->  00:13:23.870
of getting 1 11 100 99 98 and then
254

254

00:13:23.870  -->  00:13:25.730
getting 2 which means we've gone out to
255

255

00:13:25.730  -->  00:13:28.070
the I loop, we're going out to the the J
256

256

00:13:28.070  -->  00:13:30.680
loop rather. So this gives us a huge hint
257

257

00:13:30.680  -->  00:13:33.200
as to what we might want to label
258

258

00:13:33.200  -->  00:13:35.660
because this tells us that when we
259

259

00:13:35.660  -->  00:13:38.000
break at 98, we actually want to jump
260

260

00:13:38.000  -->  00:13:40.730
right back out to the I loop we want to
261

261

00:13:40.730  -->  00:13:43.580
not do the J loop whatever. So in order
262

262

00:13:43.580  -->  00:13:45.050
to make that happen, we're going to have
263

263

00:13:45.050  -->  00:13:47.240
to use a label, because if we use break
264

264

00:13:47.240  -->  00:13:49.640
here with no label, it's going to take us
265

265

00:13:49.640  -->  00:13:52.430
up to the J loop, it'll bring us out of
266

266

00:13:52.430  -->  00:13:56.030
the K take us up to the J. So let's label
267

267

00:13:56.030  -->  00:13:58.970
our I loop and I'm going to call it I
268

268

00:13:58.970  -->  00:14:03.680
loop and let's break it I loop that
269

269

00:14:03.680  -->  00:14:06.980
should be our second attempt at this and
270

270

00:14:06.980  -->  00:14:08.540
I don't need the semicolon there, I don't
271

271

00:14:08.540  -->  00:14:10.580
know, I think I did that in one of
272

272

00:14:10.580  -->  00:14:12.500
the videos too, I had a semicolon here I
273

273

00:14:12.500  -->  00:14:14.330
don't know why I have the tendency with
274

274

00:14:14.330  -->  00:14:17.840
breaks tad semicolons. So let's try this,
275

275

00:14:17.840  -->  00:14:20.480
so now we're saying okay yeah we want to
276

276

00:14:20.480  -->  00:14:22.580
break but we want to go back out to do
277

277

00:14:22.580  -->  00:14:25.040
to the I loop we don't want to go back
278

278

00:14:25.040  -->  00:14:30.710
into the K loop. So let's run now wow
279

279

00:14:30.710  -->  00:14:35.090
that really cut down what we got we're
280

280

00:14:35.090  -->  00:14:37.280
almost there but we're missing this 2,
281

281

00:14:37.280  -->  00:14:41.360
so we're doing what we want almost we
282

282

00:14:41.360  -->  00:14:43.580
when we hit 98 we don't come into K
283

283

00:14:43.580  -->  00:14:46.550
anymore, we skip right over J so we only
284

284

00:14:46.550  -->  00:14:49.010
ever enter J the once but we want the
285

285

00:14:49.010  -->  00:14:53.570
two, so maybe instead of breaking at the
286

286

00:14:53.570  -->  00:14:56.990
I loop, maybe we could continue at the I
287

287

00:14:56.990  -->  00:15:00.520
loop, so let's try that.
288

288

00:15:00.520  -->  00:15:03.140
So we'll say we want to continue at the
289

289

00:15:03.140  -->  00:15:05.060
I loop not break completely out of the
290

290

00:15:05.060  -->  00:15:07.100
I loop because if we do then all we'll
291

291

00:15:07.100  -->  00:15:13.310
ever see is one, let's let's run that,
292

292

00:15:13.310  -->  00:15:19.790
so now we get 1 11 100 99 98 and 2 but oh
293

293

00:15:19.790  -->  00:15:22.070
now since we're not breaking out of the
294

294

00:15:22.070  -->  00:15:24.470
I loop we're now going into the J loop
295

295

00:15:24.470  -->  00:15:28.100
so that's our final hint it's like well
296

296

00:15:28.100  -->  00:15:30.020
we actually just want to stop here
297

297

00:15:30.020  -->  00:15:32.840
we're done we've got our what we wanted
298

298

00:15:32.840  -->  00:15:37.670
we've got 1 11 100 99 98 2, we don't want
299

299

00:15:37.670  -->  00:15:40.400
you to go into the J loop again, we don't
300

300

00:15:40.400  -->  00:15:42.020
want you to go into the K loop, we just
301

301

00:15:42.020  -->  00:15:44.690
want you to stop and so what we want to
302

302

00:15:44.690  -->  00:15:49.610
do here is say, hey if i equals
303

303

00:15:49.610  -->  00:15:56.360
two, we're done break, we're done so let's
304

304

00:15:56.360  -->  00:16:01.250
give that a shot and we get what we're
305

305

00:16:01.250  -->  00:16:04.010
looking for. So I don't know if you found
306

306

00:16:04.010  -->  00:16:05.959
that difficult but it would just be a
307

307

00:16:05.959  -->  00:16:08.120
matter of doing what we did here trying
308

308

00:16:08.120  -->  00:16:11.600
different things and seeing if you can
309

309

00:16:11.600  -->  00:16:13.279
at least get part of what you're looking
310

310

00:16:13.279  -->  00:16:15.110
for and then from there getting a hint
311

311

00:16:15.110  -->  00:16:18.769
about what you might need to do, so we
312

312

00:16:18.769  -->  00:16:21.290
need it to do a couple of things here,
313

313

00:16:21.290  -->  00:16:23.800
we needed to test for ninety eight and
314

314

00:16:23.800  -->  00:16:26.660
figure out that we need it to first of
315

315

00:16:26.660  -->  00:16:29.480
all bypass the J loop at that point and
316

316

00:16:29.480  -->  00:16:31.430
go back up to the I loop, so we could get
317

317

00:16:31.430  -->  00:16:35.720
the two printed and we did a test and
318

318

00:16:35.720  -->  00:16:37.190
figured out that we actually just want
319

319

00:16:37.190  -->  00:16:38.600
it to continue, we didn't just want to
320

320

00:16:38.600  -->  00:16:41.690
break and then once we had that going it
321

321

00:16:41.690  -->  00:16:44.089
was pretty easy to see that oh we also
322

322

00:16:44.089  -->  00:16:46.310
need to break out of the I loop when i
323

323

00:16:46.310  -->  00:16:48.950
equals two so that was the solution for
324

324

00:16:48.950  -->  00:16:51.350
that one, I hope you had some fun and not
325

325

00:16:51.350  -->  00:16:52.970
too much frustration trying to solve
326

326

00:16:52.970  -->  00:16:55.130
that. Okay, so for our final challenge
327

327

00:16:55.130  -->  00:16:58.190
this is what I want you to do, I want you
328

328

00:16:58.190  -->  00:17:01.310
to declare a variable called num and set
329

329

00:17:01.310  -->  00:17:04.490
it to any int value you choose. So you're
330

330

00:17:04.490  -->  00:17:07.069
going to declare an int variable called
331

331

00:17:07.069  -->  00:17:10.579
num and then using one expression or
332

332

00:17:10.579  -->  00:17:13.699
statement, I want you to declare and
333

333

00:17:13.699  -->  00:17:16.579
assign a double val variable called
334

334

00:17:16.579  -->  00:17:19.819
d num as follows and I'll write this out
335

335

00:17:19.819  -->  00:17:27.079
for you, so declare a variable called num
336

336

00:17:27.079  -->  00:17:29.390
and there'll be an int and assign it
337

337

00:17:29.390  -->  00:17:38.890
whatever you want and then declare a
338

338

00:17:38.890  -->  00:17:42.890
variable called dnum which
339

339

00:17:42.890  -->  00:17:51.830
will be a double and assign it as follows,
340

340

00:17:51.830  -->  00:17:58.460
if num is greater than 100, assign
341

341

00:17:58.460  -->  00:18:03.400
dnum minus 234567,
342

342

00:18:03.400  -->  00:18:09.410
if num is less than 100, assign dnum
343

343

00:18:09.410  -->  00:18:18.410
4444.555 and if num is equal to 100 assigned dnum
344

344

00:18:18.410  -->  00:18:23.480
0.0 and then print the
345

345

00:18:23.480  -->  00:18:28.250
value of dnum, okay? You can do this on in a
346

346

00:18:28.250  -->  00:18:33.230
separate statement obviously, but do all
347

347

00:18:33.230  -->  00:18:35.330
of this do all of the above in one
348

348

00:18:35.330  -->  00:18:44.630
statement or expression, so declare an
349

349

00:18:44.630  -->  00:18:46.850
int variable called num assign it
350

350

00:18:46.850  -->  00:18:49.130
whatever you want, declare a double
351

351

00:18:49.130  -->  00:18:52.250
variable called dnum and then assign
352

352

00:18:52.250  -->  00:18:57.170
it as I've outlined here and this part
353

353

00:18:57.170  -->  00:19:03.530
here just this part do it all using one
354

354

00:19:03.530  -->  00:19:05.870
statement or expression. So you should be
355

355

00:19:05.870  -->  00:19:08.090
able to do this part here in one
356

356

00:19:08.090  -->  00:19:10.670
statement or expression. So go ahead
357

357

00:19:10.670  -->  00:19:13.490
pause the video give that a try and then
358

358

00:19:13.490  -->  00:19:16.850
come back and we'll do it.
359

359

00:19:16.850  -->  00:19:20.539
Okay, welcome back we can do this in two
360

360

00:19:20.539  -->  00:19:23.600
ways actually, so I'm going to do it the
361

361

00:19:23.600  -->  00:19:26.929
first way and that first way is using an
362

362

00:19:26.929  -->  00:19:29.659
if expression, so I'm going to say val
363

363

00:19:29.659  -->  00:19:31.639
num equals and I'm going to assign it
364

364

00:19:31.639  -->  00:19:34.909
100 and I'm going to say val dnum
365

365

00:19:34.909  -->  00:19:38.000
equals and I'm going to say if num is
366

366

00:19:38.000  -->  00:19:44.480
less than 100 then I want to assign it
367

367

00:19:44.480  -->  00:19:47.360
the value minus two three four point
368

368

00:19:47.360  -->  00:19:52.039
five six seven, else if num is greater
369

369

00:19:52.039  -->  00:19:55.879
than 100, then I want to assign it the
370

370

00:19:55.879  -->  00:19:58.610
value four four four four point five
371

371

00:19:58.610  -->  00:20:02.659
five five otherwise I want to give it
372

372

00:20:02.659  -->  00:20:05.450
the value zero point zero and then I'm
373

373

00:20:05.450  -->  00:20:09.049
going to print it dnum and I'm going to
374

374

00:20:09.049  -->  00:20:14.409
indent these lines a little bit,
375

375

00:20:14.409  -->  00:20:16.850
so essentially I'm just treating the if as
376

376

00:20:16.850  -->  00:20:19.549
an expression and I'm expecting to see
377

377

00:20:19.549  -->  00:20:22.279
zero point zero because I assigned 100.
378

378

00:20:22.279  -->  00:20:25.009
So let's run and see if that's what I
379

379

00:20:25.009  -->  00:20:30.700
get, I will comment these lines out and
380

380

00:20:30.700  -->  00:20:36.340
then I'll run and I get zero point zero.
381

381

00:20:36.340  -->  00:20:40.429
So if I change this to 101, in that case
382

382

00:20:40.429  -->  00:20:42.259
I'll be expecting four four four four
383

383

00:20:42.259  -->  00:20:44.090
point five five five,
384

384

00:20:44.090  -->  00:20:47.779
let me run and I get four four four four
385

385

00:20:47.779  -->  00:20:50.570
point five five five, now I didn't have
386

386

00:20:50.570  -->  00:20:52.129
to do the assignment separately of
387

387

00:20:52.129  -->  00:20:53.629
course, I could have just printed this
388

388

00:20:53.629  -->  00:20:57.379
directly I'll just do this temporarily
389

389

00:20:57.379  -->  00:21:01.309
but I was having you split across two
390

390

00:21:01.309  -->  00:21:02.870
lines I thought maybe that was makes it
391

391

00:21:02.870  -->  00:21:05.600
a little easier for you but you don't
392

392

00:21:05.600  -->  00:21:08.509
have to assign it to dnum and we get
393

393

00:21:08.509  -->  00:21:10.549
the same thing so that's the first way
394

394

00:21:10.549  -->  00:21:14.149
of doing it in one statement, it's just
395

395

00:21:14.149  -->  00:21:16.129
using the if now the second way of doing
396

396

00:21:16.129  -->  00:21:19.399
it of course is to use when and so let's
397

397

00:21:19.399  -->  00:21:23.149
do it that way now so I'll say and I'll
398

398

00:21:23.149  -->  00:21:25.490
just print this one actually I'll
399

399

00:21:25.490  -->  00:21:30.410
sign it so I'll say val dnum equals when
400

400

00:21:30.410  -->  00:21:33.380
and remember that if we want to test
401

401

00:21:33.380  -->  00:21:35.420
conditions, we don't have to provide the
402

402

00:21:35.420  -->  00:21:37.250
when with a value because what value
403

403

00:21:37.250  -->  00:21:39.740
would we provide it with, I mean we can't
404

404

00:21:39.740  -->  00:21:41.930
provide it with num because we're not
405

405

00:21:41.930  -->  00:21:43.790
comparing num against something we're
406

406

00:21:43.790  -->  00:21:46.520
actually testing conditions, so this is
407

407

00:21:46.520  -->  00:21:48.170
one case where when doesn't take any
408

408

00:21:48.170  -->  00:21:53.570
values, so we'll say num greater than 100
409

409

00:21:53.570  -->  00:21:57.050
and in that case we want minus two three
410

410

00:21:57.050  -->  00:22:01.760
four point five six seven if num is less
411

411

00:22:01.760  -->  00:22:04.550
than 100 you want four four four four
412

412

00:22:04.550  -->  00:22:07.570
point five five five else
413

413

00:22:07.570  -->  00:22:11.240
we just want zero point zero and then
414

414

00:22:11.240  -->  00:22:14.270
I'll say print line dnum, so if I run
415

415

00:22:14.270  -->  00:22:16.400
now I should see four four four four
416

416

00:22:16.400  -->  00:22:22.250
point five five five printed twice and I
417

417

00:22:22.250  -->  00:22:25.040
didn't why is that ah
418

418

00:22:25.040  -->  00:22:27.500
I switched around here that should be
419

419

00:22:27.500  -->  00:22:30.320
negative- less than I switched my
420

420

00:22:30.320  -->  00:22:34.640
conditions so let me do that, so now we
421

421

00:22:34.640  -->  00:22:38.480
match so greater than greater than let's
422

422

00:22:38.480  -->  00:22:42.530
run again. Okay now we get the four four
423

423

00:22:42.530  -->  00:22:45.170
four four point five five five so that's
424

424

00:22:45.170  -->  00:22:48.830
two ways of doing this, in using one
425

425

00:22:48.830  -->  00:22:52.220
statement where you can compare a value
426

426

00:22:52.220  -->  00:22:54.890
like num against multiple values because
427

427

00:22:54.890  -->  00:22:56.900
we could have split this up even further
428

428

00:22:56.900  -->  00:22:59.090
and had a bunch of else's or a bunch
429

429

00:22:59.090  -->  00:23:04.160
more when clauses here and tested a
430

430

00:23:04.160  -->  00:23:05.570
whole bunch of things within one
431

431

00:23:05.570  -->  00:23:08.120
statement. Okay that's all for this
432

432

00:23:08.120  -->  00:23:11.060
section. So apart from the when statement
433

433

00:23:11.060  -->  00:23:13.280
and ranges what we covered is similar to
434

434

00:23:13.280  -->  00:23:15.560
Java like I said with a few wrinkles
435

435

00:23:15.560  -->  00:23:18.530
thrown in so not as long as of a
436

436

00:23:18.530  -->  00:23:20.330
challenge section but I hope you had fun
437

437

00:23:20.330  -->  00:23:24.940
practicing and I'll see you in the next section.
