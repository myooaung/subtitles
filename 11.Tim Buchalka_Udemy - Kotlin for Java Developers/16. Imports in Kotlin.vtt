WEBVTT
1
1

00:00:04.720  -->  00:00:07.210
At this point, you've seen quite a lot,
2

2

00:00:07.210  -->  00:00:09.730
you've seen classes, interfaces, taught
3

3

00:00:09.730  -->  00:00:11.730
level functions, extension function,
4

4

00:00:11.730  -->  00:00:14.500
singletons, so I thought it would be a
5

5

00:00:14.500  -->  00:00:17.410
good point to discuss imports. I mean how
6

6

00:00:17.410  -->  00:00:18.910
do you import all this stuff when you
7

7

00:00:18.910  -->  00:00:21.460
want to use it? First of all, let's talk a
8

8

00:00:21.460  -->  00:00:24.190
bit about packages in Kotlin. I've been
9

9

00:00:24.190  -->  00:00:26.290
using a package like structure in the
10

10

00:00:26.290  -->  00:00:28.150
projects we've created, but I didn't have
11

11

00:00:28.150  -->  00:00:30.970
to do that, just as class named don't
12

12

00:00:30.970  -->  00:00:32.349
have to match the name of the file
13

13

00:00:32.349  -->  00:00:34.870
they're in, packages don't have to match
14

14

00:00:34.870  -->  00:00:37.149
the directory structure. So let's go
15

15

00:00:37.149  -->  00:00:39.010
ahead and demonstrate that, I'm going to
16

16

00:00:39.010  -->  00:00:42.730
create a new file within our academy dot
17

17

00:00:42.730  -->  00:00:45.359
learn programming communications package.
18

18

00:00:45.359  -->  00:00:49.390
So, I'll say new Kotlin file or class and
19

19

00:00:49.390  -->  00:00:53.920
let's just call this file imports.
20

20

00:00:53.920  -->  00:00:56.109
Now, you'll notice that Kotlin added or
21

21

00:00:56.109  -->  00:00:58.780
rather the IDE added a package statement
22

22

00:00:58.780  -->  00:01:01.059
academy dot learn programming dot
23

23

00:01:01.059  -->  00:01:03.760
communications, so right now it's
24

24

00:01:03.760  -->  00:01:06.490
following the practice of having a
25

25

00:01:06.490  -->  00:01:08.590
package name that matches the directory
26

26

00:01:08.590  -->  00:01:10.180
structure and in fact that's the
27

27

00:01:10.180  -->  00:01:13.360
recommended practice, even though Kotlin
28

28

00:01:13.360  -->  00:01:14.950
doesn't enforce that there be a
29

29

00:01:14.950  -->  00:01:16.540
directory structure that matches the
30

30

00:01:16.540  -->  00:01:20.050
package, it's the recommended practice.
31

31

00:01:20.050  -->  00:01:21.880
So, I'd recommend that you create packages
32

32

00:01:21.880  -->  00:01:23.980
if it's business as usual,
33

33

00:01:23.980  -->  00:01:26.650
do it the Java and the Kotlin
34

34

00:01:26.650  -->  00:01:29.890
recommended way, but to demonstrate that
35

35

00:01:29.890  -->  00:01:31.480
you don't have to match the directory
36

36

00:01:31.480  -->  00:01:33.370
structure, let's change the package of
37

37

00:01:33.370  -->  00:01:36.610
this class to academy dot learn
38

38

00:01:36.610  -->  00:01:39.280
programming dot imports, you'll see that
39

39

00:01:39.280  -->  00:01:41.050
we don't get any error messages at all
40

40

00:01:41.050  -->  00:01:44.290
and let's add a main method to this file.
41

41

00:01:44.290  -->  00:01:47.230
And just add on an old print line that
42

42

00:01:47.230  -->  00:01:52.690
says my package doesn't match and if we
43

43

00:01:52.690  -->  00:01:59.410
run this, we'll see that it runs fine,
44

44

00:01:59.410  -->  00:02:01.840
don't get any errors, so even though the
45

45

00:02:01.840  -->  00:02:03.670
directory structure doesn't match the
46

46

00:02:03.670  -->  00:02:05.770
package name, that's fine.
47

47

00:02:05.770  -->  00:02:07.900
Kotlin won't complain, compiler won't
48

48

00:02:07.900  -->  00:02:11.530
complain. Now if I come up here to this
49

49

00:02:11.530  -->  00:02:14.260
file and I right-click and I go to show
50

50

00:02:14.260  -->  00:02:16.090
and explorer it'll probably be called
51

51

00:02:16.090  -->  00:02:17.580
something different in the Mac,
52

52

00:02:17.580  -->  00:02:20.970
we can see that it's in directory source
53

53

00:02:20.970  -->  00:02:24.000
academy learn programming communications.
54

54

00:02:24.000  -->  00:02:26.880
And so, we definitely have a file that's
55

55

00:02:26.880  -->  00:02:28.950
in a package that doesn't match the
56

56

00:02:28.950  -->  00:02:30.780
directory structure and everything is
57

57

00:02:30.780  -->  00:02:33.110
fine, but I'm going to change it back to
58

58

00:02:33.110  -->  00:02:35.690
academy learn programming dot
59

59

00:02:35.690  -->  00:02:38.370
communications, because I want to do it
60

60

00:02:38.370  -->  00:02:40.950
the way that it's recommended that we do
61

61

00:02:40.950  -->  00:02:43.410
it, so we'll change it back. So I just
62

62

00:02:43.410  -->  00:02:45.540
wanted to show you this, so that you know
63

63

00:02:45.540  -->  00:02:48.240
this about packages, but again I want to
64

64

00:02:48.240  -->  00:02:50.850
reiterate the recommended practice is to
65

65

00:02:50.850  -->  00:02:53.010
do it as Java does it and to make the
66

66

00:02:53.010  -->  00:02:55.110
package structure match the directory
67

67

00:02:55.110  -->  00:02:57.660
structure. So basically just keep it
68

68

00:02:57.660  -->  00:03:00.780
business as usual, but know that if you
69

69

00:03:00.780  -->  00:03:03.450
don't have to. Ok, so now let's move on to
70

70

00:03:03.450  -->  00:03:05.400
imports, you import classes and
71

71

00:03:05.400  -->  00:03:07.680
interfaces, as you do in Java so we're
72

72

00:03:07.680  -->  00:03:09.510
not going to spend any time on the
73

73

00:03:09.510  -->  00:03:12.150
basics, but how about top-level functions?
74

74

00:03:12.150  -->  00:03:14.880
This is something that we don't have in Java.
75

75

00:03:14.880  -->  00:03:17.640
Well, you import top-level functions in
76

76

00:03:17.640  -->  00:03:19.950
the same way, so if we go back to company
77

77

00:03:19.950  -->  00:03:22.850
communications, I've already typed up a
78

78

00:03:22.850  -->  00:03:25.860
top-level function in here and all it
79

79

00:03:25.860  -->  00:03:27.870
does it says top-level function and
80

80

00:03:27.870  -->  00:03:31.050
we'll insert the string value whatever
81

81

00:03:31.050  -->  00:03:32.910
string is passed to the function, so we
82

82

00:03:32.910  -->  00:03:34.860
want to know use this function from
83

83

00:03:34.860  -->  00:03:36.810
another package, so let's go ahead and
84

84

00:03:36.810  -->  00:03:39.330
create another package. So in the source
85

85

00:03:39.330  -->  00:03:42.900
folder here, I'll go new package and I'll
86

86

00:03:42.900  -->  00:03:47.489
say academy dot learn programming dot and we'll just
87

87

00:03:47.489  -->  00:03:51.600
call it another package and then let's
88

88

00:03:51.600  -->  00:03:55.800
create a file in here, new Kotlin file
89

89

00:03:55.800  -->  00:03:58.550
and I'll just call it another file and
90

90

00:03:58.550  -->  00:04:01.650
we'll add a main function. Okay, so now we
91

91

00:04:01.650  -->  00:04:05.310
want to call the top-level function in
92

92

00:04:05.310  -->  00:04:07.500
our company communications file, so let's
93

93

00:04:07.500  -->  00:04:09.959
go ahead and just use it, we'll just say
94

94

00:04:09.959  -->  00:04:12.870
top-level and you can see that right
95

95

00:04:12.870  -->  00:04:15.690
away, IntelliJ knows about it. So I'll say
96

96

00:04:15.690  -->  00:04:18.200
yes that's what I want to use and boom,
97

97

00:04:18.200  -->  00:04:21.989
IntelliJ just added an import statement
98

98

00:04:21.989  -->  00:04:24.979
for it, because I have the auto import
99

99

00:04:24.979  -->  00:04:28.110
feature turned on in the IDE which means
100

100

00:04:28.110  -->  00:04:30.780
that if an import isn't ambiguous,
101

101

00:04:30.780  -->  00:04:31.290
in other word,
102

102

00:04:31.290  -->  00:04:34.170
since the IDE can figure out what import
103

103

00:04:34.170  -->  00:04:36.800
to use, because there aren't multiple
104

104

00:04:36.800  -->  00:04:39.330
classes or functions with the same name,
105

105

00:04:39.330  -->  00:04:41.670
then it'll just go ahead and add the
106

106

00:04:41.670  -->  00:04:43.290
import statement for me. So what it's
107

107

00:04:43.290  -->  00:04:45.000
done here is it's added an import
108

108

00:04:45.000  -->  00:04:47.640
statement academy dot learn programming
109

109

00:04:47.640  -->  00:04:50.400
dot communications dot top-level so that
110

110

00:04:50.400  -->  00:04:52.650
is the import statement for this
111

111

00:04:52.650  -->  00:04:54.780
function here, so as you can see when you
112

112

00:04:54.780  -->  00:04:56.940
want to import a top-level function,
113

113

00:04:56.940  -->  00:04:58.980
you just go ahead and do it the same way
114

114

00:04:58.980  -->  00:05:01.200
you would a class except you specify the
115

115

00:05:01.200  -->  00:05:03.120
name of the function and that lets you
116

116

00:05:03.120  -->  00:05:06.060
import an individual function. So now,
117

117

00:05:06.060  -->  00:05:08.430
can just go ahead and use it, so I'll say
118

118

00:05:08.430  -->  00:05:15.240
top-level hello from another file.
119

119

00:05:15.240  -->  00:05:20.370
So let's hit run and we get top-level
120

120

00:05:20.370  -->  00:05:22.410
function hello from another file and
121

121

00:05:22.410  -->  00:05:24.360
that's being printed from the function
122

122

00:05:24.360  -->  00:05:27.720
in company communications. Okay, so
123

123

00:05:27.720  -->  00:05:30.570
obviously, importing and using functions
124

124

00:05:30.570  -->  00:05:33.840
within a project in another package is
125

125

00:05:33.840  -->  00:05:36.090
very straightforward. So how about
126

126

00:05:36.090  -->  00:05:38.400
modules, we mentioned modules when we
127

127

00:05:38.400  -->  00:05:40.680
were talking about access modifiers, what
128

128

00:05:40.680  -->  00:05:43.530
if we want it to use this function from
129

129

00:05:43.530  -->  00:05:45.900
another module? Well, we're going to have
130

130

00:05:45.900  -->  00:05:48.030
to create another module to do that, so
131

131

00:05:48.030  -->  00:05:50.610
let's go ahead and do it. So to do that,
132

132

00:05:50.610  -->  00:05:53.970
we'll go to file new but instead of
133

133

00:05:53.970  -->  00:05:55.260
choosing project, we're going to select
134

134

00:05:55.260  -->  00:05:57.090
module and then it's going to look
135

135

00:05:57.090  -->  00:05:58.890
fairly similar to what we do when we
136

136

00:05:58.890  -->  00:06:00.780
create a project, so we have Kotlin on
137

137

00:06:00.780  -->  00:06:03.420
the left, Kotlin on the right and we'll
138

138

00:06:03.420  -->  00:06:09.150
call this module name another module,
139

139

00:06:09.150  -->  00:06:10.830
so you'll see that it's been added here and
140

140

00:06:10.830  -->  00:06:13.470
it's bold and if we expand the node it
141

141

00:06:13.470  -->  00:06:16.410
has a source folder. So let's create a
142

142

00:06:16.410  -->  00:06:19.920
package in here, so we'll say new package
143

143

00:06:19.920  -->  00:06:22.310
and we'll call it academy
144

144

00:06:22.310  -->  00:06:28.100
learn programming and dot another module
145

145

00:06:28.100  -->  00:06:32.340
package, let's say and now we want a file
146

146

00:06:32.340  -->  00:06:33.840
that does the same thing that another
147

147

00:06:33.840  -->  00:06:36.300
file does, except this time it's doing
148

148

00:06:36.300  -->  00:06:38.100
it'll do it from a different module,
149

149

00:06:38.100  -->  00:06:41.010
so let's create a new Kotlin file or class
150

150

00:06:41.010  -->  00:06:44.550
and we'll call it another
151

151

00:06:44.550  -->  00:06:48.420
module file, let's say. And then we're
152

152

00:06:48.420  -->  00:06:49.830
just going to do the same thing, so we're
153

153

00:06:49.830  -->  00:06:52.680
going to have a main function and we'll
154

154

00:06:52.680  -->  00:06:57.000
say top level and you'll see that we
155

155

00:06:57.000  -->  00:06:58.020
can't see it.
156

156

00:06:58.020  -->  00:07:02.910
This module cannot see this function and
157

157

00:07:02.910  -->  00:07:04.920
you'll remember that when we did the
158

158

00:07:04.920  -->  00:07:07.050
exact same thing from this file which
159

159

00:07:07.050  -->  00:07:10.170
belongs to the same module as company
160

160

00:07:10.170  -->  00:07:11.640
communications, we didn't have this
161

161

00:07:11.640  -->  00:07:14.040
problem, we could just see it right away,
162

162

00:07:14.040  -->  00:07:16.620
but we can't see it from here.
163

163

00:07:16.620  -->  00:07:19.230
Now, because everything is public and final
164

164

00:07:19.230  -->  00:07:21.090
by default, we should be able to see it
165

165

00:07:21.090  -->  00:07:23.070
from here and the reason that we can't
166

166

00:07:23.070  -->  00:07:26.940
is because we haven't added the company
167

167

00:07:26.940  -->  00:07:29.190
communications module as a dependency
168

168

00:07:29.190  -->  00:07:32.190
for this module. So if we go ahead and
169

169

00:07:32.190  -->  00:07:34.800
add company communications as a
170

170

00:07:34.800  -->  00:07:38.730
dependency we'll be able to see the top
171

171

00:07:38.730  -->  00:07:40.470
level function and in fact we'll be able
172

172

00:07:40.470  -->  00:07:42.780
to see anything that's public in the
173

173

00:07:42.780  -->  00:07:44.940
company communications module. So let's
174

174

00:07:44.940  -->  00:07:47.700
go ahead and make company communications
175

175

00:07:47.700  -->  00:07:51.090
a dependency of another module. So to do
176

176

00:07:51.090  -->  00:07:52.230
that, we're going to come to another
177

177

00:07:52.230  -->  00:07:54.990
module and right-click on it and we're
178

178

00:07:54.990  -->  00:07:57.030
going to come down here to open module
179

179

00:07:57.030  -->  00:08:00.870
settings, you can also use f4 and now
180

180

00:08:00.870  -->  00:08:02.880
you'll see that in the middle panel,
181

181

00:08:02.880  -->  00:08:05.490
can see the two modules that are in this
182

182

00:08:05.490  -->  00:08:08.100
project, we want to make sure that
183

183

00:08:08.100  -->  00:08:10.560
another module is selected and then over
184

184

00:08:10.560  -->  00:08:14.250
here, we're going to click the green plus
185

185

00:08:14.250  -->  00:08:16.800
button and we're going to select module
186

186

00:08:16.800  -->  00:08:19.170
dependency, because we want to add a
187

187

00:08:19.170  -->  00:08:21.990
module as a dependency and when we do so,
188

188

00:08:21.990  -->  00:08:24.180
we'll see choose modules and we only
189

189

00:08:24.180  -->  00:08:26.400
have one other module in this project.
190

190

00:08:26.400  -->  00:08:27.750
So the only one that we can choose is
191

191

00:08:27.750  -->  00:08:29.430
company communication, so we'll go ahead
192

192

00:08:29.430  -->  00:08:31.590
and choose that and now company
193

193

00:08:31.590  -->  00:08:34.080
communications is a dependency of
194

194

00:08:34.080  -->  00:08:37.200
another module, so when we build we try
195

195

00:08:37.200  -->  00:08:39.180
to build another module, we'll see that
196

196

00:08:39.180  -->  00:08:41.370
it'll pull in company communications as
197

197

00:08:41.370  -->  00:08:45.870
well. So we'll click ok, let me delete
198

198

00:08:45.870  -->  00:08:50.970
that and type it again and you'll see
199

199

00:08:50.970  -->  00:08:54.450
now that it's imported it right here.
200

200

00:08:54.450  -->  00:08:57.750
So now, we can see in another modules file
201

201

00:08:57.750  -->  00:09:01.680
which is in this module here, we can see top level
202

202

00:09:01.680  -->  00:09:03.920
and we can go ahead and say hello from
203

203

00:09:03.920  -->  00:09:12.810
another module and if we run this,
204

204

00:09:12.810  -->  00:09:14.970
we'll now see top level function hello from
205

205

00:09:14.970  -->  00:09:17.910
another module. So when you want to use
206

206

00:09:17.910  -->  00:09:19.950
something from another module, the import
207

207

00:09:19.950  -->  00:09:21.839
statement looks exactly the same, but you
208

208

00:09:21.839  -->  00:09:23.790
have to remember that you need to deal
209

209

00:09:23.790  -->  00:09:26.279
with dependencies and make sure that
210

210

00:09:26.279  -->  00:09:28.410
when you build the stuff that a module
211

211

00:09:28.410  -->  00:09:30.420
needs is going to be pulled in. Now,
212

212

00:09:30.420  -->  00:09:32.670
obviously, you can only import top level
213

213

00:09:32.670  -->  00:09:34.110
functions like this because they're not
214

214

00:09:34.110  -->  00:09:36.390
associated with instances, you know you
215

215

00:09:36.390  -->  00:09:38.970
can't import individual class member
216

216

00:09:38.970  -->  00:09:40.800
functions, that wouldn't make sense if
217

217

00:09:40.800  -->  00:09:42.510
you want to use a class member function
218

218

00:09:42.510  -->  00:09:44.700
you got to import the entire class. Now,
219

219

00:09:44.700  -->  00:09:47.339
you import type aliases and extension
220

220

00:09:47.339  -->  00:09:48.750
functions in the same way, you'll
221

221

00:09:48.750  -->  00:09:51.510
remember the type alias lets you refer
222

222

00:09:51.510  -->  00:09:53.790
to a type by a different name and you
223

223

00:09:53.790  -->  00:09:56.100
declare those at the top of a file,
224

224

00:09:56.100  -->  00:09:57.930
so they're also top level and you import
225

225

00:09:57.930  -->  00:09:59.760
them exactly the same way and it's the
226

226

00:09:59.760  -->  00:10:01.350
same thing with extension functions,
227

227

00:10:01.350  -->  00:10:02.940
extension functions are top level
228

228

00:10:02.940  -->  00:10:04.710
functions and you import them the same
229

229

00:10:04.710  -->  00:10:09.000
way, just by name. So how about object
230

230

00:10:09.000  -->  00:10:11.339
declarations, let's go back and we have
231

231

00:10:11.339  -->  00:10:13.350
an object declaration here object
232

232

00:10:13.350  -->  00:10:15.240
company communications. So let's try to
233

233

00:10:15.240  -->  00:10:16.710
use it and it doesn't really matter if
234

234

00:10:16.710  -->  00:10:18.450
we try to use it from another file or
235

235

00:10:18.450  -->  00:10:21.089
another module file, so let's try another
236

236

00:10:21.089  -->  00:10:24.470
file and we'll say company
237

237

00:10:24.470  -->  00:10:26.850
communications intelliJ is going to
238

238

00:10:26.850  -->  00:10:28.710
suggest that to us and the moment that I
239

239

00:10:28.710  -->  00:10:32.280
select it, we get an import statement
240

240

00:10:32.280  -->  00:10:35.190
added by IntelliJ. So now I can just go
241

241

00:10:35.190  -->  00:10:37.920
ahead and use it, get copyright line and
242

242

00:10:37.920  -->  00:10:44.910
if I run from here and of course I
243

243

00:10:44.910  -->  00:10:46.830
should print this out, otherwise this is
244

244

00:10:46.830  -->  00:10:48.959
pretty useless and running can't see
245

245

00:10:48.959  -->  00:10:55.050
anything, let's do this again. And now
246

246

00:10:55.050  -->  00:10:57.029
we'll see the print line from the top
247

247

00:10:57.029  -->  00:10:59.010
level function and also from we get our
248

248

00:10:59.010  -->  00:11:03.080
copyright line. So object declarations
249

249

00:11:03.080  -->  00:11:06.390
handled the same way as any other
250

250

00:11:06.390  -->  00:11:09.540
top-level declaration, it's just handled
251

251

00:11:09.540  -->  00:11:11.970
like any regular old class. Okay, so what
252

252

00:11:11.970  -->  00:11:16.350
about enums? We created an enum right here
253

253

00:11:16.350  -->  00:11:19.170
called department. Can we use the enum
254

254

00:11:19.170  -->  00:11:22.140
from another file? Well, you can, in fact
255

255

00:11:22.140  -->  00:11:24.330
you can import individual enums, but
256

256

00:11:24.330  -->  00:11:25.800
usually, you'll want to import the entire
257

257

00:11:25.800  -->  00:11:28.170
class, but for the sake of demonstration,
258

258

00:11:28.170  -->  00:11:32.250
let's just use and import the IT enum
259

259

00:11:32.250  -->  00:11:35.100
from the department enum in the company
260

260

00:11:35.100  -->  00:11:38.330
communication. So we can go import
261

261

00:11:38.330  -->  00:11:41.520
academy dot learn programming dot
262

262

00:11:41.520  -->  00:11:43.500
communications and we're just going to
263

263

00:11:43.500  -->  00:11:45.870
say department and then we're going to
264

264

00:11:45.870  -->  00:11:49.860
say we just want the IT enum and we
265

265

00:11:49.860  -->  00:11:51.420
don't get any errors here and then we
266

266

00:11:51.420  -->  00:11:54.780
can use the IT num now we can say print
267

267

00:11:54.780  -->  00:11:57.450
line IT dot get department info and
268

268

00:11:57.450  -->  00:12:02.880
if we run, we'll see that we get the
269

269

00:12:02.880  -->  00:12:05.280
information for the IT department, but
270

270

00:12:05.280  -->  00:12:06.990
let's go ahead and import the entire
271

271

00:12:06.990  -->  00:12:08.550
class because that's what you're
272

272

00:12:08.550  -->  00:12:10.140
normally going to do. So, of course you
273

273

00:12:10.140  -->  00:12:13.620
just go dot star here and then you can
274

274

00:12:13.620  -->  00:12:15.480
use them all, so we can say print line
275

275

00:12:15.480  -->  00:12:19.110
sales dot get department info etc and
276

276

00:12:19.110  -->  00:12:20.870
that's normally what you're going to do.
277

277

00:12:20.870  -->  00:12:24.450
Okay, now remember we mentioned type
278

278

00:12:24.450  -->  00:12:26.580
aliases and when we cover it those,
279

279

00:12:26.580  -->  00:12:28.260
we saw that it's a way of renaming a type.
280

280

00:12:28.260  -->  00:12:30.630
Well, you can also rename your imports
281

281

00:12:30.630  -->  00:12:33.960
and you can do that using the as keyword.
282

282

00:12:33.960  -->  00:12:35.940
Now, why would you want to do this?
283

283

00:12:35.940  -->  00:12:37.680
Well, this can be really helpful when you're
284

284

00:12:37.680  -->  00:12:40.590
importing from multiple sources and to
285

285

00:12:40.590  -->  00:12:42.060
imports are going to have the same name.
286

286

00:12:42.060  -->  00:12:44.460
So, for example if you're using more than
287

287

00:12:44.460  -->  00:12:47.130
one third-party library and let's say
288

288

00:12:47.130  -->  00:12:48.480
you're using some type of networking
289

289

00:12:48.480  -->  00:12:50.370
object and they both have a class name
290

290

00:12:50.370  -->  00:12:54.150
network, then you could rename one of
291

291

00:12:54.150  -->  00:12:56.730
those imports, so that you don't have to
292

292

00:12:56.730  -->  00:13:00.840
fully qualify the name in your code,
293

293

00:13:00.840  -->  00:13:02.310
when, you know so that compiler can
294

294

00:13:02.310  -->  00:13:04.470
distinguish between which network class
295

295

00:13:04.470  -->  00:13:06.360
you're actually trying to use. So let's
296

296

00:13:06.360  -->  00:13:08.820
use as with company communication, so we
297

297

00:13:08.820  -->  00:13:11.880
can see how this works. So let's say that
298

298

00:13:11.880  -->  00:13:14.850
instead of wanting to refer to company
299

299

00:13:14.850  -->  00:13:16.890
communications as company communications,
300

300

00:13:16.890  -->  00:13:19.110
here we want to refer to it as comm,
301

301

00:13:19.110  -->  00:13:21.630
maybe we just don't like typing. So all
302

302

00:13:21.630  -->  00:13:24.690
we have to do is say as comm. Now you'll
303

303

00:13:24.690  -->  00:13:26.400
notice as soon as we did that,
304

304

00:13:26.400  -->  00:13:29.010
IntelliJ change this line, because when we
305

305

00:13:29.010  -->  00:13:31.230
change that, it didn't recognize company
306

306

00:13:31.230  -->  00:13:33.570
communications. See, it doesn't recognize
307

307

00:13:33.570  -->  00:13:35.520
that anymore, because we've said in the
308

308

00:13:35.520  -->  00:13:37.800
code, we're going to refer to company
309

309

00:13:37.800  -->  00:13:39.840
communications as comm. So when we say,
310

310

00:13:39.840  -->  00:13:41.970
company communications here, the compiler
311

311

00:13:41.970  -->  00:13:43.890
is like I have no clue what that is.
312

312

00:13:43.890  -->  00:13:45.960
So what we have to do now is change this to
313

313

00:13:45.960  -->  00:13:48.960
comm and now everything's working,
314

314

00:13:48.960  -->  00:13:51.930
no errors and in our code we now have to
315

315

00:13:51.930  -->  00:13:54.570
refer to company communications as comm.
316

316

00:13:54.570  -->  00:14:00.900
Let's run and we'll see that we get our
317

317

00:14:00.900  -->  00:14:03.540
copyright line, no problem. Now you can
318

318

00:14:03.540  -->  00:14:07.110
use as with functions as well so let's
319

319

00:14:07.110  -->  00:14:09.210
use as with top-level and we'll
320

320

00:14:09.210  -->  00:14:10.920
say we want to refer to the top level
321

321

00:14:10.920  -->  00:14:14.280
function, as I don't know tp and once
322

322

00:14:14.280  -->  00:14:17.010
again, as soon as we do that, compiler no
323

323

00:14:17.010  -->  00:14:19.410
longer recognizes top level, so we'd have
324

324

00:14:19.410  -->  00:14:22.230
to change that to tp. Now, when we looked
325

325

00:14:22.230  -->  00:14:24.330
at extension functions, I said that you
326

326

00:14:24.330  -->  00:14:26.010
have to import them, if you want to use
327

327

00:14:26.010  -->  00:14:27.510
them outside the file, where they're
328

328

00:14:27.510  -->  00:14:30.180
defined. So what I've done is backing
329

329

00:14:30.180  -->  00:14:32.580
company communications, I copied in our
330

330

00:14:32.580  -->  00:14:35.880
upper first and last that we wrote when
331

331

00:14:35.880  -->  00:14:37.380
we were looking at extension functions.
332

332

00:14:37.380  -->  00:14:40.050
And now I'm going to try to use this in
333

333

00:14:40.050  -->  00:14:42.810
another module, so I'm going to go to
334

334

00:14:42.810  -->  00:14:46.430
another module file and I'm going to say
335

335

00:14:46.430  -->  00:14:54.000
print line a string to work with I'm
336

336

00:14:54.000  -->  00:14:56.120
going to go outside here and say dot and
337

337

00:14:56.120  -->  00:14:58.530
we'll get all the suggestions for this.
338

338

00:14:58.530  -->  00:15:03.630
And let's say when we go upper first and
339

339

00:15:03.630  -->  00:15:07.020
last and it can see it and the moment I
340

340

00:15:07.020  -->  00:15:08.880
select it, we get an import statement
341

341

00:15:08.880  -->  00:15:12.180
added. So it'll say import academy dot
342

342

00:15:12.180  -->  00:15:14.340
learn programming upper first and last.
343

343

00:15:14.340  -->  00:15:16.200
Now, I just did this in another module
344

344

00:15:16.200  -->  00:15:18.330
for variety, we could have done it from
345

345

00:15:18.330  -->  00:15:20.250
here and the same thing would happen,
346

346

00:15:20.250  -->  00:15:23.340
so, we could have said print line you know
347

347

00:15:23.340  -->  00:15:26.880
some string dot and if I go upper and I
348

348

00:15:26.880  -->  00:15:29.820
select, it I'm going to get upper first
349

349

00:15:29.820  -->  00:15:33.450
and last added here so once again to import
350

350

00:15:33.450  -->  00:15:35.400
extension functions which are top-level
351

351

00:15:35.400  -->  00:15:38.370
members, you just import the individual
352

352

00:15:38.370  -->  00:15:39.810
function by name.
353

353

00:15:39.810  -->  00:15:42.060
Now let's try out the as function with
354

354

00:15:42.060  -->  00:15:43.949
this, because this is quite long so let's
355

355

00:15:43.949  -->  00:15:48.449
say as I don't know ufal, we probably
356

356

00:15:48.449  -->  00:15:49.829
wouldn't do this because it makes the
357

357

00:15:49.829  -->  00:15:51.899
function name really cryptic. So
358

358

00:15:51.899  -->  00:15:54.930
of course, as before now the compiler says I
359

359

00:15:54.930  -->  00:15:56.459
don't know what this is and we'll change
360

360

00:15:56.459  -->  00:16:00.480
it to ufal and now it works. Now as I
361

361

00:16:00.480  -->  00:16:01.529
said, you wouldn't want to do this
362

362

00:16:01.529  -->  00:16:03.269
because it would make this too cryptic,
363

363

00:16:03.269  -->  00:16:05.939
so be careful when you're using as that
364

364

00:16:05.939  -->  00:16:08.670
you're not making things concise, but
365

365

00:16:08.670  -->  00:16:11.160
unreadable, there's a fine line you have
366

366

00:16:11.160  -->  00:16:13.559
to walk, so make sure that your codes
367

367

00:16:13.559  -->  00:16:16.019
still readable. Now obviously you can't
368

368

00:16:16.019  -->  00:16:18.930
use as with wild card imports, like you
369

369

00:16:18.930  -->  00:16:21.389
know we couldn't do something like let's
370

370

00:16:21.389  -->  00:16:25.529
take this out and put star and then say
371

371

00:16:25.529  -->  00:16:28.920
as that's obviously not going to work,
372

372

00:16:28.920  -->  00:16:31.499
because you can't rename all imported
373

373

00:16:31.499  -->  00:16:34.379
items to one thing, I mean that's obvious
374

374

00:16:34.379  -->  00:16:35.550
you would have figured that out on your
375

375

00:16:35.550  -->  00:16:38.720
own, but I thought I'd mention it anyway.
376

376

00:16:38.720  -->  00:16:41.519
Okay, that's it for this video I'll see you
377

377

00:16:41.519  -->  00:16:44.120
in the next one.
