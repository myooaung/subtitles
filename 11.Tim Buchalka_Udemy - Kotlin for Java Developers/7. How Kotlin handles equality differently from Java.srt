1
1

00:00:04,790  -->  00:00:06,870
Ok, so now we're going to look at an
2

2

00:00:06,870  -->  00:00:09,210
important behavioral difference between
3

3

00:00:09,210  -->  00:00:11,940
Java and Kotlin, and that's in the area
4

4

00:00:11,940  -->  00:00:14,820
of referential versus structural
5

5

00:00:14,820  -->  00:00:17,220
equality, so we're actually going to
6

6

00:00:17,220  -->  00:00:19,110
start out by looking at some Java code
7

7

00:00:19,110  -->  00:00:21,390
so that we can be sure that we're all on
8

8

00:00:21,390  -->  00:00:24,480
the same page. So, I'm not going to make
9

9

00:00:24,480  -->  00:00:26,640
you watch me type in the java code,
10

10

00:00:26,640  -->  00:00:28,259
because you already know Java, so I've
11

11

00:00:28,259  -->  00:00:31,230
already done this and basically I've
12

12

00:00:31,230  -->  00:00:33,720
created an employee class in Java. I'm in
13

13

00:00:33,720  -->  00:00:35,300
a Java project here and this is
14

14

00:00:35,300  -->  00:00:38,970
a .java file. I've created the equivalent
15

15

00:00:38,970  -->  00:00:41,430
employee class that we've been working
16

16

00:00:41,430  -->  00:00:44,520
with over in Kotlin so it has a name and
17

17

00:00:44,520  -->  00:00:46,740
ID and they're both private,
18

18

00:00:46,740  -->  00:00:48,870
the constructor just as a usual constructor.
19

19

00:00:48,870  -->  00:00:50,780
And then I've written a quick and dirty
20

20

00:00:50,780  -->  00:00:55,560
equals method to compare two objects and
21

21

00:00:55,560  -->  00:00:57,300
see if they're equal, obviously I should
22

22

00:00:57,300  -->  00:00:59,700
also be overwriting hash code etc., but
23

23

00:00:59,700  -->  00:01:01,990
this is just for demonstration purposes,
24

24

00:01:01,990  -->  00:01:04,830
so I've just done a very quick and dirty
25

25

00:01:04,830  -->  00:01:08,400
equals method. So now that you've seen
26

26

00:01:08,400  -->  00:01:09,990
this, I'm going to switch over to the
27

27

00:01:09,990  -->  00:01:13,550
main class, it's going to make use of the
28

28

00:01:13,550  -->  00:01:17,520
employee and so here all I'm doing is
29

29

00:01:17,520  -->  00:01:20,100
creating three instances of the employee
30

30

00:01:20,100  -->  00:01:22,530
class, the first one has a name of Mary
31

31

00:01:22,530  -->  00:01:24,750
and an ID of one and the second and
32

32

00:01:24,750  -->  00:01:28,409
third one both have a name John and ID
33

33

00:01:28,409  -->  00:01:30,900
of two and that's intentional, because
34

34

00:01:30,900  -->  00:01:32,850
we're going to be looking at equality.
35

35

00:01:32,850  -->  00:01:35,880
And then down here, I'm printing out the
36

36

00:01:35,880  -->  00:01:38,800
result of four conditions, in the first one,
37

37

00:01:38,800  -->  00:01:41,340
I'm comparing employee one to
38

38

00:01:41,340  -->  00:01:43,710
employee two, using the equals operator.
39

39

00:01:43,710  -->  00:01:47,430
And we're going to expect false because
40

40

00:01:47,430  -->  00:01:50,400
the equals operator is actually checking
41

41

00:01:50,400  -->  00:01:53,130
for referential equality which means
42

42

00:01:53,130  -->  00:01:55,409
that it's going to return true if the
43

43

00:01:55,409  -->  00:01:57,750
instance on the left hand side is the
44

44

00:01:57,750  -->  00:01:59,850
exact same instance as the one on the
45

45

00:01:59,850  -->  00:02:01,440
right hand side otherwise it's going to
46

46

00:02:01,440  -->  00:02:03,659
return false and employee one and
47

47

00:02:03,659  -->  00:02:05,820
employee two are two separate and
48

48

00:02:05,820  -->  00:02:08,159
distinct instances, so we expect false
49

49

00:02:08,159  -->  00:02:11,430
and the same goes for employee two
50

50

00:02:11,430  -->  00:02:14,939
equals employee three, because the
51

51

00:02:14,939  -->  00:02:17,099
employee two an employee three are not
52

52

00:02:17,099  -->  00:02:18,900
the exact same instance.
53

53

00:02:18,900  -->  00:02:21,100
However. when we call the
54

54

00:02:21,100  -->  00:02:23,670
.equals method, we're still going to
55

55

00:02:23,670  -->  00:02:26,040
expect false for the first one, because
56

56

00:02:26,040  -->  00:02:29,010
the two instances have different
57

57

00:02:29,010  -->  00:02:30,750
contents, in other words they're not
58

58

00:02:30,750  -->  00:02:34,050
structurally equal, but we're going to
59

59

00:02:34,050  -->  00:02:37,890
expect true when we call the .equals
60

60

00:02:37,890  -->  00:02:40,050
method to compare employee to an
61

61

00:02:40,050  -->  00:02:42,600
employee three, because they are structurally
62

62

00:02:42,600  -->  00:02:44,610
equal, both of the names are equal to
63

63

00:02:44,610  -->  00:02:47,280
John and both of the ID's are equal to 2.
64

64

00:02:47,280  -->  00:02:50,090
So, let's run this to make sure that our
65

65

00:02:50,090  -->  00:02:52,230
guesses are right, so we're expecting
66

66

00:02:52,230  -->  00:03:00,630
false, false, false, true. And that's what
67

67

00:03:00,630  -->  00:03:04,890
we get, false, false, false, true. So, in Java
68

68

00:03:04,890  -->  00:03:07,710
the equals operator is checking for
69

69

00:03:07,710  -->  00:03:10,800
referential equality and the .equals
70

70

00:03:10,800  -->  00:03:12,720
method is checking for structural
71

71

00:03:12,720  -->  00:03:15,420
equality and you probably already know
72

72

00:03:15,420  -->  00:03:17,340
this, but just in case I wanted to make
73

73

00:03:17,340  -->  00:03:19,440
sure we're all on the same page before
74

74

00:03:19,440  -->  00:03:23,500
we go over to Kotlin, so let's do that now.
75

75

00:03:23,500  -->  00:03:26,370
Ok, so we're back in Kotlin and let's
76

76

00:03:26,370  -->  00:03:28,350
go down to our employee class, obviously
77

77

00:03:28,350  -->  00:03:30,990
it looks a little different than Java
78

78

00:03:30,990  -->  00:03:33,300
and we have to write a lot more code in
79

79

00:03:33,300  -->  00:03:36,330
Java this class is actually doing what
80

80

00:03:36,330  -->  00:03:38,490
the Java class is doing except,
81

81

00:03:38,490  -->  00:03:40,500
of course it doesn't have the equals method
82

82

00:03:40,500  -->  00:03:42,540
So, let's implement the equals method now
83

83

00:03:42,540  -->  00:03:45,120
and I will make you or rather function I
84

84

00:03:45,120  -->  00:03:47,100
should be saying, however I will say this
85

85

00:03:47,100  -->  00:03:51,030
in Kotlin often when functions or
86

86

00:03:51,030  -->  00:03:54,660
members of classes they're called methods.
87

87

00:03:54,660  -->  00:03:57,270
Honestly, the terms tend to be used
88

88

00:03:57,270  -->  00:03:59,520
interchangeably, but if a function is
89

89

00:03:59,520  -->  00:04:01,470
actually a member function then it's
90

90

00:04:01,470  -->  00:04:03,360
often referred to as a method, I'll use
91

91

00:04:03,360  -->  00:04:05,250
both terms because I have one foot in
92

92

00:04:05,250  -->  00:04:08,040
Java and one foot in Kotlin, so it'll be
93

93

00:04:08,040  -->  00:04:10,200
wherever my brain is at the time,
94

94

00:04:10,200  -->  00:04:13,740
calling the equals function a method
95

95

00:04:13,740  -->  00:04:16,320
but here actually isn't incorrect, so I'm
96

96

00:04:16,320  -->  00:04:18,239
going to make you watch me type in the
97

97

00:04:18,239  -->  00:04:20,010
equals method, because you're learning
98

98

00:04:20,010  -->  00:04:22,080
Kotlin and this is another good way and
99

99

00:04:22,080  -->  00:04:24,780
code along with me. Now we haven't
100

100

00:04:24,780  -->  00:04:27,090
covered functions yet, so bear with me.
101

101

00:04:27,090  -->  00:04:28,590
I'm going to start with the override
102

102

00:04:28,590  -->  00:04:31,430
keyword because we're overriding a mess
103

103

00:04:31,430  -->  00:04:34,820
in the superclass for this class fun,
104

104

00:04:34,820  -->  00:04:36,770
which you've seen before, which is what
105

105

00:04:36,770  -->  00:04:38,300
we use to declare a function and then
106

106

00:04:38,300  -->  00:04:40,640
the function name and then I'm going to
107

107

00:04:40,640  -->  00:04:43,850
specify the function parameters. So in
108

108

00:04:43,850  -->  00:04:46,010
this case, we're going to take an object
109

109

00:04:46,010  -->  00:04:47,990
of type any don't worry about this
110

110

00:04:47,990  -->  00:04:50,720
question mark and the function is going
111

111

00:04:50,720  -->  00:04:55,100
to return a type of boolean so right now
112

112

00:04:55,100  -->  00:04:56,570
we have an error, because the function is
113

113

00:04:56,570  -->  00:04:59,330
not returning anything, so I'm going to
114

114

00:04:59,330  -->  00:05:01,070
make this a really really naive
115

115

00:05:01,070  -->  00:05:03,530
implementation of equals just so you
116

116

00:05:03,530  -->  00:05:05,330
don't have to see me type in a lot of
117

117

00:05:05,330  -->  00:05:09,440
stuff, I'm just going to say if obj is an
118

118

00:05:09,440  -->  00:05:12,320
employee so that's basically doing an
119

119

00:05:12,320  -->  00:05:15,260
instance of, then I'm going to return
120

120

00:05:15,260  -->  00:05:19,310
true if the name of this instance is the
121

121

00:05:19,310  -->  00:05:22,850
same as the name of the object that was
122

122

00:05:22,850  -->  00:05:28,910
passed in and the ID of this instance is
123

123

00:05:28,910  -->  00:05:31,300
the same name as the ID that was passed in,
124

124

00:05:31,300  -->  00:05:33,500
now that's a really naive
125

125

00:05:33,500  -->  00:05:36,230
implementation, but it'll work,
126

126

00:05:36,230  -->  00:05:38,660
it'll serve our purposes. Of course, I've also
127

127

00:05:38,660  -->  00:05:41,690
got to return false here in the case
128

128

00:05:41,690  -->  00:05:46,580
that the is test fails so this is doing
129

129

00:05:46,580  -->  00:05:48,920
the same thing it's not as safe, well
130

130

00:05:48,920  -->  00:05:50,840
actually it is because we're using
131

131

00:05:50,840  -->  00:05:53,360
something called a safe-safe type here
132

132

00:05:53,360  -->  00:05:55,520
and we'll get into that later, but
133

133

00:05:55,520  -->  00:05:57,200
basically this is checking for
134

134

00:05:57,200  -->  00:06:00,230
structural equality, so with that in mind
135

135

00:06:00,230  -->  00:06:02,540
now that we have our equals function,
136

136

00:06:02,540  -->  00:06:05,750
let's do the same test that we did over
137

137

00:06:05,750  -->  00:06:08,990
in Java. So I'm going to go back here and
138

138

00:06:08,990  -->  00:06:10,520
I'm going to put this at the top of the
139

139

00:06:10,520  -->  00:06:12,980
method, just so we can see it right away.
140

140

00:06:12,980  -->  00:06:17,870
And I'm going to say val let's call it
141

141

00:06:17,870  -->  00:06:20,330
employee, we already have an employee
142

142

00:06:20,330  -->  00:06:22,310
on and stuff, so I'll just call,
143

143

00:06:22,310  -->  00:06:25,580
I'll stall them out val employee one equals
144

144

00:06:25,580  -->  00:06:30,410
employee and we'll say Mary and we'll
145

145

00:06:30,410  -->  00:06:33,320
give her an idea of one, we'll create our
146

146

00:06:33,320  -->  00:06:37,990
second employee John,
147

147

00:06:37,990  -->  00:06:41,149
and he has an ID of two and then
148

148

00:06:41,149  -->  00:06:43,099
of course, we want the exact same thing for
149

149

00:06:43,099  -->  00:06:47,719
our third employee -John,
150

150

00:06:47,719  -->  00:06:52,099
and he has an ID of two and now we want
151

151

00:06:52,099  -->  00:06:54,080
to test our for condition, so we'll
152

152

00:06:54,080  -->  00:07:01,219
print employee one equals employee two,
153

153

00:07:01,219  -->  00:07:08,110
we'll print employee two equals employee three and
154

154

00:07:08,110  -->  00:07:10,849
then we'll use the .equals method
155

155

00:07:10,849  -->  00:07:12,800
like we did over in Java, so we'll do
156

156

00:07:12,800  -->  00:07:20,469
employeeone.equals, employee two and
157

157

00:07:20,469  -->  00:07:28,000
employeetwo.equals(employeethree).
158

158

00:07:28,000  -->  00:07:30,409
Ok, so these were the same test that we did in
159

159

00:07:30,409  -->  00:07:33,020
Java. Now, in Java we got false for the
160

160

00:07:33,020  -->  00:07:34,999
first one, because they're not the exact
161

161

00:07:34,999  -->  00:07:36,770
same instance, we got false for the
162

162

00:07:36,770  -->  00:07:38,749
second one, because they're not the exact
163

163

00:07:38,749  -->  00:07:42,080
same instance, for the first .equals
164

164

00:07:42,080  -->  00:07:43,599
we got false, because they're not
165

165

00:07:43,599  -->  00:07:45,889
structurally the same either, the two
166

166

00:07:45,889  -->  00:07:48,259
instances don't contain the same values
167

167

00:07:48,259  -->  00:07:50,839
for all the fields, but we got true for
168

168

00:07:50,839  -->  00:07:53,449
the fourth one, because these two
169

169

00:07:53,449  -->  00:07:56,749
instances are structurally equal.
170

170

00:07:56,749  -->  00:07:59,209
So, let's go ahead and run this and see what
171

171

00:07:59,209  -->  00:08:01,909
we get printed out and I think I'm going
172

172

00:08:01,909  -->  00:08:04,129
to uncomment everything that we have
173

173

00:08:04,129  -->  00:08:06,529
here or comment it rather, so that we'll
174

174

00:08:06,529  -->  00:08:11,059
just see the one thing printed. Alright,
175

175

00:08:11,059  -->  00:08:16,669
so let's go ahead and run. Ah! we didn't
176

176

00:08:16,669  -->  00:08:18,319
get the same thing we got in Java,
177

177

00:08:18,319  -->  00:08:21,110
in Java, we got false, false, false, true but
178

178

00:08:21,110  -->  00:08:25,249
here, we're getting true for the second test.
179

179

00:08:25,249  -->  00:08:28,789
So the equals operator is when it
180

180

00:08:28,789  -->  00:08:31,219
compares employeetwo and employeethree.
181

181

00:08:31,219  -->  00:08:32,930
It's telling us that oh those two are the
182

182

00:08:32,930  -->  00:08:36,139
same. So here is a very important
183

183

00:08:36,139  -->  00:08:38,630
difference in behavior between Kotlin
184

184

00:08:38,630  -->  00:08:42,139
and Java, in Kotlin the equals operator
185

185

00:08:42,139  -->  00:08:45,439
checks for structural equality when it's
186

186

00:08:45,439  -->  00:08:47,180
comparing instances, we're actually
187

187

00:08:47,180  -->  00:08:50,060
repeating ourselves here, because
188

188

00:08:50,060  -->  00:08:52,730
this operator when you're doing a
189

189

00:08:52,730  -->  00:08:54,920
comparison between instances actually
190

190

00:08:54,920  -->  00:08:57,170
just defers to the dot equals method.
191

191

00:08:57,170  -->  00:09:00,110
And so, we're actually doing the same thing
192

192

00:09:00,110  -->  00:09:03,080
twice and because this is Kotlin,
193

193

00:09:03,080  -->  00:09:06,650
we would want to write it like that because
194

194

00:09:06,650  -->  00:09:09,110
it's more concise. So of course,
195

195

00:09:09,110  -->  00:09:10,940
that raises the question, how do we check for
196

196

00:09:10,940  -->  00:09:13,370
referential equality? I mean this is all
197

197

00:09:13,370  -->  00:09:15,200
great we can now check for structural
198

198

00:09:15,200  -->  00:09:17,300
equality just by using the equals
199

199

00:09:17,300  -->  00:09:19,070
operator, but how about referential
200

200

00:09:19,070  -->  00:09:21,410
equality? Well, that's where the triple
201

201

00:09:21,410  -->  00:09:24,380
equals operator comes in, so instead of
202

202

00:09:24,380  -->  00:09:26,300
using a double equals, I'm just going to
203

203

00:09:26,300  -->  00:09:28,160
copy these two copy and paste these two
204

204

00:09:28,160  -->  00:09:33,410
lines here, we're just going to add
205

205

00:09:33,410  -->  00:09:37,760
equals to each of these and now we are
206

206

00:09:37,760  -->  00:09:40,760
checking for referential equality here.
207

207

00:09:40,760  -->  00:09:42,500
So, if we run now we're going to expect
208

208

00:09:42,500  -->  00:09:44,650
to see the same results we saw in Java.
209

209

00:09:45,900  -->  00:09:50,150
And we do, so we're now getting false for
210

210

00:09:50,150  -->  00:09:53,029
the first three conditions and true for the last one.
211

211

00:09:53,029  -->  00:09:55,280
So, again this is a really really
212

212

00:09:55,280  -->  00:09:56,690
important difference that you have to
213

213

00:09:56,690  -->  00:09:59,540
know about, because if you're used to
214

214

00:09:59,540  -->  00:10:02,540
checking for referential equality using
215

215

00:10:02,540  -->  00:10:04,130
the equals operator, you're going to have
216

216

00:10:04,130  -->  00:10:06,900
to remember that you can't do that in Kotlin.
217

217

00:10:06,900  -->  00:10:08,300
That in Kotlin, this is equivalent
218

218

00:10:08,300  -->  00:10:10,540
to calling the .equals function and
219

219

00:10:10,540  -->  00:10:13,070
you'll want to use the triple equals
220

220

00:10:13,070  -->  00:10:16,400
when you want to check for referential equality.
221

221

00:10:16,400  -->  00:10:19,190
So, let's have another variable
222

222

00:10:19,190  -->  00:10:22,130
called employeefour and we'll assign it
223

223

00:10:22,130  -->  00:10:25,750
employee two, so now these two should be
224

224

00:10:25,750  -->  00:10:28,370
referentially equal, because they
225

225

00:10:28,370  -->  00:10:30,470
contain the reference to the same
226

226

00:10:30,470  -->  00:10:32,959
instance, so if we now use triple equals
227

227

00:10:32,959  -->  00:10:40,100
to compare them, this should be true.
228

228

00:10:40,100  -->  00:10:45,500
Let's give it a shot, and we do get true.
229

229

00:10:45,500  -->  00:10:48,920
So when the instance on the left hand
230

230

00:10:48,920  -->  00:10:51,380
side is the exact same instance as the
231

231

00:10:51,380  -->  00:10:53,000
instance on the right hand side,
232

232

00:10:53,000  -->  00:10:54,980
the triple equals operator will return true.
233

233

00:10:54,980  -->  00:10:58,940
Now, how about not equals? Well, there are
234

234

00:10:58,940  -->  00:11:02,450
not equals and not double equals, I guess.
235

235

00:11:02,450  -->  00:11:04,010
That's the equivalent of the
236

236

00:11:04,010  -->  00:11:07,970
triple equals to use and so let's give
237

237

00:11:07,970  -->  00:11:12,290
those a shot. Let's see if employeefour
238

238

00:11:12,290  -->  00:11:18,530
is not equal to employeetwo. And what
239

239

00:11:18,530  -->  00:11:20,210
else can we check? Well let's check
240

240

00:11:20,210  -->  00:11:26,840
whether employee four is not exactly the
241

241

00:11:26,840  -->  00:11:31,730
same as employee two. And, we'll do one
242

242

00:11:31,730  -->  00:11:33,820
more or a couple more.
243

243

00:11:33,820  -->  00:11:39,350
We'll try employeetwo not equal to
244

244

00:11:39,350  -->  00:11:47,140
employeethree and we'll try employeetwo
245

245

00:11:47,140  -->  00:11:51,950
not double equal to employeethree.
246

246

00:11:51,950  -->  00:11:53,900
So, let's look at these and see what we'd expect.
247

247

00:11:53,900  -->  00:11:56,030
Well, employeefour not equal to
248

248

00:11:56,030  -->  00:11:58,430
employeetwo should be false because we
249

249

00:11:58,430  -->  00:12:00,160
know they're exactly the same instance,
250

250

00:12:00,160  -->  00:12:04,070
employeefour not referentially equal to
251

251

00:12:04,070  -->  00:12:06,140
employeetwo would also be false, because
252

252

00:12:06,140  -->  00:12:08,840
they are the same instance, so both of
253

253

00:12:08,840  -->  00:12:12,300
these are going to fail. Now is employeetwo
254

254

00:12:12,300  -->  00:12:14,000
not equal to employeethree?
255

255

00:12:14,000  -->  00:12:16,430
This should also return false because this is
256

256

00:12:16,430  -->  00:12:19,250
checking for structural non equality and
257

257

00:12:19,250  -->  00:12:21,100
they're structurally equal.
258

258

00:12:21,100  -->  00:12:24,710
However, employeetwo not referentially equal to
259

259

00:12:24,710  -->  00:12:26,360
employeethree should return true,
260

260

00:12:26,360  -->  00:12:28,670
because employeetwo and employeethree
261

261

00:12:28,670  -->  00:12:30,530
are distinct instances, so in this case
262

262

00:12:30,530  -->  00:12:33,410
we're expecting false, false, false and
263

263

00:12:33,410  -->  00:12:40,730
then true. So let's run and that's what
264

264

00:12:40,730  -->  00:12:42,200
we see for the last four conditions
265

265

00:12:42,200  -->  00:12:44,700
false, false, false and true.
266

266

00:12:44,700  -->  00:12:46,880
Alright, what does this mean? Well, in Kotlin you
267

267

00:12:46,880  -->  00:12:48,900
never have to explicitly call the
268

268

00:12:48,900  -->  00:12:50,930
.equals method when you want to test
269

269

00:12:50,930  -->  00:12:52,820
whether two instances contain the same
270

270

00:12:52,820  -->  00:12:54,440
values, which means whether they're
271

271

00:12:54,440  -->  00:12:56,660
structurally equal, you can just use the
272

272

00:12:56,660  -->  00:12:59,000
equals operator. And when you want to
273

273

00:12:59,000  -->  00:13:02,600
test whether two instances are in fact
274

274

00:13:02,600  -->  00:13:04,100
the same instance, you use the triple
275

275

00:13:04,100  -->  00:13:06,830
equals operator and keep in mind that
276

276

00:13:06,830  -->  00:13:09,050
you can use not equals and not equals
277

277

00:13:09,050  -->  00:13:11,990
equals to test non equality.
278

278

00:13:11,990  -->  00:13:13,300
So, that's it for this video.
279

279

00:13:13,300  -->  00:13:14,570
This is an important difference between
280

280

00:13:14,570  -->  00:13:17,240
Kotlin and Java so keep this in mind as
281

281

00:13:17,240  -->  00:13:20,269
you're working with Kotlin.
