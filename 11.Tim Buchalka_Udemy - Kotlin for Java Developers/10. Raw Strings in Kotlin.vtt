WEBVTT
1
1

00:00:04.740  -->  00:00:06.850
So in this video, we're going to discuss
2

2

00:00:06.850  -->  00:00:09.370
another new string featuring Kotlin
3

3

00:00:09.370  -->  00:00:12.490
called raw strings or triple quoted
4

4

00:00:12.490  -->  00:00:15.549
strings, you'll hear them refer to using
5

5

00:00:15.549  -->  00:00:18.279
both terms. Now, when you use triple
6

6

00:00:18.279  -->  00:00:20.110
quoted strings, you don't have to escape
7

7

00:00:20.110  -->  00:00:23.019
characters, they can also contain line
8

8

00:00:23.019  -->  00:00:25.119
breaks, but you can't use special
9

9

00:00:25.119  -->  00:00:28.029
characters like tab and newline
10

10

00:00:28.029  -->  00:00:30.160
characters. So let's look at an example.
11

11

00:00:30.160  -->  00:00:32.559
I'll just close off the console for a minute.
12

12

00:00:32.559  -->  00:00:34.059
One example where you might want to use
13

13

00:00:34.059  -->  00:00:36.370
this is if you're on a window system and
14

14

00:00:36.370  -->  00:00:38.290
you have to type file paths, as we know
15

15

00:00:38.290  -->  00:00:41.800
they can look really ugliest strings if we go val
16

16

00:00:41.800  -->  00:00:46.210
file path equals and we go see, you have
17

17

00:00:46.210  -->  00:00:48.160
to escape the back slashes, you know
18

18

00:00:48.160  -->  00:00:52.809
somedir, somedir2, the back slashes have
19

19

00:00:52.809  -->  00:00:55.390
to be escaped, otherwise if we go like
20

20

00:00:55.390  -->  00:01:00.730
this, we're going to get a little morning
21

21

00:01:00.730  -->  00:01:02.410
from IntelliJ saying, hey you're
22

22

00:01:02.410  -->  00:01:06.190
illegally escaping this etc. So we could
23

23

00:01:06.190  -->  00:01:08.320
do this as a triple quoted string, so
24

24

00:01:08.320  -->  00:01:11.770
instead we'd add two quotes, add two
25

25

00:01:11.770  -->  00:01:14.740
quotes and now we actually have a valid
26

26

00:01:14.740  -->  00:01:17.259
file path and we don't have to use the
27

27

00:01:17.259  -->  00:01:19.869
escape character here, we don't have to
28

28

00:01:19.869  -->  00:01:22.660
escape the back slashes so that's one
29

29

00:01:22.660  -->  00:01:25.060
use of triple quoted strings or raw
30

30

00:01:25.060  -->  00:01:27.220
strings, when you have a bunch of stuff
31

31

00:01:27.220  -->  00:01:28.869
you have to escape, if you want your
32

32

00:01:28.869  -->  00:01:30.550
string to look nicer, you can use a
33

33

00:01:30.550  -->  00:01:33.610
triple quoted string instead. Another use
34

34

00:01:33.610  -->  00:01:36.580
is when you have a string that you have
35

35

00:01:36.580  -->  00:01:39.220
to break up over several lines and you
36

36

00:01:39.220  -->  00:01:40.929
can do that with triple quoted strings
37

37

00:01:40.929  -->  00:01:43.119
quite easily, so let's try that I'm going
38

38

00:01:43.119  -->  00:01:46.020
to get rid of this definition here and
39

39

00:01:46.020  -->  00:01:54.459
we'll say val nursery rhyme equals and
40

40

00:01:54.459  -->  00:02:01.239
we'll do a triple string Humpty Dumpty
41

41

00:02:01.239  -->  00:02:03.910
sat on the wall and we can just hit
42

42

00:02:03.910  -->  00:02:05.530
return here now, we don't have to do
43

43

00:02:05.530  -->  00:02:06.569
anything else.
44

44

00:02:06.569  -->  00:02:12.520
Humpty Dumpty had a great fall, all the king's
45

45

00:02:12.520  -->  00:02:17.000
horses and all the king's men. I don't
46

46

00:02:17.000  -->  00:02:18.800
know if that's capital or not, but couldn't
47

47

00:02:18.800  -->  00:02:23.930
put Humpty together again.
48

48

00:02:23.930  -->  00:02:26.210
And we'll end up with a trip- ended with
49

49

00:02:26.210  -->  00:02:28.510
a triple quote and now we'll see that
50

50

00:02:28.510  -->  00:02:31.130
Kotlin understands this, it's not
51

51

00:02:31.130  -->  00:02:32.960
giving us any errors, even though we've
52

52

00:02:32.960  -->  00:02:35.030
broken it over several lines and we're
53

53

00:02:35.030  -->  00:02:36.380
not concatenating at all.
54

54

00:02:36.380  -->  00:02:45.850
So let's print that out, we'll run and
55

55

00:02:45.850  -->  00:02:47.990
you'll see that it printed it out and
56

56

00:02:47.990  -->  00:02:50.600
also included the new lines and that's
57

57

00:02:50.600  -->  00:02:52.940
one reason why you can't include where
58

58

00:02:52.940  -->  00:02:54.440
you don't even need to include new line
59

59

00:02:54.440  -->  00:02:56.270
characters within triple quoted strings,
60

60

00:02:56.270  -->  00:02:59.090
you just have to use the actual newline
61

61

00:02:59.090  -->  00:03:01.400
character by hitting enter and it will
62

62

00:03:01.400  -->  00:03:03.110
understand that within a triple quoted
63

63

00:03:03.110  -->  00:03:04.970
string. Now you're probably looking at
64

64

00:03:04.970  -->  00:03:06.500
this and saying well that's all well and
65

65

00:03:06.500  -->  00:03:08.480
good, but you know look at this
66

66

00:03:08.480  -->  00:03:10.280
indentation, we don't want that in our
67

67

00:03:10.280  -->  00:03:13.100
code. So fortunately, there's a way to get
68

68

00:03:13.100  -->  00:03:16.120
around that and what you have to do is
69

69

00:03:16.120  -->  00:03:20.390
use a function called trim margin. Now,
70

70

00:03:20.390  -->  00:03:22.760
with trim margin what you do is you pass
71

71

00:03:22.760  -->  00:03:25.280
it a character or you can use the
72

72

00:03:25.280  -->  00:03:28.190
default margin character and then the
73

73

00:03:28.190  -->  00:03:31.880
character that you pass it, you append to
74

74

00:03:31.880  -->  00:03:34.520
the beginning of every line, I just
75

75

00:03:34.520  -->  00:03:36.410
noticed I have a typo here, so I'll add
76

76

00:03:36.410  -->  00:03:39.260
thet t, so for example if we want it to
77

77

00:03:39.260  -->  00:03:41.330
use the asterisks as our trim margin
78

78

00:03:41.330  -->  00:03:44.410
character, we'd say dot trim margin and
79

79

00:03:44.410  -->  00:03:47.630
then we just pass the asterisks in, but
80

80

00:03:47.630  -->  00:03:50.990
now we have to append asterisks in front
81

81

00:03:50.990  -->  00:03:54.470
of all the individual lines, but now we
82

82

00:03:54.470  -->  00:03:57.800
can indent all of these, so we can give
83

83

00:03:57.800  -->  00:04:00.680
them the proper indentation and this
84

84

00:04:00.680  -->  00:04:03.290
should be double quotes, not single
85

85

00:04:03.290  -->  00:04:04.790
quote, so we're actually passing the
86

86

00:04:04.790  -->  00:04:07.820
character as a string and now when
87

87

00:04:07.820  -->  00:04:10.460
Kotlin parses this string if- when it
88

88

00:04:10.460  -->  00:04:13.700
sees the margin character, it will trim
89

89

00:04:13.700  -->  00:04:15.890
everything up to and including the
90

90

00:04:15.890  -->  00:04:18.560
margin character, so it's going to trim
91

91

00:04:18.560  -->  00:04:22.400
off all this extra space and the margin
92

92

00:04:22.400  -->  00:04:24.770
character. So now if we run, we'll see the
93

93

00:04:24.770  -->  00:04:26.030
same thing,
94

94

00:04:26.030  -->  00:04:32.330
we won't see stuff indented and we have
95

95

00:04:32.330  -->  00:04:34.190
the proper indentation in our code.
96

96

00:04:34.190  -->  00:04:35.810
Now, if we didn't have this margin character
97

97

00:04:35.810  -->  00:04:39.530
if I just remove this for a minute, let's
98

98

00:04:39.530  -->  00:04:46.100
see what it does now. So now you'll see
99

99

00:04:46.100  -->  00:04:48.919
it's not doing any trimming, so we get
100

100

00:04:48.919  -->  00:04:52.010
all the extra space. So I'm going to use
101

101

00:04:52.010  -->  00:04:55.430
ctrl Z to bring back my trim margin, now
102

102

00:04:55.430  -->  00:04:58.010
if you don't specify a character here,
103

103

00:04:58.010  -->  00:04:59.690
the default character is the pipe
104

104

00:04:59.690  -->  00:05:02.330
character, so we'd have to change all of
105

105

00:05:02.330  -->  00:05:11.740
these to pipes and if we run again,
106

106

00:05:11.740  -->  00:05:13.880
we'll see that we get all the space
107

107

00:05:13.880  -->  00:05:16.880
trimmed. So the character that's used as
108

108

00:05:16.880  -->  00:05:21.020
a trim character will trim everything up
109

109

00:05:21.020  -->  00:05:25.130
to and including the trim character that
110

110

00:05:25.130  -->  00:05:27.380
we've passed in or the default and we
111

111

00:05:27.380  -->  00:05:28.940
don't need one here, because we don't
112

112

00:05:28.940  -->  00:05:31.160
have any any space to trim in the first
113

113

00:05:31.160  -->  00:05:34.310
line, we only need it on lines where
114

114

00:05:34.310  -->  00:05:36.620
there's a whole bunch of leading blanks.
115

115

00:05:36.620  -->  00:05:38.960
Now, of course you can also use string
116

116

00:05:38.960  -->  00:05:41.300
templates within triple quoted strings,
117

117

00:05:41.300  -->  00:05:46.430
so let's try that, we'll just say egg
118

118

00:05:46.430  -->  00:05:51.110
name equals Humpty, Humpty let's say and
119

119

00:05:51.110  -->  00:05:56.150
then we can use star egg names
120

120

00:05:56.150  -->  00:06:07.370
wherever Humpty appears. And if we run
121

121

00:06:07.370  -->  00:06:13.820
now, look at the same result so you can
122

122

00:06:13.820  -->  00:06:17.510
combine string templates and triple
123

123

00:06:17.510  -->  00:06:20.060
quoted strings, so that completes our
124

124

00:06:20.060  -->  00:06:21.440
look at some of the basic differences
125

125

00:06:21.440  -->  00:06:24.320
between Java and Kotlin, now coming from
126

126

00:06:24.320  -->  00:06:26.419
Java, you might find it strange working
127

127

00:06:26.419  -->  00:06:28.490
with Kotlin at first and your first
128

128

00:06:28.490  -->  00:06:31.100
crack at code might look more like Java
129

129

00:06:31.100  -->  00:06:33.830
than Kotlin, it's usually going to be a
130

130

00:06:33.830  -->  00:06:36.020
lot more verbose and it has to be, but
131

131

00:06:36.020  -->  00:06:38.870
you'll get better with practice, I find
132

132

00:06:38.870  -->  00:06:39.650
that the ID
133

133

00:06:39.650  -->  00:06:41.900
can really help you out with this, when I
134

134

00:06:41.900  -->  00:06:44.449
first started using Kotlin I was doing
135

135

00:06:44.449  -->  00:06:46.160
what everybody else does and often my
136

136

00:06:46.160  -->  00:06:48.530
statements were more verbose, so pay
137

137

00:06:48.530  -->  00:06:51.650
attention to what the IDE is telling you,
138

138

00:06:51.650  -->  00:06:53.600
look for things that are grayed out take
139

139

00:06:53.600  -->  00:06:55.699
a look at the lightning bulb if it comes
140

140

00:06:55.699  -->  00:06:57.020
up. A lot of the Lightning involved
141

141

00:06:57.020  -->  00:06:58.820
suggestions you don't really have to do,
142

142

00:06:58.820  -->  00:07:01.160
but take a look. The other thing that I
143

143

00:07:01.160  -->  00:07:03.860
would do sometimes is if I wasn't sure
144

144

00:07:03.860  -->  00:07:06.350
whether I needed something I just delete
145

145

00:07:06.350  -->  00:07:08.570
it and see if I got an error and you'd
146

146

00:07:08.570  -->  00:07:10.160
be amazed at what you can learn by doing
147

147

00:07:10.160  -->  00:07:12.889
that. So you might want to start with the
148

148

00:07:12.889  -->  00:07:14.660
most verbose line, because that's
149

149

00:07:14.660  -->  00:07:16.490
probably what your first thought will be.
150

150

00:07:16.490  -->  00:07:18.289
And then say oh do I really need the
151

151

00:07:18.289  -->  00:07:20.570
data type here? Well, I'll just delete it
152

152

00:07:20.570  -->  00:07:22.699
and then see if I get an error and you
153

153

00:07:22.699  -->  00:07:24.830
can learn really quickly that way what
154

154

00:07:24.830  -->  00:07:28.310
you have to specify and when. Also keep
155

155

00:07:28.310  -->  00:07:31.099
in mind that many of the Kotlin changes
156

156

00:07:31.099  -->  00:07:33.830
are just syntactical sugar, so under the
157

157

00:07:33.830  -->  00:07:37.220
covers the verbose way and the Kotlin way
158

158

00:07:37.220  -->  00:07:39.380
are often compiled to the exact same
159

159

00:07:39.380  -->  00:07:41.509
thing, so the fact that you're using the
160

160

00:07:41.509  -->  00:07:43.760
verbose way doesn't necessarily mean
161

161

00:07:43.760  -->  00:07:45.560
that your application is going to be
162

162

00:07:45.560  -->  00:07:47.990
worse, it's going to perform badly or
163

163

00:07:47.990  -->  00:07:49.820
anything like that, it just means that
164

164

00:07:49.820  -->  00:07:51.710
you're not really writing at the Kotlin
165

165

00:07:51.710  -->  00:07:53.419
way and you'll get better with that in
166

166

00:07:53.419  -->  00:07:56.389
time. So take your time, practice and
167

167

00:07:56.389  -->  00:07:58.550
you'll eventually do it the Kotlin way
168

168

00:07:58.550  -->  00:08:00.440
first and then when you go back to Java
169

169

00:08:00.440  -->  00:08:02.780
you'll notice how much more code you
170

170

00:08:02.780  -->  00:08:04.720
have to write to do the same thing.
171

171

00:08:04.720  -->  00:08:08.919
Anyway, I'll see you in the next video.
