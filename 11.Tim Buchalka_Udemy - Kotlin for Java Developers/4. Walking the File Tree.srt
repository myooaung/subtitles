1
00:00:05,530 --> 00:00:12,490
Conlin has added extension functions to the file class that can help us walk a file tree and we'll take

2
00:00:12,490 --> 00:00:14,380
a look at them in this video.

3
00:00:14,500 --> 00:00:22,450
The walk function accepts a direction that specifies whether you want to walk up a tree or down a tree

4
00:00:22,900 --> 00:00:27,490
to walk bottom up function walks up a file tree.

5
00:00:27,490 --> 00:00:33,710
And when you walk up a file tree directories are visited after their files.

6
00:00:33,820 --> 00:00:40,690
The walk down function walks down a file tree and in that case the directories are visited before other

7
00:00:40,690 --> 00:00:41,850
files.

8
00:00:41,980 --> 00:00:50,710
So you can use the walk bottom up function or the walk down function or you can use walk and provide

9
00:00:50,710 --> 00:00:52,400
the direction that you want to go.

10
00:00:52,630 --> 00:00:59,200
If you're familiar with Java in this area Java has a file visitor class that does a similar thing to

11
00:00:59,350 --> 00:01:06,400
what Katlin has so we're going to just code a quick example to show how to walk a tree in cotland and

12
00:01:06,400 --> 00:01:12,850
we're going to use the walk top down function to print the names of all the files in a file train we're

13
00:01:12,850 --> 00:01:16,770
just going to use our project directory as the tree.

14
00:01:16,780 --> 00:01:20,370
So we'll start at the project's working directory.

15
00:01:20,710 --> 00:01:28,570
So let's go ahead and we'll say file and here I'm just going to use dot because I want to start at the

16
00:01:28,570 --> 00:01:33,370
working directory which means the directory we're currently in because that's the default directory

17
00:01:33,370 --> 00:01:39,640
when your application runs it runs with the working directory as the current directory.

18
00:01:39,790 --> 00:01:49,960
And analysts say walk walk down and then for each file that we come across We'll just print printer.

19
00:01:50,890 --> 00:01:54,790
So here it will be each file in the tree.

20
00:01:54,790 --> 00:01:58,600
Now the walk functions all return a sequence of files.

21
00:01:58,600 --> 00:02:04,700
So here we're saying that we're going to get a sequence of files back from walk top down.

22
00:02:04,720 --> 00:02:12,490
So each file is going to be evaluated one at a time and we're going to save that for each item in the

23
00:02:12,490 --> 00:02:15,910
sequence which in this case is a file print it.

24
00:02:15,940 --> 00:02:17,080
So let's go ahead and run

25
00:02:22,080 --> 00:02:26,670
and heres our files so we're starting up at.

26
00:02:26,700 --> 00:02:33,030
And then of course is a whole bunch of files under here that we normally don't see because they have

27
00:02:33,030 --> 00:02:39,810
to do with ideas project files and we don't need to know about them and here are some build files and

28
00:02:39,810 --> 00:02:41,690
then we actually have our source files.

29
00:02:41,730 --> 00:02:43,670
And this is our project file.

30
00:02:43,770 --> 00:02:51,030
And if you look at this you can see that because we're walking top down the directories are visited

31
00:02:51,030 --> 00:02:53,110
before the files.

32
00:02:53,760 --> 00:02:59,790
So here you'll see we come into the source directory then Source Academie etc. and only after we've

33
00:03:00,180 --> 00:03:07,680
visited all of the directories and the Java code directory here then we visit the classes in the Java

34
00:03:07,680 --> 00:03:13,200
code directory and there's just one or the file rather There's just one file in here called dummy class

35
00:03:14,160 --> 00:03:21,570
and then we visit the walk file tree directory before we go into it and see the Cottman file that's

36
00:03:22,140 --> 00:03:23,960
in this directory here.

37
00:03:24,240 --> 00:03:26,390
OK so that was pretty easy.

38
00:03:26,400 --> 00:03:31,440
Let's say we only want to print Cartland files so we don't want to print every single file here we just

39
00:03:31,440 --> 00:03:36,930
want to print Cartland files and we know we have one the one that we're actually working on here now

40
00:03:36,930 --> 00:03:43,230
since the walk functions all return a sequence we can treat the result like a sequence and filter out

41
00:03:43,290 --> 00:03:44,390
entries.

42
00:03:44,670 --> 00:03:48,860
So instead of calling for each right away why don't we go ahead and filter.

43
00:03:48,900 --> 00:03:55,810
So and all I can do this on a nother line just to make this clear so we'll say filter.

44
00:03:56,640 --> 00:04:00,520
So we only want file names or paths if you want to look at it that way.

45
00:04:00,520 --> 00:04:04,500
That and with the DOT t extension.

46
00:04:04,500 --> 00:04:16,950
So we'll say for each file reach path we want t dot name to end with Dot.

47
00:04:18,450 --> 00:04:24,990
And then for anything that passes the filter I don't know if I'll be able to get the oh there we go

48
00:04:25,770 --> 00:04:26,650
the invitation right.

49
00:04:26,660 --> 00:04:33,470
And it turned out to be simple so for each file that passes the filter we want to print it out.

50
00:04:33,480 --> 00:04:37,880
So this should be familiar to to you from looking at changing functions together.

51
00:04:37,920 --> 00:04:43,550
When we were using sequences because essentially this returns a sequence returns a sequence of files.

52
00:04:43,770 --> 00:04:45,630
So let's go ahead and run now.

53
00:04:47,900 --> 00:04:53,890
And now we just get our one file that has the extension Katy.

54
00:04:53,960 --> 00:05:00,590
Now if you to do something before or after each directory is entered you can use the On Enter and on

55
00:05:00,590 --> 00:05:07,340
leave functions the on enter function takes a lambda that returns a boolean and if false is returned

56
00:05:07,340 --> 00:05:09,220
a directory will be skipped.

57
00:05:09,350 --> 00:05:12,030
And that's really all there is to walking the file tree.

58
00:05:12,050 --> 00:05:17,270
You can take a look at the documentation for the file tree walk class to see what functions are available.

59
00:05:17,480 --> 00:05:24,110
And as you can see you can actually do a lot if you chain functions together as because the lock functions

60
00:05:24,110 --> 00:05:25,790
return sequences.

61
00:05:25,790 --> 00:05:35,750
So you can go ahead and do quite a bit on each file in the sequence before you execute a terminal operation.

62
00:05:35,870 --> 00:05:41,990
And that's all we're going to cover for IO because Katlin really doesn't have its own IO classes and

63
00:05:41,990 --> 00:05:47,480
has just added some convenience extension functions there isn't really a lot to talk about when it comes

64
00:05:47,480 --> 00:05:49,610
to Cartland and Io.

65
00:05:49,610 --> 00:05:56,420
However you did see in the last video that we were using the Java classes directly and that's because

66
00:05:56,450 --> 00:06:03,740
as I said at the top of the Course Katlin was designed with Java interoperability in mind and so in

67
00:06:03,740 --> 00:06:09,860
the next section we're going to look at that we're going to look at when you do have to do something

68
00:06:09,860 --> 00:06:14,720
special when you want to use Cartland from Java or Java from Cartland.

69
00:06:14,720 --> 00:06:15,640
So we'll see if they're.
