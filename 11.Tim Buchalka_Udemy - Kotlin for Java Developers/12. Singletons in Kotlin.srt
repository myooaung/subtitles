1
1

00:00:04,710  -->  00:00:07,799
In Kotlin, there's a way to declare a
2

2

00:00:07,799  -->  00:00:10,799
class and define an instance at the same
3

3

00:00:10,799  -->  00:00:12,539
time, and this is where the object
4

4

00:00:12,539  -->  00:00:15,480
keyword comes in. Now there are three
5

5

00:00:15,480  -->  00:00:17,880
typical use cases for the object keyword,
6

6

00:00:17,880  -->  00:00:21,060
the first use case is singletons, the
7

7

00:00:21,060  -->  00:00:22,770
second use case is what's called
8

8

00:00:22,770  -->  00:00:25,890
companion objects and the third use case
9

9

00:00:25,890  -->  00:00:28,770
is object expressions. So let's take a
10

10

00:00:28,770  -->  00:00:31,199
look at each of these. Now you're
11

11

00:00:31,199  -->  00:00:33,059
probably familiar with the singleton,
12

12

00:00:33,059  -->  00:00:35,969
it's a common design pattern in Java,
13

13

00:00:35,969  -->  00:00:39,090
we use it when we want one and only one
14

14

00:00:39,090  -->  00:00:41,399
instance of a class during the running
15

15

00:00:41,399  -->  00:00:42,270
of an application.
16

16

00:00:42,270  -->  00:00:44,850
So in Java what we typically do is we
17

17

00:00:44,850  -->  00:00:46,680
declare a class, it has a private
18

18

00:00:46,680  -->  00:00:48,930
constructor and then the outside world
19

19

00:00:48,930  -->  00:00:51,660
gets access to the single instance that
20

20

00:00:51,660  -->  00:00:54,300
the class creates. And it gets access to
21

21

00:00:54,300  -->  00:00:57,930
this instance using a static method.
22

22

00:00:57,930  -->  00:00:59,760
Now when you want a singleton in Kotlin,
23

23

00:00:59,760  -->  00:01:01,890
you'll use the object keyword because
24

24

00:01:01,890  -->  00:01:04,559
there can only ever be one instance of
25

25

00:01:04,559  -->  00:01:07,049
an object class. So when you declare an
26

26

00:01:07,049  -->  00:01:08,970
object class, you're saying you want one
27

27

00:01:08,970  -->  00:01:12,720
and only one instance of the class.
28

28

00:01:12,720  -->  00:01:15,090
So let's suppose that this application that
29

29

00:01:15,090  -->  00:01:17,369
we've been working on that has a bunch
30

30

00:01:17,369  -->  00:01:19,080
of printer classes in it, let's suppose
31

31

00:01:19,080  -->  00:01:21,780
that this application is for our company
32

32

00:01:21,780  -->  00:01:23,880
and that company wants the same
33

33

00:01:23,880  -->  00:01:26,729
copyright message, the same tagline etc
34

34

00:01:26,729  -->  00:01:29,549
on all of its communications. Now, we
35

35

00:01:29,549  -->  00:01:31,470
could have a company communication
36

36

00:01:31,470  -->  00:01:33,689
singleton that contains functions that
37

37

00:01:33,689  -->  00:01:35,220
return all the different bits of
38

38

00:01:35,220  -->  00:01:37,320
messaging the company application might
39

39

00:01:37,320  -->  00:01:39,810
want to use, so let's create a new file
40

40

00:01:39,810  -->  00:01:42,689
for our singleton in the project.
41

41

00:01:42,689  -->  00:01:44,700
So we'll right click on the package and
42

42

00:01:44,700  -->  00:01:48,600
we'll go to new Kotlin file or class,
43

43

00:01:48,600  -->  00:01:50,220
by this point I hope you've realized that
44

44

00:01:50,220  -->  00:01:52,560
it doesn't matter if we choose file or
45

45

00:01:52,560  -->  00:01:54,990
class or interface because choosing a
46

46

00:01:54,990  -->  00:01:56,909
type from the drop-down just means that
47

47

00:01:56,909  -->  00:01:59,670
the IDE will save us some typing, but we
48

48

00:01:59,670  -->  00:02:02,759
want to create an object class here.
49

49

00:02:02,759  -->  00:02:05,880
So let's select object from the list and
50

50

00:02:05,880  -->  00:02:10,250
we'll call this company communications-
51

51

00:02:10,250  -->  00:02:13,579
communications there we go.
52

52

00:02:13,579  -->  00:02:17,910
Ok, so now we have a new file
53

53

00:02:17,910  -->  00:02:20,730
and it's the IDE is included the object
54

54

00:02:20,730  -->  00:02:22,560
keyword, that's the first thing to learn
55

55

00:02:22,560  -->  00:02:25,500
about object classes, you use the keyword
56

56

00:02:25,500  -->  00:02:27,330
object to declare them, you'll notice
57

57

00:02:27,330  -->  00:02:29,730
there's no class keyword here,
58

58

00:02:29,730  -->  00:02:32,250
it's just object. Okay, so now we can go
59

59

00:02:32,250  -->  00:02:34,080
ahead and add properties and functions,
60

60

00:02:34,080  -->  00:02:36,510
but we can't have any constructors
61

61

00:02:36,510  -->  00:02:39,210
because an object declaration declares
62

62

00:02:39,210  -->  00:02:41,700
and creates an instance at the same time.
63

63

00:02:41,700  -->  00:02:43,800
So having constructors wouldn't make
64

64

00:02:43,800  -->  00:02:45,750
sense, so we're going to add two
65

65

00:02:45,750  -->  00:02:47,820
functions one that returns the company's
66

66

00:02:47,820  -->  00:02:50,460
tagline and one that returns a copyright
67

67

00:02:50,460  -->  00:02:52,680
statement. So for the copyright statement
68

68

00:02:52,680  -->  00:02:54,840
we'll get the current year dynamically,
69

69

00:02:54,840  -->  00:02:58,710
we won't hard code it. So we'll say val
70

70

00:02:58,710  -->  00:03:04,620
current year equals year dot now dot value,
71

71

00:03:04,620  -->  00:03:06,690
don't need a semicolon we're not
72

72

00:03:06,690  -->  00:03:09,030
writing Java. And then we'll add a
73

73

00:03:09,030  -->  00:03:14,580
function get tagline and the tagline for
74

74

00:03:14,580  -->  00:03:20,610
this will be our company rocks. And then
75

75

00:03:20,610  -->  00:03:22,200
we're going to add a function to get the
76

76

00:03:22,200  -->  00:03:25,920
copyright line and the copyright line
77

77

00:03:25,920  -->  00:03:29,700
will just be copyright and we'll use the
78

78

00:03:29,700  -->  00:03:33,120
unicode character for the copyright
79

79

00:03:33,120  -->  00:03:38,209
symbol and we'll add the current year,
80

80

00:03:38,209  -->  00:03:46,020
our company all rights reserved. Now one
81

81

00:03:46,020  -->  00:03:47,340
thing I didn't point out here is that
82

82

00:03:47,340  -->  00:03:50,400
we're using java's year class and we
83

83

00:03:50,400  -->  00:03:52,110
don't have to do anything special to do
84

84

00:03:52,110  -->  00:03:53,850
that. You'll see we've imported Java dot
85

85

00:03:53,850  -->  00:03:55,860
time dot year, so once again you can just
86

86

00:03:55,860  -->  00:03:58,340
most of the time just use Java
87

87

00:03:58,340  -->  00:04:00,630
seamlessly from Kotlin without having to
88

88

00:04:00,630  -->  00:04:02,820
do anything special. Okay, so I'm going to
89

89

00:04:02,820  -->  00:04:04,950
add a main function to this file, even
90

90

00:04:04,950  -->  00:04:06,840
though we've got one in printer just so
91

91

00:04:06,840  -->  00:04:08,040
I don't have to keep going back to
92

92

00:04:08,040  -->  00:04:12,170
printer to run. So let's add main and
93

93

00:04:12,170  -->  00:04:14,580
we're just going to print out our tag
94

94

00:04:14,580  -->  00:04:17,750
line and our copyright line so print line
95

95

00:04:17,750  -->  00:04:21,900
company communications dot get tag line
96

96

00:04:21,900  -->  00:04:27,030
and print line company communications
97

97

00:04:27,030  -->  00:04:30,300
dot get copyright line. So we're calling
98

98

00:04:30,300  -->  00:04:31,830
the two functions here and as
99

99

00:04:31,830  -->  00:04:33,450
you can see, when you want to use an
100

100

00:04:33,450  -->  00:04:35,490
object declaration, you use it the same
101

101

00:04:35,490  -->  00:04:38,100
way that you use an instance of a class,
102

102

00:04:38,100  -->  00:04:40,740
except you use the class name. There's
103

103

00:04:40,740  -->  00:04:43,350
only ever one instance of the object and
104

104

00:04:43,350  -->  00:04:45,030
it's created the first time the class is
105

105

00:04:45,030  -->  00:04:48,870
used. So the one instance of the company
106

106

00:04:48,870  -->  00:04:50,580
communications object is going to be
107

107

00:04:50,580  -->  00:04:53,430
created here on line six the first time
108

108

00:04:53,430  -->  00:04:55,980
that we want to actually use an instance.
109

109

00:04:55,980  -->  00:04:58,140
So essentially, we have a singleton
110

110

00:04:58,140  -->  00:05:00,510
object called company communications and
111

111

00:05:00,510  -->  00:05:03,210
this is how you do singletons in Kotlin.
112

112

00:05:03,210  -->  00:05:05,550
You'll see there's no constructor here,
113

113

00:05:05,550  -->  00:05:09,750
so nobody from the outside can actually
114

114

00:05:09,750  -->  00:05:12,210
create an instance of this class, the one
115

115

00:05:12,210  -->  00:05:14,160
single instance is created the first
116

116

00:05:14,160  -->  00:05:17,190
time you use the class. Let's run just to
117

117

00:05:17,190  -->  00:05:22,230
show that this works and as you can see,
118

118

00:05:22,230  -->  00:05:25,770
I ran the other main function, so I'll
119

119

00:05:25,770  -->  00:05:28,920
run from here and now we get the right
120

120

00:05:28,920  -->  00:05:31,350
main function, so we see our tagline and
121

121

00:05:31,350  -->  00:05:34,530
we see the copyright line that we created,
122

122

00:05:34,530  -->  00:05:37,560
Now object declarations can extend
123

123

00:05:37,560  -->  00:05:40,050
classes and implement interfaces, so if
124

124

00:05:40,050  -->  00:05:42,120
you want it to create a singleton that
125

125

00:05:42,120  -->  00:05:44,610
extends another class or that implements
126

126

00:05:44,610  -->  00:05:46,470
an interface, that would be fine but this
127

127

00:05:46,470  -->  00:05:48,660
is all there is to creating singletons
128

128

00:05:48,660  -->  00:05:50,970
and Kotlin. Just create a class with
129

129

00:05:50,970  -->  00:05:52,530
objects in front of it and then go ahead
130

130

00:05:52,530  -->  00:05:55,440
and use the properties of the functions
131

131

00:05:55,440  -->  00:05:58,140
using the class name. So that's the first
132

132

00:05:58,140  -->  00:06:01,500
use case for the object keyword is when
133

133

00:06:01,500  -->  00:06:04,610
you want to create a singleton.
