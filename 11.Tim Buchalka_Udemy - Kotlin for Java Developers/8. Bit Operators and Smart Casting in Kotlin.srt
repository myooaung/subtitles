1
1

00:00:04,779  -->  00:00:07,729
Okay, so let's just go over a couple of
2

2

00:00:07,729  -->  00:00:10,610
more sort of minor but important
3

3

00:00:10,610  -->  00:00:12,680
differences between Kotlin and Java.
4

4

00:00:12,680  -->  00:00:15,710
First of all the bit operators, there's
5

5

00:00:15,710  -->  00:00:18,349
been a minor change there, I'm just going
6

6

00:00:18,349  -->  00:00:20,270
to make some room here and type in some
7

7

00:00:20,270  -->  00:00:22,730
code that we're going to delete. As you
8

8

00:00:22,730  -->  00:00:24,680
know in Java, you can do something like
9

9

00:00:24,680  -->  00:00:26,660
this. Well you wouldn't need val let's
10

10

00:00:26,660  -->  00:00:29,750
just go. Well, I'll use Val here so the
11

11

00:00:29,750  -->  00:00:31,759
compiler won't report an error. You can
12

12

00:00:31,759  -->  00:00:34,850
go zero X zero zero one zero one, one
13

13

00:00:34,850  -->  00:00:38,510
zero one whatever and you can do val y
14

14

00:00:38,510  -->  00:00:41,360
equals zero X one one one one zero one
15

15

00:00:41,360  -->  00:00:44,630
one zero one one and then you can do
16

16

00:00:44,630  -->  00:00:50,900
things in Java like X or Y, X and Y.
17

17

00:00:50,900  -->  00:00:54,079
You can see that the compiler here is giving
18

18

00:00:54,079  -->  00:00:56,780
us some errors and it's because these
19

19

00:00:56,780  -->  00:00:59,329
operators don't exist you, actually spell
20

20

00:00:59,329  -->  00:01:02,739
them out in Kotlin. So you'd go X or Y and
21

21

00:01:02,739  -->  00:01:07,670
you'd go X and Y. So you can see we're
22

22

00:01:07,670  -->  00:01:08,929
not getting the errors now we're not
23

23

00:01:08,929  -->  00:01:10,429
assigning them to anything, but we're not
24

24

00:01:10,429  -->  00:01:12,469
getting the errors and you know you'd
25

25

00:01:12,469  -->  00:01:16,189
use X or so for the bitwise operators
26

26

00:01:16,189  -->  00:01:19,039
you spell out the operator rather than
27

27

00:01:19,039  -->  00:01:23,179
using a symbol. So that's one difference to
28

28

00:01:23,179  -->  00:01:25,819
be aware of. The other thing we're going
29

29

00:01:25,819  -->  00:01:27,889
to discuss in this video is casting.
30

30

00:01:27,889  -->  00:01:29,840
Casting and type checking.
31

31

00:01:29,840  -->  00:01:32,299
So in Kotlin, if you want to check
32

32

00:01:32,299  -->  00:01:35,240
whether a variable is of a certain type,
33

33

00:01:35,240  -->  00:01:38,840
you use the is operator rather than
34

34

00:01:38,840  -->  00:01:42,229
instance of. So let's try it, we'll say
35

35

00:01:42,229  -->  00:01:46,340
val something and we'll make this as
36

36

00:01:46,340  -->  00:01:48,349
type any which is sort of kind of like
37

37

00:01:48,349  -->  00:01:52,130
object in Java but not not exactly but
38

38

00:01:52,130  -->  00:01:55,099
it can hold any Kotlin object, so we'll
39

39

00:01:55,099  -->  00:01:59,179
assign employee four to that employee
40

40

00:01:59,179  -->  00:02:00,919
four that we created in that in a
41

41

00:02:00,919  -->  00:02:03,770
previous video and then we say if
42

42

00:02:03,770  -->  00:02:10,039
something is an employee and then we go
43

43

00:02:10,039  -->  00:02:12,920
ahead and do something. So as you can see,
44

44

00:02:12,920  -->  00:02:14,540
instead of saying if something instance
45

45

00:02:14,540  -->  00:02:18,380
of employee, we say something is employee.
46

46

00:02:18,380  -->  00:02:21,050
So when you want to check the type of an
47

47

00:02:21,050  -->  00:02:23,240
instance, you use is. Now, of course
48

48

00:02:23,240  -->  00:02:26,030
there's also there not is, so you can say
49

49

00:02:26,030  -->  00:02:30,410
if not is employee that works, so the you
50

50

00:02:30,410  -->  00:02:31,910
know the coding here would be executed
51

51

00:02:31,910  -->  00:02:35,000
if something was not an employee, so you
52

52

00:02:35,000  -->  00:02:36,020
can do that as well/
53

53

00:02:36,020  -->  00:02:38,480
Okay so let's stick with is though and
54

54

00:02:38,480  -->  00:02:40,430
let's say okay so you want to do
55

55

00:02:40,430  -->  00:02:42,380
something with employee, maybe get the
56

56

00:02:42,380  -->  00:02:44,360
name, so you want to cast it now in java
57

57

00:02:44,360  -->  00:02:51,050
of course, we go employee something in
58

58

00:02:51,050  -->  00:02:56,060
Kotlin we say val new employee equals
59

59

00:02:56,060  -->  00:03:02,540
and we say something as employee. So this
60

60

00:03:02,540  -->  00:03:04,550
is how you do a cast in Kotlin, you use
61

61

00:03:04,550  -->  00:03:06,650
the as keyword and you say I want to
62

62

00:03:06,650  -->  00:03:10,430
treat this variable as this class. Now
63

63

00:03:10,430  -->  00:03:12,050
you're going to see that no cast is
64

64

00:03:12,050  -->  00:03:14,350
needed, hold that thought for now and
65

65

00:03:14,350  -->  00:03:16,790
then we could do something like, you know
66

66

00:03:16,790  -->  00:03:21,740
print line new employee dot name and
67

67

00:03:21,740  -->  00:03:25,220
that would work. Now you'll notice this
68

68

00:03:25,220  -->  00:03:27,260
is all grayed out, as I said as employee
69

69

00:03:27,260  -->  00:03:29,270
and I said hold the thought and it says no
70

70

00:03:29,270  -->  00:03:31,370
cast needed and the reason that no cast
71

71

00:03:31,370  -->  00:03:33,800
is needed is because Kotlin has a notion
72

72

00:03:33,800  -->  00:03:37,580
known as smart casting, after you've
73

73

00:03:37,580  -->  00:03:39,920
performed an is check which we're doing
74

74

00:03:39,920  -->  00:03:42,410
up here, you can then go ahead and treat
75

75

00:03:42,410  -->  00:03:45,440
the variable as if it has been cast.
76

76

00:03:45,440  -->  00:03:47,210
Now, underneath the covers the compiler is
77

77

00:03:47,210  -->  00:03:49,160
doing the casting for you so once again,
78

78

00:03:49,160  -->  00:03:51,230
this is sort of a syntactical saying
79

79

00:03:51,230  -->  00:03:53,930
where the compilers doing some extra
80

80

00:03:53,930  -->  00:03:55,850
checking and generating some extra code,
81

81

00:03:55,850  -->  00:03:57,560
so we don't actually have to type it,
82

82

00:03:57,560  -->  00:04:00,350
because this is very common in Java,
83

83

00:04:00,350  -->  00:04:03,620
right? Where we'd say if something is
84

84

00:04:03,620  -->  00:04:05,750
instance of employee and then if it is
85

85

00:04:05,750  -->  00:04:08,240
inside the following block of code we
86

86

00:04:08,240  -->  00:04:12,080
cast it and then we start using the cast,
87

87

00:04:12,080  -->  00:04:14,870
the casted variable essentially.
88

88

00:04:14,870  -->  00:04:17,780
So, because it's so common Kotlin has smart
89

89

00:04:17,780  -->  00:04:20,239
casting and so we don't actually have to
90

90

00:04:20,239  -->  00:04:22,220
do this, we can just delete this line
91

91

00:04:22,220  -->  00:04:24,560
actually. I'll comment it out actually
92

92

00:04:24,560  -->  00:04:28,610
and we can then just get rid of that and
93

93

00:04:28,610  -->  00:04:31,850
just go ahead and use something,
94

94

00:04:31,850  -->  00:04:36,020
and we don't have to actually cast it, so
95

95

00:04:36,020  -->  00:04:38,390
after using the is check after the
96

96

00:04:38,390  -->  00:04:42,260
compiler has verified that an instance
97

97

00:04:42,260  -->  00:04:45,230
is in fact of a particular class, you can
98

98

00:04:45,230  -->  00:04:47,090
go ahead and start using it as if the
99

99

00:04:47,090  -->  00:04:49,460
variable is of that type. Now this
100

100

00:04:49,460  -->  00:04:51,800
doesn't work if you change the value to
101

101

00:04:51,800  -->  00:04:53,450
something other than it's been employee.
102

102

00:04:53,450  -->  00:04:55,400
Like, if you do this and then you come in
103

103

00:04:55,400  -->  00:04:59,140
and say oh let's say something is now a
104

104

00:04:59,140  -->  00:05:01,820
string, you're going to see two things,
105

105

00:05:01,820  -->  00:05:04,160
first it can't be reassigned so let's
106

106

00:05:04,160  -->  00:05:06,230
change that to var, just so we don't have that
107

107

00:05:06,230  -->  00:05:09,170
particular error, but you're going to see
108

108

00:05:09,170  -->  00:05:12,080
now that you can't refer to name so the
109

109

00:05:12,080  -->  00:05:14,630
compiler is saying excuse me,
110

110

00:05:14,630  -->  00:05:17,480
you've now reassigned this variable.
111

111

00:05:17,480  -->  00:05:19,280
You've changed the value, I can no longer
112

112

00:05:19,280  -->  00:05:23,300
guarantee that something is an employee
113

113

00:05:23,300  -->  00:05:25,340
and so you're not allowed to access it
114

114

00:05:25,340  -->  00:05:27,650
like that anymore. Now, this would work if
115

115

00:05:27,650  -->  00:05:31,610
we've said something is employee one,
116

116

00:05:31,610  -->  00:05:34,190
let's say. The compiler smart enough to
117

117

00:05:34,190  -->  00:05:35,630
see that oh, you're still working
118

118

00:05:35,630  -->  00:05:38,330
with an employee. Because inside this
119

119

00:05:38,330  -->  00:05:41,150
block of code, essentially the compiler
120

120

00:05:41,150  -->  00:05:43,790
has kind of typed something as employee.
121

121

00:05:43,790  -->  00:05:46,430
So as long as you're still assigning
122

122

00:05:46,430  -->  00:05:49,670
employees to it, it's fine, but the moment
123

123

00:05:49,670  -->  00:05:51,170
you decide you're going to assign
124

124

00:05:51,170  -->  00:05:53,600
something else to something, at that
125

125

00:05:53,600  -->  00:05:56,480
point you can no longer use it as if
126

126

00:05:56,480  -->  00:05:59,000
it's an employee, for obvious reasons.
127

127

00:05:59,000  -->  00:06:01,640
So this is known as smart casting and this
128

128

00:06:01,640  -->  00:06:03,350
is yet another way that Kotlin cuts
129

129

00:06:03,350  -->  00:06:05,090
down on the amount of code that we have
130

130

00:06:05,090  -->  00:06:08,860
to write. See in the next video.
