WEBVTT
1
1

00:00:05.550  -->  00:00:07.060
<v Narrator>Okay, I've been referring to</v>
2

2

00:00:07.060  -->  00:00:09.900
the class member variables as properties.
3

3

00:00:09.900  -->  00:00:12.810
Kotlin classes can only have properties.
4

4

00:00:12.810  -->  00:00:14.670
They don't have fields.
5

5

00:00:14.670  -->  00:00:16.220
You can use the same access modifiers
6

6

00:00:16.220  -->  00:00:18.990
with properties as you can with classes
7

7

00:00:18.990  -->  00:00:21.360
and remember that the default is public.
8

8

00:00:21.360  -->  00:00:24.700
That's why we've been able to directly access the first name
9

9

00:00:24.700  -->  00:00:27.860
and full-time properties from the main function.
10

10

00:00:27.860  -->  00:00:30.890
You can see up here we're just directly accessing them.
11

11

00:00:30.890  -->  00:00:33.520
And as you've seen, we're just using the dot notation
12

12

00:00:33.520  -->  00:00:35.100
to access the public properties,
13

13

00:00:35.100  -->  00:00:37.050
meaning that we've followed the instance name
14

14

00:00:37.050  -->  00:00:40.240
with a period or dot and then the property name.
15

15

00:00:40.240  -->  00:00:41.890
Now, let's change the visibility of
16

16

00:00:41.890  -->  00:00:45.020
the full-time property and see what error we get.
17

17

00:00:45.020  -->  00:00:46.530
So, we'll go down to our class
18

18

00:00:46.530  -->  00:00:50.703
and we're going to make the full-time property private.
19

19

00:00:53.590  -->  00:00:56.277
And we're gonna get errors and it says
20

20

00:00:56.277  -->  00:01:00.220
"cannot access full time, it is private and employee."
21

21

00:01:00.220  -->  00:01:01.320
So, let's remove that.
22

22

00:01:01.320  -->  00:01:02.610
I just want to show you that we can
23

23

00:01:02.610  -->  00:01:05.330
no longer use the dot notation.
24

24

00:01:05.330  -->  00:01:07.930
But as you saw, the access modifier
25

25

00:01:07.930  -->  00:01:10.980
goes before the declaration.
26

26

00:01:10.980  -->  00:01:13.150
So, what exactly is happening when
27

27

00:01:13.150  -->  00:01:15.600
we're using the dot notation here
28

28

00:01:15.600  -->  00:01:18.060
to access a public property?
29

29

00:01:18.060  -->  00:01:19.757
Well, when we declare a property
30

30

00:01:19.757  -->  00:01:23.660
either using the primary constructor or explicitly,
31

31

00:01:23.660  -->  00:01:26.720
Kotlin creates default accessors for us,
32

32

00:01:26.720  -->  00:01:29.060
also known as getters and setters.
33

33

00:01:29.060  -->  00:01:32.070
Now, in Java, we'd have to do the following:
34

34

00:01:32.070  -->  00:01:33.810
let's go back to our Java code
35

35

00:01:33.810  -->  00:01:36.500
and we'll use IntelliJ's generate code feature
36

36

00:01:36.500  -->  00:01:39.660
to generate setters and getters for the fields,
37

37

00:01:39.660  -->  00:01:42.030
so we'll right-click, say generate.
38

38

00:01:42.030  -->  00:01:44.050
We want getter and setter.
39

39

00:01:44.050  -->  00:01:48.520
I'm going to select both of these by holding the CTRL key
40

40

00:01:48.520  -->  00:01:49.890
when I click on the second one
41

41

00:01:49.890  -->  00:01:54.540
and then we'll click OK and now we have gets
42

42

00:01:54.540  -->  00:01:59.020
and I guess I didn't ask it to do sets, I thought I did.
43

43

00:01:59.020  -->  00:02:00.580
Oh, it's because they're final.
44

44

00:02:00.580  -->  00:02:02.440
That's why it won't let us do it.
45

45

00:02:02.440  -->  00:02:04.850
Well, we don't want the full-time property to be final.
46

46

00:02:04.850  -->  00:02:08.250
We actually declared that as a var, so let's remove that
47

47

00:02:08.250  -->  00:02:13.250
and then we'll have IntelliJ generate us the setter for this
48

48

00:02:15.550  -->  00:02:19.630
and it's only offering us the boolean because
49

49

00:02:19.630  -->  00:02:23.493
the first name property, or field rather, is final.
50

50

00:02:24.390  -->  00:02:29.390
Okay, so now we have our sets and our get for our fields.
51

51

00:02:30.480  -->  00:02:32.870
So, this is quite a bit of code in the Java class
52

52

00:02:32.870  -->  00:02:35.470
and all we're doing in this class is
53

53

00:02:35.470  -->  00:02:38.960
declaring the fields, you know, having two constructors,
54

54

00:02:38.960  -->  00:02:40.640
and setters and getters.
55

55

00:02:40.640  -->  00:02:41.490
That's it.
56

56

00:02:41.490  -->  00:02:42.840
So, let's go back to Kotlin.
57

57

00:02:42.840  -->  00:02:44.300
In Kotlin, of course, we get
58

58

00:02:44.300  -->  00:02:47.540
all of that for free, for public properties.
59

59

00:02:47.540  -->  00:02:50.520
A default setter and getter is generated for them.
60

60

00:02:50.520  -->  00:02:53.500
Of course, as in Java, because this is a vowel,
61

61

00:02:53.500  -->  00:02:55.660
you're not going to be able to set the value again,
62

62

00:02:55.660  -->  00:02:58.470
but we can change the full-time value,
63

63

00:02:58.470  -->  00:03:00.820
so let's do that for John.
64

64

00:03:00.820  -->  00:03:03.820
Let's make him part-time. Right now he's full-time.
65

65

00:03:03.820  -->  00:03:05.520
So we can use the dot notation again.
66

66

00:03:05.520  -->  00:03:07.010
We can just say m dot
67

67

00:03:08.780  -->  00:03:10.120
and you can see we're offered both
68

68

00:03:10.120  -->  00:03:12.810
so we'll say full-time equals false.
69

69

00:03:12.810  -->  00:03:15.500
So if we run now and, in fact we're not printing
70

70

00:03:15.500  -->  00:03:18.480
the full-time value for John so I'll do that,
71

71

00:03:18.480  -->  00:03:21.060
m dot full-time.
72

72

00:03:21.060  -->  00:03:22.183
So if we run ...
73

73

00:03:25.150  -->  00:03:27.460
we'll see that the value is false for John.
74

74

00:03:27.460  -->  00:03:29.870
So for public properties in Kotlin you get
75

75

00:03:29.870  -->  00:03:32.800
the getters and the setters when things aren't
76

76

00:03:32.800  -->  00:03:34.300
declared as val for free.
77

77

00:03:34.300  -->  00:03:36.770
Now you'll notice that if we try to do this,
78

78

00:03:36.770  -->  00:03:41.003
amp dot first name equals mike,
79

79

00:03:42.020  -->  00:03:43.300
you'll see that you can't do it
80

80

00:03:43.300  -->  00:03:45.133
because val can't be reassigned.
81

81

00:03:46.270  -->  00:03:49.270
So there was no setter generated for that property
82

82

00:03:49.270  -->  00:03:52.780
just as we couldn't generate one in Java over here.
83

83

00:03:52.780  -->  00:03:54.310
So what about private properties?
84

84

00:03:54.310  -->  00:03:56.990
For public properties you can just use the dot notation
85

85

00:03:56.990  -->  00:03:59.720
and I have to stress that under the covers
86

86

00:03:59.720  -->  00:04:01.733
this is calling the getter and setter.
87

87

00:04:02.630  -->  00:04:04.300
But what about private properties?
88

88

00:04:04.300  -->  00:04:07.070
What if we wanna set and get the full-time status?
89

89

00:04:07.070  -->  00:04:09.683
What if we wanna make full-time private?
90

90

00:04:11.890  -->  00:04:14.830
Okay, so now we're getting errors here.
91

91

00:04:14.830  -->  00:04:16.780
Can we call a get method?
92

92

00:04:16.780  -->  00:04:19.460
Is there a get full-time method here?
93

93

00:04:19.460  -->  00:04:21.830
Well there isn't, there's nothing.
94

94

00:04:21.830  -->  00:04:24.580
And there's no set either so what do we do?
95

95

00:04:24.580  -->  00:04:26.130
Okay this is where you have to think
96

96

00:04:26.130  -->  00:04:28.900
a little differently than you do in Java.
97

97

00:04:28.900  -->  00:04:31.840
Okay in Java, when the field is declared private
98

98

00:04:31.840  -->  00:04:33.790
and in fact these fields are declared private
99

99

00:04:33.790  -->  00:04:35.870
we can still get inside the values
100

100

00:04:35.870  -->  00:04:38.548
if there is a public getter and setter available.
101

101

00:04:38.548  -->  00:04:42.540
But in Kotlin if we declare the property private
102

102

00:04:42.540  -->  00:04:44.480
there will be no way to modify
103

103

00:04:44.480  -->  00:04:47.560
that property from the outside even using a setter,
104

104

00:04:47.560  -->  00:04:49.891
and that's because the rule in Kotlin is that
105

105

00:04:49.891  -->  00:04:51.918
getters and setters have to have
106

106

00:04:51.918  -->  00:04:54.860
the same visibiility as the property
107

107

00:04:54.860  -->  00:04:57.779
or a less permissive visibility.
108

108

00:04:57.779  -->  00:05:00.890
So in this case, the getter and setter
109

109

00:05:00.890  -->  00:05:03.438
for full-time are going to be private
110

110

00:05:03.438  -->  00:05:05.194
because the getter and setter has to have
111

111

00:05:05.194  -->  00:05:07.950
the same visibility as the property.
112

112

00:05:07.950  -->  00:05:09.050
So what does this mean?
113

113

00:05:09.050  -->  00:05:11.020
Well if you want to allow a property
114

114

00:05:11.020  -->  00:05:13.090
to be modified from outside the class
115

115

00:05:13.090  -->  00:05:14.840
you can't declare it private because
116

116

00:05:14.840  -->  00:05:17.560
the setter and getter will also have to be private.
117

117

00:05:17.560  -->  00:05:18.930
Now think about this for a minute.
118

118

00:05:18.930  -->  00:05:22.858
As I said in Java when you have a private field
119

119

00:05:22.858  -->  00:05:25.840
and you wanna allow the field to be changed from the outside
120

120

00:05:25.840  -->  00:05:28.350
you provide public getters and setters.
121

121

00:05:28.350  -->  00:05:30.410
And you do that so that those from the outside
122

122

00:05:30.410  -->  00:05:32.780
can change the value of the field
123

123

00:05:32.780  -->  00:05:34.650
directly through the setter.
124

124

00:05:34.650  -->  00:05:37.570
Now with Kotlin properties those,
125

125

00:05:37.570  -->  00:05:39.490
nothing from the outside can ever
126

126

00:05:39.490  -->  00:05:41.750
change the property directly.
127

127

00:05:41.750  -->  00:05:43.840
It always has to go through the getter and setter.
128

128

00:05:43.840  -->  00:05:45.150
In Java that's not true.
129

129

00:05:45.150  -->  00:05:47.520
If we were to declare these public
130

130

00:05:47.520  -->  00:05:51.437
then members on the outside can directly change
131

131

00:05:51.437  -->  00:05:54.410
the values of the fields just by using
132

132

00:05:54.410  -->  00:05:58.340
Java employee dot, they don't have to do anything else.
133

133

00:05:58.340  -->  00:06:01.510
But in Kotlin it looks like we're using
134

134

00:06:01.510  -->  00:06:03.670
just going amp three dot first name
135

135

00:06:03.670  -->  00:06:06.250
but in fact this is generating a call
136

136

00:06:06.250  -->  00:06:08.620
to the set under the covers.
137

137

00:06:08.620  -->  00:06:13.620
So it's perfectly okay to have public properties in Kotlin.
138

138

00:06:13.900  -->  00:06:16.180
Members from outside won't be able
139

139

00:06:16.180  -->  00:06:18.990
to directly change the value of the property.
140

140

00:06:18.990  -->  00:06:22.960
So there's really no point in declaring a property private
141

141

00:06:22.960  -->  00:06:27.120
unless you really just wanna use it inside the class
142

142

00:06:27.120  -->  00:06:30.090
and you never ever want it changed from outside.
143

143

00:06:30.090  -->  00:06:32.145
So unlike Java, in Kotlin you don't have to
144

144

00:06:32.145  -->  00:06:34.570
declare a property private to prevent it
145

145

00:06:34.570  -->  00:06:36.290
from being directly modified.
146

146

00:06:36.290  -->  00:06:38.730
So in this case, because we want the main function
147

147

00:06:38.730  -->  00:06:40.970
to be able to modify the full-time property
148

148

00:06:40.970  -->  00:06:43.000
we can't declare it as private
149

149

00:06:43.000  -->  00:06:44.670
because the moment we do it's not
150

150

00:06:44.670  -->  00:06:47.250
accessible at all from the outside.
151

151

00:06:47.250  -->  00:06:50.200
So what we originally had which was public was fine.
152

152

00:06:50.200  -->  00:06:51.810
Now there will be times when you want to
153

153

00:06:51.810  -->  00:06:54.700
do more than just assign and return the property value
154

154

00:06:54.700  -->  00:06:56.891
when someone calls a getter or a setter
155

155

00:06:56.891  -->  00:06:59.920
so the auto-generated accessors won't be sufficient
156

156

00:06:59.920  -->  00:07:04.400
because the auto-generated accessors basically just do this.
157

157

00:07:04.400  -->  00:07:06.360
You know, the getter will just return
158

158

00:07:06.360  -->  00:07:07.960
the value of the property and the setter
159

159

00:07:07.960  -->  00:07:11.470
will just set the property with whatever value you passed.
160

160

00:07:11.470  -->  00:07:14.300
So if the auto-generated accessors
161

161

00:07:14.300  -->  00:07:16.470
won't serve your needs, you can write your own.
162

162

00:07:16.470  -->  00:07:19.140
But when you write your own, you have to declare
163

163

00:07:19.140  -->  00:07:20.910
the property within the class.
164

164

00:07:20.910  -->  00:07:23.440
So the moment you need your own setter or getter
165

165

00:07:23.440  -->  00:07:25.220
you can't declare the property
166

166

00:07:25.220  -->  00:07:27.290
as part of a primary constructor.
167

167

00:07:27.290  -->  00:07:28.930
You have to explicitly declare
168

168

00:07:28.930  -->  00:07:30.820
the property inside the class.
169

169

00:07:30.820  -->  00:07:33.930
So let's write a custom get for the full-time property
170

170

00:07:33.930  -->  00:07:35.660
so you can see how it's done.
171

171

00:07:35.660  -->  00:07:37.960
So first we have to remove the declaration
172

172

00:07:37.960  -->  00:07:39.410
from the primary constructor.
173

173

00:07:39.410  -->  00:07:41.530
So all we have to do is remove var
174

174

00:07:41.530  -->  00:07:45.190
because the moment we do, this is no longer a declaration.
175

175

00:07:45.190  -->  00:07:46.450
It's just a parameter.
176

176

00:07:46.450  -->  00:07:48.280
So that means that Kotlin is not going to
177

177

00:07:48.280  -->  00:07:49.651
generate the code that's going to
178

178

00:07:49.651  -->  00:07:52.630
declare the property for us inside the class.
179

179

00:07:52.630  -->  00:07:54.420
We're gonna have to do that ourselves now.
180

180

00:07:54.420  -->  00:07:56.530
So let's go ahead and do that.
181

181

00:07:56.530  -->  00:07:58.253
Var full-time ...
182

182

00:07:59.930  -->  00:08:01.323
well we don't actually have to
183

183

00:08:01.323  -->  00:08:04.970
put the type there, we can just say
184

184

00:08:05.910  -->  00:08:09.170
full-time, the compiler can infer the type
185

185

00:08:09.170  -->  00:08:10.800
from this parameter up here.
186

186

00:08:10.800  -->  00:08:12.530
Now at this point the compiler will
187

187

00:08:12.530  -->  00:08:14.750
generate the default setter and getter for us
188

188

00:08:14.750  -->  00:08:18.320
so even though we're not declaring the property
189

189

00:08:18.320  -->  00:08:20.470
as part of the primary constructor,
190

190

00:08:20.470  -->  00:08:22.820
we still get the setter and getter for free.
191

191

00:08:22.820  -->  00:08:24.740
But we wanna do more than just return
192

192

00:08:24.740  -->  00:08:26.420
the value when get is called.
193

193

00:08:26.420  -->  00:08:28.440
Let's say we also wanna print the value,
194

194

00:08:28.440  -->  00:08:31.370
obviously this is a silly example but
195

195

00:08:31.370  -->  00:08:35.180
it'll let me demonstrate how to create a custom getter.
196

196

00:08:35.180  -->  00:08:38.110
So when you want a custom accessor
197

197

00:08:38.110  -->  00:08:42.140
it has to come immediately after the property declaration.
198

198

00:08:42.140  -->  00:08:43.810
So you can't have a bunch of stuff here
199

199

00:08:43.810  -->  00:08:46.130
and then start writing your setters and getters.
200

200

00:08:46.130  -->  00:08:49.560
If you want the custom set or custom get
201

201

00:08:49.560  -->  00:08:51.570
you have to write them immediately after
202

202

00:08:51.570  -->  00:08:53.120
the property declaration.
203

203

00:08:53.120  -->  00:08:56.500
Now I said not too long ago that Kotlin classes
204

204

00:08:56.500  -->  00:08:59.370
only have properties, they don't have fields.
205

205

00:08:59.370  -->  00:09:03.620
But if you have accessors for the fields
206

206

00:09:03.620  -->  00:09:06.770
either the ones generated for you by Kotlin
207

207

00:09:06.770  -->  00:09:09.450
or custom ones then there will be
208

208

00:09:09.450  -->  00:09:12.840
a backing field associated with the property.
209

209

00:09:12.840  -->  00:09:15.350
And you have to refer to that backing field
210

210

00:09:15.350  -->  00:09:17.250
when you write a custom setter or getter
211

211

00:09:17.250  -->  00:09:21.880
you can't return or set the value of the property directly.
212

212

00:09:21.880  -->  00:09:23.570
However, note that if you don't
213

213

00:09:23.570  -->  00:09:25.560
need to set or get the property value
214

214

00:09:25.560  -->  00:09:27.830
in a custom accessor then the backing field
215

215

00:09:27.830  -->  00:09:29.200
won't be generated.
216

216

00:09:29.200  -->  00:09:31.240
So for example you might have a custom get
217

217

00:09:31.240  -->  00:09:33.870
that doesn't rely on the value of the property.
218

218

00:09:33.870  -->  00:09:35.830
It might calculate the value that
219

219

00:09:35.830  -->  00:09:38.060
it's going to return on the fly.
220

220

00:09:38.060  -->  00:09:41.000
So if you don't reference the property in the get,
221

221

00:09:41.000  -->  00:09:44.040
then in that case the backing field won't be generated.
222

222

00:09:44.040  -->  00:09:46.440
But in our case, we do need the backing field
223

223

00:09:46.440  -->  00:09:48.100
because we are going to refer to
224

224

00:09:48.100  -->  00:09:51.240
the value of full-time and the way to refer
225

225

00:09:51.240  -->  00:09:55.510
to the backing field is to use the field identifier.
226

226

00:09:55.510  -->  00:09:58.500
Now custom accessors are the only situation
227

227

00:09:58.500  -->  00:10:00.470
in which we can use the field identifiers
228

228

00:10:00.470  -->  00:10:03.520
so let's see how that looks, we'll add our custom get.
229

229

00:10:03.520  -->  00:10:04.990
So we'll say get...
230

230

00:10:06.600  -->  00:10:10.140
and we're going to print something out like I said,
231

231

00:10:10.140  -->  00:10:14.090
kind of silly running the custom get
232

232

00:10:15.170  -->  00:10:17.900
and then we'll just return the value of the property
233

233

00:10:17.900  -->  00:10:20.900
but we have to do it by referencing the backing field
234

234

00:10:20.900  -->  00:10:23.480
using the field identifier.
235

235

00:10:23.480  -->  00:10:25.723
So this is the only place that we can
236

236

00:10:25.723  -->  00:10:28.246
access the backing field directly
237

237

00:10:28.246  -->  00:10:32.960
and we refer to it using the identifier field.
238

238

00:10:32.960  -->  00:10:34.830
Okay so there were a few times up here
239

239

00:10:34.830  -->  00:10:37.110
where we're actually getting the full-time
240

240

00:10:37.110  -->  00:10:39.290
and when we do this, this is now going
241

241

00:10:39.290  -->  00:10:41.300
to call our custom get.
242

242

00:10:41.300  -->  00:10:43.760
So let's run, and we should see
243

243

00:10:43.760  -->  00:10:45.300
running the custom get printed
244

244

00:10:45.300  -->  00:10:47.963
every time we get the value now.
245

245

00:10:50.700  -->  00:10:52.870
And you'll see that we do, every time we
246

246

00:10:52.870  -->  00:10:54.940
go to get the value of full-time we see
247

247

00:10:54.940  -->  00:10:57.580
running the custom get and then the value is returned.
248

248

00:10:57.580  -->  00:11:00.450
Now of course we can do the same thing with set.
249

249

00:11:00.450  -->  00:11:02.550
Our implementations are trivial
250

250

00:11:02.550  -->  00:11:04.160
but they demonstrate how to write
251

251

00:11:04.160  -->  00:11:05.510
custom getters and setters.
252

252

00:11:05.510  -->  00:11:07.100
So let's write our custom set
253

253

00:11:07.100  -->  00:11:08.827
and it starts off with set and this time
254

254

00:11:08.827  -->  00:11:11.930
you want to accept a value and then we'll
255

255

00:11:11.930  -->  00:11:13.470
do the same thing we did before,
256

256

00:11:13.470  -->  00:11:16.070
we'll just say running the custom set
257

257

00:11:16.070  -->  00:11:19.900
and now we'll set the property
258

258

00:11:19.900  -->  00:11:23.160
and we do this once again by referring to the field
259

259

00:11:23.160  -->  00:11:25.313
and we say field equals value.
260

260

00:11:26.200  -->  00:11:29.120
So what we're doing here is doing the silly print
261

261

00:11:29.120  -->  00:11:31.050
and then we're assigning the property,
262

262

00:11:31.050  -->  00:11:33.400
the backing field for the property,
263

263

00:11:33.400  -->  00:11:35.160
with the value that was passed to the set.
264

264

00:11:35.160  -->  00:11:36.263
So let's run.
265

265

00:11:39.370  -->  00:11:41.310
And now we just see this once
266

266

00:11:41.310  -->  00:11:43.238
because the only time that we're actually setting
267

267

00:11:43.238  -->  00:11:46.600
the full-time field is here for John.
268

268

00:11:46.600  -->  00:11:49.660
So we don't see the custom print line
269

269

00:11:49.660  -->  00:11:52.740
printed for Joe and Jane,
270

270

00:11:52.740  -->  00:11:54.340
but we do for John.
271

271

00:11:54.340  -->  00:11:57.540
Now maybe you expected it to be called three times,
272

272

00:11:57.540  -->  00:12:00.670
but of course for Joe and Jane
273

273

00:12:00.670  -->  00:12:02.010
the only time we're setting it
274

274

00:12:02.010  -->  00:12:03.550
is when we call the constructor
275

275

00:12:03.550  -->  00:12:04.970
and the constructor doesn't use
276

276

00:12:04.970  -->  00:12:06.910
the second get to set the values.
277

277

00:12:06.910  -->  00:12:08.420
So if you wanted to do more when
278

278

00:12:08.420  -->  00:12:10.400
the instance is constructed rather than
279

279

00:12:10.400  -->  00:12:13.520
just set the property values as we saw earlier,
280

280

00:12:13.520  -->  00:12:15.830
for that you would use an init block.
281

281

00:12:15.830  -->  00:12:18.840
Okay that's it for properties and
282

282

00:12:18.840  -->  00:12:21.350
the backing field and setters and getters.
283

283

00:12:21.350  -->  00:12:23.160
I'm gonna stop the video now and we'll
284

284

00:12:23.160  -->  00:12:26.833
continue our discussion of classes in the next video.
