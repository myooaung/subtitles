WEBVTT
1
1

00:00:04.730  -->  00:00:07.160
so I just wanted to make a quick video
2

2

00:00:07.160  -->  00:00:09.980
about inline functions because we're
3

3

00:00:09.980  -->  00:00:12.860
going to see inline functions shortly
4

4

00:00:12.860  -->  00:00:14.360
and you need to understand what they are
5

5

00:00:14.360  -->  00:00:16.369
now as you might guess from the name
6

6

00:00:16.369  -->  00:00:19.189
when an inline function is compiled its
7

7

00:00:19.189  -->  00:00:21.680
body is directly substituted for the
8

8

00:00:21.680  -->  00:00:23.869
function call in other words it's not
9

9

00:00:23.869  -->  00:00:26.570
compiled to a function at all it's
10

10

00:00:26.570  -->  00:00:28.849
compiled to its body
11

11

00:00:28.849  -->  00:00:31.669
now inlining is often done when a
12

12

00:00:31.669  -->  00:00:34.399
function has a lambda expression for a
13

13

00:00:34.399  -->  00:00:36.649
parameter because lambdas require the
14

14

00:00:36.649  -->  00:00:38.840
creation of a class and an object under
15

15

00:00:38.840  -->  00:00:39.590
the covers
16

16

00:00:39.590  -->  00:00:42.080
so by inlining a function that takes a
17

17

00:00:42.080  -->  00:00:44.390
lambda this extra overhead isn't
18

18

00:00:44.390  -->  00:00:46.730
required not all functions can be
19

19

00:00:46.730  -->  00:00:49.130
inlined it will depend on how any
20

20

00:00:49.130  -->  00:00:51.530
function parameters are being used now
21

21

00:00:51.530  -->  00:00:54.410
the JVM is really good at optimizing
22

22

00:00:54.410  -->  00:00:57.350
functions so it'll often inline
23

23

00:00:57.350  -->  00:00:59.300
functions for you when it thinks it will
24

24

00:00:59.300  -->  00:01:01.070
benefit the application even if you
25

25

00:01:01.070  -->  00:01:02.870
haven't asked for a function to be
26

26

00:01:02.870  -->  00:01:05.420
inlined so just because you haven't
27

27

00:01:05.420  -->  00:01:06.979
declared a function as an inline
28

28

00:01:06.979  -->  00:01:08.540
function that doesn't mean it won't be
29

29

00:01:08.540  -->  00:01:09.139
inlined
30

30

00:01:09.139  -->  00:01:11.270
the JVM might decide that there would be
31

31

00:01:11.270  -->  00:01:13.850
great benefit to inline it and it will
32

32

00:01:13.850  -->  00:01:15.889
go ahead and do that now as I said we're
33

33

00:01:15.889  -->  00:01:17.810
going to discuss inline functions a bit
34

34

00:01:17.810  -->  00:01:20.539
more later but for now if you want to
35

35

00:01:20.539  -->  00:01:22.429
function to be inlined you just have to
36

36

00:01:22.429  -->  00:01:25.100
add the inline keyword and you add it
37

37

00:01:25.100  -->  00:01:27.979
before the fun keyword so let's go ahead
38

38

00:01:27.979  -->  00:01:30.429
and inline our label multiply function
39

39

00:01:30.429  -->  00:01:34.639
so all we have to do is add in line to
40

40

00:01:34.639  -->  00:01:36.829
the front of the function and when we do
41

41

00:01:36.829  -->  00:01:39.229
that whenever you add the inline keyword
42

42

00:01:39.229  -->  00:01:41.329
the compiler will check to see if it
43

43

00:01:41.329  -->  00:01:43.429
thinks there will be a benefit so if we
44

44

00:01:43.429  -->  00:01:45.709
hover our mouse over here it'll say
45

45

00:01:45.709  -->  00:01:48.579
expected performance impact of inlining
46

46

00:01:48.579  -->  00:01:51.590
public you know blah blah blah can be
47

47

00:01:51.590  -->  00:01:54.499
insignificant and as it says and as I've
48

48

00:01:54.499  -->  00:01:56.899
said in lining works best for functions
49

49

00:01:56.899  -->  00:01:59.479
with lambda parameters so in this case
50

50

00:01:59.479  -->  00:02:00.950
the compiler is telling us you know
51

51

00:02:00.950  -->  00:02:02.329
there's no point using the inline
52

52

00:02:02.329  -->  00:02:04.009
function because you're not gonna get
53

53

00:02:04.009  -->  00:02:06.829
any benefit from it so you might as well
54

54

00:02:06.829  -->  00:02:09.590
just keep it as a regular function but I
55

55

00:02:09.590  -->  00:02:11.569
just wanted to show you where to put the
56

56

00:02:11.569  -->  00:02:14.030
keyword and I wanted to bring up inline
57

57

00:02:14.030  -->  00:02:15.890
functions now because you'll need to
58

58

00:02:15.890  -->  00:02:17.819
understand what they are when we look
59

59

00:02:17.819  -->  00:02:20.159
at something called reified parameters
60

60

00:02:20.159  -->  00:02:23.400
when we cover generics so all you have
61

61

00:02:23.400  -->  00:02:25.980
to understand about inline functions in
62

62

00:02:25.980  -->  00:02:28.560
addition to how to declare them is that
63

63

00:02:28.560  -->  00:02:30.749
when you have an inline function the
64

64

00:02:30.749  -->  00:02:33.239
function body will be directly generated
65

65

00:02:33.239  -->  00:02:35.280
into the byte code wherever the function
66

66

00:02:35.280  -->  00:02:38.519
is called rather than having a function
67

67

00:02:38.519  -->  00:02:40.469
call okay so that's it for inline
68

68

00:02:40.469  -->  00:02:43.430
functions for now
