WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.170 --> 00:00:02.295
Okay guys.

00:00:02.295 --> 00:00:04.935
So in the previous video,

00:00:04.935 --> 00:00:10.365
we set in place the basic structure of our back-end server.

00:00:10.365 --> 00:00:15.750
Now we need to move forward and basically need to sit

00:00:15.750 --> 00:00:23.000
the infrastructure of sending emails using our Gmail account,

00:00:23.000 --> 00:00:27.510
of course, from the spring boat up.

00:00:27.640 --> 00:00:30.890
So in order to do this,

00:00:30.890 --> 00:00:35.450
we need to navigate to the contact controller next

00:00:35.450 --> 00:00:40.400
to the existing go contact test method.

00:00:40.400 --> 00:00:47.040
And set in place a new method that will be annotated with both mapping.

00:00:47.440 --> 00:00:56.340
And let's use the slash send, email or text.

00:01:02.980 --> 00:01:10.260
This method will return a response entity and let's call it send email.

00:01:11.530 --> 00:01:13.835
And for the moment,

00:01:13.835 --> 00:01:22.445
let's just return a new response entity of type void.

00:01:22.445 --> 00:01:27.335
And let's use the HTTP status that created.

00:01:27.335 --> 00:01:31.020
So 2n1 response.

00:01:33.160 --> 00:01:39.300
Now we need to implement actual business logic for this method.

00:01:40.450 --> 00:01:45.880
But an important aspect to notice that

00:01:45.880 --> 00:01:53.620
the sent email will need to basically map this contact form data.

00:01:53.620 --> 00:01:57.850
So when the user will click on this contact form,

00:01:57.850 --> 00:02:02.770
all these fields should be transferred to the backend server.

00:02:02.770 --> 00:02:06.760
And we need a way or another to basically transform

00:02:06.760 --> 00:02:13.120
this data into something that spring we'll be able to recognize.

00:02:13.120 --> 00:02:19.160
So let's create a new package called back-end model.

00:02:19.740 --> 00:02:23.350
And under this package,

00:02:23.350 --> 00:02:28.250
we need to set a simple class.

00:02:28.320 --> 00:02:38.275
And let's call this class quantum form dq from Contact Form Data Transfer object.

00:02:38.275 --> 00:02:43.510
And over here, let's define some variables.

00:02:43.510 --> 00:02:47.260
Private soon name, Dr. assume,

00:02:47.260 --> 00:02:55.630
email, the subject, and also the message.

00:02:55.630 --> 00:02:57.595
So if you recall,

00:02:57.595 --> 00:03:02.740
all these four fields are present in the contact form and will

00:03:02.740 --> 00:03:08.930
transfer all of them to this backend springboard Java application.

00:03:09.030 --> 00:03:13.765
I said the simple constructor for this.

00:03:13.765 --> 00:03:18.920
Let's also generate getters and setter methods.

00:03:25.050 --> 00:03:34.255
And let's also create a constructor will fields.

00:03:34.255 --> 00:03:37.840
So I selected all four fields.

00:03:37.840 --> 00:03:41.110
And basically we have everything in place

00:03:41.110 --> 00:03:50.025
now yet or setters and the constructor and constructor with fields.

00:03:50.025 --> 00:03:56.510
So when will we invoke the send email method?

00:03:56.510 --> 00:04:02.850
We also receive the contact form dto.

00:04:04.210 --> 00:04:08.525
Let's call the variable contact form DQ.

00:04:08.525 --> 00:04:10.610
And this is annotated, of course,

00:04:10.610 --> 00:04:12.930
with the request body

00:04:16.750 --> 00:04:25.650
so that the data manipulation will be made automatically.

00:04:33.060 --> 00:04:38.930
Now we need to implement the business logic.

00:04:39.180 --> 00:04:41.425
Send emails.

00:04:41.425 --> 00:04:47.605
And for this, I created a backend service package.

00:04:47.605 --> 00:04:52.360
And under the surface package will create a simple class.

00:04:52.360 --> 00:04:55.970
Let's call it email service.

00:04:59.010 --> 00:05:02.890
So this ML service,

00:05:02.890 --> 00:05:08.030
we need to be annotated with service stereotype.

00:05:10.620 --> 00:05:13.760
So let's do this.

00:05:18.180 --> 00:05:23.710
And let's also set in place or login mechanism.

00:05:23.710 --> 00:05:27.820
So log or log or we'll use the log

00:05:27.820 --> 00:05:36.800
Manager get lager of email service class.

00:05:41.400 --> 00:05:51.260
Let's import the corresponding package from the or Gopesh.

00:05:56.220 --> 00:06:01.504
Now in order to actually send emails,

00:06:01.504 --> 00:06:10.640
we need to auto wire the Java mayor law senders specific component.

00:06:10.640 --> 00:06:13.430
And let's call it email sender.

00:06:13.430 --> 00:06:17.360
So this is available due to the fact that we imported

00:06:17.360 --> 00:06:21.680
the male dependency in our home XML file.

00:06:21.680 --> 00:06:26.270
And this Java mail sender requires

00:06:26.270 --> 00:06:31.820
some properties that we need to set under the application properties.

00:06:31.820 --> 00:06:34.655
So basically over here we need to set

00:06:34.655 --> 00:06:41.300
the specific Gmail properties so that we'll be able to send emails using this bring good.

00:06:41.300 --> 00:06:43.069
Conserver.

00:06:43.069 --> 00:06:50.460
So the fourth property will be spring male host, MSB gmail.com.

00:06:51.580 --> 00:06:59.100
We to use the spring male port, 587.

00:06:59.410 --> 00:07:02.825
Spring male username.

00:07:02.825 --> 00:07:09.500
I created those simple email address for testing this functionality.

00:07:09.500 --> 00:07:16.040
So don't think that this is my actual email address, is once again,

00:07:16.040 --> 00:07:25.745
just for testing spring male password.

00:07:25.745 --> 00:07:27.770
And of course our blog,

00:07:27.770 --> 00:07:35.450
this, it's not safe to expose passwords.

00:07:35.450 --> 00:07:40.085
So I set up the email corresponding password.

00:07:40.085 --> 00:07:43.760
And now the spring male properties,

00:07:43.760 --> 00:07:48.870
mile MST p set to true.

00:07:49.570 --> 00:07:53.390
And spring male properties,

00:07:53.390 --> 00:08:01.985
male MSP, startup, TLS enabled through.

00:08:01.985 --> 00:08:05.900
So this should be all the properties that you

00:08:05.900 --> 00:08:11.550
need in order to set in order to send e-mails.

00:08:12.610 --> 00:08:18.500
And of course, if you want to use your own email, a password,

00:08:18.500 --> 00:08:21.200
you can configure the username and

00:08:21.200 --> 00:08:25.445
password properties with whatever Gmail account that you

00:08:25.445 --> 00:08:35.915
have goes all the properties are in place now for the application properties.

00:08:35.915 --> 00:08:40.740
And let's move back to a more service.

00:08:46.120 --> 00:08:54.650
And we'll need to define a variable here that will

00:08:54.650 --> 00:09:03.035
be set automatically with the value that we configured under the application properties.

00:09:03.035 --> 00:09:08.640
So this will take the value that we set for our spin male username.

00:09:10.990 --> 00:09:17.700
So this will send e-mails to that particular username.

00:09:22.660 --> 00:09:26.794
And now let's define a method.

00:09:26.794 --> 00:09:28.730
Avoid method.

00:09:28.730 --> 00:09:34.290
Name sent. We receive a contact form dto.

00:09:39.460 --> 00:09:42.275
And under this method,

00:09:42.275 --> 00:09:44.120
we need to set in place

00:09:44.120 --> 00:09:49.925
the entire infrastructure to properly compute the email and send it

00:09:49.925 --> 00:10:00.810
to the variable that we set under the email to online 21.

00:10:01.000 --> 00:10:04.145
So in order to prepare an email,

00:10:04.145 --> 00:10:09.300
we need mime message preparatory.

00:10:13.360 --> 00:10:16.070
We instantiated.

00:10:16.070 --> 00:10:19.460
And basically we need to override

00:10:19.460 --> 00:10:27.030
the prepare method that receive as parameter of my message.

00:10:27.130 --> 00:10:35.810
And over here we just need to set data under this my messenger reference.

00:10:35.810 --> 00:10:39.725
So the first thing is to set the recipient.

00:10:39.725 --> 00:10:44.880
So Message recipient type t2.

00:10:45.280 --> 00:10:56.100
So this will basically set in place who will actually see the email?

00:10:57.840 --> 00:11:00.250
Email too, if you recall,

00:11:00.250 --> 00:11:07.780
we set it on line 2526. This case.

00:11:07.780 --> 00:11:10.765
Now for the my message,

00:11:10.765 --> 00:11:16.060
we need to set the subject and for the subject will,

00:11:16.060 --> 00:11:21.470
will extract the data from the contact form dq yields subject.

00:11:27.720 --> 00:11:33.350
Now, my message helper.

00:11:35.730 --> 00:11:41.690
We will see in a few moments why we set this.

00:11:42.160 --> 00:11:45.230
So this my message helper Where the CDO,

00:11:45.230 --> 00:11:51.780
my message and true as parameters.

00:11:53.590 --> 00:11:56.930
And now let's use this helper.

00:11:56.930 --> 00:12:03.150
So help or dot set text.

00:12:08.170 --> 00:12:12.710
Let's remove this and

00:12:12.710 --> 00:12:19.160
basically compute the body

00:12:19.160 --> 00:12:23.910
of our email in an HTML format.

00:12:25.620 --> 00:12:33.325
So we'll go with HTML tag, a body tag,

00:12:33.325 --> 00:12:35.290
a strike to format this,

00:12:35.290 --> 00:12:44.060
submit a plus sign.

00:12:52.710 --> 00:12:59.995
I think we need to format it in this way to be more, more visible.

00:12:59.995 --> 00:13:06.260
Okay, good, looks much better now of

00:13:06.260 --> 00:13:13.955
indentation to see how this HTML body format will be created.

00:13:13.955 --> 00:13:17.310
So under the body tag,

00:13:17.590 --> 00:13:28.310
set in place something like email sent by and we need the email that will be extracted.

00:13:28.310 --> 00:13:30.965
Actually, let's go with the name first.

00:13:30.965 --> 00:13:34.530
So conduct formative yo getName.

00:13:36.430 --> 00:13:42.240
Well, so set the BR tag for end of line.

00:13:44.530 --> 00:13:48.720
And let's use now that email address.

00:13:48.940 --> 00:13:53.390
So email address, contact one, dto dot,

00:13:53.390 --> 00:14:02.640
get email as go into plus here.

00:14:03.220 --> 00:14:10.500
Let's use to be our tags to make some space in our email.

00:14:14.590 --> 00:14:22.280
And let's see, we also extract the message sent by the user from the contact,

00:14:22.280 --> 00:14:25.980
from the DDO get message.

00:14:26.290 --> 00:14:34.220
And of course, we need to close the body and also the HTML

00:14:34.220 --> 00:14:42.020
tags as

00:14:42.020 --> 00:14:45.570
the soma additional indentation here.

00:14:45.580 --> 00:14:47.990
Let's not forget about

00:14:47.990 --> 00:14:51.270
the HTML tag

00:14:55.870 --> 00:15:02.915
or k as this.

00:15:02.915 --> 00:15:07.560
And basically now looks much better.

00:15:12.750 --> 00:15:19.225
And now after the subtext willing to also add the true,

00:15:19.225 --> 00:15:26.215
since this will inform the helper that this message will be of type

00:15:26.215 --> 00:15:35.350
of HTML so that the email will be properly handled in this way.

00:15:35.350 --> 00:15:44.780
So although specific HTML tags will be transformed or responsibly.

00:15:45.150 --> 00:15:51.235
And now we need to use the email sender,

00:15:51.235 --> 00:15:55.225
send and just send the data.

00:15:55.225 --> 00:15:59.935
And of course, if any issues that might appear,

00:15:59.935 --> 00:16:04.640
we need to catch any exceptions.

00:16:09.720 --> 00:16:14.095
Blogger, dot info, email sent with success.

00:16:14.095 --> 00:16:17.230
And in case of any errors,

00:16:17.230 --> 00:16:27.350
let's login error here and throw the exception.

00:16:27.360 --> 00:16:29.590
So in the next video,

00:16:29.590 --> 00:16:36.830
we'll test this functionality to see if it works or not.
