WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.860
Under this video, we will need to connect a front-end side of

00:00:04.860 --> 00:00:12.550
our contact form with the backend side that we just created under the previous video.

00:00:12.710 --> 00:00:17.370
So we need to navigate to

00:00:17.370 --> 00:00:26.230
our Visual Studio code and open a new terminal.

00:00:34.240 --> 00:00:39.005
And over here, we need to generate the new service.

00:00:39.005 --> 00:00:49.654
So n g generate surveys, services, splash contact.

00:00:49.654 --> 00:01:01.110
So this contact surface will be set under the services folder solver here.

00:01:05.080 --> 00:01:11.870
And under this contact service yes file.

00:01:11.870 --> 00:01:15.200
We need to set in place the business logic to

00:01:15.200 --> 00:01:19.070
interact with the backend Spring boot server.

00:01:19.070 --> 00:01:23.645
So let's set in place a new method called send

00:01:23.645 --> 00:01:30.330
email that will receive a contact form dq of type any.

00:01:31.750 --> 00:01:36.870
And we return on observable of any.

00:01:42.640 --> 00:01:52.085
And in order to properly send requests from the front-end app to the backend server.

00:01:52.085 --> 00:01:56.070
We need to use the HTTP client.

00:01:56.620 --> 00:02:06.890
So let's go to our app module Ts and import the HTTP Client module.

00:02:06.890 --> 00:02:10.470
Under the imports array.

00:02:12.160 --> 00:02:15.815
Since using this HTTP Client module,

00:02:15.815 --> 00:02:19.820
we will be able to send and receive

00:02:19.820 --> 00:02:26.420
JSON request and response between a client and a server.

00:02:26.420 --> 00:02:33.875
The client being our front-end app and the server being our Spring boot server.

00:02:33.875 --> 00:02:40.680
Let's import this HTTP Client module from the Angular common HTTP.

00:02:41.830 --> 00:02:46.230
Now back to the contact service Ts.

00:02:46.810 --> 00:02:53.070
We have an issue over there on the constructor.

00:02:53.500 --> 00:02:56.570
And since this is not fixed,

00:02:56.570 --> 00:02:58.070
let's just go and import

00:02:58.070 --> 00:03:00.109
the HTTP

00:03:00.109 --> 00:03:09.560
client at

00:03:09.560 --> 00:03:16.745
angular common HTTP package.

00:03:16.745 --> 00:03:21.020
And constructor issue has been fixed.

00:03:21.020 --> 00:03:24.575
Now inside the send email method,

00:03:24.575 --> 00:03:28.565
let's invoke this HTTP post.

00:03:28.565 --> 00:03:33.710
And let's use the HTTP local host 8084,

00:03:33.710 --> 00:03:39.755
our back-end server API contact and email address.

00:03:39.755 --> 00:03:48.840
And we will also send the contact form DQ in this post request.

00:03:52.180 --> 00:03:57.210
So you'll see it contact from dto is required.

00:04:00.040 --> 00:04:11.160
Now we need to actually invoke this method from the contact component.

00:04:13.450 --> 00:04:18.470
So we navigated to the contact component ds.

00:04:18.470 --> 00:04:22.640
And let's define a new method.

00:04:22.640 --> 00:04:27.600
Let's call it send email of type void.

00:04:30.910 --> 00:04:37.940
And inside this method will need to compute basically the contact form dq.

00:04:37.940 --> 00:04:40.684
So this will be our object.

00:04:40.684 --> 00:04:49.895
And the name will be this contact form model name that value.

00:04:49.895 --> 00:04:56.765
So we will extract a value corresponding to the contact form model name field.

00:04:56.765 --> 00:05:00.000
Similar for the email,

00:05:02.260 --> 00:05:05.180
same thing for the message,

00:05:05.180 --> 00:05:09.750
but of course using the contact form modal message value.

00:05:13.540 --> 00:05:16.920
And for the subject,

00:05:17.230 --> 00:05:22.290
this contact form model subject value.

00:05:22.660 --> 00:05:27.185
So we have the contact form detour in place.

00:05:27.185 --> 00:05:36.630
We need to pass it to the contact service DS file.

00:05:41.170 --> 00:05:50.225
But of course the first thing to do is to import the contact service.

00:05:50.225 --> 00:06:01.610
So under this constructor defined our private contact service of type contacts service.

00:06:01.610 --> 00:06:06.390
So we are injecting code doc service here.

00:06:06.520 --> 00:06:11.520
They use the send email law method.

00:06:16.840 --> 00:06:21.090
And let's also import the contact service.

00:06:27.700 --> 00:06:34.744
So import con, decked

00:06:34.744 --> 00:06:46.500
surveys from source app services, contact dot service.

00:06:46.960 --> 00:06:55.140
So the service has been injected under the contact type script file.

00:06:56.740 --> 00:07:00.839
And now let's execute the request.

00:07:04.300 --> 00:07:11.880
So this, that contact surveys that send email.

00:07:12.220 --> 00:07:17.240
And we'll pass the previously created contact

00:07:17.240 --> 00:07:22.440
from the D0 and invoke the subscribe method.

00:07:23.650 --> 00:07:27.005
Missing data.

00:07:27.005 --> 00:07:30.239
So the success,

00:07:30.300 --> 00:07:33.594
the event will be handled later.

00:07:33.594 --> 00:07:40.315
And let's handle the case where we encounter on error.

00:07:40.315 --> 00:07:45.670
Let's do our console lock here with

00:07:45.670 --> 00:07:51.950
error and JSON stringify for the entire error.

00:08:01.860 --> 00:08:09.175
And in order to properly expose an informative message to the user,

00:08:09.175 --> 00:08:14.360
let's define an info message variable of type string.

00:08:14.940 --> 00:08:21.910
And over here let's set the informed message with something descriptive.

00:08:21.910 --> 00:08:26.090
Every something like email sent with success.

00:08:27.690 --> 00:08:31.405
And on the air side,

00:08:31.405 --> 00:08:38.335
this informed message equals error or sending email.

00:08:38.335 --> 00:08:46.580
And of course we need to expose this message somehow in the HTML4.

00:08:48.150 --> 00:08:52.520
So let's scroll a bit up.

00:08:55.270 --> 00:09:00.290
Define a block for the informed message statement.

00:09:00.290 --> 00:09:10.200
So over here, just after the modal body as defined statement.

00:09:12.220 --> 00:09:17.250
So div class row alert,

00:09:20.680 --> 00:09:29.459
alert, primary, that all will be alert.

00:09:30.610 --> 00:09:38.700
And the statement will only be shown if we have something under the info message string.

00:09:38.700 --> 00:09:42.384
So we use the ng-if statement.

00:09:42.384 --> 00:09:50.390
Inside this development, we will define another div and expose the info message.

00:09:54.810 --> 00:09:57.220
So far so good.

00:09:57.220 --> 00:10:01.780
So we are using the Send Email method to

00:10:01.780 --> 00:10:07.820
basically send an email from the front-end app to the backend app.

00:10:09.930 --> 00:10:16.675
But we will also need a place to actually invoke this send email.

00:10:16.675 --> 00:10:19.374
And what a better place,

00:10:19.374 --> 00:10:22.415
but this pattern click event.

00:10:22.415 --> 00:10:25.590
So send email.

00:10:29.200 --> 00:10:36.515
And now I think we're ready for a quick demo to see how this works.

00:10:36.515 --> 00:10:44.600
So of course, you need to save the HTML and also the type script file.

00:10:44.600 --> 00:10:50.360
And let's add a simple demo here, John,

00:10:50.360 --> 00:10:56.135
John test gmail.com, a subject in the message.

00:10:56.135 --> 00:11:03.305
And let's click on the Send to see what's happening.

00:11:03.305 --> 00:11:08.915
And you see that we encountered on air or sending email.

00:11:08.915 --> 00:11:11.795
So why this might happen?

00:11:11.795 --> 00:11:16.530
This happens due to the fact that we need to

00:11:16.840 --> 00:11:24.949
implement the mechanisms so that we can communicate from the front-end,

00:11:24.949 --> 00:11:30.920
back-end application and enable this course policy.

00:11:30.920 --> 00:11:34.740
So we'll do this under the next video.
