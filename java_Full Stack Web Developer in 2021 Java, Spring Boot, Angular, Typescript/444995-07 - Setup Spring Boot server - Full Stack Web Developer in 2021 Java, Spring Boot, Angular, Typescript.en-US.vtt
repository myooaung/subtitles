WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.250
So under the previous video,

00:00:02.250 --> 00:00:06.615
we set in place the HTML part of our contact form.

00:00:06.615 --> 00:00:11.970
But I think you already noticed that that even

00:00:11.970 --> 00:00:16.575
if we complete the contact form and click on the submit button,

00:00:16.575 --> 00:00:18.595
actually on the send button.

00:00:18.595 --> 00:00:23.810
Nothing basically happens since we don't have any specific business logic to

00:00:23.810 --> 00:00:31.490
handle the case where we submit a contact form and actually send and receive an email.

00:00:31.490 --> 00:00:33.410
So let me show you,

00:00:33.410 --> 00:00:36.770
click on the Send mapping happens.

00:00:36.770 --> 00:00:38.690
So under this video,

00:00:38.690 --> 00:00:43.325
our main focus is to create a Spring Boot back-end server,

00:00:43.325 --> 00:00:50.780
at least the initial configuration to set up the infrastructure to handle this.

00:00:50.780 --> 00:00:53.630
So let's navigate to start,

00:00:53.630 --> 00:00:55.295
does bring that I0,

00:00:55.295 --> 00:01:01.710
the main Springer initializer page to define a project.

00:01:02.890 --> 00:01:05.210
So for the project,

00:01:05.210 --> 00:01:09.275
we need to choose my own project or the language.

00:01:09.275 --> 00:01:11.270
We will go with Java.

00:01:11.270 --> 00:01:14.399
On the springboard version.

00:01:14.410 --> 00:01:17.570
We'll go with to that.

00:01:17.570 --> 00:01:23.810
Free, free for the project metadata

00:01:23.810 --> 00:01:28.985
on the group as the top cone project artifact backend name,

00:01:28.985 --> 00:01:34.385
backend, specific description, a package name,

00:01:34.385 --> 00:01:39.215
calm that back-end packaging will be set to jar.

00:01:39.215 --> 00:01:44.735
And for the Java version that we can work with this,

00:01:44.735 --> 00:01:51.260
Java 11 were not interested now in the dependency,

00:01:51.260 --> 00:01:56.720
since the dependencies will be set no manual way regenerate the project.

00:01:56.720 --> 00:02:05.345
Now, wait a few seconds for this to furnish.

00:02:05.345 --> 00:02:12.650
And you see that I have a back-end zip file and I need to extract it.

00:02:12.650 --> 00:02:17.780
So at extracted it next to the front-end folder.

00:02:17.780 --> 00:02:24.995
So this is straightforward spring Botox Java application based on Maven.

00:02:24.995 --> 00:02:32.315
And you see that I have imported it under spring Tools Suite ID using

00:02:32.315 --> 00:02:40.590
this import functionality and selected the existing Maven project and the backend folder.

00:02:43.810 --> 00:02:50.060
So once again, this is just a plain or Spring Boot Java app.

00:02:50.060 --> 00:02:53.105
We can start it here.

00:02:53.105 --> 00:02:56.480
And let's see what is happening.

00:02:56.480 --> 00:03:01.910
Basically, not much since the application has

00:03:01.910 --> 00:03:07.965
started and and already finished its execution.

00:03:07.965 --> 00:03:09.880
So let's go under

00:03:09.880 --> 00:03:19.820
the bomb dot XML file and add some manual dependencies.

00:03:20.370 --> 00:03:27.160
First, I would like to add a dependency to keep the application up and

00:03:27.160 --> 00:03:33.880
running using embedded Tomcat server.

00:03:33.880 --> 00:03:36.340
So for the dependency,

00:03:36.340 --> 00:03:43.130
I will select the group ideas or Spring framework boot.

00:03:46.830 --> 00:03:54.390
And for the artifact will go with Spring Boot, Starter web.

00:03:57.850 --> 00:04:09.410
And as a second abundancy org sprint for a more.

00:04:09.410 --> 00:04:19.715
I want to set up the infrastructure to be able to send e-mails from sprinkled app.

00:04:19.715 --> 00:04:27.210
So Spring Boot, starter, male.

00:04:28.480 --> 00:04:31.505
So very simple.

00:04:31.505 --> 00:04:35.310
Now let's clean the logs.

00:04:35.310 --> 00:04:38.370
Are the soft application.

00:04:41.680 --> 00:04:46.230
Springboard app is started.

00:04:47.380 --> 00:04:51.450
And you can see now that

00:04:51.520 --> 00:04:57.065
an embedded Tomcat server is running on port

00:04:57.065 --> 00:05:02.910
8080 and basically keeps our application up and running.

00:05:06.790 --> 00:05:10.310
So let's minimize this.

00:05:10.310 --> 00:05:18.350
And local host 8080 and bone,

00:05:18.350 --> 00:05:21.350
we have the white label error page.

00:05:21.350 --> 00:05:29.045
This is something that we expect since we don't have any way to just urinate,

00:05:29.045 --> 00:05:31.950
are all requests so far.

00:05:32.440 --> 00:05:35.510
So in order to do this,

00:05:35.510 --> 00:05:38.880
let's create a simple package.

00:05:40.390 --> 00:05:45.065
And we can call it calm,

00:05:45.065 --> 00:05:49.770
not backend, and controller.

00:05:51.220 --> 00:05:56.610
And inside this, we can create a simple class.

00:05:56.610 --> 00:06:01.460
Let's call it the contact controller.

00:06:06.690 --> 00:06:15.130
Let's increase the font size order to properly C. And this contact controller class needs

00:06:15.130 --> 00:06:23.454
to be annotated with rest controller to handle along specific requests.

00:06:23.454 --> 00:06:29.710
And also that's annotated with requests mapping so that we

00:06:29.710 --> 00:06:39.110
can access this controller navigating to API, contact to URL.

00:06:43.230 --> 00:06:51.324
Let's set in place a method that will be annotated with get mapping.

00:06:51.324 --> 00:06:56.425
So this will respond to HTTP GET requests.

00:06:56.425 --> 00:07:01.250
So you can test it using your browser.

00:07:01.380 --> 00:07:04.820
So public string.

00:07:08.430 --> 00:07:13.249
And let's call it contact.

00:07:13.800 --> 00:07:17.210
Actually contact test.

00:07:19.260 --> 00:07:22.545
It's important get mapping.

00:07:22.545 --> 00:07:24.680
And as a simple test,

00:07:24.680 --> 00:07:29.790
let's return a string contact tests.

00:07:30.280 --> 00:07:34.055
Now let's restart the application.

00:07:34.055 --> 00:07:36.185
So I stopped it,

00:07:36.185 --> 00:07:43.530
cleared the logs and start springboard app. Once again.

00:07:44.350 --> 00:07:47.270
Good application has started,

00:07:47.270 --> 00:07:52.325
and let's go to our browser and test this simple request.

00:07:52.325 --> 00:07:58.339
So local host 8080, API, contact.

00:07:58.339 --> 00:08:02.280
And you see the contact test in place.
