WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.160
Hey guys, if you recall,

00:00:02.160 --> 00:00:03.495
in the previous video,

00:00:03.495 --> 00:00:08.775
we had this specific course policy issue when we tried to

00:00:08.775 --> 00:00:14.760
communicate from the front-end application to our backend server.

00:00:14.760 --> 00:00:19.330
So we need to somehow fix this.

00:00:19.340 --> 00:00:23.550
And in order to properly fix this into goto,

00:00:23.550 --> 00:00:26.415
our Spring Boot Java application.

00:00:26.415 --> 00:00:28.180
And let's stop.

00:00:28.180 --> 00:00:34.715
We're now let's create a new package.

00:00:34.715 --> 00:00:39.870
And we'll call this com back-end component.

00:00:40.420 --> 00:00:45.500
And under this package will set in place

00:00:45.500 --> 00:00:51.720
a new class that will be called corals component.

00:00:52.150 --> 00:00:57.690
And this will need to be annotated with the components stereotype.

00:01:02.680 --> 00:01:10.400
Over here, we need to set in place a new method that will return or filtering.

00:01:10.400 --> 00:01:16.295
One being of course filter.

00:01:16.295 --> 00:01:21.239
And the method, let's call it the courts filter.

00:01:22.210 --> 00:01:28.459
Reimported course filter from the Spring framework.

00:01:28.459 --> 00:01:35.190
And this will be annotated with the bin stereotype.

00:01:35.380 --> 00:01:45.180
Under this method will need to set in place on URL based course configurations source.

00:01:47.650 --> 00:01:52.350
So I instantiated this object.

00:01:52.480 --> 00:02:00.845
The next thing we need to do is to set the course configuration.

00:02:00.845 --> 00:02:04.640
So I define CORS configuration variable called

00:02:04.640 --> 00:02:09.500
configuration and instantiate that this object.

00:02:09.500 --> 00:02:13.430
And using these courts configuration will be able

00:02:13.430 --> 00:02:18.425
to set in place specific properties such as

00:02:18.425 --> 00:02:20.970
allow credentials

00:02:25.150 --> 00:02:29.375
will also allow regions,

00:02:29.375 --> 00:02:33.995
so-called shuns, single donor list.

00:02:33.995 --> 00:02:39.875
And for using this symbol

00:02:39.875 --> 00:02:46.290
will allow origins from four, basically anything.

00:02:48.700 --> 00:02:51.740
Now for the configuration,

00:02:51.740 --> 00:02:56.430
we need to define the polo headers.

00:02:56.680 --> 00:03:01.880
And for this we need to set in place some Arrays, Lists,

00:03:01.880 --> 00:03:05.570
and specific header such as Origen,

00:03:05.570 --> 00:03:09.660
content time and accept.

00:03:12.580 --> 00:03:17.555
And now for the aloud methods.

00:03:17.555 --> 00:03:21.935
Once again the arrays as list.

00:03:21.935 --> 00:03:25.385
And we'll set in place multiple methods,

00:03:25.385 --> 00:03:34.235
even if we invoke only post an Spring Boot app.

00:03:34.235 --> 00:03:35.870
So I set, get,

00:03:35.870 --> 00:03:39.930
post, put, delete and options.

00:03:41.290 --> 00:03:43.550
Now for the source,

00:03:43.550 --> 00:03:47.070
we need to register the CORS configuration.

00:03:53.440 --> 00:03:57.750
And as a final step,

00:03:58.390 --> 00:04:05.300
have to set the filter registration been of course configuration.

00:04:05.300 --> 00:04:08.940
And let's call this variable beam,

00:04:09.130 --> 00:04:16.355
will define a new filter registration when and where receive as parameter.

00:04:16.355 --> 00:04:20.645
Of course, filter of source,

00:04:20.645 --> 00:04:26.104
source being the URL based course or regulation source.

00:04:26.104 --> 00:04:36.005
And you see that we have an issue over here and we need to fix it.

00:04:36.005 --> 00:04:39.930
Let's see what's the exact problem.

00:04:45.930 --> 00:04:50.815
But first, let's set the bin set order,

00:04:50.815 --> 00:04:56.665
order highest precedence, and return the bin.

00:04:56.665 --> 00:05:04.195
So if you took a look on the corresponding problem that we face earlier,

00:05:04.195 --> 00:05:07.900
we need to import

00:05:07.900 --> 00:05:15.445
the package or using this filter registration been.

00:05:15.445 --> 00:05:19.090
So over here, we need to remove

00:05:19.090 --> 00:05:24.884
the reactive package and import the URL based cones configuration source

00:05:24.884 --> 00:05:30.690
from the what courts package.

00:05:31.240 --> 00:05:36.215
So let's start this spring both though,

00:05:36.215 --> 00:05:37.940
Java app once again,

00:05:37.940 --> 00:05:41.240
since the course component is in place.

00:05:41.240 --> 00:05:47.730
And we should be able to communicate from the front-end app to the backend server.

00:05:48.640 --> 00:05:53.120
So the server has started.

00:05:53.120 --> 00:05:56.165
Plus clear the logs.

00:05:56.165 --> 00:06:06.695
And let's click on the Send button once again. And you see that.

00:06:06.695 --> 00:06:09.180
And we'll have a narrower,

00:06:11.230 --> 00:06:16.890
let's check the network.

00:06:17.440 --> 00:06:20.640
Increase this a bit.

00:06:22.540 --> 00:06:26.640
We haven't received any email.

00:06:26.740 --> 00:06:30.540
This is previous email.

00:06:31.240 --> 00:06:38.600
And on the console you see the error 404. Oh, yeah.

00:06:38.600 --> 00:06:42.920
So the API contact email does not exist.

00:06:42.920 --> 00:06:46.805
It is in fact the API contact send email.

00:06:46.805 --> 00:06:53.420
So please Baker, take into account this.

00:06:53.790 --> 00:06:59.995
So the path, the correct path is API contact, send email.

00:06:59.995 --> 00:07:03.070
And we need to update our from ten,

00:07:03.070 --> 00:07:08.799
the Angular app to properly use this URL.

00:07:08.799 --> 00:07:14.480
So API, contact, send, email, save this.

00:07:17.490 --> 00:07:24.620
Now, let's add some data on there, our contact form.

00:07:25.320 --> 00:07:30.070
So jump test or

00:07:30.070 --> 00:07:36.605
the subject test sub or the message test mess.

00:07:36.605 --> 00:07:40.710
And you see the e-mail sent with success.

00:07:42.640 --> 00:07:46.940
Things are going a sink way.

00:07:46.940 --> 00:07:52.220
So we don't need to wait for the message to be actually send.

00:07:52.220 --> 00:07:56.000
And over here you see that we are able to receive the message.

00:07:56.000 --> 00:08:00.830
So the front-end Angular app, our contact form,

00:08:00.830 --> 00:08:03.755
is able to communicate the backend server,

00:08:03.755 --> 00:08:07.100
a Spring Boot back in the app.

00:08:07.100 --> 00:08:14.160
And using Gmail, we are able to actually send e-mails from our contact form.

00:08:15.790 --> 00:08:22.805
But I would like to make a few adjustments to this UI,

00:08:22.805 --> 00:08:32.720
such as the fields will need to be removed in case the form has been submitted.

00:08:32.720 --> 00:08:38.240
And also let's try to make some small tweaks,

00:08:38.240 --> 00:08:41.820
but you will see them in the next video.
