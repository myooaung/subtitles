1
00:00:01,340 --> 00:00:02,210
[Autogenerated] hello.

2
00:00:02,210 --> 00:00:07,450
Welcome to this model about spring aspect oriented programming after having

3
00:00:07,450 --> 00:00:10,320
been introduced to the main concepts that are used by a.

4
00:00:10,320 --> 00:00:14,220
Opie will move now to effectively demonstrate how to

5
00:00:14,220 --> 00:00:16,980
write code that uses Spring A or B.

6
00:00:16,980 --> 00:00:22,810
So let me further what we're going to do to demonstrate

7
00:00:22,810 --> 00:00:26,250
the effective usage of Spring A or B.

8
00:00:26,250 --> 00:00:27,030
First,

9
00:00:27,030 --> 00:00:31,130
we'll show how spring GOP aspect are implemented using

10
00:00:31,130 --> 00:00:35,040
regular classes and XML based configuration,

11
00:00:35,040 --> 00:00:37,550
then will show how to use aspect.

12
00:00:37,550 --> 00:00:37,700
Yeah,

13
00:00:37,700 --> 00:00:43,890
notations to declare a regular gela classes as aspects will effectively use

14
00:00:43,890 --> 00:00:48,340
the mainspring GOP annotations toe build clear examples.

15
00:00:48,340 --> 00:00:53,630
Our examples will implement or diagonal behavior for normal execution,

16
00:00:53,630 --> 00:00:56,360
or they will implement or tonal behavior.

17
00:00:56,360 --> 00:01:01,840
For exceptions,

18
00:01:01,840 --> 00:01:05,560
we moved to the code and show a few starting spring applications

19
00:01:05,560 --> 00:01:09,170
examples on which we're going to add the spring.

20
00:01:09,170 --> 00:01:12,470
A Opie functionality.

21
00:01:12,470 --> 00:01:15,930
The spring application contains a passenger class having an I.

22
00:01:15,930 --> 00:01:16,530
D.

23
00:01:16,530 --> 00:01:22,740
A constructor, a getter and the two string method.

24
00:01:22,740 --> 00:01:26,270
We would like to simulate the implementation of the dowel,

25
00:01:26,270 --> 00:01:30,040
or data access object design pattern.

26
00:01:30,040 --> 00:01:35,030
The passenger dollar interface declares a get passenger method that

27
00:01:35,030 --> 00:01:39,740
is receiving as argument the I D of the passenger.

28
00:01:39,740 --> 00:01:44,680
We implement this interface through the passenger doll in class.

29
00:01:44,680 --> 00:01:49,440
This one will contain the map of the passengers that have already been retreat.

30
00:01:49,440 --> 00:01:53,970
If the passenger already exists inside the map, we take it from there.

31
00:01:53,970 --> 00:01:58,640
Otherwise we constructed and put it in the map.

32
00:01:58,640 --> 00:01:59,500
For the moment,

33
00:01:59,500 --> 00:02:03,630
we are content to create the passenger with the help of the constructor.

34
00:02:03,630 --> 00:02:08,540
Instead of effectively introducing persistence layer,

35
00:02:08,540 --> 00:02:10,680
we will do this at a later time.

36
00:02:10,680 --> 00:02:14,360
The current approach is enough to demonstrate the spring a Opie

37
00:02:14,360 --> 00:02:18,780
cassettes In order to work with the spring application,

38
00:02:18,780 --> 00:02:25,140
we added This spring dash contact dependency into the poem XML dependency file.

39
00:02:25,140 --> 00:02:28,680
It is enough for the moment will add more specific spring a

40
00:02:28,680 --> 00:02:33,890
Opie dependencies at a later time looking in the AARP dot

41
00:02:33,890 --> 00:02:35,850
xml beings definition file.

42
00:02:35,850 --> 00:02:39,710
We see that for the moment there is one single been introducing the

43
00:02:39,710 --> 00:02:46,690
container passenger doll of type passenger now empty.

44
00:02:46,690 --> 00:02:50,340
The current functionality will only create the context.

45
00:02:50,340 --> 00:02:54,670
Get the best singer that old bean get the passenger with its help,

46
00:02:54,670 --> 00:02:57,190
then close the context.

47
00:02:57,190 --> 00:03:03,110
Let's see how this works.

48
00:03:03,110 --> 00:03:09,130
So we are getting the best singer having i d one and we

49
00:03:09,130 --> 00:03:11,110
would like to introduce the spring.

50
00:03:11,110 --> 00:03:14,600
It'll be functionality with the help of XML scheme are

51
00:03:14,600 --> 00:03:19,150
based with great aspect implementing using regular

52
00:03:19,150 --> 00:03:24,240
classes and configured through XML.

53
00:03:24,240 --> 00:03:28,260
First, we'll add the needed spring A O.

54
00:03:28,260 --> 00:03:31,800
P and spring aspects.

55
00:03:31,800 --> 00:03:40,380
Dependencies to the prom dot xml file will greet the logging aspect class that

56
00:03:40,380 --> 00:03:46,490
will contain a longer as a private field and two methods the before method to

57
00:03:46,490 --> 00:03:51,750
be executed before calling some other method and the after method to be

58
00:03:51,750 --> 00:03:58,040
executed after having called some other method.

59
00:03:58,040 --> 00:04:03,690
What remains to be done in the aspects configuration through XML we need

60
00:04:03,690 --> 00:04:08,050
to add have been corresponding to the looking aspect.

61
00:04:08,050 --> 00:04:14,240
It belongs to the logging aspect class.

62
00:04:14,240 --> 00:04:22,370
We need to add the GOP name space and the corresponding X s d XML is Kmart

63
00:04:22,370 --> 00:04:27,160
definition where we'll find the definition of the a o.

64
00:04:27,160 --> 00:04:27,510
P.

65
00:04:27,510 --> 00:04:33,540
Name space and we add this a Opie configuration.

66
00:04:33,540 --> 00:04:38,990
We declare that we have a new aspect with the i d looking aspect referencing

67
00:04:38,990 --> 00:04:44,670
to the previously defined logging aspect being the point Got has I D passenger

68
00:04:44,670 --> 00:04:51,140
method and its corresponding expression is the execution of any method

69
00:04:51,140 --> 00:04:54,360
matching this pattern a method corresponding.

70
00:04:54,360 --> 00:04:59,710
Tow the com dot parasite dot spring GOP dot example one package.

71
00:04:59,710 --> 00:05:03,940
The metal may have any arguments and may return anything,

72
00:05:03,940 --> 00:05:05,940
and before this point got reference.

73
00:05:05,940 --> 00:05:09,740
Passenger method we execute before method.

74
00:05:09,740 --> 00:05:16,080
After this point cut reference passenger method, we execute the aftermath.

75
00:05:16,080 --> 00:05:23,340
Let's see now how the application works and we're getting the

76
00:05:23,340 --> 00:05:33,000
orthogonal functionality provided by the lower aspect with the help of XML scheme I based configuration.

