WEBVTT
1
00:00:02.600 --> 00:00:04.770
[Autogenerated] we may now move to the next way of

2
00:00:04.770 --> 00:00:07.850
working with spring GOP introductions.

3
00:00:07.850 --> 00:00:13.740
More exactly the declarative way of advising objects and in particular

4
00:00:13.740 --> 00:00:20.940
to the work with the declare parents annotation.

5
00:00:20.940 --> 00:00:23.900
We have this flight class having to private fields

6
00:00:23.900 --> 00:00:26.300
String I D and string Company.

7
00:00:26.300 --> 00:00:30.840
The class also has yet hers and centers for the fields.

8
00:00:30.840 --> 00:00:34.210
We have the flyer interface containing three methods.

9
00:00:34.210 --> 00:00:40.000
Take off fly and land and the flower in class that implements the flower

10
00:00:40.000 --> 00:00:46.080
interface and overrides the three methods take off fly and land flare imp

11
00:00:46.080 --> 00:00:48.640
will only implement the flower in their face.

12
00:00:48.640 --> 00:00:53.160
He does not need to extend delegating introduction interceptor any

13
00:00:53.160 --> 00:00:59.040
longer as it was a case of working programmatically the

14
00:00:59.040 --> 00:01:03.000
configuration of the application switched from the XML alternative

15
00:01:03.000 --> 00:01:05.340
to this Java based alternative.

16
00:01:05.340 --> 00:01:10.220
You see that this class is annotated with configuration to show its

17
00:01:10.220 --> 00:01:15.240
destination and with enable aspect J auto proxy.

18
00:01:15.240 --> 00:01:20.340
This is the equivalent of the a o P Aspect J Dash auto proxy

19
00:01:20.340 --> 00:01:24.040
directive and enables the aspect J support,

20
00:01:24.040 --> 00:01:28.790
he declares one method annotated with being so that it will create one

21
00:01:28.790 --> 00:01:33.880
being Toby injected into the application for the beginning.

22
00:01:33.880 --> 00:01:36.960
The Flyer test class declares the context configuration Toby,

23
00:01:36.960 --> 00:01:39.340
the one defined by the convict lass.

24
00:01:39.340 --> 00:01:40.780
In order to do this,

25
00:01:40.780 --> 00:01:45.240
it is an irritated with extend with spring extension dot class

26
00:01:45.240 --> 00:01:48.800
and this context configuration having the configuration class

27
00:01:48.800 --> 00:01:50.620
calm dot parasite that spring.

28
00:01:50.620 --> 00:01:54.640
GOP dot flies management don't convict dot config.

29
00:01:54.640 --> 00:02:01.880
The test expects an auto wire flight instance and uses it for a few operations.

30
00:02:01.880 --> 00:02:10.340
Let's run the test.

31
00:02:10.340 --> 00:02:16.240
The test run successfully, and it prints the I D and the company of the flight.

32
00:02:16.240 --> 00:02:20.750
We will now move to the demonstration of using Spring Europea introductions.

33
00:02:20.750 --> 00:02:22.440
Decoratively,

34
00:02:22.440 --> 00:02:26.400
we create the com dot parasites those spring GOP dot flights

35
00:02:26.400 --> 00:02:30.890
management that aspects package Inside it,

36
00:02:30.890 --> 00:02:35.340
we are creating the flight aspect class.

37
00:02:35.340 --> 00:02:41.840
We annotate this class with aspect and introduce a flyer flight field

38
00:02:41.840 --> 00:02:46.990
annotated with declare parents value com dot parasite thought,

39
00:02:46.990 --> 00:02:51.740
spring GOP Thought flights management dot domaine dot flight

40
00:02:51.740 --> 00:02:55.390
and the fourth attempt flier dot Class.

41
00:02:55.390 --> 00:02:58.950
This means that the flight field will have a new parent,

42
00:02:58.950 --> 00:03:00.350
the flower interface,

43
00:03:00.350 --> 00:03:05.090
and it's the fourth Implementation will be a flower in object.

44
00:03:05.090 --> 00:03:05.920
To delegate to.

45
00:03:05.920 --> 00:03:10.580
It will add a new flight aspect being the configuration.

46
00:03:10.580 --> 00:03:14.040
Toby injected in the application.

47
00:03:14.040 --> 00:03:17.730
We moved back to the flyer test and we check the fact that the

48
00:03:17.730 --> 00:03:20.840
auto wired flight is an instance of flyer,

49
00:03:20.840 --> 00:03:25.240
and we also try to execute the action specific to the flyer,

50
00:03:25.240 --> 00:03:33.240
take off fly and land.

51
00:03:33.240 --> 00:03:39.040
But that's run the test,

52
00:03:39.040 --> 00:03:43.520
that this is green and we see that the flight is successfully taking off.

53
00:03:43.520 --> 00:03:46.540
Flying and landing.

54
00:03:46.540 --> 00:03:50.240
Is the auto wired flight an instance of flour imp?

55
00:03:50.240 --> 00:03:52.170
No, of course not.

56
00:03:52.170 --> 00:03:56.090
The flight object belongs to a class that extends flight.

57
00:03:56.090 --> 00:03:59.590
Remember, Java does not allow multiple inheritance,

58
00:03:59.590 --> 00:04:05.090
so as long as we extend flight, we cannot extend any other class.

59
00:04:05.090 --> 00:04:09.160
But we implement the flower interface and we delegate

60
00:04:09.160 --> 00:04:16.940
to a contained flyer and object.

61
00:04:16.940 --> 00:04:20.340
But which is the effective class of the proxy flight object?

62
00:04:20.340 --> 00:04:23.640
That's jacket.

63
00:04:23.640 --> 00:04:36.530
We're on the test and we see that the effective class of proxy flight is calm.

64
00:04:36.530 --> 00:04:37.400
The parasite.

65
00:04:37.400 --> 00:04:42.630
The spring GOP dot flies management dot domaine dot flight Dollar dollar

66
00:04:42.630 --> 00:04:49.310
enhancer by spring CG lib dollar dollar nine to be f to be five d.

67
00:04:49.310 --> 00:04:52.500
The name showed that is a class dynamically generated at

68
00:04:52.500 --> 00:04:55.640
runtime by spring framework using CG leap,

69
00:04:55.640 --> 00:04:59.560
the usage of the dollar door sign is allowed in the Java class.

70
00:04:59.560 --> 00:05:05.340
Names the numeric offset nine to be F to be five d

71
00:05:05.340 --> 00:05:07.770
Makes this class name unique tow.

72
00:05:07.770 --> 00:05:13.080
Avoid conflicts with existing classes.

73
00:05:13.080 --> 00:05:16.160
Let's have a second look at the structure of classes that is

74
00:05:16.160 --> 00:05:19.330
built behind the curtain by spring a O.

75
00:05:19.330 --> 00:05:20.040
P.

76
00:05:20.040 --> 00:05:23.540
It is the same as in the case of working programmatically,

77
00:05:23.540 --> 00:05:27.360
but it is worse reviewing What have we done so far,

78
00:05:27.360 --> 00:05:30.390
we have created a flower interface and its

79
00:05:30.390 --> 00:05:33.980
implementation flare imp and a flight class.

80
00:05:33.980 --> 00:05:36.520
What did the spring GOP framework do?

81
00:05:36.520 --> 00:05:42.040
It has created a proxy flight class that directly extends our flight class,

82
00:05:42.040 --> 00:05:45.030
and it also implements the flyer interface.

83
00:05:45.030 --> 00:05:50.950
A proxy flight has a flower, in instance, so it can delegate behavior to it.

84
00:05:50.950 --> 00:05:56.500
This way we may conclude that the proxy flight class acts as a flight and as a

85
00:05:56.500 --> 00:06:00.610
flier and in particular by delegating tow the flower imp.

86
00:06:00.610 --> 00:06:03.740
It may also act as a flower imp,

87
00:06:03.740 --> 00:06:09.210
so we may say that we obtained a mixing a special type of multiple inheritance.

88
00:06:09.210 --> 00:06:11.720
The proxy flight class constructed by the spring GOP

89
00:06:11.720 --> 00:06:14.340
framework is at the same time a flight.

90
00:06:14.340 --> 00:06:17.700
And the flyer we proved it acts like a flight.

91
00:06:17.700 --> 00:06:19.710
We were able to obtain its i.

92
00:06:19.710 --> 00:06:23.240
D and it's company and it asked like a flyer.

93
00:06:23.240 --> 00:06:24.890
We proved that it takes off.

94
00:06:24.890 --> 00:06:28.160
It flies and it Lance, how does it do it?

95
00:06:28.160 --> 00:06:30.650
It does it as a flower imp.

96
00:06:30.650 --> 00:06:36.030
The implementation we introduced.

97
00:06:36.030 --> 00:06:37.350
So how can I?

98
00:06:37.350 --> 00:06:39.260
Kemper the spring GOP introductions,

99
00:06:39.260 --> 00:06:42.840
programmatic approach and the D clarity of one.

100
00:06:42.840 --> 00:06:44.720
The decorative coat is shorter.

101
00:06:44.720 --> 00:06:48.350
You will live this aspect and the field annotated with the

102
00:06:48.350 --> 00:06:52.990
clear parents for the programmatic approach.

103
00:06:52.990 --> 00:06:56.720
We need to explicitly declare an adviser that extends the

104
00:06:56.720 --> 00:07:01.730
fort Introduction Advisor Make the flower imp class

105
00:07:01.730 --> 00:07:05.940
extent delegating introduction, interceptor.

106
00:07:05.940 --> 00:07:12.170
But to have full control on what we're doing for both approaches,

107
00:07:12.170 --> 00:07:17.520
we may use either the Spring XML configuration or the Java based alternative.

108
00:07:17.520 --> 00:07:21.290
We have used the XML one for the programmatic approach and

109
00:07:21.290 --> 00:07:23.710
Java based one for the decorative one.

110
00:07:23.710 --> 00:07:32.040
But we could have reversed them to conclude this model.

111
00:07:32.040 --> 00:07:36.590
We explain what the introduction is and what it is for.

112
00:07:36.590 --> 00:07:39.770
We started from a flight class needing to implement

113
00:07:39.770 --> 00:07:41.810
on additional flower interface,

114
00:07:41.810 --> 00:07:46.330
and we implemented this requirement by advising the object

115
00:07:46.330 --> 00:07:51.240
programmatically and by advising it decoratively,

116
00:07:51.240 --> 00:08:01.000
we comfort the programmatic and the clarity of approaches showing the advantages and disadvantages of each of them.

