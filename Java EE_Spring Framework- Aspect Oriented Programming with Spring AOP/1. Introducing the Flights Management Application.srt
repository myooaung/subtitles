1
00:00:00,940 --> 00:00:01,880
[Autogenerated] Hello.

2
00:00:01,880 --> 00:00:06,690
Welcome to this model about the implementation of crosscutting concerns.

3
00:00:06,690 --> 00:00:09,010
For normal execution,

4
00:00:09,010 --> 00:00:12,440
you're see howto build a real life application using

5
00:00:12,440 --> 00:00:14,640
the normal execution annotations.

6
00:00:14,640 --> 00:00:20,540
So the last move farther.

7
00:00:20,540 --> 00:00:24,460
What are going to do for our demonstration will introduce

8
00:00:24,460 --> 00:00:26,410
the flights management application.

9
00:00:26,410 --> 00:00:28,410
A program working with flights,

10
00:00:28,410 --> 00:00:34,420
passengers and tickets will implement a new feature working with aspect

11
00:00:34,420 --> 00:00:39,440
for the normal execution floor will work with Logan capabilities that

12
00:00:39,440 --> 00:00:43,040
track operations for flights and passengers.

13
00:00:43,040 --> 00:00:48,090
Well, great aspect that manage logging operations and will use normal execution.

14
00:00:48,090 --> 00:00:58,340
Annotations aspect Point got before After After returning around and order,

15
00:00:58,340 --> 00:01:02,110
we moved to the code and show a starting spring application

16
00:01:02,110 --> 00:01:06,200
that manages Flight's passengers and tickets.

17
00:01:06,200 --> 00:01:09,290
The flight class is described by the I D,

18
00:01:09,290 --> 00:01:13,200
which is a string by the company, which is also a string,

19
00:01:13,200 --> 00:01:16,740
and buy the list of passengers.

20
00:01:16,740 --> 00:01:21,230
We provide the others and sitters for these fields and the

21
00:01:21,230 --> 00:01:24,950
print method that passes through all the passengers in the

22
00:01:24,950 --> 00:01:28,240
list of passengers and prince them.

23
00:01:28,240 --> 00:01:31,400
A passenger is described by his or her name,

24
00:01:31,400 --> 00:01:36,110
which is a string and by the country, which is also a drink.

25
00:01:36,110 --> 00:01:41,010
We provide getters and centers for these fields and the print method that

26
00:01:41,010 --> 00:01:44,810
will print the name of the passenger and the country where he or she is

27
00:01:44,810 --> 00:01:48,730
from the ticket class contains the number,

28
00:01:48,730 --> 00:01:53,540
which is a string and the passenger that the ticket belongs to.

29
00:01:53,540 --> 00:01:56,180
We provide getters and centers for the fields,

30
00:01:56,180 --> 00:01:59,980
the emitting country method that returns the country of the passenger,

31
00:01:59,980 --> 00:02:04,610
that the ticket belongs toa and the overridden to string mattered.

32
00:02:04,610 --> 00:02:10,110
That is, just returns, ticket number and the number itself.

33
00:02:10,110 --> 00:02:14,610
Let's have a look into the AARP dot xml file that describes

34
00:02:14,610 --> 00:02:17,240
the beans that belonged to the application.

35
00:02:17,240 --> 00:02:20,840
We have a passenger, Jim from the United States.

36
00:02:20,840 --> 00:02:26,160
We have a passenger jack from the United Kingdom and have a passenger,

37
00:02:26,160 --> 00:02:28,440
Jill from Australia.

38
00:02:28,440 --> 00:02:32,440
All these three passengers have been introduced to the list

39
00:02:32,440 --> 00:02:35,430
of passengers of the flight with I D.

40
00:02:35,430 --> 00:02:43,040
A 1234 belonging to the company ABC flights,

41
00:02:43,040 --> 00:02:48,930
and there is one ticket belonging to the passenger Jim having the number

42
00:02:48,930 --> 00:02:57,340
1234567890 We remind that these beings arrive under the management of the

43
00:02:57,340 --> 00:03:01,640
spring container once the application is started.

44
00:03:01,640 --> 00:03:03,620
Let's have a look at the flights management

45
00:03:03,620 --> 00:03:06,490
application containing the main method.

46
00:03:06,490 --> 00:03:07,290
First,

47
00:03:07,290 --> 00:03:10,540
we load the context from the flights management slash AARP

48
00:03:10,540 --> 00:03:13,790
dot xml file that we have just seen.

49
00:03:13,790 --> 00:03:19,920
Then we are getting the being with the i d flight from inside the context.

50
00:03:19,920 --> 00:03:21,430
We are printing the flight.

51
00:03:21,430 --> 00:03:23,410
We are printing its i D.

52
00:03:23,410 --> 00:03:25,360
And we are sitting another i.

53
00:03:25,360 --> 00:03:26,340
D.

54
00:03:26,340 --> 00:03:29,880
We are printing the company that the flight belong stool

55
00:03:29,880 --> 00:03:32,510
and we passed through the list of passengers from the

56
00:03:32,510 --> 00:03:36,040
flight and we're printing them.

57
00:03:36,040 --> 00:03:37,020
Finally,

58
00:03:37,020 --> 00:03:41,150
we are getting from the context that being with the I D ticket

59
00:03:41,150 --> 00:03:43,940
and we are sitting another number for it,

60
00:03:43,940 --> 00:03:49,240
the last operation is closing the context.

61
00:03:49,240 --> 00:03:54,810
Let's see now how the application works.

62
00:03:54,810 --> 00:04:00,380
So we are getting various information about the passengers of the flight A

63
00:04:00,380 --> 00:04:12,000
1234 Our next goal will be to add crosscutting functionality. Tow the metals that we have just seen here in action

