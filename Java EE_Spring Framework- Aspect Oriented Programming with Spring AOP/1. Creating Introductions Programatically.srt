1
00:00:02,240 --> 00:00:03,160
[Autogenerated] Hello.

2
00:00:03,160 --> 00:00:07,010
Welcome to this model about spring GOP introductions.

3
00:00:07,010 --> 00:00:10,340
You'll see how we'll make our flights implement new interfaces

4
00:00:10,340 --> 00:00:13,300
at runtime with the help of this technique.

5
00:00:13,300 --> 00:00:19,840
So I will let off to the explanations and demonstration.

6
00:00:19,840 --> 00:00:22,440
What are going to discuss in this model?

7
00:00:22,440 --> 00:00:24,620
What is the introduction and what is it for?

8
00:00:24,620 --> 00:00:26,440
What can you help us to do?

9
00:00:26,440 --> 00:00:30,420
How we can advise objects programmatically with the help of the the

10
00:00:30,420 --> 00:00:33,330
40 Introduction Advisor delegating Introduction,

11
00:00:33,330 --> 00:00:36,180
interceptor and proxy factory classes.

12
00:00:36,180 --> 00:00:39,170
How we can advise objects decoratively with the help

13
00:00:39,170 --> 00:00:43,740
of the declare parents annotation.

14
00:00:43,740 --> 00:00:47,800
So what is an introduction and what is it for?

15
00:00:47,800 --> 00:00:52,550
Our introduction is a spring GOP technique to declare mixing types a

16
00:00:52,550 --> 00:00:55,930
mixing is a special type of multiple inheritance.

17
00:00:55,930 --> 00:01:01,000
You may use it when you would liketo add optional features for a class spring.

18
00:01:01,000 --> 00:01:03,500
GOP allows the introduction toe on advice,

19
00:01:03,500 --> 00:01:09,540
object of new interfaces and very corresponding implementation.

20
00:01:09,540 --> 00:01:11,280
How do you use introductions?

21
00:01:11,280 --> 00:01:14,550
We may face the situation when we need to work with some

22
00:01:14,550 --> 00:01:17,180
object flight in our left hand example.

23
00:01:17,180 --> 00:01:21,570
But we needed to implement an additional interface flyer in our right hand.

24
00:01:21,570 --> 00:01:22,300
Example.

25
00:01:22,300 --> 00:01:25,220
However, we cannot touch the code of the flight class.

26
00:01:25,220 --> 00:01:29,160
It is not available for change or it is possible that we would

27
00:01:29,160 --> 00:01:32,300
like only some particular object to implement the flyer

28
00:01:32,300 --> 00:01:36,040
interface as well and not the entire class.

29
00:01:36,040 --> 00:01:42,970
It is the appropriate situation to use a spring GOP introduction.

30
00:01:42,970 --> 00:01:46,970
Our demonstration will start with a flight class that will need

31
00:01:46,970 --> 00:01:49,400
to implement on additional flower interface.

32
00:01:49,400 --> 00:01:54,640
Will show how we can advise objects programmatically with the help of the

33
00:01:54,640 --> 00:01:57,810
default Introduction Advisor delegating introduction,

34
00:01:57,810 --> 00:02:02,530
interceptor and proxy factory classes and how we can advise

35
00:02:02,530 --> 00:02:06,180
objects decoratively with the help of the declare,

36
00:02:06,180 --> 00:02:08,110
parents and rotation.

37
00:02:08,110 --> 00:02:15,110
Well, then compare the programmatic and the clarity of approaches.

38
00:02:15,110 --> 00:02:20,030
We start with this flight class having to fills the string I d and the String

39
00:02:20,030 --> 00:02:24,940
Company for the fields we provide the Gators and the sitters.

40
00:02:24,940 --> 00:02:31,800
We also have the flyer interface having three methods take off fly and land.

41
00:02:31,800 --> 00:02:35,770
The flower interface is implemented by the flyer In plus,

42
00:02:35,770 --> 00:02:38,840
we also provide implementations for the three methods.

43
00:02:38,840 --> 00:02:42,730
Take off, fly and land our flare test.

44
00:02:42,730 --> 00:02:47,740
This class only accesses the context and gets a flight in stuffs.

45
00:02:47,740 --> 00:02:55,890
So we're expecting toe successfully run it the flight been

46
00:02:55,890 --> 00:03:00,790
is defined inside the GOP dot xml file, and it has two properties.

47
00:03:00,790 --> 00:03:07,240
The idea with Value A 1234 and the company with Value ABC flights.

48
00:03:07,240 --> 00:03:11,060
This is the initial spring application that will start with and would like to

49
00:03:11,060 --> 00:03:14,920
demonstrate the spring a Opie introductions capabilities.

50
00:03:14,920 --> 00:03:18,100
The flower in class needs to extend delegating,

51
00:03:18,100 --> 00:03:18,670
introduction,

52
00:03:18,670 --> 00:03:22,910
interceptor and implement the interface that you would like to be introduced.

53
00:03:22,910 --> 00:03:23,380
Flyer.

54
00:03:23,380 --> 00:03:26,340
In our case,

55
00:03:26,340 --> 00:03:30,240
we will need to add this flare Advisor class that extends the

56
00:03:30,240 --> 00:03:34,880
Fort Introduction Advisor These the Fort Introduction Advisor is

57
00:03:34,880 --> 00:03:38,830
that the fourth implementation for advisors that performs one or

58
00:03:38,830 --> 00:03:41,040
more a Opie introductions.

59
00:03:41,040 --> 00:03:44,380
It's constructor will receive as argument a flier in,

60
00:03:44,380 --> 00:03:47,780
for instance,

61
00:03:47,780 --> 00:03:52,440
we're moving out to the test to verify the mixing that has been created.

62
00:03:52,440 --> 00:03:56,740
We create the Flare Advisor instance.

63
00:03:56,740 --> 00:04:00,280
Then we create a new proxy factory object.

64
00:04:00,280 --> 00:04:02,770
This is a factory for a Opie proxies.

65
00:04:02,770 --> 00:04:07,520
Toby used programmatically proxy factory allows us to obtain and

66
00:04:07,520 --> 00:04:12,810
configure aopa proxy instances in our coat.

67
00:04:12,810 --> 00:04:17,690
We can figure the proxy factory instance toe have our flight being as target,

68
00:04:17,690 --> 00:04:22,650
and to advise using the flare adviser we have just created we need

69
00:04:22,650 --> 00:04:27,480
set optimize with through as an argument in order to use the CG

70
00:04:27,480 --> 00:04:34,540
leave strategy which is needed here, the proxy class will be a surplus of flight.

71
00:04:34,540 --> 00:04:39,640
We are extracting the proxy flight object from the proxy factory and

72
00:04:39,640 --> 00:04:42,740
we're asserting that it is an instance of flight.

73
00:04:42,740 --> 00:04:46,160
We would also like toe display the idea of the

74
00:04:46,160 --> 00:04:50,540
flight and the company of the flight.

75
00:04:50,540 --> 00:04:58,790
Now let's run the test.

76
00:04:58,790 --> 00:05:02,020
That test is green and you're getting the idea a

77
00:05:02,020 --> 00:05:05,840
1234 and the company ABC flights.

78
00:05:05,840 --> 00:05:10,340
So we have verified that it is indeed our flight.

79
00:05:10,340 --> 00:05:16,120
We move further and we check if the proxy flight object is a flyer itself.

80
00:05:16,120 --> 00:05:21,870
Then we check that it can act as a flier and we're executing the methods.

81
00:05:21,870 --> 00:05:29,310
Take off fly and land.

82
00:05:29,310 --> 00:05:34,540
Let's run the test.

83
00:05:34,540 --> 00:05:38,210
So we have checked that our proxy flight object is

84
00:05:38,210 --> 00:05:43,540
able to take off to fly and to land.

85
00:05:43,540 --> 00:05:44,530
Is it proxy flight?

86
00:05:44,530 --> 00:05:47,240
An instance of flair, Imp?

87
00:05:47,240 --> 00:05:49,200
No, of course not.

88
00:05:49,200 --> 00:05:53,520
The proceed flight object belongs to a class that extends flight.

89
00:05:53,520 --> 00:05:56,720
Remember, Jabba does not allow multiple inheritance,

90
00:05:56,720 --> 00:06:01,570
So as long as we extend flight, we cannot extend any other class,

91
00:06:01,570 --> 00:06:04,810
but we implement the flower interface and we delegate

92
00:06:04,810 --> 00:06:12,040
toe a contained flyer in object.

93
00:06:12,040 --> 00:06:15,540
But which is the effective class of the proxy flight object?

94
00:06:15,540 --> 00:06:18,320
Let's check it.

95
00:06:18,320 --> 00:06:19,070
We are running again.

96
00:06:19,070 --> 00:06:29,680
The test, the effective class of proxy flight is prom,

97
00:06:29,680 --> 00:06:33,090
not parole side, not spring europea dot flights management,

98
00:06:33,090 --> 00:06:37,160
not domaine dot flight Dollar Dollar a hand,

99
00:06:37,160 --> 00:06:44,050
sir by spring CJ lib Dollar dollar CB FB 67 to 4 The name

100
00:06:44,050 --> 00:06:47,800
showed that it is a class dynamically generated at runtime by

101
00:06:47,800 --> 00:06:50,130
spring framework Using CG Leap.

102
00:06:50,130 --> 00:06:54,600
The usage of the door door sign is allowed in the Java class names.

103
00:06:54,600 --> 00:07:01,430
The New America offset CB FB 67 24 makes this class name unique tow.

104
00:07:01,430 --> 00:07:07,200
Avoid conflicts with existing classes.

105
00:07:07,200 --> 00:07:10,880
Let's stop for a minute from the co demonstration and have a look at the

106
00:07:10,880 --> 00:07:14,750
structure of classes that is built behind the curtain by spring.

107
00:07:14,750 --> 00:07:15,740
GOP.

108
00:07:15,740 --> 00:07:17,390
What have we done so far,

109
00:07:17,390 --> 00:07:20,420
we have created a flower interface and its

110
00:07:20,420 --> 00:07:24,040
implementation Flare imp and a flight class.

111
00:07:24,040 --> 00:07:28,700
What the the Spring GOP framework do It has created a proxy flight

112
00:07:28,700 --> 00:07:31,980
class that directly extends our flight class,

113
00:07:31,980 --> 00:07:35,060
and it also implements the flyer interface.

114
00:07:35,060 --> 00:07:40,990
A proxy flight has a flower, in instance, so it can delegate behavior to it.

115
00:07:40,990 --> 00:07:46,530
This way we may conclude that the proxy flight class acts as a flight and as a

116
00:07:46,530 --> 00:07:50,640
flier and in particular by delegating tow the flower imp.

117
00:07:50,640 --> 00:07:53,840
It may also act as a flower empty,

118
00:07:53,840 --> 00:07:59,240
so we may say that we obtained a mixing a special type of multiple inheritance.

119
00:07:59,240 --> 00:08:01,750
The proxy flight class constructed by the spring GOP

120
00:08:01,750 --> 00:08:03,520
framework is at the same time.

121
00:08:03,520 --> 00:08:05,260
Ah, Flight and the Flyer.

122
00:08:05,260 --> 00:08:07,730
We proved it acts like a flight.

123
00:08:07,730 --> 00:08:10,090
We were able to obtain its I D.

124
00:08:10,090 --> 00:08:13,180
And it's company and it asked like a flyer.

125
00:08:13,180 --> 00:08:14,930
We proved that it takes off.

126
00:08:14,930 --> 00:08:18,190
It flies and it Lance, how does it do it?

127
00:08:18,190 --> 00:08:25,000
It does it as a flower imp. The implementation we introduced.

