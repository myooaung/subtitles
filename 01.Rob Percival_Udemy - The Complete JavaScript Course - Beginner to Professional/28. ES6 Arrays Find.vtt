WEBVTT

00:00.490 --> 00:05.920
In this lesson we're going to look at E-6 and array's and then new things that you can do with the race.

00:05.920 --> 00:09.790
There's a lot of really neat things that we saw earlier that we can do with the raise.

00:09.930 --> 00:12.640
And now with the six we can do even more.

00:12.840 --> 00:15.390
So let's first of all let's create an array.

00:15.390 --> 00:23.130
So we just use LET and let's create or my our array and we need some values contained within here.

00:23.220 --> 00:26.750
So let's put some random digits in there.

00:30.460 --> 00:34.110
So I've got some duplicates in there so let's just add those in.

00:34.240 --> 00:38.590
And now what we want to do is we want to use the find method.

00:38.740 --> 00:47.080
So previously Prete ESX would have done something like var and we could of.

00:47.090 --> 00:49.810
So if we want to get the number just do you.

00:49.880 --> 00:50.950
Var A.

00:51.080 --> 00:54.920
And we could loop through so we would take the my R.

00:54.920 --> 00:56.200
So the my array.

00:56.420 --> 01:09.090
And we could do find function passing an argument just pass an X and then as we find we hit return back

01:09.470 --> 01:16.640
and we could take a look until we actually find a number that notchers could look for X and we want

01:16.640 --> 01:23.240
one of these entries to be above 50 so whichever one is first then that's what we're going to return

01:23.240 --> 01:27.670
back and a and then we'll Konsole log out.

01:27.740 --> 01:28.700
So let's see what happens.

01:28.700 --> 01:35.840
So let's refresh it and we see that we continue through the array when till we find the one that actually

01:35.840 --> 01:38.170
matches the condition that we set out.

01:38.270 --> 01:42.710
And this is something that we could have done in the previous version of javascript as well.

01:42.710 --> 01:43.780
So this will work.

01:43.970 --> 01:50.120
And now with the A-6 we have a shorter format and we know that we really shortened a lot that we can

01:50.120 --> 01:51.260
do with functions.

01:51.260 --> 01:52.160
So that's what we want to do.

01:52.160 --> 01:57.110
Now let's shorten this and transform it into E.S. 6 format.

01:57.110 --> 02:01.160
So going back to what we learned about functions and the fact arrows.

02:01.280 --> 02:02.230
What do I do now.

02:02.230 --> 02:10.880
Pause the video and rewrite this little snippet of code and transform it into S six format.

02:11.690 --> 02:17.710
So go word and pause the video or show you the solution coming up so had an opportunity to try that

02:17.710 --> 02:18.220
out.

02:18.250 --> 02:23.990
So let's transform this one and we'll do B sort of a and my R.

02:24.220 --> 02:29.620
And we're going to start it the same way where we've got fined and the real difference is going to be

02:29.680 --> 02:30.860
what's actually going to be hit.

02:30.890 --> 02:36.850
Sitting in between the function because that's mainly what we can really transform.

02:36.850 --> 02:44.050
And we saw earlier that we can get rid of the word function altogether and if we're passing in an argument

02:44.320 --> 02:50.920
we can simply add the argument and use the fat arrows the equal sign and the greater than sign and then

02:50.980 --> 02:53.780
we're all ready to go to return a value.

02:53.860 --> 02:56.090
So we don't need return any more either.

02:56.230 --> 02:59.880
And we can just simply do X greater than 50.

03:00.000 --> 03:02.620
And while this looks a whole lot shorter.

03:02.770 --> 03:09.820
So let's see if it works or Consolmagno B this time and we see that these are actually identical but

03:09.850 --> 03:11.580
this looks a whole lot shorter.

03:11.590 --> 03:13.390
And this is ESX.

03:13.510 --> 03:15.940
So another thing that we've got new.

03:15.970 --> 03:18.900
So this one really isn't that new with the 6.

03:18.910 --> 03:24.130
The only thing that was new was the way that we're getting that phunk that function and simplifying

03:24.130 --> 03:26.040
the function code.

03:26.050 --> 03:29.330
So let's try another one so let's do let see.

03:29.350 --> 03:34.060
And this time what I want to do is I want to find the index value.

03:34.210 --> 03:41.160
So we know that we were returning back 89 but we want to know what 89 index is.

03:41.170 --> 03:47.250
And I know that I can see that here where I go 0 1 2 3 4 5.

03:47.320 --> 03:49.340
So we know that it should return back 5.

03:49.570 --> 03:50.470
So that's what we want to do.

03:50.470 --> 03:53.590
We want to use the brand new find index.

03:53.620 --> 04:02.420
So let's do my are to identify the array and this method is called find index.

04:02.680 --> 04:07.620
And then within here we can actually copy this and paste it in.

04:08.020 --> 04:10.340
And then next let's console log.

04:10.360 --> 04:10.870
See.

04:10.870 --> 04:15.130
So you can take a look and we can see if it's actually going to return back to the index or if it's

04:15.130 --> 04:17.170
going to throw an error or something like that.

04:17.350 --> 04:22.650
And in fact indeed it does return back that that index value.

04:22.660 --> 04:24.310
So I've got another challenge for you.

04:24.310 --> 04:30.280
So what I want you to do is pause the video and using the information here.

04:30.370 --> 04:37.300
Output eighty nine without actually grabbing at Solecki you don't know where 89 is located.

04:37.300 --> 04:39.160
You want to just do find index.

04:39.160 --> 04:49.960
So go ahead and add that in and find the index value that's associated with 89 or you can create your

04:49.960 --> 04:55.930
own array and create a bunch of values in that array and try to pick up one of them try to find that

04:55.960 --> 04:57.470
index value and output it.

04:57.610 --> 05:03.880
And then instead of putting the index value actually output the item value that's contained within their

05:03.880 --> 05:06.470
race you will see 89 we don't want to see five.

05:06.800 --> 05:08.920
So I say your solution for that.

05:08.920 --> 05:10.300
So the solution for that.

05:10.300 --> 05:17.020
So first of all we need to console log out and this one was something that we've done before where we

05:17.020 --> 05:25.790
know that my are and if we do a find index and I know I could just copy C there.

05:25.810 --> 05:31.270
But what I'm going to do is actually copy the whole statement there so I'm not going to take c I could

05:31.330 --> 05:36.160
just as easily just put C in there and we know that we've got the index and that we can return that

05:36.160 --> 05:36.730
back.

05:36.940 --> 05:43.900
So I know that that was relatively a trick question because we could just use C and it would have been

05:43.900 --> 05:47.930
a lot simpler so there wouldn't have been really anything new with ESX.

05:48.040 --> 05:50.960
If we're just using that index value going out in that.

05:51.190 --> 05:58.180
But instead we want to go and practice those short functions those fat arrows again for the functions

05:58.450 --> 06:03.560
and just get really familiar and comfortable with using them within our code.

06:05.360 --> 06:10.790
And there's one other thing that I want to show you within this lesson and this is going to be another

06:10.790 --> 06:13.480
really neat math.

06:13.520 --> 06:22.880
Another really neat component that's new with ESX and this is going to be that we can actually create

06:22.880 --> 06:31.220
an array so we can pass in a bunch of values bunch of arguments into an array and we can create or into

06:31.220 --> 06:34.100
a function and we can create an array out of it.

06:34.160 --> 06:39.500
So we're not going to pass in the arguments we're not going to try to pick those up and we're going

06:39.500 --> 06:43.200
to simply do a return and we're going to use array.

06:43.340 --> 06:46.600
So this is a global constructor for arrays.

06:46.610 --> 06:52.360
So basically if we do array and this is the new word that we want to look at from.

06:52.790 --> 07:02.650
So we need to pass some values that we need to return back and if we've got a set of values here

07:06.340 --> 07:08.560
and that's OK we'll just leave that up to that.

07:08.560 --> 07:11.820
So now if I want to use that I can do a lot.

07:11.890 --> 07:16.940
And let's let's use the next character so let D.

07:16.990 --> 07:17.400
And we're going to.

07:17.400 --> 07:22.480
You're going to we're going to use a brand new function that we've just created and we're going to pass

07:22.510 --> 07:32.630
that value over and we're going to let d equals to make an array and then console log that out so let's

07:33.080 --> 07:38.780
pause this refreshed and we see that we threw an error.

07:38.800 --> 07:41.060
So this isn't the way to do it.

07:41.140 --> 07:47.080
And what we ultimately really want to do is we want to pass these as arguments and then pick them up

07:47.140 --> 07:48.560
within the make.

07:48.670 --> 07:53.530
So do you remember earlier when we looked at how we can pick up those arguments.

07:53.590 --> 07:54.830
So what are we to do now.

07:54.850 --> 08:01.630
Pause the video and pick up these values as arguments and then added in here within that constructor

08:01.690 --> 08:03.370
and I'll show you that solution.

08:03.880 --> 08:08.310
So arguments and that's all it is.

08:08.360 --> 08:10.610
So we saw this earlier.

08:10.700 --> 08:16.370
We can that if we're not passing any arguments we can still pick up those values we'll just console

08:16.370 --> 08:17.320
log those.

08:17.570 --> 08:20.320
And I'll show you actually why it didn't work.

08:20.330 --> 08:24.850
So what's happening is that it's actually expecting something different.

08:24.850 --> 08:29.270
So if we do it within this type of format we're just passing these in.

08:29.300 --> 08:30.860
It's not an array format.

08:30.860 --> 08:35.100
It's not in the proper constructor format.

08:35.180 --> 08:39.240
In order to build that array from the arguments.

08:39.410 --> 08:43.510
And we pretty much have an array here anyway that we're passing through.

08:43.700 --> 08:50.510
So what we wanted to do is we wanted to get it more within that proper format and we get that when we

08:50.570 --> 08:55.900
look at arguments because we have the format within our within an array format.

08:56.000 --> 08:59.820
And that's why that one works and the earlier one did.

09:00.030 --> 09:05.600
So let's clear this up and let's there's one other change that I want to make.

09:05.750 --> 09:11.600
And also if you really want to parse it in into instead of picking up the arguments if you really want

09:11.600 --> 09:15.510
to construct it there and obviously it's not going to be as dynamic.

09:15.680 --> 09:20.920
You can use it within an array format so essentially you're passing it in as an array.

09:21.050 --> 09:25.880
And if you refresh it we can see that now we're still getting those same values.

09:25.880 --> 09:31.520
But for obvious reasons we don't want to do it within this type of format because this defeats the purpose

09:31.580 --> 09:38.300
of having dynamic capabilities within javascript and that makes it really really strict so no point

09:38.300 --> 09:42.140
to make an array if we already have that array values set up.

09:42.230 --> 09:46.630
And this is way more dynamic and gives us a lot more flexibility with the build.

09:47.030 --> 09:52.700
So one last thing and I want to apply what we looked at earlier where we're finding that index again

09:52.730 --> 09:56.360
because this is really important just get comfortable with writing the script.

09:56.360 --> 10:04.670
So what I want you to do is create your own array constructor here so make your own arrays and set a

10:04.670 --> 10:11.930
value and then pass some values into that function and return those back within D and then the other

10:11.930 --> 10:18.260
thing that I want you to do as well is pick up the index value of one of the items that you're passing

10:18.260 --> 10:18.980
in here.

10:18.980 --> 10:22.390
So it actually doesn't matter which one you could test to.

10:22.400 --> 10:28.100
You can do a test if you're using the same values as me and I'll quickly show you that solution coming

10:28.100 --> 10:29.430
up as well.

10:29.450 --> 10:36.110
So if you had an opportunity to try that out and the solution is pretty much what we did earlier so

10:36.110 --> 10:39.430
I just want to get you to get comfortable with writing it.

10:39.620 --> 10:44.510
And so we know that we need to specify the array name.

10:44.900 --> 10:47.670
And then we do find index.

10:48.110 --> 10:53.990
And then within here we have the option to go with more of the longer format that we saw earlier with

10:53.990 --> 10:54.690
function.

10:54.770 --> 10:58.280
Or we could do with the fat arrows.

10:58.370 --> 11:05.750
So to just do it with the arrows so we can just have our arguments or a parameter name there and look

11:05.750 --> 11:11.250
for a while a is equal to test 2.

11:11.450 --> 11:14.940
And that should pick up the index value of test 2.

11:14.950 --> 11:19.160
So it's a refresh it and we do see that test 2 is an index value.

11:19.160 --> 11:20.690
Number one.

11:20.810 --> 11:24.650
So go ahead and try this all out for yourself in the next lesson.

11:24.650 --> 11:26.310
I'm going to show even more you can do with the race.

11:26.320 --> 11:27.280
So that's coming up.
