WEBVTT

00:01.300 --> 00:04.990
So welcome back in I hope you had an opportunity to try it out.

00:05.020 --> 00:11.520
So we did want to create two more inputs and one of them would be a number.

00:11.740 --> 00:16.900
And the other one can just remain text but we're only going to get characters in here so let's call

00:16.900 --> 00:24.870
this one numb and let's call this one car S.H. cha.

00:25.210 --> 00:36.420
And in here let's add in some numbers and in here let's add in some characters.

00:36.470 --> 00:43.740
So now when we validate Let's get revalidate e-mail and we're going to validate the inputs.

00:43.760 --> 00:49.130
So we're going to validate all of the inputs to make sure that they have the proper content that we're

00:49.130 --> 00:50.890
expecting within those inputs.

00:51.020 --> 00:56.210
So remember again each one we've got different expectations and we've got to match different patterns

00:56.240 --> 00:56.910
for them.

00:58.850 --> 01:04.640
And let's use something different where we're going to use instead to get element by ID.

01:04.670 --> 01:08.370
So let's get an array of all the inputs so do I.

01:08.510 --> 01:18.510
And instead of get element by id let's do get elements and elements by tag name.

01:18.720 --> 01:24.030
So this is the one where we're actually going to get an array of elements being returned back and we're

01:24.030 --> 01:26.840
going to look for any that have the input tag.

01:27.000 --> 01:32.390
So it's going to pick up all of those elements there and we notice we've got one type of button.

01:32.520 --> 01:41.030
So we need to be specific that this has to be type text and we'll grab that within our conditions.

01:41.030 --> 01:46.160
So the next thing that we want to do is we want to loop through all of those inputs and then the last

01:46.160 --> 01:49.600
lesson we saw a quicker way to loop through our array.

01:49.640 --> 01:52.500
But we're going to default back to our FOR loop.

01:52.820 --> 02:01.160
So let's let's show X and loop while X is less than the length of II.

02:01.460 --> 02:08.880
And next we need to increment X so that we can break out of our loop.

02:08.960 --> 02:13.880
So there is or loop and we know that we're looping through all of those values.

02:13.880 --> 02:20.160
So the next thing that we need to do is we need to pick up the type of input that it is.

02:20.180 --> 02:22.280
So let's do our check.

02:22.700 --> 02:24.210
So now we have a condition here.

02:24.470 --> 02:27.980
And let's check to see the import type.

02:28.160 --> 02:33.640
So I and then X for the index and we can get the type there.

02:33.910 --> 02:35.940
So let's also console log.

02:35.990 --> 02:43.040
All of those inputs so that we can take a closer look as we go through them as we loop through them.

02:43.070 --> 02:45.460
So Konsole log all of those out.

02:45.590 --> 02:54.380
And let's take a look at the type and we're going to check to see if the type is equal to text and text

02:54.380 --> 02:55.750
is the one that we're looking for.

02:55.850 --> 03:00.590
So we're only looking to return the ones with text and those are the ones we actually want to do something

03:00.590 --> 03:01.190
with.

03:01.190 --> 03:07.850
So let's loop through and if it is equal to text then we know that we have one where we can do one of

03:07.850 --> 03:09.140
our conditions.

03:09.140 --> 03:15.990
So next we can see if the ID so we can apply a number of conditions here.

03:17.170 --> 03:25.540
So let's check to see if X ID and this is where we can be more more specific on what we're looking at.

03:25.570 --> 03:32.260
So we know that we have one that's called email and if it's email then we know within here we need to

03:32.260 --> 03:36.960
validate email valid email.

03:36.970 --> 03:39.760
So we need to check to see if it's got a valid e-mail.

03:39.790 --> 03:46.230
The next one we're going to check to see if it's got an ID of none.

03:46.360 --> 03:50.820
And then this one we're checking to see if it's got a valid number.

03:51.010 --> 04:02.680
And then lastly let's check to see if this one has an ID of S.H. A.

04:03.090 --> 04:07.980
And that's the ID there so this one is the one where we are going to get characters let's characters

04:08.040 --> 04:09.390
that's numbers.

04:09.510 --> 04:16.110
And now next thing we need to do and typically usually I like to write up functions in order to do this

04:16.110 --> 04:16.870
check.

04:16.950 --> 04:21.350
So there's a number of ways you can do it you could have a whole check here within here as well but

04:21.540 --> 04:25.170
let's write up separate functions in case we need to reuse them.

04:25.170 --> 04:34.830
So this one is going to be check email so see email and then we're going to get the value being passed

04:34.830 --> 04:36.390
in ASCII.

04:36.480 --> 04:38.190
So this one we'll check email.

04:38.220 --> 04:42.400
Next one will check number.

04:42.810 --> 04:45.470
Again we'll pass through that value.

04:46.200 --> 04:57.100
And then lastly let's do one more and this one is going to check to see if it's characters and again

04:57.100 --> 05:05.200
taken that value and there we're going to do our check to see if it's actually valid and return back

05:05.500 --> 05:07.220
if it's valid or not.

05:09.830 --> 05:15.320
So the first one we're checking to see if the valid the value is a valid email.

05:15.440 --> 05:18.160
And for this one let's just do another condition.

05:18.230 --> 05:25.800
So this one will check email and we're going to pass that value in an X ID value

05:29.300 --> 05:38.600
so pass that in and if it's true then we know we need to actually we can just console log that that

05:41.200 --> 05:48.400
well just slots console log out email valid.

05:48.430 --> 05:50.500
So I think we're ready to try that out.

05:50.560 --> 05:58.630
And for now let's just return back true and we'll do our reg ex try it out now and everything looks

05:58.630 --> 05:59.610
like it's working.

05:59.620 --> 06:02.420
So we see that we're outputting a valid e-mail.

06:02.440 --> 06:08.620
So let's make this invalid and we still see that we're getting that valid e-mail because of course we've

06:08.620 --> 06:15.760
got to do our e-mail check and we can actually copy out quite a bit of what we had earlier that we could

06:15.760 --> 06:17.020
have here.

06:17.020 --> 06:22.090
So this does not seem parameter that we're checking next.

06:22.270 --> 06:24.450
We're checking to see if there's a match.

06:24.550 --> 06:30.370
And if we're getting back no then we're returning back false otherwise we're returning back true.

06:30.400 --> 06:36.610
So this is where we can actually make use of the return where we can return back of value and we can

06:36.610 --> 06:40.430
even shorten this a little bit as well by getting rid of this part.

06:40.450 --> 06:44.810
And now let's see if we get back a true or false.

06:45.790 --> 06:50.440
And also check to make sure that we're also logging not

06:53.270 --> 06:57.320
so else and we need to have something else there.

06:59.930 --> 07:06.330
We'll call it bad e-mail so that's what's going to Koppen if that email is not a Vado e-mail.

07:06.350 --> 07:09.850
So let's go back and refresh it and we get it working.

07:09.890 --> 07:15.230
And I do want to actually comment this one out because that's writing in quite a bit there within our

07:15.230 --> 07:15.900
output.

07:15.920 --> 07:18.850
So we just want to see a valid email and next.

07:18.850 --> 07:21.210
Delete it and we see bad e-mail.

07:21.470 --> 07:27.260
So next I want you to do if you haven't done so already update that and create checks for the numbers

07:27.350 --> 07:28.850
and for the characters.

07:28.910 --> 07:32.640
So use that same format and I'll show you the solution coming up.

07:33.670 --> 07:40.210
So let's grab the same format here because we know that the only thing that we actually need to change

07:40.480 --> 07:43.950
within this function is our regular expression.

07:43.960 --> 07:50.210
So this is going to be fairly easy and we need to actually change our regular expression.

07:50.290 --> 07:54.470
And in this time we're only looking for letters.

07:54.520 --> 08:02.260
So we're looking for only letters within this character and we're not looking for anything else.

08:02.260 --> 08:04.580
So let's go back and return that.

08:04.810 --> 08:07.760
And we're looking for multiple letters.

08:07.810 --> 08:08.960
So that's fine.

08:09.160 --> 08:11.940
So let's just make sure that.

08:12.200 --> 08:19.220
And let's go ahead and try this within Reg x R and the other thing that I did want to mention is if

08:19.310 --> 08:23.300
you want to change the character set you can always do

08:26.470 --> 08:30.290
shift shift 6.

08:30.430 --> 08:32.740
And this gives you this little Chevron.

08:32.770 --> 08:35.000
And basically that allows you to negate it.

08:35.020 --> 08:41.230
So we're actually looking for anything that would be in there that is actually not a character.

08:41.320 --> 08:48.100
And that's what we want to return back within our regular expression because if we're looking for characters

08:48.340 --> 08:54.820
then if we return back characters then there's obviously going to be some characters in there so let's

08:55.270 --> 09:03.910
make sure that we have no non characters and if we have a match then basically that means that we need

09:03.910 --> 09:08.260
to return back.

09:08.350 --> 09:14.960
So we need to switch this around so we're going to look for if it's no then we're turning back true.

09:15.130 --> 09:22.000
And if it's if we do find something that is a non character then we're going to return back false.

09:22.020 --> 09:23.900
So let's save that.

09:24.010 --> 09:27.070
Open up our browser and refresh it.

09:27.220 --> 09:33.430
And this time we're looking for characters and we also need to have that condition here.

09:35.220 --> 09:41.110
So if it's so let's say that was in the wrong one there.

09:41.310 --> 09:44.600
So let's just clean this up a bit.

09:44.790 --> 09:53.430
So let's say Now we're looking for the characters and we're going to see character only valid.

09:55.440 --> 09:56.900
On character

09:59.450 --> 10:00.790
is string

10:03.830 --> 10:06.290
and one more thing that we are copying and pasting.

10:06.290 --> 10:10.670
Let's just make sure that we're actually applying it to the right function.

10:10.670 --> 10:12.920
So this time we're looking for the characters.

10:12.920 --> 10:13.900
So we're all ready to go.

10:13.910 --> 10:17.820
Let's refresh it and check to see who's got character only valid.

10:17.930 --> 10:23.000
Let's put some non characters in there and we see non characters in the string.

10:23.000 --> 10:24.410
So it's not valid anymore.

10:24.590 --> 10:29.280
So there's one left and for this one we've got to look for only numbers.

10:30.520 --> 10:38.230
And we can copy quite a bit of what we did earlier where we can just simply paste that in and see numbers

10:38.710 --> 10:42.070
and this time let's see.

10:42.220 --> 10:46.750
Only valid non numbers.

10:48.740 --> 10:49.450
In the string.

10:49.500 --> 10:51.950
So let's save that.

10:51.980 --> 10:57.410
So once we coffee that and we can pretty much copy what we've got within the characters and the only

10:57.410 --> 11:02.110
thing that we need to update is that we're looking for only digits.

11:02.150 --> 11:08.000
So you can go back out here and the one that looks for only digits is the D.

11:08.000 --> 11:13.520
So basically this is non digit so it matches any characters that are non digit.

11:13.520 --> 11:20.270
And basically if we find a match then we know that within here then this is not valid.

11:20.270 --> 11:26.350
So if we do find that digit match we know that this is not what we're looking for so let's do that.

11:26.360 --> 11:30.020
Let's add in the D and clean that up.

11:30.170 --> 11:32.110
So we don't even need the eye either.

11:32.360 --> 11:40.130
So this is why we need to keep that forward slash in there so forth slash d forward slash or forward

11:40.130 --> 11:42.220
slash backward slash the forward slash.

11:42.380 --> 11:44.150
And then this can also be true and false.

11:44.150 --> 11:45.070
The same thing.

11:45.080 --> 11:46.700
So now let's try it out.

11:46.700 --> 11:50.650
So now we're looking to see if so they're all valid.

11:50.780 --> 11:53.360
And let's update this to some characters.

11:53.360 --> 12:00.120
We see that there's not numbers in the strings if here we put some non characters we see that that.

12:00.410 --> 12:03.900
And then if we just get rid of the e-mail we get bad e-mail.

12:03.920 --> 12:06.130
So everything is working properly.

12:06.230 --> 12:08.860
And then there was quite a bit within this lesson.

12:09.020 --> 12:16.230
But I do want you to as well practice and get more familiar with what's available within regular expressions.

12:16.400 --> 12:22.820
And as mentioned Reg x R is a great place to try it out and see what's actually being returned and then

12:22.820 --> 12:25.520
it's a matter of applying that correct logic.

12:25.640 --> 12:29.850
And then we did have quite a bit here where we had conditions within conditions.

12:29.950 --> 12:37.560
And so this was something that does take a little bit more time to get familiar with.

12:37.570 --> 12:42.540
And then lastly we also did want to make sure that there is actually a value within the input.

12:42.670 --> 12:49.540
So for this part you could just do that whole thing and just make sure that instead of doing them separately

12:49.810 --> 12:56.340
you can just check to see if this one is not equal to blank.

12:56.530 --> 13:01.980
And then if it's not equal to blank then we can say.

13:02.090 --> 13:05.690
Or if it is equal to blank it's

13:08.660 --> 13:10.030
no value.

13:10.180 --> 13:19.530
And and from here we can concatenate it and maybe we can return back that ID.

13:19.570 --> 13:27.760
So let's do this see let's do the x value ID and I do need to fix this up because we're not calling

13:27.760 --> 13:32.210
out to the function anymore so we're just simply looking at the value.

13:32.450 --> 13:36.390
So now let's try that out and go out and save your code.

13:36.460 --> 13:43.000
So don't forget to save and try to end this time if there's no values in there.

13:43.000 --> 13:48.860
We should detect and we should be able to see no value in e-mail and no value in.

13:49.060 --> 13:51.240
So there's no value in number and so on.
