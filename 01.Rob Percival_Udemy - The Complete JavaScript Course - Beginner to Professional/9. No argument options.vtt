WEBVTT

00:00.750 --> 00:01.650
Welcome back.

00:01.680 --> 00:07.070
Earlier we saw how useful functions can be so they can really save us a lot of time.

00:07.080 --> 00:13.230
And I know initially it looks like there's extra work here in creating these functions but they definitely

00:13.230 --> 00:15.300
will save you time in the long run.

00:15.450 --> 00:18.520
And there's so many different things you can do with functions.

00:18.750 --> 00:24.600
So to give you an example of how we can set default parameters within a function.

00:24.640 --> 00:29.340
So let's say for instance we have an example of variable a.

00:29.520 --> 00:36.780
We're setting that up and we're setting it up to my fun ands with in the function.

00:36.900 --> 00:44.570
So this set up function my fun and in here where I expect to see an argument passed there.

00:44.770 --> 00:49.150
So it's fighting some type of value with him here.

00:49.410 --> 00:52.620
So parameter or I should call this parameters.

00:52.620 --> 00:56.850
I'm going to call it Pirri because the arguments are the ones that get passed within here.

00:56.850 --> 00:59.450
So this is an argument.

00:59.970 --> 01:06.990
So let's say we're expecting a parameter and that parameter is going to be put in our age.

01:07.030 --> 01:13.590
Well so we're going to add in our age to now and whatever value is contained within prem.

01:13.710 --> 01:15.510
So let's see what happens now.

01:15.510 --> 01:20.340
So whenever we invoke that we refresh it and we get undefined.

01:20.580 --> 01:24.850
And that's because we haven't set any value here for parameter.

01:24.860 --> 01:30.060
So if we do something like Hello we can see that hello it's put there.

01:30.170 --> 01:33.030
So we have several options how to handle this.

01:33.170 --> 01:39.130
If there's no premolars there being no arguments that are being sent when the function is being invoked

01:39.410 --> 01:43.750
and we're expecting a parameter that's supposed to be output here.

01:43.820 --> 01:50.820
So for older browsers we've got the ability to always check type of.

01:51.020 --> 01:58.460
And we can check the type of parameter and we can see that if that type is undefined

02:02.060 --> 02:04.930
then we can assign a value at this point.

02:05.090 --> 02:12.890
So at this point we can say PRCA is equal to a hello world.

02:12.890 --> 02:19.280
So if nothing gets passed in here we're going to pick up the value of hello world and then we're going

02:19.280 --> 02:21.290
to make use of that within our script.

02:23.140 --> 02:31.890
And I'm also going to return back the value for a so there is another form as well that we can use.

02:31.910 --> 02:34.670
So this will be working for older browsers.

02:34.670 --> 02:39.390
And if you want to make use of it within the older browsers This is the way to go.

02:39.440 --> 02:45.410
But if you're expecting and if you are using ECMAScript 6 which is the latest version of Javascript.

02:45.530 --> 02:53.470
So if your browser supports That's just my fun old there and this will be fun and new.

02:53.510 --> 03:00.720
So this time we're going to call it in my fun new and this time we don't actually need all of this.

03:00.830 --> 03:13.020
We can simply equal this value we could equal it over here and we can say hello world.

03:13.530 --> 03:20.500
So now refresh and we can see that there is nothing changes within our output because it's in this format.

03:20.500 --> 03:25.930
This is the same thing as over here where we're setting the value of the parameter.

03:25.930 --> 03:28.150
If there's no value being assigned.

03:28.300 --> 03:34.990
So if I'm sending a value within a parameter we see that that one takes precedence.

03:34.990 --> 03:41.680
But if there's nothing being sent over if it's coming back on to find then we can declare it as a value

03:41.680 --> 03:46.580
we can set up a value directly here within the parameters as we're setting those up.

03:46.870 --> 03:51.580
So this format it's not supported by all the browsers as of yet.

03:51.730 --> 03:54.250
And as I mentioned this is most sense.

03:54.250 --> 03:56.630
So this is the latest version of Javascript.

03:56.830 --> 04:03.040
And there are updates to javascript's depending on the browser and the version of the browser it me

04:03.100 --> 04:05.710
or may not work.

04:05.710 --> 04:12.840
So if you want to be on the safe side then you can stick with this type of format and these values actually

04:12.840 --> 04:22.300
they should be returning Pujari value so that we know that when we open up our console and we get the

04:22.300 --> 04:28.540
value of a we actually get that return value of the.

04:28.570 --> 04:31.960
So again this is the return value the part that's there.

04:31.960 --> 04:37.480
We're sending over a volume here and if we're not standing over the value that it's going to just use

04:37.480 --> 04:42.690
the default value and then of course the default value is the one that's going to return back to a and

04:42.810 --> 04:45.320
being assigned to the variable a.

04:45.880 --> 04:49.100
So what you do now is try this out for yourself.

04:49.180 --> 04:58.750
Set up a function and don't pass a variable an argument within that function and set a default parameter

04:58.750 --> 05:06.210
value and how that output and even return back within your function and then output that within your

05:06.220 --> 05:06.800
div..

05:07.060 --> 05:11.080
And the next lesson where you look deeper at what we can do with functions.
