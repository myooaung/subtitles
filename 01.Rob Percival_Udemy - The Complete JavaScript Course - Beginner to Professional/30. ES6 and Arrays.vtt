WEBVTT

00:01.080 --> 00:05.580
Welcome back and I hope you had an opportunity to try out some of these new functions that we can do

00:05.640 --> 00:09.600
with a raise and I'm going to show you another really cool one.

00:09.750 --> 00:16.180
So this one is let's set up a default value here so just call it test.

00:16.260 --> 00:23.220
And we saw earlier that we could actually move to the next item if we had entries.

00:23.430 --> 00:25.030
And unfortunately with an array.

00:25.030 --> 00:32.190
There are not entries but fortunately for us there is a way to transform an array into entries and that's

00:32.190 --> 00:35.150
using that entry's method.

00:35.730 --> 00:42.940
So now whenever I console log out test it's going to look different then D.

00:42.990 --> 00:44.520
So let me show you what I mean.

00:44.640 --> 00:48.020
So when I refresh it we get the array iterator.

00:48.150 --> 00:54.420
And basically that means that we can move to the next item that's available within there and we saw

00:54.420 --> 01:01.110
this earlier that we can move through the next one and every time we do the next one then we don't lose

01:01.110 --> 01:03.180
the place that we've gone through.

01:03.180 --> 01:06.870
So we're looking at a function earlier where we were returning back the next one.

01:07.170 --> 01:14.370
So this time we're just going to simply we've created the entries out of the array that we have and

01:14.460 --> 01:16.970
we can simply do the next value.

01:16.980 --> 01:23.640
So in order to get that value back it's the format that's going to be the same things we do a console

01:23.700 --> 01:31.890
log where we're just going to output it and we're going to grab that newly constructed entry's object

01:32.280 --> 01:36.180
and test and then use the next method.

01:37.470 --> 01:40.260
And let me show you what we return back here.

01:40.260 --> 01:48.210
And not surprisingly we've got value and we've got done is false and we've got two values in there.

01:48.330 --> 01:57.690
So if we move on to the next we can always pull back the value and if we say the same thing next and

01:57.690 --> 02:01.200
if we see the same thing next or what happens.

02:01.200 --> 02:05.280
So basically we have the ability to loop through the array.

02:05.280 --> 02:13.080
So those index values become part of this object where we can get the two values to the first one was

02:13.170 --> 02:18.130
originally the index value and the second one is actually the value that's contained within there.

02:18.180 --> 02:22.140
And this is how we can actually transform our arrays.

02:22.140 --> 02:27.780
And this gives us more flexibility and also moving through all of the values that are contained within

02:27.780 --> 02:28.560
the arrays.

02:28.590 --> 02:31.210
We can do it within this type of format.

02:31.230 --> 02:40.320
So what happens if we've got an entry's object and we want to transform this back in to an array so

02:40.320 --> 02:41.730
we can do that as well.

02:41.820 --> 02:46.140
And that's using the spread operator and we saw this briefly earlier as well.

02:46.260 --> 02:54.170
So let's look at creating a brand new brand new value here and this one.

02:54.210 --> 02:58.450
So we transform those entries back into an array.

02:58.470 --> 03:03.060
So we're going to create a brand new array test one and it's not going to be an array.

03:03.060 --> 03:09.070
Right off the bat because we're going to use test and we know that test is an entry as object.

03:09.360 --> 03:18.000
So if we do test entries then we know that we've got we've already got those entries so we want to convert

03:18.030 --> 03:18.990
this back.

03:18.990 --> 03:24.040
We want to take we take those entries back and convert it back into an array.

03:24.270 --> 03:32.880
So the way that we do that is we use test there so testers the entries object and we use the spread

03:32.880 --> 03:36.650
OPERATOR So that's those three dots there.

03:36.670 --> 03:43.790
Now if my console log out test one let's see what happens.

03:43.980 --> 03:52.290
Let's say that refresh and we see that we're empty right now we didn't actually pick up the values

03:55.630 --> 03:57.490
so you know what went wrong here.

03:57.550 --> 04:03.190
And if you said that well we've moved through all the next values and that's where we're no longer able

04:03.190 --> 04:04.200
to pick that up.

04:04.270 --> 04:05.570
You're correct.

04:05.590 --> 04:10.090
So that's actually what's happened there is that's why we're empty because we've moved through all of

04:10.090 --> 04:10.580
them.

04:10.630 --> 04:17.290
So if we dump them back into an array we see that this is that last one here that's outputting the test

04:17.290 --> 04:17.810
1.

04:17.860 --> 04:19.270
So we didn't move through them.

04:19.270 --> 04:26.590
If we want to move through one then we're only going to be building out our array of the remaining entries.

04:26.590 --> 04:32.360
And that is one of the things to always keep in mind so we see that now we've got our array with two

04:32.560 --> 04:39.010
but we see that within the array we're actually getting an array within an array sort getting a multi

04:40.220 --> 04:41.520
or a nested array.

04:41.600 --> 04:44.200
So we multi dimensional array or nested array.

04:44.240 --> 04:49.840
So we've got both of those that we've converted now we've got those old index values.

04:49.850 --> 04:54.170
We've got some new index values and then these are arrays within arrays.

04:54.170 --> 04:58.800
So if we want to get the index value the old one we'd have to go to the first item.

04:59.060 --> 05:04.400
We've got a number of items so we have to go to the first item and the first item within that nested

05:04.460 --> 05:10.760
array is going to be the old index value and then the second one is going to be the actual value that

05:10.760 --> 05:12.040
was contained within there.

05:13.790 --> 05:16.360
So I know that was quite a bit to take in.

05:16.370 --> 05:21.800
But I do have a little bit more for you but I do want to give you an opportunity to try this out for

05:21.800 --> 05:22.550
yourself.

05:22.730 --> 05:30.590
So go ahead and create an array and then you have to convert it into an entry use object and then take

05:30.590 --> 05:35.450
that entry's object converted back into an array and output it in the console.

05:35.450 --> 05:36.980
So go in and try that.

05:37.160 --> 05:42.950
And I'm going to show you how we can use sets again and we can take those sets because we know that

05:42.950 --> 05:49.770
sets had all of those entries and we can take those sets and we can convert that set into an array.

05:49.790 --> 05:52.040
So I show you how to do that as well.

05:52.790 --> 05:55.030
So if we had an opportunity to try it out.

05:55.030 --> 05:57.000
So let's go ahead and create a set.

05:57.200 --> 06:01.040
So you know with a set we do a new set.

06:01.040 --> 06:02.430
So this is how we construct our set.

06:02.420 --> 06:12.200
Object and we can actually if we wanted to we could construct it we could construct it using an array.

06:12.240 --> 06:18.960
But this time let's pass some values so we could pass in that array and we could transform our array

06:18.960 --> 06:19.970
into a set.

06:20.090 --> 06:27.110
I'm going to reuse some of these same values to save me the trouble of actually typing it up and so

06:27.110 --> 06:31.320
for my set if you want to convert it into an array.

06:31.520 --> 06:32.900
So it's use LET.

06:32.990 --> 06:40.040
And we're going to call this one my are two and we're going to use that Array constructor that we saw

06:40.100 --> 06:43.160
earlier and do a from.

06:43.160 --> 06:48.680
So from that Array constructor and with in here we put my set.

06:48.860 --> 06:53.270
And basically what's going to happen now is that we're going to construct that.

06:53.300 --> 06:55.090
So it's console log that.

06:55.280 --> 06:58.800
So that we can take a closer look at what's happening behind the scenes.

06:58.940 --> 07:01.450
And this one will console log as well.

07:01.450 --> 07:03.050
So this is our end result.

07:03.230 --> 07:07.580
So my are two and let's see what happens in the console.

07:07.580 --> 07:08.830
So refresh.

07:08.990 --> 07:09.970
And so there we go.

07:09.970 --> 07:15.860
So we've got the first one is the set we've got all of those entries there within the set.

07:15.980 --> 07:19.140
And if we look at the next one.

07:19.160 --> 07:24.200
So this is just that regular array because we've used the array constructor and we've taken the set

07:24.380 --> 07:26.810
and we've brought it back into an array.

07:27.110 --> 07:31.700
So there's a lot of things you can do bringing things in and out and so on.

07:31.730 --> 07:38.240
There's a lot of functionality that's available now with ESX and some of it does get fairly complex.

07:38.240 --> 07:43.610
So I would advise when you're starting out just get familiar with all of these conversions converting

07:43.790 --> 07:52.640
one to the other and just working with those datas those pieces of data from arrays to objects and transferring

07:52.640 --> 07:53.520
them in and out.

07:53.690 --> 07:58.040
And you can also play around with and just see what happens see what you need in order to transfer it

07:58.100 --> 07:58.990
in and out.

07:59.360 --> 08:04.370
So I've got a few other things that I want to show you as well before we finish up this lesson.

08:04.370 --> 08:06.940
So there are some other things that we can do.

08:07.070 --> 08:10.850
And one of them that I want to show you is copy within.

08:10.850 --> 08:18.680
So this actually allows us to copy some content that's contained within an array.

08:18.760 --> 08:26.670
So let me let me set this one up so remember again that we're going to be actually doing this from an

08:26.670 --> 08:28.760
array.

08:28.930 --> 08:34.540
So I'm just adding in some default values there so we've got more values contained within the array

08:34.840 --> 08:43.570
because what copy within does is it allows us to set a starting index value and then allows us to copy

08:43.780 --> 08:53.000
an array from that starting index value so we can set up an index value to copy starting out and then

08:53.120 --> 08:57.460
where we want to position those values where we want to place them within that array.

08:57.710 --> 09:03.950
So let's try that out and this time we're just going to do it within the console log so that we can

09:03.950 --> 09:06.030
actually see what's happening.

09:06.140 --> 09:10.370
And we're going to use the my array because now this is an array.

09:10.370 --> 09:15.680
So this is an array and that's actually much longer now because I've added in more values in there and

09:15.710 --> 09:20.190
the method we're using is copy within.

09:20.190 --> 09:21.080
So it's just like that.

09:21.090 --> 09:23.070
And then it takes two parameters.

09:23.070 --> 09:28.150
So that first parameter is where we're going to paste it within the array.

09:28.350 --> 09:34.600
So if we want to paste it with an index and this is actually where we can use that find index.

09:34.600 --> 09:39.600
It was a great place to use that we could incorporate it within this functionality as well.

09:39.600 --> 09:49.740
So for this one here let's place it in the fourth spot and now we need to show you what value what values

09:49.770 --> 09:51.550
we want to copy in.

09:51.600 --> 09:58.110
So let's grab all of the values starting and at index 1 and see what happens.

09:58.110 --> 09:59.540
So let's refresh.

09:59.760 --> 10:00.900
And so there we go.

10:00.900 --> 10:03.590
So we made some changes to the array.

10:03.750 --> 10:14.130
And basically what we did is we updated it at the fourth index Fourth's starting there so 0 1 2 3 4.

10:14.130 --> 10:16.420
So this is where our update started.

10:16.590 --> 10:24.000
And what we did is we took values and we replaced these three values with these three values.

10:24.090 --> 10:31.860
And they came from actually starting at index 1 all the way to getting the last three values.

10:31.860 --> 10:36.570
So basically we were able to overwrite them really easy to copy with them.

10:36.750 --> 10:45.740
And this is really useful but it's also very powerful so if you're using it in a real world type scenario

10:45.750 --> 10:52.170
be really really careful that you don't overwrite data that you need to make use of within your application.

10:52.170 --> 11:00.210
And there's one other one that's also equally powerful and this one there's there's probably selected

11:00.210 --> 11:06.420
uses for this but I'm going to show you this one because I really like it but I haven't really found

11:06.420 --> 11:08.490
a really great use for it.

11:08.520 --> 11:16.170
So if we want to overwrite them so if want to fill an array with a particular value so maybe if we want

11:16.170 --> 11:21.840
to have a particular value as a default value or want to override all of them and we want to have a

11:21.840 --> 11:26.370
starting point for those values we can easily overwrite those values.

11:26.370 --> 11:28.300
So what do you think Phil is going to do.

11:28.380 --> 11:35.610
So when I refresh it and we see what actually happened to the array the array content all got filled

11:35.670 --> 11:38.130
with whatever value entered in there.

11:38.130 --> 11:40.590
So again this is another really powerful one.

11:40.590 --> 11:45.840
So you've got to be really careful when to use that and finding a good scenario to use it might be a

11:45.840 --> 11:51.620
little bit difficult but it is actually fun to just play around with it and try it for yourself.

11:51.770 --> 11:57.390
So that's what you can do now is we've learned quite a bit that we can do with arrays.

11:57.450 --> 12:03.660
So why don't you take what you've learned within this lesson in the previous one and try it for yourself.

12:03.690 --> 12:10.830
Even over here we're using those index values so we can pick up an index value with find index and then

12:10.830 --> 12:13.400
make use of it with whatever we want to copy.

12:13.440 --> 12:14.610
And so on.

12:14.610 --> 12:16.680
So go ahead and try it for yourself.
