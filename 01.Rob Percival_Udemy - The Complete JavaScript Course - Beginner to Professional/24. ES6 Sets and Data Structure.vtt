WEBVTT

00:00.570 --> 00:02.790
In this lesson we're going to be looking at.

00:02.850 --> 00:03.540
Yes.

00:03.620 --> 00:04.130
Six.

00:04.150 --> 00:06.810
And what's new data handling.

00:06.810 --> 00:13.440
So in order to understand that what is new we're going to be looking at sets and maps we need to basically

00:13.440 --> 00:19.900
understand what the original problem was with javascript and why this functionality was introduced.

00:20.040 --> 00:24.430
So let's first of all let's create an object so I'm going to call it a data set.

00:24.570 --> 00:30.840
And we know that we can create objects and do object and create.

00:30.840 --> 00:35.880
So this is creating a brand new object and then within here right now we're just going to set it to

00:35.880 --> 00:39.470
null so we're going to create a brand new blank object.

00:39.640 --> 00:44.340
So that's ready to go and we're ready to introduce some information into that object.

00:44.370 --> 00:50.710
So if we want to we could do dataset because now we've created the object and we can give it a value.

00:50.730 --> 00:54.570
So dataset ID can hold a value of zero.

00:54.780 --> 01:05.010
We can also do our data set and we can give it a value of 10 and that's going to be equal to let's do

01:05.040 --> 01:05.880
hello world here

01:09.050 --> 01:12.780
so dataset 10 is equal to Hello World.

01:13.600 --> 01:20.170
So what if you actually want to print out and if you want to check to see if data set I Id actually

01:20.170 --> 01:20.990
exists.

01:21.100 --> 01:30.210
So let's do a quick condition here and we're going to check to see if the test set Id actually exists

01:30.970 --> 01:33.660
and if it does then what console log out

01:37.120 --> 01:42.350
it's there and otherwise let's do else.

01:42.560 --> 01:48.140
And otherwise we can console log out not there.

01:48.610 --> 01:51.030
So what do you think is going to get returned here.

01:51.100 --> 01:54.400
So notice that we've set the value to zero.

01:54.520 --> 01:57.290
And I was going to clean this up a little bit.

01:57.490 --> 02:01.750
So let's try that out in the browser so what do you think is going to get output within the console.

02:01.750 --> 02:05.910
So when we refresh it we see that's not there but we know that we already did set it.

02:06.040 --> 02:11.980
If we get a value of one it's going to be there because 0 when we're checking to see the condition we're

02:11.980 --> 02:13.810
seeing that it actually doesn't exist.

02:13.810 --> 02:17.330
But we do have a value set in it and the value is zero.

02:17.470 --> 02:24.010
So that's one of the problems when we're applying conditions to objects that if we we've got a value

02:24.070 --> 02:24.920
of zero.

02:25.070 --> 02:31.300
Then when they're not if we're checking to see a kippot condition for true or false Boolean value then

02:31.360 --> 02:33.670
we're actually getting false that it's not there.

02:33.670 --> 02:39.310
So that was one of the problems and the other problem is that if we go ahead and we console log out

02:39.640 --> 02:44.150
and let's say for instance we want a console log out that's Hello value.

02:44.290 --> 02:50.580
So we've assigned it a value of 10 and we know that we can't do tests that Daut 10.

02:50.600 --> 02:52.240
So we know that that won't work.

02:52.240 --> 02:55.090
So we always have to keep it within this bracket format.

02:55.540 --> 03:01.070
And we also know that javascript is going to be smart enough to try to do a conversion of that.

03:01.090 --> 03:06.240
So even if we quote around that 10 we should be able to return back the results.

03:06.250 --> 03:08.610
So let's try that out and refresh it.

03:08.890 --> 03:17.920
So we do have quite a bit of room for error and this is why 6 introduced setting up datasets and handling

03:17.920 --> 03:20.870
data in that format as well as mapping.

03:21.070 --> 03:23.460
So let's show you some more examples.

03:24.680 --> 03:31.550
And there's also some other room for error so if we set up a variable so we have a variable A and we're

03:31.550 --> 03:37.970
going to set it to be null and we're going to have a variable b and we're going to set it to be null

03:38.510 --> 03:46.760
and then next let's set up our test set so test set and organise set test set.

03:46.880 --> 03:53.930
So whatever these values so a test set a sonogram taken that test at a value and let's assign some type

03:53.930 --> 03:54.850
of value to it.

03:54.980 --> 04:02.870
So this can be whatever we want and the next if we want to call that back I can actually call that back

04:02.960 --> 04:04.410
using test set

04:07.950 --> 04:11.270
B because those two are actually equivalent.

04:11.310 --> 04:16.200
So it actually doesn't matter which one I try to call back because we're still going to be able to utilize

04:16.200 --> 04:24.390
this and this is another area where there is room for errors and issues with javascript ESX introduced

04:24.390 --> 04:25.430
us to sets.

04:25.530 --> 04:28.170
So let's go out and create our first set.

04:28.170 --> 04:34.680
So test set and we call it test 2 and we define it by a brand new set.

04:34.800 --> 04:37.800
So set is the brand new object that we're going to be creating.

04:37.800 --> 04:42.330
So we created an object called test set and now it's console log data.

04:42.330 --> 04:48.060
So we'll take a closer look and we'll see what's being actually contained within test set to go back

04:48.060 --> 04:48.490
out.

04:48.540 --> 04:50.400
Let's refresh our browser.

04:50.520 --> 04:51.120
So there we go.

04:51.120 --> 04:55.140
So we've got our set completely blank no entries in it as of yet.

04:55.260 --> 04:58.470
In order to add entries in that it's going to be really easy.

04:58.470 --> 05:05.440
So this is in order to add entries we have default methods and that's the default method of ADD.

05:05.490 --> 05:10.080
So we can add in additional values into a set.

05:10.110 --> 05:11.010
So we'll add in one.

05:11.010 --> 05:11.900
Hello world.

05:11.970 --> 05:13.640
Go back and refresh it.

05:13.650 --> 05:14.310
So there it is.

05:14.340 --> 05:16.090
So now we've got entries in here.

05:16.140 --> 05:17.840
We see the length of those entries.

05:18.000 --> 05:20.400
And let's add in some more into here.

05:20.400 --> 05:28.290
So let's go ahead and hello world 1 Hello World 2 and so on so we can add in as many as we like.

05:28.290 --> 05:33.450
Now one thing that I did want to note and one thing that's great about sets is that it doesn't take

05:33.450 --> 05:34.070
any.

05:34.140 --> 05:37.200
It only has unique values that are contained within the set.

05:37.200 --> 05:39.450
So when I refreshed it what do you think is going to happen.

05:39.450 --> 05:42.030
Am I going to have three entries or four entries.

05:42.040 --> 05:43.770
I've added in four on the side.

05:43.830 --> 05:47.810
When we look in the console we've only got a length of three because this one's a duplicate.

05:47.810 --> 05:51.860
So it doesn't actually get added and you can try to add it as many times as you like.

05:51.900 --> 05:57.080
It won't ever get into the set because the set is all unique values.

05:58.030 --> 06:00.020
So what I want you to do now pause the video.

06:00.040 --> 06:06.980
Open up your editor and create a set and then add some content into that set output it into the console.

06:07.030 --> 06:12.310
And don't forget to try to add some duplicates so that you can see that sets are being put to work they're

06:12.430 --> 06:14.590
adding and removing duplicates.

06:14.590 --> 06:20.410
Now there's another thing with insets and we can remove items out of the set or entries out of the set

06:20.710 --> 06:21.790
and that's delete.

06:21.790 --> 06:26.670
So delete lets us remove out entries.

06:26.770 --> 06:31.650
And so now we just need to specify the entry value that we want to delete out.

06:31.930 --> 06:36.570
So if we delete out Hello world go back and refresh we see it's gone.

06:36.580 --> 06:41.440
So even though we tried data twice will have to delete it once because once it's in there it's unique

06:41.440 --> 06:41.920
value.

06:41.920 --> 06:45.540
And when we delete we can select and delete any one.

06:45.550 --> 06:50.680
So the thing what sets they work similar to the way that objects work where we can loop through all

06:50.680 --> 06:52.070
of the content of that.

06:52.160 --> 06:53.040
So so you adapt.

06:53.050 --> 06:54.770
So test set to.

06:54.880 --> 07:01.570
And we're going to do the for each loop and the for each loop allows us to set up a function in here

07:01.870 --> 07:12.490
and pick up the value we'll pick up the key and let's let's loop through here so console log out what

07:12.490 --> 07:14.100
we're getting returned in here.

07:14.290 --> 07:21.150
So we've got our key and space that they're concatenated together and value.

07:21.850 --> 07:23.760
So let me let's see what happens now.

07:23.820 --> 07:28.930
So when I refresh it we see we get all of those values and we see the interesting thing here that the

07:28.930 --> 07:34.540
key and the value are the same because they are we're only setting up value in there.

07:34.540 --> 07:38.250
So the key and the value are the exact same thing with insets.

07:38.290 --> 07:39.920
So keep that in mind.

07:39.970 --> 07:46.390
So go ahead and try that would loop through all of that information that you created earlier and see

07:46.390 --> 07:51.210
how that works and see if you can pull that information out of that that set.

07:51.280 --> 07:56.740
So next thing that we want to do is I want to show you how sets can actually remove duplicates from

07:56.740 --> 07:57.360
an array.

07:57.610 --> 08:03.340
So we struggled with this earlier that one of the exercises earlier we had to remove our duplicates

08:03.340 --> 08:04.420
out of an array.

08:04.510 --> 08:09.670
And we had to loop through all the array items and there was quite a bit of a process I'm going to simply

08:09.670 --> 08:11.200
create an array.

08:11.320 --> 08:16.570
And notice I am adding in some duplicate values and that's on purpose because we actually want to remove

08:16.570 --> 08:18.050
out those duplicates.

08:18.130 --> 08:23.200
So I think I've got at least a few duplicates in there so I'm using numbers so it's just a lot simpler

08:23.230 --> 08:25.330
but could just as well be string values.

08:25.630 --> 08:31.150
So what we want to do now is we want to change my array and remove out all of the duplicate.

08:31.150 --> 08:37.460
So let's Konsole like that my array and we are.

08:37.780 --> 08:45.170
And now let's create a function to remove duplicates and then we'll launch a rate into the function.

08:45.170 --> 08:49.900
So remove Dhoop and we're going to take that argument in.

08:49.940 --> 08:57.160
And that argument essentially is going to be the array and we'll return back all of the content.

08:57.310 --> 09:00.710
So first of all we need to get that content into a set.

09:00.730 --> 09:02.960
So that's where we can do new set.

09:03.250 --> 09:04.970
And we'll take that content.

09:05.020 --> 09:07.270
So not every information that we're setting.

09:07.270 --> 09:11.860
And unfortunately if we're doing it this way we're still returning back a set.

09:11.920 --> 09:15.010
So we're not exactly removing the duplicate.

09:15.010 --> 09:16.120
Let me show you.

09:16.140 --> 09:19.760
And there's one other thing that we're not going to need to add to their just.

09:19.990 --> 09:25.840
I'll show you what it looks like at this point where we're going to pass in the array and we're going

09:25.840 --> 09:27.550
to remove the duplicates.

09:28.210 --> 09:30.460
And there's one other thing that we're going to need to add here.

09:30.580 --> 09:37.280
So we see that we've got a set of 13 and even though it returns it it's not returning back all the entries

09:37.340 --> 09:39.450
it's returning back the entire set.

09:39.460 --> 09:45.640
So it's essentially taking that array removing the duplicate and returning it as a set.

09:45.640 --> 09:47.430
So it's not exactly what we want.

09:47.530 --> 09:52.990
So there's a quick fix to that and the fix to that is adding three dots in front of the new.

09:53.170 --> 09:58.810
And basically what that does is that's going to return the set back as an array.

09:58.810 --> 10:00.580
So all of those three dots.

10:00.640 --> 10:04.270
They transform the returned object into an array.

10:04.270 --> 10:10.300
So now when we take a look at it there is our brand new set with Duplo gets removed.

10:10.300 --> 10:12.370
So I want you to try it for yourself.

10:12.370 --> 10:14.280
So go ahead create an array.

10:14.350 --> 10:19.720
You can use one of the rays we created earlier and create this function to remove duplicates.

10:19.750 --> 10:23.350
So it's very simple it's just a simple function where we're returning.

10:23.440 --> 10:28.590
We're getting the content that's being passed in and we're returning it back as a set.

10:28.600 --> 10:35.530
So go ahead and try that out and get comfortable and familiar with it because having knowledge of these

10:35.530 --> 10:41.740
different ways to handle data is really beneficial when it comes to javascript because we're always

10:41.740 --> 10:48.850
dealing with data everything is both the data and handling that data in more efficient ways is great

10:48.850 --> 10:53.450
for programming and it's really helpful when you're writing out the code as well.

10:54.240 --> 10:56.640
So go ahead and try it for yourself in the next lesson.

10:56.640 --> 11:00.070
We're going to look at more data structures and that's going to be maps.
