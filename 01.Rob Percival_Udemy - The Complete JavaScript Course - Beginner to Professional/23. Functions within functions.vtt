WEBVTT

00:00.820 --> 00:06.550
Welcome back in in this lesson we're going to look at what happens when you declare a function within

00:06.610 --> 00:08.110
another function.

00:08.110 --> 00:14.020
So earlier we saw that when we declare a variable and if it's sitting outside of the function then this

00:14.020 --> 00:16.960
gets treated as a global variable.

00:16.960 --> 00:23.120
So we have access to this value within our functions and also outside or functions.

00:23.230 --> 00:27.480
So we can call it at any point and we can access at any point within our script.

00:27.610 --> 00:31.450
And we also saw that when we create a function.

00:31.450 --> 00:36.490
So if we have a function and we're going to call this one side fun.

00:36.490 --> 00:44.090
So when we declare a variable within that function we can only make use of it within the function itself.

00:44.110 --> 00:47.020
So let's give this one a value of two thousand.

00:47.050 --> 00:53.260
So we've got our global we've got our local variable but now we're going to take this one step further

00:53.380 --> 01:00.190
and I'm going to declare another function and this one is going to actually sit inside of the function

01:00.310 --> 01:05.170
that I've got on the outside so that it.

01:05.370 --> 01:10.190
Now you see that we can actually declare functions within functions themselves.

01:10.350 --> 01:14.730
So the question is how do we access the values within this function.

01:14.730 --> 01:16.880
So let's have something happen in here.

01:17.010 --> 01:21.780
And what I'll do is I'll increment the value of B.

01:21.810 --> 01:29.490
So this is important thing to note that even though I've declared the value of B outside of the scope

01:29.550 --> 01:36.640
of this function I still have access to it because this function is sitting outside of this function.

01:36.720 --> 01:39.040
So it's sitting within the local space of that.

01:39.180 --> 01:44.730
So that's where we get access to all of the local values that are sitting in the function without having

01:44.730 --> 01:49.400
to actually redeclare them or write a set of values.

01:49.560 --> 01:56.400
And of course if this is a value that we only want to use within the inside fun then we might we might

01:56.400 --> 01:59.360
be better off just to declare it within here as well.

01:59.580 --> 02:04.890
But for the purposes of this lesson I'm going to leave it declared on the outside part and then I'm

02:04.890 --> 02:07.730
going to access it here on the inside part.

02:07.980 --> 02:13.980
And what I want to do is I want to simply just return whatever the value of B is.

02:13.980 --> 02:16.390
So we see that we've got this function.

02:16.410 --> 02:22.710
It's the inside function and where what we're doing is we're taking the value of b and then we're just

02:22.710 --> 02:25.470
simply returning the value of B.

02:25.470 --> 02:27.410
So let's set up another variable.

02:27.410 --> 02:33.740
So I'm going to give this variable c and this one is actually going to simply call.

02:33.760 --> 02:36.860
And so we're declaring it.

02:36.900 --> 02:42.480
And because we've got our return on the inside Fine then we're simply going to access it.

02:42.690 --> 02:45.130
And now lastly let's log.

02:45.150 --> 02:52.790
So a console log that whatever the value of sees.

02:52.930 --> 03:00.040
So remember C is going to be the value of B plus one being returned from the inside function.

03:00.040 --> 03:04.630
So what do you think is going to happen here what do you think I'm going to see within the value of

03:04.690 --> 03:05.560
c.

03:05.650 --> 03:10.750
Do you think I'm going to see an error or do you think that it could be 2001 or do you think there's

03:10.750 --> 03:12.760
going to be some other value there.

03:12.760 --> 03:14.540
So let's refresh that.

03:14.710 --> 03:22.210
And so what's actually happening is we're not actually invoking this function yet because we're not

03:22.210 --> 03:23.370
calling for it.

03:23.380 --> 03:29.860
So this is something that we do need to do and we need to do this side of the functions so let's set

03:29.860 --> 03:31.240
that up.

03:31.420 --> 03:40.780
And now when we refresh it open that up we see that the value of b is 2001 because what's happened within

03:40.780 --> 03:47.350
the code is that we've gone through so Javascript has gone through it hits this function it knows it

03:47.350 --> 03:52.040
has to run through the code that's contained within the function called outside fun.

03:52.270 --> 03:53.600
So it runs through the code.

03:53.650 --> 04:00.930
First it grabs the value of b and then it goes to here and it says that value of c.

04:01.060 --> 04:05.120
And we're looking to invoke a function called Incyte fun.

04:05.200 --> 04:12.490
So that is sitting locally within here and we can simply increment B and then we return the value B.

04:12.610 --> 04:15.890
Which is why C equals 2001.

04:16.180 --> 04:19.780
So what do you think happens if I try to call this function.

04:19.870 --> 04:22.900
And now I'm actually outside of the function.

04:23.020 --> 04:25.160
So do you think this is going to work the same way.

04:25.180 --> 04:27.640
And if you'd said yes.

04:27.650 --> 04:31.990
So it works the same way as the global and local variables.

04:31.990 --> 04:38.950
So in effect you've got functions that are local within the function and then of course you've got functions

04:38.950 --> 04:39.920
that are global.

04:39.940 --> 04:48.760
So the same idea as the variables you need to be at the same level in order to make use of them and

04:49.180 --> 04:52.830
make use of the values and code that's contained within there.

04:52.870 --> 04:54.330
So let's see what happens.

04:54.340 --> 04:57.460
Now if I don't actually return anything.

04:57.460 --> 05:00.030
So what do you think the value of c is going to be.

05:00.070 --> 05:06.430
And if you said 2002 you're correct because this doesn't actually make any difference if we're doing

05:06.430 --> 05:08.830
something with the return value or not.

05:08.830 --> 05:15.130
All we're doing is calling this function so it knows that when this function gets called this code in

05:15.130 --> 05:16.260
here gets rendered out.

05:16.390 --> 05:21.910
So works the same way whether it's a function within a function or a function outside of a function

05:22.720 --> 05:30.160
and we can also set up the functions the same way as we saw earlier where we can assign a value a variable

05:30.340 --> 05:37.950
and then build the function within that variable so setting up the variable d and what this does is

05:37.950 --> 05:40.350
this has got an anonymous function.

05:40.350 --> 05:45.860
So we saw this earlier and this is going to work the same way where we don't take the value of B.

05:45.900 --> 05:47.070
We're going to incremented.

05:47.310 --> 05:51.690
And we can then also return back the value of B.

05:51.900 --> 05:55.680
So this is basically doing the same thing as this function.

05:55.680 --> 05:57.170
Both are going to be the same.

05:57.210 --> 06:03.190
And in order to invoke it we can simply call to that function.

06:03.240 --> 06:04.980
So let's do the

06:08.980 --> 06:13.810
and we can also do variable b equals D.

06:14.560 --> 06:15.520
So let's see what happens.

06:15.520 --> 06:26.620
Now so refresh and refresh and what we see that the value of c is still 2002 because we're not reusing

06:26.680 --> 06:33.970
C again but if we want to take a look at the value of B at this point let me see what happens here so

06:33.970 --> 06:36.490
what do you think the value of b is going to be.

06:36.650 --> 06:38.100
Remember we've gone through.

06:38.110 --> 06:44.050
We initially set B and the nice thing about having functions within other functions is that you can

06:44.050 --> 06:49.660
have these default starting points for variables and this could actually be really useful if you don't

06:49.660 --> 06:54.850
want these values to constantly changing if they're a variable that's sitting outside and you want to

06:54.850 --> 06:58.490
constantly have a set variable starting point.

06:58.690 --> 06:59.710
Then you can do it this way.

06:59.710 --> 07:02.720
So we've got the value of b at 2000.

07:03.070 --> 07:07.910
We're running the inside fun over here so we're incrementing up by 1.

07:08.260 --> 07:13.200
We're running inside fun again here so incrementing it by again over here.

07:13.210 --> 07:18.060
We're running the function dece or incrementing again and we're running the function again.

07:18.130 --> 07:19.390
So we're incrementing it.

07:19.390 --> 07:22.870
So do you think the value of b is going to be 2004.

07:22.990 --> 07:25.620
And if you said yes you are correct.

07:25.630 --> 07:32.260
So you're following along with how how many times we've run through and we've executed code that increments

07:32.260 --> 07:33.910
B by 1.

07:33.910 --> 07:40.030
And this is another important thing to note that even though I've got two separate functions I can still

07:40.030 --> 07:41.630
use this variable.

07:41.960 --> 07:48.760
So even though this is locally within this function I still have use for it in a number of different

07:48.760 --> 07:56.160
functions and I can utilize it as much as I want and it stays at whatever the local value is.

07:56.260 --> 08:01.190
And then once this outside fund gets run it's destroyed and it's gone.

08:01.300 --> 08:06.710
So if I was to run outside on multiple times what do you think is going to happen.

08:06.820 --> 08:09.350
What do you think the value of b is going to be.

08:09.700 --> 08:10.930
So let's check that out.

08:10.990 --> 08:17.590
And if you said 2004 you're correct because this is the whole idea of why we want to have a function

08:17.590 --> 08:23.830
within a function because this gives us the ability to have all of them consistent and starting with

08:23.830 --> 08:25.740
the same value of 2000.

08:25.960 --> 08:34.120
So what I want you to do is try it for yourself and try creating a function within a function and then

08:34.150 --> 08:40.140
doing something with the local variable values that are contained within the function.

08:40.180 --> 08:42.730
So do practice try it out for yourself.

08:43.260 --> 08:50.080
Also do maybe have multiple variables and multiple values invoke the function multiple times and then

08:50.080 --> 08:56.440
also make use of those local variables within additional functions being declared within that one function

08:56.770 --> 09:01.910
and see what you can make happen using functions within functions.

09:03.150 --> 09:09.360
And it is important to get used to writing functions and we have a whole lot more on functions coming

09:09.360 --> 09:12.810
up later on in the course in the more advanced part of the course.
