WEBVTT

00:01.270 --> 00:06.910
Earlier we saw how useful sets were and maps are equally important because they gave us another way

00:06.910 --> 00:10.770
to handle data and data structures within Javascript.

00:10.960 --> 00:12.130
So let's take a look at.

00:12.130 --> 00:17.290
We're going to use that same array that we used earlier and I'm not going to get rid of those console

00:17.290 --> 00:24.040
logs and I will keep in the remove duplicate function so we can do some comparison between the functionality.

00:24.040 --> 00:35.010
So let's set up a brand new variable and we'll call it map array and we're going to take in that my

00:35.100 --> 00:38.260
array and what we're going to do to it.

00:38.260 --> 00:39.570
We're going to map it out.

00:39.670 --> 00:42.100
And so this is just the method of map.

00:42.100 --> 00:44.920
So this is available with ESX.

00:44.950 --> 00:45.970
So function.

00:46.150 --> 00:53.870
And let's take whatever the current value is of the premiÃ¨re that's being passed in.

00:54.110 --> 00:57.820
And first of all it's this console log it out.

00:57.860 --> 00:58.970
So a console log.

00:59.020 --> 01:03.420
A It will take a closer look at that within the console.

01:03.440 --> 01:05.180
So when we map it out.

01:05.240 --> 01:10.400
Look what happens we've got a whole listing of all the values that we had within our array.

01:10.520 --> 01:12.860
So basically whenever.

01:12.920 --> 01:14.430
So we've not today.

01:14.600 --> 01:20.930
And each one of them has its own line so it automatically loops through all of those values and we can

01:20.930 --> 01:23.690
see them being returned back there within the console.

01:23.690 --> 01:29.960
So basically what that means that if we wanted to multiply all of those values within the array and

01:30.020 --> 01:38.840
return it with with brand new values we can take the values of A and we can multiply it.

01:38.870 --> 01:45.470
So if we want to multiply them by 10 we can really easily do that within this type of format because

01:45.470 --> 01:52.210
it's already mapped out and we're taking that argument value and we can multiply it by 10 and list that.

01:52.220 --> 02:02.160
So next thing that we want to do is let's console log out whatever's available in my array so move that

02:02.160 --> 02:03.750
console log over there.

02:03.810 --> 02:10.200
And now we see that we've loop through all of the values really easily that were contained within this

02:10.200 --> 02:14.960
array and we multiplied by 10 and we simply returned back a brand new array.

02:15.300 --> 02:19.650
And you can see there's a lot of use for this and a lot of things that we might have struggled with

02:19.650 --> 02:24.740
before that we've got the ability to really make use of this functionality.

02:25.750 --> 02:31.410
And just like we were creating brain new sets we can also create a new map.

02:31.480 --> 02:35.680
So we'll call it my map and new.

02:35.770 --> 02:41.730
So we're creating a new map object and then now we can add information into it.

02:41.740 --> 02:50.590
So my math and let's set some values contained into it and we can do it as we do normally.

02:50.590 --> 02:53.180
So if we want to do let's do hello world.

02:53.260 --> 02:59.710
So do hello we're going to add a few string values into it and then let's take a look in the console

02:59.740 --> 03:00.700
and see what happens.

03:00.700 --> 03:04.700
Now so see how this gets presented within the data structure.

03:04.720 --> 03:12.700
So let's let's Lague my map into the console refresh it and we see that we've got basically hello and

03:12.790 --> 03:16.420
we've got the arrow there to world.

03:16.460 --> 03:21.560
So the way that it's working is it's similar to what we saw with objects where we've got these paired

03:21.560 --> 03:22.400
values.

03:22.400 --> 03:29.600
So let's go ahead and do a name so do my name and this time let's just put in another string value in

03:29.600 --> 03:29.840
there.

03:29.840 --> 03:35.650
So put a name in there and let's refresh that one more time.

03:35.660 --> 03:41.640
So now we see we've got both of those entries in there and we also have a size.

03:41.660 --> 03:47.780
We have the length we can get all of this information back and now the really cool thing about it is

03:47.870 --> 03:54.680
that we can work with similar or similar to what we did with sets where if we want to delete something

03:54.680 --> 03:57.870
out of it I could do my map and do delete.

03:57.920 --> 04:04.970
So use the delete method and in order to delete it we need to identify it this way and then we'll log

04:04.970 --> 04:08.090
out my map or console log it out afterwards.

04:08.090 --> 04:09.780
So what do you think is going to happen here.

04:10.100 --> 04:12.140
So using that key.

04:12.140 --> 04:18.080
So essentially this is the key and that's the value we're able to identify it by the key and it simply

04:18.080 --> 04:18.660
delete it.

04:18.740 --> 04:21.420
If we don't want it within that entry any more.

04:21.590 --> 04:23.870
So what happens if we try to do two of them.

04:23.870 --> 04:29.650
So we saw earlier that and we're going to get a comment delete.

04:29.660 --> 04:31.070
So what do you think is going to happen here.

04:31.070 --> 04:34.860
Do you think we can have duplicates or what do you think we're going to get an output of the console.

04:37.610 --> 04:39.310
OK so we saw how that worked.

04:39.320 --> 04:42.590
But what if we all should want to retrieve the value of Halo.

04:42.590 --> 04:45.650
So we know that we can access it by the key.

04:45.680 --> 04:51.320
And instead of has Let's do get and we need to identify the key.

04:51.360 --> 04:52.490
So if I did.

04:52.490 --> 04:55.870
Hello I get world if I do my name I get Laurence.

04:56.060 --> 04:57.430
So now let's refresh it.

04:57.470 --> 04:58.250
And there we go.

04:58.260 --> 05:02.590
So we can't return back the value that's associated with the key.

05:02.840 --> 05:06.980
There's a lot of power here and I want you to try it for yourself as well.

05:06.980 --> 05:13.310
So open up your editor and go ahead and create a brand new map add some values into the map.

05:13.340 --> 05:20.510
Also try to add in some duplicate delete out some of those values by using delete and then also return

05:20.540 --> 05:26.150
back and retrieve back some of those properties and values and check to see if that has a key value

05:26.330 --> 05:31.260
and also then if it does then you can return that value and output it within your con..

05:31.340 --> 05:37.080
So go ahead and try that out and I'll show you some even more cool things that you can do with maps.

05:37.220 --> 05:40.790
So I hope you had an opportunity to try that out for yourself.

05:40.940 --> 05:45.090
And I'm going to simply copy in an object to that we had before.

05:45.110 --> 05:47.560
So this is where we're building out that shopping cart.

05:47.570 --> 05:48.530
We have dvar.

05:48.620 --> 05:51.730
So let's update this to let items.

05:51.770 --> 05:57.320
And we've got a bunch of items in there and let's console log items so it can take a closer look at

05:57.380 --> 06:00.150
this object.

06:00.170 --> 06:06.910
So it's basically an array with a bunch of objects in there.

06:06.950 --> 06:11.740
So we want to actually get access to the content that's contained within there.

06:12.020 --> 06:12.500
And

06:15.230 --> 06:17.880
this is something that can be done with maps.

06:17.930 --> 06:23.990
So just as we saw maps and we saw sets and we saw the power to it let's create a variable So this is

06:23.990 --> 06:29.560
just going to be our holder and it's going to hold all of the content of items.

06:29.750 --> 06:36.380
And what we're going to do is we're going to map that out and we saw earlier when we not post an array

06:36.530 --> 06:39.260
then we can actually pull out that information.

06:39.260 --> 06:41.330
So let's let's do that as well.

06:41.330 --> 06:47.810
So we're going to add in a function here and we're going to list through all the items of the primer

06:47.810 --> 06:52.310
that we're passing in is items we're getting it from the items or race that doesn't have to be called

06:52.310 --> 06:52.890
the same.

06:52.910 --> 06:55.870
But just to be consistent let's call it the same.

06:56.030 --> 07:03.850
And let's return back the items and if we only want to get the name out of this array object so we want

07:03.850 --> 07:08.910
to create a new holder and we want to have it holder names.

07:09.730 --> 07:11.250
So let's refresh that.

07:11.260 --> 07:12.910
And we should actually.

07:13.100 --> 07:18.610
OK let's set this to let And let's console log what Holder names

07:23.170 --> 07:25.110
so Consolo holder names.

07:25.150 --> 07:27.270
So what do you think we're going to get back within.

07:27.260 --> 07:28.200
Holder names.

07:28.300 --> 07:30.200
Let's refresh it and we'll take a look.

07:30.400 --> 07:39.090
So we actually get back all of the names so we're loop through all of those items within the array and

07:39.120 --> 07:41.110
we return back the ones.

07:41.250 --> 07:46.820
So the current item so items and we return back the object value of name.

07:46.830 --> 07:50.690
So this is a quick and easy way to really parse through some of that data.

07:50.690 --> 07:55.620
When we're dealing with a lot of these big data structures when we've got these huge Jason objects or

07:56.520 --> 08:02.430
these arrays with objects in them and this is a quick and easy way to return back information.

08:02.430 --> 08:08.880
So what I want you to do now is pause the video and this this one here this array here this came from

08:08.940 --> 08:12.090
one of the earlier exercises were building the shopping cart.

08:12.090 --> 08:18.540
So instead of the names what I want to return back is all of the costs so go through the same thing

08:18.540 --> 08:24.090
that we've done earlier instead of Holder names to hold her costs and return back all of the costs within

08:24.090 --> 08:27.040
the consul.

08:27.060 --> 08:29.900
So let's see let's try that out.

08:30.470 --> 08:33.930
And Holder names so do hold her costs

08:36.510 --> 08:41.280
and same thing where we're mapping out the item and we're just simply returning back costs.

08:41.280 --> 08:46.660
So this was a really easy exercise because we literally we have it right there as well.

08:46.800 --> 08:52.110
So now we can return back all of the costs we can loop through all of that data and make use of the

08:52.110 --> 08:53.210
costs.

08:53.220 --> 08:58.260
So another thing that we saw earlier is that we can really update these functions.

08:58.260 --> 08:59.720
So let's try to do that.

08:59.730 --> 09:06.000
Let's incorporate that that we've got that new function capability where we've got those fat arrows

09:06.060 --> 09:09.440
and we don't need to actually always write the function.

09:09.600 --> 09:10.540
So let's do that now.

09:10.560 --> 09:14.380
So let's update this and we're passing in items.

09:14.610 --> 09:22.300
So that's the argument that we're passing in and we're using the fat arrow to represent the the actual

09:22.650 --> 09:28.780
the actual function the work function and we know that if we don't have any other parameters it's simply

09:28.780 --> 09:31.200
going to return that information back.

09:31.210 --> 09:38.720
So we're really simplifying this and this is why it's great to get really familiar with the brand ESX

09:39.010 --> 09:43.720
syntax because you can start combining it together and doing a whole lot more.

09:43.720 --> 09:45.020
So let's refresh it.

09:45.070 --> 09:52.660
And that was just a quick exercise to update the way that we're writing functions into the ESX format.

09:52.660 --> 09:58.570
So we really simplified all of that code into essentially one line of code where we can pull back that

09:58.570 --> 10:01.980
data that's contained within that object array.

10:02.350 --> 10:05.340
So next thing is I want you to try that for yourself.

10:05.380 --> 10:13.270
So take that function that you created earlier to pull back all of the costs and update it using the

10:13.270 --> 10:14.160
fat arrow.

10:14.260 --> 10:20.140
And from what we learned earlier how we can really condense that function statement into a more simpler

10:20.140 --> 10:20.770
format.

10:20.890 --> 10:22.440
So go and try that it for yourself.
