WEBVTT

00:01.120 --> 00:08.970
Welcome back in in the previous lesson we built out our items dynamically and then we also added event

00:08.980 --> 00:14.500
listeners So now that they're all clickable and they're all firing off to the Add to Cart function.

00:14.590 --> 00:20.950
I also did a quick update and I changed the font size and I changed the display properties within the

00:20.950 --> 00:25.360
CSSA to make them look a little bit more like buttons and so that they weren't overlapping a lot of

00:25.360 --> 00:28.390
the text there that we have within the details.

00:28.600 --> 00:31.720
So now we're ready to add it into the cart.

00:31.900 --> 00:39.130
So first of that we need to do is we need to actually have an array where we can hold a shopping cart

00:39.190 --> 00:40.360
information.

00:40.450 --> 00:41.610
So let's set that up.

00:41.620 --> 00:47.630
And this is just a blank array a global array so that we can add items into our cart.

00:48.040 --> 00:53.450
So next let's go over to here and let's set up some variables.

00:53.500 --> 00:55.000
So first of all we've got.

00:55.000 --> 01:01.500
Item in full and all of this item info is contained within here where we saw that in the last lesson

01:01.510 --> 01:09.210
that we logged it out into the console and we can pick up whatever whatever element triggered the event.

01:09.280 --> 01:16.510
And we use that event target in order to grab that element and then we're grabbing the dataset object

01:16.510 --> 01:20.010
because we want to make use of that whenever it gets clicked.

01:20.050 --> 01:22.990
We want to pick up that information and make use of it.

01:23.410 --> 01:33.280
So now let's set up some other items in here so we've got our item in full and let's add in a value

01:33.280 --> 01:34.060
for quantity.

01:34.060 --> 01:40.330
So this way if we want to set our quantity and we want to have something increasing in quantity we could

01:40.330 --> 01:49.900
do that very easily sign up to set the quantity to 2 1 and we need to add this item into our shopping

01:49.900 --> 01:50.560
cart.

01:53.290 --> 02:01.190
So let's do that by shop carts and let's push this item into the array.

02:02.880 --> 02:12.570
So basically it's adding it in to the shopping cart and previously we saw how we can store items for

02:12.570 --> 02:13.590
the local storage.

02:13.590 --> 02:19.110
Well we've also got session storage and that's the one that I wanted to use where I want to store the

02:19.110 --> 02:25.050
value into the session storage and this is going to work the same way as the local storage where we

02:25.050 --> 02:28.680
can add content into our session values.

02:28.680 --> 02:32.020
So let's add that into session storage

02:36.750 --> 02:39.990
and to do that we specify session storage.

02:40.140 --> 02:43.170
So it's basically it contains.

02:43.790 --> 02:51.930
It stores this value into the session the current session and we can use set item in order to set that

02:51.930 --> 02:52.840
value.

02:54.910 --> 02:56.400
And then we can give it a name.

02:56.440 --> 02:58.560
So whatever name that we want to give it.

02:58.570 --> 03:07.760
So let's call it s cart for our shopping cart and then next we need to pass in a value.

03:07.900 --> 03:14.970
So we know that we have all of our values as an object tree so we can use what we use.

03:14.980 --> 03:22.270
What we saw last time where we can do the Giese on string of fly in order to turn this into a string

03:22.600 --> 03:23.360
value.

03:23.380 --> 03:31.030
So in order to turn that whole array into a string value and then we can we know we saw earlier as well

03:31.030 --> 03:32.290
that we can parse that.

03:32.470 --> 03:34.590
And then we can make use of it.

03:34.690 --> 03:35.200
So that's it.

03:35.200 --> 03:39.220
So we need to just output it within the session storage.

03:39.340 --> 03:42.960
And next we need to actually output our current values.

03:43.090 --> 03:47.710
So we need to have something maybe down here at the bottom where we've got all of the contents of our

03:47.710 --> 03:48.620
cart.

03:48.790 --> 03:53.730
So let's set that up and we're going to call that function out cart.

03:53.760 --> 03:59.370
So basically every time we call that it's going to loop through all of the information within the session

03:59.370 --> 04:02.900
storage and output the card details.

04:02.910 --> 04:08.370
So now that we've updated it whenever the item has been added into the card the next thing is that we

04:08.370 --> 04:17.100
need to output that value into a string format or a jigsaw format so that we can loop through it and

04:17.160 --> 04:19.710
display it within our Web page.

04:19.710 --> 04:24.690
So that's the next challenge that we need to take a look at.

04:24.700 --> 04:31.980
So just as we saw with local storage if we want to pull back this Sasson session storage we use get.

04:32.020 --> 04:32.900
So let's do that.

04:32.920 --> 04:35.130
And we'll just call it data for now.

04:35.260 --> 04:37.870
And we're going to do instead of session storage.

04:37.870 --> 04:47.750
Set item to get item and then what console log out that data it will take a closer look at it and then

04:47.780 --> 04:52.760
we know that at that point we can we should be able to loop through those values so let's refresh the

04:52.760 --> 04:56.820
page add in some content into our shopping cart.

04:57.080 --> 05:02.180
And I know you can't tell that I'm clicking those buttons but we do see that it's actually outputting

05:02.510 --> 05:05.620
every time it's putting that card information.

05:05.630 --> 05:12.350
So we've got it as a string value within that session and it's all ready to go to get parsed back into

05:12.380 --> 05:14.120
a usable object format.

05:14.150 --> 05:15.930
And then we looping through it.

05:16.130 --> 05:24.560
So what I want you to do now is pause the video and build the HVM owl to display the information contained

05:24.650 --> 05:26.560
within that session.

05:27.930 --> 05:29.260
Session storage.

05:29.490 --> 05:35.220
So all of the information that's contained within Estcourt I want you to pull that back and parse it

05:35.220 --> 05:42.720
back into a usable format and then so that we have something that we can loop through and we can make

05:42.720 --> 05:53.080
use of within our within our javascript and then what I want to do as well is build it out as a table

05:53.080 --> 05:59.050
format all of the shopping cart contents so we can actually see when items get added the shopping cart

05:59.050 --> 06:00.240
will update.

06:00.670 --> 06:03.410
So pause the video and try that.

06:03.460 --> 06:03.920
In our show.

06:03.940 --> 06:09.370
The solution coming up so you at an opportunity to try that out.

06:09.400 --> 06:16.360
And we know that what we saw earlier with the session storage where we can set an item we can retrieve

06:16.360 --> 06:19.100
that information with get item.

06:19.240 --> 06:22.680
So we have the ability to set and to retrieve it.

06:22.780 --> 06:27.530
And there's another thing too that we need to keep in mind because we already have a running total for

06:27.530 --> 06:34.930
a shopping cart so we don't necessarily although we're storing up to session storage we want this value

06:34.930 --> 06:38.520
to also work whenever the user reloads the page.

06:38.530 --> 06:44.310
They don't actually lose all of their values that are contained within this one session.

06:44.470 --> 06:49.870
So the session is slightly different than the local storage because the session is only for this one

06:49.870 --> 06:51.900
instance for this one session.

06:51.940 --> 06:53.080
So that's the real difference.

06:53.080 --> 06:57.270
But if I do refresh the page all of my items will still be in the cart.

06:57.610 --> 07:01.750
So we know that the next thing that we need to do is we need to output.

07:01.780 --> 07:05.160
And we need to parse this information that we have here.

07:05.470 --> 07:12.120
So we need to take that value and we need to parse that out and we saw that Jason parse.

07:12.220 --> 07:21.260
So wrapping the string value into Jaison parse should actually give us the ability to output that content's

07:21.380 --> 07:22.780
going to just clear that.

07:22.820 --> 07:28.660
And now whenever we refresh we've got all of our shopping cart information just hours before.

07:28.940 --> 07:31.580
So I see that as we're adding it in.

07:31.580 --> 07:33.260
I've got all of those items.

07:33.410 --> 07:38.810
And this is something as well that we're going to have to look at later on because we've got multiples

07:38.870 --> 07:45.320
of these items that are adding in and we want to actually detect if it's the same ID and if it is then

07:45.320 --> 07:48.580
we want to increment the quantity instead of updating it.

07:48.580 --> 07:52.010
So that's one of the things that we do need to take care of.

07:52.070 --> 07:58.670
But for now we know that were successfully able to audit into the session of surge and then pull that

07:58.670 --> 08:01.850
back end and make use of it within our Javascript.

08:01.850 --> 08:08.380
So the next step is to loop through that information that's contained within that value.

08:08.600 --> 08:12.170
So we saw that.

08:12.400 --> 08:19.240
Another thing that we do know as well is that we know that the value from session storage This is actually

08:19.240 --> 08:22.210
going to match up with what we've got in our shopping cart.

08:22.320 --> 08:28.060
So session storage is simply storing it in there kind of as a backup and we could just use the shopping

08:28.060 --> 08:28.750
cart.

08:28.750 --> 08:34.840
So that's one of the things that we do need to be aware of that restoring intersession storage and we

08:34.960 --> 08:38.560
don't actually need to pick it up from the storage.

08:38.560 --> 08:44.980
So maybe we can do a quick check to see what's in the storage and then we can just use the shopping

08:44.980 --> 08:47.380
cart or we can override the shopping cart.

08:47.380 --> 08:48.880
So a number of options here.

08:48.910 --> 08:50.130
At this point.

08:50.170 --> 08:59.120
So instead of doing data I can simply output the shopping cart value and the other thing too is I want

08:59.120 --> 09:08.150
to always check to make sure that I do have a value in there that this value is not equal to no so this

09:08.150 --> 09:10.100
isn't a blank value.

09:10.310 --> 09:18.350
And if it's not a blank value at that point that's when we need to output it to the shopping carts we

09:18.350 --> 09:20.990
need to overwrite the shopping cart value.

09:21.230 --> 09:26.900
And otherwise if there's no session storage we're just going to loop through the shopping cart because

09:26.900 --> 09:32.420
we already have a shopping cart set up as a global variable so we can make use of that as well.

09:32.420 --> 09:41.280
So let's set up our HVM mail file and this file is going to be the basic starting point for our table.

09:41.420 --> 09:47.250
So we know that we need to set up some table H-2 mail so we can set that up in there.

09:47.270 --> 09:55.520
The next thing that we want to do is we want to add all of those values together so we actually have

09:55.520 --> 10:01.460
a total of how much how much value there is within the shopping cart.

10:01.460 --> 10:03.710
So start at zero.

10:04.070 --> 10:07.000
And next let's loop through our shopping cart.

10:07.040 --> 10:13.790
So just as we did earlier we've got a number of options that we've seen how he can loop through our

10:13.880 --> 10:16.580
arrays so we can do that for each.

10:16.580 --> 10:22.390
Or we can do the just the for loop that we saw earlier.

10:22.390 --> 10:30.640
So again it's up to you whatever you're more comfortable with for each is probably an easier way to

10:30.640 --> 10:34.180
do that because we don't need to have those variables.

10:34.210 --> 10:41.260
And the next thing that we need to do is we need to just we need to pick up the value of the total and

10:41.260 --> 10:45.970
then we also need to update each team Mel with the new content.

10:48.330 --> 10:56.430
So we need to add in a row and a table cell and then close off the table so we're going to need a number

10:56.430 --> 11:01.660
of these some just setting up the format there just to make sure that everything is working properly.

11:01.830 --> 11:09.170
And then this one here is going to be the subtotal.

11:09.560 --> 11:18.110
And so this is going to be the value of the quantity and we're going to multiply it by value of the

11:18.110 --> 11:19.910
price.

11:19.910 --> 11:25.360
So this is going to pick up a subtotal value for us that we can actually also insert that there

11:29.480 --> 11:32.730
and then also let's let's update total.

11:33.140 --> 11:38.580
And we're going to add whatever the sum total value is to that as well.

11:38.600 --> 11:44.620
So we're going to use subtotal twice there so once within the output and then next within there.

11:44.750 --> 11:55.820
So also let's let's duplicate this out and let's do one for the name so that we get the name of the

11:55.820 --> 11:57.190
item there.

11:57.230 --> 12:01.490
So it would take care of the other part afterwards.

12:01.490 --> 12:07.070
So last thing let's output and let's update our HVM else we can actually see what's being contained

12:07.070 --> 12:08.530
within here.

12:08.540 --> 12:14.620
So for this one let's just close off the table for now and we'll add in the totals afterwards.

12:14.840 --> 12:20.020
And then lastly let's update our documents a document get element by ID.

12:20.340 --> 12:26.540
And let's place this with an output inner HTL.

12:26.990 --> 12:29.960
And we're just equal that to each tim.

12:30.000 --> 12:30.510
So there we go.

12:30.510 --> 12:31.760
So let's try that.

12:31.800 --> 12:33.360
So let's refresh it.

12:35.020 --> 12:42.490
And now when we scroll up to the top guy I didn't put a shopping cart I put shop instead of shop carts

12:42.490 --> 12:50.540
so let's do a quick update quick fix for that and refreshed it again so save.

12:50.580 --> 12:56.280
And one thing I do need to do is I can't output it within the output area because that's actually where

12:56.280 --> 12:58.560
we built our shopping items.

12:58.560 --> 13:05.820
So I need another div in order for our cart shopping cart.

13:05.880 --> 13:08.790
So let me let me just call this output put.

13:08.790 --> 13:12.570
So that's our shopping cart area so let me update this

13:15.840 --> 13:17.680
and let's go back to refresh it.

13:17.700 --> 13:19.880
So there we go so we've got our shopping cart.

13:20.010 --> 13:28.520
We're able to add in items into our shopping cart and we're getting the the name and the subtotal.

13:28.890 --> 13:35.910
So the next lesson what I want you to do now and between the next lesson is to update the session storage

13:35.970 --> 13:43.440
back to the local storage because as we saw the session storage works the same but there is a difference

13:43.440 --> 13:52.290
in the session storage basically allows you to have access to data that's only available while the page

13:52.290 --> 13:58.560
session is open and then when the page session ends then basically that data gets erased whereas the

13:58.560 --> 14:02.880
local storage has no expiration so that's going to work a lot better.

14:02.880 --> 14:10.350
So if you can update that to local storage have that output here and in the next lesson we're going

14:10.350 --> 14:11.980
to work on the shopping cart.

14:11.990 --> 14:14.700
I would put and make this look a lot better.

14:14.760 --> 14:16.140
So it's coming up in the next lesson.
