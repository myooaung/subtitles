WEBVTT

00:01.010 --> 00:06.190
Well come back and in this lesson we're going to use our script that we used before that we developed

00:06.190 --> 00:09.540
before where we're adding subtracting multiplying and dividing.

00:09.640 --> 00:15.810
But instead of these We're going to use callbacks in order to do the functionality here.

00:15.810 --> 00:18.300
So let's start setting up our functions.

00:18.400 --> 00:23.590
So we've got our functions there already pre-determined names and we're not passing the arguments into

00:23.590 --> 00:24.330
them.

00:24.340 --> 00:30.070
So what we're actually going to be doing is we're going to be using a third function in order to accommodate

00:30.100 --> 00:33.940
and to create that callbacks are you really calling out to the function.

00:33.960 --> 00:37.000
And we're going to be passing those parameters into the function

00:40.550 --> 00:43.920
from the functions that get triggered from that each else.

00:44.090 --> 00:46.140
So let's do it see.

00:46.340 --> 00:49.280
So that would be our output our callback.

00:49.310 --> 00:55.430
So we need to pass some parameters so a b and we also sort of passing in these two values.

00:55.580 --> 00:57.620
Number one and number two.

00:57.740 --> 01:04.100
And then the other thing that we need to also pass in is we need to pass in the sign because remember

01:04.100 --> 01:08.470
before we're outputting those values and we're visually outputting them.

01:08.540 --> 01:13.300
So it does make it a little bit more complicated so we need a way to get that sign that symbol.

01:13.310 --> 01:16.870
So this one is going to be called C or S..

01:16.910 --> 01:20.520
And then lastly we're going to do our callback.

01:20.540 --> 01:26.270
So this is our callback function that we're going to be passing into our output.

01:26.290 --> 01:30.460
C and what output C is going to be doing just like the last lesson.

01:30.590 --> 01:40.190
We're going to have our result and we're going to use the past in function and what we're going to do

01:40.190 --> 01:48.100
is we're going to do the value of A and B

01:51.010 --> 01:58.930
and then we're going to output whatever that value of the result is put in h t m l and simply concatenated

01:58.960 --> 02:05.330
together and we can pass in the value of a plus.

02:05.380 --> 02:09.040
So concatenates a nice space there so it's more readable.

02:09.040 --> 02:14.820
And this is where the sign or symbol that we're passing through is and then space at it again nice and

02:14.830 --> 02:21.660
neatly and then do a b and again space so they would put an equal sign there.

02:21.820 --> 02:26.440
And then this is where we're going to put whatever that value for result is.

02:26.470 --> 02:33.700
So this will within output and see the function and see this is always going to look the same.

02:33.880 --> 02:40.420
And we're going to use the functions and we're use callback in order to create different functions for

02:40.420 --> 02:42.120
Seebach.

02:42.130 --> 02:46.540
So now we've got this set up and there's one other thing they're doing an add in but I'm not going to

02:46.540 --> 02:51.350
add that in yet and it's going to show you the benefit of using callbacks.

02:51.370 --> 02:59.560
So now we need to output to output C and set up the values of the numbers.

02:59.620 --> 03:08.010
So we know that we've got these elements as objects here so we can simply grab those and we can say

03:08.160 --> 03:14.770
some value and then it's number 2.

03:15.370 --> 03:21.760
And same thing values are grabbing the values and the symbol for odd is going to be a plus sign.

03:21.790 --> 03:23.350
So we need to pass that in.

03:23.380 --> 03:25.940
And then lastly let's set up our function.

03:25.940 --> 03:32.740
So our function is going to take the two parameters A and B and then we're going to do something with

03:32.740 --> 03:33.880
those parameters.

03:34.030 --> 03:41.070
So we're going to simply return back a plus b.

03:41.090 --> 03:43.050
So to keep it nice and simple.

03:43.130 --> 03:45.390
So this is all our function is really doing.

03:45.530 --> 03:50.520
And we see what's going to happen when it calls to out.

03:50.600 --> 03:54.120
See we're going to pass in this anonymous function.

03:54.170 --> 03:56.920
It's going to take those values of A and B.

03:56.960 --> 04:01.000
So it's going to take a number value one and number value to.

04:01.040 --> 04:07.640
It's going to pass it in to this anonymous function and it's going to add a and b together and it's

04:07.640 --> 04:09.220
going to return back the result.

04:09.320 --> 04:11.070
And that's how we're going to have that result.

04:11.240 --> 04:18.980
So we can try that out and let's put in four and six it together and we get 46.

04:19.010 --> 04:20.200
So you know what happened here.

04:20.190 --> 04:22.770
Do you know why we're getting 46.

04:22.820 --> 04:29.870
This is again when we're taking in values from the inputs they're automatically string values.

04:29.930 --> 04:34.710
So javascript actually doesn't know yet to convert them into numbers.

04:34.820 --> 04:38.100
So this is where we can really make use of callback.

04:38.210 --> 04:44.930
So typically before we would have to do something like number here and before every value we had to

04:44.960 --> 04:46.370
convert them into numbers.

04:46.550 --> 04:51.340
But things are a lot simpler now because we're passing in these two values.

04:51.500 --> 04:55.500
And for the output they can still be strings that doesn't actually matter.

04:55.520 --> 05:01.370
It's only for the actual callback function that we need to have them as number values.

05:01.430 --> 05:03.650
So we can change them to numbers over here.

05:03.650 --> 05:12.200
But what actually makes even more sense is if I just do number here and convert to a number and convert

05:12.290 --> 05:15.720
B to a number and we'll try that.

05:15.890 --> 05:23.800
So now let's refresh and do four and six again or four and five and I'm missing a bracket.

05:23.800 --> 05:24.170
There.

05:24.190 --> 05:25.620
That's why it's not working.

05:25.620 --> 05:27.110
So let's refresh it again.

05:27.150 --> 05:32.520
So four and six and do I add and this time it's working properly.

05:32.520 --> 05:38.960
So we see that we can have large numbers add them together and everything works nice and smoothly.

05:39.060 --> 05:45.930
So what I want you to do now if you haven't done this already to pause the video and use what we've

05:45.930 --> 05:53.640
learned here and build out the other three function out functionalities so the subtraction the multiplication

05:53.670 --> 05:57.210
and the division and I'll show you how easy this is going to be.

05:57.210 --> 05:59.710
Now that we're using callbacks.

06:00.000 --> 06:05.490
So this is going to be really easy it's going to take it's not going to take very long to copy and paste

06:05.490 --> 06:06.860
these and build this out.

06:06.930 --> 06:10.860
So give it a try and I'm sure to do that coming up.

06:11.070 --> 06:18.090
So you had the opportunity to try that out and as I said this isn't going to take very long at all because

06:18.300 --> 06:25.780
we've got all of this we've got these dynamic functions that we're passing in here using callback.

06:25.820 --> 06:35.040
So all we need to do is we need to make sure that we Hookup the right names here so this one is well.

06:35.100 --> 06:39.110
So we need to do a little bit of housekeeping here to read it.

06:39.120 --> 06:46.610
So now we've hooked up all of the write function names and the next thing that we need to do is.

06:46.620 --> 06:48.480
So this one is subtraction.

06:48.480 --> 06:51.320
So we just update the symbol there.

06:51.330 --> 07:00.400
This one is multiplication so we can update the symbol here and we can also pass in the X there.

07:00.450 --> 07:05.430
So that's more typically users might expect multiplications that of the Asterix.

07:05.550 --> 07:07.820
So you're welcome to do that as well.

07:07.980 --> 07:10.220
And then the division.

07:10.230 --> 07:14.520
So now let's refresh and try out our formulas.

07:14.700 --> 07:19.660
So add subtract multiply and divide.

07:19.890 --> 07:22.470
So everything works seamlessly.

07:22.470 --> 07:24.190
And just as it should.

07:24.240 --> 07:26.740
So we see that now we can update the divide.

07:26.840 --> 07:34.400
So subtracts we're not getting negative so we're not getting large decimal place numbers there.

07:34.620 --> 07:37.630
So everything now works nice and seamlessly.

07:37.740 --> 07:43.770
And it was simply by just updating and copying and pasting and just updating this one little piece of

07:43.770 --> 07:44.400
code.

07:44.520 --> 07:48.260
We can add all of this additional functionality.

07:48.280 --> 07:53.850
So what I want you to do now is to pause the video and I've got one more challenge for this video.

07:53.950 --> 08:01.240
I want you to add modulus to remember modulus before where we had two numbers and we could take one

08:01.240 --> 08:04.780
number into the other number and we'd get a remainder.

08:04.780 --> 08:09.250
So what I want you to do now is to add another option for that.

08:09.250 --> 08:11.560
So pause the video and I'll show you how to do that.

08:11.560 --> 08:21.780
Coming up so if you had the opportunity to try that it's I think it's much less the javascript modulus

08:21.780 --> 08:25.010
operator and we're just going to update this.

08:25.020 --> 08:33.520
And now let's go down to here and we don't actually have to update anything within our callback function.

08:33.540 --> 08:39.230
We just need to add in another function in order to accommodate thought so too marred by.

08:39.600 --> 08:50.630
And over here we use a percentage sign and we'll use the percentage sign here as well.

08:50.650 --> 08:52.610
And now let's let's try this.

08:52.610 --> 08:53.620
So do 50

08:57.060 --> 09:01.830
and we see that 60 modulus So 50.

09:01.830 --> 09:03.660
So this one was 50.

09:03.690 --> 09:06.380
So if we do 60 into 60 that's zero.

09:06.600 --> 09:11.300
Let's do 35 and we see that a remainder is 25.

09:11.340 --> 09:12.930
Let's do a larger number.

09:12.930 --> 09:14.280
So fifty eight.

09:14.290 --> 09:20.970
So modulus So 58 into 60 goes in once has a remainder of two.

09:20.970 --> 09:22.410
Let's try another number.

09:22.410 --> 09:26.410
Let's try something smaller Let's try nine.

09:26.490 --> 09:33.050
So nine goes in probably about six times and has a remainder of six and so on.

09:33.060 --> 09:38.700
So we see that we've got that one working as well so we've got now five different options of what we

09:38.700 --> 09:44.720
can do in our javascript function calculator.
