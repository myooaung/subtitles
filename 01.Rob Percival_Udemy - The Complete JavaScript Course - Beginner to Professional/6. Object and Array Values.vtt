WEBVTT

00:01.170 --> 00:07.170
Welcome back in in this lesson we're going to look at let's and Conte's in a little bit more detail.

00:07.260 --> 00:13.860
So earlier we saw that if we set up a variable and we declare it as a constant then we can't change

00:13.860 --> 00:14.280
it.

00:14.310 --> 00:23.880
But what happens if our variable is actually going to be an object so let's do first name and give this

00:23.880 --> 00:31.940
person a first name and then let's do last name and give this person our last name.

00:32.010 --> 00:32.520
So there we go.

00:32.520 --> 00:34.530
So now we've got an object.

00:34.530 --> 00:36.920
And what do you think is going to happen here.

00:36.930 --> 00:41.380
If I try to update some of those values of that object.

00:41.460 --> 00:48.840
So let's listo friend and we see we've got a first name and last name so we can't redeclare friend as

00:48.930 --> 00:49.970
something else.

00:50.010 --> 00:57.060
So I try to change friend two-Test we're going to get an error but if I try to do friend and if I tried

00:57.060 --> 01:02.960
to do one of the values contained within that object.

01:03.000 --> 01:06.880
So let's update that to Lawrence.

01:06.930 --> 01:08.630
It actually does change.

01:08.670 --> 01:12.980
And then if I go back to friend we see that we update it.

01:12.990 --> 01:14.590
But what's happened here.

01:14.700 --> 01:21.160
Actually I added an extra into there but let's let's just redo that sits.

01:21.600 --> 01:29.370
So that was unintentional but we could also see that we can't update content within our within our object

01:29.460 --> 01:30.680
as well.

01:30.690 --> 01:38.010
So let's update that first name and now when I type out friend then we see that we've got five different

01:38.010 --> 01:44.790
items in there so we've got first name so that's changed from Larry to new We've added in another value

01:44.850 --> 01:46.050
within friend.

01:46.050 --> 01:51.660
And even though it's constant we can update the values within that object.

01:51.720 --> 01:59.280
And this is really useful because for the fact that if we're declaring our object we don't want any

01:59.280 --> 02:04.830
other variables overwriting that friend because obviously we want to make use of that.

02:04.920 --> 02:07.880
But we still have the power to make updates to it.

02:10.200 --> 02:12.630
So let me show you one more thing as well.

02:12.690 --> 02:19.080
So we know that we've got objects can contain multiple values and we know that we've got arrays that

02:19.080 --> 02:20.980
can contain multiple values.

02:21.030 --> 02:24.480
So here we're going to contain and create a brain you array.

02:24.480 --> 02:26.670
My my are.

02:26.760 --> 02:33.530
And then we're going to create a function in order to add into that array.

02:33.580 --> 02:37.810
So let's Or let's create a loop and we're going to use.

02:37.840 --> 02:45.180
Let equals zero and we're going to loop through the value of pi.

02:45.430 --> 02:51.480
So let's loop through it 10 times and let's increment i by 1.

02:51.690 --> 02:59.370
And then within here what I want to do is I want to push the value of II into that array and I'll show

02:59.370 --> 03:00.770
you that this is still going to work.

03:00.770 --> 03:03.080
So even though we've declared it with LET.

03:03.240 --> 03:08.930
We can add in content into their.

03:08.970 --> 03:10.400
So let's leave this out.

03:10.410 --> 03:15.140
I.

03:15.350 --> 03:19.840
And then what we'll do is we'll console log that value.

03:19.880 --> 03:23.310
So it's to mine are and we're just console like that it.

03:23.450 --> 03:30.290
So refresh our browser and we can see that we get nice and neatly 0 all the way to 9.

03:31.680 --> 03:38.910
So let's go ahead and update this to Konst and refresh and we see that we get the same result.

03:39.030 --> 03:45.600
So same thing that we saw with objects that we can update our arrays even though we've set them out

03:45.660 --> 03:47.040
as constants.

03:47.160 --> 03:49.600
And even if we're trying to update.

03:49.650 --> 03:52.650
So we've updated our loop here to let.

03:52.800 --> 03:58.890
So that basically means that none of these are actually being held within the Windows object that they're

03:58.890 --> 04:02.880
all being held locally within where we're declaring these.

04:02.880 --> 04:09.960
So if we had all of these sitting within a function then we can simply declare them and make use of

04:09.960 --> 04:13.270
them within the block of code that we're executing them.

04:13.650 --> 04:16.610
So what I want you to do now is try it for yourself.

04:16.770 --> 04:19.160
So go ahead and create an object.

04:19.230 --> 04:24.510
Make some updates to it and then also create an array and make some updates to the values contained

04:24.510 --> 04:25.570
within the array.

04:25.710 --> 04:33.540
And then lastly throw you throw an error by trying to update and reassign some type of new value to

04:33.540 --> 04:33.720
them.

04:33.720 --> 04:39.870
So for instance for friend try to reassign a new value somewhere else within your script and see what

04:39.870 --> 04:40.610
happens.

04:40.620 --> 04:47.340
So you get comfortable with using Konst instead of var when you're declaring objects and arrays that

04:47.340 --> 04:49.730
you want to stay constant within your script.
