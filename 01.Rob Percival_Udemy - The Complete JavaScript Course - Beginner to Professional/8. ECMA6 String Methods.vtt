WEBVTT

00:01.600 --> 00:04.990
With the six we also got some updates to string methods.

00:05.050 --> 00:07.510
So let me show you what we can do with strings now.

00:07.660 --> 00:13.420
So earlier with Ackbar 5 we also got introduced to trim.

00:13.540 --> 00:15.860
So this was actually really useful.

00:15.880 --> 00:22.600
So if we actually had a value where Let's let a and we're going to equal it to Hello World but we're

00:22.600 --> 00:28.190
going to add in a bunch of spaces wrapping around it.

00:28.300 --> 00:34.810
So if we get an input like this we want to get rid of the whitespace so we have the ability to trim

00:34.810 --> 00:35.320
that.

00:35.320 --> 00:40.780
So let's refresh and let's see the value of A.

00:40.820 --> 00:43.010
So we see we've got all of that spacing.

00:43.010 --> 00:50.030
So if I do a trim So applying the trim method to it we see that we get rid of all of that excess whitespace.

00:50.120 --> 00:55.910
And this was actually with my 5 that that was brought in and that was really useful because this is

00:55.910 --> 01:01.850
something that we struggled with a lot of times whenever users are adding in inputs sometimes they add

01:01.850 --> 01:07.940
in an extra space and it throws off our check to make sure that the values are the same.

01:07.940 --> 01:13.130
So this is one of the things that was really great but we got even more we can do with strings.

01:13.130 --> 01:18.820
Now we can check to see what a string starts with.

01:18.880 --> 01:21.300
So let's starts with method.

01:21.700 --> 01:30.630
And basically we can check to see if a string starts with HD and we get false.

01:30.640 --> 01:35.420
So we know that the string actually doesn't start with H.E. because it starts with a space.

01:35.590 --> 01:39.970
So we have to include that space in there and then now it should be true.

01:40.180 --> 01:44.710
So we can check to see what a string starts with because we haven't trimmed it yet and that's where

01:44.710 --> 01:45.990
we're getting that space.

01:46.000 --> 01:49.260
We can also see what a string ends with.

01:49.270 --> 01:54.970
So we've got another method that we can apply and that ends with.

01:54.980 --> 02:01.160
So just like starts with we can check to see if it ends with that and especially if we're looking for

02:01.160 --> 02:04.060
one maybe like a dot com or something like that.

02:04.070 --> 02:05.080
So we set one up

02:11.880 --> 02:12.820
dot com.

02:12.840 --> 02:22.510
So if we want to check to see if B ends ends with a dot com it's been made really easy with ESX.

02:22.660 --> 02:25.530
So we can see that this one is dot com.

02:25.600 --> 02:31.270
If we had something else this is a great example of where this can get used because normally we'd have

02:31.270 --> 02:37.110
to do quite a bit of manipulation there in order to determine what Veloce characters were.

02:37.180 --> 02:43.330
And sometimes we need to count the different characters so we can literally check to see if it starts

02:43.330 --> 02:47.620
with or ends with certain character sequences.

02:49.370 --> 02:56.080
And also we got the ability to see if it actually includes a value.

02:56.270 --> 03:00.670
So the value of a we've got a lot of spacing around there.

03:00.740 --> 03:10.530
So let's check to see if it includes And let's first see if it includes hell.

03:10.660 --> 03:18.820
So it does include hell and keeping in mind that this is case sensitive as well.

03:18.820 --> 03:25.290
So if we're looking to see if it includes Hello make sure that we're looking for the right case.

03:25.300 --> 03:35.260
So notice that with a we've got an upper case there and we also got the ability to update and repeat

03:35.320 --> 03:37.460
certain values multiple times.

03:37.600 --> 03:44.590
So if I take the value of a I can actually repeat it and then I just need to specify how many times

03:44.590 --> 03:45.690
I want to repeat it.

03:45.700 --> 03:53.280
So if I want to repeat it three times we can simply output it three times and of course if we want to

03:53.280 --> 04:00.480
update a we can do a repeat and let's do eight.

04:00.520 --> 04:02.050
So do a really big number there.

04:02.140 --> 04:06.530
So now the value of a is lots of Hello worlds.

04:06.700 --> 04:09.880
So what do I need to do now is try it for yourself.

04:09.970 --> 04:17.200
So open up your editor and try out create yourself a string and you can trim it if you want as well

04:17.440 --> 04:19.630
and then apply some conditions.

04:19.690 --> 04:26.650
So have a conditional statement to check if there are certain if it starts with if it ends with because

04:26.650 --> 04:31.870
we're returning back boolean values and these are perfect when you're working with conditional statements

04:32.110 --> 04:38.320
because this gives us the ability to check to make sure if something is true or false and we can also

04:38.380 --> 04:42.090
do include ends with.

04:42.310 --> 04:48.880
So make up some strings check to see if there are any and with a certain parameters certain sequence

04:48.940 --> 04:49.900
of variables.

04:50.080 --> 04:57.700
And also try out includes check out and make sure that you get familiar enough to use includes that

04:57.700 --> 05:02.490
you can check to see if there's certain character sequences within your string.

05:02.650 --> 05:08.980
And then if there if it's there then simply place a condition where you output into the console.

05:08.980 --> 05:09.970
It was there.

05:10.030 --> 05:12.830
Otherwise output that it was missing.

05:14.470 --> 05:17.100
And also don't forget to try out the repeat.

05:17.230 --> 05:24.970
So there isn't a lot of use for this but it certainly is fun to update your variables and have the same

05:24.970 --> 05:27.670
variable value repeat a bunch of times.

05:27.670 --> 05:29.960
So definitely try that one out as well.
