WEBVTT

00:01.130 --> 00:03.850
In this lesson we're going to be looking at hoisting.

00:03.890 --> 00:10.590
So basically javascript allows a variable to be declared after it's already been used.

00:10.610 --> 00:17.540
So let's say for instance I want to console log out and I own a console log the value of A.

00:17.630 --> 00:25.250
And then here is where I'm actually going to declare what A is going to output.

00:25.250 --> 00:26.690
So let's refresh.

00:26.690 --> 00:29.940
Do you think I'm going to throw an error here what do you think is going to happen.

00:30.080 --> 00:40.130
And if I refresh it we get the value of undefined but notice that we don't get a value.

00:40.270 --> 00:44.340
If we did something like B then we're actually going to throw an error.

00:44.650 --> 00:50.060
So this basically means that javascript is aware of that.

00:50.080 --> 00:52.250
This variable is being declared.

00:52.330 --> 00:57.520
But at this point over here it doesn't have a value yet assigned to it.

00:57.670 --> 01:00.350
So that's why it's returning back on defined.

01:00.520 --> 01:04.440
And that's what's basically happening and this is the way that javascript works.

01:04.630 --> 01:11.860
So actually when javascript gets rendered within the browser it actually has already been run through

01:11.910 --> 01:12.840
one time.

01:12.970 --> 01:19.210
So javascript in the browser will make two passes through your javascript the first one it will take

01:19.210 --> 01:26.020
a look and it will see all of the variables that get declared and then do a second run through and actually

01:26.020 --> 01:27.430
execute the code.

01:27.460 --> 01:35.660
And this is what we mean when we look at hoisting because this gives us the ability to declare variables

01:35.840 --> 01:37.640
anywhere within the script.

01:37.640 --> 01:43.220
And now most of the time you are going to declare your variables at the top but this is just something

01:43.220 --> 01:49.850
to be aware of in case you're trying to use variables within your code and you're placing them within

01:49.850 --> 01:53.720
the code and you're not placing them at the top or the beginning of the script.

01:53.930 --> 01:59.530
So let's show another example and let's try one of those self invoking functions.

01:59.660 --> 02:03.630
And from here we're going to call that same variable.

02:03.770 --> 02:11.120
And this time we're going to simply try to output that variable value and then we're going to declare

02:11.120 --> 02:13.640
it within the function as well.

02:13.640 --> 02:15.400
So let's go it and try this out.

02:16.360 --> 02:25.060
So paused the video and looked back a few lessons where we looked at those self invoking functions and

02:25.060 --> 02:32.980
create one of those and then set a variable within there and then also console log that variable before

02:32.980 --> 02:36.000
we actually set it within the function.

02:36.010 --> 02:37.290
So go ahead and try that.

02:39.590 --> 02:45.820
So to create a self invoking function would do the function.

02:45.910 --> 02:51.700
And then we need to do the two empty parentheses down there at the bottom.

02:51.700 --> 02:54.800
So the objective here was to use console log.

02:54.940 --> 03:03.010
So similar to what we did outside where we can do the value of b and then let's declare b down here

03:03.940 --> 03:08.160
and B is great.

03:08.170 --> 03:10.150
So what do you think is going to happen now.

03:10.150 --> 03:14.600
So when I refreshed and we see that it actually works the same way.

03:14.740 --> 03:18.520
So it works for globally and it also works for locally.

03:18.520 --> 03:21.570
So what actually happens if we don't log out a.

03:21.580 --> 03:25.610
So what we think is going to happen here and we see that same thing happens.

03:25.810 --> 03:31.380
So you can declare your functions anywhere within the scope.

03:31.390 --> 03:37.270
So if it's locally you can declare locally and if it's globally you can declare it globally and then

03:37.270 --> 03:44.460
you can also try to access them and all you're going to get is undefined so always think about the order

03:44.490 --> 03:51.510
that the content is being output in and try to keep your variables and your declarations at the top

03:51.750 --> 03:56.690
because that's just going to be easier to work with especially if you've got a really long script.
