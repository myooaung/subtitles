WEBVTT

00:01.490 --> 00:07.030
This lesson we're going to be looking at recursion with functions and essentially what that means is

00:07.030 --> 00:14.170
that every time a function it's called and recall recursively is basically a duplicated itself in the

00:14.170 --> 00:16.510
memory and it's waiting for that function.

00:16.510 --> 00:19.260
It just calls and the results.

00:19.480 --> 00:21.760
It waits till that results finish.

00:21.760 --> 00:28.960
So basically this is a call of a function within that own function so call the function within itself.

00:29.020 --> 00:30.970
And that creates this recursion.

00:31.150 --> 00:39.260
So let's create something with him the within our output here and I'm going to give it an ID.

00:39.280 --> 00:41.950
So this is just going to be our test space.

00:42.010 --> 00:47.860
So I you create a bunch of divs and I had to go down and I'm going to loop through all the different

00:47.920 --> 00:50.920
children that are available within that parent div.

00:51.010 --> 00:56.250
So then I put some values in there and we're going to loop out all of the values here and we're going

00:56.260 --> 01:02.070
to do this using recursive method using functions.

01:02.150 --> 01:03.910
So I can actually do a loop.

01:03.980 --> 01:10.190
We're going to just use the function and we're going to loop loop through all of these until we finally

01:10.190 --> 01:13.640
hit the end of them.

01:13.640 --> 01:21.080
And basically that's what it does is it allows you to have a continuous loop until you complete looping

01:21.080 --> 01:22.130
through all of

01:25.620 --> 01:26.880
the available content.

01:26.880 --> 01:33.060
And then once that function has nothing left to loop then the loop will actually stop.

01:33.060 --> 01:35.100
So I saw this earlier as well.

01:35.100 --> 01:39.570
So let's try this out now and let's create our function.

01:39.720 --> 01:45.840
So this function is going to loop through and it's going to get all of the children it's going to output

01:46.050 --> 01:49.340
those children within our console.

01:49.350 --> 01:52.810
So first we need to do is set up a variable.

01:52.920 --> 02:01.800
So we just call it test and let's grab that documents a document get element by I.D. and test.

02:01.870 --> 02:04.650
So we're going to pick up that object test.

02:04.870 --> 02:10.930
And what I want to do is I want to loop through all of the children there all of the available children

02:11.200 --> 02:15.030
that are available within this and for this.

02:15.040 --> 02:18.190
So I don't want to loop within the function itself.

02:18.310 --> 02:24.280
I want to call to another function that's actually going to list all of those descendants.

02:24.340 --> 02:24.890
So let's

02:28.390 --> 02:29.360
child al.

02:29.380 --> 02:31.760
So that's going to be the function that we're going to call.

02:31.870 --> 02:37.120
And then this function is going to be the recursive one that's actually going to loop through itself.

02:37.120 --> 02:40.770
So let's call it C L instead.

02:40.780 --> 02:49.450
So that's for child elements that are available within that parent so let's also pass through the variable

02:49.450 --> 02:52.660
test there and we'll pick that up as data.

02:52.660 --> 02:57.970
So we know that this is our node that we're looking at that's a parent node that we're looking at and

02:58.180 --> 03:00.850
that we need to do is we need to.

03:01.110 --> 03:06.670
So let's say let's console log this so it can take a closer look and we can see what we're actually

03:06.670 --> 03:07.310
getting.

03:07.390 --> 03:10.470
And I want to actually focus on the children.

03:10.690 --> 03:16.270
So going back into what we learned within the dorm we know that every element if they have children

03:16.270 --> 03:19.560
then we can list them out and we can see them within every format.

03:19.750 --> 03:23.480
And also I just want to run this one just as a default.

03:23.650 --> 03:26.550
So let's try and let's load the page.

03:26.590 --> 03:30.700
So we see that but this one initially has three children.

03:30.880 --> 03:33.390
So it's got this div that div..

03:33.430 --> 03:36.640
And then this Stiv actually has its own set of children.

03:36.790 --> 03:41.620
So this is where the recursive function is going to come into play because we're going to loop through

03:41.770 --> 03:46.810
this this particular element and we're going to see if there are some children and we're going to simply

03:46.810 --> 03:50.980
continue to loop through and we're going to get the values of all of the children.

03:50.980 --> 03:52.150
So let's go out and do that.

03:52.180 --> 03:54.710
And for this we need to set up a loop.

03:54.790 --> 03:58.070
So this is something that we've done many times before.

03:58.080 --> 04:03.700
Set up a variable and give it a starting point and loop through.

04:03.700 --> 04:13.060
While it's less than the length of state children so don't forget that children part and that is where

04:13.060 --> 04:14.730
we've got our array.

04:15.100 --> 04:17.780
And then let's increment X by 1.

04:17.800 --> 04:20.280
So this is our loop.

04:20.290 --> 04:24.480
And as we're looping through we can pick up.

04:24.490 --> 04:29.220
So let's set up a brain new variable and this is going to get that data.

04:29.300 --> 04:33.830
Children and the value that's contained within x.

04:33.880 --> 04:40.720
So basically we're going to output them here and I'm going to get rid of that and we can also for now

04:40.720 --> 04:42.880
we can console log this out.

04:42.970 --> 04:45.550
So it's actually not going to be anything different it's up to us.

04:45.550 --> 04:47.660
It's going to sit on different lines.

04:47.710 --> 04:51.820
So there's all three of the children in a different type of format.

04:51.850 --> 04:55.870
So what happens if we actually loop through it again.

04:55.870 --> 05:03.050
So if we take the value of c and we call the function on itself.

05:03.220 --> 05:05.090
So what do you think is going to happen here.

05:05.200 --> 05:11.200
And this is where the recursion happens because it's basically going to continue to loop through and

05:11.200 --> 05:14.170
get all of the children of the children and so on.

05:14.170 --> 05:15.260
So let's try this out.

05:15.480 --> 05:24.890
So this way In fact we get the two children and then we get this parent and we get this one and this

05:24.890 --> 05:26.800
one has a child of its own as well.

05:26.810 --> 05:33.680
So we're actually getting all five of the elements so even though these two are children of the children

05:33.920 --> 05:36.920
and we can even go deeper if we have even more elements.

05:36.920 --> 05:43.160
So this is actually a great way to loop through some of that Dom in order to pull back some information

05:43.160 --> 05:44.220
about it.

05:44.240 --> 05:51.260
So let's actually add in one more function and do some updates so that we can actually see the content.

05:51.290 --> 06:00.320
And also I want to add in a class so let's create a box and I'm going to give this one a width so that

06:00.320 --> 06:06.650
we can actually see what these does look like because right now we can't really see them very well.

06:06.800 --> 06:13.910
So let's put them into a box and then I show you also how to color those boxes randomly.

06:13.910 --> 06:15.830
So that's also coming up in this lesson.

06:15.980 --> 06:25.610
So what I want you to do now is create another function that's actually you can apply that class to

06:25.670 --> 06:26.360
the child.

06:26.420 --> 06:30.930
So each one of these children are going out of their own class applied to them.

06:31.070 --> 06:32.330
So go ahead and do that.

06:32.330 --> 06:36.170
Pause the video and I'll show the solution coming up.

06:36.170 --> 06:42.930
So the solution is to pass that value and create a brain you.

06:43.130 --> 06:45.530
So basically to style that.

06:45.530 --> 06:51.620
So it could do s l or we can do s node.

06:51.900 --> 07:00.350
So this is going to style the node and maybe this one makes more sense to if we update it to node and

07:00.410 --> 07:06.250
this needs to get updated to node and this needs to get updated node so we are.

07:06.290 --> 07:07.320
So that should work.

07:07.340 --> 07:14.780
And let's do some changes here so I just want to make sure that I am working properly and we know that

07:14.870 --> 07:16.010
we don't have that function yet.

07:16.010 --> 07:24.260
So this is the exercise for this lesson is to actually create this function and this function is going

07:24.260 --> 07:25.550
to take some data.

07:25.550 --> 07:27.950
So we just call it data as well.

07:28.340 --> 07:32.100
And then we're going to make use of that content.

07:32.150 --> 07:34.490
So we want to apply some styling to it.

07:34.490 --> 07:41.300
And that was the challenge and we know that we can pick up the element information by passing it within

07:41.300 --> 07:42.000
the function.

07:42.110 --> 07:45.200
So we've already got the element there we've already grabbed it.

07:45.200 --> 07:53.050
So the next thing that we need to do is simply apply a class list to it and we can add to that class

07:53.050 --> 07:53.940
list.

07:54.220 --> 07:59.790
And within here we just need to specify the class name that we want it to add in.

07:59.830 --> 08:01.150
So let's try that.

08:01.240 --> 08:02.520
And refresh.

08:02.530 --> 08:08.020
And so there we go so we get those boxes added and I'm going to add in a border so that we can actually

08:08.020 --> 08:11.490
see it.

08:11.560 --> 08:13.550
So let's refresh that again.

08:13.570 --> 08:14.080
So there we go.

08:14.080 --> 08:16.470
So now we can see all of our elements.

08:16.570 --> 08:19.550
They've all got some styling being applied to it.

08:19.810 --> 08:21.470
So let's do even more.

08:21.580 --> 08:26.760
And this one is how we can create a random color.

08:26.860 --> 08:28.750
So this one is a little bit of a challenge.

08:28.750 --> 08:35.680
We're going to be using math random again and this time we need to create a random color string and

08:35.680 --> 08:39.380
we know with colors we have a number of choice.

08:39.580 --> 08:43.100
So I had to create a variable for background color.

08:43.270 --> 08:45.540
And I'm going to just simply equal that.

08:45.910 --> 08:50.890
And we know with colors we can add in the hexadecimal format.

08:50.920 --> 08:59.590
So that's basically value of characters from 1 to 255.

08:59.860 --> 09:00.970
So that's R.G. B.

09:01.000 --> 09:05.430
And we can also do characters hexadecimal characters.

09:05.470 --> 09:07.260
So let's try that out.

09:07.300 --> 09:17.740
And this math random and we're going to convert it to a string of 16

09:20.970 --> 09:32.370
and then we're going to sub string that and subtract 2 6 out of there and let's let's console log this

09:32.370 --> 09:40.060
value out here that we've just created and there's a number of ways to generate random colors.

09:40.290 --> 09:44.560
So if you search on the internet you'll find that there's a number of different ways.

09:44.610 --> 09:47.010
And usually I prefer this type of format.

09:47.010 --> 09:53.390
So basically what it's doing is it's doing the math random converting and untax a decimal and then substring.

09:53.400 --> 09:58.590
So it's pulling back just those first six characters of that string.

09:58.590 --> 10:04.690
So similar to what we did before but this time this is a different way to use math random.

10:04.710 --> 10:05.290
So there we go.

10:05.290 --> 10:07.470
So we've got our random colors.

10:07.500 --> 10:12.090
So the next step is to apply background colors to our elements.

10:12.240 --> 10:19.680
So go ahead and pause the video and add a background color using this random color generator that we've

10:19.680 --> 10:20.680
just created.

10:20.760 --> 10:25.370
To each one of those child elements.

10:25.420 --> 10:28.090
So if you have the opportunity to try that out.

10:28.150 --> 10:31.400
And in this lesson now I'll show you the solution to that.

10:31.640 --> 10:39.670
So style and we use the style background property and this is the one that is going to give us the color

10:39.730 --> 10:48.430
so background color and then all we have to do is equal it to our randomly generated color and that's

10:48.430 --> 10:48.930
it.

10:49.210 --> 10:50.390
So let's refresh it.

10:50.650 --> 10:57.790
And every time we refresh it we get some nice colors to our elements and the nice thing about using

10:57.880 --> 11:05.180
this type of functionality is if all of a sudden your code changes and we've got five.

11:05.190 --> 11:07.720
And I'm just going to do a bunch of fives here.

11:07.720 --> 11:14.030
So if you've got a bunch of children in there you can see that they all get those values generated.

11:14.170 --> 11:16.520
I'm also going to display.

11:16.540 --> 11:17.740
Inline block.

11:21.500 --> 11:28.730
And let's refresh that so we get them all in line blocked so we can basically see that this is the parent.

11:28.730 --> 11:32.230
This is the second element.

11:32.270 --> 11:34.190
And then this is the third element.

11:34.190 --> 11:35.700
So it starts at 3.

11:35.780 --> 11:38.550
Then it has some children in there so it's got four.

11:38.630 --> 11:42.100
And then it's got a bunch of children in there just under that.

11:42.110 --> 11:42.840
So there we go.

11:42.860 --> 11:47.880
And every time we refresh we get a nice fresh set of colors.

11:47.930 --> 11:55.410
So if you didn't get a chance to go ahead and try this out and see what you can do with recursion within

11:55.410 --> 11:56.280
your functions.
