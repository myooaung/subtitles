WEBVTT

00:01.130 --> 00:06.450
Well come in in this lesson we are going to be looking at primitive data types so these are the most

00:06.450 --> 00:12.660
basic building blocks of programming languages and we're going to be looking at specifically strings

00:12.720 --> 00:18.720
numbers and booleans so strings are a representation of a set of characters.

00:18.720 --> 00:26.310
I've opened up my Chrome browser opened up dev tools and gone to the tab console and this gives me a

00:26.310 --> 00:31.920
place where I can actually write javascript with correct creating any source files.

00:32.040 --> 00:38.100
So this gives lets me use the runtime within the browser.

00:38.100 --> 00:45.180
That basically renders the code instantly so I can do things like what we saw before where I type in

00:45.180 --> 00:50.120
hello and I can see that that gets rendered immediately.

00:50.340 --> 00:57.420
So we wanted to look at strings and strings are essentially a representation of a consecutive set of

00:57.420 --> 01:00.790
characters wrapped with quotes.

01:00.810 --> 01:04.150
So we saw that when we placed this alert we've got this.

01:04.170 --> 01:05.030
Hello here.

01:05.160 --> 01:07.600
So this is actually a string.

01:07.770 --> 01:15.840
And also what strings can also include spaces that can include numbers and any name any character that's

01:15.840 --> 01:17.490
available within

01:20.010 --> 01:24.480
your reach you can add in here and added in as a string.

01:24.480 --> 01:32.640
So let's take a little world and notice that I've got a space in there so I've wrapping it with quotes

01:32.700 --> 01:36.990
and we get returned back that value that gets returned back.

01:36.990 --> 01:43.100
So essentially this is a string value and it's as simple as that to hold a string of values.

01:43.350 --> 01:50.730
Now we also need to make sure that the courts match because up here if you use a single code up here

01:50.790 --> 01:52.540
over here I've used a double quote.

01:52.710 --> 01:58.620
So you could use either one or you can also use single quotes and you can see that the returned result

01:58.620 --> 02:01.670
comes back as double quotes because this is the returned result.

02:01.830 --> 02:05.090
So it doesn't distinguish between single and double.

02:05.160 --> 02:06.570
It just returns back.

02:06.660 --> 02:08.760
That adds a string value.

02:08.790 --> 02:10.280
So that's the important thing to know.

02:10.290 --> 02:16.290
With Strings and when you are using quotes make sure that you use the same one because if you're not

02:16.530 --> 02:21.630
finishing off with the same one that you open that worth then you're going to get an error and it's

02:21.860 --> 02:23.970
the program actually isn't going to know what to do.

02:23.970 --> 02:27.150
So make sure that those match.

02:27.370 --> 02:32.920
So we know with programming everything is broken down into really simple units and that's where primitive

02:32.920 --> 02:33.800
data types.

02:33.850 --> 02:37.930
It's important to understand what's available and what you have to work with.

02:39.100 --> 02:45.970
When we are programming we are creating a set of instructions and we need something in order to describe

02:46.290 --> 02:49.660
the things within the code within those instructions.

02:49.660 --> 02:52.810
And that's where we come across different data types.

02:52.870 --> 02:59.050
So predominantly we've got a few basic primitive data types and then everything else in javascript are

02:59.140 --> 03:00.550
objects.

03:00.610 --> 03:02.770
So next let's look at numbers.

03:02.770 --> 03:11.170
So numbers are very similar to strings but we're limited to only digits within numbers so we can do

03:11.260 --> 03:14.940
any number that we want and we can see that number gets returned back.

03:14.950 --> 03:16.720
We can do a four point four.

03:16.780 --> 03:21.700
So it doesn't matter if you've got decimal places if you've got fractions.

03:21.700 --> 03:27.460
You can see that everything gets returned back and it actually returns it back as a decimal point.

03:27.460 --> 03:32.080
So we have for over 8 or Also 4 divided by 8.

03:32.110 --> 03:37.890
So we return back zero point five so we can have fractional numbers.

03:37.890 --> 03:39.180
We can have decimal numbers.

03:39.180 --> 03:42.850
We can also have negative numbers so it doesn't matter.

03:43.020 --> 03:49.560
All of them are counted as numbers and that's the type of value the primitive data type that we're looking

03:49.560 --> 03:49.780
at.

03:49.790 --> 03:55.440
When it comes to numbers so I do have a trick question for you.

03:55.450 --> 03:58.540
So we saw earlier that strings have quotes around them.

03:58.540 --> 04:03.560
So what if we have a number and we've got quotes around them.

04:03.580 --> 04:09.520
So what data type is that is not a number or is not a string.

04:09.520 --> 04:13.380
And if you've answered string then you're correct.

04:13.390 --> 04:20.080
Because as soon as we placed those quotes the knot stops stops being a number it's just being a numeric

04:20.080 --> 04:22.790
value and it actually turns into a string.

04:22.900 --> 04:24.680
And we're going to look more.

04:24.820 --> 04:29.260
We're going to look more into this as we progress through the upcoming lessons.

04:29.260 --> 04:36.340
When we look at variables and how we can hold various numbers within our variables and also various

04:36.340 --> 04:38.690
string values within our variables.

04:40.240 --> 04:46.710
So what I want you to do now is take a moment before we jump into variables and open up your browser.

04:46.720 --> 04:54.920
Open up your console and try out writing out different string values and also different number of values

04:55.180 --> 04:56.940
and check it for yourself.

04:57.070 --> 05:00.400
And in the next lesson we're going to be jumping into

05:02.780 --> 05:03.830
variables.

05:03.840 --> 05:05.030
So that's coming up.
