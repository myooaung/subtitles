WEBVTT

00:00.710 --> 00:05.190
Well come back in this lesson where you look at anonymous functions.

00:05.390 --> 00:09.360
So anonymous functions are different than Nemed functions.

00:09.360 --> 00:16.470
Basically an anonymous function can sit in a variables so just call it variable A and then with this

00:16.470 --> 00:22.350
variable where you have a function and where you can actually take a parameter in there.

00:22.440 --> 00:27.350
So we're going to take the value of b and then we're going to do something with the value of p.

00:27.630 --> 00:36.510
So let's first set up our output so that we actually have a document object to document get element

00:36.510 --> 00:39.360
by id and grab output

00:42.330 --> 00:44.850
so that we can output to the inner edged him out.

00:44.850 --> 00:52.380
So basically what I want to help him with this function is I want to output to the interface TNL

00:55.350 --> 01:04.410
and say welcome to and then us function

01:07.940 --> 01:11.300
and then next to this where I'd be.

01:11.720 --> 01:13.470
So we see what happens.

01:13.790 --> 01:19.970
So because this is an anonymous function we're actually not going to see anything happen in the output

01:20.300 --> 01:26.740
because just like functions we need to execute them.

01:26.780 --> 01:30.440
But they're going to work similar but also differently.

01:30.440 --> 01:35.570
So if I select a I can see that I've got the content of my nonna's function.

01:35.570 --> 01:42.740
If I do a round of brackets we're actually going to see the output but we get this undefined because

01:42.740 --> 01:45.540
it's actually expecting a parameter.

01:45.560 --> 01:48.150
So you can type in a parameter there.

01:48.230 --> 01:58.490
And now when we do a and we pass the value of test and as an arguments into the parameters here we see

01:58.500 --> 02:01.750
welcome to an anonymous function test.

02:02.000 --> 02:09.050
And the difference between anonymous functions and main functions is that anonymous functions actually

02:09.110 --> 02:14.690
only exist after they've been called by the program to execute it.

02:15.020 --> 02:18.590
So this actually exists in two.

02:18.590 --> 02:24.410
We call them whereas the functions can be accessed from anywhere within the program.

02:24.800 --> 02:31.580
And the other big difference between an anonymous function being assigned via a variable is that if

02:31.940 --> 02:39.950
I take the variable of a and I resign it I mean no that Javascript has this dynamic type or you can

02:39.950 --> 02:47.570
switch between numbers and strings but we can also reassign these variables from containing an anonymous

02:47.570 --> 02:51.280
function to just having on a string value.

02:51.410 --> 02:55.000
So now for it to a I get that string value returned.

02:55.160 --> 03:00.920
If I go into a with the parentheses there's no function attached to it anymore so I've gotten rid of

03:00.920 --> 03:10.870
that anonymous function and the use case for anonymous functions is just that if you do need to have

03:10.870 --> 03:18.250
a more dynamic capability of writing in different changing functions so that they're not all the same.

03:18.370 --> 03:24.520
Then we can have more flexibility when we're creating our functions by using this type of method with

03:24.520 --> 03:25.450
the variables.

03:25.590 --> 03:32.110
That's not what I want you to do is try it for yourself and update it and create an anonymous function

03:32.350 --> 03:40.540
assigned to a variable and then call that function and then update a function or update the variable

03:40.630 --> 03:43.300
to hold just a regular value.

03:43.300 --> 03:45.290
So go ahead try it for yourself.

03:45.520 --> 03:50.220
And in the next lesson we're going to look at even more that you can do with anonymous functions.
