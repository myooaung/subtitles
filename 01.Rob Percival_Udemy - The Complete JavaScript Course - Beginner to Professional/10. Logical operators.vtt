WEBVTT

00:00.960 --> 00:06.990
Welcome back in this lesson we're looking at logical operators so they're going to allow us to extend

00:06.990 --> 00:09.880
what we could do with the comparison operators.

00:09.900 --> 00:15.820
I set up a few variables here a equals to 5 B course time C equals 5.

00:15.840 --> 00:21.800
So I'd go ahead and open up your browser and we're going to try a few different things out here.

00:21.810 --> 00:25.120
So we know that A is equal to five.

00:25.140 --> 00:33.570
So we saw it previously where we can do a equals five and we can see that that's true with the logical

00:33.570 --> 00:37.110
operators we can apply some additional logic to that.

00:37.110 --> 00:40.120
So we can do a equal to 5.

00:40.290 --> 00:46.200
And then we're not going to close off this bracket quite yet and we're going to use.

00:46.230 --> 00:47.760
And so what.

00:47.760 --> 00:54.550
And it's going to do is this is going to force us to check to see if this one is true.

00:54.600 --> 00:57.040
And this one is true source.

00:57.270 --> 01:00.640
Check to see if A is equal to see.

01:00.780 --> 01:04.080
So notice that I've only got the two equal signs there.

01:04.080 --> 01:11.570
So what do you think the return value here is going to be for if A is equal to 5.

01:11.700 --> 01:14.090
And if A is equal to see.

01:14.260 --> 01:16.490
So if you said true you're correct.

01:16.600 --> 01:19.630
But what if we actually do the absolute value.

01:19.660 --> 01:24.080
If A is equal to 5 but the types are the same.

01:24.090 --> 01:25.240
A and C.

01:25.590 --> 01:27.590
So what do you think is going to happen here.

01:27.750 --> 01:34.470
And if you said false you're correct because both of these need to be true in order for the response

01:34.470 --> 01:35.580
to be true.

01:35.640 --> 01:42.900
So it's clear that up and we can also extend it to multiple values so we can do if A is equal to five

01:43.440 --> 01:47.540
and A is equal to see.

01:47.820 --> 01:53.370
And we can also do one more as well we can do as many as we want and that's really the nice thing about

01:53.370 --> 01:59.560
logical operators is that you can add in as many as needed in order to apply your logic.

01:59.580 --> 02:11.130
So this time what's to be and were checked to see if B is equal to and this time was 2 3 times 2 because

02:11.130 --> 02:15.740
we know the value of b is 10 A is 5.

02:16.620 --> 02:21.650
So basically we know that if we multiply five times two we're going to get 10.

02:21.750 --> 02:23.970
And this value's going to be true.

02:26.330 --> 02:28.840
We could also use the war.

02:29.060 --> 02:38.600
So the way that we could use this we're going to move some of these and we know that he is not absolutely

02:38.600 --> 02:39.530
equal to see.

02:39.530 --> 02:44.910
So we know that if we do that and we get a false there but if we use the or.

02:44.960 --> 02:50.210
So this is going to be different because this is going to give us the ability to check to see if any

02:50.210 --> 02:51.450
one of these is true.

02:51.560 --> 02:56.320
And if any one is true then we're going to get a response back of true.

02:56.330 --> 03:00.250
So that's the big difference between and and or that when we're using.

03:00.260 --> 03:02.360
And they all have to be the same.

03:02.360 --> 03:05.890
They all have to be true or they're going to come back as false.

03:05.900 --> 03:07.860
So everything has to be true to be true.

03:08.000 --> 03:14.330
And with that or only one has to be true and that will return back a value of true.

03:14.630 --> 03:18.240
And the way to get false is if all of them are false.

03:18.320 --> 03:24.530
And then of course over here if one of these false We're going to return back false.

03:24.580 --> 03:30.930
We can also use the not so you might see this as well sometimes where there's this explanation mark.

03:31.150 --> 03:41.090
And then there is a statement so we can do to check to see if A is absolutely available equal to see.

03:41.290 --> 03:44.770
And this is basically reversing their results.

03:44.830 --> 03:51.070
So typically we know that the result for this would be false because A and C but the data types are

03:51.070 --> 03:51.680
different.

03:51.790 --> 03:57.700
But we see that when we put that explanation mark in front then it actually flips the boolean value

03:57.840 --> 04:01.050
so instead of returning back false it's going to return back true.

04:01.060 --> 04:09.490
So there's quite a bit here to take in and applying logic within Colwood is really essential skill when

04:09.490 --> 04:16.000
you're caught coding because it's always comes down to being able to create these types of statements

04:16.000 --> 04:17.430
and apply that logic.

04:17.590 --> 04:23.980
And this is what can take actions and create some type of results within your programming language.

04:23.980 --> 04:27.090
So now let's try another exercise.

04:27.220 --> 04:34.920
And in this case let's do multiple values and we're going to see if it's coming back true or false.

04:37.450 --> 04:42.520
So created some statements here and Javascript wrote putting them into the console.

04:42.570 --> 04:45.700
And what do you think the results are going to be.

04:45.700 --> 04:49.110
So either they're going to be true or false.

04:49.240 --> 04:57.130
And what I want you to do now is to take a look at what's being put here in the console and try to guess

04:57.130 --> 05:00.190
to see what that output is going to be.

05:00.190 --> 05:03.460
So I got it in a couple of other values in here.

05:03.460 --> 05:11.590
I had it in the turret terrine ary operator here that's checking to see the modulus seeing if it's greater

05:11.590 --> 05:15.600
than zero and checking to see returning odd or even.

05:15.980 --> 05:25.530
So take a look at this code pausa video and let me know which ones are true and which ones are false

05:25.620 --> 05:34.740
within these console log messages and I'll pop Pozza video here and I'll show you the results coming

05:34.740 --> 05:35.170
up.

05:36.970 --> 05:43.840
I hope you had the opportunity to take a look at these statements and determine if they're going to

05:43.840 --> 05:45.240
be true or false.

05:45.250 --> 05:51.830
So let's start with this first one here type of A is equal to number.

05:52.240 --> 05:54.250
So what do you think this one's going to be.

05:54.250 --> 05:59.890
Remember A is equal to five and it is a number.

05:59.890 --> 06:00.790
Number.

06:00.850 --> 06:04.030
This value here is actually going to be a string.

06:04.030 --> 06:07.140
So what do you think is going to be the result here.

06:07.390 --> 06:12.130
Do you think that type of A is equal to number.

06:13.430 --> 06:18.600
And if you said true you are correct this one is true.

06:18.620 --> 06:21.010
The next one type of C..

06:21.070 --> 06:28.830
So we know that C is a string type of number and we've got type a number.

06:28.830 --> 06:34.030
So do you think that type of number is equal to type of see.

06:34.040 --> 06:35.990
Do you think that they're equivalent.

06:35.990 --> 06:37.190
True or false.

06:38.210 --> 06:45.000
And if you said true or not one you are correct because we're looking at type of number.

06:45.140 --> 06:49.920
And as I said before our number is actually going to be a string.

06:50.000 --> 06:54.860
So we're actually looking at type of Not that we're looking at a type of number.

06:54.860 --> 06:56.950
We're looking at type of string.

06:57.110 --> 07:02.730
And this is going to be returned as a string type of C as a string as well.

07:02.780 --> 07:09.380
So you can see that when you type that in over here within the con. We see a type of string type of

07:09.470 --> 07:10.090
number.

07:10.090 --> 07:11.860
There are both strings.

07:11.880 --> 07:18.480
Lastly we've got a really long statement here where we're checking to see if D is equal to odd.

07:18.620 --> 07:24.950
So we're we have to evaluate what the results of the statement are going to be in order to determine

07:25.190 --> 07:27.010
if this is true or false.

07:27.140 --> 07:30.080
And remember we're using ants here only.

07:30.080 --> 07:33.190
So they all have to evaluate to be true.

07:33.470 --> 07:39.040
We can't have any that are false or However otherwise this whole statement is going to go false.

07:39.050 --> 07:40.770
So what do you think the result here is.

07:40.820 --> 07:42.900
Do you think it's going to be true or false.

07:43.010 --> 07:45.180
And if you said true you are correct.

07:45.200 --> 07:46.950
So I had set them all to be true.

07:47.000 --> 07:49.030
All these statements are true.

07:49.220 --> 07:50.760
So B.

07:51.050 --> 07:54.200
So we were incrementing B plus 1.

07:54.200 --> 07:57.820
So we're turning the result here of B.

07:57.820 --> 08:00.150
So this is 11 modulus 5.

08:00.170 --> 08:04.170
We know 5 goes into 11 twice has a remainder of 1.

08:04.190 --> 08:07.970
So we know that a 1 is greater than zero.

08:08.030 --> 08:17.660
So we're returning back a value of odd for the next where he can look at B and we can see if B is greater

08:17.660 --> 08:22.800
than 10 and it actually is greater than 10 because the current value is all 11.

08:22.970 --> 08:24.750
So we are greater than 10.

08:24.860 --> 08:31.900
So this is true as well and we see that B is greater than or equal to a times 2.

08:32.000 --> 08:35.350
So a is still five times 2 is 10.

08:35.420 --> 08:40.780
And we know that a B is greater than or equal to 10.

08:40.850 --> 08:43.100
So this one is true as well.

08:43.220 --> 08:49.700
So I go back out here and refresh it and we can see that all of those console messages equate to being

08:49.760 --> 08:50.930
true.

08:50.930 --> 08:51.390
It's true.

08:51.390 --> 09:01.460
Do try it for yourself and challenge yourself and see what different operators between the different

09:01.460 --> 09:10.040
comparison operators as well as applying some logical operators and see what types of challenges you

09:10.040 --> 09:11.490
can assign for yourself.

09:14.400 --> 09:20.050
You can also make it really super interesting by applying even the not so they're not.

09:20.070 --> 09:29.250
Here's another one that we can apply multiple times so we can do something like If B is less than 10

09:29.310 --> 09:35.610
and we can add that in and this one will still be true because we know that B is actually greater than

09:35.610 --> 09:39.590
10 but the knot is actually giving us the ability to flip it around.

09:39.630 --> 09:45.650
So do try it for yourself and create some interesting challenges and see if you can guess what the value

09:45.650 --> 09:46.380
is going to be.

09:46.470 --> 09:50.270
The boolean value is going to be on the return of the statements.
