WEBVTT

00:02.360 --> 00:09.640
Previously with javascript we got used to when we're declaring strings that we would use quotes would

00:09.710 --> 00:16.490
use the double quote or we would use a single quote and if we want to have more lines than we do run

00:16.490 --> 00:23.720
into a problem because we can't just do more lines and then space separated out and this just doesn't

00:23.720 --> 00:24.260
work.

00:24.410 --> 00:26.840
But there is a way to go around that.

00:26.870 --> 00:30.290
And if you're familiar you can do the backslash there.

00:30.320 --> 00:36.950
And what happens when we go out to the browser and we refresh it and type in a we see that we get the

00:36.950 --> 00:37.610
backslash.

00:37.610 --> 00:43.520
We're able to write in more lines but this isn't including all this white space that we've got attached

00:43.520 --> 00:44.090
to it.

00:44.090 --> 00:50.290
And if we do want to include that then we have to include the backslash and which is the new line character.

00:50.300 --> 00:54.340
But then we have to break out of that again with the backslash.

00:54.350 --> 00:59.610
So now when I do this we get that both lines of code that we're able to write that.

00:59.810 --> 01:05.340
But it's not the best solution and that's why ESX came up with something better.

01:05.600 --> 01:07.590
And this is the back tick.

01:07.730 --> 01:13.610
So instead of quote's we use the back tick and this has that little character just to the left of the

01:13.610 --> 01:15.990
one that's the back tick there.

01:16.010 --> 01:22.940
So you got these little back ticks and I can do more lines within the back ticks so I can just keep

01:23.270 --> 01:32.110
spaces I can bring it over to more lines and I can do as many lines as I want as well.

01:32.560 --> 01:35.310
So we see that at no point is breaking out.

01:35.320 --> 01:37.260
And when I go to the console.

01:37.330 --> 01:42.660
So if I do a I see it like that if I do B I see it exactly the same way.

01:42.670 --> 01:47.530
But I didn't have to include the breaks their backs the backslash ands.

01:47.710 --> 01:51.640
So it's a lot more flexible in what we're doing with our code.

01:51.670 --> 01:56.500
We can also see that B is still a string type.

01:56.650 --> 02:02.410
So that hasn't changed it's still a string but we have more flexibility on how we contain the characters

02:02.410 --> 02:03.310
of a string.

02:03.520 --> 02:11.870
And also we do have the ability to add in the quotes as well so we could do a double quote We could

02:11.870 --> 02:18.590
do a single quote and we don't have to break out of them of course because our content is contained

02:18.650 --> 02:20.140
within the tech.

02:20.480 --> 02:30.500
So now if I go out here and if I refresh it again you're going to see that if I type in B that everything

02:30.500 --> 02:34.620
is contained within those texts and notice that it's still counting out the string.

02:34.700 --> 02:38.220
So still counting it with those double quotes on the outside of it.

02:39.910 --> 02:44.320
And also we know with strings what we saw earlier we can get a length of a string.

02:44.410 --> 02:49.490
So if we do a length of the string it's actually counting all of that whitespace characters.

02:49.510 --> 02:55.540
So if we do length of a the same way that it's counting all of that whitespace in there as well.

02:55.630 --> 03:00.700
But we see that because we've added in that additional line and we've added in a bunch more characters

03:00.940 --> 03:05.370
that were actually the length of B is not equivalent to the length of a loser.

03:05.380 --> 03:11.190
This is just the new way of creating strings and it's a lot more flexible than what we had before.

03:11.320 --> 03:17.110
So what I want you to do now is open up your editor and create some strings using ticks.

03:17.200 --> 03:18.220
So no more quotes.

03:18.250 --> 03:23.500
Use text and use left or Konst to declare your variables.

03:23.560 --> 03:24.520
So try it out.
