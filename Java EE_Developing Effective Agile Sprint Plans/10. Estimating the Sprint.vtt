WEBVTT
1
00:00:01.207 --> 00:00:04.092
Now that we have what we believe are the items for the next sprint,

2
00:00:04.092 --> 00:00:07.940
let's estimate or re-estimate the items in the list since some

3
00:00:07.940 --> 00:00:11.191
of these items may have been estimated in the previous sprint

4
00:00:11.191 --> 00:00:14.684
or release planning exercises, and things have changed.

5
00:00:14.684 --> 00:00:18.829
So we want to take our sprint 2 backlog and discuss each item or story.

6
00:00:18.829 --> 00:00:20.601
While you are discussing the items,

7
00:00:20.601 --> 00:00:23.601
ask and listen to your team's expert opinions.

8
00:00:23.601 --> 00:00:28.012
Experts have experience, intuition, and just plain gut feel.

9
00:00:28.012 --> 00:00:29.690
Also, try to use analogies.

10
00:00:29.690 --> 00:00:33.166
What I mean by that, try having the discussions incorporate comparisons,

11
00:00:33.166 --> 00:00:36.185
parallels, and contrasts.

12
00:00:36.185 --> 00:00:38.844
Strive for team consensus for each estimate.

13
00:00:38.844 --> 00:00:41.621
Everyone does not have to be at the same estimate value,

14
00:00:41.621 --> 00:00:44.110
but close enough to move forward.

15
00:00:44.110 --> 00:00:45.737
To ensure that the discussion is structured,

16
00:00:45.737 --> 00:00:49.546
use a timebox of 5 minutes, or just say at 10 A.M.

17
00:00:49.546 --> 00:00:51.910
we will cease and go with what we have.

18
00:00:51.910 --> 00:00:56.858
Estimates do not need to be perfect per se, just jointly agreed to if possible.

19
00:00:56.858 --> 00:01:01.134
Perform a feature or user story decomposition if necessary.

20
00:01:01.134 --> 00:01:04.400
Splitting a feature into smaller, easier to understand,

21
00:01:04.400 --> 00:01:08.430
and, therefore, easier to estimate, now estimate those smaller user stories,

22
00:01:08.430 --> 00:01:11.178
and make sure they are accounted for in the backlog.

23
00:01:11.178 --> 00:01:14.415
Now that we know the environment by which we want to create these estimates,

24
00:01:14.415 --> 00:01:15.659
let's go make them.

25
00:01:15.659 --> 00:01:17.941
Now let's look at our estimation results in step 2.

26
00:01:17.941 --> 00:01:22.369
Each item in the backlog may already have an estimate from previous discussions.

27
00:01:22.369 --> 00:01:23.808
In fact, it is quite likely.

28
00:01:23.808 --> 00:01:25.423
But as we have learned about Agile,

29
00:01:25.423 --> 00:01:28.044
we are always making course corrections as needed.

30
00:01:28.044 --> 00:01:31.824
So we see here that for user stories 1 and 2 we have

31
00:01:31.824 --> 00:01:34.406
estimates 12 and 5 respectively,

32
00:01:34.406 --> 00:01:37.332
and story 7 is new and has not been estimated before.

33
00:01:37.332 --> 00:01:41.251
We now at this point in the project may have learned so much about the

34
00:01:41.251 --> 00:01:44.372
business domains and our estimation skills may have improved,

35
00:01:44.372 --> 00:01:47.061
so we re-estimate the three user stories.

36
00:01:47.061 --> 00:01:50.713
In this example, we have re-estimated story 1 to 10,

37
00:01:50.713 --> 00:01:56.603
and story 2 to 12, and the newly estimated story 7 at 22 points.

38
00:01:56.603 --> 00:01:59.127
So for our sprint, we have user story 1,

39
00:01:59.127 --> 00:02:03.835
2, and 7, and we have estimated the story points as 10,

40
00:02:03.835 --> 00:02:06.096
12, and 22 respectively.

41
00:02:06.096 --> 00:02:07.610
Now for a point of view.

42
00:02:07.610 --> 00:02:11.084
There is a lot of discussion out there on the value of story points

43
00:02:11.084 --> 00:02:14.471
verses hours and a lot of misunderstandings as well,

44
00:02:14.471 --> 00:02:16.063
so let's talk about a few of those.

45
00:02:16.063 --> 00:02:19.184
No correlation with skills and experience of the estimator.

46
00:02:19.184 --> 00:02:20.646
As we already mentioned,

47
00:02:20.646 --> 00:02:24.743
the specialist who estimates a task isn't always the one who implements it.

48
00:02:24.743 --> 00:02:26.903
Senior and junior developers need different amounts

49
00:02:26.903 --> 00:02:29.125
of time to complete the same task.

50
00:02:29.125 --> 00:02:32.614
The only way to avoid all this is to make a developer who estimates a

51
00:02:32.614 --> 00:02:35.406
project also be the one who implements that project.

52
00:02:35.406 --> 00:02:36.966
That usually doesn't always happen.

53
00:02:36.966 --> 00:02:40.675
Story points eliminate this problem because they are a

54
00:02:40.675 --> 00:02:42.800
universal measurement across the whole team.

55
00:02:42.800 --> 00:02:46.442
The estimate doesn't depend on who's implementing the story.

56
00:02:46.442 --> 00:02:49.320
All team members with different skill levels can discuss it

57
00:02:49.320 --> 00:02:52.266
together and come to a single conclusion.

58
00:02:52.266 --> 00:02:55.904
The whole team can get a clear understanding of the story size and complexity.

59
00:02:55.904 --> 00:02:58.243
This is probably the main advantage of story points.

60
00:02:58.243 --> 00:02:59.953
Velocity is tracked.

61
00:02:59.953 --> 00:03:03.984
Another key to the power of story points estimation is velocity.

62
00:03:03.984 --> 00:03:07.627
Velocity is a powerful capacity planning method that demonstrates

63
00:03:07.627 --> 00:03:11.650
how much product backlog effort a software development team can

64
00:03:11.650 --> 00:03:13.722
successfully handle in one sprint.

65
00:03:13.722 --> 00:03:19.046
The goal of a team is to raise its Team members discuss ways to achieve

66
00:03:19.046 --> 00:03:22.464
greater velocity during retrospectives after each sprint.

67
00:03:22.464 --> 00:03:23.952
The higher the team's velocity,

68
00:03:23.952 --> 00:03:27.145
the higher the team's capacity to perform a given

69
00:03:27.145 --> 00:03:29.144
task quicker and more efficiently.

70
00:03:29.144 --> 00:03:33.548
But velocity is a relative value that can change during the course of a project.

71
00:03:33.548 --> 00:03:35.149
And here we find the next advantage.

72
00:03:35.149 --> 00:03:37.502
You will not need to re-estimate your user stories,

73
00:03:37.502 --> 00:03:40.526
features, or you project if the velocity changes,

74
00:03:40.526 --> 00:03:44.573
whereas estimated in man hours would require you to

75
00:03:44.573 --> 00:03:46.371
perform probably a recalculation.

76
00:03:46.371 --> 00:03:48.830
No re-estimation if velocity changes.

77
00:03:48.830 --> 00:03:53.143
Another value of story points is that they let you re-plan

78
00:03:53.143 --> 00:03:56.503
product release deadlines without re-estimating all the tasks

79
00:03:56.503 --> 00:03:58.375
if members of a team are changed.

80
00:03:58.375 --> 00:04:01.483
It often happens that one person estimates a project,

81
00:04:01.483 --> 00:04:03.277
but another completes the task.

82
00:04:03.277 --> 00:04:06.084
In this case, story points are indispensible.

83
00:04:06.084 --> 00:04:09.474
And lastly, do not equate hours to points.

84
00:04:09.474 --> 00:04:12.795
Story points are helpful because they allow team members who perform at

85
00:04:12.795 --> 00:04:16.241
different speeds to communicate an estimate collaboratively.

86
00:04:16.241 --> 00:04:18.397
If two developers estimate a story as one point,

87
00:04:18.397 --> 00:04:21.480
yet in their own minds they might be thinking about 5

88
00:04:21.480 --> 00:04:24.493
hours and the other developer say 7 hours,

89
00:04:24.493 --> 00:04:27.048
starting with that estimate of 1 point,

90
00:04:27.048 --> 00:04:30.756
they can then agree to estimate something as say 2 points.

91
00:04:30.756 --> 00:04:39.000
If each agree, it'll take twice as long as the first story. Now, let's move on to the next part of sprint planning.

