WEBVTT
1
00:00:00.420 --> 00:00:03.090
Hello and welcome to this new tutorial.

2
00:00:03.090 --> 00:00:03.410
All right.

3
00:00:03.420 --> 00:00:07.410
So in the previous Statoil we created our as is the neural network.

4
00:00:07.470 --> 00:00:10.800
So now we have the frame and the net the neural network.

5
00:00:10.830 --> 00:00:14.960
So we have one less thing to create before we are ready to apply the detect function.

6
00:00:15.000 --> 00:00:16.790
It's the transformation.

7
00:00:16.850 --> 00:00:19.180
So that's exactly what we're going to do in the Statoil.

8
00:00:19.270 --> 00:00:21.350
We're going to create that transformation.

9
00:00:21.350 --> 00:00:26.710
I'm saying create because we're actually going to create a new object of the base transform class.

10
00:00:26.880 --> 00:00:32.820
So it is exactly this object that will do the transformation itself on the image so that this image

11
00:00:32.910 --> 00:00:38.520
is compatible with the neural network that is this transformation will make sure that this frame can

12
00:00:38.520 --> 00:00:41.080
get in to the neural network net.

13
00:00:41.100 --> 00:00:41.430
All right.

14
00:00:41.440 --> 00:00:42.300
So let's do this.

15
00:00:42.300 --> 00:00:44.450
It's going to be very easy and fast.

16
00:00:44.490 --> 00:00:47.360
We just need one line of code because we have the base friends from class.

17
00:00:47.370 --> 00:00:51.120
We just need to create an object of this class so let's do this.

18
00:00:51.120 --> 00:00:55.610
We're going to call this transformation transform obviously.

19
00:00:55.770 --> 00:01:03.160
And since this transform transformation is going to be an object of the base transform class.

20
00:01:03.180 --> 00:01:07.100
Well I'm calling this class and now we have to input several arguments.

21
00:01:07.170 --> 00:01:14.510
So the first argument is not that size and not that size is the target size of the images to feed to

22
00:01:14.520 --> 00:01:15.700
the neural network.

23
00:01:16.020 --> 00:01:24.930
So here we go net that size that the second argument is a couple of three arguments a triplet is going

24
00:01:24.930 --> 00:01:31.520
to be a triplet of three numbers that will allow to put the color values at the right scale.

25
00:01:31.830 --> 00:01:33.320
And what is this right scale.

26
00:01:33.360 --> 00:01:37.550
Well that's exactly the scale under which the neural network was trained.

27
00:01:37.620 --> 00:01:43.770
That is this new will network from which we're losing the weight was trained it was trained under some

28
00:01:43.770 --> 00:01:47.540
certain convention and part of this convention concerns the skill.

29
00:01:47.790 --> 00:01:53.680
And what we're doing now is exactly putting the right scale for the color values.

30
00:01:53.700 --> 00:01:58.940
So now I'm just going to put three numbers don't worry about the numbers.

31
00:01:58.950 --> 00:02:01.100
These are just numbers to get the red scale.

32
00:02:01.230 --> 00:02:02.820
But it's not the most important.

33
00:02:02.850 --> 00:02:10.890
So these numbers are the first one is 104 divided by 256 point zero.

34
00:02:10.890 --> 00:02:23.220
Then the second number is 117 divided by 256 point zero and the third and final number is 123 divided

35
00:02:23.220 --> 00:02:26.550
by 256 point zero.

36
00:02:26.850 --> 00:02:27.450
All right.

37
00:02:27.450 --> 00:02:31.910
So net size is the target size of the images to be given to the neural network.

38
00:02:32.100 --> 00:02:37.980
And these three values here are some scale values to make sure that the color values are in the right

39
00:02:37.980 --> 00:02:40.200
scale and that's it.

40
00:02:40.380 --> 00:02:42.900
Actually our transformation is ready.

41
00:02:42.900 --> 00:02:50.280
So now time for some exciting stuff in the next tutorial we will actually open the video then we will

42
00:02:50.310 --> 00:02:58.440
iterate on the frames of this video because I remind that this technique is a frame by frame detection.

43
00:02:58.500 --> 00:03:05.130
So we playing the detect function on each frame of the video you're going to see that this two seconds

44
00:03:05.130 --> 00:03:10.840
video has sixty eight frames I think something like that 67 or 68.

45
00:03:10.980 --> 00:03:16.340
And we're going to play the detect function on the 68 frames of this video.

46
00:03:16.560 --> 00:03:21.360
So the first thing we'll do after opening the video is that we'll get all these frames.

47
00:03:21.510 --> 00:03:24.210
Then we'll apply that to check function on each of these frames.

48
00:03:24.360 --> 00:03:30.510
Then there's the deck function will detect some dogs humans or whatever on the frames will print the

49
00:03:30.510 --> 00:03:36.370
rectangles on each of these frames and then we will reassemble the whole frames to make a new video.

50
00:03:36.450 --> 00:03:41.180
That is the original video with the detector rectangles detecting the objects.

51
00:03:41.370 --> 00:03:43.920
So I can't wait to do that in the next tutorial.

52
00:03:43.920 --> 00:03:45.810
We're about to see the final video.

53
00:03:45.810 --> 00:03:47.280
Can't wait to show you this.

54
00:03:47.340 --> 00:03:49.200
Until then enjoy computer vision.
