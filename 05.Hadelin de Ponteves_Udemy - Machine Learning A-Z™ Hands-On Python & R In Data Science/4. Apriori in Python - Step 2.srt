1
00:00:00,150 --> 00:00:01,040
Hello my friends.

2
00:00:01,080 --> 00:00:02,490
All right let's do this.

3
00:00:02,490 --> 00:00:04,560
Let's start this implementation.

4
00:00:04,560 --> 00:00:10,620
So the first step is of course to implement the data repricing phase and it will be slightly different

5
00:00:10,620 --> 00:00:11,880
than what we did before.

6
00:00:11,880 --> 00:00:18,710
Because we will only use actually from our data pricing template this code sale where we import you

7
00:00:18,710 --> 00:00:24,780
know the widely used libraries like num by metallurgy and vendors and then only this line of code you

8
00:00:24,780 --> 00:00:27,190
know to load the data set and that's it.

9
00:00:27,210 --> 00:00:31,950
Then we won't create a matrix of features or debate in vivo vector because here we're doing a totally

10
00:00:31,950 --> 00:00:32,640
different thing.

11
00:00:32,640 --> 00:00:37,650
Association rule learning and we don't have to split the data set into a training set a test because

12
00:00:37,650 --> 00:00:41,020
we will directly learn all the rules through the whole dataset.

13
00:00:41,040 --> 00:00:41,720
Okay.

14
00:00:41,730 --> 00:00:49,170
So right now we just want this first you know to import the main libraries and then we'll get that line

15
00:00:49,170 --> 00:00:50,970
of code to import the data set.

16
00:00:51,120 --> 00:00:56,350
So here I am creating a new code cell I'm importing this and then we can load the deficit.

17
00:00:56,580 --> 00:01:02,130
However there is something important you should know about this a primary implementation it is the fact

18
00:01:02,130 --> 00:01:05,610
that for the first time we won't use psychic learn.

19
00:01:05,610 --> 00:01:11,930
And fortunately the site learn library doesn't include some classes or functions on a primary.

20
00:01:11,940 --> 00:01:14,700
Basically it doesn't include the primary model.

21
00:01:14,700 --> 00:01:20,880
Therefore we're not going to use cycle learn to train the model who will actually use another library

22
00:01:21,000 --> 00:01:27,060
which is called a binary you know a binary that P Y is actually a Python implementation containing all

23
00:01:27,060 --> 00:01:29,670
the algorithm of the primary model.

24
00:01:29,760 --> 00:01:36,270
And that's what we will get you know and use to train our primary model here on the whole dataset but

25
00:01:36,600 --> 00:01:42,750
exceptionally because you know Google collab contains most of the libraries and packages pre installed

26
00:01:43,080 --> 00:01:47,730
but here exceptionally Google cool app doesn't include that aspiring module.

27
00:01:47,730 --> 00:01:50,380
So we will actually have to install it.

28
00:01:50,430 --> 00:01:55,380
And this is very good that you see this because you will encounter this situation sometimes you know

29
00:01:55,740 --> 00:01:57,060
rarely but sometimes.

30
00:01:57,210 --> 00:02:02,550
And so you need to know how to install a certain package or a certain library from the web you know

31
00:02:02,550 --> 00:02:03,280
from online.

32
00:02:03,330 --> 00:02:09,570
What we'll do now is we will enter a command you know Pip comment which will download first the by refiled

33
00:02:09,570 --> 00:02:15,540
from the Internet you know through a link and then will install it inside this particular notebook.

34
00:02:15,540 --> 00:02:15,850
All right.

35
00:02:15,870 --> 00:02:16,910
We're me to show you.

36
00:02:16,950 --> 00:02:17,670
Let's do this.

37
00:02:17,670 --> 00:02:22,680
So we're actually going to implement this right before you know importing the main libraries usually

38
00:02:22,890 --> 00:02:25,450
the packages are installed as a first step.

39
00:02:25,680 --> 00:02:28,920
And to do this we need to start with an exclamation mark.

40
00:02:28,920 --> 00:02:30,640
Then Pip you know that's the pip.

41
00:02:30,640 --> 00:02:36,240
Commander allow us to install packages Then very simply Well speaking of installing packages.

42
00:02:36,270 --> 00:02:42,870
The next thing to enter here is install and then you simply enter the name of that library or module

43
00:02:43,110 --> 00:02:45,270
that you want to install in our case.

44
00:02:45,270 --> 00:02:47,160
As we said it is a priory.

45
00:02:47,160 --> 00:02:49,080
Be careful it is not a primary.

46
00:02:49,110 --> 00:02:52,680
It is a primary like that AP White or I.

47
00:02:52,890 --> 00:02:53,530
OK.

48
00:02:53,690 --> 00:02:56,980
So exclamation mark pip install a pyre.

49
00:02:57,450 --> 00:02:57,790
All right.

50
00:02:57,800 --> 00:02:59,300
Now let me show you what it does.

51
00:02:59,310 --> 00:03:04,800
As I said it's going to download it first and then it will install it inside a notebook.

52
00:03:04,800 --> 00:03:11,710
So here it is finding it on the web and very soon we will see in the output for download.

53
00:03:11,730 --> 00:03:12,060
All right.

54
00:03:12,060 --> 00:03:12,620
There we go.

55
00:03:12,690 --> 00:03:19,710
The download is starting now collecting a pirated downloading it from the link and then installing it

56
00:03:19,860 --> 00:03:22,430
and then you know successfully installed a pirate.

57
00:03:22,450 --> 00:03:27,110
So it just takes a few seconds and this is the version of this Barry package.

58
00:03:27,120 --> 00:03:32,310
One on one point too maybe you'll get a different one you know if you take this course way after I recorded

59
00:03:32,310 --> 00:03:32,970
this tutorial.

60
00:03:33,360 --> 00:03:33,990
All right so good.

61
00:03:33,990 --> 00:03:39,870
Now you know how to install a package within Google collab but worry most of the packages and including

62
00:03:39,870 --> 00:03:44,130
the deepening one like tens of flow are already pre installed.

63
00:03:44,130 --> 00:03:45,610
Okay good.

64
00:03:45,630 --> 00:03:46,510
So now.

65
00:03:46,530 --> 00:03:52,140
Well let's import the libraries now as we are here and now let's implement the data processing phase.

66
00:03:52,140 --> 00:03:59,100
So let's create a new code cell then as we said we will just get that first line of importing the data

67
00:03:59,100 --> 00:04:07,320
set in our data processing template and we're going to paste that right here in our copy and that's

68
00:04:07,320 --> 00:04:07,590
it.

69
00:04:07,590 --> 00:04:13,260
That's all we'll get from the template and now we will adapt and make it 100 percent customized to the

70
00:04:13,320 --> 00:04:14,850
Priory model.

71
00:04:14,850 --> 00:04:15,060
All right.

72
00:04:15,060 --> 00:04:21,090
So first let's just replace the name of the data set here by the right name which is remember market

73
00:04:21,930 --> 00:04:26,870
on the score basket on the score optimization.

74
00:04:27,240 --> 00:04:27,940
Okay.

75
00:04:27,960 --> 00:04:34,140
And now that we did this let's think of the right thing to do which is to upload the data set here.

76
00:04:34,140 --> 00:04:34,790
Oh good.

77
00:04:34,800 --> 00:04:36,750
So let's click upload.

78
00:04:36,750 --> 00:04:37,140
All right.

79
00:04:37,200 --> 00:04:42,780
Then make sure to find you know that machine learning is at Curves and data sets folder on your machine.

80
00:04:42,780 --> 00:04:47,130
And if you haven't downloaded yet you can download it right before this tutorial at the bottom of the

81
00:04:47,130 --> 00:04:48,030
Oracle.

82
00:04:48,030 --> 00:04:48,360
All right.

83
00:04:48,360 --> 00:04:54,810
So let's go inside and let's go to part five association rule learning then primary and python.

84
00:04:54,820 --> 00:04:55,620
And there we go.

85
00:04:55,620 --> 00:04:59,000
Let's select market basket optimization.

86
00:04:59,190 --> 00:05:03,380
Let's kick open click okay and it will load it.

87
00:05:03,430 --> 00:05:05,050
And there we go we have it.

88
00:05:05,070 --> 00:05:07,380
Don't try to open it because it is actually very big.

89
00:05:07,380 --> 00:05:12,360
And Google I won't allow you but you know if you want to have a look at it you can go back to the folder

90
00:05:12,660 --> 00:05:15,000
and you know just double click it here.

91
00:05:15,060 --> 00:05:18,270
Right and you can see it very well and see all the transaction.

92
00:05:18,270 --> 00:05:21,270
Okay so we'll actually leave it like that in case we want to see it.

93
00:05:21,270 --> 00:05:23,480
And now back to our implementation.

94
00:05:23,590 --> 00:05:25,350
Let's see what we have to do next.

95
00:05:25,350 --> 00:05:29,840
So we already loaded the data set as append this data frame.

96
00:05:29,880 --> 00:05:35,460
However we have to be careful with something look at the data set again and notice something.

97
00:05:35,460 --> 00:05:42,000
Notice that you know on our previous data set the first row here of this next one here contains actually

98
00:05:42,000 --> 00:05:44,470
before the names of the columns.

99
00:05:44,490 --> 00:05:44,790
Right.

100
00:05:44,790 --> 00:05:50,910
For example if we take our social network add data set in part three classification Well remember this

101
00:05:50,910 --> 00:05:57,240
first row here had for us the age the name of the first column and then the estimated salary which was

102
00:05:57,240 --> 00:06:01,430
the name of the second column and then the name of the dependent variable purchased.

103
00:06:01,560 --> 00:06:04,120
And here in this particular data set.

104
00:06:04,230 --> 00:06:09,940
Well you know we don't have names of columns because each of these elements here correspond to just

105
00:06:10,020 --> 00:06:10,880
different products.

106
00:06:10,880 --> 00:06:11,060
OK.

107
00:06:11,070 --> 00:06:16,380
So there was no need to name any of these columns and therefore here we need to add something in our

108
00:06:16,770 --> 00:06:22,770
read on this course as we function to tell that the first row doesn't contain the names of the column

109
00:06:23,010 --> 00:06:24,340
because if we don't say this.

110
00:06:24,360 --> 00:06:29,760
Well actually it will not take that first transaction because it will think that this first row are

111
00:06:29,760 --> 00:06:31,160
just names of the columns.

112
00:06:31,230 --> 00:06:36,210
We have to specify this and the way to specify this and it's good that you know this trick in pandas

113
00:06:36,660 --> 00:06:43,470
is just add another parameter in this read on this course as we function which is header and we set

114
00:06:43,470 --> 00:06:45,240
it equal to none.

115
00:06:45,240 --> 00:06:45,540
Right.

116
00:06:45,540 --> 00:06:51,310
So that we can specify that indeed there are no headers meaning no column names.

117
00:06:51,480 --> 00:06:51,780
OK.

118
00:06:51,810 --> 00:06:52,890
That's what it means.

119
00:06:52,890 --> 00:06:53,730
So now you know this.

120
00:06:53,730 --> 00:06:59,730
And therefore it will take into account you know it will take the first row of this market basket optimization

121
00:06:59,760 --> 00:07:01,950
dataset containing all the transactions.

122
00:07:02,070 --> 00:07:04,590
And what does it will take the first transaction.

123
00:07:04,590 --> 00:07:06,140
All right good.

124
00:07:06,150 --> 00:07:11,880
So that was the first step but then we actually have another big step and that has to do with the fact

125
00:07:11,880 --> 00:07:16,190
that when we will train the Priory model on the data set.

126
00:07:16,350 --> 00:07:20,190
Well we will use a certain function that is actually called a priory.

127
00:07:20,190 --> 00:07:24,360
And of course that function will take as input the data set.

128
00:07:24,360 --> 00:07:31,440
But the thing is that it expects this data set to have a certain format and that format is unfortunately

129
00:07:31,470 --> 00:07:33,440
not attendance data frame.

130
00:07:33,550 --> 00:07:40,050
Therefore we have to recreate the data set from this original Benton's data frame so that it can have

131
00:07:40,170 --> 00:07:46,980
this format expected by the primary function which will train the primary model on the whole dataset.

132
00:07:47,010 --> 00:07:52,550
And so now the question is what is this format what that format is simply a list of transactions you

133
00:07:52,550 --> 00:07:58,050
know instead of having the data set as a penny's data frame we want to have the data set as a list of

134
00:07:58,050 --> 00:07:58,760
transactions.

135
00:07:58,770 --> 00:08:05,110
You know the transactions listed one by one with the different products purchased by the customers.

136
00:08:05,220 --> 00:08:08,140
And that's exactly what we have to do now we have to create that list.

137
00:08:08,250 --> 00:08:13,470
And the first step to create that list is actually to initialize it as an empty list because then in

138
00:08:13,470 --> 00:08:18,660
order to create that list we will have to populated with the different transactions of the data set

139
00:08:19,080 --> 00:08:26,100
and the way we will do this is of course with a for loop you know for loop iterating all the 7500 transactions

140
00:08:26,100 --> 00:08:28,260
of the data set so as to populate it.

141
00:08:28,400 --> 00:08:28,740
Okay.

142
00:08:29,100 --> 00:08:30,020
So let's do this first.

143
00:08:30,030 --> 00:08:32,490
Let's initialize that list.

144
00:08:32,550 --> 00:08:37,470
We will call it transactions and we will initialize it as an empty list.

145
00:08:37,470 --> 00:08:37,740
All right.

146
00:08:37,740 --> 00:08:39,570
So so far it is just an empty list.

147
00:08:39,720 --> 00:08:47,430
And now we will start a for loop to populate this list of transactions with all the transactions contained

148
00:08:47,580 --> 00:08:49,730
in that and this data frame dataset.

149
00:08:50,240 --> 00:08:50,700
Okay.

150
00:08:50,730 --> 00:08:55,340
So as we make that loop you will totally understand what we are doing.

151
00:08:55,350 --> 00:09:04,280
So for then classic iterator variable I know which will take all the values from zero to 7500.

152
00:09:04,350 --> 00:09:07,440
But remember that the upper bound of a range is excluded.

153
00:09:07,440 --> 00:09:10,840
So we'll actually have to go up to seven thousand five hundred one.

154
00:09:10,950 --> 00:09:20,250
Therefore here this iterated variable will go in the range from zero to seven thousand five hundred

155
00:09:20,550 --> 00:09:21,260
and one.

156
00:09:21,270 --> 00:09:21,660
All right.

157
00:09:21,660 --> 00:09:27,480
There are actually seven thousand five hundred and one transactions because we start from zero and not

158
00:09:27,590 --> 00:09:28,850
7500.

159
00:09:28,850 --> 00:09:29,080
Right.

160
00:09:29,080 --> 00:09:31,310
We can check it out very quickly.

161
00:09:31,310 --> 00:09:32,850
No here we start from 1.

162
00:09:32,850 --> 00:09:35,990
And when we scroll down we go down to let's see.

163
00:09:36,150 --> 00:09:38,280
Yes seven thousand five hundred and one.

164
00:09:38,310 --> 00:09:40,780
That's the exact number of transactions.

165
00:09:40,800 --> 00:09:41,480
All right.

166
00:09:41,520 --> 00:09:43,470
So all good for the range.

167
00:09:43,470 --> 00:09:46,340
Now don't forget the colon.

168
00:09:46,650 --> 00:09:52,050
And now we begin to follow up and well you know building this list of transactions is very easy we will

169
00:09:52,050 --> 00:09:58,410
just use the append function which means add and which will simply add the different transactions of

170
00:09:58,410 --> 00:10:00,350
the dataset one by all right.

171
00:10:00,360 --> 00:10:02,770
It's a very classic way to build a list.

172
00:10:02,790 --> 00:10:06,300
You know you use the append function to add your different elements one by one.

173
00:10:06,330 --> 00:10:13,530
So let me show this to you very simply what we need to do here is take our transactions list OK from

174
00:10:13,530 --> 00:10:19,910
which we're going to call this planned function which is a pre-built function of a python list.

175
00:10:19,920 --> 00:10:23,550
You know python has all these pre-built functions and inside.

176
00:10:23,550 --> 00:10:29,130
Well we're going to add the transaction but we have to add it in a pair of square brackets because it

177
00:10:29,130 --> 00:10:34,170
will contain you know all the different elements you know all the different products purchased by the

178
00:10:34,200 --> 00:10:36,680
underlying customer in the transaction.

179
00:10:36,780 --> 00:10:40,330
And this transaction must be created as a list of products.

180
00:10:40,350 --> 00:10:45,990
And that's why we have these new pair of square brackets to make that transaction a list of products.

181
00:10:45,990 --> 00:10:51,720
So in the end we are actually creating a list of lists you know each transaction in the big list of

182
00:10:51,720 --> 00:10:53,330
transactions is actually a list.

183
00:10:53,390 --> 00:10:54,080
Right.

184
00:10:54,090 --> 00:11:01,200
And so now there is a little trick but which is good that you know it is a single row for loop because

185
00:11:01,200 --> 00:11:08,980
now actually we need to do a second for loop to you know get all the products of each transaction.

186
00:11:08,980 --> 00:11:13,920
So let me scroll back up into the first full loop we'll go from this transaction to this one to this

187
00:11:13,920 --> 00:11:16,690
one to this one down to the last one at the bottom.

188
00:11:16,710 --> 00:11:18,490
Seven thousand five hundred one.

189
00:11:18,690 --> 00:11:24,540
But then we need to do a second for loop which will loop over the different products in each transaction.

190
00:11:24,540 --> 00:11:28,650
So you know it will add this product than this one and this one than this one.

191
00:11:28,650 --> 00:11:35,970
And since the maximum number of products in one basket is actually 20 you know I put this first transaction

192
00:11:36,030 --> 00:11:40,920
at the top so that we can have the maximum size of the basket which is 20.

193
00:11:40,920 --> 00:11:46,980
And therefore what we'll do now is the second for loop that will iterate from zero to 20.

194
00:11:46,980 --> 00:11:48,950
It will start from zero here.

195
00:11:48,950 --> 00:11:53,430
You know that's the index of the first gone and then it will iterate to this one then to this one and

196
00:11:53,430 --> 00:11:59,450
to this one up to the final index which is index 19 actually because it starts from zero.

197
00:11:59,460 --> 00:12:00,510
There are 20 columns.

198
00:12:00,600 --> 00:12:02,840
So it goes up to the index to 90.

199
00:12:02,910 --> 00:12:03,140
OK.

200
00:12:03,150 --> 00:12:10,290
So that's the second for loop and that's what we'll do right away inside this pen function to add all

201
00:12:10,290 --> 00:12:12,910
the different elements in each transaction.

202
00:12:13,050 --> 00:12:16,040
And for the transactions that don't have 20 elements.

203
00:12:16,050 --> 00:12:17,370
Well that's totally fine.

204
00:12:17,400 --> 00:12:23,610
We will still iterate up to the end you know up to the index 19 but we'll just populate the list with

205
00:12:23,910 --> 00:12:30,180
nuns you know nuns values which mean empty so that our model will understand that the transaction here

206
00:12:30,270 --> 00:12:32,070
only has three product.

207
00:12:32,190 --> 00:12:32,820
OK.

208
00:12:32,910 --> 00:12:38,580
So we can totally iterate up to 20 and therefore let's start this second follow up here.

209
00:12:38,580 --> 00:12:47,220
For now we need to take another iterator variable which we'll call naturally J for j in the range from

210
00:12:47,580 --> 00:12:54,620
0 to be careful not 19 but 20 because the upper bound is once again excluded.

211
00:12:54,620 --> 00:13:01,520
So from 0 to 20 then what we will do and that's the syntax in a single row for loop.

212
00:13:01,680 --> 00:13:06,560
We have to do what we want to do with this for loop at the beginning you know before the Fourth and

213
00:13:06,570 --> 00:13:10,860
what we want to do is just get that product in the transaction.

214
00:13:10,860 --> 00:13:16,810
Well from the index 0 to the index 19 and to assess this product well we will of course use our data

215
00:13:16,810 --> 00:13:20,820
set and play with the right indexes to get the right product.

216
00:13:20,820 --> 00:13:21,090
All right.

217
00:13:21,090 --> 00:13:23,000
So here is the call first.

218
00:13:23,170 --> 00:13:25,510
The data set okay.

219
00:13:25,700 --> 00:13:31,890
And now let's add some brackets to add you know the index of the row and the index of the column that

220
00:13:31,890 --> 00:13:33,030
contains that product.

221
00:13:33,060 --> 00:13:35,410
We want to include in this transaction.

222
00:13:35,430 --> 00:13:38,700
So first according to you what will be the index of the row.

223
00:13:38,700 --> 00:13:45,630
Well that will be of course I because I iterate through all the rows of the data set and therefore now

224
00:13:45,630 --> 00:13:51,810
we're dealing actually with that particular transaction of index I which were bending into that transactions

225
00:13:51,810 --> 00:13:57,900
list and therefore the row of the data set we are at right now is exactly high.

226
00:13:58,180 --> 00:14:00,520
OK I will start from zero.

227
00:14:00,540 --> 00:14:03,010
It will first get that transaction.

228
00:14:03,090 --> 00:14:06,480
Then it will be equal to ones which will get that transaction.

229
00:14:06,480 --> 00:14:08,650
And then this one and this one etc..

230
00:14:08,670 --> 00:14:09,270
All right.

231
00:14:09,270 --> 00:14:12,420
And so now we're dealing with a particular transaction of a particular row.

232
00:14:12,420 --> 00:14:16,350
And that's exactly the index of the data sets we need to input here.

233
00:14:16,350 --> 00:14:19,780
And now for the column which index you think it's going to be.

234
00:14:19,800 --> 00:14:26,040
Well that will be of course that index you know which iterate through all the columns of actually the

235
00:14:26,040 --> 00:14:26,970
transaction.

236
00:14:26,970 --> 00:14:27,770
Right.

237
00:14:27,930 --> 00:14:32,970
J we'll go from 0 to 1 to 2 to 3 to 4 up to 19.

238
00:14:32,970 --> 00:14:37,800
And therefore here the index 1 4 column is of course J.

239
00:14:37,800 --> 00:14:38,460
All right.

240
00:14:38,460 --> 00:14:39,780
So very good.

241
00:14:39,780 --> 00:14:46,170
But now we need to add one final thing you know unfortunately we can not directly access the sale of

242
00:14:46,170 --> 00:14:53,850
row in column J in the data set in order to access the sale we just need to adhere to that values because

243
00:14:53,850 --> 00:14:57,120
that's the part of that dataset structure.

244
00:14:57,120 --> 00:15:01,770
You know this is an advanced structure by pen does that allow us to get access to the cells.

245
00:15:01,770 --> 00:15:02,400
All right.

246
00:15:02,400 --> 00:15:05,940
So good that you know this and now we're almost ready.

247
00:15:06,030 --> 00:15:07,890
We almost have everything.

248
00:15:07,920 --> 00:15:13,770
The only thing that's left has again to do with you know a certain expectation of the future a primary

249
00:15:13,770 --> 00:15:16,560
function which we'll use to train our primary moral.

250
00:15:16,590 --> 00:15:22,740
It is the fact that all the elements in the list must be strings they must be strings.

251
00:15:22,750 --> 00:15:30,120
Otherwise the Priory model won't be able to learn the rules and to make sure that these you know values

252
00:15:30,270 --> 00:15:34,350
we populate inside each of our transactions in our list.

253
00:15:34,350 --> 00:15:39,900
Well in order to make sure that these are strings we can force it this way by putting that into the

254
00:15:39,900 --> 00:15:46,710
string function as we are which will take us input exactly these elements meaning these product of the

255
00:15:46,710 --> 00:15:47,730
transactions.

256
00:15:47,730 --> 00:15:48,020
All right.

257
00:15:48,030 --> 00:15:56,160
Now we make sure that the products are strings in actually quotes and this will give exactly what the

258
00:15:56,160 --> 00:16:00,480
primary model is expecting as the format of its inputs.

259
00:16:00,480 --> 00:16:01,380
Good.

260
00:16:01,410 --> 00:16:01,860
Perfect.

261
00:16:01,860 --> 00:16:07,410
So now we're done with data progressing as I told you it's a bit different than before but now you know

262
00:16:07,440 --> 00:16:12,990
that for the primary model you have to just create a list of transactions and make sure that all the

263
00:16:13,080 --> 00:16:17,280
elements in each of your transactions are strings perfect.

264
00:16:17,280 --> 00:16:20,160
So now let's execute this sale because we're ready.

265
00:16:20,220 --> 00:16:25,410
Let's hope we making a mistake play running this cell and all good.

266
00:16:25,410 --> 00:16:26,030
Perfect.

267
00:16:26,040 --> 00:16:27,810
It just ran successfully.

268
00:16:27,810 --> 00:16:33,980
Now we have this list of transactions containing all the same transactions as in this data set.

269
00:16:33,990 --> 00:16:36,380
But in the format of a list.

270
00:16:36,540 --> 00:16:36,910
Good.

271
00:16:37,030 --> 00:16:42,450
So now we're going to take a little break because then comes the real big important step training the

272
00:16:42,480 --> 00:16:50,760
primary moral on the data set and to do this we'll call this a primary function that will take as input.

273
00:16:50,760 --> 00:16:57,900
Exactly this list of transactions that is now correctly populated in the right format to train the primary

274
00:16:57,900 --> 00:17:00,060
model on the data set.

275
00:17:00,090 --> 00:17:04,930
So take a little break and as soon as you're ready let's implement that next step together.

276
00:17:04,950 --> 00:17:06,780
And until then enjoy machine learning.
