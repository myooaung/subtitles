1
00:00:00,360 --> 00:00:00,720
All right.

2
00:00:00,750 --> 00:00:01,520
Let's do this.

3
00:00:01,520 --> 00:00:04,220
Let us predict the test set results.

4
00:00:04,230 --> 00:00:08,510
So as I said in the previous story all we're going to do is play two vectors.

5
00:00:08,520 --> 00:00:13,740
First one being the vector of the real profits and the test set and the second one being the vector

6
00:00:13,740 --> 00:00:19,290
of the predicted profits in the same test set and we're going to compare next to each other to see if

7
00:00:19,290 --> 00:00:21,720
our predictions are close to the real results.

8
00:00:22,130 --> 00:00:22,400
All right.

9
00:00:22,410 --> 00:00:23,220
Let's do this.

10
00:00:23,220 --> 00:00:25,800
Let's start by creating a new Kotel.

11
00:00:26,250 --> 00:00:30,330
So the first thing I ask you to do was to indeed get that vector of predictions.

12
00:00:30,330 --> 00:00:35,130
So first since we want to get a vector I'm going to introduce a new variable which I'm going to call

13
00:00:35,220 --> 00:00:42,260
as usual y pred that's going to be the vector of the predicted profits in the test.

14
00:00:42,360 --> 00:00:44,430
And now how do we get our predictions.

15
00:00:44,430 --> 00:00:45,660
Well you know the solution.

16
00:00:45,660 --> 00:00:51,690
It's actually exactly the same as with simple in our regression we first need to take our regress or

17
00:00:52,260 --> 00:00:58,700
object you know are multiple in our regression model from which you know adding a dot here we're going

18
00:00:58,700 --> 00:01:03,760
to call that predict method parenthesis.

19
00:01:03,780 --> 00:01:11,490
And of course in this method we have to input Well the features of the test set you know exactly these

20
00:01:11,490 --> 00:01:14,010
ones not including the prophet of course.

21
00:01:14,010 --> 00:01:20,310
These are all the features with first the encoded variables for the state then the RNC spend and the

22
00:01:20,340 --> 00:01:23,580
administrations ban and the marketing spend.

23
00:01:23,580 --> 00:01:29,850
All right so these are all the features which we need to input in our predict method here in order to

24
00:01:29,850 --> 00:01:31,670
predict the profits.

25
00:01:31,680 --> 00:01:34,660
So let's do this X test.

26
00:01:35,060 --> 00:01:35,320
Right.

27
00:01:35,320 --> 00:01:40,080
Because we're predicting the test results we want to check the predictions of new observations.

28
00:01:40,080 --> 00:01:40,980
And there you go.

29
00:01:40,980 --> 00:01:44,250
Now we get our vector of predicted profits.

30
00:01:44,280 --> 00:01:44,790
Perfect.

31
00:01:45,270 --> 00:01:46,220
And now the next step.

32
00:01:46,230 --> 00:01:50,210
And you know here we're going to do it together because it is quite specific.

33
00:01:50,310 --> 00:01:55,920
And mostly I want to display some nice vectors with not a too complex notation like you know remember

34
00:01:55,920 --> 00:01:59,580
this one in the data repressing tools when we applied feature scaling.

35
00:01:59,580 --> 00:02:02,150
You know we had all these decimals after the comma.

36
00:02:02,490 --> 00:02:07,850
Well I want to avoid this and therefore here the thing that I'm going to do is I'm going to call number

37
00:02:07,850 --> 00:02:15,690
by which has a shortcut MP from which I'm gonna call one of its function which is set underscore print

38
00:02:16,080 --> 00:02:19,000
options as Google cooler guesses perfectly.

39
00:02:19,020 --> 00:02:19,750
That's great.

40
00:02:19,770 --> 00:02:20,910
It helps me.

41
00:02:20,910 --> 00:02:24,270
And now in the parenthesis I'm just going to enter.

42
00:02:24,330 --> 00:02:27,240
Precision equals two.

43
00:02:27,300 --> 00:02:27,630
All right.

44
00:02:27,630 --> 00:02:33,090
And this will display any numerical value with only two decimals as a comma.

45
00:02:33,090 --> 00:02:38,190
All right so this will be much more beautiful to visualize and mostly much easier to visualize.

46
00:02:38,850 --> 00:02:39,080
Okay.

47
00:02:39,090 --> 00:02:39,940
Good.

48
00:02:39,960 --> 00:02:45,450
And now final step this is a step where we're going to display the two vectors of the real profits and

49
00:02:45,450 --> 00:02:50,530
of the predicted profits together next to each other and to do this well we're going to use you know

50
00:02:50,640 --> 00:02:52,620
a classic trick with NUM pi.

51
00:02:52,620 --> 00:02:58,320
I remember that num Pi has a lot of tools to handle arrays and one of these tools actually that we need

52
00:02:58,320 --> 00:03:05,460
right now is concatenate concatenate is a function of number that allows to concatenate either vertically

53
00:03:05,460 --> 00:03:08,700
or horizontally to vectors or even arrays.

54
00:03:08,730 --> 00:03:14,190
And so now we're going to use the CONCATENATE function to concatenate vertically are two vectors of

55
00:03:14,190 --> 00:03:16,520
the real profits and the brings it profits.

56
00:03:16,530 --> 00:03:17,430
All right so let's do this.

57
00:03:17,430 --> 00:03:21,270
Just follow me I will explain everything as I'm coding.

58
00:03:21,270 --> 00:03:26,550
So first we're simply going to start with the prince you know because we want to print that concatenation

59
00:03:26,550 --> 00:03:29,220
of the two vectors so print.

60
00:03:29,220 --> 00:03:33,140
Then here we go we're going to call that concatenate function by num by.

61
00:03:33,190 --> 00:03:37,040
So that's why I'm calling it a shortcut MP now from which.

62
00:03:37,110 --> 00:03:37,530
Yes.

63
00:03:37,560 --> 00:03:37,980
There we go.

64
00:03:37,980 --> 00:03:39,820
We call the cat tonight.

65
00:03:40,110 --> 00:03:46,230
Function perfect parenthesis and now be careful because this is always a bit confusing.

66
00:03:46,230 --> 00:03:51,200
The concatenate function by num by actually expect as a first argument.

67
00:03:51,230 --> 00:03:52,040
Check this out here.

68
00:03:52,080 --> 00:03:56,920
The sample of arrays you want to concatenate or you know vectors.

69
00:03:57,240 --> 00:03:59,190
So actually all the description is here.

70
00:03:59,310 --> 00:04:02,030
You know a one a two is a sequence of arrays.

71
00:04:02,100 --> 00:04:05,220
You want to concatenate and that must have the same shape.

72
00:04:05,220 --> 00:04:10,080
Well that's perfect for us because of course our vector of predicted profits in the vector of real profits

73
00:04:10,320 --> 00:04:16,410
have exactly the same shape meaning they are one dimensional vector containing the same number of profits.

74
00:04:16,410 --> 00:04:16,630
OK.

75
00:04:16,640 --> 00:04:17,190
So that's good.

76
00:04:17,670 --> 00:04:24,990
But these vectors that we want to concatenate have to be in some parentheses and these are actually

77
00:04:24,990 --> 00:04:30,930
the first argument you know this couple of arrays of vectors is the first argument input in parentheses.

78
00:04:30,930 --> 00:04:33,640
So here I'm gonna add new parentheses.

79
00:04:33,660 --> 00:04:34,320
All right.

80
00:04:34,320 --> 00:04:37,950
This is the first argument and what is going to be inside this parenthesis.

81
00:04:37,950 --> 00:04:39,990
Well of course are two vectors.

82
00:04:39,990 --> 00:04:43,620
The vector of predicted profits and the vector of real profits.

83
00:04:43,620 --> 00:04:47,010
All right so let's first at the vector of predicted profits.

84
00:04:47,010 --> 00:04:55,110
This is of course why Fred and now because we want to display them vertically and not horizontally remember

85
00:04:55,110 --> 00:05:01,010
that you know actually I can show this to you in data repricing tools we actually printed why at some

86
00:05:01,010 --> 00:05:02,000
point.

87
00:05:02,000 --> 00:05:02,690
There we go.

88
00:05:02,690 --> 00:05:08,510
You know remember when we print the dependent viral vector since it is vector it is displayed horizontally.

89
00:05:08,510 --> 00:05:13,820
I actually prefer to display you know our two vectors of predictions and real profits vertically.

90
00:05:14,060 --> 00:05:19,820
So now I'm going to add another trick to put that vertical you know to convert that from being horizontal

91
00:05:19,970 --> 00:05:20,690
to vertical.

92
00:05:20,690 --> 00:05:26,950
And the trick is to do that is just to add dot reshape reshape is an attribute function that allows

93
00:05:26,960 --> 00:05:32,390
to you know reshape your vectors or arrays and in order to reshape a vector from being horizontal to

94
00:05:32,390 --> 00:05:39,080
vertical well we're just not add as input of this function first the number of elements in widespread

95
00:05:39,400 --> 00:05:42,710
and that's actually so far the number of columns because you know it is horizontal.

96
00:05:42,980 --> 00:05:49,460
And to get that number we can simply use the len function which returns the length of a vector.

97
00:05:49,460 --> 00:05:52,580
And therefore here I'm going to input y print.

98
00:05:53,220 --> 00:05:53,920
Okay.

99
00:05:54,140 --> 00:05:59,860
So this is the first element of the reshape function and the second one is just one.

100
00:05:59,870 --> 00:06:00,230
All right.

101
00:06:00,950 --> 00:06:01,910
So what does it mean.

102
00:06:01,940 --> 00:06:06,050
That means that you want to reshape your wiper vector into an array.

103
00:06:06,050 --> 00:06:11,860
Having Len wipe red rows meaning you know that a number of rows will be equal to the number of start

104
00:06:11,860 --> 00:06:12,380
ups.

105
00:06:12,590 --> 00:06:14,590
And then just one column.

106
00:06:14,600 --> 00:06:14,930
All right.

107
00:06:14,990 --> 00:06:15,970
That's what it means.

108
00:06:15,980 --> 00:06:18,410
So it's good that you know this reshaped trick.

109
00:06:18,410 --> 00:06:23,030
Now you know how to reshape your vectors and you will see that it is actually going to be much nicer.

110
00:06:23,030 --> 00:06:23,300
All right.

111
00:06:23,330 --> 00:06:24,230
That's four.

112
00:06:24,260 --> 00:06:31,160
Remember the first element of this couple that is actually the first argument of the CONCATENATE function.

113
00:06:31,160 --> 00:06:38,390
And now next one is going to be well the other vector we want to concatenate to that vector of predicted

114
00:06:38,390 --> 00:06:40,900
profits which is the vector of real profits.

115
00:06:40,910 --> 00:06:41,150
All right.

116
00:06:41,150 --> 00:06:45,890
So here we can do this very efficiently because this is exactly the same trick I'm going to copy all

117
00:06:45,890 --> 00:06:52,780
this and paste that here and just replace widespread by.

118
00:06:53,110 --> 00:06:55,520
What do we have to replace white bread by.

119
00:06:55,520 --> 00:07:01,930
Well of course we had to replace it by whitest because whiteness contains of course the real profits

120
00:07:02,220 --> 00:07:03,180
in the tested.

121
00:07:03,250 --> 00:07:05,870
All right here we are evaluating our moral on the test.

122
00:07:05,890 --> 00:07:10,280
So here we go replacing white bread by white test.

123
00:07:10,450 --> 00:07:12,610
And here as well.

124
00:07:13,030 --> 00:07:18,380
Actually we could keep that because the length of whites is the same as the length of white bread.

125
00:07:18,610 --> 00:07:19,450
But there we go.

126
00:07:19,450 --> 00:07:24,190
Now we have a beautiful concatenation of two vertical vectors.

127
00:07:24,190 --> 00:07:25,780
But remember this.

128
00:07:25,990 --> 00:07:35,740
You know this up to here is actually the first argument of the CONCATENATE function and therefore we

129
00:07:35,740 --> 00:07:40,300
need to add the second one which is the axis as you can see.

130
00:07:40,690 --> 00:07:47,470
So axis here can take two values 0 0 1 0 means that we wanted to a vertical concatenation and 1 means

131
00:07:47,470 --> 00:07:53,350
that we want to do a horizontal concatenation and since here we want to concatenate two vertical vectors

132
00:07:53,350 --> 00:07:54,010
together.

133
00:07:54,070 --> 00:07:58,560
While that concatenation is actually horizontal and therefore we have to input here.

134
00:07:58,600 --> 00:08:04,090
Axis equals 1 and we don't have to specify the name of the argument because this is input in the same

135
00:08:04,120 --> 00:08:04,930
order.

136
00:08:05,220 --> 00:08:05,890
All right.

137
00:08:05,890 --> 00:08:06,610
And that's it.

138
00:08:06,610 --> 00:08:11,140
I told you that it was better that we do it together because there are actually a lot of tricks done

139
00:08:11,140 --> 00:08:11,730
here.

140
00:08:11,800 --> 00:08:16,840
But don't worry for all the next times when we want to compare to numerical vectors we will just do

141
00:08:16,840 --> 00:08:18,850
some copy paste and apply this.

142
00:08:18,850 --> 00:08:24,340
You know the purpose of this course is also for you to have some code templates which can use efficiently

143
00:08:24,670 --> 00:08:25,680
on your data sets.

144
00:08:25,840 --> 00:08:26,940
All right.

145
00:08:26,950 --> 00:08:27,240
Okay.

146
00:08:27,250 --> 00:08:27,510
Good.

147
00:08:27,510 --> 00:08:34,960
So now we're going to observe the final result and see if our model was able to return some predictions.

148
00:08:34,960 --> 00:08:39,000
You know some predicted profits close to the real profits.

149
00:08:39,010 --> 00:08:39,760
There we go.

150
00:08:39,760 --> 00:08:42,830
I hope I didn't make any mistakes with all these parenthesis.

151
00:08:42,910 --> 00:08:47,130
Let's press play to run the sale and awesome.

152
00:08:47,140 --> 00:08:48,070
I didn't make any mistake.

153
00:08:48,070 --> 00:08:48,600
Perfect.

154
00:08:48,640 --> 00:08:50,580
So let's recap.

155
00:08:50,590 --> 00:08:52,870
We can clearly see that we have two vectors here.

156
00:08:52,870 --> 00:08:55,720
That's the first one and that's the second one on the left.

157
00:08:55,720 --> 00:09:01,480
We have the vector of predicted profits and that's why pred and other the right we have the vector of

158
00:09:01,630 --> 00:09:07,470
real profits for of course the 10 startups of the test set.

159
00:09:07,480 --> 00:09:07,800
All right.

160
00:09:07,870 --> 00:09:09,520
So let's see let's see what we get.

161
00:09:09,520 --> 00:09:12,990
Let's see if our predicted profits are close to the real profit.

162
00:09:13,060 --> 00:09:18,860
So for the first drop of the test set well the predicted profit is around one hundred and three thousand.

163
00:09:18,910 --> 00:09:22,290
And the real profit is actually one hundred and three thousand two hundred.

164
00:09:22,300 --> 00:09:23,050
So very close.

165
00:09:23,050 --> 00:09:23,620
That's perfect.

166
00:09:23,620 --> 00:09:26,050
That's an amazing first prediction.

167
00:09:26,050 --> 00:09:30,850
Then second startup of the test set to break the profit is one hundred and thirty two thousand five

168
00:09:30,850 --> 00:09:32,010
hundred and eighty two.

169
00:09:32,110 --> 00:09:37,630
And the real profit is actually one hundred forty four thousand so not a great prediction like before

170
00:09:37,630 --> 00:09:39,160
but still not too bad.

171
00:09:39,160 --> 00:09:42,170
Third startup 132 146.

172
00:09:42,250 --> 00:09:49,050
Still not great but not too bad either for startups 71 actually 72 and seventy eight.

173
00:09:49,090 --> 00:09:49,380
All right.

174
00:09:49,390 --> 00:09:52,780
So pretty close then one hundred seventy eight.

175
00:09:52,780 --> 00:09:54,020
One hundred and ninety one.

176
00:09:54,150 --> 00:09:54,940
Okay.

177
00:09:55,080 --> 00:09:57,400
One hundred and sixteen one hundred and five.

178
00:09:57,730 --> 00:09:59,890
So actually the first petition was amazing.

179
00:09:59,890 --> 00:10:03,130
But then you know the other ones are still quite good.

180
00:10:03,310 --> 00:10:10,270
Then sixty seven sixty eight actually eighty one okay ninety eight thousand and ninety seven thousand.

181
00:10:10,300 --> 00:10:14,920
Very good one hundred and thirteen thousand actually one hundred and fourteen thousand one hundred and

182
00:10:14,920 --> 00:10:15,850
ten thousand.

183
00:10:15,850 --> 00:10:17,020
Very very good.

184
00:10:17,020 --> 00:10:21,450
And one hundred and sixty seven thousand and one hundred and sixty six thousand.

185
00:10:21,460 --> 00:10:22,350
Amazing predictions.

186
00:10:22,360 --> 00:10:29,130
So we have some you know amazing predictions very close to the real profits and some okay predictions.

187
00:10:29,170 --> 00:10:33,330
Okay is there are not too far from the real results so here.

188
00:10:33,340 --> 00:10:39,070
From what we see well we could say that the multiple in our regression is well adapted to this dataset

189
00:10:39,490 --> 00:10:44,090
the dataset does not necessarily have some perfect linear correlations.

190
00:10:44,140 --> 00:10:49,030
However you can be assured that with this linear regression class well it was able to select the right

191
00:10:49,030 --> 00:10:52,300
features with the right parameters to make these predictions.

192
00:10:52,300 --> 00:10:58,200
And even if you tune your linear regression model by for example applying backward elimination to selection

193
00:10:58,200 --> 00:11:03,940
of a team of more statistically significant features you will actually get similar results.

194
00:11:03,940 --> 00:11:04,500
You can try.

195
00:11:04,500 --> 00:11:06,730
That actually would be a good practice.

196
00:11:06,760 --> 00:11:11,770
We actually do that in our section but in terms of performance this won't change much.

197
00:11:11,770 --> 00:11:17,800
And remember your goal is to be efficient when building and testing your machinery models.

198
00:11:17,800 --> 00:11:22,900
So when you get such results with your multiple in a regression you know in real life you will actually

199
00:11:22,900 --> 00:11:24,440
try other models.

200
00:11:24,520 --> 00:11:29,980
You will actually try other modules which can tune also and then in the annual compare the performance

201
00:11:29,980 --> 00:11:32,750
of each of these models and select the best one.

202
00:11:32,830 --> 00:11:39,460
So we'll talk about this again at the end of this section and also a lot in ports and on moral selection

203
00:11:39,940 --> 00:11:45,520
and so now I have to say congratulations because we now know how to build another missionary model which

204
00:11:45,520 --> 00:11:49,330
is multiple in our regression and therefore which you can add in your toolkit.

205
00:11:49,390 --> 00:11:51,870
Thanks to this new coat template.

206
00:11:52,030 --> 00:11:52,640
Perfect.

207
00:11:52,780 --> 00:11:58,210
So now we're going to move on to our I remind that you don't have to master the two programming languages

208
00:11:58,360 --> 00:12:00,100
if you want to master two that's fine.

209
00:12:00,100 --> 00:12:03,780
Join me in the toils and otherwise if you want to stick to python.

210
00:12:03,910 --> 00:12:11,140
Well feel free to skip the R Section and join us here I in the next section on polynomial regression

211
00:12:11,140 --> 00:12:19,360
where you will learn how to make predictions on a non linear dataset on a dataset with non linear relationships.

212
00:12:19,360 --> 00:12:23,710
Therefore with which a multiple in our regression model would not be relevant.

213
00:12:24,190 --> 00:12:29,250
So it's an absolutely necessary model to add in your toolkit and you will add it the next section.

214
00:12:29,290 --> 00:12:30,990
Until then enjoy machine learning.
