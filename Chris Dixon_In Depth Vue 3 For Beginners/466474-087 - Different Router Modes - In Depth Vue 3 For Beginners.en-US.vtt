WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.130
In this project, we're using a starter project which is downloaded from GitHub.

00:00:05.130 --> 00:00:07.605
It already has the Vue Router installed.

00:00:07.605 --> 00:00:10.320
But when going through the setup process for the router,

00:00:10.320 --> 00:00:13.530
we are asked if we wanted to use the history mode.

00:00:13.530 --> 00:00:17.085
Its history mode is not included with this project's starter,

00:00:17.085 --> 00:00:20.870
so we are currently in what is called the hash history mode.

00:00:20.870 --> 00:00:24.550
This is why we have this hash inside of the URL.

00:00:24.550 --> 00:00:27.555
Since we're using a single-page application,

00:00:27.555 --> 00:00:29.955
this hash is just used internally.

00:00:29.955 --> 00:00:34.030
The part after the hash is the route which you want to navigate to.

00:00:34.030 --> 00:00:39.705
Here we are navigating /category and then our selected category.

00:00:39.705 --> 00:00:42.675
Having this hash inside of the URL however,

00:00:42.675 --> 00:00:45.770
can have a negative impact on SEO.

00:00:45.770 --> 00:00:47.330
If this is a concern,

00:00:47.330 --> 00:00:51.275
we can change the router to make use of HTML5 mode.

00:00:51.275 --> 00:00:53.330
To do this, we'll make this change over in

00:00:53.330 --> 00:00:57.275
the router's index file and then scroll down to the bottom.

00:00:57.275 --> 00:00:59.630
Instead of the web hash history,

00:00:59.630 --> 00:01:03.005
we can replace this with createWebHistory.

00:01:03.005 --> 00:01:06.410
We also need to import this from the router package.

00:01:06.410 --> 00:01:11.830
Up to the very top, we can replace the hash version with the web history.

00:01:11.830 --> 00:01:13.960
This and onto our project,

00:01:13.960 --> 00:01:19.335
we can remove everything after our localhost by the navigation.

00:01:19.335 --> 00:01:21.200
This all works exactly the same,

00:01:21.200 --> 00:01:25.880
but this time without the hash in the navigation. This works fine here.

00:01:25.880 --> 00:01:29.105
But remember that our application is a single-page up,

00:01:29.105 --> 00:01:32.375
and all of the routing is handled on the front end.

00:01:32.375 --> 00:01:35.105
This, when deploying our application,

00:01:35.105 --> 00:01:41.065
we must set up the server to always return our main index.html page.

00:01:41.065 --> 00:01:44.540
Having this set up will allow our router to handle where we need to be on

00:01:44.540 --> 00:01:49.595
the front-end if the user visits the wrong page or a dynamic route.

00:01:49.595 --> 00:01:54.280
We'll take a look at how to set this up later when we deploy our application.

00:01:54.280 --> 00:01:58.790
Additionally, since we're only getting back the main index.html page,

00:01:58.790 --> 00:02:01.880
we also need to handle any 404 errors too.

00:02:01.880 --> 00:02:04.475
We're currently doing this inside of our router,

00:02:04.475 --> 00:02:06.085
that is catch-all route.

00:02:06.085 --> 00:02:10.400
We're going to test if this is working by going to any unrecognized links.

00:02:10.400 --> 00:02:13.055
We still see the "Page not found".

00:02:13.055 --> 00:02:16.255
Also, if we click on any of our links at the top,

00:02:16.255 --> 00:02:20.120
we get the "Page not found" component since we have

00:02:20.120 --> 00:02:24.200
not setup the second section just after our category.

00:02:24.200 --> 00:02:26.600
Currently, what we only have is /category,

00:02:26.600 --> 00:02:29.170
so this is an unrecognized route.

00:02:29.170 --> 00:02:30.840
But if we remove the last section,

00:02:30.840 --> 00:02:34.420
we now have a match of the category component.
