WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.140 --> 00:00:04.770
At the moment, we are not making any changes to any of our lists,

00:00:04.770 --> 00:00:08.145
so Vue.js doesn't really have much work to do.

00:00:08.145 --> 00:00:13.060
However, in real world applications our data may often change,

00:00:13.060 --> 00:00:18.735
either from the user adding something into a form or an update from our server.

00:00:18.735 --> 00:00:23.820
Maybe even a new blogpost being added and updated with an API.

00:00:23.820 --> 00:00:28.755
Once Vue receives these updates since we used the data property,

00:00:28.755 --> 00:00:34.649
it will update our HTML with a new value since data properties are reactive.

00:00:34.649 --> 00:00:38.555
This is simple enough for something such as a string of text,

00:00:38.555 --> 00:00:41.600
but what if we had thousands of blogposts?

00:00:41.600 --> 00:00:45.275
Imagine we deleted or updated one right in the middle,

00:00:45.275 --> 00:00:47.590
how does Vue.js deal with this?

00:00:47.590 --> 00:00:51.395
The answer is to use a special attribute called a key.

00:00:51.395 --> 00:00:54.290
I'm going to add this over to our blogpost,

00:00:54.290 --> 00:00:56.600
which is surrounded in the article.

00:00:56.600 --> 00:00:58.550
Just after our v-for loop,

00:00:58.550 --> 00:01:03.350
we can add in a key attributes and set this equal to a particular value.

00:01:03.350 --> 00:01:09.980
This key is a way to provide a unique identifier to each one of these list items.

00:01:09.980 --> 00:01:13.414
If we had hundreds or even thousands of blogposts,

00:01:13.414 --> 00:01:17.390
having this unique key will allow Vue,js to better

00:01:17.390 --> 00:01:22.160
identify each element when the time comes to update or reorder.

00:01:22.160 --> 00:01:23.810
If we never use keys,

00:01:23.810 --> 00:01:28.900
you would need to refer back to an algorithm to detect any of these changes.

00:01:28.900 --> 00:01:30.920
This key should be unique,

00:01:30.920 --> 00:01:33.800
such as a product ID or for our blog,

00:01:33.800 --> 00:01:38.660
we also have a unique ID for each blogpost. Let's take look.

00:01:38.660 --> 00:01:43.345
We have a unique ID which is stored in this ID property.

00:01:43.345 --> 00:01:46.915
We can pass in the post.id.

00:01:46.915 --> 00:01:50.285
If we add an attribute in just like this,

00:01:50.285 --> 00:01:55.745
Vue.js would read this key value as a string called post.id.

00:01:55.745 --> 00:01:59.360
Rather than extracting the actual values of the variable,

00:01:59.360 --> 00:02:02.560
which is the value of one, two or three.

00:02:02.560 --> 00:02:06.005
If we were to insert some JavaScript or a variable,

00:02:06.005 --> 00:02:07.640
just like we use in here.

00:02:07.640 --> 00:02:10.175
We need to make this key dynamic.

00:02:10.175 --> 00:02:14.585
The way to do this is to use the v-bind directive.

00:02:14.585 --> 00:02:19.160
This is a prefix which is gone to tell Vue.js to read the value

00:02:19.160 --> 00:02:24.205
inside here as a variable rather than the string of texts which is post id.

00:02:24.205 --> 00:02:26.940
This is another Vue.js directive.

00:02:26.940 --> 00:02:31.090
This can also be shortened to simply just use the colon.

00:02:31.090 --> 00:02:34.040
This is our key now taken care off.

00:02:34.040 --> 00:02:37.010
Also when using the v-for directive,

00:02:37.010 --> 00:02:39.680
we can also access the index number.

00:02:39.680 --> 00:02:44.135
This is the position of each one of our items inside of the array.

00:02:44.135 --> 00:02:47.240
Our first blogpost is the position 0,

00:02:47.240 --> 00:02:49.540
then position 1 and so on.

00:02:49.540 --> 00:02:54.590
To do this, we can wrap our variable inside of the brackets just like this.

00:02:54.590 --> 00:02:56.720
We can still access the post,

00:02:56.720 --> 00:03:00.310
but we can also access the index number 2.

00:03:00.310 --> 00:03:03.510
If we wanted to, we could output the index.

00:03:03.510 --> 00:03:06.820
Again inside of the double curly braces,

00:03:07.010 --> 00:03:09.930
we have position 0, position 1,

00:03:09.930 --> 00:03:11.340
and then position 2.

00:03:11.340 --> 00:03:13.220
This is also just like JavaScript,

00:03:13.220 --> 00:03:14.870
we can add plus one.

00:03:14.870 --> 00:03:16.880
This could be the first value,

00:03:16.880 --> 00:03:19.070
the second value and so on.

00:03:19.070 --> 00:03:23.540
This can be useful for things such as numbering our items we display.

00:03:23.540 --> 00:03:26.120
Well, for our blog, exercise is not required.

00:03:26.120 --> 00:03:29.070
We can also remove this too.

00:03:30.140 --> 00:03:32.810
One of the key things to note is,

00:03:32.810 --> 00:03:39.260
it is recommended to not use this index position as a value for our key.

00:03:39.260 --> 00:03:42.440
This is because if no key is supplied,

00:03:42.440 --> 00:03:45.625
we will make use of the index position anyway.

00:03:45.625 --> 00:03:49.115
Also alongside binding this key attributes,

00:03:49.115 --> 00:03:51.950
we can also bind other attributes too,

00:03:51.950 --> 00:03:54.570
which we are going to take a look at next.
