WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.600
If we have multiple text sections just like we see here,

00:00:03.600 --> 00:00:04.890
over on the right-hand side,

00:00:04.890 --> 00:00:07.620
it may be useful to also place in a up and down

00:00:07.620 --> 00:00:11.070
button to rearrange the order of the sections.

00:00:11.070 --> 00:00:16.140
To do this, we're going to go up to the text inputs and then it need at the very top.

00:00:16.140 --> 00:00:18.600
In the last video, we created this section.

00:00:18.600 --> 00:00:20.280
This was for our header.

00:00:20.280 --> 00:00:22.185
Then just above this button,

00:00:22.185 --> 00:00:23.910
create a new div section,

00:00:23.910 --> 00:00:27.660
which will be a wrapper for both of this up and down buttons.

00:00:27.660 --> 00:00:32.130
The first one, we're going to list now for a click,

00:00:32.130 --> 00:00:35.070
which is going to trigger a function we haven't created yet,

00:00:35.070 --> 00:00:38.610
but this will be called updateSectionOrder.

00:00:39.670 --> 00:00:43.490
This function is going to take in two things.

00:00:43.490 --> 00:00:46.070
The first one is going to be the sectionIndex,

00:00:46.070 --> 00:00:47.840
which is from props,

00:00:47.840 --> 00:00:52.465
and the function we'll needed so it knows which section we want to move.

00:00:52.465 --> 00:00:56.855
The second value is the direction we want to move this section.

00:00:56.855 --> 00:00:59.360
So if we think about this, this is an array.

00:00:59.360 --> 00:01:01.610
So this will be index position 0,

00:01:01.610 --> 00:01:04.075
this will be one, and this will be two.

00:01:04.075 --> 00:01:07.125
So to move any of these sections up,

00:01:07.125 --> 00:01:12.200
we need to pass in a negative one to push us up in the array.

00:01:12.200 --> 00:01:17.285
Inside of our button, we'll place in a icon inside of the image element.

00:01:17.285 --> 00:01:24.255
The source is the at symbol into the assets, the icons,

00:01:24.255 --> 00:01:27.340
and we have a icon called arrow-up.svg,

00:01:28.970 --> 00:01:33.150
the alt text of arrow up,

00:01:33.150 --> 00:01:38.435
then it duplicate this button for the next one and place this just after.

00:01:38.435 --> 00:01:40.310
This will call the same function,

00:01:40.310 --> 00:01:42.800
but this time we will have a positive one,

00:01:42.800 --> 00:01:47.700
the arrow down, and the same for the alt text.

00:01:47.700 --> 00:01:49.520
Okay. There's our two buttons,

00:01:49.520 --> 00:01:51.500
but this also needs some styling too.

00:01:51.500 --> 00:01:56.620
This section will wraps all of the buttons as the classic text input header.

00:01:56.620 --> 00:01:59.730
I'm going to grab this and nest it inside.

00:01:59.730 --> 00:02:02.985
We have our div and also this button too.

00:02:02.985 --> 00:02:05.850
We can make use of the flexbox and also the space

00:02:05.850 --> 00:02:09.420
between property to align this across the page.

00:02:09.420 --> 00:02:15.820
Down to the bottom into the style section, I did our class.

00:02:15.950 --> 00:02:19.140
First, the display type of flex.

00:02:19.140 --> 00:02:22.190
This will give us the default flex direction of row,

00:02:22.190 --> 00:02:24.805
so this will be placed across the page.

00:02:24.805 --> 00:02:31.720
Just by content, we'll add the space in between and then some padding on the bottom.

00:02:32.630 --> 00:02:36.215
Next, reduce the size of the images by targeting

00:02:36.215 --> 00:02:40.085
the same wrapper and then the image elements.

00:02:40.085 --> 00:02:46.985
Width of 15 pixels and this will reduce the size of our icons.

00:02:46.985 --> 00:02:52.230
Some padding on the right of five pixels.

00:02:52.230 --> 00:02:55.820
Just play some space in between each one of these icons.

00:02:55.820 --> 00:03:00.305
Okay. Now we need to set this function up over in useCurrentCard.

00:03:00.305 --> 00:03:07.240
Down at the bottom, function, call this updateSectionOrder.

00:03:08.150 --> 00:03:12.870
This was also past the sectionIndex as the first value,

00:03:12.870 --> 00:03:15.295
and the second one was the direction,

00:03:15.295 --> 00:03:18.385
which was either a positive or a negative one.

00:03:18.385 --> 00:03:21.110
It is positive or negative one number which we'll

00:03:21.110 --> 00:03:24.710
use to update the sections index position.

00:03:24.710 --> 00:03:27.490
The first step is to create an array which is going

00:03:27.490 --> 00:03:30.410
to hold all of the sections for this page.

00:03:30.410 --> 00:03:37.575
Just like above, we can access our sections with this part of the code, copy this.

00:03:37.575 --> 00:03:40.630
Just below this before we actually perform this switch,

00:03:40.630 --> 00:03:43.870
we also need to check if this switch is actually possible.

00:03:43.870 --> 00:03:49.330
By this, we mean if we are updating the very top on here and we click on up,

00:03:49.330 --> 00:03:50.965
this has nowhere to go.

00:03:50.965 --> 00:03:54.235
The same for the bottom one too if we click on down,

00:03:54.235 --> 00:03:57.565
we don't have a section below this to replace it with.

00:03:57.565 --> 00:04:00.625
So to guard against this, we'll place in an if statement,

00:04:00.625 --> 00:04:02.625
paste in our sections.

00:04:02.625 --> 00:04:08.810
Then inside here, if we pass in our sectionIndex plus the direction,

00:04:09.050 --> 00:04:13.970
then we'll check if this is equal to undefined.

00:04:14.330 --> 00:04:17.110
Okay. So just to clarify what we're doing here,

00:04:17.110 --> 00:04:20.295
we are grabbing all of our sections on this page.

00:04:20.295 --> 00:04:24.085
We want to guard against this being either the first or

00:04:24.085 --> 00:04:28.890
the last section where what we're doing is is grabbing the current sectionIndex.

00:04:28.890 --> 00:04:30.460
So if this was the first one,

00:04:30.460 --> 00:04:32.185
it will be positioned zero.

00:04:32.185 --> 00:04:34.660
If the user clicked on the up button,

00:04:34.660 --> 00:04:38.230
this will be zero and then a negative one.

00:04:38.230 --> 00:04:41.230
If this was the case, this would equal undefined,

00:04:41.230 --> 00:04:43.000
so this would then be true.

00:04:43.000 --> 00:04:47.290
If sectionIndex, however, was our very last text area,

00:04:47.290 --> 00:04:50.400
in this case it will be index position 2.

00:04:50.400 --> 00:04:53.525
If the direction was a positive one,

00:04:53.525 --> 00:04:56.150
this would then be the index number 3,

00:04:56.150 --> 00:05:00.475
which is not available so therefore we would return undefined.

00:05:00.475 --> 00:05:02.960
If even one of these is the case,

00:05:02.960 --> 00:05:07.900
we want to return it back from this function without updating our sections.

00:05:07.900 --> 00:05:10.320
If not, the function will continue to run,

00:05:10.320 --> 00:05:12.320
and if we reach this stage,

00:05:12.320 --> 00:05:14.495
we can now switch all positions.

00:05:14.495 --> 00:05:19.620
This is really just a matter of switching the index positions of two array items.

00:05:19.620 --> 00:05:23.990
These two array items is the tax section we've clicked on and also

00:05:23.990 --> 00:05:29.300
the tax section which is in the place we want to move it to. This is how it looks.

00:05:29.300 --> 00:05:30.860
We need to create one array,

00:05:30.860 --> 00:05:33.305
which is equal to another array.

00:05:33.305 --> 00:05:37.325
We're going to set our currency rate to be equal to a different one.

00:05:37.325 --> 00:05:39.800
This first one, which is the current array,

00:05:39.800 --> 00:05:41.920
is going to take in two things.

00:05:41.920 --> 00:05:45.170
First, the array item we want to move,

00:05:45.170 --> 00:05:47.060
which we can access with array,

00:05:47.060 --> 00:05:49.700
then passing our sectionIndex,

00:05:49.700 --> 00:05:52.055
and then separated by a comma,

00:05:52.055 --> 00:05:55.030
select the array item we want to replace.

00:05:55.030 --> 00:05:57.285
So we're going to grab our array,

00:05:57.285 --> 00:06:02.800
but this time we'll pass in the sectionIndex plus the direction.

00:06:02.800 --> 00:06:05.920
Then we do the opposite in the second array,

00:06:05.920 --> 00:06:08.390
so we switch around the positions.

00:06:08.390 --> 00:06:10.895
The first finding is our array,

00:06:10.895 --> 00:06:15.820
pass in the sectionIndex plus the direction,

00:06:15.820 --> 00:06:20.475
and then replaces with array sectionIndex,

00:06:20.475 --> 00:06:31.200
and return this back from our function and then import this over in our text input.

00:06:31.760 --> 00:06:35.340
We're already accessing our useCurrentCard function,

00:06:35.340 --> 00:06:38.710
but just passing our updateSectionOrder.

00:06:43.190 --> 00:06:47.680
This name matches the function which are placed in at the very top.

00:06:47.680 --> 00:06:50.270
So when we click on any of these buttons,

00:06:50.270 --> 00:06:53.015
they should now update our index numbers.

00:06:53.015 --> 00:06:57.210
Let's try this out into any one of our sections.

00:06:57.210 --> 00:06:59.745
Now we can click down on the top section,

00:06:59.745 --> 00:07:01.500
it now moves into the middle.

00:07:01.500 --> 00:07:03.540
Click down again on the top section,

00:07:03.540 --> 00:07:06.270
and this one I'll swap the index numbers.

00:07:06.270 --> 00:07:09.540
Look on the bottom section and this works,

00:07:09.540 --> 00:07:12.430
and also test against our guards for the bottom section.

00:07:12.430 --> 00:07:14.855
If we click on down, nothing happens.

00:07:14.855 --> 00:07:17.105
If we click on loop on the top section,

00:07:17.105 --> 00:07:20.100
this also works fine too.

00:07:20.810 --> 00:07:23.825
This will also update the edit section and

00:07:23.825 --> 00:07:27.185
the preview section since everything is reactive,

00:07:27.185 --> 00:07:29.885
but we have one small problem though.

00:07:29.885 --> 00:07:35.030
If we go to any one of our pages which has no new sections,

00:07:35.030 --> 00:07:38.000
we add four new sections into here.

00:07:38.000 --> 00:07:42.420
This can be number 1, number 2,

00:07:42.550 --> 00:07:47.550
number 3, and number 4. Let's try to update this.

00:07:47.550 --> 00:07:50.560
If we click on the up button and down,

00:07:50.560 --> 00:07:54.430
we don't see anything being updated on this edit side.

00:07:54.430 --> 00:07:57.570
Now, this goes back to something we learned about earlier,

00:07:57.570 --> 00:08:00.630
which is adding keys to our v-for loop.

00:08:00.630 --> 00:08:03.050
When updating a list of items like this,

00:08:03.050 --> 00:08:07.555
v will need a unique key to be able to efficiently update.

00:08:07.555 --> 00:08:11.105
We have not yet placed an ID on our new sections.

00:08:11.105 --> 00:08:15.740
We can see this will go to the card edit and into our v-for loop.

00:08:15.740 --> 00:08:19.340
Each one of these keys is relying on a section ID.

00:08:19.340 --> 00:08:21.835
To generate an ID for this,

00:08:21.835 --> 00:08:28.295
go to our useCurrentCard and we can place in an ID field inside of our new section.

00:08:28.295 --> 00:08:32.045
How do we go about generating a unique ID?

00:08:32.045 --> 00:08:33.630
If we're using a database,

00:08:33.630 --> 00:08:35.675
this would be relatively straightforward.

00:08:35.675 --> 00:08:38.150
The database would generate one for us.

00:08:38.150 --> 00:08:43.385
We could then get back the saved item and also store this in our new section.

00:08:43.385 --> 00:08:47.420
For our case, we need to generate one inside the app.

00:08:47.420 --> 00:08:50.195
For this, we're going to import a new package,

00:08:50.195 --> 00:08:51.935
so open up the terminal.

00:08:51.935 --> 00:08:55.345
Host on this server with Command or Control C,

00:08:55.345 --> 00:08:58.680
and then we're going to install a new package with npm,

00:08:58.680 --> 00:09:03.195
I've installed, and the package name is UUID.

00:09:03.195 --> 00:09:09.635
This package is going to generate a unique ID for each one of the items.

00:09:09.635 --> 00:09:11.495
It's really simple to use.

00:09:11.495 --> 00:09:13.990
If we go to the top of this file,

00:09:13.990 --> 00:09:16.485
then we'll import this module.

00:09:16.485 --> 00:09:25.815
We're going to import version 4 as uuidv4 from our package, which is UUID.

00:09:25.815 --> 00:09:29.480
Now, we've imported our version 4 and we're going to

00:09:29.480 --> 00:09:32.930
be able to access it with this variable just here.

00:09:32.930 --> 00:09:40.745
Now, if we go to the other section and set this equal to our name which is uuidv4,

00:09:40.745 --> 00:09:45.000
and then call this function so we generate a new ID.

00:09:45.000 --> 00:09:51.700
Let's try this out. Now, we need to restart the server with npm run serve,

00:09:57.140 --> 00:10:00.930
open the serve and add four new sections;

00:10:00.930 --> 00:10:04.065
number 1, number 2,

00:10:04.065 --> 00:10:06.810
number 3, number 4.

00:10:06.810 --> 00:10:09.630
Let's click up, this will move up.

00:10:09.630 --> 00:10:12.405
Again, let's try down.

00:10:12.405 --> 00:10:15.850
This is now all working correctly.
