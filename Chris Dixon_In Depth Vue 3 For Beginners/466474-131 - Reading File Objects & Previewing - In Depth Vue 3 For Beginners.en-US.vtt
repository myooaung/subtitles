WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.530 --> 00:00:04.125
Next made a function to upload this image.

00:00:04.125 --> 00:00:07.170
We could add this two-way composable file if we wanted.

00:00:07.170 --> 00:00:10.710
But since we only need this in this image upload component,

00:00:10.710 --> 00:00:13.455
we want to place this inside of here.

00:00:13.455 --> 00:00:17.685
So we have a script which we added in the last section,

00:00:17.685 --> 00:00:19.775
and place in a setup function,

00:00:19.775 --> 00:00:22.590
so we can add some composition code.

00:00:22.590 --> 00:00:25.740
The function we need will be called Upload File,

00:00:25.740 --> 00:00:30.520
and this will also need to take in the event details too.

00:00:30.740 --> 00:00:37.190
This event details will be passed when we upload an image from this image uploader.

00:00:37.190 --> 00:00:39.300
We don't need to pass this manually.

00:00:39.300 --> 00:00:42.020
This will be automatically received from our input,

00:00:42.020 --> 00:00:44.900
and we can access this inside of our function.

00:00:44.900 --> 00:00:47.550
So let's also return this,

00:00:50.030 --> 00:00:54.350
and we can now call this function up in our file input.

00:00:54.350 --> 00:00:56.885
To do this, we'll list now for a change,

00:00:56.885 --> 00:00:58.565
and then run our function.

00:00:58.565 --> 00:01:02.320
This change will be run once that image has been uploaded.

00:01:02.320 --> 00:01:04.270
Back down to our function,

00:01:04.270 --> 00:01:09.570
we can see what information is included with this event by doing a console log.

00:01:11.570 --> 00:01:17.555
Save this file and over to the browser into the console.

00:01:17.555 --> 00:01:19.570
Now from here to see this run,

00:01:19.570 --> 00:01:22.400
we need to upload an image.

00:01:22.650 --> 00:01:25.765
You can use new images if you prefer.

00:01:25.765 --> 00:01:29.305
Good to have a list of all of the images which are used in this course.

00:01:29.305 --> 00:01:31.795
So I'm going to select one of these,

00:01:31.795 --> 00:01:36.810
which will enter a function and also our console log if we open this up,

00:01:36.810 --> 00:01:38.315
head into the target,

00:01:38.315 --> 00:01:40.345
and then into the files.

00:01:40.345 --> 00:01:43.705
From here, we only upload in one image at a time.

00:01:43.705 --> 00:01:49.465
So our image will always be this first file in this array at index position zero.

00:01:49.465 --> 00:01:51.970
We see things such as the file name,

00:01:51.970 --> 00:01:56.170
the file size, and also that this is a PNG image.

00:01:56.170 --> 00:01:58.160
So we have the information we need,

00:01:58.160 --> 00:02:02.585
but next we need a way to actually read this file data and for this,

00:02:02.585 --> 00:02:06.415
JavaScript has what is called a file reader object.

00:02:06.415 --> 00:02:09.090
So below our console log.

00:02:09.090 --> 00:02:12.470
Let's obey constant to store this in cold reader.

00:02:12.470 --> 00:02:17.490
This is equal to a new JavaScript file reader object.

00:02:17.680 --> 00:02:23.915
File read object is able to read the contents of the file from the user's computer.

00:02:23.915 --> 00:02:27.725
This image can be used to set a small preview image,

00:02:27.725 --> 00:02:30.520
which was set earlier up in the template.

00:02:30.520 --> 00:02:34.830
This is the empty image element which currently doesn't have a source.

00:02:34.830 --> 00:02:36.260
To set the source,

00:02:36.260 --> 00:02:39.065
we're going to set up some reactive data.

00:02:39.065 --> 00:02:43.100
This will import the reactive package from view,

00:02:46.460 --> 00:02:49.250
and then inside of the setup function,

00:02:49.250 --> 00:02:51.470
set up a constant call state,

00:02:51.470 --> 00:02:55.130
which will contain all of the data which we need for this image.

00:02:55.130 --> 00:03:00.305
We'll also wrap this in the reactive wrapper and place in an object.

00:03:00.305 --> 00:03:04.880
The first property we are going to add inside here is for the image preview.

00:03:04.880 --> 00:03:07.385
Currently, this is just going to be an empty string,

00:03:07.385 --> 00:03:10.745
but we're going to update this from our file reader.

00:03:10.745 --> 00:03:14.855
Once we do this, this will be set to the image source inside of the template.

00:03:14.855 --> 00:03:17.980
So we also need to return our state.

00:03:17.980 --> 00:03:20.340
Pass this into our object,

00:03:20.340 --> 00:03:23.865
and now we'll combine this up inside of the image elements.

00:03:23.865 --> 00:03:28.750
Place in the source, and this is going to be equal to our state object,

00:03:28.750 --> 00:03:31.790
and then the image preview property.

00:03:32.660 --> 00:03:35.040
Currently, of course, this won't work,

00:03:35.040 --> 00:03:37.360
since this is set to be an empty string.

00:03:37.360 --> 00:03:41.440
So we need to update this with the contents of our file reader.

00:03:41.440 --> 00:03:46.765
The file read has various properties and methods we can access to now help with this.

00:03:46.765 --> 00:03:49.735
But before updating the image preview,

00:03:49.735 --> 00:03:53.080
we need to first be sure that the file has finished reading.

00:03:53.080 --> 00:03:56.410
So if we have a really large image which has been uploaded,

00:03:56.410 --> 00:04:00.915
this reading stage may take some time, and so you check this.

00:04:00.915 --> 00:04:03.005
First we'll access our reader,

00:04:03.005 --> 00:04:05.585
and then use the onload property.

00:04:05.585 --> 00:04:09.320
This means once the file reader has finished reading our image object,

00:04:09.320 --> 00:04:10.940
this is then going to trigger

00:04:10.940 --> 00:04:15.725
a function and it's inside of this function where we want to

00:04:15.725 --> 00:04:23.180
update our state dot image preview to be equal to the reader dot results.

00:04:23.180 --> 00:04:26.780
This will run once the reading operation has finished,

00:04:26.780 --> 00:04:30.635
but we have not actually started to read the file contents yet.

00:04:30.635 --> 00:04:34.550
All we've done is create a new empty file reader object.

00:04:34.550 --> 00:04:40.399
To actually read the file, we have a method available called read as data URL.

00:04:40.399 --> 00:04:42.905
So select our reader, goal,

00:04:42.905 --> 00:04:45.095
read as data URL,

00:04:45.095 --> 00:04:49.535
and the file data we want to read is what we've just seen inside of the console.

00:04:49.535 --> 00:04:52.375
So this was inside of the event,

00:04:52.375 --> 00:04:54.765
inside of the target.

00:04:54.765 --> 00:04:57.150
The files which was an array,

00:04:57.150 --> 00:05:00.530
and we always only upload in one single file.

00:05:00.530 --> 00:05:03.085
So this will always be position zero.

00:05:03.085 --> 00:05:06.335
Okay. So once this has finished reading the file,

00:05:06.335 --> 00:05:08.945
this will then run our onload function,

00:05:08.945 --> 00:05:14.065
which will then update our image preview. Let's check this out.

00:05:14.065 --> 00:05:20.565
Refresh the browser and select any one of these images. Open this up.

00:05:20.565 --> 00:05:23.300
We can see our image preview is now working,

00:05:23.300 --> 00:05:26.075
and you could also restrict the size of this image, too.

00:05:26.075 --> 00:05:29.270
Particularly if we have a tall image like this one.

00:05:29.270 --> 00:05:33.500
It would also be a good idea to handle any potential reading problems,

00:05:33.500 --> 00:05:36.830
too, and send a new message to the user.

00:05:36.830 --> 00:05:40.495
This we can place a message into our state,

00:05:40.495 --> 00:05:43.230
and initial empty value,

00:05:43.230 --> 00:05:45.755
and just before the onload property,

00:05:45.755 --> 00:05:49.210
we can also handle any errors with on error.

00:05:49.210 --> 00:05:53.750
So reader.onerror.

00:05:53.750 --> 00:05:56.660
This property is also going to trigger a function,

00:05:56.660 --> 00:06:04.955
it's just like above, where we will update our state.message to be equal to a new string.

00:06:04.955 --> 00:06:06.500
This message is up to us,

00:06:06.500 --> 00:06:08.570
but placing something descriptive, such as,

00:06:08.570 --> 00:06:12.930
there was a problem uploading your message, please try again.

00:06:16.940 --> 00:06:22.485
Okay, we don't need to return anything since we already returned our full state object.

00:06:22.485 --> 00:06:25.310
All we need to do is to place in a text element,

00:06:25.310 --> 00:06:29.640
which I'll put as the state.message and also

00:06:29.640 --> 00:06:34.740
a conditional too to only display this message if the message exists.

00:06:36.230 --> 00:06:41.330
Good, this will now let the user know if there was an error when uploading the image.

00:06:41.330 --> 00:06:44.210
Now we know this image reader is working correctly.

00:06:44.210 --> 00:06:48.630
Next, we'll use it to save our images to Cloudinary.
