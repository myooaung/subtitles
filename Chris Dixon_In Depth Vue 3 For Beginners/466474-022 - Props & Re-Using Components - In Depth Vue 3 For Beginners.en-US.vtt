WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.290 --> 00:00:03.180
Along with isolating our code,

00:00:03.180 --> 00:00:08.055
another benefit of using components is they can also be reused.

00:00:08.055 --> 00:00:10.230
Not only that but we can also reuse

00:00:10.230 --> 00:00:14.145
the same components and also pass it different values.

00:00:14.145 --> 00:00:19.515
To see this, we are going to move over one of our blog posts into a component.

00:00:19.515 --> 00:00:26.040
We can cut or replace the full article section of our blog over in our index.html.

00:00:26.040 --> 00:00:27.990
Just like in the last video,

00:00:27.990 --> 00:00:30.195
we're going to create a new component.

00:00:30.195 --> 00:00:33.660
Again, make sure this is just above up the amount.

00:00:33.660 --> 00:00:39.165
So again, this is up.components and the first argument is going to be the name,

00:00:39.165 --> 00:00:41.770
which I'm going to call the blog-post,

00:00:41.770 --> 00:00:44.885
separated by a comma we pass in our object.

00:00:44.885 --> 00:00:48.395
This is going to take in our template, which is multi-line.

00:00:48.395 --> 00:00:53.030
So again, we use the back ticks paste in our article.

00:00:53.030 --> 00:00:56.605
For our simplicity we're going to remove the for loop.

00:00:56.605 --> 00:01:01.385
We can also change this to be simply a title and the body section.

00:01:01.385 --> 00:01:04.160
So we're going to pass this down a single post.

00:01:04.160 --> 00:01:06.560
Then just like we did with the header component,

00:01:06.560 --> 00:01:11.620
we're going to output our new blog post inside of the HTML.

00:01:11.620 --> 00:01:16.180
This is going to be placed back inside of our blog section.

00:01:16.180 --> 00:01:21.005
This time though, rather than having the data inside of the component,

00:01:21.005 --> 00:01:23.570
just like we did with the header section.

00:01:23.570 --> 00:01:28.645
This time we're going to pass the data down to this component using props.

00:01:28.645 --> 00:01:31.220
Props are just like regular attributes which we can

00:01:31.220 --> 00:01:33.815
use to send the data the component needs,

00:01:33.815 --> 00:01:38.915
and this component needs the title and also the body and the way to do this,

00:01:38.915 --> 00:01:42.610
just like an attribute, is to go into the opening tag of blog posts.

00:01:42.610 --> 00:01:45.740
First of all, we can pass the title and this is

00:01:45.740 --> 00:01:50.310
just some sample data for now so we can give this any title which you want.

00:01:50.860 --> 00:01:53.430
This also needs the body section too,

00:01:53.430 --> 00:01:57.530
so we can give this a second attribute or a second prop.

00:01:57.530 --> 00:02:00.900
Again, this is going to be a simple string.

00:02:02.690 --> 00:02:05.100
Since this is a compound,

00:02:05.100 --> 00:02:07.630
we can also reuse these two.

00:02:07.630 --> 00:02:11.990
So let's copy and paste this in. Change the title.

00:02:13.100 --> 00:02:16.304
Each time we do this and reuse the components,

00:02:16.304 --> 00:02:21.685
each component incidence is independence of the other ones and also has its own data,

00:02:21.685 --> 00:02:24.095
which is also referred to as state.

00:02:24.095 --> 00:02:27.225
Meaning although we have two separate blog posts,

00:02:27.225 --> 00:02:29.490
they will not conflict with each other.

00:02:29.490 --> 00:02:31.350
So we've passed our two props,

00:02:31.350 --> 00:02:33.700
we've passed the title and also the body.

00:02:33.700 --> 00:02:38.210
However, though these are not automatically assigned to these variables.

00:02:38.210 --> 00:02:41.170
One thing we need to do first is to declare exactly

00:02:41.170 --> 00:02:44.760
what props this component expects to receive.

00:02:44.760 --> 00:02:47.180
Since we are receiving multiple props,

00:02:47.180 --> 00:02:50.390
we can add this as an array and then add a comma at the end.

00:02:50.390 --> 00:02:52.970
The first prop is the title,

00:02:52.970 --> 00:02:55.660
and then the second one is the body.

00:02:55.660 --> 00:03:01.040
This now means both of these props are now available to use inside of our template.

00:03:01.040 --> 00:03:03.620
Let's try this out over in the browser.

00:03:03.620 --> 00:03:06.455
When I hover two blog post components,

00:03:06.455 --> 00:03:09.185
each one with independent data.

00:03:09.185 --> 00:03:11.210
Although this works completely fine,

00:03:11.210 --> 00:03:13.384
it's not an efficient way of creating,

00:03:13.384 --> 00:03:15.380
say, 100 blog posts.

00:03:15.380 --> 00:03:20.740
So a better way to do this would be to reuse this component with a V for loop.

00:03:20.740 --> 00:03:25.340
Back to our index page and rather than having in two separate blog posts,

00:03:25.340 --> 00:03:28.550
what we're going to do is just have our single blog post.

00:03:28.550 --> 00:03:31.500
Then we can use a V for loop.

00:03:31.580 --> 00:03:33.980
Inside of this V for loop,

00:03:33.980 --> 00:03:37.445
we want to take advantage of the data which we already have.

00:03:37.445 --> 00:03:42.300
This is all of the blog posts which we have stored inside here.

00:03:42.380 --> 00:03:47.745
So we can say post, in posts pass in a key,

00:03:47.745 --> 00:03:51.135
which is going to be our post.id.

00:03:51.135 --> 00:03:55.760
Now rather than passing down our title and our body as plain text,

00:03:55.760 --> 00:03:58.970
instead we're going to pass down a prop or post,

00:03:58.970 --> 00:04:03.690
which is going to be equal to our post from the loop just above.

00:04:04.130 --> 00:04:06.590
Since this is a variable,

00:04:06.590 --> 00:04:10.025
we also need to bind this using a v bind syntax.

00:04:10.025 --> 00:04:15.445
This is passed as the contents of our variable rather than the string of post.

00:04:15.445 --> 00:04:19.040
Now this blog post is being past a object called

00:04:19.040 --> 00:04:23.520
post over to our script on down to our components.

00:04:24.400 --> 00:04:27.890
Instead of receiving both the title and the body,

00:04:27.890 --> 00:04:30.520
this is now receiving the post as an object.

00:04:30.520 --> 00:04:36.105
Then we can access the post.title and also the post.body.

00:04:36.105 --> 00:04:42.620
Let's check this out. Our blog post component is now reinstated.

00:04:42.620 --> 00:04:48.270
But this time they have all the data they need which has been passed down as a prop.
