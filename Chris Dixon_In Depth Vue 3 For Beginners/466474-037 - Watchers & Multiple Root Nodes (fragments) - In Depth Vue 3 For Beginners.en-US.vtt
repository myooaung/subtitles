WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.630
Alongside computer properties, UJS also

00:00:03.630 --> 00:00:07.260
provides us with another way of watching for data changes.

00:00:07.260 --> 00:00:10.155
Then running some code after this has happened,

00:00:10.155 --> 00:00:12.615
this is by using a watcher.

00:00:12.615 --> 00:00:15.630
To do this, we need to add the watch property to

00:00:15.630 --> 00:00:19.515
our options object inside the App.Vue file,

00:00:19.515 --> 00:00:22.260
alongside our data and our methods.

00:00:22.260 --> 00:00:25.890
We can place in our watch section as an object.

00:00:25.890 --> 00:00:29.595
Inside here we're going to pass in a callback function,

00:00:29.595 --> 00:00:33.510
which runs when any of the data which we watch and will change.

00:00:33.510 --> 00:00:35.670
We can watch when a data property,

00:00:35.670 --> 00:00:38.330
a prop or even a computed property

00:00:38.330 --> 00:00:43.595
changes by naming the callback function at the value which you want to watch.

00:00:43.595 --> 00:00:49.290
So for example, if we had a data property called darkModeSet,

00:00:49.660 --> 00:00:53.105
which was initially set to false,

00:00:53.105 --> 00:00:57.610
we would then name our watcher after this property which we are observing.

00:00:57.610 --> 00:01:00.720
So for this one, this will be darkModeSet,

00:01:00.720 --> 00:01:03.635
and then we would run some code inside.

00:01:03.635 --> 00:01:05.570
So you better see this example,

00:01:05.570 --> 00:01:10.260
we can also add a button which is going to toggle this between true and false.

00:01:10.260 --> 00:01:13.265
Open the template at the very top,

00:01:13.265 --> 00:01:17.225
set up button with a at click event listener,

00:01:17.225 --> 00:01:24.480
which is going to set darkModeSet to be equal to the opposite,

00:01:27.590 --> 00:01:32.365
and then I'll put the value just below to check this is working.

00:01:32.365 --> 00:01:36.500
I should now be able to toggle list between true and false.

00:01:36.500 --> 00:01:41.600
Another thing which we done here is also taken advantage of another Vue free feature,

00:01:41.600 --> 00:01:43.880
which is multiple root nodes,

00:01:43.880 --> 00:01:46.360
also referred to as fragments.

00:01:46.360 --> 00:01:47.900
Here inside of our template,

00:01:47.900 --> 00:01:51.575
we have placed a button alongside our unordered list.

00:01:51.575 --> 00:01:55.360
So effectively we have two roots or parent nodes.

00:01:55.360 --> 00:01:57.795
Previously when using Vue 2,

00:01:57.795 --> 00:02:02.615
we would need to wrap all of this content into a single parent elements.

00:02:02.615 --> 00:02:06.185
So for example, would need to use a div or a similar wrapper,

00:02:06.185 --> 00:02:08.510
and then place our code inside.

00:02:08.510 --> 00:02:11.765
This is no longer required in Vue version 3,

00:02:11.765 --> 00:02:16.420
and it avoids adding unnecessary wrappers into our HTML.

00:02:16.420 --> 00:02:20.115
Back down to our watcher which was setup,

00:02:20.115 --> 00:02:23.495
we can also pass to our watcher the value,

00:02:23.495 --> 00:02:26.695
which is going to be the value after the data has changed.

00:02:26.695 --> 00:02:28.755
I want to name this as val,

00:02:28.755 --> 00:02:30.905
but this can be anything which you prefer.

00:02:30.905 --> 00:02:36.060
We can see this with a console log and then open up the Developer Tools.

00:02:37.880 --> 00:02:40.770
We don't have anything showing in the browser,

00:02:40.770 --> 00:02:42.710
but if we click on the toggle button,

00:02:42.710 --> 00:02:46.835
this will then reflect the data after this has changed.

00:02:46.835 --> 00:02:49.550
So this is now true, click on it again.

00:02:49.550 --> 00:02:51.500
This is now changed to false.

00:02:51.500 --> 00:02:56.690
This now gives us the opportunity to run any code you want after something is changed.

00:02:56.690 --> 00:02:59.390
It also gives us access to the new value.

00:02:59.390 --> 00:03:04.510
But what if we wanted to also access the old value before the change occurred.

00:03:04.510 --> 00:03:07.590
This we can pass in two parameters.

00:03:07.590 --> 00:03:09.305
Again, we names of our choice.

00:03:09.305 --> 00:03:13.170
So the first one can be the new value,

00:03:13.640 --> 00:03:16.995
then the second, the old value.

00:03:16.995 --> 00:03:21.150
Place both of these inside of our console log.

00:03:21.790 --> 00:03:25.170
Open up the Developer Tools.

00:03:27.320 --> 00:03:29.680
Now if we click "Toggle",

00:03:29.680 --> 00:03:34.220
this will now give us access to the new and also the old values.

00:03:34.220 --> 00:03:36.820
So this is how a watcher works at most simple,

00:03:36.820 --> 00:03:40.970
and this is often enough to cover so many used cases.

00:03:40.970 --> 00:03:46.010
But there's also a few more options which has available and also some Edge cases too.

00:03:46.010 --> 00:03:50.040
[inaudible] want to watch an object or an array,

00:03:50.040 --> 00:03:54.660
let's see this by changing this to watch our events array.

00:03:54.920 --> 00:04:00.590
Now we can try to add a new event and see what happens when we try to update this.

00:04:00.590 --> 00:04:02.390
So back up to our template,

00:04:02.390 --> 00:04:06.080
and this time we're going to access our events.

00:04:06.080 --> 00:04:09.205
Then can push onto the end a new event.

00:04:09.205 --> 00:04:13.619
We can grab any one of these events as a template,

00:04:13.640 --> 00:04:17.180
paste this in and just change some of the details,

00:04:17.180 --> 00:04:19.115
it's going to be number seven.

00:04:19.115 --> 00:04:22.475
Since we're inside of these double quotations,

00:04:22.475 --> 00:04:26.825
we need to know use the single quotations inside of this object.

00:04:26.825 --> 00:04:31.560
So go through each one of these and change the double quotes to be single.

00:04:34.070 --> 00:04:36.540
Then once we're finished with this,

00:04:36.540 --> 00:04:42.465
we can now all put the value of events. Save this file.

00:04:42.465 --> 00:04:46.205
We see we have all of the values from one through to six.

00:04:46.205 --> 00:04:50.735
Click on a button. Our seven object is now being added.

00:04:50.735 --> 00:04:56.250
Open up the Developer Tools, hit "Refresh".

00:04:56.250 --> 00:05:01.005
Let's see what happens with our watcher. Click on "Toggle".

00:05:01.005 --> 00:05:03.420
Now our seventh event has been added,

00:05:03.420 --> 00:05:06.285
but we don't see anything inside the console.

00:05:06.285 --> 00:05:10.505
Even though we are still watching out for the old and the new events,

00:05:10.505 --> 00:05:13.600
and also trying to log this to the console just here,

00:05:13.600 --> 00:05:17.930
This now means our watcher appears to be not reacting to any changes.

00:05:17.930 --> 00:05:21.710
This happens when we are watching an array or an object.

00:05:21.710 --> 00:05:26.360
If you're familiar with how JavaScript handles primitive and reference types,

00:05:26.360 --> 00:05:28.715
this will make more sense at moment.

00:05:28.715 --> 00:05:32.950
If not, this is covered in a later reactivity video.

00:05:32.950 --> 00:05:38.300
For now though, you will need to understand that when we refer to an object or an array,

00:05:38.300 --> 00:05:40.700
any changes to the elements or

00:05:40.700 --> 00:05:45.455
the object properties nest inside will not trigger an update.

00:05:45.455 --> 00:05:47.990
For this watcher to be triggered,

00:05:47.990 --> 00:05:51.095
we would need to replace the full array or object,

00:05:51.095 --> 00:05:54.955
rather than just one of the properties which we have inside.

00:05:54.955 --> 00:05:59.810
Or alternatively, we can pass in a deep option which will

00:05:59.810 --> 00:06:04.625
tell Vue just to also watch for any changes which are nested inside.

00:06:04.625 --> 00:06:06.170
To passing this deep object,

00:06:06.170 --> 00:06:09.845
we need to also change the way which we construct our watcher.

00:06:09.845 --> 00:06:13.295
Rather than setting up a callback function like we have here,

00:06:13.295 --> 00:06:16.645
we need to also change this to be an object.

00:06:16.645 --> 00:06:20.780
This object now means we're still watching out for any of these events.

00:06:20.780 --> 00:06:23.600
We can now pass in some of the options.

00:06:23.600 --> 00:06:25.910
The first property is this deep option,

00:06:25.910 --> 00:06:28.860
which we're going to set to true.

00:06:28.860 --> 00:06:32.705
Separated by comma, we then add in our handler function,

00:06:32.705 --> 00:06:36.785
which is going to run anytime this event data changes,

00:06:36.785 --> 00:06:39.170
and it's inside of this handler method,

00:06:39.170 --> 00:06:41.945
which is going to replace our callback function.

00:06:41.945 --> 00:06:48.425
So just like with all this, can also take in the value which you can log to the console,

00:06:48.425 --> 00:06:51.655
refresh and open up the Developer Tools.

00:06:51.655 --> 00:06:54.130
Now when we add our extra events,

00:06:54.130 --> 00:06:56.645
this is now reflected inside the console.

00:06:56.645 --> 00:06:59.615
Open this up and click on the array section,

00:06:59.615 --> 00:07:02.200
and we have seven different objects.

00:07:02.200 --> 00:07:05.270
Also notice here inside of our watcher,

00:07:05.270 --> 00:07:09.290
we only passing in to the handler a single parameter.

00:07:09.290 --> 00:07:13.625
This is again due to the fact that we are watching a object or an array.

00:07:13.625 --> 00:07:15.995
We now only have access to the new value,

00:07:15.995 --> 00:07:18.010
rather than the old value.

00:07:18.010 --> 00:07:22.025
Another property which we can add to this watcher is Immediate.

00:07:22.025 --> 00:07:27.095
The Immediate option will allow us to run the watcher as soon as our component loads,

00:07:27.095 --> 00:07:29.725
along with any of the changes too.

00:07:29.725 --> 00:07:33.255
So currently, let me refresh the browser.

00:07:33.255 --> 00:07:38.845
We see that this watcher is not run immediately until we make any changes to this data.

00:07:38.845 --> 00:07:43.500
If we did want this watcher to also run as soon as the component loads,

00:07:43.500 --> 00:07:45.360
we pass in the Immediate option,

00:07:45.360 --> 00:07:48.120
and then we're going to set this to true.

00:07:52.520 --> 00:07:55.980
Test this out, open the browser, refresh.

00:07:55.980 --> 00:07:58.800
We see that the watcher is run immediately,

00:07:58.800 --> 00:08:01.955
and also may click on the "Toggle" button too.

00:08:01.955 --> 00:08:05.390
There is quite a bit going on here and you may be wondering why Vue

00:08:05.390 --> 00:08:09.425
provides us with both the watcher and computed options.

00:08:09.425 --> 00:08:12.590
When the both appear to do similar things on the surface.

00:08:12.590 --> 00:08:16.490
Well, there is actually some key differences between these two options,

00:08:16.490 --> 00:08:19.380
which we're going to discover next.
