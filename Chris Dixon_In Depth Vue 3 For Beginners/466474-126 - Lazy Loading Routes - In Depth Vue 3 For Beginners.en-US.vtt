WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.440 --> 00:00:04.890
Another feature that Vue Router offers is Lazy Loading.

00:00:04.890 --> 00:00:08.655
This goes back to the JavaScript bundle we discussed earlier.

00:00:08.655 --> 00:00:12.405
Our app is broken down into smaller components and files,

00:00:12.405 --> 00:00:18.100
which makes it a lot easier for us the developer to write and maintain our code.

00:00:18.100 --> 00:00:21.960
Tools like webpack, will embundle all of our components and

00:00:21.960 --> 00:00:25.550
files together into one big JavaScript file,

00:00:25.550 --> 00:00:28.030
which can be then read by the browser.

00:00:28.030 --> 00:00:30.440
As you can imagine on large projects,

00:00:30.440 --> 00:00:36.030
these bundles can become really big and slow down the page load time on the first visit.

00:00:36.030 --> 00:00:40.865
At the moment, if we go over to our routers index.js file,

00:00:40.865 --> 00:00:44.875
we import in all of the components we may ever need.

00:00:44.875 --> 00:00:50.375
So when users who visit our site may never click on any of these links or pages,

00:00:50.375 --> 00:00:54.830
but will still pay the price with downloading them in the initial bundle.

00:00:54.830 --> 00:00:57.905
Lazy loading is the process of splitting up

00:00:57.905 --> 00:01:02.360
these router's components into separate bundles or chunks,

00:01:02.360 --> 00:01:08.435
and only downloaded when needed resulting in the initial bundle size being reduced.

00:01:08.435 --> 00:01:11.600
Of course, there will be a small download time to

00:01:11.600 --> 00:01:14.650
pull in the new components when a route is visited.

00:01:14.650 --> 00:01:17.270
But if you're using components efficiently,

00:01:17.270 --> 00:01:19.345
the effect should be minimal.

00:01:19.345 --> 00:01:25.570
At the moment, all of these components are imported using the standard import syntax.

00:01:25.570 --> 00:01:26.990
With the add lazy loading,

00:01:26.990 --> 00:01:30.185
we can make use of a dynamic import syntax,

00:01:30.185 --> 00:01:33.085
which is supported by the Vue Router,

00:01:33.085 --> 00:01:37.595
and we do this by replacing each import with a function.

00:01:37.595 --> 00:01:39.365
Just before we do this though,

00:01:39.365 --> 00:01:42.650
let's open up the developer tools inside the browser,

00:01:42.650 --> 00:01:47.020
and we can see how things will look before we make this change.

00:01:47.020 --> 00:01:49.995
Go into the Network tab.

00:01:49.995 --> 00:01:54.065
The first thing we're going to do is to click on "Disable cache",

00:01:54.065 --> 00:01:56.885
so we don't see any saved files.

00:01:56.885 --> 00:02:00.875
For this example, we only care about C and our JavaScript files.

00:02:00.875 --> 00:02:05.735
So we can click on the "JavaScript" button to only display the JavaScript files.

00:02:05.735 --> 00:02:07.550
Mine is already set to JavaScript,

00:02:07.550 --> 00:02:10.235
but you may have this all link selected.

00:02:10.235 --> 00:02:13.265
With this selected, refresh the page and we now see we have

00:02:13.265 --> 00:02:16.490
downloaded two separate JavaScript files.

00:02:16.490 --> 00:02:19.340
The first one of the app.js is

00:02:19.340 --> 00:02:22.040
our main JavaScript bundle and

00:02:22.040 --> 00:02:25.670
the vendors bundle contains code from over third-party modules,

00:02:25.670 --> 00:02:29.495
such as the MPM packages we place in our project.

00:02:29.495 --> 00:02:34.235
The key thing to remember here is we only have one main project bundle,

00:02:34.235 --> 00:02:36.350
which is the app.js.

00:02:36.350 --> 00:02:38.000
Back over to our router file,

00:02:38.000 --> 00:02:42.020
we can now replace these static import with dynamic ones.

00:02:42.020 --> 00:02:44.340
First, comment this out,

00:02:44.340 --> 00:02:47.000
and then we're going to create a function for each one

00:02:47.000 --> 00:02:50.150
of these to replace our standard imports.

00:02:50.150 --> 00:02:52.805
The first one is the admin,

00:02:52.805 --> 00:02:55.610
and then set this equal to a function,

00:02:55.610 --> 00:03:02.045
and the way this works is all of these original imports will be imported immediately.

00:03:02.045 --> 00:03:05.870
However, a dynamic import is placed inside of a function,

00:03:05.870 --> 00:03:09.005
and this function will only be called when required.

00:03:09.005 --> 00:03:11.480
Rather than calling our import directly,

00:03:11.480 --> 00:03:14.215
we store this inside of a constant,

00:03:14.215 --> 00:03:19.140
grab the file path, and then paste this in as a string.

00:03:20.060 --> 00:03:22.545
We could also replace this,

00:03:22.545 --> 00:03:26.415
the @ symbol, and it should work exactly the same.

00:03:26.415 --> 00:03:29.930
I've duplicate this five more times and the second one is for

00:03:29.930 --> 00:03:34.590
the AppHome, paste the path.

00:03:34.590 --> 00:03:39.250
The third one is for Create.

00:03:42.410 --> 00:03:45.610
Next, we have the category,

00:03:50.030 --> 00:03:53.740
and then the last one is NotFound.

00:03:54.710 --> 00:03:57.470
Save this almost see what effect this has.

00:03:57.470 --> 00:03:59.105
If we refresh the browser,

00:03:59.105 --> 00:04:01.340
we still see our original two files,

00:04:01.340 --> 00:04:07.030
which is our bundle and the vendor's bundle but would now have renewed JavaScript files.

00:04:07.030 --> 00:04:10.835
Now, it can be hard to know exactly what each one of these files is,

00:04:10.835 --> 00:04:12.755
since they are just a number.

00:04:12.755 --> 00:04:15.785
If we click on these and go into the preview,

00:04:15.785 --> 00:04:19.370
we just see a lot of JavaScript code.

00:04:19.370 --> 00:04:23.345
We can also replace this number with a chunk name.

00:04:23.345 --> 00:04:27.155
Back to our router. The way we do this is to add a comment.

00:04:27.155 --> 00:04:30.380
We do this just inside of the import statements,

00:04:30.380 --> 00:04:34.055
and this is structured just like a regular CSS comments.

00:04:34.055 --> 00:04:38.810
The comment we need to place inside of here is the webpackChunkName,

00:04:41.500 --> 00:04:45.230
and then we give this chunk a name of our choice.

00:04:45.230 --> 00:04:49.535
Let's keep this consistent and go for the admin, and it fixes.

00:04:49.535 --> 00:04:54.635
Then I'm going to copy this and replace the rest of our import.

00:04:54.635 --> 00:04:57.840
The second one is for the AppHome,

00:05:01.040 --> 00:05:10.960
Create, the category, and then finally the NotFound.

00:05:13.100 --> 00:05:15.920
Now, this webpackChunkName's in place.

00:05:15.920 --> 00:05:17.150
If we go to the browser,

00:05:17.150 --> 00:05:21.260
we see that our names are now placed instead of these numbered files.

00:05:21.260 --> 00:05:23.780
This bottom one which is the AppHome should not be

00:05:23.780 --> 00:05:27.640
a surprise since we are currently on the AppHome page.

00:05:27.640 --> 00:05:30.410
But above this, we see some different files.

00:05:30.410 --> 00:05:34.420
We see the category and also the Create.js.

00:05:34.420 --> 00:05:39.005
Now, this may seem strange because we have not visited these page just yet.

00:05:39.005 --> 00:05:40.820
You may expect that, for example,

00:05:40.820 --> 00:05:44.920
the category is not loaded until we click on one of these links.

00:05:44.920 --> 00:05:47.250
Well, this happens because by default,

00:05:47.250 --> 00:05:49.265
when using the Vue CLI,

00:05:49.265 --> 00:05:52.565
it will make use of a technique called prefetching,

00:05:52.565 --> 00:05:57.985
which is like view anticipating what files we may need next.

00:05:57.985 --> 00:06:01.380
Since we already own this AppHome components,

00:06:01.380 --> 00:06:03.950
Vue then recognizes that this page we'll link to

00:06:03.950 --> 00:06:07.220
our category and then the create components.

00:06:07.220 --> 00:06:12.110
Effectively anticipates we will need these components sometime soon.

00:06:12.110 --> 00:06:14.450
The downloading of these two files will not

00:06:14.450 --> 00:06:17.960
start until our initial page is finished loading,

00:06:17.960 --> 00:06:20.905
so we won't affect the page load time.

00:06:20.905 --> 00:06:26.270
If we look closely, we also don't see the admin page or the NotFound components

00:06:26.270 --> 00:06:29.465
too and this is because we don't have

00:06:29.465 --> 00:06:33.440
any direct links to these two components from this AppHome.

00:06:33.440 --> 00:06:37.360
If we wanted to see this, we will need to go to the admin,

00:06:37.360 --> 00:06:41.265
which will then download the admin.js.

00:06:41.265 --> 00:06:44.765
Also, if we go to any unrecognized route,

00:06:44.765 --> 00:06:48.910
we see the NotFound component is now being downloaded.

00:06:48.910 --> 00:06:53.435
Both this admin in this NotFound doesn't link to any of the components,

00:06:53.435 --> 00:06:56.785
so we don't see any prefetching for this page.

00:06:56.785 --> 00:06:59.990
This Lazy Loading is a really efficient way of loads in

00:06:59.990 --> 00:07:04.025
our components and improving the initial page load time.

00:07:04.025 --> 00:07:09.035
Another useful feature is our components only downloaded wants to.

00:07:09.035 --> 00:07:12.260
For example, this NotFound components will only be

00:07:12.260 --> 00:07:15.475
downloaded from the server the first time it's needed,

00:07:15.475 --> 00:07:19.265
and then any future visits to this page will then serve up

00:07:19.265 --> 00:07:25.060
a cached version for efficiency so we don't download a file multiple times.

00:07:25.060 --> 00:07:29.235
This is how we can use Lazy Loading in our Vue Router.

00:07:29.235 --> 00:07:33.930
Next, we want to take a look at how we can group together related chunks.
