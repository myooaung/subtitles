WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.200
If we wanted to, we can also output HTML using Vue.js.

00:00:05.200 --> 00:00:09.600
Back over inside of our script.js and up to the very top,

00:00:09.600 --> 00:00:12.450
we have this array of blog posts.

00:00:12.450 --> 00:00:15.330
Let's say we wanted to format the body of

00:00:15.330 --> 00:00:20.235
this blog post by adding some HTML elements inside of this text.

00:00:20.235 --> 00:00:26.380
For example, we could cut out any of these words and then create the strong elements.

00:00:26.900 --> 00:00:30.030
Placing this word back in between.

00:00:30.030 --> 00:00:33.600
We could also add any of the elements too such as the break tag,

00:00:33.600 --> 00:00:36.840
which will then place this onto a new line.

00:00:36.840 --> 00:00:41.560
Let's go back over to the browser and see what effect this will have.

00:00:41.560 --> 00:00:44.270
We can see we're not quite getting the result we want,

00:00:44.270 --> 00:00:49.595
the strong elements and also the break tag has just been output as part of a string.

00:00:49.595 --> 00:00:52.295
This is because we're outputting this over in our

00:00:52.295 --> 00:00:57.350
index.html in between these double curly braces.

00:00:57.350 --> 00:01:01.600
These double curly braces will output the value as plain text.

00:01:01.600 --> 00:01:07.385
This makes this curly braces not good choice for text containing any HTML elements.

00:01:07.385 --> 00:01:12.225
Instead, Vue provides a new directive called V-html.

00:01:12.225 --> 00:01:15.395
As always, we add our directives as an attribute,

00:01:15.395 --> 00:01:18.325
and this will replace our double curly braces.

00:01:18.325 --> 00:01:23.995
This is V-html and then we can set this equal to our post, the body.

00:01:23.995 --> 00:01:28.185
We can also remove this, refresh the browser.

00:01:28.185 --> 00:01:32.805
Our strong tag has now taken effect and also our break tag too.

00:01:32.805 --> 00:01:36.470
This all works completely fine now but for security reasons,

00:01:36.470 --> 00:01:39.620
we do need to be careful when using V-html.

00:01:39.620 --> 00:01:43.525
We should only inject HTML from trusted sources.

00:01:43.525 --> 00:01:48.800
For example, we should never use HTML which is being provided by the end user

00:01:48.800 --> 00:01:54.140
of our site as this could lead to potential cross-site scripting attacks.

00:01:54.140 --> 00:01:55.880
It's really important when using

00:01:55.880 --> 00:02:00.100
this directive that we are completely sure that this source is safe.

00:02:00.100 --> 00:02:02.760
This is how we can use V-html.

00:02:02.760 --> 00:02:06.900
Next, we're going to discover life cycle hooks.
