WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.650 --> 00:00:04.050
Up to now, we've used v-show, v-if,

00:00:04.050 --> 00:00:07.830
and v-else to show and hide our elements.

00:00:07.830 --> 00:00:10.320
But what is the difference between them?

00:00:10.320 --> 00:00:15.375
Let's take a look at this and some other things we can do with conditional rendering.

00:00:15.375 --> 00:00:20.115
Here is a simple example which could be used on a banking app or similar,

00:00:20.115 --> 00:00:24.885
which asks the user to change the password after a number of days.

00:00:24.885 --> 00:00:28.140
This simple example would be no good if the user changed

00:00:28.140 --> 00:00:31.425
the password yesterday or even 10 minutes ago.

00:00:31.425 --> 00:00:34.230
We would use conditional renderings that only show

00:00:34.230 --> 00:00:37.920
this message if the user has not been logged in for say,

00:00:37.920 --> 00:00:40.110
more than 100 days.

00:00:40.110 --> 00:00:44.640
This would work, but the v-for directive has been repeated.

00:00:44.640 --> 00:00:47.685
Maybe not a big problem for this small example.

00:00:47.685 --> 00:00:49.830
What if a full section relied on

00:00:49.830 --> 00:00:54.165
this condition who needs to add this directive to a lot of elements?

00:00:54.165 --> 00:00:59.855
Another way is to group all of these elements together inside of a template tag.

00:00:59.855 --> 00:01:03.860
We could then add the v-if directive to this wrapper.

00:01:03.860 --> 00:01:07.115
Meaning, it would apply to everything inside.

00:01:07.115 --> 00:01:09.890
This template could also be a div,

00:01:09.890 --> 00:01:12.395
a section or any of the elements.

00:01:12.395 --> 00:01:18.775
For the benefit of using the template is that it will not be rendered inside the browser.

00:01:18.775 --> 00:01:22.595
The browser will read the code just like we see at the bottom.

00:01:22.595 --> 00:01:28.055
It acts like an invisible wrapper so we will not interfere with the rest of our code,

00:01:28.055 --> 00:01:31.340
optimize any unnecessary rapid divs.

00:01:31.340 --> 00:01:35.375
In the previous video, we looked at using v-if and v-else.

00:01:35.375 --> 00:01:38.405
But what if we had a third condition?

00:01:38.405 --> 00:01:42.050
That is, we could also make use of v-else-if.

00:01:42.050 --> 00:01:44.450
In this more complex example,

00:01:44.450 --> 00:01:50.210
we welcome back the user if the number of days since the last login is less than 50.

00:01:50.210 --> 00:01:53.240
Then v-else-if can be attached it to

00:01:53.240 --> 00:01:58.390
the next single elements or a group of elements using the template wrapper.

00:01:58.390 --> 00:02:05.195
The section checks if the number of days since the last login is between 50 and 99,

00:02:05.195 --> 00:02:08.780
and then will ask the user to reset their password soon.

00:02:08.780 --> 00:02:10.290
Then as a final section,

00:02:10.290 --> 00:02:12.115
we can use the else directive,

00:02:12.115 --> 00:02:16.140
and it will run if the above two conditions have not been met.

00:02:16.140 --> 00:02:21.490
Meaning, this will run if the user has not logged in for hundred days or more.

00:02:21.490 --> 00:02:24.675
We will then ask them to reset their password.

00:02:24.675 --> 00:02:28.535
We could also use multiple v-else-if sections too,

00:02:28.535 --> 00:02:31.385
and this is if we have more than three conditions we want to

00:02:31.385 --> 00:02:34.940
check just like we can do with regular JavaScript.

00:02:34.940 --> 00:02:37.565
We can use as many of these as we want as long as

00:02:37.565 --> 00:02:40.930
each one of these elements follow on from each other.

00:02:40.930 --> 00:02:43.290
We've now seen both v-show and

00:02:43.290 --> 00:02:47.430
v-if as different ways of conditionally rendering elements.

00:02:47.430 --> 00:02:53.305
But why does vue have both ways when they appear to do the same thing on the surface?

00:02:53.305 --> 00:02:55.950
Well, underneath showing and hiding things,

00:02:55.950 --> 00:02:57.945
there is some differences.

00:02:57.945 --> 00:03:01.740
The show elements are always rendered to the DOM.

00:03:01.740 --> 00:03:05.165
Even if they are not visible, they are still there.

00:03:05.165 --> 00:03:10.705
It's using the CSS display property under the hoods to show and hide.

00:03:10.705 --> 00:03:15.200
It cannot be used in combination with template elements as a wrapper,

00:03:15.200 --> 00:03:18.550
nor going to be used in combination with v-else.

00:03:18.550 --> 00:03:21.260
Since this directive is always present in the DOM and

00:03:21.260 --> 00:03:24.620
the CSS display property is used to toggle,

00:03:24.620 --> 00:03:29.140
it's often a good choice if we expect it to toggle on a regular basis.

00:03:29.140 --> 00:03:32.330
V-if is more of a real conditional rendering.

00:03:32.330 --> 00:03:37.025
Unlike v-show, v-if is not always present in the DOM,

00:03:37.025 --> 00:03:41.080
instead, it only renders if the condition is set to true.

00:03:41.080 --> 00:03:43.850
If a condition becomes false,

00:03:43.850 --> 00:03:46.640
all of the section and controls will be completely

00:03:46.640 --> 00:03:51.475
destroyed including any event listeners or child components too.

00:03:51.475 --> 00:03:57.190
Since there is a slightly heavier cost of completely add-in or moving the sections,

00:03:57.190 --> 00:04:02.330
it can be beneficial to use when we expect the condition to change less frequently.

00:04:02.330 --> 00:04:06.420
All of them have needs to completely unmount it from the DOM.
