WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.770 --> 00:00:07.215
In the last video, we looked at passing data as slot in the form of a HTML element.

00:00:07.215 --> 00:00:08.760
This can be anything we want,

00:00:08.760 --> 00:00:12.990
including a plain text and also dynamic content too.

00:00:12.990 --> 00:00:17.300
These three sections we have here of items sold, sales total,

00:00:17.300 --> 00:00:23.045
and bestseller will all include dynamic content as props from the parent app.vue.

00:00:23.045 --> 00:00:24.650
Now, at the app.vue,

00:00:24.650 --> 00:00:29.565
we now go on to set up our free props into the overview component.

00:00:29.565 --> 00:00:34.170
The first prop is going to be quantity of items sold,

00:00:36.590 --> 00:00:39.795
which is equal to 32.

00:00:39.795 --> 00:00:41.460
This, again, can be any value.

00:00:41.460 --> 00:00:43.275
It doesn't matter just yet.

00:00:43.275 --> 00:00:44.970
When dealing with numbers, too,

00:00:44.970 --> 00:00:47.125
we also need to use v-bind.

00:00:47.125 --> 00:00:52.495
This is evaluated as a JavaScript expression rather than a string value.

00:00:52.495 --> 00:00:55.630
Next, the total sales value.

00:00:57.740 --> 00:01:00.345
Add anything inside here.

00:01:00.345 --> 00:01:03.170
The third one is going to be for the bestseller.

00:01:03.170 --> 00:01:08.400
This doesn't need to use v-bind since this is just going to be a string value.

00:01:11.390 --> 00:01:14.390
Since these are props, we also need to go over to

00:01:14.390 --> 00:01:18.500
our overview component and register these in our script.

00:01:18.500 --> 00:01:20.720
We can also add some simple validation.

00:01:20.720 --> 00:01:23.810
So we're going to set this up as an object.

00:01:23.810 --> 00:01:27.510
The first one is total sales value,

00:01:28.420 --> 00:01:32.150
and the type is number.

00:01:32.150 --> 00:01:36.210
The second one is quantity of items sold.

00:01:37.880 --> 00:01:41.720
This will also have the type of number too.

00:01:41.750 --> 00:01:46.430
The third one is for the bestseller.

00:01:47.750 --> 00:01:51.310
This one has the type of string.

00:01:51.440 --> 00:01:56.680
These three props can now replace the content which we passed into our slot.

00:01:56.680 --> 00:01:59.740
The first one, remove the first value of seven,

00:01:59.740 --> 00:02:03.370
and we can replace this inside the double curly braces with our prop,

00:02:03.370 --> 00:02:06.425
which was quantity of items sold.

00:02:06.425 --> 00:02:10.750
The next one, we can still leave in the currency symbol,

00:02:10.750 --> 00:02:13.180
but replace the value with the prop,

00:02:13.180 --> 00:02:15.960
which was total sales value.

00:02:15.960 --> 00:02:19.720
The third one, for our bestseller,

00:02:21.640 --> 00:02:25.440
and this is missing, so let's take a look.

00:02:25.440 --> 00:02:30.165
This just wants to be a lowercase b, and there we go.

00:02:30.165 --> 00:02:33.765
This all works now with our dynamic data.

00:02:33.765 --> 00:02:37.260
As you can see, slots don't care if the data is text,

00:02:37.260 --> 00:02:41.895
HTML element, or even dynamic content just like this.

00:02:41.895 --> 00:02:44.020
But when passing dynamic data,

00:02:44.020 --> 00:02:45.400
just like we are here,

00:02:45.400 --> 00:02:48.490
which components have access to this data?

00:02:48.490 --> 00:02:50.470
Inside of our overview, for example,

00:02:50.470 --> 00:02:53.470
we have this quantity of items sold prop.

00:02:53.470 --> 00:02:56.410
This is inside of our overview component,

00:02:56.410 --> 00:03:00.895
but it's also then rendered inside of our items sold component too.

00:03:00.895 --> 00:03:04.545
Which of these two components has access to it?

00:03:04.545 --> 00:03:07.265
Well, you may have already guessed that since we are

00:03:07.265 --> 00:03:10.070
currently using this inside of our overview file,

00:03:10.070 --> 00:03:14.775
that this file has full access to this data. This is correct.

00:03:14.775 --> 00:03:16.620
But what about the child component,

00:03:16.620 --> 00:03:18.230
which is items sold,

00:03:18.230 --> 00:03:21.250
where this data is being rendered inside of?

00:03:21.250 --> 00:03:26.485
Well, let's grab this and take a look into the item sold component.

00:03:26.485 --> 00:03:31.560
Then we can try to output this inside of the double curly braces.

00:03:31.940 --> 00:03:34.880
We don't see any data now displayed,

00:03:34.880 --> 00:03:36.380
so this doesn't work.

00:03:36.380 --> 00:03:39.050
But how about this being available as a prop?

00:03:39.050 --> 00:03:42.590
Well, we could try this too. We could place in the script.

00:03:42.590 --> 00:03:46.120
We can see we have access to this via props.

00:03:46.120 --> 00:03:50.015
This one, we still don't have access to this data.

00:03:50.015 --> 00:03:53.989
This now means that the actual child component,

00:03:53.989 --> 00:03:55.685
which is displaying the content,

00:03:55.685 --> 00:03:59.420
is only responsible for presenting this inside the browser.

00:03:59.420 --> 00:04:02.240
It doesn't have access to our variables.

00:04:02.240 --> 00:04:06.020
These are only available in the scope of the parent.

00:04:06.020 --> 00:04:10.549
If we did want access to this data inside of both of these components,

00:04:10.549 --> 00:04:11.930
there is a way we can do this,

00:04:11.930 --> 00:04:14.555
and this is by what is called a scoped slot.

00:04:14.555 --> 00:04:17.370
We'll take a look at these very soon.
