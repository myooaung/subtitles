WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.350 --> 00:00:02.670
In the previous project,

00:00:02.670 --> 00:00:08.235
we looked at how we can use Vue.js to work with just a single path for application.

00:00:08.235 --> 00:00:12.315
We can take an existing website or application,

00:00:12.315 --> 00:00:14.264
create a new Vue instance,

00:00:14.264 --> 00:00:19.560
and then mount it to any of the HTML elements which you want to use it on.

00:00:19.560 --> 00:00:21.390
Also as mentioned earlier,

00:00:21.390 --> 00:00:26.025
we can also use Vue.js to control our full front-end.

00:00:26.025 --> 00:00:30.990
We can use it to build what's called the single page application.

00:00:30.990 --> 00:00:33.900
This is an app which is controlled entirely by

00:00:33.900 --> 00:00:37.215
JavaScript and works inside of the browser.

00:00:37.215 --> 00:00:40.349
With the traditional way of building websites,

00:00:40.349 --> 00:00:42.220
one may click on a page link,

00:00:42.220 --> 00:00:43.860
such as this About link.

00:00:43.860 --> 00:00:47.135
The page is then requested from a web server,

00:00:47.135 --> 00:00:50.029
which then responds with the page contents,

00:00:50.029 --> 00:00:52.765
and this then displayed in the browser.

00:00:52.765 --> 00:00:56.310
Single page applications work differently to this.

00:00:56.310 --> 00:00:59.770
Instead of requesting pages on assets as we need them,

00:00:59.770 --> 00:01:03.585
Vue will build our app into JavaScript bundles.

00:01:03.585 --> 00:01:07.100
When a user first visits a single page application,

00:01:07.100 --> 00:01:10.250
the bundle is then downloaded from the server.

00:01:10.250 --> 00:01:13.970
This JavaScript bundle includes the contents of our project,

00:01:13.970 --> 00:01:15.685
such as our pages,

00:01:15.685 --> 00:01:19.670
meaning all of the navigation between these pages is handled by

00:01:19.670 --> 00:01:21.650
JavaScript inside the browser

00:01:21.650 --> 00:01:24.785
without needing to request any further pages from the server,

00:01:24.785 --> 00:01:27.625
hence the name single page application.

00:01:27.625 --> 00:01:29.460
Like any fineness approach,

00:01:29.460 --> 00:01:30.860
it has pros and cons.

00:01:30.860 --> 00:01:34.010
One of the pros is the speed is really fast.

00:01:34.010 --> 00:01:36.860
Switching between pages with JavaScript is far

00:01:36.860 --> 00:01:40.205
faster than requesting a page from a web server.

00:01:40.205 --> 00:01:43.670
This provides a great user experience since there is

00:01:43.670 --> 00:01:48.005
no loading and navigating our app is almost instant.

00:01:48.005 --> 00:01:51.155
Also since this bundle is stored inside the browser,

00:01:51.155 --> 00:01:53.950
it can also work offline too.

00:01:53.950 --> 00:01:56.865
It does also have some drawbacks though,

00:01:56.865 --> 00:01:59.930
such as downloading a big bundle can be

00:01:59.930 --> 00:02:03.450
initially slower when the user first visits your site.

00:02:03.450 --> 00:02:05.270
This can be optimized though with

00:02:05.270 --> 00:02:08.785
code splitting and we'll look at this later in the course.

00:02:08.785 --> 00:02:12.320
Also, it is generally not considered as SEO

00:02:12.320 --> 00:02:16.115
friendly as traditional server generated pages.

00:02:16.115 --> 00:02:21.080
Since the HTML content returned is minimal and the rest of the content is

00:02:21.080 --> 00:02:23.240
generated inside the browser

00:02:23.240 --> 00:02:27.290
resulting in content which is harder to crawl by search engines,

00:02:27.290 --> 00:02:32.255
although the bigger search engine companies seem to have really improved this recently.

00:02:32.255 --> 00:02:33.860
Also, as a side note,

00:02:33.860 --> 00:02:38.230
since JavaScript can run inside the browser and also the server too.

00:02:38.230 --> 00:02:44.220
It is also possible to use Vue to create what is called a server-side rendered app.

00:02:44.220 --> 00:02:47.295
This converts our JavaScript application to

00:02:47.295 --> 00:02:49.880
be more like the traditional way of doing things,

00:02:49.880 --> 00:02:52.405
where we request pages when needed.

00:02:52.405 --> 00:02:57.305
This is more of an advanced topic though and one which is not covered in this course.

00:02:57.305 --> 00:03:02.680
There is also a framework tool such as Node.js which will help with this.

00:03:02.680 --> 00:03:05.690
Let's next, take a look at some tooling which will help us

00:03:05.690 --> 00:03:09.420
create these types of single page applications.
