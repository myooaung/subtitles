WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.310 --> 00:00:04.020
When we create our Vue upper overview instance,

00:00:04.020 --> 00:00:08.130
there is a series of stages going on behind the scenes.

00:00:08.130 --> 00:00:11.610
The Vue documentation has a pretty good diagram of

00:00:11.610 --> 00:00:15.030
exactly what goes on when we create a new Vue app.

00:00:15.030 --> 00:00:18.390
You don't need to remember these or fully understand for now,

00:00:18.390 --> 00:00:23.535
but do be aware that we can run some code at each stage of this life cycle.

00:00:23.535 --> 00:00:29.175
For example, at the top we see Vue.createApp while passing our options.

00:00:29.175 --> 00:00:32.310
This is the initial stage which we've already looked at,

00:00:32.310 --> 00:00:35.370
and then we want this to the DOM with app.mount.

00:00:35.370 --> 00:00:38.130
After this instance has been created,

00:00:38.130 --> 00:00:42.840
we have access to the beforeCreate and also the created hooks.

00:00:42.840 --> 00:00:46.385
These life cycle hooks can be added to our object,

00:00:46.385 --> 00:00:49.340
which you pass into createApp alongside

00:00:49.340 --> 00:00:52.975
the data and the methods which we are currently using.

00:00:52.975 --> 00:00:58.340
Let's take a look at these first two life cycle hooks over in our scripts.

00:00:58.340 --> 00:01:03.450
Alongside our data, we are first going to look at before creates.

00:01:04.780 --> 00:01:10.590
The second one separated by a comma is the created hook.

00:01:12.110 --> 00:01:15.620
Inside of these two hooks we can add any code which you

00:01:15.620 --> 00:01:18.380
want to run at these first two stages.

00:01:18.380 --> 00:01:22.265
To be able to see exactly when each one of these hooks will run,

00:01:22.265 --> 00:01:24.770
we can do a console log.

00:01:25.160 --> 00:01:29.065
The first one I'm going to add some text of beforeCreate,

00:01:29.065 --> 00:01:32.395
so we know exactly which console log is running,

00:01:32.395 --> 00:01:34.985
and then remember using this keyword,

00:01:34.985 --> 00:01:38.660
we can access any other properties from our Vue instance,

00:01:38.660 --> 00:01:40.790
which has our data's actions.

00:01:40.790 --> 00:01:45.840
We can output the value of our name using this.name.

00:01:46.270 --> 00:01:56.610
With this we can also output this inside of the created hook over to the console.

00:01:56.610 --> 00:02:01.225
Right-click and inspect, and also mainly to refresh too.

00:02:01.225 --> 00:02:06.670
We see that the before create hook returns a value of undefined.

00:02:06.670 --> 00:02:09.645
But below this inside of the creative hook,

00:02:09.645 --> 00:02:14.505
we have access to our data property. Why is this?

00:02:14.505 --> 00:02:18.170
Well, it's not until the created stage where Vue has

00:02:18.170 --> 00:02:21.935
finished processing and setting up things on our options object.

00:02:21.935 --> 00:02:24.085
Which has our data and methods.

00:02:24.085 --> 00:02:27.440
Which results in anything from our Vue instance such as

00:02:27.440 --> 00:02:33.455
our data properties to be returned as undefined inside of the before creates hook.

00:02:33.455 --> 00:02:37.925
This means we would only use this for something such as an API call,

00:02:37.925 --> 00:02:40.280
which is not linked to any over sections,

00:02:40.280 --> 00:02:42.485
such as our data properties.

00:02:42.485 --> 00:02:45.920
We can also see this if we go back to the drawing.

00:02:45.920 --> 00:02:49.790
We can see inside of this section we don't have access to any of

00:02:49.790 --> 00:02:54.245
the viewer activity until after the beforeCreate hook.

00:02:54.245 --> 00:02:57.170
After this we then go down to the template option,

00:02:57.170 --> 00:02:59.680
which gives us two separate options.

00:02:59.680 --> 00:03:04.635
We will take a look at this template option soon when we look at components.

00:03:04.635 --> 00:03:08.720
This is basically the section where we output all of our HTML,

00:03:08.720 --> 00:03:12.560
which includes the dynamic sections with a double curly braces.

00:03:12.560 --> 00:03:16.330
If this template option isn't available, instead,

00:03:16.330 --> 00:03:18.920
it will go down to our section which we mount to,

00:03:18.920 --> 00:03:22.130
and evaluate the contents inside of here.

00:03:22.130 --> 00:03:27.320
After this, we have a series of stages when the application has been mounted to the DOM,

00:03:27.320 --> 00:03:31.460
we can access before mount or as soon as the app has been mounted.

00:03:31.460 --> 00:03:34.020
Once the app has been mounted to the DOM,

00:03:34.020 --> 00:03:36.905
we can also listen out for any changes too.

00:03:36.905 --> 00:03:39.580
We can then run some code before the update has

00:03:39.580 --> 00:03:42.939
happened or after the update has finalized.

00:03:42.939 --> 00:03:47.320
The final two stages is when a component is being removed from the DOM and we

00:03:47.320 --> 00:03:51.830
can access it before a mount hook and also the unmounted hook too.

00:03:51.830 --> 00:03:55.810
These final two stages are useful for any cleanup work,

00:03:55.810 --> 00:03:58.705
maybe want to stop listening for any events,

00:03:58.705 --> 00:04:01.055
and this is the place to do it.

00:04:01.055 --> 00:04:04.090
See how all this works in practice and now we are going to make

00:04:04.090 --> 00:04:09.215
a simple API call to get some blog posts from an external source.

00:04:09.215 --> 00:04:14.355
The source for this blog post is going to be available from JSON placeholder.

00:04:14.355 --> 00:04:18.290
This is a very simple and reviews API which we

00:04:18.290 --> 00:04:22.885
can use to get some sample data such as our blog posts.

00:04:22.885 --> 00:04:26.610
We can see that we can get blogposts, we can get comments.

00:04:26.610 --> 00:04:28.499
We've got albums, photos,

00:04:28.499 --> 00:04:30.620
todos, and also users.

00:04:30.620 --> 00:04:33.900
We're going to access the /post section,

00:04:33.900 --> 00:04:37.485
which is going to return a 100 sample blog posts.

00:04:37.485 --> 00:04:43.630
So this is pretty simple, we just add /posts onto the end of this URL.

00:04:44.300 --> 00:04:49.890
This will return a list of 100 blog posts in JSON format,

00:04:49.890 --> 00:04:54.220
and we can also make a call to this URL from a Vue method.

00:04:54.220 --> 00:04:59.090
Go back over to Visual Studio Code and into our script,

00:04:59.090 --> 00:05:02.165
we can call this from inside of our method section,

00:05:02.165 --> 00:05:05.730
and the method I'm going to call it is going to be getposts.

00:05:07.040 --> 00:05:13.280
Inside here, we're going to make use of the Fetch API to make a call to this URL.

00:05:13.280 --> 00:05:15.710
Paste this in as a string,

00:05:15.710 --> 00:05:18.640
and this fetch API is just regular JavaScript.

00:05:18.640 --> 00:05:21.200
It's nothing to do with Vue JS.

00:05:21.200 --> 00:05:27.600
We can then store the data which we got back inside of a variable called response.

00:05:27.600 --> 00:05:31.315
Since we are reaching out to an external API,

00:05:31.315 --> 00:05:34.135
this is going to be an asynchronous call.

00:05:34.135 --> 00:05:38.650
This means that the data which we get back may come back in a few milliseconds.

00:05:38.650 --> 00:05:40.450
It may take five seconds,

00:05:40.450 --> 00:05:42.370
it may not come back at all.

00:05:42.370 --> 00:05:45.710
So to deal with this, we can make use of a single weight,

00:05:45.710 --> 00:05:47.710
which is a JavaScript feature.

00:05:47.710 --> 00:05:49.660
Which will allow us to wait on the data to

00:05:49.660 --> 00:05:53.015
comeback before we actually do anything with it.

00:05:53.015 --> 00:05:57.645
To do this, we can mark our method as asynchronous.

00:05:57.645 --> 00:06:00.675
So we add the async keyword just before,

00:06:00.675 --> 00:06:03.955
and then we're going to wait on our data coming back.

00:06:03.955 --> 00:06:09.220
This means if we try to access the response variable before this data comes back,

00:06:09.220 --> 00:06:11.090
it won't throw an error.

00:06:11.090 --> 00:06:15.510
Now this leaves us with the response object from our API call,

00:06:15.510 --> 00:06:19.270
and then we need to extract the JSON from the response.

00:06:19.270 --> 00:06:25.100
To do this, we're going to access our response and then call the JSON method.

00:06:25.130 --> 00:06:28.945
This is going to extract the JSON from our response,

00:06:28.945 --> 00:06:33.380
which we can store in a constant or a variable called data.

00:06:33.470 --> 00:06:39.100
We'll also [inaudible] this to make sure that this is finished before we access our data,

00:06:39.100 --> 00:06:41.960
and then would log this to the console.

00:06:43.370 --> 00:06:45.450
Now before we go any further,

00:06:45.450 --> 00:06:48.550
let's take a step back and think about what we're want to do.

00:06:48.550 --> 00:06:53.215
We have a list of blogposts which we're getting back from the API,

00:06:53.215 --> 00:06:56.440
and this is stored inside of this data variable.

00:06:56.440 --> 00:06:59.290
Leaving us with two things which we need to do.

00:06:59.290 --> 00:07:05.200
First, we need to pass this data up to our data section and add this to our posts.

00:07:05.200 --> 00:07:09.230
The second thing we need to do is to actually call this method.

00:07:09.230 --> 00:07:12.985
As we looked at earlier, we could add a button to our sites and make this call,

00:07:12.985 --> 00:07:15.130
or this would not be a good use.

00:07:15.130 --> 00:07:17.350
Instead, we want to do this automatically,

00:07:17.350 --> 00:07:20.180
and we could do this from a life cycle hook.

00:07:20.180 --> 00:07:22.720
We can use the beforeCreates hook.

00:07:22.720 --> 00:07:25.765
Since remember this is called before the app is created,

00:07:25.765 --> 00:07:28.944
so the get post method will be undefined.

00:07:28.944 --> 00:07:32.710
We could use mounted once the app is mounted to the DOM,

00:07:32.710 --> 00:07:35.725
or we could go even earlier and use the created hook,

00:07:35.725 --> 00:07:37.510
which we looked up before.

00:07:37.510 --> 00:07:39.625
We no longer need this beforeCreate,

00:07:39.625 --> 00:07:43.880
so we're going to move this and then go down to the created section.

00:07:43.880 --> 00:07:46.150
Instead of doing a console log,

00:07:46.150 --> 00:07:49.105
we're going to call our getPost method,

00:07:49.105 --> 00:07:53.060
which we can access with this.getPosts.

00:07:53.270 --> 00:07:55.290
Over to the browser,

00:07:55.290 --> 00:07:58.130
and we can open up the developer tools.

00:08:02.160 --> 00:08:05.020
I'm going to say reponse is not defined,

00:08:05.020 --> 00:08:09.565
so we've got a spelling mistake. There we go.

00:08:09.565 --> 00:08:20.280
Response. Refresh. There's our console log with 100 different blog posts.

00:08:20.280 --> 00:08:23.015
Each one of these blog posts has an ID,

00:08:23.015 --> 00:08:24.860
has a body, a title,

00:08:24.860 --> 00:08:27.365
and also the user ID which created it.

00:08:27.365 --> 00:08:29.945
This is exactly the same data we already have,

00:08:29.945 --> 00:08:32.135
plus this extra user ID,

00:08:32.135 --> 00:08:34.460
which we can ignore if we don't want to use.

00:08:34.460 --> 00:08:40.735
We are now going to use this data to replace the free blog posts which we already have.

00:08:40.735 --> 00:08:46.310
First, we're going to unset the blog posts we already have from our Data property.

00:08:46.310 --> 00:08:51.755
To do this, we can scroll up to our posts and then set this to be an empty array,

00:08:51.755 --> 00:08:55.550
and we can now update these posts from our method.

00:08:55.550 --> 00:08:58.325
Do this rather than a console log.

00:08:58.325 --> 00:09:01.340
What we're going to do is access this.posts,

00:09:01.340 --> 00:09:06.865
and set this equal to our data. Over to the browser.

00:09:06.865 --> 00:09:12.100
This now leaves us with a 100 different blog posts inside of our page.

00:09:12.100 --> 00:09:16.115
The reason this works is because the data which we got back from the API,

00:09:16.115 --> 00:09:18.230
which we'd have seen in the console log,

00:09:18.230 --> 00:09:22.090
is structured the same way as our original blog posts.

00:09:22.090 --> 00:09:25.130
We can see this inside of our index page.

00:09:25.130 --> 00:09:28.175
Down in the blog section, we have access to the title,

00:09:28.175 --> 00:09:31.750
the body, and these also have an ID too.

00:09:31.750 --> 00:09:36.230
If the data which came back from our API was slightly different, for example,

00:09:36.230 --> 00:09:38.674
if the body section was titled content,

00:09:38.674 --> 00:09:41.210
all we would need to do is change this inside here,

00:09:41.210 --> 00:09:43.590
and we will be good to go.
