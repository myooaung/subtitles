WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.290 --> 00:00:03.180
Next up we have our best sellers page,

00:00:03.180 --> 00:00:04.220
which we're going to work on,

00:00:04.220 --> 00:00:07.110
and this is inside of the views folder.

00:00:07.110 --> 00:00:09.670
Currently we just have this level 3 heading,

00:00:09.670 --> 00:00:14.280
but what we're going to do now is to create a table with all of our data,

00:00:14.280 --> 00:00:17.610
which we're going to get from our orders.js file.

00:00:17.610 --> 00:00:21.090
To get this, we're going to create two loops.

00:00:21.090 --> 00:00:24.630
The first loop is going to loop through all of our orders array,

00:00:24.630 --> 00:00:27.405
and this will give us each one of these orders.

00:00:27.405 --> 00:00:31.640
Then our second loop inside will then loop through all of these items,

00:00:31.640 --> 00:00:36.310
and then we're going to grab each one of these items and push to a new array.

00:00:36.310 --> 00:00:38.720
This is what our new array will look like,

00:00:38.720 --> 00:00:43.925
we'll extract all of the products from our orders and then push them to this new array.

00:00:43.925 --> 00:00:46.340
In addition to the ID, the name,

00:00:46.340 --> 00:00:49.835
and the price, we'll also add in a quantity field too.

00:00:49.835 --> 00:00:52.895
This will avoid us having lots of duplicate products.

00:00:52.895 --> 00:00:56.210
Instead, when we come across a product inside of our loop,

00:00:56.210 --> 00:00:57.980
which is already inside this array,

00:00:57.980 --> 00:01:01.265
we'll increase the quantity field by one.

00:01:01.265 --> 00:01:05.885
This is the first step, and the second step after doing this is then to

00:01:05.885 --> 00:01:10.525
reorder this array with the quantity highest to lowest.

00:01:10.525 --> 00:01:15.080
Let's go over to the app.vue and we'll create this as

00:01:15.080 --> 00:01:19.610
a computed property just under the data,

00:01:19.610 --> 00:01:24.850
set this up, and the computed name of sortedItems.

00:01:24.850 --> 00:01:30.545
The first step is to create our new array called sortedItems,

00:01:30.545 --> 00:01:33.905
and we'll initially set this to be an empty array.

00:01:33.905 --> 00:01:36.260
The next step is to create our first loop,

00:01:36.260 --> 00:01:39.025
which is going to loop through all of our orders.

00:01:39.025 --> 00:01:41.730
We have this stored above in the state properties,

00:01:41.730 --> 00:01:43.785
so we can access this.orders,

00:01:43.785 --> 00:01:46.325
and then map through all of these orders,

00:01:46.325 --> 00:01:49.145
rising a callback function.

00:01:49.145 --> 00:01:52.150
Each item in this orders,

00:01:52.150 --> 00:01:55.265
we'll store this inside of the variable called order.

00:01:55.265 --> 00:02:00.350
As we just mentioned, we'll grab our order and then we'll create a second loop inside,

00:02:00.350 --> 00:02:03.580
which is going to loop through all of the items.

00:02:03.580 --> 00:02:05.710
We'll map over these,

00:02:05.710 --> 00:02:09.865
and then run a function on each one of these items.

00:02:09.865 --> 00:02:11.990
Also, before we go any further,

00:02:11.990 --> 00:02:15.800
remember computed properties will always need to return a value.

00:02:15.800 --> 00:02:17.630
So we're going to return our new array,

00:02:17.630 --> 00:02:19.370
which is sorted items.

00:02:19.370 --> 00:02:22.445
Make sure this is outside of our loops.

00:02:22.445 --> 00:02:24.650
We're going to return this value.

00:02:24.650 --> 00:02:27.830
Backup inside of this loop is where we're going to push

00:02:27.830 --> 00:02:31.660
each one of these items into this new array,

00:02:31.660 --> 00:02:33.290
but just before we do this,

00:02:33.290 --> 00:02:36.140
we first need to check if this item is already

00:02:36.140 --> 00:02:39.365
inside of this array to avoid any duplicates,

00:02:39.365 --> 00:02:42.260
and the way to do this is to access our new array,

00:02:42.260 --> 00:02:44.035
which is sorted items.

00:02:44.035 --> 00:02:46.860
We can call the JavaScript find method.

00:02:46.860 --> 00:02:50.990
This will run a function for each item inside of our array,

00:02:50.990 --> 00:02:53.450
storing each item inside of this variable,

00:02:53.450 --> 00:02:55.795
which I'm going to call sorted item.

00:02:55.795 --> 00:02:59.450
This function will be responsible for checking if the sorted

00:02:59.450 --> 00:03:05.545
item.id is equal to the item id from this current loop.

00:03:05.545 --> 00:03:08.350
If the id of the current item which we own

00:03:08.350 --> 00:03:11.675
matches any of the IDs which are inside of this array,

00:03:11.675 --> 00:03:14.780
this will then return the current item.

00:03:14.780 --> 00:03:20.040
We'll then store this inside of a constant called item exists.

00:03:20.690 --> 00:03:26.185
Then we can create a if statement just below it to check if item exists is true.

00:03:26.185 --> 00:03:31.985
If it is true, we have a duplicate item and all we want to do is to access this item,

00:03:31.985 --> 00:03:33.800
which is item exists,

00:03:33.800 --> 00:03:36.670
and then select the quantity field,

00:03:36.670 --> 00:03:41.945
incrementing this by one and then we can return out of this statement.

00:03:41.945 --> 00:03:44.390
If this item doesn't exist,

00:03:44.390 --> 00:03:49.085
this means this is the first time this new item is going to be pushed to our array.

00:03:49.085 --> 00:03:54.055
So what we're going to do is to create a new object called new item.

00:03:54.055 --> 00:03:57.620
This is going to be equal to our item which we own,

00:03:57.620 --> 00:04:01.350
and we'll also add in the quantity field too.

00:04:01.640 --> 00:04:05.090
The quantity will be an initial value of one,

00:04:05.090 --> 00:04:07.834
and then using the JavaScript spread operator,

00:04:07.834 --> 00:04:11.275
we'll also pass in the value from the item too.

00:04:11.275 --> 00:04:16.955
We now have this new item and the final thing to do is to push this to this array.

00:04:16.955 --> 00:04:19.115
Just after our object,

00:04:19.115 --> 00:04:24.635
grab our sorted items array and then access the JavaScript push method,

00:04:24.635 --> 00:04:27.350
which will push our new item.

00:04:27.590 --> 00:04:31.160
Let's test this out. We can access our sorted items

00:04:31.160 --> 00:04:34.775
computed property inside of the double curly braces,

00:04:34.775 --> 00:04:38.310
so just anywhere in our template. There we go.

00:04:38.310 --> 00:04:41.690
Now rather than having each one of our products listed individually,

00:04:41.690 --> 00:04:43.595
we've now increased the quantity.

00:04:43.595 --> 00:04:45.370
One, we have cubic items.

00:04:45.370 --> 00:04:47.160
We have free T-shirts,

00:04:47.160 --> 00:04:49.890
we have two of our small custom shirts,

00:04:49.890 --> 00:04:51.690
we have, four, the hoodies,

00:04:51.690 --> 00:04:55.060
and then one of the hats. Now this is working.

00:04:55.060 --> 00:04:57.620
The final step is to rearrange the items

00:04:57.620 --> 00:05:01.215
inside of this array by the highest quantity sold.

00:05:01.215 --> 00:05:03.220
Currently we have the quantity free.

00:05:03.220 --> 00:05:05.645
Then we have two, we have four,

00:05:05.645 --> 00:05:08.740
and then we have one, so this is not in order.

00:05:08.740 --> 00:05:14.000
We can rearrange these just before we return these from our computed section.

00:05:14.000 --> 00:05:17.000
Just above the return statement,

00:05:17.000 --> 00:05:19.640
access the sorted items,

00:05:19.640 --> 00:05:22.945
and then we can use the JavaScript sort method.

00:05:22.945 --> 00:05:26.540
The JavaScript sort method will loop through all of

00:05:26.540 --> 00:05:30.560
our sorted items and then run a comparison function.

00:05:30.560 --> 00:05:36.245
This comparison function will take in two variables with the name of our choice.

00:05:36.245 --> 00:05:39.095
I'm just going to call this A and B to keep it simple,

00:05:39.095 --> 00:05:42.935
and these are the two current items which are being compared.

00:05:42.935 --> 00:05:46.235
But I'm going to check if the quantity property on

00:05:46.235 --> 00:05:50.110
item A is greater than the quantity on item B.

00:05:50.110 --> 00:05:52.170
Using the ternary operator,

00:05:52.170 --> 00:05:54.120
we'll then set the index position,

00:05:54.120 --> 00:05:56.805
if this is true, to be a negative one,

00:05:56.805 --> 00:05:59.740
if this is false, it will then be positive one.

00:05:59.740 --> 00:06:01.820
Remember, when dealing with arrays,

00:06:01.820 --> 00:06:05.405
a lower index number will appear first in our array,

00:06:05.405 --> 00:06:09.575
so setting this to be negative one will push this higher up in the array.

00:06:09.575 --> 00:06:13.805
We can see straight away in the browser that the quantity of four is placed first,

00:06:13.805 --> 00:06:15.725
we have the quantity of three,

00:06:15.725 --> 00:06:19.570
and finally, our vue hat which is the quantity of one.

00:06:19.570 --> 00:06:21.750
Now we have all the data we need,

00:06:21.750 --> 00:06:25.520
we can now import the bestsellers page inside of this app.vue.

00:06:25.520 --> 00:06:29.830
We'll also register this and display this inside of the template.

00:06:29.830 --> 00:06:34.810
Let's duplicate this, and this one is for our bestsellers.

00:06:37.550 --> 00:06:40.664
Add this to our components,

00:06:40.664 --> 00:06:44.200
but I will comment out our audit components

00:06:44.200 --> 00:06:47.825
and also the oldest section from our template.

00:06:47.825 --> 00:06:51.850
Grab this all the way down to the closing tag,

00:06:51.850 --> 00:06:57.210
comment this out, and we can now place inside of our template our bestsellers.

00:06:57.920 --> 00:07:00.190
This is just for our simplicity,

00:07:00.190 --> 00:07:03.140
so we can focus on one component at a time.

00:07:03.140 --> 00:07:07.640
We see an error inside here that the sales total component is not being used,

00:07:07.640 --> 00:07:10.885
so we can also comment this out.

00:07:10.885 --> 00:07:15.450
Also the registration, even this with our bestsellers page.

00:07:15.450 --> 00:07:19.680
[inaudible] top, we're going to remove this computed section,

00:07:19.680 --> 00:07:23.615
and then set up our table inside of the bestsellers.

00:07:23.615 --> 00:07:26.480
Placing this inside of the opening and closing tag,

00:07:26.480 --> 00:07:29.155
so this will be passed as slot content.

00:07:29.155 --> 00:07:33.100
First of all, we'll set up our outer table section,

00:07:33.100 --> 00:07:35.520
the table heading for our titles,

00:07:35.520 --> 00:07:37.655
and then our first table row.

00:07:37.655 --> 00:07:42.440
Inside of this row, we'll place in our first piece of data inside of the table heading,

00:07:42.440 --> 00:07:45.270
and this is for the quantity sold.

00:07:46.210 --> 00:07:50.400
The next table heading is for the product name,

00:07:52.190 --> 00:07:55.900
the third one for the product ID,

00:07:57.530 --> 00:08:01.030
then finally the product price.

00:08:02.210 --> 00:08:06.340
After the head section we have the table body,

00:08:06.340 --> 00:08:09.110
and it's inside of this table body section we'll

00:08:09.110 --> 00:08:12.650
provide all the data from our computed section.

00:08:12.650 --> 00:08:15.620
To do this, we'll create a new table row,

00:08:15.620 --> 00:08:19.880
and we need to repeat this for each item inside of this computed section.

00:08:19.880 --> 00:08:23.070
[inaudible] For Loop.

00:08:23.070 --> 00:08:27.760
We can add in our item in sorted items.

00:08:28.100 --> 00:08:31.680
So we could either access the full item like this or we could

00:08:31.680 --> 00:08:35.575
also use the structure and to pull out the id,

00:08:35.575 --> 00:08:39.330
the quantity, the name,

00:08:39.330 --> 00:08:41.800
and also the price.

00:08:42.590 --> 00:08:46.190
We also need to bind in a dynamic key,

00:08:46.190 --> 00:08:49.955
and the dynamic key for this can be the product ID.

00:08:49.955 --> 00:08:54.605
These four variables can now be output as table data.

00:08:54.605 --> 00:09:00.069
Inside the row, the table data for the first one is for the quantity,

00:09:00.069 --> 00:09:04.110
and we'll have the name, the ID, and then the price.

00:09:12.290 --> 00:09:15.605
This is all the slot data we now need to pass,

00:09:15.605 --> 00:09:18.740
so over to our bestsellers page in the views,

00:09:18.740 --> 00:09:21.930
and we're going to output this as a slot.

00:09:23.360 --> 00:09:27.980
There we are. There's a word table heading and also our table data,

00:09:27.980 --> 00:09:32.635
and now these items are now listed from the highest to the lowest quantity.

00:09:32.635 --> 00:09:34.470
Just to finish off this page,

00:09:34.470 --> 00:09:36.759
head over to our bestsellers component

00:09:36.759 --> 00:09:40.175
where we can set up some basic styles for this table.

00:09:40.175 --> 00:09:43.070
First of all, the table wrapper,

00:09:43.070 --> 00:09:46.385
the border of one pixel,

00:09:46.385 --> 00:09:51.300
a solid line, and the color of DDD.

00:09:51.340 --> 00:09:55.500
Align the text with text aligned center.

00:09:55.760 --> 00:10:00.525
The border radius of five pixels.

00:10:00.525 --> 00:10:04.760
Then we'll also give this some space in with some padding values inside of

00:10:04.760 --> 00:10:09.300
the table headings and also the table data too.

00:10:12.040 --> 00:10:16.775
This now spaces out all of our data inside of our table.

00:10:16.775 --> 00:10:19.650
This is now our bestsellers page completed.

00:10:19.650 --> 00:10:22.910
In the next video, we'll take a look at how we can switch between

00:10:22.910 --> 00:10:27.120
these three pages by using dynamic components.
