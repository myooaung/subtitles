WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.050 --> 00:00:02.505
When working in an ideal world,

00:00:02.505 --> 00:00:06.315
our data or our state won't have to travel very far,

00:00:06.315 --> 00:00:11.250
such as has this application here which communicates with the cal components.

00:00:11.250 --> 00:00:13.215
This is pretty straightforward.

00:00:13.215 --> 00:00:15.930
We have many options which we have looked at in the past,

00:00:15.930 --> 00:00:21.735
such as passing down data as props and emitting them back up with custom events.

00:00:21.735 --> 00:00:24.765
Also the option of using the slots too,

00:00:24.765 --> 00:00:27.570
even this pretty simple application is starting to get

00:00:27.570 --> 00:00:30.780
components nested deeper than one level.

00:00:30.780 --> 00:00:35.160
This view JS application switches between three pages and

00:00:35.160 --> 00:00:39.730
our overview page has nested inside our free child components.

00:00:39.730 --> 00:00:43.140
If our data was in the main app.vue,

00:00:43.140 --> 00:00:46.860
we could use props to pass it down to all of our pages.

00:00:46.860 --> 00:00:52.025
Then we could also keep passing down the props of the components nested inside,

00:00:52.025 --> 00:00:56.515
and this chain can keep going for as many levels deep as we need to.

00:00:56.515 --> 00:00:59.690
This does, however, cause a lot of extra code.

00:00:59.690 --> 00:01:02.735
We'll need to register them as each component,

00:01:02.735 --> 00:01:07.655
validate these props, and then pass them down to the next child as an attribute.

00:01:07.655 --> 00:01:11.285
To pass them back up, we use custom events.

00:01:11.285 --> 00:01:14.300
Again, this is really good for simple applications,

00:01:14.300 --> 00:01:16.130
but for many levels deep,

00:01:16.130 --> 00:01:18.250
it can become a pain.

00:01:18.250 --> 00:01:21.470
It would be so much more convenient if we could bypass all of

00:01:21.470 --> 00:01:26.200
this and provide the data directly into any child component.

00:01:26.200 --> 00:01:32.390
Vue does have a state management library available as a separate module called Vuex,

00:01:32.390 --> 00:01:36.965
which is really good and also maintained by the vue.js core team.

00:01:36.965 --> 00:01:39.830
This provides a central data store,

00:01:39.830 --> 00:01:45.055
but it also does come at a cost of needing to install and setup a new package.

00:01:45.055 --> 00:01:48.740
It is reasonably easy to learn and also to use,

00:01:48.740 --> 00:01:52.775
but it is something extra we don't quite need at this stage.

00:01:52.775 --> 00:01:57.250
Also, probably better used on larger scale applications.

00:01:57.250 --> 00:02:03.625
Alternatively, Vue also has a built-in feature called provide and inject.

00:02:03.625 --> 00:02:08.180
The concept is, we have a provider which is used to provide

00:02:08.180 --> 00:02:14.365
data to the rest of our application and this is placed in any parent component.

00:02:14.365 --> 00:02:20.980
Then any child component below at any level can be injected with this data.

00:02:20.980 --> 00:02:26.390
Not only this, but a bit like when we emitted custom events back up the chain.

00:02:26.390 --> 00:02:30.850
We can also change state in the parent by triggering methods.

00:02:30.850 --> 00:02:32.630
This is provide and inject,

00:02:32.630 --> 00:02:36.750
which we're now going to take a look at during this section.
