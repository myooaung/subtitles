WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.800 --> 00:00:03.690
We recently created this daysLeft section,

00:00:03.690 --> 00:00:07.320
which has quite a bit of JavaScript logic nested inside.

00:00:07.320 --> 00:00:10.185
Even though all of this code worked perfectly fine,

00:00:10.185 --> 00:00:12.420
things start to get a little messy.

00:00:12.420 --> 00:00:15.285
It can be generally recommended to extract

00:00:15.285 --> 00:00:19.500
more complex logic away from our templates whenever possible,

00:00:19.500 --> 00:00:22.170
leaving the template closer to the HTML,

00:00:22.170 --> 00:00:23.715
which it was intended for.

00:00:23.715 --> 00:00:29.145
Help with this, we can't outsource this logic into our script section as a method.

00:00:29.145 --> 00:00:33.220
Let's do this. Well, the props.

00:00:33.740 --> 00:00:39.730
Preview methods and the method name I'm going to give this is daysLeft string.

00:00:41.450 --> 00:00:45.700
This is going to be responsible for returning a string which

00:00:45.700 --> 00:00:49.700
will replace all of the text we see over on the right-hand side.

00:00:49.700 --> 00:00:51.825
It will say daysLeft,

00:00:51.825 --> 00:00:54.995
days ago, depending on the number of days left.

00:00:54.995 --> 00:00:58.930
For this, we can reuse most of the section in between these small tags,

00:00:58.930 --> 00:01:04.070
so copy the two lines of code inside of the curly braces.

00:01:04.070 --> 00:01:08.600
This can now be used as a starting point for our method.

00:01:09.090 --> 00:01:11.680
We now no longer in our template,

00:01:11.680 --> 00:01:15.875
so we need to remove the double curly braces for each one of these sections.

00:01:15.875 --> 00:01:19.095
Also, since we are now referring to daysLeft,

00:01:19.095 --> 00:01:21.315
and this path of our Vue instance.

00:01:21.315 --> 00:01:27.200
We need to refer to this with this.daysLeft in both of our lines of code.

00:01:27.200 --> 00:01:30.520
Then store each one of these lines in a constant.

00:01:30.520 --> 00:01:34.975
This is going to be either the day or the word days.

00:01:34.975 --> 00:01:38.950
Don't want to call my constant day or days.

00:01:38.950 --> 00:01:41.570
So this equal to this value.

00:01:41.570 --> 00:01:44.334
Next, a second constant,

00:01:44.334 --> 00:01:48.710
which will be either the word left or go.

00:01:48.780 --> 00:01:54.290
Then we can return the value of both of these words combined.

00:01:54.290 --> 00:01:59.395
We need to return something such as days ago or daysLeft.

00:01:59.395 --> 00:02:02.035
We can do this by returning the value.

00:02:02.035 --> 00:02:07.355
Then we need to add together both of these constants and return these from the method,

00:02:07.355 --> 00:02:12.280
so this would be day or days plus the value of left or go.

00:02:12.600 --> 00:02:18.040
We can now call this method in place of where we cut out these two lines of code.

00:02:18.040 --> 00:02:19.660
In between the small sections,

00:02:19.660 --> 00:02:21.790
we open up the double curly braces,

00:02:21.790 --> 00:02:23.680
and then it call our method.

00:02:23.680 --> 00:02:25.975
Since we actually want to run this function,

00:02:25.975 --> 00:02:28.070
we call it using the brackets.

00:02:28.070 --> 00:02:30.850
This will be replaced with the new string value,

00:02:30.850 --> 00:02:33.925
which is going to be returned from our method.

00:02:33.925 --> 00:02:37.449
This leaves us with a much cleaner templates,

00:02:37.449 --> 00:02:42.920
and we can also reuse the code elsewhere if needed to. Let's test this.

00:02:42.920 --> 00:02:44.535
You see one day left,

00:02:44.535 --> 00:02:45.975
that's all we're confined,

00:02:45.975 --> 00:02:48.295
and change this to a positive number.

00:02:48.295 --> 00:02:50.400
This should now say days ago,

00:02:50.400 --> 00:02:52.060
the greatest space in between these,

00:02:52.060 --> 00:02:56.485
all we need to do is just to add a space inside of our string.

00:02:56.485 --> 00:02:58.630
After day or days,

00:02:58.630 --> 00:03:01.945
and a space and this will be shown in the browser.

00:03:01.945 --> 00:03:06.005
This is good but not always the best solution for all cases,

00:03:06.005 --> 00:03:08.765
since a method needs to be called manually,

00:03:08.765 --> 00:03:10.090
just like we are doing here.

00:03:10.090 --> 00:03:13.750
The method is only going to be called once the component loads.

00:03:13.750 --> 00:03:16.895
If a day passes and the number of days changes,

00:03:16.895 --> 00:03:20.000
the UI would not be updated with the new value,

00:03:20.000 --> 00:03:24.205
until we either refresh the page or call this method manually.

00:03:24.205 --> 00:03:25.940
The situations like this,

00:03:25.940 --> 00:03:27.965
we could use a computed property.

00:03:27.965 --> 00:03:32.195
Computed is another section which is possible options API,

00:03:32.195 --> 00:03:36.845
which we've been using so far with the data and the methods sections.

00:03:36.845 --> 00:03:39.980
The structure is exactly the same as our method section.

00:03:39.980 --> 00:03:44.045
So all we need to do is to change this to be computed.

00:03:44.045 --> 00:03:46.985
I'm going to see straight away this causes an error,

00:03:46.985 --> 00:03:51.485
which is because unlike a method we don't need to call this using the brackets.

00:03:51.485 --> 00:03:54.890
All we need to do is to provide a reference that is computed

00:03:54.890 --> 00:03:58.990
property and it still works exactly the same.

00:03:58.990 --> 00:04:03.050
A method and a computed property looks the same on the surface.

00:04:03.050 --> 00:04:04.985
We call a method manually,

00:04:04.985 --> 00:04:08.210
but a computed property will automatically update

00:04:08.210 --> 00:04:12.425
the template if any changes happen inside of here.

00:04:12.425 --> 00:04:18.260
We see currently inside of here we have some reactive data, which is this.daysLeft.

00:04:18.260 --> 00:04:22.685
If a computed property contains reactive data just like this,

00:04:22.685 --> 00:04:25.715
or any other data property or methods.

00:04:25.715 --> 00:04:27.725
Each time that data updates,

00:04:27.725 --> 00:04:30.620
it will automatically update the template.

00:04:30.620 --> 00:04:33.065
Meaning that if daysLeft changes,

00:04:33.065 --> 00:04:36.110
our template would automatically change to.

00:04:36.110 --> 00:04:39.230
These computed properties are also very efficient,

00:04:39.230 --> 00:04:44.050
they are cached, and will only re-evaluate if something reactive changes.

00:04:44.050 --> 00:04:46.230
If nothing inside of here changes,

00:04:46.230 --> 00:04:51.635
[inaudible] this computed property would result in the cached results returned,

00:04:51.635 --> 00:04:53.955
making it very efficient to use.

00:04:53.955 --> 00:04:57.140
One more example of a computed property would be to change

00:04:57.140 --> 00:05:01.315
the color contrast between our event backgrounds and our text.

00:05:01.315 --> 00:05:04.220
If we return this back to a negative one,

00:05:04.220 --> 00:05:06.725
the yellow background is hard to read,

00:05:06.725 --> 00:05:09.145
and also a little bit for the green too.

00:05:09.145 --> 00:05:12.185
For the events which have these two background sets,

00:05:12.185 --> 00:05:14.300
we're going to darken the text color.

00:05:14.300 --> 00:05:19.460
This will also be a computed property so just after our daysLeft string,

00:05:19.460 --> 00:05:24.140
the second computed property is going to be called changeContrast.

00:05:24.310 --> 00:05:27.410
This is our [inaudible] just like a method and it

00:05:27.410 --> 00:05:30.125
just like our previous computed section.

00:05:30.125 --> 00:05:32.794
The first step is to set up a constant

00:05:32.794 --> 00:05:36.580
which is going to be an array with our two background colors.

00:05:36.580 --> 00:05:39.645
I'll call this the low contrast backgrounds.

00:05:39.645 --> 00:05:43.405
If you do change any of the colors to use with your events,

00:05:43.405 --> 00:05:46.565
it can also change the values inside of here too.

00:05:46.565 --> 00:05:51.370
The yellow and the green values are going to be f9f970,

00:05:51.370 --> 00:05:58.175
and then the second array item is 68ee94.

00:05:58.175 --> 00:06:00.700
Don't worry if you see an error at this point.

00:06:00.700 --> 00:06:02.650
This just means that we've created this array,

00:06:02.650 --> 00:06:04.450
but we have not yet used it.

00:06:04.450 --> 00:06:09.500
Next, we need to check if this current event has any one of these two background set,

00:06:09.500 --> 00:06:12.250
we have the event passed as a prop.

00:06:12.250 --> 00:06:16.075
Each one of these events has a background property.

00:06:16.075 --> 00:06:22.145
Meaning you can now check if our event.background includes any one of these array colors.

00:06:22.145 --> 00:06:27.650
The way to do this is to access a JavaScript array method called includes.

00:06:27.650 --> 00:06:32.195
Way to do this is to access our array which is low contrast backgrounds,

00:06:32.195 --> 00:06:35.545
and then call a JavaScript method called includes.

00:06:35.545 --> 00:06:38.720
This will land grab all of the values inside of here,

00:06:38.720 --> 00:06:41.315
and check if includes a particular value.

00:06:41.315 --> 00:06:43.820
A particular value we want to check is the

00:06:43.820 --> 00:06:49.280
event.background since this is also inside of our view instance,

00:06:49.280 --> 00:06:54.325
we use this keyword before calling event.background.

00:06:54.325 --> 00:06:58.850
A computed property must always return a new value.

00:06:58.850 --> 00:07:01.835
This new value will be either true or false,

00:07:01.835 --> 00:07:05.915
depending on if this color is included as the event background.

00:07:05.915 --> 00:07:10.270
Thus we can call this changeContrast computed property.

00:07:10.270 --> 00:07:16.100
Inside of the double curly braces or places just below our closing article.

00:07:17.400 --> 00:07:20.560
This, and over to the browser,

00:07:20.560 --> 00:07:22.870
so the yellow one is a little hard to see,

00:07:22.870 --> 00:07:24.340
but really select all.

00:07:24.340 --> 00:07:26.060
We can see that the yellow one is true.

00:07:26.060 --> 00:07:28.250
We how false for the other colors.

00:07:28.250 --> 00:07:32.570
This green one is also shown false so let's see what's going on here.

00:07:32.570 --> 00:07:37.725
This is 68ee94, we can just compare this.

00:07:37.725 --> 00:07:40.380
This was the conference talk,

00:07:40.380 --> 00:07:43.210
I I think this is just because of the capital letters.

00:07:43.210 --> 00:07:45.155
So let's change this,

00:07:45.155 --> 00:07:47.895
making this an exact match.

00:07:47.895 --> 00:07:51.120
Now this is set to two as expected.

00:07:51.120 --> 00:07:55.765
We don't just want to output the value of true or false so in our template.

00:07:55.765 --> 00:08:00.715
A better use would be to only apply a dark text color if this results in true.

00:08:00.715 --> 00:08:05.045
We've already looked at how to do this by using a binded style attributes.

00:08:05.045 --> 00:08:09.850
This is already settled for each one of our articles separated by a comma.

00:08:09.850 --> 00:08:12.700
We can also set the CSS color property,

00:08:12.700 --> 00:08:15.920
depending on the value of changeContrast.

00:08:15.920 --> 00:08:19.255
If changeContrast is going to be equal to two,

00:08:19.255 --> 00:08:22.060
we'll make use of the JavaScript ternary operator,

00:08:22.060 --> 00:08:24.515
the toggle between two different colors.

00:08:24.515 --> 00:08:31.685
If this is true, the color we want to place is a hex value of 45 before it will fall.

00:08:31.685 --> 00:08:36.500
If this is false, meaning we are not on the low contrast backgrounds.

00:08:36.500 --> 00:08:40.300
We can then set the font color to be the value of white smoke.

00:08:40.300 --> 00:08:43.460
Save and the text color has now been

00:08:43.460 --> 00:08:47.210
updated for the yellow and also the green background.

00:08:47.210 --> 00:08:51.215
The benefits of using a computed property here is that later,

00:08:51.215 --> 00:08:54.620
we will be allowing the user to edit each one of these events,

00:08:54.620 --> 00:08:56.420
including the background color,

00:08:56.420 --> 00:08:59.930
meaning it will watch for any changes to the background,

00:08:59.930 --> 00:09:02.850
and then update the color as needed.
