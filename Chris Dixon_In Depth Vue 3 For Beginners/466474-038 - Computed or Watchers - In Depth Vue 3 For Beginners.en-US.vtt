WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.850
When first starting off with Vue JS,

00:00:02.850 --> 00:00:07.060
it maybe confusing why both the computed property and the watcher both

00:00:07.060 --> 00:00:10.120
exist when they both appear to do a similar thing

00:00:10.120 --> 00:00:13.910
on what you need for a change and then running some code.

00:00:13.910 --> 00:00:17.110
But there are some key differences and one of these

00:00:17.110 --> 00:00:20.545
is if you want to watch for multiple pieces of data.

00:00:20.545 --> 00:00:22.360
The View documentation shows

00:00:22.360 --> 00:00:26.230
this great example where we have the first name and last name.

00:00:26.230 --> 00:00:28.240
We wouldn't need to create two watches for

00:00:28.240 --> 00:00:32.590
the first and last name to construct the full name which we need.

00:00:32.590 --> 00:00:37.330
In this case, a computed property would be better since we can reference

00:00:37.330 --> 00:00:43.145
multiple pieces of reactive data and it will run if any of these changes.

00:00:43.145 --> 00:00:46.649
Considering this exact same example,

00:00:46.649 --> 00:00:51.745
notice here we're taking in some data and then return it a new value.

00:00:51.745 --> 00:00:54.440
As we know, this value can be accessed anywhere in

00:00:54.440 --> 00:00:59.515
our template by using the computed name of create full-name.

00:00:59.515 --> 00:01:05.240
This is perfectly valid with a computed property on the correct way to use it.

00:01:05.240 --> 00:01:09.755
But we should not try to use them to change any external data or state,

00:01:09.755 --> 00:01:12.950
such as anything inside of our data properties,

00:01:12.950 --> 00:01:15.845
as it results in what is called a side effect,

00:01:15.845 --> 00:01:17.740
which will then throw an error.

00:01:17.740 --> 00:01:21.440
The key here is to use a computed property when we want

00:01:21.440 --> 00:01:25.480
to observe a data change and then return a new value.

00:01:25.480 --> 00:01:27.925
Then if we want to update our data,

00:01:27.925 --> 00:01:31.705
or our state, this should then be done using a watcher.

00:01:31.705 --> 00:01:34.630
To summarize, we can use a watch property when we want

00:01:34.630 --> 00:01:37.660
to run a function when data changes.

00:01:37.660 --> 00:01:43.525
But instead, if we want to return a new value which is calculated on some existing data,

00:01:43.525 --> 00:01:46.400
we would then use a computed value.

00:01:46.400 --> 00:01:50.619
Also computed allows us to watch multiple data sources,

00:01:50.619 --> 00:01:52.705
much more efficiently too.

00:01:52.705 --> 00:01:54.820
As we looked at in the last slide,

00:01:54.820 --> 00:01:59.545
we should not use a computed property to directly mutate state,

00:01:59.545 --> 00:02:03.220
nor should we use it for any asynchronous operations.

00:02:03.220 --> 00:02:07.570
Meaning, if we had an asynchronous tasks such as corn of some API data,

00:02:07.570 --> 00:02:10.390
which may take some time to come back from the server.

00:02:10.390 --> 00:02:12.635
A watcher is the way to go.

00:02:12.635 --> 00:02:15.580
As we've already seen, computed properties are also

00:02:15.580 --> 00:02:18.790
directly accessible from within the template.

00:02:18.790 --> 00:02:20.425
So we can use our output,

00:02:20.425 --> 00:02:22.375
the new return value.

00:02:22.375 --> 00:02:26.650
Another difference is not computed properties are also cached.

00:02:26.650 --> 00:02:32.335
Imagine a date property is being observed by both a computed under watch property?

00:02:32.335 --> 00:02:34.855
If the data property is then updated,

00:02:34.855 --> 00:02:37.705
well, the value is the same as it was previously.

00:02:37.705 --> 00:02:42.910
A computed property will not recalculate since the value has not changed.

00:02:42.910 --> 00:02:47.405
However, the watch property will still run the callback function, regardless.

00:02:47.405 --> 00:02:50.785
As you can see, both have their uses and advantages,

00:02:50.785 --> 00:02:53.540
both for different use cases.
