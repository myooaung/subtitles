WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.170 --> 00:00:03.180
To help you better understand reactivity,

00:00:03.180 --> 00:00:06.120
we're going to first look at the difference between

00:00:06.120 --> 00:00:09.539
primitive and reference types in JavaScript.

00:00:09.539 --> 00:00:12.254
If you are already comfortable with the difference,

00:00:12.254 --> 00:00:14.730
you can move on to the next video.

00:00:14.730 --> 00:00:18.480
If not, this video will help you prepare for the upcoming videos.

00:00:18.480 --> 00:00:22.440
You don't need to type this out or follow along with this coding,

00:00:22.440 --> 00:00:24.540
but there is something I want to show you to help you

00:00:24.540 --> 00:00:27.360
better understand what we are going to look out,

00:00:27.360 --> 00:00:33.390
and to see this, we're going to go over to the app.vue and then down to our scripts.

00:00:33.390 --> 00:00:38.085
What I'm about show you is passing a simple object as a prop.

00:00:38.085 --> 00:00:39.885
Inside of this app.vue,

00:00:39.885 --> 00:00:42.450
we're going to create a data section.

00:00:42.450 --> 00:00:46.220
This will look pretty similar to what we had in the early videos.

00:00:46.220 --> 00:00:50.105
We're just going to return a new object with a user.

00:00:50.105 --> 00:00:57.400
This user will create a name property and also, a user ID.

00:00:59.390 --> 00:01:01.815
Up to the template,

00:01:01.815 --> 00:01:06.430
the only component we have to pass props down to is this app header,

00:01:06.430 --> 00:01:09.380
so let's pass our props down to this.

00:01:09.380 --> 00:01:13.725
The user is equal to the user.

00:01:13.725 --> 00:01:15.755
This, and then we can go over to

00:01:15.755 --> 00:01:20.425
this app header components and we will typically do something like this.

00:01:20.425 --> 00:01:23.500
We will create a script section.

00:01:23.510 --> 00:01:25.925
Setup the props.

00:01:25.925 --> 00:01:28.310
If as an object or an array.

00:01:28.310 --> 00:01:31.390
We'll keep this simple and just pass this in as an array.

00:01:31.390 --> 00:01:35.895
We'll then maybe accept these props inside of the data section,

00:01:35.895 --> 00:01:38.570
where we could set a date property such as

00:01:38.570 --> 00:01:43.785
the use object to be equal to our prop, which is this.user.

00:01:43.785 --> 00:01:46.920
Now, this receives our user prop and stores this

00:01:46.920 --> 00:01:50.135
locally in the components so we could then modify this,

00:01:50.135 --> 00:01:52.670
maybe using a form with V-model.

00:01:52.670 --> 00:01:55.735
Let's do this just anywhere in our templates.

00:01:55.735 --> 00:01:58.575
Setup a text-based input.

00:01:58.575 --> 00:02:00.915
We could set up V-model,

00:02:00.915 --> 00:02:03.390
linked to our user object.

00:02:03.390 --> 00:02:09.225
Let's go for the name. Do this and we see our input and our name as expected,

00:02:09.225 --> 00:02:13.545
but if we go back to our app.vue where we have this original data,

00:02:13.545 --> 00:02:15.270
let's quickly output this.

00:02:15.270 --> 00:02:18.175
You need double curly braces placed in the user.

00:02:18.175 --> 00:02:20.460
Now we have our data in two locations.

00:02:20.460 --> 00:02:24.230
We have the original data from our app.vue.

00:02:24.230 --> 00:02:29.140
Then up here, we have the props which has been copied inside of this app header.

00:02:29.140 --> 00:02:33.090
Let's give this a go. We can modify our input.

00:02:33.090 --> 00:02:34.860
Let's add something here inside of here.

00:02:34.860 --> 00:02:38.840
We see as soon as we update this app header, that also,

00:02:38.840 --> 00:02:43.775
the data inside the parent app.vue is also updated too.

00:02:43.775 --> 00:02:47.885
Now, this may seem a little strange because we've passed this down as props,

00:02:47.885 --> 00:02:49.615
we've then taken a copy,

00:02:49.615 --> 00:02:52.610
and we should now be only modifying the data in our app header.

00:02:52.610 --> 00:02:56.000
Normally, we would expect this behavior to only happen if we

00:02:56.000 --> 00:03:00.005
emitted a custom event to change the data inside of the parents.

00:03:00.005 --> 00:03:02.290
But this is doing it automatically.

00:03:02.290 --> 00:03:06.105
Let's take a look at another example back in the app.vue.

00:03:06.105 --> 00:03:10.980
The use the object will pass down a simple username,

00:03:10.980 --> 00:03:14.370
which is just a simple string,

00:03:14.370 --> 00:03:16.305
and now open the app header,

00:03:16.305 --> 00:03:19.270
we can also pass this down as props.

00:03:19.520 --> 00:03:22.980
Username to be equal to username,

00:03:22.980 --> 00:03:30.915
and also output this inside of our app. Over to the header.

00:03:30.915 --> 00:03:33.880
Pass this into our array.

00:03:34.520 --> 00:03:36.780
We'll do the same as our object,

00:03:36.780 --> 00:03:38.715
pass this into our data.

00:03:38.715 --> 00:03:44.355
The usernameProp is going to be equal to this.username.

00:03:44.355 --> 00:03:47.430
Let's also duplicate the input,

00:03:47.430 --> 00:03:48.960
the type of text, and this time,

00:03:48.960 --> 00:03:52.120
we'll V-model to the usernameProp.

00:03:53.450 --> 00:03:56.650
Now, if we try to modify this username,

00:03:56.650 --> 00:03:58.780
if not anything, this time,

00:03:58.780 --> 00:04:01.000
there's no changes in the parent components.

00:04:01.000 --> 00:04:04.015
Yet if we do this to our original object,

00:04:04.015 --> 00:04:07.210
we see the parent components will update.

00:04:07.210 --> 00:04:09.520
This may seem strange at first,

00:04:09.520 --> 00:04:12.400
but it's not a new JS feature.

00:04:12.400 --> 00:04:15.925
It's something related to JavaScript and data types,

00:04:15.925 --> 00:04:19.145
which can be placed into two groups and

00:04:19.145 --> 00:04:22.810
these groups are referred to as primitive and object types.

00:04:22.810 --> 00:04:26.455
Object types in JavaScript are considered to be functions,

00:04:26.455 --> 00:04:29.315
arrays, and an object itself.

00:04:29.315 --> 00:04:34.350
Primitives are data which is not an object and types of string,

00:04:34.350 --> 00:04:39.270
Boolean, number, undefined, symbol, and BigInt.

00:04:39.270 --> 00:04:42.980
The part we're interested in is inside of this app header,

00:04:42.980 --> 00:04:45.140
you will have all two props of user,

00:04:45.140 --> 00:04:49.385
and username and then we take enough copies of both of these values.

00:04:49.385 --> 00:04:53.470
The difference is both of these values fall into our two groups.

00:04:53.470 --> 00:05:00.110
This first one is an object reference and the second one is a primitive.

00:05:00.500 --> 00:05:06.270
This current one is a type of string and this is where the difference lies.

00:05:06.270 --> 00:05:09.110
When we copy a primitive value, just as we do,

00:05:09.110 --> 00:05:10.835
we'd copy in this username,

00:05:10.835 --> 00:05:14.195
each copy holds its own unique value.

00:05:14.195 --> 00:05:17.790
You can think of this as two separate values,

00:05:17.790 --> 00:05:22.164
which is why when we update our input and our username,

00:05:22.164 --> 00:05:24.500
the original is unaffected.

00:05:24.500 --> 00:05:29.495
Object types, however, like we have with our user, will behave differently.

00:05:29.495 --> 00:05:31.690
Even when we take a copy of

00:05:31.690 --> 00:05:36.460
an object over the objects that are pointing to the same value in memory,

00:05:36.460 --> 00:05:40.475
even though they are in different components and locations.

00:05:40.475 --> 00:05:45.250
This is also known as a reference types since all variables are referring to

00:05:45.250 --> 00:05:50.875
the same thing and it's this reason why we see the original name updated.

00:05:50.875 --> 00:05:53.229
This leaves us with a question,

00:05:53.229 --> 00:05:58.060
why use things such as emit to provide updates in the parent components?

00:05:58.060 --> 00:06:01.015
Why not just always pass object types?

00:06:01.015 --> 00:06:03.805
After all, this would save a lot of code.

00:06:03.805 --> 00:06:06.400
This is a reasonable question and there is

00:06:06.400 --> 00:06:08.980
nothing stopping you from doing this if you wanted to,

00:06:08.980 --> 00:06:10.720
especially on a smaller,

00:06:10.720 --> 00:06:12.980
easier to manage project.

00:06:12.980 --> 00:06:16.900
However, it's generally recommended to avoid this if possible,

00:06:16.900 --> 00:06:22.895
since it may begin to get confusing if multiple sources are mutating the same object.

00:06:22.895 --> 00:06:27.880
An option is to make a deep clone of the original and still use the techniques

00:06:27.880 --> 00:06:33.080
such as emit to only modify the data inside of the parent component.

00:06:33.080 --> 00:06:38.050
We could also flatten or reorganize our data to use as objects or we could

00:06:38.050 --> 00:06:43.855
restructure our props to only pass down object properties rather than the full object.

00:06:43.855 --> 00:06:49.030
Another option is to also only pass down the object as an initial value to the child,

00:06:49.030 --> 00:06:52.510
and then modify a different date property on the parent.

00:06:52.510 --> 00:06:54.150
Whichever option we choose,

00:06:54.150 --> 00:06:58.420
the key is to make updates more predictable and to ensure we know

00:06:58.420 --> 00:07:03.425
what components or what methods changed our data at any given time,

00:07:03.425 --> 00:07:07.645
rather than guessing which reference to the data caused the updates.

00:07:07.645 --> 00:07:09.220
If this is all completely new,

00:07:09.220 --> 00:07:10.630
it may seem a little confusing,

00:07:10.630 --> 00:07:13.060
but the key thing to remember is a primitive,

00:07:13.060 --> 00:07:15.190
just like a simple string or number,

00:07:15.190 --> 00:07:17.275
is more like an independent copy.

00:07:17.275 --> 00:07:22.265
But an object type just like this will still point to the original object.

00:07:22.265 --> 00:07:24.970
Now, we don't need any of this in our project,

00:07:24.970 --> 00:07:26.710
this is just for our demonstration,

00:07:26.710 --> 00:07:28.775
so we can remove all of these,

00:07:28.775 --> 00:07:32.990
include inputs in app.vue We don't need

00:07:32.990 --> 00:07:39.180
these props and we can remove our data properties too.

00:07:39.180 --> 00:07:42.150
This understanding of object references and

00:07:42.150 --> 00:07:45.740
primitives will become more useful in upcoming videos,

00:07:45.740 --> 00:07:50.070
where we will look at making our composition data reactive.
