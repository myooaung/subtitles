WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.320 --> 00:00:03.900
Included with this course inside of the App.vue file,

00:00:03.900 --> 00:00:06.765
I have provided an array of objects.

00:00:06.765 --> 00:00:09.930
This is our eventData which we're now going to use to loop

00:00:09.930 --> 00:00:14.295
through and provide these as props to our event component.

00:00:14.295 --> 00:00:17.100
Currently this is commented out since if we have

00:00:17.100 --> 00:00:19.575
a variable like this and we don't use it,

00:00:19.575 --> 00:00:21.720
the ESLint plugin which we use in,

00:00:21.720 --> 00:00:24.720
will throw an error. Now, we're going to use this.

00:00:24.720 --> 00:00:28.960
We can select all of this and uncomment all of this out.

00:00:28.960 --> 00:00:32.210
We can do this all at the same time with highlight and

00:00:32.210 --> 00:00:36.110
then a command or control alongside the forward slash.

00:00:36.110 --> 00:00:39.830
One thing to watch out for here is we can't place

00:00:39.830 --> 00:00:43.435
in any JavaScript code we want inside of this script section,

00:00:43.435 --> 00:00:45.735
but Soul Vue recognizes it,

00:00:45.735 --> 00:00:50.105
it does also needs to be present inside of the export default.

00:00:50.105 --> 00:00:55.945
So we now need to create a date property and then assign this array to it.

00:00:55.945 --> 00:01:00.440
Create this data section and then inside of the returns section,

00:01:00.440 --> 00:01:03.845
we're going to create a date property called events.

00:01:03.845 --> 00:01:08.530
This is going to be equal to our array, which is eventData.

00:01:08.530 --> 00:01:13.945
Vue is now aware of this eventData since it's now stored inside of events.

00:01:13.945 --> 00:01:19.760
We can now go up to our template and we're going to loop through all of these events.

00:01:19.760 --> 00:01:23.290
Then it creates a new component for each one.

00:01:23.290 --> 00:01:26.520
For this, we'll create an unordered list and create

00:01:26.520 --> 00:01:30.110
a list item to output each one of our events.

00:01:30.110 --> 00:01:32.315
This list item is going to be repeated,

00:01:32.315 --> 00:01:34.220
so we can use v-for.

00:01:34.220 --> 00:01:37.770
We will say "event in events."

00:01:39.590 --> 00:01:43.080
Also, this needs a dynamic key behind it.

00:01:43.080 --> 00:01:47.460
We have a unique value for each one, which is this ID.

00:01:50.500 --> 00:01:54.680
Next, we can move our events components inside of

00:01:54.680 --> 00:01:58.670
this list item where we are going to pass our event as a prop.

00:01:58.670 --> 00:02:02.360
Use a colon since this takes in some dynamic data,

00:02:02.360 --> 00:02:04.550
and we're going to set this name to be event,

00:02:04.550 --> 00:02:09.010
which will be equal to our event variable from the loop.

00:02:09.010 --> 00:02:13.895
Save this and instantly we'll see we have six different events inside the browser.

00:02:13.895 --> 00:02:18.650
Since we have six events inside of our event data, we do, however,

00:02:18.650 --> 00:02:20.180
all have the same information,

00:02:20.180 --> 00:02:23.660
all have the same name and also the same description,

00:02:23.660 --> 00:02:25.640
and the same date to.

00:02:25.640 --> 00:02:30.740
To fix this, we're going to go over to our Event.vue component.

00:02:30.740 --> 00:02:35.160
The first step is to receive this data as props.

00:02:35.500 --> 00:02:38.915
Props is an array which takes in our strings,

00:02:38.915 --> 00:02:43.300
and only prop which we are receiving is the event information.

00:02:43.300 --> 00:02:46.620
We can now use this up in our template.

00:02:46.620 --> 00:02:50.060
We have the event name, so open up the double curly braces,

00:02:50.060 --> 00:02:53.255
and then replaces with the event.name.

00:02:53.255 --> 00:02:55.505
That's our name now taken care of.

00:02:55.505 --> 00:02:59.325
Then at the detail section, remove this.

00:02:59.325 --> 00:03:02.290
This was the event.details.

00:03:02.780 --> 00:03:04.995
Good. This is all working,

00:03:04.995 --> 00:03:08.225
but these all still have the same background color.

00:03:08.225 --> 00:03:10.070
If we go to our eventData,

00:03:10.070 --> 00:03:12.365
we can see that a different background color

00:03:12.365 --> 00:03:15.435
has been provided for each one of these events.

00:03:15.435 --> 00:03:19.740
We can now make use of this over in our event component by passing this

00:03:19.740 --> 00:03:24.155
as a dynamic style property and use this to set the background.

00:03:24.155 --> 00:03:29.465
Inside of the opening article we can use the colon to bind a dynamic style section.

00:03:29.465 --> 00:03:32.400
Remember, our styles are passed in as an object,

00:03:32.400 --> 00:03:34.790
so we need to open up the curly braces.

00:03:34.790 --> 00:03:41.180
Inside here we're going to set the background to be equal to our event.background.

00:03:41.390 --> 00:03:45.970
Good. This just leaves us with the number of days left which we are going to come back to

00:03:45.970 --> 00:03:50.215
since we don't need to perform a calculation from the eventDate.

00:03:50.215 --> 00:03:54.910
I will also fix the color contrast too for backgrounds such as this yellow,

00:03:54.910 --> 00:03:58.035
where we can't see the text which is been overlaid.

00:03:58.035 --> 00:04:02.420
To finish this off, we're just going to add a little bit of CSS, first of all,

00:04:02.420 --> 00:04:08.180
to our list into the app section and scroll down to the styling section at the bottom.

00:04:08.180 --> 00:04:11.150
The events are surrounded in the unordered list,

00:04:11.150 --> 00:04:16.625
which we're going to set to have a zero-padding to remove any browser defaults.

00:04:16.625 --> 00:04:21.185
Then each one of these events are stored in the list item.

00:04:21.185 --> 00:04:27.830
So we'll set the list-style to be none Then finally,

00:04:27.830 --> 00:04:33.455
the cursor is going to be a pointer each time I hover over any one of these list items.

00:04:33.455 --> 00:04:36.550
To also restrict the maximum width of these events,

00:04:36.550 --> 00:04:38.180
if we stretch the browser,

00:04:38.180 --> 00:04:42.535
we're going to now set the maximum width inside of this app wrapper.

00:04:42.535 --> 00:04:45.945
This app is the wrapper for our whole application,

00:04:45.945 --> 00:04:49.130
and we can see this if we go into our index.html.

00:04:49.130 --> 00:04:54.265
This is the section just here where our application gets mounted to.

00:04:54.265 --> 00:04:56.265
This will apply globally.

00:04:56.265 --> 00:05:01.880
All I'm going to do in here is to set the maximum width to be 600 pixels.

00:05:01.880 --> 00:05:06.600
Then we can center this with margin zero auto.

00:05:08.260 --> 00:05:12.210
Zero will set the margin on the very top and bottom

00:05:12.210 --> 00:05:15.170
and then auto will apply all of the margin,

00:05:15.170 --> 00:05:19.080
which is available equally on the left and right.
