WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.170 --> 00:00:03.735
We have reactive objects just like we have here.

00:00:03.735 --> 00:00:08.025
Sometimes you may want to pull out a single value from this object.

00:00:08.025 --> 00:00:11.730
For example, if I had an email, well,

00:00:11.730 --> 00:00:15.525
this use case and especially if we need to access multiple values,

00:00:15.525 --> 00:00:19.200
we may often make use of JavaScript destructuring.

00:00:19.200 --> 00:00:22.290
Just like this, we could setup a constant called

00:00:22.290 --> 00:00:26.140
email and extract this from our data object.

00:00:27.020 --> 00:00:32.670
This will now extract the email property and save this to the email variable.

00:00:32.670 --> 00:00:37.560
We could also access multiple values if we also wanted the name just like this,

00:00:37.560 --> 00:00:42.315
we could access the email and also these name variables too.

00:00:42.315 --> 00:00:46.310
This is pretty common and this is just regular JavaScript.

00:00:46.310 --> 00:00:50.780
But let's see what happens when we try to render this out to our template.

00:00:50.780 --> 00:00:54.625
First, we need to return this from our object,

00:00:54.625 --> 00:00:57.045
and up to our template.

00:00:57.045 --> 00:01:00.565
First, let's change this to be our full data object,

00:01:00.565 --> 00:01:03.880
and then after this, our email.

00:01:04.760 --> 00:01:11.380
Again, we can scroll down to our set timeout and simulate an update by changing our data.

00:01:11.380 --> 00:01:17.310
What we're going to do here is access our data object and update the email property.

00:01:17.740 --> 00:01:21.000
It can just be any string.

00:01:21.410 --> 00:01:24.940
Over to the browser and refresh.

00:01:26.090 --> 00:01:30.635
Three seconds later, our original data object which we have here,

00:01:30.635 --> 00:01:32.555
is now been updated.

00:01:32.555 --> 00:01:35.060
However though, our copy which is stored inside of

00:01:35.060 --> 00:01:38.645
this email property is still the original value.

00:01:38.645 --> 00:01:43.775
This happens because when we destructure values out of an object like this,

00:01:43.775 --> 00:01:46.445
it will lose all of its reactivity.

00:01:46.445 --> 00:01:48.710
Meaning any updates which we make to

00:01:48.710 --> 00:01:52.850
the original object will not be passed down to this variable.

00:01:52.850 --> 00:01:56.420
If we still wanted to make use of the structuring like this,

00:01:56.420 --> 00:01:59.075
we'll still hold on to the reactivity.

00:01:59.075 --> 00:02:02.975
We can wrap this data object with something called toRefs.

00:02:02.975 --> 00:02:07.120
Open the import, let's import this,

00:02:07.120 --> 00:02:11.450
and then use this as a wrapper to our data.

00:02:12.160 --> 00:02:15.065
Let's try this out, save this,

00:02:15.065 --> 00:02:17.210
and refresh the browser.

00:02:18.440 --> 00:02:23.165
After three seconds, our email on the data object is updated,

00:02:23.165 --> 00:02:25.435
and also the copy too.

00:02:25.435 --> 00:02:29.000
What we're doing here with toRefs is effectively

00:02:29.000 --> 00:02:33.740
converting all of these properties on our object to make use of ref.

00:02:33.740 --> 00:02:38.420
This will mean we can keep the reactivity so if any of this data changes,

00:02:38.420 --> 00:02:42.060
our copy will also be updated too.
