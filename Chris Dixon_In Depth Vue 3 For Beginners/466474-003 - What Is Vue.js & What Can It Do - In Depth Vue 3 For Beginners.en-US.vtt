WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.220 --> 00:00:07.350
At it's most fundamental Vue.js is a framework for building user interfaces.

00:00:07.350 --> 00:00:09.660
Its main job is to handle a part of

00:00:09.660 --> 00:00:13.650
website application which the user sees and interacts with.

00:00:13.650 --> 00:00:17.670
It takes in some data and displays it to the user.

00:00:17.670 --> 00:00:21.570
Since Vue is responsible for the user interface,

00:00:21.570 --> 00:00:23.955
it needs some data to work with.

00:00:23.955 --> 00:00:27.140
The data which it receives can come in any form,

00:00:27.140 --> 00:00:30.020
such as from a web server, an API.

00:00:30.020 --> 00:00:34.835
We can store it inside of our application and also from the user input too.

00:00:34.835 --> 00:00:38.230
For beginners, it can be very friendly to get going with,

00:00:38.230 --> 00:00:40.325
only needing some HTML,

00:00:40.325 --> 00:00:43.285
CSS, and a little JavaScript knowledge.

00:00:43.285 --> 00:00:48.590
As soon as you get more comfortable with Vue.js and for more advanced users,

00:00:48.590 --> 00:00:52.840
you will also appreciate how fast and scalable Vue can be.

00:00:52.840 --> 00:00:58.525
Along with a mature ecosystem too which extends the Vue.js core if needed.

00:00:58.525 --> 00:01:02.510
The Vue.js core itself is very lightweight and can be

00:01:02.510 --> 00:01:06.335
used from simply controlling a single part of a website,

00:01:06.335 --> 00:01:10.705
right through to handling a complex single-page application.

00:01:10.705 --> 00:01:14.825
If you're not sure what a single-page application is just yet,

00:01:14.825 --> 00:01:17.470
there will be more on this this later in the course.

00:01:17.470 --> 00:01:19.440
At its most simple,

00:01:19.440 --> 00:01:23.050
imagine if we had an existing portfolio website,

00:01:23.050 --> 00:01:26.540
which was created with just HTML and CSS.

00:01:26.540 --> 00:01:30.770
Further down the line, we may want to add some new features or sections to this site,

00:01:30.770 --> 00:01:32.750
such as our recent tweets.

00:01:32.750 --> 00:01:37.070
We could go the long way around and manually copy over all of our tweets into

00:01:37.070 --> 00:01:41.425
our HTML file each time it creates a new post or a new tweet,

00:01:41.425 --> 00:01:44.780
or we would probably want to handle this with

00:01:44.780 --> 00:01:49.345
the Twitter API to pull in our recent posts automatically.

00:01:49.345 --> 00:01:56.045
With such a use case we could use Vue.js to control just a part of our site,

00:01:56.045 --> 00:01:59.315
or even multiple parts if we wanted to.

00:01:59.315 --> 00:02:03.645
All we need to do is to link the Vue.js CDN link,

00:02:03.645 --> 00:02:06.215
which is a link to the Vue library.

00:02:06.215 --> 00:02:10.000
The CDN link is inserted into a HTML file,

00:02:10.000 --> 00:02:12.445
just like with any other CDN link.

00:02:12.445 --> 00:02:16.360
Then we can access Vue features from a JavaScript file.

00:02:16.360 --> 00:02:20.075
We will come back to this and give this a try very soon.

00:02:20.075 --> 00:02:23.805
Along with controlling a part of the user interface,

00:02:23.805 --> 00:02:27.555
Vue can also control our full-page application too.

00:02:27.555 --> 00:02:31.980
We will use a tool in the upcoming project called the Vue CLI,

00:02:31.980 --> 00:02:36.320
which will allow us to create these applications, and as I mentioned before,

00:02:36.320 --> 00:02:40.370
we need a data source such as some products and [inaudible] them

00:02:40.370 --> 00:02:44.840
past the Vue which can then display them to the user in any way which we want,

00:02:44.840 --> 00:02:50.160
along with handling any data changes and updates along the way too.
