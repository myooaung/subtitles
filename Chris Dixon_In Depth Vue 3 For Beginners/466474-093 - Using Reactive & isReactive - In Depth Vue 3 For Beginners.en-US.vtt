WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.425
To kick things off for this video over in the app.vue file,

00:00:04.425 --> 00:00:08.295
we can remove all of the proxy demo from the last video.

00:00:08.295 --> 00:00:11.430
Remove everything up to this date object.

00:00:11.430 --> 00:00:13.440
Now we're going to take a look at how we can add

00:00:13.440 --> 00:00:17.475
reactivity to the data in our composition API.

00:00:17.475 --> 00:00:21.765
We've data properties we've been using so far on the options object.

00:00:21.765 --> 00:00:24.975
By default, everything is reactive.

00:00:24.975 --> 00:00:28.080
Meaning if we make any changes to this data,

00:00:28.080 --> 00:00:30.570
any other parts of our application which relies on

00:00:30.570 --> 00:00:35.180
that data will also be updated to in V3.

00:00:35.180 --> 00:00:37.040
As mentioned in the last video.

00:00:37.040 --> 00:00:43.140
This is because VGS will convert these properties into proxies when using composition.

00:00:43.140 --> 00:00:47.389
Now these variables we declare are not automatically reactive,

00:00:47.389 --> 00:00:50.710
just like when we create variables with regular JavaScript.

00:00:50.710 --> 00:00:55.010
These are the ones which you've added inside the setup function inside of your app home.

00:00:55.010 --> 00:00:58.220
Just like the unique categories and all cards.

00:00:58.220 --> 00:01:02.270
You free is much more modular than V version 2.

00:01:02.270 --> 00:01:04.760
We first need to import the reactivity package,

00:01:04.760 --> 00:01:07.175
which we need to from the view library.

00:01:07.175 --> 00:01:12.650
This means we only import the part which we are actually using in our application.

00:01:12.650 --> 00:01:15.520
Let's see how this works in composition.

00:01:15.520 --> 00:01:19.850
Inside of this app home and also inside of the setup function.

00:01:19.850 --> 00:01:24.340
We can create a JavaScript object to hold some data properties.

00:01:24.340 --> 00:01:27.190
Let's call this data,

00:01:27.190 --> 00:01:30.350
and set this equal to an object.

00:01:30.350 --> 00:01:36.845
This name of data is completely different and is not related to a regular dates property.

00:01:36.845 --> 00:01:40.160
Inside here we can add some properties to this and we'll go for

00:01:40.160 --> 00:01:44.010
name and also a Occupation.

00:01:47.470 --> 00:01:51.725
Now at the minute we don't have any thing to update this data object.

00:01:51.725 --> 00:01:54.245
To simulate an update and check this out,

00:01:54.245 --> 00:01:58.325
we're going to create a setTimeout function at just below.

00:01:58.325 --> 00:02:02.080
We want this function to run every three seconds,

00:02:02.080 --> 00:02:04.480
so you can pass in 3,000 milliseconds.

00:02:04.480 --> 00:02:07.705
Then we'll want to do to access the data object,

00:02:07.705 --> 00:02:09.775
and then it changed the data inside,

00:02:09.775 --> 00:02:11.780
such as the occupation,

00:02:11.780 --> 00:02:16.780
or access the data, the occupation.

00:02:16.960 --> 00:02:20.940
We can set this equal to retired.

00:02:21.580 --> 00:02:28.100
You check if this is working. We can return our data objects back from our composition.

00:02:28.650 --> 00:02:31.660
This now means if we scroll up to the template,

00:02:31.660 --> 00:02:34.780
we can now use this inside of our code.

00:02:34.780 --> 00:02:36.340
Since this is an example,

00:02:36.340 --> 00:02:37.750
we can place this anywhere.

00:02:37.750 --> 00:02:39.700
That's access our data,

00:02:39.700 --> 00:02:43.680
Dots occupation, Refresh the browser.

00:02:43.680 --> 00:02:46.615
We see the text of a web developer.

00:02:46.615 --> 00:02:49.120
If we wait for three seconds,

00:02:49.120 --> 00:02:51.970
we don't see any updates to this code.

00:02:51.970 --> 00:02:56.755
Even though we should be changing this to retired after three seconds.

00:02:56.755 --> 00:02:59.560
Even though we are changing this after three seconds,

00:02:59.560 --> 00:03:01.750
it just with regular JavaScript,

00:03:01.750 --> 00:03:04.880
the user interface will not be updated.

00:03:04.880 --> 00:03:09.250
For this, we need tell VGS that we want this data to be reactive.

00:03:09.250 --> 00:03:12.360
This first technique which we're going to take a look at

00:03:12.360 --> 00:03:16.250
to do this is by importing, the reactive package.

00:03:16.250 --> 00:03:19.120
First, as I mentioned before, view is modular,

00:03:19.120 --> 00:03:22.945
so we need to import this from the view library.

00:03:22.945 --> 00:03:25.370
This is called reactive.

00:03:26.520 --> 00:03:32.095
We can then use this reactive package as a wrapper for all of our data.

00:03:32.095 --> 00:03:37.470
We'll cutout this object out in reactive.

00:03:37.470 --> 00:03:43.250
Then inside we can paste in our object, refresh browser.

00:03:44.510 --> 00:03:48.969
Now after three seconds, our user interface is now updated

00:03:48.969 --> 00:03:53.160
with this new data by using this reactive wrapper.

00:03:53.160 --> 00:03:56.770
Any data which is inside which changes or is updated,

00:03:56.770 --> 00:04:01.405
it will then notify any other parts of the application which relies on this.

00:04:01.405 --> 00:04:03.680
In our case, the Occupation.

00:04:03.680 --> 00:04:07.700
This happens because view will take a reactive copy of

00:04:07.700 --> 00:04:12.100
this original object and then it wrap it in A proxy.

00:04:12.100 --> 00:04:15.620
Reactive is also used behind the scenes to convert

00:04:15.620 --> 00:04:19.870
objects when we use the data properties with the options API.

00:04:19.870 --> 00:04:23.795
If you wanted to perform a check to see if an object was reactive.

00:04:23.795 --> 00:04:26.900
We also have access to Is reactive to.

00:04:26.900 --> 00:04:30.410
This can also be imported from the view library.

00:04:30.410 --> 00:04:35.765
Is reactive can now be used to check if an object is a regular, JavaScript object,

00:04:35.765 --> 00:04:38.105
or if it's a reactive proxy.

00:04:38.105 --> 00:04:44.030
You see this one creates a console log, access is reactive.

00:04:44.030 --> 00:04:47.300
Then we can pass in our data,

00:04:47.300 --> 00:04:53.415
open up the developer tools into the console.

00:04:53.415 --> 00:04:55.245
We can see this is true.

00:04:55.245 --> 00:04:57.170
However, though inside of our setup,

00:04:57.170 --> 00:05:02.005
we also have access to our cards which use a regular object.

00:05:02.005 --> 00:05:07.120
Instead, if we place in all cards, refresh,

00:05:07.540 --> 00:05:11.000
we now see the result of false since all cards is

00:05:11.000 --> 00:05:15.505
a regular JavaScript object rather than a reactive proxy.

00:05:15.505 --> 00:05:17.835
This is how we can use reactive.

00:05:17.835 --> 00:05:21.875
View also provides a never reactivity feature called Raf,

00:05:21.875 --> 00:05:24.570
which we'll now take a look at.
