WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.890
We now have a form but this form is stuck open until we refresh

00:00:04.890 --> 00:00:09.480
the page since we no longer have access to this toggle button behind this modal.

00:00:09.480 --> 00:00:13.290
The fix this, we're going to add a little cross in the top corner of

00:00:13.290 --> 00:00:17.415
our modal which we use to click on to close this down.

00:00:17.415 --> 00:00:19.140
We're going to do this inside of

00:00:19.140 --> 00:00:23.755
our AddUpdateForm just inside of this opening form element.

00:00:23.755 --> 00:00:26.010
So let's add a span,

00:00:26.010 --> 00:00:32.565
this will have a class of close along with a HTML entity which is the ampersand,

00:00:32.565 --> 00:00:37.890
a hash 10060, and a semicolon.

00:00:37.890 --> 00:00:43.770
This is going to give us a red cross which we can now go down and add some styling to.

00:00:43.770 --> 00:00:48.585
The first thing to do is this form which is the direct wrapper,

00:00:48.585 --> 00:00:50.270
we're going to set this to make use of

00:00:50.270 --> 00:00:54.520
the flex box so we can align this over in the top right,

00:00:54.520 --> 00:00:56.550
down to the form section,

00:00:56.550 --> 00:01:01.960
we can set the display type to be flex,

00:01:02.090 --> 00:01:05.570
and then so all of the elements are stacked on top of each other,

00:01:05.570 --> 00:01:09.780
we can change the flex direction, the column.

00:01:10.010 --> 00:01:13.230
Since the wrapper is now using the flex box,

00:01:13.230 --> 00:01:17.525
we can now control this close button with align-self.

00:01:17.525 --> 00:01:20.195
Let's do this at the very top.

00:01:20.195 --> 00:01:23.090
This button have the class of close.

00:01:23.090 --> 00:01:26.795
Align-self will push this individual item

00:01:26.795 --> 00:01:31.225
right over to the far right if we set the value to be flex-end.

00:01:31.225 --> 00:01:33.390
So the user knows this is clickable,

00:01:33.390 --> 00:01:37.010
we can also set the cursor to be a pointer.

00:01:37.010 --> 00:01:40.475
This now leaves our cross exactly where we want it to be.

00:01:40.475 --> 00:01:42.920
This cross is now in place but this also

00:01:42.920 --> 00:01:45.545
now leaves us with something which we need to solve.

00:01:45.545 --> 00:01:49.894
This cross is placed inside of our AddUpdateForm component,

00:01:49.894 --> 00:01:54.865
but this is toggled from our parent, App.vue component.

00:01:54.865 --> 00:01:57.990
At the moment, our app is structured just like this.

00:01:57.990 --> 00:01:59.565
We have the App.vue,

00:01:59.565 --> 00:02:01.690
which has our AddUpdateForm,

00:02:01.690 --> 00:02:05.200
and also the event components nested inside.

00:02:05.200 --> 00:02:08.460
From this App.vue, we'll have a button which

00:02:08.460 --> 00:02:12.445
toggles this form to show and hide it as our pop-up modal.

00:02:12.445 --> 00:02:16.890
This works because showForm is inside of the App.vue too

00:02:16.890 --> 00:02:21.870
and this is used to show and hide the form component.

00:02:21.870 --> 00:02:25.035
But what about this cross we just added?

00:02:25.035 --> 00:02:28.020
This is placed inside of the component,

00:02:28.020 --> 00:02:33.855
but the showForm dates property we need to change is in the parent, App.vue.

00:02:33.855 --> 00:02:40.355
We already know how to pass data down from a parent component to a child by using props.

00:02:40.355 --> 00:02:42.985
What about the other way round?

00:02:42.985 --> 00:02:46.755
We want to change the showForm data to be false,

00:02:46.755 --> 00:02:50.245
but this time, from the AddUpdateForm component.

00:02:50.245 --> 00:02:56.675
To do this, we can emit a custom event from the child up to the parent's component.

00:02:56.675 --> 00:02:58.740
Back over in the App.vue,

00:02:58.740 --> 00:03:03.645
knew know how to use a regular event such as a keep or a click event.

00:03:03.645 --> 00:03:07.285
We uses click to toggle the form using v-if.

00:03:07.285 --> 00:03:09.140
Alongside these regular elements,

00:03:09.140 --> 00:03:12.305
we can also create our own custom event.

00:03:12.305 --> 00:03:16.385
Just like here inside of our AddUpdateForm component,

00:03:16.385 --> 00:03:17.960
instead of a click,

00:03:17.960 --> 00:03:21.910
we listen for our own events called close-form.

00:03:21.910 --> 00:03:28.205
For these event names, it is recommended to use lowercase words separated by a dash.

00:03:28.205 --> 00:03:31.490
Since this event is passed to the child component,

00:03:31.490 --> 00:03:34.420
it's inside of this child where we're going to call it.

00:03:34.420 --> 00:03:39.000
First, we add the list of events to an emits array.

00:03:39.000 --> 00:03:41.100
This is new in Vue 3,

00:03:41.100 --> 00:03:43.990
we did not declare them previously in version 2.

00:03:43.990 --> 00:03:47.445
The [inaudible] is like this especially next to our props,

00:03:47.445 --> 00:03:51.440
allows us to easily see what data is coming into the component,

00:03:51.440 --> 00:03:55.090
and then what data is emitted back out to the component.

00:03:55.090 --> 00:03:59.850
Inside the template, we're arranging our red cross using the span.

00:03:59.850 --> 00:04:03.410
When we click on it, we trigger our custom event using

00:04:03.410 --> 00:04:07.625
dollar symbol emit which will set ShowForm to be false.

00:04:07.625 --> 00:04:12.540
Therefore, hiding our form back inside of our application.

00:04:12.540 --> 00:04:14.940
This is exactly what we're going to do now.

00:04:14.940 --> 00:04:17.490
Starting in the App.vue,

00:04:17.490 --> 00:04:22.235
we'll go up to the template section where we can setup our custom event,

00:04:22.235 --> 00:04:25.355
pass this down to our AddUpdateForm.

00:04:25.355 --> 00:04:29.000
As we've just seen, this event is going to be called close-form.

00:04:29.000 --> 00:04:30.500
When this is triggered,

00:04:30.500 --> 00:04:35.120
we're going to set showForm to be equal to false.

00:04:35.120 --> 00:04:39.660
This is being passed down to AddUpdateForm so we're going to head into here,

00:04:39.660 --> 00:04:42.610
and then we can add this to an emit array.

00:04:42.610 --> 00:04:47.910
We don't currently have a script section so we can create that now,

00:04:47.910 --> 00:04:51.015
making sure also to add the export default,

00:04:51.015 --> 00:04:54.790
and we pass this inside of an array.

00:04:57.050 --> 00:05:02.830
It should now give us access to our custom event loop inside of the template.

00:05:02.830 --> 00:05:05.780
The span which we just added for our cross will

00:05:05.780 --> 00:05:08.930
then run some code when the user clicks on this button,

00:05:08.930 --> 00:05:12.665
and the code which you want to run is this emit event.

00:05:12.665 --> 00:05:17.650
We can access this with this dot dollar symbol emit,

00:05:17.650 --> 00:05:22.175
then pass in the name of our event which is close-form.

00:05:22.175 --> 00:05:28.135
This dollar symbol prefix means it's one Vue JS's built-in methods of properties,

00:05:28.135 --> 00:05:30.925
and we will see more of these during the course.

00:05:30.925 --> 00:05:35.284
Save this file and over to the browser, that's refresh,

00:05:35.284 --> 00:05:38.750
open up our form, click on the cross,

00:05:38.750 --> 00:05:43.320
and this will now trigger our custom event in the parent component.
