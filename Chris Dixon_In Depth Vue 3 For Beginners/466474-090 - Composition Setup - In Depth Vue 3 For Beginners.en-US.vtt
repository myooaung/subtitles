WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.625
In the previous slides, we looked at how

00:00:02.625 --> 00:00:06.795
our composition code goes inside of a setup function.

00:00:06.795 --> 00:00:10.560
Let's now set this up in our AppHome.vue,

00:00:10.560 --> 00:00:15.960
and here, we need a script with our export default.

00:00:15.960 --> 00:00:18.675
Then we'll pass it in our setup function,

00:00:18.675 --> 00:00:20.880
which looks just like this.

00:00:20.880 --> 00:00:24.120
Setup is executed before the component is created.

00:00:24.120 --> 00:00:30.485
It's inside here where we'll write our composition code in a more JavaScript like syntax.

00:00:30.485 --> 00:00:33.070
As we've just seen in the previous video,

00:00:33.070 --> 00:00:36.350
this homepage will be the entry point for our user.

00:00:36.350 --> 00:00:41.465
We'll use it to display a list of all of the available categories for our cards,

00:00:41.465 --> 00:00:44.335
the child's birthday and anniversary.

00:00:44.335 --> 00:00:47.850
In the supplied data.js file,

00:00:47.850 --> 00:00:51.480
let's open this up, just here,

00:00:51.480 --> 00:00:55.130
each one of our cards has a category section which includes an array.

00:00:55.130 --> 00:01:00.290
It's this data which we're going to loop through for each card to construct this page.

00:01:00.290 --> 00:01:03.710
So we will need to loop through all of our cards and then we'll create

00:01:03.710 --> 00:01:08.000
a second loop to loop through all of the categories and then save these.

00:01:08.000 --> 00:01:11.335
First of all, let's import this data which we need in this component.

00:01:11.335 --> 00:01:13.605
Just below the script,

00:01:13.605 --> 00:01:17.265
we'll import the cards array.

00:01:17.265 --> 00:01:22.195
The file path for this was../data.

00:01:22.195 --> 00:01:26.120
We would then normally set the cards to be a data property.

00:01:26.120 --> 00:01:31.580
But with composition, we can create a regular JavaScript constants or variable.

00:01:31.580 --> 00:01:35.195
So let's set up a constant called allCards.

00:01:35.195 --> 00:01:38.300
We can initially set up an empty array.

00:01:38.300 --> 00:01:41.270
Also, we need a second variable which

00:01:41.270 --> 00:01:43.940
we're going to to use to store all of the categories we find.

00:01:43.940 --> 00:01:46.420
We will loop through all of our cards.

00:01:46.420 --> 00:01:48.255
So this is going to be pushed too.

00:01:48.255 --> 00:01:52.540
We'll create a let and we'll call this uniqueCategories.

00:01:53.800 --> 00:01:58.100
We could set this up to be an initial value of an empty array,

00:01:58.100 --> 00:02:02.605
or even better, we can replace this with a new set.

00:02:02.605 --> 00:02:05.595
A set is a collection of values,

00:02:05.595 --> 00:02:08.690
and just like an array, we can loop over them too.

00:02:08.690 --> 00:02:12.755
But the difference is it will only accept unique values.

00:02:12.755 --> 00:02:16.445
This is ideals in some of our cards have the same category,

00:02:16.445 --> 00:02:18.935
so we don't want this data duplicated.

00:02:18.935 --> 00:02:24.910
Also, a set object is regular JavaScript and nothing related to vue JS.

00:02:24.910 --> 00:02:30.030
Next, we can create a function called getUniqueCategories.

00:02:32.090 --> 00:02:35.025
More functions in composition,

00:02:35.025 --> 00:02:36.275
they can also be wrote in

00:02:36.275 --> 00:02:41.325
any other valid JavaScript type too such as arrow functions, if you prefer.

00:02:41.325 --> 00:02:44.030
As this function sounds, this is going to be responsible

00:02:44.030 --> 00:02:48.020
for assigning all of our categories to this variable.

00:02:48.020 --> 00:02:50.920
So to begin, we'll grab all cards.

00:02:50.920 --> 00:02:56.105
In fact, we just need to assign this to cards rather than our array,

00:02:56.105 --> 00:02:59.330
and then we can loop over these with forEach as

00:02:59.330 --> 00:03:04.135
an a function and each item will store this in the variable called card.

00:03:04.135 --> 00:03:08.615
So remember, each card inside of our data file had these categories property.

00:03:08.615 --> 00:03:13.505
So we'll create a second loop where we select our card and then the categories,

00:03:13.505 --> 00:03:16.589
and then a second loop with forEach,

00:03:16.589 --> 00:03:19.370
which takes in the category.

00:03:21.110 --> 00:03:25.865
Then we want to push this category to uniqueCategories.

00:03:25.865 --> 00:03:28.630
Now, if uniqueCategories was an array,

00:03:28.630 --> 00:03:30.970
we could use the JavaScript push method.

00:03:30.970 --> 00:03:33.625
But since we set this up as a set,

00:03:33.625 --> 00:03:38.390
we need to use the add method passing in the category.

00:03:38.390 --> 00:03:40.270
Then outside of our function,

00:03:40.270 --> 00:03:43.700
we can log this console to test this out.

00:03:45.890 --> 00:03:48.670
This now leaves us with our function, but now,

00:03:48.670 --> 00:03:52.360
we actually need to call this the code to be executed.

00:03:52.360 --> 00:03:54.445
So to do this, we can add this to wait

00:03:54.445 --> 00:04:01.300
onMounted lifecycle hook where we're passing it the function name.

00:04:01.300 --> 00:04:03.570
When using the lifecycle hook,

00:04:03.570 --> 00:04:07.535
so you have the same name as we've previously used such as mounted,

00:04:07.535 --> 00:04:10.855
but for composition, we add the on prefix.

00:04:10.855 --> 00:04:13.985
Also, when using any of these features like this two,

00:04:13.985 --> 00:04:18.035
we now need to import them individually from the vue library.

00:04:18.035 --> 00:04:27.300
So we can import, the named import the onMounted lifecycle hook from the vue library.

00:04:27.400 --> 00:04:33.745
Let's give this a try and open up the browser developer tools into the console.

00:04:33.745 --> 00:04:36.540
Here, we see our set with 11 values.

00:04:36.540 --> 00:04:41.720
Let's open this up, and we'll see 11 unique values. So this is all good.

00:04:41.720 --> 00:04:42.860
We now have what we need,

00:04:42.860 --> 00:04:46.835
but it would also be useful to have a category for all cards too,

00:04:46.835 --> 00:04:49.340
and we can also add this into.

00:04:49.340 --> 00:04:51.800
So at the top of our function,

00:04:51.800 --> 00:04:55.715
our loop will also access our uniqueCategories,

00:04:55.715 --> 00:04:57.545
call the add method,

00:04:57.545 --> 00:05:00.220
then we'll add the all category,

00:05:00.220 --> 00:05:04.070
refresh, we now have 12 values,

00:05:04.070 --> 00:05:06.830
which also includes the all category too.

00:05:06.830 --> 00:05:10.220
Finally, we can return back from set up any values

00:05:10.220 --> 00:05:14.020
which we now want to make available to use in our template.

00:05:14.020 --> 00:05:16.330
This will be a object,

00:05:16.330 --> 00:05:21.340
and the only thing we need to return to our template is uniqueCategories.

00:05:21.340 --> 00:05:25.020
So add this in, move to our template,

00:05:25.020 --> 00:05:28.280
we can remove our level 1 heading and instead place in

00:05:28.280 --> 00:05:32.725
an unordered list where we're going to loop through all of these categories.

00:05:32.725 --> 00:05:35.505
So the class of grid wrapper,

00:05:35.505 --> 00:05:38.399
we'll add this soon for our CSS,

00:05:38.399 --> 00:05:43.950
the list item, which will have the class of category item.

00:05:44.990 --> 00:05:49.185
We can also pass in v-for to loop through all of our items.

00:05:49.185 --> 00:05:57.700
So we're going to loop through category in categories as in a key.

00:05:57.700 --> 00:06:01.225
Since we use set, each one of our categories is unique.

00:06:01.225 --> 00:06:03.850
So we can also use this as a key.

00:06:03.850 --> 00:06:05.815
In between the list item,

00:06:05.815 --> 00:06:10.490
we can create this into a link by passing in the router link.

00:06:12.500 --> 00:06:15.810
This takes in the to prompt and passing

00:06:15.810 --> 00:06:20.210
all the object where the name of the link is going to be category,

00:06:20.610 --> 00:06:24.130
which we set up over in our routers index file,

00:06:24.130 --> 00:06:26.500
we'll take look, this is just here.

00:06:26.500 --> 00:06:30.830
In fact, we need to use a uppercase C for this name.

00:06:31.190 --> 00:06:35.060
Also, pass in our parameters object to where

00:06:35.060 --> 00:06:39.655
the category is going to be equal to or category from our v-for loop.

00:06:39.655 --> 00:06:42.940
So this will now link to forward slash category and

00:06:42.940 --> 00:06:46.225
then forward slash the name of our unique category too.

00:06:46.225 --> 00:06:50.335
This link also needs some text in between the router link component.

00:06:50.335 --> 00:06:54.590
So passing our category in between the double curly braces.

00:06:55.200 --> 00:06:59.305
In fact, this just wants to be unique categories.

00:06:59.305 --> 00:07:02.990
It's much the name which we returned back from composition.

00:07:02.990 --> 00:07:05.875
Since we're now passing parameters to this route,

00:07:05.875 --> 00:07:08.650
we also need to go over the routers index file and

00:07:08.650 --> 00:07:12.020
also add a dynamic segment called category.

00:07:12.020 --> 00:07:14.740
So now, if we refresh the browser,

00:07:14.740 --> 00:07:17.350
we don't see anything on the screen.

00:07:17.350 --> 00:07:21.110
Now, this seems strange because we know we have the categories because we logged

00:07:21.110 --> 00:07:26.135
them to the console just here and we've seen 12 unique values.

00:07:26.135 --> 00:07:30.785
Well, the reason this is happening is because of the onMounted hook.

00:07:30.785 --> 00:07:34.010
At the start of this video, we mentioned that the setup is

00:07:34.010 --> 00:07:37.279
ran before the component is created.

00:07:37.279 --> 00:07:40.685
But onMounted is called after this.

00:07:40.685 --> 00:07:47.255
This means we are initially passing uniqueCategories just here as a empty set.

00:07:47.255 --> 00:07:51.260
Initially, this is the value which is being returned back to our template.

00:07:51.260 --> 00:07:54.245
So we are looping through an empty value.

00:07:54.245 --> 00:07:56.495
This basically means we need to call

00:07:56.495 --> 00:08:01.235
our getUniqueCategories function before this mounted phase.

00:08:01.235 --> 00:08:03.410
One option is to remove

00:08:03.410 --> 00:08:08.690
the onMounted hook and to call this just like a regular JavaScript function.

00:08:08.690 --> 00:08:11.220
Since we're no longer using onMounted,

00:08:11.220 --> 00:08:14.345
we can also comment this out and also the browser,

00:08:14.345 --> 00:08:17.770
refresh this, we now see our uniqueCategories.

00:08:17.770 --> 00:08:19.590
If we click on any of these,

00:08:19.590 --> 00:08:21.200
we see our category component,

00:08:21.200 --> 00:08:24.335
and then we take it to the correct URL.

00:08:24.335 --> 00:08:28.670
Or alternatively, if we didn't need to call this function at any time,

00:08:28.670 --> 00:08:34.680
we can also move the function wrapper and just leave the code to run inside of setup.

00:08:34.780 --> 00:08:38.164
Save this, and over to our homepage,

00:08:38.164 --> 00:08:41.000
this also works exactly the same too.

00:08:41.000 --> 00:08:45.680
The ability to add in code like this to run on setup means with composition,

00:08:45.680 --> 00:08:50.960
we no longer need the before create and also the created lifecycle hooks.

00:08:50.960 --> 00:08:55.650
Both of these have now been removed in favor of this approach.
