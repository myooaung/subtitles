WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.200 --> 00:00:06.360
The free reactivity is created by using an ES6 feature called proxies.

00:00:06.360 --> 00:00:11.400
Vue 2 use an ES5 feature called Object.defineProperty,

00:00:11.400 --> 00:00:15.195
which created the getters and setters to update our data.

00:00:15.195 --> 00:00:18.980
These handsome caveats, one of these was being

00:00:18.980 --> 00:00:22.995
of a new data property was added after the application loaded,

00:00:22.995 --> 00:00:26.100
it didn't automatically become reactive.

00:00:26.100 --> 00:00:29.175
We could change existing data properties,

00:00:29.175 --> 00:00:32.430
but not add new ones dynamically.

00:00:32.430 --> 00:00:35.190
This is being resolved with proxies.

00:00:35.190 --> 00:00:39.195
A proxy is like a wrapper for an object.

00:00:39.195 --> 00:00:45.185
This wrapper allows us to intercept it and make changes before performing an update.

00:00:45.185 --> 00:00:47.630
Proxies can be a complex subject,

00:00:47.630 --> 00:00:52.015
but I'm going to give you a quick overview so you have some basic understanding.

00:00:52.015 --> 00:00:54.030
In this App.vue components,

00:00:54.030 --> 00:00:57.140
let's add a simple example to our script.

00:00:57.140 --> 00:01:00.065
To intercept an object and make some changes,

00:01:00.065 --> 00:01:02.330
we first need an object to work with.

00:01:02.330 --> 00:01:04.505
Outside of our export default,

00:01:04.505 --> 00:01:08.025
I want to create a constant called state,

00:01:08.025 --> 00:01:10.810
and set this up to be an object,

00:01:10.810 --> 00:01:15.930
passing a user property and also a occupation.

00:01:17.780 --> 00:01:21.775
Then we can set up a proxy with new Proxy,

00:01:21.775 --> 00:01:28.685
capital P, which will take in the targets and the handler object.

00:01:28.685 --> 00:01:32.010
This may constant called proxy.

00:01:33.020 --> 00:01:37.700
This target we see here is the original object we want to proxy.

00:01:37.700 --> 00:01:39.740
We can name this to be state,

00:01:39.740 --> 00:01:41.780
just like our object just above,

00:01:41.780 --> 00:01:45.520
this is the target which we want to intercept,

00:01:45.520 --> 00:01:48.530
then a handler which is an object to set-up

00:01:48.530 --> 00:01:51.395
or we want to do to this original target object.

00:01:51.395 --> 00:01:54.200
Let's also set this up too,

00:01:54.200 --> 00:02:00.340
cons handler, and so this would be an object.

00:02:00.340 --> 00:02:03.840
After this creates a console log,

00:02:03.910 --> 00:02:08.010
I'm again, going to output the contents while proxy.

00:02:09.410 --> 00:02:14.880
Remember, that's our proxy point to the original object which you pass in just here.

00:02:14.880 --> 00:02:16.375
This is our state.

00:02:16.375 --> 00:02:19.060
This now gives us access to all of these properties such

00:02:19.060 --> 00:02:22.655
as the user and also the occupation.

00:02:22.655 --> 00:02:26.160
First, let's try the user, go with the browser,

00:02:26.160 --> 00:02:31.005
we can go into the console, open this up.

00:02:31.005 --> 00:02:33.525
Now, we see the username of Chris,

00:02:33.525 --> 00:02:38.175
the occupation. There we go.

00:02:38.175 --> 00:02:42.895
As you may expect here, we see the original user on the original occupation.

00:02:42.895 --> 00:02:47.990
Since this handler is not setup to create any modifications just yet,

00:02:47.990 --> 00:02:51.595
its handler does have a number of functions which we can use.

00:02:51.595 --> 00:02:53.990
These are sometimes called props.

00:02:53.990 --> 00:02:56.580
One of these functions is get.

00:02:56.580 --> 00:03:00.055
This is used to get one of our property values.

00:03:00.055 --> 00:03:02.305
Pass in the targets and the prop,

00:03:02.305 --> 00:03:05.710
and then we can do some console logs to see exactly what data we

00:03:05.710 --> 00:03:10.230
have for each one of these. Go for the target.

00:03:10.230 --> 00:03:13.720
Then this one is for the prop.

00:03:13.830 --> 00:03:17.260
Save this and refresh the console.

00:03:17.260 --> 00:03:18.880
First of all, we see the targets,

00:03:18.880 --> 00:03:22.945
and if we open this up, we see the user and also the occupation.

00:03:22.945 --> 00:03:26.150
Since this target is the original object,

00:03:26.150 --> 00:03:28.125
after this, we're going to see the prop,

00:03:28.125 --> 00:03:30.000
which is the occupation,

00:03:30.000 --> 00:03:33.140
and this prop is the individual property which we are selecting,

00:03:33.140 --> 00:03:35.450
in our case, we are selecting the occupation.

00:03:35.450 --> 00:03:39.145
This will point to all occupation inside the console.

00:03:39.145 --> 00:03:42.755
The target is the overall state object.

00:03:42.755 --> 00:03:47.305
Then the prop is the individual property from this object.

00:03:47.305 --> 00:03:50.420
Now, we have access to all of this information.

00:03:50.420 --> 00:03:54.095
We can now intercept these values and do whatever we want to them.

00:03:54.095 --> 00:04:00.300
For example, we could return the original prop, which is toUppercase.

00:04:01.280 --> 00:04:03.690
Save and refresh.

00:04:03.690 --> 00:04:06.805
We see the occupation which is now uppercase.

00:04:06.805 --> 00:04:08.750
This is how a proxy works.

00:04:08.750 --> 00:04:11.930
It takes the target or the original object,

00:04:11.930 --> 00:04:15.470
and then it will intercept this object and grab any of the values.

00:04:15.470 --> 00:04:18.340
We can do whatever we want to these values.

00:04:18.340 --> 00:04:22.120
Alongside gets, there is also a handler functions too,

00:04:22.120 --> 00:04:26.570
such a set, which is used to set the new property values.

00:04:26.570 --> 00:04:29.890
Everything we see here is just a regular JavaScript.

00:04:29.890 --> 00:04:33.110
How does all this work with a Vue.js?

00:04:33.110 --> 00:04:39.670
Well, anything we add to a data section is automatically converted to proxies.

00:04:39.670 --> 00:04:43.850
Anything which we add in a data section inside here will be

00:04:43.850 --> 00:04:48.340
automatically converted to be a proxy of the original object.

00:04:48.340 --> 00:04:51.420
Just like this get handler just here,

00:04:51.420 --> 00:04:55.370
Vue will also add its own handler function, that is proxy,

00:04:55.370 --> 00:04:58.730
which has getters and setters to enable Vue.js to

00:04:58.730 --> 00:05:03.110
track and update the data each time there is a change.

00:05:03.110 --> 00:05:05.630
This is how it works for all data properties.

00:05:05.630 --> 00:05:09.785
But what about the regular variables we create with composition?

00:05:09.785 --> 00:05:14.330
Well, for this use case, Vue also provides some rappers to add reactivity.

00:05:14.330 --> 00:05:18.000
We'll take a look at these in the upcoming videos.
