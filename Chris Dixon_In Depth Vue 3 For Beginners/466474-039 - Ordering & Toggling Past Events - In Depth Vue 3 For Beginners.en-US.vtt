WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.755
Inside of our event.vue up at the very top of the template,

00:00:04.755 --> 00:00:08.010
we've been manually switching between events in the past

00:00:08.010 --> 00:00:11.535
and future by changing this-show sat in.

00:00:11.535 --> 00:00:15.885
But now we're going to change this by adding a button, do this follows.

00:00:15.885 --> 00:00:19.020
Along with this, we also going to add a computed property,

00:00:19.020 --> 00:00:22.530
we'll arrange these events into date order to.

00:00:22.530 --> 00:00:27.735
Just before we do this, we can also remove the data from the previous watches video.

00:00:27.735 --> 00:00:30.255
Since we don't need this for our project,

00:00:30.255 --> 00:00:33.945
we don't need the watch section, this can be removed,

00:00:33.945 --> 00:00:36.720
the dark mode set property,

00:00:36.720 --> 00:00:40.865
and also the section from our template which was the button,

00:00:40.865 --> 00:00:43.590
and also the events output.

00:00:45.560 --> 00:00:48.710
So within this app.vue section,

00:00:48.710 --> 00:00:50.870
let's start with the toggle button by adding

00:00:50.870 --> 00:00:56.100
a new data property which is going to be called showPastEvents.

00:00:58.600 --> 00:01:03.655
This is going to be a Boolean value which will be initially set to false,

00:01:03.655 --> 00:01:05.880
and then open the template.

00:01:05.880 --> 00:01:08.689
We can also pass this to our event components.

00:01:08.689 --> 00:01:10.840
Make sure this is also dynamic too,

00:01:10.840 --> 00:01:16.890
so we're going to use the colon for binding the proper name of showPastEvents,

00:01:17.970 --> 00:01:22.670
which will also be equal to the value with the same name.

00:01:22.680 --> 00:01:25.120
Since this data is a property,

00:01:25.120 --> 00:01:30.650
also need to go over to our event.vue and pass this into our props.

00:01:33.290 --> 00:01:36.250
This prop can now also be used up inside of

00:01:36.250 --> 00:01:39.850
our template to show and hide each one of these events,

00:01:39.850 --> 00:01:41.380
and inside of the v-show,

00:01:41.380 --> 00:01:43.780
directly we'll pass in the O operator.

00:01:43.780 --> 00:01:49.190
It also shows event if our showPastEvents prop is equal to true.

00:01:49.190 --> 00:01:54.880
We currently have this set to false so let's toggle this down in the data section.

00:01:55.580 --> 00:01:58.600
If we make this true,

00:01:58.620 --> 00:02:02.125
refresh the browser and now all previous events will

00:02:02.125 --> 00:02:04.850
also display to, it's all in our work.

00:02:04.850 --> 00:02:08.050
So now we need to introduce a button which is going to switch this for

00:02:08.050 --> 00:02:13.000
us inside of the app.vue template and just above our unordered list,

00:02:13.000 --> 00:02:16.015
so this appears at the top of our application.

00:02:16.015 --> 00:02:20.000
Creates a new div with the class of options.

00:02:20.000 --> 00:02:22.570
This will be the wrapper for our button

00:02:22.570 --> 00:02:25.450
alongside some other buttons which we'll add later.

00:02:25.450 --> 00:02:27.610
The button is going to listen out for

00:02:27.610 --> 00:02:33.170
a click event where we are going to toggle the value of showPastEvents.

00:02:37.340 --> 00:02:42.610
This button also needs a name so we can see this in the browser.

00:02:43.970 --> 00:02:48.045
Then over to the browser, we're going to try also our button,

00:02:48.045 --> 00:02:53.095
and this will now toggle between showing and hiding any past events.

00:02:53.095 --> 00:02:56.410
We will come back to this button later and add some styling,

00:02:56.410 --> 00:03:02.170
but now we're going to add a computed property to organize these events into date order.

00:03:02.170 --> 00:03:05.440
We can see here that this one which is today should be at the top,

00:03:05.440 --> 00:03:08.590
we should then see the one day left, 59.

00:03:08.590 --> 00:03:11.465
So these events are not currently in order.

00:03:11.465 --> 00:03:17.540
This app.vue file contains all of our events which are stored in this data property.

00:03:17.540 --> 00:03:20.760
Instead of now looping through these directly, first,

00:03:20.760 --> 00:03:25.060
we're going to setup a computed property which is going to rearrange these

00:03:25.060 --> 00:03:29.740
into the correct order and then return the newly arranged events array.

00:03:29.740 --> 00:03:39.310
For this, we're going to need a computed section with a property called order events.

00:03:40.400 --> 00:03:43.655
What we want to do in this computed section is to

00:03:43.655 --> 00:03:47.075
grab all of our events and rearrange the order.

00:03:47.075 --> 00:03:49.565
As we know from previous videos,

00:03:49.565 --> 00:03:51.620
we cannot directly manipulate

00:03:51.620 --> 00:03:56.255
the state so we can't change the value inside of this data property.

00:03:56.255 --> 00:03:58.970
So instead, what we're going to do is to create

00:03:58.970 --> 00:04:03.110
a local variable which is going to be the copy of this events.

00:04:03.110 --> 00:04:06.960
So a constant called eventsToOrder.

00:04:07.480 --> 00:04:12.385
The set is equal to be a copy using this.events.

00:04:12.385 --> 00:04:15.470
Computed properties need to return something,

00:04:15.470 --> 00:04:17.405
a [inaudible] with a value of

00:04:17.405 --> 00:04:22.460
this eventsToOrder after we call the JavaScript sort method.

00:04:22.460 --> 00:04:26.675
If our events array didn't include any objects and was a lot simpler,

00:04:26.675 --> 00:04:30.620
and it was made up of things such as strings of text or even numbers,

00:04:30.620 --> 00:04:34.290
this would be all we'll need to do, since by default,

00:04:34.290 --> 00:04:37.760
the values when we use the sort method are converted to

00:04:37.760 --> 00:04:42.380
strings and will be sorted alphabetically in ascending order.

00:04:42.380 --> 00:04:45.230
Our case is a little bit more complex though.

00:04:45.230 --> 00:04:51.190
We have an array of objects and we need to sort them by the date property.

00:04:51.190 --> 00:04:57.210
To do this, we can pass into the sort method a optional compare function.

00:04:57.210 --> 00:05:02.544
This is going to compare any two elements in our array at anytime.

00:05:02.544 --> 00:05:05.790
The names we give to these two elements are completely up to us,

00:05:05.790 --> 00:05:08.590
and we can pass these in as an arrow function.

00:05:08.590 --> 00:05:12.640
So passing any variable names for our two elements to compare.

00:05:12.640 --> 00:05:15.415
I want to simply call this a and b.

00:05:15.415 --> 00:05:18.490
This is now going to loop through all of our objects

00:05:18.490 --> 00:05:22.360
inside of this array and then compare it to other time.

00:05:22.360 --> 00:05:25.060
I will have access to these two objects which are being

00:05:25.060 --> 00:05:27.970
compared with these a and b variables,

00:05:27.970 --> 00:05:30.865
meaning we can compare the dates from each one.

00:05:30.865 --> 00:05:33.835
First of all, we're going to check if the day property on object

00:05:33.835 --> 00:05:37.415
a is greater than the day property on object b.

00:05:37.415 --> 00:05:40.955
If this is true, we'll use the JavaScript ternary operator,

00:05:40.955 --> 00:05:43.270
which will return a value of one.

00:05:43.270 --> 00:05:47.405
If this is false, we'll then return the value of negative one.

00:05:47.405 --> 00:05:50.780
It's positive or negative number is going to rearrange

00:05:50.780 --> 00:05:54.140
our objects by setting the index position.

00:05:54.140 --> 00:05:56.030
So when comparing these dates,

00:05:56.030 --> 00:05:57.470
if one of them is higher,

00:05:57.470 --> 00:06:00.875
it will then be pushed up the index position with a positive number.

00:06:00.875 --> 00:06:04.285
If not, it'll be pushed down with the negative number,

00:06:04.285 --> 00:06:08.810
and then once it has finished sorting by comparing all of the items in our array,

00:06:08.810 --> 00:06:12.755
we'll then get back to the original array in the new order,

00:06:12.755 --> 00:06:14.900
which we can then use in our template to loop

00:06:14.900 --> 00:06:18.010
through in the place of our original events.

00:06:18.010 --> 00:06:21.200
Now we're going to grab order events up to

00:06:21.200 --> 00:06:26.830
our unordered list and then loop through this in place of our data property,

00:06:26.830 --> 00:06:28.460
save this, and instantly,

00:06:28.460 --> 00:06:31.640
our events and now updated in the correct order.

00:06:31.640 --> 00:06:34.880
Up at the very top, we have any previous events which are passed,

00:06:34.880 --> 00:06:36.260
we have today's event,

00:06:36.260 --> 00:06:40.390
and then these are now ordered from the closest to the furthest away,

00:06:40.390 --> 00:06:44.620
and they should also still work if we hide any previous events.

00:06:44.620 --> 00:06:48.485
Also, I know the benefits of how we miss in a computed property.

00:06:48.485 --> 00:06:52.145
Later on, if the user edits the date on any of these events,

00:06:52.145 --> 00:06:55.560
this will also recalculate the order to.
