WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.740 --> 00:00:04.895
We can see from all of these objects over on rights here,

00:00:04.895 --> 00:00:10.275
that all of these updated sections are stored inside of the text input components.

00:00:10.275 --> 00:00:16.034
We can now use this data to update the card with all of this new updated information.

00:00:16.034 --> 00:00:18.480
A good place to do this would be over,

00:00:18.480 --> 00:00:20.790
inside of the use current card.

00:00:20.790 --> 00:00:22.650
We will have our selected card,

00:00:22.650 --> 00:00:25.155
which is our main card object.

00:00:25.155 --> 00:00:29.130
What we're going to do is create a function to select this card,

00:00:29.130 --> 00:00:32.280
and then we'll get the particular page which we're working on,

00:00:32.280 --> 00:00:36.300
and then update whichever section this data is sent from.

00:00:36.300 --> 00:00:40.060
This function is going to be called updateCard.

00:00:43.470 --> 00:00:46.090
Since this card is a raft,

00:00:46.090 --> 00:00:50.120
we grabbed the selected card, access the value,

00:00:50.120 --> 00:00:52.155
go into the pages array,

00:00:52.155 --> 00:00:54.970
and the item of which you want to find or the page which you want to

00:00:54.970 --> 00:00:58.895
find is available from this function just above.

00:00:58.895 --> 00:01:03.669
Remember, this is going to get the selected index number from the routers parameters.

00:01:03.669 --> 00:01:06.950
We can call this function inside here.

00:01:07.260 --> 00:01:11.600
After this, we want to update a particular section.

00:01:11.600 --> 00:01:16.090
For this page, it will be any one of these three sections.

00:01:16.090 --> 00:01:20.510
But how do we know which one we want to grab? Well, currently we don't.

00:01:20.510 --> 00:01:23.845
We don't have any way of accessing this information,

00:01:23.845 --> 00:01:27.555
so we're going to have to parse this when we call the function.

00:01:27.555 --> 00:01:31.280
This means this function will receive some data.

00:01:31.280 --> 00:01:33.740
I'm to call this the sectionIndex.

00:01:33.740 --> 00:01:38.540
[inaudible] Along with this,

00:01:38.540 --> 00:01:41.480
we also need to parse in the new data to this function too,

00:01:41.480 --> 00:01:44.120
which will be used to update the card.

00:01:44.120 --> 00:01:48.575
We'll set this particular section to be equal to this data.

00:01:48.575 --> 00:01:50.810
This is all we need to do for this function.

00:01:50.810 --> 00:01:52.490
Now we can return this,

00:01:52.490 --> 00:01:55.025
and then we can call it with our sectionIndex,

00:01:55.025 --> 00:01:57.475
and also the updated data.

00:01:57.475 --> 00:02:01.300
Place the updatedCard into our return object,

00:02:01.300 --> 00:02:03.950
and the components we need to call this in,

00:02:03.950 --> 00:02:07.060
is inside of the text input.

00:02:07.060 --> 00:02:11.375
As ever, we need to import our composable,

00:02:11.375 --> 00:02:15.260
which is called useCurrentCard and the file path,

00:02:15.260 --> 00:02:18.785
use the at symbol to go into the source,

00:02:18.785 --> 00:02:23.760
the composable folder, and then into useCurrentCard.

00:02:24.940 --> 00:02:30.005
Down to our setup, extract this into a constant,

00:02:30.005 --> 00:02:31.085
and we need to extract

00:02:31.085 --> 00:02:37.875
the updateCard function from the function which is called useCurrentCard.

00:02:37.875 --> 00:02:41.600
We've got our function now in place in the current components.

00:02:41.600 --> 00:02:43.490
But if we think about this,

00:02:43.490 --> 00:02:46.880
when do we now want to call this update function?

00:02:46.880 --> 00:02:49.165
How do we actually want to run this?

00:02:49.165 --> 00:02:52.805
We could go over to the card and when this component loads,

00:02:52.805 --> 00:02:55.940
we could run this function after a certain time delay.

00:02:55.940 --> 00:02:59.845
We could run the function when the menu is closed and so many other options.

00:02:59.845 --> 00:03:04.430
But a sensible one may be to watch out for this current section.

00:03:04.430 --> 00:03:07.490
Remember, all of our inputs from above are

00:03:07.490 --> 00:03:11.110
bound to this current section by using V-model.

00:03:11.110 --> 00:03:13.505
Anytime one of our inputs change,

00:03:13.505 --> 00:03:16.430
the current section data will change too.

00:03:16.430 --> 00:03:21.140
Therefore, a sensible option may be to watch out for changes to this current section,

00:03:21.140 --> 00:03:23.600
and then it called this update function.

00:03:23.600 --> 00:03:27.545
This will need to import either watch or watch effect.

00:03:27.545 --> 00:03:29.270
I want to use watch,

00:03:29.270 --> 00:03:31.430
since watch effect will run immediately,

00:03:31.430 --> 00:03:33.490
and we don't really need that.

00:03:33.490 --> 00:03:36.840
Into our import, after the ref,

00:03:36.840 --> 00:03:41.260
import our watcher, and then we call this inside of the setup.

00:03:41.270 --> 00:03:44.630
Then we parse in two arguments into this watcher.

00:03:44.630 --> 00:03:49.145
The first one is the actual piece of data we want to watch, and in our case,

00:03:49.145 --> 00:03:51.420
it's the current section,

00:03:51.920 --> 00:03:54.270
separated by a comma.

00:03:54.270 --> 00:04:00.460
We then want to call our updateCard function when any of this data changes.

00:04:00.500 --> 00:04:04.690
Parsing this function, and we'll also call this too.

00:04:04.690 --> 00:04:09.005
Remember when we set up this updateCard function over in our composable,

00:04:09.005 --> 00:04:11.900
it also needs to receive two pieces of data,

00:04:11.900 --> 00:04:17.125
the section index and also the new section to update.

00:04:17.125 --> 00:04:21.845
Currently, we don't have this section index just yet, so we'll come back to this.

00:04:21.845 --> 00:04:26.885
But we do have the updated data stored inside of our current section.

00:04:26.885 --> 00:04:31.985
We also need to access the value since this is stored inside of a ref.

00:04:31.985 --> 00:04:37.960
This just leaves us with the task of finding out the current section index.

00:04:37.960 --> 00:04:42.260
This current file of the text input doesn't have the index number,

00:04:42.260 --> 00:04:45.650
since all we're doing is parsing at this section as props.

00:04:45.650 --> 00:04:49.595
To get the actual index number for this particular section,

00:04:49.595 --> 00:04:51.830
we need to go up one level.

00:04:51.830 --> 00:04:55.805
This text input is called from our card, edit component.

00:04:55.805 --> 00:05:00.200
So into this file as our text input component.

00:05:00.200 --> 00:05:02.795
Since we're looping through all of these sections,

00:05:02.795 --> 00:05:06.275
we can also access the index number 2.

00:05:06.275 --> 00:05:08.420
We looked at how to do this early on.

00:05:08.420 --> 00:05:10.685
We write this inside the brackets,

00:05:10.685 --> 00:05:13.925
and we can also access the index number 2.

00:05:13.925 --> 00:05:15.920
This means now we have this index,

00:05:15.920 --> 00:05:20.300
we can also pass this down as props to our text input component.

00:05:20.300 --> 00:05:25.195
Section index is equal to our index.

00:05:25.195 --> 00:05:30.620
Good, now back to the text input and we now have a second prop to add to this,

00:05:30.620 --> 00:05:32.825
which is the section index,

00:05:32.825 --> 00:05:35.395
which is a type of number.

00:05:35.395 --> 00:05:38.490
Now, we can parse this when we call our function.

00:05:38.490 --> 00:05:42.040
In our setup, we have access to all props,

00:05:43.100 --> 00:05:45.825
and then our section index.

00:05:45.825 --> 00:05:48.480
Also, just make sure we're watching the current section of

00:05:48.480 --> 00:05:50.840
value 2 and over to the browser,

00:05:50.840 --> 00:05:53.940
let's see where we are now with our project.

00:05:53.940 --> 00:05:56.295
We're missing the text on the right.

00:05:56.295 --> 00:06:00.870
Now, let's go into the console and see what's going on here.

00:06:00.870 --> 00:06:07.265
We cannot set property zero of undefined and no use current card.

00:06:07.265 --> 00:06:09.890
This is our update card function,

00:06:09.890 --> 00:06:14.790
we seem to have an error just here. Let's see what's going on.

00:06:16.190 --> 00:06:23.930
We access in the selected card the value into the pages, the page index.

00:06:23.930 --> 00:06:29.470
We know this is working because we've used this just above when we get the selected page.

00:06:29.470 --> 00:06:33.795
This all works fine. Then into the sections.

00:06:33.795 --> 00:06:39.375
I think this should just be section with an S on into the data.

00:06:39.375 --> 00:06:44.460
Yeah, we just need an S on the end of our section.

00:06:44.750 --> 00:06:48.705
Hopefully, we see our text once again.

00:06:48.705 --> 00:06:51.345
Good. Now, let's try to edit this text,

00:06:51.345 --> 00:06:53.205
and we see an update.

00:06:53.205 --> 00:06:58.450
Then you see a font style, the alignments.

00:06:58.670 --> 00:07:01.740
Good, this works because when we update the card,

00:07:01.740 --> 00:07:04.430
the card value is also reactive.

00:07:04.430 --> 00:07:08.225
Any changes are then passed back down to the components which need it.

00:07:08.225 --> 00:07:11.485
This is why we see the updates in the card preview.

00:07:11.485 --> 00:07:14.520
But there is two options which won't work just yet.

00:07:14.520 --> 00:07:17.110
This is the bold and italic.

00:07:17.110 --> 00:07:20.000
This is because both of these are checkboxes which are either

00:07:20.000 --> 00:07:23.335
going to be a true or a false value.

00:07:23.335 --> 00:07:29.350
To deal with this, we're going to go over to our text output and create two new styles.

00:07:29.350 --> 00:07:32.750
These classes can be toggled on or off.

00:07:32.750 --> 00:07:34.910
The first one is going to be for bold,

00:07:34.910 --> 00:07:38.360
which is going to set the CSS from wave property for

00:07:38.360 --> 00:07:44.370
bold and then the second one is for italic.

00:07:45.020 --> 00:07:51.510
We'll set the font-style to be equal to italic up to the top.

00:07:51.510 --> 00:07:55.825
All have inside of our template is our P element for our text.

00:07:55.825 --> 00:08:01.400
It's inside here where we'll add the dynamic classes as an object.

00:08:01.400 --> 00:08:05.605
Inside this object, we now have two classes which you want to add.

00:08:05.605 --> 00:08:08.350
These are our two classes which was set up down at the bottom.

00:08:08.350 --> 00:08:10.300
We have bold and we have Italic.

00:08:10.300 --> 00:08:13.210
Now we need a way of toggling these classes on or off,

00:08:13.210 --> 00:08:16.175
depending if these checkboxes are selected.

00:08:16.175 --> 00:08:19.590
The way to do this, we will take a look at our object is we have this

00:08:19.590 --> 00:08:23.115
is italic property and also is bold.

00:08:23.115 --> 00:08:26.845
Both of these are available on our section object.

00:08:26.845 --> 00:08:31.425
The first one is section dot is bold,

00:08:31.425 --> 00:08:35.320
and then section dot is italic.

00:08:36.940 --> 00:08:39.080
This means if this is true,

00:08:39.080 --> 00:08:43.160
our bold class will apply and also the same for Italic too.

00:08:43.160 --> 00:08:47.195
Before we wrap this up, let's say this and try this out in the browser.

00:08:47.195 --> 00:08:49.175
Let's change the text,

00:08:49.175 --> 00:08:51.895
become bold, and this works too.

00:08:51.895 --> 00:08:55.640
Become italic and this will toggle the class on and off.

00:08:55.640 --> 00:08:58.925
We can also see if we go to different text inputs that

00:08:58.925 --> 00:09:02.940
all of these sections are completely independent too.
