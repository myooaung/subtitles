WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.110 --> 00:00:03.660
We already know by now that the composition is not

00:00:03.660 --> 00:00:07.230
intended to completely replace the options API.

00:00:07.230 --> 00:00:10.545
But what if you wanted to use both at the same time?

00:00:10.545 --> 00:00:13.875
Inside of our app home dot view components,

00:00:13.875 --> 00:00:16.035
we have this setup function.

00:00:16.035 --> 00:00:21.540
We can still parse in sections alongside our setup function from the options API.

00:00:21.540 --> 00:00:25.110
Such as if we wanted to access any data,

00:00:25.110 --> 00:00:28.110
just like we've done in previous projects.

00:00:28.110 --> 00:00:32.085
It can be beneficial to use both when transitioning or refactoring

00:00:32.085 --> 00:00:36.530
from the options to the composition as your application grows larger,

00:00:36.530 --> 00:00:42.115
or even gradually moving an application from view 2 up to view 3.

00:00:42.115 --> 00:00:45.290
Something we need to watch out for though when doing this is

00:00:45.290 --> 00:00:48.050
that data is not transferable both ways.

00:00:48.050 --> 00:00:52.715
[inaudible] we can add a name to both the data and the setup.

00:00:52.715 --> 00:00:54.890
First of all, a name property for

00:00:54.890 --> 00:01:01.080
the data and then create a constant inside of the setup.

00:01:03.500 --> 00:01:10.740
We also need to return this, so we can use this inside the template [inaudible].

00:01:10.740 --> 00:01:13.830
Let's now output the value of our data properly.

00:01:13.830 --> 00:01:20.770
This can go anywhere. Parsing the name which is equal to our data property of name.

00:01:20.770 --> 00:01:24.110
See this, we need to go over to the home link,

00:01:24.110 --> 00:01:27.545
that's our name just at the bottom as expected.

00:01:27.545 --> 00:01:33.115
But what about accessing our composition code inside of our data properties?

00:01:33.115 --> 00:01:36.950
If we wanted to access his full name inside here,

00:01:36.950 --> 00:01:40.025
we may be tempted to do something like this.

00:01:40.025 --> 00:01:45.255
We could access this dot full name, try this out.

00:01:45.255 --> 00:01:49.245
That's our full name which is from the setup function.

00:01:49.245 --> 00:01:53.495
As we see, the data section has access to our composition code.

00:01:53.495 --> 00:01:56.870
This also applies to other sections in the options API,

00:01:56.870 --> 00:01:58.520
not just the data.

00:01:58.520 --> 00:02:02.750
We could access our setup code inside methods and computers,

00:02:02.750 --> 00:02:04.970
and this would also work too.

00:02:04.970 --> 00:02:07.795
But what about the other way around?

00:02:07.795 --> 00:02:11.220
Again, let's try this out. We can reinstate our name,

00:02:11.220 --> 00:02:17.565
and then we can try to access this data property inside of setup; this dot name.

00:02:17.565 --> 00:02:21.600
We also need to change the name to be full name,

00:02:22.900 --> 00:02:25.310
and we see a blank screen.

00:02:25.310 --> 00:02:29.785
Perceives any errors inside of the developer tools.

00:02:29.785 --> 00:02:33.740
We cannot read property name of undefined.

00:02:33.740 --> 00:02:40.950
Okay, so let's try without this keyword, refresh.

00:02:41.210 --> 00:02:44.415
We still have no access to this name.

00:02:44.415 --> 00:02:47.510
The problem we have here when we do things this way around is

00:02:47.510 --> 00:02:52.460
the setup function is resolved before the options API.

00:02:52.460 --> 00:02:58.015
So the setup function cannot access any of our data properties.

00:02:58.015 --> 00:03:02.090
This keyword is also not available inside a setup.

00:03:02.090 --> 00:03:05.375
If it was, it would behave differently to how we would

00:03:05.375 --> 00:03:09.080
expect it to behave inside of the options API,

00:03:09.080 --> 00:03:12.745
so it has been removed to avoid any confusion.

00:03:12.745 --> 00:03:18.365
So just to be clear, we cannot use this keyword inside of the setup function.

00:03:18.365 --> 00:03:21.170
But as we've just seen, it does work the other way around,

00:03:21.170 --> 00:03:26.465
and we can access our setup properties inside of our data or our options API.

00:03:26.465 --> 00:03:27.980
We can clean up this code.

00:03:27.980 --> 00:03:32.855
We don't need access to the full name and move this from the return statement,

00:03:32.855 --> 00:03:37.765
the data section, and also the output inside the template.

00:03:37.765 --> 00:03:41.970
This is an introduction to the composition API.

00:03:41.970 --> 00:03:45.070
In the next section, we're going to push on with our project,

00:03:45.070 --> 00:03:47.450
and we'll also get lots more practice using

00:03:47.450 --> 00:03:51.510
the composition as we progress through these videos.
