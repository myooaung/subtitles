WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.090
We had a first look at binding attributes in the last video using the key.

00:00:06.090 --> 00:00:10.170
We're now going to move onto looking at binding class and style attributes Vue.

00:00:10.170 --> 00:00:16.425
To do this, we can create a darkMode for our blog which the user can toggle on or off.

00:00:16.425 --> 00:00:20.925
To create the styles for this darkMode we need to go over to our style sheet,

00:00:20.925 --> 00:00:23.805
and then down at the bottom we can add

00:00:23.805 --> 00:00:27.465
a darkMode class which we're going to toggle on or off.

00:00:27.465 --> 00:00:29.700
This is going to be pretty simple.

00:00:29.700 --> 00:00:33.440
We can create the background and set this to a darker color,

00:00:33.440 --> 00:00:37.700
the one I'm going to use is going to be 38383a.

00:00:37.700 --> 00:00:43.330
To offset this we'll change the color to be a lighter value of whitesmoke.

00:00:43.330 --> 00:00:46.560
To apply this darkMode we are going to add this as a class,

00:00:46.560 --> 00:00:49.189
and surrounding all of our content,

00:00:49.189 --> 00:00:55.060
such as the header section and our blog we have this surrounding div element.

00:00:55.060 --> 00:00:58.285
In the opening tag, just inside the body,

00:00:58.285 --> 00:01:02.690
we can add this as a regular class and this will apply our changes.

00:01:02.690 --> 00:01:06.200
This works fine but we need a way to toggle this on and off,

00:01:06.200 --> 00:01:09.055
and also to integrate this into our Vue app.

00:01:09.055 --> 00:01:12.560
Currently we have a small problem which is we're using Vue to control

00:01:12.560 --> 00:01:16.670
the header section and also the blog section independently.

00:01:16.670 --> 00:01:21.590
But when we toggle only darkMode we want this class to be applied to the full site.

00:01:21.590 --> 00:01:26.605
We can simplify things by merging our two Vue instances.

00:01:26.605 --> 00:01:31.580
To do this all we need to do is to grab our posts from the second app,

00:01:31.580 --> 00:01:35.195
and then paste this into the data property for our first section.

00:01:35.195 --> 00:01:37.400
We don't have any more data inside here,

00:01:37.400 --> 00:01:38.795
so we can remove

00:01:38.795 --> 00:01:44.160
this full instance and then we're going to mount this to the body section.

00:01:44.480 --> 00:01:50.495
This means that the Vue instance is now controlling all of our webpage.

00:01:50.495 --> 00:01:53.180
The first step to allow this class to be toggled on and

00:01:53.180 --> 00:01:56.395
off is to set this as a data property.

00:01:56.395 --> 00:01:58.845
A data property is going to be a Boolean,

00:01:58.845 --> 00:02:01.830
and I want to call this the darkModeSet,

00:02:01.830 --> 00:02:06.480
which will be a initial Boolean value of false.

00:02:06.480 --> 00:02:12.815
To dynamically toggle the darkMode class based on this particular data property,

00:02:12.815 --> 00:02:15.080
we need to pass our class attribute as

00:02:15.080 --> 00:02:19.130
an object rather than a regular attributes, just like this.

00:02:19.130 --> 00:02:23.900
Inside of here, we need to add an object using the curly braces.

00:02:23.900 --> 00:02:27.680
We only want this dark class to apply if

00:02:27.680 --> 00:02:33.085
the data property which is darkModeSet is going to be equal to true.

00:02:33.085 --> 00:02:35.295
Currently this is false,

00:02:35.295 --> 00:02:38.150
so Vue.js won't apply this dark class.

00:02:38.150 --> 00:02:40.790
We can see this if we refresh the browser,

00:02:40.790 --> 00:02:42.830
the dark class no longer applies.

00:02:42.830 --> 00:02:45.745
But if it were to toggle this to be true,

00:02:45.745 --> 00:02:49.305
Vue.js should then apply our class.

00:02:49.305 --> 00:02:52.500
But if we refresh this we don't see any changes,

00:02:52.500 --> 00:02:57.215
and this is because just like when we set the key property earlier on,

00:02:57.215 --> 00:03:00.385
we need to bind this as a dynamic value.

00:03:00.385 --> 00:03:03.930
Currently, Vue.js is reading this as a string,

00:03:03.930 --> 00:03:07.040
which we can see if we go into the developer tools.

00:03:07.040 --> 00:03:10.760
I'll right-click and inspect the "Body section" and then

00:03:10.760 --> 00:03:15.290
immediately inside we see that our class is output as a string.

00:03:15.290 --> 00:03:16.870
This is not a valid class,

00:03:16.870 --> 00:03:20.705
so instead what we're going to do is to use the v bind directive.

00:03:20.705 --> 00:03:24.335
Or just like earlier we can shorten this to be a colon.

00:03:24.335 --> 00:03:28.075
Now instead of a string this will be interpreted as JavaScript,

00:03:28.075 --> 00:03:33.575
and if we refresh the developer tools we'll see the class of dark has now been applied,

00:03:33.575 --> 00:03:36.790
and this has also been applied to our project too.

00:03:36.790 --> 00:03:41.060
Alongside this class we can also add data properties

00:03:41.060 --> 00:03:45.155
to inline styles too. Let's remove this.

00:03:45.155 --> 00:03:50.395
I'm going to setup a regular style property which is just regular HTML.

00:03:50.395 --> 00:03:53.145
Inside here we can set the color value,

00:03:53.145 --> 00:03:55.380
let's go for a value of hotpink.

00:03:55.380 --> 00:03:57.110
This is just regular HTML,

00:03:57.110 --> 00:04:00.795
so if we refresh this will then be applied to our projects.

00:04:00.795 --> 00:04:04.900
We can also move this color property to be a data property too.

00:04:04.900 --> 00:04:11.690
Inside of the script let's set the textColor to be the string value of hotpink.

00:04:11.690 --> 00:04:14.945
Then as we did with the class attributes,

00:04:14.945 --> 00:04:18.040
we need to pass this style in as an object.

00:04:18.040 --> 00:04:22.370
The first step is to surround this in the curly braces and then

00:04:22.370 --> 00:04:27.095
replace this string of hotpink with our data property which was textColor.

00:04:27.095 --> 00:04:29.435
This is a variable, so we need to bind this

00:04:29.435 --> 00:04:32.825
using v bind or the shorthand which was the colon.

00:04:32.825 --> 00:04:38.335
Refresh, and this time our styling has been applied from the data property.

00:04:38.335 --> 00:04:42.365
If we did have multiple style properties which we wanted to add like this,

00:04:42.365 --> 00:04:45.370
our HTML could quickly get messy.

00:04:45.370 --> 00:04:48.095
Instead we could remove this,

00:04:48.095 --> 00:04:50.555
leaving in the style attributes,

00:04:50.555 --> 00:04:55.405
and then over in our script we can create a style object as a data property.

00:04:55.405 --> 00:04:59.750
We can remove this, and then instead we're going to setup our

00:04:59.750 --> 00:05:05.000
darkMode.CSS using the same styles that we applied down at the bottom.

00:05:05.000 --> 00:05:16.240
Let's comment this out and then setup our background which was the hex value of 38383a.

00:05:16.490 --> 00:05:19.280
Also the color for the text,

00:05:19.280 --> 00:05:21.980
which is going to be whitesmoke.

00:05:23.090 --> 00:05:28.860
This darkMode object can now be directly placed as an attribute.

00:05:29.240 --> 00:05:32.570
Since its value is already an object,

00:05:32.570 --> 00:05:35.060
we don't need to place in it the curly braces.

00:05:35.060 --> 00:05:39.830
This can just get directly added in. Let's give this a try.

00:05:39.830 --> 00:05:42.905
Our darkMode has now been applied.

00:05:42.905 --> 00:05:46.400
We can even add multiple style objects too,

00:05:46.400 --> 00:05:51.560
for example if we wanted to setup a base font family or some base styles,

00:05:51.560 --> 00:05:53.930
we can setup a new object,

00:05:53.930 --> 00:06:00.945
and let's set the fontFamily to be the value of monospace.

00:06:00.945 --> 00:06:05.475
If you are not familiar adding CSS properties with JavaScripts,

00:06:05.475 --> 00:06:08.915
all of these CSS properties need to become a case.

00:06:08.915 --> 00:06:13.770
If we were using CSS directly in our style sheet we would set

00:06:13.770 --> 00:06:18.610
the fontFamily all in lowercase and separated with the dashes.

00:06:18.610 --> 00:06:22.370
Instead in JavaScript, we set this as camelCase so

00:06:22.370 --> 00:06:26.585
each word after the very first one begins with a capital letter.

00:06:26.585 --> 00:06:30.425
Now we'll have these multiple style objects which we want to add.

00:06:30.425 --> 00:06:33.190
These can be now placed in as an array.

00:06:33.190 --> 00:06:36.090
We can pass in the square brackets,

00:06:36.090 --> 00:06:37.650
and then our second object,

00:06:37.650 --> 00:06:41.100
which was base, save this,

00:06:41.100 --> 00:06:44.735
and the styling for both of our objects have been merged.

00:06:44.735 --> 00:06:46.790
If we go into the developer tools,

00:06:46.790 --> 00:06:50.165
we can see this by hovering over our main div.

00:06:50.165 --> 00:06:51.770
This has our background color,

00:06:51.770 --> 00:06:53.224
it has the textColor,

00:06:53.224 --> 00:06:57.810
and then our fontFamily from the second JavaScript object.
