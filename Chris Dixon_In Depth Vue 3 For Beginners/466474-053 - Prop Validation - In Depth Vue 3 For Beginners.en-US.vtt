WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.320 --> 00:00:05.085
In our project, props are an important part of how it all works.

00:00:05.085 --> 00:00:08.640
It is a good idea to add some validation to make sure

00:00:08.640 --> 00:00:12.585
we get the correct information passed through our components.

00:00:12.585 --> 00:00:15.150
Inside of this main app.view file,

00:00:15.150 --> 00:00:17.519
this is the top-level component,

00:00:17.519 --> 00:00:20.430
so this is not passed any props.

00:00:20.430 --> 00:00:22.740
To begin with the prop validation,

00:00:22.740 --> 00:00:26.085
we're going to go into the events.view components.

00:00:26.085 --> 00:00:31.605
The first thing we need to do to add validation is to change this array into an object,

00:00:31.605 --> 00:00:34.965
that's common results, and then we are going to reinstate

00:00:34.965 --> 00:00:38.970
our props property for this time as an object.

00:00:38.970 --> 00:00:43.320
The first one we have just above is the events.

00:00:44.420 --> 00:00:47.210
Its most simple proof validation,

00:00:47.210 --> 00:00:51.815
it cannot just declare the type of data which we expect to receive.

00:00:51.815 --> 00:00:55.885
The event is going to be an object.

00:00:55.885 --> 00:00:58.260
Then separated by a comma,

00:00:58.260 --> 00:01:00.610
we have the daysLeft.

00:01:01.040 --> 00:01:04.990
The daysLeft is going to be a number.

00:01:05.060 --> 00:01:09.190
Then finally we have showPastEvents.

00:01:09.560 --> 00:01:13.710
The data type for this is a Boolean.

00:01:14.770 --> 00:01:17.540
This is just a simple true or false,

00:01:17.540 --> 00:01:21.200
so we can hide the events if the days has expired.

00:01:21.200 --> 00:01:25.700
We can also pass in a valid datatypes too, such as array,

00:01:25.700 --> 00:01:30.600
function, symbol, date, and string. Let's try this out.

00:01:30.600 --> 00:01:32.415
Over in the browser,

00:01:32.415 --> 00:01:36.125
refresh, we see everything is working perfectly fine.

00:01:36.125 --> 00:01:41.035
Open up the developer tools and we can check there's no areas inside of the console.

00:01:41.035 --> 00:01:45.060
Yes, that's all okay. But now if we go over to the app.view,

00:01:45.060 --> 00:01:50.389
we'll make a change to the data which we are passing it down to this event component.

00:01:50.389 --> 00:01:55.765
For example, let's go for showPastEvents which is either true or false.

00:01:55.765 --> 00:01:58.400
Now, if we remove the binding,

00:01:58.400 --> 00:02:04.040
this will not mean that this will be passed down as a string value rather than a Boolean.

00:02:04.040 --> 00:02:10.905
Open this, refresh, and now we'll see a warning for all of our six different events.

00:02:10.905 --> 00:02:13.550
The warning is the invalid prop type,

00:02:13.550 --> 00:02:17.125
the type check failed for the showPastEvents prop.

00:02:17.125 --> 00:02:21.685
We see we expected a Boolean because this is what we set inside of our components.

00:02:21.685 --> 00:02:23.920
But then we got a string.

00:02:23.920 --> 00:02:28.465
We're not restricted to just one single datatype either.

00:02:28.465 --> 00:02:31.820
If we did want to accept a string alongside this Boolean,

00:02:31.820 --> 00:02:35.375
all we'll need to do is to pass this in as an array.

00:02:35.375 --> 00:02:38.294
It's around this inside this square brackets,

00:02:38.294 --> 00:02:42.895
then separated by a comma will also accept a string value.

00:02:42.895 --> 00:02:46.929
Refresh, and now our errors will now disappear.

00:02:46.929 --> 00:02:50.260
We don't want to Boolean for this particular example,

00:02:50.260 --> 00:02:56.040
so we can remove the square brackets and also at the binding back into here.

00:02:56.690 --> 00:03:00.740
These errors which you see they're only shown in developments and can be really

00:03:00.740 --> 00:03:05.120
useful if we make a mistake or change our data unexpectedly.

00:03:05.120 --> 00:03:09.980
We can't go even further too by not only declaring the datatype,

00:03:09.980 --> 00:03:11.480
which we currently doing,

00:03:11.480 --> 00:03:14.530
but to also restrict the values which you receive too,

00:03:14.530 --> 00:03:19.655
to do this we can pass in extra properties and turn this into an object,

00:03:19.655 --> 00:03:24.125
so call this us out and add the curly brace is to turn this into an object,

00:03:24.125 --> 00:03:28.475
we can then pass in the type with the type property.

00:03:28.475 --> 00:03:33.300
What we're going to set this prop again to be an object, the daysLeft,

00:03:33.300 --> 00:03:37.235
we do the same for this and the type property,

00:03:37.235 --> 00:03:40.350
and also the same for all Boolean.

00:03:41.480 --> 00:03:43.650
Now these are all objects,

00:03:43.650 --> 00:03:46.435
these can now accept multiple properties.

00:03:46.435 --> 00:03:50.765
For example, if we wanted to make sure this prop is required,

00:03:50.765 --> 00:03:52.615
we can set this to be true.

00:03:52.615 --> 00:03:56.020
Also the same for the daysLeft.

00:03:57.200 --> 00:04:00.590
This means that this should flow in an error if even one of

00:04:00.590 --> 00:04:03.815
these properties is not passed down to these components.

00:04:03.815 --> 00:04:05.750
Test this out over to the app.view,

00:04:05.750 --> 00:04:07.640
we can remove any one of these.

00:04:07.640 --> 00:04:10.240
Let's go for the daysLeft.

00:04:10.240 --> 00:04:12.600
Lets call this out temporarily.

00:04:12.600 --> 00:04:15.425
Now over in the browser we see the missing or

00:04:15.425 --> 00:04:20.210
required prop of daysLeft for all six of our events.

00:04:20.210 --> 00:04:22.520
Over in the event.view,

00:04:22.520 --> 00:04:27.365
notice here how we have left off the required property, to showPastEvents.

00:04:27.365 --> 00:04:30.385
This is because this prop type is a Boolean.

00:04:30.385 --> 00:04:33.680
If we were to not pass down this prop,

00:04:33.680 --> 00:04:36.965
a Boolean value will always default to false anyway,

00:04:36.965 --> 00:04:39.470
meaning it would still appears to be present anyway.

00:04:39.470 --> 00:04:43.430
This is just something to watch out for when passing Boolean props.

00:04:43.430 --> 00:04:48.680
Let's just quickly reinstates its daysLeft and save this file.

00:04:48.680 --> 00:04:52.580
Props can also receive a default value too,

00:04:52.580 --> 00:04:56.120
which we can use if no value is provided.

00:04:56.120 --> 00:05:00.020
Now instead of saying that this prop type must be present,

00:05:00.020 --> 00:05:02.480
we can also say if this is not present,

00:05:02.480 --> 00:05:05.920
we're going to instead pass in a default value.

00:05:05.920 --> 00:05:07.685
This is the number type,

00:05:07.685 --> 00:05:10.160
and let's go for a number of 10.

00:05:10.160 --> 00:05:13.845
This currently won't make a difference if we refresh the browser because we

00:05:13.845 --> 00:05:17.495
are still passing the prop down to these components.

00:05:17.495 --> 00:05:21.125
But again, if we could this out, refresh,

00:05:21.125 --> 00:05:25.450
although events will now default back to 10 days left.

00:05:25.450 --> 00:05:28.580
Let's just undo this and save this file.

00:05:28.580 --> 00:05:31.460
This just work for things such as numbers or strings,

00:05:31.460 --> 00:05:35.539
Boolean when validating the functions, arrays are objects.

00:05:35.539 --> 00:05:39.325
We need to pass this default property as a function.

00:05:39.325 --> 00:05:41.490
Our event is the type of object,

00:05:41.490 --> 00:05:43.420
so we can give this a try,

00:05:43.420 --> 00:05:45.860
remove the required property,

00:05:45.860 --> 00:05:48.820
and then it changes to be the default.

00:05:48.820 --> 00:05:51.590
For this since this is a object,

00:05:51.590 --> 00:05:54.575
we need to set this up as a function.

00:05:54.575 --> 00:06:00.175
Then if no event prop is passed we're going to return this default object.

00:06:00.175 --> 00:06:04.490
This needs to have the same setup as we currently have inside here.

00:06:04.490 --> 00:06:07.205
We have the ID, to each event,

00:06:07.205 --> 00:06:09.320
that just give some random information.

00:06:09.320 --> 00:06:11.060
We have the name,

00:06:11.060 --> 00:06:17.130
which is a string value, the event details.

00:06:17.720 --> 00:06:20.150
If is fine, save this,

00:06:20.150 --> 00:06:22.580
and of course it shouldn't affect anything which we currently have

00:06:22.580 --> 00:06:25.730
because we are still receiving the event prop.

00:06:25.730 --> 00:06:28.100
But if we do remove this,

00:06:28.100 --> 00:06:34.050
we should now kick in our default events with data which we pass inside here.

00:06:34.050 --> 00:06:38.765
What we actually want to look at is the validator property.

00:06:38.765 --> 00:06:41.690
Let's just add our event back inside here,

00:06:41.690 --> 00:06:44.195
and then back over to our events.

00:06:44.195 --> 00:06:47.630
The validator property is a custom function which gives us

00:06:47.630 --> 00:06:51.175
a much more flexible way of validating our props.

00:06:51.175 --> 00:06:53.255
It's laid out in a similar way to

00:06:53.255 --> 00:06:57.140
our default function but instead we replace this with validator.

00:06:57.140 --> 00:07:00.035
This function will also take in a value,

00:07:00.035 --> 00:07:02.585
which is the value of the prop which is passed.

00:07:02.585 --> 00:07:05.080
Currently this will be the event.

00:07:05.080 --> 00:07:09.785
We can now validate this value in any way we want using JavaScripts.

00:07:09.785 --> 00:07:13.580
For example, if we only wanted to allow a certain event names,

00:07:13.580 --> 00:07:15.790
we could do something like this.

00:07:15.790 --> 00:07:17.630
Let set up open array with

00:07:17.630 --> 00:07:21.935
the aloud event names which you want to pass through this validator.

00:07:21.935 --> 00:07:25.290
Let's go for two of our current event name.

00:07:25.290 --> 00:07:29.130
We have birthday, and we also have a Christmas too.

00:07:31.700 --> 00:07:36.140
Then we can use the JavaScript includes method to check if any

00:07:36.140 --> 00:07:39.995
of our events includes either the title of birthday or Christmas.

00:07:39.995 --> 00:07:43.520
We know the event information is passed inside of this value,

00:07:43.520 --> 00:07:47.875
so we can access our objects and then the event name.

00:07:47.875 --> 00:07:52.130
If any one of our events include the title of birthday or Christmas,

00:07:52.130 --> 00:07:54.200
we then want to return this value,

00:07:54.200 --> 00:07:56.810
and this will be either true or false.

00:07:56.810 --> 00:08:02.035
Let's save this and go back over to the browser into the developer tools.

00:08:02.035 --> 00:08:06.230
We'll now see this validator has failed for our four events which don't

00:08:06.230 --> 00:08:10.330
include the title or the name of birthday or Christmas.

00:08:10.330 --> 00:08:14.420
We don't need this validator function inside of this project,

00:08:14.420 --> 00:08:16.970
but it is useful to know this is there and it gives us

00:08:16.970 --> 00:08:20.935
a really flexible way of validating our props.

00:08:20.935 --> 00:08:25.665
We can also add prop type validation to our AddUpdateForm too,

00:08:25.665 --> 00:08:28.755
scroll down to our scripts action.

00:08:28.755 --> 00:08:31.490
We only have the single prop inside here,

00:08:31.490 --> 00:08:33.670
so we can comment this out,

00:08:33.670 --> 00:08:37.090
set this app has an object,

00:08:38.200 --> 00:08:41.180
base in our current events,

00:08:41.180 --> 00:08:44.285
which has the type of object.

00:08:44.285 --> 00:08:48.185
Save this file. Now if we refresh the browser,

00:08:48.185 --> 00:08:50.550
open up the console,

00:08:51.110 --> 00:08:55.240
everything now still works as expected.
