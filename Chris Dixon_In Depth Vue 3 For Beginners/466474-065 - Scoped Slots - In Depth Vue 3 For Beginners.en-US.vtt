WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.320 --> 00:00:03.960
This now brings us on to Scoped slots.

00:00:03.960 --> 00:00:05.850
This is where things begin to get a little bit more

00:00:05.850 --> 00:00:09.210
interesting in terms of accessing our data.

00:00:09.210 --> 00:00:11.805
In this overview.view file,

00:00:11.805 --> 00:00:16.500
currently we are passing it down dynamic data to these child components,

00:00:16.500 --> 00:00:22.040
or if it was the other way round and this data lived inside of our child components,

00:00:22.040 --> 00:00:26.085
what we wanted to access it inside of this file.

00:00:26.085 --> 00:00:29.550
Well, we can do this with Scoped slots.

00:00:29.550 --> 00:00:32.704
Earlier we added a sidebar components,

00:00:32.704 --> 00:00:35.410
but we've not yet added any components.

00:00:35.410 --> 00:00:41.350
So let's go over to this and we can begin to work inside of our sidebar.view,

00:00:41.350 --> 00:00:47.869
placing our template, this is going to render out our free links inside of the sidebar,

00:00:47.869 --> 00:00:51.320
and also give us a chance to look at Scoped slots.

00:00:51.320 --> 00:00:55.965
Placing the navigation and unordered list,

00:00:55.965 --> 00:00:59.345
then we can loop through our pages with the list item.

00:00:59.345 --> 00:01:01.130
We haven't created these yet,

00:01:01.130 --> 00:01:02.975
but we'll call this pages,

00:01:02.975 --> 00:01:06.260
so we'll loop through page in pages,

00:01:06.260 --> 00:01:09.060
also bind a dynamic key.

00:01:09.200 --> 00:01:13.865
This is simply going to be the page, just for simplicity.

00:01:13.865 --> 00:01:16.535
Inside of here, place it in a link element,

00:01:16.535 --> 00:01:22.110
and this is just going to output in between the double curly braces, our page.

00:01:22.220 --> 00:01:25.514
This is all we need for the template,

00:01:25.514 --> 00:01:28.160
so going down to the script section,

00:01:28.160 --> 00:01:32.670
we can setup our data property for all pages.

00:01:33.230 --> 00:01:37.205
Pages is going to be a pretty straightforward array,

00:01:37.205 --> 00:01:39.655
so we'll just start in our free strings.

00:01:39.655 --> 00:01:41.624
The first one was Overview,

00:01:41.624 --> 00:01:45.250
we have Orders, and also Best Sellers.

00:01:51.860 --> 00:01:57.595
This is going to be rendered out and registered over in our App.vue.

00:01:57.595 --> 00:02:03.185
Head over to our script and we can first import our new components.

00:02:03.185 --> 00:02:05.610
This is the sidebar,

00:02:05.740 --> 00:02:09.095
which is available from the path,

00:02:09.095 --> 00:02:11.320
which is dot slash components.

00:02:11.320 --> 00:02:13.990
Then forward slash sidebar.

00:02:14.120 --> 00:02:17.835
Register this inside of the components,

00:02:17.835 --> 00:02:21.405
then we can use this up in our template.

00:02:21.405 --> 00:02:25.610
The place to do this is going to be inside of the aside section.

00:02:25.610 --> 00:02:31.920
We can remove our free existing links and then place in our sidebar.

00:02:32.580 --> 00:02:36.180
Good, now we have our free links still showing,

00:02:36.180 --> 00:02:38.995
but now these are from our sidebar components.

00:02:38.995 --> 00:02:42.000
But go to our sidebar.vue components,

00:02:42.000 --> 00:02:43.410
we have this link just here,

00:02:43.410 --> 00:02:44.980
which is our dynamic data,

00:02:44.980 --> 00:02:47.435
which lives in this child components.

00:02:47.435 --> 00:02:53.480
As an example, imagine if we will use this navigation multiple times in our application.

00:02:53.480 --> 00:02:56.435
We may want this link to be styled differently in

00:02:56.435 --> 00:03:01.150
different locations or have some different unique layout options.

00:03:01.150 --> 00:03:08.119
As we already know, if we were to cut this out and then places in between our sidebar,

00:03:08.119 --> 00:03:11.540
this won't work since the scope of this page is inside of

00:03:11.540 --> 00:03:15.430
the sidebar components, not this app.vue.

00:03:15.430 --> 00:03:17.400
If did want to handle this,

00:03:17.400 --> 00:03:19.765
we would need to make use of Scoped slots

00:03:19.765 --> 00:03:23.210
to allow us to pass data back loop to his parents.

00:03:23.210 --> 00:03:25.725
First in the sidebar.vue,

00:03:25.725 --> 00:03:31.120
we first pass in the slot components where we want this data to be displayed.

00:03:31.120 --> 00:03:35.285
We want to now pass is page variable backup to the parents.

00:03:35.285 --> 00:03:39.190
The way we can do this is by binding a dynamic attributes.

00:03:39.190 --> 00:03:42.725
I don't want to keep this consistent and call this page.

00:03:42.725 --> 00:03:45.555
These attributes are called slot props.

00:03:45.555 --> 00:03:49.780
We can now access these attributes up inside of the parent components,

00:03:49.780 --> 00:03:51.875
which is the app.vue.

00:03:51.875 --> 00:03:55.120
First, we're going to wrap this link inside of

00:03:55.120 --> 00:03:58.690
a template and assign it the default location.

00:03:58.690 --> 00:04:00.730
Just like we looked at in the last video,

00:04:00.730 --> 00:04:02.410
we can create our templates,

00:04:02.410 --> 00:04:05.020
and then use the slots or the shorthand,

00:04:05.020 --> 00:04:06.380
which is the hash.

00:04:06.380 --> 00:04:12.290
Then give this the default location where we can now paste our link back inside.

00:04:12.290 --> 00:04:15.160
This looks pretty much the same as the last video,

00:04:15.160 --> 00:04:21.315
but the difference this time is here we're going to pass down a value to v slot.

00:04:21.315 --> 00:04:23.230
This value is a variable name,

00:04:23.230 --> 00:04:25.570
which we can call anything which you want.

00:04:25.570 --> 00:04:29.570
To keep this descriptive, I'm going to call this slotProps.

00:04:29.570 --> 00:04:31.360
Now by using this variable,

00:04:31.360 --> 00:04:35.890
we have access to the data which had been passed up from our slot.

00:04:35.890 --> 00:04:38.380
Now we'll have access to this page.

00:04:38.380 --> 00:04:41.040
Now instead of directly accessing our page,

00:04:41.040 --> 00:04:43.855
we need to first access our slot props,

00:04:43.855 --> 00:04:46.035
then the page attributes.

00:04:46.035 --> 00:04:49.715
We see straight away that our free pages now appear in the sidebar,

00:04:49.715 --> 00:04:53.200
so we now getting this data from our child components.

00:04:53.200 --> 00:04:57.485
Alternatively, rather than accessing all of our props on this variable,

00:04:57.485 --> 00:05:00.825
we can make use of JavaScript destructuring.

00:05:00.825 --> 00:05:04.610
We can pull out any of our variables or any of our attributes,

00:05:04.610 --> 00:05:05.870
such as our page.

00:05:05.870 --> 00:05:09.385
Now we can access this directly in our template.

00:05:09.385 --> 00:05:12.075
This is how a slot prop works.

00:05:12.075 --> 00:05:13.905
You may thinking with all of this,

00:05:13.905 --> 00:05:19.300
why do we have another way of passing data when we already have all props and emits.

00:05:19.300 --> 00:05:23.765
Well, this is all about giving us as a developer total flexibility.

00:05:23.765 --> 00:05:27.725
Scoped slots open up the door to so many different things.

00:05:27.725 --> 00:05:30.645
For example, if this page had user authentication

00:05:30.645 --> 00:05:33.815
and we had access to our user from our data.

00:05:33.815 --> 00:05:38.045
As an example, if we had a data property just like this,

00:05:38.045 --> 00:05:41.790
and if this example had a user objects.

00:05:42.980 --> 00:05:47.015
If you only wanted to show certain links,

00:05:47.015 --> 00:05:48.725
if the user was logged in,

00:05:48.725 --> 00:05:53.665
you will then need to pass this used objects down to the sidebar components via props.

00:05:53.665 --> 00:05:55.280
However though, using Scoped slots,

00:05:55.280 --> 00:05:59.060
we could do this exact same setup and we can check if the user is

00:05:59.060 --> 00:06:03.169
present by placing this v-if on this parent components,

00:06:03.169 --> 00:06:07.915
we can check if the user exists before rendering out any of our links.

00:06:07.915 --> 00:06:10.260
A user currently exists.

00:06:10.260 --> 00:06:12.780
If we change to null,

00:06:12.780 --> 00:06:15.870
this will then remove our free links.

00:06:15.870 --> 00:06:20.945
This is just one example to avoid those passing down props to the child components.

00:06:20.945 --> 00:06:24.320
We can also remove this since this is not needed.

00:06:24.320 --> 00:06:30.020
Also another example, if we wanted to rent out this component in multiple locations,

00:06:30.020 --> 00:06:33.470
we could duplicate the content just like this and we

00:06:33.470 --> 00:06:36.910
could add different classes to each one of our list items.

00:06:36.910 --> 00:06:39.875
For example, this could be placed inside the sidebar.

00:06:39.875 --> 00:06:43.655
We'll maybe want the styling to be different for the header.

00:06:43.655 --> 00:06:47.555
This will give us the flexibility to maybe add a different color links,

00:06:47.555 --> 00:06:51.845
we could also place the header navigation horizontally across the page,

00:06:51.845 --> 00:06:54.590
the sidebar one could be vertical and we have

00:06:54.590 --> 00:06:59.265
full flexibility to do whatever we want to keep both of these unique.

00:06:59.265 --> 00:07:04.040
Let's remove this and round off this video by adding some styling to our free links.

00:07:04.040 --> 00:07:07.100
[inaudible] this over in the sidebar,

00:07:07.100 --> 00:07:10.455
create this style section.

00:07:10.455 --> 00:07:13.340
First of all, let's go for the unordered list.

00:07:13.340 --> 00:07:18.470
We can remove the bullets by setting the list-style to be none.

00:07:18.470 --> 00:07:22.585
Then it resets any default padding to be zero.

00:07:22.585 --> 00:07:25.430
Then we can add some space in it to these links with

00:07:25.430 --> 00:07:30.665
the list item by suddenly padding to be 10 pixels on the top and bottom,

00:07:30.665 --> 00:07:33.185
and then zero on the left and right.

00:07:33.185 --> 00:07:37.230
It got some spacing between these three links.
