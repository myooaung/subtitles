WEBVTT
1
00:00:00.240 --> 00:00:06.600
Hello and welcome to this Python tutorial in Statoil we are going to make the first step into implementing

2
00:00:06.630 --> 00:00:08.270
the deep theory model.

3
00:00:08.280 --> 00:00:13.590
So basically we are about to implement the whole process of the diffusion algorithm.

4
00:00:13.830 --> 00:00:16.580
And so we going to use what we created before.

5
00:00:16.590 --> 00:00:22.460
That is the architecture of the neural network to replay memory to integrate this into the whole dequeue

6
00:00:22.530 --> 00:00:24.180
learning process.

7
00:00:24.180 --> 00:00:28.320
And this whole learning algorithm is going to fit into one class.

8
00:00:28.380 --> 00:00:32.340
That's the last that we're making to implement artificial intelligence.

9
00:00:32.340 --> 00:00:35.650
And this class will just contain different functions.

10
00:00:35.700 --> 00:00:41.790
So we will have the in it functions which will create and initialize all the variables attached to our

11
00:00:41.790 --> 00:00:48.450
future detouring objects which will represent the model itself and they will have some other functions.

12
00:00:48.510 --> 00:00:52.830
One of them will of course be to select the right action at each time.

13
00:00:52.950 --> 00:00:59.250
We will also have an update function core function to get this core and have an idea of how the learning

14
00:00:59.250 --> 00:01:01.030
is going if it's going well.

15
00:01:01.090 --> 00:01:07.080
If the exploration is going well and if it can move on to exploitation and then we'll have a safe function

16
00:01:07.080 --> 00:01:12.430
to save tomorrow that is to save the brain of the car and then eventually load function.

17
00:01:12.480 --> 00:01:14.590
So we have a couple of functions to make.

18
00:01:14.640 --> 00:01:17.440
We're going to make one function for each to toil.

19
00:01:17.490 --> 00:01:22.820
And today we're going to start with the end function as usual when we're making a class.

20
00:01:23.010 --> 00:01:30.040
But first let's not forget to introduce the class so we're going to call it D.

21
00:01:30.200 --> 00:01:35.970
Q And for you network then some parenthesis call in.

22
00:01:36.030 --> 00:01:39.440
And then we go with our first function.

23
00:01:39.500 --> 00:01:47.910
So let's do this def then double underscore then its double underscore again and parenthesis.

24
00:01:48.170 --> 00:01:53.530
So as you understood in this function we are going to introduce the variables attached to our object.

25
00:01:53.570 --> 00:01:59.240
So we are going to have a couple of lines starting all by self and we'll basically create and initialize

26
00:01:59.300 --> 00:02:03.530
all the variables that are needed to implement the D2 network.

27
00:02:03.530 --> 00:02:09.740
So we will for example create an object or network because of course we need our deep neural network

28
00:02:10.310 --> 00:02:12.190
then we will need our memory.

29
00:02:12.300 --> 00:02:14.630
We will create another variable for the memory.

30
00:02:14.740 --> 00:02:20.430
So we'll have another variable self up memory but then that's not all we will have to create as well.

31
00:02:20.480 --> 00:02:22.390
Some variables for the last date.

32
00:02:22.490 --> 00:02:24.820
The last action and the last word.

33
00:02:24.920 --> 00:02:30.520
That's of course you know the variables that you see in the diffusion algorithm.

34
00:02:30.920 --> 00:02:31.830
And then what else.

35
00:02:31.940 --> 00:02:38.150
Well we will also need an optimizer you know to perform stochastic grid in the sense of data weights

36
00:02:38.510 --> 00:02:42.170
according to how much they will contribute to the error.

37
00:02:42.320 --> 00:02:48.650
When the AI is making a mistake and then I think that so that's basically the variables we now need

38
00:02:48.650 --> 00:02:50.230
to create and initialize.

39
00:02:50.510 --> 00:02:58.460
But in this init function we will put a couple of arguments first as usual self which is the arguments

40
00:02:58.460 --> 00:03:00.190
referring to our object.

41
00:03:00.200 --> 00:03:05.210
Then since you know we're going to create an object of the network class.

42
00:03:05.390 --> 00:03:12.740
Well since the network class takes as argument in the init function input size and the action Well that's

43
00:03:12.740 --> 00:03:13.740
the same here.

44
00:03:13.850 --> 00:03:19.110
When creating an object of the network class we will need to choose an input size argument and the actual

45
00:03:19.160 --> 00:03:20.180
argument.

46
00:03:20.180 --> 00:03:22.140
Therefore we can just copy them

47
00:03:25.660 --> 00:03:27.520
some here and here we go.

48
00:03:27.710 --> 00:03:30.450
So these arguments will now become.

49
00:03:30.560 --> 00:03:33.160
Also some arguments didn't last.

50
00:03:33.170 --> 00:03:39.680
Whenever we create some future objects of the different class that some future dical role models Well

51
00:03:39.680 --> 00:03:45.010
we will need to specify the input size which I remind is the number of dimensions in the vectors that

52
00:03:45.010 --> 00:03:46.330
are including your states.

53
00:03:46.370 --> 00:03:52.940
Your input states and a number of actions which is the number of possible actions the car can make.

54
00:03:53.150 --> 00:03:54.000
So I remind you.

55
00:03:54.110 --> 00:03:57.830
These are either go left go straight or go right.

56
00:03:58.190 --> 00:03:59.270
Okay perfect.

57
00:03:59.270 --> 00:04:04.640
Then you know you will be creating a new object of the replay memory class to create the memory object

58
00:04:04.640 --> 00:04:10.680
to get our memory of the transitions and in the information we have the capacity argument.

59
00:04:10.850 --> 00:04:16.640
But since we will only be using it once actually when we create memory and not any whereafter Well we

60
00:04:16.640 --> 00:04:20.000
won't need to specify the capacity argument.

61
00:04:20.030 --> 00:04:25.330
We could do this but will directly input the number of transitions we want our memory to have.

62
00:04:26.150 --> 00:04:32.390
But then we need one last argument which is to get the parameter in the teacher model.

63
00:04:32.480 --> 00:04:35.470
Remember this gamma parameter is the delay.

64
00:04:35.750 --> 00:04:41.300
And that's a parameter of the equation and therefore we will put it here because we will be using it

65
00:04:41.510 --> 00:04:42.920
afterwards several times.

66
00:04:43.160 --> 00:04:44.990
So let's put it here.

67
00:04:45.070 --> 00:04:47.140
We're going to call it Gamma.

68
00:04:47.150 --> 00:04:52.610
So for that it's just the name of the argument and then we go that all the arguments you will need for

69
00:04:52.610 --> 00:04:53.740
this in its function.

70
00:04:53.750 --> 00:05:00.320
So that means that whenever we create our dictionary model that is whenever we create an object of the

71
00:05:00.320 --> 00:05:01.390
teacher in class.

72
00:05:01.520 --> 00:05:08.060
Well we will need to specify as arguments the input size the number of action and the parameter.

73
00:05:08.360 --> 00:05:10.590
And we'll end with the real values for them.

74
00:05:11.210 --> 00:05:13.870
All right so now let's go inside the function.

75
00:05:14.100 --> 00:05:14.400
OK.

76
00:05:14.410 --> 00:05:16.480
So now basically this is going to be easy.

77
00:05:16.510 --> 00:05:21.090
We are just about to create and initialize all the variables that we need.

78
00:05:21.110 --> 00:05:22.770
And so let's start with the first one.

79
00:05:22.910 --> 00:05:24.460
Let's start with gamma.

80
00:05:24.530 --> 00:05:26.090
Actually the delay coefficient.

81
00:05:26.330 --> 00:05:31.850
So since this is a Voivode want to be attached to her object we start with self.

82
00:05:31.880 --> 00:05:39.500
So gamma is going to be a variable of our teacher and model itself that gamma equals the arguments that

83
00:05:39.530 --> 00:05:42.930
will be input when creating an object of the detune class.

84
00:05:42.950 --> 00:05:46.900
So Janna and there we go with the second argument.

85
00:05:47.040 --> 00:05:50.560
The second argument is going to be the reward window.

86
00:05:50.840 --> 00:05:52.340
So what is this window.

87
00:05:52.520 --> 00:05:57.950
Well that's going to be the sliding window of the mean of the last 100 words which you will use just

88
00:05:58.010 --> 00:06:04.280
to evaluate the evolution of the performance you know will have the meaning of the word into this war

89
00:06:04.280 --> 00:06:06.320
Windu that will slide over time.

90
00:06:06.440 --> 00:06:11.680
And what we want to observe is the meaning of the last 100 words increasing with time.

91
00:06:11.930 --> 00:06:18.610
So let's initialize it with self that reward underscore window.

92
00:06:18.710 --> 00:06:24.690
And so since this is going to be a sliding window of the evolving mean of the last 100 words.

93
00:06:24.860 --> 00:06:31.710
Well we're going to initialize it as an empty list and then we will expand to mean that we work overtime.

94
00:06:32.860 --> 00:06:35.320
All right then more exciting.

95
00:06:35.420 --> 00:06:37.430
Let's create our neural network.

96
00:06:37.580 --> 00:06:43.780
So we're going to call it self-taught Mario because basically that's the heart of the models.

97
00:06:43.790 --> 00:06:51.890
I'm calling it model and this model is going to be nothing else than a subject in that class and to

98
00:06:51.890 --> 00:06:53.270
create such an object.

99
00:06:53.300 --> 00:07:02.630
We take our class network in parenthesis and here we just put the arguments of the class but we put

100
00:07:02.750 --> 00:07:08.930
these arguments in the arguments of the init function and therefore we just need to copy them right

101
00:07:08.930 --> 00:07:15.290
here and just paste them in the network class and then we go with this line of code.

102
00:07:15.350 --> 00:07:22.690
We create one neural network for learning model perfect then let's create a memory.

103
00:07:22.880 --> 00:07:29.930
So again we're going to create a new Vargo that we call self taught memory.

104
00:07:29.930 --> 00:07:34.190
And again this is going to be an object of the replay memory class.

105
00:07:34.220 --> 00:07:42.320
So let's just take the name or class let's copy yet let's face that here and in some parenthesis we

106
00:07:42.320 --> 00:07:48.680
need to put the capacity because the capacity is an argument of the function and that's the only argument

107
00:07:48.680 --> 00:07:49.880
we need to here.

108
00:07:50.240 --> 00:07:55.100
So what capacity are we going to choose remember that corresponds to the number of transitions the number

109
00:07:55.100 --> 00:07:59.800
of events last state you state last action and last word.

110
00:07:59.830 --> 00:08:07.550
And so as mentioned in one of the Priester toils we are going to take one hundred thousand one hundred

111
00:08:07.550 --> 00:08:14.390
thousand transitions into memory and then we will sample from this memory to get a small number of random

112
00:08:14.390 --> 00:08:18.670
transitions and that on which the model will OK.

113
00:08:18.720 --> 00:08:21.210
So now we have our memory perfect.

114
00:08:21.210 --> 00:08:23.180
Now let's get our optimizer.

115
00:08:23.430 --> 00:08:31.800
So again self we create a new variable this we call optimizer so optimizer is another variable of our

116
00:08:31.800 --> 00:08:35.320
future dequeue an object self that optimizer.

117
00:08:35.520 --> 00:08:44.130
And now if we go back up you can see that we imported tortured Upton which is a modular torch that contains

118
00:08:44.160 --> 00:08:47.080
all the tools to perform to get the grid in the center.

119
00:08:47.130 --> 00:08:54.260
So of course it contains some optimizers and we gave it the shortcut Upton and therefore here what we're

120
00:08:54.270 --> 00:09:00.900
going to do is take the model up to him which is torch's that up to him and from this module we are

121
00:09:00.900 --> 00:09:03.060
going to take one of the optimizers.

122
00:09:03.180 --> 00:09:05.670
So as you can see they're all listed here.

123
00:09:05.880 --> 00:09:10.630
Many of them are excellent for example armor's Propp is an excellent optimizer.

124
00:09:10.640 --> 00:09:16.170
There is for example highly recommended for a record of neural networks or unsupervised deep learning.

125
00:09:16.230 --> 00:09:22.140
But the other one that is excellent and that he will choose is the atom optimizer.

126
00:09:22.500 --> 00:09:26.400
That's the one you'll see that with this one will get a good self-driving car.

127
00:09:26.580 --> 00:09:32.000
But again you are totally welcome to try other ones you can try the arms prop but for metal we will

128
00:09:32.000 --> 00:09:32.810
choose Adam.

129
00:09:32.850 --> 00:09:34.290
So I'm pressing enter.

130
00:09:34.560 --> 00:09:37.240
And in fact you'll notice there is the capitol here.

131
00:09:37.260 --> 00:09:40.430
That's because we're creating an object of the Atom class.

132
00:09:40.430 --> 00:09:44.990
This is a class but the object will be an atom optimizer itself.

133
00:09:45.060 --> 00:09:50.970
But since this is a class we need to put some arguments the arguments of the Atom class and the arguments

134
00:09:51.060 --> 00:09:55.270
are all the parameters that can customize your and optimizer.

135
00:09:55.380 --> 00:10:00.330
So for example that's typically the learning rate the decay or some other parameters.

136
00:10:00.510 --> 00:10:05.690
And besides taking all the parameters of Ormeau we will specify a learning rate.

137
00:10:05.970 --> 00:10:08.650
So it's beginning of the parameters of our model.

138
00:10:08.670 --> 00:10:12.830
We can get them with self doubt model.

139
00:10:12.870 --> 00:10:17.530
So that's the model we created here self-taught model from our own class.

140
00:10:17.580 --> 00:10:24.780
So self-taught model and then to access the parameters of the model we add another dot and then parameters

141
00:10:25.500 --> 00:10:28.170
with some parenthesis very simply.

142
00:10:28.170 --> 00:10:35.860
So that's just to connect the addon optimizer to our neural network the one that we created here again

143
00:10:35.880 --> 00:10:42.810
then as we just mentioned we're going to add a learning rate and the argument for this is our.

144
00:10:43.170 --> 00:10:50.540
And we will set it equal to a value such that the learning doesn't happen too fast if we get a learning

145
00:10:50.540 --> 00:10:53.910
rate too large then the AI AI will learn properly.

146
00:10:53.910 --> 00:10:58.890
We want to give our AI some time to explore learn from its mistakes.

147
00:10:58.890 --> 00:11:04.320
You know when we punish it when it's making some mistakes like going onto some sense or getting too

148
00:11:04.320 --> 00:11:05.510
close to a wall.

149
00:11:05.770 --> 00:11:08.780
Well we want to give some time to learn.

150
00:11:08.880 --> 00:11:12.030
We want a way to the neural network to date correctly.

151
00:11:12.180 --> 00:11:21.010
And so a good value for the learning rate I ended up with after trying several of them is 0.2 or one.

152
00:11:21.210 --> 00:11:24.540
All right and that's all we need to create an optimizer.

153
00:11:24.720 --> 00:11:28.320
So basically you're creating an object of the Atom class.

154
00:11:28.530 --> 00:11:29.050
Great.

155
00:11:29.070 --> 00:11:35.980
And then the last three variables we need are the variables composing our transition events.

156
00:11:36.150 --> 00:11:40.130
So that's the last date the last action and the last word.

157
00:11:40.170 --> 00:11:45.280
And so that's basically what we'll create now and we'll just need to initialize them.

158
00:11:45.300 --> 00:11:50.130
So let's start with the last date the last date we're going to call it self-taught.

159
00:11:50.400 --> 00:11:56.000
Last underscore state and then how are you going to initialize it.

160
00:11:56.190 --> 00:12:03.840
Well remember the last date is a vector of 5 dominations a vector that is encoded in one state of the

161
00:12:03.840 --> 00:12:04.700
environment.

162
00:12:04.950 --> 00:12:10.800
And as a reminder these five dimensions are the three signals of the three sensors left straight and

163
00:12:10.800 --> 00:12:15.180
right and orientation and minus orientation.

164
00:12:15.210 --> 00:12:18.350
So this is a vector and intuitive sense.

165
00:12:18.420 --> 00:12:21.060
But for by torch it needs to be more than a vector.

166
00:12:21.210 --> 00:12:23.640
It actually needs to be a torch tensor.

167
00:12:23.820 --> 00:12:29.970
But not only it needs to be a torch sensor but also it needs to have one more dimension that I like

168
00:12:29.970 --> 00:12:33.510
to call it fake dimension that corresponds to the batch.

169
00:12:33.630 --> 00:12:39.810
And that's because the last eight will be the input of the neural network but when working with me when

170
00:12:39.810 --> 00:12:46.220
that works in general whether it is with denser flow carries a torch while the input vectors cannot

171
00:12:46.290 --> 00:12:48.040
be a simple vector by itself.

172
00:12:48.210 --> 00:12:49.760
It has to be in a batch.

173
00:12:49.830 --> 00:12:57.660
The network can only accept batch of input observations and therefore not only will create a tensor

174
00:12:57.870 --> 00:13:05.140
for input state vectors but also we will create this fake dimension corresponding to the batch.

175
00:13:05.190 --> 00:13:11.490
So let's do this and let's start by initializing a torch tensor so to do this there is nothing more

176
00:13:11.490 --> 00:13:12.340
simple.

177
00:13:12.510 --> 00:13:21.810
We take our torche library then dot and then we're going to use the tensor class because as you might

178
00:13:21.810 --> 00:13:27.950
have guessed this will create an object of the tensor class that is a tensor object.

179
00:13:28.120 --> 00:13:34.660
And in this tensor we need to put an argument which will specify the size of tensor.

180
00:13:34.660 --> 00:13:38.720
You can picture it takes you like an array having one single type.

181
00:13:38.890 --> 00:13:45.430
But basically what this will represent now is of course this input state which you can see has a vector

182
00:13:46.180 --> 00:13:49.380
and so to specify the number of elements distance must have.

183
00:13:49.570 --> 00:13:55.180
Well we need to use of course the input size because the input size is exactly the number of dimensions

184
00:13:55.510 --> 00:13:57.520
of our input state vectors.

185
00:13:57.520 --> 00:13:59.050
Now I should say tensors.

186
00:13:59.170 --> 00:14:05.650
And so what we simply need to input in our tensor class to create tensor object.

187
00:14:06.010 --> 00:14:07.260
Well that's imprecise.

188
00:14:07.540 --> 00:14:10.230
And later on input size will be quantified.

189
00:14:11.350 --> 00:14:12.430
All right that's good.

190
00:14:12.430 --> 00:14:13.670
That's the first thing done.

191
00:14:13.720 --> 00:14:17.390
We just initialized the tensor as it should be.

192
00:14:17.530 --> 00:14:23.080
But then remember we need to do another thing we need to create that fake dimension because this is

193
00:14:23.080 --> 00:14:30.070
what the network will expect for its inputs and to create this one for examination which by the way

194
00:14:30.070 --> 00:14:35.840
has to be the first time engine you know the damage you put into the batch will be the first time I

195
00:14:35.940 --> 00:14:37.800
mention this let's say very well.

196
00:14:38.230 --> 00:14:46.050
Well to do this we simply need to add that then and squeeze and then in some parenthesis.

197
00:14:46.050 --> 00:14:49.580
We need to put the index of this big dimension.

198
00:14:49.620 --> 00:14:55.790
And as I just said this fake dimension has to be the first animation of the last date and since indexes

199
00:14:55.790 --> 00:15:02.460
and bytes and started zero we need to input zero so that this new paradigm engine is becoming the first

200
00:15:02.460 --> 00:15:03.570
line engine.

201
00:15:03.570 --> 00:15:09.360
So we have a first time engine corresponding to the batch and then the diamond should respond to that

202
00:15:09.360 --> 00:15:15.960
sensor which will contain the five elements of your input states the three signals orientation and minus

203
00:15:15.990 --> 00:15:16.910
orientation.

204
00:15:17.370 --> 00:15:21.960
And then we go we initialized our input states properly.

205
00:15:21.960 --> 00:15:22.850
Perfect.

206
00:15:23.310 --> 00:15:30.840
And then two variables to go and thats going to be much easier because the next variable is the last

207
00:15:31.110 --> 00:15:31.850
action.

208
00:15:32.190 --> 00:15:36.340
Thats a new Roybal we are creating for Object last action.

209
00:15:36.510 --> 00:15:43.440
And remember in the first tutorial of the section I told you that the actions are going to be either

210
00:15:43.440 --> 00:15:52.470
0 1 or 2 and then using the action rotation vector we will convert these indexes of these actions into

211
00:15:52.470 --> 00:15:58.010
the angles of the rotation which I remind our 0 20 or minus 20.

212
00:15:58.050 --> 00:16:00.980
We can actually refresh our memory with that.

213
00:16:01.200 --> 00:16:03.170
Well it is exactly here.

214
00:16:03.170 --> 00:16:06.260
Action to rotation if the action is zero.

215
00:16:06.390 --> 00:16:11.650
Well this will correspond to the first index of zero if the action is 1.

216
00:16:11.700 --> 00:16:17.310
This will correspond to the index one of these vectors of 20 degrees and if the action is to we will

217
00:16:17.310 --> 00:16:23.490
get minus 20 degrees that's going to be the rotation angle of our car when we play the action.

218
00:16:23.510 --> 00:16:24.200
All right.

219
00:16:24.380 --> 00:16:31.040
And therefore since the action is going to be either 0 1 or 2 Well the action is there for a simple

220
00:16:31.040 --> 00:16:31.740
number.

221
00:16:31.850 --> 00:16:35.440
And so very simply we can initialize it to zero.

222
00:16:35.660 --> 00:16:38.330
We don't need to create any tens or hear anything else.

223
00:16:38.360 --> 00:16:40.880
We just need to initialize it with zero.

224
00:16:41.420 --> 00:16:42.850
And finally.

225
00:16:43.010 --> 00:16:44.460
Well that's the last word.

226
00:16:44.550 --> 00:16:48.840
It's the self that last word.

227
00:16:48.860 --> 00:16:49.940
There we go.

228
00:16:49.940 --> 00:16:56.510
And again the word is a float number which I remind is between minus 1 and plus 1.

229
00:16:56.510 --> 00:16:57.790
So that's number again.

230
00:16:57.860 --> 00:16:59.400
And as for the action.

231
00:16:59.510 --> 00:17:02.900
We will initialize it to zero and then we go.

232
00:17:02.900 --> 00:17:06.330
Congratulations are in it function is ready.

233
00:17:06.350 --> 00:17:08.930
So now we are ready to move on to the exciting stuff.

234
00:17:08.930 --> 00:17:16.040
And actually the most important thing for AI that's deciding which action to play at each time and each

235
00:17:16.080 --> 00:17:23.240
tanty And that's exactly what we're going to do in the next tutorial by creating the select action method.

236
00:17:23.510 --> 00:17:27.310
So let's do this in the next to toil and until then I.
