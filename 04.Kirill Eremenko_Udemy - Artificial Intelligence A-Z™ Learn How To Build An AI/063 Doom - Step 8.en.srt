1
00:00:00,510 --> 00:00:02,990
Hello and welcome to this Python tutorial.

2
00:00:03,240 --> 00:00:08,400
All right so now we're going to make the forward function which will propagate the output signals of

3
00:00:08,400 --> 00:00:13,550
our brain to the body of the AI so that it will play the right action to reach the vest.

4
00:00:13,770 --> 00:00:20,100
But there is no reaction yet because there is no training that we have not trained the AI yet but this

5
00:00:20,100 --> 00:00:25,920
is exactly what we will do in part to implement in deep convolutional curin which by the way I will

6
00:00:25,920 --> 00:00:29,720
rename training the AI with deep convolutional Killary.

7
00:00:29,940 --> 00:00:35,340
But right now we need to forward the signal from the output layer of the brain to the body.

8
00:00:35,370 --> 00:00:40,170
And that's exactly what we're going to do with this forward function which is the last function of our

9
00:00:40,170 --> 00:00:40,670
body.

10
00:00:41,420 --> 00:00:42,860
So let's do this.

11
00:00:42,860 --> 00:00:50,140
We start with Teff forward and according to you what arguments is it going to take.

12
00:00:50,330 --> 00:00:55,030
Well it's going to take of force first self and then is there another one.

13
00:00:55,220 --> 00:00:56,740
Well yes there is.

14
00:00:56,870 --> 00:00:58,140
And what is it going to be.

15
00:00:58,310 --> 00:01:04,700
Well very naturally we want to forward the output signal of the brain to the body and therefore the

16
00:01:04,700 --> 00:01:07,470
input will be the output signal of the brain.

17
00:01:07,850 --> 00:01:10,480
And so now we need to give a name to these outward signals.

18
00:01:10,610 --> 00:01:14,390
And so I'm going to add here the argument out put.

19
00:01:14,460 --> 00:01:21,200
All right so that corresponds to the output signals of the brain after the input images are propagated

20
00:01:21,200 --> 00:01:26,540
through all the brain to reach the output later which is X here returns by the forward function of the

21
00:01:26,540 --> 00:01:27,170
brain.

22
00:01:27,380 --> 00:01:32,480
And now this output signal of the brain will be forwarded to the body with this new forward function

23
00:01:32,480 --> 00:01:35,410
that we make in the next class.

24
00:01:35,460 --> 00:01:41,760
So let's do this let's add some color in here and now as you understood it we're going to use soughed

25
00:01:41,870 --> 00:01:43,940
next method to play the action.

26
00:01:43,940 --> 00:01:49,820
That means that the body of our AI after receiving the output signals of the brain will play the actions

27
00:01:49,820 --> 00:01:51,440
with the next technique.

28
00:01:51,440 --> 00:01:56,510
So basically now what we have to do is exactly the same as what we did for the car.

29
00:01:56,600 --> 00:01:59,390
We're going to get our distribution of probabilities.

30
00:01:59,540 --> 00:02:05,960
That's the first step and then we're going to sample an action according to this distribution of probabilities.

31
00:02:05,960 --> 00:02:11,510
So basically what we could do now is get our self-driving car file and copy paste what we implemented

32
00:02:11,510 --> 00:02:14,570
for the select actually function in the self-driving car.

33
00:02:14,810 --> 00:02:15,700
But let's do it again.

34
00:02:15,710 --> 00:02:19,710
It will be good practice and actually you can try to type it before me.

35
00:02:20,150 --> 00:02:23,870
OK so first what we're going to do is get our probabilities.

36
00:02:23,870 --> 00:02:29,930
So I remind this is a distribution of probabilities for each of the q values which depend on the input

37
00:02:29,960 --> 00:02:31,790
image and each action.

38
00:02:31,790 --> 00:02:38,120
So we have one key value for each of the six or seven possible actions and therefore we get a distribution

39
00:02:38,120 --> 00:02:43,600
of seven probabilities and then 7 because I think there are seven actions instead of six.

40
00:02:43,670 --> 00:02:50,010
Because besides moving for left right or shooting we can also run that makes seven possible actions

41
00:02:50,420 --> 00:02:57,260
and therefore we get a distribution of seven probabilities one for each q value associated to each action.

42
00:02:57,260 --> 00:02:58,930
So Propst equals.

43
00:02:59,040 --> 00:03:00,670
And now remember what we had to do.

44
00:03:00,860 --> 00:03:06,650
Well basically we have to use the soughed max function from the functional module.

45
00:03:06,680 --> 00:03:13,010
That's very simple we take our functional module first then do that and then we take our soughed next

46
00:03:13,130 --> 00:03:13,700
function.

47
00:03:13,700 --> 00:03:14,480
Here it is.

48
00:03:14,570 --> 00:03:22,430
We press enter and now we put the arguments of the next function which I remind are the elements for

49
00:03:22,430 --> 00:03:25,290
which you want to create a distribution of probabilities.

50
00:03:25,550 --> 00:03:30,560
And so that's of course the q values that is the outputs of the neural network.

51
00:03:30,680 --> 00:03:35,830
That's the output of the neural network for which you want to create a distribution of probabilities.

52
00:03:35,990 --> 00:03:41,270
Now remind us we want to create this distribution of probabilities to be able to explore the different

53
00:03:41,270 --> 00:03:45,760
actions instead of directly picking the one that has the maximum Q value.

54
00:03:46,010 --> 00:03:51,020
If we directly pick the one that has the maximum Q value where we don't explore much the other actions

55
00:03:51,350 --> 00:03:52,650
and we might miss something.

56
00:03:52,880 --> 00:03:58,760
But with this soughed next method we can do some more exploration and therefore maybe find some hidden

57
00:03:58,760 --> 00:04:01,520
solutions in the patterns that might be much better.

58
00:04:01,850 --> 00:04:08,060
So again I highly recommend stuff Nax and then from now what we have to do is input the values that

59
00:04:08,060 --> 00:04:09,560
is our output here.

60
00:04:09,560 --> 00:04:13,860
The outputs of our brain so outputs that we go.

61
00:04:13,970 --> 00:04:21,710
But then we have this temperature parameter that we can use that we can configure to customize the exploration.

62
00:04:21,710 --> 00:04:28,130
Remember that the higher we set the temperature the less exploration of the other actions will do because

63
00:04:28,130 --> 00:04:33,260
the best action will be selected with a higher probability as opposed to the other actions which will

64
00:04:33,260 --> 00:04:35,910
be selected with lower probabilities.

65
00:04:35,930 --> 00:04:42,620
That's exactly like with a in car and therefore we have to multiply the output here by our temperature

66
00:04:43,010 --> 00:04:51,800
parameter t that we get perfect now we get a little warning because we haven't used preps yet but we

67
00:04:51,810 --> 00:04:53,220
are about to use it now.

68
00:04:53,260 --> 00:04:55,540
And so that brings us to the next thing we have to do.

69
00:04:55,540 --> 00:04:57,750
How are we going to use these probabilities.

70
00:04:57,910 --> 00:05:04,390
Well we're going to sample the final action to play from this distribution of probabilities and therefore

71
00:05:04,990 --> 00:05:10,960
what we have to do now is use the multinomial function to sample the action according to this distribution

72
00:05:10,960 --> 00:05:12,080
of probabilities.

73
00:05:12,370 --> 00:05:15,030
So now we're ready to get our actions.

74
00:05:15,190 --> 00:05:20,500
So I'm creating a new Voivode here because that will become actions that will be played by the body

75
00:05:20,500 --> 00:05:21,490
of our AI.

76
00:05:21,520 --> 00:05:30,330
And so now we take our distribution of probabilities probs to which we add dots and then the multi normal

77
00:05:30,880 --> 00:05:31,480
method.

78
00:05:32,220 --> 00:05:38,030
All right and now we get our final actions to play there assembled from our props distribution.

79
00:05:38,430 --> 00:05:39,570
Okay perfect.

80
00:05:39,570 --> 00:05:42,300
So now we were ready to return what we want.

81
00:05:42,360 --> 00:05:44,450
That is the action to play.

82
00:05:44,670 --> 00:05:48,720
And these are of course actions and now the warning should disappear.

83
00:05:48,840 --> 00:05:50,440
We use everything we want.

84
00:05:50,460 --> 00:05:51,270
There we go.

85
00:05:51,270 --> 00:05:52,020
Perfect.

86
00:05:52,210 --> 00:05:53,950
So now the forward function is ready.

87
00:05:54,080 --> 00:05:55,740
And congratulations.

88
00:05:55,800 --> 00:05:57,300
The body is also ready.

89
00:05:57,540 --> 00:05:59,070
So now we have our brain.

90
00:05:59,190 --> 00:06:05,760
We have our body and therefore we're ready to assemble them to make the future AI our future AI I will

91
00:06:05,760 --> 00:06:08,900
be composed of nothing else than a brain and a body.

92
00:06:08,970 --> 00:06:14,160
And so it's what have intelligence and a body to play the actions which will be the right actions to

93
00:06:14,160 --> 00:06:16,610
play thanks to its intelligence.

94
00:06:16,620 --> 00:06:22,060
But remember before we have to train it's intelligence and that's what we'll do in part to training

95
00:06:22,070 --> 00:06:25,180
the eye with the convolutional cool learning.

96
00:06:25,200 --> 00:06:25,500
All right.

97
00:06:25,500 --> 00:06:28,470
So let's make the AI in the next toils.

98
00:06:28,490 --> 00:06:31,810
It's again going to be a class of two functions I think.

99
00:06:31,950 --> 00:06:34,510
And so this one requires two or three tutorials.

100
00:06:34,680 --> 00:06:35,660
So I can't wait.

101
00:06:35,670 --> 00:06:36,780
This will be exciting.

102
00:06:36,780 --> 00:06:37,930
And until then I.
