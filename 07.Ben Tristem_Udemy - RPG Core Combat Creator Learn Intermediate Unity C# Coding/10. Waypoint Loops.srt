1
00:00:04,240 --> 00:00:05,470
Hello and welcome in this lecture.

2
00:00:05,470 --> 00:00:12,040
We aren't going to be visualizing waypoint loops so that you can see the path that your enemy is going

3
00:00:12,040 --> 00:00:16,330
to take we're gonna be doing this by drawing lines between them and everything that we need to know

4
00:00:16,630 --> 00:00:17,500
in order to do that.

5
00:00:17,500 --> 00:00:23,410
Let's dive in and see how so the issue with these waypoints at the moment is they don't give us any

6
00:00:23,410 --> 00:00:26,230
indication of what comes when.

7
00:00:26,230 --> 00:00:26,630
Right.

8
00:00:26,710 --> 00:00:30,880
Do I start on this waypoints and then go over to that one then I to that one then back to this one and

9
00:00:30,880 --> 00:00:31,700
then back to that one.

10
00:00:31,810 --> 00:00:32,300
Is it.

11
00:00:32,740 --> 00:00:37,170
There's no indication at the moment what the path is we've got waypoints but no path.

12
00:00:37,600 --> 00:00:40,750
So how are we going to visualize the path.

13
00:00:40,750 --> 00:00:42,460
Well we've already seen that we can draw.

14
00:00:42,490 --> 00:00:47,080
We want to draw lines between these now drawing lines is fairly straightforward.

15
00:00:47,080 --> 00:00:55,450
We do something like gizmos dot draw the line and we need to tell it where to start the line and where

16
00:00:55,450 --> 00:00:56,740
to end the line.

17
00:00:56,770 --> 00:00:58,390
So that seems pretty straightforward.

18
00:00:58,390 --> 00:01:07,360
We've got this transform get child position currently and we want to get the next position as well.

19
00:01:07,360 --> 00:01:09,400
So how is that going to work.

20
00:01:09,400 --> 00:01:13,740
Well I'm going to start off by extracting this because we're using it in more than one place already.

21
00:01:13,750 --> 00:01:19,120
And usually we wait for three places but I think it's going to be sensible to extract at this stage

22
00:01:19,600 --> 00:01:25,330
so I'm going to extract it says it's automatically named to get position I want to call it get waypoints

23
00:01:26,740 --> 00:01:32,650
and that's getting us the position of the waypoint with index i.

24
00:01:32,800 --> 00:01:38,320
Now actually this is going to be useful later on when we are trying to access this from the A.I. in

25
00:01:38,320 --> 00:01:42,450
order to move to our different waypoints but we'll make it public at that point.

26
00:01:42,460 --> 00:01:43,030
Not yet.

27
00:01:43,870 --> 00:01:44,270
Okay.

28
00:01:44,280 --> 00:01:45,980
So we're going to get the waypoint I.

29
00:01:46,000 --> 00:01:48,180
That's the first thing right.

30
00:01:48,180 --> 00:01:54,040
We were going to draw a line from waypoint AI and then we're going to do it to waypoint b basically

31
00:01:54,040 --> 00:01:54,780
waypoints.

32
00:01:54,830 --> 00:01:56,490
I'm going to call it waypoint J.

33
00:01:56,690 --> 00:01:57,050
OK.

34
00:01:57,100 --> 00:01:59,040
So I and J.

35
00:01:59,080 --> 00:02:02,110
Now the problem here is that we don't have a J.

36
00:02:02,280 --> 00:02:05,630
So I'm going to have to have an int j.

37
00:02:05,730 --> 00:02:15,780
And you might be tempted to say that J is I plus 1 OK so that is a good start but not quite good enough.

38
00:02:15,790 --> 00:02:19,450
It's not going to be the solution to our problem.

39
00:02:19,450 --> 00:02:26,090
So I'm just going to encapsulate this into a function extract the method out called get J.

40
00:02:26,380 --> 00:02:31,810
We're gonna call it get next index like so.

41
00:02:31,810 --> 00:02:37,870
So we pass in the current index and it returns as the next index and at the moment it's told that it

42
00:02:38,110 --> 00:02:42,320
could be static which is quite cool that it could figure that out for itself.

43
00:02:42,340 --> 00:02:45,190
Okay so that's great.

44
00:02:45,190 --> 00:02:51,230
But as I said this already has a problem and I think you might be able to work that out for yourself.

45
00:02:51,250 --> 00:02:55,280
So as we said the basic case is fairly easy just plus one to I.

46
00:02:55,330 --> 00:02:56,700
But what is the corner case.

47
00:02:56,710 --> 00:02:57,420
Think about it.

48
00:02:57,430 --> 00:03:00,630
Where is that not going to be correct.

49
00:03:00,660 --> 00:03:06,260
Whereas that's not going to create the loop that we want because by the end of the challenge what I

50
00:03:06,260 --> 00:03:12,920
would like to see is that your patrol path looks something like this one pulls a video and see if you

51
00:03:12,920 --> 00:03:15,260
can implement get index get next index.

52
00:03:15,320 --> 00:03:18,200
So it works like this okay.

53
00:03:18,200 --> 00:03:19,180
Welcome back.

54
00:03:19,190 --> 00:03:24,090
So the corner case that we're thinking about is if this is the first one then it's got a next right.

55
00:03:24,140 --> 00:03:25,390
Zero goes to one.

56
00:03:25,580 --> 00:03:26,720
One goes to two.

57
00:03:26,760 --> 00:03:32,630
Two goes to three but then three has to go to zero so that's not plus one anymore.

58
00:03:32,630 --> 00:03:37,700
Now those of you who know about modulo arithmetic might be screaming that that is the perfect time to

59
00:03:37,700 --> 00:03:38,990
use modulo arithmetic.

60
00:03:38,990 --> 00:03:42,280
I don't want to confuse those of you who don't know what that is.

61
00:03:42,290 --> 00:03:50,300
So there is a simple way of doing this that is to say well if we are currently at the child transform

62
00:03:50,300 --> 00:03:50,840
count.

63
00:03:50,870 --> 00:04:03,110
So if the index plus 1 is equal to and we could probably just say for safety is greater than or equal

64
00:04:03,110 --> 00:04:11,750
to the transform dot child count then what we want to actually return is zero.

65
00:04:11,840 --> 00:04:15,920
In fact that's not quite correct for greater than equal to so I'm going to go with equal to.

66
00:04:15,940 --> 00:04:19,590
So if I plus one is equal to the child count.

67
00:04:19,600 --> 00:04:26,900
So for example if I've got three children and the eye I've got is two.

68
00:04:26,950 --> 00:04:28,540
That means it's the last element.

69
00:04:28,540 --> 00:04:28,870
Right.

70
00:04:28,870 --> 00:04:30,690
It's the last child.

71
00:04:30,790 --> 00:04:32,680
So the next element has to be zero.

72
00:04:32,680 --> 00:04:34,600
You have to start from scratch again.

73
00:04:34,630 --> 00:04:37,640
Now notice it's saying I can't use transform in here.

74
00:04:37,690 --> 00:04:43,340
So I need to remove that static because I need to be able to say how many children I've gotten.

75
00:04:43,390 --> 00:04:47,320
Repeat round that loop accurately and so will return zero.

76
00:04:47,320 --> 00:04:50,250
Otherwise we're just going to return a plus one.

77
00:04:50,260 --> 00:04:51,340
So that should do the trick.

78
00:04:51,340 --> 00:04:54,040
Let's see if it is working.

79
00:04:54,040 --> 00:04:54,570
Okay.

80
00:04:54,580 --> 00:04:59,270
So this is now showing us the path and it's not the path we were expecting is it.

81
00:04:59,360 --> 00:05:07,810
There's the waypoints one if I go into my scene view we can see that waypoint one is this one here then

82
00:05:07,810 --> 00:05:15,150
waypoint two goes over here then waypoint 3 I'm naming them wrong ready waypoint 0 is here waypoint

83
00:05:15,190 --> 00:05:22,240
one is here waypoint 2 is here and waypoint 3 is here so it kind of it's it's a zigzag patrol what about

84
00:05:22,240 --> 00:05:30,960
this set of waypoints over here so what waypoint one here waypoint two there three there and four is

85
00:05:30,960 --> 00:05:37,570
in the same location so if I pull that out you can see how the path is following in the right way that's

86
00:05:37,570 --> 00:05:43,480
exactly what we would like it to do so we can now create our waypoints the more items we add the more

87
00:05:43,480 --> 00:05:48,700
waypoints we add I can duplicate and add another waypoint item in here knows it's an addition to our

88
00:05:48,700 --> 00:05:55,500
prefab which is fine you can go ahead and modify the path in this way you can select a waypoint not

89
00:05:55,500 --> 00:06:02,440
very easily I think you have to do it from the hierarchy but if you do do it from the hierarchy then

90
00:06:02,470 --> 00:06:07,990
you are golden you're able to select a waypoint this waypoint zero and I want to add one between here

91
00:06:07,990 --> 00:06:14,150
and here I can just duplicate it mood shift it in the order of the hierarchy which is a little bit hard

92
00:06:14,150 --> 00:06:20,480
to do and you can basically modify things around you might want to take things out of prefabs or break

93
00:06:20,480 --> 00:06:29,700
the prefabs if you must but basically you can create the waypoints that you want so I'm sure at this

94
00:06:29,700 --> 00:06:34,080
point you're saying okay Sam I've had up to here with waypoints I want to actually implement some guard

95
00:06:34,080 --> 00:06:37,200
behaviour and that's gonna be the subject of the next lecture so join me that.
