1
00:00:04,730 --> 00:00:05,780
Welcome in this lecture.

2
00:00:05,780 --> 00:00:11,900
We are going to be figuring out how close the player is to any given enemy so that if I move within

3
00:00:11,900 --> 00:00:14,800
range of an enemy it starts printing that.

4
00:00:14,950 --> 00:00:16,320
It should give chase.

5
00:00:16,490 --> 00:00:21,410
And if I move in range of multiple enemies you can see that they all are saying that they should give

6
00:00:21,500 --> 00:00:24,620
chase that will be the subject of the next lecture actually giving chase.

7
00:00:24,620 --> 00:00:27,920
But in this lecture we are going to be figuring out that condition.

8
00:00:27,950 --> 00:00:28,920
Let's jump in.

9
00:00:29,210 --> 00:00:32,480
The most boring thing about these enemies is they just don't put up a fight.

10
00:00:32,480 --> 00:00:36,600
I can walk up to them and punch their friend in the face and.

11
00:00:36,620 --> 00:00:38,200
Well nothing happens.

12
00:00:38,240 --> 00:00:42,780
He just carries on and they all watch as he gets punched to death.

13
00:00:42,800 --> 00:00:47,040
So obviously that's no good we want to give them a bit of panache a bit of jazz.

14
00:00:47,090 --> 00:00:55,250
So what we're gonna do is create in the control namespace a new script which is going to be create C

15
00:00:55,250 --> 00:00:59,660
sharp script let's do that and it's gonna be the A.I. controller.

16
00:00:59,660 --> 00:01:01,600
We've had the player control that.

17
00:01:01,610 --> 00:01:03,590
Now we have the A.I. controller.

18
00:01:03,950 --> 00:01:09,980
So let's open that up and I'm going to start by removing start and update we can always add those back

19
00:01:09,980 --> 00:01:11,080
later if we want to.

20
00:01:11,090 --> 00:01:17,330
And I'm going to cut this to put it in a namespace of RPG control.

21
00:01:17,660 --> 00:01:21,500
Same namespace as the player controller.

22
00:01:21,950 --> 00:01:29,780
And then we are going to take this A.I. controller and what was the first thing we want to do with an

23
00:01:29,810 --> 00:01:30,650
A.I. controller.

24
00:01:31,490 --> 00:01:37,040
Well I think that what we're going to need first is the ability for them to know whether they should

25
00:01:37,040 --> 00:01:38,110
start attacking us or not.

26
00:01:38,120 --> 00:01:42,620
Because if I'm over here walking down the path there's no good them attacking me already otherwise all

27
00:01:42,620 --> 00:01:44,950
the enemies in the level are going to come up to me.

28
00:01:45,050 --> 00:01:48,860
So we're gonna need to know at what distance they should start chasing me.

29
00:01:49,250 --> 00:01:51,640
The chase distance hence the name of this lecture.

30
00:01:52,580 --> 00:01:54,440
Well that's gonna be a parameter to start with.

31
00:01:54,440 --> 00:01:56,390
So what distance should they do it.

32
00:01:56,390 --> 00:02:01,430
Well let's do a serialized field to decide that it's gonna be a float because it's a distance and we're

33
00:02:01,430 --> 00:02:07,550
going to have the chase distance and I'm going to start off with AIDS fault maybe a five meters like

34
00:02:07,550 --> 00:02:15,800
so 5 unity units like so then what's gonna be the next thing we need we're going to need to check exactly

35
00:02:15,800 --> 00:02:19,310
every frame whether the player is within the chase distance or not.

36
00:02:19,310 --> 00:02:20,650
So this is gonna be every frame.

37
00:02:20,660 --> 00:02:22,460
It's gonna be an update thing.

38
00:02:22,460 --> 00:02:25,770
And how are we going to check with the player.

39
00:02:26,150 --> 00:02:32,710
Well first thing is we need to actually get hold of the player and how do we get hold of the player.

40
00:02:32,730 --> 00:02:39,180
Well there's a number of options for example you could do it by finding a object that has the player

41
00:02:39,180 --> 00:02:40,570
controller on it.

42
00:02:40,620 --> 00:02:48,090
For example you could look for an object that has the name player but both of these options are quite

43
00:02:48,090 --> 00:02:53,940
expensive and unity builds in a way for us to do this more efficiently with the tank system.

44
00:02:53,940 --> 00:02:59,130
So if we open up the player prefab because I want to do this Wherefore I include the player.

45
00:02:59,310 --> 00:03:04,460
We can look for the tag next to the name just underneath the name and the inspector.

46
00:03:04,530 --> 00:03:09,870
And here we've got a few options and in fact the player is one of the tags that's in there.

47
00:03:09,870 --> 00:03:13,670
By default you can add custom tags if you want to but players already there.

48
00:03:13,670 --> 00:03:14,990
So we're going to use it.

49
00:03:15,210 --> 00:03:19,040
And you can see is an override here in the player variant.

50
00:03:19,070 --> 00:03:22,020
That's what we want because we don't want it to apply to all characters.

51
00:03:22,020 --> 00:03:25,040
So if we look at the enemies they are untaxed.

52
00:03:25,140 --> 00:03:30,990
If we look at the player he's tagged with player so we can now get hold of his game object by doing

53
00:03:30,990 --> 00:03:39,060
game object dot find with tag and then it's a string reference thing.

54
00:03:39,060 --> 00:03:45,870
So you know go carefully typed carefully this case we can't copy and paste from there very easily.

55
00:03:45,900 --> 00:03:49,260
So I'm just going to type in player and be very careful about it.

56
00:03:49,320 --> 00:03:49,700
Okay.

57
00:03:49,770 --> 00:03:51,240
So we've found the game object.

58
00:03:51,240 --> 00:03:55,350
This is going to return a game object I believe.

59
00:03:55,380 --> 00:03:59,520
Let's just check that can hover over to see what the expected return type is.

60
00:03:59,550 --> 00:04:01,020
It wasn't giving me an error right now.

61
00:04:01,350 --> 00:04:03,300
Yes it's a return type of game object.

62
00:04:03,300 --> 00:04:06,840
So this is going to be the player game object like so.

63
00:04:07,830 --> 00:04:13,110
And from this we can obviously find things like the player's current location.

64
00:04:13,110 --> 00:04:19,410
So you're part of the challenge is going to be to figure out whether we should be giving chase or not.

65
00:04:19,410 --> 00:04:23,850
By this I mean you need to calculate the distance to the player.

66
00:04:23,850 --> 00:04:28,890
You've done a bit of distance calculation before so we can do it again between the enemy current enemy

67
00:04:28,950 --> 00:04:30,540
and the player.

68
00:04:30,540 --> 00:04:33,200
You're going to need to print if we should chase.

69
00:04:33,230 --> 00:04:35,240
Oh and by the way before I forget.

70
00:04:35,250 --> 00:04:36,550
This might trip you up.

71
00:04:36,600 --> 00:04:39,080
We I control is not yet on the enemy prefab.

72
00:04:39,090 --> 00:04:44,150
So if we open up the enemy prefab we can add in the A.I. controller as a script.

73
00:04:44,150 --> 00:04:50,940
I don't want that to trip you up unnecessarily so we should print if we should give chase and a little

74
00:04:50,940 --> 00:04:57,900
bonus for you that you can have a go at if you feel confident is to include the name of the enemy of

75
00:04:57,900 --> 00:05:03,360
the game object of the enemy in that print statement so that you can distinguish which ones should give

76
00:05:03,360 --> 00:05:03,690
chase.

77
00:05:03,720 --> 00:05:08,820
So if I'm standing over here and I'm within the chase distance of this guy then the other ones aren't

78
00:05:08,820 --> 00:05:13,860
printing that they should give chase and we can be able to see that all in the log what I mean is this

79
00:05:13,860 --> 00:05:16,470
name here the enemy enemy one enemy too.

80
00:05:16,500 --> 00:05:18,600
That's what we should be able to see.

81
00:05:18,720 --> 00:05:19,230
Okay.

82
00:05:19,230 --> 00:05:24,110
So without further ado I'll let you get on with that challenge.

83
00:05:24,110 --> 00:05:24,530
Welcome back.

84
00:05:24,530 --> 00:05:27,000
Hopefully that was an all right challenge.

85
00:05:27,000 --> 00:05:29,460
Do let me know if things are a little bit too tricky.

86
00:05:29,450 --> 00:05:36,260
I need to dial the challenges down and give you more hints so our player is the place we want to start.

87
00:05:36,290 --> 00:05:38,240
So he's got a location.

88
00:05:38,240 --> 00:05:40,010
How do we find the distance between them.

89
00:05:40,040 --> 00:05:47,880
Well we've done this before it's a vector three dot distance like so just to show you in case you don't

90
00:05:47,880 --> 00:05:51,840
believe me we've done this before in fighter that's how we've done it before and it's even been a boolean

91
00:05:51,840 --> 00:05:54,450
to see whether we're in the weapon range or not.

92
00:05:54,450 --> 00:05:56,650
So it's very very similar in many ways.

93
00:05:56,850 --> 00:06:04,620
So we're gonna do the distance between the player dot transform dot position and the current transform

94
00:06:05,580 --> 00:06:09,150
dot position which is gonna give us the position of the enemy.

95
00:06:09,510 --> 00:06:15,510
And that's the distance and I could even extract this out into a function that's control plus extract

96
00:06:15,510 --> 00:06:26,130
method and I'm going to call this the distance to play out like so and I can even put this find with

97
00:06:26,130 --> 00:06:33,090
tag in there like so and because it's a cheap operation I don't mind repeating this a few times that

98
00:06:33,090 --> 00:06:40,530
need then the name I don't need the argument being passed in rather so distance and then we can say

99
00:06:40,590 --> 00:06:48,750
if the distance to the player is less than the chase distance well then we are to give chase is the

100
00:06:48,750 --> 00:06:49,400
name of the game.

101
00:06:49,410 --> 00:06:58,610
So we're gonna print saying should chase something like that like that and we'll figure out how to actually

102
00:06:58,610 --> 00:07:01,680
give chase in the next video.

103
00:07:01,670 --> 00:07:07,010
OK so let's just see what that's working then we can have a go at the bonus as well.

104
00:07:07,240 --> 00:07:10,730
I hit play and country they're all saying that they should give chase.

105
00:07:10,730 --> 00:07:12,100
Let's go to the end of the log.

106
00:07:12,320 --> 00:07:15,520
And now they've stopped saying that they should give chase but clear the log.

107
00:07:15,530 --> 00:07:17,020
No more coming in.

108
00:07:17,050 --> 00:07:22,100
I got back in and they're all giving chase and you can see I can go in and out of the chase radius like

109
00:07:22,100 --> 00:07:23,060
so.

110
00:07:23,150 --> 00:07:29,600
So the next thing to do was the bonus to see if I could print out the game objects name so I can do

111
00:07:29,600 --> 00:07:36,800
this by getting a hold of the game object of this particular component and then do dot name.

112
00:07:36,800 --> 00:07:38,210
And that should pretty much do the trick.

113
00:07:38,330 --> 00:07:41,450
So plus the string should give chase.

114
00:07:41,540 --> 00:07:50,030
So if I gave play then in the console log if I go to the bottom again I want to make sure I'm all the

115
00:07:50,030 --> 00:07:57,710
way at the bottom then what we see here is the enemy one enemy and enemy 2 should give chase but I can

116
00:07:57,710 --> 00:08:02,300
move to just having enemy to need to give chase which is the closest one to me.

117
00:08:02,300 --> 00:08:05,780
And you can see that that's working individually for each enemy.

118
00:08:05,780 --> 00:08:11,470
This is often a useful trick by the way to include the name of the game object in a print statement.

119
00:08:11,480 --> 00:08:16,430
If you've got multiple of those print statements clogging up the a log and you can't tell which one

120
00:08:16,460 --> 00:08:17,510
you actually want.

121
00:08:17,510 --> 00:08:23,270
And also if you ever want to debug something just a little tick a little tip is that you can always

122
00:08:23,270 --> 00:08:27,440
say something like Game Objects dot name equals.

123
00:08:27,440 --> 00:08:34,040
I don't know enemy if you want to only print stuff for that particular enemy or you could do a game

124
00:08:34,070 --> 00:08:41,120
object dot tag equals player for example if you want to just print stuff for the player and that can

125
00:08:41,120 --> 00:08:42,650
be very useful for debugging stuff.

126
00:08:42,650 --> 00:08:47,870
Sometimes when you get loads of log messages for every single script so good job.

127
00:08:47,880 --> 00:08:54,810
What we have done there is we have set up logic to decide whether we should chase or not depending on

128
00:08:54,900 --> 00:08:57,060
the player's current position in the next lecture.

129
00:08:57,060 --> 00:09:00,750
We will actually make that chase and attack start to happen.
