1
00:00:04,370 --> 00:00:05,180
Hello and welcome.

2
00:00:05,180 --> 00:00:12,200
In this lecture we are going to be making it so that when we change what's in our file and we go back

3
00:00:12,200 --> 00:00:18,230
to our project and we load from the file we can actually print out the text value even though the file

4
00:00:18,230 --> 00:00:23,090
contains binary we can convert it back into text so we're gonna learn about how to convert back to text

5
00:00:23,090 --> 00:00:24,580
and how to read from files.

6
00:00:24,620 --> 00:00:30,880
In this lecture let's dive in so before we go any further I would like to point out how error prone

7
00:00:30,880 --> 00:00:34,890
it is to open a stream and have to remember to close it.

8
00:00:35,080 --> 00:00:40,030
And it's even more error prone because any of the code in between opening the stream and closing it

9
00:00:40,300 --> 00:00:41,530
could throw an exception.

10
00:00:41,530 --> 00:00:46,330
For example if there is no way of converting this particular string into this particular encoding they

11
00:00:46,330 --> 00:00:52,540
might throw an exception and that would circumvent the closing mechanism and the stream would not get

12
00:00:52,540 --> 00:00:57,140
closed and we would get a leaked file handle which could potentially lead to problems.

13
00:00:57,160 --> 00:00:58,840
So how do we avoid this.

14
00:00:58,840 --> 00:01:00,960
Well C sharp has a system built in.

15
00:01:01,090 --> 00:01:07,480
And if you use using by using keyword in this way not like the way we've usually used at the top of

16
00:01:07,480 --> 00:01:13,780
the file but using then followed by round brackets around the statement you want to protect which in

17
00:01:13,780 --> 00:01:19,870
this case is this file open and it needs to have the whole line the assignment in as well.

18
00:01:19,960 --> 00:01:25,810
Because if you think about it if we tried to pull this file open out of here it would no longer be protected.

19
00:01:25,870 --> 00:01:32,830
And then what happens is after this we can have this basically behave like an if statement or a full

20
00:01:32,830 --> 00:01:37,510
loop and we can put the code we want to use the stream in here.

21
00:01:37,510 --> 00:01:43,390
In fact you can see the streams no longer accessible outside of these using statements brackets and

22
00:01:43,390 --> 00:01:49,300
the cool thing about this is that once you leave the using statement whether it's because you came naturally

23
00:01:49,300 --> 00:01:55,540
to an end or you returned out of it if you did an early return in here for example at the beginning

24
00:01:56,200 --> 00:01:58,250
it would also call close.

25
00:01:58,310 --> 00:02:02,760
Basically anything you do to exit this using statement is going to call close on the file stream.

26
00:02:02,770 --> 00:02:04,740
So we can't forget to do it.

27
00:02:04,780 --> 00:02:05,950
It's just good habit.

28
00:02:05,960 --> 00:02:11,530
Whenever you're using a resource like a file stream you do it inside a using like this so that we know

29
00:02:11,530 --> 00:02:12,970
it will get cleared up.

30
00:02:13,030 --> 00:02:17,660
It also makes it easier to check for correctness when you're coming back to read this later on.

31
00:02:17,680 --> 00:02:25,180
Now what we can do for loading is very much the same as what we do for the opening a file stream the

32
00:02:25,180 --> 00:02:28,270
file stream can be used for both reading and writing by the way.

33
00:02:28,270 --> 00:02:33,150
So that means that there are methods on there to do reading as well.

34
00:02:33,190 --> 00:02:38,100
Now I'm going to give you as a mini challenge to open this file for reading.

35
00:02:38,110 --> 00:02:43,030
For that you might need to look at the documentation from last lecture on the file mode and what file

36
00:02:43,030 --> 00:02:44,530
mode you might need to use.

37
00:02:45,210 --> 00:02:45,510
OK.

38
00:02:45,550 --> 00:02:47,280
So I'm going to go ahead and do this.

39
00:02:47,290 --> 00:02:52,900
And basically it's almost an exact copy I'm going to use the using statement this time.

40
00:02:52,900 --> 00:03:00,250
So we don't forget to close it the path we're going to copy that up from the saving as well and we can

41
00:03:00,250 --> 00:03:05,110
use that in our print statement like so and what's our file mode.

42
00:03:05,110 --> 00:03:07,870
We don't want to create the file we don't want be overwriting it.

43
00:03:07,870 --> 00:03:14,740
We want to open and not open or create because we might be we don't want to be loading from an empty

44
00:03:14,740 --> 00:03:15,210
file.

45
00:03:15,220 --> 00:03:18,130
We only want to be loading for a file that already exists.

46
00:03:18,130 --> 00:03:24,700
So I'm just going to use file mode open which unlike create is not going to overwrite the file but instead

47
00:03:24,700 --> 00:03:30,670
will allow us to read what's already there and then we've got access to reading methods like this.

48
00:03:30,670 --> 00:03:33,500
We could read one bite at a time like we did before.

49
00:03:33,700 --> 00:03:40,570
Or alternatively we can do this read method which is a bit interesting looking this read method basically

50
00:03:40,570 --> 00:03:46,900
takes a byte array in and an offset and count so it looks a lot like the right method we had about above

51
00:03:47,650 --> 00:03:54,070
but this time what it's gonna do is it's going to write into this byte array so the byte array is what

52
00:03:54,070 --> 00:04:00,640
is known as a buffer and a buffer is basically a piece of allocated memory memory that we have created

53
00:04:01,030 --> 00:04:05,980
for something else to fill in and it's quite common when dealing with file operations so I'm going to

54
00:04:05,980 --> 00:04:12,790
call this the byte buffer and we are going to create a new byte array and we need to think about how

55
00:04:12,790 --> 00:04:15,190
long should this byte array be.

56
00:04:15,190 --> 00:04:21,340
Now typically you would allocate the byte array to be a certain size a specific fixed constant size

57
00:04:21,670 --> 00:04:26,040
and then you would iterate over the file in chunks and do whatever you need to do with it in chunks

58
00:04:26,050 --> 00:04:31,570
because think about it a file could be multiple gigabytes in size and your memory might not be able

59
00:04:31,570 --> 00:04:32,840
to fit all of it in.

60
00:04:32,890 --> 00:04:37,840
Which is why we need to use buffers and write to it a little bit at a time and often we can use I enumerators

61
00:04:38,170 --> 00:04:43,450
to lazily do operations on bits of this file but in our case our file is going to be small enough because

62
00:04:43,450 --> 00:04:49,490
we've just writing small messages into it so we can just get the length of the whole file stream streamed

63
00:04:49,490 --> 00:04:55,390
at length and that's going to tell us how many bytes are in the whole file and that's great.

64
00:04:55,390 --> 00:04:56,250
That's a good start.

65
00:04:56,290 --> 00:05:02,220
And that's going to be the size of our buffer which means that we can read into the buffer we can pass

66
00:05:02,220 --> 00:05:09,670
in that buffer and we can tell it hey why don't you start at 0 start reading into it at the offset 0

67
00:05:09,670 --> 00:05:15,130
at the beginning of the buffer basically and finish reading into it at its length which should be the

68
00:05:15,130 --> 00:05:16,120
same as the land.

69
00:05:16,150 --> 00:05:22,980
So buffer dot length like so now you'll notice that actually the Reid operation does return an integer

70
00:05:23,020 --> 00:05:29,290
actually tells you how many bytes it successfully read in our case it should be exactly the same number

71
00:05:29,290 --> 00:05:33,670
as this stream length and the buffer length because we're trying to read in the whole file.

72
00:05:33,670 --> 00:05:39,580
But if you had given it a buffer with a smaller length then it might be the length of the buffer.

73
00:05:39,640 --> 00:05:43,790
Or if there wasn't enough data left in the file it might be even less than that.

74
00:05:43,840 --> 00:05:49,300
But this is all out of interest at this point because we are just going to be reading it all in one

75
00:05:49,300 --> 00:05:53,040
go but it's just a justification of why the API looks like this.

76
00:05:53,050 --> 00:05:58,610
And that's also why the right API looks like that because often we are reading using a buffer that we've

77
00:05:58,630 --> 00:06:04,060
been reading from another file and writing out from that buffer into another file and so this is why

78
00:06:04,060 --> 00:06:05,700
the API is tend to look like this.

79
00:06:05,700 --> 00:06:08,470
And there are quite low levels so that's okay.

80
00:06:08,500 --> 00:06:14,940
I just noticed that I cut the path variable from the Save method and we shouldn't have cut it.

81
00:06:15,130 --> 00:06:21,890
So hopefully now we have got a buffer which is the right length that has read from the file but it is

82
00:06:21,900 --> 00:06:24,420
in bytes and not a string.

83
00:06:24,520 --> 00:06:29,220
So this is going to be your challenge to convert the bytes that we got back from the file into a string

84
00:06:29,650 --> 00:06:36,790
so explore again that encoding UTF 8 API eyes and see what you could possibly use to convert the other

85
00:06:36,790 --> 00:06:37,030
way.

86
00:06:37,690 --> 00:06:40,810
And what is the print result.

87
00:06:40,810 --> 00:06:47,290
So just take the string and print it out and that should be a good good start and you could even type

88
00:06:47,290 --> 00:06:51,820
something else into the file and make sure that you're reading that back rather than just what you had

89
00:06:52,540 --> 00:06:54,400
written into it at the beginning.

90
00:06:54,400 --> 00:06:59,200
After all this is just a text file so you can open it up with a text editor and write into it.

91
00:06:59,200 --> 00:07:01,990
Pause the video and have a go okay.

92
00:07:01,990 --> 00:07:02,740
Welcome back.

93
00:07:02,740 --> 00:07:09,550
So we are going to explore this API we've got encoding the DOT UTF 8 and we're going to do dots.

94
00:07:09,610 --> 00:07:17,170
Now let's get bytes which we have already used but there is also a get string down here which takes

95
00:07:17,260 --> 00:07:18,720
in some bytes.

96
00:07:18,790 --> 00:07:23,770
There's a few overloads here one is a byte array perfect so I'm going to pass in the buffer as I buy

97
00:07:23,770 --> 00:07:28,280
to write and what we get back should be a decoded string.

98
00:07:28,450 --> 00:07:33,590
So we are going to go ahead and just print out the decoded string and see what we get.

99
00:07:33,620 --> 00:07:39,460
And for testing purposes I'm going to change the text in here to Hello world like so.

100
00:07:39,880 --> 00:07:47,590
And if I go over to our project and this time I'm going to hit load when it's reloaded I should see

101
00:07:47,590 --> 00:07:52,390
that hello world is printed out and I just want to show that this is in deed what's coming from that

102
00:07:52,390 --> 00:07:58,780
file if I hit lots of exclamation marks and hit load again it reloads the file and it loads the new

103
00:07:58,780 --> 00:08:00,330
contents there off.

104
00:08:00,370 --> 00:08:01,060
Okay great.

105
00:08:01,060 --> 00:08:03,790
So we can write strings and read strings from files.

106
00:08:03,790 --> 00:08:09,850
But in general our game data is not strings it is things like floats and vectors and so on and so forth.

107
00:08:10,000 --> 00:08:13,250
And that's what we want to be saving into this file not strings.

108
00:08:13,270 --> 00:08:16,150
How can we convert those into binary.

109
00:08:16,150 --> 00:08:18,070
That is going to be the subject of the next lecture.

110
00:08:18,160 --> 00:08:18,950
So I'll see you there.
