1
00:00:04,530 --> 00:00:06,000
Hello and welcome in this lecture.

2
00:00:06,000 --> 00:00:11,640
We aren't going to be doing something massively impressive but we aren't going to lay the foundations

3
00:00:11,700 --> 00:00:17,100
for being able to transfer information between seen so if I walk through this gateway here you'll see

4
00:00:17,100 --> 00:00:23,160
that there is a scene loaded message being printed and interestingly enough that scene loaded is being

5
00:00:23,160 --> 00:00:30,120
printed from the portal which was a game object in the previous level not from this game object not

6
00:00:30,150 --> 00:00:32,860
the game object in this level but one from the previous level.

7
00:00:32,880 --> 00:00:36,750
So that's what we're going to be able to do get notifications of when we've finished loading a level

8
00:00:37,110 --> 00:00:40,900
and keeping and game objects alive across that level load.

9
00:00:40,950 --> 00:00:44,100
Let's dive in and find out how.

10
00:00:44,140 --> 00:00:48,060
So at the moment we've got a way of going from Scene 1 to scene 2.

11
00:00:48,060 --> 00:00:53,430
However we don't have a way of going back if I play at the moment in our sandbox to the corridor level

12
00:00:54,030 --> 00:00:59,550
then I can try and go back this way the way I came in and nothing happens.

13
00:00:59,580 --> 00:01:04,340
The reason for this is at the moment we do not have any kind of portal.

14
00:01:04,350 --> 00:01:06,960
So let's go and find where our characters at.

15
00:01:07,290 --> 00:01:11,360
Harry is and I am going to put a portal in here.

16
00:01:11,400 --> 00:01:17,430
So I'm going to get a game core find my portal and drop the portal into the level and then reach scale

17
00:01:17,670 --> 00:01:22,950
the collider so that it will catch everything and there we go.

18
00:01:22,950 --> 00:01:24,600
So let's try this out.

19
00:01:24,870 --> 00:01:29,220
So I need to hook up this portal needs to load.

20
00:01:29,220 --> 00:01:30,500
Scene zero.

21
00:01:30,720 --> 00:01:32,950
Let's go ahead and play and walk through it.

22
00:01:32,970 --> 00:01:37,610
Sure enough it takes me to see in zero but not to the place where we went through.

23
00:01:37,650 --> 00:01:38,040
Right.

24
00:01:38,070 --> 00:01:43,560
We wanted to come out here where the gates are if I go through the gates I want it to take me back to

25
00:01:43,590 --> 00:01:50,370
where I started which currently it isn't doing and of course not because we're just loading the scene

26
00:01:50,430 --> 00:01:53,520
and our character is ending up where it ends up.

27
00:01:53,790 --> 00:02:00,720
What we want to do is remember which portal we came from so that we can then say which portal we should

28
00:02:00,720 --> 00:02:04,630
move our character to now to do that.

29
00:02:04,680 --> 00:02:10,260
We need to know when the scene has finished loading and transfer some information into the new scene.

30
00:02:10,320 --> 00:02:16,910
Now a really neat way of doing this is actually with Chi routines and asynchronous scene loading.

31
00:02:16,920 --> 00:02:21,170
So what we can do is all in one method we can load a scene.

32
00:02:21,180 --> 00:02:27,680
So I'm going to do this by creating a new car routine method here a private's returning AI in numerator

33
00:02:27,720 --> 00:02:34,800
which I'm going to include the right namespace for and I'm going to call this scene or just transition

34
00:02:35,890 --> 00:02:39,090
transitioning to the new scene basically.

35
00:02:39,090 --> 00:02:44,410
And this is where we are going to put this scene load right in here.

36
00:02:44,410 --> 00:02:50,230
And I forgot to include the right namespace which is using System collections.

37
00:02:50,680 --> 00:02:55,150
And we've got this transition which is complaining not all code path return of value.

38
00:02:55,210 --> 00:02:59,970
So that's because we aren't doing any yield returns inside our in numerator.

39
00:02:59,980 --> 00:03:06,490
So for now I'm just going to put at the end of it a yield return null to get rid of that error and what

40
00:03:06,490 --> 00:03:15,720
we want to do is when we enter the trigger we want to call start co routine with our transition code

41
00:03:15,830 --> 00:03:16,390
routine.

42
00:03:16,390 --> 00:03:22,150
So remember as of the last lecture you know that what this is doing is it's putting that Christina directory

43
00:03:22,630 --> 00:03:28,720
and it will be running the code up until the yield return and then it will pause and let unity decide

44
00:03:28,720 --> 00:03:31,780
when to carry on running this code routine.

45
00:03:31,780 --> 00:03:36,430
So what we want to do is figure out when the scene is finished loading and to do this we can actually

46
00:03:36,430 --> 00:03:39,910
just use a different function on scene manager.

47
00:03:39,970 --> 00:03:45,870
So if I have a look at what's available to us if I start using the autocomplete I can look for loads

48
00:03:45,870 --> 00:03:54,320
seen async operation and in here you can see that the return value is return value of async operation.

49
00:03:54,340 --> 00:03:59,740
We can give it the same basic like the build indexes and load scene mode as we've done before.

50
00:03:59,830 --> 00:04:06,790
And I think that is basically what we're going to do we're just gonna pass in the load index but we

51
00:04:06,790 --> 00:04:12,940
want to find out when this is finished and it returns as async operation which actually if we just yield

52
00:04:13,000 --> 00:04:15,530
return that is going to do what we want.

53
00:04:15,550 --> 00:04:22,300
Basically it's going to say hey unity run up until this point and we load async the level then it's

54
00:04:22,300 --> 00:04:25,610
going to return the async operation to unity and unity is gonna go.

55
00:04:25,640 --> 00:04:31,030
Okay I know what to do that I I know what to do with that I need to call this code routine again when

56
00:04:31,030 --> 00:04:32,560
the scene has finished loading.

57
00:04:32,560 --> 00:04:38,290
So that's what we're going to end up with and what I want to do is just for this lecture I want to get

58
00:04:38,290 --> 00:04:44,570
to the point where we are printing out scene load it like so.

59
00:04:44,570 --> 00:04:45,840
So that's the only idea.

60
00:04:45,870 --> 00:04:50,830
But there is something that is going to stop this from happening and that's the fact that as soon as

61
00:04:50,830 --> 00:04:56,830
we load this new scene app portal game object the one which has the code team gets destroyed and so

62
00:04:56,890 --> 00:04:58,600
does the code routine itself.

63
00:04:59,080 --> 00:05:03,650
So this is the challenge to you to not destroy this portal unloading the new level.

64
00:05:03,760 --> 00:05:07,060
Hopefully you already know how to do this you can Google around a little bit if you don't so keep the

65
00:05:07,060 --> 00:05:12,250
portal around make sure that the print happens when you load the next level I should expect to see that

66
00:05:12,250 --> 00:05:20,950
scene print happening in the console log and then make sure the portal is actually destroyed after the

67
00:05:20,950 --> 00:05:22,260
print has happened.

68
00:05:22,270 --> 00:05:24,550
So pause a video and have a go.

69
00:05:24,820 --> 00:05:25,090
Okay.

70
00:05:25,120 --> 00:05:31,330
So hopefully you can run this yourself and see that you're happy that this print statement is not working.

71
00:05:31,330 --> 00:05:38,790
But if we do a don't destroy on load and we call it with at Target to be the game object.

72
00:05:38,800 --> 00:05:43,160
So we don't destroy the portal game object at all at this point.

73
00:05:43,390 --> 00:05:45,820
Then we can go ahead and yield return this.

74
00:05:45,820 --> 00:05:53,830
And we're coating will still be around to print the scene load it afterwards and then just to be a good

75
00:05:53,830 --> 00:05:59,620
citizen I'm going to destroy my portal and not leave it hanging around afterwards because well it could

76
00:05:59,620 --> 00:06:03,880
be confusing for one thing your character could walk into it again and that would be really weird.

77
00:06:03,880 --> 00:06:08,200
So we're going to go ahead and get rid of the object as soon as we've printed out.

78
00:06:08,200 --> 00:06:13,090
Now don't destroy and load only works when your game object is at the root of the scene so it can't

79
00:06:13,090 --> 00:06:15,670
be under any other game objects.

80
00:06:15,670 --> 00:06:19,990
Now we will find a way of getting around this in later lectures but for now just make sure that your

81
00:06:19,990 --> 00:06:22,830
portal is at the root of the scene.

82
00:06:22,930 --> 00:06:24,180
So let's give this a go.

83
00:06:24,190 --> 00:06:30,150
I would expect that if we walk through this portal we are going to get a log message on the other side.

84
00:06:30,220 --> 00:06:32,370
So walk in.

85
00:06:32,410 --> 00:06:37,510
Have a look at the console and sure enough the scene loaded was printed and it's not by a monarch behavior

86
00:06:37,540 --> 00:06:40,120
that's any more in the hierarchy.

87
00:06:40,120 --> 00:06:44,830
So to recap what we've got here is a code routine that runs between scenes.

88
00:06:44,830 --> 00:06:51,220
Here is before the scene load here is after the scene load and allows us to transfer or lays the foundation

89
00:06:51,220 --> 00:06:57,730
for us to transfer information into the new scene from our current portal which we'll use to reposition

90
00:06:57,730 --> 00:06:58,570
the player.

91
00:06:58,570 --> 00:06:59,110
Good stuff.

92
00:06:59,110 --> 00:07:00,160
See you in the next lecture.
