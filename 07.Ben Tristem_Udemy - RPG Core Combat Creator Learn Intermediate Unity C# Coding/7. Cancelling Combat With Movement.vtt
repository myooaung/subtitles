WEBVTT
1
00:00:05.130 --> 00:00:05.450
Hello.

2
00:00:05.460 --> 00:00:05.900
Welcome.

3
00:00:05.910 --> 00:00:09.090
In this lecture we are going to be solving the canceling issue.

4
00:00:09.150 --> 00:00:13.080
So when we go to attack an enemy we walk up to it start attacking it.

5
00:00:13.080 --> 00:00:16.590
Let me show you that we're still in this attacking behavior because if I click on my enemy and move

6
00:00:16.590 --> 00:00:21.750
it around I'm gonna follow it around and keep bashing it Well I'm not bashing it yet but I could be.

7
00:00:22.200 --> 00:00:29.190
But I can now cancel so if I click off with movement to somewhere else then I run away and I stop trying

8
00:00:29.190 --> 00:00:31.490
to attack no matter what I do with this enemy move it around.

9
00:00:31.500 --> 00:00:33.160
I'm not going to be following it anymore.

10
00:00:33.300 --> 00:00:39.120
So let's dive in and see how we can get this kind of canceling behavior so the behavior we're seeing

11
00:00:39.120 --> 00:00:47.640
at the moment is that if I go ahead and attack the combat cat to try and move away then I they have

12
00:00:47.640 --> 00:00:50.960
to hold down to move away because otherwise it keeps trying to attack.

13
00:00:51.030 --> 00:00:54.280
The reason for this as we saw when we saw that behavior in last.

14
00:00:54.290 --> 00:01:00.090
But the reason we didn't see the reason is that whenever we have a target we are going to be trying

15
00:01:00.090 --> 00:01:02.960
to do our attacking behavior in update.

16
00:01:03.420 --> 00:01:05.800
And this isn't really what we want.

17
00:01:05.820 --> 00:01:10.640
What we want is to be able to at some point cancel this target because it's set one time.

18
00:01:10.650 --> 00:01:13.100
And so it never gets unset.

19
00:01:13.170 --> 00:01:15.560
So let's create another public method in here.

20
00:01:15.570 --> 00:01:23.510
Public void cancel and public void cancel is all is gonna do is set that target to No.

21
00:01:23.640 --> 00:01:29.130
Now I'm gonna leave that as a challenge to you now to see if you can figure out how to get it to stop

22
00:01:29.130 --> 00:01:30.800
attacking when we move.

23
00:01:30.810 --> 00:01:35.400
So remember that combat triggers movement as well.

24
00:01:35.400 --> 00:01:40.110
So you're going to have to if you want to I suggest you do this from the movement script the movement

25
00:01:40.110 --> 00:01:42.390
scripts cancels the combat.

26
00:01:42.390 --> 00:01:44.010
When you start moving.

27
00:01:44.220 --> 00:01:47.630
But remember that combat also calls on the movement script.

28
00:01:47.640 --> 00:01:53.660
So you need to differentiate between the movement that is kind of an action.

29
00:01:53.670 --> 00:01:58.200
So you are clicking and it's like that's the movement action and it should take priority over other

30
00:01:58.200 --> 00:02:01.890
actions like fighting or and the movement.

31
00:02:01.890 --> 00:02:06.820
There's not an action that is being used kind of as a library from the combat.

32
00:02:06.870 --> 00:02:13.380
So have it think about how you might differentiate those two and make it so that your combat is canceled

33
00:02:13.440 --> 00:02:15.630
when you move as an action.

34
00:02:15.660 --> 00:02:20.730
And just to make things really clear a little more guidance do this in the movie see a script.

35
00:02:20.730 --> 00:02:25.320
And don't worry for now if you had to create a circular dependency back to the fighter we will fix that

36
00:02:25.320 --> 00:02:28.960
in later lectures pause video and have a go OK.

37
00:02:28.960 --> 00:02:29.680
Welcome back.

38
00:02:29.710 --> 00:02:32.200
So let's give you a shot in the movie.

39
00:02:32.230 --> 00:02:35.270
What I'm gonna do is I'm going to introduce a new method.

40
00:02:35.290 --> 00:02:37.990
Public void Start.

41
00:02:38.070 --> 00:02:38.730
Move.

42
00:02:38.740 --> 00:02:39.610
Action.

43
00:02:39.790 --> 00:02:47.020
And it's going to take the same input the destination as our move to move to is something that we're

44
00:02:47.020 --> 00:02:55.030
going to be kind of setting doing every frame where as this start move action is going to be something

45
00:02:55.030 --> 00:02:56.990
that we set off when we click.

46
00:02:57.400 --> 00:03:00.570
So I'm going to just from there.

47
00:03:00.640 --> 00:03:03.370
Call to move destination out the moment.

48
00:03:03.370 --> 00:03:06.180
This isn't doing anything different so why do we bother.

49
00:03:06.190 --> 00:03:11.490
Why have we introduced this complexity of another another function.

50
00:03:11.500 --> 00:03:16.720
Well because if we go over into play a controller into the interact with movement script and have a

51
00:03:16.720 --> 00:03:23.970
look at line 42 here then we want to replace that with the start action call instead.

52
00:03:24.070 --> 00:03:28.300
And that means that now we have a distinction between when we have gotten action starting and when we're

53
00:03:28.300 --> 00:03:32.070
just calling move to if we didn't do this you'd just seen an interesting problem.

54
00:03:32.080 --> 00:03:37.960
But first let's try this get component combat likes.

55
00:03:38.030 --> 00:03:39.880
No not combat fighter.

56
00:03:40.000 --> 00:03:42.830
There we go and we're going to call on that.

57
00:03:42.890 --> 00:03:46.240
But first I'm going to add a using by selecting the fighter type.

58
00:03:46.280 --> 00:03:52.280
And again hitting control period windows check out on the Mac side what you got to do and then selecting

59
00:03:52.280 --> 00:03:58.950
the first option of adding that using statement and a cool dot.

60
00:03:58.950 --> 00:04:01.110
And again to call cancel.

61
00:04:01.110 --> 00:04:03.150
So we're canceling fighting.

62
00:04:03.150 --> 00:04:05.310
Before we even start moving all the time.

63
00:04:06.660 --> 00:04:07.170
Naturally.

64
00:04:07.200 --> 00:04:08.140
Okay.

65
00:04:08.180 --> 00:04:09.640
Now what was I.

66
00:04:09.700 --> 00:04:12.880
So that's the difference basically when we start move action we cancel fighting.

67
00:04:12.880 --> 00:04:14.160
Otherwise we don't.

68
00:04:14.170 --> 00:04:16.410
Which is just as well because the fighter calls that.

69
00:04:16.410 --> 00:04:20.680
So if we were every time we were fighting we canceled fighting it wouldn't make any sense.

70
00:04:21.160 --> 00:04:22.600
So that's what we're doing.

71
00:04:22.600 --> 00:04:25.140
But notice I did something a little naughty there.

72
00:04:25.330 --> 00:04:28.770
I did a using statement I included a using statement just like that.

73
00:04:28.810 --> 00:04:31.890
Snap my fingers and automatically added this.

74
00:04:31.880 --> 00:04:32.950
This is a bit dangerous.

75
00:04:32.950 --> 00:04:37.680
Doing it like that because now what we've got is a circular dependency cause.

76
00:04:37.690 --> 00:04:41.170
Movement now depends on combat and combat.

77
00:04:41.170 --> 00:04:42.070
As we already knew.

78
00:04:42.070 --> 00:04:43.270
Depends on movement.

79
00:04:43.270 --> 00:04:45.940
And we know second dependencies are nasty.

80
00:04:46.060 --> 00:04:49.620
So we're going to be fixing that in the next video.

81
00:04:49.990 --> 00:04:50.360
For now.

82
00:04:50.380 --> 00:04:51.200
We'll deal with it.

83
00:04:51.220 --> 00:04:52.770
But just so you know.

84
00:04:53.830 --> 00:04:54.170
Okay.

85
00:04:54.220 --> 00:04:55.870
So this should do the trick.

86
00:04:55.960 --> 00:05:00.980
Let's hop over in to the game and see what we got.

87
00:05:01.020 --> 00:05:08.630
We hit play and got to the capsule and go away from the capsule and indeed I start to move just good

88
00:05:09.300 --> 00:05:12.420
but I'm noticed there is a bit of an issue here.

89
00:05:12.470 --> 00:05:15.040
Down here I've got this null reference thing.

90
00:05:15.380 --> 00:05:18.540
So let's see if we can fix that no reference what's it referring to.

91
00:05:19.470 --> 00:05:21.060
He is referring to a hand.

92
00:05:21.070 --> 00:05:22.090
This is in range.

93
00:05:22.090 --> 00:05:25.840
We're trying to calculate it with the target position but if we don't have a target because we canceled

94
00:05:25.840 --> 00:05:28.330
it for example this isn't gonna work.

95
00:05:28.360 --> 00:05:35.320
So one way that we can solve this is by moving this into a method so I can do this with a little light

96
00:05:35.320 --> 00:05:41.650
bulb extractor method automatically named it really well and I can even inline this variable meaning

97
00:05:41.650 --> 00:05:47.590
that I replace the one usage of this variable with the actual calculation that that variables doing.

98
00:05:47.620 --> 00:05:53.350
Now what's gonna happen here is we've got something called a shortcut operator or short circuit operator

99
00:05:53.360 --> 00:05:56.380
in fact this double and operator.

100
00:05:56.400 --> 00:05:59.800
So let's take a bit of a deep dive into short circuit operators.

101
00:05:59.800 --> 00:06:01.640
What are they how do they work.

102
00:06:01.690 --> 00:06:04.330
Well a short circuit operator can just take a form like this.

103
00:06:04.330 --> 00:06:09.310
We've got a function on the left that's going to return a boolean a function on the right which is also

104
00:06:09.310 --> 00:06:11.180
going to return a boolean.

105
00:06:11.200 --> 00:06:17.380
Now this is how a computer is going to evaluate this boolean expression how it's going to evaluate this

106
00:06:17.380 --> 00:06:21.350
operator first of all it has to work out what the thing on the left is.

107
00:06:21.430 --> 00:06:26.760
So we'll call first function and first function for example in this case returns true.

108
00:06:26.760 --> 00:06:28.370
So now we know it's true.

109
00:06:28.480 --> 00:06:29.880
And second function.

110
00:06:29.910 --> 00:06:35.770
So then we have to evaluate the second function to work out what our overall boolean result is going

111
00:06:35.770 --> 00:06:36.160
to be.

112
00:06:36.160 --> 00:06:39.530
So we evaluate the second function turns out to be false.

113
00:06:39.670 --> 00:06:44.250
So we know that true and false means that is false true.

114
00:06:44.410 --> 00:06:47.110
But for and to work they both need to be true.

115
00:06:47.110 --> 00:06:49.240
So it's going to be false.

116
00:06:49.810 --> 00:06:51.490
Now slightly different situation.

117
00:06:51.490 --> 00:06:55.710
What if we had called the first function and it had returned false.

118
00:06:55.750 --> 00:06:58.840
Do we even need to call second function.

119
00:06:58.840 --> 00:07:04.480
Well no actually because the end function if either of the two things is false then it will evaluate

120
00:07:04.480 --> 00:07:04.990
to false.

121
00:07:04.990 --> 00:07:11.920
So without even calling the second function we know that the result of this short circuit operator is

122
00:07:11.980 --> 00:07:12.490
false.

123
00:07:12.490 --> 00:07:15.160
So that's what it means to be a short circuit operator.

124
00:07:15.250 --> 00:07:19.110
It doesn't even evaluate the thing on the right.

125
00:07:19.210 --> 00:07:23.610
If we already know the value by the time we've evaluated the thing on the left.

126
00:07:24.190 --> 00:07:30.410
So one more example of a short circuit operator actually is the or operator with the double line.

127
00:07:30.730 --> 00:07:33.190
In this case it works slightly differently.

128
00:07:33.250 --> 00:07:38.020
So we evaluate our first function on the left and say it returns true this time.

129
00:07:38.020 --> 00:07:42.190
Now you might be tempted to say well it's going to have to go and evaluate the thing over on the right

130
00:07:42.190 --> 00:07:45.580
like we did with the short circuit and operator.

131
00:07:45.940 --> 00:07:48.390
Well no actually because if you think about it.

132
00:07:48.460 --> 00:07:52.110
If we know that something is true on either side of an OR.

133
00:07:52.140 --> 00:07:54.160
Then what do we know about the result.

134
00:07:54.190 --> 00:07:55.890
We know that it must be true already.

135
00:07:55.900 --> 00:08:00.510
So in this case it works in the opposite way with an oar operator.

136
00:08:00.520 --> 00:08:06.100
And that is to say that if it is false on the left then it has to evaluate the thing on the right.

137
00:08:06.130 --> 00:08:10.510
If it's true on the left then it doesn't have to validate the thing on the right and the opposite is

138
00:08:10.510 --> 00:08:12.010
true for the end operator.

139
00:08:12.430 --> 00:08:19.130
So let's see the short circuit operator in practice how does it work if our target is indeed no.

140
00:08:19.720 --> 00:08:26.410
Then we know that this thing here target not null is going to be false because the and operator requires

141
00:08:26.410 --> 00:08:32.440
both things to be true for it to be true it already knows that if this first thing is false then the

142
00:08:32.440 --> 00:08:39.010
whole thing must be false so it doesn't even bother to call the function get is in range which is perfect

143
00:08:39.040 --> 00:08:44.980
because if we did call get is in range when we've got Target now then we're going to get that now reference

144
00:08:45.230 --> 00:08:45.880
error.

145
00:08:46.060 --> 00:08:49.020
So hopefully that should fix and no reference error.

146
00:08:49.030 --> 00:08:50.190
Let's give it a shot.

147
00:08:50.230 --> 00:08:52.820
Hit play and go ahead.

148
00:08:52.840 --> 00:08:54.920
Out to the combat and click away.

149
00:08:55.480 --> 00:09:00.210
But now we have a different issue which is the only moves when we're holding down the mouse.

150
00:09:00.310 --> 00:09:01.420
Why is that.

151
00:09:01.420 --> 00:09:03.490
Why is it only moving when we hold down the mouse.

152
00:09:03.490 --> 00:09:11.110
Reason being is that when we don't have a target we always call stop.

153
00:09:11.110 --> 00:09:16.600
Even if Well basically if we don't have a target who was calling stop which is not great for the mover

154
00:09:16.630 --> 00:09:23.740
because if we're trying to do a move action and it's currently basically constantly tallying it every

155
00:09:23.740 --> 00:09:26.590
frame to stop then we don't really get anywhere.

156
00:09:26.710 --> 00:09:30.550
And the fact that we get anywhere by holding is a bit of a fluke to be honest.

157
00:09:30.550 --> 00:09:34.490
So if we go into update and say look if we don't have a target.

158
00:09:34.730 --> 00:09:40.780
So if Target is no then we aren't going to do any of this behavior at all.

159
00:09:40.780 --> 00:09:42.520
So we'll return early.

160
00:09:42.640 --> 00:09:46.540
And that would also have solved our get in is in range problem.

161
00:09:46.540 --> 00:09:49.810
But you know extracting into a method is not a bad thing anyway.

162
00:09:49.810 --> 00:09:55.300
So we've got if the targets now return early we're not going to stop or move if we are not essentially

163
00:09:55.360 --> 00:10:01.830
fighting but if we are fighting then we've got two options we're either in range in which case we stop

164
00:10:01.840 --> 00:10:06.250
moving and we'll probably play some attack animations or we're not in range and we're going to move

165
00:10:06.310 --> 00:10:08.850
towards our target.

166
00:10:08.920 --> 00:10:13.300
So hopefully this brings us to a more solid behavior.

167
00:10:13.330 --> 00:10:18.080
Click on the target moves to it click away from the target moves away from it.

168
00:10:18.250 --> 00:10:20.290
And that seems to be working quite nicely.

169
00:10:20.290 --> 00:10:24.310
So now the only problem we've got is that circular dependency and we're going to look at that in the

170
00:10:24.310 --> 00:10:25.090
next lecture.

171
00:10:25.120 --> 00:10:26.710
So I will see you there.
