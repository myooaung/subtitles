1
00:00:04,280 --> 00:00:05,050
Hello and welcome.

2
00:00:05,060 --> 00:00:10,520
In this lecture we are going to be fixing the bug where we are able to move our character around when

3
00:00:10,580 --> 00:00:11,390
we die.

4
00:00:11,390 --> 00:00:14,390
No longer can I move it around and the same is not true for the enemy.

5
00:00:14,390 --> 00:00:19,280
They're not going to be following us while they are dead and other things like that we're going to be

6
00:00:19,280 --> 00:00:24,730
disabling generally a lot of behavior when the health component tells us that a character is dead.

7
00:00:24,770 --> 00:00:26,800
Let's dive in and see how that works.

8
00:00:27,370 --> 00:00:33,880
At the end of the last lecture we saw this bug where if I am dead I'm still able to control my character

9
00:00:33,940 --> 00:00:37,250
and run around which is just not really okay.

10
00:00:37,270 --> 00:00:41,950
So what we're gonna be doing is disabling control from the player but also we're gonna be disabling

11
00:00:41,950 --> 00:00:43,630
control from the enemy.

12
00:00:43,630 --> 00:00:48,730
So if I take these enemies I'm going to move them slightly away because at the moment they're making

13
00:00:48,730 --> 00:00:52,170
it very hard for me to do anything.

14
00:00:52,320 --> 00:00:58,560
So let's go and focus on them with FC and then move them out of the way.

15
00:00:58,560 --> 00:01:03,660
So I've only got one enemy to deal with and let me just check what his health value is.

16
00:01:03,660 --> 00:01:06,340
I think it should be fairly low.

17
00:01:06,400 --> 00:01:06,610
Yeah.

18
00:01:06,630 --> 00:01:07,350
Health points eight.

19
00:01:07,350 --> 00:01:10,830
So I should be able to go up to him and give me a good thwack.

20
00:01:12,820 --> 00:01:17,620
Looks like it's taking a while to start attacking and our attack time is very long.

21
00:01:17,620 --> 00:01:19,360
So let's just fix that quickly.

22
00:01:19,360 --> 00:01:25,750
So why is it taking a long time to start attacking because if I go to our fighters script then the time

23
00:01:25,810 --> 00:01:26,920
since last attack.

24
00:01:26,920 --> 00:01:27,180
Right.

25
00:01:27,180 --> 00:01:28,260
The beginning is zero.

26
00:01:28,270 --> 00:01:32,610
This means that effectively when we start the game it's as if we just did an attack.

27
00:01:32,620 --> 00:01:33,370
That's not what we want.

28
00:01:33,370 --> 00:01:37,230
We want this to be as if we did an attack a very long time ago.

29
00:01:37,270 --> 00:01:44,480
So the way we're going to do this is by using math f library of unity and doing math f dot infinity.

30
00:01:44,500 --> 00:01:49,990
So that's basically going to mean that when we do our comparison further down that time since last attack

31
00:01:49,990 --> 00:01:55,260
is greater than the time between attacks that's always going to be true if we use infinity nicely that's

32
00:01:55,270 --> 00:01:58,480
going to mean that we can attack straight off the bat.

33
00:01:58,540 --> 00:01:59,680
So hopefully that's going to work.

34
00:01:59,680 --> 00:02:04,780
Yet we can both attack straight off the bat and then the other problem is that the time between attacks

35
00:02:04,870 --> 00:02:07,830
and Rick changed to try to fix a bug.

36
00:02:07,930 --> 00:02:11,230
We're going to revert that back to the time between attacks that we had before.

37
00:02:12,040 --> 00:02:17,170
As the default for our players are now he attacks a couple of times and the enemy is dead.

38
00:02:17,170 --> 00:02:19,480
But if I move around he's still trying to chase me.

39
00:02:19,480 --> 00:02:20,880
He's still trying to attack me.

40
00:02:20,890 --> 00:02:21,790
If he could.

41
00:02:21,910 --> 00:02:23,870
So that is not good either.

42
00:02:23,950 --> 00:02:26,950
We're going to have to both those are gonna have to change and then there's some other things that gonna

43
00:02:26,950 --> 00:02:28,450
have to change when we're dead.

44
00:02:28,480 --> 00:02:32,450
So what we've got here is a quandary about how should we do our dependencies.

45
00:02:32,470 --> 00:02:37,210
Because we've got control we've got combat we've got movement or potentially want to know when we're

46
00:02:37,210 --> 00:02:40,900
dead and want to change their state when we are dead.

47
00:02:40,990 --> 00:02:43,870
Which way round should these dependencies be what's your gut feel.

48
00:02:43,870 --> 00:02:47,070
Tell me what you think maybe positively and have a little think.

49
00:02:48,220 --> 00:02:53,800
So the way round I'm recommending is that we have control depend on health combat depend on health movement

50
00:02:53,800 --> 00:02:55,740
depend on health so there's a lot of dependencies this way.

51
00:02:55,750 --> 00:03:01,120
But the alternative would be for health to depend on control combat and movement which is going to get

52
00:03:01,120 --> 00:03:01,900
problematic.

53
00:03:01,900 --> 00:03:07,160
The reason being that health is going to have basically have to depend on a whole load of named spaces.

54
00:03:07,180 --> 00:03:11,410
If we ever want to add any more things that depend on health it's gains you're gonna have to go into

55
00:03:11,410 --> 00:03:16,630
the health file and modify that just generally not the best way to have things depend if we do it this

56
00:03:16,630 --> 00:03:21,330
way round then everything has to depend on health it makes health have to be a more stable dependency

57
00:03:21,340 --> 00:03:26,170
we can't go changing its interface all the time because it might mean we'll have to change lots of different

58
00:03:26,170 --> 00:03:32,410
classes but this way round is a little bit better and to me makes sense health is a very fundamental

59
00:03:32,410 --> 00:03:36,640
concept to our game and as such it probably doesn't belong in combat.

60
00:03:36,640 --> 00:03:42,490
We don't want all these things depending on the combat namespace in order to do their job probably better

61
00:03:42,550 --> 00:03:44,650
is that health goes in core.

62
00:03:44,650 --> 00:03:48,540
So that's what we're doing going to move it over to the core folder over and Visual Studio code.

63
00:03:48,700 --> 00:03:56,280
In fact actually movement is probably best done in the Unity project review just because that's going

64
00:03:56,290 --> 00:03:58,980
to move the matter files as well on the file system.

65
00:03:58,990 --> 00:04:04,000
So just a little bit less cleanup for unity to have to do so in the combat folder I'm going to move

66
00:04:04,000 --> 00:04:11,200
it over from health is going to be moved over into the core folder of scripts and I just need to make

67
00:04:11,200 --> 00:04:17,190
sure you can see that the TAB stays open in Visual Studio code when I've moved something.

68
00:04:17,200 --> 00:04:18,470
So just be wary of that.

69
00:04:18,490 --> 00:04:23,620
You need to close that tab and open it again in order to get the new location of the health component

70
00:04:23,620 --> 00:04:28,120
otherwise if you save you're going to be writing back to the old location and that can cause you some

71
00:04:28,120 --> 00:04:28,840
weird bugs.

72
00:04:29,230 --> 00:04:29,820
Okay.

73
00:04:30,010 --> 00:04:35,960
So now we have got a health component in core where no not in core because we haven't changed the namespace

74
00:04:36,080 --> 00:04:41,920
so let's change the namespace over to core and then is there anything that's currently referencing.

75
00:04:41,950 --> 00:04:48,190
I think there is because I just went or went read here the combat Target for example was depending on

76
00:04:48,190 --> 00:04:49,180
it being in combat.

77
00:04:49,180 --> 00:04:54,900
So I'm going to be using instead the RPG Doc core namespace in the combat target.

78
00:04:54,940 --> 00:04:59,680
And I can have the required required component of type health.

79
00:04:59,680 --> 00:05:02,250
The fighter does the fighter require a health.

80
00:05:02,260 --> 00:05:03,220
I think it does.

81
00:05:03,640 --> 00:05:06,840
Yes it does require health but I think we already had a dependency on core.

82
00:05:06,850 --> 00:05:07,500
So that's all.

83
00:05:07,530 --> 00:05:10,400
Okay so quickly before your challenge.

84
00:05:10,400 --> 00:05:15,320
One exception to the rule of the health everything depending on health is.

85
00:05:15,320 --> 00:05:18,860
I think health needs to know about the action schedule.

86
00:05:19,010 --> 00:05:25,850
So I think what it needs to do is try when it dies to cancel any currently running action.

87
00:05:25,850 --> 00:05:27,740
So actually this is pretty straightforward.

88
00:05:27,740 --> 00:05:33,740
We can just do a start action of null and that's going to cancel the running action because of the logic

89
00:05:33,740 --> 00:05:35,180
in here you can think it through.

90
00:05:35,240 --> 00:05:39,830
Pause video if you're not entirely convinced about that but I think that's a bit messy.

91
00:05:39,830 --> 00:05:44,840
So just in case that is that behavior change at some point I'm gonna create a new public void.

92
00:05:44,840 --> 00:05:51,740
Cancel current action like so and it's not going to take any parameters and we're just going to internally

93
00:05:52,130 --> 00:05:55,380
make that call to start action no.

94
00:05:55,520 --> 00:06:02,450
Which will do the same thing but it just means that if we change anything about how this start action

95
00:06:02,450 --> 00:06:07,850
works we can then change the body of cancel current action and that's all against all work.

96
00:06:07,850 --> 00:06:18,200
So then in health what I want to do is get components of type action scheduler and we're going to call

97
00:06:18,200 --> 00:06:21,590
on this cancel current action which I think makes sense right.

98
00:06:21,590 --> 00:06:22,720
We are dying.

99
00:06:22,790 --> 00:06:28,280
You set the trigger to die and you cancel the current action so that the anything that was running now

100
00:06:28,280 --> 00:06:34,280
knows it should have stopped running and then going on from there we can stop further things from happening

101
00:06:34,640 --> 00:06:39,290
by modifying our controllers so that they do not trigger anymore actions but we know that the current

102
00:06:39,290 --> 00:06:40,750
action has stopped.

103
00:06:40,910 --> 00:06:44,120
So that's gonna be your challenge to disable control.

104
00:06:44,120 --> 00:06:47,840
So the A.I. shouldn't move when debt and the player shouldn't move either.

105
00:06:47,840 --> 00:06:53,390
If you've got this canceling action stuff in place as well then this should be fairly straightforward

106
00:06:53,450 --> 00:06:55,970
and we've done similar stuff to this before.

107
00:06:55,970 --> 00:07:03,500
When checking if the player is dead or not so pause the video and have a go at this challenge.

108
00:07:03,530 --> 00:07:04,700
Welcome back.

109
00:07:04,700 --> 00:07:08,510
So we're gonna get to the AI control and this is pretty straightforward really.

110
00:07:08,540 --> 00:07:16,770
We're going to add a reference cache reference to the health component is the first thing data in start

111
00:07:17,280 --> 00:07:23,280
and we're gonna need a dependency on core which we don't currently have in the controller so we can

112
00:07:23,280 --> 00:07:28,880
add that I did that with control plus and then the health we can check at the start of update.

113
00:07:28,890 --> 00:07:34,810
So if at the start of update the health dot is dead.

114
00:07:34,850 --> 00:07:40,220
It's true so our current player War II is dead then we're just gonna return out of update.

115
00:07:40,220 --> 00:07:41,740
We're not gonna do anything.

116
00:07:41,750 --> 00:07:45,910
An update and this logic is gonna be exactly the same over in the player controller.

117
00:07:45,920 --> 00:07:49,310
We aren't going to do any recasting at all.

118
00:07:49,310 --> 00:07:55,220
If the player is dead I am going to have to add in and start method in here to take a cache reference

119
00:07:55,220 --> 00:07:55,480
of it.

120
00:07:55,510 --> 00:07:56,990
So I'm going to start.

121
00:07:57,140 --> 00:08:00,830
Health equals can get components.

122
00:08:00,830 --> 00:08:07,760
Health and then we are going to have to have a variable to store that cache to reference at the top

123
00:08:07,760 --> 00:08:12,980
of the file and we're going to need to include the namespace of core.

124
00:08:12,980 --> 00:08:14,450
So that should do the trick.

125
00:08:14,450 --> 00:08:15,320
Let's give it a go.

126
00:08:15,320 --> 00:08:19,850
I'm going to go ahead and play in the game so it comes and beats me up.

127
00:08:19,850 --> 00:08:21,580
I beat him up.

128
00:08:21,890 --> 00:08:22,300
I go.

129
00:08:22,310 --> 00:08:23,360
He's dead.

130
00:08:23,360 --> 00:08:26,570
He no longer follows me round the map which is good.

131
00:08:26,570 --> 00:08:32,670
Now let's see if they can kill me could give him a helping hand by setting my health down a little bit

132
00:08:32,670 --> 00:08:36,750
low a go now I'm dead and I can't move around.

133
00:08:37,020 --> 00:08:43,170
Now there's one more bonus thing that I just want to do here while we're dealing with this death stuff.

134
00:08:43,170 --> 00:08:50,100
If I beat this coming up until he's dead you'll notice that if I try and run over his body I'm kind

135
00:08:50,100 --> 00:08:58,020
of getting stopped by his nav mesh agent because if I select is now my agent is still active and preventing

136
00:08:58,020 --> 00:08:59,450
me from moving.

137
00:08:59,460 --> 00:09:05,190
So what I'm gonna do is I'm gonna go to the movies see a script and at the beginning of update I'm just

138
00:09:05,190 --> 00:09:07,740
going to disable the nav mesh.

139
00:09:07,890 --> 00:09:15,960
If the player is dead so the is enabled I think is what I need so nav mesh agent die enable because

140
00:09:15,960 --> 00:09:19,750
that much agent is the component we can just disable the component entirely.

141
00:09:19,860 --> 00:09:27,050
If our health component is dead so health let's take our reference here again.

142
00:09:27,090 --> 00:09:29,250
I just skipped over that bit because you don't need to see me do that.

143
00:09:29,250 --> 00:09:36,840
About a million times so it's enabled if not health dot is dead.

144
00:09:36,990 --> 00:09:41,130
So that's I'm not doing any statements here because actually we want a boolean and what we've got here

145
00:09:41,130 --> 00:09:44,910
is a boolean so we can just do a little Boolean operation every update that's gonna disable the nav

146
00:09:44,910 --> 00:09:51,540
mesh agent as soon as our player is dead so let's see if that is going to work going to restart the

147
00:09:51,540 --> 00:09:58,650
game and go and attack our enemy A.I. so attack attack attack and you can see that his capsule or his

148
00:09:58,710 --> 00:10:01,970
nav mesh agent is now great out and I can walk straight through it.

149
00:10:01,980 --> 00:10:02,970
Fantastic.

150
00:10:03,670 --> 00:10:08,830
Hopefully now you've got a good idea of how you can disable things on death row nicely decoupled way

151
00:10:09,130 --> 00:10:14,380
by making everything depend on the health component in the next lecture.

152
00:10:14,500 --> 00:10:18,850
We are going to be learning about gizmos these little things and how to create our own so that we can

153
00:10:18,850 --> 00:10:25,330
visualize the chase radius and we're going to be using it later on to visualise patrol paths as well.

154
00:10:25,330 --> 00:10:27,400
Very useful tool so I'll see you in that lecture.
