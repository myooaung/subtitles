1
00:00:04,470 --> 00:00:05,390
Hello and welcome.

2
00:00:05,400 --> 00:00:10,260
In this lecture we're going to be creating a flexible modify system which among other things is going

3
00:00:10,260 --> 00:00:12,950
to allow our weapons to do different amounts of damage.

4
00:00:12,960 --> 00:00:17,550
On top of the damage by that is dictated by the current level we're at.

5
00:00:17,580 --> 00:00:20,700
So this fireball for example has done 13 damage.

6
00:00:20,700 --> 00:00:27,030
But if I pick up the sword now this is a different damage bonus to my base damage stat and that is doing

7
00:00:27,090 --> 00:00:32,830
18 damage instead let's dive in and see how to achieve this OK.

8
00:00:32,860 --> 00:00:35,080
So what we need is a modifier system.

9
00:00:35,080 --> 00:00:36,250
How's it's going to look.

10
00:00:36,310 --> 00:00:41,950
Well at the moment base stats when it does get snapped it gets the stat for damage and it gets basically

11
00:00:42,010 --> 00:00:43,810
just the base stat.

12
00:00:44,350 --> 00:00:50,890
Well I'd like this to do is actually calculate all the additive bonuses and percentage bonuses that

13
00:00:50,950 --> 00:00:54,000
apply for this particular stat.

14
00:00:54,040 --> 00:00:58,420
So if we go to get stat and see where it's implemented you can see we're just getting the stat from

15
00:00:58,420 --> 00:01:00,720
the progression and that's why I said it does.

16
00:01:00,760 --> 00:01:05,500
But what I want it to do is also get the additive

17
00:01:08,360 --> 00:01:11,820
modifiers for the particular stat.

18
00:01:11,840 --> 00:01:17,990
So that is going to take in the stat and I'm just gonna use control plus to go ahead and generate this

19
00:01:18,050 --> 00:01:22,940
method and it's going to be a private methods are going to move it down below the other public methods

20
00:01:23,030 --> 00:01:28,480
like count calculate level and calculate the will should be private I'm not sure why it's public.

21
00:01:28,500 --> 00:01:32,940
It's just probably a quirk of the fact that we've changed it from the public method.

22
00:01:33,140 --> 00:01:33,890
And here we go.

23
00:01:33,950 --> 00:01:38,170
We've got additive modifiers it doesn't do anything at the moment but it should return a float.

24
00:01:38,180 --> 00:01:43,420
Basically all of the additive modifies and it is based upon the stat that we're trying to do we're going

25
00:01:43,420 --> 00:01:45,700
to implement this as a challenge in just a bit.

26
00:01:45,770 --> 00:01:52,130
But first I want to see how we can possibly use something like this because let's have a look at how

27
00:01:52,130 --> 00:01:52,730
it's going to work.

28
00:01:52,730 --> 00:01:58,520
We've got base stats down here and we've got fighter using base starts to get its damage that we've

29
00:01:58,520 --> 00:02:04,820
got health using it to get health we might have mover using it to get a movement speed we might have

30
00:02:04,820 --> 00:02:08,000
stamina we might have inventory and buffs.

31
00:02:08,000 --> 00:02:13,130
Now this actually works the other way round right because we are depending on inventory and bots in

32
00:02:13,130 --> 00:02:18,230
order to give us for example are additive modifiers but not just on things like inventory and buffs

33
00:02:18,590 --> 00:02:23,450
know we might be depending on fighter because fighter has a currently equipped weapon.

34
00:02:23,450 --> 00:02:28,720
And so we need to know if there are any additive modifiers that we need to apply on fighter.

35
00:02:28,820 --> 00:02:32,710
And similarly we might have other dependencies within here move or help.

36
00:02:32,750 --> 00:02:36,710
Who knows but there might be circuit dependencies basically and we don't like circular dependencies

37
00:02:36,740 --> 00:02:41,180
the way to fix that is with interfaces at least in this case is going to be an interface.

38
00:02:41,180 --> 00:02:48,050
So we want to have an eye modifier provider that's going to work very much like the save system interface

39
00:02:48,050 --> 00:02:55,640
if you completed that section and what's going to happen is we are going to have fighter stamina inventory

40
00:02:55,640 --> 00:02:58,230
buffs whatever it is that needs to provide.

41
00:02:58,250 --> 00:03:04,550
Stuff is going to depend on the I modify provider and that way we can call to those things and we can

42
00:03:04,550 --> 00:03:09,440
ask them what modifiers they've got without having to create any circular dependencies.

43
00:03:09,470 --> 00:03:11,020
So let's go ahead and create this.

44
00:03:11,030 --> 00:03:15,730
I modify provider so I'm gonna go and do this over.

45
00:03:15,740 --> 00:03:21,170
Ian let's have a look which is gonna be the most appropriate script folder in stats and then I'm going

46
00:03:21,170 --> 00:03:30,740
to go ahead and create a C sharp script I call it I modifier provider and then we can open up the script

47
00:03:30,770 --> 00:03:35,570
and we are going to change it up to actually be an interface rather than the model behavior it defaults

48
00:03:35,570 --> 00:03:42,800
to so remove everything in here and just do an interface called I modify provide gonna cut this and

49
00:03:42,800 --> 00:03:50,810
put it into a namespace as well so it can be RPG stats not saving stats and then we are going to paste

50
00:03:50,810 --> 00:03:52,910
on the eye modifier provider.

51
00:03:53,420 --> 00:03:53,650
Okay.

52
00:03:53,680 --> 00:03:58,910
So the I modify a provider what kind of method should it provide.

53
00:03:58,910 --> 00:04:06,650
Well I'm going to call the method get additive modifiers set against return.

54
00:04:06,650 --> 00:04:14,630
Essentially a list of additive modifiers for a particular STAT STAT STAT and what is that list going

55
00:04:14,630 --> 00:04:17,140
to be we could just return a list but I'm gonna go.

56
00:04:17,150 --> 00:04:22,570
We know how to use I enumerators now and we know that they can represent they can be more efficient.

57
00:04:22,580 --> 00:04:27,020
Basically because we can do yield returns it will be easier to implement additive modify if we have

58
00:04:27,020 --> 00:04:31,640
it as an iron numerator we can do yield returns or we can just return a list if we have got a list of

59
00:04:31,670 --> 00:04:39,460
additive modifiers So let's return an eye in numerator and it's going to be of type floats.

60
00:04:39,470 --> 00:04:45,530
We're going to enumerate over the floats like so and for this we're going to need to include system

61
00:04:45,530 --> 00:04:47,820
collections generic like so now.

62
00:04:47,840 --> 00:04:53,570
In this case we actually want to use an eye enumerable rather than an iron numerator.

63
00:04:53,570 --> 00:04:58,040
Reason being it'll make it possible to do a for each loop over it.

64
00:04:58,040 --> 00:05:00,970
Otherwise the eye enumerable is exactly the same.

65
00:05:00,980 --> 00:05:03,960
And you can use it with yield returns in exactly the same way.

66
00:05:03,950 --> 00:05:06,890
It just allows you to do this for each trick as well.

67
00:05:06,890 --> 00:05:11,090
Now later in the video I'll be doing exactly the same thing because I will run into this issue where

68
00:05:11,090 --> 00:05:13,010
I can't do a for each loop.

69
00:05:13,010 --> 00:05:20,000
Now finally we want to implement our first I modifier provider which is going to be the fighter itself

70
00:05:20,030 --> 00:05:25,690
because it's going to tell us about the modifiers applied based on the current weapon that is equipped.

71
00:05:26,210 --> 00:05:29,060
So we're going to implement I am modify provider.

72
00:05:29,090 --> 00:05:36,200
We're going to control dot to implement the interface automatically and then find where it's gone out

73
00:05:36,200 --> 00:05:38,230
of this method it's gonna have it all the way down here.

74
00:05:38,240 --> 00:05:40,690
I'm going to bring it up too.

75
00:05:40,730 --> 00:05:41,590
Let's see.

76
00:05:41,600 --> 00:05:47,600
I think just after stop attack is probably a good place to do it and now we're gonna see why it's so

77
00:05:47,600 --> 00:05:52,880
handy that we made this an AI in numerator rather than making a list because what we're gonna do is

78
00:05:52,880 --> 00:05:59,860
we're gonna say hey if the stat in question is equal to the stat dot damage.

79
00:05:59,870 --> 00:06:05,270
So this is the damage that well in that case we do have an additive modifier to give it.

80
00:06:05,270 --> 00:06:10,610
It's going to be an additive modifier from the weapon and it is going to be the amount of damage that

81
00:06:10,610 --> 00:06:11,200
the weapon does.

82
00:06:11,200 --> 00:06:15,290
So it's going to be a yield return current weapon.

83
00:06:15,300 --> 00:06:21,920
Dots get damage so that's going to be an additive modifier on top of the damage that our character does.

84
00:06:21,920 --> 00:06:25,310
But that's only if the stat requested was the damage stat.

85
00:06:25,340 --> 00:06:30,410
Otherwise you can see we aren't yield returning anything which is basically the same as saying that

86
00:06:30,410 --> 00:06:36,830
this AI in numerator is an empty list and that's pretty cool because it's allowed as very concisely

87
00:06:36,830 --> 00:06:41,120
to say that we want to return something in certain cases but not in others.

88
00:06:41,270 --> 00:06:46,880
But also you might find that you want to return more than one thing for example if you had two weapons

89
00:06:46,880 --> 00:06:49,520
equipped you had two hands and you had two weapons equipped.

90
00:06:49,640 --> 00:06:54,560
You might want to yield return first the damage from the first weapon then the damage from the second

91
00:06:54,560 --> 00:06:59,920
so you could have to yield return statements as is allowed in an AI in numerator but we're not going

92
00:06:59,920 --> 00:07:00,510
to do that.

93
00:07:00,560 --> 00:07:04,970
We have single handed weapons but in the inventory it's going to be particularly useful because we'll

94
00:07:04,970 --> 00:07:10,190
iterate over everything in the inventory and yield return any of the stats or modifiers that they have

95
00:07:10,190 --> 00:07:10,960
there.

96
00:07:11,030 --> 00:07:16,520
So you challenge this lecture is going to be completing this get additive modifiers that we've got over

97
00:07:16,520 --> 00:07:17,200
and base stats.

98
00:07:17,660 --> 00:07:23,800
So you're going to get the use get components basically to get everything of the AI modify provide a

99
00:07:23,810 --> 00:07:29,690
interface and then you're going to for each over all the providers and then for each over all the modifiers

100
00:07:29,750 --> 00:07:34,600
in the AI in numerator that's going to be a list of floats essentially so you can have a list of modify

101
00:07:34,850 --> 00:07:41,930
providers which each has a list of modifiers and then I'd like you to return that sum so that when you

102
00:07:41,930 --> 00:07:47,510
go ahead and play based on the weapon that you pick up you're going to do a different amount of damage

103
00:07:47,570 --> 00:07:50,270
on top of the damage for your current level.

104
00:07:50,270 --> 00:07:53,480
So pause the video and have a go k.

105
00:07:53,490 --> 00:07:54,060
Welcome back.

106
00:07:54,060 --> 00:07:55,220
Let's give this a shot hopefully.

107
00:07:55,380 --> 00:07:59,310
The instructions were intelligible and you had a good shot at this.

108
00:07:59,310 --> 00:08:01,920
Don't worry if you didn't quite manage it 100 percent.

109
00:08:01,920 --> 00:08:11,420
So first for each loop we are going to be doing over the eye modifier provider like so.

110
00:08:12,170 --> 00:08:18,290
And then this is going to be called the provider in my for loop and it's going to be a get component

111
00:08:19,400 --> 00:08:20,210
components.

112
00:08:20,210 --> 00:08:29,610
We want multiple of them of the I modify provide a type and then parentheses and then in order for each

113
00:08:29,730 --> 00:08:33,110
body we want yet another for each loop.

114
00:08:33,570 --> 00:08:39,210
This time the type where for each never is going to be floats because they are the modifiers themselves

115
00:08:41,550 --> 00:08:49,920
and is going to be for provider and we need to get the additive modifier for this stat that we're looking

116
00:08:49,920 --> 00:08:52,320
for the additive modifier stat.

117
00:08:52,350 --> 00:08:58,500
Now you'll notice there's a bit of a problem here it's saying that hey I can't enumerate over an eye

118
00:08:58,500 --> 00:09:05,040
in numerator which is a bit odd but what you need to have it's really odd that there's two different

119
00:09:05,040 --> 00:09:12,230
things that are very similar in C sharp the eye in numerator and the IE in New a.

120
00:09:12,270 --> 00:09:19,170
Now I enumerable basically just is exactly the same as the numerator except it allows you to use it

121
00:09:19,170 --> 00:09:21,780
really easily in a for each loop.

122
00:09:21,930 --> 00:09:28,500
So just go ahead and switch over from iron numerator to I enumerable as I have noted earlier in the

123
00:09:28,500 --> 00:09:34,710
video you've probably already done this so it's going to be I enumerable in the I modify provider is

124
00:09:34,710 --> 00:09:40,510
also going to be I enumerable in the fighter to make sure we are implementing the correct interface

125
00:09:40,510 --> 00:09:47,520
and now you can see that for each loop doesn't actually complain so we're going to go on and add up

126
00:09:47,580 --> 00:09:51,810
and modifies how going to do that we're going to have to keep track of the totals I can have a float

127
00:09:51,900 --> 00:09:53,810
total that starts off at 0.

128
00:09:53,820 --> 00:09:58,710
That is the total of all our modifiers then I'm going to do total plus equals.

129
00:09:58,770 --> 00:10:04,710
So adding to this variable the modifier if let's make that singular for some reason I made it plural

130
00:10:05,750 --> 00:10:11,430
so the actual modifier and then right at the end of the for each loop we return the total so that if

131
00:10:11,430 --> 00:10:17,070
there was nothing there in the set for example there's no provider or the provider returned no additive

132
00:10:17,070 --> 00:10:22,590
modifiers then the modifier total is going to be zero as is gonna be the case with the health it's not

133
00:10:22,590 --> 00:10:29,970
going to find any modifiers for health so let's hop over TNT and see if this works I'll pick up the

134
00:10:30,180 --> 00:10:38,010
spell First of all see how much damage that does hit him once and the damage done according to the console

135
00:10:38,040 --> 00:10:39,730
was 13.

136
00:10:39,780 --> 00:10:41,130
So does that make sense.

137
00:10:41,130 --> 00:10:48,420
Let's just evaluate I've got in my progression that I do 8 damage at level 1 and I am at level 1 then

138
00:10:48,420 --> 00:10:54,180
if I go to my weapons folder resources I'm gonna find my fireball and see how much damage that does

139
00:10:54,180 --> 00:10:58,610
it does 5 so indeed 5 plus 8 equals 13.

140
00:10:58,650 --> 00:11:03,180
Now if I go and pick up the sword which I think is a slightly more powerful weapon and see how much

141
00:11:03,180 --> 00:11:06,450
damage we do with a sword.

142
00:11:06,630 --> 00:11:12,120
Have a look at the console didn't actually finish my attack that's to finish the attack and the damage

143
00:11:12,120 --> 00:11:20,070
done that was 18 so I would predict that the damage done by the sword is going to be 10 and sure enough

144
00:11:20,100 --> 00:11:25,320
the weapon damage is 10 so you can see we've got this additive modifier system that is working very

145
00:11:25,320 --> 00:11:32,130
flexibly because any of our components could implement the I modify provider so you can have your equipment

146
00:11:32,190 --> 00:11:38,010
providing modifiers you could have passive items sitting in your inventory providing UV modifiers you

147
00:11:38,010 --> 00:11:44,070
could have all sorts of things buffs and debug components that allow you to store the results of spells

148
00:11:44,070 --> 00:11:49,410
on you and provide that to the stat calculation system now in the next lecture we're going to look at

149
00:11:49,410 --> 00:11:56,850
how in addition to the additive modifiers we can have percentage modifiers that basically multiply your

150
00:11:56,850 --> 00:12:02,240
current strength and all the things you currently have additives be applied I'll see you there.
