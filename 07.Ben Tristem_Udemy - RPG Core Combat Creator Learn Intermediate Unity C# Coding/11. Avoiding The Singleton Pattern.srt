1
00:00:04,350 --> 00:00:05,670
Hello and welcome in this lecture.

2
00:00:05,670 --> 00:00:12,300
We are going to be polishing off the section by having our fades happen between AC loads like so and

3
00:00:12,300 --> 00:00:14,170
to do that we're going to have to persist.

4
00:00:14,190 --> 00:00:19,500
The Fader between scenes so that it can remember whether it was faded down or faded up and we don't

5
00:00:19,500 --> 00:00:21,200
have to do anything complicated there.

6
00:00:21,270 --> 00:00:26,580
So we are going to find a way of doing this without using the Singleton pattern which has many disadvantages.

7
00:00:26,700 --> 00:00:29,520
And we're going to do this in a nice way instead.

8
00:00:29,550 --> 00:00:35,960
So let's dive in and see what that way is so at the moment our theta is not prefab and not shared between

9
00:00:35,960 --> 00:00:38,150
scenes that's on it we're going to fix.

10
00:00:38,180 --> 00:00:44,070
So I'm gonna go and select the game core folder and prefab theta into there.

11
00:00:44,660 --> 00:00:52,220
And I'm also going to go ahead and prefab the whole of this core under core because I want to do is

12
00:00:52,280 --> 00:00:58,280
make sure that that is in every scene so that we don't have to make sure that as a player there's a

13
00:00:58,280 --> 00:01:03,140
camera there's a fade all these things that we're going to have to have in every scene.

14
00:01:03,140 --> 00:01:08,480
We can just plonk in the core prefab and we can see now that this is a nested prefab like we've got

15
00:01:08,480 --> 00:01:14,180
before I open up the core prefab you can see it has the player's prefab in it has the faders pleat prefab

16
00:01:14,180 --> 00:01:16,540
and it hasn't gone and flatten things out.

17
00:01:16,650 --> 00:01:23,960
Now if I go ahead and open up sandbox to Yeah I'm gonna save my changes and I am going to find the game

18
00:01:23,960 --> 00:01:29,780
core folder and drag in the core prefab in the place of the player to help if I'm in the same view.

19
00:01:30,080 --> 00:01:38,660
So let's go ahead and find the player in the scene double click and locate him then drag in our core

20
00:01:39,410 --> 00:01:40,610
into here.

21
00:01:40,610 --> 00:01:48,070
So and you can see my play is not located at the center of core I think that's a bit well we'll update

22
00:01:48,090 --> 00:01:49,280
it here in this scene anyway.

23
00:01:49,430 --> 00:01:55,520
So I'm going to set the position of my play to 0 0 0 so he's there and I'm going to delete that original

24
00:01:55,520 --> 00:01:56,430
core folder.

25
00:01:56,450 --> 00:02:00,560
So that's not a duplicate and just rename the prefab to one.

26
00:02:00,590 --> 00:02:02,840
So we've got consistency as my player.

27
00:02:02,870 --> 00:02:08,810
So if I go into the scene now we should see that it all plays perfectly and we've got the fader automatically

28
00:02:08,810 --> 00:02:13,310
in our second scene as well which is essentially what we wanted to be able to do.

29
00:02:13,760 --> 00:02:21,290
However you will notice that with this Fader if I go between levels it resets and starts again and that's

30
00:02:21,290 --> 00:02:21,830
not what we want.

31
00:02:21,830 --> 00:02:28,280
We want this Fader to hold its state between levels because what we're going to be doing is as we walk

32
00:02:28,280 --> 00:02:32,750
through reports we're going to be fading out and then we want it to fade back into the new level.

33
00:02:32,750 --> 00:02:38,420
So wants to be able to remember that we had faded out and there's no glitching no loading no problems

34
00:02:38,420 --> 00:02:39,240
like that.

35
00:02:39,260 --> 00:02:45,530
Now this is the point at which most people tend to reach for the Singleton pattern.

36
00:02:45,530 --> 00:02:51,080
However there's a few reasons I really dislike the Singleton pattern now the first one is that it leads

37
00:02:51,080 --> 00:02:56,810
to really tight coupling because with a singleton pattern you can always access the class from anywhere

38
00:02:56,840 --> 00:02:59,870
which means that you tend to access it from anywhere.

39
00:02:59,870 --> 00:03:04,240
And that means that any class is going to rely on it so often very tightly coupled.

40
00:03:04,400 --> 00:03:09,740
It also is too much responsibility for one class because the class has to be responsible for making

41
00:03:09,740 --> 00:03:13,830
sure that it's the only instance around as well as doing its normal job.

42
00:03:14,090 --> 00:03:19,760
And it removes our flexibility because what if we decide that all of a sudden we don't want our fate

43
00:03:19,790 --> 00:03:25,220
to be a singleton anymore it's going to change everything that depends on it because it all everything

44
00:03:25,220 --> 00:03:31,280
thought that it was the only thing around everything thought that you would get it by getting there

45
00:03:31,280 --> 00:03:36,200
faded for instance and if that is not the case then how are we going to do it properly.

46
00:03:36,290 --> 00:03:43,130
So I'm going to propose an alternative to using the Singleton pattern where we instead have a prefab

47
00:03:43,160 --> 00:03:48,380
of objects that we want to persist between levels and I'm going to call these The persistent objects.

48
00:03:48,440 --> 00:03:54,860
So I'm going to create a new empty game object and call it persistent objects and under that I'm going

49
00:03:54,860 --> 00:03:56,360
to drag our fade object.

50
00:03:56,360 --> 00:04:00,950
Now notice because I've just prefab it I'm gonna have to go into the core prefab remove the fader from

51
00:04:00,950 --> 00:04:07,400
the core prefab and I'm going to drop it on to the persistent objects and I'm going to make a prefab

52
00:04:07,400 --> 00:04:09,340
of the persistent objects.

53
00:04:09,380 --> 00:04:15,140
Now what I want to do is not actually have this persistent objects in the scene but have it spawned

54
00:04:15,260 --> 00:04:20,570
in by a class and I'm going to call that class the persistent object spawner.

55
00:04:21,050 --> 00:04:27,680
So I'm going to create a new class over in Visual Studio I'm going to have it under Cor you just see

56
00:04:27,680 --> 00:04:28,410
a code rather.

57
00:04:28,460 --> 00:04:31,880
Going to create a new class called persistent object spawner.

58
00:04:32,030 --> 00:04:40,310
Don't say yes and I am going to create the mono behaviour and I'm going to namespace it to core RPG

59
00:04:40,310 --> 00:04:47,360
core and what I'm going to do with this spawner lesson while we've got it created let's just go ahead

60
00:04:47,870 --> 00:04:53,360
and I'm going to go into the core prefab because we want this spawner in every scene we wanted wherever

61
00:04:53,360 --> 00:04:57,660
whichever scene we start in we want the persistent objects to get spawned.

62
00:04:57,830 --> 00:05:06,220
So I'm going to add this core persistent object spawner onto the core prefab the root of that don't

63
00:05:06,230 --> 00:05:15,590
really matter where it goes and then what I'm gonna want is a reference to the serialize field a game

64
00:05:15,620 --> 00:05:22,920
object because basically I want a prefab here and I want to know what is the persistent object prefab.

65
00:05:22,910 --> 00:05:31,790
So that's what I'm going to call this object here and then we can implement an awake method and we want

66
00:05:31,790 --> 00:05:37,430
to do is basically instantiate the persistent object prefab but how do we know if this is the first

67
00:05:37,430 --> 00:05:42,280
scene how do we know we haven't already created this persistent object prefab and as the name suggests

68
00:05:42,280 --> 00:05:48,320
it has persisted from the previous scene well the way I'm gonna do this is with a static variable it's

69
00:05:48,320 --> 00:05:56,270
going to be a bool has spawned so if you never come across a static variable before he has a quick description

70
00:05:56,570 --> 00:05:59,720
a normal variable usually lives and dies with the class.

71
00:05:59,720 --> 00:06:05,120
So in the case of our spawner between scenes you would lose the state of the boolean whether it has

72
00:06:05,120 --> 00:06:10,970
spawned or not with a static variable however it lives and dies with the application rather than with

73
00:06:11,060 --> 00:06:16,940
the instance of the class which means that once we have set this boolean in one instance of the class

74
00:06:17,270 --> 00:06:22,910
in a future scene where we've got a new instance of the persistent object spawner that is going to remember

75
00:06:22,910 --> 00:06:25,010
the value that it was set before.

76
00:06:25,040 --> 00:06:29,180
Now generally this is a bad idea because it's a global variable but in this case we've got very few

77
00:06:29,180 --> 00:06:34,160
options with the way unity is structured and we're gonna default it to false.

78
00:06:34,190 --> 00:06:36,050
So by default we haven't spawned.

79
00:06:36,140 --> 00:06:42,260
So in a way I'm going to say if has spawned then we're just going to return and not do anything.

80
00:06:42,260 --> 00:06:45,190
And otherwise we are going to say it has spawned true.

81
00:06:45,380 --> 00:06:51,430
And we're going to call the spawn persistent objects function which I'm going to create now so controlled

82
00:06:51,440 --> 00:06:53,380
dot to generate that.

83
00:06:53,690 --> 00:06:55,640
And that should basically do the trick.

84
00:06:55,640 --> 00:07:02,350
So what we're going to do here is create that prefab and set it to do not destroy on load like you can

85
00:07:02,350 --> 00:07:05,880
take that as a little mini challenge for you.

86
00:07:05,910 --> 00:07:07,320
So what we're gonna get back.

87
00:07:07,350 --> 00:07:15,780
Once we instantiate is a game object and I'm going to call this the persistent object like so and we're

88
00:07:15,780 --> 00:07:21,980
going to instantiate the prefab which is the persistent object prefab which we've got now sterilized

89
00:07:21,990 --> 00:07:24,770
field here like so.

90
00:07:24,780 --> 00:07:25,770
And then what.

91
00:07:25,920 --> 00:07:32,880
So once we've got that instantiated we want to make sure that it won't be destroyed on load so that

92
00:07:32,880 --> 00:07:34,100
it hangs around.

93
00:07:34,110 --> 00:07:35,260
Simple as that.

94
00:07:35,280 --> 00:07:40,440
So let's see whether this has worked out our core now has this persistent object spawner.

95
00:07:40,500 --> 00:07:47,130
It's asking for a prefab let's drop in the prefab that we created over game core which is our position

96
00:07:47,160 --> 00:07:51,800
objects and that basically has all the objects we want to hang around.

97
00:07:51,840 --> 00:07:55,560
So if I go ahead and hit play Let's see if it's doing what we'd expect.

98
00:07:55,560 --> 00:08:01,140
We've got this don't destroy and load part of the scene which is a persistent object clone and it has

99
00:08:01,140 --> 00:08:02,250
got the fader under it.

100
00:08:02,280 --> 00:08:06,230
So if I go through the portal notice it doesn't spawn another fader.

101
00:08:06,240 --> 00:08:11,770
We don't get any more fading but we still got the fader from the previous scene hanging around.

102
00:08:11,820 --> 00:08:17,370
So that's done the job and we haven't had to use a single Singleton but the astute among you will have

103
00:08:17,370 --> 00:08:19,730
noticed that we did use a static.

104
00:08:19,740 --> 00:08:23,280
So it is sort of like a singleton but not quite.

105
00:08:23,280 --> 00:08:30,300
And it's certainly not a way of getting access to the persistent objects for that we have to rely on

106
00:08:30,300 --> 00:08:34,400
things like find objects and tags and all those other mechanisms that we know and love.

107
00:08:34,410 --> 00:08:42,420
So with all that done we can now actually access the fader from our transition and doing that we can

108
00:08:42,420 --> 00:08:48,130
very easily just do it with a C the fader are gonna have a fade object to store here and I'm just going

109
00:08:48,130 --> 00:08:57,540
do I find objects by type and that's going to be of type Fader like so and with this we can now call

110
00:08:57,540 --> 00:09:01,860
all of its public methods which are the fade out in the fading and in fact I'm going to remove this

111
00:09:01,860 --> 00:09:06,660
co routine now because we no longer need that we're just using that for testing purposes to show you

112
00:09:06,960 --> 00:09:12,300
how you can cool coatings within coatings which you're going to use now in your challenge to fade between

113
00:09:12,300 --> 00:09:13,130
scenes.

114
00:09:13,170 --> 00:09:20,430
So you want to fade out completely before the scene load then fade back in afterwards and maybe you

115
00:09:20,430 --> 00:09:26,580
want to have a little wait while the screen is completely fade out to allow the camera to settle and

116
00:09:26,580 --> 00:09:32,790
for the play and not to see any jiggling around the camera or the player which is of a good idea and

117
00:09:32,940 --> 00:09:37,740
make it all configurable so the designer can change the parameters of how long it is.

118
00:09:37,740 --> 00:09:39,660
Fade out fade in and wait.

119
00:09:39,720 --> 00:09:43,470
Pause video and have a go at this challenge okay.

120
00:09:43,470 --> 00:09:44,430
Welcome back.

121
00:09:44,430 --> 00:09:46,290
So hopefully that wasn't too tricky.

122
00:09:46,290 --> 00:09:47,180
Let's give it a shot.

123
00:09:47,970 --> 00:09:50,430
So we've got this don't destroy our load.

124
00:09:50,430 --> 00:09:52,280
We're doing a finding our fader.

125
00:09:52,300 --> 00:10:00,690
Now I'm actually going to go ahead and put some line breaks in here and just before I yield return to

126
00:10:00,780 --> 00:10:04,820
load the scene asynchronously I'm going to make sure that we are completely faded out.

127
00:10:04,920 --> 00:10:10,080
Which basically means that we're going to do a yield return to make sure that occur routine has finished

128
00:10:10,680 --> 00:10:17,910
and we're going to call the fade a dot fade out routine with a time that I want to have configurable

129
00:10:17,940 --> 00:10:24,150
so to make these times configurable I'm going to add some serialized fields so first serialized field

130
00:10:24,150 --> 00:10:34,590
is going to be float and the fade out time and I'm going to default this to two seconds maybe two seconds

131
00:10:34,590 --> 00:10:35,670
might be a bit long.

132
00:10:35,700 --> 00:10:37,670
We probably want to fade out quite quickly.

133
00:10:37,800 --> 00:10:45,240
So then I'm going to copy and have a fade in time and that can be a bit longer and then we'll have a

134
00:10:45,240 --> 00:10:52,160
fade wait time I'll call it and I'll be like very small point five or something like that.

135
00:10:52,230 --> 00:11:00,350
So now we can use those variables our fade out we're going to have a fade out time as we fade out and

136
00:11:00,350 --> 00:11:05,210
then once the scene comes back up we are going to make sure we've done all of our setup.

137
00:11:05,210 --> 00:11:10,400
So we've got the other portal updated our player then we are going to do our yield return.

138
00:11:10,820 --> 00:11:13,090
And I'm just gonna do a wait for seconds.

139
00:11:13,130 --> 00:11:14,420
So that's going to be new.

140
00:11:14,420 --> 00:11:20,890
Wait four seconds and we're going to use the fade wait time there.

141
00:11:21,170 --> 00:11:26,660
And the idea there is that we've done all last set up we've moved the player and then the waiting we're

142
00:11:26,660 --> 00:11:32,270
just gonna wait five seconds or point five seconds for the camera to stabilize and things like that

143
00:11:32,750 --> 00:11:41,030
and then once we've done that we can start the process of yield return fade a dot fade in and that's

144
00:11:41,030 --> 00:11:47,690
gonna be the fade in time like so and then when that's finally finished the job of this current portal

145
00:11:47,690 --> 00:11:52,100
is done so we can go ahead and destroy it and you can see how this is all happening asynchronously we're

146
00:11:52,100 --> 00:11:59,150
not having to pause the whole game we're just being I would say fade out over a series of frames then

147
00:11:59,150 --> 00:12:04,700
load over a series of five frames update the player and wait for a series of frames and then fade in

148
00:12:04,700 --> 00:12:10,730
over a series of frames so this whole function can take many frames to run that's the whole beauty of

149
00:12:10,730 --> 00:12:15,770
the cover routine so let's go ahead and give us a shot we're gonna go ahead and hit play and see if

150
00:12:15,770 --> 00:12:16,670
our character.

151
00:12:16,780 --> 00:12:24,350
No fade happening right now if I go through the portal fades down fades back up slowly in the New World.

152
00:12:24,560 --> 00:12:28,940
Now this is all configurable I felt that first fade was a little bit slow.

153
00:12:29,030 --> 00:12:34,700
So what I'm gonna do is I'm gonna go to the fader prefab and just change it for all the instances of

154
00:12:34,700 --> 00:12:39,290
the fader nope sorry I need to get to the portal prefab and change it for all the instances of the portal

155
00:12:39,290 --> 00:12:45,800
because we put our fade out times on the portal so the fade out I'm gonna make point five seconds really

156
00:12:45,800 --> 00:12:49,610
quick fade in time just one second long and the wait time.

157
00:12:49,700 --> 00:12:57,650
Point five let's give that shot I go and play fades out pretty quickly so that my running animation

158
00:12:57,650 --> 00:13:01,790
doesn't look like it comes to an end so it looks like he's just running on into the next level and then

159
00:13:01,790 --> 00:13:03,810
the fading looked pretty good.

160
00:13:03,860 --> 00:13:11,330
So to recap what we've achieved in this lecture is the ability to call our fader in transition period

161
00:13:11,660 --> 00:13:17,420
and we've done that by allowing our Fader to live between scenes and essentially be a singleton without

162
00:13:17,420 --> 00:13:22,510
using the Singleton pattern by using this persistent object spawner instead.

163
00:13:22,610 --> 00:13:28,280
And hopefully you see how that's nice and neat and persistent object spawner is a small class and the

164
00:13:28,280 --> 00:13:30,060
fader itself managed to say so.

165
00:13:30,140 --> 00:13:33,740
Small class 2 and each is responsible for its own job.

166
00:13:33,740 --> 00:13:39,020
So that brings us to the end of this scene management section I hope you agree that it's quite fun to

167
00:13:39,020 --> 00:13:45,380
be able to transition between scenes with this fading visualization and be able to go through multiple

168
00:13:45,380 --> 00:13:51,560
portals and appear at the other side of a level and that gives you lots of levers to pull and position

169
00:13:51,590 --> 00:13:56,610
and put together many levels in a quite a wide and large world.

170
00:13:56,660 --> 00:14:01,070
I really look forward to seeing what maps of worlds you come up with please go and share them over on

171
00:14:01,070 --> 00:14:03,380
the forum linked against this lecture.
