1
00:00:04,650 --> 00:00:05,910
Hello and welcome in this lecture.

2
00:00:05,910 --> 00:00:11,280
We are going to be getting a rudimentary saving system in place so that if I hit save he has saved to

3
00:00:11,310 --> 00:00:18,030
a save file and there some incomprehensible binary gobbledygook in our save file but I then move away

4
00:00:18,030 --> 00:00:19,180
from that location.

5
00:00:19,320 --> 00:00:24,480
I can actually reload the save file and boom it takes me back to where I saved.

6
00:00:24,480 --> 00:00:25,230
Fantastic.

7
00:00:25,260 --> 00:00:26,190
How are we going to do that.

8
00:00:26,190 --> 00:00:28,950
Let's dive in and see.

9
00:00:29,140 --> 00:00:34,120
So how do we actually store something useful for a change rather than all these strings about hello

10
00:00:34,120 --> 00:00:35,080
world.

11
00:00:35,080 --> 00:00:40,470
Well we want to be able to serialize something for example like our player position.

12
00:00:40,480 --> 00:00:46,750
Now I use the word serialized there and that's just a fancy way of saying I want to take the representation

13
00:00:47,110 --> 00:00:52,300
of some state and turn it in to binary which is basically what we're doing here with this string.

14
00:00:52,300 --> 00:00:58,360
You could say that we are serialize in this string into binary and then going backwards we are DC realizing

15
00:00:58,420 --> 00:00:58,920
the string.

16
00:00:59,230 --> 00:01:04,780
Now we can do that with many data types we want to serialize for example floats and ints and vectors

17
00:01:04,780 --> 00:01:10,930
and in fact whole things like the player movement and the health state and all those kind of things.

18
00:01:11,110 --> 00:01:13,450
All of that we want to serialize.

19
00:01:13,450 --> 00:01:14,620
So how are we going to do that.

20
00:01:14,620 --> 00:01:17,680
Well I'm going to create a couple of private methods in here.

21
00:01:17,710 --> 00:01:25,840
One of them is going to be to serialize the vector so we're going to return a byte array and we'll call

22
00:01:25,840 --> 00:01:28,300
it serialize vector Mike.

23
00:01:28,320 --> 00:01:33,970
So and obviously it's going to take a vector three as its input have just something called that vector.

24
00:01:33,970 --> 00:01:37,810
So whatever the vector is it's going to serialize it and then we're gonna do some stuff in there to

25
00:01:37,810 --> 00:01:43,660
return a byte array and we want the inverse of that which is going to be decentralized which will take

26
00:01:43,660 --> 00:01:52,900
a vector 3 and decentralize it a decentralized vector and it is going to take a bite array as its argument

27
00:01:52,990 --> 00:01:59,620
and we'll just call this the buffer as we have called it before so how are we going to implement this.

28
00:01:59,630 --> 00:02:01,160
And what's the point.

29
00:02:01,160 --> 00:02:06,830
Well the point is that here when we are saving to the file we are going to use our serialize vector

30
00:02:06,890 --> 00:02:07,280
method.

31
00:02:07,310 --> 00:02:08,280
Let me show you how.

32
00:02:08,450 --> 00:02:13,760
Instead of trying to serialize this string which is pretty useless let's go ahead and get the transform

33
00:02:13,790 --> 00:02:14,680
of the player.

34
00:02:14,690 --> 00:02:21,110
So I'm going to have a transform variable in here called the player transform and how we going to get

35
00:02:21,110 --> 00:02:26,720
that well I'm just going to do a get player transform and create that method.

36
00:02:26,780 --> 00:02:29,810
So again can generate the method and where's it gone.

37
00:02:29,810 --> 00:02:35,520
It's gone up here when I move it down below our public stuff at the very least.

38
00:02:35,920 --> 00:02:43,150
And then we can do a game object find with Tag and we know how to do this now the player and we're going

39
00:02:43,150 --> 00:02:49,440
to get the players transform and that's what we're going to return OK So whoops I start to close that

40
00:02:49,440 --> 00:02:50,280
file.

41
00:02:50,280 --> 00:02:51,030
There we go.

42
00:02:51,030 --> 00:02:53,310
Control shifty reopens it by the way.

43
00:02:53,310 --> 00:02:54,850
So that's got to play a transform.

44
00:02:55,320 --> 00:02:59,340
And then we want to somehow serialize that into an array of bytes.

45
00:02:59,340 --> 00:03:02,350
So we're going to have a bite array.

46
00:03:02,610 --> 00:03:09,510
So I'm going to call the buffer and we're going to assign from that the serialize or two that we're

47
00:03:09,510 --> 00:03:11,900
going to assign a serialize vector.

48
00:03:12,000 --> 00:03:17,850
And it's going to take in the player transform dot position like so.

49
00:03:18,390 --> 00:03:22,370
So that gets us the data which were then going to right into the file.

50
00:03:22,380 --> 00:03:24,720
I'm just replacing out where I had bytes with buffer.

51
00:03:24,780 --> 00:03:29,880
So we're writing the buffer out into the file which is going to write out the vector which means on

52
00:03:29,880 --> 00:03:34,180
the other end you can then read it out and that's going to be part of the challenge for you.

53
00:03:34,230 --> 00:03:36,720
But how do we actually do this serialization.

54
00:03:36,720 --> 00:03:43,350
Well we can use the methods in bits converter so bit convert a dot and then you can use a few methods

55
00:03:43,350 --> 00:03:43,960
in here.

56
00:03:44,010 --> 00:03:53,190
One of them is the get bytes method and that allows us to take in various overloads of primitive types.

57
00:03:53,220 --> 00:03:58,540
So you can use boolean chars doubles shorts ints floats and longs and stuff like that.

58
00:03:58,590 --> 00:04:04,250
Basically all these primitive types they can take in and turn them in to a set of bytes for you into

59
00:04:04,260 --> 00:04:08,440
a byte array and that's what we're going to be doing for our vector.

60
00:04:08,460 --> 00:04:13,950
So we can take our vector and split it up into the state that actually contains the X Y and Z and that's

61
00:04:13,950 --> 00:04:21,770
going to return as a byte array here like so now we want to put all these byte arrays together.

62
00:04:21,840 --> 00:04:26,070
So the way I'm going to do that going to cause I'm going to have more than one go have a bite array

63
00:04:26,070 --> 00:04:34,110
for X Y and Z and the way I'm going to do that is by introducing a byte a right at the top which I am

64
00:04:34,110 --> 00:04:42,810
going to call the vector bytes and it is just going to be an empty one new byte array and we are going

65
00:04:42,810 --> 00:04:43,340
to make.

66
00:04:43,380 --> 00:04:45,480
How big how big should it be.

67
00:04:45,480 --> 00:04:46,440
Well let's think about.

68
00:04:46,440 --> 00:04:50,170
There are three floats that need to fit inside this byte right.

69
00:04:50,610 --> 00:04:55,110
So it's three times however big a float is in bytes.

70
00:04:55,110 --> 00:04:57,390
How many bytes does a float take up.

71
00:04:57,390 --> 00:05:00,570
Well you could google it but generally speaking is four bytes.

72
00:05:00,600 --> 00:05:04,280
So that should give us enough space to store our floats in.

73
00:05:04,530 --> 00:05:10,200
And then once we've got this vector bytes we need to copy in the byte array that we've got back from

74
00:05:10,200 --> 00:05:11,580
our converter.

75
00:05:11,580 --> 00:05:14,840
So I'm going to do the get that and do a copy too.

76
00:05:15,150 --> 00:05:19,920
And then you can paste in the array that you want to copy it to and the index you wanted to start copying

77
00:05:19,980 --> 00:05:20,640
at.

78
00:05:20,640 --> 00:05:23,730
So the first one we're going to put an index 0.

79
00:05:23,750 --> 00:05:28,950
So at the 0 bytes it's going to start writing in and then the next one where are we going to put that

80
00:05:28,950 --> 00:05:35,860
little challenge for you have to think about where is that going to go well if each float is for long

81
00:05:35,890 --> 00:05:41,800
then we want to start at four because that will be after the vector x and then we can do another one.

82
00:05:41,830 --> 00:05:47,710
So what you gonna end up with is a chunk of vectors basically of four bytes each.

83
00:05:47,720 --> 00:05:54,610
We're gonna get a total of 12 bytes over all filled with float information so we've got three floats

84
00:05:54,640 --> 00:05:56,800
in those eight 12 bytes.

85
00:05:56,980 --> 00:06:03,820
And so at the end of this state I am going to return the vector bytes to complete our sterilization

86
00:06:03,880 --> 00:06:10,200
effort to go the other way is quite similar this time we have to read in our bytes.

87
00:06:10,210 --> 00:06:13,330
So we're going to do a bit converter and see what we've got.

88
00:06:13,420 --> 00:06:15,830
We've got big converter and we can do a two.

89
00:06:15,840 --> 00:06:22,330
Now it doesn't have a to float but it does have a two single that is a single as opposed to a double.

90
00:06:22,650 --> 00:06:23,380
And that's what we want.

91
00:06:23,380 --> 00:06:24,520
So a two single.

92
00:06:24,730 --> 00:06:29,220
And it takes in notice it takes in the byte array and a start index.

93
00:06:29,230 --> 00:06:30,160
So this is perfect.

94
00:06:30,160 --> 00:06:36,450
What we can do is pass in the buffer and we can say hey the first one that comes back from index 0 is

95
00:06:36,460 --> 00:06:43,230
going to read in 4 bytes of a single or a float and then that's going to return the float value.

96
00:06:43,240 --> 00:06:45,680
So we need to create a vector we want to store.

97
00:06:45,700 --> 00:06:49,360
So I'm going to have a vector three that's gonna be the result.

98
00:06:49,400 --> 00:06:53,060
It's gonna be a new vector three like so.

99
00:06:53,080 --> 00:07:00,490
And then this result we can say result dot X it should be equal to this first portion from position

100
00:07:00,520 --> 00:07:01,350
zero.

101
00:07:01,360 --> 00:07:07,400
Now I'd like you to just go ahead and fill out as a mini challenge the rest of this.

102
00:07:07,440 --> 00:07:10,550
Function OK.

103
00:07:10,550 --> 00:07:11,110
Welcome back.

104
00:07:11,120 --> 00:07:18,470
So I am going to just pretty much do the same thing so why is going to come from the offset for as we

105
00:07:18,470 --> 00:07:26,510
did over here and then Z is going to come from the offset eight makes it going from eight to twelve

106
00:07:26,600 --> 00:07:32,720
in byte array and then we're going to return the result of the vector three the new vector 3 that we

107
00:07:32,720 --> 00:07:34,730
d serialized from our buffer.

108
00:07:35,360 --> 00:07:39,330
So your challenge is to restore the player position.

109
00:07:39,440 --> 00:07:42,530
Now we've saved it already in our save function.

110
00:07:42,560 --> 00:07:50,510
So what you need to do is update your load function to get that player position from the save file and

111
00:07:50,630 --> 00:07:53,720
then make the player go to that safe location.

112
00:07:53,720 --> 00:07:59,870
So now what should happen is if you walk around the world and save and then move to a different location

113
00:07:59,900 --> 00:08:05,750
when you load your player should jump back to location at which you saved it so suppose video and see

114
00:08:05,750 --> 00:08:08,780
if you can get this to work.

115
00:08:08,800 --> 00:08:09,740
Welcome back.

116
00:08:09,760 --> 00:08:14,710
So we're going to start off with updating our load function which is basically what we're doing at this

117
00:08:14,710 --> 00:08:19,630
challenge so instead of doing this string conversion from the buffer we know the buffer now contains

118
00:08:19,630 --> 00:08:23,080
a vector rather than a string.

119
00:08:23,130 --> 00:08:24,170
It should do anyway.

120
00:08:24,190 --> 00:08:30,250
So what we're going to do is we are going to D.C. realize the buffer instead into the vector and basically

121
00:08:30,250 --> 00:08:35,680
in one fell swoop we're going to assign it to the player transform so I'm going to grab the player transform

122
00:08:35,680 --> 00:08:41,260
using the function we've handled created and then I'm going to set the player transform dot position

123
00:08:41,710 --> 00:08:48,520
to be equal to the D serialized vector and we are going to pass in the buffer as the input.

124
00:08:48,540 --> 00:08:53,390
And we should get the vector coming out that we have built using our bit converter.

125
00:08:53,590 --> 00:08:58,600
So hopefully let's see that if that works go ahead and hit play over and the editor and I'm going to

126
00:08:58,600 --> 00:09:02,070
run over to a location that wasn't our start location and hit save.

127
00:09:02,110 --> 00:09:07,330
Now I want to show you that the save file has now been updated with stuff that is incomprehensible because

128
00:09:07,330 --> 00:09:11,990
they are bytes that aren't part of the unicode encoding or if they are part of the unicode encoding

129
00:09:12,310 --> 00:09:16,690
they don't really make any sense because they are just floating point numbers they are locations in

130
00:09:16,690 --> 00:09:19,640
space that aren't getting rendered properly.

131
00:09:19,930 --> 00:09:23,470
So we are then going to move away from that location that we saved.

132
00:09:23,470 --> 00:09:26,860
And if I hit load bam I go back to location I saved.

133
00:09:26,870 --> 00:09:31,660
Obviously it's also remembered where I wanted to move to from the before the load.

134
00:09:31,780 --> 00:09:32,710
But that's okay.

135
00:09:32,780 --> 00:09:37,510
We're definitely getting the saved location of the file if I can save again you can see that it's overwritten

136
00:09:37,510 --> 00:09:42,750
it and now that new save location is where I will load back to no matter what I do.

137
00:09:42,760 --> 00:09:46,770
So we've got the rudiments of a very very basic saving system here.

138
00:09:47,110 --> 00:09:52,420
And the Points of all that was to really take you over and give you an understanding of what serialization

139
00:09:52,420 --> 00:09:54,940
and d serialization is all about now in practice.

140
00:09:54,940 --> 00:09:59,890
We wouldn't go around doing this for every single one of our classes manipulating byte arrays and using

141
00:09:59,890 --> 00:10:01,880
bit converters were all the basic types.

142
00:10:01,900 --> 00:10:05,690
Now there are better ways and more automatic ways of doing this in C shop and that's what we're going

143
00:10:05,690 --> 00:10:07,450
to learn about in the next lecture.

144
00:10:07,450 --> 00:10:08,230
So I'll see you there.
