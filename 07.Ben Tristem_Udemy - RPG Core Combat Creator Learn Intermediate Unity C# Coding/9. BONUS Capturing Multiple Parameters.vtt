WEBVTT
1
00:00:04.460 --> 00:00:10.430
So welcome to this little bonus lecture about how you can go about saving more than one piece of data

2
00:00:10.820 --> 00:00:12.670
for any given component.

3
00:00:12.710 --> 00:00:16.490
The moment I've shown you how you can return just one thing that I want to show you there's a couple

4
00:00:16.490 --> 00:00:18.510
of ways that we could do this differently.

5
00:00:18.590 --> 00:00:21.380
The first way is going to be to use dictionaries.

6
00:00:21.380 --> 00:00:24.440
The second is going to be to use struct.

7
00:00:24.440 --> 00:00:27.080
Let's start with the dictionary approach first.

8
00:00:27.080 --> 00:00:31.780
Basically it hinges off the fact that here we just need to return any old objects.

9
00:00:31.790 --> 00:00:35.120
And it's got to be serialized for the moment we're turning it back to three.

10
00:00:35.120 --> 00:00:38.660
But it could be a more complex compound object such as a dictionary.

11
00:00:38.660 --> 00:00:43.820
So what we're gonna do is we're going to save a dictionary that stores both the transforms position

12
00:00:44.390 --> 00:00:46.740
and the transforms rotation.

13
00:00:46.790 --> 00:00:52.400
And for simplicity we're going to store the rotation as the EULA angles the vector representation of

14
00:00:52.400 --> 00:00:54.270
the rotation rather than the Cotonou.

15
00:00:54.800 --> 00:00:56.660
So let's have a go at doing that.

16
00:00:56.660 --> 00:01:01.190
So first things first we need to create the dictionary that captures the state.

17
00:01:01.370 --> 00:01:03.340
So we're going to create a dictionary.

18
00:01:03.350 --> 00:01:10.010
It's going to take string as the key so I can give the different items in the dictionary a name such

19
00:01:10.010 --> 00:01:17.240
as position and rotation and then we're going to just have any old object as the object in our dictionary.

20
00:01:17.570 --> 00:01:22.610
So that could allow us to store multiple serialized vectors or we could store other things too such

21
00:01:22.610 --> 00:01:24.200
as floats and billions and so on.

22
00:01:24.860 --> 00:01:31.700
So I'm going to call this data and I'm going to create a new dictionary of exactly that type so it's

23
00:01:31.700 --> 00:01:38.090
a little bit redundant there but that's how we have to create dictionaries then we want to set a dictionary

24
00:01:38.090 --> 00:01:39.970
key we want to set it from the string.

25
00:01:39.980 --> 00:01:46.520
So we're going to do data and then using these brackets notation we're going to set the position and

26
00:01:46.520 --> 00:01:51.400
we're going to set the position to what we were currently returning from capture state.

27
00:01:51.420 --> 00:01:59.450
It is going to be that vector 3 and we can do that because we can store any object inside this dictionary

28
00:02:00.230 --> 00:02:06.170
and then we're gonna do the same thing with the rotation and then we are going to be storing again a

29
00:02:06.170 --> 00:02:14.080
new serialized bool vector three new serialized bool vector three and we are going to be storing the

30
00:02:14.080 --> 00:02:16.150
transform dot EULA angles.

31
00:02:16.180 --> 00:02:22.960
So that's just the vector representation of the rotation and then what we want to return is the dictionary

32
00:02:22.960 --> 00:02:25.600
object the data dictionary object.

33
00:02:25.600 --> 00:02:30.520
So now we're gonna make a little bit of a change in our restore status at the moment we are casting

34
00:02:30.520 --> 00:02:35.470
the serialized vector 3 because we thought that what we had returning back was that serialized ball

35
00:02:35.470 --> 00:02:37.030
back to three it no longer is.

36
00:02:37.160 --> 00:02:38.860
It's now a dictionary of this type.

37
00:02:38.890 --> 00:02:43.870
So we have to cast to that type and we have to store that type and what we're storing is not the position

38
00:02:43.900 --> 00:02:47.740
but the data object that we created and capture state.

39
00:02:47.740 --> 00:02:52.420
And that means that when we are setting up our transformed opposition we have to get that out of the

40
00:02:52.420 --> 00:02:53.250
data object.

41
00:02:53.250 --> 00:03:00.300
So instead we're gonna do data square brackets position and then we're going to have to cast that to

42
00:03:00.300 --> 00:03:05.260
the serialized vector 3 because all we know about it is that it is of object type.

43
00:03:05.320 --> 00:03:07.110
That's all the compiler knows about it.

44
00:03:07.140 --> 00:03:09.250
So we have to explicitly say no no.

45
00:03:09.270 --> 00:03:11.960
We know that this is a serialized ball vector 3.

46
00:03:12.090 --> 00:03:17.130
So we put our casts and we put the right amount of brackets around things and then we can convert it

47
00:03:17.490 --> 00:03:18.190
to a vector.

48
00:03:18.210 --> 00:03:20.160
And then finally assigned to the transform position.

49
00:03:20.160 --> 00:03:26.550
So what this is doing to recap is it's going in to our data dictionary object looking for the key named

50
00:03:26.550 --> 00:03:29.880
position that returns something of object type.

51
00:03:30.030 --> 00:03:34.550
We know that it is a series of vector three type so we have to cast it to that.

52
00:03:34.770 --> 00:03:41.400
And then on the result of the cast we can call to vector which converts our serialized vector three

53
00:03:41.790 --> 00:03:47.790
back into a unity vector 3 and then we can do the same thing with rotation as well so we're going to

54
00:03:47.790 --> 00:03:53.400
transform you like angles equals and then pretty much the same thing so I'm going to just go ahead and

55
00:03:53.400 --> 00:04:00.810
copy it but instead of position we're going to use the rotation key so we can go ahead and give that

56
00:04:00.810 --> 00:04:01.310
a go.

57
00:04:01.320 --> 00:04:05.310
First thing you're gonna want to do is delete your save file because this is an incompatible change

58
00:04:05.310 --> 00:04:11.220
with any of your previous save files and we can go ahead and hit play move the guy around rotate him

59
00:04:11.340 --> 00:04:17.160
save his current location and then restart the game and he's going to pop up into existence in that

60
00:04:17.160 --> 00:04:19.470
place and in that rotation.

61
00:04:19.500 --> 00:04:21.120
So that seems to have worked.

62
00:04:21.150 --> 00:04:25.650
Now I did say that there's another way of doing this so I'm just going to click my fingers and reset

63
00:04:25.650 --> 00:04:31.560
the state of this and we're going to have a go at doing this same thing using a struct instead.

64
00:04:31.560 --> 00:04:40.890
So we're gonna create a struct within this class we're just gonna call it the mover save data and then

65
00:04:40.950 --> 00:04:48.790
the members of this struct are going to be the serialized vector 3 type position and they Syrians will

66
00:04:48.790 --> 00:04:55.530
vet three type again of rotation and these are what we're going to create when we do our capture state.

67
00:04:55.540 --> 00:05:04.120
So we are going to do a we're going to create a mover save data type called data that's going to be

68
00:05:04.120 --> 00:05:16.060
a new move a safe data and then we want to set this up so that data DOT's position is equal to our transformed

69
00:05:16.130 --> 00:05:22.320
position like so and we'll have to make our position in rotation public to be easily accessible as well.

70
00:05:24.320 --> 00:05:29.470
Like so so that we can easily set it and remember to create a new serialized bool vector three here

71
00:05:29.980 --> 00:05:32.480
around our transformed position.

72
00:05:32.530 --> 00:05:33.610
So that's what we're gonna do.

73
00:05:33.630 --> 00:05:35.200
That's that's our position now.

74
00:05:35.230 --> 00:05:41.050
Same thing for the rotation that's gonna be creating it from the EULA angles instead.

75
00:05:41.050 --> 00:05:45.710
And what we want to return our capture state is this data object like.

76
00:05:45.730 --> 00:05:51.000
So now you have to be careful because this struct is not yet automatically serialized bool to do that.

77
00:05:51.010 --> 00:05:57.280
We have to put the annotation with the square brackets just above the struct called system dot see realizable

78
00:05:57.400 --> 00:05:57.760
like.

79
00:05:57.780 --> 00:06:03.070
So that will just make sure that all the public fields in the struct are able to be serialized down

80
00:06:03.130 --> 00:06:05.840
by the C sharp serialization system.

81
00:06:05.860 --> 00:06:07.070
So now we've done this.

82
00:06:07.090 --> 00:06:10.810
Basically what we're doing with the dictionary is that we've done it with a struct and it is nicely

83
00:06:10.810 --> 00:06:11.980
typed for us.

84
00:06:12.040 --> 00:06:18.730
So when we want to cast back using restore state we can do our move saved save data cast instead because

85
00:06:18.730 --> 00:06:20.170
that's the type it should be.

86
00:06:20.320 --> 00:06:25.240
And we're going to put it in a variable called data of the type move a save data.

87
00:06:25.600 --> 00:06:31.040
And now we don't have to do any nasty casting which has the advantage of doing the struct approach.

88
00:06:31.090 --> 00:06:36.770
So instead of doing position dot to vector we're going to do data dot position dot to vector and there's

89
00:06:36.790 --> 00:06:44.190
no casting going on that just that final conversion in to the unity vector type.

90
00:06:44.410 --> 00:06:50.410
And then we can do the same thing with the EULA angles we're just doing the rotation instead.

91
00:06:50.830 --> 00:06:54.490
And we should be able to go over into unity and try that again.

92
00:06:54.640 --> 00:06:57.160
This is an incompatible change with the dictionary change.

93
00:06:57.160 --> 00:07:03.370
So you've got to delete your save file and then we can go ahead and hit play should bring us into the

94
00:07:03.370 --> 00:07:04.570
default location.

95
00:07:04.570 --> 00:07:12.100
And if I move location and go ahead and hit save in this place and restart then what we should see is

96
00:07:12.100 --> 00:07:16.030
that we load up in that new location facing in the correct direction.

97
00:07:16.060 --> 00:07:22.480
So now hopefully you feel confident with being able to add more and more data into an individual components

98
00:07:22.690 --> 00:07:28.450
save you can keep adding more fields to some struct like this or to addiction dictionary whichever approach

99
00:07:28.840 --> 00:07:31.040
you feel most comfortable with using.

100
00:07:31.360 --> 00:07:36.100
Now I'm going to click my fingers again and put everything back because we don't need the rotation for

101
00:07:36.100 --> 00:07:37.990
simplicity at this stage.

102
00:07:37.990 --> 00:07:41.890
So there is everything back as it was for the end of this bonus lecture.
