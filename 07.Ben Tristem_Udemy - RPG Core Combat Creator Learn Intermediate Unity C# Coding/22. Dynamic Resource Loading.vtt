WEBVTT
1
00:00:04.330 --> 00:00:09.340
Hello and welcome in this lecture we're gonna take our first step towards being able to save what weapon

2
00:00:09.340 --> 00:00:12.940
we've got equipped by loading the weapon by name.

3
00:00:12.940 --> 00:00:17.330
So here I've got the name swords so I could load the sword if I go ahead and click.

4
00:00:17.380 --> 00:00:20.450
You'll see that what's loading is the sword in my hand.

5
00:00:20.590 --> 00:00:27.410
But if I went ahead and replaced this with the name of my scriptural object the fireball.

6
00:00:27.520 --> 00:00:29.000
Then if I go ahead and load.

7
00:00:29.020 --> 00:00:33.340
You can see that the weapon I've actually got is my fireball in the hand.

8
00:00:33.370 --> 00:00:38.840
So let's dive in and see how this is done so you may have noticed the emission in this section that

9
00:00:38.840 --> 00:00:40.340
so far we don't have savings.

10
00:00:40.340 --> 00:00:45.680
So if I pick up this sword and go through into the next level then what we're going to see is that the

11
00:00:45.680 --> 00:00:47.120
sword disappears.

12
00:00:47.120 --> 00:00:49.910
And when I come back I still don't have the sword either.

13
00:00:49.910 --> 00:00:51.290
So that sword is just gone.

14
00:00:51.290 --> 00:00:55.520
We've got no save information about it and that's a little bit out of keeping.

15
00:00:55.520 --> 00:00:56.330
Now why is that.

16
00:00:56.330 --> 00:01:03.110
Well because we're going to build a whole equipment system in part 2 of the RPG.

17
00:01:03.110 --> 00:01:10.880
So we don't want to rehash everything and make a kind of faulty equipment system in this part one.

18
00:01:10.910 --> 00:01:17.570
So what we are going to do however is put some sort of savings system in place that allows us to at

19
00:01:17.570 --> 00:01:22.520
the very least remember the current sword that we've got equipped as we go between levels or the current

20
00:01:22.520 --> 00:01:24.380
weapon we might have equipped.

21
00:01:24.530 --> 00:01:31.520
Now the fundamental building block for this is that we got to understand how we can load resources at

22
00:01:31.520 --> 00:01:35.030
runtime because we've got a problem that's in this scene here.

23
00:01:35.030 --> 00:01:38.290
There are no references to a sword at all.

24
00:01:38.630 --> 00:01:44.390
And because of the way Unity's resources loading system works this means it's quite hard for us to get

25
00:01:44.390 --> 00:01:46.290
hold of the scene.

26
00:01:46.310 --> 00:01:48.950
The script will object for the sword.

27
00:01:48.950 --> 00:01:51.440
So why does unity make this so tricky for us.

28
00:01:51.440 --> 00:01:54.970
Well let's consider resource packaging in unity.

29
00:01:55.010 --> 00:02:00.650
So imagine you've got this kind of set up in Unity you've got yourself two scenes and these scenes contain

30
00:02:00.680 --> 00:02:08.210
objects they might have some references to prefabs they might have references to an audio trigger for

31
00:02:08.210 --> 00:02:15.320
example if you'd set up a audio connection in scene one to a prefab between the order then the reference

32
00:02:15.620 --> 00:02:20.240
for that audio trigger is actually stored in the scene so the scene depends on that audio then the prefabs

33
00:02:20.240 --> 00:02:22.730
might have meshes might have other things.

34
00:02:22.730 --> 00:02:27.580
You know there's all these resources all linked up like so and you can see that they might share resources.

35
00:02:27.590 --> 00:02:34.020
So Scene 2 as got reference this prefab which shares this prefab with scene 1 and so on and so forth.

36
00:02:34.070 --> 00:02:39.020
So it's all very complicated and you as you're going through developing your game you might have things

37
00:02:39.020 --> 00:02:45.230
that are just left out over here that aren't actually being used by any of the scenes or you know this

38
00:02:45.350 --> 00:02:47.390
audio asset which we never ended up using.

39
00:02:47.690 --> 00:02:51.740
So unity wants to be really efficient in packaging your game for you.

40
00:02:51.740 --> 00:02:55.360
For example we tell it that we want scene one in our bill.

41
00:02:55.370 --> 00:03:00.230
Let me show you how that is true if we go to your build settings you can see that we've got the scenes

42
00:03:00.230 --> 00:03:05.600
that we want to include here in our build settings and what it does is it goes through everything that's

43
00:03:05.600 --> 00:03:10.570
referenced in scene one and it says OK well we want this audio thing that we set up.

44
00:03:10.580 --> 00:03:15.890
We want this prefab and also we'll look at everything that the prefab references and say well we want

45
00:03:15.890 --> 00:03:17.230
these things too.

46
00:03:17.360 --> 00:03:19.090
And so on and so forth.

47
00:03:19.100 --> 00:03:24.560
And it goes through and marks all the objects that are referenced through Scene 1 or indirectly referenced

48
00:03:24.620 --> 00:03:25.690
through Scene 1.

49
00:03:25.880 --> 00:03:31.280
And this means that we've now got a really efficient package build because we only need to include these

50
00:03:31.310 --> 00:03:36.210
items and not any of the other items that weren't included in scene one.

51
00:03:36.230 --> 00:03:37.590
That's what unity is doing for us.

52
00:03:37.670 --> 00:03:38.940
But there are issues.

53
00:03:38.960 --> 00:03:45.530
For example what if we've got a sword that was loaded in scene two and we go over into scene one and

54
00:03:45.530 --> 00:03:49.580
we want to load it there how can we get hold of that sword.

55
00:03:49.700 --> 00:03:56.420
Well we can't unless we have a Resources folder and you have this special folder and it's like an editor

56
00:03:56.420 --> 00:04:04.070
folder it's a special folder called resources then everything in that Resources folder will be automatically

57
00:04:04.100 --> 00:04:06.520
bundled up into the game as well.

58
00:04:06.530 --> 00:04:09.890
So that's an additional thing that we have access to.

59
00:04:10.340 --> 00:04:16.880
So we need to create a Resources folder for what if we're trying to load our weapons dynamically at

60
00:04:16.880 --> 00:04:23.370
runtime we need to have a resource folder for their proof for their script objects.

61
00:04:23.480 --> 00:04:27.050
So we've got the five ball scripts logic we want to load that at runtime.

62
00:04:27.050 --> 00:04:32.270
So what we can do is we can go to our weapons and I'm going to create a Resources folder inside weapons

63
00:04:32.270 --> 00:04:38.210
it doesn't have to be at the top level of your hierarchy CALL IT resources make sure you have the s

64
00:04:38.270 --> 00:04:43.880
on the end there and then we're going to move in these scripts all objects so we've got the two bow

65
00:04:43.880 --> 00:04:48.860
scripts where objects are gonna go under resources we've got the fireball was going to go into resources

66
00:04:48.950 --> 00:04:54.170
and the sword under resources to an unarmed is going to go under resources.

67
00:04:54.200 --> 00:04:58.730
So now resources contains all the scripts will objects and you might be saying But hang on there were

68
00:04:58.730 --> 00:05:03.950
other things in those folders won't those not get loaded for example this sword equipped and the sword

69
00:05:03.980 --> 00:05:08.190
animator won't those things not get loaded Well actually they will get loaded.

70
00:05:08.210 --> 00:05:15.560
The reason being that the if we have a look in our graph again they have references to those other objects

71
00:05:15.950 --> 00:05:22.040
we have to look at for example our swords you can see has a reference to the equipped sword prefab and

72
00:05:22.040 --> 00:05:24.280
it has a reference to the animator override.

73
00:05:24.350 --> 00:05:29.590
So unity is clever enough to follow those links down to those two objects and say I need to include

74
00:05:29.590 --> 00:05:37.500
include those in the build as well so if we head over into our code editor and open up the fighter script

75
00:05:37.950 --> 00:05:45.540
why would like us to do is instead of using the default weapon here which is a link in the sense of

76
00:05:45.600 --> 00:05:50.370
these kinds of links I want us to simulate a link that is textural.

77
00:05:50.400 --> 00:05:57.390
So what do I mean by that that we're going to create a serialized field which is just gonna be a string

78
00:05:57.420 --> 00:06:06.990
and that's gonna be the default weapon name and I'm going to set this to an armed by default which is

79
00:06:07.110 --> 00:06:16.290
the name of here this assets my script will object for the unarmed attack and I'm going to use that

80
00:06:16.290 --> 00:06:23.340
as the default weapon name and then what I like to do is equip at start the default weapon so how am

81
00:06:23.340 --> 00:06:24.000
I going to do this.

82
00:06:24.030 --> 00:06:31.470
Well we're going to go and create a weapon object which we're going to fill in somehow and we're just

83
00:06:31.470 --> 00:06:33.240
going to equip that weapon instead.

84
00:06:34.080 --> 00:06:36.110
Now how are we going to equip this.

85
00:06:36.240 --> 00:06:47.790
Well we're going to use Unity's method called resources dot load and you can push in a string here for

86
00:06:47.790 --> 00:06:49.280
it to load the resource.

87
00:06:49.290 --> 00:06:54.780
So in this case I'm going to use the default weapon name to load that resource and you'll notice it's

88
00:06:54.780 --> 00:06:56.360
giving an error here.

89
00:06:56.370 --> 00:07:03.030
The reason is it can't convert to the right type but we can use the generic form of load which takes

90
00:07:03.030 --> 00:07:08.100
the angle brackets and if you have the angle brackets with weapon what it's gonna do is it's going to

91
00:07:08.100 --> 00:07:12.510
look for a resource in the resource folders that has the type of weapon.

92
00:07:12.510 --> 00:07:18.840
So it's going to look for a scriptural object of type weapon or a prefab that has a game object model

93
00:07:18.840 --> 00:07:23.910
behavior of type weapon the roots for example and it will take that look for the prefabs look for the

94
00:07:23.910 --> 00:07:30.690
scriptural objects and find that in the resource folders based on the name that you give here and the

95
00:07:30.690 --> 00:07:36.100
way it's looking it up is by the name relative to the resource folder.

96
00:07:36.120 --> 00:07:42.500
So if you had more folders inside the resources folder you'd have to include something like Arrow attacks

97
00:07:42.570 --> 00:07:44.100
forward slash unarmed.

98
00:07:44.250 --> 00:07:50.730
If you had an attacks folder under your resources but as we said we can put resources in multiple places

99
00:07:50.820 --> 00:07:56.130
and it's important when you have resource folders in multiple places that the names are never duplicated

100
00:07:56.130 --> 00:07:58.430
because that's how it looks set up it's looking for unarmed.

101
00:07:58.440 --> 00:08:04.320
If there was another folder which also had a resource called unarmed in it then it would not work.

102
00:08:04.320 --> 00:08:06.060
So you do have to keep those names unique.

103
00:08:06.060 --> 00:08:08.960
That's one of the downsides of using this approach.

104
00:08:09.090 --> 00:08:15.420
However you can if you want to go a little bit further and have a look at how we did the you you I.D.

105
00:08:15.420 --> 00:08:21.900
in the saving system you could apply you I.D. resource load to your resource loading and load your resources

106
00:08:21.900 --> 00:08:25.440
by your I.D. We're not gonna do that because that's very complicated.

107
00:08:25.470 --> 00:08:26.940
So no challenge in this lecture.

108
00:08:26.940 --> 00:08:32.730
Well I'd like you to do is get this set up so that you can try it out for yourself and go go away and

109
00:08:32.730 --> 00:08:39.480
just try this out and then I'm going to do the same OK so we're gonna go and try this in the editor.

110
00:08:39.840 --> 00:08:44.040
What I'd expect is to have the unarmed attack set by default.

111
00:08:44.040 --> 00:08:45.510
So let's go ahead and attack.

112
00:08:45.510 --> 00:08:47.460
Yes we've got on armed now.

113
00:08:47.460 --> 00:08:52.950
If I go and change select my player and I'm going to change.

114
00:08:52.950 --> 00:08:55.660
He is different weapon name from unarmed to.

115
00:08:55.680 --> 00:08:55.950
I don't know.

116
00:08:55.980 --> 00:09:00.780
Let's copy for example the sword sword name.

117
00:09:00.780 --> 00:09:02.580
That's why I'm going to put in here.

118
00:09:02.580 --> 00:09:04.350
So the default weapon name is sword.

119
00:09:04.360 --> 00:09:12.080
I'll go ahead and hit play and you can see that we are there equipped with a big sword and that's what

120
00:09:12.080 --> 00:09:18.750
it's showing basically that we're able to load these weapons by the string name rather than a direct

121
00:09:18.840 --> 00:09:19.260
link.

122
00:09:19.260 --> 00:09:23.220
Now this is not the way you typically want to do things in unity by the way cause it's a string reference

123
00:09:23.220 --> 00:09:24.310
it's horrible.

124
00:09:24.360 --> 00:09:29.210
But what we are going to do now is we're able to from the weapon.

125
00:09:29.520 --> 00:09:35.820
You can do a weapon name and that gets you the name of the prefab that of the name of the resource that

126
00:09:35.820 --> 00:09:36.800
created it.

127
00:09:36.810 --> 00:09:44.770
So that's going to give us the tools for saving this resource later on in the next lecture.

128
00:09:44.770 --> 00:09:45.320
I'll see you then.

