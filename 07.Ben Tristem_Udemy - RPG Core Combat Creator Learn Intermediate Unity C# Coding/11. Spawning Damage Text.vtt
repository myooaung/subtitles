WEBVTT
1
00:00:04.260 --> 00:00:05.400
Hello and welcome and this lecture.

2
00:00:05.400 --> 00:00:10.270
We're going to be spawning and damaged texts at runtime as you can see here in the inspector damage

3
00:00:10.290 --> 00:00:15.900
text has been spawned by the damage text spawner and you can see it's a clone of the prefab let's dive

4
00:00:15.900 --> 00:00:17.810
in and do that.

5
00:00:17.850 --> 00:00:26.430
So what we've got here is the current setup of our character prefab containing ad damage text prefab.

6
00:00:26.460 --> 00:00:32.190
Now this does mean that a character only has one damaged text prefab at a time and as you saw in my

7
00:00:32.190 --> 00:00:37.950
demo we wants to have them pop up and disappear as we actually get damaged.

8
00:00:37.950 --> 00:00:41.820
That means I'm gonna have to spawn them at runtime using a spawner.

9
00:00:41.880 --> 00:00:47.850
So the first thing we're going to do is we're going to add a damaged text component to our damaged prefab

10
00:00:47.880 --> 00:00:51.480
so that we can set things like setting the text.

11
00:00:51.480 --> 00:00:52.690
We're not going to use that just yet.

12
00:00:52.710 --> 00:00:55.650
We're going to put it in place just for our use later.

13
00:00:55.650 --> 00:00:59.490
We want to use it as a kind of manager components for the whole prefab.

14
00:01:00.180 --> 00:01:02.820
Then the next thing we're gonna do is gonna split split out.

15
00:01:02.820 --> 00:01:09.320
We're not going to have the damaged text prefab directly inside that character prefab anymore instead

16
00:01:09.330 --> 00:01:15.990
we're going to replace it with a damaged text spawn a prefab which itself has a damaged text spawner

17
00:01:15.990 --> 00:01:21.570
component and that damaged text spawner component is going to have a reference to the prefab so that

18
00:01:21.570 --> 00:01:29.130
whenever the damage text spawner says hey spawn that damaged text it will go ahead and do just that.

19
00:01:29.130 --> 00:01:33.300
So first of all let's set up this damage text prefab separately.

20
00:01:33.450 --> 00:01:39.630
So we are going to go ahead and create a new class I mean one to create that new class.

21
00:01:39.810 --> 00:01:45.030
And we are going to create a new folder here in our scripts at the moment we don't have anything for

22
00:01:45.030 --> 00:01:48.290
UI so I'm going to create a new folder.

23
00:01:48.330 --> 00:01:54.080
Call it UI and inside that UI folder that's going to open up the correct one.

24
00:01:54.090 --> 00:02:00.860
I'm going to create a new folder again which is going to be called damage text.

25
00:02:01.070 --> 00:02:03.120
That's gonna be everything damage text related.

26
00:02:03.120 --> 00:02:09.840
So in here I'm going to create a new seashells script and it's going to be called again damage text

27
00:02:10.040 --> 00:02:15.420
dot c s or dot dot type this dot CSL add it for you automatically as we know.

28
00:02:15.420 --> 00:02:19.610
So I'm gonna go ahead and open that and make sure this damage text is named spaced.

29
00:02:19.620 --> 00:02:27.720
So it's going be in namespace RPG dot UI new stuff here DoT damage text and then paste add damage text

30
00:02:27.720 --> 00:02:32.790
class right in there and we don't need start or update for our damage text at the moment it's just gonna

31
00:02:32.790 --> 00:02:38.970
be an empty class and what we do want to do is remember to go into our damage text prefab and add that

32
00:02:38.970 --> 00:02:39.700
component.

33
00:02:39.720 --> 00:02:46.410
So let's go and add components look for damaged text and add that in that's just going to mean that

34
00:02:46.410 --> 00:02:53.280
it will allow us to restrict what prefabs we want down to just the ones that have a damage text component

35
00:02:53.280 --> 00:03:00.460
at the root which is what we want to do essentially so finally we want to remove this from the character

36
00:03:00.460 --> 00:03:06.710
prefab so I've got the character prefab and just remove that damaged text prefab from it because it

37
00:03:06.710 --> 00:03:14.530
said we are going to replace it with a new prefab I'll create an empty object and call it the damage

38
00:03:15.280 --> 00:03:20.790
text spawner and we can go ahead and make a prefab of that.

39
00:03:20.860 --> 00:03:28.270
So I'm going to prefab that in to UI in game create the damage text spawner prefab right in there and

40
00:03:28.270 --> 00:03:34.300
that's where we're gonna be doing the rest of the work by adding a new component so we're nicely set

41
00:03:34.300 --> 00:03:40.240
up for a challenge now to create the spawner create a component for this port of call it what you like

42
00:03:40.810 --> 00:03:48.100
create a spawn float function so spawn takes one float which is going to be how much damage that text

43
00:03:48.160 --> 00:03:54.760
should display and at the moment we don't need to use that float just have it there for later and then

44
00:03:54.760 --> 00:04:00.780
we are going to spawn on start so make sure that you call that spawn function on start somewhere pause

45
00:04:00.790 --> 00:04:03.130
video and have a go OK.

46
00:04:03.250 --> 00:04:03.670
Welcome back.

47
00:04:03.670 --> 00:04:04.850
Let's create this component.

48
00:04:04.870 --> 00:04:08.000
So over in our scripts UI damage text.

49
00:04:08.170 --> 00:04:18.290
I'm going to create a new C shop script called damage text spawner see Yes and let's go ahead and open

50
00:04:18.290 --> 00:04:25.340
that up and in here I am going to say I've put the C S in the name again that always end up doing that.

51
00:04:25.430 --> 00:04:30.450
Let's just rename it so that it doesn't have to see us in the name because that just doesn't work.

52
00:04:30.560 --> 00:04:33.880
And let's put this class in the namespace as well.

53
00:04:34.460 --> 00:04:39.830
So it's going to be namespace RPG dot UI dot damage text it's already there.

54
00:04:39.830 --> 00:04:40.960
So we don't have to.

55
00:04:41.120 --> 00:04:42.990
We've got the auto complete now.

56
00:04:43.130 --> 00:04:44.060
I'm going to leave start.

57
00:04:44.060 --> 00:04:48.530
I'm not going to need updates and I'm going to remove comments for both.

58
00:04:48.530 --> 00:04:55.810
And then what I want to do is create a public void spawn function which takes a float.

59
00:04:55.820 --> 00:05:01.100
So I said which is gonna be the damage amount and at the moment the damage mount.

60
00:05:01.100 --> 00:05:07.580
We're not going to use but we are going to want to actually spawn a damaged text instance that prefab.

61
00:05:07.580 --> 00:05:09.200
So we've done this sort of thing before.

62
00:05:09.200 --> 00:05:12.930
We need a serialized field that points to the prefab.

63
00:05:12.950 --> 00:05:18.230
So it's going to be of type damage text because that is going to be a component that is in the root

64
00:05:18.230 --> 00:05:23.390
of the prefab and you could just use game objects if you want for now but later on the fact that it's

65
00:05:23.390 --> 00:05:25.670
a damage text is going to be useful.

66
00:05:25.700 --> 00:05:30.810
Now we're going to call this the damage text prefab to make it super clear.

67
00:05:30.830 --> 00:05:34.320
This is a prefab not a link to something that already exists.

68
00:05:34.640 --> 00:05:42.230
And then we can set this equal to no like so and then we can use the damaged text prefab to instantiate

69
00:05:42.350 --> 00:05:44.720
a new prefab of the damaged text.

70
00:05:44.720 --> 00:05:52.040
So we're gonna do this by calling instantiate we're going to use the generic version of it because we

71
00:05:52.040 --> 00:05:57.560
do know that the type of our prefab is damaged text or it has a damaged text component in other words

72
00:05:58.010 --> 00:06:03.710
we're going to use that serialized field that we've just set up and we're going to set the parent transform

73
00:06:03.710 --> 00:06:11.390
to this particular transform on this component and then we're going to return the instantiated damaged

74
00:06:11.390 --> 00:06:13.420
text so it's damage text.

75
00:06:13.630 --> 00:06:19.700
I will just call this the instance that we've just created like so that we'll use later on we don't

76
00:06:19.700 --> 00:06:25.040
currently need it we're just going to instantiate things like so and then finally in start I am going

77
00:06:25.040 --> 00:06:29.760
to call spawn with some random damage value of 10 or something like that.

78
00:06:29.780 --> 00:06:32.420
Well let's make it 11 so it really stands out.

79
00:06:32.870 --> 00:06:40.340
And if we go over in that to unity in damaged text spawn a prefab can add in our component we've newly

80
00:06:40.340 --> 00:06:48.020
created the damage tech spawner which needs a prefab so let's go over to core note to UI in game and

81
00:06:48.020 --> 00:06:51.550
then use our damage text prefab there.

82
00:06:51.740 --> 00:06:57.710
So just drag it across into the editor if you're using a newer version of Unity and you are having to

83
00:06:57.710 --> 00:07:05.390
use the edits in my previous videos then just make sure that you have got your damaged text script at

84
00:07:05.390 --> 00:07:11.270
the root of your prefab it might not be where you automatically put it so do check that so that you

85
00:07:11.270 --> 00:07:18.350
can ensure you can drag it into the spawner here and that should mean that if we go ahead and hit play

86
00:07:18.380 --> 00:07:25.010
because it's on our character remember then it spawns up those damaged text instantly on begin play

87
00:07:25.010 --> 00:07:27.690
very much as it had been doing before.

88
00:07:27.700 --> 00:07:32.810
So at this time it has been spawned at runtime which means that we can call that spawn function again

89
00:07:33.260 --> 00:07:41.240
and again every time we get some damaged caused awesome so in this lecture we've learnt or revised how

90
00:07:41.240 --> 00:07:48.740
to create instances of prefabs and we've used it for our damaged text in the next batch we'll be learning

91
00:07:48.740 --> 00:07:55.310
about a new concept called unity events which really Handley allow us to hook up events in the editor

92
00:07:55.610 --> 00:07:58.580
between completely random components and I'll see you there.
