WEBVTT
1
00:00:04.250 --> 00:00:05.420
Hello and welcome.

2
00:00:05.420 --> 00:00:09.610
In this lecture we are going to be implementing our own custom gizmos.

3
00:00:09.620 --> 00:00:14.370
You can see here this guy when I have him selected I can see his chase distance.

4
00:00:14.390 --> 00:00:19.490
So if I'm outside it he's not gonna chase me if I'm inside he'll chase and I can select any of the other

5
00:00:19.490 --> 00:00:21.510
guards and see theirs as well.

6
00:00:21.530 --> 00:00:24.540
So let's dive in and see how we can make our own gizmos.

7
00:00:24.540 --> 00:00:26.760
It's a really cool thing to do.

8
00:00:26.870 --> 00:00:33.200
So it's currently a little bit hard for a designer to visualize how large the chase radius of any enemy

9
00:00:33.290 --> 00:00:34.460
actually is.

10
00:00:34.460 --> 00:00:41.840
So what we want to do is enable that to be visible using gizmos so we can see an example of gizmos here

11
00:00:41.900 --> 00:00:43.500
being used within unity.

12
00:00:43.580 --> 00:00:49.550
So we've got a capsule gizmo we've got this cylinder gizmo around the enemy which are being used by

13
00:00:49.550 --> 00:00:52.430
the nav mesh agent and the capsule component respectively.

14
00:00:52.430 --> 00:00:56.690
We've also got actually these arrows are gizmos of sorts as well.

15
00:00:57.470 --> 00:01:03.980
So gizmos are very useful for visualizing things and sometimes providing a level of control as well.

16
00:01:03.980 --> 00:01:11.270
So what we want to do is create our own gizmos that allow us to see the chase distance and allow the

17
00:01:11.660 --> 00:01:15.680
basically the designer to automatically edit that.

18
00:01:16.010 --> 00:01:17.150
How can we do that.

19
00:01:17.150 --> 00:01:22.520
Well there is a problem because we want this to be able to be seen when we are editing and when we're

20
00:01:22.520 --> 00:01:25.630
editing start and updates are not getting called.

21
00:01:25.630 --> 00:01:29.410
In fact none of our code is usually going to be called during update.

22
00:01:29.720 --> 00:01:35.030
But there is a special method which if you've got the same extensions as me you can have a snippet for

23
00:01:35.360 --> 00:01:39.390
called on draw gizmos.

24
00:01:39.540 --> 00:01:48.000
So if you do on draw gizmos then what you're going to get is the ability to well basically unity will

25
00:01:48.000 --> 00:01:52.470
call this when it wants you to draw gizmos.

26
00:01:52.500 --> 00:02:01.020
So this for example we I'm just gonna put a comment here saying called by unity because sometimes people

27
00:02:01.020 --> 00:02:05.510
won't know that these are unity messages like update and start because they're not as common.

28
00:02:05.580 --> 00:02:06.860
It's sometimes good to comment it.

29
00:02:06.890 --> 00:02:09.790
So if someone else coming to read your code or you down the line.

30
00:02:09.780 --> 00:02:11.550
Forgotten about draw gizmos.

31
00:02:11.550 --> 00:02:17.850
You'll be able to do this by the way there's a system method to this that we saw which was on draw gizmos

32
00:02:17.910 --> 00:02:26.010
selected and on draw gizmos selected will only draw them when that when your object is selected.

33
00:02:26.010 --> 00:02:29.970
That's what's going on with our capsule component for example.

34
00:02:30.030 --> 00:02:33.200
So maybe actually that is what we would rather use.

35
00:02:33.240 --> 00:02:39.250
So it's gonna be on draw gizmos selected and it's doing it twice for me.

36
00:02:39.570 --> 00:02:41.110
They get onto a gizmo selected.

37
00:02:41.160 --> 00:02:47.760
So this now is going to whenever we have our characters selected show us what the chase distances.

38
00:02:47.820 --> 00:02:48.900
Well no it's not.

39
00:02:48.900 --> 00:02:53.770
Not yet anyway because we need to make some calls to the gizmo API now.

40
00:02:53.940 --> 00:03:01.620
I have included a link to the gizmo API on you on unity and the unity docs and do have a look at that

41
00:03:01.660 --> 00:03:07.740
but I can also do it with auto complete so gizmos dot is generally where everything belongs where everything

42
00:03:07.740 --> 00:03:13.500
is and what you can do here is you can do it gives most dot color for example and it's what I would

43
00:03:13.500 --> 00:03:15.810
call a procedural API.

44
00:03:15.810 --> 00:03:22.320
And what that means is that you can set the color to say I don't know what color.

45
00:03:22.320 --> 00:03:23.730
How do you do this.

46
00:03:23.730 --> 00:03:24.090
That's right.

47
00:03:24.090 --> 00:03:29.940
You can do color dots and then you can select from one of these colors you could also construct your

48
00:03:29.940 --> 00:03:36.410
color from scratch they could be new color so I am using the English spelling that's the problem.

49
00:03:36.410 --> 00:03:42.770
So color and then you can give it the float values of RG B and the Alpha color as well if you want to

50
00:03:42.800 --> 00:03:46.130
but I'm just going to keep it simple and use a named color here.

51
00:03:46.130 --> 00:03:52.130
So I'm going to go with blue and what this means is that now any other calls that I do to the gizmos

52
00:03:52.190 --> 00:03:55.700
API is going to be drawing the gizmos in blue.

53
00:03:55.760 --> 00:03:57.220
That's what I mean by procedural.

54
00:03:57.230 --> 00:04:01.910
It means that you set some set up some variables and you do some calls.

55
00:04:01.940 --> 00:04:08.270
The alternative would be if when I did any of the draw calls I had to pass in the color that I want.

56
00:04:08.270 --> 00:04:11.230
That would be a non procedural API.

57
00:04:11.360 --> 00:04:17.160
So this is your chance to actually go a little bit further and do a challenge.

58
00:04:17.240 --> 00:04:19.220
We are going to draw a sphere.

59
00:04:19.340 --> 00:04:26.600
And for this I would like you to investigate the API that are available from unity in the gizmo dot

60
00:04:27.050 --> 00:04:27.670
levels.

61
00:04:27.860 --> 00:04:29.450
And what will you use.

62
00:04:29.450 --> 00:04:35.000
There are multiple options available here what seems to suit best for drawing a sphere and then trying

63
00:04:35.000 --> 00:04:36.200
to represent the distance.

64
00:04:36.200 --> 00:04:41.690
That's the idea we want the distance being represented when we have the enemy selected pause video and

65
00:04:41.690 --> 00:04:43.690
have a OK.

66
00:04:43.730 --> 00:04:44.300
Welcome back.

67
00:04:44.300 --> 00:04:49.640
So there are a few options under gizmos that we could be using so gizmos dot and you can see there is

68
00:04:49.640 --> 00:04:54.500
a draw sphere but this creates a solid sphere if I hover over it says solid sphere.

69
00:04:54.500 --> 00:04:56.340
That might not be ideal.

70
00:04:56.360 --> 00:05:02.330
So what I'm gonna do is draw a wire sphere which is more like the stuff we're seeing here.

71
00:05:02.330 --> 00:05:05.180
This is a wire capsule and a wire cylinder.

72
00:05:05.390 --> 00:05:11.300
So I'm going to be drawing a wire sphere and you can see that the API takes a sensor to that sphere.

73
00:05:11.300 --> 00:05:11.990
What should we give.

74
00:05:11.990 --> 00:05:20.610
There have a think about that going to use the transform dot position and then the radius is straightforwardly

75
00:05:20.670 --> 00:05:23.540
just going to be the chase distance that we have.

76
00:05:24.190 --> 00:05:24.580
Okay.

77
00:05:24.610 --> 00:05:25.800
So that should do the trick.

78
00:05:25.810 --> 00:05:30.300
They should draw a blue wire sphere when we have enemy selected.

79
00:05:30.300 --> 00:05:31.370
Let's have a look.

80
00:05:31.380 --> 00:05:32.100
There we go.

81
00:05:32.100 --> 00:05:34.050
We've got a blue wire sphere.

82
00:05:34.050 --> 00:05:35.760
Exactly when this enemy is selected.

83
00:05:35.760 --> 00:05:39.780
If I select a different enemy I will see his chase radius instead.

84
00:05:39.780 --> 00:05:45.810
So this just means we're not gonna be having gizmos all over the place at any given time which would

85
00:05:45.810 --> 00:05:47.430
be a little bit annoying.

86
00:05:47.490 --> 00:05:49.610
Obviously we don't have a chase radius when we select ourselves.

87
00:05:49.620 --> 00:05:50.520
So that is quite cool.

88
00:05:51.300 --> 00:05:56.370
And what I can do is you'll see this sphere automatically gets updated.

89
00:05:56.370 --> 00:05:59.460
The second I change the chase distance on this enemy.

90
00:05:59.460 --> 00:06:06.020
So if I make this chase distant larger he's going to be an enemy that is particularly adept at chasing.

91
00:06:06.090 --> 00:06:10.040
If I make it really small he is very short sighted myopic enemy.

92
00:06:10.050 --> 00:06:14.360
So I can be starting right here in front of him and he won't even see me.

93
00:06:14.390 --> 00:06:17.110
But if I move within his chase radius you see he attacks me.

94
00:06:17.220 --> 00:06:18.510
I leave his chase radius.

95
00:06:18.510 --> 00:06:24.930
He goes to the last location I was at gives up and then goes off walking again.

96
00:06:25.020 --> 00:06:25.350
Okay.

97
00:06:25.380 --> 00:06:28.140
So that is everything I wanted to cover in this lecture.

98
00:06:28.140 --> 00:06:33.920
We've been able to visualize the radius with which we chase the next lecture.

99
00:06:33.930 --> 00:06:40.020
We aren't going to be looking at having a bit of a guarding activity because at the moment you can see

100
00:06:40.020 --> 00:06:47.720
that if I go and coax this guy he comes over to me and then loses interest and stops where he was.

101
00:06:47.730 --> 00:06:51.320
But if he was guarding that particular spot he should probably return that.

102
00:06:51.330 --> 00:06:55.080
So we're going to implement some guard like behavior see that.
