1
00:00:04,620 --> 00:00:05,390
Hello and welcome.

2
00:00:05,400 --> 00:00:10,550
In this lecture we aren't going to be applying damage to an enemy capsule.

3
00:00:10,550 --> 00:00:13,430
So what happens is I walk up to it and I punch it.

4
00:00:13,440 --> 00:00:16,840
And you can see it's printing out how much health it has got left.

5
00:00:16,860 --> 00:00:20,130
In fact I could even show you on the enemy itself or have to restock.

6
00:00:20,160 --> 00:00:21,390
I think we've killed it.

7
00:00:21,390 --> 00:00:22,440
Let's go over.

8
00:00:22,440 --> 00:00:25,260
And if you look at the enemy we've got this health attribute.

9
00:00:25,260 --> 00:00:30,870
If I go and punch the enemy it's going down in fact it's happening exactly when the fist contacts the

10
00:00:30,870 --> 00:00:31,450
enemy.

11
00:00:31,560 --> 00:00:34,110
So we're going to show you how to do that as well.

12
00:00:34,110 --> 00:00:36,720
Let's dive in and see how it's done.

13
00:00:36,840 --> 00:00:42,150
So I think the least fun bit of our game at the moment is that when we punch that capsule we can keep

14
00:00:42,150 --> 00:00:42,540
doing it.

15
00:00:42,540 --> 00:00:46,340
That the capsule doesn't take any damage it doesn't actually progress anyway.

16
00:00:46,710 --> 00:00:52,110
So what we want to do is implement a kind of damage on that capsule.

17
00:00:52,110 --> 00:00:57,090
Now there's many places you could choose to keep the health of the capsule but I think the best thing

18
00:00:57,090 --> 00:01:02,760
given that we are using this component pattern and I've got a link to what I actually mean by the component

19
00:01:02,760 --> 00:01:06,280
pattern against this letter for you to take a read of in your own time.

20
00:01:06,450 --> 00:01:13,020
And the idea is that we should keep things as separate as possible among components are not going to

21
00:01:13,020 --> 00:01:19,530
put the health into the fighter or into any other kind of class because I want to be able to potentially

22
00:01:19,530 --> 00:01:23,070
damage things that can't fight back such as this capsule.

23
00:01:23,160 --> 00:01:29,610
So we've got our enemy and what we want to do to this is add a component to it a health component.

24
00:01:29,970 --> 00:01:36,630
So I'm actually gonna go ahead and create the health components in the combat portion of our scripts

25
00:01:36,630 --> 00:01:48,880
folder to create a new file in there and call it health C S and I'm going to make a model behavior and

26
00:01:48,910 --> 00:01:50,870
I'm going to put it in a namespace.

27
00:01:51,070 --> 00:01:54,390
So it's gonna be a namespace RPG.

28
00:01:54,400 --> 00:01:58,570
Dot combat and boom we've got our health.

29
00:01:59,530 --> 00:02:06,010
So the first thing that we need for health is going to be a health variable to keep track of things

30
00:02:06,010 --> 00:02:08,350
which is going to be a float in our case.

31
00:02:08,350 --> 00:02:15,520
And I'm just gonna call it the health and we can get a starting value of say 100 F for example.

32
00:02:15,580 --> 00:02:21,640
Now what's interesting about this is that it's not configurable so we could make it actually configurable

33
00:02:21,640 --> 00:02:26,180
by doing a serialized field in front of it.

34
00:02:26,210 --> 00:02:35,030
Now this won't work eventually because we want to know at some point in the future what a maximum health

35
00:02:35,030 --> 00:02:37,210
was versus what our current health is.

36
00:02:37,220 --> 00:02:39,980
But for now this will work.

37
00:02:39,980 --> 00:02:44,690
And then the other thing that is interesting about health is that it gives you the possibility to take

38
00:02:44,690 --> 00:02:45,190
damage.

39
00:02:45,200 --> 00:02:48,320
So we're going to add a public field here.

40
00:02:48,320 --> 00:02:53,330
Void take damage but we've got to give it the amount of damage that we want.

41
00:02:53,330 --> 00:02:56,970
So it's going to be a float damage.

42
00:02:57,170 --> 00:03:00,130
That's the amount of damage we're taking.

43
00:03:00,130 --> 00:03:07,540
Now little mini challenge for you if you want it to actually reduce this health but making sure that

44
00:03:07,540 --> 00:03:09,470
the health can't go below zero.

45
00:03:09,490 --> 00:03:12,690
So you can implement this whatever way you like.

46
00:03:12,730 --> 00:03:15,240
It's fairly straightforward okay.

47
00:03:15,240 --> 00:03:20,130
So if you've tried that or if you just want to go ahead and see how I'm doing it this is how I'm doing

48
00:03:20,130 --> 00:03:20,260
it.

49
00:03:20,280 --> 00:03:28,490
So the health is going to be equal to the essentially the health minus the damage but obviously that's

50
00:03:28,490 --> 00:03:32,510
not going to work because the health months the damage could go below zero if say for example the health

51
00:03:32,510 --> 00:03:35,330
was at 1 and the damage we got was 2.

52
00:03:35,330 --> 00:03:41,210
So what I'm gonna do is I'm going to put a lower bound on this by saying that I want to take the maximum

53
00:03:41,240 --> 00:03:42,940
of this value and zero.

54
00:03:43,280 --> 00:03:51,170
So it's gonna be math f dot Max and it's gonna be the health minus the damage or zero.

55
00:03:51,350 --> 00:03:56,310
So if it goes below zero then zero is gonna be higher so we'll take the value of zero.

56
00:03:56,360 --> 00:04:03,200
Like so and because we currently don't have a way don't have a health bar to see our current health.

57
00:04:03,200 --> 00:04:09,860
I'm just gonna print out the health of this particular components as we go as a kind of debugging measure

58
00:04:10,950 --> 00:04:12,660
so we need to use this component somewhere.

59
00:04:12,660 --> 00:04:16,260
So let's go over to our enemy I'm inside the enemy prefab.

60
00:04:16,260 --> 00:04:24,150
I'm gonna add a component down in the inspector here and look for the health component so we can give

61
00:04:24,150 --> 00:04:25,890
it a default health for the enemy.

62
00:04:25,890 --> 00:04:29,160
I'm going to make it a bit lower so we can test this out quickly.

63
00:04:29,160 --> 00:04:36,180
So we're gonna have a health of 20 and then it is time for your challenge to actually do the damage

64
00:04:36,180 --> 00:04:40,320
and we'll leave this one up to you we've got a public interface we've got a component you need to get

65
00:04:40,320 --> 00:04:42,600
hold of that component and use the public interface.

66
00:04:42,600 --> 00:04:46,710
So where should it be called and when should it be called.

67
00:04:46,920 --> 00:04:49,080
And how will you get that component.

68
00:04:49,080 --> 00:04:54,900
Think about these two head scratchers try and implement them and pause a video and have a go okay.

69
00:04:54,900 --> 00:04:55,310
Welcome back.

70
00:04:55,310 --> 00:04:56,880
Hopefully you didn't have too much trouble.

71
00:04:56,880 --> 00:05:00,170
Let's see how I'm gonna do it huh.

72
00:05:00,240 --> 00:05:04,320
By the way I don't necessarily know how I'm going to do the challenges I'm kind of figuring it out with

73
00:05:04,320 --> 00:05:04,770
you guys.

74
00:05:04,770 --> 00:05:10,380
So there is the fighter component seems like the logical place to do the damage.

75
00:05:10,440 --> 00:05:14,670
And in fact here we've got this attack behavior where we're doing this time since Las attack and then

76
00:05:14,670 --> 00:05:19,410
we're gonna set the trigger set the time since last attack and probably in here we're also going to

77
00:05:19,410 --> 00:05:20,630
do the damage.

78
00:05:20,760 --> 00:05:27,360
Now there is a little question though of perhaps doing the damage after a delay.

79
00:05:27,360 --> 00:05:31,080
So if you'd done it in here that's absolutely fine if I were going to start off by doing in here.

80
00:05:31,290 --> 00:05:39,040
So we're going to get hold of the health component so it can be health health components is equal to

81
00:05:39,070 --> 00:05:43,820
and then what's it going to be the target dot health.

82
00:05:44,040 --> 00:05:50,770
They get components and they health components.

83
00:05:50,910 --> 00:05:51,150
Right.

84
00:05:51,160 --> 00:05:52,110
So.

85
00:05:52,140 --> 00:05:54,190
So we got hold of our health component.

86
00:05:54,190 --> 00:05:56,700
Now we can just do some damage to it.

87
00:05:57,040 --> 00:05:58,800
So take damage.

88
00:05:58,810 --> 00:06:02,800
Now I'm not worrying about any null checks at this stage.

89
00:06:03,090 --> 00:06:05,480
Notice we need to tell it how much damage so how much damage.

90
00:06:05,480 --> 00:06:06,460
Well we don't know.

91
00:06:06,490 --> 00:06:14,940
So I'm going to add a serialized field up at the top of the fighter class to be the weapon damage you

92
00:06:14,940 --> 00:06:19,610
can see we're getting quite a few things here which are really to do with the weapon and not the fighter.

93
00:06:19,660 --> 00:06:24,570
But we're going to deal with that soon and don't worry so we've got the weapon damage.

94
00:06:24,620 --> 00:06:28,340
And I'm going to use the weapon damage in the take damage call.

95
00:06:28,430 --> 00:06:29,400
We've got a default for it.

96
00:06:29,400 --> 00:06:31,130
So that's all good.

97
00:06:31,130 --> 00:06:35,330
Now that should do the damage at the moment I'm not going to worry about where the target is now or

98
00:06:35,330 --> 00:06:36,390
health component is null.

99
00:06:36,410 --> 00:06:40,340
But those are potential worries that we're gonna have to deal with later on and we might get some errors

100
00:06:40,340 --> 00:06:45,900
at some points in our runtime about that go to it.

101
00:06:45,920 --> 00:06:46,670
I do.

102
00:06:46,670 --> 00:06:54,520
Attacking and you can see down here in the console is logging out that we've gone from 15 10 5 0 0 0

103
00:06:54,530 --> 00:06:57,620
0 because you can't go below zero and it doesn't try to.

104
00:06:57,740 --> 00:07:00,680
Which is nice and easy okay.

105
00:07:00,710 --> 00:07:05,450
But what I was saying is we might not necessarily want to do the damage as soon as the attack starts.

106
00:07:05,450 --> 00:07:10,760
Because what you might be noticing is if I go over he starts the attack and instantly I've done damage.

107
00:07:10,760 --> 00:07:15,200
What I want to do is actually use that animation event that we had from before.

108
00:07:15,200 --> 00:07:20,540
So I'm going to bring the animation events a little bit higher because it's quite important.

109
00:07:20,540 --> 00:07:26,630
I'm going to put it just below the attack behavior because it kind of makes sense that it will trigger

110
00:07:26,690 --> 00:07:28,760
off the animation event.

111
00:07:29,510 --> 00:07:34,610
And I'm going to put the damage in there and I'm going to leave a comment in attack behavior saying

112
00:07:34,610 --> 00:07:40,310
that that's where it's going to go to in fact I'm going to put this just after all in fact just before

113
00:07:40,340 --> 00:07:41,710
our attack trigger.

114
00:07:41,990 --> 00:07:46,850
So it says this will trigger the hit event and then the hit when is further down here and I might even

115
00:07:46,850 --> 00:07:52,100
just use the right syntax because then sometimes it can be really clever and allow you just to follow

116
00:07:52,100 --> 00:07:57,460
links in comments it doesn't in this case but sometimes that can be the case and it's just less ambiguous.

117
00:07:57,530 --> 00:08:06,440
So this should mean that now if we go and hit play and we click on our capsule the damage isn't actually

118
00:08:06,440 --> 00:08:09,830
done until the punch lands which is perfect.

119
00:08:09,830 --> 00:08:11,730
That's exactly the kind of behavior we want.

120
00:08:11,930 --> 00:08:17,270
And depending on what animation we choose that time is going to be variable depending on the animation.

121
00:08:17,510 --> 00:08:22,490
And that's pretty cool because then we'll play all the effects of taking damage after the punch has

122
00:08:22,490 --> 00:08:22,910
landed.

123
00:08:22,910 --> 00:08:27,100
For example the animation of the character dying.

124
00:08:27,330 --> 00:08:30,900
So I think that's enough for this lecture in the next lecture we're going to be looking at how we can

125
00:08:30,900 --> 00:08:37,050
make that capsule more like the player and in fact make them share the same base prefab and make each

126
00:08:37,050 --> 00:08:42,630
of them variants of it so that we can essentially have the same sets of components and configure them

127
00:08:42,630 --> 00:08:45,490
slightly differently depending on whether it's a player or an enemy.

128
00:08:45,510 --> 00:08:47,070
So I'll see you in that lecture.
