WEBVTT
1
00:00:04.330 --> 00:00:09.910
In this video we can implement Ray casting so that we click and our player moves in a nice seamless

2
00:00:09.970 --> 00:00:13.690
organic way around objects to the point that we've clicked.

3
00:00:13.750 --> 00:00:14.820
Let's jump in and get started.

4
00:00:15.130 --> 00:00:15.370
Okay.

5
00:00:15.380 --> 00:00:18.110
In a moment I'm going to open up my movie scripts.

6
00:00:18.130 --> 00:00:22.190
But first of all I forgot to rename my folder under my scenes folder.

7
00:00:22.240 --> 00:00:25.520
It's still called sample scenes so I'm going to change that to sandbox.

8
00:00:25.520 --> 00:00:26.170
Yes that's neat.

9
00:00:26.170 --> 00:00:27.530
Nice and tidy.

10
00:00:27.580 --> 00:00:27.760
Okay.

11
00:00:27.780 --> 00:00:29.110
Let's look at what we're trying to achieve here.

12
00:00:29.110 --> 00:00:34.990
We've got the player and the player needs to move from A to B what is B well that's where if we click.

13
00:00:35.030 --> 00:00:37.600
So this is the point that we click on our terrain.

14
00:00:37.720 --> 00:00:38.320
What do we do here.

15
00:00:38.320 --> 00:00:43.420
Well we're shooting from our camera camera's gonna be over here somewhere looking at the player from

16
00:00:43.420 --> 00:00:44.050
our camera.

17
00:00:44.050 --> 00:00:50.470
We're going to recast from the camera through our screen and find the point where we've clicked.

18
00:00:50.510 --> 00:00:56.590
And then after we find that point we need to be giving that information back to the player specifically

19
00:00:56.590 --> 00:01:03.830
the player's nav mesh agent component nav mesh agent to say to the nav mesh agent.

20
00:01:03.910 --> 00:01:06.520
This is the particular point we're interested in.

21
00:01:06.520 --> 00:01:10.240
Please navigate make your way to that particular point.

22
00:01:10.240 --> 00:01:17.860
So we need to create ourselves a method that we'll call probably move to cursor and within moved to

23
00:01:17.860 --> 00:01:21.100
cursor we need to be creating the logic of did.

24
00:01:21.130 --> 00:01:27.400
How did our ray hit somewhere on the terrain and where did it hit on the terrain and then moved to that

25
00:01:27.400 --> 00:01:28.450
particular point.

26
00:01:28.450 --> 00:01:29.950
So let's jump in and take that on.

27
00:01:29.980 --> 00:01:36.130
Okay let's find our script open up mover so a little bit of refit narration here is underneath.

28
00:01:36.160 --> 00:01:39.550
Update when to keep if input does get mouse button down.

29
00:01:39.700 --> 00:01:44.140
But instead of having lost Ryan here I'm going to grab my line lost Ray.

30
00:01:44.260 --> 00:01:49.920
Cut that and just pop it down the bottom underneath my debug drop raw draw right.

31
00:01:49.930 --> 00:01:52.090
And you know I'm gonna delete debug draw right.

32
00:01:52.090 --> 00:01:52.910
We don't need that at all.

33
00:01:52.910 --> 00:01:58.350
I'm just gonna get in the way I can within my if statement here I'm gonna start by making a method move

34
00:01:58.360 --> 00:02:06.880
to cursor parentheses semicolon and then just to close up our curly braces and so what is this going

35
00:02:06.880 --> 00:02:07.210
to be.

36
00:02:07.210 --> 00:02:12.560
Well new line we will say private void so no return type.

37
00:02:12.700 --> 00:02:19.820
Move 2 cursor parentheses curly braces what do we want to do.

38
00:02:19.820 --> 00:02:28.940
Well a couple of things we want to create a recast or call a recast method so physics dot Ray cast.

39
00:02:28.940 --> 00:02:33.140
So what we type in we want to show you something in here as soon as you type the parentheses you will

40
00:02:33.140 --> 00:02:38.860
get information about the options for the parameters to put within here for the different signatures.

41
00:02:38.870 --> 00:02:43.040
So hopefully this all makes sense and you remember this from other learning that you've done but for

42
00:02:43.040 --> 00:02:48.620
each time each time we have a method that is often different things that we can put within the parentheses

43
00:02:48.620 --> 00:02:50.750
different parameters we can feed into it.

44
00:02:51.020 --> 00:02:57.200
And here you can see if we click down we get other signatures or other parameters other different constructions

45
00:02:57.200 --> 00:02:59.160
of the parameters that we can put in there.

46
00:02:59.280 --> 00:03:03.860
You see a few of them in here that is taking in vector 3 origin then vector 3 directions.

47
00:03:03.860 --> 00:03:09.230
So that is describing array that starts at an origin and has a particular direction we've talked about

48
00:03:09.230 --> 00:03:09.870
that a bunch.

49
00:03:09.950 --> 00:03:14.780
If I scroll all the way down or click all the way down to the very last one which is 16 so you can see

50
00:03:14.780 --> 00:03:17.600
there's 16 different signatures for cast.

51
00:03:17.660 --> 00:03:19.150
This one is very simple.

52
00:03:19.160 --> 00:03:26.900
It's taking in Ray so it's of type Ray and then a keyword out for a ray cast hit.

53
00:03:26.900 --> 00:03:27.860
And that's what we're gonna do.

54
00:03:27.950 --> 00:03:29.720
We're gonna say what the ray is.

55
00:03:29.810 --> 00:03:33.440
And remember the ray is the origin point and the direction.

56
00:03:33.440 --> 00:03:38.120
Just another way of saying origin and direction is just saying Ray and then we want this out.

57
00:03:38.120 --> 00:03:42.080
Ray cast hit to get some information about well where did you hit and what can we do with that.

58
00:03:42.080 --> 00:03:46.960
We need to know some information about that collision point so we'll come back to this method in a moment

59
00:03:46.970 --> 00:03:51.800
first of all I'm going to create myself a couple of variables local variables within move to cursor

60
00:03:51.830 --> 00:03:56.080
So remember we're only going to be out of use these within move to cursor and not anywhere else.

61
00:03:56.090 --> 00:03:59.150
Not an update not anywhere else within our class.

62
00:03:59.150 --> 00:04:03.980
So this first variable is going to be of type array and we'll call it just straight up Ray.

63
00:04:04.010 --> 00:04:04.610
Nice and clear.

64
00:04:04.610 --> 00:04:07.770
Call it what it is call a duck a duck as they say.

65
00:04:08.090 --> 00:04:11.870
And we are going to go and grab our last ray we had before.

66
00:04:11.870 --> 00:04:16.400
So instead of calling it last ray and call it ray just to make it a little bit more general because

67
00:04:16.420 --> 00:04:17.650
we're using this over and over.

68
00:04:17.650 --> 00:04:24.590
So camera up Main Screen point to Ray input mouse position going to cut that and then pop it in here

69
00:04:25.040 --> 00:04:28.630
as our ray definition so Ray Ray equals.

70
00:04:28.720 --> 00:04:29.390
We have that there.

71
00:04:29.510 --> 00:04:34.610
And our second variable remember if we go back to our signature and if you can't find if you click within

72
00:04:34.610 --> 00:04:40.430
the parentheses in Visual Studio code if you hold down control shift space bar that will bring up the

73
00:04:40.430 --> 00:04:41.280
signatures.

74
00:04:41.360 --> 00:04:45.250
And if you're on a Mac then I'm I believe it's command shift spacebar.

75
00:04:45.290 --> 00:04:49.640
And if you're having trouble finding the shortcut keys then you can come all the way up to help and

76
00:04:49.640 --> 00:04:54.680
look for shortcut references that will take you off to a Web site and this Web site is going to show

77
00:04:54.680 --> 00:04:57.340
you a PDA of all the shortcut keys.

78
00:04:57.350 --> 00:05:02.100
So just a little hint They're not gonna go too much into all the different visual studio code nifty

79
00:05:02.160 --> 00:05:05.870
ness but you can go and have a look at the shortcut keys lot of good stuff in there so.

80
00:05:05.870 --> 00:05:09.950
Control shift space bar and you can see that dot dot dot dot.

81
00:05:09.950 --> 00:05:15.050
Back to what we're talking about before it's the 16th one you can see we're looking for Ray and then

82
00:05:15.050 --> 00:05:17.320
we're looking for out Ray cast hit.

83
00:05:17.360 --> 00:05:24.710
So I need to create of type Ray cast hit if I spell it correctly helps him Ray cast hit with a capital

84
00:05:24.710 --> 00:05:28.120
R and capital H and I'm just going to call this straight up hit.

85
00:05:28.240 --> 00:05:32.050
We could call it Hit information or hit details but we'll call it hit.

86
00:05:32.090 --> 00:05:32.990
Nice and clean.

87
00:05:32.990 --> 00:05:43.250
And then within my method now I can be passing in the parameters of Ray and then karma hit.

88
00:05:43.310 --> 00:05:47.630
So we're passing in Ray and we're passing in hit now what's really interesting is we need to put in

89
00:05:47.630 --> 00:05:49.750
front of hit the keyword out.

90
00:05:49.790 --> 00:05:54.740
So that means it's a little bit confusing but that means we're passing in the parameter hit but we're

91
00:05:54.740 --> 00:06:02.720
also retrieving out using the out keyword and storing in the hit variable information about where the

92
00:06:02.720 --> 00:06:04.010
ray cars hit.

93
00:06:04.010 --> 00:06:11.150
So this is a way for us to be storing the position that Ray cast has hit into out Ray cast hit variable

94
00:06:11.150 --> 00:06:14.900
called hit and the ray cast method itself is a ball.

95
00:06:14.930 --> 00:06:20.920
So what we're going to do is stored as a ball variable so we'll type Ball has hit equals.

96
00:06:20.930 --> 00:06:26.210
So when has hit is true we can do something with it which we'll do in a moment but first want to take

97
00:06:26.210 --> 00:06:31.100
you to the unity docs to have a quick look at recast hit and you can see when we're using Ray cast to

98
00:06:31.090 --> 00:06:36.650
hit that we have a whole bunch of properties that we can access so we can say Ray has hit dot and then

99
00:06:36.650 --> 00:06:40.040
any of these different things and then to use the information within here.

100
00:06:40.040 --> 00:06:45.590
So for example the impact point in world space where the ray hit the collider.

101
00:06:45.620 --> 00:06:47.450
So in other words where do we click.

102
00:06:47.450 --> 00:06:50.350
Within the world that is a very important piece of information.

103
00:06:50.430 --> 00:06:53.570
And some other cool things that we get it can get within here we might play around with these later

104
00:06:53.570 --> 00:06:56.680
on but this is the important one for now is point.

105
00:06:56.810 --> 00:07:01.590
So it be Ray casted dot point we'll get asked the impact point in world space.

106
00:07:01.640 --> 00:07:01.960
OK.

107
00:07:01.970 --> 00:07:07.150
So back within our method in here we've stored this as a ball.

108
00:07:07.190 --> 00:07:12.420
The last thing I'm going to do within my method is create an if statement.

109
00:07:12.440 --> 00:07:16.310
Well actually I say I'm going to create it but I'd like for you to create this as a challenge.

110
00:07:16.310 --> 00:07:20.210
And just to be super clear I'm going to do my little last ray that's hanging down there.

111
00:07:20.660 --> 00:07:26.990
So essentially what we want to do is if we've hit something then move to the point that we hit.

112
00:07:27.290 --> 00:07:33.680
So here is my challenge to finish the move the cursor method create an if statement within that if if

113
00:07:33.680 --> 00:07:42.780
statement if hit is true then change our NAV mesh agents destination to the impact point of our ray

114
00:07:42.780 --> 00:07:43.680
cast hit.

115
00:07:43.680 --> 00:07:47.690
Now I've given you all the information I'm giving you all the clues to figure that out should be a reasonably

116
00:07:47.690 --> 00:07:51.860
straightforward challenge but never fear if you can't figure out give it a good few minutes to figure

117
00:07:51.860 --> 00:07:55.400
it out and then now once you've done that I'll see you back here we'll go through it together

118
00:07:58.180 --> 00:08:02.160
so he's out if statement if has hit.

119
00:08:02.350 --> 00:08:08.340
Which is another way of saying if has he equals true then parenthesis ask curly braces.

120
00:08:08.350 --> 00:08:12.100
We want to grab our get component nav mesh Dot.

121
00:08:12.130 --> 00:08:13.000
Destination.

122
00:08:13.030 --> 00:08:14.500
Equals.

123
00:08:14.500 --> 00:08:14.820
Okay.

124
00:08:14.830 --> 00:08:17.550
Because that's saying where should our NAV mesh agent go to.

125
00:08:17.590 --> 00:08:18.310
What does it equal.

126
00:08:18.310 --> 00:08:26.230
Well I'll show you a moment ago that if we say hit dot point it will take us to the point and then semicolon

127
00:08:26.410 --> 00:08:29.970
take us to the point on our collision wherever we've collided.

128
00:08:30.010 --> 00:08:35.640
That is where the destination is going to be and then just clean it up delete those last couple of lines

129
00:08:35.640 --> 00:08:36.500
that we don't need.

130
00:08:36.600 --> 00:08:38.980
Add one more curly bracket curly brace.

131
00:08:39.000 --> 00:08:39.470
There we go.

132
00:08:39.660 --> 00:08:40.620
And then a final tidy up.

133
00:08:40.620 --> 00:08:44.440
Back up the top we can delete our variable Ray last Ray.

134
00:08:44.460 --> 00:08:45.720
Don't need that anymore.

135
00:08:45.720 --> 00:08:49.200
Well I'm here I'm going to delete the comments around update because we don't need that we know what

136
00:08:49.230 --> 00:08:49.980
update does.

137
00:08:50.020 --> 00:08:52.620
Okay let's save that jump back over into unity.

138
00:08:52.620 --> 00:08:55.770
Wait for it to compile into its magic now.

139
00:08:55.800 --> 00:09:02.860
All going to plan when I click on play and then when I click anywhere in the world my nav mesh agent.

140
00:09:02.870 --> 00:09:05.180
Therefore my player is going to move to that spot.

141
00:09:05.240 --> 00:09:10.310
We can do a little bit of tuning so that our play is moving with a bit more gusto a little bit more

142
00:09:10.310 --> 00:09:10.950
speed.

143
00:09:11.000 --> 00:09:15.180
Click on player scroll down to nav mesh agent and make the speed a little bit quicker.

144
00:09:15.210 --> 00:09:18.220
Let's have a nice fast game sound make that say twelve.

145
00:09:18.230 --> 00:09:23.460
The acceleration I'm going to make 20 stopping distance that is all fine.

146
00:09:23.750 --> 00:09:25.840
So click on play.

147
00:09:25.920 --> 00:09:26.240
Okay.

148
00:09:26.240 --> 00:09:27.750
Running around Yeah a little bit quicker.

149
00:09:27.830 --> 00:09:33.140
And you know his big turning circle that could be the angular speed which is fine but if you are new

150
00:09:33.140 --> 00:09:34.580
to Unity which hopefully you're not.

151
00:09:34.610 --> 00:09:38.400
But if you are on you then you know that you can make some changes here within.

152
00:09:38.570 --> 00:09:43.040
While we're in play mode so I could say make this 500 for angular speed.

153
00:09:43.040 --> 00:09:45.670
And then that will update or prepare.

154
00:09:46.040 --> 00:09:50.840
But as soon as I click out of play mode I will lose those changes and then we'll have to make them again

155
00:09:50.840 --> 00:09:51.710
outside of play mode.

156
00:09:51.740 --> 00:09:55.490
So pretty sure you know this stuff but just reminding you in case you've forgotten or you're a little

157
00:09:55.490 --> 00:09:56.750
bit new to unity.

158
00:09:56.810 --> 00:09:57.080
Okay.

159
00:09:57.100 --> 00:09:58.070
So pretty exciting.

160
00:09:58.070 --> 00:10:02.750
We now have our player moving to wherever we click on our map doing path finding using the nav mesh

161
00:10:02.750 --> 00:10:04.370
to get around obstacles.

162
00:10:04.370 --> 00:10:05.030
Great stuff.

163
00:10:05.030 --> 00:10:06.200
I'll see you in the next video.
