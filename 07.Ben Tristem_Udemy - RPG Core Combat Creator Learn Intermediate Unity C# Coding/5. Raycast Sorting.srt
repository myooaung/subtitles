1
00:00:04,490 --> 00:00:10,370
Hello and welcome in this lecture we're gonna be fixing our recasting logic so that it makes sure that

2
00:00:10,370 --> 00:00:15,820
the available action to us is the one closest to us the component closest to us.

3
00:00:15,820 --> 00:00:22,130
So if I hover over my enemy here you can see that is the attack action I see not the pickup action even

4
00:00:22,130 --> 00:00:24,400
though there is a pickup right behind him.

5
00:00:24,470 --> 00:00:27,130
And if I move my mouse just a little bit I can use the pickup.

6
00:00:27,260 --> 00:00:32,120
But if in as it currently stands and again that is not the case as we'll see in just a second.

7
00:00:32,120 --> 00:00:34,610
Let's dive in.

8
00:00:34,790 --> 00:00:37,440
OK so here's a little problem for us now.

9
00:00:37,480 --> 00:00:39,360
When we go ahead and hit play.

10
00:00:39,430 --> 00:00:44,230
If we have got no objects aligned with each other everything is just fine.

11
00:00:44,290 --> 00:00:50,890
But what happens for example if I take my pick up flower and I place that pickup flower in front of

12
00:00:50,890 --> 00:00:54,640
the enemy such that their colliders get in each other's way.

13
00:00:54,640 --> 00:00:55,540
Let's go and see this.

14
00:00:55,540 --> 00:00:58,870
So the collider here for the pickup is just fine.

15
00:00:58,870 --> 00:01:00,090
It's in front of the enemy.

16
00:01:00,190 --> 00:01:06,460
And as I mouse over it I get the pickup as the thing that I would click on which seems just fine.

17
00:01:06,550 --> 00:01:11,430
But what happens if I move this pickup behind the enemy instead.

18
00:01:11,440 --> 00:01:18,790
So I then go over to the enemy and mouse over the enemy and oh it's wanting me to do the pickup.

19
00:01:18,820 --> 00:01:24,370
Now the reason for this is that the pickup is the first thing that is returned in the right cast.

20
00:01:24,430 --> 00:01:32,500
So if we go over to our player control of C.S. and it's just close down this side bar for now what you

21
00:01:32,500 --> 00:01:41,260
will see is that our recast all is returning an array of hits and we are going to simply return with

22
00:01:41,260 --> 00:01:45,880
the first recast bill that we are able to interact with.

23
00:01:45,910 --> 00:01:52,900
Now in this case the right cast all is not returning things as you might expect by the order of depth

24
00:01:52,960 --> 00:01:53,770
within the scene.

25
00:01:53,770 --> 00:01:59,410
No instead is returning things based on some arbitrary order.

26
00:01:59,410 --> 00:02:04,900
Now we don't actually know what that order is but I'm guessing it's something to do with the hierarchy.

27
00:02:04,900 --> 00:02:08,890
But who knows in a different version of unity it might be completely different.

28
00:02:08,890 --> 00:02:15,980
So what we wanted to hear is actually get a sorted list of recast hits instead of the default.

29
00:02:16,660 --> 00:02:19,600
And we want them sorted by the distance.

30
00:02:19,660 --> 00:02:23,680
So that's what we're going to do we're going to introduce a function that allows us to get that sorted

31
00:02:23,680 --> 00:02:29,040
list and I'm going to call that function right cast all sorted.

32
00:02:29,110 --> 00:02:33,040
So right cast all sorted now.

33
00:02:33,280 --> 00:02:38,860
I don't actually need to take any arguments because we've got this get mouse Ray already on this current

34
00:02:38,890 --> 00:02:44,170
object and the return type is going to be this list of hits of the recast hits.

35
00:02:44,170 --> 00:02:47,710
So that'll be the return type and in the body.

36
00:02:47,740 --> 00:02:53,770
For now I am just going to go ahead and return the result of doing this Ray cast all.

37
00:02:54,250 --> 00:03:01,960
So it's going to return recast all like so and with Ray cast all sorted in place of the hits.

38
00:03:01,960 --> 00:03:08,080
Now obviously this is not what we want to do what we want to do is take the result of these hits and

39
00:03:08,080 --> 00:03:15,090
then sort them and then return that so that's what I have written out in pseudocode for us here get

40
00:03:15,120 --> 00:03:18,540
all hits sought by distance and then return.

41
00:03:18,540 --> 00:03:20,280
So how are we going to do that sought by distance.

42
00:03:20,280 --> 00:03:23,990
Well there are about a million ways you could sort a an array in C sharp.

43
00:03:24,000 --> 00:03:30,330
Now I think the simplest for us to use that uses the fewest new language features is this static function

44
00:03:30,330 --> 00:03:37,950
here array dot sort which takes in two arrays one array is going to be the key by which it is comparing

45
00:03:37,950 --> 00:03:41,750
the elements and the other array is going to be the actual items.

46
00:03:41,760 --> 00:03:43,470
So how does that actually translate.

47
00:03:43,470 --> 00:03:49,830
Well that means if you've got an array of recast hits the first item the first array is going to be

48
00:03:49,830 --> 00:03:55,170
an array of keys which is going to be the distance because we're sorting by distance and then the second

49
00:03:55,170 --> 00:04:01,170
array is going to be the recast hits themselves and it's going to rearrange that second array.

50
00:04:02,040 --> 00:04:09,030
So when we're sorting by distance we're going to have to essentially first build the array of distances

51
00:04:09,300 --> 00:04:15,240
and then we're going to have to sort the hits basically.

52
00:04:16,020 --> 00:04:16,260
Okay.

53
00:04:16,320 --> 00:04:22,190
So we've got a an outline let's do the first bit getting all the hits we've got this already it's essentially

54
00:04:22,200 --> 00:04:23,870
what we've been returning up to this point.

55
00:04:23,940 --> 00:04:31,650
So let's just pull it out into its own variable it's going to be a ray cast hit a ray that I'm going

56
00:04:31,650 --> 00:04:35,820
to call hits and it's going to be got from that right cast.

57
00:04:35,860 --> 00:04:36,960
So I can remove the comment.

58
00:04:36,960 --> 00:04:40,260
Pretty straightforward don't need a comment for it.

59
00:04:40,260 --> 00:04:48,370
Now sorting the distances first of all we need to build the array I need to basically build an array

60
00:04:48,370 --> 00:04:53,290
that is exactly the same length as the length of the array of hits.

61
00:04:53,320 --> 00:05:04,830
So what we want is a float array called distances which we are going to fill or create a new array containing

62
00:05:04,860 --> 00:05:06,480
the right amount of space.

63
00:05:06,480 --> 00:05:13,230
So it's going to be a float array of length hits dot length like so.

64
00:05:13,230 --> 00:05:16,250
So that basically creates as a brand new Array.

65
00:05:16,260 --> 00:05:19,050
That is the same length as I break past hits.

66
00:05:19,050 --> 00:05:22,250
Now as for populating it that's going to be part of your challenge.

67
00:05:22,260 --> 00:05:26,910
So I'm going to let leave that one there for you and remove some comments.

68
00:05:26,970 --> 00:05:29,970
Now we're going to have to sort our hits now.

69
00:05:29,970 --> 00:05:35,070
Again this is done using a ray dot sort like so.

70
00:05:35,070 --> 00:05:38,000
And as you can see there are many many many overrides.

71
00:05:38,010 --> 00:05:44,430
And the one we want is essentially the array of keys and arrays of items which is this one here.

72
00:05:44,460 --> 00:05:48,800
So the key is first is going to be the distances and then the second one is the items which is going

73
00:05:48,800 --> 00:05:49,950
to be the hits.

74
00:05:49,950 --> 00:05:56,370
So again it's going to rearrange this second one based on the first one and you can see that has no

75
00:05:56,370 --> 00:06:01,110
return value so it's actually rearranging the hits array in place.

76
00:06:01,110 --> 00:06:05,370
So now the hits array should be in order so we can return it.

77
00:06:05,400 --> 00:06:12,020
We can return hits like so so your challenge is to build up that distance array.

78
00:06:12,060 --> 00:06:20,210
So for each element of the array we want to correspond between each element of the array and the distance.

79
00:06:20,220 --> 00:06:27,780
So we'll have the 0 element of the hit array should be the or rather the other way round the zero earth

80
00:06:27,810 --> 00:06:33,540
element of the distance array should be the distance of the 0 earth element in the hit array.

81
00:06:33,720 --> 00:06:38,220
Similarly the fifth element of the distance race should be the distance of the fifth element in the

82
00:06:38,220 --> 00:06:38,670
hits right.

83
00:06:38,670 --> 00:06:40,970
That's how this sort function is expecting things.

84
00:06:40,980 --> 00:06:43,330
That's how we have to build that distance right.

85
00:06:43,530 --> 00:06:48,210
And then use a four rather than a for each loop just because it's gonna be easier to work with those

86
00:06:48,210 --> 00:06:53,730
indices and make sure that the elements are actually corresponding pause the video and see if you can

87
00:06:53,730 --> 00:06:55,320
achieve this.

88
00:06:55,320 --> 00:06:55,530
OK.

89
00:06:55,530 --> 00:06:56,370
Welcome back.

90
00:06:56,370 --> 00:07:00,480
Hopefully you didn't get too stuck with that let me know how the difficulty of that challenge was.

91
00:07:00,480 --> 00:07:05,420
So we're gonna have to build up this empty array at the moment we have created the new float to but

92
00:07:05,430 --> 00:07:11,910
has no elements or values in it so let's do a for each loop to populate it.

93
00:07:12,050 --> 00:07:16,610
So I'm going for a standard for loop here rather than a for each loop because I want to deal with the

94
00:07:16,610 --> 00:07:22,160
indices directly so I can create that direct correspondence and modify both of the arrays essentially

95
00:07:22,220 --> 00:07:25,010
well hit the distances right anyway.

96
00:07:25,010 --> 00:07:31,340
Now the length of this array is we could choose either of the links because we've basically made them

97
00:07:31,340 --> 00:07:33,520
to be exactly the same length.

98
00:07:33,620 --> 00:07:41,750
And then what we're going to do is set the distances eye so the current element I to correspond with

99
00:07:41,750 --> 00:07:45,860
the hits element I dot distance.

100
00:07:45,860 --> 00:07:53,070
So the hit value has a distance to the right cast and the distance we're going to be putting it back

101
00:07:53,120 --> 00:08:00,440
into the distance array which just means the sort function knows what value is supposed to be sorting

102
00:08:00,620 --> 00:08:02,340
relative to.

103
00:08:02,390 --> 00:08:09,550
So let's try that out go over in to unity now and see whether we have fixed our bug.

104
00:08:09,770 --> 00:08:15,370
So let's go ahead and hit play and move our flower in front of and behind.

105
00:08:15,380 --> 00:08:20,990
First of all we want to put it in front and check that it's still working as it should do when the flower

106
00:08:20,990 --> 00:08:22,440
is in front.

107
00:08:22,460 --> 00:08:29,860
So go back to the game view I hover over and sure enough the flower is blocking the guard.

108
00:08:30,020 --> 00:08:35,090
And now if I move the flower behind the guard go back to the game view and hover over the guard you

109
00:08:35,090 --> 00:08:40,560
can see that the guard is the first thing that's coming up because he is the closer of the two right

110
00:08:40,590 --> 00:08:41,600
constables.

111
00:08:41,930 --> 00:08:46,630
If I go away from the guards capsule I can still use that pickup.

112
00:08:46,670 --> 00:08:53,420
But the first thing that's going to be the action available to me is the first thing in front of the

113
00:08:53,420 --> 00:08:57,850
camera not things behind it and so on great stuff.

114
00:08:57,850 --> 00:09:03,280
So in this lecture we've learnt a very useful and transferable skill of how we can sort an array of

115
00:09:03,700 --> 00:09:09,950
certain objects based on some value within those objects or even some value that you calculate any of

116
00:09:09,970 --> 00:09:15,640
how we've just figured out how we could sort those arrays which is a very useful skill not just for

117
00:09:15,640 --> 00:09:21,560
recasting but generally everywhere loads of places and need to know how to sort.

118
00:09:21,580 --> 00:09:27,010
Now there are certain places in the world that we cannot currently go well we do not really want to

119
00:09:27,010 --> 00:09:28,160
be able to go to.

120
00:09:28,270 --> 00:09:30,100
But at the moment we can get there.

121
00:09:30,130 --> 00:09:33,160
So for example the river we can walk through the river.

122
00:09:33,280 --> 00:09:39,250
We want to make certain areas off limits and not walkable in our level so that's gonna be the subject

123
00:09:39,520 --> 00:09:40,320
of the next lecture.
