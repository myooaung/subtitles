1
00:00:04,330 --> 00:00:05,100
Hello and welcome.

2
00:00:05,100 --> 00:00:10,600
In this lecture we're gonna be learning how to edit the asset files in unity the asset files the scripts

3
00:00:10,600 --> 00:00:16,540
of object files directly and figure out how well this formatting means what all this information actually

4
00:00:16,540 --> 00:00:23,500
is and how we can change the structure of our progression to give us more flexibility and introduce

5
00:00:23,590 --> 00:00:28,910
a stat enough so that we can add things to the enum easily and say we want to add experience rewards

6
00:00:28,920 --> 00:00:29,860
to all of our characters.

7
00:00:29,860 --> 00:00:35,230
Now we might want to add I don't know some sort of armor value you can go in and those really easily

8
00:00:35,230 --> 00:00:37,160
now with a stack in them.

9
00:00:37,210 --> 00:00:43,230
Let's dive in and see how it's done so our base stands at the moment isn't hooked up with experienced

10
00:00:43,230 --> 00:00:43,680
reward.

11
00:00:43,680 --> 00:00:49,770
And the reason for this is that to do that I would have to add another method to progression and this

12
00:00:49,770 --> 00:00:53,160
method would be pretty much a duplicate of the get health.

13
00:00:53,160 --> 00:00:58,200
So I'd like to do is create a system for us to add stats more easily and are going to do this very much

14
00:00:58,200 --> 00:01:02,510
like we've done the character class where we can easily add a character class by editing this enum we're

15
00:01:02,510 --> 00:01:03,690
gonna create a new enum.

16
00:01:03,780 --> 00:01:07,700
So it's great file new and it's going to be called stats so yes.

17
00:01:07,830 --> 00:01:13,800
And the idea of stat C S is to be an enum of things like health and experience reward.

18
00:01:13,800 --> 00:01:21,090
So we're going to create a namespace first of all RPG stats and then inside we gonna create the enum

19
00:01:21,120 --> 00:01:29,610
which is going to be just stat and the stats that we have here are health and we have experience reward

20
00:01:31,310 --> 00:01:33,140
these are the first two stats that we're going with.

21
00:01:33,140 --> 00:01:35,240
Obviously there will be more to come.

22
00:01:35,420 --> 00:01:39,910
And what I'd like to show you is how our progression is currently laid out.

23
00:01:39,940 --> 00:01:45,200
So we've got this visual conceptualization of the fact we've got a list of progression character classes

24
00:01:45,200 --> 00:01:50,230
which in turn have a character class and a list of floats.

25
00:01:50,360 --> 00:01:57,170
Now that we have seen in the ED If we go to our progression asset you can see how that is set up we've

26
00:01:57,170 --> 00:02:01,880
got this list of character classes inside each character class.

27
00:02:01,880 --> 00:02:08,830
We have got the character class variable and then we've got the health with which is an array of floats.

28
00:02:08,840 --> 00:02:13,570
So that's one way of visualizing it but also we could actually read the contents of this file if I'd

29
00:02:13,570 --> 00:02:20,900
just drag the file over into visual studio onto my onto my ball at the top then you can see that actually

30
00:02:20,900 --> 00:02:25,710
that structure is pretty much reflected down at the bottom here from line 15 onwards for me.

31
00:02:25,910 --> 00:02:31,100
You can see that it's very legible because unity is using a very legible system called Yammer or yet

32
00:02:31,100 --> 00:02:32,210
another markup language.

33
00:02:32,630 --> 00:02:38,330
But basically let's break this down line by line what is it doing how does it relate to structure.

34
00:02:38,330 --> 00:02:44,630
So the progression structure we've currently got is character classes which is this variable at the

35
00:02:44,690 --> 00:02:47,270
top level this list up here.

36
00:02:47,630 --> 00:02:55,070
And underneath that we have got items so items you can see are denoted with this dash this hyphen and

37
00:02:55,130 --> 00:03:01,160
then we have got a character class which is not actually the name of our class here.

38
00:03:01,190 --> 00:03:06,520
That is the name of the variable it is saying there is a variable and its value is zero.

39
00:03:06,530 --> 00:03:08,030
Why is its value zero.

40
00:03:08,060 --> 00:03:12,210
Because character classes an enum and the value 0 corresponds to the player.

41
00:03:12,230 --> 00:03:18,320
So that's a little bit harder to read but that is still the same information and then still within this

42
00:03:18,320 --> 00:03:24,260
particular character class because we haven't had another hyphen yet we've got the health variable and

43
00:03:24,260 --> 00:03:26,950
the health variable if we go back to progression is a list.

44
00:03:26,990 --> 00:03:29,130
So we don't have the value straight away.

45
00:03:29,120 --> 00:03:33,710
Instead we've got more hyphens which each have the health item.

46
00:03:33,710 --> 00:03:36,110
So that's how you read e-mail and we go onwards.

47
00:03:36,110 --> 00:03:40,330
So we then got another hyphen down at this level of indentation which means that it's part of this character

48
00:03:40,340 --> 00:03:47,660
classes list and it is a character it has a value has a field of character class with one which if we

49
00:03:47,660 --> 00:03:52,610
look at our character class is the grunts and so on we've got the health list of health which has just

50
00:03:52,610 --> 00:03:58,790
got one item 40 and then the character class 3 which if we look it up is the archer and so on.

51
00:03:58,790 --> 00:04:00,690
So that's got health as well.

52
00:04:00,770 --> 00:04:04,300
Now the new structure I'm proposing so we keep the couch class the same.

53
00:04:04,370 --> 00:04:09,080
We still have this character class identified by the character class a variable the character class

54
00:04:09,080 --> 00:04:14,810
field but now instead of having health directly we're going to have a list a new item a new field called

55
00:04:14,810 --> 00:04:21,530
stats and that is going to be a list of a new type of object and this type of object is going to have

56
00:04:21,560 --> 00:04:27,740
a field called stat which is going to correspond to for example zero is gonna be the Health Stat and

57
00:04:27,740 --> 00:04:32,190
as well another field that's going to have a part from identifying what stat it represents.

58
00:04:32,190 --> 00:04:34,240
So it's going to have the levels of the stat.

59
00:04:34,310 --> 00:04:42,200
So 50 and so on 50 100 200 400 same as the levels of floats that we had down here then we could have

60
00:04:42,290 --> 00:04:44,180
other stats in this list as well.

61
00:04:44,180 --> 00:04:50,300
So we can have the experience reward stat and the various progression levels of the experience reward

62
00:04:51,020 --> 00:04:55,700
and then so on and so forth we can do the same thing with character one who can have substance as well.

63
00:04:55,700 --> 00:04:59,090
A list of stats and a list of levels under each stat.

64
00:04:59,540 --> 00:05:02,410
So that's the progression structure we're going to work towards.

65
00:05:02,540 --> 00:05:07,670
Now if you feel confident in reproducing this in the progression scriptural object then do go ahead

66
00:05:07,700 --> 00:05:08,940
and give it a shot.

67
00:05:09,170 --> 00:05:14,800
If not then just follow me so we've got a progression character class we're going to want to do very

68
00:05:14,800 --> 00:05:19,120
much the same thing in order to have a list of something in here.

69
00:05:19,450 --> 00:05:24,640
So instead of having this list of health we are going to just comment that out for now because instead

70
00:05:24,970 --> 00:05:29,650
what we want to have is a public variable we know it's called stats because that's what I've got in

71
00:05:29,860 --> 00:05:31,720
here it's called stats.

72
00:05:31,720 --> 00:05:36,340
In fact stats plural and it's gonna have a go to have a type.

73
00:05:36,460 --> 00:05:42,130
It's doesn't show the type in Yama but we know it has to have a type in C sharp to call it the progression

74
00:05:43,120 --> 00:05:48,590
stat like soap because following the convention that we had above.

75
00:05:49,020 --> 00:05:51,870
So we've got the progression stat and we can create this.

76
00:05:51,900 --> 00:05:54,720
It's gonna be a system serialized Ball class.

77
00:05:54,720 --> 00:06:04,440
So let's use the system serialized ball system dots serialize a ball class progression stat and then

78
00:06:04,470 --> 00:06:11,620
in the progression stat we know that we want to have this list it's not going to be called health anymore.

79
00:06:11,700 --> 00:06:16,050
It's going to be a list of floats but it's going to be called levels because it's the different levels

80
00:06:16,080 --> 00:06:17,700
of this particular stat.

81
00:06:17,760 --> 00:06:23,370
And how do we identify the stat remember that there's one more variable in here which is the stat field

82
00:06:23,370 --> 00:06:24,150
itself.

83
00:06:25,090 --> 00:06:26,950
So we're gonna call it public.

84
00:06:26,950 --> 00:06:31,500
What's the type going to be that types is going to be stat and I'm just gonna to call it stats.

85
00:06:31,510 --> 00:06:35,850
So that tells us whether it's health whether it's experience points et cetera.

86
00:06:35,890 --> 00:06:37,590
So that should work nicely.

87
00:06:37,590 --> 00:06:44,050
I'm just going to basically comment out the return statement that's giving us issues in get health at

88
00:06:44,050 --> 00:06:50,080
the moment so that it compiles and I'll go over just to have a look at what's going on with the progression

89
00:06:50,560 --> 00:06:51,770
over in the inspector.

90
00:06:51,770 --> 00:06:58,690
Now it's a bit broken because when you change the structure of scripts will object unity doesn't know

91
00:06:58,750 --> 00:07:02,740
how to migrate your data into that new structure.

92
00:07:02,740 --> 00:07:10,270
We've still got the player setup still got the grunt set up but now they've items in this list of stats

93
00:07:10,450 --> 00:07:11,830
is no longer working.

94
00:07:11,830 --> 00:07:17,020
In fact what we have got is as you can see is I made a slight error because what we wanted here was

95
00:07:17,020 --> 00:07:20,560
a list of stats not just one progression stat.

96
00:07:20,590 --> 00:07:24,750
So if I put the array notation there that should make it a list of stats.

97
00:07:24,820 --> 00:07:27,320
Let's see if that's working navigates progression.

98
00:07:27,520 --> 00:07:28,480
Then here we go.

99
00:07:28,510 --> 00:07:32,620
We've got stats and list as currently of size zero.

100
00:07:32,650 --> 00:07:35,130
Now I don't want to go and reproduce all the data.

101
00:07:35,140 --> 00:07:40,390
You might not necessarily want to go and reproduce all the data so you can actually just edit up this

102
00:07:41,170 --> 00:07:46,270
gamble file if you're careful you can edit it up like I was showing you in the slide.

103
00:07:46,270 --> 00:07:51,700
Now to take care here because the Yemen file unlike C shop is space sensitive.

104
00:07:51,700 --> 00:07:56,130
So if you get the indentation wrong then it does actually make a difference.

105
00:07:56,200 --> 00:07:58,140
So I'm gonna just fast forward through doing that.

106
00:07:58,150 --> 00:08:04,450
So as you can see what I've had to do is replace health with this kind of just little let level of nesting

107
00:08:04,450 --> 00:08:06,940
and then moving these levels in a bit.

108
00:08:06,940 --> 00:08:12,330
So if I go ahead and save that go over into unity it's not very happy with me.

109
00:08:12,340 --> 00:08:17,470
Oh and the reason is because I'm missing this colon at the end of stats so stats should have a colon

110
00:08:17,470 --> 00:08:23,170
on the end to initiate the list and then sure enough you can go and have a look and we've got ourselves

111
00:08:23,260 --> 00:08:29,560
all the levels of health just as we had them previously but now they're nested one level deeper inside

112
00:08:29,620 --> 00:08:31,670
our progression Stat object.

113
00:08:31,780 --> 00:08:35,120
So that's just the way that you by the way you don't have to lose your data.

114
00:08:35,200 --> 00:08:35,750
That's cool.

115
00:08:36,430 --> 00:08:39,420
So time for a quick summary of this lecture.

116
00:08:39,430 --> 00:08:43,060
We haven't got anything working yet it's a broken project but we'll fix it in the next lecture don't

117
00:08:43,060 --> 00:08:43,470
worry.

118
00:08:43,810 --> 00:08:50,170
What we have done is figured a little bit better how Unity is storing stuff and civilising stuff into

119
00:08:50,170 --> 00:08:50,650
Yammer.

120
00:08:50,650 --> 00:08:58,360
We've seen the Yammer with edited the Yamato and we have created another level of indentation and flexibility

121
00:08:58,360 --> 00:08:59,470
in our progression stats.

122
00:08:59,470 --> 00:09:04,900
Now we can have multiple character classes and we can have multiple stats as well both of which are

123
00:09:04,900 --> 00:09:06,570
working through in.

124
00:09:06,610 --> 00:09:12,480
And it's just one more level deep of less nesting for you to have lots and lots of flexibility.

125
00:09:12,500 --> 00:09:17,940
The next lecture we're gonna look at hooking it all up so that we make our get health work.

126
00:09:17,980 --> 00:09:18,310
Again.
