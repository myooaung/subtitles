1
00:00:04,430 --> 00:00:09,560
Hello and welcome in this lecture, we are going to be hooking into the play and stop events of the

2
00:00:09,590 --> 00:00:14,960
playbill director so that when we walk into our trigger, we get a disabled control lock message showing

3
00:00:14,960 --> 00:00:15,140
up.

4
00:00:15,710 --> 00:00:20,150
And when we get to the end of the timeline, which is just going to happen after we see this God, we

5
00:00:20,150 --> 00:00:22,270
then get a re-enable control log message.

6
00:00:22,280 --> 00:00:24,620
So we're getting events coming through at the right time.

7
00:00:24,620 --> 00:00:30,470
We're gonna learn a little bit about what C sharp events are and also how we can use them to implement

8
00:00:30,500 --> 00:00:31,970
the observer pattern.

9
00:00:31,970 --> 00:00:36,650
So we're gonna learn about the observer pattern and a little bit about C shape events so that we can

10
00:00:36,650 --> 00:00:37,190
implement it.

11
00:00:37,310 --> 00:00:38,120
Let's dive right in.

12
00:00:39,090 --> 00:00:44,070
So as Rick pointed out, last lecture, we have an issue where if I go into the cinematics, you can

13
00:00:44,070 --> 00:00:49,740
see I'm still able to control the character and get him into all sorts of trouble while I'm holding

14
00:00:49,740 --> 00:00:51,030
my mouse down there as my character.

15
00:00:51,300 --> 00:00:53,970
He was running all the time and got himself into trouble.

16
00:00:53,980 --> 00:00:56,580
So we want to be able to remove that control.

17
00:00:56,970 --> 00:01:02,340
The way we're gonna do this is to add a new components to the intro sequence game objects that's under

18
00:01:02,340 --> 00:01:03,630
cinematics interest sequence.

19
00:01:03,660 --> 00:01:08,250
And we're going to want to add a new component here called the Cinematic Control Remover.

20
00:01:08,640 --> 00:01:14,850
And the job of this components is that when the cinematic sequence is running is going to remove the

21
00:01:14,850 --> 00:01:16,680
control from the player.

22
00:01:17,370 --> 00:01:23,490
I'm gonna go ahead and create it in a visual studio code and I'm going to create a new file.

23
00:01:23,790 --> 00:01:26,160
It's gonna be the cinematics control.

24
00:01:26,160 --> 00:01:26,900
Remove remover dot C.

25
00:01:26,900 --> 00:01:27,120
S.

26
00:01:27,300 --> 00:01:28,350
So go ahead and create that.

27
00:01:28,380 --> 00:01:36,840
I'm gonna add a mono behavior in here and I'm gonna wrap this in a namespace like I can do it properly,

28
00:01:37,480 --> 00:01:37,650
like.

29
00:01:37,870 --> 00:01:41,280
So it's gonna be RPG cinematics like we've had before.

30
00:01:42,030 --> 00:01:42,270
Boom.

31
00:01:42,630 --> 00:01:48,420
Now in order for this components to its job properly, it's going to need to run code when it needs

32
00:01:48,420 --> 00:01:49,890
to enable control.

33
00:01:49,950 --> 00:01:54,900
And when it needs to disable control, which is gonna happen when we're starting the sequence and stopping

34
00:01:54,900 --> 00:01:55,710
at the sequence.

35
00:01:55,920 --> 00:02:00,180
So we've got two cases where we need a method in this script.

36
00:02:00,240 --> 00:02:03,150
One case is going to be one, one to disable control.

37
00:02:03,480 --> 00:02:06,630
At that point, we're going to want to do something in this function.

38
00:02:07,110 --> 00:02:11,070
And the other time is when we want to re-enable control.

39
00:02:12,000 --> 00:02:17,750
And the stuff that goes on in here we could easily figure out how to do involves a play controller,

40
00:02:17,760 --> 00:02:19,670
involves cancelling actions and so on and so forth.

41
00:02:20,020 --> 00:02:22,620
But how we gonna get these functions called in the first place?

42
00:02:22,650 --> 00:02:23,660
When are they gonna be cool?

43
00:02:23,670 --> 00:02:24,930
How can we work that out?

44
00:02:25,590 --> 00:02:26,940
Well, does able control.

45
00:02:26,970 --> 00:02:28,470
You might say, okay, easy enough.

46
00:02:28,500 --> 00:02:33,180
When we call the trigger and we start play on the playback director, we could call disable control.

47
00:02:33,600 --> 00:02:33,990
Sure.

48
00:02:34,170 --> 00:02:36,840
But how do we re-enable control?

49
00:02:36,870 --> 00:02:39,210
How do we know when the cinematic has finished?

50
00:02:39,240 --> 00:02:44,130
And in actual fact, that can knowing when the cinematic is finished, we can then do an even cleaner

51
00:02:44,130 --> 00:02:45,570
solution for disabled control.

52
00:02:46,110 --> 00:02:50,790
And the thing here is that we want to be notified of a given event.

53
00:02:50,990 --> 00:02:56,550
I'm going to put a start method in here because we're going to need this in a bit.

54
00:02:56,880 --> 00:02:59,040
So imagine we have a situation like this one.

55
00:02:59,280 --> 00:03:04,470
We've got playable director and it wants to notify the control remover, maybe a particle effect, maybe

56
00:03:04,470 --> 00:03:05,310
some music changes.

57
00:03:05,610 --> 00:03:11,730
It wants to notify somethings of the fact that the playable has finished playing.

58
00:03:11,730 --> 00:03:13,860
The timeline in our instance has finished playing.

59
00:03:14,040 --> 00:03:21,540
Now, the playable director can't make direct method calls to these different components because unity,

60
00:03:21,540 --> 00:03:25,530
when they coded the playbill director, didn't know that you might need these components.

61
00:03:25,590 --> 00:03:29,430
So they can't have had a direct method call to them.

62
00:03:29,760 --> 00:03:35,480
So we have to have some other way of telling the playbill director that we'd like to know that the timeline

63
00:03:35,520 --> 00:03:36,180
has finished play.

64
00:03:36,300 --> 00:03:41,100
Now, typically what we've seen, for example, and things like the cinematic trigger is that if you

65
00:03:41,100 --> 00:03:48,600
want some code to run when a collide is on trigger enter event happens, then you can just use a special

66
00:03:48,600 --> 00:03:51,450
method name and it will automatically be called by unity.

67
00:03:51,720 --> 00:03:52,800
That's one way of doing it.

68
00:03:52,830 --> 00:03:57,390
But it's a bit of a messy way because you need to use the exact right method name.

69
00:03:57,720 --> 00:04:04,440
And it can get a bit messy in terms of you have to have your component on the right game object and

70
00:04:04,440 --> 00:04:07,660
it's just not as flexible and it's not as clear and straightforward.

71
00:04:07,660 --> 00:04:14,160
And it's especially obvious when you have things like our fighter with our hit event.

72
00:04:14,190 --> 00:04:14,440
Right.

73
00:04:14,820 --> 00:04:20,940
We've even had to at annotate this as being an animation event because it's so unclear who is calling

74
00:04:20,940 --> 00:04:26,790
this, because it's just being called because of the special name that's so unobvious and not very nice.

75
00:04:27,240 --> 00:04:34,110
So there is a nice way of doing this in C Sharp, and that is to use events to essentially implement

76
00:04:34,380 --> 00:04:35,700
the observer pattern.

77
00:04:35,910 --> 00:04:36,930
What is the observer pattern?

78
00:04:37,410 --> 00:04:42,210
Well, basically, instead of the playable director calling down to the control, remove a particle

79
00:04:42,210 --> 00:04:48,150
effects music, change all stuff that has nothing at all to do with, really, it can just keep a list

80
00:04:48,600 --> 00:04:54,250
of things of observers, things that want to observe an event happening in the play above playable director.

81
00:04:54,270 --> 00:05:00,810
In this case, the on Finnish event that say so what can happen is the controller mover can register

82
00:05:00,810 --> 00:05:04,800
itself, the particle effect, the music change can all register themselves to this list.

83
00:05:04,830 --> 00:05:06,870
So notice the arrows are going this way round.

84
00:05:06,870 --> 00:05:09,240
It's another dependancy inversion, if you like.

85
00:05:09,810 --> 00:05:15,300
And so what you end up with in this list is a list of the observers, the control remover, the particle

86
00:05:15,300 --> 00:05:16,670
effect, the music change, cetera.

87
00:05:17,280 --> 00:05:23,610
So now when the playbill director decides to finish playing boom, it calls to its observer list and

88
00:05:23,610 --> 00:05:26,930
the observer list calls out to all the controller movies.

89
00:05:27,030 --> 00:05:32,700
But notice in this process, the playbill director didn't have to know who any of the observers were.

90
00:05:32,730 --> 00:05:36,150
It's kind of like our interfaces that we've already seen.

91
00:05:36,360 --> 00:05:38,190
The difference being that for.

92
00:05:38,290 --> 00:05:43,930
Interfaces, the arrow gets flipped typically between one class that's calling one other class.

93
00:05:43,990 --> 00:05:50,470
Whereas here with the observer pattern and events, these arrows can be flipped from one class calling

94
00:05:50,470 --> 00:05:51,640
to many classes.

95
00:05:52,480 --> 00:05:54,970
So back in our control, remove a class.

96
00:05:55,270 --> 00:06:01,210
I'm going to add some print statements to help us basically figure out when these methods are being

97
00:06:01,210 --> 00:06:01,600
called.

98
00:06:01,610 --> 00:06:05,980
So I had to say, well, control method, for example, is going to be one print statement and I'll

99
00:06:05,980 --> 00:06:08,770
put a similar print statement in enable control.

100
00:06:09,010 --> 00:06:13,930
Now I'm going to introduce a component called a fake playable director, which is going to give us an

101
00:06:13,930 --> 00:06:19,150
indication of how unity might be doing this under the hood, how it's working under the hood.

102
00:06:19,600 --> 00:06:21,260
You don't have to create this yourself.

103
00:06:21,280 --> 00:06:24,640
Just follow along with the video to understand the concepts.

104
00:06:25,420 --> 00:06:26,830
And let's take a second.

105
00:06:26,860 --> 00:06:31,120
Now that we've created these two to actually go and stick them onto the intro sequence.

106
00:06:31,480 --> 00:06:33,220
So the fake play director.

107
00:06:34,410 --> 00:06:38,760
And the cinematic disabling remove a component.

108
00:06:39,260 --> 00:06:41,460
So as both go on the intro sequence.

109
00:06:42,030 --> 00:06:48,900
Now I'm going to flesh out the fake playbill director with a start method that is going to call to an

110
00:06:48,990 --> 00:06:52,920
on finished method after having played for three seconds.

111
00:06:53,190 --> 00:06:58,680
This is going to simulate what the playable director does, which is wait until the clip has finished

112
00:06:58,680 --> 00:07:01,620
playing before calling the on finished method.

113
00:07:02,340 --> 00:07:03,660
What do we want to do in here?

114
00:07:03,690 --> 00:07:07,440
To notify all these cinematic control removers, et cetera?

115
00:07:08,310 --> 00:07:11,700
Well, I'm going to write a line and then I'm going to explain it to you.

116
00:07:12,420 --> 00:07:18,210
So what we've got here is a C sharp event, and it's essentially the C sharp way of implementing that

117
00:07:18,210 --> 00:07:20,550
observer list from the slides.

118
00:07:21,120 --> 00:07:27,930
Don't worry about the specifics of how this is implemented and used in the playable direct aside, as

119
00:07:27,930 --> 00:07:30,660
we won't be doing that in our own code.

120
00:07:31,080 --> 00:07:36,810
But what we're interested in is knowing how we can add ourselves as an observer to this list.

121
00:07:37,120 --> 00:07:40,590
So I'm gonna do this in the cinematic control remover.

122
00:07:41,010 --> 00:07:48,780
So I'm going to do to get components of the fake playable director and I can access it on finished notice

123
00:07:48,780 --> 00:07:53,160
here how the on finish has a little lightning bolt.

124
00:07:53,250 --> 00:07:55,830
This is because of the keyword event.

125
00:07:56,190 --> 00:08:03,240
Basically events allows us to add some protections to these kinds of variables that store functions

126
00:08:03,300 --> 00:08:05,190
our lists of functions in them.

127
00:08:05,610 --> 00:08:07,830
But don't worry about the key words.

128
00:08:07,860 --> 00:08:14,160
And this line too much right now because we will have a static, catered lecture on declaring and using

129
00:08:14,160 --> 00:08:17,040
events and delegates in a few sections time.

130
00:08:17,430 --> 00:08:20,060
So what I want to do is on finish.

131
00:08:20,580 --> 00:08:23,130
Here we are going to plus equals.

132
00:08:23,250 --> 00:08:29,190
This is basically adding ourselves as one of the observers in this observer pattern list.

133
00:08:30,300 --> 00:08:34,140
And then we need to put in the method that we wanted to call.

134
00:08:34,440 --> 00:08:37,860
Now, notice, I'm calling a table control because it's finished.

135
00:08:38,910 --> 00:08:45,900
But notice that we don't want to use the round brackets because we're not calling it here in START.

136
00:08:46,260 --> 00:08:48,600
We're telling on finish to call it.

137
00:08:48,600 --> 00:08:50,670
We're telling the playbill director that it can call it.

138
00:08:50,940 --> 00:08:53,310
So we just need to give the name of the method.

139
00:08:53,850 --> 00:08:55,470
Now, one more thing.

140
00:08:55,500 --> 00:08:58,950
It says, No Overload Matches, Action Float.

141
00:08:59,250 --> 00:09:05,130
Now, the reason for this is because I deliberately made this action take a variable.

142
00:09:05,160 --> 00:09:11,190
And that means that our callback, just like, for example, you're on trigger, has to take a collider

143
00:09:12,000 --> 00:09:16,740
out on enable control, has to take what was it, a float.

144
00:09:17,070 --> 00:09:23,280
Now, I've just done this to show you how this works is basically nonsense float, but it has to take

145
00:09:23,520 --> 00:09:24,390
some float value.

146
00:09:24,780 --> 00:09:25,860
And then what's it saying?

147
00:09:26,100 --> 00:09:28,320
Just that it wants a semicolon at the end of the line, obviously.

148
00:09:28,620 --> 00:09:30,450
So that's how you use them.

149
00:09:30,600 --> 00:09:32,670
How are they then called?

150
00:09:32,730 --> 00:09:36,930
Well, basically on Finnish now would call to this delegate on Finnish.

151
00:09:38,010 --> 00:09:40,860
And that's where the round brackets come back in.

152
00:09:41,190 --> 00:09:49,710
So basically on finish is a variable that represents a list of different callbacks, a list of different

153
00:09:49,710 --> 00:09:51,750
functions that have registered themselves.

154
00:09:52,110 --> 00:09:55,140
And when we call on finish actually calls all of the things in the list.

155
00:09:55,160 --> 00:10:00,510
So if I'd gone on to do on finish disabled control as well, both of these gonna get called.

156
00:10:00,570 --> 00:10:06,570
Let me show you that that is an option that see this yet just saying that we don't have the nonsense

157
00:10:06,570 --> 00:10:07,050
float again.

158
00:10:08,070 --> 00:10:12,200
And so that and also there's an error here because we haven't put any floats in.

159
00:10:12,210 --> 00:10:17,220
Let's put like four point three or something is the float that comes in four point three F.

160
00:10:17,760 --> 00:10:21,810
And let's actually go ahead and play and just show you that in the console we should be getting both

161
00:10:21,810 --> 00:10:23,700
the enable and disable control coming through.

162
00:10:24,180 --> 00:10:29,880
Go to the console, wait for three seconds and we get enable and disable come through actually in the

163
00:10:29,880 --> 00:10:31,370
order that we added them.

164
00:10:31,500 --> 00:10:32,430
That's kind of interesting.

165
00:10:32,430 --> 00:10:37,410
If we reverse the order, you might see that the order of them getting called is also changed.

166
00:10:37,680 --> 00:10:40,740
So it's time for your challenge to find the real events.

167
00:10:41,070 --> 00:10:45,780
Looking the docs or auto complete in this case, instead of using the fake playable director, let's

168
00:10:45,780 --> 00:10:47,830
use the real playable directors.

169
00:10:47,850 --> 00:10:50,370
I'll just show you Playbill director.

170
00:10:50,400 --> 00:10:56,880
And I think I need to include a different namespace yet unity engine playbills in order to do this.

171
00:10:57,240 --> 00:11:04,200
And so I'll need to be able to find in here the real event so you can do a dot and then auto complete

172
00:11:04,200 --> 00:11:04,820
to find events.

173
00:11:04,830 --> 00:11:09,060
Remember that lightning bolt signals up events for you or you can look in the docs using a different

174
00:11:09,060 --> 00:11:09,360
editor.

175
00:11:09,870 --> 00:11:11,700
When does the director start playing?

176
00:11:11,700 --> 00:11:12,760
When does it finish playing?

177
00:11:12,780 --> 00:11:16,950
See if you can find events for both of those and test with print statements to see whether your disabling

178
00:11:16,950 --> 00:11:19,590
control in enabling control at the right moment.

179
00:11:19,590 --> 00:11:21,990
So pause the video and have a go at the challenge.

180
00:11:23,780 --> 00:11:24,510
OK, welcome back.

181
00:11:24,780 --> 00:11:29,010
So hopefully you're getting to grips a little bit with the idea of events and how they can help us with

182
00:11:29,010 --> 00:11:30,060
the observer pattern.

183
00:11:30,390 --> 00:11:31,450
So do a dot.

184
00:11:31,530 --> 00:11:36,120
And we'll look through this list for anything that has add a little lightning bolt.

185
00:11:36,150 --> 00:11:39,510
There's a few of them paused, played and stopped.

186
00:11:39,570 --> 00:11:40,110
Perfect.

187
00:11:40,200 --> 00:11:47,040
I think we want played for one so played and we can then do our plus equals to add one of the methods

188
00:11:47,040 --> 00:11:49,860
to the list of callbacks that should come through this.

189
00:11:50,310 --> 00:11:55,020
And what we to do when it's played is when to disable control, maybe slightly counterintuitively.

190
00:11:55,630 --> 00:11:59,360
Now there's an error there, but I'm going to come back to it in a second because the other callback

191
00:11:59,370 --> 00:12:03,150
we wanted was dot stopped like so.

192
00:12:03,600 --> 00:12:07,590
And then we can do plus equals enable control instead.

193
00:12:08,340 --> 00:12:15,000
OK, now what it's complaining about if we hover over it, is it saying no overload for disabled control.

194
00:12:15,030 --> 00:12:18,320
Match's delegate action, playable director.

195
00:12:18,990 --> 00:12:21,490
So you can see that it's changed here.

196
00:12:21,540 --> 00:12:24,870
The action, instead of being an action float, is an action playable director.

197
00:12:24,920 --> 00:12:33,450
So hopefully you realize that the these methods need to take a playable director as the argument in

198
00:12:33,450 --> 00:12:33,840
here.

199
00:12:34,350 --> 00:12:36,840
And I'm just gonna call this PD because we don't even use it.

200
00:12:37,110 --> 00:12:42,840
But basically, this is saying this is the playable director that is calling us that is calling this

201
00:12:42,870 --> 00:12:43,320
action.

202
00:12:43,710 --> 00:12:49,500
And if I do that, then hopefully you will be able to see that I can hit play.

203
00:12:50,810 --> 00:12:55,160
And I would expect to get our callbacks when we start playing, when we stop playing.

204
00:12:55,340 --> 00:12:57,890
We can safely ignore this null reference exception.

205
00:12:58,070 --> 00:13:01,370
It's coming from our fake playable director, which we're soon going to delete.

206
00:13:01,580 --> 00:13:07,640
If I go into the zone, you can say disabled control because we have gone into the trigger and the playable

207
00:13:07,940 --> 00:13:09,290
director has started playing.

208
00:13:09,830 --> 00:13:12,290
And then when it stopped, we should enable control again.

209
00:13:12,320 --> 00:13:14,550
And that has happened in the right print statement.

210
00:13:14,550 --> 00:13:22,510
So you can see how we're able to use events to hook into different moments in other classes lifecycle

211
00:13:22,910 --> 00:13:25,340
and understood a little bit how that's working behind the scenes.

212
00:13:25,700 --> 00:13:27,530
You don't have to fully understand this class.

213
00:13:27,620 --> 00:13:32,030
The important thing is that you know how to use these events and how to subscribe to them over here

214
00:13:32,030 --> 00:13:33,760
and the cinematic control ruber.

215
00:13:34,100 --> 00:13:39,260
So just to reinforce that, I'm actually gonna go ahead and delete the fake playable director that was

216
00:13:39,260 --> 00:13:43,850
only there to show us how the playable director might be working behind the scenes.

217
00:13:44,210 --> 00:13:48,920
Now, in this video, I actually forget to remove it from the object in the scene, which obviously

218
00:13:48,920 --> 00:13:49,880
leads to warnings.

219
00:13:50,240 --> 00:13:52,400
If you go and remove it, you'll get rid of those warning.

220
00:13:52,410 --> 00:13:54,680
But if you see that on my screen, that's what's going on.

221
00:13:55,100 --> 00:13:57,470
Hopefully you're a bit more enlightened about events.

222
00:13:57,500 --> 00:14:02,300
And in the next lecture, we're gonna go ahead and make these disable and enable control things, actually

223
00:14:02,300 --> 00:14:03,020
do something.
