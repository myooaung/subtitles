WEBVTT
1
00:00:04.450 --> 00:00:05.800
Hello and welcome in this lecture.

2
00:00:05.800 --> 00:00:12.400
We are going to be making the mover responsible for its own civilization so that it has a capture state

3
00:00:12.430 --> 00:00:17.800
and it has a restore state and that gets called by the appropriate salable entity and in turn by the

4
00:00:17.800 --> 00:00:23.590
same system to capture the state of the move components directly and we're going to expand this out

5
00:00:23.860 --> 00:00:26.980
to all the components that we add that have salable state.

6
00:00:26.980 --> 00:00:32.380
Let's dive in and see how we're going to achieve this so let's take a closer look at what the issue

7
00:00:32.380 --> 00:00:35.070
is with our salable entity at the moment.

8
00:00:35.230 --> 00:00:39.370
It kind of depends on the movement system it doesn't directly but it depends on some of the things the

9
00:00:39.370 --> 00:00:42.310
movement the system depends on like the nav mesh agent.

10
00:00:42.550 --> 00:00:46.750
If we want to make sure that only the nav mesh agent is responsible for changing those things around

11
00:00:46.750 --> 00:00:53.380
movement then really we should be moving things through the movement system and that means that the

12
00:00:53.380 --> 00:00:55.990
stable entity would need to depend on movement.

13
00:00:55.990 --> 00:01:03.160
Similarly if we want to have our health stored we suddenly need the health system to have or for the

14
00:01:03.260 --> 00:01:05.690
stable entity to have a dependency on the health system.

15
00:01:05.860 --> 00:01:11.650
And as we go on there's going to be more and more features such as the inventory and quests all these

16
00:01:11.650 --> 00:01:14.060
different things that are going to be different components.

17
00:01:14.350 --> 00:01:17.380
All of these different systems will be dependent upon by the same entity.

18
00:01:17.380 --> 00:01:22.210
So we're getting to a situation where now the stable entity itself also knows too much we introduced

19
00:01:22.210 --> 00:01:25.960
it because the saving system was knowing too much about the entities in our world.

20
00:01:25.960 --> 00:01:30.700
Now we need to introduce something else because the save plenty knows too much about the components

21
00:01:30.790 --> 00:01:32.380
on our entities.

22
00:01:32.380 --> 00:01:33.060
How can we do this.

23
00:01:33.340 --> 00:01:39.520
Well we can introduce an interface to basically invert these dependencies and I'm going to call this

24
00:01:39.530 --> 00:01:41.540
intimate interface the eye saver ball.

25
00:01:41.560 --> 00:01:44.950
So the movement system will implement the IceSave bill interface.

26
00:01:44.950 --> 00:01:49.780
The health system will implement the IceSave bill interface and now all this saleable entity needs to

27
00:01:49.780 --> 00:01:55.030
know about is that it's got a bunch of components that implement the IceSave bill interface.

28
00:01:55.030 --> 00:01:57.460
What could that I saleable interface look like.

29
00:01:57.460 --> 00:02:02.590
Well I think we've probably got a fairly good idea already you can kind of challenge yourself if you

30
00:02:02.590 --> 00:02:05.430
like to have a look at what that might look like.

31
00:02:05.430 --> 00:02:11.210
We're just closing down some tabs because we want to open up our stable entity.

32
00:02:11.290 --> 00:02:15.790
So what we've got here is we've got to capture state in a restore state what basically we just want

33
00:02:15.790 --> 00:02:19.420
to move those also down to a IceSave bill.

34
00:02:19.420 --> 00:02:22.670
So let's go ahead and create this IceSave bill going to create a new class.

35
00:02:22.680 --> 00:02:25.620
Will it I save a.

36
00:02:25.750 --> 00:02:26.270
Yes.

37
00:02:26.320 --> 00:02:31.450
And then I'm going to implement an interface in here like so called IceSave bill.

38
00:02:31.450 --> 00:02:33.640
I'm going to stick it in a namespace.

39
00:02:33.670 --> 00:02:34.630
Cut that out.

40
00:02:34.630 --> 00:02:42.700
Create a namespace of RPG saving and then paste a saleable interface in there and then what we want

41
00:02:42.700 --> 00:02:46.030
to do is just define the public interface.

42
00:02:46.030 --> 00:02:49.870
So the first one as we said was a capture state.

43
00:02:49.870 --> 00:02:52.190
And I do just want it to return an object.

44
00:02:52.240 --> 00:02:58.240
I want to say hey saleable components whatever you are whether you are a movement system or a health

45
00:02:58.240 --> 00:02:58.870
system.

46
00:02:58.930 --> 00:03:00.080
I just want to get your state.

47
00:03:00.160 --> 00:03:05.320
So that's what it's gonna do capture state and then the second one is just the same as this one restore

48
00:03:05.320 --> 00:03:05.620
state.

49
00:03:05.620 --> 00:03:11.200
We can literally copy it over because what it's going to do is say hey here's some state saleable object

50
00:03:11.200 --> 00:03:13.420
that you told me you wanted to know about later.

51
00:03:13.420 --> 00:03:18.930
Now go ahead and update yourself to represent that state and that's all there is to it and that's what

52
00:03:19.030 --> 00:03:20.730
I saved Bill is okay.

53
00:03:20.740 --> 00:03:25.810
So now what we want to do I'm just going to comment out our restore state and capture state because

54
00:03:25.810 --> 00:03:31.580
these really are going to move over to the mover and I'm gonna challenge you to do that later.

55
00:03:31.750 --> 00:03:35.020
But first of all let's have a look at how we would go about capturing the state.

56
00:03:35.020 --> 00:03:42.760
The first thing we can do is fortunately we can do get components and we can use the type of a interface

57
00:03:42.820 --> 00:03:45.250
to get all components that implement the interface.

58
00:03:45.250 --> 00:03:53.230
So I say Bill should get as a list of components that all implement the IceSave bill interface so you

59
00:03:53.230 --> 00:03:58.540
can see if I hover over it saying that I get an array of Icesave bills back from this and I'm going

60
00:03:58.540 --> 00:04:06.460
to do this in a for each loop where we are going to have IceSave bill being the Save a bill in the collection

61
00:04:06.460 --> 00:04:09.640
which is just going to be this get components collection.

62
00:04:09.640 --> 00:04:15.530
So what we're gonna do is we're going to iterate over all the components on this saver Bill entity that

63
00:04:15.530 --> 00:04:21.670
implement the IceSave bill interface and we're going to ask them to capture their own state and to do

64
00:04:21.670 --> 00:04:28.060
that we Bangor had to store that state in something best way to do this because we want to access it

65
00:04:28.060 --> 00:04:34.180
again when we're going back to these components is to have a look at the type basically and to store

66
00:04:34.180 --> 00:04:35.800
that type in a dictionary.

67
00:04:35.800 --> 00:04:40.540
So I'm going to create a new dictionary here that's going to be the state that we're going to return.

68
00:04:40.570 --> 00:04:48.950
So it's going to be a dictionary again just from string because we're going to convert the type of the

69
00:04:48.980 --> 00:04:52.090
component to a string to the object.

70
00:04:52.190 --> 00:04:54.710
And if this is making sense it'll click in just a second.

71
00:04:54.860 --> 00:05:01.780
I'm gonna call this the state like so and we're going to create a new dictionary for this to happen.

72
00:05:01.790 --> 00:05:07.540
A new dictionary of that type String object type and that should do the trick.

73
00:05:08.900 --> 00:05:12.340
Now for me I just need to add in this collection's generic.

74
00:05:12.380 --> 00:05:14.590
And then it is happy.

75
00:05:14.690 --> 00:05:17.150
That's what we're going to return at the end of our statement.

76
00:05:17.150 --> 00:05:21.770
I'm noticing it's giving me an Arab because there's no thing returned from our capture state and that's

77
00:05:21.770 --> 00:05:26.900
fine capture state doesn't mind whether it's an object what type of object this April and c return so

78
00:05:26.900 --> 00:05:32.390
we can return anything and in our case a dictionary we know is a serial sizable thing.

79
00:05:32.390 --> 00:05:33.010
Great.

80
00:05:33.080 --> 00:05:39.560
Then what we're going to do is we're going to go through each savable and in our state we are going

81
00:05:39.560 --> 00:05:47.210
to update a key or create a key for each salable where we're taking the saver bulls type so getting

82
00:05:47.210 --> 00:05:51.350
its type but then we're converting that type to string.

83
00:05:51.350 --> 00:05:58.670
So what this means in practice is that if our saver will work for example the move system then it's

84
00:05:58.670 --> 00:06:03.530
going to say hey the type here is mover and I convert that to string then we're just going to get the

85
00:06:03.530 --> 00:06:04.450
string mover.

86
00:06:04.670 --> 00:06:10.650
So our state is going to can take a mapping from mover to the state that move are created for us.

87
00:06:10.730 --> 00:06:11.470
Once we do this.

88
00:06:11.510 --> 00:06:17.400
So we're gonna set it equal to the saver Bill dot capture state.

89
00:06:17.400 --> 00:06:22.770
So that's saying hey move to capture your own state and then capture state stores that in a dictionary

90
00:06:23.310 --> 00:06:25.980
by the string of its type.

91
00:06:26.130 --> 00:06:28.460
So that's what we want to be able to achieve.

92
00:06:28.470 --> 00:06:36.320
Now you might be asking yourself Hey Sam why does get type return the something like mover here.

93
00:06:36.330 --> 00:06:43.530
I see that the array is of type I save about why doesn't get type return that type which I think is

94
00:06:43.530 --> 00:06:45.500
the type of this variable.

95
00:06:45.540 --> 00:06:51.300
Well you have to understand something called compile time versus run runtime types essentially every

96
00:06:51.300 --> 00:06:55.710
variable has a compile time type but it also has a runtime type.

97
00:06:56.340 --> 00:06:57.180
What do I mean by this.

98
00:06:57.180 --> 00:07:06.210
Well at compile time all the compiler knows all that C sharp knows is that the contents of this array

99
00:07:06.630 --> 00:07:16.020
is I saved Bell and that means all I can call is methods that are in I saved Bell but at runtime it

100
00:07:16.020 --> 00:07:17.010
knows a bit more.

101
00:07:17.010 --> 00:07:21.850
It knows exactly which class is implementing this I save.

102
00:07:21.870 --> 00:07:27.030
For example it might be a move of the implements I save but it might be health it might be fighter and

103
00:07:27.030 --> 00:07:31.260
you can end up with an array that actually has lots of different types in it.

104
00:07:31.350 --> 00:07:36.990
Now you wouldn't have been able to compile code that calls any of the mover methods or the health methods

105
00:07:37.020 --> 00:07:41.870
because at compile time it didn't know that the contents of that variable was a health component or

106
00:07:41.870 --> 00:07:43.150
remove a component.

107
00:07:43.200 --> 00:07:45.620
It could only call IceSave bill.

108
00:07:45.660 --> 00:07:53.670
However when we call a method like get type its behavior changes depending on what the actual runtime

109
00:07:53.670 --> 00:07:54.590
type is.

110
00:07:54.600 --> 00:08:00.260
So if at runtime we've got a mover in that variable then it's going to return move.

111
00:08:00.300 --> 00:08:03.200
If we've got health in that variable then it's going to return health.

112
00:08:03.390 --> 00:08:06.430
And that's the difference between compile time types and runtime ones.

113
00:08:07.050 --> 00:08:11.300
Now I'm gonna go ahead and do the restore state here as well for you.

114
00:08:11.430 --> 00:08:17.340
But if you feel like hey I get this I could do a restore state myself then pause a video and do give

115
00:08:17.340 --> 00:08:18.900
it a shot for yourself.

116
00:08:18.900 --> 00:08:20.910
Otherwise I'm going to go ahead.

117
00:08:20.920 --> 00:08:21.110
Okay.

118
00:08:21.120 --> 00:08:22.020
So I'm going to plow ahead.

119
00:08:22.020 --> 00:08:25.320
Now what we've got here is it's coming in as object state.

120
00:08:25.320 --> 00:08:30.300
Now this is because when it was passed to us we don't know what that type was we're going to have to

121
00:08:30.300 --> 00:08:34.740
do a cast in here to the string object state here.

122
00:08:34.740 --> 00:08:36.130
This dictionary now.

123
00:08:36.150 --> 00:08:37.560
That's okay we can do that.

124
00:08:37.590 --> 00:08:44.490
Now I'm going to say that I'm going to call it the state dict again state dict like so.

125
00:08:44.520 --> 00:08:49.780
And that is going to be a cast of the states that we got in.

126
00:08:49.810 --> 00:08:55.320
So like so got a dictionary String object called state dict which is a casting of dictionary String

127
00:08:55.350 --> 00:08:59.550
object state because it could be other types.

128
00:08:59.550 --> 00:09:01.150
And we just need to make sure.

129
00:09:01.260 --> 00:09:08.430
So the state dict now we've got a mapping from base of the component names to the state that we want

130
00:09:08.430 --> 00:09:09.430
to restore.

131
00:09:09.450 --> 00:09:14.990
So again very much like we did at the top level top level in our savings system.

132
00:09:15.030 --> 00:09:20.730
We are going to do a for each again just over the components that are already there rather than everything

133
00:09:20.730 --> 00:09:22.200
that's in the dictionary.

134
00:09:22.200 --> 00:09:28.610
And then we are going to mess up my brackets a little bit here to sort that out.

135
00:09:28.800 --> 00:09:36.600
Then in this for each loop we are going to look up these components and restore their state and again

136
00:09:36.630 --> 00:09:43.400
we probably want to make sure that the key is already there in the dictionary before looking it up.

137
00:09:43.470 --> 00:09:52.500
So I'm going to basically call this the type string which is going to be the saleable types string as

138
00:09:52.500 --> 00:09:56.360
we've done up here in the state.

139
00:09:56.430 --> 00:10:05.370
So with this type string what we're going to do is just say if the state dict contains the key type

140
00:10:05.370 --> 00:10:10.890
string then we can actually go ahead and restore that state and we're gonna do that by doing the saver

141
00:10:10.890 --> 00:10:17.790
Bill dot restore state like so and then pass it the object state which we get out of the state dictionary

142
00:10:17.820 --> 00:10:26.010
so state dict and we get the key which is the type string here to retrieve the correct state from our

143
00:10:26.010 --> 00:10:28.200
dictionary for our mapping of dictionary.

144
00:10:28.200 --> 00:10:28.500
Okay.

145
00:10:28.500 --> 00:10:31.420
So now I'm just gonna reinvent that comment properly.

146
00:10:31.500 --> 00:10:37.620
What we've got is that should be restoring all the state of all the Icesave balls that we have got.

147
00:10:37.860 --> 00:10:38.460
Great.

148
00:10:38.460 --> 00:10:39.240
Cool stuff.

149
00:10:39.240 --> 00:10:42.780
Now we actually need some Icesave calls because we haven't got them.

150
00:10:42.810 --> 00:10:48.310
So we've got their mover script which is a prime example of where we want a nice saleable.

151
00:10:48.480 --> 00:10:56.670
We want to save all the location state from here so I'm going to do and I saved Bill as an additional

152
00:10:57.510 --> 00:10:59.340
interface that we want to derive from.

153
00:10:59.340 --> 00:11:00.970
So here we've already got an eye action.

154
00:11:00.970 --> 00:11:06.570
We're also now going to do I saleable and you notice it's going to ask me to show some fixes want to

155
00:11:06.570 --> 00:11:10.050
include the RPG saving namespace.

156
00:11:10.170 --> 00:11:17.520
We also want to implement the interface and I'm just gonna go and choose that first option just to implement

157
00:11:17.520 --> 00:11:23.190
the interface and what that's done is it's added a couple of methods at the end of our class which are

158
00:11:23.190 --> 00:11:26.720
not implemented and I'm going to want you to implement.

159
00:11:26.880 --> 00:11:30.960
So here's your challenge like you want to implement capture and restore.

160
00:11:30.960 --> 00:11:32.300
We've had this code before.

161
00:11:32.310 --> 00:11:33.520
So go and find it.

162
00:11:33.660 --> 00:11:39.390
We want to capture the position and restore the position and I want you to check that it all works as

163
00:11:39.450 --> 00:11:43.630
you would expect that basically it should be working exactly as it did at the beginning of the lecturer

164
00:11:43.630 --> 00:11:44.850
before we did the refactor.

165
00:11:44.940 --> 00:11:51.090
That's the purpose of a refactor not to change implementation but to achieve the same plan implementation

166
00:11:51.090 --> 00:11:52.040
with nicer code.

167
00:11:52.310 --> 00:11:54.870
Paul's video and have a go okay.

168
00:11:54.870 --> 00:11:55.730
Welcome back.

169
00:11:55.740 --> 00:11:57.660
So let's give this a shot.

170
00:11:57.660 --> 00:12:02.280
As I said we've already got the code if we go it several entity I've just commented out to capture the

171
00:12:02.280 --> 00:12:02.550
state.

172
00:12:02.550 --> 00:12:09.020
We're just getting that serialized Bill vector 3 to go over a mover and just return instead this serialized

173
00:12:09.150 --> 00:12:14.040
vector three that should be enough to capture the state of the move at the location basically.

174
00:12:14.040 --> 00:12:21.540
And similarly the restore is more complicated but it is still fundamentally a restore of that location

175
00:12:22.110 --> 00:12:27.820
so we can go ahead and take that code we've already written and what that code was doing just a reminder

176
00:12:27.820 --> 00:12:33.450
it was it was getting the civilized vector three and just making sure that that's what we got from now

177
00:12:33.450 --> 00:12:38.880
restore state because it could be called or something else if it was from a previous version and the

178
00:12:38.940 --> 00:12:44.430
nav mesh agent we are disabling so that we can move our transform then re enabling it and cancelling

179
00:12:44.430 --> 00:12:45.810
the current action scheduler.

180
00:12:45.810 --> 00:12:49.320
Now there's a bit of a debate as to whether canceling the action schedule is really something for the

181
00:12:49.320 --> 00:12:49.910
move to do.

182
00:12:49.920 --> 00:12:54.390
We could potentially put that into restoring the action scheduler itself.

183
00:12:54.390 --> 00:12:57.840
That when you choose to restore the action schedule it just cancels the current action.

184
00:12:57.840 --> 00:13:00.370
That is another way that we might want to do this.

185
00:13:00.470 --> 00:13:00.750
OK.

186
00:13:00.870 --> 00:13:03.390
But I think that's a pretty good place to leave it.

187
00:13:03.420 --> 00:13:06.270
Let's go ahead and try it out in Game World.

188
00:13:06.270 --> 00:13:13.110
If I go ahead and hit play I would expect this won't actually work necessarily if we go and just load

189
00:13:13.410 --> 00:13:14.730
up a previous game file.

190
00:13:14.730 --> 00:13:19.500
I think though I've already deleted my save file so just remember you might need to delete your save

191
00:13:19.500 --> 00:13:23.310
file because we've actually changed the structure of what we're saving here.

192
00:13:23.350 --> 00:13:29.870
We're now saving this dictionary at the saved Bell entity level rather than directly saving this serialized

193
00:13:29.970 --> 00:13:30.840
vector 3.

194
00:13:30.840 --> 00:13:37.140
So if your thing is complaining about things that basically casts that don't work we're going to have

195
00:13:37.140 --> 00:13:41.540
an issue here on line 31 because it's going to be trying to say Hey this thing's a dictionary.

196
00:13:41.550 --> 00:13:47.880
But actual fact see shop knows that what it does serialized was a reliable realizable vector 3 and that's

197
00:13:47.880 --> 00:13:49.140
where it's all going to come down.

198
00:13:49.140 --> 00:13:53.550
So you're going to just want to delete your save file and start from scratch to create a new save file

199
00:13:53.550 --> 00:13:53.820
here.

200
00:13:54.550 --> 00:13:54.810
OK.

201
00:13:54.810 --> 00:14:01.200
And so we can save and you can see if I go ahead and move and load it takes me back to the location

202
00:14:01.200 --> 00:14:02.000
where it was.

203
00:14:02.190 --> 00:14:10.590
And hopefully you'll be able to see that if I take a guard and lure him away and save his location and

204
00:14:10.590 --> 00:14:15.330
then load the location it takes us both back to that location before.

205
00:14:15.330 --> 00:14:23.960
So it's working for all salable entities guards included and all their components great stuff.

206
00:14:23.970 --> 00:14:28.560
So we've reviewed how we can invert the dependencies and make this much easier to add new components

207
00:14:28.560 --> 00:14:32.970
in the next section we're going to add the health component in for this as well and do a bit of other

208
00:14:32.970 --> 00:14:38.950
polishing off necessary in order to make the safe system easier to work with as we go forward.

209
00:14:38.970 --> 00:14:39.420
See that.
