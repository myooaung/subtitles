1
00:00:04,290 --> 00:00:05,680
Hello and welcome in this lecture.

2
00:00:05,730 --> 00:00:12,780
We're gonna be bringing in a game dev utilize namespace package that I have produced with a library

3
00:00:12,780 --> 00:00:18,390
class called lazy value we're going to see how to use this lazy value and how it can save us lots of

4
00:00:18,390 --> 00:00:24,150
code and lots of heartache when dealing with things that need to be initialized a little bit later than

5
00:00:24,150 --> 00:00:26,520
awake and needs to talk to other classes.

6
00:00:26,580 --> 00:00:33,640
Let's dive in and see how it's used so in this video we're mostly going to be making use of an asset

7
00:00:33,640 --> 00:00:37,360
that I've produced called The Lazy value.

8
00:00:37,360 --> 00:00:44,500
Now this is an asset pack for you is a script but we're just going to be using it like any library as

9
00:00:44,500 --> 00:00:49,580
we would a using a unity class or using a C sharp class.

10
00:00:49,690 --> 00:00:52,900
So don't worry about the implementation details unless you really want to.

11
00:00:52,900 --> 00:00:58,270
I'm just gonna go ahead and import the asset pack you should have it to download and import against

12
00:00:58,270 --> 00:01:06,340
your lecture and the idea of the lazy value class is that it works as a container for those values that

13
00:01:06,430 --> 00:01:11,800
we don't want to initialize in awake but we want to be safe to access.

14
00:01:11,800 --> 00:01:15,220
Basically they'll be initialized when we first use them.

15
00:01:15,220 --> 00:01:20,290
So let me show you an example of how the lazy value script gets used.

16
00:01:20,470 --> 00:01:26,310
So we'll go into our health components and we want to protect say our health points.

17
00:01:26,320 --> 00:01:27,650
We want to say okay.

18
00:01:27,670 --> 00:01:29,810
So this is being initialized in start.

19
00:01:29,860 --> 00:01:33,480
And it might be possible that it gets queried outside.

20
00:01:33,490 --> 00:01:37,990
What if we ask for Get Health points in Start for example in the display script.

21
00:01:37,990 --> 00:01:43,150
Who knows maybe we want to choose to do that in the future and we should basically based on our guidelines

22
00:01:43,150 --> 00:01:49,630
make sure that everything is available in start all our state should be fully initialized or at least

23
00:01:49,630 --> 00:01:51,240
safe to use.

24
00:01:51,310 --> 00:01:58,180
So the lazy value script allows us to do this by wrapping the type so that instead of using a float

25
00:01:58,180 --> 00:02:01,180
here we're going to use a lazy value.

26
00:02:01,180 --> 00:02:03,310
And here we need to include.

27
00:02:03,310 --> 00:02:08,440
So if I just put in a space so it's using the right thing for whatever reason it wasn't giving me the

28
00:02:08,440 --> 00:02:13,210
option to complete that until I put these two chevrons around the float which is how we're going to

29
00:02:13,210 --> 00:02:14,050
need to use it.

30
00:02:14,070 --> 00:02:20,640
There's going to be lazy value Chevron float Chevron and we need to include the namespace game.

31
00:02:20,630 --> 00:02:22,520
Def TV don't utilize.

32
00:02:22,630 --> 00:02:29,920
So this now is a lazy value wrapper or container if you like if you hover over the class you can see

33
00:02:29,980 --> 00:02:34,780
some documentation about it that is a container class that wraps a value and ensures initialization

34
00:02:34,780 --> 00:02:37,470
is called just before first use.

35
00:02:37,510 --> 00:02:42,190
What do we mean by initialization what we mean this bit here to the right of health points where we

36
00:02:42,190 --> 00:02:44,520
get its initial health.

37
00:02:44,700 --> 00:02:45,000
Okay.

38
00:02:45,040 --> 00:02:49,020
So that makes sense we are going to be using it like that.

39
00:02:49,300 --> 00:02:54,280
That means that now at default initialization here isn't going to work because it's a wrapper class.

40
00:02:54,280 --> 00:02:59,800
We actually want to get to the value of this wrap class we have to do health points dot value and as

41
00:02:59,800 --> 00:03:04,960
you can see from the documentation of that it will get or set the contents of the container so we can

42
00:03:04,960 --> 00:03:09,190
use this to get the value out or we can use it to set the value.

43
00:03:09,190 --> 00:03:12,520
But that's not how we're going to use it at least not initially.

44
00:03:12,520 --> 00:03:17,520
So we're not going to do our initialization here in start because that would be a bad idea right.

45
00:03:17,530 --> 00:03:21,150
If we had to wait until start it's initialized it's not safe.

46
00:03:21,160 --> 00:03:27,700
So what we're gonna do is we're going to initialize our lazy value in a week like so and you're saying

47
00:03:27,730 --> 00:03:34,540
Hang on Sam but we don't have the ability to call to base stats in a week and you would be right.

48
00:03:34,540 --> 00:03:40,510
So what we do is we use the very cool feature of the lazy value class where we can say hang on lazy

49
00:03:40,510 --> 00:03:48,170
value we're going to create a new lazy value so new lazy value of type float like this.

50
00:03:48,580 --> 00:03:55,090
And then in the constructor for the lazy value we need to pass it and initialize a and initialize a

51
00:03:55,090 --> 00:03:55,820
delegate.

52
00:03:55,960 --> 00:04:01,930
And we've used delegates before and the context in which we've used them is events but you don't have

53
00:04:01,930 --> 00:04:08,230
to use them as events you can just pass them use them as a way of passing function pointers around as

54
00:04:08,260 --> 00:04:09,030
arguments.

55
00:04:09,040 --> 00:04:14,850
So that's what we're going to do we're going to create a private function that returns float and it's

56
00:04:14,850 --> 00:04:23,310
going to be called get initial health like so as can take no arguments and that is the signature of

57
00:04:23,310 --> 00:04:28,950
this delegate needs to take no arguments and it needs to return float because this is a lazy value of

58
00:04:29,070 --> 00:04:29,720
float type.

59
00:04:29,730 --> 00:04:32,920
If it was of type it would have to return it.

60
00:04:33,540 --> 00:04:42,630
So then all we need to do is take this initial value for our health and base do a return of this.

61
00:04:42,780 --> 00:04:48,970
If I had typed my return correctly that would work better now and get my spaces.

62
00:04:49,020 --> 00:04:49,290
Okay.

63
00:04:49,320 --> 00:04:56,340
So I need a semicolon on the end of that line in a week and what I can now do is pass this delegate

64
00:04:56,340 --> 00:05:02,060
in now note I'm not using parentheses on the end of it because we're not calling the function yet and

65
00:05:02,060 --> 00:05:08,000
that is a crucial thing because in awake we are initializing the lazy value.

66
00:05:08,010 --> 00:05:14,520
So the health points is set to something and is safe to use because of the lazy value will initialize

67
00:05:14,520 --> 00:05:20,430
it before it first gets used but we are not calling get initial health we are just passing it to the

68
00:05:20,430 --> 00:05:27,720
lazy value which will use it when we need to initialize when we need to use it basically.

69
00:05:27,750 --> 00:05:33,710
So now we can go throughout our class in the places that we're using health points and just replace

70
00:05:33,730 --> 00:05:36,340
health points with help points dot value.

71
00:05:36,420 --> 00:05:42,840
So we just add a dollar value on the end here and that goes in and reaches in and gets the value out

72
00:05:43,230 --> 00:05:50,220
and what that's doing is it's basically saying that when we want to get this value we need to make sure

73
00:05:50,280 --> 00:05:54,870
that it is fully initialized and it will call the initialize a if necessary.

74
00:05:54,870 --> 00:05:58,070
Right at this point so that it has its default value.

75
00:05:58,080 --> 00:06:05,520
So now we could call take damage in Start and Even if start hadn't been called in health yet it would

76
00:06:05,520 --> 00:06:12,240
make sure that we had got the correct default value for health points and everything would work as we

77
00:06:12,240 --> 00:06:13,010
expected.

78
00:06:13,020 --> 00:06:18,030
Same thing down in get health points we're going to add a dollar value on the end and that's going to

79
00:06:18,030 --> 00:06:23,070
make sure that if we get health points it will have been initialized and the same thing in percentage

80
00:06:23,520 --> 00:06:30,620
and the same thing in regenerate health and let's see any other places that capture states we need to

81
00:06:30,620 --> 00:06:38,060
make sure it is returning the value rather than the lazy object and the same thing in restore state.

82
00:06:38,060 --> 00:06:47,430
Let's just check that all the locations of using health points is now using the value instead Yep looks

83
00:06:47,430 --> 00:06:48,200
like it is.

84
00:06:48,830 --> 00:06:49,080
Okay.

85
00:06:49,110 --> 00:06:50,150
So that's great.

86
00:06:50,160 --> 00:06:56,360
So if something calls two health points and tries to query health points and start it will get initialized

87
00:06:56,820 --> 00:07:04,230
but there is a opposite case which is the possibility that nothing calls to the health points before

88
00:07:04,230 --> 00:07:05,670
start or during start.

89
00:07:05,700 --> 00:07:11,360
And it's not until some updates way down the line that we actually use health.

90
00:07:11,460 --> 00:07:17,940
And so it gets initialized to its initial value and that might be okay in the case of health but I just

91
00:07:17,940 --> 00:07:23,820
want to show you that one of the features of the lazy value is that you can do health points not force

92
00:07:23,910 --> 00:07:24,670
in it.

93
00:07:24,690 --> 00:07:30,690
So in Start we can do health point stop force in it and this will mean basically if at this point we

94
00:07:30,690 --> 00:07:35,940
haven't already accessed health and caused it to initialize we will do it now we'll do it now and start

95
00:07:36,000 --> 00:07:41,400
and make sure we take a snapshot of the health points right now at this point.

96
00:07:41,400 --> 00:07:46,530
Now this isn't so important for health but for some of the other classes that you're going to use it

97
00:07:46,530 --> 00:07:46,820
in.

98
00:07:46,830 --> 00:07:49,250
It might well be very important.

99
00:07:49,350 --> 00:07:55,390
So let's just have a look at other things that are still using start and might still be initializing

100
00:07:55,390 --> 00:07:56,720
some state in start.

101
00:07:56,730 --> 00:07:58,310
So we've got our fighter class.

102
00:07:58,320 --> 00:08:01,440
Yes that's initializing a weapon that could be dangerous.

103
00:08:01,440 --> 00:08:06,660
So we're going to leave that one tab open for something that we want to work on the projectile.

104
00:08:06,660 --> 00:08:11,820
I'm not worried about setting the transform the A.I. controller yet the guard position that could be

105
00:08:11,820 --> 00:08:13,450
potentially a problem again.

106
00:08:13,680 --> 00:08:17,860
The mover has nothing and starts I'm going to actually remove it start altogether.

107
00:08:18,210 --> 00:08:24,660
We have got health which we have already updated and base stats which has got current level which is

108
00:08:24,660 --> 00:08:25,860
currently guarded against.

109
00:08:25,860 --> 00:08:31,410
But couldn't we do that neater if we were using than you lazy value.

110
00:08:31,410 --> 00:08:36,720
So these are the scripts that I want you to update we've done health but I want you to update the current

111
00:08:36,720 --> 00:08:37,880
level in base stats.

112
00:08:37,920 --> 00:08:43,530
The fighters current weapon the air controllers guard position and the move up we said we don't care

113
00:08:43,530 --> 00:08:43,950
about.

114
00:08:44,010 --> 00:08:50,130
So these three classes is your challenge to go ahead and implement a lazy value for the state that they

115
00:08:50,130 --> 00:08:55,030
are initializing in start posting a video and have a go okay.

116
00:08:55,030 --> 00:08:55,630
Welcome back.

117
00:08:55,660 --> 00:09:00,530
So let's just repeat rinse and repeat the process from before current level is an int.

118
00:09:00,550 --> 00:09:12,000
So we're gonna be doing a lazy value of the int type this time and we're gonna have to include the right

119
00:09:12,270 --> 00:09:13,830
game to utilize.

120
00:09:14,070 --> 00:09:21,090
And then what we're gonna do is in a week we're going to be setting up our current level equal to the

121
00:09:21,180 --> 00:09:22,350
lazy value.

122
00:09:22,350 --> 00:09:25,840
So new lazy value.

123
00:09:26,310 --> 00:09:30,790
And then we need to go ahead and put in a delegates in here.

124
00:09:30,960 --> 00:09:37,560
Now actually you can just put in the calculate level because calculate level already is something that

125
00:09:37,560 --> 00:09:40,200
returns int and takes no values.

126
00:09:40,200 --> 00:09:42,810
It basically calculates the level exactly as we'd want it to do.

127
00:09:42,810 --> 00:09:45,410
But now we're just gonna do it the first time it's called.

128
00:09:45,540 --> 00:09:51,180
And then in start we want to make sure that that level has been calculated so we're gonna get a force

129
00:09:51,240 --> 00:09:52,300
in it.

130
00:09:52,800 --> 00:09:58,670
And everywhere else where we've got the current level we can do just a top value on the end.

131
00:09:58,740 --> 00:10:04,110
So in here and update level we'll do it value current level values.

132
00:10:04,200 --> 00:10:05,870
Not too many dots that go.

133
00:10:06,060 --> 00:10:09,240
And then where else have we got current level.

134
00:10:09,240 --> 00:10:14,380
Got it down here and get level now notice we can simplify this away because we no longer need to check

135
00:10:14,400 --> 00:10:16,020
whether current level is set up.

136
00:10:16,050 --> 00:10:18,020
We can just go ahead and access the value.

137
00:10:18,020 --> 00:10:23,580
We can do current level DOT value and we know that that will initialize it if it wasn't already initialized.

138
00:10:23,580 --> 00:10:24,980
So that's simplified our code.

139
00:10:24,990 --> 00:10:25,530
Lovely.

140
00:10:25,530 --> 00:10:28,380
I love it when we get simplify code and that's it.

141
00:10:28,410 --> 00:10:32,960
I think we have basically got everything else the current level is not used.

142
00:10:32,970 --> 00:10:38,370
So we've updated everything to the value and the only thing is we don't set an initial value for the

143
00:10:38,370 --> 00:10:40,440
current level because it didn't have one.

144
00:10:40,440 --> 00:10:42,390
It just gets that lazy initialization.

145
00:10:42,390 --> 00:10:47,120
Now I'm gonna go ahead and quickly repeat the process for both fighter and a on a controller.

146
00:10:59,890 --> 00:11:06,850
Now you notice what I'm gonna be doing here is just stripping out the bit that sets the current weapon

147
00:11:06,910 --> 00:11:09,590
and making that a separate method.

148
00:11:09,610 --> 00:11:19,180
So this is going to be the one that I'm going to call attach weapon like so and so then attach weapon

149
00:11:19,180 --> 00:11:26,380
I'm going to call up in the set default weapon and the weapon I'm going to attach is the default weapon.

150
00:11:26,410 --> 00:11:29,050
And I'm just going to return that default weapon.

151
00:11:32,750 --> 00:11:40,850
So now it's vitally important that I call the current weapon dot force in it because otherwise we're

152
00:11:40,850 --> 00:11:42,650
not gonna have a weapon in our hand.

153
00:11:42,650 --> 00:11:47,030
So this is the case that I was talking about very important that we do a force in an instant because

154
00:11:47,060 --> 00:11:51,390
otherwise we won't have a weapon visible when we start the game.

155
00:11:51,410 --> 00:11:53,210
Let's go ahead and look for all the values

156
00:12:03,960 --> 00:12:05,850
so that's the fighter converted over.

157
00:12:05,880 --> 00:12:10,950
Let's now have a look at the A.I. controller and do the same thing for the guard position

158
00:12:27,950 --> 00:12:28,500
and then we go.

159
00:12:28,500 --> 00:12:36,150
Everything has been updated to the lazy value and we can be safe in the knowledge that nothing is being

160
00:12:36,150 --> 00:12:42,900
done in our stop methods so that everything basically is ready to go after we have had a wake.

161
00:12:42,930 --> 00:12:47,940
Once we get to start everything is ready to be called all our methods on our safe array.
