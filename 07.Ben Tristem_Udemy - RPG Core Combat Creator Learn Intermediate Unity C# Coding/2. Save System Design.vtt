WEBVTT
1
00:00:04.490 --> 00:00:08.240
Hello and welcome in this lecture we're gonna be putting in a new persistent game object our saving

2
00:00:08.240 --> 00:00:11.990
system with two scripts on it the saving system script and the saving wrapper.

3
00:00:11.990 --> 00:00:18.560
This is in order to get the overarching architecture of our saving system in place so that we can test

4
00:00:18.560 --> 00:00:18.850
things.

5
00:00:18.860 --> 00:00:20.780
Let's dive in and see how it's done.

6
00:00:21.670 --> 00:00:26.500
So whenever I start designing a fairly complicated system like we're going to have here with the saving

7
00:00:26.500 --> 00:00:31.960
system I often like to start from the outside in meaning taking the what's the user experience going

8
00:00:31.960 --> 00:00:32.700
to be.

9
00:00:32.710 --> 00:00:36.630
So how is the user going to interact with the saving and loading system.

10
00:00:36.760 --> 00:00:42.190
And that gives me a starting point for building down into the architecture of actually doing the saving

11
00:00:42.190 --> 00:00:43.040
and loading.

12
00:00:43.060 --> 00:00:48.130
Now I'm not going to go all the way to creating lots and lots of UI but we can at least set up some

13
00:00:48.130 --> 00:00:54.940
simple key bindings so that when you're in the game we can hit s to save and hit L to load or reload

14
00:00:55.000 --> 00:00:56.760
the safe as simple as that.

15
00:00:56.770 --> 00:01:01.150
And that will give us something at least to test our saving and loading system against.

16
00:01:01.150 --> 00:01:03.860
So it's quite a good place to start.

17
00:01:03.940 --> 00:01:10.300
I'm gonna start off by creating a couple of classes and for that we need a new namespace.

18
00:01:10.300 --> 00:01:16.120
So I'm going to create a folder under scripts called Saving and under that folder I'm going to create

19
00:01:16.330 --> 00:01:18.530
two separate classes in here.

20
00:01:18.580 --> 00:01:28.150
The first one is going to be the saving or the say saving system dot c s and the second one is going

21
00:01:28.150 --> 00:01:32.770
to be the saving wrapper.

22
00:01:32.770 --> 00:01:38.860
And the reason for this is I want to put all the core stuff in the saving system and then all the stuff

23
00:01:38.860 --> 00:01:43.890
that's related to how our game handles saving in the saving wrapper.

24
00:01:43.930 --> 00:01:48.990
So things like save and load to a particular file are gonna go in the saving system.

25
00:01:49.120 --> 00:01:57.760
However save and load to based on a s and an L key binding that's going to go in the saving wrapper.

26
00:01:57.850 --> 00:02:03.730
So we're going to create these classes now and in fact that may challenge for you if you like kids to

27
00:02:03.730 --> 00:02:05.980
create a saving system.

28
00:02:05.980 --> 00:02:13.270
And I'm going to put that in the namespace RPG dot saving which is a new namespace.

29
00:02:13.360 --> 00:02:18.370
So it went to complete automatically for me and then I'm gonna do a mono behavior for the wrapper as

30
00:02:18.430 --> 00:02:26.890
well and I'm going to wrap it in the namespace of saving which is should now RPG dot saving.

31
00:02:26.890 --> 00:02:34.450
Give me the hints for okeydoke and then we want to define what it is to be a saving system so I'm going

32
00:02:34.450 --> 00:02:42.130
to just go ahead and create a public API for our saving system and it's going to be public void save

33
00:02:42.870 --> 00:02:50.530
what we're going to save too well I'm going to take in a string that names the save file so this is

34
00:02:50.530 --> 00:02:57.370
just going to be like anything that RET uniquely references this particular save file and then I'm going

35
00:02:57.370 --> 00:03:07.550
to print out that we're saving to this file to the save file and then we just can copy that because

36
00:03:07.940 --> 00:03:15.230
the other method in our saving system is going to be a load which loads from a particular site file

37
00:03:16.400 --> 00:03:24.430
and the message should be loading from Save File OK so for now we're just gonna leave these print statements

38
00:03:24.430 --> 00:03:24.700
in here.

39
00:03:24.700 --> 00:03:27.600
This is what I mean by making the shell of our saving system.

40
00:03:27.730 --> 00:03:32.830
And then we're going to drive them from within the saving wrapper and in fact if you want to you can

41
00:03:32.830 --> 00:03:34.870
set this up yourself.

42
00:03:34.900 --> 00:03:38.060
Basically what we want to do is the following.

43
00:03:38.140 --> 00:03:41.140
We want to have something like a serialize.

44
00:03:41.140 --> 00:03:47.470
No not serialized feel just a concept string which is going to be the default save file.

45
00:03:47.470 --> 00:03:49.390
And this is why I want this in the wrapper.

46
00:03:49.420 --> 00:03:54.400
Because if you are doing a different project you might choose to use a different save file every save

47
00:03:54.460 --> 00:03:56.970
or you might want to use different slots.

48
00:03:57.160 --> 00:04:02.230
At the moment we're just gonna be using one single save file but that might change with your specific

49
00:04:02.230 --> 00:04:03.480
and particular requirements.

50
00:04:03.490 --> 00:04:11.260
So the default so far I'm just going to call save as simple as that and then we are going to need to

51
00:04:11.680 --> 00:04:19.300
have an update method to check for our key presses and we can then get the component of type saving

52
00:04:19.600 --> 00:04:27.700
system and we can call on that the something like save with a default save file but you don't want to

53
00:04:27.700 --> 00:04:30.970
do this every update obviously you want to do this when you've got a key down.

54
00:04:30.970 --> 00:04:38.650
So that's my little mini challenge for you is to set up these key down events and I'm going to go ahead.

55
00:04:38.680 --> 00:04:48.010
So if input don't get key down and then we're going to use the key code S at the moment it's just rough

56
00:04:48.010 --> 00:04:48.390
and ready.

57
00:04:48.390 --> 00:04:51.040
This is not what we're going to go for in our end game.

58
00:04:51.160 --> 00:04:56.710
It's just to test out our system and to have that test available to us and then we're going to do the

59
00:04:56.710 --> 00:05:05.370
input get key down El for load and we're going to do the same get component instead of save.

60
00:05:05.530 --> 00:05:07.590
We are going to call load.

61
00:05:07.600 --> 00:05:10.980
So that's created our wrapper for the saving system.

62
00:05:11.110 --> 00:05:18.610
And what I would like you to do is to put it into action in our scene so the challenge is to create

63
00:05:18.610 --> 00:05:21.840
the game object for your saving system.

64
00:05:21.910 --> 00:05:28.480
So it should be persistent should exist between levels prefab it and you should be checking that your

65
00:05:28.480 --> 00:05:33.460
logs are coming out as you'd expect from the two classes which has created so pause the video and have

66
00:05:33.460 --> 00:05:35.160
a go OK.

67
00:05:35.160 --> 00:05:35.550
Welcome back.

68
00:05:35.550 --> 00:05:40.200
This should be a fairly simple challenge I hope you didn't struggle with it if you did struggle with

69
00:05:40.200 --> 00:05:41.490
it well just watch along.

70
00:05:41.510 --> 00:05:43.380
And we will sort it out.

71
00:05:43.380 --> 00:05:51.480
So the thing is we've got our persistence objects prefab which is under core persistent objects and

72
00:05:51.540 --> 00:05:57.820
I'll grab that persistent object prefab and open it up create a new empty child which I am going to

73
00:05:57.820 --> 00:06:03.680
call the save in system just like that class we had.

74
00:06:03.880 --> 00:06:09.880
And I'm going to add two components the saving system itself and then the saving system wrapper which

75
00:06:09.880 --> 00:06:13.420
gives us the default class the default place to save.

76
00:06:13.450 --> 00:06:19.450
And the key bindings then I'm going to prefab our saving system as I said and it's already in the persistent

77
00:06:19.480 --> 00:06:26.960
objects prefab so it should get loaded when we start I hit play and I hit s with the console open I've

78
00:06:26.970 --> 00:06:31.810
got saving to save and l was loading from Save.

79
00:06:31.810 --> 00:06:32.260
Perfect.

80
00:06:32.530 --> 00:06:38.470
So this that basic infrastructure around saving which we are going to fill out to actually writing stuff

81
00:06:38.470 --> 00:06:44.440
to a save file and loading that scene state so to do that we're going to need to know about where we

82
00:06:44.440 --> 00:06:50.390
can save files in unity and we're going to do that via file manipulation and we'll learn all about file

83
00:06:50.390 --> 00:06:52.620
manipulation in the next lecture.
