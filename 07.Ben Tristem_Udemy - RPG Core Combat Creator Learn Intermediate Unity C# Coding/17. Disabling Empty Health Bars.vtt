WEBVTT
1
00:00:04.310 --> 00:00:05.540
Hello and welcome in this lecture.

2
00:00:05.540 --> 00:00:10.670
We're going to be making health balls invisible when they're full and show up when we start attacking

3
00:00:10.670 --> 00:00:11.030
someone.

4
00:00:11.030 --> 00:00:12.060
As you can see here.

5
00:00:12.230 --> 00:00:14.990
And when it is fully empty again they disappear.

6
00:00:15.170 --> 00:00:17.330
Let's dive in and see how to do that.

7
00:00:17.570 --> 00:00:21.170
So we want to try enabling and disabling that health bar.

8
00:00:21.170 --> 00:00:25.910
Now to do that we are going to be let's have a look at our health bar prefab.

9
00:00:25.910 --> 00:00:27.070
Let's go open that up.

10
00:00:27.080 --> 00:00:33.050
Ian you are in game health bar and the way we can enable and disable this is very simply by enabling

11
00:00:33.080 --> 00:00:35.690
or disabling this canvas.

12
00:00:35.690 --> 00:00:41.210
So if I enable or disable a canvas component then the whole thing just disappears.

13
00:00:41.210 --> 00:00:42.650
So that's what I want to do.

14
00:00:42.650 --> 00:00:49.100
And you can have a go at doing that for yourself if you want to if you can think of how you're going

15
00:00:49.100 --> 00:00:55.380
to make sure that's enabled and disabled based on the fraction being 0 or 1.

16
00:00:55.400 --> 00:00:57.800
Go ahead and try that out.

17
00:00:57.800 --> 00:00:58.330
OK.

18
00:00:58.370 --> 00:01:06.730
So what I'm gonna do first of all is go for serialized field and canvas and then I'm just going to have

19
00:01:06.730 --> 00:01:10.830
this as the root Canvas equals no.

20
00:01:10.830 --> 00:01:17.470
And that's what we're going to connect up over in the inspector so that our health bar component knows

21
00:01:17.530 --> 00:01:21.230
which canvas component it should be switching on and off.

22
00:01:21.250 --> 00:01:28.600
So then what we're going to do is in update basically it's going to be based on and get fractions.

23
00:01:28.600 --> 00:01:34.480
So we're gonna say first of all if and here because we're dealing with floating points we should use

24
00:01:34.480 --> 00:01:41.440
math f dots approximately which allows us to do approximate equality between floating point values.

25
00:01:41.440 --> 00:01:42.460
So hang on a second there.

26
00:01:42.460 --> 00:01:45.940
I hear you asking why can't we do equality on floating point.

27
00:01:45.940 --> 00:01:52.810
Well the reason is imprecision in floating points just inherent in floating points or doubles or any

28
00:01:52.810 --> 00:02:00.060
kind of computation with arbitrary precision numbers on a computer it just can't do arbitrary precision.

29
00:02:00.070 --> 00:02:02.430
It has to do a specific precision.

30
00:02:02.500 --> 00:02:05.780
So for example here's how it can occur.

31
00:02:05.800 --> 00:02:10.510
Suppose we have these two floating point variables start off where then we do a full loop that it's

32
00:02:10.510 --> 00:02:15.280
rates as you can see a hundred times according to this end value it's going to go through 100 times

33
00:02:16.360 --> 00:02:22.900
and all we're doing is at totaling up in this f variable we're doing 1 divided by whatever the number

34
00:02:22.900 --> 00:02:24.790
of times we're doing this loop is.

35
00:02:24.820 --> 00:02:26.610
So it's going to be one hundredth.

36
00:02:26.800 --> 00:02:34.600
So a hundred times round we are going to be adding 100 to zero which means that by the end of the loop

37
00:02:34.960 --> 00:02:41.200
if the precision is absolutely spot on what we should have is one in F.

38
00:02:41.200 --> 00:02:41.440
Right.

39
00:02:41.440 --> 00:02:47.230
That's what we should expect to see so we go ahead and print it with ten decimal places.

40
00:02:47.230 --> 00:02:49.180
And what do you think is going to come out.

41
00:02:49.780 --> 00:02:55.750
Well actually as it turns out it is nought point 9 9 9 9 9 9 9 3 or something like that.

42
00:02:55.900 --> 00:03:01.390
And it's going to actually be different on different computers as well because different chips different

43
00:03:01.540 --> 00:03:05.660
CPE use implement floating point in different ways.

44
00:03:05.800 --> 00:03:10.860
And the result might be higher or lower precision as a result.

45
00:03:10.870 --> 00:03:16.840
So basically this just points out that you might be doing operations with floats and thinking that you're

46
00:03:17.200 --> 00:03:20.770
gonna get exact results out you can't get exact results.

47
00:03:20.770 --> 00:03:26.110
There are going to be errors in whatever floating point operations you do and that is why instead of

48
00:03:26.110 --> 00:03:32.020
saying we want this and to be exactly one we're going to say this answer should be approximately one

49
00:03:32.050 --> 00:03:38.730
and that is where math f dot approximately comes in and all going to do is get the fraction of the health.

50
00:03:38.740 --> 00:03:48.830
And if that is approximately zero then what we're going to do is go to our canvas root Canvas rather

51
00:03:50.090 --> 00:03:55.550
and set enabled to false and just go ahead and return straight weeks because you don't have to change

52
00:03:55.550 --> 00:03:57.490
or update the local scale in any way.

53
00:03:58.040 --> 00:04:03.050
But if we get through that if statement instead we're going to have to enable the canvas so enabled

54
00:04:03.170 --> 00:04:07.370
true so we can see it and then we set and update the local scale.

55
00:04:07.370 --> 00:04:14.390
So if we go ahead and hit play now what I'd expect to see is that when I kill the enemy.

56
00:04:14.390 --> 00:04:15.590
His health bar disappears.

57
00:04:15.600 --> 00:04:22.910
So kill this guy over here and Southport goes down to zero and it disappears because there's no information

58
00:04:22.910 --> 00:04:23.530
he is dead.

59
00:04:23.540 --> 00:04:25.870
We can see that we don't need to be shown.

60
00:04:26.010 --> 00:04:29.600
There's also very little information when the health bar is full.

61
00:04:29.600 --> 00:04:33.170
If you've got an enemy that is standing up then you know that their health is full.

62
00:04:33.170 --> 00:04:35.390
So let's go ahead and hide it in that case too.

63
00:04:35.390 --> 00:04:41.150
In fact many challenge for you again if you haven't already done this or were struggling with the first

64
00:04:41.150 --> 00:04:46.880
bit of the challenge and want to try things out for yourself then do go ahead and see if you can also

65
00:04:46.880 --> 00:04:52.580
make it disable when the health buys for OK so the way I'm going to do this is I'm going to add an oar

66
00:04:52.670 --> 00:04:54.250
into our if statement.

67
00:04:54.260 --> 00:04:57.640
So two bars for all.

68
00:04:57.650 --> 00:04:59.090
And then we do a math.

69
00:04:59.090 --> 00:05:03.200
I'm just going to align things a little bit math after APR again.

70
00:05:03.400 --> 00:05:09.230
We're going to use the health components dots get fraction and we're going to check whether that is

71
00:05:09.260 --> 00:05:12.290
equal to one or approximately equal to one.

72
00:05:12.290 --> 00:05:18.740
So not saying if it is approximately equal to zero or if it is approximately equal to one then we are

73
00:05:18.740 --> 00:05:19.680
disabling the canvas.

74
00:05:19.700 --> 00:05:22.880
Otherwise we are updating it and showing it.

75
00:05:22.880 --> 00:05:24.500
So let's go ahead and hit play now.

76
00:05:24.650 --> 00:05:29.540
And what I'd expect to see is that all the health bars are invisible until you start attacking someone

77
00:05:29.900 --> 00:05:34.770
and then it kind of shows you their progress of having been killed until they are dead.

78
00:05:34.790 --> 00:05:36.350
And then the health board disappears.

79
00:05:36.350 --> 00:05:43.620
Again OK so that was just a quickie on how we can update our health bars to be invisible both when fully

80
00:05:43.620 --> 00:05:46.600
full or fully empty.

81
00:05:46.630 --> 00:05:47.740
See you in the next lecture.
