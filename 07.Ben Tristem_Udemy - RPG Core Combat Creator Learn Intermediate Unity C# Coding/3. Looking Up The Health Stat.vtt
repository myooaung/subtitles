WEBVTT
1
00:00:04.270 --> 00:00:08.220
Hello and welcome in this lecture we are going to be setting the help from the progression.

2
00:00:08.250 --> 00:00:15.100
So the player here has got a health of what 700 and the enemy has got the health of 40.

3
00:00:15.100 --> 00:00:23.080
But if I went and tweaked our player so that he had a different starting player level in the base that's

4
00:00:23.340 --> 00:00:28.860
not three for example then you should see that when we go ahead and hit play and select that player

5
00:00:28.860 --> 00:00:29.720
in the scene.

6
00:00:29.730 --> 00:00:35.760
His initial health is going to be down at 200 because that is what I had set in the progression.

7
00:00:35.760 --> 00:00:42.250
Let's dive in and see how this can be achieved so the fundamental premise of this lecture is that we

8
00:00:42.250 --> 00:00:47.980
should be able to get our health from in the health class instead of having it from the Health points

9
00:00:48.280 --> 00:00:50.140
configured on a prefab.

10
00:00:50.140 --> 00:00:52.570
We should be able to get this from the progression.

11
00:00:52.690 --> 00:00:54.490
So where are we going to get that from.

12
00:00:54.490 --> 00:00:58.960
Well if we are to our stats namespace it should be the base stats should provide that so I'm going to

13
00:00:58.960 --> 00:01:06.880
create a public terrible public method here called Get Health it's going to return to float and not

14
00:01:06.880 --> 00:01:12.820
take any documents and for now I'm just going to leave it returning zero and we'll fill this out in

15
00:01:12.820 --> 00:01:13.270
a bit.

16
00:01:13.270 --> 00:01:19.110
But basically what we want to do is over in the health CNS we want to introduce a start method in here.

17
00:01:20.230 --> 00:01:27.910
And with this start method if I just fixed this curly brace round here what we want to do is take our

18
00:01:27.910 --> 00:01:36.040
health points not from this configuration but instead we want to get components of type base stats and

19
00:01:36.040 --> 00:01:39.670
we might need to include the stats namespace for that.

20
00:01:39.670 --> 00:01:40.810
Now my parentheses.

21
00:01:40.810 --> 00:01:45.790
And then we can with that base that we should be able to get health which is that method we've just

22
00:01:45.790 --> 00:01:46.870
created.

23
00:01:46.870 --> 00:01:51.400
So base stats will be getting the health it'll be getting it from its progression that it's linked up

24
00:01:51.400 --> 00:01:51.900
to.

25
00:01:52.030 --> 00:01:54.020
But we'll do that in just a second.

26
00:01:54.040 --> 00:02:00.460
First of all I want to apologize for having introduced a bug here because start can get sometimes called

27
00:02:00.550 --> 00:02:06.790
after we have restored the state from the save file which does mean that you could kill an enemy leave

28
00:02:06.790 --> 00:02:10.420
the scene and then come back and the enemy will be back alive again.

29
00:02:10.420 --> 00:02:16.710
The reason being the health has been reset in start overwriting what had been saved in the save file.

30
00:02:16.720 --> 00:02:19.750
Now we are going to fix this but not for a few lectures.

31
00:02:19.750 --> 00:02:24.220
So just live with the problem for now and don't worry we are going to fix it.

32
00:02:24.490 --> 00:02:26.490
Secondly that you'll see an issue here.

33
00:02:26.530 --> 00:02:33.310
We've got a circular dependency because we have got core depending on stats and if you look at stats

34
00:02:33.310 --> 00:02:39.640
somewhere inside stats there will be a dependency on core or if there is not dependency on core at some

35
00:02:39.640 --> 00:02:43.610
point there may well be core is the most fundamental low level module.

36
00:02:43.660 --> 00:02:47.590
And if we put things depending outside of that then they are going to be problems.

37
00:02:47.590 --> 00:02:52.750
So what I'm gonna do is say that health isn't really part of our core and it's part of something a bit

38
00:02:52.750 --> 00:02:56.690
more general something a bit higher level which is our resource module.

39
00:02:56.770 --> 00:03:03.910
So I'm gonna go ahead into the unity Ed and create a new folder under scripts called resources create

40
00:03:03.910 --> 00:03:11.230
folder called resources and inside the resources folder we're just going to move from core the health

41
00:03:11.620 --> 00:03:17.350
script into resources and that's going to do all the right renaming on the stuff that already has a

42
00:03:17.350 --> 00:03:19.050
health component in unity.

43
00:03:19.120 --> 00:03:22.240
Now it says it's been deleted from disk so I need to close it.

44
00:03:22.240 --> 00:03:26.440
Make sure you do that visual you don't save there or you'll get two copies.

45
00:03:26.440 --> 00:03:31.790
So I'm gonna go get open up the hell components new location which has taken the new code with it.

46
00:03:31.820 --> 00:03:32.910
That's good.

47
00:03:32.920 --> 00:03:39.930
Now I want to change the name space from RPG core to RPG resources to match the folder it's now in and

48
00:03:40.030 --> 00:03:44.560
resources might include other things here as well like we might have a minor component or other sorts

49
00:03:44.560 --> 00:03:48.610
of components like that which are resources like maybe stamina or something like that.

50
00:03:49.120 --> 00:03:52.060
Now you see there have become some errors here.

51
00:03:52.060 --> 00:03:58.090
First of all in health we've got this reference to the action scheduler and the action scheduler is

52
00:03:58.090 --> 00:03:58.810
in core.

53
00:03:58.810 --> 00:04:02.290
And because we were in court previously and now we're no longer in court we need to have that using

54
00:04:02.290 --> 00:04:06.910
statement and otherwise this seems to be mostly okay.

55
00:04:06.940 --> 00:04:13.150
So we can go ahead and say that now I want to go and find the other places where we've got errors lots

56
00:04:13.150 --> 00:04:17.920
and lots of errors where we previously were using core and now we might want to be using the resources

57
00:04:17.920 --> 00:04:18.660
namespace.

58
00:04:18.700 --> 00:04:19.510
So I'm gonna go to combat.

59
00:04:19.510 --> 00:04:25.660
Target is the first place I'm going to be doing a using RPG resources and that should make that error

60
00:04:25.660 --> 00:04:26.080
go away.

61
00:04:26.080 --> 00:04:30.340
But we now have an unnecessary using if I click on the core line you can see there's a little light

62
00:04:30.340 --> 00:04:35.980
bulb saying hey remove this unnecessary using which I'm going to do and then I'm gonna go ahead and

63
00:04:35.980 --> 00:04:42.970
fast forward doing the same thing basically just pasting the resources into these classes that need

64
00:04:43.110 --> 00:04:48.130
a link to resources and then removing any unnecessary using.

65
00:04:48.180 --> 00:04:52.960
But before I fast forward I want to show you that fighter C.S. has got another problem here.

66
00:04:53.080 --> 00:04:54.610
We've got this namespace clash.

67
00:04:54.610 --> 00:05:02.280
There is a resources class in the unity engine namespace that we were using to load our weapon and there

68
00:05:02.290 --> 00:05:03.580
was a resources namespace.

69
00:05:03.580 --> 00:05:07.360
Now what you have to do in these cases is just make it unambiguous.

70
00:05:07.390 --> 00:05:10.890
I think it's a good name resource is a good name for our module.

71
00:05:10.900 --> 00:05:16.970
So what we're gonna do is just gonna make it unambiguous by saying Hey we're gonna use Unity engine

72
00:05:17.300 --> 00:05:23.210
resources in this case and then everything is fixed because C sharp knows that where this is coming

73
00:05:23.210 --> 00:05:27.470
from it's not trying to reference the namespace which is what it tries to do by default.

74
00:05:27.500 --> 00:05:29.080
So that fixes the errors in fighter.

75
00:05:29.090 --> 00:05:34.820
And now if we had any extra using around yes we do this system is an extra using I can go ahead and

76
00:05:34.850 --> 00:05:37.840
remove it and I'm going to repeat this process for the other files.

77
00:05:37.880 --> 00:05:44.810
So we start off the process by going to projectile and then weapon up next go into control and a control

78
00:05:44.810 --> 00:05:52.130
room player controller and then in movement we do the movement c s move a C S and that seems to have

79
00:05:52.130 --> 00:05:54.050
fixed all the problems I was having.

80
00:05:54.050 --> 00:05:59.310
So if I go into unity now hopefully we can go and do damage to the guard who's standing over there.

81
00:05:59.420 --> 00:06:04.610
So I'm going to take my big weapon and smack him in the face and he does indeed die.

82
00:06:04.610 --> 00:06:10.120
So the health seems to be decreasing probably because our health initial health is a bit low.

83
00:06:10.130 --> 00:06:17.120
Let's just check this with a higher base health I'm going to cause if you remember we replace that with

84
00:06:17.120 --> 00:06:21.980
the getting the health and the base that is going to set that's 30 because at the moment he had zero

85
00:06:21.980 --> 00:06:27.050
health which is why he died so instantly whack in a couple of times and he dies.

86
00:06:27.050 --> 00:06:30.550
So the health component is still working as it was before.

87
00:06:30.560 --> 00:06:36.740
So as I mentioned the place for this health to come from is not actually the base stats but rather the

88
00:06:36.770 --> 00:06:37.670
progression itself.

89
00:06:37.670 --> 00:06:39.430
So what we're going to have is a few hops.

90
00:06:39.440 --> 00:06:45.860
Basically we start at the health component which gets its health from the base stats which in turn gets

91
00:06:45.860 --> 00:06:49.430
its health from the progression the scripts will object.

92
00:06:49.430 --> 00:06:54.970
So this scriptural object is going to have a public method which is going to return afloat float again

93
00:06:54.980 --> 00:06:59.840
it's going to be get health but this time we need to give it some arguments so that it knows which health

94
00:06:59.870 --> 00:07:03.800
to get because this character we've got many character classes and inside a character class we've got

95
00:07:03.800 --> 00:07:04.940
many levels.

96
00:07:04.940 --> 00:07:08.970
So first of all we need to say hey which character class were you looking for.

97
00:07:08.990 --> 00:07:11.160
First of all so it's the character.

98
00:07:11.160 --> 00:07:14.600
Class is the first argument and then within that.

99
00:07:14.600 --> 00:07:15.830
Which level were you looking for.

100
00:07:15.860 --> 00:07:18.830
That's an int saying the level.

101
00:07:18.830 --> 00:07:24.950
Now this is the bit that you are going to do here so I get to fill this out as a to do I'm just going

102
00:07:24.950 --> 00:07:27.510
to for now put a return value in.

103
00:07:27.710 --> 00:07:32.900
But you are going to have to make this actually get the correct health from the correct character class

104
00:07:32.900 --> 00:07:36.390
at the correct level and in base stats.

105
00:07:36.440 --> 00:07:37.810
What would you do here.

106
00:07:37.820 --> 00:07:43.400
This is a little mini challenge for you How would you return their health coming from progression instead

107
00:07:43.400 --> 00:07:45.270
of this fixed value.

108
00:07:45.290 --> 00:07:49.910
Well the way we can do it is we can take the progression that is assigned in a serialized field and

109
00:07:49.910 --> 00:07:52.830
do a dot get health instead.

110
00:07:53.600 --> 00:08:00.480
And because we have the character class here and we have the starting level we can add those in.

111
00:08:00.530 --> 00:08:06.470
So we are adding a bit of information as we go through this hop through base stats and that is hunky

112
00:08:06.470 --> 00:08:11.550
dory so now I'd like you to fill out that get health method.

113
00:08:11.550 --> 00:08:13.950
So remembering this is what our progression looks like.

114
00:08:13.950 --> 00:08:16.150
For each is good enough at this point.

115
00:08:16.150 --> 00:08:23.820
If you're basically what you want to do is go through each of the classes and find the health basically

116
00:08:23.970 --> 00:08:30.330
and then you want to go and find the level now doing a for each loop over the classes and just comparing

117
00:08:30.330 --> 00:08:32.750
them is plenty fine for now in the future.

118
00:08:32.750 --> 00:08:38.610
We don't want to worry about how the performances on that but not just yet so check which class is the

119
00:08:38.610 --> 00:08:42.470
correct one and then find the right level and return the health at that level.

120
00:08:42.480 --> 00:08:45.750
So Paul's video and have a go okay.

121
00:08:45.750 --> 00:08:47.070
Welcome back.

122
00:08:47.070 --> 00:08:48.270
Let's give this a shot shall we.

123
00:08:48.270 --> 00:08:56.230
So in the progression we are going to do a for each and we're going to do a four each over the progression.

124
00:08:56.250 --> 00:08:57.550
Character class.

125
00:08:57.570 --> 00:09:06.360
So I'm going to call this the progression class in the full loop and then the we're circling over the

126
00:09:06.390 --> 00:09:17.010
character classes array and basically want to say if let's see if our progression character class adopts

127
00:09:18.010 --> 00:09:23.410
character class is equal to the character class that we passed in to get health.

128
00:09:23.410 --> 00:09:25.530
So it's the one we're searching for.

129
00:09:25.530 --> 00:09:32.300
This is the droid that we're looking for then braces we are going to go ahead and well get return the

130
00:09:32.470 --> 00:09:33.640
health level.

131
00:09:33.640 --> 00:09:42.100
So I'm going to return the progression classes dot health and we're going to look up in that array by

132
00:09:42.100 --> 00:09:43.330
the level.

133
00:09:43.330 --> 00:09:49.090
Now remembering here that's the level we're passing in and the array is slightly different at level

134
00:09:49.090 --> 00:09:49.660
1.

135
00:09:49.680 --> 00:09:54.130
We're going to look at left element number 0 in the array.

136
00:09:54.190 --> 00:09:58.860
So he wants to level minus 1 in order to return the right thing here.

137
00:09:59.380 --> 00:10:01.750
And that should hopefully return as a float.

138
00:10:02.320 --> 00:10:06.850
And then at the end of this for each loop we just need some kind of default in case we didn't find the

139
00:10:06.850 --> 00:10:09.490
right class I'm going to go ahead and return 0.

140
00:10:09.490 --> 00:10:11.260
Now why is this complaining at me.

141
00:10:11.530 --> 00:10:13.990
So you may have got this far and got a little bit stumped now.

142
00:10:14.020 --> 00:10:19.460
These errors are basically saying that in get health we've got inconsistent accessibility.

143
00:10:19.510 --> 00:10:23.140
This means that it's saying that the parameter character class is the problem here.

144
00:10:23.140 --> 00:10:25.760
It's saying it's less accessible than the method.

145
00:10:25.840 --> 00:10:28.210
Now the method is public.

146
00:10:28.210 --> 00:10:30.970
Now there are different levels of accessibility in C sharp.

147
00:10:30.970 --> 00:10:35.260
We know that you can have private methods for example and that would be fine.

148
00:10:35.260 --> 00:10:41.830
But actually the e num by default is something called internal and you can see by basically me putting

149
00:10:41.830 --> 00:10:43.290
my function as internal.

150
00:10:43.360 --> 00:10:48.820
It's suddenly okay but we do want it to be public and all that means is that we also need to make our

151
00:10:48.850 --> 00:10:51.310
enum the character class public too.

152
00:10:51.370 --> 00:10:57.220
That needs to be at the same level of accessibility or higher than the methods that use it.

153
00:10:57.280 --> 00:10:59.640
So that makes that error go away.

154
00:10:59.680 --> 00:11:02.050
Now what's going on with the cat class and health.

155
00:11:02.070 --> 00:11:03.790
Ah well that's fairly straightforward.

156
00:11:03.790 --> 00:11:08.230
The problem here is that these two aren't public and I can't access them so I'm going to make them public

157
00:11:08.260 --> 00:11:14.890
and remove serialized field because they're public methods will automatically be serialized so we don't

158
00:11:14.890 --> 00:11:16.310
need to repeat that basically.

159
00:11:16.390 --> 00:11:19.980
So public catch class public health should do the trick.

160
00:11:20.020 --> 00:11:26.890
Now if we go ahead and hit well let's just check what I've got set up in my game.

161
00:11:26.890 --> 00:11:35.440
Core progression and at the moment my player is set to at level 5 have 700 and the grunt.

162
00:11:35.470 --> 00:11:37.620
I haven't got anything set up so what's going to happen.

163
00:11:37.630 --> 00:11:40.300
I'll go ahead and hit play right now.

164
00:11:40.430 --> 00:11:42.610
K we've got a bunch of errors in the console.

165
00:11:42.610 --> 00:11:48.280
These are about the index array out of bounds reason for that is that we've got our grunts set up to

166
00:11:48.280 --> 00:11:49.450
be at level 1.

167
00:11:49.450 --> 00:11:56.290
I believe I have a look at my grunt and his progression script says yeah he's a level one but we don't

168
00:11:56.290 --> 00:12:02.170
have anything in our progression for the grunts at level 1 and at the moment I don't want to fix that

169
00:12:02.170 --> 00:12:02.760
in codes.

170
00:12:02.770 --> 00:12:04.160
Give us a better error.

171
00:12:04.570 --> 00:12:08.890
But I do want to give this some values I'm going to give this a value of 40 so if you go ahead and hit

172
00:12:08.890 --> 00:12:12.730
play now hopefully the errors are gone from the console yes they are.

173
00:12:13.100 --> 00:12:19.420
If I look at my player and have a look at his health his health is currently 14 so quite low.

174
00:12:19.420 --> 00:12:23.530
And if I go and look at the grunt and grunt will do.

175
00:12:23.680 --> 00:12:26.020
And here we've got health points of 40 as well.

176
00:12:26.020 --> 00:12:31.540
So if we start off the player on a slightly higher level let's say he's currently the player is a grunt

177
00:12:31.540 --> 00:12:32.840
level which is odd.

178
00:12:32.890 --> 00:12:37.570
So let's go into the player prefab I thought I'd change this the character progression class should

179
00:12:37.570 --> 00:12:41.200
be player and let's try and set him to level five.

180
00:12:41.410 --> 00:12:46.540
So go ahead and play with that and let's see now.

181
00:12:46.550 --> 00:12:46.880
Who.

182
00:12:46.930 --> 00:12:47.650
Who.

183
00:12:47.660 --> 00:12:48.290
What's our level.

184
00:12:48.320 --> 00:12:54.920
If I go into the scene have a look at the player have the player selected take health points seven hundred

185
00:12:55.140 --> 00:13:02.040
you can see that that is now being set by the progression rather than the default values in the prefabs

186
00:13:03.180 --> 00:13:03.420
great.

187
00:13:03.420 --> 00:13:10.020
So in this lesson we've learnt how we can hop through our base stats model behavior use some of the

188
00:13:10.170 --> 00:13:17.250
information there to annotate our method and then go to the progression and find the values of the health

189
00:13:17.310 --> 00:13:22.050
and character class that we want it now as we can see it's getting slightly annoying to have to select

190
00:13:22.050 --> 00:13:27.270
the player all the time to see what health it's got left to in the next lecture we are going to look

191
00:13:27.480 --> 00:13:31.140
at how we can put in a debug display for the health see that.
