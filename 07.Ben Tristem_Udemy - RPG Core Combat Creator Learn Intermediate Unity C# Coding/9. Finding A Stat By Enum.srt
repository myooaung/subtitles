1
00:00:04,220 --> 00:00:08,390
Hello and welcome in this lecture we're going to be setting it up so that we can set our experience

2
00:00:08,450 --> 00:00:09,980
reward progressions.

3
00:00:09,980 --> 00:00:15,470
And then we can go through the world and beat people up so beat up this guard and we just want to see

4
00:00:15,470 --> 00:00:18,290
that his progression does indeed get the experience points.

5
00:00:18,290 --> 00:00:23,480
If I run over to the Archer and beat him to a pulp then we should see that he gets a different level

6
00:00:23,480 --> 00:00:29,940
of experience rewards and gets 30 points which was indeed what he had in the progression setup.

7
00:00:30,440 --> 00:00:36,000
So let's dive into the lecture and see how it's done so in the last lecture we saw that we had broken

8
00:00:36,030 --> 00:00:39,190
our get health method and this lecture were going to be fixing that.

9
00:00:39,240 --> 00:00:45,060
So first of all I want to change it from being get health to something more general basically a get

10
00:00:45,450 --> 00:00:47,180
start method instead.

11
00:00:47,180 --> 00:00:54,030
And how can we do this well we can now make use of our stat class that we've got as one of the arguments.

12
00:00:54,060 --> 00:00:57,810
So we're gonna give it a character class but we're also gonna give it a stat and catching a lead with

13
00:00:57,810 --> 00:01:00,770
the stat because that's the most important thing is the methods name.

14
00:01:00,780 --> 00:01:05,760
So stat is the first argument then we can say it's the stat for the character class and this particular

15
00:01:05,760 --> 00:01:06,960
level.

16
00:01:06,960 --> 00:01:12,360
Okay so this is how get stats being modified Now you notice it's giving an error again inconsistent

17
00:01:12,360 --> 00:01:18,090
accessibility we've done it again the E enum needs to be a public enum in order for us to not have that

18
00:01:18,120 --> 00:01:18,480
error.

19
00:01:18,840 --> 00:01:21,000
So the stat needs to be a public enum.

20
00:01:21,360 --> 00:01:22,560
And then what.

21
00:01:22,590 --> 00:01:22,830
Okay.

22
00:01:22,860 --> 00:01:30,370
So at this point what we're going to do is change out the body of get stats.

23
00:01:30,390 --> 00:01:32,940
So that actually works with a new progression structure.

24
00:01:32,940 --> 00:01:38,070
Now if you feel confident in doing that for yourself then do go ahead and pulls a video and have it

25
00:01:38,070 --> 00:01:38,840
go.

26
00:01:38,850 --> 00:01:40,930
Otherwise just follow along with me.

27
00:01:41,070 --> 00:01:45,930
So caution crucially we've got two lists now we've got the list of the top level which is the character

28
00:01:45,930 --> 00:01:46,620
classes.

29
00:01:46,740 --> 00:01:49,080
We've also got the progression stats list.

30
00:01:49,170 --> 00:01:53,240
So we're gonna need to for loops one for each of those lists.

31
00:01:53,250 --> 00:01:54,810
And in fact we've got another list the floats.

32
00:01:54,810 --> 00:02:00,990
But that when we just index directly rather than having to do a for loop looking for the character class.

33
00:02:00,990 --> 00:02:07,290
So what we're going to do well we're going to okay we're going to have a look and do a full loop but

34
00:02:07,470 --> 00:02:11,680
if I do a full loop inside this if statement we're going to have lots of levels of indentation.

35
00:02:11,790 --> 00:02:18,270
So I'm gonna break that level of indentation by just doing a instead of if progression cash class and

36
00:02:18,270 --> 00:02:21,120
not equal ends do and then continue.

37
00:02:21,120 --> 00:02:29,100
So we're going to break out this loop iteration a little bit early and go and continue to look for other

38
00:02:29,100 --> 00:02:31,950
character classes because this is not the droid that we were looking for.

39
00:02:32,580 --> 00:02:40,480
Okay so I'm going to then remove this body or I'll keep it around because we want that later and I'm

40
00:02:40,480 --> 00:02:47,880
going to include a for each loop like so that's gonna go over what it's going to go over these stat

41
00:02:48,420 --> 00:02:50,040
in the progression class.

42
00:02:50,070 --> 00:02:56,610
So the progression class dots stat stats in fact and then we're going to get a progression stat is the

43
00:02:56,700 --> 00:03:03,420
variable type and also going to use it for the name but with a look lowercase P so then we're gonna

44
00:03:03,420 --> 00:03:04,400
do exactly the same thing.

45
00:03:04,400 --> 00:03:12,480
Basically you can do for if the progression stat so the progression class the progression stat dot stat

46
00:03:12,780 --> 00:03:22,050
is not equal to the stat that was passed in then we want to continue because we are looking for a different

47
00:03:22,050 --> 00:03:28,750
stat and then finally if we have got the right thing this is where we want a return statement.

48
00:03:28,750 --> 00:03:33,910
So just paste that in here instead of doing the progression class they were looking in the progression

49
00:03:33,910 --> 00:03:35,850
stat for the health.

50
00:03:36,250 --> 00:03:36,500
Okay.

51
00:03:36,520 --> 00:03:38,700
So that should hopefully make sense.

52
00:03:38,710 --> 00:03:41,330
Except it's not the health it is the levels.

53
00:03:41,350 --> 00:03:44,230
So that pretty much fixes it up.

54
00:03:44,380 --> 00:03:50,860
Now one more thing I want to do here is I would like to guard against a situation where we are looking

55
00:03:50,860 --> 00:03:53,500
for a level that is not in this array.

56
00:03:53,590 --> 00:03:57,040
So the way I'm gonna do this is just to say Hang on.

57
00:03:57,040 --> 00:04:02,910
If the progression stat dot levels is not the right length we're going to continue in our for loop.

58
00:04:03,490 --> 00:04:05,050
So how we're going to do that.

59
00:04:05,050 --> 00:04:11,760
So the progression starts levels dot length and a relationship.

60
00:04:11,770 --> 00:04:16,830
Not quite sure what the relationship is with the level that is being passed in.

61
00:04:16,960 --> 00:04:22,120
So have a think about that what do you think the relationship should be between these two.

62
00:04:22,120 --> 00:04:23,930
Well if we reason about it.

63
00:04:24,010 --> 00:04:34,300
If we had an array of length zero and we are looking for a stat at level two for example that's clearly

64
00:04:34,300 --> 00:04:35,200
wrong.

65
00:04:35,200 --> 00:04:37,510
But let's think about the edge case right.

66
00:04:37,510 --> 00:04:42,420
We've got an array of length one and we're looking for this stat at level 1.

67
00:04:42,700 --> 00:04:47,710
That should work whereas the stat at level 2 should no longer work.

68
00:04:47,740 --> 00:04:52,330
So we've got this relationship where this would be one and 2 this would be wrong.

69
00:04:52,490 --> 00:04:58,160
And but at 1 it would be correct and at zero it doesn't really exist.

70
00:04:58,180 --> 00:05:06,460
But say we had array of length 2 instead at 1 it would be fine at 2 it would be fine and at 3 it would

71
00:05:06,460 --> 00:05:07,270
no longer be fine.

72
00:05:07,270 --> 00:05:14,430
So what we're saying is that the length of the array has to be greater than or equal to the level.

73
00:05:14,440 --> 00:05:21,130
So another way of flipping that round is to say that the length of the array is in fact less than the

74
00:05:21,130 --> 00:05:22,060
level.

75
00:05:22,060 --> 00:05:27,410
And if it is less than the level then we should continue with our search basically.

76
00:05:27,430 --> 00:05:31,110
So that should pretty much do us for the get stat.

77
00:05:31,120 --> 00:05:36,790
So now I'd like you to refactor forget stat in the rest of the code base and propagate the changes through

78
00:05:36,790 --> 00:05:38,140
there as best you can.

79
00:05:38,140 --> 00:05:44,290
And in fact I want to clarify that in base stat I think we can make this method here instead of having

80
00:05:44,290 --> 00:05:46,460
a get health and get experience award.

81
00:05:46,540 --> 00:05:50,270
I think we can just replace all of that with a get stat method there as well.

82
00:05:50,620 --> 00:05:55,390
So find the errors and fix the errors if you can pause a video and give it a shot.

83
00:05:56,240 --> 00:05:56,510
OK.

84
00:05:56,520 --> 00:05:57,060
Welcome back.

85
00:05:57,090 --> 00:06:03,780
So as I said we're starting with base stat we're going to change this over to get health so and I'll

86
00:06:03,780 --> 00:06:09,460
get healthcare stat and we want to pass in these stat class but we don't have one.

87
00:06:09,570 --> 00:06:11,600
We have to get that from this method.

88
00:06:11,620 --> 00:06:18,590
And change the method to get stats in base stats and this stat that we want to get.

89
00:06:18,600 --> 00:06:24,600
So depending on who is asking they might want different things we might want health we might want experience

90
00:06:24,600 --> 00:06:27,910
to level up we might want other things that we add into this in a.

91
00:06:27,930 --> 00:06:28,940
It's a later date.

92
00:06:29,220 --> 00:06:35,670
So get stat is going to pass on these stats to the progressions get stat method and that means we no

93
00:06:35,670 --> 00:06:39,000
longer need to get experienced reward because that is now redundant.

94
00:06:39,000 --> 00:06:44,880
We can just do get stats with the enum onset to experience reward now that's created some issues particularly

95
00:06:44,880 --> 00:06:48,820
in the health component which I think is the only component at the moment that gets things from base

96
00:06:48,820 --> 00:06:52,260
stat but it won't be in the future and it's in three places.

97
00:06:52,260 --> 00:06:59,670
So we've got one place that is getting health so we can do a get stat and then stats dot health instead

98
00:07:00,290 --> 00:07:04,830
and we can do that in the other location that is getting the health as well which is down here where

99
00:07:04,830 --> 00:07:10,320
we're doing the percentage points calculation and then there's one more place which is a ward experience

100
00:07:10,770 --> 00:07:15,690
where actually we're not getting the health but we are getting the experience reward.

101
00:07:15,690 --> 00:07:17,510
Okay so that should do the trick.

102
00:07:17,520 --> 00:07:24,610
Now we need to go and update our progression to make sure that the progression is going to return experience

103
00:07:24,630 --> 00:07:27,660
reward for the grunt and the Archer.

104
00:07:27,780 --> 00:07:32,470
So I'm gonna go ahead and duplicate at this level here.

105
00:07:32,490 --> 00:07:38,700
The stats list we're going to duplicate element zero and change the stat to be the experience reward.

106
00:07:38,700 --> 00:07:46,680
And I'm going to give experience reward of 10 for the base level level 1 grunt and I'm going to duplicate

107
00:07:46,710 --> 00:07:53,970
again the array element for hell of a health and change over to experience reward and experience reward

108
00:07:53,970 --> 00:07:59,760
for the archer is going to be 20 and level 1 because an archer is slightly more advanced or something

109
00:07:59,760 --> 00:08:00,080
like that.

110
00:08:00,120 --> 00:08:03,740
So I'm going to go ahead and hit play and see if we can get this.

111
00:08:03,770 --> 00:08:07,920
So attack the first enemy I'm gonna look at the players experience see what it's doing starts off at

112
00:08:07,920 --> 00:08:14,610
zero goes up to 10 when I kill that enemy and if I go and kill the second enemy over here then sure

113
00:08:14,610 --> 00:08:19,410
enough that gives me 20 points instead so we can tell that it is using the data from the progression

114
00:08:19,440 --> 00:08:22,890
and we also saw that health was still working as expected.

115
00:08:22,890 --> 00:08:28,260
So it's all in all what we've now got is a more generic way of getting stats into the system we can

116
00:08:28,260 --> 00:08:33,150
add more stats in here and then all we've got to do is update our progression to have the relevant stats

117
00:08:33,150 --> 00:08:38,580
that we want and we can use it somewhere else in the code base without having to pass it through base

118
00:08:38,580 --> 00:08:41,540
stats and rewrite lots of code.

119
00:08:42,000 --> 00:08:47,600
So there is a mission here because I had to go into player to look up the experience points.

120
00:08:47,730 --> 00:08:52,950
We would like an experienced display as well and we would like those experience points to persist just

121
00:08:52,950 --> 00:08:57,510
like the health points when we go between worlds or we just save a game.

122
00:08:57,570 --> 00:09:00,200
So that's going to be the subject of the next lecture.

123
00:09:00,210 --> 00:09:00,780
See you then.
