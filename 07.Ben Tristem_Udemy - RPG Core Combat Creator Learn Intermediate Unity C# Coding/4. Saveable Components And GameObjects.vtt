WEBVTT
1
00:00:04.450 --> 00:00:05.190
Hello and welcome.

2
00:00:05.190 --> 00:00:08.900
In this lecture it's very exciting we're gonna get some saving actually working.

3
00:00:08.980 --> 00:00:15.430
So if I move my character over here from his default save start location and hit safe we get our log

4
00:00:15.430 --> 00:00:17.560
message very boring as it was before.

5
00:00:17.710 --> 00:00:24.790
And if I move my character away from that location but hit load we load back the state that we saved

6
00:00:24.820 --> 00:00:28.780
is actually a safe system in progress and working with our movement component.

7
00:00:28.780 --> 00:00:35.510
Let's dive in and see how we can make this work with our characters and components so now that we're

8
00:00:35.510 --> 00:00:43.760
able to activate the saving loading we want to actually have the data in our scene being saved and loaded.

9
00:00:43.760 --> 00:00:50.330
Now as I have said before the way to do this is to use our salable entity on the things that we want

10
00:00:50.330 --> 00:00:56.540
to save and load and to have Icesave bulls implemented on all the components that we want to save and

11
00:00:56.540 --> 00:00:57.830
load from.

12
00:00:57.860 --> 00:01:03.950
So we're going to start off by doing the characters as our salable entities and having the movement

13
00:01:03.950 --> 00:01:09.200
component as the first component that stores state which is going to be the location of the character.

14
00:01:09.260 --> 00:01:15.740
So we're going to do this by going in to our character prefab so let's go ahead and open up the character

15
00:01:15.770 --> 00:01:17.090
prefab.

16
00:01:17.120 --> 00:01:21.560
The first thing we want to do is make this a safe blend city so I'm going to add the saleable entity

17
00:01:21.560 --> 00:01:27.860
components like so you'll notice that there is a serialized field here called the unique identifier

18
00:01:27.860 --> 00:01:32.450
now don't go and enter this otherwise it's not going to be unique because every character is going to

19
00:01:32.450 --> 00:01:34.480
have the same unique identifier.

20
00:01:34.490 --> 00:01:40.670
Now there is some magic going on behind the scene which actually means that in your sandbox you will

21
00:01:40.670 --> 00:01:45.590
notice or any scene that you open up you will notice that suddenly you've got an asterisk here.

22
00:01:45.650 --> 00:01:47.360
It's asking you to save the scene.

23
00:01:47.360 --> 00:01:47.930
Why is that.

24
00:01:47.960 --> 00:01:50.390
We change the prefab it's asking us to save the scene.

25
00:01:50.390 --> 00:01:56.410
Well that's because using an editor script we have gone ahead and modified the scene based on that IceSave

26
00:01:56.470 --> 00:01:56.690
bill.

27
00:01:56.690 --> 00:02:03.830
So if we go and find the character for example any character we'll find the player for example you can

28
00:02:03.830 --> 00:02:09.110
see that he has got a unique identifier that has been generated and is part of the override of this

29
00:02:09.110 --> 00:02:09.790
scene.

30
00:02:09.860 --> 00:02:13.000
So it's unique according within this scene basically.

31
00:02:13.010 --> 00:02:16.430
So this character is the only one that has this unique identifier.

32
00:02:16.450 --> 00:02:24.740
If I go ahead to any of these enemies for example and the enemies each have their own unique identifier

33
00:02:24.750 --> 00:02:31.130
this just means that the data associated with this entity is going to always be associated with this

34
00:02:31.130 --> 00:02:37.310
entity even if I change up my scene in an update I decide that I want my player to or my enemy to be

35
00:02:37.310 --> 00:02:38.730
located in a different place.

36
00:02:38.930 --> 00:02:44.450
The scene data is still going to be the same and associated with the correct enemy.

37
00:02:44.450 --> 00:02:49.190
So that's a nice little bonus for you having these unique identifier so you don't have to go in and

38
00:02:49.190 --> 00:02:50.860
type them all in manually.

39
00:02:50.870 --> 00:02:56.030
Now we will be seeing a situation with the player where we want to deliberately override that unique

40
00:02:56.030 --> 00:02:58.730
identifier but we're not going to get to that just yet.

41
00:02:58.790 --> 00:03:02.030
So I'm going to go ahead and open this scene and save it.

42
00:03:02.060 --> 00:03:07.930
I'm going to find my other scenes as well that have got potentially got characters in his and box has

43
00:03:07.940 --> 00:03:10.860
also got a character so I'm gonna go ahead open it and then you'll leave.

44
00:03:10.880 --> 00:03:16.230
There are some changes because it has generated those unique identifiers made to go ahead and safe.

45
00:03:16.280 --> 00:03:24.140
So I got to go back to my sandbox one and we want to implement the ISO capable on our mover scriptural

46
00:03:24.230 --> 00:03:26.450
object on our mover model behavior.

47
00:03:26.480 --> 00:03:30.800
So I'm going to go ahead and open up the mover one of behavior.

48
00:03:30.920 --> 00:03:37.880
And by the way I did that with a control P which opens up files by name and you can see we're already

49
00:03:37.880 --> 00:03:39.820
implementing AI action here.

50
00:03:39.830 --> 00:03:47.660
Now we want to add using RPG dot saving here at the top of the file so that we have access to the AI

51
00:03:47.660 --> 00:03:48.750
savable.

52
00:03:48.860 --> 00:03:51.550
And in addition to AI action we're gonna have AI Sable.

53
00:03:51.590 --> 00:03:52.990
Simple as that.

54
00:03:53.000 --> 00:03:58.070
Now if you remember we have got the control dots to allow us to implement an interface I'm going to

55
00:03:58.070 --> 00:03:59.360
go ahead and use that now.

56
00:03:59.500 --> 00:04:04.550
And I believe it's added two methods to the bottom of your class.

57
00:04:04.580 --> 00:04:09.880
Now what it's got there is a capture state and a restored state.

58
00:04:09.920 --> 00:04:15.560
Now notice that capture state and restore state have an object here.

59
00:04:15.560 --> 00:04:16.910
Now why is that.

60
00:04:16.940 --> 00:04:23.060
Well this is because of the substitution principle we've seen this before with AI action we could say

61
00:04:23.360 --> 00:04:30.020
that you can put in a mover or a fighter because they both inherit from AI action in this case.

62
00:04:30.020 --> 00:04:34.130
What we're saying is the object is the root object of all objects in C sharp.

63
00:04:34.130 --> 00:04:38.870
So really we could put in a serialized vector three we'll see what that is in just a second.

64
00:04:38.870 --> 00:04:45.390
We could put an addiction we can put any C sharp objects in to something that takes a type of object.

65
00:04:45.410 --> 00:04:48.840
So that basically means we could return anything from this method.

66
00:04:48.860 --> 00:04:54.860
And the thing passed back into restore stay is going to be the same thing that we returned from capture

67
00:04:54.860 --> 00:04:55.220
state.

68
00:04:55.220 --> 00:04:59.120
So that is the magic of the saving system going on right here.

69
00:04:59.120 --> 00:05:04.910
It's saying whenever you capture the state that is the thing that is going to be restored when the save

70
00:05:04.910 --> 00:05:06.440
file is restored.

71
00:05:06.440 --> 00:05:14.030
Now a little thing to note here is that restore state when the level loads is going to be called just

72
00:05:14.030 --> 00:05:17.300
after awake but before start.

73
00:05:17.300 --> 00:05:21.290
So it happens in between those two calls.

74
00:05:21.290 --> 00:05:23.750
That's not quite relevant to us just yet but it might be.

75
00:05:24.290 --> 00:05:29.480
So let's start off by trying to capture the state of the move.

76
00:05:29.630 --> 00:05:35.440
We're going to say that the state of the mover is essentially just our position now is pretty straightforward

77
00:05:35.470 --> 00:05:41.020
because what we want to do is go ahead and return our position because that's what it's going to save

78
00:05:41.020 --> 00:05:48.730
in the save file so I can do a transform dot position return so return that in the capture state.

79
00:05:48.730 --> 00:05:53.060
Now let's go ahead and save in our game and see what happens.

80
00:05:53.060 --> 00:06:00.360
OK go ahead and play and then I hit the save button and we have got ourselves an error.

81
00:06:00.590 --> 00:06:02.340
Now what is this error saying.

82
00:06:02.340 --> 00:06:07.650
Saying it's a serialization exception that vector 3 is not marked as C realizable.

83
00:06:07.660 --> 00:06:13.840
Ah well that explains why we've got this other class in our saving module.

84
00:06:13.950 --> 00:06:17.270
We've got this C realizable vector 3 and that kind of explains it.

85
00:06:17.270 --> 00:06:21.390
Basically it's a vector three but it is marked as serialized bool.

86
00:06:21.410 --> 00:06:26.240
So there is a restriction on the things that we can return from capture state.

87
00:06:26.360 --> 00:06:29.750
And that is that they have to be marked as serialized.

88
00:06:29.780 --> 00:06:36.710
Now all that really means is that you have put this annotation on the class making it a system dot serialize

89
00:06:36.710 --> 00:06:42.150
bool class and that just means hey take the data in this class and make sure it is safe to the save

90
00:06:42.150 --> 00:06:43.300
file and so on and so forth.

91
00:06:43.310 --> 00:06:48.710
So don't have to worry about the specifics of it as you can see the class is fairly basic.

92
00:06:48.710 --> 00:06:52.910
We can just go ahead and construct it from an existing vector 3.

93
00:06:52.910 --> 00:07:01.010
So all I want to do is do a new serialized bool vector 3 and pass into the constructor of the current

94
00:07:01.010 --> 00:07:07.610
position which means that we're going to get out of it a serialized vector 3 with that position.

95
00:07:07.610 --> 00:07:13.640
So if we go ahead and try to save this time hopefully we won't get any runtime errors.

96
00:07:13.640 --> 00:07:20.950
So going hard hit play hit s and it is saying Oh end of stream in counts before passing was complete.

97
00:07:20.960 --> 00:07:29.060
Now if you ever see that kind of error after you've just changed something within the get well the capture

98
00:07:29.060 --> 00:07:38.060
state or restore state then that reason probably is that it is no longer able to use the old save file

99
00:07:38.120 --> 00:07:41.750
because you've changed something about how that save file is formatted now.

100
00:07:41.780 --> 00:07:48.200
So the simple solution to that is to just go ahead and delete the save file from whatever location it

101
00:07:48.200 --> 00:07:49.700
is now on Windows.

102
00:07:49.700 --> 00:07:51.410
This tends to be under the app data.

103
00:07:51.410 --> 00:07:55.310
Local low then the company name that you may have set up in your project and the project name.

104
00:07:55.670 --> 00:08:02.390
So I'm gonna go ahead and delete the save file and try that save one more time this time here s and

105
00:08:02.390 --> 00:08:08.570
there is no error it has gone ahead and saved all the positions that we have in the world to our save

106
00:08:08.570 --> 00:08:09.440
file.

107
00:08:09.440 --> 00:08:13.700
So the next step is to go ahead and restore those positions.

108
00:08:13.700 --> 00:08:20.480
So the way to restore the positions is to assume that the object we are getting passed in is the same

109
00:08:20.690 --> 00:08:24.510
type as the object that we passed out of capture state.

110
00:08:24.710 --> 00:08:28.280
Remember that we can do this because object is the parent class of all objects.

111
00:08:28.280 --> 00:08:34.730
Therefore state can contain any object but seeing as the compiler doesn't know that this object actually

112
00:08:34.730 --> 00:08:40.760
contains a serialized bool vector 3 we have to be explicit about that and take responsibility and this

113
00:08:40.820 --> 00:08:47.960
process is called casting casting is just the process of saying I've got an object but honestly I tell

114
00:08:47.960 --> 00:08:54.380
you compiler this object is a serialized bool vector 3 and so eliminates any other potential possibilities

115
00:08:54.380 --> 00:08:55.730
that that object could be.

116
00:08:55.730 --> 00:09:01.030
And then you're allowed to use methods on it as if it was a serialized vector 3.

117
00:09:01.040 --> 00:09:03.790
Now there are two main methods that we could be doing this.

118
00:09:03.800 --> 00:09:09.100
We will assume that we have got a state variable that is a type object.

119
00:09:09.140 --> 00:09:15.500
Now the first approach that we could take is this one where you essentially are assigning this into

120
00:09:15.500 --> 00:09:24.520
a new variable and the cast is this bit going on inside the brackets by putting the type that we want

121
00:09:24.520 --> 00:09:26.230
to cast to within the brackets.

122
00:09:26.230 --> 00:09:32.650
We are saying to the compiler that we are absolutely certain that there's variable state contains a

123
00:09:32.650 --> 00:09:40.210
serialized bool vector 3 and if it does not we're gonna get an exception thrown that says this wasn't

124
00:09:40.210 --> 00:09:45.160
the case state object contains something other than a serialized vets three and the code will not continue

125
00:09:45.160 --> 00:09:46.190
to run.

126
00:09:46.630 --> 00:09:50.560
The second option is to use this as key word.

127
00:09:50.560 --> 00:09:57.220
So we're saying state as serialize effect three and what happens here if state does not contain a serialized

128
00:09:57.220 --> 00:09:58.210
bool vector 3.

129
00:09:58.240 --> 00:09:59.110
Is it just returns.

130
00:09:59.110 --> 00:09:59.850
No.

131
00:09:59.860 --> 00:10:04.620
So the serialized bool vector 3 X is going to just contain null.

132
00:10:04.630 --> 00:10:10.240
And anything that we call on it afterwards is going to potentially cause an exception or we might choose

133
00:10:10.240 --> 00:10:15.940
to do an if statement and check whether it's null and a handle that case now because we are very sure

134
00:10:16.000 --> 00:10:23.310
that we've just returned a vector three from our capture state function.

135
00:10:23.350 --> 00:10:27.490
We're pretty sure that what's going to come back is a slow reliable vector 3 so I'm gonna go with the

136
00:10:27.490 --> 00:10:33.490
first option and if anything goes wrong and our assumption is incorrect we're gonna get an exception

137
00:10:33.520 --> 00:10:35.230
which is going to be hard for us to ignore.

138
00:10:35.230 --> 00:10:37.360
We're gonna have to go in and fix things.

139
00:10:37.360 --> 00:10:43.720
However if you ever have a case where you need to a cast and you're not sure whether the thing contains

140
00:10:43.730 --> 00:10:45.090
a serialized vector 3.

141
00:10:45.310 --> 00:10:51.700
By that I mean that there is a legitimate reason your program could contain a different thing in that

142
00:10:51.700 --> 00:10:57.580
variable then do go ahead and use the second option here where it turns now and then check that the

143
00:10:57.580 --> 00:11:00.340
thing you've got isn't null before continuing.

144
00:11:00.340 --> 00:11:07.090
So let's implement that first approach in code and so serialize of all back to three.

145
00:11:07.170 --> 00:11:10.980
It's going to be our position is equal to the state.

146
00:11:11.010 --> 00:11:13.500
Obviously it won't let us do that because state is of type object.

147
00:11:13.500 --> 00:11:19.080
So we need to do a cast which is basically just putting this type in brackets saying yes honest guv

148
00:11:19.350 --> 00:11:25.950
that object is a serialized ball vector 3 Now the reason we can't have that type in restore state is

149
00:11:25.950 --> 00:11:29.970
because then it would be different for every single I save a ball and it doesn't work that way.

150
00:11:30.000 --> 00:11:34.830
So that's not what we've got we've got a object here and we have to do the cast.

151
00:11:34.950 --> 00:11:40.140
So then we've got this C reliable vector three how do we turn it back into a vector three where we do

152
00:11:40.140 --> 00:11:48.090
a position dot get vector that is a method which is going to return the vector three out of the serialized

153
00:11:48.090 --> 00:11:57.490
Bill vector three and we can use that to set our transform dot position it's going to set the position

154
00:11:57.490 --> 00:12:00.170
back to where we were before we saved.

155
00:12:00.280 --> 00:12:02.940
Now this would pretty much work.

156
00:12:02.950 --> 00:12:04.130
90 percent of the time.

157
00:12:04.270 --> 00:12:09.010
But sometimes you get into weird conditions with the nav mesh agent.

158
00:12:09.040 --> 00:12:10.840
Now there are two solutions to that.

159
00:12:10.870 --> 00:12:19.250
If we go ahead and get the components get components nav mesh agent then we can see what methods it

160
00:12:19.250 --> 00:12:19.580
has.

161
00:12:20.090 --> 00:12:25.910
There is a method called move and that moves the nav mesh agents by an offset.

162
00:12:25.910 --> 00:12:30.350
Now that is one way that you could update the position but you would have to figure out where the agent

163
00:12:30.350 --> 00:12:34.340
currently is and figure out what the offset factor is that's definitely one option.

164
00:12:34.340 --> 00:12:39.740
Another option is that if you are changing the position and you don't want the NAV Finnish agent interfering

165
00:12:40.070 --> 00:12:43.330
just disable the nav mesh agent before you start.

166
00:12:43.360 --> 00:12:50.810
So enabled equals true I'm sorry is equal false on the now fresh agent that we update the transform

167
00:12:50.810 --> 00:12:56.210
position and after we finished updating the transform position we just re enable the our flash agent

168
00:12:56.210 --> 00:13:01.550
not just stops the nav mesh agent from meddling with our position while we're trying to change it that

169
00:13:01.550 --> 00:13:04.090
can cause problems and it has caused problems in the past.

170
00:13:04.090 --> 00:13:07.070
So I'm just going to avoid that altogether.

171
00:13:07.070 --> 00:13:10.360
So let's go ahead and try saving and restoring now.

172
00:13:10.400 --> 00:13:16.230
So I'm going to hit play going to move to a different location and hit save.

173
00:13:16.230 --> 00:13:22.700
Now I'm going to move to a different location again and hit load notice we go back to the location in

174
00:13:22.700 --> 00:13:25.490
which we say that is the safe system working.

175
00:13:25.520 --> 00:13:32.860
That is our eye saver Bill restore state and capture state doing its job so in this lecture we have

176
00:13:32.860 --> 00:13:38.920
seen how we can use the save a bill entity component to mark our different game objects as something

177
00:13:38.920 --> 00:13:42.970
that needs to be saved it gives them a unique identifier and things like that clever stuff.

178
00:13:43.120 --> 00:13:50.290
And additionally we have seen how we can use an eye saleable interface to mark components as saleable

179
00:13:50.350 --> 00:13:57.250
as well as how we can then pass data back and forth from these objects and the safe system now in the

180
00:13:57.250 --> 00:14:00.770
next lecture we're going to look at how we can do that again.

181
00:14:00.790 --> 00:14:04.710
But with the health system and that's going to be a challenge lecture for you see there.
