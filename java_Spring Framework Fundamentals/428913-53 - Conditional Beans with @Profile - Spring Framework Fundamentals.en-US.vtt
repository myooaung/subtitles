WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.570
So how do we total it then?

00:00:03.570 --> 00:00:04.670
Two had a production environment.

00:00:04.670 --> 00:00:04.970
Okay,

00:00:04.970 --> 00:00:06.890
so let's look at this config.

00:00:06.890 --> 00:00:08.360
Let's make a few tweaks.

00:00:08.360 --> 00:00:09.850
So if we re fact to this now,

00:00:09.850 --> 00:00:14.170
this is really a local conflict for local development.

00:00:14.170 --> 00:00:17.450
So let's just call it development conflict,

00:00:17.450 --> 00:00:18.060
for example,

00:00:18.060 --> 00:00:19.880
just to indicate the fact that we're gonna use this one,

00:00:19.880 --> 00:00:20.860
we're doing development,

00:00:20.860 --> 00:00:21.620
local development.

00:00:21.620 --> 00:00:23.310
And that's fine.

00:00:23.310 --> 00:00:23.830
Southern.

00:00:23.830 --> 00:00:24.600
Copy this.

00:00:24.600 --> 00:00:33.280
I know it's make a production one production conflict because we got also the things here

00:00:33.280 --> 00:00:34.220
which doing different things.

00:00:34.220 --> 00:00:35.990
Let's just keep things a bit tight,

00:00:35.990 --> 00:00:37.500
even just quit an extra package Now,

00:00:37.500 --> 00:00:39.250
just for the configuration.

00:00:39.250 --> 00:00:41.540
It's a config,

00:00:41.540 --> 00:00:47.600
and we just put these two configuration beans in here just to put them out of the way.

00:00:47.600 --> 00:00:49.150
It's a bit put it to me.

00:00:49.150 --> 00:00:53.420
So developing conflict on production come pick within change.

00:00:53.420 --> 00:00:56.200
This to only be enabled when it's in the production mode.

00:00:56.200 --> 00:00:57.290
So the profiles proud.

00:00:57.290 --> 00:00:59.750
It's gonna pick up the Prod Properties file,

00:00:59.750 --> 00:01:07.370
and then we need to have the properties file available to us in the class buff.

00:01:07.370 --> 00:01:12.100
So now maybe it's https for the production properties.

00:01:12.100 --> 00:01:13.600
PRD.

00:01:13.600 --> 00:01:17.380
What about my service no engine about UK.

00:01:17.380 --> 00:01:25.690
Maybe some random pull whatever whatever it might be anyway.

00:01:25.690 --> 00:01:32.520
So now if we go back to up and now if we check about you if we rerun,

00:01:32.520 --> 00:01:33.940
nothing should have nothing should have changed.

00:01:33.940 --> 00:01:36.620
Everything should still work because we're still passing in the local profile.

00:01:36.620 --> 00:01:39.470
So we should still see the local host message here,

00:01:39.470 --> 00:01:39.950
which we do.

00:01:39.950 --> 00:01:48.670
But then we change its approach on rerun control shift Our We see this error message here

00:01:48.670 --> 00:01:52.500
now specific Wanted to show you this because it's very easy when you're doing this to

00:01:52.500 --> 00:01:56.200
assume that beans are just gonna get picked up on the profile just gonna kick in.

00:01:56.200 --> 00:02:01.120
But you really have to go back to the source and to look how the annotation comfort,

00:02:01.120 --> 00:02:04.220
application concepts or any application context that you're using,

00:02:04.220 --> 00:02:05.980
how it's actually being set up.

00:02:05.980 --> 00:02:09.750
Is it being set up with all the configuration beans that requires or with all the

00:02:09.750 --> 00:02:11.270
application concepts that requires?

00:02:11.270 --> 00:02:12.530
So it's also important,

00:02:12.530 --> 00:02:12.960
for example,

00:02:12.960 --> 00:02:18.070
when you're module arising application context using the XML based configuration on In this

00:02:18.070 --> 00:02:18.280
case,

00:02:18.280 --> 00:02:20.850
we can see we've only got the development conflict,

00:02:20.850 --> 00:02:26.580
so because we don't have the production conflict and because the only conflict we have is

00:02:26.580 --> 00:02:31.170
only enabled when we have the local profile effectively.

00:02:31.170 --> 00:02:36.640
One that saying now with this is that there's no my service being which is being created,

00:02:36.640 --> 00:02:43.730
And that's because there was no configuration to switch on this component scanning because

00:02:43.730 --> 00:02:45.110
we went running in the local profile.

00:02:45.110 --> 00:02:50.750
So only to do to fix that is to basically add the production conflict as well.

00:02:50.750 --> 00:02:52.450
On you'll see here we just do command Peter,

00:02:52.450 --> 00:02:53.450
look at the parameter list.

00:02:53.450 --> 00:02:57.980
You can actually give of our rocks argument of many different component classes,

00:02:57.980 --> 00:03:00.450
so this will be included production one as well.

00:03:00.450 --> 00:03:02.960
Production config the class.

00:03:02.960 --> 00:03:06.210
So now when we re run,

00:03:06.210 --> 00:03:08.900
everything should be okay and I'll pick up the production profile.

00:03:08.900 --> 00:03:13.950
Why are in that production Conflict Bean and then inject the value into my service on value

00:03:13.950 --> 00:03:18.130
should be the production euro control shift are to run,

00:03:18.130 --> 00:03:21.420
and yet here you can see it's picked up the production numero zero.

00:03:21.420 --> 00:03:22.240
When she got this set up,

00:03:22.240 --> 00:03:27.430
it's literally as straightforward as just changing the property to the other profile Do you

00:03:27.430 --> 00:03:28.110
want to have on?

00:03:28.110 --> 00:03:28.730
And actually,

00:03:28.730 --> 00:03:32.090
it's just he was the property switch as well,

00:03:32.090 --> 00:03:32.770
While we're at it.

00:03:32.770 --> 00:03:36.030
So this is the production profile being used.

00:03:36.030 --> 00:03:44.000
Just go up to run configurations on Edit that and we just put minus t spring the profiles

00:03:44.000 --> 00:03:49.350
too active equals local does what you back into the local mud.

00:03:49.350 --> 00:03:52.810
And now if we run this,

00:03:52.810 --> 00:03:55.150
we should see this change to the local euro,

00:03:55.150 --> 00:03:56.140
which it does.

00:03:56.140 --> 00:03:58.780
And if you're wondering about the XML best configuration,

00:03:58.780 --> 00:03:59.950
you can also do this as well.

00:03:59.950 --> 00:04:03.830
There you can have profile enabled beans as well,

00:04:03.830 --> 00:04:06.690
so there's basically in the recall.

00:04:06.690 --> 00:04:09.700
We had the beans element on inside beans.

00:04:09.700 --> 00:04:13.870
We had the individual being declarations off the components of the being components,

00:04:13.870 --> 00:04:15.750
which we're gonna place into the spring container.

00:04:15.750 --> 00:04:17.990
We are just inside that beans elements.

00:04:17.990 --> 00:04:19.460
There's an extra attribute on.

00:04:19.460 --> 00:04:21.180
One of the attributes is called Profile.

00:04:21.180 --> 00:04:22.280
You could do beans.

00:04:22.280 --> 00:04:23.490
Profile equals,

00:04:23.490 --> 00:04:25.320
prod or profile equals local.

00:04:25.320 --> 00:04:29.620
And then it just make sure that all of the beans inside that beans declaration are only

00:04:29.620 --> 00:04:31.530
enabled under that specific profile,

00:04:31.530 --> 00:04:33.250
or when that active profiles present,

00:04:33.250 --> 00:04:35.550
you don't specify multiple profiles.

00:04:35.550 --> 00:04:36.660
You can also do that as well,

00:04:36.660 --> 00:04:39.770
and you just passing a comma separated list of the different profile names.

00:04:39.770 --> 00:04:40.910
It wouldn't make sense here,

00:04:40.910 --> 00:04:41.460
of course,

00:04:41.460 --> 00:04:43.670
because if we did local comma prod,

00:04:43.670 --> 00:04:44.450
for example,

00:04:44.450 --> 00:04:49.130
then it wouldn't know which one to resolve because we've got So we stopped Bischel here and

00:04:49.130 --> 00:04:50.210
we've got service snobbish.

00:04:50.210 --> 00:04:50.800
You're all there,

00:04:50.800 --> 00:04:53.000
so you don't want to have any ambiguity when you do this.

00:04:53.000 --> 00:04:55.830
But it's good for being able to layer profiles together,

00:04:55.830 --> 00:04:58.040
but they don't just have to be environment specific either.

00:04:58.040 --> 00:04:58.400
So,

00:04:58.400 --> 00:04:58.850
for example,

00:04:58.850 --> 00:05:02.540
supposing you had a court's scheduler which kicked off a shed,

00:05:02.540 --> 00:05:06.750
your job and you didn't want that to happen in the local development environment,

00:05:06.750 --> 00:05:08.610
you wanted it to happen in all other environments.

00:05:08.610 --> 00:05:11.880
Then you could basically specify a profile of not local.

00:05:11.880 --> 00:05:15.210
So an exclamation mark and then local or otherwise,

00:05:15.210 --> 00:05:18.380
you could have a common separate a list of all the profiles it would appear in.

00:05:18.380 --> 00:05:18.540
So,

00:05:18.540 --> 00:05:19.260
for example,

00:05:19.260 --> 00:05:21.860
test comma s I t come abroad for,

00:05:21.860 --> 00:05:22.470
for example,

00:05:22.470 --> 00:05:23.610
in the test environment,

00:05:23.610 --> 00:05:26.150
a system integration testing environment on the production environment,

00:05:26.150 --> 00:05:29.930
a very useful way of being able to conditionally in Stan,

00:05:29.930 --> 00:05:35.110
she ate beans and inject the environment specific properties that you require into the

00:05:35.110 --> 00:05:35.830
beans that you creating,

00:05:35.830 --> 00:05:37.570
it's probably spring application on.

00:05:37.570 --> 00:05:39.770
There's many different ways to slice and dice application properties,

00:05:39.770 --> 00:05:41.610
and spring gives you some really nice words.

00:05:41.610 --> 00:05:43.460
Have been able to do this with profiles.

00:05:43.460 --> 00:05:46.110
Been a really welcome addition to enable us to do things like this.

