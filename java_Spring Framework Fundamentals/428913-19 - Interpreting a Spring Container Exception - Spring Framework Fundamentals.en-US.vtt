WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.540
so the other thing we need to do now is to make sure that spring can use this constructor

00:00:06.540 --> 00:00:09.980
here to be ableto wire in the repository into the service.

00:00:09.980 --> 00:00:10.750
But before that,

00:00:10.750 --> 00:00:11.290
let's just run it.

00:00:11.290 --> 00:00:16.580
And they should see what happens if we just used the existing being definitions we've got

00:00:16.580 --> 00:00:16.930
here.

00:00:16.930 --> 00:00:21.290
And the key point here is the fact that the service being definition doesn't have the

00:00:21.290 --> 00:00:22.280
argument specified,

00:00:22.280 --> 00:00:23.790
which will inject in the repository.

00:00:23.790 --> 00:00:27.600
And so what spring is gonna try and do is it's gonna try and use the default constructor.

00:00:27.600 --> 00:00:31.570
But because you've put a constructor already in here,

00:00:31.570 --> 00:00:34.670
it means we don't have the default constructor anymore.

00:00:34.670 --> 00:00:35.900
So we'll get a never from spring.

00:00:35.900 --> 00:00:37.120
So they just have a look at what that is,

00:00:37.120 --> 00:00:39.060
just in case you ever encounter it.

00:00:39.060 --> 00:00:41.210
But if you run that with control,

00:00:41.210 --> 00:00:43.160
shift our again,

00:00:43.160 --> 00:00:47.530
you can see here Nobody for constructive found no such method exception on you might get

00:00:47.530 --> 00:00:50.190
these kind of issues as you're cutting up spring applications.

00:00:50.190 --> 00:00:50.750
Sochi,

00:00:50.750 --> 00:00:52.310
skilled in using spring,

00:00:52.310 --> 00:00:56.040
has been able to interpret these kind of exceptions and to figure out into what backwards

00:00:56.040 --> 00:00:59.840
from it to work out exactly what's wrong without the configuration or the way the beans are

00:00:59.840 --> 00:01:01.250
arranged on and stuff like that.

00:01:01.250 --> 00:01:02.500
They keep on about this,

00:01:02.500 --> 00:01:05.130
which is to show you that spring exceptions give you good detail,

00:01:05.130 --> 00:01:08.280
which enable you to troubleshoot and analyze what the actual core problem might be.

00:01:08.280 --> 00:01:10.000
So if you get exceptions like these,

00:01:10.000 --> 00:01:10.620
don't worry.

00:01:10.620 --> 00:01:11.460
Just analyze them,

00:01:11.460 --> 00:01:12.530
go back to the root cause,

00:01:12.530 --> 00:01:15.750
and you should be able to work out what's going on on the really gonna help you out in your

00:01:15.750 --> 00:01:16.350
spring journey.

