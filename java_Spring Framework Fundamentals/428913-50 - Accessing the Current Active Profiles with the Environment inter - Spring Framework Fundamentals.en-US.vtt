WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.620
So in this video,

00:00:02.620 --> 00:00:07.640
we're going to have a look at Profiles on profiles in spring are a way off being able to

00:00:07.640 --> 00:00:11.890
make the beans and the properties which are exposed in the spring container to make them

00:00:11.890 --> 00:00:12.740
dynamically driven,

00:00:12.740 --> 00:00:14.000
usually from an environment.

00:00:14.000 --> 00:00:14.520
So,

00:00:14.520 --> 00:00:15.040
for example,

00:00:15.040 --> 00:00:18.810
let's say you have an application on the application's gonna be deployed into,

00:00:18.810 --> 00:00:19.010
say,

00:00:19.010 --> 00:00:19.890
two different environments,

00:00:19.890 --> 00:00:21.050
local on production,

00:00:21.050 --> 00:00:21.490
that,

00:00:21.490 --> 00:00:24.750
in which case you might have to profiles which corresponds to those two different

00:00:24.750 --> 00:00:25.350
environments.

00:00:25.350 --> 00:00:28.050
The two different running or execution environments seem.

00:00:28.050 --> 00:00:30.250
I have a profile of local where the application,

00:00:30.250 --> 00:00:30.780
for example,

00:00:30.780 --> 00:00:34.480
might point to an in memory database so just hatched to and say,

00:00:34.480 --> 00:00:35.670
locally running Web service,

00:00:35.670 --> 00:00:39.310
which is exposing some rest FBI and then your production profile would correspond to the

00:00:39.310 --> 00:00:40.050
real database.

00:00:40.050 --> 00:00:41.060
Maybe that's Oracle,

00:00:41.060 --> 00:00:41.760
for example,

00:00:41.760 --> 00:00:44.040
in the days of this case for the gifts of the rest FBI,

00:00:44.040 --> 00:00:45.880
the production rest in Point Earl.

00:00:45.880 --> 00:00:47.550
So it might seem a bit abstract now,

00:00:47.550 --> 00:00:49.550
but you understand that by the time we finished this video,

00:00:49.550 --> 00:00:52.380
so they stopped first off the key property in spring,

00:00:52.380 --> 00:00:56.090
which gives us access to the profiles being used by the way you can have more than one

00:00:56.090 --> 00:00:59.910
profile essentially can aggregate properties and beans together on but for analysis come

00:00:59.910 --> 00:01:00.210
straight on.

00:01:00.210 --> 00:01:00.850
One profile,

00:01:00.850 --> 00:01:01.890
a single profile.

00:01:01.890 --> 00:01:03.930
So the main property inside Spring,

00:01:03.930 --> 00:01:04.710
which controls this,

00:01:04.710 --> 00:01:08.380
which gives us access to the so called active profiles which have been set is a property

00:01:08.380 --> 00:01:10.590
cold spring dot profiles too active.

00:01:10.590 --> 00:01:13.820
And we could get this by looking inside the environment Objects,

00:01:13.820 --> 00:01:15.650
which is available as part of the spring container.

00:01:15.650 --> 00:01:16.840
So to do that,

00:01:16.840 --> 00:01:20.730
we need to use the environment Aware interface to be able to grab the copy of the

00:01:20.730 --> 00:01:21.220
environment,

00:01:21.220 --> 00:01:22.390
and then we can have a look inside it.

00:01:22.390 --> 00:01:23.350
Let's do that now.

00:01:23.350 --> 00:01:28.930
So if I go over to the service and let's just remove this for now,

00:01:28.930 --> 00:01:43.790
that's from the previous demo on its implement environment away.

00:01:43.790 --> 00:01:45.710
And this is Springs callback interface,

00:01:45.710 --> 00:01:48.120
which gives us access to the environment held in the spring container.

00:01:48.120 --> 00:01:49.340
So it's really underlined now,

00:01:49.340 --> 00:01:51.210
so we need to implement the interface method.

00:01:51.210 --> 00:01:52.030
If you have a robbery,

00:01:52.030 --> 00:01:52.750
it that's what it will say,

00:01:52.750 --> 00:01:55.690
must be other declared abstract or implement struck method sets environment,

00:01:55.690 --> 00:01:56.620
which takes an environment.

00:01:56.620 --> 00:01:58.380
So that's how we get a reference to the environment.

00:01:58.380 --> 00:02:01.950
So let's do ultimate enter and implement methods,

00:02:01.950 --> 00:02:04.050
and that's the method we want to implement.

00:02:04.050 --> 00:02:05.780
I'm just 20 the import,

00:02:05.780 --> 00:02:08.980
and so you can see here in this method sets environment.

00:02:08.980 --> 00:02:11.230
We're past the spring environment here.

00:02:11.230 --> 00:02:23.450
So if we just make a field to hold that,

00:02:23.450 --> 00:02:27.500
then we can do this.

00:02:27.500 --> 00:02:29.450
The environment equals environment.

00:02:29.450 --> 00:02:33.570
You can also at auto wire in an environment as well as we've seen.

00:02:33.570 --> 00:02:36.650
It's just being like any other being that could be dependence injected in.

00:02:36.650 --> 00:02:37.700
But for now,

00:02:37.700 --> 00:02:41.000
we'll use the environment aware interface because it's nice to get a practice of the

00:02:41.000 --> 00:02:42.750
different ways of being able to do things in spring.

00:02:42.750 --> 00:02:47.850
So if we said a break point here just to make sure we actually capturing the environment,

00:02:47.850 --> 00:02:50.470
that we go back to APP control,

00:02:50.470 --> 00:02:51.740
shifty to debug,

00:02:51.740 --> 00:02:56.330
then you can see here when the break points it.

00:02:56.330 --> 00:03:04.810
We've got this environment here and you can see active profile zero and default profiles

00:03:04.810 --> 00:03:05.370
default.

00:03:05.370 --> 00:03:07.300
There's always a profile name of default,

00:03:07.300 --> 00:03:10.130
which has given in spring which you conduce to use.

00:03:10.130 --> 00:03:14.340
But we're interested in this active profiles which corresponds to the property string

00:03:14.340 --> 00:03:16.020
spring dot profiles to active,

00:03:16.020 --> 00:03:17.550
which will set the moment.

00:03:17.550 --> 00:03:21.860
So if we stop that on,

00:03:21.860 --> 00:03:25.440
Given the fact that we've captured this environment now into this variable here,

00:03:25.440 --> 00:03:27.250
it means that when we do the business logic,

00:03:27.250 --> 00:03:32.160
we can also print out what the exit profile is.

00:03:32.160 --> 00:03:46.520
So it's two profiles and it's this environment Don't get active profiles.

00:03:46.520 --> 00:03:49.150
This one here and you'll see this returns a string array.

00:03:49.150 --> 00:03:53.690
So we can basically go to this.

00:03:53.690 --> 00:04:00.970
I'm just gonna raise dot to string to make it print something a little bit nicer than what

00:04:00.970 --> 00:04:01.800
we usually get with string.

00:04:01.800 --> 00:04:04.980
Raise as enough We run this.

00:04:04.980 --> 00:04:09.990
We have control shift on.

00:04:09.990 --> 00:04:15.080
You can see here that currently we have no active profiles.

00:04:15.080 --> 00:04:17.380
That's why we have the empty square brackets.

