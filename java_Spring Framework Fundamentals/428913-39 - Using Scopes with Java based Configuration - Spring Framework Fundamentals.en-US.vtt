WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.150
now,

00:00:02.150 --> 00:00:03.410
you might also be wondering as well.

00:00:03.410 --> 00:00:04.050
At this point,

00:00:04.050 --> 00:00:05.650
we discussed Scops earlier on.

00:00:05.650 --> 00:00:08.350
We look to the singleton prototypes cops you might be asking.

00:00:08.350 --> 00:00:08.450
Well,

00:00:08.450 --> 00:00:10.220
what's the scope of the service now then?

00:00:10.220 --> 00:00:10.630
So,

00:00:10.630 --> 00:00:11.080
for example,

00:00:11.080 --> 00:00:12.890
if I call see ticks don't get being again.

00:00:12.890 --> 00:00:14.670
Do I get the same instance or no?

00:00:14.670 --> 00:00:16.880
So let's just have a look at them.

00:00:16.880 --> 00:00:19.790
If we copy this,

00:00:19.790 --> 00:00:25.510
we can lose this now we don't need that anymore and call service one service to and I've

00:00:25.510 --> 00:00:30.080
got two variables or two references to whatever the container gives me when we request my

00:00:30.080 --> 00:00:30.660
service.

00:00:30.660 --> 00:00:33.190
And if we control shifty Now,

00:00:33.190 --> 00:00:36.680
when we get the first service,

00:00:36.680 --> 00:00:40.460
we could see it is my service 15 73.

00:00:40.460 --> 00:00:42.510
And when we get the second service,

00:00:42.510 --> 00:00:44.940
it's also my service at 15 73.

00:00:44.940 --> 00:00:45.580
So in other words,

00:00:45.580 --> 00:00:47.030
it returns the same instance.

00:00:47.030 --> 00:00:50.110
So just because we're doing things programmatically with factory methods,

00:00:50.110 --> 00:00:53.020
nothing changes with respect to the sculpting and in fact as well.

00:00:53.020 --> 00:00:56.230
If we look inside service one and service to all,

00:00:56.230 --> 00:00:58.430
it's kind of obvious cuts of the same instance,

00:00:58.430 --> 00:01:00.550
they also have the same repository as well,

00:01:00.550 --> 00:01:02.190
but it's worth pointing out anyway,

00:01:02.190 --> 00:01:04.120
on if we did want to change the semantics,

00:01:04.120 --> 00:01:04.550
by the way,

00:01:04.550 --> 00:01:06.520
so we don't want to change the scope of the beans.

00:01:06.520 --> 00:01:07.160
We could do that,

00:01:07.160 --> 00:01:08.350
but in the reputation as well.

00:01:08.350 --> 00:01:10.700
So if we go into up conflict,

00:01:10.700 --> 00:01:12.390
which is the factor method to get the service?

00:01:12.390 --> 00:01:16.490
If we wanted to make sure that this is always going to give us a prototype sculpt instance

00:01:16.490 --> 00:01:16.490
,

00:01:16.490 --> 00:01:17.060
in other words,

00:01:17.060 --> 00:01:18.420
create one every time it's invoked.

00:01:18.420 --> 00:01:22.360
We could do that with an at scope annotation here.

00:01:22.360 --> 00:01:28.450
And then we just specify the scope to value equals prototype.

00:01:28.450 --> 00:01:30.010
Oh,

00:01:30.010 --> 00:01:32.430
you could make it more concisely,

00:01:32.430 --> 00:01:33.490
just prototype.

00:01:33.490 --> 00:01:35.250
So now if we go back to app,

00:01:35.250 --> 00:01:40.910
stop that Andi book again.

00:01:40.910 --> 00:01:44.830
Step over the first time we get my service at 15.

00:01:44.830 --> 00:01:49.030
76 in my repository of 15 70.

00:01:49.030 --> 00:01:50.650
But this time,

00:01:50.650 --> 00:01:53.000
when we get being a second time,

00:01:53.000 --> 00:01:57.810
we get a new instance so you can see we got my service of 15 79.

00:01:57.810 --> 00:02:02.060
So whereas before you had 15 76 that was got 15 79.

00:02:02.060 --> 00:02:03.340
However,

00:02:03.340 --> 00:02:06.930
because the repository bean itself as the default scope.

00:02:06.930 --> 00:02:10.710
So the scope of the repository bean is Singleton because we didnt explicitly give it a

00:02:10.710 --> 00:02:16.760
scope notice that we still get the same instance of the repository on that one instance of

00:02:16.760 --> 00:02:17.490
the repository.

00:02:17.490 --> 00:02:23.450
One singleton instance in the spring container is injected into the two separate instances

00:02:23.450 --> 00:02:24.200
of the service,

00:02:24.200 --> 00:02:25.390
which have prototype scope.

00:02:25.390 --> 00:02:29.340
So that's the basics of how Java configuration what's in the spring container with a look

00:02:29.340 --> 00:02:30.520
at the scalping aspects as well.

