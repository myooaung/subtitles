WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.160
So that's a look now at how we can use the Java based configuration for spring applications

00:00:06.160 --> 00:00:06.160
.

00:00:06.160 --> 00:00:06.920
So where,

00:00:06.920 --> 00:00:07.960
as we've seen before,

00:00:07.960 --> 00:00:08.920
the XML file,

00:00:08.920 --> 00:00:11.450
which tells spring which means to create and how to create them.

00:00:11.450 --> 00:00:13.550
But the Java based approach it's slightly different.

00:00:13.550 --> 00:00:20.320
So let's just have a look now in the APP conflict so up conflict is still gonna be the

00:00:20.320 --> 00:00:21.250
configuration class,

00:00:21.250 --> 00:00:22.480
which is passed on.

00:00:22.480 --> 00:00:25.690
We're still using this annotation conflict application context,

00:00:25.690 --> 00:00:28.140
the difference being instead of using components,

00:00:28.140 --> 00:00:32.420
going to scan a package for classes annotated with repository at service,

00:00:32.420 --> 00:00:34.020
that controller or more generically,

00:00:34.020 --> 00:00:34.770
component.

00:00:34.770 --> 00:00:35.820
Instead of doing that,

00:00:35.820 --> 00:00:39.720
we're gonna give factory methods for each bean inside the configuration class.

00:00:39.720 --> 00:00:42.450
So we'll just dig in here and you'll see what I mean.

00:00:42.450 --> 00:00:49.030
So if we turn this off so close of components getting tiny imports on now,

00:00:49.030 --> 00:00:49.390
obviously,

00:00:49.390 --> 00:00:50.630
if we run the application here,

00:00:50.630 --> 00:00:51.750
it's not gonna work.

00:00:51.750 --> 00:00:55.500
And here you can see there's no qualifying being of type condescension,

00:00:55.500 --> 00:00:58.150
that training that demos that my after my service available.

00:00:58.150 --> 00:00:59.310
And that's true.

00:00:59.310 --> 00:01:01.070
That's because we haven't done component scanning.

00:01:01.070 --> 00:01:02.650
We haven't got external wiring file,

00:01:02.650 --> 00:01:04.490
and we're gonna move to this Java based configuration.

00:01:04.490 --> 00:01:04.900
Instead,

00:01:04.900 --> 00:01:06.050
it's Let's do that now.

00:01:06.050 --> 00:01:14.390
So if we go into my service and we'll remove these annotations now so we're not doing auto

00:01:14.390 --> 00:01:14.950
wiring,

00:01:14.950 --> 00:01:18.490
that's all we're not doing.

00:01:18.490 --> 00:01:19.320
Also wiring on.

00:01:19.320 --> 00:01:21.310
We're not using the annotation based way anymore.

00:01:21.310 --> 00:01:24.010
So we're not letting spring decide for us to annotations on the classes,

00:01:24.010 --> 00:01:25.050
which means to pick up,

00:01:25.050 --> 00:01:28.700
get rid of the repository one as well.

00:01:28.700 --> 00:01:30.730
Instead,

00:01:30.730 --> 00:01:35.310
what we're doing is we're gonna have this app comfort class if it's have declared factory

00:01:35.310 --> 00:01:40.480
methods which the spring containable use took instances of the beans that we ask of it.

00:01:40.480 --> 00:01:42.900
So just to get a Rica when we go to the APP,

00:01:42.900 --> 00:01:48.100
then we're configuring an application context of us a spring container passing in this

00:01:48.100 --> 00:01:48.740
conflict,

00:01:48.740 --> 00:01:52.170
which we're gonna occurred up in a second and was still requesting to get the beans off of

00:01:52.170 --> 00:01:52.400
it.

00:01:52.400 --> 00:01:56.340
The only difference being the mechanism that springs going to use to get the beans is it's

00:01:56.340 --> 00:01:59.060
gonna call corresponding methods on the app conflict class.

00:01:59.060 --> 00:02:00.250
So let me show you what I mean.

00:02:00.250 --> 00:02:05.970
We're gonna put a method on here which returns an instance of my service and we can call

00:02:05.970 --> 00:02:07.540
this method anything we want to start us,

00:02:07.540 --> 00:02:08.450
they get service.

00:02:08.450 --> 00:02:11.280
So in here,

00:02:11.280 --> 00:02:14.750
we're gonna return new my service.

00:02:14.750 --> 00:02:18.300
And don't forget,

00:02:18.300 --> 00:02:20.010
this is expecting a repository now.

00:02:20.010 --> 00:02:21.650
So let's just put in the Lynn here for now.

00:02:21.650 --> 00:02:24.400
And next up,

00:02:24.400 --> 00:02:29.450
we're gonna have public my repository.

00:02:29.450 --> 00:02:30.790
How much is called it?

00:02:30.790 --> 00:02:36.850
Get repose a tree return you my repository.

00:02:36.850 --> 00:02:41.960
So let's consider this get repository Being first of all because this doesn't have any

00:02:41.960 --> 00:02:44.280
dependence is if you look into my repository,

00:02:44.280 --> 00:02:48.120
it doesn't need to have anything injected into it to exist.

00:02:48.120 --> 00:02:49.490
Selectors consider this.

00:02:49.490 --> 00:02:51.490
So going back to Apcom Fig,

00:02:51.490 --> 00:02:54.610
you can see here that the spring container it's gonna call,

00:02:54.610 --> 00:02:56.580
get repository on when that's called,

00:02:56.580 --> 00:02:58.510
it's gonna return this new my repository.

00:02:58.510 --> 00:02:59.470
So new instance of it.

00:02:59.470 --> 00:03:02.350
And that's because of the special annotation we're going to use,

00:03:02.350 --> 00:03:03.950
which is wrapping.

00:03:03.950 --> 00:03:06.450
So this goes on both of the methods.

00:03:06.450 --> 00:03:11.740
So what bean does is that it effectively sets us up as a factor method we've spring.

00:03:11.740 --> 00:03:12.480
So in other words,

00:03:12.480 --> 00:03:17.190
whenever bean is requested from the context with get bean than the specific type that's

00:03:17.190 --> 00:03:18.780
passed in so that that's the class.

00:03:18.780 --> 00:03:19.380
If we go back here,

00:03:19.380 --> 00:03:20.380
we can see it here.

00:03:20.380 --> 00:03:23.550
We could see my service dot class this time that's passed in here.

00:03:23.550 --> 00:03:29.550
If it matches any of the return types of a method whose returns if it matches,

00:03:29.550 --> 00:03:32.280
that's the one that's gonna be invoked to satisfy that dependency.

00:03:32.280 --> 00:03:34.140
So that's for a simple case of get repository,

00:03:34.140 --> 00:03:36.590
which is a simple being and doesn't have any dependencies itself.

00:03:36.590 --> 00:03:36.900
However,

00:03:36.900 --> 00:03:38.810
forget service the service,

00:03:38.810 --> 00:03:40.880
you'll recall that should requires the repository.

00:03:40.880 --> 00:03:42.590
So if you command P in here,

00:03:42.590 --> 00:03:44.390
you'll see it needs to have this repository,

00:03:44.390 --> 00:03:46.050
and this is where there's a bit of a difference.

00:03:46.050 --> 00:03:49.820
Instead of spring being able to do something at this point and automatically inject the

00:03:49.820 --> 00:03:51.100
dependency there instead,

00:03:51.100 --> 00:03:52.090
we do programmatically.

00:03:52.090 --> 00:03:54.980
So we need to get an instance of the repository programmatically,

00:03:54.980 --> 00:03:58.450
and how we do that is we just call the method like that.

00:03:58.450 --> 00:03:59.660
So nice,

00:03:59.660 --> 00:04:00.040
clean,

00:04:00.040 --> 00:04:00.740
very simple.

00:04:00.740 --> 00:04:01.500
Downside,

00:04:01.500 --> 00:04:02.250
though I must say,

00:04:02.250 --> 00:04:06.290
is the fact that you'll have these warnings from the idea saying that gets service is a

00:04:06.290 --> 00:04:07.450
method that's never used.

00:04:07.450 --> 00:04:08.500
And that's true.

00:04:08.500 --> 00:04:12.510
There's no method that's actually calling this method in the idea in terms of a coal

00:04:12.510 --> 00:04:13.080
hierarchy.

00:04:13.080 --> 00:04:13.280
So,

00:04:13.280 --> 00:04:13.790
for example,

00:04:13.790 --> 00:04:14.710
here get repository.

00:04:14.710 --> 00:04:16.500
If I get a call hierarchy with control,

00:04:16.500 --> 00:04:17.850
option and hitch,

00:04:17.850 --> 00:04:23.210
you can see this is called from Get service or APP conflict or get service calls up

00:04:23.210 --> 00:04:24.550
conflict Don't get repository,

00:04:24.550 --> 00:04:26.450
which is why it's not great out.

00:04:26.450 --> 00:04:27.780
Whereas this one,

00:04:27.780 --> 00:04:29.850
if I get a call hierarchy does nothing,

00:04:29.850 --> 00:04:30.700
nobody calls it.

00:04:30.700 --> 00:04:35.580
So that's just something to watch out for in case you're ever tempted to remove methods

00:04:35.580 --> 00:04:36.040
like that.

00:04:36.040 --> 00:04:36.490
But don't.

00:04:36.490 --> 00:04:36.870
If they're on it,

00:04:36.870 --> 00:04:40.700
it without being because they're gonna be used by the spring container to know if you go

00:04:40.700 --> 00:04:41.450
back to app,

00:04:41.450 --> 00:04:45.560
put a break point here again and then control shifty,

00:04:45.560 --> 00:04:47.460
we can see here,

00:04:47.460 --> 00:04:51.560
but we got a service on that service indeed has a repository,

00:04:51.560 --> 00:04:52.910
which is exactly what we expected.

00:04:52.910 --> 00:04:58.620
I'm just play that now and you can see it is the same thing as usual.

00:04:58.620 --> 00:05:00.900
So everything works as we expected from before

