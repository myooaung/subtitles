WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.220
now.

00:00:02.220 --> 00:00:03.010
In the previous video,

00:00:03.010 --> 00:00:04.320
we saw Singleton Scope,

00:00:04.320 --> 00:00:07.790
which is where we have one on the instance of a bean in the spring container.

00:00:07.790 --> 00:00:10.350
And that's what you the default scope in spring.

00:00:10.350 --> 00:00:12.510
But we can also have other scopes as well.

00:00:12.510 --> 00:00:13.610
And in fact,

00:00:13.610 --> 00:00:17.150
it's possible to change the scope to get a being back every time.

00:00:17.150 --> 00:00:17.600
In other words,

00:00:17.600 --> 00:00:19.910
to get a new instance every time you call get being on.

00:00:19.910 --> 00:00:21.450
That's a thing called prototype scope.

00:00:21.450 --> 00:00:25.590
Let's just stop the application now and then revisit the XML file.

00:00:25.590 --> 00:00:29.800
That's not in the target directory in the production source.

00:00:29.800 --> 00:00:30.750
Hman Resources Boulder.

00:00:30.750 --> 00:00:31.630
So if we look now,

00:00:31.630 --> 00:00:35.140
we've got this being the idea here for the bean on the class,

00:00:35.140 --> 00:00:37.170
which is creating If we do,

00:00:37.170 --> 00:00:40.190
a space will see that there are other suggestions which we can put in here now are the

00:00:40.190 --> 00:00:44.170
properties we can define on this being definition on one of the miss scope.

00:00:44.170 --> 00:00:49.250
So if we put sculpin here and so I prototype,

00:00:49.250 --> 00:00:51.250
then we'll see a different behavior now.

00:00:51.250 --> 00:00:56.720
So if we go back to the AP class and control shifty to debug,

00:00:56.720 --> 00:01:02.610
afraid to step over that line being one is now my service at 1500.

00:01:02.610 --> 00:01:05.460
Being too is now a different instance.

00:01:05.460 --> 00:01:09.740
So it's my service at 15 or two on being three the same thing again,

00:01:09.740 --> 00:01:11.760
a different instance of 15 or fall.

00:01:11.760 --> 00:01:16.620
Now what we're seeing here is that my service bean now has prototype scope,

00:01:16.620 --> 00:01:20.800
which basically means that every time a call to get being is made the spring containable,

00:01:20.800 --> 00:01:21.950
creating new instance of it.

00:01:21.950 --> 00:01:23.050
Okay,

00:01:23.050 --> 00:01:28.130
so the two main scopes in spring singleton scope means that there's only one instance off

00:01:28.130 --> 00:01:29.590
the bean inside the container.

00:01:29.590 --> 00:01:32.790
And that's the one instance that you're gonna get no matter how many times you call get

00:01:32.790 --> 00:01:33.120
being.

00:01:33.120 --> 00:01:34.850
That's what we started out by showing.

00:01:34.850 --> 00:01:36.820
And then we've got the prototype Scott one,

00:01:36.820 --> 00:01:39.650
which means there could be many instances living in the spring container.

00:01:39.650 --> 00:01:41.430
And every time we call get bean together.

00:01:41.430 --> 00:01:41.770
Bean.

00:01:41.770 --> 00:01:45.770
It's such a critic is a new instance of that being each time throughout the scopes to as

00:01:45.770 --> 00:01:46.130
well,

00:01:46.130 --> 00:01:48.540
which is more advanced than we want to go over here.

00:01:48.540 --> 00:01:48.690
But,

00:01:48.690 --> 00:01:49.080
for example,

00:01:49.080 --> 00:01:50.890
you've got the notion of a request sculpt bean.

00:01:50.890 --> 00:01:51.840
So in a Web app,

00:01:51.840 --> 00:01:52.470
for example,

00:01:52.470 --> 00:01:53.530
rather in a spring Web app.

00:01:53.530 --> 00:01:56.170
You can create a being which will have request scope,

00:01:56.170 --> 00:01:59.150
which means that every time a new hitch of DP request comes in,

00:01:59.150 --> 00:02:00.220
that beans created,

00:02:00.220 --> 00:02:00.710
you know,

00:02:00.710 --> 00:02:03.050
was it Has the lifetime of http request.

00:02:03.050 --> 00:02:04.860
It's really about different lifetimes.

00:02:04.860 --> 00:02:08.490
So singleton the lifetime of the entire application context.

00:02:08.490 --> 00:02:12.490
It's prototype the lifetime of Whenever you call it on request the lifetime of whenever

00:02:12.490 --> 00:02:13.840
hate your GP request comes in.

00:02:13.840 --> 00:02:14.550
Obviously,

00:02:14.550 --> 00:02:17.030
you have to take care with the semantics of this because,

00:02:17.030 --> 00:02:17.660
for example,

00:02:17.660 --> 00:02:20.850
if you have a singleton being on you in a Web application and you're accessing it from

00:02:20.850 --> 00:02:21.650
multiple threads,

00:02:21.650 --> 00:02:25.370
then take care to not have any state on that being or to synchronize state so that bean.

00:02:25.370 --> 00:02:25.690
Otherwise,

00:02:25.690 --> 00:02:26.900
you can have thread safety issues.

00:02:26.900 --> 00:02:27.460
But again,

00:02:27.460 --> 00:02:28.820
that's outside the topic of this course,

00:02:28.820 --> 00:02:31.160
but just something to watch out for another thing as well.

00:02:31.160 --> 00:02:31.610
For example,

00:02:31.610 --> 00:02:34.530
if you have prototype scope beans on your inner loop on you calling,

00:02:34.530 --> 00:02:35.800
get bean in a loop that,

00:02:35.800 --> 00:02:36.260
for example,

00:02:36.260 --> 00:02:38.210
goes around about 10,000 times or something.

00:02:38.210 --> 00:02:40.640
Then you get over into prepping 10,000 being instances,

00:02:40.640 --> 00:02:44.250
which is not gonna do great for resource consumption of your application and garbage

00:02:44.250 --> 00:02:44.540
collection.

00:02:44.540 --> 00:02:45.310
In that kind of stuff,

00:02:45.310 --> 00:02:47.780
begin a bit off topic and outside the scope of this course.

00:02:47.780 --> 00:02:49.870
But just be aware off the different scopes in spring.

00:02:49.870 --> 00:02:52.500
So the singleton scope is the default on further scopes.

00:02:52.500 --> 00:02:53.630
You can put them in with the scope,

00:02:53.630 --> 00:02:56.050
contribute by the way as well.

00:02:56.050 --> 00:02:59.910
It is possible to go back to application context.

00:02:59.910 --> 00:03:02.670
XML on explicitly make this singleton.

00:03:02.670 --> 00:03:05.370
It is very obvious to the developer or to anybody who looks at the code.

00:03:05.370 --> 00:03:06.300
It's a knife.

00:03:06.300 --> 00:03:12.060
I goto app control shift D two d book and sit through these.

00:03:12.060 --> 00:03:16.470
You can see we still have the singleton behavior we had before.

00:03:16.470 --> 00:03:19.930
But it's just that this time we've made it very explicit because we've actually physically

00:03:19.930 --> 00:03:20.150
put it.

00:03:20.150 --> 00:03:22.590
There is a singleton and express the scope explicitly.

00:03:22.590 --> 00:03:23.190
Anyway.

00:03:23.190 --> 00:03:26.000
That's a brief introduction to how scopes are in the spring container.

00:03:26.000 --> 00:03:26.740
So let's move on

