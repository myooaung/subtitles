WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.020
it's in the previous video.

00:00:03.020 --> 00:00:03.890
We gotta being instance,

00:00:03.890 --> 00:00:04.700
creation exception.

00:00:04.700 --> 00:00:07.900
And that's because we didn't supply the arguments to the constructor,

00:00:07.900 --> 00:00:09.650
which to be needed in its constructed call.

00:00:09.650 --> 00:00:13.580
So let's fix this up now and show how we can modify the external configuration to

00:00:13.580 --> 00:00:14.010
dependency.

00:00:14.010 --> 00:00:16.190
Inject the repository which have service being needs.

00:00:16.190 --> 00:00:20.450
So if we go back to the external being configuration,

00:00:20.450 --> 00:00:24.440
give a bit of breathing room here even close to being tag.

00:00:24.440 --> 00:00:29.600
So whereas the repository element before was just closed a self closing element because we

00:00:29.600 --> 00:00:33.190
didn't need it to take any parameters to be able to construct an instance of that being

00:00:33.190 --> 00:00:35.960
here in the service being definition,

00:00:35.960 --> 00:00:38.440
we need to tell spring how we want to dependence.

00:00:38.440 --> 00:00:42.840
Inject the repository into the service class on how we're gonna do it is we're gonna use

00:00:42.840 --> 00:00:45.460
the constructor that we've just created.

00:00:45.460 --> 00:00:49.960
And this is not as constructor dependency injection the two types of dependency injection

00:00:49.960 --> 00:00:51.590
that's constructed dependency injection,

00:00:51.590 --> 00:00:53.930
which uses the constructor method we've just seen.

00:00:53.930 --> 00:01:03.560
So that's where you have the constructor in the bean class which is taking its dependencies

00:01:03.560 --> 00:01:03.560
,

00:01:03.560 --> 00:01:05.960
which you want to have injected him.

00:01:05.960 --> 00:01:08.700
That's constructor injection and there's another style as well,

00:01:08.700 --> 00:01:09.600
which will cover shortly,

00:01:09.600 --> 00:01:11.150
which is set a dependency.

00:01:11.150 --> 00:01:12.810
Injection will see that a little bit,

00:01:12.810 --> 00:01:13.560
but first of all,

00:01:13.560 --> 00:01:16.010
it's to get this constructivist injection up and running.

00:01:16.010 --> 00:01:19.750
So go back to the excellent configuration.

00:01:19.750 --> 00:01:25.750
How could simply do ref equals and then give it the being them?

00:01:25.750 --> 00:01:28.310
So repository.

00:01:28.310 --> 00:01:33.660
So no over on this control,

00:01:33.660 --> 00:01:34.280
she'd run,

00:01:34.280 --> 00:01:36.670
You'll see.

00:01:36.670 --> 00:01:37.350
That's fine.

00:01:37.350 --> 00:01:40.130
And to go back and just have a look at what we've done,

00:01:40.130 --> 00:01:43.550
what we're doing here is we're basically defining the repository bean,

00:01:43.550 --> 00:01:44.980
which doesn't take any arguments.

00:01:44.980 --> 00:01:49.090
You could just instantly it that from the default constructor that just creates air being

00:01:49.090 --> 00:01:53.050
like we've seen before in the previous video of them are creating a service being.

00:01:53.050 --> 00:01:59.020
And then we're supplying arguments for the constructor because we only have one argument.

00:01:59.020 --> 00:02:01.110
We don't have to specify any index or anything,

00:02:01.110 --> 00:02:05.000
or give any information matching up the argument names to the actual things that passing in

00:02:05.000 --> 00:02:05.000
.

00:02:05.000 --> 00:02:09.370
So this is like a one argument constructor on where we're using ref.

00:02:09.370 --> 00:02:12.210
What ref is doing is it's allowing us to reference.

00:02:12.210 --> 00:02:13.610
Have bean in the spring container,

00:02:13.610 --> 00:02:15.350
which is bound under the I d.

00:02:15.350 --> 00:02:17.220
So the idea here is repository.

00:02:17.220 --> 00:02:20.690
And since this is the repository being here bound under that I d.

00:02:20.690 --> 00:02:26.030
That's effectively taking this being here and injecting it into this service class here.

