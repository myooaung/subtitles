WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.690
So in this video,

00:00:02.690 --> 00:00:04.920
let's get to know the application concepts a little bit better.

00:00:04.920 --> 00:00:06.350
So we go into app.

00:00:06.350 --> 00:00:13.310
We know now that we can bring in this application context interface.

00:00:13.310 --> 00:00:15.730
Let's just call it CTX.

00:00:15.730 --> 00:00:19.010
Let's just declare a variable of it for now without instead saying it.

00:00:19.010 --> 00:00:20.050
I just have a quick look.

00:00:20.050 --> 00:00:22.540
So application context.

00:00:22.540 --> 00:00:25.730
This is the men interface for the spring framework.

00:00:25.730 --> 00:00:27.860
It's basically the spring container itself,

00:00:27.860 --> 00:00:29.180
at least the interface for it,

00:00:29.180 --> 00:00:29.510
brother.

00:00:29.510 --> 00:00:31.930
They're actually different implementations of this,

00:00:31.930 --> 00:00:34.110
though If we do control hitch,

00:00:34.110 --> 00:00:35.580
we can get up a type hierarchy,

00:00:35.580 --> 00:00:38.490
which shows us the different types which extend from this,

00:00:38.490 --> 00:00:38.860
in other words,

00:00:38.860 --> 00:00:42.450
that sub classes which of both part the framework and also the actual ones we can use.

00:00:42.450 --> 00:00:44.300
So we just expand this.

00:00:44.300 --> 00:00:46.350
We can expand all with this icon here.

00:00:46.350 --> 00:00:49.350
I just scroll this out a little bit,

00:00:49.350 --> 00:00:54.610
so this is basically a kind of deep dive into the actual application context which are

00:00:54.610 --> 00:00:59.370
available so the ones in general that we use are creating spring applications are the ones

00:00:59.370 --> 00:00:59.940
at the very,

00:00:59.940 --> 00:01:01.260
very bottom of the tree.

00:01:01.260 --> 00:01:01.950
But in other words,

00:01:01.950 --> 00:01:03.090
the deepest sub classes.

00:01:03.090 --> 00:01:03.690
So here.

00:01:03.690 --> 00:01:04.640
You've just got the interface,

00:01:04.640 --> 00:01:06.030
which is an application context.

00:01:06.030 --> 00:01:08.150
And then you've got some refinements of that.

00:01:08.150 --> 00:01:14.180
And then you basically have two key hierarchies here which deliver three very important

00:01:14.180 --> 00:01:14.780
classes which,

00:01:14.780 --> 00:01:15.190
in general,

00:01:15.190 --> 00:01:18.930
use on those are either file system XML application context,

00:01:18.930 --> 00:01:19.870
class path,

00:01:19.870 --> 00:01:22.860
XML application context on annotation,

00:01:22.860 --> 00:01:24.320
conflict application context.

00:01:24.320 --> 00:01:25.780
There are other ones as well,

00:01:25.780 --> 00:01:27.930
but we're not going to delve into those in this course.

00:01:27.930 --> 00:01:32.440
But these three application contexts of the men implementations that you want to instead

00:01:32.440 --> 00:01:34.960
shit to be able to create the spring container.

00:01:34.960 --> 00:01:38.550
The difference between these are effectively,

00:01:38.550 --> 00:01:39.160
ah,

00:01:39.160 --> 00:01:44.440
file system XML application context will basically load a configuration file,

00:01:44.440 --> 00:01:49.270
which describes the components so called beans that you're placing into the spring run.

00:01:49.270 --> 00:01:50.550
So I'm on the file system.

00:01:50.550 --> 00:01:54.210
There's also a class path external application context,

00:01:54.210 --> 00:01:56.220
which does exactly the same thing.

00:01:56.220 --> 00:01:59.440
It's just instead of getting it from the file system as a file reference,

00:01:59.440 --> 00:02:02.170
they will get it from someone in the class path on.

00:02:02.170 --> 00:02:02.510
Finally,

00:02:02.510 --> 00:02:07.800
we've got the annotation conflict application context on what this does is instead of the

00:02:07.800 --> 00:02:13.290
configuration for the components replacing into the spring run time being defined in a file

00:02:13.290 --> 00:02:14.760
in XML former,

00:02:14.760 --> 00:02:15.810
which will see shortly.

00:02:15.810 --> 00:02:16.560
Instead of that,

00:02:16.560 --> 00:02:21.380
you can also do an alternative way off expressing how those components go into the spring.

00:02:21.380 --> 00:02:22.180
Runtime on.

00:02:22.180 --> 00:02:23.410
That's true annotations.

00:02:23.410 --> 00:02:25.450
So you've got two main options in spring.

00:02:25.450 --> 00:02:29.990
You can either use an XML file to configure the spring framework on the components that

00:02:29.990 --> 00:02:32.120
your application is composed off all.

00:02:32.120 --> 00:02:33.850
You can do it with annotations on.

00:02:33.850 --> 00:02:36.860
We'll see both in this course and will dig into the external one first.

00:02:36.860 --> 00:02:37.690
We'll do that shortly,

00:02:37.690 --> 00:02:38.860
but before we do,

00:02:38.860 --> 00:02:40.200
it's just close those down.

00:02:40.200 --> 00:02:42.750
Just put that back over here,

00:02:42.750 --> 00:02:44.030
get rid of it,

00:02:44.030 --> 00:02:44.550
in fact,

00:02:44.550 --> 00:02:48.360
and close us down to do a bit of tidy up.

00:02:48.360 --> 00:02:51.780
So that was the hierarchy for application context.

00:02:51.780 --> 00:02:55.540
But let's have a look at the interface itself and see what kind of stuff were having their

00:02:55.540 --> 00:02:56.300
because,

00:02:56.300 --> 00:02:56.600
as I say,

00:02:56.600 --> 00:02:59.100
it's the main hook into the spring framework itself.

00:02:59.100 --> 00:03:00.940
So it will do is go to suspend a couple minutes,

00:03:00.940 --> 00:03:04.940
having looking exactly what's in there to get a kind of a feel for what springs giving us.

00:03:04.940 --> 00:03:07.600
So if we click into this,

00:03:07.600 --> 00:03:11.980
we'll see a D compiled version of what's in there.

00:03:11.980 --> 00:03:13.680
So she was able to have Intel.

00:03:13.680 --> 00:03:14.140
Ajay,

00:03:14.140 --> 00:03:14.990
do the decomp.

00:03:14.990 --> 00:03:16.720
I'll for you to be able to have a look inside,

00:03:16.720 --> 00:03:17.780
but let's go one step further.

00:03:17.780 --> 00:03:19.850
Let's actually use the rial sources themselves.

00:03:19.850 --> 00:03:23.290
So if we go across to Melvin on,

00:03:23.290 --> 00:03:24.700
if we go to dependence is here,

00:03:24.700 --> 00:03:27.060
we can see the dependencies that have been pulled in.

00:03:27.060 --> 00:03:30.050
If you just right click there on,

00:03:30.050 --> 00:03:31.350
go to download sources.

00:03:31.350 --> 00:03:36.450
You see it's downloading the sources now and we'll get rid of this.

00:03:36.450 --> 00:03:41.660
And so here we have the actual source code for the 5 to 7 release off the application

00:03:41.660 --> 00:03:42.010
contacts,

00:03:42.010 --> 00:03:43.850
interface and what's nice about this as well,

00:03:43.850 --> 00:03:44.720
because it has the job,

00:03:44.720 --> 00:03:45.640
Doc is.

00:03:45.640 --> 00:03:47.650
If you just press F one,

00:03:47.650 --> 00:03:50.680
then you'll also see as well that you get the job Market ended as well,

00:03:50.680 --> 00:03:51.610
which is pretty useful.

00:03:51.610 --> 00:03:53.950
That's really good when you're starting out with the framework.

00:03:53.950 --> 00:03:54.290
Or indeed,

00:03:54.290 --> 00:03:56.330
if you're using a framework for quite a while anyway,

00:03:56.330 --> 00:03:59.440
it's always good to be able to have that documentation at your fingertips.

00:03:59.440 --> 00:04:02.170
F one Though we've downloaded the sources,

00:04:02.170 --> 00:04:05.090
gives you the documentation on all this is link Avila's well.

00:04:05.090 --> 00:04:05.480
So,

00:04:05.480 --> 00:04:06.000
for example,

00:04:06.000 --> 00:04:08.070
if we jump into environment capable,

00:04:08.070 --> 00:04:09.900
we can see here.

00:04:09.900 --> 00:04:11.150
Sometimes you have to extend that.

00:04:11.150 --> 00:04:12.660
You can see here the job,

00:04:12.660 --> 00:04:14.660
look for environment capable on that kind of thing.

00:04:14.660 --> 00:04:15.240
So yeah,

00:04:15.240 --> 00:04:15.830
useful?

00:04:15.830 --> 00:04:16.660
Um,

00:04:16.660 --> 00:04:17.570
we'll just have a look at the code,

00:04:17.570 --> 00:04:20.070
though itself so application context.

00:04:20.070 --> 00:04:23.250
You can see it actually extends six other interfaces.

00:04:23.250 --> 00:04:27.250
So what springs done is it's basically split down the different facets,

00:04:27.250 --> 00:04:31.610
or functionalities of an application context on define them into discrete interfaces where

00:04:31.610 --> 00:04:34.500
each one handles a particular feature of the container.

00:04:34.500 --> 00:04:35.000
So,

00:04:35.000 --> 00:04:35.470
for example,

00:04:35.470 --> 00:04:38.150
in environment capable If we click into here,

00:04:38.150 --> 00:04:42.670
then we can see this is returning an environment on an environment basically in spring is a

00:04:42.670 --> 00:04:45.000
collection of properties on profiles,

00:04:45.000 --> 00:04:46.640
so we'll come to this later in the course.

00:04:46.640 --> 00:04:50.420
But your spring application can have properties which are passed in either through,

00:04:50.420 --> 00:04:51.100
for example,

00:04:51.100 --> 00:04:54.420
environment variables or system properties with a minus T switch.

00:04:54.420 --> 00:04:56.140
When you launch the JBM daughter,

00:04:56.140 --> 00:05:00.050
an application properties file that kind of thing so spring is in the mechanism of being

00:05:00.050 --> 00:05:03.060
able to inject those properties into your application for use.

00:05:03.060 --> 00:05:05.890
I also gives you this idea off profiles.

00:05:05.890 --> 00:05:07.420
So a profile.

00:05:07.420 --> 00:05:09.000
We weren't going too much detail here,

00:05:09.000 --> 00:05:09.870
but a profile,

00:05:09.870 --> 00:05:14.670
basically is an environment specific configuration off how you want the spring application

00:05:14.670 --> 00:05:15.100
to run.

00:05:15.100 --> 00:05:17.090
It's normally aligned with environments.

00:05:17.090 --> 00:05:17.570
So,

00:05:17.570 --> 00:05:17.980
for example,

00:05:17.980 --> 00:05:19.560
you could have a production profile,

00:05:19.560 --> 00:05:24.160
which connects to an Oracle database with the production Julie BC Properties to connect to

00:05:24.160 --> 00:05:24.860
the database.

00:05:24.860 --> 00:05:26.950
And you could also have a test profile,

00:05:26.950 --> 00:05:28.620
which connects to an Oracle database,

00:05:28.620 --> 00:05:30.670
which is a test instance of a test environment.

00:05:30.670 --> 00:05:31.430
You could even have,

00:05:31.430 --> 00:05:32.100
for example,

00:05:32.100 --> 00:05:33.080
a local profile,

00:05:33.080 --> 00:05:37.640
which maybe it's just used for your local development on that might use hitch to in memory

00:05:37.640 --> 00:05:38.080
database,

00:05:38.080 --> 00:05:38.680
for example.

00:05:38.680 --> 00:05:39.620
Ultimately,

00:05:39.620 --> 00:05:40.590
the application itself,

00:05:40.590 --> 00:05:44.510
in this case would require some kind of database to do whatever queries it needs to do.

00:05:44.510 --> 00:05:49.770
The difference being is that a profile enables us to dynamically inject different factory

00:05:49.770 --> 00:05:52.470
for accessing those environment specific date of its connections.

00:05:52.470 --> 00:05:53.320
Through this profiles,

00:05:53.320 --> 00:05:53.850
mechanism,

00:05:53.850 --> 00:05:58.450
set properties and profiles a very important and powerful aspect of spring.

00:05:58.450 --> 00:06:01.770
So let's get rid of those that's environment capable.

00:06:01.770 --> 00:06:03.590
We've also got listenable being factory,

00:06:03.590 --> 00:06:07.100
so basically this extends being factory,

00:06:07.100 --> 00:06:10.060
so an application concept is a being factory on.

00:06:10.060 --> 00:06:13.700
All this means is that it provides an FBI to be able to access the beans.

00:06:13.700 --> 00:06:18.220
Which of the components your application is comprised off to get them from the application

00:06:18.220 --> 00:06:18.850
context?

00:06:18.850 --> 00:06:19.510
Seven.

00:06:19.510 --> 00:06:21.700
Commanders 12 You can see a snapshot of the methods here,

00:06:21.700 --> 00:06:23.340
which is probably easier than scrolling down.

00:06:23.340 --> 00:06:26.430
You can see here we've got various methods and the men one there,

00:06:26.430 --> 00:06:28.220
which is pretty prominent if you go down,

00:06:28.220 --> 00:06:30.750
are these get bean methods here?

00:06:30.750 --> 00:06:34.200
Serbian factory is something that enables us to get a being,

00:06:34.200 --> 00:06:37.390
and we can get it being either bypassing the class,

00:06:37.390 --> 00:06:41.340
which is effectively the type of the bean that's defined inside this application context.

00:06:41.340 --> 00:06:46.120
It's basically a registry of all the beans in your application or weaken passing a string,

00:06:46.120 --> 00:06:47.950
which is the idea of the being itself.

00:06:47.950 --> 00:06:50.530
The game will get to this later,

00:06:50.530 --> 00:06:55.330
but that's what being a factory is going back to listenable being factory.

00:06:55.330 --> 00:06:59.960
All that's doing is that saying that we can access all of the beans on all the beans are in

00:06:59.960 --> 00:07:00.410
the list.

00:07:00.410 --> 00:07:02.710
You can see here that'll string array return types,

00:07:02.710 --> 00:07:07.250
so let's get rid of those.

00:07:07.250 --> 00:07:09.000
So That's a very forgivable,

00:07:09.000 --> 00:07:13.610
investable bean factory hierarchical bean factory outside the scope of this course.

00:07:13.610 --> 00:07:15.430
But basically you can have,

00:07:15.430 --> 00:07:15.610
ah,

00:07:15.610 --> 00:07:16.330
hierarchy,

00:07:16.330 --> 00:07:17.820
and that's to do with sculpting.

00:07:17.820 --> 00:07:19.980
We welcome in this course because it's an advanced feature.

00:07:19.980 --> 00:07:24.750
But Spring also supports a notion of parent child relationships between being factories.

00:07:24.750 --> 00:07:30.500
We've got message source so message sources to do with internationalization.

00:07:30.500 --> 00:07:31.950
You might come across this acronym,

00:07:31.950 --> 00:07:36.940
and it's an internationalization I 18 n where the 18 is just the number of letters between

00:07:36.940 --> 00:07:38.790
iron in in the world internationalization.

00:07:38.790 --> 00:07:44.250
But this is basically about retrieving messages under a given message key on resolving them

00:07:44.250 --> 00:07:45.750
against a specific locale.

00:07:45.750 --> 00:07:50.730
So that enables you to international Asia replication whereby you can give the output

00:07:50.730 --> 00:07:54.680
messages or promise to the user or even the labels you put on Web elements.

00:07:54.680 --> 00:07:55.640
If you doing a Web application,

00:07:55.640 --> 00:07:56.290
for example,

00:07:56.290 --> 00:07:59.260
will enable you to do those two men of those in different languages,

00:07:59.260 --> 00:08:01.430
so in French or Spanish or Arabic,

00:08:01.430 --> 00:08:04.480
it even SportsCenter's well with right to left all that kind of stuff.

00:08:04.480 --> 00:08:05.450
That's what that's about.

00:08:05.450 --> 00:08:06.510
The message source.

00:08:06.510 --> 00:08:13.910
We've got application event publisher next on this basically is describing the fact of the

00:08:13.910 --> 00:08:15.790
application context of the spring container.

00:08:15.790 --> 00:08:27.730
If you will come publish our events an example of an application event we got to hear again

00:08:27.730 --> 00:08:30.700
get hierarchy off this interface again.

00:08:30.700 --> 00:08:33.310
Spring always different things and inter vs at the top level,

00:08:33.310 --> 00:08:34.520
which is the best way to do things.

00:08:34.520 --> 00:08:36.660
Then we'll have actual concrete sub classes,

00:08:36.660 --> 00:08:38.460
which are used for different purposes.

00:08:38.460 --> 00:08:39.920
But if we expand all here,

00:08:39.920 --> 00:08:45.130
you can see that we've got some useful events here which the spring container can emit to

00:08:45.130 --> 00:08:46.750
signal the life cycle of the context.

00:08:46.750 --> 00:08:47.670
So,

00:08:47.670 --> 00:08:48.130
for example,

00:08:48.130 --> 00:08:51.250
when the context itself has started or whether it's being refreshed,

00:08:51.250 --> 00:08:53.950
that means it's rebuilding off the being definitions,

00:08:53.950 --> 00:08:56.650
which will see that kind of thing on also as well.

00:08:56.650 --> 00:09:01.070
This gives you the application developer an opportunity to create your own events on admit

00:09:01.070 --> 00:09:02.390
those right your application as well.

00:09:02.390 --> 00:09:03.750
He was in the spring event from work,

00:09:03.750 --> 00:09:05.760
So those are the events there.

00:09:05.760 --> 00:09:07.210
Let's get rid of that.

00:09:07.210 --> 00:09:10.880
And then finally we've got resource pattern is over,

00:09:10.880 --> 00:09:14.030
and this is basically hooked into the resources of the framework.

00:09:14.030 --> 00:09:16.280
So if we're going to the divers,

00:09:16.280 --> 00:09:16.750
extends,

00:09:16.750 --> 00:09:21.170
which is resource loader on do command of 12 there to get a list of the methods you can see

00:09:21.170 --> 00:09:24.420
here that is basically about getting access to resources in an application.

00:09:24.420 --> 00:09:28.650
So spring makes it easy to be able to grab different types of resources.

00:09:28.650 --> 00:09:32.900
So those resources might be files on a file system files on the class path,

00:09:32.900 --> 00:09:34.830
but also spots relative references as well,

00:09:34.830 --> 00:09:36.520
while can matching in that kind of thing.

00:09:36.520 --> 00:09:37.010
Basically,

00:09:37.010 --> 00:09:38.330
whenever you need to load resources,

00:09:38.330 --> 00:09:40.710
the spring resorts of the framework will be there for you.

00:09:40.710 --> 00:09:42.950
I'm gonna help telling that it's really useful.

00:09:42.950 --> 00:09:45.020
So those are all the interfaces,

00:09:45.020 --> 00:09:47.870
which contribute different features to the application context.

00:09:47.870 --> 00:09:53.830
Would you command of 12 there and do it again to get inherited members you can actually see

00:09:53.830 --> 00:09:54.220
then?

00:09:54.220 --> 00:09:58.810
This is a super set of all the methods which are available in the application context on

00:09:58.810 --> 00:09:59.950
does actually quite a bit there.

00:09:59.950 --> 00:10:01.340
But as you can imagine,

00:10:01.340 --> 00:10:02.130
there's a lot to learn,

00:10:02.130 --> 00:10:03.250
and it might seem daunting,

00:10:03.250 --> 00:10:04.030
but it really isn't.

00:10:04.030 --> 00:10:04.940
There's a lot of stuff there,

00:10:04.940 --> 00:10:06.970
but once you get used to how spring works and everything,

00:10:06.970 --> 00:10:09.760
then you'll find it's quite straightforward to work with and If anything,

00:10:09.760 --> 00:10:11.850
it's more declarative than problematic.

00:10:11.850 --> 00:10:14.460
So you don't end up having to delve into these methods anyway,

00:10:14.460 --> 00:10:17.830
because most spring applications these there's annotation driven from the configuration

00:10:17.830 --> 00:10:18.300
point of view,

00:10:18.300 --> 00:10:20.370
just using the job annotations that spring gives us.

00:10:20.370 --> 00:10:22.980
But never this is useful to see what's in the application.

00:10:22.980 --> 00:10:23.700
Contact this thing.

00:10:23.700 --> 00:10:24.780
We know what we're dealing with,

00:10:24.780 --> 00:10:26.240
and we know what's really under the hood.

00:10:26.240 --> 00:10:29.730
So there is the spring application context in all its glory,

00:10:29.730 --> 00:10:30.330
so let's move on.

