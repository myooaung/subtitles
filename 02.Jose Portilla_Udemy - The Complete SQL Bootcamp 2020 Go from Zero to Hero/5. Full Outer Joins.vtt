WEBVTT
1
00:00:05.470 --> 00:00:11.810
Welcome everyone to the series of lectures on outer joins so as I mentioned there's a few different

2
00:00:11.810 --> 00:00:12.740
types of joints.

3
00:00:12.740 --> 00:00:17.750
And one of the subsets of these types of joints are outer joints and there's actually a few different

4
00:00:17.750 --> 00:00:24.500
types of outer joins outer joints essentially allow us to specify how to deal values only present in

5
00:00:24.500 --> 00:00:26.270
one of the tables being joined.

6
00:00:26.480 --> 00:00:31.640
And these are more complex joints than the simpler INNER JOIN which is essentially the default join

7
00:00:31.790 --> 00:00:34.680
where you only grab Rose present in both tables.

8
00:00:34.820 --> 00:00:39.860
So definitely take your time when trying to understand these outer joints especially when we start talking

9
00:00:39.860 --> 00:00:46.340
about left and right outer joins so in these series of lectures we're gonna start by talking about full

10
00:00:46.400 --> 00:00:51.740
outer joints which is the simplest OUTER JOIN and we'll also add in the clarifying where statements

11
00:00:51.740 --> 00:00:58.400
you can add in order to specify what actual rows you want even further and then we'll go into a lot

12
00:00:58.400 --> 00:01:03.890
of detail about the left outer join which is probably the hardest for beginners to grasp and then we'll

13
00:01:03.890 --> 00:01:09.680
also add in clarifying where statements to sub select rows from a left outer join.

14
00:01:09.800 --> 00:01:15.170
Once you understand that we'll just quickly go over right outer join since it's essentially the reverse

15
00:01:15.170 --> 00:01:16.330
of a left outer join.

16
00:01:16.370 --> 00:01:20.780
And if you understand LEFT OUTER JOIN YOU PRETTY MUCH ALREADY UNDERSTAND A right outer join is just

17
00:01:20.780 --> 00:01:21.450
the opposite.

18
00:01:21.770 --> 00:01:27.880
But let's not get too carried away let's begin with the full outer join so let's start with the full

19
00:01:27.880 --> 00:01:30.170
outer join.

20
00:01:30.220 --> 00:01:36.010
Now let's review the two example tables from the previous lecture series on inner joints recall we have

21
00:01:36.010 --> 00:01:41.680
these registrations tables and this log in stable we have people registering for a conference and then

22
00:01:41.710 --> 00:01:46.750
depending on whether or not they showed up or if they registered we have them log in on site here we

23
00:01:46.750 --> 00:01:52.480
have Andrew Bob Charlie and David or ABC these they registered Loggins Andrew and Bob show up they're

24
00:01:52.480 --> 00:01:58.060
present in both tables however we have exhibitor and Yolanda they forgot to register but they still

25
00:01:58.060 --> 00:01:59.770
showed up and logged in anyways.

26
00:02:00.490 --> 00:02:06.550
Ok so we know we would join these tables together on the name column again in this little universe we're

27
00:02:06.550 --> 00:02:11.770
going to assume that the name is unique identifier there's no such thing as to Andrew's or to Bob's

28
00:02:11.770 --> 00:02:18.740
in the world and recall using that inner join that we learned about previously we could match Andrew

29
00:02:18.740 --> 00:02:26.200
and Bob in both tables however keep in mind we have names that only appear in one table and that is

30
00:02:26.200 --> 00:02:33.190
Charlie and David in registrations and exams here and Yolanda in Loggins so let's see how the different

31
00:02:33.220 --> 00:02:39.880
outer joins deal with this particular discrepancy we're first going to take a look at the simplest which

32
00:02:39.880 --> 00:02:46.770
is a full outer join and this actually might be even easier to understand than an inner join so an outer

33
00:02:46.770 --> 00:02:53.580
join or a full outer join just grabs everything so the syntax is select all the columns from table A

34
00:02:54.000 --> 00:03:00.660
do a full outer join of Table B and then on wherever that column match occurs from table A equal to

35
00:03:00.660 --> 00:03:06.420
Table B column match and it's essentially just grab everything whether it's present in both tables or

36
00:03:06.420 --> 00:03:08.700
present only one table.

37
00:03:08.700 --> 00:03:14.940
Notice that it doesn't really matter again if Table B and table a order is switched here because this

38
00:03:14.940 --> 00:03:20.670
is completely symmetrical so because this Venn diagram is symmetrical you can switch off the table order

39
00:03:20.700 --> 00:03:27.320
because you're gonna grab everything anyways so let's take a look at this the actual syntax here be

40
00:03:27.330 --> 00:03:34.140
select all the columns from registrations perform a full outer join on Loggins on registrations that

41
00:03:34.140 --> 00:03:39.990
name equal to Loggins not name so let's actually see how sequel thinks about this in the background

42
00:03:40.590 --> 00:03:46.110
first we're saying grab everything from the registrations table so I don't have to first make this just

43
00:03:46.110 --> 00:03:51.030
font why is a little smaller so we can fit in the results table we're gonna fill in the results table

44
00:03:51.030 --> 00:03:56.180
the way we can think about this we're saying grab everything from registrations and a full outer join

45
00:03:56.180 --> 00:03:59.820
on Loggins so we fill in first everything for registrations.

46
00:03:59.820 --> 00:04:04.530
Again we don't really need to worry whether or not they're in Table B or table Loggins because we're

47
00:04:04.530 --> 00:04:06.930
grabbing everything anyways so we fill in it.

48
00:04:06.960 --> 00:04:11.880
Andrew Bob Charlie and David and then we're doing a full outer join on Loggins so you need to start

49
00:04:11.880 --> 00:04:14.810
filling information for what we actually have a name match.

50
00:04:15.030 --> 00:04:19.830
And we know we have a name match on Andrew and Bob and then we fill it in with the corresponding log

51
00:04:19.830 --> 00:04:23.370
and I.D. in this case it was number two and number four.

52
00:04:23.370 --> 00:04:29.550
Now the issue we arise with is that we didn't have a Charlie or David in Loggins but we're still asking

53
00:04:29.550 --> 00:04:30.690
for everything.

54
00:04:30.750 --> 00:04:36.390
So what sequel ends up automatically doing for us is filling this in with no essentially clarifying

55
00:04:36.390 --> 00:04:38.900
to you that there was no value there present.

56
00:04:38.940 --> 00:04:46.430
So there was no Charlie or David in the Loggins column and since it's a full outer join on Loggins we

57
00:04:46.430 --> 00:04:52.250
also need to fill in the rest of Loggins which was exhibit and Yolanda and then the corresponding Noel

58
00:04:52.250 --> 00:04:57.710
values for the registration table because they were only present in the Loggins table.

59
00:04:57.710 --> 00:05:02.780
So this is what it would look like to do a full outer join on these two tables on the named column.

60
00:05:02.780 --> 00:05:10.610
We grab everything and then fill in for Noel values where we only had a row present in one particular

61
00:05:10.610 --> 00:05:11.650
table.

62
00:05:11.720 --> 00:05:17.880
So this is the easiest outer join to understand because you're essentially just grabbing everything.

63
00:05:17.910 --> 00:05:24.390
Now the next thing I want to quickly discuss is qualifying a full outer join with a where statement

64
00:05:24.900 --> 00:05:28.720
and we can do this in order to get Roe's unique to either table.

65
00:05:28.800 --> 00:05:32.580
In other words rows that are not found in both tables.

66
00:05:32.640 --> 00:05:36.110
Essentially this is the exact opposite of an inner join.

67
00:05:36.150 --> 00:05:42.990
Let me show you why the way this works is we say the following we'll say select everything from table

68
00:05:43.020 --> 00:05:50.660
A with a full outer join on table B on table a column match is equal to Table B dog column Edge.

69
00:05:50.700 --> 00:05:55.910
That's what we had last time and that filled in the entire Venn Diagram including the intersection.

70
00:05:55.980 --> 00:06:02.040
However we're going to add in a where statement to qualify a little further and this is going to add

71
00:06:02.040 --> 00:06:10.000
in the statement where table a the I.D. column is null or table B the idea column is null.

72
00:06:10.290 --> 00:06:17.550
So that essentially means that we're looking for the actual values where one of the tables I.D. columns

73
00:06:17.550 --> 00:06:20.760
null or the other tables idea column is null.

74
00:06:20.760 --> 00:06:26.490
Essentially the opposite of an inner join because this will only grab things that are unique either

75
00:06:26.490 --> 00:06:32.130
completely the table a or unique to Table B.

76
00:06:32.210 --> 00:06:32.960
Keep in mind.

77
00:06:32.960 --> 00:06:39.830
Notice here I could have switched the order from table A to Table B because this is again symmetrical

78
00:06:39.920 --> 00:06:42.990
right down the middle.

79
00:06:43.010 --> 00:06:48.920
So this is actually look like in our example we'll say something like SELECT everything from registrations

80
00:06:49.280 --> 00:06:55.910
a full outer join on Loggins on registrations that name equal to Loggins not name and then we can specify

81
00:06:55.970 --> 00:07:04.540
where registrations that this registration ideas know or where Loggins dot log in is no.

82
00:07:04.640 --> 00:07:06.850
So this is show you how this would actually work.

83
00:07:06.920 --> 00:07:08.440
This is what we have last time.

84
00:07:08.450 --> 00:07:10.490
This is a full outer join.

85
00:07:10.520 --> 00:07:16.860
And notice here we have no values for our registration I.D. and null values for our log I.D..

86
00:07:16.970 --> 00:07:21.860
Technically we could have done the checking of null name as well or we're just gonna use the I.D. column

87
00:07:21.860 --> 00:07:22.470
here.

88
00:07:22.790 --> 00:07:29.450
And what we're going to do here is we'll specify grab them where there's only no values for that.

89
00:07:29.450 --> 00:07:34.630
So look here we're going to add in where registrations that Reg I.D. is though or where log and stop

90
00:07:34.640 --> 00:07:35.950
log ideas no.

91
00:07:36.100 --> 00:07:40.360
Essentially you can think of this as adding an aware statement after you've already done the joint.

92
00:07:40.390 --> 00:07:46.610
So you just further filtering you're going from this full outer join table and then specifying find

93
00:07:46.610 --> 00:07:53.690
me where those I.D. columns are null and that essentially removes those first two rows which was the

94
00:07:53.690 --> 00:07:55.580
match for Andrew and Bob.

95
00:07:56.180 --> 00:08:04.160
And now this is going to show us the results that are unique to only table a or only table B.

96
00:08:04.430 --> 00:08:07.790
We no longer have rows that can be found in both tables.

97
00:08:07.910 --> 00:08:15.650
Essentially the exact opposite of an inner join so let's see a quick example and PGE admin of full outer

98
00:08:15.650 --> 00:08:19.120
joins as well as adding in that qualifier.

99
00:08:19.130 --> 00:08:21.650
Okay here we are at PGA admin.

100
00:08:21.650 --> 00:08:27.830
Let's imagine that some new privacy rules have been implemented and we want to make sure that we don't

101
00:08:27.830 --> 00:08:34.910
have any payment information that's not attached to customer or that we don't have some customer information

102
00:08:35.150 --> 00:08:37.070
that isn't attached to any payments.

103
00:08:37.070 --> 00:08:42.050
Essentially we want to make sure that all the payments we have is associated with the current customer

104
00:08:42.440 --> 00:08:47.240
and all the customers we have are associated with some historical payment.

105
00:08:47.300 --> 00:08:52.160
We don't want to have some customer I.D. information for someone that's actually never purchased anything

106
00:08:52.430 --> 00:08:54.860
in any of our rental stores.

107
00:08:54.890 --> 00:08:56.750
So that's the new privacy update.

108
00:08:56.750 --> 00:08:58.680
We're just kind of imagining the situation.

109
00:08:58.850 --> 00:09:00.920
So what are we actually going to do here.

110
00:09:00.920 --> 00:09:05.900
We can say select everything from payment just to get an idea of what we're working with.

111
00:09:05.900 --> 00:09:11.540
We have again this payment idea and this customer I.D. And I want to make sure that essentially all

112
00:09:11.540 --> 00:09:14.490
the payments here are associated with current customer.

113
00:09:14.570 --> 00:09:22.540
And if I select everything from customer that these unique customers are associated with some sort of

114
00:09:22.540 --> 00:09:28.010
payment I don't want to have any customer here that hasn't actually made a historical payment.

115
00:09:28.030 --> 00:09:36.210
So the what I'm going to do that is also select everything from customer and do a full outer join with

116
00:09:36.210 --> 00:09:37.130
payment.

117
00:09:37.320 --> 00:09:49.290
And just as before we're going to say on we'll say customer that customer I.D. equal to payment dot

118
00:09:50.190 --> 00:09:57.150
customer I.D. So because this is a full outer join that's just gonna take everything and join it together.

119
00:09:57.150 --> 00:10:01.020
So essentially this is every single row found in every single table.

120
00:10:01.050 --> 00:10:07.200
So again it's everything from a customer and everything from payment but recall the new privacy idea

121
00:10:07.230 --> 00:10:12.450
that we wanted to implement was to figure out make sure we don't have any information that's essentially

122
00:10:12.450 --> 00:10:17.340
unique to payment not associated customer or unique to customer or we for some reason have customer

123
00:10:17.340 --> 00:10:21.140
information like their email when they've never done a historical payment.

124
00:10:21.240 --> 00:10:28.130
So that means I want to perform an additional filter with a where statement so I want to check where

125
00:10:29.290 --> 00:10:39.320
on my customer table that customer I.D. happens to be null so we'll say we're customer I.D. is null

126
00:10:39.860 --> 00:10:45.670
we can put them in lowercase or we're payment I.D.

127
00:10:48.620 --> 00:10:52.550
is null all lowercase there.

128
00:10:52.550 --> 00:10:54.230
So what is this actually saying.

129
00:10:54.230 --> 00:11:00.350
It means we're going to fully join the customer table and the payment table where those customer I.D.

130
00:11:00.350 --> 00:11:01.180
join up.

131
00:11:01.400 --> 00:11:09.080
And now I'm going to filter it to attempt to find rows that are either only unique to the customer table

132
00:11:09.350 --> 00:11:15.350
meaning we have information about a customer that's never made a payment or only unique to the payment

133
00:11:15.350 --> 00:11:15.770
table.

134
00:11:15.770 --> 00:11:20.690
Notice here how I'm using the payments I.D. which is a unique identifier for the payment table.

135
00:11:20.780 --> 00:11:27.170
If we keep going over we can see here every single payment has this unique payment I.D. And if I run

136
00:11:27.170 --> 00:11:35.150
this notice I get back empty results which actually means we're in compliance with this new privacy

137
00:11:35.150 --> 00:11:36.050
policy.

138
00:11:36.110 --> 00:11:40.200
We don't have any payment information not associate of some customer.

139
00:11:40.310 --> 00:11:46.070
And we also more importantly don't have any customers email information that their first name or last

140
00:11:46.070 --> 00:11:48.850
name who has never made a payment.

141
00:11:48.860 --> 00:11:50.870
Now what's another way we could confirm this.

142
00:11:51.230 --> 00:11:57.620
Well I could confirm this by taking a look at the distinct customer I.D. in both my customer table and

143
00:11:57.620 --> 00:11:58.880
my payment table.

144
00:11:58.880 --> 00:12:03.950
So this alone basically tells us that there are no rows that are completely unique.

145
00:12:03.950 --> 00:12:09.050
Essentially there are no customer I.D. that are completely unique only to the customer table early to

146
00:12:09.050 --> 00:12:10.250
the payment table.

147
00:12:10.370 --> 00:12:15.890
If we have information on a customer it's because they've done some payment in the past and we're able

148
00:12:15.890 --> 00:12:21.680
to select this with a full outer join and then filtering to make sure that there wasn't anything unique

149
00:12:21.740 --> 00:12:27.410
only to one of those tables and to confirm this just we can wrap our heads around this idea let's go

150
00:12:27.410 --> 00:12:32.530
ahead and just count the distinct customer I.D.

151
00:12:36.950 --> 00:12:46.390
from the payment table so if I run this there is five hundred and ninety nine unique customer I.D. or

152
00:12:46.400 --> 00:12:49.160
distinct customer I.D. in my payment table.

153
00:12:49.160 --> 00:12:56.000
And if I take a look at my customer table refresh this there is also five hundred and ninety nine distinct

154
00:12:56.000 --> 00:12:57.320
customer I.D..

155
00:12:57.440 --> 00:13:03.620
Now technically this doesn't fully answer the previous privacy compliance policy because there could

156
00:13:03.740 --> 00:13:07.950
possibly be different I.D. numbers in different tables.

157
00:13:08.050 --> 00:13:14.330
The truly the real way to answer that previous question to make sure there wasn't any customer information

158
00:13:14.330 --> 00:13:19.400
that didn't have payment information was using that full outer join and then filtering in additional

159
00:13:19.460 --> 00:13:25.670
where with the null statements on those unique identifiers for the customer I.D. and payment I.D. This

160
00:13:25.670 --> 00:13:31.970
technically by itself only further validates that last query we did but doesn't actually fully answer

161
00:13:31.970 --> 00:13:36.890
the question because technically there could have been maybe customer I.D. that were letters and one

162
00:13:36.890 --> 00:13:42.620
table that were five hundred ninety nine unique letters or series of letters.

163
00:13:42.620 --> 00:13:45.770
And then the other table could have five hundred 599 nine unique numbers.

164
00:13:45.860 --> 00:13:49.440
So keep that in mind while this does clarify and verify what we did.

165
00:13:49.570 --> 00:13:53.140
It is a 100 percent confirm that privacy policy.

166
00:13:53.180 --> 00:13:57.680
The only way to do that was using that full outer join of the additional where that we just saw.

167
00:13:57.920 --> 00:13:59.990
So we're learning about really powerful tools here.

168
00:14:00.170 --> 00:14:05.120
And so far we wouldn't have been able to answer those sort of questions without learning about the different

169
00:14:05.120 --> 00:14:06.830
joint capabilities.

170
00:14:06.860 --> 00:14:13.040
OK so coming up next we're going to learn about a left outer join which is typically the join that usually

171
00:14:13.040 --> 00:14:15.410
trips up beginners but we're going to take it slow.

172
00:14:15.410 --> 00:14:19.880
And once you really get the hang of it especially if those Venn diagrams it shouldn't be too bad.

173
00:14:19.910 --> 00:14:20.350
Thanks.

174
00:14:20.390 --> 00:14:21.440
And I'll see you at the next lecture.
