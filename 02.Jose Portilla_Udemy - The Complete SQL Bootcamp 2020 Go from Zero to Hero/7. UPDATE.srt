1
00:00:05,420 --> 00:00:11,570
Welcome back everyone to this lecture on the update keyword the update keyword allows for the changing

2
00:00:11,570 --> 00:00:17,190
of values of the columns in the table the general syntax is as follows.

3
00:00:17,190 --> 00:00:24,150
We say update then what table we want to update and then we can say set column equal to and then some

4
00:00:24,150 --> 00:00:29,700
apparent value that we've chosen for that column and then we can also specify conditions for where the

5
00:00:29,760 --> 00:00:30,800
update should occur.

6
00:00:31,380 --> 00:00:37,020
So let's show you an example we can use that account table we created earlier to say something like

7
00:00:37,140 --> 00:00:45,390
update the account table and then set last log in column equal to the current timestamp where the last

8
00:00:45,390 --> 00:00:51,990
log in is NULL which basically says if there is a null value in the last log in go ahead and update

9
00:00:52,020 --> 00:00:56,680
all those values to be the current timestamp.

10
00:00:56,800 --> 00:01:00,290
You can also reset everything without any where condition.

11
00:01:00,310 --> 00:01:06,130
So if I wanted to just overwrite and update all the last log and entries I could just say update account

12
00:01:06,340 --> 00:01:14,470
set last log in equal to current timestamp I could also set everything based off in other column.

13
00:01:14,470 --> 00:01:20,770
So we also have the created on column I could just say update account set all the values and last log

14
00:01:20,770 --> 00:01:28,980
in equal to create it on I could then also add an A where condition on top of this we could also use

15
00:01:28,980 --> 00:01:30,720
another tables values.

16
00:01:30,810 --> 00:01:35,520
This is sometimes known as an update join even though it doesn't use the joint keyword.

17
00:01:35,520 --> 00:01:41,010
So the way this works in general syntax is we choose the table we're updating such as table a and we

18
00:01:41,010 --> 00:01:48,000
say update table a and set the original column which is part of table a equal to some new column part

19
00:01:48,000 --> 00:01:50,730
of Table B from Table B or table A.

20
00:01:50,730 --> 00:01:56,710
The I.D. is equal to Table B the I.D. which is essentially where that joining is taking place.

21
00:01:56,730 --> 00:02:03,380
So we just figure out some key to match these two tables on and then we say set the original column

22
00:02:03,420 --> 00:02:10,800
then table nine equal to Table B that new column we can also return the rows that are affected.

23
00:02:10,860 --> 00:02:15,270
So if you just run one of these update commands you don't see any results but if you do want to see

24
00:02:15,270 --> 00:02:21,120
particular columns that were affected you can set the command something like up the account table set

25
00:02:21,120 --> 00:02:26,940
last log and column equal to the created on column and then you can say returning and choose the columns

26
00:02:26,940 --> 00:02:31,980
you want return and it's going to return the rows that were actually affected and you can return all

27
00:02:31,980 --> 00:02:35,680
the columns or a subset of columns it's really up to you.

28
00:02:35,890 --> 00:02:43,130
Let's go ahead and explore this further in P.G. Ataman alright to begin with this I'm going to take

29
00:02:43,130 --> 00:02:49,560
a look at the account table we set up earlier by saying select everything from account.

30
00:02:49,590 --> 00:02:54,770
No notice I'm connected to that learning database and so far if you've been following along you should

31
00:02:54,770 --> 00:02:57,700
just have one entry in this account table if you have more than one.

32
00:02:57,700 --> 00:02:58,880
That's OK.

33
00:02:58,940 --> 00:03:05,690
So we have this username password email created on and currently our last log in is no.

34
00:03:05,750 --> 00:03:08,070
So let's go ahead and change that.

35
00:03:08,120 --> 00:03:15,650
A couple of different ways using update so one thing we can do is set it to some sort of value just

36
00:03:16,340 --> 00:03:17,130
all over.

37
00:03:17,420 --> 00:03:26,630
So I can say update account and then say set last log in and I could set it to the current timestamp

38
00:03:26,690 --> 00:03:30,800
so I could say something like set it to current timestamp.

39
00:03:30,800 --> 00:03:34,760
I run that and notice it doesn't actually give you an output.

40
00:03:34,790 --> 00:03:43,530
So we'll have to ask again to select everything from account to see the change run that.

41
00:03:43,620 --> 00:03:50,610
And if I scroll over now I can see the last log in matches the current timestamp for when I ran that.

42
00:03:50,640 --> 00:03:56,040
Let's go ahead and just have it match the created on column so to do this.

43
00:03:56,040 --> 00:04:07,760
We're going to say update account and say set last log in equal to created on.

44
00:04:07,820 --> 00:04:08,680
Run that.

45
00:04:09,050 --> 00:04:10,490
So it looked like it worked.

46
00:04:10,490 --> 00:04:13,180
Let's go ahead and check on that.

47
00:04:13,400 --> 00:04:15,440
Select everything from accounts.

48
00:04:15,530 --> 00:04:16,550
Go ahead and run this.

49
00:04:16,560 --> 00:04:23,180
And now if you ran that you should see these two match exactly down to the sub second because it's directly

50
00:04:23,180 --> 00:04:26,050
lifted off the created on.

51
00:04:26,330 --> 00:04:32,570
And finally let's explore how we could do an update based off two tables.

52
00:04:32,720 --> 00:04:37,140
So to do this we're going to explore that job table we created.

53
00:04:37,160 --> 00:04:39,670
So again we have this job by the job name.

54
00:04:39,770 --> 00:04:44,720
And then recall that not only do we have the job table but we also had to expand on this the account

55
00:04:44,780 --> 00:04:46,520
job table.

56
00:04:46,520 --> 00:04:49,610
So we're going to say account job run that as well.

57
00:04:49,700 --> 00:04:52,070
And it looks like we have a hired date.

58
00:04:52,070 --> 00:04:57,830
Let's go ahead and change the higher dates based off in other table.

59
00:04:57,830 --> 00:05:01,430
Now the procedure here is really just for syntax purposes.

60
00:05:01,430 --> 00:05:06,770
The actual logic behind this won't make too much sense as far as why anyone would want to change the

61
00:05:06,770 --> 00:05:11,260
dates for this higher date based off in other tables so just keep that in mind this is really just for

62
00:05:11,270 --> 00:05:12,860
syntax example.

63
00:05:12,860 --> 00:05:13,300
OK.

64
00:05:13,490 --> 00:05:23,960
So how we're gonna do this is I'm going to update from this account job table and I'm going to set the

65
00:05:23,960 --> 00:05:34,760
higher date equal to and let's use the account table and let's use the created on date from that.

66
00:05:34,760 --> 00:05:46,520
So we'll say update account job set higher they equal to account dot created on from the account tables.

67
00:05:46,530 --> 00:05:48,940
We have to specify what's the other table.

68
00:05:49,470 --> 00:05:51,450
And then we're gonna do the following.

69
00:05:51,450 --> 00:05:54,300
Essentially this is where the join comes in.

70
00:05:54,300 --> 00:06:10,440
We're gonna say where account job the user I.D. is equal to account that user I.D. So we run this.

71
00:06:10,640 --> 00:06:20,880
It was successful which means if I were to select from account job notice here the actual timestamp

72
00:06:20,960 --> 00:06:23,170
just go ahead and take a look at the sub seconds.

73
00:06:23,190 --> 00:06:25,010
So 19 0 9.

74
00:06:25,020 --> 00:06:31,580
Now let's take a look at the account and it should be the exact same 19 0 9.

75
00:06:31,580 --> 00:06:37,830
So again that's the syntax for updating based off the results from another table.

76
00:06:37,910 --> 00:06:42,740
Very very useful to know that in this particular example maybe that logic of the reasoning behind it

77
00:06:42,740 --> 00:06:45,280
that didn't make too much sense on why you would want to do that.

78
00:06:45,290 --> 00:06:48,150
However I was really just for the syntax example.

79
00:06:48,260 --> 00:06:55,760
So again you update table a set which you actually want to update from table B and then show where you're

80
00:06:55,760 --> 00:07:00,470
actually matching that up which is why this is known as an update join even though we're actually not

81
00:07:00,470 --> 00:07:02,860
using the joint keyword.

82
00:07:02,900 --> 00:07:05,800
And then finally I want to just show you the returning keyword.

83
00:07:05,840 --> 00:07:17,820
Let's go ahead and go back and update our account table let's just set the last log in equal to again

84
00:07:17,820 --> 00:07:22,890
current timestamp suddenly essentially just resetting it a little further into the future.

85
00:07:23,040 --> 00:07:29,290
So we'll update account set last log in equal to current timestamp and then I can say returning and

86
00:07:29,290 --> 00:07:30,640
I can return something.

87
00:07:30,780 --> 00:07:36,480
Basically whatever columns I'm interested in such as email and let's say last log in and let's also

88
00:07:36,480 --> 00:07:40,090
grab in the created on just so I can compare them.

89
00:07:40,200 --> 00:07:43,590
We run this and that successfully ran.

90
00:07:43,770 --> 00:07:48,150
And in addition to that it returns back whatever columns you're interested in that way you don't need

91
00:07:48,150 --> 00:07:50,100
to do that select second step.

92
00:07:50,100 --> 00:07:53,340
Just to clarify or double check that your results went through.

93
00:07:53,870 --> 00:07:54,460
OK.

94
00:07:54,600 --> 00:07:56,460
That's it for the update command.

95
00:07:56,460 --> 00:07:57,470
I'll see you at the next lecture.
