WEBVTT
1
00:00:05.350 --> 00:00:13.300
Welcome back everyone to this lecture on the cast operator and cast function the cast operator lets

2
00:00:13.300 --> 00:00:16.480
you convert from one data type into another.

3
00:00:16.480 --> 00:00:20.650
So for example you can convert a string into an integer.

4
00:00:20.650 --> 00:00:26.650
Now the important thing to keep in mind here is that not every instance of a data type can be cast into

5
00:00:26.740 --> 00:00:28.510
any other data type.

6
00:00:28.510 --> 00:00:31.510
It must be reasonable to actually convert that data.

7
00:00:31.510 --> 00:00:37.170
Now that term what is reasonable is usually pretty self-explanatory given the situation.

8
00:00:37.180 --> 00:00:42.610
So for example if you have a string entry of the digit five and you want to cast that to an integer

9
00:00:42.970 --> 00:00:49.030
that makes sense it's quite obvious that that string 5 or that digit 5 will then be converted into the

10
00:00:49.030 --> 00:00:50.200
integer 5.

11
00:00:50.200 --> 00:00:57.280
However if you have something more complex like the actual string spelling out five F. Ivey sequel is

12
00:00:57.280 --> 00:00:59.630
not going to be able to read that string.

13
00:00:59.650 --> 00:01:03.130
Understand that English and then convert it back to a digit integer.

14
00:01:03.340 --> 00:01:09.420
So as you practice more and more sequel it should become pretty obvious what can be cast into what both.

15
00:01:09.550 --> 00:01:10.730
Just keep that in mind.

16
00:01:10.780 --> 00:01:12.830
It must be reasonable to convert that data.

17
00:01:12.910 --> 00:01:17.620
And if you're thinking of using the cast function you have already most likely done that calculation

18
00:01:17.680 --> 00:01:19.440
already in your head.

19
00:01:19.510 --> 00:01:25.270
So there are two main ways to actually perform a cast operation and that is through the cast function

20
00:01:25.360 --> 00:01:32.650
which is just general circle syntax and post sequel has a specialized cast operator which is just essentially

21
00:01:32.680 --> 00:01:35.080
a shorthand for a cast function call.

22
00:01:35.170 --> 00:01:39.180
Let's walk through first the original cast function call the top one.

23
00:01:39.340 --> 00:01:41.800
Here we can see that we're simply saying select.

24
00:01:41.800 --> 00:01:47.350
And then within the cast function we're going to do is passing the thing we want to convert or cast

25
00:01:47.680 --> 00:01:49.310
then say as.

26
00:01:49.360 --> 00:01:52.360
And then the data type we want to cast that too.

27
00:01:52.360 --> 00:02:00.080
So here I am saying cast that string five as an integer the cast operator is essentially shorthand for

28
00:02:00.080 --> 00:02:04.370
this instead of having to write the cast function and the ASCII word since you're always going to be

29
00:02:04.370 --> 00:02:10.730
having to write that for a cast function Postgres sequel itself has this specialized operator which

30
00:02:10.730 --> 00:02:12.070
is just using two colons.

31
00:02:12.080 --> 00:02:18.700
So you're basically saying select and then the string five colon colon to integer.

32
00:02:18.710 --> 00:02:24.170
Now keep in mind that typically you're not doing this on a single sample or single instance.

33
00:02:24.170 --> 00:02:29.800
Instead you're going to be using this within a select query of a column name instead of a single instance.

34
00:02:29.810 --> 00:02:35.480
So for example if you had a table that for some reason the date column was set up as a string entry

35
00:02:35.870 --> 00:02:43.390
then what you can do is say select cast the date column there as timestamp from table.

36
00:02:43.580 --> 00:02:46.740
Let's go ahead and explore some examples in P.G. ataman.

37
00:02:46.790 --> 00:02:47.030
All right.

38
00:02:47.030 --> 00:02:49.200
Here I am inside of P.G. ataman.

39
00:02:49.340 --> 00:02:56.180
Let's first show you the actual syntax calls of single instances of casting before we run it on a column.

40
00:02:56.180 --> 00:02:58.810
So there's again two ways of doing this.

41
00:02:58.850 --> 00:03:06.170
I'm going to say select and then I can call cast and what I'm going to do here is attempt to cast the

42
00:03:06.170 --> 00:03:10.580
string five as the integer data type.

43
00:03:10.580 --> 00:03:15.080
And notice here that the highlighting within PGI admin lets me know that I'm using the correct keywords

44
00:03:16.570 --> 00:03:17.470
so I run this.

45
00:03:17.470 --> 00:03:19.270
And note now I get five back.

46
00:03:19.270 --> 00:03:21.030
But now it's an integer.

47
00:03:21.250 --> 00:03:27.460
And if I really wanted to I could add in an alias call to call this new result column whatever I wanted

48
00:03:27.610 --> 00:03:30.450
such as new int for a new integer.

49
00:03:30.460 --> 00:03:33.600
Now as I mentioned there must be reasonable to actually cast this.

50
00:03:33.670 --> 00:03:38.800
So for some reason you had the string five you're trying to cast that as an integer.

51
00:03:38.830 --> 00:03:41.300
Let's go ahead and see what happens when we try to run this.

52
00:03:41.440 --> 00:03:46.660
Notice that Postgres sequel if it's not able to do it it's simply going to report back that you have

53
00:03:46.660 --> 00:03:48.760
an invalid input syntax.

54
00:03:48.760 --> 00:03:53.860
So if that happens to be the case there's really nothing you can do as far as the cast function call

55
00:03:53.860 --> 00:04:00.010
what you really need to be doing is making sure that either the thing you're trying to convert is reasonable

56
00:04:00.100 --> 00:04:03.570
or if you had selected the correct data type.

57
00:04:03.580 --> 00:04:09.220
Now as I previously mentioned there is actually specialized Postgres sequel operators to essentially

58
00:04:09.220 --> 00:04:11.670
perform shorthand for this sort of conversion.

59
00:04:11.830 --> 00:04:15.700
Something to keep in mind is this is only available in the post Kress sequel engine.

60
00:04:15.700 --> 00:04:18.670
It's not available in a lot of other sequel engines.

61
00:04:18.670 --> 00:04:26.560
So we're going to do here is basically remove that say the string five colon colon and then the data

62
00:04:26.560 --> 00:04:32.260
type we want to convert it to such as integer and note here that's going to produce back the exact same

63
00:04:32.320 --> 00:04:32.710
result.

64
00:04:32.710 --> 00:04:36.460
So let's try another number such as 10 run that again.

65
00:04:36.460 --> 00:04:41.050
And as I mentioned before if you're doing something that doesn't make sense for sequel you try to run

66
00:04:41.050 --> 00:04:45.060
that it's simply going to report back an invalid input syntax.

67
00:04:45.070 --> 00:04:46.860
OK OK.

68
00:04:46.880 --> 00:04:55.080
So finally let's go ahead and explore an example use case of the cast function on a real table from

69
00:04:55.080 --> 00:04:56.410
our database.

70
00:04:56.460 --> 00:05:03.180
I'm going to select everything from the rental database run that and I can see here.

71
00:05:03.180 --> 00:05:09.540
I have lots of different ideas like an inventory I.D. customer I.D. staff I.D. and so on.

72
00:05:09.540 --> 00:05:15.600
Let's imagine for some reason I want to figure out the actual character the length of the inventory

73
00:05:15.600 --> 00:05:21.810
I.D. essentially asking the question how many digits are within each inventory I.D..

74
00:05:22.440 --> 00:05:25.890
So that's a little troublesome to do as an integer.

75
00:05:25.890 --> 00:05:31.700
There is no real way I can easily count the number of digits within this integer using mathematics.

76
00:05:31.710 --> 00:05:35.700
However it's really easy to do with a string.

77
00:05:35.700 --> 00:05:41.610
I can simply ask for the character length of the string and if I check out the documentation for string

78
00:05:41.610 --> 00:05:48.240
functions and operators I know that there's a character length string right here.

79
00:05:48.250 --> 00:05:50.220
So character underscore length.

80
00:05:50.440 --> 00:05:52.730
So let's go ahead and try that out.

81
00:05:53.020 --> 00:06:05.350
What I'm going to do is I'm going to have the first cast this inventory I.D. as a variable character

82
00:06:06.370 --> 00:06:10.500
so once a variable character let's go ahead and run this make sure that works.

83
00:06:10.620 --> 00:06:12.240
I can see that it looks the same.

84
00:06:12.270 --> 00:06:13.900
However it's no longer an integer.

85
00:06:13.980 --> 00:06:22.230
It's character varying which then means I can say what's the character underscore length of this result

86
00:06:24.130 --> 00:06:25.480
run that.

87
00:06:25.660 --> 00:06:26.530
And now it works.

88
00:06:26.540 --> 00:06:31.840
That is now it's returning back an integer counting how many actual characters or digits or in each

89
00:06:31.960 --> 00:06:33.250
inventory I.D..

90
00:06:34.000 --> 00:06:40.450
So that is a use case of why you may want to be using cast in order to convert data types because you

91
00:06:40.450 --> 00:06:43.390
know that for certain data types there's useful functions.

92
00:06:43.450 --> 00:06:51.390
If you try to just run this character length on inventory I.D. by itself and run that note what happens.

93
00:06:51.400 --> 00:06:57.130
It's going to say that there's no function that matches the given name and argument type.

94
00:06:57.130 --> 00:07:03.730
Essentially telling you you may need to add explicit type cast which is exactly what we did earlier.

95
00:07:03.850 --> 00:07:05.460
OK that's it.

96
00:07:05.470 --> 00:07:06.550
I'll see you at the next lecture.
