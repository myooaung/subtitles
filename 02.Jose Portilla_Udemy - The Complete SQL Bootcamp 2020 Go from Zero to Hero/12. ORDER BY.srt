1
00:00:05,300 --> 00:00:09,410
Welcome back everyone to this lecture on order by.

2
00:00:09,610 --> 00:00:15,160
You may have noticed that post Chris sequel sometimes returns the same request query results in a different

3
00:00:15,160 --> 00:00:20,620
order meaning you may have run the exact same query on your computer and saw the results in a slightly

4
00:00:20,620 --> 00:00:23,770
different order than what I have on my computer.

5
00:00:23,800 --> 00:00:29,320
So in order to alleviate this issue if we want the results in a certain order we can use the order by

6
00:00:29,410 --> 00:00:34,650
to sort rows based on a column value in either ascending or descending order.

7
00:00:34,720 --> 00:00:42,550
So that would be alphabetical for string based columns or numerical order for numeric columns the basis

8
00:00:42,550 --> 00:00:46,210
syntax for an order by statement would be as follows.

9
00:00:46,210 --> 00:00:52,030
We select whatever columns we want from the table and then we decide to order by a specific column and

10
00:00:52,030 --> 00:00:58,750
then Optionally you can add an HSC or a DSE whether you want the ordering or sorting to be ascending

11
00:00:58,870 --> 00:01:04,740
or descending noticed the order by towards the end of the query.

12
00:01:04,870 --> 00:01:10,210
Since we want to do any selection and filtering first before finally sorting so that means order by

13
00:01:10,270 --> 00:01:16,440
is going to be towards the bottom of a query and one of the very last things that sequel actually performs.

14
00:01:16,480 --> 00:01:21,490
So we're going to do all our selection or filtering if we use a where statement that should come before

15
00:01:21,490 --> 00:01:22,340
the order by.

16
00:01:22,450 --> 00:01:29,760
And then right at the and we'll go ahead and do any sorting and you use HSC to sort an ascending order

17
00:01:29,880 --> 00:01:32,260
the EFC to sort in descending order.

18
00:01:32,490 --> 00:01:38,050
If you leave it blank order by just uses a sending by default.

19
00:01:38,090 --> 00:01:41,900
Now what's also interesting is you can use order by on multiple columns.

20
00:01:41,900 --> 00:01:45,610
So this makes sense when one column has duplicate entries.

21
00:01:45,650 --> 00:01:51,680
Let's take a look at this example database or example table really we have three columns here company

22
00:01:51,770 --> 00:01:55,240
name and the sales for the individual at that company.

23
00:01:55,280 --> 00:02:02,340
Notice here that we have duplicate entries under company so if we were to actually order by two columns

24
00:02:02,340 --> 00:02:07,890
here we could select the company column the name column and the sales column in that order from this

25
00:02:07,890 --> 00:02:11,810
table and then we order by company and then order by sales.

26
00:02:11,880 --> 00:02:13,320
What does that actually mean.

27
00:02:13,320 --> 00:02:17,670
Well it means we saw everything first based off the company column.

28
00:02:17,670 --> 00:02:23,670
So that as we have Apple coming in first now better order than Google and then Xerox and then the corresponding

29
00:02:23,670 --> 00:02:25,780
names also get lined up.

30
00:02:25,830 --> 00:02:29,650
However we can then also order by the sales.

31
00:02:29,670 --> 00:02:34,500
So after you've done the sorting based off the company column which makes sense because there's duplicate

32
00:02:34,500 --> 00:02:41,160
values there within that particular company we do a second ordering which is by the sales column.

33
00:02:41,160 --> 00:02:45,930
So note the sales now is an ascending order for each individual within the same company.

34
00:02:45,930 --> 00:02:50,010
So we see Andrew with one hundred and then Zach with three hundred and then for Google we see clear

35
00:02:50,010 --> 00:02:52,500
of two hundred and then David with five hundred.

36
00:02:52,560 --> 00:02:59,280
So if you have duplicate values in a particular column and you want to sort not just by that particular

37
00:02:59,280 --> 00:03:05,880
column but another column as well it makes sense to do an order mine with multiple columns and it's

38
00:03:05,880 --> 00:03:08,840
going to sort based off the order you provide.

39
00:03:08,850 --> 00:03:16,200
So Ill order by company first and then by sales let's go ahead and explore some more examples and P.G.

40
00:03:16,200 --> 00:03:19,010
Advent on the DVD rental database.

41
00:03:19,020 --> 00:03:21,100
OK here I am inside of P.G. admin.

42
00:03:21,240 --> 00:03:24,940
What I'm going to do is explore the customer table.

43
00:03:25,140 --> 00:03:30,660
So we will say select and let's select just everything from the customer table so we can take a quick

44
00:03:30,660 --> 00:03:34,580
look at what the results look like here.

45
00:03:34,580 --> 00:03:39,470
So notice we have this custom I.D. and more or less it seems to be in order except for this first one

46
00:03:39,470 --> 00:03:43,100
which is five to four and then we also have the first name and last name.

47
00:03:43,490 --> 00:03:47,630
Let's see if we can order everything based off the first name of the user.

48
00:03:47,720 --> 00:03:50,600
So that would be an alphabetical order based off first name.

49
00:03:50,600 --> 00:03:57,370
So we do here is towards the bottom we'll say order by and then we decide on the column.

50
00:03:57,380 --> 00:03:59,460
So say order by first name.

51
00:03:59,460 --> 00:04:05,310
If I don't leave anything here and just run this it'll automatically order it here in ascending order

52
00:04:05,310 --> 00:04:07,140
so starting at a all the way down.

53
00:04:07,140 --> 00:04:12,540
So then if you start going more and more down you'll eventually see bees and then sees this is the same

54
00:04:12,600 --> 00:04:15,420
as if I had clarified ascending order.

55
00:04:15,420 --> 00:04:18,960
So you may be wondering why bother clarifying ascending order there.

56
00:04:18,960 --> 00:04:22,710
Well it's nice because we come back to read this or someone else is reading your code.

57
00:04:22,860 --> 00:04:26,090
You can realize that they specifically wanted it in ascending order.

58
00:04:26,190 --> 00:04:31,800
We can do the same for descending order by adding and DSC towards the end of this order by statement

59
00:04:32,130 --> 00:04:36,870
and now notice we're starting at Zachary then Yvonne Yolanda and going down so starting at Zee and then

60
00:04:36,870 --> 00:04:38,660
going down all the way to a.

61
00:04:38,870 --> 00:04:43,610
Now notice here that we have different store ideas and we also have duplicate store ideas.

62
00:04:43,620 --> 00:04:49,530
So we have story the one story to end story these shows up multiple times so we have multiple entries

63
00:04:49,530 --> 00:04:55,410
for store I.D. which basically means that this particular customer let's say Zachary height goes to

64
00:04:55,410 --> 00:05:01,260
store I.D. number one and the second customer Yvonne Watkins goes to story the number two.

65
00:05:01,260 --> 00:05:03,420
So there's Yolanda Wilma et cetera.

66
00:05:03,490 --> 00:05:10,590
Well we could do is first order by the store I.D. to get all the results per store and then organize

67
00:05:10,590 --> 00:05:12,270
it by first name.

68
00:05:12,270 --> 00:05:18,610
So the way this will work is I would say first order by store I.D..

69
00:05:18,860 --> 00:05:25,310
And if I just run this by itself notice now I get store I.D. one first and then if I were to continue

70
00:05:25,310 --> 00:05:30,290
scrolling here maybe a couple thousand so might be hard to actually see this but then I eventually get

71
00:05:30,290 --> 00:05:36,200
store I.D. number two and then within this you'll notice that we scroll back up here.

72
00:05:36,200 --> 00:05:39,470
I'm actually just going to select store the first name and last name columns.

73
00:05:39,470 --> 00:05:41,440
So let's reduce this a little bit.

74
00:05:41,450 --> 00:05:48,260
We'll say select the store I.D. column select the first name column and select the last name column

75
00:05:49,010 --> 00:05:49,980
run this.

76
00:05:50,000 --> 00:05:55,730
So if we take a look at this the store I.D. is now sorted starting at 1 and then eventually you scroll

77
00:05:55,730 --> 00:06:01,580
down you'll see you'll see store number two but the actual entries themselves are in no particular order

78
00:06:02,030 --> 00:06:03,500
within store I.D..

79
00:06:03,740 --> 00:06:09,230
So what I could do is say first order by store I.D. which makes sense because they're duplicate values

80
00:06:09,410 --> 00:06:13,530
in that particular column and then go ahead and order by first name.

81
00:06:13,640 --> 00:06:19,830
So after you order by the store i.e. go ahead and order by first name run that.

82
00:06:19,970 --> 00:06:24,650
And here we cannot see store I.D. number one then everything starting in alphabetical order based off

83
00:06:24,650 --> 00:06:25,580
the first name.

84
00:06:25,730 --> 00:06:30,640
And then we scroll down here to eventually hit store I.D. number two and we can see within story the

85
00:06:30,680 --> 00:06:35,710
number two all the first names are now in alphabetical order starting with a.

86
00:06:35,990 --> 00:06:41,450
And if you want you can always add an ascending and descending to each particular order by statement.

87
00:06:41,570 --> 00:06:49,730
So I could say order the store I.D. on descending while ordering based off first name on ascending.

88
00:06:49,910 --> 00:06:52,960
And notice here it's semicolon is optional.

89
00:06:53,150 --> 00:06:58,640
So we run this and now at the very top we're starting at story the number two and then seeing the alphabetical

90
00:06:58,640 --> 00:07:00,250
order Aaron et cetera.

91
00:07:00,260 --> 00:07:04,920
And then eventually if I scroll down far enough I would say store I.D. number one.

92
00:07:05,000 --> 00:07:12,920
The other thing to note here is that if I select just first name and last name and run this it will

93
00:07:12,920 --> 00:07:20,210
still work which means I can technically sort by columns that I do not actually request in my select

94
00:07:20,210 --> 00:07:21,230
statement.

95
00:07:21,260 --> 00:07:26,450
Now whether or not you actually want to do that in a real world setting is really up to you.

96
00:07:26,450 --> 00:07:32,510
Typically it would make sense to actually select the column you're ordering by because that just logically

97
00:07:32,570 --> 00:07:38,510
looks better as a result and it'll kind of continue the logic of your SQL query into your results and

98
00:07:38,510 --> 00:07:43,380
you'll understand whatever the person was trying to explore from a business standpoint.

99
00:07:43,490 --> 00:07:49,640
But I do want you to be aware of the fact that you can technically order by a column and not select

100
00:07:49,640 --> 00:07:51,260
it in your SELECT statement.

101
00:07:51,260 --> 00:07:52,850
If for some reason you want to do that.

102
00:07:53,500 --> 00:07:53,960
OK.

103
00:07:54,110 --> 00:07:56,260
That's it for the order by lecture.

104
00:07:56,270 --> 00:08:01,610
Coming up next we're going to quickly discuss a limit function which allows us to actually limit the

105
00:08:01,610 --> 00:08:06,740
amount of rows that are returned in a query and then we'll give you some challenges for the order by

106
00:08:06,740 --> 00:08:09,290
statement in conjunction with the limited statement.

107
00:08:09,290 --> 00:08:10,250
I'll see you at the next lecture.
