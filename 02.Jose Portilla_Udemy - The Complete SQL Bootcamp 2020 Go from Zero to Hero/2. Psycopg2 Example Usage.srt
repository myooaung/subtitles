1
1

00:00:01,048  -->  00:00:01,983
<v Instructor>Hello everyone,</v>
2

2

00:00:01,983  -->  00:00:05,876
and welcome to this lecture on using PostgreSQL with Python,
3

3

00:00:05,876  -->  00:00:08,876
and with using the library psycopg2.
4

4

00:00:09,732  -->  00:00:12,528
So I'm right now using the Jupyter Notebook system
5

5

00:00:12,528  -->  00:00:14,934
in order to show you how all this syntax works.
6

6

00:00:14,934  -->  00:00:16,860
You can feel free to use any editor
7

7

00:00:16,860  -->  00:00:20,042
or IDE that you prefer for Python.
8

8

00:00:20,042  -->  00:00:22,347
If you've already experienced one of my other
9

9

00:00:22,347  -->  00:00:24,963
Python courses, you're probably already really familiar
10

10

00:00:24,963  -->  00:00:27,784
with the Jupyter or iPython Notebook system.
11

11

00:00:27,784  -->  00:00:29,491
If you're not and want to find out more,
12

12

00:00:29,491  -->  00:00:34,299
you can go to www.jupyter.org and explore that website,
13

13

00:00:34,299  -->  00:00:37,222
and I'll also give you a link on how to instal it,
14

14

00:00:37,222  -->  00:00:38,206
and you can explore it more.
15

15

00:00:38,206  -->  00:00:41,915
I really like it as far as for teaching and quick scripts.
16

16

00:00:41,915  -->  00:00:44,870
But, you can also explore everything we're about to do
17

17

00:00:44,870  -->  00:00:49,321
in your preferred IDE or development environment for Python.
18

18

00:00:49,321  -->  00:00:53,244
So let's go ahead and start by just importing the library
19

19

00:00:53,244  -->  00:00:55,736
that we downloaded from the previous lecture.
20

20

00:00:55,736  -->  00:00:58,808
So again, go to the previous lecture for more notes
21

21

00:00:58,808  -->  00:01:00,519
on how to actually download everything,
22

22

00:01:00,519  -->  00:01:02,737
and for the dot py file
23

23

00:01:02,737  -->  00:01:05,385
that has all the code that I'm gonna execute here.
24

24

00:01:05,385  -->  00:01:08,030
Or the Notebook file that has, again, all the code
25

25

00:01:08,030  -->  00:01:10,331
and some notes of what I'm gonna execute here
26

26

00:01:10,331  -->  00:01:12,016
during the lecture.
27

27

00:01:12,016  -->  00:01:13,346
So to get started, like I was saying,
28

28

00:01:13,346  -->  00:01:15,596
we need to import psycopg2.
29

29

00:01:16,463  -->  00:01:20,296
So psyco, let me make sure I spell that right.
30

30

00:01:21,315  -->  00:01:22,148
Psycopg2.
31

31

00:01:24,021  -->  00:01:27,876
So by convention we just import it as pg2.
32

32

00:01:27,876  -->  00:01:29,655
And then the next thing you're gonna do
33

33

00:01:29,655  -->  00:01:32,038
is connect to your database.
34

34

00:01:32,038  -->  00:01:36,194
And by convention that's C-O-N-N.
35

35

00:01:36,194  -->  00:01:38,694
And you're just gonna say pg2,
36

36

00:01:39,631  -->  00:01:41,738
and then call the connect method.
37

37

00:01:41,738  -->  00:01:44,192
And you're gonna pass in a couple of arguments here.
38

38

00:01:44,192  -->  00:01:47,488
The first one is what database you're gonna connect to.
39

39

00:01:47,488  -->  00:01:50,265
I'm gonna go ahead and connect to the dvdrental database
40

40

00:01:50,265  -->  00:01:52,732
that we've been working with a lot.
41

41

00:01:52,732  -->  00:01:55,618
And then you have to define the user.
42

42

00:01:55,618  -->  00:01:58,793
So depending on how you actually set up your pg admin
43

43

00:01:58,793  -->  00:02:02,671
account, you may have set up your own particular user name.
44

44

00:02:02,671  -->  00:02:05,635
If you don't specify the username in this argument
45

45

00:02:05,635  -->  00:02:08,836
of the connect method, it'll automatically by default
46

46

00:02:08,836  -->  00:02:12,069
on a windows computer, and I believe on a mac as well,
47

47

00:02:12,069  -->  00:02:15,436
default to the user profile name.
48

48

00:02:15,436  -->  00:02:17,386
But if you've just been following along
49

49

00:02:17,386  -->  00:02:20,629
with all the lectures, the default for pg admin
50

50

00:02:20,629  -->  00:02:23,638
as far as the username, is just postgres.
51

51

00:02:23,638  -->  00:02:26,401
So if you're having any trouble with your own username,
52

52

00:02:26,401  -->  00:02:28,410
try just saying postgres, and if you set everything
53

53

00:02:28,410  -->  00:02:31,608
to default, it should be postgres.
54

54

00:02:31,608  -->  00:02:36,325
And then the last thing you have to input is your password.
55

55

00:02:36,325  -->  00:02:38,667
Now I've already set up my password
56

56

00:02:38,667  -->  00:02:42,278
as the variable called secret up here.
57

57

00:02:42,278  -->  00:02:44,983
So if you want you can just set up a variable called secret,
58

58

00:02:44,983  -->  00:02:46,829
and put in your password.
59

59

00:02:46,829  -->  00:02:48,542
Obviously my password is not the string,
60

60

00:02:48,542  -->  00:02:50,324
your password goes here.
61

61

00:02:50,324  -->  00:02:51,984
So if you've done all this correctly,
62

62

00:02:51,984  -->  00:02:54,950
you should be able to run this line of code
63

63

00:02:54,950  -->  00:02:59,117
or put this line of code inside your dot ipy file,
64

64

00:02:59,992  -->  00:03:02,079
and then you should have a connexion there.
65

65

00:03:02,079  -->  00:03:04,801
So in this Jupyter Notebook system I'm basically just
66

66

00:03:04,801  -->  00:03:08,493
running each of these cells as a separate block of code.
67

67

00:03:08,493  -->  00:03:10,223
And that way I can run the cells
68

68

00:03:10,223  -->  00:03:13,640
and show you the output at the same time.
69

69

00:03:14,477  -->  00:03:18,164
So now that we've established the connexion to PostgreSQL,
70

70

00:03:18,164  -->  00:03:21,013
the next step is to retrieve the cursor.
71

71

00:03:21,013  -->  00:03:22,826
And the cursor is just a control structure
72

72

00:03:22,826  -->  00:03:26,383
that enables traversal over the records in a database.
73

73

00:03:26,383  -->  00:03:28,582
So you can basically think of it as some sort of iterator
74

74

00:03:28,582  -->  00:03:32,433
or pointer for sequel data retrieval.
75

75

00:03:32,433  -->  00:03:33,472
And the way we're gonna do that,
76

76

00:03:33,472  -->  00:03:37,374
is we're gonna go ahead and create a variable called C-U-R.
77

77

00:03:37,374  -->  00:03:41,207
And then we're gonna have a connexion object.
78

78

00:03:42,191  -->  00:03:44,821
So that was this C-O-N-N.
79

79

00:03:44,821  -->  00:03:49,214
And then we call the cursor method off of it.
80

80

00:03:49,214  -->  00:03:51,880
And so now we have our cursor.
81

81

00:03:51,880  -->  00:03:53,915
And that was essentially the last thing we needed to do
82

82

00:03:53,915  -->  00:03:57,302
in order to execute sequel queries from Python.
83

83

00:03:57,302  -->  00:04:01,469
So using that cursor object, I can say execute off of it,
84

84

00:04:04,353  -->  00:04:07,333
and then you basically, inside the execute method,
85

85

00:04:07,333  -->  00:04:11,181
you pass in a string of whatever you want to
86

86

00:04:11,181  -->  00:04:14,536
actually ask the database, or query the database of.
87

87

00:04:14,536  -->  00:04:18,703
So we can say something like this, select asterisks from,
88

88

00:04:20,190  -->  00:04:23,357
let's go ahead and say, from payments.
89

89

00:04:25,995  -->  00:04:30,236
So now this cursor has that execute statement.
90

90

00:04:30,236  -->  00:04:34,320
And this cursor then has a couple of methods available.
91

91

00:04:34,320  -->  00:04:37,893
It has fetchall, fetchmany and fetchone.
92

92

00:04:37,893  -->  00:04:42,546
So what these do, is they basically return rows of data.
93

93

00:04:42,546  -->  00:04:44,002
So if I just say fetchone,
94

94

00:04:44,002  -->  00:04:47,393
it will return the first row of that data.
95

95

00:04:47,393  -->  00:04:49,951
So these are the numbers that correspond with
96

96

00:04:49,951  -->  00:04:53,731
that row of data, from select everything from payment.
97

97

00:04:53,731  -->  00:04:55,814
I can also say fetchmany,
98

98

00:04:57,039  -->  00:05:00,035
and then actually pass in how many rows I wanna fetch.
99

99

00:05:00,035  -->  00:05:02,647
So I can fetch 10 rows.
100

100

00:05:02,647  -->  00:05:04,029
And you'll notice that it returns it
101

101

00:05:04,029  -->  00:05:07,666
as a list of tupel items, which is nice cause then you can
102

102

00:05:07,666  -->  00:05:10,029
use tupel in packing later on.
103

103

00:05:10,029  -->  00:05:12,150
And also note that depending on the data type,
104

104

00:05:12,150  -->  00:05:15,383
it'll also specify like a datetime, data type,
105

105

00:05:15,383  -->  00:05:18,613
if you have a time stamp information on it,
106

106

00:05:18,613  -->  00:05:23,267
for that particular column in your database table.
107

107

00:05:23,267  -->  00:05:25,880
So those are really the main features you're gonna be using
108

108

00:05:25,880  -->  00:05:30,419
with psycopg2, and as far as using this all on Python,
109

109

00:05:30,419  -->  00:05:32,792
it's gonna be kind of up to you how you use these
110

110

00:05:32,792  -->  00:05:36,109
main three or four commands, in order to use
111

111

00:05:36,109  -->  00:05:38,860
the power of Python and use the automation capabilities
112

112

00:05:38,860  -->  00:05:41,334
of Python to query your database
113

113

00:05:41,334  -->  00:05:43,718
or put things into your database.
114

114

00:05:43,718  -->  00:05:46,695
So again let's just go over what we've done so far.
115

115

00:05:46,695  -->  00:05:50,028
You had a import psycopg2 as pg2,
116

116

00:05:50,028  -->  00:05:51,828
then you had a establish a connexion,
117

117

00:05:51,828  -->  00:05:54,195
I set it as the variable C-O-N-N,
118

118

00:05:54,195  -->  00:05:56,026
and you said pg2 dot connect,
119

119

00:05:56,026  -->  00:05:59,204
you had a pass in the database name you were connecting to,
120

120

00:05:59,204  -->  00:06:01,645
pass in the user you were connecting as.
121

121

00:06:01,645  -->  00:06:05,812
The default user for any Postgres application is postgres.
122

122

00:06:06,725  -->  00:06:08,979
And then you had a pass on the password you set up
123

123

00:06:08,979  -->  00:06:13,193
when you're first installing pgAdmin and PostgreSQL.
124

124

00:06:13,193  -->  00:06:16,891
Then, you had to get a cursor off of that connexion.
125

125

00:06:16,891  -->  00:06:19,075
And with that cursor you could then
126

126

00:06:19,075  -->  00:06:22,093
execute sequel queries off of it.
127

127

00:06:22,093  -->  00:06:25,011
And then once you have that cursor execute that query,
128

128

00:06:25,011  -->  00:06:27,823
you can actually fetch the rows that are returned,
129

129

00:06:27,823  -->  00:06:31,990
you can fetch many rows, you can fetch just one row,
130

130

00:06:33,457  -->  00:06:37,624
or the final option is actually to fetch all of them.
131

131

00:06:38,545  -->  00:06:40,756
And notice here since there's quite a few rows
132

132

00:06:40,756  -->  00:06:42,742
you may wanna use this carefully.
133

133

00:06:42,742  -->  00:06:46,747
Otherwise you'll just end up with a tonne of rows returned.
134

134

00:06:46,747  -->  00:06:51,210
So let's go in and change that back to fetchone.
135

135

00:06:51,210  -->  00:06:54,360
So again, this is really nice
136

136

00:06:54,360  -->  00:06:56,677
because you can use tupel and packing along with it.
137

137

00:06:56,677  -->  00:06:59,089
So you can say something like,
138

138

00:06:59,089  -->  00:07:01,381
if we just say, fetchmany such as 10.
139

139

00:07:01,381  -->  00:07:04,292
Let me actually execute that query again.
140

140

00:07:04,292  -->  00:07:05,872
Notice I had to execute the query
141

141

00:07:05,872  -->  00:07:08,122
in order to fetch them off.
142

142

00:07:09,257  -->  00:07:13,099
So let's go and execute that query one more time.
143

143

00:07:13,099  -->  00:07:16,099
And we'll say this is equal to data,
144

144

00:07:18,857  -->  00:07:21,549
and now if I take a look at data I have this list
145

145

00:07:21,549  -->  00:07:25,196
and I can index off of it as you would expect,
146

146

00:07:25,196  -->  00:07:28,691
tupel and pack it, keep indexing off of it,
147

147

00:07:28,691  -->  00:07:30,781
just to get particular data points.
148

148

00:07:30,781  -->  00:07:32,238
It's really up to you as far as
149

149

00:07:32,238  -->  00:07:35,248
what you're gonna use this type of data for
150

150

00:07:35,248  -->  00:07:39,297
and this sort of Python of psycopg format with.
151

151

00:07:39,297  -->  00:07:41,356
But hopefully, basically these lines are
152

152

00:07:41,356  -->  00:07:43,691
the most important ones and they can really be
153

153

00:07:43,691  -->  00:07:44,938
your building blocks as far as
154

154

00:07:44,938  -->  00:07:48,283
how you're gonna use PostgreSQL with Python.
155

155

00:07:48,283  -->  00:07:50,689
That sort of application's really up to you,
156

156

00:07:50,689  -->  00:07:53,491
and more likely than not it's just gonna be a smaller part
157

157

00:07:53,491  -->  00:07:55,856
or back-end of your application Python
158

158

00:07:55,856  -->  00:07:59,182
when you're communicating with your database.
159

159

00:07:59,182  -->  00:08:01,270
Once you're done communicating and executing
160

160

00:08:01,270  -->  00:08:04,888
off your database, you're gonna wanna close your connexion.
161

161

00:08:04,888  -->  00:08:08,203
So you're gonna wanna say your connexion
162

162

00:08:08,203  -->  00:08:11,051
and go ahead and close it.
163

163

00:08:11,051  -->  00:08:13,416
And that's really all there is to it.
164

164

00:08:13,416  -->  00:08:16,482
You can check out the dot ipy or Python file
165

165

00:08:16,482  -->  00:08:19,315
from the previous lecture or the iPython Notebook file
166

166

00:08:19,315  -->  00:08:22,194
from the previous lecture, to get a couple more useful hints
167

167

00:08:22,194  -->  00:08:26,361
and tips for how to use psycopg2 with PostgreSQL and Python.
168

168

00:08:29,207  -->  00:08:31,574
Other than that, that's really just the basics of it,
169

169

00:08:31,574  -->  00:08:33,078
and that's kind of all you need to know
170

170

00:08:33,078  -->  00:08:35,122
to start exploring how you can use PostgreSQL
171

171

00:08:35,122  -->  00:08:37,500
with your own Python applications.
172

172

00:08:37,500  -->  00:08:40,475
Again, the most important parts are just the import,
173

173

00:08:40,475  -->  00:08:43,109
establishing that connexion, creating the cursor,
174

174

00:08:43,109  -->  00:08:46,174
and then executing the sequel queries.
175

175

00:08:46,174  -->  00:08:49,115
One thing I wanted to note, is to make sure
176

176

00:08:49,115  -->  00:08:53,541
that you kind of avoid using Python's print formatting
177

177

00:08:53,541  -->  00:08:54,928
or string formatting,
178

178

00:08:54,928  -->  00:08:57,258
when you're executing these sequel queries.
179

179

00:08:57,258  -->  00:09:00,514
And what I mean by that is imagine you have this situation,
180

180

00:09:00,514  -->  00:09:03,097
where you want to say, execute,
181

181

00:09:06,003  -->  00:09:08,253
and you input some command.
182

182

00:09:09,270  -->  00:09:12,493
And let's say earlier in your code your command line
183

183

00:09:12,493  -->  00:09:16,576
was something like, maybe it was select all from,
184

184

00:09:18,704  -->  00:09:21,895
and then you were gonna add another string to it later on.
185

185

00:09:21,895  -->  00:09:25,257
So maybe that string was another object.
186

186

00:09:25,257  -->  00:09:27,853
And what I'm trying to say is you may wanna be careful
187

187

00:09:27,853  -->  00:09:30,602
when you're doing this sort of thing with psycopg2
188

188

00:09:30,602  -->  00:09:34,285
and PostgreSQL with Python, because it's kind of dangerous
189

189

00:09:34,285  -->  00:09:38,453
if you accidentally call add something like,
190

190

00:09:38,453  -->  00:09:41,354
drop table later on, this could kind of potentially
191

191

00:09:41,354  -->  00:09:42,900
screw up your database.
192

192

00:09:42,900  -->  00:09:44,218
So just keep that in mind.
193

193

00:09:44,218  -->  00:09:48,217
It's always best practise to put in the entire sequel query
194

194

00:09:48,217  -->  00:09:51,660
as just one single string and to verify
195

195

00:09:51,660  -->  00:09:54,196
that it's a single string that you want.
196

196

00:09:54,196  -->  00:09:56,437
There's a couple more notes on that in the Notebook,
197

197

00:09:56,437  -->  00:09:58,770
but it's just something to be aware of.
198

198

00:09:58,770  -->  00:10:01,656
Okay with that being said, that's really it,
199

199

00:10:01,656  -->  00:10:03,541
as far as just a quick overview
200

200

00:10:03,541  -->  00:10:06,956
of how you can use psycopg2 and PostgreSQL with Python.
201

201

00:10:06,956  -->  00:10:08,825
Feel free to ask any questions
202

202

00:10:08,825  -->  00:10:10,880
in the discussion section of the course.
203

203

00:10:10,880  -->  00:10:14,338
And you can also feel free to refer to the resources
204

204

00:10:14,338  -->  00:10:17,340
from the previous lecture for more hints and more tutorials
205

205

00:10:17,340  -->  00:10:20,075
on how to use this, really this whole library.
206

206

00:10:20,075  -->  00:10:24,242
Okay, thanks everyone and I'll see you at the next lecture.
