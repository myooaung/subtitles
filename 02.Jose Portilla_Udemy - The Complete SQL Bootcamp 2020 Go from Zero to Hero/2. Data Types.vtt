WEBVTT
1
00:00:05.250 --> 00:00:08.840
Welcome back everyone to this lecture on data types.

2
00:00:08.940 --> 00:00:14.400
We've already encountered a variety of data types that we've seen when calling off columns from an existing

3
00:00:14.400 --> 00:00:15.310
table.

4
00:00:15.360 --> 00:00:18.310
Let's quickly review the main data types and sequel.

5
00:00:18.330 --> 00:00:24.670
Since when creating a table we'll have to choose what data type each column should hold.

6
00:00:24.780 --> 00:00:26.040
So here are some data types.

7
00:00:26.040 --> 00:00:31.740
The main one that we've already encountered there is the boolean data type which is just true or false.

8
00:00:31.740 --> 00:00:37.410
There's character data types such as car or care variable car and text.

9
00:00:37.410 --> 00:00:40.970
There's numeric data types like integer and floating point number.

10
00:00:41.130 --> 00:00:47.170
And then there's temporal data types things like date time timestamp and interval as well as timestamp

11
00:00:47.170 --> 00:00:48.520
with time zone.

12
00:00:48.570 --> 00:00:52.950
So we have these generalized categories that we're familiar with and then we actually have data types

13
00:00:52.950 --> 00:01:00.940
within those categories some other not as common ones are things like you you I.D. or universally unique

14
00:01:01.000 --> 00:01:07.780
identifiers which is essentially an algorithmically unique code in order to make sure you have a unique

15
00:01:07.870 --> 00:01:10.350
identifier for a particular row.

16
00:01:10.450 --> 00:01:15.700
Then you also have things like arrays which store an array of strings numbers etc. You can also store

17
00:01:15.700 --> 00:01:21.550
things like Jason there's a store which is a key value pair and they're special types such as a network

18
00:01:21.550 --> 00:01:25.390
address and geometric data.

19
00:01:25.420 --> 00:01:31.120
Now when creating data bases and tables you should carefully consider which data types should be used

20
00:01:31.120 --> 00:01:32.790
for the data to be stored.

21
00:01:32.860 --> 00:01:38.750
And typically we should be doing is reviewing the documentation to see the limitations of the data types.

22
00:01:38.760 --> 00:01:44.490
You can check this out at Post Chris equal dot org slash docs slash current slash data type that H Tam

23
00:01:44.490 --> 00:01:48.910
l. and it reviews all the subsets of the data types that we just mentioned.

24
00:01:48.940 --> 00:01:53.110
So we have the general categories and then we have the particular data types.

25
00:01:53.110 --> 00:01:55.900
So it's an example of what they look like.

26
00:01:55.900 --> 00:02:02.230
Let's imagine we want to store a phone number and we start thinking should it be stored as a numeric

27
00:02:02.290 --> 00:02:05.080
data type such as a large integer.

28
00:02:05.080 --> 00:02:10.570
And if so maybe what type of numeric should we be storing it as just a normal integer a big integer

29
00:02:10.630 --> 00:02:11.270
etc..

30
00:02:11.320 --> 00:02:17.350
So we decide we have this task of storing a phone number and we decide should we store as numeric.

31
00:02:17.350 --> 00:02:23.230
Well first thing we should do is take a look at the online documentation for options and if you go to

32
00:02:23.230 --> 00:02:28.120
that documentation page you'll see a table that looks something like this where you have the name of

33
00:02:28.120 --> 00:02:34.420
a specific data type under the general numerical data type categories and we can see here we have a

34
00:02:34.600 --> 00:02:35.520
bunch of different options.

35
00:02:35.530 --> 00:02:38.890
We have small integers which has a storage size of 2 bytes.

36
00:02:38.890 --> 00:02:44.190
We have integer storage size of 4 bytes big I.A. or big integer for 8 bytes.

37
00:02:44.200 --> 00:02:49.060
We have a general description for these like small range typical choice and then large range and you'll

38
00:02:49.060 --> 00:02:55.930
notice that as you get larger in these possible ranges then the storage size becomes larger and for

39
00:02:55.930 --> 00:02:57.040
a phone number.

40
00:02:57.040 --> 00:03:03.220
Notice that if we just chose small I.A. or small range integer that actually doesn't have enough integers

41
00:03:03.310 --> 00:03:07.000
or digits for us to store a typical phone number.

42
00:03:07.150 --> 00:03:12.760
And then notice we also have other things like decimal double precision etc. These are things that are

43
00:03:12.790 --> 00:03:15.550
unlikely to be needed for a phone number.

44
00:03:15.640 --> 00:03:21.460
So you might be thinking well based on the fact that phone numbers can have extensions or maybe leading

45
00:03:21.460 --> 00:03:27.010
zeros I'll choose something like Big I.A. or a large range integer since it looks like these numbers

46
00:03:27.340 --> 00:03:34.140
are large enough for me to store a full phone number well as I mentioned based on those limitations

47
00:03:34.200 --> 00:03:38.210
you may think it makes sense to store as big I.A. or big integer data type.

48
00:03:38.730 --> 00:03:42.590
But we should really be thinking about what is best for the situation.

49
00:03:42.600 --> 00:03:47.850
Remember we're storing phone numbers so why bother with numerical at all.

50
00:03:47.910 --> 00:03:53.550
We don't perform arithmetic with phone numbers so it probably makes more sense to just use some sort

51
00:03:53.550 --> 00:03:56.580
of text data type like a variable character theta type.

52
00:03:56.790 --> 00:04:02.490
Because you're not going to be adding phone numbers together or subtracting numbers from a phone number.

53
00:04:02.490 --> 00:04:04.700
Once you have a phone number it's pretty much set.

54
00:04:04.710 --> 00:04:11.100
So it probably makes more sense to just store it as a text data type instead of having to even think

55
00:04:11.100 --> 00:04:14.040
about the possible range that is allowed for you.

56
00:04:14.040 --> 00:04:20.830
If you go off a numeric data type in fact what I would recommend you do is always search for best practices

57
00:04:20.890 --> 00:04:26.350
online and you'll quickly discover if you were to just google search how to store phone number postgrad

58
00:04:26.400 --> 00:04:32.800
sequel that it's usually recommended to store as a text based data type due to a variety of issues things

59
00:04:32.800 --> 00:04:37.630
like like I mentioned there's no arithmetic performed on a phone number typically you're not adding

60
00:04:37.630 --> 00:04:42.610
two phone numbers together to get a new phone number and also things to be careful of is especially

61
00:04:42.610 --> 00:04:48.940
when it comes to country codes that leading zeros could cause issues when it comes to numerical 7 and

62
00:04:49.000 --> 00:04:51.450
0 7 can often be treated the same.

63
00:04:51.460 --> 00:04:55.180
However they're definitely not the same when it comes to a phone number.

64
00:04:55.210 --> 00:05:00.790
So if you google search just best practice phone number Postgres sequel you would discover that pretty

65
00:05:00.790 --> 00:05:06.550
much everybody recommends to store it as a text based data type or depending on additional libraries

66
00:05:06.550 --> 00:05:09.460
may use as an actual phone data type.

67
00:05:09.460 --> 00:05:15.070
Now keep in mind there's no built in phone number data type for postcard sequel but you can install

68
00:05:15.100 --> 00:05:20.110
additional libraries specifically designed for that before our use case it probably makes the most sense

69
00:05:20.110 --> 00:05:22.750
to just store it as a text data type.

70
00:05:22.750 --> 00:05:27.130
And these are the sort of considerations you should be thinking of when building out your own tables

71
00:05:27.160 --> 00:05:28.420
and your own databases.

72
00:05:28.690 --> 00:05:32.800
Often just the internets your friend pretty much everyone's already solved these sort of problems already

73
00:05:33.160 --> 00:05:39.780
and there's usually something you can easily who will search for best practices so when creating a database

74
00:05:39.810 --> 00:05:43.650
and table also take your time to plan for long term storage.

75
00:05:43.680 --> 00:05:48.840
Remember you can always remove historical information you've decided you aren't using but you can't

76
00:05:48.840 --> 00:05:51.520
go back in time to add in information.

77
00:05:51.540 --> 00:05:56.160
This goes along with what we discussed during the timestamp and extract lectures.

78
00:05:56.160 --> 00:06:01.500
You can always just remove historical timestamp information but you can't go back in time and add in

79
00:06:01.560 --> 00:06:02.940
more information.

80
00:06:03.060 --> 00:06:09.960
So it's usually easier just to record more information than it is to have to limit yourself for long

81
00:06:09.960 --> 00:06:10.890
term.

82
00:06:10.890 --> 00:06:11.490
All right.

83
00:06:11.490 --> 00:06:16.500
With that being said the main things to consider here is always do a quick google search for best practices

84
00:06:16.860 --> 00:06:22.860
and definitely refer to the documentation to see your full range of options for data types when it comes

85
00:06:22.860 --> 00:06:24.520
to storing your data.

86
00:06:24.540 --> 00:06:26.280
Thanks and I'll see you at the next lecture.
