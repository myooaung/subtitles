1
00:00:05,400 --> 00:00:11,080
Welcome everyone to this lecture on the create keyword Let's not learn the syntax to create a table

2
00:00:11,080 --> 00:00:11,820
and sequel.

3
00:00:11,860 --> 00:00:19,060
Using this create keyword in the generalized column syntax so when you're creating a table.

4
00:00:19,060 --> 00:00:23,980
This is the full General syntax layout and we're going to focus on just a couple of things here and

5
00:00:23,980 --> 00:00:26,490
then we'll walk through some examples in P.G. admin.

6
00:00:26,570 --> 00:00:29,780
But let's go over the general syntax components.

7
00:00:29,880 --> 00:00:34,380
First there is the CREATE TABLE AND THEN YOU choose whatever table name you want.

8
00:00:34,380 --> 00:00:40,960
So you would say something like CREATE TABLE payments or CREATE TABLE CUSTOMERS next are the columns

9
00:00:40,990 --> 00:00:44,290
that are within that table and you'll choose the column name.

10
00:00:44,410 --> 00:00:49,660
Then the data type for the particular column and then you'll add in any column constraints and you just

11
00:00:49,660 --> 00:00:54,850
have this almost as a list of different columns something to pay attention to are the fact that use

12
00:00:54,850 --> 00:00:57,350
commas to separate out these columns.

13
00:00:57,350 --> 00:01:01,900
A really common mistake for beginners is they forget this comma at the end and then you'll get some

14
00:01:01,900 --> 00:01:04,740
sort of weird error that's hard to actually diagnose.

15
00:01:04,750 --> 00:01:11,540
So again remember there's a comma there when we're dealing with the actual columns Next you add in any

16
00:01:11,540 --> 00:01:15,350
table level constraints that you want so you can list off different table constraints.

17
00:01:15,470 --> 00:01:20,030
And we talked about those options in the constraints lecture and then in case you have some sort of

18
00:01:20,030 --> 00:01:25,400
relationship to another table and you can inherit from an existing table.

19
00:01:25,400 --> 00:01:30,800
Now we'll talk about things like table constraints and the inherits command later on for now I really

20
00:01:30,800 --> 00:01:34,890
just want to focus on creating the table and setting up your columns.

21
00:01:35,180 --> 00:01:39,920
So we're gonna fall along right now for this lecture with what I'm going to call common simple syntax

22
00:01:39,950 --> 00:01:43,380
which is just creating the table and then adding in your columns.

23
00:01:43,430 --> 00:01:48,320
Let's work through a very quick example and then we'll go over to PGI admin and actually code it out

24
00:01:49,650 --> 00:01:55,650
so for example syntax you would keep CREATE TABLE those keywords don't change and then you decide on

25
00:01:55,650 --> 00:01:56,660
a table name.

26
00:01:56,820 --> 00:02:01,800
So let's go ahead and make up a player's table then we have to decide what columns are going to be in

27
00:02:01,800 --> 00:02:03,310
our players table.

28
00:02:03,450 --> 00:02:07,770
Typically what you're going to do first is you're going to choose a column to be a primary key.

29
00:02:08,100 --> 00:02:10,280
Typically each table should have a primary key.

30
00:02:10,290 --> 00:02:13,010
Obviously this may change depending on your circumstances.

31
00:02:13,140 --> 00:02:14,900
But let's go ahead and go with that.

32
00:02:14,940 --> 00:02:17,890
So we're gonna have a player I.D. as the column name.

33
00:02:18,030 --> 00:02:23,730
We have to choose a type and almost always especially a postcard sequel when you're trying to think

34
00:02:23,730 --> 00:02:27,420
of a primary key the type should be serial.

35
00:02:27,420 --> 00:02:33,200
So I actually want to focus in on this serial data type because it has some special properties so in

36
00:02:33,260 --> 00:02:39,420
postcard sequel a sequence is a special kind of database object that generates a sequence of integers

37
00:02:39,710 --> 00:02:44,570
and a sequence is often used as a primary key column in a table.

38
00:02:44,600 --> 00:02:50,240
So what Serial is going to do it's going to create a sequence object and set the next value generated

39
00:02:50,240 --> 00:02:53,140
by the sequence as the default value for the column.

40
00:02:53,240 --> 00:02:58,910
And this is perfect for a primary key because it logs unique integer entries for you automatically upon

41
00:02:58,910 --> 00:03:00,020
insertion.

42
00:03:00,080 --> 00:03:05,690
So that means as you're inserting more data into this table you will actually need to worry about providing

43
00:03:05,810 --> 00:03:07,520
a unique player idea yourself.

44
00:03:07,850 --> 00:03:13,640
Instead a serial is going to do this for you which makes sense because as you insert data you're probably

45
00:03:13,640 --> 00:03:18,460
not going to know what actual player I.D. you're on as far as the integer count goes.

46
00:03:18,470 --> 00:03:25,370
So serial takes care of this so what's also nice about cereal is that if a row is later removed the

47
00:03:25,370 --> 00:03:28,200
column with the cereal data type will not adjust.

48
00:03:28,220 --> 00:03:34,420
It's not going to reformat everything in the cereal instead since it's not going to adjust it that's

49
00:03:34,430 --> 00:03:40,160
actually going to mark the fact that a row was moved from the sequence for example in this primary key

50
00:03:40,160 --> 00:03:45,700
column as you're inserting players you may see something like 1 2 3 and let's imagine we inserted 4

51
00:03:45,710 --> 00:03:52,470
5 6 7 and then later on you decide to delete row number four because that player maybe left your team.

52
00:03:52,490 --> 00:03:56,810
What's nice about this is cereal is actually going to show that gap as the primary key.

53
00:03:56,810 --> 00:04:03,770
I'll show one two three five six seven which means as you as a user go back to that table and see that

54
00:04:03,770 --> 00:04:11,000
you're missing number four from the primary I.D. column or primary key column you know now historically

55
00:04:11,000 --> 00:04:13,850
that row four was removed at some point.

56
00:04:13,850 --> 00:04:19,820
So cereal takes care of a lot of problems for us automatically it makes sure that each of these is unique

57
00:04:19,850 --> 00:04:23,950
because it's a sequence that keeps adding one based off the previous value.

58
00:04:24,290 --> 00:04:30,230
And then we ourselves as we insert data into this table don't need to even worry about providing a value

59
00:04:30,260 --> 00:04:37,620
for the primary key column OK so you may already be familiar with this table.

60
00:04:37,620 --> 00:04:42,360
We mentioned that in the data types and you'll notice that there's actually options for different types

61
00:04:42,360 --> 00:04:43,240
of cereal.

62
00:04:43,340 --> 00:04:49,290
There's small cereal which is just two bytes and it goes from one to about thirty three thousand so

63
00:04:49,350 --> 00:04:53,600
three thousand two seven six seven and then we have cereal which is four bytes.

64
00:04:53,610 --> 00:04:58,640
It goes to a larger value and then big cereal goes to a extremely large value.

65
00:04:58,710 --> 00:05:04,230
So you can choose which one of these is appropriate for you depending on how large your table is going

66
00:05:04,230 --> 00:05:08,390
to be so we'll just go ahead and choose cereal again.

67
00:05:08,390 --> 00:05:13,250
You could chose small cereal or big cereal but we'll just choose cereal as our data type because it's

68
00:05:13,250 --> 00:05:18,880
going to be our primary key because as is our primary key we actually type that in as a column constraint.

69
00:05:19,460 --> 00:05:22,010
So we set the table to verify it.

70
00:05:22,010 --> 00:05:24,320
This is a primary key.

71
00:05:24,460 --> 00:05:27,110
And then finally let's go ahead and add in one last column.

72
00:05:27,340 --> 00:05:29,480
So let's go ahead and put the age of the player.

73
00:05:29,620 --> 00:05:31,500
So we have to choose a type for this.

74
00:05:31,540 --> 00:05:36,820
Again you can go back to that table in the documentation decide what types are appropriate.

75
00:05:36,850 --> 00:05:41,210
So if we take a look at this maybe we decide that a small integer is appropriate.

76
00:05:41,290 --> 00:05:46,570
We don't need such a huge integer value arrange for ages especially for people because people can only

77
00:05:46,570 --> 00:05:49,070
go from zero to a little above 100.

78
00:05:49,090 --> 00:05:51,940
We don't need the integer to go to some huge large number.

79
00:05:51,940 --> 00:05:57,220
So we'll go ahead and say that the data type is a small integer and then the column constraint can really

80
00:05:57,220 --> 00:05:58,100
be whatever you want.

81
00:05:58,120 --> 00:06:04,360
But let's imagine that for some reason our league that these players are playing in is constrained by

82
00:06:04,360 --> 00:06:09,040
the age let's say players that are over 18 can no longer play in this league.

83
00:06:09,040 --> 00:06:14,620
So because of this requirement we actually need to make sure that we know the age of the player in which

84
00:06:14,620 --> 00:06:19,360
case we'll want to make sure that a column constraint could be something like not null meaning that

85
00:06:19,360 --> 00:06:24,850
if you're inserting a player into this table you cannot leave the age blank otherwise the table will

86
00:06:24,850 --> 00:06:27,030
reject the new entry.

87
00:06:27,040 --> 00:06:27,390
OK.

88
00:06:27,460 --> 00:06:33,650
So this is an example syntax of creating just a very very simple table so let's go ahead and actually

89
00:06:33,650 --> 00:06:36,750
explore some examples in PGA admin and typing this out.

90
00:06:37,550 --> 00:06:37,790
All right.

91
00:06:37,790 --> 00:06:44,630
Here I am inside of P.G. Ataman to begin I want to make sure we create these tables in a brand new database.

92
00:06:44,630 --> 00:06:48,320
That way we don't excellent contaminate our DVD rental database.

93
00:06:48,320 --> 00:06:53,610
So what I want to do is if you already have a query Ed open which you may have as you're following on

94
00:06:53,640 --> 00:06:56,910
this course you'll notice that it's open as a tab here.

95
00:06:56,930 --> 00:06:59,920
No it says DVD rental post grass et cetera.

96
00:06:59,930 --> 00:07:04,820
Go ahead and right click on this and just click remove panel and it's going to ask you if you want to

97
00:07:04,820 --> 00:07:07,880
save any changes we don't need to worry about that so don't save.

98
00:07:07,880 --> 00:07:12,760
And that way we make sure that we don't actually run this query Ed in DVD rental.

99
00:07:12,800 --> 00:07:16,360
The next thing we're going to do is we're actually going to create a new database.

100
00:07:16,460 --> 00:07:22,730
So underneath Postgres sequel underneath databases right click go to create database and then we're

101
00:07:22,730 --> 00:07:27,920
gonna go ahead and you can really call this database whatever you want I'll call it learning.

102
00:07:27,920 --> 00:07:29,290
And again it's really up to you.

103
00:07:29,300 --> 00:07:33,410
But just for learning how to create databases and tables kind of make sense.

104
00:07:33,410 --> 00:07:36,350
So don't you worry about changing anything else.

105
00:07:36,350 --> 00:07:38,900
Go ahead and click save.

106
00:07:38,980 --> 00:07:41,220
You should see learning appear here.

107
00:07:41,320 --> 00:07:46,530
Go ahead and click on it and then just to make sure everything's working after you click on it and you've

108
00:07:46,540 --> 00:07:47,340
made a connection.

109
00:07:47,350 --> 00:07:50,780
Just hit refresh and then we should be good to go.

110
00:07:50,800 --> 00:07:56,920
So after this I'm going to right click on learning and then I'm going to open up my query tool and the

111
00:07:56,920 --> 00:08:04,720
query tool can not only be used for getting information from a database but we can also run secret commands

112
00:08:04,720 --> 00:08:06,580
to create tables from here.

113
00:08:06,580 --> 00:08:07,950
So that's what I'm going to do.

114
00:08:07,960 --> 00:08:12,940
And just to confirm that we're on learning with this query Ed. Go ahead and take a look at your tab

115
00:08:12,940 --> 00:08:16,120
here and you should see learning here underneath the tab.

116
00:08:16,150 --> 00:08:21,070
OK so now that that's done let's go ahead and create our table.

117
00:08:21,070 --> 00:08:25,580
So the first table we're going to create is just an example account table.

118
00:08:25,690 --> 00:08:27,570
So we have our first keywords.

119
00:08:27,700 --> 00:08:34,880
Create table and let's just say the table name is account and then we have open and close parentheses.

120
00:08:34,890 --> 00:08:40,790
And here over multiple lines is where we can add in the actual column names.

121
00:08:40,840 --> 00:08:47,350
So I'm going to have a user I.D. column and I'm going to set this as serial.

122
00:08:47,510 --> 00:08:52,980
And because it's going to be serial the constraint I'm going to set on it is primary key.

123
00:08:53,000 --> 00:08:59,750
So this is going to be a primary key identifier that is automatically set up for us so that as we learn

124
00:08:59,750 --> 00:09:04,610
how to insert tape insert information into this table we don't actually need to worry about inserting

125
00:09:04,610 --> 00:09:09,680
a user I.D. serial will take care of it for us and that'll make more sense when we talk about the insert

126
00:09:09,680 --> 00:09:10,230
command.

127
00:09:10,580 --> 00:09:11,900
So that's one column.

128
00:09:11,900 --> 00:09:18,210
Don't forget to put in your comma and then we'll have a user name and technically I don't really need

129
00:09:18,210 --> 00:09:23,250
to worry about indentation or spacing but just to make these lineup so it looks a little nicer.

130
00:09:23,250 --> 00:09:28,920
We'll go ahead and do that and then we're gonna have just this be a variable character and we are using

131
00:09:28,920 --> 00:09:29,850
variable character.

132
00:09:29,850 --> 00:09:33,910
You have the pass and the limits of how long you allow this to be.

133
00:09:33,930 --> 00:09:40,320
So this could be a limit of for instance no more than 50 characters inside of the user name string.

134
00:09:40,590 --> 00:09:45,700
And we want to make sure that each user name that is set up here is actually unique.

135
00:09:45,780 --> 00:09:52,260
That way we don't accidentally have people with the same user name so we can set it up to be unique.

136
00:09:52,260 --> 00:09:56,160
The other thing we should probably set up here is that if you're setting up an account with us we can't

137
00:09:56,160 --> 00:09:58,260
just have your user name be blank.

138
00:09:58,260 --> 00:10:02,600
So we also want to make sure that it's a not null constraint here.

139
00:10:02,760 --> 00:10:09,820
So we have that the next thing I want to set up here is a password column so we can store their password.

140
00:10:09,930 --> 00:10:15,360
We'll have this be variable character 50 as well and passwords.

141
00:10:15,390 --> 00:10:17,240
Let's say we don't need to worry about them being unique.

142
00:10:17,250 --> 00:10:19,670
People can maybe have the same password.

143
00:10:19,710 --> 00:10:22,010
Especially if this is not really a security threat.

144
00:10:22,200 --> 00:10:24,200
But we should make sure that they actually have a password.

145
00:10:24,390 --> 00:10:30,810
So we'll again say it cannot be null and obviously there are things like security concerns that we're

146
00:10:30,810 --> 00:10:33,060
not really taking into account here when it comes to password.

147
00:10:33,060 --> 00:10:36,830
So very very simple database really just learning the syntax here.

148
00:10:36,840 --> 00:10:39,780
Let's go ahead and provide an e-mail column.

149
00:10:39,870 --> 00:10:42,210
We'll have this b variable character as well.

150
00:10:42,450 --> 00:10:46,560
Let's say e-mails are typically longer than let's say a 50 character limit.

151
00:10:46,560 --> 00:10:48,320
Some people can have really long emails.

152
00:10:48,360 --> 00:10:52,000
So go ahead and choose something like two hundred and fifty characters available.

153
00:10:52,080 --> 00:10:55,720
And again we want to make sure that there aren't shared e-mails.

154
00:10:55,740 --> 00:11:01,200
So the e-mails just like a user name should be unique and it should also be not in all the constraints

155
00:11:01,290 --> 00:11:05,140
is really going to depend on your specific situation.

156
00:11:05,160 --> 00:11:06,200
So keep that in mind.

157
00:11:06,240 --> 00:11:10,550
Every single table and database has its own unique situation.

158
00:11:10,560 --> 00:11:16,410
So I can't give you some general rules for what constraints you should provide on your own columns because

159
00:11:16,410 --> 00:11:19,590
that really depends on your business situation.

160
00:11:19,590 --> 00:11:22,710
And finally let's go ahead and create some timestamp columns.

161
00:11:22,730 --> 00:11:30,630
We want to keep track of when an actual table is or a row is created like an account is created.

162
00:11:30,690 --> 00:11:36,950
So we'll say created on and we'll have this be a timestamp.

163
00:11:37,130 --> 00:11:38,940
We'll have that be not no.

164
00:11:39,170 --> 00:11:46,690
And let's go ahead and keep track of when the person last logged in so say last log in and also have

165
00:11:46,690 --> 00:11:48,250
that be a timestamp.

166
00:11:48,280 --> 00:11:54,670
So if we scroll down a little bit here just to see the princes that closes this all off.

167
00:11:54,670 --> 00:11:59,060
Notice my very last column didn't actually need to princes cause I'm not adding anything after that.

168
00:11:59,260 --> 00:12:04,480
And also notice that I'm not going to go ahead and say any constraints on last log in because what I

169
00:12:04,480 --> 00:12:10,960
want to make sure that is even if you have just created your account you won't really have a last log

170
00:12:10,960 --> 00:12:14,930
in which means if I said not null here that may have created some sort of error.

171
00:12:14,980 --> 00:12:16,270
So created on.

172
00:12:16,270 --> 00:12:18,910
Should definitely be not no but last log in.

173
00:12:18,940 --> 00:12:24,550
I don't want some sort of error occurring if the person created their account but doesn't have a last

174
00:12:24,550 --> 00:12:26,610
log in because they just created their account.

175
00:12:26,620 --> 00:12:32,120
So that's why there's no constraint here on last log in beyond just the data type having to be a timestamp.

176
00:12:32,650 --> 00:12:40,070
OK so here's our CREATE TABLE account let's go ahead and run this so when you run this it'll say something

177
00:12:40,070 --> 00:12:45,410
like create table query return successfully the data output shouldn't show anything because we're actually

178
00:12:45,410 --> 00:12:47,150
not asking for anything here.

179
00:12:47,210 --> 00:12:50,720
And if you see explain pretty much all this should be blank.

180
00:12:50,750 --> 00:12:54,350
Keep in mind though you can only run this one time.

181
00:12:54,350 --> 00:12:56,470
So take a look here underneath.

182
00:12:56,510 --> 00:12:59,240
Learning schemas.

183
00:12:59,240 --> 00:13:05,570
We have the public schema and then we have now tables expand on that and you can see this new account

184
00:13:05,570 --> 00:13:06,410
table.

185
00:13:06,410 --> 00:13:11,600
So this account if we expand on columns I can see the columns I created and I can actually also see

186
00:13:11,660 --> 00:13:13,340
some of the constraints I created.

187
00:13:13,340 --> 00:13:16,240
So notice here now we have a little primary key constraint.

188
00:13:16,400 --> 00:13:23,030
And on the account email Key has one here basically indicating that there was a specific constraint

189
00:13:23,030 --> 00:13:23,970
there.

190
00:13:23,990 --> 00:13:27,340
OK so we have that all set up ready to go.

191
00:13:27,470 --> 00:13:32,990
Something I want to know which is a really common error is I'm going to induce an error by clicking

192
00:13:33,070 --> 00:13:33,510
execute.

193
00:13:33,560 --> 00:13:39,380
Again if you click execute again the error is actually relatively straightforward it says relation account

194
00:13:39,470 --> 00:13:41,680
already exists which makes a lot of sense.

195
00:13:41,690 --> 00:13:46,970
You don't want to accidentally create the table account again and then overwrite an entire table.

196
00:13:46,970 --> 00:13:52,650
So instead Postgres sequel is going to just tell you hey you can't create that table that already exists.

197
00:13:52,730 --> 00:13:57,830
Later on when we learn about things like the alter command we will be able to alter and edit existing

198
00:13:57,830 --> 00:13:58,910
tables.

199
00:13:58,910 --> 00:14:00,800
So we have this account table.

200
00:14:00,800 --> 00:14:06,290
Now what I want to show you is the ability to create another table and then link them through a foreign

201
00:14:06,290 --> 00:14:07,920
key to show you this.

202
00:14:07,940 --> 00:14:10,480
We're going to start by creating two more tables.

203
00:14:10,640 --> 00:14:12,710
So we have this person with the account.

204
00:14:12,830 --> 00:14:15,660
Let's go ahead and create a job table.

205
00:14:15,800 --> 00:14:19,610
So let's say certain people can be assigned jobs later on.

206
00:14:19,610 --> 00:14:23,240
So we're going to say create table job.

207
00:14:23,900 --> 00:14:26,870
And this job table will have a job I.D. column.

208
00:14:28,220 --> 00:14:36,570
And this is going to be a serial column primary key because it's a unique identifier for the job.

209
00:14:36,570 --> 00:14:39,630
And then the job will have some sort of job name or job description.

210
00:14:39,630 --> 00:14:42,950
So we'll say job name is the other column.

211
00:14:43,260 --> 00:14:45,650
We'll make this variable character.

212
00:14:45,650 --> 00:14:49,680
Let's give it a limit of two hundred and then they should be unique.

213
00:14:49,680 --> 00:14:55,140
That way we don't accidentally have two jobs of the same name and we can't have an empty job so we can't

214
00:14:55,140 --> 00:14:56,910
just have a job idea you have no job.

215
00:14:57,420 --> 00:15:00,090
So here's our create table very simple for the jobs.

216
00:15:00,210 --> 00:15:01,860
Go ahead and run this.

217
00:15:01,920 --> 00:15:02,580
We should get back.

218
00:15:02,580 --> 00:15:04,560
Create table career return successfully.

219
00:15:04,560 --> 00:15:06,750
Remember you can only run this one time.

220
00:15:07,030 --> 00:15:13,740
And I want I want to do is I want to create a table that references both the account and the job.

221
00:15:13,740 --> 00:15:20,340
Basically it's going to be an intermediary table that connects someone's account to their specific job.

222
00:15:20,370 --> 00:15:22,510
And when they were hired for that job.

223
00:15:22,530 --> 00:15:28,240
So this is gonna be the table that shows us how to actually reference a foreign key.

224
00:15:28,290 --> 00:15:31,020
We're going to say create table.

225
00:15:31,020 --> 00:15:32,970
This is going to be the account job.

226
00:15:32,970 --> 00:15:40,890
Table and it's going to have a user I.D. column and this user I.D. column should be the same as the

227
00:15:40,890 --> 00:15:43,500
user I.D. in the account.

228
00:15:43,500 --> 00:15:46,670
Which means it's going to be an integer type.

229
00:15:46,710 --> 00:15:54,090
Notice that I'm not saying serial serial should only be used as a primary key for the table that it's

230
00:15:54,180 --> 00:15:57,830
in when you're using it to reference in another table.

231
00:15:57,840 --> 00:16:02,670
It's just going to show up as a normal integer because serial is really just a sequence of integers.

232
00:16:02,670 --> 00:16:07,830
So because this is going to be a foreign key reference I'm just going to say that my user I.D. is an

233
00:16:07,830 --> 00:16:08,720
integer.

234
00:16:08,940 --> 00:16:11,550
And then here comes the keyword that references

235
00:16:14,120 --> 00:16:17,140
and I need to tell it what column and what table to reference.

236
00:16:17,140 --> 00:16:23,740
So I pass in the table name and then in parentheses I pass in the column name.

237
00:16:23,770 --> 00:16:25,180
Inside that table.

238
00:16:25,180 --> 00:16:32,050
So recall inside of this account I have a user I.D. column.

239
00:16:32,050 --> 00:16:39,520
So the user I.D. column inside the account table will be the reference or foreign key reference for

240
00:16:39,610 --> 00:16:43,630
the user i.e. the integer inside of the account job table.

241
00:16:43,630 --> 00:16:48,340
Now we're going to say comma and let's do the same thing for job I.D..

242
00:16:48,340 --> 00:16:59,760
So we will say job I.D. is also going to be an integer that references from the job table.

243
00:16:59,760 --> 00:17:03,130
The job I.D. column.

244
00:17:03,360 --> 00:17:08,670
And then finally let's go ahead and add in some column that basically tells the person when they were

245
00:17:08,670 --> 00:17:10,230
hired for this job.

246
00:17:10,260 --> 00:17:16,360
So let's say there was a hired date and I'm just going to have that be a timestamp if you want.

247
00:17:16,360 --> 00:17:20,390
You can optionally add in things like it has to be not no but just keep things simple.

248
00:17:20,410 --> 00:17:21,420
I have this hire date.

249
00:17:22,000 --> 00:17:30,840
Let's go ahead and run this so I'm going to expand this a little bit run this and we should see query

250
00:17:30,940 --> 00:17:32,640
or return successfully.

251
00:17:32,640 --> 00:17:37,190
So now I have three tables I have we come back here.

252
00:17:37,200 --> 00:17:40,680
Notice that right now it says tables 1 that's because I need to refresh this.

253
00:17:40,680 --> 00:17:44,160
So typically you're going to need to refresh every time you create a new table.

254
00:17:44,160 --> 00:17:47,400
Go ahead and refresh that lets the database essentially no.

255
00:17:47,420 --> 00:17:54,510
OK here and now the information on the three tables I have job account job and account account was that

256
00:17:54,510 --> 00:17:55,900
first table we created.

257
00:17:55,980 --> 00:18:01,500
And if I take a look at account job taking a look at the columns I have user I.D. job I'm the hired

258
00:18:01,500 --> 00:18:03,760
date then we have these constraints.

259
00:18:03,840 --> 00:18:08,080
I notice now we see essentially information that we have these foreign keys.

260
00:18:08,280 --> 00:18:13,770
You can check out our lectures on primary keys and foreign keys to refer to how you can confirm those

261
00:18:13,770 --> 00:18:15,240
sort of connections.

262
00:18:15,240 --> 00:18:21,690
OK so that's the very basics of creating a table with columns that have both primary key and foreign

263
00:18:21,690 --> 00:18:23,010
key references.

264
00:18:23,010 --> 00:18:26,820
Coming up next we're gonna learn how to insert information into the table.

265
00:18:26,820 --> 00:18:27,330
I'll see you there.
