WEBVTT
1
00:00:05.990 --> 00:00:11.510
Welcome back everyone to a few challenged tasks concerning time stance and extract that we just learned

2
00:00:11.510 --> 00:00:12.470
about.

3
00:00:12.470 --> 00:00:17.150
So we're just gonna give you two tasks for you to answer and it's always we'll go ahead and give you

4
00:00:17.150 --> 00:00:18.240
the expected result.

5
00:00:18.260 --> 00:00:26.060
The hints and the solution so your first task is to answer the following during which months that payments

6
00:00:26.180 --> 00:00:33.010
occur and also format your answer to return back the full month name.

7
00:00:33.190 --> 00:00:40.650
OK so let's go ahead and see the expected result so the expected results are these four months we should

8
00:00:40.650 --> 00:00:45.420
see payments happening in March may February and April.

9
00:00:45.420 --> 00:00:46.950
Coming up next are some hints

10
00:00:50.160 --> 00:00:55.110
so the hints is that you do not actually need to use extract for this query.

11
00:00:55.200 --> 00:00:58.970
So keep that in mind if you're having trouble figuring it out with the extract function.

12
00:00:59.010 --> 00:01:02.270
See if you can use something else we learned about in the previous lectures.

13
00:01:02.370 --> 00:01:12.150
In order to get your answer in here comes an example solution so our solution is to say select and then

14
00:01:12.150 --> 00:01:17.730
we're we're going to do here is we'll do the following we'll go ahead and grab the payment date and

15
00:01:17.730 --> 00:01:23.790
then grab the month from that payment date as a string by saying to character.

16
00:01:23.790 --> 00:01:29.820
And if you just run that then you'll have a bunch of rows listing the full month name and then we can

17
00:01:29.820 --> 00:01:35.080
just select a distinct month names and from the payment table you have your answer.

18
00:01:35.100 --> 00:01:42.360
So again our example solution is to simply convert the payment date to a month long string and then

19
00:01:42.360 --> 00:01:51.480
we can select a distinct month represented time for your next task so your next task is how many payments

20
00:01:51.600 --> 00:01:53.390
occurred on a Monday.

21
00:01:53.460 --> 00:01:59.580
Something to note here is I didn't show you exactly how to grab something like a Monday or a Tuesday

22
00:01:59.580 --> 00:02:00.720
or a day of the week.

23
00:02:00.870 --> 00:02:06.150
But I do want you to be able to either use the documentation online or just a quick Google search in

24
00:02:06.150 --> 00:02:07.020
order to figure this out.

25
00:02:07.140 --> 00:02:12.650
So we're trying to push you in order to be able to use the different resources available for you online

26
00:02:13.050 --> 00:02:15.180
in order to answer real world questions.

27
00:02:15.180 --> 00:02:23.440
So again the task is how many payments occurred on a Monday and here is the expected result to the expected

28
00:02:23.440 --> 00:02:30.100
result is two thousand nine hundred and forty eight payments occurred on a Monday and then here comes

29
00:02:30.150 --> 00:02:35.240
Simmons so the hint is for this one I would recommend using extract.

30
00:02:35.420 --> 00:02:41.120
And if you're stuck on what the keyword is for day of week I would tell you to search the documentation

31
00:02:41.120 --> 00:02:44.630
or google around for d o w as a keyword.

32
00:02:44.630 --> 00:02:50.330
And the last thing to consider is that Postgres sequel considers Sunday as the start of the week and

33
00:02:50.330 --> 00:02:56.170
it's indexed at 0 so 0 corresponds to Sunday and then one corresponds to Monday.

34
00:02:56.310 --> 00:02:56.940
OK.

35
00:02:56.940 --> 00:03:03.950
Here comes our solution so our solution is to simply select count everything or asterisk.

36
00:03:03.950 --> 00:03:10.730
And then from the payment table where and we're going to say extract the day of week from the payment

37
00:03:10.760 --> 00:03:13.520
date where it is equal to 1.

38
00:03:13.580 --> 00:03:19.810
Because if you extract DSW from payment date that will give you back the numerical day of the week.

39
00:03:19.820 --> 00:03:22.050
So zero Sunday one Monday et cetera.

40
00:03:22.220 --> 00:03:25.880
And we're only considering the days of the week that are Monday.

41
00:03:25.880 --> 00:03:31.220
So we say where this is equal to 1 and then we count how many rows are available after that.

42
00:03:31.260 --> 00:03:31.950
Okay.

43
00:03:32.060 --> 00:03:34.320
So that's it for your quick challenge tasks.

44
00:03:34.400 --> 00:03:38.060
If you have any questions feel free to post the CUNY forums we'll see you at the next lecture.
