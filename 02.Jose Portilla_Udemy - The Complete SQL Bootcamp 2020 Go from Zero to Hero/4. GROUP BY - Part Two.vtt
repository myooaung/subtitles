WEBVTT
1
00:00:05.230 --> 00:00:06.180
Welcome everyone to.

2
00:00:06.190 --> 00:00:10.720
Part two of our lecture series on the group by statement.

3
00:00:10.830 --> 00:00:15.840
Let's go ahead and jump toward database and work through some group by examples so we can actually build

4
00:00:15.840 --> 00:00:20.720
in some practice into creating a query that would work with a GROUP BY clause.

5
00:00:20.730 --> 00:00:25.680
I'm going to head straight to P.G. Ataman All right here I am at P.G. admin.

6
00:00:25.690 --> 00:00:29.250
First one I'm going to do is explore the payment table.

7
00:00:29.350 --> 00:00:33.270
I'm going to do this just by saying select everything from the payment table.

8
00:00:33.310 --> 00:00:38.190
Typically wouldn't do this but since we have a small table here it's not so bad to just explore it.

9
00:00:38.230 --> 00:00:40.770
It looks like the payment table we have a payment I.D..

10
00:00:40.780 --> 00:00:43.280
So it's a unique identifier preach payment.

11
00:00:43.420 --> 00:00:47.350
Then we have a customer I.D. So notice here It's categorical.

12
00:00:47.380 --> 00:00:52.960
So even though this is a number this is essentially the actual customer I.D. So this customer three

13
00:00:52.960 --> 00:00:59.230
for one and you can see he's visited multiple times and rented out multiple things and he had different

14
00:00:59.230 --> 00:01:00.640
interactions with different staff.

15
00:01:00.670 --> 00:01:06.700
So we also have a staff I.T. which is also a numeric but we can treat it as a class since it's a kind

16
00:01:06.700 --> 00:01:10.720
of a category here we can think of this almost as the name of the staff person in the same way we can

17
00:01:10.720 --> 00:01:12.070
think of customer ideas.

18
00:01:12.130 --> 00:01:15.280
Here we have kind of a name identifier per customer.

19
00:01:15.280 --> 00:01:16.890
Then we have the rental I.D. here.

20
00:01:16.900 --> 00:01:19.720
Essentially what movie was actually rented.

21
00:01:19.720 --> 00:01:25.750
Later on we'll learn how to join this rental I.D. column to the actual film column to see what actual

22
00:01:25.750 --> 00:01:27.080
film is being rented.

23
00:01:27.220 --> 00:01:32.590
And then we have the amount on that particular transaction as well as the payment date so let's do the

24
00:01:32.590 --> 00:01:38.740
simplest group by possible which is to group together the actual customer I.D..

25
00:01:38.740 --> 00:01:40.390
So what does that actually mean.

26
00:01:40.390 --> 00:01:54.400
Well I could say select customer I.D. from payment group by customer I.D. So if I run this this is actually

27
00:01:54.490 --> 00:01:59.030
essentially the same thing as selecting the distinct customer I.D..

28
00:01:59.140 --> 00:02:03.340
This is a bit of a roundabout way to go about it but if you think what we're doing here we're just kind

29
00:02:03.340 --> 00:02:08.170
of aggregating all the customer I.D. together and we're not performing in the aggregate functions on

30
00:02:08.200 --> 00:02:09.420
any other columns.

31
00:02:09.460 --> 00:02:15.010
So we just get this list of customer I.D. And if I wanted to I could add an order by statement here

32
00:02:15.730 --> 00:02:18.090
to order by that same column.

33
00:02:18.280 --> 00:02:23.890
And essentially I just get the customer I.D. here that we have in the payment table in order.

34
00:02:23.890 --> 00:02:26.080
So nothing too crazy here.

35
00:02:26.080 --> 00:02:31.000
And this is not a typical use case for a group buying but it's the simplest group by possible of just

36
00:02:31.000 --> 00:02:35.350
selecting the column and then grouping by it which is actually the same as essentially it's selecting

37
00:02:35.350 --> 00:02:41.080
the distinct values of that column was probably more helpful is to do this in conjunction with an aggregate

38
00:02:41.080 --> 00:02:42.880
function on another column.

39
00:02:42.940 --> 00:02:48.820
Let's imagine I wanted to answer the question what customer is spending the most money in total.

40
00:02:48.820 --> 00:02:56.550
Well what I could do is take the sum of the amount column in conjunction with grouping by customer I.D..

41
00:02:57.310 --> 00:03:02.320
So if I run this I can now see the total sum that every customer spent.

42
00:03:02.320 --> 00:03:08.530
And then if I wanted to actually order this I would say order by and I can't just say order by amount

43
00:03:09.190 --> 00:03:13.600
I have to say order by the sum amount since that is truly what this column is.

44
00:03:13.600 --> 00:03:15.130
It's not just the amount column.

45
00:03:15.130 --> 00:03:22.360
It's a total sum of the amount column per customer I.D. and a lot of times that the word per really

46
00:03:22.360 --> 00:03:24.640
helps beginners understand what the group buy is doing.

47
00:03:24.880 --> 00:03:32.050
So I can read this as the total sum amount per customer I.D. And I'm going to run this and I can see

48
00:03:32.110 --> 00:03:40.000
this is in order and we can change it from ascending to descending if we want with AFC or DSC and this

49
00:03:40.060 --> 00:03:46.540
is a very typical cycle query that is using group buy to answer a real question what customer I.D. is

50
00:03:46.540 --> 00:03:51.640
actually spending the most amount of money and we can do other things like actually count the number

51
00:03:51.640 --> 00:03:53.190
of transactions they're having.

52
00:03:53.260 --> 00:04:00.220
So I could do something like this instead of actually saying take the sum of the amounts actually just

53
00:04:00.220 --> 00:04:02.790
count how many transactions are having.

54
00:04:02.830 --> 00:04:08.230
So notice here the difference in the question some is asking for the total amount of dollars being transacted

55
00:04:08.620 --> 00:04:11.350
count is just how many transactions are occurring.

56
00:04:11.350 --> 00:04:19.860
So when I run this I can see the counts here with customer name I.D. 148 having 45 total transactions.

57
00:04:19.870 --> 00:04:25.590
OK now well we can also do here is use group buy on multiple columns so we discuss this.

58
00:04:25.600 --> 00:04:27.820
But let's go ahead and see it in practice.

59
00:04:27.850 --> 00:04:32.400
First quickly show you the entire table again so we can get an idea of it.

60
00:04:33.090 --> 00:04:37.650
So again we have that payment I.D. customer I.D. notice there's also a staff I.D..

61
00:04:37.920 --> 00:04:45.210
So what I could start to explore is grouping by customer I.D. and then grouping by staff I.D. or grouping

62
00:04:45.210 --> 00:04:48.150
by staff I.T. and then grouping by customer I.D..

63
00:04:48.930 --> 00:04:52.120
So let's go ahead and show you an example of that.

64
00:04:52.330 --> 00:05:10.790
I'm going to say select customer I.D. staff Ida and then some amount and I'm going to group by staff

65
00:05:10.790 --> 00:05:12.490
I.D. and then

66
00:05:15.240 --> 00:05:23.460
customer I.D. So if I just run this what's happening here is it's telling me the total amount spent

67
00:05:24.270 --> 00:05:27.060
per staff per customer.

68
00:05:27.060 --> 00:05:33.570
So that means customer number one spends sixty dollars ninety five cents with the staff I.D. person

69
00:05:33.570 --> 00:05:40.800
number one and what I could do if I wanted to is order by the customer I.D..

70
00:05:41.690 --> 00:05:48.480
So when I run this I can now essentially see how much each customer spent with each staff member.

71
00:05:48.500 --> 00:05:53.300
So in this case it looks like customer 1 spent sixty dollars ninety five cents of staff I.D. number

72
00:05:53.300 --> 00:05:58.850
one and then fifty three dollars ninety five cents with staff I.D. number two something to keep in mind

73
00:05:58.850 --> 00:06:05.990
here is while the group by order does matter as far as how your grouping things together the actual

74
00:06:05.990 --> 00:06:08.600
select statement that order it doesn't really matter.

75
00:06:08.600 --> 00:06:16.200
So I could if I wanted to organize the results by staff I.D. first and then by customer I.D..

76
00:06:16.350 --> 00:06:20.820
So if we just see those results I'll go in and remove the order by just so we can see those real results

77
00:06:20.820 --> 00:06:21.570
here.

78
00:06:21.570 --> 00:06:25.540
But here I'm essentially not changing any information.

79
00:06:25.830 --> 00:06:29.840
So we still see staff I.D. customer I.D. and then the total sum per customer.

80
00:06:29.940 --> 00:06:39.340
And then if you wanted to you could either order by staff I.D. run that and I can see all the ones here

81
00:06:39.970 --> 00:06:48.350
and then we could do a sub ordering by customer I.D. and so I can see staff I.D. one and then his transactions

82
00:06:48.350 --> 00:06:51.790
if one staff I.D. one is transactions of two et cetera.

83
00:06:51.920 --> 00:06:57.110
Or I could order by customer I.D. run that.

84
00:06:57.110 --> 00:07:02.100
And now notice I see customer I.D. ordered but it's ordered and centred here in the middle.

85
00:07:02.150 --> 00:07:03.630
So keep that in mind.

86
00:07:03.830 --> 00:07:08.660
All of these are essentially showing you the same information but it's up to you how you actually want

87
00:07:08.660 --> 00:07:10.200
to display it.

88
00:07:10.220 --> 00:07:15.540
So most often you're going to actually select things in the same order that you're grouping by in.

89
00:07:16.040 --> 00:07:17.490
So keep that in mind.

90
00:07:17.630 --> 00:07:21.610
And then ordering by it's up to you the pinning on what kind of question you're trying to answer.

91
00:07:21.680 --> 00:07:29.040
So we could have also said order by some on the amount column run that and we get back these results

92
00:07:29.040 --> 00:07:32.470
you can order by any of these three columns or multiple columns.

93
00:07:32.580 --> 00:07:39.950
But the main thing to note here is that I can grouped by multiple columns.

94
00:07:40.180 --> 00:07:45.760
The last thing I want to point out and we will learn about this in much more detail later is when you

95
00:07:45.760 --> 00:07:49.030
do a group by on a date column.

96
00:07:49.030 --> 00:07:54.520
So if we take a look at select everything from payment notice that we had a payment date which was a

97
00:07:54.520 --> 00:08:00.310
time stamp because it's a time stamp and not just has the date information but the time as well.

98
00:08:00.340 --> 00:08:03.850
So it has the hour the minutes the seconds et cetera.

99
00:08:03.910 --> 00:08:10.420
So if we actually want to perform a group by a date we have to call a specialized date function to convert

100
00:08:10.420 --> 00:08:14.260
the time stamp to a date and then we can actually group by that.

101
00:08:14.260 --> 00:08:22.780
So what I'm going to show you is that function first we can say select date from payment dates and we

102
00:08:22.780 --> 00:08:25.710
will learn a lot more about dealing with timestamps later on.

103
00:08:25.870 --> 00:08:31.840
But if we just run this we can expand this column and notice here it's essentially just filtered out

104
00:08:31.840 --> 00:08:38.050
the actual date it's removed that timestamp information which makes sense because we don't want to group

105
00:08:38.080 --> 00:08:41.860
by every single transaction per minute.

106
00:08:42.080 --> 00:08:44.440
We probably want to do is just group by day.

107
00:08:44.560 --> 00:08:50.260
So I'm going to say select the date on the actual payment date timestamp which essentially just the

108
00:08:50.260 --> 00:08:59.240
day from payment and then let's go ahead and group by date payment date.

109
00:08:59.270 --> 00:09:04.820
If I run this this is essentially just returning back the distinct dates but maybe I want to figure

110
00:09:04.820 --> 00:09:08.220
out how much is actually being processed each day.

111
00:09:08.600 --> 00:09:17.280
So I could take the sum of the amount column run that as well and then maybe I want to order by the

112
00:09:17.280 --> 00:09:19.550
actual some amount.

113
00:09:19.550 --> 00:09:26.280
Column run that and I can see the days where we're having the least amount and total dollar transactions

114
00:09:26.760 --> 00:09:33.090
or pending how I sort this by sort of in descending order I can see the dates that were having the most

115
00:09:33.150 --> 00:09:34.980
in dollar transactions.

116
00:09:34.980 --> 00:09:42.150
Again what the state function is doing is it's extracting just the day portion from that timestamp information

117
00:09:42.510 --> 00:09:47.670
because if you just said group by payment date the main thing to keep mine is I don't want to just group

118
00:09:47.670 --> 00:09:54.630
buy that payment date because it was a timestamp information down to the sub second which means I would

119
00:09:54.630 --> 00:09:59.570
essentially almost have a unique category per payment which isn't terribly useful.

120
00:09:59.580 --> 00:10:04.980
However we did have multiple payments on the same day which is why I'm using date to extract just the

121
00:10:04.980 --> 00:10:11.220
actual year month and day information from payment date which then means I can group buy that.

122
00:10:11.220 --> 00:10:11.620
All right.

123
00:10:12.000 --> 00:10:15.500
So you've seen a couple of examples here already with using group buy.

124
00:10:15.750 --> 00:10:20.580
What I want to do is give you a couple of challenge tasks and these challenge tasks are going to be

125
00:10:20.580 --> 00:10:25.740
a bit harder than what you've encountered before because we are making a bit more of a leap in learning

126
00:10:25.740 --> 00:10:30.160
about group by as far as what operations and queries we are now capable of.

127
00:10:30.480 --> 00:10:35.970
So keep that in mind these challenges won't be as simple as the ones we saw before but hopefully they

128
00:10:35.970 --> 00:10:37.860
give you a good run for your money.

129
00:10:37.860 --> 00:10:41.460
All right I'll see you at the next lecture where we present the group by challenges.
