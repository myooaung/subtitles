WEBVTT
1
00:00:05.350 --> 00:00:11.900
Welcome back everyone to this lecture on SELECT DISTINCT sometimes a table contains a column that has

2
00:00:11.900 --> 00:00:16.970
duplicate values and you may find yourself in a situation where you only want to list the unique or

3
00:00:16.970 --> 00:00:22.730
distinct values in that column the distinct keyword can be used to return only the distinct values in

4
00:00:22.730 --> 00:00:26.630
a column the distinct keyword operates on a column.

5
00:00:26.650 --> 00:00:28.630
So that means the syntax looks like this.

6
00:00:28.660 --> 00:00:34.690
We say select and then distinct right in front of whatever column were is said in grabbing the unique

7
00:00:34.720 --> 00:00:42.230
or distinct values from and then we'll specify what table this column is in sometimes to clarify which

8
00:00:42.230 --> 00:00:44.280
column distinct is being applied to.

9
00:00:44.300 --> 00:00:46.680
You could also add in parentheses for clarity.

10
00:00:46.790 --> 00:00:50.700
So note that distinct on a column works with or without parentheses.

11
00:00:50.720 --> 00:00:56.790
This is what it would look like with parentheses and again it'll work without parentheses as well.

12
00:00:56.790 --> 00:01:02.070
Later on when we learn about adding more calls such as a count call and a distinct call together some

13
00:01:02.070 --> 00:01:07.110
sort of parentheses structure will actually be necessary to clarify what is actually being called on

14
00:01:07.110 --> 00:01:07.380
a what.

15
00:01:07.800 --> 00:01:13.230
But we're going to see that in a future lecture let's first think about what does that actually means

16
00:01:13.240 --> 00:01:19.400
call distinct on a column Imagine a table of people who were surveyed to choose a color.

17
00:01:19.410 --> 00:01:26.160
So here we have the names of the person just their first name and then the color choice they made let's

18
00:01:26.160 --> 00:01:30.900
imagine we actually call it select distinct from the name column from The Color table.

19
00:01:31.050 --> 00:01:36.780
We'll notice that we have two instances of David inside this name column which means when we actually

20
00:01:36.780 --> 00:01:43.200
select distinct names from this table it's going to return back the following just the unique first

21
00:01:43.200 --> 00:01:45.360
names in this actual column.

22
00:01:45.390 --> 00:01:49.890
Keep in mind that given the previous example we don't really know if the person of the named David was

23
00:01:49.890 --> 00:01:55.080
the duplicate entry who happened to change their color choice later on as the same person or if it was

24
00:01:55.080 --> 00:02:00.350
two different people that happened to have the same first name calling distinct on this particular column

25
00:02:00.360 --> 00:02:06.150
just answer the question what are the unique first names that are there in that table or in that column

26
00:02:07.730 --> 00:02:11.450
it probably makes more sense to ask how many types of unique color choices were there.

27
00:02:11.480 --> 00:02:15.790
So what we can do is say select distinct choice from the color table.

28
00:02:15.800 --> 00:02:21.410
And here we have all the distinct or unique color options that were chosen let's go ahead and see a

29
00:02:21.410 --> 00:02:24.040
couple more cases of when distinct would be useful.

30
00:02:24.090 --> 00:02:26.570
We're gonna jump over to P.G. Adelman All right.

31
00:02:26.570 --> 00:02:32.180
Here I am at the query editor but I'm going to do is first explore the film table and there's different

32
00:02:32.180 --> 00:02:33.180
ways I can do this.

33
00:02:33.230 --> 00:02:39.500
This is a pretty small database I could either expand on this film table to see what columns are available

34
00:02:39.500 --> 00:02:44.570
fill my D I can scroll over here title description or I could just say the following.

35
00:02:44.810 --> 00:02:51.410
Select everything from film and it's OK to do this since this is basically kind of a toy database and

36
00:02:51.410 --> 00:02:53.600
toy table it's not gonna be huge.

37
00:02:53.600 --> 00:02:59.980
So we'll go ahead and just run that and we can see here we have the film I.D. the title description

38
00:02:59.980 --> 00:03:00.850
released here.

39
00:03:01.000 --> 00:03:05.980
Language I.D. and I can keep scrolling to see other information and other columns that are available

40
00:03:06.370 --> 00:03:15.200
inside of this film table so let's think about what kind of questions the state can help answer distinct

41
00:03:15.650 --> 00:03:20.120
really helps when we want to know the unique values inside of a column.

42
00:03:20.240 --> 00:03:27.380
And if we take a look at these actual tables here something we may want to know are how many different

43
00:03:27.380 --> 00:03:36.740
release years do we have inside of this film database and what we can do here is say select distinct

44
00:03:36.800 --> 00:03:41.090
and I'll put it in all caps since we're treating it as a sequel keyword.

45
00:03:41.090 --> 00:03:49.030
You can see it's highlighted as such and then we'll call it on release underscore year from film.

46
00:03:49.130 --> 00:03:55.820
So if I run this what's happening here is it's going to return back just 2006.

47
00:03:55.820 --> 00:04:00.810
So this quickly answers the question how many unique release years we have inside this film table and

48
00:04:00.830 --> 00:04:02.320
it ends up we just have one.

49
00:04:02.330 --> 00:04:10.680
All of these films were released in 2006 if we take a look back at this I should also note that we can

50
00:04:11.160 --> 00:04:18.510
add in parentheses and we can see here that it's directly connected to distinct and if we run this we'll

51
00:04:18.510 --> 00:04:20.070
get back the exact same results.

52
00:04:20.160 --> 00:04:24.510
And for some people this is more legible coming back through old school queries.

53
00:04:24.510 --> 00:04:25.510
It works either way.

54
00:04:25.560 --> 00:04:28.320
So it's really up to you if you want to use parentheses or not.

55
00:04:29.220 --> 00:04:34.000
Let's come back and take a look at the entire table again just so we can check out the columns.

56
00:04:34.080 --> 00:04:36.100
You'll notice here we have the release here.

57
00:04:36.180 --> 00:04:40.530
Something else that's interesting are these rental rates and it does look like we had different numeric

58
00:04:40.530 --> 00:04:43.620
rental rates so some movies rent for four ninety nine.

59
00:04:43.620 --> 00:04:45.250
Some rent for 99 cents.

60
00:04:45.270 --> 00:04:51.330
Others rent four to ninety nine distinct can help us answer the question how many unique rental rates

61
00:04:51.330 --> 00:04:59.270
do we have what we can do then is just say select distinct and with or without parentheses we can say

62
00:05:00.200 --> 00:05:06.420
on rental rate we'll go ahead and run this and here we can see that we have three distinct rental rates

63
00:05:06.750 --> 00:05:11.140
essentially a low tier make sense to name the nine and four ninety nine.

64
00:05:11.220 --> 00:05:16.460
Later on we'll be learning how to actually sort these or order them based off a certain value.

65
00:05:16.560 --> 00:05:21.720
But right now Postgres sequel just returns back information as efficiently as possible.

66
00:05:21.730 --> 00:05:27.440
So you may actually get these in a different order depending on your operating system.

67
00:05:27.440 --> 00:05:28.070
All right.

68
00:05:28.070 --> 00:05:30.470
That's it for the lecture on select distinct.

69
00:05:30.560 --> 00:05:35.630
Coming up next we're going to quickly test your new skills by giving you a quick little challenge on

70
00:05:35.630 --> 00:05:37.040
select distinct.

71
00:05:37.040 --> 00:05:37.610
I'll see their.
