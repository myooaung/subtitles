1
00:00:07,650 --> 00:00:10,420
Welcome back everyone to this lecture on the No.

2
00:00:10,440 --> 00:00:13,170
If function the No.

3
00:00:13,170 --> 00:00:17,660
If function takes in just two inputs and returns no.

4
00:00:17,700 --> 00:00:22,830
If both are equal otherwise it returns the first argument passed.

5
00:00:22,830 --> 00:00:25,250
So the syntax we're going to be using is you say no.

6
00:00:25,260 --> 00:00:27,960
If and then pass in the two arguments.

7
00:00:27,960 --> 00:00:35,130
So for example if you pass in ten and ten into the null if function since 10 is equal to 10 it's going

8
00:00:35,130 --> 00:00:35,840
to return.

9
00:00:35,850 --> 00:00:37,290
No.

10
00:00:37,350 --> 00:00:43,350
However if you were to pass in ten and twelve since those are not equal to each other it's going to

11
00:00:43,350 --> 00:00:51,120
return 10 this becomes very useful in cases where he null value would cause an error or an unwanted

12
00:00:51,120 --> 00:00:52,110
result.

13
00:00:52,170 --> 00:00:58,800
Let's go ahead and show an example of this so let's imagine we have this particular very simple table

14
00:00:59,310 --> 00:01:03,910
and we want to calculate the ratio of people in Department A to Department B.

15
00:01:04,170 --> 00:01:09,600
So for example we have the three entries so Lauren events and and Claire and their department.

16
00:01:09,630 --> 00:01:17,780
So A and B and we can easily see here that the ratio of A to B is two to one or two hundred percent.

17
00:01:17,780 --> 00:01:23,420
So we can actually use sequel to solve this with a case statement.

18
00:01:23,420 --> 00:01:27,890
So what we're gonna do is we're gonna jump to P.G. Ataman quickly create this table and then walk through

19
00:01:27,920 --> 00:01:34,520
solving that ratio and then I'm going to edit this table slightly to show you why you may need a no

20
00:01:34,610 --> 00:01:35,330
if statement.

21
00:01:35,760 --> 00:01:39,260
OK let's jump the PGA admin and quickly create this table.

22
00:01:39,260 --> 00:01:39,550
All right.

23
00:01:39,550 --> 00:01:41,130
Here I am in P.G. admin.

24
00:01:41,150 --> 00:01:45,740
The first thing I want to do is I want to make sure that I'm not editing an existing database like the

25
00:01:45,740 --> 00:01:47,090
DVD rental database.

26
00:01:47,090 --> 00:01:52,030
Instead go ahead and create a database specifically for testing purposes.

27
00:01:52,130 --> 00:01:57,950
If you haven't done so already from previous lectures go ahead and right click on post sequel and create

28
00:01:57,980 --> 00:02:01,940
a new database you can call it whatever you want and then just hit save.

29
00:02:02,000 --> 00:02:05,780
So I've called my test me and it's for testing purposes.

30
00:02:05,780 --> 00:02:10,550
So here I have under Test Me I'm going to right click and then set up my query tool.

31
00:02:10,820 --> 00:02:16,210
So confirm that your query tool is connected to this test database by reading the tab here and notice

32
00:02:16,220 --> 00:02:19,520
now right here it says test me Postgres sequel.

33
00:02:19,520 --> 00:02:27,500
OK so now that I'm in this test database let's create this simple table we'll say create table and let's

34
00:02:27,500 --> 00:02:33,860
call this table just DP T.S. for departments and it's very simple just has two columns which is the

35
00:02:33,890 --> 00:02:35,030
first name column.

36
00:02:35,030 --> 00:02:42,060
So let's say first name and the first name just make it a variable character up to 50.

37
00:02:42,210 --> 00:02:47,160
No constraints and then the second one is going to be the actual department therein.

38
00:02:47,400 --> 00:02:49,680
So that will also be variable character.

39
00:02:49,680 --> 00:02:54,610
Let's go ahead and say 50 and make sure we put a comma here so we don't get an error.

40
00:02:54,630 --> 00:02:57,210
So again very simple table just holds departments.

41
00:02:57,210 --> 00:03:00,870
Same one we saw on the slides a first name and a Department letter.

42
00:03:00,870 --> 00:03:05,070
So we'll go ahead and run this and the table has been created successfully.

43
00:03:05,080 --> 00:03:08,250
Now let's go ahead and insert into this table so I can do that.

44
00:03:08,370 --> 00:03:09,810
Delete this.

45
00:03:09,810 --> 00:03:17,430
Create table will say insert into departments and I'm going to be inserting first name.

46
00:03:17,430 --> 00:03:23,890
No longer need that variable character and I'm also going to be inserting department and then after

47
00:03:23,980 --> 00:03:29,870
this insert command recall that we have values and then we say what values we're actually going to insert.

48
00:03:29,890 --> 00:03:35,180
So I want to insert the same ones or roughly the same ones that I had in the slides.

49
00:03:35,200 --> 00:03:43,880
So let's go ahead and say lips single quote here Vinton we'll have this person be in the apartment a

50
00:03:44,750 --> 00:03:48,190
comma another entry here we're gonna have Lauren.

51
00:03:48,440 --> 00:03:50,860
This person is also in the apartment a.

52
00:03:51,140 --> 00:03:57,680
And then finally we'll have Claire and this person is in Department B.

53
00:03:57,800 --> 00:04:03,020
So pretty simple here and then we're gonna end it with semicolon just to clarify that's the end of our

54
00:04:03,020 --> 00:04:03,490
statement.

55
00:04:03,950 --> 00:04:07,410
So we're inserting into the department's stable first name in the apartment.

56
00:04:07,410 --> 00:04:13,250
Vincent Lauren and Claire go ahead and run that the insert should a return successfully if not make

57
00:04:13,250 --> 00:04:17,450
sure you're checking for typos such as missing comments and then what I wanna do is confirm all this

58
00:04:18,080 --> 00:04:25,460
by selecting everything from this new department table run that and I can see here the results I have

59
00:04:25,530 --> 00:04:27,060
Vinson Lauren and Claire.

60
00:04:27,600 --> 00:04:34,760
OK so as I mentioned let's imagine that I wanted to calculate the ratio between male and female members.

61
00:04:34,940 --> 00:04:39,800
So the way I can do that is actually using a case statement.

62
00:04:39,830 --> 00:04:48,550
So what I'm going to do is I'm going to select and this is we're going to be doing a some call so I'm

63
00:04:48,550 --> 00:04:55,970
going to sum up the case when departments

64
00:04:58,810 --> 00:05:07,930
is equal to a then one else zero and then it just right is kind of as a one liner.

65
00:05:07,980 --> 00:05:09,170
So what is that doing.

66
00:05:09,180 --> 00:05:13,130
It's just going to essentially count up how many people are in the apartment.

67
00:05:13,140 --> 00:05:18,750
So that should just create an extra column with ones for the A's and then zeros for the B's and then

68
00:05:18,750 --> 00:05:20,930
what I want to do is sum that up.

69
00:05:20,940 --> 00:05:27,580
So essentially this is going to be equal to two since there's two A's and then I'm going to take this.

70
00:05:27,690 --> 00:05:32,380
Let's go ahead and then make sure our parentheses are OK.

71
00:05:32,460 --> 00:05:44,870
So going to take that results and I'm going to divide it by the sum of the case when the apartment is

72
00:05:44,870 --> 00:05:51,520
equal to B then 1 else 0 end.

73
00:05:51,520 --> 00:05:53,080
So what does this actually doing.

74
00:05:53,080 --> 00:05:58,330
This is basically again adding up all the A's so there's gonna be equal to 2 and then this is adding

75
00:05:58,330 --> 00:06:04,660
up all the B's equal to 1 and then we're gonna take those two sums and then divide this sum using this

76
00:06:04,660 --> 00:06:08,500
division operator with this sum OK.

77
00:06:08,620 --> 00:06:12,250
So that should get me a two to one ratio right.

78
00:06:12,280 --> 00:06:15,280
So then two divided by one should be equal to two.

79
00:06:15,490 --> 00:06:23,110
And then what I'm going to do here is after this what I'm gonna say is as an analyst call this the Department

80
00:06:23,110 --> 00:06:34,450
ratio so say the apartments underscore ratio and I'm doing this all from this department table OK so

81
00:06:34,450 --> 00:06:40,650
again doing those sums dividing it to get the ratio as the partner ratio from apartments.

82
00:06:40,720 --> 00:06:47,830
Go ahead and run this and you should get back to since there was two A's to want to be so far nothing

83
00:06:47,830 --> 00:06:51,000
too crazy and we haven't actually used the null if function yet.

84
00:06:52,720 --> 00:06:57,970
So what I'm going to do is now show you what happens if there actually are no more people in Department

85
00:06:57,970 --> 00:07:01,970
B let's go ahead and say that person department B left.

86
00:07:01,990 --> 00:07:08,380
So that means currently having a person department B to do this I'm going to delete this code and don't

87
00:07:08,380 --> 00:07:11,830
worry still available to us in our query history as long as we ran it.

88
00:07:11,830 --> 00:07:23,020
And then I'm going to type out delete from the apartments and I'm going to delete where the apartment

89
00:07:23,350 --> 00:07:28,740
is equal to be so run that and that.

90
00:07:28,810 --> 00:07:30,490
Notice that deleted one row.

91
00:07:30,490 --> 00:07:37,930
So let's go ahead and say select from the apartments run this and I only have people from the apartment

92
00:07:37,950 --> 00:07:38,670
a.

93
00:07:38,980 --> 00:07:44,200
So let's go ahead and see what happens if I try running that same ratio.

94
00:07:44,200 --> 00:07:49,150
So I'm going to go to my query history and note here I have the select command of the league command

95
00:07:49,590 --> 00:07:51,400
and I have this select some.

96
00:07:51,400 --> 00:07:56,950
So go ahead and copy this your query editor or you can retype it again if you wanted to but I just copied

97
00:07:56,950 --> 00:08:02,620
from query history to create editor run that same code again and you'll notice that you get an error

98
00:08:03,130 --> 00:08:09,100
this error makes sense because we are currently dividing by zero which you cannot do.

99
00:08:09,100 --> 00:08:15,640
So how can we use the know if functionality in order to make sure that instead of getting an error we

100
00:08:15,640 --> 00:08:22,420
just get back a null a null is a good indication that there essentially is no one in one of these departments

101
00:08:22,720 --> 00:08:26,810
instead of having a full error in which case it's not really clear what's happening.

102
00:08:27,070 --> 00:08:35,530
So we're gonna do is use the null if around this second one right here in order to say return a null

103
00:08:36,130 --> 00:08:38,580
if there happens to be a zero there.

104
00:08:38,590 --> 00:08:47,830
So the way I do that is recall that no if is going to return a null if they both match.

105
00:08:47,830 --> 00:08:53,620
So that means if both arguments match the both arguments I pass to know if then it returns a null.

106
00:08:53,620 --> 00:08:55,880
And right now I want to return a no.

107
00:08:56,050 --> 00:09:00,260
If this entire sum happens to be zero.

108
00:09:00,310 --> 00:09:10,290
So what I'm going to do is pass in this entire sum call go ahead and cut that and paste that into no

109
00:09:10,350 --> 00:09:15,610
if and then the second parameter I'm passing into the No.

110
00:09:15,620 --> 00:09:20,010
If and be careful of your parentheses here is going to be zero.

111
00:09:20,030 --> 00:09:24,960
So what this is saying is if both of these happen to be equal to each other.

112
00:09:24,980 --> 00:09:30,650
Meaning if the result of this sum is equal to zero return a null.

113
00:09:30,770 --> 00:09:33,400
Otherwise if these don't happen to be equal to each other.

114
00:09:33,770 --> 00:09:36,740
So the sum is actually returning something then just return.

115
00:09:36,740 --> 00:09:38,090
The first argument.

116
00:09:38,090 --> 00:09:40,390
So keep in mind order does matter within this.

117
00:09:40,430 --> 00:09:43,910
No if function because it's going to return the first one.

118
00:09:43,940 --> 00:09:46,220
If they don't happen to be equal to each other.

119
00:09:46,220 --> 00:09:52,370
So now when I run this instead of getting an error it's going to return back a null because if you try

120
00:09:52,370 --> 00:09:58,640
to divide something by null then that simply returns a null instead of a division by zero error.

121
00:09:58,760 --> 00:10:01,440
So you really common use case for a null.

122
00:10:01,550 --> 00:10:07,610
If it's just to check against something and specifically with the way databases are often designed to

123
00:10:07,610 --> 00:10:12,500
check against something being equal to zero and then it happens to be equal to that go ahead and return

124
00:10:12,530 --> 00:10:14,760
a null instead.

125
00:10:14,780 --> 00:10:15,280
Okay.

126
00:10:15,560 --> 00:10:17,070
So definitely take your time with this one.

127
00:10:17,090 --> 00:10:22,160
I know the codes a little bit complex here because we're using this case statement but if you just take

128
00:10:22,160 --> 00:10:26,700
your time and read through the logic of what's happening here it's pretty understandable that we're

129
00:10:26,710 --> 00:10:31,420
essentially using null if as a check against returning a zero.

130
00:10:31,430 --> 00:10:34,010
Okay thanks and I'll see you at the next lecture.
