WEBVTT
1
00:00:05.440 --> 00:00:13.400
Welcome everyone to this lecture on the left outer join otherwise known simply as just a left join a

2
00:00:13.400 --> 00:00:17.960
LEFT OUTER JOIN results in the set of records that are in the left table.

3
00:00:17.960 --> 00:00:22.070
If there is no match with the right table then those results are null.

4
00:00:22.130 --> 00:00:30.250
Later on we will learn how to add where statements to further modify a LEFT OUTER JOIN So what is a

5
00:00:30.250 --> 00:00:32.710
left outer join actually look like here.

6
00:00:32.710 --> 00:00:38.500
Notice that our Venn diagram is no longer symmetrical which means the order will actually matter.

7
00:00:38.500 --> 00:00:44.860
Here we're saying select everything from table lay and do a left outer join on table be the left hand

8
00:00:44.860 --> 00:00:51.400
table is the first table referred to in that from statement so it's Y table a there is seen on the left.

9
00:00:51.400 --> 00:00:58.150
So we're saying select everything from table A A LEFT OUTER JOIN ON TABLE be on table a column match

10
00:00:58.240 --> 00:01:04.710
is equal to Table B that column match so notice we're essentially just grabbing information from table

11
00:01:04.710 --> 00:01:12.220
A where there's either exclusive table a or table has a match with something in Table B if something

12
00:01:12.220 --> 00:01:20.880
is only found in Table B then it is not going to be returned in the query and again recall that a left

13
00:01:20.910 --> 00:01:27.000
outer join can be Shorten to this left join in circle syntax so it doesn't matter if you use left join

14
00:01:27.090 --> 00:01:31.380
or left outer join now because of this a cemetery.

15
00:01:31.450 --> 00:01:34.630
This is where beginning students often get confused.

16
00:01:34.690 --> 00:01:39.520
Previously everything we saw ever was symmetrical in that Venn diagram which means the table ordered

17
00:01:39.520 --> 00:01:45.070
that it mattered when it comes to a left hand or join your left join the order does matter because we

18
00:01:45.070 --> 00:01:48.490
have to actually specify what the left table is going to be.

19
00:01:48.970 --> 00:01:54.160
So those here we're saying table A which means we're gonna grab things that are exclusive to table a

20
00:01:54.550 --> 00:01:55.780
or can be found in both.

21
00:01:55.780 --> 00:02:04.480
Table a table B we're not going to be returning anything exclusive to Table B so again not returning

22
00:02:04.480 --> 00:02:12.220
anything exclusive the table B so let's explore a left outer join with our two example tables here we

23
00:02:12.220 --> 00:02:19.600
have registrations and Loggins so we're going to say here is say select everything from registrations

24
00:02:20.110 --> 00:02:27.040
performing left outer join on Loggins on registrations that name equal to Loggins not name and what

25
00:02:27.040 --> 00:02:29.440
does this actually look like.

26
00:02:29.490 --> 00:02:34.440
Well it's going to return the following recall that we're gonna grab everything from the registrations

27
00:02:34.440 --> 00:02:40.050
table and if there happens to be a match with the Loggins table we'll go ahead and return it if there

28
00:02:40.050 --> 00:02:45.570
is no match we're still gonna grab that information from the left hand table which is from registrations

29
00:02:45.900 --> 00:02:52.140
but because there's nothing in table before it we're going to fill it in with no notice that things

30
00:02:52.140 --> 00:02:58.920
that were exclusive to the right hand table that is the Loggins table or table B that was here and Yolanda

31
00:02:59.070 --> 00:03:02.340
we don't actually see them in this result of the left outer join.

32
00:03:02.610 --> 00:03:08.340
Previously when we saw a full outer join we did see those results but now because we're specifying a

33
00:03:08.340 --> 00:03:14.580
left outer join we only see things based on that left hand registrations table it either belongs to

34
00:03:14.610 --> 00:03:22.800
both tables or only two registrations if it only belonged to Loggins we don't see it returned here so

35
00:03:22.800 --> 00:03:27.720
again everything from registrations ends up showing up in this left outer join.

36
00:03:27.720 --> 00:03:33.250
Which is why it's critical to remember that table order does matter in the sequel query syntax.

37
00:03:33.270 --> 00:03:37.380
When it comes to a left outer join or a left join.

38
00:03:37.780 --> 00:03:45.660
Now we can further qualify this with a where statement to get Rose unique only to the left table so

39
00:03:45.660 --> 00:03:49.320
for instance what if we only wanted entries unique to table a.

40
00:03:49.500 --> 00:03:54.820
Those are rows found in table a and not found in Table B.

41
00:03:54.930 --> 00:04:01.920
So we're essentially just grabbing rows unique to table a not found this other table so the way we do

42
00:04:01.920 --> 00:04:03.570
that is by saying the following.

43
00:04:03.840 --> 00:04:10.620
We're going to again select from table A do A LEFT OUT OR JOIN ON TABLE B specify that column to match

44
00:04:10.620 --> 00:04:17.520
on and then we're gonna say we're table B is null because of Table B is no that means the resulting

45
00:04:17.520 --> 00:04:24.820
rows would only be unique to table a So recall this was our previous query.

46
00:04:24.830 --> 00:04:29.960
This is just the left out or join registrations and Loggins and what we're gonna do here is we take

47
00:04:29.960 --> 00:04:36.920
a look at the log and I.D. column we notice we have those no values so we're gonna say here is go ahead

48
00:04:37.220 --> 00:04:44.270
and grab where log and start log I.D. is null and because the Loggins I.D. That is from the right hand

49
00:04:44.270 --> 00:04:45.920
table or table B was no.

50
00:04:46.130 --> 00:04:54.320
This answers the question that these particular rows are exclusive to the left hand table or the registrations

51
00:04:54.320 --> 00:04:55.190
table.

52
00:04:55.190 --> 00:04:59.360
So Charlie and David could only be found in the registrations table.

53
00:04:59.420 --> 00:05:01.740
They cannot be found in the Loggins table.

54
00:05:01.790 --> 00:05:08.330
So this is a left out or join with an additional specification to only grab tables unique to the left

55
00:05:08.330 --> 00:05:11.020
hand table that is table a or registrations.

56
00:05:11.090 --> 00:05:16.370
In this example so definitely take your time with these and feel free to watch this video a couple more

57
00:05:16.370 --> 00:05:17.150
times.

58
00:05:17.180 --> 00:05:21.650
Sometimes it takes students just a couple of times watching this video to truly get the understanding

59
00:05:21.710 --> 00:05:22.940
of a left outer join.

60
00:05:22.940 --> 00:05:29.470
This is the most complicated join because it is a non symmetrical join so let's see some examples of

61
00:05:29.470 --> 00:05:31.360
a left outer join and P.G. admin.

62
00:05:31.570 --> 00:05:36.490
If this is still a little fuzzy to you I would highly recommend that you go back watch us from the beginning

63
00:05:36.520 --> 00:05:43.010
just let things submit theoretically and then come with us and join some secret queries and PGI admin.

64
00:05:43.010 --> 00:05:43.210
Okay.

65
00:05:43.230 --> 00:05:45.090
Gonna hop over to P.G. admin now.

66
00:05:45.090 --> 00:05:51.070
All right the two tables were going to be exploring for this particular example is the film table which

67
00:05:51.100 --> 00:05:55.540
I can just select everything first from the film table so we can get an idea of what's in it.

68
00:05:56.670 --> 00:05:57.330
So I run this.

69
00:05:57.330 --> 00:06:01.370
We have a film I.D. which is a unique identifier per film.

70
00:06:01.410 --> 00:06:08.220
The film's title a description really seer language idea rental duration etc. So we have that information

71
00:06:08.220 --> 00:06:08.690
here.

72
00:06:08.700 --> 00:06:10.700
Basically information about the film.

73
00:06:11.130 --> 00:06:14.970
The other table will be taking a look at is the inventory table.

74
00:06:14.970 --> 00:06:22.680
So the inventory table if we run this it basically has a unique inventory I.D. and then the film I.D.

75
00:06:22.890 --> 00:06:26.250
which matches up with the film table and then the store I.D..

76
00:06:26.340 --> 00:06:33.930
So essentially this says that we have film by the one located in store I.D. one and then we have another

77
00:06:33.930 --> 00:06:39.750
repeat essentially a duplicate copy of film I.D. one also in store I.D. one.

78
00:06:39.750 --> 00:06:45.990
So this essentially begins to imply that we have multiple copies of films in certain stores and we also

79
00:06:45.990 --> 00:06:52.280
have the possibility of films only being located in one of our two stores.

80
00:06:52.350 --> 00:06:54.490
So let's start exploring this.

81
00:06:54.540 --> 00:07:00.820
Keep in mind each row in the film table may have zero or many rows in the inventory table.

82
00:07:00.840 --> 00:07:07.810
So for example we have film ideas one is currently in inventory both in-store i.e. one in-store I.D.

83
00:07:07.810 --> 00:07:08.310
2.

84
00:07:08.340 --> 00:07:11.730
So we have lots of copies of film I.D. one in both stores.

85
00:07:11.730 --> 00:07:24.400
So what I'm going to do is the following we'll say select film the film I.D. film that title and then

86
00:07:25.120 --> 00:07:33.880
inventory I.D. So the reason I specify inventory idea for tables because it's unique to the inventory

87
00:07:33.880 --> 00:07:38.010
table however film I.D. can be found in the film table.

88
00:07:38.040 --> 00:07:42.410
And in fact title is actually unique to the film tables.

89
00:07:42.410 --> 00:07:44.380
I don't need to mention that as a table as well.

90
00:07:44.410 --> 00:07:50.970
So we have select film I.D. title and inventory I.D. And this is where we're going to do our joint will

91
00:07:50.970 --> 00:08:00.020
say select from film left and you can say either left outer join or just left join.

92
00:08:00.020 --> 00:08:11.720
Those are syntax wise the same thing we're going to say inventory on inventory the film I.D. equal to

93
00:08:11.720 --> 00:08:18.900
film that film I.D. we run this and know what we're having here.

94
00:08:18.920 --> 00:08:25.430
So basically telling us the film I.D. the title that belongs that film and then its specific inventory

95
00:08:25.460 --> 00:08:25.900
I.D..

96
00:08:26.340 --> 00:08:32.630
And if I wanted to I could expand on this by asking for also the store I.D. I could run this again and

97
00:08:32.630 --> 00:08:38.920
I can see we have academy dinosaur multiple copies and store one as well as multiple copies in store

98
00:08:38.930 --> 00:08:39.840
too.

99
00:08:39.890 --> 00:08:49.900
So that is a left join essentially showing us the left joining of film on inventory.

100
00:08:49.940 --> 00:08:51.450
So what does that actually mean.

101
00:08:51.500 --> 00:08:54.960
Because film is on the left hand side.

102
00:08:55.130 --> 00:09:03.080
I'm only going to see rows that are either in just to film table or in both film and inventory.

103
00:09:03.080 --> 00:09:10.100
Right now I am not seeing any films where they happen to only be in inventory for some reason but not

104
00:09:10.100 --> 00:09:19.440
have some sort of title attached so because some rows in the film table do not have corresponding rows

105
00:09:19.560 --> 00:09:24.870
in the inventory table we would see that the values of the inventory I.D. are no.

106
00:09:24.870 --> 00:09:30.420
So there's lots of rows here but eventually you scroll down you may find something to be known.

107
00:09:30.660 --> 00:09:41.420
So what I'm going to do here is show you that we're going to say where the inventory dot film I.D. note

108
00:09:41.500 --> 00:09:49.990
here how I have to specify the table for film I.D. because it is found in both tables and I'm going

109
00:09:49.990 --> 00:09:58.380
to say is no I'm going to run that and often you also see no being all caps.

110
00:09:58.380 --> 00:10:03.120
So keep in mind you can also just do all caps no run that and it looks the same.

111
00:10:03.130 --> 00:10:04.810
It's up to you whichever manner you prefer.

112
00:10:05.410 --> 00:10:11.050
But what does this actually showing us this is showing us a film I.D. a unique identifier for the film

113
00:10:11.530 --> 00:10:17.320
as well as a title and it's showing you that we don't have this in inventory which means essentially

114
00:10:17.320 --> 00:10:25.480
if someone comes up to us and they ask Hi where or what store can I find Alice Fantasia in we can do

115
00:10:25.480 --> 00:10:31.440
this query and it basically answers it that we don't actually have Alice Fantasia in our inventory.

116
00:10:31.480 --> 00:10:36.580
In fact we don't have any of these movies currently either in our inventory or in any store.

117
00:10:36.580 --> 00:10:37.780
We have information on them.

118
00:10:37.810 --> 00:10:42.820
I can tell you the release date or the actors in them et cetera from the film table and maybe doing

119
00:10:42.850 --> 00:10:43.830
other joins.

120
00:10:43.870 --> 00:10:47.640
But unfortunately right now we don't have them in inventory.

121
00:10:47.890 --> 00:10:54.670
And so here you can begin to see the use case for a left outer join essentially showing us films that

122
00:10:54.670 --> 00:11:01.240
we have information about but that are not in our inventory because we're specifically checking where

123
00:11:01.240 --> 00:11:04.130
that inventory film I.D. is null.

124
00:11:05.080 --> 00:11:09.120
OK so that's it for this lecture on the left join.

125
00:11:09.160 --> 00:11:12.180
Keep in mind we're going to get more practice on this with your challenge questions.

126
00:11:12.190 --> 00:11:16.270
So feel free to review this lecture as many times as necessary.

127
00:11:16.510 --> 00:11:18.010
Thanks and I'll see you at the next lecture.
