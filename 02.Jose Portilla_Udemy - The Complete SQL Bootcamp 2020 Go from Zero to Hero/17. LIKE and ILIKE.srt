1
00:00:05,440 --> 00:00:09,550
Welcome back everyone to this lecture on like and I like.

2
00:00:09,550 --> 00:00:12,030
And really it's more than just these two key words.

3
00:00:12,160 --> 00:00:16,870
This lecture is about using pattern matching with string data.

4
00:00:17,050 --> 00:00:22,510
We've already been able to perform direct comparisons against strings such as where first name is equal

5
00:00:22,510 --> 00:00:23,860
to John.

6
00:00:23,860 --> 00:00:29,230
But what happens if we want to match against a general pattern in a string that enables us to answer

7
00:00:29,230 --> 00:00:38,020
questions such as all e-mails ending in at gmail dot com or all names that begin with a capital A The

8
00:00:38,050 --> 00:00:44,380
like operator allows us to perform pattern matching against string data with the use of special wild

9
00:00:44,380 --> 00:00:45,850
card characters.

10
00:00:45,850 --> 00:00:50,920
So there's two main wildcard characters we're gonna cover right now and that is the percent sign which

11
00:00:50,920 --> 00:00:52,930
matches any sequence of characters.

12
00:00:52,930 --> 00:00:55,740
So essentially any number of characters.

13
00:00:55,870 --> 00:00:58,900
And then there's the underscore which matches any single character.

14
00:00:59,050 --> 00:01:05,690
Essentially a wild card for just a single character inside of a string so let's see a couple of examples

15
00:01:05,690 --> 00:01:05,990
of this.

16
00:01:05,990 --> 00:01:07,680
We'll start off with the percent sign.

17
00:01:07,760 --> 00:01:14,360
So the percent sign is a wild card character for any sequence of letters or characters.

18
00:01:14,360 --> 00:01:19,350
So this basically specify something like all names that begin with a capital A.

19
00:01:19,370 --> 00:01:25,310
So we would say where name like and then a string where we have the capital A and then the percent sign

20
00:01:25,460 --> 00:01:27,130
essentially saying you'll match.

21
00:01:27,160 --> 00:01:33,800
Anything that starts for capital A and then has any number of sequence of characters effort then we

22
00:01:33,800 --> 00:01:37,160
could do something like all names that end with a lower case A.

23
00:01:37,670 --> 00:01:39,800
So then we have where name like.

24
00:01:39,890 --> 00:01:43,360
And then we start off with the percent sign and end for lowercase a.

25
00:01:43,400 --> 00:01:49,760
Essentially saying that anything or any sequence characters can come before that lowercase a notice

26
00:01:49,760 --> 00:01:55,350
I've been saying things like uppercase or lowercase and that's because like is case sensitive.

27
00:01:55,430 --> 00:02:03,640
However you can always use I like which is going to be case insensitive now using the underscore allows

28
00:02:03,640 --> 00:02:05,800
us to replace just a single character.

29
00:02:05,800 --> 00:02:10,240
For example let's imagine we were storing the Mission Impossible films and they were titled something

30
00:02:10,240 --> 00:02:12,770
like Mission Space and possible space.

31
00:02:12,850 --> 00:02:19,180
And then one two three or four etc. so we could do something like where a title like and then Mission

32
00:02:19,180 --> 00:02:20,500
Impossible space.

33
00:02:20,620 --> 00:02:26,470
And then the underscore just leaves a single wild card place to fill in whatever number we're looking

34
00:02:26,470 --> 00:02:29,220
for.

35
00:02:29,250 --> 00:02:30,930
Now you can use multiple underscores.

36
00:02:30,960 --> 00:02:37,650
So imagine we had a version string codes in the format something like version numerical or hash tag

37
00:02:37,670 --> 00:02:41,130
a four and then version hash tag B 7 etc..

38
00:02:41,190 --> 00:02:45,420
So that would be something like where value like version hash tag.

39
00:02:45,450 --> 00:02:49,530
And then to underscores where those two underscores can be filled of any sort of characters you want.

40
00:02:49,590 --> 00:02:57,300
So the essentially leaves open any two characters to fill in those specific underscore positions.

41
00:02:57,310 --> 00:03:01,930
Now what's nice about this is then we can begin to combine powder matching operators to create more

42
00:03:01,930 --> 00:03:03,300
complex patterns.

43
00:03:03,370 --> 00:03:10,450
So take a look at this example where we say we're a name like and then underscore HCR percent sign.

44
00:03:10,930 --> 00:03:15,910
So if we think about what this is actually asking for this is returning back and we've color coded it

45
00:03:15,910 --> 00:03:23,980
here a single wild card space for the first letter and then after H.P. are any sequence or any number

46
00:03:23,980 --> 00:03:25,000
of characters can occur.

47
00:03:25,510 --> 00:03:31,840
So here we have Cheryl which starts off a single C then HCR and that has two characters after that or

48
00:03:32,310 --> 00:03:36,620
Teresa which has a capital T ACR and then ESEA.

49
00:03:36,700 --> 00:03:43,390
So notice here it has to be just one character before HCR but then any number of characters after it.

50
00:03:43,390 --> 00:03:48,350
So this allows for a really powerful pattern matching code.

51
00:03:48,360 --> 00:03:53,950
Now we're just focusing on like and I like and those two wildcards of an underscore and a percent sign.

52
00:03:54,090 --> 00:03:59,940
But in case you're familiar with something called regular expression or regex in other languages such

53
00:03:59,940 --> 00:04:06,870
as Python or C++ I want you to keep in mind that postcard sequel actually does support these full regular

54
00:04:06,870 --> 00:04:12,600
expression capabilities and you can check out the link here or just go to the docs and look up functions

55
00:04:12,600 --> 00:04:18,720
matching and not only is have information on like an I like but also goes to much more detail on regular

56
00:04:18,720 --> 00:04:19,580
expressions.

57
00:04:19,620 --> 00:04:24,540
We're not going to cover those for right now instead of we'll just focus on like and I like let's check

58
00:04:24,540 --> 00:04:31,490
out some examples in admin on our own DVD rental database OK here we are at the query editor.

59
00:04:31,730 --> 00:04:36,950
Let's imagine I wanted to figure out how many people actually have a name that starts with J.

60
00:04:37,010 --> 00:04:44,990
Well I could say select and we'll start off by selecting everything from the customer table and we're

61
00:04:44,990 --> 00:04:53,360
going to check where their first name is like and then notice here and going to say capital J.

62
00:04:53,750 --> 00:04:55,240
And then percent sign.

63
00:04:55,490 --> 00:05:00,110
And then if I run this I get back the results for every one that has a first name that starts with the

64
00:05:00,110 --> 00:05:01,470
letter J.

65
00:05:01,700 --> 00:05:06,230
And if I wanted to actually figure out how many of these there were I could simply just provide a count

66
00:05:06,230 --> 00:05:10,880
on the number of rows returned and I get back there sixty five people who have the first name it starts

67
00:05:10,880 --> 00:05:12,470
with the letter J.

68
00:05:12,470 --> 00:05:14,620
Now I can't keep adding on to this.

69
00:05:14,630 --> 00:05:24,430
So then I could say something like and last name like and let's go ahead and do something such as.

70
00:05:24,430 --> 00:05:30,910
Starts with an S I'm not actually sure if there's someone like this but we can run this and check.

71
00:05:30,920 --> 00:05:32,600
OK it looks like there's five people.

72
00:05:32,600 --> 00:05:34,370
Let's go ahead and explore those names.

73
00:05:34,370 --> 00:05:38,160
Just grab all those rows for those customers run them.

74
00:05:38,180 --> 00:05:41,970
And here we can see there's Julie Sanchez Jeffrey Speer et cetera.

75
00:05:41,990 --> 00:05:42,580
OK.

76
00:05:42,920 --> 00:05:44,790
So that's how it worked for the.

77
00:05:44,810 --> 00:05:50,930
Percent sign and notice here that I had to make sure to use capital J because I'm using like if I were

78
00:05:50,930 --> 00:05:57,220
to lowercase one of these and run this again I get back nothing because this is case sensitive.

79
00:05:57,680 --> 00:06:05,950
Alternatively if I don't want to worry about case I can use I like run this and it'll return back the

80
00:06:05,950 --> 00:06:08,060
results Whip's excellent changes to J.

81
00:06:08,160 --> 00:06:10,540
Go and change that back to s run that again.

82
00:06:10,540 --> 00:06:12,340
OK so there we go.

83
00:06:12,370 --> 00:06:17,920
I like is case insensitive which means it doesn't matter if I use the lowercase J here or a capital

84
00:06:18,010 --> 00:06:22,770
J and a capital S. I run this again it's gonna be the same result either way.

85
00:06:23,230 --> 00:06:28,530
So I like is case insensitive like is case sensitive just something to keep in mind.

86
00:06:28,730 --> 00:06:33,940
And we can always add in more than just a single wild card character for example we could do something

87
00:06:33,940 --> 00:06:34,620
like this.

88
00:06:34,630 --> 00:06:41,020
I can say first name like and let's imagine I wanted to figure out people who have the sequence of characters

89
00:06:41,140 --> 00:06:42,910
e are somewhere in their name.

90
00:06:42,910 --> 00:06:49,610
So I could do something like percent sign e r percent sign I run that.

91
00:06:49,840 --> 00:06:56,220
And basically what that's asking for is anyone who has e r somewhere in their first name.

92
00:06:56,260 --> 00:06:59,390
Now notice they'll return something back like Jennifer.

93
00:06:59,440 --> 00:07:05,870
So E R is at the end of Jennifer and this sequence of characters can also be nothing it can be zero.

94
00:07:05,920 --> 00:07:09,280
So that means e are just that's a show up anywhere inside this name.

95
00:07:09,280 --> 00:07:11,630
So Kimberly has the E.R. here in the middle.

96
00:07:11,650 --> 00:07:16,300
Katherine does as well but something like Heather has it at the end and that's still is OK with this

97
00:07:16,300 --> 00:07:17,320
sort of code.

98
00:07:17,320 --> 00:07:20,540
So just because it has a percent sign doesn't mean it has to fill in something there.

99
00:07:20,590 --> 00:07:23,520
It can be blank and we can keep doing this.

100
00:07:23,590 --> 00:07:29,430
Maybe we want something like her somewhere in the name run that and I can see Katherine Heather etc.

101
00:07:30,160 --> 00:07:36,280
Or we can do what we did in the slides which is replace one of these with a single underscore which

102
00:07:36,280 --> 00:07:39,070
means only one character is now allowed in that space.

103
00:07:39,070 --> 00:07:41,110
So now when I run this I only see back.

104
00:07:41,190 --> 00:07:47,470
Cheryl Theresa Sherry and Sherry often I so note the difference here is now only one character is allowed

105
00:07:47,800 --> 00:07:54,390
before this h e r something that's also important to note and we'll finish this off is to show you that

106
00:07:54,390 --> 00:07:58,230
you can also add in the not operator to essentially get the opposite.

107
00:07:58,350 --> 00:08:01,800
So I can say Kimberly everything that's not like this.

108
00:08:01,830 --> 00:08:08,160
Essentially everyone that isn't these four people so I can just run this and here I see everyone that

109
00:08:08,310 --> 00:08:13,620
wasn't in that list of four people and then can combine this with things like logical operators such

110
00:08:13,620 --> 00:08:21,450
as and so I could do something like let's say we're first name like and let's say has to start with

111
00:08:21,450 --> 00:08:22,300
funny.

112
00:08:22,430 --> 00:08:28,620
So we go ahead and run this and we can see everyone who's first name starts off funny and let's go ahead

113
00:08:28,620 --> 00:08:35,070
and order it by the last name so we can start kind of getting more complicated here ordered by last

114
00:08:35,070 --> 00:08:43,620
name run this and I could see I'm Austin Angel Barclay Agnes Bishop et cetera but let's imagine for

115
00:08:43,620 --> 00:08:49,560
some reason I didn't want any one whose last name start off would be so I wanted to remove Barclay Bishop.

116
00:08:49,560 --> 00:08:51,450
Bradley burns and Butterfield here.

117
00:08:51,600 --> 00:09:00,410
Well it can begin adding things so her first name is like a and then we can say something like and last

118
00:09:00,410 --> 00:09:08,470
name not like and then we'll say starts of a B.

119
00:09:08,620 --> 00:09:13,750
So we go ahead and run this and now I can see I got rid of those people had a last name started for

120
00:09:13,770 --> 00:09:20,680
a b and yet retain everyone who has a first name starts funny so you begin to create really custom patterns

121
00:09:20,680 --> 00:09:23,420
for whatever you're looking for just these wild cards.

122
00:09:23,440 --> 00:09:28,810
So keep in mind you always have the percent sign and the underscore available 2 percent sign for a long

123
00:09:28,810 --> 00:09:33,110
sequence of characters underscore just for a single replacement character.

124
00:09:33,130 --> 00:09:33,780
All right.

125
00:09:34,000 --> 00:09:35,670
Thanks and we'll see you at the next lecture.
