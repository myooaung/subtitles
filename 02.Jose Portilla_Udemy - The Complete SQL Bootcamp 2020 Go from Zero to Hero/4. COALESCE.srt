1
00:00:05,730 --> 00:00:13,960
Welcome back everyone to this lecture on the coalesce function the coalesced function accepts an unlimited

2
00:00:13,960 --> 00:00:15,640
number of arguments.

3
00:00:15,640 --> 00:00:21,670
It returns the first argument that is not null if all arguments are no.

4
00:00:22,180 --> 00:00:24,550
Then they coalesce function or return.

5
00:00:24,610 --> 00:00:25,590
No.

6
00:00:25,600 --> 00:00:28,610
So in practice you simply have the coalesce function.

7
00:00:28,810 --> 00:00:34,960
And then you provide in any number of arguments in order that you want them to be evaluated in and typically

8
00:00:34,960 --> 00:00:37,480
they are going to be column names.

9
00:00:37,580 --> 00:00:39,770
And so to show you very simple examples.

10
00:00:39,770 --> 00:00:47,080
If you say select coalesce one two it's going to go along and order until it finds the first nominal

11
00:00:47,130 --> 00:00:47,850
value.

12
00:00:47,960 --> 00:00:49,700
In this case it's simply one.

13
00:00:49,730 --> 00:00:50,750
So it returns one.

14
00:00:51,410 --> 00:00:57,040
However if one of the values ends up being null first such as select coalesce no comma to come a three

15
00:00:57,500 --> 00:00:58,870
then the first value is no.

16
00:00:58,880 --> 00:01:00,380
So continuous along.

17
00:01:00,380 --> 00:01:06,910
Finally it finds a nominal value which is to put returns back to now of course I'm sure by now you're

18
00:01:06,910 --> 00:01:10,690
wondering when is this actually going to become useful.

19
00:01:10,690 --> 00:01:17,380
Well the coalesce function becomes useful when you're querying a table that contains no value and perhaps

20
00:01:17,380 --> 00:01:22,420
you try and perform some sort of operation on it which you can't actually perform a final value.

21
00:01:22,510 --> 00:01:27,250
So in case it's not you want to substitute it with another value.

22
00:01:27,250 --> 00:01:33,020
I want to show you a really common example so here we have a table of products.

23
00:01:33,040 --> 00:01:39,970
We have the item name ABC the original price one hundred dollars 300 dollars 200 dollars and then a

24
00:01:39,970 --> 00:01:41,520
discount in dollars.

25
00:01:41,560 --> 00:01:48,280
So if the price or excuse me if the item has a discount off the price it's listed in the discount column.

26
00:01:48,280 --> 00:01:51,440
So item a currently has a discount of 20 dollars.

27
00:01:51,580 --> 00:01:53,610
Item B does not have a discovery now.

28
00:01:53,620 --> 00:01:54,680
So it's no.

29
00:01:54,700 --> 00:01:58,090
And then item C has a discount of 10 dollars.

30
00:01:58,090 --> 00:02:05,210
So here we have a really common issue where we have a null value because something doesn't exist.

31
00:02:05,230 --> 00:02:08,280
So technically Item B does not have a discount.

32
00:02:08,350 --> 00:02:09,850
So it's a null value there.

33
00:02:10,000 --> 00:02:15,740
But if we're trying to perform mathematical operations that is technically a discount of zero.

34
00:02:15,760 --> 00:02:23,350
So it's really common to use coalesce to actually replace no values with a 0 for calculation without

35
00:02:23,350 --> 00:02:31,160
having to effect or alter your original table so let's imagine we're trying to answer the question What

36
00:02:31,160 --> 00:02:36,470
is the final price which is going to be the price column minus the discount column.

37
00:02:36,470 --> 00:02:43,040
Well we could try the following We could say select the item column comma and then calculate here parentheses

38
00:02:43,040 --> 00:02:50,390
price column minus discount column as final let's say as the final price from table.

39
00:02:50,390 --> 00:02:56,480
Now unfortunately that gets us this result so we're able to correctly calculate the final price for

40
00:02:56,480 --> 00:03:06,620
items A and C but since the discount was no for Item B sequel can't actually subtract no from an integer.

41
00:03:06,620 --> 00:03:09,110
So those are kind of incompatible data types.

42
00:03:09,140 --> 00:03:14,540
So instead it relays back the information to you essentially alerting you to the fact that one of the

43
00:03:14,540 --> 00:03:20,230
items was null by telling you that item B for final price is null.

44
00:03:20,240 --> 00:03:25,100
Now in this particular situation we actually do not want the null value there.

45
00:03:25,100 --> 00:03:27,190
Instead we want to know the correct discount.

46
00:03:27,200 --> 00:03:33,160
So this is where coalesce comes into play so since this doesn't work for Item B we want it to be three

47
00:03:33,160 --> 00:03:36,000
hundred essentially three hundred minus zero.

48
00:03:36,000 --> 00:03:37,950
We're going to use coalesce.

49
00:03:37,950 --> 00:03:45,690
And so this is where we can use coalesce in a clever fashion in order to fill in values for a null in

50
00:03:45,690 --> 00:03:49,260
case they pop up without having to effect the original table.

51
00:03:49,260 --> 00:03:56,070
So here we're going to say select item comma price minus and instead of just subtracting the discount

52
00:03:56,070 --> 00:04:01,970
column or we're going to do is say coalesce this cow comma zero.

53
00:04:01,980 --> 00:04:08,400
So think about what's happening here logically sequel his first going to check this count and check

54
00:04:08,400 --> 00:04:10,130
if it's a nominal value.

55
00:04:10,230 --> 00:04:13,500
So if it's not null meaning there's actually a number there.

56
00:04:13,680 --> 00:04:16,310
It's simply going to return back that number.

57
00:04:16,320 --> 00:04:22,140
So if there's a number for the discount such as 10 or 20 returns back that particular number.

58
00:04:22,170 --> 00:04:29,960
However if this count is null then it continues on to the next value which in our case is zero.

59
00:04:29,970 --> 00:04:36,360
So super common just to how these two values in a coalesce function to basically say hey if this particular

60
00:04:36,360 --> 00:04:42,300
column happens to be no go ahead and substitute in this next value which in our case is zero.

61
00:04:42,300 --> 00:04:46,110
So now we no longer get a no value for Item B.

62
00:04:46,110 --> 00:04:50,500
Instead we get price minus zero which is three hundred for that particular row.

63
00:04:50,730 --> 00:04:51,030
Okay.

64
00:04:51,030 --> 00:04:57,170
So that's really where you're going to be be seeing coalesce used a lot in the real world.

65
00:04:57,380 --> 00:05:03,290
So I want you to keep the COLAs function in mind in case you ever encounter a table of null values that

66
00:05:03,290 --> 00:05:05,660
you want to perform operations on.

67
00:05:05,660 --> 00:05:11,060
However you don't want to actually go in and do any changes to the table itself because it's often nice

68
00:05:11,060 --> 00:05:17,150
to understand that there's a null value there essentially indicating that there currently is no discount

69
00:05:17,150 --> 00:05:23,060
on that product for example and not that in this particular case there's a zero discount because those

70
00:05:23,060 --> 00:05:25,940
can mean different things depending on the situation.

71
00:05:25,940 --> 00:05:31,340
So again we have that useful function coalesce which will come in handy if you ever want to do substitutions

72
00:05:31,580 --> 00:05:33,470
like that in the future.

73
00:05:33,470 --> 00:05:34,640
I'll see you at the next lecture.
