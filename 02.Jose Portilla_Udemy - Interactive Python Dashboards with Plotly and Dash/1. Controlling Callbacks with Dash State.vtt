WEBVTT
ï»¿1
00:00:05.250 --> 00:00:11.670
Welcome back in this lecture we're going to talk about controlling callbacks with state in the previous

2
00:00:11.730 --> 00:00:16.140
interactive examples we've already seen how inputs immediately affect outputs.

3
00:00:16.140 --> 00:00:21.630
Basically as soon as values were entered into our input the page updates to reflect any changes to the

4
00:00:21.630 --> 00:00:23.240
output.

5
00:00:23.320 --> 00:00:25.980
But what if we wanted to wait before displaying the page.

6
00:00:26.090 --> 00:00:31.280
What if we wanted some time to enter a series of changes before actually submitting them for the update.

7
00:00:32.500 --> 00:00:35.870
Well this is where Dashti Pinsky's state comes in.

8
00:00:35.890 --> 00:00:42.220
So just like we imported input and output from Dasch dependencies we can also import state from dependencies

9
00:00:42.770 --> 00:00:47.730
Dasch offers the ability to store save changes and then send them back on command.

10
00:00:47.740 --> 00:00:51.250
You can think of this as analogous to hitting a submit button on a form.

11
00:00:51.370 --> 00:00:56.670
You first fill out all the information on the form and then you hit submit in order to update something.

12
00:00:56.830 --> 00:01:00.620
Your information doesn't get updated as you fill out the actual form.

13
00:01:00.670 --> 00:01:06.800
It's only upon hitting submit that the state gets called so state is added.

14
00:01:06.810 --> 00:01:11.280
The app callback along with an input output and that's really the main implementation.

15
00:01:11.370 --> 00:01:16.590
It's just adding another thing to app that callback and then that state just like that for input output

16
00:01:16.670 --> 00:01:22.380
is connected to a component ID and a property ID and or its report back and you can check out the component

17
00:01:22.380 --> 00:01:27.030
API documentation to see what properties are available for the components.

18
00:01:27.590 --> 00:01:32.940
Or what would you do now is create a simple input output example and then add on a state call to it.

19
00:01:32.960 --> 00:01:35.680
So let's get started by heading over toward sex ed..

20
00:01:35.710 --> 00:01:42.140
Ok first things first we're going to do our imports will say import dash will import Dasch core components

21
00:01:43.040 --> 00:01:53.630
as DCC will also import dash HTL components as HTL and then from dasht dependencies.

22
00:01:53.750 --> 00:02:01.730
We're now going to import three things we'll do input output and then state and we will state right

23
00:02:01.730 --> 00:02:03.920
away instead will add on state later.

24
00:02:04.160 --> 00:02:09.980
So those are imports we're going to create an application and let's first create an application that

25
00:02:09.980 --> 00:02:14.060
only needs input and output and then we can add on State to it later.

26
00:02:14.060 --> 00:02:24.470
So in our app layout what we're going to do is say HVM l div and then we're going to add in an input

27
00:02:24.890 --> 00:02:26.450
from a core component.

28
00:02:26.930 --> 00:02:30.930
So we'll say DCC input will give an ID.

29
00:02:31.040 --> 00:02:39.310
We'll go ahead and say call this number n we'll give the full value of 1 and then let's make the font

30
00:02:39.310 --> 00:02:41.290
size on this a little bigger.

31
00:02:41.290 --> 00:02:46.620
So I can do that by saying style is equal to and it can pass in font size here.

32
00:02:47.540 --> 00:02:51.790
To be something larger maybe something like 24.

33
00:02:51.990 --> 00:02:59.380
And then after this we're going to have h t m l l haven't had one component.

34
00:02:59.610 --> 00:03:03.300
Well give an idea of number out.

35
00:03:03.630 --> 00:03:07.680
So all this is going to do if someone's going to be able to choose a number in the input and then each

36
00:03:07.730 --> 00:03:09.140
one is going to reflect it.

37
00:03:09.210 --> 00:03:14.280
And we've done something very similar before with an input and then a div reporting back what's being

38
00:03:14.280 --> 00:03:16.670
written backout.

39
00:03:16.990 --> 00:03:23.590
So we need a function to do this we'll create an output function takes in some number and then returns

40
00:03:23.590 --> 00:03:29.590
back that same number and let's connect this now to return that number to this output and accept that

41
00:03:29.590 --> 00:03:31.960
number from this input.

42
00:03:32.000 --> 00:03:33.640
So I will say app that callback

43
00:03:36.760 --> 00:03:42.880
the output we're going to do the ID is called number in or excuse me number out for the output.

44
00:03:42.880 --> 00:03:52.690
So number outs and then what we want here is children because it's an HTL elements.

45
00:03:52.810 --> 00:03:54.670
And then what we will do here for the input.

46
00:03:54.670 --> 00:04:03.030
Remember this goes in as a list is we want the number in ID component and the property you want to grab

47
00:04:03.110 --> 00:04:05.410
is the value property.

48
00:04:05.460 --> 00:04:08.210
So that's the number that's going to go into this output.

49
00:04:08.250 --> 00:04:10.450
And then it's going to return that number.

50
00:04:10.470 --> 00:04:17.670
So let's say this and we'll run our application will say if name is equal to mean well say app top run

51
00:04:17.670 --> 00:04:22.720
server OK let's make sure that works and we don't have any typos here.

52
00:04:22.730 --> 00:04:26.380
We're going to say Python and I'm calling this basic pie.

53
00:04:26.420 --> 00:04:27.980
So I will run this.

54
00:04:27.980 --> 00:04:28.700
It looks like it's running.

55
00:04:28.700 --> 00:04:30.000
Let's head over to the browser.

56
00:04:30.400 --> 00:04:32.130
OK here I am in the browser.

57
00:04:32.270 --> 00:04:35.690
Looks like if I provide a number it immediately gets updated.

58
00:04:35.690 --> 00:04:40.850
And in fact if you provide anything into this impot updated or variable just happens to be called number

59
00:04:40.890 --> 00:04:43.590
but the input can accept any sort of text.

60
00:04:43.580 --> 00:04:45.750
So here it's getting immediately updated.

61
00:04:46.010 --> 00:04:50.120
But you may only want to update upon hitting a submit button.

62
00:04:50.120 --> 00:04:51.560
So that's where state comes in.

63
00:04:51.560 --> 00:04:55.130
Right now everything is live as you update this.

64
00:04:55.160 --> 00:04:56.620
The updating is being live.

65
00:04:56.810 --> 00:05:01.100
Well we're going to do now is show you how you can add state to your application.

66
00:05:01.100 --> 00:05:03.840
So let's go back and edit this.

67
00:05:03.920 --> 00:05:04.400
OK.

68
00:05:04.430 --> 00:05:10.220
We're going to start off by adding another component to our layout and that's going to be in HTL button.

69
00:05:10.880 --> 00:05:16.120
We'll say T.M. button and we need to provide a few parameters here.

70
00:05:16.130 --> 00:05:20.480
One is an ID so we can actually link this up with other input.

71
00:05:20.480 --> 00:05:26.700
So we're going to say a submit button can call this I'd eat whatever you want.

72
00:05:26.710 --> 00:05:33.330
Then another parameter we're going to set is an underscore clicks and underscore clicks that's a parameter

73
00:05:33.330 --> 00:05:36.120
that's actually available for any HDMI component.

74
00:05:36.420 --> 00:05:40.350
And it it's actually going to track how many times this button was clicked.

75
00:05:40.350 --> 00:05:45.840
So we're going to Stiefel as zero to start off with you technically don't need to report back.

76
00:05:45.840 --> 00:05:48.090
The number of clicks but it is there for you.

77
00:05:48.090 --> 00:05:51.880
And it's actually available for all age Tanel components in dash.

78
00:05:51.900 --> 00:05:56.580
So if you check other documentation every single a small component is going to have an underscore clicks

79
00:05:56.850 --> 00:05:58.610
as an option for you.

80
00:05:58.650 --> 00:06:00.190
So that's a parameter.

81
00:06:00.450 --> 00:06:06.090
The children parameter is just going to be the text that is displayed inside of this button so it can

82
00:06:06.090 --> 00:06:11.100
say something like submit here and that's going to be the text shown the button.

83
00:06:11.100 --> 00:06:13.470
And then finally we can edit it style if we want.

84
00:06:13.530 --> 00:06:19.690
So we'll go ahead to make the font size a little larger let's match it up with 24 like we did for that

85
00:06:19.690 --> 00:06:25.650
and put in a comma at the end of this because it's another component in this list inside the Stiv.

86
00:06:25.780 --> 00:06:27.370
So we just added our button.

87
00:06:27.370 --> 00:06:31.990
Now let's use this actual state call inside our app callback.

88
00:06:32.440 --> 00:06:37.490
So what we're going to do here is let's delete this input so we can start fresh.

89
00:06:37.510 --> 00:06:39.140
We still want the output to be the same.

90
00:06:39.160 --> 00:06:41.360
It's still going to be this H-1 this one.

91
00:06:41.470 --> 00:06:45.970
And we still want to edit the children essentially the text displayed inside the H-1 call.

92
00:06:46.120 --> 00:06:49.600
But we're going to do now is let's make sure a princes are balanced.

93
00:06:49.600 --> 00:06:50.690
Perfect.

94
00:06:50.740 --> 00:06:57.640
We're going to create an input member that goes inside of a list and this input is now actually going

95
00:06:57.640 --> 00:06:59.710
to be that button we just created.

96
00:06:59.710 --> 00:07:02.410
So we're going to connect that to that submit button.

97
00:07:02.910 --> 00:07:08.700
And it can go up a little bit so you can see this is connected to submit button and we're going to say

98
00:07:08.940 --> 00:07:15.340
that the property is connected to is the number of times that button was clicked and clicks.

99
00:07:15.780 --> 00:07:22.540
And then after our input list we're going to provide another list and that's going to be the state.

100
00:07:22.560 --> 00:07:25.630
So again you have multiple states just as you can have multiple inputs.

101
00:07:25.650 --> 00:07:28.650
So the state is going to be connected now to number in

102
00:07:32.000 --> 00:07:34.160
and the property you want to connect here is value

103
00:07:37.310 --> 00:07:37.650
OK.

104
00:07:37.670 --> 00:07:39.030
So we're going to save that.

105
00:07:39.110 --> 00:07:45.590
Basically what we have now is our input is the action of clicking the HTL button element the value type

106
00:07:45.680 --> 00:07:52.110
into the input box isn't stored inside of state so it's stored here inside of the state and it's not

107
00:07:52.190 --> 00:07:57.950
actually going to be passed into our output until the input registers a button click.

108
00:07:57.950 --> 00:08:01.860
So essentially the state is what your story until the input is executed.

109
00:08:02.090 --> 00:08:06.920
And since we linked the input to a button the input is not going to be executed until we actually click

110
00:08:06.920 --> 00:08:13.720
that button before we were linking inputs the things like a core component input or a slider.

111
00:08:13.860 --> 00:08:19.600
So we immediately upon playing around that component the input was updated meaning the output was updated.

112
00:08:19.610 --> 00:08:24.980
You can kind of think of states as stuff in between calling the input to the output or just holding

113
00:08:24.980 --> 00:08:28.390
stuff in the state and city execute the input.

114
00:08:28.400 --> 00:08:35.280
So notice here now I'm also passing and clicks as well as the number.

115
00:08:35.490 --> 00:08:40.400
And that's because these parameters are going to be passed in as first every parameter available in

116
00:08:40.400 --> 00:08:43.570
input and that every parameter available in state.

117
00:08:43.590 --> 00:08:44.100
So we have.

118
00:08:44.130 --> 00:08:45.400
And clicks and number.

119
00:08:45.510 --> 00:08:48.200
So that's going to be and clicks and value here.

120
00:08:48.300 --> 00:08:52.840
Let's save this and see if our submit button works we'll see Python.

121
00:08:53.120 --> 00:08:55.100
And in my case called basic pie.

122
00:08:55.350 --> 00:08:56.700
Let's make sure we don't have any typos.

123
00:08:56.700 --> 00:08:57.460
Looks like it's running.

124
00:08:57.480 --> 00:08:59.220
Let's head over to the browser.

125
00:08:59.220 --> 00:08:59.520
All right.

126
00:08:59.520 --> 00:09:01.990
So we have our default value of 1.

127
00:09:02.190 --> 00:09:06.600
And now as I began adding more stuff to this input nothing's actually getting updated.

128
00:09:06.600 --> 00:09:07.970
We have submit here.

129
00:09:07.980 --> 00:09:12.390
So that's the button that children text them at here let's click on it and there we go.

130
00:09:12.420 --> 00:09:20.430
Now we have the updated text and it's only going to update when I provide a click on this button.

131
00:09:20.430 --> 00:09:26.250
So essentially what's happening here is this is being stored in state and it doesn't get sent to this

132
00:09:26.310 --> 00:09:30.990
output until I click on this to execute the input.

133
00:09:31.000 --> 00:09:31.720
There we go.

134
00:09:31.990 --> 00:09:36.950
So let's go back and add in the number of clicks because we're actually keeping track of that as well.

135
00:09:37.070 --> 00:09:40.220
And we're going to close this go back to the text editor.

136
00:09:40.260 --> 00:09:41.530
OK back to that text editor.

137
00:09:41.530 --> 00:09:47.910
Let's do Control-C to kill that server and we're going to do is we're going to report number.

138
00:09:48.220 --> 00:09:50.350
Well in fact let's make this as a string.

139
00:09:50.350 --> 00:09:56.570
We're going to do some quick concatenating we'll say number and in fact let's put this all in formatting

140
00:09:57.360 --> 00:10:07.250
so it will say blank was typed in and Button was clicked.

141
00:10:07.790 --> 00:10:10.900
Times will do that format.

142
00:10:10.950 --> 00:10:14.150
You can do string literals on Python 3.6.

143
00:10:14.310 --> 00:10:18.480
And we're going to passen number and the clicks here.

144
00:10:18.480 --> 00:10:25.230
So we'll say number was typed and Button was clicked and it clicks times again remember you can call

145
00:10:25.230 --> 00:10:26.850
this parameter or whatever you want.

146
00:10:26.850 --> 00:10:27.880
It doesn't have to be number.

147
00:10:27.900 --> 00:10:32.250
It could just be something like input although I would avoid using the word input because we use it

148
00:10:32.250 --> 00:10:34.390
so many times as a function call here.

149
00:10:34.860 --> 00:10:40.890
Let's save this and read this again base pi.

150
00:10:41.050 --> 00:10:41.720
And there we go.

151
00:10:41.830 --> 00:10:44.690
So let's go back to our browser.

152
00:10:44.680 --> 00:10:46.150
OK here I am back.

153
00:10:46.180 --> 00:10:48.610
Notice now how the text is being displayed.

154
00:10:48.610 --> 00:10:51.310
One was type then and Button was clicked 0 times.

155
00:10:51.310 --> 00:10:53.200
Let's update this to be 100.

156
00:10:53.200 --> 00:10:58.090
So now hundreds typed in this is now being stored in state and it doesn't get sent to the output until

157
00:10:58.090 --> 00:11:00.580
I click the input which is this submit here button.

158
00:11:00.580 --> 00:11:06.640
Once I click that it says 100 was typed in and Button was clicked 1 times so and clicks is connected

159
00:11:06.640 --> 00:11:06.920
to.

160
00:11:06.940 --> 00:11:10.730
HTL component and it's actually going to store how many times that one was clicked.

161
00:11:10.780 --> 00:11:15.190
So I can keep clicking on the button and you see it keeps going up and even if I type something new

162
00:11:15.190 --> 00:11:15.820
here.

163
00:11:16.680 --> 00:11:18.870
Ill keep track of how many times that was clicked.

164
00:11:18.870 --> 00:11:24.120
So you don't see a jump or resetting back to zero and that's how state works.

165
00:11:24.120 --> 00:11:27.410
So again it's basically adding to your capabilities the input and output.

166
00:11:27.660 --> 00:11:28.960
You set up your input.

167
00:11:28.980 --> 00:11:36.020
You set up your output and then state is whatever you want to hold until you actually execute that input.

168
00:11:36.030 --> 00:11:36.530
All right.

169
00:11:36.630 --> 00:11:37.420
Thanks everyone.

170
00:11:37.440 --> 00:11:38.970
We'll see you at the next lecture.

171
00:11:38.970 --> 00:11:41.550
Make sure to check the guidebook for more details on this lecture.

