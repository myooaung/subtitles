1
00:00:05,300 --> 00:00:11,570
Welcome back in this lecture we're going to talk about heat maps heat maps allow the visualization of

2
00:00:11,570 --> 00:00:18,170
three features categorical or continuous features along the x and y axis to make up a grid and then

3
00:00:18,170 --> 00:00:19,750
a third continuous feature.

4
00:00:19,750 --> 00:00:22,900
This blade three color scale.

5
00:00:23,000 --> 00:00:29,270
So here we see on the x and y axis some arbitrary continuous features and then we separate them into

6
00:00:29,270 --> 00:00:31,500
intervals in order to form a grid.

7
00:00:31,880 --> 00:00:37,880
And then if we want to show the value of a third variable for points that fall within each of these

8
00:00:37,880 --> 00:00:41,190
grid blocks where we can do is have a color scale.

9
00:00:41,210 --> 00:00:43,040
So this is for continuous features.

10
00:00:43,190 --> 00:00:48,430
And often this example for heat map is really clear with categorical features instead.

11
00:00:48,500 --> 00:00:51,680
So here is another example for categorical features.

12
00:00:51,710 --> 00:00:59,060
So on the y axis we have morning afternoon and evening and then on the x axis we have weekdays Monday

13
00:00:59,060 --> 00:01:03,490
through Friday and we can imagine that this color scale is something like temperatures.

14
00:01:03,530 --> 00:01:10,490
So we could say it's really hot on Thursday afternoons and it's really cold on Monday mornings or Thursday

15
00:01:10,520 --> 00:01:11,410
evenings.

16
00:01:11,630 --> 00:01:12,730
And this is just fake data.

17
00:01:12,740 --> 00:01:16,760
But hopefully you can get an idea of what the heat map is trying to display.

18
00:01:16,760 --> 00:01:19,460
We have three features that we're showing here.

19
00:01:19,880 --> 00:01:25,260
One on the x axis one on the y axis and then one three color scale.

20
00:01:25,270 --> 00:01:30,850
So this is some real data points here and we can see we have Tuesday Wednesday Thursday Friday Saturday

21
00:01:30,850 --> 00:01:33,930
Sunday Monday on our x axis.

22
00:01:33,970 --> 00:01:39,760
So the days of the week there and then on the y axis we actually have the hour block of the day.

23
00:01:39,760 --> 00:01:44,040
So from 0 to 1 From wanted to 2 to 3 and so on.

24
00:01:44,260 --> 00:01:50,950
And then what we're showing here are hourly temperatures from June 1st through the 7th in 2010 in Arizona

25
00:01:51,400 --> 00:01:57,460
so we can see here that these temperatures are in Celsius and that it was really hot on Sunday around

26
00:01:57,460 --> 00:02:00,760
late afternoon and that it was really quite colder.

27
00:02:00,910 --> 00:02:06,670
And Wednesday towards the very early in the morning hour like 4:00 a.m. 5:00 a.m. And now we can see

28
00:02:06,670 --> 00:02:12,190
just visually what times of the week and what days it was really hot for this particular week and what

29
00:02:12,190 --> 00:02:15,690
time of the day and what days of the week that it was particularly cold.

30
00:02:15,820 --> 00:02:21,480
So we're actually going to use this data set to plot out our own heat maps and remember heat maps.

31
00:02:21,480 --> 00:02:23,290
It doesn't have to be related to temperature.

32
00:02:23,320 --> 00:02:27,610
It's just that temperature is a nice thing to display visually with color.

33
00:02:27,610 --> 00:02:29,730
Let's go ahead and jump toward sex ed..

34
00:02:29,740 --> 00:02:29,950
All right.

35
00:02:29,950 --> 00:02:34,370
Here we are back with a text editor I've already imported partly off line as go.

36
00:02:34,510 --> 00:02:40,780
The next thing going to do is import plot Lee and then graph objects as we've done in the past as go.

37
00:02:40,960 --> 00:02:47,180
And since we're going to be using real data I'm going to import pandas as PD so the data we're going

38
00:02:47,180 --> 00:02:52,250
to start off with is a temperature data set for Santa Barbara California.

39
00:02:52,250 --> 00:02:56,920
We're going to say PD read CSP and underneath are data folder.

40
00:02:56,960 --> 00:03:01,340
We're going to say 20 10 Santa Barbara

41
00:03:04,120 --> 00:03:05,840
capital C capital in California.

42
00:03:05,880 --> 00:03:06,680
That's CSC.

43
00:03:06,750 --> 00:03:10,870
And as always you can copy and paste these commands from the provided notes.

44
00:03:10,900 --> 00:03:15,790
OK so the first thing I want to do is set up our data list and then just as we've done many times in

45
00:03:15,790 --> 00:03:20,860
the past we'll say go dots and for maps as you may have guessed it's just heat map.

46
00:03:20,860 --> 00:03:26,980
So we need provide three things here need provide the X column the Y column and the Z column.

47
00:03:26,980 --> 00:03:33,340
So for X we're going to do is provide if we take a look real quick at this data set just to show you

48
00:03:33,340 --> 00:03:35,740
what it looks like going to print it out.

49
00:03:35,880 --> 00:03:37,670
Let's also print out the columns as well.

50
00:03:38,460 --> 00:03:47,600
The columns save that if I run this now Python basic apply those we have in Ellas to date a day tee

51
00:03:47,620 --> 00:03:50,320
time and T our average.

52
00:03:50,320 --> 00:03:52,870
So what does that actually mean when we take a look at our dataset.

53
00:03:53,110 --> 00:04:00,430
Well from our dataset I can see that I have a date week weekday and then the time and the temperature

54
00:04:00,460 --> 00:04:01,720
Our average.

55
00:04:01,720 --> 00:04:07,290
So what this actually means is we're going to be using the day of the week for part of our grid.

56
00:04:07,450 --> 00:04:12,670
So the day of a week is going to be our x axis so I can actually comment this out and start providing

57
00:04:12,670 --> 00:04:13,270
this here.

58
00:04:13,510 --> 00:04:21,110
So X-axis that's going to be the day of the week and for our Y-axis we're going to use the hour.

59
00:04:21,310 --> 00:04:25,390
So the hour for that that's going to be this elist tea time column.

60
00:04:25,390 --> 00:04:26,340
So for.

61
00:04:26,410 --> 00:04:32,970
We'll go ahead and say DMF Ellis t underscore time.

62
00:04:33,350 --> 00:04:38,030
We don't really need that here because it's already kind of implied with day or here if you wanted to.

63
00:04:38,150 --> 00:04:42,590
If you want to weigh more grid's you could say the date but were you going to use that instead.

64
00:04:42,680 --> 00:04:46,680
And then for easy access remember that's going to be the color.

65
00:04:46,730 --> 00:04:56,790
So for this look we're going to say Z is equal to f and I will say t underscore h r underscore average

66
00:04:56,850 --> 00:05:01,110
which just reports back the temperature for the hour.

67
00:05:01,110 --> 00:05:02,140
The average of that.

68
00:05:02,490 --> 00:05:09,180
So if you're reading this you can see on Tuesday of this particular day at zero hundred hours the average

69
00:05:09,180 --> 00:05:12,530
temperature for that hour was twelve point seven degrees Celsius.

70
00:05:12,540 --> 00:05:19,020
Then the next one that same date on that same Tuesday at 1:00 a.m. the temperature on average was twelve

71
00:05:19,020 --> 00:05:19,500
point seven.

72
00:05:19,500 --> 00:05:20,300
And so on.

73
00:05:20,310 --> 00:05:22,230
So that's how this data is organized.

74
00:05:22,230 --> 00:05:26,380
Now something to know because Z is actually going to be a color scale.

75
00:05:26,430 --> 00:05:29,410
It can't actually except a Pandurs column.

76
00:05:29,560 --> 00:05:35,670
Instead what you need to do for this is have a python list and the way you can convert a panda's column

77
00:05:35,700 --> 00:05:44,370
to a Python list is by adding on the commands values dot and then to list open close parentheses.

78
00:05:44,370 --> 00:05:49,750
So the reason we're doing this is because for this heat map Z needs to be a python list.

79
00:05:49,800 --> 00:05:51,750
It won't be able to accept the pan this column.

80
00:05:51,750 --> 00:05:53,750
So that's why we're converting it as such.

81
00:05:54,750 --> 00:05:57,390
So let me now expand on this a little bit.

82
00:05:57,500 --> 00:05:59,680
And what kind of Z on its own separate line here.

83
00:05:59,800 --> 00:06:01,130
Just so it's a little more readable.

84
00:06:01,920 --> 00:06:10,000
And then we can define ileo as well just as we've done in the past we'll say go that way out and here

85
00:06:10,000 --> 00:06:20,690
it just provide a title will say Santa Barbara California tops and we'll create a figure object.

86
00:06:20,700 --> 00:06:21,710
Go figure.

87
00:06:22,850 --> 00:06:29,880
And here would just say the sequel to data and Aralia is equal to the LIA and let's plot this figure.

88
00:06:29,940 --> 00:06:36,700
Why plot has and the figure and as always if you want you can provide a file name so I will call Python

89
00:06:37,930 --> 00:06:39,260
basic pi.

90
00:06:39,520 --> 00:06:41,830
Run that and I should see a temperature plot.

91
00:06:42,220 --> 00:06:47,260
So right here we have the temperature plot and you'll notice though we can see the actual temperature

92
00:06:47,440 --> 00:06:53,230
and the x y and z information as we hover over this so I can see at Wednesday.

93
00:06:53,320 --> 00:06:55,200
Y is equal to 3 so that's at 3 am.

94
00:06:55,390 --> 00:06:59,470
The temperature on average for that hour on that Wednesday was ten point five degrees.

95
00:06:59,560 --> 00:07:04,780
So you can hover around and see more information but what's really nice about this is just visually

96
00:07:04,960 --> 00:07:06,820
from kind of a bird's eye view.

97
00:07:06,820 --> 00:07:11,110
I can get an idea of what days and what times were the hottest and what days and what times were the

98
00:07:11,110 --> 00:07:12,020
coolest.

99
00:07:12,040 --> 00:07:15,960
So definitely it looks like it got hotter on Saturday and Sunday.

100
00:07:16,000 --> 00:07:20,380
A little bit Monday and also Wednesday afternoon was little hot and I can see definitely the coolest

101
00:07:20,380 --> 00:07:24,880
time was around Wednesday in the morning and that Sunday and Monday and those were actually quite warm

102
00:07:24,940 --> 00:07:26,230
mornings there.

103
00:07:26,230 --> 00:07:30,120
So that's the kind of information you can gleam from a heat map very quickly.

104
00:07:31,030 --> 00:07:32,570
Going to close this.

105
00:07:32,640 --> 00:07:36,040
Something else I want to point out is you can choose different color skills.

106
00:07:36,150 --> 00:07:42,750
So instead of just saying X Y Z inside your heat map as another parameter here we can say color scale

107
00:07:43,430 --> 00:07:47,620
and you can check out the documentation for all the various color skills that are available to you.

108
00:07:47,730 --> 00:07:50,150
But one really common one to use jet.

109
00:07:50,150 --> 00:07:55,590
So if you use jet and run this again you'll get kind of this brighter color between essentially the

110
00:07:55,590 --> 00:07:57,730
rainbow blue and red.

111
00:07:57,840 --> 00:08:03,030
So some of it is a little extreme but this definitely points out very clearly the coldest and hottest

112
00:08:03,030 --> 00:08:03,810
temperatures.

113
00:08:03,840 --> 00:08:07,110
So that's another option for you to begin playing around if the color scales.

114
00:08:07,110 --> 00:08:11,400
You can check out the partly documentation for what color scales are available.

115
00:08:11,400 --> 00:08:14,990
Let me close this now so let's move on and expand on this.

116
00:08:15,040 --> 00:08:17,900
So I'm going to expand on.

117
00:08:18,240 --> 00:08:21,160
Is having multiple heat maps on one plot.

118
00:08:21,170 --> 00:08:26,280
In general we just want to expand the idea of having subplots So multiple plots on the same thing especially

119
00:08:26,280 --> 00:08:27,220
of heat maps.

120
00:08:27,360 --> 00:08:30,190
So you'll notice that we don't just have Santa Barbara data.

121
00:08:30,240 --> 00:08:33,260
If you take a look at our data folder we'll set other files.

122
00:08:33,330 --> 00:08:41,060
So if I were to say copy this and paste this I'm going to comment this line out of control forward slash.

123
00:08:41,060 --> 00:08:42,750
All we can do here is.

124
00:08:42,890 --> 00:08:44,570
We don't know what we need to print that out.

125
00:08:44,810 --> 00:08:53,390
I'm going to use the other dataset that we provided which is 2010 Uma azy.

126
00:08:53,550 --> 00:08:58,890
So Yuma Arizona to really hop place specially for these time stamps that we're working with.

127
00:08:58,910 --> 00:09:04,550
So now if we run this we'll be able to see that city's heat map so you can see here that city's heat

128
00:09:04,550 --> 00:09:08,990
map right now this all scaled to that particular city looks like actually than it changed the title

129
00:09:09,020 --> 00:09:14,500
but hopefully get the idea what I want to do now is plot various cities on the same plot with plots.

130
00:09:14,840 --> 00:09:20,240
All right so now let's go ahead and work on the problem of showing multiple heat maps in the same figure

131
00:09:20,580 --> 00:09:21,550
in an order to do that.

132
00:09:21,560 --> 00:09:23,360
We're going to need to work with subplots.

133
00:09:23,450 --> 00:09:28,070
So this is going to be one of the more demanding visualizations that we've done so far.

134
00:09:28,070 --> 00:09:33,020
First off we need our three data sets so we have this data set for three cities for their temperatures

135
00:09:33,710 --> 00:09:35,310
and we'll use a very similar command for all of them.

136
00:09:35,330 --> 00:09:36,600
We're going to read them all in.

137
00:09:36,650 --> 00:09:42,570
We've read CSFB and let's make sure that's a string inside that data folder.

138
00:09:42,580 --> 00:09:45,570
There's some data from a city in Alaska.

139
00:09:45,770 --> 00:09:53,430
So this one's going to be probably the call the city C S V and then we have the Santa Barbara City that

140
00:09:53,430 --> 00:09:54,170
we've been working with.

141
00:09:54,180 --> 00:10:05,400
So again read C S V and then 2010 Santa Barbara lets make sure you spell that right.

142
00:10:05,580 --> 00:10:14,420
Barbara California see as we can always copy and paste these from the notes and then read C S we will

143
00:10:14,730 --> 00:10:15,370
say data.

144
00:10:15,420 --> 00:10:16,730
And this last one is from Yuma.

145
00:10:16,740 --> 00:10:18,860
So that really hot city.

146
00:10:18,990 --> 00:10:20,370
Yuma Arizona.

147
00:10:20,750 --> 00:10:23,570
OK so let's set up traces for each of these.

148
00:10:23,740 --> 00:10:26,650
We're going to say trace one is equal to.

149
00:10:26,820 --> 00:10:28,750
We're going to call her heat map again.

150
00:10:29,730 --> 00:10:39,980
We'll see X equal to just like before except the one day why it's going to be equal to the one ls t

151
00:10:40,820 --> 00:10:50,990
time and then Z is going to be equal to the F one and the string was t underscore h r underscore average

152
00:10:51,330 --> 00:10:53,250
whip's underscore.

153
00:10:53,340 --> 00:10:56,410
So that was that hourly temperature average.

154
00:10:56,540 --> 00:11:01,280
So now that we have are X Y and Z Well we should also set up is our color scale to make it look a little

155
00:11:01,280 --> 00:11:01,970
nicer.

156
00:11:02,030 --> 00:11:03,670
We'll go ahead and choose again.

157
00:11:05,440 --> 00:11:08,770
Again lots of different options there in the documentation you can check out color scale.

158
00:11:08,980 --> 00:11:13,840
And since we're going to be plotting multiple heap maps we should also add max and min color values

159
00:11:14,080 --> 00:11:16,290
to make each plot consistent with each other.

160
00:11:16,540 --> 00:11:23,360
So we will say Zeeman is equal to 5 and Z Max is equal to 40 degrees.

161
00:11:23,590 --> 00:11:28,220
And then I'm going to copy and paste this trace two more times.

162
00:11:29,120 --> 00:11:33,950
Since we are going to have it for each dataset and what I need to do now is go ahead and rename these

163
00:11:33,950 --> 00:11:39,170
traces to trace 2 and trace 3 as well as edit the data from calls.

164
00:11:39,440 --> 00:11:42,190
So the to the to the to.

165
00:11:42,200 --> 00:11:44,840
Looks like I forgot the one here in this first one.

166
00:11:44,840 --> 00:11:47,170
And let's change this one to three.

167
00:11:47,420 --> 00:11:55,080
The three and the three or so I have my three heap maps and now I need to organize them using subplots.

168
00:11:55,190 --> 00:12:00,290
So the way we need to do this is actually import from Plumley set up at the top.

169
00:12:00,440 --> 00:12:09,580
I will save from plot Lee import tools and the tools library of politely allows us to create these subplots.

170
00:12:09,840 --> 00:12:11,190
So let's see how that works.

171
00:12:13,400 --> 00:12:14,300
Well say figure.

172
00:12:14,300 --> 00:12:23,230
Or fig is equal to tools and then underneath tools there is a make subplots function and the make subplots

173
00:12:23,230 --> 00:12:28,380
function is going to take an a rose argument and a column's argument so you can decide how you wanted

174
00:12:28,380 --> 00:12:28,940
this play.

175
00:12:28,960 --> 00:12:34,030
These heat maps if you want one row with three columns that means you're going to have the three heat

176
00:12:34,030 --> 00:12:36,310
maps right next to each other in a horizontal line.

177
00:12:36,490 --> 00:12:40,870
If we do it the other way with three rows and one column then you'll see the heat maps kind of on top

178
00:12:40,870 --> 00:12:41,660
of each other.

179
00:12:41,680 --> 00:12:47,740
So one right below the other let's go ahead and give it one row we'll say Rose is equal to 1.

180
00:12:47,740 --> 00:12:53,370
And since we have three heat maps we'll say columns is equal to three and then the other thing I can

181
00:12:53,380 --> 00:12:55,490
provide is subplot titles.

182
00:12:55,840 --> 00:13:01,640
So subplot underscore titles and set that equal to a list of titles corresponding to each of these traces

183
00:13:01,650 --> 00:13:02,800
you're going to pass.

184
00:13:02,800 --> 00:13:12,670
So since we passing them in order we'll say that the first one will be Sitka AK for Alaska.

185
00:13:12,730 --> 00:13:20,300
The second one we'll just say SB California Santa Barbara California and the last one is Yuma Arizona.

186
00:13:20,740 --> 00:13:21,000
OK.

187
00:13:21,010 --> 00:13:22,960
So there is a subplot titles.

188
00:13:23,320 --> 00:13:34,470
And finally the last thing you want to ask are passen here is shared underscore y axes a set that equal

189
00:13:34,470 --> 00:13:35,600
to true.

190
00:13:35,670 --> 00:13:38,790
So this makes the hours appear only on the left.

191
00:13:38,790 --> 00:13:45,540
So what that means is all of these heat maps they're actually going to share at the same time stamps

192
00:13:45,570 --> 00:13:53,610
on the y axis because every single one of these places has hours 0 to 1 1 to 2 AM 3 or 4 am and so on.

193
00:13:53,670 --> 00:13:59,390
If we didn't say shared why access equals to true then it would have a separate y axis for each of these.

194
00:13:59,460 --> 00:14:00,970
And we don't actually really need that.

195
00:14:01,020 --> 00:14:02,630
So we can set the stickle to true.

196
00:14:02,730 --> 00:14:05,130
So we each share the y axis.

197
00:14:06,420 --> 00:14:11,560
At least visually you can go ahead and play around with that and said equal to false to experiment and

198
00:14:11,560 --> 00:14:14,020
see what you prefer as far as your looks.

199
00:14:14,020 --> 00:14:18,370
Now the thing that's going to be a little different here is from the figure object we're going to call

200
00:14:18,430 --> 00:14:25,330
append the trace and then we pass in the trace we want to append and then we pass in the coordinates

201
00:14:25,330 --> 00:14:26,150
of where it goes.

202
00:14:26,170 --> 00:14:33,490
Inside of this make subplots So recall that we have rows equal to 1 and columns equal to three.

203
00:14:33,490 --> 00:14:37,630
So what you do here when you're appending the trace is you decide OK where do you want ptrace want to

204
00:14:37,630 --> 00:14:38,220
go.

205
00:14:38,230 --> 00:14:43,150
I wanted to go in row 1 in column 1.

206
00:14:43,250 --> 00:14:45,480
So that's the one all the way to the left.

207
00:14:45,740 --> 00:14:46,810
And then we can say Fig.

208
00:14:46,820 --> 00:14:48,960
Append trace portrays to.

209
00:14:49,190 --> 00:14:51,530
I want that one to again also be in row 1.

210
00:14:51,530 --> 00:14:55,690
We only have one row but then it's going to go in the second column right in the middle.

211
00:14:57,010 --> 00:14:58,170
And then we'll say Fig.

212
00:14:58,410 --> 00:15:05,620
A pen trace and then we'll say trace 3 and again we only have one row so that goes for 1 and then it's

213
00:15:05,620 --> 00:15:07,600
going to go in the third column.

214
00:15:07,600 --> 00:15:12,950
So somebody to know here is that indexing is basically starting at 1 instead of 0 which is more typical

215
00:15:12,950 --> 00:15:13,650
of Python.

216
00:15:13,780 --> 00:15:15,220
So keep that in mind.

217
00:15:15,220 --> 00:15:18,200
So again it's just the trace you want to pass in the row.

218
00:15:18,220 --> 00:15:22,440
It belongs in the makes up subplots come in in the column it belongs in.

219
00:15:22,750 --> 00:15:29,750
And once you've set up that fig with a pen trace where we can say is Io plot Fig.

220
00:15:30,040 --> 00:15:34,390
So let's see what this looks like and come we'll come back and actually affect the lay out.

221
00:15:34,390 --> 00:15:37,380
So let's run Python basic pie and whip's.

222
00:15:37,390 --> 00:15:40,210
Let's make sure it looks like 20 human Asie doesn't exist.

223
00:15:40,210 --> 00:15:43,710
I think I forgot C S V here C S V We save that.

224
00:15:43,750 --> 00:15:45,020
Now tremoring that again.

225
00:15:47,400 --> 00:15:48,180
OK perfect.

226
00:15:48,180 --> 00:15:52,290
So it actually reports back the format of your plot grade which is kind of nice but if we just bring

227
00:15:52,290 --> 00:15:55,410
it over and check it out we'll be able to see the temperatures.

228
00:15:55,410 --> 00:15:59,090
So notice now they're all sharing the same Y scale.

229
00:15:59,100 --> 00:16:02,370
So over here on this model heat map I don't see the Y scale here.

230
00:16:02,430 --> 00:16:06,110
Neither do I on the right because I said shared y.

231
00:16:06,270 --> 00:16:08,210
If we were to come back and turn that to false.

232
00:16:08,220 --> 00:16:11,330
So then here we go ahead and say this is false.

233
00:16:12,360 --> 00:16:13,750
Save that and run it again.

234
00:16:15,490 --> 00:16:19,320
Then what you'll end up seeing is that they each have their own y axis.

235
00:16:19,360 --> 00:16:21,110
It's really up to you which you prefer.

236
00:16:21,220 --> 00:16:25,270
Sometimes if you have lots of these different subplots it might be nice for them to all share the same

237
00:16:25,270 --> 00:16:30,970
y axis but it also it's nice to imply that they're all sharing the same y axis along all the way to

238
00:16:30,970 --> 00:16:34,050
the left so it's really up to you which style you prefer.

239
00:16:34,300 --> 00:16:38,120
And what I also want to know is now we can clearly see which is the hottest city.

240
00:16:38,140 --> 00:16:41,560
Yuma Arizona which is called the city here in Alaska.

241
00:16:41,560 --> 00:16:45,760
And they're all sharing the same colored bar and you'll also notice that they're all sharing that same

242
00:16:45,810 --> 00:16:51,110
men value of five and the max value of 40 because we said Zeeman and Z max for all of them.

243
00:16:51,210 --> 00:16:55,350
And we didn't really want a separate color scale for each of these maps.

244
00:16:55,390 --> 00:17:00,220
Something else you can do is if you wanted to give a title to this entire plot so something here at

245
00:17:00,220 --> 00:17:03,660
the very top that is how they each have their own basic subtitles there.

246
00:17:03,850 --> 00:17:05,450
Well we can do is come back here.

247
00:17:05,830 --> 00:17:11,650
So we gave them their all separate subplot titles if you want to edit the actual layout of the entire

248
00:17:11,650 --> 00:17:12,490
object.

249
00:17:12,490 --> 00:17:15,540
We can say is Fig and just like a dictionary call.

250
00:17:15,580 --> 00:17:18,700
You can actually call lay out from this figure object.

251
00:17:18,700 --> 00:17:20,000
So I will say Fig.

252
00:17:21,580 --> 00:17:29,550
Lay out and then call the up command as is essentially allowing us to access the layout that rectally.

253
00:17:29,700 --> 00:17:31,150
So I can set the title here.

254
00:17:32,150 --> 00:17:39,370
So I could say temp's for three cities save it and when I run this again I should now see a title pop

255
00:17:39,370 --> 00:17:40,720
up at the very top.

256
00:17:40,780 --> 00:17:44,980
So bring that in and I can see temp's for three cities right here on the top.

257
00:17:45,370 --> 00:17:46,000
OK.

258
00:17:46,000 --> 00:17:52,000
So let's quickly review because this was a more complex plot in regards to plot Lee but we just did.

259
00:17:52,270 --> 00:17:59,350
We ended up doing as we read in three data sets and then we created 3 heat maps or three traces essentially

260
00:17:59,350 --> 00:18:00,490
the same data for all of them.

261
00:18:00,490 --> 00:18:05,910
We set the color scale and the Zeeman and C-Max and then the thing that we introduced that was new was

262
00:18:05,920 --> 00:18:11,470
this makes subplots come in where you define how many rows and how many columns you want what the plot

263
00:18:11,470 --> 00:18:17,230
titles are going to be or regards to how these titles match up they're going to be matched up in the

264
00:18:17,230 --> 00:18:19,540
same order that you appended the traces in.

265
00:18:19,570 --> 00:18:24,130
So keep that in mind and it's up to you whether you want to share the y axis and set that to a false

266
00:18:24,220 --> 00:18:25,240
or true.

267
00:18:25,240 --> 00:18:29,940
And you can check out the make subplots documentation for a few other useful parameters to.

268
00:18:30,130 --> 00:18:35,660
But once you've set up your subplots then you just append traces and you say passing the trace and you

269
00:18:35,680 --> 00:18:39,120
decide what roads going in and what column it's going in.

270
00:18:39,120 --> 00:18:45,530
And if you want to update the figures lay out as a total You just call figlio and then update ampacity

271
00:18:45,550 --> 00:18:48,240
whatever you want to update there and then plot your figure.

272
00:18:48,580 --> 00:18:49,090
OK.

273
00:18:49,120 --> 00:18:51,910
If you have any questions feel free to post the Kewaunee forums.

274
00:18:51,940 --> 00:18:53,160
We'll see you at the next lecture.

