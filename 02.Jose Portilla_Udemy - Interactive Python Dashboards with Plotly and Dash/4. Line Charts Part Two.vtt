WEBVTT
ï»¿1
00:00:05.390 --> 00:00:05.890
OK.

2
00:00:05.930 --> 00:00:12.410
So so far in previous examples we've only been working with data we generate ourselves using them pi.

3
00:00:12.410 --> 00:00:17.450
Now let's shift gears a little bit to finish off this lecture and actually use a real data set with

4
00:00:17.450 --> 00:00:23.060
pandas so we can learn how to integrate our plotless skills with some real data to do so instead of

5
00:00:23.060 --> 00:00:24.130
importing them pie.

6
00:00:24.170 --> 00:00:29.810
I went ahead and imported pandas as PD and that we still have our Probably the off line in our graph

7
00:00:29.870 --> 00:00:31.310
objects.

8
00:00:31.310 --> 00:00:36.590
The first thing they need to do is actually read in the data and manipulate it a little bit to filter

9
00:00:36.590 --> 00:00:38.840
out some columns of data that we don't want.

10
00:00:39.200 --> 00:00:43.650
We're going to start off by saying DMF is equal to PD.

11
00:00:43.760 --> 00:00:50.480
Read CXXVI and I'm going to read in a C is the file from our data folder and if you have any questions

12
00:00:50.540 --> 00:00:55.230
on we would actually grab this data from actually review the data source lecture.

13
00:00:55.490 --> 00:00:57.810
But there is a folder called data.

14
00:00:58.190 --> 00:01:04.850
And I went ahead and copied it to my examples folder and inside of this there's a file called an s t

15
00:01:05.480 --> 00:01:12.670
dash e s t 20:17 dash all data thought C S V.

16
00:01:12.920 --> 00:01:17.320
So let's then go ahead and print out this data frame so we can see what it looks like.

17
00:01:17.330 --> 00:01:22.070
It's quite a large data frame so you're going to see it being printed out over multiple lines over multiple

18
00:01:22.070 --> 00:01:22.850
columns.

19
00:01:22.850 --> 00:01:28.670
So what I'm going to do is actually is going to print out the head of the data centers here I'm calling

20
00:01:28.670 --> 00:01:34.220
the head method off the state of frame and that only prints out the first five rows still going to be

21
00:01:34.220 --> 00:01:34.630
a lot.

22
00:01:34.640 --> 00:01:39.330
But let's go ahead and run this so you can take a basic look at what this data looks like and to see

23
00:01:39.320 --> 00:01:43.150
this clearly what you should probably do is zoom out more than I'm doing here.

24
00:01:43.370 --> 00:01:45.980
So you see five rows by 121 columns.

25
00:01:46.280 --> 00:01:53.030
And if I expand this a little bit you can see here these are essentially all the columns they have region

26
00:01:53.030 --> 00:01:56.010
division state and this is U.S. Census data.

27
00:01:56.030 --> 00:02:02.300
So there's a name a census population estimate some more column so there's all kinds of columns like

28
00:02:02.300 --> 00:02:06.130
we said there's 121 columns so it can't even display all here.

29
00:02:06.170 --> 00:02:11.750
That's why you have these ellipses indicating that there's more columns than it can reasonably display.

30
00:02:11.750 --> 00:02:17.340
So what we're going to do is use this U.S. Census data but since we don't want to plot over 121 columns

31
00:02:17.330 --> 00:02:21.260
of information we are going to filter out some of that.

32
00:02:21.300 --> 00:02:25.750
So going to zoom back in here for actual filtering Let me zoom back in.

33
00:02:26.060 --> 00:02:28.940
So we get this idea that we have this U.S. Census data.

34
00:02:28.940 --> 00:02:34.530
And what I want to do is I just want to grab six New England states and there is a column inside the

35
00:02:34.620 --> 00:02:40.080
data that's called a division column so division in all caps.

36
00:02:40.160 --> 00:02:45.610
And if that's equal to the string one notice it's not the number one it's the string.

37
00:02:45.610 --> 00:02:47.010
Want to hear that.

38
00:02:47.020 --> 00:02:49.730
That's going to define a new England state.

39
00:02:49.840 --> 00:02:55.170
So I'm going to filter out my data frame where the division column is equal to the string one.

40
00:02:55.540 --> 00:03:02.340
And then I'm going to set that equal to DNF to and again if you have any issues with this dataset not

41
00:03:02.340 --> 00:03:03.100
being found.

42
00:03:03.270 --> 00:03:09.820
Try running our file directly and then using this data frame too.

43
00:03:09.860 --> 00:03:14.630
I'm going to call set index on this second data frame.

44
00:03:14.780 --> 00:03:21.350
And what index does is it can grab a column in your data frame and then set that as the index.

45
00:03:21.410 --> 00:03:26.750
So then I'm going to grab that name column from the data frame and set that as the index.

46
00:03:26.990 --> 00:03:30.190
And I'm going to use in place equal to true.

47
00:03:30.260 --> 00:03:33.140
That way it actually affects this data frame.

48
00:03:33.140 --> 00:03:38.010
If you didn't use in place you'd have to use a re-assignment like DFI 2 is equal to DFA to set in the

49
00:03:38.010 --> 00:03:38.890
x.

50
00:03:38.930 --> 00:03:40.570
So I'm going to save that.

51
00:03:40.970 --> 00:03:44.330
And then finally I actually just want the population columns.

52
00:03:44.330 --> 00:03:48.000
So right now what I have is still 121 columns of data.

53
00:03:48.050 --> 00:03:51.800
It just is the columns of data for six New England states.

54
00:03:51.860 --> 00:03:59.630
What I want to do is only grab population columns so population columns they start with the word POPC.

55
00:03:59.900 --> 00:04:04.260
So going to use a little bit of a trick here and we're going to use list comprehension.

56
00:04:04.260 --> 00:04:11.970
We're going to say call for call in the two columns

57
00:04:15.360 --> 00:04:23.280
column then we're going to use starts with This is a method for a python string and then starts with

58
00:04:23.280 --> 00:04:24.810
the string pop.

59
00:04:24.810 --> 00:04:26.830
So this is a list comprehension.

60
00:04:26.850 --> 00:04:30.190
And what it's doing is recall that D-Nev. to that columns.

61
00:04:30.210 --> 00:04:36.360
That gives you a list of the column names and then we're saying OK for column in column D of two columns

62
00:04:36.450 --> 00:04:40.830
only select that if that column name starts with pop.

63
00:04:40.830 --> 00:04:50.700
So this is our list of population columns and then I'm only going to select those population columns.

64
00:04:50.700 --> 00:04:58.760
So we're going to say DFA two is now equal to the two and we'll say list population columns.

65
00:04:58.760 --> 00:05:03.650
So essentially now just filtering out only the population columns so I no longer have to deal with 121

66
00:05:03.650 --> 00:05:05.160
columns of data.

67
00:05:05.180 --> 00:05:05.630
OK.

68
00:05:05.840 --> 00:05:10.250
So that's our basic filtering of this really big data set.

69
00:05:10.280 --> 00:05:13.760
So make sure you take time to review that if you're a little fuzzy on the Panthers.

70
00:05:13.760 --> 00:05:18.940
But essentially what we're doing is we're just doing some filtering based off the row and column values.

71
00:05:18.950 --> 00:05:25.510
Ok so now let's go ahead and print out our ADF too so we can get an idea of what it looks like now.

72
00:05:25.580 --> 00:05:31.510
So I'm going to run basic dot PI and it's going to print out the two.

73
00:05:31.580 --> 00:05:35.830
And here you can see there's a state name and then some population estimates.

74
00:05:35.870 --> 00:05:43.760
So there's population estimates for 2013 2014 2015 from basically from 2010 all the way to 2017.

75
00:05:43.940 --> 00:05:45.740
So that's still several columns.

76
00:05:45.740 --> 00:05:52.250
So we're going to do is use a list comprehension again to automatically build the traces for us just

77
00:05:52.250 --> 00:05:55.090
like we did earlier.

78
00:05:55.110 --> 00:05:56.720
So let's show you how to do that.

79
00:05:57.060 --> 00:06:02.180
And this is a bit complicated because we're kind of mixing in these two library's panels and partly

80
00:06:02.490 --> 00:06:06.210
but it's not so bad if you take some time to understand what's going on here.

81
00:06:06.240 --> 00:06:09.390
So we're going to start off by building a list comprehension.

82
00:06:09.390 --> 00:06:17.530
So we're going to say that our data is going to be equal to this list comprehension and we're going

83
00:06:17.530 --> 00:06:21.470
to say go scatter.

84
00:06:21.730 --> 00:06:33.300
We're going to build a scatterplot for every state in DNA to index so we're going to start off with

85
00:06:33.300 --> 00:06:38.500
this the thing now that we need to do is actually fill out what's going inside the scatterplot.

86
00:06:38.850 --> 00:06:50.480
So I'm going to put this in here with X equal to why equal to mode and then name.

87
00:06:50.580 --> 00:06:54.930
So these are the four things we typically need to fill out for go Scouter Let's start the easy on which

88
00:06:54.930 --> 00:06:56.640
is mode mode.

89
00:06:56.730 --> 00:07:04.800
I'm going to do here is just say lines for the mode for the x and y values the x value is going to be

90
00:07:04.980 --> 00:07:06.040
equal to the columns.

91
00:07:06.060 --> 00:07:14.850
So we're going to say these are two columns then the y value is going to be equal to the actual value

92
00:07:14.970 --> 00:07:19.300
d to L O C at that name.

93
00:07:20.920 --> 00:07:25.820
Then we have mode which you've already filled out and the name is just going to be equal to name here.

94
00:07:29.140 --> 00:07:29.480
OK.

95
00:07:29.510 --> 00:07:30.490
So we have our data.

96
00:07:30.530 --> 00:07:33.190
Well we're quickly going to do is then plot it.

97
00:07:33.650 --> 00:07:36.860
So I'll say p y o the plot.

98
00:07:36.860 --> 00:07:38.730
And we're going to plot our data.

99
00:07:39.170 --> 00:07:41.330
And I know this is still maybe a little unclear.

100
00:07:41.330 --> 00:07:46.560
Let's go in and plot this mixture works and then we'll do a quicker view of what these lines 12 through

101
00:07:46.550 --> 00:07:48.230
15 are actually doing.

102
00:07:48.260 --> 00:07:54.550
So I'm going to save this and run it basic that pi and make sure you go ahead and utilize the notes

103
00:07:54.550 --> 00:07:58.280
we provide in case you have any questions or typos here.

104
00:07:59.660 --> 00:08:04.260
So we'll run some basic that pi and that brings us this chart.

105
00:08:04.680 --> 00:08:05.820
This is a line chart.

106
00:08:06.030 --> 00:08:09.360
And this basically just compares the population growth over the years.

107
00:08:09.400 --> 00:08:14.910
So as you kind of go along these lines you'll be able to tell the population estimates for each of these

108
00:08:14.910 --> 00:08:18.370
states so we can see Massachusetts has the biggest population here.

109
00:08:18.510 --> 00:08:23.640
And the growth between these smaller New-England states like Maine New Hampshire and Rhode Island was

110
00:08:23.640 --> 00:08:24.790
a little more shallow.

111
00:08:25.090 --> 00:08:25.670
All right.

112
00:08:25.890 --> 00:08:28.240
So that's what the plot actually ends up looking like.

113
00:08:28.290 --> 00:08:31.860
It's a pretty simple plot just showing the general population growth trends.

114
00:08:31.860 --> 00:08:37.780
But let's go ahead and review the actual more complex part of connecting panels to plotline.

115
00:08:38.010 --> 00:08:43.290
So what we did here is we read in that data we filtered out based off division equals a string one.

116
00:08:43.310 --> 00:08:47.460
We set the index to be the name that's going to be important part later on then we grabbed the list

117
00:08:47.460 --> 00:08:48.540
of population columns.

118
00:08:48.630 --> 00:08:54.060
Basically any column names that started with the word POPC and then we filter out based of those lists

119
00:08:54.060 --> 00:09:00.060
of column names then because there's so many columns to have population basically one for each year

120
00:09:00.060 --> 00:09:07.410
between 2010 and 2017 we went ahead and used a list comprehension in order to actually build out each

121
00:09:07.410 --> 00:09:08.760
of the scatter plots.

122
00:09:08.790 --> 00:09:13.230
So for every name that was available to us in the index.

123
00:09:13.260 --> 00:09:18.270
So those are essentially the states because recall it's essentially Connecticut Maine Massachusetts

124
00:09:18.270 --> 00:09:19.720
New Hampshire Rhode Island and Vermont.

125
00:09:19.860 --> 00:09:24.120
So we're saying OK for each one of these states for Connecticut for Maine for Massachusetts what we

126
00:09:24.120 --> 00:09:31.500
want you to do is set X equal to the columns because remember the columns themselves those are the population

127
00:09:31.500 --> 00:09:32.310
estimates.

128
00:09:32.670 --> 00:09:40.190
And then for the y value DFI to ellos see name what that does is it actually grabs this number value.

129
00:09:40.290 --> 00:09:48.330
So the x value is going to say population estimate 2016 the Y Valley using ellos see at that name it

130
00:09:48.330 --> 00:09:48.660
says.

131
00:09:48.690 --> 00:09:54.960
OK so for every name for instance for on Connecticut grabbed the value at Connecticut for this particular

132
00:09:55.320 --> 00:10:00.930
column and the mode is lines and the name for that is just the name of the index.

133
00:10:00.930 --> 00:10:03.440
So Connecticut Maine Massachusetts et cetera.

134
00:10:03.800 --> 00:10:04.190
OK.

135
00:10:04.230 --> 00:10:08.440
So I know it's a little bit complicated because we're mis mixing in kind of three different ideas here.

136
00:10:08.490 --> 00:10:11.280
Data frames list comprehension and go scatterplot.

137
00:10:11.400 --> 00:10:16.500
But if you take time to just slowly build an understanding of what's going on in this line then this

138
00:10:16.500 --> 00:10:18.280
is probably the most complicated part of this.

139
00:10:18.300 --> 00:10:22.520
And again you'll get more more practice and feel more more comfortable as you go along.

140
00:10:22.890 --> 00:10:23.590
OK.

141
00:10:23.590 --> 00:10:25.860
So that's it for line charts.

142
00:10:25.860 --> 00:10:30.150
If you have any questions on this one please feel free to post the Q&amp;A forums and I'm happy to help

143
00:10:30.150 --> 00:10:32.220
out and answer any questions on this.

144
00:10:32.220 --> 00:10:33.790
Thanks and we'll see what the next lecture.

