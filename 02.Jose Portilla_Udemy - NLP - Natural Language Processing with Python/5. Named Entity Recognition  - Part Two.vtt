WEBVTT
ï»¿1
00:00:05.360 --> 00:00:12.790
Welcome to part two of name recognition we just saw how we can add a single term as our own named entity.

2
00:00:12.870 --> 00:00:18.120
For example we saw how we could add the single term Tesla but what if we have several terms as possible

3
00:00:18.210 --> 00:00:23.460
named entities and this continued lecture we're going to go over how to add in multiple phrases as any

4
00:00:23.460 --> 00:00:24.520
are.

5
00:00:24.960 --> 00:00:30.120
For example if we're working with a vacuum company or their own custom text for marketing purposes we

6
00:00:30.120 --> 00:00:38.250
might want to add both vacuum space cleaner and vacuum cleaner as a named entity such as a product entity.

7
00:00:38.550 --> 00:00:43.960
Let's go ahead and jump to that you bring up and show you how you can add multiple named entities.

8
00:00:44.280 --> 00:00:46.100
OK here I am at the Jupiter Notebook.

9
00:00:46.140 --> 00:00:51.870
We're going to begin by creating a new document object and the object is going to have two strings inside

10
00:00:51.870 --> 00:00:55.230
of it just so we can show off multiple phrases.

11
00:00:55.230 --> 00:01:09.130
The first will be our company created a brand new vacuum space cleaner and then the second one another

12
00:01:09.140 --> 00:01:18.040
other string here all in the same function that need to separate if a comma will say this new vacuum

13
00:01:18.520 --> 00:01:24.010
cleaner is the best in show.

14
00:01:24.220 --> 00:01:28.720
So we had this new documents and noticed we have vacuum cleaner with a space between the words and vacuum

15
00:01:28.720 --> 00:01:30.010
cleaner of a dash.

16
00:01:30.010 --> 00:01:36.100
Previously if you come back up here and check our previous work we saw how to add in a single phrase

17
00:01:36.100 --> 00:01:39.890
or basically a single term like Tesla as a new entity.

18
00:01:40.060 --> 00:01:42.630
So he showed you how to do that by adding it in.

19
00:01:42.640 --> 00:01:48.790
Now we're going to do is we're not going to show multiple options so vacuum cleaner and vacuum cleaner

20
00:01:49.390 --> 00:01:55.000
and then we're going to do this is we're first going to attempt to show entities on the document just

21
00:01:55.000 --> 00:01:58.660
to show you that vacuum cleaner hasn't actually been added or anything.

22
00:01:58.660 --> 00:02:01.410
So if I run that no entities are found.

23
00:02:01.420 --> 00:02:08.050
So let's go ahead and add a vacuum cleaner in a vacuum cleaner as named entities to do this for multiple

24
00:02:08.050 --> 00:02:08.410
phrases.

25
00:02:08.410 --> 00:02:10.040
We're going to say it from.

26
00:02:10.870 --> 00:02:20.930
Matter import phrase matcher and then we will say matcher is equal to the phrase matcher and will pass

27
00:02:20.980 --> 00:02:28.910
in an LP vocab and the next we're going to do is create the desired list of patterns.

28
00:02:29.300 --> 00:02:33.950
So make a list of all the phrases you want to add in as a named entity.

29
00:02:33.950 --> 00:02:38.650
And for our case we want to add in vacuum cleaner so vacuum space cleaner.

30
00:02:38.780 --> 00:02:43.480
And we also do vacuum dash cleaner.

31
00:02:43.660 --> 00:02:47.890
So there's a phrase list and now we actually need to turn these into phrase patterns by passing them

32
00:02:47.890 --> 00:02:55.240
into the function it will say phrase patterns is equal to and we use a little bit of list comprehension

33
00:02:55.240 --> 00:03:05.030
here by saying a.p text for text in phrase list.

34
00:03:05.080 --> 00:03:11.500
After that we're going to apply the patterns to add or match or objects will say matter add and you

35
00:03:11.500 --> 00:03:15.460
can name whatever matcher you want so we'll just say or new product again.

36
00:03:15.490 --> 00:03:17.860
The string is completely up to you whatever you want to call this.

37
00:03:17.980 --> 00:03:21.090
Go ahead and review the vocabulary and matching lecture.

38
00:03:21.250 --> 00:03:21.880
When I say none.

39
00:03:21.880 --> 00:03:29.250
For the callback and then an Asterix and then phrase underscore patterns.

40
00:03:29.260 --> 00:03:35.360
This automatically adds in each of these vacuum cleaner and vacuum cleaner.

41
00:03:35.400 --> 00:03:42.570
So now we have our phrase patterns added as a new set of matchers called new product.

42
00:03:42.570 --> 00:03:52.110
Next we want to do is actually find the matches will say found matches is equal to matcher doc and we

43
00:03:52.110 --> 00:03:54.560
check out our found matches we found that twice.

44
00:03:54.630 --> 00:04:00.290
So we found that once here at the end the vacuum cleaner and here the middle this new vacuum cleaner.

45
00:04:00.300 --> 00:04:04.270
So there are two matches for us and then we're going to do is from here.

46
00:04:04.380 --> 00:04:08.560
We can actually create spans from each match in Korean names and cities from them.

47
00:04:10.140 --> 00:04:14.620
We will say from speccy that tokens import Spanne.

48
00:04:14.950 --> 00:04:16.270
That's actually the same thing we imported.

49
00:04:16.270 --> 00:04:22.270
We were adding just a single term and then it's up to you to decide what actual names and dates you

50
00:04:22.270 --> 00:04:22.940
want.

51
00:04:22.990 --> 00:04:27.170
You can check out our names and it's the recognition notebook for all the various tags.

52
00:04:27.430 --> 00:04:35.000
In this case we're going to say these vacuum cleaners are a product sort of come back here and say Prod.

53
00:04:35.630 --> 00:04:40.680
is equal to Doc dot vocab dot strings.

54
00:04:40.970 --> 00:04:46.360
And as a unicode string what you're going to do is passen whatever the string here for a type is.

55
00:04:46.370 --> 00:04:54.550
And in our case it's all caps product so recopy this one person in here and then we're going to use

56
00:04:54.550 --> 00:04:56.500
a little bit of miscomprehension here.

57
00:04:56.500 --> 00:05:01.330
So recall that inside a found matches there's tuples with three items in it.

58
00:05:01.330 --> 00:05:06.550
We're really only concerned with these two items the start and the end and we're going to use span to

59
00:05:06.550 --> 00:05:10.080
actually define the start the span and the end of the span.

60
00:05:10.180 --> 00:05:15.160
So I to have something that looks like this span going to pass in the document.

61
00:05:15.190 --> 00:05:20.110
That is the original document appear where our company created brand new vacuum cleaner this new vacuum

62
00:05:20.110 --> 00:05:21.390
cleaner is best in show.

63
00:05:21.730 --> 00:05:27.000
So that's the documents and then we're going to actually grab for each match.

64
00:05:27.250 --> 00:05:38.470
Index one start and then index to its end and we're going to say that its label should be Prod. which

65
00:05:38.470 --> 00:05:42.380
was defined here using doc that vocab.

66
00:05:42.380 --> 00:05:46.840
And we're going to be creating these spans for every single match inside of found matches so we can

67
00:05:46.840 --> 00:05:56.470
use some LIT's comprehension to say inside of this list for match in found matches and we're going to

68
00:05:56.470 --> 00:06:00.210
set this equal to our new entities.

69
00:06:00.210 --> 00:06:05.420
Again we're just creating these span objects using the original documents and all the found matches

70
00:06:05.430 --> 00:06:10.890
the start and the stop and then manually labeling them as a product.

71
00:06:10.890 --> 00:06:18.560
So there we have our new entities and then we take the doc and say those are the original entities that

72
00:06:18.570 --> 00:06:28.460
are documents we're going to set it equal to the original entities Plus our new entities.

73
00:06:28.510 --> 00:06:29.490
And you could also use a pen.

74
00:06:29.500 --> 00:06:35.070
But this works the same way in Python essentially all we're doing is remember Doc ants originally it

75
00:06:35.070 --> 00:06:36.500
has no entities.

76
00:06:36.520 --> 00:06:43.680
Now we're taking this list of new entities that we find and then adding it into the original which means

77
00:06:43.680 --> 00:06:51.060
now if I say show entities on the document it returns back both vacuum space cleaner and vacuum cleaner

78
00:06:51.540 --> 00:06:52.950
as products.

79
00:06:52.950 --> 00:06:59.730
So this is now how you can manually add in your own named entities if you have a list of entities you

80
00:06:59.730 --> 00:07:02.070
want to pass in.

81
00:07:02.080 --> 00:07:08.550
Now previously we saw how Spacey had built in tools for counting the number of parts of speech.

82
00:07:08.680 --> 00:07:14.860
It actually doesn't have a built in count by method for counting the number of named entities but we

83
00:07:14.860 --> 00:07:17.920
can easily do this with a little bit of list comprehension.

84
00:07:17.920 --> 00:07:21.190
And in fact we can't even filter based off the label.

85
00:07:21.190 --> 00:07:25.510
So what we can do here is let's imagine we have in other documents

86
00:07:29.730 --> 00:07:35.130
and we wanted to figure out how many times was a money entity mentioned.

87
00:07:35.510 --> 00:07:38.160
So say originally I paid

88
00:07:41.330 --> 00:07:47.890
will say twenty nine ninety five for this car.

89
00:07:47.890 --> 00:08:00.900
Or let's say car toy if I preachy for your car and then we'll say but now it is marked down by $10.

90
00:08:01.050 --> 00:08:05.670
OK so we have this documents and let's say this documents really long and you want to figure out how

91
00:08:05.670 --> 00:08:10.310
many times was money mentioned here or any type of named entity you have.

92
00:08:10.470 --> 00:08:15.930
So you say how many times were people mentioned or was a corporation or a nationality mentioned et cetera.

93
00:08:15.930 --> 00:08:18.150
Right now we're just looking for this money tag.

94
00:08:18.150 --> 00:08:20.220
How many of those do we actually have.

95
00:08:20.220 --> 00:08:22.920
All we need to do is the following.

96
00:08:22.920 --> 00:08:32.120
We can simply create a list comprehension saying give me the entity for every entity in dock in TS.

97
00:08:32.430 --> 00:08:37.440
If you just check this list right here that's going to give you every single entity but you only want

98
00:08:37.440 --> 00:08:38.590
a specific entity.

99
00:08:38.640 --> 00:08:46.040
So you'll say if Antz label underscore is equal to and then whatever else you're interested in.

100
00:08:46.080 --> 00:08:47.610
In our case it's money.

101
00:08:47.670 --> 00:08:52.590
So if you run that that gives the entities and if you want to check how many of them you can just check

102
00:08:52.590 --> 00:08:54.490
the length of that list

103
00:08:58.390 --> 00:09:01.920
that is it for this series of lectures on named entities.

104
00:09:01.990 --> 00:09:08.440
I hope you can tell just how powerful Spacey is even on its own at recognizing named entities and the

105
00:09:08.440 --> 00:09:13.480
flexibility it gives you to add not just single terms but multiple named entities for your own custom

106
00:09:13.480 --> 00:09:14.970
text data sets.

107
00:09:14.980 --> 00:09:19.760
We'll see you at the next lecture where we talk in more depth about visualizing named entity recognition.

