WEBVTT
ï»¿1
00:00:05.210 --> 00:00:07.090
Welcome back everyone in this lecture.

2
00:00:07.100 --> 00:00:11.710
We're going to do a quick overview of the natural language processing basics assessment test.

3
00:00:11.720 --> 00:00:13.390
Let's open up the notebook and go for it.

4
00:00:13.490 --> 00:00:13.790
OK.

5
00:00:13.790 --> 00:00:16.320
Inside you're an old Python basics folder.

6
00:00:16.370 --> 00:00:21.890
Once you open up that folder you should see an LP basics assessment notebook as well as an LP basic

7
00:00:21.950 --> 00:00:23.460
assessment solution book.

8
00:00:23.480 --> 00:00:27.380
Right now we're going to do an overview of the assessment and then the next lecture will code through

9
00:00:27.380 --> 00:00:28.730
the solutions.

10
00:00:28.730 --> 00:00:31.950
Let's quickly go over what you need to do for the assessment.

11
00:00:32.000 --> 00:00:36.860
So for this assessment we're going to be using a short story called an occurrence Owl Creek Bridge by

12
00:00:36.860 --> 00:00:38.810
Ambrose Pierce from 1890.

13
00:00:39.050 --> 00:00:42.770
The stories in the public domain and we already have a text object ready for you.

14
00:00:43.040 --> 00:00:47.150
So you're first going to run the cell to perform the standard imports and then you're going to create

15
00:00:47.150 --> 00:00:50.930
a document object from this text file and it's located here.

16
00:00:51.020 --> 00:00:52.760
Textfiles Owl Creek TXI.

17
00:00:52.800 --> 00:00:54.460
It's underneath that text files folder.

18
00:00:55.730 --> 00:01:01.340
Then you should be able to run the cell to confirm that you get out the same output here that we're

19
00:01:01.340 --> 00:01:05.960
going to ask you to answer a couple of questions like how many tokens are contained in the file and

20
00:01:05.960 --> 00:01:08.270
how many sentences are contained in the file.

21
00:01:08.270 --> 00:01:12.270
Keep in mind you'll probably want to build out a list first and then check the length of that list.

22
00:01:12.870 --> 00:01:17.940
Next we want you to print the second sentence in the document and as a hint indexing starts at zero

23
00:01:18.300 --> 00:01:20.960
and we'll say the title counts as the first sentence.

24
00:01:21.150 --> 00:01:24.500
So keep in mind we're going to say that this title counts as a sentence.

25
00:01:26.350 --> 00:01:30.680
After that we also have a couple of more solutions or questions for you.

26
00:01:30.760 --> 00:01:33.700
The first question is for each token in the sentence above.

27
00:01:33.700 --> 00:01:35.290
Print it's text.

28
00:01:35.350 --> 00:01:36.650
It's a speech tag.

29
00:01:36.820 --> 00:01:40.600
It's syntactic dependency Ted and it's limitation.

30
00:01:40.780 --> 00:01:44.560
And as a challenge how the values line up in columns and then print the output.

31
00:01:44.590 --> 00:01:47.840
So for a normal solution you'll get a result that looks something like this.

32
00:01:48.010 --> 00:01:52.210
But if you actually format it correctly you should get something that looks nicer or something like

33
00:01:52.210 --> 00:01:52.650
that.

34
00:01:54.690 --> 00:02:01.560
Next task is to write a matcher called Swimming that finds both occurrences of the phrase swimming vigorously

35
00:02:01.620 --> 00:02:02.700
in the text.

36
00:02:02.700 --> 00:02:07.620
And you should include in is space true pattern between those words.

37
00:02:07.620 --> 00:02:09.920
So recall that we talked about pattern matching.

38
00:02:09.990 --> 00:02:15.870
You're going to have swimming as one pattern component than is space is true and then vigorously as

39
00:02:15.870 --> 00:02:21.660
an expanding component secret you're matching objects and then search for a should find these two matches

40
00:02:21.660 --> 00:02:22.330
here.

41
00:02:22.500 --> 00:02:25.110
Then we want you to print the text surrounding each found the match.

42
00:02:25.110 --> 00:02:28.370
So we want you to print the tokens surrounding that match.

43
00:02:28.770 --> 00:02:32.300
And then for extra credit print the sentence that contains each found a match.

44
00:02:32.340 --> 00:02:36.000
So see if you can actually instead of just printing out the tokens around it.

45
00:02:36.000 --> 00:02:37.950
Print out the entire sentence.

46
00:02:37.950 --> 00:02:39.620
So here are the two sentences.

47
00:02:39.840 --> 00:02:40.380
OK.

48
00:02:40.590 --> 00:02:41.480
Best of luck on that.

49
00:02:41.580 --> 00:02:43.650
And in the next lecture we'll go over the solutions.

50
00:02:43.650 --> 00:02:44.390
We'll see you there.

