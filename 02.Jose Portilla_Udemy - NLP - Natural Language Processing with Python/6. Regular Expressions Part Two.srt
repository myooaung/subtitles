1
00:00:05,040 --> 00:00:10,510
We'll come back in this lecture and continue where we left off and go over a couple of more regular

2
00:00:10,510 --> 00:00:11,950
expression techniques.

3
00:00:11,950 --> 00:00:14,330
Let's head over back to the notebook.

4
00:00:14,360 --> 00:00:20,470
Here we are in the same notebook we left off last time previously we actually showed you how to reduce

5
00:00:20,620 --> 00:00:26,080
this pattern using regular expressions into this pattern with quantifiers.

6
00:00:26,080 --> 00:00:30,520
One other thing I want to mention are the ability to actually grab separate groups.

7
00:00:30,520 --> 00:00:36,880
Currently this entire phrase for the pattern is one solid group that you can compile separate groups

8
00:00:36,940 --> 00:00:39,050
using parentheses.

9
00:00:39,150 --> 00:00:43,660
So I can use parentheses to separate these groups

10
00:00:46,360 --> 00:00:48,220
in between the dashes.

11
00:00:48,220 --> 00:00:54,520
So I'm adding Prince C's and now when I search for this pattern inside of the original text which was

12
00:00:54,520 --> 00:01:02,750
my telephone number and if I actually say my Match.com group that grouped together everything but I

13
00:01:02,750 --> 00:01:08,630
can actually call individual groups starting at index position 1 and that's going to grab the first

14
00:01:08,630 --> 00:01:10,760
set that was inside the princes.

15
00:01:10,760 --> 00:01:19,100
So if I say Group 1 it just grabs 8 8 8 you can see here if I were to include the dash inside the princes

16
00:01:19,580 --> 00:01:24,290
and we run this group one would have been a dash.

17
00:01:24,290 --> 00:01:31,100
So this way you can actually use the same character identifiers and quantifiers as before except now

18
00:01:31,310 --> 00:01:36,020
you can easily group things because maybe you only wanted the area code so that you could just say Group

19
00:01:36,020 --> 00:01:36,480
One.

20
00:01:36,680 --> 00:01:42,560
Or if you wanted the last digits Well that would be in group 3 and those would be the last four digits.

21
00:01:42,560 --> 00:01:46,670
So that's the ability to use groups and if you want to group everything you just don't provide a number

22
00:01:47,120 --> 00:01:47,580
of groups.

23
00:01:47,600 --> 00:01:53,060
All the groups together some additional regular expression syntax that won't show you is the pipe operator

24
00:01:53,330 --> 00:01:56,360
you can use the pipe operator to have an OR statement.

25
00:01:56,540 --> 00:02:07,030
For example I can say Ariz search and the pattern I can search for is man pipe operator woman and I

26
00:02:07,030 --> 00:02:14,550
can say text is this man was here and we end up getting a match on man.

27
00:02:14,950 --> 00:02:21,630
Or I could say this woman was here and we end up getting a match on a woman so you can see here it'll

28
00:02:21,640 --> 00:02:25,470
work for either man or woman with the pipe operator.

29
00:02:25,690 --> 00:02:31,630
You can also use a wildcard character you can use a wildcard as a placement that will match any character

30
00:02:31,630 --> 00:02:32,620
placed there.

31
00:02:32,650 --> 00:02:45,080
For example I can say r e thought find all and I'll put a dot there for my wildcard and then say 80

32
00:02:46,940 --> 00:02:53,190
and then I'll create some Dr. Seuss sentence The Cat In The Hat set.

33
00:02:53,780 --> 00:02:59,090
And if you run this you can see it found cat and set basically a wild card.

34
00:02:59,150 --> 00:03:00,390
And then 80.

35
00:03:00,480 --> 00:03:07,020
So C.A.T. h a t an s t keep in mind the weight is currently working.

36
00:03:07,020 --> 00:03:09,250
You're only matching on one letter.

37
00:03:09,300 --> 00:03:16,260
So if you were to actually say splatt at the end of this and run this you would only get out 80.

38
00:03:16,290 --> 00:03:22,710
You could then continue on messing around with quantifiers or identifiers or even more wild cards.

39
00:03:23,070 --> 00:03:28,570
So you can place multiple wildcards here and illand the grabbing the space and then the letter.

40
00:03:28,710 --> 00:03:32,610
Or in this case a grab two letters before a and so on.

41
00:03:32,610 --> 00:03:40,050
So again a dot a wildcard character a combine it using the sort of grouping quantifiers or character

42
00:03:40,080 --> 00:03:47,260
identifiers next maybe you're just interested in things that start or end with a particular type of

43
00:03:47,620 --> 00:03:48,320
character.

44
00:03:48,580 --> 00:03:56,290
Well you can use the carrot which is above your six on your keyboard in order to say starts with a dollar

45
00:03:56,290 --> 00:03:58,890
sign signal's ends with.

46
00:03:58,900 --> 00:04:02,220
So for example I can say are either fine.

47
00:04:02,230 --> 00:04:11,260
All I will say backslash D for each digit and then a dollar sign and a dollar sign against signals ends

48
00:04:11,260 --> 00:04:13,570
with.

49
00:04:13,660 --> 00:04:17,010
So I can say this ends with a.

50
00:04:17,060 --> 00:04:23,440
Number two and return back and it's going to fine where it ends of the number.

51
00:04:23,540 --> 00:04:25,380
And there we see two.

52
00:04:25,610 --> 00:04:30,960
I could then also say carrot here instead of a dollar sign.

53
00:04:31,110 --> 00:04:33,160
And that and the Cate's starts with.

54
00:04:33,210 --> 00:04:37,900
So I could say one is the loneliest number.

55
00:04:40,980 --> 00:04:44,460
Run that then I get back one since it's starting with a digit.

56
00:04:44,460 --> 00:04:49,020
Now I should note that this is for the entire string not just for individual words.

57
00:04:50,060 --> 00:04:55,580
To exclude characters you can use the carrot symbol in conjunction with a set of brackets.

58
00:04:55,580 --> 00:04:56,610
Let me show what I mean by that.

59
00:04:56,720 --> 00:05:08,930
Let's create a much longer phrase and say there are three numbers 34 inside five this sentence.

60
00:05:08,920 --> 00:05:13,250
Now let's imagine I wanted to get rid of all the numbers inside this sentence.

61
00:05:13,790 --> 00:05:16,370
What I can do is I can say r e.

62
00:05:16,770 --> 00:05:18,920
Find all.

63
00:05:19,070 --> 00:05:23,060
And then I can pasan a pattern.

64
00:05:23,360 --> 00:05:33,650
So I'll say are I then quotes and then I'm going to say closed square brackets carot for backslash D.

65
00:05:33,740 --> 00:05:35,880
So my backslash d the carrot.

66
00:05:35,900 --> 00:05:41,870
And when the carrot is actually inside these square brackets that's going to indicate exclusion.

67
00:05:41,900 --> 00:05:45,230
So I'm basically saying exclude any digits.

68
00:05:45,470 --> 00:05:51,140
So it's pass in our phrase and you'll see there are.

69
00:05:51,410 --> 00:05:56,370
And then we just get spaces and then numbers inside this sentence.

70
00:05:56,390 --> 00:06:00,950
So it's actually no longer actually grabbing any of these numbers we're excluding it with the use of

71
00:06:00,950 --> 00:06:02,900
the square braces or brackets.

72
00:06:03,050 --> 00:06:08,330
And then this carrot symbol then if you actually want to get the boards all back together you can add

73
00:06:08,360 --> 00:06:12,030
a plus sign here and that's going to return back.

74
00:06:12,080 --> 00:06:18,670
Basically anything that isn't a digit so we can actually use this to remove punctuation from a sentence

75
00:06:18,730 --> 00:06:23,910
which is a common thing you have to do when working a natural language processing.

76
00:06:23,920 --> 00:06:36,490
Let's create another test phrase and say this is a string but it has punctuation how to remove it.

77
00:06:36,630 --> 00:06:37,890
Question mark.

78
00:06:37,890 --> 00:06:40,020
So there's a bunch of punctuation here.

79
00:06:40,110 --> 00:06:46,190
Again all you have to do is say R-E find all and then start indicating what we want to remove.

80
00:06:46,260 --> 00:06:52,290
So inside the square braces I'll have my care and it's a exclamation point.

81
00:06:52,290 --> 00:06:53,210
Period.

82
00:06:53,310 --> 00:06:59,150
Question mark and that's say plus.

83
00:06:59,360 --> 00:07:03,720
And then in my test phrase run that.

84
00:07:03,860 --> 00:07:05,300
And then I get see this nice list.

85
00:07:05,300 --> 00:07:08,010
This is a string but it has punctuation how to remove it.

86
00:07:08,060 --> 00:07:11,900
So you notice right now is a list of everything that isn't punctuation.

87
00:07:11,930 --> 00:07:13,470
So I'm using exclusion here.

88
00:07:13,670 --> 00:07:21,020
And if I wanted to I could say my list is equal to this and then I have my list here and I can use the

89
00:07:21,410 --> 00:07:26,990
join method off of a string in order to join this list together.

90
00:07:26,990 --> 00:07:28,780
So I could say join.

91
00:07:28,790 --> 00:07:35,750
Let's actually just say right here join a space six say space and that's going to join every item in

92
00:07:35,750 --> 00:07:38,930
this list with a space in between.

93
00:07:38,930 --> 00:07:43,160
So now I see this is a string that has punctuation how to remove it which now has successfully removed

94
00:07:43,250 --> 00:07:45,230
any punctuation from this test phrase.

95
00:07:45,230 --> 00:07:48,990
Main thing to note here is you have the square braces and the carrot.

96
00:07:49,220 --> 00:07:53,710
And then this plus sign and then anything inside these brackets after this.

97
00:07:53,960 --> 00:07:56,240
We're looking for exclusion.

98
00:07:56,370 --> 00:08:01,080
Now the last regular expression parameter I want to talk about is something we actually just saw which

99
00:08:01,080 --> 00:08:04,680
is the plus sign along with using brackets for grouping.

100
00:08:04,770 --> 00:08:11,370
So this plus sign along with brackets allows you to use grouping Mishu what I mean by that by saying

101
00:08:11,400 --> 00:08:18,790
text and the text string are going to work with is only find the we're going to say hyphenated words

102
00:08:18,790 --> 00:08:18,970
here.

103
00:08:18,970 --> 00:08:31,830
So hyphen words where are the longish dash words.

104
00:08:31,830 --> 00:08:37,090
So let's imagine a situation where we want to find any sort of words to have this hyphen in it.

105
00:08:37,930 --> 00:08:45,740
What we can do here is say Ari fine all so we're saying find some set of letters a dash and then some

106
00:08:45,740 --> 00:08:48,530
other set of letters and the way we're going to word this here.

107
00:08:48,600 --> 00:08:51,150
S.a.a be able to grab that period as well.

108
00:08:51,200 --> 00:08:58,560
So the way we do this is we say in square brackets backslash w which if you refer back to your expressions

109
00:08:58,620 --> 00:09:02,290
notebook and starts crawling up so you can find the table.

110
00:09:02,380 --> 00:09:06,380
Here we have the identifier backslash lowercase W..

111
00:09:06,440 --> 00:09:07,940
That stands for alphanumerics.

112
00:09:07,960 --> 00:09:10,340
So both letters and numbers will be picked up here.

113
00:09:10,600 --> 00:09:15,010
So this will grab inside square braces with a plus sign.

114
00:09:15,010 --> 00:09:19,050
This basically indicates grab any number of alphanumerics.

115
00:09:19,060 --> 00:09:20,800
So some group of alphanumerics.

116
00:09:20,800 --> 00:09:27,160
So alphanumerics is indicated by backslash w the square braces with the plus sign indicates any number

117
00:09:28,080 --> 00:09:37,140
then what we want is a dash and then backslash w and then plus for Again any number of alphanumerics

118
00:09:37,860 --> 00:09:40,000
and then we're going to search that text.

119
00:09:40,290 --> 00:09:45,060
We run that and it went ahead and find those words for us and actually then pick up this period because

120
00:09:45,390 --> 00:09:50,220
we didn't ask for punctuation we just asked for alphanumerics in a period doesn't count as that.

121
00:09:50,220 --> 00:09:53,400
So that allows you to actually grab anything of the sort of pattern.

122
00:09:53,490 --> 00:09:59,400
So you get the idea here is this again a group of alphanumerics a dash and then another out group of

123
00:09:59,400 --> 00:10:00,440
alphanumerics.

124
00:10:00,480 --> 00:10:05,820
Notice that we don't have to specify how long we expected either side of number of characters on the

125
00:10:05,820 --> 00:10:08,090
dash to be OK.

126
00:10:08,370 --> 00:10:12,830
So I know that's pretty complicated stuff but remember you should always be able to break out a regular

127
00:10:12,840 --> 00:10:16,950
expression using the tables that we provide here into it's basic steps.

128
00:10:16,980 --> 00:10:21,840
It should also be able to use the example matches and example Petar codes with identifiers and quantifiers

129
00:10:22,180 --> 00:10:23,810
to actually build up what you want.

130
00:10:23,880 --> 00:10:29,340
And the main one that we're looking for here was this plus one which means just occurs one or more times.

131
00:10:29,370 --> 00:10:29,920
OK.

132
00:10:30,330 --> 00:10:34,050
So coming up next is going to be your assessment to test your new skills.

133
00:10:34,050 --> 00:10:35,010
We'll see you at the next lecture.

