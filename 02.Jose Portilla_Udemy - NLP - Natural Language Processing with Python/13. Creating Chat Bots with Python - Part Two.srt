1
00:00:05,370 --> 00:00:10,390
Welcome back everyone to part two of our Q and A bot with Python 4 Part 2.

2
00:00:10,400 --> 00:00:14,900
We're going to begin to understand the steps on how to vector victories this particular data set including

3
00:00:14,900 --> 00:00:20,060
vector izing the questions and the stories as well as the answers and then we'll learn how to create

4
00:00:20,060 --> 00:00:25,040
a function that can victories data for us to really go through steps in a bit more of a manual process

5
00:00:25,370 --> 00:00:28,130
and then at the end we'll create a function that does it all for us.

6
00:00:28,130 --> 00:00:32,580
So let's go back to the notebook where we were before and continue where we left off last time.

7
00:00:32,720 --> 00:00:33,020
All right.

8
00:00:33,020 --> 00:00:41,870
To begin we'll say from Caris that pre processing that sequence import pad underscore sequences.

9
00:00:41,870 --> 00:00:48,150
And then we'll say from Kerry's stop pre processing that text import token either.

10
00:00:48,200 --> 00:00:52,550
We've actually seen both of these in our previous text generation project.

11
00:00:52,550 --> 00:00:58,080
The next thing we want to do is create an integer encoding for the sequences of words.

12
00:00:58,460 --> 00:01:01,100
So we'll create an instance of our token EIS or object.

13
00:01:02,360 --> 00:01:05,270
And in this case we don't actually want any filters.

14
00:01:05,390 --> 00:01:11,090
So remember if you look at the doctoring for this there's a list of filters here that could possibly

15
00:01:11,090 --> 00:01:11,900
be used.

16
00:01:11,900 --> 00:01:13,270
We actually don't want any of these.

17
00:01:13,280 --> 00:01:17,510
So we're going to see this as an empty list and you can also leave it as an empty string if you want

18
00:01:17,510 --> 00:01:19,130
that as well.

19
00:01:19,130 --> 00:01:21,330
It just needs to be an empty ignorable.

20
00:01:21,770 --> 00:01:32,040
And then we'll say took a nicer fit on and then we call Tex and we'll fit it on our vocabulary so after

21
00:01:32,040 --> 00:01:37,320
running that you can take a look at your token EIS or object and you should be able to see all the things

22
00:01:37,320 --> 00:01:43,440
we've talked about before but specifically a word index with essentially a dictionary that maps every

23
00:01:43,440 --> 00:01:47,370
word in our vocabulary set to a specific index number.

24
00:01:47,370 --> 00:01:52,050
So question mark is one apple is an index 37 and so on.

25
00:01:52,050 --> 00:01:54,270
So here we have every possible word.

26
00:01:54,420 --> 00:01:57,180
And notice it's been automatically lowercase for us.

27
00:01:57,240 --> 00:02:01,230
So Mary here is now been lowercase Sander is now lowercase and so on.

28
00:02:01,230 --> 00:02:06,590
So you have to keep that in mind as we're building out our own stories that we need to lowercase sometimes.

29
00:02:06,630 --> 00:02:12,810
Have took a nicer dot word index ready to go and then we're going to do is we're going to perform the

30
00:02:12,810 --> 00:02:19,140
same sort of tokenization but for the story questions and answers so I will show you how we could do

31
00:02:19,140 --> 00:02:25,020
this in a manual fashion but then will create a function that will vector write stories for us automatically

32
00:02:27,670 --> 00:02:35,430
so we'll create a list called Train story text set that to be an empty list I'll say train question

33
00:02:35,430 --> 00:02:43,830
text and set that to be an empty list and then we'll say train underscore answers and set that's being

34
00:02:43,830 --> 00:02:45,060
empty list.

35
00:02:45,060 --> 00:02:49,230
So remember there's three parts there's a story the question and the answers and then we'll say the

36
00:02:49,230 --> 00:02:59,490
following for the story the question and the answer in our training data I can simply take that train

37
00:02:59,490 --> 00:03:04,910
story text and then append the story to it.

38
00:03:04,930 --> 00:03:09,640
So essentially I'm just kind of separating out these components almost like an unzipping and then we

39
00:03:09,640 --> 00:03:17,740
can say train question text the append the question and I could do the same thing for the answers I

40
00:03:17,740 --> 00:03:24,530
could say train underscore answers and then append the answer.

41
00:03:24,610 --> 00:03:27,880
So if you run that and you take a look at any one of these.

42
00:03:27,910 --> 00:03:32,400
So for example a train story text this is now just the stories.

43
00:03:32,440 --> 00:03:37,720
So essentially we have just the stories just the questions and just the answers all separated out from

44
00:03:37,720 --> 00:03:39,360
each other.

45
00:03:39,370 --> 00:03:46,240
So what I could do is say something like this my train story sequence is going to be the token riser

46
00:03:46,870 --> 00:03:54,490
and then I call the function texts two sequences and then pass in the list such as train story text

47
00:03:56,390 --> 00:04:02,860
and now I check the length of train story text or sequence it's ten thousand because remember there's

48
00:04:02,860 --> 00:04:10,660
10000 stories the exact same as the story text but if we actually take a look at this object train story

49
00:04:10,660 --> 00:04:16,660
sequence notice it's now kind of the numerical version of what the original train story text was.

50
00:04:16,660 --> 00:04:20,120
So essentially converting this into the index calls.

51
00:04:20,120 --> 00:04:23,890
So Mary remember Mary is twenty three here.

52
00:04:23,890 --> 00:04:29,320
So we come back up here we look up Mary and there it is twenty three.

53
00:04:29,340 --> 00:04:34,530
So somebody is converting each word to its matching word index using the text the sequences.

54
00:04:35,400 --> 00:04:41,130
So what I'm going to do is create a function that can help us out with vector rising these particular

55
00:04:41,130 --> 00:04:42,390
stories.

56
00:04:42,630 --> 00:04:54,170
So we'll say the F vector rise underscore stories and it's going to take in all the data it's going

57
00:04:54,170 --> 00:05:00,740
to take in a word index and we'll go ahead and default this value to the word index that we just created.

58
00:05:00,740 --> 00:05:06,800
You can always overwrite it for other datasets or other sets questions and then we'll also need to know

59
00:05:06,800 --> 00:05:09,580
the max story length as well as the max question length.

60
00:05:09,710 --> 00:05:13,960
And the reason for that is because we're going to be using padding sequences because not every story

61
00:05:13,960 --> 00:05:15,890
not every question is the same length.

62
00:05:15,890 --> 00:05:20,840
But the actual recurrent neural network that we're training on it needs things to be in the same length.

63
00:05:20,870 --> 00:05:27,800
So we want to pad it out with zeros in case there's a story is too short or we want to cut down a story

64
00:05:27,800 --> 00:05:29,160
if it's too long.

65
00:05:29,300 --> 00:05:36,790
So we'll say Max story length is equal to the max story length.

66
00:05:36,790 --> 00:05:44,320
And then we'll say Max question length is equal to Max question length and I'm going to zoom out here

67
00:05:44,320 --> 00:05:46,030
just a little bit so you can see everything.

68
00:05:46,160 --> 00:05:51,790
But essentially I'm taking the data my word index that we defined earlier and then passing in the MAX

69
00:05:51,790 --> 00:05:54,080
story length as well as the max question length.

70
00:05:54,100 --> 00:05:56,360
So nothing too crazy here.

71
00:05:56,520 --> 00:05:59,070
And let's zoom back in.

72
00:05:59,160 --> 00:06:04,140
You can always copy and paste this and essentially this is taking in the data the data that's going

73
00:06:04,140 --> 00:06:07,440
to be both the stories the queries and the answers.

74
00:06:07,440 --> 00:06:12,100
And what I want to do is I want to victories the stories questions and answers into padded sequences.

75
00:06:12,120 --> 00:06:17,310
So first we need to do is loop for every story question answer that data then I can convert the raw

76
00:06:17,310 --> 00:06:22,910
words to a word index value and then I can append each set to their appropriate output list.

77
00:06:22,920 --> 00:06:29,730
So let's create those output lists and create one for stories which were what's called the stories we'll

78
00:06:29,730 --> 00:06:32,730
just call capital X. since that's our main training data.

79
00:06:32,730 --> 00:06:41,690
So here we have the stories that's our X then we have another essentially feature it's gonna be the

80
00:06:41,690 --> 00:06:42,730
actual question.

81
00:06:42,800 --> 00:06:47,230
So we'll call this X Q That's gonna be another empty list for now.

82
00:06:47,240 --> 00:06:49,820
So here we have our questions.

83
00:06:49,820 --> 00:06:55,580
X Q And then finally the target which is why that's going to be the correct answer.

84
00:06:56,010 --> 00:07:01,640
So that's the yes or no so say Y is an empty list.

85
00:07:01,640 --> 00:07:07,960
So have those empty lists and then for all my data I'm going to do the following we'll say for every

86
00:07:07,960 --> 00:07:16,020
story question or else just save a little bit of spaces a query and answer in data.

87
00:07:16,100 --> 00:07:19,990
I'm going to first grab the word index for every word in the story.

88
00:07:20,000 --> 00:07:27,070
So I'm going to say word lower for word.

89
00:07:27,610 --> 00:07:32,930
Let's make sure I spell that right foreword and story and I'm going to create a list comprehension where

90
00:07:35,830 --> 00:07:42,190
so I'm just saying word that lower forward in story and then actually want the index.

91
00:07:42,190 --> 00:07:53,570
So we'll say word underscore index for word dot lower and then I'm going to set this to a lower case

92
00:07:53,630 --> 00:07:56,640
x because I'm doing this for each story.

93
00:07:56,660 --> 00:08:04,580
So for each story I'm creating a list that essentially will look something like this will be a number

94
00:08:04,580 --> 00:08:09,080
like if Mary was the first one I'll be twenty three and then fourteen and so on really similar to what

95
00:08:09,080 --> 00:08:10,340
we just did before.

96
00:08:10,340 --> 00:08:16,280
However it's gonna be for each particular story in the dataset so let's lowercase x and then I'm going

97
00:08:16,280 --> 00:08:23,730
to do the exact same thing but for the questions so such I'm going to copy and paste this and lowercase

98
00:08:23,850 --> 00:08:31,910
x Q word index or that lower foreword except this time it's going to be in the query or the question

99
00:08:33,080 --> 00:08:38,090
now for the answers I can grab the answers and where the answers are a lot easier because it's either

100
00:08:38,090 --> 00:08:39,320
a yes or no.

101
00:08:39,350 --> 00:08:42,320
So I don't need to use this complicated list comprehension.

102
00:08:42,320 --> 00:08:47,870
Instead I'm going to start off by setting up an empty matrix of empty zeros.

103
00:08:48,110 --> 00:08:55,850
That is the length of the word index and then plus one because index zeroes reserve or using pad sequences.

104
00:08:55,850 --> 00:08:57,590
And now that Y is all zeros.

105
00:08:57,620 --> 00:09:00,350
Since we know it's simply just a yes or no.

106
00:09:00,350 --> 00:09:08,330
I can use none pi logic to create this assignment so I can simply say the following y a word index for

107
00:09:08,330 --> 00:09:20,110
that answer is equal to 1 and then all I need to do here is say X thought append the lowercase x x Q

108
00:09:20,470 --> 00:09:27,400
append the lowercase x Q And then y append the lower case Y.

109
00:09:27,640 --> 00:09:33,850
So all I'm doing here is I have these main lists that are capitalized and then for every story query

110
00:09:33,850 --> 00:09:41,140
and answer in the dataset that I pass in I'm going to do the word indexing myself here minus the ones

111
00:09:41,140 --> 00:09:48,780
for the Y and then I will append those Okay so once you're done with that for loop what you need to

112
00:09:48,780 --> 00:09:51,090
do is actually pad those sequences.

113
00:09:51,240 --> 00:09:58,020
So I'm going to return a final tuple that can be unpacked so we'll say return and set up my princess

114
00:09:58,020 --> 00:10:01,160
for the tuple we will call pad sequences.

115
00:10:01,350 --> 00:10:02,490
So pad sequences.

116
00:10:02,490 --> 00:10:12,450
Remember we import of that we'll pass an X and then say the max length is the max story length so that's

117
00:10:12,450 --> 00:10:20,970
the pattern sequences for X and we'll do the same for X Q the questions so pad sequences for X Q or

118
00:10:20,970 --> 00:10:29,430
the max length for this pattern sequence is Max question length and then with this one more time except

119
00:10:29,430 --> 00:10:32,270
for the essentials we just need to make this into an array.

120
00:10:32,400 --> 00:10:37,350
So say NPA array of Y OK so we definitely have a lot of code here.

121
00:10:37,470 --> 00:10:43,680
If you ever get any mistakes or typos or warnings or errors makes you use copy and paste from our provided

122
00:10:43,680 --> 00:10:48,390
notebook but all we're doing here is or vector I's and stories in a really similar fashion to what we've

123
00:10:48,390 --> 00:10:50,810
actually seen before in the text generation a book.

124
00:10:50,910 --> 00:10:53,650
So go ahead and run that and let's check it out.

125
00:10:53,850 --> 00:10:57,930
We'll say inputs train queries.

126
00:10:57,930 --> 00:11:08,460
Train and answers train is equal to victory stories on our training data then we'll repeat the exact

127
00:11:08,460 --> 00:11:09,780
same process for the test data.

128
00:11:09,840 --> 00:11:14,820
So we're going to copy and paste that in except for inputs train we'll just call these all tests so

129
00:11:14,820 --> 00:11:22,260
inputs test if you want it called stories has to we'll say queries test and then answers test on our

130
00:11:22,440 --> 00:11:24,560
test data.

131
00:11:24,620 --> 00:11:31,910
There we go run that and then if we take a look at inputs test versus input train just go ahead and

132
00:11:31,910 --> 00:11:37,940
take a look at all these notes now they're just arrays where we have their word in exposition along

133
00:11:37,940 --> 00:11:39,610
with their word index.

134
00:11:39,890 --> 00:11:46,240
So we must take a look at answers test if we wanted to notice only one of these words are all zeros

135
00:11:46,240 --> 00:11:51,910
except this one at this and this position either the S's or the nose so you can just say something like

136
00:11:52,960 --> 00:12:06,360
took a nicer word index for yes and that's the index twelve I'll say took a nicer word index at no and

137
00:12:06,450 --> 00:12:09,570
that's at index location thirty six.

138
00:12:09,810 --> 00:12:17,190
So let's go ahead and take the sum of our answers test and you notice we have all zeros except at these

139
00:12:17,190 --> 00:12:20,350
two index locations 4 9 7 and 5 0 3.

140
00:12:20,460 --> 00:12:26,160
And if you were to actually go along companies you'd go 0 1 2 3 4 5 6 all the way until you got to index

141
00:12:26,210 --> 00:12:33,300
12 and 4 9 7 which means there were four hundred ninety seven ones in next location twelve otherwise

142
00:12:33,420 --> 00:12:40,410
known as having four hundred ninety seven yeses as the answers and index location 36 5 0 3.

143
00:12:40,410 --> 00:12:41,960
So the word index for now.

144
00:12:42,360 --> 00:12:47,820
Okay so now we have successfully vector i's not only our stories but as well as our questions in our

145
00:12:47,820 --> 00:12:48,580
answers.

146
00:12:48,810 --> 00:12:52,600
And now we have the data in the correct format for creating the model.

147
00:12:52,620 --> 00:12:56,440
So coming up next we'll begin actually creating the model with Caris layers.

148
00:12:56,610 --> 00:12:57,210
We'll see it there.

