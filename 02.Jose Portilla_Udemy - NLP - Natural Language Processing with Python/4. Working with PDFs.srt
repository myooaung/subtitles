1
00:00:05,310 --> 00:00:06,390
Welcome back everyone.

2
00:00:06,450 --> 00:00:12,960
And this lecture we're going to discuss work and of PDA files often you may need to read in text data

3
00:00:13,050 --> 00:00:15,810
from a PDA file instead of a normal text file.

4
00:00:15,870 --> 00:00:20,740
We can use the pie PTF to library to read in text data from a PDA file.

5
00:00:20,970 --> 00:00:28,100
There's one key thing to keep in mind though not all PTF have text that can be easily extracted some

6
00:00:28,100 --> 00:00:34,230
PDA types are created through scanning and instead of being exported from a text editor like Word these

7
00:00:34,240 --> 00:00:37,250
sort of scanned PDA apps are really more like image files.

8
00:00:37,310 --> 00:00:43,190
And that makes it much much harder to actually extract the text if you have a scan PDA PDAF that usually

9
00:00:43,190 --> 00:00:49,220
requires specialized software and you can try googling different Python libraries for reading in those

10
00:00:49,220 --> 00:00:49,910
type of images.

11
00:00:49,910 --> 00:00:55,130
But a lot of times it's really hit and miss and much more the pen on the particular PDA file than the

12
00:00:55,130 --> 00:00:56,690
library itself.

13
00:00:56,810 --> 00:00:59,710
The pie PDAF to library that will be working with.

14
00:00:59,720 --> 00:01:04,550
And this lecture won't be able to extract text from a scanned PTF image.

15
00:01:06,610 --> 00:01:12,130
Now the pipes have of 2 library is made to extract text from files directly created from some sort of

16
00:01:12,130 --> 00:01:13,180
word processor.

17
00:01:13,390 --> 00:01:19,000
But even that you should keep in mind that not all word processors created PDX will have extractable

18
00:01:19,000 --> 00:01:19,840
text.

19
00:01:19,930 --> 00:01:25,240
So even if you actually exported from a direct word processor the library may still have difficulty

20
00:01:25,240 --> 00:01:27,940
extracting that text now to begin.

21
00:01:27,940 --> 00:01:30,210
Make sure you are using our environment file.

22
00:01:30,310 --> 00:01:34,090
Or that you've installed py PTF to since it's not a library that comes.

23
00:01:34,090 --> 00:01:41,600
Based Python to install pipes you have to simply open up your command line and directly type typin install

24
00:01:41,740 --> 00:01:44,850
py PDAF to and notice the capitalization there.

25
00:01:45,200 --> 00:01:46,310
Let's go ahead and get started.

26
00:01:46,320 --> 00:01:50,930
By opening up a notebook and showing you how to work with some PDA files what I'm going to do is inside

27
00:01:50,930 --> 00:01:53,100
of the Python Tex basic's folder.

28
00:01:53,180 --> 00:01:56,900
If you click on it you'll notice that there is some PTF here that we have for you.

29
00:01:56,930 --> 00:02:02,120
Make sure you go ahead and create your notebook in the same location as these pedia files or know the

30
00:02:02,120 --> 00:02:04,250
entire file path for these pedia.

31
00:02:04,490 --> 00:02:06,510
I'm going to go ahead and create a you note book.

32
00:02:06,620 --> 00:02:08,360
That way I can simply call the PDA.

33
00:02:08,390 --> 00:02:13,220
When I'm opening them and reading them so now that we have this new notebook created Let's go ahead

34
00:02:13,220 --> 00:02:14,600
and start off by running.

35
00:02:14,600 --> 00:02:17,850
Import py PDA to.

36
00:02:18,350 --> 00:02:22,530
And if you get an error here that means you need a Pipp install it or activate the environment.

37
00:02:22,880 --> 00:02:24,800
And now it's time to actually read a PDA.

38
00:02:24,900 --> 00:02:28,170
In reading a PDA it works a lot like reading a normal text file.

39
00:02:28,280 --> 00:02:35,210
We're just going to say my file is equal to open and let's go ahead and open up the U.S. declaration

40
00:02:35,460 --> 00:02:36,230
pedia.

41
00:02:36,770 --> 00:02:41,870
And the other thing we need to do here is there's going to be another mode and the mode that we're going

42
00:02:41,870 --> 00:02:52,250
to use is mode equal to r b and Arbi means reading binary method and we need that because it's no longer

43
00:02:52,250 --> 00:02:53,510
the normal text file.

44
00:02:53,510 --> 00:02:55,160
It's a PDA file.

45
00:02:55,400 --> 00:02:56,530
So we're going to run that.

46
00:02:56,720 --> 00:03:02,270
And then once you read in the file using normal Python we're going to convert it into a PDA file reader

47
00:03:02,270 --> 00:03:12,650
object so go ahead and make a variable called pedia reader and set that equal to pi PTF to dot and then

48
00:03:12,650 --> 00:03:14,210
we're going to call this hit tab.

49
00:03:14,210 --> 00:03:15,740
You should see a couple of options.

50
00:03:15,740 --> 00:03:23,980
The one we're looking for is pedia file reader and the past in the file you read in and now off this

51
00:03:23,980 --> 00:03:30,410
pedia reader where you can do is a few action is called pedia fritter hit dot and then hit tab.

52
00:03:30,670 --> 00:03:32,830
There's a lot of attributes and a lot of methods.

53
00:03:32,830 --> 00:03:34,680
I'll show you some of the main ones here.

54
00:03:34,700 --> 00:03:39,700
There's number of pages and if you run that report's back the number of pages inside the actual PDAF

55
00:03:39,700 --> 00:03:45,150
document and then you can't extract text and you can do it page by page.

56
00:03:45,160 --> 00:03:53,800
So for example I can say Page 1 is equal to then call pedia reader and call the get page method and

57
00:03:53,800 --> 00:03:56,510
then pasand the page you want there indexed at zero.

58
00:03:56,500 --> 00:03:59,600
So if you want the first page you just passen zero.

59
00:04:00,040 --> 00:04:07,840
So Page 1 index 0 and if you actually want the text you can do is say Page 1 DOPs and you can call the

60
00:04:07,900 --> 00:04:09,680
extract text method.

61
00:04:09,730 --> 00:04:12,950
Open and close print sees and that will extract all the text.

62
00:04:12,950 --> 00:04:14,890
It was able to read on that PDA.

63
00:04:15,070 --> 00:04:16,960
So here you can see the Declaration of Independence.

64
00:04:16,990 --> 00:04:18,850
And now we have it as a string.

65
00:04:18,850 --> 00:04:22,630
And so we have these new lines in order to indicate there's a new line.

66
00:04:22,630 --> 00:04:29,170
So if we actually wanted to print this out it would print this out along those lines and I can see the

67
00:04:29,170 --> 00:04:30,870
Declaration of Independence here.

68
00:04:33,060 --> 00:04:37,800
And just like a normal file after you're done working with it get in the pages you want extract the

69
00:04:37,800 --> 00:04:38,410
text.

70
00:04:38,520 --> 00:04:44,740
Maybe you want to save some text and say my text is equal to extract text.

71
00:04:44,790 --> 00:04:48,630
Once you're done doing whatever operations you're concerned with it's always a good idea to close the

72
00:04:48,630 --> 00:04:49,250
file.

73
00:04:49,380 --> 00:04:54,780
So just say my file doc close OK.

74
00:04:54,900 --> 00:04:59,970
So we learn how to read any page in it from a PDA file and then we learned how to extract text from

75
00:04:59,970 --> 00:05:01,110
that page.

76
00:05:01,110 --> 00:05:04,170
Often you may want to add another page to a PDA.

77
00:05:04,470 --> 00:05:11,400
Now unfortunately we cannot directly write Python string text onto a PDA because of the differences

78
00:05:11,400 --> 00:05:17,160
between a single string type of Python versus the variety of fonts and placements and other parameters

79
00:05:17,460 --> 00:05:19,190
that a PDA could have.

80
00:05:19,230 --> 00:05:25,360
What we can do is copy pages and append the pages to the end so you can copy a page from another PTF

81
00:05:25,440 --> 00:05:30,030
or the same PTF and then append that to the end of the current PDA if you're working with.

82
00:05:30,030 --> 00:05:35,430
Well you can't do is take a python string and suddenly insert it somewhere into the PTF because of so

83
00:05:35,430 --> 00:05:39,540
many different parameters that a normal PDA file could have.

84
00:05:39,550 --> 00:05:44,800
Let's see how we could add a page to a PDA if I'm just going to create a variable f and set that equal

85
00:05:44,800 --> 00:05:46,230
to open.

86
00:05:47,050 --> 00:05:50,290
Let's open up the U.S. declaration that pedia.

87
00:05:50,310 --> 00:05:53,960
Again remember since it's not going to be read in a PDA.

88
00:05:54,210 --> 00:05:57,630
I mean you say the mode is read binary.

89
00:05:58,060 --> 00:06:09,040
I'll create a PDA for object again and say hi PDAF to and then call PTF file reader and then pass an

90
00:06:09,340 --> 00:06:17,200
F which was the variable we gave the file and then I'm going to grab the first page and say PTF reader

91
00:06:18,540 --> 00:06:24,570
get page 0 and then I'm going to create a writer object.

92
00:06:24,860 --> 00:06:34,120
I will say PTF writer is equal to and directly off the pipes to a library I'm going to call.

93
00:06:34,600 --> 00:06:46,170
PTF file writer open and princes and this writer object is going to need to add pages so I can say PTF

94
00:06:46,330 --> 00:06:56,830
underscore writer thought add a page and then I can go ahead and add that first page that we copied

95
00:06:57,040 --> 00:07:01,010
off the US Declaration that PTF.

96
00:07:01,030 --> 00:07:07,330
And so now I have this new documents this new pedia file that it just added a page to what I can do

97
00:07:07,690 --> 00:07:09,730
is the following.

98
00:07:09,730 --> 00:07:18,670
I can say something like PTF output is equal to open and I went into Passons some new document so it

99
00:07:18,670 --> 00:07:25,100
can say my brand new doc PTF.

100
00:07:25,390 --> 00:07:28,090
So this is a PDA file that doesn't currently exist.

101
00:07:28,090 --> 00:07:32,200
If you check out the python text basics notice I don't have that actual PDA.

102
00:07:32,230 --> 00:07:36,980
I have some new doc PDA but I don't specifically have my brand new that PDA.

103
00:07:37,270 --> 00:07:42,800
But remember if we open things with the right permission it will automatically create files for us.

104
00:07:42,800 --> 00:07:44,700
So not only just going to use w here.

105
00:07:44,770 --> 00:07:52,920
I'm also going to use B to say write binary and now I have my PTF output and if you take a look at Python

106
00:07:52,920 --> 00:07:55,260
text basics you should see now kind of this.

107
00:07:55,350 --> 00:08:01,140
Empty my brand new that PDA so that PDA is waiting to be written to.

108
00:08:01,210 --> 00:08:13,100
So we're going to say PTF writer and I'm going to write to the output file you just created.

109
00:08:13,350 --> 00:08:14,820
So again what am I doing here.

110
00:08:14,820 --> 00:08:20,130
I'm reading in a file using pedia file reader and grabbing a page from that file.

111
00:08:20,130 --> 00:08:21,230
The first page.

112
00:08:21,360 --> 00:08:28,110
Then I'm creating a PTF file writer and then I'm onto the writer object adding that first page I extracted

113
00:08:28,440 --> 00:08:34,470
from my original document that I'm opening a brand new file with the right binary permission and then

114
00:08:34,470 --> 00:08:37,460
I'm going to write PTF output there.

115
00:08:39,370 --> 00:08:44,970
Run that and then I'm going to say PTF output.

116
00:08:45,330 --> 00:08:55,220
I want to close that file and I'm also going to close the original file and so now if I take a look

117
00:08:55,220 --> 00:08:56,580
at my brand new PDA.

118
00:08:56,690 --> 00:09:00,050
If I are to read that in it should have one single page in it.

119
00:09:00,080 --> 00:09:02,710
So let's go ahead and read in The File.

120
00:09:02,960 --> 00:09:05,610
We're going to say make a couple of new cells here.

121
00:09:06,750 --> 00:09:14,190
Say brand new is equal to open and I'm going to open my brand new PDA.

122
00:09:14,370 --> 00:09:16,390
I'm just going to open and read binary mode.

123
00:09:19,160 --> 00:09:29,240
Create a PTF reader object from pite PDAF to pedia file reader and I'm actually going to read in that

124
00:09:29,390 --> 00:09:34,690
brand you file and then let's check out the number of pages it has.

125
00:09:34,710 --> 00:09:36,190
It should have just one page.

126
00:09:36,330 --> 00:09:44,130
So if we say some pages we see that one page and then we can continue on and extract that page that

127
00:09:44,190 --> 00:09:48,720
will be the exact same text we saw here for the first page of the US Declaration.

128
00:09:48,810 --> 00:09:52,040
So now we know how to read text data from a PDA file.

129
00:09:52,170 --> 00:09:55,090
And we also know how to add to a PDA file.

130
00:09:55,110 --> 00:09:57,480
So now let's show one more example.

131
00:09:57,480 --> 00:10:02,460
This is a simple example of grabbing all the text from a particular PDA File.

132
00:10:02,460 --> 00:10:09,360
We're going to say the following f is equal to open let's go ahead and open that U.S. declaration pedia

133
00:10:09,440 --> 00:10:10,720
that we've been working with.

134
00:10:11,150 --> 00:10:16,940
I'll open it if read binary permission and let's imagine I wanted to list all the text here what I could

135
00:10:16,940 --> 00:10:18,860
do is the following.

136
00:10:18,860 --> 00:10:24,430
I could create an empty list of just one item zero.

137
00:10:24,640 --> 00:10:26,630
So it's essentially just a placeholder.

138
00:10:26,630 --> 00:10:34,580
So I have this PTF text list that just has a placeholder 0 and then I'm going to create a reader object

139
00:10:36,710 --> 00:10:43,960
so PTF file reader passen after I just read in from the U.S. declaration and then I can do the following.

140
00:10:43,960 --> 00:10:52,420
I'll say for p in range PTF reader number of pages.

141
00:10:52,650 --> 00:11:00,180
So essentially it's going to say for every page in this range we can go ahead and say page is equal

142
00:11:00,180 --> 00:11:07,390
to PTF reader get page P because P is essentially just a number here.

143
00:11:07,520 --> 00:11:11,030
0 1 2 3 all the way until we hit the number of pages.

144
00:11:11,040 --> 00:11:18,820
So I want to get that specific page save it to this page variable and then I'm going to grab that page.

145
00:11:19,320 --> 00:11:25,050
I'm going to extract the text from that page and then I'm going to append it to this list which is right

146
00:11:25,050 --> 00:11:27,550
now just the placeholder empty list right there.

147
00:11:27,630 --> 00:11:38,450
So I'll say PTF text append run that and then we can close the file.

148
00:11:39,500 --> 00:11:41,200
And in fact we can just have this be an empty list.

149
00:11:41,300 --> 00:11:43,890
Doesn't even need a zero there.

150
00:11:43,910 --> 00:11:44,750
Run that.

151
00:11:44,750 --> 00:11:51,430
And if we check out our PTF text list now we have a list of everything here.

152
00:11:51,530 --> 00:11:55,080
And those are all the tests in that particular file.

153
00:11:55,080 --> 00:11:56,270
So for every page.

154
00:11:56,480 --> 00:12:01,190
So we check out the lengthier it's a length of 5.

155
00:12:01,270 --> 00:12:14,260
So I could say for page in PTF text print the page and then I can say print a couple of new lines

156
00:12:18,090 --> 00:12:22,890
run that and you'll see kind of this giant document of the Declaration of Independence and then a bunch

157
00:12:22,890 --> 00:12:25,440
of spaces for each new page.

158
00:12:25,440 --> 00:12:25,960
All right.

159
00:12:26,100 --> 00:12:28,280
So that's the very basics of CMPD files.

160
00:12:28,290 --> 00:12:30,900
We don't really need to know much more than that for this course.

161
00:12:30,900 --> 00:12:33,720
Coming up next we're going to talk about regular expressions.

162
00:12:33,750 --> 00:12:34,770
We'll see at the next lecture.

