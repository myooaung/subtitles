1
00:00:05,100 --> 00:00:09,820
We'll come back in this lecture we're going to go over the solution for the parts of speech assessment.

2
00:00:09,920 --> 00:00:12,130
Let's head over to the notebook and walk through it.

3
00:00:12,440 --> 00:00:14,690
OK so here are the parts of speech assessment.

4
00:00:14,720 --> 00:00:19,740
Don't forget to run the top sell in or its imports basically load English library and then have the

5
00:00:19,770 --> 00:00:21,440
Speccy ready to go.

6
00:00:21,440 --> 00:00:26,570
Next we want to create a doc object from the file Peter Rabbit that DXi and we can do this by simply

7
00:00:26,570 --> 00:00:31,530
saying with open and then we'll say from textfiles.

8
00:00:31,670 --> 00:00:37,470
Peter Rabbit you should be able to auto complete that using tab unless you're in a different directory.

9
00:00:37,500 --> 00:00:42,930
Then we'll say dock is equal to an LP f read.

10
00:00:43,550 --> 00:00:48,110
And now we have a document object the next for every token in the third sentence we want to print the

11
00:00:48,110 --> 00:00:54,680
token text the part of speech tag the fine green tag tag and the description of the fine green tag will

12
00:00:54,710 --> 00:01:03,410
say for token in list doc thought sentence or a sense for sentences and then we're to grab index too

13
00:01:03,410 --> 00:01:06,310
which is the third right because we have 0 1 to 2.

14
00:01:06,320 --> 00:01:09,860
The third sentence of these sentences from that list.

15
00:01:09,860 --> 00:01:15,560
So then for every token inside that tokenized third sentence we're just going to print out the following

16
00:01:15,650 --> 00:01:26,740
A little bit of strings will say print out the token text print out the token part a speech print out

17
00:01:26,740 --> 00:01:33,880
the token tag and then in order to get the explanation we just need to say a string of spacey explain

18
00:01:35,890 --> 00:01:41,530
token dot tag underscore and we're going to add in a little bit of formatting here simply by adding

19
00:01:41,530 --> 00:01:48,730
in Colon and then some spacing will just go ahead and say colon 10 for all these to add in a little

20
00:01:48,730 --> 00:01:51,620
bit of spacing so we get some nice formatting.

21
00:01:52,210 --> 00:01:55,180
You can add that in at the very end of vallies curly braces.

22
00:01:55,540 --> 00:02:01,230
If we run this we should get back kind of this nice looking table OK.

23
00:02:01,490 --> 00:02:06,400
Next was to provide a frequency list of the speech tags for the entire document.

24
00:02:06,860 --> 00:02:14,870
So for this we're going to use count by we'll say speech counts as equal to Doc count by and then we'll

25
00:02:14,870 --> 00:02:29,350
say Spacey to transfer attributes part of speech to then four key value pair in sorted POS counts items

26
00:02:31,380 --> 00:02:32,540
as we did during the lecture.

27
00:02:32,550 --> 00:02:37,380
We're just going to print out using again string formatting here.

28
00:02:37,740 --> 00:02:50,140
The key and then calling Dawk vocab at that key We're going to grab the text and then we'll actually

29
00:02:50,140 --> 00:02:53,520
say the for the value.

30
00:02:53,950 --> 00:02:55,870
So remember the values the actual count.

31
00:02:55,870 --> 00:02:58,410
So if you run this you should see something that looks like this.

32
00:02:58,510 --> 00:03:02,690
And you can add in a little bit of formatting if you want to you can say something like.

33
00:03:03,310 --> 00:03:06,310
There are the counts

34
00:03:10,800 --> 00:03:15,220
so 83 counts 127 counts seventy five count etc..

35
00:03:15,220 --> 00:03:26,470
Maybe you can even add something like ID and then POS so if you run those ID 83 POS a..

36
00:03:26,550 --> 00:03:28,090
83 counts and so on.

37
00:03:28,140 --> 00:03:33,000
Really up to you main idea is to remember you can call count by and that can use a dictionary which

38
00:03:33,000 --> 00:03:36,190
can then sort into items.

39
00:03:36,270 --> 00:03:39,320
The challenge was what percentage of tokens are known.

40
00:03:39,390 --> 00:03:43,680
So one needs to do is figure out how to actually get the length of all the tokens or how many tokens

41
00:03:43,680 --> 00:03:45,160
are there completely.

42
00:03:45,210 --> 00:03:47,930
For that you can just check the length of the document.

43
00:03:48,330 --> 00:03:55,990
And there's 1258 tokens and we're looking for nouns so we know that noun's is 91.

44
00:03:56,040 --> 00:03:59,080
We have it right here 176 counts.

45
00:03:59,130 --> 00:04:07,050
So we just say POS counts and what you could do is check out 91 and that returns back 176.

46
00:04:07,190 --> 00:04:12,910
And then we divide it by the length of the document and if we times that by 100.

47
00:04:13,280 --> 00:04:15,080
So we say 100 times this.

48
00:04:15,160 --> 00:04:18,970
That's thirteen point ninety nine percent of all the tokens are known.

49
00:04:20,380 --> 00:04:23,870
Next we want it to display the dependency parts for the third sentence.

50
00:04:24,040 --> 00:04:25,870
And that way we can do that.

51
00:04:26,110 --> 00:04:35,040
You can just simply say the splays see render and then we're going to pass and a list of Doc sense but

52
00:04:35,040 --> 00:04:36,740
we actually only want the third sentence.

53
00:04:36,750 --> 00:04:43,450
So just like before the index at two call style for syntactic dependency.

54
00:04:43,590 --> 00:04:46,200
In my case I'm using Jupiter said equal to true.

55
00:04:46,440 --> 00:04:51,540
If you're running a script to simply say the splays see that serve and then you can add in more options

56
00:04:51,540 --> 00:04:55,530
if you want but you should get something that looks more or less like this.

57
00:04:55,530 --> 00:05:01,520
This is the actual display see for the Dep. parts.

58
00:05:01,540 --> 00:05:06,220
Next he wanted you to show the first two named entities from the tale of Peter Rabbit.

59
00:05:06,220 --> 00:05:11,070
Remember we can grab all the Anstey's simply by calling Doc A.S..

60
00:05:11,140 --> 00:05:16,180
So this is essentially kind of these tuples of all these entities we're really only concerned with the

61
00:05:16,180 --> 00:05:17,890
first two.

62
00:05:18,280 --> 00:05:23,690
So we're going to go from everything at the beginning all the way index to essentially 0 and 1.

63
00:05:23,770 --> 00:05:24,540
So here they are.

64
00:05:24,670 --> 00:05:26,720
And now we want to print out their properties.

65
00:05:26,830 --> 00:05:35,920
So various ways to do this but we can say for entity in this little short list of tuples I'm going to

66
00:05:35,920 --> 00:05:47,640
print out the entity text plus the entity label plus the string explanation of it so I'll say Spacey

67
00:05:47,650 --> 00:05:54,270
thought explain that entity label and then we can add in some whitespace too.

68
00:05:54,430 --> 00:06:01,030
Just so has a little bit nicer formatting these in between make sure there's a plus there after that

69
00:06:02,020 --> 00:06:03,670
and then add in one more whitespace

70
00:06:06,740 --> 00:06:08,640
so we can go ahead and run that.

71
00:06:08,740 --> 00:06:11,660
And we see that we have tale of Peter Rabbit work of art.

72
00:06:12,190 --> 00:06:14,200
Beatrix Potter person.

73
00:06:14,410 --> 00:06:17,630
Now how many senses are contained in the tale of Peter Rabbit.

74
00:06:17,830 --> 00:06:26,650
For this you can check out Doc that sense run that and remember that's a generator.

75
00:06:26,650 --> 00:06:34,060
So what we need to do is we can cast that to a list and then just check the length of that list.

76
00:06:34,340 --> 00:06:41,130
It's going to turn 56 next for the challenge was how many sentences contained named entities.

77
00:06:41,320 --> 00:06:43,150
For this is going to be a little more complicated.

78
00:06:43,390 --> 00:06:53,960
Well we should first do is get a list of the actual sentence text so say list of sense is equal to and

79
00:06:53,960 --> 00:07:02,160
here we're going to say a.p of sent text for every sentence in Doc thought sense.

80
00:07:02,160 --> 00:07:08,620
So there's my list of sentences then I want a list of any R's.

81
00:07:08,760 --> 00:07:20,790
So it's going to be doc for Doc in list of sentences if Doc E.A. us which essentially is saying go through

82
00:07:20,820 --> 00:07:25,830
every document in this list of sentences and check if there's actually entities there and then we'll

83
00:07:25,830 --> 00:07:32,070
just check the length of list of any R's and this kind of a misnomer is not really the list of any R's

84
00:07:32,430 --> 00:07:39,360
It's the list of sentences with any R's and if you're in that you should get back 49 49 sentences contained

85
00:07:39,420 --> 00:07:43,050
named entities out of the 56 total sentences.

86
00:07:43,170 --> 00:07:48,660
The last challenge problem was display the name and see visualization for list of sense 0 from the previous

87
00:07:48,660 --> 00:07:49,580
problem.

88
00:07:49,650 --> 00:07:52,620
So that would be this list of sentences here.

89
00:07:52,650 --> 00:08:04,740
Let's go ahead and show that we can display the render list of sense zero and then call style is equal

90
00:08:04,740 --> 00:08:06,360
to E.A..

91
00:08:07,080 --> 00:08:10,240
And in my case I will say Jupiter is equal to true.

92
00:08:10,290 --> 00:08:15,420
Run that and wups make sure it's display C C and there we go.

93
00:08:15,730 --> 00:08:18,080
OK that's it for the assessment solutions.

94
00:08:18,090 --> 00:08:20,970
Feel free to post the Q&amp;A forums if you have any questions.

95
00:08:21,000 --> 00:08:22,050
We'll see you at the next section.

