1
00:00:05,240 --> 00:00:09,350
Welcome back to part two of working with textfiles with Python.

2
00:00:09,440 --> 00:00:14,840
We're going to do now is go over how to read and write to basic text files with just the built in capabilities

3
00:00:14,930 --> 00:00:17,000
of the standard python library.

4
00:00:17,000 --> 00:00:18,270
Let's go ahead and get started.

5
00:00:18,500 --> 00:00:18,870
OK.

6
00:00:18,890 --> 00:00:22,650
Let's begin by actually creating a text file.

7
00:00:22,700 --> 00:00:28,680
The method I'm going to use is specific to Jupiter notebooks and it's a magic command.

8
00:00:28,790 --> 00:00:30,160
You do percent 9 percent.

9
00:00:30,160 --> 00:00:32,870
Scientists are known as magic commands that work of Jupiter notebook.

10
00:00:33,170 --> 00:00:42,020
And then you type out right file space and the name of your file will say TSTO for test Dot T x t for

11
00:00:42,100 --> 00:00:47,510
textfile and then immediately below this line you can begin writing your textfile text.

12
00:00:47,750 --> 00:00:59,840
So I can say hello this is a quick test file period and we'll say this is the second line of the file.

13
00:00:59,840 --> 00:01:05,090
Keep in mind if you're not using Jupiter notebook just use a standard text editor like subline text

14
00:01:05,120 --> 00:01:09,500
editor or Adam text editor to save a text file.

15
00:01:09,520 --> 00:01:15,350
Again this specific line and what's written here in the cell only works for the Jupiter notebook's system.

16
00:01:15,350 --> 00:01:20,450
So please if you're not using Jupiter notebooks just open up a basic text editor and say this is a text

17
00:01:20,450 --> 00:01:21,440
file.

18
00:01:21,440 --> 00:01:23,120
Go ahead and run this.

19
00:01:23,230 --> 00:01:26,120
You should see the output writing test that takes t.

20
00:01:26,150 --> 00:01:28,870
Keep in mind you can have any comment above this line.

21
00:01:28,910 --> 00:01:31,720
It just look exactly as written here.

22
00:01:31,730 --> 00:01:36,290
Now that I have this test that textfile I should be able to open it.

23
00:01:36,470 --> 00:01:41,690
The first thing you should do whatever you're opening a text file regardless of what library using is

24
00:01:41,690 --> 00:01:44,550
make sure you understand the files location.

25
00:01:45,620 --> 00:01:49,930
To open up a file you first create the variable and then you say it equals two.

26
00:01:50,120 --> 00:01:57,980
And Python has a built in keyword called Open and then in parentheses you passen the path to the file.

27
00:01:57,980 --> 00:02:00,320
If you happen to provide a file that isn't there.

28
00:02:00,410 --> 00:02:05,240
For example let's go ahead and make up a file name like whoops start to.

29
00:02:05,720 --> 00:02:10,110
If you run this you'll get a file not found error and say Error Number 2.

30
00:02:10,130 --> 00:02:15,540
No such file or directory will start to hear XTi if you ever get this error number two.

31
00:02:15,560 --> 00:02:22,090
That means you're either providing the wrong file path or you misspelled the actual file name.

32
00:02:22,280 --> 00:02:27,590
So keep in mind to avoid this error you should have a good awareness of where this notebook is currently

33
00:02:27,590 --> 00:02:31,450
located as well as where your text file is currently located.

34
00:02:31,700 --> 00:02:38,340
To figure out where your notebook is currently located you can simply type PWT into a cell.

35
00:02:38,450 --> 00:02:41,380
Run it and it will tell you where you're currently located.

36
00:02:41,420 --> 00:02:43,230
So right now I'm located at.

37
00:02:43,310 --> 00:02:44,720
Users Marcio.

38
00:02:44,750 --> 00:02:50,210
Thus top and O.P. course that means I should probably have my text files there if I want to open them

39
00:02:50,450 --> 00:02:51,940
with this open command.

40
00:02:52,280 --> 00:02:55,610
So now let's actually grab the test text file that we wrote.

41
00:02:55,610 --> 00:02:57,810
Keep in mind it's easy to make typos here.

42
00:02:57,830 --> 00:03:01,560
This is t e s t that t s t.

43
00:03:01,580 --> 00:03:08,780
So we're going to do is say my file is equal to open and always be careful not to commit a typo here.

44
00:03:09,700 --> 00:03:18,400
Or type T E S T T x t and when you run this you now have your file open and if you actually look at

45
00:03:18,510 --> 00:03:25,380
my file object it should just tell you something like this is a wrapper ready to go for this text file

46
00:03:25,530 --> 00:03:28,560
and by default it reads it with a mode r.

47
00:03:28,590 --> 00:03:33,560
Which means reading and we'll talk about modes in more detail later on in this lecture.

48
00:03:33,870 --> 00:03:39,690
But keep in mind if you ever get error number two it means you're either passing in the wrong file path

49
00:03:39,750 --> 00:03:43,210
or you misspelled the actual file name.

50
00:03:43,230 --> 00:03:47,640
In general the easiest way to go about this is to make sure your text files are in the same location

51
00:03:48,120 --> 00:03:53,870
as your notebook is and you can always figure out the location of your notebook with PWT if you want

52
00:03:53,970 --> 00:03:57,630
open files that are in another location on your computer.

53
00:03:57,690 --> 00:04:00,090
You can just passen the entire file path.

54
00:04:00,270 --> 00:04:04,750
Let me show you an example of that by copying and pasting from this lecture's notebook.

55
00:04:04,770 --> 00:04:05,100
All right.

56
00:04:05,100 --> 00:04:10,200
I copied and pasted this little mark down cell from the notebook and what it does is it just gives you

57
00:04:10,200 --> 00:04:13,300
an example of passing in the entire file path.

58
00:04:13,320 --> 00:04:18,930
If you're on a Windows computer typically you need to use a double backslash so that Python doesn't

59
00:04:18,930 --> 00:04:24,090
treat the second backslash as an escape character and you'll notice that that format was followed here.

60
00:04:24,120 --> 00:04:29,400
When I actually typed PWT so Peto these tense for print working directory.

61
00:04:29,520 --> 00:04:33,870
And again if you want to open a text file that's located in a different folder than your notebook you

62
00:04:33,870 --> 00:04:35,580
just need to provide the entire file path.

63
00:04:35,580 --> 00:04:38,580
So for example if you are on Windows it would look something like this.

64
00:04:38,640 --> 00:04:40,190
C-Drive colon.

65
00:04:40,290 --> 00:04:41,880
Double backslash users.

66
00:04:41,910 --> 00:04:45,830
Your username etc all the way until you find your textfile file.

67
00:04:45,870 --> 00:04:51,570
Always keep in mind that sometimes text files don't actually explicitly call this DXi extension.

68
00:04:51,580 --> 00:04:53,290
Maybe just my file.

69
00:04:53,610 --> 00:04:56,570
If you're on a Mac OS or Linux you're going to use forward slashes.

70
00:04:56,580 --> 00:05:00,660
It looks awful like this user's your username folder etc..

71
00:05:00,750 --> 00:05:06,630
Again just to make it very clear if you're ever getting this error number two likelihood is you did

72
00:05:06,630 --> 00:05:09,570
a typo or you're providing the wrong file path.

73
00:05:09,570 --> 00:05:14,280
So please always debug that on your own first before posting to the Kewney forums.

74
00:05:14,760 --> 00:05:19,140
Ok so now that we've opened up the file we have it saved as this.

75
00:05:19,140 --> 00:05:22,340
My file and it's just text IO wrapper object.

76
00:05:22,350 --> 00:05:29,200
Well we can do is we can read the file and the way you do that is simply by saying my file read open

77
00:05:29,210 --> 00:05:33,790
and close print sees run that and read the file and noticed what happened here.

78
00:05:33,830 --> 00:05:34,500
It says Hello.

79
00:05:34,530 --> 00:05:41,250
This is a quick text file and then we get this backslash n that backslash n is an indicator for a new

80
00:05:41,370 --> 00:05:42,260
line.

81
00:05:42,330 --> 00:05:44,910
So if we look at the original text file it said hello.

82
00:05:44,910 --> 00:05:46,400
This is a quick test file.

83
00:05:46,410 --> 00:05:48,250
This is the second line of the test file.

84
00:05:48,300 --> 00:05:55,950
That new line is indicated with this backslash and now what's interesting is if I were to try to read

85
00:05:55,950 --> 00:05:59,910
this file again it suddenly shows up blank.

86
00:06:00,000 --> 00:06:05,610
So this is often a point of confusion for beginners with Python or reading in textfiles of Python is

87
00:06:05,610 --> 00:06:09,420
that you can't just call read multiple times on a file.

88
00:06:09,420 --> 00:06:14,730
Essentially what's going on is you have a cursor at the very beginning of a text file and after you

89
00:06:14,730 --> 00:06:19,920
call the read the cursor goes throughout the entire text file and then returns the entire file as a

90
00:06:19,920 --> 00:06:20,640
string.

91
00:06:20,640 --> 00:06:25,800
As we can see here and then the cursor is sitting at the end of the file which means when you call read

92
00:06:25,800 --> 00:06:30,570
again it's just going to read from the cursor all the way to the end of the file which in this case

93
00:06:30,580 --> 00:06:32,360
it's already called read.

94
00:06:32,530 --> 00:06:33,310
There's nothing there.

95
00:06:33,330 --> 00:06:34,810
Just an empty string.

96
00:06:35,160 --> 00:06:43,770
In order to fix this we need to do is call my file thought seek and then you can change the cursor to

97
00:06:43,830 --> 00:06:48,360
index position 0 which essentially resets the cursor.

98
00:06:48,380 --> 00:06:51,310
I'll report back OK the cursor now is at index 0.

99
00:06:51,420 --> 00:06:58,500
I mean the cursor is now at the beginning of the text file and I can call read again so my file read.

100
00:06:58,650 --> 00:07:00,890
And here I see the entire stream again.

101
00:07:01,320 --> 00:07:06,350
So that read is really useful for smaller files where you just want to grab everything and then save

102
00:07:06,390 --> 00:07:08,520
as a string.

103
00:07:08,580 --> 00:07:16,790
So let's go ahead and seek zero again so I can say maybe content is equal to my file.

104
00:07:16,800 --> 00:07:17,570
Read.

105
00:07:17,790 --> 00:07:19,400
Run that and now.

106
00:07:19,400 --> 00:07:25,840
Content is going to be this save string of the file and since it has its backslash and if ever what

107
00:07:25,950 --> 00:07:28,270
actually want to print the content.

108
00:07:28,560 --> 00:07:34,250
Ill take that into account and then Ill display it as necessary so I'll take into account the escape

109
00:07:34,260 --> 00:07:40,170
characters and print out the new line and keep in mind now content is actually the literal string.

110
00:07:40,200 --> 00:07:47,840
I no longer need to worry about this seek reading capability off the file OK so that's how you can read

111
00:07:47,840 --> 00:07:50,160
in the file as a string.

112
00:07:50,180 --> 00:07:54,680
The last thing you should know is you should always close the file once you're done working with it.

113
00:07:55,840 --> 00:08:02,410
So you can close the file simply by saying my file close shift enter and all that file object has been

114
00:08:02,410 --> 00:08:03,220
closed.

115
00:08:03,220 --> 00:08:07,510
The reason you want to make sure to do that is just in case you try opening that text file for another

116
00:08:07,510 --> 00:08:08,340
program.

117
00:08:08,380 --> 00:08:12,420
If you still have it open in Python it may cause issues of your operating system.

118
00:08:12,460 --> 00:08:17,210
If you've ever tried to pull out a USP drive and it said hey some files are still under use.

119
00:08:17,440 --> 00:08:20,310
That's the sort of thing that happens if you don't close a file.

120
00:08:20,380 --> 00:08:23,010
They'll basically say hey Python is using this text file.

121
00:08:23,020 --> 00:08:26,410
I can't open it right now so always make sure to close your files.

122
00:08:26,410 --> 00:08:34,270
Now we just saw how the dot read method off a file object returns the entire text file as one large

123
00:08:34,330 --> 00:08:35,450
string.

124
00:08:35,530 --> 00:08:40,750
Often it would be nice if we could iterate through each line in the text file.

125
00:08:40,750 --> 00:08:44,950
Notice that each line is essentially segmented by this backslash N..

126
00:08:45,400 --> 00:08:51,460
Luckily Python actually has a read line method in addition to the read method which will actually read

127
00:08:51,460 --> 00:08:54,970
in each line as a separate item in a python list.

128
00:08:54,970 --> 00:08:57,370
Let's go ahead and show you what that looks like.

129
00:08:57,370 --> 00:09:07,210
I'm going to open up the file again so will say my file is equal to open in as a string.

130
00:09:07,210 --> 00:09:09,660
I'm going to say TSTO that DXi.

131
00:09:09,710 --> 00:09:12,430
In general you should be able to tab out this.

132
00:09:12,460 --> 00:09:15,700
That's another good indication that you're in the right place.

133
00:09:15,820 --> 00:09:22,240
So I just opened the text file and instead of saying read I'm actually going to hit tab here and notice

134
00:09:22,240 --> 00:09:24,660
that I have this read lines.

135
00:09:24,700 --> 00:09:30,640
That's another really useful method and what this does is if you run this it's going to read in each

136
00:09:30,640 --> 00:09:38,640
line as a separate item in the list and it's going to use this backslash and as the last item for.

137
00:09:38,680 --> 00:09:41,820
Basically the last set of characters for each item in this list.

138
00:09:41,830 --> 00:09:47,860
So now what I could do is let me go back seeker 0.

139
00:09:48,070 --> 00:09:57,510
And then I could say my lines is equal to my Fylde read lines run that and now I have this my lines

140
00:09:57,520 --> 00:10:04,150
object which is a list of every string are essentially every line as a string and then it could iterate

141
00:10:04,150 --> 00:10:04,440
through it.

142
00:10:04,450 --> 00:10:11,980
So I can say for line in my lines and then I can do stuff with it maybe like print out the first character

143
00:10:11,980 --> 00:10:19,000
of each line which would be line 0 so run that and I see the first character in each of these lines

144
00:10:19,480 --> 00:10:21,280
and you can begin doing additional things.

145
00:10:21,280 --> 00:10:28,480
Maybe you want to split that actual string into separate words and then grab the first item there and

146
00:10:28,480 --> 00:10:34,670
that's going to return back essentially the first set of characters before a space for each line.

147
00:10:34,750 --> 00:10:39,820
And you can begin to experiment but that's why read lines is also a very useful method and it's often

148
00:10:39,820 --> 00:10:43,050
more common to see red lines than just read.

149
00:10:43,060 --> 00:10:44,900
But it really depends on the situation.

150
00:10:44,920 --> 00:10:46,580
You should be familiar with both.

151
00:10:46,630 --> 00:10:52,930
So read is to grab everything as one giant string read lines is the grab every line as a separate string

152
00:10:53,560 --> 00:10:54,830
for a list.

153
00:10:55,110 --> 00:10:55,740
OK.

154
00:10:55,960 --> 00:10:58,510
So we just saw how we can read from a file.

155
00:10:58,510 --> 00:11:04,780
Now let's talk about writing to a file by default that open a function that we just used up here.

156
00:11:04,780 --> 00:11:06,670
It only allows us to read the file.

157
00:11:06,760 --> 00:11:12,040
And that's really for safety because by default you probably don't want to just have any user have write

158
00:11:12,040 --> 00:11:14,220
access to your text files.

159
00:11:14,230 --> 00:11:16,580
Otherwise we'll be able to overwrite anything.

160
00:11:16,660 --> 00:11:22,180
But let's show you how to actually write to a file and then we'll talk about appending to a file.

161
00:11:22,180 --> 00:11:23,650
Let's go ahead and show this.

162
00:11:23,710 --> 00:11:32,030
So I'm going to say my file is equal to open and I'm going to open that test that takes the file again.

163
00:11:32,910 --> 00:11:37,410
Except as a second parameter if you do shift type here you should notice that you passed in the file

164
00:11:37,410 --> 00:11:42,600
name and you have passed in this mode parameter where the default mode is R which is reading.

165
00:11:42,790 --> 00:11:46,930
And if you hit plus here you should be able to expand on this a scroll down.

166
00:11:47,010 --> 00:11:51,400
We'll have a little character table for character versus meaning.

167
00:11:51,600 --> 00:11:53,530
So R is open for reading.

168
00:11:53,760 --> 00:11:59,790
W is open for writing and then if you add this little Plus it opens a disk for updating.

169
00:11:59,790 --> 00:12:01,090
Reading and writing.

170
00:12:01,140 --> 00:12:06,870
So a really common way to see this is by seeing w plus and there are a lot more discussion here of all

171
00:12:06,870 --> 00:12:10,290
the various methods but we're just going to focus on the simple ones.

172
00:12:10,290 --> 00:12:18,820
So we're just going to say w plus and passing w plus allows us to both read and write to the file.

173
00:12:18,820 --> 00:12:23,050
Now what's interesting here is that w Plus should be used with caution.

174
00:12:23,190 --> 00:12:30,960
If you open a file with W or W plus it performs a truncation on the original that means anything in

175
00:12:30,960 --> 00:12:34,580
the original file is actually overwritten and deleted over.

176
00:12:34,860 --> 00:12:42,200
So I want to show this by running and I'm going to say my file.

177
00:12:42,260 --> 00:12:45,030
And let's quickly read what is in the file right now.

178
00:12:46,540 --> 00:12:54,550
You'll notice that immediately my file after calling that read has been an empty string because by opening

179
00:12:54,550 --> 00:12:59,980
it with W Plus you're not overwriting the original test that TXI the file.

180
00:13:00,010 --> 00:13:02,720
So that's why you should use WMW Plus with caution.

181
00:13:02,950 --> 00:13:08,690
You should only use it when you intend to completely overwrite the original contents of the file.

182
00:13:08,710 --> 00:13:20,490
So notice now if I say my file I can call the right method and say my brand new text.

183
00:13:20,560 --> 00:13:24,700
So now I wrote some tax returns back the number of characters that were written.

184
00:13:24,700 --> 00:13:27,700
And if you say my file seek zero

185
00:13:30,390 --> 00:13:42,590
and run that and then say my file if we just call read here notice now it says my brand new text we

186
00:13:42,590 --> 00:13:47,480
no longer have the original text lines appear which was Helo's a quick test file.

187
00:13:47,480 --> 00:13:53,150
This is the second line of the file and that's because opening of W and W Plus will completely overwrite

188
00:13:53,240 --> 00:13:54,580
the original file.

189
00:13:54,590 --> 00:13:58,850
Now in a lot of use cases that's actually what you want to do if you're trying to create a updating

190
00:13:58,850 --> 00:14:02,720
log or just create a new file every time someone runs a program.

191
00:14:02,750 --> 00:14:07,480
You may very well want to completely overwrite any old information but in case you don't.

192
00:14:07,490 --> 00:14:10,510
There's also an append method which you're going to show you next.

193
00:14:10,520 --> 00:14:15,740
So keep in mind if you want to write to a file you should open it with W or W plus so w Plus allows

194
00:14:15,740 --> 00:14:19,710
you to both read and write to the file and then let's go ahead and close this file.

195
00:14:22,620 --> 00:14:24,300
And that file is closed.

196
00:14:24,340 --> 00:14:26,540
So you should always do that when you're done with a file.

197
00:14:26,710 --> 00:14:30,280
We just showed you how to read from a file and how to write to a file.

198
00:14:30,280 --> 00:14:32,510
Let's not show you how to append to a file.

199
00:14:32,770 --> 00:14:39,220
So the appending to a file will actually keep the old information and then allow you to add in new lines.

200
00:14:39,220 --> 00:14:40,080
So try that out.

201
00:14:41,600 --> 00:14:49,140
We're going to say my file is equal to open and I'm going to open that text file again.

202
00:14:50,110 --> 00:14:58,510
Except this time I'm going to say a plus which now allows me to open it by being able to append to the

203
00:14:58,510 --> 00:15:01,080
file instead of completely overwriting it.

204
00:15:01,090 --> 00:15:04,310
So if the file doesn't exist a new one is going to be created.

205
00:15:04,510 --> 00:15:10,360
So keep in mind that if you accidentally pasan a file here that completely doesn't exist such as whip's

206
00:15:10,420 --> 00:15:16,060
that text is sort of producing an error if you're opening it with a plus it's actually going to then

207
00:15:16,210 --> 00:15:18,370
create a new file called wups that text.

208
00:15:18,370 --> 00:15:19,510
So keep that in mind.

209
00:15:20,640 --> 00:15:37,390
We're going to say my file right and we're going to say is my first line in a plus opening and I'll

210
00:15:37,570 --> 00:15:38,740
go ahead and close the file

211
00:15:42,850 --> 00:15:43,180
and out.

212
00:15:43,180 --> 00:15:44,770
Let's open the file again.

213
00:15:44,890 --> 00:15:51,900
So I'll say new file is equal to open and I'm just going to open it now and read permissions.

214
00:15:51,910 --> 00:15:53,900
So upset Tex here.

215
00:15:53,910 --> 00:15:59,670
Now if I say new file read I see my first line in a plus opening.

216
00:15:59,710 --> 00:16:04,630
So what actually happened here since I open with a plus I open the file that didn't exist.

217
00:16:04,630 --> 00:16:07,350
So then it said OK I'll go ahead and make one for you.

218
00:16:07,360 --> 00:16:08,680
Keep in mind that's not the case.

219
00:16:08,680 --> 00:16:13,960
When you're opening with the mode are ill say hey there's an error here that follows it exist but since

220
00:16:13,960 --> 00:16:17,610
you open it's A-plus it says No problem I'll create that file for you.

221
00:16:17,830 --> 00:16:19,650
Then we write to that file.

222
00:16:19,750 --> 00:16:20,520
Close it.

223
00:16:20,740 --> 00:16:25,500
If I'm opening just read permission there I can see my first line and A-plus opening.

224
00:16:25,510 --> 00:16:34,660
Keep in mind that the file here was mode and read permission which means if I say new file rights I'll

225
00:16:34,660 --> 00:16:45,750
say try to write something with only read permissions I suddenly get an error that says hey that's not

226
00:16:45,750 --> 00:16:51,630
ridable and that's because we only open this file this new file object with mode R which is the default

227
00:16:51,630 --> 00:16:52,440
mode.

228
00:16:52,440 --> 00:16:56,910
So if you're ever getting this error it's because you didn't open it with the correct permission or

229
00:16:56,910 --> 00:16:58,790
the correct mode.

230
00:16:58,840 --> 00:17:01,280
So let's close this file again.

231
00:17:01,280 --> 00:17:05,930
New file close and I'm going to open up again this.

232
00:17:05,980 --> 00:17:09,360
Whoops that TXI file again that's the one we just created.

233
00:17:09,480 --> 00:17:15,330
We'll say my file is equal to open.

234
00:17:15,370 --> 00:17:24,080
Whoops that DXi going to say mode is equal to a plus so allows me to append to it and then I will say

235
00:17:24,140 --> 00:17:27,740
my file and then I'm going to say

236
00:17:30,160 --> 00:17:30,750
writes

237
00:17:33,470 --> 00:17:42,360
and then say this is an added line because I used a plus mode

238
00:17:45,620 --> 00:17:55,350
and now if I seek all the way to the beginning of the file and then say my file read I see this as an

239
00:17:55,350 --> 00:17:58,010
added line because I used a plus mode.

240
00:17:58,020 --> 00:18:00,680
Notice how it's writing everything onto the first line.

241
00:18:00,750 --> 00:18:07,860
If you actually want to add in a real knee line where you would have to do is take your file and then

242
00:18:07,860 --> 00:18:12,360
say writes and then the very first character would actually have to be a line break.

243
00:18:12,360 --> 00:18:14,010
You have to say backslash.

244
00:18:14,010 --> 00:18:19,800
And for a new line and then say this is a real new line.

245
00:18:20,660 --> 00:18:29,380
On the next line and then run that and again I will seek all the way to the beginning of the file.

246
00:18:30,790 --> 00:18:32,100
Read the file again.

247
00:18:32,390 --> 00:18:35,200
And now I see my first line and A-plus opening.

248
00:18:35,220 --> 00:18:37,910
This is an added line etc. and then I see backslash.

249
00:18:37,930 --> 00:18:40,770
And this is a real in the line on the next line.

250
00:18:40,840 --> 00:18:49,630
So if I were to seatbacks 0 and then print out the results of my file that read I see this my first

251
00:18:49,630 --> 00:18:50,940
line A-plus opening.

252
00:18:51,040 --> 00:18:52,540
This is an added line.

253
00:18:52,540 --> 00:18:53,900
This is a real newline.

254
00:18:56,170 --> 00:19:00,520
Now before we end this lecture the last thing I want to show you is how you can actually use a context

255
00:19:00,520 --> 00:19:04,260
manager to automatically close the file for you.

256
00:19:04,270 --> 00:19:10,720
So previously we always had to say my file close because it's kind of annoying and it's also a little

257
00:19:10,780 --> 00:19:13,440
unsafe because you may forget to write that close line.

258
00:19:13,480 --> 00:19:21,900
There is an alias in-context manager which allows you to use the with keyword to say with open test

259
00:19:21,910 --> 00:19:24,740
that TSC or whatever file you're working with.

260
00:19:24,740 --> 00:19:30,380
So let's go ahead and use that spiles since we know we have a lot for it because a whipsaw text is going

261
00:19:30,380 --> 00:19:38,400
to read it in with great permission and all say as my new file colon and then we can do whatever we

262
00:19:38,400 --> 00:19:38,970
want here.

263
00:19:39,000 --> 00:19:49,530
So I can say something like You know my variable is equal to my new file dot read lines.

264
00:19:49,570 --> 00:19:50,690
So what's actually happening here.

265
00:19:50,710 --> 00:19:52,500
This is just known as a context manager.

266
00:19:52,660 --> 00:19:58,870
It's going to say with you open this file as this variable name and you can do whatever you want in

267
00:19:58,870 --> 00:20:03,370
this block of code and it will automatically close the file once this block of code is done running

268
00:20:03,370 --> 00:20:04,290
for you.

269
00:20:04,570 --> 00:20:11,920
So you run that and then if you call my variable it's this list now based off those lines.

270
00:20:12,000 --> 00:20:18,240
So often we're going to see us performing with open command instead of having to manually open and close

271
00:20:18,240 --> 00:20:23,700
files or solves this with operator is a context manager that automatically closes the file for you.

272
00:20:23,790 --> 00:20:27,750
And that's really what you see most professionals using but it is important to understand the basics

273
00:20:27,780 --> 00:20:34,220
because that's essentially what's going on under the hood when you call this with context manager.

274
00:20:34,230 --> 00:20:34,600
All right.

275
00:20:34,620 --> 00:20:37,230
Coming up next we're going to learn how to work with PDA files.

276
00:20:37,230 --> 00:20:37,960
We'll see if they're.

