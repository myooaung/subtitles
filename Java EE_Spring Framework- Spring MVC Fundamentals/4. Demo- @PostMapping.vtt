WEBVTT
1
00:00:01.040 --> 00:00:04.310
Adding support for the POST was almost easier than doing the Git.

2
00:00:04.310 --> 00:00:08.460
We just need to come into our controller and below our Git mapping,

3
00:00:08.460 --> 00:00:11.420
but before our closing curly brace,

4
00:00:11.420 --> 00:00:17.690
you want to add a PostMapping, and inside of here we want to have it handled

5
00:00:17.690 --> 00:00:26.320
the same way with the /user request, and then we want to just start putting our

6
00:00:26.320 --> 00:00:33.680
signature in here. So we're going to say public, and it's going to take an

7
00:00:33.680 --> 00:00:39.010
object type of User, and we'll name it user.

8
00:00:39.010 --> 00:00:41.140
Instead of our method,

9
00:00:41.140 --> 00:00:46.100
we can return our user instance. We can manipulate things on

10
00:00:46.100 --> 00:00:50.240
there if we want, but for just some debugging, let's add a

11
00:00:50.240 --> 00:01:06.640
System.out.println here on User firstname,

12
00:01:06.640 --> 00:01:09.310
getFirstname and save this.

13
00:01:09.310 --> 00:01:12.840
Now, we have everything in here to actually handle a POST.

14
00:01:12.840 --> 00:01:14.900
Now, from the previous module,

15
00:01:14.900 --> 00:01:20.240
you could go ahead and add validation in here and other stuff to handle that.

16
00:01:20.240 --> 00:01:22.240
We've already seen those pieces in action.

17
00:01:22.240 --> 00:01:24.960
We don't need to make this example more convoluted,

18
00:01:24.960 --> 00:01:29.660
but those same binding results and valid attributes will still work

19
00:01:29.660 --> 00:01:37.780
inside of RESTful services. Let's restart our server, and I'm going

20
00:01:37.780 --> 00:01:40.480
to go over the Postman. Now in Postman,

21
00:01:40.480 --> 00:01:46.740
with this POST set up where I've just chose the type of POST and clicked on

22
00:01:46.740 --> 00:01:51.580
the Body tab, added in my elements, my key of first name, value of last

23
00:01:51.580 --> 00:01:57.090
name, key of last name, value of Hansen, age, all of the name value

24
00:01:57.090 --> 00:02:01.340
key‑pairs inside of here, if I click Send,

25
00:02:01.340 --> 00:02:04.720
you'll notice that it returned our object back to us,

26
00:02:04.720 --> 00:02:08.030
and that's because it successfully went through that. Let me switch back over

27
00:02:08.030 --> 00:02:11.360
to the IDE, and you'll be able to see that System.out.println in our console.

28
00:02:11.360 --> 00:02:16.390
You can see our user first name Bryan at the bottom of our console output

29
00:02:16.390 --> 00:02:18.850
because we went clear through that life cycle.

30
00:02:18.850 --> 00:02:26.440
That's really all we had to do to add a GET and a POST to our code.

31
00:02:26.440 --> 00:02:29.300
You can easily implement the other methods as well.

32
00:02:29.300 --> 00:02:33.060
A PUT and a DELETE, they have the same URL mappings, you

33
00:02:33.060 --> 00:02:34.370
can go ahead and put them in here,

34
00:02:34.370 --> 00:02:38.750
and it will accept the except headers that you send in.

35
00:02:38.750 --> 00:02:41.370
So if it's a PUT, POST, GET, or DELETE,

36
00:02:41.370 --> 00:02:46.200
it will handle it accordingly to that request. Makes it really easy.

37
00:02:46.200 --> 00:02:53.000
Let's see how we'd do this and now intercept this data with jQuery on the client‑side.

