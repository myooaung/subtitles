1
00:00:01,000 --> 00:00:04,910
We've already seen some of this before, and, in fact, this image

2
00:00:04,910 --> 00:00:08,580
was the same image we used in our architecture discussion in the

3
00:00:08,580 --> 00:00:12,250
previous module, but I grayed out the other tiers to just focus

4
00:00:12,250 --> 00:00:14,440
on what is a controller.

5
00:00:14,440 --> 00:00:17,990
And we've even created a controller when we wrote our greeting

6
00:00:17,990 --> 00:00:21,430
controller in our first step of our application.

7
00:00:21,430 --> 00:00:23,880
But here's what's happening as we're going through a

8
00:00:23,880 --> 00:00:27,140
request from the user. The request comes in,

9
00:00:27,140 --> 00:00:30,730
and that's going to go to a particular controller based off of what

10
00:00:30,730 --> 00:00:34,410
the user's request was, and it's going to interact with some business

11
00:00:34,410 --> 00:00:38,640
logic. Now that business logic is going to produce some data, and it

12
00:00:38,640 --> 00:00:42,470
can theoretically be a web service or it could be our database or it

13
00:00:42,470 --> 00:00:45,930
could just be our business logic tier. That's going to produce some

14
00:00:45,930 --> 00:00:46,780
output.

15
00:00:46,780 --> 00:00:51,630
We can think of that as our model or our UI, and we'll eventually

16
00:00:51,630 --> 00:00:56,040
return that model back to our UI on our response.

17
00:00:56,040 --> 00:00:59,490
As we come out of our web service or request,

18
00:00:59,490 --> 00:01:03,500
we're going to hand that back to our controller, and then our controller is

19
00:01:03,500 --> 00:01:06,950
going to go in and decide which view is appropriate based off of what

20
00:01:06,950 --> 00:01:10,680
information was returned or what happened out of our request,

21
00:01:10,680 --> 00:01:14,300
and we're going to hand that back to the user.

22
00:01:14,300 --> 00:01:17,670
The controller can almost be thought of as a traffic cop,

23
00:01:17,670 --> 00:01:20,770
hence the logo defining a traffic light.

24
00:01:20,770 --> 00:01:24,100
The responsibilities of a controller are to interpret user

25
00:01:24,100 --> 00:01:27,980
input and transport that input into a model.

26
00:01:27,980 --> 00:01:31,050
To take that information that's going to come back from our business

27
00:01:31,050 --> 00:01:35,930
logic from our service tier and build that into a model to hand back to

28
00:01:35,930 --> 00:01:40,620
our UI. It is the gateway to our business logic, and will determine the

29
00:01:40,620 --> 00:01:43,640
correct views based off of that logic.

30
00:01:43,640 --> 00:01:47,470
One other key point that never really seems to come up to play as far

31
00:01:47,470 --> 00:01:51,610
as the duties of a controller is, is that it also interprets exceptions

32
00:01:51,610 --> 00:01:55,780
for the business logic and service tier, and how to handle and navigate

33
00:01:55,780 --> 00:01:57,500
those correctly from there.

34
00:01:57,500 --> 00:01:57,740
Now,

35
00:01:57,740 --> 00:02:00,380
it could be a business logic exception in the sense that you

36
00:02:00,380 --> 00:02:03,720
haven't given me a valid date, or it could be, hey,

37
00:02:03,720 --> 00:02:04,800
the database is down.

38
00:02:04,800 --> 00:02:08,350
I'm going to send you this error page rather than requesting that you add

39
00:02:08,350 --> 00:02:12,340
this information or correct this information on the screen.

40
00:02:12,340 --> 00:02:20,000
So its duties are to also interpret those errors, and handle and navigate from our middle tier.

