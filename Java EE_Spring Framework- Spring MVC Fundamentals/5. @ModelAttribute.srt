1
00:00:01,040 --> 00:00:04,630
To be able to pass data from our request, whether that's a RESTful

2
00:00:04,630 --> 00:00:07,610
service or from a JSP page to our controller,

3
00:00:07,610 --> 00:00:12,310
we're going to use some libraries provided to us by Spring MVC.

4
00:00:12,310 --> 00:00:15,230
We could actually just use the standard HTML input tags,

5
00:00:15,230 --> 00:00:18,420
but Spring provides us a library making it easier to

6
00:00:18,420 --> 00:00:20,190
interact with our controllers.

7
00:00:20,190 --> 00:00:20,940
Historically,

8
00:00:20,940 --> 00:00:25,620
we've always just passed HTTP parameters that have gone on an HTTP

9
00:00:25,620 --> 00:00:29,200
request, and those parameters can then be accessed much similar to

10
00:00:29,200 --> 00:00:34,170
like a hash map where I just grab a parameter based off of its name so

11
00:00:34,170 --> 00:00:37,210
every HTML element would be named.

12
00:00:37,210 --> 00:00:37,580
Well,

13
00:00:37,580 --> 00:00:40,720
there's tags that Spring provides us to take these values

14
00:00:40,720 --> 00:00:43,200
from our input page and make them available to our

15
00:00:43,200 --> 00:00:48,420
controller through the model hash map, bind them to a specified object,

16
00:00:48,420 --> 00:00:51,910
which is actually the approach we're going to do, or just be able to grab

17
00:00:51,910 --> 00:00:58,200
them off the request. So we could always pass in the servlet request into

18
00:00:58,200 --> 00:01:01,670
our method name and access it that way.

19
00:01:01,670 --> 00:01:05,910
I'll actually walk through the example showing you all of those.

20
00:01:05,910 --> 00:01:09,110
The model can actually be a bit confusing, as you'll notice in our

21
00:01:09,110 --> 00:01:15,920
controller box that our model for accessing parameters and returning

22
00:01:15,920 --> 00:01:20,140
data is actually the same model and view object.

23
00:01:20,140 --> 00:01:23,250
We'll walk through that, though, so it's not quite as confusing.

24
00:01:23,250 --> 00:01:28,480
The binding object attribute approach that I just spoke about is used whenever

25
00:01:28,480 --> 00:01:32,780
we want to send data to our controller or retrieve data from our controller

26
00:01:32,780 --> 00:01:36,270
that's bound to an object or represented by an object.

27
00:01:36,270 --> 00:01:40,790
The nice thing about Spring MVC is that it's all done with basic POJOs and

28
00:01:40,790 --> 00:01:45,140
not using a class that's only specific to our UI like in some of the other

29
00:01:45,140 --> 00:01:49,480
frameworks such as Struts or WebWork or Stripes.

30
00:01:49,480 --> 00:01:51,690
So we'll use the @ModelAttribute when we want to do

31
00:01:51,690 --> 00:01:55,220
an HTTP Get to get back data.

32
00:01:55,220 --> 00:01:58,900
So say I'm going to get a drop‑down like a list of states or,

33
00:01:58,900 --> 00:02:02,410
you know, a drop‑down type list of data,

34
00:02:02,410 --> 00:02:05,540
gender, or those types of things.

35
00:02:05,540 --> 00:02:09,940
We want to grab that stuff that might be driven by our database.

36
00:02:09,940 --> 00:02:14,500
Well, we also use that same thing for Post. So it's the same object.

37
00:02:14,500 --> 00:02:18,240
It's bound the same way, and it's described the same way.

38
00:02:18,240 --> 00:02:19,990
We have a form that we're filling out,

39
00:02:19,990 --> 00:02:22,820
and that's actually the example we're going to do here in our demo in a

40
00:02:22,820 --> 00:02:27,220
couple of minutes is the object that we send down through our Get is

41
00:02:27,220 --> 00:02:30,460
the same object we'll bind to on our Post.

42
00:02:30,460 --> 00:02:34,770
I mentioned it works with POJO, so it's very simple.

43
00:02:34,770 --> 00:02:39,180
And I don't have something that's specifically bound to just my UI tier.

44
00:02:39,180 --> 00:02:41,650
I can use it anywhere in my code.

45
00:02:41,650 --> 00:02:45,330
These objects can also be validated with a binding result.

46
00:02:45,330 --> 00:02:48,290
We're going to cover that in its own separate module later,

47
00:02:48,290 --> 00:02:55,000
but just to point it out so you're aware of it, you can have this data validated as part of your lifecycle.

