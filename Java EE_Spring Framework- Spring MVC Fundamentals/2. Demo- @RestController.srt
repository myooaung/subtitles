1
00:00:01,040 --> 00:00:03,000
To begin adding that RestController,

2
00:00:03,000 --> 00:00:08,540
let's first start by giving us a model object to return off of our request.

3
00:00:08,540 --> 00:00:11,680
I want to go ahead and open up our src, main,

4
00:00:11,680 --> 00:00:14,640
java, com.pluralsight.conference package.

5
00:00:14,640 --> 00:00:20,940
And go to the model, and right‑click on the model, and say New, Java Class.

6
00:00:20,940 --> 00:00:25,440
And inside of here, I want to just do a User Class.

7
00:00:25,440 --> 00:00:28,290
Let's hit Enter.

8
00:00:28,290 --> 00:00:31,160
Now we give it a couple of member variables.

9
00:00:31,160 --> 00:00:37,140
I'm going to do private String firstname,

10
00:00:37,140 --> 00:00:49,510
private String lastname, and a private int age.

11
00:00:49,510 --> 00:00:55,420
Now let's give ourselves some whitespace and right‑click and say Generate.

12
00:00:55,420 --> 00:01:01,240
We want to do the Getters and Setters. Select all three and say OK.

13
00:01:01,240 --> 00:01:03,100
Let's save this.

14
00:01:03,100 --> 00:01:09,040
Now we've got a model object we can pass back and forth with our controller.

15
00:01:09,040 --> 00:01:14,420
Let's right‑click on our controller and say New, Java Class.

16
00:01:14,420 --> 00:01:19,440
We'll call this UserController.

17
00:01:19,440 --> 00:01:24,340
I want to start off by saying @RestController.

18
00:01:24,340 --> 00:01:29,040
And what this does is it makes sure that every call that goes in

19
00:01:29,040 --> 00:01:33,590
and out of here looks at the content type and the except headers

20
00:01:33,590 --> 00:01:36,840
to see how and what it should return.

21
00:01:36,840 --> 00:01:41,450
And to save yourself the typing, you can go ahead and open up that

22
00:01:41,450 --> 00:01:44,380
RegistrationController and copy that if you want,

23
00:01:44,380 --> 00:01:47,440
or we can code it in by hand.

24
00:01:47,440 --> 00:01:55,540
I'm actually going to paste a Get in here and change a few things.

25
00:01:55,540 --> 00:02:00,740
First, I'm going to start by importing the classes that we need,

26
00:02:00,740 --> 00:02:07,080
and the User object specifically wants us to select that

27
00:02:07,080 --> 00:02:13,930
particular one, and our request parameters.

28
00:02:13,930 --> 00:02:16,550
Now we have all the pieces we need inside of here, and let's

29
00:02:16,550 --> 00:02:19,910
walk through what this example's doing.

30
00:02:19,910 --> 00:02:24,990
The return type of this method getUser is our user object type.

31
00:02:24,990 --> 00:02:29,160
Now, in the previous examples we were doing with our registration controller,

32
00:02:29,160 --> 00:02:35,590
you can see here on line 16, we were returning a string.

33
00:02:35,590 --> 00:02:37,910
Let me expand that code so you can see it.

34
00:02:37,910 --> 00:02:42,960
On line 17, we were returning the actual string registration,

35
00:02:42,960 --> 00:02:48,040
which referred to our GSP page with our InternalResourceViewResolver.

36
00:02:48,040 --> 00:02:50,300
Well, we don't do that with a RestController. We

37
00:02:50,300 --> 00:02:54,890
return the actual body to our caller.

38
00:02:54,890 --> 00:02:58,560
So we're going to have a request come in, and the response is

39
00:02:58,560 --> 00:03:02,050
going to be the actual body of the response.

40
00:03:02,050 --> 00:03:04,410
Now there's a couple other things in here. You'll notice that

41
00:03:04,410 --> 00:03:08,180
we have a @RequestParam that will pull those parameters off

42
00:03:08,180 --> 00:03:11,240
the URL as we make requests to it.

43
00:03:11,240 --> 00:03:13,020
And right now I just have one of them.

44
00:03:13,020 --> 00:03:20,840
We can add the other ones in here and say @RequestParam,

45
00:03:20,840 --> 00:03:28,340
lastname, and we can grab the age if we want as well.

46
00:03:28,340 --> 00:03:31,940
Now we can set those values in our actual objects.

47
00:03:31,940 --> 00:03:47,150
We'll say user.setLastname and user.setAge and save this.

48
00:03:47,150 --> 00:03:52,270
We have all the pieces we need for this to now return that body back

49
00:03:52,270 --> 00:03:54,930
containing the user object that we've created.

50
00:03:54,930 --> 00:03:55,680
Now obviously,

51
00:03:55,680 --> 00:04:00,800
we usually wouldn't be just taking parameters that come in and

52
00:04:00,800 --> 00:04:03,340
storing them in an object and returning them.

53
00:04:03,340 --> 00:04:07,300
This is where we would have a service auto‑injected into our

54
00:04:07,300 --> 00:04:11,210
business logic tier or our model that would go ahead and

55
00:04:11,210 --> 00:04:12,770
retrieve this out of a database.

56
00:04:12,770 --> 00:04:16,820
So lines 15, 17, 18, 19,

57
00:04:16,820 --> 00:04:19,640
all of this would be a database call to our model tier

58
00:04:19,640 --> 00:04:21,840
returning something from a repository.

59
00:04:21,840 --> 00:04:22,830
But for this example,

60
00:04:22,830 --> 00:04:26,880
it shows you how we're grabbing those request parameters and storing

61
00:04:26,880 --> 00:04:29,780
them in an object and returning them back out to you.

62
00:04:29,780 --> 00:04:32,740
Let's save this.

63
00:04:32,740 --> 00:04:40,950
Going to start my server up. And now, we don't have a page set up for this.

64
00:04:40,950 --> 00:04:44,780
We're just going to request that actual instance back.

65
00:04:44,780 --> 00:04:49,500
So we can say user and hit Enter,

66
00:04:49,500 --> 00:04:53,680
and you'll see we get JSON text back, and there are

67
00:04:53,680 --> 00:04:56,760
defaults that are already in there for us.

68
00:04:56,760 --> 00:04:59,180
But we can override that with query parameters,

69
00:04:59,180 --> 00:05:09,520
so we can say firstname is equal to Dan.

70
00:05:09,520 --> 00:05:13,310
And when we run that, it will return that as Dan.

71
00:05:13,310 --> 00:05:29,210
You can do others out there. We'll say lastname equals to Frandson.

72
00:05:29,210 --> 00:05:31,740
And we can override the age while we're at it.

73
00:05:31,740 --> 00:05:34,810
Just standard query parameters.

74
00:05:34,810 --> 00:05:40,710
We'll say age equals 33.

75
00:05:40,710 --> 00:05:44,680
Notice that it handled the strings appropriately,

76
00:05:44,680 --> 00:05:49,020
the integer appropriately. We are reading in those query params,

77
00:05:49,020 --> 00:05:51,590
storing it in the object, and returned it without us

78
00:05:51,590 --> 00:05:53,230
having to use any view resolvers.

79
00:05:53,230 --> 00:06:02,000
So it goes ahead and just by default accepts that JSON response back and returns it to you as a client.

