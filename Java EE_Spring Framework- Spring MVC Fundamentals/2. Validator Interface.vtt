WEBVTT
1
00:00:01.070 --> 00:00:05.040
There is another approach that we're not going to show,

2
00:00:05.040 --> 00:00:07.310
but I want to spend a minute talking to you about it,

3
00:00:07.310 --> 00:00:10.340
and that is the Validator interface.

4
00:00:10.340 --> 00:00:14.790
It was the approach that we used before the JSR 303

5
00:00:14.790 --> 00:00:17.460
and subsequent releases came out.

6
00:00:17.460 --> 00:00:21.340
It works fine, just as it did 10 years ago when it was released,

7
00:00:21.340 --> 00:00:23.740
but it's very programmatic.

8
00:00:23.740 --> 00:00:26.880
You have to manually type out every line of code

9
00:00:26.880 --> 00:00:29.140
that you want to have it execute.

10
00:00:29.140 --> 00:00:30.760
It is not deprecated,

11
00:00:30.760 --> 00:00:36.040
and you can in fact still use it in modern Spring applications today.

12
00:00:36.040 --> 00:00:39.140
I personally try to avoid it because business logic

13
00:00:39.140 --> 00:00:41.570
tends to creep into these validators.

14
00:00:41.570 --> 00:00:45.180
The separation of concerns that we spoke about in an earlier

15
00:00:45.180 --> 00:00:49.360
module becomes a little hazy in these Validator classes that

16
00:00:49.360 --> 00:00:51.890
implement the Validator interface.

17
00:00:51.890 --> 00:00:53.130
For this reason,

18
00:00:53.130 --> 00:00:56.370
I tend to avoid the Validator interface and

19
00:00:56.370 --> 00:00:58.790
implementing classes and just used the JSR.

20
00:00:58.790 --> 00:01:04.640
More advanced validation I move into my own custom class inside the

21
00:01:04.640 --> 00:01:12.000
service tier and handle it appropriately there. Let's move on to how we configure Bean validation

