WEBVTT
1
00:00:00.840 --> 00:00:03.960
We've spoken about tiers, and we've spoken about layers,

2
00:00:03.960 --> 00:00:07.640
and we've started to allude to components inside of our application.

3
00:00:07.640 --> 00:00:12.820
So how do we represent these tiers with Spring and Spring MVC?

4
00:00:12.820 --> 00:00:14.910
That's with these three components.

5
00:00:14.910 --> 00:00:20.740
We have our controller, our service, and our repository.

6
00:00:20.740 --> 00:00:23.560
We've discussed controllers already a little bit.

7
00:00:23.560 --> 00:00:28.200
They just route where we're going to and interpret the user's request.

8
00:00:28.200 --> 00:00:31.250
The service is where our business logic goes.

9
00:00:31.250 --> 00:00:34.060
It should also be noted that it's where our transactions will most

10
00:00:34.060 --> 00:00:37.540
likely start as well, if we're accessing more than one database

11
00:00:37.540 --> 00:00:40.530
table. And then there is repositories.

12
00:00:40.530 --> 00:00:45.430
The repository tier is also sometimes referred to as the DAO,

13
00:00:45.430 --> 00:00:48.730
or data access object, and they usually have a one‑to‑one

14
00:00:48.730 --> 00:00:51.140
mapping with our database table.

15
00:00:51.140 --> 00:00:54.190
So looking at controllers, as we've mentioned,

16
00:00:54.190 --> 00:00:59.620
they handle our incoming requests in building the response. I can't emphasize

17
00:00:59.620 --> 00:01:04.230
strong enough that business logic should not be handled here.

18
00:01:04.230 --> 00:01:08.380
This is also where our request and our response object should stop as

19
00:01:08.380 --> 00:01:13.440
well. We shouldn't hand those off to separate tiers.

20
00:01:13.440 --> 00:01:17.070
It should grab information from the request and the response and hand that

21
00:01:17.070 --> 00:01:22.300
over to the business logic. This works with our service and repository tier

22
00:01:22.300 --> 00:01:24.840
for the business logic and data gathering,

23
00:01:24.840 --> 00:01:29.480
and it's annotated using the @Controller annotation.

24
00:01:29.480 --> 00:01:32.530
There are some convenience classes that you extend,

25
00:01:32.530 --> 00:01:37.280
but you either have to wire them up or annotate them with the controller still.

26
00:01:37.280 --> 00:01:40.220
It also should be noted that this is where we handle

27
00:01:40.220 --> 00:01:42.730
exceptions and route views accordingly,

28
00:01:42.730 --> 00:01:46.620
based off of whether or not you had an exception or if

29
00:01:46.620 --> 00:01:49.040
we've got the correct information.

30
00:01:49.040 --> 00:01:52.900
The service tier is annotated with the @Service annotation,

31
00:01:52.900 --> 00:01:56.640
and it describes the verbs, or actions, of our system.

32
00:01:56.640 --> 00:02:00.260
It's where our business logic should reside.

33
00:02:00.260 --> 00:02:02.330
In fact, it should all be contained here.

34
00:02:02.330 --> 00:02:06.190
It shouldn't bleed over into our repository tier. Another

35
00:02:06.190 --> 00:02:08.980
role of the service tier is to ensure that the business

36
00:02:08.980 --> 00:02:11.040
object is in a valid state.

37
00:02:11.040 --> 00:02:13.770
This is where all of our state management should be handled,

38
00:02:13.770 --> 00:02:16.700
confirming that we've got a valid object passed in from a

39
00:02:16.700 --> 00:02:20.970
request. It meets the standards of our business objects or

40
00:02:20.970 --> 00:02:23.140
our business requirements.

41
00:02:23.140 --> 00:02:26.040
Also, this is where our transactions should begin.

42
00:02:26.040 --> 00:02:29.120
If you're doing two‑phase commits or there's a chance we might have to

43
00:02:29.120 --> 00:02:33.310
roll back or access web services, those types of things, this is where

44
00:02:33.310 --> 00:02:36.320
we want those transactions to begin.

45
00:02:36.320 --> 00:02:42.600
It often has the same methods as a repository, but a different focus.

46
00:02:42.600 --> 00:02:47.680
We may have a method in here that says, find user by last name,

47
00:02:47.680 --> 00:02:51.830
and we may have that same method in our repository, but what we do if we don't

48
00:02:51.830 --> 00:02:56.540
find the user or how many people will return or what state we might return

49
00:02:56.540 --> 00:02:59.740
those objects in is controlled by the service tier,

50
00:02:59.740 --> 00:03:04.080
where the repository tier is just going to go get that data.

51
00:03:04.080 --> 00:03:04.790
And lastly,

52
00:03:04.790 --> 00:03:11.050
the repository tier. The repository tier is annotated with @Repository, and it

53
00:03:11.050 --> 00:03:16.600
also describes the nouns of our systems. Where the service here described the

54
00:03:16.600 --> 00:03:20.240
verbs, the repository tier is focused on the nouns.

55
00:03:20.240 --> 00:03:24.940
You can see where the focus is different from the service versus the repository.

56
00:03:24.940 --> 00:03:28.580
The service tier describes those actions that we want to do,

57
00:03:28.580 --> 00:03:33.510
and the repository describes the data that we're going to interact with.

58
00:03:33.510 --> 00:03:36.640
It's focused on persisting and interacting with the

59
00:03:36.640 --> 00:03:39.140
database or basic CRUD functions.

60
00:03:39.140 --> 00:03:43.410
It's also typically a one‑to‑one mapping with an object.

61
00:03:43.410 --> 00:03:46.800
You may have an address and have an address repository.

62
00:03:46.800 --> 00:03:50.450
You would have a customer object and a customer repository.

63
00:03:50.450 --> 00:03:53.980
It's also often a one‑to‑one mapping with the database table,

64
00:03:53.980 --> 00:03:57.090
but that's not always the case based off your design.

65
00:03:57.090 --> 00:04:00.700
You make break things into multiple tables like a person and

66
00:04:00.700 --> 00:04:04.170
an employee table, but you may only have an employee object

67
00:04:04.170 --> 00:04:10.000
inside of your application. That's really more up to the ORM tool that you're using.

