WEBVTT
1
00:00:01.040 --> 00:00:03.790
Before we get too far into our application,

2
00:00:03.790 --> 00:00:06.890
let's get some simple vocabulary out of the way.

3
00:00:06.890 --> 00:00:10.580
First, we're going to start with a SPA or a single page application.

4
00:00:10.580 --> 00:00:13.050
You've probably heard of that before, but if you haven't,

5
00:00:13.050 --> 00:00:18.330
most people refer to a single page application as a SPA.

6
00:00:18.330 --> 00:00:21.680
The next piece is a DispatcherServlet.

7
00:00:21.680 --> 00:00:24.330
This is our entry point into our application,

8
00:00:24.330 --> 00:00:29.900
and it's really where a Spring MVC web app begins its configuration.

9
00:00:29.900 --> 00:00:33.240
We always start with the dispatcher servlet.

10
00:00:33.240 --> 00:00:34.620
Then we have a controller.

11
00:00:34.620 --> 00:00:39.850
The controller is actually an implementation of the command pattern handler.

12
00:00:39.850 --> 00:00:42.820
If you really want to understand architecture and

13
00:00:42.820 --> 00:00:44.670
understand the design behind this,

14
00:00:44.670 --> 00:00:49.490
you can go look up the command pattern design pattern and read more about it,

15
00:00:49.490 --> 00:00:54.940
but the controllers are always an implementation of a command pattern handler.

16
00:00:54.940 --> 00:00:56.890
The next piece that we have is a request mapping.

17
00:00:56.890 --> 00:01:03.030
Everything inside of Spring MVC is associated with a request mapping,

18
00:01:03.030 --> 00:01:09.100
and that's the URL, and the type of request that we're making to our application.

19
00:01:09.100 --> 00:01:11.090
Next, we have view resolvers.

20
00:01:11.090 --> 00:01:16.630
View resolvers are used to locate the view and to serve it back up.

21
00:01:16.630 --> 00:01:23.500
Now, a view resolver can be used to find a template or a JSP page or HTML page,

22
00:01:23.500 --> 00:01:27.440
or serve up a RESTful service.

23
00:01:27.440 --> 00:01:30.010
Then we'll talk about our servlet‑config.

24
00:01:30.010 --> 00:01:39.090
Now this used to be a web.xml file coupled with a servlet‑config.xml file,

25
00:01:39.090 --> 00:01:42.150
and now we're going to talk about how all of this is now

26
00:01:42.150 --> 00:01:45.540
configured using Java configuration.

27
00:01:45.540 --> 00:01:48.950
And then there is, of course, POJOs, plain old Java objects.

28
00:01:48.950 --> 00:01:53.410
Everything inside of Spring, all Spring beans are just simple POJOs,

29
00:01:53.410 --> 00:01:57.990
which is just a basic class that follows the bean specification of

30
00:01:57.990 --> 00:02:01.260
a no‑arguments constructor with getters and setters named

31
00:02:01.260 --> 00:02:06.190
appropriately, and that is the definition of a Spring bean as well;

32
00:02:06.190 --> 00:02:08.520
it's just a Spring configured POJO.

33
00:02:08.520 --> 00:02:12.810
So when you talk about a Spring bean, it is just a POJO that's

34
00:02:12.810 --> 00:02:17.500
been configured and implemented inside of Spring.

35
00:02:17.500 --> 00:02:23.000
Let's look at the application that we're going to be building throughout this course now.

