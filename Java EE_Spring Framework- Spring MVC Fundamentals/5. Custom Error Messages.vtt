WEBVTT
1
00:00:00.990 --> 00:00:04.460
Those last error messages were a little bit generic and

2
00:00:04.460 --> 00:00:07.100
didn't really fit our application very good.

3
00:00:07.100 --> 00:00:09.090
Let's customize that a little bit.

4
00:00:09.090 --> 00:00:14.190
Let's start off by going into our JSP page and adding

5
00:00:14.190 --> 00:00:17.990
a field‑specific validation error.

6
00:00:17.990 --> 00:00:23.840
So I'm going to add another td in here and a form:errors path="name",

7
00:00:23.840 --> 00:00:28.710
and that's referring to the element or the variable inside

8
00:00:28.710 --> 00:00:33.620
of our registration object called name, and a CSS class of error,

9
00:00:33.620 --> 00:00:36.340
that's the CSS class we defined up above.

10
00:00:36.340 --> 00:00:40.540
I need to change this table to be three columns now because we

11
00:00:40.540 --> 00:00:43.030
have now added that third column on there.

12
00:00:43.030 --> 00:00:44.280
And let's save this.

13
00:00:44.280 --> 00:00:46.290
Now all this is going to do is just going to display the

14
00:00:46.290 --> 00:00:47.580
error message that we're returning.

15
00:00:47.580 --> 00:00:52.000
It's the same error message that we already have in our class Registration.

16
00:00:52.000 --> 00:00:58.240
Registration, if you remember on line 7 here, is just saying not empty.

17
00:00:58.240 --> 00:01:00.230
But how do we customize that error?

18
00:01:00.230 --> 00:01:02.360
Well, it's actually really cool.

19
00:01:02.360 --> 00:01:08.690
So I'm going to create another comment in here and just say validations,

20
00:01:08.690 --> 00:01:12.450
and from here I'm going to take the type of validation that we're doing,

21
00:01:12.450 --> 00:01:16.340
which is a not empty on line 7.

22
00:01:16.340 --> 00:01:24.300
I'm going to say NotEmpty., and it goes to the actual instance name.

23
00:01:24.300 --> 00:01:28.300
So we are commonly referring to this as Registration.

24
00:01:28.300 --> 00:01:30.070
If you look at our controller,

25
00:01:30.070 --> 00:01:33.060
we're returning an instance of the registration object

26
00:01:33.060 --> 00:01:35.270
under the ModelAttribute registration.

27
00:01:35.270 --> 00:01:39.680
So we want to go back to our message.properties and say

28
00:01:39.680 --> 00:01:48.380
registration.name. So NotEmpty on the registration object on the

29
00:01:48.380 --> 00:02:00.440
member variable name=Name can not be empty, please fix.

30
00:02:00.440 --> 00:02:02.740
You can obviously name it whatever you want.

31
00:02:02.740 --> 00:02:05.440
And if you're going to do this in Spanish,

32
00:02:05.440 --> 00:02:09.500
you'll want to do the same thing in that message's properties as well.

33
00:02:09.500 --> 00:02:11.500
It'll work if we just stay in English.

34
00:02:11.500 --> 00:02:16.720
But just so you don't forget, I'm just going to change this to say in Spanish.

35
00:02:16.720 --> 00:02:20.040
You can do the translation later.

36
00:02:20.040 --> 00:02:22.760
That's all we had to do though. Our messages.properties,

37
00:02:22.760 --> 00:02:27.570
you do the validation that you're trying to achieve, the name of that

38
00:02:27.570 --> 00:02:32.760
instance, and the variable instance that you're trying to tie that to, so

39
00:02:32.760 --> 00:02:37.610
it does it all off of a name value‑key pair, the actual string that we

40
00:02:37.610 --> 00:02:40.640
want to fix, and now we can run it.

41
00:02:40.640 --> 00:02:46.170
So let's restart our server here. Now when we go into our registration,

42
00:02:46.170 --> 00:02:47.940
we can click on it.

43
00:02:47.940 --> 00:02:52.670
If it's not there, now we have Name can not be empty, please fix.

44
00:02:52.670 --> 00:02:55.990
So it will show you the specific error, and we showed it at the

45
00:02:55.990 --> 00:02:58.710
whole page level and the individual field level.

46
00:02:58.710 --> 00:03:02.370
You can play with that and add validations to all the fields you

47
00:03:02.370 --> 00:03:05.850
have in there and do it in a programmatic fashion. It works really

48
00:03:05.850 --> 00:03:07.900
well, and this is all internationalized.

49
00:03:07.900 --> 00:03:10.460
So we've internationalized our application. We've

50
00:03:10.460 --> 00:03:12.740
internationalized our error messages.

51
00:03:12.740 --> 00:03:16.620
Everything is working, and the validation is really easy to do.

52
00:03:16.620 --> 00:03:20.650
So you can see how this is a really handy way for you to validate stuff.

53
00:03:20.650 --> 00:03:23.650
By the way, this bean validation just doesn't work for UI.

54
00:03:23.650 --> 00:03:27.270
You can use this anywhere in your application.

55
00:03:27.270 --> 00:03:30.110
I see a lot of people do programmatic things where they go

56
00:03:30.110 --> 00:03:32.720
try and apply this validation on their own.

57
00:03:32.720 --> 00:03:36.350
You can use the validation utils inside of that bean

58
00:03:36.350 --> 00:03:38.960
validator to run that across your object,

59
00:03:38.960 --> 00:03:41.080
so there's no reason for you to code it yourself.

60
00:03:41.080 --> 00:03:49.000
You can pass an object in and ask if it's valid and have that return. That's all Spring's doing behind the scenes. Works really well.

