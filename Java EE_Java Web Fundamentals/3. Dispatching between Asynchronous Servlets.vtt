WEBVTT
1
00:00:00.494 --> 00:00:02.504
So now let's go and add another servlet,

2
00:00:02.504 --> 00:00:04.909
and in this one we'll use the dispatch mechanism to

3
00:00:04.909 --> 00:00:07.534
dispatch a call to our first servlet.

4
00:00:07.534 --> 00:00:12.564
So we have two async servlets, one dispatching a call to another.

5
00:00:12.564 --> 00:00:16.564
So we do this to show that we can dispatch calls while doing async work.

6
00:00:16.564 --> 00:00:21.574
And again, we'll show the events that fire when these calls are dispatched.

7
00:00:21.574 --> 00:00:24.584
This new class is called DispatchAsyncServlet.

8
00:00:24.584 --> 00:00:29.564
Again, this is a servlet that has asyncSupported set to true.

9
00:00:29.564 --> 00:00:34.534
We'll add a doGet method, and in here we do the same as previously,

10
00:00:34.534 --> 00:00:37.534
start the async context, wire up a listener,

11
00:00:37.534 --> 00:00:40.584
and print out similar messages to the async servlet.

12
00:00:40.584 --> 00:00:47.544
However, rather calling start, we dispatch a call to the first servlet.

13
00:00:47.544 --> 00:00:53.514
The URL to dispatch it to is /simple.

14
00:00:53.514 --> 00:00:54.544
Again we can deploy,

15
00:00:54.544 --> 00:01:01.554
and if we now browse to /async/dispatch and then look at the logs,

16
00:01:01.554 --> 00:01:04.564
we see the doGet, start, and complete messages,

17
00:01:04.564 --> 00:01:08.554
but notice we also see an onStartAsync message.

18
00:01:08.554 --> 00:01:12.544
We see this logged in the dispatch servlet.

19
00:01:12.544 --> 00:01:17.534
Remember, we dispatch to the simple servlet, then call startAsync.

20
00:01:17.534 --> 00:01:21.544
And this causes the onStart event to fire on the listener,

21
00:01:21.544 --> 00:01:25.574
and this is the listeners registered by the dispatch servlets.

22
00:01:25.574 --> 00:01:28.494
Also notice the thread ID of the calls.

23
00:01:28.494 --> 00:01:30.534
They again happen on different threads.

24
00:01:30.534 --> 00:01:34.554
The doGet and onStartAsync happen on the same initial thread,

25
00:01:34.554 --> 00:01:41.000
start happens on a thread created for the lambda, and onComplete happens on a thread used for the events again.

