WEBVTT
1
00:00:04.721 --> 00:00:10.701
After understanding the base classes, we can now finally implement a servlet.

2
00:00:10.701 --> 00:00:13.711
On the surface, this is reasonably straightforward.

3
00:00:13.711 --> 00:00:17.701
We provide our own class, in this case called OurServlet,

4
00:00:17.701 --> 00:00:20.721
and we have this extends the HttpServlet class.

5
00:00:20.721 --> 00:00:25.711
In here, we override any methods we need to, in this case, doGet.

6
00:00:25.711 --> 00:00:27.701
We could also override the other verb helper methods,

7
00:00:27.701 --> 00:00:30.711
such as doPost or doPut, if we needed to.

8
00:00:30.711 --> 00:00:33.631
In the overwritten doGet method,

9
00:00:33.631 --> 00:00:36.315
we process our request and generate the response

10
00:00:36.315 --> 00:00:38.701
needed for this particular servlet.

11
00:00:38.701 --> 00:00:42.661
We can also, if we needed to, override the init method,

12
00:00:42.661 --> 00:00:47.691
and in here we provide any initialization needed for this servlet.

13
00:00:47.691 --> 00:00:51.691
For this to work, however, there's one extra thing that we need.

14
00:00:51.691 --> 00:00:56.651
Currently we can deploy the servlet, but we can't browse to it.

15
00:00:56.651 --> 00:00:59.641
If we try and send a request to the server,

16
00:00:59.641 --> 00:01:01.666
the server has no way of identifying the servlet

17
00:01:01.666 --> 00:01:04.651
that the request is intended for.

18
00:01:04.651 --> 00:01:08.671
To fix that, we have to add a servlet mapping.

19
00:01:08.671 --> 00:01:12.681
And as we'll see in a moment, we can add servlet mappings via the web.xml file,

20
00:01:12.681 --> 00:01:16.974
but another way of adding the servlet mapping is to add

21
00:01:16.974 --> 00:01:19.641
an annotation into the servlet itself.

22
00:01:19.641 --> 00:01:21.651
The annotation looks something like this.

23
00:01:21.651 --> 00:01:23.691
It's the WebServlet annotation,

24
00:01:23.691 --> 00:01:27.424
and in this case we're using the simplest form of that and just

25
00:01:27.424 --> 00:01:30.631
adding a URL as the value of the annotation.

26
00:01:30.631 --> 00:01:34.661
Now we can browse to that URL and we'll see the servlet.

27
00:01:34.661 --> 00:01:37.661
We are now in a position to write our first servlet.

28
00:01:37.661 --> 00:01:41.631
We have the project already set up here inside IDEA,

29
00:01:41.631 --> 00:01:43.686
and what we're going to do is to add a servlet called FirstServlet,

30
00:01:43.686 --> 00:01:47.671
add a mapping to that servlet, and then deploy the application to Tomcat,

31
00:01:47.671 --> 00:01:51.681
and hopefully browse to the application and see the output from the servlet.

32
00:01:51.681 --> 00:01:55.701
So to add a servlet, we already have a package setup,

33
00:01:55.701 --> 00:01:59.651
so we can right-click, do New Java Class,

34
00:01:59.651 --> 00:02:04.661
and call this SimpleServlet.

35
00:02:04.661 --> 00:02:11.031
This is going to extend HttpServlet, and in here,

36
00:02:11.031 --> 00:02:13.651
we will override the doGet method.

37
00:02:13.651 --> 00:02:17.701
So we can override method, we can pick doGet,

38
00:02:17.701 --> 00:02:21.711
get rid of the call to super, and then from here we can output some data.

39
00:02:21.711 --> 00:02:24.631
To use that, we can use the response object,

40
00:02:24.631 --> 00:02:31.391
so we can say, response.getWriter .write,

41
00:02:31.391 --> 00:02:40.701
and of course we have to write Hello World.

42
00:02:40.701 --> 00:02:44.681
As we saw in the presentation, there's one extra thing we have to do.

43
00:02:44.681 --> 00:02:48.377
We have to add an annotation to the servlet to provide the mapping,

44
00:02:48.377 --> 00:02:54.671
so we say @WebServlet, and we give this name to the mapping,

45
00:02:54.671 --> 00:02:59.701
which will be /home.

46
00:02:59.701 --> 00:03:03.641
Once we have that, we can now deploy the servlet,

47
00:03:03.641 --> 00:03:06.631
and we're using Maven for that, so we have a Maven project set up.

48
00:03:06.631 --> 00:03:14.671
I can go to my Tomcat plugin, use redeploy, and redeploy the servlet.

49
00:03:14.671 --> 00:03:16.779
The application will be called Simple when we deploy it,

50
00:03:16.779 --> 00:03:21.681
so we should be able to browse to localhost/simple/home.

51
00:03:21.681 --> 00:03:28.641
So let this run for a moment.

52
00:03:28.641 --> 00:03:39.464
The application is deployed, so we can now go and look for Chrome,

53
00:03:39.464 --> 00:03:48.661
browse to localhost:8080/simple/home, and there we see Hello World.

54
00:03:48.661 --> 00:03:50.701
Now that we've written our first servlet,

55
00:03:50.701 --> 00:03:55.631
we have to get the servlet to handle any incoming requests.

56
00:03:55.631 --> 00:04:00.721
To do that, we have to map incoming URLs on to a specific instance of a servlet,

57
00:04:00.721 --> 00:04:04.671
and that's done via the web.xml file.

58
00:04:04.671 --> 00:04:09.641
As we can see here, when we send a request to the server,

59
00:04:09.641 --> 00:04:10.711
the request looks like this.

60
00:04:10.711 --> 00:04:15.569
The first line of the HTTP request will contain the name of the verb,

61
00:04:15.569 --> 00:04:18.691
in this case GET, the URL the request is going to,

62
00:04:18.691 --> 00:04:21.711
and the version of HTTP being used.

63
00:04:21.711 --> 00:04:24.701
What we care about here is the URL.

64
00:04:24.701 --> 00:04:27.691
That URL is read by the servlet container.

65
00:04:27.691 --> 00:04:33.651
The servlet container also has access to the web.xml file of our application,

66
00:04:33.651 --> 00:04:37.641
and that XML file will contain what are known as servlet mappings.

67
00:04:37.641 --> 00:04:41.505
Those mappings will tell the container how to map

68
00:04:41.505 --> 00:04:45.691
this incoming URL on to our servlet.

69
00:04:45.691 --> 00:04:48.651
The servlet mappings look like this.

70
00:04:48.651 --> 00:04:50.691
Notice that there are two main parts to this.

71
00:04:50.691 --> 00:04:54.651
There's a servlet section and a servlet-mapping section.

72
00:04:54.651 --> 00:05:00.661
In the servlet section, you have the fully-qualified class name of our servlet.

73
00:05:00.661 --> 00:05:04.631
The servlet also has a name, in this case Home,

74
00:05:04.631 --> 00:05:09.671
and that name is used by the mapping sections.

75
00:05:09.671 --> 00:05:13.681
The servlet mappings use the name we give the servlet,

76
00:05:13.681 --> 00:05:17.671
map that name on to a URL.

77
00:05:17.671 --> 00:05:20.721
In fact, it maps the name on to a URL pattern,

78
00:05:20.721 --> 00:05:22.671
and the pattern can either be /something,

79
00:05:22.671 --> 00:05:26.235
so in this /bar, or it can be *.

80
00:05:26.235 --> 00:05:33.631
something, where map a file extension on to the actual servlet itself.

81
00:05:33.631 --> 00:05:37.721
What this XML provides in this case is that any URL that ends with /bar,

82
00:05:37.721 --> 00:05:43.711
or any URL that ends with * .abc will be mapped on to our home servlet,

83
00:05:43.711 --> 00:05:48.498
and what that means is that com.mantiso .OurServlet class will be loaded,

84
00:05:48.498 --> 00:05:51.661
and its service method will be called.

85
00:05:51.661 --> 00:05:56.681
We are now in a position to add extra servlet mappings to our application.

86
00:05:56.681 --> 00:06:00.651
We already have the mapping to /home, and we'll leave that in place,

87
00:06:00.651 --> 00:06:04.661
and go add the extra mappings to the web.xml file.

88
00:06:04.661 --> 00:06:06.721
So in here we add a servlet entry.

89
00:06:06.721 --> 00:06:10.721
The servlet will have a name, in our case we'll just call that Simple,

90
00:06:10.721 --> 00:06:13.681
and we'll give the servlet a servlet class,

91
00:06:13.681 --> 00:06:19.721
and that's going to be com.mantiso .SimpleServlet.

92
00:06:19.721 --> 00:06:25.641
Once we have the servlet in place, we need to add a servlet mapping,

93
00:06:25.641 --> 00:06:29.641
and this maps from some URL to some servlet.

94
00:06:29.641 --> 00:06:32.671
We do the mapping via the name, which in this case again is Simple,

95
00:06:32.671 --> 00:06:37.661
and provide the URL pattern of * .do.

96
00:06:37.661 --> 00:06:41.671
Once we have that, we can go back to our Maven setup,

97
00:06:41.671 --> 00:06:49.661
go to Tomcat redeploy, and redeploy the application.

98
00:06:49.661 --> 00:06:51.721
We can now go and find Chrome.

99
00:06:51.721 --> 00:06:58.651
And again, from Chrome, we can browse to localhost:8080/simple/home.

100
00:06:58.651 --> 00:07:00.681
In that case it's back to Hello World,

101
00:07:00.681 --> 00:07:03.691
and we can browse to anything that ends with .do,

102
00:07:03.691 --> 00:07:06.641
and that should also hit our servlet.

103
00:07:06.641 --> 00:07:10.641
So let's do kevin.do, and there we go, hit the servlet,

104
00:07:10.641 --> 00:07:12.651
and we see the text Hello World.

105
00:07:12.651 --> 00:07:14.631
So we've seen in the slides that we can add

106
00:07:14.631 --> 00:07:17.691
multiple mappings in the web.xml file.

107
00:07:17.691 --> 00:07:21.711
We can also do the same thing by using the annotations on the servlet.

108
00:07:21.711 --> 00:07:28.691
If we go back into the project and remove the mappings from the web.xml file,

109
00:07:28.691 --> 00:07:32.631
if we redeploy just to prove that this no longer works,

110
00:07:32.631 --> 00:07:35.681
leave that run, go back into the browser,

111
00:07:35.681 --> 00:07:41.691
and refresh, then we can't hit the extension as the .do mapping is now gone.

112
00:07:41.691 --> 00:07:43.711
So back into the project.

113
00:07:43.711 --> 00:07:49.721
If we go back to the servlet, currently we have a single mapping for the servlet,

114
00:07:49.721 --> 00:07:50.575
just /home.

115
00:07:50.575 --> 00:07:55.701
What we can do here is add a urlPatterns entry to the annotation.

116
00:07:55.701 --> 00:07:57.671
This takes a collection of mappings.

117
00:07:57.671 --> 00:08:04.691
We can say /home, and then if we add the * .do mapping to this,

118
00:08:04.691 --> 00:08:11.721
and again we can redeploy, you just give that a few seconds.

119
00:08:11.721 --> 00:08:15.974
Go back to the browser and refresh, and sure enough,

120
00:08:15.974 --> 00:08:18.691
that mapping now works and that URL now works,

121
00:08:18.691 --> 00:08:22.721
and we can get back to the .do extension.

122
00:08:22.721 --> 00:08:25.711
So the obvious question I guess is which one to use?

123
00:08:25.711 --> 00:08:29.681
Do you use the annotation or use the web.xml file?

124
00:08:29.681 --> 00:08:33.641
If you're migrating an application and you already have the web.xml file,

125
00:08:33.641 --> 00:08:35.681
it's perfectly fine to leave that in place.

126
00:08:35.681 --> 00:08:40.651
If you're writing a brand new Servlet 3.0 application, then you have the choice.

127
00:08:40.651 --> 00:08:42.721
I think the key thing is to use one or the other.

128
00:08:42.721 --> 00:08:50.000
Either use the annotations or use the web.xml file, but try not to mix and match.

