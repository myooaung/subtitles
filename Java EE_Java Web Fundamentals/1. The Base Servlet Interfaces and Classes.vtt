WEBVTT
1
00:00:00.000 --> 00:00:05.010
This is Kevin Jones of Pluralsight.

2
00:00:05.010 --> 00:00:10.070
Welcome to the Writing Servlets chapter of the Java Web Fundamentals class.

3
00:00:10.070 --> 00:00:16.020
A servlet is the fundamental component of a web application written in Java.

4
00:00:16.020 --> 00:00:19.010
In this class, we'll explain how to write servlets,

5
00:00:19.010 --> 00:00:21.030
we'll take a look at the servlet interface,

6
00:00:21.030 --> 00:00:28.030
at the GenericServlet class, and at the HttpServlet class.

7
00:00:28.030 --> 00:00:32.030
Every servlet implements a base interface called servlet.

8
00:00:32.030 --> 00:00:36.000
This interface describes a few things about the servlet.

9
00:00:36.000 --> 00:00:39.070
It describes in particular how to configure the servlet,

10
00:00:39.070 --> 00:00:43.030
and it also describes the servlet's lifecycle.

11
00:00:43.030 --> 00:00:46.010
The lifecycle consists of three things.

12
00:00:46.010 --> 00:00:50.020
We need to initialize the servlet, we need to destroy the servlet,

13
00:00:50.020 --> 00:00:54.030
and in between the servlet has a service method.

14
00:00:54.030 --> 00:00:58.040
As we will see, it's this service method that does all the work of the servlet.

15
00:00:58.040 --> 00:01:02.040
And that's where we'll be spending most of our time in this chapter.

16
00:01:02.040 --> 00:01:05.070
Notice that the service method takes two parameters,

17
00:01:05.070 --> 00:01:09.000
a ServletRequest object and a ServletResponse object.

18
00:01:09.000 --> 00:01:13.060
The ServletRequest object will contain details of the incoming request,

19
00:01:13.060 --> 00:01:17.070
such as request headers and any request parameters,

20
00:01:17.070 --> 00:01:22.030
and the ServletResponse object we use to generate the outgoing response.

21
00:01:22.030 --> 00:01:26.060
Down this we'll send any data that the client needs to see.

22
00:01:26.060 --> 00:01:30.426
Notice that these two parameters are protocol-agnostic, i.e.

23
00:01:30.426 --> 00:01:35.000
they're not tied to HTTP or FTP or any other protocol.

24
00:01:35.000 --> 00:01:38.000
Servlets are typically used for HTTP.

25
00:01:38.000 --> 00:01:40.010
When the interface was first designed,

26
00:01:40.010 --> 00:01:44.232
the idea was that a servlet could be used for any type of service,

27
00:01:44.232 --> 00:01:46.010
again, such as FTP.

28
00:01:46.010 --> 00:01:50.060
The other two methods on the interface, getServletConfig and getServletInfo,

29
00:01:50.060 --> 00:01:54.010
these are there to provide configuration information for the servlet.

30
00:01:54.010 --> 00:01:58.321
This configuration information is passed through the web.xml file and

31
00:01:58.321 --> 00:02:01.030
could be things such as the database connection string,

32
00:02:01.030 --> 00:02:05.070
or maybe user information that the servlet uses for security.

33
00:02:05.070 --> 00:02:07.654
GetServletInfo just provides a string that could be,

34
00:02:07.654 --> 00:02:13.050
for example, the name of the servlet or maybe a copyright notice.

35
00:02:13.050 --> 00:02:16.045
While we could implement the servlet interface directly ourselves,

36
00:02:16.045 --> 00:02:19.000
we tend not to do that.

37
00:02:19.000 --> 00:02:22.030
The library provides a couple of helper classes,

38
00:02:22.030 --> 00:02:28.040
the first of which is GenericServlet.

39
00:02:28.040 --> 00:02:32.060
As I've just said, the servlets were designed to be protocol-agnostic,

40
00:02:32.060 --> 00:02:35.080
and GenericServlet is another step in that direction.

41
00:02:35.080 --> 00:02:40.010
There's no protocol-specific implementation in this class at all.

42
00:02:40.010 --> 00:02:41.745
It's just there's an abstract base class that

43
00:02:41.745 --> 00:02:45.070
protocol-specific classes can derive from.

44
00:02:45.070 --> 00:02:52.050
The protocol-specific class we care about is HttpServlet.

45
00:02:52.050 --> 00:02:55.030
So HttpServlet extends GenericServlet.

46
00:02:55.030 --> 00:02:58.080
The HttpServlet class provides us with several helper methods

47
00:02:58.080 --> 00:03:01.070
to make it easier for us to work with HTTP.

48
00:03:01.070 --> 00:03:04.520
For example, there's a doGet method, a doPost method,

49
00:03:04.520 --> 00:03:08.010
a doPut method, that correspond to the HTTP verbs.

50
00:03:08.010 --> 00:03:12.030
The way the HttpServlet class works is it provides a

51
00:03:12.030 --> 00:03:15.040
specific implementation of the service method.

52
00:03:15.040 --> 00:03:16.248
As you can see,

53
00:03:16.248 --> 00:03:20.050
this method takes a ServletRequest object and a ServletResponse object.

54
00:03:20.050 --> 00:03:26.050
These are in fact HttpServletRequest and HttpServletResponse.

55
00:03:26.050 --> 00:03:32.060
The HttpServlet class casts the two incoming parameters to be the correct type,

56
00:03:32.060 --> 00:03:33.065
i.e.

57
00:03:33.065 --> 00:03:36.080
HttpServletRequest and HttpServletResponse.

58
00:03:36.080 --> 00:03:39.541
It then calls another service method that takes the

59
00:03:39.541 --> 00:03:42.010
parameters of the correct type.

60
00:03:42.010 --> 00:03:45.446
This service method looks inside the request object by

61
00:03:45.446 --> 00:03:48.000
calling a helper method called getMethod.

62
00:03:48.000 --> 00:03:50.080
This returns the current HTTP method,

63
00:03:50.080 --> 00:03:54.070
which will typically be GET or POST from a web browser.

64
00:03:54.070 --> 00:03:58.020
Depending on the method it gets back, whether it's GET or POST,

65
00:03:58.020 --> 00:04:05.010
it then calls a further helper method called doGet or doPost.

66
00:04:05.010 --> 00:04:07.070
The code for these methods is not shown here,

67
00:04:07.070 --> 00:04:10.347
but the default implementation of these methods simply

68
00:04:10.347 --> 00:04:13.040
returns an error code back to the browser.

69
00:04:13.040 --> 00:04:17.000
The error code return is dependent on the version of HTTP,

70
00:04:17.000 --> 00:04:19.080
whether we are running 1.0 or 1.1.

71
00:04:19.080 --> 00:04:23.030
If the protocol being used is HTTP 1.1,

72
00:04:23.030 --> 00:04:32.000
then these methods return an error code of Method Not Allowed. Otherwise, they return an error code of Bad Request.

