WEBVTT
1
00:00:00.243 --> 00:00:04.283
Now that we've seen a simple example of an async servlet and how that works,

2
00:00:04.283 --> 00:00:06.943
we can now take a look at a more complex,

3
00:00:06.943 --> 00:00:08.203
more realistic example.

4
00:00:08.203 --> 00:00:09.572
In the previous example,

5
00:00:09.572 --> 00:00:13.203
we were simply offloading work to another thread

6
00:00:13.203 --> 00:00:15.263
managed by the servlet container.

7
00:00:15.263 --> 00:00:20.223
This probably doesn't help our application scale.

8
00:00:20.223 --> 00:00:25.263
So here we're going to see a way of doing that.

9
00:00:25.263 --> 00:00:28.243
So first let's create a new package called complex,

10
00:00:28.243 --> 00:00:32.213
as this is a more complex example.

11
00:00:32.213 --> 00:00:33.106
And in this package,

12
00:00:33.106 --> 00:00:35.723
we create a new servlet called

13
00:00:35.723 --> 00:00:40.223
TransferDataAsyncServlet that again will support async.

14
00:00:40.223 --> 00:00:41.263
Add a doGet method,

15
00:00:41.263 --> 00:00:46.223
and inside here we'll start an async request and set a timeout.

16
00:00:46.223 --> 00:00:51.253
We will set the timeout to be 15 minutes in this case.

17
00:00:51.253 --> 00:00:54.273
So the idea here, which we will simulate,

18
00:00:54.273 --> 00:00:57.253
is that we are going to download large files.

19
00:00:57.253 --> 00:01:00.243
And rather than type a container thread to do this,

20
00:01:00.243 --> 00:01:04.253
we create our own threads to handle this long running process.

21
00:01:04.253 --> 00:01:07.273
To do this, we create our own thread pool,

22
00:01:07.273 --> 00:01:09.283
then manage to download through that thread pool.

23
00:01:09.283 --> 00:01:13.223
So to create our thread pool, we're looking in Java,

24
00:01:13.223 --> 00:01:15.283
which will create an executer to do that.

25
00:01:15.283 --> 00:01:19.233
We'll create the executer when the application is first loaded.

26
00:01:19.233 --> 00:01:25.213
And of course the ideal way to do that is to create a ServletContextListener.

27
00:01:25.213 --> 00:01:28.203
So let's create a class called ClientTransfer,

28
00:01:28.203 --> 00:01:33.243
and have this class implement ServletContextListener.

29
00:01:33.243 --> 00:01:33.913
In here,

30
00:01:33.913 --> 00:01:39.243
we will create the executer and spin up the threads that the executer will use.

31
00:01:39.243 --> 00:01:43.263
So the idea is we only want to do work when necessary,

32
00:01:43.263 --> 00:01:47.193
and then block these threads when there's no work to do.

33
00:01:47.193 --> 00:01:49.243
So for the faster download we'll do that work,

34
00:01:49.243 --> 00:01:54.213
if not, the executer will simply block waiting from all work to become available.

35
00:01:54.213 --> 00:01:56.253
We'll set a limit on the number of threads.

36
00:01:56.253 --> 00:02:02.223
So in this class, create a constant called Client_Thread_Count and set it to 10,

37
00:02:02.223 --> 00:02:04.283
so we are only going to use 10 threads.

38
00:02:04.283 --> 00:02:09.203
We can then define the executer that we'll use,

39
00:02:09.203 --> 00:02:13.253
and then finally create a blocking queue.

40
00:02:13.253 --> 00:02:17.233
This blocking queue will hold the work that has to be done,

41
00:02:17.233 --> 00:02:22.253
and that work will be represented by a client object.

42
00:02:22.253 --> 00:02:25.223
A blocking queue lets us take items from the head of the queue,

43
00:02:25.223 --> 00:02:26.273
if there are any,

44
00:02:26.273 --> 00:02:31.193
but blocks if we try and take anything from the queue and the queue is empty,

45
00:02:31.193 --> 00:02:33.283
which is exactly the behavior that we need.

46
00:02:33.283 --> 00:02:36.283
So we create an instance of blocking queue that holds client instances,

47
00:02:36.283 --> 00:02:41.193
and create the client class with this, just to keep the compiler happy.

48
00:02:41.193 --> 00:02:45.223
And we'll define that class as we go through the rest of this example.

49
00:02:45.223 --> 00:02:50.082
We also need a static method on the listener that we

50
00:02:50.082 --> 00:02:53.193
use to add clients to this queue.

51
00:02:53.193 --> 00:02:54.193
As we'll see in a moment,

52
00:02:54.193 --> 00:02:57.243
each client will be associated with an async context

53
00:02:57.243 --> 00:03:00.233
and do its work through that context.

54
00:03:00.233 --> 00:03:04.273
Each client will be created in the servlet when a request comes in,

55
00:03:04.273 --> 00:03:08.203
and the servlet will need to add that client to this queue.

56
00:03:08.203 --> 00:03:12.213
So the executer can pick up my client and put it to work.

57
00:03:12.213 --> 00:03:15.203
And we'll use the static method to do that.

58
00:03:15.203 --> 00:03:18.223
We now need to add the contextInitialized method.

59
00:03:18.223 --> 00:03:21.273
In here we are going to set up the executer.

60
00:03:21.273 --> 00:03:24.213
Remember, we set the thread limit to 10.

61
00:03:24.213 --> 00:03:28.883
So we created 10 threads and have them call a helper

62
00:03:28.883 --> 00:03:33.283
method named sendDataToClient, which we'll create now.

63
00:03:33.283 --> 00:03:35.021
Before we do that,

64
00:03:35.021 --> 00:03:40.253
we need another helper method that retrieves the client from the blocking queue.

65
00:03:40.253 --> 00:03:46.193
So let's create a method called getClient that returns a client.

66
00:03:46.193 --> 00:03:48.649
Remember that the take call on the blocking queue returns

67
00:03:48.649 --> 00:03:52.213
and item or blocks if the queue is empty.

68
00:03:52.213 --> 00:03:55.213
So this is the behavior of this getClient call.

69
00:03:55.213 --> 00:03:59.203
We can now fill in some of the sendDataToClient method.

70
00:03:59.203 --> 00:04:02.213
Remember, this is called on the executer thread,

71
00:04:02.213 --> 00:04:06.223
and its job is to service clients on that thread.

72
00:04:06.223 --> 00:04:09.193
In here, we loop forever.

73
00:04:09.193 --> 00:04:12.213
The first thing inside the loop is to call getClient,

74
00:04:12.213 --> 00:04:15.362
and remember, this will either return a client so we can process it,

75
00:04:15.362 --> 00:04:18.273
or block if there's no client available.

76
00:04:18.273 --> 00:04:23.233
Previously, we said that a client would be associated with an async context.

77
00:04:23.233 --> 00:04:28.233
So if there is a client, then we get its async context.

78
00:04:28.233 --> 00:04:29.223
And add that method here.

79
00:04:29.223 --> 00:04:34.009
We'll fill in the details later and get the servlet

80
00:04:34.009 --> 00:04:36.253
response object from that context.

81
00:04:36.253 --> 00:04:39.273
We set the response type, plain text in this case,

82
00:04:39.273 --> 00:04:43.193
as we are only simulating file downloads.

83
00:04:43.193 --> 00:04:49.253
Then we call two more helpers, getDataToSend and sendDataChunk.

84
00:04:49.253 --> 00:04:54.193
The first call simulates us loading a file to send to the browser,

85
00:04:54.193 --> 00:04:58.263
and the second simulates us sending that file in chunks.

86
00:04:58.263 --> 00:05:02.233
In the getDataToSend method, we simulate the client working,

87
00:05:02.233 --> 00:05:07.213
so call a doWork method on the client.

88
00:05:07.213 --> 00:05:12.213
Again we'll add an empty method here and implement it in a moment.

89
00:05:12.213 --> 00:05:15.273
The sendDataChunk method is where most of the work happens.

90
00:05:15.273 --> 00:05:20.193
In here, we add a try catch block to catch any errors.

91
00:05:20.193 --> 00:05:25.233
We then take the passed-in response object, and from that get the writer.

92
00:05:25.233 --> 00:05:27.273
Remember, we are only simulating output here,

93
00:05:27.273 --> 00:05:30.253
so normally we'd be sending raw data bytes.

94
00:05:30.253 --> 00:05:34.203
But in this example, we're just sending back text.

95
00:05:34.203 --> 00:05:36.253
Remember, we are only simulating output here,

96
00:05:36.253 --> 00:05:39.233
so normally we would be sending raw data bytes,

97
00:05:39.233 --> 00:05:44.203
but in this example we are just sending back text.

98
00:05:44.203 --> 00:05:47.203
So the client only sends back data in chunks,

99
00:05:47.203 --> 00:05:49.213
so we need to know when it's finished.

100
00:05:49.213 --> 00:05:53.233
To know that, we add an isWorkDone method to the client,

101
00:05:53.233 --> 00:05:55.753
and this method which is a Boolean.

102
00:05:55.753 --> 00:05:59.233
If it returns true, then the client is finished sending its data,

103
00:05:59.233 --> 00:06:02.283
if it returns false, there's more work to do.

104
00:06:02.283 --> 00:06:09.203
In the first case, we're done and we call complete on the async context.

105
00:06:09.203 --> 00:06:13.213
If the client hasn't finished, then we add it back to the queue.

106
00:06:13.213 --> 00:06:16.461
This means that as the executors thread run and try

107
00:06:16.461 --> 00:06:18.263
to take a client from the queue,

108
00:06:18.263 --> 00:06:21.213
but at some point they will get back to this client,

109
00:06:21.213 --> 00:06:25.263
and it will send this next chunk of data.

110
00:06:25.263 --> 00:06:27.283
Inside the catch we don't report the error,

111
00:06:27.283 --> 00:06:31.263
we just mark the async context as being complete.

112
00:06:31.263 --> 00:06:33.263
So let's go over this.

113
00:06:33.263 --> 00:06:37.283
We have an executer with 10 threads, we have a blocking queue that holds clients,

114
00:06:37.283 --> 00:06:41.213
and a method to add clients to that queue.

115
00:06:41.213 --> 00:06:44.273
We initialize the executer in the contextInitialize method.

116
00:06:44.273 --> 00:06:48.203
We send data to clients,

117
00:06:48.203 --> 00:06:51.233
sendDataToClients gets the clients from the blocking queue,

118
00:06:51.233 --> 00:06:56.223
uses that client's async context, and then calls a sendDataChunk.

119
00:06:56.223 --> 00:07:02.243
SendDataChunk sends a chunk of data, then asks the client if it is complete.

120
00:07:02.243 --> 00:07:05.243
If it is, then it calls complete on the async context,

121
00:07:05.243 --> 00:07:06.236
if it's not,

122
00:07:06.236 --> 00:07:13.273
then it puts the client back into the queue to be processed further later.

123
00:07:13.273 --> 00:07:16.273
Okay, so let's finish implementing the client.

124
00:07:16.273 --> 00:07:20.243
In here, let's add a constructor that takes an async context,

125
00:07:20.243 --> 00:07:22.233
and save that in a local variable,

126
00:07:22.233 --> 00:07:25.253
and also a variable so the client knows how many

127
00:07:25.253 --> 00:07:30.193
bytes have been sent previously.

128
00:07:30.193 --> 00:07:35.253
Let's implement the getAsyncContext method to return the async context.

129
00:07:35.253 --> 00:07:39.273
The getBytesSent method returns the number of bytes sent,

130
00:07:39.273 --> 00:07:44.278
the isWorkDone method returns true if more than 100 bytes have been sent,

131
00:07:44.278 --> 00:07:45.273
and false otherwise.

132
00:07:45.273 --> 00:07:50.253
Remember, this is a simulation.

133
00:07:50.253 --> 00:07:51.861
Finally, let's implement doWork.

134
00:07:51.861 --> 00:07:54.273
This is going to be simple.

135
00:07:54.273 --> 00:07:56.793
We'll sleep the thread for 2 seconds,

136
00:07:56.793 --> 00:08:00.273
and then add 10 for the count of bytes sent.

137
00:08:00.273 --> 00:08:07.203
That Thread.sleep simulates our client doing a lot of work.

138
00:08:07.203 --> 00:08:09.213
Let's now finish off the servlet.

139
00:08:09.213 --> 00:08:11.213
In here, the request comes in.

140
00:08:11.213 --> 00:08:16.563
We're going to create a client and call a static

141
00:08:16.563 --> 00:08:18.233
ClientTransfer.addClient method.

142
00:08:18.233 --> 00:08:20.038
When we create the client,

143
00:08:20.038 --> 00:08:25.193
we pass the new async context so that this client can work asynchronously.

144
00:08:25.193 --> 00:08:30.193
This request thread then hands it back to the servlet container.

145
00:08:30.193 --> 00:08:32.283
We're going to call this async code from JavaScript,

146
00:08:32.283 --> 00:08:36.213
so we need a page to load that JavaScript and execute it.

147
00:08:36.213 --> 00:08:43.203
To do that, we add a new ControllerServlet and have it dispatch to a JSP page.

148
00:08:43.203 --> 00:08:46.243
We're going to call this async code from JavaScript,

149
00:08:46.243 --> 00:08:49.273
so we need a page to load that JavaScript and execute it.

150
00:08:49.273 --> 00:08:56.253
To do that, we add a new ControllerServlet and have it dispatched to a JSP page.

151
00:08:56.253 --> 00:08:59.835
That JSP page has a button within JavaScript that

152
00:08:59.835 --> 00:09:03.263
executes when we click on that button.

153
00:09:03.263 --> 00:09:08.203
This JavaScript sends a GET request to the download servlet,

154
00:09:08.203 --> 00:09:11.283
and then writes a log message to the browser's console window.

155
00:09:11.283 --> 00:09:15.273
If we deploy and use the browser to go to the ControllerServlet,

156
00:09:15.273 --> 00:09:19.253
we can now open the Network tab in Chrome's Developer Tools,

157
00:09:19.253 --> 00:09:21.263
and then we can click on the Get button,

158
00:09:21.263 --> 00:09:26.223
and we can see the call is pending inside the Network tab.

159
00:09:26.223 --> 00:09:30.203
It will be pending until all the data has been retrieved.

160
00:09:30.203 --> 00:09:31.024
When it completes,

161
00:09:31.024 --> 00:09:38.243
we can see the messages in the console that shows the data arriving in chunks.

162
00:09:38.243 --> 00:09:41.273
And this would have taken a long time, upwards of 10 seconds,

163
00:09:41.273 --> 00:09:50.000
but during this time, we're not holding onto one of the container's threads, but instead we're executing a download on a background thread.

