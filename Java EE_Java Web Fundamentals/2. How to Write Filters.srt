1
00:00:00,000 --> 00:00:01,847
To write filters,

2
00:00:01,847 --> 00:00:07,299
we implement javax.servlet .Filter and we implement the doFilter method.

3
00:00:07,299 --> 00:00:10,349
And the doFilter method is passed the request object,

4
00:00:10,349 --> 00:00:15,309
the response object, and a filter chain.

5
00:00:15,309 --> 00:00:20,349
To pass the request down the chain, we call chain.doFilter.

6
00:00:20,349 --> 00:00:23,269
Filters in many ways act like servlets,

7
00:00:23,269 --> 00:00:26,326
so from within the filter we could dispatch the request with different resource,

8
00:00:26,326 --> 00:00:28,319
we could call a different servlet,

9
00:00:28,319 --> 00:00:30,309
or within the filter we may return immediately

10
00:00:30,309 --> 00:00:32,329
without calling doFilter on the chain,

11
00:00:32,329 --> 00:00:36,269
and so not forwarding the request further down the chain.

12
00:00:36,269 --> 00:00:39,349
We configure filters in a web.xml file.

13
00:00:39,349 --> 00:00:42,349
So there's a filter entry, we give the filter a name,

14
00:00:42,349 --> 00:00:48,299
we specify the class of the filter, and filters have initialization parameters,

15
00:00:48,299 --> 00:00:51,801
and we specify those with the init-param element inside

16
00:00:51,801 --> 00:00:55,319
the filter element in the web.xml file.

17
00:00:55,319 --> 00:01:00,309
Filters, like servlets, also have mappings associated with them.

18
00:01:00,309 --> 00:01:02,329
So I can associate a filter with a given resource,

19
00:01:02,329 --> 00:01:07,269
such as * .jpg say, or I can associate a filter with any resource,

20
00:01:07,269 --> 00:01:09,289
which we do here with /*.

21
00:01:09,289 --> 00:01:15,309
So this filter here, when it was registered, will be called for any request.

22
00:01:15,309 --> 00:01:19,269
Notice we can also associate a filter with a specific servlet if we need to

23
00:01:19,269 --> 00:01:23,339
by using the servlet-name entry inside the filter mapping.

24
00:01:23,339 --> 00:01:26,339
So filters have an initialization method,

25
00:01:26,339 --> 00:01:30,309
and this is called once when the filter is first loaded.

26
00:01:30,309 --> 00:01:33,279
In this case it passed a reference to a FilterConfig,

27
00:01:33,279 --> 00:01:35,319
and from here we can get the ServletContext.

28
00:01:35,319 --> 00:01:39,329
So if we need to, for example, we can get context parameters,

29
00:01:39,329 --> 00:01:43,299
and notice here we can call getInitParameter,

30
00:01:43,299 --> 00:01:48,269
and this gives us access to the filter's initialization parameters.

31
00:01:48,269 --> 00:01:49,329
Inside the filter itself,

32
00:01:49,329 --> 00:01:52,796
the doFilter method is called for every request that

33
00:01:52,796 --> 00:01:55,329
this filter is set up to handle.

34
00:01:55,329 --> 00:01:58,309
Now as we saw, the filter is passed the request object,

35
00:01:58,309 --> 00:02:01,279
the response object, and the chain object.

36
00:02:01,279 --> 00:02:04,319
The request and the response object are of type

37
00:02:04,319 --> 00:02:06,289
ServletRequest and ServletResponse,

38
00:02:06,289 --> 00:02:08,807
but typically we can cast those to be an

39
00:02:08,807 --> 00:02:11,299
HttpServletRequest and an HttpServletResponse.

40
00:02:11,299 --> 00:02:14,299
Within the filter, we can preprocess the request,

41
00:02:14,299 --> 00:02:17,339
we can do some work on the request before we pass it on.

42
00:02:17,339 --> 00:02:21,259
We could also wrap up the request and/or wrap up the response,

43
00:02:21,259 --> 00:02:23,279
and we'll see how we do that a little later.

44
00:02:23,279 --> 00:02:25,309
Once we've processed the request ourselves,

45
00:02:25,309 --> 00:02:30,309
we can call chain.doFilter, then if we need to when the call comes back to us,

46
00:02:30,309 --> 00:02:33,339
we could post process the response.

47
00:02:33,339 --> 00:02:35,279
So we can wrap up the request,

48
00:02:35,279 --> 00:02:38,509
and you might want to wrap up the request so that you can

49
00:02:38,509 --> 00:02:40,339
monitor calls on the request object.

50
00:02:40,339 --> 00:02:46,279
So to do that, we extend a class called HttpServletRequestWrapper.

51
00:02:46,279 --> 00:02:48,339
Then when we chain the filter call,

52
00:02:48,339 --> 00:02:51,299
rather than passing on the original request object,

53
00:02:51,299 --> 00:02:55,319
we pass on the wrapper, and again we'll see some examples of this in a moment.

54
00:02:55,319 --> 00:03:01,000
So let's take a look at how we write a simple filter. We'll take a look at a logging filter in the code.

