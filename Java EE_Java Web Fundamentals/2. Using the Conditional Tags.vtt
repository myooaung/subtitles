WEBVTT
1
00:00:01.788 --> 00:00:02.091
So,

2
00:00:02.091 --> 00:00:04.818
the core tags provide a set of core functionality

3
00:00:04.818 --> 00:00:07.828
for use in any JavaServer Page.

4
00:00:07.828 --> 00:00:10.818
You can break these tags down to several categories,

5
00:00:10.818 --> 00:00:12.758
the first of which we'll take a look at,

6
00:00:12.758 --> 00:00:15.768
the conditional tags.

7
00:00:15.768 --> 00:00:18.788
So this is the home page of the application,

8
00:00:18.788 --> 00:00:22.768
and on this page we'll provide a welcome message for the user.

9
00:00:22.768 --> 00:00:23.889
If you remember,

10
00:00:23.889 --> 00:00:27.310
we get that welcome message by adding the user inside the

11
00:00:27.310 --> 00:00:30.758
doGet call in the ControllerServlet.

12
00:00:30.758 --> 00:00:31.798
Suppose there was no user.

13
00:00:31.798 --> 00:00:37.768
If we take this code out and then redeploy the application,

14
00:00:37.768 --> 00:00:41.748
if we browse back to the page and refresh,

15
00:00:41.748 --> 00:00:44.758
we'll see the page simply says Welcome.

16
00:00:44.758 --> 00:00:47.461
What we'd like to do is to be able to place a welcome

17
00:00:47.461 --> 00:00:49.818
message when we have an anonymous user.

18
00:00:49.818 --> 00:00:52.808
So in that case, we need to detect if there is a user,

19
00:00:52.808 --> 00:00:57.808
and if so welcome that user, otherwise maybe just welcome the anonymous user.

20
00:00:57.808 --> 00:01:02.892
We can do that from within the page itself by using one of the conditional tags,

21
00:01:02.892 --> 00:01:03.798
the if tag.

22
00:01:03.798 --> 00:01:07.362
So what we need to do here is to detect that there is a user,

23
00:01:07.362 --> 00:01:10.768
and if so display this welcome message, and if there's not,

24
00:01:10.768 --> 00:01:13.788
display another welcome message just welcoming the anonymous user.

25
00:01:13.788 --> 00:01:17.486
So the if tag looks something like this.

26
00:01:17.486 --> 00:01:22.778
We say less than c:if, and there's a test.

27
00:01:22.778 --> 00:01:26.674
And in this test, we'd like to see if the user exists inside the scope,

28
00:01:26.674 --> 00:01:33.828
and if so display a welcome message.

29
00:01:33.828 --> 00:01:38.828
So for that to work inside the test, we add an expression.

30
00:01:38.828 --> 00:01:43.805
Of this expression, we'd like to see if the user variable is valid,

31
00:01:43.805 --> 00:01:49.798
so the user is an object and it has a name property.

32
00:01:49.798 --> 00:01:54.058
The expression language has an empty operator that we can apply to properties,

33
00:01:54.058 --> 00:01:58.167
and this will return true or false depending on the value of that property.

34
00:01:58.167 --> 00:02:02.808
So for example if it's a string and the string is empty, it'll return false.

35
00:02:02.808 --> 00:02:04.614
If it's an object and the object doesn't exist,

36
00:02:04.614 --> 00:02:07.828
it'll return false, otherwise the thing returns true.

37
00:02:07.828 --> 00:02:15.778
So we can say simply if empty user.name, or in our case if not empty user.name.

38
00:02:15.778 --> 00:02:19.778
So if the user exists and the name exists, empty will return false.

39
00:02:19.778 --> 00:02:21.818
Putting the not in front of it will turn that into a true,

40
00:02:21.818 --> 00:02:24.449
and we should still see the message Welcome

41
00:02:24.449 --> 00:02:27.748
username if the user was in the scope.

42
00:02:27.748 --> 00:02:29.394
We can also do the opposite to welcome the anonymous user,

43
00:02:29.394 --> 00:02:34.798
so I can just copy these three lines, paste it into the code,

44
00:02:34.798 --> 00:02:43.808
and then say if empty user.name, and simply say Welcome whoever you are.

45
00:02:43.808 --> 00:02:48.838
Again if we deploy this and go to the browser and refresh the page,

46
00:02:48.838 --> 00:02:51.768
we get Welcome whoever you are.

47
00:02:51.768 --> 00:02:57.778
If I go back into the code, go back to the controller,

48
00:02:57.778 --> 00:02:59.838
and comment those lines,

49
00:02:59.838 --> 00:03:03.748
so the user is now being set and redeploy the application,

50
00:03:03.748 --> 00:03:05.895
go back into the browser, and then refresh,

51
00:03:05.895 --> 00:03:09.768
then we get still get Welcome Kevin.

52
00:03:09.768 --> 00:03:13.828
Now obviously seeing both ifs here is slightly disconcerting.

53
00:03:13.828 --> 00:03:17.521
We'd like to use a construct similar to if-else,

54
00:03:17.521 --> 00:03:24.748
and we'll see how we do that in a moment.

55
00:03:24.748 --> 00:03:28.118
So the if tag is useful when we have a single thing we want

56
00:03:28.118 --> 00:03:31.748
to check on a single piece of output.

57
00:03:31.748 --> 00:03:32.828
As soon as we end up with multiple ifs,

58
00:03:32.828 --> 00:03:37.818
then the code looks slightly odd and becomes much harder to maintain.

59
00:03:37.818 --> 00:03:46.838
To cope with those scenarios, we have the choose, when, otherwise set of tags.

60
00:03:46.838 --> 00:03:50.838
These tags are similar to the if tag in that they have a test.

61
00:03:50.838 --> 00:03:54.778
If the test is true, then the body of the tag is executed.

62
00:03:54.778 --> 00:03:57.828
If the test is false, then nothing happens.

63
00:03:57.828 --> 00:04:00.828
The tags are a set of parent-child tags,

64
00:04:00.828 --> 00:04:04.808
so the parent tag is choose, and there are nested when tags,

65
00:04:04.808 --> 00:04:07.768
and there's also a nested otherwise tag.

66
00:04:07.768 --> 00:04:09.768
This is similar to a switch statement in Java.

67
00:04:09.768 --> 00:04:11.768
So the tags would work something like this.

68
00:04:11.768 --> 00:04:21.828
We'd say less than c:choose, and inside here we'd have c:when.

69
00:04:21.828 --> 00:04:23.333
Again when has a test,

70
00:04:23.333 --> 00:04:27.808
and the test is similar to the test we have below for the if tag,

71
00:04:27.808 --> 00:04:30.778
but now rather than having multiple if tags,

72
00:04:30.778 --> 00:04:37.768
I can simply have an otherwise tag.

73
00:04:37.768 --> 00:04:43.818
I can then get rid of the if tags,

74
00:04:43.818 --> 00:04:46.808
and we change the text slightly here to prove we're using a different tag,

75
00:04:46.808 --> 00:04:52.818
so we'll put an exclamation mark at the end of the output for both of these.

76
00:04:52.818 --> 00:04:57.647
And again if I redeploy, go to the browser and refresh,

77
00:04:57.647 --> 00:04:59.768
we should see similar output.

78
00:04:59.768 --> 00:05:02.748
So we see Welcome Kevin back in the controller.

79
00:05:02.748 --> 00:05:10.838
If I remove Kevin from the scope, and again redeploy and refresh,

80
00:05:10.838 --> 00:05:13.694
we see the same messages before, Welcome whoever you are,

81
00:05:13.694 --> 00:05:17.758
but this time with the extra exclamation mark at the end.

82
00:05:17.758 --> 00:05:21.980
So although we're not showing it here, with the choose tag,

83
00:05:21.980 --> 00:05:24.758
we can have multiple whens.

84
00:05:24.758 --> 00:05:27.748
Each when is tested in turn.

85
00:05:27.748 --> 00:05:31.818
The first one that succeeds gets to execute inside the tag.

86
00:05:31.818 --> 00:05:38.000
Anything else is then bypassed and no other code executes as part of that single choose tag.

