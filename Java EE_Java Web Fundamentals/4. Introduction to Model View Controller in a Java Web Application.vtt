WEBVTT
1
00:00:00.241 --> 00:00:04.021
So a common idiom when building web applications today is to

2
00:00:04.021 --> 00:00:06.241
use something called model view controller.

3
00:00:06.241 --> 00:00:09.211
In model view controller we have the model,

4
00:00:09.211 --> 00:00:12.201
which is the data we'd like to display, we have the view,

5
00:00:12.201 --> 00:00:13.261
which is the place where we display that data,

6
00:00:13.261 --> 00:00:16.231
and the view could be, for example, XML or JSON,

7
00:00:16.231 --> 00:00:19.231
or in our case HTML, and we have the controller,

8
00:00:19.231 --> 00:00:23.231
and the job of the controller is to bring the model and the view together.

9
00:00:23.231 --> 00:00:27.231
So the controller in a web application will receive incoming requests,

10
00:00:27.231 --> 00:00:29.221
generate some data, which will be the model,

11
00:00:29.221 --> 00:00:31.211
and then pass that data off to the view.

12
00:00:31.211 --> 00:00:35.211
In a Java web application when we're using a model view controller,

13
00:00:35.211 --> 00:00:38.191
the servlet will act as the controller.

14
00:00:38.191 --> 00:00:39.241
This is not always the case.

15
00:00:39.241 --> 00:00:42.191
There are other things that can act as the controller as well,

16
00:00:42.191 --> 00:00:45.281
in particular listeners, and we'll see these later.

17
00:00:45.281 --> 00:00:48.211
The JavaServer Page is used as the view.

18
00:00:48.211 --> 00:00:52.191
Now as we've seen the JavaServer Page is used to generate textual output,

19
00:00:52.191 --> 00:00:55.281
so again HTML or XML from the page.

20
00:00:55.281 --> 00:00:59.211
For the model, we'll typically use JavaBeans,

21
00:00:59.211 --> 00:01:02.281
or as I've labeled them here, plain old Java objects.

22
00:01:02.281 --> 00:01:06.231
When we build an application this way, it takes in a specific form,

23
00:01:06.231 --> 00:01:08.281
so all requests coming to a servlet,

24
00:01:08.281 --> 00:01:12.271
and that servlet passes those requests off to the JavaServer Page.

25
00:01:12.271 --> 00:01:14.271
The JavaServer Pages we use,

26
00:01:14.271 --> 00:01:17.922
we don't want to be publicly available to the browser as we

27
00:01:17.922 --> 00:01:20.201
want everything to come through the servlets.

28
00:01:20.201 --> 00:01:24.191
So we hide those pages away to stop people browsing to them directly.

29
00:01:24.191 --> 00:01:27.221
And we do that by placing those pages in the WEB-INF folder,

30
00:01:27.221 --> 00:01:32.281
and we'll see an example of that now.

31
00:01:32.281 --> 00:01:38.251
So when we build a web application using servlets in JavaServer Pages,

32
00:01:38.251 --> 00:01:40.251
all requests will come into the servlet,

33
00:01:40.251 --> 00:01:44.281
the servlet will create a bean, and use that bean to execute business logic,

34
00:01:44.281 --> 00:01:47.221
and then pass that bean off to a JavaServer Page,

35
00:01:47.221 --> 00:01:49.939
and the JavaServer Page will use the data inside the

36
00:01:49.939 --> 00:01:55.271
bean to display back to the user, creating some HTML on the way.

37
00:01:55.271 --> 00:01:57.251
Each of these things has to interact with the other.

38
00:01:57.251 --> 00:01:59.271
And it works something like this.

39
00:01:59.271 --> 00:02:02.251
So the client sends a request to the servlet,

40
00:02:02.251 --> 00:02:05.261
and it's the servlet as we know that acts as the controller.

41
00:02:05.261 --> 00:02:09.191
The first thing the servlet will do is to create the bean.

42
00:02:09.191 --> 00:02:11.440
And maybe the bean already exists and it's actually

43
00:02:11.440 --> 00:02:15.261
getting a bean from some local storage, maybe from a session for example,

44
00:02:15.261 --> 00:02:17.231
if not, it'll create a new instance of the bean.

45
00:02:17.231 --> 00:02:19.518
And this bean will almost certainly contain data that

46
00:02:19.518 --> 00:02:21.251
we're going to use for the page,

47
00:02:21.251 --> 00:02:24.477
and will probably also contain some business logic that we

48
00:02:24.477 --> 00:02:27.261
want to execute to actually get that data.

49
00:02:27.261 --> 00:02:29.231
So the servlet will call a method on the bean,

50
00:02:29.231 --> 00:02:32.281
and that method will go off and get the data it needs,

51
00:02:32.281 --> 00:02:36.221
execute the business logic around that data.

52
00:02:36.221 --> 00:02:39.384
The next thing the servlet needs to do is to now forward

53
00:02:39.384 --> 00:02:43.221
this incoming request to a JavaServer Page,

54
00:02:43.221 --> 00:02:46.221
and it does that using a technique called delegation.

55
00:02:46.221 --> 00:02:47.261
Within a web application,

56
00:02:47.261 --> 00:02:52.261
a servlet has access to an object called the RequestDispatcher.

57
00:02:52.261 --> 00:02:55.911
And the job of the RequestDispatcher is to take this current

58
00:02:55.911 --> 00:02:59.191
request and to dispatch it to some other servlet.

59
00:02:59.191 --> 00:03:02.261
So we could dispatch the request off to a servlet that we've written,

60
00:03:02.261 --> 00:03:07.191
or we could send the request off to a JavaServer Page.

61
00:03:07.191 --> 00:03:10.281
In our case we want to send this request off to a JavaServer Page,

62
00:03:10.281 --> 00:03:15.251
and as part of that request processing, pass the bean into the JavaServer Page.

63
00:03:15.251 --> 00:03:18.261
So we take this RequestDispatcher, we dispatch the request,

64
00:03:18.261 --> 00:03:21.231
and we'll see how we do that in a moment to the JSP.

65
00:03:21.231 --> 00:03:23.201
Before we dispatch the request,

66
00:03:23.201 --> 00:03:29.191
we put the bean somewhere such that the JavaServer Page has access to that bean.

67
00:03:29.191 --> 00:03:33.368
We can place the bean globally so it's available to any

68
00:03:33.368 --> 00:03:36.191
JavaServer Page that needs access to the bean.

69
00:03:36.191 --> 00:03:38.707
We can place the bean in a session so that the bean is

70
00:03:38.707 --> 00:03:41.643
only available to this current user, i.e.

71
00:03:41.643 --> 00:03:44.251
the person that has created the session,

72
00:03:44.251 --> 00:03:48.251
or we can place the bean inside the request so that when we forward the call,

73
00:03:48.251 --> 00:03:50.271
the bean gets forwarded as part of the request.

74
00:03:50.271 --> 00:03:56.000
When we finish dispatching the call, then the bean is destroyed and is no longer visible.

