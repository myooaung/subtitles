WEBVTT
1
00:00:02.308 --> 00:00:07.318
So using the expression language is very straightforward.

2
00:00:07.318 --> 00:00:12.338
The syntax for it simply dollar, brace, and then the expression within the brace.

3
00:00:12.338 --> 00:00:14.944
The first thing we'll see with the language is that we

4
00:00:14.944 --> 00:00:16.358
can use it directly within the page.

5
00:00:16.358 --> 00:00:20.946
So for example, something like this, and we just say dollar,

6
00:00:20.946 --> 00:00:23.358
user.name, which it just outputs some value into the page.

7
00:00:23.358 --> 00:00:27.348
Inside the expression language, user would be the name of a bean,

8
00:00:27.348 --> 00:00:30.348
and name would be a property within that bean.

9
00:00:30.348 --> 00:00:35.298
So in a previous example, to display the name of a user within the page,

10
00:00:35.298 --> 00:00:38.308
we had to reach into the request object using Java code,

11
00:00:38.308 --> 00:00:41.709
and then using a Java expression to grab the name of the user

12
00:00:41.709 --> 00:00:45.278
from the bean and display that on the page.

13
00:00:45.278 --> 00:00:48.308
Using the expression language, we can minimize this code.

14
00:00:48.308 --> 00:00:51.288
So we can replace the user code,

15
00:00:51.288 --> 00:00:53.358
and we can see how that works by looking in the browser.

16
00:00:53.358 --> 00:01:00.318
So here if I browse the application, which is on localhost:8090/app/ work.do,

17
00:01:00.318 --> 00:01:04.338
and we see Welcome Kevin, which is what we had previously.

18
00:01:04.338 --> 00:01:07.368
If we go back to the application,

19
00:01:07.368 --> 00:01:10.368
what we can now do is remove the Java from the application.

20
00:01:10.368 --> 00:01:14.201
So I can remove this entire section, and then here,

21
00:01:14.201 --> 00:01:16.308
rather than using less than percent equals,

22
00:01:16.308 --> 00:01:20.142
I can use the expression language, and as we saw,

23
00:01:20.142 --> 00:01:27.298
we used that with dollar brace, we close it off with a closing brace,

24
00:01:27.298 --> 00:01:30.853
and rather than using user.getName, we simply say,

25
00:01:30.853 --> 00:01:31.368
user.name.

26
00:01:31.368 --> 00:01:35.368
If we save this and then go back to the browser,

27
00:01:35.368 --> 00:01:40.278
and I refresh the browser, we end up with the same result.

28
00:01:40.278 --> 00:01:46.288
Just to prove that is working, if I take out the user.name here,

29
00:01:46.288 --> 00:01:52.328
and save and refresh, then the name disappears altogether.

30
00:01:52.328 --> 00:01:56.348
So using the expression language in place of Java is much more simpler.

31
00:01:56.348 --> 00:01:58.358
What you'll note here is that we don't need to

32
00:01:58.358 --> 00:02:02.308
specify the scope we get the bean in.

33
00:02:02.308 --> 00:02:04.298
The expression language looks in the request scope,

34
00:02:04.298 --> 00:02:06.298
the session scope, and in the global scope,

35
00:02:06.298 --> 00:02:10.368
that is the ServletContext, to look for any beans with that name.

36
00:02:10.368 --> 00:02:11.846
Within an application,

37
00:02:11.846 --> 00:02:16.854
we sometimes want to change styles of pages depending on which

38
00:02:16.854 --> 00:02:18.358
part of the application the user's within,

39
00:02:18.358 --> 00:02:21.318
or maybe depending on who that user is.

40
00:02:21.318 --> 00:02:25.368
So at the moment if we browse to the page, the page is purely white.

41
00:02:25.368 --> 00:02:29.278
There's no indication to the user here what they should be doing.

42
00:02:29.278 --> 00:02:33.358
So we've changed the application here so that we now use a class for that page,

43
00:02:33.358 --> 00:02:38.318
and if I go back to the application and refresh the page,

44
00:02:38.318 --> 00:02:43.278
we can see that the background now comes up in the coral pink.

45
00:02:43.278 --> 00:02:48.278
Now it may be that we want to do this dynamically.

46
00:02:48.278 --> 00:02:51.358
So to do that, rather than hard coding the name of the class here,

47
00:02:51.358 --> 00:02:54.348
we'd like to use an expression to get that class name.

48
00:02:54.348 --> 00:02:57.308
So what we need to do is to create a bean,

49
00:02:57.308 --> 00:03:00.318
use that bean to store the name of the class you want to use,

50
00:03:00.318 --> 00:03:03.288
and then place that bean somewhere we can get to it,

51
00:03:03.288 --> 00:03:06.278
and then add an expression to the page.

52
00:03:06.278 --> 00:03:10.288
So we've created a bean here called ApplicationSettings.java,

53
00:03:10.288 --> 00:03:14.278
and this has a property called formCssClass,

54
00:03:14.278 --> 00:03:18.298
and we can use that property within the page itself.

55
00:03:18.298 --> 00:03:19.691
Somewhere we need to create an instance of that bean and

56
00:03:19.691 --> 00:03:22.358
store that bean somewhere we can access it,

57
00:03:22.358 --> 00:03:24.338
and we can do that within the servlet itself.

58
00:03:24.338 --> 00:03:29.298
Now in this case, rather than storing the bean inside the request object,

59
00:03:29.298 --> 00:03:30.348
as we did with the user bean,

60
00:03:30.348 --> 00:03:33.993
we can store the bean inside the ServletContext and

61
00:03:33.993 --> 00:03:37.318
make the bean globally available.

62
00:03:37.318 --> 00:03:39.298
So the code will look like something like this.

63
00:03:39.298 --> 00:03:42.308
We're creating a new ApplicationSettings object,

64
00:03:42.308 --> 00:03:45.298
we call the setFormCssClass method on this,

65
00:03:45.298 --> 00:03:47.318
and pass in the class name of blueUser,

66
00:03:47.318 --> 00:03:50.002
and then we store that bean inside the

67
00:03:50.002 --> 00:03:54.163
ServletContext and give it a name of a-p-p,

68
00:03:54.163 --> 00:03:56.348
or app, for ApplicationSettings.

69
00:03:56.348 --> 00:04:01.318
Back in the page, rather than saying class = redUser,

70
00:04:01.318 --> 00:04:06.328
we can say class = dollar brace, so we can use an expression,

71
00:04:06.328 --> 00:04:09.199
and inside here we take the name of the bean,

72
00:04:09.199 --> 00:04:11.338
which was app, and the name of the property on that bean,

73
00:04:11.338 --> 00:04:16.298
which is formCssClass.

74
00:04:16.298 --> 00:04:19.308
So again, no, we don't need to say get formCssClass,

75
00:04:19.308 --> 00:04:21.988
it works that out for itself, and also in this case,

76
00:04:21.988 --> 00:04:25.288
unlike the user bean, which is used here,

77
00:04:25.288 --> 00:04:27.288
that user bean was in request scope,

78
00:04:27.288 --> 00:04:29.358
this bean is in part is in the ServletContext,

79
00:04:29.358 --> 00:04:31.338
that's the global scope.

80
00:04:31.338 --> 00:04:35.140
So if we deploy this application and we go to the browser,

81
00:04:35.140 --> 00:04:39.338
what we should see, we should see this class being picked up from formCssClass,

82
00:04:39.338 --> 00:04:42.328
we are setting CssClass to be blueUser,

83
00:04:42.328 --> 00:04:47.298
and blueUser in our CSS page has a background color of light blue.

84
00:04:47.298 --> 00:04:53.278
So if we go to the browser and refresh the page,

85
00:04:53.278 --> 00:04:53.738
sure enough,

86
00:04:53.738 --> 00:05:00.000
we are now simply setting the attributes from a bean using the expression language.

