1
00:00:03,887 --> 00:00:09,857
So the first thing we want to do is to create a tag inside a tag file.

2
00:00:09,857 --> 00:00:13,352
And these tag files live inside the webapp,

3
00:00:13,352 --> 00:00:18,857
WEB-INF directory, and inside here need to create a tags folder.

4
00:00:18,857 --> 00:00:24,368
So we can do that inside IntelliJ, so we just do New,

5
00:00:24,368 --> 00:00:27,827
Directory, and we call this thing tags.

6
00:00:27,827 --> 00:00:31,887
To create our first tag, we simply create a tag file with a tag extension.

7
00:00:31,887 --> 00:00:35,867
So I can right-click and do New and just create a new file,

8
00:00:35,867 --> 00:00:46,877
and we'll call this helloworld.tag.

9
00:00:46,877 --> 00:00:50,837
So I've said that tags are just JavaServer Page fragments,

10
00:00:50,837 --> 00:00:53,877
but to be a tag, we have to add the appropriate directives.

11
00:00:53,877 --> 00:00:56,867
In this case, we have to add the tag directive.

12
00:00:56,867 --> 00:01:01,887
So the tag directive is simply less than percent at tag.

13
00:01:01,887 --> 00:01:04,857
And tags themselves can have many attributes.

14
00:01:04,857 --> 00:01:06,907
For example, we can give the tag a description,

15
00:01:06,907 --> 00:01:10,827
we can specify things about the language of tag users.

16
00:01:10,827 --> 00:01:14,847
We can also specify whether the tags should or should not have a body.

17
00:01:14,847 --> 00:01:17,827
So we can say body-content=empty,

18
00:01:17,827 --> 00:01:20,887
and that says that this particular tag can only exist on a single line,

19
00:01:20,887 --> 00:01:21,490
i.e.

20
00:01:21,490 --> 00:01:26,917
it has no body inside opening and closing elements.

21
00:01:26,917 --> 00:01:31,827
Once we have that in place, we can close off the tag.

22
00:01:31,827 --> 00:01:33,634
And then the simplest tag we can create would simply

23
00:01:33,634 --> 00:01:35,847
output some text onto the page.

24
00:01:35,847 --> 00:01:38,887
To make it slightly more exciting, we can wrap this in a header tag.

25
00:01:38,887 --> 00:01:46,837
So we can say h3, then inside here we'll just say Hello World.

26
00:01:46,837 --> 00:01:49,867
Now that we've written the tag, we need to use the tag on the page,

27
00:01:49,867 --> 00:01:51,907
so to do that we need to find the page,

28
00:01:51,907 --> 00:01:55,534
which in this case is going to be inside main,

29
00:01:55,534 --> 00:01:59,887
webapp, inside WEB-INF, and it's going to be index.jsp.

30
00:01:59,887 --> 00:02:03,917
On here, we already have one taglib imported,

31
00:02:03,917 --> 00:02:05,887
that's for the core tag libraries,

32
00:02:05,887 --> 00:02:09,887
and we simply need to import this new time library.

33
00:02:09,887 --> 00:02:12,837
So to do that, we use a taglib directive.

34
00:02:12,837 --> 00:02:17,867
So again it's less than percent at taglib.

35
00:02:17,867 --> 00:02:18,907
We need to get this in the prefix.

36
00:02:18,907 --> 00:02:22,917
So these are simple tags, so let's say st for these tags.

37
00:02:22,917 --> 00:02:27,857
But then we also need to specify where these tags come from.

38
00:02:27,857 --> 00:02:30,907
Now for the core tag library, we use the uri prefix,

39
00:02:30,907 --> 00:02:36,847
and that tells the compiler to find a taglib.jar file

40
00:02:36,847 --> 00:02:38,887
that is referenced via that url.

41
00:02:38,887 --> 00:02:41,877
In this case, we're using a tag file,

42
00:02:41,877 --> 00:02:46,183
and we'll use a tag file and we'll use the tagdir attribute on the directive,

43
00:02:46,183 --> 00:02:51,827
and the tagdir attribute tells the page which directory to find the tags in.

44
00:02:51,827 --> 00:02:54,857
In this case that's going to be WEB-INF/tags.

45
00:02:54,857 --> 00:02:59,827
Once we have that in place, you can then use the tag on the page itself.

46
00:02:59,827 --> 00:03:04,877
In this case, we're going to add the tag into the Profile tab on the page.

47
00:03:04,877 --> 00:03:09,877
So that's at this point here where it just currently says Profile.

48
00:03:09,877 --> 00:03:13,887
So in here we can say st:,

49
00:03:13,887 --> 00:03:18,500
and notice that IntelliJ is smart enough to find the Hello World tag.

50
00:03:18,500 --> 00:03:21,847
We can then just place that inside there.

51
00:03:21,847 --> 00:03:23,907
Now if we deploy the application and browse to the page,

52
00:03:23,907 --> 00:03:27,917
we'll see helloworld on that, inside that tab,

53
00:03:27,917 --> 00:03:29,877
so let's do that.

54
00:03:29,877 --> 00:03:32,907
So if I look in the browser and go to the Profile tab,

55
00:03:32,907 --> 00:03:35,827
sure enough, it now says Hello World.

56
00:03:35,827 --> 00:03:41,827
So that's about the simplest tag that we can write for JavaServer Pages.

57
00:03:41,827 --> 00:03:44,867
So at the moment, this tag is particularly an interesting,

58
00:03:44,867 --> 00:03:47,867
and it simply outputs some text onto the page.

59
00:03:47,867 --> 00:03:50,917
What we'd like to do is to pass some data into tag

60
00:03:50,917 --> 00:03:53,857
and have the tag use that data.

61
00:03:53,857 --> 00:03:56,847
And the simplest way to do that is to use attributes.

62
00:03:56,847 --> 00:03:59,917
So inside this tag, we can add an attribute directive,

63
00:03:59,917 --> 00:04:03,139
and that directive will specify the name of the attribute and

64
00:04:03,139 --> 00:04:04,907
maybe some other information about the attribute,

65
00:04:04,907 --> 00:04:07,837
such as whether this is required or not.

66
00:04:07,837 --> 00:04:09,887
That looks something like this.

67
00:04:09,887 --> 00:04:12,877
So here we create an attribute with the name of name,

68
00:04:12,877 --> 00:04:16,837
we also specify that this attribute is required.

69
00:04:16,837 --> 00:04:20,857
Inside the tag itself, rather than saying Hello World,

70
00:04:20,857 --> 00:04:25,197
we can use the name of attribute and grab the value from that,

71
00:04:25,197 --> 00:04:27,837
and I'll put that value into the tag.

72
00:04:27,837 --> 00:04:29,867
And we do that using an expression.

73
00:04:29,867 --> 00:04:36,837
So we'd say dollar brace, then inside here we'd say name.

74
00:04:36,837 --> 00:04:39,907
Once we have that in place, if I go to the index page,

75
00:04:39,907 --> 00:04:43,837
IntelliJ now tells us that there's something missing from the tag.

76
00:04:43,837 --> 00:04:46,907
In this case that's the name attribute, and this is required.

77
00:04:46,907 --> 00:04:51,887
So if I say name=Alice let's say, just to prove that this works.

78
00:04:51,887 --> 00:04:54,887
Notice I've also made the profile pane active here,

79
00:04:54,887 --> 00:04:56,867
so each time we browse to the page,

80
00:04:56,867 --> 00:04:59,857
we get the profile pane so we can see this output.

81
00:04:59,857 --> 00:05:01,877
Notice here, I don't need to really plug the application,

82
00:05:01,877 --> 00:05:03,897
these are JavaServer Page changes,

83
00:05:03,897 --> 00:05:06,867
and they are picked up automatically by Tomcat.

84
00:05:06,867 --> 00:05:10,857
So if I go to the browser, you can see that it currently says Hello World.

85
00:05:10,857 --> 00:05:13,897
If I refresh the page, that will change to Hello Alice.

86
00:05:13,897 --> 00:05:18,827
Again, not particularly exciting, we're simply passing in hard coded text.

87
00:05:18,827 --> 00:05:21,827
But to these tags, I can also pass expressions.

88
00:05:21,827 --> 00:05:23,887
So if you remember we have this user object,

89
00:05:23,887 --> 00:05:25,897
and the user object has a name value.

90
00:05:25,897 --> 00:05:31,837
So I can take that and I can pass that property

91
00:05:31,837 --> 00:05:35,897
inside the attributes to this tag.

92
00:05:35,897 --> 00:05:39,897
So we pass in dollar brace user.name, again no need to save.

93
00:05:39,897 --> 00:05:43,827
If I go back to the page now and refresh,

94
00:05:43,827 --> 00:05:47,897
then we see Hello Kevin, where Kevin is the name passed through that user object.

95
00:05:47,897 --> 00:05:51,857
So the tag we've just created is relatively simple.

96
00:05:51,857 --> 00:05:54,877
We can create more complex tags.

97
00:05:54,877 --> 00:05:58,887
So for example, in the Profile tab here,

98
00:05:58,887 --> 00:06:01,907
we might want to show some information about the user.

99
00:06:01,907 --> 00:06:03,837
And we could do that by, for example,

100
00:06:03,837 --> 00:06:07,887
creating a tag called profile and then including that tag on the page.

101
00:06:07,887 --> 00:06:10,847
So we will do that the same ways we created the previous tag.

102
00:06:10,847 --> 00:06:21,887
So back in the tags directory, we can do New, File, we'll call this profile.tag.

103
00:06:21,887 --> 00:06:25,837
Again, to mark this as a tag, we need to give it a tag directive,

104
00:06:25,837 --> 00:06:28,897
so we say less than percent at tag.

105
00:06:28,897 --> 00:06:35,887
And again we set body-content to be empty for this tag.

106
00:06:35,887 --> 00:06:40,897
To our profile tag we'll pass a user, so we'll add another attribute in here,

107
00:06:40,897 --> 00:06:45,837
less than percent at attribute.

108
00:06:45,837 --> 00:06:50,857
The name of the attribute will be user.

109
00:06:50,857 --> 00:06:53,877
Again, this will be required, so we say required is true.

110
00:06:53,877 --> 00:06:57,897
Now by default, attributes that are passed into a tag are strings.

111
00:06:57,897 --> 00:07:00,867
In this case, we're actually going to pass a user object.

112
00:07:00,867 --> 00:07:04,827
To do that, we need to tell the runtime the type of this attribute.

113
00:07:04,827 --> 00:07:13,877
So we can say type=, and the type of ours is going to be com.mantiso .User.

114
00:07:13,877 --> 00:07:15,887
So now when we create the tag and use it,

115
00:07:15,887 --> 00:07:19,877
we specify the user attribute, with also name of type User.

116
00:07:19,877 --> 00:07:21,917
The body of the tag will just be a table,

117
00:07:21,917 --> 00:07:26,123
and each row in the table will display some part of the user,

118
00:07:26,123 --> 00:07:27,887
so something like this.

119
00:07:27,887 --> 00:07:30,857
We should have a table entry here with a Name row and EMail row,

120
00:07:30,857 --> 00:07:33,917
and maybe an image that displays a photograph of the user.

121
00:07:33,917 --> 00:07:34,917
So we can save this.

122
00:07:34,917 --> 00:07:38,827
We can then go back to our index.jsp page,

123
00:07:38,827 --> 00:07:42,847
and underneath the helloworld tag, we can say less than st,

124
00:07:42,847 --> 00:07:43,907
we've got a reference to our profile tag,

125
00:07:43,907 --> 00:07:49,837
and then give this thing to user.

126
00:07:49,837 --> 00:07:51,897
So to pass the user object into here, we use an expression.

127
00:07:51,897 --> 00:07:57,867
So we say dollar brace user.

128
00:07:57,867 --> 00:07:59,917
And then we can close off the tag itself.

129
00:07:59,917 --> 00:08:02,917
Now we'd like this information shown only if there is a user.

130
00:08:02,917 --> 00:08:05,867
So like before where we've put an if entry in here,

131
00:08:05,867 --> 00:08:09,048
we can do the same thing just to make sure that there's no

132
00:08:09,048 --> 00:08:11,897
user and the profile tag isn't executed.

133
00:08:11,897 --> 00:08:14,857
So we end up with a test, something like this.

134
00:08:14,857 --> 00:08:16,917
Again, there's no need to deploy the application.

135
00:08:16,917 --> 00:08:22,837
If we go back to the browser, and refresh the page,

136
00:08:22,837 --> 00:08:25,827
then we see on the page now the Hello message,

137
00:08:25,827 --> 00:08:27,390
and then the information about this user,

138
00:08:27,390 --> 00:08:30,907
so name, email, and an image.

139
00:08:30,907 --> 00:08:35,459
So we can see here we can actually pass around attributes other than strings,

140
00:08:35,459 --> 00:08:40,000
in this case we're actually passing in a user object and using that within the tag.

