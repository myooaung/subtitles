WEBVTT
1
00:00:02.781 --> 00:00:07.479
This is the servlet as we left it last time where we had our doGet

2
00:00:07.479 --> 00:00:09.781
method that was expecting to receive a name.

3
00:00:09.781 --> 00:00:10.851
If the name didn't turn out,

4
00:00:10.851 --> 00:00:14.821
it was outputting a message saying please enter a name.

5
00:00:14.821 --> 00:00:16.681
We got to change this so that we'd throw an

6
00:00:16.681 --> 00:00:18.761
exception if there's no name available,

7
00:00:18.761 --> 00:00:21.791
and then show how we do error handling within the application.

8
00:00:21.791 --> 00:00:25.781
Now obviously this is not something you probably do in a real life application.

9
00:00:25.781 --> 00:00:28.801
If you don't get the name, it's an input error rather an exception,

10
00:00:28.801 --> 00:00:31.791
but this is just as a demonstration.

11
00:00:31.791 --> 00:00:35.821
So we change the code so that it throws an exception.

12
00:00:35.821 --> 00:00:48.851
Let me put a message into here saying a name should be entered.

13
00:00:48.851 --> 00:00:55.841
If we deploy the application now and go to the browser,

14
00:00:55.841 --> 00:00:59.781
and refresh the page, then we'll see that we get a 500 status.

15
00:00:59.781 --> 00:01:03.761
We're not handling the exception within the application at all.

16
00:01:03.761 --> 00:01:06.821
So we go back to the application.

17
00:01:06.821 --> 00:01:12.078
What we should do is in the web.xml file is add an exception section to

18
00:01:12.078 --> 00:01:15.761
tell the application how to handle these exceptions.

19
00:01:15.761 --> 00:01:19.781
In fact, the exception section here will tell it how to handle any exception.

20
00:01:19.781 --> 00:01:22.811
So here we can add an error-page section.

21
00:01:22.811 --> 00:01:27.370
On the error-page we specify the fully qualified name of a JSP page that

22
00:01:27.370 --> 00:01:31.761
will be displayed when these exceptions are thrown.

23
00:01:31.761 --> 00:01:38.791
And so we'll create a new page called errorpage.jsp.

24
00:01:38.791 --> 00:01:39.821
We'll create our page.

25
00:01:39.821 --> 00:01:47.771
So within the project we'll do New, JSP and call this thing errorpage.

26
00:01:47.771 --> 00:01:51.801
In here we'll just display a message saying this is the error page.

27
00:01:51.801 --> 00:01:54.821
So currently this page just has a title of Error Page,

28
00:01:54.821 --> 00:01:58.281
it includes some CSS files, and has an h2 field,

29
00:01:58.281 --> 00:01:59.781
which just says Error Page.

30
00:01:59.781 --> 00:02:04.771
So again, if I deploy the application and go to the browser,

31
00:02:04.771 --> 00:02:08.811
if I refresh the page, then we'll see it says Error Page.

32
00:02:08.811 --> 00:02:10.781
We can actually do slightly better than that.

33
00:02:10.781 --> 00:02:16.821
So within the page itself, I can add a page directive.

34
00:02:16.821 --> 00:02:23.821
So I can say less than percent at page isErrorPage = true.

35
00:02:23.821 --> 00:02:29.831
If I do that in a JSP page, that gives me access to an object named exception,

36
00:02:29.831 --> 00:02:32.761
and this is an intrinsic error object.

37
00:02:32.761 --> 00:02:36.811
It contains information about the error that's just been thrown.

38
00:02:36.811 --> 00:02:39.791
We can use details from that object within the page.

39
00:02:39.791 --> 00:02:43.781
To use the object in the page, we have to use a script tag.

40
00:02:43.781 --> 00:02:46.241
So in this case just using a script tag will explain

41
00:02:46.241 --> 00:02:47.851
how these things work in a moment.

42
00:02:47.851 --> 00:02:54.138
We can say less than percent = exception., for example,

43
00:02:54.138 --> 00:02:54.801
getMessage,

44
00:02:54.801 --> 00:02:58.831
and this will display the message we passed to the exception onto the page.

45
00:02:58.831 --> 00:03:03.791
So again, if I deploy the application and go to the browser,

46
00:03:03.791 --> 00:03:10.851
and refresh, then we now get the error information as well within the page.

47
00:03:10.851 --> 00:03:13.851
So the exception object gives us access to other information as well.

48
00:03:13.851 --> 00:03:16.761
So again if I say less than percent equals here,

49
00:03:16.761 --> 00:03:20.821
and say exception., we can see this is a standard Java exception object.

50
00:03:20.821 --> 00:03:22.831
So we can get information about stack trace,

51
00:03:22.831 --> 00:03:26.821
we can get the message, we can get the cause of the exception,

52
00:03:26.821 --> 00:03:29.811
and we could dispose information to the user if we really wanted to,

53
00:03:29.811 --> 00:03:31.781
although we probably shouldn't do that,

54
00:03:31.781 --> 00:03:38.000
or we could just use the information to decide what to do with the exception and what information to display back to the user.

