1
00:00:02,167 --> 00:00:05,187
So we are going to make use of this MVC pattern.

2
00:00:05,187 --> 00:00:08,157
To do that, I'm going to introduce another servlet.

3
00:00:08,157 --> 00:00:10,187
We'll call this one ControllerServlet,

4
00:00:10,187 --> 00:00:13,197
and this will respond to the startup.do mapping.

5
00:00:13,197 --> 00:00:15,217
I've removed that startup.do mapping from the SimpleServlet

6
00:00:15,217 --> 00:00:19,147
so the application doesn't get confused.

7
00:00:19,147 --> 00:00:21,177
So the first thing we do is to add the servlet class.

8
00:00:21,177 --> 00:00:26,217
So we do that by right-clicking and doing New, Servlet.

9
00:00:26,217 --> 00:00:34,137
We'll give this the name ControllerServlet.

10
00:00:34,137 --> 00:00:35,197
That will add the servlet for me.

11
00:00:35,197 --> 00:00:36,187
And here's the code.

12
00:00:36,187 --> 00:00:38,197
It has a doPost and a doGet method.

13
00:00:38,197 --> 00:00:42,197
And it also adds an entry into the web.xml file, which is here.

14
00:00:42,197 --> 00:00:45,217
So it adds a servlet entry, but no servlet-mapping.

15
00:00:45,217 --> 00:00:51,227
So the first thing to do is to add a servlet-mapping for this.

16
00:00:51,227 --> 00:00:55,217
I'm going to say * .do.

17
00:00:55,217 --> 00:01:04,137
Then back in the servlet, we've got to change the doGet method.

18
00:01:04,137 --> 00:01:06,207
So what we'd like to do here is to create a user,

19
00:01:06,207 --> 00:01:08,177
we'll treat this as maybe a login servlet,

20
00:01:08,177 --> 00:01:10,913
so we'll create the user and then pass that user

21
00:01:10,913 --> 00:01:13,197
data off to the JavaServer Page.

22
00:01:13,197 --> 00:01:15,197
To do that, we have a User class here.

23
00:01:15,197 --> 00:01:17,157
So it's just a standard JavaBean.

24
00:01:17,157 --> 00:01:19,217
It has a couple of properties, a name and an email,

25
00:01:19,217 --> 00:01:22,217
a getName, a setName, getEmail, and setEmail.

26
00:01:22,217 --> 00:01:25,167
And we can use that within the controller.

27
00:01:25,167 --> 00:01:30,157
So inside the controller, we'll create an instance of the bean.

28
00:01:30,157 --> 00:01:32,187
So the ControllerServlet is acting as a controller,

29
00:01:32,187 --> 00:01:35,083
and what it's now done is it's created an instance of the

30
00:01:35,083 --> 00:01:39,187
bean and executed some business logic, i.e., it's given the user a name,

31
00:01:39,187 --> 00:01:42,147
it's given the user an email.

32
00:01:42,147 --> 00:01:45,207
We now need to pass this request onto the JavaServer Page,

33
00:01:45,207 --> 00:01:49,177
and then use the JavaServer Page to display this data.

34
00:01:49,177 --> 00:01:52,177
To do that, we use something called a RequestDispatcher,

35
00:01:52,177 --> 00:01:56,147
and request dispatchers are available through the ServletContext.

36
00:01:56,147 --> 00:01:59,167
So to get the RequestDispatcher, we first get the ServletContext,

37
00:01:59,167 --> 00:02:03,217
then get the RequestDispatcher, and then forward the request onto the page.

38
00:02:03,217 --> 00:02:05,197
When we get the RequestDispatcher,

39
00:02:05,197 --> 00:02:08,197
we give it the name of the thing that we are dispatching to,

40
00:02:08,197 --> 00:02:14,177
which in this case is the index.jsp, and we can save this in a variable.

41
00:02:14,177 --> 00:02:16,157
Once we have the dispatcher,

42
00:02:16,157 --> 00:02:19,167
we can now move this request onto the JavaServer Page,

43
00:02:19,167 --> 00:02:23,323
and we do that by calling dispatcher., and we can

44
00:02:23,323 --> 00:02:25,217
either call forward or include.

45
00:02:25,217 --> 00:02:30,207
If we call include here, we send the request off to the JavaServer Page,

46
00:02:30,207 --> 00:02:33,147
once that JavaServer Page is finished processing,

47
00:02:33,147 --> 00:02:37,167
then the request comes back to here and we carry on processing this servlet.

48
00:02:37,167 --> 00:02:38,217
If we say forward,

49
00:02:38,217 --> 00:02:40,497
we send the request off to the JavaServer Page and

50
00:02:40,497 --> 00:02:42,177
the code does not return here.

51
00:02:42,177 --> 00:02:46,167
So we do no further processing inside the servlet.

52
00:02:46,167 --> 00:02:49,167
So as this is the ControllerServlet, we've done all we need to do here,

53
00:02:49,167 --> 00:02:52,333
we're going to use forward and we pass this the

54
00:02:52,333 --> 00:02:58,157
request object and the response object.

55
00:02:58,157 --> 00:02:59,620
So we'll now forward to the page; however,

56
00:02:59,620 --> 00:03:03,157
we haven't passed on this bean to the page.

57
00:03:03,157 --> 00:03:05,167
We have this user bean that we've created,

58
00:03:05,167 --> 00:03:08,157
but we haven't told the page how to get that bean.

59
00:03:08,157 --> 00:03:10,217
There are several ways of passing the bean to the page.

60
00:03:10,217 --> 00:03:13,207
We could pass the bean through what's called global scope.

61
00:03:13,207 --> 00:03:17,147
So we could call getServletContext,

62
00:03:17,147 --> 00:03:21,217
and then on the ServletContext do setAttribute.

63
00:03:21,217 --> 00:03:24,187
Notice that attributes have names and they're given a value,

64
00:03:24,187 --> 00:03:27,137
which is the object we're passing here.

65
00:03:27,137 --> 00:03:29,177
When we call setAttribute on ServletContext,

66
00:03:29,177 --> 00:03:32,137
we're placing this object into global scope,

67
00:03:32,137 --> 00:03:36,177
so anything that is within this web application has access to this bean.

68
00:03:36,177 --> 00:03:38,157
So anything that can get at this context,

69
00:03:38,157 --> 00:03:42,187
so any servlet, any JavaServer Page, can see this bean.

70
00:03:42,187 --> 00:03:45,137
When we pass the bean through the ServletContext,

71
00:03:45,137 --> 00:03:47,137
we make the bean available globally,

72
00:03:47,137 --> 00:03:51,167
and it might be that we want to limit the scope of the bean.

73
00:03:51,167 --> 00:03:54,147
So the next scope down is the session scope.

74
00:03:54,147 --> 00:03:57,137
So we can't pass the bean using the session object.

75
00:03:57,137 --> 00:03:59,147
This session is this user session,

76
00:03:59,147 --> 00:04:03,217
so all requests sent by this user from this browser constitute the session.

77
00:04:03,217 --> 00:04:05,217
Beans that go in a session scope could well be a user bean,

78
00:04:05,217 --> 00:04:08,167
it could also be things like shopping carts maybe,

79
00:04:08,167 --> 00:04:12,217
so any information that we need to share across all requests within the session.

80
00:04:12,217 --> 00:04:18,177
The session is available through the request object.

81
00:04:18,177 --> 00:04:23,137
So we say request.getSession.

82
00:04:23,137 --> 00:04:26,147
And once we've done that, again we can say setAttribute,

83
00:04:26,147 --> 00:04:29,187
and again the attribute is a name value pair.

84
00:04:29,187 --> 00:04:32,227
The final scope we might want to use here is actually the request scope.

85
00:04:32,227 --> 00:04:36,197
So the request itself has a setAttribute method.

86
00:04:36,197 --> 00:04:38,187
So we're going to say setAttribute on the request,

87
00:04:38,187 --> 00:04:40,197
and we give this thing a name and a value.

88
00:04:40,197 --> 00:04:45,167
So here we'll give it a name of user and the value of user,

89
00:04:45,167 --> 00:04:47,177
and that's just the user bean.

90
00:04:47,177 --> 00:04:51,147
In this case, the request will be forwarded to the JavaServer Page.

91
00:04:51,147 --> 00:04:54,167
The page could also make use of the attributes inside the request.

92
00:04:54,167 --> 00:04:55,167
Once that's done,

93
00:04:55,167 --> 00:04:57,932
the request is finished with and anything inside the

94
00:04:57,932 --> 00:05:01,147
request such as this bean is then destroyed.

95
00:05:01,147 --> 00:05:03,404
So now that we've placed the bean inside the request and

96
00:05:03,404 --> 00:05:05,217
we've forwarded the request off to the page,

97
00:05:05,217 --> 00:05:13,157
we can go to the page and then access the bean from the page.

98
00:05:13,157 --> 00:05:16,197
So within the page we can add some code, so we can do that anywhere.

99
00:05:16,197 --> 00:05:20,177
So let's here add in the code to access the bean.

100
00:05:20,177 --> 00:05:22,177
So we'll get the bean from the attribute,

101
00:05:22,177 --> 00:05:25,227
giving it the same name that we used within the servlet.

102
00:05:25,227 --> 00:05:27,227
It has to be the appropriate type.

103
00:05:27,227 --> 00:05:30,197
And we are checking here to make sure that the value isn't null.

104
00:05:30,197 --> 00:05:34,157
And if it is null, it is creating an empty bean.

105
00:05:34,157 --> 00:05:36,167
We can then make use of that bean within the page.

106
00:05:36,167 --> 00:05:41,167
So for example here inside the div, we can say something like h2,

107
00:05:41,167 --> 00:05:48,157
and then within here maybe Welcome, then a user directive,

108
00:05:48,157 --> 00:05:50,197
so less than percent equals, and we have the user object,

109
00:05:50,197 --> 00:05:55,197
and we'll say user.getName.

110
00:05:55,197 --> 00:05:58,217
So once we have all that in place, if we go back to the browser,

111
00:05:58,217 --> 00:06:02,207
and rather than browsing to index.jsp inside the app,

112
00:06:02,207 --> 00:06:09,207
we could browse to work.do, and inside here we hit the servlet,

113
00:06:09,207 --> 00:06:13,137
the servlet creates the bean, it gives the bean the name of Kevin,

114
00:06:13,137 --> 00:06:15,187
it forwards off to the JavaServer Page,

115
00:06:15,187 --> 00:06:22,000
and the JavaServer Page displays the name here, so Welcome Kevin.

