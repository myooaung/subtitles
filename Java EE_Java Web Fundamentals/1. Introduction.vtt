WEBVTT
1
00:00:00.000 --> 00:00:03.070
Welcome back to the Java Web Fundamentals class.

2
00:00:03.070 --> 00:00:11.020
My name is Kevin Jones, and this is the chapter on Asynchronous Programming.

3
00:00:11.020 --> 00:00:15.040
In this chapter, we'll cover two major objectives.

4
00:00:15.040 --> 00:00:20.030
We want to understand why asynchronous programming is important.

5
00:00:20.030 --> 00:00:24.020
We want to understand how to write asynchronous servlets.

6
00:00:24.020 --> 00:00:27.010
So, why is asynchronous programming important?

7
00:00:27.010 --> 00:00:29.060
We can imagine various scenarios.

8
00:00:29.060 --> 00:00:29.724
For example,

9
00:00:29.724 --> 00:00:33.053
if a request comes into the servlet and the servlet

10
00:00:33.053 --> 00:00:35.060
needs to access some back-end resource,

11
00:00:35.060 --> 00:00:38.060
we'd like to offload that request to some thread,

12
00:00:38.060 --> 00:00:39.656
maybe an I/O thread,

13
00:00:39.656 --> 00:00:43.256
that can process that back-end resource without consuming the

14
00:00:43.256 --> 00:00:46.090
threads that the servlet container is itself using.

15
00:00:46.090 --> 00:00:52.000
So the servlet container can therefore reuse many threads.

16
00:00:52.000 --> 00:00:54.080
Also if the servlet container is using threads,

17
00:00:54.080 --> 00:00:57.080
for example, to push responses back to the client.

18
00:00:57.080 --> 00:00:59.020
So if we have scenarios where we're using,

19
00:00:59.020 --> 00:01:02.060
say, long polling for example with an AJAX client,

20
00:01:02.060 --> 00:01:07.090
in that case, asynchronous servlets and asynchronous calls can help us scale.

21
00:01:07.090 --> 00:01:09.080
And how do asynchronous servlets work?

22
00:01:09.080 --> 00:01:10.924
So with an asynchronous servlet,

23
00:01:10.924 --> 00:01:14.080
we first have to mark the servlet as being asynchronous,

24
00:01:14.080 --> 00:01:16.050
and we'll see how we do that in a moment.

25
00:01:16.050 --> 00:01:17.379
Once we've done that,

26
00:01:17.379 --> 00:01:20.555
within the request handling code inside the servlets

27
00:01:20.555 --> 00:01:23.080
we get an asynchronous context.

28
00:01:23.080 --> 00:01:27.040
We then start the context to handle the request,

29
00:01:27.040 --> 00:01:29.740
and this will push the request off onto a different

30
00:01:29.740 --> 00:01:32.090
thread managed by the servlet container.

31
00:01:32.090 --> 00:01:36.010
Once that work is done, we can then process the response,

32
00:01:36.010 --> 00:01:39.010
and we can then use the context to return that response

33
00:01:39.010 --> 00:01:43.040
and mark the request as being complete.

34
00:01:43.040 --> 00:01:43.419
Optionally,

35
00:01:43.419 --> 00:01:47.678
we can add listeners to this context to listen for specific

36
00:01:47.678 --> 00:01:52.030
events around the asynchronous nature of the work.

37
00:01:52.030 --> 00:01:55.020
And we'll see examples of this in the code in a moment.

38
00:01:55.020 --> 00:01:59.000
So the first thing we do is mark the servlet as asynchronous,

39
00:01:59.000 --> 00:02:05.040
and we do that inside the WebServlet annotation by saying asyncSupported = true.

40
00:02:05.040 --> 00:02:08.364
Then within the servlet itself, in this case inside the doGet method,

41
00:02:08.364 --> 00:02:10.020
we can grab the context,

42
00:02:10.020 --> 00:02:14.080
and we do that on the request object by calling startAsync,

43
00:02:14.080 --> 00:02:21.080
and this returns us an asyncContext object for us to use.

44
00:02:21.080 --> 00:02:27.040
On that context we call start, and this starts the async work.

45
00:02:27.040 --> 00:02:29.080
We pass this in this case a lambda,

46
00:02:29.080 --> 00:02:32.030
and inside that lambda we can then do some work.

47
00:02:32.030 --> 00:02:35.050
Here we're just simply writing out a response.

48
00:02:35.050 --> 00:02:38.020
Notice we can catch exceptions in here and process those exceptions,

49
00:02:38.020 --> 00:02:42.070
and then when we're done we call complete on the context,

50
00:02:42.070 --> 00:02:47.000
and that tells the container we've finished and we no longer need the servlet,

51
00:02:47.000 --> 00:02:52.050
we no longer need this thread, we're no longer doing any work on this context.

52
00:02:52.050 --> 00:02:52.337
Alternatively,

53
00:02:52.337 --> 00:02:57.010
if we don't want to deal with the processing itself within the servlet,

54
00:02:57.010 --> 00:03:02.000
we can dispatch this call to some other servlet. So let's write some code and see how we do this.

