1
00:00:00,219 --> 00:00:03,159
So the first thing we're going to do is to add a filter,

2
00:00:03,159 --> 00:00:08,219
and this filter is going to log events, and for that we're going to use Log4j.

3
00:00:08,219 --> 00:00:11,169
First we need to set up the filter.

4
00:00:11,169 --> 00:00:19,159
So we add a new package for the filters and add a class that implements filter.

5
00:00:19,159 --> 00:00:20,189
We implement the methods for the filter,

6
00:00:20,189 --> 00:00:23,189
and there are three methods we need to implement,

7
00:00:23,189 --> 00:00:27,149
init, doFilter, and destroy.

8
00:00:27,149 --> 00:00:29,209
Init is called when the filter is first initialized,

9
00:00:29,209 --> 00:00:32,149
doFilter each time the filter is used,

10
00:00:32,149 --> 00:00:36,219
and destroy when the filter is disposed of.

11
00:00:36,219 --> 00:00:43,229
In the init method, we'll capture the filterConfig so that we can use it later.

12
00:00:43,229 --> 00:00:48,219
As we're going to use Log4j version 2, we need to add two entries to the POM,

13
00:00:48,219 --> 00:00:53,149
so these references are available to our application.

14
00:00:53,149 --> 00:00:54,297
In the filter,

15
00:00:54,297 --> 00:00:59,139
we add references to Log4j and then we get a reference to the logger.

16
00:00:59,139 --> 00:01:02,229
And then we can then use that logger to log request information,

17
00:01:02,229 --> 00:01:08,199
and then we simply chain the request to the next entry in the filter chain.

18
00:01:08,199 --> 00:01:11,519
In this demo, we're not going to show using this through web.xml,

19
00:01:11,519 --> 00:01:15,169
we've done that for events, instead we're going to use annotations.

20
00:01:15,169 --> 00:01:18,875
So we add the WebFilter annotation and we use star to

21
00:01:18,875 --> 00:01:23,169
specify that this filter is for all URLs.

22
00:01:23,169 --> 00:01:27,139
To use Log4j, we need to create a configuration file,

23
00:01:27,139 --> 00:01:30,149
and this configuration file has to be on the class path,

24
00:01:30,149 --> 00:01:32,159
so we add it to the resources section.

25
00:01:32,159 --> 00:01:35,169
That means it gets included in the WAR file in the classes folder,

26
00:01:35,169 --> 00:01:37,199
and so will be on the class path.

27
00:01:37,199 --> 00:01:41,949
Notice this configuration file uses a system property to tell

28
00:01:41,949 --> 00:01:45,149
Log4j to log to the Tomcat logs directory.

29
00:01:45,149 --> 00:01:49,139
And this is the same place that Tomcat itself logs to.

30
00:01:49,139 --> 00:01:50,149
Once we have that in place,

31
00:01:50,149 --> 00:01:55,199
we can deploy the application and refresh the browser.

32
00:01:55,199 --> 00:01:57,139
And if we now open the log file,

33
00:01:57,139 --> 00:02:00,206
we can see the entries with the request made to the

34
00:02:00,206 --> 00:02:03,139
servlet * .do and the various support files,

35
00:02:03,139 --> 00:02:08,159
the CSS files and the JS files.

36
00:02:08,159 --> 00:02:12,179
With that simple filter in place, we can now add a wrapper.

37
00:02:12,179 --> 00:02:15,879
In this case, we'll add a request wrapper to capture the requests,

38
00:02:15,879 --> 00:02:19,169
and log information about those requests.

39
00:02:19,169 --> 00:02:25,179
And here we'll log HTTP headers that are sent as part of the request.

40
00:02:25,179 --> 00:02:26,508
So to do this,

41
00:02:26,508 --> 00:02:33,149
we add a LogRequestWrapper class and extend HttpRequest servlet wrapper.

42
00:02:33,149 --> 00:02:34,058
In its constructor,

43
00:02:34,058 --> 00:02:39,179
we take a reference to the logger and store that for later use.

44
00:02:39,179 --> 00:02:44,139
We override the getHeader method, call the superclass method,

45
00:02:44,139 --> 00:02:47,149
so that getHeader is passed up the call and the header's returned,

46
00:02:47,149 --> 00:02:50,209
and then just log out the header information.

47
00:02:50,209 --> 00:02:53,219
In the filter, we create an instance of the wrapper,

48
00:02:53,219 --> 00:02:56,186
passing the original request object and the logger,

49
00:02:56,186 --> 00:03:01,219
and we pass the wrapper down the filter chain.

50
00:03:01,219 --> 00:03:06,169
And again, we can deploy the project and refresh the page.

51
00:03:06,169 --> 00:03:07,179
And now when we look,

52
00:03:07,179 --> 00:03:15,000
as well as seeing the logging information about the request coming in, we can also see the logging information about these headers as well.

