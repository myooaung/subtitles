1
00:00:01,501 --> 00:00:04,451
So what we have at the moment is essentially nothing

2
00:00:04,451 --> 00:00:06,491
more than a glorified HTML page.

3
00:00:06,491 --> 00:00:09,585
We can change that by taking advantage of some of

4
00:00:09,585 --> 00:00:11,441
the features of JavaServer Pages.

5
00:00:11,441 --> 00:00:15,231
So for example we might want to break the page down into its

6
00:00:15,231 --> 00:00:18,431
constituent parts to be able to reuse those parts.

7
00:00:18,431 --> 00:00:20,491
So here for example we have a header section.

8
00:00:20,491 --> 00:00:24,570
It might be nice to have that section in a separate fragment that

9
00:00:24,570 --> 00:00:27,491
we can include into the page as and when needed.

10
00:00:27,491 --> 00:00:28,471
So we could do that.

11
00:00:28,471 --> 00:00:35,084
So if I go to my project structure and add a new page here,

12
00:00:35,084 --> 00:00:41,411
so new JSP, call this something like _header.jsp,

13
00:00:41,411 --> 00:00:43,481
select this and paste it in the header.

14
00:00:43,481 --> 00:00:48,411
If I go back into the index page and then delete the header,

15
00:00:48,411 --> 00:00:53,431
just to prove that this is working, if we go to the browser and refresh the page,

16
00:00:53,431 --> 00:00:56,421
and we see the header information has disappeared,

17
00:00:56,421 --> 00:01:02,421
then if I go back into here, and now I need to include that header fragment.

18
00:01:02,421 --> 00:01:04,481
And to do that we can use what's called a directive.

19
00:01:04,481 --> 00:01:07,471
JSP has many directives.

20
00:01:07,471 --> 00:01:10,471
In this case we're going to use the include directive.

21
00:01:10,471 --> 00:01:14,411
And directives are introduced by using less than percent at.

22
00:01:14,411 --> 00:01:18,451
And we can see here it says include, so I can use the include directive,

23
00:01:18,451 --> 00:01:21,491
and it'll reference the page for me, so _header.jsp.

24
00:01:21,491 --> 00:01:26,421
Let me close off the directive by using percent greater than.

25
00:01:26,421 --> 00:01:28,491
Saving the page, going back to the browser,

26
00:01:28,491 --> 00:01:35,421
and refreshing, and we now include the header.

27
00:01:35,421 --> 00:01:37,501
When we use the include directive in this way,

28
00:01:37,501 --> 00:01:40,451
the page that we reference inside the directive,

29
00:01:40,451 --> 00:01:47,471
in this case _header.jsp, is included into the page at page translation time.

30
00:01:47,471 --> 00:01:52,501
Page translation time is when this JavaServer Page is translated into Java,

31
00:01:52,501 --> 00:01:55,491
and that Java is then compiled into the .class file.

32
00:01:55,491 --> 00:01:59,501
So this happens during the compilation of the page.

33
00:01:59,501 --> 00:02:02,491
We can also include resources dynamically in the page,

34
00:02:02,491 --> 00:02:04,461
and we'll see how we do that a little later.

35
00:02:04,461 --> 00:02:08,870
And those dynamically included resources are essentially executed as

36
00:02:08,870 --> 00:02:12,872
part of the lifetime of the servlet rather than being compiled into

37
00:02:12,872 --> 00:02:16,441
the page when the page itself is compiled.

38
00:02:16,441 --> 00:02:19,431
So as well as the include directive,

39
00:02:19,431 --> 00:02:23,431
another directive you'll use quite frequently is the page directive.

40
00:02:23,431 --> 00:02:26,451
The page directive has many attributes to it that we can use.

41
00:02:26,451 --> 00:02:31,421
So as we saw, the JSP page is in fact a servlet,

42
00:02:31,421 --> 00:02:34,611
and the servlet when it's created derives from a base

43
00:02:34,611 --> 00:02:36,411
class that's defined by the container.

44
00:02:36,411 --> 00:02:38,501
We can use the page directive to change our base class.

45
00:02:38,501 --> 00:02:43,451
So we could, for example, say less than percent at page.

46
00:02:43,451 --> 00:02:48,441
And then here we could say extends,

47
00:02:48,441 --> 00:02:50,934
and give it a name of a class that we want this page to

48
00:02:50,934 --> 00:02:53,471
derive from or extend in Java terms.

49
00:02:53,471 --> 00:02:57,535
And we can do that for example if we need common functionality in a

50
00:02:57,535 --> 00:03:00,491
base class that all our pages are going to use.

51
00:03:00,491 --> 00:03:02,461
Using the page directive,

52
00:03:02,461 --> 00:03:07,431
we can also modify the behavior of the servlet container such as Tomcat.

53
00:03:07,431 --> 00:03:10,471
So for example the JSP page will generate text output,

54
00:03:10,471 --> 00:03:12,501
typically HTML, maybe XML.

55
00:03:12,501 --> 00:03:16,441
That output may be buffered, and we can specify the size of the buffer.

56
00:03:16,441 --> 00:03:21,441
So we can say page buffer =, and this defaults to 8k.

57
00:03:21,441 --> 00:03:26,461
We can turn that off, we can set that buffer size to 0 for example.

58
00:03:26,461 --> 00:03:32,471
We can also, along with the buffering, specify an option called autoFlush.

59
00:03:32,471 --> 00:03:34,421
AutoFlush defaults to true.

60
00:03:34,421 --> 00:03:35,461
We can set autoFlush to false,

61
00:03:35,461 --> 00:03:38,501
and what that means is that as we generate the page output,

62
00:03:38,501 --> 00:03:40,461
if the buffer is full,

63
00:03:40,461 --> 00:03:43,583
then the runtime will throw an exception while it is

64
00:03:43,583 --> 00:03:48,441
flushing the page down to the browser.

65
00:03:48,441 --> 00:03:52,421
We can also use the page directive to, for example, set the contentType.

66
00:03:52,421 --> 00:03:55,441
So by default the contentType is text/html,

67
00:03:55,441 --> 00:04:00,451
we could change that to text/xml, we could change that to just plain text,

68
00:04:00,451 --> 00:04:04,481
or maybe set it to JSON for example.

69
00:04:04,481 --> 00:04:09,501
Another common use of the page directive is to specify an errorPage.

70
00:04:09,501 --> 00:04:12,491
The errorPage is the page that's displayed.

71
00:04:12,491 --> 00:04:16,441
If this particular JavaServer Page throws an exception,

72
00:04:16,441 --> 00:04:18,491
we can set the errorPage in web.xml,

73
00:04:18,491 --> 00:04:23,441
we can override that here by specifying a specific page here.

74
00:04:23,441 --> 00:04:25,421
Typically though, the reverse is done,

75
00:04:25,421 --> 00:04:29,491
in that a JavaServer Page is used as the errorPage.

76
00:04:29,491 --> 00:04:35,501
So for example in that case here we'd say isErrorPage would be true,

77
00:04:35,501 --> 00:04:38,451
by default that value is false.

78
00:04:38,451 --> 00:04:47,000
And that means that this errorPage has access to some other intrinsic information that we can use to display errors.

