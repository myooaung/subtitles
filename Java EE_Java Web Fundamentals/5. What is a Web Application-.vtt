WEBVTT
1
00:00:01.263 --> 00:00:04.690
I've mentioned the phrase web application a number of times now,

2
00:00:04.690 --> 00:00:08.273
and indeed, if we go and look at the location where we installed Tomcat,

3
00:00:08.273 --> 00:00:10.273
that has a webapps folder,

4
00:00:10.273 --> 00:00:14.223
and it's this webapps folder that holds these web applications.

5
00:00:14.223 --> 00:00:17.283
So what exactly is a web application?

6
00:00:17.283 --> 00:00:21.104
A web application we can think of as being a deployable

7
00:00:21.104 --> 00:00:24.433
unit that contains the content of our app,

8
00:00:24.433 --> 00:00:24.833
i.e.

9
00:00:24.833 --> 00:00:29.263
the Java code, and any configuration needed for that application.

10
00:00:29.263 --> 00:00:33.608
We'll see later on it contains a file called web.xml that we use to set

11
00:00:33.608 --> 00:00:36.763
the various aspects of the application such as servlets,

12
00:00:36.763 --> 00:00:42.243
filters, listeners, security, and anything else we feel the application needs.

13
00:00:42.243 --> 00:00:44.243
When we browse to a web application,

14
00:00:44.243 --> 00:00:47.293
we send our request to the application server,

15
00:00:47.293 --> 00:00:51.233
and that server will be listening at some URL.

16
00:00:51.233 --> 00:00:53.283
This is known as the base URL.

17
00:00:53.283 --> 00:00:57.233
The complete URL will look something like this.

18
00:00:57.233 --> 00:01:01.243
So that contains the server endpoint, so where we point our browser to,

19
00:01:01.243 --> 00:01:04.263
and the item in red is the name of the application.

20
00:01:04.263 --> 00:01:06.400
And then within the application we'll have our own endpoints,

21
00:01:06.400 --> 00:01:09.273
maybe a page or maybe a server that we browse to.

22
00:01:09.273 --> 00:01:11.303
The application, myapp in this case,

23
00:01:11.303 --> 00:01:16.313
will be the code and the configuration that we copy into our web server,

24
00:01:16.313 --> 00:01:20.273
or deploy to the web server to use the more correct phrase.

25
00:01:20.273 --> 00:01:24.164
In the case of Tomcat, we deploy the application to the webapps directory,

26
00:01:24.164 --> 00:01:30.303
and it'll then be available as part of the running instance of Tomcat.

27
00:01:30.303 --> 00:01:33.313
The application may contain static content,

28
00:01:33.313 --> 00:01:35.665
that would be any, for example,

29
00:01:35.665 --> 00:01:38.748
HTML pages or images that make up the application,

30
00:01:38.748 --> 00:01:40.263
or any JavaScript or CSS.

31
00:01:40.263 --> 00:01:43.447
The application will also contain dynamically generated content,

32
00:01:43.447 --> 00:01:46.596
and this dynamically generated content would be our

33
00:01:46.596 --> 00:01:49.032
Java and our JavaServer Pages, so the servlets,

34
00:01:49.032 --> 00:01:55.313
the listeners, and the filters that go into the application.

35
00:01:55.313 --> 00:02:00.243
A Java web application, when it's deployed, has a standard structure.

36
00:02:00.243 --> 00:02:02.303
If we take a look at one of the Tomcat applications,

37
00:02:02.303 --> 00:02:04.223
for example the manager application,

38
00:02:04.223 --> 00:02:08.223
we can see inside here it has a WEB-INF folder,

39
00:02:08.223 --> 00:02:11.303
and it's this WEB-INF folder that contains many of the things that we need.

40
00:02:11.303 --> 00:02:14.243
In here, for example, there's a web.xml file,

41
00:02:14.243 --> 00:02:17.293
and that web.xml file contains the configuration.

42
00:02:17.293 --> 00:02:20.283
This folder will also contain the classes and the libs

43
00:02:20.283 --> 00:02:22.303
that go to make up the application.

44
00:02:22.303 --> 00:02:26.243
You can also in here put JavaServer Pages,

45
00:02:26.243 --> 00:02:29.303
and we'll see later on in the class why you might want to do this.

46
00:02:29.303 --> 00:02:33.012
Other JavaServer Pages can also live in the root part of the application

47
00:02:33.012 --> 00:02:37.263
along with any static content such as images or HTML.

48
00:02:37.263 --> 00:02:40.110
As well as having a standard structure after they've been deployed,

49
00:02:40.110 --> 00:02:43.303
there's also a standard deployment format for web applications,

50
00:02:43.303 --> 00:02:48.273
known as a WAR or WAR file, also known as a web archive.

51
00:02:48.273 --> 00:02:53.303
A web archive is simply a zip file with the extension .war.

52
00:02:53.303 --> 00:02:54.717
And within the web archive,

53
00:02:54.717 --> 00:02:58.263
you'll have exactly the same structure as the deployed application.

54
00:02:58.263 --> 00:03:01.258
As we can see in the image here, there's a WEB-INF folder,

55
00:03:01.258 --> 00:03:03.603
and inside that folder we'll have a classes folder that

56
00:03:03.603 --> 00:03:06.126
contains the classes that make up the application,

57
00:03:06.126 --> 00:03:10.260
a lib folder for any extra JARs that need to go along with the application,

58
00:03:10.260 --> 00:03:13.283
and also again the web.xml file.

59
00:03:13.283 --> 00:03:19.114
Many tools and IDEs support both the WAR format and also support

60
00:03:19.114 --> 00:03:22.263
the ability to deploy to different web servers.

61
00:03:22.263 --> 00:03:22.712
In fact,

62
00:03:22.712 --> 00:03:25.036
one of the reasons we'll use Maven during this

63
00:03:25.036 --> 00:03:27.293
class is to make deployment easier.

64
00:03:27.293 --> 00:03:30.723
Maven can both create WAR files to allow us to deploy,

65
00:03:30.723 --> 00:03:35.243
and then copy those WAR files into the appropriate directory.

66
00:03:35.243 --> 00:03:42.233
With this information, we can now see how to deploy an application to Tomcat.

67
00:03:42.233 --> 00:03:46.253
The first thing to understand is that Tomcat has a manager application.

68
00:03:46.253 --> 00:03:52.243
This application is available from the home page, and it's at /manager/html.

69
00:03:52.243 --> 00:03:53.380
In using this application,

70
00:03:53.380 --> 00:03:57.263
we can manage the web applications that are deployed to Tomcat.

71
00:03:57.263 --> 00:03:59.263
And here we can see the list of the applications,

72
00:03:59.263 --> 00:04:02.223
and indeed there's the manager application itself.

73
00:04:02.223 --> 00:04:05.223
We can start applications, we can stop applications,

74
00:04:05.223 --> 00:04:09.313
and we can set some of the various configuration of those applications.

75
00:04:09.313 --> 00:04:12.283
The manager application also has a tagged interface,

76
00:04:12.283 --> 00:04:14.120
which is a scripting interface,

77
00:04:14.120 --> 00:04:19.223
which allows us to run command line tools to deploy applications within Tomcat,

78
00:04:19.223 --> 00:04:21.283
and we can do that from within Maven.

79
00:04:21.283 --> 00:04:26.223
To access these applications, we have to set up some users within Tomcat.

80
00:04:26.223 --> 00:04:27.114
And in Tomcat,

81
00:04:27.114 --> 00:04:30.711
that's done from within a file called tomcat-

82
00:04:30.711 --> 00:04:35.223
users.xml in the tomcat\conf directory.

83
00:04:35.223 --> 00:04:37.233
For this file, I've added two roles,

84
00:04:37.233 --> 00:04:40.223
a manager-gui role and a manager-script role,

85
00:04:40.223 --> 00:04:42.253
and I've added two users, one called tomcat,

86
00:04:42.253 --> 00:04:45.273
one called tomcat-script, both with the same password,

87
00:04:45.273 --> 00:04:48.303
one in the manager-gui role and one in the manager-script role.

88
00:04:48.303 --> 00:04:53.313
The manager-gui role gives me access to the HTML interface for the manager.

89
00:04:53.313 --> 00:04:58.233
The manager-script role gives me access to the text interface for the manager,

90
00:04:58.233 --> 00:04:59.293
that's the scripting interface.

91
00:04:59.293 --> 00:05:02.263
The application we have here is called mvnblog.

92
00:05:02.263 --> 00:05:04.704
This application has a single server inside it to

93
00:05:04.704 --> 00:05:07.233
allow us to test the deployment,

94
00:05:07.233 --> 00:05:12.233
and it has a Maven POM to allow it to deploy from the command line.

95
00:05:12.233 --> 00:05:14.422
To allow me to deploy the application from inside Maven,

96
00:05:14.422 --> 00:05:19.223
I've changed the POM file to include the Tomcat plugin.

97
00:05:19.223 --> 00:05:25.313
This lets me call the manager scripting APIs to deploy applications to Tomcat.

98
00:05:25.313 --> 00:05:28.253
I can then simply run this from the command line.

99
00:05:28.253 --> 00:05:34.223
So if I head over to the command line and use mvn package tomcat7:redeploy,

100
00:05:34.223 --> 00:05:35.366
we'll let this run,

101
00:05:35.366 --> 00:05:39.087
and this'll build the application and package it and then build a WAR file

102
00:05:39.087 --> 00:05:43.263
out of the package and then copy that WAR file into Tomcat.

103
00:05:43.263 --> 00:05:45.283
And if I take a look at the Tomcat window,

104
00:05:45.283 --> 00:05:48.273
we can see indeed that it says Deploying web application

105
00:05:48.273 --> 00:05:54.303
archive\home\kevinj\tomcat\devapps\ mvnblog.war as the last line.

106
00:05:54.303 --> 00:05:57.253
If we look at the Tomcat deployment directory,

107
00:05:57.253 --> 00:06:01.223
indeed we'll see the mvnblog.war file there,

108
00:06:01.223 --> 00:06:04.243
and we'll also see there the mvnblog folders.

109
00:06:04.243 --> 00:06:06.293
The WAR file's been exploded into this folder,

110
00:06:06.293 --> 00:06:11.580
and that folder contains exactly the same things that were in the WAR files,

111
00:06:11.580 --> 00:06:16.100
the WEB-INF folder, web.xml, classes, and inside the classes there's a com,

112
00:06:16.100 --> 00:06:21.313
mantiso, and there's my blogcontroller inside of the actual server itself.

113
00:06:21.313 --> 00:06:24.313
Given that, I can now to go the browser,

114
00:06:24.313 --> 00:06:28.111
and from the browser I can browse to mvnblog/controller,

115
00:06:28.111 --> 00:06:37.000
and there we see the result of the deployment. The application's been correctly deployed.

