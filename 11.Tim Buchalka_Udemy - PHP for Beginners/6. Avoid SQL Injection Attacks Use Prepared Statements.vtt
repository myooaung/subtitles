WEBVTT

00:04.500 --> 00:11.730
There's a second method we can use to avoid Escuela injection prepared statements to use a prepared

00:11.730 --> 00:12.620
statement.

00:12.660 --> 00:16.700
First we write an ethical statement that contains place holders.

00:16.950 --> 00:20.250
Then we bind data to these place holders.

00:20.640 --> 00:28.570
The database server inserts the data safely into the Eskew our statement making ESC fuel injection impossible.

00:31.330 --> 00:33.220
Let's look at an example.

00:33.550 --> 00:41.140
First let's change our Eskew L statement to have place holders instead of concatenating the values from

00:41.140 --> 00:44.040
the farm directly into the string.

00:44.170 --> 00:48.110
A question mark character is used as a place holder.

00:48.190 --> 00:53.470
We don't need to enclose them in quotes or anything just put the question mark where the value will

00:53.470 --> 00:54.570
go.

00:55.510 --> 01:00.820
Then instead of running this ESC you L statement using the query function.

01:01.780 --> 01:06.910
We prepare it for execution using the prepare function.

01:08.330 --> 01:15.950
So will call this function here which returns and ESC U L statement.

01:15.950 --> 01:20.280
If the statement is false there is an error in it.

01:20.300 --> 01:22.860
So will output that error.

01:24.990 --> 01:28.770
Next we need to bind some values are parameters to these.

01:28.770 --> 01:34.220
Place holders using the bind paramo function.

01:35.040 --> 01:41.790
First we passed this function a string that tells it the type of each parameter the type is specified

01:41.790 --> 01:43.770
by one of these characters.

01:43.940 --> 01:49.970
For an integer s for a string and so on we put one character per value.

01:50.190 --> 01:55.390
Then we pass the values in the same order.

01:55.800 --> 02:02.150
So let's call this function and we have three parameters and there are all strings.

02:02.280 --> 02:05.490
The date and time is treated as a string.

02:06.330 --> 02:08.810
So we pass in three S's.

02:09.270 --> 02:15.720
Then we pass in the values which are coming from the Form which are what we were putting in the Eskew

02:15.720 --> 02:18.050
L string directly earlier.

02:21.470 --> 02:26.150
Then we execute the prepared statement using the execute function.

02:28.670 --> 02:36.650
When we call this function the database server inserts the values into the esky Well escaping any quotes

02:36.650 --> 02:39.170
in them if necessary.

02:39.170 --> 02:48.100
If this function returns true then it's worked and we can get the idea of the inserted rijkaard as before.

02:48.920 --> 02:56.890
If it returns false then it's failed and we can print out the error like that.

02:59.760 --> 03:01.510
Let's give that a try.

03:01.620 --> 03:11.190
If I add a value that contains a quote and then submit the farm the rijkaard is inserted with no problems.

03:13.350 --> 03:19.600
One thing we can't do in our code when using prepared statements is view the full Eskew L string that

03:19.610 --> 03:22.110
was executed on the server.

03:22.110 --> 03:29.600
This is because the parameters are inserted into the esky well on the database server not in P HP.

03:32.250 --> 03:37.770
If you really want to see the ask you else statements that are being executed then you can do this by

03:37.770 --> 03:40.870
enabling the query log on the server.

03:41.130 --> 03:46.440
Full instructions on how to do that when the database server documentation here.

03:49.680 --> 03:54.270
So whenever you inserting values that come from an untrusted source.

03:54.270 --> 03:56.960
In other words a farm on a web page.

03:57.060 --> 04:03.060
Then you should always either escaped those values are use prepared statements or otherwise your code

04:03.060 --> 04:06.510
will be vulnerable to ask you well injection attacks.
