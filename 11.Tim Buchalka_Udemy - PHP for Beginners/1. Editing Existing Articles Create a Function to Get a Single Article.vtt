WEBVTT

00:05.220 --> 00:13.870
So far we've developed cold to view a list of articles view an individual article and insert a new one.

00:14.070 --> 00:22.860
Next we need to be able to edit an existing article let's create a new script file for this and call

00:22.860 --> 00:28.620
it edits Article doppie HP.

00:29.790 --> 00:37.220
First we need to know which article we're going to edit in the individual article script.

00:37.260 --> 00:43.260
We're identifying an article by passing an idea in the query string and then retrieving that article

00:43.440 --> 00:46.160
that has this idea from the database.

00:46.320 --> 00:50.640
We need to do exactly the same thing in the edit script.

00:50.640 --> 00:57.120
However rather than copy and paste this code as we are now repeating ourselves is a bad idea so let's

00:57.120 --> 01:02.780
create a function that gets a single article rijkaard Based on the eidy.

01:05.230 --> 01:08.630
First let's create a file in the includes folder.

01:09.290 --> 01:17.780
To put this function will create a file called Article doppie HP to store all functions related to articles.

01:18.130 --> 01:25.300
It's a good idea to organize functions into files each file containing related functions.

01:25.480 --> 01:34.270
Let's create a function called Get article and will pass in the day of the article we want as an argument

01:36.430 --> 01:38.730
in the individual article script.

01:38.860 --> 01:44.440
We using the query function to select the rickert from the database and were concatenating the I.D.

01:44.710 --> 01:46.930
directly into the query string.

01:47.500 --> 01:54.790
We're providing Escuela injection by checking the I.D. numeric here but for a general function it would

01:54.790 --> 02:00.340
be better to use a prepared statement as we saw earlier.

02:00.640 --> 02:08.620
So in our function first let's create the esky well that we want containing the place holder for the

02:08.620 --> 02:18.130
idea then we'll prepare the Eskew our statement and for this we need the database connection which will

02:18.130 --> 02:19.960
need to pass into this function.

02:20.080 --> 02:25.050
So let's add that as an argument like that.

02:26.260 --> 02:30.510
If the statement is false then an error has occurred.

02:30.520 --> 02:32.840
So we'll print that out.

02:33.370 --> 02:42.820
Otherwise we'll bind the idees parameter to the place holder passing in the I.D. argument and binding

02:42.820 --> 02:52.120
it as an integer then will execute it which returns true if it was successful and then we can get the

02:52.120 --> 03:00.110
result from the statement this resultset represents the results of the ESC U L statement.

03:00.310 --> 03:04.390
But we need to get the data from it in a useful format.

03:05.830 --> 03:13.170
The fetch in a function gets an array of data from a result set by default.

03:13.180 --> 03:17.330
We get an array with both numeric and string indexes.

03:17.890 --> 03:24.150
But if we add a second argument to this we just get an associated array.

03:24.160 --> 03:28.090
This is what we want to return from this function.

03:28.090 --> 03:31.350
If no rijkaard is found this method returns NULL.

03:31.480 --> 03:35.490
So we'll take that into account when we call this function.

03:37.810 --> 03:39.850
Finally let's add a p h.

03:39.860 --> 03:43.730
P duck comment block at the top.

03:43.840 --> 03:50.110
This contains a description of what the function does its arguments and the return value

03:52.810 --> 03:54.640
in our article script.

03:55.000 --> 03:58.060
Now we can call this new function.

03:58.360 --> 04:02.360
First will require the file containing the function.

04:04.720 --> 04:10.870
Then we can replace all of this code with a call to the new function.

04:12.980 --> 04:20.540
As we are now using a prepared statement we no longer need to check that the idea is numeric here as

04:20.540 --> 04:25.000
the prepared statement will protect us from esky well injection.

04:27.690 --> 04:29.230
Let's check this works.

04:29.280 --> 04:34.210
If we click on an individual article it works as before.

04:37.200 --> 04:46.230
Now we can do the same in our edits article script so we'll copy this code that gets the article and

04:46.230 --> 04:53.280
paste it in here for now let's just print out the article.

04:57.820 --> 05:04.290
So on the individual article page we have the idea of a record that exists in the query string.

05:04.720 --> 05:09.680
If I change the u r l to edit article that period p.

05:11.710 --> 05:14.770
We get the article details printed out.

05:18.060 --> 05:23.910
So now we have a generic function we can call to get an individual article.

05:23.970 --> 05:29.820
One thing you might be thinking is that if this function relies on the database connection why dont

05:29.820 --> 05:33.290
we require that function in here directly.

05:33.300 --> 05:38.350
We could even use require once just in case we already required it.

05:38.400 --> 05:42.100
The answer is to keep it simple and easy to maintain.

05:42.120 --> 05:47.460
If you have required statements all over the place you can very quickly get spaghetti code.

05:47.610 --> 05:52.920
Well it's very difficult to follow what's going on and it's also very easy to break something.

05:53.010 --> 05:58.560
If you change one of the included files it's better to keep requires to a minimum.

05:58.560 --> 05:59.620
If you can.
