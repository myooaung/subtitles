WEBVTT

00:04.470 --> 00:10.920
When we created the book class by extending the Item class all the properties and methods of the parent

00:11.010 --> 00:16.080
Item class were inherited by the child book class.

00:16.260 --> 00:23.280
So when we called the get listing description method on the book object the method that runs is this

00:23.280 --> 00:26.300
one defined in the Item class.

00:27.030 --> 00:31.440
But what if we want to change how this method works at the moment.

00:31.440 --> 00:35.860
We're just returning a string with a value of the name property.

00:35.880 --> 00:41.930
But in the book Child class we've added another property that we want to include in the description

00:41.940 --> 00:43.250
too.

00:45.690 --> 00:56.790
What we can do is copy this method from the Item class and paste it here in the Child class and then

00:56.790 --> 01:03.990
we can add the additional Arthur property to the string that this method returns like that.

01:05.800 --> 01:13.790
Then when we run this code the additional string is included in the return value.

01:13.840 --> 01:16.490
This is called overriding a method.

01:16.720 --> 01:24.410
We've changed how a method in the parent class works by overriding what it does in the Child class.

01:24.550 --> 01:31.290
What if we want to access the parent classis version of this method though in the parent class.

01:31.390 --> 01:38.950
This method just returns the value of the name property and in the book Class with just a pending something

01:38.950 --> 01:40.760
to that.

01:40.780 --> 01:48.730
So instead of repeating this instead let's replace it by calling the method we're overriding in the

01:48.730 --> 01:49.840
parent.

01:50.200 --> 01:59.680
We do that using the parent keyword followed by two columns and the name of the method.

02:00.130 --> 02:08.080
This will call the method in the parent and return the value so we can append the Arthur property to

02:08.080 --> 02:09.420
it.

02:13.190 --> 02:17.340
When we were in the cold in the browser the results are the same.

02:20.290 --> 02:26.980
One of the advantages of overriding a method like this and calling the parent kwasi is cold for any

02:26.980 --> 02:33.460
code that doesn't change is that any changes to the parent code at art somatically included in the Child

02:33.460 --> 02:36.160
class.

02:36.160 --> 02:44.250
So for example if we add a prefix to the string this method returns in the parent class like that.

02:47.020 --> 02:50.390
This is shown after magically in the Child class too.
