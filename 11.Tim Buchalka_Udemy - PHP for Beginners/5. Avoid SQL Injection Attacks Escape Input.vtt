WEBVTT

00:04.500 --> 00:10.920
We just saw how building an ESC You are statement like this by directly inserting data from a farm can

00:10.920 --> 00:14.230
lead to an ask you an injection attack.

00:14.340 --> 00:22.020
The problem comes from being able to insert quote characters into the ESC you L we saw earlier how if

00:22.020 --> 00:28.440
we want to genuinely insert a value into the database that contains a quote then we need to escape it

00:28.620 --> 00:31.230
by prefixing it with a backslash.

00:33.040 --> 00:40.450
So one option we have is to explicitly escape any quote values in data coming from the farm.

00:40.450 --> 00:47.320
My u l y provides us with the real escaped string function for this along with the escape string function

00:47.710 --> 00:52.670
which is just an alias for the first one but this one is shata to type.

00:55.550 --> 00:58.240
To escape these values coming from the farm.

00:58.400 --> 01:06.770
We wrapped them in my esky rely escaped string function passing in the database connection variable

01:06.770 --> 01:13.130
to the database connection variable is needed because the function takes into account the character

01:13.160 --> 01:15.740
encoding of the database.

01:18.640 --> 01:22.670
Now if we try and insert a value that contains a quote.

01:25.780 --> 01:32.260
The value is inserted successfully and you can see here in the Eskew L. that the single quotes in the

01:32.260 --> 01:37.560
string I provided has been escaped with a backslash before it.

01:39.780 --> 01:47.940
This is a perfectly valid method for finding ESC you l injection and is fine for schadt ESC u l statements.

01:47.940 --> 01:53.940
However if you have lots of values that you inserting into an esky you are statement calling this function

01:53.940 --> 02:01.110
so many times and concatenating so many strings together in one statement could get quite messy and

02:01.110 --> 02:03.430
difficult to maintain.

02:03.480 --> 02:06.870
There is an alternative which will look at next.
