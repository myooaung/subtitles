WEBVTT

00:05.240 --> 00:11.170
A function in a programming language that HP is a self-contained block of statements that can be used

00:11.170 --> 00:13.650
repeatedly in a program.

00:13.810 --> 00:20.800
They have a way of encapsulating code that performs a certain task into a reusable block to create a

00:20.800 --> 00:22.210
function in HP.

00:22.210 --> 00:28.270
We use the function key word followed by the name of the function the name can be anything you like

00:28.510 --> 00:34.300
but it makes sense to give it a meaningful name and name that reflects what the function does.

00:34.420 --> 00:39.150
Then we have some brackets where we put the functions arguments which we'll get to in a moment.

00:39.310 --> 00:45.910
Then some curly braces inside these braces we put the code that we want to execute when the function

00:45.910 --> 00:47.080
is kalid.

00:47.620 --> 00:52.240
Then we call the function by putting its name followed by brackets.

00:54.450 --> 00:56.500
Let's look at an example.

00:56.760 --> 00:59.720
We'll create a new file and can't function.

00:59.800 --> 01:01.560
Examples p s p

01:04.680 --> 01:11.300
will create a function called show message which is just going to eke out a string.

01:11.820 --> 01:14.980
Then we'll call that function like that.

01:17.370 --> 01:23.070
When we opened this script in a browser the message is displayed.

01:23.070 --> 01:28.100
We can also pass data to a function using arguments are parameters.

01:28.500 --> 01:33.310
Arguments are specified after the function name inside the brackets.

01:33.310 --> 01:36.110
A function can have as many arguments as you like.

01:36.240 --> 01:39.470
Separated by commas inside the function.

01:39.470 --> 01:46.050
These arguments are available just like regular variables when we call the function.

01:46.050 --> 01:51.240
We need to pass in values for these arguments inside the brackets.

01:52.770 --> 01:56.260
Let's add an argument to our example function.

01:56.760 --> 02:03.840
Then inside the body of the function we can access the value of this argument just like a variable.

02:03.840 --> 02:09.310
Then when we call the function we need to pass in a value for this argument like that.

02:11.820 --> 02:14.540
In the browser we see the message coming from the function.

02:14.580 --> 02:16.190
With the argument.

02:18.800 --> 02:25.120
When we declare a function with one or more arguments we can include a default value for them.

02:25.130 --> 02:30.860
This means that when we call the function we can emit that argument and its value will be the default

02:30.890 --> 02:32.840
we supplied.

02:32.870 --> 02:37.000
We can still pass in an argument and override this default however.

02:39.740 --> 02:46.730
If we make the arguments to our function optional by giving it a default value we can still call the

02:46.730 --> 02:52.870
function with an argument and that the value it uses.

02:53.600 --> 03:02.430
But now we can omit the arguments like that and the function uses the default value.

03:04.700 --> 03:07.860
We can also return a value from a function.

03:08.030 --> 03:14.750
Any variables declared inside a function are not available outside of it to access data outside of the

03:14.750 --> 03:15.310
function.

03:15.320 --> 03:22.520
We need to return a value from it to return a value reused a return statement followed by the value

03:22.520 --> 03:23.930
we want to return.

03:24.740 --> 03:31.490
When we call the function the return value can be accessed by using it directly are by assigning it

03:31.520 --> 03:33.130
to a variable.

03:33.260 --> 03:36.830
The return statement returns immediately from the function.

03:36.830 --> 03:40.780
Any code after the return statement isn't executed.

03:43.560 --> 03:46.540
Let's change the function to return a message.

03:46.920 --> 03:51.510
Instead of printing it out by returning the string like that.

03:51.960 --> 03:57.140
Then when we call the function will assign its return value to a variable.

03:57.660 --> 04:01.670
Then print that variable out like that.

04:04.220 --> 04:06.870
And in the browser the result is the same.

04:08.880 --> 04:13.180
You can also have multiple return statements in the same function.

04:13.440 --> 04:20.430
If we change the argument of our function to a billion and then inside the body of the function add

04:20.430 --> 04:30.420
an if statement that returns one message if the argument is true and another if it's false when we call

04:30.420 --> 04:38.170
the function and passin true in the browser we get one message.

04:38.670 --> 04:41.060
If we change the argument to false.

04:43.050 --> 04:44.920
We get the other message.

04:47.450 --> 04:55.730
BHP has hundreds of built in functions and they're all documented in the P HP documentation for example

04:55.910 --> 05:04.220
mathematical functions functions for processing strings and so on the documentation for each function

05:04.490 --> 05:07.140
has full details on their arguments.

05:07.190 --> 05:10.870
What they do and any return values.

05:14.340 --> 05:19.810
As for naming standards there aren't any rules about how standalone functions should be named.

05:19.830 --> 05:26.650
You can name functions however you like for example like this which is called Camel case.

05:29.310 --> 05:33.540
All like this separating words with underscores.

05:33.540 --> 05:35.160
Which ever method you choose.

05:35.160 --> 05:37.680
The important thing is to be consistent.

05:39.420 --> 05:41.890
I prefer to use camel case like this.

05:42.180 --> 05:46.100
Because as we'll see later on when we look at objects printed P 8 p.

05:46.260 --> 05:50.100
There is a standard for naming functions inside classes.

05:52.780 --> 05:59.530
Finally I want to mention comments specifically comments about using P 8 p Duck are p s p documentor

05:59.530 --> 06:05.110
syntax by adding a description of a function using a P E P duck comment.

06:05.500 --> 06:11.720
Not only is it easy to see what the function does what its arguments are and what its return value is.

06:11.740 --> 06:14.480
There are a couple other advantages too.

06:14.500 --> 06:20.290
First you can burn the p p document to program on your code and it will after magically create documentation

06:20.290 --> 06:21.750
for it.

06:21.790 --> 06:27.130
Also lots of code editors will use the P2P documents to after all complete your code.

06:27.400 --> 06:29.780
Use type hinting and so on.

06:29.980 --> 06:37.210
Plus as p s p doc is so widely used or the developers will be easily able to understand your code and

06:37.270 --> 06:39.690
vice versa.

06:40.010 --> 06:44.210
Let's add a P It p duck comment to this function.

06:44.950 --> 06:52.270
It contains a description of what the function does what its arguments are including their types and

06:52.270 --> 06:59.300
the return value as we add functions throughout the rest of this course albhy including p s p documents

06:59.440 --> 07:00.370
for each one.
