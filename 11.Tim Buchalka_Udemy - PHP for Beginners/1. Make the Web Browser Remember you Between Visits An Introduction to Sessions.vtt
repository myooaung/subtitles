WEBVTT

00:05.230 --> 00:10.990
When you request a web page either by typing in who you are well clicking on a link or submitting afar

00:11.030 --> 00:17.860
on the web browser sends the request to the web server and the web server sends a response back.

00:17.860 --> 00:25.720
For example a page of Eight dml if you request the same page again are indeed another page on the same

00:25.720 --> 00:26.520
site.

00:26.740 --> 00:31.960
The web server doesn't know that it's already sent you something in a previous request.

00:32.290 --> 00:34.690
As far as the web server is concerned.

00:34.870 --> 00:39.520
Each request is unrelated and independent to any previous one.

00:39.520 --> 00:47.350
This is because 8 TTP the protocol used between web browsers and servers is stateless.

00:47.950 --> 00:49.930
Not having state isn't very useful.

00:49.930 --> 00:57.400
However if we want to remember that someone has already been to our site which we need for luggin we

00:57.400 --> 01:01.570
can add States by using sessions when using sessions.

01:01.570 --> 01:07.810
The first time you visit a website the server generates a unique identifier that is sent back to the

01:07.810 --> 01:11.580
browser along with the requested content.

01:12.340 --> 01:19.210
When you request another page this identifier is sent back along with the request as well.

01:19.210 --> 01:24.340
So the server knows you are really been there before and can respond accordingly.

01:24.670 --> 01:27.300
So we can use this for logging in.

01:31.480 --> 01:36.230
In P S P T U sessions we call the session start function.

01:36.290 --> 01:40.050
This creates a new session resumes an existing one.

01:43.020 --> 01:47.520
When a page that contains a call to the session start function is requested.

01:47.550 --> 01:54.870
The server generates a unique session I.D. which is a random string of letters and numbers.

01:54.900 --> 02:03.600
It then creates a file to store the session data identified by this eidy when the server sends the response

02:03.600 --> 02:05.180
back to the user.

02:05.220 --> 02:12.270
It sets a cookie in the browser that contains the same session idae a cookie is simply a sharp string

02:12.270 --> 02:14.840
of text stored in the web browser.

02:18.180 --> 02:23.760
Once a session is started you can store data in the session that you can access from one request to

02:23.760 --> 02:26.510
another in P HP.

02:26.520 --> 02:28.380
Data is stored in the session.

02:28.380 --> 02:31.270
Super global which is an array.

02:31.320 --> 02:37.200
Any data you put into this array are stored on the server in the file for that session.

02:37.290 --> 02:42.590
You can access these data from any page where you call the session start function.

02:45.740 --> 02:47.370
Let's look at an example.

02:47.690 --> 02:51.700
Let's create a new file called session exampled up here it's put

02:56.060 --> 02:56.660
in here.

02:56.660 --> 03:04.040
We'll start a resume the session with session starts then with initialise an element in the session

03:04.040 --> 03:08.200
variable called count to 1.

03:08.420 --> 03:13.240
You can call session elements whatever you like in the session array.

03:13.370 --> 03:17.370
Finally let's just print this out like that.

03:20.840 --> 03:23.270
In the browser we get the number one.

03:23.450 --> 03:30.290
If I refresh the page a few times we still get the number one.

03:30.290 --> 03:37.370
This is as expected as we're simply setting this value to one and then printing it out the first time

03:37.370 --> 03:38.900
we open this script.

03:38.900 --> 03:43.400
The session is started and this session variable element doesn't exist.

03:43.580 --> 03:45.230
So we're creating it.

03:45.650 --> 03:48.950
However the second and subsequent times we open this script.

03:49.160 --> 03:52.940
This line resumes the existing session.

03:52.940 --> 03:56.300
So this arrangement already exists.

03:56.300 --> 04:06.920
We can check for that using the set function and if it is set let's just increment its value by one.

04:07.040 --> 04:08.590
If it's not set.

04:10.220 --> 04:13.020
We'll just initialize it as before.

04:17.010 --> 04:21.510
Now when we open the script for the first time we see the value of one.

04:21.690 --> 04:28.700
If I refresh the page now however we get to every time I reload the page.

04:28.860 --> 04:30.870
The value is incremented.

04:31.020 --> 04:35.470
We're using the session to remember that we've already been here before.

04:38.700 --> 04:45.150
There are a couple of things you need to remember when using sessions first the session data is written

04:45.150 --> 04:47.290
to a file by default.

04:47.430 --> 04:49.680
This can be slow and is slower.

04:49.680 --> 04:51.730
The more data you write to it.

04:51.780 --> 05:00.060
So we only store in the session smile's values like a billion are a numeric idea of a record for example.

05:00.060 --> 05:07.560
Secondly the session starts line needs to be kalid before you send any content to the browser.

05:07.560 --> 05:14.250
This is because the session uses cookies and the cookie data is sent in the headers just like the cold

05:14.260 --> 05:16.410
restaff redirection earlier.

05:16.830 --> 05:21.690
If you call session start after you've used Echo are sent to make it to email.

05:21.690 --> 05:22.990
Then you'll get an error.
