WEBVTT

00:05.570 --> 00:11.020
One of the columns in the article table is a foreign key to the category table.

00:11.450 --> 00:18.980
So when we select all the columns in the query this idea is included in the results to get the name

00:18.980 --> 00:21.430
of the category in the same resultset.

00:21.650 --> 00:23.920
We can use a join the query.

00:25.630 --> 00:34.840
A select query specifies the columns and the table like this we can join this to another table by using

00:34.840 --> 00:39.270
the join key word followed by the name of the table were joining two.

00:42.690 --> 00:50.850
If we run this query on the database joining the article and category tables the resultset contains

00:50.850 --> 00:58.550
the product of both tables each row from the first table is matched to each row of the second table.

00:59.530 --> 01:05.820
This isn't very useful so we need to add a condition to this query using a where clase.

01:08.380 --> 01:15.130
We can specify in the WHERE clause that the two related columns the primary key and foreign key should

01:15.130 --> 01:16.060
match.

01:17.050 --> 01:22.510
When working with more than one table in a single query you can prefix the column name with the table

01:22.510 --> 01:24.320
name followed by a dot.

01:24.330 --> 01:24.490
Ah.

01:24.490 --> 01:25.290
Period.

01:25.360 --> 01:29.040
So it's clear which table the column is coming from.

01:33.500 --> 01:40.520
So if we add a square class to the query that matches the category idees field in the article table.

01:40.520 --> 01:48.560
So the idea field in the category table when we run this query the resultset contains the columns from

01:48.560 --> 01:53.450
the article table and also all the columns from the category table.

01:54.660 --> 02:00.720
We only get two records because these are the only Ricardos where the where class is true.

02:03.410 --> 02:09.980
All the other records in the article table have the category idae set to NULL which doesn't match any

02:09.980 --> 02:12.900
Ricardos in the category table.

02:17.070 --> 02:21.960
The join condition can also be specified using the on keyword.

02:22.230 --> 02:27.980
So instead of the join condition being in the WHERE clause we specify it using on.

02:30.070 --> 02:33.380
Where conditions can still be added to a query like this.

02:33.460 --> 02:38.420
But using on separates the join condition from the other where conditions.

02:43.070 --> 02:50.240
So if we use on instead of putting the condition in the WHERE clause we get the same results.

02:50.540 --> 02:54.170
We still only get the articles that have categories.

02:54.170 --> 02:59.700
In other words those records where the category idea field isn't NULL.

02:59.780 --> 03:01.650
This is known as a fall.

03:01.660 --> 03:04.540
Join are a full outer join.

03:08.330 --> 03:11.430
To get all the records from the first table.

03:11.540 --> 03:20.530
Even if the value in the second table is null we use a left join our way left out join left jannine

03:20.630 --> 03:23.000
and left out to join the same.

03:23.000 --> 03:25.590
The outer key word is optional.

03:29.860 --> 03:33.260
So if we change this join to a left join.

03:35.600 --> 03:42.650
All of the article records are returned including those that don't have a category where the category

03:42.650 --> 03:44.650
idae field is null.

03:48.820 --> 03:54.460
There's an excellent article on this site here which has a visual representations of how the various

03:54.460 --> 04:01.900
joins work including a right to join which as you might expect works the opposite way around to the

04:01.900 --> 04:02.880
left join.
