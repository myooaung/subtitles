WEBVTT

00:05.250 --> 00:08.610
When esky Well statement has a where clause in it.

00:08.610 --> 00:13.070
The database will retrieve all the records that match the condition.

00:13.350 --> 00:20.970
To do this it has to scan through the entire table looking at every single record to see if it matches

00:22.470 --> 00:24.690
if the table has a lot of roles in it.

00:24.690 --> 00:27.930
Then this could take an unacceptably long time.

00:28.320 --> 00:31.150
There is a way to fix this however.

00:32.040 --> 00:36.390
First let's imagine a book perhaps one with many pages.

00:36.900 --> 00:42.900
If you want to look up something specific you wouldn't scan through every page of the entire book looking

00:42.900 --> 00:44.110
for it.

00:44.160 --> 00:52.830
Instead you use the index the index lists all the pages that match a certain topic or item using the

00:52.830 --> 00:53.640
index.

00:53.760 --> 01:00.420
You can find all the pages that contain something about that topic very quickly.

01:00.900 --> 01:03.330
It's the same with the database.

01:03.510 --> 01:10.970
We can create an index on one or more columns so that when we select some data using a web class the

01:10.980 --> 01:16.040
condition in the WHERE clause uses the index to find the matching rows.

01:16.080 --> 01:18.520
Rather than scanning the entire table.

01:18.930 --> 01:21.530
This is much much faster.

01:25.250 --> 01:33.590
In our articles table if we look at the structure of the table down here the tables indexes is listed.

01:33.620 --> 01:40.310
We've already got an index on the idees column which was created when we assigned to this field to be

01:40.310 --> 01:46.030
a primary key when we created the table.

01:46.790 --> 01:54.500
So any where clause that uses the D column is already using this index.

01:54.680 --> 01:57.800
So all those queries are okay.

01:57.800 --> 02:08.630
However if we query the database using the title column where we don't have an index the database has

02:08.630 --> 02:12.910
had to scan the entire table looking for matches.

02:13.190 --> 02:16.160
We dont notice with so few records.

02:16.280 --> 02:22.430
But if we had a database with hundreds of thousands of records then we'd certainly notice how slow it

02:22.460 --> 02:23.050
was.

02:26.430 --> 02:34.080
To fix this let's add an index on the title column in the structure tab in the indexes section.

02:34.500 --> 02:38.660
Let's create an index on one column.

02:39.570 --> 02:41.850
You can add an index name if you like.

02:41.880 --> 02:42.890
I'll leave this blank.

02:42.900 --> 02:50.940
And the database server will fill it in for you so we'll do that for the type of index we have various

02:51.000 --> 02:52.320
options.

02:52.320 --> 02:59.430
We already have a primary index on the idees column and you can only have one primary key so we dont

02:59.430 --> 03:03.030
want that ignoring the last two options.

03:03.030 --> 03:12.300
For now we can either create a unique index largest index unique index will only allow 1 rijkaard to

03:12.300 --> 03:19.100
have a particular value for that field as more than one article could in theory have the same title.

03:19.230 --> 03:24.270
We dont want that so we just want a regular index.

03:24.990 --> 03:33.310
Then we need to select the column which is the title column and click go and that's it.

03:33.660 --> 03:37.940
The database then maintains the indexes after magically in the background.

03:38.160 --> 03:43.600
So once you've defined the index you dont have to do anything else.

03:46.910 --> 03:58.100
So now when we query the table using the title field in the where class the query uses the index.

03:58.580 --> 04:01.780
Not noticeable with so few records in a table.

04:01.970 --> 04:05.960
But if we had many more we'd certainly notice the difference.

04:05.960 --> 04:13.540
So when ever you use a web class in a query any columns in the WHERE clause need to have an index.

04:13.700 --> 04:17.260
Otherwise your database queries could be very slow.

04:21.040 --> 04:24.260
Another use of indexes is too hard data.

04:24.640 --> 04:30.520
When you select data from a database the order of the records in the resultset is not guaranteed.

04:30.550 --> 04:37.480
Theoretically they could come back in any order if you want to them in a specific Barder then you need

04:37.480 --> 04:46.660
to include an order by in the ESC you L statement you couldn't order the resultset by one or more columns

04:47.350 --> 04:48.270
by default.

04:48.340 --> 04:56.550
Results are cited in ascending order to sort of results in descending order at the desk keyword.

04:56.710 --> 04:58.020
After the column name.

05:01.890 --> 05:09.370
If we select all the records from the article table the data comes back in this order.

05:10.260 --> 05:12.090
Let's do this by title

05:15.990 --> 05:23.680
and now the resultset is in Title arda alphabetically.

05:24.480 --> 05:27.590
To do it in reverse alphabetical order.

05:29.460 --> 05:34.350
We add desk after the column like that.

05:35.420 --> 05:40.350
Dont forget you need an index on any column you are ordering by.

05:40.440 --> 05:46.700
Otherwise the database has a lot more work to do to start the entire resultset before it sent it back

05:46.700 --> 05:48.490
to you.

05:48.500 --> 05:56.120
Note that inserting updating data in a table with indexes takes more time than with the table without

05:56.570 --> 06:03.650
because the indexes also need to be updated so only create indexes and columns that will be frequently

06:03.650 --> 06:06.100
searched are used for ordering.
