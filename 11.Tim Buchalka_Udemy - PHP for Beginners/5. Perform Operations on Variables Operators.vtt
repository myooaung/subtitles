WEBVTT

00:05.350 --> 00:12.280
Depending on the type of value in a variable we can apply various different operators to them.

00:12.280 --> 00:21.830
For example with numbers we can use arithmetic operators to add subtract divide multiply and so on.

00:23.380 --> 00:29.070
For example here we've got two variables with integer values.

00:29.410 --> 00:35.970
We can add a number to one of the variables we can multiply them together for example.

00:36.190 --> 00:45.330
And so on using basic mathematical operations you are no doubt familiar with when we run this code.

00:46.180 --> 00:51.090
We see the result of the addition and multiplication.

00:55.040 --> 00:57.950
We just did some maths with integer values.

00:57.970 --> 01:00.680
But we can also do this with floats.

01:00.680 --> 01:06.400
Here we have some more variables but this time one of them is a float value.

01:06.500 --> 01:08.000
If we multiply them together

01:10.700 --> 01:12.470
we get this result.

01:12.890 --> 01:16.770
Note how the result is a float.

01:17.930 --> 01:24.290
Even though we multiplied a float by an integer in some languages.

01:24.290 --> 01:31.190
This would give an error but p p is very forgiving and with evaluates the integer value used in the

01:31.190 --> 01:34.920
calculation as a float after Mattingly.

01:38.520 --> 01:43.470
There are also operators that we can use on string values.

01:45.380 --> 01:54.820
For example if we have two strings like this we can can Catton them together using the dot operator.

01:55.070 --> 02:01.280
If we view this in the browser we see the strings join together.

02:03.950 --> 02:07.570
You can use the operator more than once in a single instruction.

02:07.580 --> 02:08.560
If you like.

02:08.630 --> 02:12.250
So let's have a space between these two values.

02:13.250 --> 02:19.820
And now when we run the code we have a space between the two strings.

02:23.460 --> 02:28.410
What do you think will happen when you try and do something like this here.

02:28.440 --> 02:37.590
We're multiplying a string by an integer and then assigning the results of multiplying these two together

02:37.890 --> 02:43.140
back to the first variable which contains a string.

02:44.220 --> 02:51.060
Then we're printing out the result of this variable when we run this code.

02:51.360 --> 02:59.190
We get an integer result so this is what is contained in this variable now.

03:00.690 --> 03:01.100
P.

03:01.140 --> 03:08.690
P has changed the type of this variable from a string to an integer.

03:11.390 --> 03:15.640
This is known as type conversion type juggling.

03:15.650 --> 03:18.300
This is done automatically by P.

03:18.530 --> 03:20.700
Whenever it's necessary.

03:20.900 --> 03:26.680
You can perform an explicit type conversion if you like which is known as casting.

03:26.780 --> 03:29.560
However it's not very common to have to do that.

03:29.750 --> 03:34.250
So we won't worry about that just yet.

03:35.600 --> 03:43.430
For boolean values we have all logical operators we can use these to change the value of a boolean variable

03:43.720 --> 03:47.410
or combine different boolean variables together.

03:50.050 --> 03:54.780
For example here we have a couple of billion variables.

03:55.120 --> 04:01.540
If we print out the value of the first one we get true.

04:04.510 --> 04:11.920
We can negate this boolean value using the not operator which is an exclamation mark in front of the

04:11.920 --> 04:13.920
variable like this.

04:17.970 --> 04:27.110
This basically means true is change to false and false is changed to true in the browser we now get

04:27.110 --> 04:29.100
to value are false.

04:31.440 --> 04:38.130
We can also combine boolean variables using and are are exclusive are.

04:42.100 --> 04:49.620
For example if we print out the value of is editor or is admen.

04:52.230 --> 04:56.810
The result of this is true.

04:57.030 --> 05:04.010
This is because true are false is true.

05:04.020 --> 05:05.730
If we change this to and

05:09.660 --> 05:13.970
then in the browser we get the false.

05:16.680 --> 05:23.640
This is because true and false results in false.

05:26.530 --> 05:33.900
The results of combining various boolean values using these operators now shown here in the documentation.
