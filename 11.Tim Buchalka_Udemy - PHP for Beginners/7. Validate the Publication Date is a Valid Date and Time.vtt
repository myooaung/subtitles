WEBVTT

00:05.210 --> 00:12.530
What happens if we enter a value in the published field but it's not a valid date and time when I submit

00:12.560 --> 00:13.540
the form.

00:13.700 --> 00:21.650
The record is inserted successfully but the value inserted is all zeros.

00:21.650 --> 00:25.690
That's because this field only accepts a date time string.

00:25.940 --> 00:34.240
So if we try and insert something invalid the database server sets it to this empty date time value.

00:35.420 --> 00:41.870
So before we insert it we need to validate this value just as we're validating that the title and the

00:41.870 --> 00:45.110
content aren't empty.

00:46.130 --> 00:53.500
To insert a date time value we need a string that consists of year month day hour minute and second

00:53.990 --> 01:00.230
although as described here in the movie idb documentation we can use different delimiters and vary the

01:00.230 --> 01:01.670
farm slightly.

01:02.300 --> 01:08.640
Let's keep it simple however and specify that a date time string has to be in this format.

01:08.960 --> 01:14.830
The date part separated by hyphens and the time separated by Colon's.

01:16.970 --> 01:17.390
P. H.

01:17.390 --> 01:25.130
P contains a date time class formulating dates and times to validate a string that contains a date.

01:25.160 --> 01:31.890
We can create a date time object and this create from farm at function allows us to do just that.

01:32.180 --> 01:35.990
We'll go into classes and objects later on in the course.

01:35.990 --> 01:43.970
So for now we'll use the procedural style function to create a date time based on a farm that we pass

01:43.970 --> 01:47.330
in the format as a string using these characters.

01:47.480 --> 01:52.200
Each character representing the part of a date are time.

01:55.660 --> 02:06.490
So if the value isn't empty let's create a date time object from it passing in the expected format.

02:07.000 --> 02:12.110
This string represents the farm match we just saw in the database documentation.

02:12.220 --> 02:18.050
The four digit year to date month and day separated by hyphens.

02:18.100 --> 02:24.470
Then the space and hours minutes and seconds separated by comments.

02:24.850 --> 02:31.270
If the function was an able to create a date time from that string it returns false.

02:31.600 --> 02:34.920
In which case we add the validation error.

02:38.070 --> 02:39.900
Let's give that a try.

02:39.930 --> 02:48.530
If I enter an invalid date and time and submit the farm we get the error message.

02:48.720 --> 02:56.240
If I enter a valid date and time then it validates correctly.

02:56.670 --> 02:59.820
However watch what happens when I enter this state

03:02.610 --> 03:09.990
and submit the form this date says the 30th of February.

03:10.110 --> 03:13.280
But we don't get the validation error message.

03:19.160 --> 03:27.170
In the database the last record has been inserted but the date and time have been set to all zeros again.

03:29.470 --> 03:35.560
To see what happened let's print out the contents of the date time object using the date format function

03:36.400 --> 03:39.310
and then exiting the script.

03:42.640 --> 03:50.380
If I submit the farm with the same values as before with the date of the 30th of February we get this

03:50.380 --> 03:53.440
date the 2nd of March.

03:53.860 --> 04:00.760
What's happened is H HP has converted the invalid date to a valid one by carrying the extra days over

04:00.970 --> 04:03.100
into the next month.

04:03.310 --> 04:05.950
The database server won't do this though.

04:05.950 --> 04:07.900
Hence the empty date time.

04:07.900 --> 04:11.220
When we try and insert a rijkaard with this value.

04:13.650 --> 04:22.230
When HP does this it generates a warning message that we can access by car they get last errors function.

04:22.230 --> 04:28.130
So let's call this function and print out its return value.

04:30.730 --> 04:37.990
When we submit the farm again we get this array with a warning that the date was invalid and also a

04:37.990 --> 04:40.630
count of the number of warnings.

04:43.400 --> 04:49.630
So we can check for any warning messages by checking that the number of warnings is more than zero.

04:50.270 --> 04:55.260
And if so add a validation error message like that.

04:58.720 --> 05:08.950
Now if we submit the same value we get a validation error message if we correct the date and submit

05:08.950 --> 05:10.010
the farm.

05:10.060 --> 05:19.560
The record is inserted in the database the correct date and time have been inserted successfully.
