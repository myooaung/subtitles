WEBVTT

00:04.530 --> 00:11.060
When a user logs in we're comparing the username and password they supply in the log in farm to have

00:11.060 --> 00:13.730
these values in their database.

00:14.100 --> 00:18.020
At the moment were storing the password in clear text.

00:18.060 --> 00:20.730
In other words you can read it.

00:23.120 --> 00:29.500
Storing passwords in clear text in the database like this is a very bad idea.

00:30.080 --> 00:36.080
If a hacker manages to get hold of your database then they have a list of usernames and passwords they

00:36.080 --> 00:39.900
can use to log in to your site.

00:39.980 --> 00:44.980
Also people tend to reuse the same password across multiple sites.

00:44.990 --> 00:51.320
I've done that myself so this arsehole gives a hacker potential to use these credentials on other sites

00:51.350 --> 00:52.900
too.

00:54.260 --> 01:01.070
So instead of storing them in plain text we want to hide them in some way so that even if someone gets

01:01.130 --> 01:05.360
access to the database they can't read them.

01:05.360 --> 01:14.630
We can do this by hashing the passwords using a hash function a hash function simply transforms a string

01:14.870 --> 01:19.580
into another string which is called a hash.

01:19.580 --> 01:22.130
This is known as a one way function.

01:22.160 --> 01:26.950
It only works transforming the original string into the hash.

01:27.440 --> 01:31.250
However it's impossible to work out what the original string was.

01:31.250 --> 01:33.770
If you only know the hash.

01:33.770 --> 01:37.560
This is why this is not encryption with encryption.

01:37.580 --> 01:39.910
You could get back to the original string again.

01:39.950 --> 01:41.430
R d Krypto it.

01:41.480 --> 01:47.150
If you want it to with a hash there's no way to d hash it.

01:50.960 --> 01:56.660
There are several hash functions available in P HP that use different hashing algorithms.

01:56.960 --> 02:06.170
For example n d 5 s h 1 and a general hash function that you can specify different algorithms with.

02:06.770 --> 02:12.140
However as you can see from the documentation using these hashing algorithms is not recommended for

02:12.140 --> 02:16.550
hashing passwords as even though they are one way functions.

02:16.550 --> 02:20.960
It can be easy to calculate the original string from the hash.

02:20.960 --> 02:23.540
So these are insecure.

02:26.400 --> 02:31.950
Fortunately we don't need to worry about which algorithm to use when hashing passwords.

02:32.190 --> 02:37.920
P HP has a function designed specifically for securely hashing passwords.

02:37.950 --> 02:44.580
This uses one of the most secure hashing algorithms available and also uses a technique called salted

02:44.580 --> 02:48.200
hashing which makes it even more secure.

02:50.590 --> 03:00.190
Let's look at an example in a new file called hashing example that p p.

03:00.530 --> 03:08.750
Let's add a variable with a password in it and then create a hash of that password by calling the password

03:08.780 --> 03:10.030
hash method.

03:14.060 --> 03:19.850
The second argument to the password hash function is which algorithm to use.

03:19.880 --> 03:25.120
There are a few options for this but the best one to use is password default.

03:25.430 --> 03:29.740
Using this constant will use the best algorithm available at the time.

03:29.870 --> 03:37.370
So if a new stronger hashing algorithm is added to p HP The next time you use this method that algorithm

03:37.370 --> 03:39.150
will be used.

03:39.470 --> 03:46.160
Details of which algorithm was used in generating their hash are contained inside the hash string itself

03:46.490 --> 03:53.440
so you dont need to remember which one was used.

03:53.580 --> 04:00.950
If we do use this one then the documentation recommends stirring the hash in a database column of 255

04:00.950 --> 04:08.700
characters in length which is the length of the password column we created in the user table earlier.

04:10.560 --> 04:12.880
So let's use password default.

04:12.930 --> 04:14.920
In our example code.

04:18.540 --> 04:22.270
Then let's just close out this value.

04:25.070 --> 04:30.690
When we run this cold and view the results in the browser there's the hash of the password.

04:31.130 --> 04:38.400
Note that if I refresh the page the hash changes even though the password is staying the same.

04:38.570 --> 04:45.430
This is because of random characters called a salt added to the password before it's hashed.

04:45.650 --> 04:51.610
This data is stored with this hash string though so it's not necessary to remember it separately.

04:51.770 --> 04:55.250
It's all dealt with automatically by p p.

04:55.880 --> 04:57.740
Let's copy this hash value

05:01.280 --> 05:09.080
and then back in the code will comment out these two lines and assign the value we just copied to the

05:09.080 --> 05:10.800
hash variable.

05:14.910 --> 05:22.260
To verify that a password matches a hash we use the password verify function which returns true if a

05:22.260 --> 05:26.000
password and hash match and false otherwise.

05:27.830 --> 05:35.870
So let's call this function and just dump out the results passing in the password and hash value we

05:35.870 --> 05:37.760
just generated.

05:40.440 --> 05:46.350
And as that hash was generated from that same password the function returns true.

05:48.720 --> 05:51.300
If we change the password.

05:53.410 --> 05:56.290
Then the function returns FALSE.

05:58.230 --> 06:03.150
So this is the secure way to deal with passwords in P HP.

06:03.150 --> 06:07.880
The password hash function is used to generate to secure a password hash.

06:08.010 --> 06:14.940
And this is what stood in the database when a user supplies a password on a log in page for example

06:15.450 --> 06:21.660
the password verify function is used to check if this matches the stored hash.
