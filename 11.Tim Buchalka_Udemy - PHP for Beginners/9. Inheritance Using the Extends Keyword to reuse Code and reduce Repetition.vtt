WEBVTT

00:04.510 --> 00:09.830
A big advantage that object oriented cold gives us is inheritance.

00:09.910 --> 00:14.990
Inheritance is simply a way of reusing code and avoiding repetition.

00:15.520 --> 00:17.220
Let's look at an example.

00:17.500 --> 00:24.340
Here we have an Item class that could represent items for sale on an e-commerce site for example.

00:24.670 --> 00:30.550
The class has one public property name and one public method.

00:30.550 --> 00:37.680
This method returns a string containing the description of the item for a listing page at the moment.

00:37.690 --> 00:43.790
This just returns the name of the item in our test script.

00:44.030 --> 00:51.190
We're requiring the file where the class is defined creating a new object of that class setting the

00:51.190 --> 00:55.840
property and finally calling the method echoing out its result

00:59.050 --> 01:00.930
when we run this cold in the browser.

01:00.940 --> 01:05.470
We see the result of calling the method.

01:06.010 --> 01:11.380
This class could represent generic items for sale on the e-commerce site.

01:11.380 --> 01:14.190
The site might also sell books however.

01:14.500 --> 01:20.230
So let's create a book class for those kalid book.

01:22.900 --> 01:31.930
Just like a generic item a book will have a name property along with an additional author property and

01:31.930 --> 01:35.260
we need to get a listing description method.

01:35.290 --> 01:41.420
Just like the Item class in our test script.

01:41.560 --> 01:53.470
First let's require this file then create a new book object assign some values to its properties and

01:53.560 --> 02:01.540
echo out the result of calling the method again and just so that the results are on different lines

02:01.540 --> 02:03.520
when we run the code in the browser.

02:03.550 --> 02:08.920
Let's add a line break element between the method calls like that

02:12.610 --> 02:13.410
in the browser.

02:13.420 --> 02:19.060
In addition to the description we had before we now have the description of the book object.

02:22.040 --> 02:25.240
We've duplicated a lot of cold here though.

02:25.700 --> 02:35.060
The book class would seem to be a more specialized version of an item only adding the Arthur property.

02:35.120 --> 02:40.380
This is where we can use inheritance to remove this duplicated code.

02:40.460 --> 02:45.580
Let's change the book class so that it extends the Item class.

02:49.810 --> 02:56.770
We do this by putting extends after the class name followed by the name of the class we are extending.

02:57.070 --> 03:04.420
When one class extends another all of the properties and methods of the class being extended are inherited

03:04.750 --> 03:08.290
by the class that's extending it.

03:08.290 --> 03:15.940
So as the name property and the get listing description method in the Item class are the same.

03:15.940 --> 03:21.040
We can remove them from the book class now like that.

03:23.530 --> 03:30.700
We can still set the values of these properties and call the method as these are inherited from the

03:30.700 --> 03:31.980
Item class.

03:35.210 --> 03:41.910
And when we run the code the result is the same as before the Item class.

03:41.930 --> 03:48.920
The class being extended is referred to as the parent class and the book class is referred to as the

03:48.920 --> 03:50.500
Child class.

03:50.840 --> 03:56.810
The book class has inherited all the properties and methods of the parent Item class.

03:56.810 --> 04:01.760
But we've extended this class by adding an additional Arthur property.
