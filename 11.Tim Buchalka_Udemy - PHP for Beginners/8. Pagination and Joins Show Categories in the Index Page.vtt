WEBVTT

00:05.300 --> 00:12.040
If an article has related categories then these are shown on the individual article page.

00:12.950 --> 00:17.760
Let's add the article categories to the articles on the index page too.

00:21.220 --> 00:27.640
As we saw earlier to get a list of articles along with their categories we need a query like this that

00:27.640 --> 00:31.940
joins the article and category tables via the join table.

00:35.540 --> 00:38.570
Note how the article data are repeated.

00:38.630 --> 00:42.390
If the article is related to more than one category.

00:43.980 --> 00:48.470
This is fine if we want all the article records and their categories.

00:51.100 --> 00:59.360
However on the index page we're using the limit and offset clauses to paginate the list of articles.

00:59.470 --> 01:01.470
If I add these to the query.

01:02.920 --> 01:11.860
Along with an ORDER BY clause when we execute this esky Well we get a page of results but this article

01:11.890 --> 01:16.410
is repeated once for each category it's related to.

01:17.900 --> 01:24.830
We can't use this to display a page of article records as there aren't enough articles for a full page

01:25.490 --> 01:32.790
and the number of unique articles we get back depends on how many categories an article is related to.

01:35.690 --> 01:42.060
So what options do we have for getting the categories for each article on the index page.

01:43.070 --> 01:47.380
We could get the page as we're doing now without any joins.

01:47.630 --> 01:55.430
And then when we display each article get the categories far that article in a separate query.

01:55.430 --> 02:00.390
This would mean many queries to the database though and wouldn't be very efficient.

02:02.200 --> 02:09.880
We could loop around these results collect the article ideas in an array and then get the associated

02:09.880 --> 02:17.220
categories for those I.D. This would only be to query's to the database per page.

02:20.350 --> 02:25.270
There is a third way we could do it with just one query.

02:25.270 --> 02:30.490
Let's start with the ASCII wealth for a single page which is what we're using now.

02:30.520 --> 02:36.700
This will get a page of article Ricardos based on the limit and offset clauses.

02:40.560 --> 02:43.400
If I put brackets around this query.

02:47.330 --> 02:50.070
This makes it a sub query.

02:50.210 --> 02:55.770
We can select data from this just as though it was a normal table.

02:56.120 --> 03:03.110
We have to add an alias when selecting from a sub query like this by putting As and a table name of

03:03.140 --> 03:05.400
our choice after the select.

03:05.480 --> 03:06.370
Like this.

03:07.360 --> 03:12.440
If I run this query we get the same results as before.

03:14.980 --> 03:19.760
However now we can join these results to the category table.

03:20.740 --> 03:24.260
So if I add those joins to this ask you well.

03:25.800 --> 03:33.910
Specifying the join condition using the alias we just added instead of on the article table directly.

03:34.350 --> 03:36.620
When we execute this esky well.

03:37.980 --> 03:44.040
We get several Ricardos including the categories for each article.

03:44.040 --> 03:51.690
However even though we have more than four records the number of unique articles is limited to for the

03:51.690 --> 03:54.600
article data are repeated for each category.

03:54.600 --> 03:56.410
The article is related to.

03:57.440 --> 04:05.860
So we can use this query to get pages of articles including related categories in a single query.

04:09.930 --> 04:16.800
First let's make the existing query in the Get page method into a sub query bank closing it in brackets

04:16.830 --> 04:18.540
and adding an alias.

04:19.670 --> 04:27.550
Then we'll select all the columns from that sub query and join that to the article category.

04:27.560 --> 04:28.680
Join table.

04:29.970 --> 04:33.200
And then that table to the category table.

04:35.410 --> 04:37.980
In addition to the data from the article table.

04:37.990 --> 04:45.430
We also want the category name which we'll rename as we did in the get with categories method we added

04:45.490 --> 04:46.420
earlier.

04:47.580 --> 04:50.340
We don't need to change anything else in this method.

04:50.410 --> 04:52.750
Binding the values and so on.

04:56.770 --> 05:05.050
Now when we view the index page we get the article data as before but several of the articles are repeated.

05:05.050 --> 05:09.660
These are the articles that have more than one related category.

05:12.840 --> 05:15.420
To see what each category name is.

05:15.450 --> 05:18.850
Let's print this out after the article title.

05:23.980 --> 05:30.340
Now we can see the articles that are repeated and repeated once for each different category.

05:30.340 --> 05:32.440
They're related to.

05:36.600 --> 05:43.350
So before we return this data from the get page method let's process it so that we consolidate all the

05:43.350 --> 05:50.730
repeated article records into one for each article with the category names in an array.

05:52.110 --> 05:58.020
We'll start by assigning the data to a variable instead of returning it.

05:58.020 --> 06:05.910
Then let's create a new array that will contain the consolidated data and loop around the data that's

06:05.910 --> 06:07.460
come from the database.

06:08.890 --> 06:11.830
To add to the article data to the new array.

06:11.860 --> 06:17.730
First let's assign the article idae from the row to a variable.

06:18.220 --> 06:23.440
Then we can add the row to the new array indexed on the article idae.

06:24.920 --> 06:26.980
As we we'll do pass through the data.

06:27.050 --> 06:32.570
We only want to add each article to the new array wants to do this.

06:32.690 --> 06:38.150
Let's keep track of the idea of the article from the previous time through the loop.

06:38.480 --> 06:43.140
So before the loop Let's add a variable which will initialize to no.

06:44.890 --> 06:46.960
Then inside the loop.

06:46.960 --> 06:54.270
If the eidy if the article on this row isn't equal to the idea of the article on the previous row.

06:55.680 --> 06:59.460
Only then do we add to the row to the new array.

07:03.040 --> 07:06.300
If the idea is the same we don't add it.

07:07.800 --> 07:12.590
Then at the end of the loop we set the previous eidy to the current one.

07:14.670 --> 07:16.540
Then at the end of the function.

07:16.800 --> 07:18.920
Let's return the new array.

07:23.890 --> 07:29.580
Now in the browser we only get the articles once so for per page.

07:33.810 --> 07:39.350
Next we can add the categories to each article in the new array.

07:39.450 --> 07:47.850
If this is a new article let's add an array element to the row for the category names which will initialize

07:47.910 --> 07:49.400
to an empty array.

07:50.710 --> 07:53.290
Then each time through the loop.

07:55.090 --> 08:00.330
Let's append the value of the category name far this row to this array.

08:03.600 --> 08:06.560
Then before we return the new array.

08:06.720 --> 08:11.720
Let's print out its contents so we can see what it contains.

08:15.490 --> 08:22.930
Now in the browser if we view the source we can see that each article has a new element for the category

08:22.930 --> 08:23.840
names.

08:24.010 --> 08:31.110
And if the article is related to more than one category this element contains multiple values.

08:34.600 --> 08:43.090
So now we can get rid of this vardhan line and we can display the categories in the index page.

08:45.140 --> 08:53.270
So instead of printing out the category name element if the category names every element isn't empty

08:53.810 --> 09:03.690
will add a paragraph with some text then loop around the array and print out each name in turn.

09:08.150 --> 09:13.220
Now in the browser each article is displayed with its related categories.

09:13.220 --> 09:14.280
If it has any.

09:16.120 --> 09:23.650
The pagination still works showing 4 articles per page and were doing all this in a single query to

09:23.650 --> 09:24.710
the database.
