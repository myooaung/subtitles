WEBVTT

00:04.450 --> 00:11.620
We learnt early on in the course how to create variables we can assign any value we like to a variable

00:11.920 --> 00:17.870
and then use that variable throughout a script changing its value whenever we need to.

00:18.460 --> 00:22.760
We can also create values that we can't change once we've defined them.

00:22.820 --> 00:25.030
And these are called constants.

00:27.840 --> 00:36.310
To create a constant mph P We use the defined function passing in a name and a value for the constant.

00:36.570 --> 00:45.850
For example let's add a constant called Maximum that has an integer value of 100 constants can contain

00:45.850 --> 00:47.880
the values of most types.

00:47.880 --> 00:52.690
For example let's add another one that contains a string.

00:53.580 --> 01:04.350
Constants can be used just like variables like that which when we run it displays the value of the constant.

01:06.850 --> 01:13.810
What you can't do with constants is change their value once defined their value remains constant.

01:13.930 --> 01:16.310
Hence they're called constants.

01:16.480 --> 01:23.360
For example if I try defining new value for the maximum constant like that.

01:25.740 --> 01:31.140
When we run this cold we get an error message saying the constant was already defined.

01:31.140 --> 01:34.560
And note the value hasn't been changed.

01:38.170 --> 01:41.780
Unlike variables constants defined with the defined function.

01:41.850 --> 01:48.970
Global and they're available anywhere in the script they're often used to define settings are values

01:48.970 --> 01:51.600
that you might need throughout the whole site.

01:51.790 --> 01:57.640
For example database credentials are configuration settings.

01:57.640 --> 02:07.600
Constants are so used inside classes commonly to define a values for use with the classes methods.

02:07.600 --> 02:14.480
However we can't use the defined function inside a class to define a constant inside a class.

02:14.500 --> 02:16.150
We use the konst keyword

02:19.090 --> 02:27.700
for example let's add a constant to our Item class like that constants our traditional defined at the

02:27.700 --> 02:31.570
top of a class definition.

02:31.570 --> 02:39.850
To use this constant we access it in the same way as a static property our method specifying the class

02:39.850 --> 02:48.250
name to us and the name of the constants like static properties and methods constants aren't tied to

02:48.250 --> 02:58.080
a specific instance of the class and when we run this code we see the constant value printed out.

02:59.020 --> 03:05.270
So constants are static values but we don't need to use the static keyword.

03:05.350 --> 03:09.110
As for visibility by default constants our public.

03:09.220 --> 03:13.250
But you can change this as with properties and methods if you need to.

03:13.600 --> 03:16.620
I'd like to explicitly specify the visibility.

03:16.900 --> 03:18.950
Just to make it clearer.

03:21.580 --> 03:24.140
We've already been using some constants.

03:24.160 --> 03:28.600
For example when using the mine rescue Well I fetched turei function.

03:28.600 --> 03:35.550
We can pass in various constant values to change the type of results we get back.

03:36.400 --> 03:38.680
That's fun naming standards.

03:39.070 --> 03:45.330
Constants should be named OL in upper case with words separated by underscore.
