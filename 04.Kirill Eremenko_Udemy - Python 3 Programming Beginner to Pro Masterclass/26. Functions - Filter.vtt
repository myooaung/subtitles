WEBVTT
1
00:00:01.670 --> 00:00:04.190
Hello everyone and welcome to this lecture.

2
00:00:04.370 --> 00:00:12.350
The biggest lecture I've been able to learn about functions built in functions we learned about lambda

3
00:00:12.350 --> 00:00:13.260
expressions as well.

4
00:00:13.670 --> 00:00:18.980
And we've been able to use the map as well function to just you know perform a certain operation on

5
00:00:18.980 --> 00:00:20.010
an entire list.

6
00:00:20.030 --> 00:00:25.480
In just one shot in this lectures I'm going to show you kind of an additional kind of advanced topic

7
00:00:25.550 --> 00:00:30.020
so-called filter which is simply used to apply specific

8
00:00:32.840 --> 00:00:35.550
kind of condition on an on an entire list.

9
00:00:36.240 --> 00:00:36.480
OK.

10
00:00:36.500 --> 00:00:38.060
So let's take a look at what you mean by this.

11
00:00:38.060 --> 00:00:44.840
I'm going to say OK let's define my lists and let's call it for instance 10 here would define it 50

12
00:00:45.360 --> 00:00:54.150
define 40 three 9 14 2 and 6 shift enter go.

13
00:00:54.350 --> 00:00:57.670
And what we could do then wanted to let's say pick even numbers.

14
00:00:57.670 --> 00:01:00.590
Only when I wanted to pick only even numbers from here.

15
00:01:00.590 --> 00:01:02.620
Obviously not by using for loops and all that.

16
00:01:02.630 --> 00:01:07.610
I just wanted to use filter function to see I'm going to do that when I say okay out which is oh my

17
00:01:07.610 --> 00:01:09.270
output equals two.

18
00:01:09.410 --> 00:01:11.430
I'm going to say okay.

19
00:01:11.690 --> 00:01:12.600
And that's how we write it.

20
00:01:12.610 --> 00:01:16.290
When I say filter all right.

21
00:01:16.730 --> 00:01:22.180
And what I could do we're going to use lambda expression too soon to say lambda and what lambda we're

22
00:01:22.180 --> 00:01:22.750
going to do.

23
00:01:22.940 --> 00:01:27.040
I'm going to say okay X if you take X All right.

24
00:01:27.680 --> 00:01:31.200
Please turn back if it's only even No.

25
00:01:31.210 --> 00:01:37.300
So I'm gonna say Okay I have to put in a condition here so we're going to say if X divided by two and

26
00:01:37.300 --> 00:01:41.710
you're paying the remainder was equal to zero.

27
00:01:41.800 --> 00:01:43.050
Okay.

28
00:01:43.360 --> 00:01:47.730
That should simply like say summarize the actual condition.

29
00:01:47.740 --> 00:01:48.520
So he what I'm saying.

30
00:01:48.530 --> 00:01:49.080
Okay.

31
00:01:49.210 --> 00:01:50.580
When I'm saying filter.

32
00:01:50.580 --> 00:01:51.100
All right.

33
00:01:51.100 --> 00:01:53.950
Using the lambda expression if you take x.

34
00:01:54.130 --> 00:01:54.850
All right.

35
00:01:54.850 --> 00:01:57.830
If you find that X divided by two is equal to zero.

36
00:01:58.530 --> 00:01:59.260
Okay.

37
00:01:59.290 --> 00:02:00.430
Return simply X..

38
00:02:00.430 --> 00:02:05.190
That's all what it is when we're applying filters simply amend.

39
00:02:05.600 --> 00:02:11.240
So what we could do I have to here to pass along but obviously my list which is my listing here.

40
00:02:11.370 --> 00:02:11.650
All right.

41
00:02:11.950 --> 00:02:12.910
Okay.

42
00:02:13.090 --> 00:02:15.970
The last point is I have to cast whatever I'm gonna get out of it.

43
00:02:15.960 --> 00:02:23.620
I have to cast it simply convert it into a list format.

44
00:02:23.900 --> 00:02:26.370
So if the script enter here we go for take a look at.

45
00:02:26.380 --> 00:02:28.550
Out here we go.

46
00:02:29.820 --> 00:02:36.540
So now I ended up with all the even numbers 10 50 40 14 26 which basically was kept three and was kept

47
00:02:36.540 --> 00:02:37.150
nine as well.

48
00:02:37.460 --> 00:02:38.280
Okay.

49
00:02:38.460 --> 00:02:38.790
All right.

50
00:02:38.790 --> 00:02:39.270
Looks great.

51
00:02:39.300 --> 00:02:41.280
So again let's take a look.

52
00:02:41.310 --> 00:02:43.990
I know it's a little bit confusing let's take a look at another example.

53
00:02:44.130 --> 00:02:48.140
Let's assume that I wanted for instance to let's say have a list of ages.

54
00:02:48.140 --> 00:02:53.650
So I have for example kind of this list of ages K 5 15 and so on.

55
00:02:53.850 --> 00:03:00.990
And for example you wanted to create kind of using lists using filter using lambda to allow only people

56
00:03:01.110 --> 00:03:05.430
who are only at an age 21 or greater then than OK.

57
00:03:05.430 --> 00:03:12.710
So I wanted to go into that list pick people only what age 21 plus or 21 22 24 3 9 3 5 and so on.

58
00:03:12.720 --> 00:03:15.700
Let's see how can we do that using filter and lambda.

59
00:03:15.860 --> 00:03:21.860
So going to say OK out equals two I'm going to say lists.

60
00:03:21.870 --> 00:03:26.480
I know I need to cast it anyway so let's define it as lists so I can use filter.

61
00:03:27.240 --> 00:03:33.450
And then I can use lambda expression and the landing and I think if the X the condition is if X was

62
00:03:33.450 --> 00:03:36.290
greater than or equal to any one that's my condition.

63
00:03:36.510 --> 00:03:37.460
Right.

64
00:03:37.560 --> 00:03:48.800
And simply here in within the lambda expression I need to pass along simply my list H on the score H.

65
00:03:49.090 --> 00:03:49.770
My apologies.

66
00:03:49.780 --> 00:03:55.030
It was my list underscore 8 which is my list in here all right.

67
00:03:55.040 --> 00:03:55.380
OK.

68
00:03:55.400 --> 00:03:56.130
Looks good.

69
00:03:56.210 --> 00:04:00.630
Let's run it and let's take a look at out.

70
00:04:00.710 --> 00:04:01.490
Here we go.

71
00:04:01.490 --> 00:04:05.770
So now we're able to attain only 21 22 24 39 and 30.

72
00:04:05.810 --> 00:04:06.050
All right.

73
00:04:07.160 --> 00:04:08.390
Now it's time for a quick challenge.

74
00:04:08.390 --> 00:04:16.010
What I want you guys to do is to simply take the exact same list and only return people to straight

75
00:04:16.010 --> 00:04:22.160
the exact same you know pretty much exact same or operation but only return people who are between the

76
00:04:22.160 --> 00:04:27.180
age of 20 and between the age of 25 only.

77
00:04:27.260 --> 00:04:27.700
OK.

78
00:04:27.770 --> 00:04:30.280
All right so 20 20 and 25.

79
00:04:30.470 --> 00:04:30.770
OK.

80
00:04:30.770 --> 00:04:33.320
Please go ahead positive view and I'll see you guys after the challenge.

81
00:04:35.570 --> 00:04:36.030
All right.

82
00:04:36.050 --> 00:04:41.800
I hope you guys were able to figure out what the challenge will ask us to do is to simply go in here

83
00:04:41.890 --> 00:04:47.320
and only select the ages that are greater than 20 and less than 25.

84
00:04:47.530 --> 00:04:52.450
So simply put I'm just gonna think the exact same condition pretty much but instead of twenty one I

85
00:04:52.450 --> 00:04:56.810
make it 20 but I need to add kind of an additional condition so I say OK.

86
00:04:56.820 --> 00:05:02.430
And if you find X was actually to do that.

87
00:05:02.480 --> 00:05:09.810
So if X was greater than equal 20 and if X was less than or equal to 25.

88
00:05:10.000 --> 00:05:16.390
These are kind of to my condition that I wanted to satisfy and if I do that if I take a look at out

89
00:05:17.620 --> 00:05:18.490
here we go.

90
00:05:18.490 --> 00:05:23.860
We ended up with 21 22 24 which is simply all the ages between 20 and 25.

91
00:05:24.910 --> 00:05:25.580
All right.

92
00:05:25.580 --> 00:05:27.390
And that's pretty much what I have for this lecture.

93
00:05:27.400 --> 00:05:28.540
I hope you guys enjoyed it.

94
00:05:28.540 --> 00:05:31.480
Now you guys are pretty much ready to do the exercises.

95
00:05:31.480 --> 00:05:34.390
We have tons of exercises for you which comes to functions.

96
00:05:34.390 --> 00:05:39.010
Keep it up and it should be really proud of your newly acquired programming skills.

97
00:05:39.010 --> 00:05:41.560
Best of luck and we'll see you guys in the next lecture.
