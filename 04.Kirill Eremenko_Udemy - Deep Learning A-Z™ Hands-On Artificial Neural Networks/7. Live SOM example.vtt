WEBVTT
1
1

00:00:00.500  -->  00:00:01.760
<v Narrator>Hello and welcome back to the course</v>
2

2

00:00:01.760  -->  00:00:03.100
on Deep Learning.
3

3

00:00:03.100  -->  00:00:05.440
In today's tutorial we're going to have a look at
4

4

00:00:05.440  -->  00:00:08.360
a live example of a self-organizing map.
5

5

00:00:08.360  -->  00:00:09.840
It's going to be a very simple example,
6

6

00:00:09.840  -->  00:00:11.090
but at the same time it will help
7

7

00:00:11.090  -->  00:00:12.920
drive the concepts home.
8

8

00:00:12.920  -->  00:00:15.790
The concepts that we talked about previously in this course.
9

9

00:00:15.790  -->  00:00:19.270
So, we're going to be using a executable file,
10

10

00:00:19.270  -->  00:00:21.210
provided by AI junkie.
11

11

00:00:21.210  -->  00:00:25.870
So ai-junkie.com is the blog that we mentioned
12

12

00:00:25.870  -->  00:00:27.700
in the previous tutorials in this section,
13

13

00:00:27.700  -->  00:00:30.520
where you can get a brief introduction into
14

14

00:00:30.520  -->  00:00:32.740
self-organizing maps and you can understand
15

15

00:00:32.740  -->  00:00:34.620
the mathematics behind them, and as well
16

16

00:00:34.620  -->  00:00:36.920
get some programming examples.
17

17

00:00:36.920  -->  00:00:39.220
If you'd like to find this blog, you need to
18

18

00:00:39.220  -->  00:00:43.020
go to A-I hyphen junkie.com slash A-N-N slash som
19

19

00:00:43.020  -->  00:00:45.340
slash some one dot H-T-M-L.
20

20

00:00:45.340  -->  00:00:47.300
And here, if you scroll down,
21

21

00:00:47.300  -->  00:00:50.920
you will be able to download a source code
22

22

00:00:50.920  -->  00:00:53.330
for the example we're going to be looking at.
23

23

00:00:53.330  -->  00:00:56.736
We're going to be creating a self-organizing map like this.
24

24

00:00:56.736  -->  00:00:58.780
In fact we're just going to be running this file.
25

25

00:00:58.780  -->  00:01:00.893
So, once you download this folder or file,
26

26

00:01:00.893  -->  00:01:03.670
it's a ZIP file, and unzip it, you'll have
27

27

00:01:03.670  -->  00:01:05.130
an executable file here.
28

28

00:01:05.130  -->  00:01:06.750
Now, before you run this just make sure
29

29

00:01:06.750  -->  00:01:09.370
you're comfortable running an executable file
30

30

00:01:09.370  -->  00:01:10.645
which you downloaded from the internet,
31

31

00:01:10.645  -->  00:01:13.930
and check it with antivirus and just make sure that
32

32

00:01:13.930  -->  00:01:15.460
you're 100 percent comfortable.
33

33

00:01:15.460  -->  00:01:18.770
I'm comfortable running it on my computer, but bear in mind
34

34

00:01:18.770  -->  00:01:21.834
that we don't have an affiliation with A-I junkie.
35

35

00:01:21.834  -->  00:01:24.440
This is a file which we are getting from them, so
36

36

00:01:24.440  -->  00:01:27.139
we haven't checked this or anything like that.
37

37

00:01:27.139  -->  00:01:30.010
We don't have control over what is,
38

38

00:01:30.010  -->  00:01:31.810
what you're downloading from here.
39

39

00:01:31.810  -->  00:01:34.630
So, there's a file and basically,
40

40

00:01:34.630  -->  00:01:36.637
what we're, once we run it, we're going to be,
41

41

00:01:36.637  -->  00:01:41.200
this code is going to be creating a self-organizing map,
42

42

00:01:41.200  -->  00:01:44.520
which has, as inputs, these eight colors.
43

43

00:01:44.520  -->  00:01:47.300
So here we got red, orange, dark blue, light blue,
44

44

00:01:47.300  -->  00:01:51.500
dark green, light green, yellow and magenta.
45

45

00:01:51.500  -->  00:01:54.070
And so it's going to be looking at these colors
46

46

00:01:54.070  -->  00:01:55.810
and it's going to be re-running itself again and again
47

47

00:01:55.810  -->  00:01:57.530
and again and so, each of the rows,
48

48

00:01:57.530  -->  00:01:58.363
let's clarify that.
49

49

00:01:58.363  -->  00:02:00.360
So, each of the rows in the data set,
50

50

00:02:00.360  -->  00:02:02.980
is R-G-B code for each of these colors.
51

51

00:02:02.980  -->  00:02:04.910
For red it's,
52

52

00:02:04.910  -->  00:02:08.589
red it's like 255, zero zero.
53

53

00:02:08.589  -->  00:02:11.570
And then for orange it might be something else.
54

54

00:02:11.570  -->  00:02:12.530
And so on and so on and so on.
55

55

00:02:12.530  -->  00:02:15.090
So this has got the codes for those colors,
56

56

00:02:15.090  -->  00:02:17.810
and these codes are actually normalized so all the values
57

57

00:02:17.810  -->  00:02:20.870
are put from zero to one, as we have discussed previously.
58

58

00:02:20.870  -->  00:02:23.640
But the point is we have got eight rows on our dataset and
59

59

00:02:23.640  -->  00:02:25.960
each one of them has three columns and we are going to put
60

60

00:02:25.960  -->  00:02:28.080
them into a self organizing map like that.
61

61

00:02:28.080  -->  00:02:29.700
So lets have a look.
62

62

00:02:29.700  -->  00:02:33.220
So once you open this file, once you run it, you will see
63

63

00:02:33.220  -->  00:02:35.860
that there is the number of iterations and then you can
64

64

00:02:35.860  -->  00:02:39.460
press R to retrain your self-organizing map.
65

65

00:02:39.460  -->  00:02:41.500
So let's move this away.
66

66

00:02:41.500  -->  00:02:43.010
And let's have a look,
67

67

00:02:43.010  -->  00:02:44.650
let's run this again.
68

68

00:02:44.650  -->  00:02:45.520
R.
69

69

00:02:45.520  -->  00:02:49.630
As you can see it organizes itself every time differently
70

70

00:02:49.630  -->  00:02:52.100
that's because your weights initially,
71

71

00:02:52.100  -->  00:02:55.080
or your starting weights are initialized at random.
72

72

00:02:55.080  -->  00:02:57.370
And you can see that, you're getting these values,
73

73

00:02:57.370  -->  00:02:59.670
but you can see at the same time that it is
74

74

00:02:59.670  -->  00:03:02.100
finding that these, how these color different.
75

75

00:03:02.100  -->  00:03:05.120
Moreover, it's putting a dark blue next to the light blue
76

76

00:03:05.120  -->  00:03:07.340
and the light green next to the dark green,
77

77

00:03:07.340  -->  00:03:09.610
so that's what we mean when we say that,
78

78

00:03:09.610  -->  00:03:12.309
it does preserve topology or it does find
79

79

00:03:12.309  -->  00:03:15.250
and preserve similarities in your data set.
80

80

00:03:15.250  -->  00:03:17.820
So, if it didn't, this blue and this blue
81

81

00:03:17.820  -->  00:03:19.170
wouldn't be close together.
82

82

00:03:20.120  -->  00:03:23.223
For example, red, orange, magenta,
83

83

00:03:24.138  -->  00:03:27.160
end up next to each other as well.
84

84

00:03:27.160  -->  00:03:29.010
So, once you run this a couple of times,
85

85

00:03:29.010  -->  00:03:30.440
you can see that,
86

86

00:03:30.440  -->  00:03:32.690
it's doing pretty well.
87

87

00:03:32.690  -->  00:03:33.780
So every time it is different,
88

88

00:03:33.780  -->  00:03:35.470
and now the blue is in the middle,
89

89

00:03:35.470  -->  00:03:38.610
but again you've got some kind of features
90

90

00:03:38.610  -->  00:03:41.090
or some kind of similarities and correlation
91

91

00:03:41.090  -->  00:03:44.583
are being preserved in your representation.
92

92

00:03:45.700  -->  00:03:48.250
So there you go, that's a very quick example
93

93

00:03:48.250  -->  00:03:49.990
of a self-organizing map.
94

94

00:03:49.990  -->  00:03:52.770
A very simple self-organizing map in action.
95

95

00:03:52.770  -->  00:03:57.240
Once again, check out the website, here at AI junkie,
96

96

00:03:57.240  -->  00:03:59.360
and you will be able, you're gonna get the codes here,
97

97

00:03:59.360  -->  00:04:02.100
you can actually get it in Java as well.
98

98

00:04:02.100  -->  00:04:05.210
And you can get some lovely examples of
99

99

00:04:05.210  -->  00:04:07.720
how all this works.
100

100

00:04:07.720  -->  00:04:11.770
Here you have some code on how to create a class
101

101

00:04:11.770  -->  00:04:12.787
for these self-organizing maps
102

102

00:04:12.787  -->  00:04:15.106
and just from going through this you'll see that
103

103

00:04:15.106  -->  00:04:19.290
self-organizing maps are not that hard mathematics,
104

104

00:04:19.290  -->  00:04:21.970
and the code behind them isn't that hard at all.
105

105

00:04:21.970  -->  00:04:24.010
So there you go, I hope you enjoyed today's tutorial,
106

106

00:04:24.010  -->  00:04:25.700
and I look forward to seeing you next time.
107

107

00:04:25.700  -->  00:04:27.773
Until then, enjoy Deep Learning.
