WEBVTT
1
1

00:00:00.370  -->  00:00:02.980
<v Instructor>Hello and welcome to this first tutorial</v>
2

2

00:00:02.980  -->  00:00:04.290
where we're going to tackle
3

3

00:00:04.290  -->  00:00:08.040
the first section of part one data pre-processing,
4

4

00:00:08.040  -->  00:00:11.140
taking care of importing the training set.
5

5

00:00:11.140  -->  00:00:13.990
As you can see, I already imported the libraries.
6

6

00:00:13.990  -->  00:00:16.700
These are the essential libraries we're gonna use
7

7

00:00:16.700  -->  00:00:18.240
to implement the RNN.
8

8

00:00:18.240  -->  00:00:22.370
So we have NumPy, which will allow us to make some arrays
9

9

00:00:22.370  -->  00:00:24.330
which are the only allowed input
10

10

00:00:24.330  -->  00:00:27.400
of the neural networks as opposed to DataFrames.
11

11

00:00:27.400  -->  00:00:30.940
Then we have matplotlib.pyplot, which we will use
12

12

00:00:30.940  -->  00:00:33.320
to, of course, visualize the results
13

13

00:00:33.320  -->  00:00:35.820
in the end on some very nice charts.
14

14

00:00:35.820  -->  00:00:38.810
And of course, I also imported pandas
15

15

00:00:38.810  -->  00:00:42.510
to be able to import the data sets and manage them easily.
16

16

00:00:42.510  -->  00:00:46.260
Alright, so let's import them right now so that it's done.
17

17

00:00:46.260  -->  00:00:50.130
So pressing command or Ctrl + Enter to execute.
18

18

00:00:50.130  -->  00:00:51.660
There we go, we have our libraries
19

19

00:00:51.660  -->  00:00:54.630
and now we're ready to import the training sets.
20

20

00:00:54.630  -->  00:00:56.950
So as you can see, I'm importing the training set
21

21

00:00:56.950  -->  00:00:59.180
and not the whole data set as opposed
22

22

00:00:59.180  -->  00:01:01.020
to part one and part two,
23

23

00:01:01.020  -->  00:01:03.600
and that's because I want to highlight the fact
24

24

00:01:03.600  -->  00:01:06.720
that we are gonna train our RNN
25

25

00:01:06.720  -->  00:01:08.570
on only the training sets.
26

26

00:01:08.570  -->  00:01:10.390
The RNN will have no idea
27

27

00:01:10.390  -->  00:01:12.150
of what's going on in a test set.
28

28

00:01:12.150  -->  00:01:14.370
It will have no acquaintance
29

29

00:01:14.370  -->  00:01:15.650
of the test set during its training.
30

30

00:01:15.650  -->  00:01:19.180
It's like the test set doesn't exist for the RNN.
31

31

00:01:19.180  -->  00:01:21.370
But then, once the training is done,
32

32

00:01:21.370  -->  00:01:25.250
of course we will introduce the test set to the RNN,
33

33

00:01:25.250  -->  00:01:27.240
so that it can make some predictions
34

34

00:01:27.240  -->  00:01:31.060
of the future stock price in January 2017.
35

35

00:01:31.060  -->  00:01:34.060
So that's why I'm importing only the training set right now
36

36

00:01:34.060  -->  00:01:35.960
and then later on, after the training,
37

37

00:01:35.960  -->  00:01:40.050
actually in part three, we will import the test set.
38

38

00:01:40.050  -->  00:01:44.020
All right, so let's do this, let's import the training set.
39

39

00:01:44.020  -->  00:01:46.780
So to import the training set, we first need to import
40

40

00:01:46.780  -->  00:01:50.230
the data as a DataFrame, which we'll import with panda
41

41

00:01:50.230  -->  00:01:52.660
using the read on this course CSV function.
42

42

00:01:52.660  -->  00:01:54.920
But then remember we have to not only select
43

43

00:01:54.920  -->  00:01:58.210
the right column that we need, which is the open Google
44

44

00:01:58.210  -->  00:02:01.430
stock price but also we need to make it a NumPy array
45

45

00:02:01.430  -->  00:02:04.600
because only NumPy arrays can be the input
46

46

00:02:04.600  -->  00:02:06.600
of neural networks in Keras.
47

47

00:02:06.600  -->  00:02:09.050
So let's do this, let's do these two steps.
48

48

00:02:09.050  -->  00:02:11.480
First step, importing the data as a DataFrame.
49

49

00:02:11.480  -->  00:02:14.230
So, I'm gonna call this DataFrame dataset_train
50

50

00:02:16.300  -->  00:02:19.880
because we will have later on dataset_test,
51

51

00:02:19.880  -->  00:02:21.730
but this time we are dealing with the training set.
52

52

00:02:21.730  -->  00:02:26.680
So dataset_train, and now we use the pandas library,
53

53

00:02:26.680  -->  00:02:31.430
which has a shortcut pd. and now the read_csv function
54

54

00:02:32.770  -->  00:02:35.210
to which we're gonna input the name
55

55

00:02:35.210  -->  00:02:37.510
of the CSV file we need to import.
56

56

00:02:37.510  -->  00:02:40.400
And we need to input that name in quotes,
57

57

00:02:40.400  -->  00:02:44.220
and so that name is Google_Stock_Price_Train.csv.
58

58

00:02:51.070  -->  00:02:52.940
All right, I think it's all good.
59

59

00:02:52.940  -->  00:02:54.600
Yes it is, perfect.
60

60

00:02:54.600  -->  00:02:57.410
So with this line of code, we have the DataFrame,
61

61

00:02:57.410  -->  00:03:00.740
and now, next line of code, we need to do two things.
62

62

00:03:00.740  -->  00:03:04.000
First, selecting the right column that we are interested in,
63

63

00:03:04.000  -->  00:03:05.800
that is the open Google stock price,
64

64

00:03:05.800  -->  00:03:08.280
and second creating a NumPy array.
65

65

00:03:08.280  -->  00:03:11.530
So, since we are creating a new NumPy array,
66

66

00:03:11.530  -->  00:03:13.340
I'm gonna introduce a new variable here,
67

67

00:03:13.340  -->  00:03:16.027
that this time I'm gonna call training_set.
68

68

00:03:16.890  -->  00:03:18.830
This will be the training set
69

69

00:03:18.830  -->  00:03:21.310
on which our RNN will be trained.
70

70

00:03:21.310  -->  00:03:22.900
So, it's the real training set.
71

71

00:03:22.900  -->  00:03:26.700
It will be containing the input data of the neural network.
72

72

00:03:26.700  -->  00:03:30.800
And so training set, and now let's do the first thing,
73

73

00:03:30.800  -->  00:03:33.020
that is to select the right column.
74

74

00:03:33.020  -->  00:03:35.990
So to do that, we're gonna use the iloc method
75

75

00:03:35.990  -->  00:03:38.350
to get the right index of the column we want.
76

76

00:03:38.350  -->  00:03:39.820
And to do this, well of course we need
77

77

00:03:39.820  -->  00:03:42.460
to take first our DataFrame.
78

78

00:03:42.460  -->  00:03:46.610
So, dataset_train and then that's where we use
79

79

00:03:46.610  -->  00:03:50.350
the iloc method to get this right index.
80

80

00:03:50.350  -->  00:03:52.870
So iloc, and now remember we need
81

81

00:03:52.870  -->  00:03:56.370
to add some square brackets, and first we need to take
82

82

00:03:56.370  -->  00:03:59.560
all the lines that we want which are all the stock prices
83

83

00:03:59.560  -->  00:04:03.457
from beginning 2012 to the end of 2016.
84

84

00:04:03.457  -->  00:04:05.570
And to take all the lines, there is a trick.
85

85

00:04:05.570  -->  00:04:08.260
It's just to add a column here saying
86

86

00:04:08.260  -->  00:04:10.920
that we want everything from the beginning
87

87

00:04:10.920  -->  00:04:13.070
at the left of the column to the end
88

88

00:04:13.070  -->  00:04:14.380
at the right of the column.
89

89

00:04:14.380  -->  00:04:18.050
And then after the comma, that's where we specify
90

90

00:04:18.050  -->  00:04:20.200
the index of the column we want.
91

91

00:04:20.200  -->  00:04:23.810
And so if we go back to our data set,
92

92

00:04:23.810  -->  00:04:25.230
Google stock price train
93

93

00:04:25.230  -->  00:04:27.490
which I opened in Google spreadsheets,
94

94

00:04:27.490  -->  00:04:31.330
well you can see that this column is the second column
95

95

00:04:31.330  -->  00:04:33.880
of the data set and therefore has index one,
96

96

00:04:33.880  -->  00:04:35.950
because indexes in Python start at zero.
97

97

00:04:35.950  -->  00:04:38.000
This has index zero, this has index one.
98

98

00:04:38.000  -->  00:04:39.820
And therefore, the index we need
99

99

00:04:39.820  -->  00:04:42.480
to take here is just index one.
100

100

00:04:42.480  -->  00:04:45.120
However, remember there is a little trap here.
101

101

00:04:45.120  -->  00:04:48.960
We cannot input the index one only, because we want
102

102

00:04:48.960  -->  00:04:52.390
to create a NumPy array and not a simple vector.
103

103

00:04:52.390  -->  00:04:56.740
And to do this, the trick is to take not a single index one,
104

104

00:04:56.740  -->  00:05:00.890
but the range from one to two,
105

105

00:05:00.890  -->  00:05:05.150
because ranges in Python have their upper bound excluded.
106

106

00:05:05.150  -->  00:05:07.257
Therefore, the two here is excluded,
107

107

00:05:07.257  -->  00:05:09.950
and therefore even by taking the range from one to two,
108

108

00:05:09.950  -->  00:05:12.200
we are only getting the first index,
109

109

00:05:12.200  -->  00:05:14.070
and this will make sure, eventually,
110

110

00:05:14.070  -->  00:05:17.460
to have a NumPy array of one column.
111

111

00:05:17.460  -->  00:05:19.150
We will see that in a second.
112

112

00:05:19.150  -->  00:05:22.710
Alright so this code that we typed right now,
113

113

00:05:22.710  -->  00:05:26.480
this part of code here, still creates a DataFrame,
114

114

00:05:26.480  -->  00:05:30.950
but with only the column open of the Google Stock Price.
115

115

00:05:30.950  -->  00:05:35.950
And now, to make it a NumPy array, we just need to add a dot
116

116

00:05:36.750  -->  00:05:41.240
and values, and that creates a NumPy array.
117

117

00:05:41.240  -->  00:05:44.120
Perfect, so we have what we need,
118

118

00:05:44.120  -->  00:05:46.120
which is mostly the training set,
119

119

00:05:46.120  -->  00:05:48.360
and therefore we're gonna check that everything's okay.
120

120

00:05:48.360  -->  00:05:51.440
I'm going to select these two lines of code,
121

121

00:05:51.440  -->  00:05:54.790
press command or Ctrl + Enter to execute.
122

122

00:05:54.790  -->  00:05:58.080
And now I'm gonna go to variable explorer to check them out.
123

123

00:05:58.080  -->  00:06:01.380
So there we go, as you can see, data set train
124

124

00:06:01.380  -->  00:06:05.720
is a DataFrame, and training set is a NumPy array
125

125

00:06:05.720  -->  00:06:10.720
of 1258 lines corresponding to the 1258 stock prices
126

126

00:06:12.760  -->  00:06:16.610
between 2012 and 2016, and one column
127

127

00:06:16.610  -->  00:06:19.000
which is the open Google stock price.
128

128

00:06:19.000  -->  00:06:20.860
We will check it out right now.
129

129

00:06:20.860  -->  00:06:22.620
So I'm gonna open the data set train,
130

130

00:06:22.620  -->  00:06:25.230
that's the data set train, and I'm also gonna open
131

131

00:06:25.230  -->  00:06:28.180
the training set my NumPy array.
132

132

00:06:28.180  -->  00:06:30.250
There we go, training set.
133

133

00:06:30.250  -->  00:06:33.720
So we can check very precisely that we have
134

134

00:06:33.720  -->  00:06:37.360
the open Google stock price in the training set
135

135

00:06:37.360  -->  00:06:38.810
with the same number of lines
136

136

00:06:38.810  -->  00:06:41.310
that is the same number of stock prices.
137

137

00:06:41.310  -->  00:06:44.290
So everything looks good and we have the NumPy array.
138

138

00:06:44.290  -->  00:06:47.950
We don't have a vector, we have a NumPy array of one column.
139

139

00:06:47.950  -->  00:06:49.630
Everything looks great, we are ready
140

140

00:06:49.630  -->  00:06:51.530
to move on to the next step.
141

141

00:06:51.530  -->  00:06:55.210
So I'm closing this and I'll see you in the next tutorial
142

142

00:06:55.210  -->  00:06:57.790
for the next step, where we will apply
143

143

00:06:57.790  -->  00:07:00.730
the right feature scaling to our data
144

144

00:07:00.730  -->  00:07:02.730
to optimize the training process.
145

145

00:07:02.730  -->  00:07:04.330
Until then, enjoy deep learning.
