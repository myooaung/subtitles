WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.630
In the previous videos,

00:00:01.630 --> 00:00:03.790
we saw Symmetric Key and the Asymmetry,

00:00:03.790 --> 00:00:06.250
key cryptography and digital signatures,

00:00:06.250 --> 00:00:11.240
which help us protect the identity off the source off Any data that's coming in,

00:00:11.240 --> 00:00:11.850
right?

00:00:11.850 --> 00:00:12.560
Well,

00:00:12.560 --> 00:00:12.770
no.

00:00:12.770 --> 00:00:15.450
Look at the third type of cryptography called us hashing.

00:00:15.450 --> 00:00:18.800
We all know that fingerprints are unique to human beings.

00:00:18.800 --> 00:00:24.810
It is a fact that even identical twins have different fingerprints in the same way we can

00:00:24.810 --> 00:00:28.240
create a unique identity for distant documents called a hash.

00:00:28.240 --> 00:00:31.030
Hashing is a mechanism in which,

00:00:31.030 --> 00:00:32.920
irrespective of the size of the input,

00:00:32.920 --> 00:00:34.540
the old put us off fix element,

00:00:34.540 --> 00:00:36.750
and it is made up of Hexi decimal numbers.

00:00:36.750 --> 00:00:43.280
Exercisable numbers are numbers would start to it zero up to nine and then continues as A,

00:00:43.280 --> 00:00:43.480
B,

00:00:43.480 --> 00:00:43.700
C,

00:00:43.700 --> 00:00:43.980
D,

00:00:43.980 --> 00:00:44.750
E and death.

00:00:44.750 --> 00:00:47.350
There are 16 digits and exile dismal number.

00:00:47.350 --> 00:00:49.960
Let's look at a demo in under start.

00:00:49.960 --> 00:00:51.510
Come to understand hashing.

00:00:51.510 --> 00:00:55.370
Better as you can see a respect off the input,

00:00:55.370 --> 00:00:59.810
I provide the output Pacific settling for a blind string.

00:00:59.810 --> 00:01:01.390
This is the hash for a waiter,

00:01:01.390 --> 00:01:04.850
and if I start typing something,

00:01:04.850 --> 00:01:13.930
you can see that the house changes Onda a respite off what the size of the importance the

00:01:13.930 --> 00:01:15.950
old good hash is on fixing them.

00:01:15.950 --> 00:01:26.110
Once we know that,

00:01:26.110 --> 00:01:30.150
let's look at some properties are requirements off a hashing function.

00:01:30.150 --> 00:01:34.250
So the first property is called a one way hash function.

00:01:34.250 --> 00:01:37.510
The one day property is when you know,

00:01:37.510 --> 00:01:37.840
I know,

00:01:37.840 --> 00:01:38.980
put off a hash function.

00:01:38.980 --> 00:01:43.450
It is nearly impossible to find the input into this one day cryptography.

00:01:43.450 --> 00:01:47.680
These ashes are usually used to only verified the authenticity of data,

00:01:47.680 --> 00:01:52.220
and hence we don't need to decrypt the output to find the input.

00:01:52.220 --> 00:01:54.350
So when you look at this example,

00:01:54.350 --> 00:01:56.110
if I give you this hash,

00:01:56.110 --> 00:02:02.710
it is nearly impossible for anyone to know that this hash belongs to this data we cannot

00:02:02.710 --> 00:02:03.850
reverse Engineer.

00:02:03.850 --> 00:02:05.650
This has to find the input.

00:02:05.650 --> 00:02:08.080
You might ask me.

00:02:08.080 --> 00:02:14.880
Why is it not possible to find the input like Let's look at a simple regarding in which it

00:02:14.880 --> 00:02:17.750
takes two inputs and be and compute the sum.

00:02:17.750 --> 00:02:23.550
Even when we know the some 100 they wouldn't be able to certainly say what the inputs are.

00:02:23.550 --> 00:02:25.650
The problem is become larger,

00:02:25.650 --> 00:02:26.010
I think,

00:02:26.010 --> 00:02:28.750
increase the number of inputs are change the complexity.

00:02:28.750 --> 00:02:31.440
Probably if I allowed the symbols?

00:02:31.440 --> 00:02:32.030
No,

00:02:32.030 --> 00:02:32.950
the probability,

00:02:32.950 --> 00:02:34.310
if I only have indigenous,

00:02:34.310 --> 00:02:40.050
will be like I can be 10 plus 90 or can be 11 plus 89 except for us,

00:02:40.050 --> 00:02:44.980
right if I increase the number off perimeters a plus B plus C,

00:02:44.980 --> 00:02:48.850
or if they also say that A and B can be floating numbers,

00:02:48.850 --> 00:02:53.090
the complexity increases so they can be probabilities.

00:02:53.090 --> 00:02:57.700
But then we will not be able to say with certainty that these are the inputs on.

00:02:57.700 --> 00:02:59.950
Then hashing the Brown is very,

00:02:59.950 --> 00:03:00.610
very high,

00:03:00.610 --> 00:03:03.750
that it is nearly impossible to get the best input at all.

00:03:03.750 --> 00:03:06.550
The second property,

00:03:06.550 --> 00:03:07.820
called deterministic,

00:03:07.820 --> 00:03:10.500
is when there is no randomness in this function.

00:03:10.500 --> 00:03:13.970
So at any point in time for a given input,

00:03:13.970 --> 00:03:15.250
the old remains the same.

00:03:15.250 --> 00:03:18.120
When I say I am a blocked in trainer,

00:03:18.120 --> 00:03:19.250
I teach on you to me.

00:03:19.250 --> 00:03:21.570
If I remove the full stop,

00:03:21.570 --> 00:03:22.600
the house changes.

00:03:22.600 --> 00:03:24.810
But then when it when I bring it again,

00:03:24.810 --> 00:03:26.390
the hash comes as the same thing.

00:03:26.390 --> 00:03:29.710
There's no randomness involved in this hashing functions.

00:03:29.710 --> 00:03:31.220
For any input,

00:03:31.220 --> 00:03:32.650
output is always the same.

00:03:32.650 --> 00:03:36.790
The property needs to be easily compute.

00:03:36.790 --> 00:03:37.840
Herbal as in.

00:03:37.840 --> 00:03:43.520
Imagine if it takes about two days for me to find a house function for a given document or

00:03:43.520 --> 00:03:48.090
a given string right that would make it useless because verification will be very,

00:03:48.090 --> 00:03:48.900
very difficult.

00:03:48.900 --> 00:03:49.440
Hence,

00:03:49.440 --> 00:03:50.760
it needs to be computer,

00:03:50.760 --> 00:03:51.250
believe very,

00:03:51.250 --> 00:03:51.950
very fast.

00:03:51.950 --> 00:03:54.610
The fourth property,

00:03:54.610 --> 00:03:56.210
which is a very important property.

00:03:56.210 --> 00:03:57.750
It's called us Avalanche effect.

00:03:57.750 --> 00:04:02.110
So what does Avalanche FXC for any small change?

00:04:02.110 --> 00:04:04.350
They input their own put changes drastically.

00:04:04.350 --> 00:04:07.650
So when you know the hash off a string called Hello,

00:04:07.650 --> 00:04:12.650
it is nearly impossible to guess the hash off.

00:04:12.650 --> 00:04:14.350
I know.

00:04:14.350 --> 00:04:15.350
First up,

00:04:15.350 --> 00:04:17.350
as you can see here,

00:04:17.350 --> 00:04:19.610
Hello Had this hash?

00:04:19.610 --> 00:04:25.330
Let's remember the last four digits off this hash 9804 if I had a full stop.

00:04:25.330 --> 00:04:30.440
The high changes completely So this is called S Avalanche epic for any small changes.

00:04:30.440 --> 00:04:33.150
Input also their own put changes drastically.

00:04:33.150 --> 00:04:36.950
Then comes Coalition of Systems.

00:04:36.950 --> 00:04:42.040
It's really very difficult to find two different inputs with the same hash output,

00:04:42.040 --> 00:04:46.050
which means if I have this hash for hello,

00:04:46.050 --> 00:04:46.750
full stop,

00:04:46.750 --> 00:04:47.830
it should be very,

00:04:47.830 --> 00:04:52.240
very difficult for me to find the same hash for a different input.

00:04:52.240 --> 00:04:55.350
So this hashing function should be collision resistant.

00:04:55.350 --> 00:04:59.180
Hashing plays an important role in securing direction.

00:04:59.180 --> 00:05:01.550
We look at how in the following videos

