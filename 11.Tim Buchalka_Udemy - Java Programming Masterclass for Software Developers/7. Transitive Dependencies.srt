1
1

00:00:05,520  -->  00:00:11,100
So let's find out about transitive dependencies and the module graph then we're going to update that
2

2

00:00:11,100  -->  00:00:14,670
project to use these transitive dependencies.
3

3

00:00:14,760  -->  00:00:17,370
So what is a transitive dependency?
4

4

00:00:17,460  -->  00:00:20,990
Let's say we've got three modules A, B and C.
5

5

00:00:21,060  -->  00:00:28,990
Now, when module A requires module B, module A can read public and protect types exported in module B
6

6

00:00:29,040  -->  00:00:33,810
Now, if module B also requires module C then module B
7

7

00:00:33,850  -->  00:00:41,410
can have methods that return types exported in module C. So let's see within our project. So in
8

8

00:00:41,430  -->  00:00:49,500
our project, we've got three modules; common, db and ui. Now the module db requires and reads common
9

9

00:00:50,110  -->  00:00:53,210
while module ui reads both db and common.
10

10

00:00:53,260  -->  00:00:59,750
Now module db, actually the data source class has some methods that return types from module common.
11

11

00:01:00,030  -->  00:01:06,990
So every module that uses the data source class will require common module as well.
12

12

00:01:06,990  -->  00:01:09,630
Now this is where transitive dependencies can help us.
13

13

00:01:09,810  -->  00:01:16,050
So instead of adding a requires statement to the UI module we can use the keyword transitive with the
14

14

00:01:16,050  -->  00:01:17,230
requires statement.
15

15

00:01:17,550  -->  00:01:24,750
So that way every module that reads the DB module will then automatically be able to read the common module.
16

16

00:01:24,750  -->  00:01:30,730
So let's see an image just to clarify this further. So this image, we've got the module graph.
17

17

00:01:31,120  -->  00:01:37,720
Now the result of Java modules depending on each other is that we can now draw a complete graph of dependencies
18

18

00:01:38,110  -->  00:01:43,570
with the modules nodes and the relationship between nodes as module dependencies.
19

19

00:01:43,570  -->  00:01:46,470
So this kind of image is called a module graph.
20

20

00:01:46,500  -->  00:01:51,600
Now keep in mind that this graph only shows our modules, not other modules that we're using look like javaFX.base
21

21

00:01:51,610  -->  00:01:53,250
for example.
22

22

00:01:53,260  -->  00:01:56,140
So what does this have to do with transitive dependencies?
23

23

00:01:56,490  -->  00:02:01,190
Well, you can see here our ui module depends on both the common and db modules.
24

24

00:02:01,300  -->  00:02:07,360
Remember that the data source class returns some types from the common module and the UI module is
25

25

00:02:07,360  -->  00:02:11,130
using the data source class to get results from the database.
26

26

00:02:11,410  -->  00:02:18,130
So instead of requiring the common module in the UI module we can declare it as a transitive dependency
27

27

00:02:18,490  -->  00:02:19,990
in the DB module.
28

28

00:02:20,290  -->  00:02:26,550
So that way whatever modules used db module again would also have access to the UI module.
29

29

00:02:26,560  -->  00:02:29,570
So let's clarify this further with another image.
30

30

00:02:29,920  -->  00:02:35,860
So this image is now showing the transitive dependency. As you can now see, the module db requires
31

31

00:02:36,160  -->  00:02:42,550
the module common by using the transitive keyword. So that way, all modules that require the db
32

32

00:02:42,580  -->  00:02:47,630
module now have access to packages that are exported by the common module.
33

33

00:02:47,890  -->  00:02:53,650
And we don't then have to specify the requires common module in the UI module because it now reads it
34

34

00:02:53,650  -->  00:02:55,040
automatically.
35

35

00:02:55,320  -->  00:02:59,710
So let's hop back into IntelliJ and see if we can set this up.
36

36

00:02:59,800  -->  00:03:06,650
So firstly, we need to open our module info java file from db module, I've got that open up here
37

37

00:03:06,860  -->  00:03:12,120
Click it to the relevant module info file but we're in our db one  here
38

38

00:03:12,400  -->  00:03:17,740
So what we need to do is make a change here and use a transitive keyword for the common dependency.
39

39

00:03:17,800  -->  00:03:23,850
So we come up here to line 4, and we're going to type requires where its got academy.learnprogramming.common
40

40

00:03:23,950  -->  00:03:31,640
It's going to be transitive, space and then the academy.learnprogramming.common
41

41

00:03:31,870  -->  00:03:36,810
So now, the ui module can have access to all exported packages by the common module.
42

42

00:03:36,940  -->  00:03:40,930
So in other words, we don't need to depend on the common module anymore in the ui module.
43

43

00:03:41,320  -->  00:03:46,590
Let's go ahead and open the UI module descriptor file. Again, just check you're in the right file there.
44

44

00:03:46,830  -->  00:03:53,550
And what we want to do here is-  we no longer need the requires for our common module.
45

45

00:03:53,640  -->  00:03:56,280
This is what the transitive keyword is going to do for us.
46

46

00:03:56,610  -->  00:03:57,730
So now that we've done that,
47

47

00:03:57,930  -->  00:04:01,460
bearing in mind that we are requiring that db module.
48

48

00:04:01,560  -->  00:04:04,590
Of course we just made the change to the db module.
49

49

00:04:04,800  -->  00:04:10,400
So now that we've done that, we should see that we are still able to run our application.
50

50

00:04:12,960  -->  00:04:15,590
So as you can see, that's working nicely.
51

51

00:04:15,750  -->  00:04:17,530
Every thing's working as it should there.
52

52

00:04:18,030  -->  00:04:20,240
So again with transitive dependencies,
53

53

00:04:20,370  -->  00:04:24,880
we then don't have to require, we don't need to require every single module.
54

54

00:04:24,900  -->  00:04:27,960
So what other requires statements can be removed?
55

55

00:04:27,960  -->  00:04:31,170
Well, let's just have a look at the one we've got on screen here, the UI
56

56

00:04:31,260  -->  00:04:32,740
module descriptor file
57

57

00:04:33,000  -->  00:04:38,130
And you can see there, we've got five requires statements, four of are them JavaFX related, then we
58

58

00:04:38,130  -->  00:04:45,580
got the db module. Now, we can hold down the Ctrl or  command key and click on a module name,
59

59

00:04:45,590  -->  00:04:49,600
for example javafx.base, let's just take a look at that.
60

60

00:04:49,980  -->  00:04:55,710
So you could see here what packages are exported by default and you can actually see here that requires
61

61

00:04:56,070  -->  00:05:02,430
java.desktop, so I can close that, and go back to our ui module descriptor file.
62

62

00:05:02,710  -->  00:05:09,840
If you click on the javafx.fxml, have a look at that
63

63

00:05:09,930  -->  00:05:11,820
you can see here that it requires a java
64

64

00:05:11,830  -->  00:05:15,210
fx.base, and it's using the transitive keyword.
65

65

00:05:15,430  -->  00:05:21,420
So in other words, this means now that we don't have to depend on the java fx.base module because
66

66

00:05:21,420  -->  00:05:24,770
we're already depending on the javafx.fxml
67

67

00:05:24,830  -->  00:05:30,810
module which is using the transitive keyword to require the javafx.base module.
68

68

00:05:30,810  -->  00:05:36,340
You can see that here on line 34 -- let's just close that down we'll go back and have
69

69

00:05:36,340  -->  00:05:40,270
a look at our next one; controls, java fx.controls
70

70

00:05:40,290  -->  00:05:45,540
Click on to that, so that's got two transitive statements there.
71

71

00:05:45,580  -->  00:05:52,130
So in other words, if we require javafx.controls we can use the types from both
72

72

00:05:52,150  -->  00:05:57,290
javafx.base and javafx.graphics. Closing that down again.
73

73

00:05:57,940  -->  00:06:01,440
So what that tells us is that we can remove some of these statements.
74

74

00:06:01,440  -->  00:06:06,970
We don't need them because they're being basically used by a transitive statement elsewhere, so we can
75

75

00:06:06,970  -->  00:06:15,530
delete out the javafx.base and the javafx.graphics, because again they're associated elsewhere.
76

76

00:06:16,240  -->  00:06:21,590
So that's cleaned up things nicely and let's just have another look at our model structure now.
77

77

00:06:22,010  -->  00:06:25,990
Alright, this is the same image that we've already seen in some of the previous videos.
78

78

00:06:26,050  -->  00:06:28,470
It now represents the final project structure.
79

79

00:06:28,830  -->  00:06:36,430
As you can see now at this point, the common module only depends on javafx.base, the module db
80

80

00:06:36,520  -->  00:06:42,970
our db module depends on java.sql, sqlite.jdbc and the common module or the ui module depends
81

81

00:06:42,970  -->  00:06:50,530
on javafx.fxml, javafx.controls and our db module, so three transitive dependencies
82

82

00:06:50,530  -->  00:06:57,010
the UI module can now read and use common modules because that db module declared that the common module
83

83

00:06:57,130  -->  00:07:01,270
as a transitive dependency. So back to intelliJ,
84

84

00:07:01,270  -->  00:07:10,820
again, let's just do one final check to make sure that things are working.
85

85

00:07:10,850  -->  00:07:13,700
Looks like things are working ok. I just clicked on that.
86

86

00:07:13,820  -->  00:07:18,770
It's all good to go. Alright, so the application is running without any errors and you could see there that
87

87

00:07:18,770  -->  00:07:24,000
I was able to display the artists and the very songs that I've got for albums as well.
88

88

00:07:25,150  -->  00:07:28,420
Let's finish this video now and I'll see you in the next one.
