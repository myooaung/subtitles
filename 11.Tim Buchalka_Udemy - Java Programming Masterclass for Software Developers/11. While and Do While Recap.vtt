WEBVTT
1
1

00:00:04.759  -->  00:00:06.649
so let's recap what we've learned about
2

2

00:00:06.649  -->  00:00:09.019
the while do-while loops continue and
3

3

00:00:09.019  -->  00:00:11.690
break keywords on the screen we've got
4

4

00:00:11.690  -->  00:00:14.809
the while loop syntax as you can see
5

5

00:00:14.809  -->  00:00:16.309
it's got the while keyword and then
6

6

00:00:16.309  -->  00:00:18.830
there's a condition in parentheses then
7

7

00:00:18.830  -->  00:00:20.480
we have a code block and this loop
8

8

00:00:20.480  -->  00:00:23.840
executes if the condition is true notice
9

9

00:00:23.840  -->  00:00:25.910
here that there's no semicolons so the
10

10

00:00:25.910  -->  00:00:28.309
while loop just has a condition if we
11

11

00:00:28.309  -->  00:00:30.860
need to increment a variable then we have
12

12

00:00:30.860  -->  00:00:31.820
to do it manually
13

13

00:00:31.820  -->  00:00:33.860
inside the loop if we want to use a
14

14

00:00:33.860  -->  00:00:35.899
variable in the condition we have to
15

15

00:00:35.899  -->  00:00:38.210
declare that variable outside of the
16

16

00:00:38.210  -->  00:00:38.750
while loop
17

17

00:00:38.750  -->  00:00:40.940
now with the for loop we had the
18

18

00:00:40.940  -->  00:00:42.740
initialization condition and iteration
19

19

00:00:42.740  -->  00:00:45.079
in the same line I'm going to show you a
20

20

00:00:45.079  -->  00:00:47.240
comparison for that but firstly let's
21

21

00:00:47.240  -->  00:00:50.120
see the do-while loop so here's the do
22

22

00:00:50.120  -->  00:00:52.340
while loops syntax we've got the do
23

23

00:00:52.340  -->  00:00:54.350
keyword at the top and right up to the
24

24

00:00:54.350  -->  00:00:56.690
do keyword we've got a code block the
25

25

00:00:56.690  -->  00:00:59.120
left the right curly braces notice
26

26

00:00:59.120  -->  00:01:00.950
again that there's no semicolon after
27

27

00:01:00.950  -->  00:01:03.860
the do keyword after the block there's a
28

28

00:01:03.860  -->  00:01:05.750
while condition in other words after the
29

29

00:01:05.750  -->  00:01:09.109
right curly brace is that while keyword
30

30

00:01:09.109  -->  00:01:11.719
and then a condition in parentheses and
31

31

00:01:11.719  -->  00:01:13.999
then a semicolon at the end the
32

32

00:01:13.999  -->  00:01:17.149
semicolon is required for do-while keep
33

33

00:01:17.149  -->  00:01:18.770
in mind that do-while will execute at
34

34

00:01:18.770  -->  00:01:21.170
least once the condition is at the
35

35

00:01:21.170  -->  00:01:24.289
bottom so the code executes once this is the
36

36

00:01:24.289  -->  00:01:26.359
code in the code block and then the
37

37

00:01:26.359  -->  00:01:28.429
condition is checked unlike the while
38

38

00:01:28.429  -->  00:01:30.469
loop the condition was checked at the
39

39

00:01:30.469  -->  00:01:32.959
top so that's the syntax of the do-while
40

40

00:01:32.959  -->  00:01:35.719
loop let's move on alright so on
41

41

00:01:35.719  -->  00:01:37.340
screen now we've got the while loop and
42

42

00:01:37.340  -->  00:01:40.189
a for loop that executes the same codes
43

43

00:01:40.189  -->  00:01:41.619
in other words it's the same logic
44

44

00:01:41.619  -->  00:01:43.279
ultimately that's going to be displayed
45

45

00:01:43.279  -->  00:01:46.700
so there's going to be executed so
46

46

00:01:46.700  -->  00:01:48.139
notice firstly that with the while loop
47

47

00:01:48.139  -->  00:01:51.319
we have initialization of our variable
48

48

00:01:51.319  -->  00:01:54.469
count outside of the while loop and the
49

49

00:01:54.469  -->  00:01:56.899
iteration or increment in the while loop
50

50

00:01:56.899  -->  00:01:59.149
so in other words all three parts the
51

51

00:01:59.149  -->  00:02:00.979
initialization condition and the
52

52

00:02:00.979  -->  00:02:03.829
iteration are on different lines now
53

53

00:02:03.829  -->  00:02:06.590
contrast that to the for loop everything
54

54

00:02:06.590  -->  00:02:08.420
in this case the initialization the
55

55

00:02:08.420  -->  00:02:10.789
condition and iteration are on the same
56

56

00:02:10.789  -->  00:02:13.040
line and each is separated by a
57

57

00:02:13.040  -->  00:02:15.140
semicolon as you can see we've got the
58

58

00:02:15.140  -->  00:02:18.140
initialization part then the semicolon
59

59

00:02:18.140  -->  00:02:19.819
the condition part with another
60

60

00:02:19.819  -->  00:02:21.950
semicolon and the last one is the
61

61

00:02:21.950  -->  00:02:24.050
increment or the iteration part but
62

62

00:02:24.050  -->  00:02:25.490
notice that the iteration path theirs no
63

63

00:02:25.490  -->  00:02:28.250
semicolon in the for loop so again this
64

64

00:02:28.250  -->  00:02:30.860
code will actually work the same and
65

65

00:02:30.860  -->  00:02:32.750
give you the same results so you can see
66

66

00:02:32.750  -->  00:02:34.370
the differences with the while using
67

67

00:02:34.370  -->  00:02:36.830
while and using for so let's move on and
68

68

00:02:36.830  -->  00:02:39.560
see some steps with continue and break with
69

69

00:02:39.560  -->  00:02:42.140
the while loop so here we've got some
70

70

00:02:42.140  -->  00:02:43.940
very simple code using the while loop
71

71

00:02:43.940  -->  00:02:47.120
and two if statements so what the code
72

72

00:02:47.120  -->  00:02:49.130
does it will print the numbers from five
73

73

00:02:49.130  -->  00:02:51.920
to ten now this can be simplified with
74

74

00:02:51.920  -->  00:02:53.600
different conditions and without a break
75

75

00:02:53.600  -->  00:02:55.850
and continue but it's a good example to
76

76

00:02:55.850  -->  00:02:58.700
see how they continue and break key
77

77

00:02:58.700  -->  00:03:00.950
words or statements work so first we
78

78

00:03:00.950  -->  00:03:03.470
initialize them the variable number with
79

79

00:03:03.470  -->  00:03:05.269
a value 0 that's step one on the screen
80

80

00:03:05.269  -->  00:03:07.820
then the while loop starts and it
81

81

00:03:07.820  -->  00:03:10.010
increments the number so the number
82

82

00:03:10.010  -->  00:03:12.530
has now the first time it starts has
83

83

00:03:12.530  -->  00:03:14.630
got the value 1 now we've got an if
84

84

00:03:14.630  -->  00:03:16.700
statement so let's move on now with the
85

85

00:03:16.700  -->  00:03:19.220
if statement so the if statement is
86

86

00:03:19.220  -->  00:03:21.739
checking the condition in our case this
87

87

00:03:21.739  -->  00:03:23.780
is step one on the screen number less
88

88

00:03:23.780  -->  00:03:25.670
than or equal to five so we've now got
89

89

00:03:25.670  -->  00:03:27.680
a test for one being the value
90

90

00:03:27.680  -->  00:03:29.450
current value of number being less than
91

91

00:03:29.450  -->  00:03:31.790
equal to five which is true so therefore
92

92

00:03:31.790  -->  00:03:34.489
the code inside the if statement will
93

93

00:03:34.489  -->  00:03:36.470
execute so first it print skipping
94

94

00:03:36.470  -->  00:03:38.570
number than the value 1 and then the
95

95

00:03:38.570  -->  00:03:40.190
continue statement bypasses the
96

96

00:03:40.190  -->  00:03:41.799
remaining code at the while loop and
97

97

00:03:41.799  -->  00:03:44.000
continues with the condition of the
98

98

00:03:44.000  -->  00:03:45.709
while loop so in other words we could
99

99

00:03:45.709  -->  00:03:47.630
say it jumps back to the start of the
100

100

00:03:47.630  -->  00:03:49.940
while in this case since the number is
101

101

00:03:49.940  -->  00:03:50.420
1
102

102

00:03:50.420  -->  00:03:54.890
it checks 1 less than 15 and that's true
103

103

00:03:54.890  -->  00:03:56.989
as well and again the number is
104

104

00:03:56.989  -->  00:03:58.519
incremented so it's now got the value of
105

105

00:03:58.519  -->  00:04:00.950
2 now this will be repeated until the if
106

106

00:04:00.950  -->  00:04:02.540
condition is false so in other words
107

107

00:04:02.540  -->  00:04:05.329
until the number is greater than 5 so
108

108

00:04:05.329  -->  00:04:06.530
I'm going to skip those steps because
109

109

00:04:06.530  -->  00:04:08.630
they're almost the same just the number
110

110

00:04:08.630  -->  00:04:10.519
value is getting incremented it's the
111

111

00:04:10.519  -->  00:04:12.440
same code in the if statement executed
112

112

00:04:12.440  -->  00:04:14.269
each time so we eventually get to the
113

113

00:04:14.269  -->  00:04:16.700
part where the number is exactly 5 so
114

114

00:04:16.700  -->  00:04:18.019
let's move on and see what happens once
115

115

00:04:18.019  -->  00:04:20.780
the number has a value of 5 alright so I
116

116

00:04:20.780  -->  00:04:22.280
skipped a couple of iterations as I
117

117

00:04:22.280  -->  00:04:23.750
mentioned in the images and said the
118

118

00:04:23.750  -->  00:04:26.240
same so now we continue in from the time
119

119

00:04:26.240  -->  00:04:29.060
when the number has a value of 5 so
120

120

00:04:29.060  -->  00:04:31.350
number is currently equal to 5 so
121

121

00:04:31.350  -->  00:04:33.210
first it checks the condition 5 less
122

122

00:04:33.210  -->  00:04:36.060
than 15 step one there and that's still
123

123

00:04:36.060  -->  00:04:38.460
true the number gets incremented by one
124

124

00:04:38.460  -->  00:04:40.440
it's now a value of 6 you can see it's
125

125

00:04:40.440  -->  00:04:42.780
getting incremented in step 2 then the
126

126

00:04:42.780  -->  00:04:44.940
condition in the if statement is checked
127

127

00:04:44.940  -->  00:04:46.470
in this case it's going to be step
128

128

00:04:46.470  -->  00:04:48.780
that's step 3 so it's number less than
129

129

00:04:48.780  -->  00:04:51.060
equal to 5 so it's effectively testing 6
130

130

00:04:51.060  -->  00:04:53.640
less than equal to 5 and that's false so
131

131

00:04:53.640  -->  00:04:56.070
the code in this if statement will not
132

132

00:04:56.070  -->  00:04:58.050
execute at that point the code
133

133

00:04:58.050  -->  00:04:59.460
within the code block for the if
134

134

00:04:59.460  -->  00:05:01.800
statement so next we have the printing
135

135

00:05:01.800  -->  00:05:04.650
out so that lines executed this is step
136

136

00:05:04.650  -->  00:05:07.200
four and after that we've got another if
137

137

00:05:07.200  -->  00:05:09.300
statement so this if statement checks
138

138

00:05:09.300  -->  00:05:11.670
the condition number greater than or
139

139

00:05:11.670  -->  00:05:13.650
equal to ten now our numbers got a
140

140

00:05:13.650  -->  00:05:15.810
value six at the moment since it was
141

141

00:05:15.810  -->  00:05:17.430
incremented in six greater than equal to
142

142

00:05:17.430  -->  00:05:18.390
ten is false
143

143

00:05:18.390  -->  00:05:21.840
inside this if statement so the code the
144

144

00:05:21.840  -->  00:05:23.790
condition six greater than equal to ten
145

145

00:05:23.790  -->  00:05:24.330
is false
146

146

00:05:24.330  -->  00:05:26.520
so the code inside this second if
147

147

00:05:26.520  -->  00:05:29.490
statement is not or will not execute
148

148

00:05:29.490  -->  00:05:30.930
now the steps described get repeated
149

149

00:05:30.930  -->  00:05:33.210
until the number gets a value of ten so
150

150

00:05:33.210  -->  00:05:35.040
let's move on and see what happens once
151

151

00:05:35.040  -->  00:05:37.860
the number has a value of ten alright again
152

152

00:05:37.860  -->  00:05:39.360
we skipped a couple of iterations as I
153

153

00:05:39.360  -->  00:05:40.560
mentioned in the images since they're
154

154

00:05:40.560  -->  00:05:43.230
the same so we're now continuing when
155

155

00:05:43.230  -->  00:05:45.180
the number has got the value of nine and
156

156

00:05:45.180  -->  00:05:47.670
then so then again firstly it checks the
157

157

00:05:47.670  -->  00:05:49.320
condition in the while loop which is
158

158

00:05:49.320  -->  00:05:50.910
nine less than fifteen that's step one
159

159

00:05:50.910  -->  00:05:53.760
and that's true so the while loop block
160

160

00:05:53.760  -->  00:05:55.950
starts executing again the number is
161

161

00:05:55.950  -->  00:05:58.290
incremented to ten in step two there the
162

162

00:05:58.290  -->  00:06:00.750
next condition step three we're checking
163

163

00:06:00.750  -->  00:06:03.180
if 10 is less than equal to 5 and that's
164

164

00:06:03.180  -->  00:06:05.280
false so the code block inside the first
165

165

00:06:05.280  -->  00:06:07.380
if statement is not executed and that's
166

166

00:06:07.380  -->  00:06:08.640
step three there that's actually
167

167

00:06:08.640  -->  00:06:10.710
checking that so therefore the code in
168

168

00:06:10.710  -->  00:06:12.480
step four is executed and the numbers
169

169

00:06:12.480  -->  00:06:14.070
printed out then again we've got a
170

170

00:06:14.070  -->  00:06:16.350
second if statement that checks in this
171

171

00:06:16.350  -->  00:06:18.780
case the condition ten greater than
172

172

00:06:18.780  -->  00:06:20.850
equal to ten and that's true so the
173

173

00:06:20.850  -->  00:06:22.200
block of this if statement will be
174

174

00:06:22.200  -->  00:06:24.810
executed in the block we print the
175

175

00:06:24.810  -->  00:06:26.160
message breaking at ten
176

176

00:06:26.160  -->  00:06:27.960
since the number has the value of ten
177

177

00:06:27.960  -->  00:06:29.820
greater than equal to ten is true there
178

178

00:06:29.820  -->  00:06:32.310
and the break statement then exits the
179

179

00:06:32.310  -->  00:06:35.130
loop so we tested for that in step five
180

180

00:06:35.130  -->  00:06:38.070
in step six it's printing out breaking
181

181

00:06:38.070  -->  00:06:39.540
at the number and it's got the break
182

182

00:06:39.540  -->  00:06:42.450
statement and of course the break exits
183

183

00:06:42.450  -->  00:06:44.760
the loop so the code continues after the
184

184

00:06:44.760  -->  00:06:45.180
closing
185

185

00:06:45.180  -->  00:06:48.690
brace of the while loop that's how with
186

186

00:06:48.690  -->  00:06:51.210
continue break we can interrupt the
187

187

00:06:51.210  -->  00:06:53.160
loop and depending on the condition we
188

188

00:06:53.160  -->  00:06:55.620
can skip parts of the code or break out
189

189

00:06:55.620  -->  00:06:57.990
of the loop well let's just move on and
190

190

00:06:57.990  -->  00:06:59.220
just see the important things to
191

191

00:06:59.220  -->  00:07:02.729
remember about while and do while now
192

192

00:07:02.729  -->  00:07:04.110
firstly the while loop checks the
193

193

00:07:04.110  -->  00:07:06.810
condition at the start before executing
194

194

00:07:06.810  -->  00:07:08.970
the block contrast that to the do-while
195

195

00:07:08.970  -->  00:07:11.160
loop the code is executed at least once
196

196

00:07:11.160  -->  00:07:12.810
and then the conditions checked so
197

197

00:07:12.810  -->  00:07:14.550
you're always guaranteed that the code
198

198

00:07:14.550  -->  00:07:16.500
in the code block for a do-while loop is
199

199

00:07:16.500  -->  00:07:18.660
executed well at least once so be
200

200

00:07:18.660  -->  00:07:20.130
careful with conditions because it's
201

201

00:07:20.130  -->  00:07:22.470
very easy to end up with an endless loop
202

202

00:07:22.470  -->  00:07:24.090
in other words a loop that never ends
203

203

00:07:24.090  -->  00:07:26.310
or to end up with a loop that never
204

204

00:07:26.310  -->  00:07:28.349
executes and as a tip there always
205

205

00:07:28.349  -->  00:07:29.699
check carefully the conditions
206

206

00:07:29.699  -->  00:07:32.070
expressions to make sure that doesn't
207

207

00:07:32.070  -->  00:07:33.840
happen and we can interrupt the
208

208

00:07:33.840  -->  00:07:35.490
loop as you saw by using and continue
209

209

00:07:35.490  -->  00:07:37.680
and or a break statement with the
210

210

00:07:37.680  -->  00:07:39.690
continue keyword the loop will bypass
211

211

00:07:39.690  -->  00:07:41.669
the part of the code that is below it
212

212

00:07:41.669  -->  00:07:43.229
and then continue with the next
213

213

00:07:43.229  -->  00:07:46.080
iteration but the break keyword will
214

214

00:07:46.080  -->  00:07:48.120
exit the loop depending on the condition
215

215

00:07:48.120  -->  00:07:49.860
that we're checking so that's it that's
216

216

00:07:49.860  -->  00:07:51.690
a recap of the while and do while as
217

217

00:07:51.690  -->  00:07:54.870
well as the continue and break keywords
218

218

00:07:54.870  -->  00:07:56.310
hope you got a lot out of that and I'll
219

219

00:07:56.310  -->  00:07:59.630
see you in the next video
