1
1

00:00:03,250  -->  00:00:10,020
so in the previous video we talked about
using the switch statement and in this
2

2

00:00:10,020  -->  00:00:13,900
video we're going to move on now and
talk about the for statement and
3

3

00:00:13,900  -->  00:00:18,380
the for statement is used to loop some
code so in other words it is going to allow us
4

4

00:00:18,380  -->  00:00:22,770
to execute code a certain number of
times now we haven't really looked at
5

5

00:00:22,770  -->  00:00:28,560
that before and looping code in other words
executing code more than once in a
6

6

00:00:28,560  -->  00:00:32,380
number of times is something that is
very commonly needed in programming and
7

7

00:00:32,380  -->  00:00:35,410
I'm going to show an example of why we want to
do that
8

8

00:00:35,410  -->  00:00:42,690
gonna start off by creating a new method
and call it...
9

9

00:00:42,690  -->  00:00:55,870
...so this is going to
10

10

00:00:55,870  -->  00:00:59,860
calculate the interest based on the
amount of money that's passed as a
11

11

00:00:59,860  -->  00:01:04,890
parameter now one way to do this is
going to be just to do something on
12

12

00:01:04,890  -->  00:01:13,790
these lines we are going to do a...
13

13

00:01:13,790  -->  00:01:21,420
...so we will put a bracket in their just to make sure
14

14

00:01:21,420  -->  00:01:26,110
from an operator precedence point of view that we're
processing it correctly we are
15

15

00:01:26,110  -->  00:01:29,020
actually figuring out the amount then
multiplying it by the interest rate
16

16

00:01:29,020  -->  00:01:32,960
divided by 100 and things are being
calculated in the right order and just
17

17

00:01:32,960  -->  00:01:38,360
to confirm this is working we are gonna create a
sample code and we just gonna call it so
18

18

00:01:38,360  -->  00:01:48,650
we're gonna put...so
19

19

00:01:48,650  -->  00:01:55,430
calculate interest and we are going pass...
20

20

00:01:55,430  -->  00:02:07,100
..so lets run this and make sure that it does work
21

21

00:02:07,100  -->  00:02:13,610
we got 200 point zero there and that 200.0 means
it's $200 would be the the two percent
22

22

00:02:13,610  -->  00:02:18,810
interest now this doesn't take into account
anything like compound interest or the amount
23

23

00:02:18,810  -->  00:02:22,530
of time to pay off the loan or anything
like that it's a very simple contrived
24

24

00:02:22,530  -->  00:02:28,900
example of calculating interest on an
amount of money this is one way to do it
25

25

00:02:28,900  -->  00:02:34,800
but lets just say we want to calculate 3% and
4% and 5% and perhaps your
26

26

00:02:34,800  -->  00:02:38,810
doing a comparison with different places and
you want to calculate a number of them
27

27

00:02:38,810  -->  00:02:45,780
so you could say that we could do it one way we
could copy this and paste it like so and change
28

28

00:02:45,780  -->  00:02:58,230
to print out to say 3% 4% 5% and we could
change the parameter 2 to 3% 4% 5% so if we run this 2%
29

29

00:02:58,230  -->  00:03:04,510
3% 4% and 5% calculated which is $200
$300 $400 and $500 respectively
30

30

00:03:04,510  -->  00:03:08,280
but you could probably see straight away
that would get really tedious you know if
31

31

00:03:08,280  -->  00:03:11,410
you have to do that every time you
wanted to calculated a different
32

32

00:03:11,410  -->  00:03:15,660
interest rate it would be as I said
tedious and what about if we had
33

33

00:03:15,660  -->  00:03:19,150
twenty interest rates or a under
interest rates calculations we want
34

34

00:03:19,150  -->  00:03:23,640
to do you can see that there will be lots of
code and it's very inflexible because
35

35

00:03:23,640  -->  00:03:26,810
you continually having to go back and
change things and it can be a mountains of
36

36

00:03:26,810  -->  00:03:31,650
code well the good thing here is that
computer's are made for automation so
37

37

00:03:31,650  -->  00:03:35,010
there is a good solution
to getting around this problem and
38

38

00:03:35,010  -->  00:03:39,100
that's using a for statement to automate
this process and ultimately to make it a
39

39

00:03:39,100  -->  00:03:44,000
lot easier now the for statement is
often referred to as the for loop and
40

40

00:03:44,000  -->  00:03:48,390
the idea is that it repeatedly loop
something until a condition is satisfied when I
41

41

00:03:48,390  -->  00:03:53,540
say repeatedly loops its processing a
certain amount of code a code block in
42

42

00:03:53,540  -->  00:03:57,190
other words a given number of times or
until a particular condition is
43

43

00:03:57,190  -->  00:04:01,180
satisfied the basic structure is
something along these lines we type...
44

44

00:04:01,180  -->  00:04:09,720
...and I'm just gonna put these three things in there and will discuss them
45

45

00:04:09,720  -->  00:04:15,420
that's the basic formula of a for statement
so we've got the for the brackets and we
46

46

00:04:15,420  -->  00:04:20,070
we;ve got init and it means the code that is going
to be initialized once at the start of
47

47

00:04:20,070  -->  00:04:25,220
the loop termination is telling us what
we do is we tell the for loop how we want to
48

48

00:04:25,220  -->  00:04:30,920
exit so what at what point do we exit and
that has to evaluate to false and once
49

49

00:04:30,920  -->  00:04:35,330
it evaluates to false whatever that
condition is we put in there the loop with then
50

50

00:04:35,330  -->  00:04:40,230
exit and will come down here and start
processing the next line and an increment
51

51

00:04:40,230  -->  00:04:44,730
that's an expression that's invoke
after each iteration of the loops each
52

52

00:04:44,730  -->  00:04:49,080
time the loop goes round so common thing to put
in there would be a number that is
53

53

00:04:49,080  -->  00:04:53,360
incremented each time some sort of like
a count so what we are going to do is write a
54

54

00:04:53,360  -->  00:04:56,790
very simple example and then ultimately
later in this video we gonna call this
55

55

00:04:56,790  -->  00:05:01,020
calculate interest method so this is how you'd
start you type something...
56

56

00:05:01,020  -->  00:05:05,140
...so we need an initialization so common thing to do
would be to initialize the variable so
57

57

00:05:05,140  -->  00:05:08,510
let's put.....
58

58

00:05:08,510  -->  00:05:12,530
..so you've seen that before data type and the variable we probably haven't seen
59

59

00:05:12,530  -->  00:05:17,410
it in a loop like this but what we doing
is we are initializing a special variable
60

60

00:05:17,410  -->  00:05:22,650
just for this loop once the loop is exited
and finished with this variable won't
61

61

00:05:22,650  -->  00:05:27,040
exist anymore so it's really just for
the for loop now the termination so
62

62

00:05:27,040  -->  00:05:32,510
basically that has to be false before
the loop will finish so what we do there is a
63

63

00:05:32,510  -->  00:05:41,300
a good way is putting...so you can see by putting i<5 so you can see by putting it the first time we run it i is 0
64

64

00:05:41,300  -->  00:05:45,320
so i<5 well that's going to be true
at the moment so the loop is gonna continue
65

65

00:05:45,320  -->  00:05:50,370
working until it's false so in this case its going to be true for first time so it is
66

66

00:05:50,370  -->  00:05:55,280
going to work and the whatever the code we are putting
here is going to be actually executed an
67

67

00:05:55,280  -->  00:05:58,860
increment and what we want to do there at
the end of each loop we want to increase
68

68

00:05:58,860  -->  00:06:03,790
the value of i and we can do i++ to
do that so you can see now that we've got
69

69

00:06:03,790  -->  00:06:08,800
our we are setting our initial variable i to 0 our test is to confirm that i<5
70

70

00:06:08,800  -->  00:06:14,530
so in other words it is gonna keep processing until
i is 5 or greater and i++
71

71

00:06:14,530  -->  00:06:18,280
each time you go to the loop we're
heading 1 the value of i so just to
72

72

00:06:18,280  -->  00:06:22,310
confirm that let's actually put something
or print something out of it so we will put....
73

73

00:06:22,310  -->  00:06:33,130
...so now we've created a loop and the
loop consists of a code block that's only
74

74

00:06:33,130  -->  00:06:36,250
got one statement which is an output
that's going to print the value of i
75

75

00:06:36,250  -->  00:06:41,320
and print a message and hopefully it should go through each
time through the loop and print out
76

76

00:06:41,320  -->  00:06:48,200
a message each time it goes so run that so you can see whats happened here loop 0 hello! loop 1,2
77

77

00:06:48,200  -->  00:06:53,150
3 and 4 so you can see what
happened we started on i = 0 and we've
78

78

00:06:53,150  -->  00:06:57,260
moved on until we've got to 4 and
then what happened was the next one
79

79

00:06:57,260  -->  00:07:01,870
has come through and i was value of 5 our
condition to check was i less than
80

80

00:07:01,870  -->  00:07:07,530
five and that then turn false because i was
five and the loop exited and if we come down here
81

81

00:07:07,530  -->  00:07:11,880
and of course there wasn't any other code so the
Java application finished so you can see
82

82

00:07:11,880  -->  00:07:17,930
that the computer has executed
the code five times starting at 0 now 0 is just a
83

83

00:07:17,930  -->  00:07:23,190
value there we don't have to start at 0 we could change it to anything so
84

84

00:07:23,190  -->  00:07:30,400
for example to 1 run that you can see
we got 1,2,3,4 this time because we
85

85

00:07:30,400  -->  00:07:34,280
started from one but this time there is only
4 loops because the first time was
86

86

00:07:34,280  -->  00:07:42,100
loop values was 1 second time it was 2
3rd time was 3 forth time was 4 and of course the fifth time I was
87

87

00:07:42,100  -->  00:07:48,360
in fact 5 and i is not
less than that point so the loop exited
88

88

00:07:48,360  -->  00:07:55,380
and of course if we wanted to run at five times we
could change that to say 6 1,2,3,4,5 again we got it to run
89

89

00:07:55,380  -->  00:07:59,380
again 5 times but it is fairly
typical in these scenarios with for loops
90

90

00:07:59,380  -->  00:08:04,990
to start with 0 because a lot of Java things
different parts of Java that you're
91

91

00:08:04,990  -->  00:08:10,060
finding later in the course for example
arrays start at 0 so its a good habit to get
92

92

00:08:10,060  -->  00:08:15,850
into with your coding to start things at
zero because you will see that a lot in the
93

93

00:08:15,850  -->  00:08:21,430
course later on that many computer
languages including Java they start the count at 0 and not 1
94

94

00:08:21,430  -->  00:08:24,630
ok so I've got a mini challenge for you at this
point
95

95

00:08:24,630  -->  00:08:29,030
I'm gonna paste it in here
96

96

00:08:29,030  -->  00:08:33,740
so using the for statement we just
learned above I want you to call the
97

97

00:08:33,740  -->  00:08:37,900
calculate interest method with the
amount of 10,000 with an interest rate
98

98

00:08:37,900  -->  00:08:42,450
of two three four five six seven and
eight percent and print the results
99

99

00:08:42,450  -->  00:08:47,280
results to the console window so you
should be able to figure that out based
100

100

00:08:47,280  -->  00:08:52,440
on line 6 through 9 and how to call the calculate
interest method but also the loop
101

101

00:08:52,440  -->  00:08:56,830
that we you've learned about so type the
code below this and pause the video now
102

102

00:08:56,830  -->  00:09:00,070
come back once you've got a solution and
then actually type the code that I have
103

103

00:09:00,070  -->  00:09:08,760
come up with and you can compare your
results to mine so pause the video now ok so
104

104

00:09:08,760  -->  00:09:14,050
hopefully you figured it out and I'm
going to show you how to do it so what
105

105

00:09:14,050  -->  00:09:18,250
we need to do first is obviously for loop
so looking at to what we want to
106

106

00:09:18,250  -->  00:09:24,870
calculate 2,3,4,5,6,7 and 8 so obviously
we want to create a for loop...
107

107

00:09:24,870  -->  00:09:29,330
..we can start i=2 because that's how first we
we want to start with so when you doing
108

108

00:09:29,330  -->  00:09:32,140
your doing your for loop you start with the first element
number you want to start with in this
109

109

00:09:32,140  -->  00:09:37,660
case its 2 and put i and we want to go up until 8 so therefore our
110

110

00:09:37,660  -->  00:09:43,060
tests should be one more than 8 because we want to
process 8 i<9 would be our test so once it hits
111

111

00:09:43,060  -->  00:09:50,950
9 or its greater than 9 its going to exit the loop and we'll just use
112

112

00:09:50,950  -->  00:09:56,200
an i++ and incident you notice
how you can reuse the variable again
113

113

00:09:56,200  -->  00:10:00,480
and that is where I mentioned that earlier that
the variable that you create here in this
114

114

00:10:00,480  -->  00:10:04,650
for loop only exists for this code block in the for loop so as soon as
115

115

00:10:04,650  -->  00:10:09,430
you exit that that variable doesn't
exist anymore and you can reuse it and
116

116

00:10:09,430  -->  00:10:13,790
it is also very common just to let you
know in for loops and while loop which you will learn in the
117

117

00:10:13,790  -->  00:10:18,770
next video to use variables like i, j, k and so forth because they are just there as
118

118

00:10:18,770  -->  00:10:24,040
index basically indexes to loop through
a number of times so if you see i,j, and k and wondering
119

119

00:10:24,040  -->  00:10:31,480
tim why aren't you creating better variable names it is very common to use
those on loops such as this ok so next thing we need
120

120

00:10:31,480  -->  00:10:35,710
to do is we just need to print out a message so what
we can do is just take a copy of this
121

121

00:10:35,710  -->  00:10:38,010
line
122

122

00:10:38,010  -->  00:10:46,490
and I'm gonna paste that in their and changed the two point
zero to i you noticed that if your
123

123

00:10:46,490  -->  00:10:51,830
looking at this you notice that this is an integer but
this is a double the interest rate so
124

124

00:10:51,830  -->  00:10:56,460
that's correct but what Java is doing
Java is smart enough to know that ok I can
125

125

00:10:56,460  -->  00:11:00,740
convert whole number integer to a
double so it's doing that for us
126

126

00:11:00,740  -->  00:11:05,690
automatically know what you could do if
you wanted to be correct you could cast
127

127

00:11:05,690  -->  00:11:09,940
it as a double but it isn't necessary to do it works quite nicely without it
128

128

00:11:09,940  -->  00:11:14,630
and of course the other thing would be
if you want to calculate interest rates
129

129

00:11:14,630  -->  00:11:18,240
percentages than you probably wouldn't
be using an integer there you be using a
130

130

00:11:18,240  -->  00:11:23,430
double and actually have a different way
incrementing for example you can increment by .5
131

131

00:11:23,430  -->  00:11:27,900
of a percent or something along those lines but in this case
we are keeping it pretty simple we are using
132

132

00:11:27,900  -->  00:11:28,750
integers
133

133

00:11:28,750  -->  00:11:36,200
and we are going through looping like that so let's
run this code and you can see there we
134

134

00:11:36,200  -->  00:11:43,300
actually got our solution working we've got
2,3,4,5,6,7,8 so in other words 2 through 8 we
135

135

00:11:43,300  -->  00:11:47,140
actually calculated correctly and what I
didn't do is update the print out for
136

136

00:11:47,140  -->  00:11:58,760
that so let me do that will put...run it again and their we go 2,3,4,5,6,7,8 which is what we needed
137

137

00:11:58,760  -->  00:12:01,480
to do in the challenge we needed to
actually
138

138

00:12:01,480  -->  00:12:05,590
calculated the interest rate on 10,000 on all of those which we've done
so that's the result of the challenge
139

139

00:12:05,590  -->  00:12:09,200
and one thing you probably noticed here
is that this is has got a lot of decimal points
140

140

00:12:09,200  -->  00:12:13,750
well sometimes in terms of the
precision of a double it will calculate
141

141

00:12:13,750  -->  00:12:16,870
things like this and it's not something
you need to worry about we'll be talking
142

142

00:12:16,870  -->  00:12:21,010
about precision later in the course
but it can be nice to actually get rid of
143

143

00:12:21,010  -->  00:12:25,400
that so it actually output in a nice way
so one thing you can do to fix it up
144

144

00:12:25,400  -->  00:12:29,020
if you do want to do that is if we could
actually come in here and type...
145

145

00:12:29,020  -->  00:12:34,650
.....
146

146

00:12:34,650  -->  00:12:42,180
....now it's not
something you need to do but what
147

147

00:12:42,180  -->  00:12:46,150
basically what's happening here is we're
passing the value that we got returned
148

148

00:12:46,150  -->  00:12:50,810
from our calculate interest
method to the String.format command and what
149

149

00:12:50,810  -->  00:12:56,150
that does the %.2F this
case means output the number or
150

150

00:12:56,150  -->  00:13:00,220
convert the number and output it with
just two decimal points and that would
151

151

00:13:00,220  -->  00:13:04,090
then guarantee that we don't get all
those zeros and it means instead of seeing
152

152

00:13:04,090  -->  00:13:12,920
200.0 300.0 we should be
getting 2 zeros so lets try running that and we got it now correctly
153

153

00:13:12,920  -->  00:13:18,880
formatted 2,3,4,5,6,7,8 you can see that other examples their at the top
there only had the one decimal point that's one
154

154

00:13:18,880  -->  00:13:22,070
way to look at doing this but it's not
something you need to worry too much
155

155

00:13:22,070  -->  00:13:26,090
about but I just sort of put it in there now in
case you're wondering how to go about
156

156

00:13:26,090  -->  00:13:35,880
doing that ok so next mini challenge so
how to modify the for loopo above to do the
157

157

00:13:35,880  -->  00:13:40,110
same thing as shown but start 8% percent
and to work back to 2% so in other
158

158

00:13:40,110  -->  00:13:44,160
words the first time it runs through the
loop it should be 8 the second time it should be
159

159

00:13:44,160  -->  00:13:46,100
7 3rd time should be 6
160

160

00:13:46,100  -->  00:13:51,120
what I suggest you do is copy and paste the
code above down here and then try your
161

161

00:13:51,120  -->  00:13:55,060
results so that way you keep the
original code up the top so pause
162

162

00:13:55,060  -->  00:13:58,170
the video and see if you can figure that
out and come back and I'll show you how
163

163

00:13:58,170  -->  00:14:05,310
to do it ok so hopefully you manage to
figure it out so what we'll do is copy
164

164

00:14:05,310  -->  00:14:11,500
as I mentioned now instead of putting for i=2 we wanna start at 8%
165

165

00:14:11,500  -->  00:14:15,450
so we talked about this before where we
start on it's always going to be the
166

166

00:14:15,450  -->  00:14:22,310
variable value initially then we can put..now we can't put i<9 because obviously in
167

167

00:14:22,310  -->  00:14:27,460
the first case i=8 is going to work but it's
been it's gonna be so literally going
168

168

00:14:27,460  -->  00:14:31,850
the wrong way so what we really want to
is change this around how it's gonna end
169

169

00:14:31,850  -->  00:14:37,480
so where it should end should be is....in other
170

170

00:14:37,480  -->  00:14:41,330
words its gonna keep processing while
up until i>=2
171

171

00:14:41,330  -->  00:14:46,250
and the last one where we want
to go backwards this time so we want to do i--
172

172

00:14:46,250  -->  00:14:52,100
so you can see i=8 i>= i-- that should go
173

173

00:14:52,100  -->  00:14:57,760
in the backwards direction so lets just try
running that and what we might do is put a message here
174

174

00:14:57,760  -->  00:15:02,240
just to separate it just so we don't get confuse with the output from the previous
175

175

00:15:02,240  -->  00:15:09,330
for loop and we run that and you can see we started at
8% 7,6,5,4,3,2 so it's going
176

176

00:15:09,330  -->  00:15:12,960
backwards again you can have a loop to
go either forward or backward it just
177

177

00:15:12,960  -->  00:15:16,840
depends on the conditions that you
typing in there and you just need to make
178

178

00:15:16,840  -->  00:15:20,150
sure you get your ranges correct if you
do get those numbers wrong and I
179

179

00:15:20,150  -->  00:15:24,200
probably haven't got too much time to go to that
going into that in this video you find that
180

180

00:15:24,200  -->  00:15:29,440
often the for loop may lock up and it will
continue looping and it won't exit or you might
181

181

00:15:29,440  -->  00:15:33,720
find it doesn't execute at all so make sure
in those situation just check your
182

182

00:15:33,720  -->  00:15:38,850
initialization variables but also this
condition here as when it will exit that is really the key in
183

183

00:15:38,850  -->  00:15:42,990
many ways to the entire loop is what your
condition is what's needs to
184

184

00:15:42,990  -->  00:15:49,280
be false to be able to allow the loop to
exit ok so what I'm going to do now is finished off with a
185

185

00:15:49,280  -->  00:15:53,450
challenge for you one other final challenge
and in order to do that what we need to
186

186

00:15:53,450  -->  00:15:58,060
do what I need to do is give you a bit
of code so I'm gonna give you a code to
187

187

00:15:58,060  -->  00:16:01,970
generate a prime number that i'm gonna
go through that quickly because it's not
188

188

00:16:01,970  -->  00:16:06,760
really important to know about that but
you need to do some coding you need
189

189

00:16:06,760  -->  00:16:11,550
to come up with some code that calls this on a particular amount of times so paste that code
190

190

00:16:11,550  -->  00:16:16,280
in and just talk about briefly so this is
a function that's going to determine
191

191

00:16:16,280  -->  00:16:20,210
whether a pass integer is a prime
number and I'm not sure whether you know or not
192

192

00:16:20,210  -->  00:16:24,160
but a prime number can be divided evenly
only by 1 or by itself
193

193

00:16:24,160  -->  00:16:28,390
the other thing is it has to be a whole
number greater than 1 this particular
194

194

00:16:28,390  -->  00:16:32,580
function what it does firstly it tests to
see whether it's one and if it is not
195

195

00:16:32,580  -->  00:16:35,910
the number one it is going to return
false because prime number can only be
196

196

00:16:35,910  -->  00:16:41,440
divided evenly only by one or itself and has
to be a whole number greater than 1 so if it is 1
197

197

00:16:41,440  -->  00:16:45,170
returning false we don't do any other
processing and in term of the for loop I
198

198

00:16:45,170  -->  00:16:49,160
also want show you how this for loop is a
little bit different so we got for i
199

199

00:16:49,160  -->  00:16:53,450
int i=2 we are starting on 2
because I remember I said that we
200

200

00:16:53,450  -->  00:16:57,250
prime number has to be greater than
one and then we did that test on line 35
201

201

00:16:57,250  -->  00:16:59,690
ok so you can see there we got our loop
202

202

00:16:59,690  -->  00:17:04,640
we just using n/2 as a shortcut because what we're attempting to do is find
203

203

00:17:04,640  -->  00:17:09,320
numbers that divide into in n so this for loop is only gonna go through and really
204

204

00:17:09,320  -->  00:17:13,430
calculate what it needs to do so no number
that is greater than n divided by two
205

205

00:17:13,430  -->  00:17:17,670
is going to divide into n that's really
the point here that by dividing it by 2
206

206

00:17:17,670  -->  00:17:22,750
we are optimizing this to make sure that
we're not actually processing numbers we
207

207

00:17:22,750  -->  00:17:27,650
don't need to process when we are checking and this
code on line 40 is then checking
208

208

00:17:27,650  -->  00:17:33,580
whether n the remainder between n and i dividing i into n if that is zero it
209

209

00:17:33,580  -->  00:17:36,820
means there is no remainder so what that
essentially means at this point is we
210

210

00:17:36,820  -->  00:17:40,970
found another number that divides evenly
into the number that was passed and
211

211

00:17:40,970  -->  00:17:45,110
therefore this can't be a prime number so we
need to go through the whole loop once
212

212

00:17:45,110  -->  00:17:47,920
you've been through the whole loop we
can return true because at that point we
213

213

00:17:47,920  -->  00:17:51,030
determine it is a prime number so that's
the n divided by 2 is there
214

214

00:17:51,030  -->  00:17:55,020
Its just an optimization technique just to save a bit of time for the computer
215

215

00:17:55,020  -->  00:17:58,920
again we are just checking for the remainder and if
we find that there is another number
216

216

00:17:58,920  -->  00:18:04,740
that evenly divides into the number that's passed it means this can't be a prime number so that's what this method
217

217

00:18:04,740  -->  00:18:08,760
does so what I'm gonna do is just
give you a final challenge to do
218

218

00:18:08,760  -->  00:18:12,210
now so I'm gonna come up here now that we've
written that so you need that method
219

219

00:18:12,210  -->  00:18:17,650
obviously and paste the challenge in and your
challenge is to create a for statement
220

220

00:18:17,650  -->  00:18:22,390
using any range of numbers to determine
if the number is a prime number using
221

221

00:18:22,390  -->  00:18:26,600
this prime method that I've given you down
below if it is a prime number print it
222

222

00:18:26,600  -->  00:18:32,130
out and increment a count of the number
of prime numbers found if you get to the
223

223

00:18:32,130  -->  00:18:36,660
stage where 3 or more are found in other
words you've actually gone through the
224

224

00:18:36,660  -->  00:18:42,520
loop and you've found three prime numbers
I want you to exit the for loop and as a hint use
225

225

00:18:42,520  -->  00:18:45,950
the break statement to exit the loop so you
need to use a if statement to check,
226

226

00:18:45,950  -->  00:18:51,770
count and use break and that will break out of the for loop automatically so that's
227

227

00:18:51,770  -->  00:18:52,030
it
228

228

00:18:52,030  -->  00:18:55,450
see if you can figure it out that challenge
pause the video now and do that
229

229

00:18:55,450  -->  00:19:05,370
once you're ready to see my version of the
code come back and I'll type it in, pause the video now, ok so hopefully you manage to get
230

230

00:19:05,370  -->  00:19:09,260
it to work and I know this video
is getting long again see if we can finish
231

231

00:19:09,260  -->  00:19:12,870
this off so I will start off I mentioned
that we
232

232

00:19:12,870  -->  00:19:20,910
need to have a count determining we are going to exit if the count is
three so....
233

233

00:19:20,910  -->  00:19:26,710
...so now we need to create a loop go
234

234

00:19:26,710  -->  00:19:33,910
through and call this prime method a number
of times so put...
235

235

00:19:33,910  -->  00:19:47,520
....
236

236

00:19:47,520  -->  00:19:55,330
...so what we gonna do in our loop the first thing to put is...
237

237

00:19:55,330  -->  00:19:57,920
.....
238

238

00:19:57,920  -->  00:20:04,000
...so if we have found a prime number its
return true which would have been talked
239

239

00:20:04,000  -->  00:20:08,110
about the is prime methods so if we found a prime
number what would you do is do a...
240

240

00:20:08,110  -->  00:20:22,400
....
241

241

00:20:22,400  -->  00:20:26,950
....then we're going to do a test in here
remember I said to use the break statements so put...
242

242

00:20:26,950  -->  00:20:40,440
....and that should
243

243

00:20:40,440  -->  00:20:44,640
be it so we're going through the range
of 10 through 49 basically because once
244

244

00:20:44,640  -->  00:20:50,580
it hits 50 it will exit checking to see whether the
value the prime number for the value i
245

245

00:20:50,580  -->  00:20:54,530
is a prime number if it is we are going to
increment the count and we're going to
246

246

00:20:54,530  -->  00:21:00,510
print a message saying that number is prime number
and if we got three if and only if we got to 3
247

247

00:21:00,510  -->  00:21:04,620
then we are going to exit otherwise it's just going to continue so
we shouldn't see any other output unless
248

248

00:21:04,620  -->  00:21:08,900
we found prime numbers and the best way
to do this now is to actually run it
249

249

00:21:08,900  -->  00:21:16,870
so run it and see whether it works
number 11 is a prime number 13, 17 is
250

250

00:21:16,870  -->  00:21:19,100
a prime number you can see we are exiting the for
loop
251

251

00:21:19,100  -->  00:21:22,990
so it successfully finished after 3 so it seems
to be working so let's just go and make
252

252

00:21:22,990  -->  00:21:25,400
sure that they are prime numbers so I'm
253

253

00:21:25,400  -->  00:21:39,670
going to do open a browser and type a list of prime numbers and there it is the first 1000 primes is all we need so lets open it up
254

254

00:21:39,670  -->  00:21:44,370
you can see the link at the top or actually you'll see when I get to the
page seems to be taking a while to load for some
255

255

00:21:44,370  -->  00:21:54,030
reason there we go 2,3,5,7,11,13,17,19 and if we go back to the code 11,13,17 is
correct so let's just changes this out of interest
256

256

00:21:54,030  -->  00:22:02,920
a little bit let's put the count to 10
instead of 3 and hopefully it shows 10 prime numbers
257

257

00:22:02,920  -->  00:22:08,710
11, 13, 17, 19, 23, 29, 31, 37, 41, 43, look good
258

258

00:22:08,710  -->  00:22:13,070
the seem to be the right prime numbers here so it
seems to be working which is good so
259

259

00:22:13,070  -->  00:22:16,860
that's our challenge done so the big
thing there again was once we got to the
260

260

00:22:16,860  -->  00:22:20,010
count whatever the count was we decided
we wanted to exit we printed out the
261

261

00:22:20,010  -->  00:22:23,970
message and then we did a break and the
break actually exits out of the for loop
262

262

00:22:23,970  -->  00:22:28,230
completely and processing within
continuing on line 41 if there was any
263

263

00:22:28,230  -->  00:22:31,020
coding but in this case it was the end of
the program so that's what the break
264

264

00:22:31,020  -->  00:22:35,430
statement does and that's it I'm going
to finish the video here now just one
265

265

00:22:35,430  -->  00:22:38,940
really quick thing there is a way also
to optimize this so we talked about
266

266

00:22:38,940  -->  00:22:44,900
optimizing i<=n/2 there is
another without going into too much detail we
267

267

00:22:44,900  -->  00:22:48,540
could change that so we could have
actually used a square root an
268

268

00:22:48,540  -->  00:22:52,370
advantage of doing that would be that
there is less processing still and it would
269

269

00:22:52,370  -->  00:22:56,340
slightly faster so without spending too
much time explaining why because the video
270

270

00:22:56,340  -->  00:22:58,750
is already too long we could have done
something like this
271

271

00:22:58,750  -->  00:23:10,420
....we are using long because the output that comes
272

272

00:23:10,420  -->  00:23:14,380
back from Math.square can be large
so we are casting it as a long depending
273

273

00:23:14,380  -->  00:23:17,300
on the number now you wouldn't need to do
that for the small numbers were using
274

274

00:23:17,300  -->  00:23:22,210
here but that would be a little bit more
optimized so I run that we should get the same
275

275

00:23:22,210  -->  00:23:23,610
results firstly
276

276

00:23:23,610  -->  00:23:27,980
we still got the same results but that would actually
be better because you will find the
277

277

00:23:27,980  -->  00:23:34,070
number of things we need to check would
be less times through the loop
278

278

00:23:34,070  -->  00:23:35,070
so to speak
279

279

00:23:35,070  -->  00:23:38,080
you could test that if you wanted to you
could actually put some code in here to
280

280

00:23:38,080  -->  00:23:42,390
print out each time you going through
the loop and to test your results as to how many times
281

281

00:23:42,390  -->  00:24:03,680
actually we will just do it really quickly now so will do a.....lets just do that...so for the last one number 41, 1,2,3,4,5,6 so that is 6 loops remembering that for the number 41
282

282

00:24:03,680  -->  00:24:12,920
so we change that back to n/2 again and look at number 41 this time too
283

283

00:24:12,920  -->  00:24:17,020
look how many times it actually had to loop through
significantly more times to calculate
284

284

00:24:17,020  -->  00:24:19,770
that number so that would be the reason
that you use that square root function
285

285

00:24:19,770  -->  00:24:23,940
for optimization purposes but again you'll
find out more about using those sorts of
286

286

00:24:23,940  -->  00:24:26,380
things later in the course I just wanted
to point out there is another way of
287

287

00:24:26,380  -->  00:24:31,480
doing that if you decided to but that's it
so that's the for loop I hope you got a lot out of it that
288

288

00:24:31,480  -->  00:24:37,080
and just one last thing there's also another
variation of the for loop called the for each
289

289

00:24:37,080  -->  00:24:39,690
but we're not discussing that here well
the reason for that is we
290

290

00:24:39,690  -->  00:24:44,180
really need to be talking about arrays
and objects and the like before that makes
291

291

00:24:44,180  -->  00:24:49,070
sense so you see the for each which again is a
variation of this for loop in future in
292

292

00:24:49,070  -->  00:24:53,600
future videos in the course so that's it
I'm going to end this video now and in a
293

293

00:24:53,600  -->  00:24:58,380
next video we are going to start talking
about another type of loop that's available in
294

294

00:24:58,380  -->  00:25:01,770
Java and that's the while and also the do while
so we'll see you in that video
