WEBVTT
1
1

00:00:03.890  -->  00:00:06.810
so in the previous two videos we've
2

2

00:00:06.810  -->  00:00:08.940
learned about interfaces so it's now
3

3

00:00:08.940  -->  00:00:10.710
time to confirm our understanding of
4

4

00:00:10.710  -->  00:00:13.620
that by going through a challenge so let
5

5

00:00:13.620  -->  00:00:15.360
me paste in the challenge and we'll take
6

6

00:00:15.360  -->  00:00:15.990
it from there
7

7

00:00:15.990  -->  00:00:17.310
and in case you're wondering this is
8

8

00:00:17.310  -->  00:00:20.360
future Tim again making a change to make
9

9

00:00:20.360  -->  00:00:21.600
this a little bit more understandable
10

10

00:00:21.600  -->  00:00:22.980
because the original version of the
11

11

00:00:22.980  -->  00:00:26.010
course I found that some students found
12

12

00:00:26.010  -->  00:00:28.340
the challenge text to be a little bit
13

13

00:00:28.340  -->  00:00:29.600
confusing so hopefully this will clear
14

14

00:00:29.600  -->  00:00:31.230
that up so let's go through what I've
15

15

00:00:31.230  -->  00:00:33.540
just pasted it in so we need to create a
16

16

00:00:33.540  -->  00:00:34.770
simple interface
17

17

00:00:34.770  -->  00:00:37.380
now I'm suggesting you name it
18

18

00:00:37.380  -->  00:00:39.030
savable or i savable
19

19

00:00:39.030  -->  00:00:41.940
now that interface allows an object to
20

20

00:00:41.940  -->  00:00:44.190
be saved to some sort of storage medium
21

21

00:00:44.190  -->  00:00:46.760
my tip is to use an ArrayList for that
22

22

00:00:46.760  -->  00:00:49.350
now the exact type of medium isn't known
23

23

00:00:49.350  -->  00:00:52.530
to the interface nor to the classes that
24

24

00:00:52.530  -->  00:00:54.780
implement it so the interface will just
25

25

00:00:54.780  -->  00:00:57.320
specify two methods one to return an
26

26

00:00:57.320  -->  00:01:00.210
ArrayList of values to be saved and the
27

27

00:01:00.210  -->  00:01:02.670
other to populate the objects field from
28

28

00:01:02.670  -->  00:01:05.330
an ArrayList as a parameter so you want
29

29

00:01:05.330  -->  00:01:07.710
to create a few sample classes that
30

30

00:01:07.710  -->  00:01:10.830
implement your savable interface now
31

31

00:01:10.830  -->  00:01:12.390
we've used the idea of a game with
32

32

00:01:12.390  -->  00:01:14.400
players and monsters but you can create
33

33

00:01:14.400  -->  00:01:16.040
any type of classes that you want here
34

34

00:01:16.040  -->  00:01:19.430
you want to also override the two streak
35

35

00:01:19.430  -->  00:01:22.020
method for each of your classes so that
36

36

00:01:22.020  -->  00:01:24.090
they can easily be printed to enable the
37

37

00:01:24.090  -->  00:01:27.000
program to be tested easier so in the
38

38

00:01:27.000  -->  00:01:28.860
main class which is this one write a
39

39

00:01:28.860  -->  00:01:31.290
method that takes an object that
40

40

00:01:31.290  -->  00:01:33.470
implements the interface as a parameter
41

41

00:01:33.470  -->  00:01:35.880
and saves quote and quote saves the
42

42

00:01:35.880  -->  00:01:37.430
value in other words it calls a
43

43

00:01:37.430  -->  00:01:40.710
method defined in the interface now we
44

44

00:01:40.710  -->  00:01:43.200
haven't covered java io yet so the
45

45

00:01:43.200  -->  00:01:44.570
method you write should just print the
46

46

00:01:44.570  -->  00:01:47.670
values to the screen now also in this
47

47

00:01:47.670  -->  00:01:50.280
main class write another method that
48

48

00:01:50.280  -->  00:01:53.130
restores the values to a savable object
49

49

00:01:53.130  -->  00:01:55.350
in other words it calls a method from
50

50

00:01:55.350  -->  00:01:57.540
the interface for populating fields as
51

51

00:01:57.540  -->  00:01:59.610
described above and again we're not
52

52

00:01:59.610  -->  00:02:02.490
going to use Java file IO here instead
53

53

00:02:02.490  -->  00:02:04.770
you're gonna use the read values method
54

54

00:02:04.770  -->  00:02:07.320
I'm gonna paste in here shortly to
55

55

00:02:07.320  -->  00:02:09.560
simulate getting values from a file
56

56

00:02:09.560  -->  00:02:12.230
and by doing that it allows you to type
57

57

00:02:12.230  -->  00:02:13.890
as many values as your classwork
58

58

00:02:13.890  -->  00:02:16.830
and returns an ArrayList in case you're
59

59

00:02:16.830  -->  00:02:18.840
wondering there's a whole Java io
60

60

00:02:18.840  -->  00:02:21.000
section later in this course we can get
61

61

00:02:21.000  -->  00:02:23.370
to use real files and do file processing
62

62

00:02:23.370  -->  00:02:25.440
but for now we're just simulating that
63

63

00:02:25.440  -->  00:02:27.510
with this challenge I did mention this
64

64

00:02:27.510  -->  00:02:29.190
read values method so I'm going to paste
65

65

00:02:29.190  -->  00:02:31.200
that in and that's available in the
66

66

00:02:31.200  -->  00:02:33.720
resources section of this video along
67

67

00:02:33.720  -->  00:02:35.940
with this description when you pasted in
68

68

00:02:35.940  -->  00:02:37.680
make sure you paste it outside of the
69

69

00:02:37.680  -->  00:02:39.210
main method it's going to be down there
70

70

00:02:39.210  -->  00:02:42.330
so I'm going to paste that in and you
71

71

00:02:42.330  -->  00:02:45.560
may need to accept some imports as well
72

72

00:02:45.560  -->  00:02:49.440
and it's Java dot util and again that
73

73

00:02:49.440  -->  00:02:51.120
read values method the purpose of that
74

74

00:02:51.120  -->  00:02:53.070
as you can see up here is to simulate
75

75

00:02:53.070  -->  00:02:55.440
getting values from a file that allows
76

76

00:02:55.440  -->  00:02:57.090
you to type as many values as your class
77

77

00:02:57.090  -->  00:02:59.370
requires and then returns whatever
78

78

00:02:59.370  -->  00:03:01.800
you've typed as an ArrayList all right
79

79

00:03:01.800  -->  00:03:03.900
so that your challenge pause the video
80

80

00:03:03.900  -->  00:03:05.280
now and see how you go off the challenge
81

81

00:03:05.280  -->  00:03:07.170
when you're ready to come back and check
82

82

00:03:07.170  -->  00:03:09.150
out my solution come back and we'll go
83

83

00:03:09.150  -->  00:03:11.370
through that step by step pause the
84

84

00:03:11.370  -->  00:03:14.410
video now
85

85

00:03:14.410  -->  00:03:15.330
Okay, how did you get on?
86

86

00:03:15.330  -->  00:03:16.250
Did you figure it out?
87

87

00:03:16.250  -->  00:03:17.100
So let's make a start.
88

88

00:03:17.100  -->  00:03:20.410
So the first thing we need to do
is create the simple interface
89

89

00:03:20.410  -->  00:03:23.610
that allows an object to be saved
to some sort of storage medium.
90

90

00:03:23.610  -->  00:03:25.800
So we're gonna open up here,
and create that.
91

91

00:03:27.080  -->  00:03:31.190
I'm gonna create the interface and
I'm gonna call that one saveable.
92

92

00:03:31.190  -->  00:03:33.140
So gonna use the i again, ISaveable.
93

93

00:03:35.010  -->  00:03:37.730
Saveable and of course it's going
to be an interface and not a class.
94

94

00:03:38.990  -->  00:03:44.390
And what we need is to go back to the main
method again and just specify two methods.
95

95

00:03:44.390  -->  00:03:47.260
One to return an array list
of values to be saved and
96

96

00:03:47.260  -->  00:03:50.270
the other to populate the objects'
fields from the array list.
97

97

00:03:50.270  -->  00:03:52.550
So, what we're going
to do in an interface,
98

98

00:03:52.550  -->  00:03:57.400
the first one is gonna
be an ArrayList.
99

99

00:03:57.400  -->  00:03:58.280
And I'll call that write.
100

100

00:03:59.910  -->  00:04:03.320
Obviously that's going to save write the
data and the other one's gonna be read.
101

101

00:04:03.320  -->  00:04:05.730
So it's gonna be void,
doesn't need to return anything.
102

102

00:04:05.730  -->  00:04:10.860
Read ArrayList of String which
will be the same values.
103

103

00:04:13.880  -->  00:04:17.370
So, that's gonna be the two methods that
ultimately we're going to have to write
104

104

00:04:17.370  -->  00:04:20.420
the code for, and the class that
actually implements this interface.
105

105

00:04:20.420  -->  00:04:25.420
So, what we're gonna do is create some
classes that actually use this interface.
106

106

00:04:25.420  -->  00:04:28.560
Well, we'll start off creating one,
we'll actually create one called Player.
107

107

00:04:28.560  -->  00:04:33.910
But again, you could have actually created
any sort of class that you wanted to,
108

108

00:04:33.910  -->  00:04:39.580
but we'll call this one Player, so Player
is actually going to implement Saveable,
109

109

00:04:39.580  -->  00:04:42.060
so implements ISaveable, like so.
110

110

00:04:42.060  -->  00:04:45.460
Notice that we're getting an error in
there because we haven't implemented that.
111

111

00:04:45.460  -->  00:04:47.070
So we'll need a few things here for
our class.
112

112

00:04:47.070  -->  00:04:49.310
Get rid of some of these spaces here,
looks better.
113

113

00:04:49.310  -->  00:04:55.550
So we'll start off with a name, a name of
the player, how many hit points he's got.
114

114

00:04:58.130  -->  00:05:01.910
Let's also add an integer for strength,
115

115

00:05:01.910  -->  00:05:05.740
how much strength the player's
actually got and also a weapon.
116

116

00:05:05.740  -->  00:05:08.890
We'll just have a string that
contain the name of the weapon that
117

117

00:05:08.890  -->  00:05:10.020
this particular player has got.
118

118

00:05:11.180  -->  00:05:12.830
Let's add a constructor and
119

119

00:05:12.830  -->  00:05:15.790
the constructor is going
to add three parameters.
120

120

00:05:15.790  -->  00:05:17.350
We'll actually add them all in the weapon.
121

121

00:05:17.350  -->  00:05:20.370
We'll actually just hard
code the weapon like that.
122

122

00:05:20.370  -->  00:05:23.150
Again a lot of this doesn't really matter
because this is not really directly part
123

123

00:05:23.150  -->  00:05:23.790
of the challenge.
124

124

00:05:23.790  -->  00:05:27.180
We're just doing, implementing a class so
that we can actually use this
125

125

00:05:27.180  -->  00:05:29.790
interface and implement
the functions that we talked about,
126

126

00:05:29.790  -->  00:05:32.350
the methods I should say that
is set up in the interface.
127

127

00:05:32.350  -->  00:05:33.550
All right and start weapon.
128

128

00:05:35.280  -->  00:05:36.470
Let's just call that a sword.
129

129

00:05:36.470  -->  00:05:37.400
We'll just hard code that.
130

130

00:05:37.400  -->  00:05:39.560
We could have used that as
a parameter if we wanted to.
131

131

00:05:39.560  -->  00:05:41.290
So next we want some getters.
132

132

00:05:41.290  -->  00:05:43.740
And getters and setters so
I'm just gonna set up the getters and
133

133

00:05:43.740  -->  00:05:45.300
setters for everything.
134

134

00:05:45.300  -->  00:05:49.290
So I'm going to getters and setters and
just for all of the fields so.
135

135

00:05:49.290  -->  00:05:50.700
So we can access those if we need to.
136

136

00:05:50.700  -->  00:05:52.020
So, that's a very basic class, and
137

137

00:05:52.020  -->  00:05:55.000
the last thing we wanna do here
before we move on to the write and
138

138

00:05:55.000  -->  00:05:58.950
read methods, which are part of the
interface, is we wanna override toString.
139

139

00:06:00.630  -->  00:06:01.420
So, I'm gonna use toString.
140

140

00:06:01.420  -->  00:06:03.320
And it's asking there,
what do we wanna do?
141

141

00:06:03.320  -->  00:06:04.980
Well, we wanna return all of those,
so let's just do that.
142

142

00:06:04.980  -->  00:06:07.480
And you can see it's actually
automatically added all those for
143

143

00:06:07.480  -->  00:06:09.720
us nicely, so
we don't actually have to write any code.
144

144

00:06:09.720  -->  00:06:12.780
It did all of that for us so
I'm just gonna leave this to default.
145

145

00:06:12.780  -->  00:06:15.870
You could change it if you wanted to and
get rid of the bracket or
146

146

00:06:15.870  -->  00:06:16.820
do something like that.
147

147

00:06:16.820  -->  00:06:19.630
Our purpose is this is gonna be fun,
this will work well.
148

148

00:06:19.630  -->  00:06:22.360
Okay, so let's get IntelliJ now
to create the stubs for us.
149

149

00:06:22.360  -->  00:06:23.800
That's the empty methods.
150

150

00:06:23.800  -->  00:06:25.510
So then we'll actually fill them in.
151

151

00:06:25.510  -->  00:06:29.410
So to do that, we go there,
we select Implement Methods.
152

152

00:06:29.410  -->  00:06:30.870
And we select both of them.
153

153

00:06:30.870  -->  00:06:34.430
You can see now that the class,
as far as IntelliJ is concerned,
154

154

00:06:34.430  -->  00:06:38.070
Java's consent is now valid,
because we've implemented those methods.
155

155

00:06:38.070  -->  00:06:40.250
But, of course, at this stage those
methods don't actually do anything.
156

156

00:06:40.250  -->  00:06:42.330
So, even though it's valid,
it's not very useful,
157

157

00:06:42.330  -->  00:06:44.050
because it's not actually doing anything.
158

158

00:06:44.050  -->  00:06:47.780
So, the write methods, the order of
that's going to just insert the value,
159

159

00:06:47.780  -->  00:06:51.450
or the values of all the members that
are needed to save the state of our player
160

160

00:06:51.450  -->  00:06:53.480
into the array list, and then return it.
161

161

00:06:53.480  -->  00:06:57.680
So any member variables that are not
strings will need to be string.
162

162

00:06:57.680  -->  00:06:59.150
You'll see that in the code shortly.
163

163

00:06:59.150  -->  00:07:01.800
And the read method's gonna
receive in a containing
164

164

00:07:01.800  -->  00:07:04.930
the values that have been previously
written for it's write method and
165

165

00:07:04.930  -->  00:07:07.660
use them to recreate the state
of our member of variables.
166

166

00:07:07.660  -->  00:07:11.420
To any values for non-string members also
have to be cast to the appropriate type.
167

167

00:07:11.420  -->  00:07:13.230
Let's go ahead and
do the write method first.
168

168

00:07:13.230  -->  00:07:16.580
So I'm going to actually start
by creating an array list and
169

169

00:07:16.580  -->  00:07:19.610
we'll kinda use this format
from now on for our code.
170

170

00:07:19.610  -->  00:07:21.110
We're gonna start with the List string.
171

171

00:07:21.110  -->  00:07:24.640
So we're just gonna use
the generic interface list
172

172

00:07:24.640  -->  00:07:29.070
whatever way of using a list of any type,
array lists et cetera.
173

173

00:07:30.260  -->  00:07:35.870
And we're going to call it
values = new ArrayList.
174

174

00:07:35.870  -->  00:07:39.060
So, again that's a good format to do for
the reasons that I uploaded
175

175

00:07:39.060  -->  00:07:42.530
in the previous video because we only
need to change this is one spot here,
176

176

00:07:42.530  -->  00:07:45.390
we'd have to continually go back and
change it here as well.
177

177

00:07:45.390  -->  00:07:48.980
It really just opens it up and
makes the code easy to understand.
178

178

00:07:50.870  -->  00:07:52.490
And looking back at there
with our interface,
179

179

00:07:52.490  -->  00:07:56.430
let's also make that a list,
just for maximum flexibility.
180

180

00:07:56.430  -->  00:07:59.790
This would be a really good idea
to actually do it this way and
181

181

00:07:59.790  -->  00:08:03.430
we can actually save that as well and
we'll change this to also be a list.
182

182

00:08:04.450  -->  00:08:07.090
That's maximum flexibility
because it means in the future,
183

183

00:08:07.090  -->  00:08:10.100
now that this interface has been created,
we can use any type of list.
184

184

00:08:10.100  -->  00:08:12.440
We don't have to use
a specific type of list and
185

185

00:08:12.440  -->  00:08:14.980
I'll show you how that
works later in the course.
186

186

00:08:14.980  -->  00:08:16.520
So that's our list there.
187

187

00:08:16.520  -->  00:08:19.170
So, we're now using in our List method.
188

188

00:08:19.170  -->  00:08:20.960
I wanted to actually change
this definition as well,
189

189

00:08:20.960  -->  00:08:23.540
noticing it's complaining now
because we changed the definition.
190

190

00:08:23.540  -->  00:08:26.200
So, I'll change that to a list like so,
and
191

191

00:08:26.200  -->  00:08:29.700
I'll also change this to a list
cuz it's actually returning lists.
192

192

00:08:29.700  -->  00:08:30.510
Okay, so moving on.
193

193

00:08:30.510  -->  00:08:32.690
So, we've created our values.
194

194

00:08:32.690  -->  00:08:35.340
That's what's going to be in there,
and we'll return values.
195

195

00:08:35.340  -->  00:08:37.370
And all we need to do
is actually add them.
196

196

00:08:37.370  -->  00:08:41.380
So, to add them it's as
simple as typing values.add.
197

197

00:08:41.380  -->  00:08:47.250
We can use an index position if you wanna
guarantee where there going to be saved so
198

198

00:08:47.250  -->  00:08:51.070
we'll start with 0,
this.name values.add 1.
199

199

00:08:51.070  -->  00:08:53.350
And then we're going to cast this,
we're going to add.
200

200

00:08:53.350  -->  00:08:55.870
Actually we're gonna do a little
trick which we can actually
201

201

00:08:55.870  -->  00:09:00.640
quickly convert this to a string by
just putting "" + this.hitPoints).
202

202

00:09:00.640  -->  00:09:03.440
That's just one way of doing it and
that will actually effectively make that
203

203

00:09:03.440  -->  00:09:06.850
a string, which we need for
to actually put in this array list.
204

204

00:09:06.850  -->  00:09:14.040
values.add 2, the same for
strength, this.strength.
205

205

00:09:14.040  -->  00:09:19.880
And values.add 3, this.weapon.
206

206

00:09:19.880  -->  00:09:24.130
So that's the four parameters or the four
fields, I should say, in this class,
207

207

00:09:24.130  -->  00:09:26.270
that's we'll actually now
save to an array list.
208

208

00:09:26.270  -->  00:09:28.720
And in the last line, of course,
the return actually saves that,
209

209

00:09:28.720  -->  00:09:31.660
or return should say that list
also can be used elsewhere.
210

210

00:09:31.660  -->  00:09:34.600
So in terms of reading the list,
what's actually very similar,
211

211

00:09:34.600  -->  00:09:37.890
we can actually come through here and
write some code in our read method.
212

212

00:09:37.890  -->  00:09:41.390
And what we wanna do first is actually
test to see whether the actual list that
213

213

00:09:41.390  -->  00:09:44.450
we received, make sure that that's
actually a valid list in terms
214

214

00:09:44.450  -->  00:09:47.600
of whether it's null or not and
obviously it's got some data in it.
215

215

00:09:47.600  -->  00:09:52.660
So we can actually do that,
and one way we can do that,
216

216

00:09:52.660  -->  00:10:01.010
we can put if(savedValues is now equal to
null & saveValues.size is greater than 0.
217

217

00:10:01.010  -->  00:10:03.080
So we know that its not null and
we've got at least one entry,
218

218

00:10:03.080  -->  00:10:04.350
we're probably on the right track.
219

219

00:10:04.350  -->  00:10:11.820
And we'll do this.name = savedValues.get,
the entry element(0).
220

220

00:10:11.820  -->  00:10:14.040
And this.hitPoints.
221

221

00:10:14.040  -->  00:10:15.990
Now we can set it up by using the integer.
222

222

00:10:15.990  -->  00:10:21.830
The class Integer.parseInt
(savedValues.get(1)).
223

223

00:10:21.830  -->  00:10:24.830
So we're just converting that cuz we know
that it's a number because in the right
224

224

00:10:24.830  -->  00:10:26.540
method above we wrote it as a number.
225

225

00:10:26.540  -->  00:10:28.590
We just put a double quote to
actually make it a string.
226

226

00:10:28.590  -->  00:10:33.100
But essentially it's still only
a number in the sense that only
227

227

00:10:33.100  -->  00:10:36.940
a numeric number was actually added,
and the same for
228

228

00:10:36.940  -->  00:10:42.760
strength = Integer.parseInt, and
it's gonna be savedValues.get(2).
229

229

00:10:42.760  -->  00:10:47.990
And then the last one,
weapon = savedValues.get(3) and
230

230

00:10:47.990  -->  00:10:54.120
notice also that we've had no,
we've just used a generic list here.
231

231

00:10:54.120  -->  00:10:56.450
You parse a generic list and
because again,
232

232

00:10:56.450  -->  00:10:58.670
the list is the interface its got a .get.
233

233

00:10:58.670  -->  00:11:01.810
What will happen is even though
we're actually parsing an ArrayList,
234

234

00:11:01.810  -->  00:11:04.220
ArrayList is still implementing
the List interface.
235

235

00:11:04.220  -->  00:11:08.750
This code will still work, the .size will
still work, the .get will work because
236

236

00:11:08.750  -->  00:11:11.880
the actual object that was
passed will still be known.
237

237

00:11:11.880  -->  00:11:14.400
It's a list but
also an array list if that makes sense,
238

238

00:11:14.400  -->  00:11:17.610
so we'll be actually using arrays
to send the data to this method,
239

239

00:11:17.610  -->  00:11:20.720
but all these general functions
based on a list to work as well, and
240

240

00:11:20.720  -->  00:11:23.170
that's one of the great reasons
to use the interface as well.
241

241

00:11:23.170  -->  00:11:27.760
Okay, so that's our basic player
class there, we gotta basic class,
242

242

00:11:27.760  -->  00:11:30.750
we've also implemented the two methods,
write and read.
243

243

00:11:30.750  -->  00:11:35.640
So that we can actually both write
basically the state of this object out and
244

244

00:11:35.640  -->  00:11:38.930
also we can read it, and then retrieve it,
and then update the values back.
245

245

00:11:38.930  -->  00:11:41.220
So, it's sort of like saving
a player's character.
246

246

00:11:41.220  -->  00:11:43.660
So, you'd use something like
this ultimately in a game,
247

247

00:11:43.660  -->  00:11:46.400
if you were actually saving
the state of the player.
248

248

00:11:46.400  -->  00:11:49.130
So that the game could be
loaded at some future point.
249

249

00:11:49.130  -->  00:11:51.520
So moving now back to the main class,
we've done that,
250

250

00:11:51.520  -->  00:11:54.950
so we've created some sample classes
that implement the Saveable interface.
251

251

00:11:54.950  -->  00:11:57.510
Well we actually done one at the moment,
we've done Player.
252

252

00:11:57.510  -->  00:12:00.460
We overrode the toString for
that class, as you saw.
253

253

00:12:00.460  -->  00:12:04.700
And we also have implemented those two
methods as well which we talked about
254

254

00:12:04.700  -->  00:12:05.780
in the interface.
255

255

00:12:05.780  -->  00:12:08.670
So what we wanna do now is rather
method that takes an object,
256

256

00:12:08.670  -->  00:12:11.270
implements the interface as
a parameter and saves the value.
257

257

00:12:11.270  -->  00:12:13.750
So we're going to actually
create that method here.
258

258

00:12:17.460  -->  00:12:24.630
So to do that, I'm gonna type
public static void saveObject.
259

259

00:12:24.630  -->  00:12:27.250
And it's going to be ISaveable is
the parameter that's passed to it.
260

260

00:12:27.250  -->  00:12:30.300
ISaveable objectToSave.
261

261

00:12:30.300  -->  00:12:31.350
And we'll talk about this shortly.
262

262

00:12:32.690  -->  00:12:35.940
Then we're going to write a loop for
int i=0.
263

263

00:12:35.940  -->  00:12:42.600
i less than objectToSave.write.size,
264

264

00:12:42.600  -->  00:12:48.350
i++ and
we're gonna code a message to Saving
265

265

00:12:48.350  -->  00:12:55.430
+ objectToSave.write .get(i)
+ to storage device.
266

266

00:12:57.950  -->  00:13:01.120
Now looking at that it might take a little
bit to think about what's actually going
267

267

00:13:01.120  -->  00:13:03.660
on here but
what we're doing is we're actually
268

268

00:13:03.660  -->  00:13:07.470
passing as a parameter the ISaveable
using the ISaveable interface.
269

269

00:13:07.470  -->  00:13:11.600
And by doing that we can actually use
any object that is using this interface,
270

270

00:13:11.600  -->  00:13:13.120
that has implemented this interface.
271

271

00:13:13.120  -->  00:13:14.300
So we can be quite generic.
272

272

00:13:14.300  -->  00:13:18.110
We can use this method for saving any
type of class, which is very powerful.
273

273

00:13:18.110  -->  00:13:22.320
And what we're doing is we're cycling
through all the entries using the .write.
274

274

00:13:22.320  -->  00:13:25.570
In other words,
going back to our .write class again,
275

275

00:13:25.570  -->  00:13:30.270
you can see from memory what that .write
was doing was creating that array list,
276

276

00:13:30.270  -->  00:13:32.710
one entry in the array list for each item.
277

277

00:13:32.710  -->  00:13:34.710
As you can see that it's
actually working there.
278

278

00:13:34.710  -->  00:13:37.280
So, there should be four
entries in here which will be
279

279

00:13:37.280  -->  00:13:39.260
nine hit points strength on this weapon.
280

280

00:13:39.260  -->  00:13:41.880
So in this method here what it's doing
is it's going through each object,
281

281

00:13:41.880  -->  00:13:46.690
cuz it's using .write,
which returns the entire list if you will.
282

282

00:13:46.690  -->  00:13:48.130
Figuring out what the size is, and
283

283

00:13:48.130  -->  00:13:51.260
then going through each item and
what it should say is saving and
284

284

00:13:51.260  -->  00:13:54.630
then actually show us the actual
object name into storage details.
285

285

00:13:54.630  -->  00:13:56.060
And I'll actually show
you that on the screen.
286

286

00:13:56.060  -->  00:13:57.870
So again, the power of interface is there.
287

287

00:13:57.870  -->  00:14:01.040
Then the other way, contrasting that,
we need a load object as well.
288

288

00:14:01.040  -->  00:14:05.330
So the load object does the opposite,
and that enables us, unsurprisingly,
289

289

00:14:05.330  -->  00:14:06.600
to load the data back.
290

290

00:14:06.600  -->  00:14:10.640
So load the object, so
public static void loadObject.
291

291

00:14:10.640  -->  00:14:14.500
That's gonna be an ISaveable again,
objectToLoad.
292

292

00:14:14.500  -->  00:14:18.780
And we're gonna start,
we're gonna actually create
293

293

00:14:18.780  -->  00:14:24.370
an ArrayList values = and
it's going to be readValues.
294

294

00:14:24.370  -->  00:14:26.690
And remember we wrote that method up here,
readValues.
295

295

00:14:26.690  -->  00:14:30.560
And the readValues, of course enables
you to simulate getting that data
296

296

00:14:30.560  -->  00:14:34.380
from somewhere, but in this case
we're just going to top that data in.
297

297

00:14:34.380  -->  00:14:35.980
You will see that a little bit later.
298

298

00:14:35.980  -->  00:14:41.320
So we've got the data, and then we just
need the objectToLoad.read(values).
299

299

00:14:41.320  -->  00:14:43.760
So it's looking for the .read method,
300

300

00:14:43.760  -->  00:14:48.060
which again all objects that implement
aside from what we must have, so
301

301

00:14:48.060  -->  00:14:52.600
in this case what we're doing is,
we've got the data which we've typed.
302

302

00:14:52.600  -->  00:14:57.290
And we're going back into the player
object is gonna then call the read method
303

303

00:14:57.290  -->  00:15:02.120
and extract the necessary data out and
basically save it in the object values for
304

304

00:15:02.120  -->  00:15:05.470
each of those entries of
the name the weapon et cetera.
305

305

00:15:05.470  -->  00:15:08.980
So again load objects, save objects should
be pretty simple if you think about it,
306

306

00:15:08.980  -->  00:15:12.400
if you're looking at that in figuring out
what it's trying to do in terms of using
307

307

00:15:12.400  -->  00:15:15.230
the .write function to determine
the size and then getting here.
308

308

00:15:15.230  -->  00:15:18.980
Cuz this is returning a list so you can
say that up .write returns a list so
309

309

00:15:18.980  -->  00:15:23.230
we're using that capability to actually
then retrieve the particular entries we
310

310

00:15:23.230  -->  00:15:25.330
want and to cycle through them all.
311

311

00:15:25.330  -->  00:15:28.260
But of course the load object has to get
the data ultimately from somewhere we were
312

312

00:15:28.260  -->  00:15:31.040
simulating that just by
entering it from the keyboard.
313

313

00:15:31.040  -->  00:15:34.340
So what we can now do is we can
actually test this a little bit more so
314

314

00:15:34.340  -->  00:15:37.180
we go back up to the top of
the code now in our main method.
315

315

00:15:37.180  -->  00:15:45.710
And what we should have to do is type
Player tim = new Player("Tim, 10, 15).
316

316

00:15:45.710  -->  00:15:49.130
And remember that was if we go back
to player again and have a look, 10,
317

317

00:15:49.130  -->  00:15:51.850
15 and the two parameters for
hitPoints and strength.
318

318

00:15:51.850  -->  00:15:55.670
So strength the three parameters are name,
hitPoints and strength.
319

319

00:15:55.670  -->  00:16:00.740
So that's the three parameters and just
to confirm that we'll put tim.toString.
320

320

00:16:00.740  -->  00:16:02.320
We'll actually output that on the screen.
321

321

00:16:02.320  -->  00:16:05.910
Now we'll actually save the object so
saveObject(tim).
322

322

00:16:05.910  -->  00:16:07.180
We'll have a look at the output for that.
323

323

00:16:07.180  -->  00:16:11.000
Then we'll change something,
where tim.setHitPoints(8), so
324

324

00:16:11.000  -->  00:16:12.150
let's change the hit points.
325

325

00:16:13.960  -->  00:16:15.850
Now put tim again, and
we can do that by default.
326

326

00:16:15.850  -->  00:16:19.020
Remember, you don't need to put .toString,
that will be assumed if we don't enter it.
327

327

00:16:19.020  -->  00:16:24.120
So we'll do that, and tim.setWeapon,
328

328

00:16:24.120  -->  00:16:29.820
the old Stormbringer, saveObject(tim).
329

329

00:16:29.820  -->  00:16:34.120
Let's load the object, tim,
and then print out tim.
330

330

00:16:36.830  -->  00:16:38.420
So let's actually have
a look at running that code,
331

331

00:16:38.420  -->  00:16:40.400
just make sure that it actually
does work and do the right thing.
332

332

00:16:43.380  -->  00:16:46.930
So okay, saving Tim to storage,
saving 10 to storage.
333

333

00:16:46.930  -->  00:16:49.120
So Tim was the name,
remember, the first one?
334

334

00:16:49.120  -->  00:16:50.920
Now making more space so you can see this.
335

335

00:16:52.170  -->  00:16:55.850
So player and that's actually a string
method showing this, so the name is Tim.
336

336

00:16:55.850  -->  00:16:59.330
He points 10 at streak 15 and
weapon's a sword.
337

337

00:16:59.330  -->  00:17:01.550
And you can see there's saving Tim.
338

338

00:17:01.550  -->  00:17:05.710
So it's going through each entry basically
from our write method and saving them.
339

339

00:17:05.710  -->  00:17:06.490
So that's still working okay.
340

340

00:17:06.490  -->  00:17:09.130
Next, we actually change the hit points.
341

341

00:17:09.130  -->  00:17:10.330
The hit points to 8.
342

342

00:17:10.330  -->  00:17:11.650
And you can see that had been changed.
343

343

00:17:11.650  -->  00:17:16.860
Then we saved 10 to storage device, saved
8 to storage device, and saved 15 as well.
344

344

00:17:16.860  -->  00:17:20.280
And saved Stormbringer because
of course we set that out there.
345

345

00:17:20.280  -->  00:17:24.010
So that's got us down to, after the save,
we then use the loadObject.
346

346

00:17:24.010  -->  00:17:27.650
And of course if you remember loadObject,
that uses the readValues.
347

347

00:17:27.650  -->  00:17:28.950
We have to actually type some data in.
348

348

00:17:28.950  -->  00:17:30.790
So we could actually try entering
that data in there, so let's do that.
349

349

00:17:30.790  -->  00:17:33.550
So we go down here and
actually just type in 1.
350

350

00:17:33.550  -->  00:17:40.810
Just enter Brian, 1, 25, 1, 11.
351

351

00:17:40.810  -->  00:17:43.370
And one we'll put gun.
352

352

00:17:43.370  -->  00:17:46.490
Then 0 to quit cuz we've done now.
353

353

00:17:46.490  -->  00:17:51.560
And here we've got player name='Brian',
hitPoints=25, strength=11, weapon='Gun'.
354

354

00:17:51.560  -->  00:17:54.450
So you can see that the load values
method is working nicely and
355

355

00:17:54.450  -->  00:17:57.900
that was also the last line of
the output that was actually executed.
356

356

00:17:57.900  -->  00:18:01.000
So this video's getting quite long so
I'm gonna stop here now and
357

357

00:18:01.000  -->  00:18:02.870
in the next video we're gonna
continue the challenge.
358

358

00:18:02.870  -->  00:18:06.030
We're going to implement a monster
class that works the same way and
359

359

00:18:06.030  -->  00:18:09.100
implements the same ISaveable
interface and goes through that.
360

360

00:18:09.100  -->  00:18:10.640
So, I'll see you in the next video.
