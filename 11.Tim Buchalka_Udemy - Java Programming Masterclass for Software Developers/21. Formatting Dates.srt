1
1

00:00:04,930  -->  00:00:11,000
so running our application again we
noticed the details is correctly being
2

2

00:00:11,000  -->  00:00:15,110
shown here on the right hand side but
the deadline is now not showing and
3

3

00:00:15,110  -->  00:00:23,190
still does not show when we click on the item so
let's go ahead and fix that and only we really
4

4

00:00:23,190  -->  00:00:27,350
need to do is go down into our method here
and within our
5

5

00:00:27,350  -->  00:00:32,170
change method we need to add the code to
show the deadline we're going to just put
6

6

00:00:32,170  -->  00:00:33,550
that in their now so its going to be...
7

7

00:00:33,550  -->  00:00:45,880
...because we want that
8

8

00:00:45,880  -->  00:00:48,030
updated on the screen obviously as well
9

9

00:00:48,030  -->  00:00:52,870
anytime the value changes once we do
that and run it we can see our due dates appeared down the
10

10

00:00:52,870  -->  00:00:57,580
bottom right hand corner of the screen
and once we click on the different items we can
11

11

00:00:57,580  -->  00:01:03,270
see the date is being updated as well
so that's good that's fixed now and of course
12

12

00:01:03,270  -->  00:01:07,350
we had to call the toString method again
because the deadline is of type local date
13

13

00:01:07,350  -->  00:01:12,040
be nice if we could display the date in
a slightly better format because the way
14

14

00:01:12,040  -->  00:01:15,890
it is now it a bit cryptic you
probably saw on the screen it wasn't
15

15

00:01:15,890  -->  00:01:19,510
really formatted nice and when we
run the application particularly if the
16

16

00:01:19,510  -->  00:01:24,610
day in the month was set for example to 4 or 3 it will be hard to know for sure it will be
17

17

00:01:24,610  -->  00:01:28,860
talking about the month or the day
or which part of the date is appropriate to
18

18

00:01:28,860  -->  00:01:32,590
the date of the month so in other words
so lets have a look at formatting the dates
19

19

00:01:32,590  -->  00:01:37,900
so its easier to read so I'm gonna come
up here in to the changed method and we are going
20

20

00:01:37,900  -->  00:01:40,900
to introduce the concept of a date
formatter
21

21

00:01:42,250  -->  00:01:47,050
to be precise a date time formatter so....
22

22

00:01:47,660  -->  00:01:56,620
....and we are going to talk about the the pattern shortly
23

23

00:01:56,620  -->  00:02:01,280
so lets just type it exactly as you see
here noting it has to be in the same
24

24

00:02:01,280  -->  00:02:05,510
case as I'm typing so that's the pattern
that we want the date to be displayed
25

25

00:02:05,510  -->  00:02:10,980
in then we need to do is make sure that
their deadline label talks to this def
26

26

00:02:10,980  -->  00:02:17,160
project we created and then formats it
correctly so we can do that by typing....
27

27

00:02:17,160  -->  00:02:21,970
and that needs a date as opposed to
a string so we need to remove the
28

28

00:02:21,970  -->  00:02:24,970
.toString on the end
29

29

00:02:26,050  -->  00:02:30,240
so now we've done that we should see our diet
showing correctly or showing in a
30

30

00:02:30,240  -->  00:02:34,630
different format than it did before and
you can see its now showing April 25,
31

31

00:02:34,630  -->  00:02:39,490
2016 which is a lot nicer and then
change automatically based on the date
32

32

00:02:39,490  -->  00:02:49,580
that we have selected so closing that down now if we open a browser and
paste this link I got and you can see
33

33

00:02:49,580  -->  00:02:52,890
link showing in the top left corner
we've got more information about the
34

34

00:02:52,890  -->  00:02:56,240
various values you can put
into a date time formater and
35

35

00:02:56,240  -->  00:03:00,530
scrolling down lots of different parameters and its giving some good examples you can use
36

36

00:03:00,530  -->  00:03:05,110
some of these sort of hard coded formatters but looking down a little bit
37

37

00:03:05,110  -->  00:03:09,450
further you can see its got a lot of other
examples here as well it shows you all the
38

38

00:03:09,450  -->  00:03:16,830
times of days the hour of day nano of a second week base year theirs lots of different formats and you just need to
39

39

00:03:16,830  -->  00:03:21,850
use the appropriate symbol in the
appropriate field or pattern to get it showing
40

40

00:03:21,850  -->  00:03:25,970
in that format so for example if I wanted
to change so its shows the day
41

41

00:03:25,970  -->  00:03:36,720
of month I've put a d in their so lets go back and do that so put a d....what I'll do is comment that out so we can put that back if we need to but here we put....
42

42

00:03:36,720  -->  00:03:41,520
...so that is one to how many days we are on a particular month we are in so month of year
43

43

00:03:41,520  -->  00:03:49,060
would be an m and putting a space between the
two and y would be a year or era
44

44

00:03:49,060  -->  00:03:53,320
and gives you examples on the
right hand side as to what to expect
45

45

00:03:53,320  -->  00:04:00,600
the out put to be in so we could just put year
and if I specify just two y as this time
46

46

00:04:00,600  -->  00:04:08,440
we should see that it will only show us the
value in two years like 04 for 2004
47

47

00:04:08,440  -->  00:04:19,780
so lets try running that and we got another
example 25 4 16 which isn't as readable as the last example
48

48

00:04:19,780  -->  00:04:23,140
but the point is its actually working in
that format
49

49

00:04:23,140  -->  00:04:26,650
so you can experiment and changed and
try different date styles if you like
50

50

00:04:26,650  -->  00:04:32,280
but what I'll do is just put this one back in because I think the first one we got was a lot more readable so put
51

51

00:04:32,280  -->  00:04:49,600
that in as.....so if we run it again you can see the dates is back to a nice format again and just
52

52

00:04:49,600  -->  00:04:53,100
a note also that the spaces are
important because obviously if we don't put
53

53

00:04:53,100  -->  00:04:54,410
spaces in there
54

54

00:04:54,410  -->  00:04:57,410
everything would be jumbled up together and be harder to read
55

55

00:05:00,100  -->  00:05:04,760
still readable but not as readable as it was before so hence the use of space as well just to
56

56

00:05:04,760  -->  00:05:12,120
space things out ok so at this
point the basic UI is working it's not
57

57

00:05:12,120  -->  00:05:13,000
pretty
58

58

00:05:13,000  -->  00:05:17,560
we certainly won't release a product
with this UI but it is functional so
59

59

00:05:17,560  -->  00:05:22,300
let's take a second to think about what
a user would want to do in addition to viewing
60

60

00:05:22,300  -->  00:05:23,940
the to do list
61

61

00:05:23,940  -->  00:05:29,060
obviously they want to add items to the list and of
course we hard coded a few items because
62

62

00:05:29,060  -->  00:05:33,530
we needed data to test the UI but if a user were to install this application their
63

63

00:05:33,530  -->  00:05:37,310
wouldn't be any to-do items and also
when they add to do items and then
64

64

00:05:37,310  -->  00:05:41,690
close the application then they expect the to
do items to be there next time they ran
65

65

00:05:41,690  -->  00:05:46,770
the application so lets quickly add
some code that will load and store to do items
66

66

00:05:46,770  -->  00:05:50,660
in a flat file will start with storing the
items and then we will run our
67

67

00:05:50,660  -->  00:05:56,280
application so that it will save the hard coded items and you recall that the application
68

68

00:05:56,280  -->  00:06:01,400
class which our main class extends has a
stop method that we can override and
69

69

00:06:01,400  -->  00:06:06,620
this will be a logical place to store our data
however the controller will need the data
70

70

00:06:06,620  -->  00:06:10,750
to populate the list view and it already
has ready access to the list views
71

71

00:06:10,750  -->  00:06:15,240
contents when we want to store them so
for experience sake and because we doing
72

72

00:06:15,240  -->  00:06:19,270
this quick and dirty way so that we can
get back UI coding what we'll do is we'll
73

73

00:06:19,270  -->  00:06:23,840
add a singleton class that both our main
class and the controller can access
74

74

00:06:23,840  -->  00:06:29,440
in a nut shell will use a singleton that
we want there to be only one instance of
75

75

00:06:29,440  -->  00:06:32,660
a class created over the entire run of
the application
76

76

00:06:33,500  -->  00:06:37,980
because of this the singleton class
creates the one instance of itself and
77

77

00:06:37,980  -->  00:06:42,410
we have talked about singleton's
previously in the course it has a private
78

78

00:06:42,410  -->  00:06:46,250
constructed to ensure that no other
class will have a private constructor to
79

79

00:06:46,250  -->  00:06:50,600
ensure that no other class can create an
instance there's more toward than that
80

80

00:06:50,600  -->  00:06:53,940
but the important thing for us is that the
singleton usually contains a static
81

81

00:06:53,940  -->  00:06:57,890
method that allows any class to get the
single instance and call its methods
82

82

00:06:57,890  -->  00:07:02,020
so lets look at writing that singleton class in
the next video
