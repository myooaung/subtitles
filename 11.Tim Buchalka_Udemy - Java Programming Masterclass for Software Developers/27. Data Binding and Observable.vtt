WEBVTT
1
1

00:00:05.500  -->  00:00:09.140
so as I alluded to in the previous video we are going to change the way
2

2

00:00:09.140  -->  00:00:12.970
that we populate the list view and that's
because the way we've been doing it
3

3

00:00:12.970  -->  00:00:19.080
so far isn't really recommended now the way we've done it so far does work but
4

4

00:00:19.080  -->  00:00:23.410
it's not the way we want to do it in a real world application when we add to do
5

5

00:00:23.410  -->  00:00:24.020
items
6

6

00:00:24.020  -->  00:00:28.010
what we are doing is we are explicitly updating the
list view by repopulating it again
7

7

00:00:28.010  -->  00:00:32.860
now not only is that inefficient but in
a more complex application that has got
8

8

00:00:32.860  -->  00:00:36.780
many different ways for the user to
change what our controller is displaying it
9

9

00:00:36.780  -->  00:00:40.420
would be a really easy for the controller to get out of sync with the data so
10

10

00:00:40.420  -->  00:00:45.000
we don't want that to happen so instead of
explicitly trying to manage what the
11

11

00:00:45.000  -->  00:00:50.200
list view is displaying we're going to use
what's called data binding now when we
12

12

00:00:50.200  -->  00:00:55.090
bind a controlled data the controller is gonna notice when the data changes
13

13

00:00:55.090  -->  00:00:59.530
without us having to write any code so the control will seemingly update
14

14

00:00:59.530  -->  00:01:03.530
itself and it does this because the
JavaFX developers have written all the
15

15

00:01:03.530  -->  00:01:08.520
code to handle these changes npw the way
it works is pretty similar to how event
16

16

00:01:08.520  -->  00:01:11.820
handing works when the controller is
populated with what's called an
17

17

00:01:11.820  -->  00:01:16.540
Observable Collection it is going to react to events raised by that collection by running a
18

18

00:01:16.540  -->  00:01:20.980
handler so when items are added or deleted
from that collection the control will then
19

19

00:01:20.980  -->  00:01:26.610
change what is displaying on screen so lets
change our code now to use data binding
20

20

00:01:27.150  -->  00:01:33.470
so we are gonna start in the to do data class let's go
back to that at the moment with out to do items
21

21

00:01:33.470  -->  00:01:38.300
you can see here on line 23 we've got
private list to do items and
22

22

00:01:38.300  -->  00:01:43.040
we are gonna change that to an observable list and
that's gonna help this data binding to work so
23

23

00:01:43.040  -->  00:01:51.910
lets go ahead and change list to
observable list so....
24

24

00:01:51.910  -->  00:01:58.610
you notice the imports are updated and when we do that we want to update our getter as well now at the moment its going to return a list on line 35
25

25

00:01:58.610  -->  00:02:02.220
but will change our getter to now return the observable list so that is why I'm pasting in the
26

26

00:02:02.220  -->  00:02:08.720
new class name so that's a change is
made there and then in our main windows controller what we
27

27

00:02:08.720  -->  00:02:12.520
gonna do is populate the list view by calling the set items method rather
28

28

00:02:12.520  -->  00:02:13.570
than calling
29

29

00:02:13.570  -->  00:02:19.940
get item.set all I'll show you what I mean their so go back to controller and up here
30

30

00:02:19.940  -->  00:02:26.330
currently you can see here on line 47 we are using
to-do list view.getItems.setall
31

31

00:02:26.330  -->  00:02:31.990
so instead of doing that change that to
something that's a lot easier it will be just
32

32

00:02:31.990  -->  00:02:41.540
....
33

33

00:02:41.540  -->  00:02:48.730
..so those steps are all we
really need to do to bind the list view
34

34

00:02:48.730  -->  00:02:52.690
to the observable list in the to do data class so now we've done that we
35

35

00:02:52.690  -->  00:02:56.670
can remove the code that explicitly
populates the ListView when the user adds
36

36

00:02:56.670  -->  00:03:02.700
a new to do item so lets do that and down here with the ok we no longer need that code anymore so we got
37

37

00:03:02.700  -->  00:03:07.720
the dialogue controller their we can get rid of this set all now because it's been handled automatically
38

38

00:03:07.720  -->  00:03:12.890
by the data binding and we still need to
process results and we still need the
39

39

00:03:12.890  -->  00:03:17.750
select we still need it to select the right item after
its been updated but however we don't
40

40

00:03:17.750  -->  00:03:25.550
really need to do anything else so we get rid of these prints there as well we probably don't need those anymore so lets get rid of those as well
41

41

00:03:25.550  -->  00:03:31.290
so we got our dialogue controller to do item figuring out what the new to
42

42

00:03:31.290  -->  00:03:32.460
do item is
43

43

00:03:32.460  -->  00:03:36.860
here on line 75 processing the results and then we just setting the item we
44

44

00:03:36.860  -->  00:03:40.590
are selecting the new item that
was just added everything else is now
45

45

00:03:40.590  -->  00:03:43.590
handled and updated automatically
by the data binding
46

46

00:03:44.270  -->  00:03:49.070
so we have taken out the code now to explicitly
repopulate the list view manually
47

47

00:03:49.070  -->  00:03:55.200
so if we run this now go ahead and add a new
item
48

48

00:03:55.790  -->  00:04:06.370
....
49

49

00:04:06.870  -->  00:04:12.960
...you notice that the item was added
automatically even though we haven't
50

50

00:04:12.960  -->  00:04:18.660
explicitly added the code or we are not using code to
repopulate the list view anymore and
51

51

00:04:18.660  -->  00:04:24.530
again just closing that down after the
dialogue going back here has taken care of
52

52

00:04:24.530  -->  00:04:28.440
adding the new item to the observable list
that is back in the list view we simply go ahead
53

53

00:04:28.440  -->  00:04:32.700
and select the new item which we do on line
76 so before we move on
54

54

00:04:32.700  -->  00:04:37.360
will recall that we're loading our items
from a file we just go back to
55

55

00:04:37.360  -->  00:04:39.490
the to do data class
56

56

00:04:39.490  -->  00:04:44.600
so if we scroll down and have a look and see here
when we are loading the items the code on
57

57

00:04:44.600  -->  00:04:49.090
line 44 its using fx collections.observableArrayList you probably saw
58

58

00:04:49.090  -->  00:04:53.310
that previously videos when created and you might be wondering you
59

59

00:04:53.310  -->  00:04:59.050
know why we using it and in fact why
we are using an observables list from the JavaFX API
60

60

00:04:59.050  -->  00:05:03.290
rather than using a general list from
the java.utils.collections package
61

61

00:05:03.290  -->  00:05:10.060
well we are doing it for performance reasons
as we have learn observable lists will raise events and
62

62

00:05:10.060  -->  00:05:14.980
because methods within the list classes
may call it each other when a list changed it's
63

63

00:05:14.980  -->  00:05:19.310
the possible for more than 1 event to be
raised for a single change for
64

64

00:05:19.310  -->  00:05:26.760
example if method a b&c all raise events and
when an item is added a method a calls b which calls c then 3
65

65

00:05:26.760  -->  00:05:31.190
events will be raised whenever an items added and UI operations can be
66

66

00:05:31.190  -->  00:05:36.350
expensive and that's because the UI control has two paint the screen or part
67

67

00:05:36.350  -->  00:05:40.730
of itself on the screen on the display
so we don't want to control like a list view
68

68

00:05:40.730  -->  00:05:43.960
to run its handler multiple times
when an item is added or deleted
69

69

00:05:43.960  -->  00:05:50.960
ideally what we want is to only runs its handler once now the FX collections package
70

70

00:05:50.960  -->  00:05:55.250
contains a copy of all the classes and
static methods in a java.utils.collections
71

71

00:05:55.250  -->  00:05:59.150
package but the code has
been optimized to reduce a number of
72

72

00:05:59.150  -->  00:06:03.220
events or notifications raised when the
collections changed
73

73

00:06:03.220  -->  00:06:08.760
now as it says in the FXML collections
documentation which I will bring up shortly
74

74

00:06:08.760  -->  00:06:13.220
all methods are optimized in a way that only yield a limited numbers of
75

75

00:06:13.220  -->  00:06:17.440
notifications on the other hand java.utils.collections might call
76

76

00:06:17.440  -->  00:06:21.890
modification methods or an observable
listed multiple times resulting in a
77

77

00:06:21.890  -->  00:06:26.430
number of notifications and I'll bring up that documentation on the screen
78

78

00:06:26.430  -->  00:06:33.340
I suggest you checked that out on your leisure you can read
more about this.....
79

79

00:06:33.340  -->  00:06:40.440
again you can see here the utility methods here are mainly for
performance reasons and their optimize in a
80

80

00:06:40.440  -->  00:06:45.880
way that only yield or that they yield
limited number of notifications so the
81

81

00:06:45.880  -->  00:06:50.650
bottom line with all this going back to
our code is that we really always want to
82

82

00:06:50.650  -->  00:06:54.500
use the fx collections versions not
the version in java.utils.collections
83

83

00:06:54.500  -->  00:06:58.980
and that's why we've used
this observable array list on line 44 to
84

84

00:06:58.980  -->  00:07:03.220
do that so lets add a to do item that has got
85

85

00:07:03.220  -->  00:07:07.750
some lengthy details to make sure that we are able to access all the details on the
86

86

00:07:07.750  -->  00:07:15.510
right hand side so run the application again and add a new item and will call this
87

87

00:07:15.510  -->  00:07:24.930
one.....and for the text what
we're going to do is generate 3,000 words
88

88

00:07:24.930  -->  00:07:29.970
so we can just sort of copy and paste
that and theirs a website where you can go to
89

89

00:07:29.970  -->  00:07:39.000
get to save you having to find that so paste that link in as always links are in the Resources section go their now and
90

90

00:07:39.000  -->  00:07:44.290
that would generate some dummy text for us make
sure that the paragraphs are set to one
91

91

00:07:44.290  -->  00:07:48.410
that's because our quick and dirty way of
storing and loading items just assumes
92

92

00:07:48.410  -->  00:07:52.130
all the data for an item are on the
same line so make sure that is selected
93

93

00:07:52.130  -->  00:07:56.930
as one and changes these 200 to 3000 words which is a
94

94

00:07:56.930  -->  00:08:03.500
lot longer and select all copy to
clipboard and go back to our application
95

95

00:08:07.590  -->  00:08:16.770
and this doesn't always work for if I try that again you will find it doesn't always work so if it doesn't
96

96

00:08:16.770  -->  00:08:19.570
work for you depending on your browser
and operating system just right click it
97

97

00:08:19.570  -->  00:08:25.230
and select Copy after having selected or click select all and that will select
98

98

00:08:25.230  -->  00:08:31.420
all the data or all the words and from their we can paste it in their like so and we got a pile of content
99

99

00:08:31.420  -->  00:08:39.440
that's actually spanning left to right
their its quite a lot of words and I'm holding the right arrow
100

100

00:08:39.440  -->  00:08:44.070
can see that its slowly going over their so we got 3000 words in other words we are actually in their
101

101

00:08:44.070  -->  00:08:58.550
and just to make sure just make sure our vertical scroll bar is working you can see our horizontal line is working their....
102

102

00:08:58.550  -->  00:09:02.460
and depending on your operating system you
might find you didn't need to copy the way I have
103

103

00:09:02.460  -->  00:09:07.090
but I'll just do it this way you can see we got our vertical
scroll bar working as well that one
104

104

00:09:07.090  -->  00:09:10.970
is working and the horizontal ones
working as well so that's good but obviously
105

105

00:09:10.970  -->  00:09:15.880
in this example the text doesn't wrap and
that is a problem so I'm gonna cancel out of
106

106

00:09:15.880  -->  00:09:19.450
that let's just change the text areas
property to true in the fxml so
107

107

00:09:19.450  -->  00:09:24.010
we can see what that looks like so go to do item dialogue
108

108

00:09:24.010  -->  00:09:31.680
change the text area and add a wrap text equals true so come down here and go
109

109

00:09:31.680  -->  00:09:36.150
to the next line and put...
110

110

00:09:36.150  -->  00:09:46.120
...and if we run this again and before I do that let's also change the text area for
111

111

00:09:46.120  -->  00:09:51.010
our main window as well this is the part here because at the moment we only changed it so that it
112

112

00:09:51.010  -->  00:09:54.740
would actually wrap in the dialogue itself but lets change it so it will
113

113

00:09:54.740  -->  00:10:00.560
wrap in here as well to do that we are going to open our other fxml file our main window fxml go to the text area
114

114

00:10:00.560  -->  00:10:06.800
for that and do the same for that as well where going to add....
115

115

00:10:07.480  -->  00:10:10.480
and lets go back and run the application
again
116

116

00:10:11.930  -->  00:10:25.520
create new entry and call it....and you can see we got the wrapping working
117

117

00:10:25.520  -->  00:10:31.350
and there's all our next their
that's working well and I'm just gonna type in
118

118

00:10:31.350  -->  00:10:36.830
extra stuff in there if I wanted and its working nicely so we know as we saw in the previous change before
119

119

00:10:36.830  -->  00:10:42.340
we add the wrap text capability
that the horizontal scroll bars working we can now
120

120

00:10:42.340  -->  00:10:45.810
see that obviously the vertical ones is working nicely as well let's set the
121

121

00:10:45.810  -->  00:10:47.360
deadline to today's date
122

122

00:10:47.360  -->  00:10:54.370
whatever the date is that you're watching this in my case its the 17th of may and you can see now in
123

123

00:10:54.370  -->  00:10:57.780
also in the main window it's also
wrapping and we can scroll up and down
124

124

00:10:57.780  -->  00:11:03.550
and quite happily
saved that information showing up correctly so
125

125

00:11:03.550  -->  00:11:06.430
we are gonna stopped the video here in the next
one we're going to make some further
126

126

00:11:06.430  -->  00:11:10.710
improvements to the it what we gonna do
is we are gonna highlight items in the list that have
127

127

00:11:10.710  -->  00:11:15.440
a deadline of set to today and that
so the user doesn't have to click
128

128

00:11:15.440  -->  00:11:18.970
on it each item to figure out which we need to prioritize so we'll work on that
129

129

00:11:18.970  -->  00:11:19.700
in the next video
