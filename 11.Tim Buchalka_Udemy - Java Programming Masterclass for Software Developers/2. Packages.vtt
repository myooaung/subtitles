WEBVTT
0
1
00:00:05.520 --> 00:00:08.420
So in the previous video,
we actually discussed some conventions for
1

2
00:00:08.420 --> 00:00:10.160
naming packages.
2

3
00:00:10.160 --> 00:00:13.140
But we haven't actually looked
at what a package is yet.
3

4
00:00:13.140 --> 00:00:16.600
If you think back to the abstraction
challenge, which is now a few videos ago,
4

5
00:00:16.600 --> 00:00:20.440
I actually suggested that you
didn't call your link list class,
5

6
00:00:20.440 --> 00:00:23.240
the one that you are creating,
your own link list class.
6

7
00:00:23.240 --> 00:00:26.170
I suggest you didn't call that
link list because that is
7

8
00:00:26.170 --> 00:00:28.990
the name of the link in this class
that actually comes with Java.
8

9
00:00:28.990 --> 00:00:31.760
But with that said,
that was only a suggestion
9

10
00:00:31.760 --> 00:00:34.230
because it may have actually
caused a little bit of confusion.
10

11
00:00:34.230 --> 00:00:37.670
So there isn't actually a reason why you
couldn't have used the name link list,
11

12
00:00:37.670 --> 00:00:39.910
even though Java's already used that.
12

13
00:00:39.910 --> 00:00:43.500
So I'm just gonna open up a slideshow and
just talk briefly about a few things.
13

14
00:00:47.220 --> 00:00:49.500
So firstly, talking about packages.
14

15
00:00:49.500 --> 00:00:54.080
Things to keep in mind that there's over
9 million Java developers worldwide.
15

16
00:00:54.080 --> 00:00:58.310
So classes or interface name conflicts are
going to be inevitable because the thing
16

17
00:00:58.310 --> 00:01:03.340
to remember is that people are going to
use common words, so it's highly likely.
17

18
00:01:03.340 --> 00:01:04.920
That you're going to find these conflicts.
18

19
00:01:04.920 --> 00:01:08.320
So as a result of this,
Java were pretty well forward thinking.
19

20
00:01:08.320 --> 00:01:11.240
And there was a mechanism that
was actually needed to fully
20

21
00:01:11.240 --> 00:01:13.260
specified the class.
21

22
00:01:13.260 --> 00:01:18.220
And as a result, to allow use of classes
with the same name in the same project, or
22

23
00:01:18.220 --> 00:01:20.330
even the same class itself.
23

24
00:01:20.330 --> 00:01:22.740
So let's get back to code and
talk about that a bit more.
24

25
00:01:24.010 --> 00:01:26.990
So what we're gonna do is just type a bit
of code here just to show how these
25

26
00:01:26.990 --> 00:01:28.040
packages actually work.
26

27
00:01:29.070 --> 00:01:33.480
To start with I'm gonna actually
type Node node = null, like so.
27

28
00:01:35.780 --> 00:01:39.290
And as you've seen it before in
the course Java's gonna come up and say,
28

29
00:01:39.290 --> 00:01:40.820
I've got some options for you.
29

30
00:01:40.820 --> 00:01:42.280
So if we select that, And
30

31
00:01:42.280 --> 00:01:44.580
look at all these different
options that actually come up.
31

32
00:01:44.580 --> 00:01:48.640
There's actually nine there, so there's
actually a ton of different options
32

33
00:01:48.640 --> 00:01:52.970
that Java is actually recommending
with the word null in it.
33

34
00:01:52.970 --> 00:01:55.160
So because this lecture
is all about packages,
34

35
00:01:55.160 --> 00:01:57.910
you've probably guessed by now that
the mechanism I'm talking about
35

36
00:01:57.910 --> 00:02:01.850
To make sure that people can reuse
nodes is actually called packages.
36

37
00:02:01.850 --> 00:02:06.610
So a package, think the package is
a way of grouping related classes and
37

38
00:02:06.610 --> 00:02:07.930
interfaces together.
38

39
00:02:07.930 --> 00:02:11.980
So the actual package mechanism
provides a way to manage the name space
39

40
00:02:11.980 --> 00:02:15.420
of object types and
it also extends access protection.
40

41
00:02:15.420 --> 00:02:17.580
Beyond the traditional access,
modifies you see,
41

42
00:02:17.580 --> 00:02:21.220
before and public,
protected, private, etc.
42

43
00:02:21.220 --> 00:02:25.560
So we'll actually be talking about access
in the next lecture, not here right now.
43

44
00:02:25.560 --> 00:02:27.250
So I've actually seen this come up before.
44

45
00:02:27.250 --> 00:02:30.790
When this does pop up on the screen,
The normal response has been to import
45

46
00:02:30.790 --> 00:02:34.520
the appropriate package, so we go down and
actually select the appropriate package.
46

47
00:02:34.520 --> 00:02:36.050
And obviously at the moment
we've got an error.
47

48
00:02:36.050 --> 00:02:39.660
So if we go down here and
actually choose, say, Java X.c.node,
48

49
00:02:39.660 --> 00:02:43.170
which is one of the nodes that
obviously gets rid of the message.
49

50
00:02:43.170 --> 00:02:44.050
And then automatically,
50

51
00:02:44.050 --> 00:02:48.400
as you can see here on line 3, The import
line got added to the start of the line.
51

52
00:02:48.400 --> 00:02:49.880
Now that's just one option.
52

53
00:02:49.880 --> 00:02:50.790
That's one way of doing it.
53

54
00:02:50.790 --> 00:02:54.150
There's actually another option that you
can use instead of using these imports.
54

55
00:02:54.150 --> 00:02:56.430
So we could actually delete that again,
delete that out.
55

56
00:02:56.430 --> 00:02:59.080
And obviously that brings
up the same error again.
56

57
00:02:59.080 --> 00:03:02.550
And instead of actually importing, we
could come up here to the start of Node,
57

58
00:03:02.550 --> 00:03:07.580
and we can actually type in javafx.scene.
58

59
00:03:07.580 --> 00:03:09.270
.Node.
59

60
00:03:09.270 --> 00:03:13.160
And you can see at that point,
that Java's now happening and
60

61
00:03:13.160 --> 00:03:17.370
intelligent's happy because we've
actually specified the actual package
61

62
00:03:17.370 --> 00:03:20.410
that contains the node class that
we wanna actually work with.
62

63
00:03:20.410 --> 00:03:24.370
Now the important difference here is,
unlike the first situation just a minute
63

64
00:03:24.370 --> 00:03:27.890
ago When we saw the Import to
Stack come up on line three.
64

65
00:03:27.890 --> 00:03:30.090
In this case, the package is not imported.
65

66
00:03:30.090 --> 00:03:32.620
So what that means is every time
you wanna reference this node,
66

67
00:03:32.620 --> 00:03:34.260
you actually have to type it out.
67

68
00:03:34.260 --> 00:03:37.300
So you can see how that would
really get tiresome really quickly,
68

69
00:03:37.300 --> 00:03:41.250
having to type javaeffects.send.node,
and doing that for
69

70
00:03:41.250 --> 00:03:44.220
all your classes as you're
actually using them.
70

71
00:03:44.220 --> 00:03:47.340
Now, if you're actually using two
different node types in the same class,
71

72
00:03:47.340 --> 00:03:49.830
then you actually have to
refer to one of them that way.
72

73
00:03:49.830 --> 00:03:52.790
So if we try to import the same
class in two different packages,
73

74
00:03:52.790 --> 00:03:54.830
Java's gonna give us an error
when we try to compile.
74

75
00:03:54.830 --> 00:03:58.140
So, if we actually wanna put our imports
and we decide to actually use the imports,
75

76
00:03:58.140 --> 00:04:02.340
we do something like import
javafx.scene.Node, the first one.
76

77
00:04:03.450 --> 00:04:09.710
And we try to import a second one,
org.w3c.dom.Node.
77

78
00:04:09.710 --> 00:04:12.980
Notice the error there already, and
78

79
00:04:12.980 --> 00:04:18.980
then even if we actually come along and
put org.w3c.dom.Node,
79

80
00:04:18.980 --> 00:04:24.860
another Node,
We've already got an error here and
80

81
00:04:24.860 --> 00:04:29.230
it says javafx.scene.Node is already
defined in a single-type import.
81

82
00:04:29.230 --> 00:04:31.240
So, we've actually already
used Node essentially,
82

83
00:04:31.240 --> 00:04:34.670
so IntelliJ in Java is not gonna allow
us to do that and get away with it.
83

84
00:04:34.670 --> 00:04:38.680
Even if we're qualifying our classes
with the full what is our package for
84

85
00:04:38.680 --> 00:04:39.500
that class.
85

86
00:04:39.500 --> 00:04:42.470
So what we could do then is
therefore with the first statement,
86

87
00:04:42.470 --> 00:04:44.570
we could get rid of that package.
87

88
00:04:44.570 --> 00:04:45.920
And just use the normal reference.
88

89
00:04:45.920 --> 00:04:47.040
So if I come along here and
89

90
00:04:47.040 --> 00:04:49.820
leave that as mode now and
I temporarily comment this out.
90

91
00:04:49.820 --> 00:04:51.850
And we'll get rid of that second one.
91

92
00:04:52.890 --> 00:04:55.030
I just wanna show you
another by of doing things.
92

93
00:04:55.030 --> 00:04:57.130
So with that method,
we can then come along here and
93

94
00:04:57.130 --> 00:04:59.750
we can un-comment that, and
that's going to work fine at that point.
94

95
00:04:59.750 --> 00:05:04.090
So one of them is using the import,
and the second one is using the fully
95

96
00:05:04.090 --> 00:05:08.390
qualified name pointing to the actual
packages that actually got node.
96

97
00:05:08.390 --> 00:05:10.750
But noting again that we can't
help you have two imports, so
97

98
00:05:10.750 --> 00:05:13.740
if you put the import up here.
98

99
00:05:13.740 --> 00:05:19.580
all.w3c.dom.node, We're gonna get an error
on the second line and then Intellius
99

100
00:05:19.580 --> 00:05:23.360
starts trying to help us cuz it's a little
bit unsure as to which import to use.
100

101
00:05:23.360 --> 00:05:25.400
So we're gonna delete that like.
101

102
00:05:25.400 --> 00:05:29.850
So in summary, the javafx.scene.Node
can be Be referred to as node,
102

103
00:05:29.850 --> 00:05:32.890
as you can say in the code on line ten.
103

104
00:05:32.890 --> 00:05:34.110
But the second one,
104

105
00:05:34.110 --> 00:05:36.820
the org.w3c.dom.node has to be
fully qualified whenever it's used.
105

106
00:05:36.820 --> 00:05:40.880
And you're actually free, obviously,
to actually use the full name for
106

107
00:05:40.880 --> 00:05:41.940
both of them.
107

108
00:05:41.940 --> 00:05:44.620
And that can actually make it
clearer as to which one you mean.
108

109
00:05:44.620 --> 00:05:47.990
So in other words, you can actually
come up here and paste that into there.
109

110
00:05:49.280 --> 00:05:50.050
Oops, there.
110

111
00:05:50.050 --> 00:05:51.540
And use both and
111

112
00:05:51.540 --> 00:05:55.130
obviously you can see intelligence
actually got rid of the imports.
112

113
00:05:55.130 --> 00:05:58.280
Now, in terms of those imports,
just to be clear, some of that's happening
113

114
00:05:58.280 --> 00:06:01.630
automatically because of the way So
I've actually configured the editor.
114

115
00:06:01.630 --> 00:06:04.750
So I want to go into IntelliJ and
go into preferences.
115

116
00:06:06.810 --> 00:06:10.230
Now if we go to editor, and there's
a couple of ways of doing this actually.
116

117
00:06:10.230 --> 00:06:13.190
What you can actually do, I'm not sure if
I've actually mentioned this to you before
117

118
00:06:13.190 --> 00:06:14.640
but you can click on a particular section.
118

119
00:06:14.640 --> 00:06:16.540
And you can do a search.
119

120
00:06:16.540 --> 00:06:17.740
And it will actually give you a shortcut.
120

121
00:06:17.740 --> 00:06:21.210
So I can type in import cuz that's
the thing that I wanted look at And
121

122
00:06:21.210 --> 00:06:22.570
it will actually point out where that is.
122

123
00:06:22.570 --> 00:06:25.660
So this case it was under general,
editor general auto import, so
123

124
00:06:25.660 --> 00:06:26.710
that's actually the one I wanted.
124

125
00:06:26.710 --> 00:06:29.940
So if I go there just to show you
the options I'm talking about,
125

126
00:06:29.940 --> 00:06:33.910
you can see that we've got
some options for our imports.
126

127
00:06:33.910 --> 00:06:35.910
We got the Show Import pop-up,
127

128
00:06:35.910 --> 00:06:39.950
Optimize Imports on the Fly,
Add Unambiguous Imports on the Fly.
128

129
00:06:39.950 --> 00:06:43.210
We can actually exclude from import and
completion if for
129

130
00:06:43.210 --> 00:06:45.010
some reason we didn't want that to happen.
130

131
00:06:45.010 --> 00:06:48.470
But the one I actually want to talk about
is optimize imports on the fly, cuz that's
131

132
00:06:48.470 --> 00:06:53.440
the one that's actually adding and
then deleting imports as our code changes.
132

133
00:06:53.440 --> 00:06:55.520
I actually like to have that option on.
133

134
00:06:55.520 --> 00:06:58.220
The reason for
that is that It just cleans up your code.
134

135
00:06:58.220 --> 00:07:02.400
If you're not longer using an import, the
intelliJ's automatically deleting those
135

136
00:07:02.400 --> 00:07:04.470
and it just makes your
code a little bit cleaner.
136

137
00:07:04.470 --> 00:07:06.720
So I would suggest that
you have the options for
137

138
00:07:06.720 --> 00:07:10.040
import intelliJ set that I've got on here.
138

139
00:07:10.040 --> 00:07:13.910
And there are also other languages,
you've got similar options there
139

140
00:07:13.910 --> 00:07:16.620
to actually set for different languages
depending on what you set up, but
140

141
00:07:16.620 --> 00:07:18.710
planes are actually got to intelliJ.
141

142
00:07:18.710 --> 00:07:22.440
So I'm gonna leave that option there
then the any other one here was ask.
142

143
00:07:22.440 --> 00:07:25.290
If you're pasting in a block of code,
IntelliJ will come up and
143

144
00:07:25.290 --> 00:07:26.640
ask you which imports.
144

145
00:07:26.640 --> 00:07:29.940
That can be a good idea to do as well,
so I suggest you leave that on ask.
145

146
00:07:29.940 --> 00:07:32.180
So I'm gonna cancel out of that cuz
I've already got my settings set.
146

147
00:07:32.180 --> 00:07:35.540
So basically you can see now,
if we've got more than one class.
147

148
00:07:35.540 --> 00:07:38.520
Of the same name,
it can get a little bit confusing.
148

149
00:07:38.520 --> 00:07:41.900
Well, there's more work to do to make sure
you know which one you're referring to.
149

150
00:07:41.900 --> 00:07:43.530
You either have to use one import,
150

151
00:07:43.530 --> 00:07:45.980
then refer to the second
one with the same name.
151

152
00:07:45.980 --> 00:07:49.270
Well, it's fully qualified name,
with the actual package name.
152

153
00:07:49.270 --> 00:07:51.290
Or you need to just use
all the references and
153

154
00:07:51.290 --> 00:07:53.310
actually have the fully qualified name,
whichever you wanna do.
154

155
00:07:53.310 --> 00:07:55.980
So, let's go back to our slides for
a minute.
155

156
00:07:58.940 --> 00:08:01.560
Now you might be asking now,
why would I want to use packages?
156

157
00:08:01.560 --> 00:08:04.500
Well, some of the reasons that
you actually want to use packages
157

158
00:08:04.500 --> 00:08:05.840
is that it makes it actually easier for
158

159
00:08:05.840 --> 00:08:11.290
programmers to determine that classes are
actually related to one thing or another.
159

160
00:08:11.290 --> 00:08:14.050
Another great reason is it's easy to
know where to find the classes and
160

161
00:08:14.050 --> 00:08:17.500
interfaces that can provide
the functions provided by the package.
161

162
00:08:17.500 --> 00:08:21.110
Cuz they're all sort of in the same
group if you will, the same package.
162

163
00:08:21.110 --> 00:08:24.870
And the other important thing is because
the package creates a new namespace
163

164
00:08:24.870 --> 00:08:29.020
the class and the interface name conflicts
are actually avoided as result of that.
164

165
00:08:29.020 --> 00:08:31.150
Because they're actually
in their own separate area.
165

166
00:08:31.150 --> 00:08:32.620
Which affects,
which is what that namespace is,
166

167
00:08:32.620 --> 00:08:36.170
it's sort of a different area
that all these classes and
167

168
00:08:36.170 --> 00:08:39.910
interfaces are actually sort of
put together or placed together.
168

169
00:08:39.910 --> 00:08:43.210
And importantly, classes within
the package, that they create,
169

170
00:08:43.210 --> 00:08:45.790
have unrestricted access
to one another while
170

171
00:08:45.790 --> 00:08:48.370
they still restrict classes
to outside the package.
171

172
00:08:48.370 --> 00:08:51.200
So, that's another sort of very important
reason why you'd actually want to use
172

173
00:08:51.200 --> 00:08:51.860
packages.
173

174
00:08:51.860 --> 00:08:52.960
So, let's go back to our code again.
174

175
00:08:54.160 --> 00:08:55.590
Now you may or
may not have been aware of it but
175

176
00:08:55.590 --> 00:08:58.490
we've actually been using packages
throughout this course today.
176

177
00:08:58.490 --> 00:09:00.510
One example is Java.utool.scanner.
177

178
00:09:00.510 --> 00:09:02.610
And you've seen that in many programs and
178

179
00:09:02.610 --> 00:09:06.530
that's the code that actually provides
the ability to accept user input.
179

180
00:09:06.530 --> 00:09:09.370
We've used that in quite
a few previous videos.
180

181
00:09:09.370 --> 00:09:12.770
There I've also important
java.util.ArrayList, and
181

182
00:09:12.770 --> 00:09:15.100
we use that in order to use
array lists in our programs.
182

183
00:09:15.100 --> 00:09:19.010
And of course we've used array lists and
other lists quite extensively so far.
183

184
00:09:19.010 --> 00:09:23.610
So basically, it's actually impossible to
create a Java program without using at
184

185
00:09:23.610 --> 00:09:25.210
least one package.
185

186
00:09:25.210 --> 00:09:27.160
And java.lang, for example,
186

187
00:09:27.160 --> 00:09:31.610
contains the class object that is used to
support our classes as well as Integer and
187

188
00:09:31.610 --> 00:09:34.520
Double, etc, and all the fundamental
building blocks of a Java program.
188

189
00:09:34.520 --> 00:09:39.100
So, that happens automatically when you
create even the most basic Java programs.
189

190
00:09:39.100 --> 00:09:41.820
Now, you will actually
not see an import for
190

191
00:09:41.820 --> 00:09:44.720
java.lang Because it's
automatically imported for us.
191

192
00:09:44.720 --> 00:09:45.920
You could import it.
192

193
00:09:45.920 --> 00:09:49.240
You can import, let's say for example you
want to use an integer you could come
193

194
00:09:49.240 --> 00:09:55.590
along and you can actually type
import java.lang.Integer, like so.
194

195
00:09:55.590 --> 00:09:58.950
And it's actually been removed
automatically because of those
195

196
00:09:58.950 --> 00:10:01.550
optimization settings in IntelliJ.
196

197
00:10:01.550 --> 00:10:03.290
But my point is you could do that.
197

198
00:10:03.290 --> 00:10:04.180
But they're automatically,
198

199
00:10:04.180 --> 00:10:08.960
for this base Java.link package, they're
actually automatically imported anyway.
199

200
00:10:08.960 --> 00:10:10.970
It's not something you
need to worry about.
200

201
00:10:10.970 --> 00:10:14.340
Just in case you're wondering
where will that code comes from,
201

202
00:10:14.340 --> 00:10:19.560
Any of the basic stuff like classes,
and as I said, integer double.
202

203
00:10:19.560 --> 00:10:21.330
They come from Java.ling.
203

204
00:10:21.330 --> 00:10:24.880
Now before we actually create our own
packages, which we're going to be doing,
204

205
00:10:24.880 --> 00:10:27.750
it's probably worthwhile to have a look at
some of the other ones that are included
205

206
00:10:27.750 --> 00:10:30.380
when you actually install the Java
software development kit.
206

207
00:10:30.380 --> 00:10:34.520
Okay, so what I'm going to do at this
point now is create a new project.
207

208
00:10:34.520 --> 00:10:38.160
And we're just gonna go through a bit of
a demo to solidify our understanding.
208

209
00:10:38.160 --> 00:10:40.570
So I'm going to type
in select new project,
209

210
00:10:40.570 --> 00:10:45.170
select Java, create project from template,
making sure command line app is selected.
210

211
00:10:45.170 --> 00:10:48.850
I'm gonna call this one Win Demo,
it doesn't really matter what we call it.
211

212
00:10:48.850 --> 00:10:53.990
But I'm actually gonna type this
one as com.example.awtSample.
212

213
00:10:53.990 --> 00:10:58.700
Now the com.example could
just as easily have been com.
213

214
00:10:58.700 --> 00:11:01.530
But we're just gonna use ours as example.
214

215
00:11:01.530 --> 00:11:02.370
Click on Finish.
215

216
00:11:02.370 --> 00:11:05.400
We're gonna use this window because we've
got the other project open, to close that.
216

217
00:11:05.400 --> 00:11:07.840
So I've only got this one opened.
217

218
00:11:07.840 --> 00:11:10.320
And what we're going to do then is,
we're going to leave this main class.
218

219
00:11:10.320 --> 00:11:11.920
We're gonna create a new one.
219

220
00:11:11.920 --> 00:11:14.640
So we come up here into source and
into our package.
220

221
00:11:16.470 --> 00:11:19.030
Add new Java class,
we're gonna call it My Window.
221

222
00:11:21.760 --> 00:11:24.780
And for that one, what we're going to do
is we're going to write a bit of code that
222

223
00:11:24.780 --> 00:11:26.330
actually draws something on the screen.
223

224
00:11:26.330 --> 00:11:32.360
So we'll type extends frame,
Frame is a java.awt as you can see there.
224

225
00:11:32.360 --> 00:11:34.460
And those having pull went
through straight away.
225

226
00:11:34.460 --> 00:11:39.010
And we're gonna create a constructor, and
it's going to accept a title as well.
226

227
00:11:39.010 --> 00:11:41.560
We got Frame which accepts a title and
227

228
00:11:41.560 --> 00:11:44.280
title is gonna show on
the little window that pops up.
228

229
00:11:44.280 --> 00:11:46.190
So we're going to use that constructor.
229

230
00:11:46.190 --> 00:11:49.320
And if you want, we'll get rid of this
throws HeadlessException because you don't
230

231
00:11:49.320 --> 00:11:49.860
actually need that.
231

232
00:11:49.860 --> 00:11:53.200
That's just added by
default by IntelliJ.
232

233
00:11:53.200 --> 00:11:58.000
So we're gonna set the size of the window,
set size 500, 140.
233

234
00:11:58.000 --> 00:12:00.580
We're going to add a window listener.
234

235
00:12:02.650 --> 00:12:05.500
And I'll talk about these shortly,
what they actually do, new window.
235

236
00:12:06.980 --> 00:12:09.990
Adapter and
window closing is the one we want.
236

237
00:12:09.990 --> 00:12:12.120
It's asking is which one
do we wanna override.
237

238
00:12:12.120 --> 00:12:14.660
We wanna override window closing
to do something when it closes.
238

239
00:12:14.660 --> 00:12:15.990
I'm gonna click on that.
239

240
00:12:15.990 --> 00:12:19.300
And you can see it's automatically
come up with that code for us.
240

241
00:12:19.300 --> 00:12:23.750
I'm gonna change the super.windowClosed,
and actually put System.exit.
241

242
00:12:23.750 --> 00:12:27.080
And essentially what we're
doing there is we're just
242

243
00:12:27.080 --> 00:12:29.610
saying if you click on
the close button in the window,
243

244
00:12:29.610 --> 00:12:33.680
it's actually hard override the standard
function, and actually close down the app,
244

245
00:12:33.680 --> 00:12:35.300
which believe it or
not doesn't happen by default.
245

246
00:12:35.300 --> 00:12:36.290
and just a general
246

247
00:12:36.290 --> 00:12:37.160
note here we're going to put a
247

248
00:12:37.160 --> 00:12:39.410
screenshot on the screen there now so
248

249
00:12:39.410 --> 00:12:41.890
instead of using window closed we should
249

250
00:12:41.890 --> 00:12:43.930
really be overriding window closing
250

251
00:12:43.930 --> 00:12:45.980
otherwise the application will keep
251

252
00:12:45.980 --> 00:12:48.110
running in the background now window
252

253
00:12:48.110 --> 00:12:50.300
closed well that's called when a window
253

254
00:12:50.300 --> 00:12:52.610
has been closed while window closing is
254

255
00:12:52.610 --> 00:12:54.580
called when a window is in the process
255

256
00:12:54.580 --> 00:12:57.980
of being closed now in an ideal world it
256

257
00:12:57.980 --> 00:12:59.660
would probably be better to use jframe
257

258
00:12:59.660 --> 00:13:01.490
and swing utilities dot invoke later
258

259
00:13:01.490 --> 00:13:04.220
when creating a frame but I haven't
259

260
00:13:04.220 --> 00:13:05.570
really worried about it too much here
260

261
00:13:05.570 --> 00:13:06.940
because this is really meant to be just
261

262
00:13:06.940 --> 00:13:09.230
a simple example and we're not really
262

263
00:13:09.230 --> 00:13:11.420
talking about swing at this part of the
263

264
00:13:11.420 --> 00:13:14.440
course alright so back to the code
264

265
00:13:14.440 --> 00:13:18.300
We also want to override another one,
which is paint.
265

266
00:13:18.730 --> 00:13:21.850
So this is a method that
that's actually called
266

267
00:13:21.850 --> 00:13:23.680
automatically to actually draw the screen.
267

268
00:13:23.680 --> 00:13:25.620
So I'm gonna need to leave
the super.paint in there.
268

269
00:13:25.620 --> 00:13:29.710
And this is only three lines of
code here just to show, basically,
269

270
00:13:29.710 --> 00:13:30.650
how these packages work.
270

271
00:13:30.650 --> 00:13:36.020
So, I'm gonna create a font,
sansSerif(Large
271

272
00:13:36.020 --> 00:13:41.320
= new Font Type is important there.
272

273
00:13:41.320 --> 00:13:44.550
You need to get the correct upper and
lowercase.
273

274
00:13:44.550 --> 00:13:47.230
It'd be Font.BOLD, 18, size 18.
274

275
00:13:47.230 --> 00:13:50.870
Now just to be clear,
the exercise is about packages and
275

276
00:13:50.870 --> 00:13:55.580
not about using the actual graphical
side of Java, just to be clear.
276

277
00:13:55.580 --> 00:13:57.540
But we'll continue on.
277

278
00:13:57.540 --> 00:14:03.600
sansSerifSmall = new Font,
SansSerif again,
278

279
00:14:03.600 --> 00:14:10.120
and it'll be Font.BOLD,
this time a size of 12.
279

280
00:14:10.120 --> 00:14:14.610
And we need g, which is the graphics
object that was passed to this method
280

281
00:14:14.610 --> 00:14:18.310
setFont, and we sansSerifLarge, initially.
281

282
00:14:19.360 --> 00:14:22.690
And then I'm going to g.drawString
which is a mechanism to
282

283
00:14:24.160 --> 00:14:25.910
actually draw something on the screen.
283

284
00:14:25.910 --> 00:14:30.120
And I'm going to put the complete
Java Developer course.
284

285
00:14:31.810 --> 00:14:35.280
And we're going to position it at 60, 60.
285

286
00:14:35.280 --> 00:14:36.010
Sorry.
286

287
00:14:36.010 --> 00:14:37.860
Then g.setfont.
287

288
00:14:37.860 --> 00:14:43.740
SansSerifSmall, choose up drawstring
288

289
00:14:43.740 --> 00:14:48.760
by Tim Buchella, 60, 100.
289

290
00:14:48.760 --> 00:14:52.710
You've probably guessed now
what this actual program does.
290

291
00:14:52.710 --> 00:14:54.930
Just to confirm when we
actually extended up here,
291

292
00:14:54.930 --> 00:14:56.620
when we actually extended our frame.
292

293
00:14:56.620 --> 00:15:00.190
You saw IntelliJ offer some suggestions
and I accepted the import, the top one.
293

294
00:15:00.190 --> 00:15:01.250
Java.awt.frame.
294

295
00:15:01.250 --> 00:15:05.020
Now I want you to notice that when we
actually did that did you notice how
295

296
00:15:05.020 --> 00:15:06.850
this first import that went
through was Java.awt.star.
296

297
00:15:06.850 --> 00:15:09.370
Probably should have mentioned
that a little bit early but
297

298
00:15:09.370 --> 00:15:10.890
I didn't top it like that.
298

299
00:15:10.890 --> 00:15:12.930
Whereas in these other things when
we use the Windows Adapter and
299

300
00:15:12.930 --> 00:15:15.440
the Window Event it's
actually only imported those.
300

301
00:15:15.440 --> 00:15:18.580
But with the Java.awt.star automatically.
301

302
00:15:18.580 --> 00:15:21.000
So we'll have a look at what
that means and more later.
302

303
00:15:21.000 --> 00:15:23.930
But for now, we're going to use some
of the other packages, as you can see,
303

304
00:15:23.930 --> 00:15:25.660
to create a very simple window.
304

305
00:15:25.660 --> 00:15:29.650
But we use some of the other packages,
Window adapter, Window event and
305

306
00:15:29.650 --> 00:15:31.650
it will create just a very basic window.
306

307
00:15:31.650 --> 00:15:34.740
So basically, this is just a standard
mechanism to enable us to pop up
307

308
00:15:34.740 --> 00:15:35.460
something on the screen.
308

309
00:15:35.460 --> 00:15:40.280
So now that we've created that class,
we can go back to our main method.
309

310
00:15:40.280 --> 00:15:41.210
Main class, I should say.
310

311
00:15:41.210 --> 00:15:44.190
The main method within that and
pop this up, so let's do that.
311

312
00:15:45.240 --> 00:15:52.160
We'll call it MyWindow myWindow
= new MyWindow("Complete Java").
312

313
00:15:54.330 --> 00:15:59.070
And myWindow.setVisible(true).
313

314
00:15:59.070 --> 00:16:02.090
That's action to code now to actually run
it, so we should be able to run this now.
314

315
00:16:02.090 --> 00:16:04.640
And it should actually pop up there,
a little window.
315

316
00:16:07.780 --> 00:16:10.110
And there's a little example
you can see there, very basic.
316

317
00:16:10.110 --> 00:16:11.490
But it is actually working.
317

318
00:16:11.490 --> 00:16:15.090
The actual name that I actually signed,
The Complete Java Developer Course, and
318

319
00:16:15.090 --> 00:16:16.300
obviously my name as well.
319

320
00:16:16.300 --> 00:16:17.060
So what's the point of all this?
320

321
00:16:17.060 --> 00:16:18.680
Well, if we just go back
to My Window again,.
321

322
00:16:18.680 --> 00:16:20.990
Can you actually imagine having
to do this all automatically?
322

323
00:16:20.990 --> 00:16:24.950
You can see there's relatively speaking
considering what's actually happened,
323

324
00:16:24.950 --> 00:16:27.870
there's actually very little
code you actually have to type.
324

325
00:16:27.870 --> 00:16:32.760
All the infrastructure code to do a lot
of this work is automatically in these
325

326
00:16:32.760 --> 00:16:35.900
various classes, these packages
that have been provided by Java.
326

327
00:16:35.900 --> 00:16:36.990
So writing all this yourself,
327

328
00:16:36.990 --> 00:16:41.100
writing a window manager something that
actually creates fonts, that actually
328

329
00:16:41.100 --> 00:16:44.690
sets different fonts that will have
you to draw things on the screen.
329

330
00:16:44.690 --> 00:16:46.530
Positioning it up certain places.
330

331
00:16:46.530 --> 00:16:49.630
That would be huge undertaking
to do something yourself.
331

332
00:16:49.630 --> 00:16:53.880
And it can be months or even years of
work, but by using the old package.
332

333
00:16:53.880 --> 00:16:56.820
We can actually take advantage of
the facilities that it's provided for
333

334
00:16:56.820 --> 00:16:58.250
these programs.
334

335
00:16:58.250 --> 00:17:02.130
Just in case you're wondering, awt,
A-W-T stands for Abstract Window Toolkit.
335

336
00:17:02.130 --> 00:17:05.160
Now because that package, the awt package,
provides everything necessary to
336

337
00:17:05.160 --> 00:17:09.010
create the GUI interface, we know that
we can actually find all the classes and
337

338
00:17:09.010 --> 00:17:10.920
methods that we need within that package.
338

339
00:17:10.920 --> 00:17:15.030
And the thing is that if awt needs to be
upgraded NEW packages can be deployed.
339

340
00:17:15.030 --> 00:17:18.360
Rather than having to update files that
are scattered around the Java SDK.
340

341
00:17:18.360 --> 00:17:19.910
So that's why packages
are really essential.
341

342
00:17:19.910 --> 00:17:22.330
They can actually bundle these changes,
and
342

343
00:17:22.330 --> 00:17:24.210
from your perspective
nothing really changes.
343

344
00:17:24.210 --> 00:17:26.400
You're still accessing
them via the package,
344

345
00:17:26.400 --> 00:17:27.740
all the new code is actually happening,
345

346
00:17:27.740 --> 00:17:31.720
and it's all actually added to the
package, making it a fast simple exercise.
346

347
00:17:31.720 --> 00:17:32.550
For you to actually work with.
347

348
00:17:32.550 --> 00:17:34.880
So this video's getting on
a little bit long now so
348

349
00:17:34.880 --> 00:17:36.450
I'm going to actually stop the video here.
349

350
00:17:36.450 --> 00:17:39.200
And in the next video we'll
continue on talking about packages.
