1
1

00:00:05,180  -->  00:00:09,000
so now that we've actually seen the
basics of handing errors by catching
2

2

00:00:09,000  -->  00:00:14,080
exceptions were ready to have a look at
input and output in Java now there's
3

3

00:00:14,080  -->  00:00:17,450
actually several different approaches to
Java I/O
4

4

00:00:17,450  -->  00:00:21,150
the Java IO package has a bewildering array of objects dealing with
5

5

00:00:21,150  -->  00:00:25,250
different I/O methods so in this section
I'm gonna go through the most useful
6

6

00:00:25,250  -->  00:00:30,200
ways of getting data into and out of your programs and also discuss the advantages
7

7

00:00:30,200  -->  00:00:34,960
of the various methods as we actually
encounter them and I'll also be looking at
8

8

00:00:34,960  -->  00:00:38,390
the Java.nio package which was
introduced in Java 7 now
9

9

00:00:39,010  -->  00:00:44,960
what do I mean by input well input involves reading data
from a source and an output involves
10

10

00:00:44,960  -->  00:00:50,140
writing it to some destination now quite
often the source and destination will be
11

11

00:00:50,140  -->  00:00:55,010
files on the computer's disk drives
but they can also be network connections and
12

12

00:00:55,010  -->  00:00:59,670
pips as well as the computer's keyboard
and screen and in actual fact we've already
13

13

00:00:59,670  -->  00:01:04,060
used the scanner quite often to read
input from the keyboard so strictly
14

14

00:01:04,060  -->  00:01:07,730
speaking we aren't reading from the
keyboard though we're actually reading from
15

15

00:01:07,730  -->  00:01:12,380
system.in now that distinction may
not mean much just yet but it will make
16

16

00:01:12,380  -->  00:01:15,220
sense as we progress through this topic
17

17

00:01:15,220  -->  00:01:18,910
also in the section I want to discuss
dealing with disk files and directories
18

18

00:01:18,910  -->  00:01:23,120
and the reason is that quite often you
want to make a new directory to store
19

19

00:01:23,120  -->  00:01:27,600
your data whatever is the user with the list of files to choose from and the
20

20

00:01:27,600  -->  00:01:32,620
file class provides methods for doing
things like that now there's also quite
21

21

00:01:32,620  -->  00:01:37,360
a lot of jargoy and theory involved in
I/O but rather than spending a lot of
22

22

00:01:37,360  -->  00:01:41,870
time just talking I'm gonna actually
introduced as we work through various examples
23

23

00:01:41,870  -->  00:01:49,620
now there are some basics that I have to cover
first out so here goes now I/O can be performed using
24

24

00:01:49,620  -->  00:01:54,200
either byte or character data and the
methods used are pretty much the same
25

25

00:01:54,200  -->  00:01:59,610
for each its just the actual classes used
that will vary so when reading and
26

26

00:01:59,610  -->  00:02:04,050
writing character data the data is in a
readable format and you can open the
27

27

00:02:04,050  -->  00:02:10,240
resulting files if it is files that have been read or written in a text editor and you
28

28

00:02:10,240  -->  00:02:14,060
can probably make sense of it but binary data on the other hand involves writing
29

29

00:02:14,060  -->  00:02:17,630
bytes that will not look very
meaningful if you open
30

30

00:02:17,630  -->  00:02:21,790
the files in a normal text editor so which
type should you use really depends on what the
31

31

00:02:21,790  -->  00:02:26,330
data represents and you know if you're
creating a report file to be imported
32

32

00:02:26,330  -->  00:02:31,600
into a spreadsheet you probably choose a
character string and similarly character
33

33

00:02:31,600  -->  00:02:37,190
should probably be the correct type for writing
XML or JSON data but once during your
34

34

00:02:37,190  -->  00:02:41,970
programs variables or classes it may be
more appropriate to use a binary format
35

35

00:02:41,970  -->  00:02:46,510
it just does depend what you're trying to achieve
now another distinction that needs to be
36

36

00:02:46,510  -->  00:02:51,950
made between serial or sequential files
and random access files now sequential
37

37

00:02:51,950  -->  00:02:56,840
access can be thought of as a stream of
data that arrives at your program
38

38

00:02:56,840  -->  00:03:02,980
or is sent out from it in a defined order with each
piece of data following in sequence now
39

39

00:03:02,980  -->  00:03:07,390
random access on the other hand you know only
really applies to files and allows you
40

40

00:03:07,390  -->  00:03:12,100
to jump about the file or within the file
retrieving or overriding any data in any
41

41

00:03:12,100  -->  00:03:16,530
location within that file you choose so
this is more like how a database program
42

42

00:03:16,530  -->  00:03:20,160
would work in some sort of index showing
you nowhere a particular record is
43

43

00:03:20,160  -->  00:03:23,250
within the file so that it can be
read without having read through
44

44

00:03:23,250  -->  00:03:28,420
you now a thousands of the earlier records first for
example so a compared sequential data to
45

45

00:03:28,420  -->  00:03:33,720
stream in fact Java uses various stream object to deal with it and to see this in
46

46

00:03:33,720  -->  00:03:34,240
action
47

47

00:03:34,240  -->  00:03:38,530
will need to have some data to use so I'm gonna used the location data from the adventure
48

48

00:03:38,530  -->  00:03:43,750
game example that we modified for the
challenge in lecture 108 of section 13
49

49

00:03:43,750  -->  00:03:47,420
now if you didn't complete the challenge then
download the source code from the
50

50

00:03:47,420  -->  00:03:51,230
Resources section for that video and
then we'll make some changes and will
51

51

00:03:51,230  -->  00:03:55,450
create a file to store the games locations so if we're gonna read the
52

52

00:03:55,450  -->  00:03:59,820
location data from a file you know that really
makes sense to create a separate class
53

53

00:03:59,820  -->  00:04:04,580
to deal with that and to keep details of that implementation out of our main program
54

54

00:04:04,580  -->  00:04:09,020
now the program currently works those so unless if their is a good reason to make a lot of
55

55

00:04:09,020  -->  00:04:13,790
changes and we should really try and keep everything the
same as much as possible but because the
56

56

00:04:13,790  -->  00:04:18,570
main program uses a map to store
locations one approaches is to you know create
57

57

00:04:18,570  -->  00:04:23,230
a locations class that implements the
map interface so what will do first is we'll
58

58

00:04:23,230  -->  00:04:27,510
create a new class called locations and we are going to implement map based on the
59

59

00:04:27,510  -->  00:04:31,070
location and we'll need a hashmap to actually store the
60

60

00:04:31,070  -->  00:04:34,650
locations and then its going to use the code generator to actually generate all the various
61

61

00:04:34,650  -->  00:04:38,540
abstract methods that it needs to do and
we can use IntelliJ to do that so
62

62

00:04:38,540  -->  00:04:45,050
go and grab the location or grab the files from
the lecture 8 of section 13 because
63

63

00:04:45,050  -->  00:04:48,640
will need that in order to proceed so
I'm gonna pause the video now come back
64

64

00:04:48,640  -->  00:04:55,180
when you've got that and will actually
continue so what I'm going to now is import
65

65

00:04:55,180  -->  00:05:00,640
the locations class and also the main
class from that project the one we talked
66

66

00:05:00,640  -->  00:05:01,770
about earlier
67

67

00:05:01,770  -->  00:05:05,190
so to do that I am going to delete the main
class because we're gonna be importing
68

68

00:05:05,190  -->  00:05:13,110
its so I'm gonna delete that and swing over to
the folder where I actually downloaded
69

69

00:05:13,110  -->  00:05:16,670
the source code from that lecture
again
70

70

00:05:16,670  -->  00:05:23,950
section 13 which was lecture 108 so if we go back and have a
look at that I've got this downloaded and
71

71

00:05:23,950  -->  00:05:30,840
I'm gonna unzip that and I'm going to go into the files
and theirs 2 their com.timbuchalka
72

72

00:05:30,840  -->  00:05:35,670
location.java and main.java and that are the files that we work on
73

73

00:05:35,670  -->  00:05:42,050
so I'm going to take a copy of those files I am gonna
copied them so now I've copy those I'm
74

74

00:05:42,050  -->  00:05:46,710
going to actually go in back into the project
then right click it and click on
75

75

00:05:46,710  -->  00:05:52,780
reveal in finder have a similar options if your
under Windows or Linux and go into that folder
76

76

00:05:52,780  -->  00:05:57,120
which in this case I've called it InputOutput
into the source folder and go into my
77

77

00:05:57,120  -->  00:06:02,790
package whatever I called it I'm gonna paste
those files in their and so when I go back to
78

78

00:06:02,790  -->  00:06:07,630
IntelliJ now they should actually appear so if I go back to IntelliJ now they should actually
79

79

00:06:07,630  -->  00:06:14,250
appear in their so we know got location which is the location
file for that challenge from lecture
80

80

00:06:14,250  -->  00:06:18,420
108 and also the main class now if you doing this and your importing
81

81

00:06:18,420  -->  00:06:21,600
your own project make sure you got the
right package name
82

82

00:06:21,600  -->  00:06:24,680
you might have to fiddle around a little bit to
get the right package but in my case
83

83

00:06:24,680  -->  00:06:28,500
the com.timbuchalka was the package used for the original challenge
84

84

00:06:28,500  -->  00:06:33,670
and also for this file for this project so consequently things work fine ok so
85

85

00:06:33,670  -->  00:06:38,050
we've got those two files in that we're ultimately gonna be using we need to create a
86

86

00:06:38,050  -->  00:06:42,850
new class and this new class is called
locations and its gonna be used to sort of
87

87

00:06:42,850  -->  00:06:49,130
map the actual location or each one of the
locations we got for this now the original main
88

88

00:06:49,130  -->  00:06:54,460
program used a map or uses a map to store the locations and the approach
89

89

00:06:54,460  -->  00:06:58,780
we are gonna take is as I mentioned we are gonna create
a locations class that implements that
90

90

00:06:58,780  -->  00:07:02,560
map interface and this is going to
basically allow us to place all the
91

91

00:07:02,560  -->  00:07:07,440
initialization code into the new class and
not have to make any changes in our main
92

92

00:07:07,440  -->  00:07:17,850
method so lets go ahead and do that now we are gonna create this
new class new Java class and call it locations and we're
93

93

00:07:17,850  -->  00:07:27,380
going to come over here and put.....
94

94

00:07:27,380  -->  00:07:33,130
....
95

95

00:07:33,130  -->  00:07:40,610
....and we need to create
an actual locations
96

96

00:07:40,610  -->  00:07:48,760
object to store our locations so....
97

97

00:07:48,760  -->  00:07:55,210
....
98

98

00:07:55,210  -->  00:08:05,730
...and hashmap is obviously going to store the locations and I'm gonna use
99

99

00:08:05,730  -->  00:08:15,370
the auto generate to actually generate some code so if I do alt N we actually want to implement the various methods that
100

100

00:08:15,370  -->  00:08:18,980
are part of maps so I'm gonna click their and see how they are all selected for us
101

101

00:08:18,980  -->  00:08:22,610
automatically we got quite a few of their
size is empty
102

102

00:08:23,320  -->  00:08:28,080
contains key etc we need to select all of those or that was selected for us automatically to
103

103

00:08:28,080  -->  00:08:33,560
implement them press ENTER and notice
that on line 11 now we don't have any errors
104

104

00:08:33,560  -->  00:08:37,260
anymore but now we need to actually do
something with this code because obviously
105

105

00:08:37,260  -->  00:08:41,560
just a default code that has been generated
and won't have code that we need
106

106

00:08:41,560  -->  00:08:47,610
in their so firstly the location the size is going to
return
107

107

00:08:47,610  -->  00:08:54,300
how many elements are in our hash map so....
108

108

00:08:54,300  -->  00:08:59,890
now to determine whether its empty instead of just
returning false we're gonna actually return
109

109

00:08:59,890  -->  00:09:06,390
locations .isempty so that return
true or false depending on whether we got any
110

110

00:09:06,390  -->  00:09:16,000
items or any location objects within our hash map
so contains key we are going to use the code
111

111

00:09:16,000  -->  00:09:24,700
straight out of the hash map so put....
112

112

00:09:24,700  -->  00:09:30,670
and whatever the name of the keys that the objects has
passed to us and likewise for contains value
113

113

00:09:30,670  -->  00:09:42,070
we are gonna do a similar thing.....
114

114

00:09:42,070  -->  00:09:53,010
.....
115

115

00:09:53,010  -->  00:10:09,610
....
116

116

00:10:09,610  -->  00:10:27,750
.....
117

117

00:10:27,750  -->  00:10:34,750
....
118

118

00:10:35,370  -->  00:10:52,350
.....
119

119

00:10:53,550  -->  00:11:00,360
and that should probably be the only change we need to make so as you can see we're
120

120

00:11:00,360  -->  00:11:04,770
using a HashMap to store the location just like
the main class did and all the methods
121

121

00:11:04,770  -->  00:11:07,820
that we have to implement really just
delegate to the corresponding methods of
122

122

00:11:07,820  -->  00:11:12,420
the hash map as I  mentioned we aren't gonna use
all of them but when implementing an
123

123

00:11:12,420  -->  00:11:16,200
interface of course we have to implement all the
abstract methods of that interface and
124

124

00:11:16,200  -->  00:11:18,900
there wasn't that many anyway and it didn't
really take a lot to set them up but
125

125

00:11:18,900  -->  00:11:22,190
it's really worth the effort to
encapsulate the location data like this
126

126

00:11:22,190  -->  00:11:28,360
by doing it this way so what we just created is a class
that now pretty much behave just like a map but
127

127

00:11:28,360  -->  00:11:32,370
which we can customize to load its
contents from an external source a disc
128

128

00:11:32,370  -->  00:11:37,370
file in this case so we can now swing over
to the main class and start replacing
129

129

00:11:37,370  -->  00:11:44,940
the locations map with our new class so let's
go ahead and do that so in here so firstly
130

130

00:11:44,940  -->  00:11:50,810
now on line 8 we've got a reference
there to creating a new HashMap we can
131

131

00:11:50,810  -->  00:11:53,990
actually change that to a locations object so lets go ahead and do that so that is going to be
132

132

00:11:53,990  -->  00:12:05,850
.....the new class we just
133

133

00:12:05,850  -->  00:12:13,170
created earlier in this video and of course that needs
to be static as well so make that a static....so now
134

134

00:12:13,170  -->  00:12:16,570
we've actually done that we need to
remove a single bit of code and
135

135

00:12:16,570  -->  00:12:24,570
scrolling down i think its on line 60 and originally I put that line into
136

136

00:12:24,570  -->  00:12:29,580
to demonstrate the problems with
exposing with our exits to an external class we
137

137

00:12:29,580  -->  00:12:32,800
don't need that anymore so I'm gonna get rid
of that just to keep things tidy so I'm
138

138

00:12:32,800  -->  00:12:37,980
just gonna remove that line and now if we look at our class we should find that
139

139

00:12:37,980  -->  00:12:41,940
were pretty well manage to slot in our change to our new class and it
140

140

00:12:41,940  -->  00:12:46,650
seems to be working fine but certainly
there's no compilation errors which we are off to a good
141

141

00:12:46,650  -->  00:12:51,370
start and that's really all the changes
we need to make tp main now we can
142

142

00:12:51,370  -->  00:12:54,890
actually cut out all the code that
initializes the locations and paste them
143

143

00:12:54,890  -->  00:12:58,510
into the new locations class so let's go
ahead and do that so start on line
144

144

00:12:58,510  -->  00:13:02,290
21 here this is the code here we use to create
these locations
145

145

00:13:03,480  -->  00:13:11,700
copy right down to the end of that I
think was the last one their locations
146

146

00:13:12,280  -->  00:13:19,070
cut that clean that up and go back to
our locations class and we are about to paste that in
147

147

00:13:19,070  -->  00:13:23,150
but there's really only needs
to be single instance of the location
148

148

00:13:23,150  -->  00:13:26,610
data for the game so it doesn't allow it
doesn't make much sense to allow
149

149

00:13:26,610  -->  00:13:30,830
multiple instances of the locations
class to each of their own copy of the
150

150

00:13:30,830  -->  00:13:34,700
data now we saw in the lecture about the
static keyword that there's only one
151

151

00:13:34,700  -->  00:13:40,410
copy of static data that is shared amongst all
classes instances so here it actually makes sense to
152

152

00:13:40,410  -->  00:13:44,980
keep this location data static and I
also discussed static initialization
153

153

00:13:44,980  -->  00:13:50,310
blocks and this is actually a good time
to actually use one so lets create that static
154

154

00:13:50,310  -->  00:13:56,480
initialization block in this locations class go ahead and do that so let me put that in
155

155

00:13:56,480  -->  00:14:04,270
their so...
156

156

00:14:04,270  -->  00:14:08,920
and just a reminder the static initialization block
will be executed once and that's when
157

157

00:14:08,920  -->  00:14:10,700
the locations classes loaded
158

158

00:14:10,700  -->  00:14:14,480
and other classes a HashMap field called locations that you can see on the screen
159

159

00:14:14,480  -->  00:14:18,610
there and that's also static so theirs really only one copy of that shared by
160

160

00:14:18,610  -->  00:14:22,040
you know how many instances of the
locations class that are created
161

161

00:14:22,040  -->  00:14:25,750
now there's no real reason to
create more than one location object
162

162

00:14:25,750  -->  00:14:30,390
but as we can't make the interface
method static we have to allow at least
163

163

00:14:30,390  -->  00:14:34,020
one instance to be created and of course
once you do that you can't guarantee
164

164

00:14:34,020  -->  00:14:38,980
that someone else won't create one more
than one of them's now there are ways to
165

165

00:14:38,980  -->  00:14:42,790
ensure that only a single instance of the
class can be created the singleton
166

166

00:14:42,790  -->  00:14:46,180
design pattern is probably the simplest
here but we'll look at that later in the
167

167

00:14:46,180  -->  00:14:50,420
course but for this application making
the data static and ensuring its only
168

168

00:14:50,420  -->  00:14:54,310
initialize once is actually fine and
using the static initialization block
169

169

00:14:54,310  -->  00:14:59,120
confirms that actually is the case so
lets just run this to make
170

170

00:14:59,120  -->  00:15:02,120
sure that it did work as it did
before
171

171

00:15:08,360  -->  00:15:20,190
make a bit of space here so we can see what's going on starting at the end I can go north go south east west
172

172

00:15:20,190  -->  00:15:26,510
quit and that is all working fine so the main class really doesn't care that
173

173

00:15:26,510  -->  00:15:31,620
is now using our locations class rather
than a hash map that it used to use because
174

174

00:15:31,620  -->  00:15:35,870
we've implemented the map interface in
all the required methods so I'm gonna end
175

175

00:15:35,870  -->  00:15:40,520
the video here now but on the next video we are going to
take this to the next level we are
176

176

00:15:40,520  -->  00:15:44,410
gonna start looking at getting this
data into a file or reading from
177

177

00:15:44,410  -->  00:15:49,370
a file rather in the way that we are
using it now which is as you can see here on lines
178

178

00:15:49,370  -->  00:15:53,570
15 and sort of going down we are actually
hard coding it so let's look at doing that
179

179

00:15:53,570  -->  00:15:54,370
in the next video
