1
1

00:00:05,890  -->  00:00:11,030
so in the previous few video we've
looked at the how to read and write text files or
2

2

00:00:11,030  -->  00:00:15,350
text data to files using the
file reader and file writer classes so we
3

3

00:00:15,350  -->  00:00:19,470
also look at buffering the data to make the
program more efficient which is reducing
4

4

00:00:19,470  -->  00:00:23,030
the disk access time by reading large chunks of the
5

5

00:00:23,030  -->  00:00:27,320
file in to memory in the case of a read
operation or writing data to a buffer
6

6

00:00:27,320  -->  00:00:33,150
then saving a large chunk to a file in a single operation when writing so
7

7

00:00:33,150  -->  00:00:37,760
I'll continue to use buffered streams in
this next example and here we are gonna take
8

8

00:00:37,760  -->  00:00:41,930
a look at byte streams of binary data in other words now once again we need
9

9

00:00:41,930  -->  00:00:45,370
some data to work with so what we'll
do is we'll continue using our locations
10

10

00:00:45,370  -->  00:00:51,440
data for this first example but once I have covered how to read and write binary data we are gonna switch over
11

11

00:00:51,440  -->  00:00:56,020
and use some different examples so you don't get to bored so to clarify what's going
12

12

00:00:56,020  -->  00:00:59,870
on with the static initialization block
in the locations class just open that up
13

13

00:00:59,870  -->  00:01:05,550
in the static block you can see on the
screen when we run like locations.main
14

14

00:01:05,550  -->  00:01:13,040
the main method in this class this is the code up here on line 14
15

15

00:01:13,040  -->  00:01:19,360
when we run that main method the class has to
be loaded before its main method can be
16

16

00:01:19,360  -->  00:01:23,640
executed so what that means is the code in the staticp initialization
17

17

00:01:23,640  -->  00:01:28,220
block is executed before the main method
and what that means is that the
18

18

00:01:28,220  -->  00:01:32,860
locations and directions files have been
read in before the main method is executed
19

19

00:01:32,860  -->  00:01:38,330
in this class so to start with what I'm going to do is rewrite the main method to save
20

20

00:01:38,330  -->  00:01:42,220
the data that's read in by the static
initialization block in a binary format
21

21

00:01:42,220  -->  00:01:46,430
now once we've got a binary file to
experiment with and what I'll do is change the
22

22

00:01:46,430  -->  00:01:51,640
static initialization block to read from
this newly created file now in terms of
23

23

00:01:51,640  -->  00:01:57,110
binary data one advantage of dealing
with that data or byte stream is that we
24

24

00:01:57,110  -->  00:02:01,390
don't have to pass the data into the various data types that were stored and
25

25

00:02:01,390  -->  00:02:04,990
the reason for that is a byte stream itself can be used to read and write any of the
26

26

00:02:04,990  -->  00:02:10,100
java primitive types that such as int double byte etc and also a
27

27

00:02:10,100  -->  00:02:14,190
special case it can also handle string
variables even though
28

28

00:02:14,190  -->  00:02:17,030
a string isn't actually a primitive type
29

29

00:02:17,030  -->  00:02:21,520
and I think that's pretty cool so
working with byte streams they follow the
30

30

00:02:21,520  -->  00:02:25,930
same pattern or working with byte streams
follows the same pattern the differences is
31

31

00:02:25,930  -->  00:02:30,120
were used to file InputStream and the file output stream classes instead of file readers
32

32

00:02:30,120  -->  00:02:34,140
and file writers once again I'm gonna buffer the data using the buffered
33

33

00:02:34,140  -->  00:02:39,190
InputStream and buffered output stream
classes now in terms of doing this we could work
34

34

00:02:39,190  -->  00:02:43,540
directly with these objects but they
only handle raw bytes so reading or
35

35

00:02:43,540  -->  00:02:48,220
writing either a single byte or a
specified number of bytes now there are
36

36

00:02:48,220  -->  00:02:51,570
occasions when that's probably all you'll
need but generally speaking when storing
37

37

00:02:51,570  -->  00:02:56,750
and retrieving data you probably want to
work with Java types now the Java IO
38

38

00:02:56,750  -->  00:03:01,550
package likely for us makes it easy by
providing the data InputStream and
39

39

00:03:01,550  -->  00:03:06,170
data output stream classes and they provide
methods such as read int to read an
40

40

00:03:06,170  -->  00:03:10,510
integer value from the stream
it does this by reading 4 bytes from
41

41

00:03:10,510  -->  00:03:15,090
the stream and building up the integer from those 4
bytes so have a look at how those
42

42

00:03:15,090  -->  00:03:18,150
classes work together in a minute but
it's probably easier to have some code
43

43

00:03:18,150  -->  00:03:22,070
to work with so we are gonna replace the
code in the locations main method now
44

44

00:03:22,070  -->  00:03:26,940
with this new code instead of trying to
change it I'm going to just delete everything and
45

45

00:03:26,940  -->  00:03:38,950
start again just so it's clearer for you
so do try and its gonna be data...
46

46

00:03:38,950  -->  00:03:46,500
....
47

47

00:03:46,500  -->  00:03:53,820
...and notice how IntelliJ is finding that for us
48

48

00:03:53,820  -->  00:03:57,170
automatically which is pretty cool....
49

49

00:03:57,170  -->  00:04:05,390
....
50

50

00:04:07,290  -->  00:04:18,040
...
51

51

00:04:18,040  -->  00:04:24,060
....
52

52

00:04:24,060  -->  00:04:29,440
...
53

53

00:04:29,440  -->  00:04:38,120
...which we effectively to
write a string and you can see the input their is
54

54

00:04:38,120  -->  00:04:45,650
looking for is a string so....
55

55

00:04:45,650  -->  00:04:52,550
....
56

56

00:04:52,550  -->  00:05:06,590
...
57

57

00:05:06,590  -->  00:05:11,650
....
58

58

00:05:11,650  -->  00:05:21,450
...that is how many exits were writing for this particular
59

59

00:05:21,450  -->  00:05:30,040
location so lets now write that number out so....
60

60

00:05:30,040  -->  00:05:34,840
....
61

61

00:05:38,340  -->  00:05:44,140
....
62

62

00:05:44,140  -->  00:05:51,800
...
63

63

00:05:51,800  -->  00:05:58,850
....and we don't want to record the quit and that is why
64

64

00:05:58,850  -->  00:06:04,490
we deducted one from the total size so....
65

65

00:06:04,490  -->  00:06:13,530
....so if we are not writing the quit location or making sure the direction that we're
66

66

00:06:13,530  -->  00:06:19,690
processing isn't quit then we are gonna print
this out so....
67

67

00:06:19,690  -->  00:06:26,370
...
68

68

00:06:26,370  -->  00:06:29,800
....
69

69

00:06:29,800  -->  00:06:36,070
...which is current the current direction we are
70

70

00:06:36,070  -->  00:06:43,900
processing and...
71

71

00:06:43,900  -->  00:06:50,750
....and we want to write the location effectively where
72

72

00:06:50,750  -->  00:07:00,480
with that direction goes so....
73

73

00:07:00,480  -->  00:07:03,480
...
74

74

00:07:05,420  -->  00:07:11,740
...
75

75

00:07:11,740  -->  00:07:17,930
....
76

76

00:07:17,930  -->  00:07:24,590
...
77

77

00:07:24,590  -->  00:07:28,650
....you may as well try and use that try with exception now in the course
78

78

00:07:28,650  -->  00:07:32,310
because that is the recommended way to process and of
course that means we don't need to have
79

79

00:07:32,310  -->  00:07:34,050
that finally and catch
80

80

00:07:34,050  -->  00:07:38,240
we are already throwing the IO exception anyway we
don't have to worry because of
81

81

00:07:38,240  -->  00:07:42,740
course as if you recall this is
automatically set up to close our
82

82

00:07:42,740  -->  00:07:46,670
files when we finish processing them and just
one thing to note we're going to be
83

83

00:07:46,670  -->  00:07:50,400
writing locations.dat
because it's no longer a text file
84

84

00:07:50,400  -->  00:07:56,430
2 advantages firstly it's needed anyway
because the main reason we doing that is
85

85

00:07:56,430  -->  00:08:01,620
not conflict with locations.txt
but equally importantly it's clear that
86

86

00:08:01,620  -->  00:08:07,980
this isn't a regular text files so we wouldn't want to call it .txt and people thinking they can open it with a
87

87

00:08:07,980  -->  00:08:11,760
text editor when of course when it is a binary data and it won't open so that's one reason
88

88

00:08:11,760  -->  00:08:15,460
why we've chosen that so lets run this
program and see if it works
89

89

00:08:20,340  -->  00:08:27,930
and you can see we got a locations.dat file now and just out of interest if we try and open that IntelliJ having a bit of a fit
90

90

00:08:27,930  -->  00:08:32,930
but we just say treated it as text anyway and open
it you can see it looks a little bit
91

91

00:08:32,930  -->  00:08:36,010
like their is some weird stuff in there as well
92

92

00:08:36,010  -->  00:08:42,270
and if you click on reload and another encoding we get the
same result
93

93

00:08:42,270  -->  00:08:46,730
I am not gonna proceed with that the bottom
line here is that IntelliJ is seeing that
94

94

00:08:46,730  -->  00:08:51,070
this is not a regular text file compared
to say locations.txt which of
95

95

00:08:51,070  -->  00:08:54,720
course you could read because that was a
text file but this is a binary file so we
96

96

00:08:54,720  -->  00:08:59,620
still get to see some of the information
but you can see in the case of line 1
97

97

00:08:59,620  -->  00:09:04,210
those bytes there are ultimately
going to be an integer which corresponds
98

98

00:09:04,210  -->  00:09:08,280
to the first thing we wrote out which was
the location ID and just in terms
99

99

00:09:08,280  -->  00:09:13,420
of see where we're up if we go back and scroll up to the top
here after the imports which happened in
100

100

00:09:13,420  -->  00:09:15,190
this static initialization block
101

101

00:09:15,190  -->  00:09:24,200
....you can see writing locations 0 where the location was sitting in front of a computer
102

102

00:09:24,200  -->  00:09:31,400
learning Java writing 0 exits because their weren't any exits location 1 and we got various directions and the location
103

103

00:09:31,400  -->  00:09:38,400
or the direction corresponding to where which
room that goes or which location that goes to
104

104

00:09:38,400  -->  00:09:41,460
so that's the text representation of what's been written in
105

105

00:09:41,460  -->  00:09:45,650
the binary file and i do recommend when you
working with binary data like this is
106

106

00:09:45,650  -->  00:09:50,140
generally a good idea to do something
like this and to keep your code up to date
107

107

00:09:50,140  -->  00:09:58,100
so getting back to the code again so if I closed this file its a good idea as you're writing your code to
108

108

00:09:58,100  -->  00:10:02,960
have this sort of debugging capabilities
built in and adding and updating as you
109

109

00:10:02,960  -->  00:10:09,590
update this particular method if you're writing data or adding new data to the file update your debugging information as
110

110

00:10:09,590  -->  00:10:14,310
well because it really makes it easier
to work on this in the future now later
111

111

00:10:14,310  -->  00:10:19,370
in the course I am gonna look at logging
because really if you think about this output shouldn't
112

112

00:10:19,370  -->  00:10:23,420
really be shown to users of the programs
so its better to write it in a log file where it's
113

113

00:10:23,420  -->  00:10:26,850
hidden from users but is available to us as
developers if we need to diagnose
114

114

00:10:26,850  -->  00:10:30,650
those errors in the future so you notice we
created the dat file that was the
115

115

00:10:30,650  -->  00:10:35,410
number one but secondly did you pick up
the fact that we now writing
116

116

00:10:35,410  -->  00:10:39,960
locations and exits all in the same file
because locations have different numbers
117

117

00:10:39,960  -->  00:10:43,840
of exits the number of exits is written
first and followed by the exit data
118

118

00:10:43,840  -->  00:10:47,650
for that location if you think about it
there's no reason why we couldn't have
119

119

00:10:47,650  -->  00:10:51,840
done that for the text files as well but
it was useful to see how data from different
120

120

00:10:51,840  -->  00:10:54,460
files could be related and that's the
reason that I used that different approach
121

121

00:10:54,460  -->  00:10:59,600
in the case of the text files they can
also be really read by humans so its
122

122

00:10:59,600  -->  00:11:03,480
worth spending time to decide how the data
should be presented in that case you
123

123

00:11:03,480  -->  00:11:07,730
know whether a single files is ok or split into locations and exits as I did
124

124

00:11:07,730  -->  00:11:12,920
when working on the text files once
again you can make arguments for
125

125

00:11:12,920  -->  00:11:18,330
and against this approach but in the case of
binary data humans wouldn't be reading the contents
126

126

00:11:18,330  -->  00:11:23,000
of the file so the decisions probably a
lot easy-to-make so the question to ask
127

127

00:11:23,000  -->  00:11:25,590
yourself here's why used 2 separate files
128

128

00:11:25,590  -->  00:11:30,170
when a single file will
do especially if using two separate files
129

129

00:11:30,170  -->  00:11:34,100
doesn't give you any advantage you may feel that having 2 separate files makes the code
130

130

00:11:34,100  -->  00:11:38,500
easy to debug in which case it's fine to
do it that way it's your code after all
131

131

00:11:38,500  -->  00:11:42,080
so you can really do whichever you want but
it is a good idea to understand the
132

132

00:11:42,080  -->  00:11:46,950
options when making a decision but
actually it also looking at the code line 13
133

133

00:11:46,950  -->  00:11:52,020
through 24 is not really a lot of code
there anyway so I mean it's not
134

134

00:11:52,020  -->  00:11:57,270
particularly complex what we've done sort of
writing this out to a single file and
135

135

00:11:57,270  -->  00:12:00,510
again just looking at that code you can see
that the code to write to the byte stream
136

136

00:12:00,510  -->  00:12:04,960
is very similar to writing to a
character stream the file output stream objects
137

137

00:12:04,960  -->  00:12:08,750
used to open the file for writing and
once again we buffer the output as you saw
138

138

00:12:08,750  -->  00:12:14,400
with the buffer output stream object now I could have left it at that and I could have written a code to produced the bytes
139

139

00:12:14,400  -->  00:12:18,270
representing the integer string values to be written its a bit fiddly doing that
140

140

00:12:18,270  -->  00:12:21,780
way but not too difficult but
fortunately the data output stream
141

141

00:12:21,780  -->  00:12:28,590
class deals with all that automatically and you saw that as I was typing code in all we will have to do
142

142

00:12:28,590  -->  00:12:36,210
here now is to write it in for example
to use the .right int method you saw that on line 15 and
143

143

00:12:36,210  -->  00:12:41,320
then write UTF on line 16 is an example
to write the string out the good news is
144

144

00:12:41,320  -->  00:12:47,060
there are also methods to write out all the Java primitive
types so the data output stream class includes
145

145

00:12:47,060  -->  00:12:48,680
the right long right flow
146

146

00:12:48,680  -->  00:12:53,590
right double etc so lets spend a short
while looking at what the right int method
147

147

00:12:53,590  -->  00:12:56,590
does so going to command click so you command or control-click
148

148

00:12:57,250  -->  00:13:04,900
right int click under that then there's the method on the
screen so notice here we are using this particular operator
149

149

00:13:04,900  -->  00:13:09,090
this is called the shift right 0 fill operator which is a bit of a mouthful
150

150

00:13:09,900  -->  00:13:15,810
but basically what is doing their by using 24 in the expression
here it's actually moving the top eight
151

151

00:13:15,810  -->  00:13:19,950
bits the highest bytes into the lowest
position by shifting them right 24
152

152

00:13:19,950  -->  00:13:25,700
places if that make sense so open up an image
and show that on the screen to make a bit more
153

153

00:13:25,700  -->  00:13:28,950
sense of this so lets have a look at this
on the screen
154

154

00:13:31,310  -->  00:13:38,300
so in the example on the screen here the original value is 922.342.959
155

155

00:13:38,300  -->  00:13:42,430
I wanted to show you how the various shift
operations result in the four bytes been
156

156

00:13:42,430  -->  00:13:46,740
extracted for writing to the file so
can see here by using that first
157

157

00:13:46,740  -->  00:13:49,090
I'll just move this here so you can see this
as well
158

158

00:13:49,090  -->  00:13:52,270
corresponding to the liens of code that is right int is using
159

159

00:13:53,390  -->  00:14:02,520
you can see in the first case right shift by 24
bits result in the values 0011 0110 which is hex 36
160

160

00:14:02,520  -->  00:14:07,400
or 54 in decimal been moved to the right
most byte with all other bytes
161

161

00:14:07,400  -->  00:14:11,950
containing 0 and as we move down the next
shift operation shifts right 16 bits
162

162

00:14:11,950  -->  00:14:16,460
that's the 16 here on line 198 and so we get 36F9
163

163

00:14:16,460  -->  00:14:25,700
you can see the number there in binary it
actually gives us 0011 0110 1111 1001 in
164

164

00:14:25,700  -->  00:14:30,370
binary and just about the maximum number of
digits I'm prepared to read out so I'm
165

165

00:14:30,370  -->  00:14:35,300
gonna give all the remaining so shifting
right by 8 when the next line
166

166

00:14:35,300  -->  00:14:42,260
causes the to f values to fall off to the
right and we get 36 F9D6 you can see this on here
167

167

00:14:42,260  -->  00:14:45,970
the third example and the following
shifting right 0 place does nothing
168

168

00:14:45,970  -->  00:14:50,650
and the values is unchanged so because only
the single right most bytes should be
169

169

00:14:50,650  -->  00:14:55,200
written each time the shifted values is ended
with the hex value FF which is
170

170

00:14:55,200  -->  00:15:02,730
000000FF when stored as an integer so that results in
higher 3 bytes being cleared to 0 given
171

171

00:15:02,730  -->  00:15:06,940
the value that must be written to the file
and you might be looking at that and thinking
172

172

00:15:06,940  -->  00:15:14,250
Tim what the heck out are you going about here the point I want to make with all of this is because we've got the data output
173

173

00:15:14,250  -->  00:15:18,650
class or the data output stream
class we don't have to worry about any
174

174

00:15:18,650  -->  00:15:22,430
of this but they could be situations
where you may have to deal with raw data
175

175

00:15:22,430  -->  00:15:25,300
streams at some point so it's probably
useful to understand what's going on
176

176

00:15:25,300  -->  00:15:30,070
now we can do that without getting too
bogged down in binary so in the next video
177

177

00:15:30,070  -->  00:15:34,280
I'm going to create a new java file to hold
a class called shift int and we are going to print
178

178

00:15:34,280  -->  00:15:38,540
some values out that ultimately will be
written out just so we can see what's
179

179

00:15:38,540  -->  00:15:44,110
happening at a lower level than you
probably used to so lets work on that in
180

180

00:15:44,110  -->  00:15:44,530
the next video
