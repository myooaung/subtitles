WEBVTT
1
1

00:00:05.420  -->  00:00:08.750
In the previous video we went through
what keywords and expressions were.
2

2

00:00:08.750  -->  00:00:14.090
In this video we're going to talk about
statements, what's space and indenting.
3

3

00:00:14.090  -->  00:00:17.860
What they are and why they're
important within Java applications.
4

4

00:00:17.860  -->  00:00:21.660
So I've created a new project called
StatementsWhiteSpaceAndIndenting.
5

5

00:00:22.810  -->  00:00:25.740
So let's start off and
just enter a expression.
6

6

00:00:25.740  -->  00:00:27.410
Well, actually,
we're gonna type the whole line, int.
7

7

00:00:32.950  -->  00:00:36.040
Sorry, so int, I'm just make a bit
more space by double-clicking.
8

8

00:00:36.040  -->  00:00:39.280
And if you recall from the previous
video when we discussed expressions
9

9

00:00:39.280  -->  00:00:43.360
you know that the myVariable equals 50,
is the expression.
10

10

00:00:44.690  -->  00:00:45.780
So what is a statement?
11

11

00:00:45.780  -->  00:00:47.950
Well, a statement is the entire line.
12

12

00:00:47.950  -->  00:00:53.120
So the entire line that reads
int myVariable equals 50;
13

13

00:00:53.120  -->  00:00:58.000
that is a statement within Java so that
actually is the complete line if you will.
14

14

00:00:59.000  -->  00:01:03.900
So in this case, by adding the data
tart at the start to our expression and
15

15

00:01:03.900  -->  00:01:07.470
then finishing off with a semi colon
we've made a valid Java statement.
16

16

00:01:07.470  -->  00:01:10.630
So Java statements can be
assignment expressions,
17

17

00:01:10.630  -->  00:01:14.910
like the one above we're assigning
the value 50 to the variable myVariable.
18

18

00:01:14.910  -->  00:01:16.320
We can also do something like this,
19

19

00:01:16.320  -->  00:01:19.650
another statement would be my,
there will go plus, plus.
20

20

00:01:19.650  -->  00:01:22.550
Which you've seen that before
in the operator videos.
21

21

00:01:22.550  -->  00:01:26.510
MyVariable--, etc.
22

22

00:01:26.510  -->  00:01:30.800
So those types of things
are making a complete statement.
23

23

00:01:30.800  -->  00:01:34.990
But also method calls we haven't talked
about but will much more in the future,
24

24

00:01:34.990  -->  00:01:36.670
that's also a statement.
25

25

00:01:36.670  -->  00:01:42.410
And you've seen this before
when we've used [BLANK AUDIO]
26

26

00:01:42.410  -->  00:01:48.950
the System.out.print modeIn,
that is a complete Java statement.
27

27

00:01:48.950  -->  00:01:50.090
Because it's got, in this case,
28

28

00:01:50.090  -->  00:01:55.530
a method call and it's got a semi colon
at the end with the parameters passed.
29

29

00:01:55.530  -->  00:01:59.760
So semicolon is needed to complete
a Java line, to make it a statement,
30

30

00:01:59.760  -->  00:02:03.690
in most cases, but there are exceptions
to that, and as we go through this video,
31

31

00:02:03.690  -->  00:02:05.160
I'll talk more about those.
32

32

00:02:05.160  -->  00:02:07.580
The other thing to keep in
mind with statements is,
33

33

00:02:07.580  -->  00:02:09.010
they don't have to be on the one line.
34

34

00:02:09.010  -->  00:02:12.470
So in the case above,
with the System.out.println,
35

35

00:02:12.470  -->  00:02:13.950
what I could have done.
36

36

00:02:26.600  -->  00:02:29.440
Like so, and Java is actually
smart enough to know that,
37

37

00:02:29.440  -->  00:02:31.640
there’s nothing here finishing the line.
38

38

00:02:31.640  -->  00:02:33.420
There’s no semicolon.
39

39

00:02:33.420  -->  00:02:35.650
So therefore,
I'm gonna continue on the next line.
40

40

00:02:35.650  -->  00:02:38.930
So what it does it collectively
adds all this together and
41

41

00:02:38.930  -->  00:02:43.460
effectively creates the line just as
if we haven't done something like this.
42

42

00:02:48.990  -->  00:02:50.630
So as far as Java is concerned,
43

43

00:02:50.630  -->  00:02:54.350
that is exactly the same as what
we talked on that case below it.
44

44

00:02:54.350  -->  00:02:59.040
So with the pluses and so forth, but
we go back to what it was before.
45

45

00:02:59.040  -->  00:03:01.090
Back to what it was before.
46

46

00:03:01.090  -->  00:03:02.360
That is still valid as well.
47

47

00:03:02.360  -->  00:03:06.340
So you'll see that typed in Java code,
and often it's a good idea to do that.
48

48

00:03:06.340  -->  00:03:09.540
To break up your current so it makes
more sense, so it's more readable.
49

49

00:03:09.540  -->  00:03:12.280
From Java's perspective it doesn't
care if it's on one line or
50

50

00:03:12.280  -->  00:03:15.540
on many lines, provided you're
not trying to end the lines.
51

51

00:03:15.540  -->  00:03:19.300
So for example, if you try to put
a semicolon there, Java's gonna get into
52

52

00:03:19.300  -->  00:03:24.040
difficulty because it's now saying,
well, there's no bracket here.
53

53

00:03:24.040  -->  00:03:27.000
And it's expecting a bracket
because we put a terminator there.
54

54

00:03:27.000  -->  00:03:28.090
We put the semicolon,
55

55

00:03:28.090  -->  00:03:32.160
which is acting as a terminator to
close off the line, so to speak.
56

56

00:03:32.160  -->  00:03:34.080
Get rid of that again, and
it should be good to go.
57

57

00:03:34.080  -->  00:03:35.450
So we could just run that
to make sure it's working.
58

58

00:03:39.790  -->  00:03:40.700
We get an error.
59

59

00:03:40.700  -->  00:03:41.340
Why do we get the error?
60

60

00:03:41.340  -->  00:03:42.630
Well, I haven't put the plus there,
have I?
61

61

00:03:42.630  -->  00:03:45.250
So I need to put plus,
which makes it valid, and
62

62

00:03:45.250  -->  00:03:46.980
now we should be able to run it.
63

63

00:03:50.070  -->  00:03:53.250
And as you can see, we've got the answer
over there, so it's working fine.
64

64

00:03:53.250  -->  00:03:56.530
The other thing is, you can have
multiple statements on the one line.
65

65

00:03:56.530  -->  00:04:03.460
So for example,
we could put int anotherVariable = 5.
66

66

00:04:03.460  -->  00:04:07.440
And we can then put myVariable--, like so.
67

67

00:04:07.440  -->  00:04:08.930
So as far as Java's concerned,
68

68

00:04:08.930  -->  00:04:11.600
that is still valid because
it's failed the separator.
69

69

00:04:11.600  -->  00:04:12.700
And as far as it's concerned,
70

70

00:04:12.700  -->  00:04:15.750
that's exactly the same as if
you had of typed it like that.
71

71

00:04:15.750  -->  00:04:18.530
Now, often I would recommend not
putting statements on the same line cuz
72

72

00:04:18.530  -->  00:04:20.010
it can get confusing.
73

73

00:04:20.010  -->  00:04:22.900
And it just does take a little bit more
effort to figure out whether that's all
74

74

00:04:22.900  -->  00:04:24.430
part and parcel on the same line.
75

75

00:04:24.430  -->  00:04:27.740
But the bottom line is you can put
many things on the same line if
76

76

00:04:27.740  -->  00:04:28.300
you wanna do that.
77

77

00:04:28.300  -->  00:04:30.170
We could take that even further.
78

78

00:04:30.170  -->  00:04:35.180
We could put [BLANK AUDIO],
79

79

00:04:35.180  -->  00:04:37.620
that was IntelliJ adding this to,
going to the next line.
80

80

00:04:37.620  -->  00:04:38.660
That was something that I did.
81

81

00:04:41.320  -->  00:04:44.620
So we could go back there, like so,
and that is still completely valid,
82

82

00:04:44.620  -->  00:04:46.450
as far as Java is concerned.
83

83

00:04:46.450  -->  00:04:50.070
And we can run that, and
it quite happy as you can see.
84

84

00:04:50.070  -->  00:04:53.900
So you can sort that when I started
topping systems, I had to print line.
85

85

00:04:53.900  -->  00:04:55.430
IntelliJ, I tried to put
it on the next line,
86

86

00:04:55.430  -->  00:04:57.200
because it figured it would
be better on the next line.
87

87

00:04:57.200  -->  00:04:59.480
But the bottom line is,
you don't have to do that,
88

88

00:04:59.480  -->  00:05:01.880
you can put them on the same
line if you want to.
89

89

00:05:01.880  -->  00:05:03.410
And it's Java looking at it knowing
90

90

00:05:04.570  -->  00:05:08.630
that's a complete statement because
we've got something ending a semicolon.
91

91

00:05:08.630  -->  00:05:11.420
And it's looked at this and found out
that yes, there's a variable type, and
92

92

00:05:11.420  -->  00:05:12.750
then there's an expression.
93

93

00:05:12.750  -->  00:05:14.160
That's a valid line.
94

94

00:05:14.160  -->  00:05:17.480
And looking at the code line-by-line
with semicolons, it's figuring it out.
95

95

00:05:17.480  -->  00:05:19.410
So of course, you're gonna get
into difficulty if you're try and
96

96

00:05:19.410  -->  00:05:20.560
not include a semicolon.
97

97

00:05:20.560  -->  00:05:23.320
Cuz it's gonna be going,
well hang on, semicolon's expected.
98

98

00:05:24.590  -->  00:05:26.350
There you go, that makes it valid again.
99

99

00:05:26.350  -->  00:05:29.340
So that brings up
the concept of white space.
100

100

00:05:29.340  -->  00:05:31.220
And the point about white space is, so
101

101

00:05:31.220  -->  00:05:34.860
white space is this space in
between some of your expressions.
102

102

00:05:34.860  -->  00:05:36.490
Your operands and so forth.
103

103

00:05:36.490  -->  00:05:39.210
In the example above,
for example, I put int,
104

104

00:05:39.210  -->  00:05:44.110
there's a space between the word int and
the variable which we've discussed
105

105

00:05:44.110  -->  00:05:48.200
before is to make sure that Java's
aware of those separate things, but
106

106

00:05:48.200  -->  00:05:52.650
whether you have 1 space or whether
you have 10 spaces, Java won't mind.
107

107

00:05:52.650  -->  00:05:55.110
You can even go something like
that if you really wanted to.
108

108

00:05:58.510  -->  00:06:01.550
You can see then that obviously that's
[LAUGH] certainly not the way that
109

109

00:06:01.550  -->  00:06:03.350
I'd recommend you code.
110

110

00:06:03.350  -->  00:06:06.570
But if we run that,
Java's quite happy with that syntax,
111

111

00:06:06.570  -->  00:06:11.040
because what it's doing is, it's looking
at these spaces and, effectively,
112

112

00:06:11.040  -->  00:06:13.700
it's gonna delete out
the spaces internally.
113

113

00:06:13.700  -->  00:06:15.740
And as far as it's concerned,
114

114

00:06:15.740  -->  00:06:19.750
it's going to be exactly the same
internally as that there.
115

115

00:06:20.760  -->  00:06:21.580
So it will figure it out.
116

116

00:06:21.580  -->  00:06:22.850
So generally speaking,
117

117

00:06:22.850  -->  00:06:26.930
it's a good idea to use spaces to clarify
the meaning of particular things.
118

118

00:06:26.930  -->  00:06:31.150
Another common place to put spaces
is in-between variable names and
119

119

00:06:31.150  -->  00:06:32.020
upriders, for example.
120

120

00:06:32.020  -->  00:06:35.960
You can see there I've got a space between
the equal sign and the variable name, and
121

121

00:06:35.960  -->  00:06:41.410
likewise between the equal sign again and
the literal value of 50, as well.
122

122

00:06:41.410  -->  00:06:45.410
So in general, white space,
you can do whatever you like there.
123

123

00:06:45.410  -->  00:06:49.990
And Java will happily ignore the white
space and work quite happily.
124

124

00:06:49.990  -->  00:06:53.460
Next is the concept of indentation.
125

125

00:06:53.460  -->  00:06:57.970
So indentation is indenting your code so
that it's more readable.
126

126

00:06:57.970  -->  00:07:00.490
So looking as a worse case scenario.
127

127

00:07:00.490  -->  00:07:07.880
If we went back and changed this code and
removed all the extra spaces [BLANK
128

128

00:07:07.880  -->  00:07:12.950
AUDIO], so I think you will agree,
if you look at that scenario there,
129

129

00:07:12.950  -->  00:07:17.630
that is a lot harder to read,
to try and figure out where things are.
130

130

00:07:17.630  -->  00:07:18.860
As opposed to this version.
131

131

00:07:22.740  -->  00:07:24.020
Which is a lot more readable.
132

132

00:07:24.020  -->  00:07:27.400
And you can see that things just
sort of stick out a little bit more.
133

133

00:07:27.400  -->  00:07:28.380
And it's just easier to read.
134

134

00:07:28.380  -->  00:07:30.580
So that's the concept of indenting.
135

135

00:07:30.580  -->  00:07:33.560
And generally, the concept is,
you start typing,
136

136

00:07:33.560  -->  00:07:36.890
you normally indent the code
from the method definition.
137

137

00:07:36.890  -->  00:07:40.320
And I know we haven't talked about methods
yet, but we will be talking about that.
138

138

00:07:40.320  -->  00:07:42.460
But you can see, though, the code blocks.
139

139

00:07:42.460  -->  00:07:46.100
As we're topping in different code blocks
it's actually going into the next level,
140

140

00:07:46.100  -->  00:07:48.550
sort of indenting as we go through.
141

141

00:07:48.550  -->  00:07:55.170
So for example, if we have an if there,
if our variable equals 50,
142

142

00:07:55.170  -->  00:08:02.710
you notice how IntelliJ
I just type the brace and pressed enter.
143

143

00:08:02.710  -->  00:08:06.210
And IntelliJ is automatically go on in
four spaces and it did that automatically
144

144

00:08:06.210  -->  00:08:09.620
and that's indenting it, so that when
we print that out it makes more sense.
145

145

00:08:14.220  -->  00:08:16.290
If it didn't do that the code
would look like this.
146

146

00:08:21.020  -->  00:08:23.350
And I'm sure you'd agree,
it'd be a lot harder to read.
147

147

00:08:23.350  -->  00:08:28.250
So the concept of indenting is to make
it easy for you to see the logical flow.
148

148

00:08:29.290  -->  00:08:30.890
Oops, I deleted that.
149

149

00:08:30.890  -->  00:08:32.450
The logical flow of the code.
150

150

00:08:32.450  -->  00:08:36.840
So indenting is important to make sure
that things are as they should be.
151

151

00:08:36.840  -->  00:08:40.030
And one of the cool things is you
can't really go wrong anyway.
152

152

00:08:40.030  -->  00:08:41.500
Because if you do mess
up the indenting and
153

153

00:08:41.500  -->  00:08:43.790
I'm just gonna mess up a few things
here just to show you like so.
154

154

00:08:48.810  -->  00:08:52.390
If you do mess up anyway what you can do
is you can just go up here to the Code
155

155

00:08:52.390  -->  00:08:56.270
menu in IntelliJ, and you can click on
Reformat Code and by doing that that's
156

156

00:08:56.270  -->  00:09:00.200
automatically reformatted it all anyway,
and it's reindented it for you.
157

157

00:09:00.200  -->  00:09:03.720
So when in doubt, go up to the Code menu,
select Reformat Code.
158

158

00:09:03.720  -->  00:09:06.260
Or you can use the appropriate shortcut,
159

159

00:09:06.260  -->  00:09:09.020
which on a Mac you can
see is Cmd+Option+L.
160

160

00:09:09.020  -->  00:09:11.830
But that will be different obviously for
a Windows or a Linux platform.
161

161

00:09:11.830  -->  00:09:16.240
So that's statements,
white space, and indentation.
162

162

00:09:16.240  -->  00:09:19.420
In the next video,
we're going to talk about code blocks.
163

163

00:09:19.420  -->  00:09:22.960
What they are and why they're so
useful when coding in Java.
