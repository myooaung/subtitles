1
1

00:00:04,950  -->  00:00:08,810
in this video we're going to start
taking a look at streams which were
2

2

00:00:08,810  -->  00:00:12,840
introduced in java 8 now when you
think of a stream you might be thinking
3

3

00:00:12,840  -->  00:00:18,170
of IO streams like input stream and output stream but those aren't the type of
4

4

00:00:18,170  -->  00:00:21,720
streams that we're going to be covering
here streams in this context are
5

5

00:00:21,720  -->  00:00:27,480
completely unrelated to input output so
in this video when we referred to a stream
6

6

00:00:27,480  -->  00:00:31,770
we made a sequence of computations so
another way of putting it is a set of
7

7

00:00:31,770  -->  00:00:37,290
computational steps that are chain
together now we saw chaining in the last
8

8

00:00:37,290  -->  00:00:42,540
few videos and we can chain predicates
functions and consumers we do something
9

9

00:00:42,540  -->  00:00:46,980
similar when working with streams let's
start by creating a new console project
10

10

00:00:46,980  -->  00:01:01,140
called streams and inside the main
method we're going to start by creating
11

11

00:01:01,140  -->  00:01:04,410
a list of strings that we're going to be
needing here so make a bit more space
12

12

00:01:04,410  -->  00:01:14,000
so I'm going to create a list of strings
this string....
13

13

00:01:14,000  -->  00:01:21,350
....so we are
14

14

00:01:21,350  -->  00:01:24,890
converting it to an array or more
specifically to list of string objects
15

15

00:01:24,890  -->  00:01:35,960
and we're going to be putting in some
numbers here so...
16

16

00:01:39,280  -->  00:02:00,610
....
17

17

00:02:00,610  -->  00:02:04,330
.....
18

18

00:02:05,200  -->  00:02:14,170
...alright so there's our list and i just use
the arrays as list method to create and
19

19

00:02:14,170  -->  00:02:18,670
populate the list as you saw now looking at
this list let's say that we would like to
20

20

00:02:18,670  -->  00:02:23,890
print out the bingo numbers that are in
column G now we could use a for loop to
21

21

00:02:23,890  -->  00:02:27,730
iterate through the list and print those strings that begin with g but now that
22

22

00:02:27,730  -->  00:02:31,950
we know that we can use the for each
method in a consumer let's have a go at
23

23

00:02:31,950  -->  00:02:39,550
doing that so to print the numbers in the
root G row at the line 12 we
24

24

00:02:39,550  -->  00:02:45,540
could start with something like....
25

25

00:02:45,540  -->  00:03:05,140
....
26

26

00:03:05,140  -->  00:03:11,760
.....I'll just check my code level and make make sure that is set to 8 project
27

27

00:03:15,310  -->  00:03:21,040
....ok
that's obviously all pretty
28

28

00:03:21,040  -->  00:03:25,700
straightforward we're using this starts
with method to find all strings in the list
29

29

00:03:25,700  -->  00:03:29,710
that begins with g if we run this we
should see that the four numbers that
30

30

00:03:29,710  -->  00:03:33,400
are in column G or the columns that got g in
them should actually appear so let's just try
31

31

00:03:33,400  -->  00:03:42,880
running that you can see we're got our
4g number so that's working well let's
32

32

00:03:42,880  -->  00:03:45,760
move this down to the bottom
33

33

00:03:45,760  -->  00:03:50,000
alright so let's now add another
number but we're going to add it to the
34

34

00:03:50,000  -->  00:03:53,870
same column but we're going to use a
lowercase g just to see what happens so
35

35

00:03:53,870  -->  00:04:05,030
going to do.....and if we run this so we
find that we still got the same results
36

36

00:04:05,030  -->  00:04:09,160
as we got last time so in other words
the g64 with the lowercase g wasn't picked up
37

37

00:04:09,160  -->  00:04:12,500
and that's of course because our
test at the moment using starts with a
38

38

00:04:12,500  -->  00:04:20,440
capital G so we go then changes and put
a number....
39

39

00:04:20,440  -->  00:04:25,840
....and that should allow us to see the
fifth number that we added g64 is now
40

40

00:04:25,840  -->  00:04:31,090
showing as well but lets now sort the
strings before we print them because we
41

41

00:04:31,090  -->  00:04:36,940
expect g49 to be printed before g53
we're going to add each item that passes
42

42

00:04:36,940  -->  00:04:40,550
the starts with conditioned
into a new list and once we've checked
43

43

00:04:40,550  -->  00:04:45,110
all the strings we can sort the list but
wait we've got an issue here were using
44

44

00:04:45,110  -->  00:04:50,120
for each which operates on one element
at a time can we declare the list before
45

45

00:04:50,120  -->  00:04:55,190
the for each call and use it with the for each lambda expression argument let's try
46

46

00:04:55,190  -->  00:04:57,280
it and that will keep the print
statement in there while we're doing
47

47

00:04:57,280  -->  00:05:03,860
this so we could do something like
outside of the for each time we can do....
48

48

00:05:03,860  -->  00:05:14,210
....
49

49

00:05:14,210  -->  00:05:24,090
....now IntelliJ
50

50

00:05:24,090  -->  00:05:28,940
is not complaining but remember the
scoping rules when using lambdas now the
51

51

00:05:28,940  -->  00:05:33,300
scope of this lambda is within the scope
of the main method body so we can use
52

52

00:05:33,300  -->  00:05:37,800
variables declared in main in lambda
expressions inside main as long as
53

53

00:05:37,800  -->  00:05:42,120
variables are effectively final in this
case we're changing the contents of a
54

54

00:05:42,120  -->  00:05:46,650
our g numbers list but the object
reference stored in the g numbers variable
55

55

00:05:46,650  -->  00:05:51,000
doesn't change and so G numbers is
effectively final and therefore we can
56

56

00:05:51,000  -->  00:05:55,310
use it within the lambda so now that we
know it will work let's actually remove
57

57

00:05:55,310  -->  00:05:58,970
the print from the lambda and add the code
that's going to do the sorting and
58

58

00:05:58,970  -->  00:06:04,500
printing so I'm just going to remove the
print out there and then outside of the
59

59

00:06:04,500  -->  00:06:09,210
for each because we've got our list of
numbers we want to sort now in the g
60

60

00:06:09,210  -->  00:06:14,150
numbers variable the arraylist that we
created on line 17 so we can do something
61

61

00:06:14,150  -->  00:06:24,560
like.....
62

62

00:06:24,560  -->  00:06:49,340
....
63

63

00:06:49,340  -->  00:06:54,890
....alright let's first just try running
that see that it works and sort things
64

64

00:06:54,890  -->  00:07:00,060
correctly and you can see things that
are now sorted in the right order now we
65

65

00:07:00,060  -->  00:07:03,410
could have used an anonymous class here
for the comparator and add a for loop
66

66

00:07:03,410  -->  00:07:07,500
instead of a for each but this is a lambda
expression section that's why we're
67

67

00:07:07,500  -->  00:07:13,050
using lambdas here now we're using two
for each calls rather than looping we're
68

68

00:07:13,050  -->  00:07:18,060
using a lambda for a comparator and we
don't need to specify the parameters of
69

69

00:07:18,060  -->  00:07:19,990
the parameter types in any of the
lambdas
70

70

00:07:19,990  -->  00:07:23,970
but sometimes like to see them there
for readability so I've kept them there
71

71

00:07:23,970  -->  00:07:27,660
for the sort and print lambdas since
without them we wouldn't be able to tell
72

72

00:07:27,660  -->  00:07:31,530
at a glance that we're working with
strings as we can when upper casing and
73

73

00:07:31,530  -->  00:07:36,610
calling starts with apart from that
perhaps a more concise way to accomplish
74

74

00:07:36,610  -->  00:07:41,250
what we want to do even though this is
already pretty concise code so to
75

75

00:07:41,250  -->  00:07:44,190
create a new list gather all the g
numbers and sort them and print them
76

76

00:07:44,190  -->  00:07:49,270
were using for statements so obviously
creating the g numbers list initially
77

77

00:07:49,270  -->  00:07:53,940
on line 17 now we're then adding all
numbers beginning with g to the list and
78

78

00:07:53,940  -->  00:07:59,220
we're doing that on line 21 we are sorting the
list on line 26 and line 27 we are printing the list
79

79

00:07:59,220  -->  00:08:03,720
now what if i told you that you could
actually do everything there in one
80

80

00:08:03,720  -->  00:08:04,750
statement
81

81

00:08:04,750  -->  00:08:08,940
well this is where streams come in i'm
going to update the code to use a stream
82

82

00:08:08,940  -->  00:08:12,060
and then we're going to actually discuss
it in fact what I'll do here is I will
83

83

00:08:12,060  -->  00:08:15,400
actually just comment out this
code here we got the reference the old
84

84

00:08:15,400  -->  00:08:22,840
material then do the equivalent
code stream we can literally replace
85

85

00:08:22,840  -->  00:08:28,300
that with one line as I mentioned and that
could be some bingo numbers....
86

86

00:08:28,300  -->  00:08:45,450
.....
87

87

00:08:45,450  -->  00:08:59,410
....
88

88

00:08:59,410  -->  00:09:09,670
.....that's actually it
89

89

00:09:09,670  -->  00:09:16,930
alright so let's just run this going to
confirm that it works we can see that has
90

90

00:09:16,930  -->  00:09:22,810
worked it still sorted but did you note that
the number for g64 is now printing with an
91

91

00:09:22,810  -->  00:09:26,620
uppercase G we'll see what happens when
we step through each part of this
92

92

00:09:26,620  -->  00:09:31,720
statement shortly but the first method
we call is stream so its time now to define
93

93

00:09:31,720  -->  00:09:33,520
officially what a stream is
94

94

00:09:33,520  -->  00:09:46,270
now we take a look at the documentation
you can see that oracle defines it as a
95

95

00:09:46,270  -->  00:09:49,780
sequence of elements supporting
sequential and parallel aggregate
96

96

00:09:49,780  -->  00:09:54,790
operations so what does that actually
mean well in practice a stream is a set
97

97

00:09:54,790  -->  00:09:59,080
of object references the stream method
which was added to the collections class
98

98

00:09:59,080  -->  00:10:04,810
in Java 8 creates a stream from a
collection now each object reference in
99

99

00:10:04,810  -->  00:10:09,310
the stream corresponds to an object in
the collection and the ordering of the
100

100

00:10:09,310  -->  00:10:14,380
object reference matches the ordering of
the collection now when we want to use a
101

101

00:10:14,380  -->  00:10:16,870
stream that uses a collection as a source
102

102

00:10:16,870  -->  00:10:22,360
well as its source the stream method
will always be the first call we make
103

103

00:10:22,360  -->  00:10:27,640
back to the source code so note that the
source collection which in this case is
104

104

00:10:27,640  -->  00:10:33,460
the some bingo numbers list won't be
changed when we work streams in fact any
105

105

00:10:33,460  -->  00:10:37,810
stream operations that we use have to
meet two requirements first they must be
106

106

00:10:37,810  -->  00:10:42,400
non-interfering which means that they
don't change the stream source in any
107

107

00:10:42,400  -->  00:10:47,530
way and secondly they must be stateless
so the result of an operation can't
108

108

00:10:47,530  -->  00:10:52,000
depend on any state outside of the
operation example of that would be that
109

109

00:10:52,000  -->  00:10:55,360
it can't depend on variable values in a
previous step
110

110

00:10:55,360  -->  00:11:00,220
so each operation should be seen as an
independent step that's operating on a
111

111

00:11:00,220  -->  00:11:05,470
stream argument so the result here the
stream call is a stream that contains
112

112

00:11:05,470  -->  00:11:10,150
all the items in the some bingo numbers
list in the same order that they occur
113

113

00:11:10,150  -->  00:11:16,990
in the list so next coming down to line
30 we call the map method and we're
114

114

00:11:16,990  -->  00:11:21,070
passing it a method the string . to
uppercase method but note that we've
115

115

00:11:21,070  -->  00:11:25,240
written it is a string colon colon to
uppercase with no parentheses
116

116

00:11:25,240  -->  00:11:29,290
now you may not have actually seen
methods referred to using the colon
117

117

00:11:29,290  -->  00:11:34,720
colon notation now this this notation
is called a method reference so we can
118

118

00:11:34,720  -->  00:11:39,730
use them when all a lambda does is call an
existing method we could have been using
119

119

00:11:39,730  -->  00:11:43,840
them all along but I figured it was a
good place to introduced them here
120

120

00:11:43,840  -->  00:11:45,940
rather earlier on
121

121

00:11:45,940  -->  00:11:50,320
so the map method accepts a function
and from previous videos in this section
122

122

00:11:50,320  -->  00:11:55,150
we know that a function accepts one
argument and returns a value in this
123

123

00:11:55,150  -->  00:11:59,320
case we're mapping a string . to
uppercase method to function so the
124

124

00:11:59,320  -->  00:12:02,740
method itself doesn't accept the
parameter but there is a source string
125

125

00:12:02,740  -->  00:12:08,260
and it's the string object were using to
invoke the method so that's map to the
126

126

00:12:08,260  -->  00:12:13,000
argument function and the return value
is a string returned from to uppercase
127

127

00:12:13,000  -->  00:12:16,660
so another way to look at this if your a
little bit confused by that would be
128

128

00:12:16,660  -->  00:12:20,530
this code here just going to paste some
card on the screen looking at this
129

129

00:12:20,530  -->  00:12:27,430
statement here that effectively would
map to something like so....
130

130

00:12:27,430  -->  00:12:37,540
....that's just another way of sort of
131

131

00:12:37,540  -->  00:12:41,440
showing on the screen there and because the
string . to uppercase method can be
132

132

00:12:41,440  -->  00:12:45,790
mapped to function in this way we can
then pass it to map method as a method
133

133

00:12:45,790  -->  00:12:49,930
reference now there's nothing stopping
us there just delete this
134

134

00:12:49,930  -->  00:12:54,340
extra code here now we could actually come
back here to the map and we could
135

135

00:12:54,340  -->  00:13:03,580
actually written the old way we could've
done something like.....
136

136

00:13:03,580  -->  00:13:08,530
....and that
would be valid as well but here we are
137

137

00:13:08,530  -->  00:13:12,490
looking at this new format with the double colon so put that back as it
138

138

00:13:12,490  -->  00:13:14,830
was before
139

139

00:13:14,830  -->  00:13:18,640
so we use a reference for a method
that takes parameters the compiler has
140

140

00:13:18,640  -->  00:13:22,510
to be able to infer what the
arguments are now we can't use a method
141

141

00:13:22,510  -->  00:13:27,850
reference for the starts with method on line 31 because there's no way for
142

142

00:13:27,850  -->  00:13:32,320
the compiler to know that the argument
should be G and for more information
143

143

00:13:32,320  -->  00:13:40,420
about method references before we finish
the video check out this link useful for
144

144

00:13:40,420  -->  00:13:42,670
you to spend a bit of time looking at
that and just going through that
145

145

00:13:42,670  -->  00:13:43,830
information there
146

146

00:13:43,830  -->  00:13:49,180
alright so let's continue on this in the
next video
